
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00012660  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c6680  000c6680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c66a4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  2003db14  000c66a8  0002db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ae0  2003dd10  2003dd10  0003dd10  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c68a4  000c68a4  000368a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c68cc  000c68cc  000368cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022e47e  00000000  00000000  000368d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f6f  00000000  00000000  00264d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000713b7  00000000  00000000  00285cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f88  00000000  00000000  002f7074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011588  00000000  00000000  002fbffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ffc6  00000000  00000000  0030d584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087e40  00000000  00000000  0035d54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c367  00000000  00000000  003e538a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f9ac  00000000  00000000  005416f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00e fb4f 	bl	c26d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00e fb71 	bl	c2724 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db14 	.word	0x2003db14
   b404c:	000c66a8 	.word	0x000c66a8
   b4050:	2003dd10 	.word	0x2003dd10
   b4054:	2003dd10 	.word	0x2003dd10
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d fbab 	bl	c17bc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c665c 	.word	0x000c665c
   b4080:	000c6680 	.word	0x000c6680

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 be98 	b.w	b4db8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 ffe7 	bl	b605c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d bb4b 	b.w	c172c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 bd83 	b.w	bdba0 <malloc>

000b409a <_Znaj>:
   b409a:	f009 bd81 	b.w	bdba0 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bd87 	b.w	bdbb0 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 bd85 	b.w	bdbb0 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 fc60 	bl	bd974 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd5a5 	.word	0x000bd5a5
   b40bc:	000c4888 	.word	0x000c4888

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:

//ISR Function to calculate bitmasked status number and signal to the main loop that the status is ready
void StatusHandler(){
    statusFlags = 0;                    //Reset status flags to 0, then add up the individual flags
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;    //Bit 3 indicates bot is currently offloading
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;      //Bit 4 indicates the current drive mode
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;     //Bit 6 indicates that the battery is low
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;     //Bit 7 indicates that the Atlas sensors are being logged to the SD card
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;       //Bit 8 indicates neo-m8u GPS is available and receiving non-null data
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;   //Bit 9 indicates the LIS3MDL compass is connected and providing dat
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;       //Bit 10 indicates the SD card is functional and can record data
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;                 //Set flag true, so the main loop will transmit out status to CChub
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dd64 	.word	0x2003dd64
   b4154:	2003dd1c 	.word	0x2003dd1c
   b4158:	2003dd51 	.word	0x2003dd51
   b415c:	2003e0a0 	.word	0x2003e0a0
   b4160:	2003dd99 	.word	0x2003dd99
   b4164:	2003dec8 	.word	0x2003dec8
   b4168:	2003dec1 	.word	0x2003dec1
   b416c:	2003dd50 	.word	0x2003dd50
   b4170:	2003dd2c 	.word	0x2003dd2c
   b4174:	2003dd54 	.word	0x2003dd54
   b4178:	2003e5a0 	.word	0x2003e5a0
   b417c:	2003e5c0 	.word	0x2003e5c0

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b419e:	6943      	ldr	r3, [r0, #20]
   b41a0:	b113      	cbz	r3, b41a8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41a2:	6983      	ldr	r3, [r0, #24]
   b41a4:	300c      	adds	r0, #12
   b41a6:	4718      	bx	r3
            callback();
        }
    }
   b41a8:	4770      	bx	lr

000b41aa <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41aa:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41ac:	2100      	movs	r1, #0
   b41ae:	4604      	mov	r4, r0
   b41b0:	4608      	mov	r0, r1
   b41b2:	f009 f99f 	bl	bd4f4 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41b6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41b8:	4620      	mov	r0, r4
   b41ba:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41bc:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41be:	f009 f9b1 	bl	bd524 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41c2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41c4:	b10c      	cbz	r4, b41ca <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41c6:	2301      	movs	r3, #1
   b41c8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41ca:	2100      	movs	r1, #0
   b41cc:	2001      	movs	r0, #1
   b41ce:	f009 f991 	bl	bd4f4 <os_thread_scheduling>
            }
        }
        if (t) {
   b41d2:	b12c      	cbz	r4, b41e0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41d4:	6823      	ldr	r3, [r4, #0]
   b41d6:	4620      	mov	r0, r4
   b41d8:	689b      	ldr	r3, [r3, #8]
   b41da:	4798      	blx	r3
            t->running = false;
   b41dc:	2300      	movs	r3, #0
   b41de:	7123      	strb	r3, [r4, #4]
        }
    }
   b41e0:	b002      	add	sp, #8
   b41e2:	bd10      	pop	{r4, pc}

000b41e4 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b41e4:	3010      	adds	r0, #16
   b41e6:	f002 bbe5 	b.w	b69b4 <_ZN7FatFile4syncEv>

000b41ea <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41ea:	3010      	adds	r0, #16
   b41ec:	f002 bac6 	b.w	b677c <_ZN7FatFile4peekEv>

000b41f0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41f0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41f2:	2201      	movs	r2, #1
   b41f4:	f10d 0107 	add.w	r1, sp, #7
   b41f8:	3010      	adds	r0, #16
   b41fa:	f002 fa11 	bl	b6620 <_ZN7FatFile4readEPvj>
   b41fe:	2801      	cmp	r0, #1
   b4200:	bf0c      	ite	eq
   b4202:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4206:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b420a:	b003      	add	sp, #12
   b420c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4210 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4210:	3010      	adds	r0, #16
   b4212:	f002 bc59 	b.w	b6ac8 <_ZN7FatFile5writeEPKvj>

000b4216 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4216:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4218:	2201      	movs	r2, #1
   b421a:	f88d 1007 	strb.w	r1, [sp, #7]
   b421e:	3010      	adds	r0, #16
   b4220:	f10d 0107 	add.w	r1, sp, #7
   b4224:	f002 fc50 	bl	b6ac8 <_ZN7FatFile5writeEPKvj>
  }
   b4228:	b003      	add	sp, #12
   b422a:	f85d fb04 	ldr.w	pc, [sp], #4

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b4246:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4248:	6880      	ldr	r0, [r0, #8]
   b424a:	b128      	cbz	r0, b4258 <_ZN5Timer5_stopEjb.isra.0+0x12>
   b424c:	2300      	movs	r3, #0
   b424e:	e9cd 1300 	strd	r1, r3, [sp]
   b4252:	2102      	movs	r1, #2
   b4254:	f009 f96e 	bl	bd534 <os_timer_change>
    }
   b4258:	b003      	add	sp, #12
   b425a:	f85d fb04 	ldr.w	pc, [sp], #4

000b425e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	b2c9      	uxtb	r1, r1
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4718      	bx	r3
	...

000b4268 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4268:	b510      	push	{r4, lr}
   b426a:	4b05      	ldr	r3, [pc, #20]	; (b4280 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b426c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b426e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4270:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4272:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4276:	f009 fb9d 	bl	bd9b4 <led_set_status_active>
}
   b427a:	4620      	mov	r0, r4
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c4ee4 	.word	0x000c4ee4

000b4284 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4284:	b510      	push	{r4, lr}
   b4286:	4604      	mov	r4, r0
}
   b4288:	f7ff ffee 	bl	b4268 <_ZN8particle9LEDStatusD1Ev>
   b428c:	4620      	mov	r0, r4
   b428e:	2120      	movs	r1, #32
   b4290:	f7ff ff07 	bl	b40a2 <_ZdlPvj>
   b4294:	4620      	mov	r0, r4
   b4296:	bd10      	pop	{r4, pc}

000b4298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4298:	4b0a      	ldr	r3, [pc, #40]	; (b42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429a:	b510      	push	{r4, lr}
   b429c:	4604      	mov	r4, r0
   b429e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a0:	f00b fe8e 	bl	bffc0 <_ZN5spark10LogManager8instanceEv>
   b42a4:	4621      	mov	r1, r4
   b42a6:	f00c f8c6 	bl	c0436 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42aa:	f00d f9f7 	bl	c169c <_Z16_fetch_usbserialv>
   b42ae:	f00d f9e9 	bl	c1684 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b2:	4620      	mov	r0, r4
   b42b4:	4b04      	ldr	r3, [pc, #16]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42b6:	f840 3b04 	str.w	r3, [r0], #4
   b42ba:	f00b ff57 	bl	c016c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42be:	4620      	mov	r0, r4
   b42c0:	bd10      	pop	{r4, pc}
   b42c2:	bf00      	nop
   b42c4:	000c4ef8 	.word	0x000c4ef8
   b42c8:	000c4ecc 	.word	0x000c4ecc

000b42cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42cc:	b510      	push	{r4, lr}
   b42ce:	4604      	mov	r4, r0
    }
   b42d0:	f7ff ffe2 	bl	b4298 <_ZN5spark16SerialLogHandlerD1Ev>
   b42d4:	4620      	mov	r0, r4
   b42d6:	2124      	movs	r1, #36	; 0x24
   b42d8:	f7ff fee3 	bl	b40a2 <_ZdlPvj>
   b42dc:	4620      	mov	r0, r4
   b42de:	bd10      	pop	{r4, pc}

000b42e0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b42e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42e2:	4606      	mov	r6, r0
   b42e4:	4614      	mov	r4, r2
   b42e6:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b42e8:	2200      	movs	r2, #0
   b42ea:	4621      	mov	r1, r4
   b42ec:	f7ff ffab 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42f0:	68b0      	ldr	r0, [r6, #8]
   b42f2:	b130      	cbz	r0, b4302 <_ZN5Timer6_startEjb.isra.0+0x22>
   b42f4:	2300      	movs	r3, #0
   b42f6:	e9cd 5300 	strd	r5, r3, [sp]
   b42fa:	4622      	mov	r2, r4
   b42fc:	4619      	mov	r1, r3
   b42fe:	f009 f919 	bl	bd534 <os_timer_change>
    }
   b4302:	b002      	add	sp, #8
   b4304:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4308 <_Z13buttonHandlerv>:
    #endif
    shutdownTimer.stopFromISR();
}

//ISR triggered when button is pressed or released
void buttonHandler(){
   b4308:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){               //If the interrupt was triggered by the button being pressed
   b430a:	2012      	movs	r0, #18
   b430c:	f00d faf0 	bl	c18f0 <digitalRead>
   b4310:	4d08      	ldr	r5, [pc, #32]	; (b4334 <_Z13buttonHandlerv+0x2c>)
   b4312:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b4314:	2201      	movs	r2, #1
   b4316:	b130      	cbz	r0, b4326 <_Z13buttonHandlerv+0x1e>
   b4318:	4807      	ldr	r0, [pc, #28]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b431a:	2100      	movs	r1, #0
   b431c:	f7ff ffe0 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();       //Start the shutdown timer, which will check if the button has been held for long enough
        shutdownActive = true;              //Set flag to true to make LED flash and indicate shutdown initiate
   b4320:	2301      	movs	r3, #1
   b4322:	702b      	strb	r3, [r5, #0]
    }
    else{                                   //If the interrupt was triggered by the button being released
        shutdownTimer.stopFromISR();        //Stop the ISR which will shut off the bot
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
    }
}
   b4324:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b4326:	4601      	mov	r1, r0
   b4328:	4803      	ldr	r0, [pc, #12]	; (b4338 <_Z13buttonHandlerv+0x30>)
   b432a:	f7ff ff8c 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
   b432e:	702c      	strb	r4, [r5, #0]
}
   b4330:	e7f8      	b.n	b4324 <_Z13buttonHandlerv+0x1c>
   b4332:	bf00      	nop
   b4334:	2003e55a 	.word	0x2003e55a
   b4338:	2003e55c 	.word	0x2003e55c

000b433c <_Z11buttonTimerv>:
void buttonTimer(){
   b433c:	b508      	push	{r3, lr}
    if(digitalRead(PWR_BUT)) digitalWrite(PWR_EN, LOW); //Turn off system
   b433e:	2012      	movs	r0, #18
   b4340:	f00d fad6 	bl	c18f0 <digitalRead>
   b4344:	b118      	cbz	r0, b434e <_Z11buttonTimerv+0x12>
   b4346:	2100      	movs	r1, #0
   b4348:	201c      	movs	r0, #28
   b434a:	f00d fab8 	bl	c18be <digitalWrite>
}
   b434e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4352:	4802      	ldr	r0, [pc, #8]	; (b435c <_Z11buttonTimerv+0x20>)
   b4354:	2201      	movs	r2, #1
   b4356:	2100      	movs	r1, #0
   b4358:	f7ff bf75 	b.w	b4246 <_ZN5Timer5_stopEjb.isra.0>
   b435c:	2003e55c 	.word	0x2003e55c

000b4360 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	b40e      	push	{r1, r2, r3}
   b4362:	b503      	push	{r0, r1, lr}
   b4364:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4366:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4368:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b436c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b436e:	f00c fd48 	bl	c0e02 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4372:	b002      	add	sp, #8
   b4374:	f85d eb04 	ldr.w	lr, [sp], #4
   b4378:	b003      	add	sp, #12
   b437a:	4770      	bx	lr

000b437c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b437c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4382:	7922      	ldrb	r2, [r4, #4]
   b4384:	68a3      	ldr	r3, [r4, #8]
   b4386:	b132      	cbz	r2, b4396 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4388:	b9a3      	cbnz	r3, b43b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b438a:	490b      	ldr	r1, [pc, #44]	; (b43b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b438c:	b002      	add	sp, #8
   b438e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4392:	f00c bcf5 	b.w	c0d80 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4396:	4a09      	ldr	r2, [pc, #36]	; (b43bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4398:	7b26      	ldrb	r6, [r4, #12]
   b439a:	4d09      	ldr	r5, [pc, #36]	; (b43c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b439c:	4909      	ldr	r1, [pc, #36]	; (b43c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b439e:	7b64      	ldrb	r4, [r4, #13]
   b43a0:	2e01      	cmp	r6, #1
   b43a2:	bf18      	it	ne
   b43a4:	4629      	movne	r1, r5
   b43a6:	e9cd 1400 	strd	r1, r4, [sp]
   b43aa:	4907      	ldr	r1, [pc, #28]	; (b43c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b43ac:	f7ff ffd8 	bl	b4360 <_ZN5Print6printfEPKcz>
  }
   b43b0:	b002      	add	sp, #8
   b43b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b43b4:	4a05      	ldr	r2, [pc, #20]	; (b43cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b43b6:	e7ef      	b.n	b4398 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b43b8:	000c48ae 	.word	0x000c48ae
   b43bc:	000c606b 	.word	0x000c606b
   b43c0:	000c48aa 	.word	0x000c48aa
   b43c4:	000c48a6 	.word	0x000c48a6
   b43c8:	000c48c4 	.word	0x000c48c4
   b43cc:	000c489d 	.word	0x000c489d

000b43d0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d0:	b40e      	push	{r1, r2, r3}
   b43d2:	b503      	push	{r0, r1, lr}
   b43d4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43d6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43d8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43dc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43de:	f00c fd10 	bl	c0e02 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43e2:	b002      	add	sp, #8
   b43e4:	f85d eb04 	ldr.w	lr, [sp], #4
   b43e8:	b003      	add	sp, #12
   b43ea:	4770      	bx	lr

000b43ec <_Z13motionHandlerv>:
void motionHandler(){
   b43ec:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b43ee:	4d2b      	ldr	r5, [pc, #172]	; (b449c <_Z13motionHandlerv+0xb0>)
   b43f0:	782b      	ldrb	r3, [r5, #0]
   b43f2:	bb3b      	cbnz	r3, b4444 <_Z13motionHandlerv+0x58>
   b43f4:	4e2a      	ldr	r6, [pc, #168]	; (b44a0 <_Z13motionHandlerv+0xb4>)
   b43f6:	7833      	ldrb	r3, [r6, #0]
   b43f8:	2b5a      	cmp	r3, #90	; 0x5a
   b43fa:	d023      	beq.n	b4444 <_Z13motionHandlerv+0x58>
   b43fc:	4c29      	ldr	r4, [pc, #164]	; (b44a4 <_Z13motionHandlerv+0xb8>)
   b43fe:	7823      	ldrb	r3, [r4, #0]
   b4400:	2b5a      	cmp	r3, #90	; 0x5a
   b4402:	d01f      	beq.n	b4444 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4404:	f009 f8de 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b4408:	4b27      	ldr	r3, [pc, #156]	; (b44a8 <_Z13motionHandlerv+0xbc>)
   b440a:	681b      	ldr	r3, [r3, #0]
   b440c:	1ac0      	subs	r0, r0, r3
   b440e:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b4412:	d917      	bls.n	b4444 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b4414:	4b25      	ldr	r3, [pc, #148]	; (b44ac <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b4416:	4826      	ldr	r0, [pc, #152]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b4418:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b441a:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b441c:	4b25      	ldr	r3, [pc, #148]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b441e:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b4420:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4422:	4b25      	ldr	r3, [pc, #148]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4424:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4426:	2201      	movs	r2, #1
   b4428:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b442a:	f00c fd32 	bl	c0e92 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b442e:	7821      	ldrb	r1, [r4, #0]
   b4430:	4822      	ldr	r0, [pc, #136]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4432:	f00c fd2e 	bl	c0e92 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b4436:	f00d f931 	bl	c169c <_Z16_fetch_usbserialv>
   b443a:	4921      	ldr	r1, [pc, #132]	; (b44c0 <_Z13motionHandlerv+0xd4>)
   b443c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4440:	f7ff ffc6 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b4444:	4e1f      	ldr	r6, [pc, #124]	; (b44c4 <_Z13motionHandlerv+0xd8>)
   b4446:	7834      	ldrb	r4, [r6, #0]
   b4448:	bb3c      	cbnz	r4, b449a <_Z13motionHandlerv+0xae>
   b444a:	782b      	ldrb	r3, [r5, #0]
   b444c:	b32b      	cbz	r3, b449a <_Z13motionHandlerv+0xae>
   b444e:	f009 f8b9 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b4452:	4b1d      	ldr	r3, [pc, #116]	; (b44c8 <_Z13motionHandlerv+0xdc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	1ac0      	subs	r0, r0, r3
   b4458:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b445c:	d91d      	bls.n	b449a <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b445e:	4b1b      	ldr	r3, [pc, #108]	; (b44cc <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b4460:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b4462:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4464:	4b0e      	ldr	r3, [pc, #56]	; (b44a0 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4466:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4468:	215a      	movs	r1, #90	; 0x5a
   b446a:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b446c:	4b0f      	ldr	r3, [pc, #60]	; (b44ac <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b446e:	4c0d      	ldr	r4, [pc, #52]	; (b44a4 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b4470:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4472:	4b10      	ldr	r3, [pc, #64]	; (b44b4 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b4474:	480e      	ldr	r0, [pc, #56]	; (b44b0 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4476:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4478:	4b0f      	ldr	r3, [pc, #60]	; (b44b8 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b447a:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b447c:	2201      	movs	r2, #1
   b447e:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4480:	f00c fd07 	bl	c0e92 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4484:	7821      	ldrb	r1, [r4, #0]
   b4486:	480d      	ldr	r0, [pc, #52]	; (b44bc <_Z13motionHandlerv+0xd0>)
   b4488:	f00c fd03 	bl	c0e92 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b448c:	f00d f906 	bl	c169c <_Z16_fetch_usbserialv>
   b4490:	490f      	ldr	r1, [pc, #60]	; (b44d0 <_Z13motionHandlerv+0xe4>)
   b4492:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4496:	f7ff ff9b 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b449a:	bd70      	pop	{r4, r5, r6, pc}
   b449c:	2003dd99 	.word	0x2003dd99
   b44a0:	2003e558 	.word	0x2003e558
   b44a4:	2003e559 	.word	0x2003e559
   b44a8:	2003dddc 	.word	0x2003dddc
   b44ac:	2003de08 	.word	0x2003de08
   b44b0:	2003dd30 	.word	0x2003dd30
   b44b4:	2003e0b1 	.word	0x2003e0b1
   b44b8:	2003e5e4 	.word	0x2003e5e4
   b44bc:	2003dd40 	.word	0x2003dd40
   b44c0:	000c48e1 	.word	0x000c48e1
   b44c4:	2003e5d4 	.word	0x2003e5d4
   b44c8:	2003dde4 	.word	0x2003dde4
   b44cc:	2003e0a1 	.word	0x2003e0a1
   b44d0:	000c492b 	.word	0x000c492b

000b44d4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44d4:	b510      	push	{r4, lr}
      if (_M_manager)
   b44d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44d8:	4604      	mov	r4, r0
      if (_M_manager)
   b44da:	b113      	cbz	r3, b44e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44dc:	2203      	movs	r2, #3
   b44de:	4601      	mov	r1, r0
   b44e0:	4798      	blx	r3
    }
   b44e2:	4620      	mov	r0, r4
   b44e4:	bd10      	pop	{r4, pc}
	...

000b44e8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44e8:	b538      	push	{r3, r4, r5, lr}
   b44ea:	4b10      	ldr	r3, [pc, #64]	; (b452c <_ZN5TimerD1Ev+0x44>)
   b44ec:	6003      	str	r3, [r0, #0]
        if (handle) {
   b44ee:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b44f0:	4604      	mov	r4, r0
        if (handle) {
   b44f2:	b1a3      	cbz	r3, b451e <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b44f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44f8:	2200      	movs	r2, #0
   b44fa:	f7ff fea4 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b44fe:	68a0      	ldr	r0, [r4, #8]
   b4500:	2100      	movs	r1, #0
   b4502:	f009 f83f 	bl	bd584 <os_timer_set_id>
            while (running) {
   b4506:	7923      	ldrb	r3, [r4, #4]
   b4508:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b450c:	b113      	cbz	r3, b4514 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b450e:	f008 ffe9 	bl	bd4e4 <os_thread_yield>
            while (running) {
   b4512:	e7f8      	b.n	b4506 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b4514:	68a0      	ldr	r0, [r4, #8]
   b4516:	4629      	mov	r1, r5
   b4518:	f008 fffc 	bl	bd514 <os_timer_destroy>
            handle = nullptr;
   b451c:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b451e:	f104 000c 	add.w	r0, r4, #12
   b4522:	f7ff ffd7 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   b4526:	4620      	mov	r0, r4
   b4528:	bd38      	pop	{r3, r4, r5, pc}
   b452a:	bf00      	nop
   b452c:	000c4eb8 	.word	0x000c4eb8

000b4530 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4530:	b510      	push	{r4, lr}
   b4532:	4604      	mov	r4, r0
    }
   b4534:	f7ff ffd8 	bl	b44e8 <_ZN5TimerD1Ev>
   b4538:	4620      	mov	r0, r4
   b453a:	211c      	movs	r1, #28
   b453c:	f7ff fdb1 	bl	b40a2 <_ZdlPvj>
   b4540:	4620      	mov	r0, r4
   b4542:	bd10      	pop	{r4, pc}

000b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4544:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4546:	468c      	mov	ip, r1
   b4548:	2500      	movs	r5, #0
   b454a:	4914      	ldr	r1, [pc, #80]	; (b459c <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b454c:	7105      	strb	r5, [r0, #4]
   b454e:	4604      	mov	r4, r0
   b4550:	6085      	str	r5, [r0, #8]
   b4552:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4554:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4558:	b085      	sub	sp, #20
   b455a:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b455c:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4560:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4564:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4568:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b456c:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4570:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4574:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4576:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4578:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b457a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b457c:	6095      	str	r5, [r2, #8]
   b457e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4580:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4582:	e9cd 3500 	strd	r3, r5, [sp]
   b4586:	4a06      	ldr	r2, [pc, #24]	; (b45a0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4588:	4623      	mov	r3, r4
   b458a:	4661      	mov	r1, ip
   b458c:	f104 0008 	add.w	r0, r4, #8
   b4590:	f008 ffb8 	bl	bd504 <os_timer_create>
    }
   b4594:	4620      	mov	r0, r4
   b4596:	b005      	add	sp, #20
   b4598:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b459a:	bf00      	nop
   b459c:	000c4eb8 	.word	0x000c4eb8
   b45a0:	000b41ab 	.word	0x000b41ab

000b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b45a4:	b510      	push	{r4, lr}
   b45a6:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b45a8:	2200      	movs	r2, #0
   b45aa:	7c40      	ldrb	r0, [r0, #17]
   b45ac:	f009 fa3c 	bl	bda28 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b45b0:	7c63      	ldrb	r3, [r4, #17]
   b45b2:	2b0f      	cmp	r3, #15
        d_.period = period;
   b45b4:	bf18      	it	ne
   b45b6:	8320      	strhne	r0, [r4, #24]
}
   b45b8:	bd10      	pop	{r4, pc}
	...

000b45bc <_Z10LEDHandlerv>:

//ISR timer to update the color and pattern of the LED based on the status of the system
void LEDHandler(){
   b45bc:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    //Special LED Modes
    if(shutdownActive){     //The user is holding down the power off button
   b45be:	4b2e      	ldr	r3, [pc, #184]	; (b4678 <_Z10LEDHandlerv+0xbc>)
   b45c0:	781a      	ldrb	r2, [r3, #0]
   b45c2:	4b2e      	ldr	r3, [pc, #184]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45c4:	b162      	cbz	r2, b45e0 <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45c6:	7c5a      	ldrb	r2, [r3, #17]
   b45c8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ca:	bf1c      	itt	ne
   b45cc:	2202      	movne	r2, #2
   b45ce:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45d0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b45d4:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){          //The user has enabled the "Signal" menu item
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b45d6:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b45d8:	4828      	ldr	r0, [pc, #160]	; (b467c <_Z10LEDHandlerv+0xc0>)
   b45da:	f7ff ffe3 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b45de:	bd10      	pop	{r4, pc}
    if(stopActive){         //The user has pressed the stop button on the CChub
   b45e0:	4a27      	ldr	r2, [pc, #156]	; (b4680 <_Z10LEDHandlerv+0xc4>)
   b45e2:	7812      	ldrb	r2, [r2, #0]
   b45e4:	b132      	cbz	r2, b45f4 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45e6:	7c5a      	ldrb	r2, [r3, #17]
   b45e8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ea:	bf1c      	itt	ne
   b45ec:	2202      	movne	r2, #2
   b45ee:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45f0:	4a24      	ldr	r2, [pc, #144]	; (b4684 <_Z10LEDHandlerv+0xc8>)
   b45f2:	e7ef      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(offloadMode){        //The CChub is offloading data over BLE
   b45f4:	4a24      	ldr	r2, [pc, #144]	; (b4688 <_Z10LEDHandlerv+0xcc>)
   b45f6:	7812      	ldrb	r2, [r2, #0]
   b45f8:	b132      	cbz	r2, b4608 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45fa:	7c5a      	ldrb	r2, [r3, #17]
   b45fc:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45fe:	bf1c      	itt	ne
   b4600:	2202      	movne	r2, #2
   b4602:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4604:	22ff      	movs	r2, #255	; 0xff
   b4606:	e7e5      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(signalLED){          //The user has enabled the "Signal" menu item
   b4608:	4a20      	ldr	r2, [pc, #128]	; (b468c <_Z10LEDHandlerv+0xd0>)
   b460a:	7812      	ldrb	r2, [r2, #0]
   b460c:	b132      	cbz	r2, b461c <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b460e:	7c5a      	ldrb	r2, [r3, #17]
   b4610:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4612:	bf1c      	itt	ne
   b4614:	2202      	movne	r2, #2
   b4616:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4618:	4a1d      	ldr	r2, [pc, #116]	; (b4690 <_Z10LEDHandlerv+0xd4>)
   b461a:	e7db      	b.n	b45d4 <_Z10LEDHandlerv+0x18>
    if(lowBattery){     //Flash the status color quickly if the battery is low
   b461c:	4a1d      	ldr	r2, [pc, #116]	; (b4694 <_Z10LEDHandlerv+0xd8>)
   b461e:	7812      	ldrb	r2, [r2, #0]
   b4620:	bb1a      	cbnz	r2, b466a <_Z10LEDHandlerv+0xae>
    else if(driveMode == 2){    //If we're in autonomous mode, do a fade pattern
   b4622:	4a1d      	ldr	r2, [pc, #116]	; (b4698 <_Z10LEDHandlerv+0xdc>)
   b4624:	7812      	ldrb	r2, [r2, #0]
   b4626:	2a02      	cmp	r2, #2
   b4628:	d022      	beq.n	b4670 <_Z10LEDHandlerv+0xb4>
        SetSpeed = LED_SPEED_NORMAL;
   b462a:	2a01      	cmp	r2, #1
   b462c:	bf0b      	itete	eq
   b462e:	210a      	moveq	r1, #10
   b4630:	2114      	movne	r1, #20
   b4632:	2002      	moveq	r0, #2
   b4634:	2001      	movne	r0, #1
    statusMode |= XBeeAvail << 1;
   b4636:	4a19      	ldr	r2, [pc, #100]	; (b469c <_Z10LEDHandlerv+0xe0>)
   b4638:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b463a:	4a19      	ldr	r2, [pc, #100]	; (b46a0 <_Z10LEDHandlerv+0xe4>)
   b463c:	7812      	ldrb	r2, [r2, #0]
   b463e:	0092      	lsls	r2, r2, #2
   b4640:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;          //Create bit mask with each of the available mode shifted into different bits
   b4644:	4c17      	ldr	r4, [pc, #92]	; (b46a4 <_Z10LEDHandlerv+0xe8>)
    statusMode |= BLEAvail << 2;
   b4646:	7824      	ldrb	r4, [r4, #0]
   b4648:	4322      	orrs	r2, r4
   b464a:	3a01      	subs	r2, #1
   b464c:	b2d2      	uxtb	r2, r2
   b464e:	2a06      	cmp	r2, #6
   b4650:	bf9c      	itt	ls
   b4652:	4c15      	ldrls	r4, [pc, #84]	; (b46a8 <_Z10LEDHandlerv+0xec>)
   b4654:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4658:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b465a:	bf88      	it	hi
   b465c:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b4660:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b4662:	bf18      	it	ne
   b4664:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b4666:	615a      	str	r2, [r3, #20]
   b4668:	e7b6      	b.n	b45d8 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b466a:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b466c:	2002      	movs	r0, #2
   b466e:	e7e2      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
        SetSpeed = LED_SPEED_NORMAL;
   b4670:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_FADE;
   b4672:	2003      	movs	r0, #3
   b4674:	e7df      	b.n	b4636 <_Z10LEDHandlerv+0x7a>
   b4676:	bf00      	nop
   b4678:	2003e55a 	.word	0x2003e55a
   b467c:	2003e580 	.word	0x2003e580
   b4680:	2003e5c1 	.word	0x2003e5c1
   b4684:	00ffff00 	.word	0x00ffff00
   b4688:	2003e0a0 	.word	0x2003e0a0
   b468c:	2003e578 	.word	0x2003e578
   b4690:	00ff6000 	.word	0x00ff6000
   b4694:	2003dec8 	.word	0x2003dec8
   b4698:	2003dd99 	.word	0x2003dd99
   b469c:	2003dd64 	.word	0x2003dd64
   b46a0:	2003dd1c 	.word	0x2003dd1c
   b46a4:	2003dd51 	.word	0x2003dd51
   b46a8:	000c4fec 	.word	0x000c4fec

000b46ac <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b46ac:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b46ae:	460a      	mov	r2, r1
   b46b0:	4901      	ldr	r1, [pc, #4]	; (b46b8 <_ZN7FatFile4openEPKci+0xc>)
   b46b2:	6809      	ldr	r1, [r1, #0]
   b46b4:	f002 b9bb 	b.w	b6a2e <_ZN7FatFile4openEPS_PKci>
   b46b8:	2003e614 	.word	0x2003e614

000b46bc <_Z11wdogHandlerv>:
void wdogHandler(){
   b46bc:	b538      	push	{r3, r4, r5, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46be:	f009 f9e7 	bl	bda90 <spark_cloud_flag_connected>
   b46c2:	4c37      	ldr	r4, [pc, #220]	; (b47a0 <_Z11wdogHandlerv+0xe4>)
    if(Particle.connected()) LTEAvail = true;   //If particle cloud is connected, assume that LTE is available
   b46c4:	b358      	cbz	r0, b471e <_Z11wdogHandlerv+0x62>
   b46c6:	2301      	movs	r3, #1
        LTEAvail = false;
   b46c8:	7023      	strb	r3, [r4, #0]
   b46ca:	f008 ff7b 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){   //If the time since the last XBee message is too long, print warning and set status flag to false
   b46ce:	4b35      	ldr	r3, [pc, #212]	; (b47a4 <_Z11wdogHandlerv+0xe8>)
   b46d0:	4c35      	ldr	r4, [pc, #212]	; (b47a8 <_Z11wdogHandlerv+0xec>)
   b46d2:	681b      	ldr	r3, [r3, #0]
   b46d4:	f241 3288 	movw	r2, #5000	; 0x1388
   b46d8:	1ac0      	subs	r0, r0, r3
   b46da:	4290      	cmp	r0, r2
   b46dc:	d832      	bhi.n	b4744 <_Z11wdogHandlerv+0x88>
   b46de:	2b00      	cmp	r3, #0
   b46e0:	d030      	beq.n	b4744 <_Z11wdogHandlerv+0x88>
    else XBeeAvail = true;
   b46e2:	2301      	movs	r3, #1
        XBeeAvail = false;
   b46e4:	7023      	strb	r3, [r4, #0]
   b46e6:	f008 ff6d 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){      //If the time since the last BLE message is too long, print warning and set status flag to false
   b46ea:	4b30      	ldr	r3, [pc, #192]	; (b47ac <_Z11wdogHandlerv+0xf0>)
   b46ec:	4d30      	ldr	r5, [pc, #192]	; (b47b0 <_Z11wdogHandlerv+0xf4>)
   b46ee:	681b      	ldr	r3, [r3, #0]
   b46f0:	f241 3288 	movw	r2, #5000	; 0x1388
   b46f4:	1ac0      	subs	r0, r0, r3
   b46f6:	4290      	cmp	r0, r2
   b46f8:	d836      	bhi.n	b4768 <_Z11wdogHandlerv+0xac>
   b46fa:	2b00      	cmp	r3, #0
   b46fc:	d034      	beq.n	b4768 <_Z11wdogHandlerv+0xac>
    else BLEAvail = true;
   b46fe:	2301      	movs	r3, #1
    if(stopActive && millis() - stopActive > STOP_RST_TIME) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b4700:	4c2c      	ldr	r4, [pc, #176]	; (b47b4 <_Z11wdogHandlerv+0xf8>)
        else BLEAvail = false;
   b4702:	702b      	strb	r3, [r5, #0]
    if(stopActive && millis() - stopActive > STOP_RST_TIME) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b4704:	7823      	ldrb	r3, [r4, #0]
   b4706:	b14b      	cbz	r3, b471c <_Z11wdogHandlerv+0x60>
   b4708:	f008 ff5c 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b470c:	7823      	ldrb	r3, [r4, #0]
   b470e:	1ac0      	subs	r0, r0, r3
   b4710:	f242 7310 	movw	r3, #10000	; 0x2710
   b4714:	4298      	cmp	r0, r3
   b4716:	bf84      	itt	hi
   b4718:	2300      	movhi	r3, #0
   b471a:	7023      	strbhi	r3, [r4, #0]
}
   b471c:	bd38      	pop	{r3, r4, r5, pc}
    else if(LTEAvail){
   b471e:	7823      	ldrb	r3, [r4, #0]
   b4720:	2b00      	cmp	r3, #0
   b4722:	d0d2      	beq.n	b46ca <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4724:	4824      	ldr	r0, [pc, #144]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4726:	7c03      	ldrb	r3, [r0, #16]
   b4728:	b92b      	cbnz	r3, b4736 <_Z11wdogHandlerv+0x7a>
   b472a:	4924      	ldr	r1, [pc, #144]	; (b47bc <_Z11wdogHandlerv+0x100>)
   b472c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4730:	3010      	adds	r0, #16
   b4732:	f7ff ffbb 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] LTE Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4736:	4922      	ldr	r1, [pc, #136]	; (b47c0 <_Z11wdogHandlerv+0x104>)
   b4738:	481f      	ldr	r0, [pc, #124]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
   b473a:	2205      	movs	r2, #5
   b473c:	f7ff fe48 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4740:	2300      	movs	r3, #0
   b4742:	e7c1      	b.n	b46c8 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4744:	7823      	ldrb	r3, [r4, #0]
   b4746:	b16b      	cbz	r3, b4764 <_Z11wdogHandlerv+0xa8>
   b4748:	481b      	ldr	r0, [pc, #108]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b474a:	7c03      	ldrb	r3, [r0, #16]
   b474c:	b92b      	cbnz	r3, b475a <_Z11wdogHandlerv+0x9e>
   b474e:	491b      	ldr	r1, [pc, #108]	; (b47bc <_Z11wdogHandlerv+0x100>)
   b4750:	f244 2202 	movw	r2, #16898	; 0x4202
   b4754:	3010      	adds	r0, #16
   b4756:	f7ff ffa9 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b475a:	491a      	ldr	r1, [pc, #104]	; (b47c4 <_Z11wdogHandlerv+0x108>)
   b475c:	4816      	ldr	r0, [pc, #88]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
   b475e:	2205      	movs	r2, #5
   b4760:	f7ff fe36 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4764:	2300      	movs	r3, #0
   b4766:	e7bd      	b.n	b46e4 <_Z11wdogHandlerv+0x28>
        if(BLEAvail && BLERxTime){
   b4768:	782a      	ldrb	r2, [r5, #0]
   b476a:	b172      	cbz	r2, b478a <_Z11wdogHandlerv+0xce>
   b476c:	b16b      	cbz	r3, b478a <_Z11wdogHandlerv+0xce>
   b476e:	4812      	ldr	r0, [pc, #72]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4770:	7c03      	ldrb	r3, [r0, #16]
   b4772:	b92b      	cbnz	r3, b4780 <_Z11wdogHandlerv+0xc4>
   b4774:	4911      	ldr	r1, [pc, #68]	; (b47bc <_Z11wdogHandlerv+0x100>)
   b4776:	f244 2202 	movw	r2, #16898	; 0x4202
   b477a:	3010      	adds	r0, #16
   b477c:	f7ff ff96 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b4780:	4911      	ldr	r1, [pc, #68]	; (b47c8 <_Z11wdogHandlerv+0x10c>)
   b4782:	480d      	ldr	r0, [pc, #52]	; (b47b8 <_Z11wdogHandlerv+0xfc>)
   b4784:	2205      	movs	r2, #5
   b4786:	f7ff fe23 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(BLE.connected() && XBeeAvail) BLEAvail = true;
   b478a:	f009 fde1 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b478e:	f009 fe3d 	bl	be40c <_ZNK8particle14BleLocalDevice9connectedEv>
   b4792:	b110      	cbz	r0, b479a <_Z11wdogHandlerv+0xde>
   b4794:	7823      	ldrb	r3, [r4, #0]
   b4796:	2b00      	cmp	r3, #0
   b4798:	d1b1      	bne.n	b46fe <_Z11wdogHandlerv+0x42>
        else BLEAvail = false;
   b479a:	2300      	movs	r3, #0
   b479c:	e7b0      	b.n	b4700 <_Z11wdogHandlerv+0x44>
   b479e:	bf00      	nop
   b47a0:	2003dd51 	.word	0x2003dd51
   b47a4:	2003dd68 	.word	0x2003dd68
   b47a8:	2003dd64 	.word	0x2003dd64
   b47ac:	2003dd28 	.word	0x2003dd28
   b47b0:	2003dd1c 	.word	0x2003dd1c
   b47b4:	2003e5c1 	.word	0x2003e5c1
   b47b8:	2003de68 	.word	0x2003de68
   b47bc:	2003ddba 	.word	0x2003ddba
   b47c0:	000c4985 	.word	0x000c4985
   b47c4:	000c49d5 	.word	0x000c49d5
   b47c8:	000c4a26 	.word	0x000c4a26

000b47cc <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47cc:	b530      	push	{r4, r5, lr}
   b47ce:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b47d0:	4b1b      	ldr	r3, [pc, #108]	; (b4840 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b47d2:	9300      	str	r3, [sp, #0]
   b47d4:	7913      	ldrb	r3, [r2, #4]
   b47d6:	f88d 3004 	strb.w	r3, [sp, #4]
   b47da:	6893      	ldr	r3, [r2, #8]
   b47dc:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47de:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47e2:	8993      	ldrh	r3, [r2, #12]
   b47e4:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47e8:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47ea:	460a      	mov	r2, r1
   b47ec:	466b      	mov	r3, sp
   b47ee:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b47f2:	4628      	mov	r0, r5
   b47f4:	f003 f84c 	bl	b7890 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b47f8:	b910      	cbnz	r0, b4800 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b47fa:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b47fc:	b005      	add	sp, #20
   b47fe:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b4800:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4802:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4806:	4628      	mov	r0, r5
   b4808:	f002 f90a 	bl	b6a20 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b480c:	2101      	movs	r1, #1
   b480e:	4620      	mov	r0, r4
   b4810:	f002 fee9 	bl	b75e6 <_ZN9FatVolume4initEh>
   b4814:	4601      	mov	r1, r0
   b4816:	b168      	cbz	r0, b4834 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4818:	4621      	mov	r1, r4
   b481a:	4628      	mov	r0, r5
   b481c:	f001 fefa 	bl	b6614 <_ZN7FatFile8openRootEP9FatVolume>
   b4820:	2800      	cmp	r0, #0
   b4822:	d0ea      	beq.n	b47fa <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4824:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4828:	f013 0f70 	tst.w	r3, #112	; 0x70
   b482c:	d0e5      	beq.n	b47fa <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b482e:	4b05      	ldr	r3, [pc, #20]	; (b4844 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4830:	601d      	str	r5, [r3, #0]
    return true;
   b4832:	e7e3      	b.n	b47fc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4834:	4620      	mov	r0, r4
   b4836:	f002 fed6 	bl	b75e6 <_ZN9FatVolume4initEh>
   b483a:	2800      	cmp	r0, #0
   b483c:	d1ec      	bne.n	b4818 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b483e:	e7dc      	b.n	b47fa <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4840:	000c4ea4 	.word	0x000c4ea4
   b4844:	2003e614 	.word	0x2003e614

000b4848 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b484c:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b484e:	7883      	ldrb	r3, [r0, #2]
   b4850:	2b42      	cmp	r3, #66	; 0x42
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4852:	af04      	add	r7, sp, #16
   b4854:	4604      	mov	r4, r0
   b4856:	468a      	mov	sl, r1
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b4858:	d145      	bne.n	b48e6 <_Z14processCommandPKchb+0x9e>
   b485a:	78c3      	ldrb	r3, [r0, #3]
   b485c:	2b31      	cmp	r3, #49	; 0x31
   b485e:	f040 80d4 	bne.w	b4a0a <_Z14processCommandPKchb+0x1c2>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4862:	4620      	mov	r0, r4
   b4864:	f00d ffe9 	bl	c283a <strlen>
   b4868:	3801      	subs	r0, #1
   b486a:	f020 0007 	bic.w	r0, r0, #7
        }
   b486e:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4870:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b4874:	4620      	mov	r0, r4
   b4876:	f00d ffe0 	bl	c283a <strlen>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b487a:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b487c:	4428      	add	r0, r5
   b487e:	2600      	movs	r6, #0
   b4880:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4884:	4620      	mov	r0, r4
        cmdStr[3] = '\0';                   //Set null at end of command string
   b4886:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4888:	813e      	strh	r6, [r7, #8]
   b488a:	72be      	strb	r6, [r7, #10]
   b488c:	f00d ffd5 	bl	c283a <strlen>
   b4890:	4420      	add	r0, r4
   b4892:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4896:	723b      	strb	r3, [r7, #8]
   b4898:	4620      	mov	r0, r4
   b489a:	f00d ffce 	bl	c283a <strlen>
   b489e:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b48a0:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b48a2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b48a6:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b48a8:	2210      	movs	r2, #16
   b48aa:	f107 0008 	add.w	r0, r7, #8
   b48ae:	f00e feef 	bl	c3690 <strtol>
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48b2:	2604      	movs	r6, #4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b48b4:	4681      	mov	r9, r0
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48b6:	4620      	mov	r0, r4
   b48b8:	f00d ffbf 	bl	c283a <strlen>
   b48bc:	3802      	subs	r0, #2
   b48be:	4286      	cmp	r6, r0
   b48c0:	d217      	bcs.n	b48f2 <_Z14processCommandPKchb+0xaa>
            if(i < 7) cmdStr[i-4] = command[i];
   b48c2:	2e06      	cmp	r6, #6
   b48c4:	bf9b      	ittet	ls
   b48c6:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b48ca:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b48cc:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b48ce:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b48d0:	bf8c      	ite	hi
   b48d2:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b48d4:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48d8:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b48dc:	bf88      	it	hi
   b48de:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48e2:	b2f6      	uxtb	r6, r6
   b48e4:	e7e7      	b.n	b48b6 <_Z14processCommandPKchb+0x6e>
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b48e6:	2b41      	cmp	r3, #65	; 0x41
   b48e8:	f040 808f 	bne.w	b4a0a <_Z14processCommandPKchb+0x1c2>
   b48ec:	78c3      	ldrb	r3, [r0, #3]
   b48ee:	2b42      	cmp	r3, #66	; 0x42
   b48f0:	e7b5      	b.n	b485e <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){      //Check if the received checksum matches the length of the string received
   b48f2:	fa5f f989 	uxtb.w	r9, r9
   b48f6:	4548      	cmp	r0, r9
   b48f8:	d019      	beq.n	b492e <_Z14processCommandPKchb+0xe6>
    return m_attr;
   b48fa:	4d93      	ldr	r5, [pc, #588]	; (b4b48 <_Z14processCommandPKchb+0x300>)
            if(!logFile.isOpen()){  //Print to SD Card
   b48fc:	7c2b      	ldrb	r3, [r5, #16]
   b48fe:	b983      	cbnz	r3, b4922 <_Z14processCommandPKchb+0xda>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4900:	4992      	ldr	r1, [pc, #584]	; (b4b4c <_Z14processCommandPKchb+0x304>)
   b4902:	f244 2202 	movw	r2, #16898	; 0x4202
   b4906:	f105 0010 	add.w	r0, r5, #16
   b490a:	f7ff fecf 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b490e:	4990      	ldr	r1, [pc, #576]	; (b4b50 <_Z14processCommandPKchb+0x308>)
   b4910:	4622      	mov	r2, r4
   b4912:	4628      	mov	r0, r5
   b4914:	f7ff fd5c 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4918:	f105 0010 	add.w	r0, r5, #16
                logFile.close();
   b491c:	f002 f880 	bl	b6a20 <_ZN7FatFile5closeEv>
   b4920:	e072      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4922:	498b      	ldr	r1, [pc, #556]	; (b4b50 <_Z14processCommandPKchb+0x308>)
   b4924:	4622      	mov	r2, r4
   b4926:	4628      	mov	r0, r5
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4928:	f7ff fd52 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b492c:	e06c      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        if(!strcmp(cmdStr,"ctl")){      //Control command from CC that contains data about the drive mode, target latitude and longitude, and offloading
   b492e:	4989      	ldr	r1, [pc, #548]	; (b4b54 <_Z14processCommandPKchb+0x30c>)
   b4930:	f107 000c 	add.w	r0, r7, #12
   b4934:	f00d ff52 	bl	c27dc <strcmp>
   b4938:	2800      	cmp	r0, #0
   b493a:	d139      	bne.n	b49b0 <_Z14processCommandPKchb+0x168>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b493c:	4b86      	ldr	r3, [pc, #536]	; (b4b58 <_Z14processCommandPKchb+0x310>)
   b493e:	9302      	str	r3, [sp, #8]
   b4940:	4b86      	ldr	r3, [pc, #536]	; (b4b5c <_Z14processCommandPKchb+0x314>)
   b4942:	9301      	str	r3, [sp, #4]
   b4944:	4b86      	ldr	r3, [pc, #536]	; (b4b60 <_Z14processCommandPKchb+0x318>)
   b4946:	4987      	ldr	r1, [pc, #540]	; (b4b64 <_Z14processCommandPKchb+0x31c>)
   b4948:	9300      	str	r3, [sp, #0]
   b494a:	f107 0210 	add.w	r2, r7, #16
   b494e:	f107 031c 	add.w	r3, r7, #28
   b4952:	4628      	mov	r0, r5
   b4954:	f009 f944 	bl	bdbe0 <sscanf>
            targetLat = atof(tLat);     //Convert latitude string to float
   b4958:	f107 0010 	add.w	r0, r7, #16
   b495c:	f00d fe9a 	bl	c2694 <atof>
   b4960:	ec51 0b10 	vmov	r0, r1, d0
   b4964:	f00d fe22 	bl	c25ac <__aeabi_d2f>
   b4968:	f8df 9270 	ldr.w	r9, [pc, #624]	; b4bdc <_Z14processCommandPKchb+0x394>
            targetLon = atof(tLon);     //Convert longitude string to float
   b496c:	4e7e      	ldr	r6, [pc, #504]	; (b4b68 <_Z14processCommandPKchb+0x320>)
            targetLat = atof(tLat);     //Convert latitude string to float
   b496e:	f8c9 0000 	str.w	r0, [r9]
            targetLon = atof(tLon);     //Convert longitude string to float
   b4972:	f107 001c 	add.w	r0, r7, #28
   b4976:	f00d fe8d 	bl	c2694 <atof>
   b497a:	ec51 0b10 	vmov	r0, r1, d0
   b497e:	f00d fe15 	bl	c25ac <__aeabi_d2f>
   b4982:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b4984:	f00c fe8a 	bl	c169c <_Z16_fetch_usbserialv>
   b4988:	4604      	mov	r4, r0
   b498a:	f8d9 0000 	ldr.w	r0, [r9]
   b498e:	f00d fad3 	bl	c1f38 <__aeabi_f2d>
   b4992:	4602      	mov	r2, r0
   b4994:	460b      	mov	r3, r1
   b4996:	6830      	ldr	r0, [r6, #0]
   b4998:	e9c7 2300 	strd	r2, r3, [r7]
   b499c:	f00d facc 	bl	c1f38 <__aeabi_f2d>
   b49a0:	e9cd 0100 	strd	r0, r1, [sp]
   b49a4:	e9d7 2300 	ldrd	r2, r3, [r7]
   b49a8:	4970      	ldr	r1, [pc, #448]	; (b4b6c <_Z14processCommandPKchb+0x324>)
   b49aa:	4620      	mov	r0, r4
   b49ac:	f7ff fd10 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b49b0:	496f      	ldr	r1, [pc, #444]	; (b4b70 <_Z14processCommandPKchb+0x328>)
   b49b2:	f107 000c 	add.w	r0, r7, #12
   b49b6:	f00d ff11 	bl	c27dc <strcmp>
   b49ba:	4604      	mov	r4, r0
   b49bc:	bb48      	cbnz	r0, b4a12 <_Z14processCommandPKchb+0x1ca>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};  //Get the first three characters of the data for the left target speed
   b49be:	782b      	ldrb	r3, [r5, #0]
   b49c0:	743b      	strb	r3, [r7, #16]
   b49c2:	786b      	ldrb	r3, [r5, #1]
   b49c4:	747b      	strb	r3, [r7, #17]
   b49c6:	78ab      	ldrb	r3, [r5, #2]
   b49c8:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49ca:	78eb      	ldrb	r3, [r5, #3]
   b49cc:	773b      	strb	r3, [r7, #28]
   b49ce:	792b      	ldrb	r3, [r5, #4]
   b49d0:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49d2:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49d6:	796b      	ldrb	r3, [r5, #5]
   b49d8:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49da:	f00d fe5e 	bl	c269a <atoi>
   b49de:	4d65      	ldr	r5, [pc, #404]	; (b4b74 <_Z14processCommandPKchb+0x32c>)
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49e0:	4e65      	ldr	r6, [pc, #404]	; (b4b78 <_Z14processCommandPKchb+0x330>)
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49e2:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49e4:	f107 001c 	add.w	r0, r7, #28
   b49e8:	f00d fe57 	bl	c269a <atoi>
   b49ec:	7030      	strb	r0, [r6, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b49ee:	f00c fe55 	bl	c169c <_Z16_fetch_usbserialv>
   b49f2:	7833      	ldrb	r3, [r6, #0]
   b49f4:	782a      	ldrb	r2, [r5, #0]
   b49f6:	4961      	ldr	r1, [pc, #388]	; (b4b7c <_Z14processCommandPKchb+0x334>)
   b49f8:	f7ff fcea 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b49fc:	f008 fde2 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();         //Update timer for the watchdog that a motor speed was received from CC hub
   b4a00:	4b5f      	ldr	r3, [pc, #380]	; (b4b80 <_Z14processCommandPKchb+0x338>)
   b4a02:	6018      	str	r0, [r3, #0]
            driveMode = 0;                  //In case we missed the switch from an autonomous to manual mode, switch to manual mode
   b4a04:	4b56      	ldr	r3, [pc, #344]	; (b4b60 <_Z14processCommandPKchb+0x318>)
   b4a06:	701c      	strb	r4, [r3, #0]
   b4a08:	46c5      	mov	sp, r8
}
   b4a0a:	3728      	adds	r7, #40	; 0x28
   b4a0c:	46bd      	mov	sp, r7
   b4a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(!strcmp(cmdStr,"req")){     //Data Request from CChub to get the bundle of sensor data and transmit it out
   b4a12:	495c      	ldr	r1, [pc, #368]	; (b4b84 <_Z14processCommandPKchb+0x33c>)
   b4a14:	f107 000c 	add.w	r0, r7, #12
   b4a18:	f00d fee0 	bl	c27dc <strcmp>
   b4a1c:	b918      	cbnz	r0, b4a26 <_Z14processCommandPKchb+0x1de>
            requestActive = mode;           //Set flag, as it's not possible to use 2/3 communication modes in an interrupt handler (which is where processCommand is called from)
   b4a1e:	4b5a      	ldr	r3, [pc, #360]	; (b4b88 <_Z14processCommandPKchb+0x340>)
   b4a20:	f883 a000 	strb.w	sl, [r3]
   b4a24:	e7f0      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        else if(!strcmp(cmdStr,"pts")){     //Command used for debugging, which allows the CChub (or any bluetooth device) to print a string to the console and to the SD card
   b4a26:	4959      	ldr	r1, [pc, #356]	; (b4b8c <_Z14processCommandPKchb+0x344>)
   b4a28:	f107 000c 	add.w	r0, r7, #12
   b4a2c:	f00d fed6 	bl	c27dc <strcmp>
   b4a30:	b9d0      	cbnz	r0, b4a68 <_Z14processCommandPKchb+0x220>
   b4a32:	4c45      	ldr	r4, [pc, #276]	; (b4b48 <_Z14processCommandPKchb+0x300>)
            Serial.println(dataStr);        //Print to console
   b4a34:	f00c fe32 	bl	c169c <_Z16_fetch_usbserialv>
   b4a38:	4629      	mov	r1, r5
   b4a3a:	f00c f9b8 	bl	c0dae <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){          //Print to SD card
   b4a3e:	7c23      	ldrb	r3, [r4, #16]
   b4a40:	b973      	cbnz	r3, b4a60 <_Z14processCommandPKchb+0x218>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a42:	4942      	ldr	r1, [pc, #264]	; (b4b4c <_Z14processCommandPKchb+0x304>)
   b4a44:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a48:	f104 0010 	add.w	r0, r4, #16
   b4a4c:	f7ff fe2e 	bl	b46ac <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a50:	494f      	ldr	r1, [pc, #316]	; (b4b90 <_Z14processCommandPKchb+0x348>)
   b4a52:	462a      	mov	r2, r5
   b4a54:	4620      	mov	r0, r4
   b4a56:	f7ff fcbb 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a5a:	f104 0010 	add.w	r0, r4, #16
   b4a5e:	e75d      	b.n	b491c <_Z14processCommandPKchb+0xd4>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a60:	494b      	ldr	r1, [pc, #300]	; (b4b90 <_Z14processCommandPKchb+0x348>)
   b4a62:	462a      	mov	r2, r5
   b4a64:	4620      	mov	r0, r4
   b4a66:	e75f      	b.n	b4928 <_Z14processCommandPKchb+0xe0>
        else if(!strcmp(cmdStr,"spc")){         //Incoming communication status from CChub, this data is used in addition to control strings to determine which communication methods are available between this bot and CChub
   b4a68:	494a      	ldr	r1, [pc, #296]	; (b4b94 <_Z14processCommandPKchb+0x34c>)
   b4a6a:	f107 000c 	add.w	r0, r7, #12
   b4a6e:	f00d feb5 	bl	c27dc <strcmp>
   b4a72:	b920      	cbnz	r0, b4a7e <_Z14processCommandPKchb+0x236>
   b4a74:	f008 fda6 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();          //Update timer with the current time, and the watchdog will automatically set the flags based on this timer and the current time
   b4a78:	4b47      	ldr	r3, [pc, #284]	; (b4b98 <_Z14processCommandPKchb+0x350>)
   b4a7a:	6018      	str	r0, [r3, #0]
   b4a7c:	e7c4      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        else if(!strcmp(cmdStr,"hwa")){         //Hello-world acknowledge command from the CCHub, which will bring this bot out of pairing mode on startup
   b4a7e:	4947      	ldr	r1, [pc, #284]	; (b4b9c <_Z14processCommandPKchb+0x354>)
   b4a80:	f107 000c 	add.w	r0, r7, #12
   b4a84:	f00d feaa 	bl	c27dc <strcmp>
   b4a88:	b910      	cbnz	r0, b4a90 <_Z14processCommandPKchb+0x248>
            waitForConnection = false;          //Setup loop waits for this to be set true before moving into main loop
   b4a8a:	4b45      	ldr	r3, [pc, #276]	; (b4ba0 <_Z14processCommandPKchb+0x358>)
   b4a8c:	7018      	strb	r0, [r3, #0]
   b4a8e:	e7bb      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        else if(!strcmp(cmdStr,"dmp")){         //Enter SD Card "Dump Mode" for Bluetooth offloading
   b4a90:	4944      	ldr	r1, [pc, #272]	; (b4ba4 <_Z14processCommandPKchb+0x35c>)
   b4a92:	f107 000c 	add.w	r0, r7, #12
   b4a96:	f00d fea1 	bl	c27dc <strcmp>
   b4a9a:	b978      	cbnz	r0, b4abc <_Z14processCommandPKchb+0x274>
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4a9c:	4b42      	ldr	r3, [pc, #264]	; (b4ba8 <_Z14processCommandPKchb+0x360>)
            status.setSpeed(LED_SPEED_FAST);
   b4a9e:	4843      	ldr	r0, [pc, #268]	; (b4bac <_Z14processCommandPKchb+0x364>)
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4aa0:	2201      	movs	r2, #1
   b4aa2:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4aa4:	4b41      	ldr	r3, [pc, #260]	; (b4bac <_Z14processCommandPKchb+0x364>)
   b4aa6:	7c5a      	ldrb	r2, [r3, #17]
   b4aa8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4aaa:	bf1c      	itt	ne
   b4aac:	2202      	movne	r2, #2
   b4aae:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4ab0:	211e      	movs	r1, #30
    d_.color = color;
   b4ab2:	22ff      	movs	r2, #255	; 0xff
   b4ab4:	615a      	str	r2, [r3, #20]
   b4ab6:	f7ff fd75 	bl	b45a4 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4aba:	e7a5      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        else if(!strcmp(cmdStr,"egp")){         //Emulated GPS point for testing purposes. Set the target latitude and longitude which allows testing of the distance and bearing functions for the GPS and compass
   b4abc:	493c      	ldr	r1, [pc, #240]	; (b4bb0 <_Z14processCommandPKchb+0x368>)
   b4abe:	f107 000c 	add.w	r0, r7, #12
   b4ac2:	f00d fe8b 	bl	c27dc <strcmp>
   b4ac6:	b9e0      	cbnz	r0, b4b02 <_Z14processCommandPKchb+0x2ba>
            sscanf(dataStr,"%s %s",tLat,tLon);      //Scan in the target latitude and longitude from the data string
   b4ac8:	f107 0210 	add.w	r2, r7, #16
   b4acc:	f107 031c 	add.w	r3, r7, #28
   b4ad0:	4938      	ldr	r1, [pc, #224]	; (b4bb4 <_Z14processCommandPKchb+0x36c>)
   b4ad2:	4628      	mov	r0, r5
   b4ad4:	f009 f884 	bl	bdbe0 <sscanf>
            latitude = atof(tLat);              //Convert strings with latitude and longitude to a float variable
   b4ad8:	f107 0010 	add.w	r0, r7, #16
   b4adc:	f00d fdda 	bl	c2694 <atof>
   b4ae0:	ec51 0b10 	vmov	r0, r1, d0
   b4ae4:	f00d fd62 	bl	c25ac <__aeabi_d2f>
   b4ae8:	4b33      	ldr	r3, [pc, #204]	; (b4bb8 <_Z14processCommandPKchb+0x370>)
   b4aea:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4aec:	f107 001c 	add.w	r0, r7, #28
   b4af0:	f00d fdd0 	bl	c2694 <atof>
   b4af4:	ec51 0b10 	vmov	r0, r1, d0
   b4af8:	f00d fd58 	bl	c25ac <__aeabi_d2f>
   b4afc:	4b2f      	ldr	r3, [pc, #188]	; (b4bbc <_Z14processCommandPKchb+0x374>)
   b4afe:	6018      	str	r0, [r3, #0]
   b4b00:	e782      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
        else if(!strcmp(cmdStr,"stp")){         //Stop Command (Emergency stop for motors)
   b4b02:	492f      	ldr	r1, [pc, #188]	; (b4bc0 <_Z14processCommandPKchb+0x378>)
   b4b04:	f107 000c 	add.w	r0, r7, #12
   b4b08:	f00d fe68 	bl	c27dc <strcmp>
   b4b0c:	2800      	cmp	r0, #0
   b4b0e:	f47f af7b 	bne.w	b4a08 <_Z14processCommandPKchb+0x1c0>
            driveMode = 0;                      //Set drive mode back to manual mode
   b4b12:	4b13      	ldr	r3, [pc, #76]	; (b4b60 <_Z14processCommandPKchb+0x318>)
   b4b14:	7018      	strb	r0, [r3, #0]
            setLSpeed = 90;                     //Stop motors
   b4b16:	4b17      	ldr	r3, [pc, #92]	; (b4b74 <_Z14processCommandPKchb+0x32c>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b18:	482a      	ldr	r0, [pc, #168]	; (b4bc4 <_Z14processCommandPKchb+0x37c>)
            setLSpeed = 90;                     //Stop motors
   b4b1a:	245a      	movs	r4, #90	; 0x5a
   b4b1c:	701c      	strb	r4, [r3, #0]
            setRSpeed = 90;                 
   b4b1e:	4b16      	ldr	r3, [pc, #88]	; (b4b78 <_Z14processCommandPKchb+0x330>)
   b4b20:	701c      	strb	r4, [r3, #0]
            leftMotorSpeed = 90;                //Immediately stop motors (no ramp)
   b4b22:	4b29      	ldr	r3, [pc, #164]	; (b4bc8 <_Z14processCommandPKchb+0x380>)
   b4b24:	701c      	strb	r4, [r3, #0]
            rightMotorSpeed = 90;
   b4b26:	4b29      	ldr	r3, [pc, #164]	; (b4bcc <_Z14processCommandPKchb+0x384>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b28:	4621      	mov	r1, r4
            rightMotorSpeed = 90;
   b4b2a:	701c      	strb	r4, [r3, #0]
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b2c:	f00c f9b1 	bl	c0e92 <_ZN5Servo5writeEi>
            ESCR.write(90);
   b4b30:	4827      	ldr	r0, [pc, #156]	; (b4bd0 <_Z14processCommandPKchb+0x388>)
   b4b32:	4621      	mov	r1, r4
   b4b34:	f00c f9ad 	bl	c0e92 <_ZN5Servo5writeEi>
   b4b38:	f008 fd44 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
            stopTime = millis();
   b4b3c:	4b25      	ldr	r3, [pc, #148]	; (b4bd4 <_Z14processCommandPKchb+0x38c>)
   b4b3e:	6018      	str	r0, [r3, #0]
            stopActive = true;                  //Set flag to indicate that stop was hit
   b4b40:	4b25      	ldr	r3, [pc, #148]	; (b4bd8 <_Z14processCommandPKchb+0x390>)
   b4b42:	2201      	movs	r2, #1
   b4b44:	701a      	strb	r2, [r3, #0]
   b4b46:	e75f      	b.n	b4a08 <_Z14processCommandPKchb+0x1c0>
   b4b48:	2003de68 	.word	0x2003de68
   b4b4c:	2003ddba 	.word	0x2003ddba
   b4b50:	000c4a75 	.word	0x000c4a75
   b4b54:	000c4aa1 	.word	0x000c4aa1
   b4b58:	2003e578 	.word	0x2003e578
   b4b5c:	2003dec1 	.word	0x2003dec1
   b4b60:	2003dd99 	.word	0x2003dd99
   b4b64:	000c4aa5 	.word	0x000c4aa5
   b4b68:	2003e5d0 	.word	0x2003e5d0
   b4b6c:	000c4ab4 	.word	0x000c4ab4
   b4b70:	000c4ad4 	.word	0x000c4ad4
   b4b74:	2003e558 	.word	0x2003e558
   b4b78:	2003e559 	.word	0x2003e559
   b4b7c:	000c4ad8 	.word	0x000c4ad8
   b4b80:	2003dddc 	.word	0x2003dddc
   b4b84:	000c4b04 	.word	0x000c4b04
   b4b88:	2003e0b0 	.word	0x2003e0b0
   b4b8c:	000c4b08 	.word	0x000c4b08
   b4b90:	000c4b0c 	.word	0x000c4b0c
   b4b94:	000c4b2f 	.word	0x000c4b2f
   b4b98:	2003dde0 	.word	0x2003dde0
   b4b9c:	000c4b33 	.word	0x000c4b33
   b4ba0:	2003e5f0 	.word	0x2003e5f0
   b4ba4:	000c4b37 	.word	0x000c4b37
   b4ba8:	2003e0a0 	.word	0x2003e0a0
   b4bac:	2003e580 	.word	0x2003e580
   b4bb0:	000c4b3b 	.word	0x000c4b3b
   b4bb4:	000c4b3f 	.word	0x000c4b3f
   b4bb8:	2003dde8 	.word	0x2003dde8
   b4bbc:	2003dec4 	.word	0x2003dec4
   b4bc0:	000c4b45 	.word	0x000c4b45
   b4bc4:	2003dd30 	.word	0x2003dd30
   b4bc8:	2003de08 	.word	0x2003de08
   b4bcc:	2003e0b1 	.word	0x2003e0b1
   b4bd0:	2003dd40 	.word	0x2003dd40
   b4bd4:	2003e5c4 	.word	0x2003e5c4
   b4bd8:	2003e5c1 	.word	0x2003e5c1
   b4bdc:	2003e5cc 	.word	0x2003e5cc

000b4be0 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4be0:	b510      	push	{r4, lr}
   b4be2:	460c      	mov	r4, r1
    processCommand(data, 4,false);      //Pass received string directly to the processCommand directory
   b4be4:	2200      	movs	r2, #0
   b4be6:	2104      	movs	r1, #4
   b4be8:	4620      	mov	r0, r4
   b4bea:	f7ff fe2d 	bl	b4848 <_Z14processCommandPKchb>
    if(logMessages){                    //Log message to the SD card for later debugging
   b4bee:	4b0b      	ldr	r3, [pc, #44]	; (b4c1c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4bf0:	781b      	ldrb	r3, [r3, #0]
   b4bf2:	b193      	cbz	r3, b4c1a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4bf4:	480a      	ldr	r0, [pc, #40]	; (b4c20 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bf6:	7c03      	ldrb	r3, [r0, #16]
   b4bf8:	b92b      	cbnz	r3, b4c06 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4bfa:	490a      	ldr	r1, [pc, #40]	; (b4c24 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4bfc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c00:	3010      	adds	r0, #16
   b4c02:	f7ff fd53 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c06:	4622      	mov	r2, r4
   b4c08:	4907      	ldr	r1, [pc, #28]	; (b4c28 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4c0a:	4805      	ldr	r0, [pc, #20]	; (b4c20 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4c0c:	f7ff fbe0 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
}
   b4c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c14:	4805      	ldr	r0, [pc, #20]	; (b4c2c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4c16:	f001 bf03 	b.w	b6a20 <_ZN7FatFile5closeEv>
}
   b4c1a:	bd10      	pop	{r4, pc}
   b4c1c:	2003dec0 	.word	0x2003dec0
   b4c20:	2003de68 	.word	0x2003de68
   b4c24:	2003ddba 	.word	0x2003ddba
   b4c28:	000c4b49 	.word	0x000c4b49
   b4c2c:	2003de78 	.word	0x2003de78

000b4c30 <_Z15LTEInputCommand6String>:
    }
    else logFile.println(message);
}

//Particle function for processing a debug string, for testing things like an emulated GPS point
int LTEInputCommand(String cmd){
   b4c30:	b500      	push	{lr}
   b4c32:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4c34:	2300      	movs	r3, #0
   b4c36:	2264      	movs	r2, #100	; 0x64
   b4c38:	a901      	add	r1, sp, #4
   b4c3a:	f00c fb7d 	bl	c1338 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4c3e:	2104      	movs	r1, #4
   b4c40:	2200      	movs	r2, #0
   b4c42:	eb0d 0001 	add.w	r0, sp, r1
   b4c46:	f7ff fdff 	bl	b4848 <_Z14processCommandPKchb>
    if(logMessages){
   b4c4a:	4b0c      	ldr	r3, [pc, #48]	; (b4c7c <_Z15LTEInputCommand6String+0x4c>)
   b4c4c:	781b      	ldrb	r3, [r3, #0]
   b4c4e:	b183      	cbz	r3, b4c72 <_Z15LTEInputCommand6String+0x42>
   b4c50:	480b      	ldr	r0, [pc, #44]	; (b4c80 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c52:	7c03      	ldrb	r3, [r0, #16]
   b4c54:	b92b      	cbnz	r3, b4c62 <_Z15LTEInputCommand6String+0x32>
   b4c56:	490b      	ldr	r1, [pc, #44]	; (b4c84 <_Z15LTEInputCommand6String+0x54>)
   b4c58:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c5c:	3010      	adds	r0, #16
   b4c5e:	f7ff fd25 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4c62:	4909      	ldr	r1, [pc, #36]	; (b4c88 <_Z15LTEInputCommand6String+0x58>)
   b4c64:	4806      	ldr	r0, [pc, #24]	; (b4c80 <_Z15LTEInputCommand6String+0x50>)
   b4c66:	aa01      	add	r2, sp, #4
   b4c68:	f7ff fbb2 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c6c:	4807      	ldr	r0, [pc, #28]	; (b4c8c <_Z15LTEInputCommand6String+0x5c>)
   b4c6e:	f001 fed7 	bl	b6a20 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4c72:	2001      	movs	r0, #1
   b4c74:	b01b      	add	sp, #108	; 0x6c
   b4c76:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c7a:	bf00      	nop
   b4c7c:	2003dec0 	.word	0x2003dec0
   b4c80:	2003de68 	.word	0x2003de68
   b4c84:	2003ddba 	.word	0x2003ddba
   b4c88:	000c4b49 	.word	0x000c4b49
   b4c8c:	2003de78 	.word	0x2003de78

000b4c90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4c90:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];                                              //Create character array for the received command
   b4c92:	f101 0308 	add.w	r3, r1, #8
   b4c96:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4c9a:	af00      	add	r7, sp, #0
    char btBuf[len+1];                                              //Create character array for the received command
   b4c9c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4ca0:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];       //Convert byte array into character array
   b4ca2:	460a      	mov	r2, r1
   b4ca4:	4601      	mov	r1, r0
   b4ca6:	4668      	mov	r0, sp
   b4ca8:	f00d fd14 	bl	c26d4 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cac:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];                                              //Create character array for the received command
   b4cb0:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4cb6:	b113      	cbz	r3, b4cbe <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4cb8:	2300      	movs	r3, #0
   b4cba:	f80d 3004 	strb.w	r3, [sp, r4]
    processCommand(btBuf,1,true);                                   //Process the command received over BLE using the dictionary
   b4cbe:	2201      	movs	r2, #1
   b4cc0:	4611      	mov	r1, r2
   b4cc2:	4628      	mov	r0, r5
   b4cc4:	f7ff fdc0 	bl	b4848 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();    //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b4cc8:	782b      	ldrb	r3, [r5, #0]
   b4cca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4cce:	2b41      	cmp	r3, #65	; 0x41
   b4cd0:	d103      	bne.n	b4cda <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
   b4cd2:	f008 fc77 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b4cd6:	4b0c      	ldr	r3, [pc, #48]	; (b4d08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4cd8:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4cda:	4b0c      	ldr	r3, [pc, #48]	; (b4d0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4cdc:	781b      	ldrb	r3, [r3, #0]
   b4cde:	b183      	cbz	r3, b4d02 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x72>
   b4ce0:	480b      	ldr	r0, [pc, #44]	; (b4d10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4ce2:	7c03      	ldrb	r3, [r0, #16]
   b4ce4:	b92b      	cbnz	r3, b4cf2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x62>
   b4ce6:	490b      	ldr	r1, [pc, #44]	; (b4d14 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4ce8:	f244 2202 	movw	r2, #16898	; 0x4202
   b4cec:	3010      	adds	r0, #16
   b4cee:	f7ff fcdd 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4cf2:	4909      	ldr	r1, [pc, #36]	; (b4d18 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4cf4:	4806      	ldr	r0, [pc, #24]	; (b4d10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4cf6:	462a      	mov	r2, r5
   b4cf8:	f7ff fb6a 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4cfc:	4807      	ldr	r0, [pc, #28]	; (b4d1c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cfe:	f001 fe8f 	bl	b6a20 <_ZN7FatFile5closeEv>
}
   b4d02:	46bd      	mov	sp, r7
   b4d04:	bdb0      	pop	{r4, r5, r7, pc}
   b4d06:	bf00      	nop
   b4d08:	2003dd28 	.word	0x2003dd28
   b4d0c:	2003dec0 	.word	0x2003dec0
   b4d10:	2003de68 	.word	0x2003de68
   b4d14:	2003ddba 	.word	0x2003ddba
   b4d18:	000c4b69 	.word	0x000c4b69
   b4d1c:	2003de78 	.word	0x2003de78

000b4d20 <_Z9setupXBeev>:
void setupXBee(){
   b4d20:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4d22:	f00c fe67 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b4d26:	4908      	ldr	r1, [pc, #32]	; (b4d48 <_Z9setupXBeev+0x28>)
   b4d28:	f7ff fb1a 	bl	b4360 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4d2c:	2014      	movs	r0, #20
   b4d2e:	f008 ffab 	bl	bdc88 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4d32:	f00c fe5f 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b4d36:	4905      	ldr	r1, [pc, #20]	; (b4d4c <_Z9setupXBeev+0x2c>)
   b4d38:	f7ff fb12 	bl	b4360 <_ZN5Print6printfEPKcz>
}
   b4d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4d40:	2014      	movs	r0, #20
   b4d42:	f008 bfa1 	b.w	bdc88 <delay>
   b4d46:	bf00      	nop
   b4d48:	000c606a 	.word	0x000c606a
   b4d4c:	000c48ac 	.word	0x000c48ac

000b4d50 <_Z8setupGPSv>:
void setupGPS(){
   b4d50:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4d52:	4c15      	ldr	r4, [pc, #84]	; (b4da8 <_Z8setupGPSv+0x58>)
   b4d54:	2301      	movs	r3, #1
   b4d56:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4d58:	f00c fe0c 	bl	c1974 <_Z19__fetch_global_Wirev>
   b4d5c:	2300      	movs	r3, #0
   b4d5e:	4601      	mov	r1, r0
   b4d60:	9300      	str	r3, [sp, #0]
   b4d62:	4812      	ldr	r0, [pc, #72]	; (b4dac <_Z8setupGPSv+0x5c>)
   b4d64:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d68:	2242      	movs	r2, #66	; 0x42
   b4d6a:	f008 f80b 	bl	bcd84 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4d6e:	b928      	cbnz	r0, b4d7c <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4d70:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4d72:	f00c fc93 	bl	c169c <_Z16_fetch_usbserialv>
   b4d76:	490e      	ldr	r1, [pc, #56]	; (b4db0 <_Z8setupGPSv+0x60>)
   b4d78:	f00c f819 	bl	c0dae <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4d7c:	f240 424c 	movw	r2, #1100	; 0x44c
   b4d80:	2101      	movs	r1, #1
   b4d82:	480a      	ldr	r0, [pc, #40]	; (b4dac <_Z8setupGPSv+0x5c>)
   b4d84:	f007 ff8a 	bl	bcc9c <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4d88:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d8c:	2201      	movs	r2, #1
   b4d8e:	2100      	movs	r1, #0
   b4d90:	4806      	ldr	r0, [pc, #24]	; (b4dac <_Z8setupGPSv+0x5c>)
   b4d92:	f007 ff63 	bl	bcc5c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4d96:	f00c fded 	bl	c1974 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4d9a:	4906      	ldr	r1, [pc, #24]	; (b4db4 <_Z8setupGPSv+0x64>)
}
   b4d9c:	b002      	add	sp, #8
   b4d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4da2:	f00a bcc5 	b.w	bf730 <_ZN7TwoWire8setSpeedEm>
   b4da6:	bf00      	nop
   b4da8:	2003dd50 	.word	0x2003dd50
   b4dac:	2003df20 	.word	0x2003df20
   b4db0:	000c4b89 	.word	0x000c4b89
   b4db4:	00061a80 	.word	0x00061a80

000b4db8 <setup>:
void setup(){
   b4db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4dbc:	4bc6      	ldr	r3, [pc, #792]	; (b50d8 <setup+0x320>)
    led_set_status_active(&d_, active, nullptr);
   b4dbe:	48c7      	ldr	r0, [pc, #796]	; (b50dc <setup+0x324>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4dc0:	7c1a      	ldrb	r2, [r3, #16]
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4dc2:	4fc7      	ldr	r7, [pc, #796]	; (b50e0 <setup+0x328>)
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4dc4:	4ec7      	ldr	r6, [pc, #796]	; (b50e4 <setup+0x32c>)
   b4dc6:	f002 0203 	and.w	r2, r2, #3
   b4dca:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   b4dce:	741a      	strb	r2, [r3, #16]
    d_.color = color;
   b4dd0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b4dd4:	615a      	str	r2, [r3, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4dd6:	7c5a      	ldrb	r2, [r3, #17]
   b4dd8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4dda:	bf18      	it	ne
   b4ddc:	2201      	movne	r2, #1
void setup(){
   b4dde:	b095      	sub	sp, #84	; 0x54
   b4de0:	bf18      	it	ne
   b4de2:	745a      	strbne	r2, [r3, #17]
    led_set_status_active(&d_, active, nullptr);
   b4de4:	2101      	movs	r1, #1
   b4de6:	2200      	movs	r2, #0
   b4de8:	f008 fde4 	bl	bd9b4 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);                          //Configure the pin for the Atlas sensors as an output and pull low to enable power to the Atlas sensors
   b4dec:	2101      	movs	r1, #1
   b4dee:	2002      	movs	r0, #2
   b4df0:	f00c fd54 	bl	c189c <pinMode>
    digitalWrite(SENSE_EN,LOW);                     
   b4df4:	2100      	movs	r1, #0
   b4df6:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4df8:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);                     
   b4dfa:	f00c fd60 	bl	c18be <digitalWrite>
    pinMode(PWR_BUT, INPUT);                            //Configure power button input as an input, no pull as the resistor divider will handle pin floating
   b4dfe:	2100      	movs	r1, #0
   b4e00:	2012      	movs	r0, #18
   b4e02:	f00c fd4b 	bl	c189c <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4e0a:	4622      	mov	r2, r4
   b4e0c:	49b6      	ldr	r1, [pc, #728]	; (b50e8 <setup+0x330>)
   b4e0e:	9400      	str	r4, [sp, #0]
   b4e10:	2012      	movs	r0, #18
   b4e12:	f00a fcd3 	bl	bf7bc <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(LEAK_DET,INPUT);                            //Configure the leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e16:	4621      	mov	r1, r4
   b4e18:	201d      	movs	r0, #29
   b4e1a:	f00c fd3f 	bl	c189c <pinMode>
    pinMode(BAT_LEAK_DET,INPUT);                        //Configure the battery leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e1e:	4621      	mov	r1, r4
   b4e20:	200f      	movs	r0, #15
   b4e22:	f00c fd3b 	bl	c189c <pinMode>
        pinMode(PWR_EN, OUTPUT);
   b4e26:	2101      	movs	r1, #1
   b4e28:	201c      	movs	r0, #28
   b4e2a:	f00c fd37 	bl	c189c <pinMode>
        digitalWrite(PWR_EN,HIGH);                      //Set the power enable pin output high to latch the mosfet on the PCB so the system maintains power
   b4e2e:	2101      	movs	r1, #1
   b4e30:	201c      	movs	r0, #28
   b4e32:	f00c fd44 	bl	c18be <digitalWrite>
        pinMode(LEAK_DET, INPUT);
   b4e36:	4621      	mov	r1, r4
   b4e38:	201d      	movs	r0, #29
   b4e3a:	f00c fd2f 	bl	c189c <pinMode>
   b4e3e:	f008 fbc1 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e42:	4aaa      	ldr	r2, [pc, #680]	; (b50ec <setup+0x334>)
   b4e44:	235a      	movs	r3, #90	; 0x5a
   b4e46:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e48:	4aa9      	ldr	r2, [pc, #676]	; (b50f0 <setup+0x338>)
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e4a:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e4c:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e50:	7033      	strb	r3, [r6, #0]
   b4e52:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e54:	2106      	movs	r1, #6
   b4e56:	e9cd 4800 	strd	r4, r8, [sp]
   b4e5a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e62:	4605      	mov	r5, r0
   b4e64:	48a3      	ldr	r0, [pc, #652]	; (b50f4 <setup+0x33c>)
   b4e66:	f00c f851 	bl	c0f0c <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e72:	e9cd 4800 	strd	r4, r8, [sp]
   b4e76:	2107      	movs	r1, #7
   b4e78:	489f      	ldr	r0, [pc, #636]	; (b50f8 <setup+0x340>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4e7a:	f8df 8334 	ldr.w	r8, [pc, #820]	; b51b0 <setup+0x3f8>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e7e:	f00c f845 	bl	c0f0c <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4e82:	7839      	ldrb	r1, [r7, #0]
   b4e84:	489b      	ldr	r0, [pc, #620]	; (b50f4 <setup+0x33c>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4e86:	4f9d      	ldr	r7, [pc, #628]	; (b50fc <setup+0x344>)
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4e88:	f00c f803 	bl	c0e92 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4e8c:	7831      	ldrb	r1, [r6, #0]
   b4e8e:	489a      	ldr	r0, [pc, #616]	; (b50f8 <setup+0x340>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4e90:	4e9b      	ldr	r6, [pc, #620]	; (b5100 <setup+0x348>)
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4e92:	f00b fffe 	bl	c0e92 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b4e96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e9a:	f008 fef5 	bl	bdc88 <delay>
    BLE.on();                                   //Turn on Bluetooth
   b4e9e:	f009 fa57 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ea2:	f009 fa9f 	bl	be3e4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);                          //Max transmitting power
   b4ea6:	f009 fa53 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eaa:	2108      	movs	r1, #8
   b4eac:	f009 faa1 	bl	be3f2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b4eb0:	f00c fbf4 	bl	c169c <_Z16_fetch_usbserialv>
   b4eb4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4eb8:	f00c fbe0 	bl	c167c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b4ebc:	f00c fd9a 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b4ec0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4ec4:	f00c fb82 	bl	c15cc <_ZN11USARTSerial5beginEm>
    setupXBee();                                //Setup XBee module
   b4ec8:	f7ff ff2a 	bl	b4d20 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b4ecc:	f7ff ff40 	bl	b4d50 <_Z8setupGPSv>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4ed0:	498c      	ldr	r1, [pc, #560]	; (b5104 <setup+0x34c>)
   b4ed2:	488d      	ldr	r0, [pc, #564]	; (b5108 <setup+0x350>)
   b4ed4:	4623      	mov	r3, r4
   b4ed6:	2209      	movs	r2, #9
   b4ed8:	f008 fdc2 	bl	bda60 <spark_variable>
   b4edc:	498b      	ldr	r1, [pc, #556]	; (b510c <setup+0x354>)
   b4ede:	488c      	ldr	r0, [pc, #560]	; (b5110 <setup+0x358>)
   b4ee0:	4623      	mov	r3, r4
   b4ee2:	2209      	movs	r2, #9
   b4ee4:	f008 fdbc 	bl	bda60 <spark_variable>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4ee8:	2301      	movs	r3, #1
   b4eea:	498a      	ldr	r1, [pc, #552]	; (b5114 <setup+0x35c>)
   b4eec:	488a      	ldr	r0, [pc, #552]	; (b5118 <setup+0x360>)
   b4eee:	4622      	mov	r2, r4
   b4ef0:	e9cd 4400 	strd	r4, r4, [sp]
   b4ef4:	f008 fddc 	bl	bdab0 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4ef8:	4988      	ldr	r1, [pc, #544]	; (b511c <setup+0x364>)
   b4efa:	4a89      	ldr	r2, [pc, #548]	; (b5120 <setup+0x368>)
   b4efc:	4889      	ldr	r0, [pc, #548]	; (b5124 <setup+0x36c>)
   b4efe:	f00a f938 	bl	bf172 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f02:	4b89      	ldr	r3, [pc, #548]	; (b5128 <setup+0x370>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f04:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4f08:	701c      	strb	r4, [r3, #0]
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4f0a:	f886 9000 	strb.w	r9, [r6]
   b4f0e:	f008 fb59 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    motionTime = stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f12:	4b86      	ldr	r3, [pc, #536]	; (b512c <setup+0x374>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4f14:	f888 9000 	strb.w	r9, [r8]
    motionTime = stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f18:	6018      	str	r0, [r3, #0]
   b4f1a:	4b85      	ldr	r3, [pc, #532]	; (b5130 <setup+0x378>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4f1c:	f887 9000 	strb.w	r9, [r7]
    motionTime = stopTime = positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f20:	6018      	str	r0, [r3, #0]
   b4f22:	4b84      	ldr	r3, [pc, #528]	; (b5134 <setup+0x37c>)
   b4f24:	6018      	str	r0, [r3, #0]
   b4f26:	4b84      	ldr	r3, [pc, #528]	; (b5138 <setup+0x380>)
   b4f28:	6018      	str	r0, [r3, #0]
   b4f2a:	4b84      	ldr	r3, [pc, #528]	; (b513c <setup+0x384>)
   b4f2c:	6018      	str	r0, [r3, #0]
   b4f2e:	4b84      	ldr	r3, [pc, #528]	; (b5140 <setup+0x388>)
   b4f30:	6018      	str	r0, [r3, #0]
   b4f32:	4b84      	ldr	r3, [pc, #528]	; (b5144 <setup+0x38c>)
   b4f34:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;                             //Initialize timer for checking that XBee is available
   b4f36:	4b84      	ldr	r3, [pc, #528]	; (b5148 <setup+0x390>)
   b4f38:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;                              //Initialize timer for checking that BLE is available
   b4f3a:	4b84      	ldr	r3, [pc, #528]	; (b514c <setup+0x394>)
   b4f3c:	601c      	str	r4, [r3, #0]
    dataWait = false;                           //Set false initially to first request data to sensors before attempting to read data
   b4f3e:	4b84      	ldr	r3, [pc, #528]	; (b5150 <setup+0x398>)
   b4f40:	701c      	strb	r4, [r3, #0]
    offloadMode = false;                        //Set offload to false, otherwise could try to offload with no CC connected
   b4f42:	4b84      	ldr	r3, [pc, #528]	; (b5154 <setup+0x39c>)
   b4f44:	701c      	strb	r4, [r3, #0]
    requestActive = false;                      //Set request to false, otherwise we are trying to send sensor data with no CC connected
   b4f46:	4b84      	ldr	r3, [pc, #528]	; (b5158 <setup+0x3a0>)
   b4f48:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;            //Initialize counter for LTE backup messages. This counter limits the number of LTE messages being sent so we don't burn through the data limit
   b4f4a:	4b84      	ldr	r3, [pc, #528]	; (b515c <setup+0x3a4>)
   b4f4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b4f50:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;                     //Initially assume GPS and compass are not available until we receive the first point from each
   b4f52:	4b83      	ldr	r3, [pc, #524]	; (b5160 <setup+0x3a8>)
   b4f54:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;                     //Initially set the shutdown state to false until the button is pressed and held for 3 seconds, then shut off
   b4f56:	4b83      	ldr	r3, [pc, #524]	; (b5164 <setup+0x3ac>)
   b4f58:	701c      	strb	r4, [r3, #0]
    stopActive = false;                         //Initially disable stop, otherwise user might not know that the stop button must be pressed
   b4f5a:	4b83      	ldr	r3, [pc, #524]	; (b5168 <setup+0x3b0>)
   b4f5c:	701c      	strb	r4, [r3, #0]
    warnedBattLeak = false;                     //Initially set false so at least one leak message will be sent in the case of a leak
   b4f5e:	4b83      	ldr	r3, [pc, #524]	; (b516c <setup+0x3b4>)
   b4f60:	701c      	strb	r4, [r3, #0]
    warnedLeak = false;                         //Initially set false so at least one leak message will be sent in the case of a leak
   b4f62:	4b83      	ldr	r3, [pc, #524]	; (b5170 <setup+0x3b8>)
   b4f64:	701c      	strb	r4, [r3, #0]
    battPercent = 50;                           //Initially set battery reading to 50% until we read the actual voltage so the LED states are not affected 
   b4f66:	4b83      	ldr	r3, [pc, #524]	; (b5174 <setup+0x3bc>)
   b4f68:	2232      	movs	r2, #50	; 0x32
   b4f6a:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add characteristic for the stream of transmitting out data over BLE
   b4f6c:	f009 f9f0 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f70:	4a81      	ldr	r2, [pc, #516]	; (b5178 <setup+0x3c0>)
   b4f72:	4601      	mov	r1, r0
   b4f74:	a80f      	add	r0, sp, #60	; 0x3c
   b4f76:	f009 ff45 	bl	bee04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f7a:	a80f      	add	r0, sp, #60	; 0x3c
   b4f7c:	f009 faf5 	bl	be56a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);    //Add characteristic for the stream of receiving data from BLE
   b4f80:	f009 f9e6 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f84:	4a7d      	ldr	r2, [pc, #500]	; (b517c <setup+0x3c4>)
   b4f86:	4601      	mov	r1, r0
   b4f88:	a80f      	add	r0, sp, #60	; 0x3c
   b4f8a:	f009 ff3b 	bl	bee04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f8e:	a80f      	add	r0, sp, #60	; 0x3c
   b4f90:	f009 faeb 	bl	be56a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);   //Add characteristic for offloading stream for BLE
   b4f94:	f009 f9dc 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f98:	4a79      	ldr	r2, [pc, #484]	; (b5180 <setup+0x3c8>)
   b4f9a:	4601      	mov	r1, r0
   b4f9c:	a80f      	add	r0, sp, #60	; 0x3c
   b4f9e:	f009 ff31 	bl	bee04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fa2:	a80f      	add	r0, sp, #60	; 0x3c
   b4fa4:	f009 fae1 	bl	be56a <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);    //Add BLE Characteristics for BLE serial debug stream
   b4fa8:	f009 f9d2 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fac:	4a75      	ldr	r2, [pc, #468]	; (b5184 <setup+0x3cc>)
   b4fae:	4601      	mov	r1, r0
   b4fb0:	a80f      	add	r0, sp, #60	; 0x3c
   b4fb2:	f009 ff27 	bl	bee04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4fb6:	a80f      	add	r0, sp, #60	; 0x3c
   b4fb8:	f009 fad7 	bl	be56a <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;                  //Put this bot's bot number in the advertising data so other bots can see it's ID without connecting to it
   b4fbc:	4b72      	ldr	r3, [pc, #456]	; (b5188 <setup+0x3d0>)
   b4fbe:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b4fc2:	4b72      	ldr	r3, [pc, #456]	; (b518c <setup+0x3d4>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4fc4:	a80f      	add	r0, sp, #60	; 0x3c
   b4fc6:	6819      	ldr	r1, [r3, #0]
   b4fc8:	f009 f874 	bl	be0b4 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fcc:	a80f      	add	r0, sp, #60	; 0x3c
   b4fce:	f008 ffd3 	bl	bdf78 <_ZNK8particle7BleUuid4typeEv>
   b4fd2:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4fd4:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fd6:	f1b9 0f00 	cmp.w	r9, #0
   b4fda:	f040 8138 	bne.w	b524e <setup+0x496>
            uint16_t uuid16 = tempUUID.shorted();
   b4fde:	f008 ffe7 	bl	bdfb0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4fe2:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b4fe6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4fea:	2302      	movs	r3, #2
   b4fec:	aa0b      	add	r2, sp, #44	; 0x2c
   b4fee:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4ff0:	4867      	ldr	r0, [pc, #412]	; (b5190 <setup+0x3d8>)
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b4ff2:	4c68      	ldr	r4, [pc, #416]	; (b5194 <setup+0x3dc>)
   b4ff4:	f009 fbe4 	bl	be7c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b4ff8:	2300      	movs	r3, #0
   b4ffa:	4963      	ldr	r1, [pc, #396]	; (b5188 <setup+0x3d0>)
   b4ffc:	4864      	ldr	r0, [pc, #400]	; (b5190 <setup+0x3d8>)
   b4ffe:	2208      	movs	r2, #8
   b5000:	f009 fbfc 	bl	be7fc <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5004:	f009 f9a4 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5008:	2200      	movs	r2, #0
   b500a:	4961      	ldr	r1, [pc, #388]	; (b5190 <setup+0x3d8>)
   b500c:	f009 fa51 	bl	be4b2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5010:	f00c fcb0 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5014:	f00a fb90 	bl	bf738 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5018:	f00c fcac 	bl	c1974 <_Z19__fetch_global_Wirev>
   b501c:	495e      	ldr	r1, [pc, #376]	; (b5198 <setup+0x3e0>)
   b501e:	f00a fb87 	bl	bf730 <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b5022:	2301      	movs	r3, #1
   b5024:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {                // hardware I2C mode, can pass in address & alt Wire
   b5026:	f00c fca5 	bl	c1974 <_Z19__fetch_global_Wirev>
   b502a:	211c      	movs	r1, #28
   b502c:	4602      	mov	r2, r0
   b502e:	485b      	ldr	r0, [pc, #364]	; (b519c <setup+0x3e4>)
   b5030:	f002 fff1 	bl	b8016 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5034:	2800      	cmp	r0, #0
   b5036:	f040 8111 	bne.w	b525c <setup+0x4a4>
        CompassAvail = false;                   //Couldn't connect over I2C, so assume the compass is unavailable. Flag disables Autonomous/Sentry mode
   b503a:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b503c:	f00c fb2e 	bl	c169c <_Z16_fetch_usbserialv>
   b5040:	4957      	ldr	r1, [pc, #348]	; (b51a0 <setup+0x3e8>)
    else Serial.println("LIS3MDL Found!");
   b5042:	f00b feb4 	bl	c0dae <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b5046:	4855      	ldr	r0, [pc, #340]	; (b519c <setup+0x3e4>)
   b5048:	2102      	movs	r1, #2
   b504a:	f002 fedd 	bl	b7e08 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b504e:	4853      	ldr	r0, [pc, #332]	; (b519c <setup+0x3e4>)
   b5050:	2100      	movs	r1, #0
   b5052:	f002 ff3d 	bl	b7ed0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5056:	4851      	ldr	r0, [pc, #324]	; (b519c <setup+0x3e4>)
   b5058:	2101      	movs	r1, #1
   b505a:	f002 ff07 	bl	b7e6c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b505e:	484f      	ldr	r0, [pc, #316]	; (b519c <setup+0x3e4>)
   b5060:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5062:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b5064:	f002 ff4f 	bl	b7f06 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5068:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   b506c:	484b      	ldr	r0, [pc, #300]	; (b519c <setup+0x3e4>)
   b506e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5072:	f002 ffef 	bl	b8054 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5076:	4622      	mov	r2, r4
   b5078:	4621      	mov	r1, r4
   b507a:	464b      	mov	r3, r9
   b507c:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b5080:	4846      	ldr	r0, [pc, #280]	; (b519c <setup+0x3e4>)
   b5082:	f8cd 9000 	str.w	r9, [sp]
   b5086:	f002 fffd 	bl	b8084 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"B%d%02d%02d%04d%02d%02d%02d", BOTNUM, Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b508a:	f00c fa2b 	bl	c14e4 <_ZN9TimeClass5monthEv>
   b508e:	4682      	mov	sl, r0
   b5090:	f00c fa1c 	bl	c14cc <_ZN9TimeClass3dayEv>
   b5094:	4683      	mov	fp, r0
   b5096:	f00c fa2d 	bl	c14f4 <_ZN9TimeClass4yearEv>
   b509a:	9009      	str	r0, [sp, #36]	; 0x24
   b509c:	f00c f9f2 	bl	c1484 <_ZN9TimeClass4hourEv>
   b50a0:	9008      	str	r0, [sp, #32]
   b50a2:	f00c f9fb 	bl	c149c <_ZN9TimeClass6minuteEv>
   b50a6:	9007      	str	r0, [sp, #28]
   b50a8:	f00c fa04 	bl	c14b4 <_ZN9TimeClass6secondEv>
   b50ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b50ae:	9907      	ldr	r1, [sp, #28]
   b50b0:	9a08      	ldr	r2, [sp, #32]
   b50b2:	9005      	str	r0, [sp, #20]
   b50b4:	e9cd b301 	strd	fp, r3, [sp, #4]
   b50b8:	9104      	str	r1, [sp, #16]
   b50ba:	464b      	mov	r3, r9
   b50bc:	9203      	str	r2, [sp, #12]
   b50be:	2110      	movs	r1, #16
   b50c0:	4a38      	ldr	r2, [pc, #224]	; (b51a4 <setup+0x3ec>)
   b50c2:	f8cd a000 	str.w	sl, [sp]
   b50c6:	a80b      	add	r0, sp, #44	; 0x2c
   b50c8:	f008 fd92 	bl	bdbf0 <snprintf>
    strcpy(filename,DEF_FILENAME);              //Copy in all of the necessary elements of the file name
   b50cc:	4936      	ldr	r1, [pc, #216]	; (b51a8 <setup+0x3f0>)
   b50ce:	4837      	ldr	r0, [pc, #220]	; (b51ac <setup+0x3f4>)
   b50d0:	f00d fb8e 	bl	c27f0 <strcpy>
    strcat(filename,timestamp);
   b50d4:	a90b      	add	r1, sp, #44	; 0x2c
   b50d6:	e06d      	b.n	b51b4 <setup+0x3fc>
   b50d8:	2003e580 	.word	0x2003e580
   b50dc:	2003e584 	.word	0x2003e584
   b50e0:	2003e558 	.word	0x2003e558
   b50e4:	2003e559 	.word	0x2003e559
   b50e8:	000b4309 	.word	0x000b4309
   b50ec:	2003de08 	.word	0x2003de08
   b50f0:	2003e0b1 	.word	0x2003e0b1
   b50f4:	2003dd30 	.word	0x2003dd30
   b50f8:	2003dd40 	.word	0x2003dd40
   b50fc:	2003dec0 	.word	0x2003dec0
   b5100:	2003dd54 	.word	0x2003dd54
   b5104:	2003e5e8 	.word	0x2003e5e8
   b5108:	000c4ba9 	.word	0x000c4ba9
   b510c:	2003e0a8 	.word	0x2003e0a8
   b5110:	000c4bb1 	.word	0x000c4bb1
   b5114:	000b4be1 	.word	0x000b4be1
   b5118:	000c4bb9 	.word	0x000c4bb9
   b511c:	000b4c31 	.word	0x000b4c31
   b5120:	000c4bbf 	.word	0x000c4bbf
   b5124:	000bf147 	.word	0x000bf147
   b5128:	2003dd51 	.word	0x2003dd51
   b512c:	2003e554 	.word	0x2003e554
   b5130:	2003dd94 	.word	0x2003dd94
   b5134:	2003dde0 	.word	0x2003dde0
   b5138:	2003dde4 	.word	0x2003dde4
   b513c:	2003e0a4 	.word	0x2003e0a4
   b5140:	2003e5c4 	.word	0x2003e5c4
   b5144:	2003decc 	.word	0x2003decc
   b5148:	2003dd68 	.word	0x2003dd68
   b514c:	2003dd28 	.word	0x2003dd28
   b5150:	2003dd98 	.word	0x2003dd98
   b5154:	2003e0a0 	.word	0x2003e0a0
   b5158:	2003e0b0 	.word	0x2003e0b0
   b515c:	2003dd52 	.word	0x2003dd52
   b5160:	2003e5d4 	.word	0x2003e5d4
   b5164:	2003e55a 	.word	0x2003e55a
   b5168:	2003e5c1 	.word	0x2003e5c1
   b516c:	2003e5f1 	.word	0x2003e5f1
   b5170:	2003e5f2 	.word	0x2003e5f2
   b5174:	2003dd80 	.word	0x2003dd80
   b5178:	2003e5dc 	.word	0x2003e5dc
   b517c:	2003e0b4 	.word	0x2003e0b4
   b5180:	2003e098 	.word	0x2003e098
   b5184:	2003dd88 	.word	0x2003dd88
   b5188:	2003dd1d 	.word	0x2003dd1d
   b518c:	2003db14 	.word	0x2003db14
   b5190:	2003dd70 	.word	0x2003dd70
   b5194:	2003dd2c 	.word	0x2003dd2c
   b5198:	00061a80 	.word	0x00061a80
   b519c:	2003de0c 	.word	0x2003de0c
   b51a0:	000c4bcd 	.word	0x000c4bcd
   b51a4:	000c4bf8 	.word	0x000c4bf8
   b51a8:	000c4c14 	.word	0x000c4c14
   b51ac:	2003dd9a 	.word	0x2003dd9a
   b51b0:	2003dec1 	.word	0x2003dec1
   b51b4:	483f      	ldr	r0, [pc, #252]	; (b52b4 <setup+0x4fc>)
   b51b6:	f00d faeb 	bl	c2790 <strcat>
    strcpy(filenameMessages,filename);
   b51ba:	493e      	ldr	r1, [pc, #248]	; (b52b4 <setup+0x4fc>)
   b51bc:	483e      	ldr	r0, [pc, #248]	; (b52b8 <setup+0x500>)
   b51be:	f00d fb17 	bl	c27f0 <strcpy>
    strcat(filename,".csv");
   b51c2:	493e      	ldr	r1, [pc, #248]	; (b52bc <setup+0x504>)
   b51c4:	483b      	ldr	r0, [pc, #236]	; (b52b4 <setup+0x4fc>)
   b51c6:	f00d fae3 	bl	c2790 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b51ca:	493d      	ldr	r1, [pc, #244]	; (b52c0 <setup+0x508>)
   b51cc:	483a      	ldr	r0, [pc, #232]	; (b52b8 <setup+0x500>)
   b51ce:	f00d fadf 	bl	c2790 <strcat>
    Serial.println(filename);                   //Print the filenames to the console for debugging
   b51d2:	f00c fa63 	bl	c169c <_Z16_fetch_usbserialv>
   b51d6:	4937      	ldr	r1, [pc, #220]	; (b52b4 <setup+0x4fc>)
   b51d8:	f00b fde9 	bl	c0dae <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b51dc:	f00c fa5e 	bl	c169c <_Z16_fetch_usbserialv>
   b51e0:	4935      	ldr	r1, [pc, #212]	; (b52b8 <setup+0x500>)
   b51e2:	f00b fde4 	bl	c0dae <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b51e6:	4622      	mov	r2, r4
   b51e8:	4836      	ldr	r0, [pc, #216]	; (b52c4 <setup+0x50c>)
   b51ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51ee:	f7ff f877 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b51f2:	4622      	mov	r2, r4
   b51f4:	4834      	ldr	r0, [pc, #208]	; (b52c8 <setup+0x510>)
   b51f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51fa:	f7ff f871 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
   b51fe:	4622      	mov	r2, r4
   b5200:	4832      	ldr	r0, [pc, #200]	; (b52cc <setup+0x514>)
   b5202:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5206:	f7ff f86b 	bl	b42e0 <_ZN5Timer6_startEjb.isra.0>
      dataMode_{dataMode}
   b520a:	4b31      	ldr	r3, [pc, #196]	; (b52d0 <setup+0x518>)
   b520c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {     //Try to connect to the SD card
   b520e:	4831      	ldr	r0, [pc, #196]	; (b52d4 <setup+0x51c>)
   b5210:	4b31      	ldr	r3, [pc, #196]	; (b52d8 <setup+0x520>)
   b5212:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   b5216:	aa0f      	add	r2, sp, #60	; 0x3c
   b5218:	2108      	movs	r1, #8
   b521a:	9311      	str	r3, [sp, #68]	; 0x44
   b521c:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   b5220:	f7ff fad4 	bl	b47cc <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5224:	4604      	mov	r4, r0
   b5226:	b9e8      	cbnz	r0, b5264 <setup+0x4ac>
        Serial.println("Error: could not connect to SD card!");     //If not, warn the user in the console
   b5228:	f00c fa38 	bl	c169c <_Z16_fetch_usbserialv>
   b522c:	492b      	ldr	r1, [pc, #172]	; (b52dc <setup+0x524>)
   b522e:	f00b fdbe 	bl	c0dae <_ZN5Print7printlnEPKc>
        logSensors = false;                         //Set flags that the SD card is not available which will warn the user on the CChub
   b5232:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b5236:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b5238:	7034      	strb	r4, [r6, #0]
   b523a:	f008 f9c3 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);   //Check that the we've been in this setup function for at least two seconds so the ESC's will arm and allow movement
   b523e:	1b40      	subs	r0, r0, r5
   b5240:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5244:	d233      	bcs.n	b52ae <setup+0x4f6>
   b5246:	2005      	movs	r0, #5
   b5248:	f008 fd1e 	bl	bdc88 <delay>
   b524c:	e7f5      	b.n	b523a <setup+0x482>
   b524e:	f008 feb1 	bl	bdfb4 <_ZNK8particle7BleUuid8rawBytesEv>
   b5252:	9400      	str	r4, [sp, #0]
   b5254:	4602      	mov	r2, r0
   b5256:	2310      	movs	r3, #16
   b5258:	2107      	movs	r1, #7
   b525a:	e6c9      	b.n	b4ff0 <setup+0x238>
    else Serial.println("LIS3MDL Found!");
   b525c:	f00c fa1e 	bl	c169c <_Z16_fetch_usbserialv>
   b5260:	491f      	ldr	r1, [pc, #124]	; (b52e0 <setup+0x528>)
   b5262:	e6ee      	b.n	b5042 <setup+0x28a>
    if(logSensors){                                 //Logsensors enables logging of sensor data, if enabled, then create the file on the SD card
   b5264:	f898 3000 	ldrb.w	r3, [r8]
   b5268:	b163      	cbz	r3, b5284 <setup+0x4cc>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b526a:	4912      	ldr	r1, [pc, #72]	; (b52b4 <setup+0x4fc>)
   b526c:	481d      	ldr	r0, [pc, #116]	; (b52e4 <setup+0x52c>)
   b526e:	f244 2202 	movw	r2, #16898	; 0x4202
   b5272:	f7ff fa1b 	bl	b46ac <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5276:	491c      	ldr	r1, [pc, #112]	; (b52e8 <setup+0x530>)
   b5278:	481c      	ldr	r0, [pc, #112]	; (b52ec <setup+0x534>)
   b527a:	f00b fd98 	bl	c0dae <_ZN5Print7printlnEPKc>
        myFile.close();
   b527e:	4819      	ldr	r0, [pc, #100]	; (b52e4 <setup+0x52c>)
   b5280:	f001 fbce 	bl	b6a20 <_ZN7FatFile5closeEv>
    if(logMessages){                                //Logsensors enables logging of messages, if enabled, then create the file on the SD card
   b5284:	783b      	ldrb	r3, [r7, #0]
   b5286:	2b00      	cmp	r3, #0
   b5288:	d0d7      	beq.n	b523a <setup+0x482>
   b528a:	4819      	ldr	r0, [pc, #100]	; (b52f0 <setup+0x538>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b528c:	7c03      	ldrb	r3, [r0, #16]
   b528e:	b92b      	cbnz	r3, b529c <setup+0x4e4>
   b5290:	4909      	ldr	r1, [pc, #36]	; (b52b8 <setup+0x500>)
   b5292:	f244 2202 	movw	r2, #16898	; 0x4202
   b5296:	3010      	adds	r0, #16
   b5298:	f7ff fa08 	bl	b46ac <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b529c:	4915      	ldr	r1, [pc, #84]	; (b52f4 <setup+0x53c>)
   b529e:	4814      	ldr	r0, [pc, #80]	; (b52f0 <setup+0x538>)
   b52a0:	2201      	movs	r2, #1
   b52a2:	f7ff f895 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b52a6:	4814      	ldr	r0, [pc, #80]	; (b52f8 <setup+0x540>)
   b52a8:	f001 fbba 	bl	b6a20 <_ZN7FatFile5closeEv>
   b52ac:	e7c5      	b.n	b523a <setup+0x482>
}
   b52ae:	b015      	add	sp, #84	; 0x54
   b52b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52b4:	2003dd9a 	.word	0x2003dd9a
   b52b8:	2003ddba 	.word	0x2003ddba
   b52bc:	000c4c1d 	.word	0x000c4c1d
   b52c0:	000c4c22 	.word	0x000c4c22
   b52c4:	2003e5f4 	.word	0x2003e5f4
   b52c8:	2003ddec 	.word	0x2003ddec
   b52cc:	2003e5a4 	.word	0x2003e5a4
   b52d0:	000c4ea4 	.word	0x000c4ea4
   b52d4:	2003e0bc 	.word	0x2003e0bc
   b52d8:	007a1200 	.word	0x007a1200
   b52dc:	000c4c2b 	.word	0x000c4c2b
   b52e0:	000c4be9 	.word	0x000c4be9
   b52e4:	2003defc 	.word	0x2003defc
   b52e8:	000c4c50 	.word	0x000c4c50
   b52ec:	2003deec 	.word	0x2003deec
   b52f0:	2003de68 	.word	0x2003de68
   b52f4:	000c4ca6 	.word	0x000c4ca6
   b52f8:	2003de78 	.word	0x2003de78

000b52fc <_Z12updateMotorsv>:
void updateMotors(){
   b52fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5300:	ed2d 8b04 	vpush	{d8-d9}
    if(millis() - motionTime > MTR_RAMP_TIME){
   b5304:	4c89      	ldr	r4, [pc, #548]	; (b552c <_Z12updateMotorsv+0x230>)
   b5306:	f8df a264 	ldr.w	sl, [pc, #612]	; b556c <_Z12updateMotorsv+0x270>
void updateMotors(){
   b530a:	b085      	sub	sp, #20
   b530c:	f008 f95a 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - motionTime > MTR_RAMP_TIME){
   b5310:	6823      	ldr	r3, [r4, #0]
   b5312:	1ac0      	subs	r0, r0, r3
   b5314:	2832      	cmp	r0, #50	; 0x32
   b5316:	d905      	bls.n	b5324 <_Z12updateMotorsv+0x28>
        updateMotorControl = true;
   b5318:	2301      	movs	r3, #1
   b531a:	f88a 3000 	strb.w	r3, [sl]
   b531e:	f008 f951 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
        motionTime = millis();
   b5322:	6020      	str	r0, [r4, #0]
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5324:	f89a 3000 	ldrb.w	r3, [sl]
   b5328:	2b00      	cmp	r3, #0
   b532a:	d05a      	beq.n	b53e2 <_Z12updateMotorsv+0xe6>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b532c:	4b80      	ldr	r3, [pc, #512]	; (b5530 <_Z12updateMotorsv+0x234>)
   b532e:	4c81      	ldr	r4, [pc, #516]	; (b5534 <_Z12updateMotorsv+0x238>)
   b5330:	781b      	ldrb	r3, [r3, #0]
   b5332:	4f81      	ldr	r7, [pc, #516]	; (b5538 <_Z12updateMotorsv+0x23c>)
   b5334:	4d81      	ldr	r5, [pc, #516]	; (b553c <_Z12updateMotorsv+0x240>)
   b5336:	4e82      	ldr	r6, [pc, #520]	; (b5540 <_Z12updateMotorsv+0x244>)
   b5338:	3b01      	subs	r3, #1
   b533a:	2b01      	cmp	r3, #1
   b533c:	f200 80a6 	bhi.w	b548c <_Z12updateMotorsv+0x190>
            if(travelDistance < MTR_CUTOFF_RAD){            //If the bot is close enough to the center when in autonomous and sentry, then disable motors and float there
   b5340:	4b80      	ldr	r3, [pc, #512]	; (b5544 <_Z12updateMotorsv+0x248>)
   b5342:	edd3 7a00 	vldr	s15, [r3]
   b5346:	4b80      	ldr	r3, [pc, #512]	; (b5548 <_Z12updateMotorsv+0x24c>)
   b5348:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b534c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5354:	d54a      	bpl.n	b53ec <_Z12updateMotorsv+0xf0>
                pointArrived = true;                        //Indicate that the bot has arrived at the target point, which acts as a disable until it drifts out of the larger radius
   b5356:	2201      	movs	r2, #1
   b5358:	701a      	strb	r2, [r3, #0]
                leftMotorSpeed = setLSpeed = 90;            //Set left and right motor speeds to off
   b535a:	235a      	movs	r3, #90	; 0x5a
   b535c:	7023      	strb	r3, [r4, #0]
   b535e:	703b      	strb	r3, [r7, #0]
                rightMotorSpeed = setRSpeed = 90;
   b5360:	702b      	strb	r3, [r5, #0]
   b5362:	7033      	strb	r3, [r6, #0]
        if(setLSpeed < 90 && setLSpeed >= MTR_ST_REV) setLSpeed = MTR_ST_REV;
   b5364:	7823      	ldrb	r3, [r4, #0]
   b5366:	3b50      	subs	r3, #80	; 0x50
   b5368:	2b09      	cmp	r3, #9
   b536a:	bf9c      	itt	ls
   b536c:	2350      	movls	r3, #80	; 0x50
   b536e:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   b5370:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5372:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   b5374:	3b50      	subs	r3, #80	; 0x50
   b5376:	2b09      	cmp	r3, #9
   b5378:	bf9c      	itt	ls
   b537a:	2350      	movls	r3, #80	; 0x50
   b537c:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b537e:	783b      	ldrb	r3, [r7, #0]
   b5380:	4293      	cmp	r3, r2
   b5382:	f080 80c0 	bcs.w	b5506 <_Z12updateMotorsv+0x20a>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;   //If we're off by more than one step size, then increment by one step
   b5386:	1ad1      	subs	r1, r2, r3
   b5388:	2903      	cmp	r1, #3
   b538a:	f340 80c3 	ble.w	b5514 <_Z12updateMotorsv+0x218>
   b538e:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5390:	703b      	strb	r3, [r7, #0]
        if(rightMotorSpeed < setRSpeed){                                                    //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5392:	7833      	ldrb	r3, [r6, #0]
   b5394:	782a      	ldrb	r2, [r5, #0]
   b5396:	4293      	cmp	r3, r2
   b5398:	f080 80be 	bcs.w	b5518 <_Z12updateMotorsv+0x21c>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD; //If we're off by more than one step size, then increment by one step
   b539c:	1ad1      	subs	r1, r2, r3
   b539e:	2903      	cmp	r1, #3
   b53a0:	f340 80c1 	ble.w	b5526 <_Z12updateMotorsv+0x22a>
   b53a4:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b53a6:	7033      	strb	r3, [r6, #0]
        if(!stopActive){                    //If there has not been a stop command, then update the ESC
   b53a8:	4b68      	ldr	r3, [pc, #416]	; (b554c <_Z12updateMotorsv+0x250>)
   b53aa:	781b      	ldrb	r3, [r3, #0]
   b53ac:	b9b3      	cbnz	r3, b53dc <_Z12updateMotorsv+0xe0>
            ESCL.write(180-leftMotorSpeed);
   b53ae:	7839      	ldrb	r1, [r7, #0]
   b53b0:	4867      	ldr	r0, [pc, #412]	; (b5550 <_Z12updateMotorsv+0x254>)
   b53b2:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b53b6:	f00b fd6c 	bl	c0e92 <_ZN5Servo5writeEi>
            ESCR.write(rightMotorSpeed);
   b53ba:	7831      	ldrb	r1, [r6, #0]
   b53bc:	4865      	ldr	r0, [pc, #404]	; (b5554 <_Z12updateMotorsv+0x258>)
   b53be:	f00b fd68 	bl	c0e92 <_ZN5Servo5writeEi>
            Serial.printlnf("Update motor speed (%dms): %d %d",millis(), setRSpeed, setLSpeed);
   b53c2:	f00c f96b 	bl	c169c <_Z16_fetch_usbserialv>
   b53c6:	4606      	mov	r6, r0
   b53c8:	f008 f8fc 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b53cc:	7823      	ldrb	r3, [r4, #0]
   b53ce:	9300      	str	r3, [sp, #0]
   b53d0:	4602      	mov	r2, r0
   b53d2:	782b      	ldrb	r3, [r5, #0]
   b53d4:	4960      	ldr	r1, [pc, #384]	; (b5558 <_Z12updateMotorsv+0x25c>)
   b53d6:	4630      	mov	r0, r6
   b53d8:	f7fe fffa 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        updateMotorControl = false;        //Set the flag to false
   b53dc:	2300      	movs	r3, #0
   b53de:	f88a 3000 	strb.w	r3, [sl]
}
   b53e2:	b005      	add	sp, #20
   b53e4:	ecbd 8b04 	vpop	{d8-d9}
   b53e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){      //Check if the bot is inside of the larger radius of approaching the target point, start slowing motors here
   b53ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b53f0:	eef4 7ac7 	vcmpe.f32	s15, s14
   b53f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53f8:	d55e      	bpl.n	b54b8 <_Z12updateMotorsv+0x1bc>
                if(pointArrived){                           //If we had already arrived at the target point, then use this larger radius as a deadzone so we don't have rapid on/off on the small radius border
   b53fa:	781b      	ldrb	r3, [r3, #0]
   b53fc:	9303      	str	r3, [sp, #12]
   b53fe:	b11b      	cbz	r3, b5408 <_Z12updateMotorsv+0x10c>
                    setLSpeed = 90;                         //Keep motors off here
   b5400:	235a      	movs	r3, #90	; 0x5a
   b5402:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   b5404:	702b      	strb	r3, [r5, #0]
   b5406:	e7ad      	b.n	b5364 <_Z12updateMotorsv+0x68>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);    //Take the base 90 (stopped speed), add the delta for how much the heading is off, and slow with distance
   b5408:	4b54      	ldr	r3, [pc, #336]	; (b555c <_Z12updateMotorsv+0x260>)
   b540a:	eddf 8a55 	vldr	s17, [pc, #340]	; b5560 <_Z12updateMotorsv+0x264>
   b540e:	ed93 8a00 	vldr	s16, [r3]
   b5412:	4b54      	ldr	r3, [pc, #336]	; (b5564 <_Z12updateMotorsv+0x268>)
   b5414:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5418:	ed93 7a00 	vldr	s14, [r3]
   b541c:	ee17 0a90 	vmov	r0, s15
   b5420:	ee28 8a07 	vmul.f32	s16, s16, s14
   b5424:	f00c fd88 	bl	c1f38 <__aeabi_f2d>
   b5428:	4b4f      	ldr	r3, [pc, #316]	; (b5568 <_Z12updateMotorsv+0x26c>)
   b542a:	2200      	movs	r2, #0
   b542c:	f00c fddc 	bl	c1fe8 <__aeabi_dmul>
   b5430:	ee78 7a88 	vadd.f32	s15, s17, s16
   b5434:	4680      	mov	r8, r0
   b5436:	4689      	mov	r9, r1
   b5438:	ee17 0a90 	vmov	r0, s15
   b543c:	f00c fd7c 	bl	c1f38 <__aeabi_f2d>
   b5440:	4642      	mov	r2, r8
   b5442:	464b      	mov	r3, r9
   b5444:	f00c fdd0 	bl	c1fe8 <__aeabi_dmul>
   b5448:	f00d f868 	bl	c251c <__aeabi_d2iz>
   b544c:	4683      	mov	fp, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b544e:	ee18 0a90 	vmov	r0, s17
   b5452:	f00c fd71 	bl	c1f38 <__aeabi_f2d>
   b5456:	ec41 0b19 	vmov	d9, r0, r1
   b545a:	ee18 0a10 	vmov	r0, s16
   b545e:	f00c fd6b 	bl	c1f38 <__aeabi_f2d>
   b5462:	4642      	mov	r2, r8
   b5464:	464b      	mov	r3, r9
   b5466:	f00c fdbf 	bl	c1fe8 <__aeabi_dmul>
   b546a:	4602      	mov	r2, r0
   b546c:	460b      	mov	r3, r1
   b546e:	ec51 0b19 	vmov	r0, r1, d9
   b5472:	f00c fc01 	bl	c1c78 <__aeabi_dsub>
   b5476:	f00d f851 	bl	c251c <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;             //Cap the speed between 0 and 180
   b547a:	f1bb 0f00 	cmp.w	fp, #0
   b547e:	da12      	bge.n	b54a6 <_Z12updateMotorsv+0x1aa>
   b5480:	9b03      	ldr	r3, [sp, #12]
                    else if(Lset > 180) setLSpeed = 180;
   b5482:	7023      	strb	r3, [r4, #0]
                    if(Rset < 0) setRSpeed = 0;
   b5484:	2800      	cmp	r0, #0
   b5486:	da13      	bge.n	b54b0 <_Z12updateMotorsv+0x1b4>
   b5488:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b548a:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <= MTR_ST_FWD) setLSpeed = MTR_ST_FWD; //Push motor speed out of deadzone to make sure the motors actually respond to non-90 inputs
   b548c:	7823      	ldrb	r3, [r4, #0]
   b548e:	3b5b      	subs	r3, #91	; 0x5b
   b5490:	2b09      	cmp	r3, #9
   b5492:	bf9c      	itt	ls
   b5494:	2364      	movls	r3, #100	; 0x64
   b5496:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   b5498:	782b      	ldrb	r3, [r5, #0]
   b549a:	3b5b      	subs	r3, #91	; 0x5b
   b549c:	2b09      	cmp	r3, #9
   b549e:	f63f af61 	bhi.w	b5364 <_Z12updateMotorsv+0x68>
   b54a2:	2364      	movs	r3, #100	; 0x64
   b54a4:	e7ae      	b.n	b5404 <_Z12updateMotorsv+0x108>
                    else if(Lset > 180) setLSpeed = 180;
   b54a6:	f1bb 0fb4 	cmp.w	fp, #180	; 0xb4
   b54aa:	ddeb      	ble.n	b5484 <_Z12updateMotorsv+0x188>
   b54ac:	23b4      	movs	r3, #180	; 0xb4
   b54ae:	e7e8      	b.n	b5482 <_Z12updateMotorsv+0x186>
                    else if(Rset > 180) setRSpeed = 180;
   b54b0:	28b4      	cmp	r0, #180	; 0xb4
   b54b2:	ddeb      	ble.n	b548c <_Z12updateMotorsv+0x190>
   b54b4:	23b4      	movs	r3, #180	; 0xb4
   b54b6:	e7e8      	b.n	b548a <_Z12updateMotorsv+0x18e>
                pointArrived = false;                       //Set flag back to false so we have to travel to the inner circle, also happens usually when a new point is specified
   b54b8:	2100      	movs	r1, #0
   b54ba:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b54bc:	4b27      	ldr	r3, [pc, #156]	; (b555c <_Z12updateMotorsv+0x260>)
   b54be:	eddf 7a28 	vldr	s15, [pc, #160]	; b5560 <_Z12updateMotorsv+0x264>
   b54c2:	edd3 6a00 	vldr	s13, [r3]
   b54c6:	4b27      	ldr	r3, [pc, #156]	; (b5564 <_Z12updateMotorsv+0x268>)
   b54c8:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b54cc:	ed93 6a00 	vldr	s12, [r3]
   b54d0:	eeb0 7a67 	vmov.f32	s14, s15
   b54d4:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b54d8:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b54dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b54e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b54e4:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b54e8:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b54ea:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b54ee:	da05      	bge.n	b54fc <_Z12updateMotorsv+0x200>
   b54f0:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b54f2:	2b00      	cmp	r3, #0
   b54f4:	dbc8      	blt.n	b5488 <_Z12updateMotorsv+0x18c>
                else if(Rset > 180) setRSpeed = 180;
   b54f6:	2bb4      	cmp	r3, #180	; 0xb4
   b54f8:	dcdc      	bgt.n	b54b4 <_Z12updateMotorsv+0x1b8>
   b54fa:	e7c6      	b.n	b548a <_Z12updateMotorsv+0x18e>
                else if(Lset > 180) setLSpeed = 180;
   b54fc:	2ab4      	cmp	r2, #180	; 0xb4
   b54fe:	bfc8      	it	gt
   b5500:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5502:	7022      	strb	r2, [r4, #0]
   b5504:	e7f5      	b.n	b54f2 <_Z12updateMotorsv+0x1f6>
        else if(leftMotorSpeed > setLSpeed){                                                //If the acutal motor (leftMotorSpeed) speed is greater than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5506:	f67f af44 	bls.w	b5392 <_Z12updateMotorsv+0x96>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b550a:	1a99      	subs	r1, r3, r2
   b550c:	2903      	cmp	r1, #3
   b550e:	dd01      	ble.n	b5514 <_Z12updateMotorsv+0x218>
   b5510:	3b03      	subs	r3, #3
   b5512:	e73d      	b.n	b5390 <_Z12updateMotorsv+0x94>
            else leftMotorSpeed = setLSpeed;                                                //Otherwise, we're less than one step, so finish step function
   b5514:	703a      	strb	r2, [r7, #0]
   b5516:	e73c      	b.n	b5392 <_Z12updateMotorsv+0x96>
        else if(rightMotorSpeed > setRSpeed){                                               //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5518:	f67f af46 	bls.w	b53a8 <_Z12updateMotorsv+0xac>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b551c:	1a99      	subs	r1, r3, r2
   b551e:	2903      	cmp	r1, #3
   b5520:	dd01      	ble.n	b5526 <_Z12updateMotorsv+0x22a>
   b5522:	3b03      	subs	r3, #3
   b5524:	e73f      	b.n	b53a6 <_Z12updateMotorsv+0xaa>
            else rightMotorSpeed = setRSpeed;                                               //Otherwise, we're less than one step, so finish step function
   b5526:	7032      	strb	r2, [r6, #0]
   b5528:	e73e      	b.n	b53a8 <_Z12updateMotorsv+0xac>
   b552a:	bf00      	nop
   b552c:	2003decc 	.word	0x2003decc
   b5530:	2003dd99 	.word	0x2003dd99
   b5534:	2003e558 	.word	0x2003e558
   b5538:	2003de08 	.word	0x2003de08
   b553c:	2003e559 	.word	0x2003e559
   b5540:	2003e0b1 	.word	0x2003e0b1
   b5544:	2003e5d8 	.word	0x2003e5d8
   b5548:	2003e0a1 	.word	0x2003e0a1
   b554c:	2003e5c1 	.word	0x2003e5c1
   b5550:	2003dd30 	.word	0x2003dd30
   b5554:	2003dd40 	.word	0x2003dd40
   b5558:	000c4ccb 	.word	0x000c4ccb
   b555c:	2003db18 	.word	0x2003db18
   b5560:	42b40000 	.word	0x42b40000
   b5564:	2003e5c8 	.word	0x2003e5c8
   b5568:	3fd00000 	.word	0x3fd00000
   b556c:	2003e5e4 	.word	0x2003e5e4

000b5570 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5574:	b084      	sub	sp, #16
   b5576:	af02      	add	r7, sp, #8
   b5578:	4604      	mov	r4, r0
   b557a:	460e      	mov	r6, r1
   b557c:	4691      	mov	r9, r2
   b557e:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5580:	f00d f95b 	bl	c283a <strlen>
   b5584:	3009      	adds	r0, #9
   b5586:	f020 0307 	bic.w	r3, r0, #7
   b558a:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b558e:	4620      	mov	r0, r4
   b5590:	f00d f953 	bl	c283a <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5594:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5598:	492e      	ldr	r1, [pc, #184]	; (b5654 <_Z8sendDataPKchbbb+0xe4>)
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b559a:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b559c:	4603      	mov	r3, r0
   b559e:	4622      	mov	r2, r4
   b55a0:	4628      	mov	r0, r5
   b55a2:	f008 fb15 	bl	bdbd0 <sprintf>
    if(sendLTE || sendMode == 4){                               //If sending over LTE, just use the particle event
   b55a6:	f1ba 0f00 	cmp.w	sl, #0
   b55aa:	d101      	bne.n	b55b0 <_Z8sendDataPKchbbb+0x40>
   b55ac:	2e04      	cmp	r6, #4
   b55ae:	d11b      	bne.n	b55e8 <_Z8sendDataPKchbbb+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b55b0:	4b29      	ldr	r3, [pc, #164]	; (b5658 <_Z8sendDataPKchbbb+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55b2:	492a      	ldr	r1, [pc, #168]	; (b565c <_Z8sendDataPKchbbb+0xec>)
   b55b4:	781b      	ldrb	r3, [r3, #0]
   b55b6:	f88d 3000 	strb.w	r3, [sp]
   b55ba:	462a      	mov	r2, r5
   b55bc:	233c      	movs	r3, #60	; 0x3c
   b55be:	4638      	mov	r0, r7
   b55c0:	f009 fece 	bl	bf360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b55c4:	687c      	ldr	r4, [r7, #4]
   b55c6:	b17c      	cbz	r4, b55e8 <_Z8sendDataPKchbbb+0x78>
      if (--_M_use_count == 0)
   b55c8:	6863      	ldr	r3, [r4, #4]
   b55ca:	3b01      	subs	r3, #1
   b55cc:	6063      	str	r3, [r4, #4]
   b55ce:	b95b      	cbnz	r3, b55e8 <_Z8sendDataPKchbbb+0x78>
          _M_dispose();
   b55d0:	6823      	ldr	r3, [r4, #0]
   b55d2:	4620      	mov	r0, r4
   b55d4:	689b      	ldr	r3, [r3, #8]
   b55d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b55d8:	68a3      	ldr	r3, [r4, #8]
   b55da:	3b01      	subs	r3, #1
   b55dc:	60a3      	str	r3, [r4, #8]
   b55de:	b91b      	cbnz	r3, b55e8 <_Z8sendDataPKchbbb+0x78>
            _M_destroy();
   b55e0:	6823      	ldr	r3, [r4, #0]
   b55e2:	4620      	mov	r0, r4
   b55e4:	68db      	ldr	r3, [r3, #12]
   b55e6:	4798      	blx	r3
    if((sendBLE || sendMode == 1) && BLE.connected()){          //Check that BLE is connected before trying to transmit here
   b55e8:	f1b9 0f00 	cmp.w	r9, #0
   b55ec:	d101      	bne.n	b55f2 <_Z8sendDataPKchbbb+0x82>
   b55ee:	2e01      	cmp	r6, #1
   b55f0:	d121      	bne.n	b5636 <_Z8sendDataPKchbbb+0xc6>
   b55f2:	f008 fead 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55f6:	f008 ff09 	bl	be40c <_ZNK8particle14BleLocalDevice9connectedEv>
   b55fa:	b1e0      	cbz	r0, b5636 <_Z8sendDataPKchbbb+0xc6>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b55fc:	4628      	mov	r0, r5
   b55fe:	f00d f91c 	bl	c283a <strlen>
   b5602:	3007      	adds	r0, #7
   b5604:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5608:	466c      	mov	r4, sp
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b560a:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b560e:	4628      	mov	r0, r5
   b5610:	f00d f913 	bl	c283a <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5614:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5618:	4602      	mov	r2, r0
   b561a:	4629      	mov	r1, r5
   b561c:	4648      	mov	r0, r9
   b561e:	f00d f859 	bl	c26d4 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5622:	4628      	mov	r0, r5
   b5624:	f00d f909 	bl	c283a <strlen>
   b5628:	2300      	movs	r3, #0
   b562a:	4602      	mov	r2, r0
   b562c:	4649      	mov	r1, r9
   b562e:	480c      	ldr	r0, [pc, #48]	; (b5660 <_Z8sendDataPKchbbb+0xf0>)
   b5630:	f008 fd7e 	bl	be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5634:	46a5      	mov	sp, r4
    if(sendXBee || sendMode == 2){                              //Send out over the harware serial to go through XBee
   b5636:	f1b8 0f00 	cmp.w	r8, #0
   b563a:	d101      	bne.n	b5640 <_Z8sendDataPKchbbb+0xd0>
   b563c:	2e02      	cmp	r6, #2
   b563e:	d104      	bne.n	b564a <_Z8sendDataPKchbbb+0xda>
        Serial1.println(outStr);
   b5640:	f00c f9d8 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b5644:	4629      	mov	r1, r5
   b5646:	f00b fbb2 	bl	c0dae <_ZN5Print7printlnEPKc>
}
   b564a:	3708      	adds	r7, #8
   b564c:	46bd      	mov	sp, r7
   b564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5652:	bf00      	nop
   b5654:	000c4cec 	.word	0x000c4cec
   b5658:	2003dd6c 	.word	0x2003dd6c
   b565c:	000c4cf3 	.word	0x000c4cf3
   b5660:	2003e5dc 	.word	0x2003e5dc
   b5664:	00000000 	.word	0x00000000

000b5668 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b5668:	b5f0      	push	{r4, r5, r6, r7, lr}
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b566a:	2015      	movs	r0, #21
uint8_t readPowerSys(){
   b566c:	b087      	sub	sp, #28
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b566e:	f00c f952 	bl	c1916 <analogRead>
   b5672:	ee07 0a90 	vmov	s15, r0
   b5676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b567a:	4e53      	ldr	r6, [pc, #332]	; (b57c8 <_Z12readPowerSysv+0x160>)
        battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;          //Calculate voltage read in from voltage divider
   b567c:	ee17 0a90 	vmov	r0, s15
   b5680:	f00c fc5a 	bl	c1f38 <__aeabi_f2d>
   b5684:	a348      	add	r3, pc, #288	; (adr r3, b57a8 <_Z12readPowerSysv+0x140>)
   b5686:	e9d3 2300 	ldrd	r2, r3, [r3]
   b568a:	f00c fcad 	bl	c1fe8 <__aeabi_dmul>
   b568e:	f00c ff8d 	bl	c25ac <__aeabi_d2f>
   b5692:	4b4e      	ldr	r3, [pc, #312]	; (b57cc <_Z12readPowerSysv+0x164>)
   b5694:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   b5696:	f00c fc4f 	bl	c1f38 <__aeabi_f2d>
   b569a:	a345      	add	r3, pc, #276	; (adr r3, b57b0 <_Z12readPowerSysv+0x148>)
   b569c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56a0:	f00c faea 	bl	c1c78 <__aeabi_dsub>
   b56a4:	4b4a      	ldr	r3, [pc, #296]	; (b57d0 <_Z12readPowerSysv+0x168>)
   b56a6:	2200      	movs	r2, #0
   b56a8:	f00c fc9e 	bl	c1fe8 <__aeabi_dmul>
   b56ac:	a342      	add	r3, pc, #264	; (adr r3, b57b8 <_Z12readPowerSysv+0x150>)
   b56ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56b2:	f00c fdc3 	bl	c223c <__aeabi_ddiv>
   b56b6:	f00c ff31 	bl	c251c <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;                                              //Max/min percentage so there is a slight deadzone at either end
   b56ba:	2864      	cmp	r0, #100	; 0x64
   b56bc:	4603      	mov	r3, r0
   b56be:	bfa8      	it	ge
   b56c0:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b56c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b56c6:	2814      	cmp	r0, #20
   b56c8:	7033      	strb	r3, [r6, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;                      //Check if battery percentage is low, if low then set flag so the LED flashes and the CChub pops up an alert
   b56ca:	4b42      	ldr	r3, [pc, #264]	; (b57d4 <_Z12readPowerSysv+0x16c>)
   b56cc:	bfcc      	ite	gt
   b56ce:	2000      	movgt	r0, #0
   b56d0:	2001      	movle	r0, #1
   b56d2:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095; //Read the amplified input from the shunt from the batter and solar array and calculate the multiplier based on the resistor value and datasheet
   b56d4:	2010      	movs	r0, #16
   b56d6:	f00c f91e 	bl	c1916 <analogRead>
   b56da:	ee07 0a90 	vmov	s15, r0
   b56de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b56e2:	ee17 0a90 	vmov	r0, s15
   b56e6:	f00c fc27 	bl	c1f38 <__aeabi_f2d>
   b56ea:	4b3b      	ldr	r3, [pc, #236]	; (b57d8 <_Z12readPowerSysv+0x170>)
   b56ec:	2200      	movs	r2, #0
   b56ee:	f00c fc7b 	bl	c1fe8 <__aeabi_dmul>
   b56f2:	a333      	add	r3, pc, #204	; (adr r3, b57c0 <_Z12readPowerSysv+0x158>)
   b56f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56f8:	f00c fda0 	bl	c223c <__aeabi_ddiv>
   b56fc:	f00c ff56 	bl	c25ac <__aeabi_d2f>
   b5700:	4b36      	ldr	r3, [pc, #216]	; (b57dc <_Z12readPowerSysv+0x174>)
   b5702:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b5704:	2011      	movs	r0, #17
   b5706:	f00c f906 	bl	c1916 <analogRead>
   b570a:	ee07 0a90 	vmov	s15, r0
   b570e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5712:	ee17 0a90 	vmov	r0, s15
   b5716:	f00c fc0f 	bl	c1f38 <__aeabi_f2d>
   b571a:	4b31      	ldr	r3, [pc, #196]	; (b57e0 <_Z12readPowerSysv+0x178>)
   b571c:	2200      	movs	r2, #0
   b571e:	f00c fc63 	bl	c1fe8 <__aeabi_dmul>
   b5722:	a327      	add	r3, pc, #156	; (adr r3, b57c0 <_Z12readPowerSysv+0x158>)
   b5724:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5728:	f00c fd88 	bl	c223c <__aeabi_ddiv>
   b572c:	f00c ff3e 	bl	c25ac <__aeabi_d2f>
   b5730:	4b2c      	ldr	r3, [pc, #176]	; (b57e4 <_Z12readPowerSysv+0x17c>)
   b5732:	6018      	str	r0, [r3, #0]
    if(!digitalRead(LEAK_DET) && !warnedLeak){                              //LEAK_DET pin is pulled low when a leak is detected
   b5734:	201d      	movs	r0, #29
   b5736:	f00c f8db 	bl	c18f0 <digitalRead>
   b573a:	b9b8      	cbnz	r0, b576c <_Z12readPowerSysv+0x104>
   b573c:	4f2a      	ldr	r7, [pc, #168]	; (b57e8 <_Z12readPowerSysv+0x180>)
   b573e:	783d      	ldrb	r5, [r7, #0]
   b5740:	b9a5      	cbnz	r5, b576c <_Z12readPowerSysv+0x104>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5742:	2401      	movs	r4, #1
        if(!LEAK_DET_BYPASS) sprintf(warnChar,"B%dCCldt",BOTNUM);           //Create error string based on if it's a cutoff trigger or a just a warning
   b5744:	4929      	ldr	r1, [pc, #164]	; (b57ec <_Z12readPowerSysv+0x184>)
   b5746:	2201      	movs	r2, #1
   b5748:	a803      	add	r0, sp, #12
   b574a:	f008 fa41 	bl	bdbd0 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b574e:	4623      	mov	r3, r4
   b5750:	4622      	mov	r2, r4
   b5752:	4629      	mov	r1, r5
   b5754:	a803      	add	r0, sp, #12
   b5756:	9400      	str	r4, [sp, #0]
   b5758:	f7ff ff0a 	bl	b5570 <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b575c:	2032      	movs	r0, #50	; 0x32
   b575e:	f008 fa93 	bl	bdc88 <delay>
        if(!LEAK_DET_BYPASS) digitalWrite(PWR_EN,LOW);                      //kill system
   b5762:	4629      	mov	r1, r5
   b5764:	201c      	movs	r0, #28
   b5766:	f00c f8aa 	bl	c18be <digitalWrite>
        warnedLeak = true;                                                  //Set flag to not spam console in case cutoff doesn't work
   b576a:	703c      	strb	r4, [r7, #0]
    if(!digitalRead(BAT_LEAK_DET) && !warnedBattLeak){                      //BAT_LEAK_DET pin is pulled low when a leak is detected
   b576c:	200f      	movs	r0, #15
   b576e:	f00c f8bf 	bl	c18f0 <digitalRead>
   b5772:	b998      	cbnz	r0, b579c <_Z12readPowerSysv+0x134>
   b5774:	4d1e      	ldr	r5, [pc, #120]	; (b57f0 <_Z12readPowerSysv+0x188>)
   b5776:	782f      	ldrb	r7, [r5, #0]
   b5778:	b987      	cbnz	r7, b579c <_Z12readPowerSysv+0x134>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b577a:	2401      	movs	r4, #1
        else sprintf(warnChar,"B%dCCwlb",BOTNUM);                           //Message to warn leak in battery
   b577c:	491d      	ldr	r1, [pc, #116]	; (b57f4 <_Z12readPowerSysv+0x18c>)
   b577e:	2201      	movs	r2, #1
   b5780:	a803      	add	r0, sp, #12
   b5782:	f008 fa25 	bl	bdbd0 <sprintf>
        sendData(warnChar,0,true,true,true);                                //Send data out over all transmission methods regardless
   b5786:	4623      	mov	r3, r4
   b5788:	4622      	mov	r2, r4
   b578a:	4639      	mov	r1, r7
   b578c:	a803      	add	r0, sp, #12
   b578e:	9400      	str	r4, [sp, #0]
   b5790:	f7ff feee 	bl	b5570 <_Z8sendDataPKchbbb>
        delay(50);                                                          //wait 50ms for data to go out
   b5794:	2032      	movs	r0, #50	; 0x32
   b5796:	f008 fa77 	bl	bdc88 <delay>
        warnedBattLeak = true;
   b579a:	702c      	strb	r4, [r5, #0]
}
   b579c:	7830      	ldrb	r0, [r6, #0]
   b579e:	b007      	add	sp, #28
   b57a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b57a2:	bf00      	nop
   b57a4:	f3af 8000 	nop.w
   b57a8:	6e04c059 	.word	0x6e04c059
   b57ac:	3f73cddd 	.word	0x3f73cddd
   b57b0:	66666666 	.word	0x66666666
   b57b4:	40246666 	.word	0x40246666
   b57b8:	cccccccc 	.word	0xcccccccc
   b57bc:	4018cccc 	.word	0x4018cccc
   b57c0:	00000000 	.word	0x00000000
   b57c4:	40affe00 	.word	0x40affe00
   b57c8:	2003dd80 	.word	0x2003dd80
   b57cc:	2003dd84 	.word	0x2003dd84
   b57d0:	40590000 	.word	0x40590000
   b57d4:	2003dec8 	.word	0x2003dec8
   b57d8:	40408000 	.word	0x40408000
   b57dc:	2003dd7c 	.word	0x2003dd7c
   b57e0:	40308000 	.word	0x40308000
   b57e4:	2003e57c 	.word	0x2003e57c
   b57e8:	2003e5f2 	.word	0x2003e5f2
   b57ec:	000c4cfb 	.word	0x000c4cfb
   b57f0:	2003e5f1 	.word	0x2003e5f1
   b57f4:	000c4d04 	.word	0x000c4d04

000b57f8 <_Z16sendResponseDatav>:
void sendResponseData(){
   b57f8:	b530      	push	{r4, r5, lr}
    if(requestActive){              //If the CC has requested data using the req command
   b57fa:	4d2a      	ldr	r5, [pc, #168]	; (b58a4 <_Z16sendResponseDatav+0xac>)
   b57fc:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b57fe:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){              //If the CC has requested data using the req command
   b5800:	2b00      	cmp	r3, #0
   b5802:	d04d      	beq.n	b58a0 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);   //Empty the string if it had something
   b5804:	2241      	movs	r2, #65	; 0x41
   b5806:	2100      	movs	r1, #0
   b5808:	a80b      	add	r0, sp, #44	; 0x2c
   b580a:	f00c ff8b 	bl	c2724 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b580e:	4b26      	ldr	r3, [pc, #152]	; (b58a8 <_Z16sendResponseDatav+0xb0>)
   b5810:	ed9f 7a26 	vldr	s14, [pc, #152]	; b58ac <_Z16sendResponseDatav+0xb4>
   b5814:	edd3 7a00 	vldr	s15, [r3]
   b5818:	4b25      	ldr	r3, [pc, #148]	; (b58b0 <_Z16sendResponseDatav+0xb8>)
   b581a:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b581e:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5824:	edcd 7a08 	vstr	s15, [sp, #32]
   b5828:	edd3 7a00 	vldr	s15, [r3]
   b582c:	4b21      	ldr	r3, [pc, #132]	; (b58b4 <_Z16sendResponseDatav+0xbc>)
   b582e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5836:	edcd 7a07 	vstr	s15, [sp, #28]
   b583a:	edd3 7a00 	vldr	s15, [r3]
   b583e:	4b1e      	ldr	r3, [pc, #120]	; (b58b8 <_Z16sendResponseDatav+0xc0>)
   b5840:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5848:	edcd 7a06 	vstr	s15, [sp, #24]
   b584c:	edd3 7a00 	vldr	s15, [r3]
   b5850:	4b1a      	ldr	r3, [pc, #104]	; (b58bc <_Z16sendResponseDatav+0xc4>)
   b5852:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b585a:	edcd 7a05 	vstr	s15, [sp, #20]
   b585e:	edd3 7a00 	vldr	s15, [r3]
   b5862:	4b17      	ldr	r3, [pc, #92]	; (b58c0 <_Z16sendResponseDatav+0xc8>)
   b5864:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b586c:	edcd 7a04 	vstr	s15, [sp, #16]
   b5870:	6818      	ldr	r0, [r3, #0]
   b5872:	f00c fb61 	bl	c1f38 <__aeabi_f2d>
   b5876:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b587a:	4b12      	ldr	r3, [pc, #72]	; (b58c4 <_Z16sendResponseDatav+0xcc>)
   b587c:	6818      	ldr	r0, [r3, #0]
   b587e:	f00c fb5b 	bl	c1f38 <__aeabi_f2d>
   b5882:	2201      	movs	r2, #1
   b5884:	e9cd 0100 	strd	r0, r1, [sp]
   b5888:	490f      	ldr	r1, [pc, #60]	; (b58c8 <_Z16sendResponseDatav+0xd0>)
   b588a:	a80b      	add	r0, sp, #44	; 0x2c
   b588c:	f008 f9a0 	bl	bdbd0 <sprintf>
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5890:	7829      	ldrb	r1, [r5, #0]
   b5892:	9400      	str	r4, [sp, #0]
   b5894:	4623      	mov	r3, r4
   b5896:	4622      	mov	r2, r4
   b5898:	a80b      	add	r0, sp, #44	; 0x2c
   b589a:	f7ff fe69 	bl	b5570 <_Z8sendDataPKchbbb>
        requestActive = 0;          //Set flag back to 0
   b589e:	702c      	strb	r4, [r5, #0]
}
   b58a0:	b01d      	add	sp, #116	; 0x74
   b58a2:	bd30      	pop	{r4, r5, pc}
   b58a4:	2003e0b0 	.word	0x2003e0b0
   b58a8:	2003e550 	.word	0x2003e550
   b58ac:	447a0000 	.word	0x447a0000
   b58b0:	2003e548 	.word	0x2003e548
   b58b4:	2003e540 	.word	0x2003e540
   b58b8:	2003e54c 	.word	0x2003e54c
   b58bc:	2003e544 	.word	0x2003e544
   b58c0:	2003dec4 	.word	0x2003dec4
   b58c4:	2003dde8 	.word	0x2003dde8
   b58c8:	000c4d0d 	.word	0x000c4d0d

000b58cc <_Z12statusUpdatev>:
void statusUpdate(){
   b58cc:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b58ce:	4d2d      	ldr	r5, [pc, #180]	; (b5984 <_Z12statusUpdatev+0xb8>)
   b58d0:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b58d2:	b098      	sub	sp, #96	; 0x60
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b58d4:	2b00      	cmp	r3, #0
   b58d6:	d04a      	beq.n	b596e <_Z12statusUpdatev+0xa2>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f %d %d ",BOTNUM,battPercent,statusFlags,latitude,longitude,(int)(battVoltage * battCurrent),(int)(battVoltage * solarCurrent));  //Print status flags, battery, latitude and logitude
   b58d8:	4b2b      	ldr	r3, [pc, #172]	; (b5988 <_Z12statusUpdatev+0xbc>)
   b58da:	4a2c      	ldr	r2, [pc, #176]	; (b598c <_Z12statusUpdatev+0xc0>)
   b58dc:	edd3 7a00 	vldr	s15, [r3]
   b58e0:	ed92 7a00 	vldr	s14, [r2]
   b58e4:	4b2a      	ldr	r3, [pc, #168]	; (b5990 <_Z12statusUpdatev+0xc4>)
   b58e6:	4a2b      	ldr	r2, [pc, #172]	; (b5994 <_Z12statusUpdatev+0xc8>)
   b58e8:	781b      	ldrb	r3, [r3, #0]
   b58ea:	9309      	str	r3, [sp, #36]	; 0x24
   b58ec:	ee27 7a87 	vmul.f32	s14, s15, s14
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b58f0:	4e29      	ldr	r6, [pc, #164]	; (b5998 <_Z12statusUpdatev+0xcc>)
   b58f2:	4c2a      	ldr	r4, [pc, #168]	; (b599c <_Z12statusUpdatev+0xd0>)
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f %d %d ",BOTNUM,battPercent,statusFlags,latitude,longitude,(int)(battVoltage * battCurrent),(int)(battVoltage * solarCurrent));  //Print status flags, battery, latitude and logitude
   b58f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b58f8:	ed8d 7a07 	vstr	s14, [sp, #28]
   b58fc:	ed92 7a00 	vldr	s14, [r2]
   b5900:	4a27      	ldr	r2, [pc, #156]	; (b59a0 <_Z12statusUpdatev+0xd4>)
   b5902:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b590a:	edcd 7a06 	vstr	s15, [sp, #24]
   b590e:	6810      	ldr	r0, [r2, #0]
   b5910:	f00c fb12 	bl	c1f38 <__aeabi_f2d>
   b5914:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5918:	4a22      	ldr	r2, [pc, #136]	; (b59a4 <_Z12statusUpdatev+0xd8>)
   b591a:	6810      	ldr	r0, [r2, #0]
   b591c:	f00c fb0c 	bl	c1f38 <__aeabi_f2d>
   b5920:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5924:	4a20      	ldr	r2, [pc, #128]	; (b59a8 <_Z12statusUpdatev+0xdc>)
   b5926:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5928:	8812      	ldrh	r2, [r2, #0]
   b592a:	9200      	str	r2, [sp, #0]
   b592c:	491f      	ldr	r1, [pc, #124]	; (b59ac <_Z12statusUpdatev+0xe0>)
   b592e:	2201      	movs	r2, #1
   b5930:	a80a      	add	r0, sp, #40	; 0x28
   b5932:	f008 f94d 	bl	bdbd0 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b5936:	7833      	ldrb	r3, [r6, #0]
   b5938:	b9db      	cbnz	r3, b5972 <_Z12statusUpdatev+0xa6>
   b593a:	4b1d      	ldr	r3, [pc, #116]	; (b59b0 <_Z12statusUpdatev+0xe4>)
   b593c:	781b      	ldrb	r3, [r3, #0]
   b593e:	b9c3      	cbnz	r3, b5972 <_Z12statusUpdatev+0xa6>
   b5940:	8823      	ldrh	r3, [r4, #0]
   b5942:	b1cb      	cbz	r3, b5978 <_Z12statusUpdatev+0xac>
   b5944:	f013 0303 	ands.w	r3, r3, #3
   b5948:	d116      	bne.n	b5978 <_Z12statusUpdatev+0xac>
            sendData(updateStr,0,false,false,true);     //Only send out over LTE
   b594a:	2201      	movs	r2, #1
   b594c:	9200      	str	r2, [sp, #0]
   b594e:	4619      	mov	r1, r3
   b5950:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5952:	a80a      	add	r0, sp, #40	; 0x28
   b5954:	f7ff fe0c 	bl	b5570 <_Z8sendDataPKchbbb>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount) LTEStatusCount--;            //Decrement a large coounter for the LTE status. This stops sending the status over LTE after a while to not burn up monthly quota. Should be recovering bots if on cell only
   b5958:	7833      	ldrb	r3, [r6, #0]
   b595a:	b933      	cbnz	r3, b596a <_Z12statusUpdatev+0x9e>
   b595c:	4b14      	ldr	r3, [pc, #80]	; (b59b0 <_Z12statusUpdatev+0xe4>)
   b595e:	781b      	ldrb	r3, [r3, #0]
   b5960:	b91b      	cbnz	r3, b596a <_Z12statusUpdatev+0x9e>
   b5962:	8823      	ldrh	r3, [r4, #0]
   b5964:	b10b      	cbz	r3, b596a <_Z12statusUpdatev+0x9e>
   b5966:	3b01      	subs	r3, #1
   b5968:	8023      	strh	r3, [r4, #0]
        statusReady = false;                            //Clear ready flag
   b596a:	2300      	movs	r3, #0
   b596c:	702b      	strb	r3, [r5, #0]
}
   b596e:	b018      	add	sp, #96	; 0x60
   b5970:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;  //Otherwise, we're sending updates over BLE or XBee, reset counter for cellular
   b5972:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5976:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5978:	2100      	movs	r1, #0
   b597a:	2301      	movs	r3, #1
   b597c:	9100      	str	r1, [sp, #0]
   b597e:	461a      	mov	r2, r3
   b5980:	e7e7      	b.n	b5952 <_Z12statusUpdatev+0x86>
   b5982:	bf00      	nop
   b5984:	2003e5c0 	.word	0x2003e5c0
   b5988:	2003dd84 	.word	0x2003dd84
   b598c:	2003e57c 	.word	0x2003e57c
   b5990:	2003dd80 	.word	0x2003dd80
   b5994:	2003dd7c 	.word	0x2003dd7c
   b5998:	2003dd1c 	.word	0x2003dd1c
   b599c:	2003dd52 	.word	0x2003dd52
   b59a0:	2003dec4 	.word	0x2003dec4
   b59a4:	2003dde8 	.word	0x2003dde8
   b59a8:	2003e5a0 	.word	0x2003e5a0
   b59ac:	000c4d31 	.word	0x000c4d31
   b59b0:	2003dd64 	.word	0x2003dd64

000b59b4 <_Z13sensorHandlerv>:
void sensorHandler(){
   b59b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b59b8:	4d60      	ldr	r5, [pc, #384]	; (b5b3c <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   b59ba:	b097      	sub	sp, #92	; 0x5c
   b59bc:	f007 fe02 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b59c0:	682b      	ldr	r3, [r5, #0]
   b59c2:	4283      	cmp	r3, r0
   b59c4:	f080 8139 	bcs.w	b5c3a <_Z13sensorHandlerv+0x286>
   b59c8:	4e5d      	ldr	r6, [pc, #372]	; (b5b40 <_Z13sensorHandlerv+0x18c>)
   b59ca:	7833      	ldrb	r3, [r6, #0]
   b59cc:	2b00      	cmp	r3, #0
   b59ce:	f000 8134 	beq.w	b5c3a <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){    //Request 20 bytes from the PH sensor
   b59d2:	f00b ffcf 	bl	c1974 <_Z19__fetch_global_Wirev>
   b59d6:	2301      	movs	r3, #1
   b59d8:	2214      	movs	r2, #20
   b59da:	2163      	movs	r1, #99	; 0x63
   b59dc:	f009 fec9 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
   b59e0:	b1e8      	cbz	r0, b5a1e <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b59e2:	f00b ffc7 	bl	c1974 <_Z19__fetch_global_Wirev>
   b59e6:	6803      	ldr	r3, [r0, #0]
   b59e8:	695b      	ldr	r3, [r3, #20]
   b59ea:	4798      	blx	r3
            int c = 0;                          //Index variable for the temporary string
   b59ec:	ac11      	add	r4, sp, #68	; 0x44
   b59ee:	4627      	mov	r7, r4
            while(Wire.available()){            // slave may send less than requested
   b59f0:	f00b ffc0 	bl	c1974 <_Z19__fetch_global_Wirev>
   b59f4:	6803      	ldr	r3, [r0, #0]
   b59f6:	691b      	ldr	r3, [r3, #16]
   b59f8:	4798      	blx	r3
   b59fa:	b138      	cbz	r0, b5a0c <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();   //Read each of the bytes returned by the sensor into a string
   b59fc:	f00b ffba 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a00:	6803      	ldr	r3, [r0, #0]
   b5a02:	695b      	ldr	r3, [r3, #20]
   b5a04:	4798      	blx	r3
   b5a06:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){            // slave may send less than requested
   b5a0a:	e7f1      	b.n	b59f0 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);          //Convert the string to a float and store it in the global pH variable
   b5a0c:	4638      	mov	r0, r7
   b5a0e:	f00c fe41 	bl	c2694 <atof>
   b5a12:	ec51 0b10 	vmov	r0, r1, d0
   b5a16:	f00c fdc9 	bl	c25ac <__aeabi_d2f>
   b5a1a:	4b4a      	ldr	r3, [pc, #296]	; (b5b44 <_Z13sensorHandlerv+0x190>)
   b5a1c:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b5a1e:	f00b ffa9 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a22:	2301      	movs	r3, #1
   b5a24:	2214      	movs	r2, #20
   b5a26:	2164      	movs	r1, #100	; 0x64
   b5a28:	f009 fea3 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
   b5a2c:	b1e8      	cbz	r0, b5a6a <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b5a2e:	f00b ffa1 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a32:	6803      	ldr	r3, [r0, #0]
   b5a34:	695b      	ldr	r3, [r3, #20]
   b5a36:	4798      	blx	r3
            int c = 0;
   b5a38:	ac11      	add	r4, sp, #68	; 0x44
   b5a3a:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5a3c:	f00b ff9a 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a40:	6803      	ldr	r3, [r0, #0]
   b5a42:	691b      	ldr	r3, [r3, #16]
   b5a44:	4798      	blx	r3
   b5a46:	b138      	cbz	r0, b5a58 <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b5a48:	f00b ff94 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a4c:	6803      	ldr	r3, [r0, #0]
   b5a4e:	695b      	ldr	r3, [r3, #20]
   b5a50:	4798      	blx	r3
   b5a52:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5a56:	e7f1      	b.n	b5a3c <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b5a58:	4638      	mov	r0, r7
   b5a5a:	f00c fe1b 	bl	c2694 <atof>
   b5a5e:	ec51 0b10 	vmov	r0, r1, d0
   b5a62:	f00c fda3 	bl	c25ac <__aeabi_d2f>
   b5a66:	4b38      	ldr	r3, [pc, #224]	; (b5b48 <_Z13sensorHandlerv+0x194>)
   b5a68:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b5a6a:	f00b ff83 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a6e:	2301      	movs	r3, #1
   b5a70:	2214      	movs	r2, #20
   b5a72:	2165      	movs	r1, #101	; 0x65
   b5a74:	f009 fe7d 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
   b5a78:	b1e8      	cbz	r0, b5ab6 <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b5a7a:	f00b ff7b 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a7e:	6803      	ldr	r3, [r0, #0]
   b5a80:	695b      	ldr	r3, [r3, #20]
   b5a82:	4798      	blx	r3
            int c = 0;
   b5a84:	ac11      	add	r4, sp, #68	; 0x44
   b5a86:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5a88:	f00b ff74 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a8c:	6803      	ldr	r3, [r0, #0]
   b5a8e:	691b      	ldr	r3, [r3, #16]
   b5a90:	4798      	blx	r3
   b5a92:	b138      	cbz	r0, b5aa4 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b5a94:	f00b ff6e 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5a98:	6803      	ldr	r3, [r0, #0]
   b5a9a:	695b      	ldr	r3, [r3, #20]
   b5a9c:	4798      	blx	r3
   b5a9e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5aa2:	e7f1      	b.n	b5a88 <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b5aa4:	4638      	mov	r0, r7
   b5aa6:	f00c fdf5 	bl	c2694 <atof>
   b5aaa:	ec51 0b10 	vmov	r0, r1, d0
   b5aae:	f00c fd7d 	bl	c25ac <__aeabi_d2f>
   b5ab2:	4b26      	ldr	r3, [pc, #152]	; (b5b4c <_Z13sensorHandlerv+0x198>)
   b5ab4:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b5ab6:	f00b ff5d 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5aba:	2301      	movs	r3, #1
   b5abc:	2214      	movs	r2, #20
   b5abe:	2166      	movs	r1, #102	; 0x66
   b5ac0:	f009 fe57 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
   b5ac4:	b1e8      	cbz	r0, b5b02 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b5ac6:	f00b ff55 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5aca:	6803      	ldr	r3, [r0, #0]
   b5acc:	695b      	ldr	r3, [r3, #20]
   b5ace:	4798      	blx	r3
            int c = 0;
   b5ad0:	ac11      	add	r4, sp, #68	; 0x44
   b5ad2:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5ad4:	f00b ff4e 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5ad8:	6803      	ldr	r3, [r0, #0]
   b5ada:	691b      	ldr	r3, [r3, #16]
   b5adc:	4798      	blx	r3
   b5ade:	b138      	cbz	r0, b5af0 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b5ae0:	f00b ff48 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5ae4:	6803      	ldr	r3, [r0, #0]
   b5ae6:	695b      	ldr	r3, [r3, #20]
   b5ae8:	4798      	blx	r3
   b5aea:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5aee:	e7f1      	b.n	b5ad4 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b5af0:	4638      	mov	r0, r7
   b5af2:	f00c fdcf 	bl	c2694 <atof>
   b5af6:	ec51 0b10 	vmov	r0, r1, d0
   b5afa:	f00c fd57 	bl	c25ac <__aeabi_d2f>
   b5afe:	4b14      	ldr	r3, [pc, #80]	; (b5b50 <_Z13sensorHandlerv+0x19c>)
   b5b00:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   b5b02:	f00b ff37 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5b06:	2301      	movs	r3, #1
   b5b08:	2214      	movs	r2, #20
   b5b0a:	2161      	movs	r1, #97	; 0x61
   b5b0c:	f009 fe31 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
   b5b10:	b348      	cbz	r0, b5b66 <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b5b12:	f00b ff2f 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5b16:	6803      	ldr	r3, [r0, #0]
   b5b18:	695b      	ldr	r3, [r3, #20]
   b5b1a:	4798      	blx	r3
            int c = 0;
   b5b1c:	ac11      	add	r4, sp, #68	; 0x44
   b5b1e:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5b20:	f00b ff28 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5b24:	6803      	ldr	r3, [r0, #0]
   b5b26:	691b      	ldr	r3, [r3, #16]
   b5b28:	4798      	blx	r3
   b5b2a:	b198      	cbz	r0, b5b54 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   b5b2c:	f00b ff22 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5b30:	6803      	ldr	r3, [r0, #0]
   b5b32:	695b      	ldr	r3, [r3, #20]
   b5b34:	4798      	blx	r3
   b5b36:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5b3a:	e7f1      	b.n	b5b20 <_Z13sensorHandlerv+0x16c>
   b5b3c:	2003dd94 	.word	0x2003dd94
   b5b40:	2003dd98 	.word	0x2003dd98
   b5b44:	2003e54c 	.word	0x2003e54c
   b5b48:	2003e548 	.word	0x2003e548
   b5b4c:	2003e540 	.word	0x2003e540
   b5b50:	2003e550 	.word	0x2003e550
            senseDO = atof(addrSense);
   b5b54:	4638      	mov	r0, r7
   b5b56:	f00c fd9d 	bl	c2694 <atof>
   b5b5a:	ec51 0b10 	vmov	r0, r1, d0
   b5b5e:	f00c fd25 	bl	c25ac <__aeabi_d2f>
   b5b62:	4b7a      	ldr	r3, [pc, #488]	; (b5d4c <_Z13sensorHandlerv+0x398>)
   b5b64:	6018      	str	r0, [r3, #0]
        dataWait = false;                       //Set flag false until next data request has been made
   b5b66:	2300      	movs	r3, #0
   b5b68:	7033      	strb	r3, [r6, #0]
        if(logSensors){                         //Log sensors to SD card if enabled
   b5b6a:	4b79      	ldr	r3, [pc, #484]	; (b5d50 <_Z13sensorHandlerv+0x39c>)
   b5b6c:	781b      	ldrb	r3, [r3, #0]
   b5b6e:	2b00      	cmp	r3, #0
   b5b70:	d063      	beq.n	b5c3a <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5b72:	f00b fcb7 	bl	c14e4 <_ZN9TimeClass5monthEv>
   b5b76:	900f      	str	r0, [sp, #60]	; 0x3c
   b5b78:	f00b fca8 	bl	c14cc <_ZN9TimeClass3dayEv>
   b5b7c:	4604      	mov	r4, r0
   b5b7e:	f00b fcb9 	bl	c14f4 <_ZN9TimeClass4yearEv>
   b5b82:	4606      	mov	r6, r0
   b5b84:	f00b fc7e 	bl	c1484 <_ZN9TimeClass4hourEv>
   b5b88:	4607      	mov	r7, r0
   b5b8a:	f00b fc87 	bl	c149c <_ZN9TimeClass6minuteEv>
   b5b8e:	4680      	mov	r8, r0
   b5b90:	f00b fc90 	bl	c14b4 <_ZN9TimeClass6secondEv>
   b5b94:	9400      	str	r4, [sp, #0]
   b5b96:	4c6f      	ldr	r4, [pc, #444]	; (b5d54 <_Z13sensorHandlerv+0x3a0>)
   b5b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b5b9a:	4a6f      	ldr	r2, [pc, #444]	; (b5d58 <_Z13sensorHandlerv+0x3a4>)
   b5b9c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; b5d78 <_Z13sensorHandlerv+0x3c4>
   b5ba0:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b5d7c <_Z13sensorHandlerv+0x3c8>
   b5ba4:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b5d4c <_Z13sensorHandlerv+0x398>
   b5ba8:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b5bac:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b5bb0:	2110      	movs	r1, #16
   b5bb2:	a811      	add	r0, sp, #68	; 0x44
   b5bb4:	f008 f81c 	bl	bdbf0 <snprintf>
            if(!myFile.isOpen()){               //Print out each of the global sensor values
   b5bb8:	7c22      	ldrb	r2, [r4, #16]
   b5bba:	4b68      	ldr	r3, [pc, #416]	; (b5d5c <_Z13sensorHandlerv+0x3a8>)
   b5bbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b5d80 <_Z13sensorHandlerv+0x3cc>
   b5bc0:	4f67      	ldr	r7, [pc, #412]	; (b5d60 <_Z13sensorHandlerv+0x3ac>)
   b5bc2:	4e68      	ldr	r6, [pc, #416]	; (b5d64 <_Z13sensorHandlerv+0x3b0>)
   b5bc4:	2a00      	cmp	r2, #0
   b5bc6:	f040 8094 	bne.w	b5cf2 <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5bca:	f244 2202 	movw	r2, #16898	; 0x4202
   b5bce:	4966      	ldr	r1, [pc, #408]	; (b5d68 <_Z13sensorHandlerv+0x3b4>)
   b5bd0:	f104 0010 	add.w	r0, r4, #16
   b5bd4:	f7fe fd6a 	bl	b46ac <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5bd8:	4b60      	ldr	r3, [pc, #384]	; (b5d5c <_Z13sensorHandlerv+0x3a8>)
   b5bda:	6818      	ldr	r0, [r3, #0]
   b5bdc:	f00c f9ac 	bl	c1f38 <__aeabi_f2d>
   b5be0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5be4:	f8db 0000 	ldr.w	r0, [fp]
   b5be8:	f00c f9a6 	bl	c1f38 <__aeabi_f2d>
   b5bec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5bf0:	f8da 0000 	ldr.w	r0, [sl]
   b5bf4:	f00c f9a0 	bl	c1f38 <__aeabi_f2d>
   b5bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5bfc:	f8d9 0000 	ldr.w	r0, [r9]
   b5c00:	f00c f99a 	bl	c1f38 <__aeabi_f2d>
   b5c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5c08:	f8d8 0000 	ldr.w	r0, [r8]
   b5c0c:	f00c f994 	bl	c1f38 <__aeabi_f2d>
   b5c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5c14:	6838      	ldr	r0, [r7, #0]
   b5c16:	f00c f98f 	bl	c1f38 <__aeabi_f2d>
   b5c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5c1e:	6830      	ldr	r0, [r6, #0]
   b5c20:	f00c f98a 	bl	c1f38 <__aeabi_f2d>
   b5c24:	aa11      	add	r2, sp, #68	; 0x44
   b5c26:	e9cd 0100 	strd	r0, r1, [sp]
   b5c2a:	4950      	ldr	r1, [pc, #320]	; (b5d6c <_Z13sensorHandlerv+0x3b8>)
   b5c2c:	4620      	mov	r0, r4
   b5c2e:	f7fe fbcf 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b5c32:	f104 0010 	add.w	r0, r4, #16
   b5c36:	f000 fef3 	bl	b6a20 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){                  //Check time to see if we should request more data
   b5c3a:	4c4d      	ldr	r4, [pc, #308]	; (b5d70 <_Z13sensorHandlerv+0x3bc>)
   b5c3c:	f007 fcc2 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b5c40:	6823      	ldr	r3, [r4, #0]
   b5c42:	4283      	cmp	r3, r0
   b5c44:	d252      	bcs.n	b5cec <_Z13sensorHandlerv+0x338>
   b5c46:	f007 fcbd 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;   //Calculate next time to request data from the sensors
   b5c4a:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b5c4e:	6020      	str	r0, [r4, #0]
   b5c50:	f007 fcb8 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;   //Calculate the time to read the data that has just been requested
   b5c54:	f200 3039 	addw	r0, r0, #825	; 0x339
   b5c58:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);         //call the circuit by its ID number.
   b5c5a:	f00b fe8b 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c5e:	2163      	movs	r1, #99	; 0x63
   b5c60:	f009 fda0 	bl	bf7a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b5c64:	f00b fe86 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c68:	2172      	movs	r1, #114	; 0x72
   b5c6a:	f7fe faf8 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b5c6e:	f00b fe81 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c72:	f009 fd9e 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);          //call the circuit by its ID number.
   b5c76:	f00b fe7d 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c7a:	2164      	movs	r1, #100	; 0x64
   b5c7c:	f009 fd92 	bl	bf7a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b5c80:	f00b fe78 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c84:	2172      	movs	r1, #114	; 0x72
   b5c86:	f7fe faea 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b5c8a:	f00b fe73 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c8e:	f009 fd90 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);           //call the circuit by its ID number.
   b5c92:	f00b fe6f 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5c96:	2165      	movs	r1, #101	; 0x65
   b5c98:	f009 fd84 	bl	bf7a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b5c9c:	f00b fe6a 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5ca0:	2172      	movs	r1, #114	; 0x72
   b5ca2:	f7fe fadc 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b5ca6:	f00b fe65 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5caa:	f009 fd82 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);       //call the circuit by its ID number.
   b5cae:	f00b fe61 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5cb2:	2166      	movs	r1, #102	; 0x66
   b5cb4:	f009 fd76 	bl	bf7a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b5cb8:	f00b fe5c 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5cbc:	2172      	movs	r1, #114	; 0x72
   b5cbe:	f7fe face 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b5cc2:	f00b fe57 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5cc6:	f009 fd74 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);         //call the circuit by its ID number.
   b5cca:	f00b fe53 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5cce:	2161      	movs	r1, #97	; 0x61
   b5cd0:	f009 fd68 	bl	bf7a4 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b5cd4:	f00b fe4e 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5cd8:	2172      	movs	r1, #114	; 0x72
   b5cda:	f7fe fac0 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   b5cde:	f00b fe49 	bl	c1974 <_Z19__fetch_global_Wirev>
   b5ce2:	f009 fd66 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b5ce6:	4b23      	ldr	r3, [pc, #140]	; (b5d74 <_Z13sensorHandlerv+0x3c0>)
   b5ce8:	2201      	movs	r2, #1
   b5cea:	701a      	strb	r2, [r3, #0]
}
   b5cec:	b017      	add	sp, #92	; 0x5c
   b5cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b5cf2:	6818      	ldr	r0, [r3, #0]
   b5cf4:	f00c f920 	bl	c1f38 <__aeabi_f2d>
   b5cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b5cfc:	f8db 0000 	ldr.w	r0, [fp]
   b5d00:	f00c f91a 	bl	c1f38 <__aeabi_f2d>
   b5d04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5d08:	f8da 0000 	ldr.w	r0, [sl]
   b5d0c:	f00c f914 	bl	c1f38 <__aeabi_f2d>
   b5d10:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5d14:	f8d9 0000 	ldr.w	r0, [r9]
   b5d18:	f00c f90e 	bl	c1f38 <__aeabi_f2d>
   b5d1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b5d20:	f8d8 0000 	ldr.w	r0, [r8]
   b5d24:	f00c f908 	bl	c1f38 <__aeabi_f2d>
   b5d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5d2c:	6838      	ldr	r0, [r7, #0]
   b5d2e:	f00c f903 	bl	c1f38 <__aeabi_f2d>
   b5d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5d36:	6830      	ldr	r0, [r6, #0]
   b5d38:	f00c f8fe 	bl	c1f38 <__aeabi_f2d>
   b5d3c:	aa11      	add	r2, sp, #68	; 0x44
   b5d3e:	e9cd 0100 	strd	r0, r1, [sp]
   b5d42:	490a      	ldr	r1, [pc, #40]	; (b5d6c <_Z13sensorHandlerv+0x3b8>)
   b5d44:	4620      	mov	r0, r4
   b5d46:	f7fe fb43 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b5d4a:	e776      	b.n	b5c3a <_Z13sensorHandlerv+0x286>
   b5d4c:	2003e544 	.word	0x2003e544
   b5d50:	2003dec1 	.word	0x2003dec1
   b5d54:	2003deec 	.word	0x2003deec
   b5d58:	000c4bfb 	.word	0x000c4bfb
   b5d5c:	2003e540 	.word	0x2003e540
   b5d60:	2003dec4 	.word	0x2003dec4
   b5d64:	2003dde8 	.word	0x2003dde8
   b5d68:	2003dd9a 	.word	0x2003dd9a
   b5d6c:	000c4d52 	.word	0x000c4d52
   b5d70:	2003e554 	.word	0x2003e554
   b5d74:	2003dd98 	.word	0x2003dd98
   b5d78:	2003e54c 	.word	0x2003e54c
   b5d7c:	2003e548 	.word	0x2003e548
   b5d80:	2003e550 	.word	0x2003e550

000b5d84 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b5d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b5d88:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b5e74 <_Z11XBeeHandlerv+0xf0>
        if(logMessages){
   b5d8c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; b5e78 <_Z11XBeeHandlerv+0xf4>
   b5d90:	4d34      	ldr	r5, [pc, #208]	; (b5e64 <_Z11XBeeHandlerv+0xe0>)
void XBeeHandler(){  
   b5d92:	b089      	sub	sp, #36	; 0x24
   b5d94:	af00      	add	r7, sp, #0
    while(Serial1.available()){                         //Read data from the XBee buffer
   b5d96:	f00b fe2d 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b5d9a:	6803      	ldr	r3, [r0, #0]
   b5d9c:	691b      	ldr	r3, [r3, #16]
   b5d9e:	4798      	blx	r3
   b5da0:	2800      	cmp	r0, #0
   b5da2:	d05b      	beq.n	b5e5c <_Z11XBeeHandlerv+0xd8>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b5da4:	f00b fe26 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   b5da8:	220a      	movs	r2, #10
   b5daa:	4601      	mov	r1, r0
   b5dac:	4638      	mov	r0, r7
   b5dae:	f00b f9c9 	bl	c1144 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b5db2:	68bb      	ldr	r3, [r7, #8]
   b5db4:	3307      	adds	r3, #7
   b5db6:	f023 0307 	bic.w	r3, r3, #7
    }
   b5dba:	466e      	mov	r6, sp
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b5dbc:	ebad 0d03 	sub.w	sp, sp, r3
   b5dc0:	46ea      	mov	sl, sp
   b5dc2:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b5dc4:	68b9      	ldr	r1, [r7, #8]
   b5dc6:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);    //Loop over characters and copy them into char array
   b5dca:	458b      	cmp	fp, r1
   b5dcc:	f103 0401 	add.w	r4, r3, #1
   b5dd0:	d207      	bcs.n	b5de2 <_Z11XBeeHandlerv+0x5e>
   b5dd2:	4659      	mov	r1, fp
   b5dd4:	4638      	mov	r0, r7
   b5dd6:	f00b faad 	bl	c1334 <_ZNK6String6charAtEj>
   b5dda:	4623      	mov	r3, r4
   b5ddc:	f80a 000b 	strb.w	r0, [sl, fp]
   b5de0:	e7f0      	b.n	b5dc4 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;      //If there was a carriage return, then get rid of it and set to terminate character
   b5de2:	2901      	cmp	r1, #1
   b5de4:	d90a      	bls.n	b5dfc <_Z11XBeeHandlerv+0x78>
   b5de6:	3901      	subs	r1, #1
   b5de8:	4638      	mov	r0, r7
   b5dea:	f00b faa3 	bl	c1334 <_ZNK6String6charAtEj>
   b5dee:	280d      	cmp	r0, #13
   b5df0:	bf01      	itttt	eq
   b5df2:	68bb      	ldreq	r3, [r7, #8]
   b5df4:	4453      	addeq	r3, sl
   b5df6:	2200      	moveq	r2, #0
   b5df8:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);                  //Process the command received over Xbee using the dictionary
   b5dfc:	2201      	movs	r2, #1
   b5dfe:	2102      	movs	r1, #2
   b5e00:	4650      	mov	r0, sl
   b5e02:	f7fe fd21 	bl	b4848 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b5e06:	f89a 3000 	ldrb.w	r3, [sl]
   b5e0a:	3b42      	subs	r3, #66	; 0x42
   b5e0c:	2b01      	cmp	r3, #1
   b5e0e:	d803      	bhi.n	b5e18 <_Z11XBeeHandlerv+0x94>
   b5e10:	f007 fbd8 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b5e14:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5e18:	f899 3000 	ldrb.w	r3, [r9]
   b5e1c:	b1cb      	cbz	r3, b5e52 <_Z11XBeeHandlerv+0xce>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5e1e:	7c2b      	ldrb	r3, [r5, #16]
   b5e20:	b92b      	cbnz	r3, b5e2e <_Z11XBeeHandlerv+0xaa>
   b5e22:	4911      	ldr	r1, [pc, #68]	; (b5e68 <_Z11XBeeHandlerv+0xe4>)
   b5e24:	4811      	ldr	r0, [pc, #68]	; (b5e6c <_Z11XBeeHandlerv+0xe8>)
   b5e26:	f244 2202 	movw	r2, #16898	; 0x4202
   b5e2a:	f7fe fc3f 	bl	b46ac <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b5e2e:	4639      	mov	r1, r7
   b5e30:	f107 0010 	add.w	r0, r7, #16
   b5e34:	f00b fa34 	bl	c12a0 <_ZN6StringC1ERKS_>
   b5e38:	490d      	ldr	r1, [pc, #52]	; (b5e70 <_Z11XBeeHandlerv+0xec>)
   b5e3a:	f107 0210 	add.w	r2, r7, #16
   b5e3e:	4628      	mov	r0, r5
   b5e40:	f7fe fac6 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b5e44:	f107 0010 	add.w	r0, r7, #16
   b5e48:	f00b f994 	bl	c1174 <_ZN6StringD1Ev>
            logFile.close();
   b5e4c:	4807      	ldr	r0, [pc, #28]	; (b5e6c <_Z11XBeeHandlerv+0xe8>)
   b5e4e:	f000 fde7 	bl	b6a20 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b5e52:	4638      	mov	r0, r7
   b5e54:	f00b f98e 	bl	c1174 <_ZN6StringD1Ev>
   b5e58:	46b5      	mov	sp, r6
    while(Serial1.available()){                         //Read data from the XBee buffer
   b5e5a:	e79c      	b.n	b5d96 <_Z11XBeeHandlerv+0x12>
}
   b5e5c:	3724      	adds	r7, #36	; 0x24
   b5e5e:	46bd      	mov	sp, r7
   b5e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5e64:	2003de68 	.word	0x2003de68
   b5e68:	2003ddba 	.word	0x2003ddba
   b5e6c:	2003de78 	.word	0x2003de78
   b5e70:	000c4d6a 	.word	0x000c4d6a
   b5e74:	2003dd68 	.word	0x2003dd68
   b5e78:	2003dec0 	.word	0x2003dec0

000b5e7c <_Z13dataOffloaderv>:
void dataOffloader(){
   b5e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e80:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b5e82:	f00b fc0b 	bl	c169c <_Z16_fetch_usbserialv>
   b5e86:	4963      	ldr	r1, [pc, #396]	; (b6014 <_Z13dataOffloaderv+0x198>)
   b5e88:	f00a ff91 	bl	c0dae <_ZN5Print7printlnEPKc>
    myFile.close();
   b5e8c:	4862      	ldr	r0, [pc, #392]	; (b6018 <_Z13dataOffloaderv+0x19c>)
   b5e8e:	f000 fdc7 	bl	b6a20 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b5e92:	4962      	ldr	r1, [pc, #392]	; (b601c <_Z13dataOffloaderv+0x1a0>)
   b5e94:	4862      	ldr	r0, [pc, #392]	; (b6020 <_Z13dataOffloaderv+0x1a4>)
   b5e96:	2200      	movs	r2, #0
   b5e98:	f7fe fc08 	bl	b46ac <_ZN7FatFile4openEPKci>
   b5e9c:	b948      	cbnz	r0, b5eb2 <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b5e9e:	4b61      	ldr	r3, [pc, #388]	; (b6024 <_Z13dataOffloaderv+0x1a8>)
   b5ea0:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b5ea2:	f00b fbfb 	bl	c169c <_Z16_fetch_usbserialv>
   b5ea6:	4960      	ldr	r1, [pc, #384]	; (b6028 <_Z13dataOffloaderv+0x1ac>)
}
   b5ea8:	b02d      	add	sp, #180	; 0xb4
   b5eaa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b5eae:	f00a bf7e 	b.w	c0dae <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b5eb2:	f00b fbf3 	bl	c169c <_Z16_fetch_usbserialv>
   b5eb6:	495d      	ldr	r1, [pc, #372]	; (b602c <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b5eb8:	4d5d      	ldr	r5, [pc, #372]	; (b6030 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b5eba:	f00a ff78 	bl	c0dae <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b5ebe:	f008 fa47 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ec2:	f008 faa3 	bl	be40c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5ec6:	4604      	mov	r4, r0
   b5ec8:	b948      	cbnz	r0, b5ede <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b5eca:	f008 fa41 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5ece:	4622      	mov	r2, r4
   b5ed0:	4629      	mov	r1, r5
   b5ed2:	f008 faee 	bl	be4b2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b5ed6:	200a      	movs	r0, #10
   b5ed8:	f007 fed6 	bl	bdc88 <delay>
    while(!BLE.connected()){
   b5edc:	e7ef      	b.n	b5ebe <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b5ede:	f00b fbdd 	bl	c169c <_Z16_fetch_usbserialv>
   b5ee2:	4954      	ldr	r1, [pc, #336]	; (b6034 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5ee4:	4f4e      	ldr	r7, [pc, #312]	; (b6020 <_Z13dataOffloaderv+0x1a4>)
   b5ee6:	4d4c      	ldr	r5, [pc, #304]	; (b6018 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5ee8:	f8df 816c 	ldr.w	r8, [pc, #364]	; b6058 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b5eec:	f00a ff5f 	bl	c0dae <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5ef0:	2200      	movs	r2, #0
   b5ef2:	4639      	mov	r1, r7
   b5ef4:	4628      	mov	r0, r5
   b5ef6:	f000 fd20 	bl	b693a <_ZN7FatFile8openNextEPS_i>
   b5efa:	b1f8      	cbz	r0, b5f3c <_Z13dataOffloaderv+0xc0>
   b5efc:	f008 fa28 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5f00:	f008 fa84 	bl	be40c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5f04:	b1d0      	cbz	r0, b5f3c <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5f06:	2220      	movs	r2, #32
   b5f08:	a901      	add	r1, sp, #4
   b5f0a:	4628      	mov	r0, r5
   b5f0c:	f000 fedc 	bl	b6cc8 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5f10:	f00b fbc4 	bl	c169c <_Z16_fetch_usbserialv>
   b5f14:	4641      	mov	r1, r8
   b5f16:	aa01      	add	r2, sp, #4
   b5f18:	f7fe fa5a 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b5f1c:	a801      	add	r0, sp, #4
   b5f1e:	f00c fc8c 	bl	c283a <strlen>
   b5f22:	ab01      	add	r3, sp, #4
   b5f24:	3804      	subs	r0, #4
   b5f26:	4418      	add	r0, r3
   b5f28:	f00c fc90 	bl	c284c <strlwr>
   b5f2c:	4942      	ldr	r1, [pc, #264]	; (b6038 <_Z13dataOffloaderv+0x1bc>)
   b5f2e:	f00c fce6 	bl	c28fe <strstr>
   b5f32:	b9d8      	cbnz	r0, b5f6c <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b5f34:	4628      	mov	r0, r5
   b5f36:	f000 fd73 	bl	b6a20 <_ZN7FatFile5closeEv>
   b5f3a:	e7d9      	b.n	b5ef0 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b5f3c:	4838      	ldr	r0, [pc, #224]	; (b6020 <_Z13dataOffloaderv+0x1a4>)
   b5f3e:	f000 fd6f 	bl	b6a20 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5f42:	2228      	movs	r2, #40	; 0x28
   b5f44:	2100      	movs	r1, #0
   b5f46:	a809      	add	r0, sp, #36	; 0x24
   b5f48:	f00c fbec 	bl	c2724 <memset>
    strcpy(fileCode,"filedone");
   b5f4c:	493b      	ldr	r1, [pc, #236]	; (b603c <_Z13dataOffloaderv+0x1c0>)
   b5f4e:	a809      	add	r0, sp, #36	; 0x24
   b5f50:	f00c fc4e 	bl	c27f0 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5f54:	2300      	movs	r3, #0
   b5f56:	2228      	movs	r2, #40	; 0x28
   b5f58:	a909      	add	r1, sp, #36	; 0x24
   b5f5a:	4839      	ldr	r0, [pc, #228]	; (b6040 <_Z13dataOffloaderv+0x1c4>)
   b5f5c:	f008 f8e8 	bl	be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b5f60:	4b30      	ldr	r3, [pc, #192]	; (b6024 <_Z13dataOffloaderv+0x1a8>)
   b5f62:	2200      	movs	r2, #0
   b5f64:	701a      	strb	r2, [r3, #0]
}
   b5f66:	b02d      	add	sp, #180	; 0xb4
   b5f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5f6c:	2228      	movs	r2, #40	; 0x28
   b5f6e:	2100      	movs	r1, #0
   b5f70:	a809      	add	r0, sp, #36	; 0x24
   b5f72:	f00c fbd7 	bl	c2724 <memset>
            strcpy(fileCode,"filename");
   b5f76:	4933      	ldr	r1, [pc, #204]	; (b6044 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b5f78:	4e33      	ldr	r6, [pc, #204]	; (b6048 <_Z13dataOffloaderv+0x1cc>)
   b5f7a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b6040 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b5f7e:	a809      	add	r0, sp, #36	; 0x24
   b5f80:	f00c fc36 	bl	c27f0 <strcpy>
            strcat(fileCode,namebuf);
   b5f84:	a901      	add	r1, sp, #4
   b5f86:	a809      	add	r0, sp, #36	; 0x24
   b5f88:	f00c fc02 	bl	c2790 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b5f8c:	f00b fb86 	bl	c169c <_Z16_fetch_usbserialv>
   b5f90:	492e      	ldr	r1, [pc, #184]	; (b604c <_Z13dataOffloaderv+0x1d0>)
   b5f92:	aa09      	add	r2, sp, #36	; 0x24
   b5f94:	f7fe fa1c 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
   b5f98:	2300      	movs	r3, #0
   b5f9a:	2228      	movs	r2, #40	; 0x28
   b5f9c:	a909      	add	r1, sp, #36	; 0x24
   b5f9e:	4828      	ldr	r0, [pc, #160]	; (b6040 <_Z13dataOffloaderv+0x1c4>)
   b5fa0:	f008 f8c6 	bl	be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5fa4:	f00b fb7a 	bl	c169c <_Z16_fetch_usbserialv>
   b5fa8:	4929      	ldr	r1, [pc, #164]	; (b6050 <_Z13dataOffloaderv+0x1d4>)
   b5faa:	aa01      	add	r2, sp, #4
   b5fac:	f7fe fa10 	bl	b43d0 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5fb0:	2096      	movs	r0, #150	; 0x96
   b5fb2:	f007 fe69 	bl	bdc88 <delay>
            noInterrupts();
   b5fb6:	f009 fc2b 	bl	bf810 <_Z12noInterruptsv>
            while(myFile.available()){
   b5fba:	4630      	mov	r0, r6
   b5fbc:	f7fe f88f 	bl	b40de <_ZN4File9availableEv>
   b5fc0:	4604      	mov	r4, r0
   b5fc2:	b188      	cbz	r0, b5fe8 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5fc4:	2264      	movs	r2, #100	; 0x64
   b5fc6:	2100      	movs	r1, #0
   b5fc8:	a813      	add	r0, sp, #76	; 0x4c
   b5fca:	f00c fbab 	bl	c2724 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5fce:	aa13      	add	r2, sp, #76	; 0x4c
   b5fd0:	2364      	movs	r3, #100	; 0x64
   b5fd2:	210d      	movs	r1, #13
   b5fd4:	4630      	mov	r0, r6
   b5fd6:	f00b f89d 	bl	c1114 <_ZN6Stream14readBytesUntilEcPcj>
   b5fda:	2300      	movs	r3, #0
   b5fdc:	2264      	movs	r2, #100	; 0x64
   b5fde:	a913      	add	r1, sp, #76	; 0x4c
   b5fe0:	4648      	mov	r0, r9
   b5fe2:	f008 f8a5 	bl	be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5fe6:	e7e8      	b.n	b5fba <_Z13dataOffloaderv+0x13e>
            interrupts();
   b5fe8:	f009 fc14 	bl	bf814 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5fec:	2228      	movs	r2, #40	; 0x28
   b5fee:	4621      	mov	r1, r4
   b5ff0:	a809      	add	r0, sp, #36	; 0x24
   b5ff2:	f00c fb97 	bl	c2724 <memset>
            strcpy(fileCode,"filecomp");
   b5ff6:	4917      	ldr	r1, [pc, #92]	; (b6054 <_Z13dataOffloaderv+0x1d8>)
   b5ff8:	a809      	add	r0, sp, #36	; 0x24
   b5ffa:	f00c fbf9 	bl	c27f0 <strcpy>
   b5ffe:	4623      	mov	r3, r4
   b6000:	2228      	movs	r2, #40	; 0x28
   b6002:	a909      	add	r1, sp, #36	; 0x24
   b6004:	480e      	ldr	r0, [pc, #56]	; (b6040 <_Z13dataOffloaderv+0x1c4>)
   b6006:	f008 f893 	bl	be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b600a:	2096      	movs	r0, #150	; 0x96
   b600c:	f007 fe3c 	bl	bdc88 <delay>
   b6010:	e790      	b.n	b5f34 <_Z13dataOffloaderv+0xb8>
   b6012:	bf00      	nop
   b6014:	000c4d8b 	.word	0x000c4d8b
   b6018:	2003defc 	.word	0x2003defc
   b601c:	000c4da8 	.word	0x000c4da8
   b6020:	2003de44 	.word	0x2003de44
   b6024:	2003e0a0 	.word	0x2003e0a0
   b6028:	000c4daa 	.word	0x000c4daa
   b602c:	000c4dd7 	.word	0x000c4dd7
   b6030:	2003dd70 	.word	0x2003dd70
   b6034:	000c4df7 	.word	0x000c4df7
   b6038:	000c4c1d 	.word	0x000c4c1d
   b603c:	000c4e35 	.word	0x000c4e35
   b6040:	2003e098 	.word	0x2003e098
   b6044:	000c4e3e 	.word	0x000c4e3e
   b6048:	2003deec 	.word	0x2003deec
   b604c:	000c4e47 	.word	0x000c4e47
   b6050:	000c4e5a 	.word	0x000c4e5a
   b6054:	000c4e82 	.word	0x000c4e82
   b6058:	000c4e0c 	.word	0x000c4e0c

000b605c <loop>:
void loop(){
   b605c:	b508      	push	{r3, lr}
    readPowerSys();         //Read power from battery and solar panel
   b605e:	f7ff fb03 	bl	b5668 <_Z12readPowerSysv>
    sensorHandler();        //Read and request data from Atlas sensor
   b6062:	f7ff fca7 	bl	b59b4 <_Z13sensorHandlerv>
    XBeeHandler();          //Check if a string has come in from XBee
   b6066:	f7ff fe8d 	bl	b5d84 <_Z11XBeeHandlerv>
    statusUpdate();         //Check if a status update has to be sent out
   b606a:	f7ff fc2f 	bl	b58cc <_Z12statusUpdatev>
    updateMotors();         //Update the motor speeds dependent on the mode
   b606e:	f7ff f945 	bl	b52fc <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();    //Check if a signal to offload has been received
   b6072:	4b09      	ldr	r3, [pc, #36]	; (b6098 <loop+0x3c>)
   b6074:	781b      	ldrb	r3, [r3, #0]
   b6076:	b10b      	cbz	r3, b607c <loop+0x20>
   b6078:	f7ff ff00 	bl	b5e7c <_Z13dataOffloaderv>
    sendResponseData();     //Send sensor data if requested from the CC
   b607c:	f7ff fbbc 	bl	b57f8 <_Z16sendResponseDatav>
    varCompassHead = (double)compassHeading;
   b6080:	4b06      	ldr	r3, [pc, #24]	; (b609c <loop+0x40>)
   b6082:	6818      	ldr	r0, [r3, #0]
   b6084:	f00b ff58 	bl	c1f38 <__aeabi_f2d>
   b6088:	4b05      	ldr	r3, [pc, #20]	; (b60a0 <loop+0x44>)
   b608a:	e9c3 0100 	strd	r0, r1, [r3]
    delay(3);              //Slow down the program a little bit, 10ms per loop
   b608e:	2003      	movs	r0, #3
}
   b6090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(3);              //Slow down the program a little bit, 10ms per loop
   b6094:	f007 bdf8 	b.w	bdc88 <delay>
   b6098:	2003e0a0 	.word	0x2003e0a0
   b609c:	2003dd90 	.word	0x2003dd90
   b60a0:	2003e5e8 	.word	0x2003e5e8

000b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b60a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b60a6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b60aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b60ac:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b60ae:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b60b2:	42ae      	cmp	r6, r5
   b60b4:	d004      	beq.n	b60c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b60b6:	4628      	mov	r0, r5
   b60b8:	f00b f85c 	bl	c1174 <_ZN6StringD1Ev>
   b60bc:	3514      	adds	r5, #20
   b60be:	e7f8      	b.n	b60b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b60c0:	6820      	ldr	r0, [r4, #0]
   b60c2:	f007 fd75 	bl	bdbb0 <free>
    AllocatorT::free(data_);
}
   b60c6:	4620      	mov	r0, r4
   b60c8:	bd70      	pop	{r4, r5, r6, pc}

000b60ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b60ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60cc:	4616      	mov	r6, r2
   b60ce:	b08f      	sub	sp, #60	; 0x3c
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b60d0:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b60d2:	e9c0 2200 	strd	r2, r2, [r0]
   b60d6:	4604      	mov	r4, r0
   b60d8:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b60da:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b60dc:	4619      	mov	r1, r3
   b60de:	a804      	add	r0, sp, #16
   b60e0:	f007 ffe8 	bl	be0b4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b60e4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b60e6:	4638      	mov	r0, r7
   b60e8:	f007 ffe4 	bl	be0b4 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b60ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b60ee:	9302      	str	r3, [sp, #8]
   b60f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b60f2:	4620      	mov	r0, r4
   b60f4:	e9cd 7300 	strd	r7, r3, [sp]
   b60f8:	4632      	mov	r2, r6
   b60fa:	ab04      	add	r3, sp, #16
   b60fc:	4629      	mov	r1, r5
   b60fe:	f008 fd57 	bl	bebb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b6102:	4620      	mov	r0, r4
   b6104:	b00f      	add	sp, #60	; 0x3c
   b6106:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6108:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b610a:	4c0b      	ldr	r4, [pc, #44]	; (b6138 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b610c:	7821      	ldrb	r1, [r4, #0]
   b610e:	f3bf 8f5b 	dmb	ish
   b6112:	f011 0101 	ands.w	r1, r1, #1
   b6116:	d10b      	bne.n	b6130 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6118:	4620      	mov	r0, r4
   b611a:	9101      	str	r1, [sp, #4]
   b611c:	f7fd ffd0 	bl	b40c0 <__cxa_guard_acquire>
   b6120:	9901      	ldr	r1, [sp, #4]
   b6122:	b128      	cbz	r0, b6130 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6124:	4805      	ldr	r0, [pc, #20]	; (b613c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6126:	f00a ff22 	bl	c0f6e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b612a:	4620      	mov	r0, r4
   b612c:	f7fd ffcd 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b6130:	4802      	ldr	r0, [pc, #8]	; (b613c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6132:	b002      	add	sp, #8
   b6134:	bd10      	pop	{r4, pc}
   b6136:	bf00      	nop
   b6138:	2003dd10 	.word	0x2003dd10
   b613c:	2003dd14 	.word	0x2003dd14

000b6140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6140:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6144:	4604      	mov	r4, r0
   b6146:	460d      	mov	r5, r1
   b6148:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b614a:	d916      	bls.n	b617a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b614c:	4290      	cmp	r0, r2
   b614e:	d215      	bcs.n	b617c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6150:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6154:	1a75      	subs	r5, r6, r1
   b6156:	f1a1 0714 	sub.w	r7, r1, #20
   b615a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b615c:	42b7      	cmp	r7, r6
   b615e:	d01c      	beq.n	b619a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6160:	b12c      	cbz	r4, b616e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6162:	4631      	mov	r1, r6
   b6164:	4620      	mov	r0, r4
   b6166:	f00b f881 	bl	c126c <_ZN6StringC1EOS_>
   b616a:	7c33      	ldrb	r3, [r6, #16]
   b616c:	7423      	strb	r3, [r4, #16]
   b616e:	4630      	mov	r0, r6
   b6170:	f00b f800 	bl	c1174 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6174:	3e14      	subs	r6, #20
   b6176:	3c14      	subs	r4, #20
   b6178:	e7f0      	b.n	b615c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b617a:	d00e      	beq.n	b619a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b617c:	42b5      	cmp	r5, r6
   b617e:	d00c      	beq.n	b619a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6180:	b12c      	cbz	r4, b618e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6182:	4629      	mov	r1, r5
   b6184:	4620      	mov	r0, r4
   b6186:	f00b f871 	bl	c126c <_ZN6StringC1EOS_>
   b618a:	7c2b      	ldrb	r3, [r5, #16]
   b618c:	7423      	strb	r3, [r4, #16]
   b618e:	4628      	mov	r0, r5
   b6190:	f00a fff0 	bl	c1174 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6194:	3514      	adds	r5, #20
   b6196:	3414      	adds	r4, #20
   b6198:	e7f0      	b.n	b617c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b61a0:	2300      	movs	r3, #0
   b61a2:	e9c0 3300 	strd	r3, r3, [r0]
   b61a6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61a8:	684f      	ldr	r7, [r1, #4]
   b61aa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b61ac:	4604      	mov	r4, r0
   b61ae:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b61b0:	dd23      	ble.n	b61fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b61b2:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b61b6:	fb08 f007 	mul.w	r0, r8, r7
   b61ba:	f007 fcf1 	bl	bdba0 <malloc>
            if (!d) {
   b61be:	4605      	mov	r5, r0
   b61c0:	b1d8      	cbz	r0, b61fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b61c2:	e9d4 1200 	ldrd	r1, r2, [r4]
   b61c6:	fb08 1202 	mla	r2, r8, r2, r1
   b61ca:	f7ff ffb9 	bl	b6140 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b61ce:	6820      	ldr	r0, [r4, #0]
   b61d0:	f007 fcee 	bl	bdbb0 <free>
        data_ = d;
   b61d4:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b61d6:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b61d8:	e9d6 7300 	ldrd	r7, r3, [r6]
   b61dc:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b61e0:	45b8      	cmp	r8, r7
   b61e2:	d008      	beq.n	b61f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b61e4:	4639      	mov	r1, r7
   b61e6:	4628      	mov	r0, r5
   b61e8:	f00b f85a 	bl	c12a0 <_ZN6StringC1ERKS_>
   b61ec:	7c3b      	ldrb	r3, [r7, #16]
   b61ee:	742b      	strb	r3, [r5, #16]
   b61f0:	3714      	adds	r7, #20
   b61f2:	3514      	adds	r5, #20
   b61f4:	e7f4      	b.n	b61e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b61f6:	6873      	ldr	r3, [r6, #4]
   b61f8:	6063      	str	r3, [r4, #4]
}
   b61fa:	4620      	mov	r0, r4
   b61fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6200 <_GLOBAL__sub_I_SystemMode>:
   b6200:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b6202:	4b84      	ldr	r3, [pc, #528]	; (b6414 <_GLOBAL__sub_I_SystemMode+0x214>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b6204:	4a84      	ldr	r2, [pc, #528]	; (b6418 <_GLOBAL__sub_I_SystemMode+0x218>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6206:	4d85      	ldr	r5, [pc, #532]	; (b641c <_GLOBAL__sub_I_SystemMode+0x21c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b6208:	4f85      	ldr	r7, [pc, #532]	; (b6420 <_GLOBAL__sub_I_SystemMode+0x220>)
   b620a:	2601      	movs	r6, #1
   b620c:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b620e:	4b85      	ldr	r3, [pc, #532]	; (b6424 <_GLOBAL__sub_I_SystemMode+0x224>)
   b6210:	2400      	movs	r4, #0
   b6212:	b093      	sub	sp, #76	; 0x4c
    SleepResult() {}
   b6214:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6216:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b621a:	2002      	movs	r0, #2
   b621c:	f007 fbdc 	bl	bd9d8 <set_system_mode>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b6220:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6224:	682b      	ldr	r3, [r5, #0]
   b6226:	9300      	str	r3, [sp, #0]
   b6228:	4b7f      	ldr	r3, [pc, #508]	; (b6428 <_GLOBAL__sub_I_SystemMode+0x228>)
   b622a:	4980      	ldr	r1, [pc, #512]	; (b642c <_GLOBAL__sub_I_SystemMode+0x22c>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	4880      	ldr	r0, [pc, #512]	; (b6430 <_GLOBAL__sub_I_SystemMode+0x230>)
   b6230:	f04f 0210 	mov.w	r2, #16
   b6234:	f7ff ff49 	bl	b60ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b6238:	4b7e      	ldr	r3, [pc, #504]	; (b6434 <_GLOBAL__sub_I_SystemMode+0x234>)
   b623a:	9402      	str	r4, [sp, #8]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	682b      	ldr	r3, [r5, #0]
   b6240:	9300      	str	r3, [sp, #0]
   b6242:	4b7d      	ldr	r3, [pc, #500]	; (b6438 <_GLOBAL__sub_I_SystemMode+0x238>)
   b6244:	497d      	ldr	r1, [pc, #500]	; (b643c <_GLOBAL__sub_I_SystemMode+0x23c>)
   b6246:	681b      	ldr	r3, [r3, #0]
   b6248:	487d      	ldr	r0, [pc, #500]	; (b6440 <_GLOBAL__sub_I_SystemMode+0x240>)
   b624a:	f04f 0204 	mov.w	r2, #4
   b624e:	f7ff ff3c 	bl	b60ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b6252:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6256:	682b      	ldr	r3, [r5, #0]
   b6258:	9300      	str	r3, [sp, #0]
   b625a:	4b7a      	ldr	r3, [pc, #488]	; (b6444 <_GLOBAL__sub_I_SystemMode+0x244>)
   b625c:	497a      	ldr	r1, [pc, #488]	; (b6448 <_GLOBAL__sub_I_SystemMode+0x248>)
   b625e:	681b      	ldr	r3, [r3, #0]
   b6260:	487a      	ldr	r0, [pc, #488]	; (b644c <_GLOBAL__sub_I_SystemMode+0x24c>)
   b6262:	f04f 0210 	mov.w	r2, #16
   b6266:	f7ff ff30 	bl	b60ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b626a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b626e:	682b      	ldr	r3, [r5, #0]
   b6270:	9300      	str	r3, [sp, #0]
   b6272:	4b77      	ldr	r3, [pc, #476]	; (b6450 <_GLOBAL__sub_I_SystemMode+0x250>)
   b6274:	4977      	ldr	r1, [pc, #476]	; (b6454 <_GLOBAL__sub_I_SystemMode+0x254>)
   b6276:	681b      	ldr	r3, [r3, #0]
   b6278:	4877      	ldr	r0, [pc, #476]	; (b6458 <_GLOBAL__sub_I_SystemMode+0x258>)
	    _M_manager = &_My_handler::_M_manager;
   b627a:	4d78      	ldr	r5, [pc, #480]	; (b645c <_GLOBAL__sub_I_SystemMode+0x25c>)
   b627c:	f04f 0210 	mov.w	r2, #16
   b6280:	f7ff ff23 	bl	b60ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                         //Advertising data
   b6284:	4876      	ldr	r0, [pc, #472]	; (b6460 <_GLOBAL__sub_I_SystemMode+0x260>)
   b6286:	f008 faa6 	bl	be7d6 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b628a:	4b76      	ldr	r3, [pc, #472]	; (b6464 <_GLOBAL__sub_I_SystemMode+0x264>)
   b628c:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);           //Create timer for watchdog, which checks if certain methods of communication are available
   b628e:	aa0e      	add	r2, sp, #56	; 0x38
   b6290:	4623      	mov	r3, r4
   b6292:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6296:	4874      	ldr	r0, [pc, #464]	; (b6468 <_GLOBAL__sub_I_SystemMode+0x268>)
	    _M_manager = &_My_handler::_M_manager;
   b6298:	9510      	str	r5, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
   b629a:	9711      	str	r7, [sp, #68]	; 0x44
   b629c:	f7fe f952 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b62a0:	a80e      	add	r0, sp, #56	; 0x38
   b62a2:	f7fe f917 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b62a6:	4b71      	ldr	r3, [pc, #452]	; (b646c <_GLOBAL__sub_I_SystemMode+0x26c>)
   b62a8:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(300,LEDHandler);                     //Create timer for LED, which updates the color of the LED based on what communication/hardware modes are available
   b62aa:	aa0e      	add	r2, sp, #56	; 0x38
   b62ac:	4623      	mov	r3, r4
   b62ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b62b2:	486f      	ldr	r0, [pc, #444]	; (b6470 <_GLOBAL__sub_I_SystemMode+0x270>)
	    _M_manager = &_My_handler::_M_manager;
   b62b4:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b62b8:	f7fe f944 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b62bc:	a80e      	add	r0, sp, #56	; 0x38
   b62be:	f7fe f909 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b62c2:	4b6c      	ldr	r3, [pc, #432]	; (b6474 <_GLOBAL__sub_I_SystemMode+0x274>)
   b62c4:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(250, motionHandler);             //Create timer for motor watchdog, which cuts off motors if messages from CC have not been received recently enough
   b62c6:	aa0e      	add	r2, sp, #56	; 0x38
   b62c8:	4623      	mov	r3, r4
   b62ca:	21fa      	movs	r1, #250	; 0xfa
   b62cc:	486a      	ldr	r0, [pc, #424]	; (b6478 <_GLOBAL__sub_I_SystemMode+0x278>)
	    _M_manager = &_My_handler::_M_manager;
   b62ce:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b62d2:	f7fe f937 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b62d6:	a80e      	add	r0, sp, #56	; 0x38
   b62d8:	f7fe f8fc 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b62dc:	4b67      	ldr	r3, [pc, #412]	; (b647c <_GLOBAL__sub_I_SystemMode+0x27c>)
   b62de:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);            //Create timer for status, which calculates the status values that will be transmitted to CC and sets a flag for transmitting out the status
   b62e0:	aa0e      	add	r2, sp, #56	; 0x38
   b62e2:	4623      	mov	r3, r4
   b62e4:	f242 7110 	movw	r1, #10000	; 0x2710
   b62e8:	4865      	ldr	r0, [pc, #404]	; (b6480 <_GLOBAL__sub_I_SystemMode+0x280>)
	    _M_manager = &_My_handler::_M_manager;
   b62ea:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b62ee:	f7fe f929 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b62f2:	a80e      	add	r0, sp, #56	; 0x38
   b62f4:	f7fe f8ee 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b62f8:	4b62      	ldr	r3, [pc, #392]	; (b6484 <_GLOBAL__sub_I_SystemMode+0x284>)
   b62fa:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);    //Create timer for shutdown, which runs when the button is pressed to calculate if the button has been held for SHUTDOWN_HOLD seconds 
   b62fc:	aa0e      	add	r2, sp, #56	; 0x38
   b62fe:	4623      	mov	r3, r4
   b6300:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b6304:	4860      	ldr	r0, [pc, #384]	; (b6488 <_GLOBAL__sub_I_SystemMode+0x288>)
	    _M_manager = &_My_handler::_M_manager;
   b6306:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b630a:	f7fe f91b 	bl	b4544 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b630e:	a80e      	add	r0, sp, #56	; 0x38
   b6310:	f7fe f8e0 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
SFE_UBLOX_GNSS myGPS;                           //GPS Buffer and Objects
   b6314:	485d      	ldr	r0, [pc, #372]	; (b648c <_GLOBAL__sub_I_SystemMode+0x28c>)
  explicit SdFat(SPIClass* spiPort) {
   b6316:	4d5e      	ldr	r5, [pc, #376]	; (b6490 <_GLOBAL__sub_I_SystemMode+0x290>)
   b6318:	f001 ff10 	bl	b813c <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;                       //Compass object
   b631c:	485d      	ldr	r0, [pc, #372]	; (b6494 <_GLOBAL__sub_I_SystemMode+0x294>)
   b631e:	f001 fcf7 	bl	b7d10 <_ZN16Adafruit_LIS3MDLC1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b6322:	4622      	mov	r2, r4
   b6324:	2114      	movs	r1, #20
   b6326:	4630      	mov	r0, r6
   b6328:	f007 fb7e 	bl	bda28 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b632c:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b632e:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b6330:	9200      	str	r2, [sp, #0]
   b6332:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b6336:	4632      	mov	r2, r6
   b6338:	4857      	ldr	r0, [pc, #348]	; (b6498 <_GLOBAL__sub_I_SystemMode+0x298>)
   b633a:	9601      	str	r6, [sp, #4]
   b633c:	f009 fcc2 	bl	bfcc4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b6340:	f7ff fee2 	bl	b6108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6344:	2364      	movs	r3, #100	; 0x64
   b6346:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   b634a:	4b54      	ldr	r3, [pc, #336]	; (b649c <_GLOBAL__sub_I_SystemMode+0x29c>)
   b634c:	606c      	str	r4, [r5, #4]
   b634e:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   b6352:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   b6356:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   b635a:	f885 6474 	strb.w	r6, [r5, #1140]	; 0x474
   b635e:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   b6362:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6366:	b908      	cbnz	r0, b636c <_GLOBAL__sub_I_SystemMode+0x16c>
   b6368:	f7ff fece 	bl	b6108 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b636c:	4a4c      	ldr	r2, [pc, #304]	; (b64a0 <_GLOBAL__sub_I_SystemMode+0x2a0>)
  File() {}
   b636e:	494d      	ldr	r1, [pc, #308]	; (b64a4 <_GLOBAL__sub_I_SystemMode+0x2a4>)
   b6370:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6374:	2300      	movs	r3, #0
   b6376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b637a:	e9c2 3001 	strd	r3, r0, [r2, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b637e:	6113      	str	r3, [r2, #16]
   b6380:	6011      	str	r1, [r2, #0]
   b6382:	4a49      	ldr	r2, [pc, #292]	; (b64a8 <_GLOBAL__sub_I_SystemMode+0x2a8>)
        capacity_(0) {
   b6384:	9307      	str	r3, [sp, #28]
   b6386:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b638a:	6113      	str	r3, [r2, #16]
   b638c:	6011      	str	r1, [r2, #0]
   b638e:	4a47      	ldr	r2, [pc, #284]	; (b64ac <_GLOBAL__sub_I_SystemMode+0x2ac>)
        filter_(level, filters) {
   b6390:	4c47      	ldr	r4, [pc, #284]	; (b64b0 <_GLOBAL__sub_I_SystemMode+0x2b0>)
   b6392:	6113      	str	r3, [r2, #16]
   b6394:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b6398:	6011      	str	r1, [r2, #0]
   b639a:	e9cd 3305 	strd	r3, r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b639e:	f00b f97d 	bl	c169c <_Z16_fetch_usbserialv>
   b63a2:	a905      	add	r1, sp, #20
   b63a4:	4605      	mov	r5, r0
   b63a6:	a808      	add	r0, sp, #32
   b63a8:	f7ff fef8 	bl	b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b63ac:	a908      	add	r1, sp, #32
   b63ae:	a80b      	add	r0, sp, #44	; 0x2c
   b63b0:	f7ff fef4 	bl	b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b63b4:	4b3f      	ldr	r3, [pc, #252]	; (b64b4 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b63b6:	6023      	str	r3, [r4, #0]
   b63b8:	a90b      	add	r1, sp, #44	; 0x2c
   b63ba:	a80e      	add	r0, sp, #56	; 0x38
   b63bc:	f7ff feee 	bl	b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b63c0:	aa0e      	add	r2, sp, #56	; 0x38
   b63c2:	211e      	movs	r1, #30
   b63c4:	1d20      	adds	r0, r4, #4
   b63c6:	f00a f919 	bl	c05fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b63ca:	a80e      	add	r0, sp, #56	; 0x38
   b63cc:	f7ff fe6a 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b63d0:	a80b      	add	r0, sp, #44	; 0x2c
   b63d2:	f7ff fe67 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b63d6:	4b38      	ldr	r3, [pc, #224]	; (b64b8 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b63d8:	6023      	str	r3, [r4, #0]
   b63da:	6225      	str	r5, [r4, #32]
   b63dc:	a808      	add	r0, sp, #32
   b63de:	f7ff fe61 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b63e2:	4b36      	ldr	r3, [pc, #216]	; (b64bc <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b63e4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b63e6:	f00b f959 	bl	c169c <_Z16_fetch_usbserialv>
   b63ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b63ee:	f00b f945 	bl	c167c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b63f2:	f009 fde5 	bl	bffc0 <_ZN5spark10LogManager8instanceEv>
   b63f6:	4621      	mov	r1, r4
   b63f8:	f009 ffd6 	bl	c03a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //Log Configuration
   b63fc:	a805      	add	r0, sp, #20
   b63fe:	f7ff fe51 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL;                                     //Object for servo esc of left motor 
   b6402:	482f      	ldr	r0, [pc, #188]	; (b64c0 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b6404:	f00a fd6e 	bl	c0ee4 <_ZN5ServoC1Ev>
Servo ESCR;                                     //Object for servo esc of right motor
   b6408:	482e      	ldr	r0, [pc, #184]	; (b64c4 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b640a:	b013      	add	sp, #76	; 0x4c
   b640c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Servo ESCR;                                     //Object for servo esc of right motor
   b6410:	f00a bd68 	b.w	c0ee4 <_ZN5ServoC1Ev>
   b6414:	2003dd6c 	.word	0x2003dd6c
   b6418:	ffff0000 	.word	0xffff0000
   b641c:	2003db14 	.word	0x2003db14
   b6420:	000b4243 	.word	0x000b4243
   b6424:	2003dd58 	.word	0x2003dd58
   b6428:	2003db28 	.word	0x2003db28
   b642c:	000c4e8b 	.word	0x000c4e8b
   b6430:	2003e5dc 	.word	0x2003e5dc
   b6434:	000b4c91 	.word	0x000b4c91
   b6438:	2003db24 	.word	0x2003db24
   b643c:	000c4e8e 	.word	0x000c4e8e
   b6440:	2003e0b4 	.word	0x2003e0b4
   b6444:	2003db20 	.word	0x2003db20
   b6448:	000c4e91 	.word	0x000c4e91
   b644c:	2003e098 	.word	0x2003e098
   b6450:	2003db1c 	.word	0x2003db1c
   b6454:	000c4e95 	.word	0x000c4e95
   b6458:	2003dd88 	.word	0x2003dd88
   b645c:	000b422f 	.word	0x000b422f
   b6460:	2003dd70 	.word	0x2003dd70
   b6464:	000b46bd 	.word	0x000b46bd
   b6468:	2003e5f4 	.word	0x2003e5f4
   b646c:	000b45bd 	.word	0x000b45bd
   b6470:	2003ddec 	.word	0x2003ddec
   b6474:	000b43ed 	.word	0x000b43ed
   b6478:	2003ded0 	.word	0x2003ded0
   b647c:	000b40f9 	.word	0x000b40f9
   b6480:	2003e5a4 	.word	0x2003e5a4
   b6484:	000b433d 	.word	0x000b433d
   b6488:	2003e55c 	.word	0x2003e55c
   b648c:	2003df20 	.word	0x2003df20
   b6490:	2003e0bc 	.word	0x2003e0bc
   b6494:	2003de0c 	.word	0x2003de0c
   b6498:	2003e580 	.word	0x2003e580
   b649c:	000c4ea4 	.word	0x000c4ea4
   b64a0:	2003deec 	.word	0x2003deec
   b64a4:	000c4f10 	.word	0x000c4f10
   b64a8:	2003de68 	.word	0x2003de68
   b64ac:	2003de34 	.word	0x2003de34
   b64b0:	2003de9c 	.word	0x2003de9c
   b64b4:	000c4ecc 	.word	0x000c4ecc
   b64b8:	000c60a0 	.word	0x000c60a0
   b64bc:	000c4ef8 	.word	0x000c4ef8
   b64c0:	2003dd30 	.word	0x2003dd30
   b64c4:	2003dd40 	.word	0x2003dd40

000b64c8 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b64c8:	b538      	push	{r3, r4, r5, lr}
   b64ca:	4604      	mov	r4, r0
   b64cc:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b64ce:	2224      	movs	r2, #36	; 0x24
   b64d0:	2100      	movs	r1, #0
   b64d2:	f00c f927 	bl	c2724 <memset>

  m_vol = vol;
   b64d6:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b64d8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b64da:	2b10      	cmp	r3, #16
   b64dc:	d003      	beq.n	b64e6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b64de:	2b20      	cmp	r3, #32
   b64e0:	d006      	beq.n	b64f0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b64e2:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b64e4:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b64e6:	2320      	movs	r3, #32
  m_flags = F_READ;
   b64e8:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b64ea:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b64ec:	70a0      	strb	r0, [r4, #2]
  return true;
   b64ee:	e7f9      	b.n	b64e4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b64f0:	2340      	movs	r3, #64	; 0x40
   b64f2:	e7f9      	b.n	b64e8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b64f4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b64f4:	b510      	push	{r4, lr}
   b64f6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b64f8:	3024      	adds	r0, #36	; 0x24
   b64fa:	f000 ff66 	bl	b73ca <_ZN8FatCache4syncEv>
   b64fe:	b128      	cbz	r0, b650c <_ZN9FatVolume9cacheSyncEv+0x18>
   b6500:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6508:	f000 bf5f 	b.w	b73ca <_ZN8FatCache4syncEv>
  }
   b650c:	bd10      	pop	{r4, pc}

000b650e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b650e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6510:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6512:	f043 0304 	orr.w	r3, r3, #4
   b6516:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6518:	f100 0210 	add.w	r2, r0, #16
   b651c:	6880      	ldr	r0, [r0, #8]
   b651e:	f001 b80a 	b.w	b7536 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6524 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6528:	7801      	ldrb	r1, [r0, #0]
   b652a:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b652e:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6530:	d003      	beq.n	b653a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6532:	2600      	movs	r6, #0
}
   b6534:	4630      	mov	r0, r6
   b6536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b653a:	6942      	ldr	r2, [r0, #20]
   b653c:	4b17      	ldr	r3, [pc, #92]	; (b659c <_ZN7FatFile13addDirClusterEv+0x78>)
   b653e:	429a      	cmp	r2, r3
   b6540:	d2f7      	bcs.n	b6532 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6542:	f7ff ffe4 	bl	b650e <_ZN7FatFile10addClusterEv>
   b6546:	4606      	mov	r6, r0
   b6548:	2800      	cmp	r0, #0
   b654a:	d0f2      	beq.n	b6532 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b654c:	6921      	ldr	r1, [r4, #16]
   b654e:	68a0      	ldr	r0, [r4, #8]
   b6550:	f000 ff86 	bl	b7460 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6554:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b6556:	68a0      	ldr	r0, [r4, #8]
   b6558:	2205      	movs	r2, #5
   b655a:	4639      	mov	r1, r7
   b655c:	3024      	adds	r0, #36	; 0x24
   b655e:	f000 ff5c 	bl	b741a <_ZN8FatCache4readEmh>
  if (!pc) {
   b6562:	4680      	mov	r8, r0
   b6564:	2800      	cmp	r0, #0
   b6566:	d0e4      	beq.n	b6532 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6568:	4629      	mov	r1, r5
   b656a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b656e:	f00c f8d9 	bl	c2724 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6572:	2501      	movs	r5, #1
   b6574:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6576:	791a      	ldrb	r2, [r3, #4]
   b6578:	42aa      	cmp	r2, r5
   b657a:	d909      	bls.n	b6590 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b657c:	6818      	ldr	r0, [r3, #0]
   b657e:	4642      	mov	r2, r8
   b6580:	19e9      	adds	r1, r5, r7
   b6582:	f001 fab6 	bl	b7af2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6586:	2800      	cmp	r0, #0
   b6588:	d0d3      	beq.n	b6532 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b658a:	3501      	adds	r5, #1
   b658c:	b2ed      	uxtb	r5, r5
   b658e:	e7f1      	b.n	b6574 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6590:	6963      	ldr	r3, [r4, #20]
   b6592:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6596:	6163      	str	r3, [r4, #20]
  return true;
   b6598:	e7cc      	b.n	b6534 <_ZN7FatFile13addDirClusterEv+0x10>
   b659a:	bf00      	nop
   b659c:	001ffe00 	.word	0x001ffe00

000b65a0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b65a0:	b510      	push	{r4, lr}
   b65a2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b65a4:	6880      	ldr	r0, [r0, #8]
   b65a6:	460a      	mov	r2, r1
   b65a8:	3024      	adds	r0, #36	; 0x24
   b65aa:	69a1      	ldr	r1, [r4, #24]
   b65ac:	f000 ff35 	bl	b741a <_ZN8FatCache4readEmh>
  if (!pc) {
   b65b0:	b120      	cbz	r0, b65bc <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b65b2:	88a3      	ldrh	r3, [r4, #4]
   b65b4:	f003 030f 	and.w	r3, r3, #15
   b65b8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b65bc:	bd10      	pop	{r4, pc}

000b65be <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b65be:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b65c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65c2:	4604      	mov	r4, r0
   b65c4:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b65c6:	2608      	movs	r6, #8
  uint8_t j = 0;
   b65c8:	4618      	mov	r0, r3
      name[j++] = '.';
   b65ca:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b65cc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b65d0:	2a20      	cmp	r2, #32
   b65d2:	d018      	beq.n	b6606 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b65d4:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b65d6:	bf02      	ittt	eq
   b65d8:	540f      	strbeq	r7, [r1, r0]
   b65da:	1c42      	addeq	r2, r0, #1
   b65dc:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b65de:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b65e0:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b65e4:	bf08      	it	eq
   b65e6:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b65e8:	f1bc 0f19 	cmp.w	ip, #25
   b65ec:	d806      	bhi.n	b65fc <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b65ee:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b65f2:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b65f6:	bf1c      	itt	ne
   b65f8:	3220      	addne	r2, #32
   b65fa:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b65fc:	f100 0c01 	add.w	ip, r0, #1
   b6600:	540a      	strb	r2, [r1, r0]
   b6602:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6606:	3301      	adds	r3, #1
   b6608:	b2db      	uxtb	r3, r3
   b660a:	2b0b      	cmp	r3, #11
   b660c:	d1de      	bne.n	b65cc <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b660e:	2300      	movs	r3, #0
   b6610:	540b      	strb	r3, [r1, r0]
}
   b6612:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6614 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6614:	7803      	ldrb	r3, [r0, #0]
   b6616:	b90b      	cbnz	r3, b661c <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6618:	f7ff bf56 	b.w	b64c8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b661c:	2000      	movs	r0, #0
   b661e:	4770      	bx	lr

000b6620 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b6624:	7803      	ldrb	r3, [r0, #0]
   b6626:	4604      	mov	r4, r0
   b6628:	4688      	mov	r8, r1
   b662a:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b662c:	2b00      	cmp	r3, #0
   b662e:	d05d      	beq.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
   b6630:	7882      	ldrb	r2, [r0, #2]
   b6632:	07d1      	lsls	r1, r2, #31
   b6634:	d55a      	bpl.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6636:	071a      	lsls	r2, r3, #28
   b6638:	d52d      	bpl.n	b6696 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b663a:	69c3      	ldr	r3, [r0, #28]
   b663c:	6942      	ldr	r2, [r0, #20]
   b663e:	1a9b      	subs	r3, r3, r2
   b6640:	429d      	cmp	r5, r3
   b6642:	bf28      	it	cs
   b6644:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6646:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6648:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b664c:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6650:	2e00      	cmp	r6, #0
   b6652:	f000 808f 	beq.w	b6774 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6656:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6658:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b665a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b665c:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b665e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6662:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6666:	d51f      	bpl.n	b66a8 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6668:	6a00      	ldr	r0, [r0, #32]
   b666a:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b666c:	68a0      	ldr	r0, [r4, #8]
   b666e:	f1ba 0f00 	cmp.w	sl, #0
   b6672:	d142      	bne.n	b66fa <_ZN7FatFile4readEPvj+0xda>
   b6674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6678:	d33f      	bcc.n	b66fa <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b667a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b667c:	4299      	cmp	r1, r3
   b667e:	d03c      	beq.n	b66fa <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6680:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6684:	d252      	bcs.n	b672c <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6686:	6800      	ldr	r0, [r0, #0]
   b6688:	4642      	mov	r2, r8
   b668a:	f001 f9a9 	bl	b79e0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b668e:	b368      	cbz	r0, b66ec <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6690:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6694:	e044      	b.n	b6720 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b6696:	069b      	lsls	r3, r3, #26
   b6698:	d5d5      	bpl.n	b6646 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b669a:	6883      	ldr	r3, [r0, #8]
   b669c:	891a      	ldrh	r2, [r3, #8]
   b669e:	6943      	ldr	r3, [r0, #20]
   b66a0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b66a4:	b29b      	uxth	r3, r3
   b66a6:	e7cb      	b.n	b6640 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b66a8:	f890 9005 	ldrb.w	r9, [r0, #5]
   b66ac:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b66b0:	f1ba 0f00 	cmp.w	sl, #0
   b66b4:	d108      	bne.n	b66c8 <_ZN7FatFile4readEPvj+0xa8>
   b66b6:	f1b9 0f00 	cmp.w	r9, #0
   b66ba:	d105      	bne.n	b66c8 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b66bc:	b95b      	cbnz	r3, b66d6 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b66be:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b66c0:	bf4c      	ite	mi
   b66c2:	6a03      	ldrmi	r3, [r0, #32]
   b66c4:	6a23      	ldrpl	r3, [r4, #32]
   b66c6:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b66c8:	6921      	ldr	r1, [r4, #16]
   b66ca:	68a0      	ldr	r0, [r4, #8]
   b66cc:	f000 fec8 	bl	b7460 <_ZNK9FatVolume17clusterFirstBlockEm>
   b66d0:	eb09 0100 	add.w	r1, r9, r0
   b66d4:	e7ca      	b.n	b666c <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b66d6:	6921      	ldr	r1, [r4, #16]
   b66d8:	465a      	mov	r2, fp
   b66da:	f000 fec7 	bl	b746c <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b66de:	2800      	cmp	r0, #0
   b66e0:	db04      	blt.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b66e2:	d1f1      	bne.n	b66c8 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b66e4:	7823      	ldrb	r3, [r4, #0]
   b66e6:	f013 0f70 	tst.w	r3, #112	; 0x70
   b66ea:	d143      	bne.n	b6774 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b66ec:	7863      	ldrb	r3, [r4, #1]
   b66ee:	f043 0302 	orr.w	r3, r3, #2
   b66f2:	7063      	strb	r3, [r4, #1]
  return -1;
   b66f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b66f8:	e03d      	b.n	b6776 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b66fa:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b66fe:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6700:	f04f 0200 	mov.w	r2, #0
   b6704:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6708:	bf28      	it	cs
   b670a:	4637      	movcs	r7, r6
   b670c:	f000 fe85 	bl	b741a <_ZN8FatCache4readEmh>
      if (!pc) {
   b6710:	2800      	cmp	r0, #0
   b6712:	d0eb      	beq.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6714:	eb00 010a 	add.w	r1, r0, sl
   b6718:	463a      	mov	r2, r7
   b671a:	4640      	mov	r0, r8
   b671c:	f00b ffda 	bl	c26d4 <memcpy>
    m_curPosition += n;
   b6720:	6963      	ldr	r3, [r4, #20]
   b6722:	443b      	add	r3, r7
    dst += n;
   b6724:	44b8      	add	r8, r7
    m_curPosition += n;
   b6726:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6728:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b672a:	e791      	b.n	b6650 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b672c:	7822      	ldrb	r2, [r4, #0]
   b672e:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6730:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6734:	d406      	bmi.n	b6744 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6736:	7902      	ldrb	r2, [r0, #4]
   b6738:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b673c:	b2d2      	uxtb	r2, r2
   b673e:	4592      	cmp	sl, r2
   b6740:	bf28      	it	cs
   b6742:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6744:	4299      	cmp	r1, r3
      n = 512*nb;
   b6746:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b674a:	d208      	bcs.n	b675e <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b674c:	68a0      	ldr	r0, [r4, #8]
   b674e:	4653      	mov	r3, sl
   b6750:	6800      	ldr	r0, [r0, #0]
   b6752:	4642      	mov	r2, r8
   b6754:	f001 f98c 	bl	b7a70 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6758:	2800      	cmp	r0, #0
   b675a:	d1e1      	bne.n	b6720 <_ZN7FatFile4readEPvj+0x100>
   b675c:	e7c6      	b.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b675e:	4453      	add	r3, sl
   b6760:	428b      	cmp	r3, r1
   b6762:	d9f3      	bls.n	b674c <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6764:	3024      	adds	r0, #36	; 0x24
   b6766:	9101      	str	r1, [sp, #4]
   b6768:	f000 fe2f 	bl	b73ca <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b676c:	9901      	ldr	r1, [sp, #4]
   b676e:	2800      	cmp	r0, #0
   b6770:	d1ec      	bne.n	b674c <_ZN7FatFile4readEPvj+0x12c>
   b6772:	e7bb      	b.n	b66ec <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6774:	1ba8      	subs	r0, r5, r6
}
   b6776:	b003      	add	sp, #12
   b6778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b677c <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b677c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b677e:	2201      	movs	r2, #1
   b6780:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6784:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6788:	4604      	mov	r4, r0
   b678a:	f7ff ff49 	bl	b6620 <_ZN7FatFile4readEPvj>
   b678e:	2801      	cmp	r0, #1
   b6790:	bf0a      	itet	eq
   b6792:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b6796:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b679a:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b679e:	b002      	add	sp, #8
   b67a0:	bd70      	pop	{r4, r5, r6, pc}

000b67a2 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b67a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b67a4:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b67a6:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b67aa:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b67ac:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b67b0:	d000      	beq.n	b67b4 <_ZN7FatFile12readDirCacheEb+0x12>
   b67b2:	b999      	cbnz	r1, b67dc <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b67b4:	2201      	movs	r2, #1
   b67b6:	f10d 0107 	add.w	r1, sp, #7
   b67ba:	4620      	mov	r0, r4
   b67bc:	f7ff ff30 	bl	b6620 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b67c0:	b240      	sxtb	r0, r0
   b67c2:	2801      	cmp	r0, #1
   b67c4:	d002      	beq.n	b67cc <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b67c6:	2000      	movs	r0, #0
}
   b67c8:	b003      	add	sp, #12
   b67ca:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b67cc:	6963      	ldr	r3, [r4, #20]
   b67ce:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b67d0:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b67d2:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b67d4:	3030      	adds	r0, #48	; 0x30
   b67d6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b67da:	e7f5      	b.n	b67c8 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b67dc:	3320      	adds	r3, #32
   b67de:	e7f7      	b.n	b67d0 <_ZN7FatFile12readDirCacheEb+0x2e>

000b67e0 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b67e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b67e4:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b67e6:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b67e8:	4604      	mov	r4, r0
   b67ea:	460d      	mov	r5, r1
  if (!isOpen()) {
   b67ec:	b162      	cbz	r2, b6808 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b67ee:	6940      	ldr	r0, [r0, #20]
   b67f0:	4288      	cmp	r0, r1
   b67f2:	d002      	beq.n	b67fa <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b67f4:	b919      	cbnz	r1, b67fe <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b67f6:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b67f8:	6165      	str	r5, [r4, #20]
    return true;
   b67fa:	2001      	movs	r0, #1
   b67fc:	e006      	b.n	b680c <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b67fe:	0716      	lsls	r6, r2, #28
   b6800:	d506      	bpl.n	b6810 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6802:	69e3      	ldr	r3, [r4, #28]
   b6804:	428b      	cmp	r3, r1
   b6806:	d20b      	bcs.n	b6820 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6808:	6127      	str	r7, [r4, #16]
  return false;
   b680a:	2000      	movs	r0, #0
}
   b680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6810:	0691      	lsls	r1, r2, #26
   b6812:	d505      	bpl.n	b6820 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6814:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6816:	891b      	ldrh	r3, [r3, #8]
   b6818:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b681c:	d9ec      	bls.n	b67f8 <_ZN7FatFile7seekSetEm+0x18>
   b681e:	e7f3      	b.n	b6808 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6820:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6824:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6828:	1e43      	subs	r3, r0, #1
   b682a:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b682e:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6830:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6832:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6834:	42b3      	cmp	r3, r6
   b6836:	d800      	bhi.n	b683a <_ZN7FatFile7seekSetEm+0x5a>
   b6838:	b998      	cbnz	r0, b6862 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b683a:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b683c:	bf4c      	ite	mi
   b683e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6842:	6a23      	ldrpl	r3, [r4, #32]
   b6844:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6846:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b684a:	2e00      	cmp	r6, #0
   b684c:	d0d4      	beq.n	b67f8 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b684e:	6921      	ldr	r1, [r4, #16]
   b6850:	68a0      	ldr	r0, [r4, #8]
   b6852:	4642      	mov	r2, r8
   b6854:	f000 fe0a 	bl	b746c <_ZN9FatVolume6fatGetEmPm>
   b6858:	2800      	cmp	r0, #0
   b685a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b685e:	dcf4      	bgt.n	b684a <_ZN7FatFile7seekSetEm+0x6a>
   b6860:	e7d2      	b.n	b6808 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6862:	1af6      	subs	r6, r6, r3
   b6864:	e7ef      	b.n	b6846 <_ZN7FatFile7seekSetEm+0x66>

000b6866 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6868:	460f      	mov	r7, r1
   b686a:	4604      	mov	r4, r0
   b686c:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b686e:	2100      	movs	r1, #0
   b6870:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6872:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6874:	f00b ff56 	bl	c2724 <memset>
  m_vol = dirFile->m_vol;
   b6878:	68b8      	ldr	r0, [r7, #8]
   b687a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b687c:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b687e:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6882:	6a3b      	ldr	r3, [r7, #32]
   b6884:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6886:	016a      	lsls	r2, r5, #5
   b6888:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b688c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6890:	071f      	lsls	r7, r3, #28
   b6892:	d444      	bmi.n	b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6894:	f003 0317 	and.w	r3, r3, #23
   b6898:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b689a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b689e:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b68a2:	bf04      	itt	eq
   b68a4:	f043 0308 	orreq.w	r3, r3, #8
   b68a8:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b68aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b68ae:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b68b0:	f006 0303 	and.w	r3, r6, #3
   b68b4:	2b01      	cmp	r3, #1
   b68b6:	d02c      	beq.n	b6912 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b68b8:	2b02      	cmp	r3, #2
   b68ba:	d028      	beq.n	b690e <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b68bc:	bb7b      	cbnz	r3, b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b68be:	0571      	lsls	r1, r6, #21
   b68c0:	d42d      	bmi.n	b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b68c2:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b68c4:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b68c6:	78a1      	ldrb	r1, [r4, #2]
   b68c8:	078b      	lsls	r3, r1, #30
   b68ca:	d504      	bpl.n	b68d6 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b68cc:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b68ce:	06df      	lsls	r7, r3, #27
   b68d0:	d425      	bmi.n	b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b68d2:	07dd      	lsls	r5, r3, #31
   b68d4:	d423      	bmi.n	b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b68d6:	11b3      	asrs	r3, r6, #6
   b68d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b68dc:	f006 0508 	and.w	r5, r6, #8
   b68e0:	432b      	orrs	r3, r5
   b68e2:	430b      	orrs	r3, r1
   b68e4:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b68e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b68e8:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b68ea:	1883      	adds	r3, r0, r2
   b68ec:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b68f0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b68f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b68f8:	0572      	lsls	r2, r6, #21
   b68fa:	d513      	bpl.n	b6924 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b68fc:	b959      	cbnz	r1, b6916 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b68fe:	78a3      	ldrb	r3, [r4, #2]
   b6900:	f043 0304 	orr.w	r3, r3, #4
   b6904:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6906:	0473      	lsls	r3, r6, #17
   b6908:	d410      	bmi.n	b692c <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b690a:	2001      	movs	r0, #1
}
   b690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b690e:	2303      	movs	r3, #3
   b6910:	e7d8      	b.n	b68c4 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6912:	2302      	movs	r3, #2
   b6914:	e7d6      	b.n	b68c4 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6916:	f000 fe49 	bl	b75ac <_ZN9FatVolume9freeChainEm>
   b691a:	2800      	cmp	r0, #0
   b691c:	d1ef      	bne.n	b68fe <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b691e:	2000      	movs	r0, #0
   b6920:	7020      	strb	r0, [r4, #0]
  return false;
   b6922:	e7f3      	b.n	b690c <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6924:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6928:	61e3      	str	r3, [r4, #28]
   b692a:	e7ec      	b.n	b6906 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b692c:	69e1      	ldr	r1, [r4, #28]
   b692e:	4620      	mov	r0, r4
   b6930:	f7ff ff56 	bl	b67e0 <_ZN7FatFile7seekSetEm>
   b6934:	2800      	cmp	r0, #0
   b6936:	d1e8      	bne.n	b690a <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6938:	e7f1      	b.n	b691e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b693a <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b693a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b693e:	7803      	ldrb	r3, [r0, #0]
   b6940:	4607      	mov	r7, r0
   b6942:	460d      	mov	r5, r1
   b6944:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6946:	bb53      	cbnz	r3, b699e <_ZN7FatFile8openNextEPS_i+0x64>
   b6948:	780b      	ldrb	r3, [r1, #0]
   b694a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b694e:	d026      	beq.n	b699e <_ZN7FatFile8openNextEPS_i+0x64>
   b6950:	694c      	ldr	r4, [r1, #20]
   b6952:	f014 041f 	ands.w	r4, r4, #31
   b6956:	d122      	bne.n	b699e <_ZN7FatFile8openNextEPS_i+0x64>
   b6958:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b695a:	2100      	movs	r1, #0
   b695c:	4628      	mov	r0, r5
    return m_curPosition;
   b695e:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6962:	f7ff ff1e 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6966:	b1d0      	cbz	r0, b699e <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6968:	7806      	ldrb	r6, [r0, #0]
   b696a:	b1c6      	cbz	r6, b699e <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b696c:	2e2e      	cmp	r6, #46	; 0x2e
   b696e:	d010      	beq.n	b6992 <_ZN7FatFile8openNextEPS_i+0x58>
   b6970:	2ee5      	cmp	r6, #229	; 0xe5
   b6972:	d00e      	beq.n	b6992 <_ZN7FatFile8openNextEPS_i+0x58>
   b6974:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6976:	071a      	lsls	r2, r3, #28
   b6978:	d413      	bmi.n	b69a2 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b697a:	b964      	cbnz	r4, b6996 <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b697c:	9400      	str	r4, [sp, #0]
   b697e:	4653      	mov	r3, sl
   b6980:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6984:	4629      	mov	r1, r5
   b6986:	4638      	mov	r0, r7
   b6988:	f7ff ff6d 	bl	b6866 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b698c:	b002      	add	sp, #8
   b698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6992:	2400      	movs	r4, #0
   b6994:	e7e1      	b.n	b695a <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b6996:	f000 f971 	bl	b6c7c <_ZN7FatFile11lfnChecksumEPh>
   b699a:	4540      	cmp	r0, r8
   b699c:	d0ee      	beq.n	b697c <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b699e:	2000      	movs	r0, #0
   b69a0:	e7f4      	b.n	b698c <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b69a2:	2b0f      	cmp	r3, #15
   b69a4:	d1f5      	bne.n	b6992 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b69a6:	0673      	lsls	r3, r6, #25
   b69a8:	d5d7      	bpl.n	b695a <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b69aa:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b69ae:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b69b2:	e7d2      	b.n	b695a <_ZN7FatFile8openNextEPS_i+0x20>

000b69b4 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b69b4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b69b6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b69b8:	4604      	mov	r4, r0
  if (!isOpen()) {
   b69ba:	b90b      	cbnz	r3, b69c0 <_ZN7FatFile4syncEv+0xc>
    return true;
   b69bc:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b69be:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b69c0:	7883      	ldrb	r3, [r0, #2]
   b69c2:	075a      	lsls	r2, r3, #29
   b69c4:	d523      	bpl.n	b6a0e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b69c6:	2101      	movs	r1, #1
   b69c8:	f7ff fdea 	bl	b65a0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b69cc:	4605      	mov	r5, r0
   b69ce:	b928      	cbnz	r0, b69dc <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b69d0:	7863      	ldrb	r3, [r4, #1]
   b69d2:	f043 0301 	orr.w	r3, r3, #1
   b69d6:	7063      	strb	r3, [r4, #1]
  return false;
   b69d8:	2000      	movs	r0, #0
   b69da:	e7f0      	b.n	b69be <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b69dc:	7803      	ldrb	r3, [r0, #0]
   b69de:	2be5      	cmp	r3, #229	; 0xe5
   b69e0:	d0f6      	beq.n	b69d0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b69e2:	7823      	ldrb	r3, [r4, #0]
   b69e4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b69e6:	bf44      	itt	mi
   b69e8:	69e3      	ldrmi	r3, [r4, #28]
   b69ea:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b69ec:	6a23      	ldr	r3, [r4, #32]
   b69ee:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b69f0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b69f2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b69f4:	4b09      	ldr	r3, [pc, #36]	; (b6a1c <_ZN7FatFile4syncEv+0x68>)
   b69f6:	681b      	ldr	r3, [r3, #0]
   b69f8:	b12b      	cbz	r3, b6a06 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b69fa:	f100 0116 	add.w	r1, r0, #22
   b69fe:	3018      	adds	r0, #24
   b6a00:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6a02:	8b2b      	ldrh	r3, [r5, #24]
   b6a04:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6a06:	78a3      	ldrb	r3, [r4, #2]
   b6a08:	f023 0304 	bic.w	r3, r3, #4
   b6a0c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b6a0e:	68a0      	ldr	r0, [r4, #8]
   b6a10:	f7ff fd70 	bl	b64f4 <_ZN9FatVolume9cacheSyncEv>
   b6a14:	2800      	cmp	r0, #0
   b6a16:	d0db      	beq.n	b69d0 <_ZN7FatFile4syncEv+0x1c>
   b6a18:	e7d0      	b.n	b69bc <_ZN7FatFile4syncEv+0x8>
   b6a1a:	bf00      	nop
   b6a1c:	2003e610 	.word	0x2003e610

000b6a20 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6a20:	b510      	push	{r4, lr}
   b6a22:	4604      	mov	r4, r0
  bool rtn = sync();
   b6a24:	f7ff ffc6 	bl	b69b4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6a28:	2300      	movs	r3, #0
   b6a2a:	7023      	strb	r3, [r4, #0]
}
   b6a2c:	bd10      	pop	{r4, pc}

000b6a2e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a30:	b093      	sub	sp, #76	; 0x4c
   b6a32:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6a34:	2300      	movs	r3, #0
   b6a36:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6a38:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6a3a:	9201      	str	r2, [sp, #4]
   b6a3c:	4606      	mov	r6, r0
   b6a3e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6a40:	b113      	cbz	r3, b6a48 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6a42:	2000      	movs	r0, #0
}
   b6a44:	b013      	add	sp, #76	; 0x4c
   b6a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6a48:	780b      	ldrb	r3, [r1, #0]
   b6a4a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6a4e:	d0f8      	beq.n	b6a42 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6a50:	7813      	ldrb	r3, [r2, #0]
   b6a52:	2b2f      	cmp	r3, #47	; 0x2f
   b6a54:	d112      	bne.n	b6a7c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6a56:	9a01      	ldr	r2, [sp, #4]
   b6a58:	7813      	ldrb	r3, [r2, #0]
   b6a5a:	2b2f      	cmp	r3, #47	; 0x2f
   b6a5c:	d102      	bne.n	b6a64 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b6a5e:	3201      	adds	r2, #1
   b6a60:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6a62:	e7f8      	b.n	b6a56 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6a64:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6a66:	b91b      	cbnz	r3, b6a70 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6a68:	4630      	mov	r0, r6
   b6a6a:	f7ff fdd3 	bl	b6614 <_ZN7FatFile8openRootEP9FatVolume>
   b6a6e:	e7e9      	b.n	b6a44 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6a70:	a809      	add	r0, sp, #36	; 0x24
   b6a72:	f7ff fd29 	bl	b64c8 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6a76:	2800      	cmp	r0, #0
   b6a78:	d0e3      	beq.n	b6a42 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b6a7a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6a7c:	9801      	ldr	r0, [sp, #4]
   b6a7e:	aa01      	add	r2, sp, #4
   b6a80:	a903      	add	r1, sp, #12
   b6a82:	f000 f98f 	bl	b6da4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6a86:	2800      	cmp	r0, #0
   b6a88:	d0db      	beq.n	b6a42 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b6a8a:	9b01      	ldr	r3, [sp, #4]
   b6a8c:	781b      	ldrb	r3, [r3, #0]
   b6a8e:	b19b      	cbz	r3, b6ab8 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6a90:	2300      	movs	r3, #0
   b6a92:	aa03      	add	r2, sp, #12
   b6a94:	4621      	mov	r1, r4
   b6a96:	4630      	mov	r0, r6
   b6a98:	f000 fab6 	bl	b7008 <_ZN7FatFile4openEPS_P7fname_ti>
   b6a9c:	2800      	cmp	r0, #0
   b6a9e:	d0d0      	beq.n	b6a42 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6aa0:	4635      	mov	r5, r6
   b6aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6aa4:	ac09      	add	r4, sp, #36	; 0x24
   b6aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6aac:	682b      	ldr	r3, [r5, #0]
   b6aae:	6023      	str	r3, [r4, #0]
    close();
   b6ab0:	4630      	mov	r0, r6
   b6ab2:	f7ff ffb5 	bl	b6a20 <_ZN7FatFile5closeEv>
  while (1) {
   b6ab6:	e7e0      	b.n	b6a7a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6ab8:	463b      	mov	r3, r7
   b6aba:	aa03      	add	r2, sp, #12
   b6abc:	4621      	mov	r1, r4
   b6abe:	4630      	mov	r0, r6
   b6ac0:	f000 faa2 	bl	b7008 <_ZN7FatFile4openEPS_P7fname_ti>
   b6ac4:	e7be      	b.n	b6a44 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6ac8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6acc:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6ace:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ad0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6ad2:	4604      	mov	r4, r0
   b6ad4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6ad6:	d55b      	bpl.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
   b6ad8:	7883      	ldrb	r3, [r0, #2]
   b6ada:	079a      	lsls	r2, r3, #30
   b6adc:	d558      	bpl.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6ade:	071b      	lsls	r3, r3, #28
   b6ae0:	d451      	bmi.n	b6b86 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6ae2:	6963      	ldr	r3, [r4, #20]
   b6ae4:	43db      	mvns	r3, r3
   b6ae6:	42bb      	cmp	r3, r7
   b6ae8:	d352      	bcc.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
   b6aea:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6aec:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6af0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6af2:	f1b8 0f00 	cmp.w	r8, #0
   b6af6:	f000 8091 	beq.w	b6c1c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6afa:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6afc:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6afe:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6b02:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6b06:	d10e      	bne.n	b6b26 <_ZN7FatFile5writeEPKvj+0x5e>
   b6b08:	b96d      	cbnz	r5, b6b26 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6b0a:	6921      	ldr	r1, [r4, #16]
   b6b0c:	2900      	cmp	r1, #0
   b6b0e:	d046      	beq.n	b6b9e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6b10:	4652      	mov	r2, sl
   b6b12:	f000 fcab 	bl	b746c <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6b16:	2800      	cmp	r0, #0
   b6b18:	db3a      	blt.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6b1a:	d104      	bne.n	b6b26 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6b1c:	4620      	mov	r0, r4
   b6b1e:	f7ff fcf6 	bl	b650e <_ZN7FatFile10addClusterEv>
   b6b22:	2800      	cmp	r0, #0
   b6b24:	d034      	beq.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6b26:	6921      	ldr	r1, [r4, #16]
   b6b28:	68a0      	ldr	r0, [r4, #8]
   b6b2a:	f000 fc99 	bl	b7460 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6b2e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6b30:	68a0      	ldr	r0, [r4, #8]
   b6b32:	b915      	cbnz	r5, b6b3a <_ZN7FatFile5writeEPKvj+0x72>
   b6b34:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6b38:	d23f      	bcs.n	b6bba <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6b3a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b6b3e:	4546      	cmp	r6, r8
   b6b40:	bf28      	it	cs
   b6b42:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6b44:	2d00      	cmp	r5, #0
   b6b46:	d136      	bne.n	b6bb6 <_ZN7FatFile5writeEPKvj+0xee>
   b6b48:	6962      	ldr	r2, [r4, #20]
   b6b4a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6b4c:	429a      	cmp	r2, r3
   b6b4e:	bf34      	ite	cc
   b6b50:	2201      	movcc	r2, #1
   b6b52:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6b54:	3024      	adds	r0, #36	; 0x24
   b6b56:	f000 fc60 	bl	b741a <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6b5a:	b1c8      	cbz	r0, b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6b5c:	4428      	add	r0, r5
   b6b5e:	4632      	mov	r2, r6
   b6b60:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6b62:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6b64:	f00b fdb6 	bl	c26d4 <memcpy>
      if (512 == (n + blockOffset)) {
   b6b68:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6b6c:	d104      	bne.n	b6b78 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6b6e:	68a0      	ldr	r0, [r4, #8]
   b6b70:	3024      	adds	r0, #36	; 0x24
   b6b72:	f000 fc2a 	bl	b73ca <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6b76:	b158      	cbz	r0, b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6b78:	6963      	ldr	r3, [r4, #20]
   b6b7a:	4433      	add	r3, r6
   b6b7c:	6163      	str	r3, [r4, #20]
    src += n;
   b6b7e:	44b1      	add	r9, r6
    nToWrite -= n;
   b6b80:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6b84:	e7b4      	b.n	b6af0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6b86:	69c1      	ldr	r1, [r0, #28]
   b6b88:	f7ff fe2a 	bl	b67e0 <_ZN7FatFile7seekSetEm>
   b6b8c:	2800      	cmp	r0, #0
   b6b8e:	d1a8      	bne.n	b6ae2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6b90:	7863      	ldrb	r3, [r4, #1]
   b6b92:	f043 0301 	orr.w	r3, r3, #1
   b6b96:	7063      	strb	r3, [r4, #1]
  return -1;
   b6b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6b9c:	e050      	b.n	b6c40 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6b9e:	6a23      	ldr	r3, [r4, #32]
   b6ba0:	b93b      	cbnz	r3, b6bb2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	f7ff fcb3 	bl	b650e <_ZN7FatFile10addClusterEv>
   b6ba8:	2800      	cmp	r0, #0
   b6baa:	d0f1      	beq.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6bac:	6923      	ldr	r3, [r4, #16]
   b6bae:	6223      	str	r3, [r4, #32]
   b6bb0:	e7b9      	b.n	b6b26 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6bb2:	6123      	str	r3, [r4, #16]
   b6bb4:	e7b7      	b.n	b6b26 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6bb6:	2201      	movs	r2, #1
   b6bb8:	e7cc      	b.n	b6b54 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b6bba:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6bbe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6bc0:	d31b      	bcc.n	b6bfa <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6bc2:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6bc6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6bca:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6bcc:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6bd0:	4573      	cmp	r3, lr
   b6bd2:	bf28      	it	cs
   b6bd4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6bd6:	4291      	cmp	r1, r2
      n = 512*nb;
   b6bd8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6bdc:	d307      	bcc.n	b6bee <_ZN7FatFile5writeEPKvj+0x126>
   b6bde:	441a      	add	r2, r3
   b6be0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6be2:	bf82      	ittt	hi
   b6be4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6be8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6bec:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6bee:	68a5      	ldr	r5, [r4, #8]
   b6bf0:	464a      	mov	r2, r9
   b6bf2:	6828      	ldr	r0, [r5, #0]
   b6bf4:	f000 fff3 	bl	b7bde <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6bf8:	e7bd      	b.n	b6b76 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6bfa:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6bfc:	bf02      	ittt	eq
   b6bfe:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6c02:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6c06:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6c08:	68a3      	ldr	r3, [r4, #8]
   b6c0a:	464a      	mov	r2, r9
   b6c0c:	6818      	ldr	r0, [r3, #0]
   b6c0e:	f000 ff70 	bl	b7af2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6c12:	2800      	cmp	r0, #0
   b6c14:	d0bc      	beq.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6c16:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6c1a:	e7ad      	b.n	b6b78 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6c1c:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6c1e:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6c20:	42b2      	cmp	r2, r6
   b6c22:	d204      	bcs.n	b6c2e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6c24:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6c26:	f043 0304 	orr.w	r3, r3, #4
   b6c2a:	70a3      	strb	r3, [r4, #2]
   b6c2c:	e003      	b.n	b6c36 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6c2e:	4a08      	ldr	r2, [pc, #32]	; (b6c50 <_ZN7FatFile5writeEPKvj+0x188>)
   b6c30:	6812      	ldr	r2, [r2, #0]
   b6c32:	2a00      	cmp	r2, #0
   b6c34:	d1f7      	bne.n	b6c26 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6c36:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6c3a:	2b00      	cmp	r3, #0
   b6c3c:	db02      	blt.n	b6c44 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6c3e:	4638      	mov	r0, r7
}
   b6c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6c44:	4620      	mov	r0, r4
   b6c46:	f7ff feb5 	bl	b69b4 <_ZN7FatFile4syncEv>
   b6c4a:	2800      	cmp	r0, #0
   b6c4c:	d1f7      	bne.n	b6c3e <_ZN7FatFile5writeEPKvj+0x176>
   b6c4e:	e79f      	b.n	b6b90 <_ZN7FatFile5writeEPKvj+0xc8>
   b6c50:	2003e610 	.word	0x2003e610

000b6c54 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6c54:	2904      	cmp	r1, #4
   b6c56:	d804      	bhi.n	b6c62 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6c58:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6c5c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6c60:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6c62:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6c64:	bf9b      	ittet	ls
   b6c66:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b6c6a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6c6e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6c70:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6c72:	bf84      	itt	hi
   b6c74:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6c78:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6c7a:	4770      	bx	lr

000b6c7c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6c7c:	1e41      	subs	r1, r0, #1
   b6c7e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6c82:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6c84:	0842      	lsrs	r2, r0, #1
   b6c86:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6c8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6c8e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6c92:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6c94:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6c96:	d1f5      	bne.n	b6c84 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6c98:	4770      	bx	lr

000b6c9a <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6c9a:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6c9c:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6c9e:	4604      	mov	r4, r0
   b6ca0:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6ca2:	b923      	cbnz	r3, b6cae <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6ca8:	6889      	ldr	r1, [r1, #8]
   b6caa:	f7ff bcb3 	b.w	b6614 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6cae:	2224      	movs	r2, #36	; 0x24
   b6cb0:	2100      	movs	r1, #0
   b6cb2:	f00b fd37 	bl	c2724 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6cb6:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6cb8:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6cba:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6cbc:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6cbe:	68ab      	ldr	r3, [r5, #8]
   b6cc0:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6cc2:	68eb      	ldr	r3, [r5, #12]
   b6cc4:	6223      	str	r3, [r4, #32]
}
   b6cc6:	bd38      	pop	{r3, r4, r5, pc}

000b6cc8 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ccc:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6cce:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6cd0:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6cd4:	4606      	mov	r6, r0
   b6cd6:	460f      	mov	r7, r1
   b6cd8:	4690      	mov	r8, r2
   b6cda:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6cde:	2b00      	cmp	r3, #0
   b6ce0:	d05d      	beq.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
   b6ce2:	2a0c      	cmp	r2, #12
   b6ce4:	d95b      	bls.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6ce6:	78c3      	ldrb	r3, [r0, #3]
   b6ce8:	b933      	cbnz	r3, b6cf8 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6cea:	f000 fb57 	bl	b739c <_ZN7FatFile6getSFNEPc>
   b6cee:	4604      	mov	r4, r0
}
   b6cf0:	4620      	mov	r0, r4
   b6cf2:	b00d      	add	sp, #52	; 0x34
   b6cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6cf8:	4601      	mov	r1, r0
   b6cfa:	a803      	add	r0, sp, #12
   b6cfc:	f7ff ffcd 	bl	b6c9a <_ZN7FatFile11openClusterEPS_>
   b6d00:	2800      	cmp	r0, #0
   b6d02:	d04c      	beq.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6d04:	eb07 0308 	add.w	r3, r7, r8
   b6d08:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6d0c:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6d10:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6d12:	78f3      	ldrb	r3, [r6, #3]
   b6d14:	fa5f f58b 	uxtb.w	r5, fp
   b6d18:	42ab      	cmp	r3, r5
   b6d1a:	d340      	bcc.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6d1c:	88b1      	ldrh	r1, [r6, #4]
   b6d1e:	eba1 010b 	sub.w	r1, r1, fp
   b6d22:	0149      	lsls	r1, r1, #5
   b6d24:	a803      	add	r0, sp, #12
   b6d26:	f7ff fd5b 	bl	b67e0 <_ZN7FatFile7seekSetEm>
   b6d2a:	4604      	mov	r4, r0
   b6d2c:	2800      	cmp	r0, #0
   b6d2e:	d036      	beq.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6d30:	2100      	movs	r1, #0
   b6d32:	a803      	add	r0, sp, #12
   b6d34:	f7ff fd35 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6d38:	4603      	mov	r3, r0
   b6d3a:	b380      	cbz	r0, b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6d3c:	7ac2      	ldrb	r2, [r0, #11]
   b6d3e:	2a0f      	cmp	r2, #15
   b6d40:	d12d      	bne.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6d42:	7802      	ldrb	r2, [r0, #0]
   b6d44:	f002 021f 	and.w	r2, r2, #31
   b6d48:	42aa      	cmp	r2, r5
   b6d4a:	d128      	bne.n	b6d9e <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6d4c:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b6d50:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6d54:	197a      	adds	r2, r7, r5
   b6d56:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6d58:	4618      	mov	r0, r3
   b6d5a:	9101      	str	r1, [sp, #4]
   b6d5c:	f7ff ff7a 	bl	b6c54 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6d60:	b168      	cbz	r0, b6d7e <_ZN7FatFile7getNameEPcj+0xb6>
   b6d62:	45a8      	cmp	r8, r5
   b6d64:	d912      	bls.n	b6d8c <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b6d66:	9901      	ldr	r1, [sp, #4]
   b6d68:	3101      	adds	r1, #1
   b6d6a:	287f      	cmp	r0, #127	; 0x7f
   b6d6c:	b2c9      	uxtb	r1, r1
   b6d6e:	bf28      	it	cs
   b6d70:	203f      	movcs	r0, #63	; 0x3f
   b6d72:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6d74:	f802 0b01 	strb.w	r0, [r2], #1
   b6d78:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6d7c:	d1ec      	bne.n	b6d58 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6d7e:	45a8      	cmp	r8, r5
   b6d80:	d904      	bls.n	b6d8c <_ZN7FatFile7getNameEPcj+0xc4>
   b6d82:	781a      	ldrb	r2, [r3, #0]
   b6d84:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b6d86:	bf48      	it	mi
   b6d88:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6d8c:	9a00      	ldr	r2, [sp, #0]
   b6d8e:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6d92:	781b      	ldrb	r3, [r3, #0]
   b6d94:	065b      	lsls	r3, r3, #25
   b6d96:	f10b 0b01 	add.w	fp, fp, #1
   b6d9a:	d5ba      	bpl.n	b6d12 <_ZN7FatFile7getNameEPcj+0x4a>
   b6d9c:	e7a8      	b.n	b6cf0 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6d9e:	2400      	movs	r4, #0
   b6da0:	703c      	strb	r4, [r7, #0]
  return false;
   b6da2:	e7a5      	b.n	b6cf0 <_ZN7FatFile7getNameEPcj+0x28>

000b6da4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6da8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6daa:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6dae:	2b20      	cmp	r3, #32
   b6db0:	d0fa      	beq.n	b6da8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6db2:	4d6a      	ldr	r5, [pc, #424]	; (b6f5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6db4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6db6:	2400      	movs	r4, #0
    c = path[len];
   b6db8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6dba:	b1c3      	cbz	r3, b6dee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6dbc:	2b2f      	cmp	r3, #47	; 0x2f
   b6dbe:	d016      	beq.n	b6dee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6dc0:	2b5c      	cmp	r3, #92	; 0x5c
   b6dc2:	d102      	bne.n	b6dca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6dc4:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6dca:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6dce:	b2c0      	uxtb	r0, r0
   b6dd0:	281d      	cmp	r0, #29
   b6dd2:	d803      	bhi.n	b6ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6dd4:	fa25 f000 	lsr.w	r0, r5, r0
   b6dd8:	07c0      	lsls	r0, r0, #31
   b6dda:	d4f3      	bmi.n	b6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6ddc:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6de0:	283c      	cmp	r0, #60	; 0x3c
   b6de2:	d0ef      	beq.n	b6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6de4:	3b20      	subs	r3, #32
   b6de6:	2b5e      	cmp	r3, #94	; 0x5e
   b6de8:	d8ec      	bhi.n	b6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6dea:	3401      	adds	r4, #1
    c = path[len];
   b6dec:	e7e4      	b.n	b6db8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6dee:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6df0:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6df2:	4607      	mov	r7, r0
   b6df4:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6df8:	2d20      	cmp	r5, #32
   b6dfa:	d0fa      	beq.n	b6df2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6dfc:	2d2f      	cmp	r5, #47	; 0x2f
   b6dfe:	d0f8      	beq.n	b6df2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6e00:	6017      	str	r7, [r2, #0]
  while (len) {
   b6e02:	b14c      	cbz	r4, b6e18 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6e04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6e08:	2a2e      	cmp	r2, #46	; 0x2e
   b6e0a:	d001      	beq.n	b6e10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6e0c:	2a20      	cmp	r2, #32
   b6e0e:	d101      	bne.n	b6e14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6e10:	3c01      	subs	r4, #1
  while (len) {
   b6e12:	e7f6      	b.n	b6e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6e14:	2cff      	cmp	r4, #255	; 0xff
   b6e16:	dcd5      	bgt.n	b6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6e18:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6e1c:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6e20:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6e22:	f8c1 300d 	str.w	r3, [r1, #13]
   b6e26:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6e28:	f04f 0800 	mov.w	r8, #0
   b6e2c:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6e30:	2b2e      	cmp	r3, #46	; 0x2e
   b6e32:	d001      	beq.n	b6e38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6e34:	2b20      	cmp	r3, #32
   b6e36:	d102      	bne.n	b6e3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6e38:	f108 0801 	add.w	r8, r8, #1
   b6e3c:	e7f6      	b.n	b6e2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6e3e:	fab8 f088 	clz	r0, r8
   b6e42:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6e44:	1e65      	subs	r5, r4, #1
   b6e46:	1c6b      	adds	r3, r5, #1
   b6e48:	d002      	beq.n	b6e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6e4a:	5d73      	ldrb	r3, [r6, r5]
   b6e4c:	2b2e      	cmp	r3, #46	; 0x2e
   b6e4e:	d114      	bne.n	b6e7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6e50:	f04f 0900 	mov.w	r9, #0
   b6e54:	2707      	movs	r7, #7
   b6e56:	464a      	mov	r2, r9
   b6e58:	46ca      	mov	sl, r9
   b6e5a:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6e5e:	45a0      	cmp	r8, r4
   b6e60:	da68      	bge.n	b6f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6e62:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6e66:	2b20      	cmp	r3, #32
   b6e68:	d003      	beq.n	b6e72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6e6a:	2b2e      	cmp	r3, #46	; 0x2e
   b6e6c:	d107      	bne.n	b6e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6e6e:	45a8      	cmp	r8, r5
   b6e70:	d012      	beq.n	b6e98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6e72:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6e74:	f108 0801 	add.w	r8, r8, #1
   b6e78:	e7f1      	b.n	b6e5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6e7a:	3d01      	subs	r5, #1
   b6e7c:	e7e3      	b.n	b6e46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6e7e:	2b22      	cmp	r3, #34	; 0x22
   b6e80:	d008      	beq.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6e82:	2b7c      	cmp	r3, #124	; 0x7c
   b6e84:	d006      	beq.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6e86:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6e8a:	f1bc 0f05 	cmp.w	ip, #5
   b6e8e:	d80a      	bhi.n	b6ea6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6e90:	2b2d      	cmp	r3, #45	; 0x2d
   b6e92:	d012      	beq.n	b6eba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6e94:	45a8      	cmp	r8, r5
   b6e96:	d15b      	bne.n	b6f50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6e98:	2f0a      	cmp	r7, #10
   b6e9a:	d04a      	beq.n	b6f32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6e9c:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6e9e:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6ea0:	f04f 0e10 	mov.w	lr, #16
   b6ea4:	e7e6      	b.n	b6e74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6ea6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6eaa:	f1bc 0f05 	cmp.w	ip, #5
   b6eae:	d9f1      	bls.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6eb0:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6eb4:	f1bc 0f02 	cmp.w	ip, #2
   b6eb8:	d9ec      	bls.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6eba:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6ebe:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6ec2:	d8e7      	bhi.n	b6e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6ec4:	45a8      	cmp	r8, r5
   b6ec6:	d0e7      	beq.n	b6e98 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6ec8:	42ba      	cmp	r2, r7
   b6eca:	d830      	bhi.n	b6f2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6ecc:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6ed0:	f1bc 0f19 	cmp.w	ip, #25
   b6ed4:	d81a      	bhi.n	b6f0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6ed6:	3b20      	subs	r3, #32
        lc |= bit;
   b6ed8:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6edc:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6ede:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6ee2:	f102 0c01 	add.w	ip, r2, #1
   b6ee6:	fa5f fc8c 	uxtb.w	ip, ip
   b6eea:	440a      	add	r2, r1
      if (i < 7) {
   b6eec:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6ef0:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6ef2:	d801      	bhi.n	b6ef8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6ef4:	f881 c00c 	strb.w	ip, [r1, #12]
   b6ef8:	4662      	mov	r2, ip
   b6efa:	e7bb      	b.n	b6e74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6efc:	45a8      	cmp	r8, r5
   b6efe:	dc18      	bgt.n	b6f32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6f00:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6f02:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6f04:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6f06:	f04f 0e10 	mov.w	lr, #16
   b6f0a:	e7b2      	b.n	b6e72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6f0c:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6f10:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6f14:	bf98      	it	ls
   b6f16:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6f1a:	e7e2      	b.n	b6ee2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6f1c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6f1e:	2001      	movs	r0, #1
   b6f20:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6f22:	4419      	add	r1, r3
   b6f24:	237e      	movs	r3, #126	; 0x7e
   b6f26:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6f28:	2331      	movs	r3, #49	; 0x31
   b6f2a:	738b      	strb	r3, [r1, #14]
   b6f2c:	e74b      	b.n	b6dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6f2e:	2f0a      	cmp	r7, #10
   b6f30:	d1e4      	bne.n	b6efc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6f32:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6f34:	7b4b      	ldrb	r3, [r1, #13]
   b6f36:	2b20      	cmp	r3, #32
   b6f38:	f43f af44 	beq.w	b6dc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6f3c:	2800      	cmp	r0, #0
   b6f3e:	d0ed      	beq.n	b6f1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6f40:	ea1a 0f09 	tst.w	sl, r9
   b6f44:	bf18      	it	ne
   b6f46:	f04f 0902 	movne.w	r9, #2
   b6f4a:	f881 9000 	strb.w	r9, [r1]
   b6f4e:	e73a      	b.n	b6dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6f50:	42ba      	cmp	r2, r7
   b6f52:	d8ec      	bhi.n	b6f2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6f54:	2000      	movs	r0, #0
      c = '_';
   b6f56:	235f      	movs	r3, #95	; 0x5f
   b6f58:	e7c3      	b.n	b6ee2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6f5a:	bf00      	nop
   b6f5c:	31000101 	.word	0x31000101

000b6f60 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6f64:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6f68:	4606      	mov	r6, r0
   b6f6a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6f6c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6f6e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6f70:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6f74:	6861      	ldr	r1, [r4, #4]
   b6f76:	68a2      	ldr	r2, [r4, #8]
   b6f78:	186b      	adds	r3, r5, r1
   b6f7a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6f7c:	4411      	add	r1, r2
   b6f7e:	4291      	cmp	r1, r2
   b6f80:	d006      	beq.n	b6f90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6f82:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6f86:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6f8a:	4043      	eors	r3, r0
   b6f8c:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6f8e:	e7f6      	b.n	b6f7e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6f90:	f1b9 0f03 	cmp.w	r9, #3
   b6f94:	bf28      	it	cs
   b6f96:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6f9a:	f109 0204 	add.w	r2, r9, #4
   b6f9e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6fa0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fa4:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fa6:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fa8:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6faa:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fac:	bf94      	ite	ls
   b6fae:	3130      	addls	r1, #48	; 0x30
   b6fb0:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fb2:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6fb4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6fb6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6fba:	d1f1      	bne.n	b6fa0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6fbc:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6fc0:	2100      	movs	r1, #0
   b6fc2:	735f      	strb	r7, [r3, #13]
   b6fc4:	4630      	mov	r0, r6
   b6fc6:	f7ff fc0b 	bl	b67e0 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6fca:	2101      	movs	r1, #1
   b6fcc:	4630      	mov	r0, r6
   b6fce:	f7ff fbe8 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6fd2:	4601      	mov	r1, r0
   b6fd4:	b928      	cbnz	r0, b6fe2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6fd6:	7870      	ldrb	r0, [r6, #1]
   b6fd8:	fab0 f080 	clz	r0, r0
   b6fdc:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6fe2:	7803      	ldrb	r3, [r0, #0]
   b6fe4:	b16b      	cbz	r3, b7002 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6fe6:	7ac3      	ldrb	r3, [r0, #11]
   b6fe8:	071b      	lsls	r3, r3, #28
   b6fea:	d4ee      	bmi.n	b6fca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6fec:	220b      	movs	r2, #11
   b6fee:	4640      	mov	r0, r8
   b6ff0:	f00b fb60 	bl	c26b4 <memcmp>
   b6ff4:	2800      	cmp	r0, #0
   b6ff6:	d1e8      	bne.n	b6fca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6ff8:	3501      	adds	r5, #1
   b6ffa:	b2ad      	uxth	r5, r5
   b6ffc:	2d64      	cmp	r5, #100	; 0x64
   b6ffe:	d1b9      	bne.n	b6f74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b7000:	e7ed      	b.n	b6fde <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b7002:	2001      	movs	r0, #1
   b7004:	e7eb      	b.n	b6fde <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b7008 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b700c:	ed2d 8b02 	vpush	{d8}
   b7010:	b08b      	sub	sp, #44	; 0x2c
   b7012:	460d      	mov	r5, r1
   b7014:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b7016:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b7018:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b701a:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b701e:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b7020:	d105      	bne.n	b702e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b7022:	2000      	movs	r0, #0
}
   b7024:	b00b      	add	sp, #44	; 0x2c
   b7026:	ecbd 8b02 	vpop	{d8}
   b702a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b702e:	9b07      	ldr	r3, [sp, #28]
   b7030:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b7032:	2b00      	cmp	r3, #0
   b7034:	d1f5      	bne.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b7036:	6853      	ldr	r3, [r2, #4]
   b7038:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b703a:	7813      	ldrb	r3, [r2, #0]
   b703c:	079c      	lsls	r4, r3, #30
   b703e:	bf1f      	itttt	ne
   b7040:	9b05      	ldrne	r3, [sp, #20]
   b7042:	330c      	addne	r3, #12
   b7044:	220d      	movne	r2, #13
   b7046:	fbb3 f3f2 	udivne	r3, r3, r2
   b704a:	bf1a      	itte	ne
   b704c:	3301      	addne	r3, #1
   b704e:	b2db      	uxtbne	r3, r3
   b7050:	2301      	moveq	r3, #1
    seekSet(0);
   b7052:	2100      	movs	r1, #0
   b7054:	4628      	mov	r0, r5
   b7056:	9303      	str	r3, [sp, #12]
   b7058:	f7ff fbc2 	bl	b67e0 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b705c:	f107 030d 	add.w	r3, r7, #13
  }
   b7060:	f04f 0b00 	mov.w	fp, #0
   b7064:	ee08 3a10 	vmov	s16, r3
   b7068:	46da      	mov	sl, fp
   b706a:	465c      	mov	r4, fp
   b706c:	465e      	mov	r6, fp
   b706e:	f8cd b010 	str.w	fp, [sp, #16]
   b7072:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b7074:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b7076:	2101      	movs	r1, #1
   b7078:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b707a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b707e:	f7ff fb90 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b7082:	4603      	mov	r3, r0
   b7084:	2800      	cmp	r0, #0
   b7086:	d171      	bne.n	b716c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b7088:	786b      	ldrb	r3, [r5, #1]
   b708a:	2b00      	cmp	r3, #0
   b708c:	d1c9      	bne.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b708e:	9b06      	ldr	r3, [sp, #24]
   b7090:	059a      	lsls	r2, r3, #22
   b7092:	d5c6      	bpl.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b7094:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b7098:	3b01      	subs	r3, #1
   b709a:	2b01      	cmp	r3, #1
   b709c:	d8c1      	bhi.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b709e:	9b04      	ldr	r3, [sp, #16]
   b70a0:	2c00      	cmp	r4, #0
   b70a2:	bf08      	it	eq
   b70a4:	4643      	moveq	r3, r8
   b70a6:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b70a8:	9b03      	ldr	r3, [sp, #12]
   b70aa:	429c      	cmp	r4, r3
   b70ac:	f0c0 80f1 	bcc.w	b7292 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b70b0:	f1b9 0f00 	cmp.w	r9, #0
   b70b4:	f040 810a 	bne.w	b72cc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b70b8:	9b04      	ldr	r3, [sp, #16]
   b70ba:	4628      	mov	r0, r5
   b70bc:	0159      	lsls	r1, r3, #5
   b70be:	f7ff fb8f 	bl	b67e0 <_ZN7FatFile7seekSetEm>
   b70c2:	2800      	cmp	r0, #0
   b70c4:	d0ad      	beq.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b70c6:	9b03      	ldr	r3, [sp, #12]
   b70c8:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b70cc:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b70d0:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b70d2:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b70d6:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b70da:	2e00      	cmp	r6, #0
   b70dc:	f000 810d 	beq.w	b72fa <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b70e0:	2100      	movs	r1, #0
   b70e2:	4628      	mov	r0, r5
   b70e4:	f7ff fb5d 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b70e8:	4604      	mov	r4, r0
   b70ea:	2800      	cmp	r0, #0
   b70ec:	d099      	beq.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b70ee:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b70f0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b70f4:	454e      	cmp	r6, r9
   b70f6:	f043 0301 	orr.w	r3, r3, #1
   b70fa:	bf0c      	ite	eq
   b70fc:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b7100:	46b3      	movne	fp, r6
   b7102:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b7106:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b710a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b710e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b7112:	f107 000d 	add.w	r0, r7, #13
   b7116:	f7ff fdb1 	bl	b6c7c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b711a:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b711e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b7120:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7124:	f00b 031f 	and.w	r3, fp, #31
   b7128:	220d      	movs	r2, #13
   b712a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b712c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b7130:	4353      	muls	r3, r2
   b7132:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7134:	9905      	ldr	r1, [sp, #20]
   b7136:	4299      	cmp	r1, r3
   b7138:	f240 80d0 	bls.w	b72dc <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b713c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b7140:	2a04      	cmp	r2, #4
   b7142:	fa5f fe82 	uxtb.w	lr, r2
   b7146:	f102 0001 	add.w	r0, r2, #1
   b714a:	f200 80cd 	bhi.w	b72e8 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b714e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b7152:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b7156:	280d      	cmp	r0, #13
   b7158:	f103 0301 	add.w	r3, r3, #1
   b715c:	4602      	mov	r2, r0
   b715e:	d1e9      	bne.n	b7134 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b7160:	3e01      	subs	r6, #1
   b7162:	b2f6      	uxtb	r6, r6
   b7164:	e7b9      	b.n	b70da <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b7166:	f04f 0901 	mov.w	r9, #1
   b716a:	e783      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b716c:	7802      	ldrb	r2, [r0, #0]
   b716e:	2ae5      	cmp	r2, #229	; 0xe5
   b7170:	d000      	beq.n	b7174 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b7172:	b97a      	cbnz	r2, b7194 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b7174:	9904      	ldr	r1, [sp, #16]
   b7176:	2c00      	cmp	r4, #0
   b7178:	bf08      	it	eq
   b717a:	4641      	moveq	r1, r8
   b717c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b717e:	9903      	ldr	r1, [sp, #12]
   b7180:	428c      	cmp	r4, r1
        freeFound++;
   b7182:	bf3c      	itt	cc
   b7184:	3401      	addcc	r4, #1
   b7186:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b7188:	2a00      	cmp	r2, #0
   b718a:	d080      	beq.n	b708e <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b718c:	2ae5      	cmp	r2, #229	; 0xe5
   b718e:	d105      	bne.n	b719c <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b7190:	2600      	movs	r6, #0
   b7192:	e76f      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b7194:	9903      	ldr	r1, [sp, #12]
   b7196:	428c      	cmp	r4, r1
   b7198:	bf38      	it	cc
   b719a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b719c:	2a2e      	cmp	r2, #46	; 0x2e
   b719e:	d0f7      	beq.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b71a0:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b71a2:	290f      	cmp	r1, #15
   b71a4:	d14a      	bne.n	b723c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b71a6:	bb16      	cbnz	r6, b71ee <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b71a8:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b71ac:	f43f af62 	beq.w	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b71b0:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b71b4:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b71b8:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b71ba:	220d      	movs	r2, #13
   b71bc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b71c0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b71c4:	9a05      	ldr	r2, [sp, #20]
   b71c6:	4542      	cmp	r2, r8
   b71c8:	d9e2      	bls.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b71ca:	eba2 0208 	sub.w	r2, r2, r8
   b71ce:	9208      	str	r2, [sp, #32]
   b71d0:	2200      	movs	r2, #0
   b71d2:	eb02 0108 	add.w	r1, r2, r8
   b71d6:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b71d8:	4618      	mov	r0, r3
   b71da:	b2d1      	uxtb	r1, r2
   b71dc:	f7ff fd3a 	bl	b6c54 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b71e0:	9908      	ldr	r1, [sp, #32]
   b71e2:	428a      	cmp	r2, r1
   b71e4:	d10d      	bne.n	b7202 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b71e6:	2800      	cmp	r0, #0
   b71e8:	bf18      	it	ne
   b71ea:	2600      	movne	r6, #0
   b71ec:	e742      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b71ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b71f2:	fa5f fa8a 	uxtb.w	sl, sl
   b71f6:	4552      	cmp	r2, sl
   b71f8:	d1ca      	bne.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b71fa:	7b5a      	ldrb	r2, [r3, #13]
   b71fc:	455a      	cmp	r2, fp
   b71fe:	d0dc      	beq.n	b71ba <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7200:	e7c6      	b.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7202:	28ff      	cmp	r0, #255	; 0xff
   b7204:	d8c4      	bhi.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b7206:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b720a:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b720e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7210:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7212:	bf9c      	itt	ls
   b7214:	f10e 0020 	addls.w	r0, lr, #32
   b7218:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b721c:	4608      	mov	r0, r1
   b721e:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7220:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7222:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b7226:	f1bc 0f19 	cmp.w	ip, #25
   b722a:	bf9c      	itt	ls
   b722c:	3120      	addls	r1, #32
   b722e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7230:	4571      	cmp	r1, lr
   b7232:	d1ad      	bne.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7234:	3201      	adds	r2, #1
   b7236:	2a0d      	cmp	r2, #13
   b7238:	d1cb      	bne.n	b71d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b723a:	e71b      	b.n	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b723c:	0708      	lsls	r0, r1, #28
   b723e:	d4a7      	bmi.n	b7190 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7240:	b15e      	cbz	r6, b725a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7242:	f1ba 0f01 	cmp.w	sl, #1
   b7246:	f47f aeec 	bne.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b724a:	4618      	mov	r0, r3
   b724c:	f7ff fd16 	bl	b6c7c <_ZN7FatFile11lfnChecksumEPh>
   b7250:	4558      	cmp	r0, fp
   b7252:	f47f aee6 	bne.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b7256:	46b1      	mov	r9, r6
   b7258:	e00e      	b.n	b7278 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b725a:	ee18 1a10 	vmov	r1, s16
   b725e:	220b      	movs	r2, #11
   b7260:	4618      	mov	r0, r3
   b7262:	f00b fa27 	bl	c26b4 <memcmp>
   b7266:	2800      	cmp	r0, #0
   b7268:	f47f af04 	bne.w	b7074 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b726c:	f897 9000 	ldrb.w	r9, [r7]
   b7270:	f019 0901 	ands.w	r9, r9, #1
   b7274:	f47f af77 	bne.w	b7166 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b7278:	9b06      	ldr	r3, [sp, #24]
   b727a:	0519      	lsls	r1, r3, #20
   b727c:	f53f aed1 	bmi.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b7280:	9b06      	ldr	r3, [sp, #24]
   b7282:	9807      	ldr	r0, [sp, #28]
   b7284:	f8cd 9000 	str.w	r9, [sp]
   b7288:	4642      	mov	r2, r8
   b728a:	4629      	mov	r1, r5
   b728c:	f7ff faeb 	bl	b6866 <_ZN7FatFile15openCachedEntryEPS_tih>
   b7290:	e6c8      	b.n	b7024 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b7292:	2100      	movs	r1, #0
   b7294:	4628      	mov	r0, r5
   b7296:	f7ff fa84 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b729a:	b9a0      	cbnz	r0, b72c6 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b729c:	786b      	ldrb	r3, [r5, #1]
   b729e:	2b00      	cmp	r3, #0
   b72a0:	f47f aebf 	bne.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b72a4:	4628      	mov	r0, r5
   b72a6:	f7ff f93d 	bl	b6524 <_ZN7FatFile13addDirClusterEv>
   b72aa:	2800      	cmp	r0, #0
   b72ac:	f43f aeb9 	beq.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b72b0:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b72b2:	791b      	ldrb	r3, [r3, #4]
   b72b4:	2b01      	cmp	r3, #1
   b72b6:	f63f aefb 	bhi.w	b70b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b72ba:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b72bc:	3410      	adds	r4, #16
   b72be:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b72c0:	42a3      	cmp	r3, r4
   b72c2:	d8ef      	bhi.n	b72a4 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b72c4:	e6f4      	b.n	b70b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b72c6:	3401      	adds	r4, #1
   b72c8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b72ca:	e6ed      	b.n	b70a8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b72cc:	4639      	mov	r1, r7
   b72ce:	4628      	mov	r0, r5
   b72d0:	f7ff fe46 	bl	b6f60 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b72d4:	2800      	cmp	r0, #0
   b72d6:	f47f aeef 	bne.w	b70b8 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b72da:	e6a2      	b.n	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b72dc:	bf14      	ite	ne
   b72de:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b72e2:	2100      	moveq	r1, #0
   b72e4:	b289      	uxth	r1, r1
   b72e6:	e72b      	b.n	b7140 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b72e8:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b72ec:	bf94      	ite	ls
   b72ee:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b72f2:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b72f6:	8091      	strh	r1, [r2, #4]
   b72f8:	e72d      	b.n	b7156 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b72fa:	4631      	mov	r1, r6
   b72fc:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b72fe:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7302:	f7ff fa4e 	bl	b67a2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b7306:	4604      	mov	r4, r0
   b7308:	2800      	cmp	r0, #0
   b730a:	f43f ae8a 	beq.w	b7022 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b730e:	2220      	movs	r2, #32
   b7310:	4631      	mov	r1, r6
   b7312:	f00b fa07 	bl	c2724 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b7316:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b731a:	6023      	str	r3, [r4, #0]
   b731c:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7320:	6063      	str	r3, [r4, #4]
   b7322:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b7326:	8123      	strh	r3, [r4, #8]
   b7328:	7dfb      	ldrb	r3, [r7, #23]
   b732a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b732c:	783b      	ldrb	r3, [r7, #0]
   b732e:	f003 0318 	and.w	r3, r3, #24
   b7332:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7334:	4b0f      	ldr	r3, [pc, #60]	; (b7374 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b7336:	681b      	ldr	r3, [r3, #0]
   b7338:	b19b      	cbz	r3, b7362 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b733a:	f104 010e 	add.w	r1, r4, #14
   b733e:	f104 0010 	add.w	r0, r4, #16
   b7342:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7344:	8a23      	ldrh	r3, [r4, #16]
   b7346:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b7348:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b734a:	89e3      	ldrh	r3, [r4, #14]
   b734c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b734e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7350:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7354:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b7358:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b735c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b7360:	e78e      	b.n	b7280 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b7362:	2321      	movs	r3, #33	; 0x21
   b7364:	7423      	strb	r3, [r4, #16]
   b7366:	2328      	movs	r3, #40	; 0x28
   b7368:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b736a:	2308      	movs	r3, #8
   b736c:	73a6      	strb	r6, [r4, #14]
   b736e:	73e3      	strb	r3, [r4, #15]
   b7370:	e7e8      	b.n	b7344 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b7372:	bf00      	nop
   b7374:	2003e610 	.word	0x2003e610

000b7378 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7378:	b513      	push	{r0, r1, r4, lr}
   b737a:	4604      	mov	r4, r0
    }
   b737c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b737e:	b159      	cbz	r1, b7398 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7380:	9101      	str	r1, [sp, #4]
   b7382:	f00b fa5a 	bl	c283a <strlen>
   b7386:	6823      	ldr	r3, [r4, #0]
   b7388:	9901      	ldr	r1, [sp, #4]
   b738a:	68db      	ldr	r3, [r3, #12]
   b738c:	4602      	mov	r2, r0
   b738e:	4620      	mov	r0, r4
    }
   b7390:	b002      	add	sp, #8
   b7392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7396:	4718      	bx	r3
    }
   b7398:	b002      	add	sp, #8
   b739a:	bd10      	pop	{r4, pc}

000b739c <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b739c:	b510      	push	{r4, lr}
   b739e:	460c      	mov	r4, r1
    return m_attr;
   b73a0:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b73a2:	b909      	cbnz	r1, b73a8 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b73a4:	2000      	movs	r0, #0
}
   b73a6:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b73a8:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b73ac:	d005      	beq.n	b73ba <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b73ae:	232f      	movs	r3, #47	; 0x2f
   b73b0:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b73b2:	2300      	movs	r3, #0
   b73b4:	7063      	strb	r3, [r4, #1]
  return true;
   b73b6:	2001      	movs	r0, #1
   b73b8:	e7f5      	b.n	b73a6 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b73ba:	f7ff f8f1 	bl	b65a0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b73be:	2800      	cmp	r0, #0
   b73c0:	d0f0      	beq.n	b73a4 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b73c2:	4621      	mov	r1, r4
   b73c4:	f7ff f8fb 	bl	b65be <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b73c8:	e7f5      	b.n	b73b6 <_ZN7FatFile6getSFNEPc+0x1a>

000b73ca <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b73ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b73cc:	7803      	ldrb	r3, [r0, #0]
   b73ce:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b73d0:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b73d2:	d520      	bpl.n	b7416 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b73d4:	6843      	ldr	r3, [r0, #4]
   b73d6:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b73d8:	f100 020c 	add.w	r2, r0, #12
   b73dc:	6818      	ldr	r0, [r3, #0]
   b73de:	9201      	str	r2, [sp, #4]
   b73e0:	f000 fb87 	bl	b7af2 <_ZN9SdSpiCard10writeBlockEmPKh>
   b73e4:	9a01      	ldr	r2, [sp, #4]
   b73e6:	4605      	mov	r5, r0
   b73e8:	b918      	cbnz	r0, b73f2 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b73ea:	2500      	movs	r5, #0
}
   b73ec:	4628      	mov	r0, r5
   b73ee:	b003      	add	sp, #12
   b73f0:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b73f2:	7823      	ldrb	r3, [r4, #0]
   b73f4:	079b      	lsls	r3, r3, #30
   b73f6:	d404      	bmi.n	b7402 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b73f8:	7823      	ldrb	r3, [r4, #0]
   b73fa:	f023 0301 	bic.w	r3, r3, #1
   b73fe:	7023      	strb	r3, [r4, #0]
   b7400:	e7f4      	b.n	b73ec <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7402:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7406:	6919      	ldr	r1, [r3, #16]
   b7408:	4401      	add	r1, r0
   b740a:	6818      	ldr	r0, [r3, #0]
   b740c:	f000 fb71 	bl	b7af2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b7410:	2800      	cmp	r0, #0
   b7412:	d1f1      	bne.n	b73f8 <_ZN8FatCache4syncEv+0x2e>
   b7414:	e7e9      	b.n	b73ea <_ZN8FatCache4syncEv+0x20>
  return true;
   b7416:	2501      	movs	r5, #1
   b7418:	e7e8      	b.n	b73ec <_ZN8FatCache4syncEv+0x22>

000b741a <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b741a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b741c:	6883      	ldr	r3, [r0, #8]
   b741e:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7420:	4604      	mov	r4, r0
   b7422:	460e      	mov	r6, r1
   b7424:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7426:	d009      	beq.n	b743c <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7428:	f7ff ffcf 	bl	b73ca <_ZN8FatCache4syncEv>
   b742c:	b908      	cbnz	r0, b7432 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b742e:	2000      	movs	r0, #0
}
   b7430:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7432:	076b      	lsls	r3, r5, #29
   b7434:	d50a      	bpl.n	b744c <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7436:	2300      	movs	r3, #0
   b7438:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b743a:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b743c:	7822      	ldrb	r2, [r4, #0]
   b743e:	f005 0503 	and.w	r5, r5, #3
   b7442:	4620      	mov	r0, r4
   b7444:	4315      	orrs	r5, r2
   b7446:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b744a:	e7f1      	b.n	b7430 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b744c:	6863      	ldr	r3, [r4, #4]
   b744e:	f104 020c 	add.w	r2, r4, #12
   b7452:	6818      	ldr	r0, [r3, #0]
   b7454:	4631      	mov	r1, r6
   b7456:	f000 fac3 	bl	b79e0 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b745a:	2800      	cmp	r0, #0
   b745c:	d1eb      	bne.n	b7436 <_ZN8FatCache4readEmh+0x1c>
   b745e:	e7e6      	b.n	b742e <_ZN8FatCache4readEmh+0x14>

000b7460 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7460:	7983      	ldrb	r3, [r0, #6]
   b7462:	6940      	ldr	r0, [r0, #20]
   b7464:	3902      	subs	r1, #2
   b7466:	4099      	lsls	r1, r3
}
   b7468:	4408      	add	r0, r1
   b746a:	4770      	bx	lr

000b746c <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b746c:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b746e:	b570      	push	{r4, r5, r6, lr}
   b7470:	4605      	mov	r5, r0
   b7472:	460c      	mov	r4, r1
   b7474:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7476:	d802      	bhi.n	b747e <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b747c:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b747e:	69c3      	ldr	r3, [r0, #28]
   b7480:	428b      	cmp	r3, r1
   b7482:	d3f9      	bcc.n	b7478 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7484:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7486:	2b20      	cmp	r3, #32
   b7488:	d116      	bne.n	b74b8 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b748a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b748c:	2202      	movs	r2, #2
   b748e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7492:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7496:	f7ff ffc0 	bl	b741a <_ZN8FatCache4readEmh>
    if (!pc) {
   b749a:	2800      	cmp	r0, #0
   b749c:	d0ec      	beq.n	b7478 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b749e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b74a2:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b74a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b74aa:	69ea      	ldr	r2, [r5, #28]
   b74ac:	429a      	cmp	r2, r3
  *value = next;
   b74ae:	bf26      	itte	cs
   b74b0:	6033      	strcs	r3, [r6, #0]
  return 1;
   b74b2:	2001      	movcs	r0, #1
    return 0;
   b74b4:	2000      	movcc	r0, #0
   b74b6:	e7e1      	b.n	b747c <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b74b8:	2b10      	cmp	r3, #16
   b74ba:	d1dd      	bne.n	b7478 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b74bc:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b74c0:	6981      	ldr	r1, [r0, #24]
   b74c2:	2202      	movs	r2, #2
   b74c4:	4419      	add	r1, r3
   b74c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b74ca:	f7ff ffa6 	bl	b741a <_ZN8FatCache4readEmh>
    if (!pc) {
   b74ce:	2800      	cmp	r0, #0
   b74d0:	d0d2      	beq.n	b7478 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b74d2:	b2e4      	uxtb	r4, r4
   b74d4:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b74d8:	e7e7      	b.n	b74aa <_ZN9FatVolume6fatGetEmPm+0x3e>

000b74da <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b74da:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b74dc:	b538      	push	{r3, r4, r5, lr}
   b74de:	460c      	mov	r4, r1
   b74e0:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b74e2:	d801      	bhi.n	b74e8 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b74e4:	2000      	movs	r0, #0
}
   b74e6:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b74e8:	69c3      	ldr	r3, [r0, #28]
   b74ea:	428b      	cmp	r3, r1
   b74ec:	d3fa      	bcc.n	b74e4 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b74ee:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b74f0:	2b20      	cmp	r3, #32
   b74f2:	d10f      	bne.n	b7514 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b74f4:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b74f6:	2203      	movs	r2, #3
   b74f8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b74fc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7500:	f7ff ff8b 	bl	b741a <_ZN8FatCache4readEmh>
    if (!pc) {
   b7504:	2800      	cmp	r0, #0
   b7506:	d0ed      	beq.n	b74e4 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7508:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b750c:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7510:	2001      	movs	r0, #1
   b7512:	e7e8      	b.n	b74e6 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7514:	2b10      	cmp	r3, #16
   b7516:	d1e5      	bne.n	b74e4 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7518:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b751c:	6981      	ldr	r1, [r0, #24]
   b751e:	2203      	movs	r2, #3
   b7520:	4419      	add	r1, r3
   b7522:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7526:	f7ff ff78 	bl	b741a <_ZN8FatCache4readEmh>
    if (!pc) {
   b752a:	2800      	cmp	r0, #0
   b752c:	d0da      	beq.n	b74e4 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b752e:	b2e4      	uxtb	r4, r4
   b7530:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7534:	e7ec      	b.n	b7510 <_ZN9FatVolume6fatPutEmm+0x36>

000b7536 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b753a:	68c4      	ldr	r4, [r0, #12]
   b753c:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b753e:	4605      	mov	r5, r0
   b7540:	460e      	mov	r6, r1
   b7542:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7544:	d301      	bcc.n	b754a <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7546:	2701      	movs	r7, #1
   b7548:	e001      	b.n	b754e <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b754a:	460c      	mov	r4, r1
    setStart = false;
   b754c:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b754e:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7550:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7552:	42a3      	cmp	r3, r4
   b7554:	d202      	bcs.n	b755c <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7556:	b9c7      	cbnz	r7, b758a <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7558:	68ec      	ldr	r4, [r5, #12]
   b755a:	e7f4      	b.n	b7546 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b755c:	42a6      	cmp	r6, r4
   b755e:	d014      	beq.n	b758a <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7560:	aa01      	add	r2, sp, #4
   b7562:	4621      	mov	r1, r4
   b7564:	4628      	mov	r0, r5
   b7566:	f7ff ff81 	bl	b746c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b756a:	2800      	cmp	r0, #0
   b756c:	db0d      	blt.n	b758a <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b756e:	d0ee      	beq.n	b754e <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7570:	9b01      	ldr	r3, [sp, #4]
   b7572:	2b00      	cmp	r3, #0
   b7574:	d1eb      	bne.n	b754e <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7576:	b107      	cbz	r7, b757a <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7578:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b757a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b757e:	4621      	mov	r1, r4
   b7580:	4628      	mov	r0, r5
   b7582:	f7ff ffaa 	bl	b74da <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7586:	4607      	mov	r7, r0
   b7588:	b920      	cbnz	r0, b7594 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b758a:	2700      	movs	r7, #0
}
   b758c:	4638      	mov	r0, r7
   b758e:	b002      	add	sp, #8
   b7590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7594:	b916      	cbnz	r6, b759c <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7596:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b759a:	e7f7      	b.n	b758c <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b759c:	4622      	mov	r2, r4
   b759e:	4631      	mov	r1, r6
   b75a0:	4628      	mov	r0, r5
   b75a2:	f7ff ff9a 	bl	b74da <_ZN9FatVolume6fatPutEmm>
   b75a6:	2800      	cmp	r0, #0
   b75a8:	d1f5      	bne.n	b7596 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b75aa:	e7ee      	b.n	b758a <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b75ac <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b75ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b75ae:	4605      	mov	r5, r0
   b75b0:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b75b2:	aa01      	add	r2, sp, #4
   b75b4:	4621      	mov	r1, r4
   b75b6:	4628      	mov	r0, r5
   b75b8:	f7ff ff58 	bl	b746c <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b75bc:	1e06      	subs	r6, r0, #0
   b75be:	db10      	blt.n	b75e2 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b75c0:	2200      	movs	r2, #0
   b75c2:	4621      	mov	r1, r4
   b75c4:	4628      	mov	r0, r5
   b75c6:	f7ff ff88 	bl	b74da <_ZN9FatVolume6fatPutEmm>
   b75ca:	b150      	cbz	r0, b75e2 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b75cc:	68eb      	ldr	r3, [r5, #12]
   b75ce:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b75d0:	bf24      	itt	cs
   b75d2:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b75d6:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b75d8:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b75da:	2e00      	cmp	r6, #0
   b75dc:	d1e9      	bne.n	b75b2 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b75de:	b002      	add	sp, #8
   b75e0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b75e2:	2000      	movs	r0, #0
   b75e4:	e7fb      	b.n	b75de <_ZN9FatVolume9freeChainEm+0x32>

000b75e6 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b75e6:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b75e8:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b75ea:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b75ec:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b75ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b75f2:	4604      	mov	r4, r0
  m_fatType = 0;
   b75f4:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b75f6:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b75fa:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b75fc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7600:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7602:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7606:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b760a:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b760e:	460d      	mov	r5, r1
   b7610:	b1b9      	cbz	r1, b7642 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7612:	2904      	cmp	r1, #4
   b7614:	d901      	bls.n	b761a <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7616:	2000      	movs	r0, #0
}
   b7618:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b761a:	4611      	mov	r1, r2
   b761c:	4630      	mov	r0, r6
   b761e:	f7ff fefc 	bl	b741a <_ZN8FatCache4readEmh>
    if (!pc) {
   b7622:	2800      	cmp	r0, #0
   b7624:	d0f7      	beq.n	b7616 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7626:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b762a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b762e:	065b      	lsls	r3, r3, #25
   b7630:	d1f1      	bne.n	b7616 <_ZN9FatVolume4initEh+0x30>
   b7632:	f105 011b 	add.w	r1, r5, #27
   b7636:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b763a:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b763e:	2d00      	cmp	r5, #0
   b7640:	d0e9      	beq.n	b7616 <_ZN9FatVolume4initEh+0x30>
   b7642:	2200      	movs	r2, #0
   b7644:	4629      	mov	r1, r5
   b7646:	4630      	mov	r0, r6
   b7648:	f7ff fee7 	bl	b741a <_ZN8FatCache4readEmh>
  if (!pc) {
   b764c:	2800      	cmp	r0, #0
   b764e:	d0e2      	beq.n	b7616 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7650:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7658:	d1dd      	bne.n	b7616 <_ZN9FatVolume4initEh+0x30>
   b765a:	7c03      	ldrb	r3, [r0, #16]
   b765c:	2b02      	cmp	r3, #2
   b765e:	d1da      	bne.n	b7616 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7660:	89c3      	ldrh	r3, [r0, #14]
   b7662:	2b00      	cmp	r3, #0
   b7664:	d0d7      	beq.n	b7616 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7666:	7b41      	ldrb	r1, [r0, #13]
   b7668:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b766a:	1e4b      	subs	r3, r1, #1
   b766c:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b766e:	2300      	movs	r3, #0
   b7670:	71a3      	strb	r3, [r4, #6]
   b7672:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7674:	2301      	movs	r3, #1
   b7676:	4299      	cmp	r1, r3
   b7678:	d007      	beq.n	b768a <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b767a:	3e01      	subs	r6, #1
   b767c:	d0cb      	beq.n	b7616 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b767e:	79a2      	ldrb	r2, [r4, #6]
   b7680:	005b      	lsls	r3, r3, #1
   b7682:	3201      	adds	r2, #1
   b7684:	b2db      	uxtb	r3, r3
   b7686:	71a2      	strb	r2, [r4, #6]
   b7688:	e7f5      	b.n	b7676 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b768a:	8ac1      	ldrh	r1, [r0, #22]
   b768c:	b901      	cbnz	r1, b7690 <_ZN9FatVolume4initEh+0xaa>
   b768e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7690:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7692:	89c3      	ldrh	r3, [r0, #14]
   b7694:	442b      	add	r3, r5
   b7696:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7698:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b769c:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b769e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b76a2:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b76a4:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b76a8:	0149      	lsls	r1, r1, #5
   b76aa:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b76ae:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b76b2:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b76b4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b76b8:	b902      	cbnz	r2, b76bc <_ZN9FatVolume4initEh+0xd6>
   b76ba:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76bc:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b76be:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b76c0:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b76c2:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b76c4:	1c4b      	adds	r3, r1, #1
   b76c6:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b76c8:	f640 73f4 	movw	r3, #4084	; 0xff4
   b76cc:	4299      	cmp	r1, r3
   b76ce:	d802      	bhi.n	b76d6 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b76d0:	230c      	movs	r3, #12
   b76d2:	71e3      	strb	r3, [r4, #7]
   b76d4:	e79f      	b.n	b7616 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b76d6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b76da:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b76dc:	bf85      	ittet	hi
   b76de:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b76e0:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b76e2:	2310      	movls	r3, #16
    m_fatType = 32;
   b76e4:	2320      	movhi	r3, #32
   b76e6:	71e3      	strb	r3, [r4, #7]
  return true;
   b76e8:	2001      	movs	r0, #1
   b76ea:	e795      	b.n	b7618 <_ZN9FatVolume4initEh+0x32>

000b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b76ec:	f000 baca 	b.w	b7c84 <_ZN14SdSpiAltDriver4sendEh>

000b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b76f0:	f000 baad 	b.w	b7c4e <_ZN14SdSpiAltDriver7receiveEv>

000b76f4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b76f4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b76f6:	4e0e      	ldr	r6, [pc, #56]	; (b7730 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b76f8:	460d      	mov	r5, r1
   b76fa:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b76fc:	f005 ff5a 	bl	bd5b4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7700:	6833      	ldr	r3, [r6, #0]
   b7702:	1ac0      	subs	r0, r0, r3
   b7704:	4b0b      	ldr	r3, [pc, #44]	; (b7734 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7706:	4298      	cmp	r0, r3
   b7708:	d908      	bls.n	b771c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b770a:	f005 ff5b 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b770e:	4b0a      	ldr	r3, [pc, #40]	; (b7738 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7710:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7712:	f006 f9b5 	bl	bda80 <spark_process>
   b7716:	f005 ff4d 	bl	bd5b4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b771a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b771c:	f005 ff52 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7720:	b280      	uxth	r0, r0
   b7722:	1b40      	subs	r0, r0, r5
}
   b7724:	42a0      	cmp	r0, r4
   b7726:	bfd4      	ite	le
   b7728:	2000      	movle	r0, #0
   b772a:	2001      	movgt	r0, #1
   b772c:	bd70      	pop	{r4, r5, r6, pc}
   b772e:	bf00      	nop
   b7730:	2003e618 	.word	0x2003e618
   b7734:	000186a0 	.word	0x000186a0
   b7738:	2003e728 	.word	0x2003e728

000b773c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b773c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b773e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7740:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7742:	b94d      	cbnz	r5, b7758 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7744:	6840      	ldr	r0, [r0, #4]
   b7746:	f000 fa6b 	bl	b7c20 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b774a:	6863      	ldr	r3, [r4, #4]
   b774c:	4629      	mov	r1, r5
   b774e:	7d18      	ldrb	r0, [r3, #20]
   b7750:	f00a f8b5 	bl	c18be <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7754:	2301      	movs	r3, #1
   b7756:	7223      	strb	r3, [r4, #8]
  }
}
   b7758:	bd38      	pop	{r3, r4, r5, pc}

000b775a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b775a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b775c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b775e:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7760:	b16b      	cbz	r3, b777e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7762:	6843      	ldr	r3, [r0, #4]
   b7764:	2101      	movs	r1, #1
   b7766:	7d18      	ldrb	r0, [r3, #20]
   b7768:	f00a f8a9 	bl	c18be <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b776c:	6860      	ldr	r0, [r4, #4]
   b776e:	21ff      	movs	r1, #255	; 0xff
   b7770:	f7ff ffbc 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7774:	6860      	ldr	r0, [r4, #4]
   b7776:	f000 fa67 	bl	b7c48 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b777a:	2300      	movs	r3, #0
   b777c:	7223      	strb	r3, [r4, #8]
  }
}
   b777e:	bd10      	pop	{r4, pc}

000b7780 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7782:	4604      	mov	r4, r0
   b7784:	460d      	mov	r5, r1
   b7786:	4616      	mov	r6, r2
   b7788:	f005 ff1c 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b778c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b778e:	6860      	ldr	r0, [r4, #4]
   b7790:	f7ff ffae 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7794:	28ff      	cmp	r0, #255	; 0xff
   b7796:	7260      	strb	r0, [r4, #9]
   b7798:	d10e      	bne.n	b77b8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b779a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b779e:	4639      	mov	r1, r7
   b77a0:	4620      	mov	r0, r4
   b77a2:	f7ff ffa7 	bl	b76f4 <_ZN9SdSpiCard10isTimedOutEtt>
   b77a6:	2800      	cmp	r0, #0
   b77a8:	d0f1      	beq.n	b778e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b77aa:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b77ac:	4620      	mov	r0, r4
   b77ae:	7023      	strb	r3, [r4, #0]
   b77b0:	f7ff ffd3 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b77b4:	2000      	movs	r0, #0
}
   b77b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b77b8:	28fe      	cmp	r0, #254	; 0xfe
   b77ba:	d001      	beq.n	b77c0 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b77bc:	2350      	movs	r3, #80	; 0x50
   b77be:	e7f5      	b.n	b77ac <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b77c0:	6860      	ldr	r0, [r4, #4]
   b77c2:	4632      	mov	r2, r6
   b77c4:	4629      	mov	r1, r5
   b77c6:	f000 fa47 	bl	b7c58 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b77ca:	7260      	strb	r0, [r4, #9]
   b77cc:	b108      	cbz	r0, b77d2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b77ce:	2360      	movs	r3, #96	; 0x60
   b77d0:	e7ec      	b.n	b77ac <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b77d2:	6860      	ldr	r0, [r4, #4]
   b77d4:	f7ff ff8c 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b77d8:	6860      	ldr	r0, [r4, #4]
   b77da:	f7ff ff89 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b77de:	2001      	movs	r0, #1
   b77e0:	e7e9      	b.n	b77b6 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b77e2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b77e2:	b570      	push	{r4, r5, r6, lr}
   b77e4:	4604      	mov	r4, r0
   b77e6:	460e      	mov	r6, r1
   b77e8:	f005 feec 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   b77ec:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b77ee:	4632      	mov	r2, r6
   b77f0:	4629      	mov	r1, r5
   b77f2:	4620      	mov	r0, r4
   b77f4:	f7ff ff7e 	bl	b76f4 <_ZN9SdSpiCard10isTimedOutEtt>
   b77f8:	b930      	cbnz	r0, b7808 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b77fa:	6860      	ldr	r0, [r4, #4]
   b77fc:	f7ff ff78 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7800:	28ff      	cmp	r0, #255	; 0xff
   b7802:	d1f4      	bne.n	b77ee <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7804:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7806:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7808:	2000      	movs	r0, #0
   b780a:	e7fc      	b.n	b7806 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b780c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b780c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b780e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7810:	9201      	str	r2, [sp, #4]
   b7812:	4604      	mov	r4, r0
   b7814:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7816:	b90b      	cbnz	r3, b781c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7818:	f7ff ff90 	bl	b773c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b781c:	b125      	cbz	r5, b7828 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b781e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7822:	4620      	mov	r0, r4
   b7824:	f7ff ffdd 	bl	b77e2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7828:	6860      	ldr	r0, [r4, #4]
   b782a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b782e:	f7ff ff5d 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7832:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7834:	af01      	add	r7, sp, #4
   b7836:	5db9      	ldrb	r1, [r7, r6]
   b7838:	6860      	ldr	r0, [r4, #4]
   b783a:	f7ff ff57 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b783e:	3e01      	subs	r6, #1
   b7840:	d2f9      	bcs.n	b7836 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7842:	2d00      	cmp	r5, #0
   b7844:	6860      	ldr	r0, [r4, #4]
   b7846:	bf0c      	ite	eq
   b7848:	2195      	moveq	r1, #149	; 0x95
   b784a:	2187      	movne	r1, #135	; 0x87
   b784c:	f7ff ff4e 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7850:	6860      	ldr	r0, [r4, #4]
   b7852:	f7ff ff4d 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7856:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7858:	6860      	ldr	r0, [r4, #4]
   b785a:	f7ff ff49 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b785e:	0603      	lsls	r3, r0, #24
   b7860:	7260      	strb	r0, [r4, #9]
   b7862:	d503      	bpl.n	b786c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7864:	3d01      	subs	r5, #1
   b7866:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b786a:	d1f5      	bne.n	b7858 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b786c:	b003      	add	sp, #12
   b786e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7870 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7870:	b570      	push	{r4, r5, r6, lr}
   b7872:	4604      	mov	r4, r0
   b7874:	460d      	mov	r5, r1
   b7876:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7878:	2137      	movs	r1, #55	; 0x37
   b787a:	2200      	movs	r2, #0
   b787c:	f7ff ffc6 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7880:	4632      	mov	r2, r6
   b7882:	4629      	mov	r1, r5
   b7884:	4620      	mov	r0, r4
  }
   b7886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b788a:	f7ff bfbf 	b.w	b780c <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7890 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7894:	2500      	movs	r5, #0
   b7896:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7898:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b789a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b789c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b789e:	4604      	mov	r4, r0
   b78a0:	4690      	mov	r8, r2
   b78a2:	461e      	mov	r6, r3
   b78a4:	f005 fe8e 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b78a8:	4641      	mov	r1, r8
   b78aa:	4607      	mov	r7, r0
   b78ac:	6860      	ldr	r0, [r4, #4]
   b78ae:	f000 f9bb 	bl	b7c28 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b78b2:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b78b4:	4a49      	ldr	r2, [pc, #292]	; (b79dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b78b6:	721d      	strb	r5, [r3, #8]
   b78b8:	2501      	movs	r5, #1
   b78ba:	60da      	str	r2, [r3, #12]
   b78bc:	821d      	strh	r5, [r3, #16]
  spiStart();
   b78be:	4620      	mov	r0, r4
   b78c0:	f7ff ff3c 	bl	b773c <_ZN9SdSpiCard8spiStartEv>
   b78c4:	6863      	ldr	r3, [r4, #4]
   b78c6:	4629      	mov	r1, r5
   b78c8:	7d18      	ldrb	r0, [r3, #20]
   b78ca:	f009 fff8 	bl	c18be <digitalWrite>
   b78ce:	250a      	movs	r5, #10
    spiSend(0XFF);
   b78d0:	6860      	ldr	r0, [r4, #4]
   b78d2:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b78d4:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b78d6:	f7ff ff09 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b78da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b78de:	d1f7      	bne.n	b78d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b78e0:	6863      	ldr	r3, [r4, #4]
   b78e2:	4629      	mov	r1, r5
   b78e4:	7d18      	ldrb	r0, [r3, #20]
   b78e6:	f009 ffea 	bl	c18be <digitalWrite>
  }
   b78ea:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b78ec:	2200      	movs	r2, #0
   b78ee:	4611      	mov	r1, r2
   b78f0:	4620      	mov	r0, r4
   b78f2:	f7ff ff8b 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b78f6:	2801      	cmp	r0, #1
   b78f8:	4680      	mov	r8, r0
   b78fa:	d018      	beq.n	b792e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b78fc:	3d01      	subs	r5, #1
   b78fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7902:	d107      	bne.n	b7914 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7904:	2320      	movs	r3, #32
  spiStop();
   b7906:	4620      	mov	r0, r4
   b7908:	7023      	strb	r3, [r4, #0]
   b790a:	f7ff ff26 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b790e:	2000      	movs	r0, #0
}
   b7910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7914:	6860      	ldr	r0, [r4, #4]
   b7916:	21fd      	movs	r1, #253	; 0xfd
   b7918:	f7ff fee8 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
   b791c:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7920:	6860      	ldr	r0, [r4, #4]
   b7922:	f7ff fee5 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7926:	f1b8 0801 	subs.w	r8, r8, #1
   b792a:	d1f9      	bne.n	b7920 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b792c:	e7de      	b.n	b78ec <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b792e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7932:	2108      	movs	r1, #8
   b7934:	4620      	mov	r0, r4
   b7936:	f7ff ff69 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b793a:	2805      	cmp	r0, #5
   b793c:	d114      	bne.n	b7968 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b793e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7942:	2500      	movs	r5, #0
   b7944:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7946:	462a      	mov	r2, r5
   b7948:	2129      	movs	r1, #41	; 0x29
   b794a:	4620      	mov	r0, r4
   b794c:	f7ff ff90 	bl	b7870 <_ZN9SdSpiCard8cardAcmdEhm>
   b7950:	4602      	mov	r2, r0
   b7952:	b1d8      	cbz	r0, b798c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7958:	4639      	mov	r1, r7
   b795a:	4620      	mov	r0, r4
   b795c:	f7ff feca 	bl	b76f4 <_ZN9SdSpiCard10isTimedOutEtt>
   b7960:	2800      	cmp	r0, #0
   b7962:	d0f0      	beq.n	b7946 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7964:	2343      	movs	r3, #67	; 0x43
   b7966:	e7ce      	b.n	b7906 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7968:	2504      	movs	r5, #4
      m_status = spiReceive();
   b796a:	6860      	ldr	r0, [r4, #4]
   b796c:	f7ff fec0 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7970:	3d01      	subs	r5, #1
   b7972:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7976:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7978:	d1f7      	bne.n	b796a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b797a:	28aa      	cmp	r0, #170	; 0xaa
   b797c:	d104      	bne.n	b7988 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b797e:	2302      	movs	r3, #2
   b7980:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7982:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7986:	e7dd      	b.n	b7944 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7988:	2325      	movs	r3, #37	; 0x25
   b798a:	e7bc      	b.n	b7906 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b798c:	7aa3      	ldrb	r3, [r4, #10]
   b798e:	2b02      	cmp	r3, #2
   b7990:	d118      	bne.n	b79c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7992:	213a      	movs	r1, #58	; 0x3a
   b7994:	4620      	mov	r0, r4
   b7996:	f7ff ff39 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b799a:	b108      	cbz	r0, b79a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b799c:	2337      	movs	r3, #55	; 0x37
   b799e:	e7b2      	b.n	b7906 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b79a0:	6860      	ldr	r0, [r4, #4]
   b79a2:	f7ff fea5 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79a6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b79aa:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b79ac:	bf04      	itt	eq
   b79ae:	2303      	moveq	r3, #3
   b79b0:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b79b2:	6860      	ldr	r0, [r4, #4]
   b79b4:	f7ff fe9c 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79b8:	6860      	ldr	r0, [r4, #4]
   b79ba:	f7ff fe99 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79be:	6860      	ldr	r0, [r4, #4]
   b79c0:	f7ff fe96 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b79c4:	4620      	mov	r0, r4
   b79c6:	f7ff fec8 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b79ca:	6863      	ldr	r3, [r4, #4]
   b79cc:	7930      	ldrb	r0, [r6, #4]
   b79ce:	68b1      	ldr	r1, [r6, #8]
   b79d0:	89b2      	ldrh	r2, [r6, #12]
   b79d2:	821a      	strh	r2, [r3, #16]
   b79d4:	7218      	strb	r0, [r3, #8]
   b79d6:	60d9      	str	r1, [r3, #12]
  return true;
   b79d8:	2001      	movs	r0, #1
   b79da:	e799      	b.n	b7910 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b79dc:	0003d090 	.word	0x0003d090

000b79e0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79e0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b79e2:	7a83      	ldrb	r3, [r0, #10]
   b79e4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b79e6:	bf18      	it	ne
   b79e8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79ea:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b79ec:	460a      	mov	r2, r1
   b79ee:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b79f0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b79f2:	f7ff ff0b 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b79f6:	b130      	cbz	r0, b7a06 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b79f8:	2330      	movs	r3, #48	; 0x30
   b79fa:	7023      	strb	r3, [r4, #0]
  spiStop();
   b79fc:	4620      	mov	r0, r4
   b79fe:	f7ff feac 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a02:	2500      	movs	r5, #0
   b7a04:	e00b      	b.n	b7a1e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7a06:	4629      	mov	r1, r5
   b7a08:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a0c:	4620      	mov	r0, r4
   b7a0e:	f7ff feb7 	bl	b7780 <_ZN9SdSpiCard8readDataEPhj>
   b7a12:	4605      	mov	r5, r0
   b7a14:	2800      	cmp	r0, #0
   b7a16:	d0f1      	beq.n	b79fc <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7a18:	4620      	mov	r0, r4
   b7a1a:	f7ff fe9e 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
}
   b7a1e:	4628      	mov	r0, r5
   b7a20:	bd38      	pop	{r3, r4, r5, pc}

000b7a22 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a22:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7a24:	7a83      	ldrb	r3, [r0, #10]
   b7a26:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a28:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7a2a:	bf18      	it	ne
   b7a2c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7a2e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7a30:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7a32:	f7ff feeb 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b7a36:	b130      	cbz	r0, b7a46 <_ZN9SdSpiCard9readStartEm+0x24>
   b7a38:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7a3a:	4620      	mov	r0, r4
   b7a3c:	7023      	strb	r3, [r4, #0]
   b7a3e:	f7ff fe8c 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a42:	2000      	movs	r0, #0
}
   b7a44:	bd10      	pop	{r4, pc}
  return true;
   b7a46:	2001      	movs	r0, #1
   b7a48:	e7fc      	b.n	b7a44 <_ZN9SdSpiCard9readStartEm+0x22>

000b7a4a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7a4a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7a4c:	2200      	movs	r2, #0
   b7a4e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7a50:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7a52:	f7ff fedb 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b7a56:	b130      	cbz	r0, b7a66 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7a58:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7a5a:	4620      	mov	r0, r4
   b7a5c:	7023      	strb	r3, [r4, #0]
   b7a5e:	f7ff fe7c 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a62:	2000      	movs	r0, #0
}
   b7a64:	bd10      	pop	{r4, pc}
  spiStop();
   b7a66:	4620      	mov	r0, r4
   b7a68:	f7ff fe77 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7a6c:	2001      	movs	r0, #1
   b7a6e:	e7f9      	b.n	b7a64 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7a70 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a72:	4604      	mov	r4, r0
   b7a74:	4616      	mov	r6, r2
   b7a76:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7a78:	f7ff ffd3 	bl	b7a22 <_ZN9SdSpiCard9readStartEm>
   b7a7c:	b168      	cbz	r0, b7a9a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7a7e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7a80:	b2ab      	uxth	r3, r5
   b7a82:	429f      	cmp	r7, r3
   b7a84:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7a88:	d909      	bls.n	b7a9e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7a8e:	4620      	mov	r0, r4
   b7a90:	f7ff fe76 	bl	b7780 <_ZN9SdSpiCard8readDataEPhj>
   b7a94:	3501      	adds	r5, #1
   b7a96:	2800      	cmp	r0, #0
   b7a98:	d1f2      	bne.n	b7a80 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7a9a:	2000      	movs	r0, #0
   b7a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7a9e:	4620      	mov	r0, r4
}
   b7aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7aa4:	f7ff bfd1 	b.w	b7a4a <_ZN9SdSpiCard8readStopEv>

000b7aa8 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7aa8:	b538      	push	{r3, r4, r5, lr}
   b7aaa:	4604      	mov	r4, r0
   b7aac:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7aae:	6840      	ldr	r0, [r0, #4]
   b7ab0:	f7ff fe1c 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7ab8:	6860      	ldr	r0, [r4, #4]
   b7aba:	4629      	mov	r1, r5
   b7abc:	f000 f8e6 	bl	b7c8c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7ac0:	6860      	ldr	r0, [r4, #4]
   b7ac2:	21ff      	movs	r1, #255	; 0xff
   b7ac4:	f7ff fe12 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7ac8:	6860      	ldr	r0, [r4, #4]
   b7aca:	21ff      	movs	r1, #255	; 0xff
   b7acc:	f7ff fe0e 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7ad0:	6860      	ldr	r0, [r4, #4]
   b7ad2:	f7ff fe0d 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7ad6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7ad8:	f000 001f 	and.w	r0, r0, #31
   b7adc:	2805      	cmp	r0, #5
   b7ade:	d006      	beq.n	b7aee <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7ae0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	7023      	strb	r3, [r4, #0]
   b7ae6:	f7ff fe38 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7aea:	2000      	movs	r0, #0
}
   b7aec:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7aee:	2001      	movs	r0, #1
   b7af0:	e7fc      	b.n	b7aec <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7af2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7af2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7af4:	7a83      	ldrb	r3, [r0, #10]
   b7af6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7af8:	bf18      	it	ne
   b7afa:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7afc:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7afe:	460a      	mov	r2, r1
   b7b00:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7b02:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7b04:	f7ff fe82 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b7b08:	4606      	mov	r6, r0
   b7b0a:	b130      	cbz	r0, b7b1a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7b0c:	2332      	movs	r3, #50	; 0x32
   b7b0e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b10:	4620      	mov	r0, r4
   b7b12:	f7ff fe22 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b16:	2500      	movs	r5, #0
   b7b18:	e01f      	b.n	b7b5a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7b1a:	462a      	mov	r2, r5
   b7b1c:	21fe      	movs	r1, #254	; 0xfe
   b7b1e:	4620      	mov	r0, r4
   b7b20:	f7ff ffc2 	bl	b7aa8 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b24:	2800      	cmp	r0, #0
   b7b26:	d0f3      	beq.n	b7b10 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	f7ff fe58 	bl	b77e2 <_ZN9SdSpiCard11waitNotBusyEt>
   b7b32:	4605      	mov	r5, r0
   b7b34:	b908      	cbnz	r0, b7b3a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7b36:	235a      	movs	r3, #90	; 0x5a
   b7b38:	e7e9      	b.n	b7b0e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7b3a:	4632      	mov	r2, r6
   b7b3c:	210d      	movs	r1, #13
   b7b3e:	4620      	mov	r0, r4
   b7b40:	f7ff fe64 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b7b44:	b108      	cbz	r0, b7b4a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7b46:	2329      	movs	r3, #41	; 0x29
   b7b48:	e7e1      	b.n	b7b0e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7b4a:	6860      	ldr	r0, [r4, #4]
   b7b4c:	f7ff fdd0 	bl	b76f0 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7b50:	2800      	cmp	r0, #0
   b7b52:	d1f8      	bne.n	b7b46 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7b54:	4620      	mov	r0, r4
   b7b56:	f7ff fe00 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
}
   b7b5a:	4628      	mov	r0, r5
   b7b5c:	bd70      	pop	{r4, r5, r6, pc}

000b7b5e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b5e:	b513      	push	{r0, r1, r4, lr}
   b7b60:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b62:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7b66:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7b68:	f7ff fe3b 	bl	b77e2 <_ZN9SdSpiCard11waitNotBusyEt>
   b7b6c:	9a01      	ldr	r2, [sp, #4]
   b7b6e:	b930      	cbnz	r0, b7b7e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7b70:	235b      	movs	r3, #91	; 0x5b
   b7b72:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7b74:	4620      	mov	r0, r4
   b7b76:	f7ff fdf0 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b7a:	2000      	movs	r0, #0
   b7b7c:	e005      	b.n	b7b8a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7b7e:	21fc      	movs	r1, #252	; 0xfc
   b7b80:	4620      	mov	r0, r4
   b7b82:	f7ff ff91 	bl	b7aa8 <_ZN9SdSpiCard9writeDataEhPKh>
   b7b86:	2800      	cmp	r0, #0
   b7b88:	d0f4      	beq.n	b7b74 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7b8a:	b002      	add	sp, #8
   b7b8c:	bd10      	pop	{r4, pc}

000b7b8e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b8e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7b90:	7a83      	ldrb	r3, [r0, #10]
   b7b92:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b94:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7b96:	bf18      	it	ne
   b7b98:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7b9a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7b9c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7b9e:	f7ff fe35 	bl	b780c <_ZN9SdSpiCard11cardCommandEhm>
   b7ba2:	b130      	cbz	r0, b7bb2 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7ba4:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	7023      	strb	r3, [r4, #0]
   b7baa:	f7ff fdd6 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7bae:	2000      	movs	r0, #0
}
   b7bb0:	bd10      	pop	{r4, pc}
  return true;
   b7bb2:	2001      	movs	r0, #1
   b7bb4:	e7fc      	b.n	b7bb0 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7bb6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7bb6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bb8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7bbc:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7bbe:	f7ff fe10 	bl	b77e2 <_ZN9SdSpiCard11waitNotBusyEt>
   b7bc2:	4605      	mov	r5, r0
   b7bc4:	b930      	cbnz	r0, b7bd4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7bc6:	2356      	movs	r3, #86	; 0x56
   b7bc8:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7bca:	4620      	mov	r0, r4
   b7bcc:	f7ff fdc5 	bl	b775a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7bd0:	4628      	mov	r0, r5
   b7bd2:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7bd4:	6860      	ldr	r0, [r4, #4]
   b7bd6:	21fd      	movs	r1, #253	; 0xfd
   b7bd8:	f7ff fd88 	bl	b76ec <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7bdc:	e7f5      	b.n	b7bca <_ZN9SdSpiCard9writeStopEv+0x14>

000b7bde <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7be0:	4604      	mov	r4, r0
   b7be2:	4616      	mov	r6, r2
   b7be4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7be6:	f7ff ffd2 	bl	b7b8e <_ZN9SdSpiCard10writeStartEm>
   b7bea:	b170      	cbz	r0, b7c0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bec:	2500      	movs	r5, #0
   b7bee:	42bd      	cmp	r5, r7
   b7bf0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7bf4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bf6:	d004      	beq.n	b7c02 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7bf8:	f7ff ffb1 	bl	b7b5e <_ZN9SdSpiCard9writeDataEPKh>
   b7bfc:	b128      	cbz	r0, b7c0a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7bfe:	3501      	adds	r5, #1
   b7c00:	e7f5      	b.n	b7bee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7c02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7c06:	f7ff bfd6 	b.w	b7bb6 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7c0a:	4620      	mov	r0, r4
   b7c0c:	f7ff fda5 	bl	b775a <_ZN9SdSpiCard7spiStopEv>
}
   b7c10:	2000      	movs	r0, #0
   b7c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c14 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7c14:	4b01      	ldr	r3, [pc, #4]	; (b7c1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7c16:	2201      	movs	r2, #1
   b7c18:	701a      	strb	r2, [r3, #0]
}
   b7c1a:	4770      	bx	lr
   b7c1c:	2003e61c 	.word	0x2003e61c

000b7c20 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7c20:	1d01      	adds	r1, r0, #4
   b7c22:	6800      	ldr	r0, [r0, #0]
   b7c24:	f009 b9da 	b.w	c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7c28 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7c28:	b510      	push	{r4, lr}
   b7c2a:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7c2c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7c2e:	6800      	ldr	r0, [r0, #0]
   b7c30:	f009 f9a7 	bl	c0f82 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7c34:	7d20      	ldrb	r0, [r4, #20]
   b7c36:	2101      	movs	r1, #1
   b7c38:	f009 fe30 	bl	c189c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7c3c:	7d20      	ldrb	r0, [r4, #20]
   b7c3e:	2101      	movs	r1, #1
}
   b7c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7c44:	f009 be3b 	b.w	c18be <digitalWrite>

000b7c48 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7c48:	6800      	ldr	r0, [r0, #0]
   b7c4a:	f009 b9ae 	b.w	c0faa <_ZN8SPIClass14endTransactionEv>

000b7c4e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7c4e:	6800      	ldr	r0, [r0, #0]
   b7c50:	21ff      	movs	r1, #255	; 0xff
   b7c52:	f009 ba31 	b.w	c10b8 <_ZN8SPIClass8transferEh>
	...

000b7c58 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c5a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c5c:	4a07      	ldr	r2, [pc, #28]	; (b7c7c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7c5e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c60:	2500      	movs	r5, #0
   b7c62:	4c07      	ldr	r4, [pc, #28]	; (b7c80 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c64:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c66:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7c68:	460a      	mov	r2, r1
   b7c6a:	4629      	mov	r1, r5
   b7c6c:	f009 fa2a 	bl	c10c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7c70:	7823      	ldrb	r3, [r4, #0]
   b7c72:	2b00      	cmp	r3, #0
   b7c74:	d0fc      	beq.n	b7c70 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7c76:	2000      	movs	r0, #0
   b7c78:	b003      	add	sp, #12
   b7c7a:	bd30      	pop	{r4, r5, pc}
   b7c7c:	000b7c15 	.word	0x000b7c15
   b7c80:	2003e61c 	.word	0x2003e61c

000b7c84 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7c84:	6800      	ldr	r0, [r0, #0]
   b7c86:	f009 ba17 	b.w	c10b8 <_ZN8SPIClass8transferEh>
	...

000b7c8c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c8e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c90:	4a06      	ldr	r2, [pc, #24]	; (b7cac <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7c92:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7c94:	2500      	movs	r5, #0
   b7c96:	4c06      	ldr	r4, [pc, #24]	; (b7cb0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c98:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7c9a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7c9c:	462a      	mov	r2, r5
   b7c9e:	f009 fa11 	bl	c10c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7ca2:	7823      	ldrb	r3, [r4, #0]
   b7ca4:	2b00      	cmp	r3, #0
   b7ca6:	d0fc      	beq.n	b7ca2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7ca8:	b003      	add	sp, #12
   b7caa:	bd30      	pop	{r4, r5, pc}
   b7cac:	000b7c15 	.word	0x000b7c15
   b7cb0:	2003e61c 	.word	0x2003e61c

000b7cb4 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b7cb4:	4770      	bx	lr

000b7cb6 <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b7cb6:	4770      	bx	lr

000b7cb8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b7cb8:	b538      	push	{r3, r4, r5, lr}
   b7cba:	460c      	mov	r4, r1
   b7cbc:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7cbe:	2220      	movs	r2, #32
   b7cc0:	2100      	movs	r1, #0
   b7cc2:	f104 0008 	add.w	r0, r4, #8
   b7cc6:	f00a fd2d 	bl	c2724 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b7cca:	4909      	ldr	r1, [pc, #36]	; (b7cf0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7ccc:	220b      	movs	r2, #11
   b7cce:	4620      	mov	r0, r4
   b7cd0:	f00a fde2 	bl	c2898 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b7cd4:	2301      	movs	r3, #1
   b7cd6:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b7cd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7cda:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7cdc:	2302      	movs	r3, #2
   b7cde:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b7ce0:	4b04      	ldr	r3, [pc, #16]	; (b7cf4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b7ce2:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b7ce4:	4b04      	ldr	r3, [pc, #16]	; (b7cf8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b7ce6:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b7ce8:	4b04      	ldr	r3, [pc, #16]	; (b7cfc <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b7cea:	6223      	str	r3, [r4, #32]
}
   b7cec:	bd38      	pop	{r3, r4, r5, pc}
   b7cee:	bf00      	nop
   b7cf0:	000c5008 	.word	0x000c5008
   b7cf4:	c4c80000 	.word	0xc4c80000
   b7cf8:	44c80000 	.word	0x44c80000
   b7cfc:	3c75c28f 	.word	0x3c75c28f

000b7d00 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b7d00:	b510      	push	{r4, lr}
   b7d02:	2128      	movs	r1, #40	; 0x28
   b7d04:	4604      	mov	r4, r0
   b7d06:	f7fc f9cc 	bl	b40a2 <_ZdlPvj>
   b7d0a:	4620      	mov	r0, r4
   b7d0c:	bd10      	pop	{r4, pc}
	...

000b7d10 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b7d10:	4a03      	ldr	r2, [pc, #12]	; (b7d20 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b7d12:	6002      	str	r2, [r0, #0]
   b7d14:	2200      	movs	r2, #0
   b7d16:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7d1a:	7602      	strb	r2, [r0, #24]
   b7d1c:	4770      	bx	lr
   b7d1e:	bf00      	nop
   b7d20:	000c5028 	.word	0x000c5028

000b7d24 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b7d24:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7d26:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b7d28:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7d2a:	2200      	movs	r2, #0
   b7d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7d30:	2506      	movs	r5, #6
   b7d32:	2228      	movs	r2, #40	; 0x28
   b7d34:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b7d38:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b7d3a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7d3e:	a806      	add	r0, sp, #24
   b7d40:	f005 f87c 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b7d44:	462a      	mov	r2, r5
   b7d46:	a904      	add	r1, sp, #16
   b7d48:	a806      	add	r0, sp, #24
   b7d4a:	f005 f8f5 	bl	bcf38 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b7d4e:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b7d50:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b7d54:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b7d58:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b7d5c:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b7d5e:	2d03      	cmp	r5, #3
   b7d60:	bf98      	it	ls
   b7d62:	4812      	ldrls	r0, [pc, #72]	; (b7dac <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b7d64:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b7d66:	ee07 1a10 	vmov	s14, r1
   b7d6a:	bf9c      	itt	ls
   b7d6c:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b7d70:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b7d74:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b7d76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b7d7a:	bf88      	it	hi
   b7d7c:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b7d80:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b7d84:	ee07 2a10 	vmov	s14, r2
   b7d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7d8c:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7d90:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b7d94:	ee07 3a10 	vmov	s14, r3
   b7d98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7d9c:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7da0:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b7da4:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b7da8:	b00d      	add	sp, #52	; 0x34
   b7daa:	bd30      	pop	{r4, r5, pc}
   b7dac:	000c5010 	.word	0x000c5010

000b7db0 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7db0:	b538      	push	{r3, r4, r5, lr}
   b7db2:	460c      	mov	r4, r1
   b7db4:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b7db6:	2220      	movs	r2, #32
   b7db8:	2100      	movs	r1, #0
   b7dba:	1d20      	adds	r0, r4, #4
   b7dbc:	f00a fcb2 	bl	c2724 <memset>
  event->version = sizeof(sensors_event_t);
   b7dc0:	2324      	movs	r3, #36	; 0x24
   b7dc2:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b7dc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7dc6:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7dc8:	2302      	movs	r3, #2
   b7dca:	60a3      	str	r3, [r4, #8]
   b7dcc:	f005 fbfa 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b7dd0:	6120      	str	r0, [r4, #16]
  read();
   b7dd2:	4628      	mov	r0, r5
   b7dd4:	f7ff ffa6 	bl	b7d24 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b7dd8:	edd5 7a03 	vldr	s15, [r5, #12]
   b7ddc:	ed9f 7a09 	vldr	s14, [pc, #36]	; b7e04 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b7de0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b7de4:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b7de6:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b7dea:	edd5 7a04 	vldr	s15, [r5, #16]
   b7dee:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7df2:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b7df6:	edd5 7a05 	vldr	s15, [r5, #20]
   b7dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7dfe:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b7e02:	bd38      	pop	{r3, r4, r5, pc}
   b7e04:	42c80000 	.word	0x42c80000

000b7e08 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7e08:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7e0a:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7e0c:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7e0e:	2700      	movs	r7, #0
   b7e10:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b7e14:	2320      	movs	r3, #32
   b7e16:	9300      	str	r3, [sp, #0]
   b7e18:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b7e1a:	460e      	mov	r6, r1
   b7e1c:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7e1e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7e22:	462b      	mov	r3, r5
   b7e24:	a808      	add	r0, sp, #32
   b7e26:	f005 f809 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b7e2a:	2305      	movs	r3, #5
   b7e2c:	2202      	movs	r2, #2
   b7e2e:	a908      	add	r1, sp, #32
   b7e30:	a804      	add	r0, sp, #16
   b7e32:	f005 f8df 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b7e36:	4631      	mov	r1, r6
   b7e38:	a804      	add	r0, sp, #16
   b7e3a:	f005 f8ed 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b7e3e:	2323      	movs	r3, #35	; 0x23
   b7e40:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b7e44:	9300      	str	r3, [sp, #0]
   b7e46:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b7e4a:	462b      	mov	r3, r5
   b7e4c:	9501      	str	r5, [sp, #4]
   b7e4e:	a80e      	add	r0, sp, #56	; 0x38
   b7e50:	f004 fff4 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b7e54:	2302      	movs	r3, #2
   b7e56:	461a      	mov	r2, r3
   b7e58:	a90e      	add	r1, sp, #56	; 0x38
   b7e5a:	a806      	add	r0, sp, #24
   b7e5c:	f005 f8ca 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b7e60:	4631      	mov	r1, r6
   b7e62:	a806      	add	r0, sp, #24
   b7e64:	f005 f8d8 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7e68:	b015      	add	sp, #84	; 0x54
   b7e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e6c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7e6c:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7e6e:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7e70:	b08c      	sub	sp, #48	; 0x30
   b7e72:	4606      	mov	r6, r0
   b7e74:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7e76:	d103      	bne.n	b7e80 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7e78:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7e7a:	f7ff ffc5 	bl	b7e08 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b7e7e:	e009      	b.n	b7e94 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b7e80:	2903      	cmp	r1, #3
   b7e82:	d003      	beq.n	b7e8c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b7e84:	2905      	cmp	r1, #5
   b7e86:	d103      	bne.n	b7e90 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b7e88:	2101      	movs	r1, #1
   b7e8a:	e7f6      	b.n	b7e7a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7e8c:	2102      	movs	r1, #2
   b7e8e:	e7f4      	b.n	b7e7a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7e90:	2907      	cmp	r1, #7
   b7e92:	d01b      	beq.n	b7ecc <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b7e94:	200a      	movs	r0, #10
   b7e96:	f005 fef7 	bl	bdc88 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7e9a:	2501      	movs	r5, #1
   b7e9c:	2300      	movs	r3, #0
   b7e9e:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7ea2:	2320      	movs	r3, #32
   b7ea4:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b7ea8:	9300      	str	r3, [sp, #0]
   b7eaa:	9501      	str	r5, [sp, #4]
   b7eac:	462b      	mov	r3, r5
   b7eae:	a806      	add	r0, sp, #24
   b7eb0:	f004 ffc4 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b7eb4:	462b      	mov	r3, r5
   b7eb6:	2204      	movs	r2, #4
   b7eb8:	a906      	add	r1, sp, #24
   b7eba:	a804      	add	r0, sp, #16
   b7ebc:	f005 f89a 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7ec0:	4621      	mov	r1, r4
   b7ec2:	a804      	add	r0, sp, #16
   b7ec4:	f005 f8a8 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7ec8:	b00c      	add	sp, #48	; 0x30
   b7eca:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7ecc:	2100      	movs	r1, #0
   b7ece:	e7d4      	b.n	b7e7a <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b7ed0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7ed0:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7ed2:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7ed4:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7ed6:	2500      	movs	r5, #0
   b7ed8:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7edc:	2222      	movs	r2, #34	; 0x22
   b7ede:	9301      	str	r3, [sp, #4]
   b7ee0:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7ee2:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7ee4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7ee8:	a806      	add	r0, sp, #24
   b7eea:	f004 ffa7 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b7eee:	462b      	mov	r3, r5
   b7ef0:	2202      	movs	r2, #2
   b7ef2:	a906      	add	r1, sp, #24
   b7ef4:	a804      	add	r0, sp, #16
   b7ef6:	f005 f87d 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b7efa:	4621      	mov	r1, r4
   b7efc:	a804      	add	r0, sp, #16
   b7efe:	f005 f88b 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7f02:	b00d      	add	sp, #52	; 0x34
   b7f04:	bd30      	pop	{r4, r5, pc}

000b7f06 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7f06:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f08:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7f0a:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f0c:	2200      	movs	r2, #0
   b7f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7f12:	2221      	movs	r2, #33	; 0x21
   b7f14:	9301      	str	r3, [sp, #4]
   b7f16:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7f18:	460d      	mov	r5, r1
   b7f1a:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f1c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7f20:	a806      	add	r0, sp, #24
   b7f22:	f004 ff8b 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7f26:	2305      	movs	r3, #5
   b7f28:	2202      	movs	r2, #2
   b7f2a:	a906      	add	r1, sp, #24
   b7f2c:	a804      	add	r0, sp, #16
   b7f2e:	f005 f861 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b7f32:	4629      	mov	r1, r5
   b7f34:	a804      	add	r0, sp, #16
   b7f36:	f005 f86f 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b7f3a:	7625      	strb	r5, [r4, #24]
}
   b7f3c:	b00d      	add	sp, #52	; 0x34
   b7f3e:	bd30      	pop	{r4, r5, pc}

000b7f40 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7f40:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f42:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7f44:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f46:	2200      	movs	r2, #0
   b7f48:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7f4c:	2221      	movs	r2, #33	; 0x21
   b7f4e:	9301      	str	r3, [sp, #4]
   b7f50:	9200      	str	r2, [sp, #0]
   b7f52:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7f56:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f58:	a806      	add	r0, sp, #24
   b7f5a:	f004 ff6f 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7f5e:	2305      	movs	r3, #5
   b7f60:	2202      	movs	r2, #2
   b7f62:	a906      	add	r1, sp, #24
   b7f64:	a804      	add	r0, sp, #16
   b7f66:	f005 f845 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b7f6a:	a804      	add	r0, sp, #16
   b7f6c:	f005 f847 	bl	bcffe <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7f70:	b2c0      	uxtb	r0, r0
   b7f72:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b7f74:	b00c      	add	sp, #48	; 0x30
   b7f76:	bd10      	pop	{r4, pc}

000b7f78 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b7f78:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f7a:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7f7c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f7e:	2501      	movs	r5, #1
   b7f80:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7f84:	2321      	movs	r3, #33	; 0x21
   b7f86:	9300      	str	r3, [sp, #0]
   b7f88:	9501      	str	r5, [sp, #4]
   b7f8a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7f8e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7f90:	462b      	mov	r3, r5
   b7f92:	a806      	add	r0, sp, #24
   b7f94:	f004 ff52 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b7f98:	2302      	movs	r3, #2
   b7f9a:	462a      	mov	r2, r5
   b7f9c:	a906      	add	r1, sp, #24
   b7f9e:	a804      	add	r0, sp, #16
   b7fa0:	f005 f828 	bl	bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b7fa4:	4629      	mov	r1, r5
   b7fa6:	a804      	add	r0, sp, #16
   b7fa8:	f005 f836 	bl	bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7fac:	200a      	movs	r0, #10
   b7fae:	f005 fe6b 	bl	bdc88 <delay>
  getRange();
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	f7ff ffc4 	bl	b7f40 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b7fb8:	b00d      	add	sp, #52	; 0x34
   b7fba:	bd30      	pop	{r4, r5, pc}

000b7fbc <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7fbc:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7fbe:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7fc0:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7fc2:	2500      	movs	r5, #0
   b7fc4:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b7fc8:	230f      	movs	r3, #15
   b7fca:	9300      	str	r3, [sp, #0]
   b7fcc:	9601      	str	r6, [sp, #4]
   b7fce:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7fd2:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b7fd4:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7fd6:	a804      	add	r0, sp, #16
   b7fd8:	f004 ff30 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b7fdc:	a804      	add	r0, sp, #16
   b7fde:	f004 ffed 	bl	bcfbc <_ZN23Adafruit_BusIO_Register4readEv>
   b7fe2:	283d      	cmp	r0, #61	; 0x3d
   b7fe4:	d115      	bne.n	b8012 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b7fe6:	4620      	mov	r0, r4
   b7fe8:	f7ff ffc6 	bl	b7f78 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7fec:	2103      	movs	r1, #3
   b7fee:	4620      	mov	r0, r4
   b7ff0:	f7ff ff0a 	bl	b7e08 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b7ff4:	4631      	mov	r1, r6
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff ff38 	bl	b7e6c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b7ffc:	4629      	mov	r1, r5
   b7ffe:	4620      	mov	r0, r4
   b8000:	f7ff ff81 	bl	b7f06 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b8004:	4620      	mov	r0, r4
   b8006:	4629      	mov	r1, r5
   b8008:	f7ff ff62 	bl	b7ed0 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b800c:	4630      	mov	r0, r6
}
   b800e:	b00a      	add	sp, #40	; 0x28
   b8010:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b8012:	4628      	mov	r0, r5
   b8014:	e7fb      	b.n	b800e <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b8016 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b8016:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b8018:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b801a:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b801c:	b95b      	cbnz	r3, b8036 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b801e:	2010      	movs	r0, #16
   b8020:	e9cd 1200 	strd	r1, r2, [sp]
   b8024:	f7fc f837 	bl	b4096 <_Znwj>
   b8028:	4605      	mov	r5, r0
   b802a:	b118      	cbz	r0, b8034 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b802c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8030:	f005 f80b 	bl	bd04a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b8034:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b8036:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b8038:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b803a:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b803c:	2101      	movs	r1, #1
   b803e:	f005 f820 	bl	bd082 <_ZN18Adafruit_I2CDevice5beginEb>
   b8042:	b128      	cbz	r0, b8050 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b8044:	4620      	mov	r0, r4
}
   b8046:	b003      	add	sp, #12
   b8048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b804c:	f7ff bfb6 	b.w	b7fbc <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b8050:	b003      	add	sp, #12
   b8052:	bd30      	pop	{r4, r5, pc}

000b8054 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8054:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b8056:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8058:	b08b      	sub	sp, #44	; 0x2c
   b805a:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b805c:	2500      	movs	r5, #0
   b805e:	2232      	movs	r2, #50	; 0x32
   b8060:	2102      	movs	r1, #2
   b8062:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b8066:	e9cd 2100 	strd	r2, r1, [sp]
   b806a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b806e:	a804      	add	r0, sp, #16
   b8070:	f004 fee4 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b8074:	462a      	mov	r2, r5
   b8076:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b807a:	a804      	add	r0, sp, #16
   b807c:	f004 ff3e 	bl	bcefc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8080:	b00b      	add	sp, #44	; 0x2c
   b8082:	bd30      	pop	{r4, r5, pc}

000b8084 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b8084:	b530      	push	{r4, r5, lr}
   b8086:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8088:	2500      	movs	r5, #0
  value |= latch << 1;
   b808a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b808e:	0064      	lsls	r4, r4, #1
   b8090:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b8094:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b8098:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b809c:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b80a0:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b80a4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b80a8:	2301      	movs	r3, #1
  value |= latch << 1;
   b80aa:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b80ae:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b80b2:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b80b4:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b80b6:	2230      	movs	r2, #48	; 0x30
   b80b8:	9301      	str	r3, [sp, #4]
   b80ba:	9200      	str	r2, [sp, #0]
   b80bc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b80c0:	a804      	add	r0, sp, #16
   b80c2:	f004 febb 	bl	bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b80c6:	462a      	mov	r2, r5
   b80c8:	4621      	mov	r1, r4
   b80ca:	a804      	add	r0, sp, #16
   b80cc:	f004 ff16 	bl	bcefc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b80d0:	b00b      	add	sp, #44	; 0x2c
   b80d2:	bd30      	pop	{r4, r5, pc}

000b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b80d4:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b80d6:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b80d8:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b80da:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b80dc:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b80de:	041b      	lsls	r3, r3, #16
   b80e0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b80e4:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b80e6:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b80e8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b80ec:	bd10      	pop	{r4, pc}

000b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b80ee:	1843      	adds	r3, r0, r1
   b80f0:	5c40      	ldrb	r0, [r0, r1]
   b80f2:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b80f4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b80f8:	4770      	bx	lr

000b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b80fa:	b410      	push	{r4}
{
    if (base == 0) {
   b80fc:	b92a      	cbnz	r2, b810a <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b80fe:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b8100:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b8104:	6892      	ldr	r2, [r2, #8]
   b8106:	b2c9      	uxtb	r1, r1
   b8108:	4710      	bx	r2
}
   b810a:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b810e:	b2d2      	uxtb	r2, r2
   b8110:	f008 be59 	b.w	c0dc6 <_ZN5Print11printNumberEmh>

000b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b8114:	b912      	cbnz	r2, b811c <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b8116:	6803      	ldr	r3, [r0, #0]
   b8118:	689b      	ldr	r3, [r3, #8]
   b811a:	4718      	bx	r3
        return printNumber(val, base) + t;
   b811c:	b2d2      	uxtb	r2, r2
   b811e:	f008 be52 	b.w	c0dc6 <_ZN5Print11printNumberEmh>

000b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b8122:	b510      	push	{r4, lr}
   b8124:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b8126:	f7ff fff5 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b812a:	4620      	mov	r0, r4
    }
   b812c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b8130:	f008 be31 	b.w	c0d96 <_ZN5Print7printlnEv>

000b8134 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b8134:	6803      	ldr	r3, [r0, #0]
   b8136:	b2c9      	uxtb	r1, r1
   b8138:	689b      	ldr	r3, [r3, #8]
   b813a:	4718      	bx	r3

000b813c <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b813c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b8140:	8002      	strh	r2, [r0, #0]
   b8142:	2142      	movs	r1, #66	; 0x42
   b8144:	2200      	movs	r2, #0
   b8146:	b510      	push	{r4, lr}
   b8148:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b814c:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8150:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b8154:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b8158:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b815c:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b8160:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b8164:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b8168:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b816c:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b8170:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b8174:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b8178:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b817c:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8180:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b8184:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b8188:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b818c:	2180      	movs	r1, #128	; 0x80
   b818e:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b8192:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b8196:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b819a:	4925      	ldr	r1, [pc, #148]	; (b8230 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b819c:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b81a0:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b81a4:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b81a8:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b81ac:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b81b0:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b81b4:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b81b8:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b81bc:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b81c0:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b81c4:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b81c8:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b81cc:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b81d0:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b81d4:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b81d8:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b81dc:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b81e0:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b81e4:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b81e8:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b81ec:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b81f0:	4910      	ldr	r1, [pc, #64]	; (b8234 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b81f2:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b81f6:	f640 1164 	movw	r1, #2404	; 0x964
   b81fa:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b81fe:	2158      	movs	r1, #88	; 0x58
   b8200:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8204:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8206:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b820a:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b820e:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b8212:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b8216:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b821a:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b821e:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b8222:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b8226:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b822a:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b822e:	bd10      	pop	{r4, pc}
   b8230:	02020000 	.word	0x02020000
   b8234:	64640200 	.word	0x64640200

000b8238 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b8238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b823a:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b823c:	460d      	mov	r5, r1
   b823e:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b8242:	b9a9      	cbnz	r1, b8270 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b8244:	b1a8      	cbz	r0, b8272 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b8246:	f7fb ff2a 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b824a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b824e:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8252:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b8256:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b825a:	b913      	cbnz	r3, b8262 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b825c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8260:	b123      	cbz	r3, b826c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b8262:	4920      	ldr	r1, [pc, #128]	; (b82e4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b8264:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8268:	f008 fdab 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b826c:	2001      	movs	r0, #1
   b826e:	e011      	b.n	b8294 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b8270:	b9b8      	cbnz	r0, b82a2 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b8272:	4628      	mov	r0, r5
   b8274:	f7fb ff11 	bl	b409a <_Znaj>
   b8278:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b827c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8280:	bb60      	cbnz	r0, b82dc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8282:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b8286:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b828a:	b923      	cbnz	r3, b8296 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b828c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8290:	b90b      	cbnz	r3, b8296 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b8292:	2000      	movs	r0, #0
}
   b8294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b8296:	4914      	ldr	r1, [pc, #80]	; (b82e8 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b8298:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b829c:	f008 fd91 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b82a0:	e7f7      	b.n	b8292 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b82a2:	4608      	mov	r0, r1
   b82a4:	f7fb fef9 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b82a8:	4606      	mov	r6, r0
   b82aa:	b940      	cbnz	r0, b82be <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b82ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b82b0:	b91b      	cbnz	r3, b82ba <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b82b2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b82b6:	2b00      	cmp	r3, #0
   b82b8:	d0eb      	beq.n	b8292 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b82ba:	490c      	ldr	r1, [pc, #48]	; (b82ec <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b82bc:	e7ec      	b.n	b8298 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b82be:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b82c2:	42aa      	cmp	r2, r5
   b82c4:	bf28      	it	cs
   b82c6:	462a      	movcs	r2, r5
   b82c8:	4639      	mov	r1, r7
   b82ca:	f00a fa03 	bl	c26d4 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b82ce:	4638      	mov	r0, r7
   b82d0:	f7fb fee5 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b82d4:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b82d8:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b82dc:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b82e0:	e7c4      	b.n	b826c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b82e2:	bf00      	nop
   b82e4:	000c503c 	.word	0x000c503c
   b82e8:	000c5067 	.word	0x000c5067
   b82ec:	000c5092 	.word	0x000c5092

000b82f0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b82f0:	290d      	cmp	r1, #13
   b82f2:	f000 80cd 	beq.w	b8490 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b82f6:	d809      	bhi.n	b830c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b82f8:	2902      	cmp	r1, #2
   b82fa:	f000 80a7 	beq.w	b844c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b82fe:	2906      	cmp	r1, #6
   b8300:	f000 80be 	beq.w	b8480 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b8304:	2901      	cmp	r1, #1
   b8306:	d016      	beq.n	b8336 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b8308:	2000      	movs	r0, #0
}
   b830a:	4770      	bx	lr
  switch (Class)
   b830c:	2913      	cmp	r1, #19
   b830e:	f000 80d4 	beq.w	b84ba <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b8312:	2928      	cmp	r1, #40	; 0x28
   b8314:	f000 80dc 	beq.w	b84d0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b8318:	2910      	cmp	r1, #16
   b831a:	d1f5      	bne.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b831c:	2a10      	cmp	r2, #16
   b831e:	f000 80c9 	beq.w	b84b4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b8322:	f200 80ba 	bhi.w	b849a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b8326:	2a02      	cmp	r2, #2
   b8328:	f000 80c1 	beq.w	b84ae <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b832c:	2a03      	cmp	r2, #3
   b832e:	d1eb      	bne.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b8330:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b8334:	e066      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8336:	2a26      	cmp	r2, #38	; 0x26
   b8338:	d854      	bhi.n	b83e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b833a:	2a00      	cmp	r2, #0
   b833c:	d0e4      	beq.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b833e:	3a01      	subs	r2, #1
   b8340:	2a25      	cmp	r2, #37	; 0x25
   b8342:	d8e1      	bhi.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b8344:	a301      	add	r3, pc, #4	; (adr r3, b834c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b8346:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b834a:	bf00      	nop
   b834c:	000b8403 	.word	0x000b8403
   b8350:	000b8309 	.word	0x000b8309
   b8354:	000b840d 	.word	0x000b840d
   b8358:	000b8411 	.word	0x000b8411
   b835c:	000b8415 	.word	0x000b8415
   b8360:	000b8309 	.word	0x000b8309
   b8364:	000b8419 	.word	0x000b8419
   b8368:	000b8309 	.word	0x000b8309
   b836c:	000b841d 	.word	0x000b841d
   b8370:	000b8309 	.word	0x000b8309
   b8374:	000b8309 	.word	0x000b8309
   b8378:	000b8309 	.word	0x000b8309
   b837c:	000b8309 	.word	0x000b8309
   b8380:	000b8309 	.word	0x000b8309
   b8384:	000b8309 	.word	0x000b8309
   b8388:	000b8309 	.word	0x000b8309
   b838c:	000b8421 	.word	0x000b8421
   b8390:	000b8425 	.word	0x000b8425
   b8394:	000b8429 	.word	0x000b8429
   b8398:	000b842d 	.word	0x000b842d
   b839c:	000b8309 	.word	0x000b8309
   b83a0:	000b8309 	.word	0x000b8309
   b83a4:	000b8431 	.word	0x000b8431
   b83a8:	000b8309 	.word	0x000b8309
   b83ac:	000b8309 	.word	0x000b8309
   b83b0:	000b8309 	.word	0x000b8309
   b83b4:	000b8309 	.word	0x000b8309
   b83b8:	000b8309 	.word	0x000b8309
   b83bc:	000b8309 	.word	0x000b8309
   b83c0:	000b8309 	.word	0x000b8309
   b83c4:	000b8309 	.word	0x000b8309
   b83c8:	000b8309 	.word	0x000b8309
   b83cc:	000b8435 	.word	0x000b8435
   b83d0:	000b8439 	.word	0x000b8439
   b83d4:	000b8309 	.word	0x000b8309
   b83d8:	000b8309 	.word	0x000b8309
   b83dc:	000b8309 	.word	0x000b8309
   b83e0:	000b843d 	.word	0x000b843d
   b83e4:	2a3c      	cmp	r2, #60	; 0x3c
   b83e6:	d02d      	beq.n	b8444 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b83e8:	d805      	bhi.n	b83f6 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b83ea:	2a35      	cmp	r2, #53	; 0x35
   b83ec:	d028      	beq.n	b8440 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b83ee:	2a3b      	cmp	r2, #59	; 0x3b
   b83f0:	d18a      	bne.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b83f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b83f4:	e006      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b83f6:	2a60      	cmp	r2, #96	; 0x60
   b83f8:	d026      	beq.n	b8448 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b83fa:	2a61      	cmp	r2, #97	; 0x61
   b83fc:	d184      	bne.n	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b83fe:	6980      	ldr	r0, [r0, #24]
   b8400:	e000      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b8402:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b8404:	3800      	subs	r0, #0
   b8406:	bf18      	it	ne
   b8408:	2001      	movne	r0, #1
   b840a:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b840c:	6900      	ldr	r0, [r0, #16]
   b840e:	e7f9      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b8410:	6940      	ldr	r0, [r0, #20]
   b8412:	e7f7      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b8414:	69c0      	ldr	r0, [r0, #28]
   b8416:	e7f5      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b8418:	6a00      	ldr	r0, [r0, #32]
   b841a:	e7f3      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b841c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b841e:	e7f1      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b8420:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b8422:	e7ef      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b8424:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b8426:	e7ed      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b8428:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b842a:	e7eb      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b842c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b842e:	e7e9      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b8430:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b8432:	e7e7      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b8434:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b8436:	e7e5      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b8438:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b843a:	e7e3      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b843c:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b843e:	e7e1      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b8440:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b8442:	e7df      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b8444:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b8446:	e7dd      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8448:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b844a:	e7db      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b844c:	2a34      	cmp	r2, #52	; 0x34
   b844e:	d015      	beq.n	b847c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8450:	d806      	bhi.n	b8460 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b8452:	2a13      	cmp	r2, #19
   b8454:	d00b      	beq.n	b846e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b8456:	2a15      	cmp	r2, #21
   b8458:	f47f af56 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b845c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b845e:	e7d1      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8460:	2a72      	cmp	r2, #114	; 0x72
   b8462:	d006      	beq.n	b8472 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b8464:	2a73      	cmp	r2, #115	; 0x73
   b8466:	f47f af4f 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b846a:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b846c:	e7ca      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b846e:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8470:	e7c8      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8472:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8474:	2b00      	cmp	r3, #0
   b8476:	d13b      	bne.n	b84f0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8478:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b847a:	e7c3      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b847c:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b847e:	e7c1      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8480:	b122      	cbz	r2, b848c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8482:	2a08      	cmp	r2, #8
   b8484:	f47f af40 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8488:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b848a:	e7bb      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b848c:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b848e:	e7b9      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8490:	2a03      	cmp	r2, #3
   b8492:	f47f af39 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b8496:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8498:	e7b4      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b849a:	2a14      	cmp	r2, #20
   b849c:	d005      	beq.n	b84aa <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b849e:	2a15      	cmp	r2, #21
   b84a0:	f47f af32 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b84a4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b84a8:	e7ac      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b84aa:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b84ac:	e7aa      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b84ae:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b84b2:	e7a7      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b84b4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b84b8:	e7a4      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b84ba:	2a60      	cmp	r2, #96	; 0x60
   b84bc:	d005      	beq.n	b84ca <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b84be:	2a80      	cmp	r2, #128	; 0x80
   b84c0:	f47f af22 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b84c4:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b84c8:	e79c      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b84ca:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b84ce:	e799      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b84d0:	2a01      	cmp	r2, #1
   b84d2:	d007      	beq.n	b84e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b84d4:	2a02      	cmp	r2, #2
   b84d6:	d008      	beq.n	b84ea <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b84d8:	2a00      	cmp	r2, #0
   b84da:	f47f af15 	bne.w	b8308 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b84de:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b84e2:	e78f      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b84e4:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b84e8:	e78c      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b84ea:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b84ee:	e789      	b.n	b8404 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b84f0:	2001      	movs	r0, #1
   b84f2:	4770      	bx	lr

000b84f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b84f4:	290d      	cmp	r1, #13
   b84f6:	d035      	beq.n	b8564 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b84f8:	d807      	bhi.n	b850a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b84fa:	2902      	cmp	r1, #2
   b84fc:	d019      	beq.n	b8532 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b84fe:	2906      	cmp	r1, #6
   b8500:	d02a      	beq.n	b8558 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8502:	2901      	cmp	r1, #1
   b8504:	d00d      	beq.n	b8522 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b8506:	2000      	movs	r0, #0
}
   b8508:	4770      	bx	lr
  switch (Class)
   b850a:	2913      	cmp	r1, #19
   b850c:	d02f      	beq.n	b856e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b850e:	2928      	cmp	r1, #40	; 0x28
   b8510:	d034      	beq.n	b857c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8512:	2910      	cmp	r1, #16
   b8514:	d1f7      	bne.n	b8506 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b8516:	3a02      	subs	r2, #2
   b8518:	b2d2      	uxtb	r2, r2
   b851a:	2a13      	cmp	r2, #19
   b851c:	d8f3      	bhi.n	b8506 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b851e:	4b1f      	ldr	r3, [pc, #124]	; (b859c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8520:	e004      	b.n	b852c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b8522:	3a01      	subs	r2, #1
   b8524:	b2d2      	uxtb	r2, r2
   b8526:	2a60      	cmp	r2, #96	; 0x60
   b8528:	d8ed      	bhi.n	b8506 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b852a:	4b1d      	ldr	r3, [pc, #116]	; (b85a0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b852c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8530:	4770      	bx	lr
    switch (ID)
   b8532:	2a34      	cmp	r2, #52	; 0x34
   b8534:	d027      	beq.n	b8586 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b8536:	d807      	bhi.n	b8548 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8538:	2a13      	cmp	r2, #19
   b853a:	d026      	beq.n	b858a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b853c:	2a15      	cmp	r2, #21
   b853e:	bf14      	ite	ne
   b8540:	2000      	movne	r0, #0
   b8542:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b8546:	4770      	bx	lr
   b8548:	2a72      	cmp	r2, #114	; 0x72
   b854a:	d020      	beq.n	b858e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b854c:	2a73      	cmp	r2, #115	; 0x73
   b854e:	bf14      	ite	ne
   b8550:	2000      	movne	r0, #0
   b8552:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b8556:	4770      	bx	lr
    switch (ID)
   b8558:	b1e2      	cbz	r2, b8594 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b855a:	2a08      	cmp	r2, #8
   b855c:	bf14      	ite	ne
   b855e:	2000      	movne	r0, #0
   b8560:	2006      	moveq	r0, #6
   b8562:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b8564:	2a03      	cmp	r2, #3
   b8566:	bf14      	ite	ne
   b8568:	2000      	movne	r0, #0
   b856a:	201c      	moveq	r0, #28
   b856c:	4770      	bx	lr
    switch (ID)
   b856e:	2a60      	cmp	r2, #96	; 0x60
   b8570:	d012      	beq.n	b8598 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8572:	2a80      	cmp	r2, #128	; 0x80
   b8574:	bf14      	ite	ne
   b8576:	2000      	movne	r0, #0
   b8578:	20a4      	moveq	r0, #164	; 0xa4
   b857a:	4770      	bx	lr
    switch (ID)
   b857c:	2a02      	cmp	r2, #2
   b857e:	d8c2      	bhi.n	b8506 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8580:	4b08      	ldr	r3, [pc, #32]	; (b85a4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8582:	5c98      	ldrb	r0, [r3, r2]
   b8584:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b8586:	200c      	movs	r0, #12
   b8588:	4770      	bx	lr
   b858a:	2048      	movs	r0, #72	; 0x48
   b858c:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b858e:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8592:	4770      	bx	lr
   b8594:	2014      	movs	r0, #20
   b8596:	4770      	bx	lr
   b8598:	2008      	movs	r0, #8
   b859a:	4770      	bx	lr
   b859c:	000c5d2a 	.word	0x000c5d2a
   b85a0:	000c5c68 	.word	0x000c5c68
   b85a4:	000c5d52 	.word	0x000c5d52

000b85a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b85a8:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b85aa:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b85ae:	07ca      	lsls	r2, r1, #31
   b85b0:	d415      	bmi.n	b85de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b85b2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b85b6:	4b59      	ldr	r3, [pc, #356]	; (b871c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b85b8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b85bc:	429a      	cmp	r2, r3
   b85be:	d101      	bne.n	b85c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b85c0:	078b      	lsls	r3, r1, #30
   b85c2:	d40c      	bmi.n	b85de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b85c4:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b85c8:	2b47      	cmp	r3, #71	; 0x47
   b85ca:	d174      	bne.n	b86b6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b85cc:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b85d0:	f245 1441 	movw	r4, #20801	; 0x5141
   b85d4:	42a3      	cmp	r3, r4
   b85d6:	d104      	bne.n	b85e2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b85d8:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b85dc:	d06b      	beq.n	b86b6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b85de:	2001      	movs	r0, #1
   b85e0:	e070      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b85e2:	f245 1442 	movw	r4, #20802	; 0x5142
   b85e6:	42a3      	cmp	r3, r4
   b85e8:	d102      	bne.n	b85f0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b85ea:	f011 0f08 	tst.w	r1, #8
   b85ee:	e7f5      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b85f0:	f245 3442 	movw	r4, #21314	; 0x5342
   b85f4:	42a3      	cmp	r3, r4
   b85f6:	d102      	bne.n	b85fe <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b85f8:	f011 0f10 	tst.w	r1, #16
   b85fc:	e7ee      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b85fe:	f244 1447 	movw	r4, #16711	; 0x4147
   b8602:	42a3      	cmp	r3, r4
   b8604:	d102      	bne.n	b860c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b8606:	f011 0f20 	tst.w	r1, #32
   b860a:	e7e7      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b860c:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8610:	42a3      	cmp	r3, r4
   b8612:	d102      	bne.n	b861a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8614:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8618:	e7e0      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b861a:	f245 144c 	movw	r4, #20812	; 0x514c
   b861e:	42a3      	cmp	r3, r4
   b8620:	d102      	bne.n	b8628 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b8622:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8626:	e7d9      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8628:	f245 114e 	movw	r1, #20814	; 0x514e
   b862c:	428b      	cmp	r3, r1
   b862e:	d104      	bne.n	b863a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8630:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8634:	f013 0f01 	tst.w	r3, #1
   b8638:	e7d0      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b863a:	f245 314e 	movw	r1, #21326	; 0x534e
   b863e:	428b      	cmp	r3, r1
   b8640:	d104      	bne.n	b864c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b8642:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8646:	f013 0f02 	tst.w	r3, #2
   b864a:	e7c7      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b864c:	f245 1150 	movw	r1, #20816	; 0x5150
   b8650:	428b      	cmp	r3, r1
   b8652:	d104      	bne.n	b865e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b8654:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8658:	f013 0f04 	tst.w	r3, #4
   b865c:	e7be      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b865e:	f245 1151 	movw	r1, #20817	; 0x5151
   b8662:	428b      	cmp	r3, r1
   b8664:	d104      	bne.n	b8670 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b8666:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b866a:	f013 0f08 	tst.w	r3, #8
   b866e:	e7b5      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8670:	f245 3152 	movw	r1, #21330	; 0x5352
   b8674:	428b      	cmp	r3, r1
   b8676:	d104      	bne.n	b8682 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8678:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b867c:	f013 0f10 	tst.w	r3, #16
   b8680:	e7ac      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8682:	f244 1153 	movw	r1, #16723	; 0x4153
   b8686:	428b      	cmp	r3, r1
   b8688:	d104      	bne.n	b8694 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b868a:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b868e:	f013 0f20 	tst.w	r3, #32
   b8692:	e7a3      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8694:	f245 4153 	movw	r1, #21587	; 0x5453
   b8698:	428b      	cmp	r3, r1
   b869a:	d104      	bne.n	b86a6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b869c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b86a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   b86a4:	e79a      	b.n	b85dc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b86a6:	f245 6153 	movw	r1, #22099	; 0x5653
   b86aa:	428b      	cmp	r3, r1
   b86ac:	d103      	bne.n	b86b6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b86ae:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b86b2:	2b00      	cmp	r3, #0
   b86b4:	db93      	blt.n	b85de <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b86b6:	4b1a      	ldr	r3, [pc, #104]	; (b8720 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b86b8:	429a      	cmp	r2, r3
   b86ba:	d104      	bne.n	b86c6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b86bc:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b86c0:	f000 0001 	and.w	r0, r0, #1
}
   b86c4:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b86c6:	4b17      	ldr	r3, [pc, #92]	; (b8724 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b86c8:	429a      	cmp	r2, r3
   b86ca:	d104      	bne.n	b86d6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b86cc:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b86d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b86d4:	e7f6      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b86d6:	4b14      	ldr	r3, [pc, #80]	; (b8728 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b86d8:	429a      	cmp	r2, r3
   b86da:	d104      	bne.n	b86e6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b86dc:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b86e0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b86e4:	e7ee      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b86e6:	4b11      	ldr	r3, [pc, #68]	; (b872c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b86e8:	429a      	cmp	r2, r3
   b86ea:	d104      	bne.n	b86f6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b86ec:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b86f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b86f4:	e7e6      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b86f6:	4b0e      	ldr	r3, [pc, #56]	; (b8730 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b86f8:	429a      	cmp	r2, r3
   b86fa:	d104      	bne.n	b8706 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b86fc:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8700:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8704:	e7de      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b8706:	4b0b      	ldr	r3, [pc, #44]	; (b8734 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8708:	429a      	cmp	r2, r3
   b870a:	d104      	bne.n	b8716 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b870c:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8710:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8714:	e7d6      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b8716:	2000      	movs	r0, #0
   b8718:	e7d4      	b.n	b86c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b871a:	bf00      	nop
   b871c:	4d544400 	.word	0x4d544400
   b8720:	4d4c5200 	.word	0x4d4c5200
   b8724:	434d5200 	.word	0x434d5200
   b8728:	54585400 	.word	0x54585400
   b872c:	574c5600 	.word	0x574c5600
   b8730:	47545600 	.word	0x47545600
   b8734:	41445a00 	.word	0x41445a00

000b8738 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8738:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b873c:	2b2a      	cmp	r3, #42	; 0x2a
   b873e:	d157      	bne.n	b87f0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8740:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8744:	2b47      	cmp	r3, #71	; 0x47
   b8746:	d153      	bne.n	b87f0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8748:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b874c:	4a29      	ldr	r2, [pc, #164]	; (b87f4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b874e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8752:	4293      	cmp	r3, r2
   b8754:	d011      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b8756:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b875a:	2a47      	cmp	r2, #71	; 0x47
   b875c:	d11a      	bne.n	b8794 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b875e:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8762:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b8766:	3941      	subs	r1, #65	; 0x41
   b8768:	b289      	uxth	r1, r1
   b876a:	2910      	cmp	r1, #16
   b876c:	d907      	bls.n	b877e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b876e:	f022 0110 	bic.w	r1, r2, #16
   b8772:	f245 3042 	movw	r0, #21314	; 0x5342
   b8776:	4281      	cmp	r1, r0
   b8778:	d129      	bne.n	b87ce <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b877a:	2001      	movs	r0, #1
}
   b877c:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b877e:	481e      	ldr	r0, [pc, #120]	; (b87f8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8780:	fa20 f101 	lsr.w	r1, r0, r1
   b8784:	07c9      	lsls	r1, r1, #31
   b8786:	d4f8      	bmi.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b878c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8790:	428a      	cmp	r2, r1
   b8792:	d0f2      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8794:	4a19      	ldr	r2, [pc, #100]	; (b87fc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8796:	4293      	cmp	r3, r2
   b8798:	d0ef      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b879a:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b879e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b87a2:	4293      	cmp	r3, r2
   b87a4:	d0e9      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b87a6:	4a16      	ldr	r2, [pc, #88]	; (b8800 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b87a8:	4293      	cmp	r3, r2
   b87aa:	d0e6      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b87ac:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b87b0:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b87b4:	4293      	cmp	r3, r2
   b87b6:	d0e0      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b87b8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b87bc:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b87c0:	4293      	cmp	r3, r2
   b87c2:	d0da      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b87c4:	480f      	ldr	r0, [pc, #60]	; (b8804 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b87c6:	1a1b      	subs	r3, r3, r0
   b87c8:	4258      	negs	r0, r3
   b87ca:	4158      	adcs	r0, r3
   b87cc:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b87ce:	f244 1147 	movw	r1, #16711	; 0x4147
   b87d2:	428a      	cmp	r2, r1
   b87d4:	d0d1      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b87d6:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b87da:	428a      	cmp	r2, r1
   b87dc:	d0cd      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b87de:	f245 314e 	movw	r1, #21326	; 0x534e
   b87e2:	428a      	cmp	r2, r1
   b87e4:	d0c9      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b87e6:	f244 1153 	movw	r1, #16723	; 0x4153
   b87ea:	428a      	cmp	r2, r1
   b87ec:	d0c5      	beq.n	b877a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b87ee:	e7cb      	b.n	b8788 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b87f0:	2000      	movs	r0, #0
   b87f2:	4770      	bx	lr
   b87f4:	4d544400 	.word	0x4d544400
   b87f8:	0001a803 	.word	0x0001a803
   b87fc:	4d4c5200 	.word	0x4d4c5200
   b8800:	54585400 	.word	0x54585400
   b8804:	41445a00 	.word	0x41445a00

000b8808 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8808:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b880a:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b880e:	07ca      	lsls	r2, r1, #31
   b8810:	d415      	bmi.n	b883e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8812:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8816:	4b59      	ldr	r3, [pc, #356]	; (b897c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8818:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b881c:	429a      	cmp	r2, r3
   b881e:	d101      	bne.n	b8824 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8820:	078b      	lsls	r3, r1, #30
   b8822:	d40c      	bmi.n	b883e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8824:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8828:	2b47      	cmp	r3, #71	; 0x47
   b882a:	d174      	bne.n	b8916 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b882c:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8830:	f245 1441 	movw	r4, #20801	; 0x5141
   b8834:	42a3      	cmp	r3, r4
   b8836:	d104      	bne.n	b8842 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8838:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b883c:	d06b      	beq.n	b8916 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b883e:	2001      	movs	r0, #1
   b8840:	e070      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8842:	f245 1442 	movw	r4, #20802	; 0x5142
   b8846:	42a3      	cmp	r3, r4
   b8848:	d102      	bne.n	b8850 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b884a:	f011 0f08 	tst.w	r1, #8
   b884e:	e7f5      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8850:	f245 3442 	movw	r4, #21314	; 0x5342
   b8854:	42a3      	cmp	r3, r4
   b8856:	d102      	bne.n	b885e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8858:	f011 0f10 	tst.w	r1, #16
   b885c:	e7ee      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b885e:	f244 1447 	movw	r4, #16711	; 0x4147
   b8862:	42a3      	cmp	r3, r4
   b8864:	d102      	bne.n	b886c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8866:	f011 0f20 	tst.w	r1, #32
   b886a:	e7e7      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b886c:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8870:	42a3      	cmp	r3, r4
   b8872:	d102      	bne.n	b887a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8874:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8878:	e7e0      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b887a:	f245 144c 	movw	r4, #20812	; 0x514c
   b887e:	42a3      	cmp	r3, r4
   b8880:	d102      	bne.n	b8888 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8882:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8886:	e7d9      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8888:	f245 114e 	movw	r1, #20814	; 0x514e
   b888c:	428b      	cmp	r3, r1
   b888e:	d104      	bne.n	b889a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8890:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8894:	f013 0f01 	tst.w	r3, #1
   b8898:	e7d0      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b889a:	f245 314e 	movw	r1, #21326	; 0x534e
   b889e:	428b      	cmp	r3, r1
   b88a0:	d104      	bne.n	b88ac <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b88a2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b88a6:	f013 0f02 	tst.w	r3, #2
   b88aa:	e7c7      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b88ac:	f245 1150 	movw	r1, #20816	; 0x5150
   b88b0:	428b      	cmp	r3, r1
   b88b2:	d104      	bne.n	b88be <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b88b4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b88b8:	f013 0f04 	tst.w	r3, #4
   b88bc:	e7be      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b88be:	f245 1151 	movw	r1, #20817	; 0x5151
   b88c2:	428b      	cmp	r3, r1
   b88c4:	d104      	bne.n	b88d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b88c6:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b88ca:	f013 0f08 	tst.w	r3, #8
   b88ce:	e7b5      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b88d0:	f245 3152 	movw	r1, #21330	; 0x5352
   b88d4:	428b      	cmp	r3, r1
   b88d6:	d104      	bne.n	b88e2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b88d8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b88dc:	f013 0f10 	tst.w	r3, #16
   b88e0:	e7ac      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b88e2:	f244 1153 	movw	r1, #16723	; 0x4153
   b88e6:	428b      	cmp	r3, r1
   b88e8:	d104      	bne.n	b88f4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b88ea:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b88ee:	f013 0f20 	tst.w	r3, #32
   b88f2:	e7a3      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b88f4:	f245 4153 	movw	r1, #21587	; 0x5453
   b88f8:	428b      	cmp	r3, r1
   b88fa:	d104      	bne.n	b8906 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b88fc:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8900:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8904:	e79a      	b.n	b883c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8906:	f245 6153 	movw	r1, #22099	; 0x5653
   b890a:	428b      	cmp	r3, r1
   b890c:	d103      	bne.n	b8916 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b890e:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8912:	2b00      	cmp	r3, #0
   b8914:	db93      	blt.n	b883e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8916:	4b1a      	ldr	r3, [pc, #104]	; (b8980 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8918:	429a      	cmp	r2, r3
   b891a:	d104      	bne.n	b8926 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b891c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8920:	f000 0001 	and.w	r0, r0, #1
}
   b8924:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8926:	4b17      	ldr	r3, [pc, #92]	; (b8984 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8928:	429a      	cmp	r2, r3
   b892a:	d104      	bne.n	b8936 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b892c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8930:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8934:	e7f6      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8936:	4b14      	ldr	r3, [pc, #80]	; (b8988 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8938:	429a      	cmp	r2, r3
   b893a:	d104      	bne.n	b8946 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b893c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8940:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8944:	e7ee      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8946:	4b11      	ldr	r3, [pc, #68]	; (b898c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8948:	429a      	cmp	r2, r3
   b894a:	d104      	bne.n	b8956 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b894c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8950:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8954:	e7e6      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8956:	4b0e      	ldr	r3, [pc, #56]	; (b8990 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8958:	429a      	cmp	r2, r3
   b895a:	d104      	bne.n	b8966 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b895c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8960:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8964:	e7de      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8966:	4b0b      	ldr	r3, [pc, #44]	; (b8994 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8968:	429a      	cmp	r2, r3
   b896a:	d104      	bne.n	b8976 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b896c:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8970:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8974:	e7d6      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8976:	2000      	movs	r0, #0
   b8978:	e7d4      	b.n	b8924 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b897a:	bf00      	nop
   b897c:	4d544400 	.word	0x4d544400
   b8980:	4d4c5200 	.word	0x4d4c5200
   b8984:	434d5200 	.word	0x434d5200
   b8988:	54585400 	.word	0x54585400
   b898c:	574c5600 	.word	0x574c5600
   b8990:	47545600 	.word	0x47545600
   b8994:	41445a00 	.word	0x41445a00

000b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8998:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b899c:	b110      	cbz	r0, b89a4 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b899e:	6803      	ldr	r3, [r0, #0]
   b89a0:	689b      	ldr	r3, [r3, #8]
   b89a2:	4718      	bx	r3
}
   b89a4:	4770      	bx	lr
	...

000b89a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b89a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b89aa:	4b3d      	ldr	r3, [pc, #244]	; (b8aa0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b89ac:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89ae:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b89b2:	6818      	ldr	r0, [r3, #0]
   b89b4:	9000      	str	r0, [sp, #0]
   b89b6:	889b      	ldrh	r3, [r3, #4]
   b89b8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89bc:	2205      	movs	r2, #5
   b89be:	4629      	mov	r1, r5
   b89c0:	4668      	mov	r0, sp
   b89c2:	f009 fe77 	bl	c26b4 <memcmp>
   b89c6:	b928      	cbnz	r0, b89d4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b89c8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b89cc:	b113      	cbz	r3, b89d4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b89ce:	2001      	movs	r0, #1
}
   b89d0:	b003      	add	sp, #12
   b89d2:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b89d4:	4933      	ldr	r1, [pc, #204]	; (b8aa4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b89d6:	4668      	mov	r0, sp
   b89d8:	f009 ff0a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89dc:	2205      	movs	r2, #5
   b89de:	4629      	mov	r1, r5
   b89e0:	4668      	mov	r0, sp
   b89e2:	f009 fe67 	bl	c26b4 <memcmp>
   b89e6:	b918      	cbnz	r0, b89f0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b89e8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b89ec:	2b00      	cmp	r3, #0
   b89ee:	d1ee      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b89f0:	492d      	ldr	r1, [pc, #180]	; (b8aa8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b89f2:	4668      	mov	r0, sp
   b89f4:	f009 fefc 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89f8:	2205      	movs	r2, #5
   b89fa:	4629      	mov	r1, r5
   b89fc:	4668      	mov	r0, sp
   b89fe:	f009 fe59 	bl	c26b4 <memcmp>
   b8a02:	b918      	cbnz	r0, b8a0c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8a04:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8a08:	2b00      	cmp	r3, #0
   b8a0a:	d1e0      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8a0c:	4927      	ldr	r1, [pc, #156]	; (b8aac <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8a0e:	4668      	mov	r0, sp
   b8a10:	f009 feee 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a14:	2205      	movs	r2, #5
   b8a16:	4629      	mov	r1, r5
   b8a18:	4668      	mov	r0, sp
   b8a1a:	f009 fe4b 	bl	c26b4 <memcmp>
   b8a1e:	b918      	cbnz	r0, b8a28 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8a20:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8a24:	2b00      	cmp	r3, #0
   b8a26:	d1d2      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8a28:	4921      	ldr	r1, [pc, #132]	; (b8ab0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8a2a:	4668      	mov	r0, sp
   b8a2c:	f009 fee0 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a30:	2205      	movs	r2, #5
   b8a32:	4629      	mov	r1, r5
   b8a34:	4668      	mov	r0, sp
   b8a36:	f009 fe3d 	bl	c26b4 <memcmp>
   b8a3a:	b918      	cbnz	r0, b8a44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8a3c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8a40:	2b00      	cmp	r3, #0
   b8a42:	d1c4      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8a44:	491b      	ldr	r1, [pc, #108]	; (b8ab4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8a46:	4668      	mov	r0, sp
   b8a48:	f009 fed2 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a4c:	2205      	movs	r2, #5
   b8a4e:	4629      	mov	r1, r5
   b8a50:	4668      	mov	r0, sp
   b8a52:	f009 fe2f 	bl	c26b4 <memcmp>
   b8a56:	b918      	cbnz	r0, b8a60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b8a58:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8a5c:	2b00      	cmp	r3, #0
   b8a5e:	d1b6      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b8a60:	4915      	ldr	r1, [pc, #84]	; (b8ab8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b8a62:	4668      	mov	r0, sp
   b8a64:	f009 fec4 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a68:	2205      	movs	r2, #5
   b8a6a:	4629      	mov	r1, r5
   b8a6c:	4668      	mov	r0, sp
   b8a6e:	f009 fe21 	bl	c26b4 <memcmp>
   b8a72:	b918      	cbnz	r0, b8a7c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8a74:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8a78:	2b00      	cmp	r3, #0
   b8a7a:	d1a8      	bne.n	b89ce <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8a7c:	490f      	ldr	r1, [pc, #60]	; (b8abc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8a7e:	4668      	mov	r0, sp
   b8a80:	f009 feb6 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a84:	2205      	movs	r2, #5
   b8a86:	4629      	mov	r1, r5
   b8a88:	4668      	mov	r0, sp
   b8a8a:	f009 fe13 	bl	c26b4 <memcmp>
   b8a8e:	b928      	cbnz	r0, b8a9c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8a90:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8a94:	3800      	subs	r0, #0
   b8a96:	bf18      	it	ne
   b8a98:	2001      	movne	r0, #1
   b8a9a:	e799      	b.n	b89d0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8a9c:	2000      	movs	r0, #0
   b8a9e:	e797      	b.n	b89d0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8aa0:	000c50e8 	.word	0x000c50e8
   b8aa4:	000c50be 	.word	0x000c50be
   b8aa8:	000c50c4 	.word	0x000c50c4
   b8aac:	000c50ca 	.word	0x000c50ca
   b8ab0:	000c50d0 	.word	0x000c50d0
   b8ab4:	000c50d6 	.word	0x000c50d6
   b8ab8:	000c50dc 	.word	0x000c50dc
   b8abc:	000c50e2 	.word	0x000c50e2

000b8ac0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8ac2:	4b62      	ldr	r3, [pc, #392]	; (b8c4c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8ac4:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ac6:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8aca:	6818      	ldr	r0, [r3, #0]
   b8acc:	9000      	str	r0, [sp, #0]
   b8ace:	889b      	ldrh	r3, [r3, #4]
   b8ad0:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ad4:	2205      	movs	r2, #5
   b8ad6:	4629      	mov	r1, r5
   b8ad8:	4668      	mov	r0, sp
   b8ada:	f009 fdeb 	bl	c26b4 <memcmp>
   b8ade:	b978      	cbnz	r0, b8b00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8ae0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8ae4:	b163      	cbz	r3, b8b00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b8ae6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8aea:	b14a      	cbz	r2, b8b00 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8aec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8af0:	2a00      	cmp	r2, #0
   b8af2:	f040 80a3 	bne.w	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8af6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8afa:	2b00      	cmp	r3, #0
   b8afc:	f040 809e 	bne.w	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8b00:	4953      	ldr	r1, [pc, #332]	; (b8c50 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8b02:	4668      	mov	r0, sp
   b8b04:	f009 fe74 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b08:	2205      	movs	r2, #5
   b8b0a:	4629      	mov	r1, r5
   b8b0c:	4668      	mov	r0, sp
   b8b0e:	f009 fdd1 	bl	c26b4 <memcmp>
   b8b12:	b978      	cbnz	r0, b8b34 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b8b14:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8b18:	b163      	cbz	r3, b8b34 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b8b1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8b1e:	b14a      	cbz	r2, b8b34 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b8b20:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8b24:	2a00      	cmp	r2, #0
   b8b26:	f040 8089 	bne.w	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8b2a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8b2e:	2b00      	cmp	r3, #0
   b8b30:	f040 8084 	bne.w	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b8b34:	4947      	ldr	r1, [pc, #284]	; (b8c54 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b8b36:	4668      	mov	r0, sp
   b8b38:	f009 fe5a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b3c:	2205      	movs	r2, #5
   b8b3e:	4629      	mov	r1, r5
   b8b40:	4668      	mov	r0, sp
   b8b42:	f009 fdb7 	bl	c26b4 <memcmp>
   b8b46:	b968      	cbnz	r0, b8b64 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b8b48:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8b4c:	b153      	cbz	r3, b8b64 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b8b4e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8b52:	b13a      	cbz	r2, b8b64 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b8b54:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8b58:	2a00      	cmp	r2, #0
   b8b5a:	d16f      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8b5c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8b60:	2b00      	cmp	r3, #0
   b8b62:	d16b      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b8b64:	493c      	ldr	r1, [pc, #240]	; (b8c58 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b8b66:	4668      	mov	r0, sp
   b8b68:	f009 fe42 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b6c:	2205      	movs	r2, #5
   b8b6e:	4629      	mov	r1, r5
   b8b70:	4668      	mov	r0, sp
   b8b72:	f009 fd9f 	bl	c26b4 <memcmp>
   b8b76:	b968      	cbnz	r0, b8b94 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b8b78:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8b7c:	b153      	cbz	r3, b8b94 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8b7e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8b82:	b13a      	cbz	r2, b8b94 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8b84:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8b88:	2a00      	cmp	r2, #0
   b8b8a:	d157      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8b8c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8b90:	2b00      	cmp	r3, #0
   b8b92:	d153      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8b94:	4931      	ldr	r1, [pc, #196]	; (b8c5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b8b96:	4668      	mov	r0, sp
   b8b98:	f009 fe2a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b9c:	2205      	movs	r2, #5
   b8b9e:	4629      	mov	r1, r5
   b8ba0:	4668      	mov	r0, sp
   b8ba2:	f009 fd87 	bl	c26b4 <memcmp>
   b8ba6:	b968      	cbnz	r0, b8bc4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b8ba8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8bac:	b153      	cbz	r3, b8bc4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8bae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8bb2:	b13a      	cbz	r2, b8bc4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8bb4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8bb8:	2a00      	cmp	r2, #0
   b8bba:	d13f      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8bbc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8bc0:	2b00      	cmp	r3, #0
   b8bc2:	d13b      	bne.n	b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8bc4:	4926      	ldr	r1, [pc, #152]	; (b8c60 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b8bc6:	4668      	mov	r0, sp
   b8bc8:	f009 fe12 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bcc:	2205      	movs	r2, #5
   b8bce:	4629      	mov	r1, r5
   b8bd0:	4668      	mov	r0, sp
   b8bd2:	f009 fd6f 	bl	c26b4 <memcmp>
   b8bd6:	b958      	cbnz	r0, b8bf0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b8bd8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8bdc:	b143      	cbz	r3, b8bf0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8bde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8be2:	b12a      	cbz	r2, b8bf0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8be4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8be8:	bb42      	cbnz	r2, b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8bea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8bee:	bb2b      	cbnz	r3, b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8bf0:	491c      	ldr	r1, [pc, #112]	; (b8c64 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b8bf2:	4668      	mov	r0, sp
   b8bf4:	f009 fdfc 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bf8:	2205      	movs	r2, #5
   b8bfa:	4629      	mov	r1, r5
   b8bfc:	4668      	mov	r0, sp
   b8bfe:	f009 fd59 	bl	c26b4 <memcmp>
   b8c02:	b940      	cbnz	r0, b8c16 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b8c04:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b8c08:	b12b      	cbz	r3, b8c16 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b8c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b8c0c:	b11a      	cbz	r2, b8c16 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b8c0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8c10:	b9a2      	cbnz	r2, b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8c14:	b993      	cbnz	r3, b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b8c16:	4914      	ldr	r1, [pc, #80]	; (b8c68 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b8c18:	4668      	mov	r0, sp
   b8c1a:	f009 fde9 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c1e:	2205      	movs	r2, #5
   b8c20:	4629      	mov	r1, r5
   b8c22:	4668      	mov	r0, sp
   b8c24:	f009 fd46 	bl	c26b4 <memcmp>
   b8c28:	b958      	cbnz	r0, b8c42 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b8c2a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8c2e:	b153      	cbz	r3, b8c46 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b8c30:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8c32:	b120      	cbz	r0, b8c3e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b8c34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b8c36:	b90a      	cbnz	r2, b8c3c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8c38:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b8c3a:	b100      	cbz	r0, b8c3e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b8c3c:	2001      	movs	r0, #1
}
   b8c3e:	b003      	add	sp, #12
   b8c40:	bd30      	pop	{r4, r5, pc}
  return false;
   b8c42:	2000      	movs	r0, #0
   b8c44:	e7fb      	b.n	b8c3e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8c46:	4618      	mov	r0, r3
   b8c48:	e7f9      	b.n	b8c3e <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b8c4a:	bf00      	nop
   b8c4c:	000c50e8 	.word	0x000c50e8
   b8c50:	000c50be 	.word	0x000c50be
   b8c54:	000c50c4 	.word	0x000c50c4
   b8c58:	000c50ca 	.word	0x000c50ca
   b8c5c:	000c50d0 	.word	0x000c50d0
   b8c60:	000c50d6 	.word	0x000c50d6
   b8c64:	000c50dc 	.word	0x000c50dc
   b8c68:	000c50e2 	.word	0x000c50e2

000b8c6c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c6e:	4b38      	ldr	r3, [pc, #224]	; (b8d50 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8c70:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c72:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c76:	6818      	ldr	r0, [r3, #0]
   b8c78:	9000      	str	r0, [sp, #0]
   b8c7a:	889b      	ldrh	r3, [r3, #4]
   b8c7c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c80:	2205      	movs	r2, #5
   b8c82:	4629      	mov	r1, r5
   b8c84:	4668      	mov	r0, sp
   b8c86:	f009 fd15 	bl	c26b4 <memcmp>
   b8c8a:	b920      	cbnz	r0, b8c96 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8c8c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8c90:	3001      	adds	r0, #1
}
   b8c92:	b003      	add	sp, #12
   b8c94:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c96:	492f      	ldr	r1, [pc, #188]	; (b8d54 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b8c98:	4668      	mov	r0, sp
   b8c9a:	f009 fda9 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c9e:	2205      	movs	r2, #5
   b8ca0:	4629      	mov	r1, r5
   b8ca2:	4668      	mov	r0, sp
   b8ca4:	f009 fd06 	bl	c26b4 <memcmp>
   b8ca8:	b910      	cbnz	r0, b8cb0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b8caa:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8cae:	e7ef      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8cb0:	4929      	ldr	r1, [pc, #164]	; (b8d58 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8cb2:	4668      	mov	r0, sp
   b8cb4:	f009 fd9c 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cb8:	2205      	movs	r2, #5
   b8cba:	4629      	mov	r1, r5
   b8cbc:	4668      	mov	r0, sp
   b8cbe:	f009 fcf9 	bl	c26b4 <memcmp>
   b8cc2:	b910      	cbnz	r0, b8cca <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8cc4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8cc8:	e7e2      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8cca:	4924      	ldr	r1, [pc, #144]	; (b8d5c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8ccc:	4668      	mov	r0, sp
   b8cce:	f009 fd8f 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cd2:	2205      	movs	r2, #5
   b8cd4:	4629      	mov	r1, r5
   b8cd6:	4668      	mov	r0, sp
   b8cd8:	f009 fcec 	bl	c26b4 <memcmp>
   b8cdc:	b910      	cbnz	r0, b8ce4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8cde:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8ce2:	e7d5      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8ce4:	491e      	ldr	r1, [pc, #120]	; (b8d60 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b8ce6:	4668      	mov	r0, sp
   b8ce8:	f009 fd82 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cec:	2205      	movs	r2, #5
   b8cee:	4629      	mov	r1, r5
   b8cf0:	4668      	mov	r0, sp
   b8cf2:	f009 fcdf 	bl	c26b4 <memcmp>
   b8cf6:	b910      	cbnz	r0, b8cfe <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b8cf8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8cfc:	e7c8      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8cfe:	4919      	ldr	r1, [pc, #100]	; (b8d64 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8d00:	4668      	mov	r0, sp
   b8d02:	f009 fd75 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d06:	2205      	movs	r2, #5
   b8d08:	4629      	mov	r1, r5
   b8d0a:	4668      	mov	r0, sp
   b8d0c:	f009 fcd2 	bl	c26b4 <memcmp>
   b8d10:	b910      	cbnz	r0, b8d18 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b8d12:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8d16:	e7bb      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8d18:	4913      	ldr	r1, [pc, #76]	; (b8d68 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b8d1a:	4668      	mov	r0, sp
   b8d1c:	f009 fd68 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d20:	2205      	movs	r2, #5
   b8d22:	4629      	mov	r1, r5
   b8d24:	4668      	mov	r0, sp
   b8d26:	f009 fcc5 	bl	c26b4 <memcmp>
   b8d2a:	b910      	cbnz	r0, b8d32 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b8d2c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8d30:	e7ae      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8d32:	490e      	ldr	r1, [pc, #56]	; (b8d6c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b8d34:	4668      	mov	r0, sp
   b8d36:	f009 fd5b 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d3a:	2205      	movs	r2, #5
   b8d3c:	4629      	mov	r1, r5
   b8d3e:	4668      	mov	r0, sp
   b8d40:	f009 fcb8 	bl	c26b4 <memcmp>
   b8d44:	b910      	cbnz	r0, b8d4c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b8d46:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8d4a:	e7a1      	b.n	b8c90 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b8d4c:	2000      	movs	r0, #0
   b8d4e:	e7a0      	b.n	b8c92 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b8d50:	000c50e8 	.word	0x000c50e8
   b8d54:	000c50be 	.word	0x000c50be
   b8d58:	000c50c4 	.word	0x000c50c4
   b8d5c:	000c50ca 	.word	0x000c50ca
   b8d60:	000c50d0 	.word	0x000c50d0
   b8d64:	000c50d6 	.word	0x000c50d6
   b8d68:	000c50dc 	.word	0x000c50dc
   b8d6c:	000c50e2 	.word	0x000c50e2

000b8d70 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d72:	4b38      	ldr	r3, [pc, #224]	; (b8e54 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b8d74:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d76:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d7a:	6818      	ldr	r0, [r3, #0]
   b8d7c:	9000      	str	r0, [sp, #0]
   b8d7e:	889b      	ldrh	r3, [r3, #4]
   b8d80:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d84:	2205      	movs	r2, #5
   b8d86:	4629      	mov	r1, r5
   b8d88:	4668      	mov	r0, sp
   b8d8a:	f009 fc93 	bl	c26b4 <memcmp>
   b8d8e:	b920      	cbnz	r0, b8d9a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8d90:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8d94:	3002      	adds	r0, #2
}
   b8d96:	b003      	add	sp, #12
   b8d98:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d9a:	492f      	ldr	r1, [pc, #188]	; (b8e58 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8d9c:	4668      	mov	r0, sp
   b8d9e:	f009 fd27 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da2:	2205      	movs	r2, #5
   b8da4:	4629      	mov	r1, r5
   b8da6:	4668      	mov	r0, sp
   b8da8:	f009 fc84 	bl	c26b4 <memcmp>
   b8dac:	b910      	cbnz	r0, b8db4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8dae:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8db2:	e7ef      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8db4:	4929      	ldr	r1, [pc, #164]	; (b8e5c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b8db6:	4668      	mov	r0, sp
   b8db8:	f009 fd1a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dbc:	2205      	movs	r2, #5
   b8dbe:	4629      	mov	r1, r5
   b8dc0:	4668      	mov	r0, sp
   b8dc2:	f009 fc77 	bl	c26b4 <memcmp>
   b8dc6:	b910      	cbnz	r0, b8dce <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b8dc8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8dcc:	e7e2      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8dce:	4924      	ldr	r1, [pc, #144]	; (b8e60 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8dd0:	4668      	mov	r0, sp
   b8dd2:	f009 fd0d 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd6:	2205      	movs	r2, #5
   b8dd8:	4629      	mov	r1, r5
   b8dda:	4668      	mov	r0, sp
   b8ddc:	f009 fc6a 	bl	c26b4 <memcmp>
   b8de0:	b910      	cbnz	r0, b8de8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b8de2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8de6:	e7d5      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8de8:	491e      	ldr	r1, [pc, #120]	; (b8e64 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b8dea:	4668      	mov	r0, sp
   b8dec:	f009 fd00 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8df0:	2205      	movs	r2, #5
   b8df2:	4629      	mov	r1, r5
   b8df4:	4668      	mov	r0, sp
   b8df6:	f009 fc5d 	bl	c26b4 <memcmp>
   b8dfa:	b910      	cbnz	r0, b8e02 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b8dfc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8e00:	e7c8      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8e02:	4919      	ldr	r1, [pc, #100]	; (b8e68 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b8e04:	4668      	mov	r0, sp
   b8e06:	f009 fcf3 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e0a:	2205      	movs	r2, #5
   b8e0c:	4629      	mov	r1, r5
   b8e0e:	4668      	mov	r0, sp
   b8e10:	f009 fc50 	bl	c26b4 <memcmp>
   b8e14:	b910      	cbnz	r0, b8e1c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b8e16:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8e1a:	e7bb      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8e1c:	4913      	ldr	r1, [pc, #76]	; (b8e6c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b8e1e:	4668      	mov	r0, sp
   b8e20:	f009 fce6 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e24:	2205      	movs	r2, #5
   b8e26:	4629      	mov	r1, r5
   b8e28:	4668      	mov	r0, sp
   b8e2a:	f009 fc43 	bl	c26b4 <memcmp>
   b8e2e:	b910      	cbnz	r0, b8e36 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b8e30:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8e34:	e7ae      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8e36:	490e      	ldr	r1, [pc, #56]	; (b8e70 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b8e38:	4668      	mov	r0, sp
   b8e3a:	f009 fcd9 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e3e:	2205      	movs	r2, #5
   b8e40:	4629      	mov	r1, r5
   b8e42:	4668      	mov	r0, sp
   b8e44:	f009 fc36 	bl	c26b4 <memcmp>
   b8e48:	b910      	cbnz	r0, b8e50 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8e4a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8e4e:	e7a1      	b.n	b8d94 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b8e50:	2000      	movs	r0, #0
   b8e52:	e7a0      	b.n	b8d96 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b8e54:	000c50e8 	.word	0x000c50e8
   b8e58:	000c50be 	.word	0x000c50be
   b8e5c:	000c50c4 	.word	0x000c50c4
   b8e60:	000c50ca 	.word	0x000c50ca
   b8e64:	000c50d0 	.word	0x000c50d0
   b8e68:	000c50d6 	.word	0x000c50d6
   b8e6c:	000c50dc 	.word	0x000c50dc
   b8e70:	000c50e2 	.word	0x000c50e2

000b8e74 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8e76:	4b39      	ldr	r3, [pc, #228]	; (b8f5c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8e78:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e7a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8e7e:	6818      	ldr	r0, [r3, #0]
   b8e80:	9000      	str	r0, [sp, #0]
   b8e82:	889b      	ldrh	r3, [r3, #4]
   b8e84:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e88:	2205      	movs	r2, #5
   b8e8a:	4629      	mov	r1, r5
   b8e8c:	4668      	mov	r0, sp
   b8e8e:	f009 fc11 	bl	c26b4 <memcmp>
   b8e92:	b920      	cbnz	r0, b8e9e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8e94:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8e98:	3066      	adds	r0, #102	; 0x66
}
   b8e9a:	b003      	add	sp, #12
   b8e9c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e9e:	4930      	ldr	r1, [pc, #192]	; (b8f60 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8ea0:	4668      	mov	r0, sp
   b8ea2:	f009 fca5 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ea6:	2205      	movs	r2, #5
   b8ea8:	4629      	mov	r1, r5
   b8eaa:	4668      	mov	r0, sp
   b8eac:	f009 fc02 	bl	c26b4 <memcmp>
   b8eb0:	b910      	cbnz	r0, b8eb8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8eb2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8eb6:	e7ef      	b.n	b8e98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8eb8:	492a      	ldr	r1, [pc, #168]	; (b8f64 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8eba:	4668      	mov	r0, sp
   b8ebc:	f009 fc98 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ec0:	2205      	movs	r2, #5
   b8ec2:	4629      	mov	r1, r5
   b8ec4:	4668      	mov	r0, sp
   b8ec6:	f009 fbf5 	bl	c26b4 <memcmp>
   b8eca:	b910      	cbnz	r0, b8ed2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8ecc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8ed0:	e7e2      	b.n	b8e98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8ed2:	4925      	ldr	r1, [pc, #148]	; (b8f68 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8ed4:	4668      	mov	r0, sp
   b8ed6:	f009 fc8b 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eda:	2205      	movs	r2, #5
   b8edc:	4629      	mov	r1, r5
   b8ede:	4668      	mov	r0, sp
   b8ee0:	f009 fbe8 	bl	c26b4 <memcmp>
   b8ee4:	b910      	cbnz	r0, b8eec <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8ee6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8eea:	e7d5      	b.n	b8e98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8eec:	491f      	ldr	r1, [pc, #124]	; (b8f6c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8eee:	4668      	mov	r0, sp
   b8ef0:	f009 fc7e 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ef4:	2205      	movs	r2, #5
   b8ef6:	4629      	mov	r1, r5
   b8ef8:	4668      	mov	r0, sp
   b8efa:	f009 fbdb 	bl	c26b4 <memcmp>
   b8efe:	b910      	cbnz	r0, b8f06 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8f00:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f04:	e7c8      	b.n	b8e98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8f06:	491a      	ldr	r1, [pc, #104]	; (b8f70 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8f08:	4668      	mov	r0, sp
   b8f0a:	f009 fc71 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f0e:	2205      	movs	r2, #5
   b8f10:	4629      	mov	r1, r5
   b8f12:	4668      	mov	r0, sp
   b8f14:	f009 fbce 	bl	c26b4 <memcmp>
   b8f18:	b910      	cbnz	r0, b8f20 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8f1a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8f1e:	e7bb      	b.n	b8e98 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8f20:	4914      	ldr	r1, [pc, #80]	; (b8f74 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8f22:	4668      	mov	r0, sp
   b8f24:	f009 fc64 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f28:	2205      	movs	r2, #5
   b8f2a:	4629      	mov	r1, r5
   b8f2c:	4668      	mov	r0, sp
   b8f2e:	f009 fbc1 	bl	c26b4 <memcmp>
   b8f32:	b918      	cbnz	r0, b8f3c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8f34:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8f38:	3034      	adds	r0, #52	; 0x34
   b8f3a:	e7ae      	b.n	b8e9a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8f3c:	490e      	ldr	r1, [pc, #56]	; (b8f78 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8f3e:	4668      	mov	r0, sp
   b8f40:	f009 fc56 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f44:	2205      	movs	r2, #5
   b8f46:	4629      	mov	r1, r5
   b8f48:	4668      	mov	r0, sp
   b8f4a:	f009 fbb3 	bl	c26b4 <memcmp>
   b8f4e:	b910      	cbnz	r0, b8f56 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8f50:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8f54:	e7f0      	b.n	b8f38 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8f56:	2000      	movs	r0, #0
   b8f58:	e79f      	b.n	b8e9a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8f5a:	bf00      	nop
   b8f5c:	000c50e8 	.word	0x000c50e8
   b8f60:	000c50be 	.word	0x000c50be
   b8f64:	000c50c4 	.word	0x000c50c4
   b8f68:	000c50ca 	.word	0x000c50ca
   b8f6c:	000c50d0 	.word	0x000c50d0
   b8f70:	000c50d6 	.word	0x000c50d6
   b8f74:	000c50dc 	.word	0x000c50dc
   b8f78:	000c50e2 	.word	0x000c50e2

000b8f7c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f7e:	4b39      	ldr	r3, [pc, #228]	; (b9064 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8f80:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f82:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f86:	6818      	ldr	r0, [r3, #0]
   b8f88:	9000      	str	r0, [sp, #0]
   b8f8a:	889b      	ldrh	r3, [r3, #4]
   b8f8c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f90:	2205      	movs	r2, #5
   b8f92:	4629      	mov	r1, r5
   b8f94:	4668      	mov	r0, sp
   b8f96:	f009 fb8d 	bl	c26b4 <memcmp>
   b8f9a:	b920      	cbnz	r0, b8fa6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8f9c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8fa0:	3067      	adds	r0, #103	; 0x67
}
   b8fa2:	b003      	add	sp, #12
   b8fa4:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8fa6:	4930      	ldr	r1, [pc, #192]	; (b9068 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8fa8:	4668      	mov	r0, sp
   b8faa:	f009 fc21 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fae:	2205      	movs	r2, #5
   b8fb0:	4629      	mov	r1, r5
   b8fb2:	4668      	mov	r0, sp
   b8fb4:	f009 fb7e 	bl	c26b4 <memcmp>
   b8fb8:	b910      	cbnz	r0, b8fc0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8fba:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8fbe:	e7ef      	b.n	b8fa0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8fc0:	492a      	ldr	r1, [pc, #168]	; (b906c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8fc2:	4668      	mov	r0, sp
   b8fc4:	f009 fc14 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fc8:	2205      	movs	r2, #5
   b8fca:	4629      	mov	r1, r5
   b8fcc:	4668      	mov	r0, sp
   b8fce:	f009 fb71 	bl	c26b4 <memcmp>
   b8fd2:	b910      	cbnz	r0, b8fda <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8fd4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8fd8:	e7e2      	b.n	b8fa0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8fda:	4925      	ldr	r1, [pc, #148]	; (b9070 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8fdc:	4668      	mov	r0, sp
   b8fde:	f009 fc07 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fe2:	2205      	movs	r2, #5
   b8fe4:	4629      	mov	r1, r5
   b8fe6:	4668      	mov	r0, sp
   b8fe8:	f009 fb64 	bl	c26b4 <memcmp>
   b8fec:	b910      	cbnz	r0, b8ff4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b8fee:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8ff2:	e7d5      	b.n	b8fa0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8ff4:	491f      	ldr	r1, [pc, #124]	; (b9074 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8ff6:	4668      	mov	r0, sp
   b8ff8:	f009 fbfa 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ffc:	2205      	movs	r2, #5
   b8ffe:	4629      	mov	r1, r5
   b9000:	4668      	mov	r0, sp
   b9002:	f009 fb57 	bl	c26b4 <memcmp>
   b9006:	b910      	cbnz	r0, b900e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b9008:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b900c:	e7c8      	b.n	b8fa0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b900e:	491a      	ldr	r1, [pc, #104]	; (b9078 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b9010:	4668      	mov	r0, sp
   b9012:	f009 fbed 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9016:	2205      	movs	r2, #5
   b9018:	4629      	mov	r1, r5
   b901a:	4668      	mov	r0, sp
   b901c:	f009 fb4a 	bl	c26b4 <memcmp>
   b9020:	b910      	cbnz	r0, b9028 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b9022:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9026:	e7bb      	b.n	b8fa0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9028:	4914      	ldr	r1, [pc, #80]	; (b907c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b902a:	4668      	mov	r0, sp
   b902c:	f009 fbe0 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9030:	2205      	movs	r2, #5
   b9032:	4629      	mov	r1, r5
   b9034:	4668      	mov	r0, sp
   b9036:	f009 fb3d 	bl	c26b4 <memcmp>
   b903a:	b918      	cbnz	r0, b9044 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b903c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9040:	3035      	adds	r0, #53	; 0x35
   b9042:	e7ae      	b.n	b8fa2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9044:	490e      	ldr	r1, [pc, #56]	; (b9080 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b9046:	4668      	mov	r0, sp
   b9048:	f009 fbd2 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b904c:	2205      	movs	r2, #5
   b904e:	4629      	mov	r1, r5
   b9050:	4668      	mov	r0, sp
   b9052:	f009 fb2f 	bl	c26b4 <memcmp>
   b9056:	b910      	cbnz	r0, b905e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9058:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b905c:	e7f0      	b.n	b9040 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b905e:	2000      	movs	r0, #0
   b9060:	e79f      	b.n	b8fa2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b9062:	bf00      	nop
   b9064:	000c50e8 	.word	0x000c50e8
   b9068:	000c50be 	.word	0x000c50be
   b906c:	000c50c4 	.word	0x000c50c4
   b9070:	000c50ca 	.word	0x000c50ca
   b9074:	000c50d0 	.word	0x000c50d0
   b9078:	000c50d6 	.word	0x000c50d6
   b907c:	000c50dc 	.word	0x000c50dc
   b9080:	000c50e2 	.word	0x000c50e2

000b9084 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b9084:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9086:	4b39      	ldr	r3, [pc, #228]	; (b916c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b9088:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b908a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b908e:	6818      	ldr	r0, [r3, #0]
   b9090:	9000      	str	r0, [sp, #0]
   b9092:	889b      	ldrh	r3, [r3, #4]
   b9094:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9098:	2205      	movs	r2, #5
   b909a:	4629      	mov	r1, r5
   b909c:	4668      	mov	r0, sp
   b909e:	f009 fb09 	bl	c26b4 <memcmp>
   b90a2:	b928      	cbnz	r0, b90b0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b90a4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b90a8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b90ac:	b003      	add	sp, #12
   b90ae:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b90b0:	492f      	ldr	r1, [pc, #188]	; (b9170 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b90b2:	4668      	mov	r0, sp
   b90b4:	f009 fb9c 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90b8:	2205      	movs	r2, #5
   b90ba:	4629      	mov	r1, r5
   b90bc:	4668      	mov	r0, sp
   b90be:	f009 faf9 	bl	c26b4 <memcmp>
   b90c2:	b910      	cbnz	r0, b90ca <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b90c4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b90c8:	e7ee      	b.n	b90a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b90ca:	492a      	ldr	r1, [pc, #168]	; (b9174 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b90cc:	4668      	mov	r0, sp
   b90ce:	f009 fb8f 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90d2:	2205      	movs	r2, #5
   b90d4:	4629      	mov	r1, r5
   b90d6:	4668      	mov	r0, sp
   b90d8:	f009 faec 	bl	c26b4 <memcmp>
   b90dc:	b910      	cbnz	r0, b90e4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b90de:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b90e2:	e7e1      	b.n	b90a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b90e4:	4924      	ldr	r1, [pc, #144]	; (b9178 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b90e6:	4668      	mov	r0, sp
   b90e8:	f009 fb82 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90ec:	2205      	movs	r2, #5
   b90ee:	4629      	mov	r1, r5
   b90f0:	4668      	mov	r0, sp
   b90f2:	f009 fadf 	bl	c26b4 <memcmp>
   b90f6:	b910      	cbnz	r0, b90fe <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b90f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b90fc:	e7d4      	b.n	b90a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b90fe:	491f      	ldr	r1, [pc, #124]	; (b917c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b9100:	4668      	mov	r0, sp
   b9102:	f009 fb75 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9106:	2205      	movs	r2, #5
   b9108:	4629      	mov	r1, r5
   b910a:	4668      	mov	r0, sp
   b910c:	f009 fad2 	bl	c26b4 <memcmp>
   b9110:	b910      	cbnz	r0, b9118 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b9112:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9116:	e7c7      	b.n	b90a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9118:	4919      	ldr	r1, [pc, #100]	; (b9180 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b911a:	4668      	mov	r0, sp
   b911c:	f009 fb68 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9120:	2205      	movs	r2, #5
   b9122:	4629      	mov	r1, r5
   b9124:	4668      	mov	r0, sp
   b9126:	f009 fac5 	bl	c26b4 <memcmp>
   b912a:	b910      	cbnz	r0, b9132 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b912c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9130:	e7ba      	b.n	b90a8 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9132:	4914      	ldr	r1, [pc, #80]	; (b9184 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b9134:	4668      	mov	r0, sp
   b9136:	f009 fb5b 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b913a:	2205      	movs	r2, #5
   b913c:	4629      	mov	r1, r5
   b913e:	4668      	mov	r0, sp
   b9140:	f009 fab8 	bl	c26b4 <memcmp>
   b9144:	b918      	cbnz	r0, b914e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b9146:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b914a:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b914c:	e7ae      	b.n	b90ac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b914e:	490e      	ldr	r1, [pc, #56]	; (b9188 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9150:	4668      	mov	r0, sp
   b9152:	f009 fb4d 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9156:	2205      	movs	r2, #5
   b9158:	4629      	mov	r1, r5
   b915a:	4668      	mov	r0, sp
   b915c:	f009 faaa 	bl	c26b4 <memcmp>
   b9160:	b910      	cbnz	r0, b9168 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b9162:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9166:	e7f0      	b.n	b914a <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b9168:	2000      	movs	r0, #0
   b916a:	e79f      	b.n	b90ac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b916c:	000c50e8 	.word	0x000c50e8
   b9170:	000c50be 	.word	0x000c50be
   b9174:	000c50c4 	.word	0x000c50c4
   b9178:	000c50ca 	.word	0x000c50ca
   b917c:	000c50d0 	.word	0x000c50d0
   b9180:	000c50d6 	.word	0x000c50d6
   b9184:	000c50dc 	.word	0x000c50dc
   b9188:	000c50e2 	.word	0x000c50e2

000b918c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b918c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b918e:	4b3a      	ldr	r3, [pc, #232]	; (b9278 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b9190:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9192:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9196:	6818      	ldr	r0, [r3, #0]
   b9198:	9000      	str	r0, [sp, #0]
   b919a:	889b      	ldrh	r3, [r3, #4]
   b919c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91a0:	2205      	movs	r2, #5
   b91a2:	4629      	mov	r1, r5
   b91a4:	4668      	mov	r0, sp
   b91a6:	f009 fa85 	bl	c26b4 <memcmp>
   b91aa:	b930      	cbnz	r0, b91ba <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b91ac:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b91b0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b91b4:	3001      	adds	r0, #1
}
   b91b6:	b003      	add	sp, #12
   b91b8:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b91ba:	4930      	ldr	r1, [pc, #192]	; (b927c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b91bc:	4668      	mov	r0, sp
   b91be:	f009 fb17 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91c2:	2205      	movs	r2, #5
   b91c4:	4629      	mov	r1, r5
   b91c6:	4668      	mov	r0, sp
   b91c8:	f009 fa74 	bl	c26b4 <memcmp>
   b91cc:	b910      	cbnz	r0, b91d4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b91ce:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b91d2:	e7ed      	b.n	b91b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b91d4:	492a      	ldr	r1, [pc, #168]	; (b9280 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b91d6:	4668      	mov	r0, sp
   b91d8:	f009 fb0a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91dc:	2205      	movs	r2, #5
   b91de:	4629      	mov	r1, r5
   b91e0:	4668      	mov	r0, sp
   b91e2:	f009 fa67 	bl	c26b4 <memcmp>
   b91e6:	b910      	cbnz	r0, b91ee <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b91e8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b91ec:	e7e0      	b.n	b91b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b91ee:	4925      	ldr	r1, [pc, #148]	; (b9284 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b91f0:	4668      	mov	r0, sp
   b91f2:	f009 fafd 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91f6:	2205      	movs	r2, #5
   b91f8:	4629      	mov	r1, r5
   b91fa:	4668      	mov	r0, sp
   b91fc:	f009 fa5a 	bl	c26b4 <memcmp>
   b9200:	b910      	cbnz	r0, b9208 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b9202:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9206:	e7d3      	b.n	b91b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b9208:	491f      	ldr	r1, [pc, #124]	; (b9288 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b920a:	4668      	mov	r0, sp
   b920c:	f009 faf0 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9210:	2205      	movs	r2, #5
   b9212:	4629      	mov	r1, r5
   b9214:	4668      	mov	r0, sp
   b9216:	f009 fa4d 	bl	c26b4 <memcmp>
   b921a:	b910      	cbnz	r0, b9222 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b921c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9220:	e7c6      	b.n	b91b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b9222:	491a      	ldr	r1, [pc, #104]	; (b928c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b9224:	4668      	mov	r0, sp
   b9226:	f009 fae3 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b922a:	2205      	movs	r2, #5
   b922c:	4629      	mov	r1, r5
   b922e:	4668      	mov	r0, sp
   b9230:	f009 fa40 	bl	c26b4 <memcmp>
   b9234:	b910      	cbnz	r0, b923c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b9236:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b923a:	e7b9      	b.n	b91b0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b923c:	4914      	ldr	r1, [pc, #80]	; (b9290 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b923e:	4668      	mov	r0, sp
   b9240:	f009 fad6 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9244:	2205      	movs	r2, #5
   b9246:	4629      	mov	r1, r5
   b9248:	4668      	mov	r0, sp
   b924a:	f009 fa33 	bl	c26b4 <memcmp>
   b924e:	b918      	cbnz	r0, b9258 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9250:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9254:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9256:	e7ad      	b.n	b91b4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9258:	490e      	ldr	r1, [pc, #56]	; (b9294 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b925a:	4668      	mov	r0, sp
   b925c:	f009 fac8 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9260:	2205      	movs	r2, #5
   b9262:	4629      	mov	r1, r5
   b9264:	4668      	mov	r0, sp
   b9266:	f009 fa25 	bl	c26b4 <memcmp>
   b926a:	b910      	cbnz	r0, b9272 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b926c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9270:	e7f0      	b.n	b9254 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b9272:	2000      	movs	r0, #0
   b9274:	e79f      	b.n	b91b6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b9276:	bf00      	nop
   b9278:	000c50e8 	.word	0x000c50e8
   b927c:	000c50be 	.word	0x000c50be
   b9280:	000c50c4 	.word	0x000c50c4
   b9284:	000c50ca 	.word	0x000c50ca
   b9288:	000c50d0 	.word	0x000c50d0
   b928c:	000c50d6 	.word	0x000c50d6
   b9290:	000c50dc 	.word	0x000c50dc
   b9294:	000c50e2 	.word	0x000c50e2

000b9298 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b9298:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b929a:	4b30      	ldr	r3, [pc, #192]	; (b935c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b929c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b929e:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b92a2:	6818      	ldr	r0, [r3, #0]
   b92a4:	9000      	str	r0, [sp, #0]
   b92a6:	889b      	ldrh	r3, [r3, #4]
   b92a8:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92ac:	2205      	movs	r2, #5
   b92ae:	4621      	mov	r1, r4
   b92b0:	4668      	mov	r0, sp
   b92b2:	f009 f9ff 	bl	c26b4 <memcmp>
   b92b6:	b910      	cbnz	r0, b92be <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b92b8:	2064      	movs	r0, #100	; 0x64
}
   b92ba:	b002      	add	sp, #8
   b92bc:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b92be:	4928      	ldr	r1, [pc, #160]	; (b9360 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b92c0:	4668      	mov	r0, sp
   b92c2:	f009 fa95 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92c6:	2205      	movs	r2, #5
   b92c8:	4621      	mov	r1, r4
   b92ca:	4668      	mov	r0, sp
   b92cc:	f009 f9f2 	bl	c26b4 <memcmp>
   b92d0:	2800      	cmp	r0, #0
   b92d2:	d0f1      	beq.n	b92b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b92d4:	4923      	ldr	r1, [pc, #140]	; (b9364 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b92d6:	4668      	mov	r0, sp
   b92d8:	f009 fa8a 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92dc:	2205      	movs	r2, #5
   b92de:	4621      	mov	r1, r4
   b92e0:	4668      	mov	r0, sp
   b92e2:	f009 f9e7 	bl	c26b4 <memcmp>
   b92e6:	2800      	cmp	r0, #0
   b92e8:	d0e6      	beq.n	b92b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b92ea:	491f      	ldr	r1, [pc, #124]	; (b9368 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b92ec:	4668      	mov	r0, sp
   b92ee:	f009 fa7f 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92f2:	2205      	movs	r2, #5
   b92f4:	4621      	mov	r1, r4
   b92f6:	4668      	mov	r0, sp
   b92f8:	f009 f9dc 	bl	c26b4 <memcmp>
   b92fc:	2800      	cmp	r0, #0
   b92fe:	d0db      	beq.n	b92b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b9300:	491a      	ldr	r1, [pc, #104]	; (b936c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b9302:	4668      	mov	r0, sp
   b9304:	f009 fa74 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9308:	2205      	movs	r2, #5
   b930a:	4621      	mov	r1, r4
   b930c:	4668      	mov	r0, sp
   b930e:	f009 f9d1 	bl	c26b4 <memcmp>
   b9312:	2800      	cmp	r0, #0
   b9314:	d0d0      	beq.n	b92b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b9316:	4916      	ldr	r1, [pc, #88]	; (b9370 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b9318:	4668      	mov	r0, sp
   b931a:	f009 fa69 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b931e:	2205      	movs	r2, #5
   b9320:	4621      	mov	r1, r4
   b9322:	4668      	mov	r0, sp
   b9324:	f009 f9c6 	bl	c26b4 <memcmp>
   b9328:	2800      	cmp	r0, #0
   b932a:	d0c5      	beq.n	b92b8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b932c:	4911      	ldr	r1, [pc, #68]	; (b9374 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b932e:	4668      	mov	r0, sp
   b9330:	f009 fa5e 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9334:	2205      	movs	r2, #5
   b9336:	4621      	mov	r1, r4
   b9338:	4668      	mov	r0, sp
   b933a:	f009 f9bb 	bl	c26b4 <memcmp>
   b933e:	b148      	cbz	r0, b9354 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b9340:	490d      	ldr	r1, [pc, #52]	; (b9378 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b9342:	4668      	mov	r0, sp
   b9344:	f009 fa54 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9348:	2205      	movs	r2, #5
   b934a:	4621      	mov	r1, r4
   b934c:	4668      	mov	r0, sp
   b934e:	f009 f9b1 	bl	c26b4 <memcmp>
   b9352:	b908      	cbnz	r0, b9358 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b9354:	2032      	movs	r0, #50	; 0x32
   b9356:	e7b0      	b.n	b92ba <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b9358:	2000      	movs	r0, #0
   b935a:	e7ae      	b.n	b92ba <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b935c:	000c50e8 	.word	0x000c50e8
   b9360:	000c50be 	.word	0x000c50be
   b9364:	000c50c4 	.word	0x000c50c4
   b9368:	000c50ca 	.word	0x000c50ca
   b936c:	000c50d0 	.word	0x000c50d0
   b9370:	000c50d6 	.word	0x000c50d6
   b9374:	000c50dc 	.word	0x000c50dc
   b9378:	000c50e2 	.word	0x000c50e2

000b937c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b937c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b937e:	4b38      	ldr	r3, [pc, #224]	; (b9460 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9380:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9382:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9386:	6818      	ldr	r0, [r3, #0]
   b9388:	9000      	str	r0, [sp, #0]
   b938a:	889b      	ldrh	r3, [r3, #4]
   b938c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9390:	2205      	movs	r2, #5
   b9392:	4629      	mov	r1, r5
   b9394:	4668      	mov	r0, sp
   b9396:	f009 f98d 	bl	c26b4 <memcmp>
   b939a:	b918      	cbnz	r0, b93a4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b939c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b93a0:	b003      	add	sp, #12
   b93a2:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b93a4:	492f      	ldr	r1, [pc, #188]	; (b9464 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b93a6:	4668      	mov	r0, sp
   b93a8:	f009 fa22 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93ac:	2205      	movs	r2, #5
   b93ae:	4629      	mov	r1, r5
   b93b0:	4668      	mov	r0, sp
   b93b2:	f009 f97f 	bl	c26b4 <memcmp>
   b93b6:	b910      	cbnz	r0, b93be <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b93b8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b93bc:	e7f0      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b93be:	492a      	ldr	r1, [pc, #168]	; (b9468 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b93c0:	4668      	mov	r0, sp
   b93c2:	f009 fa15 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93c6:	2205      	movs	r2, #5
   b93c8:	4629      	mov	r1, r5
   b93ca:	4668      	mov	r0, sp
   b93cc:	f009 f972 	bl	c26b4 <memcmp>
   b93d0:	b910      	cbnz	r0, b93d8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b93d2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b93d6:	e7e3      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b93d8:	4924      	ldr	r1, [pc, #144]	; (b946c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b93da:	4668      	mov	r0, sp
   b93dc:	f009 fa08 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93e0:	2205      	movs	r2, #5
   b93e2:	4629      	mov	r1, r5
   b93e4:	4668      	mov	r0, sp
   b93e6:	f009 f965 	bl	c26b4 <memcmp>
   b93ea:	b910      	cbnz	r0, b93f2 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b93ec:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b93f0:	e7d6      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b93f2:	491f      	ldr	r1, [pc, #124]	; (b9470 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b93f4:	4668      	mov	r0, sp
   b93f6:	f009 f9fb 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93fa:	2205      	movs	r2, #5
   b93fc:	4629      	mov	r1, r5
   b93fe:	4668      	mov	r0, sp
   b9400:	f009 f958 	bl	c26b4 <memcmp>
   b9404:	b910      	cbnz	r0, b940c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b9406:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b940a:	e7c9      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b940c:	4919      	ldr	r1, [pc, #100]	; (b9474 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b940e:	4668      	mov	r0, sp
   b9410:	f009 f9ee 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9414:	2205      	movs	r2, #5
   b9416:	4629      	mov	r1, r5
   b9418:	4668      	mov	r0, sp
   b941a:	f009 f94b 	bl	c26b4 <memcmp>
   b941e:	b910      	cbnz	r0, b9426 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b9420:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b9424:	e7bc      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b9426:	4914      	ldr	r1, [pc, #80]	; (b9478 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b9428:	4668      	mov	r0, sp
   b942a:	f009 f9e1 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b942e:	2205      	movs	r2, #5
   b9430:	4629      	mov	r1, r5
   b9432:	4668      	mov	r0, sp
   b9434:	f009 f93e 	bl	c26b4 <memcmp>
   b9438:	b910      	cbnz	r0, b9440 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b943a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b943e:	e7af      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b9440:	490e      	ldr	r1, [pc, #56]	; (b947c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b9442:	4668      	mov	r0, sp
   b9444:	f009 f9d4 	bl	c27f0 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9448:	2205      	movs	r2, #5
   b944a:	4629      	mov	r1, r5
   b944c:	4668      	mov	r0, sp
   b944e:	f009 f931 	bl	c26b4 <memcmp>
   b9452:	b910      	cbnz	r0, b945a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b9454:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9458:	e7a2      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b945a:	2000      	movs	r0, #0
   b945c:	e7a0      	b.n	b93a0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b945e:	bf00      	nop
   b9460:	000c50e8 	.word	0x000c50e8
   b9464:	000c50be 	.word	0x000c50be
   b9468:	000c50c4 	.word	0x000c50c4
   b946c:	000c50ca 	.word	0x000c50ca
   b9470:	000c50d0 	.word	0x000c50d0
   b9474:	000c50d6 	.word	0x000c50d6
   b9478:	000c50dc 	.word	0x000c50dc
   b947c:	000c50e2 	.word	0x000c50e2

000b9480 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9480:	4770      	bx	lr
	...

000b9484 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9484:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b9486:	8813      	ldrh	r3, [r2, #0]
   b9488:	4d0c      	ldr	r5, [pc, #48]	; (b94bc <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b948a:	2b01      	cmp	r3, #1
{
   b948c:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b948e:	d10e      	bne.n	b94ae <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9490:	020a      	lsls	r2, r1, #8
   b9492:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9496:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9498:	3301      	adds	r3, #1
   b949a:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b949c:	f7ff fff0 	bl	b9480 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b94a0:	8820      	ldrh	r0, [r4, #0]
   b94a2:	882b      	ldrh	r3, [r5, #0]
}
   b94a4:	4298      	cmp	r0, r3
   b94a6:	bf14      	ite	ne
   b94a8:	2003      	movne	r0, #3
   b94aa:	2000      	moveq	r0, #0
   b94ac:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b94ae:	2b02      	cmp	r3, #2
   b94b0:	d1f2      	bne.n	b9498 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b94b2:	882a      	ldrh	r2, [r5, #0]
   b94b4:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b94b6:	3206      	adds	r2, #6
   b94b8:	e7ed      	b.n	b9496 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b94ba:	bf00      	nop
   b94bc:	2003e61e 	.word	0x2003e61e

000b94c0 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b94c0:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b94c2:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b94c4:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b94c6:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b94c8:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b94ca:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b94ce:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b94d2:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b94d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b94da:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b94de:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b94e0:	4413      	add	r3, r2
   b94e2:	734b      	strb	r3, [r1, #13]
   b94e4:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b94e6:	b293      	uxth	r3, r2
   b94e8:	429c      	cmp	r4, r3
   b94ea:	d90a      	bls.n	b9502 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b94ec:	688b      	ldr	r3, [r1, #8]
   b94ee:	7b08      	ldrb	r0, [r1, #12]
   b94f0:	5c9b      	ldrb	r3, [r3, r2]
   b94f2:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b94f4:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b94f6:	b2db      	uxtb	r3, r3
   b94f8:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b94fa:	4403      	add	r3, r0
   b94fc:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b94fe:	3201      	adds	r2, #1
   b9500:	e7f1      	b.n	b94e6 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9502:	bd30      	pop	{r4, r5, pc}

000b9504 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9504:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9508:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b950a:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b950e:	b2c9      	uxtb	r1, r1
   b9510:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9514:	4419      	add	r1, r3
   b9516:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b951a:	4770      	bx	lr

000b951c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b951c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9520:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b9524:	f10b 0b08 	add.w	fp, fp, #8
   b9528:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b952c:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9530:	f1ab 0302 	sub.w	r3, fp, #2
{
   b9534:	4604      	mov	r4, r0
   b9536:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9538:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b953a:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b953c:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b953e:	f1ba 0f00 	cmp.w	sl, #0
   b9542:	f000 80a6 	beq.w	b9692 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b9546:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9548:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b954c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9550:	4556      	cmp	r6, sl
   b9552:	bf28      	it	cs
   b9554:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b9556:	ebaa 0a06 	sub.w	sl, sl, r6
   b955a:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b955e:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b9562:	bf02      	ittt	eq
   b9564:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b9568:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b956a:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b956e:	f006 f915 	bl	bf79c <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9572:	f1b9 0f00 	cmp.w	r9, #0
   b9576:	d15c      	bne.n	b9632 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9578:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b957c:	6803      	ldr	r3, [r0, #0]
   b957e:	21b5      	movs	r1, #181	; 0xb5
   b9580:	689b      	ldr	r3, [r3, #8]
   b9582:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9584:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9588:	6803      	ldr	r3, [r0, #0]
   b958a:	2162      	movs	r1, #98	; 0x62
   b958c:	689b      	ldr	r3, [r3, #8]
   b958e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9590:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9594:	7829      	ldrb	r1, [r5, #0]
   b9596:	6803      	ldr	r3, [r0, #0]
   b9598:	689b      	ldr	r3, [r3, #8]
   b959a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b959c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b95a0:	7869      	ldrb	r1, [r5, #1]
   b95a2:	6803      	ldr	r3, [r0, #0]
   b95a4:	689b      	ldr	r3, [r3, #8]
   b95a6:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b95a8:	78a9      	ldrb	r1, [r5, #2]
   b95aa:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b95ae:	f7fe fdc1 	bl	b8134 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b95b2:	8869      	ldrh	r1, [r5, #2]
   b95b4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b95b8:	0a09      	lsrs	r1, r1, #8
   b95ba:	f7fe fdbb 	bl	b8134 <_ZN7TwoWire5writeEi.isra.0>
   b95be:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b95c0:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b95c2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b95c6:	fa1f f983 	uxth.w	r9, r3
   b95ca:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b95ce:	454a      	cmp	r2, r9
   b95d0:	b2bf      	uxth	r7, r7
   b95d2:	d90d      	bls.n	b95f0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b95d4:	42be      	cmp	r6, r7
   b95d6:	d90b      	bls.n	b95f0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b95d8:	68aa      	ldr	r2, [r5, #8]
   b95da:	6801      	ldr	r1, [r0, #0]
   b95dc:	9301      	str	r3, [sp, #4]
   b95de:	4442      	add	r2, r8
   b95e0:	688f      	ldr	r7, [r1, #8]
   b95e2:	5cd1      	ldrb	r1, [r2, r3]
   b95e4:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b95e6:	9b01      	ldr	r3, [sp, #4]
   b95e8:	3301      	adds	r3, #1
   b95ea:	e7e9      	b.n	b95c0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b95ec:	46b9      	mov	r9, r7
   b95ee:	e7a6      	b.n	b953e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b95f0:	3e02      	subs	r6, #2
      startSpot += x;
   b95f2:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b95f4:	42b7      	cmp	r7, r6
      startSpot += x;
   b95f6:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b95fa:	d10c      	bne.n	b9616 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b95fc:	6803      	ldr	r3, [r0, #0]
   b95fe:	7b29      	ldrb	r1, [r5, #12]
   b9600:	689b      	ldr	r3, [r3, #8]
   b9602:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9604:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9608:	7b69      	ldrb	r1, [r5, #13]
   b960a:	6803      	ldr	r3, [r0, #0]
   b960c:	689b      	ldr	r3, [r3, #8]
   b960e:	4798      	blx	r3
        bytesSent += 2;
   b9610:	f109 0708 	add.w	r7, r9, #8
   b9614:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b9616:	455f      	cmp	r7, fp
   b9618:	d2e8      	bcs.n	b95ec <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b961a:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b961e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9622:	f006 f8c2 	bl	bf7aa <_ZN7TwoWire15endTransmissionEh>
   b9626:	2800      	cmp	r0, #0
   b9628:	d0e0      	beq.n	b95ec <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b962a:	200c      	movs	r0, #12
}
   b962c:	b003      	add	sp, #12
   b962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9632:	2200      	movs	r2, #0
   b9634:	b291      	uxth	r1, r2
   b9636:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b963a:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b963c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9640:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9642:	d910      	bls.n	b9666 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b9644:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9648:	eb08 0c02 	add.w	ip, r8, r2
   b964c:	1c53      	adds	r3, r2, #1
   b964e:	45f4      	cmp	ip, lr
   b9650:	9301      	str	r3, [sp, #4]
   b9652:	da08      	bge.n	b9666 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9654:	68a9      	ldr	r1, [r5, #8]
   b9656:	6802      	ldr	r2, [r0, #0]
   b9658:	f811 100c 	ldrb.w	r1, [r1, ip]
   b965c:	6892      	ldr	r2, [r2, #8]
   b965e:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9660:	9b01      	ldr	r3, [sp, #4]
   b9662:	461a      	mov	r2, r3
   b9664:	e7e6      	b.n	b9634 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9666:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9668:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b966a:	429f      	cmp	r7, r3
      startSpot += x;
   b966c:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9670:	d1d1      	bne.n	b9616 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9672:	3e02      	subs	r6, #2
   b9674:	42b2      	cmp	r2, r6
   b9676:	d1ce      	bne.n	b9616 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9678:	6803      	ldr	r3, [r0, #0]
   b967a:	7b29      	ldrb	r1, [r5, #12]
   b967c:	689b      	ldr	r3, [r3, #8]
   b967e:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9680:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9684:	7b69      	ldrb	r1, [r5, #13]
   b9686:	6803      	ldr	r3, [r0, #0]
   b9688:	689b      	ldr	r3, [r3, #8]
   b968a:	4798      	blx	r3
        bytesSent += 2;
   b968c:	fa1f f78b 	uxth.w	r7, fp
   b9690:	e7c1      	b.n	b9616 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9692:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9696:	f006 f88c 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
   b969a:	2800      	cmp	r0, #0
   b969c:	d0c6      	beq.n	b962c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b969e:	e7c4      	b.n	b962a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b96a0 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b96a0:	b570      	push	{r4, r5, r6, lr}
   b96a2:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b96a4:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b96a8:	6803      	ldr	r3, [r0, #0]
{
   b96aa:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b96ac:	689b      	ldr	r3, [r3, #8]
   b96ae:	21b5      	movs	r1, #181	; 0xb5
   b96b0:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b96b2:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b96b6:	6803      	ldr	r3, [r0, #0]
   b96b8:	2162      	movs	r1, #98	; 0x62
   b96ba:	689b      	ldr	r3, [r3, #8]
   b96bc:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b96be:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b96c2:	7821      	ldrb	r1, [r4, #0]
   b96c4:	6803      	ldr	r3, [r0, #0]
   b96c6:	689b      	ldr	r3, [r3, #8]
   b96c8:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b96ca:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b96ce:	7861      	ldrb	r1, [r4, #1]
   b96d0:	6803      	ldr	r3, [r0, #0]
   b96d2:	689b      	ldr	r3, [r3, #8]
   b96d4:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b96d6:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b96da:	78a1      	ldrb	r1, [r4, #2]
   b96dc:	6803      	ldr	r3, [r0, #0]
   b96de:	689b      	ldr	r3, [r3, #8]
   b96e0:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b96e2:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b96e6:	8861      	ldrh	r1, [r4, #2]
   b96e8:	6803      	ldr	r3, [r0, #0]
   b96ea:	0a09      	lsrs	r1, r1, #8
   b96ec:	689b      	ldr	r3, [r3, #8]
   b96ee:	4798      	blx	r3
   b96f0:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b96f2:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b96f6:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b96f8:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b96fa:	b2b2      	uxth	r2, r6
   b96fc:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b96fe:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9700:	d904      	bls.n	b970c <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9702:	68a1      	ldr	r1, [r4, #8]
   b9704:	5c89      	ldrb	r1, [r1, r2]
   b9706:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9708:	3601      	adds	r6, #1
   b970a:	e7f2      	b.n	b96f2 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b970c:	7b21      	ldrb	r1, [r4, #12]
   b970e:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9710:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9714:	7b61      	ldrb	r1, [r4, #13]
   b9716:	6803      	ldr	r3, [r0, #0]
}
   b9718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b971c:	689b      	ldr	r3, [r3, #8]
   b971e:	4718      	bx	r3

000b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9720:	b510      	push	{r4, lr}
   b9722:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b9724:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9728:	f007 fcc6 	bl	c10b8 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b972c:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9730:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9734:	429a      	cmp	r2, r3
   b9736:	d90b      	bls.n	b9750 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9738:	28ff      	cmp	r0, #255	; 0xff
   b973a:	d101      	bne.n	b9740 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b973c:	7822      	ldrb	r2, [r4, #0]
   b973e:	b13a      	cbz	r2, b9750 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9740:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9744:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b9746:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b974a:	3301      	adds	r3, #1
   b974c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9750:	bd10      	pop	{r4, pc}
	...

000b9754 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9754:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9758:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b975c:	4604      	mov	r4, r0
   b975e:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9760:	b97b      	cbnz	r3, b9782 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9762:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9766:	b923      	cbnz	r3, b9772 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9768:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b976c:	2b00      	cmp	r3, #0
   b976e:	f000 80ca 	beq.w	b9906 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9772:	4966      	ldr	r1, [pc, #408]	; (b990c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9774:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9778:	b004      	add	sp, #16
   b977a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b977e:	f007 bb06 	b.w	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9782:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9786:	4a62      	ldr	r2, [pc, #392]	; (b9910 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9788:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b978a:	2600      	movs	r6, #0
   b978c:	2301      	movs	r3, #1
   b978e:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9792:	4669      	mov	r1, sp
   b9794:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9798:	f8ad 300c 	strh.w	r3, [sp, #12]
   b979c:	9200      	str	r2, [sp, #0]
   b979e:	f88d 6004 	strb.w	r6, [sp, #4]
   b97a2:	f007 fc1b 	bl	c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b97a6:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b97aa:	4631      	mov	r1, r6
   b97ac:	f008 f887 	bl	c18be <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b97b0:	21b5      	movs	r1, #181	; 0xb5
   b97b2:	4620      	mov	r0, r4
   b97b4:	f7ff ffb4 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b97b8:	2162      	movs	r1, #98	; 0x62
   b97ba:	4620      	mov	r0, r4
   b97bc:	f7ff ffb0 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b97c0:	7829      	ldrb	r1, [r5, #0]
   b97c2:	4620      	mov	r0, r4
   b97c4:	f7ff ffac 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b97c8:	7869      	ldrb	r1, [r5, #1]
   b97ca:	4620      	mov	r0, r4
   b97cc:	f7ff ffa8 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b97d0:	78a9      	ldrb	r1, [r5, #2]
   b97d2:	4620      	mov	r0, r4
   b97d4:	f7ff ffa4 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b97d8:	8869      	ldrh	r1, [r5, #2]
   b97da:	4620      	mov	r0, r4
   b97dc:	0a09      	lsrs	r1, r1, #8
   b97de:	f7ff ff9f 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b97e2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b97e6:	2b00      	cmp	r3, #0
   b97e8:	d042      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b97ea:	494a      	ldr	r1, [pc, #296]	; (b9914 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b97ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b97f0:	f007 facd 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b97f4:	2210      	movs	r2, #16
   b97f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b97fa:	21b5      	movs	r1, #181	; 0xb5
   b97fc:	f7fe fc8a 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9800:	4945      	ldr	r1, [pc, #276]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9802:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9806:	f007 fac2 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b980a:	2210      	movs	r2, #16
   b980c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9810:	2162      	movs	r1, #98	; 0x62
   b9812:	f7fe fc7f 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9816:	4940      	ldr	r1, [pc, #256]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9818:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b981c:	f007 fab7 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9820:	2210      	movs	r2, #16
   b9822:	7829      	ldrb	r1, [r5, #0]
   b9824:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9828:	f7fe fc74 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b982c:	493a      	ldr	r1, [pc, #232]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b982e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9832:	f007 faac 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9836:	2210      	movs	r2, #16
   b9838:	7869      	ldrb	r1, [r5, #1]
   b983a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b983e:	f7fe fc69 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9842:	4935      	ldr	r1, [pc, #212]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9844:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9848:	f007 faa1 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b984c:	2210      	movs	r2, #16
   b984e:	78a9      	ldrb	r1, [r5, #2]
   b9850:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9854:	f007 fab7 	bl	c0dc6 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9858:	492f      	ldr	r1, [pc, #188]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b985a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b985e:	f007 fa96 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9862:	8869      	ldrh	r1, [r5, #2]
   b9864:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9868:	2210      	movs	r2, #16
   b986a:	0a09      	lsrs	r1, r1, #8
   b986c:	f007 faab 	bl	c0dc6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9870:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9874:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9876:	886a      	ldrh	r2, [r5, #2]
   b9878:	b2b3      	uxth	r3, r6
   b987a:	429a      	cmp	r2, r3
   b987c:	d916      	bls.n	b98ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b987e:	461f      	mov	r7, r3
   b9880:	68ab      	ldr	r3, [r5, #8]
   b9882:	4620      	mov	r0, r4
   b9884:	5dd9      	ldrb	r1, [r3, r7]
   b9886:	f7ff ff4b 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b988a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b988e:	b15b      	cbz	r3, b98a8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9890:	4641      	mov	r1, r8
   b9892:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9896:	f007 fa7a 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b989a:	68ab      	ldr	r3, [r5, #8]
   b989c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98a0:	5dd9      	ldrb	r1, [r3, r7]
   b98a2:	2210      	movs	r2, #16
   b98a4:	f7fe fc36 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b98a8:	3601      	adds	r6, #1
   b98aa:	e7e4      	b.n	b9876 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b98ac:	7b29      	ldrb	r1, [r5, #12]
   b98ae:	4620      	mov	r0, r4
   b98b0:	f7ff ff36 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b98b4:	7b69      	ldrb	r1, [r5, #13]
   b98b6:	4620      	mov	r0, r4
   b98b8:	f7ff ff32 	bl	b9720 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b98bc:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b98c0:	2101      	movs	r1, #1
   b98c2:	f007 fffc 	bl	c18be <digitalWrite>
  _spiPort->endTransaction();
   b98c6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b98ca:	f007 fb6e 	bl	c0faa <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b98ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b98d2:	b1c3      	cbz	r3, b9906 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b98d4:	4910      	ldr	r1, [pc, #64]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b98d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98da:	f007 fa58 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b98de:	7b29      	ldrb	r1, [r5, #12]
   b98e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98e4:	2210      	movs	r2, #16
   b98e6:	f7fe fc15 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b98ea:	490b      	ldr	r1, [pc, #44]	; (b9918 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b98ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98f0:	f007 fa4d 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b98f4:	7b69      	ldrb	r1, [r5, #13]
   b98f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b98fa:	2210      	movs	r2, #16
}
   b98fc:	b004      	add	sp, #16
   b98fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9902:	f7fe bc0e 	b.w	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9906:	b004      	add	sp, #16
   b9908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b990c:	000c50ee 	.word	0x000c50ee
   b9910:	000c4ea4 	.word	0x000c4ea4
   b9914:	000c5123 	.word	0x000c5123
   b9918:	000c6049 	.word	0x000c6049

000b991c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b991e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9922:	4604      	mov	r4, r0
   b9924:	460d      	mov	r5, r1
   b9926:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9928:	2b00      	cmp	r3, #0
   b992a:	f000 8082 	beq.w	b9a32 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b992e:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9932:	4940      	ldr	r1, [pc, #256]	; (b9a34 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9934:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9938:	f007 fa29 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b993c:	782b      	ldrb	r3, [r5, #0]
   b993e:	2b01      	cmp	r3, #1
   b9940:	d13c      	bne.n	b99bc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9942:	493d      	ldr	r1, [pc, #244]	; (b9a38 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9944:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9948:	f007 fa21 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b994c:	493b      	ldr	r1, [pc, #236]	; (b9a3c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b994e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9952:	f007 fa1c 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9956:	882b      	ldrh	r3, [r5, #0]
   b9958:	f240 7201 	movw	r2, #1793	; 0x701
   b995c:	4293      	cmp	r3, r2
   b995e:	d145      	bne.n	b99ec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9960:	4937      	ldr	r1, [pc, #220]	; (b9a40 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9962:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9966:	f007 fa12 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b996a:	4936      	ldr	r1, [pc, #216]	; (b9a44 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b996c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9970:	f007 fa0d 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
   b9974:	8869      	ldrh	r1, [r5, #2]
   b9976:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b997a:	2210      	movs	r2, #16
   b997c:	f007 fa23 	bl	c0dc6 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9980:	2f01      	cmp	r7, #1
   b9982:	d101      	bne.n	b9988 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9984:	2e00      	cmp	r6, #0
   b9986:	d049      	beq.n	b9a1c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9988:	492f      	ldr	r1, [pc, #188]	; (b9a48 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b998a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b998e:	4f2f      	ldr	r7, [pc, #188]	; (b9a4c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9990:	f007 f9fd 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
   b9994:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9996:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9998:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b999c:	b2b3      	uxth	r3, r6
   b999e:	429a      	cmp	r2, r3
   b99a0:	d941      	bls.n	b9a26 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b99a2:	4639      	mov	r1, r7
   b99a4:	f007 f9f3 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b99a8:	b2b3      	uxth	r3, r6
   b99aa:	68a9      	ldr	r1, [r5, #8]
   b99ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b99b0:	5cc9      	ldrb	r1, [r1, r3]
   b99b2:	2210      	movs	r2, #16
   b99b4:	f7fe fbae 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b99b8:	3601      	adds	r6, #1
   b99ba:	e7ec      	b.n	b9996 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b99bc:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b99be:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b99c2:	d101      	bne.n	b99c8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b99c4:	4922      	ldr	r1, [pc, #136]	; (b9a50 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b99c6:	e7bf      	b.n	b9948 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b99c8:	2b06      	cmp	r3, #6
   b99ca:	d101      	bne.n	b99d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b99cc:	4921      	ldr	r1, [pc, #132]	; (b9a54 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b99ce:	e7bb      	b.n	b9948 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b99d0:	2b0a      	cmp	r3, #10
   b99d2:	d101      	bne.n	b99d8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b99d4:	4920      	ldr	r1, [pc, #128]	; (b9a58 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b99d6:	e7b7      	b.n	b9948 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b99d8:	4920      	ldr	r1, [pc, #128]	; (b9a5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b99da:	f007 f9d8 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b99de:	7829      	ldrb	r1, [r5, #0]
   b99e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b99e4:	2210      	movs	r2, #16
   b99e6:	f7fe fb95 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b99ea:	e7af      	b.n	b994c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b99ec:	f640 0206 	movw	r2, #2054	; 0x806
   b99f0:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b99f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b99f6:	d101      	bne.n	b99fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b99f8:	4919      	ldr	r1, [pc, #100]	; (b9a60 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b99fa:	e7b4      	b.n	b9966 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b99fc:	f640 1206 	movw	r2, #2310	; 0x906
   b9a00:	4293      	cmp	r3, r2
   b9a02:	d101      	bne.n	b9a08 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9a04:	4917      	ldr	r1, [pc, #92]	; (b9a64 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9a06:	e7ae      	b.n	b9966 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9a08:	4914      	ldr	r1, [pc, #80]	; (b9a5c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9a0a:	f007 f9c0 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9a0e:	7869      	ldrb	r1, [r5, #1]
   b9a10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a14:	2210      	movs	r2, #16
   b9a16:	f7fe fb7d 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9a1a:	e7a6      	b.n	b996a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9a1c:	4912      	ldr	r1, [pc, #72]	; (b9a68 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9a1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a22:	f007 f9b4 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9a26:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9a2e:	f007 b9b2 	b.w	c0d96 <_ZN5Print7printlnEv>
}
   b9a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9a34:	000c5134 	.word	0x000c5134
   b9a38:	000c5139 	.word	0x000c5139
   b9a3c:	000c5149 	.word	0x000c5149
   b9a40:	000c514e 	.word	0x000c514e
   b9a44:	000c515c 	.word	0x000c515c
   b9a48:	000c5165 	.word	0x000c5165
   b9a4c:	000c6049 	.word	0x000c6049
   b9a50:	000c513d 	.word	0x000c513d
   b9a54:	000c5141 	.word	0x000c5141
   b9a58:	000c5145 	.word	0x000c5145
   b9a5c:	000c53ba 	.word	0x000c53ba
   b9a60:	000c5152 	.word	0x000c5152
   b9a64:	000c5157 	.word	0x000c5157
   b9a68:	000c516f 	.word	0x000c516f

000b9a6c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9a6c:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9a6e:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9a72:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9a74:	b955      	cbnz	r5, b9a8c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b9a76:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9a7a:	b90b      	cbnz	r3, b9a80 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9a7c:	2000      	movs	r0, #0
}
   b9a7e:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9a80:	491a      	ldr	r1, [pc, #104]	; (b9aec <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9a82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9a86:	f007 f99c 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9a8a:	e7f7      	b.n	b9a7c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9a8c:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9a90:	b12b      	cbz	r3, b9a9e <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9a92:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9a96:	2b00      	cmp	r3, #0
   b9a98:	d0f0      	beq.n	b9a7c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b9a9a:	4915      	ldr	r1, [pc, #84]	; (b9af0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9a9c:	e7f1      	b.n	b9a82 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9a9e:	4628      	mov	r0, r5
   b9aa0:	f7fa fafb 	bl	b409a <_Znaj>
   b9aa4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9aa8:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9aac:	b930      	cbnz	r0, b9abc <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9aae:	b91b      	cbnz	r3, b9ab8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9ab0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9ab4:	2b00      	cmp	r3, #0
   b9ab6:	d0e1      	beq.n	b9a7c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9ab8:	490e      	ldr	r1, [pc, #56]	; (b9af4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b9aba:	e7e2      	b.n	b9a82 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9abc:	b17b      	cbz	r3, b9ade <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9abe:	490e      	ldr	r1, [pc, #56]	; (b9af8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9ac0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ac4:	f007 f963 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b9ac8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9acc:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9ad0:	220a      	movs	r2, #10
   b9ad2:	4628      	mov	r0, r5
   b9ad4:	f007 f977 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        n += println();
   b9ad8:	4628      	mov	r0, r5
   b9ada:	f007 f95c 	bl	c0d96 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9ade:	2300      	movs	r3, #0
   b9ae0:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9ae4:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b9ae8:	2001      	movs	r0, #1
   b9aea:	e7c8      	b.n	b9a7e <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9aec:	000c5181 	.word	0x000c5181
   b9af0:	000c51d2 	.word	0x000c51d2
   b9af4:	000c5215 	.word	0x000c5215
   b9af8:	000c5239 	.word	0x000c5239

000b9afc <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9afc:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9b00:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9b04:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9b06:	bf3b      	ittet	cc
   b9b08:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b9b0c:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b9b0e:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b9b10:	1a80      	subcc	r0, r0, r2
   b9b12:	b280      	uxth	r0, r0
}
   b9b14:	4770      	bx	lr

000b9b16 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b9b16:	b508      	push	{r3, lr}
   b9b18:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b9b1a:	f7ff ffef 	bl	b9afc <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b9b1e:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b9b22:	1a18      	subs	r0, r3, r0
}
   b9b24:	b280      	uxth	r0, r0
   b9b26:	bd08      	pop	{r3, pc}

000b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b9b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b9b2c:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9b30:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b9b34:	1aed      	subs	r5, r5, r3
   b9b36:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b9b38:	4295      	cmp	r5, r2
   b9b3a:	bf28      	it	cs
   b9b3c:	4615      	movcs	r5, r2
{
   b9b3e:	4616      	mov	r6, r2
   b9b40:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9b42:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9b46:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9b48:	462a      	mov	r2, r5
   b9b4a:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b9b4c:	b2bf      	uxth	r7, r7
{
   b9b4e:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b9b50:	f008 fdc0 	bl	c26d4 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b9b54:	b19f      	cbz	r7, b9b7e <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b9b56:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b9b5a:	463a      	mov	r2, r7
   b9b5c:	eb08 0105 	add.w	r1, r8, r5
   b9b60:	f008 fdb8 	bl	c26d4 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b9b64:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b9b68:	4620      	mov	r0, r4
   b9b6a:	f7ff ffc7 	bl	b9afc <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9b6e:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9b72:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9b74:	bf38      	it	cc
   b9b76:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b9b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9b7e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9b82:	4416      	add	r6, r2
   b9b84:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b9b88:	e7ee      	b.n	b9b68 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9b8c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9b8e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9b92:	4604      	mov	r4, r0
   b9b94:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9b96:	b113      	cbz	r3, b9b9e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b9b98:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9b9c:	b953      	cbnz	r3, b9bb4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9b9e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9ba2:	b128      	cbz	r0, b9bb0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9ba4:	4924      	ldr	r1, [pc, #144]	; (b9c38 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9ba6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9baa:	f007 f90a 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9bae:	2000      	movs	r0, #0
}
   b9bb0:	b003      	add	sp, #12
   b9bb2:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9bb4:	f7ff ffaf 	bl	b9b16 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b9bb8:	886b      	ldrh	r3, [r5, #2]
   b9bba:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9bbc:	b29b      	uxth	r3, r3
   b9bbe:	4283      	cmp	r3, r0
   b9bc0:	d908      	bls.n	b9bd4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9bc2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9bc6:	b91b      	cbnz	r3, b9bd0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b9bc8:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9bcc:	2800      	cmp	r0, #0
   b9bce:	d0ef      	beq.n	b9bb0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9bd0:	491a      	ldr	r1, [pc, #104]	; (b9c3c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9bd2:	e7e8      	b.n	b9ba6 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9bd4:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b9bd8:	2202      	movs	r2, #2
   b9bda:	4669      	mov	r1, sp
   b9bdc:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9bde:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9be2:	f7ff ffa1 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b9be6:	2201      	movs	r2, #1
   b9be8:	4629      	mov	r1, r5
   b9bea:	4620      	mov	r0, r4
   b9bec:	f7ff ff9c 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9bf0:	2201      	movs	r2, #1
   b9bf2:	18a9      	adds	r1, r5, r2
   b9bf4:	4620      	mov	r0, r4
   b9bf6:	f7ff ff97 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b9bfa:	886b      	ldrh	r3, [r5, #2]
   b9bfc:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9c00:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b9c02:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b9c04:	a901      	add	r1, sp, #4
   b9c06:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b9c08:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b9c0c:	f7ff ff8c 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b9c10:	886a      	ldrh	r2, [r5, #2]
   b9c12:	68a9      	ldr	r1, [r5, #8]
   b9c14:	4620      	mov	r0, r4
   b9c16:	f7ff ff87 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b9c1a:	2201      	movs	r2, #1
   b9c1c:	f105 010c 	add.w	r1, r5, #12
   b9c20:	4620      	mov	r0, r4
   b9c22:	f7ff ff81 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b9c26:	4620      	mov	r0, r4
   b9c28:	2201      	movs	r2, #1
   b9c2a:	f105 010d 	add.w	r1, r5, #13
   b9c2e:	f7ff ff7b 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b9c32:	2001      	movs	r0, #1
   b9c34:	e7bc      	b.n	b9bb0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b9c36:	bf00      	nop
   b9c38:	000c525f 	.word	0x000c525f
   b9c3c:	000c5287 	.word	0x000c5287

000b9c40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b9c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b9c44:	780e      	ldrb	r6, [r1, #0]
   b9c46:	2e0d      	cmp	r6, #13
{
   b9c48:	4604      	mov	r4, r0
   b9c4a:	460d      	mov	r5, r1
  switch (msg->cls)
   b9c4c:	f001 8228 	beq.w	bb0a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b9c50:	d809      	bhi.n	b9c66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b9c52:	2e02      	cmp	r6, #2
   b9c54:	f000 879a 	beq.w	bab8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b9c58:	2e06      	cmp	r6, #6
   b9c5a:	f001 81cc 	beq.w	baff6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b9c5e:	2e01      	cmp	r6, #1
   b9c60:	d04f      	beq.n	b9d02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b9c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b9c66:	2e13      	cmp	r6, #19
   b9c68:	f001 83eb 	beq.w	bb442 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9c6c:	2e28      	cmp	r6, #40	; 0x28
   b9c6e:	f001 84ca 	beq.w	bb606 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9c72:	2e10      	cmp	r6, #16
   b9c74:	d1f5      	bne.n	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b9c76:	680b      	ldr	r3, [r1, #0]
   b9c78:	4a8e      	ldr	r2, [pc, #568]	; (b9eb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b9c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9c7e:	4293      	cmp	r3, r2
   b9c80:	f041 826a 	bne.w	bb158 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9c84:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b9c86:	2e00      	cmp	r6, #0
   b9c88:	d0eb      	beq.n	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b9c8a:	68a8      	ldr	r0, [r5, #8]
   b9c8c:	2100      	movs	r1, #0
   b9c8e:	f7fe fa21 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c92:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9c94:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9c96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9c98:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b9c9a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9c9c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9c9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9ca0:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9ca2:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9ca4:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9ca6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9ca8:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b9caa:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9cac:	68a8      	ldr	r0, [r5, #8]
   b9cae:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9cb0:	2108      	movs	r1, #8
   b9cb2:	f7fe fa0f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cb6:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9cb8:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9cba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9cbc:	210c      	movs	r1, #12
   b9cbe:	f7fe fa16 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9cc2:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9cc4:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9cc6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9cc8:	210e      	movs	r1, #14
   b9cca:	f7fe fa10 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9cce:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cd0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cd6:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9cd8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9cda:	6a1a      	ldr	r2, [r3, #32]
   b9cdc:	b17a      	cbz	r2, b9cfe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9cde:	7819      	ldrb	r1, [r3, #0]
   b9ce0:	0708      	lsls	r0, r1, #28
   b9ce2:	d40c      	bmi.n	b9cfe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9ce4:	1d19      	adds	r1, r3, #4
   b9ce6:	3314      	adds	r3, #20
   b9ce8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9cec:	f842 0b04 	str.w	r0, [r2], #4
   b9cf0:	4299      	cmp	r1, r3
   b9cf2:	d1f9      	bne.n	b9ce8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cf4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b9cf6:	7813      	ldrb	r3, [r2, #0]
   b9cf8:	f043 0308 	orr.w	r3, r3, #8
   b9cfc:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9cfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9d00:	e03d      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b9d02:	680b      	ldr	r3, [r1, #0]
   b9d04:	4a6c      	ldr	r2, [pc, #432]	; (b9eb8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b9d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9d0a:	4293      	cmp	r3, r2
   b9d0c:	d141      	bne.n	b9d92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b9d0e:	68c6      	ldr	r6, [r0, #12]
   b9d10:	2e00      	cmp	r6, #0
   b9d12:	d0a6      	beq.n	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b9d14:	68a8      	ldr	r0, [r5, #8]
   b9d16:	2100      	movs	r1, #0
   b9d18:	f7fe f9dc 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d1c:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d1e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9d20:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d22:	2104      	movs	r1, #4
   b9d24:	f7fe f9d6 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b9d28:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d2a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9d2c:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d2e:	2108      	movs	r1, #8
   b9d30:	f7fe f9d0 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b9d34:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d36:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9d38:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d3a:	210c      	movs	r1, #12
   b9d3c:	f7fe f9ca 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b9d40:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b9d42:	68a8      	ldr	r0, [r5, #8]
   b9d44:	68e6      	ldr	r6, [r4, #12]
   b9d46:	2110      	movs	r1, #16
   b9d48:	f7fe f9c4 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d4c:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d4e:	68e3      	ldr	r3, [r4, #12]
   b9d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9d54:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d56:	68e3      	ldr	r3, [r4, #12]
   b9d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d5a:	b17a      	cbz	r2, b9d7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d5c:	7819      	ldrb	r1, [r3, #0]
   b9d5e:	0709      	lsls	r1, r1, #28
   b9d60:	d40c      	bmi.n	b9d7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b9d62:	1d19      	adds	r1, r3, #4
   b9d64:	3318      	adds	r3, #24
   b9d66:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d6a:	f842 0b04 	str.w	r0, [r2], #4
   b9d6e:	4299      	cmp	r1, r3
   b9d70:	d1f9      	bne.n	b9d66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d72:	68e2      	ldr	r2, [r4, #12]
   b9d74:	7813      	ldrb	r3, [r2, #0]
   b9d76:	f043 0308 	orr.w	r3, r3, #8
   b9d7a:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9d7c:	68e3      	ldr	r3, [r4, #12]
   b9d7e:	781b      	ldrb	r3, [r3, #0]
   b9d80:	075f      	lsls	r7, r3, #29
   b9d82:	f57f af6e 	bpl.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b9d86:	4629      	mov	r1, r5
   b9d88:	4620      	mov	r0, r4
}
   b9d8a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9d8e:	f7ff befd 	b.w	b9b8c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b9d92:	4a4a      	ldr	r2, [pc, #296]	; (b9ebc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9d94:	4293      	cmp	r3, r2
   b9d96:	d13d      	bne.n	b9e14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b9d98:	6906      	ldr	r6, [r0, #16]
   b9d9a:	2e00      	cmp	r6, #0
   b9d9c:	f43f af61 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9da0:	68a8      	ldr	r0, [r5, #8]
   b9da2:	2100      	movs	r1, #0
   b9da4:	f7fe f996 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9da8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9daa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9dac:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9dae:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9db0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9db2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9db4:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9db6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9db8:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9dba:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9dbc:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9dbe:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9dc0:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9dc2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9dc4:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9dc6:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9dc8:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b9dca:	68a8      	ldr	r0, [r5, #8]
   b9dcc:	6926      	ldr	r6, [r4, #16]
   b9dce:	2108      	movs	r1, #8
   b9dd0:	f7fe f980 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dd4:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b9dd6:	68a8      	ldr	r0, [r5, #8]
   b9dd8:	6926      	ldr	r6, [r4, #16]
   b9dda:	210c      	movs	r1, #12
   b9ddc:	f7fe f97a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9de0:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9de2:	6923      	ldr	r3, [r4, #16]
   b9de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9de8:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9dea:	6923      	ldr	r3, [r4, #16]
   b9dec:	6a1a      	ldr	r2, [r3, #32]
   b9dee:	b17a      	cbz	r2, b9e10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9df0:	7819      	ldrb	r1, [r3, #0]
   b9df2:	070e      	lsls	r6, r1, #28
   b9df4:	d40c      	bmi.n	b9e10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b9df6:	1d19      	adds	r1, r3, #4
   b9df8:	3314      	adds	r3, #20
   b9dfa:	f851 0b04 	ldr.w	r0, [r1], #4
   b9dfe:	f842 0b04 	str.w	r0, [r2], #4
   b9e02:	4299      	cmp	r1, r3
   b9e04:	d1f9      	bne.n	b9dfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e06:	6922      	ldr	r2, [r4, #16]
   b9e08:	7813      	ldrb	r3, [r2, #0]
   b9e0a:	f043 0308 	orr.w	r3, r3, #8
   b9e0e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b9e10:	6923      	ldr	r3, [r4, #16]
   b9e12:	e7b4      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b9e14:	4a2a      	ldr	r2, [pc, #168]	; (b9ec0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b9e16:	4293      	cmp	r3, r2
   b9e18:	d154      	bne.n	b9ec4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b9e1a:	6946      	ldr	r6, [r0, #20]
   b9e1c:	2e00      	cmp	r6, #0
   b9e1e:	f43f af20 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b9e22:	68a8      	ldr	r0, [r5, #8]
   b9e24:	2100      	movs	r1, #0
   b9e26:	f7fe f955 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e2a:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b9e2c:	68a8      	ldr	r0, [r5, #8]
   b9e2e:	6966      	ldr	r6, [r4, #20]
   b9e30:	2104      	movs	r1, #4
   b9e32:	f7fe f95c 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e36:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b9e38:	68a8      	ldr	r0, [r5, #8]
   b9e3a:	6966      	ldr	r6, [r4, #20]
   b9e3c:	2106      	movs	r1, #6
   b9e3e:	f7fe f956 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e42:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b9e44:	68a8      	ldr	r0, [r5, #8]
   b9e46:	6966      	ldr	r6, [r4, #20]
   b9e48:	2108      	movs	r1, #8
   b9e4a:	f7fe f950 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e4e:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b9e50:	68a8      	ldr	r0, [r5, #8]
   b9e52:	6966      	ldr	r6, [r4, #20]
   b9e54:	210a      	movs	r1, #10
   b9e56:	f7fe f94a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e5a:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b9e5c:	68a8      	ldr	r0, [r5, #8]
   b9e5e:	6966      	ldr	r6, [r4, #20]
   b9e60:	210c      	movs	r1, #12
   b9e62:	f7fe f944 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e66:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b9e68:	68a8      	ldr	r0, [r5, #8]
   b9e6a:	6966      	ldr	r6, [r4, #20]
   b9e6c:	210e      	movs	r1, #14
   b9e6e:	f7fe f93e 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e72:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9e74:	68a8      	ldr	r0, [r5, #8]
   b9e76:	6966      	ldr	r6, [r4, #20]
   b9e78:	2110      	movs	r1, #16
   b9e7a:	f7fe f938 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9e7e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e80:	6963      	ldr	r3, [r4, #20]
   b9e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9e86:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e88:	6963      	ldr	r3, [r4, #20]
   b9e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9e8c:	b17a      	cbz	r2, b9eae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e8e:	7819      	ldrb	r1, [r3, #0]
   b9e90:	0708      	lsls	r0, r1, #28
   b9e92:	d40c      	bmi.n	b9eae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9e94:	1d19      	adds	r1, r3, #4
   b9e96:	3318      	adds	r3, #24
   b9e98:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e9c:	f842 0b04 	str.w	r0, [r2], #4
   b9ea0:	4299      	cmp	r1, r3
   b9ea2:	d1f9      	bne.n	b9e98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ea4:	6962      	ldr	r2, [r4, #20]
   b9ea6:	7813      	ldrb	r3, [r2, #0]
   b9ea8:	f043 0308 	orr.w	r3, r3, #8
   b9eac:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9eae:	6963      	ldr	r3, [r4, #20]
   b9eb0:	e765      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9eb2:	bf00      	nop
   b9eb4:	00101400 	.word	0x00101400
   b9eb8:	00140100 	.word	0x00140100
   b9ebc:	00100300 	.word	0x00100300
   b9ec0:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9ec4:	4a8c      	ldr	r2, [pc, #560]	; (ba0f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9ec6:	4293      	cmp	r3, r2
   b9ec8:	d149      	bne.n	b9f5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9eca:	69c6      	ldr	r6, [r0, #28]
   b9ecc:	2e00      	cmp	r6, #0
   b9ece:	f43f aec8 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9ed2:	68a8      	ldr	r0, [r5, #8]
   b9ed4:	2100      	movs	r1, #0
   b9ed6:	f7fe f8fd 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9eda:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9edc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9ede:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9ee0:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9ee2:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ee4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9ee6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ee8:	2108      	movs	r1, #8
   b9eea:	f7fe f8f3 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9eee:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9ef2:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ef4:	210c      	movs	r1, #12
   b9ef6:	f7fe f8ed 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9efa:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9efc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9efe:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f00:	2110      	movs	r1, #16
   b9f02:	f7fe f8e7 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9f06:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9f08:	68a8      	ldr	r0, [r5, #8]
   b9f0a:	69e6      	ldr	r6, [r4, #28]
   b9f0c:	2114      	movs	r1, #20
   b9f0e:	f7fe f8e1 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f12:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9f14:	68a8      	ldr	r0, [r5, #8]
   b9f16:	69e6      	ldr	r6, [r4, #28]
   b9f18:	2118      	movs	r1, #24
   b9f1a:	f7fe f8db 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f1e:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9f20:	68a8      	ldr	r0, [r5, #8]
   b9f22:	69e6      	ldr	r6, [r4, #28]
   b9f24:	211c      	movs	r1, #28
   b9f26:	f7fe f8d5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f2a:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f2c:	69e3      	ldr	r3, [r4, #28]
   b9f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f32:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f34:	69e3      	ldr	r3, [r4, #28]
   b9f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9f38:	b17a      	cbz	r2, b9f5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f3a:	7819      	ldrb	r1, [r3, #0]
   b9f3c:	0709      	lsls	r1, r1, #28
   b9f3e:	d40c      	bmi.n	b9f5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9f40:	1d19      	adds	r1, r3, #4
   b9f42:	3324      	adds	r3, #36	; 0x24
   b9f44:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f48:	f842 0b04 	str.w	r0, [r2], #4
   b9f4c:	4299      	cmp	r1, r3
   b9f4e:	d1f9      	bne.n	b9f44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f50:	69e2      	ldr	r2, [r4, #28]
   b9f52:	7813      	ldrb	r3, [r2, #0]
   b9f54:	f043 0308 	orr.w	r3, r3, #8
   b9f58:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9f5a:	69e3      	ldr	r3, [r4, #28]
   b9f5c:	e70f      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9f5e:	4a67      	ldr	r2, [pc, #412]	; (ba0fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9f60:	4293      	cmp	r3, r2
   b9f62:	f040 80cd 	bne.w	ba100 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9f66:	6a06      	ldr	r6, [r0, #32]
   b9f68:	2e00      	cmp	r6, #0
   b9f6a:	f43f ae7a 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9f6e:	68a8      	ldr	r0, [r5, #8]
   b9f70:	2100      	movs	r1, #0
   b9f72:	f7fe f8af 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f76:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9f78:	68a8      	ldr	r0, [r5, #8]
   b9f7a:	6a26      	ldr	r6, [r4, #32]
   b9f7c:	2104      	movs	r1, #4
   b9f7e:	f7fe f8b6 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9f82:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9f84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9f86:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9f88:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9f8a:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9f8c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9f8e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9f90:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9f92:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9f94:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9f96:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9f98:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9f9a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9f9c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9f9e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fa0:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9fa2:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9fa4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9fa6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fa8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9faa:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9fac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9fae:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fb0:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9fb2:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9fb4:	210c      	movs	r1, #12
   b9fb6:	68a8      	ldr	r0, [r5, #8]
   b9fb8:	6a26      	ldr	r6, [r4, #32]
   b9fba:	f7fe f88b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fbe:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fc0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9fc2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fc4:	2110      	movs	r1, #16
   b9fc6:	f7fe f885 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9fca:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9fcc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9fce:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fd0:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9fd2:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9fd4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9fd6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fd8:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9fda:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9fdc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9fde:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fe0:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9fe2:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9fe4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9fe6:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9fe8:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9fea:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9fec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9fee:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ff0:	2118      	movs	r1, #24
   b9ff2:	f7fe f86f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9ff6:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ff8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9ffa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ffc:	211c      	movs	r1, #28
   b9ffe:	f7fe f869 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba002:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba004:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba006:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba008:	2120      	movs	r1, #32
   ba00a:	f7fe f863 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba00e:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba010:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba012:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba014:	2124      	movs	r1, #36	; 0x24
   ba016:	f7fe f85d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba01a:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba01c:	68a8      	ldr	r0, [r5, #8]
   ba01e:	6a26      	ldr	r6, [r4, #32]
   ba020:	2128      	movs	r1, #40	; 0x28
   ba022:	f7fe f857 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba026:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba028:	6a26      	ldr	r6, [r4, #32]
   ba02a:	68a8      	ldr	r0, [r5, #8]
   ba02c:	212c      	movs	r1, #44	; 0x2c
   ba02e:	f7fe f851 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba032:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba034:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba036:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba038:	2130      	movs	r1, #48	; 0x30
   ba03a:	f7fe f84b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba03e:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba040:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba042:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba044:	2134      	movs	r1, #52	; 0x34
   ba046:	f7fe f845 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba04a:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba04c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba04e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba050:	2138      	movs	r1, #56	; 0x38
   ba052:	f7fe f83f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba056:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba058:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba05a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba05c:	213c      	movs	r1, #60	; 0x3c
   ba05e:	f7fe f839 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba062:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba064:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba066:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba068:	2140      	movs	r1, #64	; 0x40
   ba06a:	f7fe f833 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba06e:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba070:	68a8      	ldr	r0, [r5, #8]
   ba072:	6a26      	ldr	r6, [r4, #32]
   ba074:	2144      	movs	r1, #68	; 0x44
   ba076:	f7fe f82d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba07a:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba07c:	68a8      	ldr	r0, [r5, #8]
   ba07e:	6a26      	ldr	r6, [r4, #32]
   ba080:	2148      	movs	r1, #72	; 0x48
   ba082:	f7fe f827 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba086:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba088:	68a8      	ldr	r0, [r5, #8]
   ba08a:	6a26      	ldr	r6, [r4, #32]
   ba08c:	214c      	movs	r1, #76	; 0x4c
   ba08e:	f7fe f82e 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba092:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba096:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba098:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba09a:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba09e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba0a2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a4:	68a8      	ldr	r0, [r5, #8]
   ba0a6:	2154      	movs	r1, #84	; 0x54
   ba0a8:	f7fe f814 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba0ac:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0ae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba0b0:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba0b2:	2158      	movs	r1, #88	; 0x58
   ba0b4:	f7fe f81b 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba0b8:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba0bc:	68a8      	ldr	r0, [r5, #8]
   ba0be:	6a26      	ldr	r6, [r4, #32]
   ba0c0:	215a      	movs	r1, #90	; 0x5a
   ba0c2:	f7fe f814 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0c6:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba0ca:	6a22      	ldr	r2, [r4, #32]
   ba0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba0d0:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba0d2:	6a22      	ldr	r2, [r4, #32]
   ba0d4:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba0d6:	6a21      	ldr	r1, [r4, #32]
   ba0d8:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba0da:	b158      	cbz	r0, ba0f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba0dc:	780b      	ldrb	r3, [r1, #0]
   ba0de:	071b      	lsls	r3, r3, #28
   ba0e0:	d408      	bmi.n	ba0f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba0e2:	225c      	movs	r2, #92	; 0x5c
   ba0e4:	3104      	adds	r1, #4
   ba0e6:	f008 faf5 	bl	c26d4 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba0ea:	6a22      	ldr	r2, [r4, #32]
   ba0ec:	7813      	ldrb	r3, [r2, #0]
   ba0ee:	f043 0308 	orr.w	r3, r3, #8
   ba0f2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba0f4:	6a23      	ldr	r3, [r4, #32]
   ba0f6:	e642      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba0f8:	00200500 	.word	0x00200500
   ba0fc:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba100:	4a8e      	ldr	r2, [pc, #568]	; (ba33c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba102:	4293      	cmp	r3, r2
   ba104:	d137      	bne.n	ba176 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba106:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba108:	2b00      	cmp	r3, #0
   ba10a:	f43f adaa 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba10e:	688a      	ldr	r2, [r1, #8]
   ba110:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba112:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba114:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba116:	68a8      	ldr	r0, [r5, #8]
   ba118:	2104      	movs	r1, #4
   ba11a:	f7fd ffdb 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba11e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba120:	68a8      	ldr	r0, [r5, #8]
   ba122:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba124:	2108      	movs	r1, #8
   ba126:	f7fd ffd5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba12a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba12c:	68a8      	ldr	r0, [r5, #8]
   ba12e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba130:	210c      	movs	r1, #12
   ba132:	f7fd ffcf 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba136:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba138:	68a8      	ldr	r0, [r5, #8]
   ba13a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba13c:	2110      	movs	r1, #16
   ba13e:	f7fd ffc9 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba142:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba144:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba14a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba14c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba14e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba150:	b17a      	cbz	r2, ba172 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba152:	7819      	ldrb	r1, [r3, #0]
   ba154:	070f      	lsls	r7, r1, #28
   ba156:	d40c      	bmi.n	ba172 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba158:	1d19      	adds	r1, r3, #4
   ba15a:	3318      	adds	r3, #24
   ba15c:	f851 0b04 	ldr.w	r0, [r1], #4
   ba160:	f842 0b04 	str.w	r0, [r2], #4
   ba164:	4299      	cmp	r1, r3
   ba166:	d1f9      	bne.n	ba15c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba168:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba16a:	7813      	ldrb	r3, [r2, #0]
   ba16c:	f043 0308 	orr.w	r3, r3, #8
   ba170:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba174:	e603      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba176:	4a72      	ldr	r2, [pc, #456]	; (ba340 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba178:	4293      	cmp	r3, r2
   ba17a:	d139      	bne.n	ba1f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba17c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba17e:	2e00      	cmp	r6, #0
   ba180:	f43f ad6f 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba184:	68a8      	ldr	r0, [r5, #8]
   ba186:	2100      	movs	r1, #0
   ba188:	f7fd ffa4 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba18c:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba18e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba192:	2104      	movs	r1, #4
   ba194:	f7fd ff9e 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba198:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba19a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba19e:	2108      	movs	r1, #8
   ba1a0:	f7fd ff98 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba1a4:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1a6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1aa:	210c      	movs	r1, #12
   ba1ac:	f7fd ff92 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba1b0:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba1b2:	68a8      	ldr	r0, [r5, #8]
   ba1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba1b6:	2110      	movs	r1, #16
   ba1b8:	f7fd ff8c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1bc:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba1c4:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba1c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba1ca:	b17a      	cbz	r2, ba1ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba1cc:	7819      	ldrb	r1, [r3, #0]
   ba1ce:	070e      	lsls	r6, r1, #28
   ba1d0:	d40c      	bmi.n	ba1ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba1d2:	1d19      	adds	r1, r3, #4
   ba1d4:	3318      	adds	r3, #24
   ba1d6:	f851 0b04 	ldr.w	r0, [r1], #4
   ba1da:	f842 0b04 	str.w	r0, [r2], #4
   ba1de:	4299      	cmp	r1, r3
   ba1e0:	d1f9      	bne.n	ba1d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba1e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba1e4:	7813      	ldrb	r3, [r2, #0]
   ba1e6:	f043 0308 	orr.w	r3, r3, #8
   ba1ea:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba1ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba1ee:	e5c6      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba1f0:	4a54      	ldr	r2, [pc, #336]	; (ba344 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba1f2:	4293      	cmp	r3, r2
   ba1f4:	d151      	bne.n	ba29a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba1f6:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba1f8:	2e00      	cmp	r6, #0
   ba1fa:	f43f ad32 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba1fe:	68a8      	ldr	r0, [r5, #8]
   ba200:	2100      	movs	r1, #0
   ba202:	f7fd ff67 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba206:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba208:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba20a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba20c:	2104      	movs	r1, #4
   ba20e:	f7fd ff61 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba212:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba214:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba216:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba218:	2108      	movs	r1, #8
   ba21a:	f7fd ff5b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba21e:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba220:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba222:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba224:	210c      	movs	r1, #12
   ba226:	f7fd ff55 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba22a:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba22c:	68a8      	ldr	r0, [r5, #8]
   ba22e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba230:	2110      	movs	r1, #16
   ba232:	f7fd ff4f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba236:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba238:	68a8      	ldr	r0, [r5, #8]
   ba23a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba23c:	2114      	movs	r1, #20
   ba23e:	f7fd ff49 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba242:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba244:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba246:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba248:	2118      	movs	r1, #24
   ba24a:	f7fd ff43 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba24e:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba250:	68a8      	ldr	r0, [r5, #8]
   ba252:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba254:	211c      	movs	r1, #28
   ba256:	f7fd ff3d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba25a:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba25c:	68a8      	ldr	r0, [r5, #8]
   ba25e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba260:	2120      	movs	r1, #32
   ba262:	f7fd ff37 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba266:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba268:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba26e:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba270:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba274:	b17a      	cbz	r2, ba296 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba276:	7819      	ldrb	r1, [r3, #0]
   ba278:	0708      	lsls	r0, r1, #28
   ba27a:	d40c      	bmi.n	ba296 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba27c:	1d19      	adds	r1, r3, #4
   ba27e:	3328      	adds	r3, #40	; 0x28
   ba280:	f851 0b04 	ldr.w	r0, [r1], #4
   ba284:	f842 0b04 	str.w	r0, [r2], #4
   ba288:	4299      	cmp	r1, r3
   ba28a:	d1f9      	bne.n	ba280 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba28c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba28e:	7813      	ldrb	r3, [r2, #0]
   ba290:	f043 0308 	orr.w	r3, r3, #8
   ba294:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba296:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba298:	e571      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba29a:	4a2b      	ldr	r2, [pc, #172]	; (ba348 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba29c:	4293      	cmp	r3, r2
   ba29e:	d155      	bne.n	ba34c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba2a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba2a2:	2b00      	cmp	r3, #0
   ba2a4:	f43f acdd 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba2a8:	688a      	ldr	r2, [r1, #8]
   ba2aa:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba2ac:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba2ae:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba2b0:	68a8      	ldr	r0, [r5, #8]
   ba2b2:	2104      	movs	r1, #4
   ba2b4:	f7fd ff0e 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2b8:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2ba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba2bc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2be:	2108      	movs	r1, #8
   ba2c0:	f7fd ff08 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba2c4:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba2c8:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2ca:	210c      	movs	r1, #12
   ba2cc:	f7fd ff02 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba2d0:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba2d4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d6:	2110      	movs	r1, #16
   ba2d8:	f7fd fefc 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba2dc:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba2de:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba2e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba2e2:	7d12      	ldrb	r2, [r2, #20]
   ba2e4:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba2e6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba2e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba2ea:	7d52      	ldrb	r2, [r2, #21]
   ba2ec:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba2ee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba2f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba2f2:	7d92      	ldrb	r2, [r2, #22]
   ba2f4:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba2f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba2f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba2fa:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba2fc:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba2fe:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba300:	68a8      	ldr	r0, [r5, #8]
   ba302:	2118      	movs	r1, #24
   ba304:	f7fd fee6 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba308:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba30c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba310:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba312:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba316:	b17a      	cbz	r2, ba338 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba318:	7819      	ldrb	r1, [r3, #0]
   ba31a:	0709      	lsls	r1, r1, #28
   ba31c:	d40c      	bmi.n	ba338 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba31e:	1d19      	adds	r1, r3, #4
   ba320:	3320      	adds	r3, #32
   ba322:	f851 0b04 	ldr.w	r0, [r1], #4
   ba326:	f842 0b04 	str.w	r0, [r2], #4
   ba32a:	4299      	cmp	r1, r3
   ba32c:	d1f9      	bne.n	ba322 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba32e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba330:	7813      	ldrb	r3, [r2, #0]
   ba332:	f043 0308 	orr.w	r3, r3, #8
   ba336:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba338:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba33a:	e520      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba33c:	00140900 	.word	0x00140900
   ba340:	00141100 	.word	0x00141100
   ba344:	00241200 	.word	0x00241200
   ba348:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba34c:	4a30      	ldr	r2, [pc, #192]	; (ba410 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba34e:	4293      	cmp	r3, r2
   ba350:	d160      	bne.n	ba414 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba352:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba354:	2b00      	cmp	r3, #0
   ba356:	f43f ac84 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba35a:	688a      	ldr	r2, [r1, #8]
   ba35c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba35e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba360:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba362:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba364:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba366:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba368:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba36a:	68a8      	ldr	r0, [r5, #8]
   ba36c:	2104      	movs	r1, #4
   ba36e:	f7fd feb1 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba372:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba374:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba376:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba378:	2108      	movs	r1, #8
   ba37a:	f7fd feab 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba37e:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba380:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba382:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba384:	210c      	movs	r1, #12
   ba386:	f7fd fea5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba38a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba38c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba38e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba390:	2110      	movs	r1, #16
   ba392:	f7fd fe9f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba396:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba398:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba39a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba39c:	2114      	movs	r1, #20
   ba39e:	f7fd fe99 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba3a2:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba3a4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba3a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3a8:	7e12      	ldrb	r2, [r2, #24]
   ba3aa:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba3ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba3ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3b0:	7e52      	ldrb	r2, [r2, #25]
   ba3b2:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba3b4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba3b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3b8:	7e92      	ldrb	r2, [r2, #26]
   ba3ba:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba3bc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba3be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3c0:	7ed2      	ldrb	r2, [r2, #27]
   ba3c2:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba3c4:	68a8      	ldr	r0, [r5, #8]
   ba3c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba3c8:	211c      	movs	r1, #28
   ba3ca:	f7fd fe83 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3ce:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba3d0:	68a8      	ldr	r0, [r5, #8]
   ba3d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba3d4:	2120      	movs	r1, #32
   ba3d6:	f7fd fe7d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3da:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3e2:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba3e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba3e8:	b17a      	cbz	r2, ba40a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3ea:	7819      	ldrb	r1, [r3, #0]
   ba3ec:	070f      	lsls	r7, r1, #28
   ba3ee:	d40c      	bmi.n	ba40a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba3f0:	1d19      	adds	r1, r3, #4
   ba3f2:	3328      	adds	r3, #40	; 0x28
   ba3f4:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3f8:	f842 0b04 	str.w	r0, [r2], #4
   ba3fc:	4299      	cmp	r1, r3
   ba3fe:	d1f9      	bne.n	ba3f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba400:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba402:	7813      	ldrb	r3, [r2, #0]
   ba404:	f043 0308 	orr.w	r3, r3, #8
   ba408:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba40a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba40c:	e4b7      	b.n	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba40e:	bf00      	nop
   ba410:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba414:	4aa1      	ldr	r2, [pc, #644]	; (ba69c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba416:	4293      	cmp	r3, r2
   ba418:	f040 80f0 	bne.w	ba5fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba41c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba41e:	2e00      	cmp	r6, #0
   ba420:	f43f ac1f 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba424:	68a8      	ldr	r0, [r5, #8]
   ba426:	2100      	movs	r1, #0
   ba428:	f7fd fe54 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba42c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba42e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba430:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba432:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba434:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba436:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba438:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba43a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba43c:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba43e:	68a8      	ldr	r0, [r5, #8]
   ba440:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba442:	2106      	movs	r1, #6
   ba444:	f7fd fe53 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba448:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   ba44a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba44c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba44e:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   ba450:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba452:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba456:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   ba458:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba45a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba45c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba45e:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   ba460:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba462:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba466:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   ba468:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   ba46a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba46c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba46e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba470:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba472:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba474:	68a8      	ldr	r0, [r5, #8]
   ba476:	2110      	movs	r1, #16
   ba478:	f7fd fe2c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba47c:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba47e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba480:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba482:	2114      	movs	r1, #20
   ba484:	f7fd fe26 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba488:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba48a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba48c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba48e:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba490:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba492:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba496:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba498:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba49a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba49c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba49e:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba4a0:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba4a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba4a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba4a6:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba4a8:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4aa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba4ac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ae:	211c      	movs	r1, #28
   ba4b0:	f7fd fe10 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba4b4:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba4b8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ba:	2120      	movs	r1, #32
   ba4bc:	f7fd fe0a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba4c0:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4c2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba4c4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4c6:	2124      	movs	r1, #36	; 0x24
   ba4c8:	f7fd fe04 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba4cc:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba4d0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4d2:	2128      	movs	r1, #40	; 0x28
   ba4d4:	f7fd fdfe 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba4d8:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba4da:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba4dc:	68a8      	ldr	r0, [r5, #8]
   ba4de:	212c      	movs	r1, #44	; 0x2c
   ba4e0:	f7fd fdf8 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4e4:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba4e6:	68a8      	ldr	r0, [r5, #8]
   ba4e8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba4ea:	2130      	movs	r1, #48	; 0x30
   ba4ec:	f7fd fdf2 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4f0:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4f2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba4f4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4f6:	2134      	movs	r1, #52	; 0x34
   ba4f8:	f7fd fdec 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba4fc:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4fe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba500:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba502:	2138      	movs	r1, #56	; 0x38
   ba504:	f7fd fde6 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba508:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba50a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba50c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba50e:	213c      	movs	r1, #60	; 0x3c
   ba510:	f7fd fde0 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba514:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba516:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba518:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba51a:	2140      	movs	r1, #64	; 0x40
   ba51c:	f7fd fdda 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba520:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba522:	68a8      	ldr	r0, [r5, #8]
   ba524:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba526:	2144      	movs	r1, #68	; 0x44
   ba528:	f7fd fdd4 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba52c:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba52e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba530:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba532:	2148      	movs	r1, #72	; 0x48
   ba534:	f7fd fdce 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba538:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba53a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba53c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba53e:	214c      	movs	r1, #76	; 0x4c
   ba540:	f7fd fdc8 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba544:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba546:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba548:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba54a:	2150      	movs	r1, #80	; 0x50
   ba54c:	f7fd fdc2 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba550:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba552:	2154      	movs	r1, #84	; 0x54
   ba554:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba556:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba558:	f7fd fdbc 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba55c:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba55e:	68a8      	ldr	r0, [r5, #8]
   ba560:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba562:	2158      	movs	r1, #88	; 0x58
   ba564:	f7fd fdc3 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba568:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba56c:	68a8      	ldr	r0, [r5, #8]
   ba56e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba570:	215a      	movs	r1, #90	; 0x5a
   ba572:	f7fd fdbc 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba576:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba57a:	68a8      	ldr	r0, [r5, #8]
   ba57c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba57e:	215c      	movs	r1, #92	; 0x5c
   ba580:	f7fd fdb5 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba584:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba588:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba58a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba58c:	215e      	movs	r1, #94	; 0x5e
   ba58e:	f7fd fdae 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba592:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba596:	68a8      	ldr	r0, [r5, #8]
   ba598:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba59a:	2160      	movs	r1, #96	; 0x60
   ba59c:	f7fd fda7 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5a0:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba5a4:	68a8      	ldr	r0, [r5, #8]
   ba5a6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5a8:	2162      	movs	r1, #98	; 0x62
   ba5aa:	f7fd fda0 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba5ae:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba5b2:	68a8      	ldr	r0, [r5, #8]
   ba5b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5b6:	2164      	movs	r1, #100	; 0x64
   ba5b8:	f7fd fd8c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5bc:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba5be:	68a8      	ldr	r0, [r5, #8]
   ba5c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba5c2:	2168      	movs	r1, #104	; 0x68
   ba5c4:	f7fd fd86 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5c8:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba5ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba5cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba5d0:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba5d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba5d4:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba5d8:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba5dc:	b158      	cbz	r0, ba5f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5de:	780b      	ldrb	r3, [r1, #0]
   ba5e0:	071e      	lsls	r6, r3, #28
   ba5e2:	d408      	bmi.n	ba5f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba5e4:	2274      	movs	r2, #116	; 0x74
   ba5e6:	3104      	adds	r1, #4
   ba5e8:	f008 f874 	bl	c26d4 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba5ee:	7813      	ldrb	r3, [r2, #0]
   ba5f0:	f043 0308 	orr.w	r3, r3, #8
   ba5f4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba5f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba5f8:	f7ff bbc1 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba5fc:	4a28      	ldr	r2, [pc, #160]	; (ba6a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba5fe:	4293      	cmp	r3, r2
   ba600:	d150      	bne.n	ba6a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba602:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba604:	2e00      	cmp	r6, #0
   ba606:	f43f ab2c 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba60a:	68a8      	ldr	r0, [r5, #8]
   ba60c:	2100      	movs	r1, #0
   ba60e:	f7fd fd61 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba612:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba614:	68a8      	ldr	r0, [r5, #8]
   ba616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba618:	2104      	movs	r1, #4
   ba61a:	f7fd fd5b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba61e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba620:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba624:	2108      	movs	r1, #8
   ba626:	f7fd fd55 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba62a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba62c:	68a8      	ldr	r0, [r5, #8]
   ba62e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba630:	210c      	movs	r1, #12
   ba632:	f7fd fd5c 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba636:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba638:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba63a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba63c:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba63e:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba640:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba642:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba644:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba646:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba648:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba64a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba64c:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba64e:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba650:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba654:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba656:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba658:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba65a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba65c:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba65e:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba662:	68aa      	ldr	r2, [r5, #8]
   ba664:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba666:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba668:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba66a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba66e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba672:	6a1a      	ldr	r2, [r3, #32]
   ba674:	b17a      	cbz	r2, ba696 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba676:	7819      	ldrb	r1, [r3, #0]
   ba678:	0708      	lsls	r0, r1, #28
   ba67a:	d40c      	bmi.n	ba696 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba67c:	1d19      	adds	r1, r3, #4
   ba67e:	3318      	adds	r3, #24
   ba680:	f851 0b04 	ldr.w	r0, [r1], #4
   ba684:	f842 0b04 	str.w	r0, [r2], #4
   ba688:	4299      	cmp	r1, r3
   ba68a:	d1f9      	bne.n	ba680 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba68c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba68e:	7813      	ldrb	r3, [r2, #0]
   ba690:	f043 0308 	orr.w	r3, r3, #8
   ba694:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba698:	f7ff bb71 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba69c:	00741700 	.word	0x00741700
   ba6a0:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba6a4:	4a84      	ldr	r2, [pc, #528]	; (ba8b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba6a6:	4293      	cmp	r3, r2
   ba6a8:	d13a      	bne.n	ba720 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba6aa:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba6ac:	2e00      	cmp	r6, #0
   ba6ae:	f43f aad8 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba6b2:	68a8      	ldr	r0, [r5, #8]
   ba6b4:	2100      	movs	r1, #0
   ba6b6:	f7fd fd0d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ba:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6bc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba6be:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6c0:	2104      	movs	r1, #4
   ba6c2:	f7fd fd07 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba6c6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6c8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba6ca:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba6cc:	2108      	movs	r1, #8
   ba6ce:	f7fd fd01 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba6d2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba6d4:	68a8      	ldr	r0, [r5, #8]
   ba6d6:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba6d8:	210c      	movs	r1, #12
   ba6da:	f7fd fcfb 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6de:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba6e0:	68a8      	ldr	r0, [r5, #8]
   ba6e2:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba6e4:	2110      	movs	r1, #16
   ba6e6:	f7fd fcf5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ea:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba6f2:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba6f8:	b17a      	cbz	r2, ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6fa:	7819      	ldrb	r1, [r3, #0]
   ba6fc:	0709      	lsls	r1, r1, #28
   ba6fe:	d40c      	bmi.n	ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba700:	1d19      	adds	r1, r3, #4
   ba702:	3318      	adds	r3, #24
   ba704:	f851 0b04 	ldr.w	r0, [r1], #4
   ba708:	f842 0b04 	str.w	r0, [r2], #4
   ba70c:	4299      	cmp	r1, r3
   ba70e:	d1f9      	bne.n	ba704 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba710:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba712:	7813      	ldrb	r3, [r2, #0]
   ba714:	f043 0308 	orr.w	r3, r3, #8
   ba718:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba71c:	f7ff bb2f 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba720:	4a66      	ldr	r2, [pc, #408]	; (ba8bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba722:	4293      	cmp	r3, r2
   ba724:	d138      	bne.n	ba798 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba726:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba728:	2e00      	cmp	r6, #0
   ba72a:	f43f aa9a 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba72e:	68a8      	ldr	r0, [r5, #8]
   ba730:	2100      	movs	r1, #0
   ba732:	f7fd fccf 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba736:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba738:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba73a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba73c:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba73e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba740:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba742:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba744:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba746:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba748:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba74a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba74c:	7a52      	ldrb	r2, [r2, #9]
   ba74e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba750:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba752:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba754:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba756:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba758:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba75a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba75c:	7ad2      	ldrb	r2, [r2, #11]
   ba75e:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba760:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba762:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba764:	210c      	movs	r1, #12
   ba766:	f7fd fcb5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba76a:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba76c:	68a8      	ldr	r0, [r5, #8]
   ba76e:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba770:	2110      	movs	r1, #16
   ba772:	f7fd fcbc 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba776:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba778:	68a8      	ldr	r0, [r5, #8]
   ba77a:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba77c:	2112      	movs	r1, #18
   ba77e:	f7fd fcb6 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba782:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba784:	68ab      	ldr	r3, [r5, #8]
   ba786:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba788:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba78a:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba78c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba792:	61da      	str	r2, [r3, #28]
   ba794:	f7ff ba65 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba798:	4a49      	ldr	r2, [pc, #292]	; (ba8c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba79a:	4293      	cmp	r3, r2
   ba79c:	d162      	bne.n	ba864 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba79e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba7a0:	2b00      	cmp	r3, #0
   ba7a2:	f43f aa5e 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba7a6:	688a      	ldr	r2, [r1, #8]
   ba7a8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba7aa:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba7ac:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba7ae:	68a8      	ldr	r0, [r5, #8]
   ba7b0:	2104      	movs	r1, #4
   ba7b2:	f7fd fc8f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7b6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba7b8:	68a8      	ldr	r0, [r5, #8]
   ba7ba:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba7bc:	2108      	movs	r1, #8
   ba7be:	f7fd fc89 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7c2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7c4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba7c6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7c8:	210c      	movs	r1, #12
   ba7ca:	f7fd fc83 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba7ce:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba7d2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d4:	2110      	movs	r1, #16
   ba7d6:	f7fd fc7d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba7da:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba7de:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7e0:	2114      	movs	r1, #20
   ba7e2:	f7fd fc77 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba7e6:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba7e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba7ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba7ec:	7e12      	ldrb	r2, [r2, #24]
   ba7ee:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba7f0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba7f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba7f4:	7e52      	ldrb	r2, [r2, #25]
   ba7f6:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba7f8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba7fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba7fc:	7e92      	ldrb	r2, [r2, #26]
   ba7fe:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba800:	211c      	movs	r1, #28
   ba802:	68a8      	ldr	r0, [r5, #8]
   ba804:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba806:	f7fd fc65 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba80a:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba80c:	68a8      	ldr	r0, [r5, #8]
   ba80e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba810:	2120      	movs	r1, #32
   ba812:	f7fd fc5f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba816:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba818:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba81a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba81c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba824:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba826:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba828:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba82c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba830:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba836:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba838:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba83a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba83c:	b17a      	cbz	r2, ba85e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba83e:	7819      	ldrb	r1, [r3, #0]
   ba840:	070f      	lsls	r7, r1, #28
   ba842:	d40c      	bmi.n	ba85e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba844:	1d19      	adds	r1, r3, #4
   ba846:	332c      	adds	r3, #44	; 0x2c
   ba848:	f851 0b04 	ldr.w	r0, [r1], #4
   ba84c:	f842 0b04 	str.w	r0, [r2], #4
   ba850:	4299      	cmp	r1, r3
   ba852:	d1f9      	bne.n	ba848 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba854:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba856:	7813      	ldrb	r3, [r2, #0]
   ba858:	f043 0308 	orr.w	r3, r3, #8
   ba85c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba85e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba860:	f7ff ba8d 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba864:	784a      	ldrb	r2, [r1, #1]
   ba866:	2a35      	cmp	r2, #53	; 0x35
   ba868:	d17f      	bne.n	ba96a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba86a:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba86c:	2e00      	cmp	r6, #0
   ba86e:	f43f a9f8 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba872:	68a8      	ldr	r0, [r5, #8]
   ba874:	2100      	movs	r1, #0
   ba876:	f7fd fc2d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba87a:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba87c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba87e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba880:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba882:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba884:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba886:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba888:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba88a:	725a      	strb	r2, [r3, #9]
   ba88c:	f04f 0808 	mov.w	r8, #8
   ba890:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba892:	f04f 0a0c 	mov.w	sl, #12
   ba896:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba898:	7a59      	ldrb	r1, [r3, #9]
   ba89a:	b2ba      	uxth	r2, r7
   ba89c:	4291      	cmp	r1, r2
   ba89e:	d811      	bhi.n	ba8c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba8a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba8a2:	2201      	movs	r2, #1
   ba8a4:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba8a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba8aa:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba8ae:	2800      	cmp	r0, #0
   ba8b0:	d14d      	bne.n	ba94e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba8b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba8b4:	f7ff ba63 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba8b8:	00142200 	.word	0x00142200
   ba8bc:	00182600 	.word	0x00182600
   ba8c0:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba8c4:	886a      	ldrh	r2, [r5, #2]
   ba8c6:	fb0a f607 	mul.w	r6, sl, r7
   ba8ca:	3a08      	subs	r2, #8
   ba8cc:	42b2      	cmp	r2, r6
   ba8ce:	dde7      	ble.n	ba8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba8d0:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba8d2:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba8d4:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba8d8:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba8da:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba8dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba8de:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba8e0:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba8e2:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba8e4:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba8e6:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba8e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba8ea:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba8ec:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba8ee:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba8f0:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba8f2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba8f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba8f6:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba8f8:	4433      	add	r3, r6
   ba8fa:	78d2      	ldrb	r2, [r2, #3]
   ba8fc:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba8fe:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba902:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba906:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba90a:	68a8      	ldr	r0, [r5, #8]
   ba90c:	b289      	uxth	r1, r1
   ba90e:	f7fd fbee 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba912:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba914:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba918:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba91c:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba920:	68a8      	ldr	r0, [r5, #8]
   ba922:	b289      	uxth	r1, r1
   ba924:	f7fd fbe3 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba928:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba92a:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba92e:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba932:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba936:	68a8      	ldr	r0, [r5, #8]
   ba938:	b289      	uxth	r1, r1
   ba93a:	f7fd fbcb 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba93e:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba940:	3701      	adds	r7, #1
   ba942:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba944:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba946:	f108 080c 	add.w	r8, r8, #12
   ba94a:	d1a4      	bne.n	ba896 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba94c:	e7a8      	b.n	ba8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba94e:	780b      	ldrb	r3, [r1, #0]
   ba950:	071e      	lsls	r6, r3, #28
   ba952:	d4ae      	bmi.n	ba8b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba954:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba958:	3104      	adds	r1, #4
   ba95a:	f007 febb 	bl	c26d4 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba95e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba960:	7813      	ldrb	r3, [r2, #0]
   ba962:	f043 0308 	orr.w	r3, r3, #8
   ba966:	7013      	strb	r3, [r2, #0]
   ba968:	e7a3      	b.n	ba8b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba96a:	2a3c      	cmp	r2, #60	; 0x3c
   ba96c:	f040 80bf 	bne.w	baaee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba970:	884a      	ldrh	r2, [r1, #2]
   ba972:	2a28      	cmp	r2, #40	; 0x28
   ba974:	d002      	beq.n	ba97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba976:	2a40      	cmp	r2, #64	; 0x40
   ba978:	f040 80b9 	bne.w	baaee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba97c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba97e:	2b00      	cmp	r3, #0
   ba980:	f43f a96f 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba984:	68aa      	ldr	r2, [r5, #8]
   ba986:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba988:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba98a:	68a8      	ldr	r0, [r5, #8]
   ba98c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba98e:	2102      	movs	r1, #2
   ba990:	f7fd fbad 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba994:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba996:	68a8      	ldr	r0, [r5, #8]
   ba998:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba99a:	2104      	movs	r1, #4
   ba99c:	f7fd fb9a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9a0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba9a4:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9a6:	2108      	movs	r1, #8
   ba9a8:	f7fd fb94 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba9ac:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9ae:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba9b0:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9b2:	210c      	movs	r1, #12
   ba9b4:	f7fd fb8e 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba9b8:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9ba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba9bc:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba9be:	2110      	movs	r1, #16
   ba9c0:	f7fd fb88 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba9c4:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba9c6:	886b      	ldrh	r3, [r5, #2]
   ba9c8:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba9ca:	2b28      	cmp	r3, #40	; 0x28
   ba9cc:	d14b      	bne.n	baa66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba9ce:	2600      	movs	r6, #0
   ba9d0:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba9d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9d4:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba9d6:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba9d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9da:	7d12      	ldrb	r2, [r2, #20]
   ba9dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba9e0:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba9e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9e4:	7d52      	ldrb	r2, [r2, #21]
   ba9e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba9ea:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba9ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9ee:	7d92      	ldrb	r2, [r2, #22]
   ba9f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba9f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9f6:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba9fa:	68a8      	ldr	r0, [r5, #8]
   ba9fc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba9fe:	2118      	movs	r1, #24
   baa00:	f7fd fb68 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa04:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   baa06:	68a8      	ldr	r0, [r5, #8]
   baa08:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa0a:	211c      	movs	r1, #28
   baa0c:	f7fd fb62 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa10:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   baa12:	68a8      	ldr	r0, [r5, #8]
   baa14:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baa16:	2120      	movs	r1, #32
   baa18:	f7fd fb5c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa1c:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   baa1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa20:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   baa22:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa24:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   baa26:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baa28:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   baa2a:	68a8      	ldr	r0, [r5, #8]
   baa2c:	f7fd fb52 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa30:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baa32:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baa38:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   baa3e:	b17a      	cbz	r2, baa60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baa40:	7819      	ldrb	r1, [r3, #0]
   baa42:	0708      	lsls	r0, r1, #28
   baa44:	d40c      	bmi.n	baa60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   baa46:	1d19      	adds	r1, r3, #4
   baa48:	3344      	adds	r3, #68	; 0x44
   baa4a:	f851 0b04 	ldr.w	r0, [r1], #4
   baa4e:	f842 0b04 	str.w	r0, [r2], #4
   baa52:	4299      	cmp	r1, r3
   baa54:	d1f9      	bne.n	baa4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   baa56:	6d22      	ldr	r2, [r4, #80]	; 0x50
   baa58:	7813      	ldrb	r3, [r2, #0]
   baa5a:	f043 0308 	orr.w	r3, r3, #8
   baa5e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   baa60:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa62:	f7ff b98c 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa66:	68a8      	ldr	r0, [r5, #8]
   baa68:	2114      	movs	r1, #20
   baa6a:	f7fd fb33 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   baa6e:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa70:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   baa72:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa74:	2118      	movs	r1, #24
   baa76:	f7fd fb2d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   baa7a:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   baa7c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   baa7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa80:	f892 2020 	ldrb.w	r2, [r2, #32]
   baa84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baa88:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   baa8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa8c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   baa90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   baa94:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   baa96:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baa98:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   baa9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   baaa0:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   baaa2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baaa4:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   baaa8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   baaac:	68a8      	ldr	r0, [r5, #8]
   baaae:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baab0:	2124      	movs	r1, #36	; 0x24
   baab2:	f7fd fb0f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baab6:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   baab8:	68a8      	ldr	r0, [r5, #8]
   baaba:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baabc:	2128      	movs	r1, #40	; 0x28
   baabe:	f7fd fb09 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baac2:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   baac4:	68a8      	ldr	r0, [r5, #8]
   baac6:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baac8:	212c      	movs	r1, #44	; 0x2c
   baaca:	f7fd fb03 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baace:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   baad0:	68a8      	ldr	r0, [r5, #8]
   baad2:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baad4:	2130      	movs	r1, #48	; 0x30
   baad6:	f7fd fafd 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baada:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   baadc:	2134      	movs	r1, #52	; 0x34
   baade:	68a8      	ldr	r0, [r5, #8]
   baae0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baae2:	f7fd faf7 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baae6:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   baae8:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baaea:	213c      	movs	r1, #60	; 0x3c
   baaec:	e79d      	b.n	baa2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   baaee:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   baaf2:	d12a      	bne.n	bab4a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   baaf4:	6d66      	ldr	r6, [r4, #84]	; 0x54
   baaf6:	2e00      	cmp	r6, #0
   baaf8:	f43f a8b3 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   baafc:	68a8      	ldr	r0, [r5, #8]
   baafe:	2100      	movs	r1, #0
   bab00:	f7fd fae8 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab04:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bab06:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bab08:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bab0a:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bab0c:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bab0e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bab10:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bab12:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bab14:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bab18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab1c:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bab20:	6a1a      	ldr	r2, [r3, #32]
   bab22:	b17a      	cbz	r2, bab44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab24:	7819      	ldrb	r1, [r3, #0]
   bab26:	0709      	lsls	r1, r1, #28
   bab28:	d40c      	bmi.n	bab44 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   bab2a:	1d19      	adds	r1, r3, #4
   bab2c:	3314      	adds	r3, #20
   bab2e:	f851 0b04 	ldr.w	r0, [r1], #4
   bab32:	f842 0b04 	str.w	r0, [r2], #4
   bab36:	4299      	cmp	r1, r3
   bab38:	d1f9      	bne.n	bab2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bab3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   bab3c:	7813      	ldrb	r3, [r2, #0]
   bab3e:	f043 0308 	orr.w	r3, r3, #8
   bab42:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bab44:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bab46:	f7ff b91a 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bab4a:	4aa1      	ldr	r2, [pc, #644]	; (badd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bab4c:	4293      	cmp	r3, r2
   bab4e:	f47f a888 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   bab52:	69a6      	ldr	r6, [r4, #24]
   bab54:	2e00      	cmp	r6, #0
   bab56:	f43f a884 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   bab5a:	68a8      	ldr	r0, [r5, #8]
   bab5c:	2100      	movs	r1, #0
   bab5e:	f7fd fab9 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab62:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bab64:	69a3      	ldr	r3, [r4, #24]
   bab66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab6a:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab6c:	69a3      	ldr	r3, [r4, #24]
   bab6e:	691a      	ldr	r2, [r3, #16]
   bab70:	b14a      	cbz	r2, bab86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab72:	7819      	ldrb	r1, [r3, #0]
   bab74:	070f      	lsls	r7, r1, #28
   bab76:	d406      	bmi.n	bab86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   bab78:	685b      	ldr	r3, [r3, #4]
   bab7a:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bab7c:	69a2      	ldr	r2, [r4, #24]
   bab7e:	7813      	ldrb	r3, [r2, #0]
   bab80:	f043 0308 	orr.w	r3, r3, #8
   bab84:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bab86:	69a3      	ldr	r3, [r4, #24]
   bab88:	f7ff b8f9 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bab8c:	784b      	ldrb	r3, [r1, #1]
   bab8e:	2b72      	cmp	r3, #114	; 0x72
   bab90:	f040 80a4 	bne.w	bacdc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bab94:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bab96:	2b00      	cmp	r3, #0
   bab98:	d069      	beq.n	bac6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bab9a:	689b      	ldr	r3, [r3, #8]
   bab9c:	2b00      	cmp	r3, #0
   bab9e:	d066      	beq.n	bac6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   baba0:	688a      	ldr	r2, [r1, #8]
   baba2:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   baba4:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   baba6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   baba8:	68a8      	ldr	r0, [r5, #8]
   babaa:	689f      	ldr	r7, [r3, #8]
   babac:	4631      	mov	r1, r6
   babae:	f7fd fa9e 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babb2:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   babb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   babb6:	68a8      	ldr	r0, [r5, #8]
   babb8:	689e      	ldr	r6, [r3, #8]
   babba:	2104      	movs	r1, #4
   babbc:	f7fd fa8a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babc0:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   babc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   babc4:	68a8      	ldr	r0, [r5, #8]
   babc6:	689e      	ldr	r6, [r3, #8]
   babc8:	2108      	movs	r1, #8
   babca:	f7fd fa83 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babce:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   babd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   babd2:	68a8      	ldr	r0, [r5, #8]
   babd4:	689e      	ldr	r6, [r3, #8]
   babd6:	210c      	movs	r1, #12
   babd8:	f7fd fa7c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babdc:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   babde:	6da3      	ldr	r3, [r4, #88]	; 0x58
   babe0:	68a8      	ldr	r0, [r5, #8]
   babe2:	689e      	ldr	r6, [r3, #8]
   babe4:	2110      	movs	r1, #16
   babe6:	f7fd fa82 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babea:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   babec:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   babee:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   babf0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   babf2:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   babf4:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   babf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   babf8:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   babfa:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   babfc:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   babfe:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bac00:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac02:	689e      	ldr	r6, [r3, #8]
   bac04:	7833      	ldrb	r3, [r6, #0]
   bac06:	bb23      	cbnz	r3, bac52 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bac08:	68a8      	ldr	r0, [r5, #8]
   bac0a:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bac0e:	f7fd fa6e 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac12:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bac14:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bac16:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bac18:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bac1a:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bac1e:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bac20:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bac22:	689b      	ldr	r3, [r3, #8]
   bac24:	781a      	ldrb	r2, [r3, #0]
   bac26:	2a00      	cmp	r2, #0
   bac28:	f040 865d 	bne.w	bb8e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bac2c:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bac2e:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bac32:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bac34:	b299      	uxth	r1, r3
   bac36:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bac38:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bac3a:	d914      	bls.n	bac66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bac3c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bac40:	d011      	beq.n	bac66 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bac42:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bac44:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bac46:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bac48:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bac4a:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bac4c:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bac4e:	3301      	adds	r3, #1
   bac50:	e7f0      	b.n	bac34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bac52:	68a8      	ldr	r0, [r5, #8]
   bac54:	2114      	movs	r1, #20
   bac56:	f7fd fa4a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac5a:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bac5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bac5e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bac60:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bac62:	7d92      	ldrb	r2, [r2, #22]
   bac64:	e7db      	b.n	bac1e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bac66:	7813      	ldrb	r3, [r2, #0]
   bac68:	f043 0308 	orr.w	r3, r3, #8
   bac6c:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bac6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bac70:	2b00      	cmp	r3, #0
   bac72:	f43e aff6 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bac76:	689b      	ldr	r3, [r3, #8]
   bac78:	2b00      	cmp	r3, #0
   bac7a:	f43e aff2 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bac7e:	22b5      	movs	r2, #181	; 0xb5
   bac80:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bac82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bac84:	689b      	ldr	r3, [r3, #8]
   bac86:	2262      	movs	r2, #98	; 0x62
   bac88:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bac8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bac8c:	689b      	ldr	r3, [r3, #8]
   bac8e:	2202      	movs	r2, #2
   bac90:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bac92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bac94:	689b      	ldr	r3, [r3, #8]
   bac96:	2272      	movs	r2, #114	; 0x72
   bac98:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bac9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bac9c:	886a      	ldrh	r2, [r5, #2]
   bac9e:	689b      	ldr	r3, [r3, #8]
   baca0:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   baca2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baca4:	689a      	ldr	r2, [r3, #8]
   baca6:	886b      	ldrh	r3, [r5, #2]
   baca8:	0a1b      	lsrs	r3, r3, #8
   bacaa:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bacac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bacae:	886a      	ldrh	r2, [r5, #2]
   bacb0:	6898      	ldr	r0, [r3, #8]
   bacb2:	68a9      	ldr	r1, [r5, #8]
   bacb4:	3006      	adds	r0, #6
   bacb6:	f007 fd0d 	bl	c26d4 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bacba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bacbc:	7b2a      	ldrb	r2, [r5, #12]
   bacbe:	689b      	ldr	r3, [r3, #8]
   bacc0:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bacc4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bacc6:	7b6a      	ldrb	r2, [r5, #13]
   bacc8:	689b      	ldr	r3, [r3, #8]
   bacca:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bacce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bacd0:	7813      	ldrb	r3, [r2, #0]
   bacd2:	f043 0308 	orr.w	r3, r3, #8
   bacd6:	7013      	strb	r3, [r2, #0]
   bacd8:	f7fe bfc3 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bacdc:	2b73      	cmp	r3, #115	; 0x73
   bacde:	d14d      	bne.n	bad7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bace0:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bace2:	780b      	ldrb	r3, [r1, #0]
   bace4:	071e      	lsls	r6, r3, #28
   bace6:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bacea:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bacee:	d543      	bpl.n	bad78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bacf0:	0843      	lsrs	r3, r0, #1
   bacf2:	f47e afb6 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bacf6:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bacf8:	f44f 7688 	mov.w	r6, #272	; 0x110
   bacfc:	688b      	ldr	r3, [r1, #8]
   bacfe:	437e      	muls	r6, r7
   bad00:	22b5      	movs	r2, #181	; 0xb5
   bad02:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bad04:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad06:	689b      	ldr	r3, [r3, #8]
   bad08:	4433      	add	r3, r6
   bad0a:	2262      	movs	r2, #98	; 0x62
   bad0c:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bad0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad10:	689b      	ldr	r3, [r3, #8]
   bad12:	4433      	add	r3, r6
   bad14:	2202      	movs	r2, #2
   bad16:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bad18:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad1a:	689b      	ldr	r3, [r3, #8]
   bad1c:	4433      	add	r3, r6
   bad1e:	2273      	movs	r2, #115	; 0x73
   bad20:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bad22:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad24:	886a      	ldrh	r2, [r5, #2]
   bad26:	689b      	ldr	r3, [r3, #8]
   bad28:	4433      	add	r3, r6
   bad2a:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bad2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad2e:	886a      	ldrh	r2, [r5, #2]
   bad30:	689b      	ldr	r3, [r3, #8]
   bad32:	4433      	add	r3, r6
   bad34:	0a12      	lsrs	r2, r2, #8
   bad36:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bad38:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad3a:	886a      	ldrh	r2, [r5, #2]
   bad3c:	6898      	ldr	r0, [r3, #8]
   bad3e:	68a9      	ldr	r1, [r5, #8]
   bad40:	4430      	add	r0, r6
   bad42:	3006      	adds	r0, #6
   bad44:	f007 fcc6 	bl	c26d4 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bad48:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad4a:	7b2a      	ldrb	r2, [r5, #12]
   bad4c:	689b      	ldr	r3, [r3, #8]
   bad4e:	4433      	add	r3, r6
   bad50:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bad54:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bad56:	7b6a      	ldrb	r2, [r5, #13]
   bad58:	689b      	ldr	r3, [r3, #8]
   bad5a:	441e      	add	r6, r3
   bad5c:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bad60:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bad62:	780b      	ldrb	r3, [r1, #0]
   bad64:	2201      	movs	r2, #1
   bad66:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bad6a:	40ba      	lsls	r2, r7
   bad6c:	4302      	orrs	r2, r0
   bad6e:	f362 03c4 	bfi	r3, r2, #3, #2
   bad72:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bad74:	f7fe bf75 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bad78:	4617      	mov	r7, r2
   bad7a:	e7bd      	b.n	bacf8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bad7c:	2b34      	cmp	r3, #52	; 0x34
   bad7e:	d129      	bne.n	badd4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bad80:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bad82:	2b00      	cmp	r3, #0
   bad84:	f43e af6d 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bad88:	689b      	ldr	r3, [r3, #8]
   bad8a:	2b00      	cmp	r3, #0
   bad8c:	f43e af69 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bad90:	688a      	ldr	r2, [r1, #8]
   bad92:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bad94:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bad96:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bad98:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bad9a:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bad9c:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bad9e:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bada0:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bada2:	68a8      	ldr	r0, [r5, #8]
   bada4:	689e      	ldr	r6, [r3, #8]
   bada6:	2104      	movs	r1, #4
   bada8:	f7fd f994 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badac:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   badae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   badb0:	68a8      	ldr	r0, [r5, #8]
   badb2:	689e      	ldr	r6, [r3, #8]
   badb4:	2108      	movs	r1, #8
   badb6:	f7fd f99a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badba:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   badbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   badbe:	68a8      	ldr	r0, [r5, #8]
   badc0:	689e      	ldr	r6, [r3, #8]
   badc2:	210a      	movs	r1, #10
   badc4:	f7fd f993 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badc8:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   badca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   badcc:	e780      	b.n	bacd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   badce:	bf00      	nop
   badd0:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   badd4:	2b13      	cmp	r3, #19
   badd6:	d14a      	bne.n	bae6e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   badd8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   badda:	2b00      	cmp	r3, #0
   baddc:	f43e af41 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bade0:	688a      	ldr	r2, [r1, #8]
   bade2:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bade4:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bade6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bade8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   badea:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   badec:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   badee:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   badf0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   badf2:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   badf4:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   badf6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   badf8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   badfa:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   badfc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   badfe:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bae00:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae02:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bae04:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bae06:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bae08:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bae0a:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bae0c:	729a      	strb	r2, [r3, #10]
   bae0e:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bae10:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bae12:	7a3a      	ldrb	r2, [r7, #8]
   bae14:	b2f3      	uxtb	r3, r6
   bae16:	429a      	cmp	r2, r3
   bae18:	d809      	bhi.n	bae2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bae1a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bae1c:	2201      	movs	r2, #1
   bae1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae22:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bae24:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bae26:	b9a8      	cbnz	r0, bae54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bae28:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bae2a:	f7fe bfa8 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bae2e:	886b      	ldrh	r3, [r5, #2]
   bae30:	3b08      	subs	r3, #8
   bae32:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bae36:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bae3a:	ddee      	ble.n	bae1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bae3c:	3108      	adds	r1, #8
   bae3e:	68a8      	ldr	r0, [r5, #8]
   bae40:	b289      	uxth	r1, r1
   bae42:	f7fd f947 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae46:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bae4a:	3601      	adds	r6, #1
   bae4c:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bae4e:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bae50:	d1de      	bne.n	bae10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bae52:	e7e2      	b.n	bae1a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae54:	780b      	ldrb	r3, [r1, #0]
   bae56:	071b      	lsls	r3, r3, #28
   bae58:	d4e6      	bmi.n	bae28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bae5a:	2248      	movs	r2, #72	; 0x48
   bae5c:	3104      	adds	r1, #4
   bae5e:	f007 fc39 	bl	c26d4 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bae62:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bae64:	7813      	ldrb	r3, [r2, #0]
   bae66:	f043 0308 	orr.w	r3, r3, #8
   bae6a:	7013      	strb	r3, [r2, #0]
   bae6c:	e7dc      	b.n	bae28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bae6e:	2b15      	cmp	r3, #21
   bae70:	f47e aef7 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bae74:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bae76:	2b00      	cmp	r3, #0
   bae78:	f43e aef3 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bae7c:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bae7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bae80:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bae82:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bae84:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bae86:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bae88:	3101      	adds	r1, #1
   bae8a:	2908      	cmp	r1, #8
   bae8c:	d1f7      	bne.n	bae7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bae8e:	68a8      	ldr	r0, [r5, #8]
   bae90:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bae92:	f7fd f92c 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bae96:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bae98:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bae9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bae9c:	7a92      	ldrb	r2, [r2, #10]
   bae9e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baea0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baea2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baea4:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baea6:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baea8:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baeaa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baeac:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baeae:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baeb0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baeb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baeb4:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baeb6:	73da      	strb	r2, [r3, #15]
   baeb8:	2610      	movs	r6, #16
   baeba:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baebc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baebe:	7b51      	ldrb	r1, [r2, #13]
   baec0:	b2da      	uxtb	r2, r3
   baec2:	4291      	cmp	r1, r2
   baec4:	d80b      	bhi.n	baede <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baec6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baec8:	2201      	movs	r2, #1
   baeca:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baece:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baed0:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baed4:	2800      	cmp	r0, #0
   baed6:	d17f      	bne.n	bafd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baed8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baeda:	f7fe bf50 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baede:	886a      	ldrh	r2, [r5, #2]
   baee0:	3a10      	subs	r2, #16
   baee2:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baee6:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baeea:	ddec      	ble.n	baec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baeec:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baeee:	46b4      	mov	ip, r6
   baef0:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baef2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baef4:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baef6:	4440      	add	r0, r8
   baef8:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baefa:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baefe:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baf00:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf02:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf04:	4437      	add	r7, r6
   baf06:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf08:	4440      	add	r0, r8
   baf0a:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baf0c:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baf0e:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baf10:	2a03      	cmp	r2, #3
   baf12:	d80b      	bhi.n	baf2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf16:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf18:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   baf1c:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf20:	4440      	add	r0, r8
   baf22:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baf24:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baf28:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   baf2c:	3201      	adds	r2, #1
   baf2e:	2a08      	cmp	r2, #8
   baf30:	f10c 0c01 	add.w	ip, ip, #1
   baf34:	d1dd      	bne.n	baef2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   baf36:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baf38:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baf3a:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   baf3c:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baf3e:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   baf42:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baf44:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   baf46:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baf48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf4a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baf4c:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baf50:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baf52:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   baf54:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baf56:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf58:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baf5a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baf5e:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baf60:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf62:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baf64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf66:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baf68:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baf6c:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baf6e:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   baf70:	3118      	adds	r1, #24
   baf72:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   baf76:	68a8      	ldr	r0, [r5, #8]
   baf78:	b289      	uxth	r1, r1
   baf7a:	f7fd f8b8 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baf7e:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baf80:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   baf82:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   baf86:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   baf88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf8a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   baf8c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   baf8e:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   baf90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   baf94:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   baf96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baf98:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   baf9a:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   baf9c:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   baf9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bafa2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bafa4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafa6:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bafa8:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bafaa:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bafac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bafb0:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bafb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafb4:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bafb6:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bafb8:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bafba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bafbe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bafc0:	68aa      	ldr	r2, [r5, #8]
   bafc2:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bafc4:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bafc6:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bafc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bafcc:	f106 0620 	add.w	r6, r6, #32
   bafd0:	463b      	mov	r3, r7
   bafd2:	f47f af73 	bne.w	baebc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bafd6:	e776      	b.n	baec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bafd8:	780b      	ldrb	r3, [r1, #0]
   bafda:	071f      	lsls	r7, r3, #28
   bafdc:	f53f af7c 	bmi.w	baed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bafe0:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bafe4:	3102      	adds	r1, #2
   bafe6:	f007 fb75 	bl	c26d4 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bafea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bafec:	7813      	ldrb	r3, [r2, #0]
   bafee:	f043 0308 	orr.w	r3, r3, #8
   baff2:	7013      	strb	r3, [r2, #0]
   baff4:	e770      	b.n	baed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   baff6:	680b      	ldr	r3, [r1, #0]
   baff8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   baffc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb000:	d12f      	bne.n	bb062 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb002:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb004:	2b00      	cmp	r3, #0
   bb006:	f43e ae2c 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb00a:	688a      	ldr	r2, [r1, #8]
   bb00c:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb00e:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb010:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb012:	68a8      	ldr	r0, [r5, #8]
   bb014:	2102      	movs	r1, #2
   bb016:	f7fd f86a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb01a:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb01c:	68a8      	ldr	r0, [r5, #8]
   bb01e:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb020:	2104      	movs	r1, #4
   bb022:	f7fd f857 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb026:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb028:	68a8      	ldr	r0, [r5, #8]
   bb02a:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb02c:	2108      	movs	r1, #8
   bb02e:	f7fd f851 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb032:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb034:	68a8      	ldr	r0, [r5, #8]
   bb036:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb038:	210c      	movs	r1, #12
   bb03a:	f7fd f858 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb03e:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb040:	68a8      	ldr	r0, [r5, #8]
   bb042:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb044:	210e      	movs	r1, #14
   bb046:	f7fd f852 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb04a:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb04c:	68a8      	ldr	r0, [r5, #8]
   bb04e:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb050:	2110      	movs	r1, #16
   bb052:	f7fd f84c 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb056:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb058:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb05a:	2201      	movs	r2, #1
   bb05c:	751a      	strb	r2, [r3, #20]
   bb05e:	f7fe be00 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb062:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb066:	f47e adfc 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb06a:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb06c:	2e00      	cmp	r6, #0
   bb06e:	f43e adf8 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb072:	68a8      	ldr	r0, [r5, #8]
   bb074:	2100      	movs	r1, #0
   bb076:	f7fd f83a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb07a:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb07c:	68a8      	ldr	r0, [r5, #8]
   bb07e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb080:	2102      	movs	r1, #2
   bb082:	f7fd f834 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb086:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb088:	68a8      	ldr	r0, [r5, #8]
   bb08a:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb08c:	2104      	movs	r1, #4
   bb08e:	f7fd f82e 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb092:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb094:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb09a:	609a      	str	r2, [r3, #8]
   bb09c:	f7fe bde1 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb0a0:	680b      	ldr	r3, [r1, #0]
   bb0a2:	4ab0      	ldr	r2, [pc, #704]	; (bb364 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb0a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb0a8:	4293      	cmp	r3, r2
   bb0aa:	f47e adda 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb0ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb0b0:	2b00      	cmp	r3, #0
   bb0b2:	f43e add6 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb0b6:	688a      	ldr	r2, [r1, #8]
   bb0b8:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb0ba:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb0bc:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb0be:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb0c0:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb0c2:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb0c4:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb0c6:	68a8      	ldr	r0, [r5, #8]
   bb0c8:	2102      	movs	r1, #2
   bb0ca:	f7fd f810 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0ce:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb0d0:	68a8      	ldr	r0, [r5, #8]
   bb0d2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb0d4:	2104      	movs	r1, #4
   bb0d6:	f7fd f80a 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0da:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb0dc:	68a8      	ldr	r0, [r5, #8]
   bb0de:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb0e0:	2106      	movs	r1, #6
   bb0e2:	f7fd f804 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb0e6:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb0e8:	68a8      	ldr	r0, [r5, #8]
   bb0ea:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb0ec:	2108      	movs	r1, #8
   bb0ee:	f7fc fff1 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0f2:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb0f4:	68a8      	ldr	r0, [r5, #8]
   bb0f6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb0f8:	210c      	movs	r1, #12
   bb0fa:	f7fc ffeb 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0fe:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb100:	68a8      	ldr	r0, [r5, #8]
   bb102:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb104:	2110      	movs	r1, #16
   bb106:	f7fc ffe5 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb10a:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb10c:	68a8      	ldr	r0, [r5, #8]
   bb10e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb110:	2114      	movs	r1, #20
   bb112:	f7fc ffdf 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb116:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb118:	68a8      	ldr	r0, [r5, #8]
   bb11a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb11c:	2118      	movs	r1, #24
   bb11e:	f7fc ffd9 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb122:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb124:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb12a:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb12c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb130:	b17a      	cbz	r2, bb152 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb132:	7819      	ldrb	r1, [r3, #0]
   bb134:	070e      	lsls	r6, r1, #28
   bb136:	d40c      	bmi.n	bb152 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb138:	1d19      	adds	r1, r3, #4
   bb13a:	3320      	adds	r3, #32
   bb13c:	f851 0b04 	ldr.w	r0, [r1], #4
   bb140:	f842 0b04 	str.w	r0, [r2], #4
   bb144:	4299      	cmp	r1, r3
   bb146:	d1f9      	bne.n	bb13c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb148:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb14a:	7813      	ldrb	r3, [r2, #0]
   bb14c:	f043 0308 	orr.w	r3, r3, #8
   bb150:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb152:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb154:	f7fe be13 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb158:	4a83      	ldr	r2, [pc, #524]	; (bb368 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb15a:	4293      	cmp	r3, r2
   bb15c:	d158      	bne.n	bb210 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb15e:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb162:	2f00      	cmp	r7, #0
   bb164:	f43e ad7d 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb168:	68a8      	ldr	r0, [r5, #8]
   bb16a:	2100      	movs	r1, #0
   bb16c:	f7fc ffb2 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb170:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb172:	68a8      	ldr	r0, [r5, #8]
   bb174:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb178:	2108      	movs	r1, #8
   bb17a:	f7fc ffab 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb17e:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb180:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb182:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb186:	210c      	movs	r1, #12
   bb188:	f7fc ffa4 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb18c:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb18e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb190:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb194:	4631      	mov	r1, r6
   bb196:	f7fc ff9d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb19a:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb19c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb19e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1a2:	2114      	movs	r1, #20
   bb1a4:	f7fc ff96 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb1a8:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1aa:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb1ac:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1b0:	2118      	movs	r1, #24
   bb1b2:	f7fc ff8f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb1b6:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb1ba:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1be:	211c      	movs	r1, #28
   bb1c0:	f7fc ff88 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb1c4:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb1c8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb1cc:	2120      	movs	r1, #32
   bb1ce:	f7fc ff81 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb1d2:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb1d4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb1d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb1dc:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb1de:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb1e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb1e4:	b182      	cbz	r2, bb208 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb1e6:	7819      	ldrb	r1, [r3, #0]
   bb1e8:	0709      	lsls	r1, r1, #28
   bb1ea:	d40d      	bmi.n	bb208 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb1ec:	1d19      	adds	r1, r3, #4
   bb1ee:	3328      	adds	r3, #40	; 0x28
   bb1f0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb1f4:	f842 0b04 	str.w	r0, [r2], #4
   bb1f8:	4299      	cmp	r1, r3
   bb1fa:	d1f9      	bne.n	bb1f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb1fc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb200:	7813      	ldrb	r3, [r2, #0]
   bb202:	f043 0308 	orr.w	r3, r3, #8
   bb206:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb208:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb20c:	f7fe bdb7 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb210:	784b      	ldrb	r3, [r1, #1]
   bb212:	2b02      	cmp	r3, #2
   bb214:	d158      	bne.n	bb2c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb216:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb21a:	2e00      	cmp	r6, #0
   bb21c:	f43e ad21 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb220:	68a8      	ldr	r0, [r5, #8]
   bb222:	2100      	movs	r1, #0
   bb224:	f7fc ff56 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb228:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb22a:	68a8      	ldr	r0, [r5, #8]
   bb22c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb230:	2104      	movs	r1, #4
   bb232:	f7fc ff5c 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb236:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb238:	68a8      	ldr	r0, [r5, #8]
   bb23a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb23e:	2106      	movs	r1, #6
   bb240:	f7fc ff55 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb244:	8170      	strh	r0, [r6, #10]
   bb246:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb248:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb24c:	886b      	ldrh	r3, [r5, #2]
   bb24e:	7a7a      	ldrb	r2, [r7, #9]
   bb250:	b2b1      	uxth	r1, r6
   bb252:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb256:	d320      	bcc.n	bb29a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb258:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb25c:	886a      	ldrh	r2, [r5, #2]
   bb25e:	7a73      	ldrb	r3, [r6, #9]
   bb260:	08db      	lsrs	r3, r3, #3
   bb262:	3302      	adds	r3, #2
   bb264:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb268:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb26c:	d826      	bhi.n	bb2bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb26e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb272:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb276:	b160      	cbz	r0, bb292 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb278:	780b      	ldrb	r3, [r1, #0]
   bb27a:	071a      	lsls	r2, r3, #28
   bb27c:	d409      	bmi.n	bb292 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb27e:	2288      	movs	r2, #136	; 0x88
   bb280:	3104      	adds	r1, #4
   bb282:	f007 fa27 	bl	c26d4 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb286:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb28a:	7813      	ldrb	r3, [r2, #0]
   bb28c:	f043 0308 	orr.w	r3, r3, #8
   bb290:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb292:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb296:	f7fe bd72 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb29a:	3b08      	subs	r3, #8
   bb29c:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb2a0:	ddda      	ble.n	bb258 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb2a2:	0089      	lsls	r1, r1, #2
   bb2a4:	3108      	adds	r1, #8
   bb2a6:	68a8      	ldr	r0, [r5, #8]
   bb2a8:	b289      	uxth	r1, r1
   bb2aa:	f7fc ff13 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2ae:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb2b2:	3601      	adds	r6, #1
   bb2b4:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb2b6:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb2b8:	d1c6      	bne.n	bb248 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb2ba:	e7cd      	b.n	bb258 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb2bc:	68a8      	ldr	r0, [r5, #8]
   bb2be:	f7fc ff09 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2c2:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb2c6:	e7d2      	b.n	bb26e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb2c8:	2b03      	cmp	r3, #3
   bb2ca:	d14f      	bne.n	bb36c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb2cc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb2d0:	2900      	cmp	r1, #0
   bb2d2:	f43e acc6 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb2d6:	886a      	ldrh	r2, [r5, #2]
   bb2d8:	1f13      	subs	r3, r2, #4
   bb2da:	bf48      	it	mi
   bb2dc:	1cd3      	addmi	r3, r2, #3
   bb2de:	10db      	asrs	r3, r3, #3
   bb2e0:	2700      	movs	r7, #0
   bb2e2:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb2e6:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb2e8:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb2ea:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb2ee:	3b04      	subs	r3, #4
   bb2f0:	42bb      	cmp	r3, r7
   bb2f2:	dc08      	bgt.n	bb306 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2f4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb2f8:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb2fc:	bb10      	cbnz	r0, bb344 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb2fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb302:	f7fe bd3c 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb306:	fa1f f887 	uxth.w	r8, r7
   bb30a:	f108 0104 	add.w	r1, r8, #4
   bb30e:	68a8      	ldr	r0, [r5, #8]
   bb310:	b289      	uxth	r1, r1
   bb312:	f7fc fedf 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb316:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb31a:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb31e:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb322:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb326:	68a8      	ldr	r0, [r5, #8]
   bb328:	b289      	uxth	r1, r1
   bb32a:	f7fc fed3 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb32e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb332:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb334:	3601      	adds	r6, #1
   bb336:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb338:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb33c:	f107 0708 	add.w	r7, r7, #8
   bb340:	d1d2      	bne.n	bb2e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb342:	e7d7      	b.n	bb2f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb344:	780b      	ldrb	r3, [r1, #0]
   bb346:	071b      	lsls	r3, r3, #28
   bb348:	d4d9      	bmi.n	bb2fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb34a:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb34e:	3108      	adds	r1, #8
   bb350:	3004      	adds	r0, #4
   bb352:	f007 f9bf 	bl	c26d4 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb356:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb35a:	7813      	ldrb	r3, [r2, #0]
   bb35c:	f043 0308 	orr.w	r3, r3, #8
   bb360:	7013      	strb	r3, [r2, #0]
   bb362:	e7cc      	b.n	bb2fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb364:	001c0300 	.word	0x001c0300
   bb368:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb36c:	2b10      	cmp	r3, #16
   bb36e:	f47e ac78 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb372:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb376:	2e00      	cmp	r6, #0
   bb378:	f43e ac73 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb37c:	68a8      	ldr	r0, [r5, #8]
   bb37e:	2100      	movs	r1, #0
   bb380:	f7fc fea8 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb384:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb386:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb388:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb38c:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb38e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb390:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb392:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb396:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb398:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb39a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb39c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb3a0:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb3a2:	74da      	strb	r2, [r3, #19]
   bb3a4:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb3a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb3aa:	7cc6      	ldrb	r6, [r0, #19]
   bb3ac:	b28a      	uxth	r2, r1
   bb3ae:	4296      	cmp	r6, r2
   bb3b0:	d80c      	bhi.n	bb3cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb3b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb3b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb3ba:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb3bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb3c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb3c2:	bb62      	cbnz	r2, bb41e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb3c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb3c8:	f7fe bcd9 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb3cc:	886a      	ldrh	r2, [r5, #2]
   bb3ce:	3a10      	subs	r2, #16
   bb3d0:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb3d4:	dded      	ble.n	bb3b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb3d6:	68aa      	ldr	r2, [r5, #8]
   bb3d8:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb3da:	1d0a      	adds	r2, r1, #4
   bb3dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb3e0:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb3e2:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb3e4:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb3e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb3ea:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb3ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb3f0:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb3f2:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb3f4:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb3f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb3fa:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb3fc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb400:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb402:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb404:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb406:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb40a:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb40c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb410:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb412:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb414:	2907      	cmp	r1, #7
   bb416:	f103 0304 	add.w	r3, r3, #4
   bb41a:	d1c4      	bne.n	bb3a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb41c:	e7c9      	b.n	bb3b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb41e:	7819      	ldrb	r1, [r3, #0]
   bb420:	070f      	lsls	r7, r1, #28
   bb422:	d4cf      	bmi.n	bb3c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb424:	1d19      	adds	r1, r3, #4
   bb426:	3330      	adds	r3, #48	; 0x30
   bb428:	f851 0b04 	ldr.w	r0, [r1], #4
   bb42c:	f842 0b04 	str.w	r0, [r2], #4
   bb430:	4299      	cmp	r1, r3
   bb432:	d1f9      	bne.n	bb428 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb434:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb438:	7813      	ldrb	r3, [r2, #0]
   bb43a:	f043 0308 	orr.w	r3, r3, #8
   bb43e:	7013      	strb	r3, [r2, #0]
   bb440:	e7c0      	b.n	bb3c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb442:	680b      	ldr	r3, [r1, #0]
   bb444:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb448:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bb44c:	d16a      	bne.n	bb524 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bb44e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bb452:	2b00      	cmp	r3, #0
   bb454:	f43e ac05 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bb458:	7818      	ldrb	r0, [r3, #0]
   bb45a:	7859      	ldrb	r1, [r3, #1]
   bb45c:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb45e:	bf36      	itet	cc
   bb460:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bb464:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bb466:	1a52      	subcc	r2, r2, r1
   bb468:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bb46a:	2a0e      	cmp	r2, #14
   bb46c:	d84b      	bhi.n	bb506 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb46e:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb470:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb474:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb476:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb478:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb47c:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb47e:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb480:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb482:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb486:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb488:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb48c:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb48e:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb490:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb492:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb496:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb498:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb49c:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb49e:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb4a0:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb4a2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb4a6:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb4a8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb4ac:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb4ae:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb4b0:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb4b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb4b6:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb4b8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb4bc:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb4be:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb4c0:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb4c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb4c6:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb4c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb4cc:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb4ce:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb4d0:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb4d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb4d6:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb4d8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb4dc:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb4de:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb4e0:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb4e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb4e6:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb4e8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb4ec:	7813      	ldrb	r3, [r2, #0]
   bb4ee:	3301      	adds	r3, #1
   bb4f0:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb4f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb4f6:	781a      	ldrb	r2, [r3, #0]
   bb4f8:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb4fa:	f47e abb2 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb4fe:	2200      	movs	r2, #0
   bb500:	701a      	strb	r2, [r3, #0]
   bb502:	f7fe bbae 	b.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb506:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb50a:	b923      	cbnz	r3, bb516 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb50c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb510:	2b00      	cmp	r3, #0
   bb512:	f43e aba6 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb516:	4996      	ldr	r1, [pc, #600]	; (bb770 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb518:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb51c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb520:	f005 bc4f 	b.w	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb524:	784b      	ldrb	r3, [r1, #1]
   bb526:	2b80      	cmp	r3, #128	; 0x80
   bb528:	f47e ab9b 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb52c:	884b      	ldrh	r3, [r1, #2]
   bb52e:	2ba4      	cmp	r3, #164	; 0xa4
   bb530:	f63e ab97 	bhi.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb534:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb538:	2a00      	cmp	r2, #0
   bb53a:	f43e ab92 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb53e:	7810      	ldrb	r0, [r2, #0]
   bb540:	7851      	ldrb	r1, [r2, #1]
   bb542:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb544:	bf36      	itet	cc
   bb546:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb548:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb54a:	1a5b      	subcc	r3, r3, r1
   bb54c:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb54e:	2bf8      	cmp	r3, #248	; 0xf8
   bb550:	d84f      	bhi.n	bb5f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb552:	23ac      	movs	r3, #172	; 0xac
   bb554:	fb03 2200 	mla	r2, r3, r0, r2
   bb558:	21b5      	movs	r1, #181	; 0xb5
   bb55a:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb55c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb560:	7811      	ldrb	r1, [r2, #0]
   bb562:	fb03 2201 	mla	r2, r3, r1, r2
   bb566:	2162      	movs	r1, #98	; 0x62
   bb568:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb56a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb56e:	7811      	ldrb	r1, [r2, #0]
   bb570:	fb03 2201 	mla	r2, r3, r1, r2
   bb574:	2113      	movs	r1, #19
   bb576:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb578:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb57c:	7811      	ldrb	r1, [r2, #0]
   bb57e:	fb03 2201 	mla	r2, r3, r1, r2
   bb582:	2180      	movs	r1, #128	; 0x80
   bb584:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb586:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb58a:	7811      	ldrb	r1, [r2, #0]
   bb58c:	fb03 2201 	mla	r2, r3, r1, r2
   bb590:	8869      	ldrh	r1, [r5, #2]
   bb592:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb594:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb598:	7811      	ldrb	r1, [r2, #0]
   bb59a:	fb03 2201 	mla	r2, r3, r1, r2
   bb59e:	8869      	ldrh	r1, [r5, #2]
   bb5a0:	0a09      	lsrs	r1, r1, #8
   bb5a2:	71d1      	strb	r1, [r2, #7]
   bb5a4:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb5a6:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb5a8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb5ac:	b28e      	uxth	r6, r1
   bb5ae:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb5b0:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb5b2:	d907      	bls.n	bb5c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb5b4:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb5b6:	fb03 2200 	mla	r2, r3, r0, r2
   bb5ba:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb5bc:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb5be:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb5c0:	3101      	adds	r1, #1
   bb5c2:	e7f0      	b.n	bb5a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb5c4:	fb03 2200 	mla	r2, r3, r0, r2
   bb5c8:	7b29      	ldrb	r1, [r5, #12]
   bb5ca:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb5ce:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb5d2:	7b69      	ldrb	r1, [r5, #13]
   bb5d4:	7810      	ldrb	r0, [r2, #0]
   bb5d6:	fb03 2300 	mla	r3, r3, r0, r2
   bb5da:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb5de:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb5e2:	7813      	ldrb	r3, [r2, #0]
   bb5e4:	3301      	adds	r3, #1
   bb5e6:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb5e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb5ec:	781a      	ldrb	r2, [r3, #0]
   bb5ee:	2afa      	cmp	r2, #250	; 0xfa
   bb5f0:	e783      	b.n	bb4fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb5f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb5f6:	b923      	cbnz	r3, bb602 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb5f8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb5fc:	2b00      	cmp	r3, #0
   bb5fe:	f43e ab30 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb602:	495c      	ldr	r1, [pc, #368]	; (bb774 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb604:	e788      	b.n	bb518 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb606:	680b      	ldr	r3, [r1, #0]
   bb608:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb60c:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb610:	f040 80b2 	bne.w	bb778 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb614:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb618:	2f00      	cmp	r7, #0
   bb61a:	f43e ab22 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb61e:	68a8      	ldr	r0, [r5, #8]
   bb620:	2100      	movs	r1, #0
   bb622:	f7fc fd57 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb626:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb628:	68a8      	ldr	r0, [r5, #8]
   bb62a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb62e:	2104      	movs	r1, #4
   bb630:	f7fc fd5d 	bl	b80ee <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb634:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb636:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb638:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb63c:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb63e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb640:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb642:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb646:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb648:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb64a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb64c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb650:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb652:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb654:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb656:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb65a:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb65c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb65e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb660:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb664:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb666:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb668:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb66a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb66e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb670:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb672:	210c      	movs	r1, #12
   bb674:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb676:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb67a:	f7fc fd2b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb67e:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb680:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb682:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb686:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb688:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb68a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb68c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb690:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb692:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb694:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb696:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb69a:	2114      	movs	r1, #20
   bb69c:	f7fc fd1a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb6a0:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6a2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb6a4:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6a8:	2118      	movs	r1, #24
   bb6aa:	f7fc fd13 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb6ae:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb6b2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6b6:	211c      	movs	r1, #28
   bb6b8:	f7fc fd0c 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb6bc:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6be:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb6c0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6c4:	2120      	movs	r1, #32
   bb6c6:	f7fc fd05 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb6ca:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb6ce:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6d2:	2124      	movs	r1, #36	; 0x24
   bb6d4:	f7fc fcfe 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb6d8:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6da:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb6dc:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6e0:	4631      	mov	r1, r6
   bb6e2:	f7fc fcf7 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb6e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb6ea:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6ee:	212c      	movs	r1, #44	; 0x2c
   bb6f0:	f7fc fcf0 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb6f4:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6f6:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb6f8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb6fc:	2130      	movs	r1, #48	; 0x30
   bb6fe:	f7fc fce9 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb702:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb704:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb708:	68a8      	ldr	r0, [r5, #8]
   bb70a:	2134      	movs	r1, #52	; 0x34
   bb70c:	f7fc fce2 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb710:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb712:	68a8      	ldr	r0, [r5, #8]
   bb714:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb718:	2138      	movs	r1, #56	; 0x38
   bb71a:	f7fc fcdb 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb71e:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb720:	68a8      	ldr	r0, [r5, #8]
   bb722:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb726:	213c      	movs	r1, #60	; 0x3c
   bb728:	f7fc fcd4 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb72c:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb72e:	68a8      	ldr	r0, [r5, #8]
   bb730:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb734:	2140      	movs	r1, #64	; 0x40
   bb736:	f7fc fccd 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb73a:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb73c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb744:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb746:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb74a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb74c:	b160      	cbz	r0, bb768 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb74e:	780b      	ldrb	r3, [r1, #0]
   bb750:	071e      	lsls	r6, r3, #28
   bb752:	d409      	bmi.n	bb768 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb754:	2248      	movs	r2, #72	; 0x48
   bb756:	3104      	adds	r1, #4
   bb758:	f006 ffbc 	bl	c26d4 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb75c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb760:	7813      	ldrb	r3, [r2, #0]
   bb762:	f043 0308 	orr.w	r3, r3, #8
   bb766:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb768:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb76c:	f7fe bb07 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb770:	000c52c5 	.word	0x000c52c5
   bb774:	000c5302 	.word	0x000c5302
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb778:	4a5d      	ldr	r2, [pc, #372]	; (bb8f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb77a:	4293      	cmp	r3, r2
   bb77c:	d156      	bne.n	bb82c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb77e:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb782:	2e00      	cmp	r6, #0
   bb784:	f43e aa6d 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb788:	68a8      	ldr	r0, [r5, #8]
   bb78a:	2100      	movs	r1, #0
   bb78c:	f7fc fca2 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb790:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb792:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb794:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb798:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb79a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb79c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb79e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7a2:	2108      	movs	r1, #8
   bb7a4:	f7fc fc96 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb7a8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7aa:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb7ac:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7b0:	210c      	movs	r1, #12
   bb7b2:	f7fc fc8f 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb7b6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7b8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb7ba:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb7be:	2110      	movs	r1, #16
   bb7c0:	f7fc fc88 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb7c4:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb7c6:	68a8      	ldr	r0, [r5, #8]
   bb7c8:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb7cc:	2114      	movs	r1, #20
   bb7ce:	f7fc fc81 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7d2:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb7d4:	68a8      	ldr	r0, [r5, #8]
   bb7d6:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb7da:	2118      	movs	r1, #24
   bb7dc:	f7fc fc7a 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7e0:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb7e2:	68a8      	ldr	r0, [r5, #8]
   bb7e4:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb7e8:	211c      	movs	r1, #28
   bb7ea:	f7fc fc73 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7ee:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb7f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb7f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb7f8:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb7fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb7fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb800:	b182      	cbz	r2, bb824 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb802:	7819      	ldrb	r1, [r3, #0]
   bb804:	0708      	lsls	r0, r1, #28
   bb806:	d40d      	bmi.n	bb824 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb808:	1d19      	adds	r1, r3, #4
   bb80a:	3324      	adds	r3, #36	; 0x24
   bb80c:	f851 0b04 	ldr.w	r0, [r1], #4
   bb810:	f842 0b04 	str.w	r0, [r2], #4
   bb814:	4299      	cmp	r1, r3
   bb816:	d1f9      	bne.n	bb80c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb818:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb81c:	7813      	ldrb	r3, [r2, #0]
   bb81e:	f043 0308 	orr.w	r3, r3, #8
   bb822:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb824:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb828:	f7fe baa9 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb82c:	4a31      	ldr	r2, [pc, #196]	; (bb8f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb82e:	4293      	cmp	r3, r2
   bb830:	f47e aa17 	bne.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb834:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb838:	2e00      	cmp	r6, #0
   bb83a:	f43e aa12 	beq.w	b9c62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb83e:	68a8      	ldr	r0, [r5, #8]
   bb840:	2100      	movs	r1, #0
   bb842:	f7fc fc47 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb846:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb848:	68a8      	ldr	r0, [r5, #8]
   bb84a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb84e:	2108      	movs	r1, #8
   bb850:	f7fc fc40 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb854:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb856:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb858:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb85c:	210c      	movs	r1, #12
   bb85e:	f7fc fc39 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb862:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb864:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb866:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb86a:	2110      	movs	r1, #16
   bb86c:	f7fc fc32 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb870:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb872:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb874:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb878:	2114      	movs	r1, #20
   bb87a:	f7fc fc2b 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb87e:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb880:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb882:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb886:	2118      	movs	r1, #24
   bb888:	f7fc fc24 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb88c:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb88e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb890:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb894:	211c      	movs	r1, #28
   bb896:	f7fc fc1d 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb89a:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb89c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb89e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb8a2:	2120      	movs	r1, #32
   bb8a4:	f7fc fc16 	bl	b80d4 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb8a8:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb8aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb8b2:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb8b4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb8ba:	b182      	cbz	r2, bb8de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb8bc:	7819      	ldrb	r1, [r3, #0]
   bb8be:	0709      	lsls	r1, r1, #28
   bb8c0:	d40d      	bmi.n	bb8de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb8c2:	1d19      	adds	r1, r3, #4
   bb8c4:	3328      	adds	r3, #40	; 0x28
   bb8c6:	f851 0b04 	ldr.w	r0, [r1], #4
   bb8ca:	f842 0b04 	str.w	r0, [r2], #4
   bb8ce:	4299      	cmp	r1, r3
   bb8d0:	d1f9      	bne.n	bb8c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb8d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb8d6:	7813      	ldrb	r3, [r2, #0]
   bb8d8:	f043 0308 	orr.w	r3, r3, #8
   bb8dc:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb8de:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb8e2:	f7fe ba4c 	b.w	b9d7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb8e6:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb8e8:	2018      	movs	r0, #24
   bb8ea:	f7ff b9a2 	b.w	bac32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb8ee:	bf00      	nop
   bb8f0:	00200100 	.word	0x00200100
   bb8f4:	00240200 	.word	0x00240200

000bb8f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb8fc:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb8fe:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb902:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb906:	4604      	mov	r4, r0
   bb908:	460f      	mov	r7, r1
   bb90a:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb90c:	b993      	cbnz	r3, bb934 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb90e:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb912:	886b      	ldrh	r3, [r5, #2]
   bb914:	88aa      	ldrh	r2, [r5, #4]
   bb916:	3303      	adds	r3, #3
   bb918:	4293      	cmp	r3, r2
   bb91a:	db03      	blt.n	bb924 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb91c:	4639      	mov	r1, r7
   bb91e:	4620      	mov	r0, r4
   bb920:	f7fd fdf0 	bl	b9504 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb924:	88ae      	ldrh	r6, [r5, #4]
   bb926:	bb7e      	cbnz	r6, bb988 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb928:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb92a:	88ab      	ldrh	r3, [r5, #4]
   bb92c:	3301      	adds	r3, #1
   bb92e:	80ab      	strh	r3, [r5, #4]
}
   bb930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb934:	2b03      	cmp	r3, #3
   bb936:	d124      	bne.n	bb982 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb938:	7852      	ldrb	r2, [r2, #1]
   bb93a:	7829      	ldrb	r1, [r5, #0]
   bb93c:	f7fc fdda 	bl	b84f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb940:	4680      	mov	r8, r0
   bb942:	2800      	cmp	r0, #0
   bb944:	d1e5      	bne.n	bb912 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb946:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb94a:	b91b      	cbnz	r3, bb954 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb94c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb950:	2b00      	cmp	r3, #0
   bb952:	d0de      	beq.n	bb912 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb954:	49b7      	ldr	r1, [pc, #732]	; (bbc34 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb956:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb95a:	f005 fa18 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb95e:	7829      	ldrb	r1, [r5, #0]
   bb960:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb964:	220a      	movs	r2, #10
   bb966:	f7fc fbd5 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb96a:	49b3      	ldr	r1, [pc, #716]	; (bbc38 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb96c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb970:	f005 fa0d 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb974:	7869      	ldrb	r1, [r5, #1]
   bb976:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb97a:	220a      	movs	r2, #10
   bb97c:	f7fc fbd1 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb980:	e7c7      	b.n	bb912 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb982:	f04f 0802 	mov.w	r8, #2
   bb986:	e7c4      	b.n	bb912 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb988:	2e01      	cmp	r6, #1
   bb98a:	d101      	bne.n	bb990 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb98c:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb98e:	e7cc      	b.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb990:	2e02      	cmp	r6, #2
   bb992:	d101      	bne.n	bb998 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb994:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb996:	e7c8      	b.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb998:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb99a:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb99c:	d103      	bne.n	bb9a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb99e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb9a2:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb9a4:	e7c1      	b.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb9a6:	1d0b      	adds	r3, r1, #4
   bb9a8:	429e      	cmp	r6, r3
   bb9aa:	d136      	bne.n	bba1a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb9ac:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb9ae:	88aa      	ldrh	r2, [r5, #4]
   bb9b0:	f108 0306 	add.w	r3, r8, #6
   bb9b4:	429a      	cmp	r2, r3
   bb9b6:	d1b8      	bne.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb9b8:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb9bc:	2b00      	cmp	r3, #0
   bb9be:	d1b4      	bne.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb9c0:	2200      	movs	r2, #0
   bb9c2:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb9c4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb9c8:	b91a      	cbnz	r2, bb9d2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb9ca:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb9ce:	2a00      	cmp	r2, #0
   bb9d0:	d0ab      	beq.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb9d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb9d6:	2b00      	cmp	r3, #0
   bb9d8:	f000 8170 	beq.w	bbcbc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb9dc:	4997      	ldr	r1, [pc, #604]	; (bbc3c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb9de:	f005 f9d6 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb9e2:	4997      	ldr	r1, [pc, #604]	; (bbc40 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb9e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9e8:	f005 f9d1 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb9ec:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb9f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9f4:	220a      	movs	r2, #10
   bb9f6:	f005 f9e6 	bl	c0dc6 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb9fa:	4992      	ldr	r1, [pc, #584]	; (bbc44 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb9fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba00:	f005 f9c5 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bba04:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bba08:	220a      	movs	r2, #10
   bba0a:	4641      	mov	r1, r8
   bba0c:	4620      	mov	r0, r4
   bba0e:	f005 f9da 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        n += println();
   bba12:	4620      	mov	r0, r4
   bba14:	f005 f9bf 	bl	c0d96 <_ZN5Print7printlnEv>
        return n;
   bba18:	e787      	b.n	bb92a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bba1a:	3105      	adds	r1, #5
   bba1c:	428e      	cmp	r6, r1
   bba1e:	f040 812f 	bne.w	bbc80 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bba22:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bba24:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bba26:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bba28:	89a9      	ldrh	r1, [r5, #12]
   bba2a:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bba2e:	4291      	cmp	r1, r2
   bba30:	f040 80ae 	bne.w	bbb90 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bba34:	2301      	movs	r3, #1
   bba36:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bba38:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bba3c:	7829      	ldrb	r1, [r5, #0]
   bba3e:	4549      	cmp	r1, r9
   bba40:	d155      	bne.n	bbaee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bba42:	786b      	ldrb	r3, [r5, #1]
   bba44:	4553      	cmp	r3, sl
   bba46:	d152      	bne.n	bbaee <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bba48:	2301      	movs	r3, #1
   bba4a:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bba4c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba50:	b3b3      	cbz	r3, bbac0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bba52:	497d      	ldr	r1, [pc, #500]	; (bbc48 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bba54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba58:	f005 f999 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bba5c:	220a      	movs	r2, #10
   bba5e:	8869      	ldrh	r1, [r5, #2]
   bba60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba64:	f005 f9af 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bba68:	4978      	ldr	r1, [pc, #480]	; (bbc4c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bba6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba6e:	f005 f98e 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bba72:	2200      	movs	r2, #0
   bba74:	4629      	mov	r1, r5
   bba76:	4620      	mov	r0, r4
   bba78:	f7fd ff50 	bl	b991c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bba7c:	7bab      	ldrb	r3, [r5, #14]
   bba7e:	2b01      	cmp	r3, #1
   bba80:	d104      	bne.n	bba8c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bba82:	4973      	ldr	r1, [pc, #460]	; (bbc50 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bba84:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba88:	f005 f99b 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bba8c:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bba90:	2b01      	cmp	r3, #1
   bba92:	d104      	bne.n	bba9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bba94:	496f      	ldr	r1, [pc, #444]	; (bbc54 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bba96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba9a:	f005 f992 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bba9e:	7beb      	ldrb	r3, [r5, #15]
   bbaa0:	2b01      	cmp	r3, #1
   bbaa2:	d104      	bne.n	bbaae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bbaa4:	496c      	ldr	r1, [pc, #432]	; (bbc58 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bbaa6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaaa:	f005 f98a 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bbaae:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bbab2:	2b01      	cmp	r3, #1
   bbab4:	d104      	bne.n	bbac0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bbab6:	4969      	ldr	r1, [pc, #420]	; (bbc5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bbab8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbabc:	f005 f981 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bbac0:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbac4:	b91b      	cbnz	r3, bbace <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bbac6:	4629      	mov	r1, r5
   bbac8:	4620      	mov	r0, r4
   bbaca:	f7fe f8b9 	bl	b9c40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbace:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbad2:	2b03      	cmp	r3, #3
   bbad4:	f47f af6b 	bne.w	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bbad8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbadc:	b108      	cbz	r0, bbae2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bbade:	f7f8 fade 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bbae2:	2300      	movs	r3, #0
   bbae4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bbae8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbaec:	e75f      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbaee:	882b      	ldrh	r3, [r5, #0]
   bbaf0:	f240 1205 	movw	r2, #261	; 0x105
   bbaf4:	4293      	cmp	r3, r2
   bbaf6:	d123      	bne.n	bbb40 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bbaf8:	68ab      	ldr	r3, [r5, #8]
   bbafa:	781a      	ldrb	r2, [r3, #0]
   bbafc:	454a      	cmp	r2, r9
   bbafe:	d102      	bne.n	bbb06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbb00:	785b      	ldrb	r3, [r3, #1]
   bbb02:	4553      	cmp	r3, sl
   bbb04:	d0a0      	beq.n	bba48 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbb06:	786a      	ldrb	r2, [r5, #1]
   bbb08:	4620      	mov	r0, r4
   bbb0a:	f7fc fbf1 	bl	b82f0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbb0e:	2800      	cmp	r0, #0
   bbb10:	d09c      	beq.n	bba4c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bbb12:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb16:	2b00      	cmp	r3, #0
   bbb18:	d0d2      	beq.n	bbac0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bbb1a:	4951      	ldr	r1, [pc, #324]	; (bbc60 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bbb1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb20:	f005 f935 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bbb24:	2210      	movs	r2, #16
   bbb26:	7829      	ldrb	r1, [r5, #0]
   bbb28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb2c:	f7fc faf2 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbb30:	4941      	ldr	r1, [pc, #260]	; (bbc38 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbb32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb36:	f005 f92a 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bbb3a:	7869      	ldrb	r1, [r5, #1]
   bbb3c:	2210      	movs	r2, #16
   bbb3e:	e022      	b.n	bbb86 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbb40:	2b05      	cmp	r3, #5
   bbb42:	d1e0      	bne.n	bbb06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbb44:	68ab      	ldr	r3, [r5, #8]
   bbb46:	781a      	ldrb	r2, [r3, #0]
   bbb48:	454a      	cmp	r2, r9
   bbb4a:	d1dc      	bne.n	bbb06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bbb4c:	785b      	ldrb	r3, [r3, #1]
   bbb4e:	4553      	cmp	r3, sl
   bbb50:	d1d9      	bne.n	bbb06 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bbb52:	2303      	movs	r3, #3
   bbb54:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bbb56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb5a:	2b00      	cmp	r3, #0
   bbb5c:	d0b0      	beq.n	bbac0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bbb5e:	4941      	ldr	r1, [pc, #260]	; (bbc64 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bbb60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb64:	f005 f913 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bbb68:	68ab      	ldr	r3, [r5, #8]
   bbb6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb6e:	7819      	ldrb	r1, [r3, #0]
   bbb70:	2210      	movs	r2, #16
   bbb72:	f7fc facf 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bbb76:	493c      	ldr	r1, [pc, #240]	; (bbc68 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bbb78:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb7c:	f005 f907 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bbb80:	68ab      	ldr	r3, [r5, #8]
   bbb82:	7859      	ldrb	r1, [r3, #1]
   bbb84:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bbb86:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb8a:	f7fc faca 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbb8e:	e75d      	b.n	bba4c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bbb90:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbb92:	782b      	ldrb	r3, [r5, #0]
   bbb94:	454b      	cmp	r3, r9
   bbb96:	d143      	bne.n	bbc20 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bbb98:	786a      	ldrb	r2, [r5, #1]
   bbb9a:	4552      	cmp	r2, sl
   bbb9c:	d140      	bne.n	bbc20 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bbb9e:	2300      	movs	r3, #0
   bbba0:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbba2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbba6:	b91b      	cbnz	r3, bbbb0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bbba8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbac:	2b00      	cmp	r3, #0
   bbbae:	d08e      	beq.n	bbace <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bbbb0:	492e      	ldr	r1, [pc, #184]	; (bbc6c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bbbb2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbb6:	f005 f8ea 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bbbba:	492d      	ldr	r1, [pc, #180]	; (bbc70 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bbbbc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbc0:	f005 f8e5 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bbbc4:	7b29      	ldrb	r1, [r5, #12]
   bbbc6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbca:	220a      	movs	r2, #10
   bbbcc:	f7fc faa2 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bbbd0:	4928      	ldr	r1, [pc, #160]	; (bbc74 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bbbd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbd6:	f005 f8da 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bbbda:	7b69      	ldrb	r1, [r5, #13]
   bbbdc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbe0:	220a      	movs	r2, #10
   bbbe2:	f7fc fa97 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bbbe6:	4924      	ldr	r1, [pc, #144]	; (bbc78 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bbbe8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbec:	f005 f8cf 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bbbf0:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bbbf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbbf8:	220a      	movs	r2, #10
   bbbfa:	f7fc fa8b 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bbbfe:	491f      	ldr	r1, [pc, #124]	; (bbc7c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bbc00:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc04:	f005 f8c3 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bbc08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc0c:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bbc10:	220a      	movs	r2, #10
   bbc12:	f7fc fa7f 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bbc16:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc1a:	f005 f8bc 	bl	c0d96 <_ZN5Print7printlnEv>
   bbc1e:	e756      	b.n	bbace <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bbc20:	2b05      	cmp	r3, #5
   bbc22:	d1be      	bne.n	bbba2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbc24:	68ab      	ldr	r3, [r5, #8]
   bbc26:	781a      	ldrb	r2, [r3, #0]
   bbc28:	454a      	cmp	r2, r9
   bbc2a:	d1ba      	bne.n	bbba2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbc2c:	785b      	ldrb	r3, [r3, #1]
   bbc2e:	4553      	cmp	r3, sl
   bbc30:	d1b7      	bne.n	bbba2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bbc32:	e7b4      	b.n	bbb9e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bbc34:	000c5344 	.word	0x000c5344
   bbc38:	000c53b5 	.word	0x000c53b5
   bbc3c:	000c54bd 	.word	0x000c54bd
   bbc40:	000c5514 	.word	0x000c5514
   bbc44:	000c552a 	.word	0x000c552a
   bbc48:	000c53f1 	.word	0x000c53f1
   bbc4c:	000c5402 	.word	0x000c5402
   bbc50:	000c540e 	.word	0x000c540e
   bbc54:	000c5422 	.word	0x000c5422
   bbc58:	000c5436 	.word	0x000c5436
   bbc5c:	000c5450 	.word	0x000c5450
   bbc60:	000c53bd 	.word	0x000c53bd
   bbc64:	000c537c 	.word	0x000c537c
   bbc68:	000c53ab 	.word	0x000c53ab
   bbc6c:	000c546a 	.word	0x000c546a
   bbc70:	000c547b 	.word	0x000c547b
   bbc74:	000c5488 	.word	0x000c5488
   bbc78:	000c5495 	.word	0x000c5495
   bbc7c:	000c54a9 	.word	0x000c54a9
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbc80:	786a      	ldrb	r2, [r5, #1]
   bbc82:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bbc84:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bbc88:	4620      	mov	r0, r4
   bbc8a:	f7fc fb31 	bl	b82f0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bbc8e:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bbc92:	2800      	cmp	r0, #0
   bbc94:	bf18      	it	ne
   bbc96:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bbc9a:	2b00      	cmp	r3, #0
   bbc9c:	f47f ae87 	bne.w	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bbca0:	1ef3      	subs	r3, r6, #3
   bbca2:	454b      	cmp	r3, r9
   bbca4:	f77f ae83 	ble.w	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bbca8:	3e04      	subs	r6, #4
   bbcaa:	eba6 0609 	sub.w	r6, r6, r9
   bbcae:	4546      	cmp	r6, r8
   bbcb0:	da02      	bge.n	bbcb8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bbcb2:	68ab      	ldr	r3, [r5, #8]
   bbcb4:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbcb6:	e67a      	b.n	bb9ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bbcb8:	2301      	movs	r3, #1
   bbcba:	e681      	b.n	bb9c0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbcbc:	4900      	ldr	r1, [pc, #0]	; (bbcc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bbcbe:	e68e      	b.n	bb9de <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bbcc0:	000c54e2 	.word	0x000c54e2

000bbcc4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bbcc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbcc6:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bbcca:	4604      	mov	r4, r0
   bbccc:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bbcce:	b113      	cbz	r3, bbcd6 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bbcd0:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bbcd4:	b953      	cbnz	r3, bbcec <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bbcd6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bbcda:	b128      	cbz	r0, bbce8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bbcdc:	490e      	ldr	r1, [pc, #56]	; (bbd18 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbcde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbce2:	f005 f86e 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bbce6:	2000      	movs	r0, #0
}
   bbce8:	b003      	add	sp, #12
   bbcea:	bd30      	pop	{r4, r5, pc}
   bbcec:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bbcee:	f7fd ff12 	bl	b9b16 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bbcf2:	4285      	cmp	r5, r0
   bbcf4:	9901      	ldr	r1, [sp, #4]
   bbcf6:	d908      	bls.n	bbd0a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbcf8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbcfc:	b91b      	cbnz	r3, bbd06 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bbcfe:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bbd02:	2800      	cmp	r0, #0
   bbd04:	d0f0      	beq.n	bbce8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bbd06:	4905      	ldr	r1, [pc, #20]	; (bbd1c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bbd08:	e7e9      	b.n	bbcde <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bbd0a:	4620      	mov	r0, r4
   bbd0c:	462a      	mov	r2, r5
   bbd0e:	f7fd ff0b 	bl	b9b28 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bbd12:	2001      	movs	r0, #1
   bbd14:	e7e8      	b.n	bbce8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bbd16:	bf00      	nop
   bbd18:	000c5542 	.word	0x000c5542
   bbd1c:	000c556d 	.word	0x000c556d

000bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bbd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd24:	4604      	mov	r4, r0
   bbd26:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bbd28:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bbd2c:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bbd30:	f88d 100f 	strb.w	r1, [sp, #15]
   bbd34:	4615      	mov	r5, r2
   bbd36:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bbd38:	b118      	cbz	r0, bbd42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bbd3a:	6803      	ldr	r3, [r0, #0]
   bbd3c:	b2c9      	uxtb	r1, r1
   bbd3e:	689b      	ldr	r3, [r3, #8]
   bbd40:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bbd42:	7823      	ldrb	r3, [r4, #0]
   bbd44:	2b01      	cmp	r3, #1
   bbd46:	d80e      	bhi.n	bbd66 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbd48:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbd4c:	2bb5      	cmp	r3, #181	; 0xb5
   bbd4e:	d12e      	bne.n	bbdae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bbd50:	2300      	movs	r3, #0
   bbd52:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbd56:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bbd58:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbd5c:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bbd60:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bbd62:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bbd66:	7826      	ldrb	r6, [r4, #0]
   bbd68:	2e02      	cmp	r6, #2
   bbd6a:	f040 81d5 	bne.w	bc118 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bbd6e:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbd72:	bb5b      	cbnz	r3, bbdcc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bbd74:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbd78:	2bb5      	cmp	r3, #181	; 0xb5
   bbd7a:	d001      	beq.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bbd7c:	2300      	movs	r3, #0
   bbd7e:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbd80:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbd84:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbd88:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bbd8c:	2b01      	cmp	r3, #1
   bbd8e:	f040 81a3 	bne.w	bc0d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bbd92:	463b      	mov	r3, r7
   bbd94:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbd98:	4620      	mov	r0, r4
   bbd9a:	f7ff fdad 	bl	bb8f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bbd9e:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bbda2:	3301      	adds	r3, #1
   bbda4:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bbda8:	b005      	add	sp, #20
   bbdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bbdae:	2b24      	cmp	r3, #36	; 0x24
   bbdb0:	d105      	bne.n	bbdbe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bbdb2:	2300      	movs	r3, #0
   bbdb4:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bbdb8:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bbdba:	7023      	strb	r3, [r4, #0]
   bbdbc:	e7d3      	b.n	bbd66 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bbdbe:	2bd3      	cmp	r3, #211	; 0xd3
   bbdc0:	d1d1      	bne.n	bbd66 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bbdc2:	2300      	movs	r3, #0
   bbdc4:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bbdc8:	2303      	movs	r3, #3
   bbdca:	e7f6      	b.n	bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bbdcc:	2b01      	cmp	r3, #1
   bbdce:	d103      	bne.n	bbdd8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bbdd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbdd4:	2b62      	cmp	r3, #98	; 0x62
   bbdd6:	e7d0      	b.n	bbd7a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bbdd8:	2b02      	cmp	r3, #2
   bbdda:	d10e      	bne.n	bbdfa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bbddc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbde0:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bbde4:	2200      	movs	r2, #0
   bbde6:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bbdea:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bbdee:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bbdf2:	88eb      	ldrh	r3, [r5, #6]
   bbdf4:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bbdf8:	e7c2      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bbdfa:	2b03      	cmp	r3, #3
   bbdfc:	f040 80b7 	bne.w	bbf6e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bbe00:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bbe04:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bbe08:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bbe0c:	2905      	cmp	r1, #5
   bbe0e:	d0b7      	beq.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bbe10:	42b9      	cmp	r1, r7
   bbe12:	d10c      	bne.n	bbe2e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bbe14:	4546      	cmp	r6, r8
   bbe16:	d10a      	bne.n	bbe2e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbe18:	2300      	movs	r3, #0
   bbe1a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbe1e:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bbe20:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bbe24:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bbe26:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bbe2a:	80ab      	strh	r3, [r5, #4]
   bbe2c:	e7a8      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bbe2e:	4632      	mov	r2, r6
   bbe30:	4620      	mov	r0, r4
   bbe32:	f7fc fa5d 	bl	b82f0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bbe36:	2800      	cmp	r0, #0
   bbe38:	f000 8095 	beq.w	bbf66 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bbe3c:	4632      	mov	r2, r6
   bbe3e:	4620      	mov	r0, r4
   bbe40:	f7fc fb58 	bl	b84f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bbe44:	4606      	mov	r6, r0
   bbe46:	b9e8      	cbnz	r0, bbe84 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbe48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe4c:	b913      	cbnz	r3, bbe54 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bbe4e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbe52:	b1bb      	cbz	r3, bbe84 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbe54:	49a7      	ldr	r1, [pc, #668]	; (bc0f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bbe56:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe5a:	f004 ff98 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bbe5e:	220a      	movs	r2, #10
   bbe60:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbe64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe68:	f7fc f954 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbe6c:	49a2      	ldr	r1, [pc, #648]	; (bc0f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbe6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe72:	f004 ff8c 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bbe76:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbe7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe7e:	220a      	movs	r2, #10
   bbe80:	f7fc f94f 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bbe84:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bbe88:	b1a3      	cbz	r3, bbeb4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbe8a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbe8e:	b913      	cbnz	r3, bbe96 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bbe90:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbe94:	b123      	cbz	r3, bbea0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bbe96:	4999      	ldr	r1, [pc, #612]	; (bc0fc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bbe98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbe9c:	f004 ff91 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bbea0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bbea4:	b108      	cbz	r0, bbeaa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bbea6:	f7f8 f8fa 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bbeaa:	2300      	movs	r3, #0
   bbeac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bbeb0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bbeb4:	4630      	mov	r0, r6
   bbeb6:	f7f8 f8f0 	bl	b409a <_Znaj>
   bbeba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbebe:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bbec2:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bbec6:	bb38      	cbnz	r0, bbf18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbec8:	b913      	cbnz	r3, bbed0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bbeca:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbece:	b1e3      	cbz	r3, bbf0a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bbed0:	498b      	ldr	r1, [pc, #556]	; (bc100 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bbed2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbed6:	f004 ff5a 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbeda:	2210      	movs	r2, #16
   bbedc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbee0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbee4:	f7fc f916 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbee8:	4983      	ldr	r1, [pc, #524]	; (bc0f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbeea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbeee:	f004 ff4e 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbef2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbef6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbefa:	2210      	movs	r2, #16
   bbefc:	f7fc f911 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bbf00:	4980      	ldr	r1, [pc, #512]	; (bc104 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bbf02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf06:	f004 ff5c 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bbf0a:	2300      	movs	r3, #0
   bbf0c:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbf10:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bbf14:	702b      	strb	r3, [r5, #0]
   bbf16:	e783      	b.n	bbe20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bbf18:	2203      	movs	r2, #3
   bbf1a:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bbf1e:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bbf22:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bbf26:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbf2a:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbf2e:	2b00      	cmp	r3, #0
   bbf30:	f43f af26 	beq.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbf34:	4974      	ldr	r1, [pc, #464]	; (bc108 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbf36:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf3a:	f004 ff28 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbf3e:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbf42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf46:	2210      	movs	r2, #16
   bbf48:	f7fc f8e4 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbf4c:	496a      	ldr	r1, [pc, #424]	; (bc0f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbf4e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf52:	f004 ff1c 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbf56:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbf5a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf5e:	2210      	movs	r2, #16
   bbf60:	f7fc f8df 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbf64:	e70c      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbf66:	2301      	movs	r3, #1
   bbf68:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbf6c:	e708      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbf6e:	2b04      	cmp	r3, #4
   bbf70:	d104      	bne.n	bbf7c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbf72:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbf76:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbf7a:	e701      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bbf7c:	2b05      	cmp	r3, #5
   bbf7e:	d106      	bne.n	bbf8e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bbf80:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbf84:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbf88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bbf8c:	e7f3      	b.n	bbf76 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bbf8e:	2b06      	cmp	r3, #6
   bbf90:	d12b      	bne.n	bbfea <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbf92:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbf96:	bb13      	cbnz	r3, bbfde <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf98:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf9c:	b913      	cbnz	r3, bbfa4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bbf9e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbfa2:	b1bb      	cbz	r3, bbfd4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bbfa4:	4959      	ldr	r1, [pc, #356]	; (bc10c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bbfa6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfaa:	f004 fef0 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bbfae:	2210      	movs	r2, #16
   bbfb0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbfb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfb8:	f7fc f8ac 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbfbc:	494e      	ldr	r1, [pc, #312]	; (bc0f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbfbe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfc2:	f004 fee4 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bbfc6:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbfca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfce:	2210      	movs	r2, #16
   bbfd0:	f7fc f8a7 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bbfd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbfd8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbfdc:	e6d0      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bbfde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbfe2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbfe6:	701a      	strb	r2, [r3, #0]
   bbfe8:	e6ca      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbfea:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbfec:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbff0:	f47f aec6 	bne.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbff4:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbff8:	bb9b      	cbnz	r3, bc062 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bbffa:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bbffe:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc002:	2b02      	cmp	r3, #2
   bc004:	f47f aebc 	bne.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc008:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc00c:	2905      	cmp	r1, #5
   bc00e:	f47f aeb7 	bne.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc012:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc016:	781a      	ldrb	r2, [r3, #0]
   bc018:	42ba      	cmp	r2, r7
   bc01a:	f47f aeb1 	bne.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc01e:	785a      	ldrb	r2, [r3, #1]
   bc020:	4542      	cmp	r2, r8
   bc022:	f47f aead 	bne.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc026:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc02a:	2a02      	cmp	r2, #2
   bc02c:	d121      	bne.n	bc072 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc02e:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc032:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc036:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc03a:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc03e:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc042:	2001      	movs	r0, #1
   bc044:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc048:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc04c:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc050:	781b      	ldrb	r3, [r3, #0]
   bc052:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc054:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc058:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc05c:	7852      	ldrb	r2, [r2, #1]
   bc05e:	705a      	strb	r2, [r3, #1]
   bc060:	e68e      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc062:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc064:	bf16      	itet	ne
   bc066:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc06a:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc06e:	705a      	strbne	r2, [r3, #1]
   bc070:	e7c5      	b.n	bbffe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc072:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc076:	b923      	cbnz	r3, bc082 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc078:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc07c:	2b00      	cmp	r3, #0
   bc07e:	f43f ae7f 	beq.w	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc082:	4923      	ldr	r1, [pc, #140]	; (bc110 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc084:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc088:	f004 fe81 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc08c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc090:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc094:	7819      	ldrb	r1, [r3, #0]
   bc096:	2210      	movs	r2, #16
   bc098:	f7fc f83c 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc09c:	4916      	ldr	r1, [pc, #88]	; (bc0f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc09e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0a2:	f004 fe74 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc0a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc0aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0ae:	7859      	ldrb	r1, [r3, #1]
   bc0b0:	2210      	movs	r2, #16
   bc0b2:	f7fc f82f 	bl	b8114 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc0b6:	4917      	ldr	r1, [pc, #92]	; (bc114 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc0b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0bc:	f004 fe67 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc0c0:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc0c4:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc0c8:	220a      	movs	r2, #10
   bc0ca:	4630      	mov	r0, r6
   bc0cc:	f004 fe7b 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        n += println();
   bc0d0:	4630      	mov	r0, r6
   bc0d2:	f004 fe60 	bl	c0d96 <_ZN5Print7printlnEv>
        return n;
   bc0d6:	e653      	b.n	bbd80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc0d8:	b913      	cbnz	r3, bc0e0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc0da:	463b      	mov	r3, r7
   bc0dc:	462a      	mov	r2, r5
   bc0de:	e65b      	b.n	bbd98 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc0e0:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc0e2:	bf08      	it	eq
   bc0e4:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc0e8:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc0ea:	bf18      	it	ne
   bc0ec:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc0f0:	e652      	b.n	bbd98 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc0f2:	bf00      	nop
   bc0f4:	000c55ae 	.word	0x000c55ae
   bc0f8:	000c53b5 	.word	0x000c53b5
   bc0fc:	000c55e3 	.word	0x000c55e3
   bc100:	000c5625 	.word	0x000c5625
   bc104:	000c566a 	.word	0x000c566a
   bc108:	000c569c 	.word	0x000c569c
   bc10c:	000c56cd 	.word	0x000c56cd
   bc110:	000c56fd 	.word	0x000c56fd
   bc114:	000c572d 	.word	0x000c572d
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc118:	2e01      	cmp	r6, #1
   bc11a:	f040 8188 	bne.w	bc42e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc11e:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc122:	2b00      	cmp	r3, #0
   bc124:	d146      	bne.n	bc1b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc126:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc12a:	2a24      	cmp	r2, #36	; 0x24
   bc12c:	f000 8086 	beq.w	bc23c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc130:	2300      	movs	r3, #0
   bc132:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc134:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc138:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc13a:	bf04      	itt	eq
   bc13c:	23fb      	moveq	r3, #251	; 0xfb
   bc13e:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc142:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc146:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc14a:	3501      	adds	r5, #1
   bc14c:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc14e:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc150:	bf08      	it	eq
   bc152:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc154:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc158:	bf08      	it	eq
   bc15a:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc15c:	2d00      	cmp	r5, #0
   bc15e:	f47f ae23 	bne.w	bbda8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc162:	4620      	mov	r0, r4
   bc164:	f7fc fc20 	bl	b89a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc168:	2800      	cmp	r0, #0
   bc16a:	f000 8120 	beq.w	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc16e:	4620      	mov	r0, r4
   bc170:	f7fc fd7c 	bl	b8c6c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc174:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc176:	4620      	mov	r0, r4
   bc178:	f7fc fdfa 	bl	b8d70 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc17c:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc17e:	4620      	mov	r0, r4
   bc180:	f7fd f88a 	bl	b9298 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc184:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc186:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc188:	1e41      	subs	r1, r0, #1
   bc18a:	428e      	cmp	r6, r1
   bc18c:	f280 80b4 	bge.w	bc2f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc190:	783a      	ldrb	r2, [r7, #0]
   bc192:	3a04      	subs	r2, #4
   bc194:	4296      	cmp	r6, r2
   bc196:	f280 80af 	bge.w	bc2f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc19a:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc19c:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc1a0:	f000 80ad 	beq.w	bc2fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc1a4:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc1a6:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc1aa:	bf18      	it	ne
   bc1ac:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc1ae:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc1b0:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc1b2:	e7ea      	b.n	bc18a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc1b4:	2b01      	cmp	r3, #1
   bc1b6:	d103      	bne.n	bc1c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc1b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc1bc:	2a47      	cmp	r2, #71	; 0x47
   bc1be:	e7b5      	b.n	bc12c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc1c0:	b2da      	uxtb	r2, r3
   bc1c2:	2a05      	cmp	r2, #5
   bc1c4:	d93a      	bls.n	bc23c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc1c6:	4620      	mov	r0, r4
   bc1c8:	f7fc fbee 	bl	b89a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc1cc:	b308      	cbz	r0, bc212 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc1ce:	4620      	mov	r0, r4
   bc1d0:	f7fc fd4c 	bl	b8c6c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc1d4:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc1d6:	4620      	mov	r0, r4
   bc1d8:	f7fc fdca 	bl	b8d70 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc1dc:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc1de:	4620      	mov	r0, r4
   bc1e0:	f7fd f85a 	bl	b9298 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc1e4:	782b      	ldrb	r3, [r5, #0]
   bc1e6:	4283      	cmp	r3, r0
   bc1e8:	d213      	bcs.n	bc212 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc1ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc1ee:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc1f0:	782b      	ldrb	r3, [r5, #0]
   bc1f2:	3301      	adds	r3, #1
   bc1f4:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc1f6:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc1f8:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc1fa:	d10a      	bne.n	bc212 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc1fc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc200:	b913      	cbnz	r3, bc208 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc202:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc206:	b123      	cbz	r3, bc212 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc208:	498f      	ldr	r1, [pc, #572]	; (bc448 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc20a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc20e:	f004 fdd8 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc212:	4620      	mov	r0, r4
   bc214:	f7fc f9c8 	bl	b85a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc218:	b128      	cbz	r0, bc226 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc21a:	2201      	movs	r2, #1
   bc21c:	f10d 010f 	add.w	r1, sp, #15
   bc220:	4620      	mov	r0, r4
   bc222:	f7ff fd4f 	bl	bbcc4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc226:	4620      	mov	r0, r4
   bc228:	f7fc faee 	bl	b8808 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc22c:	2800      	cmp	r0, #0
   bc22e:	d081      	beq.n	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc230:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc234:	4620      	mov	r0, r4
   bc236:	f7fc fbaf 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc23a:	e77b      	b.n	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc23c:	18e2      	adds	r2, r4, r3
   bc23e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc242:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc246:	2b05      	cmp	r3, #5
   bc248:	f47f af74 	bne.w	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc24c:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc250:	b923      	cbnz	r3, bc25c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc252:	4620      	mov	r0, r4
   bc254:	f7fc fa70 	bl	b8738 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc258:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc25c:	4620      	mov	r0, r4
   bc25e:	f7fc fba3 	bl	b89a8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc262:	b1b8      	cbz	r0, bc294 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc264:	4620      	mov	r0, r4
   bc266:	f7fc fd01 	bl	b8c6c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc26a:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc26c:	4620      	mov	r0, r4
   bc26e:	f7fc fd7f 	bl	b8d70 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc272:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc274:	4620      	mov	r0, r4
   bc276:	f7fd f80f 	bl	b9298 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc27a:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc27c:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc27e:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc280:	2100      	movs	r1, #0
   bc282:	4628      	mov	r0, r5
   bc284:	f006 fa4e 	bl	c2724 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc288:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc28c:	602b      	str	r3, [r5, #0]
   bc28e:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc292:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc294:	4620      	mov	r0, r4
   bc296:	f7fc f987 	bl	b85a8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc29a:	b128      	cbz	r0, bc2a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc29c:	2206      	movs	r2, #6
   bc29e:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc2a2:	4620      	mov	r0, r4
   bc2a4:	f7ff fd0e 	bl	bbcc4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc2a8:	4620      	mov	r0, r4
   bc2aa:	f7fc faad 	bl	b8808 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc2ae:	b1e8      	cbz	r0, bc2ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc2b0:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc2b4:	4620      	mov	r0, r4
   bc2b6:	f7fc fb6f 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc2ba:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc2be:	4620      	mov	r0, r4
   bc2c0:	f7fc fb6a 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc2c4:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc2c8:	4620      	mov	r0, r4
   bc2ca:	f7fc fb65 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc2ce:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc2d2:	4620      	mov	r0, r4
   bc2d4:	f7fc fb60 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc2d8:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc2dc:	4620      	mov	r0, r4
   bc2de:	f7fc fb5b 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc2e2:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc2e6:	4620      	mov	r0, r4
   bc2e8:	f7fc fb56 	bl	b8998 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc2ec:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc2f0:	2b05      	cmp	r3, #5
   bc2f2:	f67f af1f 	bls.w	bc134 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc2f6:	e766      	b.n	bc1c6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc2f8:	2d2a      	cmp	r5, #42	; 0x2a
   bc2fa:	f040 808b 	bne.w	bc414 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc2fe:	091a      	lsrs	r2, r3, #4
   bc300:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc304:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc306:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc308:	f003 030f 	and.w	r3, r3, #15
   bc30c:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc310:	bf84      	itt	hi
   bc312:	3237      	addhi	r2, #55	; 0x37
   bc314:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc316:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc31a:	bf88      	it	hi
   bc31c:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc320:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc324:	42ab      	cmp	r3, r5
   bc326:	eb08 0b06 	add.w	fp, r8, r6
   bc32a:	d143      	bne.n	bc3b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc32c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc330:	4553      	cmp	r3, sl
   bc332:	d13f      	bne.n	bc3b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc334:	4620      	mov	r0, r4
   bc336:	f7fc fd9d 	bl	b8e74 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc33a:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc33c:	4620      	mov	r0, r4
   bc33e:	f7fc fe1d 	bl	b8f7c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc342:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc344:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc346:	2100      	movs	r1, #0
   bc348:	f006 f9ec 	bl	c2724 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc34c:	783a      	ldrb	r2, [r7, #0]
   bc34e:	4641      	mov	r1, r8
   bc350:	4630      	mov	r0, r6
   bc352:	f006 f9bf 	bl	c26d4 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc356:	783b      	ldrb	r3, [r7, #0]
   bc358:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc35a:	4620      	mov	r0, r4
   bc35c:	f7fd f80e 	bl	b937c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc360:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc362:	f025 0503 	bic.w	r5, r5, #3
   bc366:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc36a:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc36c:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc370:	4620      	mov	r0, r4
   bc372:	f7fc fba5 	bl	b8ac0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc376:	b1d0      	cbz	r0, bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc378:	f01a 0104 	ands.w	r1, sl, #4
   bc37c:	d117      	bne.n	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc37e:	4620      	mov	r0, r4
   bc380:	9102      	str	r1, [sp, #8]
   bc382:	f7fc fe7f 	bl	b9084 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc386:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc388:	4620      	mov	r0, r4
   bc38a:	f7fc feff 	bl	b918c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc38e:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc390:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc392:	464a      	mov	r2, r9
   bc394:	f006 f9c6 	bl	c2724 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc398:	783a      	ldrb	r2, [r7, #0]
   bc39a:	4641      	mov	r1, r8
   bc39c:	4650      	mov	r0, sl
   bc39e:	f006 f999 	bl	c26d4 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc3a2:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc3a6:	783b      	ldrb	r3, [r7, #0]
   bc3a8:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc3ac:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc3ae:	2300      	movs	r3, #0
   bc3b0:	7023      	strb	r3, [r4, #0]
   bc3b2:	e4f9      	b.n	bbda8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc3b4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3b8:	b91b      	cbnz	r3, bc3c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc3ba:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc3be:	2b00      	cmp	r3, #0
   bc3c0:	d0f5      	beq.n	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc3c2:	4922      	ldr	r1, [pc, #136]	; (bc44c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc3c4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3c8:	f004 fce1 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc3cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3d0:	6803      	ldr	r3, [r0, #0]
   bc3d2:	4629      	mov	r1, r5
   bc3d4:	689b      	ldr	r3, [r3, #8]
   bc3d6:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc3d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3dc:	6803      	ldr	r3, [r0, #0]
   bc3de:	4651      	mov	r1, sl
   bc3e0:	689b      	ldr	r3, [r3, #8]
   bc3e2:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc3e4:	491a      	ldr	r1, [pc, #104]	; (bc450 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc3e6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3ea:	f004 fcd0 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc3ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3f2:	f89b 1000 	ldrb.w	r1, [fp]
   bc3f6:	6803      	ldr	r3, [r0, #0]
   bc3f8:	689b      	ldr	r3, [r3, #8]
   bc3fa:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc3fc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc400:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc404:	6803      	ldr	r3, [r0, #0]
   bc406:	689b      	ldr	r3, [r3, #8]
   bc408:	4798      	blx	r3
              _debugSerial->println();
   bc40a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc40e:	f004 fcc2 	bl	c0d96 <_ZN5Print7printlnEv>
   bc412:	e7cc      	b.n	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc414:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc418:	b91b      	cbnz	r3, bc422 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc41a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc41e:	2b00      	cmp	r3, #0
   bc420:	d0c5      	beq.n	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc422:	490c      	ldr	r1, [pc, #48]	; (bc454 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc424:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc428:	f004 fccb 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc42c:	e7bf      	b.n	bc3ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc42e:	2e03      	cmp	r6, #3
   bc430:	f47f acba 	bne.w	bbda8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc434:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc438:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc43c:	4620      	mov	r0, r4
   bc43e:	f7fd f821 	bl	b9484 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc442:	7020      	strb	r0, [r4, #0]
}
   bc444:	e4b0      	b.n	bbda8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc446:	bf00      	nop
   bc448:	000c5734 	.word	0x000c5734
   bc44c:	000c5752 	.word	0x000c5752
   bc450:	000c577d 	.word	0x000c577d
   bc454:	000c5783 	.word	0x000c5783

000bc458 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bc458:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bc45c:	4604      	mov	r4, r0
   bc45e:	4699      	mov	r9, r3
   bc460:	460f      	mov	r7, r1
   bc462:	4690      	mov	r8, r2
   bc464:	f001 f8ae 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bc468:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc46c:	1ac0      	subs	r0, r0, r3
   bc46e:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc472:	4298      	cmp	r0, r3
   bc474:	f0c0 80a8 	bcc.w	bc5c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc478:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc47c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc480:	f003 f98c 	bl	bf79c <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc484:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc488:	21fd      	movs	r1, #253	; 0xfd
   bc48a:	f7fb fe53 	bl	b8134 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc48e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc492:	2100      	movs	r1, #0
   bc494:	f003 f989 	bl	bf7aa <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc498:	4605      	mov	r5, r0
   bc49a:	b1a8      	cbz	r0, bc4c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc49c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4a0:	b933      	cbnz	r3, bc4b0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc4a2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc4a6:	b91b      	cbnz	r3, bc4b0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc4a8:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc4aa:	b002      	add	sp, #8
   bc4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc4b0:	4946      	ldr	r1, [pc, #280]	; (bc5cc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc4b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b6:	f004 fc6a 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc4ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4be:	220a      	movs	r2, #10
   bc4c0:	4629      	mov	r1, r5
   bc4c2:	f7fb fe2e 	bl	b8122 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc4c6:	e7ef      	b.n	bc4a8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc4c8:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc4cc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc4d0:	2202      	movs	r2, #2
   bc4d2:	f003 f960 	bl	bf796 <_ZN7TwoWire11requestFromEhj>
   bc4d6:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc4d8:	2d02      	cmp	r5, #2
   bc4da:	d008      	beq.n	bc4ee <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc4dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4e0:	b91b      	cbnz	r3, bc4ea <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc4e2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc4e6:	2b00      	cmp	r3, #0
   bc4e8:	d0de      	beq.n	bc4a8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc4ea:	4939      	ldr	r1, [pc, #228]	; (bc5d0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc4ec:	e7e1      	b.n	bc4b2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc4ee:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc4f2:	6803      	ldr	r3, [r0, #0]
   bc4f4:	695b      	ldr	r3, [r3, #20]
   bc4f6:	4798      	blx	r3
   bc4f8:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc4fa:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc4fe:	6803      	ldr	r3, [r0, #0]
   bc500:	695b      	ldr	r3, [r3, #20]
   bc502:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc504:	b2c6      	uxtb	r6, r0
   bc506:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc50a:	b22a      	sxth	r2, r5
   bc50c:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc50e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc512:	b955      	cbnz	r5, bc52a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc514:	b123      	cbz	r3, bc520 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc516:	492f      	ldr	r1, [pc, #188]	; (bc5d4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc518:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc51c:	f004 fc51 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc520:	f001 f850 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc524:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc528:	e7be      	b.n	bc4a8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc52a:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc52c:	bfb8      	it	lt
   bc52e:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc532:	2d64      	cmp	r5, #100	; 0x64
   bc534:	d936      	bls.n	bc5a4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc536:	b17b      	cbz	r3, bc558 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc538:	4927      	ldr	r1, [pc, #156]	; (bc5d8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc53a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc53e:	f004 fc26 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc542:	4629      	mov	r1, r5
   bc544:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc548:	220a      	movs	r2, #10
   bc54a:	f004 fc3c 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc54e:	4923      	ldr	r1, [pc, #140]	; (bc5dc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc550:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc554:	f004 fc35 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc558:	2d00      	cmp	r5, #0
   bc55a:	d035      	beq.n	bc5c8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc55c:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc55e:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc562:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc566:	42ae      	cmp	r6, r5
   bc568:	bf28      	it	cs
   bc56a:	462e      	movcs	r6, r5
   bc56c:	4632      	mov	r2, r6
   bc56e:	f003 f912 	bl	bf796 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc572:	b2c0      	uxtb	r0, r0
   bc574:	4286      	cmp	r6, r0
   bc576:	d197      	bne.n	bc4a8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc578:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc57c:	fa1f f38a 	uxth.w	r3, sl
   bc580:	429e      	cmp	r6, r3
   bc582:	d91e      	bls.n	bc5c2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc584:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc588:	6803      	ldr	r3, [r0, #0]
   bc58a:	695b      	ldr	r3, [r3, #20]
   bc58c:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc58e:	f8cd 9000 	str.w	r9, [sp]
   bc592:	b2c1      	uxtb	r1, r0
   bc594:	4643      	mov	r3, r8
   bc596:	463a      	mov	r2, r7
   bc598:	4620      	mov	r0, r4
   bc59a:	f7ff fbc1 	bl	bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc59e:	f10a 0a01 	add.w	sl, sl, #1
   bc5a2:	e7eb      	b.n	bc57c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc5a4:	2b00      	cmp	r3, #0
   bc5a6:	d0d7      	beq.n	bc558 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc5a8:	490d      	ldr	r1, [pc, #52]	; (bc5e0 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc5aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5ae:	f004 fbee 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
   bc5b2:	4629      	mov	r1, r5
   bc5b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5b8:	220a      	movs	r2, #10
   bc5ba:	f004 fc04 	bl	c0dc6 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc5be:	4909      	ldr	r1, [pc, #36]	; (bc5e4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc5c0:	e7c6      	b.n	bc550 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc5c2:	1bad      	subs	r5, r5, r6
   bc5c4:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc5c6:	e7c7      	b.n	bc558 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc5c8:	2001      	movs	r0, #1
   bc5ca:	e76e      	b.n	bc4aa <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc5cc:	000c57a4 	.word	0x000c57a4
   bc5d0:	000c57d8 	.word	0x000c57d8
   bc5d4:	000c580d 	.word	0x000c580d
   bc5d8:	000c5835 	.word	0x000c5835
   bc5dc:	000c5855 	.word	0x000c5855
   bc5e0:	000c5865 	.word	0x000c5865
   bc5e4:	000c587d 	.word	0x000c587d

000bc5e8 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc5ea:	4604      	mov	r4, r0
   bc5ec:	460d      	mov	r5, r1
   bc5ee:	4616      	mov	r6, r2
   bc5f0:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc5f2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc5f6:	6803      	ldr	r3, [r0, #0]
   bc5f8:	691b      	ldr	r3, [r3, #16]
   bc5fa:	4798      	blx	r3
   bc5fc:	b160      	cbz	r0, bc618 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc5fe:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc602:	6803      	ldr	r3, [r0, #0]
   bc604:	695b      	ldr	r3, [r3, #20]
   bc606:	4798      	blx	r3
   bc608:	9700      	str	r7, [sp, #0]
   bc60a:	b2c1      	uxtb	r1, r0
   bc60c:	4633      	mov	r3, r6
   bc60e:	462a      	mov	r2, r5
   bc610:	4620      	mov	r0, r4
   bc612:	f7ff fb85 	bl	bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc616:	e7ec      	b.n	bc5f2 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc618:	2001      	movs	r0, #1
   bc61a:	b003      	add	sp, #12
   bc61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc620 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc624:	4604      	mov	r4, r0
   bc626:	b087      	sub	sp, #28
   bc628:	460d      	mov	r5, r1
   bc62a:	4616      	mov	r6, r2
   bc62c:	461f      	mov	r7, r3
   bc62e:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc632:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc636:	fa5f f388 	uxtb.w	r3, r8
   bc63a:	429a      	cmp	r2, r3
   bc63c:	d90b      	bls.n	bc656 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc63e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc642:	4620      	mov	r0, r4
   bc644:	5cd1      	ldrb	r1, [r2, r3]
   bc646:	9700      	str	r7, [sp, #0]
   bc648:	4633      	mov	r3, r6
   bc64a:	462a      	mov	r2, r5
   bc64c:	f7ff fb68 	bl	bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc650:	f108 0801 	add.w	r8, r8, #1
   bc654:	e7ed      	b.n	bc632 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc656:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc65a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc65e:	4a25      	ldr	r2, [pc, #148]	; (bc6f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc660:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc664:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc668:	a902      	add	r1, sp, #8
   bc66a:	f04f 0901 	mov.w	r9, #1
   bc66e:	9202      	str	r2, [sp, #8]
   bc670:	9304      	str	r3, [sp, #16]
   bc672:	f88d 800c 	strb.w	r8, [sp, #12]
   bc676:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc67a:	f004 fcaf 	bl	c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc67e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc682:	4641      	mov	r1, r8
   bc684:	f005 f91b 	bl	c18be <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc688:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc68c:	21ff      	movs	r1, #255	; 0xff
   bc68e:	f004 fd13 	bl	c10b8 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc692:	28ff      	cmp	r0, #255	; 0xff
   bc694:	d116      	bne.n	bc6c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc696:	7823      	ldrb	r3, [r4, #0]
   bc698:	b983      	cbnz	r3, bc6bc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc69a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc69e:	4649      	mov	r1, r9
   bc6a0:	f005 f90d 	bl	c18be <digitalWrite>
    _spiPort->endTransaction();
   bc6a4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc6a8:	f004 fc7f 	bl	c0faa <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc6ac:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc6b0:	f001 faea 	bl	bdc88 <delay>
} // end checkUbloxSpi()
   bc6b4:	2001      	movs	r0, #1
   bc6b6:	b007      	add	sp, #28
   bc6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc6bc:	28ff      	cmp	r0, #255	; 0xff
   bc6be:	d101      	bne.n	bc6c4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc6c0:	7823      	ldrb	r3, [r4, #0]
   bc6c2:	b163      	cbz	r3, bc6de <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc6c4:	4601      	mov	r1, r0
   bc6c6:	9700      	str	r7, [sp, #0]
   bc6c8:	4620      	mov	r0, r4
   bc6ca:	4633      	mov	r3, r6
   bc6cc:	462a      	mov	r2, r5
   bc6ce:	f7ff fb27 	bl	bbd20 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc6d2:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc6d6:	21ff      	movs	r1, #255	; 0xff
   bc6d8:	f004 fcee 	bl	c10b8 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc6dc:	e7ee      	b.n	bc6bc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc6de:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc6e2:	2101      	movs	r1, #1
   bc6e4:	f005 f8eb 	bl	c18be <digitalWrite>
  _spiPort->endTransaction();
   bc6e8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc6ec:	f004 fc5d 	bl	c0faa <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc6f0:	e7e0      	b.n	bc6b4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc6f2:	bf00      	nop
   bc6f4:	000c4ea4 	.word	0x000c4ea4

000bc6f8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc6f8:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc6fa:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc6fe:	b91c      	cbnz	r4, bc708 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc700:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc704:	f7ff bea8 	b.w	bc458 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc708:	2c01      	cmp	r4, #1
   bc70a:	d103      	bne.n	bc714 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc70c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc710:	f7ff bf6a 	b.w	bc5e8 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc714:	2c02      	cmp	r4, #2
   bc716:	d103      	bne.n	bc720 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc718:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc71c:	f7ff bf80 	b.w	bc620 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc720:	2000      	movs	r0, #0
   bc722:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc726:	4770      	bx	lr

000bc728 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc72c:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc72e:	2102      	movs	r1, #2
   bc730:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc732:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc736:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc73a:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc73e:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc740:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc744:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc748:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc74c:	4604      	mov	r4, r0
   bc74e:	4617      	mov	r7, r2
   bc750:	4698      	mov	r8, r3
   bc752:	f000 ff37 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc756:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc75a:	4606      	mov	r6, r0
   bc75c:	4481      	add	r9, r0
   bc75e:	f000 ff31 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc762:	4581      	cmp	r9, r0
   bc764:	f240 80a8 	bls.w	bc8b8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc768:	4643      	mov	r3, r8
   bc76a:	463a      	mov	r2, r7
   bc76c:	4629      	mov	r1, r5
   bc76e:	4620      	mov	r0, r4
   bc770:	f7ff ffc2 	bl	bc6f8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc774:	2800      	cmp	r0, #0
   bc776:	f000 809b 	beq.w	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc77a:	7beb      	ldrb	r3, [r5, #15]
   bc77c:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc780:	2b01      	cmp	r3, #1
   bc782:	d125      	bne.n	bc7d0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc784:	2901      	cmp	r1, #1
   bc786:	f040 80ec 	bne.w	bc962 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc78a:	7bab      	ldrb	r3, [r5, #14]
   bc78c:	2b01      	cmp	r3, #1
   bc78e:	782b      	ldrb	r3, [r5, #0]
   bc790:	d13b      	bne.n	bc80a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc792:	42bb      	cmp	r3, r7
   bc794:	d13e      	bne.n	bc814 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc796:	786a      	ldrb	r2, [r5, #1]
   bc798:	4542      	cmp	r2, r8
   bc79a:	d136      	bne.n	bc80a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc79c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc7a0:	b913      	cbnz	r3, bc7a8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc7a2:	200b      	movs	r0, #11
}
   bc7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc7a8:	4978      	ldr	r1, [pc, #480]	; (bc98c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc7aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7ae:	f004 faee 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc7b2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc7b6:	f000 ff05 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc7ba:	220a      	movs	r2, #10
   bc7bc:	1b81      	subs	r1, r0, r6
   bc7be:	4628      	mov	r0, r5
   bc7c0:	f7fb fc9b 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc7c4:	4972      	ldr	r1, [pc, #456]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc7c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7ca:	f004 fafa 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc7ce:	e7e8      	b.n	bc7a2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc7d0:	2b02      	cmp	r3, #2
   bc7d2:	d137      	bne.n	bc844 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc7d4:	2901      	cmp	r1, #1
   bc7d6:	f040 80aa 	bne.w	bc92e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc7da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc7de:	b193      	cbz	r3, bc806 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc7e0:	496c      	ldr	r1, [pc, #432]	; (bc994 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc7e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7e6:	f004 fad2 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc7ea:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc7ee:	f000 fee9 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc7f2:	220a      	movs	r2, #10
   bc7f4:	1b81      	subs	r1, r0, r6
   bc7f6:	4628      	mov	r0, r5
   bc7f8:	f7fb fc7f 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc7fc:	4964      	ldr	r1, [pc, #400]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc7fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc802:	f004 fade 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc806:	200a      	movs	r0, #10
   bc808:	e7cc      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc80a:	42bb      	cmp	r3, r7
   bc80c:	d102      	bne.n	bc814 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc80e:	786b      	ldrb	r3, [r5, #1]
   bc810:	4543      	cmp	r3, r8
   bc812:	d019      	beq.n	bc848 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc814:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc818:	b193      	cbz	r3, bc840 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc81a:	495f      	ldr	r1, [pc, #380]	; (bc998 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc81c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc820:	f004 fab5 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc824:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc828:	f000 fecc 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc82c:	220a      	movs	r2, #10
   bc82e:	1b81      	subs	r1, r0, r6
   bc830:	4628      	mov	r0, r5
   bc832:	f7fb fc62 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc836:	4956      	ldr	r1, [pc, #344]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc838:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc83c:	f004 fac1 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc840:	200d      	movs	r0, #13
   bc842:	e7af      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc844:	2901      	cmp	r1, #1
   bc846:	d172      	bne.n	bc92e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc848:	89eb      	ldrh	r3, [r5, #14]
   bc84a:	bb8b      	cbnz	r3, bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc84c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc850:	b193      	cbz	r3, bc878 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc852:	4952      	ldr	r1, [pc, #328]	; (bc99c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc854:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc858:	f004 fa99 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc85c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc860:	f000 feb0 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc864:	220a      	movs	r2, #10
   bc866:	1b81      	subs	r1, r0, r6
   bc868:	4628      	mov	r0, r5
   bc86a:	f7fb fc46 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc86e:	4948      	ldr	r1, [pc, #288]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc870:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc874:	f004 faa5 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc878:	2002      	movs	r0, #2
   bc87a:	e793      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc87c:	430b      	orrs	r3, r1
   bc87e:	d117      	bne.n	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc880:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc884:	b193      	cbz	r3, bc8ac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc886:	4946      	ldr	r1, [pc, #280]	; (bc9a0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc888:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc88c:	f004 fa7f 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc890:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc894:	f000 fe96 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc898:	220a      	movs	r2, #10
   bc89a:	1b81      	subs	r1, r0, r6
   bc89c:	4628      	mov	r0, r5
   bc89e:	f7fb fc2c 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc8a2:	493b      	ldr	r1, [pc, #236]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc8a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8a8:	f004 fa8b 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc8ac:	2001      	movs	r0, #1
   bc8ae:	e779      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc8b0:	2001      	movs	r0, #1
   bc8b2:	f001 f9e9 	bl	bdc88 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc8b6:	e752      	b.n	bc75e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc8b8:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc8ba:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc8be:	2a01      	cmp	r2, #1
   bc8c0:	d11f      	bne.n	bc902 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc8c2:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc8c6:	2a02      	cmp	r2, #2
   bc8c8:	d11b      	bne.n	bc902 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc8ca:	7baa      	ldrb	r2, [r5, #14]
   bc8cc:	2a01      	cmp	r2, #1
   bc8ce:	d118      	bne.n	bc902 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc8d0:	782a      	ldrb	r2, [r5, #0]
   bc8d2:	42ba      	cmp	r2, r7
   bc8d4:	d115      	bne.n	bc902 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc8d6:	786a      	ldrb	r2, [r5, #1]
   bc8d8:	4542      	cmp	r2, r8
   bc8da:	d112      	bne.n	bc902 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc8dc:	2b00      	cmp	r3, #0
   bc8de:	f43f af60 	beq.w	bc7a2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc8e2:	4930      	ldr	r1, [pc, #192]	; (bc9a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc8e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc8e8:	f004 fa51 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc8ec:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc8f0:	f000 fe68 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc8f4:	220a      	movs	r2, #10
   bc8f6:	1b81      	subs	r1, r0, r6
   bc8f8:	4628      	mov	r0, r5
   bc8fa:	f7fb fbfe 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc8fe:	492a      	ldr	r1, [pc, #168]	; (bc9a8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc900:	e761      	b.n	bc7c6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc902:	b193      	cbz	r3, bc92a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc904:	4929      	ldr	r1, [pc, #164]	; (bc9ac <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc906:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc90a:	f004 fa40 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc90e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc912:	f000 fe57 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc916:	220a      	movs	r2, #10
   bc918:	1b81      	subs	r1, r0, r6
   bc91a:	4628      	mov	r0, r5
   bc91c:	f7fb fbed 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc920:	4923      	ldr	r1, [pc, #140]	; (bc9b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc922:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc926:	f004 fa4c 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc92a:	2003      	movs	r0, #3
   bc92c:	e73a      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc92e:	2903      	cmp	r1, #3
   bc930:	d1a4      	bne.n	bc87c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc932:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc936:	b193      	cbz	r3, bc95e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc938:	491e      	ldr	r1, [pc, #120]	; (bc9b4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc93a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc93e:	f004 fa26 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc942:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc946:	f000 fe3d 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bc94a:	220a      	movs	r2, #10
   bc94c:	1b81      	subs	r1, r0, r6
   bc94e:	4628      	mov	r0, r5
   bc950:	f7fb fbd3 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc954:	490e      	ldr	r1, [pc, #56]	; (bc990 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc956:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc95a:	f004 fa32 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc95e:	2004      	movs	r0, #4
   bc960:	e720      	b.n	bc7a4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc962:	2903      	cmp	r1, #3
   bc964:	d0e5      	beq.n	bc932 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc966:	2900      	cmp	r1, #0
   bc968:	d1a2      	bne.n	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc96a:	7bab      	ldrb	r3, [r5, #14]
   bc96c:	2b01      	cmp	r3, #1
   bc96e:	d19f      	bne.n	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc970:	782b      	ldrb	r3, [r5, #0]
   bc972:	42bb      	cmp	r3, r7
   bc974:	d19c      	bne.n	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc976:	786b      	ldrb	r3, [r5, #1]
   bc978:	4543      	cmp	r3, r8
   bc97a:	d199      	bne.n	bc8b0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc97c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc980:	2b00      	cmp	r3, #0
   bc982:	f43f af0e 	beq.w	bc7a2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc986:	490c      	ldr	r1, [pc, #48]	; (bc9b8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc988:	e70f      	b.n	bc7aa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc98a:	bf00      	nop
   bc98c:	000c5884 	.word	0x000c5884
   bc990:	000c58c1 	.word	0x000c58c1
   bc994:	000c58c7 	.word	0x000c58c7
   bc998:	000c58f8 	.word	0x000c58f8
   bc99c:	000c592a 	.word	0x000c592a
   bc9a0:	000c59ca 	.word	0x000c59ca
   bc9a4:	000c5a0b 	.word	0x000c5a0b
   bc9a8:	000c5a3e 	.word	0x000c5a3e
   bc9ac:	000c5a46 	.word	0x000c5a46
   bc9b0:	000c5a69 	.word	0x000c5a69
   bc9b4:	000c5950 	.word	0x000c5950
   bc9b8:	000c598b 	.word	0x000c598b

000bc9bc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc9c0:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc9c2:	2102      	movs	r1, #2
   bc9c4:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9c6:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9ca:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9ce:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc9d2:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9d4:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9d8:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc9dc:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc9e0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc9e4:	4604      	mov	r4, r0
   bc9e6:	4617      	mov	r7, r2
   bc9e8:	4698      	mov	r8, r3
   bc9ea:	f000 fdeb 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc9ee:	f240 1a01 	movw	sl, #257	; 0x101
   bc9f2:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc9f4:	f240 2b01 	movw	fp, #513	; 0x201
   bc9f8:	f000 fde4 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc9fc:	1b80      	subs	r0, r0, r6
   bc9fe:	4548      	cmp	r0, r9
   bca00:	d269      	bcs.n	bcad6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bca02:	4643      	mov	r3, r8
   bca04:	463a      	mov	r2, r7
   bca06:	4629      	mov	r1, r5
   bca08:	4620      	mov	r0, r4
   bca0a:	f7ff fe75 	bl	bc6f8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bca0e:	2800      	cmp	r0, #0
   bca10:	d05d      	beq.n	bcace <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bca12:	89ea      	ldrh	r2, [r5, #14]
   bca14:	4552      	cmp	r2, sl
   bca16:	d11e      	bne.n	bca56 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bca18:	782b      	ldrb	r3, [r5, #0]
   bca1a:	42bb      	cmp	r3, r7
   bca1c:	d11b      	bne.n	bca56 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bca1e:	786b      	ldrb	r3, [r5, #1]
   bca20:	4543      	cmp	r3, r8
   bca22:	d118      	bne.n	bca56 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bca24:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca28:	b193      	cbz	r3, bca50 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bca2a:	4937      	ldr	r1, [pc, #220]	; (bcb08 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bca2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca30:	f004 f9ad 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca34:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca38:	f000 fdc4 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bca3c:	220a      	movs	r2, #10
   bca3e:	1b81      	subs	r1, r0, r6
   bca40:	4628      	mov	r0, r5
   bca42:	f7fb fb5a 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca46:	4931      	ldr	r1, [pc, #196]	; (bcb0c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bca48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca4c:	f004 f9b9 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bca50:	200b      	movs	r0, #11
}
   bca52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bca56:	7beb      	ldrb	r3, [r5, #15]
   bca58:	2b01      	cmp	r3, #1
   bca5a:	d11d      	bne.n	bca98 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bca5c:	782b      	ldrb	r3, [r5, #0]
   bca5e:	42bb      	cmp	r3, r7
   bca60:	d102      	bne.n	bca68 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bca62:	786b      	ldrb	r3, [r5, #1]
   bca64:	4543      	cmp	r3, r8
   bca66:	d032      	beq.n	bcace <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bca68:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca6c:	b193      	cbz	r3, bca94 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bca6e:	4928      	ldr	r1, [pc, #160]	; (bcb10 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bca70:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca74:	f004 f98b 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bca78:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bca7c:	f000 fda2 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bca80:	220a      	movs	r2, #10
   bca82:	1b81      	subs	r1, r0, r6
   bca84:	4628      	mov	r0, r5
   bca86:	f7fb fb38 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bca8a:	4920      	ldr	r1, [pc, #128]	; (bcb0c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bca8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca90:	f004 f997 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bca94:	200d      	movs	r0, #13
   bca96:	e7dc      	b.n	bca52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bca98:	455a      	cmp	r2, fp
   bca9a:	d018      	beq.n	bcace <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bca9c:	b9bb      	cbnz	r3, bcace <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bca9e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcaa2:	b193      	cbz	r3, bcaca <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bcaa4:	491b      	ldr	r1, [pc, #108]	; (bcb14 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bcaa6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaaa:	f004 f970 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcaae:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcab2:	f000 fd87 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bcab6:	220a      	movs	r2, #10
   bcab8:	1b81      	subs	r1, r0, r6
   bcaba:	4628      	mov	r0, r5
   bcabc:	f7fb fb1d 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcac0:	4912      	ldr	r1, [pc, #72]	; (bcb0c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bcac2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcac6:	f004 f97c 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bcaca:	2002      	movs	r0, #2
   bcacc:	e7c1      	b.n	bca52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bcace:	2001      	movs	r0, #1
   bcad0:	f001 f8da 	bl	bdc88 <delay>
  while (millis() - startTime < maxTime)
   bcad4:	e790      	b.n	bc9f8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bcad6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcada:	b193      	cbz	r3, bcb02 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bcadc:	490e      	ldr	r1, [pc, #56]	; (bcb18 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bcade:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcae2:	f004 f954 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcae6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcaea:	f000 fd6b 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
   bcaee:	220a      	movs	r2, #10
   bcaf0:	1b81      	subs	r1, r0, r6
   bcaf2:	4628      	mov	r0, r5
   bcaf4:	f7fb fb01 	bl	b80fa <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bcaf8:	4908      	ldr	r1, [pc, #32]	; (bcb1c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bcafa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcafe:	f004 f960 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcb02:	2003      	movs	r0, #3
   bcb04:	e7a5      	b.n	bca52 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bcb06:	bf00      	nop
   bcb08:	000c5a70 	.word	0x000c5a70
   bcb0c:	000c58c1 	.word	0x000c58c1
   bcb10:	000c5aaa 	.word	0x000c5aaa
   bcb14:	000c5ade 	.word	0x000c5ade
   bcb18:	000c5b17 	.word	0x000c5b17
   bcb1c:	000c5b3c 	.word	0x000c5b3c

000bcb20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bcb20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bcb24:	4604      	mov	r4, r0
   bcb26:	4698      	mov	r8, r3
   bcb28:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bcb2a:	f7fc fcc9 	bl	b94c0 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bcb2e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bcb32:	460d      	mov	r5, r1
  if (_printDebug == true)
   bcb34:	b14b      	cbz	r3, bcb4a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bcb36:	492a      	ldr	r1, [pc, #168]	; (bcbe0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bcb38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb3c:	f004 f927 	bl	c0d8e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bcb40:	2201      	movs	r2, #1
   bcb42:	4629      	mov	r1, r5
   bcb44:	4620      	mov	r0, r4
   bcb46:	f7fc fee9 	bl	b991c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bcb4a:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bcb4e:	b993      	cbnz	r3, bcb76 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bcb50:	463a      	mov	r2, r7
   bcb52:	4629      	mov	r1, r5
   bcb54:	4620      	mov	r0, r4
   bcb56:	f7fc fce1 	bl	b951c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bcb5a:	4606      	mov	r6, r0
   bcb5c:	b188      	cbz	r0, bcb82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcb5e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcb62:	b123      	cbz	r3, bcb6e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bcb64:	491f      	ldr	r1, [pc, #124]	; (bcbe4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bcb66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb6a:	f004 f92a 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bcb6e:	4630      	mov	r0, r6
   bcb70:	b002      	add	sp, #8
   bcb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bcb76:	2b01      	cmp	r3, #1
   bcb78:	d11b      	bne.n	bcbb2 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bcb7a:	4629      	mov	r1, r5
   bcb7c:	4620      	mov	r0, r4
   bcb7e:	f7fc fd8f 	bl	b96a0 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bcb82:	b35f      	cbz	r7, bcbdc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcb84:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bcb86:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bcb8a:	2a06      	cmp	r2, #6
   bcb8c:	d002      	beq.n	bcb94 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bcb8e:	f1b8 0f00 	cmp.w	r8, #0
   bcb92:	d015      	beq.n	bcbc0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bcb94:	b123      	cbz	r3, bcba0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bcb96:	4914      	ldr	r1, [pc, #80]	; (bcbe8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bcb98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb9c:	f004 f911 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcba0:	786b      	ldrb	r3, [r5, #1]
   bcba2:	782a      	ldrb	r2, [r5, #0]
   bcba4:	9700      	str	r7, [sp, #0]
   bcba6:	4629      	mov	r1, r5
   bcba8:	4620      	mov	r0, r4
   bcbaa:	f7ff fdbd 	bl	bc728 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcbae:	4606      	mov	r6, r0
   bcbb0:	e7dd      	b.n	bcb6e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bcbb2:	2b02      	cmp	r3, #2
   bcbb4:	d1e5      	bne.n	bcb82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bcbb6:	4629      	mov	r1, r5
   bcbb8:	4620      	mov	r0, r4
   bcbba:	f7fc fdcb 	bl	b9754 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bcbbe:	e7e0      	b.n	bcb82 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bcbc0:	b123      	cbz	r3, bcbcc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bcbc2:	490a      	ldr	r1, [pc, #40]	; (bcbec <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bcbc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcbc8:	f004 f8fb 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bcbcc:	786b      	ldrb	r3, [r5, #1]
   bcbce:	782a      	ldrb	r2, [r5, #0]
   bcbd0:	9700      	str	r7, [sp, #0]
   bcbd2:	4629      	mov	r1, r5
   bcbd4:	4620      	mov	r0, r4
   bcbd6:	f7ff fef1 	bl	bc9bc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bcbda:	e7e8      	b.n	bcbae <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bcbdc:	463e      	mov	r6, r7
   bcbde:	e7c6      	b.n	bcb6e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bcbe0:	000c5b57 	.word	0x000c5b57
   bcbe4:	000c5b62 	.word	0x000c5b62
   bcbe8:	000c5b7a 	.word	0x000c5b7a
   bcbec:	000c5ba0 	.word	0x000c5ba0

000bcbf0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bcbf0:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bcbf2:	4b09      	ldr	r3, [pc, #36]	; (bcc18 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bcbf4:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcbf8:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcbfc:	2300      	movs	r3, #0
   bcbfe:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bcc02:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bcc04:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bcc08:	f7ff ff8a 	bl	bcb20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bcc0c:	f1a0 030b 	sub.w	r3, r0, #11
   bcc10:	4258      	negs	r0, r3
   bcc12:	4158      	adcs	r0, r3
   bcc14:	bd38      	pop	{r3, r4, r5, pc}
   bcc16:	bf00      	nop
   bcc18:	00010006 	.word	0x00010006

000bcc1c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bcc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcc1e:	4615      	mov	r5, r2
   bcc20:	461a      	mov	r2, r3
   bcc22:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcc24:	9301      	str	r3, [sp, #4]
   bcc26:	f7ff ffe3 	bl	bcbf0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bcc2a:	b190      	cbz	r0, bcc52 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bcc2c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcc30:	4b09      	ldr	r3, [pc, #36]	; (bcc58 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bcc32:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcc36:	2300      	movs	r3, #0
   bcc38:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcc3c:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bcc3e:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcc40:	4620      	mov	r0, r4
   bcc42:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcc46:	f7ff ff6b 	bl	bcb20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcc4a:	f1a0 030a 	sub.w	r3, r0, #10
   bcc4e:	4258      	negs	r0, r3
   bcc50:	4158      	adcs	r0, r3
}
   bcc52:	b003      	add	sp, #12
   bcc54:	bd30      	pop	{r4, r5, pc}
   bcc56:	bf00      	nop
   bcc58:	00140006 	.word	0x00140006

000bcc5c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bcc5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bcc5e:	4615      	mov	r5, r2
   bcc60:	461a      	mov	r2, r3
   bcc62:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bcc64:	9301      	str	r3, [sp, #4]
   bcc66:	f7ff ffc3 	bl	bcbf0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bcc6a:	b190      	cbz	r0, bcc92 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcc6c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bcc70:	4b09      	ldr	r3, [pc, #36]	; (bcc98 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bcc72:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bcc76:	2300      	movs	r3, #0
   bcc78:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcc7c:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bcc7e:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bcc80:	4620      	mov	r0, r4
   bcc82:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bcc86:	f7ff ff4b 	bl	bcb20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bcc8a:	f1a0 030a 	sub.w	r3, r0, #10
   bcc8e:	4258      	negs	r0, r3
   bcc90:	4158      	adcs	r0, r3
}
   bcc92:	b003      	add	sp, #12
   bcc94:	bd30      	pop	{r4, r5, pc}
   bcc96:	bf00      	nop
   bcc98:	00140006 	.word	0x00140006

000bcc9c <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bcc9c:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bcc9e:	460a      	mov	r2, r1
   bcca0:	2100      	movs	r1, #0
   bcca2:	f7ff bfbb 	b.w	bcc1c <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bcca8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bcca8:	b510      	push	{r4, lr}
   bccaa:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bccac:	2018      	movs	r0, #24
   bccae:	f7f7 f9f2 	bl	b4096 <_Znwj>
   bccb2:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bccb4:	b960      	cbnz	r0, bccd0 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bccb6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bccba:	b913      	cbnz	r3, bccc2 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bccbc:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bccc0:	b128      	cbz	r0, bccce <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bccc2:	4905      	ldr	r1, [pc, #20]	; (bccd8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bccc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bccc8:	f004 f87b 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcccc:	2000      	movs	r0, #0
}
   bccce:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bccd0:	2300      	movs	r3, #0
   bccd2:	7503      	strb	r3, [r0, #20]
  return (true);
   bccd4:	2001      	movs	r0, #1
   bccd6:	e7fa      	b.n	bccce <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bccd8:	000c5bc9 	.word	0x000c5bc9

000bccdc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bccdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bccde:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bcce0:	4605      	mov	r5, r0
   bcce2:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bcce4:	b18b      	cbz	r3, bcd0a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bcce6:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bccea:	4b13      	ldr	r3, [pc, #76]	; (bcd38 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bccec:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bccf0:	2300      	movs	r3, #0
   bccf2:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bccf6:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bccf8:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bccfa:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bccfe:	f7ff ff0f 	bl	bcb20 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bcd02:	280b      	cmp	r0, #11
   bcd04:	d10b      	bne.n	bcd1e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bcd06:	2401      	movs	r4, #1
   bcd08:	e00d      	b.n	bcd26 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bcd0a:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bcd0c:	f7ff ffcc 	bl	bcca8 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bcd10:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bcd12:	9a01      	ldr	r2, [sp, #4]
   bcd14:	2c00      	cmp	r4, #0
   bcd16:	d1e6      	bne.n	bcce6 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bcd18:	4620      	mov	r0, r4
   bcd1a:	b002      	add	sp, #8
   bcd1c:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bcd1e:	f1a0 030d 	sub.w	r3, r0, #13
   bcd22:	425c      	negs	r4, r3
   bcd24:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bcd26:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bcd28:	b110      	cbz	r0, bcd30 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bcd2a:	2118      	movs	r1, #24
   bcd2c:	f7f7 f9b9 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bcd30:	2300      	movs	r3, #0
   bcd32:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bcd34:	e7f0      	b.n	bcd18 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bcd36:	bf00      	nop
   bcd38:	00010006 	.word	0x00010006

000bcd3c <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bcd3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bcd3e:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bcd42:	4604      	mov	r4, r0
   bcd44:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bcd46:	b145      	cbz	r5, bcd5a <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bcd48:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bcd4c:	b9b1      	cbnz	r1, bcd7c <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bcd4e:	4620      	mov	r0, r4
}
   bcd50:	b003      	add	sp, #12
   bcd52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bcd56:	f7ff bfc1 	b.w	bccdc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bcd5a:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bcd5c:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bcd60:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bcd64:	f002 fd1a 	bl	bf79c <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bcd68:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcd6c:	f002 fd21 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
   bcd70:	9a01      	ldr	r2, [sp, #4]
   bcd72:	2800      	cmp	r0, #0
   bcd74:	d0e8      	beq.n	bcd48 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bcd76:	4628      	mov	r0, r5
   bcd78:	b003      	add	sp, #12
   bcd7a:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bcd7c:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bcd7e:	bf18      	it	ne
   bcd80:	2104      	movne	r1, #4
   bcd82:	e7e4      	b.n	bcd4e <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bcd84 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bcd84:	b570      	push	{r4, r5, r6, lr}
   bcd86:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bcd88:	2300      	movs	r3, #0
   bcd8a:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bcd8e:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bcd92:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bcd96:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bcd9a:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bcd9e:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bcda0:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bcda4:	b91b      	cbnz	r3, bcdae <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bcda6:	f44f 7180 	mov.w	r1, #256	; 0x100
   bcdaa:	f7fb fa45 	bl	b8238 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bcdae:	4620      	mov	r0, r4
   bcdb0:	f7fc fe5c 	bl	b9a6c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bcdb4:	4631      	mov	r1, r6
   bcdb6:	4620      	mov	r0, r4
   bcdb8:	f7ff ffc0 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bcdbc:	b110      	cbz	r0, bcdc4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bcdbe:	2501      	movs	r5, #1
}
   bcdc0:	4628      	mov	r0, r5
   bcdc2:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcdc4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcdc8:	b913      	cbnz	r3, bcdd0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bcdca:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcdce:	b123      	cbz	r3, bcdda <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bcdd0:	4917      	ldr	r1, [pc, #92]	; (bce30 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bcdd2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdd6:	f003 fff4 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bcdda:	4631      	mov	r1, r6
   bcddc:	4620      	mov	r0, r4
   bcdde:	f7ff ffad 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bcde2:	2800      	cmp	r0, #0
   bcde4:	d1eb      	bne.n	bcdbe <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bcde6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcdea:	b913      	cbnz	r3, bcdf2 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bcdec:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bcdf0:	b123      	cbz	r3, bcdfc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bcdf2:	4910      	ldr	r1, [pc, #64]	; (bce34 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bcdf4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdf8:	f003 ffe3 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bcdfc:	4631      	mov	r1, r6
   bcdfe:	4620      	mov	r0, r4
   bce00:	f7ff ff9c 	bl	bcd3c <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bce04:	2800      	cmp	r0, #0
   bce06:	d1da      	bne.n	bcdbe <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bce08:	2d00      	cmp	r5, #0
   bce0a:	d0d9      	beq.n	bcdc0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bce0c:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bce10:	2d00      	cmp	r5, #0
   bce12:	d0d5      	beq.n	bcdc0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bce14:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce18:	b91b      	cbnz	r3, bce22 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bce1a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bce1e:	2b00      	cmp	r3, #0
   bce20:	d0cd      	beq.n	bcdbe <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bce22:	4905      	ldr	r1, [pc, #20]	; (bce38 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bce24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce28:	f003 ffcb 	bl	c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bce2c:	e7c8      	b.n	bcdc0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bce2e:	bf00      	nop
   bce30:	000c5bf0 	.word	0x000c5bf0
   bce34:	000c5c14 	.word	0x000c5c14
   bce38:	000c5c37 	.word	0x000c5c37

000bce3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bce3c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bce3e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bce40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bce44:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bce46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bce4a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bce4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bce50:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bce52:	2500      	movs	r5, #0
  _width = width;
   bce54:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bce58:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bce5a:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bce5e:	7303      	strb	r3, [r0, #12]
}
   bce60:	bd30      	pop	{r4, r5, pc}

000bce62 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce62:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bce64:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bce66:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce68:	b085      	sub	sp, #20
   bce6a:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bce6c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bce6e:	f88d 400c 	strb.w	r4, [sp, #12]
   bce72:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bce74:	460e      	mov	r6, r1
   bce76:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bce78:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bce7c:	b140      	cbz	r0, bce90 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bce7e:	7b5b      	ldrb	r3, [r3, #13]
   bce80:	9301      	str	r3, [sp, #4]
   bce82:	ab03      	add	r3, sp, #12
   bce84:	9300      	str	r3, [sp, #0]
   bce86:	2301      	movs	r3, #1
   bce88:	f000 f90a 	bl	bd0a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bce8c:	b005      	add	sp, #20
   bce8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bce90:	6858      	ldr	r0, [r3, #4]
   bce92:	2800      	cmp	r0, #0
   bce94:	d0fa      	beq.n	bce8c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bce96:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bce9a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bce9e:	f1be 0f03 	cmp.w	lr, #3
   bcea2:	d10c      	bne.n	bcebe <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bcea4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bcea8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bceac:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bceae:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bceb2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bceb6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bceb8:	f000 fa2b 	bl	bd312 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bcebc:	e7e6      	b.n	bce8c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcebe:	f1be 0f00 	cmp.w	lr, #0
   bcec2:	d109      	bne.n	bced8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bcec4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bcec8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bcecc:	f8cd c000 	str.w	ip, [sp]
   bced0:	ab03      	add	r3, sp, #12
   bced2:	463a      	mov	r2, r7
   bced4:	4631      	mov	r1, r6
   bced6:	e7ef      	b.n	bceb8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bced8:	f1be 0f02 	cmp.w	lr, #2
   bcedc:	d102      	bne.n	bcee4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bcede:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bcee2:	e7f1      	b.n	bcec8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcee4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bcee8:	bf01      	itttt	eq
   bceea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bceee:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bcef2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bcef6:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bcefa:	e7e7      	b.n	bcecc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bcefc <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bcefc:	b4f0      	push	{r4, r5, r6, r7}
   bcefe:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bcf00:	b902      	cbnz	r2, bcf04 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bcf02:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bcf04:	2a04      	cmp	r2, #4
   bcf06:	d814      	bhi.n	bcf32 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bcf08:	f100 050f 	add.w	r5, r0, #15
   bcf0c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bcf0e:	1884      	adds	r4, r0, r2
   bcf10:	4629      	mov	r1, r5
   bcf12:	4284      	cmp	r4, r0
   bcf14:	d009      	beq.n	bcf2a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bcf16:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bcf18:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bcf1a:	b927      	cbnz	r7, bcf26 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bcf1c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bcf1e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bcf20:	3501      	adds	r5, #1
   bcf22:	3c01      	subs	r4, #1
   bcf24:	e7f5      	b.n	bcf12 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bcf26:	73a6      	strb	r6, [r4, #14]
   bcf28:	e7f9      	b.n	bcf1e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bcf2a:	4620      	mov	r0, r4
}
   bcf2c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bcf2e:	f7ff bf98 	b.w	bce62 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bcf32:	2000      	movs	r0, #0
   bcf34:	bcf0      	pop	{r4, r5, r6, r7}
   bcf36:	4770      	bx	lr

000bcf38 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcf3a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcf3c:	7a85      	ldrb	r5, [r0, #10]
   bcf3e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf42:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bcf44:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcf46:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcf48:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bcf4a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bcf4e:	b140      	cbz	r0, bcf62 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf50:	2100      	movs	r1, #0
   bcf52:	e9cd 2100 	strd	r2, r1, [sp]
   bcf56:	a903      	add	r1, sp, #12
   bcf58:	7b62      	ldrb	r2, [r4, #13]
   bcf5a:	f000 f90f 	bl	bd17c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bcf5e:	b004      	add	sp, #16
   bcf60:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bcf62:	6860      	ldr	r0, [r4, #4]
   bcf64:	2800      	cmp	r0, #0
   bcf66:	d0fa      	beq.n	bcf5e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcf68:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf6a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcf6c:	2903      	cmp	r1, #3
   bcf6e:	d10d      	bne.n	bcf8c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bcf70:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcf74:	21ff      	movs	r1, #255	; 0xff
   bcf76:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bcf7a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcf7e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcf82:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf84:	a903      	add	r1, sp, #12
   bcf86:	f000 f9f6 	bl	bd376 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bcf8a:	e7e8      	b.n	bcf5e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcf8c:	b941      	cbnz	r1, bcfa0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bcf8e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bcf92:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcf96:	21ff      	movs	r1, #255	; 0xff
   bcf98:	e9cd 2100 	strd	r2, r1, [sp]
   bcf9c:	4622      	mov	r2, r4
   bcf9e:	e7f1      	b.n	bcf84 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcfa0:	2902      	cmp	r1, #2
   bcfa2:	d102      	bne.n	bcfaa <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcfa4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcfa8:	e7f3      	b.n	bcf92 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcfaa:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcfac:	bf02      	ittt	eq
   bcfae:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcfb2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcfb6:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcfba:	e7ec      	b.n	bcf96 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcfbc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcfbc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcfbe:	f100 050f 	add.w	r5, r0, #15
   bcfc2:	7b02      	ldrb	r2, [r0, #12]
   bcfc4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bcfc6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bcfc8:	f7ff ffb6 	bl	bcf38 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bcfcc:	b178      	cbz	r0, bcfee <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bcfce:	7b22      	ldrb	r2, [r4, #12]
   bcfd0:	4629      	mov	r1, r5
   bcfd2:	4422      	add	r2, r4
  uint32_t value = 0;
   bcfd4:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bcfd6:	42a2      	cmp	r2, r4
   bcfd8:	d00b      	beq.n	bcff2 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bcfda:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bcfdc:	7ba0      	ldrb	r0, [r4, #14]
   bcfde:	b920      	cbnz	r0, bcfea <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bcfe0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bcfe2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bcfe4:	3a01      	subs	r2, #1
   bcfe6:	3101      	adds	r1, #1
   bcfe8:	e7f5      	b.n	bcfd6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bcfea:	7808      	ldrb	r0, [r1, #0]
   bcfec:	e7f9      	b.n	bcfe2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bcfee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcff2:	bd38      	pop	{r3, r4, r5, pc}

000bcff4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bcff4:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bcff6:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bcff8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bcffa:	7143      	strb	r3, [r0, #5]
}
   bcffc:	bd10      	pop	{r4, pc}

000bcffe <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bcffe:	b510      	push	{r4, lr}
   bd000:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd002:	6800      	ldr	r0, [r0, #0]
   bd004:	f7ff ffda 	bl	bcfbc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd008:	7922      	ldrb	r2, [r4, #4]
   bd00a:	2301      	movs	r3, #1
   bd00c:	4093      	lsls	r3, r2
  val >>= _shift;
   bd00e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd010:	3b01      	subs	r3, #1
  val >>= _shift;
   bd012:	40d0      	lsrs	r0, r2
}
   bd014:	4018      	ands	r0, r3
   bd016:	bd10      	pop	{r4, pc}

000bd018 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd018:	b570      	push	{r4, r5, r6, lr}
   bd01a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd01c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd01e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd020:	f7ff ffcc 	bl	bcfbc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd024:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd026:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd028:	2201      	movs	r2, #1
   bd02a:	409a      	lsls	r2, r3
   bd02c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd02e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd032:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd036:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd038:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd03a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd03e:	4329      	orrs	r1, r5
   bd040:	7b02      	ldrb	r2, [r0, #12]
}
   bd042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd046:	f7ff bf59 	b.w	bcefc <_ZN23Adafruit_BusIO_Register5writeEmh>

000bd04a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd04a:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd04c:	2200      	movs	r2, #0
   bd04e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd050:	2220      	movs	r2, #32
  _addr = addr;
   bd052:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd054:	60c2      	str	r2, [r0, #12]
#endif
}
   bd056:	4770      	bx	lr

000bd058 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd058:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd05a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd05c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd05e:	b153      	cbz	r3, bd076 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd060:	7821      	ldrb	r1, [r4, #0]
   bd062:	6860      	ldr	r0, [r4, #4]
   bd064:	f002 fb9a 	bl	bf79c <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd068:	6860      	ldr	r0, [r4, #4]
   bd06a:	f002 fba2 	bl	bf7b2 <_ZN7TwoWire15endTransmissionEv>
   bd06e:	fab0 f080 	clz	r0, r0
   bd072:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd074:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd076:	2101      	movs	r1, #1
   bd078:	f000 f803 	bl	bd082 <_ZN18Adafruit_I2CDevice5beginEb>
   bd07c:	2800      	cmp	r0, #0
   bd07e:	d1ef      	bne.n	bd060 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd080:	e7f8      	b.n	bd074 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd082 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd082:	b538      	push	{r3, r4, r5, lr}
   bd084:	4604      	mov	r4, r0
  _wire->begin();
   bd086:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd088:	460d      	mov	r5, r1
  _wire->begin();
   bd08a:	f002 fb55 	bl	bf738 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd08e:	2001      	movs	r0, #1
   bd090:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd092:	b125      	cbz	r5, bd09e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd094:	4620      	mov	r0, r4
}
   bd096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd09a:	f7ff bfdd 	b.w	bd058 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd09e:	bd38      	pop	{r3, r4, r5, pc}

000bd0a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd0a4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd0a8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd0aa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd0ac:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd0ae:	4432      	add	r2, r6
   bd0b0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd0b2:	4604      	mov	r4, r0
   bd0b4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd0b6:	d902      	bls.n	bd0be <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd0b8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd0be:	7801      	ldrb	r1, [r0, #0]
   bd0c0:	6840      	ldr	r0, [r0, #4]
   bd0c2:	f002 fb6b 	bl	bf79c <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd0c6:	b97e      	cbnz	r6, bd0e8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd0c8:	6860      	ldr	r0, [r4, #4]
   bd0ca:	6803      	ldr	r3, [r0, #0]
   bd0cc:	462a      	mov	r2, r5
   bd0ce:	68db      	ldr	r3, [r3, #12]
   bd0d0:	4641      	mov	r1, r8
   bd0d2:	4798      	blx	r3
   bd0d4:	4285      	cmp	r5, r0
   bd0d6:	d1ef      	bne.n	bd0b8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bd0d8:	6860      	ldr	r0, [r4, #4]
   bd0da:	4639      	mov	r1, r7
   bd0dc:	f002 fb65 	bl	bf7aa <_ZN7TwoWire15endTransmissionEh>
   bd0e0:	fab0 f080 	clz	r0, r0
   bd0e4:	0940      	lsrs	r0, r0, #5
   bd0e6:	e7e8      	b.n	bd0ba <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd0e8:	f1b9 0f00 	cmp.w	r9, #0
   bd0ec:	d0ec      	beq.n	bd0c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bd0ee:	6860      	ldr	r0, [r4, #4]
   bd0f0:	6803      	ldr	r3, [r0, #0]
   bd0f2:	4632      	mov	r2, r6
   bd0f4:	68db      	ldr	r3, [r3, #12]
   bd0f6:	4649      	mov	r1, r9
   bd0f8:	4798      	blx	r3
   bd0fa:	4286      	cmp	r6, r0
   bd0fc:	d1dc      	bne.n	bd0b8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bd0fe:	e7e3      	b.n	bd0c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bd100 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bd100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd104:	4615      	mov	r5, r2
   bd106:	4604      	mov	r4, r0
   bd108:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bd10a:	b2d2      	uxtb	r2, r2
   bd10c:	7801      	ldrb	r1, [r0, #0]
   bd10e:	6840      	ldr	r0, [r0, #4]
   bd110:	f002 fb2f 	bl	bf772 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bd114:	4285      	cmp	r5, r0
   bd116:	d10d      	bne.n	bd134 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bd118:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bd11a:	fa1f f887 	uxth.w	r8, r7
   bd11e:	45a8      	cmp	r8, r5
   bd120:	f107 0701 	add.w	r7, r7, #1
   bd124:	d209      	bcs.n	bd13a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bd126:	6860      	ldr	r0, [r4, #4]
   bd128:	6803      	ldr	r3, [r0, #0]
   bd12a:	695b      	ldr	r3, [r3, #20]
   bd12c:	4798      	blx	r3
   bd12e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bd132:	e7f2      	b.n	bd11a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bd134:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd13a:	2001      	movs	r0, #1
   bd13c:	e7fb      	b.n	bd136 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bd13e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bd13e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd142:	4607      	mov	r7, r0
   bd144:	4688      	mov	r8, r1
   bd146:	4616      	mov	r6, r2
   bd148:	4699      	mov	r9, r3
  size_t pos = 0;
   bd14a:	2500      	movs	r5, #0
  while (pos < len) {
   bd14c:	42b5      	cmp	r5, r6
   bd14e:	d212      	bcs.n	bd176 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bd150:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bd152:	1b74      	subs	r4, r6, r5
   bd154:	4294      	cmp	r4, r2
   bd156:	bf28      	it	cs
   bd158:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bd15a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bd15c:	42ab      	cmp	r3, r5
   bd15e:	bf94      	ite	ls
   bd160:	464b      	movls	r3, r9
   bd162:	2300      	movhi	r3, #0
   bd164:	4622      	mov	r2, r4
   bd166:	eb08 0105 	add.w	r1, r8, r5
   bd16a:	4638      	mov	r0, r7
   bd16c:	f7ff ffc8 	bl	bd100 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bd170:	b110      	cbz	r0, bd178 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bd172:	4425      	add	r5, r4
  while (pos < len) {
   bd174:	e7ea      	b.n	bd14c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bd176:	2001      	movs	r0, #1
}
   bd178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bd17c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bd17c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd17e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bd180:	2300      	movs	r3, #0
   bd182:	e9cd 3300 	strd	r3, r3, [sp]
   bd186:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bd18a:	9e06      	ldr	r6, [sp, #24]
   bd18c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bd18e:	f7ff ff87 	bl	bd0a0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bd192:	b140      	cbz	r0, bd1a6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bd194:	2301      	movs	r3, #1
   bd196:	4632      	mov	r2, r6
   bd198:	4629      	mov	r1, r5
   bd19a:	4620      	mov	r0, r4
}
   bd19c:	b002      	add	sp, #8
   bd19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bd1a2:	f7ff bfcc 	b.w	bd13e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bd1a6:	b002      	add	sp, #8
   bd1a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd1ac <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd1b0:	4604      	mov	r4, r0
  if (_spi) {
   bd1b2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd1b4:	b085      	sub	sp, #20
   bd1b6:	460d      	mov	r5, r1
  if (_spi) {
   bd1b8:	b140      	cbz	r0, bd1cc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd1ba:	2300      	movs	r3, #0
   bd1bc:	9300      	str	r3, [sp, #0]
   bd1be:	4613      	mov	r3, r2
   bd1c0:	460a      	mov	r2, r1
   bd1c2:	f003 ff7f 	bl	c10c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd1c6:	b005      	add	sp, #20
   bd1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd1cc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd1ce:	68a0      	ldr	r0, [r4, #8]
   bd1d0:	4f48      	ldr	r7, [pc, #288]	; (bd2f4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd1d2:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd1d6:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd1d8:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd1da:	bf0c      	ite	eq
   bd1dc:	f04f 0b01 	moveq.w	fp, #1
   bd1e0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd1e4:	ea1b 0f03 	tst.w	fp, r3
   bd1e8:	eb01 0302 	add.w	r3, r1, r2
   bd1ec:	bf0c      	ite	eq
   bd1ee:	f04f 0901 	moveq.w	r9, #1
   bd1f2:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd1f6:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd1f8:	9303      	str	r3, [sp, #12]
   bd1fa:	9b03      	ldr	r3, [sp, #12]
   bd1fc:	42ab      	cmp	r3, r5
   bd1fe:	d0e2      	beq.n	bd1c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd200:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd204:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd206:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd20a:	b117      	cbz	r7, bd212 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd20c:	4638      	mov	r0, r7
   bd20e:	f000 f9c9 	bl	bd5a4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd212:	7b63      	ldrb	r3, [r4, #13]
   bd214:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd218:	d141      	bne.n	bd29e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd21a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd21e:	1c5a      	adds	r2, r3, #1
   bd220:	d00f      	beq.n	bd242 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd222:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd226:	bf14      	ite	ne
   bd228:	2301      	movne	r3, #1
   bd22a:	2300      	moveq	r3, #0
   bd22c:	454b      	cmp	r3, r9
   bd22e:	d008      	beq.n	bd242 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd230:	6963      	ldr	r3, [r4, #20]
   bd232:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd234:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd236:	2900      	cmp	r1, #0
   bd238:	d02c      	beq.n	bd294 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd23a:	4302      	orrs	r2, r0
   bd23c:	601a      	str	r2, [r3, #0]
   bd23e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd242:	69a1      	ldr	r1, [r4, #24]
   bd244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd246:	680a      	ldr	r2, [r1, #0]
   bd248:	4313      	orrs	r3, r2
   bd24a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd24c:	b117      	cbz	r7, bd254 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd24e:	4638      	mov	r0, r7
   bd250:	f000 f9a8 	bl	bd5a4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd254:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd258:	3301      	adds	r3, #1
   bd25a:	d006      	beq.n	bd26a <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd25c:	69e3      	ldr	r3, [r4, #28]
   bd25e:	681a      	ldr	r2, [r3, #0]
   bd260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd262:	421a      	tst	r2, r3
            reply |= b;
   bd264:	bf18      	it	ne
   bd266:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd26a:	69a1      	ldr	r1, [r4, #24]
   bd26c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd26e:	680a      	ldr	r2, [r1, #0]
   bd270:	ea22 0303 	bic.w	r3, r2, r3
   bd274:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd276:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd27a:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd27c:	bf18      	it	ne
   bd27e:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd282:	7b23      	ldrb	r3, [r4, #12]
   bd284:	2b00      	cmp	r3, #0
   bd286:	d132      	bne.n	bd2ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd288:	0076      	lsls	r6, r6, #1
   bd28a:	b2f6      	uxtb	r6, r6
   bd28c:	2e00      	cmp	r6, #0
   bd28e:	d1bc      	bne.n	bd20a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd290:	3501      	adds	r5, #1
   bd292:	e7b2      	b.n	bd1fa <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd294:	ea22 0200 	bic.w	r2, r2, r0
   bd298:	601a      	str	r2, [r3, #0]
   bd29a:	4689      	mov	r9, r1
   bd29c:	e7d1      	b.n	bd242 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd29e:	69a1      	ldr	r1, [r4, #24]
   bd2a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd2a2:	680a      	ldr	r2, [r1, #0]
   bd2a4:	4313      	orrs	r3, r2
   bd2a6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd2a8:	b117      	cbz	r7, bd2b0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd2aa:	4638      	mov	r0, r7
   bd2ac:	f000 f97a 	bl	bd5a4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd2b0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd2b4:	3301      	adds	r3, #1
   bd2b6:	d008      	beq.n	bd2ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd2b8:	6963      	ldr	r3, [r4, #20]
   bd2ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd2bc:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd2be:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd2c2:	bf14      	ite	ne
   bd2c4:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd2c6:	438a      	biceq	r2, r1
   bd2c8:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd2ca:	69a1      	ldr	r1, [r4, #24]
   bd2cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd2ce:	680a      	ldr	r2, [r1, #0]
   bd2d0:	ea22 0303 	bic.w	r3, r2, r3
   bd2d4:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd2d6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd2da:	3301      	adds	r3, #1
   bd2dc:	d0cb      	beq.n	bd276 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd2de:	69e3      	ldr	r3, [r4, #28]
   bd2e0:	681a      	ldr	r2, [r3, #0]
   bd2e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd2e4:	421a      	tst	r2, r3
            reply |= b;
   bd2e6:	bf18      	it	ne
   bd2e8:	ea46 0808 	orrne.w	r8, r6, r8
   bd2ec:	e7c3      	b.n	bd276 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd2ee:	0876      	lsrs	r6, r6, #1
   bd2f0:	e7cc      	b.n	bd28c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd2f2:	bf00      	nop
   bd2f4:	0007a120 	.word	0x0007a120

000bd2f8 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd2f8:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd2fa:	2201      	movs	r2, #1
  uint8_t data = send;
   bd2fc:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd300:	f10d 0107 	add.w	r1, sp, #7
   bd304:	f7ff ff52 	bl	bd1ac <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd308:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd30c:	b003      	add	sp, #12
   bd30e:	f85d fb04 	ldr.w	pc, [sp], #4

000bd312 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd316:	4604      	mov	r4, r0
  if (_spi) {
   bd318:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd31a:	460e      	mov	r6, r1
   bd31c:	4617      	mov	r7, r2
   bd31e:	461d      	mov	r5, r3
  if (_spi) {
   bd320:	b110      	cbz	r0, bd328 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd322:	6861      	ldr	r1, [r4, #4]
   bd324:	f003 fe5a 	bl	c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd328:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd32c:	2100      	movs	r1, #0
   bd32e:	b280      	uxth	r0, r0
   bd330:	f004 fac5 	bl	c18be <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd334:	9b06      	ldr	r3, [sp, #24]
   bd336:	eb05 0803 	add.w	r8, r5, r3
   bd33a:	4545      	cmp	r5, r8
   bd33c:	d108      	bne.n	bd350 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd33e:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd340:	42b7      	cmp	r7, r6
   bd342:	d00b      	beq.n	bd35c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd344:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd348:	4620      	mov	r0, r4
   bd34a:	f7ff ffd5 	bl	bd2f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd34e:	e7f7      	b.n	bd340 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd350:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd354:	4620      	mov	r0, r4
   bd356:	f7ff ffcf 	bl	bd2f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd35a:	e7ee      	b.n	bd33a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd35c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd360:	2101      	movs	r1, #1
   bd362:	b280      	uxth	r0, r0
   bd364:	f004 faab 	bl	c18be <digitalWrite>

  if (_spi) {
   bd368:	6820      	ldr	r0, [r4, #0]
   bd36a:	b108      	cbz	r0, bd370 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd36c:	f003 fe1d 	bl	c0faa <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd370:	2001      	movs	r0, #1
   bd372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd376 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd37a:	4604      	mov	r4, r0
  if (_spi) {
   bd37c:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd37e:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd382:	460e      	mov	r6, r1
   bd384:	4617      	mov	r7, r2
   bd386:	461d      	mov	r5, r3
  if (_spi) {
   bd388:	b110      	cbz	r0, bd390 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd38a:	6861      	ldr	r1, [r4, #4]
   bd38c:	f003 fe26 	bl	c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd390:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd394:	2100      	movs	r1, #0
   bd396:	b280      	uxth	r0, r0
   bd398:	f004 fa91 	bl	c18be <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd39c:	4437      	add	r7, r6
   bd39e:	42be      	cmp	r6, r7
   bd3a0:	d10a      	bne.n	bd3b8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd3a2:	9b06      	ldr	r3, [sp, #24]
   bd3a4:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd3a6:	42ae      	cmp	r6, r5
   bd3a8:	d00c      	beq.n	bd3c4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd3aa:	4641      	mov	r1, r8
   bd3ac:	4620      	mov	r0, r4
   bd3ae:	f7ff ffa3 	bl	bd2f8 <_ZN18Adafruit_SPIDevice8transferEh>
   bd3b2:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd3b6:	e7f6      	b.n	bd3a6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd3b8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd3bc:	4620      	mov	r0, r4
   bd3be:	f7ff ff9b 	bl	bd2f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd3c2:	e7ec      	b.n	bd39e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd3c4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd3c8:	2101      	movs	r1, #1
   bd3ca:	b280      	uxth	r0, r0
   bd3cc:	f004 fa77 	bl	c18be <digitalWrite>

  if (_spi) {
   bd3d0:	6820      	ldr	r0, [r4, #0]
   bd3d2:	b108      	cbz	r0, bd3d8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd3d4:	f003 fde9 	bl	c0faa <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd3d8:	2001      	movs	r0, #1
   bd3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bd3e0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bd3e0:	b508      	push	{r3, lr}
   bd3e2:	4b02      	ldr	r3, [pc, #8]	; (bd3ec <hal_ble_stack_init+0xc>)
   bd3e4:	681b      	ldr	r3, [r3, #0]
   bd3e6:	689b      	ldr	r3, [r3, #8]
   bd3e8:	9301      	str	r3, [sp, #4]
   bd3ea:	bd08      	pop	{r3, pc}
   bd3ec:	00030278 	.word	0x00030278

000bd3f0 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bd3f0:	b508      	push	{r3, lr}
   bd3f2:	4b02      	ldr	r3, [pc, #8]	; (bd3fc <hal_ble_gap_set_tx_power+0xc>)
   bd3f4:	681b      	ldr	r3, [r3, #0]
   bd3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd3f8:	9301      	str	r3, [sp, #4]
   bd3fa:	bd08      	pop	{r3, pc}
   bd3fc:	00030278 	.word	0x00030278

000bd400 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bd400:	b508      	push	{r3, lr}
   bd402:	4b02      	ldr	r3, [pc, #8]	; (bd40c <hal_ble_gap_set_advertising_data+0xc>)
   bd404:	681b      	ldr	r3, [r3, #0]
   bd406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd408:	9301      	str	r3, [sp, #4]
   bd40a:	bd08      	pop	{r3, pc}
   bd40c:	00030278 	.word	0x00030278

000bd410 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bd410:	b508      	push	{r3, lr}
   bd412:	4b02      	ldr	r3, [pc, #8]	; (bd41c <hal_ble_gap_set_scan_response_data+0xc>)
   bd414:	681b      	ldr	r3, [r3, #0]
   bd416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd418:	9301      	str	r3, [sp, #4]
   bd41a:	bd08      	pop	{r3, pc}
   bd41c:	00030278 	.word	0x00030278

000bd420 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bd420:	b508      	push	{r3, lr}
   bd422:	4b02      	ldr	r3, [pc, #8]	; (bd42c <hal_ble_gap_start_advertising+0xc>)
   bd424:	681b      	ldr	r3, [r3, #0]
   bd426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bd428:	9301      	str	r3, [sp, #4]
   bd42a:	bd08      	pop	{r3, pc}
   bd42c:	00030278 	.word	0x00030278

000bd430 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bd430:	b508      	push	{r3, lr}
   bd432:	4b03      	ldr	r3, [pc, #12]	; (bd440 <hal_ble_gap_disconnect+0x10>)
   bd434:	681b      	ldr	r3, [r3, #0]
   bd436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd43a:	9301      	str	r3, [sp, #4]
   bd43c:	bd08      	pop	{r3, pc}
   bd43e:	0000      	.short	0x0000
   bd440:	00030278 	.word	0x00030278

000bd444 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bd444:	b508      	push	{r3, lr}
   bd446:	4b03      	ldr	r3, [pc, #12]	; (bd454 <hal_ble_gatt_server_add_service+0x10>)
   bd448:	681b      	ldr	r3, [r3, #0]
   bd44a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd44e:	9301      	str	r3, [sp, #4]
   bd450:	bd08      	pop	{r3, pc}
   bd452:	0000      	.short	0x0000
   bd454:	00030278 	.word	0x00030278

000bd458 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b03      	ldr	r3, [pc, #12]	; (bd468 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bd462:	9301      	str	r3, [sp, #4]
   bd464:	bd08      	pop	{r3, pc}
   bd466:	0000      	.short	0x0000
   bd468:	00030278 	.word	0x00030278

000bd46c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd46c:	b508      	push	{r3, lr}
   bd46e:	4b03      	ldr	r3, [pc, #12]	; (bd47c <hal_ble_gatt_client_write_with_response+0x10>)
   bd470:	681b      	ldr	r3, [r3, #0]
   bd472:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd476:	9301      	str	r3, [sp, #4]
   bd478:	bd08      	pop	{r3, pc}
   bd47a:	0000      	.short	0x0000
   bd47c:	00030278 	.word	0x00030278

000bd480 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd480:	b508      	push	{r3, lr}
   bd482:	4b03      	ldr	r3, [pc, #12]	; (bd490 <hal_ble_gatt_client_write_without_response+0x10>)
   bd484:	681b      	ldr	r3, [r3, #0]
   bd486:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd48a:	9301      	str	r3, [sp, #4]
   bd48c:	bd08      	pop	{r3, pc}
   bd48e:	0000      	.short	0x0000
   bd490:	00030278 	.word	0x00030278

000bd494 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd494:	b508      	push	{r3, lr}
   bd496:	4b03      	ldr	r3, [pc, #12]	; (bd4a4 <hal_ble_gatt_server_add_characteristic+0x10>)
   bd498:	681b      	ldr	r3, [r3, #0]
   bd49a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd49e:	9301      	str	r3, [sp, #4]
   bd4a0:	bd08      	pop	{r3, pc}
   bd4a2:	0000      	.short	0x0000
   bd4a4:	00030278 	.word	0x00030278

000bd4a8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b03      	ldr	r3, [pc, #12]	; (bd4b8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd4b2:	9301      	str	r3, [sp, #4]
   bd4b4:	bd08      	pop	{r3, pc}
   bd4b6:	0000      	.short	0x0000
   bd4b8:	00030278 	.word	0x00030278

000bd4bc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd4bc:	b508      	push	{r3, lr}
   bd4be:	4b03      	ldr	r3, [pc, #12]	; (bd4cc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd4c0:	681b      	ldr	r3, [r3, #0]
   bd4c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd4c6:	9301      	str	r3, [sp, #4]
   bd4c8:	bd08      	pop	{r3, pc}
   bd4ca:	0000      	.short	0x0000
   bd4cc:	00030278 	.word	0x00030278

000bd4d0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd4d0:	b508      	push	{r3, lr}
   bd4d2:	4b03      	ldr	r3, [pc, #12]	; (bd4e0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd4d4:	681b      	ldr	r3, [r3, #0]
   bd4d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd4da:	9301      	str	r3, [sp, #4]
   bd4dc:	bd08      	pop	{r3, pc}
   bd4de:	0000      	.short	0x0000
   bd4e0:	00030278 	.word	0x00030278

000bd4e4 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd4e4:	b508      	push	{r3, lr}
   bd4e6:	4b02      	ldr	r3, [pc, #8]	; (bd4f0 <os_thread_yield+0xc>)
   bd4e8:	681b      	ldr	r3, [r3, #0]
   bd4ea:	68db      	ldr	r3, [r3, #12]
   bd4ec:	9301      	str	r3, [sp, #4]
   bd4ee:	bd08      	pop	{r3, pc}
   bd4f0:	00030248 	.word	0x00030248

000bd4f4 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd4f4:	b508      	push	{r3, lr}
   bd4f6:	4b02      	ldr	r3, [pc, #8]	; (bd500 <os_thread_scheduling+0xc>)
   bd4f8:	681b      	ldr	r3, [r3, #0]
   bd4fa:	69db      	ldr	r3, [r3, #28]
   bd4fc:	9301      	str	r3, [sp, #4]
   bd4fe:	bd08      	pop	{r3, pc}
   bd500:	00030248 	.word	0x00030248

000bd504 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd504:	b508      	push	{r3, lr}
   bd506:	4b02      	ldr	r3, [pc, #8]	; (bd510 <os_timer_create+0xc>)
   bd508:	681b      	ldr	r3, [r3, #0]
   bd50a:	6a1b      	ldr	r3, [r3, #32]
   bd50c:	9301      	str	r3, [sp, #4]
   bd50e:	bd08      	pop	{r3, pc}
   bd510:	00030248 	.word	0x00030248

000bd514 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd514:	b508      	push	{r3, lr}
   bd516:	4b02      	ldr	r3, [pc, #8]	; (bd520 <os_timer_destroy+0xc>)
   bd518:	681b      	ldr	r3, [r3, #0]
   bd51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd51c:	9301      	str	r3, [sp, #4]
   bd51e:	bd08      	pop	{r3, pc}
   bd520:	00030248 	.word	0x00030248

000bd524 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd524:	b508      	push	{r3, lr}
   bd526:	4b02      	ldr	r3, [pc, #8]	; (bd530 <os_timer_get_id+0xc>)
   bd528:	681b      	ldr	r3, [r3, #0]
   bd52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd52c:	9301      	str	r3, [sp, #4]
   bd52e:	bd08      	pop	{r3, pc}
   bd530:	00030248 	.word	0x00030248

000bd534 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd534:	b508      	push	{r3, lr}
   bd536:	4b02      	ldr	r3, [pc, #8]	; (bd540 <os_timer_change+0xc>)
   bd538:	681b      	ldr	r3, [r3, #0]
   bd53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd53c:	9301      	str	r3, [sp, #4]
   bd53e:	bd08      	pop	{r3, pc}
   bd540:	00030248 	.word	0x00030248

000bd544 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd544:	b508      	push	{r3, lr}
   bd546:	4b02      	ldr	r3, [pc, #8]	; (bd550 <os_mutex_recursive_create+0xc>)
   bd548:	681b      	ldr	r3, [r3, #0]
   bd54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd54c:	9301      	str	r3, [sp, #4]
   bd54e:	bd08      	pop	{r3, pc}
   bd550:	00030248 	.word	0x00030248

000bd554 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd554:	b508      	push	{r3, lr}
   bd556:	4b02      	ldr	r3, [pc, #8]	; (bd560 <os_mutex_recursive_destroy+0xc>)
   bd558:	681b      	ldr	r3, [r3, #0]
   bd55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd55c:	9301      	str	r3, [sp, #4]
   bd55e:	bd08      	pop	{r3, pc}
   bd560:	00030248 	.word	0x00030248

000bd564 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd564:	b508      	push	{r3, lr}
   bd566:	4b02      	ldr	r3, [pc, #8]	; (bd570 <os_mutex_recursive_lock+0xc>)
   bd568:	681b      	ldr	r3, [r3, #0]
   bd56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd56c:	9301      	str	r3, [sp, #4]
   bd56e:	bd08      	pop	{r3, pc}
   bd570:	00030248 	.word	0x00030248

000bd574 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd574:	b508      	push	{r3, lr}
   bd576:	4b02      	ldr	r3, [pc, #8]	; (bd580 <os_mutex_recursive_unlock+0xc>)
   bd578:	681b      	ldr	r3, [r3, #0]
   bd57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd57c:	9301      	str	r3, [sp, #4]
   bd57e:	bd08      	pop	{r3, pc}
   bd580:	00030248 	.word	0x00030248

000bd584 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd584:	b508      	push	{r3, lr}
   bd586:	4b02      	ldr	r3, [pc, #8]	; (bd590 <os_timer_set_id+0xc>)
   bd588:	681b      	ldr	r3, [r3, #0]
   bd58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd58c:	9301      	str	r3, [sp, #4]
   bd58e:	bd08      	pop	{r3, pc}
   bd590:	00030248 	.word	0x00030248

000bd594 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd594:	b508      	push	{r3, lr}
   bd596:	4b02      	ldr	r3, [pc, #8]	; (bd5a0 <HAL_RNG_GetRandomNumber+0xc>)
   bd598:	681b      	ldr	r3, [r3, #0]
   bd59a:	685b      	ldr	r3, [r3, #4]
   bd59c:	9301      	str	r3, [sp, #4]
   bd59e:	bd08      	pop	{r3, pc}
   bd5a0:	00030218 	.word	0x00030218

000bd5a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd5a4:	b508      	push	{r3, lr}
   bd5a6:	4b02      	ldr	r3, [pc, #8]	; (bd5b0 <HAL_Delay_Microseconds+0xc>)
   bd5a8:	681b      	ldr	r3, [r3, #0]
   bd5aa:	68db      	ldr	r3, [r3, #12]
   bd5ac:	9301      	str	r3, [sp, #4]
   bd5ae:	bd08      	pop	{r3, pc}
   bd5b0:	00030218 	.word	0x00030218

000bd5b4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd5b4:	b508      	push	{r3, lr}
   bd5b6:	4b02      	ldr	r3, [pc, #8]	; (bd5c0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd5b8:	681b      	ldr	r3, [r3, #0]
   bd5ba:	691b      	ldr	r3, [r3, #16]
   bd5bc:	9301      	str	r3, [sp, #4]
   bd5be:	bd08      	pop	{r3, pc}
   bd5c0:	00030218 	.word	0x00030218

000bd5c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd5c4:	b508      	push	{r3, lr}
   bd5c6:	4b02      	ldr	r3, [pc, #8]	; (bd5d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd5c8:	681b      	ldr	r3, [r3, #0]
   bd5ca:	695b      	ldr	r3, [r3, #20]
   bd5cc:	9301      	str	r3, [sp, #4]
   bd5ce:	bd08      	pop	{r3, pc}
   bd5d0:	00030218 	.word	0x00030218

000bd5d4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd5d4:	b508      	push	{r3, lr}
   bd5d6:	4b02      	ldr	r3, [pc, #8]	; (bd5e0 <hal_rtc_time_is_valid+0xc>)
   bd5d8:	681b      	ldr	r3, [r3, #0]
   bd5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd5dc:	9301      	str	r3, [sp, #4]
   bd5de:	bd08      	pop	{r3, pc}
   bd5e0:	00030218 	.word	0x00030218

000bd5e4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd5e4:	b508      	push	{r3, lr}
   bd5e6:	4b02      	ldr	r3, [pc, #8]	; (bd5f0 <hal_rtc_get_time+0xc>)
   bd5e8:	681b      	ldr	r3, [r3, #0]
   bd5ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd5ec:	9301      	str	r3, [sp, #4]
   bd5ee:	bd08      	pop	{r3, pc}
   bd5f0:	00030218 	.word	0x00030218

000bd5f4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd5f4:	b508      	push	{r3, lr}
   bd5f6:	4b02      	ldr	r3, [pc, #8]	; (bd600 <HAL_Validate_Pin_Function+0xc>)
   bd5f8:	681b      	ldr	r3, [r3, #0]
   bd5fa:	685b      	ldr	r3, [r3, #4]
   bd5fc:	9301      	str	r3, [sp, #4]
   bd5fe:	bd08      	pop	{r3, pc}
   bd600:	0003022c 	.word	0x0003022c

000bd604 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd604:	b508      	push	{r3, lr}
   bd606:	4b02      	ldr	r3, [pc, #8]	; (bd610 <HAL_Pin_Mode+0xc>)
   bd608:	681b      	ldr	r3, [r3, #0]
   bd60a:	689b      	ldr	r3, [r3, #8]
   bd60c:	9301      	str	r3, [sp, #4]
   bd60e:	bd08      	pop	{r3, pc}
   bd610:	0003022c 	.word	0x0003022c

000bd614 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd614:	b508      	push	{r3, lr}
   bd616:	4b02      	ldr	r3, [pc, #8]	; (bd620 <HAL_Get_Pin_Mode+0xc>)
   bd618:	681b      	ldr	r3, [r3, #0]
   bd61a:	68db      	ldr	r3, [r3, #12]
   bd61c:	9301      	str	r3, [sp, #4]
   bd61e:	bd08      	pop	{r3, pc}
   bd620:	0003022c 	.word	0x0003022c

000bd624 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd624:	b508      	push	{r3, lr}
   bd626:	4b02      	ldr	r3, [pc, #8]	; (bd630 <HAL_GPIO_Write+0xc>)
   bd628:	681b      	ldr	r3, [r3, #0]
   bd62a:	691b      	ldr	r3, [r3, #16]
   bd62c:	9301      	str	r3, [sp, #4]
   bd62e:	bd08      	pop	{r3, pc}
   bd630:	0003022c 	.word	0x0003022c

000bd634 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bd634:	b508      	push	{r3, lr}
   bd636:	4b02      	ldr	r3, [pc, #8]	; (bd640 <HAL_GPIO_Read+0xc>)
   bd638:	681b      	ldr	r3, [r3, #0]
   bd63a:	695b      	ldr	r3, [r3, #20]
   bd63c:	9301      	str	r3, [sp, #4]
   bd63e:	bd08      	pop	{r3, pc}
   bd640:	0003022c 	.word	0x0003022c

000bd644 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bd644:	b508      	push	{r3, lr}
   bd646:	4b02      	ldr	r3, [pc, #8]	; (bd650 <HAL_Interrupts_Attach+0xc>)
   bd648:	681b      	ldr	r3, [r3, #0]
   bd64a:	699b      	ldr	r3, [r3, #24]
   bd64c:	9301      	str	r3, [sp, #4]
   bd64e:	bd08      	pop	{r3, pc}
   bd650:	0003022c 	.word	0x0003022c

000bd654 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bd654:	b508      	push	{r3, lr}
   bd656:	4b02      	ldr	r3, [pc, #8]	; (bd660 <HAL_Interrupts_Detach+0xc>)
   bd658:	681b      	ldr	r3, [r3, #0]
   bd65a:	69db      	ldr	r3, [r3, #28]
   bd65c:	9301      	str	r3, [sp, #4]
   bd65e:	bd08      	pop	{r3, pc}
   bd660:	0003022c 	.word	0x0003022c

000bd664 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd664:	b508      	push	{r3, lr}
   bd666:	4b02      	ldr	r3, [pc, #8]	; (bd670 <HAL_Interrupts_Enable_All+0xc>)
   bd668:	681b      	ldr	r3, [r3, #0]
   bd66a:	6a1b      	ldr	r3, [r3, #32]
   bd66c:	9301      	str	r3, [sp, #4]
   bd66e:	bd08      	pop	{r3, pc}
   bd670:	0003022c 	.word	0x0003022c

000bd674 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd674:	b508      	push	{r3, lr}
   bd676:	4b02      	ldr	r3, [pc, #8]	; (bd680 <HAL_Interrupts_Disable_All+0xc>)
   bd678:	681b      	ldr	r3, [r3, #0]
   bd67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd67c:	9301      	str	r3, [sp, #4]
   bd67e:	bd08      	pop	{r3, pc}
   bd680:	0003022c 	.word	0x0003022c

000bd684 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd684:	b508      	push	{r3, lr}
   bd686:	4b02      	ldr	r3, [pc, #8]	; (bd690 <hal_adc_read+0xc>)
   bd688:	681b      	ldr	r3, [r3, #0]
   bd68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd68c:	9301      	str	r3, [sp, #4]
   bd68e:	bd08      	pop	{r3, pc}
   bd690:	0003022c 	.word	0x0003022c

000bd694 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd694:	b508      	push	{r3, lr}
   bd696:	4b02      	ldr	r3, [pc, #8]	; (bd6a0 <hal_i2c_set_speed+0xc>)
   bd698:	681b      	ldr	r3, [r3, #0]
   bd69a:	681b      	ldr	r3, [r3, #0]
   bd69c:	9301      	str	r3, [sp, #4]
   bd69e:	bd08      	pop	{r3, pc}
   bd6a0:	00030228 	.word	0x00030228

000bd6a4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd6a4:	b508      	push	{r3, lr}
   bd6a6:	4b02      	ldr	r3, [pc, #8]	; (bd6b0 <hal_i2c_begin+0xc>)
   bd6a8:	681b      	ldr	r3, [r3, #0]
   bd6aa:	68db      	ldr	r3, [r3, #12]
   bd6ac:	9301      	str	r3, [sp, #4]
   bd6ae:	bd08      	pop	{r3, pc}
   bd6b0:	00030228 	.word	0x00030228

000bd6b4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd6b4:	b508      	push	{r3, lr}
   bd6b6:	4b02      	ldr	r3, [pc, #8]	; (bd6c0 <hal_i2c_begin_transmission+0xc>)
   bd6b8:	681b      	ldr	r3, [r3, #0]
   bd6ba:	699b      	ldr	r3, [r3, #24]
   bd6bc:	9301      	str	r3, [sp, #4]
   bd6be:	bd08      	pop	{r3, pc}
   bd6c0:	00030228 	.word	0x00030228

000bd6c4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd6c4:	b508      	push	{r3, lr}
   bd6c6:	4b02      	ldr	r3, [pc, #8]	; (bd6d0 <hal_i2c_end_transmission+0xc>)
   bd6c8:	681b      	ldr	r3, [r3, #0]
   bd6ca:	69db      	ldr	r3, [r3, #28]
   bd6cc:	9301      	str	r3, [sp, #4]
   bd6ce:	bd08      	pop	{r3, pc}
   bd6d0:	00030228 	.word	0x00030228

000bd6d4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd6d4:	b508      	push	{r3, lr}
   bd6d6:	4b02      	ldr	r3, [pc, #8]	; (bd6e0 <hal_i2c_write+0xc>)
   bd6d8:	681b      	ldr	r3, [r3, #0]
   bd6da:	6a1b      	ldr	r3, [r3, #32]
   bd6dc:	9301      	str	r3, [sp, #4]
   bd6de:	bd08      	pop	{r3, pc}
   bd6e0:	00030228 	.word	0x00030228

000bd6e4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd6e4:	b508      	push	{r3, lr}
   bd6e6:	4b02      	ldr	r3, [pc, #8]	; (bd6f0 <hal_i2c_available+0xc>)
   bd6e8:	681b      	ldr	r3, [r3, #0]
   bd6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd6ec:	9301      	str	r3, [sp, #4]
   bd6ee:	bd08      	pop	{r3, pc}
   bd6f0:	00030228 	.word	0x00030228

000bd6f4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd6f4:	b508      	push	{r3, lr}
   bd6f6:	4b02      	ldr	r3, [pc, #8]	; (bd700 <hal_i2c_read+0xc>)
   bd6f8:	681b      	ldr	r3, [r3, #0]
   bd6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd6fc:	9301      	str	r3, [sp, #4]
   bd6fe:	bd08      	pop	{r3, pc}
   bd700:	00030228 	.word	0x00030228

000bd704 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd704:	b508      	push	{r3, lr}
   bd706:	4b02      	ldr	r3, [pc, #8]	; (bd710 <hal_i2c_peek+0xc>)
   bd708:	681b      	ldr	r3, [r3, #0]
   bd70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd70c:	9301      	str	r3, [sp, #4]
   bd70e:	bd08      	pop	{r3, pc}
   bd710:	00030228 	.word	0x00030228

000bd714 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd714:	b508      	push	{r3, lr}
   bd716:	4b02      	ldr	r3, [pc, #8]	; (bd720 <hal_i2c_flush+0xc>)
   bd718:	681b      	ldr	r3, [r3, #0]
   bd71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd71c:	9301      	str	r3, [sp, #4]
   bd71e:	bd08      	pop	{r3, pc}
   bd720:	00030228 	.word	0x00030228

000bd724 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd724:	b508      	push	{r3, lr}
   bd726:	4b02      	ldr	r3, [pc, #8]	; (bd730 <hal_i2c_is_enabled+0xc>)
   bd728:	681b      	ldr	r3, [r3, #0]
   bd72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd72c:	9301      	str	r3, [sp, #4]
   bd72e:	bd08      	pop	{r3, pc}
   bd730:	00030228 	.word	0x00030228

000bd734 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd734:	b508      	push	{r3, lr}
   bd736:	4b02      	ldr	r3, [pc, #8]	; (bd740 <hal_i2c_init+0xc>)
   bd738:	681b      	ldr	r3, [r3, #0]
   bd73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd73c:	9301      	str	r3, [sp, #4]
   bd73e:	bd08      	pop	{r3, pc}
   bd740:	00030228 	.word	0x00030228

000bd744 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd744:	b508      	push	{r3, lr}
   bd746:	4b02      	ldr	r3, [pc, #8]	; (bd750 <hal_i2c_request_ex+0xc>)
   bd748:	681b      	ldr	r3, [r3, #0]
   bd74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd74c:	9301      	str	r3, [sp, #4]
   bd74e:	bd08      	pop	{r3, pc}
   bd750:	00030228 	.word	0x00030228

000bd754 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd754:	b508      	push	{r3, lr}
   bd756:	4b02      	ldr	r3, [pc, #8]	; (bd760 <inet_inet_ntop+0xc>)
   bd758:	681b      	ldr	r3, [r3, #0]
   bd75a:	695b      	ldr	r3, [r3, #20]
   bd75c:	9301      	str	r3, [sp, #4]
   bd75e:	bd08      	pop	{r3, pc}
   bd760:	00030264 	.word	0x00030264

000bd764 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd764:	b508      	push	{r3, lr}
   bd766:	4b02      	ldr	r3, [pc, #8]	; (bd770 <netdb_freeaddrinfo+0xc>)
   bd768:	681b      	ldr	r3, [r3, #0]
   bd76a:	689b      	ldr	r3, [r3, #8]
   bd76c:	9301      	str	r3, [sp, #4]
   bd76e:	bd08      	pop	{r3, pc}
   bd770:	00030268 	.word	0x00030268

000bd774 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd774:	b508      	push	{r3, lr}
   bd776:	4b02      	ldr	r3, [pc, #8]	; (bd780 <netdb_getaddrinfo+0xc>)
   bd778:	681b      	ldr	r3, [r3, #0]
   bd77a:	68db      	ldr	r3, [r3, #12]
   bd77c:	9301      	str	r3, [sp, #4]
   bd77e:	bd08      	pop	{r3, pc}
   bd780:	00030268 	.word	0x00030268

000bd784 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd784:	b508      	push	{r3, lr}
   bd786:	4b02      	ldr	r3, [pc, #8]	; (bd790 <HAL_Servo_Attach+0xc>)
   bd788:	681b      	ldr	r3, [r3, #0]
   bd78a:	691b      	ldr	r3, [r3, #16]
   bd78c:	9301      	str	r3, [sp, #4]
   bd78e:	bd08      	pop	{r3, pc}
   bd790:	00030224 	.word	0x00030224

000bd794 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd794:	b508      	push	{r3, lr}
   bd796:	4b02      	ldr	r3, [pc, #8]	; (bd7a0 <HAL_Servo_Detach+0xc>)
   bd798:	681b      	ldr	r3, [r3, #0]
   bd79a:	695b      	ldr	r3, [r3, #20]
   bd79c:	9301      	str	r3, [sp, #4]
   bd79e:	bd08      	pop	{r3, pc}
   bd7a0:	00030224 	.word	0x00030224

000bd7a4 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd7a4:	b508      	push	{r3, lr}
   bd7a6:	4b02      	ldr	r3, [pc, #8]	; (bd7b0 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd7a8:	681b      	ldr	r3, [r3, #0]
   bd7aa:	699b      	ldr	r3, [r3, #24]
   bd7ac:	9301      	str	r3, [sp, #4]
   bd7ae:	bd08      	pop	{r3, pc}
   bd7b0:	00030224 	.word	0x00030224

000bd7b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd7b4:	b508      	push	{r3, lr}
   bd7b6:	4b02      	ldr	r3, [pc, #8]	; (bd7c0 <hal_spi_begin+0xc>)
   bd7b8:	681b      	ldr	r3, [r3, #0]
   bd7ba:	681b      	ldr	r3, [r3, #0]
   bd7bc:	9301      	str	r3, [sp, #4]
   bd7be:	bd08      	pop	{r3, pc}
   bd7c0:	00030230 	.word	0x00030230

000bd7c4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd7c4:	b508      	push	{r3, lr}
   bd7c6:	4b02      	ldr	r3, [pc, #8]	; (bd7d0 <hal_spi_transfer+0xc>)
   bd7c8:	681b      	ldr	r3, [r3, #0]
   bd7ca:	695b      	ldr	r3, [r3, #20]
   bd7cc:	9301      	str	r3, [sp, #4]
   bd7ce:	bd08      	pop	{r3, pc}
   bd7d0:	00030230 	.word	0x00030230

000bd7d4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd7d4:	b508      	push	{r3, lr}
   bd7d6:	4b02      	ldr	r3, [pc, #8]	; (bd7e0 <hal_spi_init+0xc>)
   bd7d8:	681b      	ldr	r3, [r3, #0]
   bd7da:	69db      	ldr	r3, [r3, #28]
   bd7dc:	9301      	str	r3, [sp, #4]
   bd7de:	bd08      	pop	{r3, pc}
   bd7e0:	00030230 	.word	0x00030230

000bd7e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd7e4:	b508      	push	{r3, lr}
   bd7e6:	4b02      	ldr	r3, [pc, #8]	; (bd7f0 <hal_spi_is_enabled+0xc>)
   bd7e8:	681b      	ldr	r3, [r3, #0]
   bd7ea:	6a1b      	ldr	r3, [r3, #32]
   bd7ec:	9301      	str	r3, [sp, #4]
   bd7ee:	bd08      	pop	{r3, pc}
   bd7f0:	00030230 	.word	0x00030230

000bd7f4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd7f4:	b508      	push	{r3, lr}
   bd7f6:	4b02      	ldr	r3, [pc, #8]	; (bd800 <hal_spi_info+0xc>)
   bd7f8:	681b      	ldr	r3, [r3, #0]
   bd7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd7fc:	9301      	str	r3, [sp, #4]
   bd7fe:	bd08      	pop	{r3, pc}
   bd800:	00030230 	.word	0x00030230

000bd804 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd804:	b508      	push	{r3, lr}
   bd806:	4b02      	ldr	r3, [pc, #8]	; (bd810 <hal_spi_transfer_dma+0xc>)
   bd808:	681b      	ldr	r3, [r3, #0]
   bd80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd80c:	9301      	str	r3, [sp, #4]
   bd80e:	bd08      	pop	{r3, pc}
   bd810:	00030230 	.word	0x00030230

000bd814 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd814:	b508      	push	{r3, lr}
   bd816:	4b02      	ldr	r3, [pc, #8]	; (bd820 <hal_spi_transfer_dma_status+0xc>)
   bd818:	681b      	ldr	r3, [r3, #0]
   bd81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd81c:	9301      	str	r3, [sp, #4]
   bd81e:	bd08      	pop	{r3, pc}
   bd820:	00030230 	.word	0x00030230

000bd824 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd824:	b508      	push	{r3, lr}
   bd826:	4b02      	ldr	r3, [pc, #8]	; (bd830 <hal_spi_set_settings+0xc>)
   bd828:	681b      	ldr	r3, [r3, #0]
   bd82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd82c:	9301      	str	r3, [sp, #4]
   bd82e:	bd08      	pop	{r3, pc}
   bd830:	00030230 	.word	0x00030230

000bd834 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd834:	b508      	push	{r3, lr}
   bd836:	4b02      	ldr	r3, [pc, #8]	; (bd840 <hal_spi_acquire+0xc>)
   bd838:	681b      	ldr	r3, [r3, #0]
   bd83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd83c:	9301      	str	r3, [sp, #4]
   bd83e:	bd08      	pop	{r3, pc}
   bd840:	00030230 	.word	0x00030230

000bd844 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd844:	b508      	push	{r3, lr}
   bd846:	4b02      	ldr	r3, [pc, #8]	; (bd850 <hal_spi_release+0xc>)
   bd848:	681b      	ldr	r3, [r3, #0]
   bd84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd84c:	9301      	str	r3, [sp, #4]
   bd84e:	bd08      	pop	{r3, pc}
   bd850:	00030230 	.word	0x00030230

000bd854 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd854:	b508      	push	{r3, lr}
   bd856:	4b02      	ldr	r3, [pc, #8]	; (bd860 <hal_usart_end+0xc>)
   bd858:	681b      	ldr	r3, [r3, #0]
   bd85a:	689b      	ldr	r3, [r3, #8]
   bd85c:	9301      	str	r3, [sp, #4]
   bd85e:	bd08      	pop	{r3, pc}
   bd860:	0003023c 	.word	0x0003023c

000bd864 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd864:	b508      	push	{r3, lr}
   bd866:	4b02      	ldr	r3, [pc, #8]	; (bd870 <hal_usart_write+0xc>)
   bd868:	681b      	ldr	r3, [r3, #0]
   bd86a:	68db      	ldr	r3, [r3, #12]
   bd86c:	9301      	str	r3, [sp, #4]
   bd86e:	bd08      	pop	{r3, pc}
   bd870:	0003023c 	.word	0x0003023c

000bd874 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd874:	b508      	push	{r3, lr}
   bd876:	4b02      	ldr	r3, [pc, #8]	; (bd880 <hal_usart_available+0xc>)
   bd878:	681b      	ldr	r3, [r3, #0]
   bd87a:	691b      	ldr	r3, [r3, #16]
   bd87c:	9301      	str	r3, [sp, #4]
   bd87e:	bd08      	pop	{r3, pc}
   bd880:	0003023c 	.word	0x0003023c

000bd884 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd884:	b508      	push	{r3, lr}
   bd886:	4b02      	ldr	r3, [pc, #8]	; (bd890 <hal_usart_read+0xc>)
   bd888:	681b      	ldr	r3, [r3, #0]
   bd88a:	695b      	ldr	r3, [r3, #20]
   bd88c:	9301      	str	r3, [sp, #4]
   bd88e:	bd08      	pop	{r3, pc}
   bd890:	0003023c 	.word	0x0003023c

000bd894 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd894:	b508      	push	{r3, lr}
   bd896:	4b02      	ldr	r3, [pc, #8]	; (bd8a0 <hal_usart_peek+0xc>)
   bd898:	681b      	ldr	r3, [r3, #0]
   bd89a:	699b      	ldr	r3, [r3, #24]
   bd89c:	9301      	str	r3, [sp, #4]
   bd89e:	bd08      	pop	{r3, pc}
   bd8a0:	0003023c 	.word	0x0003023c

000bd8a4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd8a4:	b508      	push	{r3, lr}
   bd8a6:	4b02      	ldr	r3, [pc, #8]	; (bd8b0 <hal_usart_flush+0xc>)
   bd8a8:	681b      	ldr	r3, [r3, #0]
   bd8aa:	69db      	ldr	r3, [r3, #28]
   bd8ac:	9301      	str	r3, [sp, #4]
   bd8ae:	bd08      	pop	{r3, pc}
   bd8b0:	0003023c 	.word	0x0003023c

000bd8b4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd8b4:	b508      	push	{r3, lr}
   bd8b6:	4b02      	ldr	r3, [pc, #8]	; (bd8c0 <hal_usart_is_enabled+0xc>)
   bd8b8:	681b      	ldr	r3, [r3, #0]
   bd8ba:	6a1b      	ldr	r3, [r3, #32]
   bd8bc:	9301      	str	r3, [sp, #4]
   bd8be:	bd08      	pop	{r3, pc}
   bd8c0:	0003023c 	.word	0x0003023c

000bd8c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd8c4:	b508      	push	{r3, lr}
   bd8c6:	4b02      	ldr	r3, [pc, #8]	; (bd8d0 <hal_usart_available_data_for_write+0xc>)
   bd8c8:	681b      	ldr	r3, [r3, #0]
   bd8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd8cc:	9301      	str	r3, [sp, #4]
   bd8ce:	bd08      	pop	{r3, pc}
   bd8d0:	0003023c 	.word	0x0003023c

000bd8d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd8d4:	b508      	push	{r3, lr}
   bd8d6:	4b02      	ldr	r3, [pc, #8]	; (bd8e0 <hal_usart_begin_config+0xc>)
   bd8d8:	681b      	ldr	r3, [r3, #0]
   bd8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd8dc:	9301      	str	r3, [sp, #4]
   bd8de:	bd08      	pop	{r3, pc}
   bd8e0:	0003023c 	.word	0x0003023c

000bd8e4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd8e4:	b508      	push	{r3, lr}
   bd8e6:	4b02      	ldr	r3, [pc, #8]	; (bd8f0 <hal_usart_init_ex+0xc>)
   bd8e8:	681b      	ldr	r3, [r3, #0]
   bd8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd8ec:	9301      	str	r3, [sp, #4]
   bd8ee:	bd08      	pop	{r3, pc}
   bd8f0:	0003023c 	.word	0x0003023c

000bd8f4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd8f4:	b508      	push	{r3, lr}
   bd8f6:	4b02      	ldr	r3, [pc, #8]	; (bd900 <HAL_USB_USART_Init+0xc>)
   bd8f8:	681b      	ldr	r3, [r3, #0]
   bd8fa:	681b      	ldr	r3, [r3, #0]
   bd8fc:	9301      	str	r3, [sp, #4]
   bd8fe:	bd08      	pop	{r3, pc}
   bd900:	0003024c 	.word	0x0003024c

000bd904 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd904:	b508      	push	{r3, lr}
   bd906:	4b02      	ldr	r3, [pc, #8]	; (bd910 <HAL_USB_USART_Begin+0xc>)
   bd908:	681b      	ldr	r3, [r3, #0]
   bd90a:	685b      	ldr	r3, [r3, #4]
   bd90c:	9301      	str	r3, [sp, #4]
   bd90e:	bd08      	pop	{r3, pc}
   bd910:	0003024c 	.word	0x0003024c

000bd914 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd914:	b508      	push	{r3, lr}
   bd916:	4b02      	ldr	r3, [pc, #8]	; (bd920 <HAL_USB_USART_End+0xc>)
   bd918:	681b      	ldr	r3, [r3, #0]
   bd91a:	689b      	ldr	r3, [r3, #8]
   bd91c:	9301      	str	r3, [sp, #4]
   bd91e:	bd08      	pop	{r3, pc}
   bd920:	0003024c 	.word	0x0003024c

000bd924 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd924:	b508      	push	{r3, lr}
   bd926:	4b02      	ldr	r3, [pc, #8]	; (bd930 <HAL_USB_USART_Available_Data+0xc>)
   bd928:	681b      	ldr	r3, [r3, #0]
   bd92a:	691b      	ldr	r3, [r3, #16]
   bd92c:	9301      	str	r3, [sp, #4]
   bd92e:	bd08      	pop	{r3, pc}
   bd930:	0003024c 	.word	0x0003024c

000bd934 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd934:	b508      	push	{r3, lr}
   bd936:	4b02      	ldr	r3, [pc, #8]	; (bd940 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd938:	681b      	ldr	r3, [r3, #0]
   bd93a:	695b      	ldr	r3, [r3, #20]
   bd93c:	9301      	str	r3, [sp, #4]
   bd93e:	bd08      	pop	{r3, pc}
   bd940:	0003024c 	.word	0x0003024c

000bd944 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd944:	b508      	push	{r3, lr}
   bd946:	4b02      	ldr	r3, [pc, #8]	; (bd950 <HAL_USB_USART_Receive_Data+0xc>)
   bd948:	681b      	ldr	r3, [r3, #0]
   bd94a:	699b      	ldr	r3, [r3, #24]
   bd94c:	9301      	str	r3, [sp, #4]
   bd94e:	bd08      	pop	{r3, pc}
   bd950:	0003024c 	.word	0x0003024c

000bd954 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd954:	b508      	push	{r3, lr}
   bd956:	4b02      	ldr	r3, [pc, #8]	; (bd960 <HAL_USB_USART_Send_Data+0xc>)
   bd958:	681b      	ldr	r3, [r3, #0]
   bd95a:	69db      	ldr	r3, [r3, #28]
   bd95c:	9301      	str	r3, [sp, #4]
   bd95e:	bd08      	pop	{r3, pc}
   bd960:	0003024c 	.word	0x0003024c

000bd964 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd964:	b508      	push	{r3, lr}
   bd966:	4b02      	ldr	r3, [pc, #8]	; (bd970 <HAL_USB_USART_Flush_Data+0xc>)
   bd968:	681b      	ldr	r3, [r3, #0]
   bd96a:	6a1b      	ldr	r3, [r3, #32]
   bd96c:	9301      	str	r3, [sp, #4]
   bd96e:	bd08      	pop	{r3, pc}
   bd970:	0003024c 	.word	0x0003024c

000bd974 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd974:	b508      	push	{r3, lr}
   bd976:	4b02      	ldr	r3, [pc, #8]	; (bd980 <panic_+0xc>)
   bd978:	681b      	ldr	r3, [r3, #0]
   bd97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd97c:	9301      	str	r3, [sp, #4]
   bd97e:	bd08      	pop	{r3, pc}
   bd980:	00030260 	.word	0x00030260

000bd984 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd984:	b508      	push	{r3, lr}
   bd986:	4b02      	ldr	r3, [pc, #8]	; (bd990 <log_message+0xc>)
   bd988:	681b      	ldr	r3, [r3, #0]
   bd98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd98c:	9301      	str	r3, [sp, #4]
   bd98e:	bd08      	pop	{r3, pc}
   bd990:	00030260 	.word	0x00030260

000bd994 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd994:	b508      	push	{r3, lr}
   bd996:	4b02      	ldr	r3, [pc, #8]	; (bd9a0 <log_level_name+0xc>)
   bd998:	681b      	ldr	r3, [r3, #0]
   bd99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd99c:	9301      	str	r3, [sp, #4]
   bd99e:	bd08      	pop	{r3, pc}
   bd9a0:	00030260 	.word	0x00030260

000bd9a4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd9a4:	b508      	push	{r3, lr}
   bd9a6:	4b02      	ldr	r3, [pc, #8]	; (bd9b0 <log_set_callbacks+0xc>)
   bd9a8:	681b      	ldr	r3, [r3, #0]
   bd9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd9ac:	9301      	str	r3, [sp, #4]
   bd9ae:	bd08      	pop	{r3, pc}
   bd9b0:	00030260 	.word	0x00030260

000bd9b4 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd9b4:	b508      	push	{r3, lr}
   bd9b6:	4b03      	ldr	r3, [pc, #12]	; (bd9c4 <led_set_status_active+0x10>)
   bd9b8:	681b      	ldr	r3, [r3, #0]
   bd9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd9be:	9301      	str	r3, [sp, #4]
   bd9c0:	bd08      	pop	{r3, pc}
   bd9c2:	0000      	.short	0x0000
   bd9c4:	00030260 	.word	0x00030260

000bd9c8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd9c8:	b508      	push	{r3, lr}
   bd9ca:	4b02      	ldr	r3, [pc, #8]	; (bd9d4 <system_mode+0xc>)
   bd9cc:	681b      	ldr	r3, [r3, #0]
   bd9ce:	681b      	ldr	r3, [r3, #0]
   bd9d0:	9301      	str	r3, [sp, #4]
   bd9d2:	bd08      	pop	{r3, pc}
   bd9d4:	00030220 	.word	0x00030220

000bd9d8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd9d8:	b508      	push	{r3, lr}
   bd9da:	4b02      	ldr	r3, [pc, #8]	; (bd9e4 <set_system_mode+0xc>)
   bd9dc:	681b      	ldr	r3, [r3, #0]
   bd9de:	685b      	ldr	r3, [r3, #4]
   bd9e0:	9301      	str	r3, [sp, #4]
   bd9e2:	bd08      	pop	{r3, pc}
   bd9e4:	00030220 	.word	0x00030220

000bd9e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd9e8:	b508      	push	{r3, lr}
   bd9ea:	4b02      	ldr	r3, [pc, #8]	; (bd9f4 <system_delay_ms+0xc>)
   bd9ec:	681b      	ldr	r3, [r3, #0]
   bd9ee:	695b      	ldr	r3, [r3, #20]
   bd9f0:	9301      	str	r3, [sp, #4]
   bd9f2:	bd08      	pop	{r3, pc}
   bd9f4:	00030220 	.word	0x00030220

000bd9f8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd9f8:	b508      	push	{r3, lr}
   bd9fa:	4b02      	ldr	r3, [pc, #8]	; (bda04 <application_thread_current+0xc>)
   bd9fc:	681b      	ldr	r3, [r3, #0]
   bd9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bda00:	9301      	str	r3, [sp, #4]
   bda02:	bd08      	pop	{r3, pc}
   bda04:	00030220 	.word	0x00030220

000bda08 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bda08:	b508      	push	{r3, lr}
   bda0a:	4b02      	ldr	r3, [pc, #8]	; (bda14 <application_thread_invoke+0xc>)
   bda0c:	681b      	ldr	r3, [r3, #0]
   bda0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bda10:	9301      	str	r3, [sp, #4]
   bda12:	bd08      	pop	{r3, pc}
   bda14:	00030220 	.word	0x00030220

000bda18 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bda18:	b508      	push	{r3, lr}
   bda1a:	4b02      	ldr	r3, [pc, #8]	; (bda24 <system_thread_get_state+0xc>)
   bda1c:	681b      	ldr	r3, [r3, #0]
   bda1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bda20:	9301      	str	r3, [sp, #4]
   bda22:	bd08      	pop	{r3, pc}
   bda24:	00030220 	.word	0x00030220

000bda28 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bda28:	b508      	push	{r3, lr}
   bda2a:	4b02      	ldr	r3, [pc, #8]	; (bda34 <led_pattern_period+0xc>)
   bda2c:	681b      	ldr	r3, [r3, #0]
   bda2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bda30:	9301      	str	r3, [sp, #4]
   bda32:	bd08      	pop	{r3, pc}
   bda34:	00030220 	.word	0x00030220

000bda38 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bda38:	b508      	push	{r3, lr}
   bda3a:	4b03      	ldr	r3, [pc, #12]	; (bda48 <system_ctrl_set_app_request_handler+0x10>)
   bda3c:	681b      	ldr	r3, [r3, #0]
   bda3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bda42:	9301      	str	r3, [sp, #4]
   bda44:	bd08      	pop	{r3, pc}
   bda46:	0000      	.short	0x0000
   bda48:	00030220 	.word	0x00030220

000bda4c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bda4c:	b508      	push	{r3, lr}
   bda4e:	4b03      	ldr	r3, [pc, #12]	; (bda5c <system_ctrl_set_result+0x10>)
   bda50:	681b      	ldr	r3, [r3, #0]
   bda52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bda56:	9301      	str	r3, [sp, #4]
   bda58:	bd08      	pop	{r3, pc}
   bda5a:	0000      	.short	0x0000
   bda5c:	00030220 	.word	0x00030220

000bda60 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   bda60:	b508      	push	{r3, lr}
   bda62:	4b02      	ldr	r3, [pc, #8]	; (bda6c <spark_variable+0xc>)
   bda64:	681b      	ldr	r3, [r3, #0]
   bda66:	681b      	ldr	r3, [r3, #0]
   bda68:	9301      	str	r3, [sp, #4]
   bda6a:	bd08      	pop	{r3, pc}
   bda6c:	00030244 	.word	0x00030244

000bda70 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bda70:	b508      	push	{r3, lr}
   bda72:	4b02      	ldr	r3, [pc, #8]	; (bda7c <spark_function+0xc>)
   bda74:	681b      	ldr	r3, [r3, #0]
   bda76:	685b      	ldr	r3, [r3, #4]
   bda78:	9301      	str	r3, [sp, #4]
   bda7a:	bd08      	pop	{r3, pc}
   bda7c:	00030244 	.word	0x00030244

000bda80 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bda80:	b508      	push	{r3, lr}
   bda82:	4b02      	ldr	r3, [pc, #8]	; (bda8c <spark_process+0xc>)
   bda84:	681b      	ldr	r3, [r3, #0]
   bda86:	689b      	ldr	r3, [r3, #8]
   bda88:	9301      	str	r3, [sp, #4]
   bda8a:	bd08      	pop	{r3, pc}
   bda8c:	00030244 	.word	0x00030244

000bda90 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bda90:	b508      	push	{r3, lr}
   bda92:	4b02      	ldr	r3, [pc, #8]	; (bda9c <spark_cloud_flag_connected+0xc>)
   bda94:	681b      	ldr	r3, [r3, #0]
   bda96:	695b      	ldr	r3, [r3, #20]
   bda98:	9301      	str	r3, [sp, #4]
   bda9a:	bd08      	pop	{r3, pc}
   bda9c:	00030244 	.word	0x00030244

000bdaa0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bdaa0:	b508      	push	{r3, lr}
   bdaa2:	4b02      	ldr	r3, [pc, #8]	; (bdaac <spark_send_event+0xc>)
   bdaa4:	681b      	ldr	r3, [r3, #0]
   bdaa6:	6a1b      	ldr	r3, [r3, #32]
   bdaa8:	9301      	str	r3, [sp, #4]
   bdaaa:	bd08      	pop	{r3, pc}
   bdaac:	00030244 	.word	0x00030244

000bdab0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bdab0:	b508      	push	{r3, lr}
   bdab2:	4b02      	ldr	r3, [pc, #8]	; (bdabc <spark_subscribe+0xc>)
   bdab4:	681b      	ldr	r3, [r3, #0]
   bdab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdab8:	9301      	str	r3, [sp, #4]
   bdaba:	bd08      	pop	{r3, pc}
   bdabc:	00030244 	.word	0x00030244

000bdac0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bdac0:	b508      	push	{r3, lr}
   bdac2:	4b02      	ldr	r3, [pc, #8]	; (bdacc <spark_sync_time_pending+0xc>)
   bdac4:	681b      	ldr	r3, [r3, #0]
   bdac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdac8:	9301      	str	r3, [sp, #4]
   bdaca:	bd08      	pop	{r3, pc}
   bdacc:	00030244 	.word	0x00030244

000bdad0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bdad0:	b508      	push	{r3, lr}
   bdad2:	4b02      	ldr	r3, [pc, #8]	; (bdadc <spark_set_random_seed_from_cloud_handler+0xc>)
   bdad4:	681b      	ldr	r3, [r3, #0]
   bdad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdad8:	9301      	str	r3, [sp, #4]
   bdada:	bd08      	pop	{r3, pc}
   bdadc:	00030244 	.word	0x00030244

000bdae0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bdae0:	b508      	push	{r3, lr}
   bdae2:	4b02      	ldr	r3, [pc, #8]	; (bdaec <network_connect+0xc>)
   bdae4:	681b      	ldr	r3, [r3, #0]
   bdae6:	685b      	ldr	r3, [r3, #4]
   bdae8:	9301      	str	r3, [sp, #4]
   bdaea:	bd08      	pop	{r3, pc}
   bdaec:	00030240 	.word	0x00030240

000bdaf0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bdaf0:	b508      	push	{r3, lr}
   bdaf2:	4b02      	ldr	r3, [pc, #8]	; (bdafc <network_connecting+0xc>)
   bdaf4:	681b      	ldr	r3, [r3, #0]
   bdaf6:	689b      	ldr	r3, [r3, #8]
   bdaf8:	9301      	str	r3, [sp, #4]
   bdafa:	bd08      	pop	{r3, pc}
   bdafc:	00030240 	.word	0x00030240

000bdb00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bdb00:	b508      	push	{r3, lr}
   bdb02:	4b02      	ldr	r3, [pc, #8]	; (bdb0c <network_disconnect+0xc>)
   bdb04:	681b      	ldr	r3, [r3, #0]
   bdb06:	68db      	ldr	r3, [r3, #12]
   bdb08:	9301      	str	r3, [sp, #4]
   bdb0a:	bd08      	pop	{r3, pc}
   bdb0c:	00030240 	.word	0x00030240

000bdb10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bdb10:	b508      	push	{r3, lr}
   bdb12:	4b02      	ldr	r3, [pc, #8]	; (bdb1c <network_ready+0xc>)
   bdb14:	681b      	ldr	r3, [r3, #0]
   bdb16:	691b      	ldr	r3, [r3, #16]
   bdb18:	9301      	str	r3, [sp, #4]
   bdb1a:	bd08      	pop	{r3, pc}
   bdb1c:	00030240 	.word	0x00030240

000bdb20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bdb20:	b508      	push	{r3, lr}
   bdb22:	4b02      	ldr	r3, [pc, #8]	; (bdb2c <network_on+0xc>)
   bdb24:	681b      	ldr	r3, [r3, #0]
   bdb26:	695b      	ldr	r3, [r3, #20]
   bdb28:	9301      	str	r3, [sp, #4]
   bdb2a:	bd08      	pop	{r3, pc}
   bdb2c:	00030240 	.word	0x00030240

000bdb30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bdb30:	b508      	push	{r3, lr}
   bdb32:	4b02      	ldr	r3, [pc, #8]	; (bdb3c <network_off+0xc>)
   bdb34:	681b      	ldr	r3, [r3, #0]
   bdb36:	699b      	ldr	r3, [r3, #24]
   bdb38:	9301      	str	r3, [sp, #4]
   bdb3a:	bd08      	pop	{r3, pc}
   bdb3c:	00030240 	.word	0x00030240

000bdb40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bdb40:	b508      	push	{r3, lr}
   bdb42:	4b02      	ldr	r3, [pc, #8]	; (bdb4c <network_listen+0xc>)
   bdb44:	681b      	ldr	r3, [r3, #0]
   bdb46:	69db      	ldr	r3, [r3, #28]
   bdb48:	9301      	str	r3, [sp, #4]
   bdb4a:	bd08      	pop	{r3, pc}
   bdb4c:	00030240 	.word	0x00030240

000bdb50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bdb50:	b508      	push	{r3, lr}
   bdb52:	4b02      	ldr	r3, [pc, #8]	; (bdb5c <network_listening+0xc>)
   bdb54:	681b      	ldr	r3, [r3, #0]
   bdb56:	6a1b      	ldr	r3, [r3, #32]
   bdb58:	9301      	str	r3, [sp, #4]
   bdb5a:	bd08      	pop	{r3, pc}
   bdb5c:	00030240 	.word	0x00030240

000bdb60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bdb60:	b508      	push	{r3, lr}
   bdb62:	4b02      	ldr	r3, [pc, #8]	; (bdb6c <network_set_listen_timeout+0xc>)
   bdb64:	681b      	ldr	r3, [r3, #0]
   bdb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdb68:	9301      	str	r3, [sp, #4]
   bdb6a:	bd08      	pop	{r3, pc}
   bdb6c:	00030240 	.word	0x00030240

000bdb70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bdb70:	b508      	push	{r3, lr}
   bdb72:	4b02      	ldr	r3, [pc, #8]	; (bdb7c <network_get_listen_timeout+0xc>)
   bdb74:	681b      	ldr	r3, [r3, #0]
   bdb76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdb78:	9301      	str	r3, [sp, #4]
   bdb7a:	bd08      	pop	{r3, pc}
   bdb7c:	00030240 	.word	0x00030240

000bdb80 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bdb80:	b508      	push	{r3, lr}
   bdb82:	4b02      	ldr	r3, [pc, #8]	; (bdb8c <network_is_on+0xc>)
   bdb84:	681b      	ldr	r3, [r3, #0]
   bdb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdb88:	9301      	str	r3, [sp, #4]
   bdb8a:	bd08      	pop	{r3, pc}
   bdb8c:	00030240 	.word	0x00030240

000bdb90 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bdb90:	b508      	push	{r3, lr}
   bdb92:	4b02      	ldr	r3, [pc, #8]	; (bdb9c <network_is_off+0xc>)
   bdb94:	681b      	ldr	r3, [r3, #0]
   bdb96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdb98:	9301      	str	r3, [sp, #4]
   bdb9a:	bd08      	pop	{r3, pc}
   bdb9c:	00030240 	.word	0x00030240

000bdba0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bdba0:	b508      	push	{r3, lr}
   bdba2:	4b02      	ldr	r3, [pc, #8]	; (bdbac <malloc+0xc>)
   bdba4:	681b      	ldr	r3, [r3, #0]
   bdba6:	681b      	ldr	r3, [r3, #0]
   bdba8:	9301      	str	r3, [sp, #4]
   bdbaa:	bd08      	pop	{r3, pc}
   bdbac:	0003021c 	.word	0x0003021c

000bdbb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bdbb0:	b508      	push	{r3, lr}
   bdbb2:	4b02      	ldr	r3, [pc, #8]	; (bdbbc <free+0xc>)
   bdbb4:	681b      	ldr	r3, [r3, #0]
   bdbb6:	685b      	ldr	r3, [r3, #4]
   bdbb8:	9301      	str	r3, [sp, #4]
   bdbba:	bd08      	pop	{r3, pc}
   bdbbc:	0003021c 	.word	0x0003021c

000bdbc0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bdbc0:	b508      	push	{r3, lr}
   bdbc2:	4b02      	ldr	r3, [pc, #8]	; (bdbcc <realloc+0xc>)
   bdbc4:	681b      	ldr	r3, [r3, #0]
   bdbc6:	689b      	ldr	r3, [r3, #8]
   bdbc8:	9301      	str	r3, [sp, #4]
   bdbca:	bd08      	pop	{r3, pc}
   bdbcc:	0003021c 	.word	0x0003021c

000bdbd0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bdbd0:	b508      	push	{r3, lr}
   bdbd2:	4b02      	ldr	r3, [pc, #8]	; (bdbdc <sprintf+0xc>)
   bdbd4:	681b      	ldr	r3, [r3, #0]
   bdbd6:	68db      	ldr	r3, [r3, #12]
   bdbd8:	9301      	str	r3, [sp, #4]
   bdbda:	bd08      	pop	{r3, pc}
   bdbdc:	0003021c 	.word	0x0003021c

000bdbe0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bdbe0:	b508      	push	{r3, lr}
   bdbe2:	4b02      	ldr	r3, [pc, #8]	; (bdbec <sscanf+0xc>)
   bdbe4:	681b      	ldr	r3, [r3, #0]
   bdbe6:	695b      	ldr	r3, [r3, #20]
   bdbe8:	9301      	str	r3, [sp, #4]
   bdbea:	bd08      	pop	{r3, pc}
   bdbec:	0003021c 	.word	0x0003021c

000bdbf0 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bdbf0:	b508      	push	{r3, lr}
   bdbf2:	4b02      	ldr	r3, [pc, #8]	; (bdbfc <snprintf+0xc>)
   bdbf4:	681b      	ldr	r3, [r3, #0]
   bdbf6:	69db      	ldr	r3, [r3, #28]
   bdbf8:	9301      	str	r3, [sp, #4]
   bdbfa:	bd08      	pop	{r3, pc}
   bdbfc:	0003021c 	.word	0x0003021c

000bdc00 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bdc00:	b508      	push	{r3, lr}
   bdc02:	4b02      	ldr	r3, [pc, #8]	; (bdc0c <vsnprintf+0xc>)
   bdc04:	681b      	ldr	r3, [r3, #0]
   bdc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdc08:	9301      	str	r3, [sp, #4]
   bdc0a:	bd08      	pop	{r3, pc}
   bdc0c:	0003021c 	.word	0x0003021c

000bdc10 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bdc10:	b508      	push	{r3, lr}
   bdc12:	4b02      	ldr	r3, [pc, #8]	; (bdc1c <abort+0xc>)
   bdc14:	681b      	ldr	r3, [r3, #0]
   bdc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdc18:	9301      	str	r3, [sp, #4]
   bdc1a:	bd08      	pop	{r3, pc}
   bdc1c:	0003021c 	.word	0x0003021c

000bdc20 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bdc20:	b508      	push	{r3, lr}
   bdc22:	4b02      	ldr	r3, [pc, #8]	; (bdc2c <_malloc_r+0xc>)
   bdc24:	681b      	ldr	r3, [r3, #0]
   bdc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdc28:	9301      	str	r3, [sp, #4]
   bdc2a:	bd08      	pop	{r3, pc}
   bdc2c:	0003021c 	.word	0x0003021c

000bdc30 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bdc30:	b508      	push	{r3, lr}
   bdc32:	4b02      	ldr	r3, [pc, #8]	; (bdc3c <__errno+0xc>)
   bdc34:	681b      	ldr	r3, [r3, #0]
   bdc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdc38:	9301      	str	r3, [sp, #4]
   bdc3a:	bd08      	pop	{r3, pc}
   bdc3c:	0003021c 	.word	0x0003021c

000bdc40 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bdc40:	b508      	push	{r3, lr}
   bdc42:	4b02      	ldr	r3, [pc, #8]	; (bdc4c <__assert_func+0xc>)
   bdc44:	681b      	ldr	r3, [r3, #0]
   bdc46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdc48:	9301      	str	r3, [sp, #4]
   bdc4a:	bd08      	pop	{r3, pc}
   bdc4c:	0003021c 	.word	0x0003021c

000bdc50 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bdc50:	b508      	push	{r3, lr}
   bdc52:	4b02      	ldr	r3, [pc, #8]	; (bdc5c <newlib_impure_ptr_callback+0xc>)
   bdc54:	681b      	ldr	r3, [r3, #0]
   bdc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdc58:	9301      	str	r3, [sp, #4]
   bdc5a:	bd08      	pop	{r3, pc}
   bdc5c:	0003021c 	.word	0x0003021c

000bdc60 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bdc60:	b508      	push	{r3, lr}
   bdc62:	4b02      	ldr	r3, [pc, #8]	; (bdc6c <localtime_r+0xc>)
   bdc64:	681b      	ldr	r3, [r3, #0]
   bdc66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdc68:	9301      	str	r3, [sp, #4]
   bdc6a:	bd08      	pop	{r3, pc}
   bdc6c:	0003021c 	.word	0x0003021c

000bdc70 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bdc70:	428a      	cmp	r2, r1
{
   bdc72:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bdc74:	d007      	beq.n	bdc86 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bdc76:	1a44      	subs	r4, r0, r1
   bdc78:	9802      	ldr	r0, [sp, #8]
   bdc7a:	1ac0      	subs	r0, r0, r3
   bdc7c:	4344      	muls	r4, r0
   bdc7e:	1a50      	subs	r0, r2, r1
   bdc80:	fb94 f0f0 	sdiv	r0, r4, r0
   bdc84:	4418      	add	r0, r3
}
   bdc86:	bd10      	pop	{r4, pc}

000bdc88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bdc88:	2100      	movs	r1, #0
   bdc8a:	f7ff bead 	b.w	bd9e8 <system_delay_ms>

000bdc8e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bdc8e:	b510      	push	{r4, lr}
      if (_M_empty())
   bdc90:	6883      	ldr	r3, [r0, #8]
   bdc92:	4604      	mov	r4, r0
   bdc94:	b90b      	cbnz	r3, bdc9a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bdc96:	f003 fed5 	bl	c1a44 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bdc9a:	68c3      	ldr	r3, [r0, #12]
   bdc9c:	4798      	blx	r3
      if (_M_manager)
   bdc9e:	68a3      	ldr	r3, [r4, #8]
   bdca0:	b11b      	cbz	r3, bdcaa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bdca2:	2203      	movs	r2, #3
   bdca4:	4621      	mov	r1, r4
   bdca6:	4620      	mov	r0, r4
   bdca8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bdcaa:	4620      	mov	r0, r4
   bdcac:	2110      	movs	r1, #16
}
   bdcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bdcb2:	f7f6 b9f6 	b.w	b40a2 <_ZdlPvj>

000bdcb6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdcb6:	4770      	bx	lr

000bdcb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bdcb8:	4770      	bx	lr

000bdcba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bdcba:	4770      	bx	lr

000bdcbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdcbc:	4770      	bx	lr
	...

000bdcc0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdcc0:	4b06      	ldr	r3, [pc, #24]	; (bdcdc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdcc2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdcc4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bdcc6:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdcca:	d005      	beq.n	bdcd8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdccc:	4608      	mov	r0, r1
   bdcce:	f003 febd 	bl	c1a4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdcd2:	2800      	cmp	r0, #0
   bdcd4:	bf08      	it	eq
   bdcd6:	2400      	moveq	r4, #0
      }
   bdcd8:	4620      	mov	r0, r4
   bdcda:	bd10      	pop	{r4, pc}
   bdcdc:	000c5ef8 	.word	0x000c5ef8

000bdce0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdce0:	4b06      	ldr	r3, [pc, #24]	; (bdcfc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdce2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdce4:	b510      	push	{r4, lr}
   bdce6:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdcea:	d005      	beq.n	bdcf8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdcec:	4608      	mov	r0, r1
   bdcee:	f003 fead 	bl	c1a4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdcf2:	2800      	cmp	r0, #0
   bdcf4:	bf08      	it	eq
   bdcf6:	2400      	moveq	r4, #0
      }
   bdcf8:	4620      	mov	r0, r4
   bdcfa:	bd10      	pop	{r4, pc}
   bdcfc:	000c5ef8 	.word	0x000c5ef8

000bdd00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bdd00:	4b06      	ldr	r3, [pc, #24]	; (bdd1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bdd02:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bdd04:	b510      	push	{r4, lr}
   bdd06:	f100 040c 	add.w	r4, r0, #12
	    ||
   bdd0a:	d005      	beq.n	bdd18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bdd0c:	4608      	mov	r0, r1
   bdd0e:	f003 fe9d 	bl	c1a4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bdd12:	2800      	cmp	r0, #0
   bdd14:	bf08      	it	eq
   bdd16:	2400      	moveq	r4, #0
      }
   bdd18:	4620      	mov	r0, r4
   bdd1a:	bd10      	pop	{r4, pc}
   bdd1c:	000c5ef8 	.word	0x000c5ef8

000bdd20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bdd20:	b510      	push	{r4, lr}
   bdd22:	2168      	movs	r1, #104	; 0x68
   bdd24:	4604      	mov	r4, r0
   bdd26:	f7f6 f9bc 	bl	b40a2 <_ZdlPvj>
   bdd2a:	4620      	mov	r0, r4
   bdd2c:	bd10      	pop	{r4, pc}

000bdd2e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bdd2e:	b510      	push	{r4, lr}
   bdd30:	2128      	movs	r1, #40	; 0x28
   bdd32:	4604      	mov	r4, r0
   bdd34:	f7f6 f9b5 	bl	b40a2 <_ZdlPvj>
   bdd38:	4620      	mov	r0, r4
   bdd3a:	bd10      	pop	{r4, pc}

000bdd3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bdd3c:	b510      	push	{r4, lr}
   bdd3e:	2130      	movs	r1, #48	; 0x30
   bdd40:	4604      	mov	r4, r0
   bdd42:	f7f6 f9ae 	bl	b40a2 <_ZdlPvj>
   bdd46:	4620      	mov	r0, r4
   bdd48:	bd10      	pop	{r4, pc}

000bdd4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bdd4a:	2168      	movs	r1, #104	; 0x68
   bdd4c:	f7f6 b9a9 	b.w	b40a2 <_ZdlPvj>

000bdd50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bdd50:	2128      	movs	r1, #40	; 0x28
   bdd52:	f7f6 b9a6 	b.w	b40a2 <_ZdlPvj>

000bdd56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bdd56:	2130      	movs	r1, #48	; 0x30
   bdd58:	f7f6 b9a3 	b.w	b40a2 <_ZdlPvj>

000bdd5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bdd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bdd5e:	2500      	movs	r5, #0
   bdd60:	1cec      	adds	r4, r5, #3
   bdd62:	428c      	cmp	r4, r1
   bdd64:	d80d      	bhi.n	bdd82 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bdd66:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bdd68:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bdd6a:	5d87      	ldrb	r7, [r0, r6]
   bdd6c:	4297      	cmp	r7, r2
   bdd6e:	d105      	bne.n	bdd7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bdd70:	4426      	add	r6, r4
   bdd72:	42b1      	cmp	r1, r6
   bdd74:	d305      	bcc.n	bdd82 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bdd76:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bdd78:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bdd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bdd7c:	3401      	adds	r4, #1
   bdd7e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bdd80:	e7ee      	b.n	bdd60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bdd82:	2000      	movs	r0, #0
   bdd84:	e7f9      	b.n	bdd7a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bdd88 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bdd88:	4a02      	ldr	r2, [pc, #8]	; (bdd94 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bdd8a:	4903      	ldr	r1, [pc, #12]	; (bdd98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bdd8c:	200a      	movs	r0, #10
   bdd8e:	f7ff bdf1 	b.w	bd974 <panic_>
   bdd92:	bf00      	nop
   bdd94:	000bd5a5 	.word	0x000bd5a5
   bdd98:	000c5d55 	.word	0x000c5d55

000bdd9c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bdd9c:	b430      	push	{r4, r5}
   bdd9e:	460d      	mov	r5, r1
   bdda0:	4611      	mov	r1, r2
   bdda2:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bdda4:	6803      	ldr	r3, [r0, #0]
   bdda6:	6809      	ldr	r1, [r1, #0]
   bdda8:	6828      	ldr	r0, [r5, #0]
   bddaa:	e9d3 4300 	ldrd	r4, r3, [r3]
   bddae:	46a4      	mov	ip, r4
      }
   bddb0:	bc30      	pop	{r4, r5}
   bddb2:	4760      	bx	ip

000bddb4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bddb4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bddb6:	b538      	push	{r3, r4, r5, lr}
   bddb8:	4604      	mov	r4, r0
	switch (__op)
   bddba:	d102      	bne.n	bddc2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bddbc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bddbe:	6023      	str	r3, [r4, #0]
	}
   bddc0:	e003      	b.n	bddca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bddc2:	2a02      	cmp	r2, #2
   bddc4:	d003      	beq.n	bddce <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bddc6:	2a03      	cmp	r2, #3
   bddc8:	d00d      	beq.n	bdde6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bddca:	2000      	movs	r0, #0
   bddcc:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bddce:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bddd0:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bddd2:	f7f6 f960 	bl	b4096 <_Znwj>
   bddd6:	4603      	mov	r3, r0
   bddd8:	2800      	cmp	r0, #0
   bddda:	d0f0      	beq.n	bddbe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bdddc:	e895 0003 	ldmia.w	r5, {r0, r1}
   bdde0:	e883 0003 	stmia.w	r3, {r0, r1}
   bdde4:	e7eb      	b.n	bddbe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bdde6:	6800      	ldr	r0, [r0, #0]
   bdde8:	2800      	cmp	r0, #0
   bddea:	d0ee      	beq.n	bddca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bddec:	2108      	movs	r1, #8
   bddee:	f7f6 f958 	bl	b40a2 <_ZdlPvj>
   bddf2:	e7ea      	b.n	bddca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bddf4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bddf4:	b510      	push	{r4, lr}
   bddf6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bddf8:	3058      	adds	r0, #88	; 0x58
   bddfa:	f7f6 fb6b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bddfe:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bde02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bde06:	f003 b9b5 	b.w	c1174 <_ZN6StringD1Ev>

000bde0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bde0a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bde0c:	6843      	ldr	r3, [r0, #4]
   bde0e:	3b01      	subs	r3, #1
    {
   bde10:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bde12:	6043      	str	r3, [r0, #4]
   bde14:	b963      	cbnz	r3, bde30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bde16:	6803      	ldr	r3, [r0, #0]
   bde18:	689b      	ldr	r3, [r3, #8]
   bde1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bde1c:	68a3      	ldr	r3, [r4, #8]
   bde1e:	3b01      	subs	r3, #1
   bde20:	60a3      	str	r3, [r4, #8]
   bde22:	b92b      	cbnz	r3, bde30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bde24:	6823      	ldr	r3, [r4, #0]
   bde26:	4620      	mov	r0, r4
   bde28:	68db      	ldr	r3, [r3, #12]
    }
   bde2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bde2e:	4718      	bx	r3
    }
   bde30:	bd10      	pop	{r4, pc}

000bde32 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bde32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bde36:	b2da      	uxtb	r2, r3
   bde38:	2a09      	cmp	r2, #9
   bde3a:	d801      	bhi.n	bde40 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bde3c:	4618      	mov	r0, r3
   bde3e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bde40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bde44:	2b05      	cmp	r3, #5
   bde46:	d801      	bhi.n	bde4c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bde48:	3857      	subs	r0, #87	; 0x57
   bde4a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bde4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bde50:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bde52:	bf94      	ite	ls
   bde54:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bde56:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bde5a:	4770      	bx	lr

000bde5c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bde5c:	b510      	push	{r4, lr}
            locked_(false) {
   bde5e:	2300      	movs	r3, #0
   bde60:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bde62:	4b04      	ldr	r3, [pc, #16]	; (bde74 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bde64:	4604      	mov	r4, r0
   bde66:	6818      	ldr	r0, [r3, #0]
   bde68:	f7ff fb7c 	bl	bd564 <os_mutex_recursive_lock>
        locked_ = true;
   bde6c:	2301      	movs	r3, #1
   bde6e:	7023      	strb	r3, [r4, #0]
    }
   bde70:	4620      	mov	r0, r4
   bde72:	bd10      	pop	{r4, pc}
   bde74:	2003e628 	.word	0x2003e628

000bde78 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bde78:	b510      	push	{r4, lr}
        if (locked_) {
   bde7a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bde7c:	4604      	mov	r4, r0
        if (locked_) {
   bde7e:	b11b      	cbz	r3, bde88 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bde80:	4b02      	ldr	r3, [pc, #8]	; (bde8c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bde82:	6818      	ldr	r0, [r3, #0]
   bde84:	f7ff fb76 	bl	bd574 <os_mutex_recursive_unlock>
    }
   bde88:	4620      	mov	r0, r4
   bde8a:	bd10      	pop	{r4, pc}
   bde8c:	2003e628 	.word	0x2003e628

000bde90 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bde90:	b082      	sub	sp, #8
   bde92:	4603      	mov	r3, r0
    address_ = addr;
   bde94:	6808      	ldr	r0, [r1, #0]
   bde96:	6849      	ldr	r1, [r1, #4]
   bde98:	466a      	mov	r2, sp
   bde9a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bde9c:	466a      	mov	r2, sp
   bde9e:	ca03      	ldmia	r2!, {r0, r1}
   bdea0:	6018      	str	r0, [r3, #0]
}
   bdea2:	4618      	mov	r0, r3
    address_ = addr.address_;
   bdea4:	6059      	str	r1, [r3, #4]
}
   bdea6:	b002      	add	sp, #8
   bdea8:	4770      	bx	lr

000bdeaa <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bdeaa:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bdeac:	7982      	ldrb	r2, [r0, #6]
   bdeae:	798b      	ldrb	r3, [r1, #6]
   bdeb0:	429a      	cmp	r2, r3
   bdeb2:	d106      	bne.n	bdec2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bdeb4:	2206      	movs	r2, #6
   bdeb6:	f004 fbfd 	bl	c26b4 <memcmp>
   bdeba:	fab0 f080 	clz	r0, r0
   bdebe:	0940      	lsrs	r0, r0, #5
}
   bdec0:	bd08      	pop	{r3, pc}
    return false;
   bdec2:	2000      	movs	r0, #0
   bdec4:	e7fc      	b.n	bdec0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bdec6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bdec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bdeca:	6003      	str	r3, [r0, #0]
   bdecc:	8083      	strh	r3, [r0, #4]
}
   bdece:	2000      	movs	r0, #0
   bded0:	4770      	bx	lr

000bded2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bded2:	b508      	push	{r3, lr}
   bded4:	4602      	mov	r2, r0
        : address_{} {
   bded6:	2100      	movs	r1, #0
   bded8:	6001      	str	r1, [r0, #0]
   bdeda:	6041      	str	r1, [r0, #4]
    clear();
   bdedc:	f7ff fff3 	bl	bdec6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bdee0:	7191      	strb	r1, [r2, #6]
}
   bdee2:	4610      	mov	r0, r2
   bdee4:	bd08      	pop	{r3, pc}
	...

000bdee8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bdee8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bdeea:	2301      	movs	r3, #1
   bdeec:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdeee:	4b05      	ldr	r3, [pc, #20]	; (bdf04 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bdef0:	4602      	mov	r2, r0
   bdef2:	f103 0110 	add.w	r1, r3, #16
   bdef6:	f853 4b04 	ldr.w	r4, [r3], #4
   bdefa:	f842 4b04 	str.w	r4, [r2], #4
   bdefe:	428b      	cmp	r3, r1
   bdf00:	d1f9      	bne.n	bdef6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   bdf02:	bd10      	pop	{r4, pc}
   bdf04:	000c5f06 	.word	0x000c5f06

000bdf08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdf08:	b510      	push	{r4, lr}
    if (uuid128) {
   bdf0a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bdf0c:	4604      	mov	r4, r0
    if (uuid128) {
   bdf0e:	b1b1      	cbz	r1, bdf3e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bdf10:	2a01      	cmp	r2, #1
   bdf12:	f101 0210 	add.w	r2, r1, #16
   bdf16:	d10a      	bne.n	bdf2e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bdf18:	4601      	mov	r1, r0
   bdf1a:	f853 0b04 	ldr.w	r0, [r3], #4
   bdf1e:	f841 0b04 	str.w	r0, [r1], #4
   bdf22:	4293      	cmp	r3, r2
   bdf24:	d1f9      	bne.n	bdf1a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bdf26:	2301      	movs	r3, #1
   bdf28:	6123      	str	r3, [r4, #16]
}
   bdf2a:	4620      	mov	r0, r4
   bdf2c:	bd10      	pop	{r4, pc}
   bdf2e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bdf30:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bdf34:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bdf38:	429a      	cmp	r2, r3
   bdf3a:	d1f9      	bne.n	bdf30 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bdf3c:	e7f3      	b.n	bdf26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bdf3e:	2210      	movs	r2, #16
   bdf40:	f004 fbf0 	bl	c2724 <memset>
   bdf44:	e7f1      	b.n	bdf2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bdf46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bdf46:	b538      	push	{r3, r4, r5, lr}
   bdf48:	4604      	mov	r4, r0
   bdf4a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bdf4c:	461a      	mov	r2, r3
   bdf4e:	f7ff ffdb 	bl	bdf08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bdf52:	81a5      	strh	r5, [r4, #12]
}
   bdf54:	4620      	mov	r0, r4
   bdf56:	bd38      	pop	{r3, r4, r5, pc}

000bdf58 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bdf58:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bdf5a:	6902      	ldr	r2, [r0, #16]
   bdf5c:	b922      	cbnz	r2, bdf68 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bdf5e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdf60:	3800      	subs	r0, #0
   bdf62:	bf18      	it	ne
   bdf64:	2001      	movne	r0, #1
}
   bdf66:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdf68:	4902      	ldr	r1, [pc, #8]	; (bdf74 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bdf6a:	2210      	movs	r2, #16
   bdf6c:	f004 fba2 	bl	c26b4 <memcmp>
   bdf70:	e7f6      	b.n	bdf60 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bdf72:	bf00      	nop
   bdf74:	000c5f26 	.word	0x000c5f26

000bdf78 <_ZNK8particle7BleUuid4typeEv>:
}
   bdf78:	6900      	ldr	r0, [r0, #16]
   bdf7a:	4770      	bx	lr

000bdf7c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bdf7c:	b538      	push	{r3, r4, r5, lr}
   bdf7e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bdf80:	2214      	movs	r2, #20
   bdf82:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bdf84:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bdf86:	f004 fbcd 	bl	c2724 <memset>
    if (type_ == BleUuidType::SHORT) {
   bdf8a:	6923      	ldr	r3, [r4, #16]
   bdf8c:	b91b      	cbnz	r3, bdf96 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bdf8e:	89a3      	ldrh	r3, [r4, #12]
   bdf90:	802b      	strh	r3, [r5, #0]
}
   bdf92:	4628      	mov	r0, r5
   bdf94:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bdf96:	2301      	movs	r3, #1
   bdf98:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bdf9a:	4621      	mov	r1, r4
   bdf9c:	462b      	mov	r3, r5
   bdf9e:	f104 0210 	add.w	r2, r4, #16
   bdfa2:	f851 0b04 	ldr.w	r0, [r1], #4
   bdfa6:	f843 0b04 	str.w	r0, [r3], #4
   bdfaa:	4291      	cmp	r1, r2
   bdfac:	d1f9      	bne.n	bdfa2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bdfae:	e7f0      	b.n	bdf92 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bdfb0 <_ZNK8particle7BleUuid7shortedEv>:
}
   bdfb0:	8980      	ldrh	r0, [r0, #12]
   bdfb2:	4770      	bx	lr

000bdfb4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bdfb4:	4770      	bx	lr

000bdfb6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bdfb6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdfb8:	6902      	ldr	r2, [r0, #16]
   bdfba:	690b      	ldr	r3, [r1, #16]
   bdfbc:	429a      	cmp	r2, r3
   bdfbe:	d106      	bne.n	bdfce <_ZNK8particle7BleUuideqERKS0_+0x18>
   bdfc0:	2210      	movs	r2, #16
   bdfc2:	f004 fb77 	bl	c26b4 <memcmp>
   bdfc6:	fab0 f080 	clz	r0, r0
   bdfca:	0940      	lsrs	r0, r0, #5
}
   bdfcc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdfce:	2000      	movs	r0, #0
   bdfd0:	e7fc      	b.n	bdfcc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bdfd4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bdfd4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bdfd6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bdfda:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdfdc:	4b34      	ldr	r3, [pc, #208]	; (be0b0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bdfde:	460c      	mov	r4, r1
   bdfe0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdfe2:	4602      	mov	r2, r0
   bdfe4:	f103 0110 	add.w	r1, r3, #16
   bdfe8:	f853 0b04 	ldr.w	r0, [r3], #4
   bdfec:	f842 0b04 	str.w	r0, [r2], #4
   bdff0:	428b      	cmp	r3, r1
   bdff2:	d1f9      	bne.n	bdfe8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bdff4:	b344      	cbz	r4, be048 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bdff6:	2124      	movs	r1, #36	; 0x24
   bdff8:	4620      	mov	r0, r4
   bdffa:	f004 fc60 	bl	c28be <strnlen>
   bdffe:	2804      	cmp	r0, #4
   be000:	f04f 0500 	mov.w	r5, #0
   be004:	d123      	bne.n	be04e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be006:	f8ad 5004 	strh.w	r5, [sp, #4]
   be00a:	af01      	add	r7, sp, #4
   be00c:	1ca5      	adds	r5, r4, #2
   be00e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be010:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be014:	f7ff ff0d 	bl	bde32 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be018:	f1b0 0800 	subs.w	r8, r0, #0
   be01c:	db12      	blt.n	be044 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be01e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be022:	f7ff ff06 	bl	bde32 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be026:	2800      	cmp	r0, #0
   be028:	db0c      	blt.n	be044 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be02a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be02c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be030:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be032:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be036:	d1eb      	bne.n	be010 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be038:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be03c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be03e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be042:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be044:	2300      	movs	r3, #0
   be046:	6133      	str	r3, [r6, #16]
}
   be048:	b002      	add	sp, #8
   be04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be04e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be052:	2124      	movs	r1, #36	; 0x24
   be054:	4620      	mov	r0, r4
   be056:	f004 fc32 	bl	c28be <strnlen>
   be05a:	42a8      	cmp	r0, r5
   be05c:	d807      	bhi.n	be06e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be05e:	4642      	mov	r2, r8
   be060:	2100      	movs	r1, #0
   be062:	4630      	mov	r0, r6
}
   be064:	b002      	add	sp, #8
   be066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be06a:	f004 bb5b 	b.w	c2724 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be06e:	f1b8 0f00 	cmp.w	r8, #0
   be072:	d0e9      	beq.n	be048 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be074:	5d60      	ldrb	r0, [r4, r5]
   be076:	f7ff fedc 	bl	bde32 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be07a:	0603      	lsls	r3, r0, #24
   be07c:	d415      	bmi.n	be0aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be07e:	0100      	lsls	r0, r0, #4
   be080:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be084:	b2c7      	uxtb	r7, r0
   be086:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be08a:	2124      	movs	r1, #36	; 0x24
   be08c:	4620      	mov	r0, r4
   be08e:	f004 fc16 	bl	c28be <strnlen>
   be092:	3501      	adds	r5, #1
   be094:	42a8      	cmp	r0, r5
   be096:	d908      	bls.n	be0aa <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be098:	5d60      	ldrb	r0, [r4, r5]
   be09a:	f7ff feca 	bl	bde32 <_ZN8particle11hexToNibbleEc>
   be09e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be0a0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be0a2:	bfa4      	itt	ge
   be0a4:	4338      	orrge	r0, r7
   be0a6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be0aa:	3501      	adds	r5, #1
   be0ac:	e7d1      	b.n	be052 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be0ae:	bf00      	nop
   be0b0:	000c5f06 	.word	0x000c5f06

000be0b4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be0b4:	b513      	push	{r0, r1, r4, lr}
   be0b6:	4604      	mov	r4, r0
   be0b8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be0ba:	f7ff ff15 	bl	bdee8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be0be:	4620      	mov	r0, r4
   be0c0:	9901      	ldr	r1, [sp, #4]
   be0c2:	f7ff ff87 	bl	bdfd4 <_ZN8particle7BleUuid9constructEPKc>
}
   be0c6:	4620      	mov	r0, r4
   be0c8:	b002      	add	sp, #8
   be0ca:	bd10      	pop	{r4, pc}

000be0cc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be0cc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be0ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be0d2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be0d4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be0d6:	8043      	strh	r3, [r0, #2]
   be0d8:	220e      	movs	r2, #14
   be0da:	4629      	mov	r1, r5
   be0dc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be0de:	7105      	strb	r5, [r0, #4]
   be0e0:	3006      	adds	r0, #6
   be0e2:	f004 fb1f 	bl	c2724 <memset>
   be0e6:	f104 0014 	add.w	r0, r4, #20
   be0ea:	f7ff fefd 	bl	bdee8 <_ZN8particle7BleUuidC1Ev>
   be0ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be0f2:	f7ff fef9 	bl	bdee8 <_ZN8particle7BleUuidC1Ev>
   be0f6:	4904      	ldr	r1, [pc, #16]	; (be108 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be0f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be0fc:	f003 f885 	bl	c120a <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be100:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be102:	4620      	mov	r0, r4
   be104:	bd38      	pop	{r3, r4, r5, pc}
   be106:	bf00      	nop
   be108:	000c606b 	.word	0x000c606b

000be10c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be10c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be10e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be112:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be116:	4293      	cmp	r3, r2
   be118:	4618      	mov	r0, r3
   be11a:	d006      	beq.n	be12a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be11c:	6804      	ldr	r4, [r0, #0]
   be11e:	8824      	ldrh	r4, [r4, #0]
   be120:	428c      	cmp	r4, r1
   be122:	f103 0308 	add.w	r3, r3, #8
   be126:	d1f6      	bne.n	be116 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be128:	bd10      	pop	{r4, pc}
        return nullptr;
   be12a:	2000      	movs	r0, #0
   be12c:	e7fc      	b.n	be128 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be130:	b5f0      	push	{r4, r5, r6, r7, lr}
   be132:	4606      	mov	r6, r0
   be134:	b085      	sub	sp, #20
   be136:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be138:	460d      	mov	r5, r1
   be13a:	2900      	cmp	r1, #0
   be13c:	d050      	beq.n	be1e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be13e:	2a00      	cmp	r2, #0
   be140:	d04e      	beq.n	be1e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be142:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be144:	7823      	ldrb	r3, [r4, #0]
   be146:	2af4      	cmp	r2, #244	; 0xf4
   be148:	bf28      	it	cs
   be14a:	22f4      	movcs	r2, #244	; 0xf4
   be14c:	b343      	cbz	r3, be1a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be14e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be150:	0798      	lsls	r0, r3, #30
   be152:	d509      	bpl.n	be168 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be154:	89a0      	ldrh	r0, [r4, #12]
   be156:	9203      	str	r2, [sp, #12]
   be158:	2300      	movs	r3, #0
   be15a:	f7ff f97d 	bl	bd458 <hal_ble_gatt_server_set_characteristic_value>
   be15e:	2800      	cmp	r0, #0
   be160:	9a03      	ldr	r2, [sp, #12]
   be162:	da03      	bge.n	be16c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be164:	b005      	add	sp, #20
   be166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be168:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be16c:	6834      	ldr	r4, [r6, #0]
   be16e:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be170:	06d9      	lsls	r1, r3, #27
   be172:	d509      	bpl.n	be188 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be174:	2f01      	cmp	r7, #1
   be176:	d007      	beq.n	be188 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be178:	89a0      	ldrh	r0, [r4, #12]
   be17a:	2300      	movs	r3, #0
   be17c:	4629      	mov	r1, r5
}
   be17e:	b005      	add	sp, #20
   be180:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be184:	f7ff b99a 	b.w	bd4bc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be188:	069b      	lsls	r3, r3, #26
   be18a:	d5eb      	bpl.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be18c:	2f02      	cmp	r7, #2
   be18e:	d0e9      	beq.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be190:	89a0      	ldrh	r0, [r4, #12]
   be192:	2300      	movs	r3, #0
   be194:	4629      	mov	r1, r5
}
   be196:	b005      	add	sp, #20
   be198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be19c:	f7ff b998 	b.w	bd4d0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be1a0:	8860      	ldrh	r0, [r4, #2]
   be1a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be1a6:	4288      	cmp	r0, r1
   be1a8:	d01c      	beq.n	be1e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be1aa:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be1ac:	074e      	lsls	r6, r1, #29
   be1ae:	d501      	bpl.n	be1b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be1b0:	2f01      	cmp	r7, #1
   be1b2:	d104      	bne.n	be1be <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be1b4:	070b      	lsls	r3, r1, #28
   be1b6:	d409      	bmi.n	be1cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be1b8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be1bc:	e7d2      	b.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be1be:	89a1      	ldrh	r1, [r4, #12]
   be1c0:	9300      	str	r3, [sp, #0]
   be1c2:	4613      	mov	r3, r2
   be1c4:	462a      	mov	r2, r5
   be1c6:	f7ff f95b 	bl	bd480 <hal_ble_gatt_client_write_without_response>
   be1ca:	e7cb      	b.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be1cc:	2f02      	cmp	r7, #2
   be1ce:	d0f3      	beq.n	be1b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be1d0:	2300      	movs	r3, #0
   be1d2:	89a1      	ldrh	r1, [r4, #12]
   be1d4:	9300      	str	r3, [sp, #0]
   be1d6:	4613      	mov	r3, r2
   be1d8:	462a      	mov	r2, r5
   be1da:	f7ff f947 	bl	bd46c <hal_ble_gatt_client_write_with_response>
   be1de:	e7c1      	b.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be1e0:	4802      	ldr	r0, [pc, #8]	; (be1ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be1e2:	e7bf      	b.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be1e4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be1e8:	e7bc      	b.n	be164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be1ea:	bf00      	nop
   be1ec:	fffffef2 	.word	0xfffffef2

000be1f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be1f4:	2600      	movs	r6, #0
   be1f6:	6006      	str	r6, [r0, #0]
   be1f8:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be1fa:	2028      	movs	r0, #40	; 0x28
   be1fc:	460c      	mov	r4, r1
   be1fe:	f7f5 ff4a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be202:	1e05      	subs	r5, r0, #0
   be204:	f105 080c 	add.w	r8, r5, #12
   be208:	d00f      	beq.n	be22a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be20a:	2301      	movs	r3, #1
   be20c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be210:	4b08      	ldr	r3, [pc, #32]	; (be234 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be212:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be214:	4640      	mov	r0, r8
   be216:	f7ff fe67 	bl	bdee8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be21a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be21c:	622e      	str	r6, [r5, #32]
   be21e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be222:	4646      	mov	r6, r8
   be224:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be226:	6823      	ldr	r3, [r4, #0]
   be228:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be22a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be22e:	4638      	mov	r0, r7
   be230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be234:	000c5ec8 	.word	0x000c5ec8

000be238 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be238:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be23a:	2500      	movs	r5, #0
   be23c:	6005      	str	r5, [r0, #0]
   be23e:	4606      	mov	r6, r0
   be240:	2030      	movs	r0, #48	; 0x30
   be242:	f7f5 ff28 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be246:	4604      	mov	r4, r0
   be248:	b188      	cbz	r0, be26e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be24a:	2301      	movs	r3, #1
   be24c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be250:	4b09      	ldr	r3, [pc, #36]	; (be278 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be252:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be254:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be258:	8183      	strh	r3, [r0, #12]
   be25a:	300e      	adds	r0, #14
   be25c:	f7ff fe39 	bl	bded2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be260:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be264:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be268:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be26c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be26e:	6074      	str	r4, [r6, #4]
   be270:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   be272:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be274:	4630      	mov	r0, r6
   be276:	bd70      	pop	{r4, r5, r6, pc}
   be278:	000c5ee4 	.word	0x000c5ee4

000be27c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   be27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be27e:	460d      	mov	r5, r1
   be280:	4604      	mov	r4, r0
    WiringBleLock lk;
   be282:	a801      	add	r0, sp, #4
   be284:	f7ff fdea 	bl	bde5c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be288:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   be28a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   be28e:	6023      	str	r3, [r4, #0]
   be290:	f8d2 3006 	ldr.w	r3, [r2, #6]
   be294:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   be296:	a801      	add	r0, sp, #4
   be298:	f7ff fdee 	bl	bde78 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   be29c:	4620      	mov	r0, r4
   be29e:	b003      	add	sp, #12
   be2a0:	bd30      	pop	{r4, r5, pc}

000be2a2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   be2a2:	b530      	push	{r4, r5, lr}
   be2a4:	4605      	mov	r5, r0
   be2a6:	b087      	sub	sp, #28
   be2a8:	460c      	mov	r4, r1
    WiringBleLock lk;
   be2aa:	a801      	add	r0, sp, #4
   be2ac:	f7ff fdd6 	bl	bde5c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   be2b0:	682a      	ldr	r2, [r5, #0]
   be2b2:	6823      	ldr	r3, [r4, #0]
   be2b4:	8812      	ldrh	r2, [r2, #0]
   be2b6:	881b      	ldrh	r3, [r3, #0]
   be2b8:	429a      	cmp	r2, r3
   be2ba:	d10d      	bne.n	be2d8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   be2bc:	4629      	mov	r1, r5
   be2be:	a802      	add	r0, sp, #8
   be2c0:	f7ff ffdc 	bl	be27c <_ZNK8particle13BlePeerDevice7addressEv>
   be2c4:	4621      	mov	r1, r4
   be2c6:	a804      	add	r0, sp, #16
   be2c8:	f7ff ffd8 	bl	be27c <_ZNK8particle13BlePeerDevice7addressEv>
   be2cc:	a904      	add	r1, sp, #16
   be2ce:	a802      	add	r0, sp, #8
   be2d0:	f7ff fdeb 	bl	bdeaa <_ZNK8particle10BleAddresseqERKS0_>
   be2d4:	4604      	mov	r4, r0
   be2d6:	b900      	cbnz	r0, be2da <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   be2d8:	2400      	movs	r4, #0
    WiringBleLock lk;
   be2da:	a801      	add	r0, sp, #4
   be2dc:	f7ff fdcc 	bl	bde78 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   be2e0:	4620      	mov	r0, r4
   be2e2:	b007      	add	sp, #28
   be2e4:	bd30      	pop	{r4, r5, pc}
	...

000be2e8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   be2e8:	b510      	push	{r4, lr}
   be2ea:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   be2ec:	2064      	movs	r0, #100	; 0x64
   be2ee:	f7f5 fed2 	bl	b4096 <_Znwj>
   be2f2:	b168      	cbz	r0, be310 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   be2f4:	2300      	movs	r3, #0
   be2f6:	e9c0 3300 	strd	r3, r3, [r0]
   be2fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be302:	e9c0 3306 	strd	r3, r3, [r0, #24]
   be306:	6203      	str	r3, [r0, #32]
   be308:	62c3      	str	r3, [r0, #44]	; 0x2c
   be30a:	63c3      	str	r3, [r0, #60]	; 0x3c
   be30c:	64c3      	str	r3, [r0, #76]	; 0x4c
   be30e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   be310:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   be312:	b920      	cbnz	r0, be31e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   be314:	4a0a      	ldr	r2, [pc, #40]	; (be340 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be316:	490b      	ldr	r1, [pc, #44]	; (be344 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   be318:	200a      	movs	r0, #10
   be31a:	f7ff fb2b 	bl	bd974 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   be31e:	2000      	movs	r0, #0
   be320:	f7ff f85e 	bl	bd3e0 <hal_ble_stack_init>
   be324:	b120      	cbz	r0, be330 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   be326:	4a06      	ldr	r2, [pc, #24]	; (be340 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be328:	4907      	ldr	r1, [pc, #28]	; (be348 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   be32a:	200a      	movs	r0, #10
   be32c:	f7ff fb22 	bl	bd974 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   be330:	6821      	ldr	r1, [r4, #0]
   be332:	4806      	ldr	r0, [pc, #24]	; (be34c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   be334:	2200      	movs	r2, #0
   be336:	f7ff f8b7 	bl	bd4a8 <hal_ble_set_callback_on_periph_link_events>
}
   be33a:	4620      	mov	r0, r4
   be33c:	bd10      	pop	{r4, pc}
   be33e:	bf00      	nop
   be340:	000bd5a5 	.word	0x000bd5a5
   be344:	000c5d55 	.word	0x000c5d55
   be348:	000c5d93 	.word	0x000c5d93
   be34c:	000be91d 	.word	0x000be91d

000be350 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   be350:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   be352:	4c0a      	ldr	r4, [pc, #40]	; (be37c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   be354:	7823      	ldrb	r3, [r4, #0]
   be356:	f3bf 8f5b 	dmb	ish
   be35a:	07db      	lsls	r3, r3, #31
   be35c:	d40c      	bmi.n	be378 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be35e:	4620      	mov	r0, r4
   be360:	f7f5 feae 	bl	b40c0 <__cxa_guard_acquire>
   be364:	b140      	cbz	r0, be378 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   be366:	4806      	ldr	r0, [pc, #24]	; (be380 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be368:	f7ff ffbe 	bl	be2e8 <_ZN8particle14BleLocalDeviceC1Ev>
   be36c:	4620      	mov	r0, r4
   be36e:	f7f5 feac 	bl	b40ca <__cxa_guard_release>
   be372:	4804      	ldr	r0, [pc, #16]	; (be384 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   be374:	f004 f988 	bl	c2688 <atexit>
    return instance;
}
   be378:	4801      	ldr	r0, [pc, #4]	; (be380 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   be37a:	bd10      	pop	{r4, pc}
   be37c:	2003e620 	.word	0x2003e620
   be380:	2003e62c 	.word	0x2003e62c
   be384:	000be5d5 	.word	0x000be5d5

000be388 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be388:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   be38a:	6803      	ldr	r3, [r0, #0]
   be38c:	3b09      	subs	r3, #9
   be38e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   be390:	b08d      	sub	sp, #52	; 0x34
   be392:	4604      	mov	r4, r0
   be394:	460d      	mov	r5, r1
    switch (event->type) {
   be396:	d811      	bhi.n	be3bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   be398:	f7ff ffda 	bl	be350 <_ZN8particle14BleLocalDevice11getInstanceEv>
   be39c:	88a1      	ldrh	r1, [r4, #4]
   be39e:	6800      	ldr	r0, [r0, #0]
   be3a0:	f7ff feb4 	bl	be10c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   be3a4:	4603      	mov	r3, r0
   be3a6:	b958      	cbnz	r0, be3c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   be3a8:	2220      	movs	r2, #32
   be3aa:	e9cd 2004 	strd	r2, r0, [sp, #16]
   be3ae:	4a0b      	ldr	r2, [pc, #44]	; (be3dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   be3b0:	9200      	str	r2, [sp, #0]
   be3b2:	490b      	ldr	r1, [pc, #44]	; (be3e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   be3b4:	aa04      	add	r2, sp, #16
   be3b6:	2032      	movs	r0, #50	; 0x32
   be3b8:	f7ff fae4 	bl	bd984 <log_message>
}
   be3bc:	b00d      	add	sp, #52	; 0x34
   be3be:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   be3c0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   be3c2:	2a00      	cmp	r2, #0
   be3c4:	d0fa      	beq.n	be3bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   be3c6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be3ca:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   be3ce:	e9cd 1203 	strd	r1, r2, [sp, #12]
   be3d2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   be3d4:	aa04      	add	r2, sp, #16
   be3d6:	a903      	add	r1, sp, #12
   be3d8:	47a0      	blx	r4
}
   be3da:	e7ef      	b.n	be3bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   be3dc:	000c5dd5 	.word	0x000c5dd5
   be3e0:	000c5d6c 	.word	0x000c5d6c

000be3e4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   be3e4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   be3e6:	2000      	movs	r0, #0
   be3e8:	f7fe fffa 	bl	bd3e0 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   be3ec:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   be3f0:	bd08      	pop	{r3, pc}

000be3f2 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   be3f2:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   be3f4:	2100      	movs	r1, #0
   be3f6:	f7fe bffb 	b.w	bd3f0 <hal_ble_gap_set_tx_power>

000be3fa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   be3fa:	b919      	cbnz	r1, be404 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   be3fc:	460a      	mov	r2, r1
   be3fe:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   be400:	f7fe bffe 	b.w	bd400 <hal_ble_gap_set_advertising_data>
   be404:	e9d1 0100 	ldrd	r0, r1, [r1]
   be408:	2200      	movs	r2, #0
   be40a:	e7f9      	b.n	be400 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000be40c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   be40c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   be40e:	69d8      	ldr	r0, [r3, #28]
}
   be410:	2800      	cmp	r0, #0
   be412:	bfd4      	ite	le
   be414:	2000      	movle	r0, #0
   be416:	2001      	movgt	r0, #1
   be418:	4770      	bx	lr

000be41a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be41a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be41c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be420:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be422:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   be426:	42ae      	cmp	r6, r5
   be428:	d004      	beq.n	be434 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   be42a:	4628      	mov	r0, r5
   be42c:	f002 fea2 	bl	c1174 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   be430:	3510      	adds	r5, #16
   be432:	e7f8      	b.n	be426 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be434:	6820      	ldr	r0, [r4, #0]
   be436:	f7ff fbbb 	bl	bdbb0 <free>
}
   be43a:	4620      	mov	r0, r4
   be43c:	bd70      	pop	{r4, r5, r6, pc}

000be43e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be43e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   be440:	1e14      	subs	r4, r2, #0
   be442:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   be444:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   be446:	db02      	blt.n	be44e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   be448:	1862      	adds	r2, r4, r1
   be44a:	429a      	cmp	r2, r3
   be44c:	dd00      	ble.n	be450 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   be44e:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   be450:	682a      	ldr	r2, [r5, #0]
   be452:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   be454:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   be456:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   be458:	1a52      	subs	r2, r2, r1
   be45a:	f004 f949 	bl	c26f0 <memmove>
    size_ -= n;
   be45e:	686a      	ldr	r2, [r5, #4]
   be460:	1b12      	subs	r2, r2, r4
   be462:	606a      	str	r2, [r5, #4]
}
   be464:	bd38      	pop	{r3, r4, r5, pc}

000be466 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be466:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   be468:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   be46a:	4604      	mov	r4, r0
   be46c:	460d      	mov	r5, r1
   be46e:	ab01      	add	r3, sp, #4
   be470:	e9d0 0100 	ldrd	r0, r1, [r0]
   be474:	f7ff fc72 	bl	bdd5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   be478:	4602      	mov	r2, r0
   be47a:	b138      	cbz	r0, be48c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   be47c:	9901      	ldr	r1, [sp, #4]
   be47e:	4620      	mov	r0, r4
   be480:	f7ff ffdd 	bl	be43e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   be484:	4629      	mov	r1, r5
   be486:	4620      	mov	r0, r4
   be488:	f7ff ffed 	bl	be466 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   be48c:	b003      	add	sp, #12
   be48e:	bd30      	pop	{r4, r5, pc}

000be490 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   be490:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   be492:	460c      	mov	r4, r1
   be494:	b929      	cbnz	r1, be4a2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   be496:	460a      	mov	r2, r1
   be498:	4608      	mov	r0, r1
}
   be49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be49e:	f7fe bfb7 	b.w	bd410 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be4a2:	2101      	movs	r1, #1
   be4a4:	4620      	mov	r0, r4
   be4a6:	f7ff ffde 	bl	be466 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be4aa:	e9d4 0100 	ldrd	r0, r1, [r4]
   be4ae:	2200      	movs	r2, #0
   be4b0:	e7f3      	b.n	be49a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be4b2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be4b2:	b538      	push	{r3, r4, r5, lr}
   be4b4:	4604      	mov	r4, r0
   be4b6:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be4b8:	f7ff ff9f 	bl	be3fa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be4bc:	2800      	cmp	r0, #0
   be4be:	db0a      	blt.n	be4d6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be4c0:	4629      	mov	r1, r5
   be4c2:	4620      	mov	r0, r4
   be4c4:	f7ff ffe4 	bl	be490 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be4c8:	2800      	cmp	r0, #0
   be4ca:	db04      	blt.n	be4d6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   be4d0:	2000      	movs	r0, #0
   be4d2:	f7fe bfa5 	b.w	bd420 <hal_ble_gap_start_advertising>
}
   be4d6:	bd38      	pop	{r3, r4, r5, pc}

000be4d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   be4d8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   be4da:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   be4dc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   be4de:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be4e0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   be4e2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be4e4:	f7f5 fdd7 	bl	b4096 <_Znwj>
   be4e8:	b118      	cbz	r0, be4f2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   be4ea:	682b      	ldr	r3, [r5, #0]
   be4ec:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   be4ee:	686b      	ldr	r3, [r5, #4]
   be4f0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   be4f2:	4b03      	ldr	r3, [pc, #12]	; (be500 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   be4f4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   be4f6:	4b03      	ldr	r3, [pc, #12]	; (be504 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be4f8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   be4fa:	60a3      	str	r3, [r4, #8]
      }
   be4fc:	4620      	mov	r0, r4
   be4fe:	bd38      	pop	{r3, r4, r5, pc}
   be500:	000bdd9d 	.word	0x000bdd9d
   be504:	000bddb5 	.word	0x000bddb5

000be508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   be508:	680b      	ldr	r3, [r1, #0]
   be50a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   be50c:	b113      	cbz	r3, be514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   be50e:	685a      	ldr	r2, [r3, #4]
   be510:	3201      	adds	r2, #1
   be512:	605a      	str	r2, [r3, #4]
      }
   be514:	4770      	bx	lr

000be516 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   be516:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be518:	f851 3b04 	ldr.w	r3, [r1], #4
   be51c:	4604      	mov	r4, r0
   be51e:	f840 3b04 	str.w	r3, [r0], #4
   be522:	f7ff fff1 	bl	be508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   be526:	6823      	ldr	r3, [r4, #0]
   be528:	b90b      	cbnz	r3, be52e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   be52a:	f7ff fc2d 	bl	bdd88 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   be52e:	4620      	mov	r0, r4
   be530:	bd10      	pop	{r4, pc}

000be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be532:	b510      	push	{r4, lr}
   be534:	f851 3b04 	ldr.w	r3, [r1], #4
   be538:	4604      	mov	r4, r0
   be53a:	f840 3b04 	str.w	r3, [r0], #4
   be53e:	f7ff ffe3 	bl	be508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be542:	4620      	mov	r0, r4
   be544:	bd10      	pop	{r4, pc}

000be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be546:	b510      	push	{r4, lr}
   be548:	f851 3b04 	ldr.w	r3, [r1], #4
   be54c:	4604      	mov	r4, r0
   be54e:	f840 3b04 	str.w	r3, [r0], #4
   be552:	f7ff ffd9 	bl	be508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be556:	4620      	mov	r0, r4
   be558:	bd10      	pop	{r4, pc}

000be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   be55a:	b510      	push	{r4, lr}
   be55c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   be55e:	6800      	ldr	r0, [r0, #0]
   be560:	b108      	cbz	r0, be566 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   be562:	f7ff fc52 	bl	bde0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   be566:	4620      	mov	r0, r4
   be568:	bd10      	pop	{r4, pc}

000be56a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be56a:	b510      	push	{r4, lr}
   be56c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be56e:	3004      	adds	r0, #4
   be570:	f7ff fff3 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be574:	4620      	mov	r0, r4
   be576:	bd10      	pop	{r4, pc}

000be578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be578:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be57a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be57e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be580:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be584:	42ae      	cmp	r6, r5
   be586:	d004      	beq.n	be592 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be588:	1d28      	adds	r0, r5, #4
   be58a:	f7ff ffe6 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be58e:	3508      	adds	r5, #8
   be590:	e7f8      	b.n	be584 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be592:	6820      	ldr	r0, [r4, #0]
   be594:	f7ff fb0c 	bl	bdbb0 <free>
}
   be598:	4620      	mov	r0, r4
   be59a:	bd70      	pop	{r4, r5, r6, pc}

000be59c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be59c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be59e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be5a2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be5a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be5a8:	42ae      	cmp	r6, r5
   be5aa:	d004      	beq.n	be5b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be5ac:	1d28      	adds	r0, r5, #4
   be5ae:	f7ff ffd4 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be5b2:	3508      	adds	r5, #8
   be5b4:	e7f8      	b.n	be5a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be5b6:	6820      	ldr	r0, [r4, #0]
   be5b8:	f7ff fafa 	bl	bdbb0 <free>
}
   be5bc:	4620      	mov	r0, r4
   be5be:	bd70      	pop	{r4, r5, r6, pc}

000be5c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be5c0:	b510      	push	{r4, lr}
   be5c2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be5c4:	3024      	adds	r0, #36	; 0x24
   be5c6:	f7ff ffe9 	bl	be59c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be5ca:	f104 0018 	add.w	r0, r4, #24
   be5ce:	f7ff ffd3 	bl	be578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be5d2:	bd10      	pop	{r4, pc}

000be5d4 <__tcf_0>:
    static BleLocalDevice instance;
   be5d4:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be5d6:	4b17      	ldr	r3, [pc, #92]	; (be634 <__tcf_0+0x60>)
   be5d8:	681c      	ldr	r4, [r3, #0]
   be5da:	b354      	cbz	r4, be632 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be5dc:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be5e0:	f7f5 ff78 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   be5e4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be5e8:	f7f5 ff74 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   be5ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be5f0:	f7f5 ff70 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   be5f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be5f8:	f7f5 ff6c 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be5fc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be600:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be604:	42ae      	cmp	r6, r5
   be606:	d004      	beq.n	be612 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be608:	1d28      	adds	r0, r5, #4
   be60a:	f7ff ffa6 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be60e:	3508      	adds	r5, #8
   be610:	e7f8      	b.n	be604 <__tcf_0+0x30>
    ::free(ptr);
   be612:	69a0      	ldr	r0, [r4, #24]
   be614:	f7ff facc 	bl	bdbb0 <free>
    ~BleLocalDeviceImpl() = default;
   be618:	f104 000c 	add.w	r0, r4, #12
   be61c:	f7ff ffbe 	bl	be59c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be620:	4620      	mov	r0, r4
   be622:	f7ff ffa9 	bl	be578 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be626:	4620      	mov	r0, r4
   be628:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be62a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be62e:	f7f5 bd38 	b.w	b40a2 <_ZdlPvj>
   be632:	bd70      	pop	{r4, r5, r6, pc}
   be634:	2003e62c 	.word	0x2003e62c

000be638 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be638:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be63a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be63c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be640:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be644:	6803      	ldr	r3, [r0, #0]
   be646:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be648:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be64a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be64c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be64e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be650:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be652:	f7ff ff82 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be656:	b002      	add	sp, #8
   be658:	bd10      	pop	{r4, pc}

000be65a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be65a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be65c:	b510      	push	{r4, lr}
      if (_M_empty())
   be65e:	b90a      	cbnz	r2, be664 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be660:	f003 f9f0 	bl	c1a44 <_ZSt25__throw_bad_function_callv>
    }
   be664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be668:	68c3      	ldr	r3, [r0, #12]
   be66a:	4718      	bx	r3

000be66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be66c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be66e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be670:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be672:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be674:	dd03      	ble.n	be67e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be676:	f7ff faa3 	bl	bdbc0 <realloc>
            if (!d) {
   be67a:	b918      	cbnz	r0, be684 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be67c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be67e:	f7ff fa97 	bl	bdbb0 <free>
        T* d = nullptr;
   be682:	2000      	movs	r0, #0
        data_ = d;
   be684:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be686:	60a5      	str	r5, [r4, #8]
        return true;
   be688:	2001      	movs	r0, #1
   be68a:	e7f7      	b.n	be67c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be68c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be68c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be68e:	6883      	ldr	r3, [r0, #8]
   be690:	428b      	cmp	r3, r1
   be692:	da02      	bge.n	be69a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be694:	f7ff ffea 	bl	be66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be698:	bd08      	pop	{r3, pc}
    return true;
   be69a:	2001      	movs	r0, #1
   be69c:	e7fc      	b.n	be698 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be69e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be6a2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be6a4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be6a6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be6a8:	4419      	add	r1, r3
   be6aa:	6883      	ldr	r3, [r0, #8]
   be6ac:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be6ae:	4604      	mov	r4, r0
   be6b0:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be6b2:	dc12      	bgt.n	be6da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be6b4:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6b6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be6b8:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6ba:	1bd2      	subs	r2, r2, r7
   be6bc:	4631      	mov	r1, r6
   be6be:	1970      	adds	r0, r6, r5
   be6c0:	f004 f816 	bl	c26f0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be6c4:	462a      	mov	r2, r5
   be6c6:	4641      	mov	r1, r8
   be6c8:	4630      	mov	r0, r6
   be6ca:	f004 f803 	bl	c26d4 <memcpy>
    size_ += n;
   be6ce:	6863      	ldr	r3, [r4, #4]
   be6d0:	442b      	add	r3, r5
   be6d2:	6063      	str	r3, [r4, #4]
    return true;
   be6d4:	2001      	movs	r0, #1
}
   be6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be6da:	f7ff ffc7 	bl	be66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be6de:	2800      	cmp	r0, #0
   be6e0:	d1e8      	bne.n	be6b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be6e2:	e7f8      	b.n	be6d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be6e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be6e6:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be6e8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be6ec:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be6ee:	4604      	mov	r4, r0
   be6f0:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be6f2:	da0b      	bge.n	be70c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be6f4:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6f6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be6f8:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be6fa:	1b52      	subs	r2, r2, r5
   be6fc:	1c48      	adds	r0, r1, #1
   be6fe:	f003 fff7 	bl	c26f0 <memmove>
    new(p) T(std::move(value));
   be702:	557e      	strb	r6, [r7, r5]
    ++size_;
   be704:	6863      	ldr	r3, [r4, #4]
   be706:	3301      	adds	r3, #1
   be708:	6063      	str	r3, [r4, #4]
}
   be70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be70c:	3101      	adds	r1, #1
   be70e:	f7ff ffad 	bl	be66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be712:	2800      	cmp	r0, #0
   be714:	d1ee      	bne.n	be6f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be716:	e7f8      	b.n	be70a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be718:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be71a:	6841      	ldr	r1, [r0, #4]
   be71c:	f7ff bfe2 	b.w	be6e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be720 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be724:	4604      	mov	r4, r0
   be726:	461d      	mov	r5, r3
   be728:	460f      	mov	r7, r1
   be72a:	ab01      	add	r3, sp, #4
   be72c:	4690      	mov	r8, r2
   be72e:	460a      	mov	r2, r1
   be730:	e9d0 0100 	ldrd	r0, r1, [r0]
   be734:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be738:	f7ff fb10 	bl	bdd5c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be73c:	1cae      	adds	r6, r5, #2
   be73e:	6863      	ldr	r3, [r4, #4]
   be740:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be742:	f1b9 0f00 	cmp.w	r9, #0
   be746:	d126      	bne.n	be796 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be748:	b328      	cbz	r0, be796 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be74a:	4433      	add	r3, r6
   be74c:	1a1b      	subs	r3, r3, r0
   be74e:	2bff      	cmp	r3, #255	; 0xff
   be750:	d809      	bhi.n	be766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be752:	9901      	ldr	r1, [sp, #4]
   be754:	4620      	mov	r0, r4
   be756:	f7ff fe72 	bl	be43e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be75a:	6861      	ldr	r1, [r4, #4]
   be75c:	4620      	mov	r0, r4
   be75e:	4431      	add	r1, r6
   be760:	f7ff ff94 	bl	be68c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be764:	b918      	cbnz	r0, be76e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be766:	6860      	ldr	r0, [r4, #4]
}
   be768:	b003      	add	sp, #12
   be76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be76e:	1c6a      	adds	r2, r5, #1
   be770:	9901      	ldr	r1, [sp, #4]
   be772:	b2d2      	uxtb	r2, r2
   be774:	4620      	mov	r0, r4
   be776:	f7ff ffb5 	bl	be6e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be77a:	9901      	ldr	r1, [sp, #4]
   be77c:	463a      	mov	r2, r7
   be77e:	3101      	adds	r1, #1
   be780:	4620      	mov	r0, r4
   be782:	f7ff ffaf 	bl	be6e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be786:	9901      	ldr	r1, [sp, #4]
   be788:	462b      	mov	r3, r5
   be78a:	4642      	mov	r2, r8
   be78c:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be78e:	4620      	mov	r0, r4
   be790:	f7ff ff85 	bl	be69e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be794:	e7e7      	b.n	be766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be796:	18f1      	adds	r1, r6, r3
   be798:	29ff      	cmp	r1, #255	; 0xff
   be79a:	d8e4      	bhi.n	be766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be79c:	4620      	mov	r0, r4
   be79e:	f7ff ff75 	bl	be68c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be7a2:	2800      	cmp	r0, #0
   be7a4:	d0df      	beq.n	be766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be7a6:	1c69      	adds	r1, r5, #1
   be7a8:	b2c9      	uxtb	r1, r1
   be7aa:	4620      	mov	r0, r4
   be7ac:	f7ff ffb4 	bl	be718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be7b0:	4639      	mov	r1, r7
   be7b2:	4620      	mov	r0, r4
   be7b4:	f7ff ffb0 	bl	be718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be7b8:	6861      	ldr	r1, [r4, #4]
   be7ba:	462b      	mov	r3, r5
   be7bc:	4642      	mov	r2, r8
   be7be:	e7e6      	b.n	be78e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be7c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be7c0:	b430      	push	{r4, r5}
   be7c2:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be7c6:	b11a      	cbz	r2, be7d0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be7c8:	9502      	str	r5, [sp, #8]
}
   be7ca:	bc30      	pop	{r4, r5}
   be7cc:	f7ff bfa8 	b.w	be720 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be7d0:	6840      	ldr	r0, [r0, #4]
}
   be7d2:	bc30      	pop	{r4, r5}
   be7d4:	4770      	bx	lr

000be7d6 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be7d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be7d8:	2300      	movs	r3, #0
   be7da:	e9c0 3300 	strd	r3, r3, [r0]
   be7de:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be7e0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be7e2:	9300      	str	r3, [sp, #0]
   be7e4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be7e6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be7ea:	4619      	mov	r1, r3
   be7ec:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be7f0:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be7f2:	f7ff ffe5 	bl	be7c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be7f6:	4620      	mov	r0, r4
   be7f8:	b004      	add	sp, #16
   be7fa:	bd10      	pop	{r4, pc}

000be7fc <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be7fc:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be7fe:	9300      	str	r3, [sp, #0]
   be800:	4613      	mov	r3, r2
   be802:	460a      	mov	r2, r1
   be804:	21ff      	movs	r1, #255	; 0xff
   be806:	f7ff ffdb 	bl	be7c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be80a:	b003      	add	sp, #12
   be80c:	f85d fb04 	ldr.w	pc, [sp], #4

000be810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be810:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be814:	4604      	mov	r4, r0
   be816:	460d      	mov	r5, r1
   be818:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be81a:	d914      	bls.n	be846 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be81c:	4290      	cmp	r0, r2
   be81e:	d213      	bcs.n	be848 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be820:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be824:	1a75      	subs	r5, r6, r1
   be826:	f1a1 0708 	sub.w	r7, r1, #8
   be82a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be82c:	42b7      	cmp	r7, r6
   be82e:	d018      	beq.n	be862 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be830:	b11c      	cbz	r4, be83a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be832:	4631      	mov	r1, r6
   be834:	4620      	mov	r0, r4
   be836:	f7ff fe86 	bl	be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be83a:	1d30      	adds	r0, r6, #4
   be83c:	f7ff fe8d 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be840:	3e08      	subs	r6, #8
   be842:	3c08      	subs	r4, #8
   be844:	e7f2      	b.n	be82c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be846:	d00c      	beq.n	be862 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be848:	42b5      	cmp	r5, r6
   be84a:	d00a      	beq.n	be862 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be84c:	b11c      	cbz	r4, be856 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be84e:	4629      	mov	r1, r5
   be850:	4620      	mov	r0, r4
   be852:	f7ff fe78 	bl	be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be856:	1d28      	adds	r0, r5, #4
   be858:	f7ff fe7f 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be85c:	3508      	adds	r5, #8
   be85e:	3408      	adds	r4, #8
   be860:	e7f2      	b.n	be848 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be864 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be866:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be868:	6846      	ldr	r6, [r0, #4]
   be86a:	4668      	mov	r0, sp
   be86c:	f7ff fe6b 	bl	be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be870:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be874:	429f      	cmp	r7, r3
   be876:	db12      	blt.n	be89e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be878:	3701      	adds	r7, #1
        if (n > 0) {
   be87a:	2f00      	cmp	r7, #0
   be87c:	dd29      	ble.n	be8d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be87e:	00f8      	lsls	r0, r7, #3
   be880:	f7ff f98e 	bl	bdba0 <malloc>
            if (!d) {
   be884:	4605      	mov	r5, r0
   be886:	b1f0      	cbz	r0, be8c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be888:	e9d4 1200 	ldrd	r1, r2, [r4]
   be88c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be890:	f7ff ffbe 	bl	be810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be894:	6820      	ldr	r0, [r4, #0]
   be896:	f7ff f98b 	bl	bdbb0 <free>
        data_ = d;
   be89a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be89c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be89e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be8a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be8a2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be8a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be8aa:	4631      	mov	r1, r6
   be8ac:	f106 0008 	add.w	r0, r6, #8
   be8b0:	f7ff ffae 	bl	be810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be8b4:	b11e      	cbz	r6, be8be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be8b6:	4669      	mov	r1, sp
   be8b8:	4630      	mov	r0, r6
   be8ba:	f7ff fe44 	bl	be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be8be:	6863      	ldr	r3, [r4, #4]
   be8c0:	3301      	adds	r3, #1
   be8c2:	6063      	str	r3, [r4, #4]
    return true;
   be8c4:	2501      	movs	r5, #1
   be8c6:	a801      	add	r0, sp, #4
   be8c8:	f7ff fe47 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be8cc:	4628      	mov	r0, r5
   be8ce:	b003      	add	sp, #12
   be8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be8d2:	2500      	movs	r5, #0
   be8d4:	e7de      	b.n	be894 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be8d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be8d8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be8dc:	4605      	mov	r5, r0
   be8de:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be8e0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be8e4:	42a6      	cmp	r6, r4
   be8e6:	d005      	beq.n	be8f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be8e8:	4639      	mov	r1, r7
   be8ea:	4620      	mov	r0, r4
   be8ec:	f7ff fcd9 	bl	be2a2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be8f0:	b108      	cbz	r0, be8f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be8f2:	b914      	cbnz	r4, be8fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be8f6:	3408      	adds	r4, #8
   be8f8:	e7f4      	b.n	be8e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be8fa:	1d20      	adds	r0, r4, #4
   be8fc:	f7ff fe2d 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be900:	e9d5 3200 	ldrd	r3, r2, [r5]
   be904:	f104 0108 	add.w	r1, r4, #8
   be908:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be90c:	4620      	mov	r0, r4
   be90e:	f7ff ff7f 	bl	be810 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be912:	686b      	ldr	r3, [r5, #4]
   be914:	3b01      	subs	r3, #1
   be916:	606b      	str	r3, [r5, #4]
    return true;
   be918:	e7ec      	b.n	be8f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be91c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be920:	4605      	mov	r5, r0
   be922:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be924:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be926:	460c      	mov	r4, r1
        WiringBleLock lk;
   be928:	f7ff fa98 	bl	bde5c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be92c:	682e      	ldr	r6, [r5, #0]
   be92e:	1ef3      	subs	r3, r6, #3
   be930:	2b0d      	cmp	r3, #13
   be932:	d83c      	bhi.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be934:	e8df f013 	tbh	[pc, r3, lsl #1]
   be938:	0053000e 	.word	0x0053000e
   be93c:	00d1003b 	.word	0x00d1003b
   be940:	003b003b 	.word	0x003b003b
   be944:	003b003b 	.word	0x003b003b
   be948:	009b003b 	.word	0x009b003b
   be94c:	009b009b 	.word	0x009b009b
   be950:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be954:	a804      	add	r0, sp, #16
   be956:	f7ff fc6f 	bl	be238 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be95a:	9b04      	ldr	r3, [sp, #16]
   be95c:	89aa      	ldrh	r2, [r5, #12]
   be95e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be960:	6869      	ldr	r1, [r5, #4]
   be962:	9804      	ldr	r0, [sp, #16]
   be964:	3108      	adds	r1, #8
   be966:	3002      	adds	r0, #2
   be968:	f7ff fa92 	bl	bde90 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be96c:	a904      	add	r1, sp, #16
   be96e:	a806      	add	r0, sp, #24
   be970:	f7ff fde9 	bl	be546 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be974:	a906      	add	r1, sp, #24
   be976:	f104 0018 	add.w	r0, r4, #24
   be97a:	f7ff ff73 	bl	be864 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be97e:	4605      	mov	r5, r0
   be980:	a807      	add	r0, sp, #28
   be982:	f7ff fdea 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be986:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be988:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be98a:	b9b5      	cbnz	r5, be9ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be98c:	4b5d      	ldr	r3, [pc, #372]	; (beb04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be98e:	495e      	ldr	r1, [pc, #376]	; (beb08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be990:	9300      	str	r3, [sp, #0]
   be992:	2032      	movs	r0, #50	; 0x32
   be994:	462b      	mov	r3, r5
   be996:	aa06      	add	r2, sp, #24
   be998:	9507      	str	r5, [sp, #28]
   be99a:	f7fe fff3 	bl	bd984 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be99e:	9b04      	ldr	r3, [sp, #16]
   be9a0:	4629      	mov	r1, r5
   be9a2:	8818      	ldrh	r0, [r3, #0]
   be9a4:	f7fe fd44 	bl	bd430 <hal_ble_gap_disconnect>
   be9a8:	a805      	add	r0, sp, #20
   be9aa:	f7ff fdd6 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be9ae:	a803      	add	r0, sp, #12
   be9b0:	f7ff fa62 	bl	bde78 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be9b4:	b00e      	add	sp, #56	; 0x38
   be9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be9ba:	4a54      	ldr	r2, [pc, #336]	; (beb0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be9bc:	9200      	str	r2, [sp, #0]
   be9be:	2300      	movs	r3, #0
   be9c0:	4951      	ldr	r1, [pc, #324]	; (beb08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be9c2:	9307      	str	r3, [sp, #28]
   be9c4:	aa06      	add	r2, sp, #24
   be9c6:	2001      	movs	r0, #1
   be9c8:	f7fe ffdc 	bl	bd984 <log_message>
                if (impl->connectedCallback_) {
   be9cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be9ce:	2b00      	cmp	r3, #0
   be9d0:	d0ea      	beq.n	be9a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be9d2:	a904      	add	r1, sp, #16
   be9d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be9d8:	f7ff fe3f 	bl	be65a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be9dc:	e7e4      	b.n	be9a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be9de:	89a9      	ldrh	r1, [r5, #12]
   be9e0:	4620      	mov	r0, r4
   be9e2:	f7ff fb93 	bl	be10c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be9e6:	4606      	mov	r6, r0
   be9e8:	2800      	cmp	r0, #0
   be9ea:	d0e0      	beq.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be9ec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be9ee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be9f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be9f6:	8029      	strh	r1, [r5, #0]
   be9f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be9fc:	429a      	cmp	r2, r3
   be9fe:	d003      	beq.n	bea08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bea00:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bea04:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bea06:	e7f9      	b.n	be9fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bea08:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bea0c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bea10:	45b8      	cmp	r8, r7
   bea12:	d004      	beq.n	bea1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bea14:	1d38      	adds	r0, r7, #4
   bea16:	f7ff fda0 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bea1a:	3708      	adds	r7, #8
   bea1c:	e7f8      	b.n	bea10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bea1e:	2300      	movs	r3, #0
   bea20:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bea22:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bea26:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bea2a:	45b8      	cmp	r8, r7
   bea2c:	d004      	beq.n	bea38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bea2e:	1d38      	adds	r0, r7, #4
   bea30:	f7ff fd93 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bea34:	3708      	adds	r7, #8
   bea36:	e7f8      	b.n	bea2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bea38:	2300      	movs	r3, #0
   bea3a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bea3c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bea3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bea40:	b123      	cbz	r3, bea4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bea42:	4631      	mov	r1, r6
   bea44:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bea48:	f7ff fe07 	bl	be65a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bea4c:	2300      	movs	r3, #0
   bea4e:	2220      	movs	r2, #32
   bea50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bea54:	4a2e      	ldr	r2, [pc, #184]	; (beb10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bea56:	9200      	str	r2, [sp, #0]
   bea58:	492b      	ldr	r1, [pc, #172]	; (beb08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bea5a:	aa06      	add	r2, sp, #24
   bea5c:	2001      	movs	r0, #1
   bea5e:	f7fe ff91 	bl	bd984 <log_message>
                    impl->peers_.removeOne(*peer);
   bea62:	4631      	mov	r1, r6
   bea64:	f104 0018 	add.w	r0, r4, #24
   bea68:	f7ff ff35 	bl	be8d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bea6c:	e79f      	b.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bea6e:	89a9      	ldrh	r1, [r5, #12]
   bea70:	4620      	mov	r0, r4
   bea72:	f7ff fb4b 	bl	be10c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bea76:	2800      	cmp	r0, #0
   bea78:	d099      	beq.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bea7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bea7c:	2b00      	cmp	r3, #0
   bea7e:	d096      	beq.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bea80:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bea82:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bea84:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bea88:	d001      	beq.n	bea8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bea8a:	2e10      	cmp	r6, #16
   bea8c:	d117      	bne.n	beabe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bea8e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bea90:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bea92:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bea94:	2506      	movs	r5, #6
                        };
   bea96:	f88d 3015 	strb.w	r3, [sp, #21]
   bea9a:	9104      	str	r1, [sp, #16]
   bea9c:	f88d 2014 	strb.w	r2, [sp, #20]
   beaa0:	9006      	str	r0, [sp, #24]
   beaa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   beaa6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   beaa8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   beaac:	9508      	str	r5, [sp, #32]
   beaae:	e883 0003 	stmia.w	r3, {r0, r1}
   beab2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   beab4:	a906      	add	r1, sp, #24
   beab6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   beaba:	4798      	blx	r3
   beabc:	e777      	b.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   beabe:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   beac0:	bf01      	itttt	eq
   beac2:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   beac4:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   beac6:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   beaca:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   beacc:	bf0f      	iteee	eq
   beace:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bead2:	461a      	movne	r2, r3
   bead4:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bead6:	461d      	movne	r5, r3
   bead8:	e7dd      	b.n	bea96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   beada:	89a9      	ldrh	r1, [r5, #12]
   beadc:	4620      	mov	r0, r4
   beade:	f7ff fb15 	bl	be10c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   beae2:	4601      	mov	r1, r0
   beae4:	2800      	cmp	r0, #0
   beae6:	f43f af62 	beq.w	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   beaea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   beaec:	2b00      	cmp	r3, #0
   beaee:	f43f af5e 	beq.w	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   beaf2:	686b      	ldr	r3, [r5, #4]
   beaf4:	9306      	str	r3, [sp, #24]
   beaf6:	aa06      	add	r2, sp, #24
   beaf8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   beafa:	f104 0054 	add.w	r0, r4, #84	; 0x54
   beafe:	4798      	blx	r3
   beb00:	e755      	b.n	be9ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   beb02:	bf00      	nop
   beb04:	000c5ded 	.word	0x000c5ded
   beb08:	000c5d6c 	.word	0x000c5d6c
   beb0c:	000c5e13 	.word	0x000c5e13
   beb10:	000c5e30 	.word	0x000c5e30

000beb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   beb14:	b513      	push	{r0, r1, r4, lr}
   beb16:	460b      	mov	r3, r1
   beb18:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beb1a:	e9d0 0100 	ldrd	r0, r1, [r0]
   beb1e:	466c      	mov	r4, sp
   beb20:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   beb24:	e893 0003 	ldmia.w	r3, {r0, r1}
   beb28:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   beb2c:	e894 0003 	ldmia.w	r4, {r0, r1}
   beb30:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   beb34:	b002      	add	sp, #8
   beb36:	bd10      	pop	{r4, pc}

000beb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   beb38:	b538      	push	{r3, r4, r5, lr}
   beb3a:	4605      	mov	r5, r0
   beb3c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   beb3e:	f7ff ffe9 	bl	beb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beb42:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   beb44:	68a2      	ldr	r2, [r4, #8]
   beb46:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   beb48:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beb4a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   beb4c:	68e2      	ldr	r2, [r4, #12]
   beb4e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   beb50:	60e3      	str	r3, [r4, #12]
      }
   beb52:	bd38      	pop	{r3, r4, r5, pc}

000beb54 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   beb54:	b570      	push	{r4, r5, r6, lr}
   beb56:	4604      	mov	r4, r0
   beb58:	b08c      	sub	sp, #48	; 0x30
   beb5a:	460e      	mov	r6, r1
   beb5c:	9201      	str	r2, [sp, #4]
   beb5e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   beb60:	f7ff fab4 	bl	be0cc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   beb64:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   beb66:	9901      	ldr	r1, [sp, #4]
   beb68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   beb6c:	f002 fba3 	bl	c12b6 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   beb70:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   beb74:	b1cd      	cbz	r5, bebaa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   beb76:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   beb78:	9502      	str	r5, [sp, #8]
   beb7a:	a902      	add	r1, sp, #8
   beb7c:	a804      	add	r0, sp, #16
   beb7e:	9303      	str	r3, [sp, #12]
   beb80:	f7ff fcaa 	bl	be4d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   beb84:	2300      	movs	r3, #0
	__x.swap(*this);
   beb86:	a908      	add	r1, sp, #32
   beb88:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   beb8a:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   beb8c:	f7ff ffd4 	bl	beb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   beb90:	4631      	mov	r1, r6
   beb92:	a808      	add	r0, sp, #32
   beb94:	f7ff ffd0 	bl	beb38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   beb98:	a808      	add	r0, sp, #32
   beb9a:	f7f5 fc9b 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   beb9e:	a804      	add	r0, sp, #16
   beba0:	f7f5 fc98 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
    }
   beba4:	4620      	mov	r0, r4
   beba6:	b00c      	add	sp, #48	; 0x30
   beba8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bebaa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bebac:	e7ea      	b.n	beb84 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bebb0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bebb4:	b087      	sub	sp, #28
   bebb6:	461d      	mov	r5, r3
   bebb8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bebbc:	4680      	mov	r8, r0
   bebbe:	468b      	mov	fp, r1
   bebc0:	4692      	mov	sl, r2
   bebc2:	9912      	ldr	r1, [sp, #72]	; 0x48
   bebc4:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bebc6:	2200      	movs	r2, #0
   bebc8:	2068      	movs	r0, #104	; 0x68
   bebca:	9102      	str	r1, [sp, #8]
   bebcc:	9204      	str	r2, [sp, #16]
   bebce:	f7f5 fa62 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bebd2:	1e06      	subs	r6, r0, #0
   bebd4:	f106 090c 	add.w	r9, r6, #12
   bebd8:	d018      	beq.n	bec0c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bebda:	2201      	movs	r2, #1
	: _M_impl(__a)
   bebdc:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bebde:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bebe2:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bebe4:	4a15      	ldr	r2, [pc, #84]	; (bec3c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bebe6:	f847 2b20 	str.w	r2, [r7], #32
   bebea:	9b03      	ldr	r3, [sp, #12]
   bebec:	9100      	str	r1, [sp, #0]
   bebee:	465a      	mov	r2, fp
   bebf0:	4651      	mov	r1, sl
   bebf2:	4648      	mov	r0, r9
   bebf4:	f7ff ffae 	bl	beb54 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bebf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bebfa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bebfc:	682b      	ldr	r3, [r5, #0]
   bebfe:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bec00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bec02:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bec06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bec08:	6823      	ldr	r3, [r4, #0]
   bec0a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bec0c:	a904      	add	r1, sp, #16
   bec0e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bec10:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bec14:	f7ff fd10 	bl	be638 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bec18:	a805      	add	r0, sp, #20
   bec1a:	f7ff fc9e 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bec1e:	f8d8 3000 	ldr.w	r3, [r8]
   bec22:	b93b      	cbnz	r3, bec34 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bec24:	4a06      	ldr	r2, [pc, #24]	; (bec40 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bec26:	4907      	ldr	r1, [pc, #28]	; (bec44 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bec28:	200a      	movs	r0, #10
}
   bec2a:	b007      	add	sp, #28
   bec2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bec30:	f7fe bea0 	b.w	bd974 <panic_>
}
   bec34:	b007      	add	sp, #28
   bec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bec3a:	bf00      	nop
   bec3c:	000c5eac 	.word	0x000c5eac
   bec40:	000bd5a5 	.word	0x000bd5a5
   bec44:	000c5d55 	.word	0x000c5d55

000bec48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bec48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bec4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bec4c:	4604      	mov	r4, r0
   bec4e:	460d      	mov	r5, r1
   bec50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bec52:	d914      	bls.n	bec7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bec54:	4290      	cmp	r0, r2
   bec56:	d213      	bcs.n	bec80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bec58:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bec5c:	1a75      	subs	r5, r6, r1
   bec5e:	f1a1 0708 	sub.w	r7, r1, #8
   bec62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bec64:	42b7      	cmp	r7, r6
   bec66:	d018      	beq.n	bec9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bec68:	b11c      	cbz	r4, bec72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bec6a:	4631      	mov	r1, r6
   bec6c:	4620      	mov	r0, r4
   bec6e:	f7ff fc60 	bl	be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bec72:	1d30      	adds	r0, r6, #4
   bec74:	f7ff fc71 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bec78:	3e08      	subs	r6, #8
   bec7a:	3c08      	subs	r4, #8
   bec7c:	e7f2      	b.n	bec64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bec7e:	d00c      	beq.n	bec9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bec80:	42b5      	cmp	r5, r6
   bec82:	d00a      	beq.n	bec9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bec84:	b11c      	cbz	r4, bec8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bec86:	4629      	mov	r1, r5
   bec88:	4620      	mov	r0, r4
   bec8a:	f7ff fc52 	bl	be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bec8e:	1d28      	adds	r0, r5, #4
   bec90:	f7ff fc63 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bec94:	3508      	adds	r5, #8
   bec96:	3408      	adds	r4, #8
   bec98:	e7f2      	b.n	bec80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bec9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bec9c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bec9e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   beca0:	4605      	mov	r5, r0
        if (n > 0) {
   beca2:	dd11      	ble.n	becc8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   beca4:	00f0      	lsls	r0, r6, #3
   beca6:	f7fe ff7b 	bl	bdba0 <malloc>
            if (!d) {
   becaa:	4604      	mov	r4, r0
   becac:	b158      	cbz	r0, becc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   becae:	e9d5 1200 	ldrd	r1, r2, [r5]
   becb2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   becb6:	f7ff ffc7 	bl	bec48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   becba:	6828      	ldr	r0, [r5, #0]
   becbc:	f7fe ff78 	bl	bdbb0 <free>
        data_ = d;
   becc0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   becc2:	60ae      	str	r6, [r5, #8]
        return true;
   becc4:	2001      	movs	r0, #1
    }
   becc6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   becc8:	2400      	movs	r4, #0
   becca:	e7f6      	b.n	becba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000beccc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   beccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   becce:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   becd0:	6845      	ldr	r5, [r0, #4]
   becd2:	4668      	mov	r0, sp
   becd4:	f7ff fc2d 	bl	be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   becd8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   becdc:	4299      	cmp	r1, r3
   becde:	da10      	bge.n	bed02 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bece0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bece2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bece4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bece8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   becec:	4629      	mov	r1, r5
   becee:	f105 0008 	add.w	r0, r5, #8
   becf2:	f7ff ffa9 	bl	bec48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   becf6:	b98d      	cbnz	r5, bed1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   becf8:	6863      	ldr	r3, [r4, #4]
   becfa:	3301      	adds	r3, #1
   becfc:	6063      	str	r3, [r4, #4]
    return true;
   becfe:	2601      	movs	r6, #1
   bed00:	e006      	b.n	bed10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bed02:	3101      	adds	r1, #1
   bed04:	4620      	mov	r0, r4
   bed06:	f7ff ffc9 	bl	bec9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bed0a:	4606      	mov	r6, r0
   bed0c:	2800      	cmp	r0, #0
   bed0e:	d1e7      	bne.n	bece0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bed10:	a801      	add	r0, sp, #4
   bed12:	f7ff fc22 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bed16:	4630      	mov	r0, r6
   bed18:	b002      	add	sp, #8
   bed1a:	bd70      	pop	{r4, r5, r6, pc}
   bed1c:	4669      	mov	r1, sp
   bed1e:	4628      	mov	r0, r5
   bed20:	f7ff fc07 	bl	be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bed24:	e7e8      	b.n	becf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bed26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bed26:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bed2a:	4604      	mov	r4, r0
   bed2c:	460d      	mov	r5, r1
   bed2e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bed30:	d914      	bls.n	bed5c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bed32:	4290      	cmp	r0, r2
   bed34:	d213      	bcs.n	bed5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bed36:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bed3a:	1a75      	subs	r5, r6, r1
   bed3c:	f1a1 0708 	sub.w	r7, r1, #8
   bed40:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bed42:	42b7      	cmp	r7, r6
   bed44:	d018      	beq.n	bed78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bed46:	b11c      	cbz	r4, bed50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bed48:	4631      	mov	r1, r6
   bed4a:	4620      	mov	r0, r4
   bed4c:	f7ff fbe3 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bed50:	1d30      	adds	r0, r6, #4
   bed52:	f7ff fc02 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bed56:	3e08      	subs	r6, #8
   bed58:	3c08      	subs	r4, #8
   bed5a:	e7f2      	b.n	bed42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bed5c:	d00c      	beq.n	bed78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bed5e:	42b5      	cmp	r5, r6
   bed60:	d00a      	beq.n	bed78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bed62:	b11c      	cbz	r4, bed6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bed64:	4629      	mov	r1, r5
   bed66:	4620      	mov	r0, r4
   bed68:	f7ff fbd5 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bed6c:	1d28      	adds	r0, r5, #4
   bed6e:	f7ff fbf4 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bed72:	3508      	adds	r5, #8
   bed74:	3408      	adds	r4, #8
   bed76:	e7f2      	b.n	bed5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bed7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bed7a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bed7c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bed7e:	4605      	mov	r5, r0
        if (n > 0) {
   bed80:	dd11      	ble.n	beda6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bed82:	00f0      	lsls	r0, r6, #3
   bed84:	f7fe ff0c 	bl	bdba0 <malloc>
            if (!d) {
   bed88:	4604      	mov	r4, r0
   bed8a:	b158      	cbz	r0, beda4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bed8c:	e9d5 1200 	ldrd	r1, r2, [r5]
   bed90:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bed94:	f7ff ffc7 	bl	bed26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bed98:	6828      	ldr	r0, [r5, #0]
   bed9a:	f7fe ff09 	bl	bdbb0 <free>
        data_ = d;
   bed9e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   beda0:	60ae      	str	r6, [r5, #8]
        return true;
   beda2:	2001      	movs	r0, #1
    }
   beda4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   beda6:	2400      	movs	r4, #0
   beda8:	e7f6      	b.n	bed98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bedaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bedaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bedac:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bedae:	6845      	ldr	r5, [r0, #4]
   bedb0:	4668      	mov	r0, sp
   bedb2:	f7ff fbb0 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bedb6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bedba:	4299      	cmp	r1, r3
   bedbc:	da10      	bge.n	bede0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bedbe:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bedc0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bedc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bedc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bedca:	4629      	mov	r1, r5
   bedcc:	f105 0008 	add.w	r0, r5, #8
   bedd0:	f7ff ffa9 	bl	bed26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bedd4:	b98d      	cbnz	r5, bedfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bedd6:	6863      	ldr	r3, [r4, #4]
   bedd8:	3301      	adds	r3, #1
   bedda:	6063      	str	r3, [r4, #4]
    return true;
   beddc:	2601      	movs	r6, #1
   bedde:	e006      	b.n	bedee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bede0:	3101      	adds	r1, #1
   bede2:	4620      	mov	r0, r4
   bede4:	f7ff ffc9 	bl	bed7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bede8:	4606      	mov	r6, r0
   bedea:	2800      	cmp	r0, #0
   bedec:	d1e7      	bne.n	bedbe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bedee:	a801      	add	r0, sp, #4
   bedf0:	f7ff fbb3 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bedf4:	4630      	mov	r0, r6
   bedf6:	b002      	add	sp, #8
   bedf8:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bedfa:	4669      	mov	r1, sp
   bedfc:	4628      	mov	r0, r5
   bedfe:	f7ff fb8a 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bee02:	e7e8      	b.n	bedd6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bee04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bee04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bee08:	4617      	mov	r7, r2
   bee0a:	b0a1      	sub	sp, #132	; 0x84
   bee0c:	4680      	mov	r8, r0
    WiringBleLock lk;
   bee0e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bee10:	460e      	mov	r6, r1
    WiringBleLock lk;
   bee12:	f7ff f823 	bl	bde5c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bee16:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bee18:	7923      	ldrb	r3, [r4, #4]
   bee1a:	b953      	cbnz	r3, bee32 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bee1c:	4639      	mov	r1, r7
   bee1e:	4640      	mov	r0, r8
   bee20:	f7ff fb79 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bee24:	a80a      	add	r0, sp, #40	; 0x28
   bee26:	f7ff f827 	bl	bde78 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bee2a:	4640      	mov	r0, r8
   bee2c:	b021      	add	sp, #132	; 0x84
   bee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bee32:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bee34:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bee38:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bee3c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bee3e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bee42:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bee46:	9b03      	ldr	r3, [sp, #12]
   bee48:	429d      	cmp	r5, r3
   bee4a:	d021      	beq.n	bee90 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bee4c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bee50:	4658      	mov	r0, fp
   bee52:	f109 0114 	add.w	r1, r9, #20
   bee56:	f7ff f8ae 	bl	bdfb6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bee5a:	b1b8      	cbz	r0, bee8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bee5c:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bee60:	4650      	mov	r0, sl
   bee62:	f7ff f8a8 	bl	bdfb6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bee66:	b188      	cbz	r0, bee8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bee68:	6823      	ldr	r3, [r4, #0]
   bee6a:	f8d9 2000 	ldr.w	r2, [r9]
   bee6e:	4053      	eors	r3, r2
   bee70:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bee74:	d10a      	bne.n	bee8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bee76:	2220      	movs	r2, #32
   bee78:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bee7c:	4a5e      	ldr	r2, [pc, #376]	; (beff8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bee7e:	9200      	str	r2, [sp, #0]
   bee80:	aa15      	add	r2, sp, #84	; 0x54
   bee82:	495e      	ldr	r1, [pc, #376]	; (beffc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bee84:	2032      	movs	r0, #50	; 0x32
   bee86:	f7fe fd7d 	bl	bd984 <log_message>
   bee8a:	e7c7      	b.n	bee1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bee8c:	3508      	adds	r5, #8
   bee8e:	e7da      	b.n	bee46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bee90:	4650      	mov	r0, sl
   bee92:	f7ff f861 	bl	bdf58 <_ZNK8particle7BleUuid7isValidEv>
   bee96:	b960      	cbnz	r0, beeb2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bee98:	4959      	ldr	r1, [pc, #356]	; (bf000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bee9a:	2201      	movs	r2, #1
   bee9c:	a815      	add	r0, sp, #84	; 0x54
   bee9e:	ad15      	add	r5, sp, #84	; 0x54
   beea0:	f7ff f832 	bl	bdf08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   beea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beea6:	46d4      	mov	ip, sl
   beea8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beeac:	682b      	ldr	r3, [r5, #0]
   beeae:	f8cc 3000 	str.w	r3, [ip]
   beeb2:	6833      	ldr	r3, [r6, #0]
   beeb4:	e9d3 5300 	ldrd	r5, r3, [r3]
   beeb8:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   beebc:	455d      	cmp	r5, fp
   beebe:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   beec0:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   beec2:	d06e      	beq.n	befa2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   beec4:	f855 0b08 	ldr.w	r0, [r5], #8
   beec8:	f7ff f875 	bl	bdfb6 <_ZNK8particle7BleUuideqERKS0_>
   beecc:	2800      	cmp	r0, #0
   beece:	d0f5      	beq.n	beebc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   beed0:	f104 0a14 	add.w	sl, r4, #20
   beed4:	4650      	mov	r0, sl
   beed6:	f7ff f83f 	bl	bdf58 <_ZNK8particle7BleUuid7isValidEv>
   beeda:	b988      	cbnz	r0, bef00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   beedc:	4b49      	ldr	r3, [pc, #292]	; (bf004 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beede:	4948      	ldr	r1, [pc, #288]	; (bf000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   beee0:	881a      	ldrh	r2, [r3, #0]
   beee2:	3201      	adds	r2, #1
   beee4:	b292      	uxth	r2, r2
   beee6:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beee8:	a815      	add	r0, sp, #84	; 0x54
   beeea:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   beeec:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   beeee:	f7ff f82a 	bl	bdf46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   beef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   beef4:	46d4      	mov	ip, sl
   beef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   beefa:	682b      	ldr	r3, [r5, #0]
   beefc:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bef00:	4b41      	ldr	r3, [pc, #260]	; (bf008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bef02:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bef04:	2228      	movs	r2, #40	; 0x28
   bef06:	2100      	movs	r1, #0
   bef08:	a816      	add	r0, sp, #88	; 0x58
   bef0a:	f003 fc0b 	bl	c2724 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bef0e:	4651      	mov	r1, sl
   bef10:	a804      	add	r0, sp, #16
   bef12:	f7ff f833 	bl	bdf7c <_ZN8particle7BleUuid7halUUIDEv>
   bef16:	ab04      	add	r3, sp, #16
   bef18:	aa18      	add	r2, sp, #96	; 0x60
   bef1a:	f10d 0c20 	add.w	ip, sp, #32
   bef1e:	6818      	ldr	r0, [r3, #0]
   bef20:	6859      	ldr	r1, [r3, #4]
   bef22:	4615      	mov	r5, r2
   bef24:	c503      	stmia	r5!, {r0, r1}
   bef26:	3308      	adds	r3, #8
   bef28:	4563      	cmp	r3, ip
   bef2a:	462a      	mov	r2, r5
   bef2c:	d1f7      	bne.n	bef1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bef2e:	6818      	ldr	r0, [r3, #0]
   bef30:	6028      	str	r0, [r5, #0]
    return value_;
   bef32:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bef34:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bef38:	f8d9 3000 	ldr.w	r3, [r9]
   bef3c:	8a9b      	ldrh	r3, [r3, #20]
   bef3e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bef42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bef44:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bef46:	4b31      	ldr	r3, [pc, #196]	; (bf00c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bef48:	2200      	movs	r2, #0
   bef4a:	1da1      	adds	r1, r4, #6
   bef4c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bef4e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bef52:	f7fe fa9f 	bl	bd494 <hal_ble_gatt_server_add_characteristic>
   bef56:	2800      	cmp	r0, #0
   bef58:	f47f af60 	bne.w	bee1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bef5c:	2301      	movs	r3, #1
   bef5e:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bef60:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bef62:	4639      	mov	r1, r7
        return characteristics_;
   bef64:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bef66:	a80d      	add	r0, sp, #52	; 0x34
   bef68:	f7ff fad5 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bef6c:	4620      	mov	r0, r4
   bef6e:	a90d      	add	r1, sp, #52	; 0x34
   bef70:	f7ff ff1b 	bl	bedaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bef74:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bef76:	a80e      	add	r0, sp, #56	; 0x38
   bef78:	f7ff faef 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef7c:	2c00      	cmp	r4, #0
   bef7e:	f47f af4d 	bne.w	bee1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bef82:	2320      	movs	r3, #32
   bef84:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bef88:	4b21      	ldr	r3, [pc, #132]	; (bf010 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bef8a:	9300      	str	r3, [sp, #0]
   bef8c:	aa0d      	add	r2, sp, #52	; 0x34
   bef8e:	4623      	mov	r3, r4
   bef90:	e777      	b.n	bee82 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bef92:	4639      	mov	r1, r7
   bef94:	4640      	mov	r0, r8
   bef96:	f7ff fabe 	bl	be516 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bef9a:	a80c      	add	r0, sp, #48	; 0x30
   bef9c:	f7ff fadd 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   befa0:	e740      	b.n	bee24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   befa2:	a80b      	add	r0, sp, #44	; 0x2c
   befa4:	f7ff f924 	bl	be1f0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   befa8:	4651      	mov	r1, sl
   befaa:	a815      	add	r0, sp, #84	; 0x54
   befac:	f7fe ffe6 	bl	bdf7c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   befb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   befb2:	2300      	movs	r3, #0
   befb4:	3214      	adds	r2, #20
   befb6:	a915      	add	r1, sp, #84	; 0x54
   befb8:	2001      	movs	r0, #1
   befba:	f7fe fa43 	bl	bd444 <hal_ble_gatt_server_add_service>
   befbe:	2800      	cmp	r0, #0
   befc0:	d1e7      	bne.n	bef92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   befc2:	6835      	ldr	r5, [r6, #0]
   befc4:	a90b      	add	r1, sp, #44	; 0x2c
   befc6:	a80d      	add	r0, sp, #52	; 0x34
   befc8:	f7ff fab3 	bl	be532 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   befcc:	4628      	mov	r0, r5
   befce:	a90d      	add	r1, sp, #52	; 0x34
   befd0:	f7ff fe7c 	bl	beccc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   befd4:	4605      	mov	r5, r0
   befd6:	a80e      	add	r0, sp, #56	; 0x38
   befd8:	f7ff fabf 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   befdc:	2d00      	cmp	r5, #0
   befde:	d0d8      	beq.n	bef92 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   befe0:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   befe2:	6853      	ldr	r3, [r2, #4]
   befe4:	6812      	ldr	r2, [r2, #0]
   befe6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   befea:	3b01      	subs	r3, #1
   befec:	a80c      	add	r0, sp, #48	; 0x30
   befee:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   beff2:	f7ff fab2 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beff6:	e76b      	b.n	beed0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   beff8:	000c5e4f 	.word	0x000c5e4f
   beffc:	000c5d6c 	.word	0x000c5d6c
   bf000:	000c5f16 	.word	0x000c5f16
   bf004:	2003e624 	.word	0x2003e624
   bf008:	002c0003 	.word	0x002c0003
   bf00c:	000be389 	.word	0x000be389
   bf010:	000c5e7a 	.word	0x000c5e7a

000bf014 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf014:	4802      	ldr	r0, [pc, #8]	; (bf020 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf016:	2300      	movs	r3, #0
   bf018:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf01a:	f7fe ba93 	b.w	bd544 <os_mutex_recursive_create>
   bf01e:	bf00      	nop
   bf020:	2003e628 	.word	0x2003e628

000bf024 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf024:	2200      	movs	r2, #0
   bf026:	6840      	ldr	r0, [r0, #4]
   bf028:	4611      	mov	r1, r2
   bf02a:	f7fe bd71 	b.w	bdb10 <network_ready>

000bf02e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf02e:	2200      	movs	r2, #0
   bf030:	6840      	ldr	r0, [r0, #4]
   bf032:	4611      	mov	r1, r2
   bf034:	f7fe bd8c 	b.w	bdb50 <network_listening>

000bf038 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf038:	2200      	movs	r2, #0
   bf03a:	6840      	ldr	r0, [r0, #4]
   bf03c:	4611      	mov	r1, r2
   bf03e:	f7fe bd97 	b.w	bdb70 <network_get_listen_timeout>

000bf042 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf042:	6840      	ldr	r0, [r0, #4]
   bf044:	2200      	movs	r2, #0
   bf046:	f7fe bd8b 	b.w	bdb60 <network_set_listen_timeout>

000bf04a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf04a:	6840      	ldr	r0, [r0, #4]
   bf04c:	2200      	movs	r2, #0
   bf04e:	f081 0101 	eor.w	r1, r1, #1
   bf052:	f7fe bd75 	b.w	bdb40 <network_listen>

000bf056 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf056:	2300      	movs	r3, #0
   bf058:	6840      	ldr	r0, [r0, #4]
   bf05a:	461a      	mov	r2, r3
   bf05c:	4619      	mov	r1, r3
   bf05e:	f7fe bd67 	b.w	bdb30 <network_off>

000bf062 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf062:	2300      	movs	r3, #0
   bf064:	6840      	ldr	r0, [r0, #4]
   bf066:	461a      	mov	r2, r3
   bf068:	4619      	mov	r1, r3
   bf06a:	f7fe bd59 	b.w	bdb20 <network_on>

000bf06e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf06e:	2200      	movs	r2, #0
   bf070:	6840      	ldr	r0, [r0, #4]
   bf072:	4611      	mov	r1, r2
   bf074:	f7fe bd3c 	b.w	bdaf0 <network_connecting>

000bf078 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf078:	6840      	ldr	r0, [r0, #4]
   bf07a:	2200      	movs	r2, #0
   bf07c:	2102      	movs	r1, #2
   bf07e:	f7fe bd3f 	b.w	bdb00 <network_disconnect>

000bf082 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf082:	2300      	movs	r3, #0
   bf084:	6840      	ldr	r0, [r0, #4]
   bf086:	461a      	mov	r2, r3
   bf088:	f7fe bd2a 	b.w	bdae0 <network_connect>

000bf08c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf08c:	4b08      	ldr	r3, [pc, #32]	; (bf0b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf08e:	b510      	push	{r4, lr}
   bf090:	2428      	movs	r4, #40	; 0x28
   bf092:	4622      	mov	r2, r4
   bf094:	4618      	mov	r0, r3
   bf096:	2100      	movs	r1, #0
   bf098:	f003 fb44 	bl	c2724 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf09c:	4b05      	ldr	r3, [pc, #20]	; (bf0b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf09e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf0a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf0a4:	6042      	str	r2, [r0, #4]
   bf0a6:	2204      	movs	r2, #4
   bf0a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf0aa:	4a03      	ldr	r2, [pc, #12]	; (bf0b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf0ac:	601a      	str	r2, [r3, #0]
   bf0ae:	bd10      	pop	{r4, pc}
   bf0b0:	2003e638 	.word	0x2003e638
   bf0b4:	2003e630 	.word	0x2003e630
   bf0b8:	000c5f40 	.word	0x000c5f40

000bf0bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf0bc:	4770      	bx	lr

000bf0be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf0be:	2000      	movs	r0, #0
   bf0c0:	4770      	bx	lr

000bf0c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf0c2:	b510      	push	{r4, lr}
   bf0c4:	2110      	movs	r1, #16
   bf0c6:	4604      	mov	r4, r0
   bf0c8:	f7f4 ffeb 	bl	b40a2 <_ZdlPvj>
   bf0cc:	4620      	mov	r0, r4
   bf0ce:	bd10      	pop	{r4, pc}

000bf0d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf0d0:	b508      	push	{r3, lr}
      { delete this; }
   bf0d2:	f7ff fff6 	bl	bf0c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf0d6:	bd08      	pop	{r3, pc}

000bf0d8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf0d8:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf0da:	2200      	movs	r2, #0
   bf0dc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf0e0:	6002      	str	r2, [r0, #0]
   bf0e2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf0e4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf0e6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf0e8:	680c      	ldr	r4, [r1, #0]
   bf0ea:	8085      	strh	r5, [r0, #4]
   bf0ec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf0ee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf0f0:	bd30      	pop	{r4, r5, pc}

000bf0f2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf0f2:	b510      	push	{r4, lr}
   bf0f4:	4604      	mov	r4, r0
    free((void*)msg_);
   bf0f6:	6800      	ldr	r0, [r0, #0]
   bf0f8:	f7fe fd5a 	bl	bdbb0 <free>
}
   bf0fc:	4620      	mov	r0, r4
   bf0fe:	bd10      	pop	{r4, pc}

000bf100 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf100:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf102:	68c4      	ldr	r4, [r0, #12]
   bf104:	b1f4      	cbz	r4, bf144 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf106:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf108:	2b02      	cmp	r3, #2
   bf10a:	d103      	bne.n	bf114 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf10c:	f104 000c 	add.w	r0, r4, #12
   bf110:	f7ff ffef 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf114:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf116:	b135      	cbz	r5, bf126 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf118:	4628      	mov	r0, r5
   bf11a:	f7f5 f9db 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf11e:	2110      	movs	r1, #16
   bf120:	4628      	mov	r0, r5
   bf122:	f7f4 ffbe 	bl	b40a2 <_ZdlPvj>
   bf126:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf128:	b135      	cbz	r5, bf138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf12a:	4628      	mov	r0, r5
   bf12c:	f7f5 f9d2 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
   bf130:	2110      	movs	r1, #16
   bf132:	4628      	mov	r0, r5
   bf134:	f7f4 ffb5 	bl	b40a2 <_ZdlPvj>
   bf138:	4620      	mov	r0, r4
   bf13a:	2114      	movs	r1, #20
   bf13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf140:	f7f4 bfaf 	b.w	b40a2 <_ZdlPvj>
   bf144:	bd38      	pop	{r3, r4, r5, pc}

000bf146 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bf146:	b510      	push	{r4, lr}
   bf148:	b088      	sub	sp, #32
   bf14a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bf14c:	4668      	mov	r0, sp
   bf14e:	f002 f85c 	bl	c120a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bf152:	4669      	mov	r1, sp
   bf154:	a804      	add	r0, sp, #16
   bf156:	f002 f8a3 	bl	c12a0 <_ZN6StringC1ERKS_>
   bf15a:	a804      	add	r0, sp, #16
   bf15c:	47a0      	blx	r4
   bf15e:	4604      	mov	r4, r0
   bf160:	a804      	add	r0, sp, #16
   bf162:	f002 f807 	bl	c1174 <_ZN6StringD1Ev>
    String p(param);
   bf166:	4668      	mov	r0, sp
   bf168:	f002 f804 	bl	c1174 <_ZN6StringD1Ev>
}
   bf16c:	4620      	mov	r0, r4
   bf16e:	b008      	add	sp, #32
   bf170:	bd10      	pop	{r4, pc}

000bf172 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bf172:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bf174:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bf176:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bf17a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bf17c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bf17e:	461a      	mov	r2, r3
   bf180:	4669      	mov	r1, sp
   bf182:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bf184:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bf188:	f8ad 4000 	strh.w	r4, [sp]
   bf18c:	f7fe fc70 	bl	bda70 <spark_function>
}
   bf190:	b004      	add	sp, #16
   bf192:	bd10      	pop	{r4, pc}

000bf194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf194:	680b      	ldr	r3, [r1, #0]
   bf196:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf198:	684b      	ldr	r3, [r1, #4]
   bf19a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf19c:	b113      	cbz	r3, bf1a4 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf19e:	685a      	ldr	r2, [r3, #4]
   bf1a0:	3201      	adds	r2, #1
   bf1a2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf1a4:	4770      	bx	lr

000bf1a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf1a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf1a8:	4604      	mov	r4, r0
   bf1aa:	4668      	mov	r0, sp
   bf1ac:	460d      	mov	r5, r1
   bf1ae:	f7ff fff1 	bl	bf194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf1b2:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf1b4:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf1b6:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf1b8:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf1ba:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf1bc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf1be:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf1c0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf1c2:	f7ff f9ca 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf1c6:	b135      	cbz	r5, bf1d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf1c8:	1d28      	adds	r0, r5, #4
   bf1ca:	f7ff f9c6 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf1ce:	2108      	movs	r1, #8
   bf1d0:	4628      	mov	r0, r5
   bf1d2:	f7f4 ff66 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf1d6:	4620      	mov	r0, r4
   bf1d8:	b003      	add	sp, #12
   bf1da:	bd30      	pop	{r4, r5, pc}

000bf1dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf1dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf1de:	b510      	push	{r4, lr}
      if (_M_empty())
   bf1e0:	b90a      	cbnz	r2, bf1e6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf1e2:	f002 fc2f 	bl	c1a44 <_ZSt25__throw_bad_function_callv>
    }
   bf1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf1ea:	68c3      	ldr	r3, [r0, #12]
   bf1ec:	4718      	bx	r3

000bf1ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf1ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf1f0:	6800      	ldr	r0, [r0, #0]
   bf1f2:	f100 0110 	add.w	r1, r0, #16
   bf1f6:	f7ff fff1 	bl	bf1dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf1fa:	bd08      	pop	{r3, pc}

000bf1fc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf1fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf1fe:	b510      	push	{r4, lr}
      if (_M_empty())
   bf200:	b90a      	cbnz	r2, bf206 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf202:	f002 fc1f 	bl	c1a44 <_ZSt25__throw_bad_function_callv>
    }
   bf206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf20a:	68c3      	ldr	r3, [r0, #12]
   bf20c:	4718      	bx	r3

000bf20e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf20e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf210:	6800      	ldr	r0, [r0, #0]
   bf212:	f100 0110 	add.w	r1, r0, #16
   bf216:	f7ff fff1 	bl	bf1fc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf21a:	bd08      	pop	{r3, pc}

000bf21c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf21c:	b538      	push	{r3, r4, r5, lr}
   bf21e:	2300      	movs	r3, #0
   bf220:	4604      	mov	r4, r0
   bf222:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf224:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf226:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf228:	f7f4 ff35 	bl	b4096 <_Znwj>
   bf22c:	b128      	cbz	r0, bf23a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf22e:	2301      	movs	r3, #1
   bf230:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf234:	4b02      	ldr	r3, [pc, #8]	; (bf240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf236:	6003      	str	r3, [r0, #0]
   bf238:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf23a:	6020      	str	r0, [r4, #0]
	}
   bf23c:	4620      	mov	r0, r4
   bf23e:	bd38      	pop	{r3, r4, r5, pc}
   bf240:	000c5f7c 	.word	0x000c5f7c

000bf244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf244:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf246:	2300      	movs	r3, #0
   bf248:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf24a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf24c:	4604      	mov	r4, r0
   bf24e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf250:	b12b      	cbz	r3, bf25e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf252:	2202      	movs	r2, #2
   bf254:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf256:	68eb      	ldr	r3, [r5, #12]
   bf258:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf25a:	68ab      	ldr	r3, [r5, #8]
   bf25c:	60a3      	str	r3, [r4, #8]
    }
   bf25e:	4620      	mov	r0, r4
   bf260:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf264:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf266:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf268:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf26a:	4668      	mov	r0, sp
   bf26c:	f7ff ff34 	bl	bf0d8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf270:	f04f 0302 	mov.w	r3, #2
   bf274:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf278:	2a00      	cmp	r2, #0
   bf27a:	d103      	bne.n	bf284 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf27c:	e8c4 3f41 	strexb	r1, r3, [r4]
   bf280:	2900      	cmp	r1, #0
   bf282:	d1f7      	bne.n	bf274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bf284:	d125      	bne.n	bf2d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bf286:	f104 050c 	add.w	r5, r4, #12
   bf28a:	4669      	mov	r1, sp
   bf28c:	4628      	mov	r0, r5
   bf28e:	f7ff ff23 	bl	bf0d8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bf292:	f3bf 8f5b 	dmb	ish
   bf296:	2301      	movs	r3, #1
   bf298:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf29a:	2000      	movs	r0, #0
   bf29c:	f104 0308 	add.w	r3, r4, #8
   bf2a0:	f3bf 8f5b 	dmb	ish
   bf2a4:	e853 6f00 	ldrex	r6, [r3]
   bf2a8:	e843 0200 	strex	r2, r0, [r3]
   bf2ac:	2a00      	cmp	r2, #0
   bf2ae:	d1f9      	bne.n	bf2a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bf2b0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf2b4:	b16e      	cbz	r6, bf2d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bf2b6:	f7fe fb9f 	bl	bd9f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf2ba:	b178      	cbz	r0, bf2dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf2bc:	4629      	mov	r1, r5
   bf2be:	4630      	mov	r0, r6
   bf2c0:	f7ff ff8c 	bl	bf1dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bf2c4:	4630      	mov	r0, r6
   bf2c6:	f7f5 f905 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf2ca:	2110      	movs	r1, #16
   bf2cc:	4630      	mov	r0, r6
   bf2ce:	f7f4 fee8 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bf2d2:	4668      	mov	r0, sp
   bf2d4:	f7ff ff0d 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
    }
   bf2d8:	b009      	add	sp, #36	; 0x24
   bf2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf2dc:	4631      	mov	r1, r6
   bf2de:	a802      	add	r0, sp, #8
   bf2e0:	f7ff ffb0 	bl	bf244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf2e4:	68e0      	ldr	r0, [r4, #12]
   bf2e6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf2ea:	b108      	cbz	r0, bf2f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bf2ec:	f003 fa88 	bl	c2800 <strdup>
        type_(type) {
   bf2f0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf2f2:	2010      	movs	r0, #16
   bf2f4:	f8ad 501c 	strh.w	r5, [sp, #28]
   bf2f8:	f7f4 fecd 	bl	b4096 <_Znwj>
   bf2fc:	4605      	mov	r5, r0
   bf2fe:	b1e8      	cbz	r0, bf33c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bf300:	2700      	movs	r7, #0
   bf302:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf304:	2018      	movs	r0, #24
   bf306:	f7f4 fec6 	bl	b4096 <_Znwj>
   bf30a:	4604      	mov	r4, r0
   bf30c:	b188      	cbz	r0, bf332 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bf30e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bf310:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf312:	a802      	add	r0, sp, #8
   bf314:	f7ff fbfe 	bl	beb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf318:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf31a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf31c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf31e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf320:	9204      	str	r2, [sp, #16]
   bf322:	a906      	add	r1, sp, #24
   bf324:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf326:	60e3      	str	r3, [r4, #12]
   bf328:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bf32c:	9205      	str	r2, [sp, #20]
   bf32e:	f7ff fed3 	bl	bf0d8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bf332:	4b08      	ldr	r3, [pc, #32]	; (bf354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bf334:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf336:	4b08      	ldr	r3, [pc, #32]	; (bf358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf338:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf33a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bf33c:	a806      	add	r0, sp, #24
   bf33e:	f7ff fed8 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf342:	a802      	add	r0, sp, #8
   bf344:	f7f5 f8c6 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf348:	2200      	movs	r2, #0
   bf34a:	4629      	mov	r1, r5
   bf34c:	4803      	ldr	r0, [pc, #12]	; (bf35c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bf34e:	f7fe fb5b 	bl	bda08 <application_thread_invoke>
   bf352:	e7b7      	b.n	bf2c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bf354:	000bf1ef 	.word	0x000bf1ef
   bf358:	000bf471 	.word	0x000bf471
   bf35c:	000bdc8f 	.word	0x000bdc8f

000bf360 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bf360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf364:	b08b      	sub	sp, #44	; 0x2c
   bf366:	4605      	mov	r5, r0
   bf368:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bf36c:	460f      	mov	r7, r1
   bf36e:	4690      	mov	r8, r2
   bf370:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bf372:	f7fe fb8d 	bl	bda90 <spark_cloud_flag_connected>
   bf376:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bf378:	4683      	mov	fp, r0
   bf37a:	bb38      	cbnz	r0, bf3cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bf37c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bf380:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf382:	a905      	add	r1, sp, #20
   bf384:	4630      	mov	r0, r6
   bf386:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf38a:	f7ff fea5 	bl	bf0d8 <_ZN8particle5ErrorC1EOS0_>
   bf38e:	2014      	movs	r0, #20
   bf390:	f7f4 fe81 	bl	b4096 <_Znwj>
   bf394:	4604      	mov	r4, r0
   bf396:	b148      	cbz	r0, bf3ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bf398:	2302      	movs	r3, #2
   bf39a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf39c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf39e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf3a2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bf3a4:	4631      	mov	r1, r6
   bf3a6:	300c      	adds	r0, #12
   bf3a8:	f7ff fe96 	bl	bf0d8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf3ac:	4628      	mov	r0, r5
	: __shared_count(__p)
   bf3ae:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf3b0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bf3b4:	f7ff ff32 	bl	bf21c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bf3b8:	4630      	mov	r0, r6
   bf3ba:	f7ff fe9a 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bf3be:	a805      	add	r0, sp, #20
   bf3c0:	f7ff fe97 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bf3c4:	4628      	mov	r0, r5
   bf3c6:	b00b      	add	sp, #44	; 0x2c
   bf3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bf3cc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bf3ce:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bf3d0:	2014      	movs	r0, #20
   bf3d2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bf3d6:	9307      	str	r3, [sp, #28]
   bf3d8:	f7f4 fe5d 	bl	b4096 <_Znwj>
   bf3dc:	4601      	mov	r1, r0
   bf3de:	b118      	cbz	r0, bf3e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bf3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf3e4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bf3e6:	7044      	strb	r4, [r0, #1]
   bf3e8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bf3ea:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bf3ec:	f7ff ff16 	bl	bf21c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bf3f0:	4b1e      	ldr	r3, [pc, #120]	; (bf46c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bf3f2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bf3f4:	2008      	movs	r0, #8
   bf3f6:	f7f4 fe4e 	bl	b4096 <_Znwj>
   bf3fa:	4604      	mov	r4, r0
   bf3fc:	b110      	cbz	r0, bf404 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bf3fe:	a903      	add	r1, sp, #12
   bf400:	f7ff fec8 	bl	bf194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf404:	9600      	str	r6, [sp, #0]
   bf406:	fa5f f38a 	uxtb.w	r3, sl
   bf40a:	464a      	mov	r2, r9
   bf40c:	4641      	mov	r1, r8
   bf40e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bf410:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bf412:	f7fe fb45 	bl	bdaa0 <spark_send_event>
   bf416:	b9b8      	cbnz	r0, bf448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bf418:	9b03      	ldr	r3, [sp, #12]
   bf41a:	785b      	ldrb	r3, [r3, #1]
   bf41c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bf420:	b993      	cbnz	r3, bf448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bf422:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bf426:	a905      	add	r1, sp, #20
   bf428:	a803      	add	r0, sp, #12
   bf42a:	9205      	str	r2, [sp, #20]
   bf42c:	f8ad 3018 	strh.w	r3, [sp, #24]
   bf430:	f7ff ff18 	bl	bf264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf434:	a805      	add	r0, sp, #20
   bf436:	f7ff fe5c 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bf43a:	a805      	add	r0, sp, #20
   bf43c:	9909      	ldr	r1, [sp, #36]	; 0x24
   bf43e:	f7ff feb2 	bl	bf1a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bf442:	a806      	add	r0, sp, #24
   bf444:	f7ff f889 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf448:	a903      	add	r1, sp, #12
   bf44a:	a805      	add	r0, sp, #20
   bf44c:	f7ff fea2 	bl	bf194 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf450:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf452:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf454:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bf456:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bf458:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf45a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bf45c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bf45e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bf460:	f7ff f87b 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf464:	a804      	add	r0, sp, #16
   bf466:	f7ff f878 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bf46a:	e7ab      	b.n	bf3c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bf46c:	000bf4ed 	.word	0x000bf4ed

000bf470 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bf470:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf474:	4605      	mov	r5, r0
	switch (__op)
   bf476:	d103      	bne.n	bf480 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf478:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf47a:	6003      	str	r3, [r0, #0]
      }
   bf47c:	2000      	movs	r0, #0
   bf47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bf480:	2a02      	cmp	r2, #2
   bf482:	d010      	beq.n	bf4a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bf484:	2a03      	cmp	r2, #3
   bf486:	d1f9      	bne.n	bf47c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf488:	6804      	ldr	r4, [r0, #0]
   bf48a:	2c00      	cmp	r4, #0
   bf48c:	d0f6      	beq.n	bf47c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bf48e:	f104 0010 	add.w	r0, r4, #16
   bf492:	f7ff fe2e 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bf496:	4620      	mov	r0, r4
   bf498:	f7f5 f81c 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf49c:	2118      	movs	r1, #24
   bf49e:	4620      	mov	r0, r4
   bf4a0:	f7f4 fdff 	bl	b40a2 <_ZdlPvj>
   bf4a4:	e7ea      	b.n	bf47c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf4a6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bf4a8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf4aa:	f7f4 fdf4 	bl	b4096 <_Znwj>
   bf4ae:	4604      	mov	r4, r0
   bf4b0:	b150      	cbz	r0, bf4c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bf4b2:	4631      	mov	r1, r6
   bf4b4:	f7ff fec6 	bl	bf244 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf4b8:	6930      	ldr	r0, [r6, #16]
   bf4ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf4be:	b108      	cbz	r0, bf4c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bf4c0:	f003 f99e 	bl	c2800 <strdup>
        type_(type) {
   bf4c4:	6120      	str	r0, [r4, #16]
   bf4c6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bf4c8:	602c      	str	r4, [r5, #0]
	}
   bf4ca:	e7d7      	b.n	bf47c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bf4cc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bf4cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf4ce:	2300      	movs	r3, #0
   bf4d0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf4d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf4d4:	4604      	mov	r4, r0
   bf4d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf4d8:	b12b      	cbz	r3, bf4e6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf4da:	2202      	movs	r2, #2
   bf4dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf4de:	68eb      	ldr	r3, [r5, #12]
   bf4e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf4e2:	68ab      	ldr	r3, [r5, #8]
   bf4e4:	60a3      	str	r3, [r4, #8]
    }
   bf4e6:	4620      	mov	r0, r4
   bf4e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf4ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bf4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf4ee:	b089      	sub	sp, #36	; 0x24
   bf4f0:	4604      	mov	r4, r0
   bf4f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bf4f4:	a801      	add	r0, sp, #4
   bf4f6:	4611      	mov	r1, r2
   bf4f8:	f7ff fe55 	bl	bf1a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bf4fc:	b1a4      	cbz	r4, bf528 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bf4fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf500:	b11d      	cbz	r5, bf50a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bf502:	4628      	mov	r0, r5
   bf504:	f003 f97c 	bl	c2800 <strdup>
   bf508:	4605      	mov	r5, r0
   bf50a:	a801      	add	r0, sp, #4
   bf50c:	a903      	add	r1, sp, #12
        type_(type) {
   bf50e:	9503      	str	r5, [sp, #12]
   bf510:	f8ad 4010 	strh.w	r4, [sp, #16]
   bf514:	f7ff fea6 	bl	bf264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf518:	a803      	add	r0, sp, #12
   bf51a:	f7ff fdea 	bl	bf0f2 <_ZN8particle5ErrorD1Ev>
   bf51e:	a802      	add	r0, sp, #8
   bf520:	f7ff f81b 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf524:	b009      	add	sp, #36	; 0x24
   bf526:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bf528:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf52a:	2301      	movs	r3, #1
   bf52c:	e8d5 2f4f 	ldrexb	r2, [r5]
   bf530:	2a00      	cmp	r2, #0
   bf532:	d103      	bne.n	bf53c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bf534:	e8c5 3f41 	strexb	r1, r3, [r5]
   bf538:	2900      	cmp	r1, #0
   bf53a:	d1f7      	bne.n	bf52c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bf53c:	d1ef      	bne.n	bf51e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bf53e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bf540:	f3bf 8f5b 	dmb	ish
   bf544:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf546:	1d2b      	adds	r3, r5, #4
   bf548:	f3bf 8f5b 	dmb	ish
   bf54c:	e853 6f00 	ldrex	r6, [r3]
   bf550:	e843 4200 	strex	r2, r4, [r3]
   bf554:	2a00      	cmp	r2, #0
   bf556:	d1f9      	bne.n	bf54c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bf558:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf55c:	2e00      	cmp	r6, #0
   bf55e:	d0de      	beq.n	bf51e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bf560:	4620      	mov	r0, r4
   bf562:	f7fe fa49 	bl	bd9f8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf566:	4607      	mov	r7, r0
   bf568:	b160      	cbz	r0, bf584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf56a:	f105 010c 	add.w	r1, r5, #12
   bf56e:	4630      	mov	r0, r6
   bf570:	f7ff fe44 	bl	bf1fc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bf574:	4630      	mov	r0, r6
   bf576:	f7f4 ffad 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf57a:	2110      	movs	r1, #16
   bf57c:	4630      	mov	r0, r6
   bf57e:	f7f4 fd90 	bl	b40a2 <_ZdlPvj>
   bf582:	e7cc      	b.n	bf51e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf584:	4631      	mov	r1, r6
   bf586:	a803      	add	r0, sp, #12
   bf588:	f7ff ffa0 	bl	bf4cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf58c:	7b2b      	ldrb	r3, [r5, #12]
   bf58e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf592:	2010      	movs	r0, #16
   bf594:	f7f4 fd7f 	bl	b4096 <_Znwj>
   bf598:	4605      	mov	r5, r0
   bf59a:	b1d0      	cbz	r0, bf5d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf59c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf59e:	2014      	movs	r0, #20
   bf5a0:	f7f4 fd79 	bl	b4096 <_Znwj>
   bf5a4:	4604      	mov	r4, r0
   bf5a6:	b178      	cbz	r0, bf5c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf5a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf5aa:	4601      	mov	r1, r0
   bf5ac:	a803      	add	r0, sp, #12
   bf5ae:	f7ff fab1 	bl	beb14 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf5b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf5b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf5b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf5b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf5ba:	9205      	str	r2, [sp, #20]
   bf5bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf5be:	60e3      	str	r3, [r4, #12]
   bf5c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf5c4:	9206      	str	r2, [sp, #24]
   bf5c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf5c8:	4b06      	ldr	r3, [pc, #24]	; (bf5e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf5ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf5cc:	4b06      	ldr	r3, [pc, #24]	; (bf5e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf5ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf5d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf5d2:	a803      	add	r0, sp, #12
   bf5d4:	f7f4 ff7e 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf5d8:	2200      	movs	r2, #0
   bf5da:	4629      	mov	r1, r5
   bf5dc:	4803      	ldr	r0, [pc, #12]	; (bf5ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf5de:	f7fe fa13 	bl	bda08 <application_thread_invoke>
   bf5e2:	e7c7      	b.n	bf574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf5e4:	000bf20f 	.word	0x000bf20f
   bf5e8:	000bf5f1 	.word	0x000bf5f1
   bf5ec:	000bdc8f 	.word	0x000bdc8f

000bf5f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf5f0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf5f2:	b570      	push	{r4, r5, r6, lr}
   bf5f4:	4604      	mov	r4, r0
	switch (__op)
   bf5f6:	d103      	bne.n	bf600 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf5f8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf5fa:	6003      	str	r3, [r0, #0]
      }
   bf5fc:	2000      	movs	r0, #0
   bf5fe:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf600:	2a02      	cmp	r2, #2
   bf602:	d00c      	beq.n	bf61e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf604:	2a03      	cmp	r2, #3
   bf606:	d1f9      	bne.n	bf5fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf608:	6804      	ldr	r4, [r0, #0]
   bf60a:	2c00      	cmp	r4, #0
   bf60c:	d0f6      	beq.n	bf5fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf60e:	4620      	mov	r0, r4
   bf610:	f7f4 ff60 	bl	b44d4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf614:	2114      	movs	r1, #20
   bf616:	4620      	mov	r0, r4
   bf618:	f7f4 fd43 	bl	b40a2 <_ZdlPvj>
   bf61c:	e7ee      	b.n	bf5fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf61e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf620:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf622:	f7f4 fd38 	bl	b4096 <_Znwj>
   bf626:	4605      	mov	r5, r0
   bf628:	b120      	cbz	r0, bf634 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf62a:	4631      	mov	r1, r6
   bf62c:	f7ff ff4e 	bl	bf4cc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf630:	7c33      	ldrb	r3, [r6, #16]
   bf632:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf634:	6025      	str	r5, [r4, #0]
	}
   bf636:	e7e1      	b.n	bf5fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf638 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf638:	2200      	movs	r2, #0
   bf63a:	6840      	ldr	r0, [r0, #4]
   bf63c:	4611      	mov	r1, r2
   bf63e:	f7fe ba87 	b.w	bdb50 <network_listening>

000bf642 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf642:	2200      	movs	r2, #0
   bf644:	6840      	ldr	r0, [r0, #4]
   bf646:	4611      	mov	r1, r2
   bf648:	f7fe ba92 	b.w	bdb70 <network_get_listen_timeout>

000bf64c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf64c:	6840      	ldr	r0, [r0, #4]
   bf64e:	2200      	movs	r2, #0
   bf650:	f7fe ba86 	b.w	bdb60 <network_set_listen_timeout>

000bf654 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf654:	6840      	ldr	r0, [r0, #4]
   bf656:	2200      	movs	r2, #0
   bf658:	f081 0101 	eor.w	r1, r1, #1
   bf65c:	f7fe ba70 	b.w	bdb40 <network_listen>

000bf660 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf660:	2300      	movs	r3, #0
   bf662:	6840      	ldr	r0, [r0, #4]
   bf664:	461a      	mov	r2, r3
   bf666:	4619      	mov	r1, r3
   bf668:	f7fe ba62 	b.w	bdb30 <network_off>

000bf66c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf66c:	2300      	movs	r3, #0
   bf66e:	6840      	ldr	r0, [r0, #4]
   bf670:	461a      	mov	r2, r3
   bf672:	4619      	mov	r1, r3
   bf674:	f7fe ba54 	b.w	bdb20 <network_on>

000bf678 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf678:	2200      	movs	r2, #0
   bf67a:	6840      	ldr	r0, [r0, #4]
   bf67c:	4611      	mov	r1, r2
   bf67e:	f7fe ba47 	b.w	bdb10 <network_ready>

000bf682 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf682:	2200      	movs	r2, #0
   bf684:	6840      	ldr	r0, [r0, #4]
   bf686:	4611      	mov	r1, r2
   bf688:	f7fe ba32 	b.w	bdaf0 <network_connecting>

000bf68c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf68c:	6840      	ldr	r0, [r0, #4]
   bf68e:	2200      	movs	r2, #0
   bf690:	2102      	movs	r1, #2
   bf692:	f7fe ba35 	b.w	bdb00 <network_disconnect>

000bf696 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf696:	2300      	movs	r3, #0
   bf698:	6840      	ldr	r0, [r0, #4]
   bf69a:	461a      	mov	r2, r3
   bf69c:	f7fe ba20 	b.w	bdae0 <network_connect>

000bf6a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf6a0:	4b02      	ldr	r3, [pc, #8]	; (bf6ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf6a2:	2203      	movs	r2, #3
   bf6a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf6a6:	4a02      	ldr	r2, [pc, #8]	; (bf6b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf6a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf6aa:	4770      	bx	lr
   bf6ac:	2003e660 	.word	0x2003e660
   bf6b0:	000c5f98 	.word	0x000c5f98

000bf6b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf6b4:	4770      	bx	lr

000bf6b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf6b8:	4606      	mov	r6, r0
   bf6ba:	4615      	mov	r5, r2
   bf6bc:	460c      	mov	r4, r1
   bf6be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf6c0:	42bc      	cmp	r4, r7
   bf6c2:	d006      	beq.n	bf6d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf6c4:	6833      	ldr	r3, [r6, #0]
   bf6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf6ca:	689b      	ldr	r3, [r3, #8]
   bf6cc:	4630      	mov	r0, r6
   bf6ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf6d0:	e7f6      	b.n	bf6c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf6d2:	4628      	mov	r0, r5
   bf6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf6d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf6d6:	7c00      	ldrb	r0, [r0, #16]
   bf6d8:	2200      	movs	r2, #0
   bf6da:	f7fd bffb 	b.w	bd6d4 <hal_i2c_write>

000bf6de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf6de:	7c00      	ldrb	r0, [r0, #16]
   bf6e0:	2100      	movs	r1, #0
   bf6e2:	f7fd bfff 	b.w	bd6e4 <hal_i2c_available>

000bf6e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf6e6:	7c00      	ldrb	r0, [r0, #16]
   bf6e8:	2100      	movs	r1, #0
   bf6ea:	f7fe b803 	b.w	bd6f4 <hal_i2c_read>

000bf6ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf6ee:	7c00      	ldrb	r0, [r0, #16]
   bf6f0:	2100      	movs	r1, #0
   bf6f2:	f7fe b807 	b.w	bd704 <hal_i2c_peek>

000bf6f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf6f6:	7c00      	ldrb	r0, [r0, #16]
   bf6f8:	2100      	movs	r1, #0
   bf6fa:	f7fe b80b 	b.w	bd714 <hal_i2c_flush>

000bf6fe <_ZN7TwoWireD0Ev>:
   bf6fe:	b510      	push	{r4, lr}
   bf700:	2114      	movs	r1, #20
   bf702:	4604      	mov	r4, r0
   bf704:	f7f4 fccd 	bl	b40a2 <_ZdlPvj>
   bf708:	4620      	mov	r0, r4
   bf70a:	bd10      	pop	{r4, pc}

000bf70c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf70c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf70e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf712:	4604      	mov	r4, r0
   bf714:	4608      	mov	r0, r1
   bf716:	2100      	movs	r1, #0
   bf718:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf71c:	4b03      	ldr	r3, [pc, #12]	; (bf72c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf71e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf720:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf722:	4611      	mov	r1, r2
   bf724:	f7fe f806 	bl	bd734 <hal_i2c_init>
}
   bf728:	4620      	mov	r0, r4
   bf72a:	bd10      	pop	{r4, pc}
   bf72c:	000c5fd4 	.word	0x000c5fd4

000bf730 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf730:	7c00      	ldrb	r0, [r0, #16]
   bf732:	2200      	movs	r2, #0
   bf734:	f7fd bfae 	b.w	bd694 <hal_i2c_set_speed>

000bf738 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf738:	2300      	movs	r3, #0
   bf73a:	7c00      	ldrb	r0, [r0, #16]
   bf73c:	461a      	mov	r2, r3
   bf73e:	4619      	mov	r1, r3
   bf740:	f7fd bfb0 	b.w	bd6a4 <hal_i2c_begin>

000bf744 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf746:	2200      	movs	r2, #0
   bf748:	2314      	movs	r3, #20
   bf74a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf74e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf752:	780b      	ldrb	r3, [r1, #0]
   bf754:	f88d 3008 	strb.w	r3, [sp, #8]
   bf758:	684b      	ldr	r3, [r1, #4]
   bf75a:	9303      	str	r3, [sp, #12]
   bf75c:	68cb      	ldr	r3, [r1, #12]
   bf75e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf760:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf762:	7a0b      	ldrb	r3, [r1, #8]
   bf764:	9305      	str	r3, [sp, #20]
   bf766:	a901      	add	r1, sp, #4
   bf768:	f7fd ffec 	bl	bd744 <hal_i2c_request_ex>
}
   bf76c:	b007      	add	sp, #28
   bf76e:	f85d fb04 	ldr.w	pc, [sp], #4

000bf772 <_ZN7TwoWire11requestFromEhjh>:
{
   bf772:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf774:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf776:	f88d 1000 	strb.w	r1, [sp]
   bf77a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf77e:	9103      	str	r1, [sp, #12]
   bf780:	bf18      	it	ne
   bf782:	2301      	movne	r3, #1
   bf784:	4669      	mov	r1, sp
    size_ = size;
   bf786:	9201      	str	r2, [sp, #4]
   bf788:	f88d 3008 	strb.w	r3, [sp, #8]
   bf78c:	f7ff ffda 	bl	bf744 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf790:	b005      	add	sp, #20
   bf792:	f85d fb04 	ldr.w	pc, [sp], #4

000bf796 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf796:	2301      	movs	r3, #1
   bf798:	f7ff bfeb 	b.w	bf772 <_ZN7TwoWire11requestFromEhjh>

000bf79c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf79c:	7c00      	ldrb	r0, [r0, #16]
   bf79e:	2200      	movs	r2, #0
   bf7a0:	f7fd bf88 	b.w	bd6b4 <hal_i2c_begin_transmission>

000bf7a4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf7a4:	b2c9      	uxtb	r1, r1
   bf7a6:	f7ff bff9 	b.w	bf79c <_ZN7TwoWire17beginTransmissionEh>

000bf7aa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf7aa:	7c00      	ldrb	r0, [r0, #16]
   bf7ac:	2200      	movs	r2, #0
   bf7ae:	f7fd bf89 	b.w	bd6c4 <hal_i2c_end_transmission>

000bf7b2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf7b2:	2101      	movs	r1, #1
   bf7b4:	f7ff bff9 	b.w	bf7aa <_ZN7TwoWire15endTransmissionEh>

000bf7b8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bf7b8:	4700      	bx	r0
	...

000bf7bc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bf7bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bf7c0:	2400      	movs	r4, #0
{
   bf7c2:	461d      	mov	r5, r3
   bf7c4:	460f      	mov	r7, r1
   bf7c6:	4690      	mov	r8, r2
   bf7c8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bf7ca:	f7fd ff43 	bl	bd654 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bf7ce:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bf7d0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bf7d4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bf7d8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bf7dc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bf7e0:	bfa2      	ittt	ge
   bf7e2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bf7e6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bf7ea:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bf7ec:	4907      	ldr	r1, [pc, #28]	; (bf80c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bf7ee:	9400      	str	r4, [sp, #0]
   bf7f0:	4643      	mov	r3, r8
   bf7f2:	463a      	mov	r2, r7
   bf7f4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bf7f6:	bfa8      	it	ge
   bf7f8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bf7fc:	f7fd ff22 	bl	bd644 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bf800:	fab0 f080 	clz	r0, r0
   bf804:	0940      	lsrs	r0, r0, #5
   bf806:	b004      	add	sp, #16
   bf808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf80c:	000bf7b9 	.word	0x000bf7b9

000bf810 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf810:	f7fd bf30 	b.w	bd674 <HAL_Interrupts_Disable_All>

000bf814 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf814:	f7fd bf26 	b.w	bd664 <HAL_Interrupts_Enable_All>

000bf818 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf818:	4770      	bx	lr

000bf81a <_ZN9IPAddressD0Ev>:
   bf81a:	b510      	push	{r4, lr}
   bf81c:	2118      	movs	r1, #24
   bf81e:	4604      	mov	r4, r0
   bf820:	f7f4 fc3f 	bl	b40a2 <_ZdlPvj>
   bf824:	4620      	mov	r0, r4
   bf826:	bd10      	pop	{r4, pc}

000bf828 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf828:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf82a:	7d03      	ldrb	r3, [r0, #20]
   bf82c:	2b06      	cmp	r3, #6
{
   bf82e:	b08d      	sub	sp, #52	; 0x34
   bf830:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf832:	f100 0704 	add.w	r7, r0, #4
   bf836:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf83a:	d012      	beq.n	bf862 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf83c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf840:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf844:	220a      	movs	r2, #10
   bf846:	4630      	mov	r0, r6
   bf848:	f001 fabd 	bl	c0dc6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf84c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf84e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf850:	d019      	beq.n	bf886 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf852:	2c00      	cmp	r4, #0
   bf854:	d0f4      	beq.n	bf840 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf856:	212e      	movs	r1, #46	; 0x2e
   bf858:	4630      	mov	r0, r6
   bf85a:	f001 fa95 	bl	c0d88 <_ZN5Print5printEc>
   bf85e:	4404      	add	r4, r0
   bf860:	e7ee      	b.n	bf840 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf862:	232f      	movs	r3, #47	; 0x2f
   bf864:	466a      	mov	r2, sp
   bf866:	4639      	mov	r1, r7
   bf868:	200a      	movs	r0, #10
		buf[0] = 0;
   bf86a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf86e:	f7fd ff71 	bl	bd754 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf872:	4668      	mov	r0, sp
   bf874:	f002 ffe1 	bl	c283a <strlen>
   bf878:	6833      	ldr	r3, [r6, #0]
   bf87a:	4602      	mov	r2, r0
   bf87c:	68db      	ldr	r3, [r3, #12]
   bf87e:	4669      	mov	r1, sp
   bf880:	4630      	mov	r0, r6
   bf882:	4798      	blx	r3
   bf884:	4604      	mov	r4, r0
    }
    return n;
}
   bf886:	4620      	mov	r0, r4
   bf888:	b00d      	add	sp, #52	; 0x34
   bf88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf88c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf88c:	b510      	push	{r4, lr}
   bf88e:	4b05      	ldr	r3, [pc, #20]	; (bf8a4 <_ZN9IPAddressC1Ev+0x18>)
   bf890:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf892:	2211      	movs	r2, #17
   bf894:	f840 3b04 	str.w	r3, [r0], #4
   bf898:	2100      	movs	r1, #0
   bf89a:	f002 ff43 	bl	c2724 <memset>
}
   bf89e:	4620      	mov	r0, r4
   bf8a0:	bd10      	pop	{r4, pc}
   bf8a2:	bf00      	nop
   bf8a4:	000c5ffc 	.word	0x000c5ffc

000bf8a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf8a8:	4603      	mov	r3, r0
   bf8aa:	4a07      	ldr	r2, [pc, #28]	; (bf8c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf8ac:	b510      	push	{r4, lr}
   bf8ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf8b2:	f101 0210 	add.w	r2, r1, #16
   bf8b6:	f851 4b04 	ldr.w	r4, [r1], #4
   bf8ba:	f843 4b04 	str.w	r4, [r3], #4
   bf8be:	4291      	cmp	r1, r2
   bf8c0:	d1f9      	bne.n	bf8b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf8c2:	780a      	ldrb	r2, [r1, #0]
   bf8c4:	701a      	strb	r2, [r3, #0]
}
   bf8c6:	bd10      	pop	{r4, pc}
   bf8c8:	000c5ffc 	.word	0x000c5ffc

000bf8cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf8cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf8ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf8d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf8d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf8da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf8de:	2304      	movs	r3, #4
   bf8e0:	6041      	str	r1, [r0, #4]
   bf8e2:	7503      	strb	r3, [r0, #20]
}
   bf8e4:	bd10      	pop	{r4, pc}
	...

000bf8e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf8e8:	b507      	push	{r0, r1, r2, lr}
   bf8ea:	4b06      	ldr	r3, [pc, #24]	; (bf904 <_ZN9IPAddressC1EPKh+0x1c>)
   bf8ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf8ee:	78cb      	ldrb	r3, [r1, #3]
   bf8f0:	9300      	str	r3, [sp, #0]
   bf8f2:	788b      	ldrb	r3, [r1, #2]
   bf8f4:	784a      	ldrb	r2, [r1, #1]
   bf8f6:	7809      	ldrb	r1, [r1, #0]
   bf8f8:	f7ff ffe8 	bl	bf8cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf8fc:	b003      	add	sp, #12
   bf8fe:	f85d fb04 	ldr.w	pc, [sp], #4
   bf902:	bf00      	nop
   bf904:	000c5ffc 	.word	0x000c5ffc

000bf908 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf908:	f100 0310 	add.w	r3, r0, #16
   bf90c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf90e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf912:	2901      	cmp	r1, #1
   bf914:	4618      	mov	r0, r3
   bf916:	d108      	bne.n	bf92a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf918:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf91c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf920:	3a01      	subs	r2, #1
   bf922:	f103 0310 	add.w	r3, r3, #16
   bf926:	d1f2      	bne.n	bf90e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf928:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf92a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf92c:	bf04      	itt	eq
   bf92e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf932:	1852      	addeq	r2, r2, r1
   bf934:	e7f4      	b.n	bf920 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf936 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf936:	b40e      	push	{r1, r2, r3}
   bf938:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf93a:	b088      	sub	sp, #32
   bf93c:	af00      	add	r7, sp, #0
   bf93e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf942:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf944:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf948:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf94a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf94c:	462b      	mov	r3, r5
   bf94e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf950:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf952:	f7fe f955 	bl	bdc00 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf956:	280f      	cmp	r0, #15
   bf958:	687a      	ldr	r2, [r7, #4]
   bf95a:	d91a      	bls.n	bf992 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf95c:	f100 0308 	add.w	r3, r0, #8
   bf960:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf964:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf966:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf96a:	1c41      	adds	r1, r0, #1
   bf96c:	462b      	mov	r3, r5
   bf96e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf970:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf972:	f7fe f945 	bl	bdc00 <vsnprintf>
        if (n > 0) {
   bf976:	1e02      	subs	r2, r0, #0
   bf978:	dd04      	ble.n	bf984 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf97a:	6823      	ldr	r3, [r4, #0]
   bf97c:	4669      	mov	r1, sp
   bf97e:	689b      	ldr	r3, [r3, #8]
   bf980:	4620      	mov	r0, r4
   bf982:	4798      	blx	r3
   bf984:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf986:	3720      	adds	r7, #32
   bf988:	46bd      	mov	sp, r7
   bf98a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf98e:	b003      	add	sp, #12
   bf990:	4770      	bx	lr
    } else if (n > 0) {
   bf992:	2800      	cmp	r0, #0
   bf994:	d0f7      	beq.n	bf986 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf996:	6823      	ldr	r3, [r4, #0]
   bf998:	4602      	mov	r2, r0
   bf99a:	689b      	ldr	r3, [r3, #8]
   bf99c:	f107 0110 	add.w	r1, r7, #16
   bf9a0:	4620      	mov	r0, r4
   bf9a2:	4798      	blx	r3
}
   bf9a4:	e7ef      	b.n	bf986 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf9a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf9a6:	b538      	push	{r3, r4, r5, lr}
   bf9a8:	680b      	ldr	r3, [r1, #0]
   bf9aa:	6003      	str	r3, [r0, #0]
   bf9ac:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf9ae:	6843      	ldr	r3, [r0, #4]
   bf9b0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf9b2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf9b4:	d008      	beq.n	bf9c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf9b6:	b115      	cbz	r5, bf9be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf9b8:	686b      	ldr	r3, [r5, #4]
   bf9ba:	3301      	adds	r3, #1
   bf9bc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf9be:	6860      	ldr	r0, [r4, #4]
   bf9c0:	b108      	cbz	r0, bf9c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf9c2:	f7fe fa22 	bl	bde0a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf9c6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf9c8:	bd38      	pop	{r3, r4, r5, pc}

000bf9ca <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf9ca:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf9cc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf9ce:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf9d2:	689b      	ldr	r3, [r3, #8]
   bf9d4:	2201      	movs	r2, #1
   bf9d6:	f10d 0107 	add.w	r1, sp, #7
   bf9da:	4798      	blx	r3
}
   bf9dc:	b003      	add	sp, #12
   bf9de:	f85d fb04 	ldr.w	pc, [sp], #4

000bf9e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf9e2:	460b      	mov	r3, r1
   bf9e4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf9e6:	2200      	movs	r2, #0
   bf9e8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf9ea:	e9c0 2200 	strd	r2, r2, [r0]
   bf9ee:	4604      	mov	r4, r0
        t_ = t;
   bf9f0:	6083      	str	r3, [r0, #8]
    if (t) {
   bf9f2:	b90b      	cbnz	r3, bf9f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf9f4:	4620      	mov	r0, r4
   bf9f6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf9f8:	f7ff ffd5 	bl	bf9a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf9fc:	e7fa      	b.n	bf9f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf9fe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf9fe:	6883      	ldr	r3, [r0, #8]
   bfa00:	b1eb      	cbz	r3, bfa3e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bfa02:	781a      	ldrb	r2, [r3, #0]
   bfa04:	2a03      	cmp	r2, #3
   bfa06:	d81a      	bhi.n	bfa3e <_ZNK5spark9JSONValue4typeEv+0x40>
   bfa08:	e8df f002 	tbb	[pc, r2]
   bfa0c:	1b021704 	.word	0x1b021704
   bfa10:	2005      	movs	r0, #5
   bfa12:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bfa14:	6802      	ldr	r2, [r0, #0]
   bfa16:	685b      	ldr	r3, [r3, #4]
   bfa18:	6852      	ldr	r2, [r2, #4]
   bfa1a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bfa1c:	282d      	cmp	r0, #45	; 0x2d
   bfa1e:	d012      	beq.n	bfa46 <_ZNK5spark9JSONValue4typeEv+0x48>
   bfa20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bfa24:	2b09      	cmp	r3, #9
   bfa26:	d90e      	bls.n	bfa46 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bfa28:	2874      	cmp	r0, #116	; 0x74
   bfa2a:	d00e      	beq.n	bfa4a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bfa2c:	2866      	cmp	r0, #102	; 0x66
   bfa2e:	d00c      	beq.n	bfa4a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bfa30:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bfa34:	4258      	negs	r0, r3
   bfa36:	4158      	adcs	r0, r3
   bfa38:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bfa3a:	2006      	movs	r0, #6
   bfa3c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bfa3e:	2000      	movs	r0, #0
   bfa40:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bfa42:	2004      	movs	r0, #4
   bfa44:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bfa46:	2003      	movs	r0, #3
   bfa48:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bfa4a:	2002      	movs	r0, #2
}
   bfa4c:	4770      	bx	lr

000bfa4e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bfa4e:	b510      	push	{r4, lr}
   bfa50:	4604      	mov	r4, r0
    switch (type()) {
   bfa52:	f7ff ffd4 	bl	bf9fe <_ZNK5spark9JSONValue4typeEv>
   bfa56:	2802      	cmp	r0, #2
   bfa58:	d00e      	beq.n	bfa78 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bfa5a:	1ec3      	subs	r3, r0, #3
   bfa5c:	b2db      	uxtb	r3, r3
   bfa5e:	2b01      	cmp	r3, #1
   bfa60:	d814      	bhi.n	bfa8c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bfa62:	6822      	ldr	r2, [r4, #0]
   bfa64:	68a3      	ldr	r3, [r4, #8]
   bfa66:	6850      	ldr	r0, [r2, #4]
   bfa68:	685b      	ldr	r3, [r3, #4]
}
   bfa6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bfa6e:	220a      	movs	r2, #10
   bfa70:	2100      	movs	r1, #0
   bfa72:	4418      	add	r0, r3
   bfa74:	f003 be0c 	b.w	c3690 <strtol>
        const char* const s = d_->json + t_->start;
   bfa78:	6822      	ldr	r2, [r4, #0]
   bfa7a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bfa7c:	6852      	ldr	r2, [r2, #4]
   bfa7e:	685b      	ldr	r3, [r3, #4]
   bfa80:	5cd0      	ldrb	r0, [r2, r3]
   bfa82:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bfa86:	4258      	negs	r0, r3
   bfa88:	4158      	adcs	r0, r3
}
   bfa8a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bfa8c:	2000      	movs	r0, #0
   bfa8e:	e7fc      	b.n	bfa8a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bfa90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfa90:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bfa92:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bfa94:	e9c0 3300 	strd	r3, r3, [r0]
   bfa98:	4604      	mov	r4, r0
        n_(0) {
   bfa9a:	480e      	ldr	r0, [pc, #56]	; (bfad4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bfa9c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bfaa0:	b1a9      	cbz	r1, bface <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bfaa2:	780b      	ldrb	r3, [r1, #0]
   bfaa4:	2b03      	cmp	r3, #3
   bfaa6:	d006      	beq.n	bfab6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bfaa8:	b98b      	cbnz	r3, bface <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bfaaa:	6813      	ldr	r3, [r2, #0]
   bfaac:	6858      	ldr	r0, [r3, #4]
   bfaae:	684b      	ldr	r3, [r1, #4]
   bfab0:	5cc3      	ldrb	r3, [r0, r3]
   bfab2:	2b6e      	cmp	r3, #110	; 0x6e
   bfab4:	d007      	beq.n	bfac6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bfab6:	6813      	ldr	r3, [r2, #0]
   bfab8:	684d      	ldr	r5, [r1, #4]
   bfaba:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bfabc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bfabe:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bfac0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bfac2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bfac4:	60e3      	str	r3, [r4, #12]
   bfac6:	4611      	mov	r1, r2
   bfac8:	4620      	mov	r0, r4
   bfaca:	f7ff ff6c 	bl	bf9a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bface:	4620      	mov	r0, r4
   bfad0:	bd38      	pop	{r3, r4, r5, pc}
   bfad2:	bf00      	nop
   bfad4:	000c606b 	.word	0x000c606b

000bfad8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bfad8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bfada:	2500      	movs	r5, #0
   bfadc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bfade:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bfae2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bfae6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfaea:	4604      	mov	r4, r0
   bfaec:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bfaee:	b14b      	cbz	r3, bfb04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bfaf0:	781a      	ldrb	r2, [r3, #0]
   bfaf2:	2a01      	cmp	r2, #1
   bfaf4:	d106      	bne.n	bfb04 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bfaf6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bfafa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bfafc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bfafe:	6143      	str	r3, [r0, #20]
   bfb00:	f7ff ff51 	bl	bf9a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bfb04:	4620      	mov	r0, r4
   bfb06:	bd38      	pop	{r3, r4, r5, pc}

000bfb08 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bfb08:	b510      	push	{r4, lr}
    if (!n_) {
   bfb0a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bfb0c:	4604      	mov	r4, r0
    if (!n_) {
   bfb0e:	b163      	cbz	r3, bfb2a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bfb10:	6880      	ldr	r0, [r0, #8]
   bfb12:	60e0      	str	r0, [r4, #12]
    --n_;
   bfb14:	3b01      	subs	r3, #1
    ++t_;
   bfb16:	3010      	adds	r0, #16
   bfb18:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bfb1a:	6120      	str	r0, [r4, #16]
    --n_;
   bfb1c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bfb1e:	b113      	cbz	r3, bfb26 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bfb20:	f7ff fef2 	bl	bf908 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bfb24:	60a0      	str	r0, [r4, #8]
    return true;
   bfb26:	2001      	movs	r0, #1
   bfb28:	e000      	b.n	bfb2c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bfb2a:	4618      	mov	r0, r3
}
   bfb2c:	bd10      	pop	{r4, pc}

000bfb2e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfb2e:	b510      	push	{r4, lr}
    write('}');
   bfb30:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bfb32:	4604      	mov	r4, r0
    write('}');
   bfb34:	f7ff ff49 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bfb38:	2301      	movs	r3, #1
   bfb3a:	7123      	strb	r3, [r4, #4]
}
   bfb3c:	4620      	mov	r0, r4
   bfb3e:	bd10      	pop	{r4, pc}

000bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bfb40:	b508      	push	{r3, lr}
    switch (state_) {
   bfb42:	7903      	ldrb	r3, [r0, #4]
   bfb44:	2b01      	cmp	r3, #1
   bfb46:	d002      	beq.n	bfb4e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bfb48:	2b02      	cmp	r3, #2
   bfb4a:	d004      	beq.n	bfb56 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bfb4c:	bd08      	pop	{r3, pc}
        write(',');
   bfb4e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bfb50:	f7ff ff3b 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
}
   bfb54:	e7fa      	b.n	bfb4c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bfb56:	213a      	movs	r1, #58	; 0x3a
   bfb58:	e7fa      	b.n	bfb50 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bfb5a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bfb5a:	b510      	push	{r4, lr}
   bfb5c:	4604      	mov	r4, r0
    writeSeparator();
   bfb5e:	f7ff ffef 	bl	bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bfb62:	4620      	mov	r0, r4
   bfb64:	217b      	movs	r1, #123	; 0x7b
   bfb66:	f7ff ff30 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bfb6a:	2300      	movs	r3, #0
   bfb6c:	7123      	strb	r3, [r4, #4]
}
   bfb6e:	4620      	mov	r0, r4
   bfb70:	bd10      	pop	{r4, pc}
	...

000bfb74 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bfb74:	b513      	push	{r0, r1, r4, lr}
   bfb76:	4604      	mov	r4, r0
   bfb78:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bfb7a:	f7ff ffe1 	bl	bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bfb7e:	6823      	ldr	r3, [r4, #0]
   bfb80:	9a01      	ldr	r2, [sp, #4]
   bfb82:	68db      	ldr	r3, [r3, #12]
   bfb84:	4903      	ldr	r1, [pc, #12]	; (bfb94 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bfb86:	4620      	mov	r0, r4
   bfb88:	4798      	blx	r3
    state_ = NEXT;
   bfb8a:	2301      	movs	r3, #1
}
   bfb8c:	4620      	mov	r0, r4
    state_ = NEXT;
   bfb8e:	7123      	strb	r3, [r4, #4]
}
   bfb90:	b002      	add	sp, #8
   bfb92:	bd10      	pop	{r4, pc}
   bfb94:	000c4ce9 	.word	0x000c4ce9

000bfb98 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bfb98:	b513      	push	{r0, r1, r4, lr}
   bfb9a:	4604      	mov	r4, r0
   bfb9c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bfb9e:	f7ff ffcf 	bl	bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bfba2:	6823      	ldr	r3, [r4, #0]
   bfba4:	9a01      	ldr	r2, [sp, #4]
   bfba6:	68db      	ldr	r3, [r3, #12]
   bfba8:	4903      	ldr	r1, [pc, #12]	; (bfbb8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bfbaa:	4620      	mov	r0, r4
   bfbac:	4798      	blx	r3
    state_ = NEXT;
   bfbae:	2301      	movs	r3, #1
}
   bfbb0:	4620      	mov	r0, r4
    state_ = NEXT;
   bfbb2:	7123      	strb	r3, [r4, #4]
}
   bfbb4:	b002      	add	sp, #8
   bfbb6:	bd10      	pop	{r4, pc}
   bfbb8:	000c6008 	.word	0x000c6008

000bfbbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bfbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bfbc0:	460d      	mov	r5, r1
    write('"');
   bfbc2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bfbc4:	4690      	mov	r8, r2
   bfbc6:	4604      	mov	r4, r0
    write('"');
   bfbc8:	f7ff feff 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bfbcc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bfc74 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bfbd0:	44a8      	add	r8, r5
    const char *s = str;
   bfbd2:	462f      	mov	r7, r5
    while (s != end) {
   bfbd4:	4547      	cmp	r7, r8
   bfbd6:	46ba      	mov	sl, r7
   bfbd8:	d03d      	beq.n	bfc56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bfbda:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bfbde:	2e22      	cmp	r6, #34	; 0x22
   bfbe0:	d006      	beq.n	bfbf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bfbe2:	2e5c      	cmp	r6, #92	; 0x5c
   bfbe4:	d004      	beq.n	bfbf0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bfbe6:	4630      	mov	r0, r6
   bfbe8:	f002 fd5c 	bl	c26a4 <isprint>
   bfbec:	2800      	cmp	r0, #0
   bfbee:	d1f1      	bne.n	bfbd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bfbf0:	6823      	ldr	r3, [r4, #0]
   bfbf2:	ebaa 0205 	sub.w	r2, sl, r5
   bfbf6:	689b      	ldr	r3, [r3, #8]
   bfbf8:	4629      	mov	r1, r5
   bfbfa:	4620      	mov	r0, r4
   bfbfc:	4798      	blx	r3
            write('\\');
   bfbfe:	215c      	movs	r1, #92	; 0x5c
   bfc00:	4620      	mov	r0, r4
   bfc02:	f7ff fee2 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bfc06:	2e0d      	cmp	r6, #13
   bfc08:	d80a      	bhi.n	bfc20 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bfc0a:	2e07      	cmp	r6, #7
   bfc0c:	d91c      	bls.n	bfc48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bfc0e:	f1a6 0308 	sub.w	r3, r6, #8
   bfc12:	2b05      	cmp	r3, #5
   bfc14:	d818      	bhi.n	bfc48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bfc16:	e8df f003 	tbb	[pc, r3]
   bfc1a:	0f0d      	.short	0x0f0d
   bfc1c:	15131711 	.word	0x15131711
   bfc20:	2e22      	cmp	r6, #34	; 0x22
   bfc22:	d001      	beq.n	bfc28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bfc24:	2e5c      	cmp	r6, #92	; 0x5c
   bfc26:	d10f      	bne.n	bfc48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bfc28:	4631      	mov	r1, r6
                write('b');
   bfc2a:	4620      	mov	r0, r4
   bfc2c:	f7ff fecd 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bfc30:	463d      	mov	r5, r7
    while (s != end) {
   bfc32:	e7cf      	b.n	bfbd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bfc34:	2162      	movs	r1, #98	; 0x62
   bfc36:	e7f8      	b.n	bfc2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bfc38:	2174      	movs	r1, #116	; 0x74
   bfc3a:	e7f6      	b.n	bfc2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bfc3c:	216e      	movs	r1, #110	; 0x6e
   bfc3e:	e7f4      	b.n	bfc2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bfc40:	2166      	movs	r1, #102	; 0x66
   bfc42:	e7f2      	b.n	bfc2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bfc44:	2172      	movs	r1, #114	; 0x72
   bfc46:	e7f0      	b.n	bfc2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bfc48:	6823      	ldr	r3, [r4, #0]
   bfc4a:	4632      	mov	r2, r6
   bfc4c:	68db      	ldr	r3, [r3, #12]
   bfc4e:	4649      	mov	r1, r9
   bfc50:	4620      	mov	r0, r4
   bfc52:	4798      	blx	r3
                break;
   bfc54:	e7ec      	b.n	bfc30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bfc56:	42bd      	cmp	r5, r7
   bfc58:	d005      	beq.n	bfc66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bfc5a:	6823      	ldr	r3, [r4, #0]
   bfc5c:	1b7a      	subs	r2, r7, r5
   bfc5e:	689b      	ldr	r3, [r3, #8]
   bfc60:	4629      	mov	r1, r5
   bfc62:	4620      	mov	r0, r4
   bfc64:	4798      	blx	r3
    }
    write('"');
   bfc66:	2122      	movs	r1, #34	; 0x22
   bfc68:	4620      	mov	r0, r4
   bfc6a:	f7ff feae 	bl	bf9ca <_ZN5spark10JSONWriter5writeEc>
}
   bfc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bfc72:	bf00      	nop
   bfc74:	000c600b 	.word	0x000c600b

000bfc78 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bfc78:	b513      	push	{r0, r1, r4, lr}
   bfc7a:	4604      	mov	r4, r0
   bfc7c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bfc80:	f7ff ff5e 	bl	bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bfc84:	4620      	mov	r0, r4
   bfc86:	e9dd 2100 	ldrd	r2, r1, [sp]
   bfc8a:	f7ff ff97 	bl	bfbbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bfc8e:	2302      	movs	r3, #2
}
   bfc90:	4620      	mov	r0, r4
    state_ = VALUE;
   bfc92:	7123      	strb	r3, [r4, #4]
}
   bfc94:	b002      	add	sp, #8
   bfc96:	bd10      	pop	{r4, pc}

000bfc98 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bfc98:	b513      	push	{r0, r1, r4, lr}
   bfc9a:	4604      	mov	r4, r0
   bfc9c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bfca0:	f7ff ff4e 	bl	bfb40 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bfca4:	4620      	mov	r0, r4
   bfca6:	e9dd 2100 	ldrd	r2, r1, [sp]
   bfcaa:	f7ff ff87 	bl	bfbbc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bfcae:	2301      	movs	r3, #1
}
   bfcb0:	4620      	mov	r0, r4
    state_ = NEXT;
   bfcb2:	7123      	strb	r3, [r4, #4]
}
   bfcb4:	b002      	add	sp, #8
   bfcb6:	bd10      	pop	{r4, pc}

000bfcb8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bfcb8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bfcba:	460b      	mov	r3, r1
    s->update(ticks);
   bfcbc:	6892      	ldr	r2, [r2, #8]
   bfcbe:	4601      	mov	r1, r0
   bfcc0:	4618      	mov	r0, r3
   bfcc2:	4710      	bx	r2

000bfcc4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bfcc4:	b570      	push	{r4, r5, r6, lr}
   bfcc6:	4c0e      	ldr	r4, [pc, #56]	; (bfd00 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bfcc8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bfcca:	2500      	movs	r5, #0
   bfccc:	241c      	movs	r4, #28
   bfcce:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bfcd2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bfcd6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bfcda:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bfcdc:	f004 0403 	and.w	r4, r4, #3
   bfce0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bfce4:	b2e4      	uxtb	r4, r4
   bfce6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bfce8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bfcea:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bfcec:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bfcee:	7c42      	ldrb	r2, [r0, #17]
   bfcf0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bfcf2:	bf0a      	itet	eq
   bfcf4:	4b03      	ldreq	r3, [pc, #12]	; (bfd04 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bfcf6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bfcf8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bfcfc:	bd70      	pop	{r4, r5, r6, pc}
   bfcfe:	bf00      	nop
   bfd00:	000c4ee4 	.word	0x000c4ee4
   bfd04:	000bfcb9 	.word	0x000bfcb9

000bfd08 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bfd08:	6880      	ldr	r0, [r0, #8]
   bfd0a:	6803      	ldr	r3, [r0, #0]
   bfd0c:	68db      	ldr	r3, [r3, #12]
   bfd0e:	4718      	bx	r3

000bfd10 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bfd10:	4770      	bx	lr

000bfd12 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bfd12:	4608      	mov	r0, r1
   bfd14:	b111      	cbz	r1, bfd1c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bfd16:	680b      	ldr	r3, [r1, #0]
   bfd18:	685b      	ldr	r3, [r3, #4]
   bfd1a:	4718      	bx	r3
}
   bfd1c:	4770      	bx	lr

000bfd1e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bfd1e:	4770      	bx	lr

000bfd20 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfd20:	4770      	bx	lr

000bfd22 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bfd22:	4770      	bx	lr

000bfd24 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bfd24:	4770      	bx	lr

000bfd26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bfd26:	b538      	push	{r3, r4, r5, lr}
   bfd28:	4604      	mov	r4, r0
   bfd2a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bfd2c:	6800      	ldr	r0, [r0, #0]
   bfd2e:	212e      	movs	r1, #46	; 0x2e
   bfd30:	f002 fd4a 	bl	c27c8 <strchrnul>
    size = s - category;
   bfd34:	6823      	ldr	r3, [r4, #0]
   bfd36:	1ac3      	subs	r3, r0, r3
   bfd38:	602b      	str	r3, [r5, #0]
    if (size) {
   bfd3a:	b123      	cbz	r3, bfd46 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bfd3c:	7803      	ldrb	r3, [r0, #0]
   bfd3e:	b103      	cbz	r3, bfd42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bfd40:	3001      	adds	r0, #1
   bfd42:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bfd44:	6020      	str	r0, [r4, #0]
}
   bfd46:	4618      	mov	r0, r3
   bfd48:	bd38      	pop	{r3, r4, r5, pc}

000bfd4a <_ZN5spark16JSONStreamWriterD0Ev>:
   bfd4a:	b510      	push	{r4, lr}
   bfd4c:	210c      	movs	r1, #12
   bfd4e:	4604      	mov	r4, r0
   bfd50:	f7f4 f9a7 	bl	b40a2 <_ZdlPvj>
   bfd54:	4620      	mov	r0, r4
   bfd56:	bd10      	pop	{r4, pc}

000bfd58 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bfd58:	b510      	push	{r4, lr}
   bfd5a:	2104      	movs	r1, #4
   bfd5c:	4604      	mov	r4, r0
   bfd5e:	f7f4 f9a0 	bl	b40a2 <_ZdlPvj>
   bfd62:	4620      	mov	r0, r4
   bfd64:	bd10      	pop	{r4, pc}

000bfd66 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfd66:	b510      	push	{r4, lr}
   bfd68:	2104      	movs	r1, #4
   bfd6a:	4604      	mov	r4, r0
   bfd6c:	f7f4 f999 	bl	b40a2 <_ZdlPvj>
   bfd70:	4620      	mov	r0, r4
   bfd72:	bd10      	pop	{r4, pc}

000bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bfd74:	f7fd bbf6 	b.w	bd564 <os_mutex_recursive_lock>

000bfd78 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bfd78:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bfd7a:	f002 fd2f 	bl	c27dc <strcmp>
}
   bfd7e:	fab0 f080 	clz	r0, r0
   bfd82:	0940      	lsrs	r0, r0, #5
   bfd84:	bd08      	pop	{r3, pc}

000bfd86 <__tcf_1>:
   bfd86:	4770      	bx	lr

000bfd88 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bfd88:	b510      	push	{r4, lr}
   bfd8a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bfd8c:	f001 fc86 	bl	c169c <_Z16_fetch_usbserialv>
   bfd90:	4284      	cmp	r4, r0
   bfd92:	d010      	beq.n	bfdb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bfd94:	f001 fe2e 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   bfd98:	4284      	cmp	r4, r0
   bfd9a:	d105      	bne.n	bfda8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bfd9c:	f001 fe2a 	bl	c19f4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bfda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bfda4:	f001 bc15 	b.w	c15d2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bfda8:	b12c      	cbz	r4, bfdb6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bfdaa:	6823      	ldr	r3, [r4, #0]
   bfdac:	4620      	mov	r0, r4
   bfdae:	685b      	ldr	r3, [r3, #4]
}
   bfdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bfdb4:	4718      	bx	r3
   bfdb6:	bd10      	pop	{r4, pc}

000bfdb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfdb8:	680b      	ldr	r3, [r1, #0]
   bfdba:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bfdbc:	684b      	ldr	r3, [r1, #4]
   bfdbe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bfdc0:	b113      	cbz	r3, bfdc8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bfdc2:	685a      	ldr	r2, [r3, #4]
   bfdc4:	3201      	adds	r2, #1
   bfdc6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfdc8:	4770      	bx	lr

000bfdca <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bfdca:	b513      	push	{r0, r1, r4, lr}
   bfdcc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bfdce:	4608      	mov	r0, r1
   bfdd0:	9101      	str	r1, [sp, #4]
   bfdd2:	f002 fd32 	bl	c283a <strlen>
   bfdd6:	9901      	ldr	r1, [sp, #4]
   bfdd8:	4602      	mov	r2, r0
   bfdda:	4620      	mov	r0, r4
}
   bfddc:	b002      	add	sp, #8
   bfdde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bfde2:	f7ff bf59 	b.w	bfc98 <_ZN5spark10JSONWriter5valueEPKcj>

000bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bfde6:	b513      	push	{r0, r1, r4, lr}
   bfde8:	4604      	mov	r4, r0
    write(str, strlen(str));
   bfdea:	4608      	mov	r0, r1
   bfdec:	9101      	str	r1, [sp, #4]
   bfdee:	f002 fd24 	bl	c283a <strlen>
   bfdf2:	6823      	ldr	r3, [r4, #0]
   bfdf4:	9901      	ldr	r1, [sp, #4]
   bfdf6:	68db      	ldr	r3, [r3, #12]
   bfdf8:	4602      	mov	r2, r0
   bfdfa:	4620      	mov	r0, r4
}
   bfdfc:	b002      	add	sp, #8
   bfdfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bfe02:	4718      	bx	r3

000bfe04 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bfe04:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfe06:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bfe08:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfe0c:	68db      	ldr	r3, [r3, #12]
   bfe0e:	2201      	movs	r2, #1
   bfe10:	f10d 0107 	add.w	r1, sp, #7
   bfe14:	4798      	blx	r3
}
   bfe16:	b003      	add	sp, #12
   bfe18:	f85d fb04 	ldr.w	pc, [sp], #4

000bfe1c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfe1c:	b40e      	push	{r1, r2, r3}
   bfe1e:	b503      	push	{r0, r1, lr}
   bfe20:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bfe22:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfe24:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bfe28:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bfe2a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bfe2c:	f000 ffe9 	bl	c0e02 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bfe30:	b002      	add	sp, #8
   bfe32:	f85d eb04 	ldr.w	lr, [sp], #4
   bfe36:	b003      	add	sp, #12
   bfe38:	4770      	bx	lr

000bfe3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfe3a:	680a      	ldr	r2, [r1, #0]
   bfe3c:	6002      	str	r2, [r0, #0]
   bfe3e:	684a      	ldr	r2, [r1, #4]
   bfe40:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfe42:	2200      	movs	r2, #0
   bfe44:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfe48:	b510      	push	{r4, lr}
   bfe4a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bfe4c:	688c      	ldr	r4, [r1, #8]
   bfe4e:	6084      	str	r4, [r0, #8]
   bfe50:	68cc      	ldr	r4, [r1, #12]
   bfe52:	60c4      	str	r4, [r0, #12]
   bfe54:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfe56:	608a      	str	r2, [r1, #8]
   bfe58:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bfe5a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bfe5c:	610a      	str	r2, [r1, #16]
   bfe5e:	bd10      	pop	{r4, pc}

000bfe60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfe60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bfe64:	e9d0 8400 	ldrd	r8, r4, [r0]
   bfe68:	f04f 0a14 	mov.w	sl, #20
   bfe6c:	9300      	str	r3, [sp, #0]
   bfe6e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bfe72:	4b18      	ldr	r3, [pc, #96]	; (bfed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfe74:	10a4      	asrs	r4, r4, #2
   bfe76:	4617      	mov	r7, r2
   bfe78:	435c      	muls	r4, r3
   bfe7a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bfe7c:	2c00      	cmp	r4, #0
   bfe7e:	dd21      	ble.n	bfec4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bfe80:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bfe82:	fb0a f006 	mul.w	r0, sl, r6
   bfe86:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bfe8a:	463a      	mov	r2, r7
   bfe8c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bfe90:	5828      	ldr	r0, [r5, r0]
   bfe92:	9101      	str	r1, [sp, #4]
   bfe94:	455f      	cmp	r7, fp
   bfe96:	bf28      	it	cs
   bfe98:	465a      	movcs	r2, fp
   bfe9a:	f002 fce9 	bl	c2870 <strncmp>
                if (cmp == 0) {
   bfe9e:	2800      	cmp	r0, #0
   bfea0:	9901      	ldr	r1, [sp, #4]
   bfea2:	f04f 0301 	mov.w	r3, #1
   bfea6:	d10b      	bne.n	bfec0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bfea8:	455f      	cmp	r7, fp
   bfeaa:	d103      	bne.n	bfeb4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bfeac:	9a00      	ldr	r2, [sp, #0]
   bfeae:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bfeb0:	4634      	mov	r4, r6
   bfeb2:	e7e3      	b.n	bfe7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bfeb4:	d9fc      	bls.n	bfeb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bfeb6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bfeb8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bfebc:	3e01      	subs	r6, #1
   bfebe:	e7f7      	b.n	bfeb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bfec0:	dbf9      	blt.n	bfeb6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bfec2:	e7f5      	b.n	bfeb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bfec4:	eba5 0508 	sub.w	r5, r5, r8
}
   bfec8:	4802      	ldr	r0, [pc, #8]	; (bfed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bfeca:	10ad      	asrs	r5, r5, #2
   bfecc:	4368      	muls	r0, r5
   bfece:	b003      	add	sp, #12
   bfed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bfed4:	cccccccd 	.word	0xcccccccd

000bfed8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bfeda:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bfedc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bfede:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bfee0:	b303      	cbz	r3, bff24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bfee2:	b1f9      	cbz	r1, bff24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bfee4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bfee6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bfeea:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bfeec:	a903      	add	r1, sp, #12
   bfeee:	a801      	add	r0, sp, #4
   bfef0:	f7ff ff19 	bl	bfd26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bfef4:	4601      	mov	r1, r0
   bfef6:	b1a8      	cbz	r0, bff24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bfef8:	f10d 030b 	add.w	r3, sp, #11
   bfefc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bfefe:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bff02:	4620      	mov	r0, r4
   bff04:	f7ff ffac 	bl	bfe60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bff08:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bff0c:	b153      	cbz	r3, bff24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bff0e:	6823      	ldr	r3, [r4, #0]
   bff10:	2414      	movs	r4, #20
   bff12:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bff16:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bff18:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bff1c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bff1e:	bfa8      	it	ge
   bff20:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bff22:	e7e3      	b.n	bfeec <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bff24:	4628      	mov	r0, r5
   bff26:	b004      	add	sp, #16
   bff28:	bd70      	pop	{r4, r5, r6, pc}
	...

000bff2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bff2c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bff2e:	4c09      	ldr	r4, [pc, #36]	; (bff54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bff30:	7823      	ldrb	r3, [r4, #0]
   bff32:	f3bf 8f5b 	dmb	ish
   bff36:	07db      	lsls	r3, r3, #31
   bff38:	d409      	bmi.n	bff4e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bff3a:	4620      	mov	r0, r4
   bff3c:	f7f4 f8c0 	bl	b40c0 <__cxa_guard_acquire>
   bff40:	b128      	cbz	r0, bff4e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bff42:	4620      	mov	r0, r4
   bff44:	f7f4 f8c1 	bl	b40ca <__cxa_guard_release>
   bff48:	4803      	ldr	r0, [pc, #12]	; (bff58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bff4a:	f002 fb9d 	bl	c2688 <atexit>
}
   bff4e:	4803      	ldr	r0, [pc, #12]	; (bff5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bff50:	bd10      	pop	{r4, pc}
   bff52:	bf00      	nop
   bff54:	2003e66c 	.word	0x2003e66c
   bff58:	000bfd1f 	.word	0x000bfd1f
   bff5c:	2003db2c 	.word	0x2003db2c

000bff60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bff60:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bff62:	4c09      	ldr	r4, [pc, #36]	; (bff88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bff64:	7823      	ldrb	r3, [r4, #0]
   bff66:	f3bf 8f5b 	dmb	ish
   bff6a:	07db      	lsls	r3, r3, #31
   bff6c:	d409      	bmi.n	bff82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bff6e:	4620      	mov	r0, r4
   bff70:	f7f4 f8a6 	bl	b40c0 <__cxa_guard_acquire>
   bff74:	b128      	cbz	r0, bff82 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bff76:	4620      	mov	r0, r4
   bff78:	f7f4 f8a7 	bl	b40ca <__cxa_guard_release>
   bff7c:	4803      	ldr	r0, [pc, #12]	; (bff8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bff7e:	f002 fb83 	bl	c2688 <atexit>
    return &factory;
}
   bff82:	4803      	ldr	r0, [pc, #12]	; (bff90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bff84:	bd10      	pop	{r4, pc}
   bff86:	bf00      	nop
   bff88:	2003e670 	.word	0x2003e670
   bff8c:	000bfd87 	.word	0x000bfd87
   bff90:	2003db30 	.word	0x2003db30

000bff94 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bff94:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bff96:	2500      	movs	r5, #0
   bff98:	4604      	mov	r4, r0
   bff9a:	e9c0 5500 	strd	r5, r5, [r0]
   bff9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bffa2:	6085      	str	r5, [r0, #8]
   bffa4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bffa6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bffaa:	f7fd facb 	bl	bd544 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bffae:	f7ff ffbd 	bl	bff2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bffb2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bffb4:	f7ff ffd4 	bl	bff60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bffb8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bffba:	6220      	str	r0, [r4, #32]
}
   bffbc:	4620      	mov	r0, r4
   bffbe:	bd38      	pop	{r3, r4, r5, pc}

000bffc0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bffc0:	b510      	push	{r4, lr}
    static LogManager mgr;
   bffc2:	4c0a      	ldr	r4, [pc, #40]	; (bffec <_ZN5spark10LogManager8instanceEv+0x2c>)
   bffc4:	7823      	ldrb	r3, [r4, #0]
   bffc6:	f3bf 8f5b 	dmb	ish
   bffca:	07db      	lsls	r3, r3, #31
   bffcc:	d40c      	bmi.n	bffe8 <_ZN5spark10LogManager8instanceEv+0x28>
   bffce:	4620      	mov	r0, r4
   bffd0:	f7f4 f876 	bl	b40c0 <__cxa_guard_acquire>
   bffd4:	b140      	cbz	r0, bffe8 <_ZN5spark10LogManager8instanceEv+0x28>
   bffd6:	4806      	ldr	r0, [pc, #24]	; (bfff0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bffd8:	f7ff ffdc 	bl	bff94 <_ZN5spark10LogManagerC1Ev>
   bffdc:	4620      	mov	r0, r4
   bffde:	f7f4 f874 	bl	b40ca <__cxa_guard_release>
   bffe2:	4804      	ldr	r0, [pc, #16]	; (bfff4 <_ZN5spark10LogManager8instanceEv+0x34>)
   bffe4:	f002 fb50 	bl	c2688 <atexit>
    return &mgr;
}
   bffe8:	4801      	ldr	r0, [pc, #4]	; (bfff0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bffea:	bd10      	pop	{r4, pc}
   bffec:	2003e668 	.word	0x2003e668
   bfff0:	2003e678 	.word	0x2003e678
   bfff4:	000c0515 	.word	0x000c0515

000bfff8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfff8:	4a02      	ldr	r2, [pc, #8]	; (c0004 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfffa:	4903      	ldr	r1, [pc, #12]	; (c0008 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfffc:	4803      	ldr	r0, [pc, #12]	; (c000c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfffe:	2300      	movs	r3, #0
   c0000:	f7fd bcd0 	b.w	bd9a4 <log_set_callbacks>
   c0004:	000c02f9 	.word	0x000c02f9
   c0008:	000c0285 	.word	0x000c0285
   c000c:	000c0205 	.word	0x000c0205

000c0010 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c0010:	2300      	movs	r3, #0
   c0012:	461a      	mov	r2, r3
   c0014:	4619      	mov	r1, r3
   c0016:	4618      	mov	r0, r3
   c0018:	f7fd bcc4 	b.w	bd9a4 <log_set_callbacks>

000c001c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c001c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c001e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c0020:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c0022:	4668      	mov	r0, sp
   c0024:	f7ff fec8 	bl	bfdb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c0028:	466a      	mov	r2, sp
   c002a:	4629      	mov	r1, r5
   c002c:	4620      	mov	r0, r4
   c002e:	f7ff fd53 	bl	bfad8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c0032:	a801      	add	r0, sp, #4
   c0034:	f7fe fa91 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0038:	4620      	mov	r0, r4
   c003a:	b003      	add	sp, #12
   c003c:	bd30      	pop	{r4, r5, pc}

000c003e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c003e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0040:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0042:	4604      	mov	r4, r0
   c0044:	4668      	mov	r0, sp
   c0046:	f7ff feb7 	bl	bfdb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c004a:	466a      	mov	r2, sp
   c004c:	4629      	mov	r1, r5
   c004e:	4620      	mov	r0, r4
   c0050:	f7ff fd1e 	bl	bfa90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0054:	a801      	add	r0, sp, #4
   c0056:	f7fe fa80 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c005a:	4620      	mov	r0, r4
   c005c:	b003      	add	sp, #12
   c005e:	bd30      	pop	{r4, r5, pc}

000c0060 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0060:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c0062:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0064:	4604      	mov	r4, r0
   c0066:	4668      	mov	r0, sp
   c0068:	f7ff fea6 	bl	bfdb8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c006c:	466a      	mov	r2, sp
   c006e:	4629      	mov	r1, r5
   c0070:	4620      	mov	r0, r4
   c0072:	f7ff fcb6 	bl	bf9e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0076:	a801      	add	r0, sp, #4
   c0078:	f7fe fa6f 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c007c:	4620      	mov	r0, r4
   c007e:	b003      	add	sp, #12
   c0080:	bd30      	pop	{r4, r5, pc}
	...

000c0084 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0084:	b570      	push	{r4, r5, r6, lr}
   c0086:	b08a      	sub	sp, #40	; 0x28
   c0088:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c008a:	4601      	mov	r1, r0
   c008c:	a804      	add	r0, sp, #16
   c008e:	f7ff ffc5 	bl	c001c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c0092:	4e14      	ldr	r6, [pc, #80]	; (c00e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c0094:	a804      	add	r0, sp, #16
   c0096:	f7ff fd37 	bl	bfb08 <_ZN5spark18JSONObjectIterator4nextEv>
   c009a:	b1e8      	cbz	r0, c00d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c009c:	a904      	add	r1, sp, #16
   c009e:	4668      	mov	r0, sp
   c00a0:	f7ff ffcd 	bl	c003e <_ZNK5spark18JSONObjectIterator4nameEv>
   c00a4:	9802      	ldr	r0, [sp, #8]
   c00a6:	4631      	mov	r1, r6
   c00a8:	f7ff fe66 	bl	bfd78 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c00ac:	4604      	mov	r4, r0
   c00ae:	b110      	cbz	r0, c00b6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c00b0:	1e2c      	subs	r4, r5, #0
   c00b2:	bf18      	it	ne
   c00b4:	2401      	movne	r4, #1
   c00b6:	a801      	add	r0, sp, #4
   c00b8:	f7fe fa4f 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c00bc:	2c00      	cmp	r4, #0
   c00be:	d0e9      	beq.n	c0094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c00c0:	a904      	add	r1, sp, #16
   c00c2:	4668      	mov	r0, sp
   c00c4:	f7ff ffcc 	bl	c0060 <_ZNK5spark18JSONObjectIterator5valueEv>
   c00c8:	4668      	mov	r0, sp
   c00ca:	f7ff fcc0 	bl	bfa4e <_ZNK5spark9JSONValue5toIntEv>
   c00ce:	6028      	str	r0, [r5, #0]
   c00d0:	a801      	add	r0, sp, #4
   c00d2:	f7fe fa42 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c00d6:	e7dd      	b.n	c0094 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c00d8:	a805      	add	r0, sp, #20
   c00da:	f7fe fa3e 	bl	be55a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c00de:	b00a      	add	sp, #40	; 0x28
   c00e0:	bd70      	pop	{r4, r5, r6, pc}
   c00e2:	bf00      	nop
   c00e4:	000c6011 	.word	0x000c6011

000c00e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c00e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c00ea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c00ec:	4620      	mov	r0, r4
   c00ee:	4913      	ldr	r1, [pc, #76]	; (c013c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c00f0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c00f2:	f002 fb73 	bl	c27dc <strcmp>
   c00f6:	b950      	cbnz	r0, c010e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c00f8:	f001 fad0 	bl	c169c <_Z16_fetch_usbserialv>
   c00fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c0100:	f001 fabc 	bl	c167c <_ZN9USBSerial5beginEl>
}
   c0104:	b003      	add	sp, #12
   c0106:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c010a:	f001 bac7 	b.w	c169c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c010e:	490c      	ldr	r1, [pc, #48]	; (c0140 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c0110:	4620      	mov	r0, r4
   c0112:	f002 fb63 	bl	c27dc <strcmp>
   c0116:	b978      	cbnz	r0, c0138 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c0118:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c011c:	a901      	add	r1, sp, #4
   c011e:	4628      	mov	r0, r5
        int baud = 9600;
   c0120:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c0122:	f7ff ffaf 	bl	c0084 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c0126:	f001 fc65 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   c012a:	9901      	ldr	r1, [sp, #4]
   c012c:	f001 fa4e 	bl	c15cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c0130:	f001 fc60 	bl	c19f4 <_Z22__fetch_global_Serial1v>
}
   c0134:	b003      	add	sp, #12
   c0136:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c0138:	2000      	movs	r0, #0
   c013a:	e7fb      	b.n	c0134 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c013c:	000c6016 	.word	0x000c6016
   c0140:	000c601d 	.word	0x000c601d

000c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0144:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c0146:	e9d0 5300 	ldrd	r5, r3, [r0]
   c014a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c014c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c014e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0152:	42ae      	cmp	r6, r5
   c0154:	d005      	beq.n	c0162 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c0156:	f105 0008 	add.w	r0, r5, #8
   c015a:	f7ff fff3 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c015e:	3514      	adds	r5, #20
   c0160:	e7f7      	b.n	c0152 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c0162:	6820      	ldr	r0, [r4, #0]
   c0164:	f7fd fd24 	bl	bdbb0 <free>
}
   c0168:	4620      	mov	r0, r4
   c016a:	bd70      	pop	{r4, r5, r6, pc}

000c016c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c016c:	b510      	push	{r4, lr}
   c016e:	4604      	mov	r4, r0
   c0170:	300c      	adds	r0, #12
   c0172:	f7ff ffe7 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0176:	4620      	mov	r0, r4
   c0178:	f7fe f94f 	bl	be41a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c017c:	4620      	mov	r0, r4
   c017e:	bd10      	pop	{r4, pc}

000c0180 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0180:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0182:	4b04      	ldr	r3, [pc, #16]	; (c0194 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0184:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c0186:	f840 3b04 	str.w	r3, [r0], #4
   c018a:	f7ff ffef 	bl	c016c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c018e:	4620      	mov	r0, r4
   c0190:	bd10      	pop	{r4, pc}
   c0192:	bf00      	nop
   c0194:	000c4ecc 	.word	0x000c4ecc

000c0198 <_ZN5spark16StreamLogHandlerD0Ev>:
   c0198:	b510      	push	{r4, lr}
   c019a:	4604      	mov	r4, r0
   c019c:	f7ff fff0 	bl	c0180 <_ZN5spark16StreamLogHandlerD1Ev>
   c01a0:	4620      	mov	r0, r4
   c01a2:	2124      	movs	r1, #36	; 0x24
   c01a4:	f7f3 ff7d 	bl	b40a2 <_ZdlPvj>
   c01a8:	4620      	mov	r0, r4
   c01aa:	bd10      	pop	{r4, pc}

000c01ac <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c01ac:	b510      	push	{r4, lr}
   c01ae:	4b03      	ldr	r3, [pc, #12]	; (c01bc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c01b0:	6003      	str	r3, [r0, #0]
   c01b2:	4604      	mov	r4, r0
   c01b4:	f7ff ffe4 	bl	c0180 <_ZN5spark16StreamLogHandlerD1Ev>
   c01b8:	4620      	mov	r0, r4
   c01ba:	bd10      	pop	{r4, pc}
   c01bc:	000c60b8 	.word	0x000c60b8

000c01c0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c01c0:	b510      	push	{r4, lr}
   c01c2:	4604      	mov	r4, r0
   c01c4:	f7ff fff2 	bl	c01ac <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c01c8:	4620      	mov	r0, r4
   c01ca:	2124      	movs	r1, #36	; 0x24
   c01cc:	f7f3 ff69 	bl	b40a2 <_ZdlPvj>
   c01d0:	4620      	mov	r0, r4
   c01d2:	bd10      	pop	{r4, pc}

000c01d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c01d4:	2200      	movs	r2, #0
   c01d6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c01da:	b510      	push	{r4, lr}
        capacity_(0) {
   c01dc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c01de:	680c      	ldr	r4, [r1, #0]
   c01e0:	6004      	str	r4, [r0, #0]
   c01e2:	684c      	ldr	r4, [r1, #4]
   c01e4:	6044      	str	r4, [r0, #4]
   c01e6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c01e8:	600a      	str	r2, [r1, #0]
   c01ea:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c01ec:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c01ee:	608a      	str	r2, [r1, #8]
}
   c01f0:	bd10      	pop	{r4, pc}

000c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c01f2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c01f4:	6803      	ldr	r3, [r0, #0]
   c01f6:	4604      	mov	r4, r0
   c01f8:	6818      	ldr	r0, [r3, #0]
   c01fa:	f7fd f9bb 	bl	bd574 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c01fe:	4620      	mov	r0, r4
   c0200:	bd10      	pop	{r4, pc}
	...

000c0204 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c0204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0208:	b087      	sub	sp, #28
   c020a:	4680      	mov	r8, r0
   c020c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c020e:	4b1c      	ldr	r3, [pc, #112]	; (c0280 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c0210:	685b      	ldr	r3, [r3, #4]
   c0212:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0216:	4689      	mov	r9, r1
   c0218:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c021a:	b96b      	cbnz	r3, c0238 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c021c:	f7ff fed0 	bl	bffc0 <_ZN5spark10LogManager8instanceEv>
   c0220:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0222:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c0226:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0228:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c022a:	f7ff fda3 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c022e:	7b23      	ldrb	r3, [r4, #12]
   c0230:	b12b      	cbz	r3, c023e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c0232:	a805      	add	r0, sp, #20
   c0234:	f7ff ffdd 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c0238:	b007      	add	sp, #28
   c023a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c023e:	2301      	movs	r3, #1
   c0240:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c0242:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c0246:	fa5f f989 	uxtb.w	r9, r9
   c024a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c024e:	45aa      	cmp	sl, r5
   c0250:	d012      	beq.n	c0278 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c0252:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c0256:	4631      	mov	r1, r6
   c0258:	1d38      	adds	r0, r7, #4
   c025a:	f7ff fe3d 	bl	bfed8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c025e:	4581      	cmp	r9, r0
   c0260:	d3f5      	bcc.n	c024e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c0262:	683b      	ldr	r3, [r7, #0]
   c0264:	9a03      	ldr	r2, [sp, #12]
   c0266:	9200      	str	r2, [sp, #0]
   c0268:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c026c:	464a      	mov	r2, r9
   c026e:	4633      	mov	r3, r6
   c0270:	4641      	mov	r1, r8
   c0272:	4638      	mov	r0, r7
   c0274:	47d8      	blx	fp
   c0276:	e7ea      	b.n	c024e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c0278:	2300      	movs	r3, #0
   c027a:	7323      	strb	r3, [r4, #12]
   c027c:	e7d9      	b.n	c0232 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c027e:	bf00      	nop
   c0280:	e000ed00 	.word	0xe000ed00

000c0284 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0288:	469b      	mov	fp, r3
   c028a:	4b1a      	ldr	r3, [pc, #104]	; (c02f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c028c:	685b      	ldr	r3, [r3, #4]
   c028e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0292:	4680      	mov	r8, r0
   c0294:	4689      	mov	r9, r1
   c0296:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c0298:	b96b      	cbnz	r3, c02b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c029a:	f7ff fe91 	bl	bffc0 <_ZN5spark10LogManager8instanceEv>
   c029e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c02a0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c02a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c02a6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c02a8:	f7ff fd64 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c02ac:	7b23      	ldrb	r3, [r4, #12]
   c02ae:	b12b      	cbz	r3, c02bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c02b0:	a801      	add	r0, sp, #4
   c02b2:	f7ff ff9e 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c02b6:	b003      	add	sp, #12
   c02b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c02bc:	2301      	movs	r3, #1
   c02be:	7323      	strb	r3, [r4, #12]
   c02c0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c02c4:	b2f6      	uxtb	r6, r6
   c02c6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c02ca:	4555      	cmp	r5, sl
   c02cc:	d00e      	beq.n	c02ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c02ce:	f855 7b04 	ldr.w	r7, [r5], #4
   c02d2:	4659      	mov	r1, fp
   c02d4:	1d38      	adds	r0, r7, #4
   c02d6:	f7ff fdff 	bl	bfed8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c02da:	4286      	cmp	r6, r0
   c02dc:	d3f5      	bcc.n	c02ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c02de:	683b      	ldr	r3, [r7, #0]
   c02e0:	464a      	mov	r2, r9
   c02e2:	68db      	ldr	r3, [r3, #12]
   c02e4:	4641      	mov	r1, r8
   c02e6:	4638      	mov	r0, r7
   c02e8:	4798      	blx	r3
   c02ea:	e7ee      	b.n	c02ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c02ec:	2300      	movs	r3, #0
   c02ee:	7323      	strb	r3, [r4, #12]
   c02f0:	e7de      	b.n	c02b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c02f2:	bf00      	nop
   c02f4:	e000ed00 	.word	0xe000ed00

000c02f8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c02f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c02fc:	4b16      	ldr	r3, [pc, #88]	; (c0358 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c02fe:	685b      	ldr	r3, [r3, #4]
   c0300:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0304:	4605      	mov	r5, r0
   c0306:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c0308:	bb1b      	cbnz	r3, c0352 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c030a:	f7ff fe59 	bl	bffc0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c030e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c0312:	4604      	mov	r4, r0
   c0314:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0316:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0318:	f7ff fd2c 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
   c031c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c0320:	2446      	movs	r4, #70	; 0x46
   c0322:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0326:	45b0      	cmp	r8, r6
   c0328:	d109      	bne.n	c033e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c032a:	a801      	add	r0, sp, #4
   c032c:	f7ff ff61 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0330:	42a5      	cmp	r5, r4
   c0332:	bfb4      	ite	lt
   c0334:	2000      	movlt	r0, #0
   c0336:	2001      	movge	r0, #1
}
   c0338:	b002      	add	sp, #8
   c033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c033e:	f856 0b04 	ldr.w	r0, [r6], #4
   c0342:	4639      	mov	r1, r7
   c0344:	3004      	adds	r0, #4
   c0346:	f7ff fdc7 	bl	bfed8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c034a:	4284      	cmp	r4, r0
   c034c:	bfa8      	it	ge
   c034e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0350:	e7e9      	b.n	c0326 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0352:	2000      	movs	r0, #0
   c0354:	e7f0      	b.n	c0338 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c0356:	bf00      	nop
   c0358:	e000ed00 	.word	0xe000ed00

000c035c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c035e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0362:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0364:	4604      	mov	r4, r0
   c0366:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0368:	db0d      	blt.n	c0386 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c036a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c036c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c036e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0370:	dd04      	ble.n	c037c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0372:	00b9      	lsls	r1, r7, #2
   c0374:	f7fd fc24 	bl	bdbc0 <realloc>
            if (!d) {
   c0378:	b918      	cbnz	r0, c0382 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c037a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c037c:	f7fd fc18 	bl	bdbb0 <free>
        T* d = nullptr;
   c0380:	2000      	movs	r0, #0
        data_ = d;
   c0382:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0384:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c0386:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0388:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c038a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c038e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0390:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0394:	1d08      	adds	r0, r1, #4
   c0396:	f002 f9ab 	bl	c26f0 <memmove>
    new(p) T(std::move(value));
   c039a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c039e:	6863      	ldr	r3, [r4, #4]
   c03a0:	3301      	adds	r3, #1
   c03a2:	6063      	str	r3, [r4, #4]
    return true;
   c03a4:	2001      	movs	r0, #1
   c03a6:	e7e8      	b.n	c037a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c03a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c03a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c03aa:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c03ae:	4604      	mov	r4, r0
   c03b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c03b2:	9301      	str	r3, [sp, #4]
   c03b4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c03b6:	f7ff fcdd 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c03ba:	e9d4 3200 	ldrd	r3, r2, [r4]
   c03be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c03c2:	4293      	cmp	r3, r2
   c03c4:	4619      	mov	r1, r3
   c03c6:	d00b      	beq.n	c03e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c03c8:	6809      	ldr	r1, [r1, #0]
   c03ca:	42a9      	cmp	r1, r5
   c03cc:	f103 0304 	add.w	r3, r3, #4
   c03d0:	d1f7      	bne.n	c03c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c03d2:	a801      	add	r0, sp, #4
   c03d4:	f7ff ff0d 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c03d8:	2500      	movs	r5, #0
}
   c03da:	4628      	mov	r0, r5
   c03dc:	b003      	add	sp, #12
   c03de:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c03e0:	4629      	mov	r1, r5
   c03e2:	4620      	mov	r0, r4
   c03e4:	f7ff ffba 	bl	c035c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c03e8:	4605      	mov	r5, r0
   c03ea:	2800      	cmp	r0, #0
   c03ec:	d0f1      	beq.n	c03d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c03ee:	6863      	ldr	r3, [r4, #4]
   c03f0:	2b01      	cmp	r3, #1
   c03f2:	d101      	bne.n	c03f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c03f4:	f7ff fe00 	bl	bfff8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c03f8:	a801      	add	r0, sp, #4
   c03fa:	f7ff fefa 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c03fe:	e7ec      	b.n	c03da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0400 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0400:	b570      	push	{r4, r5, r6, lr}
   c0402:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0404:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0408:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c040a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c040e:	4282      	cmp	r2, r0
   c0410:	d00f      	beq.n	c0432 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0412:	4601      	mov	r1, r0
            if (*p == value) {
   c0414:	681d      	ldr	r5, [r3, #0]
   c0416:	f851 6b04 	ldr.w	r6, [r1], #4
   c041a:	42ae      	cmp	r6, r5
   c041c:	d107      	bne.n	c042e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c041e:	1a52      	subs	r2, r2, r1
   c0420:	f002 f966 	bl	c26f0 <memmove>
    --size_;
   c0424:	6863      	ldr	r3, [r4, #4]
   c0426:	3b01      	subs	r3, #1
   c0428:	6063      	str	r3, [r4, #4]
    return true;
   c042a:	2001      	movs	r0, #1
}
   c042c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c042e:	4608      	mov	r0, r1
   c0430:	e7ed      	b.n	c040e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0432:	2000      	movs	r0, #0
   c0434:	e7fa      	b.n	c042c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0436 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0436:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0438:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c043c:	4604      	mov	r4, r0
   c043e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0440:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0442:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0444:	f7ff fc96 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0448:	a901      	add	r1, sp, #4
   c044a:	4620      	mov	r0, r4
   c044c:	f7ff ffd8 	bl	c0400 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0450:	b118      	cbz	r0, c045a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0452:	6863      	ldr	r3, [r4, #4]
   c0454:	b90b      	cbnz	r3, c045a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0456:	f7ff fddb 	bl	c0010 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c045a:	a803      	add	r0, sp, #12
   c045c:	f7ff fec9 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0460:	b004      	add	sp, #16
   c0462:	bd10      	pop	{r4, pc}

000c0464 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0464:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0466:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c046a:	2318      	movs	r3, #24
   c046c:	4604      	mov	r4, r0
   c046e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0472:	42ae      	cmp	r6, r5
   c0474:	d015      	beq.n	c04a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0476:	f105 0110 	add.w	r1, r5, #16
   c047a:	4620      	mov	r0, r4
   c047c:	f7ff ffc0 	bl	c0400 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0480:	6863      	ldr	r3, [r4, #4]
   c0482:	b90b      	cbnz	r3, c0488 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0484:	f7ff fdc4 	bl	c0010 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0488:	69e0      	ldr	r0, [r4, #28]
   c048a:	6929      	ldr	r1, [r5, #16]
   c048c:	6803      	ldr	r3, [r0, #0]
   c048e:	68db      	ldr	r3, [r3, #12]
   c0490:	4798      	blx	r3
        if (h.stream) {
   c0492:	6969      	ldr	r1, [r5, #20]
   c0494:	b119      	cbz	r1, c049e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0496:	6a20      	ldr	r0, [r4, #32]
   c0498:	6803      	ldr	r3, [r0, #0]
   c049a:	68db      	ldr	r3, [r3, #12]
   c049c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c049e:	3518      	adds	r5, #24
   c04a0:	e7e7      	b.n	c0472 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c04a2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c04a6:	2618      	movs	r6, #24
   c04a8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c04ac:	42ae      	cmp	r6, r5
   c04ae:	d004      	beq.n	c04ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c04b0:	4628      	mov	r0, r5
   c04b2:	f000 fe5f 	bl	c1174 <_ZN6StringD1Ev>
   c04b6:	3518      	adds	r5, #24
   c04b8:	e7f8      	b.n	c04ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c04ba:	2300      	movs	r3, #0
   c04bc:	6163      	str	r3, [r4, #20]
}
   c04be:	bd70      	pop	{r4, r5, r6, pc}

000c04c0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c04c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c04c2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c04c4:	f7ff fda4 	bl	c0010 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c04c8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c04cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c04ce:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c04d0:	f7ff fc50 	bl	bfd74 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c04d4:	4620      	mov	r0, r4
   c04d6:	f7ff ffc5 	bl	c0464 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c04da:	a801      	add	r0, sp, #4
   c04dc:	f7ff fe89 	bl	c01f2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c04e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c04e2:	b108      	cbz	r0, c04e8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c04e4:	f7fd f836 	bl	bd554 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c04e8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c04ec:	2618      	movs	r6, #24
   c04ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c04f2:	42ae      	cmp	r6, r5
   c04f4:	d004      	beq.n	c0500 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c04f6:	4628      	mov	r0, r5
   c04f8:	f000 fe3c 	bl	c1174 <_ZN6StringD1Ev>
   c04fc:	3518      	adds	r5, #24
   c04fe:	e7f8      	b.n	c04f2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0500:	6920      	ldr	r0, [r4, #16]
   c0502:	f7fd fb55 	bl	bdbb0 <free>
   c0506:	6820      	ldr	r0, [r4, #0]
   c0508:	f7fd fb52 	bl	bdbb0 <free>
}
   c050c:	4620      	mov	r0, r4
   c050e:	b002      	add	sp, #8
   c0510:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0514 <__tcf_2>:
    static LogManager mgr;
   c0514:	4801      	ldr	r0, [pc, #4]	; (c051c <__tcf_2+0x8>)
   c0516:	f7ff bfd3 	b.w	c04c0 <_ZN5spark10LogManagerD1Ev>
   c051a:	bf00      	nop
   c051c:	2003e678 	.word	0x2003e678

000c0520 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0520:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0524:	4604      	mov	r4, r0
   c0526:	460d      	mov	r5, r1
   c0528:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c052a:	d915      	bls.n	c0558 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c052c:	4290      	cmp	r0, r2
   c052e:	d214      	bcs.n	c055a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0530:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0534:	1a75      	subs	r5, r6, r1
   c0536:	f1a1 0714 	sub.w	r7, r1, #20
   c053a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c053c:	42b7      	cmp	r7, r6
   c053e:	d01a      	beq.n	c0576 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0540:	b11c      	cbz	r4, c054a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0542:	4631      	mov	r1, r6
   c0544:	4620      	mov	r0, r4
   c0546:	f7ff fc78 	bl	bfe3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c054a:	f106 0008 	add.w	r0, r6, #8
   c054e:	f7ff fdf9 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0552:	3e14      	subs	r6, #20
   c0554:	3c14      	subs	r4, #20
   c0556:	e7f1      	b.n	c053c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0558:	d00d      	beq.n	c0576 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c055a:	42b5      	cmp	r5, r6
   c055c:	d00b      	beq.n	c0576 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c055e:	b11c      	cbz	r4, c0568 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0560:	4629      	mov	r1, r5
   c0562:	4620      	mov	r0, r4
   c0564:	f7ff fc69 	bl	bfe3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0568:	f105 0008 	add.w	r0, r5, #8
   c056c:	f7ff fdea 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0570:	3514      	adds	r5, #20
   c0572:	3414      	adds	r4, #20
   c0574:	e7f1      	b.n	c055a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0578:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c057a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c057c:	4604      	mov	r4, r0
   c057e:	460d      	mov	r5, r1
   c0580:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0582:	d914      	bls.n	c05ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0584:	4290      	cmp	r0, r2
   c0586:	d213      	bcs.n	c05b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0588:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c058c:	1a75      	subs	r5, r6, r1
   c058e:	f1a1 0710 	sub.w	r7, r1, #16
   c0592:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0594:	42b7      	cmp	r7, r6
   c0596:	d018      	beq.n	c05ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0598:	b11c      	cbz	r4, c05a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c059a:	4631      	mov	r1, r6
   c059c:	4620      	mov	r0, r4
   c059e:	f000 fe65 	bl	c126c <_ZN6StringC1EOS_>
                end->~T();
   c05a2:	4630      	mov	r0, r6
   c05a4:	f000 fde6 	bl	c1174 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c05a8:	3e10      	subs	r6, #16
   c05aa:	3c10      	subs	r4, #16
   c05ac:	e7f2      	b.n	c0594 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c05ae:	d00c      	beq.n	c05ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c05b0:	42b5      	cmp	r5, r6
   c05b2:	d00a      	beq.n	c05ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c05b4:	b11c      	cbz	r4, c05be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c05b6:	4629      	mov	r1, r5
   c05b8:	4620      	mov	r0, r4
   c05ba:	f000 fe57 	bl	c126c <_ZN6StringC1EOS_>
                p->~T();
   c05be:	4628      	mov	r0, r5
   c05c0:	f000 fdd8 	bl	c1174 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c05c4:	3510      	adds	r5, #16
   c05c6:	3410      	adds	r4, #16
   c05c8:	e7f2      	b.n	c05b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c05ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c05cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c05cc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c05ce:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c05d0:	4605      	mov	r5, r0
        if (n > 0) {
   c05d2:	dd11      	ble.n	c05f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c05d4:	0130      	lsls	r0, r6, #4
   c05d6:	f7fd fae3 	bl	bdba0 <malloc>
            if (!d) {
   c05da:	4604      	mov	r4, r0
   c05dc:	b158      	cbz	r0, c05f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c05de:	e9d5 1200 	ldrd	r1, r2, [r5]
   c05e2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c05e6:	f7ff ffc7 	bl	c0578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c05ea:	6828      	ldr	r0, [r5, #0]
   c05ec:	f7fd fae0 	bl	bdbb0 <free>
        data_ = d;
   c05f0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c05f2:	60ae      	str	r6, [r5, #8]
        return true;
   c05f4:	2001      	movs	r0, #1
    }
   c05f6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c05f8:	2400      	movs	r4, #0
   c05fa:	e7f6      	b.n	c05ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c05fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c05fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0600:	4690      	mov	r8, r2
   c0602:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0604:	2300      	movs	r3, #0
   c0606:	9103      	str	r1, [sp, #12]
    return size_;
   c0608:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c060c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c060e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0610:	4299      	cmp	r1, r3
        capacity_(0) {
   c0612:	e9c0 3300 	strd	r3, r3, [r0]
   c0616:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c061a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c061e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0622:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0624:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0626:	dc23      	bgt.n	c0670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0628:	e9d8 5700 	ldrd	r5, r7, [r8]
   c062c:	2314      	movs	r3, #20
   c062e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0632:	42af      	cmp	r7, r5
   c0634:	d03b      	beq.n	c06ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0636:	4629      	mov	r1, r5
   c0638:	a80b      	add	r0, sp, #44	; 0x2c
   c063a:	f000 fe17 	bl	c126c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c063e:	a90b      	add	r1, sp, #44	; 0x2c
   c0640:	a80f      	add	r0, sp, #60	; 0x3c
   c0642:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0644:	f000 fe12 	bl	c126c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0648:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c064c:	4299      	cmp	r1, r3
   c064e:	da1b      	bge.n	c0688 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0650:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0652:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0654:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0658:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c065c:	4631      	mov	r1, r6
   c065e:	f106 0010 	add.w	r0, r6, #16
   c0662:	f7ff ff89 	bl	c0578 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0666:	b9ee      	cbnz	r6, c06a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c066a:	3301      	adds	r3, #1
   c066c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c066e:	e011      	b.n	c0694 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0670:	a808      	add	r0, sp, #32
   c0672:	f7ff ffab 	bl	c05cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0676:	2800      	cmp	r0, #0
   c0678:	d1d6      	bne.n	c0628 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c067a:	a808      	add	r0, sp, #32
   c067c:	f7fd fecd 	bl	be41a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0680:	4620      	mov	r0, r4
   c0682:	b015      	add	sp, #84	; 0x54
   c0684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0688:	3101      	adds	r1, #1
   c068a:	a808      	add	r0, sp, #32
   c068c:	f7ff ff9e 	bl	c05cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0690:	2800      	cmp	r0, #0
   c0692:	d1dd      	bne.n	c0650 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0694:	a80f      	add	r0, sp, #60	; 0x3c
   c0696:	f000 fd6d 	bl	c1174 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c069a:	a80b      	add	r0, sp, #44	; 0x2c
   c069c:	f000 fd6a 	bl	c1174 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c06a0:	3514      	adds	r5, #20
   c06a2:	e7c6      	b.n	c0632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c06a4:	a90f      	add	r1, sp, #60	; 0x3c
   c06a6:	4630      	mov	r0, r6
   c06a8:	f000 fde0 	bl	c126c <_ZN6StringC1EOS_>
   c06ac:	e7dc      	b.n	c0668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c06ae:	2600      	movs	r6, #0
   c06b0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c06b4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c06b6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c06ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c06be:	429e      	cmp	r6, r3
   c06c0:	da7c      	bge.n	c07bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c06c2:	0133      	lsls	r3, r6, #4
   c06c4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c06c6:	9306      	str	r3, [sp, #24]
        if (!category) {
   c06c8:	b90b      	cbnz	r3, c06ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c06ca:	3601      	adds	r6, #1
   c06cc:	e7f5      	b.n	c06ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c06ce:	2300      	movs	r3, #0
   c06d0:	9307      	str	r3, [sp, #28]
   c06d2:	fb09 f306 	mul.w	r3, r9, r6
   c06d6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c06d8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c06da:	a907      	add	r1, sp, #28
   c06dc:	a806      	add	r0, sp, #24
   c06de:	f7ff fb22 	bl	bfd26 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c06e2:	4682      	mov	sl, r0
   c06e4:	2800      	cmp	r0, #0
   c06e6:	d0f0      	beq.n	c06ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c06e8:	f04f 0300 	mov.w	r3, #0
   c06ec:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c06f0:	4601      	mov	r1, r0
   c06f2:	9a07      	ldr	r2, [sp, #28]
   c06f4:	f10d 0317 	add.w	r3, sp, #23
   c06f8:	4628      	mov	r0, r5
   c06fa:	f7ff fbb1 	bl	bfe60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c06fe:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0702:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0704:	2f00      	cmp	r7, #0
   c0706:	d14a      	bne.n	c079e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0708:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c070c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0710:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0714:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0718:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c071c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0720:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0722:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0726:	4293      	cmp	r3, r2
   c0728:	db17      	blt.n	c075a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c072a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c072e:	f1ba 0f00 	cmp.w	sl, #0
   c0732:	dd30      	ble.n	c0796 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0734:	fb09 f00a 	mul.w	r0, r9, sl
   c0738:	f7fd fa32 	bl	bdba0 <malloc>
            if (!d) {
   c073c:	4683      	mov	fp, r0
   c073e:	b360      	cbz	r0, c079a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0740:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0744:	fb09 1202 	mla	r2, r9, r2, r1
   c0748:	f7ff feea 	bl	c0520 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c074c:	6828      	ldr	r0, [r5, #0]
   c074e:	f7fd fa2f 	bl	bdbb0 <free>
        data_ = d;
   c0752:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0756:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c075a:	682b      	ldr	r3, [r5, #0]
   c075c:	9a01      	ldr	r2, [sp, #4]
   c075e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0762:	686a      	ldr	r2, [r5, #4]
   c0764:	4651      	mov	r1, sl
   c0766:	fb09 3202 	mla	r2, r9, r2, r3
   c076a:	f10a 0014 	add.w	r0, sl, #20
   c076e:	f7ff fed7 	bl	c0520 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0772:	f1ba 0f00 	cmp.w	sl, #0
   c0776:	d003      	beq.n	c0780 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0778:	a90f      	add	r1, sp, #60	; 0x3c
   c077a:	4650      	mov	r0, sl
   c077c:	f7ff fb5d 	bl	bfe3a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0780:	686b      	ldr	r3, [r5, #4]
   c0782:	3301      	adds	r3, #1
   c0784:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0786:	a811      	add	r0, sp, #68	; 0x44
   c0788:	f7ff fcdc 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c078c:	b13f      	cbz	r7, c079e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c078e:	a80b      	add	r0, sp, #44	; 0x2c
   c0790:	f7ff fcd8 	bl	c0144 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0794:	e771      	b.n	c067a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0796:	46bb      	mov	fp, r7
   c0798:	e7d8      	b.n	c074c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c079a:	2701      	movs	r7, #1
   c079c:	e7f3      	b.n	c0786 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c079e:	9b01      	ldr	r3, [sp, #4]
   c07a0:	682d      	ldr	r5, [r5, #0]
   c07a2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c07a6:	9b06      	ldr	r3, [sp, #24]
   c07a8:	781b      	ldrb	r3, [r3, #0]
   c07aa:	b92b      	cbnz	r3, c07b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c07ac:	f8d8 3000 	ldr.w	r3, [r8]
   c07b0:	9a02      	ldr	r2, [sp, #8]
   c07b2:	4413      	add	r3, r2
   c07b4:	7c1b      	ldrb	r3, [r3, #16]
   c07b6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c07b8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c07ba:	e78e      	b.n	c06da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07bc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c07be:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07c0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c07c2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07c4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c07c6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c07c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c07ca:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c07ce:	60a2      	str	r2, [r4, #8]
   c07d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c07d2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c07d6:	60e2      	str	r2, [r4, #12]
   c07d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c07da:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c07dc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c07de:	6122      	str	r2, [r4, #16]
   c07e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c07e2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c07e4:	9b03      	ldr	r3, [sp, #12]
   c07e6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c07e8:	6162      	str	r2, [r4, #20]
   c07ea:	7623      	strb	r3, [r4, #24]
   c07ec:	e7cf      	b.n	c078e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c07f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c07f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c07f2:	4604      	mov	r4, r0
   c07f4:	b087      	sub	sp, #28
   c07f6:	460d      	mov	r5, r1
        filter_(level, filters) {
   c07f8:	4626      	mov	r6, r4
        stream_(&stream) {
   c07fa:	4619      	mov	r1, r3
   c07fc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c07fe:	4617      	mov	r7, r2
        stream_(&stream) {
   c0800:	f7f5 fccc 	bl	b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0804:	4b0b      	ldr	r3, [pc, #44]	; (c0834 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0806:	f846 3b04 	str.w	r3, [r6], #4
   c080a:	4669      	mov	r1, sp
   c080c:	a803      	add	r0, sp, #12
   c080e:	f7f5 fcc5 	bl	b619c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0812:	aa03      	add	r2, sp, #12
   c0814:	4639      	mov	r1, r7
   c0816:	4630      	mov	r0, r6
   c0818:	f7ff fef0 	bl	c05fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c081c:	a803      	add	r0, sp, #12
   c081e:	f7f5 fc41 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0822:	4668      	mov	r0, sp
   c0824:	f7f5 fc3e 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0828:	4b03      	ldr	r3, [pc, #12]	; (c0838 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c082a:	6023      	str	r3, [r4, #0]
}
   c082c:	4620      	mov	r0, r4
        stream_(&stream) {
   c082e:	6225      	str	r5, [r4, #32]
}
   c0830:	b007      	add	sp, #28
   c0832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0834:	000c4ecc 	.word	0x000c4ecc
   c0838:	000c60a0 	.word	0x000c60a0

000c083c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c083c:	b5f0      	push	{r4, r5, r6, r7, lr}
   c083e:	460f      	mov	r7, r1
   c0840:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0842:	491d      	ldr	r1, [pc, #116]	; (c08b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0846:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0848:	4616      	mov	r6, r2
   c084a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c084c:	f001 ffc6 	bl	c27dc <strcmp>
   c0850:	b9c0      	cbnz	r0, c0884 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0852:	b1a4      	cbz	r4, c087e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0854:	4629      	mov	r1, r5
   c0856:	a801      	add	r0, sp, #4
   c0858:	f7ff fcbc 	bl	c01d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c085c:	4917      	ldr	r1, [pc, #92]	; (c08bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c085e:	2024      	movs	r0, #36	; 0x24
   c0860:	f001 f8ec 	bl	c1a3c <_ZnwjRKSt9nothrow_t>
   c0864:	4605      	mov	r5, r0
   c0866:	b130      	cbz	r0, c0876 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0868:	ab01      	add	r3, sp, #4
   c086a:	4632      	mov	r2, r6
   c086c:	4621      	mov	r1, r4
   c086e:	f7ff ffbf 	bl	c07f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0872:	4b13      	ldr	r3, [pc, #76]	; (c08c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0874:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0876:	a801      	add	r0, sp, #4
   c0878:	f7f5 fc14 	bl	b60a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c087c:	462c      	mov	r4, r5
}
   c087e:	4620      	mov	r0, r4
   c0880:	b005      	add	sp, #20
   c0882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0884:	490f      	ldr	r1, [pc, #60]	; (c08c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0886:	4638      	mov	r0, r7
   c0888:	f001 ffa8 	bl	c27dc <strcmp>
   c088c:	b990      	cbnz	r0, c08b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c088e:	2c00      	cmp	r4, #0
   c0890:	d0f5      	beq.n	c087e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0892:	4629      	mov	r1, r5
   c0894:	a801      	add	r0, sp, #4
   c0896:	f7ff fc9d 	bl	c01d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c089a:	4908      	ldr	r1, [pc, #32]	; (c08bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c089c:	2024      	movs	r0, #36	; 0x24
   c089e:	f001 f8cd 	bl	c1a3c <_ZnwjRKSt9nothrow_t>
   c08a2:	4605      	mov	r5, r0
   c08a4:	2800      	cmp	r0, #0
   c08a6:	d0e6      	beq.n	c0876 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c08a8:	ab01      	add	r3, sp, #4
   c08aa:	4632      	mov	r2, r6
   c08ac:	4621      	mov	r1, r4
   c08ae:	f7ff ff9f 	bl	c07f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c08b2:	e7e0      	b.n	c0876 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c08b4:	2400      	movs	r4, #0
   c08b6:	e7e2      	b.n	c087e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c08b8:	000c6025 	.word	0x000c6025
   c08bc:	000c61b8 	.word	0x000c61b8
   c08c0:	000c60b8 	.word	0x000c60b8
   c08c4:	000c6029 	.word	0x000c6029

000c08c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c08c8:	4b01      	ldr	r3, [pc, #4]	; (c08d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c08ca:	4a02      	ldr	r2, [pc, #8]	; (c08d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c08cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c08ce:	4770      	bx	lr
   c08d0:	2003e674 	.word	0x2003e674
   c08d4:	000c603a 	.word	0x000c603a

000c08d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c08d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c08dc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c08de:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c08e2:	4604      	mov	r4, r0
   c08e4:	460e      	mov	r6, r1
   c08e6:	4617      	mov	r7, r2
   c08e8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c08ea:	f000 fed7 	bl	c169c <_Z16_fetch_usbserialv>
   c08ee:	4581      	cmp	r9, r0
   c08f0:	d04c      	beq.n	c098c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c08f2:	792b      	ldrb	r3, [r5, #4]
   c08f4:	0719      	lsls	r1, r3, #28
   c08f6:	d504      	bpl.n	c0902 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c08f8:	696a      	ldr	r2, [r5, #20]
   c08fa:	4954      	ldr	r1, [pc, #336]	; (c0a4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c08fc:	4620      	mov	r0, r4
   c08fe:	f7ff fa8d 	bl	bfe1c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0902:	f1b8 0f00 	cmp.w	r8, #0
   c0906:	d00d      	beq.n	c0924 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0908:	215b      	movs	r1, #91	; 0x5b
   c090a:	4620      	mov	r0, r4
   c090c:	f7ff fa7a 	bl	bfe04 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0910:	4641      	mov	r1, r8
   c0912:	4620      	mov	r0, r4
   c0914:	f7ff fa67 	bl	bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0918:	6823      	ldr	r3, [r4, #0]
   c091a:	494d      	ldr	r1, [pc, #308]	; (c0a50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c091c:	68db      	ldr	r3, [r3, #12]
   c091e:	2202      	movs	r2, #2
   c0920:	4620      	mov	r0, r4
   c0922:	4798      	blx	r3
    if (attr.has_file) {
   c0924:	792b      	ldrb	r3, [r5, #4]
   c0926:	07da      	lsls	r2, r3, #31
   c0928:	d523      	bpl.n	c0972 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c092a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c092e:	212f      	movs	r1, #47	; 0x2f
   c0930:	4640      	mov	r0, r8
   c0932:	f001 ffd0 	bl	c28d6 <strrchr>
    if (s1) {
   c0936:	b108      	cbz	r0, c093c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c0938:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c093c:	4641      	mov	r1, r8
   c093e:	4620      	mov	r0, r4
   c0940:	f7ff fa51 	bl	bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c0944:	792b      	ldrb	r3, [r5, #4]
   c0946:	079b      	lsls	r3, r3, #30
   c0948:	d508      	bpl.n	c095c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c094a:	213a      	movs	r1, #58	; 0x3a
   c094c:	4620      	mov	r0, r4
   c094e:	f7ff fa59 	bl	bfe04 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0952:	68ea      	ldr	r2, [r5, #12]
   c0954:	493f      	ldr	r1, [pc, #252]	; (c0a54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0956:	4620      	mov	r0, r4
   c0958:	f7ff fa60 	bl	bfe1c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c095c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c095e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0960:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0964:	68db      	ldr	r3, [r3, #12]
   c0966:	bf14      	ite	ne
   c0968:	493b      	ldrne	r1, [pc, #236]	; (c0a58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c096a:	493c      	ldreq	r1, [pc, #240]	; (c0a5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c096c:	2202      	movs	r2, #2
            write(": ", 2);
   c096e:	4620      	mov	r0, r4
   c0970:	4798      	blx	r3
    if (attr.has_function) {
   c0972:	792b      	ldrb	r3, [r5, #4]
   c0974:	0758      	lsls	r0, r3, #29
   c0976:	d51d      	bpl.n	c09b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0978:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c097a:	460b      	mov	r3, r1
   c097c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c097e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0982:	b160      	cbz	r0, c099e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0984:	2820      	cmp	r0, #32
   c0986:	d108      	bne.n	c099a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0988:	4619      	mov	r1, r3
   c098a:	e7f7      	b.n	c097c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c098c:	4834      	ldr	r0, [pc, #208]	; (c0a60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c098e:	f000 f966 	bl	c0c5e <_ZN5spark12NetworkClass9listeningEv>
   c0992:	2800      	cmp	r0, #0
   c0994:	d0ad      	beq.n	c08f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c099a:	2828      	cmp	r0, #40	; 0x28
   c099c:	d1ee      	bne.n	c097c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c099e:	6823      	ldr	r3, [r4, #0]
   c09a0:	1a52      	subs	r2, r2, r1
   c09a2:	68db      	ldr	r3, [r3, #12]
   c09a4:	4620      	mov	r0, r4
   c09a6:	4798      	blx	r3
        write("(): ", 4);
   c09a8:	6823      	ldr	r3, [r4, #0]
   c09aa:	492e      	ldr	r1, [pc, #184]	; (c0a64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c09ac:	68db      	ldr	r3, [r3, #12]
   c09ae:	2204      	movs	r2, #4
   c09b0:	4620      	mov	r0, r4
   c09b2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c09b4:	2100      	movs	r1, #0
   c09b6:	4638      	mov	r0, r7
   c09b8:	f7fc ffec 	bl	bd994 <log_level_name>
   c09bc:	4601      	mov	r1, r0
    write(s);
   c09be:	4620      	mov	r0, r4
   c09c0:	f7ff fa11 	bl	bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c09c4:	6823      	ldr	r3, [r4, #0]
   c09c6:	4925      	ldr	r1, [pc, #148]	; (c0a5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c09c8:	68db      	ldr	r3, [r3, #12]
   c09ca:	2202      	movs	r2, #2
   c09cc:	4620      	mov	r0, r4
   c09ce:	4798      	blx	r3
    if (msg) {
   c09d0:	b11e      	cbz	r6, c09da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c09d2:	4631      	mov	r1, r6
   c09d4:	4620      	mov	r0, r4
   c09d6:	f7ff fa06 	bl	bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c09da:	792b      	ldrb	r3, [r5, #4]
   c09dc:	f013 0f30 	tst.w	r3, #48	; 0x30
   c09e0:	d02c      	beq.n	c0a3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c09e2:	6823      	ldr	r3, [r4, #0]
   c09e4:	4920      	ldr	r1, [pc, #128]	; (c0a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c09e6:	68db      	ldr	r3, [r3, #12]
   c09e8:	2202      	movs	r2, #2
   c09ea:	4620      	mov	r0, r4
   c09ec:	4798      	blx	r3
        if (attr.has_code) {
   c09ee:	792b      	ldrb	r3, [r5, #4]
   c09f0:	06d9      	lsls	r1, r3, #27
   c09f2:	d50a      	bpl.n	c0a0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c09f4:	6823      	ldr	r3, [r4, #0]
   c09f6:	491d      	ldr	r1, [pc, #116]	; (c0a6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c09f8:	68db      	ldr	r3, [r3, #12]
   c09fa:	2207      	movs	r2, #7
   c09fc:	4620      	mov	r0, r4
   c09fe:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0a00:	69aa      	ldr	r2, [r5, #24]
   c0a02:	491b      	ldr	r1, [pc, #108]	; (c0a70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0a04:	4620      	mov	r0, r4
   c0a06:	f7ff fa09 	bl	bfe1c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0a0a:	792b      	ldrb	r3, [r5, #4]
   c0a0c:	069a      	lsls	r2, r3, #26
   c0a0e:	d511      	bpl.n	c0a34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0a10:	06db      	lsls	r3, r3, #27
   c0a12:	d505      	bpl.n	c0a20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0a14:	6823      	ldr	r3, [r4, #0]
   c0a16:	4910      	ldr	r1, [pc, #64]	; (c0a58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0a18:	68db      	ldr	r3, [r3, #12]
   c0a1a:	2202      	movs	r2, #2
   c0a1c:	4620      	mov	r0, r4
   c0a1e:	4798      	blx	r3
            write("details = ", 10);
   c0a20:	6823      	ldr	r3, [r4, #0]
   c0a22:	4914      	ldr	r1, [pc, #80]	; (c0a74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0a24:	68db      	ldr	r3, [r3, #12]
   c0a26:	4620      	mov	r0, r4
   c0a28:	220a      	movs	r2, #10
   c0a2a:	4798      	blx	r3
            write(attr.details);
   c0a2c:	69e9      	ldr	r1, [r5, #28]
   c0a2e:	4620      	mov	r0, r4
   c0a30:	f7ff f9d9 	bl	bfde6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0a34:	215d      	movs	r1, #93	; 0x5d
   c0a36:	4620      	mov	r0, r4
   c0a38:	f7ff f9e4 	bl	bfe04 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0a3c:	6823      	ldr	r3, [r4, #0]
   c0a3e:	490e      	ldr	r1, [pc, #56]	; (c0a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0a40:	68db      	ldr	r3, [r3, #12]
   c0a42:	4620      	mov	r0, r4
   c0a44:	2202      	movs	r2, #2
}
   c0a46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0a4a:	4718      	bx	r3
   c0a4c:	000c603e 	.word	0x000c603e
   c0a50:	000c6045 	.word	0x000c6045
   c0a54:	000c4ce9 	.word	0x000c4ce9
   c0a58:	000c6048 	.word	0x000c6048
   c0a5c:	000c604d 	.word	0x000c604d
   c0a60:	2003e6a0 	.word	0x2003e6a0
   c0a64:	000c604b 	.word	0x000c604b
   c0a68:	000c6050 	.word	0x000c6050
   c0a6c:	000c6053 	.word	0x000c6053
   c0a70:	000c605b 	.word	0x000c605b
   c0a74:	000c605e 	.word	0x000c605e
   c0a78:	000c6069 	.word	0x000c6069

000c0a7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0a80:	b085      	sub	sp, #20
    return stream_;
   c0a82:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0a86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0a88:	4605      	mov	r5, r0
   c0a8a:	460f      	mov	r7, r1
   c0a8c:	4690      	mov	r8, r2
   c0a8e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0a90:	f000 fe04 	bl	c169c <_Z16_fetch_usbserialv>
   c0a94:	4581      	cmp	r9, r0
   c0a96:	d105      	bne.n	c0aa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0a98:	4849      	ldr	r0, [pc, #292]	; (c0bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0a9a:	f000 f8e0 	bl	c0c5e <_ZN5spark12NetworkClass9listeningEv>
   c0a9e:	2800      	cmp	r0, #0
   c0aa0:	f040 808a 	bne.w	c0bb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0aa4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0aa6:	4a47      	ldr	r2, [pc, #284]	; (c0bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0aa8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0aaa:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0aae:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0ab0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0ab2:	f88d 9008 	strb.w	r9, [sp, #8]
   c0ab6:	f7ff f850 	bl	bfb5a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0aba:	4649      	mov	r1, r9
   c0abc:	4640      	mov	r0, r8
   c0abe:	f7fc ff69 	bl	bd994 <log_level_name>
    json.name("l", 1).value(s);
   c0ac2:	4941      	ldr	r1, [pc, #260]	; (c0bc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0ac4:	4680      	mov	r8, r0
   c0ac6:	2201      	movs	r2, #1
   c0ac8:	a801      	add	r0, sp, #4
   c0aca:	f7ff f8d5 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0ace:	4641      	mov	r1, r8
   c0ad0:	f7ff f97b 	bl	bfdca <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0ad4:	b13f      	cbz	r7, c0ae6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0ad6:	493d      	ldr	r1, [pc, #244]	; (c0bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0ad8:	2201      	movs	r2, #1
   c0ada:	a801      	add	r0, sp, #4
   c0adc:	f7ff f8cc 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0ae0:	4639      	mov	r1, r7
   c0ae2:	f7ff f972 	bl	bfdca <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0ae6:	b13e      	cbz	r6, c0af8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0ae8:	4939      	ldr	r1, [pc, #228]	; (c0bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0aea:	2201      	movs	r2, #1
   c0aec:	a801      	add	r0, sp, #4
   c0aee:	f7ff f8c3 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0af2:	4631      	mov	r1, r6
   c0af4:	f7ff f969 	bl	bfdca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0af8:	7923      	ldrb	r3, [r4, #4]
   c0afa:	07df      	lsls	r7, r3, #31
   c0afc:	d50e      	bpl.n	c0b1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0afe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0b00:	212f      	movs	r1, #47	; 0x2f
   c0b02:	4630      	mov	r0, r6
   c0b04:	f001 fee7 	bl	c28d6 <strrchr>
    if (s1) {
   c0b08:	b100      	cbz	r0, c0b0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0b0a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0b0c:	4931      	ldr	r1, [pc, #196]	; (c0bd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0b0e:	2201      	movs	r2, #1
   c0b10:	a801      	add	r0, sp, #4
   c0b12:	f7ff f8b1 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b16:	4631      	mov	r1, r6
   c0b18:	f7ff f957 	bl	bfdca <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0b1c:	7923      	ldrb	r3, [r4, #4]
   c0b1e:	079e      	lsls	r6, r3, #30
   c0b20:	d507      	bpl.n	c0b32 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0b22:	492d      	ldr	r1, [pc, #180]	; (c0bd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0b24:	2202      	movs	r2, #2
   c0b26:	a801      	add	r0, sp, #4
   c0b28:	f7ff f8a6 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b2c:	68e1      	ldr	r1, [r4, #12]
   c0b2e:	f7ff f821 	bl	bfb74 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0b32:	7923      	ldrb	r3, [r4, #4]
   c0b34:	0758      	lsls	r0, r3, #29
   c0b36:	d514      	bpl.n	c0b62 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0b38:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0b3a:	4633      	mov	r3, r6
   c0b3c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0b42:	b12a      	cbz	r2, c0b50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0b44:	2a20      	cmp	r2, #32
   c0b46:	d101      	bne.n	c0b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0b48:	461e      	mov	r6, r3
   c0b4a:	e7f7      	b.n	c0b3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0b4c:	2a28      	cmp	r2, #40	; 0x28
   c0b4e:	d1f5      	bne.n	c0b3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0b50:	4922      	ldr	r1, [pc, #136]	; (c0bdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0b52:	2202      	movs	r2, #2
   c0b54:	a801      	add	r0, sp, #4
   c0b56:	f7ff f88f 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b5a:	1bba      	subs	r2, r7, r6
   c0b5c:	4631      	mov	r1, r6
   c0b5e:	f7ff f89b 	bl	bfc98 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0b62:	7923      	ldrb	r3, [r4, #4]
   c0b64:	0719      	lsls	r1, r3, #28
   c0b66:	d507      	bpl.n	c0b78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0b68:	491d      	ldr	r1, [pc, #116]	; (c0be0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0b6a:	2201      	movs	r2, #1
   c0b6c:	a801      	add	r0, sp, #4
   c0b6e:	f7ff f883 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b72:	6961      	ldr	r1, [r4, #20]
   c0b74:	f7ff f810 	bl	bfb98 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0b78:	7923      	ldrb	r3, [r4, #4]
   c0b7a:	06da      	lsls	r2, r3, #27
   c0b7c:	d508      	bpl.n	c0b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0b7e:	2204      	movs	r2, #4
   c0b80:	4918      	ldr	r1, [pc, #96]	; (c0be4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0b82:	eb0d 0002 	add.w	r0, sp, r2
   c0b86:	f7ff f877 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b8a:	69a1      	ldr	r1, [r4, #24]
   c0b8c:	f7fe fff2 	bl	bfb74 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0b90:	7923      	ldrb	r3, [r4, #4]
   c0b92:	069b      	lsls	r3, r3, #26
   c0b94:	d507      	bpl.n	c0ba6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0b96:	4914      	ldr	r1, [pc, #80]	; (c0be8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0b98:	2206      	movs	r2, #6
   c0b9a:	a801      	add	r0, sp, #4
   c0b9c:	f7ff f86c 	bl	bfc78 <_ZN5spark10JSONWriter4nameEPKcj>
   c0ba0:	69e1      	ldr	r1, [r4, #28]
   c0ba2:	f7ff f912 	bl	bfdca <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0ba6:	a801      	add	r0, sp, #4
   c0ba8:	f7fe ffc1 	bl	bfb2e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0bac:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0bae:	490f      	ldr	r1, [pc, #60]	; (c0bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0bb0:	6803      	ldr	r3, [r0, #0]
   c0bb2:	2202      	movs	r2, #2
   c0bb4:	68db      	ldr	r3, [r3, #12]
   c0bb6:	4798      	blx	r3
}
   c0bb8:	b005      	add	sp, #20
   c0bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0bbe:	bf00      	nop
   c0bc0:	2003e6a0 	.word	0x2003e6a0
   c0bc4:	000c6088 	.word	0x000c6088
   c0bc8:	000c601b 	.word	0x000c601b
   c0bcc:	000c606c 	.word	0x000c606c
   c0bd0:	000c655e 	.word	0x000c655e
   c0bd4:	000c4ad2 	.word	0x000c4ad2
   c0bd8:	000c606e 	.word	0x000c606e
   c0bdc:	000c6071 	.word	0x000c6071
   c0be0:	000c4cf9 	.word	0x000c4cf9
   c0be4:	000c6074 	.word	0x000c6074
   c0be8:	000c6079 	.word	0x000c6079
   c0bec:	000c6069 	.word	0x000c6069

000c0bf0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c0bf0:	2300      	movs	r3, #0
   c0bf2:	6840      	ldr	r0, [r0, #4]
   c0bf4:	461a      	mov	r2, r3
   c0bf6:	f7fc bf73 	b.w	bdae0 <network_connect>

000c0bfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c0bfa:	6840      	ldr	r0, [r0, #4]
   c0bfc:	2200      	movs	r2, #0
   c0bfe:	2102      	movs	r1, #2
   c0c00:	f7fc bf7e 	b.w	bdb00 <network_disconnect>

000c0c04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c0c04:	2200      	movs	r2, #0
   c0c06:	6840      	ldr	r0, [r0, #4]
   c0c08:	4611      	mov	r1, r2
   c0c0a:	f7fc bf71 	b.w	bdaf0 <network_connecting>

000c0c0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c0c0e:	2200      	movs	r2, #0
   c0c10:	6840      	ldr	r0, [r0, #4]
   c0c12:	4611      	mov	r1, r2
   c0c14:	f7fc bf7c 	b.w	bdb10 <network_ready>

000c0c18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c0c18:	2300      	movs	r3, #0
   c0c1a:	6840      	ldr	r0, [r0, #4]
   c0c1c:	461a      	mov	r2, r3
   c0c1e:	4619      	mov	r1, r3
   c0c20:	f7fc bf7e 	b.w	bdb20 <network_on>

000c0c24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c0c24:	2300      	movs	r3, #0
   c0c26:	6840      	ldr	r0, [r0, #4]
   c0c28:	461a      	mov	r2, r3
   c0c2a:	4619      	mov	r1, r3
   c0c2c:	f7fc bf80 	b.w	bdb30 <network_off>

000c0c30 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c0c30:	6840      	ldr	r0, [r0, #4]
   c0c32:	2100      	movs	r1, #0
   c0c34:	f7fc bfa4 	b.w	bdb80 <network_is_on>

000c0c38 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c0c38:	6840      	ldr	r0, [r0, #4]
   c0c3a:	2100      	movs	r1, #0
   c0c3c:	f7fc bfa8 	b.w	bdb90 <network_is_off>

000c0c40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c0c40:	6840      	ldr	r0, [r0, #4]
   c0c42:	2200      	movs	r2, #0
   c0c44:	f081 0101 	eor.w	r1, r1, #1
   c0c48:	f7fc bf7a 	b.w	bdb40 <network_listen>

000c0c4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c0c4c:	6840      	ldr	r0, [r0, #4]
   c0c4e:	2200      	movs	r2, #0
   c0c50:	f7fc bf86 	b.w	bdb60 <network_set_listen_timeout>

000c0c54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0c54:	2200      	movs	r2, #0
   c0c56:	6840      	ldr	r0, [r0, #4]
   c0c58:	4611      	mov	r1, r2
   c0c5a:	f7fc bf89 	b.w	bdb70 <network_get_listen_timeout>

000c0c5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c0c5e:	2200      	movs	r2, #0
   c0c60:	6840      	ldr	r0, [r0, #4]
   c0c62:	4611      	mov	r1, r2
   c0c64:	f7fc bf74 	b.w	bdb50 <network_listening>

000c0c68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0c6c:	b095      	sub	sp, #84	; 0x54
   c0c6e:	4614      	mov	r4, r2
   c0c70:	460d      	mov	r5, r1
   c0c72:	4607      	mov	r7, r0
    IPAddress addr;
   c0c74:	f7fe fe0a 	bl	bf88c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0c78:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c0c7a:	221c      	movs	r2, #28
   c0c7c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c0c7e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0c80:	f001 fd50 	bl	c2724 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0c84:	2340      	movs	r3, #64	; 0x40
   c0c86:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0c88:	4620      	mov	r0, r4
   c0c8a:	466b      	mov	r3, sp
   c0c8c:	aa0c      	add	r2, sp, #48	; 0x30
   c0c8e:	2100      	movs	r1, #0
   c0c90:	f7fc fd70 	bl	bd774 <netdb_getaddrinfo>
    if (!r) {
   c0c94:	4604      	mov	r4, r0
   c0c96:	2800      	cmp	r0, #0
   c0c98:	d14b      	bne.n	c0d32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0c9a:	4602      	mov	r2, r0
   c0c9c:	2101      	movs	r1, #1
   c0c9e:	6868      	ldr	r0, [r5, #4]
   c0ca0:	f7fc ff36 	bl	bdb10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0ca4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0ca6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0ca8:	4622      	mov	r2, r4
   c0caa:	6868      	ldr	r0, [r5, #4]
   c0cac:	f7fc ff30 	bl	bdb10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0cb0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0cb2:	4681      	mov	r9, r0
        bool ok = false;
   c0cb4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0cb6:	2e00      	cmp	r6, #0
   c0cb8:	d03b      	beq.n	c0d32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c0cba:	2900      	cmp	r1, #0
   c0cbc:	d139      	bne.n	c0d32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c0cbe:	6873      	ldr	r3, [r6, #4]
   c0cc0:	2b02      	cmp	r3, #2
   c0cc2:	d003      	beq.n	c0ccc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c0cc4:	2b0a      	cmp	r3, #10
   c0cc6:	d011      	beq.n	c0cec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0cc8:	69f6      	ldr	r6, [r6, #28]
   c0cca:	e7f4      	b.n	c0cb6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c0ccc:	f1b8 0f00 	cmp.w	r8, #0
   c0cd0:	d0fa      	beq.n	c0cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c0cd2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c0cd4:	a806      	add	r0, sp, #24
   c0cd6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c0cd8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c0cda:	f7fe fe05 	bl	bf8e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c0cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0ce0:	1d3c      	adds	r4, r7, #4
   c0ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0ce4:	682b      	ldr	r3, [r5, #0]
   c0ce6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0ce8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c0cea:	e7ed      	b.n	c0cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c0cec:	f1b9 0f00 	cmp.w	r9, #0
   c0cf0:	d0ea      	beq.n	c0cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c0cf2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c0cf4:	2210      	movs	r2, #16
   c0cf6:	a801      	add	r0, sp, #4
   c0cf8:	f001 fd14 	bl	c2724 <memset>
                    a.v = 6;
   c0cfc:	2306      	movs	r3, #6
   c0cfe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c0d02:	ad01      	add	r5, sp, #4
   c0d04:	f104 0308 	add.w	r3, r4, #8
   c0d08:	3418      	adds	r4, #24
   c0d0a:	6818      	ldr	r0, [r3, #0]
   c0d0c:	6859      	ldr	r1, [r3, #4]
   c0d0e:	462a      	mov	r2, r5
   c0d10:	c203      	stmia	r2!, {r0, r1}
   c0d12:	3308      	adds	r3, #8
   c0d14:	42a3      	cmp	r3, r4
   c0d16:	4615      	mov	r5, r2
   c0d18:	d1f7      	bne.n	c0d0a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c0d1a:	a901      	add	r1, sp, #4
   c0d1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c0d1e:	ad07      	add	r5, sp, #28
   c0d20:	f7fe fdc2 	bl	bf8a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c0d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0d26:	1d3c      	adds	r4, r7, #4
   c0d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0d2a:	682b      	ldr	r3, [r5, #0]
   c0d2c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0d2e:	4649      	mov	r1, r9
   c0d30:	e7ca      	b.n	c0cc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c0d32:	9800      	ldr	r0, [sp, #0]
   c0d34:	f7fc fd16 	bl	bd764 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c0d38:	4638      	mov	r0, r7
   c0d3a:	b015      	add	sp, #84	; 0x54
   c0d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c0d40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c0d40:	4b02      	ldr	r3, [pc, #8]	; (c0d4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c0d42:	4a03      	ldr	r2, [pc, #12]	; (c0d50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c0d44:	601a      	str	r2, [r3, #0]
   c0d46:	2200      	movs	r2, #0
   c0d48:	605a      	str	r2, [r3, #4]

} // spark
   c0d4a:	4770      	bx	lr
   c0d4c:	2003e6a0 	.word	0x2003e6a0
   c0d50:	000c6100 	.word	0x000c6100

000c0d54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0d56:	4606      	mov	r6, r0
   c0d58:	460d      	mov	r5, r1
  size_t n = 0;
   c0d5a:	188f      	adds	r7, r1, r2
   c0d5c:	2400      	movs	r4, #0
  while (size--) {
   c0d5e:	42bd      	cmp	r5, r7
   c0d60:	d00c      	beq.n	c0d7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0d62:	6833      	ldr	r3, [r6, #0]
   c0d64:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0d68:	689b      	ldr	r3, [r3, #8]
   c0d6a:	4630      	mov	r0, r6
   c0d6c:	4798      	blx	r3
     if (chunk>=0)
   c0d6e:	1e03      	subs	r3, r0, #0
   c0d70:	db01      	blt.n	c0d76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0d72:	441c      	add	r4, r3
  while (size--) {
   c0d74:	e7f3      	b.n	c0d5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0d76:	2c00      	cmp	r4, #0
   c0d78:	bf08      	it	eq
   c0d7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c0d7c:	4620      	mov	r0, r4
   c0d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0d80 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0d80:	b508      	push	{r3, lr}
  return write(str);
   c0d82:	f7f6 faf9 	bl	b7378 <_ZN5Print5writeEPKc>
}
   c0d86:	bd08      	pop	{r3, pc}

000c0d88 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0d88:	6803      	ldr	r3, [r0, #0]
   c0d8a:	689b      	ldr	r3, [r3, #8]
   c0d8c:	4718      	bx	r3

000c0d8e <_ZN5Print5printEPK19__FlashStringHelper>:
   c0d8e:	b508      	push	{r3, lr}
   c0d90:	f7f6 faf2 	bl	b7378 <_ZN5Print5writeEPKc>
   c0d94:	bd08      	pop	{r3, pc}

000c0d96 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0d96:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0d98:	210d      	movs	r1, #13
{
   c0d9a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c0d9c:	f7ff fff4 	bl	c0d88 <_ZN5Print5printEc>
  n += print('\n');
   c0da0:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0da2:	4604      	mov	r4, r0
  n += print('\n');
   c0da4:	4628      	mov	r0, r5
   c0da6:	f7ff ffef 	bl	c0d88 <_ZN5Print5printEc>
  return n;
}
   c0daa:	4420      	add	r0, r4
   c0dac:	bd38      	pop	{r3, r4, r5, pc}

000c0dae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c0dae:	b538      	push	{r3, r4, r5, lr}
   c0db0:	4605      	mov	r5, r0
  return write(str);
   c0db2:	f7f6 fae1 	bl	b7378 <_ZN5Print5writeEPKc>
   c0db6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c0db8:	4628      	mov	r0, r5
   c0dba:	f7ff ffec 	bl	c0d96 <_ZN5Print7printlnEv>
  return n;
}
   c0dbe:	4420      	add	r0, r4
   c0dc0:	bd38      	pop	{r3, r4, r5, pc}

000c0dc2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c0dc2:	f7ff bff4 	b.w	c0dae <_ZN5Print7printlnEPKc>

000c0dc6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c0dc6:	b530      	push	{r4, r5, lr}
   c0dc8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c0dca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c0dcc:	2a01      	cmp	r2, #1
  *str = '\0';
   c0dce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c0dd2:	bf98      	it	ls
   c0dd4:	220a      	movls	r2, #10
   c0dd6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c0dd8:	460d      	mov	r5, r1
   c0dda:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c0dde:	fb01 5312 	mls	r3, r1, r2, r5
   c0de2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0de6:	2b09      	cmp	r3, #9
   c0de8:	bf94      	ite	ls
   c0dea:	3330      	addls	r3, #48	; 0x30
   c0dec:	3337      	addhi	r3, #55	; 0x37
   c0dee:	b2db      	uxtb	r3, r3
  } while(n);
   c0df0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0df2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c0df6:	d9ef      	bls.n	c0dd8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c0df8:	4621      	mov	r1, r4
   c0dfa:	f7f6 fabd 	bl	b7378 <_ZN5Print5writeEPKc>
}
   c0dfe:	b00b      	add	sp, #44	; 0x2c
   c0e00:	bd30      	pop	{r4, r5, pc}

000c0e02 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c0e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0e06:	b086      	sub	sp, #24
   c0e08:	af00      	add	r7, sp, #0
   c0e0a:	4605      	mov	r5, r0
   c0e0c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c0e0e:	1d38      	adds	r0, r7, #4
   c0e10:	2114      	movs	r1, #20
{
   c0e12:	4614      	mov	r4, r2
    va_copy(args2, args);
   c0e14:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c0e16:	f7fc fef3 	bl	bdc00 <vsnprintf>

    if (n<bufsize)
   c0e1a:	2813      	cmp	r0, #19
   c0e1c:	d80e      	bhi.n	c0e3c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c0e1e:	1d39      	adds	r1, r7, #4
   c0e20:	4628      	mov	r0, r5
   c0e22:	f7f6 faa9 	bl	b7378 <_ZN5Print5writeEPKc>
   c0e26:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c0e28:	b11e      	cbz	r6, c0e32 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c0e2a:	4628      	mov	r0, r5
   c0e2c:	f7ff ffb3 	bl	c0d96 <_ZN5Print7printlnEv>
   c0e30:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c0e32:	4620      	mov	r0, r4
   c0e34:	3718      	adds	r7, #24
   c0e36:	46bd      	mov	sp, r7
   c0e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c0e3c:	f100 0308 	add.w	r3, r0, #8
   c0e40:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c0e44:	46e8      	mov	r8, sp
        char bigger[n+1];
   c0e46:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c0e4a:	4622      	mov	r2, r4
   c0e4c:	1c41      	adds	r1, r0, #1
   c0e4e:	683b      	ldr	r3, [r7, #0]
   c0e50:	4668      	mov	r0, sp
   c0e52:	f7fc fed5 	bl	bdc00 <vsnprintf>
  return write(str);
   c0e56:	4669      	mov	r1, sp
   c0e58:	4628      	mov	r0, r5
   c0e5a:	f7f6 fa8d 	bl	b7378 <_ZN5Print5writeEPKc>
   c0e5e:	4604      	mov	r4, r0
   c0e60:	46c5      	mov	sp, r8
   c0e62:	e7e1      	b.n	c0e28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0e64 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0e64:	4b01      	ldr	r3, [pc, #4]	; (c0e6c <_GLOBAL__sub_I_RGB+0x8>)
   c0e66:	2200      	movs	r2, #0
   c0e68:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0e6a:	4770      	bx	lr
   c0e6c:	2003e6a8 	.word	0x2003e6a8

000c0e70 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c0e70:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0e74:	1c53      	adds	r3, r2, #1
   c0e76:	d00b      	beq.n	c0e90 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0e78:	8843      	ldrh	r3, [r0, #2]
   c0e7a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c0e7c:	428b      	cmp	r3, r1
   c0e7e:	d803      	bhi.n	c0e88 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c0e80:	4288      	cmp	r0, r1
   c0e82:	4603      	mov	r3, r0
   c0e84:	bf28      	it	cs
   c0e86:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0e88:	4619      	mov	r1, r3
   c0e8a:	b290      	uxth	r0, r2
   c0e8c:	f7fc bc8a 	b.w	bd7a4 <HAL_Servo_Write_Pulse_Width>
}
   c0e90:	4770      	bx	lr

000c0e92 <_ZN5Servo5writeEi>:
{
   c0e92:	b513      	push	{r0, r1, r4, lr}
   c0e94:	4604      	mov	r4, r0
   c0e96:	4608      	mov	r0, r1
   c0e98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c0e9c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c0ea0:	4288      	cmp	r0, r1
   c0ea2:	db10      	blt.n	c0ec6 <_ZN5Servo5writeEi+0x34>
   c0ea4:	4290      	cmp	r0, r2
   c0ea6:	bfa8      	it	ge
   c0ea8:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0eaa:	88a3      	ldrh	r3, [r4, #4]
   c0eac:	9300      	str	r3, [sp, #0]
   c0eae:	8863      	ldrh	r3, [r4, #2]
   c0eb0:	f7fc fede 	bl	bdc70 <_Z3mapiiiii>
   c0eb4:	68e1      	ldr	r1, [r4, #12]
   c0eb6:	4401      	add	r1, r0
   c0eb8:	b289      	uxth	r1, r1
   c0eba:	4620      	mov	r0, r4
}
   c0ebc:	b002      	add	sp, #8
   c0ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0ec2:	f7ff bfd5 	b.w	c0e70 <_ZN5Servo17writeMicrosecondsEt>
   c0ec6:	4608      	mov	r0, r1
   c0ec8:	e7ef      	b.n	c0eaa <_ZN5Servo5writeEi+0x18>
	...

000c0ecc <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c0ecc:	4a04      	ldr	r2, [pc, #16]	; (c0ee0 <_ZN5Servo11resetFieldsEv+0x14>)
   c0ece:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c0ed2:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c0ed6:	23b4      	movs	r3, #180	; 0xb4
   c0ed8:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c0eda:	2300      	movs	r3, #0
   c0edc:	60c3      	str	r3, [r0, #12]
}
   c0ede:	4770      	bx	lr
   c0ee0:	0220ffff 	.word	0x0220ffff

000c0ee4 <_ZN5ServoC1Ev>:
Servo::Servo()
   c0ee4:	b508      	push	{r3, lr}
  this->resetFields();
   c0ee6:	f7ff fff1 	bl	c0ecc <_ZN5Servo11resetFieldsEv>
}
   c0eea:	bd08      	pop	{r3, pc}

000c0eec <_ZN5Servo6detachEv>:
{
   c0eec:	b510      	push	{r4, lr}
   c0eee:	4604      	mov	r4, r0
   c0ef0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c0ef4:	1c43      	adds	r3, r0, #1
   c0ef6:	d007      	beq.n	c0f08 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c0ef8:	b280      	uxth	r0, r0
   c0efa:	f7fc fc4b 	bl	bd794 <HAL_Servo_Detach>
  this->resetFields();
   c0efe:	4620      	mov	r0, r4
   c0f00:	f7ff ffe4 	bl	c0ecc <_ZN5Servo11resetFieldsEv>
  return true;
   c0f04:	2001      	movs	r0, #1
}
   c0f06:	bd10      	pop	{r4, pc}
    return false;
   c0f08:	2000      	movs	r0, #0
   c0f0a:	e7fc      	b.n	c0f06 <_ZN5Servo6detachEv+0x1a>

000c0f0c <_ZN5Servo6attachEtttss>:
{
   c0f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0f10:	460d      	mov	r5, r1
   c0f12:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0f14:	2102      	movs	r1, #2
   c0f16:	4628      	mov	r0, r5
{
   c0f18:	4690      	mov	r8, r2
   c0f1a:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c0f1c:	f7fc fb6a 	bl	bd5f4 <HAL_Validate_Pin_Function>
   c0f20:	2802      	cmp	r0, #2
   c0f22:	d003      	beq.n	c0f2c <_ZN5Servo6attachEtttss+0x20>
    return false;
   c0f24:	2600      	movs	r6, #0
}
   c0f26:	4630      	mov	r0, r6
   c0f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c0f2c:	4628      	mov	r0, r5
   c0f2e:	f000 fc77 	bl	c1820 <pinAvailable>
   c0f32:	4606      	mov	r6, r0
   c0f34:	2800      	cmp	r0, #0
   c0f36:	d0f5      	beq.n	c0f24 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c0f38:	f9b4 3000 	ldrsh.w	r3, [r4]
   c0f3c:	3301      	adds	r3, #1
   c0f3e:	d002      	beq.n	c0f46 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c0f40:	4620      	mov	r0, r4
   c0f42:	f7ff ffd3 	bl	c0eec <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c0f46:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c0f4a:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c0f4c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0f50:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0f52:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0f56:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0f58:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c0f5a:	4628      	mov	r0, r5
   c0f5c:	f7fc fc12 	bl	bd784 <HAL_Servo_Attach>
  return true;
   c0f60:	e7e1      	b.n	c0f26 <_ZN5Servo6attachEtttss+0x1a>

000c0f62 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0f62:	2100      	movs	r1, #0
   c0f64:	f7fc bc6e 	b.w	bd844 <hal_spi_release>

000c0f68 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0f68:	2100      	movs	r1, #0
   c0f6a:	f7fc bc63 	b.w	bd834 <hal_spi_acquire>

000c0f6e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0f6e:	b510      	push	{r4, lr}
   c0f70:	4604      	mov	r4, r0
   c0f72:	4608      	mov	r0, r1
{
    _spi = spi;
   c0f74:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0f76:	f7fc fc2d 	bl	bd7d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0f7a:	2300      	movs	r3, #0
   c0f7c:	6063      	str	r3, [r4, #4]
}
   c0f7e:	4620      	mov	r0, r4
   c0f80:	bd10      	pop	{r4, pc}

000c0f82 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0f82:	b513      	push	{r0, r1, r4, lr}
   c0f84:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0f86:	7800      	ldrb	r0, [r0, #0]
   c0f88:	f7ff ffee 	bl	c0f68 <_ZN8SPIClass4lockEv.isra.0>
   c0f8c:	b958      	cbnz	r0, c0fa6 <_ZN8SPIClass5beginEv+0x24>
   c0f8e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0f90:	9001      	str	r0, [sp, #4]
   c0f92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0f96:	f7fc fc0d 	bl	bd7b4 <hal_spi_begin>
        unlock();
   c0f9a:	9801      	ldr	r0, [sp, #4]
    }
}
   c0f9c:	b002      	add	sp, #8
   c0f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0fa2:	f7ff bfde 	b.w	c0f62 <_ZN8SPIClass6unlockEv.isra.0>
   c0fa6:	b002      	add	sp, #8
   c0fa8:	bd10      	pop	{r4, pc}

000c0faa <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0faa:	7800      	ldrb	r0, [r0, #0]
   c0fac:	f7ff bfd9 	b.w	c0f62 <_ZN8SPIClass6unlockEv.isra.0>

000c0fb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0fb0:	0840      	lsrs	r0, r0, #1
{
   c0fb2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0fb4:	6018      	str	r0, [r3, #0]
   c0fb6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0fb8:	6818      	ldr	r0, [r3, #0]
   c0fba:	4288      	cmp	r0, r1
   c0fbc:	b2e5      	uxtb	r5, r4
   c0fbe:	d906      	bls.n	c0fce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0fc0:	3401      	adds	r4, #1
   c0fc2:	2c08      	cmp	r4, #8
   c0fc4:	d002      	beq.n	c0fcc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0fc6:	0840      	lsrs	r0, r0, #1
   c0fc8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0fca:	e7f5      	b.n	c0fb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0fcc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0fce:	4b02      	ldr	r3, [pc, #8]	; (c0fd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0fd0:	5d5b      	ldrb	r3, [r3, r5]
   c0fd2:	7013      	strb	r3, [r2, #0]
}
   c0fd4:	bd30      	pop	{r4, r5, pc}
   c0fd6:	bf00      	nop
   c0fd8:	000c6134 	.word	0x000c6134

000c0fdc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0fe0:	4606      	mov	r6, r0
   c0fe2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0fe4:	7800      	ldrb	r0, [r0, #0]
{
   c0fe6:	460c      	mov	r4, r1
    CHECK(lock());
   c0fe8:	f7ff ffbe 	bl	c0f68 <_ZN8SPIClass4lockEv.isra.0>
   c0fec:	2800      	cmp	r0, #0
   c0fee:	db1b      	blt.n	c1028 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0ff0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0ff2:	2214      	movs	r2, #20
   c0ff4:	2100      	movs	r1, #0
   c0ff6:	a809      	add	r0, sp, #36	; 0x24
   c0ff8:	f001 fb94 	bl	c2724 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0ffc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0ffe:	2200      	movs	r2, #0
   c1000:	a909      	add	r1, sp, #36	; 0x24
   c1002:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c1004:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c1008:	f7fc fbf4 	bl	bd7f4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c100c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c1010:	b113      	cbz	r3, c1018 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c1012:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c1016:	b155      	cbz	r5, c102e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c1018:	2700      	movs	r7, #0
   c101a:	46b9      	mov	r9, r7
   c101c:	46b8      	mov	r8, r7
   c101e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c1020:	7923      	ldrb	r3, [r4, #4]
   c1022:	b15d      	cbz	r5, c103c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c1024:	b1c3      	cbz	r3, c1058 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c1026:	2000      	movs	r0, #0
}
   c1028:	b00f      	add	sp, #60	; 0x3c
   c102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c102e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c1032:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c1036:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c103a:	e7f1      	b.n	c1020 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c103c:	2b00      	cmp	r3, #0
   c103e:	d135      	bne.n	c10ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c1040:	68a3      	ldr	r3, [r4, #8]
   c1042:	4543      	cmp	r3, r8
   c1044:	d108      	bne.n	c1058 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c1046:	f88d 9020 	strb.w	r9, [sp, #32]
   c104a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c104e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1052:	89a3      	ldrh	r3, [r4, #12]
   c1054:	429a      	cmp	r2, r3
   c1056:	d0e6      	beq.n	c1026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c1058:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c105a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c105c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1060:	980a      	ldr	r0, [sp, #40]	; 0x28
   c1062:	ab04      	add	r3, sp, #16
   c1064:	f10d 020f 	add.w	r2, sp, #15
   c1068:	f7ff ffa2 	bl	c0fb0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c106c:	7921      	ldrb	r1, [r4, #4]
   c106e:	b985      	cbnz	r5, c1092 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1070:	b989      	cbnz	r1, c1096 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1072:	68a3      	ldr	r3, [r4, #8]
   c1074:	4543      	cmp	r3, r8
   c1076:	d30e      	bcc.n	c1096 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c1078:	f88d 9020 	strb.w	r9, [sp, #32]
   c107c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1080:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c1084:	89a3      	ldrh	r3, [r4, #12]
   c1086:	429a      	cmp	r2, r3
   c1088:	d105      	bne.n	c1096 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c108a:	9b04      	ldr	r3, [sp, #16]
   c108c:	4543      	cmp	r3, r8
   c108e:	d102      	bne.n	c1096 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1090:	e7c9      	b.n	c1026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c1092:	2900      	cmp	r1, #0
   c1094:	d1f9      	bne.n	c108a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c1096:	2300      	movs	r3, #0
   c1098:	9301      	str	r3, [sp, #4]
   c109a:	7b63      	ldrb	r3, [r4, #13]
   c109c:	9300      	str	r3, [sp, #0]
   c109e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c10a2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c10a4:	7830      	ldrb	r0, [r6, #0]
   c10a6:	f7fc fbbd 	bl	bd824 <hal_spi_set_settings>
   c10aa:	e7bc      	b.n	c1026 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c10ac:	e9cd 5500 	strd	r5, r5, [sp]
   c10b0:	462b      	mov	r3, r5
   c10b2:	462a      	mov	r2, r5
   c10b4:	2101      	movs	r1, #1
   c10b6:	e7f5      	b.n	c10a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c10b8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   c10b8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c10ba:	7800      	ldrb	r0, [r0, #0]
   c10bc:	f7fc fb82 	bl	bd7c4 <hal_spi_transfer>
}
   c10c0:	b2c0      	uxtb	r0, r0
   c10c2:	bd08      	pop	{r3, pc}

000c10c4 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c10c4:	b530      	push	{r4, r5, lr}
   c10c6:	b087      	sub	sp, #28
   c10c8:	4604      	mov	r4, r0
   c10ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c10cc:	9500      	str	r5, [sp, #0]
   c10ce:	7800      	ldrb	r0, [r0, #0]
   c10d0:	f7fc fb98 	bl	bd804 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c10d4:	b93d      	cbnz	r5, c10e6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c10d6:	7820      	ldrb	r0, [r4, #0]
   c10d8:	a902      	add	r1, sp, #8
   c10da:	f7fc fb9b 	bl	bd814 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c10de:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c10e2:	07db      	lsls	r3, r3, #31
   c10e4:	d4f7      	bmi.n	c10d6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c10e6:	b007      	add	sp, #28
   c10e8:	bd30      	pop	{r4, r5, pc}

000c10ea <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c10ea:	b510      	push	{r4, lr}
   c10ec:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c10ee:	f7fc fa69 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c10f2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c10f4:	6823      	ldr	r3, [r4, #0]
   c10f6:	4620      	mov	r0, r4
   c10f8:	695b      	ldr	r3, [r3, #20]
   c10fa:	4798      	blx	r3
    if (c >= 0) return c;
   c10fc:	2800      	cmp	r0, #0
   c10fe:	da08      	bge.n	c1112 <_ZN6Stream9timedReadEv+0x28>
   c1100:	f7fc fa60 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c1104:	68e3      	ldr	r3, [r4, #12]
   c1106:	1ac0      	subs	r0, r0, r3
   c1108:	68a3      	ldr	r3, [r4, #8]
   c110a:	4298      	cmp	r0, r3
   c110c:	d3f2      	bcc.n	c10f4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c110e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c1112:	bd10      	pop	{r4, pc}

000c1114 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c1114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1118:	4607      	mov	r7, r0
   c111a:	4688      	mov	r8, r1
   c111c:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c111e:	461d      	mov	r5, r3
   c1120:	b173      	cbz	r3, c1140 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c1122:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c1124:	4638      	mov	r0, r7
   c1126:	f7ff ffe0 	bl	c10ea <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c112a:	1e03      	subs	r3, r0, #0
   c112c:	db05      	blt.n	c113a <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c112e:	4543      	cmp	r3, r8
   c1130:	d003      	beq.n	c113a <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c1132:	5533      	strb	r3, [r6, r4]
    index++;
   c1134:	3401      	adds	r4, #1
  while (index < length) {
   c1136:	42a5      	cmp	r5, r4
   c1138:	d1f4      	bne.n	c1124 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c113a:	4620      	mov	r0, r4
   c113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c1140:	461c      	mov	r4, r3
   c1142:	e7fa      	b.n	c113a <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c1144 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c1144:	b570      	push	{r4, r5, r6, lr}
   c1146:	460d      	mov	r5, r1
  String ret;
   c1148:	4909      	ldr	r1, [pc, #36]	; (c1170 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c114a:	4604      	mov	r4, r0
   c114c:	4616      	mov	r6, r2
  String ret;
   c114e:	f000 f85c 	bl	c120a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c1152:	4628      	mov	r0, r5
   c1154:	f7ff ffc9 	bl	c10ea <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c1158:	2800      	cmp	r0, #0
   c115a:	db06      	blt.n	c116a <_ZN6Stream15readStringUntilEc+0x26>
   c115c:	4286      	cmp	r6, r0
   c115e:	d004      	beq.n	c116a <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c1160:	b2c1      	uxtb	r1, r0
   c1162:	4620      	mov	r0, r4
   c1164:	f000 f8d0 	bl	c1308 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c1168:	e7f3      	b.n	c1152 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c116a:	4620      	mov	r0, r4
   c116c:	bd70      	pop	{r4, r5, r6, pc}
   c116e:	bf00      	nop
   c1170:	000c606b 	.word	0x000c606b

000c1174 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c1174:	b510      	push	{r4, lr}
   c1176:	4604      	mov	r4, r0
{
	free(buffer);
   c1178:	6800      	ldr	r0, [r0, #0]
   c117a:	f7fc fd19 	bl	bdbb0 <free>
}
   c117e:	4620      	mov	r0, r4
   c1180:	bd10      	pop	{r4, pc}

000c1182 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c1182:	b510      	push	{r4, lr}
   c1184:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c1186:	6800      	ldr	r0, [r0, #0]
   c1188:	b108      	cbz	r0, c118e <_ZN6String10invalidateEv+0xc>
   c118a:	f7fc fd11 	bl	bdbb0 <free>
	buffer = NULL;
   c118e:	2300      	movs	r3, #0
	capacity = len = 0;
   c1190:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c1194:	6023      	str	r3, [r4, #0]
}
   c1196:	bd10      	pop	{r4, pc}

000c1198 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c1198:	b538      	push	{r3, r4, r5, lr}
   c119a:	4604      	mov	r4, r0
   c119c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c119e:	6800      	ldr	r0, [r0, #0]
   c11a0:	3101      	adds	r1, #1
   c11a2:	f7fc fd0d 	bl	bdbc0 <realloc>
	if (newbuffer) {
   c11a6:	b110      	cbz	r0, c11ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c11a8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c11ac:	2001      	movs	r0, #1
	}
	return 0;
}
   c11ae:	bd38      	pop	{r3, r4, r5, pc}

000c11b0 <_ZN6String7reserveEj>:
{
   c11b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c11b2:	6803      	ldr	r3, [r0, #0]
{
   c11b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c11b6:	b123      	cbz	r3, c11c2 <_ZN6String7reserveEj+0x12>
   c11b8:	6843      	ldr	r3, [r0, #4]
   c11ba:	428b      	cmp	r3, r1
   c11bc:	d301      	bcc.n	c11c2 <_ZN6String7reserveEj+0x12>
   c11be:	2001      	movs	r0, #1
}
   c11c0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c11c2:	4620      	mov	r0, r4
   c11c4:	f7ff ffe8 	bl	c1198 <_ZN6String12changeBufferEj>
   c11c8:	2800      	cmp	r0, #0
   c11ca:	d0f9      	beq.n	c11c0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c11cc:	68a3      	ldr	r3, [r4, #8]
   c11ce:	2b00      	cmp	r3, #0
   c11d0:	d1f5      	bne.n	c11be <_ZN6String7reserveEj+0xe>
   c11d2:	6822      	ldr	r2, [r4, #0]
   c11d4:	7013      	strb	r3, [r2, #0]
   c11d6:	e7f2      	b.n	c11be <_ZN6String7reserveEj+0xe>

000c11d8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c11d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c11da:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c11dc:	4611      	mov	r1, r2
   c11de:	9201      	str	r2, [sp, #4]
{
   c11e0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c11e2:	f7ff ffe5 	bl	c11b0 <_ZN6String7reserveEj>
   c11e6:	9a01      	ldr	r2, [sp, #4]
   c11e8:	b928      	cbnz	r0, c11f6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c11ea:	4620      	mov	r0, r4
   c11ec:	f7ff ffc9 	bl	c1182 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c11f0:	4620      	mov	r0, r4
   c11f2:	b003      	add	sp, #12
   c11f4:	bd30      	pop	{r4, r5, pc}
	len = length;
   c11f6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c11f8:	4629      	mov	r1, r5
   c11fa:	6820      	ldr	r0, [r4, #0]
   c11fc:	f001 fa6a 	bl	c26d4 <memcpy>
	buffer[len] = 0;
   c1200:	6822      	ldr	r2, [r4, #0]
   c1202:	68a3      	ldr	r3, [r4, #8]
   c1204:	2100      	movs	r1, #0
   c1206:	54d1      	strb	r1, [r2, r3]
	return *this;
   c1208:	e7f2      	b.n	c11f0 <_ZN6String4copyEPKcj+0x18>

000c120a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c120a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c120c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c120e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c1212:	4604      	mov	r4, r0
	len = 0;
   c1214:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1216:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c1218:	b141      	cbz	r1, c122c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c121a:	4608      	mov	r0, r1
   c121c:	9101      	str	r1, [sp, #4]
   c121e:	f001 fb0c 	bl	c283a <strlen>
   c1222:	9901      	ldr	r1, [sp, #4]
   c1224:	4602      	mov	r2, r0
   c1226:	4620      	mov	r0, r4
   c1228:	f7ff ffd6 	bl	c11d8 <_ZN6String4copyEPKcj>
}
   c122c:	4620      	mov	r0, r4
   c122e:	b002      	add	sp, #8
   c1230:	bd10      	pop	{r4, pc}

000c1232 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c1232:	b538      	push	{r3, r4, r5, lr}
   c1234:	4605      	mov	r5, r0
	if (buffer) {
   c1236:	6800      	ldr	r0, [r0, #0]
{
   c1238:	460c      	mov	r4, r1
	if (buffer) {
   c123a:	b168      	cbz	r0, c1258 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c123c:	686a      	ldr	r2, [r5, #4]
   c123e:	688b      	ldr	r3, [r1, #8]
   c1240:	429a      	cmp	r2, r3
   c1242:	d307      	bcc.n	c1254 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c1244:	6809      	ldr	r1, [r1, #0]
   c1246:	f001 fad3 	bl	c27f0 <strcpy>
			len = rhs.len;
   c124a:	68a3      	ldr	r3, [r4, #8]
   c124c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c124e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c1250:	60a3      	str	r3, [r4, #8]
}
   c1252:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c1254:	f7fc fcac 	bl	bdbb0 <free>
	buffer = rhs.buffer;
   c1258:	6823      	ldr	r3, [r4, #0]
   c125a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c125c:	6863      	ldr	r3, [r4, #4]
   c125e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c1260:	68a3      	ldr	r3, [r4, #8]
   c1262:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c1264:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c1266:	e9c4 3300 	strd	r3, r3, [r4]
   c126a:	e7f1      	b.n	c1250 <_ZN6String4moveERS_+0x1e>

000c126c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c126c:	b510      	push	{r4, lr}
	buffer = NULL;
   c126e:	2300      	movs	r3, #0
	capacity = 0;
   c1270:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c1274:	4604      	mov	r4, r0
	len = 0;
   c1276:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1278:	7303      	strb	r3, [r0, #12]
	move(rval);
   c127a:	f7ff ffda 	bl	c1232 <_ZN6String4moveERS_>
}
   c127e:	4620      	mov	r0, r4
   c1280:	bd10      	pop	{r4, pc}

000c1282 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c1282:	4288      	cmp	r0, r1
{
   c1284:	b510      	push	{r4, lr}
   c1286:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c1288:	d005      	beq.n	c1296 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c128a:	680b      	ldr	r3, [r1, #0]
   c128c:	b12b      	cbz	r3, c129a <_ZN6StringaSERKS_+0x18>
   c128e:	688a      	ldr	r2, [r1, #8]
   c1290:	4619      	mov	r1, r3
   c1292:	f7ff ffa1 	bl	c11d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c1296:	4620      	mov	r0, r4
   c1298:	bd10      	pop	{r4, pc}
	else invalidate();
   c129a:	f7ff ff72 	bl	c1182 <_ZN6String10invalidateEv>
   c129e:	e7fa      	b.n	c1296 <_ZN6StringaSERKS_+0x14>

000c12a0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c12a0:	b510      	push	{r4, lr}
	buffer = NULL;
   c12a2:	2300      	movs	r3, #0
String::String(const String &value)
   c12a4:	4604      	mov	r4, r0
	capacity = 0;
   c12a6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c12aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   c12ac:	7303      	strb	r3, [r0, #12]
	*this = value;
   c12ae:	f7ff ffe8 	bl	c1282 <_ZN6StringaSERKS_>
}
   c12b2:	4620      	mov	r0, r4
   c12b4:	bd10      	pop	{r4, pc}

000c12b6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c12b6:	b513      	push	{r0, r1, r4, lr}
   c12b8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c12ba:	b159      	cbz	r1, c12d4 <_ZN6StringaSEPKc+0x1e>
   c12bc:	4608      	mov	r0, r1
   c12be:	9101      	str	r1, [sp, #4]
   c12c0:	f001 fabb 	bl	c283a <strlen>
   c12c4:	9901      	ldr	r1, [sp, #4]
   c12c6:	4602      	mov	r2, r0
   c12c8:	4620      	mov	r0, r4
   c12ca:	f7ff ff85 	bl	c11d8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c12ce:	4620      	mov	r0, r4
   c12d0:	b002      	add	sp, #8
   c12d2:	bd10      	pop	{r4, pc}
	else invalidate();
   c12d4:	f7ff ff55 	bl	c1182 <_ZN6String10invalidateEv>
   c12d8:	e7f9      	b.n	c12ce <_ZN6StringaSEPKc+0x18>

000c12da <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c12da:	b570      	push	{r4, r5, r6, lr}
   c12dc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c12de:	460e      	mov	r6, r1
   c12e0:	b909      	cbnz	r1, c12e6 <_ZN6String6concatEPKcj+0xc>
   c12e2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c12e4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c12e6:	b16a      	cbz	r2, c1304 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c12e8:	6884      	ldr	r4, [r0, #8]
   c12ea:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c12ec:	4621      	mov	r1, r4
   c12ee:	f7ff ff5f 	bl	c11b0 <_ZN6String7reserveEj>
   c12f2:	2800      	cmp	r0, #0
   c12f4:	d0f5      	beq.n	c12e2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c12f6:	6828      	ldr	r0, [r5, #0]
   c12f8:	68ab      	ldr	r3, [r5, #8]
   c12fa:	4631      	mov	r1, r6
   c12fc:	4418      	add	r0, r3
   c12fe:	f001 fa77 	bl	c27f0 <strcpy>
	len = newlen;
   c1302:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c1304:	2001      	movs	r0, #1
   c1306:	e7ed      	b.n	c12e4 <_ZN6String6concatEPKcj+0xa>

000c1308 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c1308:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c130a:	2300      	movs	r3, #0
	buf[0] = c;
   c130c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c1310:	2201      	movs	r2, #1
   c1312:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c1314:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c1318:	f7ff ffdf 	bl	c12da <_ZN6String6concatEPKcj>
}
   c131c:	b003      	add	sp, #12
   c131e:	f85d fb04 	ldr.w	pc, [sp], #4

000c1322 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c1322:	6883      	ldr	r3, [r0, #8]
   c1324:	428b      	cmp	r3, r1
   c1326:	d903      	bls.n	c1330 <_ZNK6StringixEj+0xe>
   c1328:	6800      	ldr	r0, [r0, #0]
   c132a:	b110      	cbz	r0, c1332 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c132c:	5c40      	ldrb	r0, [r0, r1]
   c132e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c1330:	2000      	movs	r0, #0
}
   c1332:	4770      	bx	lr

000c1334 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c1334:	f7ff bff5 	b.w	c1322 <_ZNK6StringixEj>

000c1338 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   c1338:	b558      	push	{r3, r4, r6, lr}
   c133a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   c133c:	b12a      	cbz	r2, c134a <_ZNK6String8getBytesEPhjj+0x12>
   c133e:	b121      	cbz	r1, c134a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   c1340:	6884      	ldr	r4, [r0, #8]
   c1342:	42a3      	cmp	r3, r4
   c1344:	d302      	bcc.n	c134c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   c1346:	2300      	movs	r3, #0
   c1348:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   c134a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   c134c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   c134e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   c1350:	6801      	ldr	r1, [r0, #0]
   c1352:	4294      	cmp	r4, r2
   c1354:	bf28      	it	cs
   c1356:	4614      	movcs	r4, r2
   c1358:	4419      	add	r1, r3
   c135a:	4622      	mov	r2, r4
   c135c:	4630      	mov	r0, r6
   c135e:	f001 fa9b 	bl	c2898 <strncpy>
	buf[n] = 0;
   c1362:	2300      	movs	r3, #0
   c1364:	5533      	strb	r3, [r6, r4]
   c1366:	e7f0      	b.n	c134a <_ZNK6String8getBytesEPhjj+0x12>

000c1368 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c1368:	4b05      	ldr	r3, [pc, #20]	; (c1380 <_GLOBAL__sub_I_System+0x18>)
   c136a:	2202      	movs	r2, #2
   c136c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c136e:	4b05      	ldr	r3, [pc, #20]	; (c1384 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c1370:	4a05      	ldr	r2, [pc, #20]	; (c1388 <_GLOBAL__sub_I_System+0x20>)
   c1372:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c1374:	2000      	movs	r0, #0
   c1376:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c137a:	f7fc bb2d 	b.w	bd9d8 <set_system_mode>
   c137e:	bf00      	nop
   c1380:	2003e6c4 	.word	0x2003e6c4
   c1384:	2003e6b8 	.word	0x2003e6b8
   c1388:	ffff0000 	.word	0xffff0000

000c138c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c1390:	4a15      	ldr	r2, [pc, #84]	; (c13e8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c1392:	f8df 8060 	ldr.w	r8, [pc, #96]	; c13f4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c1396:	e9d2 6300 	ldrd	r6, r3, [r2]
   c139a:	1980      	adds	r0, r0, r6
   c139c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c13a0:	4b12      	ldr	r3, [pc, #72]	; (c13ec <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c13a2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c13a6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c13aa:	1986      	adds	r6, r0, r6
   c13ac:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c13b0:	42bb      	cmp	r3, r7
   c13b2:	bf08      	it	eq
   c13b4:	42b2      	cmpeq	r2, r6
{
   c13b6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c13b8:	d013      	beq.n	c13e2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c13ba:	a903      	add	r1, sp, #12
   c13bc:	4668      	mov	r0, sp
   c13be:	e9cd 6700 	strd	r6, r7, [sp]
   c13c2:	f7fc fc4d 	bl	bdc60 <localtime_r>
	calendar_time.tm_year += 1900;
   c13c6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c13c8:	4d09      	ldr	r5, [pc, #36]	; (c13f0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c13ca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c13ce:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c13d0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c13d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c13d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c13d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c13d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c13da:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c13de:	6823      	ldr	r3, [r4, #0]
   c13e0:	602b      	str	r3, [r5, #0]
    }
}
   c13e2:	b00c      	add	sp, #48	; 0x30
   c13e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c13e8:	2003e6f8 	.word	0x2003e6f8
   c13ec:	2003e6f0 	.word	0x2003e6f0
   c13f0:	2003e6cc 	.word	0x2003e6cc
   c13f4:	2003e700 	.word	0x2003e700

000c13f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c13f8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c13fa:	2000      	movs	r0, #0
   c13fc:	f7fc fb60 	bl	bdac0 <spark_sync_time_pending>
   c1400:	b128      	cbz	r0, c140e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1402:	f7fc fb45 	bl	bda90 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1406:	f080 0001 	eor.w	r0, r0, #1
   c140a:	b2c0      	uxtb	r0, r0
    }
   c140c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c140e:	2001      	movs	r0, #1
   c1410:	e7fc      	b.n	c140c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1414 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1414:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1416:	f7ff ffb9 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c141a:	4b02      	ldr	r3, [pc, #8]	; (c1424 <_ZN9TimeClass5monthEx+0x10>)
   c141c:	6918      	ldr	r0, [r3, #16]
}
   c141e:	3001      	adds	r0, #1
   c1420:	bd08      	pop	{r3, pc}
   c1422:	bf00      	nop
   c1424:	2003e6cc 	.word	0x2003e6cc

000c1428 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1428:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c142a:	2000      	movs	r0, #0
   c142c:	f7fc f8d2 	bl	bd5d4 <hal_rtc_time_is_valid>
    if (rtcstate)
   c1430:	4604      	mov	r4, r0
   c1432:	b9a0      	cbnz	r0, c145e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1434:	f7fc fac8 	bl	bd9c8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1438:	2801      	cmp	r0, #1
   c143a:	d110      	bne.n	c145e <_ZN9TimeClass7isValidEv+0x36>
   c143c:	4620      	mov	r0, r4
   c143e:	f7fc faeb 	bl	bda18 <system_thread_get_state>
   c1442:	b960      	cbnz	r0, c145e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c1444:	f7ff ffd8 	bl	c13f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c1448:	b910      	cbnz	r0, c1450 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c144a:	f7fc fb19 	bl	bda80 <spark_process>
        while (_while() && !_condition()) {
   c144e:	e7f9      	b.n	c1444 <_ZN9TimeClass7isValidEv+0x1c>
   c1450:	f7ff ffd2 	bl	c13f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c1454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c1458:	2000      	movs	r0, #0
   c145a:	f7fc b8bb 	b.w	bd5d4 <hal_rtc_time_is_valid>
}
   c145e:	4620      	mov	r0, r4
   c1460:	bd10      	pop	{r4, pc}

000c1462 <_ZN9TimeClass3nowEv>:
{
   c1462:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c1464:	f7ff ffe0 	bl	c1428 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c1468:	2210      	movs	r2, #16
   c146a:	2100      	movs	r1, #0
   c146c:	4668      	mov	r0, sp
   c146e:	f001 f959 	bl	c2724 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c1472:	2100      	movs	r1, #0
   c1474:	4668      	mov	r0, sp
   c1476:	f7fc f8b5 	bl	bd5e4 <hal_rtc_get_time>
}
   c147a:	9800      	ldr	r0, [sp, #0]
   c147c:	b005      	add	sp, #20
   c147e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1484 <_ZN9TimeClass4hourEv>:
{
   c1484:	b508      	push	{r3, lr}
	return hour(now());
   c1486:	f7ff ffec 	bl	c1462 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c148a:	17c1      	asrs	r1, r0, #31
   c148c:	f7ff ff7e 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
}
   c1490:	4b01      	ldr	r3, [pc, #4]	; (c1498 <_ZN9TimeClass4hourEv+0x14>)
   c1492:	6898      	ldr	r0, [r3, #8]
   c1494:	bd08      	pop	{r3, pc}
   c1496:	bf00      	nop
   c1498:	2003e6cc 	.word	0x2003e6cc

000c149c <_ZN9TimeClass6minuteEv>:
{
   c149c:	b508      	push	{r3, lr}
	return minute(now());
   c149e:	f7ff ffe0 	bl	c1462 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c14a2:	17c1      	asrs	r1, r0, #31
   c14a4:	f7ff ff72 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
}
   c14a8:	4b01      	ldr	r3, [pc, #4]	; (c14b0 <_ZN9TimeClass6minuteEv+0x14>)
   c14aa:	6858      	ldr	r0, [r3, #4]
   c14ac:	bd08      	pop	{r3, pc}
   c14ae:	bf00      	nop
   c14b0:	2003e6cc 	.word	0x2003e6cc

000c14b4 <_ZN9TimeClass6secondEv>:
{
   c14b4:	b508      	push	{r3, lr}
	return second(now());
   c14b6:	f7ff ffd4 	bl	c1462 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c14ba:	17c1      	asrs	r1, r0, #31
   c14bc:	f7ff ff66 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
}
   c14c0:	4b01      	ldr	r3, [pc, #4]	; (c14c8 <_ZN9TimeClass6secondEv+0x14>)
   c14c2:	6818      	ldr	r0, [r3, #0]
   c14c4:	bd08      	pop	{r3, pc}
   c14c6:	bf00      	nop
   c14c8:	2003e6cc 	.word	0x2003e6cc

000c14cc <_ZN9TimeClass3dayEv>:
{
   c14cc:	b508      	push	{r3, lr}
	return day(now());
   c14ce:	f7ff ffc8 	bl	c1462 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c14d2:	17c1      	asrs	r1, r0, #31
   c14d4:	f7ff ff5a 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
}
   c14d8:	4b01      	ldr	r3, [pc, #4]	; (c14e0 <_ZN9TimeClass3dayEv+0x14>)
   c14da:	68d8      	ldr	r0, [r3, #12]
   c14dc:	bd08      	pop	{r3, pc}
   c14de:	bf00      	nop
   c14e0:	2003e6cc 	.word	0x2003e6cc

000c14e4 <_ZN9TimeClass5monthEv>:
{
   c14e4:	b508      	push	{r3, lr}
	return month(now());
   c14e6:	f7ff ffbc 	bl	c1462 <_ZN9TimeClass3nowEv>
}
   c14ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c14ee:	17c1      	asrs	r1, r0, #31
   c14f0:	f7ff bf90 	b.w	c1414 <_ZN9TimeClass5monthEx>

000c14f4 <_ZN9TimeClass4yearEv>:
{
   c14f4:	b508      	push	{r3, lr}
	return year(now());
   c14f6:	f7ff ffb4 	bl	c1462 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c14fa:	17c1      	asrs	r1, r0, #31
   c14fc:	f7ff ff46 	bl	c138c <_ZL22Refresh_UnixTime_Cachex>
}
   c1500:	4b01      	ldr	r3, [pc, #4]	; (c1508 <_ZN9TimeClass4yearEv+0x14>)
   c1502:	6958      	ldr	r0, [r3, #20]
   c1504:	bd08      	pop	{r3, pc}
   c1506:	bf00      	nop
   c1508:	2003e6cc 	.word	0x2003e6cc

000c150c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c150c:	4b02      	ldr	r3, [pc, #8]	; (c1518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c150e:	681a      	ldr	r2, [r3, #0]
   c1510:	4b02      	ldr	r3, [pc, #8]	; (c151c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1512:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1514:	4770      	bx	lr
   c1516:	bf00      	nop
   c1518:	2003db34 	.word	0x2003db34
   c151c:	2003e6c8 	.word	0x2003e6c8

000c1520 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1520:	4770      	bx	lr

000c1522 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1522:	7441      	strb	r1, [r0, #17]
}
   c1524:	4770      	bx	lr

000c1526 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1526:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1528:	7c00      	ldrb	r0, [r0, #16]
   c152a:	f7fc f9cb 	bl	bd8c4 <hal_usart_available_data_for_write>
}
   c152e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1532:	bd08      	pop	{r3, pc}

000c1534 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1534:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1536:	7c00      	ldrb	r0, [r0, #16]
   c1538:	f7fc f99c 	bl	bd874 <hal_usart_available>
}
   c153c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1540:	bd08      	pop	{r3, pc}

000c1542 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1542:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1544:	7c00      	ldrb	r0, [r0, #16]
   c1546:	f7fc f9a5 	bl	bd894 <hal_usart_peek>
}
   c154a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c154e:	bd08      	pop	{r3, pc}

000c1550 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1550:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1552:	7c00      	ldrb	r0, [r0, #16]
   c1554:	f7fc f996 	bl	bd884 <hal_usart_read>
}
   c1558:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c155c:	bd08      	pop	{r3, pc}

000c155e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c155e:	7c00      	ldrb	r0, [r0, #16]
   c1560:	f7fc b9a0 	b.w	bd8a4 <hal_usart_flush>

000c1564 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1564:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1566:	7c45      	ldrb	r5, [r0, #17]
{
   c1568:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c156a:	b12d      	cbz	r5, c1578 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c156c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c156e:	b003      	add	sp, #12
   c1570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1574:	f7fc b976 	b.w	bd864 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1578:	7c00      	ldrb	r0, [r0, #16]
   c157a:	9101      	str	r1, [sp, #4]
   c157c:	f7fc f9a2 	bl	bd8c4 <hal_usart_available_data_for_write>
   c1580:	2800      	cmp	r0, #0
   c1582:	9901      	ldr	r1, [sp, #4]
   c1584:	dcf2      	bgt.n	c156c <_ZN11USARTSerial5writeEh+0x8>
}
   c1586:	4628      	mov	r0, r5
   c1588:	b003      	add	sp, #12
   c158a:	bd30      	pop	{r4, r5, pc}

000c158c <_ZN11USARTSerialD0Ev>:
   c158c:	b510      	push	{r4, lr}
   c158e:	2114      	movs	r1, #20
   c1590:	4604      	mov	r4, r0
   c1592:	f7f2 fd86 	bl	b40a2 <_ZdlPvj>
   c1596:	4620      	mov	r0, r4
   c1598:	bd10      	pop	{r4, pc}
	...

000c159c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c159c:	b510      	push	{r4, lr}
   c159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c15a2:	4604      	mov	r4, r0
   c15a4:	4608      	mov	r0, r1
   c15a6:	4611      	mov	r1, r2
   c15a8:	2200      	movs	r2, #0
   c15aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c15ae:	4b04      	ldr	r3, [pc, #16]	; (c15c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c15b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c15b2:	2301      	movs	r3, #1
  _serial = serial;
   c15b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c15b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c15b8:	f7fc f994 	bl	bd8e4 <hal_usart_init_ex>
}
   c15bc:	4620      	mov	r0, r4
   c15be:	bd10      	pop	{r4, pc}
   c15c0:	000c6160 	.word	0x000c6160

000c15c4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c15c4:	7c00      	ldrb	r0, [r0, #16]
   c15c6:	2300      	movs	r3, #0
   c15c8:	f7fc b984 	b.w	bd8d4 <hal_usart_begin_config>

000c15cc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c15cc:	2200      	movs	r2, #0
   c15ce:	f7ff bff9 	b.w	c15c4 <_ZN11USARTSerial5beginEmm>

000c15d2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c15d2:	7c00      	ldrb	r0, [r0, #16]
   c15d4:	f7fc b93e 	b.w	bd854 <hal_usart_end>

000c15d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c15d8:	7441      	strb	r1, [r0, #17]
}
   c15da:	4770      	bx	lr

000c15dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c15dc:	4770      	bx	lr

000c15de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c15de:	4770      	bx	lr

000c15e0 <_ZN9USBSerial4readEv>:
{
   c15e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c15e2:	2100      	movs	r1, #0
   c15e4:	7c00      	ldrb	r0, [r0, #16]
   c15e6:	f7fc f9ad 	bl	bd944 <HAL_USB_USART_Receive_Data>
}
   c15ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c15ee:	bd08      	pop	{r3, pc}

000c15f0 <_ZN9USBSerial4peekEv>:
{
   c15f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c15f2:	2101      	movs	r1, #1
   c15f4:	7c00      	ldrb	r0, [r0, #16]
   c15f6:	f7fc f9a5 	bl	bd944 <HAL_USB_USART_Receive_Data>
}
   c15fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c15fe:	bd08      	pop	{r3, pc}

000c1600 <_ZN9USBSerial17availableForWriteEv>:
{
   c1600:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1602:	7c00      	ldrb	r0, [r0, #16]
   c1604:	f7fc f996 	bl	bd934 <HAL_USB_USART_Available_Data_For_Write>
}
   c1608:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c160c:	bd08      	pop	{r3, pc}

000c160e <_ZN9USBSerial9availableEv>:
{
   c160e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1610:	7c00      	ldrb	r0, [r0, #16]
   c1612:	f7fc f987 	bl	bd924 <HAL_USB_USART_Available_Data>
}
   c1616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c161a:	bd08      	pop	{r3, pc}

000c161c <_ZN9USBSerial5writeEh>:
{
   c161c:	b513      	push	{r0, r1, r4, lr}
   c161e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1620:	7c00      	ldrb	r0, [r0, #16]
{
   c1622:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1624:	f7fc f986 	bl	bd934 <HAL_USB_USART_Available_Data_For_Write>
   c1628:	2800      	cmp	r0, #0
   c162a:	9901      	ldr	r1, [sp, #4]
   c162c:	dc01      	bgt.n	c1632 <_ZN9USBSerial5writeEh+0x16>
   c162e:	7c60      	ldrb	r0, [r4, #17]
   c1630:	b120      	cbz	r0, c163c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1632:	7c20      	ldrb	r0, [r4, #16]
   c1634:	f7fc f98e 	bl	bd954 <HAL_USB_USART_Send_Data>
   c1638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c163c:	b002      	add	sp, #8
   c163e:	bd10      	pop	{r4, pc}

000c1640 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1640:	7c00      	ldrb	r0, [r0, #16]
   c1642:	f7fc b98f 	b.w	bd964 <HAL_USB_USART_Flush_Data>

000c1646 <_ZN9USBSerialD0Ev>:
   c1646:	b510      	push	{r4, lr}
   c1648:	2114      	movs	r1, #20
   c164a:	4604      	mov	r4, r0
   c164c:	f7f2 fd29 	bl	b40a2 <_ZdlPvj>
   c1650:	4620      	mov	r0, r4
   c1652:	bd10      	pop	{r4, pc}

000c1654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1654:	b510      	push	{r4, lr}
   c1656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c165a:	4604      	mov	r4, r0
   c165c:	4608      	mov	r0, r1
   c165e:	2100      	movs	r1, #0
   c1660:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1664:	4b04      	ldr	r3, [pc, #16]	; (c1678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1666:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1668:	2301      	movs	r3, #1
  _serial = serial;
   c166a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c166c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c166e:	4611      	mov	r1, r2
   c1670:	f7fc f940 	bl	bd8f4 <HAL_USB_USART_Init>
}
   c1674:	4620      	mov	r0, r4
   c1676:	bd10      	pop	{r4, pc}
   c1678:	000c6190 	.word	0x000c6190

000c167c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c167c:	7c00      	ldrb	r0, [r0, #16]
   c167e:	2200      	movs	r2, #0
   c1680:	f7fc b940 	b.w	bd904 <HAL_USB_USART_Begin>

000c1684 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1684:	7c00      	ldrb	r0, [r0, #16]
   c1686:	f7fc b945 	b.w	bd914 <HAL_USB_USART_End>

000c168a <_Z19acquireSerialBufferv>:
{
   c168a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c168c:	2214      	movs	r2, #20
{
   c168e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1690:	2100      	movs	r1, #0
   c1692:	f001 f847 	bl	c2724 <memset>
}
   c1696:	4620      	mov	r0, r4
   c1698:	bd10      	pop	{r4, pc}
	...

000c169c <_Z16_fetch_usbserialv>:
{
   c169c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c169e:	4c0f      	ldr	r4, [pc, #60]	; (c16dc <_Z16_fetch_usbserialv+0x40>)
{
   c16a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c16a2:	a803      	add	r0, sp, #12
   c16a4:	f7ff fff1 	bl	c168a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c16a8:	7821      	ldrb	r1, [r4, #0]
   c16aa:	f3bf 8f5b 	dmb	ish
   c16ae:	f011 0101 	ands.w	r1, r1, #1
   c16b2:	d10f      	bne.n	c16d4 <_Z16_fetch_usbserialv+0x38>
   c16b4:	4620      	mov	r0, r4
   c16b6:	9101      	str	r1, [sp, #4]
   c16b8:	f7f2 fd02 	bl	b40c0 <__cxa_guard_acquire>
   c16bc:	9901      	ldr	r1, [sp, #4]
   c16be:	b148      	cbz	r0, c16d4 <_Z16_fetch_usbserialv+0x38>
   c16c0:	aa03      	add	r2, sp, #12
   c16c2:	4807      	ldr	r0, [pc, #28]	; (c16e0 <_Z16_fetch_usbserialv+0x44>)
   c16c4:	f7ff ffc6 	bl	c1654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c16c8:	4620      	mov	r0, r4
   c16ca:	f7f2 fcfe 	bl	b40ca <__cxa_guard_release>
   c16ce:	4805      	ldr	r0, [pc, #20]	; (c16e4 <_Z16_fetch_usbserialv+0x48>)
   c16d0:	f000 ffda 	bl	c2688 <atexit>
	return _usbserial;
}
   c16d4:	4802      	ldr	r0, [pc, #8]	; (c16e0 <_Z16_fetch_usbserialv+0x44>)
   c16d6:	b008      	add	sp, #32
   c16d8:	bd10      	pop	{r4, pc}
   c16da:	bf00      	nop
   c16dc:	2003e708 	.word	0x2003e708
   c16e0:	2003e70c 	.word	0x2003e70c
   c16e4:	000c15dd 	.word	0x000c15dd

000c16e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c16e8:	4b01      	ldr	r3, [pc, #4]	; (c16f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c16ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c16ec:	4770      	bx	lr
   c16ee:	bf00      	nop
   c16f0:	2003db38 	.word	0x2003db38

000c16f4 <serialEventRun>:
{
   c16f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c16f6:	4b0b      	ldr	r3, [pc, #44]	; (c1724 <serialEventRun+0x30>)
   c16f8:	b143      	cbz	r3, c170c <serialEventRun+0x18>
   c16fa:	f7ff ffcf 	bl	c169c <_Z16_fetch_usbserialv>
   c16fe:	6803      	ldr	r3, [r0, #0]
   c1700:	691b      	ldr	r3, [r3, #16]
   c1702:	4798      	blx	r3
   c1704:	2800      	cmp	r0, #0
   c1706:	dd01      	ble.n	c170c <serialEventRun+0x18>
        serialEvent();
   c1708:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c170c:	4b06      	ldr	r3, [pc, #24]	; (c1728 <serialEventRun+0x34>)
   c170e:	b143      	cbz	r3, c1722 <serialEventRun+0x2e>
   c1710:	f000 f970 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   c1714:	6803      	ldr	r3, [r0, #0]
   c1716:	691b      	ldr	r3, [r3, #16]
   c1718:	4798      	blx	r3
   c171a:	2800      	cmp	r0, #0
   c171c:	dd01      	ble.n	c1722 <serialEventRun+0x2e>
        serialEvent1();
   c171e:	f3af 8000 	nop.w
}
   c1722:	bd08      	pop	{r3, pc}
	...

000c172c <_post_loop>:
{
   c172c:	b508      	push	{r3, lr}
	serialEventRun();
   c172e:	f7ff ffe1 	bl	c16f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1732:	f7fb ff47 	bl	bd5c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1736:	4b01      	ldr	r3, [pc, #4]	; (c173c <_post_loop+0x10>)
   c1738:	6018      	str	r0, [r3, #0]
}
   c173a:	bd08      	pop	{r3, pc}
   c173c:	2003e728 	.word	0x2003e728

000c1740 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1740:	4805      	ldr	r0, [pc, #20]	; (c1758 <_Z33system_initialize_user_backup_ramv+0x18>)
   c1742:	4a06      	ldr	r2, [pc, #24]	; (c175c <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1744:	4906      	ldr	r1, [pc, #24]	; (c1760 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1746:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1748:	1a12      	subs	r2, r2, r0
   c174a:	f000 ffc3 	bl	c26d4 <memcpy>
    __backup_sram_signature = signature;
   c174e:	4b05      	ldr	r3, [pc, #20]	; (c1764 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1750:	4a05      	ldr	r2, [pc, #20]	; (c1768 <_Z33system_initialize_user_backup_ramv+0x28>)
   c1752:	601a      	str	r2, [r3, #0]
}
   c1754:	bd08      	pop	{r3, pc}
   c1756:	bf00      	nop
   c1758:	2003f400 	.word	0x2003f400
   c175c:	2003f404 	.word	0x2003f404
   c1760:	000c66a4 	.word	0x000c66a4
   c1764:	2003f400 	.word	0x2003f400
   c1768:	9a271c1e 	.word	0x9a271c1e

000c176c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c176c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c176e:	2300      	movs	r3, #0
   c1770:	9300      	str	r3, [sp, #0]
   c1772:	461a      	mov	r2, r3
   c1774:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1778:	f7fc f968 	bl	bda4c <system_ctrl_set_result>
}
   c177c:	b003      	add	sp, #12
   c177e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1784 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1784:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c1786:	8843      	ldrh	r3, [r0, #2]
   c1788:	2b0a      	cmp	r3, #10
   c178a:	d008      	beq.n	c179e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c178c:	2b50      	cmp	r3, #80	; 0x50
   c178e:	d10b      	bne.n	c17a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1790:	4b09      	ldr	r3, [pc, #36]	; (c17b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1792:	681b      	ldr	r3, [r3, #0]
   c1794:	b14b      	cbz	r3, c17aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c1796:	b003      	add	sp, #12
   c1798:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c179c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c179e:	f7ff ffe5 	bl	c176c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c17a2:	b003      	add	sp, #12
   c17a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c17a8:	2300      	movs	r3, #0
   c17aa:	9300      	str	r3, [sp, #0]
   c17ac:	461a      	mov	r2, r3
   c17ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c17b2:	f7fc f94b 	bl	bda4c <system_ctrl_set_result>
}
   c17b6:	e7f4      	b.n	c17a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c17b8:	2003e724 	.word	0x2003e724

000c17bc <module_user_init_hook>:
{
   c17bc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c17be:	4812      	ldr	r0, [pc, #72]	; (c1808 <module_user_init_hook+0x4c>)
   c17c0:	2100      	movs	r1, #0
   c17c2:	f7fc fa45 	bl	bdc50 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c17c6:	4b11      	ldr	r3, [pc, #68]	; (c180c <module_user_init_hook+0x50>)
   c17c8:	681a      	ldr	r2, [r3, #0]
   c17ca:	4b11      	ldr	r3, [pc, #68]	; (c1810 <module_user_init_hook+0x54>)
   c17cc:	429a      	cmp	r2, r3
   c17ce:	4b11      	ldr	r3, [pc, #68]	; (c1814 <module_user_init_hook+0x58>)
   c17d0:	bf0c      	ite	eq
   c17d2:	2201      	moveq	r2, #1
   c17d4:	2200      	movne	r2, #0
   c17d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c17d8:	d001      	beq.n	c17de <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c17da:	f7ff ffb1 	bl	c1740 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c17de:	f7fb fed9 	bl	bd594 <HAL_RNG_GetRandomNumber>
   c17e2:	4604      	mov	r4, r0
    srand(seed);
   c17e4:	f000 ffa6 	bl	c2734 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c17e8:	4b0b      	ldr	r3, [pc, #44]	; (c1818 <module_user_init_hook+0x5c>)
   c17ea:	b113      	cbz	r3, c17f2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c17ec:	4620      	mov	r0, r4
   c17ee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c17f2:	2100      	movs	r1, #0
   c17f4:	4808      	ldr	r0, [pc, #32]	; (c1818 <module_user_init_hook+0x5c>)
   c17f6:	f7fc f96b 	bl	bdad0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c17fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c17fe:	4807      	ldr	r0, [pc, #28]	; (c181c <module_user_init_hook+0x60>)
   c1800:	2100      	movs	r1, #0
   c1802:	f7fc b919 	b.w	bda38 <system_ctrl_set_app_request_handler>
   c1806:	bf00      	nop
   c1808:	000c16e9 	.word	0x000c16e9
   c180c:	2003f400 	.word	0x2003f400
   c1810:	9a271c1e 	.word	0x9a271c1e
   c1814:	2003e720 	.word	0x2003e720
   c1818:	00000000 	.word	0x00000000
   c181c:	000c1785 	.word	0x000c1785

000c1820 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1820:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1822:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1824:	d902      	bls.n	c182c <pinAvailable+0xc>
    return false;
   c1826:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1828:	b002      	add	sp, #8
   c182a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c182c:	f1a0 030b 	sub.w	r3, r0, #11
   c1830:	2b02      	cmp	r3, #2
   c1832:	d81a      	bhi.n	c186a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1834:	4c17      	ldr	r4, [pc, #92]	; (c1894 <pinAvailable+0x74>)
   c1836:	7821      	ldrb	r1, [r4, #0]
   c1838:	f3bf 8f5b 	dmb	ish
   c183c:	f011 0101 	ands.w	r1, r1, #1
   c1840:	d10b      	bne.n	c185a <pinAvailable+0x3a>
   c1842:	4620      	mov	r0, r4
   c1844:	9101      	str	r1, [sp, #4]
   c1846:	f7f2 fc3b 	bl	b40c0 <__cxa_guard_acquire>
   c184a:	9901      	ldr	r1, [sp, #4]
   c184c:	b128      	cbz	r0, c185a <pinAvailable+0x3a>
   c184e:	4812      	ldr	r0, [pc, #72]	; (c1898 <pinAvailable+0x78>)
   c1850:	f7ff fb8d 	bl	c0f6e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1854:	4620      	mov	r0, r4
   c1856:	f7f2 fc38 	bl	b40ca <__cxa_guard_release>
   c185a:	4b0f      	ldr	r3, [pc, #60]	; (c1898 <pinAvailable+0x78>)
   c185c:	7818      	ldrb	r0, [r3, #0]
   c185e:	f7fb ffc1 	bl	bd7e4 <hal_spi_is_enabled>
   c1862:	2800      	cmp	r0, #0
   c1864:	d1df      	bne.n	c1826 <pinAvailable+0x6>
  return true; // 'pin' is available
   c1866:	2001      	movs	r0, #1
   c1868:	e7de      	b.n	c1828 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c186a:	2801      	cmp	r0, #1
   c186c:	d809      	bhi.n	c1882 <pinAvailable+0x62>
   c186e:	f000 f881 	bl	c1974 <_Z19__fetch_global_Wirev>
   c1872:	2100      	movs	r1, #0
   c1874:	7c00      	ldrb	r0, [r0, #16]
   c1876:	f7fb ff55 	bl	bd724 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c187a:	f080 0001 	eor.w	r0, r0, #1
   c187e:	b2c0      	uxtb	r0, r0
   c1880:	e7d2      	b.n	c1828 <pinAvailable+0x8>
   c1882:	3809      	subs	r0, #9
   c1884:	2801      	cmp	r0, #1
   c1886:	d8ee      	bhi.n	c1866 <pinAvailable+0x46>
   c1888:	f000 f8b4 	bl	c19f4 <_Z22__fetch_global_Serial1v>
   c188c:	7c00      	ldrb	r0, [r0, #16]
   c188e:	f7fc f811 	bl	bd8b4 <hal_usart_is_enabled>
   c1892:	e7f2      	b.n	c187a <pinAvailable+0x5a>
   c1894:	2003dd10 	.word	0x2003dd10
   c1898:	2003dd14 	.word	0x2003dd14

000c189c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c189c:	2825      	cmp	r0, #37	; 0x25
{
   c189e:	b538      	push	{r3, r4, r5, lr}
   c18a0:	4604      	mov	r4, r0
   c18a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c18a4:	d80a      	bhi.n	c18bc <pinMode+0x20>
   c18a6:	29ff      	cmp	r1, #255	; 0xff
   c18a8:	d008      	beq.n	c18bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c18aa:	f7ff ffb9 	bl	c1820 <pinAvailable>
   c18ae:	b128      	cbz	r0, c18bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c18b0:	4629      	mov	r1, r5
   c18b2:	4620      	mov	r0, r4
}
   c18b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c18b8:	f7fb bea4 	b.w	bd604 <HAL_Pin_Mode>
}
   c18bc:	bd38      	pop	{r3, r4, r5, pc}

000c18be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c18be:	b538      	push	{r3, r4, r5, lr}
   c18c0:	4604      	mov	r4, r0
   c18c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c18c4:	f7fb fea6 	bl	bd614 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c18c8:	28ff      	cmp	r0, #255	; 0xff
   c18ca:	d010      	beq.n	c18ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c18cc:	2806      	cmp	r0, #6
   c18ce:	d804      	bhi.n	c18da <digitalWrite+0x1c>
   c18d0:	234d      	movs	r3, #77	; 0x4d
   c18d2:	fa23 f000 	lsr.w	r0, r3, r0
   c18d6:	07c3      	lsls	r3, r0, #31
   c18d8:	d409      	bmi.n	c18ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c18da:	4620      	mov	r0, r4
   c18dc:	f7ff ffa0 	bl	c1820 <pinAvailable>
   c18e0:	b128      	cbz	r0, c18ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c18e2:	4629      	mov	r1, r5
   c18e4:	4620      	mov	r0, r4
}
   c18e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c18ea:	f7fb be9b 	b.w	bd624 <HAL_GPIO_Write>
}
   c18ee:	bd38      	pop	{r3, r4, r5, pc}

000c18f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c18f0:	b510      	push	{r4, lr}
   c18f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c18f4:	f7fb fe8e 	bl	bd614 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c18f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c18fa:	b2db      	uxtb	r3, r3
   c18fc:	2b01      	cmp	r3, #1
   c18fe:	d908      	bls.n	c1912 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c1900:	4620      	mov	r0, r4
   c1902:	f7ff ff8d 	bl	c1820 <pinAvailable>
   c1906:	b120      	cbz	r0, c1912 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c1908:	4620      	mov	r0, r4
}
   c190a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c190e:	f7fb be91 	b.w	bd634 <HAL_GPIO_Read>
}
   c1912:	2000      	movs	r0, #0
   c1914:	bd10      	pop	{r4, pc}

000c1916 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1916:	280d      	cmp	r0, #13
{
   c1918:	b510      	push	{r4, lr}
   c191a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c191c:	bf9c      	itt	ls
   c191e:	340e      	addls	r4, #14
   c1920:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1922:	4620      	mov	r0, r4
   c1924:	f7ff ff7c 	bl	c1820 <pinAvailable>
   c1928:	b150      	cbz	r0, c1940 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c192a:	2103      	movs	r1, #3
   c192c:	4620      	mov	r0, r4
   c192e:	f7fb fe61 	bl	bd5f4 <HAL_Validate_Pin_Function>
   c1932:	2803      	cmp	r0, #3
   c1934:	d104      	bne.n	c1940 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1936:	4620      	mov	r0, r4
}
   c1938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c193c:	f7fb bea2 	b.w	bd684 <hal_adc_read>
}
   c1940:	2000      	movs	r0, #0
   c1942:	bd10      	pop	{r4, pc}

000c1944 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1944:	4770      	bx	lr
	...

000c1948 <_Z17acquireWireBufferv>:
{
   c1948:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c194a:	2520      	movs	r5, #32
   c194c:	2314      	movs	r3, #20
{
   c194e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c1950:	6003      	str	r3, [r0, #0]
   c1952:	6085      	str	r5, [r0, #8]
   c1954:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1956:	4906      	ldr	r1, [pc, #24]	; (c1970 <_Z17acquireWireBufferv+0x28>)
   c1958:	4628      	mov	r0, r5
   c195a:	f000 f871 	bl	c1a40 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c195e:	4904      	ldr	r1, [pc, #16]	; (c1970 <_Z17acquireWireBufferv+0x28>)
	};
   c1960:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1962:	4628      	mov	r0, r5
   c1964:	f000 f86c 	bl	c1a40 <_ZnajRKSt9nothrow_t>
	};
   c1968:	60e0      	str	r0, [r4, #12]
}
   c196a:	4620      	mov	r0, r4
   c196c:	bd38      	pop	{r3, r4, r5, pc}
   c196e:	bf00      	nop
   c1970:	000c61b8 	.word	0x000c61b8

000c1974 <_Z19__fetch_global_Wirev>:
{
   c1974:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1976:	4d0e      	ldr	r5, [pc, #56]	; (c19b0 <_Z19__fetch_global_Wirev+0x3c>)
   c1978:	7829      	ldrb	r1, [r5, #0]
   c197a:	f3bf 8f5b 	dmb	ish
   c197e:	f011 0401 	ands.w	r4, r1, #1
{
   c1982:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1984:	d111      	bne.n	c19aa <_Z19__fetch_global_Wirev+0x36>
   c1986:	4628      	mov	r0, r5
   c1988:	f7f2 fb9a 	bl	b40c0 <__cxa_guard_acquire>
   c198c:	b168      	cbz	r0, c19aa <_Z19__fetch_global_Wirev+0x36>
   c198e:	a801      	add	r0, sp, #4
   c1990:	f7ff ffda 	bl	c1948 <_Z17acquireWireBufferv>
   c1994:	aa01      	add	r2, sp, #4
   c1996:	4621      	mov	r1, r4
   c1998:	4806      	ldr	r0, [pc, #24]	; (c19b4 <_Z19__fetch_global_Wirev+0x40>)
   c199a:	f7fd feb7 	bl	bf70c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c199e:	4628      	mov	r0, r5
   c19a0:	f7f2 fb93 	bl	b40ca <__cxa_guard_release>
   c19a4:	4804      	ldr	r0, [pc, #16]	; (c19b8 <_Z19__fetch_global_Wirev+0x44>)
   c19a6:	f000 fe6f 	bl	c2688 <atexit>
	return wire;
}
   c19aa:	4802      	ldr	r0, [pc, #8]	; (c19b4 <_Z19__fetch_global_Wirev+0x40>)
   c19ac:	b007      	add	sp, #28
   c19ae:	bd30      	pop	{r4, r5, pc}
   c19b0:	2003e72c 	.word	0x2003e72c
   c19b4:	2003e730 	.word	0x2003e730
   c19b8:	000c1945 	.word	0x000c1945

000c19bc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c19bc:	4770      	bx	lr
	...

000c19c0 <_Z20acquireSerial1Bufferv>:
{
   c19c0:	b538      	push	{r3, r4, r5, lr}
   c19c2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c19c4:	2514      	movs	r5, #20
   c19c6:	462a      	mov	r2, r5
   c19c8:	2100      	movs	r1, #0
   c19ca:	f000 feab 	bl	c2724 <memset>
   c19ce:	8025      	strh	r5, [r4, #0]
   c19d0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c19d2:	4907      	ldr	r1, [pc, #28]	; (c19f0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c19d4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c19d6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c19d8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c19da:	f000 f831 	bl	c1a40 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c19de:	4904      	ldr	r1, [pc, #16]	; (c19f0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c19e0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c19e2:	4628      	mov	r0, r5
   c19e4:	f000 f82c 	bl	c1a40 <_ZnajRKSt9nothrow_t>
    };
   c19e8:	60e0      	str	r0, [r4, #12]
}
   c19ea:	4620      	mov	r0, r4
   c19ec:	bd38      	pop	{r3, r4, r5, pc}
   c19ee:	bf00      	nop
   c19f0:	000c61b8 	.word	0x000c61b8

000c19f4 <_Z22__fetch_global_Serial1v>:
{
   c19f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c19f6:	4d0e      	ldr	r5, [pc, #56]	; (c1a30 <_Z22__fetch_global_Serial1v+0x3c>)
   c19f8:	7829      	ldrb	r1, [r5, #0]
   c19fa:	f3bf 8f5b 	dmb	ish
   c19fe:	f011 0401 	ands.w	r4, r1, #1
{
   c1a02:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c1a04:	d111      	bne.n	c1a2a <_Z22__fetch_global_Serial1v+0x36>
   c1a06:	4628      	mov	r0, r5
   c1a08:	f7f2 fb5a 	bl	b40c0 <__cxa_guard_acquire>
   c1a0c:	b168      	cbz	r0, c1a2a <_Z22__fetch_global_Serial1v+0x36>
   c1a0e:	a801      	add	r0, sp, #4
   c1a10:	f7ff ffd6 	bl	c19c0 <_Z20acquireSerial1Bufferv>
   c1a14:	aa01      	add	r2, sp, #4
   c1a16:	4621      	mov	r1, r4
   c1a18:	4806      	ldr	r0, [pc, #24]	; (c1a34 <_Z22__fetch_global_Serial1v+0x40>)
   c1a1a:	f7ff fdbf 	bl	c159c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c1a1e:	4628      	mov	r0, r5
   c1a20:	f7f2 fb53 	bl	b40ca <__cxa_guard_release>
   c1a24:	4804      	ldr	r0, [pc, #16]	; (c1a38 <_Z22__fetch_global_Serial1v+0x44>)
   c1a26:	f000 fe2f 	bl	c2688 <atexit>
    return serial1;
}
   c1a2a:	4802      	ldr	r0, [pc, #8]	; (c1a34 <_Z22__fetch_global_Serial1v+0x40>)
   c1a2c:	b007      	add	sp, #28
   c1a2e:	bd30      	pop	{r4, r5, pc}
   c1a30:	2003e744 	.word	0x2003e744
   c1a34:	2003e748 	.word	0x2003e748
   c1a38:	000c19bd 	.word	0x000c19bd

000c1a3c <_ZnwjRKSt9nothrow_t>:
   c1a3c:	f7f2 bb2b 	b.w	b4096 <_Znwj>

000c1a40 <_ZnajRKSt9nothrow_t>:
   c1a40:	f7f2 bb2b 	b.w	b409a <_Znaj>

000c1a44 <_ZSt25__throw_bad_function_callv>:
   c1a44:	b508      	push	{r3, lr}
   c1a46:	f7fc f8e3 	bl	bdc10 <abort>
	...

000c1a4c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1a4c:	4901      	ldr	r1, [pc, #4]	; (c1a54 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c1a4e:	f000 b8f9 	b.w	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1a52:	bf00      	nop
   c1a54:	000c61d4 	.word	0x000c61d4

000c1a58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1a58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1a5a:	2400      	movs	r4, #0
   c1a5c:	2310      	movs	r3, #16
   c1a5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c1a62:	6803      	ldr	r3, [r0, #0]
   c1a64:	4615      	mov	r5, r2
   c1a66:	699e      	ldr	r6, [r3, #24]
   c1a68:	6812      	ldr	r2, [r2, #0]
   c1a6a:	466b      	mov	r3, sp
   c1a6c:	e9cd 4400 	strd	r4, r4, [sp]
   c1a70:	47b0      	blx	r6
   c1a72:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1a76:	f003 0306 	and.w	r3, r3, #6
   c1a7a:	2b06      	cmp	r3, #6
   c1a7c:	bf03      	ittte	eq
   c1a7e:	9b00      	ldreq	r3, [sp, #0]
   c1a80:	602b      	streq	r3, [r5, #0]
   c1a82:	2001      	moveq	r0, #1
   c1a84:	4620      	movne	r0, r4
   c1a86:	b004      	add	sp, #16
   c1a88:	bd70      	pop	{r4, r5, r6, pc}

000c1a8a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1a8a:	9800      	ldr	r0, [sp, #0]
   c1a8c:	4290      	cmp	r0, r2
   c1a8e:	bf14      	ite	ne
   c1a90:	2001      	movne	r0, #1
   c1a92:	2006      	moveq	r0, #6
   c1a94:	4770      	bx	lr
	...

000c1a98 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c1a98:	b510      	push	{r4, lr}
   c1a9a:	4b03      	ldr	r3, [pc, #12]	; (c1aa8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c1a9c:	6003      	str	r3, [r0, #0]
   c1a9e:	4604      	mov	r4, r0
   c1aa0:	f000 f8cd 	bl	c1c3e <_ZNSt9type_infoD1Ev>
   c1aa4:	4620      	mov	r0, r4
   c1aa6:	bd10      	pop	{r4, pc}
   c1aa8:	000c6214 	.word	0x000c6214

000c1aac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c1aac:	b510      	push	{r4, lr}
   c1aae:	4604      	mov	r4, r0
   c1ab0:	f7ff fff2 	bl	c1a98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1ab4:	4620      	mov	r0, r4
   c1ab6:	2108      	movs	r1, #8
   c1ab8:	f7f2 faf3 	bl	b40a2 <_ZdlPvj>
   c1abc:	4620      	mov	r0, r4
   c1abe:	bd10      	pop	{r4, pc}

000c1ac0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c1ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1ac4:	461f      	mov	r7, r3
   c1ac6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c1aca:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c1ace:	4598      	cmp	r8, r3
   c1ad0:	4606      	mov	r6, r0
   c1ad2:	4615      	mov	r5, r2
   c1ad4:	d107      	bne.n	c1ae6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1ad6:	9907      	ldr	r1, [sp, #28]
   c1ad8:	f000 f8b4 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1adc:	b118      	cbz	r0, c1ae6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c1ade:	7165      	strb	r5, [r4, #5]
   c1ae0:	2000      	movs	r0, #0
   c1ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1ae6:	4639      	mov	r1, r7
   c1ae8:	4630      	mov	r0, r6
   c1aea:	f000 f8ab 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1aee:	2800      	cmp	r0, #0
   c1af0:	d0f6      	beq.n	c1ae0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c1af2:	2301      	movs	r3, #1
   c1af4:	f8c4 8000 	str.w	r8, [r4]
   c1af8:	7125      	strb	r5, [r4, #4]
   c1afa:	71a3      	strb	r3, [r4, #6]
   c1afc:	e7f0      	b.n	c1ae0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c1afe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c1afe:	b538      	push	{r3, r4, r5, lr}
   c1b00:	4615      	mov	r5, r2
   c1b02:	461c      	mov	r4, r3
   c1b04:	f000 f89e 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1b08:	b120      	cbz	r0, c1b14 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c1b0a:	2308      	movs	r3, #8
   c1b0c:	60e3      	str	r3, [r4, #12]
   c1b0e:	2306      	movs	r3, #6
   c1b10:	6025      	str	r5, [r4, #0]
   c1b12:	7123      	strb	r3, [r4, #4]
   c1b14:	bd38      	pop	{r3, r4, r5, pc}

000c1b16 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1b18:	4605      	mov	r5, r0
   c1b1a:	460c      	mov	r4, r1
   c1b1c:	9201      	str	r2, [sp, #4]
   c1b1e:	461e      	mov	r6, r3
   c1b20:	f000 f890 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1b24:	b950      	cbnz	r0, c1b3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1b26:	2e03      	cmp	r6, #3
   c1b28:	d808      	bhi.n	c1b3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1b2a:	6823      	ldr	r3, [r4, #0]
   c1b2c:	9a01      	ldr	r2, [sp, #4]
   c1b2e:	695b      	ldr	r3, [r3, #20]
   c1b30:	4629      	mov	r1, r5
   c1b32:	4620      	mov	r0, r4
   c1b34:	b002      	add	sp, #8
   c1b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1b3a:	4718      	bx	r3
   c1b3c:	b002      	add	sp, #8
   c1b3e:	bd70      	pop	{r4, r5, r6, pc}

000c1b40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c1b40:	b510      	push	{r4, lr}
   c1b42:	4b03      	ldr	r3, [pc, #12]	; (c1b50 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1b44:	6003      	str	r3, [r0, #0]
   c1b46:	4604      	mov	r4, r0
   c1b48:	f7ff ffa6 	bl	c1a98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1b4c:	4620      	mov	r0, r4
   c1b4e:	bd10      	pop	{r4, pc}
   c1b50:	000c6274 	.word	0x000c6274

000c1b54 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1b54:	b510      	push	{r4, lr}
   c1b56:	4604      	mov	r4, r0
   c1b58:	f7ff fff2 	bl	c1b40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1b5c:	4620      	mov	r0, r4
   c1b5e:	210c      	movs	r1, #12
   c1b60:	f7f2 fa9f 	bl	b40a2 <_ZdlPvj>
   c1b64:	4620      	mov	r0, r4
   c1b66:	bd10      	pop	{r4, pc}

000c1b68 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1b6a:	9f08      	ldr	r7, [sp, #32]
   c1b6c:	4297      	cmp	r7, r2
   c1b6e:	4605      	mov	r5, r0
   c1b70:	460e      	mov	r6, r1
   c1b72:	4614      	mov	r4, r2
   c1b74:	d00a      	beq.n	c1b8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1b76:	68a8      	ldr	r0, [r5, #8]
   c1b78:	6802      	ldr	r2, [r0, #0]
   c1b7a:	9708      	str	r7, [sp, #32]
   c1b7c:	6a15      	ldr	r5, [r2, #32]
   c1b7e:	4631      	mov	r1, r6
   c1b80:	4622      	mov	r2, r4
   c1b82:	46ac      	mov	ip, r5
   c1b84:	b003      	add	sp, #12
   c1b86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1b8a:	4760      	bx	ip
   c1b8c:	4619      	mov	r1, r3
   c1b8e:	9301      	str	r3, [sp, #4]
   c1b90:	f000 f858 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1b94:	9b01      	ldr	r3, [sp, #4]
   c1b96:	2800      	cmp	r0, #0
   c1b98:	d0ed      	beq.n	c1b76 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c1b9a:	2006      	movs	r0, #6
   c1b9c:	b003      	add	sp, #12
   c1b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c1ba0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c1ba0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1ba4:	460d      	mov	r5, r1
   c1ba6:	4619      	mov	r1, r3
   c1ba8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c1bac:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c1bb0:	4681      	mov	r9, r0
   c1bb2:	4617      	mov	r7, r2
   c1bb4:	4698      	mov	r8, r3
   c1bb6:	f000 f845 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1bba:	b190      	cbz	r0, c1be2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c1bbc:	2d00      	cmp	r5, #0
   c1bbe:	6034      	str	r4, [r6, #0]
   c1bc0:	7137      	strb	r7, [r6, #4]
   c1bc2:	db09      	blt.n	c1bd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c1bc4:	1961      	adds	r1, r4, r5
   c1bc6:	458a      	cmp	sl, r1
   c1bc8:	bf0c      	ite	eq
   c1bca:	2106      	moveq	r1, #6
   c1bcc:	2101      	movne	r1, #1
   c1bce:	71b1      	strb	r1, [r6, #6]
   c1bd0:	2000      	movs	r0, #0
   c1bd2:	b001      	add	sp, #4
   c1bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1bd8:	3502      	adds	r5, #2
   c1bda:	d1f9      	bne.n	c1bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1bdc:	2301      	movs	r3, #1
   c1bde:	71b3      	strb	r3, [r6, #6]
   c1be0:	e7f6      	b.n	c1bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1be2:	4554      	cmp	r4, sl
   c1be4:	d106      	bne.n	c1bf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1be6:	4659      	mov	r1, fp
   c1be8:	4648      	mov	r0, r9
   c1bea:	f000 f82b 	bl	c1c44 <_ZNKSt9type_infoeqERKS_>
   c1bee:	b108      	cbz	r0, c1bf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c1bf0:	7177      	strb	r7, [r6, #5]
   c1bf2:	e7ed      	b.n	c1bd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c1bf4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c1bf8:	6803      	ldr	r3, [r0, #0]
   c1bfa:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c1bfe:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c1c02:	69dc      	ldr	r4, [r3, #28]
   c1c04:	463a      	mov	r2, r7
   c1c06:	4643      	mov	r3, r8
   c1c08:	4629      	mov	r1, r5
   c1c0a:	46a4      	mov	ip, r4
   c1c0c:	b001      	add	sp, #4
   c1c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1c12:	4760      	bx	ip

000c1c14 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1c18:	4607      	mov	r7, r0
   c1c1a:	460c      	mov	r4, r1
   c1c1c:	4615      	mov	r5, r2
   c1c1e:	461e      	mov	r6, r3
   c1c20:	f7ff ff6d 	bl	c1afe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1c24:	b948      	cbnz	r0, c1c3a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1c26:	68b8      	ldr	r0, [r7, #8]
   c1c28:	6803      	ldr	r3, [r0, #0]
   c1c2a:	699f      	ldr	r7, [r3, #24]
   c1c2c:	462a      	mov	r2, r5
   c1c2e:	4633      	mov	r3, r6
   c1c30:	4621      	mov	r1, r4
   c1c32:	46bc      	mov	ip, r7
   c1c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1c38:	4760      	bx	ip
   c1c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c1c3e <_ZNSt9type_infoD1Ev>:
   c1c3e:	4770      	bx	lr

000c1c40 <_ZNKSt9type_info14__is_pointer_pEv>:
   c1c40:	2000      	movs	r0, #0
   c1c42:	4770      	bx	lr

000c1c44 <_ZNKSt9type_infoeqERKS_>:
   c1c44:	4281      	cmp	r1, r0
   c1c46:	b508      	push	{r3, lr}
   c1c48:	d00e      	beq.n	c1c68 <_ZNKSt9type_infoeqERKS_+0x24>
   c1c4a:	6840      	ldr	r0, [r0, #4]
   c1c4c:	7803      	ldrb	r3, [r0, #0]
   c1c4e:	2b2a      	cmp	r3, #42	; 0x2a
   c1c50:	d00c      	beq.n	c1c6c <_ZNKSt9type_infoeqERKS_+0x28>
   c1c52:	6849      	ldr	r1, [r1, #4]
   c1c54:	780b      	ldrb	r3, [r1, #0]
   c1c56:	2b2a      	cmp	r3, #42	; 0x2a
   c1c58:	bf08      	it	eq
   c1c5a:	3101      	addeq	r1, #1
   c1c5c:	f000 fdbe 	bl	c27dc <strcmp>
   c1c60:	fab0 f080 	clz	r0, r0
   c1c64:	0940      	lsrs	r0, r0, #5
   c1c66:	bd08      	pop	{r3, pc}
   c1c68:	2001      	movs	r0, #1
   c1c6a:	e7fc      	b.n	c1c66 <_ZNKSt9type_infoeqERKS_+0x22>
   c1c6c:	2000      	movs	r0, #0
   c1c6e:	e7fa      	b.n	c1c66 <_ZNKSt9type_infoeqERKS_+0x22>

000c1c70 <__aeabi_drsub>:
   c1c70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c1c74:	e002      	b.n	c1c7c <__adddf3>
   c1c76:	bf00      	nop

000c1c78 <__aeabi_dsub>:
   c1c78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c1c7c <__adddf3>:
   c1c7c:	b530      	push	{r4, r5, lr}
   c1c7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c1c82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c1c86:	ea94 0f05 	teq	r4, r5
   c1c8a:	bf08      	it	eq
   c1c8c:	ea90 0f02 	teqeq	r0, r2
   c1c90:	bf1f      	itttt	ne
   c1c92:	ea54 0c00 	orrsne.w	ip, r4, r0
   c1c96:	ea55 0c02 	orrsne.w	ip, r5, r2
   c1c9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c1c9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c1ca2:	f000 80e2 	beq.w	c1e6a <__adddf3+0x1ee>
   c1ca6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c1caa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c1cae:	bfb8      	it	lt
   c1cb0:	426d      	neglt	r5, r5
   c1cb2:	dd0c      	ble.n	c1cce <__adddf3+0x52>
   c1cb4:	442c      	add	r4, r5
   c1cb6:	ea80 0202 	eor.w	r2, r0, r2
   c1cba:	ea81 0303 	eor.w	r3, r1, r3
   c1cbe:	ea82 0000 	eor.w	r0, r2, r0
   c1cc2:	ea83 0101 	eor.w	r1, r3, r1
   c1cc6:	ea80 0202 	eor.w	r2, r0, r2
   c1cca:	ea81 0303 	eor.w	r3, r1, r3
   c1cce:	2d36      	cmp	r5, #54	; 0x36
   c1cd0:	bf88      	it	hi
   c1cd2:	bd30      	pophi	{r4, r5, pc}
   c1cd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c1cd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c1cdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c1ce0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c1ce4:	d002      	beq.n	c1cec <__adddf3+0x70>
   c1ce6:	4240      	negs	r0, r0
   c1ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1cec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c1cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c1cf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c1cf8:	d002      	beq.n	c1d00 <__adddf3+0x84>
   c1cfa:	4252      	negs	r2, r2
   c1cfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c1d00:	ea94 0f05 	teq	r4, r5
   c1d04:	f000 80a7 	beq.w	c1e56 <__adddf3+0x1da>
   c1d08:	f1a4 0401 	sub.w	r4, r4, #1
   c1d0c:	f1d5 0e20 	rsbs	lr, r5, #32
   c1d10:	db0d      	blt.n	c1d2e <__adddf3+0xb2>
   c1d12:	fa02 fc0e 	lsl.w	ip, r2, lr
   c1d16:	fa22 f205 	lsr.w	r2, r2, r5
   c1d1a:	1880      	adds	r0, r0, r2
   c1d1c:	f141 0100 	adc.w	r1, r1, #0
   c1d20:	fa03 f20e 	lsl.w	r2, r3, lr
   c1d24:	1880      	adds	r0, r0, r2
   c1d26:	fa43 f305 	asr.w	r3, r3, r5
   c1d2a:	4159      	adcs	r1, r3
   c1d2c:	e00e      	b.n	c1d4c <__adddf3+0xd0>
   c1d2e:	f1a5 0520 	sub.w	r5, r5, #32
   c1d32:	f10e 0e20 	add.w	lr, lr, #32
   c1d36:	2a01      	cmp	r2, #1
   c1d38:	fa03 fc0e 	lsl.w	ip, r3, lr
   c1d3c:	bf28      	it	cs
   c1d3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   c1d42:	fa43 f305 	asr.w	r3, r3, r5
   c1d46:	18c0      	adds	r0, r0, r3
   c1d48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c1d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1d50:	d507      	bpl.n	c1d62 <__adddf3+0xe6>
   c1d52:	f04f 0e00 	mov.w	lr, #0
   c1d56:	f1dc 0c00 	rsbs	ip, ip, #0
   c1d5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   c1d5e:	eb6e 0101 	sbc.w	r1, lr, r1
   c1d62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c1d66:	d31b      	bcc.n	c1da0 <__adddf3+0x124>
   c1d68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c1d6c:	d30c      	bcc.n	c1d88 <__adddf3+0x10c>
   c1d6e:	0849      	lsrs	r1, r1, #1
   c1d70:	ea5f 0030 	movs.w	r0, r0, rrx
   c1d74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c1d78:	f104 0401 	add.w	r4, r4, #1
   c1d7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c1d80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c1d84:	f080 809a 	bcs.w	c1ebc <__adddf3+0x240>
   c1d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c1d8c:	bf08      	it	eq
   c1d8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c1d92:	f150 0000 	adcs.w	r0, r0, #0
   c1d96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c1d9a:	ea41 0105 	orr.w	r1, r1, r5
   c1d9e:	bd30      	pop	{r4, r5, pc}
   c1da0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c1da4:	4140      	adcs	r0, r0
   c1da6:	eb41 0101 	adc.w	r1, r1, r1
   c1daa:	3c01      	subs	r4, #1
   c1dac:	bf28      	it	cs
   c1dae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c1db2:	d2e9      	bcs.n	c1d88 <__adddf3+0x10c>
   c1db4:	f091 0f00 	teq	r1, #0
   c1db8:	bf04      	itt	eq
   c1dba:	4601      	moveq	r1, r0
   c1dbc:	2000      	moveq	r0, #0
   c1dbe:	fab1 f381 	clz	r3, r1
   c1dc2:	bf08      	it	eq
   c1dc4:	3320      	addeq	r3, #32
   c1dc6:	f1a3 030b 	sub.w	r3, r3, #11
   c1dca:	f1b3 0220 	subs.w	r2, r3, #32
   c1dce:	da0c      	bge.n	c1dea <__adddf3+0x16e>
   c1dd0:	320c      	adds	r2, #12
   c1dd2:	dd08      	ble.n	c1de6 <__adddf3+0x16a>
   c1dd4:	f102 0c14 	add.w	ip, r2, #20
   c1dd8:	f1c2 020c 	rsb	r2, r2, #12
   c1ddc:	fa01 f00c 	lsl.w	r0, r1, ip
   c1de0:	fa21 f102 	lsr.w	r1, r1, r2
   c1de4:	e00c      	b.n	c1e00 <__adddf3+0x184>
   c1de6:	f102 0214 	add.w	r2, r2, #20
   c1dea:	bfd8      	it	le
   c1dec:	f1c2 0c20 	rsble	ip, r2, #32
   c1df0:	fa01 f102 	lsl.w	r1, r1, r2
   c1df4:	fa20 fc0c 	lsr.w	ip, r0, ip
   c1df8:	bfdc      	itt	le
   c1dfa:	ea41 010c 	orrle.w	r1, r1, ip
   c1dfe:	4090      	lslle	r0, r2
   c1e00:	1ae4      	subs	r4, r4, r3
   c1e02:	bfa2      	ittt	ge
   c1e04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c1e08:	4329      	orrge	r1, r5
   c1e0a:	bd30      	popge	{r4, r5, pc}
   c1e0c:	ea6f 0404 	mvn.w	r4, r4
   c1e10:	3c1f      	subs	r4, #31
   c1e12:	da1c      	bge.n	c1e4e <__adddf3+0x1d2>
   c1e14:	340c      	adds	r4, #12
   c1e16:	dc0e      	bgt.n	c1e36 <__adddf3+0x1ba>
   c1e18:	f104 0414 	add.w	r4, r4, #20
   c1e1c:	f1c4 0220 	rsb	r2, r4, #32
   c1e20:	fa20 f004 	lsr.w	r0, r0, r4
   c1e24:	fa01 f302 	lsl.w	r3, r1, r2
   c1e28:	ea40 0003 	orr.w	r0, r0, r3
   c1e2c:	fa21 f304 	lsr.w	r3, r1, r4
   c1e30:	ea45 0103 	orr.w	r1, r5, r3
   c1e34:	bd30      	pop	{r4, r5, pc}
   c1e36:	f1c4 040c 	rsb	r4, r4, #12
   c1e3a:	f1c4 0220 	rsb	r2, r4, #32
   c1e3e:	fa20 f002 	lsr.w	r0, r0, r2
   c1e42:	fa01 f304 	lsl.w	r3, r1, r4
   c1e46:	ea40 0003 	orr.w	r0, r0, r3
   c1e4a:	4629      	mov	r1, r5
   c1e4c:	bd30      	pop	{r4, r5, pc}
   c1e4e:	fa21 f004 	lsr.w	r0, r1, r4
   c1e52:	4629      	mov	r1, r5
   c1e54:	bd30      	pop	{r4, r5, pc}
   c1e56:	f094 0f00 	teq	r4, #0
   c1e5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c1e5e:	bf06      	itte	eq
   c1e60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c1e64:	3401      	addeq	r4, #1
   c1e66:	3d01      	subne	r5, #1
   c1e68:	e74e      	b.n	c1d08 <__adddf3+0x8c>
   c1e6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c1e6e:	bf18      	it	ne
   c1e70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c1e74:	d029      	beq.n	c1eca <__adddf3+0x24e>
   c1e76:	ea94 0f05 	teq	r4, r5
   c1e7a:	bf08      	it	eq
   c1e7c:	ea90 0f02 	teqeq	r0, r2
   c1e80:	d005      	beq.n	c1e8e <__adddf3+0x212>
   c1e82:	ea54 0c00 	orrs.w	ip, r4, r0
   c1e86:	bf04      	itt	eq
   c1e88:	4619      	moveq	r1, r3
   c1e8a:	4610      	moveq	r0, r2
   c1e8c:	bd30      	pop	{r4, r5, pc}
   c1e8e:	ea91 0f03 	teq	r1, r3
   c1e92:	bf1e      	ittt	ne
   c1e94:	2100      	movne	r1, #0
   c1e96:	2000      	movne	r0, #0
   c1e98:	bd30      	popne	{r4, r5, pc}
   c1e9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c1e9e:	d105      	bne.n	c1eac <__adddf3+0x230>
   c1ea0:	0040      	lsls	r0, r0, #1
   c1ea2:	4149      	adcs	r1, r1
   c1ea4:	bf28      	it	cs
   c1ea6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c1eaa:	bd30      	pop	{r4, r5, pc}
   c1eac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c1eb0:	bf3c      	itt	cc
   c1eb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c1eb6:	bd30      	popcc	{r4, r5, pc}
   c1eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1ebc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c1ec0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c1ec4:	f04f 0000 	mov.w	r0, #0
   c1ec8:	bd30      	pop	{r4, r5, pc}
   c1eca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c1ece:	bf1a      	itte	ne
   c1ed0:	4619      	movne	r1, r3
   c1ed2:	4610      	movne	r0, r2
   c1ed4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c1ed8:	bf1c      	itt	ne
   c1eda:	460b      	movne	r3, r1
   c1edc:	4602      	movne	r2, r0
   c1ede:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c1ee2:	bf06      	itte	eq
   c1ee4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c1ee8:	ea91 0f03 	teqeq	r1, r3
   c1eec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c1ef0:	bd30      	pop	{r4, r5, pc}
   c1ef2:	bf00      	nop

000c1ef4 <__aeabi_ui2d>:
   c1ef4:	f090 0f00 	teq	r0, #0
   c1ef8:	bf04      	itt	eq
   c1efa:	2100      	moveq	r1, #0
   c1efc:	4770      	bxeq	lr
   c1efe:	b530      	push	{r4, r5, lr}
   c1f00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1f04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1f08:	f04f 0500 	mov.w	r5, #0
   c1f0c:	f04f 0100 	mov.w	r1, #0
   c1f10:	e750      	b.n	c1db4 <__adddf3+0x138>
   c1f12:	bf00      	nop

000c1f14 <__aeabi_i2d>:
   c1f14:	f090 0f00 	teq	r0, #0
   c1f18:	bf04      	itt	eq
   c1f1a:	2100      	moveq	r1, #0
   c1f1c:	4770      	bxeq	lr
   c1f1e:	b530      	push	{r4, r5, lr}
   c1f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1f24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1f28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c1f2c:	bf48      	it	mi
   c1f2e:	4240      	negmi	r0, r0
   c1f30:	f04f 0100 	mov.w	r1, #0
   c1f34:	e73e      	b.n	c1db4 <__adddf3+0x138>
   c1f36:	bf00      	nop

000c1f38 <__aeabi_f2d>:
   c1f38:	0042      	lsls	r2, r0, #1
   c1f3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c1f3e:	ea4f 0131 	mov.w	r1, r1, rrx
   c1f42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c1f46:	bf1f      	itttt	ne
   c1f48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c1f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c1f50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c1f54:	4770      	bxne	lr
   c1f56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c1f5a:	bf08      	it	eq
   c1f5c:	4770      	bxeq	lr
   c1f5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c1f62:	bf04      	itt	eq
   c1f64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c1f68:	4770      	bxeq	lr
   c1f6a:	b530      	push	{r4, r5, lr}
   c1f6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   c1f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c1f74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c1f78:	e71c      	b.n	c1db4 <__adddf3+0x138>
   c1f7a:	bf00      	nop

000c1f7c <__aeabi_ul2d>:
   c1f7c:	ea50 0201 	orrs.w	r2, r0, r1
   c1f80:	bf08      	it	eq
   c1f82:	4770      	bxeq	lr
   c1f84:	b530      	push	{r4, r5, lr}
   c1f86:	f04f 0500 	mov.w	r5, #0
   c1f8a:	e00a      	b.n	c1fa2 <__aeabi_l2d+0x16>

000c1f8c <__aeabi_l2d>:
   c1f8c:	ea50 0201 	orrs.w	r2, r0, r1
   c1f90:	bf08      	it	eq
   c1f92:	4770      	bxeq	lr
   c1f94:	b530      	push	{r4, r5, lr}
   c1f96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c1f9a:	d502      	bpl.n	c1fa2 <__aeabi_l2d+0x16>
   c1f9c:	4240      	negs	r0, r0
   c1f9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c1fa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c1fa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c1faa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c1fae:	f43f aed8 	beq.w	c1d62 <__adddf3+0xe6>
   c1fb2:	f04f 0203 	mov.w	r2, #3
   c1fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1fba:	bf18      	it	ne
   c1fbc:	3203      	addne	r2, #3
   c1fbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c1fc2:	bf18      	it	ne
   c1fc4:	3203      	addne	r2, #3
   c1fc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c1fca:	f1c2 0320 	rsb	r3, r2, #32
   c1fce:	fa00 fc03 	lsl.w	ip, r0, r3
   c1fd2:	fa20 f002 	lsr.w	r0, r0, r2
   c1fd6:	fa01 fe03 	lsl.w	lr, r1, r3
   c1fda:	ea40 000e 	orr.w	r0, r0, lr
   c1fde:	fa21 f102 	lsr.w	r1, r1, r2
   c1fe2:	4414      	add	r4, r2
   c1fe4:	e6bd      	b.n	c1d62 <__adddf3+0xe6>
   c1fe6:	bf00      	nop

000c1fe8 <__aeabi_dmul>:
   c1fe8:	b570      	push	{r4, r5, r6, lr}
   c1fea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c1fee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c1ff2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c1ff6:	bf1d      	ittte	ne
   c1ff8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c1ffc:	ea94 0f0c 	teqne	r4, ip
   c2000:	ea95 0f0c 	teqne	r5, ip
   c2004:	f000 f8de 	bleq	c21c4 <__aeabi_dmul+0x1dc>
   c2008:	442c      	add	r4, r5
   c200a:	ea81 0603 	eor.w	r6, r1, r3
   c200e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c2012:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c2016:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c201a:	bf18      	it	ne
   c201c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c2020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c2024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c2028:	d038      	beq.n	c209c <__aeabi_dmul+0xb4>
   c202a:	fba0 ce02 	umull	ip, lr, r0, r2
   c202e:	f04f 0500 	mov.w	r5, #0
   c2032:	fbe1 e502 	umlal	lr, r5, r1, r2
   c2036:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c203a:	fbe0 e503 	umlal	lr, r5, r0, r3
   c203e:	f04f 0600 	mov.w	r6, #0
   c2042:	fbe1 5603 	umlal	r5, r6, r1, r3
   c2046:	f09c 0f00 	teq	ip, #0
   c204a:	bf18      	it	ne
   c204c:	f04e 0e01 	orrne.w	lr, lr, #1
   c2050:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c2054:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c2058:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c205c:	d204      	bcs.n	c2068 <__aeabi_dmul+0x80>
   c205e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c2062:	416d      	adcs	r5, r5
   c2064:	eb46 0606 	adc.w	r6, r6, r6
   c2068:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c206c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c2070:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c2074:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c2078:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c207c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c2080:	bf88      	it	hi
   c2082:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c2086:	d81e      	bhi.n	c20c6 <__aeabi_dmul+0xde>
   c2088:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c208c:	bf08      	it	eq
   c208e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c2092:	f150 0000 	adcs.w	r0, r0, #0
   c2096:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c209a:	bd70      	pop	{r4, r5, r6, pc}
   c209c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c20a0:	ea46 0101 	orr.w	r1, r6, r1
   c20a4:	ea40 0002 	orr.w	r0, r0, r2
   c20a8:	ea81 0103 	eor.w	r1, r1, r3
   c20ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c20b0:	bfc2      	ittt	gt
   c20b2:	ebd4 050c 	rsbsgt	r5, r4, ip
   c20b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c20ba:	bd70      	popgt	{r4, r5, r6, pc}
   c20bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c20c0:	f04f 0e00 	mov.w	lr, #0
   c20c4:	3c01      	subs	r4, #1
   c20c6:	f300 80ab 	bgt.w	c2220 <__aeabi_dmul+0x238>
   c20ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c20ce:	bfde      	ittt	le
   c20d0:	2000      	movle	r0, #0
   c20d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c20d6:	bd70      	pople	{r4, r5, r6, pc}
   c20d8:	f1c4 0400 	rsb	r4, r4, #0
   c20dc:	3c20      	subs	r4, #32
   c20de:	da35      	bge.n	c214c <__aeabi_dmul+0x164>
   c20e0:	340c      	adds	r4, #12
   c20e2:	dc1b      	bgt.n	c211c <__aeabi_dmul+0x134>
   c20e4:	f104 0414 	add.w	r4, r4, #20
   c20e8:	f1c4 0520 	rsb	r5, r4, #32
   c20ec:	fa00 f305 	lsl.w	r3, r0, r5
   c20f0:	fa20 f004 	lsr.w	r0, r0, r4
   c20f4:	fa01 f205 	lsl.w	r2, r1, r5
   c20f8:	ea40 0002 	orr.w	r0, r0, r2
   c20fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c2100:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c2104:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c2108:	fa21 f604 	lsr.w	r6, r1, r4
   c210c:	eb42 0106 	adc.w	r1, r2, r6
   c2110:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c2114:	bf08      	it	eq
   c2116:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c211a:	bd70      	pop	{r4, r5, r6, pc}
   c211c:	f1c4 040c 	rsb	r4, r4, #12
   c2120:	f1c4 0520 	rsb	r5, r4, #32
   c2124:	fa00 f304 	lsl.w	r3, r0, r4
   c2128:	fa20 f005 	lsr.w	r0, r0, r5
   c212c:	fa01 f204 	lsl.w	r2, r1, r4
   c2130:	ea40 0002 	orr.w	r0, r0, r2
   c2134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c2138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c213c:	f141 0100 	adc.w	r1, r1, #0
   c2140:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c2144:	bf08      	it	eq
   c2146:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c214a:	bd70      	pop	{r4, r5, r6, pc}
   c214c:	f1c4 0520 	rsb	r5, r4, #32
   c2150:	fa00 f205 	lsl.w	r2, r0, r5
   c2154:	ea4e 0e02 	orr.w	lr, lr, r2
   c2158:	fa20 f304 	lsr.w	r3, r0, r4
   c215c:	fa01 f205 	lsl.w	r2, r1, r5
   c2160:	ea43 0302 	orr.w	r3, r3, r2
   c2164:	fa21 f004 	lsr.w	r0, r1, r4
   c2168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c216c:	fa21 f204 	lsr.w	r2, r1, r4
   c2170:	ea20 0002 	bic.w	r0, r0, r2
   c2174:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c2178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c217c:	bf08      	it	eq
   c217e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c2182:	bd70      	pop	{r4, r5, r6, pc}
   c2184:	f094 0f00 	teq	r4, #0
   c2188:	d10f      	bne.n	c21aa <__aeabi_dmul+0x1c2>
   c218a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c218e:	0040      	lsls	r0, r0, #1
   c2190:	eb41 0101 	adc.w	r1, r1, r1
   c2194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c2198:	bf08      	it	eq
   c219a:	3c01      	subeq	r4, #1
   c219c:	d0f7      	beq.n	c218e <__aeabi_dmul+0x1a6>
   c219e:	ea41 0106 	orr.w	r1, r1, r6
   c21a2:	f095 0f00 	teq	r5, #0
   c21a6:	bf18      	it	ne
   c21a8:	4770      	bxne	lr
   c21aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c21ae:	0052      	lsls	r2, r2, #1
   c21b0:	eb43 0303 	adc.w	r3, r3, r3
   c21b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c21b8:	bf08      	it	eq
   c21ba:	3d01      	subeq	r5, #1
   c21bc:	d0f7      	beq.n	c21ae <__aeabi_dmul+0x1c6>
   c21be:	ea43 0306 	orr.w	r3, r3, r6
   c21c2:	4770      	bx	lr
   c21c4:	ea94 0f0c 	teq	r4, ip
   c21c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c21cc:	bf18      	it	ne
   c21ce:	ea95 0f0c 	teqne	r5, ip
   c21d2:	d00c      	beq.n	c21ee <__aeabi_dmul+0x206>
   c21d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c21d8:	bf18      	it	ne
   c21da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c21de:	d1d1      	bne.n	c2184 <__aeabi_dmul+0x19c>
   c21e0:	ea81 0103 	eor.w	r1, r1, r3
   c21e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c21e8:	f04f 0000 	mov.w	r0, #0
   c21ec:	bd70      	pop	{r4, r5, r6, pc}
   c21ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c21f2:	bf06      	itte	eq
   c21f4:	4610      	moveq	r0, r2
   c21f6:	4619      	moveq	r1, r3
   c21f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c21fc:	d019      	beq.n	c2232 <__aeabi_dmul+0x24a>
   c21fe:	ea94 0f0c 	teq	r4, ip
   c2202:	d102      	bne.n	c220a <__aeabi_dmul+0x222>
   c2204:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c2208:	d113      	bne.n	c2232 <__aeabi_dmul+0x24a>
   c220a:	ea95 0f0c 	teq	r5, ip
   c220e:	d105      	bne.n	c221c <__aeabi_dmul+0x234>
   c2210:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c2214:	bf1c      	itt	ne
   c2216:	4610      	movne	r0, r2
   c2218:	4619      	movne	r1, r3
   c221a:	d10a      	bne.n	c2232 <__aeabi_dmul+0x24a>
   c221c:	ea81 0103 	eor.w	r1, r1, r3
   c2220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c2224:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c2228:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c222c:	f04f 0000 	mov.w	r0, #0
   c2230:	bd70      	pop	{r4, r5, r6, pc}
   c2232:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c2236:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c223a:	bd70      	pop	{r4, r5, r6, pc}

000c223c <__aeabi_ddiv>:
   c223c:	b570      	push	{r4, r5, r6, lr}
   c223e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c2242:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c2246:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c224a:	bf1d      	ittte	ne
   c224c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c2250:	ea94 0f0c 	teqne	r4, ip
   c2254:	ea95 0f0c 	teqne	r5, ip
   c2258:	f000 f8a7 	bleq	c23aa <__aeabi_ddiv+0x16e>
   c225c:	eba4 0405 	sub.w	r4, r4, r5
   c2260:	ea81 0e03 	eor.w	lr, r1, r3
   c2264:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c2268:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c226c:	f000 8088 	beq.w	c2380 <__aeabi_ddiv+0x144>
   c2270:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c2274:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c2278:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c227c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c2280:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c2284:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c2288:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c228c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c2290:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c2294:	429d      	cmp	r5, r3
   c2296:	bf08      	it	eq
   c2298:	4296      	cmpeq	r6, r2
   c229a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c229e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c22a2:	d202      	bcs.n	c22aa <__aeabi_ddiv+0x6e>
   c22a4:	085b      	lsrs	r3, r3, #1
   c22a6:	ea4f 0232 	mov.w	r2, r2, rrx
   c22aa:	1ab6      	subs	r6, r6, r2
   c22ac:	eb65 0503 	sbc.w	r5, r5, r3
   c22b0:	085b      	lsrs	r3, r3, #1
   c22b2:	ea4f 0232 	mov.w	r2, r2, rrx
   c22b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c22ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c22be:	ebb6 0e02 	subs.w	lr, r6, r2
   c22c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c22c6:	bf22      	ittt	cs
   c22c8:	1ab6      	subcs	r6, r6, r2
   c22ca:	4675      	movcs	r5, lr
   c22cc:	ea40 000c 	orrcs.w	r0, r0, ip
   c22d0:	085b      	lsrs	r3, r3, #1
   c22d2:	ea4f 0232 	mov.w	r2, r2, rrx
   c22d6:	ebb6 0e02 	subs.w	lr, r6, r2
   c22da:	eb75 0e03 	sbcs.w	lr, r5, r3
   c22de:	bf22      	ittt	cs
   c22e0:	1ab6      	subcs	r6, r6, r2
   c22e2:	4675      	movcs	r5, lr
   c22e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c22e8:	085b      	lsrs	r3, r3, #1
   c22ea:	ea4f 0232 	mov.w	r2, r2, rrx
   c22ee:	ebb6 0e02 	subs.w	lr, r6, r2
   c22f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c22f6:	bf22      	ittt	cs
   c22f8:	1ab6      	subcs	r6, r6, r2
   c22fa:	4675      	movcs	r5, lr
   c22fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c2300:	085b      	lsrs	r3, r3, #1
   c2302:	ea4f 0232 	mov.w	r2, r2, rrx
   c2306:	ebb6 0e02 	subs.w	lr, r6, r2
   c230a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c230e:	bf22      	ittt	cs
   c2310:	1ab6      	subcs	r6, r6, r2
   c2312:	4675      	movcs	r5, lr
   c2314:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c2318:	ea55 0e06 	orrs.w	lr, r5, r6
   c231c:	d018      	beq.n	c2350 <__aeabi_ddiv+0x114>
   c231e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c2322:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c2326:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c232a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c232e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c2332:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c2336:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c233a:	d1c0      	bne.n	c22be <__aeabi_ddiv+0x82>
   c233c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c2340:	d10b      	bne.n	c235a <__aeabi_ddiv+0x11e>
   c2342:	ea41 0100 	orr.w	r1, r1, r0
   c2346:	f04f 0000 	mov.w	r0, #0
   c234a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c234e:	e7b6      	b.n	c22be <__aeabi_ddiv+0x82>
   c2350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c2354:	bf04      	itt	eq
   c2356:	4301      	orreq	r1, r0
   c2358:	2000      	moveq	r0, #0
   c235a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c235e:	bf88      	it	hi
   c2360:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c2364:	f63f aeaf 	bhi.w	c20c6 <__aeabi_dmul+0xde>
   c2368:	ebb5 0c03 	subs.w	ip, r5, r3
   c236c:	bf04      	itt	eq
   c236e:	ebb6 0c02 	subseq.w	ip, r6, r2
   c2372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c2376:	f150 0000 	adcs.w	r0, r0, #0
   c237a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c237e:	bd70      	pop	{r4, r5, r6, pc}
   c2380:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c2384:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c2388:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c238c:	bfc2      	ittt	gt
   c238e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c2392:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c2396:	bd70      	popgt	{r4, r5, r6, pc}
   c2398:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c239c:	f04f 0e00 	mov.w	lr, #0
   c23a0:	3c01      	subs	r4, #1
   c23a2:	e690      	b.n	c20c6 <__aeabi_dmul+0xde>
   c23a4:	ea45 0e06 	orr.w	lr, r5, r6
   c23a8:	e68d      	b.n	c20c6 <__aeabi_dmul+0xde>
   c23aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c23ae:	ea94 0f0c 	teq	r4, ip
   c23b2:	bf08      	it	eq
   c23b4:	ea95 0f0c 	teqeq	r5, ip
   c23b8:	f43f af3b 	beq.w	c2232 <__aeabi_dmul+0x24a>
   c23bc:	ea94 0f0c 	teq	r4, ip
   c23c0:	d10a      	bne.n	c23d8 <__aeabi_ddiv+0x19c>
   c23c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c23c6:	f47f af34 	bne.w	c2232 <__aeabi_dmul+0x24a>
   c23ca:	ea95 0f0c 	teq	r5, ip
   c23ce:	f47f af25 	bne.w	c221c <__aeabi_dmul+0x234>
   c23d2:	4610      	mov	r0, r2
   c23d4:	4619      	mov	r1, r3
   c23d6:	e72c      	b.n	c2232 <__aeabi_dmul+0x24a>
   c23d8:	ea95 0f0c 	teq	r5, ip
   c23dc:	d106      	bne.n	c23ec <__aeabi_ddiv+0x1b0>
   c23de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c23e2:	f43f aefd 	beq.w	c21e0 <__aeabi_dmul+0x1f8>
   c23e6:	4610      	mov	r0, r2
   c23e8:	4619      	mov	r1, r3
   c23ea:	e722      	b.n	c2232 <__aeabi_dmul+0x24a>
   c23ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c23f0:	bf18      	it	ne
   c23f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c23f6:	f47f aec5 	bne.w	c2184 <__aeabi_dmul+0x19c>
   c23fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c23fe:	f47f af0d 	bne.w	c221c <__aeabi_dmul+0x234>
   c2402:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c2406:	f47f aeeb 	bne.w	c21e0 <__aeabi_dmul+0x1f8>
   c240a:	e712      	b.n	c2232 <__aeabi_dmul+0x24a>

000c240c <__gedf2>:
   c240c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c2410:	e006      	b.n	c2420 <__cmpdf2+0x4>
   c2412:	bf00      	nop

000c2414 <__ledf2>:
   c2414:	f04f 0c01 	mov.w	ip, #1
   c2418:	e002      	b.n	c2420 <__cmpdf2+0x4>
   c241a:	bf00      	nop

000c241c <__cmpdf2>:
   c241c:	f04f 0c01 	mov.w	ip, #1
   c2420:	f84d cd04 	str.w	ip, [sp, #-4]!
   c2424:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c2428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c242c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c2430:	bf18      	it	ne
   c2432:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c2436:	d01b      	beq.n	c2470 <__cmpdf2+0x54>
   c2438:	b001      	add	sp, #4
   c243a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c243e:	bf0c      	ite	eq
   c2440:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c2444:	ea91 0f03 	teqne	r1, r3
   c2448:	bf02      	ittt	eq
   c244a:	ea90 0f02 	teqeq	r0, r2
   c244e:	2000      	moveq	r0, #0
   c2450:	4770      	bxeq	lr
   c2452:	f110 0f00 	cmn.w	r0, #0
   c2456:	ea91 0f03 	teq	r1, r3
   c245a:	bf58      	it	pl
   c245c:	4299      	cmppl	r1, r3
   c245e:	bf08      	it	eq
   c2460:	4290      	cmpeq	r0, r2
   c2462:	bf2c      	ite	cs
   c2464:	17d8      	asrcs	r0, r3, #31
   c2466:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c246a:	f040 0001 	orr.w	r0, r0, #1
   c246e:	4770      	bx	lr
   c2470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c2474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2478:	d102      	bne.n	c2480 <__cmpdf2+0x64>
   c247a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c247e:	d107      	bne.n	c2490 <__cmpdf2+0x74>
   c2480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c2484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c2488:	d1d6      	bne.n	c2438 <__cmpdf2+0x1c>
   c248a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c248e:	d0d3      	beq.n	c2438 <__cmpdf2+0x1c>
   c2490:	f85d 0b04 	ldr.w	r0, [sp], #4
   c2494:	4770      	bx	lr
   c2496:	bf00      	nop

000c2498 <__aeabi_cdrcmple>:
   c2498:	4684      	mov	ip, r0
   c249a:	4610      	mov	r0, r2
   c249c:	4662      	mov	r2, ip
   c249e:	468c      	mov	ip, r1
   c24a0:	4619      	mov	r1, r3
   c24a2:	4663      	mov	r3, ip
   c24a4:	e000      	b.n	c24a8 <__aeabi_cdcmpeq>
   c24a6:	bf00      	nop

000c24a8 <__aeabi_cdcmpeq>:
   c24a8:	b501      	push	{r0, lr}
   c24aa:	f7ff ffb7 	bl	c241c <__cmpdf2>
   c24ae:	2800      	cmp	r0, #0
   c24b0:	bf48      	it	mi
   c24b2:	f110 0f00 	cmnmi.w	r0, #0
   c24b6:	bd01      	pop	{r0, pc}

000c24b8 <__aeabi_dcmpeq>:
   c24b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c24bc:	f7ff fff4 	bl	c24a8 <__aeabi_cdcmpeq>
   c24c0:	bf0c      	ite	eq
   c24c2:	2001      	moveq	r0, #1
   c24c4:	2000      	movne	r0, #0
   c24c6:	f85d fb08 	ldr.w	pc, [sp], #8
   c24ca:	bf00      	nop

000c24cc <__aeabi_dcmplt>:
   c24cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c24d0:	f7ff ffea 	bl	c24a8 <__aeabi_cdcmpeq>
   c24d4:	bf34      	ite	cc
   c24d6:	2001      	movcc	r0, #1
   c24d8:	2000      	movcs	r0, #0
   c24da:	f85d fb08 	ldr.w	pc, [sp], #8
   c24de:	bf00      	nop

000c24e0 <__aeabi_dcmple>:
   c24e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c24e4:	f7ff ffe0 	bl	c24a8 <__aeabi_cdcmpeq>
   c24e8:	bf94      	ite	ls
   c24ea:	2001      	movls	r0, #1
   c24ec:	2000      	movhi	r0, #0
   c24ee:	f85d fb08 	ldr.w	pc, [sp], #8
   c24f2:	bf00      	nop

000c24f4 <__aeabi_dcmpge>:
   c24f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c24f8:	f7ff ffce 	bl	c2498 <__aeabi_cdrcmple>
   c24fc:	bf94      	ite	ls
   c24fe:	2001      	movls	r0, #1
   c2500:	2000      	movhi	r0, #0
   c2502:	f85d fb08 	ldr.w	pc, [sp], #8
   c2506:	bf00      	nop

000c2508 <__aeabi_dcmpgt>:
   c2508:	f84d ed08 	str.w	lr, [sp, #-8]!
   c250c:	f7ff ffc4 	bl	c2498 <__aeabi_cdrcmple>
   c2510:	bf34      	ite	cc
   c2512:	2001      	movcc	r0, #1
   c2514:	2000      	movcs	r0, #0
   c2516:	f85d fb08 	ldr.w	pc, [sp], #8
   c251a:	bf00      	nop

000c251c <__aeabi_d2iz>:
   c251c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c2520:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c2524:	d215      	bcs.n	c2552 <__aeabi_d2iz+0x36>
   c2526:	d511      	bpl.n	c254c <__aeabi_d2iz+0x30>
   c2528:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c252c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2530:	d912      	bls.n	c2558 <__aeabi_d2iz+0x3c>
   c2532:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c2536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c253a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c253e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c2542:	fa23 f002 	lsr.w	r0, r3, r2
   c2546:	bf18      	it	ne
   c2548:	4240      	negne	r0, r0
   c254a:	4770      	bx	lr
   c254c:	f04f 0000 	mov.w	r0, #0
   c2550:	4770      	bx	lr
   c2552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c2556:	d105      	bne.n	c2564 <__aeabi_d2iz+0x48>
   c2558:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c255c:	bf08      	it	eq
   c255e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c2562:	4770      	bx	lr
   c2564:	f04f 0000 	mov.w	r0, #0
   c2568:	4770      	bx	lr
   c256a:	bf00      	nop

000c256c <__aeabi_d2uiz>:
   c256c:	004a      	lsls	r2, r1, #1
   c256e:	d211      	bcs.n	c2594 <__aeabi_d2uiz+0x28>
   c2570:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c2574:	d211      	bcs.n	c259a <__aeabi_d2uiz+0x2e>
   c2576:	d50d      	bpl.n	c2594 <__aeabi_d2uiz+0x28>
   c2578:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c257c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c2580:	d40e      	bmi.n	c25a0 <__aeabi_d2uiz+0x34>
   c2582:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c2586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c258a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c258e:	fa23 f002 	lsr.w	r0, r3, r2
   c2592:	4770      	bx	lr
   c2594:	f04f 0000 	mov.w	r0, #0
   c2598:	4770      	bx	lr
   c259a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c259e:	d102      	bne.n	c25a6 <__aeabi_d2uiz+0x3a>
   c25a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c25a4:	4770      	bx	lr
   c25a6:	f04f 0000 	mov.w	r0, #0
   c25aa:	4770      	bx	lr

000c25ac <__aeabi_d2f>:
   c25ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c25b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c25b4:	bf24      	itt	cs
   c25b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c25ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c25be:	d90d      	bls.n	c25dc <__aeabi_d2f+0x30>
   c25c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c25c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c25c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c25cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c25d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c25d4:	bf08      	it	eq
   c25d6:	f020 0001 	biceq.w	r0, r0, #1
   c25da:	4770      	bx	lr
   c25dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c25e0:	d121      	bne.n	c2626 <__aeabi_d2f+0x7a>
   c25e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c25e6:	bfbc      	itt	lt
   c25e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c25ec:	4770      	bxlt	lr
   c25ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c25f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c25f6:	f1c2 0218 	rsb	r2, r2, #24
   c25fa:	f1c2 0c20 	rsb	ip, r2, #32
   c25fe:	fa10 f30c 	lsls.w	r3, r0, ip
   c2602:	fa20 f002 	lsr.w	r0, r0, r2
   c2606:	bf18      	it	ne
   c2608:	f040 0001 	orrne.w	r0, r0, #1
   c260c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c2610:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c2614:	fa03 fc0c 	lsl.w	ip, r3, ip
   c2618:	ea40 000c 	orr.w	r0, r0, ip
   c261c:	fa23 f302 	lsr.w	r3, r3, r2
   c2620:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c2624:	e7cc      	b.n	c25c0 <__aeabi_d2f+0x14>
   c2626:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c262a:	d107      	bne.n	c263c <__aeabi_d2f+0x90>
   c262c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c2630:	bf1e      	ittt	ne
   c2632:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c2636:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c263a:	4770      	bxne	lr
   c263c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c2640:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c2644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c2648:	4770      	bx	lr
   c264a:	bf00      	nop

000c264c <__aeabi_d2ulz>:
   c264c:	b5d0      	push	{r4, r6, r7, lr}
   c264e:	4b0c      	ldr	r3, [pc, #48]	; (c2680 <__aeabi_d2ulz+0x34>)
   c2650:	2200      	movs	r2, #0
   c2652:	4606      	mov	r6, r0
   c2654:	460f      	mov	r7, r1
   c2656:	f7ff fcc7 	bl	c1fe8 <__aeabi_dmul>
   c265a:	f7ff ff87 	bl	c256c <__aeabi_d2uiz>
   c265e:	4604      	mov	r4, r0
   c2660:	f7ff fc48 	bl	c1ef4 <__aeabi_ui2d>
   c2664:	4b07      	ldr	r3, [pc, #28]	; (c2684 <__aeabi_d2ulz+0x38>)
   c2666:	2200      	movs	r2, #0
   c2668:	f7ff fcbe 	bl	c1fe8 <__aeabi_dmul>
   c266c:	4602      	mov	r2, r0
   c266e:	460b      	mov	r3, r1
   c2670:	4630      	mov	r0, r6
   c2672:	4639      	mov	r1, r7
   c2674:	f7ff fb00 	bl	c1c78 <__aeabi_dsub>
   c2678:	f7ff ff78 	bl	c256c <__aeabi_d2uiz>
   c267c:	4621      	mov	r1, r4
   c267e:	bdd0      	pop	{r4, r6, r7, pc}
   c2680:	3df00000 	.word	0x3df00000
   c2684:	41f00000 	.word	0x41f00000

000c2688 <atexit>:
   c2688:	2300      	movs	r3, #0
   c268a:	4601      	mov	r1, r0
   c268c:	461a      	mov	r2, r3
   c268e:	4618      	mov	r0, r3
   c2690:	f001 b808 	b.w	c36a4 <__register_exitproc>

000c2694 <atof>:
   c2694:	2100      	movs	r1, #0
   c2696:	f000 bf6d 	b.w	c3574 <strtod>

000c269a <atoi>:
   c269a:	220a      	movs	r2, #10
   c269c:	2100      	movs	r1, #0
   c269e:	f000 bff7 	b.w	c3690 <strtol>
	...

000c26a4 <isprint>:
   c26a4:	4b02      	ldr	r3, [pc, #8]	; (c26b0 <isprint+0xc>)
   c26a6:	4418      	add	r0, r3
   c26a8:	7840      	ldrb	r0, [r0, #1]
   c26aa:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c26ae:	4770      	bx	lr
   c26b0:	000c6380 	.word	0x000c6380

000c26b4 <memcmp>:
   c26b4:	b510      	push	{r4, lr}
   c26b6:	3901      	subs	r1, #1
   c26b8:	4402      	add	r2, r0
   c26ba:	4290      	cmp	r0, r2
   c26bc:	d101      	bne.n	c26c2 <memcmp+0xe>
   c26be:	2000      	movs	r0, #0
   c26c0:	e005      	b.n	c26ce <memcmp+0x1a>
   c26c2:	7803      	ldrb	r3, [r0, #0]
   c26c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c26c8:	42a3      	cmp	r3, r4
   c26ca:	d001      	beq.n	c26d0 <memcmp+0x1c>
   c26cc:	1b18      	subs	r0, r3, r4
   c26ce:	bd10      	pop	{r4, pc}
   c26d0:	3001      	adds	r0, #1
   c26d2:	e7f2      	b.n	c26ba <memcmp+0x6>

000c26d4 <memcpy>:
   c26d4:	440a      	add	r2, r1
   c26d6:	4291      	cmp	r1, r2
   c26d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c26dc:	d100      	bne.n	c26e0 <memcpy+0xc>
   c26de:	4770      	bx	lr
   c26e0:	b510      	push	{r4, lr}
   c26e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   c26e6:	f803 4f01 	strb.w	r4, [r3, #1]!
   c26ea:	4291      	cmp	r1, r2
   c26ec:	d1f9      	bne.n	c26e2 <memcpy+0xe>
   c26ee:	bd10      	pop	{r4, pc}

000c26f0 <memmove>:
   c26f0:	4288      	cmp	r0, r1
   c26f2:	b510      	push	{r4, lr}
   c26f4:	eb01 0402 	add.w	r4, r1, r2
   c26f8:	d902      	bls.n	c2700 <memmove+0x10>
   c26fa:	4284      	cmp	r4, r0
   c26fc:	4623      	mov	r3, r4
   c26fe:	d807      	bhi.n	c2710 <memmove+0x20>
   c2700:	1e43      	subs	r3, r0, #1
   c2702:	42a1      	cmp	r1, r4
   c2704:	d008      	beq.n	c2718 <memmove+0x28>
   c2706:	f811 2b01 	ldrb.w	r2, [r1], #1
   c270a:	f803 2f01 	strb.w	r2, [r3, #1]!
   c270e:	e7f8      	b.n	c2702 <memmove+0x12>
   c2710:	4402      	add	r2, r0
   c2712:	4601      	mov	r1, r0
   c2714:	428a      	cmp	r2, r1
   c2716:	d100      	bne.n	c271a <memmove+0x2a>
   c2718:	bd10      	pop	{r4, pc}
   c271a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c271e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c2722:	e7f7      	b.n	c2714 <memmove+0x24>

000c2724 <memset>:
   c2724:	4402      	add	r2, r0
   c2726:	4603      	mov	r3, r0
   c2728:	4293      	cmp	r3, r2
   c272a:	d100      	bne.n	c272e <memset+0xa>
   c272c:	4770      	bx	lr
   c272e:	f803 1b01 	strb.w	r1, [r3], #1
   c2732:	e7f9      	b.n	c2728 <memset+0x4>

000c2734 <srand>:
   c2734:	b538      	push	{r3, r4, r5, lr}
   c2736:	4b10      	ldr	r3, [pc, #64]	; (c2778 <srand+0x44>)
   c2738:	681d      	ldr	r5, [r3, #0]
   c273a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c273c:	4604      	mov	r4, r0
   c273e:	b9b3      	cbnz	r3, c276e <srand+0x3a>
   c2740:	2018      	movs	r0, #24
   c2742:	f7fb fa2d 	bl	bdba0 <malloc>
   c2746:	4602      	mov	r2, r0
   c2748:	63a8      	str	r0, [r5, #56]	; 0x38
   c274a:	b920      	cbnz	r0, c2756 <srand+0x22>
   c274c:	4b0b      	ldr	r3, [pc, #44]	; (c277c <srand+0x48>)
   c274e:	480c      	ldr	r0, [pc, #48]	; (c2780 <srand+0x4c>)
   c2750:	2142      	movs	r1, #66	; 0x42
   c2752:	f7fb fa75 	bl	bdc40 <__assert_func>
   c2756:	490b      	ldr	r1, [pc, #44]	; (c2784 <srand+0x50>)
   c2758:	4b0b      	ldr	r3, [pc, #44]	; (c2788 <srand+0x54>)
   c275a:	e9c0 1300 	strd	r1, r3, [r0]
   c275e:	4b0b      	ldr	r3, [pc, #44]	; (c278c <srand+0x58>)
   c2760:	6083      	str	r3, [r0, #8]
   c2762:	230b      	movs	r3, #11
   c2764:	8183      	strh	r3, [r0, #12]
   c2766:	2100      	movs	r1, #0
   c2768:	2001      	movs	r0, #1
   c276a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c276e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c2770:	2200      	movs	r2, #0
   c2772:	611c      	str	r4, [r3, #16]
   c2774:	615a      	str	r2, [r3, #20]
   c2776:	bd38      	pop	{r3, r4, r5, pc}
   c2778:	2003db38 	.word	0x2003db38
   c277c:	000c62ad 	.word	0x000c62ad
   c2780:	000c62c4 	.word	0x000c62c4
   c2784:	abcd330e 	.word	0xabcd330e
   c2788:	e66d1234 	.word	0xe66d1234
   c278c:	0005deec 	.word	0x0005deec

000c2790 <strcat>:
   c2790:	b510      	push	{r4, lr}
   c2792:	4602      	mov	r2, r0
   c2794:	7814      	ldrb	r4, [r2, #0]
   c2796:	4613      	mov	r3, r2
   c2798:	3201      	adds	r2, #1
   c279a:	2c00      	cmp	r4, #0
   c279c:	d1fa      	bne.n	c2794 <strcat+0x4>
   c279e:	3b01      	subs	r3, #1
   c27a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   c27a4:	f803 2f01 	strb.w	r2, [r3, #1]!
   c27a8:	2a00      	cmp	r2, #0
   c27aa:	d1f9      	bne.n	c27a0 <strcat+0x10>
   c27ac:	bd10      	pop	{r4, pc}

000c27ae <strchr>:
   c27ae:	b2c9      	uxtb	r1, r1
   c27b0:	4603      	mov	r3, r0
   c27b2:	f810 2b01 	ldrb.w	r2, [r0], #1
   c27b6:	b11a      	cbz	r2, c27c0 <strchr+0x12>
   c27b8:	428a      	cmp	r2, r1
   c27ba:	d1f9      	bne.n	c27b0 <strchr+0x2>
   c27bc:	4618      	mov	r0, r3
   c27be:	4770      	bx	lr
   c27c0:	2900      	cmp	r1, #0
   c27c2:	bf18      	it	ne
   c27c4:	2300      	movne	r3, #0
   c27c6:	e7f9      	b.n	c27bc <strchr+0xe>

000c27c8 <strchrnul>:
   c27c8:	b510      	push	{r4, lr}
   c27ca:	4604      	mov	r4, r0
   c27cc:	f7ff ffef 	bl	c27ae <strchr>
   c27d0:	b918      	cbnz	r0, c27da <strchrnul+0x12>
   c27d2:	4620      	mov	r0, r4
   c27d4:	f000 f831 	bl	c283a <strlen>
   c27d8:	4420      	add	r0, r4
   c27da:	bd10      	pop	{r4, pc}

000c27dc <strcmp>:
   c27dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   c27e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   c27e4:	2a01      	cmp	r2, #1
   c27e6:	bf28      	it	cs
   c27e8:	429a      	cmpcs	r2, r3
   c27ea:	d0f7      	beq.n	c27dc <strcmp>
   c27ec:	1ad0      	subs	r0, r2, r3
   c27ee:	4770      	bx	lr

000c27f0 <strcpy>:
   c27f0:	4603      	mov	r3, r0
   c27f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   c27f6:	f803 2b01 	strb.w	r2, [r3], #1
   c27fa:	2a00      	cmp	r2, #0
   c27fc:	d1f9      	bne.n	c27f2 <strcpy+0x2>
   c27fe:	4770      	bx	lr

000c2800 <strdup>:
   c2800:	4b02      	ldr	r3, [pc, #8]	; (c280c <strdup+0xc>)
   c2802:	4601      	mov	r1, r0
   c2804:	6818      	ldr	r0, [r3, #0]
   c2806:	f000 b803 	b.w	c2810 <_strdup_r>
   c280a:	bf00      	nop
   c280c:	2003db38 	.word	0x2003db38

000c2810 <_strdup_r>:
   c2810:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c2812:	4604      	mov	r4, r0
   c2814:	4608      	mov	r0, r1
   c2816:	460d      	mov	r5, r1
   c2818:	f000 f80f 	bl	c283a <strlen>
   c281c:	1c42      	adds	r2, r0, #1
   c281e:	4611      	mov	r1, r2
   c2820:	4620      	mov	r0, r4
   c2822:	9201      	str	r2, [sp, #4]
   c2824:	f7fb f9fc 	bl	bdc20 <_malloc_r>
   c2828:	4604      	mov	r4, r0
   c282a:	b118      	cbz	r0, c2834 <_strdup_r+0x24>
   c282c:	9a01      	ldr	r2, [sp, #4]
   c282e:	4629      	mov	r1, r5
   c2830:	f7ff ff50 	bl	c26d4 <memcpy>
   c2834:	4620      	mov	r0, r4
   c2836:	b003      	add	sp, #12
   c2838:	bd30      	pop	{r4, r5, pc}

000c283a <strlen>:
   c283a:	4603      	mov	r3, r0
   c283c:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2840:	2a00      	cmp	r2, #0
   c2842:	d1fb      	bne.n	c283c <strlen+0x2>
   c2844:	1a18      	subs	r0, r3, r0
   c2846:	3801      	subs	r0, #1
   c2848:	4770      	bx	lr
	...

000c284c <strlwr>:
   c284c:	b510      	push	{r4, lr}
   c284e:	4c07      	ldr	r4, [pc, #28]	; (c286c <strlwr+0x20>)
   c2850:	1e42      	subs	r2, r0, #1
   c2852:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c2856:	b903      	cbnz	r3, c285a <strlwr+0xe>
   c2858:	bd10      	pop	{r4, pc}
   c285a:	5ce1      	ldrb	r1, [r4, r3]
   c285c:	f001 0103 	and.w	r1, r1, #3
   c2860:	2901      	cmp	r1, #1
   c2862:	bf08      	it	eq
   c2864:	3320      	addeq	r3, #32
   c2866:	7013      	strb	r3, [r2, #0]
   c2868:	e7f3      	b.n	c2852 <strlwr+0x6>
   c286a:	bf00      	nop
   c286c:	000c6381 	.word	0x000c6381

000c2870 <strncmp>:
   c2870:	b510      	push	{r4, lr}
   c2872:	b17a      	cbz	r2, c2894 <strncmp+0x24>
   c2874:	4603      	mov	r3, r0
   c2876:	3901      	subs	r1, #1
   c2878:	1884      	adds	r4, r0, r2
   c287a:	f813 0b01 	ldrb.w	r0, [r3], #1
   c287e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c2882:	4290      	cmp	r0, r2
   c2884:	d101      	bne.n	c288a <strncmp+0x1a>
   c2886:	42a3      	cmp	r3, r4
   c2888:	d101      	bne.n	c288e <strncmp+0x1e>
   c288a:	1a80      	subs	r0, r0, r2
   c288c:	bd10      	pop	{r4, pc}
   c288e:	2800      	cmp	r0, #0
   c2890:	d1f3      	bne.n	c287a <strncmp+0xa>
   c2892:	e7fa      	b.n	c288a <strncmp+0x1a>
   c2894:	4610      	mov	r0, r2
   c2896:	e7f9      	b.n	c288c <strncmp+0x1c>

000c2898 <strncpy>:
   c2898:	b510      	push	{r4, lr}
   c289a:	3901      	subs	r1, #1
   c289c:	4603      	mov	r3, r0
   c289e:	b132      	cbz	r2, c28ae <strncpy+0x16>
   c28a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c28a4:	f803 4b01 	strb.w	r4, [r3], #1
   c28a8:	3a01      	subs	r2, #1
   c28aa:	2c00      	cmp	r4, #0
   c28ac:	d1f7      	bne.n	c289e <strncpy+0x6>
   c28ae:	441a      	add	r2, r3
   c28b0:	2100      	movs	r1, #0
   c28b2:	4293      	cmp	r3, r2
   c28b4:	d100      	bne.n	c28b8 <strncpy+0x20>
   c28b6:	bd10      	pop	{r4, pc}
   c28b8:	f803 1b01 	strb.w	r1, [r3], #1
   c28bc:	e7f9      	b.n	c28b2 <strncpy+0x1a>

000c28be <strnlen>:
   c28be:	b510      	push	{r4, lr}
   c28c0:	4602      	mov	r2, r0
   c28c2:	4401      	add	r1, r0
   c28c4:	428a      	cmp	r2, r1
   c28c6:	4613      	mov	r3, r2
   c28c8:	d003      	beq.n	c28d2 <strnlen+0x14>
   c28ca:	781c      	ldrb	r4, [r3, #0]
   c28cc:	3201      	adds	r2, #1
   c28ce:	2c00      	cmp	r4, #0
   c28d0:	d1f8      	bne.n	c28c4 <strnlen+0x6>
   c28d2:	1a18      	subs	r0, r3, r0
   c28d4:	bd10      	pop	{r4, pc}

000c28d6 <strrchr>:
   c28d6:	b538      	push	{r3, r4, r5, lr}
   c28d8:	4603      	mov	r3, r0
   c28da:	460c      	mov	r4, r1
   c28dc:	b969      	cbnz	r1, c28fa <strrchr+0x24>
   c28de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c28e2:	f7ff bf64 	b.w	c27ae <strchr>
   c28e6:	1c43      	adds	r3, r0, #1
   c28e8:	4605      	mov	r5, r0
   c28ea:	4621      	mov	r1, r4
   c28ec:	4618      	mov	r0, r3
   c28ee:	f7ff ff5e 	bl	c27ae <strchr>
   c28f2:	2800      	cmp	r0, #0
   c28f4:	d1f7      	bne.n	c28e6 <strrchr+0x10>
   c28f6:	4628      	mov	r0, r5
   c28f8:	bd38      	pop	{r3, r4, r5, pc}
   c28fa:	2500      	movs	r5, #0
   c28fc:	e7f5      	b.n	c28ea <strrchr+0x14>

000c28fe <strstr>:
   c28fe:	780a      	ldrb	r2, [r1, #0]
   c2900:	b570      	push	{r4, r5, r6, lr}
   c2902:	b96a      	cbnz	r2, c2920 <strstr+0x22>
   c2904:	bd70      	pop	{r4, r5, r6, pc}
   c2906:	429a      	cmp	r2, r3
   c2908:	d109      	bne.n	c291e <strstr+0x20>
   c290a:	460c      	mov	r4, r1
   c290c:	4605      	mov	r5, r0
   c290e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c2912:	2b00      	cmp	r3, #0
   c2914:	d0f6      	beq.n	c2904 <strstr+0x6>
   c2916:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c291a:	429e      	cmp	r6, r3
   c291c:	d0f7      	beq.n	c290e <strstr+0x10>
   c291e:	3001      	adds	r0, #1
   c2920:	7803      	ldrb	r3, [r0, #0]
   c2922:	2b00      	cmp	r3, #0
   c2924:	d1ef      	bne.n	c2906 <strstr+0x8>
   c2926:	4618      	mov	r0, r3
   c2928:	e7ec      	b.n	c2904 <strstr+0x6>

000c292a <sulp>:
   c292a:	b570      	push	{r4, r5, r6, lr}
   c292c:	4604      	mov	r4, r0
   c292e:	460d      	mov	r5, r1
   c2930:	ec45 4b10 	vmov	d0, r4, r5
   c2934:	4616      	mov	r6, r2
   c2936:	f001 fe0f 	bl	c4558 <__ulp>
   c293a:	ec51 0b10 	vmov	r0, r1, d0
   c293e:	b17e      	cbz	r6, c2960 <sulp+0x36>
   c2940:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c2944:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c2948:	2b00      	cmp	r3, #0
   c294a:	dd09      	ble.n	c2960 <sulp+0x36>
   c294c:	051b      	lsls	r3, r3, #20
   c294e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c2952:	2400      	movs	r4, #0
   c2954:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c2958:	4622      	mov	r2, r4
   c295a:	462b      	mov	r3, r5
   c295c:	f7ff fb44 	bl	c1fe8 <__aeabi_dmul>
   c2960:	bd70      	pop	{r4, r5, r6, pc}
   c2962:	0000      	movs	r0, r0
   c2964:	0000      	movs	r0, r0
	...

000c2968 <_strtod_l>:
   c2968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c296c:	ed2d 8b02 	vpush	{d8}
   c2970:	b09d      	sub	sp, #116	; 0x74
   c2972:	461f      	mov	r7, r3
   c2974:	2300      	movs	r3, #0
   c2976:	9318      	str	r3, [sp, #96]	; 0x60
   c2978:	4ba2      	ldr	r3, [pc, #648]	; (c2c04 <_strtod_l+0x29c>)
   c297a:	9213      	str	r2, [sp, #76]	; 0x4c
   c297c:	681b      	ldr	r3, [r3, #0]
   c297e:	9305      	str	r3, [sp, #20]
   c2980:	4604      	mov	r4, r0
   c2982:	4618      	mov	r0, r3
   c2984:	4688      	mov	r8, r1
   c2986:	f7ff ff58 	bl	c283a <strlen>
   c298a:	f04f 0a00 	mov.w	sl, #0
   c298e:	4605      	mov	r5, r0
   c2990:	f04f 0b00 	mov.w	fp, #0
   c2994:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c299a:	781a      	ldrb	r2, [r3, #0]
   c299c:	2a2b      	cmp	r2, #43	; 0x2b
   c299e:	d04e      	beq.n	c2a3e <_strtod_l+0xd6>
   c29a0:	d83b      	bhi.n	c2a1a <_strtod_l+0xb2>
   c29a2:	2a0d      	cmp	r2, #13
   c29a4:	d834      	bhi.n	c2a10 <_strtod_l+0xa8>
   c29a6:	2a08      	cmp	r2, #8
   c29a8:	d834      	bhi.n	c2a14 <_strtod_l+0xac>
   c29aa:	2a00      	cmp	r2, #0
   c29ac:	d03e      	beq.n	c2a2c <_strtod_l+0xc4>
   c29ae:	2300      	movs	r3, #0
   c29b0:	930a      	str	r3, [sp, #40]	; 0x28
   c29b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c29b4:	7833      	ldrb	r3, [r6, #0]
   c29b6:	2b30      	cmp	r3, #48	; 0x30
   c29b8:	f040 80b0 	bne.w	c2b1c <_strtod_l+0x1b4>
   c29bc:	7873      	ldrb	r3, [r6, #1]
   c29be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c29c2:	2b58      	cmp	r3, #88	; 0x58
   c29c4:	d168      	bne.n	c2a98 <_strtod_l+0x130>
   c29c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c29c8:	9301      	str	r3, [sp, #4]
   c29ca:	ab18      	add	r3, sp, #96	; 0x60
   c29cc:	9702      	str	r7, [sp, #8]
   c29ce:	9300      	str	r3, [sp, #0]
   c29d0:	4a8d      	ldr	r2, [pc, #564]	; (c2c08 <_strtod_l+0x2a0>)
   c29d2:	ab19      	add	r3, sp, #100	; 0x64
   c29d4:	a917      	add	r1, sp, #92	; 0x5c
   c29d6:	4620      	mov	r0, r4
   c29d8:	f000 ff2e 	bl	c3838 <__gethex>
   c29dc:	f010 0707 	ands.w	r7, r0, #7
   c29e0:	4605      	mov	r5, r0
   c29e2:	d005      	beq.n	c29f0 <_strtod_l+0x88>
   c29e4:	2f06      	cmp	r7, #6
   c29e6:	d12c      	bne.n	c2a42 <_strtod_l+0xda>
   c29e8:	3601      	adds	r6, #1
   c29ea:	2300      	movs	r3, #0
   c29ec:	9617      	str	r6, [sp, #92]	; 0x5c
   c29ee:	930a      	str	r3, [sp, #40]	; 0x28
   c29f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c29f2:	2b00      	cmp	r3, #0
   c29f4:	f040 8590 	bne.w	c3518 <_strtod_l+0xbb0>
   c29f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c29fa:	b1eb      	cbz	r3, c2a38 <_strtod_l+0xd0>
   c29fc:	4652      	mov	r2, sl
   c29fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c2a02:	ec43 2b10 	vmov	d0, r2, r3
   c2a06:	b01d      	add	sp, #116	; 0x74
   c2a08:	ecbd 8b02 	vpop	{d8}
   c2a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2a10:	2a20      	cmp	r2, #32
   c2a12:	d1cc      	bne.n	c29ae <_strtod_l+0x46>
   c2a14:	3301      	adds	r3, #1
   c2a16:	9317      	str	r3, [sp, #92]	; 0x5c
   c2a18:	e7be      	b.n	c2998 <_strtod_l+0x30>
   c2a1a:	2a2d      	cmp	r2, #45	; 0x2d
   c2a1c:	d1c7      	bne.n	c29ae <_strtod_l+0x46>
   c2a1e:	2201      	movs	r2, #1
   c2a20:	920a      	str	r2, [sp, #40]	; 0x28
   c2a22:	1c5a      	adds	r2, r3, #1
   c2a24:	9217      	str	r2, [sp, #92]	; 0x5c
   c2a26:	785b      	ldrb	r3, [r3, #1]
   c2a28:	2b00      	cmp	r3, #0
   c2a2a:	d1c2      	bne.n	c29b2 <_strtod_l+0x4a>
   c2a2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c2a2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2a32:	2b00      	cmp	r3, #0
   c2a34:	f040 856e 	bne.w	c3514 <_strtod_l+0xbac>
   c2a38:	4652      	mov	r2, sl
   c2a3a:	465b      	mov	r3, fp
   c2a3c:	e7e1      	b.n	c2a02 <_strtod_l+0x9a>
   c2a3e:	2200      	movs	r2, #0
   c2a40:	e7ee      	b.n	c2a20 <_strtod_l+0xb8>
   c2a42:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c2a44:	b13a      	cbz	r2, c2a56 <_strtod_l+0xee>
   c2a46:	2135      	movs	r1, #53	; 0x35
   c2a48:	a81a      	add	r0, sp, #104	; 0x68
   c2a4a:	f001 fe90 	bl	c476e <__copybits>
   c2a4e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2a50:	4620      	mov	r0, r4
   c2a52:	f001 fa4f 	bl	c3ef4 <_Bfree>
   c2a56:	3f01      	subs	r7, #1
   c2a58:	2f04      	cmp	r7, #4
   c2a5a:	d806      	bhi.n	c2a6a <_strtod_l+0x102>
   c2a5c:	e8df f007 	tbb	[pc, r7]
   c2a60:	1714030a 	.word	0x1714030a
   c2a64:	0a          	.byte	0x0a
   c2a65:	00          	.byte	0x00
   c2a66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c2a6a:	0728      	lsls	r0, r5, #28
   c2a6c:	d5c0      	bpl.n	c29f0 <_strtod_l+0x88>
   c2a6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c2a72:	e7bd      	b.n	c29f0 <_strtod_l+0x88>
   c2a74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c2a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c2a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c2a7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c2a82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c2a86:	e7f0      	b.n	c2a6a <_strtod_l+0x102>
   c2a88:	f8df b180 	ldr.w	fp, [pc, #384]	; c2c0c <_strtod_l+0x2a4>
   c2a8c:	e7ed      	b.n	c2a6a <_strtod_l+0x102>
   c2a8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c2a92:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c2a96:	e7e8      	b.n	c2a6a <_strtod_l+0x102>
   c2a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2a9a:	1c5a      	adds	r2, r3, #1
   c2a9c:	9217      	str	r2, [sp, #92]	; 0x5c
   c2a9e:	785b      	ldrb	r3, [r3, #1]
   c2aa0:	2b30      	cmp	r3, #48	; 0x30
   c2aa2:	d0f9      	beq.n	c2a98 <_strtod_l+0x130>
   c2aa4:	2b00      	cmp	r3, #0
   c2aa6:	d0a3      	beq.n	c29f0 <_strtod_l+0x88>
   c2aa8:	2301      	movs	r3, #1
   c2aaa:	f04f 0900 	mov.w	r9, #0
   c2aae:	9304      	str	r3, [sp, #16]
   c2ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2ab2:	9308      	str	r3, [sp, #32]
   c2ab4:	f8cd 901c 	str.w	r9, [sp, #28]
   c2ab8:	464f      	mov	r7, r9
   c2aba:	220a      	movs	r2, #10
   c2abc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c2abe:	7806      	ldrb	r6, [r0, #0]
   c2ac0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c2ac4:	b2d9      	uxtb	r1, r3
   c2ac6:	2909      	cmp	r1, #9
   c2ac8:	d92a      	bls.n	c2b20 <_strtod_l+0x1b8>
   c2aca:	9905      	ldr	r1, [sp, #20]
   c2acc:	462a      	mov	r2, r5
   c2ace:	f7ff fecf 	bl	c2870 <strncmp>
   c2ad2:	b398      	cbz	r0, c2b3c <_strtod_l+0x1d4>
   c2ad4:	2000      	movs	r0, #0
   c2ad6:	4632      	mov	r2, r6
   c2ad8:	463d      	mov	r5, r7
   c2ada:	9005      	str	r0, [sp, #20]
   c2adc:	4603      	mov	r3, r0
   c2ade:	2a65      	cmp	r2, #101	; 0x65
   c2ae0:	d001      	beq.n	c2ae6 <_strtod_l+0x17e>
   c2ae2:	2a45      	cmp	r2, #69	; 0x45
   c2ae4:	d118      	bne.n	c2b18 <_strtod_l+0x1b0>
   c2ae6:	b91d      	cbnz	r5, c2af0 <_strtod_l+0x188>
   c2ae8:	9a04      	ldr	r2, [sp, #16]
   c2aea:	4302      	orrs	r2, r0
   c2aec:	d09e      	beq.n	c2a2c <_strtod_l+0xc4>
   c2aee:	2500      	movs	r5, #0
   c2af0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c2af4:	f108 0201 	add.w	r2, r8, #1
   c2af8:	9217      	str	r2, [sp, #92]	; 0x5c
   c2afa:	f898 2001 	ldrb.w	r2, [r8, #1]
   c2afe:	2a2b      	cmp	r2, #43	; 0x2b
   c2b00:	d075      	beq.n	c2bee <_strtod_l+0x286>
   c2b02:	2a2d      	cmp	r2, #45	; 0x2d
   c2b04:	d07b      	beq.n	c2bfe <_strtod_l+0x296>
   c2b06:	f04f 0c00 	mov.w	ip, #0
   c2b0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c2b0e:	2909      	cmp	r1, #9
   c2b10:	f240 8082 	bls.w	c2c18 <_strtod_l+0x2b0>
   c2b14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c2b18:	2600      	movs	r6, #0
   c2b1a:	e09d      	b.n	c2c58 <_strtod_l+0x2f0>
   c2b1c:	2300      	movs	r3, #0
   c2b1e:	e7c4      	b.n	c2aaa <_strtod_l+0x142>
   c2b20:	2f08      	cmp	r7, #8
   c2b22:	bfd8      	it	le
   c2b24:	9907      	ldrle	r1, [sp, #28]
   c2b26:	f100 0001 	add.w	r0, r0, #1
   c2b2a:	bfda      	itte	le
   c2b2c:	fb02 3301 	mlale	r3, r2, r1, r3
   c2b30:	9307      	strle	r3, [sp, #28]
   c2b32:	fb02 3909 	mlagt	r9, r2, r9, r3
   c2b36:	3701      	adds	r7, #1
   c2b38:	9017      	str	r0, [sp, #92]	; 0x5c
   c2b3a:	e7bf      	b.n	c2abc <_strtod_l+0x154>
   c2b3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2b3e:	195a      	adds	r2, r3, r5
   c2b40:	9217      	str	r2, [sp, #92]	; 0x5c
   c2b42:	5d5a      	ldrb	r2, [r3, r5]
   c2b44:	2f00      	cmp	r7, #0
   c2b46:	d037      	beq.n	c2bb8 <_strtod_l+0x250>
   c2b48:	9005      	str	r0, [sp, #20]
   c2b4a:	463d      	mov	r5, r7
   c2b4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c2b50:	2b09      	cmp	r3, #9
   c2b52:	d912      	bls.n	c2b7a <_strtod_l+0x212>
   c2b54:	2301      	movs	r3, #1
   c2b56:	e7c2      	b.n	c2ade <_strtod_l+0x176>
   c2b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2b5a:	1c5a      	adds	r2, r3, #1
   c2b5c:	9217      	str	r2, [sp, #92]	; 0x5c
   c2b5e:	785a      	ldrb	r2, [r3, #1]
   c2b60:	3001      	adds	r0, #1
   c2b62:	2a30      	cmp	r2, #48	; 0x30
   c2b64:	d0f8      	beq.n	c2b58 <_strtod_l+0x1f0>
   c2b66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c2b6a:	2b08      	cmp	r3, #8
   c2b6c:	f200 84d9 	bhi.w	c3522 <_strtod_l+0xbba>
   c2b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2b72:	9005      	str	r0, [sp, #20]
   c2b74:	2000      	movs	r0, #0
   c2b76:	9308      	str	r3, [sp, #32]
   c2b78:	4605      	mov	r5, r0
   c2b7a:	3a30      	subs	r2, #48	; 0x30
   c2b7c:	f100 0301 	add.w	r3, r0, #1
   c2b80:	d014      	beq.n	c2bac <_strtod_l+0x244>
   c2b82:	9905      	ldr	r1, [sp, #20]
   c2b84:	4419      	add	r1, r3
   c2b86:	9105      	str	r1, [sp, #20]
   c2b88:	462b      	mov	r3, r5
   c2b8a:	eb00 0e05 	add.w	lr, r0, r5
   c2b8e:	210a      	movs	r1, #10
   c2b90:	4573      	cmp	r3, lr
   c2b92:	d113      	bne.n	c2bbc <_strtod_l+0x254>
   c2b94:	182b      	adds	r3, r5, r0
   c2b96:	2b08      	cmp	r3, #8
   c2b98:	f105 0501 	add.w	r5, r5, #1
   c2b9c:	4405      	add	r5, r0
   c2b9e:	dc1c      	bgt.n	c2bda <_strtod_l+0x272>
   c2ba0:	9907      	ldr	r1, [sp, #28]
   c2ba2:	230a      	movs	r3, #10
   c2ba4:	fb03 2301 	mla	r3, r3, r1, r2
   c2ba8:	9307      	str	r3, [sp, #28]
   c2baa:	2300      	movs	r3, #0
   c2bac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2bae:	1c51      	adds	r1, r2, #1
   c2bb0:	9117      	str	r1, [sp, #92]	; 0x5c
   c2bb2:	7852      	ldrb	r2, [r2, #1]
   c2bb4:	4618      	mov	r0, r3
   c2bb6:	e7c9      	b.n	c2b4c <_strtod_l+0x1e4>
   c2bb8:	4638      	mov	r0, r7
   c2bba:	e7d2      	b.n	c2b62 <_strtod_l+0x1fa>
   c2bbc:	2b08      	cmp	r3, #8
   c2bbe:	dc04      	bgt.n	c2bca <_strtod_l+0x262>
   c2bc0:	9e07      	ldr	r6, [sp, #28]
   c2bc2:	434e      	muls	r6, r1
   c2bc4:	9607      	str	r6, [sp, #28]
   c2bc6:	3301      	adds	r3, #1
   c2bc8:	e7e2      	b.n	c2b90 <_strtod_l+0x228>
   c2bca:	f103 0c01 	add.w	ip, r3, #1
   c2bce:	f1bc 0f10 	cmp.w	ip, #16
   c2bd2:	bfd8      	it	le
   c2bd4:	fb01 f909 	mulle.w	r9, r1, r9
   c2bd8:	e7f5      	b.n	c2bc6 <_strtod_l+0x25e>
   c2bda:	2d10      	cmp	r5, #16
   c2bdc:	bfdc      	itt	le
   c2bde:	230a      	movle	r3, #10
   c2be0:	fb03 2909 	mlale	r9, r3, r9, r2
   c2be4:	e7e1      	b.n	c2baa <_strtod_l+0x242>
   c2be6:	2300      	movs	r3, #0
   c2be8:	9305      	str	r3, [sp, #20]
   c2bea:	2301      	movs	r3, #1
   c2bec:	e77c      	b.n	c2ae8 <_strtod_l+0x180>
   c2bee:	f04f 0c00 	mov.w	ip, #0
   c2bf2:	f108 0202 	add.w	r2, r8, #2
   c2bf6:	9217      	str	r2, [sp, #92]	; 0x5c
   c2bf8:	f898 2002 	ldrb.w	r2, [r8, #2]
   c2bfc:	e785      	b.n	c2b0a <_strtod_l+0x1a2>
   c2bfe:	f04f 0c01 	mov.w	ip, #1
   c2c02:	e7f6      	b.n	c2bf2 <_strtod_l+0x28a>
   c2c04:	000c64f4 	.word	0x000c64f4
   c2c08:	000c632c 	.word	0x000c632c
   c2c0c:	7ff00000 	.word	0x7ff00000
   c2c10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2c12:	1c51      	adds	r1, r2, #1
   c2c14:	9117      	str	r1, [sp, #92]	; 0x5c
   c2c16:	7852      	ldrb	r2, [r2, #1]
   c2c18:	2a30      	cmp	r2, #48	; 0x30
   c2c1a:	d0f9      	beq.n	c2c10 <_strtod_l+0x2a8>
   c2c1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c2c20:	2908      	cmp	r1, #8
   c2c22:	f63f af79 	bhi.w	c2b18 <_strtod_l+0x1b0>
   c2c26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c2c2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2c2c:	9206      	str	r2, [sp, #24]
   c2c2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c2c30:	1c51      	adds	r1, r2, #1
   c2c32:	9117      	str	r1, [sp, #92]	; 0x5c
   c2c34:	7852      	ldrb	r2, [r2, #1]
   c2c36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c2c3a:	2e09      	cmp	r6, #9
   c2c3c:	d937      	bls.n	c2cae <_strtod_l+0x346>
   c2c3e:	9e06      	ldr	r6, [sp, #24]
   c2c40:	1b89      	subs	r1, r1, r6
   c2c42:	2908      	cmp	r1, #8
   c2c44:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c2c48:	dc02      	bgt.n	c2c50 <_strtod_l+0x2e8>
   c2c4a:	4576      	cmp	r6, lr
   c2c4c:	bfa8      	it	ge
   c2c4e:	4676      	movge	r6, lr
   c2c50:	f1bc 0f00 	cmp.w	ip, #0
   c2c54:	d000      	beq.n	c2c58 <_strtod_l+0x2f0>
   c2c56:	4276      	negs	r6, r6
   c2c58:	2d00      	cmp	r5, #0
   c2c5a:	d14d      	bne.n	c2cf8 <_strtod_l+0x390>
   c2c5c:	9904      	ldr	r1, [sp, #16]
   c2c5e:	4301      	orrs	r1, r0
   c2c60:	f47f aec6 	bne.w	c29f0 <_strtod_l+0x88>
   c2c64:	2b00      	cmp	r3, #0
   c2c66:	f47f aee1 	bne.w	c2a2c <_strtod_l+0xc4>
   c2c6a:	2a69      	cmp	r2, #105	; 0x69
   c2c6c:	d027      	beq.n	c2cbe <_strtod_l+0x356>
   c2c6e:	dc24      	bgt.n	c2cba <_strtod_l+0x352>
   c2c70:	2a49      	cmp	r2, #73	; 0x49
   c2c72:	d024      	beq.n	c2cbe <_strtod_l+0x356>
   c2c74:	2a4e      	cmp	r2, #78	; 0x4e
   c2c76:	f47f aed9 	bne.w	c2a2c <_strtod_l+0xc4>
   c2c7a:	499f      	ldr	r1, [pc, #636]	; (c2ef8 <_strtod_l+0x590>)
   c2c7c:	a817      	add	r0, sp, #92	; 0x5c
   c2c7e:	f001 f833 	bl	c3ce8 <__match>
   c2c82:	2800      	cmp	r0, #0
   c2c84:	f43f aed2 	beq.w	c2a2c <_strtod_l+0xc4>
   c2c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2c8a:	781b      	ldrb	r3, [r3, #0]
   c2c8c:	2b28      	cmp	r3, #40	; 0x28
   c2c8e:	d12d      	bne.n	c2cec <_strtod_l+0x384>
   c2c90:	499a      	ldr	r1, [pc, #616]	; (c2efc <_strtod_l+0x594>)
   c2c92:	aa1a      	add	r2, sp, #104	; 0x68
   c2c94:	a817      	add	r0, sp, #92	; 0x5c
   c2c96:	f001 f83b 	bl	c3d10 <__hexnan>
   c2c9a:	2805      	cmp	r0, #5
   c2c9c:	d126      	bne.n	c2cec <_strtod_l+0x384>
   c2c9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c2ca0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c2ca4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c2ca8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c2cac:	e6a0      	b.n	c29f0 <_strtod_l+0x88>
   c2cae:	210a      	movs	r1, #10
   c2cb0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c2cb4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c2cb8:	e7b9      	b.n	c2c2e <_strtod_l+0x2c6>
   c2cba:	2a6e      	cmp	r2, #110	; 0x6e
   c2cbc:	e7db      	b.n	c2c76 <_strtod_l+0x30e>
   c2cbe:	4990      	ldr	r1, [pc, #576]	; (c2f00 <_strtod_l+0x598>)
   c2cc0:	a817      	add	r0, sp, #92	; 0x5c
   c2cc2:	f001 f811 	bl	c3ce8 <__match>
   c2cc6:	2800      	cmp	r0, #0
   c2cc8:	f43f aeb0 	beq.w	c2a2c <_strtod_l+0xc4>
   c2ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2cce:	498d      	ldr	r1, [pc, #564]	; (c2f04 <_strtod_l+0x59c>)
   c2cd0:	3b01      	subs	r3, #1
   c2cd2:	a817      	add	r0, sp, #92	; 0x5c
   c2cd4:	9317      	str	r3, [sp, #92]	; 0x5c
   c2cd6:	f001 f807 	bl	c3ce8 <__match>
   c2cda:	b910      	cbnz	r0, c2ce2 <_strtod_l+0x37a>
   c2cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2cde:	3301      	adds	r3, #1
   c2ce0:	9317      	str	r3, [sp, #92]	; 0x5c
   c2ce2:	f8df b230 	ldr.w	fp, [pc, #560]	; c2f14 <_strtod_l+0x5ac>
   c2ce6:	f04f 0a00 	mov.w	sl, #0
   c2cea:	e681      	b.n	c29f0 <_strtod_l+0x88>
   c2cec:	4886      	ldr	r0, [pc, #536]	; (c2f08 <_strtod_l+0x5a0>)
   c2cee:	f001 fd93 	bl	c4818 <nan>
   c2cf2:	ec5b ab10 	vmov	sl, fp, d0
   c2cf6:	e67b      	b.n	c29f0 <_strtod_l+0x88>
   c2cf8:	9b05      	ldr	r3, [sp, #20]
   c2cfa:	9807      	ldr	r0, [sp, #28]
   c2cfc:	1af3      	subs	r3, r6, r3
   c2cfe:	2f00      	cmp	r7, #0
   c2d00:	bf08      	it	eq
   c2d02:	462f      	moveq	r7, r5
   c2d04:	2d10      	cmp	r5, #16
   c2d06:	9306      	str	r3, [sp, #24]
   c2d08:	46a8      	mov	r8, r5
   c2d0a:	bfa8      	it	ge
   c2d0c:	f04f 0810 	movge.w	r8, #16
   c2d10:	f7ff f8f0 	bl	c1ef4 <__aeabi_ui2d>
   c2d14:	2d09      	cmp	r5, #9
   c2d16:	4682      	mov	sl, r0
   c2d18:	468b      	mov	fp, r1
   c2d1a:	dd13      	ble.n	c2d44 <_strtod_l+0x3dc>
   c2d1c:	4b7b      	ldr	r3, [pc, #492]	; (c2f0c <_strtod_l+0x5a4>)
   c2d1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c2d22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c2d26:	f7ff f95f 	bl	c1fe8 <__aeabi_dmul>
   c2d2a:	4682      	mov	sl, r0
   c2d2c:	4648      	mov	r0, r9
   c2d2e:	468b      	mov	fp, r1
   c2d30:	f7ff f8e0 	bl	c1ef4 <__aeabi_ui2d>
   c2d34:	4602      	mov	r2, r0
   c2d36:	460b      	mov	r3, r1
   c2d38:	4650      	mov	r0, sl
   c2d3a:	4659      	mov	r1, fp
   c2d3c:	f7fe ff9e 	bl	c1c7c <__adddf3>
   c2d40:	4682      	mov	sl, r0
   c2d42:	468b      	mov	fp, r1
   c2d44:	2d0f      	cmp	r5, #15
   c2d46:	dc38      	bgt.n	c2dba <_strtod_l+0x452>
   c2d48:	9b06      	ldr	r3, [sp, #24]
   c2d4a:	2b00      	cmp	r3, #0
   c2d4c:	f43f ae50 	beq.w	c29f0 <_strtod_l+0x88>
   c2d50:	dd24      	ble.n	c2d9c <_strtod_l+0x434>
   c2d52:	2b16      	cmp	r3, #22
   c2d54:	dc0b      	bgt.n	c2d6e <_strtod_l+0x406>
   c2d56:	496d      	ldr	r1, [pc, #436]	; (c2f0c <_strtod_l+0x5a4>)
   c2d58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c2d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2d60:	4652      	mov	r2, sl
   c2d62:	465b      	mov	r3, fp
   c2d64:	f7ff f940 	bl	c1fe8 <__aeabi_dmul>
   c2d68:	4682      	mov	sl, r0
   c2d6a:	468b      	mov	fp, r1
   c2d6c:	e640      	b.n	c29f0 <_strtod_l+0x88>
   c2d6e:	9a06      	ldr	r2, [sp, #24]
   c2d70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c2d74:	4293      	cmp	r3, r2
   c2d76:	db20      	blt.n	c2dba <_strtod_l+0x452>
   c2d78:	4c64      	ldr	r4, [pc, #400]	; (c2f0c <_strtod_l+0x5a4>)
   c2d7a:	f1c5 050f 	rsb	r5, r5, #15
   c2d7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c2d82:	4652      	mov	r2, sl
   c2d84:	465b      	mov	r3, fp
   c2d86:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2d8a:	f7ff f92d 	bl	c1fe8 <__aeabi_dmul>
   c2d8e:	9b06      	ldr	r3, [sp, #24]
   c2d90:	1b5d      	subs	r5, r3, r5
   c2d92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c2d96:	e9d4 2300 	ldrd	r2, r3, [r4]
   c2d9a:	e7e3      	b.n	c2d64 <_strtod_l+0x3fc>
   c2d9c:	9b06      	ldr	r3, [sp, #24]
   c2d9e:	3316      	adds	r3, #22
   c2da0:	db0b      	blt.n	c2dba <_strtod_l+0x452>
   c2da2:	9b05      	ldr	r3, [sp, #20]
   c2da4:	1b9e      	subs	r6, r3, r6
   c2da6:	4b59      	ldr	r3, [pc, #356]	; (c2f0c <_strtod_l+0x5a4>)
   c2da8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c2dac:	e9d6 2300 	ldrd	r2, r3, [r6]
   c2db0:	4650      	mov	r0, sl
   c2db2:	4659      	mov	r1, fp
   c2db4:	f7ff fa42 	bl	c223c <__aeabi_ddiv>
   c2db8:	e7d6      	b.n	c2d68 <_strtod_l+0x400>
   c2dba:	9b06      	ldr	r3, [sp, #24]
   c2dbc:	eba5 0808 	sub.w	r8, r5, r8
   c2dc0:	4498      	add	r8, r3
   c2dc2:	f1b8 0f00 	cmp.w	r8, #0
   c2dc6:	dd74      	ble.n	c2eb2 <_strtod_l+0x54a>
   c2dc8:	f018 030f 	ands.w	r3, r8, #15
   c2dcc:	d00a      	beq.n	c2de4 <_strtod_l+0x47c>
   c2dce:	494f      	ldr	r1, [pc, #316]	; (c2f0c <_strtod_l+0x5a4>)
   c2dd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c2dd4:	4652      	mov	r2, sl
   c2dd6:	465b      	mov	r3, fp
   c2dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2ddc:	f7ff f904 	bl	c1fe8 <__aeabi_dmul>
   c2de0:	4682      	mov	sl, r0
   c2de2:	468b      	mov	fp, r1
   c2de4:	f038 080f 	bics.w	r8, r8, #15
   c2de8:	d04f      	beq.n	c2e8a <_strtod_l+0x522>
   c2dea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c2dee:	dd22      	ble.n	c2e36 <_strtod_l+0x4ce>
   c2df0:	2500      	movs	r5, #0
   c2df2:	462e      	mov	r6, r5
   c2df4:	9507      	str	r5, [sp, #28]
   c2df6:	9505      	str	r5, [sp, #20]
   c2df8:	2322      	movs	r3, #34	; 0x22
   c2dfa:	f8df b118 	ldr.w	fp, [pc, #280]	; c2f14 <_strtod_l+0x5ac>
   c2dfe:	6023      	str	r3, [r4, #0]
   c2e00:	f04f 0a00 	mov.w	sl, #0
   c2e04:	9b07      	ldr	r3, [sp, #28]
   c2e06:	2b00      	cmp	r3, #0
   c2e08:	f43f adf2 	beq.w	c29f0 <_strtod_l+0x88>
   c2e0c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c2e0e:	4620      	mov	r0, r4
   c2e10:	f001 f870 	bl	c3ef4 <_Bfree>
   c2e14:	9905      	ldr	r1, [sp, #20]
   c2e16:	4620      	mov	r0, r4
   c2e18:	f001 f86c 	bl	c3ef4 <_Bfree>
   c2e1c:	4631      	mov	r1, r6
   c2e1e:	4620      	mov	r0, r4
   c2e20:	f001 f868 	bl	c3ef4 <_Bfree>
   c2e24:	9907      	ldr	r1, [sp, #28]
   c2e26:	4620      	mov	r0, r4
   c2e28:	f001 f864 	bl	c3ef4 <_Bfree>
   c2e2c:	4629      	mov	r1, r5
   c2e2e:	4620      	mov	r0, r4
   c2e30:	f001 f860 	bl	c3ef4 <_Bfree>
   c2e34:	e5dc      	b.n	c29f0 <_strtod_l+0x88>
   c2e36:	4b36      	ldr	r3, [pc, #216]	; (c2f10 <_strtod_l+0x5a8>)
   c2e38:	9304      	str	r3, [sp, #16]
   c2e3a:	2300      	movs	r3, #0
   c2e3c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c2e40:	4650      	mov	r0, sl
   c2e42:	4659      	mov	r1, fp
   c2e44:	4699      	mov	r9, r3
   c2e46:	f1b8 0f01 	cmp.w	r8, #1
   c2e4a:	dc21      	bgt.n	c2e90 <_strtod_l+0x528>
   c2e4c:	b10b      	cbz	r3, c2e52 <_strtod_l+0x4ea>
   c2e4e:	4682      	mov	sl, r0
   c2e50:	468b      	mov	fp, r1
   c2e52:	4b2f      	ldr	r3, [pc, #188]	; (c2f10 <_strtod_l+0x5a8>)
   c2e54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c2e58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c2e5c:	4652      	mov	r2, sl
   c2e5e:	465b      	mov	r3, fp
   c2e60:	e9d9 0100 	ldrd	r0, r1, [r9]
   c2e64:	f7ff f8c0 	bl	c1fe8 <__aeabi_dmul>
   c2e68:	4b2a      	ldr	r3, [pc, #168]	; (c2f14 <_strtod_l+0x5ac>)
   c2e6a:	460a      	mov	r2, r1
   c2e6c:	400b      	ands	r3, r1
   c2e6e:	492a      	ldr	r1, [pc, #168]	; (c2f18 <_strtod_l+0x5b0>)
   c2e70:	428b      	cmp	r3, r1
   c2e72:	4682      	mov	sl, r0
   c2e74:	d8bc      	bhi.n	c2df0 <_strtod_l+0x488>
   c2e76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c2e7a:	428b      	cmp	r3, r1
   c2e7c:	bf86      	itte	hi
   c2e7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c2f1c <_strtod_l+0x5b4>
   c2e82:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c2e86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c2e8a:	2300      	movs	r3, #0
   c2e8c:	9304      	str	r3, [sp, #16]
   c2e8e:	e084      	b.n	c2f9a <_strtod_l+0x632>
   c2e90:	f018 0f01 	tst.w	r8, #1
   c2e94:	d005      	beq.n	c2ea2 <_strtod_l+0x53a>
   c2e96:	9b04      	ldr	r3, [sp, #16]
   c2e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2e9c:	f7ff f8a4 	bl	c1fe8 <__aeabi_dmul>
   c2ea0:	2301      	movs	r3, #1
   c2ea2:	9a04      	ldr	r2, [sp, #16]
   c2ea4:	3208      	adds	r2, #8
   c2ea6:	f109 0901 	add.w	r9, r9, #1
   c2eaa:	ea4f 0868 	mov.w	r8, r8, asr #1
   c2eae:	9204      	str	r2, [sp, #16]
   c2eb0:	e7c9      	b.n	c2e46 <_strtod_l+0x4de>
   c2eb2:	d0ea      	beq.n	c2e8a <_strtod_l+0x522>
   c2eb4:	f1c8 0800 	rsb	r8, r8, #0
   c2eb8:	f018 020f 	ands.w	r2, r8, #15
   c2ebc:	d00a      	beq.n	c2ed4 <_strtod_l+0x56c>
   c2ebe:	4b13      	ldr	r3, [pc, #76]	; (c2f0c <_strtod_l+0x5a4>)
   c2ec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c2ec4:	4650      	mov	r0, sl
   c2ec6:	4659      	mov	r1, fp
   c2ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2ecc:	f7ff f9b6 	bl	c223c <__aeabi_ddiv>
   c2ed0:	4682      	mov	sl, r0
   c2ed2:	468b      	mov	fp, r1
   c2ed4:	ea5f 1828 	movs.w	r8, r8, asr #4
   c2ed8:	d0d7      	beq.n	c2e8a <_strtod_l+0x522>
   c2eda:	f1b8 0f1f 	cmp.w	r8, #31
   c2ede:	dd1f      	ble.n	c2f20 <_strtod_l+0x5b8>
   c2ee0:	2500      	movs	r5, #0
   c2ee2:	462e      	mov	r6, r5
   c2ee4:	9507      	str	r5, [sp, #28]
   c2ee6:	9505      	str	r5, [sp, #20]
   c2ee8:	2322      	movs	r3, #34	; 0x22
   c2eea:	f04f 0a00 	mov.w	sl, #0
   c2eee:	f04f 0b00 	mov.w	fp, #0
   c2ef2:	6023      	str	r3, [r4, #0]
   c2ef4:	e786      	b.n	c2e04 <_strtod_l+0x49c>
   c2ef6:	bf00      	nop
   c2ef8:	000c6326 	.word	0x000c6326
   c2efc:	000c6340 	.word	0x000c6340
   c2f00:	000c631d 	.word	0x000c631d
   c2f04:	000c6320 	.word	0x000c6320
   c2f08:	000c606b 	.word	0x000c606b
   c2f0c:	000c6588 	.word	0x000c6588
   c2f10:	000c6560 	.word	0x000c6560
   c2f14:	7ff00000 	.word	0x7ff00000
   c2f18:	7ca00000 	.word	0x7ca00000
   c2f1c:	7fefffff 	.word	0x7fefffff
   c2f20:	f018 0310 	ands.w	r3, r8, #16
   c2f24:	bf18      	it	ne
   c2f26:	236a      	movne	r3, #106	; 0x6a
   c2f28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c32d8 <_strtod_l+0x970>
   c2f2c:	9304      	str	r3, [sp, #16]
   c2f2e:	4650      	mov	r0, sl
   c2f30:	4659      	mov	r1, fp
   c2f32:	2300      	movs	r3, #0
   c2f34:	f018 0f01 	tst.w	r8, #1
   c2f38:	d004      	beq.n	c2f44 <_strtod_l+0x5dc>
   c2f3a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c2f3e:	f7ff f853 	bl	c1fe8 <__aeabi_dmul>
   c2f42:	2301      	movs	r3, #1
   c2f44:	ea5f 0868 	movs.w	r8, r8, asr #1
   c2f48:	f109 0908 	add.w	r9, r9, #8
   c2f4c:	d1f2      	bne.n	c2f34 <_strtod_l+0x5cc>
   c2f4e:	b10b      	cbz	r3, c2f54 <_strtod_l+0x5ec>
   c2f50:	4682      	mov	sl, r0
   c2f52:	468b      	mov	fp, r1
   c2f54:	9b04      	ldr	r3, [sp, #16]
   c2f56:	b1c3      	cbz	r3, c2f8a <_strtod_l+0x622>
   c2f58:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c2f5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c2f60:	2b00      	cmp	r3, #0
   c2f62:	4659      	mov	r1, fp
   c2f64:	dd11      	ble.n	c2f8a <_strtod_l+0x622>
   c2f66:	2b1f      	cmp	r3, #31
   c2f68:	f340 8124 	ble.w	c31b4 <_strtod_l+0x84c>
   c2f6c:	2b34      	cmp	r3, #52	; 0x34
   c2f6e:	bfde      	ittt	le
   c2f70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c2f74:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c2f78:	fa03 f202 	lslle.w	r2, r3, r2
   c2f7c:	f04f 0a00 	mov.w	sl, #0
   c2f80:	bfcc      	ite	gt
   c2f82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c2f86:	ea02 0b01 	andle.w	fp, r2, r1
   c2f8a:	2200      	movs	r2, #0
   c2f8c:	2300      	movs	r3, #0
   c2f8e:	4650      	mov	r0, sl
   c2f90:	4659      	mov	r1, fp
   c2f92:	f7ff fa91 	bl	c24b8 <__aeabi_dcmpeq>
   c2f96:	2800      	cmp	r0, #0
   c2f98:	d1a2      	bne.n	c2ee0 <_strtod_l+0x578>
   c2f9a:	9b07      	ldr	r3, [sp, #28]
   c2f9c:	9300      	str	r3, [sp, #0]
   c2f9e:	9908      	ldr	r1, [sp, #32]
   c2fa0:	462b      	mov	r3, r5
   c2fa2:	463a      	mov	r2, r7
   c2fa4:	4620      	mov	r0, r4
   c2fa6:	f001 f80d 	bl	c3fc4 <__s2b>
   c2faa:	9007      	str	r0, [sp, #28]
   c2fac:	2800      	cmp	r0, #0
   c2fae:	f43f af1f 	beq.w	c2df0 <_strtod_l+0x488>
   c2fb2:	9b05      	ldr	r3, [sp, #20]
   c2fb4:	1b9e      	subs	r6, r3, r6
   c2fb6:	9b06      	ldr	r3, [sp, #24]
   c2fb8:	2b00      	cmp	r3, #0
   c2fba:	bfb4      	ite	lt
   c2fbc:	4633      	movlt	r3, r6
   c2fbe:	2300      	movge	r3, #0
   c2fc0:	930c      	str	r3, [sp, #48]	; 0x30
   c2fc2:	9b06      	ldr	r3, [sp, #24]
   c2fc4:	2500      	movs	r5, #0
   c2fc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c2fca:	9312      	str	r3, [sp, #72]	; 0x48
   c2fcc:	462e      	mov	r6, r5
   c2fce:	9b07      	ldr	r3, [sp, #28]
   c2fd0:	4620      	mov	r0, r4
   c2fd2:	6859      	ldr	r1, [r3, #4]
   c2fd4:	f000 ff4e 	bl	c3e74 <_Balloc>
   c2fd8:	9005      	str	r0, [sp, #20]
   c2fda:	2800      	cmp	r0, #0
   c2fdc:	f43f af0c 	beq.w	c2df8 <_strtod_l+0x490>
   c2fe0:	9b07      	ldr	r3, [sp, #28]
   c2fe2:	691a      	ldr	r2, [r3, #16]
   c2fe4:	3202      	adds	r2, #2
   c2fe6:	f103 010c 	add.w	r1, r3, #12
   c2fea:	0092      	lsls	r2, r2, #2
   c2fec:	300c      	adds	r0, #12
   c2fee:	f7ff fb71 	bl	c26d4 <memcpy>
   c2ff2:	ec4b ab10 	vmov	d0, sl, fp
   c2ff6:	aa1a      	add	r2, sp, #104	; 0x68
   c2ff8:	a919      	add	r1, sp, #100	; 0x64
   c2ffa:	4620      	mov	r0, r4
   c2ffc:	f001 fb28 	bl	c4650 <__d2b>
   c3000:	ec4b ab18 	vmov	d8, sl, fp
   c3004:	9018      	str	r0, [sp, #96]	; 0x60
   c3006:	2800      	cmp	r0, #0
   c3008:	f43f aef6 	beq.w	c2df8 <_strtod_l+0x490>
   c300c:	2101      	movs	r1, #1
   c300e:	4620      	mov	r0, r4
   c3010:	f001 f872 	bl	c40f8 <__i2b>
   c3014:	4606      	mov	r6, r0
   c3016:	2800      	cmp	r0, #0
   c3018:	f43f aeee 	beq.w	c2df8 <_strtod_l+0x490>
   c301c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c301e:	9904      	ldr	r1, [sp, #16]
   c3020:	2b00      	cmp	r3, #0
   c3022:	bfab      	itete	ge
   c3024:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c3026:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c3028:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c302a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c302e:	bfac      	ite	ge
   c3030:	eb03 0902 	addge.w	r9, r3, r2
   c3034:	1ad7      	sublt	r7, r2, r3
   c3036:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c3038:	eba3 0801 	sub.w	r8, r3, r1
   c303c:	4490      	add	r8, r2
   c303e:	4ba1      	ldr	r3, [pc, #644]	; (c32c4 <_strtod_l+0x95c>)
   c3040:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c3044:	4598      	cmp	r8, r3
   c3046:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c304a:	f280 80c7 	bge.w	c31dc <_strtod_l+0x874>
   c304e:	eba3 0308 	sub.w	r3, r3, r8
   c3052:	2b1f      	cmp	r3, #31
   c3054:	eba2 0203 	sub.w	r2, r2, r3
   c3058:	f04f 0101 	mov.w	r1, #1
   c305c:	f300 80b1 	bgt.w	c31c2 <_strtod_l+0x85a>
   c3060:	fa01 f303 	lsl.w	r3, r1, r3
   c3064:	930d      	str	r3, [sp, #52]	; 0x34
   c3066:	2300      	movs	r3, #0
   c3068:	9308      	str	r3, [sp, #32]
   c306a:	eb09 0802 	add.w	r8, r9, r2
   c306e:	9b04      	ldr	r3, [sp, #16]
   c3070:	45c1      	cmp	r9, r8
   c3072:	4417      	add	r7, r2
   c3074:	441f      	add	r7, r3
   c3076:	464b      	mov	r3, r9
   c3078:	bfa8      	it	ge
   c307a:	4643      	movge	r3, r8
   c307c:	42bb      	cmp	r3, r7
   c307e:	bfa8      	it	ge
   c3080:	463b      	movge	r3, r7
   c3082:	2b00      	cmp	r3, #0
   c3084:	bfc2      	ittt	gt
   c3086:	eba8 0803 	subgt.w	r8, r8, r3
   c308a:	1aff      	subgt	r7, r7, r3
   c308c:	eba9 0903 	subgt.w	r9, r9, r3
   c3090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c3092:	2b00      	cmp	r3, #0
   c3094:	dd17      	ble.n	c30c6 <_strtod_l+0x75e>
   c3096:	4631      	mov	r1, r6
   c3098:	461a      	mov	r2, r3
   c309a:	4620      	mov	r0, r4
   c309c:	f001 f8ec 	bl	c4278 <__pow5mult>
   c30a0:	4606      	mov	r6, r0
   c30a2:	2800      	cmp	r0, #0
   c30a4:	f43f aea8 	beq.w	c2df8 <_strtod_l+0x490>
   c30a8:	4601      	mov	r1, r0
   c30aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c30ac:	4620      	mov	r0, r4
   c30ae:	f001 f839 	bl	c4124 <__multiply>
   c30b2:	900b      	str	r0, [sp, #44]	; 0x2c
   c30b4:	2800      	cmp	r0, #0
   c30b6:	f43f ae9f 	beq.w	c2df8 <_strtod_l+0x490>
   c30ba:	9918      	ldr	r1, [sp, #96]	; 0x60
   c30bc:	4620      	mov	r0, r4
   c30be:	f000 ff19 	bl	c3ef4 <_Bfree>
   c30c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c30c4:	9318      	str	r3, [sp, #96]	; 0x60
   c30c6:	f1b8 0f00 	cmp.w	r8, #0
   c30ca:	f300 808c 	bgt.w	c31e6 <_strtod_l+0x87e>
   c30ce:	9b06      	ldr	r3, [sp, #24]
   c30d0:	2b00      	cmp	r3, #0
   c30d2:	dd08      	ble.n	c30e6 <_strtod_l+0x77e>
   c30d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c30d6:	9905      	ldr	r1, [sp, #20]
   c30d8:	4620      	mov	r0, r4
   c30da:	f001 f8cd 	bl	c4278 <__pow5mult>
   c30de:	9005      	str	r0, [sp, #20]
   c30e0:	2800      	cmp	r0, #0
   c30e2:	f43f ae89 	beq.w	c2df8 <_strtod_l+0x490>
   c30e6:	2f00      	cmp	r7, #0
   c30e8:	dd08      	ble.n	c30fc <_strtod_l+0x794>
   c30ea:	9905      	ldr	r1, [sp, #20]
   c30ec:	463a      	mov	r2, r7
   c30ee:	4620      	mov	r0, r4
   c30f0:	f001 f91c 	bl	c432c <__lshift>
   c30f4:	9005      	str	r0, [sp, #20]
   c30f6:	2800      	cmp	r0, #0
   c30f8:	f43f ae7e 	beq.w	c2df8 <_strtod_l+0x490>
   c30fc:	f1b9 0f00 	cmp.w	r9, #0
   c3100:	dd08      	ble.n	c3114 <_strtod_l+0x7ac>
   c3102:	4631      	mov	r1, r6
   c3104:	464a      	mov	r2, r9
   c3106:	4620      	mov	r0, r4
   c3108:	f001 f910 	bl	c432c <__lshift>
   c310c:	4606      	mov	r6, r0
   c310e:	2800      	cmp	r0, #0
   c3110:	f43f ae72 	beq.w	c2df8 <_strtod_l+0x490>
   c3114:	9a05      	ldr	r2, [sp, #20]
   c3116:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3118:	4620      	mov	r0, r4
   c311a:	f001 f993 	bl	c4444 <__mdiff>
   c311e:	4605      	mov	r5, r0
   c3120:	2800      	cmp	r0, #0
   c3122:	f43f ae69 	beq.w	c2df8 <_strtod_l+0x490>
   c3126:	68c3      	ldr	r3, [r0, #12]
   c3128:	930b      	str	r3, [sp, #44]	; 0x2c
   c312a:	2300      	movs	r3, #0
   c312c:	60c3      	str	r3, [r0, #12]
   c312e:	4631      	mov	r1, r6
   c3130:	f001 f96c 	bl	c440c <__mcmp>
   c3134:	2800      	cmp	r0, #0
   c3136:	da60      	bge.n	c31fa <_strtod_l+0x892>
   c3138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c313a:	ea53 030a 	orrs.w	r3, r3, sl
   c313e:	f040 8082 	bne.w	c3246 <_strtod_l+0x8de>
   c3142:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3146:	2b00      	cmp	r3, #0
   c3148:	d17d      	bne.n	c3246 <_strtod_l+0x8de>
   c314a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c314e:	0d1b      	lsrs	r3, r3, #20
   c3150:	051b      	lsls	r3, r3, #20
   c3152:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c3156:	d976      	bls.n	c3246 <_strtod_l+0x8de>
   c3158:	696b      	ldr	r3, [r5, #20]
   c315a:	b913      	cbnz	r3, c3162 <_strtod_l+0x7fa>
   c315c:	692b      	ldr	r3, [r5, #16]
   c315e:	2b01      	cmp	r3, #1
   c3160:	dd71      	ble.n	c3246 <_strtod_l+0x8de>
   c3162:	4629      	mov	r1, r5
   c3164:	2201      	movs	r2, #1
   c3166:	4620      	mov	r0, r4
   c3168:	f001 f8e0 	bl	c432c <__lshift>
   c316c:	4631      	mov	r1, r6
   c316e:	4605      	mov	r5, r0
   c3170:	f001 f94c 	bl	c440c <__mcmp>
   c3174:	2800      	cmp	r0, #0
   c3176:	dd66      	ble.n	c3246 <_strtod_l+0x8de>
   c3178:	9904      	ldr	r1, [sp, #16]
   c317a:	4a53      	ldr	r2, [pc, #332]	; (c32c8 <_strtod_l+0x960>)
   c317c:	465b      	mov	r3, fp
   c317e:	2900      	cmp	r1, #0
   c3180:	f000 8081 	beq.w	c3286 <_strtod_l+0x91e>
   c3184:	ea02 010b 	and.w	r1, r2, fp
   c3188:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c318c:	dc7b      	bgt.n	c3286 <_strtod_l+0x91e>
   c318e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c3192:	f77f aea9 	ble.w	c2ee8 <_strtod_l+0x580>
   c3196:	4b4d      	ldr	r3, [pc, #308]	; (c32cc <_strtod_l+0x964>)
   c3198:	4650      	mov	r0, sl
   c319a:	4659      	mov	r1, fp
   c319c:	2200      	movs	r2, #0
   c319e:	f7fe ff23 	bl	c1fe8 <__aeabi_dmul>
   c31a2:	460b      	mov	r3, r1
   c31a4:	4303      	orrs	r3, r0
   c31a6:	bf08      	it	eq
   c31a8:	2322      	moveq	r3, #34	; 0x22
   c31aa:	4682      	mov	sl, r0
   c31ac:	468b      	mov	fp, r1
   c31ae:	bf08      	it	eq
   c31b0:	6023      	streq	r3, [r4, #0]
   c31b2:	e62b      	b.n	c2e0c <_strtod_l+0x4a4>
   c31b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c31b8:	fa02 f303 	lsl.w	r3, r2, r3
   c31bc:	ea03 0a0a 	and.w	sl, r3, sl
   c31c0:	e6e3      	b.n	c2f8a <_strtod_l+0x622>
   c31c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c31c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c31ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c31ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c31d2:	fa01 f308 	lsl.w	r3, r1, r8
   c31d6:	9308      	str	r3, [sp, #32]
   c31d8:	910d      	str	r1, [sp, #52]	; 0x34
   c31da:	e746      	b.n	c306a <_strtod_l+0x702>
   c31dc:	2300      	movs	r3, #0
   c31de:	9308      	str	r3, [sp, #32]
   c31e0:	2301      	movs	r3, #1
   c31e2:	930d      	str	r3, [sp, #52]	; 0x34
   c31e4:	e741      	b.n	c306a <_strtod_l+0x702>
   c31e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c31e8:	4642      	mov	r2, r8
   c31ea:	4620      	mov	r0, r4
   c31ec:	f001 f89e 	bl	c432c <__lshift>
   c31f0:	9018      	str	r0, [sp, #96]	; 0x60
   c31f2:	2800      	cmp	r0, #0
   c31f4:	f47f af6b 	bne.w	c30ce <_strtod_l+0x766>
   c31f8:	e5fe      	b.n	c2df8 <_strtod_l+0x490>
   c31fa:	465f      	mov	r7, fp
   c31fc:	d16e      	bne.n	c32dc <_strtod_l+0x974>
   c31fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c3200:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3204:	b342      	cbz	r2, c3258 <_strtod_l+0x8f0>
   c3206:	4a32      	ldr	r2, [pc, #200]	; (c32d0 <_strtod_l+0x968>)
   c3208:	4293      	cmp	r3, r2
   c320a:	d128      	bne.n	c325e <_strtod_l+0x8f6>
   c320c:	9b04      	ldr	r3, [sp, #16]
   c320e:	4651      	mov	r1, sl
   c3210:	b1eb      	cbz	r3, c324e <_strtod_l+0x8e6>
   c3212:	4b2d      	ldr	r3, [pc, #180]	; (c32c8 <_strtod_l+0x960>)
   c3214:	403b      	ands	r3, r7
   c3216:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c321a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c321e:	d819      	bhi.n	c3254 <_strtod_l+0x8ec>
   c3220:	0d1b      	lsrs	r3, r3, #20
   c3222:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3226:	fa02 f303 	lsl.w	r3, r2, r3
   c322a:	4299      	cmp	r1, r3
   c322c:	d117      	bne.n	c325e <_strtod_l+0x8f6>
   c322e:	4b29      	ldr	r3, [pc, #164]	; (c32d4 <_strtod_l+0x96c>)
   c3230:	429f      	cmp	r7, r3
   c3232:	d102      	bne.n	c323a <_strtod_l+0x8d2>
   c3234:	3101      	adds	r1, #1
   c3236:	f43f addf 	beq.w	c2df8 <_strtod_l+0x490>
   c323a:	4b23      	ldr	r3, [pc, #140]	; (c32c8 <_strtod_l+0x960>)
   c323c:	403b      	ands	r3, r7
   c323e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c3242:	f04f 0a00 	mov.w	sl, #0
   c3246:	9b04      	ldr	r3, [sp, #16]
   c3248:	2b00      	cmp	r3, #0
   c324a:	d1a4      	bne.n	c3196 <_strtod_l+0x82e>
   c324c:	e5de      	b.n	c2e0c <_strtod_l+0x4a4>
   c324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c3252:	e7ea      	b.n	c322a <_strtod_l+0x8c2>
   c3254:	4613      	mov	r3, r2
   c3256:	e7e8      	b.n	c322a <_strtod_l+0x8c2>
   c3258:	ea53 030a 	orrs.w	r3, r3, sl
   c325c:	d08c      	beq.n	c3178 <_strtod_l+0x810>
   c325e:	9b08      	ldr	r3, [sp, #32]
   c3260:	b1db      	cbz	r3, c329a <_strtod_l+0x932>
   c3262:	423b      	tst	r3, r7
   c3264:	d0ef      	beq.n	c3246 <_strtod_l+0x8de>
   c3266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3268:	9a04      	ldr	r2, [sp, #16]
   c326a:	4650      	mov	r0, sl
   c326c:	4659      	mov	r1, fp
   c326e:	b1c3      	cbz	r3, c32a2 <_strtod_l+0x93a>
   c3270:	f7ff fb5b 	bl	c292a <sulp>
   c3274:	4602      	mov	r2, r0
   c3276:	460b      	mov	r3, r1
   c3278:	ec51 0b18 	vmov	r0, r1, d8
   c327c:	f7fe fcfe 	bl	c1c7c <__adddf3>
   c3280:	4682      	mov	sl, r0
   c3282:	468b      	mov	fp, r1
   c3284:	e7df      	b.n	c3246 <_strtod_l+0x8de>
   c3286:	4013      	ands	r3, r2
   c3288:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c328c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c3290:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c3294:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3298:	e7d5      	b.n	c3246 <_strtod_l+0x8de>
   c329a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c329c:	ea13 0f0a 	tst.w	r3, sl
   c32a0:	e7e0      	b.n	c3264 <_strtod_l+0x8fc>
   c32a2:	f7ff fb42 	bl	c292a <sulp>
   c32a6:	4602      	mov	r2, r0
   c32a8:	460b      	mov	r3, r1
   c32aa:	ec51 0b18 	vmov	r0, r1, d8
   c32ae:	f7fe fce3 	bl	c1c78 <__aeabi_dsub>
   c32b2:	2200      	movs	r2, #0
   c32b4:	2300      	movs	r3, #0
   c32b6:	4682      	mov	sl, r0
   c32b8:	468b      	mov	fp, r1
   c32ba:	f7ff f8fd 	bl	c24b8 <__aeabi_dcmpeq>
   c32be:	2800      	cmp	r0, #0
   c32c0:	d0c1      	beq.n	c3246 <_strtod_l+0x8de>
   c32c2:	e611      	b.n	c2ee8 <_strtod_l+0x580>
   c32c4:	fffffc02 	.word	0xfffffc02
   c32c8:	7ff00000 	.word	0x7ff00000
   c32cc:	39500000 	.word	0x39500000
   c32d0:	000fffff 	.word	0x000fffff
   c32d4:	7fefffff 	.word	0x7fefffff
   c32d8:	000c6358 	.word	0x000c6358
   c32dc:	4631      	mov	r1, r6
   c32de:	4628      	mov	r0, r5
   c32e0:	f001 fa12 	bl	c4708 <__ratio>
   c32e4:	ec59 8b10 	vmov	r8, r9, d0
   c32e8:	ee10 0a10 	vmov	r0, s0
   c32ec:	2200      	movs	r2, #0
   c32ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c32f2:	4649      	mov	r1, r9
   c32f4:	f7ff f8f4 	bl	c24e0 <__aeabi_dcmple>
   c32f8:	2800      	cmp	r0, #0
   c32fa:	d07a      	beq.n	c33f2 <_strtod_l+0xa8a>
   c32fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c32fe:	2b00      	cmp	r3, #0
   c3300:	d04a      	beq.n	c3398 <_strtod_l+0xa30>
   c3302:	4b95      	ldr	r3, [pc, #596]	; (c3558 <_strtod_l+0xbf0>)
   c3304:	2200      	movs	r2, #0
   c3306:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c330a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c3558 <_strtod_l+0xbf0>
   c330e:	f04f 0800 	mov.w	r8, #0
   c3312:	4b92      	ldr	r3, [pc, #584]	; (c355c <_strtod_l+0xbf4>)
   c3314:	403b      	ands	r3, r7
   c3316:	930d      	str	r3, [sp, #52]	; 0x34
   c3318:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c331a:	4b91      	ldr	r3, [pc, #580]	; (c3560 <_strtod_l+0xbf8>)
   c331c:	429a      	cmp	r2, r3
   c331e:	f040 80b0 	bne.w	c3482 <_strtod_l+0xb1a>
   c3322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c3326:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c332a:	ec4b ab10 	vmov	d0, sl, fp
   c332e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c3332:	f001 f911 	bl	c4558 <__ulp>
   c3336:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c333a:	ec53 2b10 	vmov	r2, r3, d0
   c333e:	f7fe fe53 	bl	c1fe8 <__aeabi_dmul>
   c3342:	4652      	mov	r2, sl
   c3344:	465b      	mov	r3, fp
   c3346:	f7fe fc99 	bl	c1c7c <__adddf3>
   c334a:	460b      	mov	r3, r1
   c334c:	4983      	ldr	r1, [pc, #524]	; (c355c <_strtod_l+0xbf4>)
   c334e:	4a85      	ldr	r2, [pc, #532]	; (c3564 <_strtod_l+0xbfc>)
   c3350:	4019      	ands	r1, r3
   c3352:	4291      	cmp	r1, r2
   c3354:	4682      	mov	sl, r0
   c3356:	d960      	bls.n	c341a <_strtod_l+0xab2>
   c3358:	ee18 3a90 	vmov	r3, s17
   c335c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c3360:	4293      	cmp	r3, r2
   c3362:	d104      	bne.n	c336e <_strtod_l+0xa06>
   c3364:	ee18 3a10 	vmov	r3, s16
   c3368:	3301      	adds	r3, #1
   c336a:	f43f ad45 	beq.w	c2df8 <_strtod_l+0x490>
   c336e:	f8df b200 	ldr.w	fp, [pc, #512]	; c3570 <_strtod_l+0xc08>
   c3372:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3376:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3378:	4620      	mov	r0, r4
   c337a:	f000 fdbb 	bl	c3ef4 <_Bfree>
   c337e:	9905      	ldr	r1, [sp, #20]
   c3380:	4620      	mov	r0, r4
   c3382:	f000 fdb7 	bl	c3ef4 <_Bfree>
   c3386:	4631      	mov	r1, r6
   c3388:	4620      	mov	r0, r4
   c338a:	f000 fdb3 	bl	c3ef4 <_Bfree>
   c338e:	4629      	mov	r1, r5
   c3390:	4620      	mov	r0, r4
   c3392:	f000 fdaf 	bl	c3ef4 <_Bfree>
   c3396:	e61a      	b.n	c2fce <_strtod_l+0x666>
   c3398:	f1ba 0f00 	cmp.w	sl, #0
   c339c:	d11b      	bne.n	c33d6 <_strtod_l+0xa6e>
   c339e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c33a2:	b9f3      	cbnz	r3, c33e2 <_strtod_l+0xa7a>
   c33a4:	4b6c      	ldr	r3, [pc, #432]	; (c3558 <_strtod_l+0xbf0>)
   c33a6:	2200      	movs	r2, #0
   c33a8:	4640      	mov	r0, r8
   c33aa:	4649      	mov	r1, r9
   c33ac:	f7ff f88e 	bl	c24cc <__aeabi_dcmplt>
   c33b0:	b9d0      	cbnz	r0, c33e8 <_strtod_l+0xa80>
   c33b2:	4640      	mov	r0, r8
   c33b4:	4649      	mov	r1, r9
   c33b6:	4b6c      	ldr	r3, [pc, #432]	; (c3568 <_strtod_l+0xc00>)
   c33b8:	2200      	movs	r2, #0
   c33ba:	f7fe fe15 	bl	c1fe8 <__aeabi_dmul>
   c33be:	4680      	mov	r8, r0
   c33c0:	4689      	mov	r9, r1
   c33c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c33c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c33ca:	9315      	str	r3, [sp, #84]	; 0x54
   c33cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c33d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c33d4:	e79d      	b.n	c3312 <_strtod_l+0x9aa>
   c33d6:	f1ba 0f01 	cmp.w	sl, #1
   c33da:	d102      	bne.n	c33e2 <_strtod_l+0xa7a>
   c33dc:	2f00      	cmp	r7, #0
   c33de:	f43f ad83 	beq.w	c2ee8 <_strtod_l+0x580>
   c33e2:	4b62      	ldr	r3, [pc, #392]	; (c356c <_strtod_l+0xc04>)
   c33e4:	2200      	movs	r2, #0
   c33e6:	e78e      	b.n	c3306 <_strtod_l+0x99e>
   c33e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; c3568 <_strtod_l+0xc00>
   c33ec:	f04f 0800 	mov.w	r8, #0
   c33f0:	e7e7      	b.n	c33c2 <_strtod_l+0xa5a>
   c33f2:	4b5d      	ldr	r3, [pc, #372]	; (c3568 <_strtod_l+0xc00>)
   c33f4:	4640      	mov	r0, r8
   c33f6:	4649      	mov	r1, r9
   c33f8:	2200      	movs	r2, #0
   c33fa:	f7fe fdf5 	bl	c1fe8 <__aeabi_dmul>
   c33fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c3400:	4680      	mov	r8, r0
   c3402:	4689      	mov	r9, r1
   c3404:	b933      	cbnz	r3, c3414 <_strtod_l+0xaac>
   c3406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c340a:	900e      	str	r0, [sp, #56]	; 0x38
   c340c:	930f      	str	r3, [sp, #60]	; 0x3c
   c340e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c3412:	e7dd      	b.n	c33d0 <_strtod_l+0xa68>
   c3414:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c3418:	e7f9      	b.n	c340e <_strtod_l+0xaa6>
   c341a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c341e:	9b04      	ldr	r3, [sp, #16]
   c3420:	2b00      	cmp	r3, #0
   c3422:	d1a8      	bne.n	c3376 <_strtod_l+0xa0e>
   c3424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c3428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c342a:	0d1b      	lsrs	r3, r3, #20
   c342c:	051b      	lsls	r3, r3, #20
   c342e:	429a      	cmp	r2, r3
   c3430:	d1a1      	bne.n	c3376 <_strtod_l+0xa0e>
   c3432:	4640      	mov	r0, r8
   c3434:	4649      	mov	r1, r9
   c3436:	f001 fa05 	bl	c4844 <__aeabi_d2lz>
   c343a:	f7fe fda7 	bl	c1f8c <__aeabi_l2d>
   c343e:	4602      	mov	r2, r0
   c3440:	460b      	mov	r3, r1
   c3442:	4640      	mov	r0, r8
   c3444:	4649      	mov	r1, r9
   c3446:	f7fe fc17 	bl	c1c78 <__aeabi_dsub>
   c344a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c344c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c3450:	ea43 030a 	orr.w	r3, r3, sl
   c3454:	4313      	orrs	r3, r2
   c3456:	4680      	mov	r8, r0
   c3458:	4689      	mov	r9, r1
   c345a:	d055      	beq.n	c3508 <_strtod_l+0xba0>
   c345c:	a336      	add	r3, pc, #216	; (adr r3, c3538 <_strtod_l+0xbd0>)
   c345e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3462:	f7ff f833 	bl	c24cc <__aeabi_dcmplt>
   c3466:	2800      	cmp	r0, #0
   c3468:	f47f acd0 	bne.w	c2e0c <_strtod_l+0x4a4>
   c346c:	a334      	add	r3, pc, #208	; (adr r3, c3540 <_strtod_l+0xbd8>)
   c346e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3472:	4640      	mov	r0, r8
   c3474:	4649      	mov	r1, r9
   c3476:	f7ff f847 	bl	c2508 <__aeabi_dcmpgt>
   c347a:	2800      	cmp	r0, #0
   c347c:	f43f af7b 	beq.w	c3376 <_strtod_l+0xa0e>
   c3480:	e4c4      	b.n	c2e0c <_strtod_l+0x4a4>
   c3482:	9b04      	ldr	r3, [sp, #16]
   c3484:	b333      	cbz	r3, c34d4 <_strtod_l+0xb6c>
   c3486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c3488:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c348c:	d822      	bhi.n	c34d4 <_strtod_l+0xb6c>
   c348e:	a32e      	add	r3, pc, #184	; (adr r3, c3548 <_strtod_l+0xbe0>)
   c3490:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3494:	4640      	mov	r0, r8
   c3496:	4649      	mov	r1, r9
   c3498:	f7ff f822 	bl	c24e0 <__aeabi_dcmple>
   c349c:	b1a0      	cbz	r0, c34c8 <_strtod_l+0xb60>
   c349e:	4649      	mov	r1, r9
   c34a0:	4640      	mov	r0, r8
   c34a2:	f7ff f863 	bl	c256c <__aeabi_d2uiz>
   c34a6:	2801      	cmp	r0, #1
   c34a8:	bf38      	it	cc
   c34aa:	2001      	movcc	r0, #1
   c34ac:	f7fe fd22 	bl	c1ef4 <__aeabi_ui2d>
   c34b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c34b2:	4680      	mov	r8, r0
   c34b4:	4689      	mov	r9, r1
   c34b6:	bb23      	cbnz	r3, c3502 <_strtod_l+0xb9a>
   c34b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c34bc:	9010      	str	r0, [sp, #64]	; 0x40
   c34be:	9311      	str	r3, [sp, #68]	; 0x44
   c34c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c34c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c34c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c34ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c34cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c34d0:	1a9b      	subs	r3, r3, r2
   c34d2:	9309      	str	r3, [sp, #36]	; 0x24
   c34d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c34d8:	eeb0 0a48 	vmov.f32	s0, s16
   c34dc:	eef0 0a68 	vmov.f32	s1, s17
   c34e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c34e4:	f001 f838 	bl	c4558 <__ulp>
   c34e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c34ec:	ec53 2b10 	vmov	r2, r3, d0
   c34f0:	f7fe fd7a 	bl	c1fe8 <__aeabi_dmul>
   c34f4:	ec53 2b18 	vmov	r2, r3, d8
   c34f8:	f7fe fbc0 	bl	c1c7c <__adddf3>
   c34fc:	4682      	mov	sl, r0
   c34fe:	468b      	mov	fp, r1
   c3500:	e78d      	b.n	c341e <_strtod_l+0xab6>
   c3502:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c3506:	e7db      	b.n	c34c0 <_strtod_l+0xb58>
   c3508:	a311      	add	r3, pc, #68	; (adr r3, c3550 <_strtod_l+0xbe8>)
   c350a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c350e:	f7fe ffdd 	bl	c24cc <__aeabi_dcmplt>
   c3512:	e7b2      	b.n	c347a <_strtod_l+0xb12>
   c3514:	2300      	movs	r3, #0
   c3516:	930a      	str	r3, [sp, #40]	; 0x28
   c3518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c351a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c351c:	6013      	str	r3, [r2, #0]
   c351e:	f7ff ba6b 	b.w	c29f8 <_strtod_l+0x90>
   c3522:	2a65      	cmp	r2, #101	; 0x65
   c3524:	f43f ab5f 	beq.w	c2be6 <_strtod_l+0x27e>
   c3528:	2a45      	cmp	r2, #69	; 0x45
   c352a:	f43f ab5c 	beq.w	c2be6 <_strtod_l+0x27e>
   c352e:	2301      	movs	r3, #1
   c3530:	f7ff bb94 	b.w	c2c5c <_strtod_l+0x2f4>
   c3534:	f3af 8000 	nop.w
   c3538:	94a03595 	.word	0x94a03595
   c353c:	3fdfffff 	.word	0x3fdfffff
   c3540:	35afe535 	.word	0x35afe535
   c3544:	3fe00000 	.word	0x3fe00000
   c3548:	ffc00000 	.word	0xffc00000
   c354c:	41dfffff 	.word	0x41dfffff
   c3550:	94a03595 	.word	0x94a03595
   c3554:	3fcfffff 	.word	0x3fcfffff
   c3558:	3ff00000 	.word	0x3ff00000
   c355c:	7ff00000 	.word	0x7ff00000
   c3560:	7fe00000 	.word	0x7fe00000
   c3564:	7c9fffff 	.word	0x7c9fffff
   c3568:	3fe00000 	.word	0x3fe00000
   c356c:	bff00000 	.word	0xbff00000
   c3570:	7fefffff 	.word	0x7fefffff

000c3574 <strtod>:
   c3574:	460a      	mov	r2, r1
   c3576:	4601      	mov	r1, r0
   c3578:	4802      	ldr	r0, [pc, #8]	; (c3584 <strtod+0x10>)
   c357a:	4b03      	ldr	r3, [pc, #12]	; (c3588 <strtod+0x14>)
   c357c:	6800      	ldr	r0, [r0, #0]
   c357e:	f7ff b9f3 	b.w	c2968 <_strtod_l>
   c3582:	bf00      	nop
   c3584:	2003db38 	.word	0x2003db38
   c3588:	2003dba4 	.word	0x2003dba4

000c358c <_strtol_l.constprop.0>:
   c358c:	2b01      	cmp	r3, #1
   c358e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3592:	d001      	beq.n	c3598 <_strtol_l.constprop.0+0xc>
   c3594:	2b24      	cmp	r3, #36	; 0x24
   c3596:	d906      	bls.n	c35a6 <_strtol_l.constprop.0+0x1a>
   c3598:	f7fa fb4a 	bl	bdc30 <__errno>
   c359c:	2316      	movs	r3, #22
   c359e:	6003      	str	r3, [r0, #0]
   c35a0:	2000      	movs	r0, #0
   c35a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c35a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c368c <_strtol_l.constprop.0+0x100>
   c35aa:	460d      	mov	r5, r1
   c35ac:	462e      	mov	r6, r5
   c35ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   c35b2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c35b6:	f017 0708 	ands.w	r7, r7, #8
   c35ba:	d1f7      	bne.n	c35ac <_strtol_l.constprop.0+0x20>
   c35bc:	2c2d      	cmp	r4, #45	; 0x2d
   c35be:	d132      	bne.n	c3626 <_strtol_l.constprop.0+0x9a>
   c35c0:	782c      	ldrb	r4, [r5, #0]
   c35c2:	2701      	movs	r7, #1
   c35c4:	1cb5      	adds	r5, r6, #2
   c35c6:	2b00      	cmp	r3, #0
   c35c8:	d05b      	beq.n	c3682 <_strtol_l.constprop.0+0xf6>
   c35ca:	2b10      	cmp	r3, #16
   c35cc:	d109      	bne.n	c35e2 <_strtol_l.constprop.0+0x56>
   c35ce:	2c30      	cmp	r4, #48	; 0x30
   c35d0:	d107      	bne.n	c35e2 <_strtol_l.constprop.0+0x56>
   c35d2:	782c      	ldrb	r4, [r5, #0]
   c35d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c35d8:	2c58      	cmp	r4, #88	; 0x58
   c35da:	d14d      	bne.n	c3678 <_strtol_l.constprop.0+0xec>
   c35dc:	786c      	ldrb	r4, [r5, #1]
   c35de:	2310      	movs	r3, #16
   c35e0:	3502      	adds	r5, #2
   c35e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c35e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c35ea:	f04f 0c00 	mov.w	ip, #0
   c35ee:	fbb8 f9f3 	udiv	r9, r8, r3
   c35f2:	4666      	mov	r6, ip
   c35f4:	fb03 8a19 	mls	sl, r3, r9, r8
   c35f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c35fc:	f1be 0f09 	cmp.w	lr, #9
   c3600:	d816      	bhi.n	c3630 <_strtol_l.constprop.0+0xa4>
   c3602:	4674      	mov	r4, lr
   c3604:	42a3      	cmp	r3, r4
   c3606:	dd24      	ble.n	c3652 <_strtol_l.constprop.0+0xc6>
   c3608:	f1bc 0f00 	cmp.w	ip, #0
   c360c:	db1e      	blt.n	c364c <_strtol_l.constprop.0+0xc0>
   c360e:	45b1      	cmp	r9, r6
   c3610:	d31c      	bcc.n	c364c <_strtol_l.constprop.0+0xc0>
   c3612:	d101      	bne.n	c3618 <_strtol_l.constprop.0+0x8c>
   c3614:	45a2      	cmp	sl, r4
   c3616:	db19      	blt.n	c364c <_strtol_l.constprop.0+0xc0>
   c3618:	fb06 4603 	mla	r6, r6, r3, r4
   c361c:	f04f 0c01 	mov.w	ip, #1
   c3620:	f815 4b01 	ldrb.w	r4, [r5], #1
   c3624:	e7e8      	b.n	c35f8 <_strtol_l.constprop.0+0x6c>
   c3626:	2c2b      	cmp	r4, #43	; 0x2b
   c3628:	bf04      	itt	eq
   c362a:	782c      	ldrbeq	r4, [r5, #0]
   c362c:	1cb5      	addeq	r5, r6, #2
   c362e:	e7ca      	b.n	c35c6 <_strtol_l.constprop.0+0x3a>
   c3630:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c3634:	f1be 0f19 	cmp.w	lr, #25
   c3638:	d801      	bhi.n	c363e <_strtol_l.constprop.0+0xb2>
   c363a:	3c37      	subs	r4, #55	; 0x37
   c363c:	e7e2      	b.n	c3604 <_strtol_l.constprop.0+0x78>
   c363e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c3642:	f1be 0f19 	cmp.w	lr, #25
   c3646:	d804      	bhi.n	c3652 <_strtol_l.constprop.0+0xc6>
   c3648:	3c57      	subs	r4, #87	; 0x57
   c364a:	e7db      	b.n	c3604 <_strtol_l.constprop.0+0x78>
   c364c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3650:	e7e6      	b.n	c3620 <_strtol_l.constprop.0+0x94>
   c3652:	f1bc 0f00 	cmp.w	ip, #0
   c3656:	da05      	bge.n	c3664 <_strtol_l.constprop.0+0xd8>
   c3658:	2322      	movs	r3, #34	; 0x22
   c365a:	6003      	str	r3, [r0, #0]
   c365c:	4646      	mov	r6, r8
   c365e:	b942      	cbnz	r2, c3672 <_strtol_l.constprop.0+0xe6>
   c3660:	4630      	mov	r0, r6
   c3662:	e79e      	b.n	c35a2 <_strtol_l.constprop.0+0x16>
   c3664:	b107      	cbz	r7, c3668 <_strtol_l.constprop.0+0xdc>
   c3666:	4276      	negs	r6, r6
   c3668:	2a00      	cmp	r2, #0
   c366a:	d0f9      	beq.n	c3660 <_strtol_l.constprop.0+0xd4>
   c366c:	f1bc 0f00 	cmp.w	ip, #0
   c3670:	d000      	beq.n	c3674 <_strtol_l.constprop.0+0xe8>
   c3672:	1e69      	subs	r1, r5, #1
   c3674:	6011      	str	r1, [r2, #0]
   c3676:	e7f3      	b.n	c3660 <_strtol_l.constprop.0+0xd4>
   c3678:	2430      	movs	r4, #48	; 0x30
   c367a:	2b00      	cmp	r3, #0
   c367c:	d1b1      	bne.n	c35e2 <_strtol_l.constprop.0+0x56>
   c367e:	2308      	movs	r3, #8
   c3680:	e7af      	b.n	c35e2 <_strtol_l.constprop.0+0x56>
   c3682:	2c30      	cmp	r4, #48	; 0x30
   c3684:	d0a5      	beq.n	c35d2 <_strtol_l.constprop.0+0x46>
   c3686:	230a      	movs	r3, #10
   c3688:	e7ab      	b.n	c35e2 <_strtol_l.constprop.0+0x56>
   c368a:	bf00      	nop
   c368c:	000c6381 	.word	0x000c6381

000c3690 <strtol>:
   c3690:	4613      	mov	r3, r2
   c3692:	460a      	mov	r2, r1
   c3694:	4601      	mov	r1, r0
   c3696:	4802      	ldr	r0, [pc, #8]	; (c36a0 <strtol+0x10>)
   c3698:	6800      	ldr	r0, [r0, #0]
   c369a:	f7ff bf77 	b.w	c358c <_strtol_l.constprop.0>
   c369e:	bf00      	nop
   c36a0:	2003db38 	.word	0x2003db38

000c36a4 <__register_exitproc>:
   c36a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c36a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c3764 <__register_exitproc+0xc0>
   c36ac:	4606      	mov	r6, r0
   c36ae:	f8d8 0000 	ldr.w	r0, [r8]
   c36b2:	461f      	mov	r7, r3
   c36b4:	460d      	mov	r5, r1
   c36b6:	4691      	mov	r9, r2
   c36b8:	f000 fbc6 	bl	c3e48 <__retarget_lock_acquire_recursive>
   c36bc:	4b25      	ldr	r3, [pc, #148]	; (c3754 <__register_exitproc+0xb0>)
   c36be:	681c      	ldr	r4, [r3, #0]
   c36c0:	b934      	cbnz	r4, c36d0 <__register_exitproc+0x2c>
   c36c2:	4c25      	ldr	r4, [pc, #148]	; (c3758 <__register_exitproc+0xb4>)
   c36c4:	601c      	str	r4, [r3, #0]
   c36c6:	4b25      	ldr	r3, [pc, #148]	; (c375c <__register_exitproc+0xb8>)
   c36c8:	b113      	cbz	r3, c36d0 <__register_exitproc+0x2c>
   c36ca:	681b      	ldr	r3, [r3, #0]
   c36cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c36d0:	6863      	ldr	r3, [r4, #4]
   c36d2:	2b1f      	cmp	r3, #31
   c36d4:	dd07      	ble.n	c36e6 <__register_exitproc+0x42>
   c36d6:	f8d8 0000 	ldr.w	r0, [r8]
   c36da:	f000 fbb7 	bl	c3e4c <__retarget_lock_release_recursive>
   c36de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c36e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c36e6:	b34e      	cbz	r6, c373c <__register_exitproc+0x98>
   c36e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c36ec:	b988      	cbnz	r0, c3712 <__register_exitproc+0x6e>
   c36ee:	4b1c      	ldr	r3, [pc, #112]	; (c3760 <__register_exitproc+0xbc>)
   c36f0:	b923      	cbnz	r3, c36fc <__register_exitproc+0x58>
   c36f2:	f8d8 0000 	ldr.w	r0, [r8]
   c36f6:	f000 fba8 	bl	c3e4a <__retarget_lock_release>
   c36fa:	e7f0      	b.n	c36de <__register_exitproc+0x3a>
   c36fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   c3700:	f7fa fa4e 	bl	bdba0 <malloc>
   c3704:	2800      	cmp	r0, #0
   c3706:	d0f4      	beq.n	c36f2 <__register_exitproc+0x4e>
   c3708:	2300      	movs	r3, #0
   c370a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c370e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c3712:	6863      	ldr	r3, [r4, #4]
   c3714:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c3718:	2201      	movs	r2, #1
   c371a:	409a      	lsls	r2, r3
   c371c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c3720:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c3724:	4313      	orrs	r3, r2
   c3726:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c372a:	2e02      	cmp	r6, #2
   c372c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c3730:	bf02      	ittt	eq
   c3732:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c3736:	4313      	orreq	r3, r2
   c3738:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c373c:	6863      	ldr	r3, [r4, #4]
   c373e:	f8d8 0000 	ldr.w	r0, [r8]
   c3742:	1c5a      	adds	r2, r3, #1
   c3744:	3302      	adds	r3, #2
   c3746:	6062      	str	r2, [r4, #4]
   c3748:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c374c:	f000 fb7e 	bl	c3e4c <__retarget_lock_release_recursive>
   c3750:	2000      	movs	r0, #0
   c3752:	e7c6      	b.n	c36e2 <__register_exitproc+0x3e>
   c3754:	2003e7e8 	.word	0x2003e7e8
   c3758:	2003e75c 	.word	0x2003e75c
   c375c:	00000000 	.word	0x00000000
   c3760:	000bdba1 	.word	0x000bdba1
   c3764:	2003db9c 	.word	0x2003db9c

000c3768 <rshift>:
   c3768:	6903      	ldr	r3, [r0, #16]
   c376a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c376e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c3772:	ea4f 1261 	mov.w	r2, r1, asr #5
   c3776:	f100 0414 	add.w	r4, r0, #20
   c377a:	dd45      	ble.n	c3808 <rshift+0xa0>
   c377c:	f011 011f 	ands.w	r1, r1, #31
   c3780:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c3784:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c3788:	d10c      	bne.n	c37a4 <rshift+0x3c>
   c378a:	f100 0710 	add.w	r7, r0, #16
   c378e:	4629      	mov	r1, r5
   c3790:	42b1      	cmp	r1, r6
   c3792:	d334      	bcc.n	c37fe <rshift+0x96>
   c3794:	1a9b      	subs	r3, r3, r2
   c3796:	009b      	lsls	r3, r3, #2
   c3798:	1eea      	subs	r2, r5, #3
   c379a:	4296      	cmp	r6, r2
   c379c:	bf38      	it	cc
   c379e:	2300      	movcc	r3, #0
   c37a0:	4423      	add	r3, r4
   c37a2:	e015      	b.n	c37d0 <rshift+0x68>
   c37a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c37a8:	f1c1 0820 	rsb	r8, r1, #32
   c37ac:	40cf      	lsrs	r7, r1
   c37ae:	f105 0e04 	add.w	lr, r5, #4
   c37b2:	46a1      	mov	r9, r4
   c37b4:	4576      	cmp	r6, lr
   c37b6:	46f4      	mov	ip, lr
   c37b8:	d815      	bhi.n	c37e6 <rshift+0x7e>
   c37ba:	1a9a      	subs	r2, r3, r2
   c37bc:	0092      	lsls	r2, r2, #2
   c37be:	3a04      	subs	r2, #4
   c37c0:	3501      	adds	r5, #1
   c37c2:	42ae      	cmp	r6, r5
   c37c4:	bf38      	it	cc
   c37c6:	2200      	movcc	r2, #0
   c37c8:	18a3      	adds	r3, r4, r2
   c37ca:	50a7      	str	r7, [r4, r2]
   c37cc:	b107      	cbz	r7, c37d0 <rshift+0x68>
   c37ce:	3304      	adds	r3, #4
   c37d0:	1b1a      	subs	r2, r3, r4
   c37d2:	42a3      	cmp	r3, r4
   c37d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c37d8:	bf08      	it	eq
   c37da:	2300      	moveq	r3, #0
   c37dc:	6102      	str	r2, [r0, #16]
   c37de:	bf08      	it	eq
   c37e0:	6143      	streq	r3, [r0, #20]
   c37e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c37e6:	f8dc c000 	ldr.w	ip, [ip]
   c37ea:	fa0c fc08 	lsl.w	ip, ip, r8
   c37ee:	ea4c 0707 	orr.w	r7, ip, r7
   c37f2:	f849 7b04 	str.w	r7, [r9], #4
   c37f6:	f85e 7b04 	ldr.w	r7, [lr], #4
   c37fa:	40cf      	lsrs	r7, r1
   c37fc:	e7da      	b.n	c37b4 <rshift+0x4c>
   c37fe:	f851 cb04 	ldr.w	ip, [r1], #4
   c3802:	f847 cf04 	str.w	ip, [r7, #4]!
   c3806:	e7c3      	b.n	c3790 <rshift+0x28>
   c3808:	4623      	mov	r3, r4
   c380a:	e7e1      	b.n	c37d0 <rshift+0x68>

000c380c <__hexdig_fun>:
   c380c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c3810:	2b09      	cmp	r3, #9
   c3812:	d802      	bhi.n	c381a <__hexdig_fun+0xe>
   c3814:	3820      	subs	r0, #32
   c3816:	b2c0      	uxtb	r0, r0
   c3818:	4770      	bx	lr
   c381a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c381e:	2b05      	cmp	r3, #5
   c3820:	d801      	bhi.n	c3826 <__hexdig_fun+0x1a>
   c3822:	3847      	subs	r0, #71	; 0x47
   c3824:	e7f7      	b.n	c3816 <__hexdig_fun+0xa>
   c3826:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c382a:	2b05      	cmp	r3, #5
   c382c:	d801      	bhi.n	c3832 <__hexdig_fun+0x26>
   c382e:	3827      	subs	r0, #39	; 0x27
   c3830:	e7f1      	b.n	c3816 <__hexdig_fun+0xa>
   c3832:	2000      	movs	r0, #0
   c3834:	4770      	bx	lr
	...

000c3838 <__gethex>:
   c3838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c383c:	ed2d 8b02 	vpush	{d8}
   c3840:	b089      	sub	sp, #36	; 0x24
   c3842:	ee08 0a10 	vmov	s16, r0
   c3846:	9304      	str	r3, [sp, #16]
   c3848:	4bb4      	ldr	r3, [pc, #720]	; (c3b1c <__gethex+0x2e4>)
   c384a:	681b      	ldr	r3, [r3, #0]
   c384c:	9301      	str	r3, [sp, #4]
   c384e:	4618      	mov	r0, r3
   c3850:	468b      	mov	fp, r1
   c3852:	4690      	mov	r8, r2
   c3854:	f7fe fff1 	bl	c283a <strlen>
   c3858:	9b01      	ldr	r3, [sp, #4]
   c385a:	f8db 2000 	ldr.w	r2, [fp]
   c385e:	4403      	add	r3, r0
   c3860:	4682      	mov	sl, r0
   c3862:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c3866:	9305      	str	r3, [sp, #20]
   c3868:	1c93      	adds	r3, r2, #2
   c386a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c386e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c3872:	32fe      	adds	r2, #254	; 0xfe
   c3874:	18d1      	adds	r1, r2, r3
   c3876:	461f      	mov	r7, r3
   c3878:	f813 0b01 	ldrb.w	r0, [r3], #1
   c387c:	9100      	str	r1, [sp, #0]
   c387e:	2830      	cmp	r0, #48	; 0x30
   c3880:	d0f8      	beq.n	c3874 <__gethex+0x3c>
   c3882:	f7ff ffc3 	bl	c380c <__hexdig_fun>
   c3886:	4604      	mov	r4, r0
   c3888:	2800      	cmp	r0, #0
   c388a:	d13a      	bne.n	c3902 <__gethex+0xca>
   c388c:	9901      	ldr	r1, [sp, #4]
   c388e:	4652      	mov	r2, sl
   c3890:	4638      	mov	r0, r7
   c3892:	f7fe ffed 	bl	c2870 <strncmp>
   c3896:	4605      	mov	r5, r0
   c3898:	2800      	cmp	r0, #0
   c389a:	d168      	bne.n	c396e <__gethex+0x136>
   c389c:	f817 000a 	ldrb.w	r0, [r7, sl]
   c38a0:	eb07 060a 	add.w	r6, r7, sl
   c38a4:	f7ff ffb2 	bl	c380c <__hexdig_fun>
   c38a8:	2800      	cmp	r0, #0
   c38aa:	d062      	beq.n	c3972 <__gethex+0x13a>
   c38ac:	4633      	mov	r3, r6
   c38ae:	7818      	ldrb	r0, [r3, #0]
   c38b0:	2830      	cmp	r0, #48	; 0x30
   c38b2:	461f      	mov	r7, r3
   c38b4:	f103 0301 	add.w	r3, r3, #1
   c38b8:	d0f9      	beq.n	c38ae <__gethex+0x76>
   c38ba:	f7ff ffa7 	bl	c380c <__hexdig_fun>
   c38be:	2301      	movs	r3, #1
   c38c0:	fab0 f480 	clz	r4, r0
   c38c4:	0964      	lsrs	r4, r4, #5
   c38c6:	4635      	mov	r5, r6
   c38c8:	9300      	str	r3, [sp, #0]
   c38ca:	463a      	mov	r2, r7
   c38cc:	4616      	mov	r6, r2
   c38ce:	3201      	adds	r2, #1
   c38d0:	7830      	ldrb	r0, [r6, #0]
   c38d2:	f7ff ff9b 	bl	c380c <__hexdig_fun>
   c38d6:	2800      	cmp	r0, #0
   c38d8:	d1f8      	bne.n	c38cc <__gethex+0x94>
   c38da:	9901      	ldr	r1, [sp, #4]
   c38dc:	4652      	mov	r2, sl
   c38de:	4630      	mov	r0, r6
   c38e0:	f7fe ffc6 	bl	c2870 <strncmp>
   c38e4:	b980      	cbnz	r0, c3908 <__gethex+0xd0>
   c38e6:	b94d      	cbnz	r5, c38fc <__gethex+0xc4>
   c38e8:	eb06 050a 	add.w	r5, r6, sl
   c38ec:	462a      	mov	r2, r5
   c38ee:	4616      	mov	r6, r2
   c38f0:	3201      	adds	r2, #1
   c38f2:	7830      	ldrb	r0, [r6, #0]
   c38f4:	f7ff ff8a 	bl	c380c <__hexdig_fun>
   c38f8:	2800      	cmp	r0, #0
   c38fa:	d1f8      	bne.n	c38ee <__gethex+0xb6>
   c38fc:	1bad      	subs	r5, r5, r6
   c38fe:	00ad      	lsls	r5, r5, #2
   c3900:	e004      	b.n	c390c <__gethex+0xd4>
   c3902:	2400      	movs	r4, #0
   c3904:	4625      	mov	r5, r4
   c3906:	e7e0      	b.n	c38ca <__gethex+0x92>
   c3908:	2d00      	cmp	r5, #0
   c390a:	d1f7      	bne.n	c38fc <__gethex+0xc4>
   c390c:	7833      	ldrb	r3, [r6, #0]
   c390e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c3912:	2b50      	cmp	r3, #80	; 0x50
   c3914:	d13b      	bne.n	c398e <__gethex+0x156>
   c3916:	7873      	ldrb	r3, [r6, #1]
   c3918:	2b2b      	cmp	r3, #43	; 0x2b
   c391a:	d02c      	beq.n	c3976 <__gethex+0x13e>
   c391c:	2b2d      	cmp	r3, #45	; 0x2d
   c391e:	d02e      	beq.n	c397e <__gethex+0x146>
   c3920:	1c71      	adds	r1, r6, #1
   c3922:	f04f 0900 	mov.w	r9, #0
   c3926:	7808      	ldrb	r0, [r1, #0]
   c3928:	f7ff ff70 	bl	c380c <__hexdig_fun>
   c392c:	1e43      	subs	r3, r0, #1
   c392e:	b2db      	uxtb	r3, r3
   c3930:	2b18      	cmp	r3, #24
   c3932:	d82c      	bhi.n	c398e <__gethex+0x156>
   c3934:	f1a0 0210 	sub.w	r2, r0, #16
   c3938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c393c:	f7ff ff66 	bl	c380c <__hexdig_fun>
   c3940:	1e43      	subs	r3, r0, #1
   c3942:	b2db      	uxtb	r3, r3
   c3944:	2b18      	cmp	r3, #24
   c3946:	d91d      	bls.n	c3984 <__gethex+0x14c>
   c3948:	f1b9 0f00 	cmp.w	r9, #0
   c394c:	d000      	beq.n	c3950 <__gethex+0x118>
   c394e:	4252      	negs	r2, r2
   c3950:	4415      	add	r5, r2
   c3952:	f8cb 1000 	str.w	r1, [fp]
   c3956:	b1e4      	cbz	r4, c3992 <__gethex+0x15a>
   c3958:	9b00      	ldr	r3, [sp, #0]
   c395a:	2b00      	cmp	r3, #0
   c395c:	bf14      	ite	ne
   c395e:	2700      	movne	r7, #0
   c3960:	2706      	moveq	r7, #6
   c3962:	4638      	mov	r0, r7
   c3964:	b009      	add	sp, #36	; 0x24
   c3966:	ecbd 8b02 	vpop	{d8}
   c396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c396e:	463e      	mov	r6, r7
   c3970:	4625      	mov	r5, r4
   c3972:	2401      	movs	r4, #1
   c3974:	e7ca      	b.n	c390c <__gethex+0xd4>
   c3976:	f04f 0900 	mov.w	r9, #0
   c397a:	1cb1      	adds	r1, r6, #2
   c397c:	e7d3      	b.n	c3926 <__gethex+0xee>
   c397e:	f04f 0901 	mov.w	r9, #1
   c3982:	e7fa      	b.n	c397a <__gethex+0x142>
   c3984:	230a      	movs	r3, #10
   c3986:	fb03 0202 	mla	r2, r3, r2, r0
   c398a:	3a10      	subs	r2, #16
   c398c:	e7d4      	b.n	c3938 <__gethex+0x100>
   c398e:	4631      	mov	r1, r6
   c3990:	e7df      	b.n	c3952 <__gethex+0x11a>
   c3992:	1bf3      	subs	r3, r6, r7
   c3994:	3b01      	subs	r3, #1
   c3996:	4621      	mov	r1, r4
   c3998:	2b07      	cmp	r3, #7
   c399a:	dc0b      	bgt.n	c39b4 <__gethex+0x17c>
   c399c:	ee18 0a10 	vmov	r0, s16
   c39a0:	f000 fa68 	bl	c3e74 <_Balloc>
   c39a4:	4604      	mov	r4, r0
   c39a6:	b940      	cbnz	r0, c39ba <__gethex+0x182>
   c39a8:	4b5d      	ldr	r3, [pc, #372]	; (c3b20 <__gethex+0x2e8>)
   c39aa:	4602      	mov	r2, r0
   c39ac:	21de      	movs	r1, #222	; 0xde
   c39ae:	485d      	ldr	r0, [pc, #372]	; (c3b24 <__gethex+0x2ec>)
   c39b0:	f7fa f946 	bl	bdc40 <__assert_func>
   c39b4:	3101      	adds	r1, #1
   c39b6:	105b      	asrs	r3, r3, #1
   c39b8:	e7ee      	b.n	c3998 <__gethex+0x160>
   c39ba:	f100 0914 	add.w	r9, r0, #20
   c39be:	f04f 0b00 	mov.w	fp, #0
   c39c2:	f1ca 0301 	rsb	r3, sl, #1
   c39c6:	f8cd 9008 	str.w	r9, [sp, #8]
   c39ca:	f8cd b000 	str.w	fp, [sp]
   c39ce:	9306      	str	r3, [sp, #24]
   c39d0:	42b7      	cmp	r7, r6
   c39d2:	d340      	bcc.n	c3a56 <__gethex+0x21e>
   c39d4:	9802      	ldr	r0, [sp, #8]
   c39d6:	9b00      	ldr	r3, [sp, #0]
   c39d8:	f840 3b04 	str.w	r3, [r0], #4
   c39dc:	eba0 0009 	sub.w	r0, r0, r9
   c39e0:	1080      	asrs	r0, r0, #2
   c39e2:	0146      	lsls	r6, r0, #5
   c39e4:	6120      	str	r0, [r4, #16]
   c39e6:	4618      	mov	r0, r3
   c39e8:	f000 fb36 	bl	c4058 <__hi0bits>
   c39ec:	1a30      	subs	r0, r6, r0
   c39ee:	f8d8 6000 	ldr.w	r6, [r8]
   c39f2:	42b0      	cmp	r0, r6
   c39f4:	dd63      	ble.n	c3abe <__gethex+0x286>
   c39f6:	1b87      	subs	r7, r0, r6
   c39f8:	4639      	mov	r1, r7
   c39fa:	4620      	mov	r0, r4
   c39fc:	f000 feda 	bl	c47b4 <__any_on>
   c3a00:	4682      	mov	sl, r0
   c3a02:	b1a8      	cbz	r0, c3a30 <__gethex+0x1f8>
   c3a04:	1e7b      	subs	r3, r7, #1
   c3a06:	1159      	asrs	r1, r3, #5
   c3a08:	f003 021f 	and.w	r2, r3, #31
   c3a0c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c3a10:	f04f 0a01 	mov.w	sl, #1
   c3a14:	fa0a f202 	lsl.w	r2, sl, r2
   c3a18:	420a      	tst	r2, r1
   c3a1a:	d009      	beq.n	c3a30 <__gethex+0x1f8>
   c3a1c:	4553      	cmp	r3, sl
   c3a1e:	dd05      	ble.n	c3a2c <__gethex+0x1f4>
   c3a20:	1eb9      	subs	r1, r7, #2
   c3a22:	4620      	mov	r0, r4
   c3a24:	f000 fec6 	bl	c47b4 <__any_on>
   c3a28:	2800      	cmp	r0, #0
   c3a2a:	d145      	bne.n	c3ab8 <__gethex+0x280>
   c3a2c:	f04f 0a02 	mov.w	sl, #2
   c3a30:	4639      	mov	r1, r7
   c3a32:	4620      	mov	r0, r4
   c3a34:	f7ff fe98 	bl	c3768 <rshift>
   c3a38:	443d      	add	r5, r7
   c3a3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3a3e:	42ab      	cmp	r3, r5
   c3a40:	da4c      	bge.n	c3adc <__gethex+0x2a4>
   c3a42:	ee18 0a10 	vmov	r0, s16
   c3a46:	4621      	mov	r1, r4
   c3a48:	f000 fa54 	bl	c3ef4 <_Bfree>
   c3a4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3a4e:	2300      	movs	r3, #0
   c3a50:	6013      	str	r3, [r2, #0]
   c3a52:	27a3      	movs	r7, #163	; 0xa3
   c3a54:	e785      	b.n	c3962 <__gethex+0x12a>
   c3a56:	1e73      	subs	r3, r6, #1
   c3a58:	9a05      	ldr	r2, [sp, #20]
   c3a5a:	9303      	str	r3, [sp, #12]
   c3a5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c3a60:	4293      	cmp	r3, r2
   c3a62:	d019      	beq.n	c3a98 <__gethex+0x260>
   c3a64:	f1bb 0f20 	cmp.w	fp, #32
   c3a68:	d107      	bne.n	c3a7a <__gethex+0x242>
   c3a6a:	9b02      	ldr	r3, [sp, #8]
   c3a6c:	9a00      	ldr	r2, [sp, #0]
   c3a6e:	f843 2b04 	str.w	r2, [r3], #4
   c3a72:	9302      	str	r3, [sp, #8]
   c3a74:	2300      	movs	r3, #0
   c3a76:	9300      	str	r3, [sp, #0]
   c3a78:	469b      	mov	fp, r3
   c3a7a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c3a7e:	f7ff fec5 	bl	c380c <__hexdig_fun>
   c3a82:	9b00      	ldr	r3, [sp, #0]
   c3a84:	f000 000f 	and.w	r0, r0, #15
   c3a88:	fa00 f00b 	lsl.w	r0, r0, fp
   c3a8c:	4303      	orrs	r3, r0
   c3a8e:	9300      	str	r3, [sp, #0]
   c3a90:	f10b 0b04 	add.w	fp, fp, #4
   c3a94:	9b03      	ldr	r3, [sp, #12]
   c3a96:	e00d      	b.n	c3ab4 <__gethex+0x27c>
   c3a98:	9b03      	ldr	r3, [sp, #12]
   c3a9a:	9a06      	ldr	r2, [sp, #24]
   c3a9c:	4413      	add	r3, r2
   c3a9e:	42bb      	cmp	r3, r7
   c3aa0:	d3e0      	bcc.n	c3a64 <__gethex+0x22c>
   c3aa2:	4618      	mov	r0, r3
   c3aa4:	9901      	ldr	r1, [sp, #4]
   c3aa6:	9307      	str	r3, [sp, #28]
   c3aa8:	4652      	mov	r2, sl
   c3aaa:	f7fe fee1 	bl	c2870 <strncmp>
   c3aae:	9b07      	ldr	r3, [sp, #28]
   c3ab0:	2800      	cmp	r0, #0
   c3ab2:	d1d7      	bne.n	c3a64 <__gethex+0x22c>
   c3ab4:	461e      	mov	r6, r3
   c3ab6:	e78b      	b.n	c39d0 <__gethex+0x198>
   c3ab8:	f04f 0a03 	mov.w	sl, #3
   c3abc:	e7b8      	b.n	c3a30 <__gethex+0x1f8>
   c3abe:	da0a      	bge.n	c3ad6 <__gethex+0x29e>
   c3ac0:	1a37      	subs	r7, r6, r0
   c3ac2:	4621      	mov	r1, r4
   c3ac4:	ee18 0a10 	vmov	r0, s16
   c3ac8:	463a      	mov	r2, r7
   c3aca:	f000 fc2f 	bl	c432c <__lshift>
   c3ace:	1bed      	subs	r5, r5, r7
   c3ad0:	4604      	mov	r4, r0
   c3ad2:	f100 0914 	add.w	r9, r0, #20
   c3ad6:	f04f 0a00 	mov.w	sl, #0
   c3ada:	e7ae      	b.n	c3a3a <__gethex+0x202>
   c3adc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c3ae0:	42a8      	cmp	r0, r5
   c3ae2:	dd72      	ble.n	c3bca <__gethex+0x392>
   c3ae4:	1b45      	subs	r5, r0, r5
   c3ae6:	42ae      	cmp	r6, r5
   c3ae8:	dc36      	bgt.n	c3b58 <__gethex+0x320>
   c3aea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3aee:	2b02      	cmp	r3, #2
   c3af0:	d02a      	beq.n	c3b48 <__gethex+0x310>
   c3af2:	2b03      	cmp	r3, #3
   c3af4:	d02c      	beq.n	c3b50 <__gethex+0x318>
   c3af6:	2b01      	cmp	r3, #1
   c3af8:	d11c      	bne.n	c3b34 <__gethex+0x2fc>
   c3afa:	42ae      	cmp	r6, r5
   c3afc:	d11a      	bne.n	c3b34 <__gethex+0x2fc>
   c3afe:	2e01      	cmp	r6, #1
   c3b00:	d112      	bne.n	c3b28 <__gethex+0x2f0>
   c3b02:	9a04      	ldr	r2, [sp, #16]
   c3b04:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c3b08:	6013      	str	r3, [r2, #0]
   c3b0a:	2301      	movs	r3, #1
   c3b0c:	6123      	str	r3, [r4, #16]
   c3b0e:	f8c9 3000 	str.w	r3, [r9]
   c3b12:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3b14:	2762      	movs	r7, #98	; 0x62
   c3b16:	601c      	str	r4, [r3, #0]
   c3b18:	e723      	b.n	c3962 <__gethex+0x12a>
   c3b1a:	bf00      	nop
   c3b1c:	000c64f4 	.word	0x000c64f4
   c3b20:	000c6481 	.word	0x000c6481
   c3b24:	000c6492 	.word	0x000c6492
   c3b28:	1e71      	subs	r1, r6, #1
   c3b2a:	4620      	mov	r0, r4
   c3b2c:	f000 fe42 	bl	c47b4 <__any_on>
   c3b30:	2800      	cmp	r0, #0
   c3b32:	d1e6      	bne.n	c3b02 <__gethex+0x2ca>
   c3b34:	ee18 0a10 	vmov	r0, s16
   c3b38:	4621      	mov	r1, r4
   c3b3a:	f000 f9db 	bl	c3ef4 <_Bfree>
   c3b3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c3b40:	2300      	movs	r3, #0
   c3b42:	6013      	str	r3, [r2, #0]
   c3b44:	2750      	movs	r7, #80	; 0x50
   c3b46:	e70c      	b.n	c3962 <__gethex+0x12a>
   c3b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3b4a:	2b00      	cmp	r3, #0
   c3b4c:	d1f2      	bne.n	c3b34 <__gethex+0x2fc>
   c3b4e:	e7d8      	b.n	c3b02 <__gethex+0x2ca>
   c3b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3b52:	2b00      	cmp	r3, #0
   c3b54:	d1d5      	bne.n	c3b02 <__gethex+0x2ca>
   c3b56:	e7ed      	b.n	c3b34 <__gethex+0x2fc>
   c3b58:	1e6f      	subs	r7, r5, #1
   c3b5a:	f1ba 0f00 	cmp.w	sl, #0
   c3b5e:	d131      	bne.n	c3bc4 <__gethex+0x38c>
   c3b60:	b127      	cbz	r7, c3b6c <__gethex+0x334>
   c3b62:	4639      	mov	r1, r7
   c3b64:	4620      	mov	r0, r4
   c3b66:	f000 fe25 	bl	c47b4 <__any_on>
   c3b6a:	4682      	mov	sl, r0
   c3b6c:	117b      	asrs	r3, r7, #5
   c3b6e:	2101      	movs	r1, #1
   c3b70:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c3b74:	f007 071f 	and.w	r7, r7, #31
   c3b78:	fa01 f707 	lsl.w	r7, r1, r7
   c3b7c:	421f      	tst	r7, r3
   c3b7e:	4629      	mov	r1, r5
   c3b80:	4620      	mov	r0, r4
   c3b82:	bf18      	it	ne
   c3b84:	f04a 0a02 	orrne.w	sl, sl, #2
   c3b88:	1b76      	subs	r6, r6, r5
   c3b8a:	f7ff fded 	bl	c3768 <rshift>
   c3b8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c3b92:	2702      	movs	r7, #2
   c3b94:	f1ba 0f00 	cmp.w	sl, #0
   c3b98:	d048      	beq.n	c3c2c <__gethex+0x3f4>
   c3b9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c3b9e:	2b02      	cmp	r3, #2
   c3ba0:	d015      	beq.n	c3bce <__gethex+0x396>
   c3ba2:	2b03      	cmp	r3, #3
   c3ba4:	d017      	beq.n	c3bd6 <__gethex+0x39e>
   c3ba6:	2b01      	cmp	r3, #1
   c3ba8:	d109      	bne.n	c3bbe <__gethex+0x386>
   c3baa:	f01a 0f02 	tst.w	sl, #2
   c3bae:	d006      	beq.n	c3bbe <__gethex+0x386>
   c3bb0:	f8d9 0000 	ldr.w	r0, [r9]
   c3bb4:	ea4a 0a00 	orr.w	sl, sl, r0
   c3bb8:	f01a 0f01 	tst.w	sl, #1
   c3bbc:	d10e      	bne.n	c3bdc <__gethex+0x3a4>
   c3bbe:	f047 0710 	orr.w	r7, r7, #16
   c3bc2:	e033      	b.n	c3c2c <__gethex+0x3f4>
   c3bc4:	f04f 0a01 	mov.w	sl, #1
   c3bc8:	e7d0      	b.n	c3b6c <__gethex+0x334>
   c3bca:	2701      	movs	r7, #1
   c3bcc:	e7e2      	b.n	c3b94 <__gethex+0x35c>
   c3bce:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3bd0:	f1c3 0301 	rsb	r3, r3, #1
   c3bd4:	9315      	str	r3, [sp, #84]	; 0x54
   c3bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c3bd8:	2b00      	cmp	r3, #0
   c3bda:	d0f0      	beq.n	c3bbe <__gethex+0x386>
   c3bdc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c3be0:	f104 0314 	add.w	r3, r4, #20
   c3be4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c3be8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c3bec:	f04f 0c00 	mov.w	ip, #0
   c3bf0:	4618      	mov	r0, r3
   c3bf2:	f853 2b04 	ldr.w	r2, [r3], #4
   c3bf6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c3bfa:	d01c      	beq.n	c3c36 <__gethex+0x3fe>
   c3bfc:	3201      	adds	r2, #1
   c3bfe:	6002      	str	r2, [r0, #0]
   c3c00:	2f02      	cmp	r7, #2
   c3c02:	f104 0314 	add.w	r3, r4, #20
   c3c06:	d13f      	bne.n	c3c88 <__gethex+0x450>
   c3c08:	f8d8 2000 	ldr.w	r2, [r8]
   c3c0c:	3a01      	subs	r2, #1
   c3c0e:	42b2      	cmp	r2, r6
   c3c10:	d10a      	bne.n	c3c28 <__gethex+0x3f0>
   c3c12:	1171      	asrs	r1, r6, #5
   c3c14:	2201      	movs	r2, #1
   c3c16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c3c1a:	f006 061f 	and.w	r6, r6, #31
   c3c1e:	fa02 f606 	lsl.w	r6, r2, r6
   c3c22:	421e      	tst	r6, r3
   c3c24:	bf18      	it	ne
   c3c26:	4617      	movne	r7, r2
   c3c28:	f047 0720 	orr.w	r7, r7, #32
   c3c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c3c2e:	601c      	str	r4, [r3, #0]
   c3c30:	9b04      	ldr	r3, [sp, #16]
   c3c32:	601d      	str	r5, [r3, #0]
   c3c34:	e695      	b.n	c3962 <__gethex+0x12a>
   c3c36:	4299      	cmp	r1, r3
   c3c38:	f843 cc04 	str.w	ip, [r3, #-4]
   c3c3c:	d8d8      	bhi.n	c3bf0 <__gethex+0x3b8>
   c3c3e:	68a3      	ldr	r3, [r4, #8]
   c3c40:	459b      	cmp	fp, r3
   c3c42:	db19      	blt.n	c3c78 <__gethex+0x440>
   c3c44:	6861      	ldr	r1, [r4, #4]
   c3c46:	ee18 0a10 	vmov	r0, s16
   c3c4a:	3101      	adds	r1, #1
   c3c4c:	f000 f912 	bl	c3e74 <_Balloc>
   c3c50:	4681      	mov	r9, r0
   c3c52:	b918      	cbnz	r0, c3c5c <__gethex+0x424>
   c3c54:	4b1a      	ldr	r3, [pc, #104]	; (c3cc0 <__gethex+0x488>)
   c3c56:	4602      	mov	r2, r0
   c3c58:	2184      	movs	r1, #132	; 0x84
   c3c5a:	e6a8      	b.n	c39ae <__gethex+0x176>
   c3c5c:	6922      	ldr	r2, [r4, #16]
   c3c5e:	3202      	adds	r2, #2
   c3c60:	f104 010c 	add.w	r1, r4, #12
   c3c64:	0092      	lsls	r2, r2, #2
   c3c66:	300c      	adds	r0, #12
   c3c68:	f7fe fd34 	bl	c26d4 <memcpy>
   c3c6c:	4621      	mov	r1, r4
   c3c6e:	ee18 0a10 	vmov	r0, s16
   c3c72:	f000 f93f 	bl	c3ef4 <_Bfree>
   c3c76:	464c      	mov	r4, r9
   c3c78:	6923      	ldr	r3, [r4, #16]
   c3c7a:	1c5a      	adds	r2, r3, #1
   c3c7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c3c80:	6122      	str	r2, [r4, #16]
   c3c82:	2201      	movs	r2, #1
   c3c84:	615a      	str	r2, [r3, #20]
   c3c86:	e7bb      	b.n	c3c00 <__gethex+0x3c8>
   c3c88:	6922      	ldr	r2, [r4, #16]
   c3c8a:	455a      	cmp	r2, fp
   c3c8c:	dd0b      	ble.n	c3ca6 <__gethex+0x46e>
   c3c8e:	2101      	movs	r1, #1
   c3c90:	4620      	mov	r0, r4
   c3c92:	f7ff fd69 	bl	c3768 <rshift>
   c3c96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c3c9a:	3501      	adds	r5, #1
   c3c9c:	42ab      	cmp	r3, r5
   c3c9e:	f6ff aed0 	blt.w	c3a42 <__gethex+0x20a>
   c3ca2:	2701      	movs	r7, #1
   c3ca4:	e7c0      	b.n	c3c28 <__gethex+0x3f0>
   c3ca6:	f016 061f 	ands.w	r6, r6, #31
   c3caa:	d0fa      	beq.n	c3ca2 <__gethex+0x46a>
   c3cac:	4453      	add	r3, sl
   c3cae:	f1c6 0620 	rsb	r6, r6, #32
   c3cb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c3cb6:	f000 f9cf 	bl	c4058 <__hi0bits>
   c3cba:	42b0      	cmp	r0, r6
   c3cbc:	dbe7      	blt.n	c3c8e <__gethex+0x456>
   c3cbe:	e7f0      	b.n	c3ca2 <__gethex+0x46a>
   c3cc0:	000c6481 	.word	0x000c6481

000c3cc4 <L_shift>:
   c3cc4:	f1c2 0208 	rsb	r2, r2, #8
   c3cc8:	0092      	lsls	r2, r2, #2
   c3cca:	b570      	push	{r4, r5, r6, lr}
   c3ccc:	f1c2 0620 	rsb	r6, r2, #32
   c3cd0:	6843      	ldr	r3, [r0, #4]
   c3cd2:	6804      	ldr	r4, [r0, #0]
   c3cd4:	fa03 f506 	lsl.w	r5, r3, r6
   c3cd8:	432c      	orrs	r4, r5
   c3cda:	40d3      	lsrs	r3, r2
   c3cdc:	6004      	str	r4, [r0, #0]
   c3cde:	f840 3f04 	str.w	r3, [r0, #4]!
   c3ce2:	4288      	cmp	r0, r1
   c3ce4:	d3f4      	bcc.n	c3cd0 <L_shift+0xc>
   c3ce6:	bd70      	pop	{r4, r5, r6, pc}

000c3ce8 <__match>:
   c3ce8:	b530      	push	{r4, r5, lr}
   c3cea:	6803      	ldr	r3, [r0, #0]
   c3cec:	3301      	adds	r3, #1
   c3cee:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3cf2:	b914      	cbnz	r4, c3cfa <__match+0x12>
   c3cf4:	6003      	str	r3, [r0, #0]
   c3cf6:	2001      	movs	r0, #1
   c3cf8:	bd30      	pop	{r4, r5, pc}
   c3cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3cfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c3d02:	2d19      	cmp	r5, #25
   c3d04:	bf98      	it	ls
   c3d06:	3220      	addls	r2, #32
   c3d08:	42a2      	cmp	r2, r4
   c3d0a:	d0f0      	beq.n	c3cee <__match+0x6>
   c3d0c:	2000      	movs	r0, #0
   c3d0e:	e7f3      	b.n	c3cf8 <__match+0x10>

000c3d10 <__hexnan>:
   c3d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3d14:	680b      	ldr	r3, [r1, #0]
   c3d16:	115e      	asrs	r6, r3, #5
   c3d18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c3d1c:	f013 031f 	ands.w	r3, r3, #31
   c3d20:	b087      	sub	sp, #28
   c3d22:	bf18      	it	ne
   c3d24:	3604      	addne	r6, #4
   c3d26:	2500      	movs	r5, #0
   c3d28:	1f37      	subs	r7, r6, #4
   c3d2a:	4690      	mov	r8, r2
   c3d2c:	6802      	ldr	r2, [r0, #0]
   c3d2e:	9301      	str	r3, [sp, #4]
   c3d30:	4682      	mov	sl, r0
   c3d32:	f846 5c04 	str.w	r5, [r6, #-4]
   c3d36:	46b9      	mov	r9, r7
   c3d38:	463c      	mov	r4, r7
   c3d3a:	9502      	str	r5, [sp, #8]
   c3d3c:	46ab      	mov	fp, r5
   c3d3e:	7851      	ldrb	r1, [r2, #1]
   c3d40:	1c53      	adds	r3, r2, #1
   c3d42:	9303      	str	r3, [sp, #12]
   c3d44:	b341      	cbz	r1, c3d98 <__hexnan+0x88>
   c3d46:	4608      	mov	r0, r1
   c3d48:	9205      	str	r2, [sp, #20]
   c3d4a:	9104      	str	r1, [sp, #16]
   c3d4c:	f7ff fd5e 	bl	c380c <__hexdig_fun>
   c3d50:	2800      	cmp	r0, #0
   c3d52:	d14f      	bne.n	c3df4 <__hexnan+0xe4>
   c3d54:	9904      	ldr	r1, [sp, #16]
   c3d56:	9a05      	ldr	r2, [sp, #20]
   c3d58:	2920      	cmp	r1, #32
   c3d5a:	d818      	bhi.n	c3d8e <__hexnan+0x7e>
   c3d5c:	9b02      	ldr	r3, [sp, #8]
   c3d5e:	459b      	cmp	fp, r3
   c3d60:	dd13      	ble.n	c3d8a <__hexnan+0x7a>
   c3d62:	454c      	cmp	r4, r9
   c3d64:	d206      	bcs.n	c3d74 <__hexnan+0x64>
   c3d66:	2d07      	cmp	r5, #7
   c3d68:	dc04      	bgt.n	c3d74 <__hexnan+0x64>
   c3d6a:	462a      	mov	r2, r5
   c3d6c:	4649      	mov	r1, r9
   c3d6e:	4620      	mov	r0, r4
   c3d70:	f7ff ffa8 	bl	c3cc4 <L_shift>
   c3d74:	4544      	cmp	r4, r8
   c3d76:	d950      	bls.n	c3e1a <__hexnan+0x10a>
   c3d78:	2300      	movs	r3, #0
   c3d7a:	f1a4 0904 	sub.w	r9, r4, #4
   c3d7e:	f844 3c04 	str.w	r3, [r4, #-4]
   c3d82:	f8cd b008 	str.w	fp, [sp, #8]
   c3d86:	464c      	mov	r4, r9
   c3d88:	461d      	mov	r5, r3
   c3d8a:	9a03      	ldr	r2, [sp, #12]
   c3d8c:	e7d7      	b.n	c3d3e <__hexnan+0x2e>
   c3d8e:	2929      	cmp	r1, #41	; 0x29
   c3d90:	d156      	bne.n	c3e40 <__hexnan+0x130>
   c3d92:	3202      	adds	r2, #2
   c3d94:	f8ca 2000 	str.w	r2, [sl]
   c3d98:	f1bb 0f00 	cmp.w	fp, #0
   c3d9c:	d050      	beq.n	c3e40 <__hexnan+0x130>
   c3d9e:	454c      	cmp	r4, r9
   c3da0:	d206      	bcs.n	c3db0 <__hexnan+0xa0>
   c3da2:	2d07      	cmp	r5, #7
   c3da4:	dc04      	bgt.n	c3db0 <__hexnan+0xa0>
   c3da6:	462a      	mov	r2, r5
   c3da8:	4649      	mov	r1, r9
   c3daa:	4620      	mov	r0, r4
   c3dac:	f7ff ff8a 	bl	c3cc4 <L_shift>
   c3db0:	4544      	cmp	r4, r8
   c3db2:	d934      	bls.n	c3e1e <__hexnan+0x10e>
   c3db4:	f1a8 0204 	sub.w	r2, r8, #4
   c3db8:	4623      	mov	r3, r4
   c3dba:	f853 1b04 	ldr.w	r1, [r3], #4
   c3dbe:	f842 1f04 	str.w	r1, [r2, #4]!
   c3dc2:	429f      	cmp	r7, r3
   c3dc4:	d2f9      	bcs.n	c3dba <__hexnan+0xaa>
   c3dc6:	1b3b      	subs	r3, r7, r4
   c3dc8:	f023 0303 	bic.w	r3, r3, #3
   c3dcc:	3304      	adds	r3, #4
   c3dce:	3401      	adds	r4, #1
   c3dd0:	3e03      	subs	r6, #3
   c3dd2:	42b4      	cmp	r4, r6
   c3dd4:	bf88      	it	hi
   c3dd6:	2304      	movhi	r3, #4
   c3dd8:	4443      	add	r3, r8
   c3dda:	2200      	movs	r2, #0
   c3ddc:	f843 2b04 	str.w	r2, [r3], #4
   c3de0:	429f      	cmp	r7, r3
   c3de2:	d2fb      	bcs.n	c3ddc <__hexnan+0xcc>
   c3de4:	683b      	ldr	r3, [r7, #0]
   c3de6:	b91b      	cbnz	r3, c3df0 <__hexnan+0xe0>
   c3de8:	4547      	cmp	r7, r8
   c3dea:	d127      	bne.n	c3e3c <__hexnan+0x12c>
   c3dec:	2301      	movs	r3, #1
   c3dee:	603b      	str	r3, [r7, #0]
   c3df0:	2005      	movs	r0, #5
   c3df2:	e026      	b.n	c3e42 <__hexnan+0x132>
   c3df4:	3501      	adds	r5, #1
   c3df6:	2d08      	cmp	r5, #8
   c3df8:	f10b 0b01 	add.w	fp, fp, #1
   c3dfc:	dd06      	ble.n	c3e0c <__hexnan+0xfc>
   c3dfe:	4544      	cmp	r4, r8
   c3e00:	d9c3      	bls.n	c3d8a <__hexnan+0x7a>
   c3e02:	2300      	movs	r3, #0
   c3e04:	f844 3c04 	str.w	r3, [r4, #-4]
   c3e08:	2501      	movs	r5, #1
   c3e0a:	3c04      	subs	r4, #4
   c3e0c:	6822      	ldr	r2, [r4, #0]
   c3e0e:	f000 000f 	and.w	r0, r0, #15
   c3e12:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c3e16:	6022      	str	r2, [r4, #0]
   c3e18:	e7b7      	b.n	c3d8a <__hexnan+0x7a>
   c3e1a:	2508      	movs	r5, #8
   c3e1c:	e7b5      	b.n	c3d8a <__hexnan+0x7a>
   c3e1e:	9b01      	ldr	r3, [sp, #4]
   c3e20:	2b00      	cmp	r3, #0
   c3e22:	d0df      	beq.n	c3de4 <__hexnan+0xd4>
   c3e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c3e28:	f1c3 0320 	rsb	r3, r3, #32
   c3e2c:	fa22 f303 	lsr.w	r3, r2, r3
   c3e30:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c3e34:	401a      	ands	r2, r3
   c3e36:	f846 2c04 	str.w	r2, [r6, #-4]
   c3e3a:	e7d3      	b.n	c3de4 <__hexnan+0xd4>
   c3e3c:	3f04      	subs	r7, #4
   c3e3e:	e7d1      	b.n	c3de4 <__hexnan+0xd4>
   c3e40:	2004      	movs	r0, #4
   c3e42:	b007      	add	sp, #28
   c3e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3e48 <__retarget_lock_acquire_recursive>:
   c3e48:	4770      	bx	lr

000c3e4a <__retarget_lock_release>:
   c3e4a:	4770      	bx	lr

000c3e4c <__retarget_lock_release_recursive>:
   c3e4c:	4770      	bx	lr

000c3e4e <__ascii_mbtowc>:
   c3e4e:	b082      	sub	sp, #8
   c3e50:	b901      	cbnz	r1, c3e54 <__ascii_mbtowc+0x6>
   c3e52:	a901      	add	r1, sp, #4
   c3e54:	b142      	cbz	r2, c3e68 <__ascii_mbtowc+0x1a>
   c3e56:	b14b      	cbz	r3, c3e6c <__ascii_mbtowc+0x1e>
   c3e58:	7813      	ldrb	r3, [r2, #0]
   c3e5a:	600b      	str	r3, [r1, #0]
   c3e5c:	7812      	ldrb	r2, [r2, #0]
   c3e5e:	1e10      	subs	r0, r2, #0
   c3e60:	bf18      	it	ne
   c3e62:	2001      	movne	r0, #1
   c3e64:	b002      	add	sp, #8
   c3e66:	4770      	bx	lr
   c3e68:	4610      	mov	r0, r2
   c3e6a:	e7fb      	b.n	c3e64 <__ascii_mbtowc+0x16>
   c3e6c:	f06f 0001 	mvn.w	r0, #1
   c3e70:	e7f8      	b.n	c3e64 <__ascii_mbtowc+0x16>
	...

000c3e74 <_Balloc>:
   c3e74:	b570      	push	{r4, r5, r6, lr}
   c3e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3e78:	4604      	mov	r4, r0
   c3e7a:	460d      	mov	r5, r1
   c3e7c:	b976      	cbnz	r6, c3e9c <_Balloc+0x28>
   c3e7e:	2010      	movs	r0, #16
   c3e80:	f7f9 fe8e 	bl	bdba0 <malloc>
   c3e84:	4602      	mov	r2, r0
   c3e86:	6260      	str	r0, [r4, #36]	; 0x24
   c3e88:	b920      	cbnz	r0, c3e94 <_Balloc+0x20>
   c3e8a:	4b18      	ldr	r3, [pc, #96]	; (c3eec <_Balloc+0x78>)
   c3e8c:	4818      	ldr	r0, [pc, #96]	; (c3ef0 <_Balloc+0x7c>)
   c3e8e:	2166      	movs	r1, #102	; 0x66
   c3e90:	f7f9 fed6 	bl	bdc40 <__assert_func>
   c3e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3e98:	6006      	str	r6, [r0, #0]
   c3e9a:	60c6      	str	r6, [r0, #12]
   c3e9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c3e9e:	68f3      	ldr	r3, [r6, #12]
   c3ea0:	b183      	cbz	r3, c3ec4 <_Balloc+0x50>
   c3ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c3ea4:	68db      	ldr	r3, [r3, #12]
   c3ea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c3eaa:	b9b8      	cbnz	r0, c3edc <_Balloc+0x68>
   c3eac:	2101      	movs	r1, #1
   c3eae:	fa01 f605 	lsl.w	r6, r1, r5
   c3eb2:	1d72      	adds	r2, r6, #5
   c3eb4:	0092      	lsls	r2, r2, #2
   c3eb6:	4620      	mov	r0, r4
   c3eb8:	f000 fc9d 	bl	c47f6 <_calloc_r>
   c3ebc:	b160      	cbz	r0, c3ed8 <_Balloc+0x64>
   c3ebe:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c3ec2:	e00e      	b.n	c3ee2 <_Balloc+0x6e>
   c3ec4:	2221      	movs	r2, #33	; 0x21
   c3ec6:	2104      	movs	r1, #4
   c3ec8:	4620      	mov	r0, r4
   c3eca:	f000 fc94 	bl	c47f6 <_calloc_r>
   c3ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c3ed0:	60f0      	str	r0, [r6, #12]
   c3ed2:	68db      	ldr	r3, [r3, #12]
   c3ed4:	2b00      	cmp	r3, #0
   c3ed6:	d1e4      	bne.n	c3ea2 <_Balloc+0x2e>
   c3ed8:	2000      	movs	r0, #0
   c3eda:	bd70      	pop	{r4, r5, r6, pc}
   c3edc:	6802      	ldr	r2, [r0, #0]
   c3ede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c3ee2:	2300      	movs	r3, #0
   c3ee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c3ee8:	e7f7      	b.n	c3eda <_Balloc+0x66>
   c3eea:	bf00      	nop
   c3eec:	000c62ad 	.word	0x000c62ad
   c3ef0:	000c6506 	.word	0x000c6506

000c3ef4 <_Bfree>:
   c3ef4:	b570      	push	{r4, r5, r6, lr}
   c3ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c3ef8:	4605      	mov	r5, r0
   c3efa:	460c      	mov	r4, r1
   c3efc:	b976      	cbnz	r6, c3f1c <_Bfree+0x28>
   c3efe:	2010      	movs	r0, #16
   c3f00:	f7f9 fe4e 	bl	bdba0 <malloc>
   c3f04:	4602      	mov	r2, r0
   c3f06:	6268      	str	r0, [r5, #36]	; 0x24
   c3f08:	b920      	cbnz	r0, c3f14 <_Bfree+0x20>
   c3f0a:	4b09      	ldr	r3, [pc, #36]	; (c3f30 <_Bfree+0x3c>)
   c3f0c:	4809      	ldr	r0, [pc, #36]	; (c3f34 <_Bfree+0x40>)
   c3f0e:	218a      	movs	r1, #138	; 0x8a
   c3f10:	f7f9 fe96 	bl	bdc40 <__assert_func>
   c3f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c3f18:	6006      	str	r6, [r0, #0]
   c3f1a:	60c6      	str	r6, [r0, #12]
   c3f1c:	b13c      	cbz	r4, c3f2e <_Bfree+0x3a>
   c3f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c3f20:	6862      	ldr	r2, [r4, #4]
   c3f22:	68db      	ldr	r3, [r3, #12]
   c3f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c3f28:	6021      	str	r1, [r4, #0]
   c3f2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c3f2e:	bd70      	pop	{r4, r5, r6, pc}
   c3f30:	000c62ad 	.word	0x000c62ad
   c3f34:	000c6506 	.word	0x000c6506

000c3f38 <__multadd>:
   c3f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c3f3c:	690d      	ldr	r5, [r1, #16]
   c3f3e:	4607      	mov	r7, r0
   c3f40:	460c      	mov	r4, r1
   c3f42:	461e      	mov	r6, r3
   c3f44:	f101 0c14 	add.w	ip, r1, #20
   c3f48:	2000      	movs	r0, #0
   c3f4a:	f8dc 3000 	ldr.w	r3, [ip]
   c3f4e:	b299      	uxth	r1, r3
   c3f50:	fb02 6101 	mla	r1, r2, r1, r6
   c3f54:	0c1e      	lsrs	r6, r3, #16
   c3f56:	0c0b      	lsrs	r3, r1, #16
   c3f58:	fb02 3306 	mla	r3, r2, r6, r3
   c3f5c:	b289      	uxth	r1, r1
   c3f5e:	3001      	adds	r0, #1
   c3f60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c3f64:	4285      	cmp	r5, r0
   c3f66:	f84c 1b04 	str.w	r1, [ip], #4
   c3f6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c3f6e:	dcec      	bgt.n	c3f4a <__multadd+0x12>
   c3f70:	b30e      	cbz	r6, c3fb6 <__multadd+0x7e>
   c3f72:	68a3      	ldr	r3, [r4, #8]
   c3f74:	42ab      	cmp	r3, r5
   c3f76:	dc19      	bgt.n	c3fac <__multadd+0x74>
   c3f78:	6861      	ldr	r1, [r4, #4]
   c3f7a:	4638      	mov	r0, r7
   c3f7c:	3101      	adds	r1, #1
   c3f7e:	f7ff ff79 	bl	c3e74 <_Balloc>
   c3f82:	4680      	mov	r8, r0
   c3f84:	b928      	cbnz	r0, c3f92 <__multadd+0x5a>
   c3f86:	4602      	mov	r2, r0
   c3f88:	4b0c      	ldr	r3, [pc, #48]	; (c3fbc <__multadd+0x84>)
   c3f8a:	480d      	ldr	r0, [pc, #52]	; (c3fc0 <__multadd+0x88>)
   c3f8c:	21b5      	movs	r1, #181	; 0xb5
   c3f8e:	f7f9 fe57 	bl	bdc40 <__assert_func>
   c3f92:	6922      	ldr	r2, [r4, #16]
   c3f94:	3202      	adds	r2, #2
   c3f96:	f104 010c 	add.w	r1, r4, #12
   c3f9a:	0092      	lsls	r2, r2, #2
   c3f9c:	300c      	adds	r0, #12
   c3f9e:	f7fe fb99 	bl	c26d4 <memcpy>
   c3fa2:	4621      	mov	r1, r4
   c3fa4:	4638      	mov	r0, r7
   c3fa6:	f7ff ffa5 	bl	c3ef4 <_Bfree>
   c3faa:	4644      	mov	r4, r8
   c3fac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c3fb0:	3501      	adds	r5, #1
   c3fb2:	615e      	str	r6, [r3, #20]
   c3fb4:	6125      	str	r5, [r4, #16]
   c3fb6:	4620      	mov	r0, r4
   c3fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c3fbc:	000c6481 	.word	0x000c6481
   c3fc0:	000c6506 	.word	0x000c6506

000c3fc4 <__s2b>:
   c3fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c3fc8:	460c      	mov	r4, r1
   c3fca:	4615      	mov	r5, r2
   c3fcc:	461f      	mov	r7, r3
   c3fce:	2209      	movs	r2, #9
   c3fd0:	3308      	adds	r3, #8
   c3fd2:	4606      	mov	r6, r0
   c3fd4:	fb93 f3f2 	sdiv	r3, r3, r2
   c3fd8:	2100      	movs	r1, #0
   c3fda:	2201      	movs	r2, #1
   c3fdc:	429a      	cmp	r2, r3
   c3fde:	db09      	blt.n	c3ff4 <__s2b+0x30>
   c3fe0:	4630      	mov	r0, r6
   c3fe2:	f7ff ff47 	bl	c3e74 <_Balloc>
   c3fe6:	b940      	cbnz	r0, c3ffa <__s2b+0x36>
   c3fe8:	4602      	mov	r2, r0
   c3fea:	4b19      	ldr	r3, [pc, #100]	; (c4050 <__s2b+0x8c>)
   c3fec:	4819      	ldr	r0, [pc, #100]	; (c4054 <__s2b+0x90>)
   c3fee:	21ce      	movs	r1, #206	; 0xce
   c3ff0:	f7f9 fe26 	bl	bdc40 <__assert_func>
   c3ff4:	0052      	lsls	r2, r2, #1
   c3ff6:	3101      	adds	r1, #1
   c3ff8:	e7f0      	b.n	c3fdc <__s2b+0x18>
   c3ffa:	9b08      	ldr	r3, [sp, #32]
   c3ffc:	6143      	str	r3, [r0, #20]
   c3ffe:	2d09      	cmp	r5, #9
   c4000:	f04f 0301 	mov.w	r3, #1
   c4004:	6103      	str	r3, [r0, #16]
   c4006:	dd16      	ble.n	c4036 <__s2b+0x72>
   c4008:	f104 0909 	add.w	r9, r4, #9
   c400c:	46c8      	mov	r8, r9
   c400e:	442c      	add	r4, r5
   c4010:	f818 3b01 	ldrb.w	r3, [r8], #1
   c4014:	4601      	mov	r1, r0
   c4016:	3b30      	subs	r3, #48	; 0x30
   c4018:	220a      	movs	r2, #10
   c401a:	4630      	mov	r0, r6
   c401c:	f7ff ff8c 	bl	c3f38 <__multadd>
   c4020:	45a0      	cmp	r8, r4
   c4022:	d1f5      	bne.n	c4010 <__s2b+0x4c>
   c4024:	f1a5 0408 	sub.w	r4, r5, #8
   c4028:	444c      	add	r4, r9
   c402a:	1b2d      	subs	r5, r5, r4
   c402c:	1963      	adds	r3, r4, r5
   c402e:	42bb      	cmp	r3, r7
   c4030:	db04      	blt.n	c403c <__s2b+0x78>
   c4032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c4036:	340a      	adds	r4, #10
   c4038:	2509      	movs	r5, #9
   c403a:	e7f6      	b.n	c402a <__s2b+0x66>
   c403c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c4040:	4601      	mov	r1, r0
   c4042:	3b30      	subs	r3, #48	; 0x30
   c4044:	220a      	movs	r2, #10
   c4046:	4630      	mov	r0, r6
   c4048:	f7ff ff76 	bl	c3f38 <__multadd>
   c404c:	e7ee      	b.n	c402c <__s2b+0x68>
   c404e:	bf00      	nop
   c4050:	000c6481 	.word	0x000c6481
   c4054:	000c6506 	.word	0x000c6506

000c4058 <__hi0bits>:
   c4058:	0c03      	lsrs	r3, r0, #16
   c405a:	041b      	lsls	r3, r3, #16
   c405c:	b9d3      	cbnz	r3, c4094 <__hi0bits+0x3c>
   c405e:	0400      	lsls	r0, r0, #16
   c4060:	2310      	movs	r3, #16
   c4062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c4066:	bf04      	itt	eq
   c4068:	0200      	lsleq	r0, r0, #8
   c406a:	3308      	addeq	r3, #8
   c406c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c4070:	bf04      	itt	eq
   c4072:	0100      	lsleq	r0, r0, #4
   c4074:	3304      	addeq	r3, #4
   c4076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c407a:	bf04      	itt	eq
   c407c:	0080      	lsleq	r0, r0, #2
   c407e:	3302      	addeq	r3, #2
   c4080:	2800      	cmp	r0, #0
   c4082:	db05      	blt.n	c4090 <__hi0bits+0x38>
   c4084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c4088:	f103 0301 	add.w	r3, r3, #1
   c408c:	bf08      	it	eq
   c408e:	2320      	moveq	r3, #32
   c4090:	4618      	mov	r0, r3
   c4092:	4770      	bx	lr
   c4094:	2300      	movs	r3, #0
   c4096:	e7e4      	b.n	c4062 <__hi0bits+0xa>

000c4098 <__lo0bits>:
   c4098:	6803      	ldr	r3, [r0, #0]
   c409a:	f013 0207 	ands.w	r2, r3, #7
   c409e:	4601      	mov	r1, r0
   c40a0:	d00b      	beq.n	c40ba <__lo0bits+0x22>
   c40a2:	07da      	lsls	r2, r3, #31
   c40a4:	d423      	bmi.n	c40ee <__lo0bits+0x56>
   c40a6:	0798      	lsls	r0, r3, #30
   c40a8:	bf49      	itett	mi
   c40aa:	085b      	lsrmi	r3, r3, #1
   c40ac:	089b      	lsrpl	r3, r3, #2
   c40ae:	2001      	movmi	r0, #1
   c40b0:	600b      	strmi	r3, [r1, #0]
   c40b2:	bf5c      	itt	pl
   c40b4:	600b      	strpl	r3, [r1, #0]
   c40b6:	2002      	movpl	r0, #2
   c40b8:	4770      	bx	lr
   c40ba:	b298      	uxth	r0, r3
   c40bc:	b9a8      	cbnz	r0, c40ea <__lo0bits+0x52>
   c40be:	0c1b      	lsrs	r3, r3, #16
   c40c0:	2010      	movs	r0, #16
   c40c2:	b2da      	uxtb	r2, r3
   c40c4:	b90a      	cbnz	r2, c40ca <__lo0bits+0x32>
   c40c6:	3008      	adds	r0, #8
   c40c8:	0a1b      	lsrs	r3, r3, #8
   c40ca:	071a      	lsls	r2, r3, #28
   c40cc:	bf04      	itt	eq
   c40ce:	091b      	lsreq	r3, r3, #4
   c40d0:	3004      	addeq	r0, #4
   c40d2:	079a      	lsls	r2, r3, #30
   c40d4:	bf04      	itt	eq
   c40d6:	089b      	lsreq	r3, r3, #2
   c40d8:	3002      	addeq	r0, #2
   c40da:	07da      	lsls	r2, r3, #31
   c40dc:	d403      	bmi.n	c40e6 <__lo0bits+0x4e>
   c40de:	085b      	lsrs	r3, r3, #1
   c40e0:	f100 0001 	add.w	r0, r0, #1
   c40e4:	d005      	beq.n	c40f2 <__lo0bits+0x5a>
   c40e6:	600b      	str	r3, [r1, #0]
   c40e8:	4770      	bx	lr
   c40ea:	4610      	mov	r0, r2
   c40ec:	e7e9      	b.n	c40c2 <__lo0bits+0x2a>
   c40ee:	2000      	movs	r0, #0
   c40f0:	4770      	bx	lr
   c40f2:	2020      	movs	r0, #32
   c40f4:	4770      	bx	lr
	...

000c40f8 <__i2b>:
   c40f8:	b510      	push	{r4, lr}
   c40fa:	460c      	mov	r4, r1
   c40fc:	2101      	movs	r1, #1
   c40fe:	f7ff feb9 	bl	c3e74 <_Balloc>
   c4102:	4602      	mov	r2, r0
   c4104:	b928      	cbnz	r0, c4112 <__i2b+0x1a>
   c4106:	4b05      	ldr	r3, [pc, #20]	; (c411c <__i2b+0x24>)
   c4108:	4805      	ldr	r0, [pc, #20]	; (c4120 <__i2b+0x28>)
   c410a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c410e:	f7f9 fd97 	bl	bdc40 <__assert_func>
   c4112:	2301      	movs	r3, #1
   c4114:	6144      	str	r4, [r0, #20]
   c4116:	6103      	str	r3, [r0, #16]
   c4118:	bd10      	pop	{r4, pc}
   c411a:	bf00      	nop
   c411c:	000c6481 	.word	0x000c6481
   c4120:	000c6506 	.word	0x000c6506

000c4124 <__multiply>:
   c4124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4128:	4691      	mov	r9, r2
   c412a:	690a      	ldr	r2, [r1, #16]
   c412c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c4130:	429a      	cmp	r2, r3
   c4132:	bfb8      	it	lt
   c4134:	460b      	movlt	r3, r1
   c4136:	460c      	mov	r4, r1
   c4138:	bfbc      	itt	lt
   c413a:	464c      	movlt	r4, r9
   c413c:	4699      	movlt	r9, r3
   c413e:	6927      	ldr	r7, [r4, #16]
   c4140:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c4144:	68a3      	ldr	r3, [r4, #8]
   c4146:	6861      	ldr	r1, [r4, #4]
   c4148:	eb07 060a 	add.w	r6, r7, sl
   c414c:	42b3      	cmp	r3, r6
   c414e:	b085      	sub	sp, #20
   c4150:	bfb8      	it	lt
   c4152:	3101      	addlt	r1, #1
   c4154:	f7ff fe8e 	bl	c3e74 <_Balloc>
   c4158:	b930      	cbnz	r0, c4168 <__multiply+0x44>
   c415a:	4602      	mov	r2, r0
   c415c:	4b44      	ldr	r3, [pc, #272]	; (c4270 <__multiply+0x14c>)
   c415e:	4845      	ldr	r0, [pc, #276]	; (c4274 <__multiply+0x150>)
   c4160:	f240 115d 	movw	r1, #349	; 0x15d
   c4164:	f7f9 fd6c 	bl	bdc40 <__assert_func>
   c4168:	f100 0514 	add.w	r5, r0, #20
   c416c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c4170:	462b      	mov	r3, r5
   c4172:	2200      	movs	r2, #0
   c4174:	4543      	cmp	r3, r8
   c4176:	d321      	bcc.n	c41bc <__multiply+0x98>
   c4178:	f104 0314 	add.w	r3, r4, #20
   c417c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c4180:	f109 0314 	add.w	r3, r9, #20
   c4184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c4188:	9202      	str	r2, [sp, #8]
   c418a:	1b3a      	subs	r2, r7, r4
   c418c:	3a15      	subs	r2, #21
   c418e:	f022 0203 	bic.w	r2, r2, #3
   c4192:	3204      	adds	r2, #4
   c4194:	f104 0115 	add.w	r1, r4, #21
   c4198:	428f      	cmp	r7, r1
   c419a:	bf38      	it	cc
   c419c:	2204      	movcc	r2, #4
   c419e:	9201      	str	r2, [sp, #4]
   c41a0:	9a02      	ldr	r2, [sp, #8]
   c41a2:	9303      	str	r3, [sp, #12]
   c41a4:	429a      	cmp	r2, r3
   c41a6:	d80c      	bhi.n	c41c2 <__multiply+0x9e>
   c41a8:	2e00      	cmp	r6, #0
   c41aa:	dd03      	ble.n	c41b4 <__multiply+0x90>
   c41ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c41b0:	2b00      	cmp	r3, #0
   c41b2:	d05a      	beq.n	c426a <__multiply+0x146>
   c41b4:	6106      	str	r6, [r0, #16]
   c41b6:	b005      	add	sp, #20
   c41b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c41bc:	f843 2b04 	str.w	r2, [r3], #4
   c41c0:	e7d8      	b.n	c4174 <__multiply+0x50>
   c41c2:	f8b3 a000 	ldrh.w	sl, [r3]
   c41c6:	f1ba 0f00 	cmp.w	sl, #0
   c41ca:	d024      	beq.n	c4216 <__multiply+0xf2>
   c41cc:	f104 0e14 	add.w	lr, r4, #20
   c41d0:	46a9      	mov	r9, r5
   c41d2:	f04f 0c00 	mov.w	ip, #0
   c41d6:	f85e 2b04 	ldr.w	r2, [lr], #4
   c41da:	f8d9 1000 	ldr.w	r1, [r9]
   c41de:	fa1f fb82 	uxth.w	fp, r2
   c41e2:	b289      	uxth	r1, r1
   c41e4:	fb0a 110b 	mla	r1, sl, fp, r1
   c41e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c41ec:	f8d9 2000 	ldr.w	r2, [r9]
   c41f0:	4461      	add	r1, ip
   c41f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c41f6:	fb0a c20b 	mla	r2, sl, fp, ip
   c41fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c41fe:	b289      	uxth	r1, r1
   c4200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c4204:	4577      	cmp	r7, lr
   c4206:	f849 1b04 	str.w	r1, [r9], #4
   c420a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c420e:	d8e2      	bhi.n	c41d6 <__multiply+0xb2>
   c4210:	9a01      	ldr	r2, [sp, #4]
   c4212:	f845 c002 	str.w	ip, [r5, r2]
   c4216:	9a03      	ldr	r2, [sp, #12]
   c4218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c421c:	3304      	adds	r3, #4
   c421e:	f1b9 0f00 	cmp.w	r9, #0
   c4222:	d020      	beq.n	c4266 <__multiply+0x142>
   c4224:	6829      	ldr	r1, [r5, #0]
   c4226:	f104 0c14 	add.w	ip, r4, #20
   c422a:	46ae      	mov	lr, r5
   c422c:	f04f 0a00 	mov.w	sl, #0
   c4230:	f8bc b000 	ldrh.w	fp, [ip]
   c4234:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c4238:	fb09 220b 	mla	r2, r9, fp, r2
   c423c:	4492      	add	sl, r2
   c423e:	b289      	uxth	r1, r1
   c4240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c4244:	f84e 1b04 	str.w	r1, [lr], #4
   c4248:	f85c 2b04 	ldr.w	r2, [ip], #4
   c424c:	f8be 1000 	ldrh.w	r1, [lr]
   c4250:	0c12      	lsrs	r2, r2, #16
   c4252:	fb09 1102 	mla	r1, r9, r2, r1
   c4256:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c425a:	4567      	cmp	r7, ip
   c425c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c4260:	d8e6      	bhi.n	c4230 <__multiply+0x10c>
   c4262:	9a01      	ldr	r2, [sp, #4]
   c4264:	50a9      	str	r1, [r5, r2]
   c4266:	3504      	adds	r5, #4
   c4268:	e79a      	b.n	c41a0 <__multiply+0x7c>
   c426a:	3e01      	subs	r6, #1
   c426c:	e79c      	b.n	c41a8 <__multiply+0x84>
   c426e:	bf00      	nop
   c4270:	000c6481 	.word	0x000c6481
   c4274:	000c6506 	.word	0x000c6506

000c4278 <__pow5mult>:
   c4278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c427c:	4615      	mov	r5, r2
   c427e:	f012 0203 	ands.w	r2, r2, #3
   c4282:	4606      	mov	r6, r0
   c4284:	460f      	mov	r7, r1
   c4286:	d007      	beq.n	c4298 <__pow5mult+0x20>
   c4288:	4c25      	ldr	r4, [pc, #148]	; (c4320 <__pow5mult+0xa8>)
   c428a:	3a01      	subs	r2, #1
   c428c:	2300      	movs	r3, #0
   c428e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c4292:	f7ff fe51 	bl	c3f38 <__multadd>
   c4296:	4607      	mov	r7, r0
   c4298:	10ad      	asrs	r5, r5, #2
   c429a:	d03d      	beq.n	c4318 <__pow5mult+0xa0>
   c429c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c429e:	b97c      	cbnz	r4, c42c0 <__pow5mult+0x48>
   c42a0:	2010      	movs	r0, #16
   c42a2:	f7f9 fc7d 	bl	bdba0 <malloc>
   c42a6:	4602      	mov	r2, r0
   c42a8:	6270      	str	r0, [r6, #36]	; 0x24
   c42aa:	b928      	cbnz	r0, c42b8 <__pow5mult+0x40>
   c42ac:	4b1d      	ldr	r3, [pc, #116]	; (c4324 <__pow5mult+0xac>)
   c42ae:	481e      	ldr	r0, [pc, #120]	; (c4328 <__pow5mult+0xb0>)
   c42b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c42b4:	f7f9 fcc4 	bl	bdc40 <__assert_func>
   c42b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c42bc:	6004      	str	r4, [r0, #0]
   c42be:	60c4      	str	r4, [r0, #12]
   c42c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c42c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c42c8:	b94c      	cbnz	r4, c42de <__pow5mult+0x66>
   c42ca:	f240 2171 	movw	r1, #625	; 0x271
   c42ce:	4630      	mov	r0, r6
   c42d0:	f7ff ff12 	bl	c40f8 <__i2b>
   c42d4:	2300      	movs	r3, #0
   c42d6:	f8c8 0008 	str.w	r0, [r8, #8]
   c42da:	4604      	mov	r4, r0
   c42dc:	6003      	str	r3, [r0, #0]
   c42de:	f04f 0900 	mov.w	r9, #0
   c42e2:	07eb      	lsls	r3, r5, #31
   c42e4:	d50a      	bpl.n	c42fc <__pow5mult+0x84>
   c42e6:	4639      	mov	r1, r7
   c42e8:	4622      	mov	r2, r4
   c42ea:	4630      	mov	r0, r6
   c42ec:	f7ff ff1a 	bl	c4124 <__multiply>
   c42f0:	4639      	mov	r1, r7
   c42f2:	4680      	mov	r8, r0
   c42f4:	4630      	mov	r0, r6
   c42f6:	f7ff fdfd 	bl	c3ef4 <_Bfree>
   c42fa:	4647      	mov	r7, r8
   c42fc:	106d      	asrs	r5, r5, #1
   c42fe:	d00b      	beq.n	c4318 <__pow5mult+0xa0>
   c4300:	6820      	ldr	r0, [r4, #0]
   c4302:	b938      	cbnz	r0, c4314 <__pow5mult+0x9c>
   c4304:	4622      	mov	r2, r4
   c4306:	4621      	mov	r1, r4
   c4308:	4630      	mov	r0, r6
   c430a:	f7ff ff0b 	bl	c4124 <__multiply>
   c430e:	6020      	str	r0, [r4, #0]
   c4310:	f8c0 9000 	str.w	r9, [r0]
   c4314:	4604      	mov	r4, r0
   c4316:	e7e4      	b.n	c42e2 <__pow5mult+0x6a>
   c4318:	4638      	mov	r0, r7
   c431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c431e:	bf00      	nop
   c4320:	000c6650 	.word	0x000c6650
   c4324:	000c62ad 	.word	0x000c62ad
   c4328:	000c6506 	.word	0x000c6506

000c432c <__lshift>:
   c432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c4330:	460c      	mov	r4, r1
   c4332:	6849      	ldr	r1, [r1, #4]
   c4334:	6923      	ldr	r3, [r4, #16]
   c4336:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c433a:	68a3      	ldr	r3, [r4, #8]
   c433c:	4607      	mov	r7, r0
   c433e:	4691      	mov	r9, r2
   c4340:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c4344:	f108 0601 	add.w	r6, r8, #1
   c4348:	42b3      	cmp	r3, r6
   c434a:	db0b      	blt.n	c4364 <__lshift+0x38>
   c434c:	4638      	mov	r0, r7
   c434e:	f7ff fd91 	bl	c3e74 <_Balloc>
   c4352:	4605      	mov	r5, r0
   c4354:	b948      	cbnz	r0, c436a <__lshift+0x3e>
   c4356:	4602      	mov	r2, r0
   c4358:	4b2a      	ldr	r3, [pc, #168]	; (c4404 <__lshift+0xd8>)
   c435a:	482b      	ldr	r0, [pc, #172]	; (c4408 <__lshift+0xdc>)
   c435c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c4360:	f7f9 fc6e 	bl	bdc40 <__assert_func>
   c4364:	3101      	adds	r1, #1
   c4366:	005b      	lsls	r3, r3, #1
   c4368:	e7ee      	b.n	c4348 <__lshift+0x1c>
   c436a:	2300      	movs	r3, #0
   c436c:	f100 0114 	add.w	r1, r0, #20
   c4370:	f100 0210 	add.w	r2, r0, #16
   c4374:	4618      	mov	r0, r3
   c4376:	4553      	cmp	r3, sl
   c4378:	db37      	blt.n	c43ea <__lshift+0xbe>
   c437a:	6920      	ldr	r0, [r4, #16]
   c437c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c4380:	f104 0314 	add.w	r3, r4, #20
   c4384:	f019 091f 	ands.w	r9, r9, #31
   c4388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c438c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c4390:	d02f      	beq.n	c43f2 <__lshift+0xc6>
   c4392:	f1c9 0e20 	rsb	lr, r9, #32
   c4396:	468a      	mov	sl, r1
   c4398:	f04f 0c00 	mov.w	ip, #0
   c439c:	681a      	ldr	r2, [r3, #0]
   c439e:	fa02 f209 	lsl.w	r2, r2, r9
   c43a2:	ea42 020c 	orr.w	r2, r2, ip
   c43a6:	f84a 2b04 	str.w	r2, [sl], #4
   c43aa:	f853 2b04 	ldr.w	r2, [r3], #4
   c43ae:	4298      	cmp	r0, r3
   c43b0:	fa22 fc0e 	lsr.w	ip, r2, lr
   c43b4:	d8f2      	bhi.n	c439c <__lshift+0x70>
   c43b6:	1b03      	subs	r3, r0, r4
   c43b8:	3b15      	subs	r3, #21
   c43ba:	f023 0303 	bic.w	r3, r3, #3
   c43be:	3304      	adds	r3, #4
   c43c0:	f104 0215 	add.w	r2, r4, #21
   c43c4:	4290      	cmp	r0, r2
   c43c6:	bf38      	it	cc
   c43c8:	2304      	movcc	r3, #4
   c43ca:	f841 c003 	str.w	ip, [r1, r3]
   c43ce:	f1bc 0f00 	cmp.w	ip, #0
   c43d2:	d001      	beq.n	c43d8 <__lshift+0xac>
   c43d4:	f108 0602 	add.w	r6, r8, #2
   c43d8:	3e01      	subs	r6, #1
   c43da:	4638      	mov	r0, r7
   c43dc:	612e      	str	r6, [r5, #16]
   c43de:	4621      	mov	r1, r4
   c43e0:	f7ff fd88 	bl	c3ef4 <_Bfree>
   c43e4:	4628      	mov	r0, r5
   c43e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c43ea:	f842 0f04 	str.w	r0, [r2, #4]!
   c43ee:	3301      	adds	r3, #1
   c43f0:	e7c1      	b.n	c4376 <__lshift+0x4a>
   c43f2:	3904      	subs	r1, #4
   c43f4:	f853 2b04 	ldr.w	r2, [r3], #4
   c43f8:	f841 2f04 	str.w	r2, [r1, #4]!
   c43fc:	4298      	cmp	r0, r3
   c43fe:	d8f9      	bhi.n	c43f4 <__lshift+0xc8>
   c4400:	e7ea      	b.n	c43d8 <__lshift+0xac>
   c4402:	bf00      	nop
   c4404:	000c6481 	.word	0x000c6481
   c4408:	000c6506 	.word	0x000c6506

000c440c <__mcmp>:
   c440c:	b530      	push	{r4, r5, lr}
   c440e:	6902      	ldr	r2, [r0, #16]
   c4410:	690c      	ldr	r4, [r1, #16]
   c4412:	1b12      	subs	r2, r2, r4
   c4414:	d10e      	bne.n	c4434 <__mcmp+0x28>
   c4416:	f100 0314 	add.w	r3, r0, #20
   c441a:	3114      	adds	r1, #20
   c441c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c4420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c4424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c4428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c442c:	42a5      	cmp	r5, r4
   c442e:	d003      	beq.n	c4438 <__mcmp+0x2c>
   c4430:	d305      	bcc.n	c443e <__mcmp+0x32>
   c4432:	2201      	movs	r2, #1
   c4434:	4610      	mov	r0, r2
   c4436:	bd30      	pop	{r4, r5, pc}
   c4438:	4283      	cmp	r3, r0
   c443a:	d3f3      	bcc.n	c4424 <__mcmp+0x18>
   c443c:	e7fa      	b.n	c4434 <__mcmp+0x28>
   c443e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4442:	e7f7      	b.n	c4434 <__mcmp+0x28>

000c4444 <__mdiff>:
   c4444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4448:	460c      	mov	r4, r1
   c444a:	4606      	mov	r6, r0
   c444c:	4611      	mov	r1, r2
   c444e:	4620      	mov	r0, r4
   c4450:	4690      	mov	r8, r2
   c4452:	f7ff ffdb 	bl	c440c <__mcmp>
   c4456:	1e05      	subs	r5, r0, #0
   c4458:	d110      	bne.n	c447c <__mdiff+0x38>
   c445a:	4629      	mov	r1, r5
   c445c:	4630      	mov	r0, r6
   c445e:	f7ff fd09 	bl	c3e74 <_Balloc>
   c4462:	b930      	cbnz	r0, c4472 <__mdiff+0x2e>
   c4464:	4b3a      	ldr	r3, [pc, #232]	; (c4550 <__mdiff+0x10c>)
   c4466:	4602      	mov	r2, r0
   c4468:	f240 2132 	movw	r1, #562	; 0x232
   c446c:	4839      	ldr	r0, [pc, #228]	; (c4554 <__mdiff+0x110>)
   c446e:	f7f9 fbe7 	bl	bdc40 <__assert_func>
   c4472:	2301      	movs	r3, #1
   c4474:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c4478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c447c:	bfa4      	itt	ge
   c447e:	4643      	movge	r3, r8
   c4480:	46a0      	movge	r8, r4
   c4482:	4630      	mov	r0, r6
   c4484:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c4488:	bfa6      	itte	ge
   c448a:	461c      	movge	r4, r3
   c448c:	2500      	movge	r5, #0
   c448e:	2501      	movlt	r5, #1
   c4490:	f7ff fcf0 	bl	c3e74 <_Balloc>
   c4494:	b920      	cbnz	r0, c44a0 <__mdiff+0x5c>
   c4496:	4b2e      	ldr	r3, [pc, #184]	; (c4550 <__mdiff+0x10c>)
   c4498:	4602      	mov	r2, r0
   c449a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c449e:	e7e5      	b.n	c446c <__mdiff+0x28>
   c44a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c44a4:	6926      	ldr	r6, [r4, #16]
   c44a6:	60c5      	str	r5, [r0, #12]
   c44a8:	f104 0914 	add.w	r9, r4, #20
   c44ac:	f108 0514 	add.w	r5, r8, #20
   c44b0:	f100 0e14 	add.w	lr, r0, #20
   c44b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c44b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c44bc:	f108 0210 	add.w	r2, r8, #16
   c44c0:	46f2      	mov	sl, lr
   c44c2:	2100      	movs	r1, #0
   c44c4:	f859 3b04 	ldr.w	r3, [r9], #4
   c44c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c44cc:	fa1f f883 	uxth.w	r8, r3
   c44d0:	fa11 f18b 	uxtah	r1, r1, fp
   c44d4:	0c1b      	lsrs	r3, r3, #16
   c44d6:	eba1 0808 	sub.w	r8, r1, r8
   c44da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c44de:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c44e2:	fa1f f888 	uxth.w	r8, r8
   c44e6:	1419      	asrs	r1, r3, #16
   c44e8:	454e      	cmp	r6, r9
   c44ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c44ee:	f84a 3b04 	str.w	r3, [sl], #4
   c44f2:	d8e7      	bhi.n	c44c4 <__mdiff+0x80>
   c44f4:	1b33      	subs	r3, r6, r4
   c44f6:	3b15      	subs	r3, #21
   c44f8:	f023 0303 	bic.w	r3, r3, #3
   c44fc:	3304      	adds	r3, #4
   c44fe:	3415      	adds	r4, #21
   c4500:	42a6      	cmp	r6, r4
   c4502:	bf38      	it	cc
   c4504:	2304      	movcc	r3, #4
   c4506:	441d      	add	r5, r3
   c4508:	4473      	add	r3, lr
   c450a:	469e      	mov	lr, r3
   c450c:	462e      	mov	r6, r5
   c450e:	4566      	cmp	r6, ip
   c4510:	d30e      	bcc.n	c4530 <__mdiff+0xec>
   c4512:	f10c 0203 	add.w	r2, ip, #3
   c4516:	1b52      	subs	r2, r2, r5
   c4518:	f022 0203 	bic.w	r2, r2, #3
   c451c:	3d03      	subs	r5, #3
   c451e:	45ac      	cmp	ip, r5
   c4520:	bf38      	it	cc
   c4522:	2200      	movcc	r2, #0
   c4524:	441a      	add	r2, r3
   c4526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c452a:	b17b      	cbz	r3, c454c <__mdiff+0x108>
   c452c:	6107      	str	r7, [r0, #16]
   c452e:	e7a3      	b.n	c4478 <__mdiff+0x34>
   c4530:	f856 8b04 	ldr.w	r8, [r6], #4
   c4534:	fa11 f288 	uxtah	r2, r1, r8
   c4538:	1414      	asrs	r4, r2, #16
   c453a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c453e:	b292      	uxth	r2, r2
   c4540:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c4544:	f84e 2b04 	str.w	r2, [lr], #4
   c4548:	1421      	asrs	r1, r4, #16
   c454a:	e7e0      	b.n	c450e <__mdiff+0xca>
   c454c:	3f01      	subs	r7, #1
   c454e:	e7ea      	b.n	c4526 <__mdiff+0xe2>
   c4550:	000c6481 	.word	0x000c6481
   c4554:	000c6506 	.word	0x000c6506

000c4558 <__ulp>:
   c4558:	b082      	sub	sp, #8
   c455a:	ed8d 0b00 	vstr	d0, [sp]
   c455e:	9b01      	ldr	r3, [sp, #4]
   c4560:	4912      	ldr	r1, [pc, #72]	; (c45ac <__ulp+0x54>)
   c4562:	4019      	ands	r1, r3
   c4564:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c4568:	2900      	cmp	r1, #0
   c456a:	dd05      	ble.n	c4578 <__ulp+0x20>
   c456c:	2200      	movs	r2, #0
   c456e:	460b      	mov	r3, r1
   c4570:	ec43 2b10 	vmov	d0, r2, r3
   c4574:	b002      	add	sp, #8
   c4576:	4770      	bx	lr
   c4578:	4249      	negs	r1, r1
   c457a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c457e:	ea4f 5021 	mov.w	r0, r1, asr #20
   c4582:	f04f 0200 	mov.w	r2, #0
   c4586:	f04f 0300 	mov.w	r3, #0
   c458a:	da04      	bge.n	c4596 <__ulp+0x3e>
   c458c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c4590:	fa41 f300 	asr.w	r3, r1, r0
   c4594:	e7ec      	b.n	c4570 <__ulp+0x18>
   c4596:	f1a0 0114 	sub.w	r1, r0, #20
   c459a:	291e      	cmp	r1, #30
   c459c:	bfda      	itte	le
   c459e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c45a2:	fa20 f101 	lsrle.w	r1, r0, r1
   c45a6:	2101      	movgt	r1, #1
   c45a8:	460a      	mov	r2, r1
   c45aa:	e7e1      	b.n	c4570 <__ulp+0x18>
   c45ac:	7ff00000 	.word	0x7ff00000

000c45b0 <__b2d>:
   c45b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c45b2:	6905      	ldr	r5, [r0, #16]
   c45b4:	f100 0714 	add.w	r7, r0, #20
   c45b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c45bc:	1f2e      	subs	r6, r5, #4
   c45be:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c45c2:	4620      	mov	r0, r4
   c45c4:	f7ff fd48 	bl	c4058 <__hi0bits>
   c45c8:	f1c0 0320 	rsb	r3, r0, #32
   c45cc:	280a      	cmp	r0, #10
   c45ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; c464c <__b2d+0x9c>
   c45d2:	600b      	str	r3, [r1, #0]
   c45d4:	dc14      	bgt.n	c4600 <__b2d+0x50>
   c45d6:	f1c0 0e0b 	rsb	lr, r0, #11
   c45da:	fa24 f10e 	lsr.w	r1, r4, lr
   c45de:	42b7      	cmp	r7, r6
   c45e0:	ea41 030c 	orr.w	r3, r1, ip
   c45e4:	bf34      	ite	cc
   c45e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c45ea:	2100      	movcs	r1, #0
   c45ec:	3015      	adds	r0, #21
   c45ee:	fa04 f000 	lsl.w	r0, r4, r0
   c45f2:	fa21 f10e 	lsr.w	r1, r1, lr
   c45f6:	ea40 0201 	orr.w	r2, r0, r1
   c45fa:	ec43 2b10 	vmov	d0, r2, r3
   c45fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c4600:	42b7      	cmp	r7, r6
   c4602:	bf3a      	itte	cc
   c4604:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c4608:	f1a5 0608 	subcc.w	r6, r5, #8
   c460c:	2100      	movcs	r1, #0
   c460e:	380b      	subs	r0, #11
   c4610:	d017      	beq.n	c4642 <__b2d+0x92>
   c4612:	f1c0 0c20 	rsb	ip, r0, #32
   c4616:	fa04 f500 	lsl.w	r5, r4, r0
   c461a:	42be      	cmp	r6, r7
   c461c:	fa21 f40c 	lsr.w	r4, r1, ip
   c4620:	ea45 0504 	orr.w	r5, r5, r4
   c4624:	bf8c      	ite	hi
   c4626:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c462a:	2400      	movls	r4, #0
   c462c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c4630:	fa01 f000 	lsl.w	r0, r1, r0
   c4634:	fa24 f40c 	lsr.w	r4, r4, ip
   c4638:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c463c:	ea40 0204 	orr.w	r2, r0, r4
   c4640:	e7db      	b.n	c45fa <__b2d+0x4a>
   c4642:	ea44 030c 	orr.w	r3, r4, ip
   c4646:	460a      	mov	r2, r1
   c4648:	e7d7      	b.n	c45fa <__b2d+0x4a>
   c464a:	bf00      	nop
   c464c:	3ff00000 	.word	0x3ff00000

000c4650 <__d2b>:
   c4650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c4654:	4689      	mov	r9, r1
   c4656:	2101      	movs	r1, #1
   c4658:	ec57 6b10 	vmov	r6, r7, d0
   c465c:	4690      	mov	r8, r2
   c465e:	f7ff fc09 	bl	c3e74 <_Balloc>
   c4662:	4604      	mov	r4, r0
   c4664:	b930      	cbnz	r0, c4674 <__d2b+0x24>
   c4666:	4602      	mov	r2, r0
   c4668:	4b25      	ldr	r3, [pc, #148]	; (c4700 <__d2b+0xb0>)
   c466a:	4826      	ldr	r0, [pc, #152]	; (c4704 <__d2b+0xb4>)
   c466c:	f240 310a 	movw	r1, #778	; 0x30a
   c4670:	f7f9 fae6 	bl	bdc40 <__assert_func>
   c4674:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c4678:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c467c:	bb35      	cbnz	r5, c46cc <__d2b+0x7c>
   c467e:	2e00      	cmp	r6, #0
   c4680:	9301      	str	r3, [sp, #4]
   c4682:	d028      	beq.n	c46d6 <__d2b+0x86>
   c4684:	4668      	mov	r0, sp
   c4686:	9600      	str	r6, [sp, #0]
   c4688:	f7ff fd06 	bl	c4098 <__lo0bits>
   c468c:	9900      	ldr	r1, [sp, #0]
   c468e:	b300      	cbz	r0, c46d2 <__d2b+0x82>
   c4690:	9a01      	ldr	r2, [sp, #4]
   c4692:	f1c0 0320 	rsb	r3, r0, #32
   c4696:	fa02 f303 	lsl.w	r3, r2, r3
   c469a:	430b      	orrs	r3, r1
   c469c:	40c2      	lsrs	r2, r0
   c469e:	6163      	str	r3, [r4, #20]
   c46a0:	9201      	str	r2, [sp, #4]
   c46a2:	9b01      	ldr	r3, [sp, #4]
   c46a4:	61a3      	str	r3, [r4, #24]
   c46a6:	2b00      	cmp	r3, #0
   c46a8:	bf14      	ite	ne
   c46aa:	2202      	movne	r2, #2
   c46ac:	2201      	moveq	r2, #1
   c46ae:	6122      	str	r2, [r4, #16]
   c46b0:	b1d5      	cbz	r5, c46e8 <__d2b+0x98>
   c46b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c46b6:	4405      	add	r5, r0
   c46b8:	f8c9 5000 	str.w	r5, [r9]
   c46bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c46c0:	f8c8 0000 	str.w	r0, [r8]
   c46c4:	4620      	mov	r0, r4
   c46c6:	b003      	add	sp, #12
   c46c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c46cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c46d0:	e7d5      	b.n	c467e <__d2b+0x2e>
   c46d2:	6161      	str	r1, [r4, #20]
   c46d4:	e7e5      	b.n	c46a2 <__d2b+0x52>
   c46d6:	a801      	add	r0, sp, #4
   c46d8:	f7ff fcde 	bl	c4098 <__lo0bits>
   c46dc:	9b01      	ldr	r3, [sp, #4]
   c46de:	6163      	str	r3, [r4, #20]
   c46e0:	2201      	movs	r2, #1
   c46e2:	6122      	str	r2, [r4, #16]
   c46e4:	3020      	adds	r0, #32
   c46e6:	e7e3      	b.n	c46b0 <__d2b+0x60>
   c46e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c46ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c46f0:	f8c9 0000 	str.w	r0, [r9]
   c46f4:	6918      	ldr	r0, [r3, #16]
   c46f6:	f7ff fcaf 	bl	c4058 <__hi0bits>
   c46fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c46fe:	e7df      	b.n	c46c0 <__d2b+0x70>
   c4700:	000c6481 	.word	0x000c6481
   c4704:	000c6506 	.word	0x000c6506

000c4708 <__ratio>:
   c4708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c470c:	4688      	mov	r8, r1
   c470e:	4669      	mov	r1, sp
   c4710:	4681      	mov	r9, r0
   c4712:	f7ff ff4d 	bl	c45b0 <__b2d>
   c4716:	a901      	add	r1, sp, #4
   c4718:	4640      	mov	r0, r8
   c471a:	ec55 4b10 	vmov	r4, r5, d0
   c471e:	f7ff ff47 	bl	c45b0 <__b2d>
   c4722:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c4726:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c472a:	eba3 0c02 	sub.w	ip, r3, r2
   c472e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c4732:	1a9b      	subs	r3, r3, r2
   c4734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c4738:	ec51 0b10 	vmov	r0, r1, d0
   c473c:	2b00      	cmp	r3, #0
   c473e:	bfd6      	itet	le
   c4740:	460a      	movle	r2, r1
   c4742:	462a      	movgt	r2, r5
   c4744:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c4748:	468b      	mov	fp, r1
   c474a:	462f      	mov	r7, r5
   c474c:	bfd4      	ite	le
   c474e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c4752:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c4756:	4620      	mov	r0, r4
   c4758:	ee10 2a10 	vmov	r2, s0
   c475c:	465b      	mov	r3, fp
   c475e:	4639      	mov	r1, r7
   c4760:	f7fd fd6c 	bl	c223c <__aeabi_ddiv>
   c4764:	ec41 0b10 	vmov	d0, r0, r1
   c4768:	b003      	add	sp, #12
   c476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c476e <__copybits>:
   c476e:	3901      	subs	r1, #1
   c4770:	b570      	push	{r4, r5, r6, lr}
   c4772:	1149      	asrs	r1, r1, #5
   c4774:	6914      	ldr	r4, [r2, #16]
   c4776:	3101      	adds	r1, #1
   c4778:	f102 0314 	add.w	r3, r2, #20
   c477c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c4780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c4784:	1f05      	subs	r5, r0, #4
   c4786:	42a3      	cmp	r3, r4
   c4788:	d30c      	bcc.n	c47a4 <__copybits+0x36>
   c478a:	1aa3      	subs	r3, r4, r2
   c478c:	3b11      	subs	r3, #17
   c478e:	f023 0303 	bic.w	r3, r3, #3
   c4792:	3211      	adds	r2, #17
   c4794:	42a2      	cmp	r2, r4
   c4796:	bf88      	it	hi
   c4798:	2300      	movhi	r3, #0
   c479a:	4418      	add	r0, r3
   c479c:	2300      	movs	r3, #0
   c479e:	4288      	cmp	r0, r1
   c47a0:	d305      	bcc.n	c47ae <__copybits+0x40>
   c47a2:	bd70      	pop	{r4, r5, r6, pc}
   c47a4:	f853 6b04 	ldr.w	r6, [r3], #4
   c47a8:	f845 6f04 	str.w	r6, [r5, #4]!
   c47ac:	e7eb      	b.n	c4786 <__copybits+0x18>
   c47ae:	f840 3b04 	str.w	r3, [r0], #4
   c47b2:	e7f4      	b.n	c479e <__copybits+0x30>

000c47b4 <__any_on>:
   c47b4:	f100 0214 	add.w	r2, r0, #20
   c47b8:	6900      	ldr	r0, [r0, #16]
   c47ba:	114b      	asrs	r3, r1, #5
   c47bc:	4298      	cmp	r0, r3
   c47be:	b510      	push	{r4, lr}
   c47c0:	db11      	blt.n	c47e6 <__any_on+0x32>
   c47c2:	dd0a      	ble.n	c47da <__any_on+0x26>
   c47c4:	f011 011f 	ands.w	r1, r1, #31
   c47c8:	d007      	beq.n	c47da <__any_on+0x26>
   c47ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c47ce:	fa24 f001 	lsr.w	r0, r4, r1
   c47d2:	fa00 f101 	lsl.w	r1, r0, r1
   c47d6:	428c      	cmp	r4, r1
   c47d8:	d10b      	bne.n	c47f2 <__any_on+0x3e>
   c47da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c47de:	4293      	cmp	r3, r2
   c47e0:	d803      	bhi.n	c47ea <__any_on+0x36>
   c47e2:	2000      	movs	r0, #0
   c47e4:	bd10      	pop	{r4, pc}
   c47e6:	4603      	mov	r3, r0
   c47e8:	e7f7      	b.n	c47da <__any_on+0x26>
   c47ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c47ee:	2900      	cmp	r1, #0
   c47f0:	d0f5      	beq.n	c47de <__any_on+0x2a>
   c47f2:	2001      	movs	r0, #1
   c47f4:	e7f6      	b.n	c47e4 <__any_on+0x30>

000c47f6 <_calloc_r>:
   c47f6:	b513      	push	{r0, r1, r4, lr}
   c47f8:	434a      	muls	r2, r1
   c47fa:	4611      	mov	r1, r2
   c47fc:	9201      	str	r2, [sp, #4]
   c47fe:	f7f9 fa0f 	bl	bdc20 <_malloc_r>
   c4802:	4604      	mov	r4, r0
   c4804:	b118      	cbz	r0, c480e <_calloc_r+0x18>
   c4806:	9a01      	ldr	r2, [sp, #4]
   c4808:	2100      	movs	r1, #0
   c480a:	f7fd ff8b 	bl	c2724 <memset>
   c480e:	4620      	mov	r0, r4
   c4810:	b002      	add	sp, #8
   c4812:	bd10      	pop	{r4, pc}
   c4814:	0000      	movs	r0, r0
	...

000c4818 <nan>:
   c4818:	ed9f 0b01 	vldr	d0, [pc, #4]	; c4820 <nan+0x8>
   c481c:	4770      	bx	lr
   c481e:	bf00      	nop
   c4820:	00000000 	.word	0x00000000
   c4824:	7ff80000 	.word	0x7ff80000

000c4828 <__ascii_wctomb>:
   c4828:	b149      	cbz	r1, c483e <__ascii_wctomb+0x16>
   c482a:	2aff      	cmp	r2, #255	; 0xff
   c482c:	bf85      	ittet	hi
   c482e:	238a      	movhi	r3, #138	; 0x8a
   c4830:	6003      	strhi	r3, [r0, #0]
   c4832:	700a      	strbls	r2, [r1, #0]
   c4834:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c4838:	bf98      	it	ls
   c483a:	2001      	movls	r0, #1
   c483c:	4770      	bx	lr
   c483e:	4608      	mov	r0, r1
   c4840:	4770      	bx	lr
	...

000c4844 <__aeabi_d2lz>:
   c4844:	b538      	push	{r3, r4, r5, lr}
   c4846:	2200      	movs	r2, #0
   c4848:	2300      	movs	r3, #0
   c484a:	4604      	mov	r4, r0
   c484c:	460d      	mov	r5, r1
   c484e:	f7fd fe3d 	bl	c24cc <__aeabi_dcmplt>
   c4852:	b928      	cbnz	r0, c4860 <__aeabi_d2lz+0x1c>
   c4854:	4620      	mov	r0, r4
   c4856:	4629      	mov	r1, r5
   c4858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c485c:	f7fd bef6 	b.w	c264c <__aeabi_d2ulz>
   c4860:	4620      	mov	r0, r4
   c4862:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c4866:	f7fd fef1 	bl	c264c <__aeabi_d2ulz>
   c486a:	4240      	negs	r0, r0
   c486c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c4870:	bd38      	pop	{r3, r4, r5, pc}
   c4872:	bf00      	nop

000c4874 <dynalib_user>:
   c4874:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c4884:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c4894:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c48a4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c48b4:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c48c4:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c48d4:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c48e4:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c48f4:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c4904:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c4914:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c4924:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c4934:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c4944:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c4954:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c4964:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c4974:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c4984:	5b00 4157 4e52 205d 544c 2045 654d 7373     .[WARN] LTE Mess
   c4994:	6761 7365 6820 7661 2065 6f6e 2074 6562     ages have not be
   c49a4:	6e65 7220 6365 6965 6576 2064 6e69 2520     en received in %
   c49b4:	7364 202c 7361 7573 696d 676e 5820 6542     ds, assuming XBe
   c49c4:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   c49d4:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c49e4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c49f4:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c4a04:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c4a14:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c4a24:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c4a34:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c4a44:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c4a54:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c4a64:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c4a74:	5b00 4157 4e52 205d 654d 7373 6761 2065     .[WARN] Message 
   c4a84:	6843 6365 736b 6d75 4420 656f 2073 6f4e     Checksum Does No
   c4a94:	2074 614d 6374 2168 203a 7325 6300 6c74     t Match!: %s.ctl
   c4aa4:	2500 2073 7325 2520 2064 6425 2520 0064     .%s %s %d %d %d.
   c4ab4:	654e 2077 6174 6772 7465 4720 5350 202c     New target GPS, 
   c4ac4:	614c 3a74 2520 2066 6f4c 3a6e 2520 0066     Lat: %f Lon: %f.
   c4ad4:	746d 0072 6552 6563 7669 6465 4d20 746f     mtr.Received Mot
   c4ae4:	726f 4320 6d6f 616d 646e 203a 534c 6570     or Command: LSpe
   c4af4:	6465 253d 2c64 5352 6570 6465 253d 0064     ed=%d,RSpeed=%d.
   c4b04:	6572 0071 7470 0073 505b 5455 5d53 5220     req.pts.[PUTS] R
   c4b14:	6365 6965 6576 2064 7453 6972 676e 4320     eceived String C
   c4b24:	6d6f 616d 646e 203a 7325 7300 6370 6800     ommand: %s.spc.h
   c4b34:	6177 6400 706d 6500 7067 2500 2073 7325     wa.dmp.egp.%s %s
   c4b44:	7300 7074 5b00 4e49 4f46 205d 6552 6563     .stp.[INFO] Rece
   c4b54:	7669 6465 4c20 4554 4d20 7365 6173 6567     ived LTE Message
   c4b64:	203a 7325 5b00 4e49 4f46 205d 6552 6563     : %s.[INFO] Rece
   c4b74:	7669 6465 4220 454c 4d20 7365 6173 6567     ived BLE Message
   c4b84:	203a 7325 4500 7272 726f 202c 6f43 6c75     : %s.Error, Coul
   c4b94:	2064 6f6e 2074 6e69 7469 6169 696c 657a     d not initialize
   c4ba4:	4720 5350 4800 6165 6964 676e 5200 7761      GPS.Heading.Raw
   c4bb4:	6548 6461 4300 4843 6275 4900 706e 7475     Head.CCHub.Input
   c4bc4:	4320 6d6f 616d 646e 4600 6961 656c 2064      Command.Failed 
   c4bd4:	6f74 6620 6e69 2064 494c 3353 444d 204c     to find LIS3MDL 
   c4be4:	6863 7069 4c00 5349 4d33 4c44 4620 756f     chip.LIS3MDL Fou
   c4bf4:	646e 0021 2542 2564 3230 2564 3230 2564     nd!.B%d%02d%02d%
   c4c04:	3430 2564 3230 2564 3230 2564 3230 0064     04d%02d%02d%02d.
   c4c14:	6157 6574 4272 746f 2e00 7363 0076 4c5f     WaterBot..csv._L
   c4c24:	474f 742e 7478 4500 7272 726f 203a 6f63     OG.txt.Error: co
   c4c34:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c4c44:	6f74 5320 2044 6163 6472 0021 6954 656d     to SD card!.Time
   c4c54:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
   c4c64:	6475 2c65 6554 706d 7265 7461 7275 2c65     ude,Temperature,
   c4c74:	4870 442c 7369 6f73 766c 6465 4f20 2c32     pH,Dissolved O2,
   c4c84:	6f43 646e 6375 6974 6976 7974 3020 312e     Conductivity 0.1
   c4c94:	2c4b 6f43 646e 6375 6974 6976 7974 3120     K,Conductivity 1
   c4ca4:	004b 495b 464e 5d4f 5720 7461 7265 6f42     K.[INFO] WaterBo
   c4cb4:	2074 6425 203a 7453 7261 6574 2064 6f4c     t %d: Started Lo
   c4cc4:	6767 6e69 2167 5500 6470 7461 2065 6f6d     gging!.Update mo
   c4cd4:	6f74 2072 7073 6565 2064 2528 6d64 2973     tor speed (%dms)
   c4ce4:	203a 6425 2520 0064 7325 3025 7832 4200     : %d %d.%s%02x.B
   c4cf4:	746f 6431 7461 4200 6425 4343 646c 0074     ot1dat.B%dCCldt.
   c4d04:	2542 4364 7743 626c 4200 6425 4343 6e73     B%dCCwlb.B%dCCsn
   c4d14:	2573 2e30 6636 2520 2e30 6636 2520 2064     s%0.6f %0.6f %d 
   c4d24:	6425 2520 2064 6425 2520 2064 4200 6425     %d %d %d %d .B%d
   c4d34:	4241 7573 2570 2064 6425 2520 2e30 6636     ABsup%d %d %0.6f
   c4d44:	2520 2e30 6636 2520 2064 6425 0020 7325      %0.6f %d %d .%s
   c4d54:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   c4d64:	6625 252c 0066 495b 464e 5d4f 5220 6365     %f,%f.[INFO] Rec
   c4d74:	6965 6576 2064 4258 6565 4d20 7365 6173     eived XBee Messa
   c4d84:	6567 203a 7325 4500 746e 7265 6e69 2067     ge: %s.Entering 
   c4d94:	6144 6174 4f20 6666 6f6c 6461 7265 4d20     Data Offloader M
   c4da4:	646f 0065 002f 7245 6f72 2c72 6320 756f     ode./.Error, cou
   c4db4:	646c 6e20 746f 6f20 6570 206e 6f72 746f     ld not open root
   c4dc4:	5320 2044 6163 6472 6420 7269 6365 6f74      SD card directo
   c4dd4:	7972 5700 6961 6974 676e 6620 726f 4320     ry.Waiting for C
   c4de4:	4843 6275 6320 6e6f 656e 7463 6f69 2e6e     CHub connection.
   c4df4:	2e2e 5300 6174 7472 6e69 2067 7274 6e61     ...Starting tran
   c4e04:	6673 7265 2e2e 002e 6843 6365 696b 676e     sfer....Checking
   c4e14:	6920 2066 6966 656c 2520 2073 7369 6120      if file %s is a
   c4e24:	2e20 7363 2076 726f 2e20 7874 2e74 2e2e      .csv or .txt...
   c4e34:	6600 6c69 6465 6e6f 0065 6966 656c 616e     .filedone.filena
   c4e44:	656d 5300 6e65 6964 676e 6320 6d6f 616d     me.Sending comma
   c4e54:	646e 2520 0073 6946 656c 2520 2073 7369     nd %s.File %s is
   c4e64:	6120 2e20 7363 2076 726f 2e20 7874 2074      a .csv or .txt 
   c4e74:	7270 6e69 6974 676e 6420 7461 0061 6966     printing data.fi
   c4e84:	656c 6f63 706d 7400 0078 7872 6f00 6666     lecomp.tx.rx.off
   c4e94:	6400 6762 0000 0000                         .dbg....

000c4e9c <_ZTVN8particle11SPISettingsE>:
	...
   c4ea4:	437d 000b 40d1 000b 4183 000b               }C...@...A..

000c4eb0 <_ZTV5Timer>:
	...
   c4eb8:	44e9 000b 4531 000b 419f 000b               .D..1E...A..

000c4ec4 <_ZTVN5spark10LogHandlerE>:
	...
   c4ed4:	40a9 000b 40d3 000b                         .@...@..

000c4edc <_ZTVN8particle9LEDStatusE>:
	...
   c4ee4:	4269 000b 4285 000b 40dd 000b               iB...B...@..

000c4ef0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4ef8:	4299 000b 42cd 000b 08d9 000c 40d5 000b     .B...B.......@..

000c4f08 <_ZTV4File>:
	...
   c4f10:	4181 000b 4191 000b 4217 000b 4211 000b     .A...A...B...B..
   c4f20:	40df 000b 41f1 000b 41eb 000b 41e5 000b     .@...A...A...A..
   c4f30:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c4f40:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c4f50:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c4f60:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c4f70:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c4f80:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c4f90:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c4fa0:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c4fb0:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c4fc0:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c4fd0:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c4fe0:	3765 3135 3238 3062 0000 0000               e75182b0....

000c4fec <CSWTCH.420>:
   c4fec:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c4ffc:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c500c:	444d 004c                                   MDL.

000c5010 <CSWTCH.26>:
   c5010:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c5020 <_ZTV16Adafruit_LIS3MDL>:
	...
   c5028:	7cb7 000b 7d01 000b 7cb5 000b 7db1 000b     .|...}...|...}..
   c5038:	7cb9 000b 6573 5074 6361 656b 4374 6766     .|..setPacketCfg
   c5048:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c5058:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c5068:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c5078:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c5088:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c5098:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c50a8:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c50b8:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c50c8:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c50d8:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c50e8:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c50f8:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c5108:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c5118:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c5128:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c5138:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c5148:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c5158:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c5168:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c5178:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c5188:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c5198:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c51a8:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c51b8:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c51c8:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c51d8:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c51e8:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c51f8:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c5208:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c5218:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c5228:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c5238:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c5248:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c5258:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c5268:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c5278:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c5288:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c5298:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c52a8:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c52b8:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c52c8:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c52d8:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c52e8:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c52f8:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c5308:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c5318:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c5328:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c5338:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c5348:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c5358:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c5368:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c5378:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c5388:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c5398:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c53a8:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c53b8:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c53c8:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c53d8:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c53e8:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c53f8:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c5408:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c5418:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c5428:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c5438:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c5448:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c5458:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c5468:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c5478:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c5488:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c5498:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c54a8:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c54b8:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c54c8:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c54d8:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c54e8:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c54f8:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c5508:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c5518:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c5528:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c5538:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c5548:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c5558:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c5568:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c5578:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c5588:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c5598:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c55a8:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c55b8:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c55c8:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c55d8:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c55e8:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c55f8:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c5608:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c5618:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c5628:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c5638:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c5648:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c5658:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c5668:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c5678:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c5688:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c5698:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c56a8:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c56b8:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c56c8:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c56d8:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c56e8:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c56f8:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c5708:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c5718:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c5728:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c5738:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c5748:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c5758:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c5768:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c5778:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c5788:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c5798:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c57a8:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c57b8:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c57c8:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c57d8:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c57e8:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c57f8:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c5808:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c5818:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c5828:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c5838:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c5848:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c5858:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c5868:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c5878:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c5888:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c5898:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c58a8:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c58b8:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c58c8:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c58d8:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c58e8:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c58f8:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c5908:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c5918:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c5928:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c5938:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c5948:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c5958:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c5968:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c5978:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c5988:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c5998:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c59a8:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c59b8:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c59c8:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c59d8:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c59e8:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c59f8:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c5a08:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c5a18:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c5a28:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c5a38:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c5a48:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c5a58:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c5a68:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c5a78:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c5a88:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c5a98:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c5aa8:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c5ab8:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c5ac8:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c5ad8:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c5ae8:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c5af8:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c5b08:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c5b18:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c5b28:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c5b38:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c5b48:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c5b58:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c5b68:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c5b78:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c5b88:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c5b98:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c5ba8:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c5bb8:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c5bc8:	6900 696e 5074 6361 656b 5574 5842 4643     .initPacketUBXCF
   c5bd8:	5047 5452 203a 4152 204d 6c61 6f6c 2063     GPRT: RAM alloc 
   c5be8:	6166 6c69 6465 0021 6562 6967 3a6e 6920     failed!.begin: i
   c5bf8:	4373 6e6f 656e 7463 6465 2d20 7320 6365     sConnected - sec
   c5c08:	6e6f 2064 7461 6574 706d 0074 6562 6967     ond attempt.begi
   c5c18:	3a6e 6920 4373 6e6f 656e 7463 6465 2d20     n: isConnected -
   c5c28:	7420 6968 6472 6120 7474 6d65 7470 6200      third attempt.b
   c5c38:	6765 6e69 203a 6874 7269 2064 7461 6574     egin: third atte
   c5c48:	706d 2074 6166 6c69 6465 202e 7341 7573     mpt failed. Assu
   c5c58:	696d 676e 7320 6375 6563 7373 2e2e 002e     ming success....

000c5c68 <CSWTCH.334>:
   c5c68:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c5c78:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c5c88:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c5ca8:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c5cd0:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c5d24:	0000 0010 0004                              ......

000c5d2a <CSWTCH.335>:
   c5d2a:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c5d46:	002c 0000 0000 0000 0010 0024               ,.........$.

000c5d52 <CSWTCH.336>:
   c5d52:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c5d62:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c5d72:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c5d82:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c5d92:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c5da2:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c5db2:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c5dc2:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c5dd2:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c5de2:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c5df2:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c5e02:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c5e12:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c5e22:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c5e32:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c5e42:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c5e52:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c5e62:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c5e72:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c5e82:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c5e92:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c5ea4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5eac:	dcbd 000b dd21 000b ddf5 000b dd4b 000b     ....!.......K...
   c5ebc:	dcc1 000b                                   ....

000c5ec0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5ec8:	dcb9 000b dd2f 000b dcbb 000b dd51 000b     ..../.......Q...
   c5ed8:	dce1 000b                                   ....

000c5edc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5ee4:	dcb7 000b dd3d 000b e5c1 000b dd57 000b     ....=.......W...
   c5ef4:	dd01 000b                                   ....

000c5ef8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c5f04:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c5f16 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c5f16:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c5f26 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c5f26:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c5f38 <_ZTVN5spark13CellularClassE>:
	...
   c5f40:	f083 000b f079 000b f06f 000b f025 000b     ....y...o...%...
   c5f50:	f063 000b f057 000b 0c31 000c 0c39 000c     c...W...1...9...
   c5f60:	f04b 000b f043 000b f039 000b f02f 000b     K...C...9.../...
   c5f70:	0c69 000c                                   i...

000c5f74 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5f7c:	f0bd 000b f0c3 000b f101 000b f0d1 000b     ................
   c5f8c:	f0bf 000b                                   ....

000c5f90 <_ZTVN5spark13EthernetClassE>:
	...
   c5f98:	f697 000b f68d 000b f683 000b f679 000b     ............y...
   c5fa8:	f66d 000b f661 000b 0c31 000c 0c39 000c     m...a...1...9...
   c5fb8:	f655 000b f64d 000b f643 000b f639 000b     U...M...C...9...
   c5fc8:	0c69 000c                                   i...

000c5fcc <_ZTV7TwoWire>:
	...
   c5fd4:	f6b5 000b f6ff 000b f6d7 000b f6b7 000b     ................
   c5fe4:	f6df 000b f6e7 000b f6ef 000b f6f7 000b     ................

000c5ff4 <_ZTV9IPAddress>:
	...
   c5ffc:	f829 000b f819 000b f81b 000b 7525 7500     )...........%u.u
   c600c:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c601c:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c602c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c603c:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c604c:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c605c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c606c:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c607c:	6961 006c                                   ail.

000c6080 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c6088:	fd25 000b fd4b 000b fd09 000b f937 000b     %...K.......7...

000c6098 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c60a0:	0181 000c 0199 000c 08d9 000c 40d5 000b     .............@..

000c60b0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c60b8:	01ad 000c 01c1 000c 0a7d 000c fd11 000b     ........}.......

000c60c8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c60d0:	fd23 000b fd59 000b 083d 000c fd13 000b     #...Y...=.......

000c60e0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c60e8:	fd21 000b fd67 000b 00e9 000c fd89 000b     !...g...........

000c60f8 <_ZTVN5spark12NetworkClassE>:
	...
   c6100:	0bf1 000c 0bfb 000c 0c05 000c 0c0f 000c     ................
   c6110:	0c19 000c 0c25 000c 0c31 000c 0c39 000c     ....%...1...9...
   c6120:	0c41 000c 0c4d 000c 0c55 000c 0c5f 000c     A...M...U..._...
   c6130:	0c69 000c                                   i...

000c6134 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c6134:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c6144:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c6154:	6d69 0065                                   ime.

000c6158 <_ZTV11USARTSerial>:
	...
   c6160:	1521 000c 158d 000c 1565 000c 0d55 000c     !.......e...U...
   c6170:	1535 000c 1551 000c 1543 000c 155f 000c     5...Q...C..._...
   c6180:	1523 000c 1527 000c                         #...'...

000c6188 <_ZTV9USBSerial>:
	...
   c6190:	15df 000c 1647 000c 161d 000c 0d55 000c     ....G.......U...
   c61a0:	160f 000c 15e1 000c 15f1 000c 1641 000c     ............A...
   c61b0:	1601 000c 15d9 000c                         ........

000c61b8 <_ZSt7nothrow>:
	...

000c61b9 <_ZTSSt19_Sp_make_shared_tag>:
   c61b9:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c61c9:	6572 5f64 6174 0067 0000                     red_tag....

000c61d4 <_ZTISt19_Sp_make_shared_tag>:
   c61d4:	6214 000c 61b9 000c                         .b...a..

000c61dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   c61dc:	6274 000c 61e8 000c 6298 000c               tb...a...b..

000c61e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c61e8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c61f8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c6208:	0045 0000                                   E...

000c620c <_ZTVN10__cxxabiv117__class_type_infoE>:
   c620c:	0000 0000 61dc 000c 1a99 000c 1aad 000c     .....a..........
   c621c:	1c41 000c 1c41 000c 1b17 000c 1a59 000c     A...A.......Y...
   c622c:	1aff 000c 1ac1 000c 1a8b 000c               ............

000c6238 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c6238:	6274 000c 6244 000c 61dc 000c               tb..Db...a..

000c6244 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c6244:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c6254:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c6264:	666e 456f 0000 0000                         nfoE....

000c626c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c626c:	0000 0000 6238 000c 1b41 000c 1b55 000c     ....8b..A...U...
   c627c:	1c41 000c 1c41 000c 1b17 000c 1a59 000c     A...A.......Y...
   c628c:	1c15 000c 1ba1 000c 1b69 000c               ........i...

000c6298 <_ZTISt9type_info>:
   c6298:	6214 000c 62a0 000c                         .b...b..

000c62a0 <_ZTSSt9type_info>:
   c62a0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c62b0:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c62c0:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   c62d0:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c62e0:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c62f0:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c6300:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c6310:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   c6320:	6e69 7469 0079 6e61 0000 0000               inity.an....

000c632c <fpi.1>:
   c632c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c633c:	0000 0000                                   ....

000c6340 <fpinan.0>:
   c6340:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c6358 <tinytens>:
   c6358:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c6368:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c6378:	6f43 64ac 0628 1168                         Co.d(.h.

000c6380 <_ctype_>:
   c6380:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c6390:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c63a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c63b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c63c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c63d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c63e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c63f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c6400:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c6480:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c6490:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c64a0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c64b0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c64c0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c64d0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c64e0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c64f0:	632e 0000                                   .c..

000c64f4 <_C_numeric_locale>:
   c64f4:	5213 000c 606b 000c dba0 2003 4f50 4953     .R..k`..... POSI
   c6504:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c6514:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c6524:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c6534:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c6544:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c6554:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c6560 <__mprec_bigtens>:
   c6560:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c6570:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c6580:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c6588 <__mprec_tens>:
   c6588:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c6598:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c65a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c65b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c65c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c65d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c65e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c65f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c6608:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c6618:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c6628:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c6638:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c6648:	9db4 79d9 7843 44ea                         ...yCx.D

000c6650 <p05.0>:
   c6650:	0005 0000 0019 0000 007d 0000               ........}...

000c665c <link_const_variable_data_end>:
   c665c:	000b6201 	.word	0x000b6201
   c6660:	000bf015 	.word	0x000bf015
   c6664:	000bf08d 	.word	0x000bf08d
   c6668:	000bf6a1 	.word	0x000bf6a1
   c666c:	000c08c9 	.word	0x000c08c9
   c6670:	000c0d41 	.word	0x000c0d41
   c6674:	000c0e65 	.word	0x000c0e65
   c6678:	000c1369 	.word	0x000c1369
   c667c:	000c150d 	.word	0x000c150d
