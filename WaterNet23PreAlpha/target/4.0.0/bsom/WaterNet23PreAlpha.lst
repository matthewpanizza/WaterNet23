
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/bsom/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013c90  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c7cb0  000c7cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c7cd4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  2003db80  000c7cd8  0002db80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a78  2003dd78  2003dd78  0003dd78  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c7ed0  000c7ed0  00037ed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c7ef8  000c7ef8  00037ef8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022d277  00000000  00000000  00037efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f3f  00000000  00000000  00265173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000709e7  00000000  00000000  002860b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f60  00000000  00000000  002f6a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000113d8  00000000  00000000  002fb9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004ff38  00000000  00000000  0030cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0008742d  00000000  00000000  0035cd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bf8a  00000000  00000000  003e4136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fc84  00000000  00000000  005400c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00f fc7d 	bl	c3930 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00f fc9f 	bl	c3980 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db80 	.word	0x2003db80
   b404c:	000c7cd8 	.word	0x000c7cd8
   b4050:	2003dd78 	.word	0x2003dd78
   b4054:	2003dd78 	.word	0x2003dd78
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00d f935 	bl	c12d0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c7c8c 	.word	0x000c7c8c
   b4080:	000c7cb0 	.word	0x000c7cb0

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bc44 	b.w	b5910 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fbc5 	bl	b5818 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00d b8d5 	b.w	c1240 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 bb35 	b.w	bd704 <malloc>

000b409a <_Znaj>:
   b409a:	f009 bb33 	b.w	bd704 <malloc>

000b409e <_ZdaPv>:
   b409e:	f009 bb39 	b.w	bd714 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f009 bb37 	b.w	bd714 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 fa22 	bl	bd4f8 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bd139 	.word	0x000bd139
   b40bc:	000c5ae0 	.word	0x000c5ae0

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f8:	4770      	bx	lr
	...

000b40fc <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40fc:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x50>)
   b4100:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b4102:	4b13      	ldr	r3, [pc, #76]	; (b4150 <_Z13StatusHandlerv+0x54>)
   b4104:	781b      	ldrb	r3, [r3, #0]
   b4106:	009b      	lsls	r3, r3, #2
   b4108:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b410c:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b4112:	4a11      	ldr	r2, [pc, #68]	; (b4158 <_Z13StatusHandlerv+0x5c>)
   b4114:	7812      	ldrb	r2, [r2, #0]
   b4116:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;
   b411a:	4a10      	ldr	r2, [pc, #64]	; (b415c <_Z13StatusHandlerv+0x60>)
   b411c:	7812      	ldrb	r2, [r2, #0]
   b411e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;
   b4122:	4a0f      	ldr	r2, [pc, #60]	; (b4160 <_Z13StatusHandlerv+0x64>)
   b4124:	7812      	ldrb	r2, [r2, #0]
   b4126:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;
   b412a:	4a0e      	ldr	r2, [pc, #56]	; (b4164 <_Z13StatusHandlerv+0x68>)
   b412c:	7812      	ldrb	r2, [r2, #0]
   b412e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   b4132:	4a0d      	ldr	r2, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x6c>)
   b4134:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4136:	4b0d      	ldr	r3, [pc, #52]	; (b416c <_Z13StatusHandlerv+0x70>)
   b4138:	2201      	movs	r2, #1
   b413a:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b413c:	f00d f838 	bl	c11b0 <_Z16_fetch_usbserialv>
}
   b4140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4144:	490a      	ldr	r1, [pc, #40]	; (b4170 <_Z13StatusHandlerv+0x74>)
   b4146:	f00c bb8a 	b.w	c085e <_ZN5Print7printlnEPKc>
   b414a:	bf00      	nop
   b414c:	2003ddc4 	.word	0x2003ddc4
   b4150:	2003dd84 	.word	0x2003dd84
   b4154:	2003ddb4 	.word	0x2003ddb4
   b4158:	2003e0e8 	.word	0x2003e0e8
   b415c:	2003ddf1 	.word	0x2003ddf1
   b4160:	2003df14 	.word	0x2003df14
   b4164:	2003df0d 	.word	0x2003df0d
   b4168:	2003e5b4 	.word	0x2003e5b4
   b416c:	2003e5d4 	.word	0x2003e5d4
   b4170:	000c5af5 	.word	0x000c5af5

000b4174 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4174:	b510      	push	{r4, lr}
  }
   b4176:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4178:	4604      	mov	r4, r0
  }
   b417a:	f7ff ff92 	bl	b40a2 <_ZdlPvj>
   b417e:	4620      	mov	r0, r4
   b4180:	bd10      	pop	{r4, pc}

000b4182 <_ZN4FileD0Ev>:
   b4182:	b510      	push	{r4, lr}
   b4184:	2134      	movs	r1, #52	; 0x34
   b4186:	4604      	mov	r4, r0
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4190:	3010      	adds	r0, #16
   b4192:	f002 ba63 	b.w	b665c <_ZN7FatFile5writeEPKvj>

000b4196 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4196:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4198:	2201      	movs	r2, #1
   b419a:	f88d 1007 	strb.w	r1, [sp, #7]
   b419e:	3010      	adds	r0, #16
   b41a0:	f10d 0107 	add.w	r1, sp, #7
   b41a4:	f002 fa5a 	bl	b665c <_ZN7FatFile5writeEPKvj>
  }
   b41a8:	b003      	add	sp, #12
   b41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000b41ae <_ZN4File5flushEv>:
    FatFile::sync();
   b41ae:	3010      	adds	r0, #16
   b41b0:	f002 b9ca 	b.w	b6548 <_ZN7FatFile4syncEv>

000b41b4 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b4:	3010      	adds	r0, #16
   b41b6:	f002 b8ab 	b.w	b6310 <_ZN7FatFile4peekEv>

000b41ba <_ZN4File4readEv>:
  int read() {
   b41ba:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41bc:	2201      	movs	r2, #1
   b41be:	f10d 0107 	add.w	r1, sp, #7
   b41c2:	3010      	adds	r0, #16
   b41c4:	f001 fff6 	bl	b61b4 <_ZN7FatFile4readEPvj>
   b41c8:	2801      	cmp	r0, #1
   b41ca:	bf0c      	ite	eq
   b41cc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b41d4:	b003      	add	sp, #12
   b41d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41da <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41da:	6943      	ldr	r3, [r0, #20]
   b41dc:	b113      	cbz	r3, b41e4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41de:	6983      	ldr	r3, [r0, #24]
   b41e0:	300c      	adds	r0, #12
   b41e2:	4718      	bx	r3
            callback();
        }
    }
   b41e4:	4770      	bx	lr

000b41e6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e8:	2100      	movs	r1, #0
   b41ea:	4604      	mov	r4, r0
   b41ec:	4608      	mov	r0, r1
   b41ee:	f008 ff4b 	bl	bd088 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41f2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f4:	4620      	mov	r0, r4
   b41f6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41fa:	f008 ff5d 	bl	bd0b8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fe:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4200:	b10c      	cbz	r4, b4206 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4202:	2301      	movs	r3, #1
   b4204:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4206:	2100      	movs	r1, #0
   b4208:	2001      	movs	r0, #1
   b420a:	f008 ff3d 	bl	bd088 <os_thread_scheduling>
            }
        }
        if (t) {
   b420e:	b12c      	cbz	r4, b421c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
            t->running = false;
   b4218:	2300      	movs	r3, #0
   b421a:	7123      	strb	r3, [r4, #4]
        }
    }
   b421c:	b002      	add	sp, #8
   b421e:	bd10      	pop	{r4, pc}

000b4220 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4220:	2a01      	cmp	r2, #1
   b4222:	d102      	bne.n	b422a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4224:	6001      	str	r1, [r0, #0]
      }
   b4226:	2000      	movs	r0, #0
   b4228:	4770      	bx	lr
	  switch (__op)
   b422a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b422c:	bf04      	itt	eq
   b422e:	680b      	ldreq	r3, [r1, #0]
   b4230:	6003      	streq	r3, [r0, #0]
	      break;
   b4232:	e7f8      	b.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4234 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	4718      	bx	r3

000b4238 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4238:	6803      	ldr	r3, [r0, #0]
   b423a:	b2c9      	uxtb	r1, r1
   b423c:	689b      	ldr	r3, [r3, #8]
   b423e:	4718      	bx	r3

000b4240 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4240:	b510      	push	{r4, lr}
   b4242:	4b05      	ldr	r3, [pc, #20]	; (b4258 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4244:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4246:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4248:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b424a:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424e:	f009 f973 	bl	bd538 <led_set_status_active>
}
   b4252:	4620      	mov	r0, r4
   b4254:	bd10      	pop	{r4, pc}
   b4256:	bf00      	nop
   b4258:	000c60c0 	.word	0x000c60c0

000b425c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0
}
   b4260:	f7ff ffee 	bl	b4240 <_ZN8particle9LEDStatusD1Ev>
   b4264:	4620      	mov	r0, r4
   b4266:	2120      	movs	r1, #32
   b4268:	f7ff ff1b 	bl	b40a2 <_ZdlPvj>
   b426c:	4620      	mov	r0, r4
   b426e:	bd10      	pop	{r4, pc}

000b4270 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4270:	4b0a      	ldr	r3, [pc, #40]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4272:	b510      	push	{r4, lr}
   b4274:	4604      	mov	r4, r0
   b4276:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4278:	f00b fbfa 	bl	bfa70 <_ZN5spark10LogManager8instanceEv>
   b427c:	4621      	mov	r1, r4
   b427e:	f00b fe32 	bl	bfee6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4282:	f00c ff95 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4286:	f00c ff87 	bl	c1198 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b428a:	4620      	mov	r0, r4
   b428c:	4b04      	ldr	r3, [pc, #16]	; (b42a0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428e:	f840 3b04 	str.w	r3, [r0], #4
   b4292:	f00b fcc3 	bl	bfc1c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
   b429a:	bf00      	nop
   b429c:	000c60d4 	.word	0x000c60d4
   b42a0:	000c60a8 	.word	0x000c60a8

000b42a4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a4:	b510      	push	{r4, lr}
   b42a6:	4604      	mov	r4, r0
    }
   b42a8:	f7ff ffe2 	bl	b4270 <_ZN5spark16SerialLogHandlerD1Ev>
   b42ac:	4620      	mov	r0, r4
   b42ae:	2124      	movs	r1, #36	; 0x24
   b42b0:	f7ff fef7 	bl	b40a2 <_ZdlPvj>
   b42b4:	4620      	mov	r0, r4
   b42b6:	bd10      	pop	{r4, pc}

000b42b8 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42ba:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42be:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42c0:	b130      	cbz	r0, b42d0 <_ZN5Timer5startEj.isra.0+0x18>
   b42c2:	2300      	movs	r3, #0
   b42c4:	e9cd 3300 	strd	r3, r3, [sp]
   b42c8:	461a      	mov	r2, r3
   b42ca:	2102      	movs	r1, #2
   b42cc:	f008 fefc 	bl	bd0c8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42d0:	68a0      	ldr	r0, [r4, #8]
   b42d2:	b130      	cbz	r0, b42e2 <_ZN5Timer5startEj.isra.0+0x2a>
   b42d4:	2300      	movs	r3, #0
   b42d6:	e9cd 5300 	strd	r5, r3, [sp]
   b42da:	461a      	mov	r2, r3
   b42dc:	4619      	mov	r1, r3
   b42de:	f008 fef3 	bl	bd0c8 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42e2:	b003      	add	sp, #12
   b42e4:	bd30      	pop	{r4, r5, pc}

000b42e6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e6:	b40e      	push	{r1, r2, r3}
   b42e8:	b503      	push	{r0, r1, lr}
   b42ea:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ec:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ee:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f4:	f00c fadd 	bl	c08b2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f8:	b002      	add	sp, #8
   b42fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fe:	b003      	add	sp, #12
   b4300:	4770      	bx	lr
	...

000b4304 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4306:	4604      	mov	r4, r0
   b4308:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b430a:	7922      	ldrb	r2, [r4, #4]
   b430c:	68a3      	ldr	r3, [r4, #8]
   b430e:	b132      	cbz	r2, b431e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4310:	b9a3      	cbnz	r3, b433c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4312:	490b      	ldr	r1, [pc, #44]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4314:	b002      	add	sp, #8
   b4316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b431a:	f00c ba89 	b.w	c0830 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431e:	4a09      	ldr	r2, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4320:	7b26      	ldrb	r6, [r4, #12]
   b4322:	4d09      	ldr	r5, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4324:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4326:	7b64      	ldrb	r4, [r4, #13]
   b4328:	2e01      	cmp	r6, #1
   b432a:	bf18      	it	ne
   b432c:	4629      	movne	r1, r5
   b432e:	e9cd 1400 	strd	r1, r4, [sp]
   b4332:	4907      	ldr	r1, [pc, #28]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4334:	f7ff ffd7 	bl	b42e6 <_ZN5Print6printfEPKcz>
  }
   b4338:	b002      	add	sp, #8
   b433a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b433c:	4a05      	ldr	r2, [pc, #20]	; (b4354 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433e:	e7ef      	b.n	b4320 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4340:	000c5b1f 	.word	0x000c5b1f
   b4344:	000c721f 	.word	0x000c721f
   b4348:	000c5b1b 	.word	0x000c5b1b
   b434c:	000c5b17 	.word	0x000c5b17
   b4350:	000c5b35 	.word	0x000c5b35
   b4354:	000c5b0e 	.word	0x000c5b0e

000b4358 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4358:	b40e      	push	{r1, r2, r3}
   b435a:	b503      	push	{r0, r1, lr}
   b435c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4360:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4364:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4366:	f00c faa4 	bl	c08b2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b436a:	b002      	add	sp, #8
   b436c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4370:	b003      	add	sp, #12
   b4372:	4770      	bx	lr

000b4374 <_Z13motionHandlerv>:
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
        logFile.close();
    }
}

void motionHandler(){
   b4374:	b510      	push	{r4, lr}
    if(driveMode == 0 && millis() - lastMtrTime > MTR_TIMEOUT){
   b4376:	4b11      	ldr	r3, [pc, #68]	; (b43bc <_Z13motionHandlerv+0x48>)
   b4378:	781b      	ldrb	r3, [r3, #0]
   b437a:	b9eb      	cbnz	r3, b43b8 <_Z13motionHandlerv+0x44>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b437c:	f008 feec 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   b4380:	4b0f      	ldr	r3, [pc, #60]	; (b43c0 <_Z13motionHandlerv+0x4c>)
   b4382:	681b      	ldr	r3, [r3, #0]
   b4384:	1ac0      	subs	r0, r0, r3
   b4386:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b438a:	d915      	bls.n	b43b8 <_Z13motionHandlerv+0x44>
        setLSpeed = 90;
   b438c:	4b0d      	ldr	r3, [pc, #52]	; (b43c4 <_Z13motionHandlerv+0x50>)
        setRSpeed = 90;
   b438e:	4c0e      	ldr	r4, [pc, #56]	; (b43c8 <_Z13motionHandlerv+0x54>)
        updateMotorControl = true;
        ESCL.write(setLSpeed);
   b4390:	480e      	ldr	r0, [pc, #56]	; (b43cc <_Z13motionHandlerv+0x58>)
        setLSpeed = 90;
   b4392:	215a      	movs	r1, #90	; 0x5a
   b4394:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4396:	4b0e      	ldr	r3, [pc, #56]	; (b43d0 <_Z13motionHandlerv+0x5c>)
        setRSpeed = 90;
   b4398:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b439a:	2201      	movs	r2, #1
   b439c:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b439e:	f00c fad0 	bl	c0942 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	480b      	ldr	r0, [pc, #44]	; (b43d4 <_Z13motionHandlerv+0x60>)
   b43a6:	f00c facc 	bl	c0942 <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b43aa:	f00c ff01 	bl	c11b0 <_Z16_fetch_usbserialv>
   b43ae:	490a      	ldr	r1, [pc, #40]	; (b43d8 <_Z13motionHandlerv+0x64>)
   b43b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b43b4:	f7ff ffd0 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    }
}
   b43b8:	bd10      	pop	{r4, pc}
   b43ba:	bf00      	nop
   b43bc:	2003ddf1 	.word	0x2003ddf1
   b43c0:	2003de30 	.word	0x2003de30
   b43c4:	2003e58c 	.word	0x2003e58c
   b43c8:	2003e58d 	.word	0x2003e58d
   b43cc:	2003dd94 	.word	0x2003dd94
   b43d0:	2003e5f0 	.word	0x2003e5f0
   b43d4:	2003dda4 	.word	0x2003dda4
   b43d8:	000c5b52 	.word	0x000c5b52

000b43dc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43dc:	b510      	push	{r4, lr}
      if (_M_manager)
   b43de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43e0:	4604      	mov	r4, r0
      if (_M_manager)
   b43e2:	b113      	cbz	r3, b43ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43e4:	2203      	movs	r2, #3
   b43e6:	4601      	mov	r1, r0
   b43e8:	4798      	blx	r3
    }
   b43ea:	4620      	mov	r0, r4
   b43ec:	bd10      	pop	{r4, pc}
	...

000b43f0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43f2:	4b13      	ldr	r3, [pc, #76]	; (b4440 <_ZN5TimerD1Ev+0x50>)
   b43f4:	6003      	str	r3, [r0, #0]
   b43f6:	4604      	mov	r4, r0
        if (handle) {
   b43f8:	6880      	ldr	r0, [r0, #8]
   b43fa:	b1c8      	cbz	r0, b4430 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43fc:	2500      	movs	r5, #0
   b43fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4402:	e9cd 3500 	strd	r3, r5, [sp]
   b4406:	2102      	movs	r1, #2
   b4408:	462b      	mov	r3, r5
   b440a:	462a      	mov	r2, r5
   b440c:	f008 fe5c 	bl	bd0c8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4410:	68a0      	ldr	r0, [r4, #8]
   b4412:	4629      	mov	r1, r5
   b4414:	f008 fe80 	bl	bd118 <os_timer_set_id>
            while (running) {
   b4418:	7923      	ldrb	r3, [r4, #4]
   b441a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b441e:	b113      	cbz	r3, b4426 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4420:	f008 fe2a 	bl	bd078 <os_thread_yield>
            while (running) {
   b4424:	e7f8      	b.n	b4418 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4426:	68a0      	ldr	r0, [r4, #8]
   b4428:	4629      	mov	r1, r5
   b442a:	f008 fe3d 	bl	bd0a8 <os_timer_destroy>
            handle = nullptr;
   b442e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4430:	f104 000c 	add.w	r0, r4, #12
   b4434:	f7ff ffd2 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   b4438:	4620      	mov	r0, r4
   b443a:	b003      	add	sp, #12
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	bf00      	nop
   b4440:	000c6094 	.word	0x000c6094

000b4444 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4444:	b510      	push	{r4, lr}
   b4446:	4604      	mov	r4, r0
    }
   b4448:	f7ff ffd2 	bl	b43f0 <_ZN5TimerD1Ev>
   b444c:	4620      	mov	r0, r4
   b444e:	211c      	movs	r1, #28
   b4450:	f7ff fe27 	bl	b40a2 <_ZdlPvj>
   b4454:	4620      	mov	r0, r4
   b4456:	bd10      	pop	{r4, pc}

000b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4458:	b5f0      	push	{r4, r5, r6, r7, lr}
   b445a:	468c      	mov	ip, r1
   b445c:	2500      	movs	r5, #0
   b445e:	4914      	ldr	r1, [pc, #80]	; (b44b0 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4460:	7105      	strb	r5, [r0, #4]
   b4462:	4604      	mov	r4, r0
   b4464:	6085      	str	r5, [r0, #8]
   b4466:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4468:	e892 0003 	ldmia.w	r2, {r0, r1}
   b446c:	b085      	sub	sp, #20
   b446e:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4470:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4474:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4478:	e896 0003 	ldmia.w	r6, {r0, r1}
   b447c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4480:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4484:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b448a:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b448c:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b448e:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4490:	6095      	str	r5, [r2, #8]
   b4492:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4496:	e9cd 3500 	strd	r3, r5, [sp]
   b449a:	4a06      	ldr	r2, [pc, #24]	; (b44b4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b449c:	4623      	mov	r3, r4
   b449e:	4661      	mov	r1, ip
   b44a0:	f104 0008 	add.w	r0, r4, #8
   b44a4:	f008 fdf8 	bl	bd098 <os_timer_create>
    }
   b44a8:	4620      	mov	r0, r4
   b44aa:	b005      	add	sp, #20
   b44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44ae:	bf00      	nop
   b44b0:	000c6094 	.word	0x000c6094
   b44b4:	000b41e7 	.word	0x000b41e7

000b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b44b8:	b510      	push	{r4, lr}
   b44ba:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b44bc:	2200      	movs	r2, #0
   b44be:	7c40      	ldrb	r0, [r0, #17]
   b44c0:	f009 f874 	bl	bd5ac <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b44c4:	7c63      	ldrb	r3, [r4, #17]
   b44c6:	2b0f      	cmp	r3, #15
        d_.period = period;
   b44c8:	bf18      	it	ne
   b44ca:	8320      	strhne	r0, [r4, #24]
}
   b44cc:	bd10      	pop	{r4, pc}
	...

000b44d0 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b44d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(signalLED){
   b44d2:	4b29      	ldr	r3, [pc, #164]	; (b4578 <_Z10LEDHandlerv+0xa8>)
   b44d4:	4d29      	ldr	r5, [pc, #164]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44d6:	781b      	ldrb	r3, [r3, #0]
   b44d8:	b15b      	cbz	r3, b44f2 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44da:	7c6b      	ldrb	r3, [r5, #17]
   b44dc:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44de:	bf1c      	itt	ne
   b44e0:	2302      	movne	r3, #2
   b44e2:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b44e4:	4b26      	ldr	r3, [pc, #152]	; (b4580 <_Z10LEDHandlerv+0xb0>)
   b44e6:	616b      	str	r3, [r5, #20]
        return;
    }
    if(offloadMode){
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b44e8:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b44ea:	4824      	ldr	r0, [pc, #144]	; (b457c <_Z10LEDHandlerv+0xac>)
   b44ec:	f7ff ffe4 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b44f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(offloadMode){
   b44f2:	4b24      	ldr	r3, [pc, #144]	; (b4584 <_Z10LEDHandlerv+0xb4>)
   b44f4:	781b      	ldrb	r3, [r3, #0]
   b44f6:	b133      	cbz	r3, b4506 <_Z10LEDHandlerv+0x36>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44f8:	7c6b      	ldrb	r3, [r5, #17]
   b44fa:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b44fc:	bf1c      	itt	ne
   b44fe:	2302      	movne	r3, #2
   b4500:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4502:	23ff      	movs	r3, #255	; 0xff
   b4504:	e7ef      	b.n	b44e6 <_Z10LEDHandlerv+0x16>
    if(lowBattery){
   b4506:	4b20      	ldr	r3, [pc, #128]	; (b4588 <_Z10LEDHandlerv+0xb8>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	2b00      	cmp	r3, #0
   b450c:	d12d      	bne.n	b456a <_Z10LEDHandlerv+0x9a>
    else if(logSensors){
   b450e:	4b1f      	ldr	r3, [pc, #124]	; (b458c <_Z10LEDHandlerv+0xbc>)
   b4510:	781b      	ldrb	r3, [r3, #0]
   b4512:	2b00      	cmp	r3, #0
   b4514:	d12c      	bne.n	b4570 <_Z10LEDHandlerv+0xa0>
    else if(driveMode == 0){
   b4516:	4b1e      	ldr	r3, [pc, #120]	; (b4590 <_Z10LEDHandlerv+0xc0>)
   b4518:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b451a:	2b00      	cmp	r3, #0
   b451c:	bf0b      	itete	eq
   b451e:	260a      	moveq	r6, #10
   b4520:	2614      	movne	r6, #20
   b4522:	2702      	moveq	r7, #2
   b4524:	2703      	movne	r7, #3
    statusMode |= XBeeAvail << 1;
   b4526:	4b1b      	ldr	r3, [pc, #108]	; (b4594 <_Z10LEDHandlerv+0xc4>)
   b4528:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b452a:	4b1b      	ldr	r3, [pc, #108]	; (b4598 <_Z10LEDHandlerv+0xc8>)
   b452c:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b452e:	4b1b      	ldr	r3, [pc, #108]	; (b459c <_Z10LEDHandlerv+0xcc>)
    statusMode |= BLEAvail << 2;
   b4530:	00a4      	lsls	r4, r4, #2
   b4532:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b4536:	781a      	ldrb	r2, [r3, #0]
   b4538:	4314      	orrs	r4, r2
   b453a:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b453c:	f00c fe38 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4540:	4622      	mov	r2, r4
   b4542:	3c01      	subs	r4, #1
   b4544:	4916      	ldr	r1, [pc, #88]	; (b45a0 <_Z10LEDHandlerv+0xd0>)
   b4546:	b2e4      	uxtb	r4, r4
   b4548:	f7ff ff06 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b454c:	2c06      	cmp	r4, #6
   b454e:	bf98      	it	ls
   b4550:	4b14      	ldrls	r3, [pc, #80]	; (b45a4 <_Z10LEDHandlerv+0xd4>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4552:	7c6a      	ldrb	r2, [r5, #17]
   b4554:	bf94      	ite	ls
   b4556:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b455a:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b455e:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4560:	bf18      	it	ne
   b4562:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b4564:	4631      	mov	r1, r6
    d_.color = color;
   b4566:	616b      	str	r3, [r5, #20]
   b4568:	e7bf      	b.n	b44ea <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b456a:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b456c:	2702      	movs	r7, #2
   b456e:	e7da      	b.n	b4526 <_Z10LEDHandlerv+0x56>
        SetSpeed = LED_SPEED_NORMAL;
   b4570:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b4572:	2701      	movs	r7, #1
   b4574:	e7d7      	b.n	b4526 <_Z10LEDHandlerv+0x56>
   b4576:	bf00      	nop
   b4578:	2003e58e 	.word	0x2003e58e
   b457c:	2003e594 	.word	0x2003e594
   b4580:	00ff6000 	.word	0x00ff6000
   b4584:	2003e0e8 	.word	0x2003e0e8
   b4588:	2003df14 	.word	0x2003df14
   b458c:	2003df0d 	.word	0x2003df0d
   b4590:	2003ddf1 	.word	0x2003ddf1
   b4594:	2003ddc4 	.word	0x2003ddc4
   b4598:	2003dd84 	.word	0x2003dd84
   b459c:	2003ddb4 	.word	0x2003ddb4
   b45a0:	000c5b9c 	.word	0x000c5b9c
   b45a4:	000c61a0 	.word	0x000c61a0

000b45a8 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b45a8:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b45aa:	460a      	mov	r2, r1
   b45ac:	4901      	ldr	r1, [pc, #4]	; (b45b4 <_ZN7FatFile4openEPKci+0xc>)
   b45ae:	6809      	ldr	r1, [r1, #0]
   b45b0:	f002 b807 	b.w	b65c2 <_ZN7FatFile4openEPS_PKci>
   b45b4:	2003e614 	.word	0x2003e614

000b45b8 <_Z11wdogHandlerv>:
void wdogHandler(){
   b45b8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b45ba:	f009 f81b 	bl	bd5f4 <spark_cloud_flag_connected>
   b45be:	4c2b      	ldr	r4, [pc, #172]	; (b466c <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b45c0:	b1e0      	cbz	r0, b45fc <_Z11wdogHandlerv+0x44>
   b45c2:	2301      	movs	r3, #1
        LTEAvail = false;
   b45c4:	7023      	strb	r3, [r4, #0]
   b45c6:	f008 fdc7 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b45ca:	4b29      	ldr	r3, [pc, #164]	; (b4670 <_Z11wdogHandlerv+0xb8>)
   b45cc:	4c29      	ldr	r4, [pc, #164]	; (b4674 <_Z11wdogHandlerv+0xbc>)
   b45ce:	681b      	ldr	r3, [r3, #0]
   b45d0:	f247 5230 	movw	r2, #30000	; 0x7530
   b45d4:	1ac0      	subs	r0, r0, r3
   b45d6:	4290      	cmp	r0, r2
   b45d8:	d823      	bhi.n	b4622 <_Z11wdogHandlerv+0x6a>
   b45da:	b313      	cbz	r3, b4622 <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b45dc:	2301      	movs	r3, #1
        XBeeAvail = false;
   b45de:	7023      	strb	r3, [r4, #0]
   b45e0:	f008 fdba 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b45e4:	4b24      	ldr	r3, [pc, #144]	; (b4678 <_Z11wdogHandlerv+0xc0>)
   b45e6:	4c25      	ldr	r4, [pc, #148]	; (b467c <_Z11wdogHandlerv+0xc4>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	f247 5230 	movw	r2, #30000	; 0x7530
   b45ee:	1ac0      	subs	r0, r0, r3
   b45f0:	4290      	cmp	r0, r2
   b45f2:	d828      	bhi.n	b4646 <_Z11wdogHandlerv+0x8e>
   b45f4:	b33b      	cbz	r3, b4646 <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b45f6:	2301      	movs	r3, #1
        BLEAvail = false;
   b45f8:	7023      	strb	r3, [r4, #0]
}
   b45fa:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b45fc:	7823      	ldrb	r3, [r4, #0]
   b45fe:	2b00      	cmp	r3, #0
   b4600:	d0e1      	beq.n	b45c6 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b4602:	481f      	ldr	r0, [pc, #124]	; (b4680 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4604:	7c03      	ldrb	r3, [r0, #16]
   b4606:	b92b      	cbnz	r3, b4614 <_Z11wdogHandlerv+0x5c>
   b4608:	491e      	ldr	r1, [pc, #120]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b460a:	f244 2202 	movw	r2, #16898	; 0x4202
   b460e:	3010      	adds	r0, #16
   b4610:	f7ff ffca 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4614:	491c      	ldr	r1, [pc, #112]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b4616:	481a      	ldr	r0, [pc, #104]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4618:	221e      	movs	r2, #30
   b461a:	f7ff fe9d 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b461e:	2300      	movs	r3, #0
   b4620:	e7d0      	b.n	b45c4 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b4622:	7823      	ldrb	r3, [r4, #0]
   b4624:	b16b      	cbz	r3, b4642 <_Z11wdogHandlerv+0x8a>
   b4626:	4816      	ldr	r0, [pc, #88]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4628:	7c03      	ldrb	r3, [r0, #16]
   b462a:	b92b      	cbnz	r3, b4638 <_Z11wdogHandlerv+0x80>
   b462c:	4915      	ldr	r1, [pc, #84]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b462e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4632:	3010      	adds	r0, #16
   b4634:	f7ff ffb8 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4638:	4913      	ldr	r1, [pc, #76]	; (b4688 <_Z11wdogHandlerv+0xd0>)
   b463a:	4811      	ldr	r0, [pc, #68]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b463c:	221e      	movs	r2, #30
   b463e:	f7ff fe8b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b4642:	2300      	movs	r3, #0
   b4644:	e7cb      	b.n	b45de <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4646:	7822      	ldrb	r2, [r4, #0]
   b4648:	b172      	cbz	r2, b4668 <_Z11wdogHandlerv+0xb0>
   b464a:	b16b      	cbz	r3, b4668 <_Z11wdogHandlerv+0xb0>
   b464c:	480c      	ldr	r0, [pc, #48]	; (b4680 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b464e:	7c03      	ldrb	r3, [r0, #16]
   b4650:	b92b      	cbnz	r3, b465e <_Z11wdogHandlerv+0xa6>
   b4652:	490c      	ldr	r1, [pc, #48]	; (b4684 <_Z11wdogHandlerv+0xcc>)
   b4654:	f244 2202 	movw	r2, #16898	; 0x4202
   b4658:	3010      	adds	r0, #16
   b465a:	f7ff ffa5 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b465e:	490b      	ldr	r1, [pc, #44]	; (b468c <_Z11wdogHandlerv+0xd4>)
   b4660:	4807      	ldr	r0, [pc, #28]	; (b4680 <_Z11wdogHandlerv+0xc8>)
   b4662:	221e      	movs	r2, #30
   b4664:	f7ff fe78 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4668:	2300      	movs	r3, #0
   b466a:	e7c5      	b.n	b45f8 <_Z11wdogHandlerv+0x40>
   b466c:	2003ddb4 	.word	0x2003ddb4
   b4670:	2003ddc8 	.word	0x2003ddc8
   b4674:	2003ddc4 	.word	0x2003ddc4
   b4678:	2003dd90 	.word	0x2003dd90
   b467c:	2003dd84 	.word	0x2003dd84
   b4680:	2003deb4 	.word	0x2003deb4
   b4684:	2003de10 	.word	0x2003de10
   b4688:	000c5ba7 	.word	0x000c5ba7
   b468c:	000c5bf8 	.word	0x000c5bf8

000b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4690:	b530      	push	{r4, r5, lr}
   b4692:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4694:	4b1b      	ldr	r3, [pc, #108]	; (b4704 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4696:	9300      	str	r3, [sp, #0]
   b4698:	7913      	ldrb	r3, [r2, #4]
   b469a:	f88d 3004 	strb.w	r3, [sp, #4]
   b469e:	6893      	ldr	r3, [r2, #8]
   b46a0:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46a2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b46a6:	8993      	ldrh	r3, [r2, #12]
   b46a8:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b46ac:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b46ae:	460a      	mov	r2, r1
   b46b0:	466b      	mov	r3, sp
   b46b2:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b46b6:	4628      	mov	r0, r5
   b46b8:	f002 feb4 	bl	b7424 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b46bc:	b910      	cbnz	r0, b46c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b46be:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b46c0:	b005      	add	sp, #20
   b46c2:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b46c4:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b46c6:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b46ca:	4628      	mov	r0, r5
   b46cc:	f001 ff72 	bl	b65b4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b46d0:	2101      	movs	r1, #1
   b46d2:	4620      	mov	r0, r4
   b46d4:	f002 fd51 	bl	b717a <_ZN9FatVolume4initEh>
   b46d8:	4601      	mov	r1, r0
   b46da:	b168      	cbz	r0, b46f8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b46dc:	4621      	mov	r1, r4
   b46de:	4628      	mov	r0, r5
   b46e0:	f001 fd62 	bl	b61a8 <_ZN7FatFile8openRootEP9FatVolume>
   b46e4:	2800      	cmp	r0, #0
   b46e6:	d0ea      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b46e8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b46ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   b46f0:	d0e5      	beq.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b46f2:	4b05      	ldr	r3, [pc, #20]	; (b4708 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b46f4:	601d      	str	r5, [r3, #0]
    return true;
   b46f6:	e7e3      	b.n	b46c0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b46f8:	4620      	mov	r0, r4
   b46fa:	f002 fd3e 	bl	b717a <_ZN9FatVolume4initEh>
   b46fe:	2800      	cmp	r0, #0
   b4700:	d1ec      	bne.n	b46dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4702:	e7dc      	b.n	b46be <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4704:	000c6080 	.word	0x000c6080
   b4708:	2003e614 	.word	0x2003e614

000b470c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4710:	b08a      	sub	sp, #40	; 0x28
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4712:	7883      	ldrb	r3, [r0, #2]
   b4714:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4716:	af04      	add	r7, sp, #16
   b4718:	4604      	mov	r4, r0
   b471a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b471c:	d14c      	bne.n	b47b8 <_Z14processCommandPKchb+0xac>
   b471e:	78c3      	ldrb	r3, [r0, #3]
   b4720:	2b42      	cmp	r3, #66	; 0x42
   b4722:	d175      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
        char dataStr[strlen(command)-8];
   b4724:	4620      	mov	r0, r4
   b4726:	f00f f9b6 	bl	c3a96 <strlen>
   b472a:	3801      	subs	r0, #1
   b472c:	f020 0007 	bic.w	r0, r0, #7
        }
   b4730:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b4732:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4736:	4620      	mov	r0, r4
   b4738:	f00f f9ad 	bl	c3a96 <strlen>
        char dataStr[strlen(command)-8];
   b473c:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';
   b473e:	4428      	add	r0, r5
   b4740:	2600      	movs	r6, #0
   b4742:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4746:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b4748:	71fe      	strb	r6, [r7, #7]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b474a:	803e      	strh	r6, [r7, #0]
   b474c:	70be      	strb	r6, [r7, #2]
   b474e:	f00f f9a2 	bl	c3a96 <strlen>
   b4752:	4420      	add	r0, r4
   b4754:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4758:	703b      	strb	r3, [r7, #0]
   b475a:	4620      	mov	r0, r4
   b475c:	f00f f99b 	bl	c3a96 <strlen>
   b4760:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4762:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};
   b4764:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4768:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b476a:	2210      	movs	r2, #16
   b476c:	4638      	mov	r0, r7
   b476e:	f010 f8bb 	bl	c48e8 <strtol>
   b4772:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4774:	fa5f f888 	uxtb.w	r8, r8
   b4778:	f00c fd1a 	bl	c11b0 <_Z16_fetch_usbserialv>
   b477c:	4986      	ldr	r1, [pc, #536]	; (b4998 <_Z14processCommandPKchb+0x28c>)
   b477e:	4643      	mov	r3, r8
   b4780:	4642      	mov	r2, r8
   b4782:	f7ff fde9 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4786:	2604      	movs	r6, #4
   b4788:	4620      	mov	r0, r4
   b478a:	f00f f984 	bl	c3a96 <strlen>
   b478e:	3802      	subs	r0, #2
   b4790:	4286      	cmp	r6, r0
   b4792:	d216      	bcs.n	b47c2 <_Z14processCommandPKchb+0xb6>
            if(i < 7) cmdStr[i-4] = command[i];
   b4794:	2e06      	cmp	r6, #6
   b4796:	bf9b      	ittet	ls
   b4798:	f107 0318 	addls.w	r3, r7, #24
   b479c:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b479e:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b47a0:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b47a2:	bf8c      	ite	hi
   b47a4:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b47a6:	f803 2c18 	strbls.w	r2, [r3, #-24]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47aa:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b47ae:	bf88      	it	hi
   b47b0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47b4:	b2f6      	uxtb	r6, r6
   b47b6:	e7e7      	b.n	b4788 <_Z14processCommandPKchb+0x7c>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b47b8:	2b42      	cmp	r3, #66	; 0x42
   b47ba:	d129      	bne.n	b4810 <_Z14processCommandPKchb+0x104>
   b47bc:	78c3      	ldrb	r3, [r0, #3]
   b47be:	2b31      	cmp	r3, #49	; 0x31
   b47c0:	e7af      	b.n	b4722 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47c2:	4540      	cmp	r0, r8
   b47c4:	d02e      	beq.n	b4824 <_Z14processCommandPKchb+0x118>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47c6:	f00c fcf3 	bl	c11b0 <_Z16_fetch_usbserialv>
   b47ca:	4605      	mov	r5, r0
   b47cc:	4620      	mov	r0, r4
   b47ce:	f00f f962 	bl	c3a96 <strlen>
   b47d2:	1e82      	subs	r2, r0, #2
   b47d4:	4628      	mov	r0, r5
    return m_attr;
   b47d6:	4d71      	ldr	r5, [pc, #452]	; (b499c <_Z14processCommandPKchb+0x290>)
   b47d8:	4971      	ldr	r1, [pc, #452]	; (b49a0 <_Z14processCommandPKchb+0x294>)
   b47da:	4643      	mov	r3, r8
   b47dc:	f7ff fdbc 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47e0:	7c2b      	ldrb	r3, [r5, #16]
   b47e2:	b9cb      	cbnz	r3, b4818 <_Z14processCommandPKchb+0x10c>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47e4:	496f      	ldr	r1, [pc, #444]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b47e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b47ea:	f105 0010 	add.w	r0, r5, #16
   b47ee:	f7ff fedb 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47f2:	496d      	ldr	r1, [pc, #436]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b47f4:	4622      	mov	r2, r4
   b47f6:	4628      	mov	r0, r5
   b47f8:	f7ff fdae 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47fc:	f105 0010 	add.w	r0, r5, #16
   b4800:	f001 fed8 	bl	b65b4 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4804:	f00c fcd4 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4808:	4968      	ldr	r1, [pc, #416]	; (b49ac <_Z14processCommandPKchb+0x2a0>)
   b480a:	f00c f828 	bl	c085e <_ZN5Print7printlnEPKc>
            return;
   b480e:	46cd      	mov	sp, r9
}
   b4810:	3718      	adds	r7, #24
   b4812:	46bd      	mov	sp, r7
   b4814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4818:	4963      	ldr	r1, [pc, #396]	; (b49a8 <_Z14processCommandPKchb+0x29c>)
   b481a:	4622      	mov	r2, r4
   b481c:	4628      	mov	r0, r5
   b481e:	f7ff fd9b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4822:	e7ef      	b.n	b4804 <_Z14processCommandPKchb+0xf8>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4824:	4962      	ldr	r1, [pc, #392]	; (b49b0 <_Z14processCommandPKchb+0x2a4>)
   b4826:	1d38      	adds	r0, r7, #4
   b4828:	f00f f906 	bl	c3a38 <strcmp>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0ee      	beq.n	b480e <_Z14processCommandPKchb+0x102>
        if(!strcmp(cmdStr,"ctl")){
   b4830:	4960      	ldr	r1, [pc, #384]	; (b49b4 <_Z14processCommandPKchb+0x2a8>)
   b4832:	1d38      	adds	r0, r7, #4
   b4834:	f00f f900 	bl	c3a38 <strcmp>
   b4838:	b968      	cbnz	r0, b4856 <_Z14processCommandPKchb+0x14a>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal 
   b483a:	4b5f      	ldr	r3, [pc, #380]	; (b49b8 <_Z14processCommandPKchb+0x2ac>)
   b483c:	9302      	str	r3, [sp, #8]
   b483e:	4b5f      	ldr	r3, [pc, #380]	; (b49bc <_Z14processCommandPKchb+0x2b0>)
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	4b5f      	ldr	r3, [pc, #380]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b4844:	9300      	str	r3, [sp, #0]
   b4846:	495f      	ldr	r1, [pc, #380]	; (b49c4 <_Z14processCommandPKchb+0x2b8>)
   b4848:	f107 0310 	add.w	r3, r7, #16
   b484c:	f107 0208 	add.w	r2, r7, #8
   b4850:	4628      	mov	r0, r5
   b4852:	f008 ff77 	bl	bd744 <sscanf>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b4856:	495c      	ldr	r1, [pc, #368]	; (b49c8 <_Z14processCommandPKchb+0x2bc>)
   b4858:	1d38      	adds	r0, r7, #4
   b485a:	f00f f8ed 	bl	c3a38 <strcmp>
   b485e:	2800      	cmp	r0, #0
   b4860:	d13d      	bne.n	b48de <_Z14processCommandPKchb+0x1d2>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b4862:	782b      	ldrb	r3, [r5, #0]
   b4864:	723b      	strb	r3, [r7, #8]
   b4866:	786b      	ldrb	r3, [r5, #1]
   b4868:	727b      	strb	r3, [r7, #9]
   b486a:	78ab      	ldrb	r3, [r5, #2]
   b486c:	72bb      	strb	r3, [r7, #10]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b486e:	78eb      	ldrb	r3, [r5, #3]
   b4870:	743b      	strb	r3, [r7, #16]
   b4872:	792b      	ldrb	r3, [r5, #4]
   b4874:	747b      	strb	r3, [r7, #17]
            setLSpeed = atoi(lSpd);
   b4876:	f107 0008 	add.w	r0, r7, #8
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b487a:	796b      	ldrb	r3, [r5, #5]
   b487c:	74bb      	strb	r3, [r7, #18]
            setLSpeed = atoi(lSpd);
   b487e:	f00f f83a 	bl	c38f6 <atoi>
   b4882:	4d52      	ldr	r5, [pc, #328]	; (b49cc <_Z14processCommandPKchb+0x2c0>)
            setRSpeed = atoi(rSpd);
   b4884:	4c52      	ldr	r4, [pc, #328]	; (b49d0 <_Z14processCommandPKchb+0x2c4>)
            setLSpeed = atoi(lSpd);
   b4886:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b4888:	f107 0010 	add.w	r0, r7, #16
   b488c:	f00f f833 	bl	c38f6 <atoi>
   b4890:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b4892:	f00c fc8d 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4896:	782a      	ldrb	r2, [r5, #0]
   b4898:	7823      	ldrb	r3, [r4, #0]
   b489a:	494e      	ldr	r1, [pc, #312]	; (b49d4 <_Z14processCommandPKchb+0x2c8>)
   b489c:	f7ff fd5c 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a0:	782b      	ldrb	r3, [r5, #0]
            ESCL.write(setLSpeed);
   b48a2:	484d      	ldr	r0, [pc, #308]	; (b49d8 <_Z14processCommandPKchb+0x2cc>)
            if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b48a4:	3b5b      	subs	r3, #91	; 0x5b
   b48a6:	2b20      	cmp	r3, #32
   b48a8:	bf9c      	itt	ls
   b48aa:	237b      	movls	r3, #123	; 0x7b
   b48ac:	702b      	strbls	r3, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48ae:	7823      	ldrb	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48b0:	7829      	ldrb	r1, [r5, #0]
            if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b48b2:	3b5b      	subs	r3, #91	; 0x5b
   b48b4:	2b20      	cmp	r3, #32
   b48b6:	bf9c      	itt	ls
   b48b8:	237b      	movls	r3, #123	; 0x7b
   b48ba:	7023      	strbls	r3, [r4, #0]
            ESCL.write(setLSpeed);
   b48bc:	f00c f841 	bl	c0942 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b48c0:	7821      	ldrb	r1, [r4, #0]
   b48c2:	4846      	ldr	r0, [pc, #280]	; (b49dc <_Z14processCommandPKchb+0x2d0>)
   b48c4:	f00c f83d 	bl	c0942 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b48c8:	4b45      	ldr	r3, [pc, #276]	; (b49e0 <_Z14processCommandPKchb+0x2d4>)
   b48ca:	2201      	movs	r2, #1
   b48cc:	701a      	strb	r2, [r3, #0]
   b48ce:	f008 fc43 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();
   b48d2:	4b44      	ldr	r3, [pc, #272]	; (b49e4 <_Z14processCommandPKchb+0x2d8>)
   b48d4:	6018      	str	r0, [r3, #0]
            driveMode = 0;
   b48d6:	4b3a      	ldr	r3, [pc, #232]	; (b49c0 <_Z14processCommandPKchb+0x2b4>)
   b48d8:	2200      	movs	r2, #0
   b48da:	701a      	strb	r2, [r3, #0]
   b48dc:	e797      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b48de:	4942      	ldr	r1, [pc, #264]	; (b49e8 <_Z14processCommandPKchb+0x2dc>)
   b48e0:	1d38      	adds	r0, r7, #4
   b48e2:	f00f f8a9 	bl	c3a38 <strcmp>
   b48e6:	b918      	cbnz	r0, b48f0 <_Z14processCommandPKchb+0x1e4>
            requestActive = mode;
   b48e8:	4b40      	ldr	r3, [pc, #256]	; (b49ec <_Z14processCommandPKchb+0x2e0>)
   b48ea:	f883 a000 	strb.w	sl, [r3]
   b48ee:	e78e      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"pts")){
   b48f0:	493f      	ldr	r1, [pc, #252]	; (b49f0 <_Z14processCommandPKchb+0x2e4>)
   b48f2:	1d38      	adds	r0, r7, #4
   b48f4:	f00f f8a0 	bl	c3a38 <strcmp>
   b48f8:	b9f0      	cbnz	r0, b4938 <_Z14processCommandPKchb+0x22c>
   b48fa:	4c28      	ldr	r4, [pc, #160]	; (b499c <_Z14processCommandPKchb+0x290>)
            Serial.println(dataStr);
   b48fc:	f00c fc58 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4900:	4629      	mov	r1, r5
   b4902:	f00b ffac 	bl	c085e <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4906:	7c23      	ldrb	r3, [r4, #16]
   b4908:	b983      	cbnz	r3, b492c <_Z14processCommandPKchb+0x220>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b490a:	4926      	ldr	r1, [pc, #152]	; (b49a4 <_Z14processCommandPKchb+0x298>)
   b490c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4910:	f104 0010 	add.w	r0, r4, #16
   b4914:	f7ff fe48 	bl	b45a8 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4918:	4936      	ldr	r1, [pc, #216]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b491a:	462a      	mov	r2, r5
   b491c:	4620      	mov	r0, r4
   b491e:	f7ff fd1b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4922:	f104 0010 	add.w	r0, r4, #16
   b4926:	f001 fe45 	bl	b65b4 <_ZN7FatFile5closeEv>
   b492a:	e770      	b.n	b480e <_Z14processCommandPKchb+0x102>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b492c:	4931      	ldr	r1, [pc, #196]	; (b49f4 <_Z14processCommandPKchb+0x2e8>)
   b492e:	462a      	mov	r2, r5
   b4930:	4620      	mov	r0, r4
   b4932:	f7ff fd11 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b4936:	e76a      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b4938:	492f      	ldr	r1, [pc, #188]	; (b49f8 <_Z14processCommandPKchb+0x2ec>)
   b493a:	1d38      	adds	r0, r7, #4
   b493c:	f00f f87c 	bl	c3a38 <strcmp>
   b4940:	b920      	cbnz	r0, b494c <_Z14processCommandPKchb+0x240>
   b4942:	f008 fc09 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b4946:	4b2d      	ldr	r3, [pc, #180]	; (b49fc <_Z14processCommandPKchb+0x2f0>)
   b4948:	6018      	str	r0, [r3, #0]
   b494a:	e760      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"hwa")){
   b494c:	492c      	ldr	r1, [pc, #176]	; (b4a00 <_Z14processCommandPKchb+0x2f4>)
   b494e:	1d38      	adds	r0, r7, #4
   b4950:	f00f f872 	bl	c3a38 <strcmp>
   b4954:	b910      	cbnz	r0, b495c <_Z14processCommandPKchb+0x250>
            waitForConnection = false;
   b4956:	4b2b      	ldr	r3, [pc, #172]	; (b4a04 <_Z14processCommandPKchb+0x2f8>)
   b4958:	7018      	strb	r0, [r3, #0]
   b495a:	e758      	b.n	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b495c:	492a      	ldr	r1, [pc, #168]	; (b4a08 <_Z14processCommandPKchb+0x2fc>)
   b495e:	1d38      	adds	r0, r7, #4
   b4960:	f00f f86a 	bl	c3a38 <strcmp>
   b4964:	2800      	cmp	r0, #0
   b4966:	f43f af52 	beq.w	b480e <_Z14processCommandPKchb+0x102>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b496a:	4928      	ldr	r1, [pc, #160]	; (b4a0c <_Z14processCommandPKchb+0x300>)
   b496c:	1d38      	adds	r0, r7, #4
   b496e:	f00f f863 	bl	c3a38 <strcmp>
   b4972:	2800      	cmp	r0, #0
   b4974:	f47f af4b 	bne.w	b480e <_Z14processCommandPKchb+0x102>
            offloadMode = true;
   b4978:	4b25      	ldr	r3, [pc, #148]	; (b4a10 <_Z14processCommandPKchb+0x304>)
            status.setSpeed(LED_SPEED_FAST);
   b497a:	4826      	ldr	r0, [pc, #152]	; (b4a14 <_Z14processCommandPKchb+0x308>)
            offloadMode = true;
   b497c:	2201      	movs	r2, #1
   b497e:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4980:	4b24      	ldr	r3, [pc, #144]	; (b4a14 <_Z14processCommandPKchb+0x308>)
   b4982:	7c5a      	ldrb	r2, [r3, #17]
   b4984:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4986:	bf1c      	itt	ne
   b4988:	2202      	movne	r2, #2
   b498a:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b498c:	211e      	movs	r1, #30
    d_.color = color;
   b498e:	22ff      	movs	r2, #255	; 0xff
   b4990:	615a      	str	r2, [r3, #20]
   b4992:	f7ff fd91 	bl	b44b8 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4996:	e73a      	b.n	b480e <_Z14processCommandPKchb+0x102>
   b4998:	000c5c47 	.word	0x000c5c47
   b499c:	2003deb4 	.word	0x2003deb4
   b49a0:	000c5c5c 	.word	0x000c5c5c
   b49a4:	2003de10 	.word	0x2003de10
   b49a8:	000c5c79 	.word	0x000c5c79
   b49ac:	000c5ca5 	.word	0x000c5ca5
   b49b0:	000c5cc6 	.word	0x000c5cc6
   b49b4:	000c5cca 	.word	0x000c5cca
   b49b8:	2003e58e 	.word	0x2003e58e
   b49bc:	2003df0d 	.word	0x2003df0d
   b49c0:	2003ddf1 	.word	0x2003ddf1
   b49c4:	000c5cce 	.word	0x000c5cce
   b49c8:	000c5cdd 	.word	0x000c5cdd
   b49cc:	2003e58c 	.word	0x2003e58c
   b49d0:	2003e58d 	.word	0x2003e58d
   b49d4:	000c5ce1 	.word	0x000c5ce1
   b49d8:	2003dd94 	.word	0x2003dd94
   b49dc:	2003dda4 	.word	0x2003dda4
   b49e0:	2003e5f0 	.word	0x2003e5f0
   b49e4:	2003de30 	.word	0x2003de30
   b49e8:	000c5d0d 	.word	0x000c5d0d
   b49ec:	2003e0e9 	.word	0x2003e0e9
   b49f0:	000c5d11 	.word	0x000c5d11
   b49f4:	000c5d15 	.word	0x000c5d15
   b49f8:	000c5d38 	.word	0x000c5d38
   b49fc:	2003de34 	.word	0x2003de34
   b4a00:	000c5d3c 	.word	0x000c5d3c
   b4a04:	2003e5f1 	.word	0x2003e5f1
   b4a08:	000c5d40 	.word	0x000c5d40
   b4a0c:	000c5d44 	.word	0x000c5d44
   b4a10:	2003e0e8 	.word	0x2003e0e8
   b4a14:	2003e594 	.word	0x2003e594

000b4a18 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4a18:	b510      	push	{r4, lr}
   b4a1a:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4a1c:	2200      	movs	r2, #0
   b4a1e:	2104      	movs	r1, #4
   b4a20:	4620      	mov	r0, r4
   b4a22:	f7ff fe73 	bl	b470c <_Z14processCommandPKchb>
    if(logMessages){
   b4a26:	4b0b      	ldr	r3, [pc, #44]	; (b4a54 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4a28:	781b      	ldrb	r3, [r3, #0]
   b4a2a:	b193      	cbz	r3, b4a52 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4a2c:	480a      	ldr	r0, [pc, #40]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a2e:	7c03      	ldrb	r3, [r0, #16]
   b4a30:	b92b      	cbnz	r3, b4a3e <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4a32:	490a      	ldr	r1, [pc, #40]	; (b4a5c <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4a34:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a38:	3010      	adds	r0, #16
   b4a3a:	f7ff fdb5 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4a3e:	4622      	mov	r2, r4
   b4a40:	4907      	ldr	r1, [pc, #28]	; (b4a60 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4a42:	4805      	ldr	r0, [pc, #20]	; (b4a58 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4a44:	f7ff fc88 	bl	b4358 <_ZN5Print8printlnfEPKcz>
}
   b4a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4a4c:	4805      	ldr	r0, [pc, #20]	; (b4a64 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4a4e:	f001 bdb1 	b.w	b65b4 <_ZN7FatFile5closeEv>
}
   b4a52:	bd10      	pop	{r4, pc}
   b4a54:	2003df0c 	.word	0x2003df0c
   b4a58:	2003deb4 	.word	0x2003deb4
   b4a5c:	2003de10 	.word	0x2003de10
   b4a60:	000c5d48 	.word	0x000c5d48
   b4a64:	2003dec4 	.word	0x2003dec4

000b4a68 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a68:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4a6a:	f101 0308 	add.w	r3, r1, #8
   b4a6e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a72:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4a74:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4a78:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4a7a:	460a      	mov	r2, r1
   b4a7c:	4601      	mov	r1, r0
   b4a7e:	4668      	mov	r0, sp
   b4a80:	f00e ff56 	bl	c3930 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a84:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4a88:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4a8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4a8e:	b113      	cbz	r3, b4a96 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4a90:	2300      	movs	r3, #0
   b4a92:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4a96:	f00c fb8b 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4a9a:	4916      	ldr	r1, [pc, #88]	; (b4af4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4a9c:	f00b fedf 	bl	c085e <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b4aa0:	f00c fb86 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4aa4:	4629      	mov	r1, r5
   b4aa6:	f00b feda 	bl	c085e <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4aaa:	2201      	movs	r2, #1
   b4aac:	4611      	mov	r1, r2
   b4aae:	4628      	mov	r0, r5
   b4ab0:	f7ff fe2c 	bl	b470c <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b4ab4:	782b      	ldrb	r3, [r5, #0]
   b4ab6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4aba:	2b41      	cmp	r3, #65	; 0x41
   b4abc:	d103      	bne.n	b4ac6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4abe:	f008 fb4b 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   b4ac2:	4b0d      	ldr	r3, [pc, #52]	; (b4af8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4ac4:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4ac6:	4b0d      	ldr	r3, [pc, #52]	; (b4afc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4ac8:	781b      	ldrb	r3, [r3, #0]
   b4aca:	b183      	cbz	r3, b4aee <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4acc:	480c      	ldr	r0, [pc, #48]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4ace:	7c03      	ldrb	r3, [r0, #16]
   b4ad0:	b92b      	cbnz	r3, b4ade <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4ad2:	490c      	ldr	r1, [pc, #48]	; (b4b04 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4ad4:	f244 2202 	movw	r2, #16898	; 0x4202
   b4ad8:	3010      	adds	r0, #16
   b4ada:	f7ff fd65 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4ade:	490a      	ldr	r1, [pc, #40]	; (b4b08 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4ae0:	4807      	ldr	r0, [pc, #28]	; (b4b00 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4ae2:	462a      	mov	r2, r5
   b4ae4:	f7ff fc38 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ae8:	4808      	ldr	r0, [pc, #32]	; (b4b0c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4aea:	f001 fd63 	bl	b65b4 <_ZN7FatFile5closeEv>
}
   b4aee:	46bd      	mov	sp, r7
   b4af0:	bdb0      	pop	{r4, r5, r7, pc}
   b4af2:	bf00      	nop
   b4af4:	000c5d68 	.word	0x000c5d68
   b4af8:	2003dd90 	.word	0x2003dd90
   b4afc:	2003df0c 	.word	0x2003df0c
   b4b00:	2003deb4 	.word	0x2003deb4
   b4b04:	2003de10 	.word	0x2003de10
   b4b08:	000c5d78 	.word	0x000c5d78
   b4b0c:	2003dec4 	.word	0x2003dec4

000b4b10 <_Z8setupLTEv>:
void setupLTE(){
   b4b10:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4b12:	2400      	movs	r4, #0
   b4b14:	e9cd 4400 	strd	r4, r4, [sp]
   b4b18:	4904      	ldr	r1, [pc, #16]	; (b4b2c <_Z8setupLTEv+0x1c>)
   b4b1a:	4805      	ldr	r0, [pc, #20]	; (b4b30 <_Z8setupLTEv+0x20>)
   b4b1c:	2301      	movs	r3, #1
   b4b1e:	4622      	mov	r2, r4
   b4b20:	f008 fd78 	bl	bd614 <spark_subscribe>
    LTEAvail = false;
   b4b24:	4b03      	ldr	r3, [pc, #12]	; (b4b34 <_Z8setupLTEv+0x24>)
   b4b26:	701c      	strb	r4, [r3, #0]
}
   b4b28:	b002      	add	sp, #8
   b4b2a:	bd10      	pop	{r4, pc}
   b4b2c:	000b4a19 	.word	0x000b4a19
   b4b30:	000c5d98 	.word	0x000c5d98
   b4b34:	2003ddb4 	.word	0x2003ddb4

000b4b38 <_Z9setupXBeev>:
void setupXBee(){
   b4b38:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4b3a:	f00c fcd1 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b4b3e:	4908      	ldr	r1, [pc, #32]	; (b4b60 <_Z9setupXBeev+0x28>)
   b4b40:	f7ff fbd1 	bl	b42e6 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4b44:	2014      	movs	r0, #20
   b4b46:	f008 fe51 	bl	bd7ec <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4b4a:	f00c fcc9 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b4b4e:	4905      	ldr	r1, [pc, #20]	; (b4b64 <_Z9setupXBeev+0x2c>)
   b4b50:	f7ff fbc9 	bl	b42e6 <_ZN5Print6printfEPKcz>
}
   b4b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4b58:	2014      	movs	r0, #20
   b4b5a:	f008 be47 	b.w	bd7ec <delay>
   b4b5e:	bf00      	nop
   b4b60:	000c721e 	.word	0x000c721e
   b4b64:	000c5b1d 	.word	0x000c5b1d

000b4b68 <_Z8setupGPSv>:
void setupGPS(){
   b4b68:	b507      	push	{r0, r1, r2, lr}
    if(myGPS.begin() == false){
   b4b6a:	f00c fc79 	bl	c1460 <_Z19__fetch_global_Wirev>
   b4b6e:	2300      	movs	r3, #0
   b4b70:	4601      	mov	r1, r0
   b4b72:	9300      	str	r3, [sp, #0]
   b4b74:	4812      	ldr	r0, [pc, #72]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b76:	f240 434c 	movw	r3, #1100	; 0x44c
   b4b7a:	2242      	movs	r2, #66	; 0x42
   b4b7c:	f007 fecc 	bl	bc918 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4b80:	b940      	cbnz	r0, b4b94 <_Z8setupGPSv+0x2c>
        delay(1000);
   b4b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4b86:	f008 fe31 	bl	bd7ec <delay>
        Serial.println("Error, Could not initialize GPS");
   b4b8a:	f00c fb11 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4b8e:	490d      	ldr	r1, [pc, #52]	; (b4bc4 <_Z8setupGPSv+0x5c>)
   b4b90:	f00b fe65 	bl	c085e <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4b94:	f240 424c 	movw	r2, #1100	; 0x44c
   b4b98:	2101      	movs	r1, #1
   b4b9a:	4809      	ldr	r0, [pc, #36]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4b9c:	f007 fe48 	bl	bc830 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4ba0:	f240 434c 	movw	r3, #1100	; 0x44c
   b4ba4:	2201      	movs	r2, #1
   b4ba6:	2100      	movs	r1, #0
   b4ba8:	4805      	ldr	r0, [pc, #20]	; (b4bc0 <_Z8setupGPSv+0x58>)
   b4baa:	f007 fe21 	bl	bc7f0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4bae:	f00c fc57 	bl	c1460 <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4bb2:	4905      	ldr	r1, [pc, #20]	; (b4bc8 <_Z8setupGPSv+0x60>)
}
   b4bb4:	b003      	add	sp, #12
   b4bb6:	f85d eb04 	ldr.w	lr, [sp], #4
   b4bba:	f00a bb3d 	b.w	bf238 <_ZN7TwoWire8setSpeedEm>
   b4bbe:	bf00      	nop
   b4bc0:	2003df68 	.word	0x2003df68
   b4bc4:	000c5d9e 	.word	0x000c5d9e
   b4bc8:	00061a80 	.word	0x00061a80
   b4bcc:	00000000 	.word	0x00000000

000b4bd0 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b4bd0:	b510      	push	{r4, lr}
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4bd2:	2015      	movs	r0, #21
   b4bd4:	f00c fc16 	bl	c1404 <analogRead>
   b4bd8:	ee07 0a90 	vmov	s15, r0
   b4bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    battPercent = (uint8_t) rawPCT;
   b4be0:	4c37      	ldr	r4, [pc, #220]	; (b4cc0 <_Z12readPowerSysv+0xf0>)
    battVoltage = (float) analogRead(BATT_VSENSE) * VDIV_MULT;
   b4be2:	ee17 0a90 	vmov	r0, s15
   b4be6:	f00e fabf 	bl	c3168 <__aeabi_f2d>
   b4bea:	a32d      	add	r3, pc, #180	; (adr r3, b4ca0 <_Z12readPowerSysv+0xd0>)
   b4bec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4bf0:	f00e fb12 	bl	c3218 <__aeabi_dmul>
   b4bf4:	f00e fe08 	bl	c3808 <__aeabi_d2f>
   b4bf8:	4b32      	ldr	r3, [pc, #200]	; (b4cc4 <_Z12readPowerSysv+0xf4>)
   b4bfa:	6018      	str	r0, [r3, #0]
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));
   b4bfc:	f00e fab4 	bl	c3168 <__aeabi_f2d>
   b4c00:	a329      	add	r3, pc, #164	; (adr r3, b4ca8 <_Z12readPowerSysv+0xd8>)
   b4c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c06:	f00e f94f 	bl	c2ea8 <__aeabi_dsub>
   b4c0a:	4b2f      	ldr	r3, [pc, #188]	; (b4cc8 <_Z12readPowerSysv+0xf8>)
   b4c0c:	2200      	movs	r2, #0
   b4c0e:	f00e fb03 	bl	c3218 <__aeabi_dmul>
   b4c12:	a327      	add	r3, pc, #156	; (adr r3, b4cb0 <_Z12readPowerSysv+0xe0>)
   b4c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c18:	f00e fc28 	bl	c346c <__aeabi_ddiv>
   b4c1c:	f00e fdac 	bl	c3778 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;
   b4c20:	2864      	cmp	r0, #100	; 0x64
   b4c22:	4603      	mov	r3, r0
   b4c24:	bfa8      	it	ge
   b4c26:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;
   b4c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b4c2c:	2814      	cmp	r0, #20
   b4c2e:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;
   b4c30:	4b26      	ldr	r3, [pc, #152]	; (b4ccc <_Z12readPowerSysv+0xfc>)
   b4c32:	bfcc      	ite	gt
   b4c34:	2000      	movgt	r0, #0
   b4c36:	2001      	movle	r0, #1
   b4c38:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095;
   b4c3a:	2010      	movs	r0, #16
   b4c3c:	f00c fbe2 	bl	c1404 <analogRead>
   b4c40:	ee07 0a90 	vmov	s15, r0
   b4c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c48:	ee17 0a90 	vmov	r0, s15
   b4c4c:	f00e fa8c 	bl	c3168 <__aeabi_f2d>
   b4c50:	4b1f      	ldr	r3, [pc, #124]	; (b4cd0 <_Z12readPowerSysv+0x100>)
   b4c52:	2200      	movs	r2, #0
   b4c54:	f00e fae0 	bl	c3218 <__aeabi_dmul>
   b4c58:	a317      	add	r3, pc, #92	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c5e:	f00e fc05 	bl	c346c <__aeabi_ddiv>
   b4c62:	f00e fdd1 	bl	c3808 <__aeabi_d2f>
   b4c66:	4b1b      	ldr	r3, [pc, #108]	; (b4cd4 <_Z12readPowerSysv+0x104>)
   b4c68:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b4c6a:	2011      	movs	r0, #17
   b4c6c:	f00c fbca 	bl	c1404 <analogRead>
   b4c70:	ee07 0a90 	vmov	s15, r0
   b4c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c78:	ee17 0a90 	vmov	r0, s15
   b4c7c:	f00e fa74 	bl	c3168 <__aeabi_f2d>
   b4c80:	4b15      	ldr	r3, [pc, #84]	; (b4cd8 <_Z12readPowerSysv+0x108>)
   b4c82:	2200      	movs	r2, #0
   b4c84:	f00e fac8 	bl	c3218 <__aeabi_dmul>
   b4c88:	a30b      	add	r3, pc, #44	; (adr r3, b4cb8 <_Z12readPowerSysv+0xe8>)
   b4c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c8e:	f00e fbed 	bl	c346c <__aeabi_ddiv>
   b4c92:	f00e fdb9 	bl	c3808 <__aeabi_d2f>
   b4c96:	4b11      	ldr	r3, [pc, #68]	; (b4cdc <_Z12readPowerSysv+0x10c>)
   b4c98:	6018      	str	r0, [r3, #0]
}
   b4c9a:	7820      	ldrb	r0, [r4, #0]
   b4c9c:	bd10      	pop	{r4, pc}
   b4c9e:	bf00      	nop
   b4ca0:	6e04c059 	.word	0x6e04c059
   b4ca4:	3f73cddd 	.word	0x3f73cddd
   b4ca8:	66666666 	.word	0x66666666
   b4cac:	402a6666 	.word	0x402a6666
   b4cb0:	99999998 	.word	0x99999998
   b4cb4:	40099999 	.word	0x40099999
   b4cb8:	00000000 	.word	0x00000000
   b4cbc:	40affe00 	.word	0x40affe00
   b4cc0:	2003dde0 	.word	0x2003dde0
   b4cc4:	2003dde4 	.word	0x2003dde4
   b4cc8:	40590000 	.word	0x40590000
   b4ccc:	2003df14 	.word	0x2003df14
   b4cd0:	40408000 	.word	0x40408000
   b4cd4:	2003dddc 	.word	0x2003dddc
   b4cd8:	40308000 	.word	0x40308000
   b4cdc:	2003e590 	.word	0x2003e590

000b4ce0 <_Z15getPositionDatav>:
bool getPositionData(){
   b4ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        targetLat = 35.769889;
   b4ce4:	f8df 8280 	ldr.w	r8, [pc, #640]	; b4f68 <_Z15getPositionDatav+0x288>
   b4ce8:	4b8d      	ldr	r3, [pc, #564]	; (b4f20 <_Z15getPositionDatav+0x240>)
        targetLon = -78.673824;
   b4cea:	4e8e      	ldr	r6, [pc, #568]	; (b4f24 <_Z15getPositionDatav+0x244>)
        lis3mdl.getEvent(&event);
   b4cec:	4c8e      	ldr	r4, [pc, #568]	; (b4f28 <_Z15getPositionDatav+0x248>)
        targetLat = 35.769889;
   b4cee:	f8c8 3000 	str.w	r3, [r8]
bool getPositionData(){
   b4cf2:	ed2d 8b04 	vpush	{d8-d9}
        targetLon = -78.673824;
   b4cf6:	4b8d      	ldr	r3, [pc, #564]	; (b4f2c <_Z15getPositionDatav+0x24c>)
        latitude = 35.771801;
   b4cf8:	4f8d      	ldr	r7, [pc, #564]	; (b4f30 <_Z15getPositionDatav+0x250>)
        targetLon = -78.673824;
   b4cfa:	6033      	str	r3, [r6, #0]
bool getPositionData(){
   b4cfc:	b08c      	sub	sp, #48	; 0x30
        latitude = 35.771801;
   b4cfe:	4b8d      	ldr	r3, [pc, #564]	; (b4f34 <_Z15getPositionDatav+0x254>)
        longitude = -78.674378;
   b4d00:	4d8d      	ldr	r5, [pc, #564]	; (b4f38 <_Z15getPositionDatav+0x258>)
        latitude = 35.771801;
   b4d02:	603b      	str	r3, [r7, #0]
        lis3mdl.getEvent(&event);
   b4d04:	a903      	add	r1, sp, #12
        longitude = -78.674378;
   b4d06:	4b8d      	ldr	r3, [pc, #564]	; (b4f3c <_Z15getPositionDatav+0x25c>)
   b4d08:	602b      	str	r3, [r5, #0]
        lis3mdl.getEvent(&event);
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f002 fe1a 	bl	b7944 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        Serial.printlnf("X: %d, Y: %d",lis3mdl.x,lis3mdl.y);
   b4d10:	f00c fa4e 	bl	c11b0 <_Z16_fetch_usbserialv>
   b4d14:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b4d18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
   b4d1c:	4988      	ldr	r1, [pc, #544]	; (b4f40 <_Z15getPositionDatav+0x260>)
   b4d1e:	f7ff fb1b 	bl	b4358 <_ZN5Print8printlnfEPKcz>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
   b4d22:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
   b4d26:	f00e fa0d 	bl	c3144 <__aeabi_i2d>
   b4d2a:	ec41 0b18 	vmov	d8, r0, r1
   b4d2e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   b4d32:	f00e fa07 	bl	c3144 <__aeabi_i2d>
   b4d36:	eeb0 1a48 	vmov.f32	s2, s16
   b4d3a:	eef0 1a68 	vmov.f32	s3, s17
   b4d3e:	ec41 0b10 	vmov	d0, r0, r1
   b4d42:	f00c fd7d 	bl	c1840 <atan2>
        compassHeading = 0-atan2(lis3mdl.x, lis3mdl.y) * 180.0 / M_PI;
   b4d46:	4b7f      	ldr	r3, [pc, #508]	; (b4f44 <_Z15getPositionDatav+0x264>)
   b4d48:	ec51 0b10 	vmov	r0, r1, d0
   b4d4c:	2200      	movs	r2, #0
   b4d4e:	f00e fa63 	bl	c3218 <__aeabi_dmul>
   b4d52:	a36f      	add	r3, pc, #444	; (adr r3, b4f10 <_Z15getPositionDatav+0x230>)
   b4d54:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d58:	f00e fb88 	bl	c346c <__aeabi_ddiv>
   b4d5c:	460b      	mov	r3, r1
   b4d5e:	4602      	mov	r2, r0
   b4d60:	2100      	movs	r1, #0
   b4d62:	2000      	movs	r0, #0
   b4d64:	f00e f8a0 	bl	c2ea8 <__aeabi_dsub>
   b4d68:	f00e fd4e 	bl	c3808 <__aeabi_d2f>
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d6c:	ed98 7a00 	vldr	s14, [r8]
   b4d70:	ed9f 6a75 	vldr	s12, [pc, #468]	; b4f48 <_Z15getPositionDatav+0x268>
        compassHeading = 0-atan2(lis3mdl.x, lis3mdl.y) * 180.0 / M_PI;
   b4d74:	4b75      	ldr	r3, [pc, #468]	; (b4f4c <_Z15getPositionDatav+0x26c>)
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d76:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b4d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        compassHeading = 0-atan2(lis3mdl.x, lis3mdl.y) * 180.0 / M_PI;
   b4d7e:	6018      	str	r0, [r3, #0]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){
   b4d80:	f2c0 80be 	blt.w	b4f00 <_Z15getPositionDatav+0x220>
   b4d84:	eddf 6a72 	vldr	s13, [pc, #456]	; b4f50 <_Z15getPositionDatav+0x270>
   b4d88:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b4d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4d90:	f200 80b6 	bhi.w	b4f00 <_Z15getPositionDatav+0x220>
   b4d94:	edd6 7a00 	vldr	s15, [r6]
   b4d98:	eef4 7ac6 	vcmpe.f32	s15, s12
   b4d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4da0:	f2c0 80ae 	blt.w	b4f00 <_Z15getPositionDatav+0x220>
   b4da4:	eef4 7ae6 	vcmpe.f32	s15, s13
   b4da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4dac:	f200 80a8 	bhi.w	b4f00 <_Z15getPositionDatav+0x220>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b4db0:	edd7 0a00 	vldr	s1, [r7]
   b4db4:	ed95 0a00 	vldr	s0, [r5]
  { return __builtin_atan2f(__y, __x); }
   b4db8:	ee77 0a60 	vsub.f32	s1, s14, s1
   b4dbc:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b4dc0:	f00c fd7a 	bl	c18b8 <atan2f>
   b4dc4:	eddf 7a63 	vldr	s15, [pc, #396]	; b4f54 <_Z15getPositionDatav+0x274>
   b4dc8:	ee60 7a27 	vmul.f32	s15, s0, s15
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4dcc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b4dd0:	ee17 0a90 	vmov	r0, s15
   b4dd4:	f00e f9c8 	bl	c3168 <__aeabi_f2d>
   b4dd8:	a34d      	add	r3, pc, #308	; (adr r3, b4f10 <_Z15getPositionDatav+0x230>)
   b4dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4dde:	f00e fb45 	bl	c346c <__aeabi_ddiv>
   b4de2:	f00e fd11 	bl	c3808 <__aeabi_d2f>
            float dLat = deg2rad(targetLat-latitude);
   b4de6:	edd8 9a00 	vldr	s19, [r8]
   b4dea:	edd7 8a00 	vldr	s17, [r7]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b4dee:	4b5a      	ldr	r3, [pc, #360]	; (b4f58 <_Z15getPositionDatav+0x278>)
  return deg * (3.14159/180);
   b4df0:	ee79 7ae8 	vsub.f32	s15, s19, s17
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);
   b4df4:	6018      	str	r0, [r3, #0]
  return deg * (3.14159/180);
   b4df6:	ee17 0a90 	vmov	r0, s15
   b4dfa:	f00e f9b5 	bl	c3168 <__aeabi_f2d>
   b4dfe:	a346      	add	r3, pc, #280	; (adr r3, b4f18 <_Z15getPositionDatav+0x238>)
   b4e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e04:	f00e fa08 	bl	c3218 <__aeabi_dmul>
   b4e08:	f00e fcfe 	bl	c3808 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e0c:	ee07 0a90 	vmov	s15, r0
   b4e10:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e14:	f00c fcda 	bl	c17cc <sinf>
  return deg * (3.14159/180);
   b4e18:	ee18 0a90 	vmov	r0, s17
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e1c:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);
   b4e20:	f00e f9a2 	bl	c3168 <__aeabi_f2d>
   b4e24:	a33c      	add	r3, pc, #240	; (adr r3, b4f18 <_Z15getPositionDatav+0x238>)
   b4e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e2a:	f00e f9f5 	bl	c3218 <__aeabi_dmul>
   b4e2e:	f00e fceb 	bl	c3808 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e32:	ee00 0a10 	vmov	s0, r0
   b4e36:	f00c fc91 	bl	c175c <cosf>
  return deg * (3.14159/180);
   b4e3a:	ee19 0a90 	vmov	r0, s19
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e3e:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);
   b4e42:	f00e f991 	bl	c3168 <__aeabi_f2d>
   b4e46:	a334      	add	r3, pc, #208	; (adr r3, b4f18 <_Z15getPositionDatav+0x238>)
   b4e48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e4c:	f00e f9e4 	bl	c3218 <__aeabi_dmul>
   b4e50:	f00e fcda 	bl	c3808 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e54:	ee00 0a10 	vmov	s0, r0
   b4e58:	f00c fc80 	bl	c175c <cosf>
            float dLon = deg2rad(targetLon-longitude);
   b4e5c:	ed96 7a00 	vldr	s14, [r6]
   b4e60:	edd5 7a00 	vldr	s15, [r5]
  return deg * (3.14159/180);
   b4e64:	ee77 7a67 	vsub.f32	s15, s14, s15
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e68:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);
   b4e6c:	ee17 0a90 	vmov	r0, s15
   b4e70:	f00e f97a 	bl	c3168 <__aeabi_f2d>
   b4e74:	a328      	add	r3, pc, #160	; (adr r3, b4f18 <_Z15getPositionDatav+0x238>)
   b4e76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e7a:	f00e f9cd 	bl	c3218 <__aeabi_dmul>
   b4e7e:	f00e fcc3 	bl	c3808 <__aeabi_d2f>
            float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(latitude)) * cosf(deg2rad(targetLat)) * sinf(dLon/2) * sinf(dLon/2); 
   b4e82:	ee07 0a90 	vmov	s15, r0
   b4e86:	ee27 0a88 	vmul.f32	s0, s15, s16
   b4e8a:	f00c fc9f 	bl	c17cc <sinf>
   b4e8e:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b4e92:	ee68 8a80 	vmul.f32	s17, s17, s0
   b4e96:	ee28 8a80 	vmul.f32	s16, s17, s0
   b4e9a:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b4e9e:	eeb0 0a48 	vmov.f32	s0, s16
   b4ea2:	f00c fd0b 	bl	c18bc <sqrtf>
            float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b4ea6:	ee18 0a10 	vmov	r0, s16
   b4eaa:	ee10 4a10 	vmov	r4, s0
   b4eae:	f00e f95b 	bl	c3168 <__aeabi_f2d>
   b4eb2:	4602      	mov	r2, r0
   b4eb4:	460b      	mov	r3, r1
   b4eb6:	2000      	movs	r0, #0
   b4eb8:	4928      	ldr	r1, [pc, #160]	; (b4f5c <_Z15getPositionDatav+0x27c>)
   b4eba:	f00d fff5 	bl	c2ea8 <__aeabi_dsub>
   b4ebe:	ec41 0b10 	vmov	d0, r0, r1
   b4ec2:	f00c fcbf 	bl	c1844 <sqrt>
      return atan2(__type(__y), __type(__x));
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	ed8d 0b00 	vstr	d0, [sp]
   b4ecc:	f00e f94c 	bl	c3168 <__aeabi_f2d>
   b4ed0:	ed9d 1b00 	vldr	d1, [sp]
   b4ed4:	ec41 0b10 	vmov	d0, r0, r1
   b4ed8:	f00c fcb2 	bl	c1840 <atan2>
   b4edc:	ec53 2b10 	vmov	r2, r3, d0
   b4ee0:	ee10 0a10 	vmov	r0, s0
   b4ee4:	4619      	mov	r1, r3
   b4ee6:	f00d ffe1 	bl	c2eac <__adddf3>
   b4eea:	f00e fc8d 	bl	c3808 <__aeabi_d2f>
            travelDistance = 6371.0 * c; // Distance in km
   b4eee:	eddf 7a1c 	vldr	s15, [pc, #112]	; b4f60 <_Z15getPositionDatav+0x280>
   b4ef2:	4b1c      	ldr	r3, [pc, #112]	; (b4f64 <_Z15getPositionDatav+0x284>)
   b4ef4:	ee07 0a10 	vmov	s14, r0
   b4ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4efc:	edc3 7a00 	vstr	s15, [r3]
}
   b4f00:	2001      	movs	r0, #1
   b4f02:	b00c      	add	sp, #48	; 0x30
   b4f04:	ecbd 8b04 	vpop	{d8-d9}
   b4f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f0c:	f3af 8000 	nop.w
   b4f10:	54442d18 	.word	0x54442d18
   b4f14:	400921fb 	.word	0x400921fb
   b4f18:	a50de270 	.word	0xa50de270
   b4f1c:	3f91df45 	.word	0x3f91df45
   b4f20:	420f145e 	.word	0x420f145e
   b4f24:	2003e5dc 	.word	0x2003e5dc
   b4f28:	2003de58 	.word	0x2003de58
   b4f2c:	c29d58ff 	.word	0xc29d58ff
   b4f30:	2003de38 	.word	0x2003de38
   b4f34:	420f1653 	.word	0x420f1653
   b4f38:	2003df10 	.word	0x2003df10
   b4f3c:	c29d5948 	.word	0xc29d5948
   b4f40:	000c5dbe 	.word	0x000c5dbe
   b4f44:	40668000 	.word	0x40668000
   b4f48:	c2b40000 	.word	0xc2b40000
   b4f4c:	2003dde8 	.word	0x2003dde8
   b4f50:	42b40000 	.word	0x42b40000
   b4f54:	43340000 	.word	0x43340000
   b4f58:	2003e5e4 	.word	0x2003e5e4
   b4f5c:	3ff00000 	.word	0x3ff00000
   b4f60:	45c71800 	.word	0x45c71800
   b4f64:	2003e5e0 	.word	0x2003e5e0
   b4f68:	2003e5d8 	.word	0x2003e5d8

000b4f6c <_Z12updateMotorsv>:
void updateMotors(){
   b4f6c:	b538      	push	{r3, r4, r5, lr}
    if(updateMotorControl){
   b4f6e:	4d0e      	ldr	r5, [pc, #56]	; (b4fa8 <_Z12updateMotorsv+0x3c>)
   b4f70:	782b      	ldrb	r3, [r5, #0]
   b4f72:	b1bb      	cbz	r3, b4fa4 <_Z12updateMotorsv+0x38>
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f74:	4b0d      	ldr	r3, [pc, #52]	; (b4fac <_Z12updateMotorsv+0x40>)
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f76:	4c0e      	ldr	r4, [pc, #56]	; (b4fb0 <_Z12updateMotorsv+0x44>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f78:	781a      	ldrb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4f7a:	480e      	ldr	r0, [pc, #56]	; (b4fb4 <_Z12updateMotorsv+0x48>)
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123;
   b4f7c:	3a5b      	subs	r2, #91	; 0x5b
   b4f7e:	2a20      	cmp	r2, #32
   b4f80:	bf9c      	itt	ls
   b4f82:	227b      	movls	r2, #123	; 0x7b
   b4f84:	701a      	strbls	r2, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f86:	7822      	ldrb	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b4f88:	7819      	ldrb	r1, [r3, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b4f8a:	3a5b      	subs	r2, #91	; 0x5b
   b4f8c:	2a20      	cmp	r2, #32
   b4f8e:	bf9c      	itt	ls
   b4f90:	227b      	movls	r2, #123	; 0x7b
   b4f92:	7022      	strbls	r2, [r4, #0]
        ESCL.write(setLSpeed);
   b4f94:	f00b fcd5 	bl	c0942 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4f98:	7821      	ldrb	r1, [r4, #0]
   b4f9a:	4807      	ldr	r0, [pc, #28]	; (b4fb8 <_Z12updateMotorsv+0x4c>)
   b4f9c:	f00b fcd1 	bl	c0942 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4fa0:	2300      	movs	r3, #0
   b4fa2:	702b      	strb	r3, [r5, #0]
}
   b4fa4:	bd38      	pop	{r3, r4, r5, pc}
   b4fa6:	bf00      	nop
   b4fa8:	2003e5f0 	.word	0x2003e5f0
   b4fac:	2003e58c 	.word	0x2003e58c
   b4fb0:	2003e58d 	.word	0x2003e58d
   b4fb4:	2003dd94 	.word	0x2003dd94
   b4fb8:	2003dda4 	.word	0x2003dda4

000b4fbc <_Z13sensorHandlerv>:
void sensorHandler(){
   b4fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4fc0:	4da4      	ldr	r5, [pc, #656]	; (b5254 <_Z13sensorHandlerv+0x298>)
void sensorHandler(){
   b4fc2:	b0ab      	sub	sp, #172	; 0xac
   b4fc4:	f008 f8c8 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4fc8:	682b      	ldr	r3, [r5, #0]
   b4fca:	4283      	cmp	r3, r0
   b4fcc:	f080 80f3 	bcs.w	b51b6 <_Z13sensorHandlerv+0x1fa>
   b4fd0:	f8df b2b0 	ldr.w	fp, [pc, #688]	; b5284 <_Z13sensorHandlerv+0x2c8>
   b4fd4:	f89b 3000 	ldrb.w	r3, [fp]
   b4fd8:	2b00      	cmp	r3, #0
   b4fda:	f000 80ec 	beq.w	b51b6 <_Z13sensorHandlerv+0x1fa>
        Wire.requestFrom(PHADDR, 20, 1);
   b4fde:	f00c fa3f 	bl	c1460 <_Z19__fetch_global_Wirev>
   b4fe2:	2301      	movs	r3, #1
   b4fe4:	2214      	movs	r2, #20
   b4fe6:	2163      	movs	r1, #99	; 0x63
   b4fe8:	f00a f947 	bl	bf27a <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4fec:	f00c fa38 	bl	c1460 <_Z19__fetch_global_Wirev>
   b4ff0:	6803      	ldr	r3, [r0, #0]
   b4ff2:	695b      	ldr	r3, [r3, #20]
   b4ff4:	4798      	blx	r3
        int c = 0;
   b4ff6:	ac16      	add	r4, sp, #88	; 0x58
   b4ff8:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4ffa:	f00c fa31 	bl	c1460 <_Z19__fetch_global_Wirev>
   b4ffe:	6803      	ldr	r3, [r0, #0]
   b5000:	691b      	ldr	r3, [r3, #16]
   b5002:	4798      	blx	r3
   b5004:	b138      	cbz	r0, b5016 <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b5006:	f00c fa2b 	bl	c1460 <_Z19__fetch_global_Wirev>
   b500a:	6803      	ldr	r3, [r0, #0]
   b500c:	695b      	ldr	r3, [r3, #20]
   b500e:	4798      	blx	r3
   b5010:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5014:	e7f1      	b.n	b4ffa <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b5016:	4630      	mov	r0, r6
   b5018:	f00e fc6a 	bl	c38f0 <atof>
   b501c:	ec51 0b10 	vmov	r0, r1, d0
   b5020:	f00e fbf2 	bl	c3808 <__aeabi_d2f>
   b5024:	f8df a260 	ldr.w	sl, [pc, #608]	; b5288 <_Z13sensorHandlerv+0x2cc>
   b5028:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b502c:	f00c fa18 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5030:	2301      	movs	r3, #1
   b5032:	2214      	movs	r2, #20
   b5034:	2164      	movs	r1, #100	; 0x64
   b5036:	f00a f920 	bl	bf27a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b503a:	f00c fa11 	bl	c1460 <_Z19__fetch_global_Wirev>
   b503e:	6803      	ldr	r3, [r0, #0]
   b5040:	695b      	ldr	r3, [r3, #20]
   b5042:	4798      	blx	r3
        c = 0;
   b5044:	ac1b      	add	r4, sp, #108	; 0x6c
   b5046:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b5048:	f00c fa0a 	bl	c1460 <_Z19__fetch_global_Wirev>
   b504c:	6803      	ldr	r3, [r0, #0]
   b504e:	691b      	ldr	r3, [r3, #16]
   b5050:	4798      	blx	r3
   b5052:	b138      	cbz	r0, b5064 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b5054:	f00c fa04 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5058:	6803      	ldr	r3, [r0, #0]
   b505a:	695b      	ldr	r3, [r3, #20]
   b505c:	4798      	blx	r3
   b505e:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b5062:	e7f1      	b.n	b5048 <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b5064:	4630      	mov	r0, r6
   b5066:	f00e fc43 	bl	c38f0 <atof>
        Wire.requestFrom(COND, 20, 1);
   b506a:	f00c f9f9 	bl	c1460 <_Z19__fetch_global_Wirev>
   b506e:	2301      	movs	r3, #1
   b5070:	2214      	movs	r2, #20
   b5072:	2165      	movs	r1, #101	; 0x65
   b5074:	f00a f901 	bl	bf27a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b5078:	f00c f9f2 	bl	c1460 <_Z19__fetch_global_Wirev>
   b507c:	6803      	ldr	r3, [r0, #0]
   b507e:	695b      	ldr	r3, [r3, #20]
   b5080:	4798      	blx	r3
        c = 0;
   b5082:	ac20      	add	r4, sp, #128	; 0x80
   b5084:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b5086:	f00c f9eb 	bl	c1460 <_Z19__fetch_global_Wirev>
   b508a:	6803      	ldr	r3, [r0, #0]
   b508c:	691b      	ldr	r3, [r3, #16]
   b508e:	4798      	blx	r3
   b5090:	b138      	cbz	r0, b50a2 <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b5092:	f00c f9e5 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5096:	6803      	ldr	r3, [r0, #0]
   b5098:	695b      	ldr	r3, [r3, #20]
   b509a:	4798      	blx	r3
   b509c:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b50a0:	e7f1      	b.n	b5086 <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b50a2:	4630      	mov	r0, r6
   b50a4:	f00e fc24 	bl	c38f0 <atof>
   b50a8:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b50ac:	f00c f9d8 	bl	c1460 <_Z19__fetch_global_Wirev>
   b50b0:	2301      	movs	r3, #1
   b50b2:	2214      	movs	r2, #20
   b50b4:	2166      	movs	r1, #102	; 0x66
   b50b6:	f00a f8e0 	bl	bf27a <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b50ba:	f00c f9d1 	bl	c1460 <_Z19__fetch_global_Wirev>
   b50be:	6803      	ldr	r3, [r0, #0]
   b50c0:	695b      	ldr	r3, [r3, #20]
   b50c2:	4798      	blx	r3
        c = 0;
   b50c4:	af25      	add	r7, sp, #148	; 0x94
   b50c6:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b50c8:	f00c f9ca 	bl	c1460 <_Z19__fetch_global_Wirev>
   b50cc:	6803      	ldr	r3, [r0, #0]
   b50ce:	691b      	ldr	r3, [r3, #16]
   b50d0:	4798      	blx	r3
   b50d2:	4604      	mov	r4, r0
   b50d4:	b138      	cbz	r0, b50e6 <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b50d6:	f00c f9c3 	bl	c1460 <_Z19__fetch_global_Wirev>
   b50da:	6803      	ldr	r3, [r0, #0]
   b50dc:	695b      	ldr	r3, [r3, #20]
   b50de:	4798      	blx	r3
   b50e0:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b50e4:	e7f0      	b.n	b50c8 <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b50e6:	4630      	mov	r0, r6
   b50e8:	f00e fc02 	bl	c38f0 <atof>
        if(logSensors){
   b50ec:	4b5a      	ldr	r3, [pc, #360]	; (b5258 <_Z13sensorHandlerv+0x29c>)
        dataWait = false;
   b50ee:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b50f2:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b50f4:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b50f8:	2b00      	cmp	r3, #0
   b50fa:	d05c      	beq.n	b51b6 <_Z13sensorHandlerv+0x1fa>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b50fc:	f00b ff7c 	bl	c0ff8 <_ZN9TimeClass5monthEv>
   b5100:	9011      	str	r0, [sp, #68]	; 0x44
   b5102:	f00b ff6d 	bl	c0fe0 <_ZN9TimeClass3dayEv>
   b5106:	4604      	mov	r4, r0
   b5108:	f00b ff7e 	bl	c1008 <_ZN9TimeClass4yearEv>
   b510c:	4683      	mov	fp, r0
   b510e:	f00b ff43 	bl	c0f98 <_ZN9TimeClass4hourEv>
   b5112:	9010      	str	r0, [sp, #64]	; 0x40
   b5114:	f00b ff4c 	bl	c0fb0 <_ZN9TimeClass6minuteEv>
   b5118:	900f      	str	r0, [sp, #60]	; 0x3c
   b511a:	f00b ff55 	bl	c0fc8 <_ZN9TimeClass6secondEv>
   b511e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b5120:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b5122:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b5124:	9004      	str	r0, [sp, #16]
   b5126:	e9cd b201 	strd	fp, r2, [sp, #4]
   b512a:	9103      	str	r1, [sp, #12]
   b512c:	4a4b      	ldr	r2, [pc, #300]	; (b525c <_Z13sensorHandlerv+0x2a0>)
   b512e:	9400      	str	r4, [sp, #0]
   b5130:	2110      	movs	r1, #16
   b5132:	a812      	add	r0, sp, #72	; 0x48
   b5134:	f008 fb0e 	bl	bd754 <snprintf>
   b5138:	4849      	ldr	r0, [pc, #292]	; (b5260 <_Z13sensorHandlerv+0x2a4>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b513a:	7c03      	ldrb	r3, [r0, #16]
   b513c:	b92b      	cbnz	r3, b514a <_Z13sensorHandlerv+0x18e>
   b513e:	4949      	ldr	r1, [pc, #292]	; (b5264 <_Z13sensorHandlerv+0x2a8>)
   b5140:	f244 2202 	movw	r2, #16898	; 0x4202
   b5144:	3010      	adds	r0, #16
   b5146:	f7ff fa2f 	bl	b45a8 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b514a:	4649      	mov	r1, r9
   b514c:	4640      	mov	r0, r8
   b514e:	f00e fb5b 	bl	c3808 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5152:	f00e f809 	bl	c3168 <__aeabi_f2d>
   b5156:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b515a:	4b43      	ldr	r3, [pc, #268]	; (b5268 <_Z13sensorHandlerv+0x2ac>)
   b515c:	6818      	ldr	r0, [r3, #0]
   b515e:	f00e f803 	bl	c3168 <__aeabi_f2d>
   b5162:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b5166:	4b41      	ldr	r3, [pc, #260]	; (b526c <_Z13sensorHandlerv+0x2b0>)
   b5168:	6818      	ldr	r0, [r3, #0]
   b516a:	f00d fffd 	bl	c3168 <__aeabi_f2d>
   b516e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b5172:	f8da 0000 	ldr.w	r0, [sl]
   b5176:	f00d fff7 	bl	c3168 <__aeabi_f2d>
   b517a:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b517e:	4639      	mov	r1, r7
   b5180:	4630      	mov	r0, r6
   b5182:	f00e fb41 	bl	c3808 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b5186:	f00d ffef 	bl	c3168 <__aeabi_f2d>
   b518a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b518e:	4b38      	ldr	r3, [pc, #224]	; (b5270 <_Z13sensorHandlerv+0x2b4>)
   b5190:	6818      	ldr	r0, [r3, #0]
   b5192:	f00d ffe9 	bl	c3168 <__aeabi_f2d>
   b5196:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b519a:	4b36      	ldr	r3, [pc, #216]	; (b5274 <_Z13sensorHandlerv+0x2b8>)
   b519c:	6818      	ldr	r0, [r3, #0]
   b519e:	f00d ffe3 	bl	c3168 <__aeabi_f2d>
   b51a2:	aa12      	add	r2, sp, #72	; 0x48
   b51a4:	e9cd 0100 	strd	r0, r1, [sp]
   b51a8:	4933      	ldr	r1, [pc, #204]	; (b5278 <_Z13sensorHandlerv+0x2bc>)
   b51aa:	482d      	ldr	r0, [pc, #180]	; (b5260 <_Z13sensorHandlerv+0x2a4>)
   b51ac:	f7ff f8d4 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b51b0:	4832      	ldr	r0, [pc, #200]	; (b527c <_Z13sensorHandlerv+0x2c0>)
   b51b2:	f001 f9ff 	bl	b65b4 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b51b6:	4c32      	ldr	r4, [pc, #200]	; (b5280 <_Z13sensorHandlerv+0x2c4>)
   b51b8:	f007 ffce 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   b51bc:	6823      	ldr	r3, [r4, #0]
   b51be:	4283      	cmp	r3, r0
   b51c0:	d244      	bcs.n	b524c <_Z13sensorHandlerv+0x290>
   b51c2:	f007 ffc9 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b51c6:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b51ca:	6020      	str	r0, [r4, #0]
   b51cc:	f007 ffc4 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b51d0:	f200 3039 	addw	r0, r0, #825	; 0x339
   b51d4:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b51d6:	f00c f943 	bl	c1460 <_Z19__fetch_global_Wirev>
   b51da:	2163      	movs	r1, #99	; 0x63
   b51dc:	f00a f866 	bl	bf2ac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51e0:	f00c f93e 	bl	c1460 <_Z19__fetch_global_Wirev>
   b51e4:	2172      	movs	r1, #114	; 0x72
   b51e6:	f7ff f827 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b51ea:	f00c f939 	bl	c1460 <_Z19__fetch_global_Wirev>
   b51ee:	f00a f864 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b51f2:	f00c f935 	bl	c1460 <_Z19__fetch_global_Wirev>
   b51f6:	2164      	movs	r1, #100	; 0x64
   b51f8:	f00a f858 	bl	bf2ac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b51fc:	f00c f930 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5200:	2172      	movs	r1, #114	; 0x72
   b5202:	f7ff f819 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5206:	f00c f92b 	bl	c1460 <_Z19__fetch_global_Wirev>
   b520a:	f00a f856 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b520e:	f00c f927 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5212:	2165      	movs	r1, #101	; 0x65
   b5214:	f00a f84a 	bl	bf2ac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5218:	f00c f922 	bl	c1460 <_Z19__fetch_global_Wirev>
   b521c:	2172      	movs	r1, #114	; 0x72
   b521e:	f7ff f80b 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b5222:	f00c f91d 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5226:	f00a f848 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b522a:	f00c f919 	bl	c1460 <_Z19__fetch_global_Wirev>
   b522e:	2166      	movs	r1, #102	; 0x66
   b5230:	f00a f83c 	bl	bf2ac <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b5234:	f00c f914 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5238:	2172      	movs	r1, #114	; 0x72
   b523a:	f7fe fffd 	bl	b4238 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b523e:	f00c f90f 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5242:	f00a f83a 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b5246:	4b0f      	ldr	r3, [pc, #60]	; (b5284 <_Z13sensorHandlerv+0x2c8>)
   b5248:	2201      	movs	r2, #1
   b524a:	701a      	strb	r2, [r3, #0]
}
   b524c:	b02b      	add	sp, #172	; 0xac
   b524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5252:	bf00      	nop
   b5254:	2003ddec 	.word	0x2003ddec
   b5258:	2003df0d 	.word	0x2003df0d
   b525c:	000c5dcb 	.word	0x000c5dcb
   b5260:	2003df34 	.word	0x2003df34
   b5264:	2003ddf2 	.word	0x2003ddf2
   b5268:	2003e580 	.word	0x2003e580
   b526c:	2003e57c 	.word	0x2003e57c
   b5270:	2003df10 	.word	0x2003df10
   b5274:	2003de38 	.word	0x2003de38
   b5278:	000c5de4 	.word	0x000c5de4
   b527c:	2003df44 	.word	0x2003df44
   b5280:	2003e588 	.word	0x2003e588
   b5284:	2003ddf0 	.word	0x2003ddf0
   b5288:	2003e584 	.word	0x2003e584

000b528c <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b5290:	4e3c      	ldr	r6, [pc, #240]	; (b5384 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5292:	f8df 8104 	ldr.w	r8, [pc, #260]	; b5398 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b5296:	f8df 9104 	ldr.w	r9, [pc, #260]	; b539c <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b529a:	b089      	sub	sp, #36	; 0x24
   b529c:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b529e:	f00c f91f 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b52a2:	6803      	ldr	r3, [r0, #0]
   b52a4:	691b      	ldr	r3, [r3, #16]
   b52a6:	4798      	blx	r3
   b52a8:	2800      	cmp	r0, #0
   b52aa:	d066      	beq.n	b537a <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b52ac:	f00c f918 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b52b0:	220a      	movs	r2, #10
   b52b2:	4601      	mov	r1, r0
   b52b4:	4638      	mov	r0, r7
   b52b6:	f00b fce7 	bl	c0c88 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b52ba:	68bb      	ldr	r3, [r7, #8]
   b52bc:	3307      	adds	r3, #7
   b52be:	f023 0307 	bic.w	r3, r3, #7
    }
   b52c2:	466d      	mov	r5, sp
        char buffer[data.length()];
   b52c4:	ebad 0d03 	sub.w	sp, sp, r3
   b52c8:	46ea      	mov	sl, sp
   b52ca:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b52cc:	68b9      	ldr	r1, [r7, #8]
   b52ce:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b52d2:	458b      	cmp	fp, r1
   b52d4:	f103 0401 	add.w	r4, r3, #1
   b52d8:	d207      	bcs.n	b52ea <_Z11XBeeHandlerv+0x5e>
   b52da:	4659      	mov	r1, fp
   b52dc:	4638      	mov	r0, r7
   b52de:	f00b fdcb 	bl	c0e78 <_ZNK6String6charAtEj>
   b52e2:	4623      	mov	r3, r4
   b52e4:	f80a 000b 	strb.w	r0, [sl, fp]
   b52e8:	e7f0      	b.n	b52cc <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b52ea:	2901      	cmp	r1, #1
   b52ec:	d90a      	bls.n	b5304 <_Z11XBeeHandlerv+0x78>
   b52ee:	3901      	subs	r1, #1
   b52f0:	4638      	mov	r0, r7
   b52f2:	f00b fdc1 	bl	c0e78 <_ZNK6String6charAtEj>
   b52f6:	280d      	cmp	r0, #13
   b52f8:	bf01      	itttt	eq
   b52fa:	68bb      	ldreq	r3, [r7, #8]
   b52fc:	4453      	addeq	r3, sl
   b52fe:	2200      	moveq	r2, #0
   b5300:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b5304:	2201      	movs	r2, #1
   b5306:	2102      	movs	r1, #2
   b5308:	4650      	mov	r0, sl
   b530a:	f7ff f9ff 	bl	b470c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b530e:	f00b ff4f 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5312:	4631      	mov	r1, r6
   b5314:	f00b faa3 	bl	c085e <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b5318:	f00b ff4a 	bl	c11b0 <_Z16_fetch_usbserialv>
   b531c:	6839      	ldr	r1, [r7, #0]
   b531e:	f00b fa9e 	bl	c085e <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b5322:	f89a 3000 	ldrb.w	r3, [sl]
   b5326:	3b42      	subs	r3, #66	; 0x42
   b5328:	2b01      	cmp	r3, #1
   b532a:	d803      	bhi.n	b5334 <_Z11XBeeHandlerv+0xa8>
   b532c:	f007 ff14 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   b5330:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b5334:	f899 3000 	ldrb.w	r3, [r9]
   b5338:	b1d3      	cbz	r3, b5370 <_Z11XBeeHandlerv+0xe4>
   b533a:	4813      	ldr	r0, [pc, #76]	; (b5388 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b533c:	7c03      	ldrb	r3, [r0, #16]
   b533e:	b92b      	cbnz	r3, b534c <_Z11XBeeHandlerv+0xc0>
   b5340:	4912      	ldr	r1, [pc, #72]	; (b538c <_Z11XBeeHandlerv+0x100>)
   b5342:	f244 2202 	movw	r2, #16898	; 0x4202
   b5346:	3010      	adds	r0, #16
   b5348:	f7ff f92e 	bl	b45a8 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b534c:	4639      	mov	r1, r7
   b534e:	f107 0010 	add.w	r0, r7, #16
   b5352:	f00b fd47 	bl	c0de4 <_ZN6StringC1ERKS_>
   b5356:	490e      	ldr	r1, [pc, #56]	; (b5390 <_Z11XBeeHandlerv+0x104>)
   b5358:	480b      	ldr	r0, [pc, #44]	; (b5388 <_Z11XBeeHandlerv+0xfc>)
   b535a:	f107 0210 	add.w	r2, r7, #16
   b535e:	f7fe fffb 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b5362:	f107 0010 	add.w	r0, r7, #16
   b5366:	f00b fca7 	bl	c0cb8 <_ZN6StringD1Ev>
            logFile.close();
   b536a:	480a      	ldr	r0, [pc, #40]	; (b5394 <_Z11XBeeHandlerv+0x108>)
   b536c:	f001 f922 	bl	b65b4 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b5370:	4638      	mov	r0, r7
   b5372:	f00b fca1 	bl	c0cb8 <_ZN6StringD1Ev>
   b5376:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b5378:	e791      	b.n	b529e <_Z11XBeeHandlerv+0x12>
}
   b537a:	3724      	adds	r7, #36	; 0x24
   b537c:	46bd      	mov	sp, r7
   b537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5382:	bf00      	nop
   b5384:	000c5dfc 	.word	0x000c5dfc
   b5388:	2003deb4 	.word	0x2003deb4
   b538c:	2003de10 	.word	0x2003de10
   b5390:	000c5e0e 	.word	0x000c5e0e
   b5394:	2003dec4 	.word	0x2003dec4
   b5398:	2003ddc8 	.word	0x2003ddc8
   b539c:	2003df0c 	.word	0x2003df0c

000b53a0 <_Z13dataOffloaderv>:
void dataOffloader(){
   b53a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b53a4:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b53a6:	f00b ff03 	bl	c11b0 <_Z16_fetch_usbserialv>
   b53aa:	4961      	ldr	r1, [pc, #388]	; (b5530 <_Z13dataOffloaderv+0x190>)
   b53ac:	f00b fa57 	bl	c085e <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b53b0:	4960      	ldr	r1, [pc, #384]	; (b5534 <_Z13dataOffloaderv+0x194>)
   b53b2:	4861      	ldr	r0, [pc, #388]	; (b5538 <_Z13dataOffloaderv+0x198>)
   b53b4:	2200      	movs	r2, #0
   b53b6:	f7ff f8f7 	bl	b45a8 <_ZN7FatFile4openEPKci>
   b53ba:	b948      	cbnz	r0, b53d0 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b53bc:	4b5f      	ldr	r3, [pc, #380]	; (b553c <_Z13dataOffloaderv+0x19c>)
   b53be:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b53c0:	f00b fef6 	bl	c11b0 <_Z16_fetch_usbserialv>
   b53c4:	495e      	ldr	r1, [pc, #376]	; (b5540 <_Z13dataOffloaderv+0x1a0>)
}
   b53c6:	b02d      	add	sp, #180	; 0xb4
   b53c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b53cc:	f00b ba47 	b.w	c085e <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b53d0:	f00b feee 	bl	c11b0 <_Z16_fetch_usbserialv>
   b53d4:	495b      	ldr	r1, [pc, #364]	; (b5544 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b53d6:	4d5c      	ldr	r5, [pc, #368]	; (b5548 <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b53d8:	f00b fa41 	bl	c085e <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b53dc:	f008 fd6a 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53e0:	f008 fdc6 	bl	bdf70 <_ZNK8particle14BleLocalDevice9connectedEv>
   b53e4:	4604      	mov	r4, r0
   b53e6:	b948      	cbnz	r0, b53fc <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b53e8:	f008 fd64 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53ec:	4622      	mov	r2, r4
   b53ee:	4629      	mov	r1, r5
   b53f0:	f008 fe11 	bl	be016 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b53f4:	200a      	movs	r0, #10
   b53f6:	f008 f9f9 	bl	bd7ec <delay>
    while(!BLE.connected()){
   b53fa:	e7ef      	b.n	b53dc <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b53fc:	f00b fed8 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5400:	4952      	ldr	r1, [pc, #328]	; (b554c <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b5402:	4f4d      	ldr	r7, [pc, #308]	; (b5538 <_Z13dataOffloaderv+0x198>)
   b5404:	4d52      	ldr	r5, [pc, #328]	; (b5550 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b5406:	f8df 816c 	ldr.w	r8, [pc, #364]	; b5574 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b540a:	f00b fa28 	bl	c085e <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b540e:	2200      	movs	r2, #0
   b5410:	4639      	mov	r1, r7
   b5412:	4628      	mov	r0, r5
   b5414:	f001 f85b 	bl	b64ce <_ZN7FatFile8openNextEPS_i>
   b5418:	b1f8      	cbz	r0, b545a <_Z13dataOffloaderv+0xba>
   b541a:	f008 fd4b 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b541e:	f008 fda7 	bl	bdf70 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5422:	b1d0      	cbz	r0, b545a <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b5424:	221e      	movs	r2, #30
   b5426:	a901      	add	r1, sp, #4
   b5428:	4628      	mov	r0, r5
   b542a:	f001 fa17 	bl	b685c <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b542e:	f00b febf 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5432:	4641      	mov	r1, r8
   b5434:	aa01      	add	r2, sp, #4
   b5436:	f7fe ff8f 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b543a:	a801      	add	r0, sp, #4
   b543c:	f00e fb2b 	bl	c3a96 <strlen>
   b5440:	ab01      	add	r3, sp, #4
   b5442:	3804      	subs	r0, #4
   b5444:	4418      	add	r0, r3
   b5446:	f00e fb2f 	bl	c3aa8 <strlwr>
   b544a:	4942      	ldr	r1, [pc, #264]	; (b5554 <_Z13dataOffloaderv+0x1b4>)
   b544c:	f00e fb85 	bl	c3b5a <strstr>
   b5450:	b9d8      	cbnz	r0, b548a <_Z13dataOffloaderv+0xea>
            myFile.close();
   b5452:	4628      	mov	r0, r5
   b5454:	f001 f8ae 	bl	b65b4 <_ZN7FatFile5closeEv>
   b5458:	e7d9      	b.n	b540e <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b545a:	4837      	ldr	r0, [pc, #220]	; (b5538 <_Z13dataOffloaderv+0x198>)
   b545c:	f001 f8aa 	bl	b65b4 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b5460:	2226      	movs	r2, #38	; 0x26
   b5462:	2100      	movs	r1, #0
   b5464:	a809      	add	r0, sp, #36	; 0x24
   b5466:	f00e fa8b 	bl	c3980 <memset>
    strcpy(fileCode,"filedone");
   b546a:	493b      	ldr	r1, [pc, #236]	; (b5558 <_Z13dataOffloaderv+0x1b8>)
   b546c:	a809      	add	r0, sp, #36	; 0x24
   b546e:	f00e faed 	bl	c3a4c <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b5472:	2300      	movs	r3, #0
   b5474:	2226      	movs	r2, #38	; 0x26
   b5476:	a909      	add	r1, sp, #36	; 0x24
   b5478:	4838      	ldr	r0, [pc, #224]	; (b555c <_Z13dataOffloaderv+0x1bc>)
   b547a:	f008 fc0b 	bl	bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b547e:	4b2f      	ldr	r3, [pc, #188]	; (b553c <_Z13dataOffloaderv+0x19c>)
   b5480:	2200      	movs	r2, #0
   b5482:	701a      	strb	r2, [r3, #0]
}
   b5484:	b02d      	add	sp, #180	; 0xb4
   b5486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b548a:	2226      	movs	r2, #38	; 0x26
   b548c:	2100      	movs	r1, #0
   b548e:	a809      	add	r0, sp, #36	; 0x24
   b5490:	f00e fa76 	bl	c3980 <memset>
            strcpy(fileCode,"filename");
   b5494:	4932      	ldr	r1, [pc, #200]	; (b5560 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b5496:	4e33      	ldr	r6, [pc, #204]	; (b5564 <_Z13dataOffloaderv+0x1c4>)
   b5498:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b555c <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b549c:	a809      	add	r0, sp, #36	; 0x24
   b549e:	f00e fad5 	bl	c3a4c <strcpy>
            strcat(fileCode,namebuf);
   b54a2:	a901      	add	r1, sp, #4
   b54a4:	a809      	add	r0, sp, #36	; 0x24
   b54a6:	f00e faa1 	bl	c39ec <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b54aa:	f00b fe81 	bl	c11b0 <_Z16_fetch_usbserialv>
   b54ae:	492e      	ldr	r1, [pc, #184]	; (b5568 <_Z13dataOffloaderv+0x1c8>)
   b54b0:	aa09      	add	r2, sp, #36	; 0x24
   b54b2:	f7fe ff51 	bl	b4358 <_ZN5Print8printlnfEPKcz>
   b54b6:	2300      	movs	r3, #0
   b54b8:	2226      	movs	r2, #38	; 0x26
   b54ba:	a909      	add	r1, sp, #36	; 0x24
   b54bc:	4827      	ldr	r0, [pc, #156]	; (b555c <_Z13dataOffloaderv+0x1bc>)
   b54be:	f008 fbe9 	bl	bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b54c2:	f00b fe75 	bl	c11b0 <_Z16_fetch_usbserialv>
   b54c6:	4929      	ldr	r1, [pc, #164]	; (b556c <_Z13dataOffloaderv+0x1cc>)
   b54c8:	aa01      	add	r2, sp, #4
   b54ca:	f7fe ff45 	bl	b4358 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b54ce:	2096      	movs	r0, #150	; 0x96
   b54d0:	f008 f98c 	bl	bd7ec <delay>
            noInterrupts();
   b54d4:	f009 fef4 	bl	bf2c0 <_Z12noInterruptsv>
            while(myFile.available()){
   b54d8:	4630      	mov	r0, r6
   b54da:	f7fe fe00 	bl	b40de <_ZN4File9availableEv>
   b54de:	4604      	mov	r4, r0
   b54e0:	b188      	cbz	r0, b5506 <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b54e2:	2264      	movs	r2, #100	; 0x64
   b54e4:	2100      	movs	r1, #0
   b54e6:	a813      	add	r0, sp, #76	; 0x4c
   b54e8:	f00e fa4a 	bl	c3980 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b54ec:	aa13      	add	r2, sp, #76	; 0x4c
   b54ee:	2364      	movs	r3, #100	; 0x64
   b54f0:	210d      	movs	r1, #13
   b54f2:	4630      	mov	r0, r6
   b54f4:	f00b fbb0 	bl	c0c58 <_ZN6Stream14readBytesUntilEcPcj>
   b54f8:	2300      	movs	r3, #0
   b54fa:	2264      	movs	r2, #100	; 0x64
   b54fc:	a913      	add	r1, sp, #76	; 0x4c
   b54fe:	4648      	mov	r0, r9
   b5500:	f008 fbc8 	bl	bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5504:	e7e8      	b.n	b54d8 <_Z13dataOffloaderv+0x138>
            interrupts();
   b5506:	f009 fedd 	bl	bf2c4 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b550a:	2226      	movs	r2, #38	; 0x26
   b550c:	4621      	mov	r1, r4
   b550e:	a809      	add	r0, sp, #36	; 0x24
   b5510:	f00e fa36 	bl	c3980 <memset>
            strcpy(fileCode,"filecomp");
   b5514:	4916      	ldr	r1, [pc, #88]	; (b5570 <_Z13dataOffloaderv+0x1d0>)
   b5516:	a809      	add	r0, sp, #36	; 0x24
   b5518:	f00e fa98 	bl	c3a4c <strcpy>
   b551c:	4623      	mov	r3, r4
   b551e:	2226      	movs	r2, #38	; 0x26
   b5520:	a909      	add	r1, sp, #36	; 0x24
   b5522:	480e      	ldr	r0, [pc, #56]	; (b555c <_Z13dataOffloaderv+0x1bc>)
   b5524:	f008 fbb6 	bl	bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b5528:	2096      	movs	r0, #150	; 0x96
   b552a:	f008 f95f 	bl	bd7ec <delay>
   b552e:	e790      	b.n	b5452 <_Z13dataOffloaderv+0xb2>
   b5530:	000c5e2f 	.word	0x000c5e2f
   b5534:	000c5e4c 	.word	0x000c5e4c
   b5538:	2003de90 	.word	0x2003de90
   b553c:	2003e0e8 	.word	0x2003e0e8
   b5540:	000c5e4e 	.word	0x000c5e4e
   b5544:	000c5e7b 	.word	0x000c5e7b
   b5548:	2003ddd0 	.word	0x2003ddd0
   b554c:	000c5e9b 	.word	0x000c5e9b
   b5550:	2003df44 	.word	0x2003df44
   b5554:	000c5ed9 	.word	0x000c5ed9
   b5558:	000c5ede 	.word	0x000c5ede
   b555c:	2003e0e0 	.word	0x2003e0e0
   b5560:	000c5ee7 	.word	0x000c5ee7
   b5564:	2003df34 	.word	0x2003df34
   b5568:	000c5ef0 	.word	0x000c5ef0
   b556c:	000c5f03 	.word	0x000c5f03
   b5570:	000c5f2b 	.word	0x000c5f2b
   b5574:	000c5eb0 	.word	0x000c5eb0

000b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5578:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b557a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b557c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b557e:	b17c      	cbz	r4, b55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5580:	6863      	ldr	r3, [r4, #4]
   b5582:	3b01      	subs	r3, #1
   b5584:	6063      	str	r3, [r4, #4]
   b5586:	b95b      	cbnz	r3, b55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5588:	6823      	ldr	r3, [r4, #0]
   b558a:	4620      	mov	r0, r4
   b558c:	689b      	ldr	r3, [r3, #8]
   b558e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5590:	68a3      	ldr	r3, [r4, #8]
   b5592:	3b01      	subs	r3, #1
   b5594:	60a3      	str	r3, [r4, #8]
   b5596:	b91b      	cbnz	r3, b55a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5598:	6823      	ldr	r3, [r4, #0]
   b559a:	4620      	mov	r0, r4
   b559c:	68db      	ldr	r3, [r3, #12]
   b559e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b55a0:	4628      	mov	r0, r5
   b55a2:	bd38      	pop	{r3, r4, r5, pc}

000b55a4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b55a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55a8:	b084      	sub	sp, #16
   b55aa:	af02      	add	r7, sp, #8
   b55ac:	4680      	mov	r8, r0
   b55ae:	4691      	mov	r9, r2
   b55b0:	461e      	mov	r6, r3
   b55b2:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b55b4:	f00e fa6f 	bl	c3a96 <strlen>
   b55b8:	3009      	adds	r0, #9
   b55ba:	f020 0107 	bic.w	r1, r0, #7
   b55be:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55c2:	4640      	mov	r0, r8
   b55c4:	f00e fa67 	bl	c3a96 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b55c8:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55cc:	4925      	ldr	r1, [pc, #148]	; (b5664 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b55ce:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b55d0:	4603      	mov	r3, r0
   b55d2:	4642      	mov	r2, r8
   b55d4:	4620      	mov	r0, r4
   b55d6:	f008 f8ad 	bl	bd734 <sprintf>
    if(sendLTE || sendMode == 4){
   b55da:	f1ba 0f00 	cmp.w	sl, #0
   b55de:	d101      	bne.n	b55e4 <_Z8sendDataPKchbbb+0x40>
   b55e0:	2d04      	cmp	r5, #4
   b55e2:	d10c      	bne.n	b55fe <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b55e4:	4b20      	ldr	r3, [pc, #128]	; (b5668 <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b55e6:	4921      	ldr	r1, [pc, #132]	; (b566c <_Z8sendDataPKchbbb+0xc8>)
   b55e8:	781b      	ldrb	r3, [r3, #0]
   b55ea:	f88d 3000 	strb.w	r3, [sp]
   b55ee:	4638      	mov	r0, r7
   b55f0:	233c      	movs	r3, #60	; 0x3c
   b55f2:	4622      	mov	r2, r4
   b55f4:	f009 fc38 	bl	bee68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b55f8:	1d38      	adds	r0, r7, #4
   b55fa:	f7ff ffbd 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b55fe:	f1b9 0f00 	cmp.w	r9, #0
   b5602:	d101      	bne.n	b5608 <_Z8sendDataPKchbbb+0x64>
   b5604:	2d01      	cmp	r5, #1
   b5606:	d121      	bne.n	b564c <_Z8sendDataPKchbbb+0xa8>
   b5608:	f008 fc54 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b560c:	f008 fcb0 	bl	bdf70 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5610:	b1e0      	cbz	r0, b564c <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5612:	4620      	mov	r0, r4
   b5614:	f00e fa3f 	bl	c3a96 <strlen>
   b5618:	3007      	adds	r0, #7
   b561a:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b561e:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5620:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5624:	4620      	mov	r0, r4
   b5626:	f00e fa36 	bl	c3a96 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b562a:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b562e:	4602      	mov	r2, r0
   b5630:	4621      	mov	r1, r4
   b5632:	4648      	mov	r0, r9
   b5634:	f00e f97c 	bl	c3930 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5638:	4620      	mov	r0, r4
   b563a:	f00e fa2c 	bl	c3a96 <strlen>
   b563e:	2300      	movs	r3, #0
   b5640:	4602      	mov	r2, r0
   b5642:	4649      	mov	r1, r9
   b5644:	480a      	ldr	r0, [pc, #40]	; (b5670 <_Z8sendDataPKchbbb+0xcc>)
   b5646:	f008 fb25 	bl	bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b564a:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b564c:	b90e      	cbnz	r6, b5652 <_Z8sendDataPKchbbb+0xae>
   b564e:	2d02      	cmp	r5, #2
   b5650:	d104      	bne.n	b565c <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b5652:	f00b ff45 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b5656:	4621      	mov	r1, r4
   b5658:	f00b f901 	bl	c085e <_ZN5Print7printlnEPKc>
}
   b565c:	3708      	adds	r7, #8
   b565e:	46bd      	mov	sp, r7
   b5660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5664:	000c5f34 	.word	0x000c5f34
   b5668:	2003ddcc 	.word	0x2003ddcc
   b566c:	000c5f3b 	.word	0x000c5f3b
   b5670:	2003e5e8 	.word	0x2003e5e8

000b5674 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5674:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b5676:	4d27      	ldr	r5, [pc, #156]	; (b5714 <_Z16sendResponseDatav+0xa0>)
   b5678:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b567a:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b567c:	2b00      	cmp	r3, #0
   b567e:	d046      	beq.n	b570e <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b5680:	2241      	movs	r2, #65	; 0x41
   b5682:	2100      	movs	r1, #0
   b5684:	a80b      	add	r0, sp, #44	; 0x2c
   b5686:	f00e f97b 	bl	c3980 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b568a:	4b23      	ldr	r3, [pc, #140]	; (b5718 <_Z16sendResponseDatav+0xa4>)
   b568c:	9308      	str	r3, [sp, #32]
   b568e:	4b23      	ldr	r3, [pc, #140]	; (b571c <_Z16sendResponseDatav+0xa8>)
   b5690:	eddf 6a23 	vldr	s13, [pc, #140]	; b5720 <_Z16sendResponseDatav+0xac>
   b5694:	ed93 7a00 	vldr	s14, [r3]
   b5698:	4b22      	ldr	r3, [pc, #136]	; (b5724 <_Z16sendResponseDatav+0xb0>)
   b569a:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b569e:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b56a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56a4:	ed8d 7a07 	vstr	s14, [sp, #28]
   b56a8:	ed93 7a00 	vldr	s14, [r3]
   b56ac:	4b1e      	ldr	r3, [pc, #120]	; (b5728 <_Z16sendResponseDatav+0xb4>)
   b56ae:	ee27 7a26 	vmul.f32	s14, s14, s13
   b56b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56b6:	ed8d 7a06 	vstr	s14, [sp, #24]
   b56ba:	ed93 7a00 	vldr	s14, [r3]
   b56be:	4b1b      	ldr	r3, [pc, #108]	; (b572c <_Z16sendResponseDatav+0xb8>)
   b56c0:	ee27 7a26 	vmul.f32	s14, s14, s13
   b56c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b56c8:	ed8d 7a05 	vstr	s14, [sp, #20]
   b56cc:	edd3 7a00 	vldr	s15, [r3]
   b56d0:	4b17      	ldr	r3, [pc, #92]	; (b5730 <_Z16sendResponseDatav+0xbc>)
   b56d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b56d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b56da:	edcd 7a04 	vstr	s15, [sp, #16]
   b56de:	6818      	ldr	r0, [r3, #0]
   b56e0:	f00d fd42 	bl	c3168 <__aeabi_f2d>
   b56e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b56e8:	4b12      	ldr	r3, [pc, #72]	; (b5734 <_Z16sendResponseDatav+0xc0>)
   b56ea:	6818      	ldr	r0, [r3, #0]
   b56ec:	f00d fd3c 	bl	c3168 <__aeabi_f2d>
   b56f0:	2201      	movs	r2, #1
   b56f2:	e9cd 0100 	strd	r0, r1, [sp]
   b56f6:	4910      	ldr	r1, [pc, #64]	; (b5738 <_Z16sendResponseDatav+0xc4>)
   b56f8:	a80b      	add	r0, sp, #44	; 0x2c
   b56fa:	f008 f81b 	bl	bd734 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b56fe:	7829      	ldrb	r1, [r5, #0]
   b5700:	9400      	str	r4, [sp, #0]
   b5702:	4623      	mov	r3, r4
   b5704:	4622      	mov	r2, r4
   b5706:	a80b      	add	r0, sp, #44	; 0x2c
   b5708:	f7ff ff4c 	bl	b55a4 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b570c:	702c      	strb	r4, [r5, #0]
}
   b570e:	b01d      	add	sp, #116	; 0x74
   b5710:	bd30      	pop	{r4, r5, pc}
   b5712:	bf00      	nop
   b5714:	2003e0e9 	.word	0x2003e0e9
   b5718:	00010d88 	.word	0x00010d88
   b571c:	2003e580 	.word	0x2003e580
   b5720:	447a0000 	.word	0x447a0000
   b5724:	2003e578 	.word	0x2003e578
   b5728:	2003e584 	.word	0x2003e584
   b572c:	2003e57c 	.word	0x2003e57c
   b5730:	2003df10 	.word	0x2003df10
   b5734:	2003de38 	.word	0x2003de38
   b5738:	000c5f43 	.word	0x000c5f43

000b573c <_Z12statusUpdatev>:
void statusUpdate(){
   b573c:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b573e:	4e2c      	ldr	r6, [pc, #176]	; (b57f0 <_Z12statusUpdatev+0xb4>)
   b5740:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b5742:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b5744:	2b00      	cmp	r3, #0
   b5746:	d049      	beq.n	b57dc <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b5748:	4a2a      	ldr	r2, [pc, #168]	; (b57f4 <_Z12statusUpdatev+0xb8>)
   b574a:	4b2b      	ldr	r3, [pc, #172]	; (b57f8 <_Z12statusUpdatev+0xbc>)
   b574c:	6810      	ldr	r0, [r2, #0]
   b574e:	781b      	ldrb	r3, [r3, #0]
   b5750:	9307      	str	r3, [sp, #28]
   b5752:	f00d fd09 	bl	c3168 <__aeabi_f2d>
   b5756:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b575a:	4a28      	ldr	r2, [pc, #160]	; (b57fc <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b575c:	4c28      	ldr	r4, [pc, #160]	; (b5800 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b575e:	6810      	ldr	r0, [r2, #0]
   b5760:	f00d fd02 	bl	c3168 <__aeabi_f2d>
   b5764:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5768:	4a26      	ldr	r2, [pc, #152]	; (b5804 <_Z12statusUpdatev+0xc8>)
   b576a:	9b07      	ldr	r3, [sp, #28]
   b576c:	7812      	ldrb	r2, [r2, #0]
   b576e:	4926      	ldr	r1, [pc, #152]	; (b5808 <_Z12statusUpdatev+0xcc>)
   b5770:	9200      	str	r2, [sp, #0]
   b5772:	a809      	add	r0, sp, #36	; 0x24
   b5774:	2201      	movs	r2, #1
   b5776:	f007 ffdd 	bl	bd734 <sprintf>
        Serial.println(updateStr);
   b577a:	f00b fd19 	bl	c11b0 <_Z16_fetch_usbserialv>
   b577e:	a909      	add	r1, sp, #36	; 0x24
   b5780:	f00b f86d 	bl	c085e <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b5784:	f00b fd14 	bl	c11b0 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5788:	8821      	ldrh	r1, [r4, #0]
   b578a:	4605      	mov	r5, r0
   b578c:	220a      	movs	r2, #10
   b578e:	f00b f872 	bl	c0876 <_ZN5Print11printNumberEmh>
        n += println();
   b5792:	4628      	mov	r0, r5
   b5794:	f00b f857 	bl	c0846 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b5798:	4b1c      	ldr	r3, [pc, #112]	; (b580c <_Z12statusUpdatev+0xd0>)
   b579a:	781b      	ldrb	r3, [r3, #0]
   b579c:	bb03      	cbnz	r3, b57e0 <_Z12statusUpdatev+0xa4>
   b579e:	4b1c      	ldr	r3, [pc, #112]	; (b5810 <_Z12statusUpdatev+0xd4>)
   b57a0:	781b      	ldrb	r3, [r3, #0]
   b57a2:	b9eb      	cbnz	r3, b57e0 <_Z12statusUpdatev+0xa4>
   b57a4:	8823      	ldrh	r3, [r4, #0]
   b57a6:	b1f3      	cbz	r3, b57e6 <_Z12statusUpdatev+0xaa>
   b57a8:	f013 0303 	ands.w	r3, r3, #3
   b57ac:	d11b      	bne.n	b57e6 <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b57ae:	2201      	movs	r2, #1
   b57b0:	9200      	str	r2, [sp, #0]
   b57b2:	4619      	mov	r1, r3
   b57b4:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b57b6:	a809      	add	r0, sp, #36	; 0x24
   b57b8:	f7ff fef4 	bl	b55a4 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b57bc:	8823      	ldrh	r3, [r4, #0]
   b57be:	b10b      	cbz	r3, b57c4 <_Z12statusUpdatev+0x88>
   b57c0:	3b01      	subs	r3, #1
   b57c2:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b57c4:	2400      	movs	r4, #0
        delay(100);
   b57c6:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b57c8:	7034      	strb	r4, [r6, #0]
        delay(100);
   b57ca:	f008 f80f 	bl	bd7ec <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b57ce:	4811      	ldr	r0, [pc, #68]	; (b5814 <_Z12statusUpdatev+0xd8>)
   b57d0:	9400      	str	r4, [sp, #0]
   b57d2:	4623      	mov	r3, r4
   b57d4:	2201      	movs	r2, #1
   b57d6:	4621      	mov	r1, r4
   b57d8:	f7ff fee4 	bl	b55a4 <_Z8sendDataPKchbbb>
}
   b57dc:	b010      	add	sp, #64	; 0x40
   b57de:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b57e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b57e4:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b57e6:	2100      	movs	r1, #0
   b57e8:	2301      	movs	r3, #1
   b57ea:	9100      	str	r1, [sp, #0]
   b57ec:	461a      	mov	r2, r3
   b57ee:	e7e2      	b.n	b57b6 <_Z12statusUpdatev+0x7a>
   b57f0:	2003e5d4 	.word	0x2003e5d4
   b57f4:	2003df10 	.word	0x2003df10
   b57f8:	2003dde0 	.word	0x2003dde0
   b57fc:	2003de38 	.word	0x2003de38
   b5800:	2003ddb6 	.word	0x2003ddb6
   b5804:	2003e5b4 	.word	0x2003e5b4
   b5808:	000c5f67 	.word	0x000c5f67
   b580c:	2003dd84 	.word	0x2003dd84
   b5810:	2003ddc4 	.word	0x2003ddc4
   b5814:	000c5f80 	.word	0x000c5f80

000b5818 <loop>:
void loop(){
   b5818:	b508      	push	{r3, lr}
    if(getPositionData()){
   b581a:	f7ff fa61 	bl	b4ce0 <_Z15getPositionDatav>
    readPowerSys();
   b581e:	f7ff f9d7 	bl	b4bd0 <_Z12readPowerSysv>
    sensorHandler();
   b5822:	f7ff fbcb 	bl	b4fbc <_Z13sensorHandlerv>
    XBeeHandler();
   b5826:	f7ff fd31 	bl	b528c <_Z11XBeeHandlerv>
    statusUpdate();
   b582a:	f7ff ff87 	bl	b573c <_Z12statusUpdatev>
    updateMotors();
   b582e:	f7ff fb9d 	bl	b4f6c <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b5832:	4b06      	ldr	r3, [pc, #24]	; (b584c <loop+0x34>)
   b5834:	781b      	ldrb	r3, [r3, #0]
   b5836:	b10b      	cbz	r3, b583c <loop+0x24>
   b5838:	f7ff fdb2 	bl	b53a0 <_Z13dataOffloaderv>
    sendResponseData();
   b583c:	f7ff ff1a 	bl	b5674 <_Z16sendResponseDatav>
}
   b5840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(500);
   b5844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5848:	f007 bfd0 	b.w	bd7ec <delay>
   b584c:	2003e0e8 	.word	0x2003e0e8

000b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5850:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5852:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5856:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5858:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b585a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b585e:	42ae      	cmp	r6, r5
   b5860:	d004      	beq.n	b586c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5862:	4628      	mov	r0, r5
   b5864:	f00b fa28 	bl	c0cb8 <_ZN6StringD1Ev>
   b5868:	3514      	adds	r5, #20
   b586a:	e7f8      	b.n	b585e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b586c:	6820      	ldr	r0, [r4, #0]
   b586e:	f007 ff51 	bl	bd714 <free>
    AllocatorT::free(data_);
}
   b5872:	4620      	mov	r0, r4
   b5874:	bd70      	pop	{r4, r5, r6, pc}

000b5876 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b5876:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5878:	4616      	mov	r6, r2
   b587a:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b587c:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b587e:	e9c0 2200 	strd	r2, r2, [r0]
   b5882:	4604      	mov	r4, r0
   b5884:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b5886:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b5888:	4619      	mov	r1, r3
   b588a:	a804      	add	r0, sp, #16
   b588c:	f008 f9c4 	bl	bdc18 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b5890:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5892:	4638      	mov	r0, r7
   b5894:	f008 f9c0 	bl	bdc18 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5898:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b589a:	9302      	str	r3, [sp, #8]
   b589c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b589e:	4620      	mov	r0, r4
   b58a0:	e9cd 7300 	strd	r7, r3, [sp]
   b58a4:	4632      	mov	r2, r6
   b58a6:	ab04      	add	r3, sp, #16
   b58a8:	4629      	mov	r1, r5
   b58aa:	f008 ff2b 	bl	be704 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b58ae:	4620      	mov	r0, r4
   b58b0:	b00f      	add	sp, #60	; 0x3c
   b58b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b58b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b58b4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b58b6:	4c0b      	ldr	r4, [pc, #44]	; (b58e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b58b8:	7821      	ldrb	r1, [r4, #0]
   b58ba:	f3bf 8f5b 	dmb	ish
   b58be:	f011 0101 	ands.w	r1, r1, #1
   b58c2:	d10b      	bne.n	b58dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58c4:	4620      	mov	r0, r4
   b58c6:	9101      	str	r1, [sp, #4]
   b58c8:	f7fe fbfa 	bl	b40c0 <__cxa_guard_acquire>
   b58cc:	9901      	ldr	r1, [sp, #4]
   b58ce:	b128      	cbz	r0, b58dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b58d0:	4805      	ldr	r0, [pc, #20]	; (b58e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58d2:	f00b f8a4 	bl	c0a1e <_ZN8SPIClassC1E19hal_spi_interface_t>
   b58d6:	4620      	mov	r0, r4
   b58d8:	f7fe fbf7 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b58dc:	4802      	ldr	r0, [pc, #8]	; (b58e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b58de:	b002      	add	sp, #8
   b58e0:	bd10      	pop	{r4, pc}
   b58e2:	bf00      	nop
   b58e4:	2003dd78 	.word	0x2003dd78
   b58e8:	2003dd7c 	.word	0x2003dd7c

000b58ec <_Z8setupSPIv>:
void setupSPI(){
   b58ec:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b58ee:	f7ff ffe1 	bl	b58b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b58f6:	2100      	movs	r1, #0
   b58f8:	f00b f8af 	bl	c0a5a <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b58fc:	f7ff ffda 	bl	b58b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b5900:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5904:	4901      	ldr	r1, [pc, #4]	; (b590c <_Z8setupSPIv+0x20>)
   b5906:	2201      	movs	r2, #1
   b5908:	f00b b946 	b.w	c0b98 <_ZN8SPIClass13setClockSpeedEjj>
   b590c:	000f4240 	.word	0x000f4240

000b5910 <setup>:
void setup(){
   b5910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5914:	48bc      	ldr	r0, [pc, #752]	; (b5c08 <setup+0x2f8>)
    setLSpeed = 90;
   b5916:	4ebd      	ldr	r6, [pc, #756]	; (b5c0c <setup+0x2fc>)
   b5918:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b591a:	4dbd      	ldr	r5, [pc, #756]	; (b5c10 <setup+0x300>)
   b591c:	f003 0303 	and.w	r3, r3, #3
   b5920:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5924:	b093      	sub	sp, #76	; 0x4c
   b5926:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5928:	2200      	movs	r2, #0
   b592a:	2101      	movs	r1, #1
   b592c:	3004      	adds	r0, #4
   b592e:	f007 fe03 	bl	bd538 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b5932:	2101      	movs	r1, #1
   b5934:	2002      	movs	r0, #2
   b5936:	f00b fd3b 	bl	c13b0 <pinMode>
    pinMode(PWR_EN, OUTPUT);
   b593a:	2101      	movs	r1, #1
   b593c:	201c      	movs	r0, #28
   b593e:	f00b fd37 	bl	c13b0 <pinMode>
    pinMode(LEAK_DET, INPUT);
   b5942:	2100      	movs	r1, #0
   b5944:	201d      	movs	r0, #29
   b5946:	f00b fd33 	bl	c13b0 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b594a:	2100      	movs	r1, #0
   b594c:	2002      	movs	r0, #2
   b594e:	f00b fd40 	bl	c13d2 <digitalWrite>
    digitalWrite(PWR_EN,LOW);
   b5952:	2100      	movs	r1, #0
   b5954:	201c      	movs	r0, #28
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5956:	2400      	movs	r4, #0
    digitalWrite(PWR_EN,LOW);
   b5958:	f00b fd3b 	bl	c13d2 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b595c:	27b4      	movs	r7, #180	; 0xb4
   b595e:	f007 fbfb 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b5962:	235a      	movs	r3, #90	; 0x5a
   b5964:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b5966:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b5968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b596c:	e9cd 4700 	strd	r4, r7, [sp]
   b5970:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5974:	2106      	movs	r1, #6
   b5976:	48a7      	ldr	r0, [pc, #668]	; (b5c14 <setup+0x304>)
   b5978:	f00b f820 	bl	c09bc <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b597c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5980:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5984:	e9cd 4700 	strd	r4, r7, [sp]
   b5988:	2105      	movs	r1, #5
   b598a:	48a3      	ldr	r0, [pc, #652]	; (b5c18 <setup+0x308>)
    logSensors = true;
   b598c:	4fa3      	ldr	r7, [pc, #652]	; (b5c1c <setup+0x30c>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b598e:	f00b f815 	bl	c09bc <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b5992:	7831      	ldrb	r1, [r6, #0]
   b5994:	489f      	ldr	r0, [pc, #636]	; (b5c14 <setup+0x304>)
    logMessages = true;
   b5996:	4ea2      	ldr	r6, [pc, #648]	; (b5c20 <setup+0x310>)
    ESCL.write(setLSpeed);
   b5998:	f00a ffd3 	bl	c0942 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b599c:	7829      	ldrb	r1, [r5, #0]
   b599e:	489e      	ldr	r0, [pc, #632]	; (b5c18 <setup+0x308>)
   b59a0:	f00a ffcf 	bl	c0942 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b59a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b59a8:	f007 ff20 	bl	bd7ec <delay>
    BLE.on();
   b59ac:	f008 fa82 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59b0:	f008 faca 	bl	bdf48 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b59b4:	f008 fa7e 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b59b8:	2108      	movs	r1, #8
   b59ba:	f008 facc 	bl	bdf56 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b59be:	f00b fbf7 	bl	c11b0 <_Z16_fetch_usbserialv>
   b59c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59c6:	f00b fbe3 	bl	c1190 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b59ca:	f00b fd89 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   b59ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59d2:	f00b fb85 	bl	c10e0 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b59d6:	f7ff ff89 	bl	b58ec <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b59da:	f7ff f8ad 	bl	b4b38 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b59de:	f7ff f8c3 	bl	b4b68 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b59e2:	f7ff f895 	bl	b4b10 <_Z8setupLTEv>
   b59e6:	f007 fbb7 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b59ea:	4b8e      	ldr	r3, [pc, #568]	; (b5c24 <setup+0x314>)
   b59ec:	6018      	str	r0, [r3, #0]
   b59ee:	f007 fbb3 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b59f2:	4b8d      	ldr	r3, [pc, #564]	; (b5c28 <setup+0x318>)
   b59f4:	6018      	str	r0, [r3, #0]
   b59f6:	f007 fbaf 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b59fa:	4b8c      	ldr	r3, [pc, #560]	; (b5c2c <setup+0x31c>)
   b59fc:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b59fe:	4b8c      	ldr	r3, [pc, #560]	; (b5c30 <setup+0x320>)
   b5a00:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5a02:	4b8c      	ldr	r3, [pc, #560]	; (b5c34 <setup+0x324>)
   b5a04:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5a06:	4b8c      	ldr	r3, [pc, #560]	; (b5c38 <setup+0x328>)
   b5a08:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5a0a:	4b8c      	ldr	r3, [pc, #560]	; (b5c3c <setup+0x32c>)
   b5a0c:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b5a0e:	4b8c      	ldr	r3, [pc, #560]	; (b5c40 <setup+0x330>)
   b5a10:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5a12:	4b8c      	ldr	r3, [pc, #560]	; (b5c44 <setup+0x334>)
   b5a14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5a18:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5a1a:	4b8b      	ldr	r3, [pc, #556]	; (b5c48 <setup+0x338>)
    logSensors = true;
   b5a1c:	2501      	movs	r5, #1
    battPercent = 50;
   b5a1e:	2232      	movs	r2, #50	; 0x32
   b5a20:	701a      	strb	r2, [r3, #0]
    logSensors = true;
   b5a22:	703d      	strb	r5, [r7, #0]
    logMessages = true;
   b5a24:	7035      	strb	r5, [r6, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b5a26:	f008 fa45 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a2a:	4a88      	ldr	r2, [pc, #544]	; (b5c4c <setup+0x33c>)
   b5a2c:	4601      	mov	r1, r0
   b5a2e:	a80d      	add	r0, sp, #52	; 0x34
   b5a30:	f008 ff92 	bl	be958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a34:	a80d      	add	r0, sp, #52	; 0x34
   b5a36:	f008 fb42 	bl	be0be <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5a3a:	f008 fa3b 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a3e:	4a84      	ldr	r2, [pc, #528]	; (b5c50 <setup+0x340>)
   b5a40:	4601      	mov	r1, r0
   b5a42:	a80d      	add	r0, sp, #52	; 0x34
   b5a44:	f008 ff88 	bl	be958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a48:	a80d      	add	r0, sp, #52	; 0x34
   b5a4a:	f008 fb38 	bl	be0be <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b5a4e:	f008 fa31 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5a52:	4a80      	ldr	r2, [pc, #512]	; (b5c54 <setup+0x344>)
   b5a54:	4601      	mov	r1, r0
   b5a56:	a80d      	add	r0, sp, #52	; 0x34
   b5a58:	f008 ff7e 	bl	be958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b5a5c:	a80d      	add	r0, sp, #52	; 0x34
   b5a5e:	f008 fb2e 	bl	be0be <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b5a62:	4b7d      	ldr	r3, [pc, #500]	; (b5c58 <setup+0x348>)
   b5a64:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b5a66:	4b7d      	ldr	r3, [pc, #500]	; (b5c5c <setup+0x34c>)
        BleUuid tempUUID(uuid);
   b5a68:	a80d      	add	r0, sp, #52	; 0x34
   b5a6a:	6819      	ldr	r1, [r3, #0]
   b5a6c:	f008 f8d4 	bl	bdc18 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a70:	a80d      	add	r0, sp, #52	; 0x34
   b5a72:	f008 f833 	bl	bdadc <_ZNK8particle7BleUuid4typeEv>
   b5a76:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b5a78:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b5a7a:	2d00      	cmp	r5, #0
   b5a7c:	f040 80b8 	bne.w	b5bf0 <setup+0x2e0>
            uint16_t uuid16 = tempUUID.shorted();
   b5a80:	f008 f848 	bl	bdb14 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a84:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b5a86:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b5a8a:	2302      	movs	r3, #2
   b5a8c:	aa09      	add	r2, sp, #36	; 0x24
   b5a8e:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b5a90:	4873      	ldr	r0, [pc, #460]	; (b5c60 <setup+0x350>)
   b5a92:	f008 fc3f 	bl	be314 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b5a96:	2300      	movs	r3, #0
   b5a98:	496f      	ldr	r1, [pc, #444]	; (b5c58 <setup+0x348>)
   b5a9a:	4871      	ldr	r0, [pc, #452]	; (b5c60 <setup+0x350>)
   b5a9c:	2208      	movs	r2, #8
   b5a9e:	f008 fc57 	bl	be350 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b5aa2:	f008 fa07 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5aa6:	2200      	movs	r2, #0
   b5aa8:	496d      	ldr	r1, [pc, #436]	; (b5c60 <setup+0x350>)
   b5aaa:	f008 fab4 	bl	be016 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5aae:	f00b fcd7 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5ab2:	f009 fbc5 	bl	bf240 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b5ab6:	f00b fcd3 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5aba:	496a      	ldr	r1, [pc, #424]	; (b5c64 <setup+0x354>)
   b5abc:	f009 fbbc 	bl	bf238 <_ZN7TwoWire8setSpeedEm>
    if (! lis3mdl.begin_I2C()) {          // hardware I2C mode, can pass in address & alt Wire
   b5ac0:	f00b fcce 	bl	c1460 <_Z19__fetch_global_Wirev>
   b5ac4:	211c      	movs	r1, #28
   b5ac6:	4602      	mov	r2, r0
   b5ac8:	4867      	ldr	r0, [pc, #412]	; (b5c68 <setup+0x358>)
   b5aca:	f002 f86e 	bl	b7baa <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5ace:	2800      	cmp	r0, #0
   b5ad0:	f040 8095 	bne.w	b5bfe <setup+0x2ee>
        Serial.println("Failed to find LIS3MDL chip");
   b5ad4:	f00b fb6c 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5ad8:	4964      	ldr	r1, [pc, #400]	; (b5c6c <setup+0x35c>)
    else Serial.println("LIS3MDL Found!");
   b5ada:	f00a fec0 	bl	c085e <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b5ade:	4862      	ldr	r0, [pc, #392]	; (b5c68 <setup+0x358>)
   b5ae0:	2101      	movs	r1, #1
   b5ae2:	f001 ff5b 	bl	b799c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b5ae6:	4860      	ldr	r0, [pc, #384]	; (b5c68 <setup+0x358>)
   b5ae8:	2100      	movs	r1, #0
   b5aea:	f001 ffbb 	bl	b7a64 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5aee:	485e      	ldr	r0, [pc, #376]	; (b5c68 <setup+0x358>)
   b5af0:	2101      	movs	r1, #1
   b5af2:	f001 ff85 	bl	b7a00 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_4_GAUSS);
   b5af6:	485c      	ldr	r0, [pc, #368]	; (b5c68 <setup+0x358>)
   b5af8:	2100      	movs	r1, #0
   b5afa:	f001 ffce 	bl	b7a9a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5afe:	2401      	movs	r4, #1
   b5b00:	2500      	movs	r5, #0
    lis3mdl.setIntThreshold(500);
   b5b02:	4859      	ldr	r0, [pc, #356]	; (b5c68 <setup+0x358>)
   b5b04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5b08:	f002 f86e 	bl	b7be8 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5b0c:	4623      	mov	r3, r4
   b5b0e:	462a      	mov	r2, r5
   b5b10:	4629      	mov	r1, r5
   b5b12:	e9cd 5401 	strd	r5, r4, [sp, #4]
   b5b16:	4854      	ldr	r0, [pc, #336]	; (b5c68 <setup+0x358>)
   b5b18:	9400      	str	r4, [sp, #0]
   b5b1a:	f002 f87d 	bl	b7c18 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5b1e:	f00b fa6b 	bl	c0ff8 <_ZN9TimeClass5monthEv>
   b5b22:	9007      	str	r0, [sp, #28]
   b5b24:	f00b fa5c 	bl	c0fe0 <_ZN9TimeClass3dayEv>
   b5b28:	4680      	mov	r8, r0
   b5b2a:	f00b fa6d 	bl	c1008 <_ZN9TimeClass4yearEv>
   b5b2e:	4681      	mov	r9, r0
   b5b30:	f00b fa32 	bl	c0f98 <_ZN9TimeClass4hourEv>
   b5b34:	4682      	mov	sl, r0
   b5b36:	f00b fa3b 	bl	c0fb0 <_ZN9TimeClass6minuteEv>
   b5b3a:	4683      	mov	fp, r0
   b5b3c:	f00b fa44 	bl	c0fc8 <_ZN9TimeClass6secondEv>
   b5b40:	9b07      	ldr	r3, [sp, #28]
   b5b42:	4a4b      	ldr	r2, [pc, #300]	; (b5c70 <setup+0x360>)
   b5b44:	f8cd 8000 	str.w	r8, [sp]
   b5b48:	e9cd b003 	strd	fp, r0, [sp, #12]
   b5b4c:	2110      	movs	r1, #16
   b5b4e:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   b5b52:	a809      	add	r0, sp, #36	; 0x24
   b5b54:	f007 fdfe 	bl	bd754 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5b58:	4946      	ldr	r1, [pc, #280]	; (b5c74 <setup+0x364>)
   b5b5a:	4847      	ldr	r0, [pc, #284]	; (b5c78 <setup+0x368>)
   b5b5c:	f00d ff76 	bl	c3a4c <strcpy>
    strcat(filename,timestamp);
   b5b60:	a909      	add	r1, sp, #36	; 0x24
   b5b62:	4845      	ldr	r0, [pc, #276]	; (b5c78 <setup+0x368>)
   b5b64:	f00d ff42 	bl	c39ec <strcat>
    strcpy(filenameMessages,filename);
   b5b68:	4943      	ldr	r1, [pc, #268]	; (b5c78 <setup+0x368>)
   b5b6a:	4844      	ldr	r0, [pc, #272]	; (b5c7c <setup+0x36c>)
   b5b6c:	f00d ff6e 	bl	c3a4c <strcpy>
    strcat(filename,".csv");
   b5b70:	4943      	ldr	r1, [pc, #268]	; (b5c80 <setup+0x370>)
   b5b72:	4841      	ldr	r0, [pc, #260]	; (b5c78 <setup+0x368>)
   b5b74:	f00d ff3a 	bl	c39ec <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5b78:	4942      	ldr	r1, [pc, #264]	; (b5c84 <setup+0x374>)
   b5b7a:	4840      	ldr	r0, [pc, #256]	; (b5c7c <setup+0x36c>)
   b5b7c:	f00d ff36 	bl	c39ec <strcat>
    Serial.println(filename);
   b5b80:	f00b fb16 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5b84:	493c      	ldr	r1, [pc, #240]	; (b5c78 <setup+0x368>)
   b5b86:	f00a fe6a 	bl	c085e <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5b8a:	f00b fb11 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5b8e:	493b      	ldr	r1, [pc, #236]	; (b5c7c <setup+0x36c>)
   b5b90:	f00a fe65 	bl	c085e <_ZN5Print7printlnEPKc>
    watchdog.start();
   b5b94:	483c      	ldr	r0, [pc, #240]	; (b5c88 <setup+0x378>)
   b5b96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5b9a:	f7fe fb8d 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    motionTimer.start();
   b5b9e:	483b      	ldr	r0, [pc, #236]	; (b5c8c <setup+0x37c>)
   b5ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5ba4:	f7fe fb88 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5ba8:	4839      	ldr	r0, [pc, #228]	; (b5c90 <setup+0x380>)
   b5baa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bae:	f7fe fb83 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b5bb2:	4838      	ldr	r0, [pc, #224]	; (b5c94 <setup+0x384>)
   b5bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5bb8:	f7fe fb7e 	bl	b42b8 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b5bbc:	4b36      	ldr	r3, [pc, #216]	; (b5c98 <setup+0x388>)
   b5bbe:	930d      	str	r3, [sp, #52]	; 0x34
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b5bc0:	4836      	ldr	r0, [pc, #216]	; (b5c9c <setup+0x38c>)
   b5bc2:	4b37      	ldr	r3, [pc, #220]	; (b5ca0 <setup+0x390>)
   b5bc4:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
   b5bc8:	aa0d      	add	r2, sp, #52	; 0x34
   b5bca:	2108      	movs	r1, #8
   b5bcc:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   b5bd0:	930f      	str	r3, [sp, #60]	; 0x3c
   b5bd2:	f7fe fd5d 	bl	b4690 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5bd6:	4604      	mov	r4, r0
   b5bd8:	2800      	cmp	r0, #0
   b5bda:	d167      	bne.n	b5cac <setup+0x39c>
        Serial.println("Error: could not connect to SD card!");
   b5bdc:	f00b fae8 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5be0:	4930      	ldr	r1, [pc, #192]	; (b5ca4 <setup+0x394>)
   b5be2:	f00a fe3c 	bl	c085e <_ZN5Print7printlnEPKc>
        logSensors = false;
   b5be6:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b5be8:	7034      	strb	r4, [r6, #0]
}
   b5bea:	b013      	add	sp, #76	; 0x4c
   b5bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5bf0:	f007 ff92 	bl	bdb18 <_ZNK8particle7BleUuid8rawBytesEv>
   b5bf4:	9400      	str	r4, [sp, #0]
   b5bf6:	4602      	mov	r2, r0
   b5bf8:	2310      	movs	r3, #16
   b5bfa:	2107      	movs	r1, #7
   b5bfc:	e748      	b.n	b5a90 <setup+0x180>
    else Serial.println("LIS3MDL Found!");
   b5bfe:	f00b fad7 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5c02:	4929      	ldr	r1, [pc, #164]	; (b5ca8 <setup+0x398>)
   b5c04:	e769      	b.n	b5ada <setup+0x1ca>
   b5c06:	bf00      	nop
   b5c08:	2003e594 	.word	0x2003e594
   b5c0c:	2003e58c 	.word	0x2003e58c
   b5c10:	2003e58d 	.word	0x2003e58d
   b5c14:	2003dd94 	.word	0x2003dd94
   b5c18:	2003dda4 	.word	0x2003dda4
   b5c1c:	2003df0d 	.word	0x2003df0d
   b5c20:	2003df0c 	.word	0x2003df0c
   b5c24:	2003e588 	.word	0x2003e588
   b5c28:	2003ddec 	.word	0x2003ddec
   b5c2c:	2003de34 	.word	0x2003de34
   b5c30:	2003ddc8 	.word	0x2003ddc8
   b5c34:	2003dd90 	.word	0x2003dd90
   b5c38:	2003ddf0 	.word	0x2003ddf0
   b5c3c:	2003e0e8 	.word	0x2003e0e8
   b5c40:	2003e0e9 	.word	0x2003e0e9
   b5c44:	2003ddb6 	.word	0x2003ddb6
   b5c48:	2003dde0 	.word	0x2003dde0
   b5c4c:	2003e5e8 	.word	0x2003e5e8
   b5c50:	2003e0ec 	.word	0x2003e0ec
   b5c54:	2003e0e0 	.word	0x2003e0e0
   b5c58:	2003dd85 	.word	0x2003dd85
   b5c5c:	2003db80 	.word	0x2003db80
   b5c60:	2003ddd0 	.word	0x2003ddd0
   b5c64:	00061a80 	.word	0x00061a80
   b5c68:	2003de58 	.word	0x2003de58
   b5c6c:	000c5f8e 	.word	0x000c5f8e
   b5c70:	000c5dcb 	.word	0x000c5dcb
   b5c74:	000c5fb9 	.word	0x000c5fb9
   b5c78:	2003ddf2 	.word	0x2003ddf2
   b5c7c:	2003de10 	.word	0x2003de10
   b5c80:	000c5ed9 	.word	0x000c5ed9
   b5c84:	000c5fc2 	.word	0x000c5fc2
   b5c88:	2003e5f4 	.word	0x2003e5f4
   b5c8c:	2003df18 	.word	0x2003df18
   b5c90:	2003de3c 	.word	0x2003de3c
   b5c94:	2003e5b8 	.word	0x2003e5b8
   b5c98:	000c6080 	.word	0x000c6080
   b5c9c:	2003e0f4 	.word	0x2003e0f4
   b5ca0:	007a1200 	.word	0x007a1200
   b5ca4:	000c5fcb 	.word	0x000c5fcb
   b5ca8:	000c5faa 	.word	0x000c5faa
    if(logSensors){
   b5cac:	783b      	ldrb	r3, [r7, #0]
   b5cae:	b17b      	cbz	r3, b5cd0 <setup+0x3c0>
   b5cb0:	4812      	ldr	r0, [pc, #72]	; (b5cfc <setup+0x3ec>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b5cb2:	7c03      	ldrb	r3, [r0, #16]
   b5cb4:	b92b      	cbnz	r3, b5cc2 <setup+0x3b2>
   b5cb6:	4912      	ldr	r1, [pc, #72]	; (b5d00 <setup+0x3f0>)
   b5cb8:	f244 2202 	movw	r2, #16898	; 0x4202
   b5cbc:	3010      	adds	r0, #16
   b5cbe:	f7fe fc73 	bl	b45a8 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5cc2:	4910      	ldr	r1, [pc, #64]	; (b5d04 <setup+0x3f4>)
   b5cc4:	480d      	ldr	r0, [pc, #52]	; (b5cfc <setup+0x3ec>)
   b5cc6:	f00a fdca 	bl	c085e <_ZN5Print7printlnEPKc>
        myFile.close();
   b5cca:	480f      	ldr	r0, [pc, #60]	; (b5d08 <setup+0x3f8>)
   b5ccc:	f000 fc72 	bl	b65b4 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5cd0:	7833      	ldrb	r3, [r6, #0]
   b5cd2:	2b00      	cmp	r3, #0
   b5cd4:	d089      	beq.n	b5bea <setup+0x2da>
   b5cd6:	480d      	ldr	r0, [pc, #52]	; (b5d0c <setup+0x3fc>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5cd8:	7c03      	ldrb	r3, [r0, #16]
   b5cda:	b92b      	cbnz	r3, b5ce8 <setup+0x3d8>
   b5cdc:	490c      	ldr	r1, [pc, #48]	; (b5d10 <setup+0x400>)
   b5cde:	f244 2202 	movw	r2, #16898	; 0x4202
   b5ce2:	3010      	adds	r0, #16
   b5ce4:	f7fe fc60 	bl	b45a8 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5ce8:	490a      	ldr	r1, [pc, #40]	; (b5d14 <setup+0x404>)
   b5cea:	4808      	ldr	r0, [pc, #32]	; (b5d0c <setup+0x3fc>)
   b5cec:	2201      	movs	r2, #1
   b5cee:	f7fe fb33 	bl	b4358 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5cf2:	4809      	ldr	r0, [pc, #36]	; (b5d18 <setup+0x408>)
   b5cf4:	f000 fc5e 	bl	b65b4 <_ZN7FatFile5closeEv>
}
   b5cf8:	e777      	b.n	b5bea <setup+0x2da>
   b5cfa:	bf00      	nop
   b5cfc:	2003df34 	.word	0x2003df34
   b5d00:	2003ddf2 	.word	0x2003ddf2
   b5d04:	000c5ff0 	.word	0x000c5ff0
   b5d08:	2003df44 	.word	0x2003df44
   b5d0c:	2003deb4 	.word	0x2003deb4
   b5d10:	2003de10 	.word	0x2003de10
   b5d14:	000c6046 	.word	0x000c6046
   b5d18:	2003dec4 	.word	0x2003dec4

000b5d1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5d1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d20:	4604      	mov	r4, r0
   b5d22:	460d      	mov	r5, r1
   b5d24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d26:	d916      	bls.n	b5d56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5d28:	4290      	cmp	r0, r2
   b5d2a:	d215      	bcs.n	b5d58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5d2c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5d30:	1a75      	subs	r5, r6, r1
   b5d32:	f1a1 0714 	sub.w	r7, r1, #20
   b5d36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d38:	42b7      	cmp	r7, r6
   b5d3a:	d01c      	beq.n	b5d76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5d3c:	b12c      	cbz	r4, b5d4a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5d3e:	4631      	mov	r1, r6
   b5d40:	4620      	mov	r0, r4
   b5d42:	f00b f835 	bl	c0db0 <_ZN6StringC1EOS_>
   b5d46:	7c33      	ldrb	r3, [r6, #16]
   b5d48:	7423      	strb	r3, [r4, #16]
   b5d4a:	4630      	mov	r0, r6
   b5d4c:	f00a ffb4 	bl	c0cb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d50:	3e14      	subs	r6, #20
   b5d52:	3c14      	subs	r4, #20
   b5d54:	e7f0      	b.n	b5d38 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d56:	d00e      	beq.n	b5d76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5d58:	42b5      	cmp	r5, r6
   b5d5a:	d00c      	beq.n	b5d76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5d5c:	b12c      	cbz	r4, b5d6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5d5e:	4629      	mov	r1, r5
   b5d60:	4620      	mov	r0, r4
   b5d62:	f00b f825 	bl	c0db0 <_ZN6StringC1EOS_>
   b5d66:	7c2b      	ldrb	r3, [r5, #16]
   b5d68:	7423      	strb	r3, [r4, #16]
   b5d6a:	4628      	mov	r0, r5
   b5d6c:	f00a ffa4 	bl	c0cb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d70:	3514      	adds	r5, #20
   b5d72:	3414      	adds	r4, #20
   b5d74:	e7f0      	b.n	b5d58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5d7c:	2300      	movs	r3, #0
   b5d7e:	e9c0 3300 	strd	r3, r3, [r0]
   b5d82:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d84:	684f      	ldr	r7, [r1, #4]
   b5d86:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d88:	4604      	mov	r4, r0
   b5d8a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d8c:	dd23      	ble.n	b5dd6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5d8e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5d92:	fb08 f007 	mul.w	r0, r8, r7
   b5d96:	f007 fcb5 	bl	bd704 <malloc>
            if (!d) {
   b5d9a:	4605      	mov	r5, r0
   b5d9c:	b1d8      	cbz	r0, b5dd6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5d9e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5da2:	fb08 1202 	mla	r2, r8, r2, r1
   b5da6:	f7ff ffb9 	bl	b5d1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5daa:	6820      	ldr	r0, [r4, #0]
   b5dac:	f007 fcb2 	bl	bd714 <free>
        data_ = d;
   b5db0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5db2:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5db4:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5db8:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5dbc:	45b8      	cmp	r8, r7
   b5dbe:	d008      	beq.n	b5dd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5dc0:	4639      	mov	r1, r7
   b5dc2:	4628      	mov	r0, r5
   b5dc4:	f00b f80e 	bl	c0de4 <_ZN6StringC1ERKS_>
   b5dc8:	7c3b      	ldrb	r3, [r7, #16]
   b5dca:	742b      	strb	r3, [r5, #16]
   b5dcc:	3714      	adds	r7, #20
   b5dce:	3514      	adds	r5, #20
   b5dd0:	e7f4      	b.n	b5dbc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5dd2:	6873      	ldr	r3, [r6, #4]
   b5dd4:	6063      	str	r3, [r4, #4]
}
   b5dd6:	4620      	mov	r0, r4
   b5dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5ddc <_GLOBAL__sub_I_SystemMode>:
   b5ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b5dde:	4b77      	ldr	r3, [pc, #476]	; (b5fbc <_GLOBAL__sub_I_SystemMode+0x1e0>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b5de0:	4a77      	ldr	r2, [pc, #476]	; (b5fc0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
  explicit SdFat(SPIClass* spiPort) {
   b5de2:	4c78      	ldr	r4, [pc, #480]	; (b5fc4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b5de4:	2601      	movs	r6, #1
   b5de6:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5de8:	4b77      	ldr	r3, [pc, #476]	; (b5fc8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b5dea:	2500      	movs	r5, #0
   b5dec:	e9c3 5500 	strd	r5, r5, [r3]
    SleepResult() {}
   b5df0:	609a      	str	r2, [r3, #8]
   b5df2:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5df4:	2003      	movs	r0, #3
   b5df6:	f007 fbb1 	bl	bd55c <set_system_mode>
SFE_UBLOX_GNSS myGPS;
   b5dfa:	4874      	ldr	r0, [pc, #464]	; (b5fcc <_GLOBAL__sub_I_SystemMode+0x1f0>)
   b5dfc:	f001 ff68 	bl	b7cd0 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;
   b5e00:	4873      	ldr	r0, [pc, #460]	; (b5fd0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b5e02:	f001 fd4f 	bl	b78a4 <_ZN16Adafruit_LIS3MDLC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b5e06:	f7ff fd55 	bl	b58b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5e0a:	2364      	movs	r3, #100	; 0x64
   b5e0c:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b5e10:	4b70      	ldr	r3, [pc, #448]	; (b5fd4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   b5e12:	6065      	str	r5, [r4, #4]
   b5e14:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b5e18:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b5e1c:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b5e20:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b5e24:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b5e28:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5e2c:	b908      	cbnz	r0, b5e32 <_GLOBAL__sub_I_SystemMode+0x56>
   b5e2e:	f7ff fd41 	bl	b58b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5e32:	4b69      	ldr	r3, [pc, #420]	; (b5fd8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
  File() {}
   b5e34:	4a69      	ldr	r2, [pc, #420]	; (b5fdc <_GLOBAL__sub_I_SystemMode+0x200>)
   b5e36:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e3a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b5e3e:	2400      	movs	r4, #0
   b5e40:	601a      	str	r2, [r3, #0]
   b5e42:	e9c3 4701 	strd	r4, r7, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5e46:	611c      	str	r4, [r3, #16]
   b5e48:	4b65      	ldr	r3, [pc, #404]	; (b5fe0 <_GLOBAL__sub_I_SystemMode+0x204>)
        capacity_(0) {
   b5e4a:	9407      	str	r4, [sp, #28]
   b5e4c:	601a      	str	r2, [r3, #0]
   b5e4e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e52:	611c      	str	r4, [r3, #16]
   b5e54:	4b63      	ldr	r3, [pc, #396]	; (b5fe4 <_GLOBAL__sub_I_SystemMode+0x208>)
        filter_(level, filters) {
   b5e56:	4d64      	ldr	r5, [pc, #400]	; (b5fe8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b5e58:	601a      	str	r2, [r3, #0]
   b5e5a:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5e5e:	611c      	str	r4, [r3, #16]
   b5e60:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5e64:	f00b f9a4 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5e68:	a905      	add	r1, sp, #20
   b5e6a:	4606      	mov	r6, r0
   b5e6c:	a808      	add	r0, sp, #32
   b5e6e:	f7ff ff83 	bl	b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5e72:	a908      	add	r1, sp, #32
   b5e74:	a80b      	add	r0, sp, #44	; 0x2c
   b5e76:	f7ff ff7f 	bl	b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5e7a:	4b5c      	ldr	r3, [pc, #368]	; (b5fec <_GLOBAL__sub_I_SystemMode+0x210>)
   b5e7c:	602b      	str	r3, [r5, #0]
   b5e7e:	a90b      	add	r1, sp, #44	; 0x2c
   b5e80:	a80e      	add	r0, sp, #56	; 0x38
   b5e82:	f7ff ff79 	bl	b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5e86:	aa0e      	add	r2, sp, #56	; 0x38
   b5e88:	211e      	movs	r1, #30
   b5e8a:	1d28      	adds	r0, r5, #4
   b5e8c:	f00a f90e 	bl	c00ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e90:	a80e      	add	r0, sp, #56	; 0x38
   b5e92:	f7ff fcdd 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5e96:	a80b      	add	r0, sp, #44	; 0x2c
   b5e98:	f7ff fcda 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e9c:	4b54      	ldr	r3, [pc, #336]	; (b5ff0 <_GLOBAL__sub_I_SystemMode+0x214>)
   b5e9e:	602b      	str	r3, [r5, #0]
   b5ea0:	622e      	str	r6, [r5, #32]
   b5ea2:	a808      	add	r0, sp, #32
   b5ea4:	f7ff fcd4 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5ea8:	4b52      	ldr	r3, [pc, #328]	; (b5ff4 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5eaa:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5eac:	f00b f980 	bl	c11b0 <_Z16_fetch_usbserialv>
   b5eb0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5eb4:	f00b f96c 	bl	c1190 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5eb8:	f009 fdda 	bl	bfa70 <_ZN5spark10LogManager8instanceEv>
   b5ebc:	4629      	mov	r1, r5
   b5ebe:	f009 ffcb 	bl	bfe58 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5ec2:	a805      	add	r0, sp, #20
   b5ec4:	f7ff fcc4 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b5ec8:	484b      	ldr	r0, [pc, #300]	; (b5ff8 <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5eca:	4d4c      	ldr	r5, [pc, #304]	; (b5ffc <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5ecc:	4e4c      	ldr	r6, [pc, #304]	; (b6000 <_GLOBAL__sub_I_SystemMode+0x224>)
Servo ESCL; 
   b5ece:	f00a fd61 	bl	c0994 <_ZN5ServoC1Ev>
Servo ESCR;
   b5ed2:	484c      	ldr	r0, [pc, #304]	; (b6004 <_GLOBAL__sub_I_SystemMode+0x228>)
   b5ed4:	f00a fd5e 	bl	c0994 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b5ed8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5edc:	682b      	ldr	r3, [r5, #0]
   b5ede:	9300      	str	r3, [sp, #0]
   b5ee0:	4b49      	ldr	r3, [pc, #292]	; (b6008 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b5ee2:	494a      	ldr	r1, [pc, #296]	; (b600c <_GLOBAL__sub_I_SystemMode+0x230>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	484a      	ldr	r0, [pc, #296]	; (b6010 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5ee8:	f04f 0210 	mov.w	r2, #16
   b5eec:	f7ff fcc3 	bl	b5876 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b5ef0:	4b48      	ldr	r3, [pc, #288]	; (b6014 <_GLOBAL__sub_I_SystemMode+0x238>)
   b5ef2:	9402      	str	r4, [sp, #8]
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	682b      	ldr	r3, [r5, #0]
   b5ef8:	9300      	str	r3, [sp, #0]
   b5efa:	4b47      	ldr	r3, [pc, #284]	; (b6018 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b5efc:	4947      	ldr	r1, [pc, #284]	; (b601c <_GLOBAL__sub_I_SystemMode+0x240>)
   b5efe:	681b      	ldr	r3, [r3, #0]
   b5f00:	4847      	ldr	r0, [pc, #284]	; (b6020 <_GLOBAL__sub_I_SystemMode+0x244>)
   b5f02:	f04f 0204 	mov.w	r2, #4
   b5f06:	f7ff fcb6 	bl	b5876 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5f0a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5f0e:	682b      	ldr	r3, [r5, #0]
   b5f10:	9300      	str	r3, [sp, #0]
   b5f12:	4b44      	ldr	r3, [pc, #272]	; (b6024 <_GLOBAL__sub_I_SystemMode+0x248>)
   b5f14:	4944      	ldr	r1, [pc, #272]	; (b6028 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b5f16:	681b      	ldr	r3, [r3, #0]
   b5f18:	4844      	ldr	r0, [pc, #272]	; (b602c <_GLOBAL__sub_I_SystemMode+0x250>)
	    _M_manager = &_My_handler::_M_manager;
   b5f1a:	4d45      	ldr	r5, [pc, #276]	; (b6030 <_GLOBAL__sub_I_SystemMode+0x254>)
   b5f1c:	f04f 0210 	mov.w	r2, #16
   b5f20:	f7ff fca9 	bl	b5876 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5f24:	4843      	ldr	r0, [pc, #268]	; (b6034 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5f26:	f008 fa00 	bl	be32a <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f2a:	4b43      	ldr	r3, [pc, #268]	; (b6038 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b5f2c:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5f2e:	aa0e      	add	r2, sp, #56	; 0x38
   b5f30:	4623      	mov	r3, r4
   b5f32:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f36:	4841      	ldr	r0, [pc, #260]	; (b603c <_GLOBAL__sub_I_SystemMode+0x260>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f38:	9611      	str	r6, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5f3a:	9510      	str	r5, [sp, #64]	; 0x40
   b5f3c:	f7fe fa8c 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f40:	a80e      	add	r0, sp, #56	; 0x38
   b5f42:	f7fe fa4b 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f46:	4b3e      	ldr	r3, [pc, #248]	; (b6040 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5f48:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5f4a:	aa0e      	add	r2, sp, #56	; 0x38
   b5f4c:	4623      	mov	r3, r4
   b5f4e:	4639      	mov	r1, r7
   b5f50:	483c      	ldr	r0, [pc, #240]	; (b6044 <_GLOBAL__sub_I_SystemMode+0x268>)
	    _M_manager = &_My_handler::_M_manager;
   b5f52:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f56:	f7fe fa7f 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f5a:	a80e      	add	r0, sp, #56	; 0x38
   b5f5c:	f7fe fa3e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f60:	4b39      	ldr	r3, [pc, #228]	; (b6048 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b5f62:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);
   b5f64:	aa0e      	add	r2, sp, #56	; 0x38
   b5f66:	4623      	mov	r3, r4
   b5f68:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b5f6c:	4837      	ldr	r0, [pc, #220]	; (b604c <_GLOBAL__sub_I_SystemMode+0x270>)
	    _M_manager = &_My_handler::_M_manager;
   b5f6e:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f72:	f7fe fa71 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f76:	a80e      	add	r0, sp, #56	; 0x38
   b5f78:	f7fe fa30 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f7c:	4b34      	ldr	r3, [pc, #208]	; (b6050 <_GLOBAL__sub_I_SystemMode+0x274>)
   b5f7e:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5f80:	aa0e      	add	r2, sp, #56	; 0x38
   b5f82:	4623      	mov	r3, r4
   b5f84:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5f88:	4832      	ldr	r0, [pc, #200]	; (b6054 <_GLOBAL__sub_I_SystemMode+0x278>)
	    _M_manager = &_My_handler::_M_manager;
   b5f8a:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
   b5f8e:	f7fe fa63 	bl	b4458 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f92:	a80e      	add	r0, sp, #56	; 0x38
   b5f94:	f7fe fa22 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5f98:	4622      	mov	r2, r4
   b5f9a:	2114      	movs	r1, #20
   b5f9c:	2001      	movs	r0, #1
   b5f9e:	f007 fb05 	bl	bd5ac <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5fa2:	2201      	movs	r2, #1
   b5fa4:	2114      	movs	r1, #20
   b5fa6:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5faa:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5fac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5fb0:	4829      	ldr	r0, [pc, #164]	; (b6058 <_GLOBAL__sub_I_SystemMode+0x27c>)
   b5fb2:	f009 fbdf 	bl	bf774 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
   b5fb6:	b013      	add	sp, #76	; 0x4c
   b5fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5fba:	bf00      	nop
   b5fbc:	2003ddcc 	.word	0x2003ddcc
   b5fc0:	ffff0000 	.word	0xffff0000
   b5fc4:	2003e0f4 	.word	0x2003e0f4
   b5fc8:	2003ddb8 	.word	0x2003ddb8
   b5fcc:	2003df68 	.word	0x2003df68
   b5fd0:	2003de58 	.word	0x2003de58
   b5fd4:	000c6080 	.word	0x000c6080
   b5fd8:	2003df34 	.word	0x2003df34
   b5fdc:	000c60ec 	.word	0x000c60ec
   b5fe0:	2003deb4 	.word	0x2003deb4
   b5fe4:	2003de80 	.word	0x2003de80
   b5fe8:	2003dee8 	.word	0x2003dee8
   b5fec:	000c60a8 	.word	0x000c60a8
   b5ff0:	000c7254 	.word	0x000c7254
   b5ff4:	000c60d4 	.word	0x000c60d4
   b5ff8:	2003dd94 	.word	0x2003dd94
   b5ffc:	2003db80 	.word	0x2003db80
   b6000:	000b4235 	.word	0x000b4235
   b6004:	2003dda4 	.word	0x2003dda4
   b6008:	2003db8c 	.word	0x2003db8c
   b600c:	000c606b 	.word	0x000c606b
   b6010:	2003e5e8 	.word	0x2003e5e8
   b6014:	000b4a69 	.word	0x000b4a69
   b6018:	2003db88 	.word	0x2003db88
   b601c:	000c606e 	.word	0x000c606e
   b6020:	2003e0ec 	.word	0x2003e0ec
   b6024:	2003db84 	.word	0x2003db84
   b6028:	000c6071 	.word	0x000c6071
   b602c:	2003e0e0 	.word	0x2003e0e0
   b6030:	000b4221 	.word	0x000b4221
   b6034:	2003ddd0 	.word	0x2003ddd0
   b6038:	000b45b9 	.word	0x000b45b9
   b603c:	2003e5f4 	.word	0x2003e5f4
   b6040:	000b44d1 	.word	0x000b44d1
   b6044:	2003de3c 	.word	0x2003de3c
   b6048:	000b4375 	.word	0x000b4375
   b604c:	2003df18 	.word	0x2003df18
   b6050:	000b40fd 	.word	0x000b40fd
   b6054:	2003e5b8 	.word	0x2003e5b8
   b6058:	2003e594 	.word	0x2003e594

000b605c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b605c:	b538      	push	{r3, r4, r5, lr}
   b605e:	4604      	mov	r4, r0
   b6060:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6062:	2224      	movs	r2, #36	; 0x24
   b6064:	2100      	movs	r1, #0
   b6066:	f00d fc8b 	bl	c3980 <memset>

  m_vol = vol;
   b606a:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b606c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b606e:	2b10      	cmp	r3, #16
   b6070:	d003      	beq.n	b607a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6072:	2b20      	cmp	r3, #32
   b6074:	d006      	beq.n	b6084 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6076:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6078:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b607a:	2320      	movs	r3, #32
  m_flags = F_READ;
   b607c:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b607e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6080:	70a0      	strb	r0, [r4, #2]
  return true;
   b6082:	e7f9      	b.n	b6078 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6084:	2340      	movs	r3, #64	; 0x40
   b6086:	e7f9      	b.n	b607c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6088 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6088:	b510      	push	{r4, lr}
   b608a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b608c:	3024      	adds	r0, #36	; 0x24
   b608e:	f000 ff66 	bl	b6f5e <_ZN8FatCache4syncEv>
   b6092:	b128      	cbz	r0, b60a0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b6094:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b609c:	f000 bf5f 	b.w	b6f5e <_ZN8FatCache4syncEv>
  }
   b60a0:	bd10      	pop	{r4, pc}

000b60a2 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b60a2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b60a4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b60a6:	f043 0304 	orr.w	r3, r3, #4
   b60aa:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b60ac:	f100 0210 	add.w	r2, r0, #16
   b60b0:	6880      	ldr	r0, [r0, #8]
   b60b2:	f001 b80a 	b.w	b70ca <_ZN9FatVolume15allocateClusterEmPm>
	...

000b60b8 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b60b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b60bc:	7801      	ldrb	r1, [r0, #0]
   b60be:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b60c2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b60c4:	d003      	beq.n	b60ce <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b60c6:	2600      	movs	r6, #0
}
   b60c8:	4630      	mov	r0, r6
   b60ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b60ce:	6942      	ldr	r2, [r0, #20]
   b60d0:	4b17      	ldr	r3, [pc, #92]	; (b6130 <_ZN7FatFile13addDirClusterEv+0x78>)
   b60d2:	429a      	cmp	r2, r3
   b60d4:	d2f7      	bcs.n	b60c6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b60d6:	f7ff ffe4 	bl	b60a2 <_ZN7FatFile10addClusterEv>
   b60da:	4606      	mov	r6, r0
   b60dc:	2800      	cmp	r0, #0
   b60de:	d0f2      	beq.n	b60c6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b60e0:	6921      	ldr	r1, [r4, #16]
   b60e2:	68a0      	ldr	r0, [r4, #8]
   b60e4:	f000 ff86 	bl	b6ff4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b60e8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b60ea:	68a0      	ldr	r0, [r4, #8]
   b60ec:	2205      	movs	r2, #5
   b60ee:	4639      	mov	r1, r7
   b60f0:	3024      	adds	r0, #36	; 0x24
   b60f2:	f000 ff5c 	bl	b6fae <_ZN8FatCache4readEmh>
  if (!pc) {
   b60f6:	4680      	mov	r8, r0
   b60f8:	2800      	cmp	r0, #0
   b60fa:	d0e4      	beq.n	b60c6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b60fc:	4629      	mov	r1, r5
   b60fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6102:	f00d fc3d 	bl	c3980 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6106:	2501      	movs	r5, #1
   b6108:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b610a:	791a      	ldrb	r2, [r3, #4]
   b610c:	42aa      	cmp	r2, r5
   b610e:	d909      	bls.n	b6124 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6110:	6818      	ldr	r0, [r3, #0]
   b6112:	4642      	mov	r2, r8
   b6114:	19e9      	adds	r1, r5, r7
   b6116:	f001 fab6 	bl	b7686 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b611a:	2800      	cmp	r0, #0
   b611c:	d0d3      	beq.n	b60c6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b611e:	3501      	adds	r5, #1
   b6120:	b2ed      	uxtb	r5, r5
   b6122:	e7f1      	b.n	b6108 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6124:	6963      	ldr	r3, [r4, #20]
   b6126:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b612a:	6163      	str	r3, [r4, #20]
  return true;
   b612c:	e7cc      	b.n	b60c8 <_ZN7FatFile13addDirClusterEv+0x10>
   b612e:	bf00      	nop
   b6130:	001ffe00 	.word	0x001ffe00

000b6134 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6134:	b510      	push	{r4, lr}
   b6136:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6138:	6880      	ldr	r0, [r0, #8]
   b613a:	460a      	mov	r2, r1
   b613c:	3024      	adds	r0, #36	; 0x24
   b613e:	69a1      	ldr	r1, [r4, #24]
   b6140:	f000 ff35 	bl	b6fae <_ZN8FatCache4readEmh>
  if (!pc) {
   b6144:	b120      	cbz	r0, b6150 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b6146:	88a3      	ldrh	r3, [r4, #4]
   b6148:	f003 030f 	and.w	r3, r3, #15
   b614c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b6150:	bd10      	pop	{r4, pc}

000b6152 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b6152:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b6154:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6156:	4604      	mov	r4, r0
   b6158:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b615a:	2608      	movs	r6, #8
  uint8_t j = 0;
   b615c:	4618      	mov	r0, r3
      name[j++] = '.';
   b615e:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6160:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b6164:	2a20      	cmp	r2, #32
   b6166:	d018      	beq.n	b619a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6168:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b616a:	bf02      	ittt	eq
   b616c:	540f      	strbeq	r7, [r1, r0]
   b616e:	1c42      	addeq	r2, r0, #1
   b6170:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b6172:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6174:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b6178:	bf08      	it	eq
   b617a:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b617c:	f1bc 0f19 	cmp.w	ip, #25
   b6180:	d806      	bhi.n	b6190 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b6182:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6186:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b618a:	bf1c      	itt	ne
   b618c:	3220      	addne	r2, #32
   b618e:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6190:	f100 0c01 	add.w	ip, r0, #1
   b6194:	540a      	strb	r2, [r1, r0]
   b6196:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b619a:	3301      	adds	r3, #1
   b619c:	b2db      	uxtb	r3, r3
   b619e:	2b0b      	cmp	r3, #11
   b61a0:	d1de      	bne.n	b6160 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b61a2:	2300      	movs	r3, #0
   b61a4:	540b      	strb	r3, [r1, r0]
}
   b61a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b61a8 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b61a8:	7803      	ldrb	r3, [r0, #0]
   b61aa:	b90b      	cbnz	r3, b61b0 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b61ac:	f7ff bf56 	b.w	b605c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b61b0:	2000      	movs	r0, #0
   b61b2:	4770      	bx	lr

000b61b4 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b61b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b61b8:	7803      	ldrb	r3, [r0, #0]
   b61ba:	4604      	mov	r4, r0
   b61bc:	4688      	mov	r8, r1
   b61be:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b61c0:	2b00      	cmp	r3, #0
   b61c2:	d05d      	beq.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
   b61c4:	7882      	ldrb	r2, [r0, #2]
   b61c6:	07d1      	lsls	r1, r2, #31
   b61c8:	d55a      	bpl.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b61ca:	071a      	lsls	r2, r3, #28
   b61cc:	d52d      	bpl.n	b622a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b61ce:	69c3      	ldr	r3, [r0, #28]
   b61d0:	6942      	ldr	r2, [r0, #20]
   b61d2:	1a9b      	subs	r3, r3, r2
   b61d4:	429d      	cmp	r5, r3
   b61d6:	bf28      	it	cs
   b61d8:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b61da:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b61dc:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b61e0:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b61e4:	2e00      	cmp	r6, #0
   b61e6:	f000 808f 	beq.w	b6308 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b61ea:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b61ec:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61ee:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b61f0:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b61f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61f6:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b61fa:	d51f      	bpl.n	b623c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b61fc:	6a00      	ldr	r0, [r0, #32]
   b61fe:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b6200:	68a0      	ldr	r0, [r4, #8]
   b6202:	f1ba 0f00 	cmp.w	sl, #0
   b6206:	d142      	bne.n	b628e <_ZN7FatFile4readEPvj+0xda>
   b6208:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b620c:	d33f      	bcc.n	b628e <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b620e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6210:	4299      	cmp	r1, r3
   b6212:	d03c      	beq.n	b628e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6214:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6218:	d252      	bcs.n	b62c0 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b621a:	6800      	ldr	r0, [r0, #0]
   b621c:	4642      	mov	r2, r8
   b621e:	f001 f9a9 	bl	b7574 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b6222:	b368      	cbz	r0, b6280 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b6224:	f44f 7700 	mov.w	r7, #512	; 0x200
   b6228:	e044      	b.n	b62b4 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b622a:	069b      	lsls	r3, r3, #26
   b622c:	d5d5      	bpl.n	b61da <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b622e:	6883      	ldr	r3, [r0, #8]
   b6230:	891a      	ldrh	r2, [r3, #8]
   b6232:	6943      	ldr	r3, [r0, #20]
   b6234:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b6238:	b29b      	uxth	r3, r3
   b623a:	e7cb      	b.n	b61d4 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b623c:	f890 9005 	ldrb.w	r9, [r0, #5]
   b6240:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b6244:	f1ba 0f00 	cmp.w	sl, #0
   b6248:	d108      	bne.n	b625c <_ZN7FatFile4readEPvj+0xa8>
   b624a:	f1b9 0f00 	cmp.w	r9, #0
   b624e:	d105      	bne.n	b625c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b6250:	b95b      	cbnz	r3, b626a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6252:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b6254:	bf4c      	ite	mi
   b6256:	6a03      	ldrmi	r3, [r0, #32]
   b6258:	6a23      	ldrpl	r3, [r4, #32]
   b625a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b625c:	6921      	ldr	r1, [r4, #16]
   b625e:	68a0      	ldr	r0, [r4, #8]
   b6260:	f000 fec8 	bl	b6ff4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b6264:	eb09 0100 	add.w	r1, r9, r0
   b6268:	e7ca      	b.n	b6200 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b626a:	6921      	ldr	r1, [r4, #16]
   b626c:	465a      	mov	r2, fp
   b626e:	f000 fec7 	bl	b7000 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b6272:	2800      	cmp	r0, #0
   b6274:	db04      	blt.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b6276:	d1f1      	bne.n	b625c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6278:	7823      	ldrb	r3, [r4, #0]
   b627a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b627e:	d143      	bne.n	b6308 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6280:	7863      	ldrb	r3, [r4, #1]
   b6282:	f043 0302 	orr.w	r3, r3, #2
   b6286:	7063      	strb	r3, [r4, #1]
  return -1;
   b6288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b628c:	e03d      	b.n	b630a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b628e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b6292:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6294:	f04f 0200 	mov.w	r2, #0
   b6298:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b629c:	bf28      	it	cs
   b629e:	4637      	movcs	r7, r6
   b62a0:	f000 fe85 	bl	b6fae <_ZN8FatCache4readEmh>
      if (!pc) {
   b62a4:	2800      	cmp	r0, #0
   b62a6:	d0eb      	beq.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b62a8:	eb00 010a 	add.w	r1, r0, sl
   b62ac:	463a      	mov	r2, r7
   b62ae:	4640      	mov	r0, r8
   b62b0:	f00d fb3e 	bl	c3930 <memcpy>
    m_curPosition += n;
   b62b4:	6963      	ldr	r3, [r4, #20]
   b62b6:	443b      	add	r3, r7
    dst += n;
   b62b8:	44b8      	add	r8, r7
    m_curPosition += n;
   b62ba:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b62bc:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b62be:	e791      	b.n	b61e4 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b62c0:	7822      	ldrb	r2, [r4, #0]
   b62c2:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b62c4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b62c8:	d406      	bmi.n	b62d8 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b62ca:	7902      	ldrb	r2, [r0, #4]
   b62cc:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b62d0:	b2d2      	uxtb	r2, r2
   b62d2:	4592      	cmp	sl, r2
   b62d4:	bf28      	it	cs
   b62d6:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62d8:	4299      	cmp	r1, r3
      n = 512*nb;
   b62da:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62de:	d208      	bcs.n	b62f2 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b62e0:	68a0      	ldr	r0, [r4, #8]
   b62e2:	4653      	mov	r3, sl
   b62e4:	6800      	ldr	r0, [r0, #0]
   b62e6:	4642      	mov	r2, r8
   b62e8:	f001 f98c 	bl	b7604 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b62ec:	2800      	cmp	r0, #0
   b62ee:	d1e1      	bne.n	b62b4 <_ZN7FatFile4readEPvj+0x100>
   b62f0:	e7c6      	b.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b62f2:	4453      	add	r3, sl
   b62f4:	428b      	cmp	r3, r1
   b62f6:	d9f3      	bls.n	b62e0 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b62f8:	3024      	adds	r0, #36	; 0x24
   b62fa:	9101      	str	r1, [sp, #4]
   b62fc:	f000 fe2f 	bl	b6f5e <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b6300:	9901      	ldr	r1, [sp, #4]
   b6302:	2800      	cmp	r0, #0
   b6304:	d1ec      	bne.n	b62e0 <_ZN7FatFile4readEPvj+0x12c>
   b6306:	e7bb      	b.n	b6280 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6308:	1ba8      	subs	r0, r5, r6
}
   b630a:	b003      	add	sp, #12
   b630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6310 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b6310:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b6312:	2201      	movs	r2, #1
   b6314:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6318:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b631c:	4604      	mov	r4, r0
   b631e:	f7ff ff49 	bl	b61b4 <_ZN7FatFile4readEPvj>
   b6322:	2801      	cmp	r0, #1
   b6324:	bf0a      	itet	eq
   b6326:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b632a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b632e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b6332:	b002      	add	sp, #8
   b6334:	bd70      	pop	{r4, r5, r6, pc}

000b6336 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b6336:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6338:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b633a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b633e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b6340:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b6344:	d000      	beq.n	b6348 <_ZN7FatFile12readDirCacheEb+0x12>
   b6346:	b999      	cbnz	r1, b6370 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b6348:	2201      	movs	r2, #1
   b634a:	f10d 0107 	add.w	r1, sp, #7
   b634e:	4620      	mov	r0, r4
   b6350:	f7ff ff30 	bl	b61b4 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b6354:	b240      	sxtb	r0, r0
   b6356:	2801      	cmp	r0, #1
   b6358:	d002      	beq.n	b6360 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b635a:	2000      	movs	r0, #0
}
   b635c:	b003      	add	sp, #12
   b635e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6360:	6963      	ldr	r3, [r4, #20]
   b6362:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b6364:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b6366:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6368:	3030      	adds	r0, #48	; 0x30
   b636a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b636e:	e7f5      	b.n	b635c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6370:	3320      	adds	r3, #32
   b6372:	e7f7      	b.n	b6364 <_ZN7FatFile12readDirCacheEb+0x2e>

000b6374 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b6374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6378:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b637a:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b637c:	4604      	mov	r4, r0
   b637e:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6380:	b162      	cbz	r2, b639c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b6382:	6940      	ldr	r0, [r0, #20]
   b6384:	4288      	cmp	r0, r1
   b6386:	d002      	beq.n	b638e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6388:	b919      	cbnz	r1, b6392 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b638a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b638c:	6165      	str	r5, [r4, #20]
    return true;
   b638e:	2001      	movs	r0, #1
   b6390:	e006      	b.n	b63a0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b6392:	0716      	lsls	r6, r2, #28
   b6394:	d506      	bpl.n	b63a4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6396:	69e3      	ldr	r3, [r4, #28]
   b6398:	428b      	cmp	r3, r1
   b639a:	d20b      	bcs.n	b63b4 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b639c:	6127      	str	r7, [r4, #16]
  return false;
   b639e:	2000      	movs	r0, #0
}
   b63a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b63a4:	0691      	lsls	r1, r2, #26
   b63a6:	d505      	bpl.n	b63b4 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b63a8:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b63aa:	891b      	ldrh	r3, [r3, #8]
   b63ac:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b63b0:	d9ec      	bls.n	b638c <_ZN7FatFile7seekSetEm+0x18>
   b63b2:	e7f3      	b.n	b639c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b63b4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b63b8:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b63bc:	1e43      	subs	r3, r0, #1
   b63be:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63c2:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b63c4:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b63c6:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b63c8:	42b3      	cmp	r3, r6
   b63ca:	d800      	bhi.n	b63ce <_ZN7FatFile7seekSetEm+0x5a>
   b63cc:	b998      	cbnz	r0, b63f6 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b63ce:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b63d0:	bf4c      	ite	mi
   b63d2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b63d6:	6a23      	ldrpl	r3, [r4, #32]
   b63d8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63da:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b63de:	2e00      	cmp	r6, #0
   b63e0:	d0d4      	beq.n	b638c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b63e2:	6921      	ldr	r1, [r4, #16]
   b63e4:	68a0      	ldr	r0, [r4, #8]
   b63e6:	4642      	mov	r2, r8
   b63e8:	f000 fe0a 	bl	b7000 <_ZN9FatVolume6fatGetEmPm>
   b63ec:	2800      	cmp	r0, #0
   b63ee:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b63f2:	dcf4      	bgt.n	b63de <_ZN7FatFile7seekSetEm+0x6a>
   b63f4:	e7d2      	b.n	b639c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b63f6:	1af6      	subs	r6, r6, r3
   b63f8:	e7ef      	b.n	b63da <_ZN7FatFile7seekSetEm+0x66>

000b63fa <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b63fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63fc:	460f      	mov	r7, r1
   b63fe:	4604      	mov	r4, r0
   b6400:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b6402:	2100      	movs	r1, #0
   b6404:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6406:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6408:	f00d faba 	bl	c3980 <memset>
  m_vol = dirFile->m_vol;
   b640c:	68b8      	ldr	r0, [r7, #8]
   b640e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b6410:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b6412:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6416:	6a3b      	ldr	r3, [r7, #32]
   b6418:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b641a:	016a      	lsls	r2, r5, #5
   b641c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b6420:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6424:	071f      	lsls	r7, r3, #28
   b6426:	d444      	bmi.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b6428:	f003 0317 	and.w	r3, r3, #23
   b642c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b642e:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b6432:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b6436:	bf04      	itt	eq
   b6438:	f043 0308 	orreq.w	r3, r3, #8
   b643c:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b643e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b6442:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b6444:	f006 0303 	and.w	r3, r6, #3
   b6448:	2b01      	cmp	r3, #1
   b644a:	d02c      	beq.n	b64a6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b644c:	2b02      	cmp	r3, #2
   b644e:	d028      	beq.n	b64a2 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b6450:	bb7b      	cbnz	r3, b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b6452:	0571      	lsls	r1, r6, #21
   b6454:	d42d      	bmi.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b6456:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6458:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b645a:	78a1      	ldrb	r1, [r4, #2]
   b645c:	078b      	lsls	r3, r1, #30
   b645e:	d504      	bpl.n	b646a <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6460:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b6462:	06df      	lsls	r7, r3, #27
   b6464:	d425      	bmi.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b6466:	07dd      	lsls	r5, r3, #31
   b6468:	d423      	bmi.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b646a:	11b3      	asrs	r3, r6, #6
   b646c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6470:	f006 0508 	and.w	r5, r6, #8
   b6474:	432b      	orrs	r3, r5
   b6476:	430b      	orrs	r3, r1
   b6478:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b647a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b647c:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b647e:	1883      	adds	r3, r0, r2
   b6480:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6484:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b648c:	0572      	lsls	r2, r6, #21
   b648e:	d513      	bpl.n	b64b8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6490:	b959      	cbnz	r1, b64aa <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b6492:	78a3      	ldrb	r3, [r4, #2]
   b6494:	f043 0304 	orr.w	r3, r3, #4
   b6498:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b649a:	0473      	lsls	r3, r6, #17
   b649c:	d410      	bmi.n	b64c0 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b649e:	2001      	movs	r0, #1
}
   b64a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b64a2:	2303      	movs	r3, #3
   b64a4:	e7d8      	b.n	b6458 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b64a6:	2302      	movs	r3, #2
   b64a8:	e7d6      	b.n	b6458 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b64aa:	f000 fe49 	bl	b7140 <_ZN9FatVolume9freeChainEm>
   b64ae:	2800      	cmp	r0, #0
   b64b0:	d1ef      	bne.n	b6492 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b64b2:	2000      	movs	r0, #0
   b64b4:	7020      	strb	r0, [r4, #0]
  return false;
   b64b6:	e7f3      	b.n	b64a0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b64b8:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b64ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b64bc:	61e3      	str	r3, [r4, #28]
   b64be:	e7ec      	b.n	b649a <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b64c0:	69e1      	ldr	r1, [r4, #28]
   b64c2:	4620      	mov	r0, r4
   b64c4:	f7ff ff56 	bl	b6374 <_ZN7FatFile7seekSetEm>
   b64c8:	2800      	cmp	r0, #0
   b64ca:	d1e8      	bne.n	b649e <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b64cc:	e7f1      	b.n	b64b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b64ce <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b64ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b64d2:	7803      	ldrb	r3, [r0, #0]
   b64d4:	4607      	mov	r7, r0
   b64d6:	460d      	mov	r5, r1
   b64d8:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b64da:	bb53      	cbnz	r3, b6532 <_ZN7FatFile8openNextEPS_i+0x64>
   b64dc:	780b      	ldrb	r3, [r1, #0]
   b64de:	f013 0f70 	tst.w	r3, #112	; 0x70
   b64e2:	d026      	beq.n	b6532 <_ZN7FatFile8openNextEPS_i+0x64>
   b64e4:	694c      	ldr	r4, [r1, #20]
   b64e6:	f014 041f 	ands.w	r4, r4, #31
   b64ea:	d122      	bne.n	b6532 <_ZN7FatFile8openNextEPS_i+0x64>
   b64ec:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b64ee:	2100      	movs	r1, #0
   b64f0:	4628      	mov	r0, r5
    return m_curPosition;
   b64f2:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b64f6:	f7ff ff1e 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b64fa:	b1d0      	cbz	r0, b6532 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b64fc:	7806      	ldrb	r6, [r0, #0]
   b64fe:	b1c6      	cbz	r6, b6532 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b6500:	2e2e      	cmp	r6, #46	; 0x2e
   b6502:	d010      	beq.n	b6526 <_ZN7FatFile8openNextEPS_i+0x58>
   b6504:	2ee5      	cmp	r6, #229	; 0xe5
   b6506:	d00e      	beq.n	b6526 <_ZN7FatFile8openNextEPS_i+0x58>
   b6508:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b650a:	071a      	lsls	r2, r3, #28
   b650c:	d413      	bmi.n	b6536 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b650e:	b964      	cbnz	r4, b652a <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b6510:	9400      	str	r4, [sp, #0]
   b6512:	4653      	mov	r3, sl
   b6514:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6518:	4629      	mov	r1, r5
   b651a:	4638      	mov	r0, r7
   b651c:	f7ff ff6d 	bl	b63fa <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b6520:	b002      	add	sp, #8
   b6522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b6526:	2400      	movs	r4, #0
   b6528:	e7e1      	b.n	b64ee <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b652a:	f000 f971 	bl	b6810 <_ZN7FatFile11lfnChecksumEPh>
   b652e:	4540      	cmp	r0, r8
   b6530:	d0ee      	beq.n	b6510 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b6532:	2000      	movs	r0, #0
   b6534:	e7f4      	b.n	b6520 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6536:	2b0f      	cmp	r3, #15
   b6538:	d1f5      	bne.n	b6526 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b653a:	0673      	lsls	r3, r6, #25
   b653c:	d5d7      	bpl.n	b64ee <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b653e:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b6542:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b6546:	e7d2      	b.n	b64ee <_ZN7FatFile8openNextEPS_i+0x20>

000b6548 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b6548:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b654a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b654c:	4604      	mov	r4, r0
  if (!isOpen()) {
   b654e:	b90b      	cbnz	r3, b6554 <_ZN7FatFile4syncEv+0xc>
    return true;
   b6550:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b6552:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b6554:	7883      	ldrb	r3, [r0, #2]
   b6556:	075a      	lsls	r2, r3, #29
   b6558:	d523      	bpl.n	b65a2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b655a:	2101      	movs	r1, #1
   b655c:	f7ff fdea 	bl	b6134 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6560:	4605      	mov	r5, r0
   b6562:	b928      	cbnz	r0, b6570 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b6564:	7863      	ldrb	r3, [r4, #1]
   b6566:	f043 0301 	orr.w	r3, r3, #1
   b656a:	7063      	strb	r3, [r4, #1]
  return false;
   b656c:	2000      	movs	r0, #0
   b656e:	e7f0      	b.n	b6552 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6570:	7803      	ldrb	r3, [r0, #0]
   b6572:	2be5      	cmp	r3, #229	; 0xe5
   b6574:	d0f6      	beq.n	b6564 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b6576:	7823      	ldrb	r3, [r4, #0]
   b6578:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b657a:	bf44      	itt	mi
   b657c:	69e3      	ldrmi	r3, [r4, #28]
   b657e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6580:	6a23      	ldr	r3, [r4, #32]
   b6582:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6584:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6586:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6588:	4b09      	ldr	r3, [pc, #36]	; (b65b0 <_ZN7FatFile4syncEv+0x68>)
   b658a:	681b      	ldr	r3, [r3, #0]
   b658c:	b12b      	cbz	r3, b659a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b658e:	f100 0116 	add.w	r1, r0, #22
   b6592:	3018      	adds	r0, #24
   b6594:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6596:	8b2b      	ldrh	r3, [r5, #24]
   b6598:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b659a:	78a3      	ldrb	r3, [r4, #2]
   b659c:	f023 0304 	bic.w	r3, r3, #4
   b65a0:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b65a2:	68a0      	ldr	r0, [r4, #8]
   b65a4:	f7ff fd70 	bl	b6088 <_ZN9FatVolume9cacheSyncEv>
   b65a8:	2800      	cmp	r0, #0
   b65aa:	d0db      	beq.n	b6564 <_ZN7FatFile4syncEv+0x1c>
   b65ac:	e7d0      	b.n	b6550 <_ZN7FatFile4syncEv+0x8>
   b65ae:	bf00      	nop
   b65b0:	2003e610 	.word	0x2003e610

000b65b4 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b65b4:	b510      	push	{r4, lr}
   b65b6:	4604      	mov	r4, r0
  bool rtn = sync();
   b65b8:	f7ff ffc6 	bl	b6548 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b65bc:	2300      	movs	r3, #0
   b65be:	7023      	strb	r3, [r4, #0]
}
   b65c0:	bd10      	pop	{r4, pc}

000b65c2 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b65c4:	b093      	sub	sp, #76	; 0x4c
   b65c6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b65c8:	2300      	movs	r3, #0
   b65ca:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b65cc:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b65ce:	9201      	str	r2, [sp, #4]
   b65d0:	4606      	mov	r6, r0
   b65d2:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b65d4:	b113      	cbz	r3, b65dc <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b65d6:	2000      	movs	r0, #0
}
   b65d8:	b013      	add	sp, #76	; 0x4c
   b65da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b65dc:	780b      	ldrb	r3, [r1, #0]
   b65de:	f013 0f70 	tst.w	r3, #112	; 0x70
   b65e2:	d0f8      	beq.n	b65d6 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b65e4:	7813      	ldrb	r3, [r2, #0]
   b65e6:	2b2f      	cmp	r3, #47	; 0x2f
   b65e8:	d112      	bne.n	b6610 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b65ea:	9a01      	ldr	r2, [sp, #4]
   b65ec:	7813      	ldrb	r3, [r2, #0]
   b65ee:	2b2f      	cmp	r3, #47	; 0x2f
   b65f0:	d102      	bne.n	b65f8 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b65f2:	3201      	adds	r2, #1
   b65f4:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b65f6:	e7f8      	b.n	b65ea <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b65f8:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b65fa:	b91b      	cbnz	r3, b6604 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b65fc:	4630      	mov	r0, r6
   b65fe:	f7ff fdd3 	bl	b61a8 <_ZN7FatFile8openRootEP9FatVolume>
   b6602:	e7e9      	b.n	b65d8 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6604:	a809      	add	r0, sp, #36	; 0x24
   b6606:	f7ff fd29 	bl	b605c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b660a:	2800      	cmp	r0, #0
   b660c:	d0e3      	beq.n	b65d6 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b660e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b6610:	9801      	ldr	r0, [sp, #4]
   b6612:	aa01      	add	r2, sp, #4
   b6614:	a903      	add	r1, sp, #12
   b6616:	f000 f98f 	bl	b6938 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b661a:	2800      	cmp	r0, #0
   b661c:	d0db      	beq.n	b65d6 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b661e:	9b01      	ldr	r3, [sp, #4]
   b6620:	781b      	ldrb	r3, [r3, #0]
   b6622:	b19b      	cbz	r3, b664c <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6624:	2300      	movs	r3, #0
   b6626:	aa03      	add	r2, sp, #12
   b6628:	4621      	mov	r1, r4
   b662a:	4630      	mov	r0, r6
   b662c:	f000 fab6 	bl	b6b9c <_ZN7FatFile4openEPS_P7fname_ti>
   b6630:	2800      	cmp	r0, #0
   b6632:	d0d0      	beq.n	b65d6 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6634:	4635      	mov	r5, r6
   b6636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6638:	ac09      	add	r4, sp, #36	; 0x24
   b663a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b663e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6640:	682b      	ldr	r3, [r5, #0]
   b6642:	6023      	str	r3, [r4, #0]
    close();
   b6644:	4630      	mov	r0, r6
   b6646:	f7ff ffb5 	bl	b65b4 <_ZN7FatFile5closeEv>
  while (1) {
   b664a:	e7e0      	b.n	b660e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b664c:	463b      	mov	r3, r7
   b664e:	aa03      	add	r2, sp, #12
   b6650:	4621      	mov	r1, r4
   b6652:	4630      	mov	r0, r6
   b6654:	f000 faa2 	bl	b6b9c <_ZN7FatFile4openEPS_P7fname_ti>
   b6658:	e7be      	b.n	b65d8 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b665c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6660:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b6662:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6664:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6666:	4604      	mov	r4, r0
   b6668:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b666a:	d55b      	bpl.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
   b666c:	7883      	ldrb	r3, [r0, #2]
   b666e:	079a      	lsls	r2, r3, #30
   b6670:	d558      	bpl.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b6672:	071b      	lsls	r3, r3, #28
   b6674:	d451      	bmi.n	b671a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6676:	6963      	ldr	r3, [r4, #20]
   b6678:	43db      	mvns	r3, r3
   b667a:	42bb      	cmp	r3, r7
   b667c:	d352      	bcc.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
   b667e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6680:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6684:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6686:	f1b8 0f00 	cmp.w	r8, #0
   b668a:	f000 8091 	beq.w	b67b0 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b668e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6690:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b6692:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6696:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b669a:	d10e      	bne.n	b66ba <_ZN7FatFile5writeEPKvj+0x5e>
   b669c:	b96d      	cbnz	r5, b66ba <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b669e:	6921      	ldr	r1, [r4, #16]
   b66a0:	2900      	cmp	r1, #0
   b66a2:	d046      	beq.n	b6732 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b66a4:	4652      	mov	r2, sl
   b66a6:	f000 fcab 	bl	b7000 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b66aa:	2800      	cmp	r0, #0
   b66ac:	db3a      	blt.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b66ae:	d104      	bne.n	b66ba <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b66b0:	4620      	mov	r0, r4
   b66b2:	f7ff fcf6 	bl	b60a2 <_ZN7FatFile10addClusterEv>
   b66b6:	2800      	cmp	r0, #0
   b66b8:	d034      	beq.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b66ba:	6921      	ldr	r1, [r4, #16]
   b66bc:	68a0      	ldr	r0, [r4, #8]
   b66be:	f000 fc99 	bl	b6ff4 <_ZNK9FatVolume17clusterFirstBlockEm>
   b66c2:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b66c4:	68a0      	ldr	r0, [r4, #8]
   b66c6:	b915      	cbnz	r5, b66ce <_ZN7FatFile5writeEPKvj+0x72>
   b66c8:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b66cc:	d23f      	bcs.n	b674e <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b66ce:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b66d2:	4546      	cmp	r6, r8
   b66d4:	bf28      	it	cs
   b66d6:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b66d8:	2d00      	cmp	r5, #0
   b66da:	d136      	bne.n	b674a <_ZN7FatFile5writeEPKvj+0xee>
   b66dc:	6962      	ldr	r2, [r4, #20]
   b66de:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b66e0:	429a      	cmp	r2, r3
   b66e2:	bf34      	ite	cc
   b66e4:	2201      	movcc	r2, #1
   b66e6:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b66e8:	3024      	adds	r0, #36	; 0x24
   b66ea:	f000 fc60 	bl	b6fae <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b66ee:	b1c8      	cbz	r0, b6724 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b66f0:	4428      	add	r0, r5
   b66f2:	4632      	mov	r2, r6
   b66f4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b66f6:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b66f8:	f00d f91a 	bl	c3930 <memcpy>
      if (512 == (n + blockOffset)) {
   b66fc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b6700:	d104      	bne.n	b670c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b6702:	68a0      	ldr	r0, [r4, #8]
   b6704:	3024      	adds	r0, #36	; 0x24
   b6706:	f000 fc2a 	bl	b6f5e <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b670a:	b158      	cbz	r0, b6724 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b670c:	6963      	ldr	r3, [r4, #20]
   b670e:	4433      	add	r3, r6
   b6710:	6163      	str	r3, [r4, #20]
    src += n;
   b6712:	44b1      	add	r9, r6
    nToWrite -= n;
   b6714:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6718:	e7b4      	b.n	b6684 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b671a:	69c1      	ldr	r1, [r0, #28]
   b671c:	f7ff fe2a 	bl	b6374 <_ZN7FatFile7seekSetEm>
   b6720:	2800      	cmp	r0, #0
   b6722:	d1a8      	bne.n	b6676 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6724:	7863      	ldrb	r3, [r4, #1]
   b6726:	f043 0301 	orr.w	r3, r3, #1
   b672a:	7063      	strb	r3, [r4, #1]
  return -1;
   b672c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6730:	e050      	b.n	b67d4 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b6732:	6a23      	ldr	r3, [r4, #32]
   b6734:	b93b      	cbnz	r3, b6746 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6736:	4620      	mov	r0, r4
   b6738:	f7ff fcb3 	bl	b60a2 <_ZN7FatFile10addClusterEv>
   b673c:	2800      	cmp	r0, #0
   b673e:	d0f1      	beq.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b6740:	6923      	ldr	r3, [r4, #16]
   b6742:	6223      	str	r3, [r4, #32]
   b6744:	e7b9      	b.n	b66ba <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6746:	6123      	str	r3, [r4, #16]
   b6748:	e7b7      	b.n	b66ba <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b674a:	2201      	movs	r2, #1
   b674c:	e7cc      	b.n	b66e8 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b674e:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b6752:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6754:	d31b      	bcc.n	b678e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6756:	f890 c004 	ldrb.w	ip, [r0, #4]
   b675a:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b675e:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6760:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6764:	4573      	cmp	r3, lr
   b6766:	bf28      	it	cs
   b6768:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b676a:	4291      	cmp	r1, r2
      n = 512*nb;
   b676c:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6770:	d307      	bcc.n	b6782 <_ZN7FatFile5writeEPKvj+0x126>
   b6772:	441a      	add	r2, r3
   b6774:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6776:	bf82      	ittt	hi
   b6778:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b677c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6780:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6782:	68a5      	ldr	r5, [r4, #8]
   b6784:	464a      	mov	r2, r9
   b6786:	6828      	ldr	r0, [r5, #0]
   b6788:	f000 fff3 	bl	b7772 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b678c:	e7bd      	b.n	b670a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b678e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6790:	bf02      	ittt	eq
   b6792:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b6796:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b679a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b679c:	68a3      	ldr	r3, [r4, #8]
   b679e:	464a      	mov	r2, r9
   b67a0:	6818      	ldr	r0, [r3, #0]
   b67a2:	f000 ff70 	bl	b7686 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b67a6:	2800      	cmp	r0, #0
   b67a8:	d0bc      	beq.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b67aa:	f44f 7600 	mov.w	r6, #512	; 0x200
   b67ae:	e7ad      	b.n	b670c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b67b0:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b67b2:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b67b4:	42b2      	cmp	r2, r6
   b67b6:	d204      	bcs.n	b67c2 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b67b8:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b67ba:	f043 0304 	orr.w	r3, r3, #4
   b67be:	70a3      	strb	r3, [r4, #2]
   b67c0:	e003      	b.n	b67ca <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b67c2:	4a08      	ldr	r2, [pc, #32]	; (b67e4 <_ZN7FatFile5writeEPKvj+0x188>)
   b67c4:	6812      	ldr	r2, [r2, #0]
   b67c6:	2a00      	cmp	r2, #0
   b67c8:	d1f7      	bne.n	b67ba <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b67ca:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b67ce:	2b00      	cmp	r3, #0
   b67d0:	db02      	blt.n	b67d8 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b67d2:	4638      	mov	r0, r7
}
   b67d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b67d8:	4620      	mov	r0, r4
   b67da:	f7ff feb5 	bl	b6548 <_ZN7FatFile4syncEv>
   b67de:	2800      	cmp	r0, #0
   b67e0:	d1f7      	bne.n	b67d2 <_ZN7FatFile5writeEPKvj+0x176>
   b67e2:	e79f      	b.n	b6724 <_ZN7FatFile5writeEPKvj+0xc8>
   b67e4:	2003e610 	.word	0x2003e610

000b67e8 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b67e8:	2904      	cmp	r1, #4
   b67ea:	d804      	bhi.n	b67f6 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b67ec:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b67f0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b67f4:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b67f6:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b67f8:	bf9b      	ittet	ls
   b67fa:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b67fe:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6802:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6804:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6806:	bf84      	itt	hi
   b6808:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b680c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b680e:	4770      	bx	lr

000b6810 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6810:	1e41      	subs	r1, r0, #1
   b6812:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6816:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6818:	0842      	lsrs	r2, r0, #1
   b681a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b681e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6822:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6826:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6828:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b682a:	d1f5      	bne.n	b6818 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b682c:	4770      	bx	lr

000b682e <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b682e:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6830:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6832:	4604      	mov	r4, r0
   b6834:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6836:	b923      	cbnz	r3, b6842 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b683c:	6889      	ldr	r1, [r1, #8]
   b683e:	f7ff bcb3 	b.w	b61a8 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6842:	2224      	movs	r2, #36	; 0x24
   b6844:	2100      	movs	r1, #0
   b6846:	f00d f89b 	bl	c3980 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b684a:	2310      	movs	r3, #16
  m_flags = F_READ;
   b684c:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b684e:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6850:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6852:	68ab      	ldr	r3, [r5, #8]
   b6854:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6856:	68eb      	ldr	r3, [r5, #12]
   b6858:	6223      	str	r3, [r4, #32]
}
   b685a:	bd38      	pop	{r3, r4, r5, pc}

000b685c <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6860:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6862:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6864:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6868:	4606      	mov	r6, r0
   b686a:	460f      	mov	r7, r1
   b686c:	4690      	mov	r8, r2
   b686e:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6872:	2b00      	cmp	r3, #0
   b6874:	d05d      	beq.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
   b6876:	2a0c      	cmp	r2, #12
   b6878:	d95b      	bls.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b687a:	78c3      	ldrb	r3, [r0, #3]
   b687c:	b933      	cbnz	r3, b688c <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b687e:	f000 fb57 	bl	b6f30 <_ZN7FatFile6getSFNEPc>
   b6882:	4604      	mov	r4, r0
}
   b6884:	4620      	mov	r0, r4
   b6886:	b00d      	add	sp, #52	; 0x34
   b6888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b688c:	4601      	mov	r1, r0
   b688e:	a803      	add	r0, sp, #12
   b6890:	f7ff ffcd 	bl	b682e <_ZN7FatFile11openClusterEPS_>
   b6894:	2800      	cmp	r0, #0
   b6896:	d04c      	beq.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6898:	eb07 0308 	add.w	r3, r7, r8
   b689c:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b68a0:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b68a4:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b68a6:	78f3      	ldrb	r3, [r6, #3]
   b68a8:	fa5f f58b 	uxtb.w	r5, fp
   b68ac:	42ab      	cmp	r3, r5
   b68ae:	d340      	bcc.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b68b0:	88b1      	ldrh	r1, [r6, #4]
   b68b2:	eba1 010b 	sub.w	r1, r1, fp
   b68b6:	0149      	lsls	r1, r1, #5
   b68b8:	a803      	add	r0, sp, #12
   b68ba:	f7ff fd5b 	bl	b6374 <_ZN7FatFile7seekSetEm>
   b68be:	4604      	mov	r4, r0
   b68c0:	2800      	cmp	r0, #0
   b68c2:	d036      	beq.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b68c4:	2100      	movs	r1, #0
   b68c6:	a803      	add	r0, sp, #12
   b68c8:	f7ff fd35 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b68cc:	4603      	mov	r3, r0
   b68ce:	b380      	cbz	r0, b6932 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b68d0:	7ac2      	ldrb	r2, [r0, #11]
   b68d2:	2a0f      	cmp	r2, #15
   b68d4:	d12d      	bne.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b68d6:	7802      	ldrb	r2, [r0, #0]
   b68d8:	f002 021f 	and.w	r2, r2, #31
   b68dc:	42aa      	cmp	r2, r5
   b68de:	d128      	bne.n	b6932 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b68e0:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   b68e4:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b68e8:	197a      	adds	r2, r7, r5
   b68ea:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b68ec:	4618      	mov	r0, r3
   b68ee:	9101      	str	r1, [sp, #4]
   b68f0:	f7ff ff7a 	bl	b67e8 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b68f4:	b168      	cbz	r0, b6912 <_ZN7FatFile7getNameEPcj+0xb6>
   b68f6:	45a8      	cmp	r8, r5
   b68f8:	d912      	bls.n	b6920 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b68fa:	9901      	ldr	r1, [sp, #4]
   b68fc:	3101      	adds	r1, #1
   b68fe:	287f      	cmp	r0, #127	; 0x7f
   b6900:	b2c9      	uxtb	r1, r1
   b6902:	bf28      	it	cs
   b6904:	203f      	movcs	r0, #63	; 0x3f
   b6906:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6908:	f802 0b01 	strb.w	r0, [r2], #1
   b690c:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6910:	d1ec      	bne.n	b68ec <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6912:	45a8      	cmp	r8, r5
   b6914:	d904      	bls.n	b6920 <_ZN7FatFile7getNameEPcj+0xc4>
   b6916:	781a      	ldrb	r2, [r3, #0]
   b6918:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b691a:	bf48      	it	mi
   b691c:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6920:	9a00      	ldr	r2, [sp, #0]
   b6922:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6926:	781b      	ldrb	r3, [r3, #0]
   b6928:	065b      	lsls	r3, r3, #25
   b692a:	f10b 0b01 	add.w	fp, fp, #1
   b692e:	d5ba      	bpl.n	b68a6 <_ZN7FatFile7getNameEPcj+0x4a>
   b6930:	e7a8      	b.n	b6884 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6932:	2400      	movs	r4, #0
   b6934:	703c      	strb	r4, [r7, #0]
  return false;
   b6936:	e7a5      	b.n	b6884 <_ZN7FatFile7getNameEPcj+0x28>

000b6938 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b693c:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b693e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6942:	2b20      	cmp	r3, #32
   b6944:	d0fa      	beq.n	b693c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6946:	4d6a      	ldr	r5, [pc, #424]	; (b6af0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6948:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b694a:	2400      	movs	r4, #0
    c = path[len];
   b694c:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b694e:	b1c3      	cbz	r3, b6982 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6950:	2b2f      	cmp	r3, #47	; 0x2f
   b6952:	d016      	beq.n	b6982 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6954:	2b5c      	cmp	r3, #92	; 0x5c
   b6956:	d102      	bne.n	b695e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6958:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b695e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6962:	b2c0      	uxtb	r0, r0
   b6964:	281d      	cmp	r0, #29
   b6966:	d803      	bhi.n	b6970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6968:	fa25 f000 	lsr.w	r0, r5, r0
   b696c:	07c0      	lsls	r0, r0, #31
   b696e:	d4f3      	bmi.n	b6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6970:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6974:	283c      	cmp	r0, #60	; 0x3c
   b6976:	d0ef      	beq.n	b6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6978:	3b20      	subs	r3, #32
   b697a:	2b5e      	cmp	r3, #94	; 0x5e
   b697c:	d8ec      	bhi.n	b6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b697e:	3401      	adds	r4, #1
    c = path[len];
   b6980:	e7e4      	b.n	b694c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6982:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6984:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6986:	4607      	mov	r7, r0
   b6988:	f810 5b01 	ldrb.w	r5, [r0], #1
   b698c:	2d20      	cmp	r5, #32
   b698e:	d0fa      	beq.n	b6986 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6990:	2d2f      	cmp	r5, #47	; 0x2f
   b6992:	d0f8      	beq.n	b6986 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6994:	6017      	str	r7, [r2, #0]
  while (len) {
   b6996:	b14c      	cbz	r4, b69ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b699c:	2a2e      	cmp	r2, #46	; 0x2e
   b699e:	d001      	beq.n	b69a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b69a0:	2a20      	cmp	r2, #32
   b69a2:	d101      	bne.n	b69a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b69a4:	3c01      	subs	r4, #1
  while (len) {
   b69a6:	e7f6      	b.n	b6996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b69a8:	2cff      	cmp	r4, #255	; 0xff
   b69aa:	dcd5      	bgt.n	b6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b69ac:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b69b0:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b69b4:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b69b6:	f8c1 300d 	str.w	r3, [r1, #13]
   b69ba:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69bc:	f04f 0800 	mov.w	r8, #0
   b69c0:	f816 3008 	ldrb.w	r3, [r6, r8]
   b69c4:	2b2e      	cmp	r3, #46	; 0x2e
   b69c6:	d001      	beq.n	b69cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b69c8:	2b20      	cmp	r3, #32
   b69ca:	d102      	bne.n	b69d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b69cc:	f108 0801 	add.w	r8, r8, #1
   b69d0:	e7f6      	b.n	b69c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b69d2:	fab8 f088 	clz	r0, r8
   b69d6:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b69d8:	1e65      	subs	r5, r4, #1
   b69da:	1c6b      	adds	r3, r5, #1
   b69dc:	d002      	beq.n	b69e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b69de:	5d73      	ldrb	r3, [r6, r5]
   b69e0:	2b2e      	cmp	r3, #46	; 0x2e
   b69e2:	d114      	bne.n	b6a0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b69e4:	f04f 0900 	mov.w	r9, #0
   b69e8:	2707      	movs	r7, #7
   b69ea:	464a      	mov	r2, r9
   b69ec:	46ca      	mov	sl, r9
   b69ee:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b69f2:	45a0      	cmp	r8, r4
   b69f4:	da68      	bge.n	b6ac8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b69f6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b69fa:	2b20      	cmp	r3, #32
   b69fc:	d003      	beq.n	b6a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b69fe:	2b2e      	cmp	r3, #46	; 0x2e
   b6a00:	d107      	bne.n	b6a12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6a02:	45a8      	cmp	r8, r5
   b6a04:	d012      	beq.n	b6a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6a06:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6a08:	f108 0801 	add.w	r8, r8, #1
   b6a0c:	e7f1      	b.n	b69f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6a0e:	3d01      	subs	r5, #1
   b6a10:	e7e3      	b.n	b69da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6a12:	2b22      	cmp	r3, #34	; 0x22
   b6a14:	d008      	beq.n	b6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6a16:	2b7c      	cmp	r3, #124	; 0x7c
   b6a18:	d006      	beq.n	b6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6a1a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6a1e:	f1bc 0f05 	cmp.w	ip, #5
   b6a22:	d80a      	bhi.n	b6a3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6a24:	2b2d      	cmp	r3, #45	; 0x2d
   b6a26:	d012      	beq.n	b6a4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6a28:	45a8      	cmp	r8, r5
   b6a2a:	d15b      	bne.n	b6ae4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6a2c:	2f0a      	cmp	r7, #10
   b6a2e:	d04a      	beq.n	b6ac6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6a30:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a32:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a34:	f04f 0e10 	mov.w	lr, #16
   b6a38:	e7e6      	b.n	b6a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6a3a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6a3e:	f1bc 0f05 	cmp.w	ip, #5
   b6a42:	d9f1      	bls.n	b6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6a44:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6a48:	f1bc 0f02 	cmp.w	ip, #2
   b6a4c:	d9ec      	bls.n	b6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6a4e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6a52:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6a56:	d8e7      	bhi.n	b6a28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6a58:	45a8      	cmp	r8, r5
   b6a5a:	d0e7      	beq.n	b6a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6a5c:	42ba      	cmp	r2, r7
   b6a5e:	d830      	bhi.n	b6ac2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6a60:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6a64:	f1bc 0f19 	cmp.w	ip, #25
   b6a68:	d81a      	bhi.n	b6aa0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6a6a:	3b20      	subs	r3, #32
        lc |= bit;
   b6a6c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6a70:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6a72:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6a76:	f102 0c01 	add.w	ip, r2, #1
   b6a7a:	fa5f fc8c 	uxtb.w	ip, ip
   b6a7e:	440a      	add	r2, r1
      if (i < 7) {
   b6a80:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6a84:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6a86:	d801      	bhi.n	b6a8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6a88:	f881 c00c 	strb.w	ip, [r1, #12]
   b6a8c:	4662      	mov	r2, ip
   b6a8e:	e7bb      	b.n	b6a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6a90:	45a8      	cmp	r8, r5
   b6a92:	dc18      	bgt.n	b6ac6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6a94:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6a96:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6a98:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6a9a:	f04f 0e10 	mov.w	lr, #16
   b6a9e:	e7b2      	b.n	b6a06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6aa0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6aa4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6aa8:	bf98      	it	ls
   b6aaa:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6aae:	e7e2      	b.n	b6a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6ab0:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6ab2:	2001      	movs	r0, #1
   b6ab4:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6ab6:	4419      	add	r1, r3
   b6ab8:	237e      	movs	r3, #126	; 0x7e
   b6aba:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6abc:	2331      	movs	r3, #49	; 0x31
   b6abe:	738b      	strb	r3, [r1, #14]
   b6ac0:	e74b      	b.n	b695a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6ac2:	2f0a      	cmp	r7, #10
   b6ac4:	d1e4      	bne.n	b6a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6ac6:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6ac8:	7b4b      	ldrb	r3, [r1, #13]
   b6aca:	2b20      	cmp	r3, #32
   b6acc:	f43f af44 	beq.w	b6958 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6ad0:	2800      	cmp	r0, #0
   b6ad2:	d0ed      	beq.n	b6ab0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6ad4:	ea1a 0f09 	tst.w	sl, r9
   b6ad8:	bf18      	it	ne
   b6ada:	f04f 0902 	movne.w	r9, #2
   b6ade:	f881 9000 	strb.w	r9, [r1]
   b6ae2:	e73a      	b.n	b695a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6ae4:	42ba      	cmp	r2, r7
   b6ae6:	d8ec      	bhi.n	b6ac2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6ae8:	2000      	movs	r0, #0
      c = '_';
   b6aea:	235f      	movs	r3, #95	; 0x5f
   b6aec:	e7c3      	b.n	b6a76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6aee:	bf00      	nop
   b6af0:	31000101 	.word	0x31000101

000b6af4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6af8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6afc:	4606      	mov	r6, r0
   b6afe:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6b00:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6b02:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b04:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6b08:	6861      	ldr	r1, [r4, #4]
   b6b0a:	68a2      	ldr	r2, [r4, #8]
   b6b0c:	186b      	adds	r3, r5, r1
   b6b0e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b10:	4411      	add	r1, r2
   b6b12:	4291      	cmp	r1, r2
   b6b14:	d006      	beq.n	b6b24 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6b16:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6b1a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6b1e:	4043      	eors	r3, r0
   b6b20:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b22:	e7f6      	b.n	b6b12 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6b24:	f1b9 0f03 	cmp.w	r9, #3
   b6b28:	bf28      	it	cs
   b6b2a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b2e:	f109 0204 	add.w	r2, r9, #4
   b6b32:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6b34:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b38:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b3a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b3c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b3e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b40:	bf94      	ite	ls
   b6b42:	3130      	addls	r1, #48	; 0x30
   b6b44:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b46:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b48:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6b4a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b4e:	d1f1      	bne.n	b6b34 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6b50:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6b54:	2100      	movs	r1, #0
   b6b56:	735f      	strb	r7, [r3, #13]
   b6b58:	4630      	mov	r0, r6
   b6b5a:	f7ff fc0b 	bl	b6374 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6b5e:	2101      	movs	r1, #1
   b6b60:	4630      	mov	r0, r6
   b6b62:	f7ff fbe8 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6b66:	4601      	mov	r1, r0
   b6b68:	b928      	cbnz	r0, b6b76 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6b6a:	7870      	ldrb	r0, [r6, #1]
   b6b6c:	fab0 f080 	clz	r0, r0
   b6b70:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6b76:	7803      	ldrb	r3, [r0, #0]
   b6b78:	b16b      	cbz	r3, b6b96 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b7a:	7ac3      	ldrb	r3, [r0, #11]
   b6b7c:	071b      	lsls	r3, r3, #28
   b6b7e:	d4ee      	bmi.n	b6b5e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6b80:	220b      	movs	r2, #11
   b6b82:	4640      	mov	r0, r8
   b6b84:	f00c fec4 	bl	c3910 <memcmp>
   b6b88:	2800      	cmp	r0, #0
   b6b8a:	d1e8      	bne.n	b6b5e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6b8c:	3501      	adds	r5, #1
   b6b8e:	b2ad      	uxth	r5, r5
   b6b90:	2d64      	cmp	r5, #100	; 0x64
   b6b92:	d1b9      	bne.n	b6b08 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6b94:	e7ed      	b.n	b6b72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6b96:	2001      	movs	r0, #1
   b6b98:	e7eb      	b.n	b6b72 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6b9c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ba0:	ed2d 8b02 	vpush	{d8}
   b6ba4:	b08b      	sub	sp, #44	; 0x2c
   b6ba6:	460d      	mov	r5, r1
   b6ba8:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6baa:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bac:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6bae:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bb2:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6bb4:	d105      	bne.n	b6bc2 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6bb6:	2000      	movs	r0, #0
}
   b6bb8:	b00b      	add	sp, #44	; 0x2c
   b6bba:	ecbd 8b02 	vpop	{d8}
   b6bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6bc2:	9b07      	ldr	r3, [sp, #28]
   b6bc4:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6bc6:	2b00      	cmp	r3, #0
   b6bc8:	d1f5      	bne.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6bca:	6853      	ldr	r3, [r2, #4]
   b6bcc:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6bce:	7813      	ldrb	r3, [r2, #0]
   b6bd0:	079c      	lsls	r4, r3, #30
   b6bd2:	bf1f      	itttt	ne
   b6bd4:	9b05      	ldrne	r3, [sp, #20]
   b6bd6:	330c      	addne	r3, #12
   b6bd8:	220d      	movne	r2, #13
   b6bda:	fbb3 f3f2 	udivne	r3, r3, r2
   b6bde:	bf1a      	itte	ne
   b6be0:	3301      	addne	r3, #1
   b6be2:	b2db      	uxtbne	r3, r3
   b6be4:	2301      	moveq	r3, #1
    seekSet(0);
   b6be6:	2100      	movs	r1, #0
   b6be8:	4628      	mov	r0, r5
   b6bea:	9303      	str	r3, [sp, #12]
   b6bec:	f7ff fbc2 	bl	b6374 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6bf0:	f107 030d 	add.w	r3, r7, #13
  }
   b6bf4:	f04f 0b00 	mov.w	fp, #0
   b6bf8:	ee08 3a10 	vmov	s16, r3
   b6bfc:	46da      	mov	sl, fp
   b6bfe:	465c      	mov	r4, fp
   b6c00:	465e      	mov	r6, fp
   b6c02:	f8cd b010 	str.w	fp, [sp, #16]
   b6c06:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6c08:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6c0a:	2101      	movs	r1, #1
   b6c0c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6c0e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6c12:	f7ff fb90 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6c16:	4603      	mov	r3, r0
   b6c18:	2800      	cmp	r0, #0
   b6c1a:	d171      	bne.n	b6d00 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6c1c:	786b      	ldrb	r3, [r5, #1]
   b6c1e:	2b00      	cmp	r3, #0
   b6c20:	d1c9      	bne.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6c22:	9b06      	ldr	r3, [sp, #24]
   b6c24:	059a      	lsls	r2, r3, #22
   b6c26:	d5c6      	bpl.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6c28:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6c2c:	3b01      	subs	r3, #1
   b6c2e:	2b01      	cmp	r3, #1
   b6c30:	d8c1      	bhi.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6c32:	9b04      	ldr	r3, [sp, #16]
   b6c34:	2c00      	cmp	r4, #0
   b6c36:	bf08      	it	eq
   b6c38:	4643      	moveq	r3, r8
   b6c3a:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6c3c:	9b03      	ldr	r3, [sp, #12]
   b6c3e:	429c      	cmp	r4, r3
   b6c40:	f0c0 80f1 	bcc.w	b6e26 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6c44:	f1b9 0f00 	cmp.w	r9, #0
   b6c48:	f040 810a 	bne.w	b6e60 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6c4c:	9b04      	ldr	r3, [sp, #16]
   b6c4e:	4628      	mov	r0, r5
   b6c50:	0159      	lsls	r1, r3, #5
   b6c52:	f7ff fb8f 	bl	b6374 <_ZN7FatFile7seekSetEm>
   b6c56:	2800      	cmp	r0, #0
   b6c58:	d0ad      	beq.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6c5a:	9b03      	ldr	r3, [sp, #12]
   b6c5c:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6c60:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c64:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c66:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c6a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c6e:	2e00      	cmp	r6, #0
   b6c70:	f000 810d 	beq.w	b6e8e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c74:	2100      	movs	r1, #0
   b6c76:	4628      	mov	r0, r5
   b6c78:	f7ff fb5d 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6c7c:	4604      	mov	r4, r0
   b6c7e:	2800      	cmp	r0, #0
   b6c80:	d099      	beq.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6c82:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6c84:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6c88:	454e      	cmp	r6, r9
   b6c8a:	f043 0301 	orr.w	r3, r3, #1
   b6c8e:	bf0c      	ite	eq
   b6c90:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6c94:	46b3      	movne	fp, r6
   b6c96:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6c9a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c9e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6ca2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6ca6:	f107 000d 	add.w	r0, r7, #13
   b6caa:	f7ff fdb1 	bl	b6810 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6cae:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6cb2:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6cb4:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6cb8:	f00b 031f 	and.w	r3, fp, #31
   b6cbc:	220d      	movs	r2, #13
   b6cbe:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6cc0:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6cc4:	4353      	muls	r3, r2
   b6cc6:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6cc8:	9905      	ldr	r1, [sp, #20]
   b6cca:	4299      	cmp	r1, r3
   b6ccc:	f240 80d0 	bls.w	b6e70 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6cd0:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6cd4:	2a04      	cmp	r2, #4
   b6cd6:	fa5f fe82 	uxtb.w	lr, r2
   b6cda:	f102 0001 	add.w	r0, r2, #1
   b6cde:	f200 80cd 	bhi.w	b6e7c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6ce2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6ce6:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6cea:	280d      	cmp	r0, #13
   b6cec:	f103 0301 	add.w	r3, r3, #1
   b6cf0:	4602      	mov	r2, r0
   b6cf2:	d1e9      	bne.n	b6cc8 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6cf4:	3e01      	subs	r6, #1
   b6cf6:	b2f6      	uxtb	r6, r6
   b6cf8:	e7b9      	b.n	b6c6e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6cfa:	f04f 0901 	mov.w	r9, #1
   b6cfe:	e783      	b.n	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6d00:	7802      	ldrb	r2, [r0, #0]
   b6d02:	2ae5      	cmp	r2, #229	; 0xe5
   b6d04:	d000      	beq.n	b6d08 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6d06:	b97a      	cbnz	r2, b6d28 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6d08:	9904      	ldr	r1, [sp, #16]
   b6d0a:	2c00      	cmp	r4, #0
   b6d0c:	bf08      	it	eq
   b6d0e:	4641      	moveq	r1, r8
   b6d10:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6d12:	9903      	ldr	r1, [sp, #12]
   b6d14:	428c      	cmp	r4, r1
        freeFound++;
   b6d16:	bf3c      	itt	cc
   b6d18:	3401      	addcc	r4, #1
   b6d1a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d1c:	2a00      	cmp	r2, #0
   b6d1e:	d080      	beq.n	b6c22 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d20:	2ae5      	cmp	r2, #229	; 0xe5
   b6d22:	d105      	bne.n	b6d30 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6d24:	2600      	movs	r6, #0
   b6d26:	e76f      	b.n	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6d28:	9903      	ldr	r1, [sp, #12]
   b6d2a:	428c      	cmp	r4, r1
   b6d2c:	bf38      	it	cc
   b6d2e:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d30:	2a2e      	cmp	r2, #46	; 0x2e
   b6d32:	d0f7      	beq.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6d34:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6d36:	290f      	cmp	r1, #15
   b6d38:	d14a      	bne.n	b6dd0 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6d3a:	bb16      	cbnz	r6, b6d82 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6d3c:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6d40:	f43f af62 	beq.w	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d44:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6d48:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d4c:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6d4e:	220d      	movs	r2, #13
   b6d50:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6d54:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6d58:	9a05      	ldr	r2, [sp, #20]
   b6d5a:	4542      	cmp	r2, r8
   b6d5c:	d9e2      	bls.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d5e:	eba2 0208 	sub.w	r2, r2, r8
   b6d62:	9208      	str	r2, [sp, #32]
   b6d64:	2200      	movs	r2, #0
   b6d66:	eb02 0108 	add.w	r1, r2, r8
   b6d6a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6d6c:	4618      	mov	r0, r3
   b6d6e:	b2d1      	uxtb	r1, r2
   b6d70:	f7ff fd3a 	bl	b67e8 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6d74:	9908      	ldr	r1, [sp, #32]
   b6d76:	428a      	cmp	r2, r1
   b6d78:	d10d      	bne.n	b6d96 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6d7a:	2800      	cmp	r0, #0
   b6d7c:	bf18      	it	ne
   b6d7e:	2600      	movne	r6, #0
   b6d80:	e742      	b.n	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6d82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b6d86:	fa5f fa8a 	uxtb.w	sl, sl
   b6d8a:	4552      	cmp	r2, sl
   b6d8c:	d1ca      	bne.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d8e:	7b5a      	ldrb	r2, [r3, #13]
   b6d90:	455a      	cmp	r2, fp
   b6d92:	d0dc      	beq.n	b6d4e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6d94:	e7c6      	b.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6d96:	28ff      	cmp	r0, #255	; 0xff
   b6d98:	d8c4      	bhi.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d9a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6d9e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6da2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6da4:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6da6:	bf9c      	itt	ls
   b6da8:	f10e 0020 	addls.w	r0, lr, #32
   b6dac:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6db0:	4608      	mov	r0, r1
   b6db2:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6db4:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6db6:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6dba:	f1bc 0f19 	cmp.w	ip, #25
   b6dbe:	bf9c      	itt	ls
   b6dc0:	3120      	addls	r1, #32
   b6dc2:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dc4:	4571      	cmp	r1, lr
   b6dc6:	d1ad      	bne.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6dc8:	3201      	adds	r2, #1
   b6dca:	2a0d      	cmp	r2, #13
   b6dcc:	d1cb      	bne.n	b6d66 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6dce:	e71b      	b.n	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6dd0:	0708      	lsls	r0, r1, #28
   b6dd2:	d4a7      	bmi.n	b6d24 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6dd4:	b15e      	cbz	r6, b6dee <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6dd6:	f1ba 0f01 	cmp.w	sl, #1
   b6dda:	f47f aeec 	bne.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6dde:	4618      	mov	r0, r3
   b6de0:	f7ff fd16 	bl	b6810 <_ZN7FatFile11lfnChecksumEPh>
   b6de4:	4558      	cmp	r0, fp
   b6de6:	f47f aee6 	bne.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6dea:	46b1      	mov	r9, r6
   b6dec:	e00e      	b.n	b6e0c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6dee:	ee18 1a10 	vmov	r1, s16
   b6df2:	220b      	movs	r2, #11
   b6df4:	4618      	mov	r0, r3
   b6df6:	f00c fd8b 	bl	c3910 <memcmp>
   b6dfa:	2800      	cmp	r0, #0
   b6dfc:	f47f af04 	bne.w	b6c08 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6e00:	f897 9000 	ldrb.w	r9, [r7]
   b6e04:	f019 0901 	ands.w	r9, r9, #1
   b6e08:	f47f af77 	bne.w	b6cfa <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6e0c:	9b06      	ldr	r3, [sp, #24]
   b6e0e:	0519      	lsls	r1, r3, #20
   b6e10:	f53f aed1 	bmi.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6e14:	9b06      	ldr	r3, [sp, #24]
   b6e16:	9807      	ldr	r0, [sp, #28]
   b6e18:	f8cd 9000 	str.w	r9, [sp]
   b6e1c:	4642      	mov	r2, r8
   b6e1e:	4629      	mov	r1, r5
   b6e20:	f7ff faeb 	bl	b63fa <_ZN7FatFile15openCachedEntryEPS_tih>
   b6e24:	e6c8      	b.n	b6bb8 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6e26:	2100      	movs	r1, #0
   b6e28:	4628      	mov	r0, r5
   b6e2a:	f7ff fa84 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6e2e:	b9a0      	cbnz	r0, b6e5a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6e30:	786b      	ldrb	r3, [r5, #1]
   b6e32:	2b00      	cmp	r3, #0
   b6e34:	f47f aebf 	bne.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6e38:	4628      	mov	r0, r5
   b6e3a:	f7ff f93d 	bl	b60b8 <_ZN7FatFile13addDirClusterEv>
   b6e3e:	2800      	cmp	r0, #0
   b6e40:	f43f aeb9 	beq.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6e44:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6e46:	791b      	ldrb	r3, [r3, #4]
   b6e48:	2b01      	cmp	r3, #1
   b6e4a:	f63f aefb 	bhi.w	b6c44 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6e4e:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6e50:	3410      	adds	r4, #16
   b6e52:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e54:	42a3      	cmp	r3, r4
   b6e56:	d8ef      	bhi.n	b6e38 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6e58:	e6f4      	b.n	b6c44 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6e5a:	3401      	adds	r4, #1
   b6e5c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e5e:	e6ed      	b.n	b6c3c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6e60:	4639      	mov	r1, r7
   b6e62:	4628      	mov	r0, r5
   b6e64:	f7ff fe46 	bl	b6af4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6e68:	2800      	cmp	r0, #0
   b6e6a:	f47f aeef 	bne.w	b6c4c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6e6e:	e6a2      	b.n	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e70:	bf14      	ite	ne
   b6e72:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6e76:	2100      	moveq	r1, #0
   b6e78:	b289      	uxth	r1, r1
   b6e7a:	e72b      	b.n	b6cd4 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6e7c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6e80:	bf94      	ite	ls
   b6e82:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6e86:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6e8a:	8091      	strh	r1, [r2, #4]
   b6e8c:	e72d      	b.n	b6cea <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6e8e:	4631      	mov	r1, r6
   b6e90:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6e92:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6e96:	f7ff fa4e 	bl	b6336 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6e9a:	4604      	mov	r4, r0
   b6e9c:	2800      	cmp	r0, #0
   b6e9e:	f43f ae8a 	beq.w	b6bb6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6ea2:	2220      	movs	r2, #32
   b6ea4:	4631      	mov	r1, r6
   b6ea6:	f00c fd6b 	bl	c3980 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6eaa:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6eae:	6023      	str	r3, [r4, #0]
   b6eb0:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6eb4:	6063      	str	r3, [r4, #4]
   b6eb6:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6eba:	8123      	strh	r3, [r4, #8]
   b6ebc:	7dfb      	ldrb	r3, [r7, #23]
   b6ebe:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6ec0:	783b      	ldrb	r3, [r7, #0]
   b6ec2:	f003 0318 	and.w	r3, r3, #24
   b6ec6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6ec8:	4b0f      	ldr	r3, [pc, #60]	; (b6f08 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6eca:	681b      	ldr	r3, [r3, #0]
   b6ecc:	b19b      	cbz	r3, b6ef6 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6ece:	f104 010e 	add.w	r1, r4, #14
   b6ed2:	f104 0010 	add.w	r0, r4, #16
   b6ed6:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6ed8:	8a23      	ldrh	r3, [r4, #16]
   b6eda:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6edc:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6ede:	89e3      	ldrh	r3, [r4, #14]
   b6ee0:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6ee2:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6ee4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6ee8:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6eec:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6ef0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6ef4:	e78e      	b.n	b6e14 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6ef6:	2321      	movs	r3, #33	; 0x21
   b6ef8:	7423      	strb	r3, [r4, #16]
   b6efa:	2328      	movs	r3, #40	; 0x28
   b6efc:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6efe:	2308      	movs	r3, #8
   b6f00:	73a6      	strb	r6, [r4, #14]
   b6f02:	73e3      	strb	r3, [r4, #15]
   b6f04:	e7e8      	b.n	b6ed8 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6f06:	bf00      	nop
   b6f08:	2003e610 	.word	0x2003e610

000b6f0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6f0c:	b513      	push	{r0, r1, r4, lr}
   b6f0e:	4604      	mov	r4, r0
    }
   b6f10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6f12:	b159      	cbz	r1, b6f2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6f14:	9101      	str	r1, [sp, #4]
   b6f16:	f00c fdbe 	bl	c3a96 <strlen>
   b6f1a:	6823      	ldr	r3, [r4, #0]
   b6f1c:	9901      	ldr	r1, [sp, #4]
   b6f1e:	68db      	ldr	r3, [r3, #12]
   b6f20:	4602      	mov	r2, r0
   b6f22:	4620      	mov	r0, r4
    }
   b6f24:	b002      	add	sp, #8
   b6f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6f2a:	4718      	bx	r3
    }
   b6f2c:	b002      	add	sp, #8
   b6f2e:	bd10      	pop	{r4, pc}

000b6f30 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b6f30:	b510      	push	{r4, lr}
   b6f32:	460c      	mov	r4, r1
    return m_attr;
   b6f34:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b6f36:	b909      	cbnz	r1, b6f3c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b6f38:	2000      	movs	r0, #0
}
   b6f3a:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b6f3c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6f40:	d005      	beq.n	b6f4e <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6f42:	232f      	movs	r3, #47	; 0x2f
   b6f44:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6f46:	2300      	movs	r3, #0
   b6f48:	7063      	strb	r3, [r4, #1]
  return true;
   b6f4a:	2001      	movs	r0, #1
   b6f4c:	e7f5      	b.n	b6f3a <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b6f4e:	f7ff f8f1 	bl	b6134 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6f52:	2800      	cmp	r0, #0
   b6f54:	d0f0      	beq.n	b6f38 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6f56:	4621      	mov	r1, r4
   b6f58:	f7ff f8fb 	bl	b6152 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b6f5c:	e7f5      	b.n	b6f4a <_ZN7FatFile6getSFNEPc+0x1a>

000b6f5e <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f60:	7803      	ldrb	r3, [r0, #0]
   b6f62:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6f64:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6f66:	d520      	bpl.n	b6faa <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b6f68:	6843      	ldr	r3, [r0, #4]
   b6f6a:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6f6c:	f100 020c 	add.w	r2, r0, #12
   b6f70:	6818      	ldr	r0, [r3, #0]
   b6f72:	9201      	str	r2, [sp, #4]
   b6f74:	f000 fb87 	bl	b7686 <_ZN9SdSpiCard10writeBlockEmPKh>
   b6f78:	9a01      	ldr	r2, [sp, #4]
   b6f7a:	4605      	mov	r5, r0
   b6f7c:	b918      	cbnz	r0, b6f86 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6f7e:	2500      	movs	r5, #0
}
   b6f80:	4628      	mov	r0, r5
   b6f82:	b003      	add	sp, #12
   b6f84:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6f86:	7823      	ldrb	r3, [r4, #0]
   b6f88:	079b      	lsls	r3, r3, #30
   b6f8a:	d404      	bmi.n	b6f96 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6f8c:	7823      	ldrb	r3, [r4, #0]
   b6f8e:	f023 0301 	bic.w	r3, r3, #1
   b6f92:	7023      	strb	r3, [r4, #0]
   b6f94:	e7f4      	b.n	b6f80 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6f96:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6f9a:	6919      	ldr	r1, [r3, #16]
   b6f9c:	4401      	add	r1, r0
   b6f9e:	6818      	ldr	r0, [r3, #0]
   b6fa0:	f000 fb71 	bl	b7686 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6fa4:	2800      	cmp	r0, #0
   b6fa6:	d1f1      	bne.n	b6f8c <_ZN8FatCache4syncEv+0x2e>
   b6fa8:	e7e9      	b.n	b6f7e <_ZN8FatCache4syncEv+0x20>
  return true;
   b6faa:	2501      	movs	r5, #1
   b6fac:	e7e8      	b.n	b6f80 <_ZN8FatCache4syncEv+0x22>

000b6fae <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6fae:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6fb0:	6883      	ldr	r3, [r0, #8]
   b6fb2:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6fb4:	4604      	mov	r4, r0
   b6fb6:	460e      	mov	r6, r1
   b6fb8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6fba:	d009      	beq.n	b6fd0 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6fbc:	f7ff ffcf 	bl	b6f5e <_ZN8FatCache4syncEv>
   b6fc0:	b908      	cbnz	r0, b6fc6 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6fc2:	2000      	movs	r0, #0
}
   b6fc4:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6fc6:	076b      	lsls	r3, r5, #29
   b6fc8:	d50a      	bpl.n	b6fe0 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6fca:	2300      	movs	r3, #0
   b6fcc:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6fce:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6fd0:	7822      	ldrb	r2, [r4, #0]
   b6fd2:	f005 0503 	and.w	r5, r5, #3
   b6fd6:	4620      	mov	r0, r4
   b6fd8:	4315      	orrs	r5, r2
   b6fda:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6fde:	e7f1      	b.n	b6fc4 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6fe0:	6863      	ldr	r3, [r4, #4]
   b6fe2:	f104 020c 	add.w	r2, r4, #12
   b6fe6:	6818      	ldr	r0, [r3, #0]
   b6fe8:	4631      	mov	r1, r6
   b6fea:	f000 fac3 	bl	b7574 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6fee:	2800      	cmp	r0, #0
   b6ff0:	d1eb      	bne.n	b6fca <_ZN8FatCache4readEmh+0x1c>
   b6ff2:	e7e6      	b.n	b6fc2 <_ZN8FatCache4readEmh+0x14>

000b6ff4 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6ff4:	7983      	ldrb	r3, [r0, #6]
   b6ff6:	6940      	ldr	r0, [r0, #20]
   b6ff8:	3902      	subs	r1, #2
   b6ffa:	4099      	lsls	r1, r3
}
   b6ffc:	4408      	add	r0, r1
   b6ffe:	4770      	bx	lr

000b7000 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7000:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7002:	b570      	push	{r4, r5, r6, lr}
   b7004:	4605      	mov	r5, r0
   b7006:	460c      	mov	r4, r1
   b7008:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b700a:	d802      	bhi.n	b7012 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b700c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7010:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7012:	69c3      	ldr	r3, [r0, #28]
   b7014:	428b      	cmp	r3, r1
   b7016:	d3f9      	bcc.n	b700c <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7018:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b701a:	2b20      	cmp	r3, #32
   b701c:	d116      	bne.n	b704c <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b701e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7020:	2202      	movs	r2, #2
   b7022:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7026:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b702a:	f7ff ffc0 	bl	b6fae <_ZN8FatCache4readEmh>
    if (!pc) {
   b702e:	2800      	cmp	r0, #0
   b7030:	d0ec      	beq.n	b700c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7032:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7036:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b703a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b703e:	69ea      	ldr	r2, [r5, #28]
   b7040:	429a      	cmp	r2, r3
  *value = next;
   b7042:	bf26      	itte	cs
   b7044:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7046:	2001      	movcs	r0, #1
    return 0;
   b7048:	2000      	movcc	r0, #0
   b704a:	e7e1      	b.n	b7010 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b704c:	2b10      	cmp	r3, #16
   b704e:	d1dd      	bne.n	b700c <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7050:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7054:	6981      	ldr	r1, [r0, #24]
   b7056:	2202      	movs	r2, #2
   b7058:	4419      	add	r1, r3
   b705a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b705e:	f7ff ffa6 	bl	b6fae <_ZN8FatCache4readEmh>
    if (!pc) {
   b7062:	2800      	cmp	r0, #0
   b7064:	d0d2      	beq.n	b700c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7066:	b2e4      	uxtb	r4, r4
   b7068:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b706c:	e7e7      	b.n	b703e <_ZN9FatVolume6fatGetEmPm+0x3e>

000b706e <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b706e:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7070:	b538      	push	{r3, r4, r5, lr}
   b7072:	460c      	mov	r4, r1
   b7074:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7076:	d801      	bhi.n	b707c <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7078:	2000      	movs	r0, #0
}
   b707a:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b707c:	69c3      	ldr	r3, [r0, #28]
   b707e:	428b      	cmp	r3, r1
   b7080:	d3fa      	bcc.n	b7078 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7082:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7084:	2b20      	cmp	r3, #32
   b7086:	d10f      	bne.n	b70a8 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7088:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b708a:	2203      	movs	r2, #3
   b708c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7090:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7094:	f7ff ff8b 	bl	b6fae <_ZN8FatCache4readEmh>
    if (!pc) {
   b7098:	2800      	cmp	r0, #0
   b709a:	d0ed      	beq.n	b7078 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b709c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b70a0:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b70a4:	2001      	movs	r0, #1
   b70a6:	e7e8      	b.n	b707a <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b70a8:	2b10      	cmp	r3, #16
   b70aa:	d1e5      	bne.n	b7078 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b70ac:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b70b0:	6981      	ldr	r1, [r0, #24]
   b70b2:	2203      	movs	r2, #3
   b70b4:	4419      	add	r1, r3
   b70b6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b70ba:	f7ff ff78 	bl	b6fae <_ZN8FatCache4readEmh>
    if (!pc) {
   b70be:	2800      	cmp	r0, #0
   b70c0:	d0da      	beq.n	b7078 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b70c2:	b2e4      	uxtb	r4, r4
   b70c4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b70c8:	e7ec      	b.n	b70a4 <_ZN9FatVolume6fatPutEmm+0x36>

000b70ca <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b70ce:	68c4      	ldr	r4, [r0, #12]
   b70d0:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b70d2:	4605      	mov	r5, r0
   b70d4:	460e      	mov	r6, r1
   b70d6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b70d8:	d301      	bcc.n	b70de <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b70da:	2701      	movs	r7, #1
   b70dc:	e001      	b.n	b70e2 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b70de:	460c      	mov	r4, r1
    setStart = false;
   b70e0:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b70e2:	69eb      	ldr	r3, [r5, #28]
    find++;
   b70e4:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b70e6:	42a3      	cmp	r3, r4
   b70e8:	d202      	bcs.n	b70f0 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b70ea:	b9c7      	cbnz	r7, b711e <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b70ec:	68ec      	ldr	r4, [r5, #12]
   b70ee:	e7f4      	b.n	b70da <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b70f0:	42a6      	cmp	r6, r4
   b70f2:	d014      	beq.n	b711e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b70f4:	aa01      	add	r2, sp, #4
   b70f6:	4621      	mov	r1, r4
   b70f8:	4628      	mov	r0, r5
   b70fa:	f7ff ff81 	bl	b7000 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b70fe:	2800      	cmp	r0, #0
   b7100:	db0d      	blt.n	b711e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7102:	d0ee      	beq.n	b70e2 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7104:	9b01      	ldr	r3, [sp, #4]
   b7106:	2b00      	cmp	r3, #0
   b7108:	d1eb      	bne.n	b70e2 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b710a:	b107      	cbz	r7, b710e <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b710c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b710e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7112:	4621      	mov	r1, r4
   b7114:	4628      	mov	r0, r5
   b7116:	f7ff ffaa 	bl	b706e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b711a:	4607      	mov	r7, r0
   b711c:	b920      	cbnz	r0, b7128 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b711e:	2700      	movs	r7, #0
}
   b7120:	4638      	mov	r0, r7
   b7122:	b002      	add	sp, #8
   b7124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7128:	b916      	cbnz	r6, b7130 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b712a:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b712e:	e7f7      	b.n	b7120 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7130:	4622      	mov	r2, r4
   b7132:	4631      	mov	r1, r6
   b7134:	4628      	mov	r0, r5
   b7136:	f7ff ff9a 	bl	b706e <_ZN9FatVolume6fatPutEmm>
   b713a:	2800      	cmp	r0, #0
   b713c:	d1f5      	bne.n	b712a <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b713e:	e7ee      	b.n	b711e <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7140 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7140:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7142:	4605      	mov	r5, r0
   b7144:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7146:	aa01      	add	r2, sp, #4
   b7148:	4621      	mov	r1, r4
   b714a:	4628      	mov	r0, r5
   b714c:	f7ff ff58 	bl	b7000 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7150:	1e06      	subs	r6, r0, #0
   b7152:	db10      	blt.n	b7176 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7154:	2200      	movs	r2, #0
   b7156:	4621      	mov	r1, r4
   b7158:	4628      	mov	r0, r5
   b715a:	f7ff ff88 	bl	b706e <_ZN9FatVolume6fatPutEmm>
   b715e:	b150      	cbz	r0, b7176 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7160:	68eb      	ldr	r3, [r5, #12]
   b7162:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7164:	bf24      	itt	cs
   b7166:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b716a:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b716c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b716e:	2e00      	cmp	r6, #0
   b7170:	d1e9      	bne.n	b7146 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7172:	b002      	add	sp, #8
   b7174:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7176:	2000      	movs	r0, #0
   b7178:	e7fb      	b.n	b7172 <_ZN9FatVolume9freeChainEm+0x32>

000b717a <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b717a:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b717c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b717e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7180:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b7186:	4604      	mov	r4, r0
  m_fatType = 0;
   b7188:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b718a:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b718e:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7190:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7194:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7196:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b719a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b719e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b71a2:	460d      	mov	r5, r1
   b71a4:	b1b9      	cbz	r1, b71d6 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b71a6:	2904      	cmp	r1, #4
   b71a8:	d901      	bls.n	b71ae <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b71aa:	2000      	movs	r0, #0
}
   b71ac:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b71ae:	4611      	mov	r1, r2
   b71b0:	4630      	mov	r0, r6
   b71b2:	f7ff fefc 	bl	b6fae <_ZN8FatCache4readEmh>
    if (!pc) {
   b71b6:	2800      	cmp	r0, #0
   b71b8:	d0f7      	beq.n	b71aa <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b71ba:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b71be:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b71c2:	065b      	lsls	r3, r3, #25
   b71c4:	d1f1      	bne.n	b71aa <_ZN9FatVolume4initEh+0x30>
   b71c6:	f105 011b 	add.w	r1, r5, #27
   b71ca:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b71ce:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b71d2:	2d00      	cmp	r5, #0
   b71d4:	d0e9      	beq.n	b71aa <_ZN9FatVolume4initEh+0x30>
   b71d6:	2200      	movs	r2, #0
   b71d8:	4629      	mov	r1, r5
   b71da:	4630      	mov	r0, r6
   b71dc:	f7ff fee7 	bl	b6fae <_ZN8FatCache4readEmh>
  if (!pc) {
   b71e0:	2800      	cmp	r0, #0
   b71e2:	d0e2      	beq.n	b71aa <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b71e4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b71e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b71ec:	d1dd      	bne.n	b71aa <_ZN9FatVolume4initEh+0x30>
   b71ee:	7c03      	ldrb	r3, [r0, #16]
   b71f0:	2b02      	cmp	r3, #2
   b71f2:	d1da      	bne.n	b71aa <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b71f4:	89c3      	ldrh	r3, [r0, #14]
   b71f6:	2b00      	cmp	r3, #0
   b71f8:	d0d7      	beq.n	b71aa <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b71fa:	7b41      	ldrb	r1, [r0, #13]
   b71fc:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b71fe:	1e4b      	subs	r3, r1, #1
   b7200:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7202:	2300      	movs	r3, #0
   b7204:	71a3      	strb	r3, [r4, #6]
   b7206:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7208:	2301      	movs	r3, #1
   b720a:	4299      	cmp	r1, r3
   b720c:	d007      	beq.n	b721e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b720e:	3e01      	subs	r6, #1
   b7210:	d0cb      	beq.n	b71aa <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7212:	79a2      	ldrb	r2, [r4, #6]
   b7214:	005b      	lsls	r3, r3, #1
   b7216:	3201      	adds	r2, #1
   b7218:	b2db      	uxtb	r3, r3
   b721a:	71a2      	strb	r2, [r4, #6]
   b721c:	e7f5      	b.n	b720a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b721e:	8ac1      	ldrh	r1, [r0, #22]
   b7220:	b901      	cbnz	r1, b7224 <_ZN9FatVolume4initEh+0xaa>
   b7222:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7224:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7226:	89c3      	ldrh	r3, [r0, #14]
   b7228:	442b      	add	r3, r5
   b722a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b722c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7230:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7232:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7236:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7238:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b723c:	0149      	lsls	r1, r1, #5
   b723e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7242:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7246:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7248:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b724c:	b902      	cbnz	r2, b7250 <_ZN9FatVolume4initEh+0xd6>
   b724e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7250:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7252:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7254:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7256:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7258:	1c4b      	adds	r3, r1, #1
   b725a:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b725c:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7260:	4299      	cmp	r1, r3
   b7262:	d802      	bhi.n	b726a <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7264:	230c      	movs	r3, #12
   b7266:	71e3      	strb	r3, [r4, #7]
   b7268:	e79f      	b.n	b71aa <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b726a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b726e:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7270:	bf85      	ittet	hi
   b7272:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7274:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7276:	2310      	movls	r3, #16
    m_fatType = 32;
   b7278:	2320      	movhi	r3, #32
   b727a:	71e3      	strb	r3, [r4, #7]
  return true;
   b727c:	2001      	movs	r0, #1
   b727e:	e795      	b.n	b71ac <_ZN9FatVolume4initEh+0x32>

000b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7280:	f000 baca 	b.w	b7818 <_ZN14SdSpiAltDriver4sendEh>

000b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7284:	f000 baad 	b.w	b77e2 <_ZN14SdSpiAltDriver7receiveEv>

000b7288 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7288:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b728a:	4e0e      	ldr	r6, [pc, #56]	; (b72c4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b728c:	460d      	mov	r5, r1
   b728e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7290:	f005 ff5a 	bl	bd148 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7294:	6833      	ldr	r3, [r6, #0]
   b7296:	1ac0      	subs	r0, r0, r3
   b7298:	4b0b      	ldr	r3, [pc, #44]	; (b72c8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b729a:	4298      	cmp	r0, r3
   b729c:	d908      	bls.n	b72b0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b729e:	f005 ff5b 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b72a2:	4b0a      	ldr	r3, [pc, #40]	; (b72cc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b72a4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b72a6:	f006 f99d 	bl	bd5e4 <spark_process>
   b72aa:	f005 ff4d 	bl	bd148 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b72ae:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b72b0:	f005 ff52 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b72b4:	b280      	uxth	r0, r0
   b72b6:	1b40      	subs	r0, r0, r5
}
   b72b8:	42a0      	cmp	r0, r4
   b72ba:	bfd4      	ite	le
   b72bc:	2000      	movle	r0, #0
   b72be:	2001      	movgt	r0, #1
   b72c0:	bd70      	pop	{r4, r5, r6, pc}
   b72c2:	bf00      	nop
   b72c4:	2003e618 	.word	0x2003e618
   b72c8:	000186a0 	.word	0x000186a0
   b72cc:	2003e728 	.word	0x2003e728

000b72d0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b72d0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b72d2:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b72d4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b72d6:	b94d      	cbnz	r5, b72ec <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b72d8:	6840      	ldr	r0, [r0, #4]
   b72da:	f000 fa6b 	bl	b77b4 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b72de:	6863      	ldr	r3, [r4, #4]
   b72e0:	4629      	mov	r1, r5
   b72e2:	7d18      	ldrb	r0, [r3, #20]
   b72e4:	f00a f875 	bl	c13d2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b72e8:	2301      	movs	r3, #1
   b72ea:	7223      	strb	r3, [r4, #8]
  }
}
   b72ec:	bd38      	pop	{r3, r4, r5, pc}

000b72ee <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b72ee:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b72f0:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b72f2:	4604      	mov	r4, r0
  if (m_spiActive) {
   b72f4:	b16b      	cbz	r3, b7312 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b72f6:	6843      	ldr	r3, [r0, #4]
   b72f8:	2101      	movs	r1, #1
   b72fa:	7d18      	ldrb	r0, [r3, #20]
   b72fc:	f00a f869 	bl	c13d2 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7300:	6860      	ldr	r0, [r4, #4]
   b7302:	21ff      	movs	r1, #255	; 0xff
   b7304:	f7ff ffbc 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7308:	6860      	ldr	r0, [r4, #4]
   b730a:	f000 fa67 	bl	b77dc <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b730e:	2300      	movs	r3, #0
   b7310:	7223      	strb	r3, [r4, #8]
  }
}
   b7312:	bd10      	pop	{r4, pc}

000b7314 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7316:	4604      	mov	r4, r0
   b7318:	460d      	mov	r5, r1
   b731a:	4616      	mov	r6, r2
   b731c:	f005 ff1c 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7320:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7322:	6860      	ldr	r0, [r4, #4]
   b7324:	f7ff ffae 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7328:	28ff      	cmp	r0, #255	; 0xff
   b732a:	7260      	strb	r0, [r4, #9]
   b732c:	d10e      	bne.n	b734c <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b732e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7332:	4639      	mov	r1, r7
   b7334:	4620      	mov	r0, r4
   b7336:	f7ff ffa7 	bl	b7288 <_ZN9SdSpiCard10isTimedOutEtt>
   b733a:	2800      	cmp	r0, #0
   b733c:	d0f1      	beq.n	b7322 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b733e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7340:	4620      	mov	r0, r4
   b7342:	7023      	strb	r3, [r4, #0]
   b7344:	f7ff ffd3 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7348:	2000      	movs	r0, #0
}
   b734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b734c:	28fe      	cmp	r0, #254	; 0xfe
   b734e:	d001      	beq.n	b7354 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7350:	2350      	movs	r3, #80	; 0x50
   b7352:	e7f5      	b.n	b7340 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7354:	6860      	ldr	r0, [r4, #4]
   b7356:	4632      	mov	r2, r6
   b7358:	4629      	mov	r1, r5
   b735a:	f000 fa47 	bl	b77ec <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b735e:	7260      	strb	r0, [r4, #9]
   b7360:	b108      	cbz	r0, b7366 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7362:	2360      	movs	r3, #96	; 0x60
   b7364:	e7ec      	b.n	b7340 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7366:	6860      	ldr	r0, [r4, #4]
   b7368:	f7ff ff8c 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b736c:	6860      	ldr	r0, [r4, #4]
   b736e:	f7ff ff89 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7372:	2001      	movs	r0, #1
   b7374:	e7e9      	b.n	b734a <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7376 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7376:	b570      	push	{r4, r5, r6, lr}
   b7378:	4604      	mov	r4, r0
   b737a:	460e      	mov	r6, r1
   b737c:	f005 feec 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   b7380:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7382:	4632      	mov	r2, r6
   b7384:	4629      	mov	r1, r5
   b7386:	4620      	mov	r0, r4
   b7388:	f7ff ff7e 	bl	b7288 <_ZN9SdSpiCard10isTimedOutEtt>
   b738c:	b930      	cbnz	r0, b739c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b738e:	6860      	ldr	r0, [r4, #4]
   b7390:	f7ff ff78 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7394:	28ff      	cmp	r0, #255	; 0xff
   b7396:	d1f4      	bne.n	b7382 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7398:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b739a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b739c:	2000      	movs	r0, #0
   b739e:	e7fc      	b.n	b739a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b73a0 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b73a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b73a2:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b73a4:	9201      	str	r2, [sp, #4]
   b73a6:	4604      	mov	r4, r0
   b73a8:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b73aa:	b90b      	cbnz	r3, b73b0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b73ac:	f7ff ff90 	bl	b72d0 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b73b0:	b125      	cbz	r5, b73bc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b73b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b73b6:	4620      	mov	r0, r4
   b73b8:	f7ff ffdd 	bl	b7376 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b73bc:	6860      	ldr	r0, [r4, #4]
   b73be:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b73c2:	f7ff ff5d 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b73c6:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b73c8:	af01      	add	r7, sp, #4
   b73ca:	5db9      	ldrb	r1, [r7, r6]
   b73cc:	6860      	ldr	r0, [r4, #4]
   b73ce:	f7ff ff57 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b73d2:	3e01      	subs	r6, #1
   b73d4:	d2f9      	bcs.n	b73ca <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b73d6:	2d00      	cmp	r5, #0
   b73d8:	6860      	ldr	r0, [r4, #4]
   b73da:	bf0c      	ite	eq
   b73dc:	2195      	moveq	r1, #149	; 0x95
   b73de:	2187      	movne	r1, #135	; 0x87
   b73e0:	f7ff ff4e 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b73e4:	6860      	ldr	r0, [r4, #4]
   b73e6:	f7ff ff4d 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73ea:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b73ec:	6860      	ldr	r0, [r4, #4]
   b73ee:	f7ff ff49 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b73f2:	0603      	lsls	r3, r0, #24
   b73f4:	7260      	strb	r0, [r4, #9]
   b73f6:	d503      	bpl.n	b7400 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b73f8:	3d01      	subs	r5, #1
   b73fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b73fe:	d1f5      	bne.n	b73ec <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7400:	b003      	add	sp, #12
   b7402:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7404 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7404:	b570      	push	{r4, r5, r6, lr}
   b7406:	4604      	mov	r4, r0
   b7408:	460d      	mov	r5, r1
   b740a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b740c:	2137      	movs	r1, #55	; 0x37
   b740e:	2200      	movs	r2, #0
   b7410:	f7ff ffc6 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7414:	4632      	mov	r2, r6
   b7416:	4629      	mov	r1, r5
   b7418:	4620      	mov	r0, r4
  }
   b741a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b741e:	f7ff bfbf 	b.w	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7424 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7428:	2500      	movs	r5, #0
   b742a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b742c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b742e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7430:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7432:	4604      	mov	r4, r0
   b7434:	4690      	mov	r8, r2
   b7436:	461e      	mov	r6, r3
   b7438:	f005 fe8e 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b743c:	4641      	mov	r1, r8
   b743e:	4607      	mov	r7, r0
   b7440:	6860      	ldr	r0, [r4, #4]
   b7442:	f000 f9bb 	bl	b77bc <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7446:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7448:	4a49      	ldr	r2, [pc, #292]	; (b7570 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b744a:	721d      	strb	r5, [r3, #8]
   b744c:	2501      	movs	r5, #1
   b744e:	60da      	str	r2, [r3, #12]
   b7450:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7452:	4620      	mov	r0, r4
   b7454:	f7ff ff3c 	bl	b72d0 <_ZN9SdSpiCard8spiStartEv>
   b7458:	6863      	ldr	r3, [r4, #4]
   b745a:	4629      	mov	r1, r5
   b745c:	7d18      	ldrb	r0, [r3, #20]
   b745e:	f009 ffb8 	bl	c13d2 <digitalWrite>
   b7462:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7464:	6860      	ldr	r0, [r4, #4]
   b7466:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7468:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b746a:	f7ff ff09 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b746e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7472:	d1f7      	bne.n	b7464 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7474:	6863      	ldr	r3, [r4, #4]
   b7476:	4629      	mov	r1, r5
   b7478:	7d18      	ldrb	r0, [r3, #20]
   b747a:	f009 ffaa 	bl	c13d2 <digitalWrite>
  }
   b747e:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7480:	2200      	movs	r2, #0
   b7482:	4611      	mov	r1, r2
   b7484:	4620      	mov	r0, r4
   b7486:	f7ff ff8b 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b748a:	2801      	cmp	r0, #1
   b748c:	4680      	mov	r8, r0
   b748e:	d018      	beq.n	b74c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7490:	3d01      	subs	r5, #1
   b7492:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7496:	d107      	bne.n	b74a8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7498:	2320      	movs	r3, #32
  spiStop();
   b749a:	4620      	mov	r0, r4
   b749c:	7023      	strb	r3, [r4, #0]
   b749e:	f7ff ff26 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b74a2:	2000      	movs	r0, #0
}
   b74a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b74a8:	6860      	ldr	r0, [r4, #4]
   b74aa:	21fd      	movs	r1, #253	; 0xfd
   b74ac:	f7ff fee8 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b74b0:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b74b4:	6860      	ldr	r0, [r4, #4]
   b74b6:	f7ff fee5 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b74ba:	f1b8 0801 	subs.w	r8, r8, #1
   b74be:	d1f9      	bne.n	b74b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b74c0:	e7de      	b.n	b7480 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b74c2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b74c6:	2108      	movs	r1, #8
   b74c8:	4620      	mov	r0, r4
   b74ca:	f7ff ff69 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b74ce:	2805      	cmp	r0, #5
   b74d0:	d114      	bne.n	b74fc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b74d2:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b74d6:	2500      	movs	r5, #0
   b74d8:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b74da:	462a      	mov	r2, r5
   b74dc:	2129      	movs	r1, #41	; 0x29
   b74de:	4620      	mov	r0, r4
   b74e0:	f7ff ff90 	bl	b7404 <_ZN9SdSpiCard8cardAcmdEhm>
   b74e4:	4602      	mov	r2, r0
   b74e6:	b1d8      	cbz	r0, b7520 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b74e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b74ec:	4639      	mov	r1, r7
   b74ee:	4620      	mov	r0, r4
   b74f0:	f7ff feca 	bl	b7288 <_ZN9SdSpiCard10isTimedOutEtt>
   b74f4:	2800      	cmp	r0, #0
   b74f6:	d0f0      	beq.n	b74da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b74f8:	2343      	movs	r3, #67	; 0x43
   b74fa:	e7ce      	b.n	b749a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b74fc:	2504      	movs	r5, #4
      m_status = spiReceive();
   b74fe:	6860      	ldr	r0, [r4, #4]
   b7500:	f7ff fec0 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7504:	3d01      	subs	r5, #1
   b7506:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b750a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b750c:	d1f7      	bne.n	b74fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b750e:	28aa      	cmp	r0, #170	; 0xaa
   b7510:	d104      	bne.n	b751c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7512:	2302      	movs	r3, #2
   b7514:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7516:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b751a:	e7dd      	b.n	b74d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b751c:	2325      	movs	r3, #37	; 0x25
   b751e:	e7bc      	b.n	b749a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7520:	7aa3      	ldrb	r3, [r4, #10]
   b7522:	2b02      	cmp	r3, #2
   b7524:	d118      	bne.n	b7558 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7526:	213a      	movs	r1, #58	; 0x3a
   b7528:	4620      	mov	r0, r4
   b752a:	f7ff ff39 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b752e:	b108      	cbz	r0, b7534 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7530:	2337      	movs	r3, #55	; 0x37
   b7532:	e7b2      	b.n	b749a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7534:	6860      	ldr	r0, [r4, #4]
   b7536:	f7ff fea5 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b753a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b753e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7540:	bf04      	itt	eq
   b7542:	2303      	moveq	r3, #3
   b7544:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7546:	6860      	ldr	r0, [r4, #4]
   b7548:	f7ff fe9c 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b754c:	6860      	ldr	r0, [r4, #4]
   b754e:	f7ff fe99 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7552:	6860      	ldr	r0, [r4, #4]
   b7554:	f7ff fe96 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7558:	4620      	mov	r0, r4
   b755a:	f7ff fec8 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b755e:	6863      	ldr	r3, [r4, #4]
   b7560:	7930      	ldrb	r0, [r6, #4]
   b7562:	68b1      	ldr	r1, [r6, #8]
   b7564:	89b2      	ldrh	r2, [r6, #12]
   b7566:	821a      	strh	r2, [r3, #16]
   b7568:	7218      	strb	r0, [r3, #8]
   b756a:	60d9      	str	r1, [r3, #12]
  return true;
   b756c:	2001      	movs	r0, #1
   b756e:	e799      	b.n	b74a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7570:	0003d090 	.word	0x0003d090

000b7574 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7574:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7576:	7a83      	ldrb	r3, [r0, #10]
   b7578:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b757a:	bf18      	it	ne
   b757c:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b757e:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7580:	460a      	mov	r2, r1
   b7582:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7584:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7586:	f7ff ff0b 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b758a:	b130      	cbz	r0, b759a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b758c:	2330      	movs	r3, #48	; 0x30
   b758e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7590:	4620      	mov	r0, r4
   b7592:	f7ff feac 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7596:	2500      	movs	r5, #0
   b7598:	e00b      	b.n	b75b2 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b759a:	4629      	mov	r1, r5
   b759c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b75a0:	4620      	mov	r0, r4
   b75a2:	f7ff feb7 	bl	b7314 <_ZN9SdSpiCard8readDataEPhj>
   b75a6:	4605      	mov	r5, r0
   b75a8:	2800      	cmp	r0, #0
   b75aa:	d0f1      	beq.n	b7590 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b75ac:	4620      	mov	r0, r4
   b75ae:	f7ff fe9e 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
}
   b75b2:	4628      	mov	r0, r5
   b75b4:	bd38      	pop	{r3, r4, r5, pc}

000b75b6 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75b6:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b75b8:	7a83      	ldrb	r3, [r0, #10]
   b75ba:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75bc:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b75be:	bf18      	it	ne
   b75c0:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b75c2:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b75c4:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b75c6:	f7ff feeb 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b75ca:	b130      	cbz	r0, b75da <_ZN9SdSpiCard9readStartEm+0x24>
   b75cc:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b75ce:	4620      	mov	r0, r4
   b75d0:	7023      	strb	r3, [r4, #0]
   b75d2:	f7ff fe8c 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75d6:	2000      	movs	r0, #0
}
   b75d8:	bd10      	pop	{r4, pc}
  return true;
   b75da:	2001      	movs	r0, #1
   b75dc:	e7fc      	b.n	b75d8 <_ZN9SdSpiCard9readStartEm+0x22>

000b75de <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b75de:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b75e0:	2200      	movs	r2, #0
   b75e2:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b75e4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b75e6:	f7ff fedb 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b75ea:	b130      	cbz	r0, b75fa <_ZN9SdSpiCard8readStopEv+0x1c>
   b75ec:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b75ee:	4620      	mov	r0, r4
   b75f0:	7023      	strb	r3, [r4, #0]
   b75f2:	f7ff fe7c 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b75f6:	2000      	movs	r0, #0
}
   b75f8:	bd10      	pop	{r4, pc}
  spiStop();
   b75fa:	4620      	mov	r0, r4
   b75fc:	f7ff fe77 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7600:	2001      	movs	r0, #1
   b7602:	e7f9      	b.n	b75f8 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7604 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7606:	4604      	mov	r4, r0
   b7608:	4616      	mov	r6, r2
   b760a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b760c:	f7ff ffd3 	bl	b75b6 <_ZN9SdSpiCard9readStartEm>
   b7610:	b168      	cbz	r0, b762e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7612:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7614:	b2ab      	uxth	r3, r5
   b7616:	429f      	cmp	r7, r3
   b7618:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b761c:	d909      	bls.n	b7632 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b761e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7622:	4620      	mov	r0, r4
   b7624:	f7ff fe76 	bl	b7314 <_ZN9SdSpiCard8readDataEPhj>
   b7628:	3501      	adds	r5, #1
   b762a:	2800      	cmp	r0, #0
   b762c:	d1f2      	bne.n	b7614 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b762e:	2000      	movs	r0, #0
   b7630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7632:	4620      	mov	r0, r4
}
   b7634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7638:	f7ff bfd1 	b.w	b75de <_ZN9SdSpiCard8readStopEv>

000b763c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b763c:	b538      	push	{r3, r4, r5, lr}
   b763e:	4604      	mov	r4, r0
   b7640:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7642:	6840      	ldr	r0, [r0, #4]
   b7644:	f7ff fe1c 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7648:	f44f 7200 	mov.w	r2, #512	; 0x200
   b764c:	6860      	ldr	r0, [r4, #4]
   b764e:	4629      	mov	r1, r5
   b7650:	f000 f8e6 	bl	b7820 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7654:	6860      	ldr	r0, [r4, #4]
   b7656:	21ff      	movs	r1, #255	; 0xff
   b7658:	f7ff fe12 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b765c:	6860      	ldr	r0, [r4, #4]
   b765e:	21ff      	movs	r1, #255	; 0xff
   b7660:	f7ff fe0e 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7664:	6860      	ldr	r0, [r4, #4]
   b7666:	f7ff fe0d 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b766a:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b766c:	f000 001f 	and.w	r0, r0, #31
   b7670:	2805      	cmp	r0, #5
   b7672:	d006      	beq.n	b7682 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7674:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7676:	4620      	mov	r0, r4
   b7678:	7023      	strb	r3, [r4, #0]
   b767a:	f7ff fe38 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b767e:	2000      	movs	r0, #0
}
   b7680:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7682:	2001      	movs	r0, #1
   b7684:	e7fc      	b.n	b7680 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7686 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7686:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7688:	7a83      	ldrb	r3, [r0, #10]
   b768a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b768c:	bf18      	it	ne
   b768e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7690:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7692:	460a      	mov	r2, r1
   b7694:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7696:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7698:	f7ff fe82 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b769c:	4606      	mov	r6, r0
   b769e:	b130      	cbz	r0, b76ae <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b76a0:	2332      	movs	r3, #50	; 0x32
   b76a2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b76a4:	4620      	mov	r0, r4
   b76a6:	f7ff fe22 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b76aa:	2500      	movs	r5, #0
   b76ac:	e01f      	b.n	b76ee <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b76ae:	462a      	mov	r2, r5
   b76b0:	21fe      	movs	r1, #254	; 0xfe
   b76b2:	4620      	mov	r0, r4
   b76b4:	f7ff ffc2 	bl	b763c <_ZN9SdSpiCard9writeDataEhPKh>
   b76b8:	2800      	cmp	r0, #0
   b76ba:	d0f3      	beq.n	b76a4 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b76c0:	4620      	mov	r0, r4
   b76c2:	f7ff fe58 	bl	b7376 <_ZN9SdSpiCard11waitNotBusyEt>
   b76c6:	4605      	mov	r5, r0
   b76c8:	b908      	cbnz	r0, b76ce <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b76ca:	235a      	movs	r3, #90	; 0x5a
   b76cc:	e7e9      	b.n	b76a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b76ce:	4632      	mov	r2, r6
   b76d0:	210d      	movs	r1, #13
   b76d2:	4620      	mov	r0, r4
   b76d4:	f7ff fe64 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b76d8:	b108      	cbz	r0, b76de <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b76da:	2329      	movs	r3, #41	; 0x29
   b76dc:	e7e1      	b.n	b76a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b76de:	6860      	ldr	r0, [r4, #4]
   b76e0:	f7ff fdd0 	bl	b7284 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b76e4:	2800      	cmp	r0, #0
   b76e6:	d1f8      	bne.n	b76da <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b76e8:	4620      	mov	r0, r4
   b76ea:	f7ff fe00 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
}
   b76ee:	4628      	mov	r0, r5
   b76f0:	bd70      	pop	{r4, r5, r6, pc}

000b76f2 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b76f2:	b513      	push	{r0, r1, r4, lr}
   b76f4:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76f6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b76fa:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b76fc:	f7ff fe3b 	bl	b7376 <_ZN9SdSpiCard11waitNotBusyEt>
   b7700:	9a01      	ldr	r2, [sp, #4]
   b7702:	b930      	cbnz	r0, b7712 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7704:	235b      	movs	r3, #91	; 0x5b
   b7706:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7708:	4620      	mov	r0, r4
   b770a:	f7ff fdf0 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b770e:	2000      	movs	r0, #0
   b7710:	e005      	b.n	b771e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7712:	21fc      	movs	r1, #252	; 0xfc
   b7714:	4620      	mov	r0, r4
   b7716:	f7ff ff91 	bl	b763c <_ZN9SdSpiCard9writeDataEhPKh>
   b771a:	2800      	cmp	r0, #0
   b771c:	d0f4      	beq.n	b7708 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b771e:	b002      	add	sp, #8
   b7720:	bd10      	pop	{r4, pc}

000b7722 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7722:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7724:	7a83      	ldrb	r3, [r0, #10]
   b7726:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7728:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b772a:	bf18      	it	ne
   b772c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b772e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7730:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7732:	f7ff fe35 	bl	b73a0 <_ZN9SdSpiCard11cardCommandEhm>
   b7736:	b130      	cbz	r0, b7746 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7738:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b773a:	4620      	mov	r0, r4
   b773c:	7023      	strb	r3, [r4, #0]
   b773e:	f7ff fdd6 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7742:	2000      	movs	r0, #0
}
   b7744:	bd10      	pop	{r4, pc}
  return true;
   b7746:	2001      	movs	r0, #1
   b7748:	e7fc      	b.n	b7744 <_ZN9SdSpiCard10writeStartEm+0x22>

000b774a <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b774a:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b774c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7750:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7752:	f7ff fe10 	bl	b7376 <_ZN9SdSpiCard11waitNotBusyEt>
   b7756:	4605      	mov	r5, r0
   b7758:	b930      	cbnz	r0, b7768 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b775a:	2356      	movs	r3, #86	; 0x56
   b775c:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b775e:	4620      	mov	r0, r4
   b7760:	f7ff fdc5 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7764:	4628      	mov	r0, r5
   b7766:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7768:	6860      	ldr	r0, [r4, #4]
   b776a:	21fd      	movs	r1, #253	; 0xfd
   b776c:	f7ff fd88 	bl	b7280 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7770:	e7f5      	b.n	b775e <_ZN9SdSpiCard9writeStopEv+0x14>

000b7772 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7774:	4604      	mov	r4, r0
   b7776:	4616      	mov	r6, r2
   b7778:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b777a:	f7ff ffd2 	bl	b7722 <_ZN9SdSpiCard10writeStartEm>
   b777e:	b170      	cbz	r0, b779e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7780:	2500      	movs	r5, #0
   b7782:	42bd      	cmp	r5, r7
   b7784:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7788:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b778a:	d004      	beq.n	b7796 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b778c:	f7ff ffb1 	bl	b76f2 <_ZN9SdSpiCard9writeDataEPKh>
   b7790:	b128      	cbz	r0, b779e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7792:	3501      	adds	r5, #1
   b7794:	e7f5      	b.n	b7782 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b779a:	f7ff bfd6 	b.w	b774a <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b779e:	4620      	mov	r0, r4
   b77a0:	f7ff fda5 	bl	b72ee <_ZN9SdSpiCard7spiStopEv>
}
   b77a4:	2000      	movs	r0, #0
   b77a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77a8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b77a8:	4b01      	ldr	r3, [pc, #4]	; (b77b0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b77aa:	2201      	movs	r2, #1
   b77ac:	701a      	strb	r2, [r3, #0]
}
   b77ae:	4770      	bx	lr
   b77b0:	2003e61c 	.word	0x2003e61c

000b77b4 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b77b4:	1d01      	adds	r1, r0, #4
   b77b6:	6800      	ldr	r0, [r0, #0]
   b77b8:	f009 b980 	b.w	c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b77bc <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b77bc:	b510      	push	{r4, lr}
   b77be:	4604      	mov	r4, r0
  m_csPin = csPin;
   b77c0:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b77c2:	6800      	ldr	r0, [r0, #0]
   b77c4:	f009 f935 	bl	c0a32 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b77c8:	7d20      	ldrb	r0, [r4, #20]
   b77ca:	2101      	movs	r1, #1
   b77cc:	f009 fdf0 	bl	c13b0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b77d0:	7d20      	ldrb	r0, [r4, #20]
   b77d2:	2101      	movs	r1, #1
}
   b77d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b77d8:	f009 bdfb 	b.w	c13d2 <digitalWrite>

000b77dc <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b77dc:	6800      	ldr	r0, [r0, #0]
   b77de:	f009 b953 	b.w	c0a88 <_ZN8SPIClass14endTransactionEv>

000b77e2 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b77e2:	6800      	ldr	r0, [r0, #0]
   b77e4:	21ff      	movs	r1, #255	; 0xff
   b77e6:	f009 ba09 	b.w	c0bfc <_ZN8SPIClass8transferEh>
	...

000b77ec <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b77ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b77ee:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77f0:	4a07      	ldr	r2, [pc, #28]	; (b7810 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b77f2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b77f4:	2500      	movs	r5, #0
   b77f6:	4c07      	ldr	r4, [pc, #28]	; (b7814 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77f8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b77fa:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b77fc:	460a      	mov	r2, r1
   b77fe:	4629      	mov	r1, r5
   b7800:	f009 fa02 	bl	c0c08 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7804:	7823      	ldrb	r3, [r4, #0]
   b7806:	2b00      	cmp	r3, #0
   b7808:	d0fc      	beq.n	b7804 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b780a:	2000      	movs	r0, #0
   b780c:	b003      	add	sp, #12
   b780e:	bd30      	pop	{r4, r5, pc}
   b7810:	000b77a9 	.word	0x000b77a9
   b7814:	2003e61c 	.word	0x2003e61c

000b7818 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7818:	6800      	ldr	r0, [r0, #0]
   b781a:	f009 b9ef 	b.w	c0bfc <_ZN8SPIClass8transferEh>
	...

000b7820 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7822:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7824:	4a06      	ldr	r2, [pc, #24]	; (b7840 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7826:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7828:	2500      	movs	r5, #0
   b782a:	4c06      	ldr	r4, [pc, #24]	; (b7844 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b782c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b782e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7830:	462a      	mov	r2, r5
   b7832:	f009 f9e9 	bl	c0c08 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7836:	7823      	ldrb	r3, [r4, #0]
   b7838:	2b00      	cmp	r3, #0
   b783a:	d0fc      	beq.n	b7836 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b783c:	b003      	add	sp, #12
   b783e:	bd30      	pop	{r4, r5, pc}
   b7840:	000b77a9 	.word	0x000b77a9
   b7844:	2003e61c 	.word	0x2003e61c

000b7848 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b7848:	4770      	bx	lr

000b784a <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b784a:	4770      	bx	lr

000b784c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b784c:	b538      	push	{r3, r4, r5, lr}
   b784e:	460c      	mov	r4, r1
   b7850:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b7852:	2220      	movs	r2, #32
   b7854:	2100      	movs	r1, #0
   b7856:	f104 0008 	add.w	r0, r4, #8
   b785a:	f00c f891 	bl	c3980 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b785e:	4909      	ldr	r1, [pc, #36]	; (b7884 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b7860:	220b      	movs	r2, #11
   b7862:	4620      	mov	r0, r4
   b7864:	f00c f946 	bl	c3af4 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b7868:	2301      	movs	r3, #1
   b786a:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b786c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b786e:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b7870:	2302      	movs	r3, #2
   b7872:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b7874:	4b04      	ldr	r3, [pc, #16]	; (b7888 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b7876:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b7878:	4b04      	ldr	r3, [pc, #16]	; (b788c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b787a:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b787c:	4b04      	ldr	r3, [pc, #16]	; (b7890 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b787e:	6223      	str	r3, [r4, #32]
}
   b7880:	bd38      	pop	{r3, r4, r5, pc}
   b7882:	bf00      	nop
   b7884:	000c61bc 	.word	0x000c61bc
   b7888:	c4c80000 	.word	0xc4c80000
   b788c:	44c80000 	.word	0x44c80000
   b7890:	3c75c28f 	.word	0x3c75c28f

000b7894 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b7894:	b510      	push	{r4, lr}
   b7896:	2128      	movs	r1, #40	; 0x28
   b7898:	4604      	mov	r4, r0
   b789a:	f7fc fc02 	bl	b40a2 <_ZdlPvj>
   b789e:	4620      	mov	r0, r4
   b78a0:	bd10      	pop	{r4, pc}
	...

000b78a4 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b78a4:	4a03      	ldr	r2, [pc, #12]	; (b78b4 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b78a6:	6002      	str	r2, [r0, #0]
   b78a8:	2200      	movs	r2, #0
   b78aa:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b78ae:	7602      	strb	r2, [r0, #24]
   b78b0:	4770      	bx	lr
   b78b2:	bf00      	nop
   b78b4:	000c61dc 	.word	0x000c61dc

000b78b8 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b78b8:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78ba:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b78bc:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78be:	2200      	movs	r2, #0
   b78c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b78c4:	2506      	movs	r5, #6
   b78c6:	2228      	movs	r2, #40	; 0x28
   b78c8:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b78cc:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b78ce:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b78d2:	a806      	add	r0, sp, #24
   b78d4:	f005 f87c 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b78d8:	462a      	mov	r2, r5
   b78da:	a904      	add	r1, sp, #16
   b78dc:	a806      	add	r0, sp, #24
   b78de:	f005 f8f5 	bl	bcacc <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b78e2:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b78e4:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b78e8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b78ec:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b78f0:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b78f2:	2d03      	cmp	r5, #3
   b78f4:	bf98      	it	ls
   b78f6:	4812      	ldrls	r0, [pc, #72]	; (b7940 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b78f8:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b78fa:	ee07 1a10 	vmov	s14, r1
   b78fe:	bf9c      	itt	ls
   b7900:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b7904:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b7908:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b790a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b790e:	bf88      	it	hi
   b7910:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b7914:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b7918:	ee07 2a10 	vmov	s14, r2
   b791c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b7920:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b7924:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b7928:	ee07 3a10 	vmov	s14, r3
   b792c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b7930:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b7934:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b7938:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b793c:	b00d      	add	sp, #52	; 0x34
   b793e:	bd30      	pop	{r4, r5, pc}
   b7940:	000c61c4 	.word	0x000c61c4

000b7944 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b7944:	b538      	push	{r3, r4, r5, lr}
   b7946:	460c      	mov	r4, r1
   b7948:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b794a:	2220      	movs	r2, #32
   b794c:	2100      	movs	r1, #0
   b794e:	1d20      	adds	r0, r4, #4
   b7950:	f00c f816 	bl	c3980 <memset>
  event->version = sizeof(sensors_event_t);
   b7954:	2324      	movs	r3, #36	; 0x24
   b7956:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b7958:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b795a:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b795c:	2302      	movs	r3, #2
   b795e:	60a3      	str	r3, [r4, #8]
   b7960:	f005 fbfa 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b7964:	6120      	str	r0, [r4, #16]
  read();
   b7966:	4628      	mov	r0, r5
   b7968:	f7ff ffa6 	bl	b78b8 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b796c:	edd5 7a03 	vldr	s15, [r5, #12]
   b7970:	ed9f 7a09 	vldr	s14, [pc, #36]	; b7998 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b7974:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b7978:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b797a:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b797e:	edd5 7a04 	vldr	s15, [r5, #16]
   b7982:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7986:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b798a:	edd5 7a05 	vldr	s15, [r5, #20]
   b798e:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7992:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b7996:	bd38      	pop	{r3, r4, r5, pc}
   b7998:	42c80000 	.word	0x42c80000

000b799c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b799c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b799e:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b79a0:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b79a2:	2700      	movs	r7, #0
   b79a4:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b79a8:	2320      	movs	r3, #32
   b79aa:	9300      	str	r3, [sp, #0]
   b79ac:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b79ae:	460e      	mov	r6, r1
   b79b0:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b79b2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b79b6:	462b      	mov	r3, r5
   b79b8:	a808      	add	r0, sp, #32
   b79ba:	f005 f809 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b79be:	2305      	movs	r3, #5
   b79c0:	2202      	movs	r2, #2
   b79c2:	a908      	add	r1, sp, #32
   b79c4:	a804      	add	r0, sp, #16
   b79c6:	f005 f8df 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b79ca:	4631      	mov	r1, r6
   b79cc:	a804      	add	r0, sp, #16
   b79ce:	f005 f8ed 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b79d2:	2323      	movs	r3, #35	; 0x23
   b79d4:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b79d8:	9300      	str	r3, [sp, #0]
   b79da:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b79de:	462b      	mov	r3, r5
   b79e0:	9501      	str	r5, [sp, #4]
   b79e2:	a80e      	add	r0, sp, #56	; 0x38
   b79e4:	f004 fff4 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b79e8:	2302      	movs	r3, #2
   b79ea:	461a      	mov	r2, r3
   b79ec:	a90e      	add	r1, sp, #56	; 0x38
   b79ee:	a806      	add	r0, sp, #24
   b79f0:	f005 f8ca 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b79f4:	4631      	mov	r1, r6
   b79f6:	a806      	add	r0, sp, #24
   b79f8:	f005 f8d8 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b79fc:	b015      	add	sp, #84	; 0x54
   b79fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a00 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7a00:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7a02:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b7a04:	b08c      	sub	sp, #48	; 0x30
   b7a06:	4606      	mov	r6, r0
   b7a08:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b7a0a:	d103      	bne.n	b7a14 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7a0c:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7a0e:	f7ff ffc5 	bl	b799c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b7a12:	e009      	b.n	b7a28 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b7a14:	2903      	cmp	r1, #3
   b7a16:	d003      	beq.n	b7a20 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b7a18:	2905      	cmp	r1, #5
   b7a1a:	d103      	bne.n	b7a24 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b7a1c:	2101      	movs	r1, #1
   b7a1e:	e7f6      	b.n	b7a0e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b7a20:	2102      	movs	r1, #2
   b7a22:	e7f4      	b.n	b7a0e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b7a24:	2907      	cmp	r1, #7
   b7a26:	d01b      	beq.n	b7a60 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b7a28:	200a      	movs	r0, #10
   b7a2a:	f005 fedf 	bl	bd7ec <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b7a2e:	2501      	movs	r5, #1
   b7a30:	2300      	movs	r3, #0
   b7a32:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7a36:	2320      	movs	r3, #32
   b7a38:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b7a3c:	9300      	str	r3, [sp, #0]
   b7a3e:	9501      	str	r5, [sp, #4]
   b7a40:	462b      	mov	r3, r5
   b7a42:	a806      	add	r0, sp, #24
   b7a44:	f004 ffc4 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b7a48:	462b      	mov	r3, r5
   b7a4a:	2204      	movs	r2, #4
   b7a4c:	a906      	add	r1, sp, #24
   b7a4e:	a804      	add	r0, sp, #16
   b7a50:	f005 f89a 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b7a54:	4621      	mov	r1, r4
   b7a56:	a804      	add	r0, sp, #16
   b7a58:	f005 f8a8 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a5c:	b00c      	add	sp, #48	; 0x30
   b7a5e:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b7a60:	2100      	movs	r1, #0
   b7a62:	e7d4      	b.n	b7a0e <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b7a64 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a64:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a66:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a68:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a6a:	2500      	movs	r5, #0
   b7a6c:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7a70:	2222      	movs	r2, #34	; 0x22
   b7a72:	9301      	str	r3, [sp, #4]
   b7a74:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b7a76:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b7a78:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7a7c:	a806      	add	r0, sp, #24
   b7a7e:	f004 ffa7 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b7a82:	462b      	mov	r3, r5
   b7a84:	2202      	movs	r2, #2
   b7a86:	a906      	add	r1, sp, #24
   b7a88:	a804      	add	r0, sp, #16
   b7a8a:	f005 f87d 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b7a8e:	4621      	mov	r1, r4
   b7a90:	a804      	add	r0, sp, #16
   b7a92:	f005 f88b 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b7a96:	b00d      	add	sp, #52	; 0x34
   b7a98:	bd30      	pop	{r4, r5, pc}

000b7a9a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7a9a:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7a9c:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7a9e:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7aa0:	2200      	movs	r2, #0
   b7aa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7aa6:	2221      	movs	r2, #33	; 0x21
   b7aa8:	9301      	str	r3, [sp, #4]
   b7aaa:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b7aac:	460d      	mov	r5, r1
   b7aae:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ab0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7ab4:	a806      	add	r0, sp, #24
   b7ab6:	f004 ff8b 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7aba:	2305      	movs	r3, #5
   b7abc:	2202      	movs	r2, #2
   b7abe:	a906      	add	r1, sp, #24
   b7ac0:	a804      	add	r0, sp, #16
   b7ac2:	f005 f861 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b7ac6:	4629      	mov	r1, r5
   b7ac8:	a804      	add	r0, sp, #16
   b7aca:	f005 f86f 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b7ace:	7625      	strb	r5, [r4, #24]
}
   b7ad0:	b00d      	add	sp, #52	; 0x34
   b7ad2:	bd30      	pop	{r4, r5, pc}

000b7ad4 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7ad4:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ad6:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7ad8:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7ada:	2200      	movs	r2, #0
   b7adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b7ae0:	2221      	movs	r2, #33	; 0x21
   b7ae2:	9301      	str	r3, [sp, #4]
   b7ae4:	9200      	str	r2, [sp, #0]
   b7ae6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b7aea:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7aec:	a806      	add	r0, sp, #24
   b7aee:	f004 ff6f 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b7af2:	2305      	movs	r3, #5
   b7af4:	2202      	movs	r2, #2
   b7af6:	a906      	add	r1, sp, #24
   b7af8:	a804      	add	r0, sp, #16
   b7afa:	f005 f845 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b7afe:	a804      	add	r0, sp, #16
   b7b00:	f005 f847 	bl	bcb92 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b7b04:	b2c0      	uxtb	r0, r0
   b7b06:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b7b08:	b00c      	add	sp, #48	; 0x30
   b7b0a:	bd10      	pop	{r4, pc}

000b7b0c <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b7b0c:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b0e:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b7b10:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b12:	2501      	movs	r5, #1
   b7b14:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7b18:	2321      	movs	r3, #33	; 0x21
   b7b1a:	9300      	str	r3, [sp, #0]
   b7b1c:	9501      	str	r5, [sp, #4]
   b7b1e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b7b22:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b7b24:	462b      	mov	r3, r5
   b7b26:	a806      	add	r0, sp, #24
   b7b28:	f004 ff52 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b7b2c:	2302      	movs	r3, #2
   b7b2e:	462a      	mov	r2, r5
   b7b30:	a906      	add	r1, sp, #24
   b7b32:	a804      	add	r0, sp, #16
   b7b34:	f005 f828 	bl	bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b7b38:	4629      	mov	r1, r5
   b7b3a:	a804      	add	r0, sp, #16
   b7b3c:	f005 f836 	bl	bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b7b40:	200a      	movs	r0, #10
   b7b42:	f005 fe53 	bl	bd7ec <delay>
  getRange();
   b7b46:	4620      	mov	r0, r4
   b7b48:	f7ff ffc4 	bl	b7ad4 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b7b4c:	b00d      	add	sp, #52	; 0x34
   b7b4e:	bd30      	pop	{r4, r5, pc}

000b7b50 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b7b50:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b52:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b7b54:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b56:	2500      	movs	r5, #0
   b7b58:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b7b5c:	230f      	movs	r3, #15
   b7b5e:	9300      	str	r3, [sp, #0]
   b7b60:	9601      	str	r6, [sp, #4]
   b7b62:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7b66:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b7b68:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b7b6a:	a804      	add	r0, sp, #16
   b7b6c:	f004 ff30 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b7b70:	a804      	add	r0, sp, #16
   b7b72:	f004 ffed 	bl	bcb50 <_ZN23Adafruit_BusIO_Register4readEv>
   b7b76:	283d      	cmp	r0, #61	; 0x3d
   b7b78:	d115      	bne.n	b7ba6 <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b7b7a:	4620      	mov	r0, r4
   b7b7c:	f7ff ffc6 	bl	b7b0c <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b7b80:	2103      	movs	r1, #3
   b7b82:	4620      	mov	r0, r4
   b7b84:	f7ff ff0a 	bl	b799c <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b7b88:	4631      	mov	r1, r6
   b7b8a:	4620      	mov	r0, r4
   b7b8c:	f7ff ff38 	bl	b7a00 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b7b90:	4629      	mov	r1, r5
   b7b92:	4620      	mov	r0, r4
   b7b94:	f7ff ff81 	bl	b7a9a <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b7b98:	4620      	mov	r0, r4
   b7b9a:	4629      	mov	r1, r5
   b7b9c:	f7ff ff62 	bl	b7a64 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b7ba0:	4630      	mov	r0, r6
}
   b7ba2:	b00a      	add	sp, #40	; 0x28
   b7ba4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b7ba6:	4628      	mov	r0, r5
   b7ba8:	e7fb      	b.n	b7ba2 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b7baa <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b7bac:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b7bae:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b7bb0:	b95b      	cbnz	r3, b7bca <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b7bb2:	2010      	movs	r0, #16
   b7bb4:	e9cd 1200 	strd	r1, r2, [sp]
   b7bb8:	f7fc fa6d 	bl	b4096 <_Znwj>
   b7bbc:	4605      	mov	r5, r0
   b7bbe:	b118      	cbz	r0, b7bc8 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b7bc0:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7bc4:	f005 f80b 	bl	bcbde <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b7bc8:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b7bca:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b7bcc:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b7bce:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b7bd0:	2101      	movs	r1, #1
   b7bd2:	f005 f820 	bl	bcc16 <_ZN18Adafruit_I2CDevice5beginEb>
   b7bd6:	b128      	cbz	r0, b7be4 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b7bd8:	4620      	mov	r0, r4
}
   b7bda:	b003      	add	sp, #12
   b7bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b7be0:	f7ff bfb6 	b.w	b7b50 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b7be4:	b003      	add	sp, #12
   b7be6:	bd30      	pop	{r4, r5, pc}

000b7be8 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7be8:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b7bea:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b7bec:	b08b      	sub	sp, #44	; 0x2c
   b7bee:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b7bf0:	2500      	movs	r5, #0
   b7bf2:	2232      	movs	r2, #50	; 0x32
   b7bf4:	2102      	movs	r1, #2
   b7bf6:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b7bfa:	e9cd 2100 	strd	r2, r1, [sp]
   b7bfe:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7c02:	a804      	add	r0, sp, #16
   b7c04:	f004 fee4 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b7c08:	462a      	mov	r2, r5
   b7c0a:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b7c0e:	a804      	add	r0, sp, #16
   b7c10:	f004 ff3e 	bl	bca90 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7c14:	b00b      	add	sp, #44	; 0x2c
   b7c16:	bd30      	pop	{r4, r5, pc}

000b7c18 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b7c18:	b530      	push	{r4, r5, lr}
   b7c1a:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c1c:	2500      	movs	r5, #0
  value |= latch << 1;
   b7c1e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b7c22:	0064      	lsls	r4, r4, #1
   b7c24:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b7c28:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b7c2c:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b7c30:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b7c34:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b7c38:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c3c:	2301      	movs	r3, #1
  value |= latch << 1;
   b7c3e:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c42:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b7c46:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b7c48:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b7c4a:	2230      	movs	r2, #48	; 0x30
   b7c4c:	9301      	str	r3, [sp, #4]
   b7c4e:	9200      	str	r2, [sp, #0]
   b7c50:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b7c54:	a804      	add	r0, sp, #16
   b7c56:	f004 febb 	bl	bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b7c5a:	462a      	mov	r2, r5
   b7c5c:	4621      	mov	r1, r4
   b7c5e:	a804      	add	r0, sp, #16
   b7c60:	f004 ff16 	bl	bca90 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b7c64:	b00b      	add	sp, #44	; 0x2c
   b7c66:	bd30      	pop	{r4, r5, pc}

000b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b7c68:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c6a:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b7c6c:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c6e:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c70:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b7c72:	041b      	lsls	r3, r3, #16
   b7c74:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b7c78:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b7c7a:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b7c7c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b7c80:	bd10      	pop	{r4, pc}

000b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b7c82:	1843      	adds	r3, r0, r1
   b7c84:	5c40      	ldrb	r0, [r0, r1]
   b7c86:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b7c88:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b7c8c:	4770      	bx	lr

000b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b7c8e:	b410      	push	{r4}
    if (base == 0) {
   b7c90:	b92a      	cbnz	r2, b7c9e <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b7c92:	6802      	ldr	r2, [r0, #0]
    }
}
   b7c94:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b7c98:	6892      	ldr	r2, [r2, #8]
   b7c9a:	b2c9      	uxtb	r1, r1
   b7c9c:	4710      	bx	r2
}
   b7c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b7ca2:	b2d2      	uxtb	r2, r2
   b7ca4:	f008 bde7 	b.w	c0876 <_ZN5Print11printNumberEmh>

000b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b7ca8:	b912      	cbnz	r2, b7cb0 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b7caa:	6803      	ldr	r3, [r0, #0]
   b7cac:	689b      	ldr	r3, [r3, #8]
   b7cae:	4718      	bx	r3
        return printNumber(val, base) + t;
   b7cb0:	b2d2      	uxtb	r2, r2
   b7cb2:	f008 bde0 	b.w	c0876 <_ZN5Print11printNumberEmh>

000b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b7cb6:	b510      	push	{r4, lr}
   b7cb8:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b7cba:	f7ff fff5 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b7cbe:	4620      	mov	r0, r4
    }
   b7cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b7cc4:	f008 bdbf 	b.w	c0846 <_ZN5Print7printlnEv>

000b7cc8 <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b7cc8:	6803      	ldr	r3, [r0, #0]
   b7cca:	b2c9      	uxtb	r1, r1
   b7ccc:	689b      	ldr	r3, [r3, #8]
   b7cce:	4718      	bx	r3

000b7cd0 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b7cd4:	8002      	strh	r2, [r0, #0]
   b7cd6:	2142      	movs	r1, #66	; 0x42
   b7cd8:	2200      	movs	r2, #0
   b7cda:	b510      	push	{r4, lr}
   b7cdc:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b7ce0:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b7ce4:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b7ce8:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b7cec:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b7cf0:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b7cf4:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b7cf8:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b7cfc:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b7d00:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b7d04:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b7d08:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b7d0c:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b7d10:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b7d14:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b7d18:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b7d1c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b7d20:	2180      	movs	r1, #128	; 0x80
   b7d22:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b7d26:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b7d2a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b7d2e:	4925      	ldr	r1, [pc, #148]	; (b7dc4 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b7d30:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b7d34:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b7d38:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b7d3c:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b7d40:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b7d44:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b7d48:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b7d4c:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b7d50:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b7d54:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b7d58:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b7d5c:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b7d60:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b7d64:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b7d68:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b7d6c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b7d70:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b7d74:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b7d78:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b7d7c:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b7d80:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b7d84:	4910      	ldr	r1, [pc, #64]	; (b7dc8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b7d86:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b7d8a:	f640 1164 	movw	r1, #2404	; 0x964
   b7d8e:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b7d92:	2158      	movs	r1, #88	; 0x58
   b7d94:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7d98:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7d9a:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b7d9e:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b7da2:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b7da6:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b7daa:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b7dae:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b7db2:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b7db6:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b7dba:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b7dbe:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b7dc2:	bd10      	pop	{r4, pc}
   b7dc4:	02020000 	.word	0x02020000
   b7dc8:	64640200 	.word	0x64640200

000b7dcc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b7dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dce:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b7dd0:	460d      	mov	r5, r1
   b7dd2:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b7dd6:	b9a9      	cbnz	r1, b7e04 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b7dd8:	b1a8      	cbz	r0, b7e06 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b7dda:	f7fc f960 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7dde:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b7de2:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7de6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b7dea:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7dee:	b913      	cbnz	r3, b7df6 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b7df0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7df4:	b123      	cbz	r3, b7e00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b7df6:	4920      	ldr	r1, [pc, #128]	; (b7e78 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b7df8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7dfc:	f008 fd39 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b7e00:	2001      	movs	r0, #1
   b7e02:	e011      	b.n	b7e28 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b7e04:	b9b8      	cbnz	r0, b7e36 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b7e06:	4628      	mov	r0, r5
   b7e08:	f7fc f947 	bl	b409a <_Znaj>
   b7e0c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b7e10:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b7e14:	bb60      	cbnz	r0, b7e70 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e16:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b7e1a:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e1e:	b923      	cbnz	r3, b7e2a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b7e20:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e24:	b90b      	cbnz	r3, b7e2a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b7e26:	2000      	movs	r0, #0
}
   b7e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b7e2a:	4914      	ldr	r1, [pc, #80]	; (b7e7c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e30:	f008 fd1f 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b7e34:	e7f7      	b.n	b7e26 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b7e36:	4608      	mov	r0, r1
   b7e38:	f7fc f92f 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b7e3c:	4606      	mov	r6, r0
   b7e3e:	b940      	cbnz	r0, b7e52 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e40:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7e44:	b91b      	cbnz	r3, b7e4e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b7e46:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7e4a:	2b00      	cmp	r3, #0
   b7e4c:	d0eb      	beq.n	b7e26 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b7e4e:	490c      	ldr	r1, [pc, #48]	; (b7e80 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b7e50:	e7ec      	b.n	b7e2c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b7e52:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b7e56:	42aa      	cmp	r2, r5
   b7e58:	bf28      	it	cs
   b7e5a:	462a      	movcs	r2, r5
   b7e5c:	4639      	mov	r1, r7
   b7e5e:	f00b fd67 	bl	c3930 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b7e62:	4638      	mov	r0, r7
   b7e64:	f7fc f91b 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b7e68:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b7e6c:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b7e70:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b7e74:	e7c4      	b.n	b7e00 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b7e76:	bf00      	nop
   b7e78:	000c61f0 	.word	0x000c61f0
   b7e7c:	000c621b 	.word	0x000c621b
   b7e80:	000c6246 	.word	0x000c6246

000b7e84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b7e84:	290d      	cmp	r1, #13
   b7e86:	f000 80cd 	beq.w	b8024 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b7e8a:	d809      	bhi.n	b7ea0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b7e8c:	2902      	cmp	r1, #2
   b7e8e:	f000 80a7 	beq.w	b7fe0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b7e92:	2906      	cmp	r1, #6
   b7e94:	f000 80be 	beq.w	b8014 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b7e98:	2901      	cmp	r1, #1
   b7e9a:	d016      	beq.n	b7eca <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b7e9c:	2000      	movs	r0, #0
}
   b7e9e:	4770      	bx	lr
  switch (Class)
   b7ea0:	2913      	cmp	r1, #19
   b7ea2:	f000 80d4 	beq.w	b804e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b7ea6:	2928      	cmp	r1, #40	; 0x28
   b7ea8:	f000 80dc 	beq.w	b8064 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b7eac:	2910      	cmp	r1, #16
   b7eae:	d1f5      	bne.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b7eb0:	2a10      	cmp	r2, #16
   b7eb2:	f000 80c9 	beq.w	b8048 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b7eb6:	f200 80ba 	bhi.w	b802e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b7eba:	2a02      	cmp	r2, #2
   b7ebc:	f000 80c1 	beq.w	b8042 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b7ec0:	2a03      	cmp	r2, #3
   b7ec2:	d1eb      	bne.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b7ec4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b7ec8:	e066      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7eca:	2a26      	cmp	r2, #38	; 0x26
   b7ecc:	d854      	bhi.n	b7f78 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b7ece:	2a00      	cmp	r2, #0
   b7ed0:	d0e4      	beq.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7ed2:	3a01      	subs	r2, #1
   b7ed4:	2a25      	cmp	r2, #37	; 0x25
   b7ed6:	d8e1      	bhi.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b7ed8:	a301      	add	r3, pc, #4	; (adr r3, b7ee0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b7eda:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b7ede:	bf00      	nop
   b7ee0:	000b7f97 	.word	0x000b7f97
   b7ee4:	000b7e9d 	.word	0x000b7e9d
   b7ee8:	000b7fa1 	.word	0x000b7fa1
   b7eec:	000b7fa5 	.word	0x000b7fa5
   b7ef0:	000b7fa9 	.word	0x000b7fa9
   b7ef4:	000b7e9d 	.word	0x000b7e9d
   b7ef8:	000b7fad 	.word	0x000b7fad
   b7efc:	000b7e9d 	.word	0x000b7e9d
   b7f00:	000b7fb1 	.word	0x000b7fb1
   b7f04:	000b7e9d 	.word	0x000b7e9d
   b7f08:	000b7e9d 	.word	0x000b7e9d
   b7f0c:	000b7e9d 	.word	0x000b7e9d
   b7f10:	000b7e9d 	.word	0x000b7e9d
   b7f14:	000b7e9d 	.word	0x000b7e9d
   b7f18:	000b7e9d 	.word	0x000b7e9d
   b7f1c:	000b7e9d 	.word	0x000b7e9d
   b7f20:	000b7fb5 	.word	0x000b7fb5
   b7f24:	000b7fb9 	.word	0x000b7fb9
   b7f28:	000b7fbd 	.word	0x000b7fbd
   b7f2c:	000b7fc1 	.word	0x000b7fc1
   b7f30:	000b7e9d 	.word	0x000b7e9d
   b7f34:	000b7e9d 	.word	0x000b7e9d
   b7f38:	000b7fc5 	.word	0x000b7fc5
   b7f3c:	000b7e9d 	.word	0x000b7e9d
   b7f40:	000b7e9d 	.word	0x000b7e9d
   b7f44:	000b7e9d 	.word	0x000b7e9d
   b7f48:	000b7e9d 	.word	0x000b7e9d
   b7f4c:	000b7e9d 	.word	0x000b7e9d
   b7f50:	000b7e9d 	.word	0x000b7e9d
   b7f54:	000b7e9d 	.word	0x000b7e9d
   b7f58:	000b7e9d 	.word	0x000b7e9d
   b7f5c:	000b7e9d 	.word	0x000b7e9d
   b7f60:	000b7fc9 	.word	0x000b7fc9
   b7f64:	000b7fcd 	.word	0x000b7fcd
   b7f68:	000b7e9d 	.word	0x000b7e9d
   b7f6c:	000b7e9d 	.word	0x000b7e9d
   b7f70:	000b7e9d 	.word	0x000b7e9d
   b7f74:	000b7fd1 	.word	0x000b7fd1
   b7f78:	2a3c      	cmp	r2, #60	; 0x3c
   b7f7a:	d02d      	beq.n	b7fd8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b7f7c:	d805      	bhi.n	b7f8a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b7f7e:	2a35      	cmp	r2, #53	; 0x35
   b7f80:	d028      	beq.n	b7fd4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b7f82:	2a3b      	cmp	r2, #59	; 0x3b
   b7f84:	d18a      	bne.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b7f86:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b7f88:	e006      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7f8a:	2a60      	cmp	r2, #96	; 0x60
   b7f8c:	d026      	beq.n	b7fdc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b7f8e:	2a61      	cmp	r2, #97	; 0x61
   b7f90:	d184      	bne.n	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b7f92:	6980      	ldr	r0, [r0, #24]
   b7f94:	e000      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b7f96:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b7f98:	3800      	subs	r0, #0
   b7f9a:	bf18      	it	ne
   b7f9c:	2001      	movne	r0, #1
   b7f9e:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b7fa0:	6900      	ldr	r0, [r0, #16]
   b7fa2:	e7f9      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b7fa4:	6940      	ldr	r0, [r0, #20]
   b7fa6:	e7f7      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b7fa8:	69c0      	ldr	r0, [r0, #28]
   b7faa:	e7f5      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b7fac:	6a00      	ldr	r0, [r0, #32]
   b7fae:	e7f3      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b7fb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7fb2:	e7f1      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b7fb4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7fb6:	e7ef      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b7fb8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b7fba:	e7ed      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b7fbc:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b7fbe:	e7eb      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b7fc0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b7fc2:	e7e9      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b7fc4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b7fc6:	e7e7      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b7fc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b7fca:	e7e5      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b7fcc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b7fce:	e7e3      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b7fd0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b7fd2:	e7e1      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b7fd4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b7fd6:	e7df      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b7fd8:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b7fda:	e7dd      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b7fdc:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b7fde:	e7db      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b7fe0:	2a34      	cmp	r2, #52	; 0x34
   b7fe2:	d015      	beq.n	b8010 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b7fe4:	d806      	bhi.n	b7ff4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b7fe6:	2a13      	cmp	r2, #19
   b7fe8:	d00b      	beq.n	b8002 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b7fea:	2a15      	cmp	r2, #21
   b7fec:	f47f af56 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b7ff0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b7ff2:	e7d1      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b7ff4:	2a72      	cmp	r2, #114	; 0x72
   b7ff6:	d006      	beq.n	b8006 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b7ff8:	2a73      	cmp	r2, #115	; 0x73
   b7ffa:	f47f af4f 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b7ffe:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8000:	e7ca      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8002:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8004:	e7c8      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8006:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8008:	2b00      	cmp	r3, #0
   b800a:	d13b      	bne.n	b8084 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b800c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b800e:	e7c3      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8010:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8012:	e7c1      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8014:	b122      	cbz	r2, b8020 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8016:	2a08      	cmp	r2, #8
   b8018:	f47f af40 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b801c:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b801e:	e7bb      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8020:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8022:	e7b9      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8024:	2a03      	cmp	r2, #3
   b8026:	f47f af39 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b802a:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b802c:	e7b4      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b802e:	2a14      	cmp	r2, #20
   b8030:	d005      	beq.n	b803e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8032:	2a15      	cmp	r2, #21
   b8034:	f47f af32 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b8038:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b803c:	e7ac      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b803e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8040:	e7aa      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8042:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b8046:	e7a7      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b8048:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b804c:	e7a4      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b804e:	2a60      	cmp	r2, #96	; 0x60
   b8050:	d005      	beq.n	b805e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8052:	2a80      	cmp	r2, #128	; 0x80
   b8054:	f47f af22 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b8058:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b805c:	e79c      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b805e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8062:	e799      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8064:	2a01      	cmp	r2, #1
   b8066:	d007      	beq.n	b8078 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b8068:	2a02      	cmp	r2, #2
   b806a:	d008      	beq.n	b807e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b806c:	2a00      	cmp	r2, #0
   b806e:	f47f af15 	bne.w	b7e9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8072:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b8076:	e78f      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b8078:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b807c:	e78c      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b807e:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8082:	e789      	b.n	b7f98 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8084:	2001      	movs	r0, #1
   b8086:	4770      	bx	lr

000b8088 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8088:	290d      	cmp	r1, #13
   b808a:	d035      	beq.n	b80f8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b808c:	d807      	bhi.n	b809e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b808e:	2902      	cmp	r1, #2
   b8090:	d019      	beq.n	b80c6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8092:	2906      	cmp	r1, #6
   b8094:	d02a      	beq.n	b80ec <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8096:	2901      	cmp	r1, #1
   b8098:	d00d      	beq.n	b80b6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b809a:	2000      	movs	r0, #0
}
   b809c:	4770      	bx	lr
  switch (Class)
   b809e:	2913      	cmp	r1, #19
   b80a0:	d02f      	beq.n	b8102 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b80a2:	2928      	cmp	r1, #40	; 0x28
   b80a4:	d034      	beq.n	b8110 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b80a6:	2910      	cmp	r1, #16
   b80a8:	d1f7      	bne.n	b809a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b80aa:	3a02      	subs	r2, #2
   b80ac:	b2d2      	uxtb	r2, r2
   b80ae:	2a13      	cmp	r2, #19
   b80b0:	d8f3      	bhi.n	b809a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80b2:	4b1f      	ldr	r3, [pc, #124]	; (b8130 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b80b4:	e004      	b.n	b80c0 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b80b6:	3a01      	subs	r2, #1
   b80b8:	b2d2      	uxtb	r2, r2
   b80ba:	2a60      	cmp	r2, #96	; 0x60
   b80bc:	d8ed      	bhi.n	b809a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b80be:	4b1d      	ldr	r3, [pc, #116]	; (b8134 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b80c0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b80c4:	4770      	bx	lr
    switch (ID)
   b80c6:	2a34      	cmp	r2, #52	; 0x34
   b80c8:	d027      	beq.n	b811a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b80ca:	d807      	bhi.n	b80dc <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b80cc:	2a13      	cmp	r2, #19
   b80ce:	d026      	beq.n	b811e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b80d0:	2a15      	cmp	r2, #21
   b80d2:	bf14      	ite	ne
   b80d4:	2000      	movne	r0, #0
   b80d6:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b80da:	4770      	bx	lr
   b80dc:	2a72      	cmp	r2, #114	; 0x72
   b80de:	d020      	beq.n	b8122 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b80e0:	2a73      	cmp	r2, #115	; 0x73
   b80e2:	bf14      	ite	ne
   b80e4:	2000      	movne	r0, #0
   b80e6:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b80ea:	4770      	bx	lr
    switch (ID)
   b80ec:	b1e2      	cbz	r2, b8128 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b80ee:	2a08      	cmp	r2, #8
   b80f0:	bf14      	ite	ne
   b80f2:	2000      	movne	r0, #0
   b80f4:	2006      	moveq	r0, #6
   b80f6:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b80f8:	2a03      	cmp	r2, #3
   b80fa:	bf14      	ite	ne
   b80fc:	2000      	movne	r0, #0
   b80fe:	201c      	moveq	r0, #28
   b8100:	4770      	bx	lr
    switch (ID)
   b8102:	2a60      	cmp	r2, #96	; 0x60
   b8104:	d012      	beq.n	b812c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8106:	2a80      	cmp	r2, #128	; 0x80
   b8108:	bf14      	ite	ne
   b810a:	2000      	movne	r0, #0
   b810c:	20a4      	moveq	r0, #164	; 0xa4
   b810e:	4770      	bx	lr
    switch (ID)
   b8110:	2a02      	cmp	r2, #2
   b8112:	d8c2      	bhi.n	b809a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8114:	4b08      	ldr	r3, [pc, #32]	; (b8138 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8116:	5c98      	ldrb	r0, [r3, r2]
   b8118:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b811a:	200c      	movs	r0, #12
   b811c:	4770      	bx	lr
   b811e:	2048      	movs	r0, #72	; 0x48
   b8120:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8122:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8126:	4770      	bx	lr
   b8128:	2014      	movs	r0, #20
   b812a:	4770      	bx	lr
   b812c:	2008      	movs	r0, #8
   b812e:	4770      	bx	lr
   b8130:	000c6ede 	.word	0x000c6ede
   b8134:	000c6e1c 	.word	0x000c6e1c
   b8138:	000c6f06 	.word	0x000c6f06

000b813c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b813c:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b813e:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8142:	07ca      	lsls	r2, r1, #31
   b8144:	d415      	bmi.n	b8172 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b8146:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b814a:	4b59      	ldr	r3, [pc, #356]	; (b82b0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b814c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8150:	429a      	cmp	r2, r3
   b8152:	d101      	bne.n	b8158 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8154:	078b      	lsls	r3, r1, #30
   b8156:	d40c      	bmi.n	b8172 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8158:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b815c:	2b47      	cmp	r3, #71	; 0x47
   b815e:	d174      	bne.n	b824a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8160:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8164:	f245 1441 	movw	r4, #20801	; 0x5141
   b8168:	42a3      	cmp	r3, r4
   b816a:	d104      	bne.n	b8176 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b816c:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8170:	d06b      	beq.n	b824a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8172:	2001      	movs	r0, #1
   b8174:	e070      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b8176:	f245 1442 	movw	r4, #20802	; 0x5142
   b817a:	42a3      	cmp	r3, r4
   b817c:	d102      	bne.n	b8184 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b817e:	f011 0f08 	tst.w	r1, #8
   b8182:	e7f5      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8184:	f245 3442 	movw	r4, #21314	; 0x5342
   b8188:	42a3      	cmp	r3, r4
   b818a:	d102      	bne.n	b8192 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b818c:	f011 0f10 	tst.w	r1, #16
   b8190:	e7ee      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8192:	f244 1447 	movw	r4, #16711	; 0x4147
   b8196:	42a3      	cmp	r3, r4
   b8198:	d102      	bne.n	b81a0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b819a:	f011 0f20 	tst.w	r1, #32
   b819e:	e7e7      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b81a0:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b81a4:	42a3      	cmp	r3, r4
   b81a6:	d102      	bne.n	b81ae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b81a8:	f011 0f40 	tst.w	r1, #64	; 0x40
   b81ac:	e7e0      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b81ae:	f245 144c 	movw	r4, #20812	; 0x514c
   b81b2:	42a3      	cmp	r3, r4
   b81b4:	d102      	bne.n	b81bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b81b6:	f011 0f80 	tst.w	r1, #128	; 0x80
   b81ba:	e7d9      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b81bc:	f245 114e 	movw	r1, #20814	; 0x514e
   b81c0:	428b      	cmp	r3, r1
   b81c2:	d104      	bne.n	b81ce <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b81c4:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81c8:	f013 0f01 	tst.w	r3, #1
   b81cc:	e7d0      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b81ce:	f245 314e 	movw	r1, #21326	; 0x534e
   b81d2:	428b      	cmp	r3, r1
   b81d4:	d104      	bne.n	b81e0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b81d6:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81da:	f013 0f02 	tst.w	r3, #2
   b81de:	e7c7      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b81e0:	f245 1150 	movw	r1, #20816	; 0x5150
   b81e4:	428b      	cmp	r3, r1
   b81e6:	d104      	bne.n	b81f2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b81e8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81ec:	f013 0f04 	tst.w	r3, #4
   b81f0:	e7be      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b81f2:	f245 1151 	movw	r1, #20817	; 0x5151
   b81f6:	428b      	cmp	r3, r1
   b81f8:	d104      	bne.n	b8204 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b81fa:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b81fe:	f013 0f08 	tst.w	r3, #8
   b8202:	e7b5      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8204:	f245 3152 	movw	r1, #21330	; 0x5352
   b8208:	428b      	cmp	r3, r1
   b820a:	d104      	bne.n	b8216 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b820c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8210:	f013 0f10 	tst.w	r3, #16
   b8214:	e7ac      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8216:	f244 1153 	movw	r1, #16723	; 0x4153
   b821a:	428b      	cmp	r3, r1
   b821c:	d104      	bne.n	b8228 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b821e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8222:	f013 0f20 	tst.w	r3, #32
   b8226:	e7a3      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8228:	f245 4153 	movw	r1, #21587	; 0x5453
   b822c:	428b      	cmp	r3, r1
   b822e:	d104      	bne.n	b823a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8230:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8234:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8238:	e79a      	b.n	b8170 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b823a:	f245 6153 	movw	r1, #22099	; 0x5653
   b823e:	428b      	cmp	r3, r1
   b8240:	d103      	bne.n	b824a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8242:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8246:	2b00      	cmp	r3, #0
   b8248:	db93      	blt.n	b8172 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b824a:	4b1a      	ldr	r3, [pc, #104]	; (b82b4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b824c:	429a      	cmp	r2, r3
   b824e:	d104      	bne.n	b825a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8250:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8254:	f000 0001 	and.w	r0, r0, #1
}
   b8258:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b825a:	4b17      	ldr	r3, [pc, #92]	; (b82b8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b825c:	429a      	cmp	r2, r3
   b825e:	d104      	bne.n	b826a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8260:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8264:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8268:	e7f6      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b826a:	4b14      	ldr	r3, [pc, #80]	; (b82bc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b826c:	429a      	cmp	r2, r3
   b826e:	d104      	bne.n	b827a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8270:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8274:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8278:	e7ee      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b827a:	4b11      	ldr	r3, [pc, #68]	; (b82c0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b827c:	429a      	cmp	r2, r3
   b827e:	d104      	bne.n	b828a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8280:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8284:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8288:	e7e6      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b828a:	4b0e      	ldr	r3, [pc, #56]	; (b82c4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b828c:	429a      	cmp	r2, r3
   b828e:	d104      	bne.n	b829a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8290:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8294:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8298:	e7de      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b829a:	4b0b      	ldr	r3, [pc, #44]	; (b82c8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b829c:	429a      	cmp	r2, r3
   b829e:	d104      	bne.n	b82aa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b82a0:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b82a4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b82a8:	e7d6      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b82aa:	2000      	movs	r0, #0
   b82ac:	e7d4      	b.n	b8258 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b82ae:	bf00      	nop
   b82b0:	4d544400 	.word	0x4d544400
   b82b4:	4d4c5200 	.word	0x4d4c5200
   b82b8:	434d5200 	.word	0x434d5200
   b82bc:	54585400 	.word	0x54585400
   b82c0:	574c5600 	.word	0x574c5600
   b82c4:	47545600 	.word	0x47545600
   b82c8:	41445a00 	.word	0x41445a00

000b82cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b82cc:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b82d0:	2b2a      	cmp	r3, #42	; 0x2a
   b82d2:	d157      	bne.n	b8384 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b82d4:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b82d8:	2b47      	cmp	r3, #71	; 0x47
   b82da:	d153      	bne.n	b8384 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b82dc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b82e0:	4a29      	ldr	r2, [pc, #164]	; (b8388 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b82e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b82e6:	4293      	cmp	r3, r2
   b82e8:	d011      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b82ea:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b82ee:	2a47      	cmp	r2, #71	; 0x47
   b82f0:	d11a      	bne.n	b8328 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b82f2:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b82f6:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b82fa:	3941      	subs	r1, #65	; 0x41
   b82fc:	b289      	uxth	r1, r1
   b82fe:	2910      	cmp	r1, #16
   b8300:	d907      	bls.n	b8312 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8302:	f022 0110 	bic.w	r1, r2, #16
   b8306:	f245 3042 	movw	r0, #21314	; 0x5342
   b830a:	4281      	cmp	r1, r0
   b830c:	d129      	bne.n	b8362 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b830e:	2001      	movs	r0, #1
}
   b8310:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8312:	481e      	ldr	r0, [pc, #120]	; (b838c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8314:	fa20 f101 	lsr.w	r1, r0, r1
   b8318:	07c9      	lsls	r1, r1, #31
   b831a:	d4f8      	bmi.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b831c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8320:	f245 4153 	movw	r1, #21587	; 0x5453
   b8324:	428a      	cmp	r2, r1
   b8326:	d0f2      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8328:	4a19      	ldr	r2, [pc, #100]	; (b8390 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b832a:	4293      	cmp	r3, r2
   b832c:	d0ef      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b832e:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8332:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8336:	4293      	cmp	r3, r2
   b8338:	d0e9      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b833a:	4a16      	ldr	r2, [pc, #88]	; (b8394 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b833c:	4293      	cmp	r3, r2
   b833e:	d0e6      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8340:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8344:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8348:	4293      	cmp	r3, r2
   b834a:	d0e0      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b834c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8350:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8354:	4293      	cmp	r3, r2
   b8356:	d0da      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8358:	480f      	ldr	r0, [pc, #60]	; (b8398 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b835a:	1a1b      	subs	r3, r3, r0
   b835c:	4258      	negs	r0, r3
   b835e:	4158      	adcs	r0, r3
   b8360:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8362:	f244 1147 	movw	r1, #16711	; 0x4147
   b8366:	428a      	cmp	r2, r1
   b8368:	d0d1      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b836a:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b836e:	428a      	cmp	r2, r1
   b8370:	d0cd      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8372:	f245 314e 	movw	r1, #21326	; 0x534e
   b8376:	428a      	cmp	r2, r1
   b8378:	d0c9      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b837a:	f244 1153 	movw	r1, #16723	; 0x4153
   b837e:	428a      	cmp	r2, r1
   b8380:	d0c5      	beq.n	b830e <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8382:	e7cb      	b.n	b831c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8384:	2000      	movs	r0, #0
   b8386:	4770      	bx	lr
   b8388:	4d544400 	.word	0x4d544400
   b838c:	0001a803 	.word	0x0001a803
   b8390:	4d4c5200 	.word	0x4d4c5200
   b8394:	54585400 	.word	0x54585400
   b8398:	41445a00 	.word	0x41445a00

000b839c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b839c:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b839e:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b83a2:	07ca      	lsls	r2, r1, #31
   b83a4:	d415      	bmi.n	b83d2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b83a6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b83aa:	4b59      	ldr	r3, [pc, #356]	; (b8510 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b83ac:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b83b0:	429a      	cmp	r2, r3
   b83b2:	d101      	bne.n	b83b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b83b4:	078b      	lsls	r3, r1, #30
   b83b6:	d40c      	bmi.n	b83d2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b83b8:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b83bc:	2b47      	cmp	r3, #71	; 0x47
   b83be:	d174      	bne.n	b84aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b83c0:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b83c4:	f245 1441 	movw	r4, #20801	; 0x5141
   b83c8:	42a3      	cmp	r3, r4
   b83ca:	d104      	bne.n	b83d6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b83cc:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b83d0:	d06b      	beq.n	b84aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b83d2:	2001      	movs	r0, #1
   b83d4:	e070      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b83d6:	f245 1442 	movw	r4, #20802	; 0x5142
   b83da:	42a3      	cmp	r3, r4
   b83dc:	d102      	bne.n	b83e4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b83de:	f011 0f08 	tst.w	r1, #8
   b83e2:	e7f5      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b83e4:	f245 3442 	movw	r4, #21314	; 0x5342
   b83e8:	42a3      	cmp	r3, r4
   b83ea:	d102      	bne.n	b83f2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b83ec:	f011 0f10 	tst.w	r1, #16
   b83f0:	e7ee      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b83f2:	f244 1447 	movw	r4, #16711	; 0x4147
   b83f6:	42a3      	cmp	r3, r4
   b83f8:	d102      	bne.n	b8400 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b83fa:	f011 0f20 	tst.w	r1, #32
   b83fe:	e7e7      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8400:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8404:	42a3      	cmp	r3, r4
   b8406:	d102      	bne.n	b840e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8408:	f011 0f40 	tst.w	r1, #64	; 0x40
   b840c:	e7e0      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b840e:	f245 144c 	movw	r4, #20812	; 0x514c
   b8412:	42a3      	cmp	r3, r4
   b8414:	d102      	bne.n	b841c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8416:	f011 0f80 	tst.w	r1, #128	; 0x80
   b841a:	e7d9      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b841c:	f245 114e 	movw	r1, #20814	; 0x514e
   b8420:	428b      	cmp	r3, r1
   b8422:	d104      	bne.n	b842e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8424:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8428:	f013 0f01 	tst.w	r3, #1
   b842c:	e7d0      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b842e:	f245 314e 	movw	r1, #21326	; 0x534e
   b8432:	428b      	cmp	r3, r1
   b8434:	d104      	bne.n	b8440 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8436:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b843a:	f013 0f02 	tst.w	r3, #2
   b843e:	e7c7      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8440:	f245 1150 	movw	r1, #20816	; 0x5150
   b8444:	428b      	cmp	r3, r1
   b8446:	d104      	bne.n	b8452 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8448:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b844c:	f013 0f04 	tst.w	r3, #4
   b8450:	e7be      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8452:	f245 1151 	movw	r1, #20817	; 0x5151
   b8456:	428b      	cmp	r3, r1
   b8458:	d104      	bne.n	b8464 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b845a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b845e:	f013 0f08 	tst.w	r3, #8
   b8462:	e7b5      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8464:	f245 3152 	movw	r1, #21330	; 0x5352
   b8468:	428b      	cmp	r3, r1
   b846a:	d104      	bne.n	b8476 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b846c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8470:	f013 0f10 	tst.w	r3, #16
   b8474:	e7ac      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8476:	f244 1153 	movw	r1, #16723	; 0x4153
   b847a:	428b      	cmp	r3, r1
   b847c:	d104      	bne.n	b8488 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b847e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8482:	f013 0f20 	tst.w	r3, #32
   b8486:	e7a3      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8488:	f245 4153 	movw	r1, #21587	; 0x5453
   b848c:	428b      	cmp	r3, r1
   b848e:	d104      	bne.n	b849a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8490:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8494:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8498:	e79a      	b.n	b83d0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b849a:	f245 6153 	movw	r1, #22099	; 0x5653
   b849e:	428b      	cmp	r3, r1
   b84a0:	d103      	bne.n	b84aa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b84a2:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b84a6:	2b00      	cmp	r3, #0
   b84a8:	db93      	blt.n	b83d2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b84aa:	4b1a      	ldr	r3, [pc, #104]	; (b8514 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b84ac:	429a      	cmp	r2, r3
   b84ae:	d104      	bne.n	b84ba <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b84b0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84b4:	f000 0001 	and.w	r0, r0, #1
}
   b84b8:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b84ba:	4b17      	ldr	r3, [pc, #92]	; (b8518 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b84bc:	429a      	cmp	r2, r3
   b84be:	d104      	bne.n	b84ca <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b84c0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b84c8:	e7f6      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b84ca:	4b14      	ldr	r3, [pc, #80]	; (b851c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b84cc:	429a      	cmp	r2, r3
   b84ce:	d104      	bne.n	b84da <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b84d0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b84d8:	e7ee      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b84da:	4b11      	ldr	r3, [pc, #68]	; (b8520 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b84dc:	429a      	cmp	r2, r3
   b84de:	d104      	bne.n	b84ea <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b84e0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84e4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b84e8:	e7e6      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b84ea:	4b0e      	ldr	r3, [pc, #56]	; (b8524 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b84ec:	429a      	cmp	r2, r3
   b84ee:	d104      	bne.n	b84fa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b84f0:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b84f4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b84f8:	e7de      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b84fa:	4b0b      	ldr	r3, [pc, #44]	; (b8528 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b84fc:	429a      	cmp	r2, r3
   b84fe:	d104      	bne.n	b850a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8500:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8504:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8508:	e7d6      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b850a:	2000      	movs	r0, #0
   b850c:	e7d4      	b.n	b84b8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b850e:	bf00      	nop
   b8510:	4d544400 	.word	0x4d544400
   b8514:	4d4c5200 	.word	0x4d4c5200
   b8518:	434d5200 	.word	0x434d5200
   b851c:	54585400 	.word	0x54585400
   b8520:	574c5600 	.word	0x574c5600
   b8524:	47545600 	.word	0x47545600
   b8528:	41445a00 	.word	0x41445a00

000b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b852c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8530:	b110      	cbz	r0, b8538 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8532:	6803      	ldr	r3, [r0, #0]
   b8534:	689b      	ldr	r3, [r3, #8]
   b8536:	4718      	bx	r3
}
   b8538:	4770      	bx	lr
	...

000b853c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b853e:	4b3d      	ldr	r3, [pc, #244]	; (b8634 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8540:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8542:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8546:	6818      	ldr	r0, [r3, #0]
   b8548:	9000      	str	r0, [sp, #0]
   b854a:	889b      	ldrh	r3, [r3, #4]
   b854c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8550:	2205      	movs	r2, #5
   b8552:	4629      	mov	r1, r5
   b8554:	4668      	mov	r0, sp
   b8556:	f00b f9db 	bl	c3910 <memcmp>
   b855a:	b928      	cbnz	r0, b8568 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b855c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8560:	b113      	cbz	r3, b8568 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8562:	2001      	movs	r0, #1
}
   b8564:	b003      	add	sp, #12
   b8566:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8568:	4933      	ldr	r1, [pc, #204]	; (b8638 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b856a:	4668      	mov	r0, sp
   b856c:	f00b fa6e 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8570:	2205      	movs	r2, #5
   b8572:	4629      	mov	r1, r5
   b8574:	4668      	mov	r0, sp
   b8576:	f00b f9cb 	bl	c3910 <memcmp>
   b857a:	b918      	cbnz	r0, b8584 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b857c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8580:	2b00      	cmp	r3, #0
   b8582:	d1ee      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8584:	492d      	ldr	r1, [pc, #180]	; (b863c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8586:	4668      	mov	r0, sp
   b8588:	f00b fa60 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b858c:	2205      	movs	r2, #5
   b858e:	4629      	mov	r1, r5
   b8590:	4668      	mov	r0, sp
   b8592:	f00b f9bd 	bl	c3910 <memcmp>
   b8596:	b918      	cbnz	r0, b85a0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8598:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b859c:	2b00      	cmp	r3, #0
   b859e:	d1e0      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b85a0:	4927      	ldr	r1, [pc, #156]	; (b8640 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b85a2:	4668      	mov	r0, sp
   b85a4:	f00b fa52 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85a8:	2205      	movs	r2, #5
   b85aa:	4629      	mov	r1, r5
   b85ac:	4668      	mov	r0, sp
   b85ae:	f00b f9af 	bl	c3910 <memcmp>
   b85b2:	b918      	cbnz	r0, b85bc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b85b4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b85b8:	2b00      	cmp	r3, #0
   b85ba:	d1d2      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b85bc:	4921      	ldr	r1, [pc, #132]	; (b8644 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b85be:	4668      	mov	r0, sp
   b85c0:	f00b fa44 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85c4:	2205      	movs	r2, #5
   b85c6:	4629      	mov	r1, r5
   b85c8:	4668      	mov	r0, sp
   b85ca:	f00b f9a1 	bl	c3910 <memcmp>
   b85ce:	b918      	cbnz	r0, b85d8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b85d0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b85d4:	2b00      	cmp	r3, #0
   b85d6:	d1c4      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b85d8:	491b      	ldr	r1, [pc, #108]	; (b8648 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b85da:	4668      	mov	r0, sp
   b85dc:	f00b fa36 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85e0:	2205      	movs	r2, #5
   b85e2:	4629      	mov	r1, r5
   b85e4:	4668      	mov	r0, sp
   b85e6:	f00b f993 	bl	c3910 <memcmp>
   b85ea:	b918      	cbnz	r0, b85f4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b85ec:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b85f0:	2b00      	cmp	r3, #0
   b85f2:	d1b6      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b85f4:	4915      	ldr	r1, [pc, #84]	; (b864c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b85f6:	4668      	mov	r0, sp
   b85f8:	f00b fa28 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b85fc:	2205      	movs	r2, #5
   b85fe:	4629      	mov	r1, r5
   b8600:	4668      	mov	r0, sp
   b8602:	f00b f985 	bl	c3910 <memcmp>
   b8606:	b918      	cbnz	r0, b8610 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b8608:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b860c:	2b00      	cmp	r3, #0
   b860e:	d1a8      	bne.n	b8562 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8610:	490f      	ldr	r1, [pc, #60]	; (b8650 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b8612:	4668      	mov	r0, sp
   b8614:	f00b fa1a 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8618:	2205      	movs	r2, #5
   b861a:	4629      	mov	r1, r5
   b861c:	4668      	mov	r0, sp
   b861e:	f00b f977 	bl	c3910 <memcmp>
   b8622:	b928      	cbnz	r0, b8630 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b8624:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8628:	3800      	subs	r0, #0
   b862a:	bf18      	it	ne
   b862c:	2001      	movne	r0, #1
   b862e:	e799      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b8630:	2000      	movs	r0, #0
   b8632:	e797      	b.n	b8564 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b8634:	000c629c 	.word	0x000c629c
   b8638:	000c6272 	.word	0x000c6272
   b863c:	000c6278 	.word	0x000c6278
   b8640:	000c627e 	.word	0x000c627e
   b8644:	000c6284 	.word	0x000c6284
   b8648:	000c628a 	.word	0x000c628a
   b864c:	000c6290 	.word	0x000c6290
   b8650:	000c6296 	.word	0x000c6296

000b8654 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b8654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8656:	4b62      	ldr	r3, [pc, #392]	; (b87e0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b8658:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b865a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b865e:	6818      	ldr	r0, [r3, #0]
   b8660:	9000      	str	r0, [sp, #0]
   b8662:	889b      	ldrh	r3, [r3, #4]
   b8664:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8668:	2205      	movs	r2, #5
   b866a:	4629      	mov	r1, r5
   b866c:	4668      	mov	r0, sp
   b866e:	f00b f94f 	bl	c3910 <memcmp>
   b8672:	b978      	cbnz	r0, b8694 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b8674:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8678:	b163      	cbz	r3, b8694 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b867a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b867e:	b14a      	cbz	r2, b8694 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b8680:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b8684:	2a00      	cmp	r2, #0
   b8686:	f040 80a3 	bne.w	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b868a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b868e:	2b00      	cmp	r3, #0
   b8690:	f040 809e 	bne.w	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b8694:	4953      	ldr	r1, [pc, #332]	; (b87e4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b8696:	4668      	mov	r0, sp
   b8698:	f00b f9d8 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b869c:	2205      	movs	r2, #5
   b869e:	4629      	mov	r1, r5
   b86a0:	4668      	mov	r0, sp
   b86a2:	f00b f935 	bl	c3910 <memcmp>
   b86a6:	b978      	cbnz	r0, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b86a8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b86ac:	b163      	cbz	r3, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b86ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86b2:	b14a      	cbz	r2, b86c8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b86b4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86b8:	2a00      	cmp	r2, #0
   b86ba:	f040 8089 	bne.w	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86c2:	2b00      	cmp	r3, #0
   b86c4:	f040 8084 	bne.w	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b86c8:	4947      	ldr	r1, [pc, #284]	; (b87e8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b86ca:	4668      	mov	r0, sp
   b86cc:	f00b f9be 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b86d0:	2205      	movs	r2, #5
   b86d2:	4629      	mov	r1, r5
   b86d4:	4668      	mov	r0, sp
   b86d6:	f00b f91b 	bl	c3910 <memcmp>
   b86da:	b968      	cbnz	r0, b86f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b86dc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b86e0:	b153      	cbz	r3, b86f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b86e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b86e6:	b13a      	cbz	r2, b86f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b86e8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b86ec:	2a00      	cmp	r2, #0
   b86ee:	d16f      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b86f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b86f4:	2b00      	cmp	r3, #0
   b86f6:	d16b      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b86f8:	493c      	ldr	r1, [pc, #240]	; (b87ec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b86fa:	4668      	mov	r0, sp
   b86fc:	f00b f9a6 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8700:	2205      	movs	r2, #5
   b8702:	4629      	mov	r1, r5
   b8704:	4668      	mov	r0, sp
   b8706:	f00b f903 	bl	c3910 <memcmp>
   b870a:	b968      	cbnz	r0, b8728 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b870c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8710:	b153      	cbz	r3, b8728 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b8712:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8716:	b13a      	cbz	r2, b8728 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b8718:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b871c:	2a00      	cmp	r2, #0
   b871e:	d157      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8720:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8724:	2b00      	cmp	r3, #0
   b8726:	d153      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b8728:	4931      	ldr	r1, [pc, #196]	; (b87f0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b872a:	4668      	mov	r0, sp
   b872c:	f00b f98e 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8730:	2205      	movs	r2, #5
   b8732:	4629      	mov	r1, r5
   b8734:	4668      	mov	r0, sp
   b8736:	f00b f8eb 	bl	c3910 <memcmp>
   b873a:	b968      	cbnz	r0, b8758 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b873c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8740:	b153      	cbz	r3, b8758 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b8742:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8746:	b13a      	cbz	r2, b8758 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b8748:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b874c:	2a00      	cmp	r2, #0
   b874e:	d13f      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b8750:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8754:	2b00      	cmp	r3, #0
   b8756:	d13b      	bne.n	b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b8758:	4926      	ldr	r1, [pc, #152]	; (b87f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b875a:	4668      	mov	r0, sp
   b875c:	f00b f976 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8760:	2205      	movs	r2, #5
   b8762:	4629      	mov	r1, r5
   b8764:	4668      	mov	r0, sp
   b8766:	f00b f8d3 	bl	c3910 <memcmp>
   b876a:	b958      	cbnz	r0, b8784 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b876c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8770:	b143      	cbz	r3, b8784 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b8772:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b8776:	b12a      	cbz	r2, b8784 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b8778:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b877c:	bb42      	cbnz	r2, b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b877e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b8782:	bb2b      	cbnz	r3, b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b8784:	491c      	ldr	r1, [pc, #112]	; (b87f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b8786:	4668      	mov	r0, sp
   b8788:	f00b f960 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b878c:	2205      	movs	r2, #5
   b878e:	4629      	mov	r1, r5
   b8790:	4668      	mov	r0, sp
   b8792:	f00b f8bd 	bl	c3910 <memcmp>
   b8796:	b940      	cbnz	r0, b87aa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b8798:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b879c:	b12b      	cbz	r3, b87aa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b879e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b87a0:	b11a      	cbz	r2, b87aa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b87a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87a4:	b9a2      	cbnz	r2, b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b87a8:	b993      	cbnz	r3, b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b87aa:	4914      	ldr	r1, [pc, #80]	; (b87fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b87ac:	4668      	mov	r0, sp
   b87ae:	f00b f94d 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b87b2:	2205      	movs	r2, #5
   b87b4:	4629      	mov	r1, r5
   b87b6:	4668      	mov	r0, sp
   b87b8:	f00b f8aa 	bl	c3910 <memcmp>
   b87bc:	b958      	cbnz	r0, b87d6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b87be:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b87c2:	b153      	cbz	r3, b87da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b87c4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b87c6:	b120      	cbz	r0, b87d2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b87c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b87ca:	b90a      	cbnz	r2, b87d0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b87cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b87ce:	b100      	cbz	r0, b87d2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b87d0:	2001      	movs	r0, #1
}
   b87d2:	b003      	add	sp, #12
   b87d4:	bd30      	pop	{r4, r5, pc}
  return false;
   b87d6:	2000      	movs	r0, #0
   b87d8:	e7fb      	b.n	b87d2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87da:	4618      	mov	r0, r3
   b87dc:	e7f9      	b.n	b87d2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b87de:	bf00      	nop
   b87e0:	000c629c 	.word	0x000c629c
   b87e4:	000c6272 	.word	0x000c6272
   b87e8:	000c6278 	.word	0x000c6278
   b87ec:	000c627e 	.word	0x000c627e
   b87f0:	000c6284 	.word	0x000c6284
   b87f4:	000c628a 	.word	0x000c628a
   b87f8:	000c6290 	.word	0x000c6290
   b87fc:	000c6296 	.word	0x000c6296

000b8800 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b8800:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8802:	4b38      	ldr	r3, [pc, #224]	; (b88e4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b8804:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8806:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b880a:	6818      	ldr	r0, [r3, #0]
   b880c:	9000      	str	r0, [sp, #0]
   b880e:	889b      	ldrh	r3, [r3, #4]
   b8810:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8814:	2205      	movs	r2, #5
   b8816:	4629      	mov	r1, r5
   b8818:	4668      	mov	r0, sp
   b881a:	f00b f879 	bl	c3910 <memcmp>
   b881e:	b920      	cbnz	r0, b882a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b8820:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b8824:	3001      	adds	r0, #1
}
   b8826:	b003      	add	sp, #12
   b8828:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b882a:	492f      	ldr	r1, [pc, #188]	; (b88e8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b882c:	4668      	mov	r0, sp
   b882e:	f00b f90d 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8832:	2205      	movs	r2, #5
   b8834:	4629      	mov	r1, r5
   b8836:	4668      	mov	r0, sp
   b8838:	f00b f86a 	bl	c3910 <memcmp>
   b883c:	b910      	cbnz	r0, b8844 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b883e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8842:	e7ef      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8844:	4929      	ldr	r1, [pc, #164]	; (b88ec <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b8846:	4668      	mov	r0, sp
   b8848:	f00b f900 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b884c:	2205      	movs	r2, #5
   b884e:	4629      	mov	r1, r5
   b8850:	4668      	mov	r0, sp
   b8852:	f00b f85d 	bl	c3910 <memcmp>
   b8856:	b910      	cbnz	r0, b885e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b8858:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b885c:	e7e2      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b885e:	4924      	ldr	r1, [pc, #144]	; (b88f0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b8860:	4668      	mov	r0, sp
   b8862:	f00b f8f3 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8866:	2205      	movs	r2, #5
   b8868:	4629      	mov	r1, r5
   b886a:	4668      	mov	r0, sp
   b886c:	f00b f850 	bl	c3910 <memcmp>
   b8870:	b910      	cbnz	r0, b8878 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b8872:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8876:	e7d5      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8878:	491e      	ldr	r1, [pc, #120]	; (b88f4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b887a:	4668      	mov	r0, sp
   b887c:	f00b f8e6 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8880:	2205      	movs	r2, #5
   b8882:	4629      	mov	r1, r5
   b8884:	4668      	mov	r0, sp
   b8886:	f00b f843 	bl	c3910 <memcmp>
   b888a:	b910      	cbnz	r0, b8892 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b888c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8890:	e7c8      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8892:	4919      	ldr	r1, [pc, #100]	; (b88f8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b8894:	4668      	mov	r0, sp
   b8896:	f00b f8d9 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b889a:	2205      	movs	r2, #5
   b889c:	4629      	mov	r1, r5
   b889e:	4668      	mov	r0, sp
   b88a0:	f00b f836 	bl	c3910 <memcmp>
   b88a4:	b910      	cbnz	r0, b88ac <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b88a6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b88aa:	e7bb      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b88ac:	4913      	ldr	r1, [pc, #76]	; (b88fc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b88ae:	4668      	mov	r0, sp
   b88b0:	f00b f8cc 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88b4:	2205      	movs	r2, #5
   b88b6:	4629      	mov	r1, r5
   b88b8:	4668      	mov	r0, sp
   b88ba:	f00b f829 	bl	c3910 <memcmp>
   b88be:	b910      	cbnz	r0, b88c6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b88c0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b88c4:	e7ae      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b88c6:	490e      	ldr	r1, [pc, #56]	; (b8900 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b88c8:	4668      	mov	r0, sp
   b88ca:	f00b f8bf 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b88ce:	2205      	movs	r2, #5
   b88d0:	4629      	mov	r1, r5
   b88d2:	4668      	mov	r0, sp
   b88d4:	f00b f81c 	bl	c3910 <memcmp>
   b88d8:	b910      	cbnz	r0, b88e0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b88da:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b88de:	e7a1      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b88e0:	2000      	movs	r0, #0
   b88e2:	e7a0      	b.n	b8826 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b88e4:	000c629c 	.word	0x000c629c
   b88e8:	000c6272 	.word	0x000c6272
   b88ec:	000c6278 	.word	0x000c6278
   b88f0:	000c627e 	.word	0x000c627e
   b88f4:	000c6284 	.word	0x000c6284
   b88f8:	000c628a 	.word	0x000c628a
   b88fc:	000c6290 	.word	0x000c6290
   b8900:	000c6296 	.word	0x000c6296

000b8904 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b8904:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8906:	4b38      	ldr	r3, [pc, #224]	; (b89e8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b8908:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b890a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b890e:	6818      	ldr	r0, [r3, #0]
   b8910:	9000      	str	r0, [sp, #0]
   b8912:	889b      	ldrh	r3, [r3, #4]
   b8914:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8918:	2205      	movs	r2, #5
   b891a:	4629      	mov	r1, r5
   b891c:	4668      	mov	r0, sp
   b891e:	f00a fff7 	bl	c3910 <memcmp>
   b8922:	b920      	cbnz	r0, b892e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b8924:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b8928:	3002      	adds	r0, #2
}
   b892a:	b003      	add	sp, #12
   b892c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b892e:	492f      	ldr	r1, [pc, #188]	; (b89ec <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b8930:	4668      	mov	r0, sp
   b8932:	f00b f88b 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8936:	2205      	movs	r2, #5
   b8938:	4629      	mov	r1, r5
   b893a:	4668      	mov	r0, sp
   b893c:	f00a ffe8 	bl	c3910 <memcmp>
   b8940:	b910      	cbnz	r0, b8948 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b8942:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8946:	e7ef      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8948:	4929      	ldr	r1, [pc, #164]	; (b89f0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b894a:	4668      	mov	r0, sp
   b894c:	f00b f87e 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8950:	2205      	movs	r2, #5
   b8952:	4629      	mov	r1, r5
   b8954:	4668      	mov	r0, sp
   b8956:	f00a ffdb 	bl	c3910 <memcmp>
   b895a:	b910      	cbnz	r0, b8962 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b895c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8960:	e7e2      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8962:	4924      	ldr	r1, [pc, #144]	; (b89f4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b8964:	4668      	mov	r0, sp
   b8966:	f00b f871 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b896a:	2205      	movs	r2, #5
   b896c:	4629      	mov	r1, r5
   b896e:	4668      	mov	r0, sp
   b8970:	f00a ffce 	bl	c3910 <memcmp>
   b8974:	b910      	cbnz	r0, b897c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b8976:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b897a:	e7d5      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b897c:	491e      	ldr	r1, [pc, #120]	; (b89f8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b897e:	4668      	mov	r0, sp
   b8980:	f00b f864 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8984:	2205      	movs	r2, #5
   b8986:	4629      	mov	r1, r5
   b8988:	4668      	mov	r0, sp
   b898a:	f00a ffc1 	bl	c3910 <memcmp>
   b898e:	b910      	cbnz	r0, b8996 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b8990:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8994:	e7c8      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8996:	4919      	ldr	r1, [pc, #100]	; (b89fc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b8998:	4668      	mov	r0, sp
   b899a:	f00b f857 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b899e:	2205      	movs	r2, #5
   b89a0:	4629      	mov	r1, r5
   b89a2:	4668      	mov	r0, sp
   b89a4:	f00a ffb4 	bl	c3910 <memcmp>
   b89a8:	b910      	cbnz	r0, b89b0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b89aa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b89ae:	e7bb      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b89b0:	4913      	ldr	r1, [pc, #76]	; (b8a00 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b89b2:	4668      	mov	r0, sp
   b89b4:	f00b f84a 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89b8:	2205      	movs	r2, #5
   b89ba:	4629      	mov	r1, r5
   b89bc:	4668      	mov	r0, sp
   b89be:	f00a ffa7 	bl	c3910 <memcmp>
   b89c2:	b910      	cbnz	r0, b89ca <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b89c4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b89c8:	e7ae      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b89ca:	490e      	ldr	r1, [pc, #56]	; (b8a04 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b89cc:	4668      	mov	r0, sp
   b89ce:	f00b f83d 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b89d2:	2205      	movs	r2, #5
   b89d4:	4629      	mov	r1, r5
   b89d6:	4668      	mov	r0, sp
   b89d8:	f00a ff9a 	bl	c3910 <memcmp>
   b89dc:	b910      	cbnz	r0, b89e4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b89de:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b89e2:	e7a1      	b.n	b8928 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b89e4:	2000      	movs	r0, #0
   b89e6:	e7a0      	b.n	b892a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b89e8:	000c629c 	.word	0x000c629c
   b89ec:	000c6272 	.word	0x000c6272
   b89f0:	000c6278 	.word	0x000c6278
   b89f4:	000c627e 	.word	0x000c627e
   b89f8:	000c6284 	.word	0x000c6284
   b89fc:	000c628a 	.word	0x000c628a
   b8a00:	000c6290 	.word	0x000c6290
   b8a04:	000c6296 	.word	0x000c6296

000b8a08 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b8a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8a0a:	4b39      	ldr	r3, [pc, #228]	; (b8af0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b8a0c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a0e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8a12:	6818      	ldr	r0, [r3, #0]
   b8a14:	9000      	str	r0, [sp, #0]
   b8a16:	889b      	ldrh	r3, [r3, #4]
   b8a18:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a1c:	2205      	movs	r2, #5
   b8a1e:	4629      	mov	r1, r5
   b8a20:	4668      	mov	r0, sp
   b8a22:	f00a ff75 	bl	c3910 <memcmp>
   b8a26:	b920      	cbnz	r0, b8a32 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b8a28:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b8a2c:	3066      	adds	r0, #102	; 0x66
}
   b8a2e:	b003      	add	sp, #12
   b8a30:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8a32:	4930      	ldr	r1, [pc, #192]	; (b8af4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b8a34:	4668      	mov	r0, sp
   b8a36:	f00b f809 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a3a:	2205      	movs	r2, #5
   b8a3c:	4629      	mov	r1, r5
   b8a3e:	4668      	mov	r0, sp
   b8a40:	f00a ff66 	bl	c3910 <memcmp>
   b8a44:	b910      	cbnz	r0, b8a4c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b8a46:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8a4a:	e7ef      	b.n	b8a2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8a4c:	492a      	ldr	r1, [pc, #168]	; (b8af8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b8a4e:	4668      	mov	r0, sp
   b8a50:	f00a fffc 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a54:	2205      	movs	r2, #5
   b8a56:	4629      	mov	r1, r5
   b8a58:	4668      	mov	r0, sp
   b8a5a:	f00a ff59 	bl	c3910 <memcmp>
   b8a5e:	b910      	cbnz	r0, b8a66 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b8a60:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8a64:	e7e2      	b.n	b8a2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8a66:	4925      	ldr	r1, [pc, #148]	; (b8afc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b8a68:	4668      	mov	r0, sp
   b8a6a:	f00a ffef 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a6e:	2205      	movs	r2, #5
   b8a70:	4629      	mov	r1, r5
   b8a72:	4668      	mov	r0, sp
   b8a74:	f00a ff4c 	bl	c3910 <memcmp>
   b8a78:	b910      	cbnz	r0, b8a80 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b8a7a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8a7e:	e7d5      	b.n	b8a2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8a80:	491f      	ldr	r1, [pc, #124]	; (b8b00 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b8a82:	4668      	mov	r0, sp
   b8a84:	f00a ffe2 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8a88:	2205      	movs	r2, #5
   b8a8a:	4629      	mov	r1, r5
   b8a8c:	4668      	mov	r0, sp
   b8a8e:	f00a ff3f 	bl	c3910 <memcmp>
   b8a92:	b910      	cbnz	r0, b8a9a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b8a94:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8a98:	e7c8      	b.n	b8a2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8a9a:	491a      	ldr	r1, [pc, #104]	; (b8b04 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b8a9c:	4668      	mov	r0, sp
   b8a9e:	f00a ffd5 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8aa2:	2205      	movs	r2, #5
   b8aa4:	4629      	mov	r1, r5
   b8aa6:	4668      	mov	r0, sp
   b8aa8:	f00a ff32 	bl	c3910 <memcmp>
   b8aac:	b910      	cbnz	r0, b8ab4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b8aae:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8ab2:	e7bb      	b.n	b8a2c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8ab4:	4914      	ldr	r1, [pc, #80]	; (b8b08 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b8ab6:	4668      	mov	r0, sp
   b8ab8:	f00a ffc8 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8abc:	2205      	movs	r2, #5
   b8abe:	4629      	mov	r1, r5
   b8ac0:	4668      	mov	r0, sp
   b8ac2:	f00a ff25 	bl	c3910 <memcmp>
   b8ac6:	b918      	cbnz	r0, b8ad0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b8ac8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b8acc:	3034      	adds	r0, #52	; 0x34
   b8ace:	e7ae      	b.n	b8a2e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8ad0:	490e      	ldr	r1, [pc, #56]	; (b8b0c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b8ad2:	4668      	mov	r0, sp
   b8ad4:	f00a ffba 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ad8:	2205      	movs	r2, #5
   b8ada:	4629      	mov	r1, r5
   b8adc:	4668      	mov	r0, sp
   b8ade:	f00a ff17 	bl	c3910 <memcmp>
   b8ae2:	b910      	cbnz	r0, b8aea <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b8ae4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8ae8:	e7f0      	b.n	b8acc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b8aea:	2000      	movs	r0, #0
   b8aec:	e79f      	b.n	b8a2e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b8aee:	bf00      	nop
   b8af0:	000c629c 	.word	0x000c629c
   b8af4:	000c6272 	.word	0x000c6272
   b8af8:	000c6278 	.word	0x000c6278
   b8afc:	000c627e 	.word	0x000c627e
   b8b00:	000c6284 	.word	0x000c6284
   b8b04:	000c628a 	.word	0x000c628a
   b8b08:	000c6290 	.word	0x000c6290
   b8b0c:	000c6296 	.word	0x000c6296

000b8b10 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b8b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8b12:	4b39      	ldr	r3, [pc, #228]	; (b8bf8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b8b14:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b16:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8b1a:	6818      	ldr	r0, [r3, #0]
   b8b1c:	9000      	str	r0, [sp, #0]
   b8b1e:	889b      	ldrh	r3, [r3, #4]
   b8b20:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b24:	2205      	movs	r2, #5
   b8b26:	4629      	mov	r1, r5
   b8b28:	4668      	mov	r0, sp
   b8b2a:	f00a fef1 	bl	c3910 <memcmp>
   b8b2e:	b920      	cbnz	r0, b8b3a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b8b30:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b34:	3067      	adds	r0, #103	; 0x67
}
   b8b36:	b003      	add	sp, #12
   b8b38:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8b3a:	4930      	ldr	r1, [pc, #192]	; (b8bfc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b8b3c:	4668      	mov	r0, sp
   b8b3e:	f00a ff85 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b42:	2205      	movs	r2, #5
   b8b44:	4629      	mov	r1, r5
   b8b46:	4668      	mov	r0, sp
   b8b48:	f00a fee2 	bl	c3910 <memcmp>
   b8b4c:	b910      	cbnz	r0, b8b54 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b8b4e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8b52:	e7ef      	b.n	b8b34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8b54:	492a      	ldr	r1, [pc, #168]	; (b8c00 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b8b56:	4668      	mov	r0, sp
   b8b58:	f00a ff78 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b5c:	2205      	movs	r2, #5
   b8b5e:	4629      	mov	r1, r5
   b8b60:	4668      	mov	r0, sp
   b8b62:	f00a fed5 	bl	c3910 <memcmp>
   b8b66:	b910      	cbnz	r0, b8b6e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b8b68:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8b6c:	e7e2      	b.n	b8b34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8b6e:	4925      	ldr	r1, [pc, #148]	; (b8c04 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b8b70:	4668      	mov	r0, sp
   b8b72:	f00a ff6b 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b76:	2205      	movs	r2, #5
   b8b78:	4629      	mov	r1, r5
   b8b7a:	4668      	mov	r0, sp
   b8b7c:	f00a fec8 	bl	c3910 <memcmp>
   b8b80:	b910      	cbnz	r0, b8b88 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b8b82:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8b86:	e7d5      	b.n	b8b34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8b88:	491f      	ldr	r1, [pc, #124]	; (b8c08 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b8b8a:	4668      	mov	r0, sp
   b8b8c:	f00a ff5e 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8b90:	2205      	movs	r2, #5
   b8b92:	4629      	mov	r1, r5
   b8b94:	4668      	mov	r0, sp
   b8b96:	f00a febb 	bl	c3910 <memcmp>
   b8b9a:	b910      	cbnz	r0, b8ba2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b8b9c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8ba0:	e7c8      	b.n	b8b34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8ba2:	491a      	ldr	r1, [pc, #104]	; (b8c0c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b8ba4:	4668      	mov	r0, sp
   b8ba6:	f00a ff51 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8baa:	2205      	movs	r2, #5
   b8bac:	4629      	mov	r1, r5
   b8bae:	4668      	mov	r0, sp
   b8bb0:	f00a feae 	bl	c3910 <memcmp>
   b8bb4:	b910      	cbnz	r0, b8bbc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b8bb6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8bba:	e7bb      	b.n	b8b34 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8bbc:	4914      	ldr	r1, [pc, #80]	; (b8c10 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b8bbe:	4668      	mov	r0, sp
   b8bc0:	f00a ff44 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8bc4:	2205      	movs	r2, #5
   b8bc6:	4629      	mov	r1, r5
   b8bc8:	4668      	mov	r0, sp
   b8bca:	f00a fea1 	bl	c3910 <memcmp>
   b8bce:	b918      	cbnz	r0, b8bd8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b8bd0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8bd4:	3035      	adds	r0, #53	; 0x35
   b8bd6:	e7ae      	b.n	b8b36 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b8bd8:	490e      	ldr	r1, [pc, #56]	; (b8c14 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b8bda:	4668      	mov	r0, sp
   b8bdc:	f00a ff36 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8be0:	2205      	movs	r2, #5
   b8be2:	4629      	mov	r1, r5
   b8be4:	4668      	mov	r0, sp
   b8be6:	f00a fe93 	bl	c3910 <memcmp>
   b8bea:	b910      	cbnz	r0, b8bf2 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b8bec:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8bf0:	e7f0      	b.n	b8bd4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b8bf2:	2000      	movs	r0, #0
   b8bf4:	e79f      	b.n	b8b36 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b8bf6:	bf00      	nop
   b8bf8:	000c629c 	.word	0x000c629c
   b8bfc:	000c6272 	.word	0x000c6272
   b8c00:	000c6278 	.word	0x000c6278
   b8c04:	000c627e 	.word	0x000c627e
   b8c08:	000c6284 	.word	0x000c6284
   b8c0c:	000c628a 	.word	0x000c628a
   b8c10:	000c6290 	.word	0x000c6290
   b8c14:	000c6296 	.word	0x000c6296

000b8c18 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b8c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8c1a:	4b39      	ldr	r3, [pc, #228]	; (b8d00 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b8c1c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c1e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8c22:	6818      	ldr	r0, [r3, #0]
   b8c24:	9000      	str	r0, [sp, #0]
   b8c26:	889b      	ldrh	r3, [r3, #4]
   b8c28:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c2c:	2205      	movs	r2, #5
   b8c2e:	4629      	mov	r1, r5
   b8c30:	4668      	mov	r0, sp
   b8c32:	f00a fe6d 	bl	c3910 <memcmp>
   b8c36:	b928      	cbnz	r0, b8c44 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b8c38:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c3c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b8c40:	b003      	add	sp, #12
   b8c42:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8c44:	492f      	ldr	r1, [pc, #188]	; (b8d04 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b8c46:	4668      	mov	r0, sp
   b8c48:	f00a ff00 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c4c:	2205      	movs	r2, #5
   b8c4e:	4629      	mov	r1, r5
   b8c50:	4668      	mov	r0, sp
   b8c52:	f00a fe5d 	bl	c3910 <memcmp>
   b8c56:	b910      	cbnz	r0, b8c5e <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b8c58:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8c5c:	e7ee      	b.n	b8c3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8c5e:	492a      	ldr	r1, [pc, #168]	; (b8d08 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b8c60:	4668      	mov	r0, sp
   b8c62:	f00a fef3 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c66:	2205      	movs	r2, #5
   b8c68:	4629      	mov	r1, r5
   b8c6a:	4668      	mov	r0, sp
   b8c6c:	f00a fe50 	bl	c3910 <memcmp>
   b8c70:	b910      	cbnz	r0, b8c78 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b8c72:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8c76:	e7e1      	b.n	b8c3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8c78:	4924      	ldr	r1, [pc, #144]	; (b8d0c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b8c7a:	4668      	mov	r0, sp
   b8c7c:	f00a fee6 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c80:	2205      	movs	r2, #5
   b8c82:	4629      	mov	r1, r5
   b8c84:	4668      	mov	r0, sp
   b8c86:	f00a fe43 	bl	c3910 <memcmp>
   b8c8a:	b910      	cbnz	r0, b8c92 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b8c8c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8c90:	e7d4      	b.n	b8c3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8c92:	491f      	ldr	r1, [pc, #124]	; (b8d10 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b8c94:	4668      	mov	r0, sp
   b8c96:	f00a fed9 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8c9a:	2205      	movs	r2, #5
   b8c9c:	4629      	mov	r1, r5
   b8c9e:	4668      	mov	r0, sp
   b8ca0:	f00a fe36 	bl	c3910 <memcmp>
   b8ca4:	b910      	cbnz	r0, b8cac <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b8ca6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8caa:	e7c7      	b.n	b8c3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8cac:	4919      	ldr	r1, [pc, #100]	; (b8d14 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b8cae:	4668      	mov	r0, sp
   b8cb0:	f00a fecc 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cb4:	2205      	movs	r2, #5
   b8cb6:	4629      	mov	r1, r5
   b8cb8:	4668      	mov	r0, sp
   b8cba:	f00a fe29 	bl	c3910 <memcmp>
   b8cbe:	b910      	cbnz	r0, b8cc6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b8cc0:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8cc4:	e7ba      	b.n	b8c3c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8cc6:	4914      	ldr	r1, [pc, #80]	; (b8d18 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b8cc8:	4668      	mov	r0, sp
   b8cca:	f00a febf 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cce:	2205      	movs	r2, #5
   b8cd0:	4629      	mov	r1, r5
   b8cd2:	4668      	mov	r0, sp
   b8cd4:	f00a fe1c 	bl	c3910 <memcmp>
   b8cd8:	b918      	cbnz	r0, b8ce2 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b8cda:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b8cde:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8ce0:	e7ae      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8ce2:	490e      	ldr	r1, [pc, #56]	; (b8d1c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b8ce4:	4668      	mov	r0, sp
   b8ce6:	f00a feb1 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8cea:	2205      	movs	r2, #5
   b8cec:	4629      	mov	r1, r5
   b8cee:	4668      	mov	r0, sp
   b8cf0:	f00a fe0e 	bl	c3910 <memcmp>
   b8cf4:	b910      	cbnz	r0, b8cfc <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b8cf6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8cfa:	e7f0      	b.n	b8cde <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b8cfc:	2000      	movs	r0, #0
   b8cfe:	e79f      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b8d00:	000c629c 	.word	0x000c629c
   b8d04:	000c6272 	.word	0x000c6272
   b8d08:	000c6278 	.word	0x000c6278
   b8d0c:	000c627e 	.word	0x000c627e
   b8d10:	000c6284 	.word	0x000c6284
   b8d14:	000c628a 	.word	0x000c628a
   b8d18:	000c6290 	.word	0x000c6290
   b8d1c:	000c6296 	.word	0x000c6296

000b8d20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b8d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8d22:	4b3a      	ldr	r3, [pc, #232]	; (b8e0c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b8d24:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d26:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8d2a:	6818      	ldr	r0, [r3, #0]
   b8d2c:	9000      	str	r0, [sp, #0]
   b8d2e:	889b      	ldrh	r3, [r3, #4]
   b8d30:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d34:	2205      	movs	r2, #5
   b8d36:	4629      	mov	r1, r5
   b8d38:	4668      	mov	r0, sp
   b8d3a:	f00a fde9 	bl	c3910 <memcmp>
   b8d3e:	b930      	cbnz	r0, b8d4e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b8d40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8d44:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8d48:	3001      	adds	r0, #1
}
   b8d4a:	b003      	add	sp, #12
   b8d4c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8d4e:	4930      	ldr	r1, [pc, #192]	; (b8e10 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b8d50:	4668      	mov	r0, sp
   b8d52:	f00a fe7b 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d56:	2205      	movs	r2, #5
   b8d58:	4629      	mov	r1, r5
   b8d5a:	4668      	mov	r0, sp
   b8d5c:	f00a fdd8 	bl	c3910 <memcmp>
   b8d60:	b910      	cbnz	r0, b8d68 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b8d62:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8d66:	e7ed      	b.n	b8d44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8d68:	492a      	ldr	r1, [pc, #168]	; (b8e14 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b8d6a:	4668      	mov	r0, sp
   b8d6c:	f00a fe6e 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d70:	2205      	movs	r2, #5
   b8d72:	4629      	mov	r1, r5
   b8d74:	4668      	mov	r0, sp
   b8d76:	f00a fdcb 	bl	c3910 <memcmp>
   b8d7a:	b910      	cbnz	r0, b8d82 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b8d7c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8d80:	e7e0      	b.n	b8d44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8d82:	4925      	ldr	r1, [pc, #148]	; (b8e18 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b8d84:	4668      	mov	r0, sp
   b8d86:	f00a fe61 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8d8a:	2205      	movs	r2, #5
   b8d8c:	4629      	mov	r1, r5
   b8d8e:	4668      	mov	r0, sp
   b8d90:	f00a fdbe 	bl	c3910 <memcmp>
   b8d94:	b910      	cbnz	r0, b8d9c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b8d96:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8d9a:	e7d3      	b.n	b8d44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8d9c:	491f      	ldr	r1, [pc, #124]	; (b8e1c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b8d9e:	4668      	mov	r0, sp
   b8da0:	f00a fe54 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8da4:	2205      	movs	r2, #5
   b8da6:	4629      	mov	r1, r5
   b8da8:	4668      	mov	r0, sp
   b8daa:	f00a fdb1 	bl	c3910 <memcmp>
   b8dae:	b910      	cbnz	r0, b8db6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b8db0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8db4:	e7c6      	b.n	b8d44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8db6:	491a      	ldr	r1, [pc, #104]	; (b8e20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b8db8:	4668      	mov	r0, sp
   b8dba:	f00a fe47 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dbe:	2205      	movs	r2, #5
   b8dc0:	4629      	mov	r1, r5
   b8dc2:	4668      	mov	r0, sp
   b8dc4:	f00a fda4 	bl	c3910 <memcmp>
   b8dc8:	b910      	cbnz	r0, b8dd0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b8dca:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b8dce:	e7b9      	b.n	b8d44 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8dd0:	4914      	ldr	r1, [pc, #80]	; (b8e24 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b8dd2:	4668      	mov	r0, sp
   b8dd4:	f00a fe3a 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8dd8:	2205      	movs	r2, #5
   b8dda:	4629      	mov	r1, r5
   b8ddc:	4668      	mov	r0, sp
   b8dde:	f00a fd97 	bl	c3910 <memcmp>
   b8de2:	b918      	cbnz	r0, b8dec <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b8de4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8de8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b8dea:	e7ad      	b.n	b8d48 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b8dec:	490e      	ldr	r1, [pc, #56]	; (b8e28 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b8dee:	4668      	mov	r0, sp
   b8df0:	f00a fe2c 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8df4:	2205      	movs	r2, #5
   b8df6:	4629      	mov	r1, r5
   b8df8:	4668      	mov	r0, sp
   b8dfa:	f00a fd89 	bl	c3910 <memcmp>
   b8dfe:	b910      	cbnz	r0, b8e06 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b8e00:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b8e04:	e7f0      	b.n	b8de8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b8e06:	2000      	movs	r0, #0
   b8e08:	e79f      	b.n	b8d4a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b8e0a:	bf00      	nop
   b8e0c:	000c629c 	.word	0x000c629c
   b8e10:	000c6272 	.word	0x000c6272
   b8e14:	000c6278 	.word	0x000c6278
   b8e18:	000c627e 	.word	0x000c627e
   b8e1c:	000c6284 	.word	0x000c6284
   b8e20:	000c628a 	.word	0x000c628a
   b8e24:	000c6290 	.word	0x000c6290
   b8e28:	000c6296 	.word	0x000c6296

000b8e2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b8e2c:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b8e2e:	4b30      	ldr	r3, [pc, #192]	; (b8ef0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b8e30:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e32:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8e36:	6818      	ldr	r0, [r3, #0]
   b8e38:	9000      	str	r0, [sp, #0]
   b8e3a:	889b      	ldrh	r3, [r3, #4]
   b8e3c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e40:	2205      	movs	r2, #5
   b8e42:	4621      	mov	r1, r4
   b8e44:	4668      	mov	r0, sp
   b8e46:	f00a fd63 	bl	c3910 <memcmp>
   b8e4a:	b910      	cbnz	r0, b8e52 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b8e4c:	2064      	movs	r0, #100	; 0x64
}
   b8e4e:	b002      	add	sp, #8
   b8e50:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b8e52:	4928      	ldr	r1, [pc, #160]	; (b8ef4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b8e54:	4668      	mov	r0, sp
   b8e56:	f00a fdf9 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e5a:	2205      	movs	r2, #5
   b8e5c:	4621      	mov	r1, r4
   b8e5e:	4668      	mov	r0, sp
   b8e60:	f00a fd56 	bl	c3910 <memcmp>
   b8e64:	2800      	cmp	r0, #0
   b8e66:	d0f1      	beq.n	b8e4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b8e68:	4923      	ldr	r1, [pc, #140]	; (b8ef8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b8e6a:	4668      	mov	r0, sp
   b8e6c:	f00a fdee 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e70:	2205      	movs	r2, #5
   b8e72:	4621      	mov	r1, r4
   b8e74:	4668      	mov	r0, sp
   b8e76:	f00a fd4b 	bl	c3910 <memcmp>
   b8e7a:	2800      	cmp	r0, #0
   b8e7c:	d0e6      	beq.n	b8e4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b8e7e:	491f      	ldr	r1, [pc, #124]	; (b8efc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b8e80:	4668      	mov	r0, sp
   b8e82:	f00a fde3 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e86:	2205      	movs	r2, #5
   b8e88:	4621      	mov	r1, r4
   b8e8a:	4668      	mov	r0, sp
   b8e8c:	f00a fd40 	bl	c3910 <memcmp>
   b8e90:	2800      	cmp	r0, #0
   b8e92:	d0db      	beq.n	b8e4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b8e94:	491a      	ldr	r1, [pc, #104]	; (b8f00 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b8e96:	4668      	mov	r0, sp
   b8e98:	f00a fdd8 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8e9c:	2205      	movs	r2, #5
   b8e9e:	4621      	mov	r1, r4
   b8ea0:	4668      	mov	r0, sp
   b8ea2:	f00a fd35 	bl	c3910 <memcmp>
   b8ea6:	2800      	cmp	r0, #0
   b8ea8:	d0d0      	beq.n	b8e4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b8eaa:	4916      	ldr	r1, [pc, #88]	; (b8f04 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b8eac:	4668      	mov	r0, sp
   b8eae:	f00a fdcd 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8eb2:	2205      	movs	r2, #5
   b8eb4:	4621      	mov	r1, r4
   b8eb6:	4668      	mov	r0, sp
   b8eb8:	f00a fd2a 	bl	c3910 <memcmp>
   b8ebc:	2800      	cmp	r0, #0
   b8ebe:	d0c5      	beq.n	b8e4c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b8ec0:	4911      	ldr	r1, [pc, #68]	; (b8f08 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b8ec2:	4668      	mov	r0, sp
   b8ec4:	f00a fdc2 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8ec8:	2205      	movs	r2, #5
   b8eca:	4621      	mov	r1, r4
   b8ecc:	4668      	mov	r0, sp
   b8ece:	f00a fd1f 	bl	c3910 <memcmp>
   b8ed2:	b148      	cbz	r0, b8ee8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b8ed4:	490d      	ldr	r1, [pc, #52]	; (b8f0c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b8ed6:	4668      	mov	r0, sp
   b8ed8:	f00a fdb8 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8edc:	2205      	movs	r2, #5
   b8ede:	4621      	mov	r1, r4
   b8ee0:	4668      	mov	r0, sp
   b8ee2:	f00a fd15 	bl	c3910 <memcmp>
   b8ee6:	b908      	cbnz	r0, b8eec <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b8ee8:	2032      	movs	r0, #50	; 0x32
   b8eea:	e7b0      	b.n	b8e4e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b8eec:	2000      	movs	r0, #0
   b8eee:	e7ae      	b.n	b8e4e <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b8ef0:	000c629c 	.word	0x000c629c
   b8ef4:	000c6272 	.word	0x000c6272
   b8ef8:	000c6278 	.word	0x000c6278
   b8efc:	000c627e 	.word	0x000c627e
   b8f00:	000c6284 	.word	0x000c6284
   b8f04:	000c628a 	.word	0x000c628a
   b8f08:	000c6290 	.word	0x000c6290
   b8f0c:	000c6296 	.word	0x000c6296

000b8f10 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b8f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f12:	4b38      	ldr	r3, [pc, #224]	; (b8ff4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b8f14:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f16:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f1a:	6818      	ldr	r0, [r3, #0]
   b8f1c:	9000      	str	r0, [sp, #0]
   b8f1e:	889b      	ldrh	r3, [r3, #4]
   b8f20:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f24:	2205      	movs	r2, #5
   b8f26:	4629      	mov	r1, r5
   b8f28:	4668      	mov	r0, sp
   b8f2a:	f00a fcf1 	bl	c3910 <memcmp>
   b8f2e:	b918      	cbnz	r0, b8f38 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b8f30:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b8f34:	b003      	add	sp, #12
   b8f36:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f38:	492f      	ldr	r1, [pc, #188]	; (b8ff8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b8f3a:	4668      	mov	r0, sp
   b8f3c:	f00a fd86 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f40:	2205      	movs	r2, #5
   b8f42:	4629      	mov	r1, r5
   b8f44:	4668      	mov	r0, sp
   b8f46:	f00a fce3 	bl	c3910 <memcmp>
   b8f4a:	b910      	cbnz	r0, b8f52 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b8f4c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b8f50:	e7f0      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b8f52:	492a      	ldr	r1, [pc, #168]	; (b8ffc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b8f54:	4668      	mov	r0, sp
   b8f56:	f00a fd79 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f5a:	2205      	movs	r2, #5
   b8f5c:	4629      	mov	r1, r5
   b8f5e:	4668      	mov	r0, sp
   b8f60:	f00a fcd6 	bl	c3910 <memcmp>
   b8f64:	b910      	cbnz	r0, b8f6c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b8f66:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b8f6a:	e7e3      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b8f6c:	4924      	ldr	r1, [pc, #144]	; (b9000 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b8f6e:	4668      	mov	r0, sp
   b8f70:	f00a fd6c 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f74:	2205      	movs	r2, #5
   b8f76:	4629      	mov	r1, r5
   b8f78:	4668      	mov	r0, sp
   b8f7a:	f00a fcc9 	bl	c3910 <memcmp>
   b8f7e:	b910      	cbnz	r0, b8f86 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b8f80:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b8f84:	e7d6      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b8f86:	491f      	ldr	r1, [pc, #124]	; (b9004 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b8f88:	4668      	mov	r0, sp
   b8f8a:	f00a fd5f 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f8e:	2205      	movs	r2, #5
   b8f90:	4629      	mov	r1, r5
   b8f92:	4668      	mov	r0, sp
   b8f94:	f00a fcbc 	bl	c3910 <memcmp>
   b8f98:	b910      	cbnz	r0, b8fa0 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b8f9a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b8f9e:	e7c9      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b8fa0:	4919      	ldr	r1, [pc, #100]	; (b9008 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b8fa2:	4668      	mov	r0, sp
   b8fa4:	f00a fd52 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fa8:	2205      	movs	r2, #5
   b8faa:	4629      	mov	r1, r5
   b8fac:	4668      	mov	r0, sp
   b8fae:	f00a fcaf 	bl	c3910 <memcmp>
   b8fb2:	b910      	cbnz	r0, b8fba <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b8fb4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b8fb8:	e7bc      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b8fba:	4914      	ldr	r1, [pc, #80]	; (b900c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b8fbc:	4668      	mov	r0, sp
   b8fbe:	f00a fd45 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fc2:	2205      	movs	r2, #5
   b8fc4:	4629      	mov	r1, r5
   b8fc6:	4668      	mov	r0, sp
   b8fc8:	f00a fca2 	bl	c3910 <memcmp>
   b8fcc:	b910      	cbnz	r0, b8fd4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b8fce:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b8fd2:	e7af      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b8fd4:	490e      	ldr	r1, [pc, #56]	; (b9010 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b8fd6:	4668      	mov	r0, sp
   b8fd8:	f00a fd38 	bl	c3a4c <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fdc:	2205      	movs	r2, #5
   b8fde:	4629      	mov	r1, r5
   b8fe0:	4668      	mov	r0, sp
   b8fe2:	f00a fc95 	bl	c3910 <memcmp>
   b8fe6:	b910      	cbnz	r0, b8fee <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b8fe8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b8fec:	e7a2      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b8fee:	2000      	movs	r0, #0
   b8ff0:	e7a0      	b.n	b8f34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b8ff2:	bf00      	nop
   b8ff4:	000c629c 	.word	0x000c629c
   b8ff8:	000c6272 	.word	0x000c6272
   b8ffc:	000c6278 	.word	0x000c6278
   b9000:	000c627e 	.word	0x000c627e
   b9004:	000c6284 	.word	0x000c6284
   b9008:	000c628a 	.word	0x000c628a
   b900c:	000c6290 	.word	0x000c6290
   b9010:	000c6296 	.word	0x000c6296

000b9014 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9014:	4770      	bx	lr
	...

000b9018 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9018:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b901a:	8813      	ldrh	r3, [r2, #0]
   b901c:	4d0c      	ldr	r5, [pc, #48]	; (b9050 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b901e:	2b01      	cmp	r3, #1
{
   b9020:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9022:	d10e      	bne.n	b9042 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9024:	020a      	lsls	r2, r1, #8
   b9026:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b902a:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b902c:	3301      	adds	r3, #1
   b902e:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9030:	f7ff fff0 	bl	b9014 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9034:	8820      	ldrh	r0, [r4, #0]
   b9036:	882b      	ldrh	r3, [r5, #0]
}
   b9038:	4298      	cmp	r0, r3
   b903a:	bf14      	ite	ne
   b903c:	2003      	movne	r0, #3
   b903e:	2000      	moveq	r0, #0
   b9040:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9042:	2b02      	cmp	r3, #2
   b9044:	d1f2      	bne.n	b902c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b9046:	882a      	ldrh	r2, [r5, #0]
   b9048:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b904a:	3206      	adds	r2, #6
   b904c:	e7ed      	b.n	b902a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b904e:	bf00      	nop
   b9050:	2003e61e 	.word	0x2003e61e

000b9054 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9054:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b9056:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b9058:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b905a:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b905c:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b905e:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9062:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b9066:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b906a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b906e:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9072:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9074:	4413      	add	r3, r2
   b9076:	734b      	strb	r3, [r1, #13]
   b9078:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b907a:	b293      	uxth	r3, r2
   b907c:	429c      	cmp	r4, r3
   b907e:	d90a      	bls.n	b9096 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9080:	688b      	ldr	r3, [r1, #8]
   b9082:	7b08      	ldrb	r0, [r1, #12]
   b9084:	5c9b      	ldrb	r3, [r3, r2]
   b9086:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9088:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b908a:	b2db      	uxtb	r3, r3
   b908c:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b908e:	4403      	add	r3, r0
   b9090:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9092:	3201      	adds	r2, #1
   b9094:	e7f1      	b.n	b907a <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9096:	bd30      	pop	{r4, r5, pc}

000b9098 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9098:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b909c:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b909e:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b90a2:	b2c9      	uxtb	r1, r1
   b90a4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b90a8:	4419      	add	r1, r3
   b90aa:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b90ae:	4770      	bx	lr

000b90b0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b90b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b90b4:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b90b8:	f10b 0b08 	add.w	fp, fp, #8
   b90bc:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b90c0:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90c4:	f1ab 0302 	sub.w	r3, fp, #2
{
   b90c8:	4604      	mov	r4, r0
   b90ca:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b90cc:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b90ce:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b90d0:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b90d2:	f1ba 0f00 	cmp.w	sl, #0
   b90d6:	f000 80a6 	beq.w	b9226 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b90da:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b90dc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b90e0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b90e4:	4556      	cmp	r6, sl
   b90e6:	bf28      	it	cs
   b90e8:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b90ea:	ebaa 0a06 	sub.w	sl, sl, r6
   b90ee:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b90f2:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b90f6:	bf02      	ittt	eq
   b90f8:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b90fc:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b90fe:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9102:	f006 f8cf 	bl	bf2a4 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9106:	f1b9 0f00 	cmp.w	r9, #0
   b910a:	d15c      	bne.n	b91c6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b910c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9110:	6803      	ldr	r3, [r0, #0]
   b9112:	21b5      	movs	r1, #181	; 0xb5
   b9114:	689b      	ldr	r3, [r3, #8]
   b9116:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9118:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b911c:	6803      	ldr	r3, [r0, #0]
   b911e:	2162      	movs	r1, #98	; 0x62
   b9120:	689b      	ldr	r3, [r3, #8]
   b9122:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9124:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9128:	7829      	ldrb	r1, [r5, #0]
   b912a:	6803      	ldr	r3, [r0, #0]
   b912c:	689b      	ldr	r3, [r3, #8]
   b912e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9130:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9134:	7869      	ldrb	r1, [r5, #1]
   b9136:	6803      	ldr	r3, [r0, #0]
   b9138:	689b      	ldr	r3, [r3, #8]
   b913a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b913c:	78a9      	ldrb	r1, [r5, #2]
   b913e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9142:	f7fe fdc1 	bl	b7cc8 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b9146:	8869      	ldrh	r1, [r5, #2]
   b9148:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b914c:	0a09      	lsrs	r1, r1, #8
   b914e:	f7fe fdbb 	bl	b7cc8 <_ZN7TwoWire5writeEi.isra.0>
   b9152:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9154:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9156:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b915a:	fa1f f983 	uxth.w	r9, r3
   b915e:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9162:	454a      	cmp	r2, r9
   b9164:	b2bf      	uxth	r7, r7
   b9166:	d90d      	bls.n	b9184 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b9168:	42be      	cmp	r6, r7
   b916a:	d90b      	bls.n	b9184 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b916c:	68aa      	ldr	r2, [r5, #8]
   b916e:	6801      	ldr	r1, [r0, #0]
   b9170:	9301      	str	r3, [sp, #4]
   b9172:	4442      	add	r2, r8
   b9174:	688f      	ldr	r7, [r1, #8]
   b9176:	5cd1      	ldrb	r1, [r2, r3]
   b9178:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b917a:	9b01      	ldr	r3, [sp, #4]
   b917c:	3301      	adds	r3, #1
   b917e:	e7e9      	b.n	b9154 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9180:	46b9      	mov	r9, r7
   b9182:	e7a6      	b.n	b90d2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9184:	3e02      	subs	r6, #2
      startSpot += x;
   b9186:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9188:	42b7      	cmp	r7, r6
      startSpot += x;
   b918a:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b918e:	d10c      	bne.n	b91aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9190:	6803      	ldr	r3, [r0, #0]
   b9192:	7b29      	ldrb	r1, [r5, #12]
   b9194:	689b      	ldr	r3, [r3, #8]
   b9196:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9198:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b919c:	7b69      	ldrb	r1, [r5, #13]
   b919e:	6803      	ldr	r3, [r0, #0]
   b91a0:	689b      	ldr	r3, [r3, #8]
   b91a2:	4798      	blx	r3
        bytesSent += 2;
   b91a4:	f109 0708 	add.w	r7, r9, #8
   b91a8:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b91aa:	455f      	cmp	r7, fp
   b91ac:	d2e8      	bcs.n	b9180 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b91ae:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b91b2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91b6:	f006 f87c 	bl	bf2b2 <_ZN7TwoWire15endTransmissionEh>
   b91ba:	2800      	cmp	r0, #0
   b91bc:	d0e0      	beq.n	b9180 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b91be:	200c      	movs	r0, #12
}
   b91c0:	b003      	add	sp, #12
   b91c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b91c6:	2200      	movs	r2, #0
   b91c8:	b291      	uxth	r1, r2
   b91ca:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91ce:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91d0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b91d4:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91d6:	d910      	bls.n	b91fa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b91d8:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b91dc:	eb08 0c02 	add.w	ip, r8, r2
   b91e0:	1c53      	adds	r3, r2, #1
   b91e2:	45f4      	cmp	ip, lr
   b91e4:	9301      	str	r3, [sp, #4]
   b91e6:	da08      	bge.n	b91fa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b91e8:	68a9      	ldr	r1, [r5, #8]
   b91ea:	6802      	ldr	r2, [r0, #0]
   b91ec:	f811 100c 	ldrb.w	r1, [r1, ip]
   b91f0:	6892      	ldr	r2, [r2, #8]
   b91f2:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b91f4:	9b01      	ldr	r3, [sp, #4]
   b91f6:	461a      	mov	r2, r3
   b91f8:	e7e6      	b.n	b91c8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b91fa:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b91fc:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b91fe:	429f      	cmp	r7, r3
      startSpot += x;
   b9200:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9204:	d1d1      	bne.n	b91aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9206:	3e02      	subs	r6, #2
   b9208:	42b2      	cmp	r2, r6
   b920a:	d1ce      	bne.n	b91aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b920c:	6803      	ldr	r3, [r0, #0]
   b920e:	7b29      	ldrb	r1, [r5, #12]
   b9210:	689b      	ldr	r3, [r3, #8]
   b9212:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9214:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9218:	7b69      	ldrb	r1, [r5, #13]
   b921a:	6803      	ldr	r3, [r0, #0]
   b921c:	689b      	ldr	r3, [r3, #8]
   b921e:	4798      	blx	r3
        bytesSent += 2;
   b9220:	fa1f f78b 	uxth.w	r7, fp
   b9224:	e7c1      	b.n	b91aa <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9226:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b922a:	f006 f846 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
   b922e:	2800      	cmp	r0, #0
   b9230:	d0c6      	beq.n	b91c0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9232:	e7c4      	b.n	b91be <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9234 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9234:	b570      	push	{r4, r5, r6, lr}
   b9236:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9238:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b923c:	6803      	ldr	r3, [r0, #0]
{
   b923e:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9240:	689b      	ldr	r3, [r3, #8]
   b9242:	21b5      	movs	r1, #181	; 0xb5
   b9244:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9246:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b924a:	6803      	ldr	r3, [r0, #0]
   b924c:	2162      	movs	r1, #98	; 0x62
   b924e:	689b      	ldr	r3, [r3, #8]
   b9250:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9252:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9256:	7821      	ldrb	r1, [r4, #0]
   b9258:	6803      	ldr	r3, [r0, #0]
   b925a:	689b      	ldr	r3, [r3, #8]
   b925c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b925e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9262:	7861      	ldrb	r1, [r4, #1]
   b9264:	6803      	ldr	r3, [r0, #0]
   b9266:	689b      	ldr	r3, [r3, #8]
   b9268:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b926a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b926e:	78a1      	ldrb	r1, [r4, #2]
   b9270:	6803      	ldr	r3, [r0, #0]
   b9272:	689b      	ldr	r3, [r3, #8]
   b9274:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9276:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b927a:	8861      	ldrh	r1, [r4, #2]
   b927c:	6803      	ldr	r3, [r0, #0]
   b927e:	0a09      	lsrs	r1, r1, #8
   b9280:	689b      	ldr	r3, [r3, #8]
   b9282:	4798      	blx	r3
   b9284:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9286:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b928a:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b928c:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b928e:	b2b2      	uxth	r2, r6
   b9290:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9292:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9294:	d904      	bls.n	b92a0 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9296:	68a1      	ldr	r1, [r4, #8]
   b9298:	5c89      	ldrb	r1, [r1, r2]
   b929a:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b929c:	3601      	adds	r6, #1
   b929e:	e7f2      	b.n	b9286 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b92a0:	7b21      	ldrb	r1, [r4, #12]
   b92a2:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b92a4:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b92a8:	7b61      	ldrb	r1, [r4, #13]
   b92aa:	6803      	ldr	r3, [r0, #0]
}
   b92ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b92b0:	689b      	ldr	r3, [r3, #8]
   b92b2:	4718      	bx	r3

000b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b92b4:	b510      	push	{r4, lr}
   b92b6:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b92b8:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b92bc:	f007 fc9e 	bl	c0bfc <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b92c0:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92c4:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b92c8:	429a      	cmp	r2, r3
   b92ca:	d90b      	bls.n	b92e4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b92cc:	28ff      	cmp	r0, #255	; 0xff
   b92ce:	d101      	bne.n	b92d4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b92d0:	7822      	ldrb	r2, [r4, #0]
   b92d2:	b13a      	cbz	r2, b92e4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b92d4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b92d8:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b92da:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b92de:	3301      	adds	r3, #1
   b92e0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b92e4:	bd10      	pop	{r4, pc}
	...

000b92e8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b92e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b92ec:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b92f0:	4604      	mov	r4, r0
   b92f2:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b92f4:	b97b      	cbnz	r3, b9316 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b92f6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b92fa:	b923      	cbnz	r3, b9306 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b92fc:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9300:	2b00      	cmp	r3, #0
   b9302:	f000 80ca 	beq.w	b949a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9306:	4966      	ldr	r1, [pc, #408]	; (b94a0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9308:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b930c:	b004      	add	sp, #16
   b930e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9312:	f007 ba94 	b.w	c083e <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9316:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b931a:	4a62      	ldr	r2, [pc, #392]	; (b94a4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b931c:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b931e:	2600      	movs	r6, #0
   b9320:	2301      	movs	r3, #1
   b9322:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9326:	4669      	mov	r1, sp
   b9328:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b932c:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9330:	9200      	str	r2, [sp, #0]
   b9332:	f88d 6004 	strb.w	r6, [sp, #4]
   b9336:	f007 fbc1 	bl	c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b933a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b933e:	4631      	mov	r1, r6
   b9340:	f008 f847 	bl	c13d2 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9344:	21b5      	movs	r1, #181	; 0xb5
   b9346:	4620      	mov	r0, r4
   b9348:	f7ff ffb4 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b934c:	2162      	movs	r1, #98	; 0x62
   b934e:	4620      	mov	r0, r4
   b9350:	f7ff ffb0 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9354:	7829      	ldrb	r1, [r5, #0]
   b9356:	4620      	mov	r0, r4
   b9358:	f7ff ffac 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b935c:	7869      	ldrb	r1, [r5, #1]
   b935e:	4620      	mov	r0, r4
   b9360:	f7ff ffa8 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9364:	78a9      	ldrb	r1, [r5, #2]
   b9366:	4620      	mov	r0, r4
   b9368:	f7ff ffa4 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b936c:	8869      	ldrh	r1, [r5, #2]
   b936e:	4620      	mov	r0, r4
   b9370:	0a09      	lsrs	r1, r1, #8
   b9372:	f7ff ff9f 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9376:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b937a:	2b00      	cmp	r3, #0
   b937c:	d042      	beq.n	b9404 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b937e:	494a      	ldr	r1, [pc, #296]	; (b94a8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9380:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9384:	f007 fa5b 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9388:	2210      	movs	r2, #16
   b938a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b938e:	21b5      	movs	r1, #181	; 0xb5
   b9390:	f7fe fc8a 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9394:	4945      	ldr	r1, [pc, #276]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9396:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b939a:	f007 fa50 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b939e:	2210      	movs	r2, #16
   b93a0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93a4:	2162      	movs	r1, #98	; 0x62
   b93a6:	f7fe fc7f 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93aa:	4940      	ldr	r1, [pc, #256]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93b0:	f007 fa45 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b93b4:	2210      	movs	r2, #16
   b93b6:	7829      	ldrb	r1, [r5, #0]
   b93b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93bc:	f7fe fc74 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93c0:	493a      	ldr	r1, [pc, #232]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93c6:	f007 fa3a 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b93ca:	2210      	movs	r2, #16
   b93cc:	7869      	ldrb	r1, [r5, #1]
   b93ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93d2:	f7fe fc69 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b93d6:	4935      	ldr	r1, [pc, #212]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93dc:	f007 fa2f 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b93e0:	2210      	movs	r2, #16
   b93e2:	78a9      	ldrb	r1, [r5, #2]
   b93e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93e8:	f007 fa45 	bl	c0876 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b93ec:	492f      	ldr	r1, [pc, #188]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b93ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93f2:	f007 fa24 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b93f6:	8869      	ldrh	r1, [r5, #2]
   b93f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b93fc:	2210      	movs	r2, #16
   b93fe:	0a09      	lsrs	r1, r1, #8
   b9400:	f007 fa39 	bl	c0876 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9404:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9408:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b940a:	886a      	ldrh	r2, [r5, #2]
   b940c:	b2b3      	uxth	r3, r6
   b940e:	429a      	cmp	r2, r3
   b9410:	d916      	bls.n	b9440 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9412:	461f      	mov	r7, r3
   b9414:	68ab      	ldr	r3, [r5, #8]
   b9416:	4620      	mov	r0, r4
   b9418:	5dd9      	ldrb	r1, [r3, r7]
   b941a:	f7ff ff4b 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b941e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9422:	b15b      	cbz	r3, b943c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9424:	4641      	mov	r1, r8
   b9426:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b942a:	f007 fa08 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b942e:	68ab      	ldr	r3, [r5, #8]
   b9430:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9434:	5dd9      	ldrb	r1, [r3, r7]
   b9436:	2210      	movs	r2, #16
   b9438:	f7fe fc36 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b943c:	3601      	adds	r6, #1
   b943e:	e7e4      	b.n	b940a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9440:	7b29      	ldrb	r1, [r5, #12]
   b9442:	4620      	mov	r0, r4
   b9444:	f7ff ff36 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9448:	7b69      	ldrb	r1, [r5, #13]
   b944a:	4620      	mov	r0, r4
   b944c:	f7ff ff32 	bl	b92b4 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9450:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9454:	2101      	movs	r1, #1
   b9456:	f007 ffbc 	bl	c13d2 <digitalWrite>
  _spiPort->endTransaction();
   b945a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b945e:	f007 fb13 	bl	c0a88 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9462:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9466:	b1c3      	cbz	r3, b949a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9468:	4910      	ldr	r1, [pc, #64]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b946a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b946e:	f007 f9e6 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9472:	7b29      	ldrb	r1, [r5, #12]
   b9474:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9478:	2210      	movs	r2, #16
   b947a:	f7fe fc15 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b947e:	490b      	ldr	r1, [pc, #44]	; (b94ac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9480:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9484:	f007 f9db 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9488:	7b69      	ldrb	r1, [r5, #13]
   b948a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b948e:	2210      	movs	r2, #16
}
   b9490:	b004      	add	sp, #16
   b9492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9496:	f7fe bc0e 	b.w	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b949a:	b004      	add	sp, #16
   b949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94a0:	000c62a2 	.word	0x000c62a2
   b94a4:	000c6080 	.word	0x000c6080
   b94a8:	000c62d7 	.word	0x000c62d7
   b94ac:	000c71fd 	.word	0x000c71fd

000b94b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b94b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b94b2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b94b6:	4604      	mov	r4, r0
   b94b8:	460d      	mov	r5, r1
   b94ba:	4616      	mov	r6, r2
  if (_printDebug == true)
   b94bc:	2b00      	cmp	r3, #0
   b94be:	f000 8082 	beq.w	b95c6 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b94c2:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b94c6:	4940      	ldr	r1, [pc, #256]	; (b95c8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b94c8:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b94cc:	f007 f9b7 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b94d0:	782b      	ldrb	r3, [r5, #0]
   b94d2:	2b01      	cmp	r3, #1
   b94d4:	d13c      	bne.n	b9550 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b94d6:	493d      	ldr	r1, [pc, #244]	; (b95cc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b94d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b94dc:	f007 f9af 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b94e0:	493b      	ldr	r1, [pc, #236]	; (b95d0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b94e2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b94e6:	f007 f9aa 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b94ea:	882b      	ldrh	r3, [r5, #0]
   b94ec:	f240 7201 	movw	r2, #1793	; 0x701
   b94f0:	4293      	cmp	r3, r2
   b94f2:	d145      	bne.n	b9580 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b94f4:	4937      	ldr	r1, [pc, #220]	; (b95d4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b94f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b94fa:	f007 f9a0 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b94fe:	4936      	ldr	r1, [pc, #216]	; (b95d8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9500:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9504:	f007 f99b 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
   b9508:	8869      	ldrh	r1, [r5, #2]
   b950a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b950e:	2210      	movs	r2, #16
   b9510:	f007 f9b1 	bl	c0876 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9514:	2f01      	cmp	r7, #1
   b9516:	d101      	bne.n	b951c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9518:	2e00      	cmp	r6, #0
   b951a:	d049      	beq.n	b95b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b951c:	492f      	ldr	r1, [pc, #188]	; (b95dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b951e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9522:	4f2f      	ldr	r7, [pc, #188]	; (b95e0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9524:	f007 f98b 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
   b9528:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b952a:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b952c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9530:	b2b3      	uxth	r3, r6
   b9532:	429a      	cmp	r2, r3
   b9534:	d941      	bls.n	b95ba <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9536:	4639      	mov	r1, r7
   b9538:	f007 f981 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b953c:	b2b3      	uxth	r3, r6
   b953e:	68a9      	ldr	r1, [r5, #8]
   b9540:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9544:	5cc9      	ldrb	r1, [r1, r3]
   b9546:	2210      	movs	r2, #16
   b9548:	f7fe fbae 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b954c:	3601      	adds	r6, #1
   b954e:	e7ec      	b.n	b952a <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9550:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9552:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9556:	d101      	bne.n	b955c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9558:	4922      	ldr	r1, [pc, #136]	; (b95e4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b955a:	e7bf      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b955c:	2b06      	cmp	r3, #6
   b955e:	d101      	bne.n	b9564 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9560:	4921      	ldr	r1, [pc, #132]	; (b95e8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9562:	e7bb      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9564:	2b0a      	cmp	r3, #10
   b9566:	d101      	bne.n	b956c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9568:	4920      	ldr	r1, [pc, #128]	; (b95ec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b956a:	e7b7      	b.n	b94dc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b956c:	4920      	ldr	r1, [pc, #128]	; (b95f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b956e:	f007 f966 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9572:	7829      	ldrb	r1, [r5, #0]
   b9574:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9578:	2210      	movs	r2, #16
   b957a:	f7fe fb95 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b957e:	e7af      	b.n	b94e0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9580:	f640 0206 	movw	r2, #2054	; 0x806
   b9584:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9586:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b958a:	d101      	bne.n	b9590 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b958c:	4919      	ldr	r1, [pc, #100]	; (b95f4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b958e:	e7b4      	b.n	b94fa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9590:	f640 1206 	movw	r2, #2310	; 0x906
   b9594:	4293      	cmp	r3, r2
   b9596:	d101      	bne.n	b959c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9598:	4917      	ldr	r1, [pc, #92]	; (b95f8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b959a:	e7ae      	b.n	b94fa <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b959c:	4914      	ldr	r1, [pc, #80]	; (b95f0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b959e:	f007 f94e 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b95a2:	7869      	ldrb	r1, [r5, #1]
   b95a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95a8:	2210      	movs	r2, #16
   b95aa:	f7fe fb7d 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b95ae:	e7a6      	b.n	b94fe <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b95b0:	4912      	ldr	r1, [pc, #72]	; (b95fc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b95b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b95b6:	f007 f942 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b95ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b95be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b95c2:	f007 b940 	b.w	c0846 <_ZN5Print7printlnEv>
}
   b95c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b95c8:	000c62e8 	.word	0x000c62e8
   b95cc:	000c62ed 	.word	0x000c62ed
   b95d0:	000c62fd 	.word	0x000c62fd
   b95d4:	000c6302 	.word	0x000c6302
   b95d8:	000c6310 	.word	0x000c6310
   b95dc:	000c6319 	.word	0x000c6319
   b95e0:	000c71fd 	.word	0x000c71fd
   b95e4:	000c62f1 	.word	0x000c62f1
   b95e8:	000c62f5 	.word	0x000c62f5
   b95ec:	000c62f9 	.word	0x000c62f9
   b95f0:	000c656e 	.word	0x000c656e
   b95f4:	000c6306 	.word	0x000c6306
   b95f8:	000c630b 	.word	0x000c630b
   b95fc:	000c6323 	.word	0x000c6323

000b9600 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b9600:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9602:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b9606:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b9608:	b955      	cbnz	r5, b9620 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b960a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b960e:	b90b      	cbnz	r3, b9614 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b9610:	2000      	movs	r0, #0
}
   b9612:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b9614:	491a      	ldr	r1, [pc, #104]	; (b9680 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b9616:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b961a:	f007 f92a 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   b961e:	e7f7      	b.n	b9610 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b9620:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b9624:	b12b      	cbz	r3, b9632 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b9626:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b962a:	2b00      	cmp	r3, #0
   b962c:	d0f0      	beq.n	b9610 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b962e:	4915      	ldr	r1, [pc, #84]	; (b9684 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b9630:	e7f1      	b.n	b9616 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b9632:	4628      	mov	r0, r5
   b9634:	f7fa fd31 	bl	b409a <_Znaj>
   b9638:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b963c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b9640:	b930      	cbnz	r0, b9650 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9642:	b91b      	cbnz	r3, b964c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b9644:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b9648:	2b00      	cmp	r3, #0
   b964a:	d0e1      	beq.n	b9610 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b964c:	490e      	ldr	r1, [pc, #56]	; (b9688 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b964e:	e7e2      	b.n	b9616 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b9650:	b17b      	cbz	r3, b9672 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b9652:	490e      	ldr	r1, [pc, #56]	; (b968c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b9654:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9658:	f007 f8f1 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b965c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b9660:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b9664:	220a      	movs	r2, #10
   b9666:	4628      	mov	r0, r5
   b9668:	f007 f905 	bl	c0876 <_ZN5Print11printNumberEmh>
        n += println();
   b966c:	4628      	mov	r0, r5
   b966e:	f007 f8ea 	bl	c0846 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b9672:	2300      	movs	r3, #0
   b9674:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b9678:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b967c:	2001      	movs	r0, #1
   b967e:	e7c8      	b.n	b9612 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b9680:	000c6335 	.word	0x000c6335
   b9684:	000c6386 	.word	0x000c6386
   b9688:	000c63c9 	.word	0x000c63c9
   b968c:	000c63ed 	.word	0x000c63ed

000b9690 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b9690:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b9694:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b9698:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b969a:	bf3b      	ittet	cc
   b969c:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b96a0:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b96a2:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b96a4:	1a80      	subcc	r0, r0, r2
   b96a6:	b280      	uxth	r0, r0
}
   b96a8:	4770      	bx	lr

000b96aa <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b96aa:	b508      	push	{r3, lr}
   b96ac:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b96ae:	f7ff ffef 	bl	b9690 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b96b2:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b96b6:	1a18      	subs	r0, r3, r0
}
   b96b8:	b280      	uxth	r0, r0
   b96ba:	bd08      	pop	{r3, pc}

000b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b96bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b96c0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b96c4:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b96c8:	1aed      	subs	r5, r5, r3
   b96ca:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b96cc:	4295      	cmp	r5, r2
   b96ce:	bf28      	it	cs
   b96d0:	4615      	movcs	r5, r2
{
   b96d2:	4616      	mov	r6, r2
   b96d4:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96d6:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96da:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96dc:	462a      	mov	r2, r5
   b96de:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b96e0:	b2bf      	uxth	r7, r7
{
   b96e2:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b96e4:	f00a f924 	bl	c3930 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b96e8:	b19f      	cbz	r7, b9712 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b96ea:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b96ee:	463a      	mov	r2, r7
   b96f0:	eb08 0105 	add.w	r1, r8, r5
   b96f4:	f00a f91c 	bl	c3930 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b96f8:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b96fc:	4620      	mov	r0, r4
   b96fe:	f7ff ffc7 	bl	b9690 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b9702:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b9706:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b9708:	bf38      	it	cc
   b970a:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b970e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b9712:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b9716:	4416      	add	r6, r2
   b9718:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b971c:	e7ee      	b.n	b96fc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b9720 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b9720:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b9722:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b9726:	4604      	mov	r4, r0
   b9728:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b972a:	b113      	cbz	r3, b9732 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b972c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b9730:	b953      	cbnz	r3, b9748 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b9732:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b9736:	b128      	cbz	r0, b9744 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b9738:	4924      	ldr	r1, [pc, #144]	; (b97cc <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b973a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b973e:	f007 f898 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b9742:	2000      	movs	r0, #0
}
   b9744:	b003      	add	sp, #12
   b9746:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b9748:	f7ff ffaf 	bl	b96aa <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b974c:	886b      	ldrh	r3, [r5, #2]
   b974e:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b9750:	b29b      	uxth	r3, r3
   b9752:	4283      	cmp	r3, r0
   b9754:	d908      	bls.n	b9768 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9756:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b975a:	b91b      	cbnz	r3, b9764 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b975c:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b9760:	2800      	cmp	r0, #0
   b9762:	d0ef      	beq.n	b9744 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b9764:	491a      	ldr	r1, [pc, #104]	; (b97d0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b9766:	e7e8      	b.n	b973a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9768:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b976c:	2202      	movs	r2, #2
   b976e:	4669      	mov	r1, sp
   b9770:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b9772:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b9776:	f7ff ffa1 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b977a:	2201      	movs	r2, #1
   b977c:	4629      	mov	r1, r5
   b977e:	4620      	mov	r0, r4
   b9780:	f7ff ff9c 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b9784:	2201      	movs	r2, #1
   b9786:	18a9      	adds	r1, r5, r2
   b9788:	4620      	mov	r0, r4
   b978a:	f7ff ff97 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b978e:	886b      	ldrh	r3, [r5, #2]
   b9790:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b9794:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b9796:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b9798:	a901      	add	r1, sp, #4
   b979a:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b979c:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b97a0:	f7ff ff8c 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b97a4:	886a      	ldrh	r2, [r5, #2]
   b97a6:	68a9      	ldr	r1, [r5, #8]
   b97a8:	4620      	mov	r0, r4
   b97aa:	f7ff ff87 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b97ae:	2201      	movs	r2, #1
   b97b0:	f105 010c 	add.w	r1, r5, #12
   b97b4:	4620      	mov	r0, r4
   b97b6:	f7ff ff81 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b97ba:	4620      	mov	r0, r4
   b97bc:	2201      	movs	r2, #1
   b97be:	f105 010d 	add.w	r1, r5, #13
   b97c2:	f7ff ff7b 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b97c6:	2001      	movs	r0, #1
   b97c8:	e7bc      	b.n	b9744 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b97ca:	bf00      	nop
   b97cc:	000c6413 	.word	0x000c6413
   b97d0:	000c643b 	.word	0x000c643b

000b97d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b97d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b97d8:	780e      	ldrb	r6, [r1, #0]
   b97da:	2e0d      	cmp	r6, #13
{
   b97dc:	4604      	mov	r4, r0
   b97de:	460d      	mov	r5, r1
  switch (msg->cls)
   b97e0:	f001 8228 	beq.w	bac34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b97e4:	d809      	bhi.n	b97fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b97e6:	2e02      	cmp	r6, #2
   b97e8:	f000 879a 	beq.w	ba720 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b97ec:	2e06      	cmp	r6, #6
   b97ee:	f001 81cc 	beq.w	bab8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b97f2:	2e01      	cmp	r6, #1
   b97f4:	d04f      	beq.n	b9896 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b97f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b97fa:	2e13      	cmp	r6, #19
   b97fc:	f001 83eb 	beq.w	bafd6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b9800:	2e28      	cmp	r6, #40	; 0x28
   b9802:	f001 84ca 	beq.w	bb19a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b9806:	2e10      	cmp	r6, #16
   b9808:	d1f5      	bne.n	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b980a:	680b      	ldr	r3, [r1, #0]
   b980c:	4a8e      	ldr	r2, [pc, #568]	; (b9a48 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b980e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b9812:	4293      	cmp	r3, r2
   b9814:	f041 826a 	bne.w	bacec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b9818:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b981a:	2e00      	cmp	r6, #0
   b981c:	d0eb      	beq.n	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b981e:	68a8      	ldr	r0, [r5, #8]
   b9820:	2100      	movs	r1, #0
   b9822:	f7fe fa21 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9826:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b9828:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b982a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b982c:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b982e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9830:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9832:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b9834:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b9836:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b9838:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b983a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b983c:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b983e:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b9840:	68a8      	ldr	r0, [r5, #8]
   b9842:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b9844:	2108      	movs	r1, #8
   b9846:	f7fe fa0f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b984a:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b984c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b984e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9850:	210c      	movs	r1, #12
   b9852:	f7fe fa16 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b9856:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9858:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b985a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b985c:	210e      	movs	r1, #14
   b985e:	f7fe fa10 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b9862:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9864:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b986a:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b986c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b986e:	6a1a      	ldr	r2, [r3, #32]
   b9870:	b17a      	cbz	r2, b9892 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9872:	7819      	ldrb	r1, [r3, #0]
   b9874:	0708      	lsls	r0, r1, #28
   b9876:	d40c      	bmi.n	b9892 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b9878:	1d19      	adds	r1, r3, #4
   b987a:	3314      	adds	r3, #20
   b987c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9880:	f842 0b04 	str.w	r0, [r2], #4
   b9884:	4299      	cmp	r1, r3
   b9886:	d1f9      	bne.n	b987c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b9888:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b988a:	7813      	ldrb	r3, [r2, #0]
   b988c:	f043 0308 	orr.w	r3, r3, #8
   b9890:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b9892:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b9894:	e03d      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b9896:	680b      	ldr	r3, [r1, #0]
   b9898:	4a6c      	ldr	r2, [pc, #432]	; (b9a4c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b989a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b989e:	4293      	cmp	r3, r2
   b98a0:	d141      	bne.n	b9926 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b98a2:	68c6      	ldr	r6, [r0, #12]
   b98a4:	2e00      	cmp	r6, #0
   b98a6:	d0a6      	beq.n	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b98a8:	68a8      	ldr	r0, [r5, #8]
   b98aa:	2100      	movs	r1, #0
   b98ac:	f7fe f9dc 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98b0:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98b4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98b6:	2104      	movs	r1, #4
   b98b8:	f7fe f9d6 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b98bc:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98be:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98c0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98c2:	2108      	movs	r1, #8
   b98c4:	f7fe f9d0 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b98c8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ca:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98cc:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b98ce:	210c      	movs	r1, #12
   b98d0:	f7fe f9ca 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b98d4:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b98d6:	68a8      	ldr	r0, [r5, #8]
   b98d8:	68e6      	ldr	r6, [r4, #12]
   b98da:	2110      	movs	r1, #16
   b98dc:	f7fe f9c4 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b98e0:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b98e2:	68e3      	ldr	r3, [r4, #12]
   b98e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b98e8:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b98ea:	68e3      	ldr	r3, [r4, #12]
   b98ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b98ee:	b17a      	cbz	r2, b9910 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b98f0:	7819      	ldrb	r1, [r3, #0]
   b98f2:	0709      	lsls	r1, r1, #28
   b98f4:	d40c      	bmi.n	b9910 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b98f6:	1d19      	adds	r1, r3, #4
   b98f8:	3318      	adds	r3, #24
   b98fa:	f851 0b04 	ldr.w	r0, [r1], #4
   b98fe:	f842 0b04 	str.w	r0, [r2], #4
   b9902:	4299      	cmp	r1, r3
   b9904:	d1f9      	bne.n	b98fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9906:	68e2      	ldr	r2, [r4, #12]
   b9908:	7813      	ldrb	r3, [r2, #0]
   b990a:	f043 0308 	orr.w	r3, r3, #8
   b990e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9910:	68e3      	ldr	r3, [r4, #12]
   b9912:	781b      	ldrb	r3, [r3, #0]
   b9914:	075f      	lsls	r7, r3, #29
   b9916:	f57f af6e 	bpl.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b991a:	4629      	mov	r1, r5
   b991c:	4620      	mov	r0, r4
}
   b991e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b9922:	f7ff befd 	b.w	b9720 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b9926:	4a4a      	ldr	r2, [pc, #296]	; (b9a50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b9928:	4293      	cmp	r3, r2
   b992a:	d13d      	bne.n	b99a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b992c:	6906      	ldr	r6, [r0, #16]
   b992e:	2e00      	cmp	r6, #0
   b9930:	f43f af61 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b9934:	68a8      	ldr	r0, [r5, #8]
   b9936:	2100      	movs	r1, #0
   b9938:	f7fe f996 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b993c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b993e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9940:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9942:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b9944:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9946:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b9948:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b994a:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b994c:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b994e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9950:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b9952:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b9954:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9956:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b9958:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b995a:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b995c:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b995e:	68a8      	ldr	r0, [r5, #8]
   b9960:	6926      	ldr	r6, [r4, #16]
   b9962:	2108      	movs	r1, #8
   b9964:	f7fe f980 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9968:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b996a:	68a8      	ldr	r0, [r5, #8]
   b996c:	6926      	ldr	r6, [r4, #16]
   b996e:	210c      	movs	r1, #12
   b9970:	f7fe f97a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9974:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9976:	6923      	ldr	r3, [r4, #16]
   b9978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b997c:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b997e:	6923      	ldr	r3, [r4, #16]
   b9980:	6a1a      	ldr	r2, [r3, #32]
   b9982:	b17a      	cbz	r2, b99a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9984:	7819      	ldrb	r1, [r3, #0]
   b9986:	070e      	lsls	r6, r1, #28
   b9988:	d40c      	bmi.n	b99a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b998a:	1d19      	adds	r1, r3, #4
   b998c:	3314      	adds	r3, #20
   b998e:	f851 0b04 	ldr.w	r0, [r1], #4
   b9992:	f842 0b04 	str.w	r0, [r2], #4
   b9996:	4299      	cmp	r1, r3
   b9998:	d1f9      	bne.n	b998e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b999a:	6922      	ldr	r2, [r4, #16]
   b999c:	7813      	ldrb	r3, [r2, #0]
   b999e:	f043 0308 	orr.w	r3, r3, #8
   b99a2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b99a4:	6923      	ldr	r3, [r4, #16]
   b99a6:	e7b4      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b99a8:	4a2a      	ldr	r2, [pc, #168]	; (b9a54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b99aa:	4293      	cmp	r3, r2
   b99ac:	d154      	bne.n	b9a58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b99ae:	6946      	ldr	r6, [r0, #20]
   b99b0:	2e00      	cmp	r6, #0
   b99b2:	f43f af20 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b99b6:	68a8      	ldr	r0, [r5, #8]
   b99b8:	2100      	movs	r1, #0
   b99ba:	f7fe f955 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b99be:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b99c0:	68a8      	ldr	r0, [r5, #8]
   b99c2:	6966      	ldr	r6, [r4, #20]
   b99c4:	2104      	movs	r1, #4
   b99c6:	f7fe f95c 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ca:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b99cc:	68a8      	ldr	r0, [r5, #8]
   b99ce:	6966      	ldr	r6, [r4, #20]
   b99d0:	2106      	movs	r1, #6
   b99d2:	f7fe f956 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99d6:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b99d8:	68a8      	ldr	r0, [r5, #8]
   b99da:	6966      	ldr	r6, [r4, #20]
   b99dc:	2108      	movs	r1, #8
   b99de:	f7fe f950 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99e2:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b99e4:	68a8      	ldr	r0, [r5, #8]
   b99e6:	6966      	ldr	r6, [r4, #20]
   b99e8:	210a      	movs	r1, #10
   b99ea:	f7fe f94a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99ee:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b99f0:	68a8      	ldr	r0, [r5, #8]
   b99f2:	6966      	ldr	r6, [r4, #20]
   b99f4:	210c      	movs	r1, #12
   b99f6:	f7fe f944 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b99fa:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b99fc:	68a8      	ldr	r0, [r5, #8]
   b99fe:	6966      	ldr	r6, [r4, #20]
   b9a00:	210e      	movs	r1, #14
   b9a02:	f7fe f93e 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a06:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b9a08:	68a8      	ldr	r0, [r5, #8]
   b9a0a:	6966      	ldr	r6, [r4, #20]
   b9a0c:	2110      	movs	r1, #16
   b9a0e:	f7fe f938 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9a12:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9a14:	6963      	ldr	r3, [r4, #20]
   b9a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9a1a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9a1c:	6963      	ldr	r3, [r4, #20]
   b9a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9a20:	b17a      	cbz	r2, b9a42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9a22:	7819      	ldrb	r1, [r3, #0]
   b9a24:	0708      	lsls	r0, r1, #28
   b9a26:	d40c      	bmi.n	b9a42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b9a28:	1d19      	adds	r1, r3, #4
   b9a2a:	3318      	adds	r3, #24
   b9a2c:	f851 0b04 	ldr.w	r0, [r1], #4
   b9a30:	f842 0b04 	str.w	r0, [r2], #4
   b9a34:	4299      	cmp	r1, r3
   b9a36:	d1f9      	bne.n	b9a2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b9a38:	6962      	ldr	r2, [r4, #20]
   b9a3a:	7813      	ldrb	r3, [r2, #0]
   b9a3c:	f043 0308 	orr.w	r3, r3, #8
   b9a40:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b9a42:	6963      	ldr	r3, [r4, #20]
   b9a44:	e765      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9a46:	bf00      	nop
   b9a48:	00101400 	.word	0x00101400
   b9a4c:	00140100 	.word	0x00140100
   b9a50:	00100300 	.word	0x00100300
   b9a54:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b9a58:	4a8c      	ldr	r2, [pc, #560]	; (b9c8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b9a5a:	4293      	cmp	r3, r2
   b9a5c:	d149      	bne.n	b9af2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b9a5e:	69c6      	ldr	r6, [r0, #28]
   b9a60:	2e00      	cmp	r6, #0
   b9a62:	f43f aec8 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b9a66:	68a8      	ldr	r0, [r5, #8]
   b9a68:	2100      	movs	r1, #0
   b9a6a:	f7fe f8fd 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9a6e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9a70:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a72:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b9a74:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b9a76:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a78:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a7a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a7c:	2108      	movs	r1, #8
   b9a7e:	f7fe f8f3 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b9a82:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a84:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9a86:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a88:	210c      	movs	r1, #12
   b9a8a:	f7fe f8ed 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b9a8e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a90:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9a92:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9a94:	2110      	movs	r1, #16
   b9a96:	f7fe f8e7 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b9a9a:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b9a9c:	68a8      	ldr	r0, [r5, #8]
   b9a9e:	69e6      	ldr	r6, [r4, #28]
   b9aa0:	2114      	movs	r1, #20
   b9aa2:	f7fe f8e1 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9aa6:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b9aa8:	68a8      	ldr	r0, [r5, #8]
   b9aaa:	69e6      	ldr	r6, [r4, #28]
   b9aac:	2118      	movs	r1, #24
   b9aae:	f7fe f8db 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9ab2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b9ab4:	68a8      	ldr	r0, [r5, #8]
   b9ab6:	69e6      	ldr	r6, [r4, #28]
   b9ab8:	211c      	movs	r1, #28
   b9aba:	f7fe f8d5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9abe:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9ac0:	69e3      	ldr	r3, [r4, #28]
   b9ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9ac6:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9ac8:	69e3      	ldr	r3, [r4, #28]
   b9aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b9acc:	b17a      	cbz	r2, b9aee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ace:	7819      	ldrb	r1, [r3, #0]
   b9ad0:	0709      	lsls	r1, r1, #28
   b9ad2:	d40c      	bmi.n	b9aee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b9ad4:	1d19      	adds	r1, r3, #4
   b9ad6:	3324      	adds	r3, #36	; 0x24
   b9ad8:	f851 0b04 	ldr.w	r0, [r1], #4
   b9adc:	f842 0b04 	str.w	r0, [r2], #4
   b9ae0:	4299      	cmp	r1, r3
   b9ae2:	d1f9      	bne.n	b9ad8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ae4:	69e2      	ldr	r2, [r4, #28]
   b9ae6:	7813      	ldrb	r3, [r2, #0]
   b9ae8:	f043 0308 	orr.w	r3, r3, #8
   b9aec:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b9aee:	69e3      	ldr	r3, [r4, #28]
   b9af0:	e70f      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b9af2:	4a67      	ldr	r2, [pc, #412]	; (b9c90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b9af4:	4293      	cmp	r3, r2
   b9af6:	f040 80cd 	bne.w	b9c94 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b9afa:	6a06      	ldr	r6, [r0, #32]
   b9afc:	2e00      	cmp	r6, #0
   b9afe:	f43f ae7a 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b9b02:	68a8      	ldr	r0, [r5, #8]
   b9b04:	2100      	movs	r1, #0
   b9b06:	f7fe f8af 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b0a:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b9b0c:	68a8      	ldr	r0, [r5, #8]
   b9b0e:	6a26      	ldr	r6, [r4, #32]
   b9b10:	2104      	movs	r1, #4
   b9b12:	f7fe f8b6 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9b16:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b9b18:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b1a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b1c:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b9b1e:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b9b20:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b22:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b24:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b9b26:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b9b28:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b2a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b2c:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b9b2e:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9b30:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b32:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b34:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b9b36:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9b38:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b3a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b3c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b9b3e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9b40:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b42:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b44:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b9b46:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b9b48:	210c      	movs	r1, #12
   b9b4a:	68a8      	ldr	r0, [r5, #8]
   b9b4c:	6a26      	ldr	r6, [r4, #32]
   b9b4e:	f7fe f88b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9b52:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b54:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b56:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b58:	2110      	movs	r1, #16
   b9b5a:	f7fe f885 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b9b5e:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9b60:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b62:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b64:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b9b66:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9b68:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b6a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b6c:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b9b6e:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9b70:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b72:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b74:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b9b76:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9b78:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b7a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9b7c:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b9b7e:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b80:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b82:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b84:	2118      	movs	r1, #24
   b9b86:	f7fe f86f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b9b8a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b8c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9b8e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b90:	211c      	movs	r1, #28
   b9b92:	f7fe f869 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b9b96:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b98:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9b9a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9b9c:	2120      	movs	r1, #32
   b9b9e:	f7fe f863 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b9ba2:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ba4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9ba6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ba8:	2124      	movs	r1, #36	; 0x24
   b9baa:	f7fe f85d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b9bae:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b9bb0:	68a8      	ldr	r0, [r5, #8]
   b9bb2:	6a26      	ldr	r6, [r4, #32]
   b9bb4:	2128      	movs	r1, #40	; 0x28
   b9bb6:	f7fe f857 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bba:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b9bbc:	6a26      	ldr	r6, [r4, #32]
   b9bbe:	68a8      	ldr	r0, [r5, #8]
   b9bc0:	212c      	movs	r1, #44	; 0x2c
   b9bc2:	f7fe f851 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9bc6:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bc8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bca:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bcc:	2130      	movs	r1, #48	; 0x30
   b9bce:	f7fe f84b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b9bd2:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bd6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bd8:	2134      	movs	r1, #52	; 0x34
   b9bda:	f7fe f845 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b9bde:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9be2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9be4:	2138      	movs	r1, #56	; 0x38
   b9be6:	f7fe f83f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b9bea:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9bee:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bf0:	213c      	movs	r1, #60	; 0x3c
   b9bf2:	f7fe f839 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b9bf6:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bf8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9bfa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9bfc:	2140      	movs	r1, #64	; 0x40
   b9bfe:	f7fe f833 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b9c02:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b9c04:	68a8      	ldr	r0, [r5, #8]
   b9c06:	6a26      	ldr	r6, [r4, #32]
   b9c08:	2144      	movs	r1, #68	; 0x44
   b9c0a:	f7fe f82d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c0e:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b9c10:	68a8      	ldr	r0, [r5, #8]
   b9c12:	6a26      	ldr	r6, [r4, #32]
   b9c14:	2148      	movs	r1, #72	; 0x48
   b9c16:	f7fe f827 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9c1a:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b9c1c:	68a8      	ldr	r0, [r5, #8]
   b9c1e:	6a26      	ldr	r6, [r4, #32]
   b9c20:	214c      	movs	r1, #76	; 0x4c
   b9c22:	f7fe f82e 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c26:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b9c2a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c2c:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b9c2e:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b9c32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c36:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9c38:	68a8      	ldr	r0, [r5, #8]
   b9c3a:	2154      	movs	r1, #84	; 0x54
   b9c3c:	f7fe f814 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b9c40:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c42:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c44:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b9c46:	2158      	movs	r1, #88	; 0x58
   b9c48:	f7fe f81b 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b9c4c:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b9c50:	68a8      	ldr	r0, [r5, #8]
   b9c52:	6a26      	ldr	r6, [r4, #32]
   b9c54:	215a      	movs	r1, #90	; 0x5a
   b9c56:	f7fe f814 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9c5a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b9c5e:	6a22      	ldr	r2, [r4, #32]
   b9c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9c64:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b9c66:	6a22      	ldr	r2, [r4, #32]
   b9c68:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9c6a:	6a21      	ldr	r1, [r4, #32]
   b9c6c:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b9c6e:	b158      	cbz	r0, b9c88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9c70:	780b      	ldrb	r3, [r1, #0]
   b9c72:	071b      	lsls	r3, r3, #28
   b9c74:	d408      	bmi.n	b9c88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b9c76:	225c      	movs	r2, #92	; 0x5c
   b9c78:	3104      	adds	r1, #4
   b9c7a:	f009 fe59 	bl	c3930 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b9c7e:	6a22      	ldr	r2, [r4, #32]
   b9c80:	7813      	ldrb	r3, [r2, #0]
   b9c82:	f043 0308 	orr.w	r3, r3, #8
   b9c86:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b9c88:	6a23      	ldr	r3, [r4, #32]
   b9c8a:	e642      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9c8c:	00200500 	.word	0x00200500
   b9c90:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b9c94:	4a8e      	ldr	r2, [pc, #568]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b9c96:	4293      	cmp	r3, r2
   b9c98:	d137      	bne.n	b9d0a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b9c9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b9c9c:	2b00      	cmp	r3, #0
   b9c9e:	f43f adaa 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9ca2:	688a      	ldr	r2, [r1, #8]
   b9ca4:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b9ca6:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b9ca8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9caa:	68a8      	ldr	r0, [r5, #8]
   b9cac:	2104      	movs	r1, #4
   b9cae:	f7fd ffdb 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cb2:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b9cb4:	68a8      	ldr	r0, [r5, #8]
   b9cb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cb8:	2108      	movs	r1, #8
   b9cba:	f7fd ffd5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cbe:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b9cc0:	68a8      	ldr	r0, [r5, #8]
   b9cc2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cc4:	210c      	movs	r1, #12
   b9cc6:	f7fd ffcf 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cca:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b9ccc:	68a8      	ldr	r0, [r5, #8]
   b9cce:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b9cd0:	2110      	movs	r1, #16
   b9cd2:	f7fd ffc9 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9cd6:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9cde:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9ce4:	b17a      	cbz	r2, b9d06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9ce6:	7819      	ldrb	r1, [r3, #0]
   b9ce8:	070f      	lsls	r7, r1, #28
   b9cea:	d40c      	bmi.n	b9d06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b9cec:	1d19      	adds	r1, r3, #4
   b9cee:	3318      	adds	r3, #24
   b9cf0:	f851 0b04 	ldr.w	r0, [r1], #4
   b9cf4:	f842 0b04 	str.w	r0, [r2], #4
   b9cf8:	4299      	cmp	r1, r3
   b9cfa:	d1f9      	bne.n	b9cf0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b9cfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b9cfe:	7813      	ldrb	r3, [r2, #0]
   b9d00:	f043 0308 	orr.w	r3, r3, #8
   b9d04:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b9d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9d08:	e603      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b9d0a:	4a72      	ldr	r2, [pc, #456]	; (b9ed4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b9d0c:	4293      	cmp	r3, r2
   b9d0e:	d139      	bne.n	b9d84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b9d10:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b9d12:	2e00      	cmp	r6, #0
   b9d14:	f43f ad6f 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b9d18:	68a8      	ldr	r0, [r5, #8]
   b9d1a:	2100      	movs	r1, #0
   b9d1c:	f7fd ffa4 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d20:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d22:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d26:	2104      	movs	r1, #4
   b9d28:	f7fd ff9e 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b9d2c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d2e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d32:	2108      	movs	r1, #8
   b9d34:	f7fd ff98 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b9d38:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d3a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d3e:	210c      	movs	r1, #12
   b9d40:	f7fd ff92 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b9d44:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b9d46:	68a8      	ldr	r0, [r5, #8]
   b9d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b9d4a:	2110      	movs	r1, #16
   b9d4c:	f7fd ff8c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d50:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9d52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9d58:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9d5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b9d5e:	b17a      	cbz	r2, b9d80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9d60:	7819      	ldrb	r1, [r3, #0]
   b9d62:	070e      	lsls	r6, r1, #28
   b9d64:	d40c      	bmi.n	b9d80 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b9d66:	1d19      	adds	r1, r3, #4
   b9d68:	3318      	adds	r3, #24
   b9d6a:	f851 0b04 	ldr.w	r0, [r1], #4
   b9d6e:	f842 0b04 	str.w	r0, [r2], #4
   b9d72:	4299      	cmp	r1, r3
   b9d74:	d1f9      	bne.n	b9d6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b9d78:	7813      	ldrb	r3, [r2, #0]
   b9d7a:	f043 0308 	orr.w	r3, r3, #8
   b9d7e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b9d82:	e5c6      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b9d84:	4a54      	ldr	r2, [pc, #336]	; (b9ed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b9d86:	4293      	cmp	r3, r2
   b9d88:	d151      	bne.n	b9e2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b9d8a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b9d8c:	2e00      	cmp	r6, #0
   b9d8e:	f43f ad32 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b9d92:	68a8      	ldr	r0, [r5, #8]
   b9d94:	2100      	movs	r1, #0
   b9d96:	f7fd ff67 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9d9a:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9d9c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9d9e:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da0:	2104      	movs	r1, #4
   b9da2:	f7fd ff61 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b9da6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9da8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9daa:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dac:	2108      	movs	r1, #8
   b9dae:	f7fd ff5b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b9db2:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9db4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9db6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9db8:	210c      	movs	r1, #12
   b9dba:	f7fd ff55 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b9dbe:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b9dc0:	68a8      	ldr	r0, [r5, #8]
   b9dc2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dc4:	2110      	movs	r1, #16
   b9dc6:	f7fd ff4f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dca:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b9dcc:	68a8      	ldr	r0, [r5, #8]
   b9dce:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9dd0:	2114      	movs	r1, #20
   b9dd2:	f7fd ff49 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dd6:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9dd8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9dda:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9ddc:	2118      	movs	r1, #24
   b9dde:	f7fd ff43 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b9de2:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b9de4:	68a8      	ldr	r0, [r5, #8]
   b9de6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9de8:	211c      	movs	r1, #28
   b9dea:	f7fd ff3d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dee:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b9df0:	68a8      	ldr	r0, [r5, #8]
   b9df2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b9df4:	2120      	movs	r1, #32
   b9df6:	f7fd ff37 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9dfa:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9e02:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9e08:	b17a      	cbz	r2, b9e2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9e0a:	7819      	ldrb	r1, [r3, #0]
   b9e0c:	0708      	lsls	r0, r1, #28
   b9e0e:	d40c      	bmi.n	b9e2a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b9e10:	1d19      	adds	r1, r3, #4
   b9e12:	3328      	adds	r3, #40	; 0x28
   b9e14:	f851 0b04 	ldr.w	r0, [r1], #4
   b9e18:	f842 0b04 	str.w	r0, [r2], #4
   b9e1c:	4299      	cmp	r1, r3
   b9e1e:	d1f9      	bne.n	b9e14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b9e20:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b9e22:	7813      	ldrb	r3, [r2, #0]
   b9e24:	f043 0308 	orr.w	r3, r3, #8
   b9e28:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b9e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b9e2c:	e571      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b9e2e:	4a2b      	ldr	r2, [pc, #172]	; (b9edc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b9e30:	4293      	cmp	r3, r2
   b9e32:	d155      	bne.n	b9ee0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b9e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b9e36:	2b00      	cmp	r3, #0
   b9e38:	f43f acdd 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9e3c:	688a      	ldr	r2, [r1, #8]
   b9e3e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b9e40:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b9e42:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b9e44:	68a8      	ldr	r0, [r5, #8]
   b9e46:	2104      	movs	r1, #4
   b9e48:	f7fd ff0e 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e4c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e4e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e50:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e52:	2108      	movs	r1, #8
   b9e54:	f7fd ff08 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b9e58:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e5c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e5e:	210c      	movs	r1, #12
   b9e60:	f7fd ff02 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b9e64:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e66:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e68:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9e6a:	2110      	movs	r1, #16
   b9e6c:	f7fd fefc 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b9e70:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b9e72:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b9e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e76:	7d12      	ldrb	r2, [r2, #20]
   b9e78:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b9e7a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b9e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e7e:	7d52      	ldrb	r2, [r2, #21]
   b9e80:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b9e82:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b9e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9e86:	7d92      	ldrb	r2, [r2, #22]
   b9e88:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b9e8a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b9e8e:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b9e90:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b9e92:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b9e94:	68a8      	ldr	r0, [r5, #8]
   b9e96:	2118      	movs	r1, #24
   b9e98:	f7fd fee6 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9e9c:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9ea4:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9ea6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b9eaa:	b17a      	cbz	r2, b9ecc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9eac:	7819      	ldrb	r1, [r3, #0]
   b9eae:	0709      	lsls	r1, r1, #28
   b9eb0:	d40c      	bmi.n	b9ecc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b9eb2:	1d19      	adds	r1, r3, #4
   b9eb4:	3320      	adds	r3, #32
   b9eb6:	f851 0b04 	ldr.w	r0, [r1], #4
   b9eba:	f842 0b04 	str.w	r0, [r2], #4
   b9ebe:	4299      	cmp	r1, r3
   b9ec0:	d1f9      	bne.n	b9eb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b9ec2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b9ec4:	7813      	ldrb	r3, [r2, #0]
   b9ec6:	f043 0308 	orr.w	r3, r3, #8
   b9eca:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b9ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9ece:	e520      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9ed0:	00140900 	.word	0x00140900
   b9ed4:	00141100 	.word	0x00141100
   b9ed8:	00241200 	.word	0x00241200
   b9edc:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b9ee0:	4a30      	ldr	r2, [pc, #192]	; (b9fa4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b9ee2:	4293      	cmp	r3, r2
   b9ee4:	d160      	bne.n	b9fa8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b9ee6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b9ee8:	2b00      	cmp	r3, #0
   b9eea:	f43f ac84 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b9eee:	688a      	ldr	r2, [r1, #8]
   b9ef0:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b9ef2:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b9ef4:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9ef6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b9ef8:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b9efa:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b9efc:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b9efe:	68a8      	ldr	r0, [r5, #8]
   b9f00:	2104      	movs	r1, #4
   b9f02:	f7fd feb1 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f06:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f08:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f0a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f0c:	2108      	movs	r1, #8
   b9f0e:	f7fd feab 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b9f12:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f14:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f18:	210c      	movs	r1, #12
   b9f1a:	f7fd fea5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b9f1e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f20:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f22:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f24:	2110      	movs	r1, #16
   b9f26:	f7fd fe9f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b9f2a:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f2c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f2e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b9f30:	2114      	movs	r1, #20
   b9f32:	f7fd fe99 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b9f36:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b9f38:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b9f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f3c:	7e12      	ldrb	r2, [r2, #24]
   b9f3e:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b9f40:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b9f42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f44:	7e52      	ldrb	r2, [r2, #25]
   b9f46:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b9f48:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b9f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f4c:	7e92      	ldrb	r2, [r2, #26]
   b9f4e:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b9f50:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b9f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f54:	7ed2      	ldrb	r2, [r2, #27]
   b9f56:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b9f58:	68a8      	ldr	r0, [r5, #8]
   b9f5a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f5c:	211c      	movs	r1, #28
   b9f5e:	f7fd fe83 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f62:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b9f64:	68a8      	ldr	r0, [r5, #8]
   b9f66:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b9f68:	2120      	movs	r1, #32
   b9f6a:	f7fd fe7d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9f6e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b9f70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f76:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b9f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b9f7c:	b17a      	cbz	r2, b9f9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b9f7e:	7819      	ldrb	r1, [r3, #0]
   b9f80:	070f      	lsls	r7, r1, #28
   b9f82:	d40c      	bmi.n	b9f9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b9f84:	1d19      	adds	r1, r3, #4
   b9f86:	3328      	adds	r3, #40	; 0x28
   b9f88:	f851 0b04 	ldr.w	r0, [r1], #4
   b9f8c:	f842 0b04 	str.w	r0, [r2], #4
   b9f90:	4299      	cmp	r1, r3
   b9f92:	d1f9      	bne.n	b9f88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b9f94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b9f96:	7813      	ldrb	r3, [r2, #0]
   b9f98:	f043 0308 	orr.w	r3, r3, #8
   b9f9c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b9f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b9fa0:	e4b7      	b.n	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b9fa2:	bf00      	nop
   b9fa4:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b9fa8:	4aa1      	ldr	r2, [pc, #644]	; (ba230 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b9faa:	4293      	cmp	r3, r2
   b9fac:	f040 80f0 	bne.w	ba190 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b9fb0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b9fb2:	2e00      	cmp	r6, #0
   b9fb4:	f43f ac1f 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b9fb8:	68a8      	ldr	r0, [r5, #8]
   b9fba:	2100      	movs	r1, #0
   b9fbc:	f7fd fe54 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b9fc0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b9fc2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fc6:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b9fc8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b9fca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fce:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b9fd0:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b9fd2:	68a8      	ldr	r0, [r5, #8]
   b9fd4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b9fd6:	2106      	movs	r1, #6
   b9fd8:	f7fd fe53 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b9fdc:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b9fde:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fe2:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b9fe4:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b9fe6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9fe8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9fea:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b9fec:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b9fee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9ff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9ff2:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b9ff4:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b9ff6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b9ffa:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b9ffc:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b9ffe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba000:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba002:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   ba004:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   ba006:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba008:	68a8      	ldr	r0, [r5, #8]
   ba00a:	2110      	movs	r1, #16
   ba00c:	f7fd fe2c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba010:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba012:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba014:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba016:	2114      	movs	r1, #20
   ba018:	f7fd fe26 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   ba01c:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba01e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba022:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   ba024:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba026:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba02a:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   ba02c:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba02e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba032:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   ba034:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba036:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba03a:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   ba03c:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba03e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba040:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba042:	211c      	movs	r1, #28
   ba044:	f7fd fe10 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   ba048:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba04a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba04c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba04e:	2120      	movs	r1, #32
   ba050:	f7fd fe0a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   ba054:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba056:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba058:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba05a:	2124      	movs	r1, #36	; 0x24
   ba05c:	f7fd fe04 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   ba060:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba062:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba064:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba066:	2128      	movs	r1, #40	; 0x28
   ba068:	f7fd fdfe 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   ba06c:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   ba06e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba070:	68a8      	ldr	r0, [r5, #8]
   ba072:	212c      	movs	r1, #44	; 0x2c
   ba074:	f7fd fdf8 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba078:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   ba07a:	68a8      	ldr	r0, [r5, #8]
   ba07c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba07e:	2130      	movs	r1, #48	; 0x30
   ba080:	f7fd fdf2 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba084:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba086:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba088:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba08a:	2134      	movs	r1, #52	; 0x34
   ba08c:	f7fd fdec 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   ba090:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba092:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba094:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba096:	2138      	movs	r1, #56	; 0x38
   ba098:	f7fd fde6 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   ba09c:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba09e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0a0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0a2:	213c      	movs	r1, #60	; 0x3c
   ba0a4:	f7fd fde0 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   ba0a8:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0aa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0ac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ae:	2140      	movs	r1, #64	; 0x40
   ba0b0:	f7fd fdda 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   ba0b4:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   ba0b6:	68a8      	ldr	r0, [r5, #8]
   ba0b8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0ba:	2144      	movs	r1, #68	; 0x44
   ba0bc:	f7fd fdd4 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba0c0:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0c4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0c6:	2148      	movs	r1, #72	; 0x48
   ba0c8:	f7fd fdce 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   ba0cc:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ce:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0d0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0d2:	214c      	movs	r1, #76	; 0x4c
   ba0d4:	f7fd fdc8 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   ba0d8:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0da:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0dc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0de:	2150      	movs	r1, #80	; 0x50
   ba0e0:	f7fd fdc2 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   ba0e4:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0e6:	2154      	movs	r1, #84	; 0x54
   ba0e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba0ea:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba0ec:	f7fd fdbc 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   ba0f0:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   ba0f2:	68a8      	ldr	r0, [r5, #8]
   ba0f4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba0f6:	2158      	movs	r1, #88	; 0x58
   ba0f8:	f7fd fdc3 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba0fc:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   ba100:	68a8      	ldr	r0, [r5, #8]
   ba102:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba104:	215a      	movs	r1, #90	; 0x5a
   ba106:	f7fd fdbc 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba10a:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   ba10e:	68a8      	ldr	r0, [r5, #8]
   ba110:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba112:	215c      	movs	r1, #92	; 0x5c
   ba114:	f7fd fdb5 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba118:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba11c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba11e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba120:	215e      	movs	r1, #94	; 0x5e
   ba122:	f7fd fdae 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   ba126:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   ba12a:	68a8      	ldr	r0, [r5, #8]
   ba12c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba12e:	2160      	movs	r1, #96	; 0x60
   ba130:	f7fd fda7 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba134:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   ba138:	68a8      	ldr	r0, [r5, #8]
   ba13a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba13c:	2162      	movs	r1, #98	; 0x62
   ba13e:	f7fd fda0 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba142:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   ba146:	68a8      	ldr	r0, [r5, #8]
   ba148:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba14a:	2164      	movs	r1, #100	; 0x64
   ba14c:	f7fd fd8c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba150:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   ba152:	68a8      	ldr	r0, [r5, #8]
   ba154:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba156:	2168      	movs	r1, #104	; 0x68
   ba158:	f7fd fd86 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba15c:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba15e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba164:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba166:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba168:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba16a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   ba16c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   ba170:	b158      	cbz	r0, ba18a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba172:	780b      	ldrb	r3, [r1, #0]
   ba174:	071e      	lsls	r6, r3, #28
   ba176:	d408      	bmi.n	ba18a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   ba178:	2274      	movs	r2, #116	; 0x74
   ba17a:	3104      	adds	r1, #4
   ba17c:	f009 fbd8 	bl	c3930 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba180:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   ba182:	7813      	ldrb	r3, [r2, #0]
   ba184:	f043 0308 	orr.w	r3, r3, #8
   ba188:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   ba18a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba18c:	f7ff bbc1 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   ba190:	4a28      	ldr	r2, [pc, #160]	; (ba234 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   ba192:	4293      	cmp	r3, r2
   ba194:	d150      	bne.n	ba238 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   ba196:	6a86      	ldr	r6, [r0, #40]	; 0x28
   ba198:	2e00      	cmp	r6, #0
   ba19a:	f43f ab2c 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   ba19e:	68a8      	ldr	r0, [r5, #8]
   ba1a0:	2100      	movs	r1, #0
   ba1a2:	f7fd fd61 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1a6:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   ba1a8:	68a8      	ldr	r0, [r5, #8]
   ba1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1ac:	2104      	movs	r1, #4
   ba1ae:	f7fd fd5b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba1b2:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1b4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba1b8:	2108      	movs	r1, #8
   ba1ba:	f7fd fd55 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   ba1be:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   ba1c0:	68a8      	ldr	r0, [r5, #8]
   ba1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   ba1c4:	210c      	movs	r1, #12
   ba1c6:	f7fd fd5c 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba1ca:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   ba1cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1d0:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   ba1d2:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   ba1d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1d8:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   ba1da:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   ba1dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1e0:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   ba1e2:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   ba1e4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1e8:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   ba1ea:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   ba1ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba1ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1f0:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   ba1f2:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba1f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba1f6:	68aa      	ldr	r2, [r5, #8]
   ba1f8:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   ba1fa:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba1fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba202:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba206:	6a1a      	ldr	r2, [r3, #32]
   ba208:	b17a      	cbz	r2, ba22a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba20a:	7819      	ldrb	r1, [r3, #0]
   ba20c:	0708      	lsls	r0, r1, #28
   ba20e:	d40c      	bmi.n	ba22a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   ba210:	1d19      	adds	r1, r3, #4
   ba212:	3318      	adds	r3, #24
   ba214:	f851 0b04 	ldr.w	r0, [r1], #4
   ba218:	f842 0b04 	str.w	r0, [r2], #4
   ba21c:	4299      	cmp	r1, r3
   ba21e:	d1f9      	bne.n	ba214 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   ba220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   ba222:	7813      	ldrb	r3, [r2, #0]
   ba224:	f043 0308 	orr.w	r3, r3, #8
   ba228:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   ba22a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   ba22c:	f7ff bb71 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba230:	00741700 	.word	0x00741700
   ba234:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   ba238:	4a84      	ldr	r2, [pc, #528]	; (ba44c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   ba23a:	4293      	cmp	r3, r2
   ba23c:	d13a      	bne.n	ba2b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   ba23e:	6c06      	ldr	r6, [r0, #64]	; 0x40
   ba240:	2e00      	cmp	r6, #0
   ba242:	f43f aad8 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   ba246:	68a8      	ldr	r0, [r5, #8]
   ba248:	2100      	movs	r1, #0
   ba24a:	f7fd fd0d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba24e:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba250:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba252:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba254:	2104      	movs	r1, #4
   ba256:	f7fd fd07 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   ba25a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba25c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba25e:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba260:	2108      	movs	r1, #8
   ba262:	f7fd fd01 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   ba266:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   ba268:	68a8      	ldr	r0, [r5, #8]
   ba26a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba26c:	210c      	movs	r1, #12
   ba26e:	f7fd fcfb 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba272:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   ba274:	68a8      	ldr	r0, [r5, #8]
   ba276:	6c26      	ldr	r6, [r4, #64]	; 0x40
   ba278:	2110      	movs	r1, #16
   ba27a:	f7fd fcf5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba27e:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba280:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba286:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba288:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba28c:	b17a      	cbz	r2, ba2ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba28e:	7819      	ldrb	r1, [r3, #0]
   ba290:	0709      	lsls	r1, r1, #28
   ba292:	d40c      	bmi.n	ba2ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   ba294:	1d19      	adds	r1, r3, #4
   ba296:	3318      	adds	r3, #24
   ba298:	f851 0b04 	ldr.w	r0, [r1], #4
   ba29c:	f842 0b04 	str.w	r0, [r2], #4
   ba2a0:	4299      	cmp	r1, r3
   ba2a2:	d1f9      	bne.n	ba298 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   ba2a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   ba2a6:	7813      	ldrb	r3, [r2, #0]
   ba2a8:	f043 0308 	orr.w	r3, r3, #8
   ba2ac:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   ba2ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   ba2b0:	f7ff bb2f 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   ba2b4:	4a66      	ldr	r2, [pc, #408]	; (ba450 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   ba2b6:	4293      	cmp	r3, r2
   ba2b8:	d138      	bne.n	ba32c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   ba2ba:	6c46      	ldr	r6, [r0, #68]	; 0x44
   ba2bc:	2e00      	cmp	r6, #0
   ba2be:	f43f aa9a 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   ba2c2:	68a8      	ldr	r0, [r5, #8]
   ba2c4:	2100      	movs	r1, #0
   ba2c6:	f7fd fccf 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2ca:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba2cc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2d0:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   ba2d2:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba2d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2d8:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   ba2da:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba2dc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   ba2de:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba2e0:	7a52      	ldrb	r2, [r2, #9]
   ba2e2:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba2e4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   ba2e8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   ba2ea:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba2ec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   ba2ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba2f0:	7ad2      	ldrb	r2, [r2, #11]
   ba2f2:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba2f6:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f8:	210c      	movs	r1, #12
   ba2fa:	f7fd fcb5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   ba2fe:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   ba300:	68a8      	ldr	r0, [r5, #8]
   ba302:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba304:	2110      	movs	r1, #16
   ba306:	f7fd fcbc 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba30a:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   ba30c:	68a8      	ldr	r0, [r5, #8]
   ba30e:	6c66      	ldr	r6, [r4, #68]	; 0x44
   ba310:	2112      	movs	r1, #18
   ba312:	f7fd fcb6 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba316:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   ba318:	68ab      	ldr	r3, [r5, #8]
   ba31a:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   ba31c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba31e:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba320:	6c63      	ldr	r3, [r4, #68]	; 0x44
   ba322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba326:	61da      	str	r2, [r3, #28]
   ba328:	f7ff ba65 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   ba32c:	4a49      	ldr	r2, [pc, #292]	; (ba454 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   ba32e:	4293      	cmp	r3, r2
   ba330:	d162      	bne.n	ba3f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   ba332:	6c83      	ldr	r3, [r0, #72]	; 0x48
   ba334:	2b00      	cmp	r3, #0
   ba336:	f43f aa5e 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba33a:	688a      	ldr	r2, [r1, #8]
   ba33c:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   ba33e:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   ba340:	6c86      	ldr	r6, [r0, #72]	; 0x48
   ba342:	68a8      	ldr	r0, [r5, #8]
   ba344:	2104      	movs	r1, #4
   ba346:	f7fd fc8f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba34a:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   ba34c:	68a8      	ldr	r0, [r5, #8]
   ba34e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba350:	2108      	movs	r1, #8
   ba352:	f7fd fc89 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba356:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba358:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba35a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba35c:	210c      	movs	r1, #12
   ba35e:	f7fd fc83 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   ba362:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba364:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba366:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba368:	2110      	movs	r1, #16
   ba36a:	f7fd fc7d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   ba36e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba370:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba372:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba374:	2114      	movs	r1, #20
   ba376:	f7fd fc77 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   ba37a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba37c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   ba37e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba380:	7e12      	ldrb	r2, [r2, #24]
   ba382:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba384:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   ba386:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba388:	7e52      	ldrb	r2, [r2, #25]
   ba38a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba38c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   ba38e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba390:	7e92      	ldrb	r2, [r2, #26]
   ba392:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   ba394:	211c      	movs	r1, #28
   ba396:	68a8      	ldr	r0, [r5, #8]
   ba398:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba39a:	f7fd fc65 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba39e:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   ba3a0:	68a8      	ldr	r0, [r5, #8]
   ba3a2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   ba3a4:	2120      	movs	r1, #32
   ba3a6:	f7fd fc5f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3aa:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba3ac:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   ba3ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   ba3b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   ba3b8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   ba3ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3bc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   ba3c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba3c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba3ca:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba3d0:	b17a      	cbz	r2, ba3f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3d2:	7819      	ldrb	r1, [r3, #0]
   ba3d4:	070f      	lsls	r7, r1, #28
   ba3d6:	d40c      	bmi.n	ba3f2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   ba3d8:	1d19      	adds	r1, r3, #4
   ba3da:	332c      	adds	r3, #44	; 0x2c
   ba3dc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3e0:	f842 0b04 	str.w	r0, [r2], #4
   ba3e4:	4299      	cmp	r1, r3
   ba3e6:	d1f9      	bne.n	ba3dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3e8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ba3ea:	7813      	ldrb	r3, [r2, #0]
   ba3ec:	f043 0308 	orr.w	r3, r3, #8
   ba3f0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   ba3f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   ba3f4:	f7ff ba8d 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   ba3f8:	784a      	ldrb	r2, [r1, #1]
   ba3fa:	2a35      	cmp	r2, #53	; 0x35
   ba3fc:	d17f      	bne.n	ba4fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   ba3fe:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   ba400:	2e00      	cmp	r6, #0
   ba402:	f43f a9f8 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   ba406:	68a8      	ldr	r0, [r5, #8]
   ba408:	2100      	movs	r1, #0
   ba40a:	f7fd fc2d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba40e:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba410:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba414:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   ba416:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba418:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba41a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba41c:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   ba41e:	725a      	strb	r2, [r3, #9]
   ba420:	f04f 0808 	mov.w	r8, #8
   ba424:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba426:	f04f 0a0c 	mov.w	sl, #12
   ba42a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba42c:	7a59      	ldrb	r1, [r3, #9]
   ba42e:	b2ba      	uxth	r2, r7
   ba430:	4291      	cmp	r1, r2
   ba432:	d811      	bhi.n	ba458 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   ba434:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba436:	2201      	movs	r2, #1
   ba438:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba43c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   ba43e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   ba442:	2800      	cmp	r0, #0
   ba444:	d14d      	bne.n	ba4e2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   ba446:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba448:	f7ff ba63 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba44c:	00142200 	.word	0x00142200
   ba450:	00182600 	.word	0x00182600
   ba454:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba458:	886a      	ldrh	r2, [r5, #2]
   ba45a:	fb0a f607 	mul.w	r6, sl, r7
   ba45e:	3a08      	subs	r2, #8
   ba460:	42b2      	cmp	r2, r6
   ba462:	dde7      	ble.n	ba434 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   ba464:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba466:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba468:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   ba46c:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba46e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba470:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba472:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba474:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba476:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   ba478:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba47a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba47c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba47e:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba480:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   ba482:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   ba484:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba486:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba488:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   ba48a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   ba48c:	4433      	add	r3, r6
   ba48e:	78d2      	ldrb	r2, [r2, #3]
   ba490:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba492:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba496:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba49a:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba49e:	68a8      	ldr	r0, [r5, #8]
   ba4a0:	b289      	uxth	r1, r1
   ba4a2:	f7fd fbee 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4a6:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4a8:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   ba4ac:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4b0:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba4b4:	68a8      	ldr	r0, [r5, #8]
   ba4b6:	b289      	uxth	r1, r1
   ba4b8:	f7fd fbe3 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4bc:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4be:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   ba4c2:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4c6:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   ba4ca:	68a8      	ldr	r0, [r5, #8]
   ba4cc:	b289      	uxth	r1, r1
   ba4ce:	f7fd fbcb 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4d2:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4d4:	3701      	adds	r7, #1
   ba4d6:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   ba4d8:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   ba4da:	f108 080c 	add.w	r8, r8, #12
   ba4de:	d1a4      	bne.n	ba42a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   ba4e0:	e7a8      	b.n	ba434 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4e2:	780b      	ldrb	r3, [r1, #0]
   ba4e4:	071e      	lsls	r6, r3, #28
   ba4e6:	d4ae      	bmi.n	ba446 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   ba4e8:	f640 32fc 	movw	r2, #3068	; 0xbfc
   ba4ec:	3104      	adds	r1, #4
   ba4ee:	f009 fa1f 	bl	c3930 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba4f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   ba4f4:	7813      	ldrb	r3, [r2, #0]
   ba4f6:	f043 0308 	orr.w	r3, r3, #8
   ba4fa:	7013      	strb	r3, [r2, #0]
   ba4fc:	e7a3      	b.n	ba446 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   ba4fe:	2a3c      	cmp	r2, #60	; 0x3c
   ba500:	f040 80bf 	bne.w	ba682 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   ba504:	884a      	ldrh	r2, [r1, #2]
   ba506:	2a28      	cmp	r2, #40	; 0x28
   ba508:	d002      	beq.n	ba510 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   ba50a:	2a40      	cmp	r2, #64	; 0x40
   ba50c:	f040 80b9 	bne.w	ba682 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   ba510:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba512:	2b00      	cmp	r3, #0
   ba514:	f43f a96f 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba518:	68aa      	ldr	r2, [r5, #8]
   ba51a:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   ba51c:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   ba51e:	68a8      	ldr	r0, [r5, #8]
   ba520:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba522:	2102      	movs	r1, #2
   ba524:	f7fd fbad 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba528:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   ba52a:	68a8      	ldr	r0, [r5, #8]
   ba52c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba52e:	2104      	movs	r1, #4
   ba530:	f7fd fb9a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba534:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba536:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba538:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba53a:	2108      	movs	r1, #8
   ba53c:	f7fd fb94 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   ba540:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba542:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba544:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba546:	210c      	movs	r1, #12
   ba548:	f7fd fb8e 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   ba54c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba54e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba550:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba552:	2110      	movs	r1, #16
   ba554:	f7fd fb88 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   ba558:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   ba55a:	886b      	ldrh	r3, [r5, #2]
   ba55c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba55e:	2b28      	cmp	r3, #40	; 0x28
   ba560:	d14b      	bne.n	ba5fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   ba562:	2600      	movs	r6, #0
   ba564:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   ba566:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba568:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   ba56a:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   ba56c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba56e:	7d12      	ldrb	r2, [r2, #20]
   ba570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba574:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   ba576:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba578:	7d52      	ldrb	r2, [r2, #21]
   ba57a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba57e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   ba580:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba582:	7d92      	ldrb	r2, [r2, #22]
   ba584:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   ba588:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba58a:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   ba58e:	68a8      	ldr	r0, [r5, #8]
   ba590:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba592:	2118      	movs	r1, #24
   ba594:	f7fd fb68 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba598:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   ba59a:	68a8      	ldr	r0, [r5, #8]
   ba59c:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba59e:	211c      	movs	r1, #28
   ba5a0:	f7fd fb62 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5a4:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   ba5a6:	68a8      	ldr	r0, [r5, #8]
   ba5a8:	6d27      	ldr	r7, [r4, #80]	; 0x50
   ba5aa:	2120      	movs	r1, #32
   ba5ac:	f7fd fb5c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5b0:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   ba5b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5b4:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   ba5b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5b8:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   ba5ba:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba5bc:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba5be:	68a8      	ldr	r0, [r5, #8]
   ba5c0:	f7fd fb52 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5c4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba5c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5cc:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba5ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   ba5d2:	b17a      	cbz	r2, ba5f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba5d4:	7819      	ldrb	r1, [r3, #0]
   ba5d6:	0708      	lsls	r0, r1, #28
   ba5d8:	d40c      	bmi.n	ba5f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   ba5da:	1d19      	adds	r1, r3, #4
   ba5dc:	3344      	adds	r3, #68	; 0x44
   ba5de:	f851 0b04 	ldr.w	r0, [r1], #4
   ba5e2:	f842 0b04 	str.w	r0, [r2], #4
   ba5e6:	4299      	cmp	r1, r3
   ba5e8:	d1f9      	bne.n	ba5de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba5ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
   ba5ec:	7813      	ldrb	r3, [r2, #0]
   ba5ee:	f043 0308 	orr.w	r3, r3, #8
   ba5f2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   ba5f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba5f6:	f7ff b98c 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5fa:	68a8      	ldr	r0, [r5, #8]
   ba5fc:	2114      	movs	r1, #20
   ba5fe:	f7fd fb33 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   ba602:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba604:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba606:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba608:	2118      	movs	r1, #24
   ba60a:	f7fd fb2d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   ba60e:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   ba610:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   ba612:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba614:	f892 2020 	ldrb.w	r2, [r2, #32]
   ba618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   ba61c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   ba61e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba620:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   ba624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   ba628:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   ba62a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba62c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   ba630:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   ba634:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   ba636:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba638:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   ba63c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   ba640:	68a8      	ldr	r0, [r5, #8]
   ba642:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba644:	2124      	movs	r1, #36	; 0x24
   ba646:	f7fd fb0f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba64a:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   ba64c:	68a8      	ldr	r0, [r5, #8]
   ba64e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba650:	2128      	movs	r1, #40	; 0x28
   ba652:	f7fd fb09 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba656:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   ba658:	68a8      	ldr	r0, [r5, #8]
   ba65a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba65c:	212c      	movs	r1, #44	; 0x2c
   ba65e:	f7fd fb03 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba662:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   ba664:	68a8      	ldr	r0, [r5, #8]
   ba666:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba668:	2130      	movs	r1, #48	; 0x30
   ba66a:	f7fd fafd 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba66e:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   ba670:	2134      	movs	r1, #52	; 0x34
   ba672:	68a8      	ldr	r0, [r5, #8]
   ba674:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba676:	f7fd faf7 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba67a:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   ba67c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   ba67e:	213c      	movs	r1, #60	; 0x3c
   ba680:	e79d      	b.n	ba5be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   ba682:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   ba686:	d12a      	bne.n	ba6de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   ba688:	6d66      	ldr	r6, [r4, #84]	; 0x54
   ba68a:	2e00      	cmp	r6, #0
   ba68c:	f43f a8b3 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   ba690:	68a8      	ldr	r0, [r5, #8]
   ba692:	2100      	movs	r1, #0
   ba694:	f7fd fae8 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba698:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba69a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba69c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba69e:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   ba6a0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba6a2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   ba6a6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   ba6a8:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba6b0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba6b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6b4:	6a1a      	ldr	r2, [r3, #32]
   ba6b6:	b17a      	cbz	r2, ba6d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba6b8:	7819      	ldrb	r1, [r3, #0]
   ba6ba:	0709      	lsls	r1, r1, #28
   ba6bc:	d40c      	bmi.n	ba6d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   ba6be:	1d19      	adds	r1, r3, #4
   ba6c0:	3314      	adds	r3, #20
   ba6c2:	f851 0b04 	ldr.w	r0, [r1], #4
   ba6c6:	f842 0b04 	str.w	r0, [r2], #4
   ba6ca:	4299      	cmp	r1, r3
   ba6cc:	d1f9      	bne.n	ba6c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
   ba6d0:	7813      	ldrb	r3, [r2, #0]
   ba6d2:	f043 0308 	orr.w	r3, r3, #8
   ba6d6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba6d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   ba6da:	f7ff b91a 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   ba6de:	4aa1      	ldr	r2, [pc, #644]	; (ba964 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   ba6e0:	4293      	cmp	r3, r2
   ba6e2:	f47f a888 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   ba6e6:	69a6      	ldr	r6, [r4, #24]
   ba6e8:	2e00      	cmp	r6, #0
   ba6ea:	f43f a884 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   ba6ee:	68a8      	ldr	r0, [r5, #8]
   ba6f0:	2100      	movs	r1, #0
   ba6f2:	f7fd fab9 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6f6:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6f8:	69a3      	ldr	r3, [r4, #24]
   ba6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba6fe:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba700:	69a3      	ldr	r3, [r4, #24]
   ba702:	691a      	ldr	r2, [r3, #16]
   ba704:	b14a      	cbz	r2, ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba706:	7819      	ldrb	r1, [r3, #0]
   ba708:	070f      	lsls	r7, r1, #28
   ba70a:	d406      	bmi.n	ba71a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   ba70c:	685b      	ldr	r3, [r3, #4]
   ba70e:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   ba710:	69a2      	ldr	r2, [r4, #24]
   ba712:	7813      	ldrb	r3, [r2, #0]
   ba714:	f043 0308 	orr.w	r3, r3, #8
   ba718:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   ba71a:	69a3      	ldr	r3, [r4, #24]
   ba71c:	f7ff b8f9 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   ba720:	784b      	ldrb	r3, [r1, #1]
   ba722:	2b72      	cmp	r3, #114	; 0x72
   ba724:	f040 80a4 	bne.w	ba870 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   ba728:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba72a:	2b00      	cmp	r3, #0
   ba72c:	d069      	beq.n	ba802 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   ba72e:	689b      	ldr	r3, [r3, #8]
   ba730:	2b00      	cmp	r3, #0
   ba732:	d066      	beq.n	ba802 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   ba734:	688a      	ldr	r2, [r1, #8]
   ba736:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   ba738:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   ba73a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   ba73c:	68a8      	ldr	r0, [r5, #8]
   ba73e:	689f      	ldr	r7, [r3, #8]
   ba740:	4631      	mov	r1, r6
   ba742:	f7fd fa9e 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba746:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   ba748:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba74a:	68a8      	ldr	r0, [r5, #8]
   ba74c:	689e      	ldr	r6, [r3, #8]
   ba74e:	2104      	movs	r1, #4
   ba750:	f7fd fa8a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba754:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   ba756:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba758:	68a8      	ldr	r0, [r5, #8]
   ba75a:	689e      	ldr	r6, [r3, #8]
   ba75c:	2108      	movs	r1, #8
   ba75e:	f7fd fa83 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba762:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   ba764:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba766:	68a8      	ldr	r0, [r5, #8]
   ba768:	689e      	ldr	r6, [r3, #8]
   ba76a:	210c      	movs	r1, #12
   ba76c:	f7fd fa7c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba770:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   ba772:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba774:	68a8      	ldr	r0, [r5, #8]
   ba776:	689e      	ldr	r6, [r3, #8]
   ba778:	2110      	movs	r1, #16
   ba77a:	f7fd fa82 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba77e:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba780:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba782:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba784:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba786:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   ba788:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba78a:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba78c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba78e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba790:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   ba792:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   ba794:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba796:	689e      	ldr	r6, [r3, #8]
   ba798:	7833      	ldrb	r3, [r6, #0]
   ba79a:	bb23      	cbnz	r3, ba7e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   ba79c:	68a8      	ldr	r0, [r5, #8]
   ba79e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   ba7a2:	f7fd fa6e 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7a6:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7aa:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   ba7ac:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7ae:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7b2:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   ba7b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   ba7b6:	689b      	ldr	r3, [r3, #8]
   ba7b8:	781a      	ldrb	r2, [r3, #0]
   ba7ba:	2a00      	cmp	r2, #0
   ba7bc:	f040 865d 	bne.w	bb47a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   ba7c0:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   ba7c2:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   ba7c6:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7c8:	b299      	uxth	r1, r3
   ba7ca:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7ce:	d914      	bls.n	ba7fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   ba7d0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   ba7d4:	d011      	beq.n	ba7fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   ba7d6:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7d8:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   ba7da:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7dc:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   ba7de:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   ba7e0:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   ba7e2:	3301      	adds	r3, #1
   ba7e4:	e7f0      	b.n	ba7c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   ba7e6:	68a8      	ldr	r0, [r5, #8]
   ba7e8:	2114      	movs	r1, #20
   ba7ea:	f7fd fa4a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba7ee:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   ba7f2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   ba7f4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba7f6:	7d92      	ldrb	r2, [r2, #22]
   ba7f8:	e7db      	b.n	ba7b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba7fa:	7813      	ldrb	r3, [r2, #0]
   ba7fc:	f043 0308 	orr.w	r3, r3, #8
   ba800:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   ba802:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba804:	2b00      	cmp	r3, #0
   ba806:	f43e aff6 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba80a:	689b      	ldr	r3, [r3, #8]
   ba80c:	2b00      	cmp	r3, #0
   ba80e:	f43e aff2 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   ba812:	22b5      	movs	r2, #181	; 0xb5
   ba814:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   ba816:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba818:	689b      	ldr	r3, [r3, #8]
   ba81a:	2262      	movs	r2, #98	; 0x62
   ba81c:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   ba81e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba820:	689b      	ldr	r3, [r3, #8]
   ba822:	2202      	movs	r2, #2
   ba824:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   ba826:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba828:	689b      	ldr	r3, [r3, #8]
   ba82a:	2272      	movs	r2, #114	; 0x72
   ba82c:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   ba82e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba830:	886a      	ldrh	r2, [r5, #2]
   ba832:	689b      	ldr	r3, [r3, #8]
   ba834:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   ba836:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba838:	689a      	ldr	r2, [r3, #8]
   ba83a:	886b      	ldrh	r3, [r5, #2]
   ba83c:	0a1b      	lsrs	r3, r3, #8
   ba83e:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   ba840:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba842:	886a      	ldrh	r2, [r5, #2]
   ba844:	6898      	ldr	r0, [r3, #8]
   ba846:	68a9      	ldr	r1, [r5, #8]
   ba848:	3006      	adds	r0, #6
   ba84a:	f009 f871 	bl	c3930 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   ba84e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba850:	7b2a      	ldrb	r2, [r5, #12]
   ba852:	689b      	ldr	r3, [r3, #8]
   ba854:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   ba858:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   ba85a:	7b6a      	ldrb	r2, [r5, #13]
   ba85c:	689b      	ldr	r3, [r3, #8]
   ba85e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba862:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba864:	7813      	ldrb	r3, [r2, #0]
   ba866:	f043 0308 	orr.w	r3, r3, #8
   ba86a:	7013      	strb	r3, [r2, #0]
   ba86c:	f7fe bfc3 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   ba870:	2b73      	cmp	r3, #115	; 0x73
   ba872:	d14d      	bne.n	ba910 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   ba874:	6e01      	ldr	r1, [r0, #96]	; 0x60
   ba876:	780b      	ldrb	r3, [r1, #0]
   ba878:	071e      	lsls	r6, r3, #28
   ba87a:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba87e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   ba882:	d543      	bpl.n	ba90c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   ba884:	0843      	lsrs	r3, r0, #1
   ba886:	f47e afb6 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba88a:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   ba88c:	f44f 7688 	mov.w	r6, #272	; 0x110
   ba890:	688b      	ldr	r3, [r1, #8]
   ba892:	437e      	muls	r6, r7
   ba894:	22b5      	movs	r2, #181	; 0xb5
   ba896:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   ba898:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba89a:	689b      	ldr	r3, [r3, #8]
   ba89c:	4433      	add	r3, r6
   ba89e:	2262      	movs	r2, #98	; 0x62
   ba8a0:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   ba8a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8a4:	689b      	ldr	r3, [r3, #8]
   ba8a6:	4433      	add	r3, r6
   ba8a8:	2202      	movs	r2, #2
   ba8aa:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   ba8ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ae:	689b      	ldr	r3, [r3, #8]
   ba8b0:	4433      	add	r3, r6
   ba8b2:	2273      	movs	r2, #115	; 0x73
   ba8b4:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   ba8b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8b8:	886a      	ldrh	r2, [r5, #2]
   ba8ba:	689b      	ldr	r3, [r3, #8]
   ba8bc:	4433      	add	r3, r6
   ba8be:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   ba8c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8c2:	886a      	ldrh	r2, [r5, #2]
   ba8c4:	689b      	ldr	r3, [r3, #8]
   ba8c6:	4433      	add	r3, r6
   ba8c8:	0a12      	lsrs	r2, r2, #8
   ba8ca:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   ba8cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ce:	886a      	ldrh	r2, [r5, #2]
   ba8d0:	6898      	ldr	r0, [r3, #8]
   ba8d2:	68a9      	ldr	r1, [r5, #8]
   ba8d4:	4430      	add	r0, r6
   ba8d6:	3006      	adds	r0, #6
   ba8d8:	f009 f82a 	bl	c3930 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   ba8dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8de:	7b2a      	ldrb	r2, [r5, #12]
   ba8e0:	689b      	ldr	r3, [r3, #8]
   ba8e2:	4433      	add	r3, r6
   ba8e4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   ba8e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   ba8ea:	7b6a      	ldrb	r2, [r5, #13]
   ba8ec:	689b      	ldr	r3, [r3, #8]
   ba8ee:	441e      	add	r6, r3
   ba8f0:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   ba8f4:	6e21      	ldr	r1, [r4, #96]	; 0x60
   ba8f6:	780b      	ldrb	r3, [r1, #0]
   ba8f8:	2201      	movs	r2, #1
   ba8fa:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   ba8fe:	40ba      	lsls	r2, r7
   ba900:	4302      	orrs	r2, r0
   ba902:	f362 03c4 	bfi	r3, r2, #3, #2
   ba906:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   ba908:	f7fe bf75 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   ba90c:	4617      	mov	r7, r2
   ba90e:	e7bd      	b.n	ba88c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   ba910:	2b34      	cmp	r3, #52	; 0x34
   ba912:	d129      	bne.n	ba968 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   ba914:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba916:	2b00      	cmp	r3, #0
   ba918:	f43e af6d 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   ba91c:	689b      	ldr	r3, [r3, #8]
   ba91e:	2b00      	cmp	r3, #0
   ba920:	f43e af69 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba924:	688a      	ldr	r2, [r1, #8]
   ba926:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   ba928:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba92a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   ba92c:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba92e:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   ba930:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   ba932:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   ba934:	6e43      	ldr	r3, [r0, #100]	; 0x64
   ba936:	68a8      	ldr	r0, [r5, #8]
   ba938:	689e      	ldr	r6, [r3, #8]
   ba93a:	2104      	movs	r1, #4
   ba93c:	f7fd f994 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba940:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   ba942:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba944:	68a8      	ldr	r0, [r5, #8]
   ba946:	689e      	ldr	r6, [r3, #8]
   ba948:	2108      	movs	r1, #8
   ba94a:	f7fd f99a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba94e:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   ba950:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ba952:	68a8      	ldr	r0, [r5, #8]
   ba954:	689e      	ldr	r6, [r3, #8]
   ba956:	210a      	movs	r1, #10
   ba958:	f7fd f993 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba95c:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   ba95e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   ba960:	e780      	b.n	ba864 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   ba962:	bf00      	nop
   ba964:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   ba968:	2b13      	cmp	r3, #19
   ba96a:	d14a      	bne.n	baa02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   ba96c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   ba96e:	2b00      	cmp	r3, #0
   ba970:	f43e af41 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba974:	688a      	ldr	r2, [r1, #8]
   ba976:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   ba978:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba97a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba97c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba97e:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   ba980:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   ba982:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba984:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba986:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   ba988:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   ba98a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba98c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba98e:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   ba990:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba992:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba994:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba996:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   ba998:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba99a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba99c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   ba99e:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   ba9a0:	729a      	strb	r2, [r3, #10]
   ba9a2:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9a4:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   ba9a6:	7a3a      	ldrb	r2, [r7, #8]
   ba9a8:	b2f3      	uxtb	r3, r6
   ba9aa:	429a      	cmp	r2, r3
   ba9ac:	d809      	bhi.n	ba9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   ba9ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9b0:	2201      	movs	r2, #1
   ba9b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba9b6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   ba9b8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   ba9ba:	b9a8      	cbnz	r0, ba9e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   ba9bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   ba9be:	f7fe bfa8 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9c2:	886b      	ldrh	r3, [r5, #2]
   ba9c4:	3b08      	subs	r3, #8
   ba9c6:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   ba9ca:	ea4f 0186 	mov.w	r1, r6, lsl #2
   ba9ce:	ddee      	ble.n	ba9ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9d0:	3108      	adds	r1, #8
   ba9d2:	68a8      	ldr	r0, [r5, #8]
   ba9d4:	b289      	uxth	r1, r1
   ba9d6:	f7fd f947 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9da:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9de:	3601      	adds	r6, #1
   ba9e0:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   ba9e2:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   ba9e4:	d1de      	bne.n	ba9a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   ba9e6:	e7e2      	b.n	ba9ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9e8:	780b      	ldrb	r3, [r1, #0]
   ba9ea:	071b      	lsls	r3, r3, #28
   ba9ec:	d4e6      	bmi.n	ba9bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   ba9ee:	2248      	movs	r2, #72	; 0x48
   ba9f0:	3104      	adds	r1, #4
   ba9f2:	f008 ff9d 	bl	c3930 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9f6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   ba9f8:	7813      	ldrb	r3, [r2, #0]
   ba9fa:	f043 0308 	orr.w	r3, r3, #8
   ba9fe:	7013      	strb	r3, [r2, #0]
   baa00:	e7dc      	b.n	ba9bc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   baa02:	2b15      	cmp	r3, #21
   baa04:	f47e aef7 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   baa08:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   baa0a:	2b00      	cmp	r3, #0
   baa0c:	f43e aef3 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   baa10:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa14:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa16:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   baa18:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   baa1a:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   baa1c:	3101      	adds	r1, #1
   baa1e:	2908      	cmp	r1, #8
   baa20:	d1f7      	bne.n	baa12 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   baa22:	68a8      	ldr	r0, [r5, #8]
   baa24:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   baa26:	f7fd f92c 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa2a:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa2c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   baa2e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa30:	7a92      	ldrb	r2, [r2, #10]
   baa32:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa34:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa38:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   baa3a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa40:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   baa42:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baa44:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa48:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   baa4a:	73da      	strb	r2, [r3, #15]
   baa4c:	2610      	movs	r6, #16
   baa4e:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa50:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baa52:	7b51      	ldrb	r1, [r2, #13]
   baa54:	b2da      	uxtb	r2, r3
   baa56:	4291      	cmp	r1, r2
   baa58:	d80b      	bhi.n	baa72 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   baa5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa5c:	2201      	movs	r2, #1
   baa5e:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baa62:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   baa64:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   baa68:	2800      	cmp	r0, #0
   baa6a:	d17f      	bne.n	bab6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   baa6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   baa6e:	f7fe bf50 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa72:	886a      	ldrh	r2, [r5, #2]
   baa74:	3a10      	subs	r2, #16
   baa76:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   baa7a:	ea4f 1843 	mov.w	r8, r3, lsl #5
   baa7e:	ddec      	ble.n	baa5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   baa80:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   baa82:	46b4      	mov	ip, r6
   baa84:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa86:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa88:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa8a:	4440      	add	r0, r8
   baa8c:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baa8e:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   baa92:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   baa94:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baa96:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baa98:	4437      	add	r7, r6
   baa9a:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baa9c:	4440      	add	r0, r8
   baa9e:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baaa0:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   baaa2:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   baaa4:	2a03      	cmp	r2, #3
   baaa6:	d80b      	bhi.n	baac0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baaa8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baaaa:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baaac:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   baab0:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baab4:	4440      	add	r0, r8
   baab6:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   baab8:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   baabc:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   baac0:	3201      	adds	r2, #1
   baac2:	2a08      	cmp	r2, #8
   baac4:	f10c 0c01 	add.w	ip, ip, #1
   baac8:	d1dd      	bne.n	baa86 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   baaca:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baacc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   baace:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   baad0:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baad2:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   baad6:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   baad8:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   baada:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baadc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baade:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baae0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baae4:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   baae6:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   baae8:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baaea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baaec:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baaee:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   baaf2:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   baaf4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baaf6:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baaf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   baafa:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   baafc:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bab00:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bab02:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab04:	3118      	adds	r1, #24
   bab06:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bab0a:	68a8      	ldr	r0, [r5, #8]
   bab0c:	b289      	uxth	r1, r1
   bab0e:	f7fd f8b8 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab12:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab14:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bab16:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bab1a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab1e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab20:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab22:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bab24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bab28:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab2c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab2e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab30:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bab32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bab36:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab3a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab3c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab3e:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bab40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bab44:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab48:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab4a:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab4c:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bab4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bab54:	68aa      	ldr	r2, [r5, #8]
   bab56:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab58:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bab5a:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bab5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bab60:	f106 0620 	add.w	r6, r6, #32
   bab64:	463b      	mov	r3, r7
   bab66:	f47f af73 	bne.w	baa50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bab6a:	e776      	b.n	baa5a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab6c:	780b      	ldrb	r3, [r1, #0]
   bab6e:	071f      	lsls	r7, r3, #28
   bab70:	f53f af7c 	bmi.w	baa6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bab74:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bab78:	3102      	adds	r1, #2
   bab7a:	f008 fed9 	bl	c3930 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bab7e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bab80:	7813      	ldrb	r3, [r2, #0]
   bab82:	f043 0308 	orr.w	r3, r3, #8
   bab86:	7013      	strb	r3, [r2, #0]
   bab88:	e770      	b.n	baa6c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bab8a:	680b      	ldr	r3, [r1, #0]
   bab8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bab90:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bab94:	d12f      	bne.n	babf6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bab96:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bab98:	2b00      	cmp	r3, #0
   bab9a:	f43e ae2c 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bab9e:	688a      	ldr	r2, [r1, #8]
   baba0:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   baba2:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   baba4:	6f06      	ldr	r6, [r0, #112]	; 0x70
   baba6:	68a8      	ldr	r0, [r5, #8]
   baba8:	2102      	movs	r1, #2
   babaa:	f7fd f86a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babae:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   babb0:	68a8      	ldr	r0, [r5, #8]
   babb2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babb4:	2104      	movs	r1, #4
   babb6:	f7fd f857 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babba:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   babbc:	68a8      	ldr	r0, [r5, #8]
   babbe:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babc0:	2108      	movs	r1, #8
   babc2:	f7fd f851 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babc6:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   babc8:	68a8      	ldr	r0, [r5, #8]
   babca:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babcc:	210c      	movs	r1, #12
   babce:	f7fd f858 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babd2:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   babd4:	68a8      	ldr	r0, [r5, #8]
   babd6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babd8:	210e      	movs	r1, #14
   babda:	f7fd f852 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babde:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   babe0:	68a8      	ldr	r0, [r5, #8]
   babe2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   babe4:	2110      	movs	r1, #16
   babe6:	f7fd f84c 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babea:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   babec:	6f23      	ldr	r3, [r4, #112]	; 0x70
   babee:	2201      	movs	r2, #1
   babf0:	751a      	strb	r2, [r3, #20]
   babf2:	f7fe be00 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   babf6:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   babfa:	f47e adfc 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   babfe:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bac00:	2e00      	cmp	r6, #0
   bac02:	f43e adf8 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bac06:	68a8      	ldr	r0, [r5, #8]
   bac08:	2100      	movs	r1, #0
   bac0a:	f7fd f83a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac0e:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bac10:	68a8      	ldr	r0, [r5, #8]
   bac12:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac14:	2102      	movs	r1, #2
   bac16:	f7fd f834 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac1a:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bac1c:	68a8      	ldr	r0, [r5, #8]
   bac1e:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bac20:	2104      	movs	r1, #4
   bac22:	f7fd f82e 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac26:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac28:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bac2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac2e:	609a      	str	r2, [r3, #8]
   bac30:	f7fe bde1 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bac34:	680b      	ldr	r3, [r1, #0]
   bac36:	4ab0      	ldr	r2, [pc, #704]	; (baef8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bac38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bac3c:	4293      	cmp	r3, r2
   bac3e:	f47e adda 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bac42:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bac44:	2b00      	cmp	r3, #0
   bac46:	f43e add6 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bac4a:	688a      	ldr	r2, [r1, #8]
   bac4c:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bac4e:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bac50:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac52:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bac54:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bac56:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bac58:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bac5a:	68a8      	ldr	r0, [r5, #8]
   bac5c:	2102      	movs	r1, #2
   bac5e:	f7fd f810 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac62:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bac64:	68a8      	ldr	r0, [r5, #8]
   bac66:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac68:	2104      	movs	r1, #4
   bac6a:	f7fd f80a 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac6e:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bac70:	68a8      	ldr	r0, [r5, #8]
   bac72:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac74:	2106      	movs	r1, #6
   bac76:	f7fd f804 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bac7a:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bac7c:	68a8      	ldr	r0, [r5, #8]
   bac7e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac80:	2108      	movs	r1, #8
   bac82:	f7fc fff1 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac86:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bac88:	68a8      	ldr	r0, [r5, #8]
   bac8a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac8c:	210c      	movs	r1, #12
   bac8e:	f7fc ffeb 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac92:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bac94:	68a8      	ldr	r0, [r5, #8]
   bac96:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bac98:	2110      	movs	r1, #16
   bac9a:	f7fc ffe5 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac9e:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   baca0:	68a8      	ldr	r0, [r5, #8]
   baca2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   baca4:	2114      	movs	r1, #20
   baca6:	f7fc ffdf 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacaa:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bacac:	68a8      	ldr	r0, [r5, #8]
   bacae:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bacb0:	2118      	movs	r1, #24
   bacb2:	f7fc ffd9 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacb6:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bacb8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bacbe:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacc0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bacc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bacc4:	b17a      	cbz	r2, bace6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacc6:	7819      	ldrb	r1, [r3, #0]
   bacc8:	070e      	lsls	r6, r1, #28
   bacca:	d40c      	bmi.n	bace6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   baccc:	1d19      	adds	r1, r3, #4
   bacce:	3320      	adds	r3, #32
   bacd0:	f851 0b04 	ldr.w	r0, [r1], #4
   bacd4:	f842 0b04 	str.w	r0, [r2], #4
   bacd8:	4299      	cmp	r1, r3
   bacda:	d1f9      	bne.n	bacd0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bacdc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bacde:	7813      	ldrb	r3, [r2, #0]
   bace0:	f043 0308 	orr.w	r3, r3, #8
   bace4:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bace6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bace8:	f7fe be13 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bacec:	4a83      	ldr	r2, [pc, #524]	; (baefc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bacee:	4293      	cmp	r3, r2
   bacf0:	d158      	bne.n	bada4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bacf2:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bacf6:	2f00      	cmp	r7, #0
   bacf8:	f43e ad7d 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bacfc:	68a8      	ldr	r0, [r5, #8]
   bacfe:	2100      	movs	r1, #0
   bad00:	f7fc ffb2 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad04:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bad06:	68a8      	ldr	r0, [r5, #8]
   bad08:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bad0c:	2108      	movs	r1, #8
   bad0e:	f7fc ffab 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad12:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad14:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad16:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad1a:	210c      	movs	r1, #12
   bad1c:	f7fc ffa4 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bad20:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad22:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad24:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad28:	4631      	mov	r1, r6
   bad2a:	f7fc ff9d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bad2e:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad30:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad32:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad36:	2114      	movs	r1, #20
   bad38:	f7fc ff96 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bad3c:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad40:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad44:	2118      	movs	r1, #24
   bad46:	f7fc ff8f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bad4a:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad4c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad4e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad52:	211c      	movs	r1, #28
   bad54:	f7fc ff88 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bad58:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad5c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad60:	2120      	movs	r1, #32
   bad62:	f7fc ff81 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bad66:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad68:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bad70:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bad72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bad76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bad78:	b182      	cbz	r2, bad9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bad7a:	7819      	ldrb	r1, [r3, #0]
   bad7c:	0709      	lsls	r1, r1, #28
   bad7e:	d40d      	bmi.n	bad9c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bad80:	1d19      	adds	r1, r3, #4
   bad82:	3328      	adds	r3, #40	; 0x28
   bad84:	f851 0b04 	ldr.w	r0, [r1], #4
   bad88:	f842 0b04 	str.w	r0, [r2], #4
   bad8c:	4299      	cmp	r1, r3
   bad8e:	d1f9      	bne.n	bad84 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bad90:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bad94:	7813      	ldrb	r3, [r2, #0]
   bad96:	f043 0308 	orr.w	r3, r3, #8
   bad9a:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bad9c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bada0:	f7fe bdb7 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bada4:	784b      	ldrb	r3, [r1, #1]
   bada6:	2b02      	cmp	r3, #2
   bada8:	d158      	bne.n	bae5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   badaa:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   badae:	2e00      	cmp	r6, #0
   badb0:	f43e ad21 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   badb4:	68a8      	ldr	r0, [r5, #8]
   badb6:	2100      	movs	r1, #0
   badb8:	f7fc ff56 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badbc:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   badbe:	68a8      	ldr	r0, [r5, #8]
   badc0:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badc4:	2104      	movs	r1, #4
   badc6:	f7fc ff5c 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badca:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   badcc:	68a8      	ldr	r0, [r5, #8]
   badce:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badd2:	2106      	movs	r1, #6
   badd4:	f7fc ff55 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   badd8:	8170      	strh	r0, [r6, #10]
   badda:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   baddc:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bade0:	886b      	ldrh	r3, [r5, #2]
   bade2:	7a7a      	ldrb	r2, [r7, #9]
   bade4:	b2b1      	uxth	r1, r6
   bade6:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   badea:	d320      	bcc.n	bae2e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   badec:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   badf0:	886a      	ldrh	r2, [r5, #2]
   badf2:	7a73      	ldrb	r3, [r6, #9]
   badf4:	08db      	lsrs	r3, r3, #3
   badf6:	3302      	adds	r3, #2
   badf8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   badfc:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bae00:	d826      	bhi.n	bae50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae02:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bae06:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bae0a:	b160      	cbz	r0, bae26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bae0c:	780b      	ldrb	r3, [r1, #0]
   bae0e:	071a      	lsls	r2, r3, #28
   bae10:	d409      	bmi.n	bae26 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bae12:	2288      	movs	r2, #136	; 0x88
   bae14:	3104      	adds	r1, #4
   bae16:	f008 fd8b 	bl	c3930 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bae1a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bae1e:	7813      	ldrb	r3, [r2, #0]
   bae20:	f043 0308 	orr.w	r3, r3, #8
   bae24:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bae26:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bae2a:	f7fe bd72 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae2e:	3b08      	subs	r3, #8
   bae30:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bae34:	ddda      	ble.n	badec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae36:	0089      	lsls	r1, r1, #2
   bae38:	3108      	adds	r1, #8
   bae3a:	68a8      	ldr	r0, [r5, #8]
   bae3c:	b289      	uxth	r1, r1
   bae3e:	f7fc ff13 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae42:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae46:	3601      	adds	r6, #1
   bae48:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bae4a:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bae4c:	d1c6      	bne.n	baddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bae4e:	e7cd      	b.n	badec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bae50:	68a8      	ldr	r0, [r5, #8]
   bae52:	f7fc ff09 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae56:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bae5a:	e7d2      	b.n	bae02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bae5c:	2b03      	cmp	r3, #3
   bae5e:	d14f      	bne.n	baf00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bae60:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bae64:	2900      	cmp	r1, #0
   bae66:	f43e acc6 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bae6a:	886a      	ldrh	r2, [r5, #2]
   bae6c:	1f13      	subs	r3, r2, #4
   bae6e:	bf48      	it	mi
   bae70:	1cd3      	addmi	r3, r2, #3
   bae72:	10db      	asrs	r3, r3, #3
   bae74:	2700      	movs	r7, #0
   bae76:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bae7a:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae7c:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae7e:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bae82:	3b04      	subs	r3, #4
   bae84:	42bb      	cmp	r3, r7
   bae86:	dc08      	bgt.n	bae9a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae88:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bae8c:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bae90:	bb10      	cbnz	r0, baed8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bae92:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bae96:	f7fe bd3c 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bae9a:	fa1f f887 	uxth.w	r8, r7
   bae9e:	f108 0104 	add.w	r1, r8, #4
   baea2:	68a8      	ldr	r0, [r5, #8]
   baea4:	b289      	uxth	r1, r1
   baea6:	f7fc fedf 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baeaa:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeae:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baeb2:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baeb6:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   baeba:	68a8      	ldr	r0, [r5, #8]
   baebc:	b289      	uxth	r1, r1
   baebe:	f7fc fed3 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   baec2:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baec6:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baec8:	3601      	adds	r6, #1
   baeca:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   baecc:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   baed0:	f107 0708 	add.w	r7, r7, #8
   baed4:	d1d2      	bne.n	bae7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   baed6:	e7d7      	b.n	bae88 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baed8:	780b      	ldrb	r3, [r1, #0]
   baeda:	071b      	lsls	r3, r3, #28
   baedc:	d4d9      	bmi.n	bae92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   baede:	f44f 720e 	mov.w	r2, #568	; 0x238
   baee2:	3108      	adds	r1, #8
   baee4:	3004      	adds	r0, #4
   baee6:	f008 fd23 	bl	c3930 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   baeea:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   baeee:	7813      	ldrb	r3, [r2, #0]
   baef0:	f043 0308 	orr.w	r3, r3, #8
   baef4:	7013      	strb	r3, [r2, #0]
   baef6:	e7cc      	b.n	bae92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   baef8:	001c0300 	.word	0x001c0300
   baefc:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   baf00:	2b10      	cmp	r3, #16
   baf02:	f47e ac78 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   baf06:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   baf0a:	2e00      	cmp	r6, #0
   baf0c:	f43e ac73 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   baf10:	68a8      	ldr	r0, [r5, #8]
   baf12:	2100      	movs	r1, #0
   baf14:	f7fc fea8 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf18:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   baf1a:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf20:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   baf22:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   baf24:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf2a:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   baf2c:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   baf2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf30:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf34:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   baf36:	74da      	strb	r2, [r3, #19]
   baf38:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   baf3e:	7cc6      	ldrb	r6, [r0, #19]
   baf40:	b28a      	uxth	r2, r1
   baf42:	4296      	cmp	r6, r2
   baf44:	d80c      	bhi.n	baf60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baf46:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   baf4e:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baf50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   baf56:	bb62      	cbnz	r2, bafb2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   baf58:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   baf5c:	f7fe bcd9 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf60:	886a      	ldrh	r2, [r5, #2]
   baf62:	3a10      	subs	r2, #16
   baf64:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   baf68:	dded      	ble.n	baf46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   baf6a:	68aa      	ldr	r2, [r5, #8]
   baf6c:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf6e:	1d0a      	adds	r2, r1, #4
   baf70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   baf74:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   baf76:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   baf78:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf7a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf7e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf84:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   baf86:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   baf88:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf8a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf8e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf90:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   baf94:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   baf96:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   baf98:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   baf9a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   baf9e:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafa0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bafa4:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bafa6:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bafa8:	2907      	cmp	r1, #7
   bafaa:	f103 0304 	add.w	r3, r3, #4
   bafae:	d1c4      	bne.n	baf3a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bafb0:	e7c9      	b.n	baf46 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bafb2:	7819      	ldrb	r1, [r3, #0]
   bafb4:	070f      	lsls	r7, r1, #28
   bafb6:	d4cf      	bmi.n	baf58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bafb8:	1d19      	adds	r1, r3, #4
   bafba:	3330      	adds	r3, #48	; 0x30
   bafbc:	f851 0b04 	ldr.w	r0, [r1], #4
   bafc0:	f842 0b04 	str.w	r0, [r2], #4
   bafc4:	4299      	cmp	r1, r3
   bafc6:	d1f9      	bne.n	bafbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bafc8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bafcc:	7813      	ldrb	r3, [r2, #0]
   bafce:	f043 0308 	orr.w	r3, r3, #8
   bafd2:	7013      	strb	r3, [r2, #0]
   bafd4:	e7c0      	b.n	baf58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bafd6:	680b      	ldr	r3, [r1, #0]
   bafd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bafdc:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bafe0:	d16a      	bne.n	bb0b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bafe2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bafe6:	2b00      	cmp	r3, #0
   bafe8:	f43e ac05 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bafec:	7818      	ldrb	r0, [r3, #0]
   bafee:	7859      	ldrb	r1, [r3, #1]
   baff0:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   baff2:	bf36      	itet	cc
   baff4:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   baff8:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   baffa:	1a52      	subcc	r2, r2, r1
   baffc:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   baffe:	2a0e      	cmp	r2, #14
   bb000:	d84b      	bhi.n	bb09a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bb002:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb004:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bb008:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bb00a:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb00c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb010:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb012:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb014:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bb016:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb01a:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb01c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb020:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb022:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb024:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bb026:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb02a:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb02c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb030:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb032:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb034:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bb036:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb03a:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb03c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb040:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb042:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb044:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bb046:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb04a:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb04c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb050:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb052:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb054:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bb056:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb05a:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb05c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb060:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb062:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb064:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bb066:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb06a:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb06c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bb070:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb072:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bb074:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bb076:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bb07a:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bb07c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bb080:	7813      	ldrb	r3, [r2, #0]
   bb082:	3301      	adds	r3, #1
   bb084:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bb086:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bb08a:	781a      	ldrb	r2, [r3, #0]
   bb08c:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb08e:	f47e abb2 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bb092:	2200      	movs	r2, #0
   bb094:	701a      	strb	r2, [r3, #0]
   bb096:	f7fe bbae 	b.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb09a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb09e:	b923      	cbnz	r3, bb0aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bb0a0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb0a4:	2b00      	cmp	r3, #0
   bb0a6:	f43e aba6 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bb0aa:	4996      	ldr	r1, [pc, #600]	; (bb304 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bb0b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb0b4:	f005 bbdd 	b.w	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bb0b8:	784b      	ldrb	r3, [r1, #1]
   bb0ba:	2b80      	cmp	r3, #128	; 0x80
   bb0bc:	f47e ab9b 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb0c0:	884b      	ldrh	r3, [r1, #2]
   bb0c2:	2ba4      	cmp	r3, #164	; 0xa4
   bb0c4:	f63e ab97 	bhi.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bb0c8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bb0cc:	2a00      	cmp	r2, #0
   bb0ce:	f43e ab92 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bb0d2:	7810      	ldrb	r0, [r2, #0]
   bb0d4:	7851      	ldrb	r1, [r2, #1]
   bb0d6:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0d8:	bf36      	itet	cc
   bb0da:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bb0dc:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bb0de:	1a5b      	subcc	r3, r3, r1
   bb0e0:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bb0e2:	2bf8      	cmp	r3, #248	; 0xf8
   bb0e4:	d84f      	bhi.n	bb186 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bb0e6:	23ac      	movs	r3, #172	; 0xac
   bb0e8:	fb03 2200 	mla	r2, r3, r0, r2
   bb0ec:	21b5      	movs	r1, #181	; 0xb5
   bb0ee:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bb0f0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb0f4:	7811      	ldrb	r1, [r2, #0]
   bb0f6:	fb03 2201 	mla	r2, r3, r1, r2
   bb0fa:	2162      	movs	r1, #98	; 0x62
   bb0fc:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bb0fe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb102:	7811      	ldrb	r1, [r2, #0]
   bb104:	fb03 2201 	mla	r2, r3, r1, r2
   bb108:	2113      	movs	r1, #19
   bb10a:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bb10c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb110:	7811      	ldrb	r1, [r2, #0]
   bb112:	fb03 2201 	mla	r2, r3, r1, r2
   bb116:	2180      	movs	r1, #128	; 0x80
   bb118:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bb11a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb11e:	7811      	ldrb	r1, [r2, #0]
   bb120:	fb03 2201 	mla	r2, r3, r1, r2
   bb124:	8869      	ldrh	r1, [r5, #2]
   bb126:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bb128:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb12c:	7811      	ldrb	r1, [r2, #0]
   bb12e:	fb03 2201 	mla	r2, r3, r1, r2
   bb132:	8869      	ldrh	r1, [r5, #2]
   bb134:	0a09      	lsrs	r1, r1, #8
   bb136:	71d1      	strb	r1, [r2, #7]
   bb138:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bb13a:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb13c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bb140:	b28e      	uxth	r6, r1
   bb142:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb144:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bb146:	d907      	bls.n	bb158 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bb148:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb14a:	fb03 2200 	mla	r2, r3, r0, r2
   bb14e:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bb150:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bb152:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bb154:	3101      	adds	r1, #1
   bb156:	e7f0      	b.n	bb13a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bb158:	fb03 2200 	mla	r2, r3, r0, r2
   bb15c:	7b29      	ldrb	r1, [r5, #12]
   bb15e:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bb162:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb166:	7b69      	ldrb	r1, [r5, #13]
   bb168:	7810      	ldrb	r0, [r2, #0]
   bb16a:	fb03 2300 	mla	r3, r3, r0, r2
   bb16e:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bb172:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bb176:	7813      	ldrb	r3, [r2, #0]
   bb178:	3301      	adds	r3, #1
   bb17a:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bb17c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bb180:	781a      	ldrb	r2, [r3, #0]
   bb182:	2afa      	cmp	r2, #250	; 0xfa
   bb184:	e783      	b.n	bb08e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb186:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb18a:	b923      	cbnz	r3, bb196 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bb18c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb190:	2b00      	cmp	r3, #0
   bb192:	f43e ab30 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bb196:	495c      	ldr	r1, [pc, #368]	; (bb308 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bb198:	e788      	b.n	bb0ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bb19a:	680b      	ldr	r3, [r1, #0]
   bb19c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb1a0:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bb1a4:	f040 80b2 	bne.w	bb30c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bb1a8:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bb1ac:	2f00      	cmp	r7, #0
   bb1ae:	f43e ab22 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bb1b2:	68a8      	ldr	r0, [r5, #8]
   bb1b4:	2100      	movs	r1, #0
   bb1b6:	f7fc fd57 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb1ba:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bb1bc:	68a8      	ldr	r0, [r5, #8]
   bb1be:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bb1c2:	2104      	movs	r1, #4
   bb1c4:	f7fc fd5d 	bl	b7c82 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1c8:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bb1ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1d0:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bb1d2:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bb1d4:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1da:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bb1dc:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bb1de:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1e4:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bb1e6:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb1e8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb1ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1ee:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bb1f0:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb1f2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb1f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb1f8:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bb1fa:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb1fc:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb1fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb202:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bb204:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb206:	210c      	movs	r1, #12
   bb208:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb20a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb20e:	f7fc fd2b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bb212:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bb214:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb216:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb21a:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bb21c:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bb21e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb220:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bb224:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bb226:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb228:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb22a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb22e:	2114      	movs	r1, #20
   bb230:	f7fc fd1a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bb234:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb236:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb238:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb23c:	2118      	movs	r1, #24
   bb23e:	f7fc fd13 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bb242:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb244:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb246:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb24a:	211c      	movs	r1, #28
   bb24c:	f7fc fd0c 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bb250:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb252:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb254:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb258:	2120      	movs	r1, #32
   bb25a:	f7fc fd05 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bb25e:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb260:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb262:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb266:	2124      	movs	r1, #36	; 0x24
   bb268:	f7fc fcfe 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bb26c:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb26e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb270:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb274:	4631      	mov	r1, r6
   bb276:	f7fc fcf7 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bb27a:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb27c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb27e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb282:	212c      	movs	r1, #44	; 0x2c
   bb284:	f7fc fcf0 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bb288:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb28a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb28c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb290:	2130      	movs	r1, #48	; 0x30
   bb292:	f7fc fce9 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bb296:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bb298:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb29c:	68a8      	ldr	r0, [r5, #8]
   bb29e:	2134      	movs	r1, #52	; 0x34
   bb2a0:	f7fc fce2 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2a4:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bb2a6:	68a8      	ldr	r0, [r5, #8]
   bb2a8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2ac:	2138      	movs	r1, #56	; 0x38
   bb2ae:	f7fc fcdb 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2b2:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bb2b4:	68a8      	ldr	r0, [r5, #8]
   bb2b6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2ba:	213c      	movs	r1, #60	; 0x3c
   bb2bc:	f7fc fcd4 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2c0:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bb2c2:	68a8      	ldr	r0, [r5, #8]
   bb2c4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bb2c8:	2140      	movs	r1, #64	; 0x40
   bb2ca:	f7fc fccd 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb2ce:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb2d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb2d8:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb2da:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bb2de:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb2e0:	b160      	cbz	r0, bb2fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb2e2:	780b      	ldrb	r3, [r1, #0]
   bb2e4:	071e      	lsls	r6, r3, #28
   bb2e6:	d409      	bmi.n	bb2fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bb2e8:	2248      	movs	r2, #72	; 0x48
   bb2ea:	3104      	adds	r1, #4
   bb2ec:	f008 fb20 	bl	c3930 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb2f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bb2f4:	7813      	ldrb	r3, [r2, #0]
   bb2f6:	f043 0308 	orr.w	r3, r3, #8
   bb2fa:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bb2fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bb300:	f7fe bb07 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bb304:	000c6479 	.word	0x000c6479
   bb308:	000c64b6 	.word	0x000c64b6
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bb30c:	4a5d      	ldr	r2, [pc, #372]	; (bb484 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bb30e:	4293      	cmp	r3, r2
   bb310:	d156      	bne.n	bb3c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bb312:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bb316:	2e00      	cmp	r6, #0
   bb318:	f43e aa6d 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bb31c:	68a8      	ldr	r0, [r5, #8]
   bb31e:	2100      	movs	r1, #0
   bb320:	f7fc fca2 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb324:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb326:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb328:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bb32c:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bb32e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb330:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb332:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb336:	2108      	movs	r1, #8
   bb338:	f7fc fc96 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bb33c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb33e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb340:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb344:	210c      	movs	r1, #12
   bb346:	f7fc fc8f 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bb34a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb34c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb34e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb352:	2110      	movs	r1, #16
   bb354:	f7fc fc88 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bb358:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bb35a:	68a8      	ldr	r0, [r5, #8]
   bb35c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb360:	2114      	movs	r1, #20
   bb362:	f7fc fc81 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb366:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bb368:	68a8      	ldr	r0, [r5, #8]
   bb36a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb36e:	2118      	movs	r1, #24
   bb370:	f7fc fc7a 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb374:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bb376:	68a8      	ldr	r0, [r5, #8]
   bb378:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bb37c:	211c      	movs	r1, #28
   bb37e:	f7fc fc73 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb382:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb384:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb38c:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb38e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bb394:	b182      	cbz	r2, bb3b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb396:	7819      	ldrb	r1, [r3, #0]
   bb398:	0708      	lsls	r0, r1, #28
   bb39a:	d40d      	bmi.n	bb3b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bb39c:	1d19      	adds	r1, r3, #4
   bb39e:	3324      	adds	r3, #36	; 0x24
   bb3a0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb3a4:	f842 0b04 	str.w	r0, [r2], #4
   bb3a8:	4299      	cmp	r1, r3
   bb3aa:	d1f9      	bne.n	bb3a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bb3ac:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bb3b0:	7813      	ldrb	r3, [r2, #0]
   bb3b2:	f043 0308 	orr.w	r3, r3, #8
   bb3b6:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bb3b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bb3bc:	f7fe baa9 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bb3c0:	4a31      	ldr	r2, [pc, #196]	; (bb488 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bb3c2:	4293      	cmp	r3, r2
   bb3c4:	f47e aa17 	bne.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bb3c8:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bb3cc:	2e00      	cmp	r6, #0
   bb3ce:	f43e aa12 	beq.w	b97f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bb3d2:	68a8      	ldr	r0, [r5, #8]
   bb3d4:	2100      	movs	r1, #0
   bb3d6:	f7fc fc47 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3da:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bb3dc:	68a8      	ldr	r0, [r5, #8]
   bb3de:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bb3e2:	2108      	movs	r1, #8
   bb3e4:	f7fc fc40 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3e8:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3ea:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3ec:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f0:	210c      	movs	r1, #12
   bb3f2:	f7fc fc39 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bb3f6:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb3fa:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb3fe:	2110      	movs	r1, #16
   bb400:	f7fc fc32 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bb404:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb406:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb408:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb40c:	2114      	movs	r1, #20
   bb40e:	f7fc fc2b 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bb412:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb414:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb416:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb41a:	2118      	movs	r1, #24
   bb41c:	f7fc fc24 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bb420:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb422:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb424:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb428:	211c      	movs	r1, #28
   bb42a:	f7fc fc1d 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bb42e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb430:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb432:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb436:	2120      	movs	r1, #32
   bb438:	f7fc fc16 	bl	b7c68 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bb43c:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb43e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb446:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb448:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb44e:	b182      	cbz	r2, bb472 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb450:	7819      	ldrb	r1, [r3, #0]
   bb452:	0709      	lsls	r1, r1, #28
   bb454:	d40d      	bmi.n	bb472 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bb456:	1d19      	adds	r1, r3, #4
   bb458:	3328      	adds	r3, #40	; 0x28
   bb45a:	f851 0b04 	ldr.w	r0, [r1], #4
   bb45e:	f842 0b04 	str.w	r0, [r2], #4
   bb462:	4299      	cmp	r1, r3
   bb464:	d1f9      	bne.n	bb45a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb466:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bb46a:	7813      	ldrb	r3, [r2, #0]
   bb46c:	f043 0308 	orr.w	r3, r3, #8
   bb470:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bb472:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bb476:	f7fe ba4c 	b.w	b9912 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb47a:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb47c:	2018      	movs	r0, #24
   bb47e:	f7ff b9a2 	b.w	ba7c6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bb482:	bf00      	nop
   bb484:	00200100 	.word	0x00200100
   bb488:	00240200 	.word	0x00240200

000bb48c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bb48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb490:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb492:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bb496:	f89d a020 	ldrb.w	sl, [sp, #32]
   bb49a:	4604      	mov	r4, r0
   bb49c:	460f      	mov	r7, r1
   bb49e:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bb4a0:	b993      	cbnz	r3, bb4c8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bb4a2:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bb4a6:	886b      	ldrh	r3, [r5, #2]
   bb4a8:	88aa      	ldrh	r2, [r5, #4]
   bb4aa:	3303      	adds	r3, #3
   bb4ac:	4293      	cmp	r3, r2
   bb4ae:	db03      	blt.n	bb4b8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bb4b0:	4639      	mov	r1, r7
   bb4b2:	4620      	mov	r0, r4
   bb4b4:	f7fd fdf0 	bl	b9098 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bb4b8:	88ae      	ldrh	r6, [r5, #4]
   bb4ba:	bb7e      	cbnz	r6, bb51c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bb4bc:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bb4be:	88ab      	ldrh	r3, [r5, #4]
   bb4c0:	3301      	adds	r3, #1
   bb4c2:	80ab      	strh	r3, [r5, #4]
}
   bb4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb4c8:	2b03      	cmp	r3, #3
   bb4ca:	d124      	bne.n	bb516 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bb4cc:	7852      	ldrb	r2, [r2, #1]
   bb4ce:	7829      	ldrb	r1, [r5, #0]
   bb4d0:	f7fc fdda 	bl	b8088 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bb4d4:	4680      	mov	r8, r0
   bb4d6:	2800      	cmp	r0, #0
   bb4d8:	d1e5      	bne.n	bb4a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb4da:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb4de:	b91b      	cbnz	r3, bb4e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bb4e0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb4e4:	2b00      	cmp	r3, #0
   bb4e6:	d0de      	beq.n	bb4a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb4e8:	49b7      	ldr	r1, [pc, #732]	; (bb7c8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bb4ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4ee:	f005 f9a6 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bb4f2:	7829      	ldrb	r1, [r5, #0]
   bb4f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb4f8:	220a      	movs	r2, #10
   bb4fa:	f7fc fbd5 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bb4fe:	49b3      	ldr	r1, [pc, #716]	; (bb7cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb500:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb504:	f005 f99b 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bb508:	7869      	ldrb	r1, [r5, #1]
   bb50a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb50e:	220a      	movs	r2, #10
   bb510:	f7fc fbd1 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb514:	e7c7      	b.n	bb4a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bb516:	f04f 0802 	mov.w	r8, #2
   bb51a:	e7c4      	b.n	bb4a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bb51c:	2e01      	cmp	r6, #1
   bb51e:	d101      	bne.n	bb524 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bb520:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb522:	e7cc      	b.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bb524:	2e02      	cmp	r6, #2
   bb526:	d101      	bne.n	bb52c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bb528:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb52a:	e7c8      	b.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bb52c:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bb52e:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bb530:	d103      	bne.n	bb53a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bb532:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bb536:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb538:	e7c1      	b.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bb53a:	1d0b      	adds	r3, r1, #4
   bb53c:	429e      	cmp	r6, r3
   bb53e:	d136      	bne.n	bb5ae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bb540:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb542:	88aa      	ldrh	r2, [r5, #4]
   bb544:	f108 0306 	add.w	r3, r8, #6
   bb548:	429a      	cmp	r2, r3
   bb54a:	d1b8      	bne.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bb54c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb550:	2b00      	cmp	r3, #0
   bb552:	d1b4      	bne.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bb554:	2200      	movs	r2, #0
   bb556:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb558:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bb55c:	b91a      	cbnz	r2, bb566 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bb55e:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bb562:	2a00      	cmp	r2, #0
   bb564:	d0ab      	beq.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb566:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bb56a:	2b00      	cmp	r3, #0
   bb56c:	f000 8170 	beq.w	bb850 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bb570:	4997      	ldr	r1, [pc, #604]	; (bb7d0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb572:	f005 f964 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bb576:	4997      	ldr	r1, [pc, #604]	; (bb7d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bb578:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb57c:	f005 f95f 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb580:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bb584:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb588:	220a      	movs	r2, #10
   bb58a:	f005 f974 	bl	c0876 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bb58e:	4992      	ldr	r1, [pc, #584]	; (bb7d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bb590:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb594:	f005 f953 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bb598:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bb59c:	220a      	movs	r2, #10
   bb59e:	4641      	mov	r1, r8
   bb5a0:	4620      	mov	r0, r4
   bb5a2:	f005 f968 	bl	c0876 <_ZN5Print11printNumberEmh>
        n += println();
   bb5a6:	4620      	mov	r0, r4
   bb5a8:	f005 f94d 	bl	c0846 <_ZN5Print7printlnEv>
        return n;
   bb5ac:	e787      	b.n	bb4be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bb5ae:	3105      	adds	r1, #5
   bb5b0:	428e      	cmp	r6, r1
   bb5b2:	f040 812f 	bne.w	bb814 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5b6:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bb5b8:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bb5ba:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bb5bc:	89a9      	ldrh	r1, [r5, #12]
   bb5be:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bb5c2:	4291      	cmp	r1, r2
   bb5c4:	f040 80ae 	bne.w	bb724 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bb5c8:	2301      	movs	r3, #1
   bb5ca:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bb5cc:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb5d0:	7829      	ldrb	r1, [r5, #0]
   bb5d2:	4549      	cmp	r1, r9
   bb5d4:	d155      	bne.n	bb682 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bb5d6:	786b      	ldrb	r3, [r5, #1]
   bb5d8:	4553      	cmp	r3, sl
   bb5da:	d152      	bne.n	bb682 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bb5dc:	2301      	movs	r3, #1
   bb5de:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bb5e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb5e4:	b3b3      	cbz	r3, bb654 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bb5e6:	497d      	ldr	r1, [pc, #500]	; (bb7dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bb5e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5ec:	f005 f927 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bb5f0:	220a      	movs	r2, #10
   bb5f2:	8869      	ldrh	r1, [r5, #2]
   bb5f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb5f8:	f005 f93d 	bl	c0876 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bb5fc:	4978      	ldr	r1, [pc, #480]	; (bb7e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bb5fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb602:	f005 f91c 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bb606:	2200      	movs	r2, #0
   bb608:	4629      	mov	r1, r5
   bb60a:	4620      	mov	r0, r4
   bb60c:	f7fd ff50 	bl	b94b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb610:	7bab      	ldrb	r3, [r5, #14]
   bb612:	2b01      	cmp	r3, #1
   bb614:	d104      	bne.n	bb620 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bb616:	4973      	ldr	r1, [pc, #460]	; (bb7e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bb618:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb61c:	f005 f929 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb620:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bb624:	2b01      	cmp	r3, #1
   bb626:	d104      	bne.n	bb632 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bb628:	496f      	ldr	r1, [pc, #444]	; (bb7e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bb62a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb62e:	f005 f920 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb632:	7beb      	ldrb	r3, [r5, #15]
   bb634:	2b01      	cmp	r3, #1
   bb636:	d104      	bne.n	bb642 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bb638:	496c      	ldr	r1, [pc, #432]	; (bb7ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bb63a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb63e:	f005 f918 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bb642:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bb646:	2b01      	cmp	r3, #1
   bb648:	d104      	bne.n	bb654 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bb64a:	4969      	ldr	r1, [pc, #420]	; (bb7f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bb64c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb650:	f005 f90f 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bb654:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bb658:	b91b      	cbnz	r3, bb662 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bb65a:	4629      	mov	r1, r5
   bb65c:	4620      	mov	r0, r4
   bb65e:	f7fe f8b9 	bl	b97d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bb662:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bb666:	2b03      	cmp	r3, #3
   bb668:	f47f af6b 	bne.w	bb542 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bb66c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bb670:	b108      	cbz	r0, bb676 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bb672:	f7f8 fd14 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bb676:	2300      	movs	r3, #0
   bb678:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bb67c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb680:	e75f      	b.n	bb542 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb682:	882b      	ldrh	r3, [r5, #0]
   bb684:	f240 1205 	movw	r2, #261	; 0x105
   bb688:	4293      	cmp	r3, r2
   bb68a:	d123      	bne.n	bb6d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bb68c:	68ab      	ldr	r3, [r5, #8]
   bb68e:	781a      	ldrb	r2, [r3, #0]
   bb690:	454a      	cmp	r2, r9
   bb692:	d102      	bne.n	bb69a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb694:	785b      	ldrb	r3, [r3, #1]
   bb696:	4553      	cmp	r3, sl
   bb698:	d0a0      	beq.n	bb5dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb69a:	786a      	ldrb	r2, [r5, #1]
   bb69c:	4620      	mov	r0, r4
   bb69e:	f7fc fbf1 	bl	b7e84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb6a2:	2800      	cmp	r0, #0
   bb6a4:	d09c      	beq.n	bb5e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bb6a6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6aa:	2b00      	cmp	r3, #0
   bb6ac:	d0d2      	beq.n	bb654 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bb6ae:	4951      	ldr	r1, [pc, #324]	; (bb7f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bb6b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6b4:	f005 f8c3 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bb6b8:	2210      	movs	r2, #16
   bb6ba:	7829      	ldrb	r1, [r5, #0]
   bb6bc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6c0:	f7fc faf2 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bb6c4:	4941      	ldr	r1, [pc, #260]	; (bb7cc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bb6c6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6ca:	f005 f8b8 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bb6ce:	7869      	ldrb	r1, [r5, #1]
   bb6d0:	2210      	movs	r2, #16
   bb6d2:	e022      	b.n	bb71a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb6d4:	2b05      	cmp	r3, #5
   bb6d6:	d1e0      	bne.n	bb69a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6d8:	68ab      	ldr	r3, [r5, #8]
   bb6da:	781a      	ldrb	r2, [r3, #0]
   bb6dc:	454a      	cmp	r2, r9
   bb6de:	d1dc      	bne.n	bb69a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bb6e0:	785b      	ldrb	r3, [r3, #1]
   bb6e2:	4553      	cmp	r3, sl
   bb6e4:	d1d9      	bne.n	bb69a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bb6e6:	2303      	movs	r3, #3
   bb6e8:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bb6ea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb6ee:	2b00      	cmp	r3, #0
   bb6f0:	d0b0      	beq.n	bb654 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bb6f2:	4941      	ldr	r1, [pc, #260]	; (bb7f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bb6f4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb6f8:	f005 f8a1 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bb6fc:	68ab      	ldr	r3, [r5, #8]
   bb6fe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb702:	7819      	ldrb	r1, [r3, #0]
   bb704:	2210      	movs	r2, #16
   bb706:	f7fc facf 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bb70a:	493c      	ldr	r1, [pc, #240]	; (bb7fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bb70c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb710:	f005 f895 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bb714:	68ab      	ldr	r3, [r5, #8]
   bb716:	7859      	ldrb	r1, [r3, #1]
   bb718:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bb71a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb71e:	f7fc faca 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bb722:	e75d      	b.n	bb5e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bb724:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bb726:	782b      	ldrb	r3, [r5, #0]
   bb728:	454b      	cmp	r3, r9
   bb72a:	d143      	bne.n	bb7b4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bb72c:	786a      	ldrb	r2, [r5, #1]
   bb72e:	4552      	cmp	r2, sl
   bb730:	d140      	bne.n	bb7b4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bb732:	2300      	movs	r3, #0
   bb734:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb736:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb73a:	b91b      	cbnz	r3, bb744 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bb73c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb740:	2b00      	cmp	r3, #0
   bb742:	d08e      	beq.n	bb662 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bb744:	492e      	ldr	r1, [pc, #184]	; (bb800 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bb746:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb74a:	f005 f878 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bb74e:	492d      	ldr	r1, [pc, #180]	; (bb804 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bb750:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb754:	f005 f873 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bb758:	7b29      	ldrb	r1, [r5, #12]
   bb75a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb75e:	220a      	movs	r2, #10
   bb760:	f7fc faa2 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bb764:	4928      	ldr	r1, [pc, #160]	; (bb808 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bb766:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb76a:	f005 f868 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bb76e:	7b69      	ldrb	r1, [r5, #13]
   bb770:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb774:	220a      	movs	r2, #10
   bb776:	f7fc fa97 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bb77a:	4924      	ldr	r1, [pc, #144]	; (bb80c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bb77c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb780:	f005 f85d 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bb784:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bb788:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb78c:	220a      	movs	r2, #10
   bb78e:	f7fc fa8b 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bb792:	491f      	ldr	r1, [pc, #124]	; (bb810 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bb794:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb798:	f005 f851 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bb79c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7a0:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bb7a4:	220a      	movs	r2, #10
   bb7a6:	f7fc fa7f 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bb7aa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb7ae:	f005 f84a 	bl	c0846 <_ZN5Print7printlnEv>
   bb7b2:	e756      	b.n	bb662 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bb7b4:	2b05      	cmp	r3, #5
   bb7b6:	d1be      	bne.n	bb736 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7b8:	68ab      	ldr	r3, [r5, #8]
   bb7ba:	781a      	ldrb	r2, [r3, #0]
   bb7bc:	454a      	cmp	r2, r9
   bb7be:	d1ba      	bne.n	bb736 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7c0:	785b      	ldrb	r3, [r3, #1]
   bb7c2:	4553      	cmp	r3, sl
   bb7c4:	d1b7      	bne.n	bb736 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bb7c6:	e7b4      	b.n	bb732 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bb7c8:	000c64f8 	.word	0x000c64f8
   bb7cc:	000c6569 	.word	0x000c6569
   bb7d0:	000c6671 	.word	0x000c6671
   bb7d4:	000c66c8 	.word	0x000c66c8
   bb7d8:	000c66de 	.word	0x000c66de
   bb7dc:	000c65a5 	.word	0x000c65a5
   bb7e0:	000c65b6 	.word	0x000c65b6
   bb7e4:	000c65c2 	.word	0x000c65c2
   bb7e8:	000c65d6 	.word	0x000c65d6
   bb7ec:	000c65ea 	.word	0x000c65ea
   bb7f0:	000c6604 	.word	0x000c6604
   bb7f4:	000c6571 	.word	0x000c6571
   bb7f8:	000c6530 	.word	0x000c6530
   bb7fc:	000c655f 	.word	0x000c655f
   bb800:	000c661e 	.word	0x000c661e
   bb804:	000c662f 	.word	0x000c662f
   bb808:	000c663c 	.word	0x000c663c
   bb80c:	000c6649 	.word	0x000c6649
   bb810:	000c665d 	.word	0x000c665d
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb814:	786a      	ldrb	r2, [r5, #1]
   bb816:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bb818:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bb81c:	4620      	mov	r0, r4
   bb81e:	f7fc fb31 	bl	b7e84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bb822:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bb826:	2800      	cmp	r0, #0
   bb828:	bf18      	it	ne
   bb82a:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bb82e:	2b00      	cmp	r3, #0
   bb830:	f47f ae87 	bne.w	bb542 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bb834:	1ef3      	subs	r3, r6, #3
   bb836:	454b      	cmp	r3, r9
   bb838:	f77f ae83 	ble.w	bb542 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bb83c:	3e04      	subs	r6, #4
   bb83e:	eba6 0609 	sub.w	r6, r6, r9
   bb842:	4546      	cmp	r6, r8
   bb844:	da02      	bge.n	bb84c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bb846:	68ab      	ldr	r3, [r5, #8]
   bb848:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bb84a:	e67a      	b.n	bb542 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bb84c:	2301      	movs	r3, #1
   bb84e:	e681      	b.n	bb554 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bb850:	4900      	ldr	r1, [pc, #0]	; (bb854 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bb852:	e68e      	b.n	bb572 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bb854:	000c6696 	.word	0x000c6696

000bb858 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bb858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb85a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bb85e:	4604      	mov	r4, r0
   bb860:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bb862:	b113      	cbz	r3, bb86a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bb864:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bb868:	b953      	cbnz	r3, bb880 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bb86a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bb86e:	b128      	cbz	r0, bb87c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bb870:	490e      	ldr	r1, [pc, #56]	; (bb8ac <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb872:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb876:	f004 fffc 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bb87a:	2000      	movs	r0, #0
}
   bb87c:	b003      	add	sp, #12
   bb87e:	bd30      	pop	{r4, r5, pc}
   bb880:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bb882:	f7fd ff12 	bl	b96aa <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bb886:	4285      	cmp	r5, r0
   bb888:	9901      	ldr	r1, [sp, #4]
   bb88a:	d908      	bls.n	bb89e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb88c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb890:	b91b      	cbnz	r3, bb89a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bb892:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bb896:	2800      	cmp	r0, #0
   bb898:	d0f0      	beq.n	bb87c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bb89a:	4905      	ldr	r1, [pc, #20]	; (bb8b0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bb89c:	e7e9      	b.n	bb872 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bb89e:	4620      	mov	r0, r4
   bb8a0:	462a      	mov	r2, r5
   bb8a2:	f7fd ff0b 	bl	b96bc <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bb8a6:	2001      	movs	r0, #1
   bb8a8:	e7e8      	b.n	bb87c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bb8aa:	bf00      	nop
   bb8ac:	000c66f6 	.word	0x000c66f6
   bb8b0:	000c6721 	.word	0x000c6721

000bb8b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bb8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb8b8:	4604      	mov	r4, r0
   bb8ba:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bb8bc:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bb8c0:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bb8c4:	f88d 100f 	strb.w	r1, [sp, #15]
   bb8c8:	4615      	mov	r5, r2
   bb8ca:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bb8cc:	b118      	cbz	r0, bb8d6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bb8ce:	6803      	ldr	r3, [r0, #0]
   bb8d0:	b2c9      	uxtb	r1, r1
   bb8d2:	689b      	ldr	r3, [r3, #8]
   bb8d4:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bb8d6:	7823      	ldrb	r3, [r4, #0]
   bb8d8:	2b01      	cmp	r3, #1
   bb8da:	d80e      	bhi.n	bb8fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bb8dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb8e0:	2bb5      	cmp	r3, #181	; 0xb5
   bb8e2:	d12e      	bne.n	bb942 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bb8e4:	2300      	movs	r3, #0
   bb8e6:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb8ea:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bb8ec:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb8f0:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bb8f4:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bb8f6:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bb8fa:	7826      	ldrb	r6, [r4, #0]
   bb8fc:	2e02      	cmp	r6, #2
   bb8fe:	f040 81d5 	bne.w	bbcac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bb902:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb906:	bb5b      	cbnz	r3, bb960 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bb908:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb90c:	2bb5      	cmp	r3, #181	; 0xb5
   bb90e:	d001      	beq.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bb910:	2300      	movs	r3, #0
   bb912:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb914:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb918:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bb91c:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bb920:	2b01      	cmp	r3, #1
   bb922:	f040 81a3 	bne.w	bbc6c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bb926:	463b      	mov	r3, r7
   bb928:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bb92c:	4620      	mov	r0, r4
   bb92e:	f7ff fdad 	bl	bb48c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bb932:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bb936:	3301      	adds	r3, #1
   bb938:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bb93c:	b005      	add	sp, #20
   bb93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bb942:	2b24      	cmp	r3, #36	; 0x24
   bb944:	d105      	bne.n	bb952 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bb946:	2300      	movs	r3, #0
   bb948:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bb94c:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb94e:	7023      	strb	r3, [r4, #0]
   bb950:	e7d3      	b.n	bb8fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bb952:	2bd3      	cmp	r3, #211	; 0xd3
   bb954:	d1d1      	bne.n	bb8fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bb956:	2300      	movs	r3, #0
   bb958:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bb95c:	2303      	movs	r3, #3
   bb95e:	e7f6      	b.n	bb94e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bb960:	2b01      	cmp	r3, #1
   bb962:	d103      	bne.n	bb96c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bb964:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bb968:	2b62      	cmp	r3, #98	; 0x62
   bb96a:	e7d0      	b.n	bb90e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bb96c:	2b02      	cmp	r3, #2
   bb96e:	d10e      	bne.n	bb98e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bb970:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bb974:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bb978:	2200      	movs	r2, #0
   bb97a:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bb97e:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bb982:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bb986:	88eb      	ldrh	r3, [r5, #6]
   bb988:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bb98c:	e7c2      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bb98e:	2b03      	cmp	r3, #3
   bb990:	f040 80b7 	bne.w	bbb02 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb994:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bb998:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bb99c:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bb9a0:	2905      	cmp	r1, #5
   bb9a2:	d0b7      	beq.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bb9a4:	42b9      	cmp	r1, r7
   bb9a6:	d10c      	bne.n	bb9c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bb9a8:	4546      	cmp	r6, r8
   bb9aa:	d10a      	bne.n	bb9c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bb9ac:	2300      	movs	r3, #0
   bb9ae:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bb9b2:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bb9b4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bb9b8:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bb9ba:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bb9be:	80ab      	strh	r3, [r5, #4]
   bb9c0:	e7a8      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bb9c2:	4632      	mov	r2, r6
   bb9c4:	4620      	mov	r0, r4
   bb9c6:	f7fc fa5d 	bl	b7e84 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bb9ca:	2800      	cmp	r0, #0
   bb9cc:	f000 8095 	beq.w	bbafa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bb9d0:	4632      	mov	r2, r6
   bb9d2:	4620      	mov	r0, r4
   bb9d4:	f7fc fb58 	bl	b8088 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bb9d8:	4606      	mov	r6, r0
   bb9da:	b9e8      	cbnz	r0, bba18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bb9dc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bb9e0:	b913      	cbnz	r3, bb9e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bb9e2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bb9e6:	b1bb      	cbz	r3, bba18 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bb9e8:	49a7      	ldr	r1, [pc, #668]	; (bbc88 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bb9ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9ee:	f004 ff26 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bb9f2:	220a      	movs	r2, #10
   bb9f4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bb9f8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bb9fc:	f7fc f954 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba00:	49a2      	ldr	r1, [pc, #648]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba02:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba06:	f004 ff1a 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bba0a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba12:	220a      	movs	r2, #10
   bba14:	f7fc f94f 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bba18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bba1c:	b1a3      	cbz	r3, bba48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba1e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba22:	b913      	cbnz	r3, bba2a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bba24:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba28:	b123      	cbz	r3, bba34 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bba2a:	4999      	ldr	r1, [pc, #612]	; (bbc90 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bba2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba30:	f004 ff1f 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bba34:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bba38:	b108      	cbz	r0, bba3e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bba3a:	f7f8 fb30 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bba3e:	2300      	movs	r3, #0
   bba40:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bba44:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bba48:	4630      	mov	r0, r6
   bba4a:	f7f8 fb26 	bl	b409a <_Znaj>
   bba4e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bba52:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bba56:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bba5a:	bb38      	cbnz	r0, bbaac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bba5c:	b913      	cbnz	r3, bba64 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bba5e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bba62:	b1e3      	cbz	r3, bba9e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bba64:	498b      	ldr	r1, [pc, #556]	; (bbc94 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bba66:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba6a:	f004 fee8 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bba6e:	2210      	movs	r2, #16
   bba70:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bba74:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba78:	f7fc f916 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bba7c:	4983      	ldr	r1, [pc, #524]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bba7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba82:	f004 fedc 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bba86:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bba8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba8e:	2210      	movs	r2, #16
   bba90:	f7fc f911 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bba94:	4980      	ldr	r1, [pc, #512]	; (bbc98 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bba96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bba9a:	f004 feea 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bba9e:	2300      	movs	r3, #0
   bbaa0:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bbaa4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bbaa8:	702b      	strb	r3, [r5, #0]
   bbaaa:	e783      	b.n	bb9b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bbaac:	2203      	movs	r2, #3
   bbaae:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bbab2:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bbab6:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bbaba:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bbabe:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bbac2:	2b00      	cmp	r3, #0
   bbac4:	f43f af26 	beq.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bbac8:	4974      	ldr	r1, [pc, #464]	; (bbc9c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bbaca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbace:	f004 feb6 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bbad2:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbad6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbada:	2210      	movs	r2, #16
   bbadc:	f7fc f8e4 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bbae0:	496a      	ldr	r1, [pc, #424]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbae2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbae6:	f004 feaa 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bbaea:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbaee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbaf2:	2210      	movs	r2, #16
   bbaf4:	f7fc f8df 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbaf8:	e70c      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bbafa:	2301      	movs	r3, #1
   bbafc:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bbb00:	e708      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bbb02:	2b04      	cmp	r3, #4
   bbb04:	d104      	bne.n	bbb10 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bbb06:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb0a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bbb0e:	e701      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bbb10:	2b05      	cmp	r3, #5
   bbb12:	d106      	bne.n	bbb22 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bbb14:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb18:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bbb20:	e7f3      	b.n	bbb0a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bbb22:	2b06      	cmp	r3, #6
   bbb24:	d12b      	bne.n	bbb7e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb26:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb2a:	bb13      	cbnz	r3, bbb72 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbb2c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbb30:	b913      	cbnz	r3, bbb38 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bbb32:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbb36:	b1bb      	cbz	r3, bbb68 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bbb38:	4959      	ldr	r1, [pc, #356]	; (bbca0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bbb3a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb3e:	f004 fe7e 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bbb42:	2210      	movs	r2, #16
   bbb44:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbb48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb4c:	f7fc f8ac 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bbb50:	494e      	ldr	r1, [pc, #312]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbb52:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb56:	f004 fe72 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bbb5a:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bbb5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbb62:	2210      	movs	r2, #16
   bbb64:	f7fc f8a7 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bbb68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbb6c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbb70:	e6d0      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bbb72:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbb76:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbb7a:	701a      	strb	r2, [r3, #0]
   bbb7c:	e6ca      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb7e:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bbb80:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bbb84:	f47f aec6 	bne.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bbb88:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bbb8c:	bb9b      	cbnz	r3, bbbf6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bbb8e:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bbb92:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bbb96:	2b02      	cmp	r3, #2
   bbb98:	f47f aebc 	bne.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bbb9c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bbba0:	2905      	cmp	r1, #5
   bbba2:	f47f aeb7 	bne.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bbba6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbbaa:	781a      	ldrb	r2, [r3, #0]
   bbbac:	42ba      	cmp	r2, r7
   bbbae:	f47f aeb1 	bne.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bbbb2:	785a      	ldrb	r2, [r3, #1]
   bbbb4:	4542      	cmp	r2, r8
   bbbb6:	f47f aead 	bne.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bbbba:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bbbbe:	2a02      	cmp	r2, #2
   bbbc0:	d121      	bne.n	bbc06 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bbbc2:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bbbc6:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bbbca:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bbbce:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bbbd2:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bbbd6:	2001      	movs	r0, #1
   bbbd8:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bbbdc:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bbbe0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bbbe4:	781b      	ldrb	r3, [r3, #0]
   bbbe6:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bbbe8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bbbec:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bbbf0:	7852      	ldrb	r2, [r2, #1]
   bbbf2:	705a      	strb	r2, [r3, #1]
   bbbf4:	e68e      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bbbf6:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bbbf8:	bf16      	itet	ne
   bbbfa:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bbbfe:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bbc02:	705a      	strbne	r2, [r3, #1]
   bbc04:	e7c5      	b.n	bbb92 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbc06:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbc0a:	b923      	cbnz	r3, bbc16 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bbc0c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbc10:	2b00      	cmp	r3, #0
   bbc12:	f43f ae7f 	beq.w	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bbc16:	4923      	ldr	r1, [pc, #140]	; (bbca4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bbc18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc1c:	f004 fe0f 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bbc20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc28:	7819      	ldrb	r1, [r3, #0]
   bbc2a:	2210      	movs	r2, #16
   bbc2c:	f7fc f83c 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bbc30:	4916      	ldr	r1, [pc, #88]	; (bbc8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bbc32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc36:	f004 fe02 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bbc3a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bbc3e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc42:	7859      	ldrb	r1, [r3, #1]
   bbc44:	2210      	movs	r2, #16
   bbc46:	f7fc f82f 	bl	b7ca8 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bbc4a:	4917      	ldr	r1, [pc, #92]	; (bbca8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bbc4c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbc50:	f004 fdf5 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bbc54:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bbc58:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bbc5c:	220a      	movs	r2, #10
   bbc5e:	4630      	mov	r0, r6
   bbc60:	f004 fe09 	bl	c0876 <_ZN5Print11printNumberEmh>
        n += println();
   bbc64:	4630      	mov	r0, r6
   bbc66:	f004 fdee 	bl	c0846 <_ZN5Print7printlnEv>
        return n;
   bbc6a:	e653      	b.n	bb914 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbc6c:	b913      	cbnz	r3, bbc74 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bbc6e:	463b      	mov	r3, r7
   bbc70:	462a      	mov	r2, r5
   bbc72:	e65b      	b.n	bb92c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bbc74:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bbc76:	bf08      	it	eq
   bbc78:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bbc7c:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bbc7e:	bf18      	it	ne
   bbc80:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bbc84:	e652      	b.n	bb92c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bbc86:	bf00      	nop
   bbc88:	000c6762 	.word	0x000c6762
   bbc8c:	000c6569 	.word	0x000c6569
   bbc90:	000c6797 	.word	0x000c6797
   bbc94:	000c67d9 	.word	0x000c67d9
   bbc98:	000c681e 	.word	0x000c681e
   bbc9c:	000c6850 	.word	0x000c6850
   bbca0:	000c6881 	.word	0x000c6881
   bbca4:	000c68b1 	.word	0x000c68b1
   bbca8:	000c68e1 	.word	0x000c68e1
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bbcac:	2e01      	cmp	r6, #1
   bbcae:	f040 8188 	bne.w	bbfc2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bbcb2:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bbcb6:	2b00      	cmp	r3, #0
   bbcb8:	d146      	bne.n	bbd48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bbcba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbcbe:	2a24      	cmp	r2, #36	; 0x24
   bbcc0:	f000 8086 	beq.w	bbdd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bbcc4:	2300      	movs	r3, #0
   bbcc6:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bbcc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bbccc:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bbcce:	bf04      	itt	eq
   bbcd0:	23fb      	moveq	r3, #251	; 0xfb
   bbcd2:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bbcd6:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbcda:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bbcde:	3501      	adds	r5, #1
   bbce0:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bbce2:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbce4:	bf08      	it	eq
   bbce6:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bbce8:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bbcec:	bf08      	it	eq
   bbcee:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bbcf0:	2d00      	cmp	r5, #0
   bbcf2:	f47f ae23 	bne.w	bb93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bbcf6:	4620      	mov	r0, r4
   bbcf8:	f7fc fc20 	bl	b853c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbcfc:	2800      	cmp	r0, #0
   bbcfe:	f000 8120 	beq.w	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd02:	4620      	mov	r0, r4
   bbd04:	f7fc fd7c 	bl	b8800 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd08:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd0a:	4620      	mov	r0, r4
   bbd0c:	f7fc fdfa 	bl	b8904 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd10:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd12:	4620      	mov	r0, r4
   bbd14:	f7fd f88a 	bl	b8e2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bbd18:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd1a:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd1c:	1e41      	subs	r1, r0, #1
   bbd1e:	428e      	cmp	r6, r1
   bbd20:	f280 80b4 	bge.w	bbe8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd24:	783a      	ldrb	r2, [r7, #0]
   bbd26:	3a04      	subs	r2, #4
   bbd28:	4296      	cmp	r6, r2
   bbd2a:	f280 80af 	bge.w	bbe8c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bbd2e:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd30:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd34:	f000 80ad 	beq.w	bbe92 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bbd38:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bbd3a:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bbd3e:	bf18      	it	ne
   bbd40:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bbd42:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bbd44:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bbd46:	e7ea      	b.n	bbd1e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bbd48:	2b01      	cmp	r3, #1
   bbd4a:	d103      	bne.n	bbd54 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bbd4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd50:	2a47      	cmp	r2, #71	; 0x47
   bbd52:	e7b5      	b.n	bbcc0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bbd54:	b2da      	uxtb	r2, r3
   bbd56:	2a05      	cmp	r2, #5
   bbd58:	d93a      	bls.n	bbdd0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bbd5a:	4620      	mov	r0, r4
   bbd5c:	f7fc fbee 	bl	b853c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbd60:	b308      	cbz	r0, bbda6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbd62:	4620      	mov	r0, r4
   bbd64:	f7fc fd4c 	bl	b8800 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbd68:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbd6a:	4620      	mov	r0, r4
   bbd6c:	f7fc fdca 	bl	b8904 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbd70:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbd72:	4620      	mov	r0, r4
   bbd74:	f7fd f85a 	bl	b8e2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bbd78:	782b      	ldrb	r3, [r5, #0]
   bbd7a:	4283      	cmp	r3, r0
   bbd7c:	d213      	bcs.n	bbda6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bbd7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bbd82:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbd84:	782b      	ldrb	r3, [r5, #0]
   bbd86:	3301      	adds	r3, #1
   bbd88:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bbd8a:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bbd8c:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bbd8e:	d10a      	bne.n	bbda6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbd90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbd94:	b913      	cbnz	r3, bbd9c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bbd96:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbd9a:	b123      	cbz	r3, bbda6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bbd9c:	498f      	ldr	r1, [pc, #572]	; (bbfdc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bbd9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbda2:	f004 fd66 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bbda6:	4620      	mov	r0, r4
   bbda8:	f7fc f9c8 	bl	b813c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbdac:	b128      	cbz	r0, bbdba <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bbdae:	2201      	movs	r2, #1
   bbdb0:	f10d 010f 	add.w	r1, sp, #15
   bbdb4:	4620      	mov	r0, r4
   bbdb6:	f7ff fd4f 	bl	bb858 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbdba:	4620      	mov	r0, r4
   bbdbc:	f7fc faee 	bl	b839c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbdc0:	2800      	cmp	r0, #0
   bbdc2:	d081      	beq.n	bbcc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bbdc4:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdc8:	4620      	mov	r0, r4
   bbdca:	f7fc fbaf 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bbdce:	e77b      	b.n	bbcc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bbdd0:	18e2      	adds	r2, r4, r3
   bbdd2:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbdd6:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bbdda:	2b05      	cmp	r3, #5
   bbddc:	f47f af74 	bne.w	bbcc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bbde0:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bbde4:	b923      	cbnz	r3, bbdf0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bbde6:	4620      	mov	r0, r4
   bbde8:	f7fc fa70 	bl	b82cc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bbdec:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bbdf0:	4620      	mov	r0, r4
   bbdf2:	f7fc fba3 	bl	b853c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bbdf6:	b1b8      	cbz	r0, bbe28 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bbdf8:	4620      	mov	r0, r4
   bbdfa:	f7fc fd01 	bl	b8800 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bbdfe:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bbe00:	4620      	mov	r0, r4
   bbe02:	f7fc fd7f 	bl	b8904 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bbe06:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe08:	4620      	mov	r0, r4
   bbe0a:	f7fd f80f 	bl	b8e2c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bbe0e:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bbe10:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bbe12:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bbe14:	2100      	movs	r1, #0
   bbe16:	4628      	mov	r0, r5
   bbe18:	f007 fdb2 	bl	c3980 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bbe1c:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bbe20:	602b      	str	r3, [r5, #0]
   bbe22:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bbe26:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bbe28:	4620      	mov	r0, r4
   bbe2a:	f7fc f987 	bl	b813c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bbe2e:	b128      	cbz	r0, bbe3c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bbe30:	2206      	movs	r2, #6
   bbe32:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bbe36:	4620      	mov	r0, r4
   bbe38:	f7ff fd0e 	bl	bb858 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bbe3c:	4620      	mov	r0, r4
   bbe3e:	f7fc faad 	bl	b839c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bbe42:	b1e8      	cbz	r0, bbe80 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bbe44:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bbe48:	4620      	mov	r0, r4
   bbe4a:	f7fc fb6f 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bbe4e:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bbe52:	4620      	mov	r0, r4
   bbe54:	f7fc fb6a 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bbe58:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bbe5c:	4620      	mov	r0, r4
   bbe5e:	f7fc fb65 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bbe62:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bbe66:	4620      	mov	r0, r4
   bbe68:	f7fc fb60 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bbe6c:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bbe70:	4620      	mov	r0, r4
   bbe72:	f7fc fb5b 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bbe76:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bbe7a:	4620      	mov	r0, r4
   bbe7c:	f7fc fb56 	bl	b852c <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bbe80:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bbe84:	2b05      	cmp	r3, #5
   bbe86:	f67f af1f 	bls.w	bbcc8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bbe8a:	e766      	b.n	bbd5a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bbe8c:	2d2a      	cmp	r5, #42	; 0x2a
   bbe8e:	f040 808b 	bne.w	bbfa8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bbe92:	091a      	lsrs	r2, r3, #4
   bbe94:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bbe98:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bbe9a:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bbe9c:	f003 030f 	and.w	r3, r3, #15
   bbea0:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bbea4:	bf84      	itt	hi
   bbea6:	3237      	addhi	r2, #55	; 0x37
   bbea8:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bbeaa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bbeae:	bf88      	it	hi
   bbeb0:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bbeb4:	f818 3006 	ldrb.w	r3, [r8, r6]
   bbeb8:	42ab      	cmp	r3, r5
   bbeba:	eb08 0b06 	add.w	fp, r8, r6
   bbebe:	d143      	bne.n	bbf48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bbec0:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bbec4:	4553      	cmp	r3, sl
   bbec6:	d13f      	bne.n	bbf48 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bbec8:	4620      	mov	r0, r4
   bbeca:	f7fc fd9d 	bl	b8a08 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bbece:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbed0:	4620      	mov	r0, r4
   bbed2:	f7fc fe1d 	bl	b8b10 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbed6:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bbed8:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bbeda:	2100      	movs	r1, #0
   bbedc:	f007 fd50 	bl	c3980 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bbee0:	783a      	ldrb	r2, [r7, #0]
   bbee2:	4641      	mov	r1, r8
   bbee4:	4630      	mov	r0, r6
   bbee6:	f007 fd23 	bl	c3930 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bbeea:	783b      	ldrb	r3, [r7, #0]
   bbeec:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbeee:	4620      	mov	r0, r4
   bbef0:	f7fd f80e 	bl	b8f10 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bbef4:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bbef6:	f025 0503 	bic.w	r5, r5, #3
   bbefa:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bbefe:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bbf00:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bbf04:	4620      	mov	r0, r4
   bbf06:	f7fc fba5 	bl	b8654 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bbf0a:	b1d0      	cbz	r0, bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bbf0c:	f01a 0104 	ands.w	r1, sl, #4
   bbf10:	d117      	bne.n	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bbf12:	4620      	mov	r0, r4
   bbf14:	9102      	str	r1, [sp, #8]
   bbf16:	f7fc fe7f 	bl	b8c18 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bbf1a:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf1c:	4620      	mov	r0, r4
   bbf1e:	f7fc feff 	bl	b8d20 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf22:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bbf24:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bbf26:	464a      	mov	r2, r9
   bbf28:	f007 fd2a 	bl	c3980 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bbf2c:	783a      	ldrb	r2, [r7, #0]
   bbf2e:	4641      	mov	r1, r8
   bbf30:	4650      	mov	r0, sl
   bbf32:	f007 fcfd 	bl	c3930 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf36:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bbf3a:	783b      	ldrb	r3, [r7, #0]
   bbf3c:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bbf40:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bbf42:	2300      	movs	r3, #0
   bbf44:	7023      	strb	r3, [r4, #0]
   bbf46:	e4f9      	b.n	bb93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf4c:	b91b      	cbnz	r3, bbf56 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bbf4e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf52:	2b00      	cmp	r3, #0
   bbf54:	d0f5      	beq.n	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bbf56:	4922      	ldr	r1, [pc, #136]	; (bbfe0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bbf58:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf5c:	f004 fc6f 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bbf60:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf64:	6803      	ldr	r3, [r0, #0]
   bbf66:	4629      	mov	r1, r5
   bbf68:	689b      	ldr	r3, [r3, #8]
   bbf6a:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bbf6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf70:	6803      	ldr	r3, [r0, #0]
   bbf72:	4651      	mov	r1, sl
   bbf74:	689b      	ldr	r3, [r3, #8]
   bbf76:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bbf78:	491a      	ldr	r1, [pc, #104]	; (bbfe4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bbf7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf7e:	f004 fc5e 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bbf82:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf86:	f89b 1000 	ldrb.w	r1, [fp]
   bbf8a:	6803      	ldr	r3, [r0, #0]
   bbf8c:	689b      	ldr	r3, [r3, #8]
   bbf8e:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bbf90:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf94:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bbf98:	6803      	ldr	r3, [r0, #0]
   bbf9a:	689b      	ldr	r3, [r3, #8]
   bbf9c:	4798      	blx	r3
              _debugSerial->println();
   bbf9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa2:	f004 fc50 	bl	c0846 <_ZN5Print7printlnEv>
   bbfa6:	e7cc      	b.n	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbfa8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbfac:	b91b      	cbnz	r3, bbfb6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bbfae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbfb2:	2b00      	cmp	r3, #0
   bbfb4:	d0c5      	beq.n	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bbfb6:	490c      	ldr	r1, [pc, #48]	; (bbfe8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bbfb8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfbc:	f004 fc59 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bbfc0:	e7bf      	b.n	bbf42 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bbfc2:	2e03      	cmp	r6, #3
   bbfc4:	f47f acba 	bne.w	bb93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bbfc8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bbfcc:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bbfd0:	4620      	mov	r0, r4
   bbfd2:	f7fd f821 	bl	b9018 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bbfd6:	7020      	strb	r0, [r4, #0]
}
   bbfd8:	e4b0      	b.n	bb93c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bbfda:	bf00      	nop
   bbfdc:	000c68e8 	.word	0x000c68e8
   bbfe0:	000c6906 	.word	0x000c6906
   bbfe4:	000c6931 	.word	0x000c6931
   bbfe8:	000c6937 	.word	0x000c6937

000bbfec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bbfec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bbff0:	4604      	mov	r4, r0
   bbff2:	4699      	mov	r9, r3
   bbff4:	460f      	mov	r7, r1
   bbff6:	4690      	mov	r8, r2
   bbff8:	f001 f8ae 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bbffc:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bc000:	1ac0      	subs	r0, r0, r3
   bc002:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bc006:	4298      	cmp	r0, r3
   bc008:	f0c0 80a8 	bcc.w	bc15c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bc00c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc010:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc014:	f003 f946 	bl	bf2a4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bc018:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc01c:	21fd      	movs	r1, #253	; 0xfd
   bc01e:	f7fb fe53 	bl	b7cc8 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bc022:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc026:	2100      	movs	r1, #0
   bc028:	f003 f943 	bl	bf2b2 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bc02c:	4605      	mov	r5, r0
   bc02e:	b1a8      	cbz	r0, bc05c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc030:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc034:	b933      	cbnz	r3, bc044 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bc036:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc03a:	b91b      	cbnz	r3, bc044 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bc03c:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bc03e:	b002      	add	sp, #8
   bc040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bc044:	4946      	ldr	r1, [pc, #280]	; (bc160 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc046:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc04a:	f004 fbf8 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bc04e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc052:	220a      	movs	r2, #10
   bc054:	4629      	mov	r1, r5
   bc056:	f7fb fe2e 	bl	b7cb6 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc05a:	e7ef      	b.n	bc03c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bc05c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc060:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc064:	2202      	movs	r2, #2
   bc066:	f003 f91a 	bl	bf29e <_ZN7TwoWire11requestFromEhj>
   bc06a:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bc06c:	2d02      	cmp	r5, #2
   bc06e:	d008      	beq.n	bc082 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc070:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc074:	b91b      	cbnz	r3, bc07e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bc076:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc07a:	2b00      	cmp	r3, #0
   bc07c:	d0de      	beq.n	bc03c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bc07e:	4939      	ldr	r1, [pc, #228]	; (bc164 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bc080:	e7e1      	b.n	bc046 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bc082:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc086:	6803      	ldr	r3, [r0, #0]
   bc088:	695b      	ldr	r3, [r3, #20]
   bc08a:	4798      	blx	r3
   bc08c:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bc08e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc092:	6803      	ldr	r3, [r0, #0]
   bc094:	695b      	ldr	r3, [r3, #20]
   bc096:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bc098:	b2c6      	uxtb	r6, r0
   bc09a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bc09e:	b22a      	sxth	r2, r5
   bc0a0:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bc0a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0a6:	b955      	cbnz	r5, bc0be <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bc0a8:	b123      	cbz	r3, bc0b4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bc0aa:	492f      	ldr	r1, [pc, #188]	; (bc168 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bc0ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0b0:	f004 fbdf 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc0b4:	f001 f850 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bc0b8:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bc0bc:	e7be      	b.n	bc03c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bc0be:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bc0c0:	bfb8      	it	lt
   bc0c2:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bc0c6:	2d64      	cmp	r5, #100	; 0x64
   bc0c8:	d936      	bls.n	bc138 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bc0ca:	b17b      	cbz	r3, bc0ec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bc0cc:	4927      	ldr	r1, [pc, #156]	; (bc16c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bc0ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0d2:	f004 fbb4 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc0d6:	4629      	mov	r1, r5
   bc0d8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0dc:	220a      	movs	r2, #10
   bc0de:	f004 fbca 	bl	c0876 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bc0e2:	4923      	ldr	r1, [pc, #140]	; (bc170 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bc0e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0e8:	f004 fbc3 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bc0ec:	2d00      	cmp	r5, #0
   bc0ee:	d035      	beq.n	bc15c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bc0f0:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bc0f2:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bc0f6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc0fa:	42ae      	cmp	r6, r5
   bc0fc:	bf28      	it	cs
   bc0fe:	462e      	movcs	r6, r5
   bc100:	4632      	mov	r2, r6
   bc102:	f003 f8cc 	bl	bf29e <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bc106:	b2c0      	uxtb	r0, r0
   bc108:	4286      	cmp	r6, r0
   bc10a:	d197      	bne.n	bc03c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bc10c:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc110:	fa1f f38a 	uxth.w	r3, sl
   bc114:	429e      	cmp	r6, r3
   bc116:	d91e      	bls.n	bc156 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bc118:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc11c:	6803      	ldr	r3, [r0, #0]
   bc11e:	695b      	ldr	r3, [r3, #20]
   bc120:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bc122:	f8cd 9000 	str.w	r9, [sp]
   bc126:	b2c1      	uxtb	r1, r0
   bc128:	4643      	mov	r3, r8
   bc12a:	463a      	mov	r2, r7
   bc12c:	4620      	mov	r0, r4
   bc12e:	f7ff fbc1 	bl	bb8b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bc132:	f10a 0a01 	add.w	sl, sl, #1
   bc136:	e7eb      	b.n	bc110 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bc138:	2b00      	cmp	r3, #0
   bc13a:	d0d7      	beq.n	bc0ec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bc13c:	490d      	ldr	r1, [pc, #52]	; (bc174 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bc13e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc142:	f004 fb7c 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
   bc146:	4629      	mov	r1, r5
   bc148:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc14c:	220a      	movs	r2, #10
   bc14e:	f004 fb92 	bl	c0876 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bc152:	4909      	ldr	r1, [pc, #36]	; (bc178 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bc154:	e7c6      	b.n	bc0e4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bc156:	1bad      	subs	r5, r5, r6
   bc158:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bc15a:	e7c7      	b.n	bc0ec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bc15c:	2001      	movs	r0, #1
   bc15e:	e76e      	b.n	bc03e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bc160:	000c6958 	.word	0x000c6958
   bc164:	000c698c 	.word	0x000c698c
   bc168:	000c69c1 	.word	0x000c69c1
   bc16c:	000c69e9 	.word	0x000c69e9
   bc170:	000c6a09 	.word	0x000c6a09
   bc174:	000c6a19 	.word	0x000c6a19
   bc178:	000c6a31 	.word	0x000c6a31

000bc17c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bc17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc17e:	4604      	mov	r4, r0
   bc180:	460d      	mov	r5, r1
   bc182:	4616      	mov	r6, r2
   bc184:	461f      	mov	r7, r3
  while (_serialPort->available())
   bc186:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc18a:	6803      	ldr	r3, [r0, #0]
   bc18c:	691b      	ldr	r3, [r3, #16]
   bc18e:	4798      	blx	r3
   bc190:	b160      	cbz	r0, bc1ac <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bc192:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bc196:	6803      	ldr	r3, [r0, #0]
   bc198:	695b      	ldr	r3, [r3, #20]
   bc19a:	4798      	blx	r3
   bc19c:	9700      	str	r7, [sp, #0]
   bc19e:	b2c1      	uxtb	r1, r0
   bc1a0:	4633      	mov	r3, r6
   bc1a2:	462a      	mov	r2, r5
   bc1a4:	4620      	mov	r0, r4
   bc1a6:	f7ff fb85 	bl	bb8b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bc1aa:	e7ec      	b.n	bc186 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bc1ac:	2001      	movs	r0, #1
   bc1ae:	b003      	add	sp, #12
   bc1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bc1b4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bc1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc1b8:	4604      	mov	r4, r0
   bc1ba:	b087      	sub	sp, #28
   bc1bc:	460d      	mov	r5, r1
   bc1be:	4616      	mov	r6, r2
   bc1c0:	461f      	mov	r7, r3
   bc1c2:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1c6:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bc1ca:	fa5f f388 	uxtb.w	r3, r8
   bc1ce:	429a      	cmp	r2, r3
   bc1d0:	d90b      	bls.n	bc1ea <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bc1d2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bc1d6:	4620      	mov	r0, r4
   bc1d8:	5cd1      	ldrb	r1, [r2, r3]
   bc1da:	9700      	str	r7, [sp, #0]
   bc1dc:	4633      	mov	r3, r6
   bc1de:	462a      	mov	r2, r5
   bc1e0:	f7ff fb68 	bl	bb8b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bc1e4:	f108 0801 	add.w	r8, r8, #1
   bc1e8:	e7ed      	b.n	bc1c6 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bc1ea:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc1ee:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bc1f2:	4a25      	ldr	r2, [pc, #148]	; (bc288 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bc1f4:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bc1f8:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bc1fc:	a902      	add	r1, sp, #8
   bc1fe:	f04f 0901 	mov.w	r9, #1
   bc202:	9202      	str	r2, [sp, #8]
   bc204:	9304      	str	r3, [sp, #16]
   bc206:	f88d 800c 	strb.w	r8, [sp, #12]
   bc20a:	f8ad 9014 	strh.w	r9, [sp, #20]
   bc20e:	f004 fc55 	bl	c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bc212:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc216:	4641      	mov	r1, r8
   bc218:	f005 f8db 	bl	c13d2 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bc21c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc220:	21ff      	movs	r1, #255	; 0xff
   bc222:	f004 fceb 	bl	c0bfc <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc226:	28ff      	cmp	r0, #255	; 0xff
   bc228:	d116      	bne.n	bc258 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc22a:	7823      	ldrb	r3, [r4, #0]
   bc22c:	b983      	cbnz	r3, bc250 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bc22e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc232:	4649      	mov	r1, r9
   bc234:	f005 f8cd 	bl	c13d2 <digitalWrite>
    _spiPort->endTransaction();
   bc238:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc23c:	f004 fc24 	bl	c0a88 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bc240:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bc244:	f001 fad2 	bl	bd7ec <delay>
} // end checkUbloxSpi()
   bc248:	2001      	movs	r0, #1
   bc24a:	b007      	add	sp, #28
   bc24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc250:	28ff      	cmp	r0, #255	; 0xff
   bc252:	d101      	bne.n	bc258 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bc254:	7823      	ldrb	r3, [r4, #0]
   bc256:	b163      	cbz	r3, bc272 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bc258:	4601      	mov	r1, r0
   bc25a:	9700      	str	r7, [sp, #0]
   bc25c:	4620      	mov	r0, r4
   bc25e:	4633      	mov	r3, r6
   bc260:	462a      	mov	r2, r5
   bc262:	f7ff fb27 	bl	bb8b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bc266:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc26a:	21ff      	movs	r1, #255	; 0xff
   bc26c:	f004 fcc6 	bl	c0bfc <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bc270:	e7ee      	b.n	bc250 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bc272:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bc276:	2101      	movs	r1, #1
   bc278:	f005 f8ab 	bl	c13d2 <digitalWrite>
  _spiPort->endTransaction();
   bc27c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bc280:	f004 fc02 	bl	c0a88 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bc284:	e7e0      	b.n	bc248 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bc286:	bf00      	nop
   bc288:	000c6080 	.word	0x000c6080

000bc28c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bc28c:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bc28e:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bc292:	b91c      	cbnz	r4, bc29c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bc294:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bc298:	f7ff bea8 	b.w	bbfec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bc29c:	2c01      	cmp	r4, #1
   bc29e:	d103      	bne.n	bc2a8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bc2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bc2a4:	f7ff bf6a 	b.w	bc17c <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bc2a8:	2c02      	cmp	r4, #2
   bc2aa:	d103      	bne.n	bc2b4 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bc2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bc2b0:	f7ff bf80 	b.w	bc1b4 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bc2b4:	2000      	movs	r0, #0
   bc2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   bc2ba:	4770      	bx	lr

000bc2bc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bc2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2c0:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc2c2:	2102      	movs	r1, #2
   bc2c4:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2c6:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2ca:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2ce:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc2d2:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2d4:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2d8:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc2dc:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc2e0:	4604      	mov	r4, r0
   bc2e2:	4617      	mov	r7, r2
   bc2e4:	4698      	mov	r8, r3
   bc2e6:	f000 ff37 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc2ea:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bc2ee:	4606      	mov	r6, r0
   bc2f0:	4481      	add	r9, r0
   bc2f2:	f000 ff31 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc2f6:	4581      	cmp	r9, r0
   bc2f8:	f240 80a8 	bls.w	bc44c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc2fc:	4643      	mov	r3, r8
   bc2fe:	463a      	mov	r2, r7
   bc300:	4629      	mov	r1, r5
   bc302:	4620      	mov	r0, r4
   bc304:	f7ff ffc2 	bl	bc28c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc308:	2800      	cmp	r0, #0
   bc30a:	f000 809b 	beq.w	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc30e:	7beb      	ldrb	r3, [r5, #15]
   bc310:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bc314:	2b01      	cmp	r3, #1
   bc316:	d125      	bne.n	bc364 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bc318:	2901      	cmp	r1, #1
   bc31a:	f040 80ec 	bne.w	bc4f6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bc31e:	7bab      	ldrb	r3, [r5, #14]
   bc320:	2b01      	cmp	r3, #1
   bc322:	782b      	ldrb	r3, [r5, #0]
   bc324:	d13b      	bne.n	bc39e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bc326:	42bb      	cmp	r3, r7
   bc328:	d13e      	bne.n	bc3a8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc32a:	786a      	ldrb	r2, [r5, #1]
   bc32c:	4542      	cmp	r2, r8
   bc32e:	d136      	bne.n	bc39e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bc330:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc334:	b913      	cbnz	r3, bc33c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bc336:	200b      	movs	r0, #11
}
   bc338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bc33c:	4978      	ldr	r1, [pc, #480]	; (bc520 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bc33e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc342:	f004 fa7c 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc346:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc34a:	f000 ff05 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc34e:	220a      	movs	r2, #10
   bc350:	1b81      	subs	r1, r0, r6
   bc352:	4628      	mov	r0, r5
   bc354:	f7fb fc9b 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc358:	4972      	ldr	r1, [pc, #456]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc35a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc35e:	f004 fa88 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc362:	e7e8      	b.n	bc336 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc364:	2b02      	cmp	r3, #2
   bc366:	d137      	bne.n	bc3d8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bc368:	2901      	cmp	r1, #1
   bc36a:	f040 80aa 	bne.w	bc4c2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bc36e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc372:	b193      	cbz	r3, bc39a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bc374:	496c      	ldr	r1, [pc, #432]	; (bc528 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bc376:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc37a:	f004 fa60 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc37e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc382:	f000 fee9 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc386:	220a      	movs	r2, #10
   bc388:	1b81      	subs	r1, r0, r6
   bc38a:	4628      	mov	r0, r5
   bc38c:	f7fb fc7f 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc390:	4964      	ldr	r1, [pc, #400]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc392:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc396:	f004 fa6c 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bc39a:	200a      	movs	r0, #10
   bc39c:	e7cc      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc39e:	42bb      	cmp	r3, r7
   bc3a0:	d102      	bne.n	bc3a8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bc3a2:	786b      	ldrb	r3, [r5, #1]
   bc3a4:	4543      	cmp	r3, r8
   bc3a6:	d019      	beq.n	bc3dc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bc3a8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3ac:	b193      	cbz	r3, bc3d4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bc3ae:	495f      	ldr	r1, [pc, #380]	; (bc52c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bc3b0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3b4:	f004 fa43 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3b8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3bc:	f000 fecc 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc3c0:	220a      	movs	r2, #10
   bc3c2:	1b81      	subs	r1, r0, r6
   bc3c4:	4628      	mov	r0, r5
   bc3c6:	f7fb fc62 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc3ca:	4956      	ldr	r1, [pc, #344]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc3cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3d0:	f004 fa4f 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc3d4:	200d      	movs	r0, #13
   bc3d6:	e7af      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc3d8:	2901      	cmp	r1, #1
   bc3da:	d172      	bne.n	bc4c2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bc3dc:	89eb      	ldrh	r3, [r5, #14]
   bc3de:	bb8b      	cbnz	r3, bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc3e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc3e4:	b193      	cbz	r3, bc40c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bc3e6:	4952      	ldr	r1, [pc, #328]	; (bc530 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bc3e8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc3ec:	f004 fa27 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc3f0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc3f4:	f000 feb0 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc3f8:	220a      	movs	r2, #10
   bc3fa:	1b81      	subs	r1, r0, r6
   bc3fc:	4628      	mov	r0, r5
   bc3fe:	f7fb fc46 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc402:	4948      	ldr	r1, [pc, #288]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc404:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc408:	f004 fa33 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bc40c:	2002      	movs	r0, #2
   bc40e:	e793      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bc410:	430b      	orrs	r3, r1
   bc412:	d117      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc414:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc418:	b193      	cbz	r3, bc440 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bc41a:	4946      	ldr	r1, [pc, #280]	; (bc534 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bc41c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc420:	f004 fa0d 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc424:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc428:	f000 fe96 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc42c:	220a      	movs	r2, #10
   bc42e:	1b81      	subs	r1, r0, r6
   bc430:	4628      	mov	r0, r5
   bc432:	f7fb fc2c 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc436:	493b      	ldr	r1, [pc, #236]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc438:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc43c:	f004 fa19 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bc440:	2001      	movs	r0, #1
   bc442:	e779      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc444:	2001      	movs	r0, #1
   bc446:	f001 f9d1 	bl	bd7ec <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bc44a:	e752      	b.n	bc2f2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc44c:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bc44e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc452:	2a01      	cmp	r2, #1
   bc454:	d11f      	bne.n	bc496 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc456:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bc45a:	2a02      	cmp	r2, #2
   bc45c:	d11b      	bne.n	bc496 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc45e:	7baa      	ldrb	r2, [r5, #14]
   bc460:	2a01      	cmp	r2, #1
   bc462:	d118      	bne.n	bc496 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc464:	782a      	ldrb	r2, [r5, #0]
   bc466:	42ba      	cmp	r2, r7
   bc468:	d115      	bne.n	bc496 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bc46a:	786a      	ldrb	r2, [r5, #1]
   bc46c:	4542      	cmp	r2, r8
   bc46e:	d112      	bne.n	bc496 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bc470:	2b00      	cmp	r3, #0
   bc472:	f43f af60 	beq.w	bc336 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bc476:	4930      	ldr	r1, [pc, #192]	; (bc538 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bc478:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc47c:	f004 f9df 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bc480:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc484:	f000 fe68 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc488:	220a      	movs	r2, #10
   bc48a:	1b81      	subs	r1, r0, r6
   bc48c:	4628      	mov	r0, r5
   bc48e:	f7fb fbfe 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bc492:	492a      	ldr	r1, [pc, #168]	; (bc53c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bc494:	e761      	b.n	bc35a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bc496:	b193      	cbz	r3, bc4be <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bc498:	4929      	ldr	r1, [pc, #164]	; (bc540 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bc49a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49e:	f004 f9ce 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc4a2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4a6:	f000 fe57 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc4aa:	220a      	movs	r2, #10
   bc4ac:	1b81      	subs	r1, r0, r6
   bc4ae:	4628      	mov	r0, r5
   bc4b0:	f7fb fbed 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bc4b4:	4923      	ldr	r1, [pc, #140]	; (bc544 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bc4b6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ba:	f004 f9da 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc4be:	2003      	movs	r0, #3
   bc4c0:	e73a      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4c2:	2903      	cmp	r1, #3
   bc4c4:	d1a4      	bne.n	bc410 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bc4c6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc4ca:	b193      	cbz	r3, bc4f2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bc4cc:	491e      	ldr	r1, [pc, #120]	; (bc548 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bc4ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4d2:	f004 f9b4 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc4d6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc4da:	f000 fe3d 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc4de:	220a      	movs	r2, #10
   bc4e0:	1b81      	subs	r1, r0, r6
   bc4e2:	4628      	mov	r0, r5
   bc4e4:	f7fb fbd3 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc4e8:	490e      	ldr	r1, [pc, #56]	; (bc524 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bc4ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4ee:	f004 f9c0 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bc4f2:	2004      	movs	r0, #4
   bc4f4:	e720      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bc4f6:	2903      	cmp	r1, #3
   bc4f8:	d0e5      	beq.n	bc4c6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc4fa:	2900      	cmp	r1, #0
   bc4fc:	d1a2      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc4fe:	7bab      	ldrb	r3, [r5, #14]
   bc500:	2b01      	cmp	r3, #1
   bc502:	d19f      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc504:	782b      	ldrb	r3, [r5, #0]
   bc506:	42bb      	cmp	r3, r7
   bc508:	d19c      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bc50a:	786b      	ldrb	r3, [r5, #1]
   bc50c:	4543      	cmp	r3, r8
   bc50e:	d199      	bne.n	bc444 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bc510:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc514:	2b00      	cmp	r3, #0
   bc516:	f43f af0e 	beq.w	bc336 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bc51a:	490c      	ldr	r1, [pc, #48]	; (bc54c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bc51c:	e70f      	b.n	bc33e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bc51e:	bf00      	nop
   bc520:	000c6a38 	.word	0x000c6a38
   bc524:	000c6a75 	.word	0x000c6a75
   bc528:	000c6a7b 	.word	0x000c6a7b
   bc52c:	000c6aac 	.word	0x000c6aac
   bc530:	000c6ade 	.word	0x000c6ade
   bc534:	000c6b7e 	.word	0x000c6b7e
   bc538:	000c6bbf 	.word	0x000c6bbf
   bc53c:	000c6bf2 	.word	0x000c6bf2
   bc540:	000c6bfa 	.word	0x000c6bfa
   bc544:	000c6c1d 	.word	0x000c6c1d
   bc548:	000c6b04 	.word	0x000c6b04
   bc54c:	000c6b3f 	.word	0x000c6b3f

000bc550 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bc550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc554:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bc556:	2102      	movs	r1, #2
   bc558:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc55a:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc55e:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc562:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bc566:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc568:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc56c:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bc570:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bc574:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bc578:	4604      	mov	r4, r0
   bc57a:	4617      	mov	r7, r2
   bc57c:	4698      	mov	r8, r3
   bc57e:	f000 fdeb 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc582:	f240 1a01 	movw	sl, #257	; 0x101
   bc586:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc588:	f240 2b01 	movw	fp, #513	; 0x201
   bc58c:	f000 fde4 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bc590:	1b80      	subs	r0, r0, r6
   bc592:	4548      	cmp	r0, r9
   bc594:	d269      	bcs.n	bc66a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bc596:	4643      	mov	r3, r8
   bc598:	463a      	mov	r2, r7
   bc59a:	4629      	mov	r1, r5
   bc59c:	4620      	mov	r0, r4
   bc59e:	f7ff fe75 	bl	bc28c <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bc5a2:	2800      	cmp	r0, #0
   bc5a4:	d05d      	beq.n	bc662 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bc5a6:	89ea      	ldrh	r2, [r5, #14]
   bc5a8:	4552      	cmp	r2, sl
   bc5aa:	d11e      	bne.n	bc5ea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5ac:	782b      	ldrb	r3, [r5, #0]
   bc5ae:	42bb      	cmp	r3, r7
   bc5b0:	d11b      	bne.n	bc5ea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bc5b2:	786b      	ldrb	r3, [r5, #1]
   bc5b4:	4543      	cmp	r3, r8
   bc5b6:	d118      	bne.n	bc5ea <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bc5b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc5bc:	b193      	cbz	r3, bc5e4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bc5be:	4937      	ldr	r1, [pc, #220]	; (bc69c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bc5c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5c4:	f004 f93b 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc5c8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc5cc:	f000 fdc4 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc5d0:	220a      	movs	r2, #10
   bc5d2:	1b81      	subs	r1, r0, r6
   bc5d4:	4628      	mov	r0, r5
   bc5d6:	f7fb fb5a 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc5da:	4931      	ldr	r1, [pc, #196]	; (bc6a0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc5dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc5e0:	f004 f947 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bc5e4:	200b      	movs	r0, #11
}
   bc5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bc5ea:	7beb      	ldrb	r3, [r5, #15]
   bc5ec:	2b01      	cmp	r3, #1
   bc5ee:	d11d      	bne.n	bc62c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bc5f0:	782b      	ldrb	r3, [r5, #0]
   bc5f2:	42bb      	cmp	r3, r7
   bc5f4:	d102      	bne.n	bc5fc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bc5f6:	786b      	ldrb	r3, [r5, #1]
   bc5f8:	4543      	cmp	r3, r8
   bc5fa:	d032      	beq.n	bc662 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc5fc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc600:	b193      	cbz	r3, bc628 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bc602:	4928      	ldr	r1, [pc, #160]	; (bc6a4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bc604:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc608:	f004 f919 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc60c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc610:	f000 fda2 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc614:	220a      	movs	r2, #10
   bc616:	1b81      	subs	r1, r0, r6
   bc618:	4628      	mov	r0, r5
   bc61a:	f7fb fb38 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc61e:	4920      	ldr	r1, [pc, #128]	; (bc6a0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc620:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc624:	f004 f925 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bc628:	200d      	movs	r0, #13
   bc62a:	e7dc      	b.n	bc5e6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bc62c:	455a      	cmp	r2, fp
   bc62e:	d018      	beq.n	bc662 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bc630:	b9bb      	cbnz	r3, bc662 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bc632:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc636:	b193      	cbz	r3, bc65e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bc638:	491b      	ldr	r1, [pc, #108]	; (bc6a8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bc63a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc63e:	f004 f8fe 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bc642:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc646:	f000 fd87 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc64a:	220a      	movs	r2, #10
   bc64c:	1b81      	subs	r1, r0, r6
   bc64e:	4628      	mov	r0, r5
   bc650:	f7fb fb1d 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bc654:	4912      	ldr	r1, [pc, #72]	; (bc6a0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bc656:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc65a:	f004 f90a 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bc65e:	2002      	movs	r0, #2
   bc660:	e7c1      	b.n	bc5e6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bc662:	2001      	movs	r0, #1
   bc664:	f001 f8c2 	bl	bd7ec <delay>
  while (millis() - startTime < maxTime)
   bc668:	e790      	b.n	bc58c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bc66a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc66e:	b193      	cbz	r3, bc696 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bc670:	490e      	ldr	r1, [pc, #56]	; (bc6ac <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bc672:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc676:	f004 f8e2 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bc67a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bc67e:	f000 fd6b 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
   bc682:	220a      	movs	r2, #10
   bc684:	1b81      	subs	r1, r0, r6
   bc686:	4628      	mov	r0, r5
   bc688:	f7fb fb01 	bl	b7c8e <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bc68c:	4908      	ldr	r1, [pc, #32]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bc68e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc692:	f004 f8ee 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bc696:	2003      	movs	r0, #3
   bc698:	e7a5      	b.n	bc5e6 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bc69a:	bf00      	nop
   bc69c:	000c6c24 	.word	0x000c6c24
   bc6a0:	000c6a75 	.word	0x000c6a75
   bc6a4:	000c6c5e 	.word	0x000c6c5e
   bc6a8:	000c6c92 	.word	0x000c6c92
   bc6ac:	000c6ccb 	.word	0x000c6ccb
   bc6b0:	000c6cf0 	.word	0x000c6cf0

000bc6b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bc6b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bc6b8:	4604      	mov	r4, r0
   bc6ba:	4698      	mov	r8, r3
   bc6bc:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bc6be:	f7fc fcc9 	bl	b9054 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bc6c2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bc6c6:	460d      	mov	r5, r1
  if (_printDebug == true)
   bc6c8:	b14b      	cbz	r3, bc6de <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bc6ca:	492a      	ldr	r1, [pc, #168]	; (bc774 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bc6cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6d0:	f004 f8b5 	bl	c083e <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bc6d4:	2201      	movs	r2, #1
   bc6d6:	4629      	mov	r1, r5
   bc6d8:	4620      	mov	r0, r4
   bc6da:	f7fc fee9 	bl	b94b0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bc6de:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bc6e2:	b993      	cbnz	r3, bc70a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bc6e4:	463a      	mov	r2, r7
   bc6e6:	4629      	mov	r1, r5
   bc6e8:	4620      	mov	r0, r4
   bc6ea:	f7fc fce1 	bl	b90b0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bc6ee:	4606      	mov	r6, r0
   bc6f0:	b188      	cbz	r0, bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc6f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc6f6:	b123      	cbz	r3, bc702 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bc6f8:	491f      	ldr	r1, [pc, #124]	; (bc778 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bc6fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc6fe:	f004 f8b8 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bc702:	4630      	mov	r0, r6
   bc704:	b002      	add	sp, #8
   bc706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc70a:	2b01      	cmp	r3, #1
   bc70c:	d11b      	bne.n	bc746 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bc70e:	4629      	mov	r1, r5
   bc710:	4620      	mov	r0, r4
   bc712:	f7fc fd8f 	bl	b9234 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bc716:	b35f      	cbz	r7, bc770 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc718:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bc71a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bc71e:	2a06      	cmp	r2, #6
   bc720:	d002      	beq.n	bc728 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bc722:	f1b8 0f00 	cmp.w	r8, #0
   bc726:	d015      	beq.n	bc754 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bc728:	b123      	cbz	r3, bc734 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bc72a:	4914      	ldr	r1, [pc, #80]	; (bc77c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bc72c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc730:	f004 f89f 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc734:	786b      	ldrb	r3, [r5, #1]
   bc736:	782a      	ldrb	r2, [r5, #0]
   bc738:	9700      	str	r7, [sp, #0]
   bc73a:	4629      	mov	r1, r5
   bc73c:	4620      	mov	r0, r4
   bc73e:	f7ff fdbd 	bl	bc2bc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc742:	4606      	mov	r6, r0
   bc744:	e7dd      	b.n	bc702 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bc746:	2b02      	cmp	r3, #2
   bc748:	d1e5      	bne.n	bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bc74a:	4629      	mov	r1, r5
   bc74c:	4620      	mov	r0, r4
   bc74e:	f7fc fdcb 	bl	b92e8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bc752:	e7e0      	b.n	bc716 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bc754:	b123      	cbz	r3, bc760 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bc756:	490a      	ldr	r1, [pc, #40]	; (bc780 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bc758:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc75c:	f004 f889 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bc760:	786b      	ldrb	r3, [r5, #1]
   bc762:	782a      	ldrb	r2, [r5, #0]
   bc764:	9700      	str	r7, [sp, #0]
   bc766:	4629      	mov	r1, r5
   bc768:	4620      	mov	r0, r4
   bc76a:	f7ff fef1 	bl	bc550 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bc76e:	e7e8      	b.n	bc742 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bc770:	463e      	mov	r6, r7
   bc772:	e7c6      	b.n	bc702 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bc774:	000c6d0b 	.word	0x000c6d0b
   bc778:	000c6d16 	.word	0x000c6d16
   bc77c:	000c6d2e 	.word	0x000c6d2e
   bc780:	000c6d54 	.word	0x000c6d54

000bc784 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bc784:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bc786:	4b09      	ldr	r3, [pc, #36]	; (bc7ac <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bc788:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc78c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc790:	2300      	movs	r3, #0
   bc792:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bc796:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bc798:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bc79c:	f7ff ff8a 	bl	bc6b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bc7a0:	f1a0 030b 	sub.w	r3, r0, #11
   bc7a4:	4258      	negs	r0, r3
   bc7a6:	4158      	adcs	r0, r3
   bc7a8:	bd38      	pop	{r3, r4, r5, pc}
   bc7aa:	bf00      	nop
   bc7ac:	00010006 	.word	0x00010006

000bc7b0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bc7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7b2:	4615      	mov	r5, r2
   bc7b4:	461a      	mov	r2, r3
   bc7b6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc7b8:	9301      	str	r3, [sp, #4]
   bc7ba:	f7ff ffe3 	bl	bc784 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7be:	b190      	cbz	r0, bc7e6 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7c0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc7c4:	4b09      	ldr	r3, [pc, #36]	; (bc7ec <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bc7c6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc7ca:	2300      	movs	r3, #0
   bc7cc:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7d0:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bc7d2:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc7d4:	4620      	mov	r0, r4
   bc7d6:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc7da:	f7ff ff6b 	bl	bc6b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc7de:	f1a0 030a 	sub.w	r3, r0, #10
   bc7e2:	4258      	negs	r0, r3
   bc7e4:	4158      	adcs	r0, r3
}
   bc7e6:	b003      	add	sp, #12
   bc7e8:	bd30      	pop	{r4, r5, pc}
   bc7ea:	bf00      	nop
   bc7ec:	00140006 	.word	0x00140006

000bc7f0 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bc7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc7f2:	4615      	mov	r5, r2
   bc7f4:	461a      	mov	r2, r3
   bc7f6:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bc7f8:	9301      	str	r3, [sp, #4]
   bc7fa:	f7ff ffc3 	bl	bc784 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bc7fe:	b190      	cbz	r0, bc826 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc800:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc804:	4b09      	ldr	r3, [pc, #36]	; (bc82c <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bc806:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc80a:	2300      	movs	r3, #0
   bc80c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc810:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bc812:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bc814:	4620      	mov	r0, r4
   bc816:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bc81a:	f7ff ff4b 	bl	bc6b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bc81e:	f1a0 030a 	sub.w	r3, r0, #10
   bc822:	4258      	negs	r0, r3
   bc824:	4158      	adcs	r0, r3
}
   bc826:	b003      	add	sp, #12
   bc828:	bd30      	pop	{r4, r5, pc}
   bc82a:	bf00      	nop
   bc82c:	00140006 	.word	0x00140006

000bc830 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bc830:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bc832:	460a      	mov	r2, r1
   bc834:	2100      	movs	r1, #0
   bc836:	f7ff bfbb 	b.w	bc7b0 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bc83c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bc83c:	b510      	push	{r4, lr}
   bc83e:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bc840:	2018      	movs	r0, #24
   bc842:	f7f7 fc28 	bl	b4096 <_Znwj>
   bc846:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bc848:	b960      	cbnz	r0, bc864 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc84a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc84e:	b913      	cbnz	r3, bc856 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bc850:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc854:	b128      	cbz	r0, bc862 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bc856:	4905      	ldr	r1, [pc, #20]	; (bc86c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bc858:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc85c:	f004 f809 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc860:	2000      	movs	r0, #0
}
   bc862:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bc864:	2300      	movs	r3, #0
   bc866:	7503      	strb	r3, [r0, #20]
  return (true);
   bc868:	2001      	movs	r0, #1
   bc86a:	e7fa      	b.n	bc862 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bc86c:	000c6d7d 	.word	0x000c6d7d

000bc870 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bc870:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bc872:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bc874:	4605      	mov	r5, r0
   bc876:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bc878:	b18b      	cbz	r3, bc89e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bc87a:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bc87e:	4b13      	ldr	r3, [pc, #76]	; (bc8cc <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bc880:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bc884:	2300      	movs	r3, #0
   bc886:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc88a:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bc88c:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bc88e:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bc892:	f7ff ff0f 	bl	bc6b4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bc896:	280b      	cmp	r0, #11
   bc898:	d10b      	bne.n	bc8b2 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bc89a:	2401      	movs	r4, #1
   bc89c:	e00d      	b.n	bc8ba <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bc89e:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bc8a0:	f7ff ffcc 	bl	bc83c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bc8a4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bc8a6:	9a01      	ldr	r2, [sp, #4]
   bc8a8:	2c00      	cmp	r4, #0
   bc8aa:	d1e6      	bne.n	bc87a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bc8ac:	4620      	mov	r0, r4
   bc8ae:	b002      	add	sp, #8
   bc8b0:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bc8b2:	f1a0 030d 	sub.w	r3, r0, #13
   bc8b6:	425c      	negs	r4, r3
   bc8b8:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bc8ba:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bc8bc:	b110      	cbz	r0, bc8c4 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bc8be:	2118      	movs	r1, #24
   bc8c0:	f7f7 fbef 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bc8c4:	2300      	movs	r3, #0
   bc8c6:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bc8c8:	e7f0      	b.n	bc8ac <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bc8ca:	bf00      	nop
   bc8cc:	00010006 	.word	0x00010006

000bc8d0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bc8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bc8d2:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bc8d6:	4604      	mov	r4, r0
   bc8d8:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bc8da:	b145      	cbz	r5, bc8ee <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bc8dc:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bc8e0:	b9b1      	cbnz	r1, bc910 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc8e2:	4620      	mov	r0, r4
}
   bc8e4:	b003      	add	sp, #12
   bc8e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc8ea:	f7ff bfc1 	b.w	bc870 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bc8ee:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bc8f0:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bc8f4:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bc8f8:	f002 fcd4 	bl	bf2a4 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bc8fc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bc900:	f002 fcdb 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
   bc904:	9a01      	ldr	r2, [sp, #4]
   bc906:	2800      	cmp	r0, #0
   bc908:	d0e8      	beq.n	bc8dc <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bc90a:	4628      	mov	r0, r5
   bc90c:	b003      	add	sp, #12
   bc90e:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bc910:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bc912:	bf18      	it	ne
   bc914:	2104      	movne	r1, #4
   bc916:	e7e4      	b.n	bc8e2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bc918 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bc918:	b570      	push	{r4, r5, r6, lr}
   bc91a:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bc91c:	2300      	movs	r3, #0
   bc91e:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bc922:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bc926:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bc92a:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bc92e:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bc932:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bc934:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bc938:	b91b      	cbnz	r3, bc942 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bc93a:	f44f 7180 	mov.w	r1, #256	; 0x100
   bc93e:	f7fb fa45 	bl	b7dcc <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bc942:	4620      	mov	r0, r4
   bc944:	f7fc fe5c 	bl	b9600 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bc948:	4631      	mov	r1, r6
   bc94a:	4620      	mov	r0, r4
   bc94c:	f7ff ffc0 	bl	bc8d0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc950:	b110      	cbz	r0, bc958 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bc952:	2501      	movs	r5, #1
}
   bc954:	4628      	mov	r0, r5
   bc956:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc958:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc95c:	b913      	cbnz	r3, bc964 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bc95e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc962:	b123      	cbz	r3, bc96e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bc964:	4917      	ldr	r1, [pc, #92]	; (bc9c4 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bc966:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc96a:	f003 ff82 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc96e:	4631      	mov	r1, r6
   bc970:	4620      	mov	r0, r4
   bc972:	f7ff ffad 	bl	bc8d0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bc976:	2800      	cmp	r0, #0
   bc978:	d1eb      	bne.n	bc952 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc97a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc97e:	b913      	cbnz	r3, bc986 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bc980:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc984:	b123      	cbz	r3, bc990 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bc986:	4910      	ldr	r1, [pc, #64]	; (bc9c8 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bc988:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc98c:	f003 ff71 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bc990:	4631      	mov	r1, r6
   bc992:	4620      	mov	r0, r4
   bc994:	f7ff ff9c 	bl	bc8d0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bc998:	2800      	cmp	r0, #0
   bc99a:	d1da      	bne.n	bc952 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bc99c:	2d00      	cmp	r5, #0
   bc99e:	d0d9      	beq.n	bc954 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc9a0:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bc9a4:	2d00      	cmp	r5, #0
   bc9a6:	d0d5      	beq.n	bc954 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9a8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9ac:	b91b      	cbnz	r3, bc9b6 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bc9ae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc9b2:	2b00      	cmp	r3, #0
   bc9b4:	d0cd      	beq.n	bc952 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bc9b6:	4905      	ldr	r1, [pc, #20]	; (bc9cc <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bc9b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9bc:	f003 ff59 	bl	c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc9c0:	e7c8      	b.n	bc954 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bc9c2:	bf00      	nop
   bc9c4:	000c6da4 	.word	0x000c6da4
   bc9c8:	000c6dc8 	.word	0x000c6dc8
   bc9cc:	000c6deb 	.word	0x000c6deb

000bc9d0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bc9d0:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bc9d2:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bc9d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bc9d8:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bc9da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bc9de:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bc9e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bc9e4:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bc9e6:	2500      	movs	r5, #0
  _width = width;
   bc9e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bc9ec:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bc9ee:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bc9f2:	7303      	strb	r3, [r0, #12]
}
   bc9f4:	bd30      	pop	{r4, r5, pc}

000bc9f6 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc9f6:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bc9f8:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bc9fa:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bc9fc:	b085      	sub	sp, #20
   bc9fe:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bca00:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bca02:	f88d 400c 	strb.w	r4, [sp, #12]
   bca06:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bca08:	460e      	mov	r6, r1
   bca0a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bca0c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bca10:	b140      	cbz	r0, bca24 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bca12:	7b5b      	ldrb	r3, [r3, #13]
   bca14:	9301      	str	r3, [sp, #4]
   bca16:	ab03      	add	r3, sp, #12
   bca18:	9300      	str	r3, [sp, #0]
   bca1a:	2301      	movs	r3, #1
   bca1c:	f000 f90a 	bl	bcc34 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bca20:	b005      	add	sp, #20
   bca22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bca24:	6858      	ldr	r0, [r3, #4]
   bca26:	2800      	cmp	r0, #0
   bca28:	d0fa      	beq.n	bca20 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bca2a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bca2e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bca32:	f1be 0f03 	cmp.w	lr, #3
   bca36:	d10c      	bne.n	bca52 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bca38:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bca3c:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bca40:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bca42:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bca46:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bca4a:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bca4c:	f000 fa2b 	bl	bcea6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bca50:	e7e6      	b.n	bca20 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bca52:	f1be 0f00 	cmp.w	lr, #0
   bca56:	d109      	bne.n	bca6c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bca58:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bca5c:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bca60:	f8cd c000 	str.w	ip, [sp]
   bca64:	ab03      	add	r3, sp, #12
   bca66:	463a      	mov	r2, r7
   bca68:	4631      	mov	r1, r6
   bca6a:	e7ef      	b.n	bca4c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bca6c:	f1be 0f02 	cmp.w	lr, #2
   bca70:	d102      	bne.n	bca78 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bca72:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bca76:	e7f1      	b.n	bca5c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bca78:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bca7c:	bf01      	itttt	eq
   bca7e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bca82:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bca86:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bca8a:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bca8e:	e7e7      	b.n	bca60 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bca90 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bca90:	b4f0      	push	{r4, r5, r6, r7}
   bca92:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bca94:	b902      	cbnz	r2, bca98 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bca96:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bca98:	2a04      	cmp	r2, #4
   bca9a:	d814      	bhi.n	bcac6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bca9c:	f100 050f 	add.w	r5, r0, #15
   bcaa0:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bcaa2:	1884      	adds	r4, r0, r2
   bcaa4:	4629      	mov	r1, r5
   bcaa6:	4284      	cmp	r4, r0
   bcaa8:	d009      	beq.n	bcabe <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bcaaa:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bcaac:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bcaae:	b927      	cbnz	r7, bcaba <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bcab0:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bcab2:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bcab4:	3501      	adds	r5, #1
   bcab6:	3c01      	subs	r4, #1
   bcab8:	e7f5      	b.n	bcaa6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bcaba:	73a6      	strb	r6, [r4, #14]
   bcabc:	e7f9      	b.n	bcab2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bcabe:	4620      	mov	r0, r4
}
   bcac0:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bcac2:	f7ff bf98 	b.w	bc9f6 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bcac6:	2000      	movs	r0, #0
   bcac8:	bcf0      	pop	{r4, r5, r6, r7}
   bcaca:	4770      	bx	lr

000bcacc <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcacc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bcace:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bcad0:	7a85      	ldrb	r5, [r0, #10]
   bcad2:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcad6:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bcad8:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bcada:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bcadc:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bcade:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bcae2:	b140      	cbz	r0, bcaf6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcae4:	2100      	movs	r1, #0
   bcae6:	e9cd 2100 	strd	r2, r1, [sp]
   bcaea:	a903      	add	r1, sp, #12
   bcaec:	7b62      	ldrb	r2, [r4, #13]
   bcaee:	f000 f90f 	bl	bcd10 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bcaf2:	b004      	add	sp, #16
   bcaf4:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bcaf6:	6860      	ldr	r0, [r4, #4]
   bcaf8:	2800      	cmp	r0, #0
   bcafa:	d0fa      	beq.n	bcaf2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcafc:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcafe:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bcb00:	2903      	cmp	r1, #3
   bcb02:	d10d      	bne.n	bcb20 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bcb04:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcb08:	21ff      	movs	r1, #255	; 0xff
   bcb0a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bcb0e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bcb12:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bcb16:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcb18:	a903      	add	r1, sp, #12
   bcb1a:	f000 f9f6 	bl	bcf0a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bcb1e:	e7e8      	b.n	bcaf2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bcb20:	b941      	cbnz	r1, bcb34 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bcb22:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bcb26:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bcb2a:	21ff      	movs	r1, #255	; 0xff
   bcb2c:	e9cd 2100 	strd	r2, r1, [sp]
   bcb30:	4622      	mov	r2, r4
   bcb32:	e7f1      	b.n	bcb18 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bcb34:	2902      	cmp	r1, #2
   bcb36:	d102      	bne.n	bcb3e <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bcb38:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bcb3c:	e7f3      	b.n	bcb26 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bcb3e:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bcb40:	bf02      	ittt	eq
   bcb42:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bcb46:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bcb4a:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bcb4e:	e7ec      	b.n	bcb2a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bcb50 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bcb50:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bcb52:	f100 050f 	add.w	r5, r0, #15
   bcb56:	7b02      	ldrb	r2, [r0, #12]
   bcb58:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bcb5a:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bcb5c:	f7ff ffb6 	bl	bcacc <_ZN23Adafruit_BusIO_Register4readEPhh>
   bcb60:	b178      	cbz	r0, bcb82 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bcb62:	7b22      	ldrb	r2, [r4, #12]
   bcb64:	4629      	mov	r1, r5
   bcb66:	4422      	add	r2, r4
  uint32_t value = 0;
   bcb68:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bcb6a:	42a2      	cmp	r2, r4
   bcb6c:	d00b      	beq.n	bcb86 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bcb6e:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bcb70:	7ba0      	ldrb	r0, [r4, #14]
   bcb72:	b920      	cbnz	r0, bcb7e <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bcb74:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bcb76:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bcb78:	3a01      	subs	r2, #1
   bcb7a:	3101      	adds	r1, #1
   bcb7c:	e7f5      	b.n	bcb6a <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bcb7e:	7808      	ldrb	r0, [r1, #0]
   bcb80:	e7f9      	b.n	bcb76 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bcb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bcb86:	bd38      	pop	{r3, r4, r5, pc}

000bcb88 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bcb88:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bcb8a:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bcb8c:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bcb8e:	7143      	strb	r3, [r0, #5]
}
   bcb90:	bd10      	pop	{r4, pc}

000bcb92 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bcb92:	b510      	push	{r4, lr}
   bcb94:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcb96:	6800      	ldr	r0, [r0, #0]
   bcb98:	f7ff ffda 	bl	bcb50 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bcb9c:	7922      	ldrb	r2, [r4, #4]
   bcb9e:	2301      	movs	r3, #1
   bcba0:	4093      	lsls	r3, r2
  val >>= _shift;
   bcba2:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bcba4:	3b01      	subs	r3, #1
  val >>= _shift;
   bcba6:	40d0      	lsrs	r0, r2
}
   bcba8:	4018      	ands	r0, r3
   bcbaa:	bd10      	pop	{r4, pc}

000bcbac <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcbac:	b570      	push	{r4, r5, r6, lr}
   bcbae:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bcbb0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bcbb2:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bcbb4:	f7ff ffcc 	bl	bcb50 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bcbb8:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bcbba:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bcbbc:	2201      	movs	r2, #1
   bcbbe:	409a      	lsls	r2, r3
   bcbc0:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bcbc2:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bcbc6:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bcbca:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bcbcc:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bcbce:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bcbd2:	4329      	orrs	r1, r5
   bcbd4:	7b02      	ldrb	r2, [r0, #12]
}
   bcbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bcbda:	f7ff bf59 	b.w	bca90 <_ZN23Adafruit_BusIO_Register5writeEmh>

000bcbde <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bcbde:	6042      	str	r2, [r0, #4]
  _begun = false;
   bcbe0:	2200      	movs	r2, #0
   bcbe2:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bcbe4:	2220      	movs	r2, #32
  _addr = addr;
   bcbe6:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bcbe8:	60c2      	str	r2, [r0, #12]
#endif
}
   bcbea:	4770      	bx	lr

000bcbec <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bcbec:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bcbee:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bcbf0:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bcbf2:	b153      	cbz	r3, bcc0a <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bcbf4:	7821      	ldrb	r1, [r4, #0]
   bcbf6:	6860      	ldr	r0, [r4, #4]
   bcbf8:	f002 fb54 	bl	bf2a4 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bcbfc:	6860      	ldr	r0, [r4, #4]
   bcbfe:	f002 fb5c 	bl	bf2ba <_ZN7TwoWire15endTransmissionEv>
   bcc02:	fab0 f080 	clz	r0, r0
   bcc06:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bcc08:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bcc0a:	2101      	movs	r1, #1
   bcc0c:	f000 f803 	bl	bcc16 <_ZN18Adafruit_I2CDevice5beginEb>
   bcc10:	2800      	cmp	r0, #0
   bcc12:	d1ef      	bne.n	bcbf4 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bcc14:	e7f8      	b.n	bcc08 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bcc16 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcc16:	b538      	push	{r3, r4, r5, lr}
   bcc18:	4604      	mov	r4, r0
  _wire->begin();
   bcc1a:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bcc1c:	460d      	mov	r5, r1
  _wire->begin();
   bcc1e:	f002 fb0f 	bl	bf240 <_ZN7TwoWire5beginEv>
  _begun = true;
   bcc22:	2001      	movs	r0, #1
   bcc24:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bcc26:	b125      	cbz	r5, bcc32 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bcc28:	4620      	mov	r0, r4
}
   bcc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bcc2e:	f7ff bfdd 	b.w	bcbec <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bcc32:	bd38      	pop	{r3, r4, r5, pc}

000bcc34 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bcc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcc38:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bcc3c:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bcc3e:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bcc40:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bcc42:	4432      	add	r2, r6
   bcc44:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bcc46:	4604      	mov	r4, r0
   bcc48:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bcc4a:	d902      	bls.n	bcc52 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bcc4c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bcc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bcc52:	7801      	ldrb	r1, [r0, #0]
   bcc54:	6840      	ldr	r0, [r0, #4]
   bcc56:	f002 fb25 	bl	bf2a4 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcc5a:	b97e      	cbnz	r6, bcc7c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bcc5c:	6860      	ldr	r0, [r4, #4]
   bcc5e:	6803      	ldr	r3, [r0, #0]
   bcc60:	462a      	mov	r2, r5
   bcc62:	68db      	ldr	r3, [r3, #12]
   bcc64:	4641      	mov	r1, r8
   bcc66:	4798      	blx	r3
   bcc68:	4285      	cmp	r5, r0
   bcc6a:	d1ef      	bne.n	bcc4c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bcc6c:	6860      	ldr	r0, [r4, #4]
   bcc6e:	4639      	mov	r1, r7
   bcc70:	f002 fb1f 	bl	bf2b2 <_ZN7TwoWire15endTransmissionEh>
   bcc74:	fab0 f080 	clz	r0, r0
   bcc78:	0940      	lsrs	r0, r0, #5
   bcc7a:	e7e8      	b.n	bcc4e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bcc7c:	f1b9 0f00 	cmp.w	r9, #0
   bcc80:	d0ec      	beq.n	bcc5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bcc82:	6860      	ldr	r0, [r4, #4]
   bcc84:	6803      	ldr	r3, [r0, #0]
   bcc86:	4632      	mov	r2, r6
   bcc88:	68db      	ldr	r3, [r3, #12]
   bcc8a:	4649      	mov	r1, r9
   bcc8c:	4798      	blx	r3
   bcc8e:	4286      	cmp	r6, r0
   bcc90:	d1dc      	bne.n	bcc4c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bcc92:	e7e3      	b.n	bcc5c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bcc94 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bcc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcc98:	4615      	mov	r5, r2
   bcc9a:	4604      	mov	r4, r0
   bcc9c:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bcc9e:	b2d2      	uxtb	r2, r2
   bcca0:	7801      	ldrb	r1, [r0, #0]
   bcca2:	6840      	ldr	r0, [r0, #4]
   bcca4:	f002 fae9 	bl	bf27a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bcca8:	4285      	cmp	r5, r0
   bccaa:	d10d      	bne.n	bccc8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bccac:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bccae:	fa1f f887 	uxth.w	r8, r7
   bccb2:	45a8      	cmp	r8, r5
   bccb4:	f107 0701 	add.w	r7, r7, #1
   bccb8:	d209      	bcs.n	bccce <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bccba:	6860      	ldr	r0, [r4, #4]
   bccbc:	6803      	ldr	r3, [r0, #0]
   bccbe:	695b      	ldr	r3, [r3, #20]
   bccc0:	4798      	blx	r3
   bccc2:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bccc6:	e7f2      	b.n	bccae <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bccc8:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bccca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bccce:	2001      	movs	r0, #1
   bccd0:	e7fb      	b.n	bccca <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bccd2 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bccd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bccd6:	4607      	mov	r7, r0
   bccd8:	4688      	mov	r8, r1
   bccda:	4616      	mov	r6, r2
   bccdc:	4699      	mov	r9, r3
  size_t pos = 0;
   bccde:	2500      	movs	r5, #0
  while (pos < len) {
   bcce0:	42b5      	cmp	r5, r6
   bcce2:	d212      	bcs.n	bcd0a <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bcce4:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bcce6:	1b74      	subs	r4, r6, r5
   bcce8:	4294      	cmp	r4, r2
   bccea:	bf28      	it	cs
   bccec:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bccee:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bccf0:	42ab      	cmp	r3, r5
   bccf2:	bf94      	ite	ls
   bccf4:	464b      	movls	r3, r9
   bccf6:	2300      	movhi	r3, #0
   bccf8:	4622      	mov	r2, r4
   bccfa:	eb08 0105 	add.w	r1, r8, r5
   bccfe:	4638      	mov	r0, r7
   bcd00:	f7ff ffc8 	bl	bcc94 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bcd04:	b110      	cbz	r0, bcd0c <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bcd06:	4425      	add	r5, r4
  while (pos < len) {
   bcd08:	e7ea      	b.n	bcce0 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bcd0a:	2001      	movs	r0, #1
}
   bcd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bcd10 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bcd10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bcd12:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bcd14:	2300      	movs	r3, #0
   bcd16:	e9cd 3300 	strd	r3, r3, [sp]
   bcd1a:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bcd1e:	9e06      	ldr	r6, [sp, #24]
   bcd20:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bcd22:	f7ff ff87 	bl	bcc34 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bcd26:	b140      	cbz	r0, bcd3a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bcd28:	2301      	movs	r3, #1
   bcd2a:	4632      	mov	r2, r6
   bcd2c:	4629      	mov	r1, r5
   bcd2e:	4620      	mov	r0, r4
}
   bcd30:	b002      	add	sp, #8
   bcd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bcd36:	f7ff bfcc 	b.w	bccd2 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bcd3a:	b002      	add	sp, #8
   bcd3c:	bd70      	pop	{r4, r5, r6, pc}
	...

000bcd40 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bcd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd44:	4604      	mov	r4, r0
  if (_spi) {
   bcd46:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bcd48:	b085      	sub	sp, #20
   bcd4a:	460d      	mov	r5, r1
  if (_spi) {
   bcd4c:	b140      	cbz	r0, bcd60 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bcd4e:	2300      	movs	r3, #0
   bcd50:	9300      	str	r3, [sp, #0]
   bcd52:	4613      	mov	r3, r2
   bcd54:	460a      	mov	r2, r1
   bcd56:	f003 ff57 	bl	c0c08 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bcd5a:	b005      	add	sp, #20
   bcd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bcd60:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bcd62:	68a0      	ldr	r0, [r4, #8]
   bcd64:	4f48      	ldr	r7, [pc, #288]	; (bce88 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bcd66:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bcd6a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcd6c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bcd6e:	bf0c      	ite	eq
   bcd70:	f04f 0b01 	moveq.w	fp, #1
   bcd74:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bcd78:	ea1b 0f03 	tst.w	fp, r3
   bcd7c:	eb01 0302 	add.w	r3, r1, r2
   bcd80:	bf0c      	ite	eq
   bcd82:	f04f 0901 	moveq.w	r9, #1
   bcd86:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bcd8a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bcd8c:	9303      	str	r3, [sp, #12]
   bcd8e:	9b03      	ldr	r3, [sp, #12]
   bcd90:	42ab      	cmp	r3, r5
   bcd92:	d0e2      	beq.n	bcd5a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bcd94:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bcd98:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bcd9a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bcd9e:	b117      	cbz	r7, bcda6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bcda0:	4638      	mov	r0, r7
   bcda2:	f000 f9c9 	bl	bd138 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bcda6:	7b63      	ldrb	r3, [r4, #13]
   bcda8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bcdac:	d141      	bne.n	bce32 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcdae:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bcdb2:	1c5a      	adds	r2, r3, #1
   bcdb4:	d00f      	beq.n	bcdd6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bcdb6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bcdba:	bf14      	ite	ne
   bcdbc:	2301      	movne	r3, #1
   bcdbe:	2300      	moveq	r3, #0
   bcdc0:	454b      	cmp	r3, r9
   bcdc2:	d008      	beq.n	bcdd6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bcdc4:	6963      	ldr	r3, [r4, #20]
   bcdc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bcdc8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bcdca:	2900      	cmp	r1, #0
   bcdcc:	d02c      	beq.n	bce28 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bcdce:	4302      	orrs	r2, r0
   bcdd0:	601a      	str	r2, [r3, #0]
   bcdd2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bcdd6:	69a1      	ldr	r1, [r4, #24]
   bcdd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bcdda:	680a      	ldr	r2, [r1, #0]
   bcddc:	4313      	orrs	r3, r2
   bcdde:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bcde0:	b117      	cbz	r7, bcde8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bcde2:	4638      	mov	r0, r7
   bcde4:	f000 f9a8 	bl	bd138 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bcde8:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bcdec:	3301      	adds	r3, #1
   bcdee:	d006      	beq.n	bcdfe <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bcdf0:	69e3      	ldr	r3, [r4, #28]
   bcdf2:	681a      	ldr	r2, [r3, #0]
   bcdf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bcdf6:	421a      	tst	r2, r3
            reply |= b;
   bcdf8:	bf18      	it	ne
   bcdfa:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bcdfe:	69a1      	ldr	r1, [r4, #24]
   bce00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bce02:	680a      	ldr	r2, [r1, #0]
   bce04:	ea22 0303 	bic.w	r3, r2, r3
   bce08:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bce0a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bce0e:	3301      	adds	r3, #1
        buffer[i] = reply;
   bce10:	bf18      	it	ne
   bce12:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bce16:	7b23      	ldrb	r3, [r4, #12]
   bce18:	2b00      	cmp	r3, #0
   bce1a:	d132      	bne.n	bce82 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bce1c:	0076      	lsls	r6, r6, #1
   bce1e:	b2f6      	uxtb	r6, r6
   bce20:	2e00      	cmp	r6, #0
   bce22:	d1bc      	bne.n	bcd9e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bce24:	3501      	adds	r5, #1
   bce26:	e7b2      	b.n	bcd8e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bce28:	ea22 0200 	bic.w	r2, r2, r0
   bce2c:	601a      	str	r2, [r3, #0]
   bce2e:	4689      	mov	r9, r1
   bce30:	e7d1      	b.n	bcdd6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bce32:	69a1      	ldr	r1, [r4, #24]
   bce34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bce36:	680a      	ldr	r2, [r1, #0]
   bce38:	4313      	orrs	r3, r2
   bce3a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bce3c:	b117      	cbz	r7, bce44 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bce3e:	4638      	mov	r0, r7
   bce40:	f000 f97a 	bl	bd138 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bce44:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bce48:	3301      	adds	r3, #1
   bce4a:	d008      	beq.n	bce5e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bce4c:	6963      	ldr	r3, [r4, #20]
   bce4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bce50:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bce52:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bce56:	bf14      	ite	ne
   bce58:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bce5a:	438a      	biceq	r2, r1
   bce5c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bce5e:	69a1      	ldr	r1, [r4, #24]
   bce60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bce62:	680a      	ldr	r2, [r1, #0]
   bce64:	ea22 0303 	bic.w	r3, r2, r3
   bce68:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bce6a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bce6e:	3301      	adds	r3, #1
   bce70:	d0cb      	beq.n	bce0a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bce72:	69e3      	ldr	r3, [r4, #28]
   bce74:	681a      	ldr	r2, [r3, #0]
   bce76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bce78:	421a      	tst	r2, r3
            reply |= b;
   bce7a:	bf18      	it	ne
   bce7c:	ea46 0808 	orrne.w	r8, r6, r8
   bce80:	e7c3      	b.n	bce0a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bce82:	0876      	lsrs	r6, r6, #1
   bce84:	e7cc      	b.n	bce20 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bce86:	bf00      	nop
   bce88:	0007a120 	.word	0x0007a120

000bce8c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bce8c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bce8e:	2201      	movs	r2, #1
  uint8_t data = send;
   bce90:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bce94:	f10d 0107 	add.w	r1, sp, #7
   bce98:	f7ff ff52 	bl	bcd40 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bce9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bcea0:	b003      	add	sp, #12
   bcea2:	f85d fb04 	ldr.w	pc, [sp], #4

000bcea6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bcea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bceaa:	4604      	mov	r4, r0
  if (_spi) {
   bceac:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bceae:	460e      	mov	r6, r1
   bceb0:	4617      	mov	r7, r2
   bceb2:	461d      	mov	r5, r3
  if (_spi) {
   bceb4:	b110      	cbz	r0, bcebc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bceb6:	6861      	ldr	r1, [r4, #4]
   bceb8:	f003 fe00 	bl	c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bcebc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcec0:	2100      	movs	r1, #0
   bcec2:	b280      	uxth	r0, r0
   bcec4:	f004 fa85 	bl	c13d2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bcec8:	9b06      	ldr	r3, [sp, #24]
   bceca:	eb05 0803 	add.w	r8, r5, r3
   bcece:	4545      	cmp	r5, r8
   bced0:	d108      	bne.n	bcee4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bced2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bced4:	42b7      	cmp	r7, r6
   bced6:	d00b      	beq.n	bcef0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bced8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcedc:	4620      	mov	r0, r4
   bcede:	f7ff ffd5 	bl	bce8c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bcee2:	e7f7      	b.n	bced4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bcee4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bcee8:	4620      	mov	r0, r4
   bceea:	f7ff ffcf 	bl	bce8c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bceee:	e7ee      	b.n	bcece <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bcef0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcef4:	2101      	movs	r1, #1
   bcef6:	b280      	uxth	r0, r0
   bcef8:	f004 fa6b 	bl	c13d2 <digitalWrite>

  if (_spi) {
   bcefc:	6820      	ldr	r0, [r4, #0]
   bcefe:	b108      	cbz	r0, bcf04 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bcf00:	f003 fdc2 	bl	c0a88 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bcf04:	2001      	movs	r0, #1
   bcf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcf0a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bcf0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcf0e:	4604      	mov	r4, r0
  if (_spi) {
   bcf10:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bcf12:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bcf16:	460e      	mov	r6, r1
   bcf18:	4617      	mov	r7, r2
   bcf1a:	461d      	mov	r5, r3
  if (_spi) {
   bcf1c:	b110      	cbz	r0, bcf24 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bcf1e:	6861      	ldr	r1, [r4, #4]
   bcf20:	f003 fdcc 	bl	c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bcf24:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcf28:	2100      	movs	r1, #0
   bcf2a:	b280      	uxth	r0, r0
   bcf2c:	f004 fa51 	bl	c13d2 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bcf30:	4437      	add	r7, r6
   bcf32:	42be      	cmp	r6, r7
   bcf34:	d10a      	bne.n	bcf4c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bcf36:	9b06      	ldr	r3, [sp, #24]
   bcf38:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bcf3a:	42ae      	cmp	r6, r5
   bcf3c:	d00c      	beq.n	bcf58 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bcf3e:	4641      	mov	r1, r8
   bcf40:	4620      	mov	r0, r4
   bcf42:	f7ff ffa3 	bl	bce8c <_ZN18Adafruit_SPIDevice8transferEh>
   bcf46:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bcf4a:	e7f6      	b.n	bcf3a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bcf4c:	f816 1b01 	ldrb.w	r1, [r6], #1
   bcf50:	4620      	mov	r0, r4
   bcf52:	f7ff ff9b 	bl	bce8c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bcf56:	e7ec      	b.n	bcf32 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bcf58:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bcf5c:	2101      	movs	r1, #1
   bcf5e:	b280      	uxth	r0, r0
   bcf60:	f004 fa37 	bl	c13d2 <digitalWrite>

  if (_spi) {
   bcf64:	6820      	ldr	r0, [r4, #0]
   bcf66:	b108      	cbz	r0, bcf6c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bcf68:	f003 fd8e 	bl	c0a88 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bcf6c:	2001      	movs	r0, #1
   bcf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000bcf74 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bcf74:	b508      	push	{r3, lr}
   bcf76:	4b02      	ldr	r3, [pc, #8]	; (bcf80 <hal_ble_stack_init+0xc>)
   bcf78:	681b      	ldr	r3, [r3, #0]
   bcf7a:	689b      	ldr	r3, [r3, #8]
   bcf7c:	9301      	str	r3, [sp, #4]
   bcf7e:	bd08      	pop	{r3, pc}
   bcf80:	00030278 	.word	0x00030278

000bcf84 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bcf84:	b508      	push	{r3, lr}
   bcf86:	4b02      	ldr	r3, [pc, #8]	; (bcf90 <hal_ble_gap_set_tx_power+0xc>)
   bcf88:	681b      	ldr	r3, [r3, #0]
   bcf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcf8c:	9301      	str	r3, [sp, #4]
   bcf8e:	bd08      	pop	{r3, pc}
   bcf90:	00030278 	.word	0x00030278

000bcf94 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bcf94:	b508      	push	{r3, lr}
   bcf96:	4b02      	ldr	r3, [pc, #8]	; (bcfa0 <hal_ble_gap_set_advertising_data+0xc>)
   bcf98:	681b      	ldr	r3, [r3, #0]
   bcf9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcf9c:	9301      	str	r3, [sp, #4]
   bcf9e:	bd08      	pop	{r3, pc}
   bcfa0:	00030278 	.word	0x00030278

000bcfa4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bcfa4:	b508      	push	{r3, lr}
   bcfa6:	4b02      	ldr	r3, [pc, #8]	; (bcfb0 <hal_ble_gap_set_scan_response_data+0xc>)
   bcfa8:	681b      	ldr	r3, [r3, #0]
   bcfaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcfac:	9301      	str	r3, [sp, #4]
   bcfae:	bd08      	pop	{r3, pc}
   bcfb0:	00030278 	.word	0x00030278

000bcfb4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bcfb4:	b508      	push	{r3, lr}
   bcfb6:	4b02      	ldr	r3, [pc, #8]	; (bcfc0 <hal_ble_gap_start_advertising+0xc>)
   bcfb8:	681b      	ldr	r3, [r3, #0]
   bcfba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bcfbc:	9301      	str	r3, [sp, #4]
   bcfbe:	bd08      	pop	{r3, pc}
   bcfc0:	00030278 	.word	0x00030278

000bcfc4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bcfc4:	b508      	push	{r3, lr}
   bcfc6:	4b03      	ldr	r3, [pc, #12]	; (bcfd4 <hal_ble_gap_disconnect+0x10>)
   bcfc8:	681b      	ldr	r3, [r3, #0]
   bcfca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bcfce:	9301      	str	r3, [sp, #4]
   bcfd0:	bd08      	pop	{r3, pc}
   bcfd2:	0000      	.short	0x0000
   bcfd4:	00030278 	.word	0x00030278

000bcfd8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bcfd8:	b508      	push	{r3, lr}
   bcfda:	4b03      	ldr	r3, [pc, #12]	; (bcfe8 <hal_ble_gatt_server_add_service+0x10>)
   bcfdc:	681b      	ldr	r3, [r3, #0]
   bcfde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bcfe2:	9301      	str	r3, [sp, #4]
   bcfe4:	bd08      	pop	{r3, pc}
   bcfe6:	0000      	.short	0x0000
   bcfe8:	00030278 	.word	0x00030278

000bcfec <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bcfec:	b508      	push	{r3, lr}
   bcfee:	4b03      	ldr	r3, [pc, #12]	; (bcffc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bcff0:	681b      	ldr	r3, [r3, #0]
   bcff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bcff6:	9301      	str	r3, [sp, #4]
   bcff8:	bd08      	pop	{r3, pc}
   bcffa:	0000      	.short	0x0000
   bcffc:	00030278 	.word	0x00030278

000bd000 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd000:	b508      	push	{r3, lr}
   bd002:	4b03      	ldr	r3, [pc, #12]	; (bd010 <hal_ble_gatt_client_write_with_response+0x10>)
   bd004:	681b      	ldr	r3, [r3, #0]
   bd006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bd00a:	9301      	str	r3, [sp, #4]
   bd00c:	bd08      	pop	{r3, pc}
   bd00e:	0000      	.short	0x0000
   bd010:	00030278 	.word	0x00030278

000bd014 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd014:	b508      	push	{r3, lr}
   bd016:	4b03      	ldr	r3, [pc, #12]	; (bd024 <hal_ble_gatt_client_write_without_response+0x10>)
   bd018:	681b      	ldr	r3, [r3, #0]
   bd01a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bd01e:	9301      	str	r3, [sp, #4]
   bd020:	bd08      	pop	{r3, pc}
   bd022:	0000      	.short	0x0000
   bd024:	00030278 	.word	0x00030278

000bd028 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bd028:	b508      	push	{r3, lr}
   bd02a:	4b03      	ldr	r3, [pc, #12]	; (bd038 <hal_ble_gatt_server_add_characteristic+0x10>)
   bd02c:	681b      	ldr	r3, [r3, #0]
   bd02e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bd032:	9301      	str	r3, [sp, #4]
   bd034:	bd08      	pop	{r3, pc}
   bd036:	0000      	.short	0x0000
   bd038:	00030278 	.word	0x00030278

000bd03c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bd03c:	b508      	push	{r3, lr}
   bd03e:	4b03      	ldr	r3, [pc, #12]	; (bd04c <hal_ble_set_callback_on_periph_link_events+0x10>)
   bd040:	681b      	ldr	r3, [r3, #0]
   bd042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bd046:	9301      	str	r3, [sp, #4]
   bd048:	bd08      	pop	{r3, pc}
   bd04a:	0000      	.short	0x0000
   bd04c:	00030278 	.word	0x00030278

000bd050 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd050:	b508      	push	{r3, lr}
   bd052:	4b03      	ldr	r3, [pc, #12]	; (bd060 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bd054:	681b      	ldr	r3, [r3, #0]
   bd056:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bd05a:	9301      	str	r3, [sp, #4]
   bd05c:	bd08      	pop	{r3, pc}
   bd05e:	0000      	.short	0x0000
   bd060:	00030278 	.word	0x00030278

000bd064 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bd064:	b508      	push	{r3, lr}
   bd066:	4b03      	ldr	r3, [pc, #12]	; (bd074 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bd068:	681b      	ldr	r3, [r3, #0]
   bd06a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bd06e:	9301      	str	r3, [sp, #4]
   bd070:	bd08      	pop	{r3, pc}
   bd072:	0000      	.short	0x0000
   bd074:	00030278 	.word	0x00030278

000bd078 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bd078:	b508      	push	{r3, lr}
   bd07a:	4b02      	ldr	r3, [pc, #8]	; (bd084 <os_thread_yield+0xc>)
   bd07c:	681b      	ldr	r3, [r3, #0]
   bd07e:	68db      	ldr	r3, [r3, #12]
   bd080:	9301      	str	r3, [sp, #4]
   bd082:	bd08      	pop	{r3, pc}
   bd084:	00030248 	.word	0x00030248

000bd088 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bd088:	b508      	push	{r3, lr}
   bd08a:	4b02      	ldr	r3, [pc, #8]	; (bd094 <os_thread_scheduling+0xc>)
   bd08c:	681b      	ldr	r3, [r3, #0]
   bd08e:	69db      	ldr	r3, [r3, #28]
   bd090:	9301      	str	r3, [sp, #4]
   bd092:	bd08      	pop	{r3, pc}
   bd094:	00030248 	.word	0x00030248

000bd098 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bd098:	b508      	push	{r3, lr}
   bd09a:	4b02      	ldr	r3, [pc, #8]	; (bd0a4 <os_timer_create+0xc>)
   bd09c:	681b      	ldr	r3, [r3, #0]
   bd09e:	6a1b      	ldr	r3, [r3, #32]
   bd0a0:	9301      	str	r3, [sp, #4]
   bd0a2:	bd08      	pop	{r3, pc}
   bd0a4:	00030248 	.word	0x00030248

000bd0a8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bd0a8:	b508      	push	{r3, lr}
   bd0aa:	4b02      	ldr	r3, [pc, #8]	; (bd0b4 <os_timer_destroy+0xc>)
   bd0ac:	681b      	ldr	r3, [r3, #0]
   bd0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd0b0:	9301      	str	r3, [sp, #4]
   bd0b2:	bd08      	pop	{r3, pc}
   bd0b4:	00030248 	.word	0x00030248

000bd0b8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bd0b8:	b508      	push	{r3, lr}
   bd0ba:	4b02      	ldr	r3, [pc, #8]	; (bd0c4 <os_timer_get_id+0xc>)
   bd0bc:	681b      	ldr	r3, [r3, #0]
   bd0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd0c0:	9301      	str	r3, [sp, #4]
   bd0c2:	bd08      	pop	{r3, pc}
   bd0c4:	00030248 	.word	0x00030248

000bd0c8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bd0c8:	b508      	push	{r3, lr}
   bd0ca:	4b02      	ldr	r3, [pc, #8]	; (bd0d4 <os_timer_change+0xc>)
   bd0cc:	681b      	ldr	r3, [r3, #0]
   bd0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd0d0:	9301      	str	r3, [sp, #4]
   bd0d2:	bd08      	pop	{r3, pc}
   bd0d4:	00030248 	.word	0x00030248

000bd0d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bd0d8:	b508      	push	{r3, lr}
   bd0da:	4b02      	ldr	r3, [pc, #8]	; (bd0e4 <os_mutex_recursive_create+0xc>)
   bd0dc:	681b      	ldr	r3, [r3, #0]
   bd0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd0e0:	9301      	str	r3, [sp, #4]
   bd0e2:	bd08      	pop	{r3, pc}
   bd0e4:	00030248 	.word	0x00030248

000bd0e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bd0e8:	b508      	push	{r3, lr}
   bd0ea:	4b02      	ldr	r3, [pc, #8]	; (bd0f4 <os_mutex_recursive_destroy+0xc>)
   bd0ec:	681b      	ldr	r3, [r3, #0]
   bd0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd0f0:	9301      	str	r3, [sp, #4]
   bd0f2:	bd08      	pop	{r3, pc}
   bd0f4:	00030248 	.word	0x00030248

000bd0f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bd0f8:	b508      	push	{r3, lr}
   bd0fa:	4b02      	ldr	r3, [pc, #8]	; (bd104 <os_mutex_recursive_lock+0xc>)
   bd0fc:	681b      	ldr	r3, [r3, #0]
   bd0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd100:	9301      	str	r3, [sp, #4]
   bd102:	bd08      	pop	{r3, pc}
   bd104:	00030248 	.word	0x00030248

000bd108 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bd108:	b508      	push	{r3, lr}
   bd10a:	4b02      	ldr	r3, [pc, #8]	; (bd114 <os_mutex_recursive_unlock+0xc>)
   bd10c:	681b      	ldr	r3, [r3, #0]
   bd10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd110:	9301      	str	r3, [sp, #4]
   bd112:	bd08      	pop	{r3, pc}
   bd114:	00030248 	.word	0x00030248

000bd118 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bd118:	b508      	push	{r3, lr}
   bd11a:	4b02      	ldr	r3, [pc, #8]	; (bd124 <os_timer_set_id+0xc>)
   bd11c:	681b      	ldr	r3, [r3, #0]
   bd11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd120:	9301      	str	r3, [sp, #4]
   bd122:	bd08      	pop	{r3, pc}
   bd124:	00030248 	.word	0x00030248

000bd128 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bd128:	b508      	push	{r3, lr}
   bd12a:	4b02      	ldr	r3, [pc, #8]	; (bd134 <HAL_RNG_GetRandomNumber+0xc>)
   bd12c:	681b      	ldr	r3, [r3, #0]
   bd12e:	685b      	ldr	r3, [r3, #4]
   bd130:	9301      	str	r3, [sp, #4]
   bd132:	bd08      	pop	{r3, pc}
   bd134:	00030218 	.word	0x00030218

000bd138 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bd138:	b508      	push	{r3, lr}
   bd13a:	4b02      	ldr	r3, [pc, #8]	; (bd144 <HAL_Delay_Microseconds+0xc>)
   bd13c:	681b      	ldr	r3, [r3, #0]
   bd13e:	68db      	ldr	r3, [r3, #12]
   bd140:	9301      	str	r3, [sp, #4]
   bd142:	bd08      	pop	{r3, pc}
   bd144:	00030218 	.word	0x00030218

000bd148 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bd148:	b508      	push	{r3, lr}
   bd14a:	4b02      	ldr	r3, [pc, #8]	; (bd154 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bd14c:	681b      	ldr	r3, [r3, #0]
   bd14e:	691b      	ldr	r3, [r3, #16]
   bd150:	9301      	str	r3, [sp, #4]
   bd152:	bd08      	pop	{r3, pc}
   bd154:	00030218 	.word	0x00030218

000bd158 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bd158:	b508      	push	{r3, lr}
   bd15a:	4b02      	ldr	r3, [pc, #8]	; (bd164 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bd15c:	681b      	ldr	r3, [r3, #0]
   bd15e:	695b      	ldr	r3, [r3, #20]
   bd160:	9301      	str	r3, [sp, #4]
   bd162:	bd08      	pop	{r3, pc}
   bd164:	00030218 	.word	0x00030218

000bd168 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bd168:	b508      	push	{r3, lr}
   bd16a:	4b02      	ldr	r3, [pc, #8]	; (bd174 <hal_rtc_time_is_valid+0xc>)
   bd16c:	681b      	ldr	r3, [r3, #0]
   bd16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd170:	9301      	str	r3, [sp, #4]
   bd172:	bd08      	pop	{r3, pc}
   bd174:	00030218 	.word	0x00030218

000bd178 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bd178:	b508      	push	{r3, lr}
   bd17a:	4b02      	ldr	r3, [pc, #8]	; (bd184 <hal_rtc_get_time+0xc>)
   bd17c:	681b      	ldr	r3, [r3, #0]
   bd17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bd180:	9301      	str	r3, [sp, #4]
   bd182:	bd08      	pop	{r3, pc}
   bd184:	00030218 	.word	0x00030218

000bd188 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bd188:	b508      	push	{r3, lr}
   bd18a:	4b02      	ldr	r3, [pc, #8]	; (bd194 <HAL_Validate_Pin_Function+0xc>)
   bd18c:	681b      	ldr	r3, [r3, #0]
   bd18e:	685b      	ldr	r3, [r3, #4]
   bd190:	9301      	str	r3, [sp, #4]
   bd192:	bd08      	pop	{r3, pc}
   bd194:	0003022c 	.word	0x0003022c

000bd198 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bd198:	b508      	push	{r3, lr}
   bd19a:	4b02      	ldr	r3, [pc, #8]	; (bd1a4 <HAL_Pin_Mode+0xc>)
   bd19c:	681b      	ldr	r3, [r3, #0]
   bd19e:	689b      	ldr	r3, [r3, #8]
   bd1a0:	9301      	str	r3, [sp, #4]
   bd1a2:	bd08      	pop	{r3, pc}
   bd1a4:	0003022c 	.word	0x0003022c

000bd1a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bd1a8:	b508      	push	{r3, lr}
   bd1aa:	4b02      	ldr	r3, [pc, #8]	; (bd1b4 <HAL_Get_Pin_Mode+0xc>)
   bd1ac:	681b      	ldr	r3, [r3, #0]
   bd1ae:	68db      	ldr	r3, [r3, #12]
   bd1b0:	9301      	str	r3, [sp, #4]
   bd1b2:	bd08      	pop	{r3, pc}
   bd1b4:	0003022c 	.word	0x0003022c

000bd1b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bd1b8:	b508      	push	{r3, lr}
   bd1ba:	4b02      	ldr	r3, [pc, #8]	; (bd1c4 <HAL_GPIO_Write+0xc>)
   bd1bc:	681b      	ldr	r3, [r3, #0]
   bd1be:	691b      	ldr	r3, [r3, #16]
   bd1c0:	9301      	str	r3, [sp, #4]
   bd1c2:	bd08      	pop	{r3, pc}
   bd1c4:	0003022c 	.word	0x0003022c

000bd1c8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bd1c8:	b508      	push	{r3, lr}
   bd1ca:	4b02      	ldr	r3, [pc, #8]	; (bd1d4 <HAL_Interrupts_Enable_All+0xc>)
   bd1cc:	681b      	ldr	r3, [r3, #0]
   bd1ce:	6a1b      	ldr	r3, [r3, #32]
   bd1d0:	9301      	str	r3, [sp, #4]
   bd1d2:	bd08      	pop	{r3, pc}
   bd1d4:	0003022c 	.word	0x0003022c

000bd1d8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bd1d8:	b508      	push	{r3, lr}
   bd1da:	4b02      	ldr	r3, [pc, #8]	; (bd1e4 <HAL_Interrupts_Disable_All+0xc>)
   bd1dc:	681b      	ldr	r3, [r3, #0]
   bd1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd1e0:	9301      	str	r3, [sp, #4]
   bd1e2:	bd08      	pop	{r3, pc}
   bd1e4:	0003022c 	.word	0x0003022c

000bd1e8 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bd1e8:	b508      	push	{r3, lr}
   bd1ea:	4b02      	ldr	r3, [pc, #8]	; (bd1f4 <hal_adc_read+0xc>)
   bd1ec:	681b      	ldr	r3, [r3, #0]
   bd1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd1f0:	9301      	str	r3, [sp, #4]
   bd1f2:	bd08      	pop	{r3, pc}
   bd1f4:	0003022c 	.word	0x0003022c

000bd1f8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bd1f8:	b508      	push	{r3, lr}
   bd1fa:	4b02      	ldr	r3, [pc, #8]	; (bd204 <hal_i2c_set_speed+0xc>)
   bd1fc:	681b      	ldr	r3, [r3, #0]
   bd1fe:	681b      	ldr	r3, [r3, #0]
   bd200:	9301      	str	r3, [sp, #4]
   bd202:	bd08      	pop	{r3, pc}
   bd204:	00030228 	.word	0x00030228

000bd208 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bd208:	b508      	push	{r3, lr}
   bd20a:	4b02      	ldr	r3, [pc, #8]	; (bd214 <hal_i2c_begin+0xc>)
   bd20c:	681b      	ldr	r3, [r3, #0]
   bd20e:	68db      	ldr	r3, [r3, #12]
   bd210:	9301      	str	r3, [sp, #4]
   bd212:	bd08      	pop	{r3, pc}
   bd214:	00030228 	.word	0x00030228

000bd218 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bd218:	b508      	push	{r3, lr}
   bd21a:	4b02      	ldr	r3, [pc, #8]	; (bd224 <hal_i2c_begin_transmission+0xc>)
   bd21c:	681b      	ldr	r3, [r3, #0]
   bd21e:	699b      	ldr	r3, [r3, #24]
   bd220:	9301      	str	r3, [sp, #4]
   bd222:	bd08      	pop	{r3, pc}
   bd224:	00030228 	.word	0x00030228

000bd228 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bd228:	b508      	push	{r3, lr}
   bd22a:	4b02      	ldr	r3, [pc, #8]	; (bd234 <hal_i2c_end_transmission+0xc>)
   bd22c:	681b      	ldr	r3, [r3, #0]
   bd22e:	69db      	ldr	r3, [r3, #28]
   bd230:	9301      	str	r3, [sp, #4]
   bd232:	bd08      	pop	{r3, pc}
   bd234:	00030228 	.word	0x00030228

000bd238 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bd238:	b508      	push	{r3, lr}
   bd23a:	4b02      	ldr	r3, [pc, #8]	; (bd244 <hal_i2c_write+0xc>)
   bd23c:	681b      	ldr	r3, [r3, #0]
   bd23e:	6a1b      	ldr	r3, [r3, #32]
   bd240:	9301      	str	r3, [sp, #4]
   bd242:	bd08      	pop	{r3, pc}
   bd244:	00030228 	.word	0x00030228

000bd248 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bd248:	b508      	push	{r3, lr}
   bd24a:	4b02      	ldr	r3, [pc, #8]	; (bd254 <hal_i2c_available+0xc>)
   bd24c:	681b      	ldr	r3, [r3, #0]
   bd24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd250:	9301      	str	r3, [sp, #4]
   bd252:	bd08      	pop	{r3, pc}
   bd254:	00030228 	.word	0x00030228

000bd258 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bd258:	b508      	push	{r3, lr}
   bd25a:	4b02      	ldr	r3, [pc, #8]	; (bd264 <hal_i2c_read+0xc>)
   bd25c:	681b      	ldr	r3, [r3, #0]
   bd25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd260:	9301      	str	r3, [sp, #4]
   bd262:	bd08      	pop	{r3, pc}
   bd264:	00030228 	.word	0x00030228

000bd268 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bd268:	b508      	push	{r3, lr}
   bd26a:	4b02      	ldr	r3, [pc, #8]	; (bd274 <hal_i2c_peek+0xc>)
   bd26c:	681b      	ldr	r3, [r3, #0]
   bd26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd270:	9301      	str	r3, [sp, #4]
   bd272:	bd08      	pop	{r3, pc}
   bd274:	00030228 	.word	0x00030228

000bd278 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bd278:	b508      	push	{r3, lr}
   bd27a:	4b02      	ldr	r3, [pc, #8]	; (bd284 <hal_i2c_flush+0xc>)
   bd27c:	681b      	ldr	r3, [r3, #0]
   bd27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd280:	9301      	str	r3, [sp, #4]
   bd282:	bd08      	pop	{r3, pc}
   bd284:	00030228 	.word	0x00030228

000bd288 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bd288:	b508      	push	{r3, lr}
   bd28a:	4b02      	ldr	r3, [pc, #8]	; (bd294 <hal_i2c_is_enabled+0xc>)
   bd28c:	681b      	ldr	r3, [r3, #0]
   bd28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd290:	9301      	str	r3, [sp, #4]
   bd292:	bd08      	pop	{r3, pc}
   bd294:	00030228 	.word	0x00030228

000bd298 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bd298:	b508      	push	{r3, lr}
   bd29a:	4b02      	ldr	r3, [pc, #8]	; (bd2a4 <hal_i2c_init+0xc>)
   bd29c:	681b      	ldr	r3, [r3, #0]
   bd29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd2a0:	9301      	str	r3, [sp, #4]
   bd2a2:	bd08      	pop	{r3, pc}
   bd2a4:	00030228 	.word	0x00030228

000bd2a8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bd2a8:	b508      	push	{r3, lr}
   bd2aa:	4b02      	ldr	r3, [pc, #8]	; (bd2b4 <hal_i2c_request_ex+0xc>)
   bd2ac:	681b      	ldr	r3, [r3, #0]
   bd2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd2b0:	9301      	str	r3, [sp, #4]
   bd2b2:	bd08      	pop	{r3, pc}
   bd2b4:	00030228 	.word	0x00030228

000bd2b8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bd2b8:	b508      	push	{r3, lr}
   bd2ba:	4b02      	ldr	r3, [pc, #8]	; (bd2c4 <inet_inet_ntop+0xc>)
   bd2bc:	681b      	ldr	r3, [r3, #0]
   bd2be:	695b      	ldr	r3, [r3, #20]
   bd2c0:	9301      	str	r3, [sp, #4]
   bd2c2:	bd08      	pop	{r3, pc}
   bd2c4:	00030264 	.word	0x00030264

000bd2c8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bd2c8:	b508      	push	{r3, lr}
   bd2ca:	4b02      	ldr	r3, [pc, #8]	; (bd2d4 <netdb_freeaddrinfo+0xc>)
   bd2cc:	681b      	ldr	r3, [r3, #0]
   bd2ce:	689b      	ldr	r3, [r3, #8]
   bd2d0:	9301      	str	r3, [sp, #4]
   bd2d2:	bd08      	pop	{r3, pc}
   bd2d4:	00030268 	.word	0x00030268

000bd2d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bd2d8:	b508      	push	{r3, lr}
   bd2da:	4b02      	ldr	r3, [pc, #8]	; (bd2e4 <netdb_getaddrinfo+0xc>)
   bd2dc:	681b      	ldr	r3, [r3, #0]
   bd2de:	68db      	ldr	r3, [r3, #12]
   bd2e0:	9301      	str	r3, [sp, #4]
   bd2e2:	bd08      	pop	{r3, pc}
   bd2e4:	00030268 	.word	0x00030268

000bd2e8 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bd2e8:	b508      	push	{r3, lr}
   bd2ea:	4b02      	ldr	r3, [pc, #8]	; (bd2f4 <HAL_Servo_Attach+0xc>)
   bd2ec:	681b      	ldr	r3, [r3, #0]
   bd2ee:	691b      	ldr	r3, [r3, #16]
   bd2f0:	9301      	str	r3, [sp, #4]
   bd2f2:	bd08      	pop	{r3, pc}
   bd2f4:	00030224 	.word	0x00030224

000bd2f8 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bd2f8:	b508      	push	{r3, lr}
   bd2fa:	4b02      	ldr	r3, [pc, #8]	; (bd304 <HAL_Servo_Detach+0xc>)
   bd2fc:	681b      	ldr	r3, [r3, #0]
   bd2fe:	695b      	ldr	r3, [r3, #20]
   bd300:	9301      	str	r3, [sp, #4]
   bd302:	bd08      	pop	{r3, pc}
   bd304:	00030224 	.word	0x00030224

000bd308 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bd308:	b508      	push	{r3, lr}
   bd30a:	4b02      	ldr	r3, [pc, #8]	; (bd314 <HAL_Servo_Write_Pulse_Width+0xc>)
   bd30c:	681b      	ldr	r3, [r3, #0]
   bd30e:	699b      	ldr	r3, [r3, #24]
   bd310:	9301      	str	r3, [sp, #4]
   bd312:	bd08      	pop	{r3, pc}
   bd314:	00030224 	.word	0x00030224

000bd318 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bd318:	b508      	push	{r3, lr}
   bd31a:	4b02      	ldr	r3, [pc, #8]	; (bd324 <hal_spi_begin+0xc>)
   bd31c:	681b      	ldr	r3, [r3, #0]
   bd31e:	681b      	ldr	r3, [r3, #0]
   bd320:	9301      	str	r3, [sp, #4]
   bd322:	bd08      	pop	{r3, pc}
   bd324:	00030230 	.word	0x00030230

000bd328 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   bd328:	b508      	push	{r3, lr}
   bd32a:	4b02      	ldr	r3, [pc, #8]	; (bd334 <hal_spi_set_clock_divider+0xc>)
   bd32c:	681b      	ldr	r3, [r3, #0]
   bd32e:	691b      	ldr	r3, [r3, #16]
   bd330:	9301      	str	r3, [sp, #4]
   bd332:	bd08      	pop	{r3, pc}
   bd334:	00030230 	.word	0x00030230

000bd338 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bd338:	b508      	push	{r3, lr}
   bd33a:	4b02      	ldr	r3, [pc, #8]	; (bd344 <hal_spi_transfer+0xc>)
   bd33c:	681b      	ldr	r3, [r3, #0]
   bd33e:	695b      	ldr	r3, [r3, #20]
   bd340:	9301      	str	r3, [sp, #4]
   bd342:	bd08      	pop	{r3, pc}
   bd344:	00030230 	.word	0x00030230

000bd348 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bd348:	b508      	push	{r3, lr}
   bd34a:	4b02      	ldr	r3, [pc, #8]	; (bd354 <hal_spi_init+0xc>)
   bd34c:	681b      	ldr	r3, [r3, #0]
   bd34e:	69db      	ldr	r3, [r3, #28]
   bd350:	9301      	str	r3, [sp, #4]
   bd352:	bd08      	pop	{r3, pc}
   bd354:	00030230 	.word	0x00030230

000bd358 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bd358:	b508      	push	{r3, lr}
   bd35a:	4b02      	ldr	r3, [pc, #8]	; (bd364 <hal_spi_is_enabled+0xc>)
   bd35c:	681b      	ldr	r3, [r3, #0]
   bd35e:	6a1b      	ldr	r3, [r3, #32]
   bd360:	9301      	str	r3, [sp, #4]
   bd362:	bd08      	pop	{r3, pc}
   bd364:	00030230 	.word	0x00030230

000bd368 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bd368:	b508      	push	{r3, lr}
   bd36a:	4b02      	ldr	r3, [pc, #8]	; (bd374 <hal_spi_info+0xc>)
   bd36c:	681b      	ldr	r3, [r3, #0]
   bd36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd370:	9301      	str	r3, [sp, #4]
   bd372:	bd08      	pop	{r3, pc}
   bd374:	00030230 	.word	0x00030230

000bd378 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bd378:	b508      	push	{r3, lr}
   bd37a:	4b02      	ldr	r3, [pc, #8]	; (bd384 <hal_spi_transfer_dma+0xc>)
   bd37c:	681b      	ldr	r3, [r3, #0]
   bd37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd380:	9301      	str	r3, [sp, #4]
   bd382:	bd08      	pop	{r3, pc}
   bd384:	00030230 	.word	0x00030230

000bd388 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   bd388:	b508      	push	{r3, lr}
   bd38a:	4b02      	ldr	r3, [pc, #8]	; (bd394 <hal_spi_begin_ext+0xc>)
   bd38c:	681b      	ldr	r3, [r3, #0]
   bd38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd390:	9301      	str	r3, [sp, #4]
   bd392:	bd08      	pop	{r3, pc}
   bd394:	00030230 	.word	0x00030230

000bd398 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bd398:	b508      	push	{r3, lr}
   bd39a:	4b02      	ldr	r3, [pc, #8]	; (bd3a4 <hal_spi_transfer_dma_status+0xc>)
   bd39c:	681b      	ldr	r3, [r3, #0]
   bd39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bd3a0:	9301      	str	r3, [sp, #4]
   bd3a2:	bd08      	pop	{r3, pc}
   bd3a4:	00030230 	.word	0x00030230

000bd3a8 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bd3a8:	b508      	push	{r3, lr}
   bd3aa:	4b02      	ldr	r3, [pc, #8]	; (bd3b4 <hal_spi_set_settings+0xc>)
   bd3ac:	681b      	ldr	r3, [r3, #0]
   bd3ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd3b0:	9301      	str	r3, [sp, #4]
   bd3b2:	bd08      	pop	{r3, pc}
   bd3b4:	00030230 	.word	0x00030230

000bd3b8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bd3b8:	b508      	push	{r3, lr}
   bd3ba:	4b02      	ldr	r3, [pc, #8]	; (bd3c4 <hal_spi_acquire+0xc>)
   bd3bc:	681b      	ldr	r3, [r3, #0]
   bd3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd3c0:	9301      	str	r3, [sp, #4]
   bd3c2:	bd08      	pop	{r3, pc}
   bd3c4:	00030230 	.word	0x00030230

000bd3c8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bd3c8:	b508      	push	{r3, lr}
   bd3ca:	4b02      	ldr	r3, [pc, #8]	; (bd3d4 <hal_spi_release+0xc>)
   bd3cc:	681b      	ldr	r3, [r3, #0]
   bd3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd3d0:	9301      	str	r3, [sp, #4]
   bd3d2:	bd08      	pop	{r3, pc}
   bd3d4:	00030230 	.word	0x00030230

000bd3d8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bd3d8:	b508      	push	{r3, lr}
   bd3da:	4b02      	ldr	r3, [pc, #8]	; (bd3e4 <hal_usart_end+0xc>)
   bd3dc:	681b      	ldr	r3, [r3, #0]
   bd3de:	689b      	ldr	r3, [r3, #8]
   bd3e0:	9301      	str	r3, [sp, #4]
   bd3e2:	bd08      	pop	{r3, pc}
   bd3e4:	0003023c 	.word	0x0003023c

000bd3e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bd3e8:	b508      	push	{r3, lr}
   bd3ea:	4b02      	ldr	r3, [pc, #8]	; (bd3f4 <hal_usart_write+0xc>)
   bd3ec:	681b      	ldr	r3, [r3, #0]
   bd3ee:	68db      	ldr	r3, [r3, #12]
   bd3f0:	9301      	str	r3, [sp, #4]
   bd3f2:	bd08      	pop	{r3, pc}
   bd3f4:	0003023c 	.word	0x0003023c

000bd3f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bd3f8:	b508      	push	{r3, lr}
   bd3fa:	4b02      	ldr	r3, [pc, #8]	; (bd404 <hal_usart_available+0xc>)
   bd3fc:	681b      	ldr	r3, [r3, #0]
   bd3fe:	691b      	ldr	r3, [r3, #16]
   bd400:	9301      	str	r3, [sp, #4]
   bd402:	bd08      	pop	{r3, pc}
   bd404:	0003023c 	.word	0x0003023c

000bd408 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bd408:	b508      	push	{r3, lr}
   bd40a:	4b02      	ldr	r3, [pc, #8]	; (bd414 <hal_usart_read+0xc>)
   bd40c:	681b      	ldr	r3, [r3, #0]
   bd40e:	695b      	ldr	r3, [r3, #20]
   bd410:	9301      	str	r3, [sp, #4]
   bd412:	bd08      	pop	{r3, pc}
   bd414:	0003023c 	.word	0x0003023c

000bd418 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bd418:	b508      	push	{r3, lr}
   bd41a:	4b02      	ldr	r3, [pc, #8]	; (bd424 <hal_usart_peek+0xc>)
   bd41c:	681b      	ldr	r3, [r3, #0]
   bd41e:	699b      	ldr	r3, [r3, #24]
   bd420:	9301      	str	r3, [sp, #4]
   bd422:	bd08      	pop	{r3, pc}
   bd424:	0003023c 	.word	0x0003023c

000bd428 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bd428:	b508      	push	{r3, lr}
   bd42a:	4b02      	ldr	r3, [pc, #8]	; (bd434 <hal_usart_flush+0xc>)
   bd42c:	681b      	ldr	r3, [r3, #0]
   bd42e:	69db      	ldr	r3, [r3, #28]
   bd430:	9301      	str	r3, [sp, #4]
   bd432:	bd08      	pop	{r3, pc}
   bd434:	0003023c 	.word	0x0003023c

000bd438 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bd438:	b508      	push	{r3, lr}
   bd43a:	4b02      	ldr	r3, [pc, #8]	; (bd444 <hal_usart_is_enabled+0xc>)
   bd43c:	681b      	ldr	r3, [r3, #0]
   bd43e:	6a1b      	ldr	r3, [r3, #32]
   bd440:	9301      	str	r3, [sp, #4]
   bd442:	bd08      	pop	{r3, pc}
   bd444:	0003023c 	.word	0x0003023c

000bd448 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bd448:	b508      	push	{r3, lr}
   bd44a:	4b02      	ldr	r3, [pc, #8]	; (bd454 <hal_usart_available_data_for_write+0xc>)
   bd44c:	681b      	ldr	r3, [r3, #0]
   bd44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bd450:	9301      	str	r3, [sp, #4]
   bd452:	bd08      	pop	{r3, pc}
   bd454:	0003023c 	.word	0x0003023c

000bd458 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bd458:	b508      	push	{r3, lr}
   bd45a:	4b02      	ldr	r3, [pc, #8]	; (bd464 <hal_usart_begin_config+0xc>)
   bd45c:	681b      	ldr	r3, [r3, #0]
   bd45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd460:	9301      	str	r3, [sp, #4]
   bd462:	bd08      	pop	{r3, pc}
   bd464:	0003023c 	.word	0x0003023c

000bd468 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bd468:	b508      	push	{r3, lr}
   bd46a:	4b02      	ldr	r3, [pc, #8]	; (bd474 <hal_usart_init_ex+0xc>)
   bd46c:	681b      	ldr	r3, [r3, #0]
   bd46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd470:	9301      	str	r3, [sp, #4]
   bd472:	bd08      	pop	{r3, pc}
   bd474:	0003023c 	.word	0x0003023c

000bd478 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bd478:	b508      	push	{r3, lr}
   bd47a:	4b02      	ldr	r3, [pc, #8]	; (bd484 <HAL_USB_USART_Init+0xc>)
   bd47c:	681b      	ldr	r3, [r3, #0]
   bd47e:	681b      	ldr	r3, [r3, #0]
   bd480:	9301      	str	r3, [sp, #4]
   bd482:	bd08      	pop	{r3, pc}
   bd484:	0003024c 	.word	0x0003024c

000bd488 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bd488:	b508      	push	{r3, lr}
   bd48a:	4b02      	ldr	r3, [pc, #8]	; (bd494 <HAL_USB_USART_Begin+0xc>)
   bd48c:	681b      	ldr	r3, [r3, #0]
   bd48e:	685b      	ldr	r3, [r3, #4]
   bd490:	9301      	str	r3, [sp, #4]
   bd492:	bd08      	pop	{r3, pc}
   bd494:	0003024c 	.word	0x0003024c

000bd498 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bd498:	b508      	push	{r3, lr}
   bd49a:	4b02      	ldr	r3, [pc, #8]	; (bd4a4 <HAL_USB_USART_End+0xc>)
   bd49c:	681b      	ldr	r3, [r3, #0]
   bd49e:	689b      	ldr	r3, [r3, #8]
   bd4a0:	9301      	str	r3, [sp, #4]
   bd4a2:	bd08      	pop	{r3, pc}
   bd4a4:	0003024c 	.word	0x0003024c

000bd4a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bd4a8:	b508      	push	{r3, lr}
   bd4aa:	4b02      	ldr	r3, [pc, #8]	; (bd4b4 <HAL_USB_USART_Available_Data+0xc>)
   bd4ac:	681b      	ldr	r3, [r3, #0]
   bd4ae:	691b      	ldr	r3, [r3, #16]
   bd4b0:	9301      	str	r3, [sp, #4]
   bd4b2:	bd08      	pop	{r3, pc}
   bd4b4:	0003024c 	.word	0x0003024c

000bd4b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bd4b8:	b508      	push	{r3, lr}
   bd4ba:	4b02      	ldr	r3, [pc, #8]	; (bd4c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bd4bc:	681b      	ldr	r3, [r3, #0]
   bd4be:	695b      	ldr	r3, [r3, #20]
   bd4c0:	9301      	str	r3, [sp, #4]
   bd4c2:	bd08      	pop	{r3, pc}
   bd4c4:	0003024c 	.word	0x0003024c

000bd4c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd4c8:	b508      	push	{r3, lr}
   bd4ca:	4b02      	ldr	r3, [pc, #8]	; (bd4d4 <HAL_USB_USART_Receive_Data+0xc>)
   bd4cc:	681b      	ldr	r3, [r3, #0]
   bd4ce:	699b      	ldr	r3, [r3, #24]
   bd4d0:	9301      	str	r3, [sp, #4]
   bd4d2:	bd08      	pop	{r3, pc}
   bd4d4:	0003024c 	.word	0x0003024c

000bd4d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bd4d8:	b508      	push	{r3, lr}
   bd4da:	4b02      	ldr	r3, [pc, #8]	; (bd4e4 <HAL_USB_USART_Send_Data+0xc>)
   bd4dc:	681b      	ldr	r3, [r3, #0]
   bd4de:	69db      	ldr	r3, [r3, #28]
   bd4e0:	9301      	str	r3, [sp, #4]
   bd4e2:	bd08      	pop	{r3, pc}
   bd4e4:	0003024c 	.word	0x0003024c

000bd4e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bd4e8:	b508      	push	{r3, lr}
   bd4ea:	4b02      	ldr	r3, [pc, #8]	; (bd4f4 <HAL_USB_USART_Flush_Data+0xc>)
   bd4ec:	681b      	ldr	r3, [r3, #0]
   bd4ee:	6a1b      	ldr	r3, [r3, #32]
   bd4f0:	9301      	str	r3, [sp, #4]
   bd4f2:	bd08      	pop	{r3, pc}
   bd4f4:	0003024c 	.word	0x0003024c

000bd4f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bd4f8:	b508      	push	{r3, lr}
   bd4fa:	4b02      	ldr	r3, [pc, #8]	; (bd504 <panic_+0xc>)
   bd4fc:	681b      	ldr	r3, [r3, #0]
   bd4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd500:	9301      	str	r3, [sp, #4]
   bd502:	bd08      	pop	{r3, pc}
   bd504:	00030260 	.word	0x00030260

000bd508 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bd508:	b508      	push	{r3, lr}
   bd50a:	4b02      	ldr	r3, [pc, #8]	; (bd514 <log_message+0xc>)
   bd50c:	681b      	ldr	r3, [r3, #0]
   bd50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd510:	9301      	str	r3, [sp, #4]
   bd512:	bd08      	pop	{r3, pc}
   bd514:	00030260 	.word	0x00030260

000bd518 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd518:	b508      	push	{r3, lr}
   bd51a:	4b02      	ldr	r3, [pc, #8]	; (bd524 <log_level_name+0xc>)
   bd51c:	681b      	ldr	r3, [r3, #0]
   bd51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd520:	9301      	str	r3, [sp, #4]
   bd522:	bd08      	pop	{r3, pc}
   bd524:	00030260 	.word	0x00030260

000bd528 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd528:	b508      	push	{r3, lr}
   bd52a:	4b02      	ldr	r3, [pc, #8]	; (bd534 <log_set_callbacks+0xc>)
   bd52c:	681b      	ldr	r3, [r3, #0]
   bd52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd530:	9301      	str	r3, [sp, #4]
   bd532:	bd08      	pop	{r3, pc}
   bd534:	00030260 	.word	0x00030260

000bd538 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   bd538:	b508      	push	{r3, lr}
   bd53a:	4b03      	ldr	r3, [pc, #12]	; (bd548 <led_set_status_active+0x10>)
   bd53c:	681b      	ldr	r3, [r3, #0]
   bd53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bd542:	9301      	str	r3, [sp, #4]
   bd544:	bd08      	pop	{r3, pc}
   bd546:	0000      	.short	0x0000
   bd548:	00030260 	.word	0x00030260

000bd54c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd54c:	b508      	push	{r3, lr}
   bd54e:	4b02      	ldr	r3, [pc, #8]	; (bd558 <system_mode+0xc>)
   bd550:	681b      	ldr	r3, [r3, #0]
   bd552:	681b      	ldr	r3, [r3, #0]
   bd554:	9301      	str	r3, [sp, #4]
   bd556:	bd08      	pop	{r3, pc}
   bd558:	00030220 	.word	0x00030220

000bd55c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd55c:	b508      	push	{r3, lr}
   bd55e:	4b02      	ldr	r3, [pc, #8]	; (bd568 <set_system_mode+0xc>)
   bd560:	681b      	ldr	r3, [r3, #0]
   bd562:	685b      	ldr	r3, [r3, #4]
   bd564:	9301      	str	r3, [sp, #4]
   bd566:	bd08      	pop	{r3, pc}
   bd568:	00030220 	.word	0x00030220

000bd56c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd56c:	b508      	push	{r3, lr}
   bd56e:	4b02      	ldr	r3, [pc, #8]	; (bd578 <system_delay_ms+0xc>)
   bd570:	681b      	ldr	r3, [r3, #0]
   bd572:	695b      	ldr	r3, [r3, #20]
   bd574:	9301      	str	r3, [sp, #4]
   bd576:	bd08      	pop	{r3, pc}
   bd578:	00030220 	.word	0x00030220

000bd57c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd57c:	b508      	push	{r3, lr}
   bd57e:	4b02      	ldr	r3, [pc, #8]	; (bd588 <application_thread_current+0xc>)
   bd580:	681b      	ldr	r3, [r3, #0]
   bd582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd584:	9301      	str	r3, [sp, #4]
   bd586:	bd08      	pop	{r3, pc}
   bd588:	00030220 	.word	0x00030220

000bd58c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd58c:	b508      	push	{r3, lr}
   bd58e:	4b02      	ldr	r3, [pc, #8]	; (bd598 <application_thread_invoke+0xc>)
   bd590:	681b      	ldr	r3, [r3, #0]
   bd592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd594:	9301      	str	r3, [sp, #4]
   bd596:	bd08      	pop	{r3, pc}
   bd598:	00030220 	.word	0x00030220

000bd59c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd59c:	b508      	push	{r3, lr}
   bd59e:	4b02      	ldr	r3, [pc, #8]	; (bd5a8 <system_thread_get_state+0xc>)
   bd5a0:	681b      	ldr	r3, [r3, #0]
   bd5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd5a4:	9301      	str	r3, [sp, #4]
   bd5a6:	bd08      	pop	{r3, pc}
   bd5a8:	00030220 	.word	0x00030220

000bd5ac <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   bd5ac:	b508      	push	{r3, lr}
   bd5ae:	4b02      	ldr	r3, [pc, #8]	; (bd5b8 <led_pattern_period+0xc>)
   bd5b0:	681b      	ldr	r3, [r3, #0]
   bd5b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bd5b4:	9301      	str	r3, [sp, #4]
   bd5b6:	bd08      	pop	{r3, pc}
   bd5b8:	00030220 	.word	0x00030220

000bd5bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd5bc:	b508      	push	{r3, lr}
   bd5be:	4b03      	ldr	r3, [pc, #12]	; (bd5cc <system_ctrl_set_app_request_handler+0x10>)
   bd5c0:	681b      	ldr	r3, [r3, #0]
   bd5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd5c6:	9301      	str	r3, [sp, #4]
   bd5c8:	bd08      	pop	{r3, pc}
   bd5ca:	0000      	.short	0x0000
   bd5cc:	00030220 	.word	0x00030220

000bd5d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd5d0:	b508      	push	{r3, lr}
   bd5d2:	4b03      	ldr	r3, [pc, #12]	; (bd5e0 <system_ctrl_set_result+0x10>)
   bd5d4:	681b      	ldr	r3, [r3, #0]
   bd5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd5da:	9301      	str	r3, [sp, #4]
   bd5dc:	bd08      	pop	{r3, pc}
   bd5de:	0000      	.short	0x0000
   bd5e0:	00030220 	.word	0x00030220

000bd5e4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd5e4:	b508      	push	{r3, lr}
   bd5e6:	4b02      	ldr	r3, [pc, #8]	; (bd5f0 <spark_process+0xc>)
   bd5e8:	681b      	ldr	r3, [r3, #0]
   bd5ea:	689b      	ldr	r3, [r3, #8]
   bd5ec:	9301      	str	r3, [sp, #4]
   bd5ee:	bd08      	pop	{r3, pc}
   bd5f0:	00030244 	.word	0x00030244

000bd5f4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd5f4:	b508      	push	{r3, lr}
   bd5f6:	4b02      	ldr	r3, [pc, #8]	; (bd600 <spark_cloud_flag_connected+0xc>)
   bd5f8:	681b      	ldr	r3, [r3, #0]
   bd5fa:	695b      	ldr	r3, [r3, #20]
   bd5fc:	9301      	str	r3, [sp, #4]
   bd5fe:	bd08      	pop	{r3, pc}
   bd600:	00030244 	.word	0x00030244

000bd604 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd604:	b508      	push	{r3, lr}
   bd606:	4b02      	ldr	r3, [pc, #8]	; (bd610 <spark_send_event+0xc>)
   bd608:	681b      	ldr	r3, [r3, #0]
   bd60a:	6a1b      	ldr	r3, [r3, #32]
   bd60c:	9301      	str	r3, [sp, #4]
   bd60e:	bd08      	pop	{r3, pc}
   bd610:	00030244 	.word	0x00030244

000bd614 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   bd614:	b508      	push	{r3, lr}
   bd616:	4b02      	ldr	r3, [pc, #8]	; (bd620 <spark_subscribe+0xc>)
   bd618:	681b      	ldr	r3, [r3, #0]
   bd61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd61c:	9301      	str	r3, [sp, #4]
   bd61e:	bd08      	pop	{r3, pc}
   bd620:	00030244 	.word	0x00030244

000bd624 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd624:	b508      	push	{r3, lr}
   bd626:	4b02      	ldr	r3, [pc, #8]	; (bd630 <spark_sync_time_pending+0xc>)
   bd628:	681b      	ldr	r3, [r3, #0]
   bd62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd62c:	9301      	str	r3, [sp, #4]
   bd62e:	bd08      	pop	{r3, pc}
   bd630:	00030244 	.word	0x00030244

000bd634 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd634:	b508      	push	{r3, lr}
   bd636:	4b02      	ldr	r3, [pc, #8]	; (bd640 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd638:	681b      	ldr	r3, [r3, #0]
   bd63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd63c:	9301      	str	r3, [sp, #4]
   bd63e:	bd08      	pop	{r3, pc}
   bd640:	00030244 	.word	0x00030244

000bd644 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd644:	b508      	push	{r3, lr}
   bd646:	4b02      	ldr	r3, [pc, #8]	; (bd650 <network_connect+0xc>)
   bd648:	681b      	ldr	r3, [r3, #0]
   bd64a:	685b      	ldr	r3, [r3, #4]
   bd64c:	9301      	str	r3, [sp, #4]
   bd64e:	bd08      	pop	{r3, pc}
   bd650:	00030240 	.word	0x00030240

000bd654 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd654:	b508      	push	{r3, lr}
   bd656:	4b02      	ldr	r3, [pc, #8]	; (bd660 <network_connecting+0xc>)
   bd658:	681b      	ldr	r3, [r3, #0]
   bd65a:	689b      	ldr	r3, [r3, #8]
   bd65c:	9301      	str	r3, [sp, #4]
   bd65e:	bd08      	pop	{r3, pc}
   bd660:	00030240 	.word	0x00030240

000bd664 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd664:	b508      	push	{r3, lr}
   bd666:	4b02      	ldr	r3, [pc, #8]	; (bd670 <network_disconnect+0xc>)
   bd668:	681b      	ldr	r3, [r3, #0]
   bd66a:	68db      	ldr	r3, [r3, #12]
   bd66c:	9301      	str	r3, [sp, #4]
   bd66e:	bd08      	pop	{r3, pc}
   bd670:	00030240 	.word	0x00030240

000bd674 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd674:	b508      	push	{r3, lr}
   bd676:	4b02      	ldr	r3, [pc, #8]	; (bd680 <network_ready+0xc>)
   bd678:	681b      	ldr	r3, [r3, #0]
   bd67a:	691b      	ldr	r3, [r3, #16]
   bd67c:	9301      	str	r3, [sp, #4]
   bd67e:	bd08      	pop	{r3, pc}
   bd680:	00030240 	.word	0x00030240

000bd684 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd684:	b508      	push	{r3, lr}
   bd686:	4b02      	ldr	r3, [pc, #8]	; (bd690 <network_on+0xc>)
   bd688:	681b      	ldr	r3, [r3, #0]
   bd68a:	695b      	ldr	r3, [r3, #20]
   bd68c:	9301      	str	r3, [sp, #4]
   bd68e:	bd08      	pop	{r3, pc}
   bd690:	00030240 	.word	0x00030240

000bd694 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd694:	b508      	push	{r3, lr}
   bd696:	4b02      	ldr	r3, [pc, #8]	; (bd6a0 <network_off+0xc>)
   bd698:	681b      	ldr	r3, [r3, #0]
   bd69a:	699b      	ldr	r3, [r3, #24]
   bd69c:	9301      	str	r3, [sp, #4]
   bd69e:	bd08      	pop	{r3, pc}
   bd6a0:	00030240 	.word	0x00030240

000bd6a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd6a4:	b508      	push	{r3, lr}
   bd6a6:	4b02      	ldr	r3, [pc, #8]	; (bd6b0 <network_listen+0xc>)
   bd6a8:	681b      	ldr	r3, [r3, #0]
   bd6aa:	69db      	ldr	r3, [r3, #28]
   bd6ac:	9301      	str	r3, [sp, #4]
   bd6ae:	bd08      	pop	{r3, pc}
   bd6b0:	00030240 	.word	0x00030240

000bd6b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd6b4:	b508      	push	{r3, lr}
   bd6b6:	4b02      	ldr	r3, [pc, #8]	; (bd6c0 <network_listening+0xc>)
   bd6b8:	681b      	ldr	r3, [r3, #0]
   bd6ba:	6a1b      	ldr	r3, [r3, #32]
   bd6bc:	9301      	str	r3, [sp, #4]
   bd6be:	bd08      	pop	{r3, pc}
   bd6c0:	00030240 	.word	0x00030240

000bd6c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd6c4:	b508      	push	{r3, lr}
   bd6c6:	4b02      	ldr	r3, [pc, #8]	; (bd6d0 <network_set_listen_timeout+0xc>)
   bd6c8:	681b      	ldr	r3, [r3, #0]
   bd6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd6cc:	9301      	str	r3, [sp, #4]
   bd6ce:	bd08      	pop	{r3, pc}
   bd6d0:	00030240 	.word	0x00030240

000bd6d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd6d4:	b508      	push	{r3, lr}
   bd6d6:	4b02      	ldr	r3, [pc, #8]	; (bd6e0 <network_get_listen_timeout+0xc>)
   bd6d8:	681b      	ldr	r3, [r3, #0]
   bd6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd6dc:	9301      	str	r3, [sp, #4]
   bd6de:	bd08      	pop	{r3, pc}
   bd6e0:	00030240 	.word	0x00030240

000bd6e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd6e4:	b508      	push	{r3, lr}
   bd6e6:	4b02      	ldr	r3, [pc, #8]	; (bd6f0 <network_is_on+0xc>)
   bd6e8:	681b      	ldr	r3, [r3, #0]
   bd6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd6ec:	9301      	str	r3, [sp, #4]
   bd6ee:	bd08      	pop	{r3, pc}
   bd6f0:	00030240 	.word	0x00030240

000bd6f4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd6f4:	b508      	push	{r3, lr}
   bd6f6:	4b02      	ldr	r3, [pc, #8]	; (bd700 <network_is_off+0xc>)
   bd6f8:	681b      	ldr	r3, [r3, #0]
   bd6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd6fc:	9301      	str	r3, [sp, #4]
   bd6fe:	bd08      	pop	{r3, pc}
   bd700:	00030240 	.word	0x00030240

000bd704 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd704:	b508      	push	{r3, lr}
   bd706:	4b02      	ldr	r3, [pc, #8]	; (bd710 <malloc+0xc>)
   bd708:	681b      	ldr	r3, [r3, #0]
   bd70a:	681b      	ldr	r3, [r3, #0]
   bd70c:	9301      	str	r3, [sp, #4]
   bd70e:	bd08      	pop	{r3, pc}
   bd710:	0003021c 	.word	0x0003021c

000bd714 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd714:	b508      	push	{r3, lr}
   bd716:	4b02      	ldr	r3, [pc, #8]	; (bd720 <free+0xc>)
   bd718:	681b      	ldr	r3, [r3, #0]
   bd71a:	685b      	ldr	r3, [r3, #4]
   bd71c:	9301      	str	r3, [sp, #4]
   bd71e:	bd08      	pop	{r3, pc}
   bd720:	0003021c 	.word	0x0003021c

000bd724 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd724:	b508      	push	{r3, lr}
   bd726:	4b02      	ldr	r3, [pc, #8]	; (bd730 <realloc+0xc>)
   bd728:	681b      	ldr	r3, [r3, #0]
   bd72a:	689b      	ldr	r3, [r3, #8]
   bd72c:	9301      	str	r3, [sp, #4]
   bd72e:	bd08      	pop	{r3, pc}
   bd730:	0003021c 	.word	0x0003021c

000bd734 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   bd734:	b508      	push	{r3, lr}
   bd736:	4b02      	ldr	r3, [pc, #8]	; (bd740 <sprintf+0xc>)
   bd738:	681b      	ldr	r3, [r3, #0]
   bd73a:	68db      	ldr	r3, [r3, #12]
   bd73c:	9301      	str	r3, [sp, #4]
   bd73e:	bd08      	pop	{r3, pc}
   bd740:	0003021c 	.word	0x0003021c

000bd744 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd744:	b508      	push	{r3, lr}
   bd746:	4b02      	ldr	r3, [pc, #8]	; (bd750 <sscanf+0xc>)
   bd748:	681b      	ldr	r3, [r3, #0]
   bd74a:	695b      	ldr	r3, [r3, #20]
   bd74c:	9301      	str	r3, [sp, #4]
   bd74e:	bd08      	pop	{r3, pc}
   bd750:	0003021c 	.word	0x0003021c

000bd754 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd754:	b508      	push	{r3, lr}
   bd756:	4b02      	ldr	r3, [pc, #8]	; (bd760 <snprintf+0xc>)
   bd758:	681b      	ldr	r3, [r3, #0]
   bd75a:	69db      	ldr	r3, [r3, #28]
   bd75c:	9301      	str	r3, [sp, #4]
   bd75e:	bd08      	pop	{r3, pc}
   bd760:	0003021c 	.word	0x0003021c

000bd764 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd764:	b508      	push	{r3, lr}
   bd766:	4b02      	ldr	r3, [pc, #8]	; (bd770 <vsnprintf+0xc>)
   bd768:	681b      	ldr	r3, [r3, #0]
   bd76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd76c:	9301      	str	r3, [sp, #4]
   bd76e:	bd08      	pop	{r3, pc}
   bd770:	0003021c 	.word	0x0003021c

000bd774 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd774:	b508      	push	{r3, lr}
   bd776:	4b02      	ldr	r3, [pc, #8]	; (bd780 <abort+0xc>)
   bd778:	681b      	ldr	r3, [r3, #0]
   bd77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd77c:	9301      	str	r3, [sp, #4]
   bd77e:	bd08      	pop	{r3, pc}
   bd780:	0003021c 	.word	0x0003021c

000bd784 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd784:	b508      	push	{r3, lr}
   bd786:	4b02      	ldr	r3, [pc, #8]	; (bd790 <_malloc_r+0xc>)
   bd788:	681b      	ldr	r3, [r3, #0]
   bd78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd78c:	9301      	str	r3, [sp, #4]
   bd78e:	bd08      	pop	{r3, pc}
   bd790:	0003021c 	.word	0x0003021c

000bd794 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd794:	b508      	push	{r3, lr}
   bd796:	4b02      	ldr	r3, [pc, #8]	; (bd7a0 <__errno+0xc>)
   bd798:	681b      	ldr	r3, [r3, #0]
   bd79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd79c:	9301      	str	r3, [sp, #4]
   bd79e:	bd08      	pop	{r3, pc}
   bd7a0:	0003021c 	.word	0x0003021c

000bd7a4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd7a4:	b508      	push	{r3, lr}
   bd7a6:	4b02      	ldr	r3, [pc, #8]	; (bd7b0 <__assert_func+0xc>)
   bd7a8:	681b      	ldr	r3, [r3, #0]
   bd7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd7ac:	9301      	str	r3, [sp, #4]
   bd7ae:	bd08      	pop	{r3, pc}
   bd7b0:	0003021c 	.word	0x0003021c

000bd7b4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd7b4:	b508      	push	{r3, lr}
   bd7b6:	4b02      	ldr	r3, [pc, #8]	; (bd7c0 <newlib_impure_ptr_callback+0xc>)
   bd7b8:	681b      	ldr	r3, [r3, #0]
   bd7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd7bc:	9301      	str	r3, [sp, #4]
   bd7be:	bd08      	pop	{r3, pc}
   bd7c0:	0003021c 	.word	0x0003021c

000bd7c4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd7c4:	b508      	push	{r3, lr}
   bd7c6:	4b02      	ldr	r3, [pc, #8]	; (bd7d0 <localtime_r+0xc>)
   bd7c8:	681b      	ldr	r3, [r3, #0]
   bd7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd7cc:	9301      	str	r3, [sp, #4]
   bd7ce:	bd08      	pop	{r3, pc}
   bd7d0:	0003021c 	.word	0x0003021c

000bd7d4 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bd7d4:	428a      	cmp	r2, r1
{
   bd7d6:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bd7d8:	d007      	beq.n	bd7ea <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bd7da:	1a44      	subs	r4, r0, r1
   bd7dc:	9802      	ldr	r0, [sp, #8]
   bd7de:	1ac0      	subs	r0, r0, r3
   bd7e0:	4344      	muls	r4, r0
   bd7e2:	1a50      	subs	r0, r2, r1
   bd7e4:	fb94 f0f0 	sdiv	r0, r4, r0
   bd7e8:	4418      	add	r0, r3
}
   bd7ea:	bd10      	pop	{r4, pc}

000bd7ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd7ec:	2100      	movs	r1, #0
   bd7ee:	f7ff bebd 	b.w	bd56c <system_delay_ms>

000bd7f2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd7f2:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7f4:	6883      	ldr	r3, [r0, #8]
   bd7f6:	4604      	mov	r4, r0
   bd7f8:	b90b      	cbnz	r3, bd7fe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd7fa:	f003 fe99 	bl	c1530 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7fe:	68c3      	ldr	r3, [r0, #12]
   bd800:	4798      	blx	r3
      if (_M_manager)
   bd802:	68a3      	ldr	r3, [r4, #8]
   bd804:	b11b      	cbz	r3, bd80e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd806:	2203      	movs	r2, #3
   bd808:	4621      	mov	r1, r4
   bd80a:	4620      	mov	r0, r4
   bd80c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd80e:	4620      	mov	r0, r4
   bd810:	2110      	movs	r1, #16
}
   bd812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd816:	f7f6 bc44 	b.w	b40a2 <_ZdlPvj>

000bd81a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd81a:	4770      	bx	lr

000bd81c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   bd81c:	4770      	bx	lr

000bd81e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   bd81e:	4770      	bx	lr

000bd820 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd820:	4770      	bx	lr
	...

000bd824 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd824:	4b06      	ldr	r3, [pc, #24]	; (bd840 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd826:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd828:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   bd82a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd82e:	d005      	beq.n	bd83c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd830:	4608      	mov	r0, r1
   bd832:	f003 fe81 	bl	c1538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd836:	2800      	cmp	r0, #0
   bd838:	bf08      	it	eq
   bd83a:	2400      	moveq	r4, #0
      }
   bd83c:	4620      	mov	r0, r4
   bd83e:	bd10      	pop	{r4, pc}
   bd840:	000c70ac 	.word	0x000c70ac

000bd844 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd844:	4b06      	ldr	r3, [pc, #24]	; (bd860 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd846:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd848:	b510      	push	{r4, lr}
   bd84a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd84e:	d005      	beq.n	bd85c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd850:	4608      	mov	r0, r1
   bd852:	f003 fe71 	bl	c1538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd856:	2800      	cmp	r0, #0
   bd858:	bf08      	it	eq
   bd85a:	2400      	moveq	r4, #0
      }
   bd85c:	4620      	mov	r0, r4
   bd85e:	bd10      	pop	{r4, pc}
   bd860:	000c70ac 	.word	0x000c70ac

000bd864 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   bd864:	4b06      	ldr	r3, [pc, #24]	; (bd880 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   bd866:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   bd868:	b510      	push	{r4, lr}
   bd86a:	f100 040c 	add.w	r4, r0, #12
	    ||
   bd86e:	d005      	beq.n	bd87c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   bd870:	4608      	mov	r0, r1
   bd872:	f003 fe61 	bl	c1538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   bd876:	2800      	cmp	r0, #0
   bd878:	bf08      	it	eq
   bd87a:	2400      	moveq	r4, #0
      }
   bd87c:	4620      	mov	r0, r4
   bd87e:	bd10      	pop	{r4, pc}
   bd880:	000c70ac 	.word	0x000c70ac

000bd884 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   bd884:	b510      	push	{r4, lr}
   bd886:	2168      	movs	r1, #104	; 0x68
   bd888:	4604      	mov	r4, r0
   bd88a:	f7f6 fc0a 	bl	b40a2 <_ZdlPvj>
   bd88e:	4620      	mov	r0, r4
   bd890:	bd10      	pop	{r4, pc}

000bd892 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd892:	b510      	push	{r4, lr}
   bd894:	2128      	movs	r1, #40	; 0x28
   bd896:	4604      	mov	r4, r0
   bd898:	f7f6 fc03 	bl	b40a2 <_ZdlPvj>
   bd89c:	4620      	mov	r0, r4
   bd89e:	bd10      	pop	{r4, pc}

000bd8a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   bd8a0:	b510      	push	{r4, lr}
   bd8a2:	2130      	movs	r1, #48	; 0x30
   bd8a4:	4604      	mov	r4, r0
   bd8a6:	f7f6 fbfc 	bl	b40a2 <_ZdlPvj>
   bd8aa:	4620      	mov	r0, r4
   bd8ac:	bd10      	pop	{r4, pc}

000bd8ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   bd8ae:	2168      	movs	r1, #104	; 0x68
   bd8b0:	f7f6 bbf7 	b.w	b40a2 <_ZdlPvj>

000bd8b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd8b4:	2128      	movs	r1, #40	; 0x28
   bd8b6:	f7f6 bbf4 	b.w	b40a2 <_ZdlPvj>

000bd8ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   bd8ba:	2130      	movs	r1, #48	; 0x30
   bd8bc:	f7f6 bbf1 	b.w	b40a2 <_ZdlPvj>

000bd8c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   bd8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd8c2:	2500      	movs	r5, #0
   bd8c4:	1cec      	adds	r4, r5, #3
   bd8c6:	428c      	cmp	r4, r1
   bd8c8:	d80d      	bhi.n	bd8e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   bd8ca:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   bd8cc:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   bd8ce:	5d87      	ldrb	r7, [r0, r6]
   bd8d0:	4297      	cmp	r7, r2
   bd8d2:	d105      	bne.n	bd8e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   bd8d4:	4426      	add	r6, r4
   bd8d6:	42b1      	cmp	r1, r6
   bd8d8:	d305      	bcc.n	bd8e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   bd8da:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   bd8dc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   bd8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   bd8e0:	3401      	adds	r4, #1
   bd8e2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   bd8e4:	e7ee      	b.n	bd8c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   bd8e6:	2000      	movs	r0, #0
   bd8e8:	e7f9      	b.n	bd8de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000bd8ec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   bd8ec:	4a02      	ldr	r2, [pc, #8]	; (bd8f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   bd8ee:	4903      	ldr	r1, [pc, #12]	; (bd8fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   bd8f0:	200a      	movs	r0, #10
   bd8f2:	f7ff be01 	b.w	bd4f8 <panic_>
   bd8f6:	bf00      	nop
   bd8f8:	000bd139 	.word	0x000bd139
   bd8fc:	000c6f09 	.word	0x000c6f09

000bd900 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd900:	b430      	push	{r4, r5}
   bd902:	460d      	mov	r5, r1
   bd904:	4611      	mov	r1, r2
   bd906:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   bd908:	6803      	ldr	r3, [r0, #0]
   bd90a:	6809      	ldr	r1, [r1, #0]
   bd90c:	6828      	ldr	r0, [r5, #0]
   bd90e:	e9d3 4300 	ldrd	r4, r3, [r3]
   bd912:	46a4      	mov	ip, r4
      }
   bd914:	bc30      	pop	{r4, r5}
   bd916:	4760      	bx	ip

000bd918 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   bd918:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bd91a:	b538      	push	{r3, r4, r5, lr}
   bd91c:	4604      	mov	r4, r0
	switch (__op)
   bd91e:	d102      	bne.n	bd926 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   bd920:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   bd922:	6023      	str	r3, [r4, #0]
	}
   bd924:	e003      	b.n	bd92e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   bd926:	2a02      	cmp	r2, #2
   bd928:	d003      	beq.n	bd932 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   bd92a:	2a03      	cmp	r2, #3
   bd92c:	d00d      	beq.n	bd94a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   bd92e:	2000      	movs	r0, #0
   bd930:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   bd932:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   bd934:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bd936:	f7f6 fbae 	bl	b4096 <_Znwj>
   bd93a:	4603      	mov	r3, r0
   bd93c:	2800      	cmp	r0, #0
   bd93e:	d0f0      	beq.n	bd922 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   bd940:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd944:	e883 0003 	stmia.w	r3, {r0, r1}
   bd948:	e7eb      	b.n	bd922 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   bd94a:	6800      	ldr	r0, [r0, #0]
   bd94c:	2800      	cmp	r0, #0
   bd94e:	d0ee      	beq.n	bd92e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   bd950:	2108      	movs	r1, #8
   bd952:	f7f6 fba6 	bl	b40a2 <_ZdlPvj>
   bd956:	e7ea      	b.n	bd92e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000bd958 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd958:	b510      	push	{r4, lr}
   bd95a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   bd95c:	3058      	adds	r0, #88	; 0x58
   bd95e:	f7f6 fd3d 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   bd962:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   bd966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bd96a:	f003 b9a5 	b.w	c0cb8 <_ZN6StringD1Ev>

000bd96e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd96e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd970:	6843      	ldr	r3, [r0, #4]
   bd972:	3b01      	subs	r3, #1
    {
   bd974:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd976:	6043      	str	r3, [r0, #4]
   bd978:	b963      	cbnz	r3, bd994 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd97a:	6803      	ldr	r3, [r0, #0]
   bd97c:	689b      	ldr	r3, [r3, #8]
   bd97e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd980:	68a3      	ldr	r3, [r4, #8]
   bd982:	3b01      	subs	r3, #1
   bd984:	60a3      	str	r3, [r4, #8]
   bd986:	b92b      	cbnz	r3, bd994 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd988:	6823      	ldr	r3, [r4, #0]
   bd98a:	4620      	mov	r0, r4
   bd98c:	68db      	ldr	r3, [r3, #12]
    }
   bd98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd992:	4718      	bx	r3
    }
   bd994:	bd10      	pop	{r4, pc}

000bd996 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bd996:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd99a:	b2da      	uxtb	r2, r3
   bd99c:	2a09      	cmp	r2, #9
   bd99e:	d801      	bhi.n	bd9a4 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bd9a0:	4618      	mov	r0, r3
   bd9a2:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bd9a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd9a8:	2b05      	cmp	r3, #5
   bd9aa:	d801      	bhi.n	bd9b0 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bd9ac:	3857      	subs	r0, #87	; 0x57
   bd9ae:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bd9b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd9b4:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bd9b6:	bf94      	ite	ls
   bd9b8:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bd9ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   bd9be:	4770      	bx	lr

000bd9c0 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bd9c0:	b510      	push	{r4, lr}
            locked_(false) {
   bd9c2:	2300      	movs	r3, #0
   bd9c4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bd9c6:	4b04      	ldr	r3, [pc, #16]	; (bd9d8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bd9c8:	4604      	mov	r4, r0
   bd9ca:	6818      	ldr	r0, [r3, #0]
   bd9cc:	f7ff fb94 	bl	bd0f8 <os_mutex_recursive_lock>
        locked_ = true;
   bd9d0:	2301      	movs	r3, #1
   bd9d2:	7023      	strb	r3, [r4, #0]
    }
   bd9d4:	4620      	mov	r0, r4
   bd9d6:	bd10      	pop	{r4, pc}
   bd9d8:	2003e628 	.word	0x2003e628

000bd9dc <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bd9dc:	b510      	push	{r4, lr}
        if (locked_) {
   bd9de:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bd9e0:	4604      	mov	r4, r0
        if (locked_) {
   bd9e2:	b11b      	cbz	r3, bd9ec <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bd9e4:	4b02      	ldr	r3, [pc, #8]	; (bd9f0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bd9e6:	6818      	ldr	r0, [r3, #0]
   bd9e8:	f7ff fb8e 	bl	bd108 <os_mutex_recursive_unlock>
    }
   bd9ec:	4620      	mov	r0, r4
   bd9ee:	bd10      	pop	{r4, pc}
   bd9f0:	2003e628 	.word	0x2003e628

000bd9f4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bd9f4:	b082      	sub	sp, #8
   bd9f6:	4603      	mov	r3, r0
    address_ = addr;
   bd9f8:	6808      	ldr	r0, [r1, #0]
   bd9fa:	6849      	ldr	r1, [r1, #4]
   bd9fc:	466a      	mov	r2, sp
   bd9fe:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bda00:	466a      	mov	r2, sp
   bda02:	ca03      	ldmia	r2!, {r0, r1}
   bda04:	6018      	str	r0, [r3, #0]
}
   bda06:	4618      	mov	r0, r3
    address_ = addr.address_;
   bda08:	6059      	str	r1, [r3, #4]
}
   bda0a:	b002      	add	sp, #8
   bda0c:	4770      	bx	lr

000bda0e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   bda0e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   bda10:	7982      	ldrb	r2, [r0, #6]
   bda12:	798b      	ldrb	r3, [r1, #6]
   bda14:	429a      	cmp	r2, r3
   bda16:	d106      	bne.n	bda26 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   bda18:	2206      	movs	r2, #6
   bda1a:	f005 ff79 	bl	c3910 <memcmp>
   bda1e:	fab0 f080 	clz	r0, r0
   bda22:	0940      	lsrs	r0, r0, #5
}
   bda24:	bd08      	pop	{r3, pc}
    return false;
   bda26:	2000      	movs	r0, #0
   bda28:	e7fc      	b.n	bda24 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000bda2a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   bda2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bda2e:	6003      	str	r3, [r0, #0]
   bda30:	8083      	strh	r3, [r0, #4]
}
   bda32:	2000      	movs	r0, #0
   bda34:	4770      	bx	lr

000bda36 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   bda36:	b508      	push	{r3, lr}
   bda38:	4602      	mov	r2, r0
        : address_{} {
   bda3a:	2100      	movs	r1, #0
   bda3c:	6001      	str	r1, [r0, #0]
   bda3e:	6041      	str	r1, [r0, #4]
    clear();
   bda40:	f7ff fff3 	bl	bda2a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   bda44:	7191      	strb	r1, [r2, #6]
}
   bda46:	4610      	mov	r0, r2
   bda48:	bd08      	pop	{r3, pc}
	...

000bda4c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   bda4c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   bda4e:	2301      	movs	r3, #1
   bda50:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bda52:	4b05      	ldr	r3, [pc, #20]	; (bda68 <_ZN8particle7BleUuidC1Ev+0x1c>)
   bda54:	4602      	mov	r2, r0
   bda56:	f103 0110 	add.w	r1, r3, #16
   bda5a:	f853 4b04 	ldr.w	r4, [r3], #4
   bda5e:	f842 4b04 	str.w	r4, [r2], #4
   bda62:	428b      	cmp	r3, r1
   bda64:	d1f9      	bne.n	bda5a <_ZN8particle7BleUuidC1Ev+0xe>
}
   bda66:	bd10      	pop	{r4, pc}
   bda68:	000c70ba 	.word	0x000c70ba

000bda6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bda6c:	b510      	push	{r4, lr}
    if (uuid128) {
   bda6e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   bda70:	4604      	mov	r4, r0
    if (uuid128) {
   bda72:	b1b1      	cbz	r1, bdaa2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   bda74:	2a01      	cmp	r2, #1
   bda76:	f101 0210 	add.w	r2, r1, #16
   bda7a:	d10a      	bne.n	bda92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   bda7c:	4601      	mov	r1, r0
   bda7e:	f853 0b04 	ldr.w	r0, [r3], #4
   bda82:	f841 0b04 	str.w	r0, [r1], #4
   bda86:	4293      	cmp	r3, r2
   bda88:	d1f9      	bne.n	bda7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   bda8a:	2301      	movs	r3, #1
   bda8c:	6123      	str	r3, [r4, #16]
}
   bda8e:	4620      	mov	r0, r4
   bda90:	bd10      	pop	{r4, pc}
   bda92:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   bda94:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   bda98:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   bda9c:	429a      	cmp	r2, r3
   bda9e:	d1f9      	bne.n	bda94 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   bdaa0:	e7f3      	b.n	bda8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   bdaa2:	2210      	movs	r2, #16
   bdaa4:	f005 ff6c 	bl	c3980 <memset>
   bdaa8:	e7f1      	b.n	bda8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000bdaaa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   bdaaa:	b538      	push	{r3, r4, r5, lr}
   bdaac:	4604      	mov	r4, r0
   bdaae:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   bdab0:	461a      	mov	r2, r3
   bdab2:	f7ff ffdb 	bl	bda6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   bdab6:	81a5      	strh	r5, [r4, #12]
}
   bdab8:	4620      	mov	r0, r4
   bdaba:	bd38      	pop	{r3, r4, r5, pc}

000bdabc <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   bdabc:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   bdabe:	6902      	ldr	r2, [r0, #16]
   bdac0:	b922      	cbnz	r2, bdacc <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   bdac2:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdac4:	3800      	subs	r0, #0
   bdac6:	bf18      	it	ne
   bdac8:	2001      	movne	r0, #1
}
   bdaca:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdacc:	4902      	ldr	r1, [pc, #8]	; (bdad8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   bdace:	2210      	movs	r2, #16
   bdad0:	f005 ff1e 	bl	c3910 <memcmp>
   bdad4:	e7f6      	b.n	bdac4 <_ZNK8particle7BleUuid7isValidEv+0x8>
   bdad6:	bf00      	nop
   bdad8:	000c70da 	.word	0x000c70da

000bdadc <_ZNK8particle7BleUuid4typeEv>:
}
   bdadc:	6900      	ldr	r0, [r0, #16]
   bdade:	4770      	bx	lr

000bdae0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   bdae0:	b538      	push	{r3, r4, r5, lr}
   bdae2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   bdae4:	2214      	movs	r2, #20
   bdae6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   bdae8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   bdaea:	f005 ff49 	bl	c3980 <memset>
    if (type_ == BleUuidType::SHORT) {
   bdaee:	6923      	ldr	r3, [r4, #16]
   bdaf0:	b91b      	cbnz	r3, bdafa <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   bdaf2:	89a3      	ldrh	r3, [r4, #12]
   bdaf4:	802b      	strh	r3, [r5, #0]
}
   bdaf6:	4628      	mov	r0, r5
   bdaf8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   bdafa:	2301      	movs	r3, #1
   bdafc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   bdafe:	4621      	mov	r1, r4
   bdb00:	462b      	mov	r3, r5
   bdb02:	f104 0210 	add.w	r2, r4, #16
   bdb06:	f851 0b04 	ldr.w	r0, [r1], #4
   bdb0a:	f843 0b04 	str.w	r0, [r3], #4
   bdb0e:	4291      	cmp	r1, r2
   bdb10:	d1f9      	bne.n	bdb06 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bdb12:	e7f0      	b.n	bdaf6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bdb14 <_ZNK8particle7BleUuid7shortedEv>:
}
   bdb14:	8980      	ldrh	r0, [r0, #12]
   bdb16:	4770      	bx	lr

000bdb18 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bdb18:	4770      	bx	lr

000bdb1a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bdb1a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdb1c:	6902      	ldr	r2, [r0, #16]
   bdb1e:	690b      	ldr	r3, [r1, #16]
   bdb20:	429a      	cmp	r2, r3
   bdb22:	d106      	bne.n	bdb32 <_ZNK8particle7BleUuideqERKS0_+0x18>
   bdb24:	2210      	movs	r2, #16
   bdb26:	f005 fef3 	bl	c3910 <memcmp>
   bdb2a:	fab0 f080 	clz	r0, r0
   bdb2e:	0940      	lsrs	r0, r0, #5
}
   bdb30:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bdb32:	2000      	movs	r0, #0
   bdb34:	e7fc      	b.n	bdb30 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bdb38 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bdb38:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bdb3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bdb3e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdb40:	4b34      	ldr	r3, [pc, #208]	; (bdc14 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bdb42:	460c      	mov	r4, r1
   bdb44:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bdb46:	4602      	mov	r2, r0
   bdb48:	f103 0110 	add.w	r1, r3, #16
   bdb4c:	f853 0b04 	ldr.w	r0, [r3], #4
   bdb50:	f842 0b04 	str.w	r0, [r2], #4
   bdb54:	428b      	cmp	r3, r1
   bdb56:	d1f9      	bne.n	bdb4c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bdb58:	b344      	cbz	r4, bdbac <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bdb5a:	2124      	movs	r1, #36	; 0x24
   bdb5c:	4620      	mov	r0, r4
   bdb5e:	f005 ffdc 	bl	c3b1a <strnlen>
   bdb62:	2804      	cmp	r0, #4
   bdb64:	f04f 0500 	mov.w	r5, #0
   bdb68:	d123      	bne.n	bdbb2 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bdb6a:	f8ad 5004 	strh.w	r5, [sp, #4]
   bdb6e:	af01      	add	r7, sp, #4
   bdb70:	1ca5      	adds	r5, r4, #2
   bdb72:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bdb74:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bdb78:	f7ff ff0d 	bl	bd996 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bdb7c:	f1b0 0800 	subs.w	r8, r0, #0
   bdb80:	db12      	blt.n	bdba8 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bdb82:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bdb86:	f7ff ff06 	bl	bd996 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bdb8a:	2800      	cmp	r0, #0
   bdb8c:	db0c      	blt.n	bdba8 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bdb8e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdb90:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bdb94:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bdb96:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bdb9a:	d1eb      	bne.n	bdb74 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bdb9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bdba0:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bdba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bdba6:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bdba8:	2300      	movs	r3, #0
   bdbaa:	6133      	str	r3, [r6, #16]
}
   bdbac:	b002      	add	sp, #8
   bdbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bdbb2:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdbb6:	2124      	movs	r1, #36	; 0x24
   bdbb8:	4620      	mov	r0, r4
   bdbba:	f005 ffae 	bl	c3b1a <strnlen>
   bdbbe:	42a8      	cmp	r0, r5
   bdbc0:	d807      	bhi.n	bdbd2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bdbc2:	4642      	mov	r2, r8
   bdbc4:	2100      	movs	r1, #0
   bdbc6:	4630      	mov	r0, r6
}
   bdbc8:	b002      	add	sp, #8
   bdbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bdbce:	f005 bed7 	b.w	c3980 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdbd2:	f1b8 0f00 	cmp.w	r8, #0
   bdbd6:	d0e9      	beq.n	bdbac <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bdbd8:	5d60      	ldrb	r0, [r4, r5]
   bdbda:	f7ff fedc 	bl	bd996 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bdbde:	0603      	lsls	r3, r0, #24
   bdbe0:	d415      	bmi.n	bdc0e <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bdbe2:	0100      	lsls	r0, r0, #4
   bdbe4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bdbe8:	b2c7      	uxtb	r7, r0
   bdbea:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bdbee:	2124      	movs	r1, #36	; 0x24
   bdbf0:	4620      	mov	r0, r4
   bdbf2:	f005 ff92 	bl	c3b1a <strnlen>
   bdbf6:	3501      	adds	r5, #1
   bdbf8:	42a8      	cmp	r0, r5
   bdbfa:	d908      	bls.n	bdc0e <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bdbfc:	5d60      	ldrb	r0, [r4, r5]
   bdbfe:	f7ff feca 	bl	bd996 <_ZN8particle11hexToNibbleEc>
   bdc02:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bdc04:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bdc06:	bfa4      	itt	ge
   bdc08:	4338      	orrge	r0, r7
   bdc0a:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bdc0e:	3501      	adds	r5, #1
   bdc10:	e7d1      	b.n	bdbb6 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   bdc12:	bf00      	nop
   bdc14:	000c70ba 	.word	0x000c70ba

000bdc18 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   bdc18:	b513      	push	{r0, r1, r4, lr}
   bdc1a:	4604      	mov	r4, r0
   bdc1c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   bdc1e:	f7ff ff15 	bl	bda4c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   bdc22:	4620      	mov	r0, r4
   bdc24:	9901      	ldr	r1, [sp, #4]
   bdc26:	f7ff ff87 	bl	bdb38 <_ZN8particle7BleUuid9constructEPKc>
}
   bdc2a:	4620      	mov	r0, r4
   bdc2c:	b002      	add	sp, #8
   bdc2e:	bd10      	pop	{r4, pc}

000bdc30 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   bdc30:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   bdc32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bdc36:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   bdc38:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   bdc3a:	8043      	strh	r3, [r0, #2]
   bdc3c:	220e      	movs	r2, #14
   bdc3e:	4629      	mov	r1, r5
   bdc40:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   bdc42:	7105      	strb	r5, [r0, #4]
   bdc44:	3006      	adds	r0, #6
   bdc46:	f005 fe9b 	bl	c3980 <memset>
   bdc4a:	f104 0014 	add.w	r0, r4, #20
   bdc4e:	f7ff fefd 	bl	bda4c <_ZN8particle7BleUuidC1Ev>
   bdc52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bdc56:	f7ff fef9 	bl	bda4c <_ZN8particle7BleUuidC1Ev>
   bdc5a:	4904      	ldr	r1, [pc, #16]	; (bdc6c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   bdc5c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bdc60:	f003 f875 	bl	c0d4e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   bdc64:	6565      	str	r5, [r4, #84]	; 0x54
    }
   bdc66:	4620      	mov	r0, r4
   bdc68:	bd38      	pop	{r3, r4, r5, pc}
   bdc6a:	bf00      	nop
   bdc6c:	000c721f 	.word	0x000c721f

000bdc70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bdc70:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bdc72:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bdc76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bdc7a:	4293      	cmp	r3, r2
   bdc7c:	4618      	mov	r0, r3
   bdc7e:	d006      	beq.n	bdc8e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bdc80:	6804      	ldr	r4, [r0, #0]
   bdc82:	8824      	ldrh	r4, [r4, #0]
   bdc84:	428c      	cmp	r4, r1
   bdc86:	f103 0308 	add.w	r3, r3, #8
   bdc8a:	d1f6      	bne.n	bdc7a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bdc8c:	bd10      	pop	{r4, pc}
        return nullptr;
   bdc8e:	2000      	movs	r0, #0
   bdc90:	e7fc      	b.n	bdc8c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bdc94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bdc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdc96:	4606      	mov	r6, r0
   bdc98:	b085      	sub	sp, #20
   bdc9a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bdc9c:	460d      	mov	r5, r1
   bdc9e:	2900      	cmp	r1, #0
   bdca0:	d050      	beq.n	bdd44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bdca2:	2a00      	cmp	r2, #0
   bdca4:	d04e      	beq.n	bdd44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bdca6:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bdca8:	7823      	ldrb	r3, [r4, #0]
   bdcaa:	2af4      	cmp	r2, #244	; 0xf4
   bdcac:	bf28      	it	cs
   bdcae:	22f4      	movcs	r2, #244	; 0xf4
   bdcb0:	b343      	cbz	r3, bdd04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bdcb2:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bdcb4:	0798      	lsls	r0, r3, #30
   bdcb6:	d509      	bpl.n	bdccc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bdcb8:	89a0      	ldrh	r0, [r4, #12]
   bdcba:	9203      	str	r2, [sp, #12]
   bdcbc:	2300      	movs	r3, #0
   bdcbe:	f7ff f995 	bl	bcfec <hal_ble_gatt_server_set_characteristic_value>
   bdcc2:	2800      	cmp	r0, #0
   bdcc4:	9a03      	ldr	r2, [sp, #12]
   bdcc6:	da03      	bge.n	bdcd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bdcc8:	b005      	add	sp, #20
   bdcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bdccc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdcd0:	6834      	ldr	r4, [r6, #0]
   bdcd2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bdcd4:	06d9      	lsls	r1, r3, #27
   bdcd6:	d509      	bpl.n	bdcec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bdcd8:	2f01      	cmp	r7, #1
   bdcda:	d007      	beq.n	bdcec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdcdc:	89a0      	ldrh	r0, [r4, #12]
   bdcde:	2300      	movs	r3, #0
   bdce0:	4629      	mov	r1, r5
}
   bdce2:	b005      	add	sp, #20
   bdce4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdce8:	f7ff b9b2 	b.w	bd050 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bdcec:	069b      	lsls	r3, r3, #26
   bdcee:	d5eb      	bpl.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdcf0:	2f02      	cmp	r7, #2
   bdcf2:	d0e9      	beq.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdcf4:	89a0      	ldrh	r0, [r4, #12]
   bdcf6:	2300      	movs	r3, #0
   bdcf8:	4629      	mov	r1, r5
}
   bdcfa:	b005      	add	sp, #20
   bdcfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bdd00:	f7ff b9b0 	b.w	bd064 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bdd04:	8860      	ldrh	r0, [r4, #2]
   bdd06:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bdd0a:	4288      	cmp	r0, r1
   bdd0c:	d01c      	beq.n	bdd48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   bdd0e:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   bdd10:	074e      	lsls	r6, r1, #29
   bdd12:	d501      	bpl.n	bdd18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bdd14:	2f01      	cmp	r7, #1
   bdd16:	d104      	bne.n	bdd22 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdd18:	070b      	lsls	r3, r1, #28
   bdd1a:	d409      	bmi.n	bdd30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bdd1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bdd20:	e7d2      	b.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdd22:	89a1      	ldrh	r1, [r4, #12]
   bdd24:	9300      	str	r3, [sp, #0]
   bdd26:	4613      	mov	r3, r2
   bdd28:	462a      	mov	r2, r5
   bdd2a:	f7ff f973 	bl	bd014 <hal_ble_gatt_client_write_without_response>
   bdd2e:	e7cb      	b.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bdd30:	2f02      	cmp	r7, #2
   bdd32:	d0f3      	beq.n	bdd1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bdd34:	2300      	movs	r3, #0
   bdd36:	89a1      	ldrh	r1, [r4, #12]
   bdd38:	9300      	str	r3, [sp, #0]
   bdd3a:	4613      	mov	r3, r2
   bdd3c:	462a      	mov	r2, r5
   bdd3e:	f7ff f95f 	bl	bd000 <hal_ble_gatt_client_write_with_response>
   bdd42:	e7c1      	b.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   bdd44:	4802      	ldr	r0, [pc, #8]	; (bdd50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bdd46:	e7bf      	b.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bdd48:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bdd4c:	e7bc      	b.n	bdcc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bdd4e:	bf00      	nop
   bdd50:	fffffef2 	.word	0xfffffef2

000bdd54 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bdd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdd58:	2600      	movs	r6, #0
   bdd5a:	6006      	str	r6, [r0, #0]
   bdd5c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bdd5e:	2028      	movs	r0, #40	; 0x28
   bdd60:	460c      	mov	r4, r1
   bdd62:	f7f6 f998 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bdd66:	1e05      	subs	r5, r0, #0
   bdd68:	f105 080c 	add.w	r8, r5, #12
   bdd6c:	d00f      	beq.n	bdd8e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bdd6e:	2301      	movs	r3, #1
   bdd70:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bdd74:	4b08      	ldr	r3, [pc, #32]	; (bdd98 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bdd76:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bdd78:	4640      	mov	r0, r8
   bdd7a:	f7ff fe67 	bl	bda4c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bdd7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bdd80:	622e      	str	r6, [r5, #32]
   bdd82:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bdd86:	4646      	mov	r6, r8
   bdd88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bdd8a:	6823      	ldr	r3, [r4, #0]
   bdd8c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bdd8e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bdd92:	4638      	mov	r0, r7
   bdd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdd98:	000c707c 	.word	0x000c707c

000bdd9c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bdd9c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bdd9e:	2500      	movs	r5, #0
   bdda0:	6005      	str	r5, [r0, #0]
   bdda2:	4606      	mov	r6, r0
   bdda4:	2030      	movs	r0, #48	; 0x30
   bdda6:	f7f6 f976 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bddaa:	4604      	mov	r4, r0
   bddac:	b188      	cbz	r0, bddd2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bddae:	2301      	movs	r3, #1
   bddb0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bddb4:	4b09      	ldr	r3, [pc, #36]	; (bdddc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bddb6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bddb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bddbc:	8183      	strh	r3, [r0, #12]
   bddbe:	300e      	adds	r0, #14
   bddc0:	f7ff fe39 	bl	bda36 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bddc4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bddc8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bddcc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bddd0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bddd2:	6074      	str	r4, [r6, #4]
   bddd4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bddd6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bddd8:	4630      	mov	r0, r6
   bddda:	bd70      	pop	{r4, r5, r6, pc}
   bdddc:	000c7098 	.word	0x000c7098

000bdde0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bdde0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdde2:	460d      	mov	r5, r1
   bdde4:	4604      	mov	r4, r0
    WiringBleLock lk;
   bdde6:	a801      	add	r0, sp, #4
   bdde8:	f7ff fdea 	bl	bd9c0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bddec:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bddee:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bddf2:	6023      	str	r3, [r4, #0]
   bddf4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bddf8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bddfa:	a801      	add	r0, sp, #4
   bddfc:	f7ff fdee 	bl	bd9dc <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bde00:	4620      	mov	r0, r4
   bde02:	b003      	add	sp, #12
   bde04:	bd30      	pop	{r4, r5, pc}

000bde06 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bde06:	b530      	push	{r4, r5, lr}
   bde08:	4605      	mov	r5, r0
   bde0a:	b087      	sub	sp, #28
   bde0c:	460c      	mov	r4, r1
    WiringBleLock lk;
   bde0e:	a801      	add	r0, sp, #4
   bde10:	f7ff fdd6 	bl	bd9c0 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   bde14:	682a      	ldr	r2, [r5, #0]
   bde16:	6823      	ldr	r3, [r4, #0]
   bde18:	8812      	ldrh	r2, [r2, #0]
   bde1a:	881b      	ldrh	r3, [r3, #0]
   bde1c:	429a      	cmp	r2, r3
   bde1e:	d10d      	bne.n	bde3c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   bde20:	4629      	mov	r1, r5
   bde22:	a802      	add	r0, sp, #8
   bde24:	f7ff ffdc 	bl	bdde0 <_ZNK8particle13BlePeerDevice7addressEv>
   bde28:	4621      	mov	r1, r4
   bde2a:	a804      	add	r0, sp, #16
   bde2c:	f7ff ffd8 	bl	bdde0 <_ZNK8particle13BlePeerDevice7addressEv>
   bde30:	a904      	add	r1, sp, #16
   bde32:	a802      	add	r0, sp, #8
   bde34:	f7ff fdeb 	bl	bda0e <_ZNK8particle10BleAddresseqERKS0_>
   bde38:	4604      	mov	r4, r0
   bde3a:	b900      	cbnz	r0, bde3e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   bde3c:	2400      	movs	r4, #0
    WiringBleLock lk;
   bde3e:	a801      	add	r0, sp, #4
   bde40:	f7ff fdcc 	bl	bd9dc <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bde44:	4620      	mov	r0, r4
   bde46:	b007      	add	sp, #28
   bde48:	bd30      	pop	{r4, r5, pc}
	...

000bde4c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   bde4c:	b510      	push	{r4, lr}
   bde4e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   bde50:	2064      	movs	r0, #100	; 0x64
   bde52:	f7f6 f920 	bl	b4096 <_Znwj>
   bde56:	b168      	cbz	r0, bde74 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   bde58:	2300      	movs	r3, #0
   bde5a:	e9c0 3300 	strd	r3, r3, [r0]
   bde5e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bde62:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bde66:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bde6a:	6203      	str	r3, [r0, #32]
   bde6c:	62c3      	str	r3, [r0, #44]	; 0x2c
   bde6e:	63c3      	str	r3, [r0, #60]	; 0x3c
   bde70:	64c3      	str	r3, [r0, #76]	; 0x4c
   bde72:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bde74:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bde76:	b920      	cbnz	r0, bde82 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bde78:	4a0a      	ldr	r2, [pc, #40]	; (bdea4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bde7a:	490b      	ldr	r1, [pc, #44]	; (bdea8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bde7c:	200a      	movs	r0, #10
   bde7e:	f7ff fb3b 	bl	bd4f8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bde82:	2000      	movs	r0, #0
   bde84:	f7ff f876 	bl	bcf74 <hal_ble_stack_init>
   bde88:	b120      	cbz	r0, bde94 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bde8a:	4a06      	ldr	r2, [pc, #24]	; (bdea4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bde8c:	4907      	ldr	r1, [pc, #28]	; (bdeac <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bde8e:	200a      	movs	r0, #10
   bde90:	f7ff fb32 	bl	bd4f8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bde94:	6821      	ldr	r1, [r4, #0]
   bde96:	4806      	ldr	r0, [pc, #24]	; (bdeb0 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bde98:	2200      	movs	r2, #0
   bde9a:	f7ff f8cf 	bl	bd03c <hal_ble_set_callback_on_periph_link_events>
}
   bde9e:	4620      	mov	r0, r4
   bdea0:	bd10      	pop	{r4, pc}
   bdea2:	bf00      	nop
   bdea4:	000bd139 	.word	0x000bd139
   bdea8:	000c6f09 	.word	0x000c6f09
   bdeac:	000c6f47 	.word	0x000c6f47
   bdeb0:	000be471 	.word	0x000be471

000bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bdeb4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bdeb6:	4c0a      	ldr	r4, [pc, #40]	; (bdee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bdeb8:	7823      	ldrb	r3, [r4, #0]
   bdeba:	f3bf 8f5b 	dmb	ish
   bdebe:	07db      	lsls	r3, r3, #31
   bdec0:	d40c      	bmi.n	bdedc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdec2:	4620      	mov	r0, r4
   bdec4:	f7f6 f8fc 	bl	b40c0 <__cxa_guard_acquire>
   bdec8:	b140      	cbz	r0, bdedc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bdeca:	4806      	ldr	r0, [pc, #24]	; (bdee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdecc:	f7ff ffbe 	bl	bde4c <_ZN8particle14BleLocalDeviceC1Ev>
   bded0:	4620      	mov	r0, r4
   bded2:	f7f6 f8fa 	bl	b40ca <__cxa_guard_release>
   bded6:	4804      	ldr	r0, [pc, #16]	; (bdee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bded8:	f005 fd04 	bl	c38e4 <atexit>
    return instance;
}
   bdedc:	4801      	ldr	r0, [pc, #4]	; (bdee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bdede:	bd10      	pop	{r4, pc}
   bdee0:	2003e620 	.word	0x2003e620
   bdee4:	2003e62c 	.word	0x2003e62c
   bdee8:	000be129 	.word	0x000be129

000bdeec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bdeec:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bdeee:	6803      	ldr	r3, [r0, #0]
   bdef0:	3b09      	subs	r3, #9
   bdef2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bdef4:	b08d      	sub	sp, #52	; 0x34
   bdef6:	4604      	mov	r4, r0
   bdef8:	460d      	mov	r5, r1
    switch (event->type) {
   bdefa:	d811      	bhi.n	bdf20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bdefc:	f7ff ffda 	bl	bdeb4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bdf00:	88a1      	ldrh	r1, [r4, #4]
   bdf02:	6800      	ldr	r0, [r0, #0]
   bdf04:	f7ff feb4 	bl	bdc70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bdf08:	4603      	mov	r3, r0
   bdf0a:	b958      	cbnz	r0, bdf24 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bdf0c:	2220      	movs	r2, #32
   bdf0e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bdf12:	4a0b      	ldr	r2, [pc, #44]	; (bdf40 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bdf14:	9200      	str	r2, [sp, #0]
   bdf16:	490b      	ldr	r1, [pc, #44]	; (bdf44 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bdf18:	aa04      	add	r2, sp, #16
   bdf1a:	2032      	movs	r0, #50	; 0x32
   bdf1c:	f7ff faf4 	bl	bd508 <log_message>
}
   bdf20:	b00d      	add	sp, #52	; 0x34
   bdf22:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bdf24:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bdf26:	2a00      	cmp	r2, #0
   bdf28:	d0fa      	beq.n	bdf20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bdf2a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bdf2e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   bdf32:	e9cd 1203 	strd	r1, r2, [sp, #12]
   bdf36:	6dac      	ldr	r4, [r5, #88]	; 0x58
   bdf38:	aa04      	add	r2, sp, #16
   bdf3a:	a903      	add	r1, sp, #12
   bdf3c:	47a0      	blx	r4
}
   bdf3e:	e7ef      	b.n	bdf20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   bdf40:	000c6f89 	.word	0x000c6f89
   bdf44:	000c6f20 	.word	0x000c6f20

000bdf48 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   bdf48:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   bdf4a:	2000      	movs	r0, #0
   bdf4c:	f7ff f812 	bl	bcf74 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   bdf50:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdf54:	bd08      	pop	{r3, pc}

000bdf56 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   bdf56:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   bdf58:	2100      	movs	r1, #0
   bdf5a:	f7ff b813 	b.w	bcf84 <hal_ble_gap_set_tx_power>

000bdf5e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bdf5e:	b919      	cbnz	r1, bdf68 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bdf60:	460a      	mov	r2, r1
   bdf62:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bdf64:	f7ff b816 	b.w	bcf94 <hal_ble_gap_set_advertising_data>
   bdf68:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdf6c:	2200      	movs	r2, #0
   bdf6e:	e7f9      	b.n	bdf64 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bdf70 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bdf70:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bdf72:	69d8      	ldr	r0, [r3, #28]
}
   bdf74:	2800      	cmp	r0, #0
   bdf76:	bfd4      	ite	le
   bdf78:	2000      	movle	r0, #0
   bdf7a:	2001      	movgt	r0, #1
   bdf7c:	4770      	bx	lr

000bdf7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf7e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bdf80:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bdf84:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bdf86:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bdf8a:	42ae      	cmp	r6, r5
   bdf8c:	d004      	beq.n	bdf98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bdf8e:	4628      	mov	r0, r5
   bdf90:	f002 fe92 	bl	c0cb8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bdf94:	3510      	adds	r5, #16
   bdf96:	e7f8      	b.n	bdf8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bdf98:	6820      	ldr	r0, [r4, #0]
   bdf9a:	f7ff fbbb 	bl	bd714 <free>
}
   bdf9e:	4620      	mov	r0, r4
   bdfa0:	bd70      	pop	{r4, r5, r6, pc}

000bdfa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bdfa2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bdfa4:	1e14      	subs	r4, r2, #0
   bdfa6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bdfa8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bdfaa:	db02      	blt.n	bdfb2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bdfac:	1862      	adds	r2, r4, r1
   bdfae:	429a      	cmp	r2, r3
   bdfb0:	dd00      	ble.n	bdfb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bdfb2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bdfb4:	682a      	ldr	r2, [r5, #0]
   bdfb6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bdfb8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bdfba:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bdfbc:	1a52      	subs	r2, r2, r1
   bdfbe:	f005 fcc5 	bl	c394c <memmove>
    size_ -= n;
   bdfc2:	686a      	ldr	r2, [r5, #4]
   bdfc4:	1b12      	subs	r2, r2, r4
   bdfc6:	606a      	str	r2, [r5, #4]
}
   bdfc8:	bd38      	pop	{r3, r4, r5, pc}

000bdfca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bdfca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bdfcc:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bdfce:	4604      	mov	r4, r0
   bdfd0:	460d      	mov	r5, r1
   bdfd2:	ab01      	add	r3, sp, #4
   bdfd4:	e9d0 0100 	ldrd	r0, r1, [r0]
   bdfd8:	f7ff fc72 	bl	bd8c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bdfdc:	4602      	mov	r2, r0
   bdfde:	b138      	cbz	r0, bdff0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bdfe0:	9901      	ldr	r1, [sp, #4]
   bdfe2:	4620      	mov	r0, r4
   bdfe4:	f7ff ffdd 	bl	bdfa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bdfe8:	4629      	mov	r1, r5
   bdfea:	4620      	mov	r0, r4
   bdfec:	f7ff ffed 	bl	bdfca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bdff0:	b003      	add	sp, #12
   bdff2:	bd30      	pop	{r4, r5, pc}

000bdff4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bdff4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bdff6:	460c      	mov	r4, r1
   bdff8:	b929      	cbnz	r1, be006 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bdffa:	460a      	mov	r2, r1
   bdffc:	4608      	mov	r0, r1
}
   bdffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be002:	f7fe bfcf 	b.w	bcfa4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   be006:	2101      	movs	r1, #1
   be008:	4620      	mov	r0, r4
   be00a:	f7ff ffde 	bl	bdfca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   be00e:	e9d4 0100 	ldrd	r0, r1, [r4]
   be012:	2200      	movs	r2, #0
   be014:	e7f3      	b.n	bdffe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000be016 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   be016:	b538      	push	{r3, r4, r5, lr}
   be018:	4604      	mov	r4, r0
   be01a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   be01c:	f7ff ff9f 	bl	bdf5e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   be020:	2800      	cmp	r0, #0
   be022:	db0a      	blt.n	be03a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   be024:	4629      	mov	r1, r5
   be026:	4620      	mov	r0, r4
   be028:	f7ff ffe4 	bl	bdff4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   be02c:	2800      	cmp	r0, #0
   be02e:	db04      	blt.n	be03a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   be030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   be034:	2000      	movs	r0, #0
   be036:	f7fe bfbd 	b.w	bcfb4 <hal_ble_gap_start_advertising>
}
   be03a:	bd38      	pop	{r3, r4, r5, pc}

000be03c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   be03c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   be03e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   be040:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   be042:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be044:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   be046:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be048:	f7f6 f825 	bl	b4096 <_Znwj>
   be04c:	b118      	cbz	r0, be056 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   be04e:	682b      	ldr	r3, [r5, #0]
   be050:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   be052:	686b      	ldr	r3, [r5, #4]
   be054:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   be056:	4b03      	ldr	r3, [pc, #12]	; (be064 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   be058:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   be05a:	4b03      	ldr	r3, [pc, #12]	; (be068 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   be05c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   be05e:	60a3      	str	r3, [r4, #8]
      }
   be060:	4620      	mov	r0, r4
   be062:	bd38      	pop	{r3, r4, r5, pc}
   be064:	000bd901 	.word	0x000bd901
   be068:	000bd919 	.word	0x000bd919

000be06c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   be06c:	680b      	ldr	r3, [r1, #0]
   be06e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   be070:	b113      	cbz	r3, be078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   be072:	685a      	ldr	r2, [r3, #4]
   be074:	3201      	adds	r2, #1
   be076:	605a      	str	r2, [r3, #4]
      }
   be078:	4770      	bx	lr

000be07a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   be07a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   be07c:	f851 3b04 	ldr.w	r3, [r1], #4
   be080:	4604      	mov	r4, r0
   be082:	f840 3b04 	str.w	r3, [r0], #4
   be086:	f7ff fff1 	bl	be06c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   be08a:	6823      	ldr	r3, [r4, #0]
   be08c:	b90b      	cbnz	r3, be092 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   be08e:	f7ff fc2d 	bl	bd8ec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   be092:	4620      	mov	r0, r4
   be094:	bd10      	pop	{r4, pc}

000be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be096:	b510      	push	{r4, lr}
   be098:	f851 3b04 	ldr.w	r3, [r1], #4
   be09c:	4604      	mov	r4, r0
   be09e:	f840 3b04 	str.w	r3, [r0], #4
   be0a2:	f7ff ffe3 	bl	be06c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be0a6:	4620      	mov	r0, r4
   be0a8:	bd10      	pop	{r4, pc}

000be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   be0aa:	b510      	push	{r4, lr}
   be0ac:	f851 3b04 	ldr.w	r3, [r1], #4
   be0b0:	4604      	mov	r4, r0
   be0b2:	f840 3b04 	str.w	r3, [r0], #4
   be0b6:	f7ff ffd9 	bl	be06c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   be0ba:	4620      	mov	r0, r4
   be0bc:	bd10      	pop	{r4, pc}

000be0be <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   be0be:	b510      	push	{r4, lr}
   be0c0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   be0c2:	3004      	adds	r0, #4
   be0c4:	f7f7 fa58 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be0c8:	4620      	mov	r0, r4
   be0ca:	bd10      	pop	{r4, pc}

000be0cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be0ce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be0d4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be0d8:	42ae      	cmp	r6, r5
   be0da:	d004      	beq.n	be0e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   be0dc:	1d28      	adds	r0, r5, #4
   be0de:	f7f7 fa4b 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be0e2:	3508      	adds	r5, #8
   be0e4:	e7f8      	b.n	be0d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be0e6:	6820      	ldr	r0, [r4, #0]
   be0e8:	f7ff fb14 	bl	bd714 <free>
}
   be0ec:	4620      	mov	r0, r4
   be0ee:	bd70      	pop	{r4, r5, r6, pc}

000be0f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be0f2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   be0f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be0f8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be0fc:	42ae      	cmp	r6, r5
   be0fe:	d004      	beq.n	be10a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   be100:	1d28      	adds	r0, r5, #4
   be102:	f7f7 fa39 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be106:	3508      	adds	r5, #8
   be108:	e7f8      	b.n	be0fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   be10a:	6820      	ldr	r0, [r4, #0]
   be10c:	f7ff fb02 	bl	bd714 <free>
}
   be110:	4620      	mov	r0, r4
   be112:	bd70      	pop	{r4, r5, r6, pc}

000be114 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be114:	b510      	push	{r4, lr}
   be116:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   be118:	3024      	adds	r0, #36	; 0x24
   be11a:	f7ff ffe9 	bl	be0f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be11e:	f104 0018 	add.w	r0, r4, #24
   be122:	f7ff ffd3 	bl	be0cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   be126:	bd10      	pop	{r4, pc}

000be128 <__tcf_0>:
    static BleLocalDevice instance;
   be128:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   be12a:	4b17      	ldr	r3, [pc, #92]	; (be188 <__tcf_0+0x60>)
   be12c:	681c      	ldr	r4, [r3, #0]
   be12e:	b354      	cbz	r4, be186 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   be130:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be134:	f7f6 f952 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be138:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be13c:	f7f6 f94e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be140:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be144:	f7f6 f94a 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be148:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be14c:	f7f6 f946 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   be150:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   be154:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   be158:	42ae      	cmp	r6, r5
   be15a:	d004      	beq.n	be166 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   be15c:	1d28      	adds	r0, r5, #4
   be15e:	f7f7 fa0b 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be162:	3508      	adds	r5, #8
   be164:	e7f8      	b.n	be158 <__tcf_0+0x30>
    ::free(ptr);
   be166:	69a0      	ldr	r0, [r4, #24]
   be168:	f7ff fad4 	bl	bd714 <free>
    ~BleLocalDeviceImpl() = default;
   be16c:	f104 000c 	add.w	r0, r4, #12
   be170:	f7ff ffbe 	bl	be0f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   be174:	4620      	mov	r0, r4
   be176:	f7ff ffa9 	bl	be0cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   be17a:	4620      	mov	r0, r4
   be17c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   be17e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   be182:	f7f5 bf8e 	b.w	b40a2 <_ZdlPvj>
   be186:	bd70      	pop	{r4, r5, r6, pc}
   be188:	2003e62c 	.word	0x2003e62c

000be18c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   be18c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   be18e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be190:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   be194:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   be198:	6803      	ldr	r3, [r0, #0]
   be19a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be19c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   be19e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   be1a0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   be1a2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   be1a4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   be1a6:	f7f7 f9e7 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   be1aa:	b002      	add	sp, #8
   be1ac:	bd10      	pop	{r4, pc}

000be1ae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   be1ae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   be1b0:	b510      	push	{r4, lr}
      if (_M_empty())
   be1b2:	b90a      	cbnz	r2, be1b8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   be1b4:	f003 f9bc 	bl	c1530 <_ZSt25__throw_bad_function_callv>
    }
   be1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be1bc:	68c3      	ldr	r3, [r0, #12]
   be1be:	4718      	bx	r3

000be1c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   be1c0:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   be1c2:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   be1c4:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be1c6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be1c8:	dd03      	ble.n	be1d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   be1ca:	f7ff faab 	bl	bd724 <realloc>
            if (!d) {
   be1ce:	b918      	cbnz	r0, be1d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   be1d0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   be1d2:	f7ff fa9f 	bl	bd714 <free>
        T* d = nullptr;
   be1d6:	2000      	movs	r0, #0
        data_ = d;
   be1d8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be1da:	60a5      	str	r5, [r4, #8]
        return true;
   be1dc:	2001      	movs	r0, #1
   be1de:	e7f7      	b.n	be1d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000be1e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   be1e0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   be1e2:	6883      	ldr	r3, [r0, #8]
   be1e4:	428b      	cmp	r3, r1
   be1e6:	da02      	bge.n	be1ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   be1e8:	f7ff ffea 	bl	be1c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   be1ec:	bd08      	pop	{r3, pc}
    return true;
   be1ee:	2001      	movs	r0, #1
   be1f0:	e7fc      	b.n	be1ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000be1f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be1f6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be1f8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be1fa:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be1fc:	4419      	add	r1, r3
   be1fe:	6883      	ldr	r3, [r0, #8]
   be200:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   be202:	4604      	mov	r4, r0
   be204:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be206:	dc12      	bgt.n	be22e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   be208:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be20a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be20c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   be20e:	1bd2      	subs	r2, r2, r7
   be210:	4631      	mov	r1, r6
   be212:	1970      	adds	r0, r6, r5
   be214:	f005 fb9a 	bl	c394c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   be218:	462a      	mov	r2, r5
   be21a:	4641      	mov	r1, r8
   be21c:	4630      	mov	r0, r6
   be21e:	f005 fb87 	bl	c3930 <memcpy>
    size_ += n;
   be222:	6863      	ldr	r3, [r4, #4]
   be224:	442b      	add	r3, r5
   be226:	6063      	str	r3, [r4, #4]
    return true;
   be228:	2001      	movs	r0, #1
}
   be22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   be22e:	f7ff ffc7 	bl	be1c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be232:	2800      	cmp	r0, #0
   be234:	d1e8      	bne.n	be208 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   be236:	e7f8      	b.n	be22a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000be238 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be23a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be23c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   be240:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   be242:	4604      	mov	r4, r0
   be244:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be246:	da0b      	bge.n	be260 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   be248:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   be24a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be24c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   be24e:	1b52      	subs	r2, r2, r5
   be250:	1c48      	adds	r0, r1, #1
   be252:	f005 fb7b 	bl	c394c <memmove>
    new(p) T(std::move(value));
   be256:	557e      	strb	r6, [r7, r5]
    ++size_;
   be258:	6863      	ldr	r3, [r4, #4]
   be25a:	3301      	adds	r3, #1
   be25c:	6063      	str	r3, [r4, #4]
}
   be25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be260:	3101      	adds	r1, #1
   be262:	f7ff ffad 	bl	be1c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   be266:	2800      	cmp	r0, #0
   be268:	d1ee      	bne.n	be248 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   be26a:	e7f8      	b.n	be25e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000be26c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be26c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   be26e:	6841      	ldr	r1, [r0, #4]
   be270:	f7ff bfe2 	b.w	be238 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be278:	4604      	mov	r4, r0
   be27a:	461d      	mov	r5, r3
   be27c:	460f      	mov	r7, r1
   be27e:	ab01      	add	r3, sp, #4
   be280:	4690      	mov	r8, r2
   be282:	460a      	mov	r2, r1
   be284:	e9d0 0100 	ldrd	r0, r1, [r0]
   be288:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   be28c:	f7ff fb18 	bl	bd8c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   be290:	1cae      	adds	r6, r5, #2
   be292:	6863      	ldr	r3, [r4, #4]
   be294:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   be296:	f1b9 0f00 	cmp.w	r9, #0
   be29a:	d126      	bne.n	be2ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   be29c:	b328      	cbz	r0, be2ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be29e:	4433      	add	r3, r6
   be2a0:	1a1b      	subs	r3, r3, r0
   be2a2:	2bff      	cmp	r3, #255	; 0xff
   be2a4:	d809      	bhi.n	be2ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   be2a6:	9901      	ldr	r1, [sp, #4]
   be2a8:	4620      	mov	r0, r4
   be2aa:	f7ff fe7a 	bl	bdfa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be2ae:	6861      	ldr	r1, [r4, #4]
   be2b0:	4620      	mov	r0, r4
   be2b2:	4431      	add	r1, r6
   be2b4:	f7ff ff94 	bl	be1e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be2b8:	b918      	cbnz	r0, be2c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   be2ba:	6860      	ldr	r0, [r4, #4]
}
   be2bc:	b003      	add	sp, #12
   be2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   be2c2:	1c6a      	adds	r2, r5, #1
   be2c4:	9901      	ldr	r1, [sp, #4]
   be2c6:	b2d2      	uxtb	r2, r2
   be2c8:	4620      	mov	r0, r4
   be2ca:	f7ff ffb5 	bl	be238 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   be2ce:	9901      	ldr	r1, [sp, #4]
   be2d0:	463a      	mov	r2, r7
   be2d2:	3101      	adds	r1, #1
   be2d4:	4620      	mov	r0, r4
   be2d6:	f7ff ffaf 	bl	be238 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   be2da:	9901      	ldr	r1, [sp, #4]
   be2dc:	462b      	mov	r3, r5
   be2de:	4642      	mov	r2, r8
   be2e0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   be2e2:	4620      	mov	r0, r4
   be2e4:	f7ff ff85 	bl	be1f2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   be2e8:	e7e7      	b.n	be2ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   be2ea:	18f1      	adds	r1, r6, r3
   be2ec:	29ff      	cmp	r1, #255	; 0xff
   be2ee:	d8e4      	bhi.n	be2ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   be2f0:	4620      	mov	r0, r4
   be2f2:	f7ff ff75 	bl	be1e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   be2f6:	2800      	cmp	r0, #0
   be2f8:	d0df      	beq.n	be2ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   be2fa:	1c69      	adds	r1, r5, #1
   be2fc:	b2c9      	uxtb	r1, r1
   be2fe:	4620      	mov	r0, r4
   be300:	f7ff ffb4 	bl	be26c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   be304:	4639      	mov	r1, r7
   be306:	4620      	mov	r0, r4
   be308:	f7ff ffb0 	bl	be26c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   be30c:	6861      	ldr	r1, [r4, #4]
   be30e:	462b      	mov	r3, r5
   be310:	4642      	mov	r2, r8
   be312:	e7e6      	b.n	be2e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000be314 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   be314:	b430      	push	{r4, r5}
   be316:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   be31a:	b11a      	cbz	r2, be324 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   be31c:	9502      	str	r5, [sp, #8]
}
   be31e:	bc30      	pop	{r4, r5}
   be320:	f7ff bfa8 	b.w	be274 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   be324:	6840      	ldr	r0, [r0, #4]
}
   be326:	bc30      	pop	{r4, r5}
   be328:	4770      	bx	lr

000be32a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   be32a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   be32c:	2300      	movs	r3, #0
   be32e:	e9c0 3300 	strd	r3, r3, [r0]
   be332:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be334:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be336:	9300      	str	r3, [sp, #0]
   be338:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   be33a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be33e:	4619      	mov	r1, r3
   be340:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   be344:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   be346:	f7ff ffe5 	bl	be314 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be34a:	4620      	mov	r0, r4
   be34c:	b004      	add	sp, #16
   be34e:	bd10      	pop	{r4, pc}

000be350 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   be350:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   be352:	9300      	str	r3, [sp, #0]
   be354:	4613      	mov	r3, r2
   be356:	460a      	mov	r2, r1
   be358:	21ff      	movs	r1, #255	; 0xff
   be35a:	f7ff ffdb 	bl	be314 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   be35e:	b003      	add	sp, #12
   be360:	f85d fb04 	ldr.w	pc, [sp], #4

000be364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be364:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be368:	4604      	mov	r4, r0
   be36a:	460d      	mov	r5, r1
   be36c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be36e:	d914      	bls.n	be39a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be370:	4290      	cmp	r0, r2
   be372:	d213      	bcs.n	be39c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be374:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be378:	1a75      	subs	r5, r6, r1
   be37a:	f1a1 0708 	sub.w	r7, r1, #8
   be37e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be380:	42b7      	cmp	r7, r6
   be382:	d018      	beq.n	be3b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be384:	b11c      	cbz	r4, be38e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be386:	4631      	mov	r1, r6
   be388:	4620      	mov	r0, r4
   be38a:	f7ff fe8e 	bl	be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   be38e:	1d30      	adds	r0, r6, #4
   be390:	f7f7 f8f2 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be394:	3e08      	subs	r6, #8
   be396:	3c08      	subs	r4, #8
   be398:	e7f2      	b.n	be380 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be39a:	d00c      	beq.n	be3b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be39c:	42b5      	cmp	r5, r6
   be39e:	d00a      	beq.n	be3b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be3a0:	b11c      	cbz	r4, be3aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be3a2:	4629      	mov	r1, r5
   be3a4:	4620      	mov	r0, r4
   be3a6:	f7ff fe80 	bl	be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be3aa:	1d28      	adds	r0, r5, #4
   be3ac:	f7f7 f8e4 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be3b0:	3508      	adds	r5, #8
   be3b2:	3408      	adds	r4, #8
   be3b4:	e7f2      	b.n	be39c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be3b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be3ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be3bc:	6846      	ldr	r6, [r0, #4]
   be3be:	4668      	mov	r0, sp
   be3c0:	f7ff fe73 	bl	be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be3c4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   be3c8:	429f      	cmp	r7, r3
   be3ca:	db12      	blt.n	be3f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   be3cc:	3701      	adds	r7, #1
        if (n > 0) {
   be3ce:	2f00      	cmp	r7, #0
   be3d0:	dd29      	ble.n	be426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   be3d2:	00f8      	lsls	r0, r7, #3
   be3d4:	f7ff f996 	bl	bd704 <malloc>
            if (!d) {
   be3d8:	4605      	mov	r5, r0
   be3da:	b1f0      	cbz	r0, be41a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   be3dc:	e9d4 1200 	ldrd	r1, r2, [r4]
   be3e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be3e4:	f7ff ffbe 	bl	be364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be3e8:	6820      	ldr	r0, [r4, #0]
   be3ea:	f7ff f993 	bl	bd714 <free>
        data_ = d;
   be3ee:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   be3f0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be3f2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be3f4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be3f6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   be3fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be3fe:	4631      	mov	r1, r6
   be400:	f106 0008 	add.w	r0, r6, #8
   be404:	f7ff ffae 	bl	be364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be408:	b11e      	cbz	r6, be412 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   be40a:	4669      	mov	r1, sp
   be40c:	4630      	mov	r0, r6
   be40e:	f7ff fe4c 	bl	be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   be412:	6863      	ldr	r3, [r4, #4]
   be414:	3301      	adds	r3, #1
   be416:	6063      	str	r3, [r4, #4]
    return true;
   be418:	2501      	movs	r5, #1
   be41a:	a801      	add	r0, sp, #4
   be41c:	f7f7 f8ac 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be420:	4628      	mov	r0, r5
   be422:	b003      	add	sp, #12
   be424:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   be426:	2500      	movs	r5, #0
   be428:	e7de      	b.n	be3e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000be42a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   be42c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   be430:	4605      	mov	r5, r0
   be432:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   be434:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   be438:	42a6      	cmp	r6, r4
   be43a:	d005      	beq.n	be448 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   be43c:	4639      	mov	r1, r7
   be43e:	4620      	mov	r0, r4
   be440:	f7ff fce1 	bl	bde06 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   be444:	b108      	cbz	r0, be44a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   be446:	b914      	cbnz	r4, be44e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   be448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   be44a:	3408      	adds	r4, #8
   be44c:	e7f4      	b.n	be438 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   be44e:	1d20      	adds	r0, r4, #4
   be450:	f7f7 f892 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   be454:	e9d5 3200 	ldrd	r3, r2, [r5]
   be458:	f104 0108 	add.w	r1, r4, #8
   be45c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be460:	4620      	mov	r0, r4
   be462:	f7ff ff7f 	bl	be364 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   be466:	686b      	ldr	r3, [r5, #4]
   be468:	3b01      	subs	r3, #1
   be46a:	606b      	str	r3, [r5, #4]
    return true;
   be46c:	e7ec      	b.n	be448 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000be470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be474:	4605      	mov	r5, r0
   be476:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   be478:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   be47a:	460c      	mov	r4, r1
        WiringBleLock lk;
   be47c:	f7ff faa0 	bl	bd9c0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   be480:	682e      	ldr	r6, [r5, #0]
   be482:	1ef3      	subs	r3, r6, #3
   be484:	2b0d      	cmp	r3, #13
   be486:	d83c      	bhi.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be488:	e8df f013 	tbh	[pc, r3, lsl #1]
   be48c:	0053000e 	.word	0x0053000e
   be490:	00d1003b 	.word	0x00d1003b
   be494:	003b003b 	.word	0x003b003b
   be498:	003b003b 	.word	0x003b003b
   be49c:	009b003b 	.word	0x009b003b
   be4a0:	009b009b 	.word	0x009b009b
   be4a4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   be4a8:	a804      	add	r0, sp, #16
   be4aa:	f7ff fc77 	bl	bdd9c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   be4ae:	9b04      	ldr	r3, [sp, #16]
   be4b0:	89aa      	ldrh	r2, [r5, #12]
   be4b2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   be4b4:	6869      	ldr	r1, [r5, #4]
   be4b6:	9804      	ldr	r0, [sp, #16]
   be4b8:	3108      	adds	r1, #8
   be4ba:	3002      	adds	r0, #2
   be4bc:	f7ff fa9a 	bl	bd9f4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   be4c0:	a904      	add	r1, sp, #16
   be4c2:	a806      	add	r0, sp, #24
   be4c4:	f7ff fdf1 	bl	be0aa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   be4c8:	a906      	add	r1, sp, #24
   be4ca:	f104 0018 	add.w	r0, r4, #24
   be4ce:	f7ff ff73 	bl	be3b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   be4d2:	4605      	mov	r5, r0
   be4d4:	a807      	add	r0, sp, #28
   be4d6:	f7f7 f84f 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be4da:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   be4dc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   be4de:	b9b5      	cbnz	r5, be50e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   be4e0:	4b5d      	ldr	r3, [pc, #372]	; (be658 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   be4e2:	495e      	ldr	r1, [pc, #376]	; (be65c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be4e4:	9300      	str	r3, [sp, #0]
   be4e6:	2032      	movs	r0, #50	; 0x32
   be4e8:	462b      	mov	r3, r5
   be4ea:	aa06      	add	r2, sp, #24
   be4ec:	9507      	str	r5, [sp, #28]
   be4ee:	f7ff f80b 	bl	bd508 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   be4f2:	9b04      	ldr	r3, [sp, #16]
   be4f4:	4629      	mov	r1, r5
   be4f6:	8818      	ldrh	r0, [r3, #0]
   be4f8:	f7fe fd64 	bl	bcfc4 <hal_ble_gap_disconnect>
   be4fc:	a805      	add	r0, sp, #20
   be4fe:	f7f7 f83b 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   be502:	a803      	add	r0, sp, #12
   be504:	f7ff fa6a 	bl	bd9dc <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   be508:	b00e      	add	sp, #56	; 0x38
   be50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   be50e:	4a54      	ldr	r2, [pc, #336]	; (be660 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   be510:	9200      	str	r2, [sp, #0]
   be512:	2300      	movs	r3, #0
   be514:	4951      	ldr	r1, [pc, #324]	; (be65c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be516:	9307      	str	r3, [sp, #28]
   be518:	aa06      	add	r2, sp, #24
   be51a:	2001      	movs	r0, #1
   be51c:	f7fe fff4 	bl	bd508 <log_message>
                if (impl->connectedCallback_) {
   be520:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   be522:	2b00      	cmp	r3, #0
   be524:	d0ea      	beq.n	be4fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   be526:	a904      	add	r1, sp, #16
   be528:	f104 0024 	add.w	r0, r4, #36	; 0x24
   be52c:	f7ff fe3f 	bl	be1ae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   be530:	e7e4      	b.n	be4fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be532:	89a9      	ldrh	r1, [r5, #12]
   be534:	4620      	mov	r0, r4
   be536:	f7ff fb9b 	bl	bdc70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be53a:	4606      	mov	r6, r0
   be53c:	2800      	cmp	r0, #0
   be53e:	d0e0      	beq.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   be540:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   be542:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   be546:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be54a:	8029      	strh	r1, [r5, #0]
   be54c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   be550:	429a      	cmp	r2, r3
   be552:	d003      	beq.n	be55c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   be554:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   be558:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   be55a:	e7f9      	b.n	be550 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   be55c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   be560:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be564:	45b8      	cmp	r8, r7
   be566:	d004      	beq.n	be572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   be568:	1d38      	adds	r0, r7, #4
   be56a:	f7f7 f805 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be56e:	3708      	adds	r7, #8
   be570:	e7f8      	b.n	be564 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   be572:	2300      	movs	r3, #0
   be574:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   be576:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   be57a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   be57e:	45b8      	cmp	r8, r7
   be580:	d004      	beq.n	be58c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   be582:	1d38      	adds	r0, r7, #4
   be584:	f7f6 fff8 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be588:	3708      	adds	r7, #8
   be58a:	e7f8      	b.n	be57e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   be58c:	2300      	movs	r3, #0
   be58e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   be590:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   be592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   be594:	b123      	cbz	r3, be5a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   be596:	4631      	mov	r1, r6
   be598:	f104 0034 	add.w	r0, r4, #52	; 0x34
   be59c:	f7ff fe07 	bl	be1ae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   be5a0:	2300      	movs	r3, #0
   be5a2:	2220      	movs	r2, #32
   be5a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   be5a8:	4a2e      	ldr	r2, [pc, #184]	; (be664 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   be5aa:	9200      	str	r2, [sp, #0]
   be5ac:	492b      	ldr	r1, [pc, #172]	; (be65c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   be5ae:	aa06      	add	r2, sp, #24
   be5b0:	2001      	movs	r0, #1
   be5b2:	f7fe ffa9 	bl	bd508 <log_message>
                    impl->peers_.removeOne(*peer);
   be5b6:	4631      	mov	r1, r6
   be5b8:	f104 0018 	add.w	r0, r4, #24
   be5bc:	f7ff ff35 	bl	be42a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   be5c0:	e79f      	b.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be5c2:	89a9      	ldrh	r1, [r5, #12]
   be5c4:	4620      	mov	r0, r4
   be5c6:	f7ff fb53 	bl	bdc70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   be5ca:	2800      	cmp	r0, #0
   be5cc:	d099      	beq.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   be5ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   be5d0:	2b00      	cmp	r3, #0
   be5d2:	d096      	beq.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   be5d4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be5d6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   be5d8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   be5dc:	d001      	beq.n	be5e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   be5de:	2e10      	cmp	r6, #16
   be5e0:	d117      	bne.n	be612 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   be5e2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   be5e4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   be5e6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   be5e8:	2506      	movs	r5, #6
                        };
   be5ea:	f88d 3015 	strb.w	r3, [sp, #21]
   be5ee:	9104      	str	r1, [sp, #16]
   be5f0:	f88d 2014 	strb.w	r2, [sp, #20]
   be5f4:	9006      	str	r0, [sp, #24]
   be5f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   be5fa:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   be5fc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   be600:	9508      	str	r5, [sp, #32]
   be602:	e883 0003 	stmia.w	r3, {r0, r1}
   be606:	6d23      	ldr	r3, [r4, #80]	; 0x50
   be608:	a906      	add	r1, sp, #24
   be60a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   be60e:	4798      	blx	r3
   be610:	e777      	b.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   be612:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   be614:	bf01      	itttt	eq
   be616:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   be618:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   be61a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   be61e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   be620:	bf0f      	iteee	eq
   be622:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   be626:	461a      	movne	r2, r3
   be628:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   be62a:	461d      	movne	r5, r3
   be62c:	e7dd      	b.n	be5ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   be62e:	89a9      	ldrh	r1, [r5, #12]
   be630:	4620      	mov	r0, r4
   be632:	f7ff fb1d 	bl	bdc70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   be636:	4601      	mov	r1, r0
   be638:	2800      	cmp	r0, #0
   be63a:	f43f af62 	beq.w	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be63e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   be640:	2b00      	cmp	r3, #0
   be642:	f43f af5e 	beq.w	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   be646:	686b      	ldr	r3, [r5, #4]
   be648:	9306      	str	r3, [sp, #24]
   be64a:	aa06      	add	r2, sp, #24
   be64c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   be64e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   be652:	4798      	blx	r3
   be654:	e755      	b.n	be502 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   be656:	bf00      	nop
   be658:	000c6fa1 	.word	0x000c6fa1
   be65c:	000c6f20 	.word	0x000c6f20
   be660:	000c6fc7 	.word	0x000c6fc7
   be664:	000c6fe4 	.word	0x000c6fe4

000be668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   be668:	b513      	push	{r0, r1, r4, lr}
   be66a:	460b      	mov	r3, r1
   be66c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be66e:	e9d0 0100 	ldrd	r0, r1, [r0]
   be672:	466c      	mov	r4, sp
   be674:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   be678:	e893 0003 	ldmia.w	r3, {r0, r1}
   be67c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   be680:	e894 0003 	ldmia.w	r4, {r0, r1}
   be684:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   be688:	b002      	add	sp, #8
   be68a:	bd10      	pop	{r4, pc}

000be68c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   be68c:	b538      	push	{r3, r4, r5, lr}
   be68e:	4605      	mov	r5, r0
   be690:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   be692:	f7ff ffe9 	bl	be668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be696:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   be698:	68a2      	ldr	r2, [r4, #8]
   be69a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be69c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   be69e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   be6a0:	68e2      	ldr	r2, [r4, #12]
   be6a2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   be6a4:	60e3      	str	r3, [r4, #12]
      }
   be6a6:	bd38      	pop	{r3, r4, r5, pc}

000be6a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   be6a8:	b570      	push	{r4, r5, r6, lr}
   be6aa:	4604      	mov	r4, r0
   be6ac:	b08c      	sub	sp, #48	; 0x30
   be6ae:	460e      	mov	r6, r1
   be6b0:	9201      	str	r2, [sp, #4]
   be6b2:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   be6b4:	f7ff fabc 	bl	bdc30 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   be6b8:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   be6ba:	9901      	ldr	r1, [sp, #4]
   be6bc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be6c0:	f002 fb9b 	bl	c0dfa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   be6c4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   be6c8:	b1cd      	cbz	r5, be6fe <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   be6ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   be6cc:	9502      	str	r5, [sp, #8]
   be6ce:	a902      	add	r1, sp, #8
   be6d0:	a804      	add	r0, sp, #16
   be6d2:	9303      	str	r3, [sp, #12]
   be6d4:	f7ff fcb2 	bl	be03c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   be6d8:	2300      	movs	r3, #0
	__x.swap(*this);
   be6da:	a908      	add	r1, sp, #32
   be6dc:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   be6de:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   be6e0:	f7ff ffd4 	bl	be68c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   be6e4:	4631      	mov	r1, r6
   be6e6:	a808      	add	r0, sp, #32
   be6e8:	f7ff ffd0 	bl	be68c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   be6ec:	a808      	add	r0, sp, #32
   be6ee:	f7f5 fe75 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   be6f2:	a804      	add	r0, sp, #16
   be6f4:	f7f5 fe72 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
    }
   be6f8:	4620      	mov	r0, r4
   be6fa:	b00c      	add	sp, #48	; 0x30
   be6fc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   be6fe:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   be700:	e7ea      	b.n	be6d8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000be704 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   be704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be708:	b087      	sub	sp, #28
   be70a:	461d      	mov	r5, r3
   be70c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   be710:	4680      	mov	r8, r0
   be712:	468b      	mov	fp, r1
   be714:	4692      	mov	sl, r2
   be716:	9912      	ldr	r1, [sp, #72]	; 0x48
   be718:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be71a:	2200      	movs	r2, #0
   be71c:	2068      	movs	r0, #104	; 0x68
   be71e:	9102      	str	r1, [sp, #8]
   be720:	9204      	str	r2, [sp, #16]
   be722:	f7f5 fcb8 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be726:	1e06      	subs	r6, r0, #0
   be728:	f106 090c 	add.w	r9, r6, #12
   be72c:	d018      	beq.n	be760 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   be72e:	2201      	movs	r2, #1
	: _M_impl(__a)
   be730:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   be732:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   be736:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   be738:	4a15      	ldr	r2, [pc, #84]	; (be790 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   be73a:	f847 2b20 	str.w	r2, [r7], #32
   be73e:	9b03      	ldr	r3, [sp, #12]
   be740:	9100      	str	r1, [sp, #0]
   be742:	465a      	mov	r2, fp
   be744:	4651      	mov	r1, sl
   be746:	4648      	mov	r0, r9
   be748:	f7ff ffae 	bl	be6a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   be74c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be74e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   be750:	682b      	ldr	r3, [r5, #0]
   be752:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   be754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   be756:	f106 0534 	add.w	r5, r6, #52	; 0x34
   be75a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   be75c:	6823      	ldr	r3, [r4, #0]
   be75e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   be760:	a904      	add	r1, sp, #16
   be762:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   be764:	e9cd 9604 	strd	r9, r6, [sp, #16]
   be768:	f7ff fd10 	bl	be18c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   be76c:	a805      	add	r0, sp, #20
   be76e:	f7f6 ff03 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   be772:	f8d8 3000 	ldr.w	r3, [r8]
   be776:	b93b      	cbnz	r3, be788 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   be778:	4a06      	ldr	r2, [pc, #24]	; (be794 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   be77a:	4907      	ldr	r1, [pc, #28]	; (be798 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   be77c:	200a      	movs	r0, #10
}
   be77e:	b007      	add	sp, #28
   be780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   be784:	f7fe beb8 	b.w	bd4f8 <panic_>
}
   be788:	b007      	add	sp, #28
   be78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be78e:	bf00      	nop
   be790:	000c7060 	.word	0x000c7060
   be794:	000bd139 	.word	0x000bd139
   be798:	000c6f09 	.word	0x000c6f09

000be79c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be79c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be7a0:	4604      	mov	r4, r0
   be7a2:	460d      	mov	r5, r1
   be7a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be7a6:	d914      	bls.n	be7d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be7a8:	4290      	cmp	r0, r2
   be7aa:	d213      	bcs.n	be7d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be7ac:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be7b0:	1a75      	subs	r5, r6, r1
   be7b2:	f1a1 0708 	sub.w	r7, r1, #8
   be7b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be7b8:	42b7      	cmp	r7, r6
   be7ba:	d018      	beq.n	be7ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be7bc:	b11c      	cbz	r4, be7c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   be7be:	4631      	mov	r1, r6
   be7c0:	4620      	mov	r0, r4
   be7c2:	f7ff fc68 	bl	be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be7c6:	1d30      	adds	r0, r6, #4
   be7c8:	f7f6 fed6 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be7cc:	3e08      	subs	r6, #8
   be7ce:	3c08      	subs	r4, #8
   be7d0:	e7f2      	b.n	be7b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be7d2:	d00c      	beq.n	be7ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be7d4:	42b5      	cmp	r5, r6
   be7d6:	d00a      	beq.n	be7ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be7d8:	b11c      	cbz	r4, be7e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be7da:	4629      	mov	r1, r5
   be7dc:	4620      	mov	r0, r4
   be7de:	f7ff fc5a 	bl	be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be7e2:	1d28      	adds	r0, r5, #4
   be7e4:	f7f6 fec8 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be7e8:	3508      	adds	r5, #8
   be7ea:	3408      	adds	r4, #8
   be7ec:	e7f2      	b.n	be7d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be7f0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be7f2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be7f4:	4605      	mov	r5, r0
        if (n > 0) {
   be7f6:	dd11      	ble.n	be81c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be7f8:	00f0      	lsls	r0, r6, #3
   be7fa:	f7fe ff83 	bl	bd704 <malloc>
            if (!d) {
   be7fe:	4604      	mov	r4, r0
   be800:	b158      	cbz	r0, be81a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be802:	e9d5 1200 	ldrd	r1, r2, [r5]
   be806:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be80a:	f7ff ffc7 	bl	be79c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be80e:	6828      	ldr	r0, [r5, #0]
   be810:	f7fe ff80 	bl	bd714 <free>
        data_ = d;
   be814:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be816:	60ae      	str	r6, [r5, #8]
        return true;
   be818:	2001      	movs	r0, #1
    }
   be81a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be81c:	2400      	movs	r4, #0
   be81e:	e7f6      	b.n	be80e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be820 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be820:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be822:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be824:	6845      	ldr	r5, [r0, #4]
   be826:	4668      	mov	r0, sp
   be828:	f7ff fc35 	bl	be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be82c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be830:	4299      	cmp	r1, r3
   be832:	da10      	bge.n	be856 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be834:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be836:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be838:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be83c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be840:	4629      	mov	r1, r5
   be842:	f105 0008 	add.w	r0, r5, #8
   be846:	f7ff ffa9 	bl	be79c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be84a:	b98d      	cbnz	r5, be870 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be84c:	6863      	ldr	r3, [r4, #4]
   be84e:	3301      	adds	r3, #1
   be850:	6063      	str	r3, [r4, #4]
    return true;
   be852:	2601      	movs	r6, #1
   be854:	e006      	b.n	be864 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be856:	3101      	adds	r1, #1
   be858:	4620      	mov	r0, r4
   be85a:	f7ff ffc9 	bl	be7f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be85e:	4606      	mov	r6, r0
   be860:	2800      	cmp	r0, #0
   be862:	d1e7      	bne.n	be834 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   be864:	a801      	add	r0, sp, #4
   be866:	f7f6 fe87 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be86a:	4630      	mov	r0, r6
   be86c:	b002      	add	sp, #8
   be86e:	bd70      	pop	{r4, r5, r6, pc}
   be870:	4669      	mov	r1, sp
   be872:	4628      	mov	r0, r5
   be874:	f7ff fc0f 	bl	be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   be878:	e7e8      	b.n	be84c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be87a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   be87a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   be87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be87e:	4604      	mov	r4, r0
   be880:	460d      	mov	r5, r1
   be882:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   be884:	d914      	bls.n	be8b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   be886:	4290      	cmp	r0, r2
   be888:	d213      	bcs.n	be8b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   be88a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   be88e:	1a75      	subs	r5, r6, r1
   be890:	f1a1 0708 	sub.w	r7, r1, #8
   be894:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   be896:	42b7      	cmp	r7, r6
   be898:	d018      	beq.n	be8cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   be89a:	b11c      	cbz	r4, be8a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   be89c:	4631      	mov	r1, r6
   be89e:	4620      	mov	r0, r4
   be8a0:	f7ff fbeb 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be8a4:	1d30      	adds	r0, r6, #4
   be8a6:	f7f6 fe67 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   be8aa:	3e08      	subs	r6, #8
   be8ac:	3c08      	subs	r4, #8
   be8ae:	e7f2      	b.n	be896 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   be8b0:	d00c      	beq.n	be8cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   be8b2:	42b5      	cmp	r5, r6
   be8b4:	d00a      	beq.n	be8cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   be8b6:	b11c      	cbz	r4, be8c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   be8b8:	4629      	mov	r1, r5
   be8ba:	4620      	mov	r0, r4
   be8bc:	f7ff fbdd 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be8c0:	1d28      	adds	r0, r5, #4
   be8c2:	f7f6 fe59 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   be8c6:	3508      	adds	r5, #8
   be8c8:	3408      	adds	r4, #8
   be8ca:	e7f2      	b.n	be8b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   be8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000be8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   be8ce:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   be8d0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   be8d2:	4605      	mov	r5, r0
        if (n > 0) {
   be8d4:	dd11      	ble.n	be8fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   be8d6:	00f0      	lsls	r0, r6, #3
   be8d8:	f7fe ff14 	bl	bd704 <malloc>
            if (!d) {
   be8dc:	4604      	mov	r4, r0
   be8de:	b158      	cbz	r0, be8f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   be8e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   be8e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   be8e8:	f7ff ffc7 	bl	be87a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   be8ec:	6828      	ldr	r0, [r5, #0]
   be8ee:	f7fe ff11 	bl	bd714 <free>
        data_ = d;
   be8f2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   be8f4:	60ae      	str	r6, [r5, #8]
        return true;
   be8f6:	2001      	movs	r0, #1
    }
   be8f8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   be8fa:	2400      	movs	r4, #0
   be8fc:	e7f6      	b.n	be8ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000be8fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   be900:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   be902:	6845      	ldr	r5, [r0, #4]
   be904:	4668      	mov	r0, sp
   be906:	f7ff fbb8 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be90a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   be90e:	4299      	cmp	r1, r3
   be910:	da10      	bge.n	be934 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   be912:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   be914:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be916:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   be91a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   be91e:	4629      	mov	r1, r5
   be920:	f105 0008 	add.w	r0, r5, #8
   be924:	f7ff ffa9 	bl	be87a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   be928:	b98d      	cbnz	r5, be94e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   be92a:	6863      	ldr	r3, [r4, #4]
   be92c:	3301      	adds	r3, #1
   be92e:	6063      	str	r3, [r4, #4]
    return true;
   be930:	2601      	movs	r6, #1
   be932:	e006      	b.n	be942 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be934:	3101      	adds	r1, #1
   be936:	4620      	mov	r0, r4
   be938:	f7ff ffc9 	bl	be8ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   be93c:	4606      	mov	r6, r0
   be93e:	2800      	cmp	r0, #0
   be940:	d1e7      	bne.n	be912 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   be942:	a801      	add	r0, sp, #4
   be944:	f7f6 fe18 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be948:	4630      	mov	r0, r6
   be94a:	b002      	add	sp, #8
   be94c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   be94e:	4669      	mov	r1, sp
   be950:	4628      	mov	r0, r5
   be952:	f7ff fb92 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
   be956:	e7e8      	b.n	be92a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000be958 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be95c:	4617      	mov	r7, r2
   be95e:	b0a1      	sub	sp, #132	; 0x84
   be960:	4680      	mov	r8, r0
    WiringBleLock lk;
   be962:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   be964:	460e      	mov	r6, r1
    WiringBleLock lk;
   be966:	f7ff f82b 	bl	bd9c0 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be96a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   be96c:	7923      	ldrb	r3, [r4, #4]
   be96e:	b953      	cbnz	r3, be986 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   be970:	4639      	mov	r1, r7
   be972:	4640      	mov	r0, r8
   be974:	f7ff fb81 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   be978:	a80a      	add	r0, sp, #40	; 0x28
   be97a:	f7ff f82f 	bl	bd9dc <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   be97e:	4640      	mov	r0, r8
   be980:	b021      	add	sp, #132	; 0x84
   be982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   be986:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   be988:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   be98c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   be990:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   be992:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   be996:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   be99a:	9b03      	ldr	r3, [sp, #12]
   be99c:	429d      	cmp	r5, r3
   be99e:	d021      	beq.n	be9e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   be9a0:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   be9a4:	4658      	mov	r0, fp
   be9a6:	f109 0114 	add.w	r1, r9, #20
   be9aa:	f7ff f8b6 	bl	bdb1a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   be9ae:	b1b8      	cbz	r0, be9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   be9b0:	f109 0128 	add.w	r1, r9, #40	; 0x28
   be9b4:	4650      	mov	r0, sl
   be9b6:	f7ff f8b0 	bl	bdb1a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   be9ba:	b188      	cbz	r0, be9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   be9bc:	6823      	ldr	r3, [r4, #0]
   be9be:	f8d9 2000 	ldr.w	r2, [r9]
   be9c2:	4053      	eors	r3, r2
   be9c4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   be9c8:	d10a      	bne.n	be9e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   be9ca:	2220      	movs	r2, #32
   be9cc:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   be9d0:	4a5e      	ldr	r2, [pc, #376]	; (beb4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   be9d2:	9200      	str	r2, [sp, #0]
   be9d4:	aa15      	add	r2, sp, #84	; 0x54
   be9d6:	495e      	ldr	r1, [pc, #376]	; (beb50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   be9d8:	2032      	movs	r0, #50	; 0x32
   be9da:	f7fe fd95 	bl	bd508 <log_message>
   be9de:	e7c7      	b.n	be970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   be9e0:	3508      	adds	r5, #8
   be9e2:	e7da      	b.n	be99a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   be9e4:	4650      	mov	r0, sl
   be9e6:	f7ff f869 	bl	bdabc <_ZNK8particle7BleUuid7isValidEv>
   be9ea:	b960      	cbnz	r0, bea06 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   be9ec:	4959      	ldr	r1, [pc, #356]	; (beb54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   be9ee:	2201      	movs	r2, #1
   be9f0:	a815      	add	r0, sp, #84	; 0x54
   be9f2:	ad15      	add	r5, sp, #84	; 0x54
   be9f4:	f7ff f83a 	bl	bda6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   be9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   be9fa:	46d4      	mov	ip, sl
   be9fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bea00:	682b      	ldr	r3, [r5, #0]
   bea02:	f8cc 3000 	str.w	r3, [ip]
   bea06:	6833      	ldr	r3, [r6, #0]
   bea08:	e9d3 5300 	ldrd	r5, r3, [r3]
   bea0c:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bea10:	455d      	cmp	r5, fp
   bea12:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bea14:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bea16:	d06e      	beq.n	beaf6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bea18:	f855 0b08 	ldr.w	r0, [r5], #8
   bea1c:	f7ff f87d 	bl	bdb1a <_ZNK8particle7BleUuideqERKS0_>
   bea20:	2800      	cmp	r0, #0
   bea22:	d0f5      	beq.n	bea10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bea24:	f104 0a14 	add.w	sl, r4, #20
   bea28:	4650      	mov	r0, sl
   bea2a:	f7ff f847 	bl	bdabc <_ZNK8particle7BleUuid7isValidEv>
   bea2e:	b988      	cbnz	r0, bea54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bea30:	4b49      	ldr	r3, [pc, #292]	; (beb58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bea32:	4948      	ldr	r1, [pc, #288]	; (beb54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bea34:	881a      	ldrh	r2, [r3, #0]
   bea36:	3201      	adds	r2, #1
   bea38:	b292      	uxth	r2, r2
   bea3a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bea3c:	a815      	add	r0, sp, #84	; 0x54
   bea3e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bea40:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bea42:	f7ff f832 	bl	bdaaa <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bea46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bea48:	46d4      	mov	ip, sl
   bea4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bea4e:	682b      	ldr	r3, [r5, #0]
   bea50:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bea54:	4b41      	ldr	r3, [pc, #260]	; (beb5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bea56:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bea58:	2228      	movs	r2, #40	; 0x28
   bea5a:	2100      	movs	r1, #0
   bea5c:	a816      	add	r0, sp, #88	; 0x58
   bea5e:	f004 ff8f 	bl	c3980 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bea62:	4651      	mov	r1, sl
   bea64:	a804      	add	r0, sp, #16
   bea66:	f7ff f83b 	bl	bdae0 <_ZN8particle7BleUuid7halUUIDEv>
   bea6a:	ab04      	add	r3, sp, #16
   bea6c:	aa18      	add	r2, sp, #96	; 0x60
   bea6e:	f10d 0c20 	add.w	ip, sp, #32
   bea72:	6818      	ldr	r0, [r3, #0]
   bea74:	6859      	ldr	r1, [r3, #4]
   bea76:	4615      	mov	r5, r2
   bea78:	c503      	stmia	r5!, {r0, r1}
   bea7a:	3308      	adds	r3, #8
   bea7c:	4563      	cmp	r3, ip
   bea7e:	462a      	mov	r2, r5
   bea80:	d1f7      	bne.n	bea72 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bea82:	6818      	ldr	r0, [r3, #0]
   bea84:	6028      	str	r0, [r5, #0]
    return value_;
   bea86:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bea88:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bea8c:	f8d9 3000 	ldr.w	r3, [r9]
   bea90:	8a9b      	ldrh	r3, [r3, #20]
   bea92:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bea96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bea98:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bea9a:	4b31      	ldr	r3, [pc, #196]	; (beb60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bea9c:	2200      	movs	r2, #0
   bea9e:	1da1      	adds	r1, r4, #6
   beaa0:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   beaa2:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   beaa6:	f7fe fabf 	bl	bd028 <hal_ble_gatt_server_add_characteristic>
   beaaa:	2800      	cmp	r0, #0
   beaac:	f47f af60 	bne.w	be970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   beab0:	2301      	movs	r3, #1
   beab2:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   beab4:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   beab6:	4639      	mov	r1, r7
        return characteristics_;
   beab8:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   beaba:	a80d      	add	r0, sp, #52	; 0x34
   beabc:	f7ff fadd 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
   beac0:	4620      	mov	r0, r4
   beac2:	a90d      	add	r1, sp, #52	; 0x34
   beac4:	f7ff ff1b 	bl	be8fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   beac8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   beaca:	a80e      	add	r0, sp, #56	; 0x38
   beacc:	f7f6 fd54 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bead0:	2c00      	cmp	r4, #0
   bead2:	f47f af4d 	bne.w	be970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bead6:	2320      	movs	r3, #32
   bead8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   beadc:	4b21      	ldr	r3, [pc, #132]	; (beb64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   beade:	9300      	str	r3, [sp, #0]
   beae0:	aa0d      	add	r2, sp, #52	; 0x34
   beae2:	4623      	mov	r3, r4
   beae4:	e777      	b.n	be9d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   beae6:	4639      	mov	r1, r7
   beae8:	4640      	mov	r0, r8
   beaea:	f7ff fac6 	bl	be07a <_ZN8particle17BleCharacteristicC1ERKS0_>
   beaee:	a80c      	add	r0, sp, #48	; 0x30
   beaf0:	f7f6 fd42 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beaf4:	e740      	b.n	be978 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   beaf6:	a80b      	add	r0, sp, #44	; 0x2c
   beaf8:	f7ff f92c 	bl	bdd54 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   beafc:	4651      	mov	r1, sl
   beafe:	a815      	add	r0, sp, #84	; 0x54
   beb00:	f7fe ffee 	bl	bdae0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   beb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   beb06:	2300      	movs	r3, #0
   beb08:	3214      	adds	r2, #20
   beb0a:	a915      	add	r1, sp, #84	; 0x54
   beb0c:	2001      	movs	r0, #1
   beb0e:	f7fe fa63 	bl	bcfd8 <hal_ble_gatt_server_add_service>
   beb12:	2800      	cmp	r0, #0
   beb14:	d1e7      	bne.n	beae6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   beb16:	6835      	ldr	r5, [r6, #0]
   beb18:	a90b      	add	r1, sp, #44	; 0x2c
   beb1a:	a80d      	add	r0, sp, #52	; 0x34
   beb1c:	f7ff fabb 	bl	be096 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   beb20:	4628      	mov	r0, r5
   beb22:	a90d      	add	r1, sp, #52	; 0x34
   beb24:	f7ff fe7c 	bl	be820 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   beb28:	4605      	mov	r5, r0
   beb2a:	a80e      	add	r0, sp, #56	; 0x38
   beb2c:	f7f6 fd24 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beb30:	2d00      	cmp	r5, #0
   beb32:	d0d8      	beq.n	beae6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   beb34:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   beb36:	6853      	ldr	r3, [r2, #4]
   beb38:	6812      	ldr	r2, [r2, #0]
   beb3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   beb3e:	3b01      	subs	r3, #1
   beb40:	a80c      	add	r0, sp, #48	; 0x30
   beb42:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   beb46:	f7f6 fd17 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   beb4a:	e76b      	b.n	bea24 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   beb4c:	000c7003 	.word	0x000c7003
   beb50:	000c6f20 	.word	0x000c6f20
   beb54:	000c70ca 	.word	0x000c70ca
   beb58:	2003e624 	.word	0x2003e624
   beb5c:	002c0003 	.word	0x002c0003
   beb60:	000bdeed 	.word	0x000bdeed
   beb64:	000c702e 	.word	0x000c702e

000beb68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   beb68:	4802      	ldr	r0, [pc, #8]	; (beb74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   beb6a:	2300      	movs	r3, #0
   beb6c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   beb6e:	f7fe bab3 	b.w	bd0d8 <os_mutex_recursive_create>
   beb72:	bf00      	nop
   beb74:	2003e628 	.word	0x2003e628

000beb78 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   beb78:	2200      	movs	r2, #0
   beb7a:	6840      	ldr	r0, [r0, #4]
   beb7c:	4611      	mov	r1, r2
   beb7e:	f7fe bd79 	b.w	bd674 <network_ready>

000beb82 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   beb82:	2200      	movs	r2, #0
   beb84:	6840      	ldr	r0, [r0, #4]
   beb86:	4611      	mov	r1, r2
   beb88:	f7fe bd94 	b.w	bd6b4 <network_listening>

000beb8c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   beb8c:	2200      	movs	r2, #0
   beb8e:	6840      	ldr	r0, [r0, #4]
   beb90:	4611      	mov	r1, r2
   beb92:	f7fe bd9f 	b.w	bd6d4 <network_get_listen_timeout>

000beb96 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   beb96:	6840      	ldr	r0, [r0, #4]
   beb98:	2200      	movs	r2, #0
   beb9a:	f7fe bd93 	b.w	bd6c4 <network_set_listen_timeout>

000beb9e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   beb9e:	6840      	ldr	r0, [r0, #4]
   beba0:	2200      	movs	r2, #0
   beba2:	f081 0101 	eor.w	r1, r1, #1
   beba6:	f7fe bd7d 	b.w	bd6a4 <network_listen>

000bebaa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bebaa:	2300      	movs	r3, #0
   bebac:	6840      	ldr	r0, [r0, #4]
   bebae:	461a      	mov	r2, r3
   bebb0:	4619      	mov	r1, r3
   bebb2:	f7fe bd6f 	b.w	bd694 <network_off>

000bebb6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bebb6:	2300      	movs	r3, #0
   bebb8:	6840      	ldr	r0, [r0, #4]
   bebba:	461a      	mov	r2, r3
   bebbc:	4619      	mov	r1, r3
   bebbe:	f7fe bd61 	b.w	bd684 <network_on>

000bebc2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bebc2:	2200      	movs	r2, #0
   bebc4:	6840      	ldr	r0, [r0, #4]
   bebc6:	4611      	mov	r1, r2
   bebc8:	f7fe bd44 	b.w	bd654 <network_connecting>

000bebcc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bebcc:	6840      	ldr	r0, [r0, #4]
   bebce:	2200      	movs	r2, #0
   bebd0:	2102      	movs	r1, #2
   bebd2:	f7fe bd47 	b.w	bd664 <network_disconnect>

000bebd6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bebd6:	2300      	movs	r3, #0
   bebd8:	6840      	ldr	r0, [r0, #4]
   bebda:	461a      	mov	r2, r3
   bebdc:	f7fe bd32 	b.w	bd644 <network_connect>

000bebe0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bebe0:	4b08      	ldr	r3, [pc, #32]	; (bec04 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bebe2:	b510      	push	{r4, lr}
   bebe4:	2428      	movs	r4, #40	; 0x28
   bebe6:	4622      	mov	r2, r4
   bebe8:	4618      	mov	r0, r3
   bebea:	2100      	movs	r1, #0
   bebec:	f004 fec8 	bl	c3980 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bebf0:	4b05      	ldr	r3, [pc, #20]	; (bec08 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bebf2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bebf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bebf8:	6042      	str	r2, [r0, #4]
   bebfa:	2204      	movs	r2, #4
   bebfc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bebfe:	4a03      	ldr	r2, [pc, #12]	; (bec0c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bec00:	601a      	str	r2, [r3, #0]
   bec02:	bd10      	pop	{r4, pc}
   bec04:	2003e638 	.word	0x2003e638
   bec08:	2003e630 	.word	0x2003e630
   bec0c:	000c70f4 	.word	0x000c70f4

000bec10 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bec10:	4770      	bx	lr

000bec12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bec12:	2000      	movs	r0, #0
   bec14:	4770      	bx	lr

000bec16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bec16:	b510      	push	{r4, lr}
   bec18:	2110      	movs	r1, #16
   bec1a:	4604      	mov	r4, r0
   bec1c:	f7f5 fa41 	bl	b40a2 <_ZdlPvj>
   bec20:	4620      	mov	r0, r4
   bec22:	bd10      	pop	{r4, pc}

000bec24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bec24:	b508      	push	{r3, lr}
      { delete this; }
   bec26:	f7ff fff6 	bl	bec16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bec2a:	bd08      	pop	{r3, pc}

000bec2c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bec2c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bec2e:	2200      	movs	r2, #0
   bec30:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bec34:	6002      	str	r2, [r0, #0]
   bec36:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bec38:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bec3a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bec3c:	680c      	ldr	r4, [r1, #0]
   bec3e:	8085      	strh	r5, [r0, #4]
   bec40:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bec42:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bec44:	bd30      	pop	{r4, r5, pc}

000bec46 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bec46:	b510      	push	{r4, lr}
   bec48:	4604      	mov	r4, r0
    free((void*)msg_);
   bec4a:	6800      	ldr	r0, [r0, #0]
   bec4c:	f7fe fd62 	bl	bd714 <free>
}
   bec50:	4620      	mov	r0, r4
   bec52:	bd10      	pop	{r4, pc}

000bec54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bec54:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bec56:	68c4      	ldr	r4, [r0, #12]
   bec58:	b1f4      	cbz	r4, bec98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bec5a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bec5c:	2b02      	cmp	r3, #2
   bec5e:	d103      	bne.n	bec68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bec60:	f104 000c 	add.w	r0, r4, #12
   bec64:	f7ff ffef 	bl	bec46 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bec68:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bec6a:	b135      	cbz	r5, bec7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bec6c:	4628      	mov	r0, r5
   bec6e:	f7f5 fbb5 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bec72:	2110      	movs	r1, #16
   bec74:	4628      	mov	r0, r5
   bec76:	f7f5 fa14 	bl	b40a2 <_ZdlPvj>
   bec7a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bec7c:	b135      	cbz	r5, bec8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bec7e:	4628      	mov	r0, r5
   bec80:	f7f5 fbac 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
   bec84:	2110      	movs	r1, #16
   bec86:	4628      	mov	r0, r5
   bec88:	f7f5 fa0b 	bl	b40a2 <_ZdlPvj>
   bec8c:	4620      	mov	r0, r4
   bec8e:	2114      	movs	r1, #20
   bec90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bec94:	f7f5 ba05 	b.w	b40a2 <_ZdlPvj>
   bec98:	bd38      	pop	{r3, r4, r5, pc}

000bec9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bec9a:	680b      	ldr	r3, [r1, #0]
   bec9c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bec9e:	684b      	ldr	r3, [r1, #4]
   beca0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   beca2:	b113      	cbz	r3, becaa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   beca4:	685a      	ldr	r2, [r3, #4]
   beca6:	3201      	adds	r2, #1
   beca8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   becaa:	4770      	bx	lr

000becac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   becac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   becae:	4604      	mov	r4, r0
   becb0:	4668      	mov	r0, sp
   becb2:	460d      	mov	r5, r1
   becb4:	f7ff fff1 	bl	bec9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   becb8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   becba:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   becbc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   becbe:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   becc0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   becc2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   becc4:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   becc6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   becc8:	f7f6 fc56 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   beccc:	b135      	cbz	r5, becdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   becce:	1d28      	adds	r0, r5, #4
   becd0:	f7f6 fc52 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   becd4:	2108      	movs	r1, #8
   becd6:	4628      	mov	r0, r5
   becd8:	f7f5 f9e3 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   becdc:	4620      	mov	r0, r4
   becde:	b003      	add	sp, #12
   bece0:	bd30      	pop	{r4, r5, pc}

000bece2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bece2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bece4:	b510      	push	{r4, lr}
      if (_M_empty())
   bece6:	b90a      	cbnz	r2, becec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bece8:	f002 fc22 	bl	c1530 <_ZSt25__throw_bad_function_callv>
    }
   becec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   becf0:	68c3      	ldr	r3, [r0, #12]
   becf2:	4718      	bx	r3

000becf4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   becf4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   becf6:	6800      	ldr	r0, [r0, #0]
   becf8:	f100 0110 	add.w	r1, r0, #16
   becfc:	f7ff fff1 	bl	bece2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bed00:	bd08      	pop	{r3, pc}

000bed02 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bed02:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bed04:	b510      	push	{r4, lr}
      if (_M_empty())
   bed06:	b90a      	cbnz	r2, bed0c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bed08:	f002 fc12 	bl	c1530 <_ZSt25__throw_bad_function_callv>
    }
   bed0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bed10:	68c3      	ldr	r3, [r0, #12]
   bed12:	4718      	bx	r3

000bed14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bed14:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bed16:	6800      	ldr	r0, [r0, #0]
   bed18:	f100 0110 	add.w	r1, r0, #16
   bed1c:	f7ff fff1 	bl	bed02 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bed20:	bd08      	pop	{r3, pc}
	...

000bed24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bed24:	b538      	push	{r3, r4, r5, lr}
   bed26:	2300      	movs	r3, #0
   bed28:	4604      	mov	r4, r0
   bed2a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bed2c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bed2e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bed30:	f7f5 f9b1 	bl	b4096 <_Znwj>
   bed34:	b128      	cbz	r0, bed42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bed36:	2301      	movs	r3, #1
   bed38:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bed3c:	4b02      	ldr	r3, [pc, #8]	; (bed48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bed3e:	6003      	str	r3, [r0, #0]
   bed40:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bed42:	6020      	str	r0, [r4, #0]
	}
   bed44:	4620      	mov	r0, r4
   bed46:	bd38      	pop	{r3, r4, r5, pc}
   bed48:	000c7130 	.word	0x000c7130

000bed4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bed4c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bed4e:	2300      	movs	r3, #0
   bed50:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bed52:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bed54:	4604      	mov	r4, r0
   bed56:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bed58:	b12b      	cbz	r3, bed66 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bed5a:	2202      	movs	r2, #2
   bed5c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bed5e:	68eb      	ldr	r3, [r5, #12]
   bed60:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bed62:	68ab      	ldr	r3, [r5, #8]
   bed64:	60a3      	str	r3, [r4, #8]
    }
   bed66:	4620      	mov	r0, r4
   bed68:	bd38      	pop	{r3, r4, r5, pc}
	...

000bed6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bed6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bed6e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bed70:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bed72:	4668      	mov	r0, sp
   bed74:	f7ff ff5a 	bl	bec2c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bed78:	f04f 0302 	mov.w	r3, #2
   bed7c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bed80:	2a00      	cmp	r2, #0
   bed82:	d103      	bne.n	bed8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bed84:	e8c4 3f41 	strexb	r1, r3, [r4]
   bed88:	2900      	cmp	r1, #0
   bed8a:	d1f7      	bne.n	bed7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bed8c:	d125      	bne.n	bedda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bed8e:	f104 050c 	add.w	r5, r4, #12
   bed92:	4669      	mov	r1, sp
   bed94:	4628      	mov	r0, r5
   bed96:	f7ff ff49 	bl	bec2c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bed9a:	f3bf 8f5b 	dmb	ish
   bed9e:	2301      	movs	r3, #1
   beda0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   beda2:	2000      	movs	r0, #0
   beda4:	f104 0308 	add.w	r3, r4, #8
   beda8:	f3bf 8f5b 	dmb	ish
   bedac:	e853 6f00 	ldrex	r6, [r3]
   bedb0:	e843 0200 	strex	r2, r0, [r3]
   bedb4:	2a00      	cmp	r2, #0
   bedb6:	d1f9      	bne.n	bedac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bedb8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bedbc:	b16e      	cbz	r6, bedda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bedbe:	f7fe fbdd 	bl	bd57c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bedc2:	b178      	cbz	r0, bede4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bedc4:	4629      	mov	r1, r5
   bedc6:	4630      	mov	r0, r6
   bedc8:	f7ff ff8b 	bl	bece2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bedcc:	4630      	mov	r0, r6
   bedce:	f7f5 fb05 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bedd2:	2110      	movs	r1, #16
   bedd4:	4630      	mov	r0, r6
   bedd6:	f7f5 f964 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bedda:	4668      	mov	r0, sp
   beddc:	f7ff ff33 	bl	bec46 <_ZN8particle5ErrorD1Ev>
    }
   bede0:	b009      	add	sp, #36	; 0x24
   bede2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bede4:	4631      	mov	r1, r6
   bede6:	a802      	add	r0, sp, #8
   bede8:	f7ff ffb0 	bl	bed4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bedec:	68e0      	ldr	r0, [r4, #12]
   bedee:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bedf2:	b108      	cbz	r0, bedf8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bedf4:	f004 fe32 	bl	c3a5c <strdup>
        type_(type) {
   bedf8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bedfa:	2010      	movs	r0, #16
   bedfc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bee00:	f7f5 f949 	bl	b4096 <_Znwj>
   bee04:	4605      	mov	r5, r0
   bee06:	b1e8      	cbz	r0, bee44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bee08:	2700      	movs	r7, #0
   bee0a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bee0c:	2018      	movs	r0, #24
   bee0e:	f7f5 f942 	bl	b4096 <_Znwj>
   bee12:	4604      	mov	r4, r0
   bee14:	b188      	cbz	r0, bee3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bee16:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bee18:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bee1a:	a802      	add	r0, sp, #8
   bee1c:	f7ff fc24 	bl	be668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bee20:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bee22:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bee24:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bee26:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bee28:	9204      	str	r2, [sp, #16]
   bee2a:	a906      	add	r1, sp, #24
   bee2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bee2e:	60e3      	str	r3, [r4, #12]
   bee30:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bee34:	9205      	str	r2, [sp, #20]
   bee36:	f7ff fef9 	bl	bec2c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bee3a:	4b08      	ldr	r3, [pc, #32]	; (bee5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bee3c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bee3e:	4b08      	ldr	r3, [pc, #32]	; (bee60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bee40:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bee42:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bee44:	a806      	add	r0, sp, #24
   bee46:	f7ff fefe 	bl	bec46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bee4a:	a802      	add	r0, sp, #8
   bee4c:	f7f5 fac6 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bee50:	2200      	movs	r2, #0
   bee52:	4629      	mov	r1, r5
   bee54:	4803      	ldr	r0, [pc, #12]	; (bee64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bee56:	f7fe fb99 	bl	bd58c <application_thread_invoke>
   bee5a:	e7b7      	b.n	bedcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bee5c:	000becf5 	.word	0x000becf5
   bee60:	000bef79 	.word	0x000bef79
   bee64:	000bd7f3 	.word	0x000bd7f3

000bee68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bee6c:	b08b      	sub	sp, #44	; 0x2c
   bee6e:	4605      	mov	r5, r0
   bee70:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bee74:	460f      	mov	r7, r1
   bee76:	4690      	mov	r8, r2
   bee78:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bee7a:	f7fe fbbb 	bl	bd5f4 <spark_cloud_flag_connected>
   bee7e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bee80:	4683      	mov	fp, r0
   bee82:	bb38      	cbnz	r0, beed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bee84:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bee88:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bee8a:	a905      	add	r1, sp, #20
   bee8c:	4630      	mov	r0, r6
   bee8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bee92:	f7ff fecb 	bl	bec2c <_ZN8particle5ErrorC1EOS0_>
   bee96:	2014      	movs	r0, #20
   bee98:	f7f5 f8fd 	bl	b4096 <_Znwj>
   bee9c:	4604      	mov	r4, r0
   bee9e:	b148      	cbz	r0, beeb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   beea0:	2302      	movs	r3, #2
   beea2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   beea4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   beea6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   beeaa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   beeac:	4631      	mov	r1, r6
   beeae:	300c      	adds	r0, #12
   beeb0:	f7ff febc 	bl	bec2c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   beeb4:	4628      	mov	r0, r5
	: __shared_count(__p)
   beeb6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   beeb8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   beebc:	f7ff ff32 	bl	bed24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   beec0:	4630      	mov	r0, r6
   beec2:	f7ff fec0 	bl	bec46 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   beec6:	a805      	add	r0, sp, #20
   beec8:	f7ff febd 	bl	bec46 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   beecc:	4628      	mov	r0, r5
   beece:	b00b      	add	sp, #44	; 0x2c
   beed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   beed4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   beed6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   beed8:	2014      	movs	r0, #20
   beeda:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   beede:	9307      	str	r3, [sp, #28]
   beee0:	f7f5 f8d9 	bl	b4096 <_Znwj>
   beee4:	4601      	mov	r1, r0
   beee6:	b118      	cbz	r0, beef0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   beee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   beeec:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   beeee:	7044      	strb	r4, [r0, #1]
   beef0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   beef2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   beef4:	f7ff ff16 	bl	bed24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   beef8:	4b1e      	ldr	r3, [pc, #120]	; (bef74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   beefa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   beefc:	2008      	movs	r0, #8
   beefe:	f7f5 f8ca 	bl	b4096 <_Znwj>
   bef02:	4604      	mov	r4, r0
   bef04:	b110      	cbz	r0, bef0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bef06:	a903      	add	r1, sp, #12
   bef08:	f7ff fec7 	bl	bec9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bef0c:	9600      	str	r6, [sp, #0]
   bef0e:	fa5f f38a 	uxtb.w	r3, sl
   bef12:	464a      	mov	r2, r9
   bef14:	4641      	mov	r1, r8
   bef16:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bef18:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bef1a:	f7fe fb73 	bl	bd604 <spark_send_event>
   bef1e:	b9b8      	cbnz	r0, bef50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bef20:	9b03      	ldr	r3, [sp, #12]
   bef22:	785b      	ldrb	r3, [r3, #1]
   bef24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bef28:	b993      	cbnz	r3, bef50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bef2a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bef2e:	a905      	add	r1, sp, #20
   bef30:	a803      	add	r0, sp, #12
   bef32:	9205      	str	r2, [sp, #20]
   bef34:	f8ad 3018 	strh.w	r3, [sp, #24]
   bef38:	f7ff ff18 	bl	bed6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bef3c:	a805      	add	r0, sp, #20
   bef3e:	f7ff fe82 	bl	bec46 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bef42:	a805      	add	r0, sp, #20
   bef44:	9909      	ldr	r1, [sp, #36]	; 0x24
   bef46:	f7ff feb1 	bl	becac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bef4a:	a806      	add	r0, sp, #24
   bef4c:	f7f6 fb14 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef50:	a903      	add	r1, sp, #12
   bef52:	a805      	add	r0, sp, #20
   bef54:	f7ff fea1 	bl	bec9a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bef58:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bef5a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bef5c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bef5e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bef60:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bef62:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bef64:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bef66:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bef68:	f7f6 fb06 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bef6c:	a804      	add	r0, sp, #16
   bef6e:	f7f6 fb03 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bef72:	e7ab      	b.n	beecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bef74:	000beff5 	.word	0x000beff5

000bef78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bef78:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bef7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bef7c:	4605      	mov	r5, r0
	switch (__op)
   bef7e:	d103      	bne.n	bef88 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bef80:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bef82:	6003      	str	r3, [r0, #0]
      }
   bef84:	2000      	movs	r0, #0
   bef86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bef88:	2a02      	cmp	r2, #2
   bef8a:	d010      	beq.n	befae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bef8c:	2a03      	cmp	r2, #3
   bef8e:	d1f9      	bne.n	bef84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bef90:	6804      	ldr	r4, [r0, #0]
   bef92:	2c00      	cmp	r4, #0
   bef94:	d0f6      	beq.n	bef84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bef96:	f104 0010 	add.w	r0, r4, #16
   bef9a:	f7ff fe54 	bl	bec46 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bef9e:	4620      	mov	r0, r4
   befa0:	f7f5 fa1c 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   befa4:	2118      	movs	r1, #24
   befa6:	4620      	mov	r0, r4
   befa8:	f7f5 f87b 	bl	b40a2 <_ZdlPvj>
   befac:	e7ea      	b.n	bef84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   befae:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   befb0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   befb2:	f7f5 f870 	bl	b4096 <_Znwj>
   befb6:	4604      	mov	r4, r0
   befb8:	b150      	cbz	r0, befd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   befba:	4631      	mov	r1, r6
   befbc:	f7ff fec6 	bl	bed4c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   befc0:	6930      	ldr	r0, [r6, #16]
   befc2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   befc6:	b108      	cbz	r0, befcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   befc8:	f004 fd48 	bl	c3a5c <strdup>
        type_(type) {
   befcc:	6120      	str	r0, [r4, #16]
   befce:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   befd0:	602c      	str	r4, [r5, #0]
	}
   befd2:	e7d7      	b.n	bef84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000befd4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   befd4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   befd6:	2300      	movs	r3, #0
   befd8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   befda:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   befdc:	4604      	mov	r4, r0
   befde:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   befe0:	b12b      	cbz	r3, befee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   befe2:	2202      	movs	r2, #2
   befe4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   befe6:	68eb      	ldr	r3, [r5, #12]
   befe8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   befea:	68ab      	ldr	r3, [r5, #8]
   befec:	60a3      	str	r3, [r4, #8]
    }
   befee:	4620      	mov	r0, r4
   beff0:	bd38      	pop	{r3, r4, r5, pc}
	...

000beff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   beff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   beff6:	b089      	sub	sp, #36	; 0x24
   beff8:	4604      	mov	r4, r0
   beffa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   beffc:	a801      	add	r0, sp, #4
   beffe:	4611      	mov	r1, r2
   bf000:	f7ff fe54 	bl	becac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bf004:	b1a4      	cbz	r4, bf030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bf006:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf008:	b11d      	cbz	r5, bf012 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bf00a:	4628      	mov	r0, r5
   bf00c:	f004 fd26 	bl	c3a5c <strdup>
   bf010:	4605      	mov	r5, r0
   bf012:	a801      	add	r0, sp, #4
   bf014:	a903      	add	r1, sp, #12
        type_(type) {
   bf016:	9503      	str	r5, [sp, #12]
   bf018:	f8ad 4010 	strh.w	r4, [sp, #16]
   bf01c:	f7ff fea6 	bl	bed6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bf020:	a803      	add	r0, sp, #12
   bf022:	f7ff fe10 	bl	bec46 <_ZN8particle5ErrorD1Ev>
   bf026:	a802      	add	r0, sp, #8
   bf028:	f7f6 faa6 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf02c:	b009      	add	sp, #36	; 0x24
   bf02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bf030:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf032:	2301      	movs	r3, #1
   bf034:	e8d5 2f4f 	ldrexb	r2, [r5]
   bf038:	2a00      	cmp	r2, #0
   bf03a:	d103      	bne.n	bf044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bf03c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bf040:	2900      	cmp	r1, #0
   bf042:	d1f7      	bne.n	bf034 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bf044:	d1ef      	bne.n	bf026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bf046:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bf048:	f3bf 8f5b 	dmb	ish
   bf04c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf04e:	1d2b      	adds	r3, r5, #4
   bf050:	f3bf 8f5b 	dmb	ish
   bf054:	e853 6f00 	ldrex	r6, [r3]
   bf058:	e843 4200 	strex	r2, r4, [r3]
   bf05c:	2a00      	cmp	r2, #0
   bf05e:	d1f9      	bne.n	bf054 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bf060:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf064:	2e00      	cmp	r6, #0
   bf066:	d0de      	beq.n	bf026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bf068:	4620      	mov	r0, r4
   bf06a:	f7fe fa87 	bl	bd57c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf06e:	4607      	mov	r7, r0
   bf070:	b160      	cbz	r0, bf08c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf072:	f105 010c 	add.w	r1, r5, #12
   bf076:	4630      	mov	r0, r6
   bf078:	f7ff fe43 	bl	bed02 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bf07c:	4630      	mov	r0, r6
   bf07e:	f7f5 f9ad 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf082:	2110      	movs	r1, #16
   bf084:	4630      	mov	r0, r6
   bf086:	f7f5 f80c 	bl	b40a2 <_ZdlPvj>
   bf08a:	e7cc      	b.n	bf026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf08c:	4631      	mov	r1, r6
   bf08e:	a803      	add	r0, sp, #12
   bf090:	f7ff ffa0 	bl	befd4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf094:	7b2b      	ldrb	r3, [r5, #12]
   bf096:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf09a:	2010      	movs	r0, #16
   bf09c:	f7f4 fffb 	bl	b4096 <_Znwj>
   bf0a0:	4605      	mov	r5, r0
   bf0a2:	b1d0      	cbz	r0, bf0da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bf0a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf0a6:	2014      	movs	r0, #20
   bf0a8:	f7f4 fff5 	bl	b4096 <_Znwj>
   bf0ac:	4604      	mov	r4, r0
   bf0ae:	b178      	cbz	r0, bf0d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bf0b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf0b2:	4601      	mov	r1, r0
   bf0b4:	a803      	add	r0, sp, #12
   bf0b6:	f7ff fad7 	bl	be668 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf0bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf0be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf0c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bf0c2:	9205      	str	r2, [sp, #20]
   bf0c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf0c6:	60e3      	str	r3, [r4, #12]
   bf0c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bf0cc:	9206      	str	r2, [sp, #24]
   bf0ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bf0d0:	4b06      	ldr	r3, [pc, #24]	; (bf0ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bf0d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf0d4:	4b06      	ldr	r3, [pc, #24]	; (bf0f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf0d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf0d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bf0da:	a803      	add	r0, sp, #12
   bf0dc:	f7f5 f97e 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bf0e0:	2200      	movs	r2, #0
   bf0e2:	4629      	mov	r1, r5
   bf0e4:	4803      	ldr	r0, [pc, #12]	; (bf0f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bf0e6:	f7fe fa51 	bl	bd58c <application_thread_invoke>
   bf0ea:	e7c7      	b.n	bf07c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bf0ec:	000bed15 	.word	0x000bed15
   bf0f0:	000bf0f9 	.word	0x000bf0f9
   bf0f4:	000bd7f3 	.word	0x000bd7f3

000bf0f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bf0f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bf0fa:	b570      	push	{r4, r5, r6, lr}
   bf0fc:	4604      	mov	r4, r0
	switch (__op)
   bf0fe:	d103      	bne.n	bf108 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bf100:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bf102:	6003      	str	r3, [r0, #0]
      }
   bf104:	2000      	movs	r0, #0
   bf106:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bf108:	2a02      	cmp	r2, #2
   bf10a:	d00c      	beq.n	bf126 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bf10c:	2a03      	cmp	r2, #3
   bf10e:	d1f9      	bne.n	bf104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bf110:	6804      	ldr	r4, [r0, #0]
   bf112:	2c00      	cmp	r4, #0
   bf114:	d0f6      	beq.n	bf104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bf116:	4620      	mov	r0, r4
   bf118:	f7f5 f960 	bl	b43dc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bf11c:	2114      	movs	r1, #20
   bf11e:	4620      	mov	r0, r4
   bf120:	f7f4 ffbf 	bl	b40a2 <_ZdlPvj>
   bf124:	e7ee      	b.n	bf104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bf126:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bf128:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bf12a:	f7f4 ffb4 	bl	b4096 <_Znwj>
   bf12e:	4605      	mov	r5, r0
   bf130:	b120      	cbz	r0, bf13c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bf132:	4631      	mov	r1, r6
   bf134:	f7ff ff4e 	bl	befd4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bf138:	7c33      	ldrb	r3, [r6, #16]
   bf13a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bf13c:	6025      	str	r5, [r4, #0]
	}
   bf13e:	e7e1      	b.n	bf104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bf140 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bf140:	2200      	movs	r2, #0
   bf142:	6840      	ldr	r0, [r0, #4]
   bf144:	4611      	mov	r1, r2
   bf146:	f7fe bab5 	b.w	bd6b4 <network_listening>

000bf14a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf14a:	2200      	movs	r2, #0
   bf14c:	6840      	ldr	r0, [r0, #4]
   bf14e:	4611      	mov	r1, r2
   bf150:	f7fe bac0 	b.w	bd6d4 <network_get_listen_timeout>

000bf154 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf154:	6840      	ldr	r0, [r0, #4]
   bf156:	2200      	movs	r2, #0
   bf158:	f7fe bab4 	b.w	bd6c4 <network_set_listen_timeout>

000bf15c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf15c:	6840      	ldr	r0, [r0, #4]
   bf15e:	2200      	movs	r2, #0
   bf160:	f081 0101 	eor.w	r1, r1, #1
   bf164:	f7fe ba9e 	b.w	bd6a4 <network_listen>

000bf168 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf168:	2300      	movs	r3, #0
   bf16a:	6840      	ldr	r0, [r0, #4]
   bf16c:	461a      	mov	r2, r3
   bf16e:	4619      	mov	r1, r3
   bf170:	f7fe ba90 	b.w	bd694 <network_off>

000bf174 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf174:	2300      	movs	r3, #0
   bf176:	6840      	ldr	r0, [r0, #4]
   bf178:	461a      	mov	r2, r3
   bf17a:	4619      	mov	r1, r3
   bf17c:	f7fe ba82 	b.w	bd684 <network_on>

000bf180 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bf180:	2200      	movs	r2, #0
   bf182:	6840      	ldr	r0, [r0, #4]
   bf184:	4611      	mov	r1, r2
   bf186:	f7fe ba75 	b.w	bd674 <network_ready>

000bf18a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf18a:	2200      	movs	r2, #0
   bf18c:	6840      	ldr	r0, [r0, #4]
   bf18e:	4611      	mov	r1, r2
   bf190:	f7fe ba60 	b.w	bd654 <network_connecting>

000bf194 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf194:	6840      	ldr	r0, [r0, #4]
   bf196:	2200      	movs	r2, #0
   bf198:	2102      	movs	r1, #2
   bf19a:	f7fe ba63 	b.w	bd664 <network_disconnect>

000bf19e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf19e:	2300      	movs	r3, #0
   bf1a0:	6840      	ldr	r0, [r0, #4]
   bf1a2:	461a      	mov	r2, r3
   bf1a4:	f7fe ba4e 	b.w	bd644 <network_connect>

000bf1a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bf1a8:	4b02      	ldr	r3, [pc, #8]	; (bf1b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bf1aa:	2203      	movs	r2, #3
   bf1ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bf1ae:	4a02      	ldr	r2, [pc, #8]	; (bf1b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bf1b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bf1b2:	4770      	bx	lr
   bf1b4:	2003e660 	.word	0x2003e660
   bf1b8:	000c714c 	.word	0x000c714c

000bf1bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bf1bc:	4770      	bx	lr

000bf1be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bf1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf1c0:	4606      	mov	r6, r0
   bf1c2:	4615      	mov	r5, r2
   bf1c4:	460c      	mov	r4, r1
   bf1c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bf1c8:	42bc      	cmp	r4, r7
   bf1ca:	d006      	beq.n	bf1da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bf1cc:	6833      	ldr	r3, [r6, #0]
   bf1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   bf1d2:	689b      	ldr	r3, [r3, #8]
   bf1d4:	4630      	mov	r0, r6
   bf1d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bf1d8:	e7f6      	b.n	bf1c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bf1da:	4628      	mov	r0, r5
   bf1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf1de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bf1de:	7c00      	ldrb	r0, [r0, #16]
   bf1e0:	2200      	movs	r2, #0
   bf1e2:	f7fe b829 	b.w	bd238 <hal_i2c_write>

000bf1e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bf1e6:	7c00      	ldrb	r0, [r0, #16]
   bf1e8:	2100      	movs	r1, #0
   bf1ea:	f7fe b82d 	b.w	bd248 <hal_i2c_available>

000bf1ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bf1ee:	7c00      	ldrb	r0, [r0, #16]
   bf1f0:	2100      	movs	r1, #0
   bf1f2:	f7fe b831 	b.w	bd258 <hal_i2c_read>

000bf1f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bf1f6:	7c00      	ldrb	r0, [r0, #16]
   bf1f8:	2100      	movs	r1, #0
   bf1fa:	f7fe b835 	b.w	bd268 <hal_i2c_peek>

000bf1fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bf1fe:	7c00      	ldrb	r0, [r0, #16]
   bf200:	2100      	movs	r1, #0
   bf202:	f7fe b839 	b.w	bd278 <hal_i2c_flush>

000bf206 <_ZN7TwoWireD0Ev>:
   bf206:	b510      	push	{r4, lr}
   bf208:	2114      	movs	r1, #20
   bf20a:	4604      	mov	r4, r0
   bf20c:	f7f4 ff49 	bl	b40a2 <_ZdlPvj>
   bf210:	4620      	mov	r0, r4
   bf212:	bd10      	pop	{r4, pc}

000bf214 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bf214:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bf216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bf21a:	4604      	mov	r4, r0
   bf21c:	4608      	mov	r0, r1
   bf21e:	2100      	movs	r1, #0
   bf220:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bf224:	4b03      	ldr	r3, [pc, #12]	; (bf234 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bf226:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bf228:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bf22a:	4611      	mov	r1, r2
   bf22c:	f7fe f834 	bl	bd298 <hal_i2c_init>
}
   bf230:	4620      	mov	r0, r4
   bf232:	bd10      	pop	{r4, pc}
   bf234:	000c7188 	.word	0x000c7188

000bf238 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bf238:	7c00      	ldrb	r0, [r0, #16]
   bf23a:	2200      	movs	r2, #0
   bf23c:	f7fd bfdc 	b.w	bd1f8 <hal_i2c_set_speed>

000bf240 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bf240:	2300      	movs	r3, #0
   bf242:	7c00      	ldrb	r0, [r0, #16]
   bf244:	461a      	mov	r2, r3
   bf246:	4619      	mov	r1, r3
   bf248:	f7fd bfde 	b.w	bd208 <hal_i2c_begin>

000bf24c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bf24c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bf24e:	2200      	movs	r2, #0
   bf250:	2314      	movs	r3, #20
   bf252:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bf256:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bf25a:	780b      	ldrb	r3, [r1, #0]
   bf25c:	f88d 3008 	strb.w	r3, [sp, #8]
   bf260:	684b      	ldr	r3, [r1, #4]
   bf262:	9303      	str	r3, [sp, #12]
   bf264:	68cb      	ldr	r3, [r1, #12]
   bf266:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bf268:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bf26a:	7a0b      	ldrb	r3, [r1, #8]
   bf26c:	9305      	str	r3, [sp, #20]
   bf26e:	a901      	add	r1, sp, #4
   bf270:	f7fe f81a 	bl	bd2a8 <hal_i2c_request_ex>
}
   bf274:	b007      	add	sp, #28
   bf276:	f85d fb04 	ldr.w	pc, [sp], #4

000bf27a <_ZN7TwoWire11requestFromEhjh>:
{
   bf27a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bf27c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf27e:	f88d 1000 	strb.w	r1, [sp]
   bf282:	f04f 0164 	mov.w	r1, #100	; 0x64
   bf286:	9103      	str	r1, [sp, #12]
   bf288:	bf18      	it	ne
   bf28a:	2301      	movne	r3, #1
   bf28c:	4669      	mov	r1, sp
    size_ = size;
   bf28e:	9201      	str	r2, [sp, #4]
   bf290:	f88d 3008 	strb.w	r3, [sp, #8]
   bf294:	f7ff ffda 	bl	bf24c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bf298:	b005      	add	sp, #20
   bf29a:	f85d fb04 	ldr.w	pc, [sp], #4

000bf29e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bf29e:	2301      	movs	r3, #1
   bf2a0:	f7ff bfeb 	b.w	bf27a <_ZN7TwoWire11requestFromEhjh>

000bf2a4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bf2a4:	7c00      	ldrb	r0, [r0, #16]
   bf2a6:	2200      	movs	r2, #0
   bf2a8:	f7fd bfb6 	b.w	bd218 <hal_i2c_begin_transmission>

000bf2ac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bf2ac:	b2c9      	uxtb	r1, r1
   bf2ae:	f7ff bff9 	b.w	bf2a4 <_ZN7TwoWire17beginTransmissionEh>

000bf2b2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bf2b2:	7c00      	ldrb	r0, [r0, #16]
   bf2b4:	2200      	movs	r2, #0
   bf2b6:	f7fd bfb7 	b.w	bd228 <hal_i2c_end_transmission>

000bf2ba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bf2ba:	2101      	movs	r1, #1
   bf2bc:	f7ff bff9 	b.w	bf2b2 <_ZN7TwoWire15endTransmissionEh>

000bf2c0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bf2c0:	f7fd bf8a 	b.w	bd1d8 <HAL_Interrupts_Disable_All>

000bf2c4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bf2c4:	f7fd bf80 	b.w	bd1c8 <HAL_Interrupts_Enable_All>

000bf2c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bf2c8:	4770      	bx	lr

000bf2ca <_ZN9IPAddressD0Ev>:
   bf2ca:	b510      	push	{r4, lr}
   bf2cc:	2118      	movs	r1, #24
   bf2ce:	4604      	mov	r4, r0
   bf2d0:	f7f4 fee7 	bl	b40a2 <_ZdlPvj>
   bf2d4:	4620      	mov	r0, r4
   bf2d6:	bd10      	pop	{r4, pc}

000bf2d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bf2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bf2da:	7d03      	ldrb	r3, [r0, #20]
   bf2dc:	2b06      	cmp	r3, #6
{
   bf2de:	b08d      	sub	sp, #52	; 0x34
   bf2e0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf2e2:	f100 0704 	add.w	r7, r0, #4
   bf2e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bf2ea:	d012      	beq.n	bf312 <_ZNK9IPAddress7printToER5Print+0x3a>
   bf2ec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bf2f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bf2f4:	220a      	movs	r2, #10
   bf2f6:	4630      	mov	r0, r6
   bf2f8:	f001 fabd 	bl	c0876 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bf2fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bf2fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bf300:	d019      	beq.n	bf336 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bf302:	2c00      	cmp	r4, #0
   bf304:	d0f4      	beq.n	bf2f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bf306:	212e      	movs	r1, #46	; 0x2e
   bf308:	4630      	mov	r0, r6
   bf30a:	f001 fa95 	bl	c0838 <_ZN5Print5printEc>
   bf30e:	4404      	add	r4, r0
   bf310:	e7ee      	b.n	bf2f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf312:	232f      	movs	r3, #47	; 0x2f
   bf314:	466a      	mov	r2, sp
   bf316:	4639      	mov	r1, r7
   bf318:	200a      	movs	r0, #10
		buf[0] = 0;
   bf31a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bf31e:	f7fd ffcb 	bl	bd2b8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bf322:	4668      	mov	r0, sp
   bf324:	f004 fbb7 	bl	c3a96 <strlen>
   bf328:	6833      	ldr	r3, [r6, #0]
   bf32a:	4602      	mov	r2, r0
   bf32c:	68db      	ldr	r3, [r3, #12]
   bf32e:	4669      	mov	r1, sp
   bf330:	4630      	mov	r0, r6
   bf332:	4798      	blx	r3
   bf334:	4604      	mov	r4, r0
    }
    return n;
}
   bf336:	4620      	mov	r0, r4
   bf338:	b00d      	add	sp, #52	; 0x34
   bf33a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bf33c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bf33c:	b510      	push	{r4, lr}
   bf33e:	4b05      	ldr	r3, [pc, #20]	; (bf354 <_ZN9IPAddressC1Ev+0x18>)
   bf340:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bf342:	2211      	movs	r2, #17
   bf344:	f840 3b04 	str.w	r3, [r0], #4
   bf348:	2100      	movs	r1, #0
   bf34a:	f004 fb19 	bl	c3980 <memset>
}
   bf34e:	4620      	mov	r0, r4
   bf350:	bd10      	pop	{r4, pc}
   bf352:	bf00      	nop
   bf354:	000c71b0 	.word	0x000c71b0

000bf358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bf358:	4603      	mov	r3, r0
   bf35a:	4a07      	ldr	r2, [pc, #28]	; (bf378 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bf35c:	b510      	push	{r4, lr}
   bf35e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bf362:	f101 0210 	add.w	r2, r1, #16
   bf366:	f851 4b04 	ldr.w	r4, [r1], #4
   bf36a:	f843 4b04 	str.w	r4, [r3], #4
   bf36e:	4291      	cmp	r1, r2
   bf370:	d1f9      	bne.n	bf366 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bf372:	780a      	ldrb	r2, [r1, #0]
   bf374:	701a      	strb	r2, [r3, #0]
}
   bf376:	bd10      	pop	{r4, pc}
   bf378:	000c71b0 	.word	0x000c71b0

000bf37c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bf37c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bf37e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bf382:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bf386:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bf38a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bf38e:	2304      	movs	r3, #4
   bf390:	6041      	str	r1, [r0, #4]
   bf392:	7503      	strb	r3, [r0, #20]
}
   bf394:	bd10      	pop	{r4, pc}
	...

000bf398 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bf398:	b507      	push	{r0, r1, r2, lr}
   bf39a:	4b06      	ldr	r3, [pc, #24]	; (bf3b4 <_ZN9IPAddressC1EPKh+0x1c>)
   bf39c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bf39e:	78cb      	ldrb	r3, [r1, #3]
   bf3a0:	9300      	str	r3, [sp, #0]
   bf3a2:	788b      	ldrb	r3, [r1, #2]
   bf3a4:	784a      	ldrb	r2, [r1, #1]
   bf3a6:	7809      	ldrb	r1, [r1, #0]
   bf3a8:	f7ff ffe8 	bl	bf37c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bf3ac:	b003      	add	sp, #12
   bf3ae:	f85d fb04 	ldr.w	pc, [sp], #4
   bf3b2:	bf00      	nop
   bf3b4:	000c71b0 	.word	0x000c71b0

000bf3b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bf3b8:	f100 0310 	add.w	r3, r0, #16
   bf3bc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bf3be:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bf3c2:	2901      	cmp	r1, #1
   bf3c4:	4618      	mov	r0, r3
   bf3c6:	d108      	bne.n	bf3da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bf3c8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bf3cc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bf3d0:	3a01      	subs	r2, #1
   bf3d2:	f103 0310 	add.w	r3, r3, #16
   bf3d6:	d1f2      	bne.n	bf3be <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bf3d8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bf3da:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bf3dc:	bf04      	itt	eq
   bf3de:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bf3e2:	1852      	addeq	r2, r2, r1
   bf3e4:	e7f4      	b.n	bf3d0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bf3e6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bf3e6:	b40e      	push	{r1, r2, r3}
   bf3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf3ea:	b088      	sub	sp, #32
   bf3ec:	af00      	add	r7, sp, #0
   bf3ee:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf3f2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf3f4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf3f8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bf3fa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf3fc:	462b      	mov	r3, r5
   bf3fe:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bf400:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf402:	f7fe f9af 	bl	bd764 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bf406:	280f      	cmp	r0, #15
   bf408:	687a      	ldr	r2, [r7, #4]
   bf40a:	d91a      	bls.n	bf442 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bf40c:	f100 0308 	add.w	r3, r0, #8
   bf410:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bf414:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bf416:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf41a:	1c41      	adds	r1, r0, #1
   bf41c:	462b      	mov	r3, r5
   bf41e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bf420:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bf422:	f7fe f99f 	bl	bd764 <vsnprintf>
        if (n > 0) {
   bf426:	1e02      	subs	r2, r0, #0
   bf428:	dd04      	ble.n	bf434 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bf42a:	6823      	ldr	r3, [r4, #0]
   bf42c:	4669      	mov	r1, sp
   bf42e:	689b      	ldr	r3, [r3, #8]
   bf430:	4620      	mov	r0, r4
   bf432:	4798      	blx	r3
   bf434:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bf436:	3720      	adds	r7, #32
   bf438:	46bd      	mov	sp, r7
   bf43a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bf43e:	b003      	add	sp, #12
   bf440:	4770      	bx	lr
    } else if (n > 0) {
   bf442:	2800      	cmp	r0, #0
   bf444:	d0f7      	beq.n	bf436 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bf446:	6823      	ldr	r3, [r4, #0]
   bf448:	4602      	mov	r2, r0
   bf44a:	689b      	ldr	r3, [r3, #8]
   bf44c:	f107 0110 	add.w	r1, r7, #16
   bf450:	4620      	mov	r0, r4
   bf452:	4798      	blx	r3
}
   bf454:	e7ef      	b.n	bf436 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bf456 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf456:	b538      	push	{r3, r4, r5, lr}
   bf458:	680b      	ldr	r3, [r1, #0]
   bf45a:	6003      	str	r3, [r0, #0]
   bf45c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bf45e:	6843      	ldr	r3, [r0, #4]
   bf460:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf462:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bf464:	d008      	beq.n	bf478 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bf466:	b115      	cbz	r5, bf46e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bf468:	686b      	ldr	r3, [r5, #4]
   bf46a:	3301      	adds	r3, #1
   bf46c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bf46e:	6860      	ldr	r0, [r4, #4]
   bf470:	b108      	cbz	r0, bf476 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bf472:	f7fe fa7c 	bl	bd96e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bf476:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bf478:	bd38      	pop	{r3, r4, r5, pc}

000bf47a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   bf47a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf47c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bf47e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf482:	689b      	ldr	r3, [r3, #8]
   bf484:	2201      	movs	r2, #1
   bf486:	f10d 0107 	add.w	r1, sp, #7
   bf48a:	4798      	blx	r3
}
   bf48c:	b003      	add	sp, #12
   bf48e:	f85d fb04 	ldr.w	pc, [sp], #4

000bf492 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf492:	460b      	mov	r3, r1
   bf494:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bf496:	2200      	movs	r2, #0
   bf498:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bf49a:	e9c0 2200 	strd	r2, r2, [r0]
   bf49e:	4604      	mov	r4, r0
        t_ = t;
   bf4a0:	6083      	str	r3, [r0, #8]
    if (t) {
   bf4a2:	b90b      	cbnz	r3, bf4a8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bf4a4:	4620      	mov	r0, r4
   bf4a6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bf4a8:	f7ff ffd5 	bl	bf456 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bf4ac:	e7fa      	b.n	bf4a4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bf4ae <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bf4ae:	6883      	ldr	r3, [r0, #8]
   bf4b0:	b1eb      	cbz	r3, bf4ee <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bf4b2:	781a      	ldrb	r2, [r3, #0]
   bf4b4:	2a03      	cmp	r2, #3
   bf4b6:	d81a      	bhi.n	bf4ee <_ZNK5spark9JSONValue4typeEv+0x40>
   bf4b8:	e8df f002 	tbb	[pc, r2]
   bf4bc:	1b021704 	.word	0x1b021704
   bf4c0:	2005      	movs	r0, #5
   bf4c2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bf4c4:	6802      	ldr	r2, [r0, #0]
   bf4c6:	685b      	ldr	r3, [r3, #4]
   bf4c8:	6852      	ldr	r2, [r2, #4]
   bf4ca:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bf4cc:	282d      	cmp	r0, #45	; 0x2d
   bf4ce:	d012      	beq.n	bf4f6 <_ZNK5spark9JSONValue4typeEv+0x48>
   bf4d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bf4d4:	2b09      	cmp	r3, #9
   bf4d6:	d90e      	bls.n	bf4f6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bf4d8:	2874      	cmp	r0, #116	; 0x74
   bf4da:	d00e      	beq.n	bf4fa <_ZNK5spark9JSONValue4typeEv+0x4c>
   bf4dc:	2866      	cmp	r0, #102	; 0x66
   bf4de:	d00c      	beq.n	bf4fa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bf4e0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bf4e4:	4258      	negs	r0, r3
   bf4e6:	4158      	adcs	r0, r3
   bf4e8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bf4ea:	2006      	movs	r0, #6
   bf4ec:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bf4ee:	2000      	movs	r0, #0
   bf4f0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bf4f2:	2004      	movs	r0, #4
   bf4f4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bf4f6:	2003      	movs	r0, #3
   bf4f8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bf4fa:	2002      	movs	r0, #2
}
   bf4fc:	4770      	bx	lr

000bf4fe <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bf4fe:	b510      	push	{r4, lr}
   bf500:	4604      	mov	r4, r0
    switch (type()) {
   bf502:	f7ff ffd4 	bl	bf4ae <_ZNK5spark9JSONValue4typeEv>
   bf506:	2802      	cmp	r0, #2
   bf508:	d00e      	beq.n	bf528 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bf50a:	1ec3      	subs	r3, r0, #3
   bf50c:	b2db      	uxtb	r3, r3
   bf50e:	2b01      	cmp	r3, #1
   bf510:	d814      	bhi.n	bf53c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bf512:	6822      	ldr	r2, [r4, #0]
   bf514:	68a3      	ldr	r3, [r4, #8]
   bf516:	6850      	ldr	r0, [r2, #4]
   bf518:	685b      	ldr	r3, [r3, #4]
}
   bf51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bf51e:	220a      	movs	r2, #10
   bf520:	2100      	movs	r1, #0
   bf522:	4418      	add	r0, r3
   bf524:	f005 b9e0 	b.w	c48e8 <strtol>
        const char* const s = d_->json + t_->start;
   bf528:	6822      	ldr	r2, [r4, #0]
   bf52a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bf52c:	6852      	ldr	r2, [r2, #4]
   bf52e:	685b      	ldr	r3, [r3, #4]
   bf530:	5cd0      	ldrb	r0, [r2, r3]
   bf532:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bf536:	4258      	negs	r0, r3
   bf538:	4158      	adcs	r0, r3
}
   bf53a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bf53c:	2000      	movs	r0, #0
   bf53e:	e7fc      	b.n	bf53a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bf540 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf540:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf542:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bf544:	e9c0 3300 	strd	r3, r3, [r0]
   bf548:	4604      	mov	r4, r0
        n_(0) {
   bf54a:	480e      	ldr	r0, [pc, #56]	; (bf584 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bf54c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bf550:	b1a9      	cbz	r1, bf57e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bf552:	780b      	ldrb	r3, [r1, #0]
   bf554:	2b03      	cmp	r3, #3
   bf556:	d006      	beq.n	bf566 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bf558:	b98b      	cbnz	r3, bf57e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bf55a:	6813      	ldr	r3, [r2, #0]
   bf55c:	6858      	ldr	r0, [r3, #4]
   bf55e:	684b      	ldr	r3, [r1, #4]
   bf560:	5cc3      	ldrb	r3, [r0, r3]
   bf562:	2b6e      	cmp	r3, #110	; 0x6e
   bf564:	d007      	beq.n	bf576 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bf566:	6813      	ldr	r3, [r2, #0]
   bf568:	684d      	ldr	r5, [r1, #4]
   bf56a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bf56c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bf56e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bf570:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bf572:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bf574:	60e3      	str	r3, [r4, #12]
   bf576:	4611      	mov	r1, r2
   bf578:	4620      	mov	r0, r4
   bf57a:	f7ff ff6c 	bl	bf456 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf57e:	4620      	mov	r0, r4
   bf580:	bd38      	pop	{r3, r4, r5, pc}
   bf582:	bf00      	nop
   bf584:	000c721f 	.word	0x000c721f

000bf588 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bf588:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bf58a:	2500      	movs	r5, #0
   bf58c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bf58e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bf592:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bf596:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bf59a:	4604      	mov	r4, r0
   bf59c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bf59e:	b14b      	cbz	r3, bf5b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bf5a0:	781a      	ldrb	r2, [r3, #0]
   bf5a2:	2a01      	cmp	r2, #1
   bf5a4:	d106      	bne.n	bf5b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bf5a6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bf5aa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bf5ac:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bf5ae:	6143      	str	r3, [r0, #20]
   bf5b0:	f7ff ff51 	bl	bf456 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bf5b4:	4620      	mov	r0, r4
   bf5b6:	bd38      	pop	{r3, r4, r5, pc}

000bf5b8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bf5b8:	b510      	push	{r4, lr}
    if (!n_) {
   bf5ba:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bf5bc:	4604      	mov	r4, r0
    if (!n_) {
   bf5be:	b163      	cbz	r3, bf5da <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bf5c0:	6880      	ldr	r0, [r0, #8]
   bf5c2:	60e0      	str	r0, [r4, #12]
    --n_;
   bf5c4:	3b01      	subs	r3, #1
    ++t_;
   bf5c6:	3010      	adds	r0, #16
   bf5c8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bf5ca:	6120      	str	r0, [r4, #16]
    --n_;
   bf5cc:	6163      	str	r3, [r4, #20]
    if (n_) {
   bf5ce:	b113      	cbz	r3, bf5d6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bf5d0:	f7ff fef2 	bl	bf3b8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bf5d4:	60a0      	str	r0, [r4, #8]
    return true;
   bf5d6:	2001      	movs	r0, #1
   bf5d8:	e000      	b.n	bf5dc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bf5da:	4618      	mov	r0, r3
}
   bf5dc:	bd10      	pop	{r4, pc}

000bf5de <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf5de:	b510      	push	{r4, lr}
    write('}');
   bf5e0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bf5e2:	4604      	mov	r4, r0
    write('}');
   bf5e4:	f7ff ff49 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bf5e8:	2301      	movs	r3, #1
   bf5ea:	7123      	strb	r3, [r4, #4]
}
   bf5ec:	4620      	mov	r0, r4
   bf5ee:	bd10      	pop	{r4, pc}

000bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bf5f0:	b508      	push	{r3, lr}
    switch (state_) {
   bf5f2:	7903      	ldrb	r3, [r0, #4]
   bf5f4:	2b01      	cmp	r3, #1
   bf5f6:	d002      	beq.n	bf5fe <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bf5f8:	2b02      	cmp	r3, #2
   bf5fa:	d004      	beq.n	bf606 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bf5fc:	bd08      	pop	{r3, pc}
        write(',');
   bf5fe:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bf600:	f7ff ff3b 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
}
   bf604:	e7fa      	b.n	bf5fc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bf606:	213a      	movs	r1, #58	; 0x3a
   bf608:	e7fa      	b.n	bf600 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bf60a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bf60a:	b510      	push	{r4, lr}
   bf60c:	4604      	mov	r4, r0
    writeSeparator();
   bf60e:	f7ff ffef 	bl	bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bf612:	4620      	mov	r0, r4
   bf614:	217b      	movs	r1, #123	; 0x7b
   bf616:	f7ff ff30 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bf61a:	2300      	movs	r3, #0
   bf61c:	7123      	strb	r3, [r4, #4]
}
   bf61e:	4620      	mov	r0, r4
   bf620:	bd10      	pop	{r4, pc}
	...

000bf624 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bf624:	b513      	push	{r0, r1, r4, lr}
   bf626:	4604      	mov	r4, r0
   bf628:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf62a:	f7ff ffe1 	bl	bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bf62e:	6823      	ldr	r3, [r4, #0]
   bf630:	9a01      	ldr	r2, [sp, #4]
   bf632:	68db      	ldr	r3, [r3, #12]
   bf634:	4903      	ldr	r1, [pc, #12]	; (bf644 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bf636:	4620      	mov	r0, r4
   bf638:	4798      	blx	r3
    state_ = NEXT;
   bf63a:	2301      	movs	r3, #1
}
   bf63c:	4620      	mov	r0, r4
    state_ = NEXT;
   bf63e:	7123      	strb	r3, [r4, #4]
}
   bf640:	b002      	add	sp, #8
   bf642:	bd10      	pop	{r4, pc}
   bf644:	000c5dc8 	.word	0x000c5dc8

000bf648 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bf648:	b513      	push	{r0, r1, r4, lr}
   bf64a:	4604      	mov	r4, r0
   bf64c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bf64e:	f7ff ffcf 	bl	bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bf652:	6823      	ldr	r3, [r4, #0]
   bf654:	9a01      	ldr	r2, [sp, #4]
   bf656:	68db      	ldr	r3, [r3, #12]
   bf658:	4903      	ldr	r1, [pc, #12]	; (bf668 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bf65a:	4620      	mov	r0, r4
   bf65c:	4798      	blx	r3
    state_ = NEXT;
   bf65e:	2301      	movs	r3, #1
}
   bf660:	4620      	mov	r0, r4
    state_ = NEXT;
   bf662:	7123      	strb	r3, [r4, #4]
}
   bf664:	b002      	add	sp, #8
   bf666:	bd10      	pop	{r4, pc}
   bf668:	000c71bc 	.word	0x000c71bc

000bf66c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf670:	460d      	mov	r5, r1
    write('"');
   bf672:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bf674:	4690      	mov	r8, r2
   bf676:	4604      	mov	r4, r0
    write('"');
   bf678:	f7ff feff 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bf67c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bf724 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bf680:	44a8      	add	r8, r5
    const char *s = str;
   bf682:	462f      	mov	r7, r5
    while (s != end) {
   bf684:	4547      	cmp	r7, r8
   bf686:	46ba      	mov	sl, r7
   bf688:	d03d      	beq.n	bf706 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bf68a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bf68e:	2e22      	cmp	r6, #34	; 0x22
   bf690:	d006      	beq.n	bf6a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf692:	2e5c      	cmp	r6, #92	; 0x5c
   bf694:	d004      	beq.n	bf6a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bf696:	4630      	mov	r0, r6
   bf698:	f004 f932 	bl	c3900 <isprint>
   bf69c:	2800      	cmp	r0, #0
   bf69e:	d1f1      	bne.n	bf684 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bf6a0:	6823      	ldr	r3, [r4, #0]
   bf6a2:	ebaa 0205 	sub.w	r2, sl, r5
   bf6a6:	689b      	ldr	r3, [r3, #8]
   bf6a8:	4629      	mov	r1, r5
   bf6aa:	4620      	mov	r0, r4
   bf6ac:	4798      	blx	r3
            write('\\');
   bf6ae:	215c      	movs	r1, #92	; 0x5c
   bf6b0:	4620      	mov	r0, r4
   bf6b2:	f7ff fee2 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bf6b6:	2e0d      	cmp	r6, #13
   bf6b8:	d80a      	bhi.n	bf6d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bf6ba:	2e07      	cmp	r6, #7
   bf6bc:	d91c      	bls.n	bf6f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf6be:	f1a6 0308 	sub.w	r3, r6, #8
   bf6c2:	2b05      	cmp	r3, #5
   bf6c4:	d818      	bhi.n	bf6f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bf6c6:	e8df f003 	tbb	[pc, r3]
   bf6ca:	0f0d      	.short	0x0f0d
   bf6cc:	15131711 	.word	0x15131711
   bf6d0:	2e22      	cmp	r6, #34	; 0x22
   bf6d2:	d001      	beq.n	bf6d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bf6d4:	2e5c      	cmp	r6, #92	; 0x5c
   bf6d6:	d10f      	bne.n	bf6f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bf6d8:	4631      	mov	r1, r6
                write('b');
   bf6da:	4620      	mov	r0, r4
   bf6dc:	f7ff fecd 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bf6e0:	463d      	mov	r5, r7
    while (s != end) {
   bf6e2:	e7cf      	b.n	bf684 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bf6e4:	2162      	movs	r1, #98	; 0x62
   bf6e6:	e7f8      	b.n	bf6da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bf6e8:	2174      	movs	r1, #116	; 0x74
   bf6ea:	e7f6      	b.n	bf6da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bf6ec:	216e      	movs	r1, #110	; 0x6e
   bf6ee:	e7f4      	b.n	bf6da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bf6f0:	2166      	movs	r1, #102	; 0x66
   bf6f2:	e7f2      	b.n	bf6da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bf6f4:	2172      	movs	r1, #114	; 0x72
   bf6f6:	e7f0      	b.n	bf6da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bf6f8:	6823      	ldr	r3, [r4, #0]
   bf6fa:	4632      	mov	r2, r6
   bf6fc:	68db      	ldr	r3, [r3, #12]
   bf6fe:	4649      	mov	r1, r9
   bf700:	4620      	mov	r0, r4
   bf702:	4798      	blx	r3
                break;
   bf704:	e7ec      	b.n	bf6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bf706:	42bd      	cmp	r5, r7
   bf708:	d005      	beq.n	bf716 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bf70a:	6823      	ldr	r3, [r4, #0]
   bf70c:	1b7a      	subs	r2, r7, r5
   bf70e:	689b      	ldr	r3, [r3, #8]
   bf710:	4629      	mov	r1, r5
   bf712:	4620      	mov	r0, r4
   bf714:	4798      	blx	r3
    }
    write('"');
   bf716:	2122      	movs	r1, #34	; 0x22
   bf718:	4620      	mov	r0, r4
   bf71a:	f7ff feae 	bl	bf47a <_ZN5spark10JSONWriter5writeEc>
}
   bf71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf722:	bf00      	nop
   bf724:	000c71bf 	.word	0x000c71bf

000bf728 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bf728:	b513      	push	{r0, r1, r4, lr}
   bf72a:	4604      	mov	r4, r0
   bf72c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf730:	f7ff ff5e 	bl	bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bf734:	4620      	mov	r0, r4
   bf736:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf73a:	f7ff ff97 	bl	bf66c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bf73e:	2302      	movs	r3, #2
}
   bf740:	4620      	mov	r0, r4
    state_ = VALUE;
   bf742:	7123      	strb	r3, [r4, #4]
}
   bf744:	b002      	add	sp, #8
   bf746:	bd10      	pop	{r4, pc}

000bf748 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bf748:	b513      	push	{r0, r1, r4, lr}
   bf74a:	4604      	mov	r4, r0
   bf74c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bf750:	f7ff ff4e 	bl	bf5f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bf754:	4620      	mov	r0, r4
   bf756:	e9dd 2100 	ldrd	r2, r1, [sp]
   bf75a:	f7ff ff87 	bl	bf66c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bf75e:	2301      	movs	r3, #1
}
   bf760:	4620      	mov	r0, r4
    state_ = NEXT;
   bf762:	7123      	strb	r3, [r4, #4]
}
   bf764:	b002      	add	sp, #8
   bf766:	bd10      	pop	{r4, pc}

000bf768 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   bf768:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   bf76a:	460b      	mov	r3, r1
    s->update(ticks);
   bf76c:	6892      	ldr	r2, [r2, #8]
   bf76e:	4601      	mov	r1, r0
   bf770:	4618      	mov	r0, r3
   bf772:	4710      	bx	r2

000bf774 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   bf774:	b570      	push	{r4, r5, r6, lr}
   bf776:	4c0e      	ldr	r4, [pc, #56]	; (bf7b0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   bf778:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   bf77a:	2500      	movs	r5, #0
   bf77c:	241c      	movs	r4, #28
   bf77e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf782:	f89d 4014 	ldrb.w	r4, [sp, #20]
   bf786:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   bf78a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   bf78c:	f004 0403 	and.w	r4, r4, #3
   bf790:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   bf794:	b2e4      	uxtb	r4, r4
   bf796:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   bf798:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   bf79a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   bf79c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   bf79e:	7c42      	ldrb	r2, [r0, #17]
   bf7a0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   bf7a2:	bf0a      	itet	eq
   bf7a4:	4b03      	ldreq	r3, [pc, #12]	; (bf7b4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   bf7a6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   bf7a8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   bf7ac:	bd70      	pop	{r4, r5, r6, pc}
   bf7ae:	bf00      	nop
   bf7b0:	000c60c0 	.word	0x000c60c0
   bf7b4:	000bf769 	.word	0x000bf769

000bf7b8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bf7b8:	6880      	ldr	r0, [r0, #8]
   bf7ba:	6803      	ldr	r3, [r0, #0]
   bf7bc:	68db      	ldr	r3, [r3, #12]
   bf7be:	4718      	bx	r3

000bf7c0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bf7c0:	4770      	bx	lr

000bf7c2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bf7c2:	4608      	mov	r0, r1
   bf7c4:	b111      	cbz	r1, bf7cc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bf7c6:	680b      	ldr	r3, [r1, #0]
   bf7c8:	685b      	ldr	r3, [r3, #4]
   bf7ca:	4718      	bx	r3
}
   bf7cc:	4770      	bx	lr

000bf7ce <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bf7ce:	4770      	bx	lr

000bf7d0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf7d0:	4770      	bx	lr

000bf7d2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bf7d2:	4770      	bx	lr

000bf7d4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bf7d4:	4770      	bx	lr

000bf7d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bf7d6:	b538      	push	{r3, r4, r5, lr}
   bf7d8:	4604      	mov	r4, r0
   bf7da:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bf7dc:	6800      	ldr	r0, [r0, #0]
   bf7de:	212e      	movs	r1, #46	; 0x2e
   bf7e0:	f004 f920 	bl	c3a24 <strchrnul>
    size = s - category;
   bf7e4:	6823      	ldr	r3, [r4, #0]
   bf7e6:	1ac3      	subs	r3, r0, r3
   bf7e8:	602b      	str	r3, [r5, #0]
    if (size) {
   bf7ea:	b123      	cbz	r3, bf7f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bf7ec:	7803      	ldrb	r3, [r0, #0]
   bf7ee:	b103      	cbz	r3, bf7f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bf7f0:	3001      	adds	r0, #1
   bf7f2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7f4:	6020      	str	r0, [r4, #0]
}
   bf7f6:	4618      	mov	r0, r3
   bf7f8:	bd38      	pop	{r3, r4, r5, pc}

000bf7fa <_ZN5spark16JSONStreamWriterD0Ev>:
   bf7fa:	b510      	push	{r4, lr}
   bf7fc:	210c      	movs	r1, #12
   bf7fe:	4604      	mov	r4, r0
   bf800:	f7f4 fc4f 	bl	b40a2 <_ZdlPvj>
   bf804:	4620      	mov	r0, r4
   bf806:	bd10      	pop	{r4, pc}

000bf808 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bf808:	b510      	push	{r4, lr}
   bf80a:	2104      	movs	r1, #4
   bf80c:	4604      	mov	r4, r0
   bf80e:	f7f4 fc48 	bl	b40a2 <_ZdlPvj>
   bf812:	4620      	mov	r0, r4
   bf814:	bd10      	pop	{r4, pc}

000bf816 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bf816:	b510      	push	{r4, lr}
   bf818:	2104      	movs	r1, #4
   bf81a:	4604      	mov	r4, r0
   bf81c:	f7f4 fc41 	bl	b40a2 <_ZdlPvj>
   bf820:	4620      	mov	r0, r4
   bf822:	bd10      	pop	{r4, pc}

000bf824 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bf824:	f7fd bc68 	b.w	bd0f8 <os_mutex_recursive_lock>

000bf828 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bf828:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bf82a:	f004 f905 	bl	c3a38 <strcmp>
}
   bf82e:	fab0 f080 	clz	r0, r0
   bf832:	0940      	lsrs	r0, r0, #5
   bf834:	bd08      	pop	{r3, pc}

000bf836 <__tcf_1>:
   bf836:	4770      	bx	lr

000bf838 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bf838:	b510      	push	{r4, lr}
   bf83a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bf83c:	f001 fcb8 	bl	c11b0 <_Z16_fetch_usbserialv>
   bf840:	4284      	cmp	r4, r0
   bf842:	d010      	beq.n	bf866 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bf844:	f001 fe4c 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   bf848:	4284      	cmp	r4, r0
   bf84a:	d105      	bne.n	bf858 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bf84c:	f001 fe48 	bl	c14e0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bf850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bf854:	f001 bc47 	b.w	c10e6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bf858:	b12c      	cbz	r4, bf866 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bf85a:	6823      	ldr	r3, [r4, #0]
   bf85c:	4620      	mov	r0, r4
   bf85e:	685b      	ldr	r3, [r3, #4]
}
   bf860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf864:	4718      	bx	r3
   bf866:	bd10      	pop	{r4, pc}

000bf868 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf868:	680b      	ldr	r3, [r1, #0]
   bf86a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf86c:	684b      	ldr	r3, [r1, #4]
   bf86e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf870:	b113      	cbz	r3, bf878 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bf872:	685a      	ldr	r2, [r3, #4]
   bf874:	3201      	adds	r2, #1
   bf876:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf878:	4770      	bx	lr

000bf87a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bf87a:	b513      	push	{r0, r1, r4, lr}
   bf87c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bf87e:	4608      	mov	r0, r1
   bf880:	9101      	str	r1, [sp, #4]
   bf882:	f004 f908 	bl	c3a96 <strlen>
   bf886:	9901      	ldr	r1, [sp, #4]
   bf888:	4602      	mov	r2, r0
   bf88a:	4620      	mov	r0, r4
}
   bf88c:	b002      	add	sp, #8
   bf88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bf892:	f7ff bf59 	b.w	bf748 <_ZN5spark10JSONWriter5valueEPKcj>

000bf896 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bf896:	b513      	push	{r0, r1, r4, lr}
   bf898:	4604      	mov	r4, r0
    write(str, strlen(str));
   bf89a:	4608      	mov	r0, r1
   bf89c:	9101      	str	r1, [sp, #4]
   bf89e:	f004 f8fa 	bl	c3a96 <strlen>
   bf8a2:	6823      	ldr	r3, [r4, #0]
   bf8a4:	9901      	ldr	r1, [sp, #4]
   bf8a6:	68db      	ldr	r3, [r3, #12]
   bf8a8:	4602      	mov	r2, r0
   bf8aa:	4620      	mov	r0, r4
}
   bf8ac:	b002      	add	sp, #8
   bf8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bf8b2:	4718      	bx	r3

000bf8b4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bf8b4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bf8b6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bf8b8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bf8bc:	68db      	ldr	r3, [r3, #12]
   bf8be:	2201      	movs	r2, #1
   bf8c0:	f10d 0107 	add.w	r1, sp, #7
   bf8c4:	4798      	blx	r3
}
   bf8c6:	b003      	add	sp, #12
   bf8c8:	f85d fb04 	ldr.w	pc, [sp], #4

000bf8cc <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf8cc:	b40e      	push	{r1, r2, r3}
   bf8ce:	b503      	push	{r0, r1, lr}
   bf8d0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bf8d2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bf8d4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bf8d8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bf8da:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bf8dc:	f000 ffe9 	bl	c08b2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bf8e0:	b002      	add	sp, #8
   bf8e2:	f85d eb04 	ldr.w	lr, [sp], #4
   bf8e6:	b003      	add	sp, #12
   bf8e8:	4770      	bx	lr

000bf8ea <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bf8ea:	680a      	ldr	r2, [r1, #0]
   bf8ec:	6002      	str	r2, [r0, #0]
   bf8ee:	684a      	ldr	r2, [r1, #4]
   bf8f0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bf8f2:	2200      	movs	r2, #0
   bf8f4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bf8f8:	b510      	push	{r4, lr}
   bf8fa:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf8fc:	688c      	ldr	r4, [r1, #8]
   bf8fe:	6084      	str	r4, [r0, #8]
   bf900:	68cc      	ldr	r4, [r1, #12]
   bf902:	60c4      	str	r4, [r0, #12]
   bf904:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf906:	608a      	str	r2, [r1, #8]
   bf908:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf90a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bf90c:	610a      	str	r2, [r1, #16]
   bf90e:	bd10      	pop	{r4, pc}

000bf910 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bf914:	e9d0 8400 	ldrd	r8, r4, [r0]
   bf918:	f04f 0a14 	mov.w	sl, #20
   bf91c:	9300      	str	r3, [sp, #0]
   bf91e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bf922:	4b18      	ldr	r3, [pc, #96]	; (bf984 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf924:	10a4      	asrs	r4, r4, #2
   bf926:	4617      	mov	r7, r2
   bf928:	435c      	muls	r4, r3
   bf92a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bf92c:	2c00      	cmp	r4, #0
   bf92e:	dd21      	ble.n	bf974 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bf930:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bf932:	fb0a f006 	mul.w	r0, sl, r6
   bf936:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bf93a:	463a      	mov	r2, r7
   bf93c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bf940:	5828      	ldr	r0, [r5, r0]
   bf942:	9101      	str	r1, [sp, #4]
   bf944:	455f      	cmp	r7, fp
   bf946:	bf28      	it	cs
   bf948:	465a      	movcs	r2, fp
   bf94a:	f004 f8bf 	bl	c3acc <strncmp>
                if (cmp == 0) {
   bf94e:	2800      	cmp	r0, #0
   bf950:	9901      	ldr	r1, [sp, #4]
   bf952:	f04f 0301 	mov.w	r3, #1
   bf956:	d10b      	bne.n	bf970 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bf958:	455f      	cmp	r7, fp
   bf95a:	d103      	bne.n	bf964 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bf95c:	9a00      	ldr	r2, [sp, #0]
   bf95e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bf960:	4634      	mov	r4, r6
   bf962:	e7e3      	b.n	bf92c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bf964:	d9fc      	bls.n	bf960 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bf966:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bf968:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bf96c:	3e01      	subs	r6, #1
   bf96e:	e7f7      	b.n	bf960 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bf970:	dbf9      	blt.n	bf966 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bf972:	e7f5      	b.n	bf960 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bf974:	eba5 0508 	sub.w	r5, r5, r8
}
   bf978:	4802      	ldr	r0, [pc, #8]	; (bf984 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bf97a:	10ad      	asrs	r5, r5, #2
   bf97c:	4368      	muls	r0, r5
   bf97e:	b003      	add	sp, #12
   bf980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf984:	cccccccd 	.word	0xcccccccd

000bf988 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bf98a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bf98c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bf98e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bf990:	b303      	cbz	r3, bf9d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bf992:	b1f9      	cbz	r1, bf9d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bf994:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bf996:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bf99a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bf99c:	a903      	add	r1, sp, #12
   bf99e:	a801      	add	r0, sp, #4
   bf9a0:	f7ff ff19 	bl	bf7d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bf9a4:	4601      	mov	r1, r0
   bf9a6:	b1a8      	cbz	r0, bf9d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bf9a8:	f10d 030b 	add.w	r3, sp, #11
   bf9ac:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bf9ae:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bf9b2:	4620      	mov	r0, r4
   bf9b4:	f7ff ffac 	bl	bf910 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bf9b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bf9bc:	b153      	cbz	r3, bf9d4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bf9be:	6823      	ldr	r3, [r4, #0]
   bf9c0:	2414      	movs	r4, #20
   bf9c2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bf9c6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bf9c8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bf9cc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bf9ce:	bfa8      	it	ge
   bf9d0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bf9d2:	e7e3      	b.n	bf99c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bf9d4:	4628      	mov	r0, r5
   bf9d6:	b004      	add	sp, #16
   bf9d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bf9dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bf9dc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bf9de:	4c09      	ldr	r4, [pc, #36]	; (bfa04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bf9e0:	7823      	ldrb	r3, [r4, #0]
   bf9e2:	f3bf 8f5b 	dmb	ish
   bf9e6:	07db      	lsls	r3, r3, #31
   bf9e8:	d409      	bmi.n	bf9fe <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf9ea:	4620      	mov	r0, r4
   bf9ec:	f7f4 fb68 	bl	b40c0 <__cxa_guard_acquire>
   bf9f0:	b128      	cbz	r0, bf9fe <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bf9f2:	4620      	mov	r0, r4
   bf9f4:	f7f4 fb69 	bl	b40ca <__cxa_guard_release>
   bf9f8:	4803      	ldr	r0, [pc, #12]	; (bfa08 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bf9fa:	f003 ff73 	bl	c38e4 <atexit>
}
   bf9fe:	4803      	ldr	r0, [pc, #12]	; (bfa0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   bfa00:	bd10      	pop	{r4, pc}
   bfa02:	bf00      	nop
   bfa04:	2003e66c 	.word	0x2003e66c
   bfa08:	000bf7cf 	.word	0x000bf7cf
   bfa0c:	2003db90 	.word	0x2003db90

000bfa10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   bfa10:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   bfa12:	4c09      	ldr	r4, [pc, #36]	; (bfa38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   bfa14:	7823      	ldrb	r3, [r4, #0]
   bfa16:	f3bf 8f5b 	dmb	ish
   bfa1a:	07db      	lsls	r3, r3, #31
   bfa1c:	d409      	bmi.n	bfa32 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfa1e:	4620      	mov	r0, r4
   bfa20:	f7f4 fb4e 	bl	b40c0 <__cxa_guard_acquire>
   bfa24:	b128      	cbz	r0, bfa32 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   bfa26:	4620      	mov	r0, r4
   bfa28:	f7f4 fb4f 	bl	b40ca <__cxa_guard_release>
   bfa2c:	4803      	ldr	r0, [pc, #12]	; (bfa3c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   bfa2e:	f003 ff59 	bl	c38e4 <atexit>
    return &factory;
}
   bfa32:	4803      	ldr	r0, [pc, #12]	; (bfa40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   bfa34:	bd10      	pop	{r4, pc}
   bfa36:	bf00      	nop
   bfa38:	2003e670 	.word	0x2003e670
   bfa3c:	000bf837 	.word	0x000bf837
   bfa40:	2003db94 	.word	0x2003db94

000bfa44 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   bfa44:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   bfa46:	2500      	movs	r5, #0
   bfa48:	4604      	mov	r4, r0
   bfa4a:	e9c0 5500 	strd	r5, r5, [r0]
   bfa4e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bfa52:	6085      	str	r5, [r0, #8]
   bfa54:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   bfa56:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   bfa5a:	f7fd fb3d 	bl	bd0d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   bfa5e:	f7ff ffbd 	bl	bf9dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   bfa62:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfa64:	f7ff ffd4 	bl	bfa10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   bfa68:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   bfa6a:	6220      	str	r0, [r4, #32]
}
   bfa6c:	4620      	mov	r0, r4
   bfa6e:	bd38      	pop	{r3, r4, r5, pc}

000bfa70 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   bfa70:	b510      	push	{r4, lr}
    static LogManager mgr;
   bfa72:	4c0a      	ldr	r4, [pc, #40]	; (bfa9c <_ZN5spark10LogManager8instanceEv+0x2c>)
   bfa74:	7823      	ldrb	r3, [r4, #0]
   bfa76:	f3bf 8f5b 	dmb	ish
   bfa7a:	07db      	lsls	r3, r3, #31
   bfa7c:	d40c      	bmi.n	bfa98 <_ZN5spark10LogManager8instanceEv+0x28>
   bfa7e:	4620      	mov	r0, r4
   bfa80:	f7f4 fb1e 	bl	b40c0 <__cxa_guard_acquire>
   bfa84:	b140      	cbz	r0, bfa98 <_ZN5spark10LogManager8instanceEv+0x28>
   bfa86:	4806      	ldr	r0, [pc, #24]	; (bfaa0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfa88:	f7ff ffdc 	bl	bfa44 <_ZN5spark10LogManagerC1Ev>
   bfa8c:	4620      	mov	r0, r4
   bfa8e:	f7f4 fb1c 	bl	b40ca <__cxa_guard_release>
   bfa92:	4804      	ldr	r0, [pc, #16]	; (bfaa4 <_ZN5spark10LogManager8instanceEv+0x34>)
   bfa94:	f003 ff26 	bl	c38e4 <atexit>
    return &mgr;
}
   bfa98:	4801      	ldr	r0, [pc, #4]	; (bfaa0 <_ZN5spark10LogManager8instanceEv+0x30>)
   bfa9a:	bd10      	pop	{r4, pc}
   bfa9c:	2003e668 	.word	0x2003e668
   bfaa0:	2003e678 	.word	0x2003e678
   bfaa4:	000bffc5 	.word	0x000bffc5

000bfaa8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   bfaa8:	4a02      	ldr	r2, [pc, #8]	; (bfab4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   bfaaa:	4903      	ldr	r1, [pc, #12]	; (bfab8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   bfaac:	4803      	ldr	r0, [pc, #12]	; (bfabc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   bfaae:	2300      	movs	r3, #0
   bfab0:	f7fd bd3a 	b.w	bd528 <log_set_callbacks>
   bfab4:	000bfda9 	.word	0x000bfda9
   bfab8:	000bfd35 	.word	0x000bfd35
   bfabc:	000bfcb5 	.word	0x000bfcb5

000bfac0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   bfac0:	2300      	movs	r3, #0
   bfac2:	461a      	mov	r2, r3
   bfac4:	4619      	mov	r1, r3
   bfac6:	4618      	mov	r0, r3
   bfac8:	f7fd bd2e 	b.w	bd528 <log_set_callbacks>

000bfacc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   bface:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   bfad0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bfad2:	4668      	mov	r0, sp
   bfad4:	f7ff fec8 	bl	bf868 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   bfad8:	466a      	mov	r2, sp
   bfada:	4629      	mov	r1, r5
   bfadc:	4620      	mov	r0, r4
   bfade:	f7ff fd53 	bl	bf588 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   bfae2:	a801      	add	r0, sp, #4
   bfae4:	f7f5 fd48 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfae8:	4620      	mov	r0, r4
   bfaea:	b003      	add	sp, #12
   bfaec:	bd30      	pop	{r4, r5, pc}

000bfaee <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfaee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   bfaf0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   bfaf2:	4604      	mov	r4, r0
   bfaf4:	4668      	mov	r0, sp
   bfaf6:	f7ff feb7 	bl	bf868 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   bfafa:	466a      	mov	r2, sp
   bfafc:	4629      	mov	r1, r5
   bfafe:	4620      	mov	r0, r4
   bfb00:	f7ff fd1e 	bl	bf540 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfb04:	a801      	add	r0, sp, #4
   bfb06:	f7f5 fd37 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfb0a:	4620      	mov	r0, r4
   bfb0c:	b003      	add	sp, #12
   bfb0e:	bd30      	pop	{r4, r5, pc}

000bfb10 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   bfb12:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   bfb14:	4604      	mov	r4, r0
   bfb16:	4668      	mov	r0, sp
   bfb18:	f7ff fea6 	bl	bf868 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   bfb1c:	466a      	mov	r2, sp
   bfb1e:	4629      	mov	r1, r5
   bfb20:	4620      	mov	r0, r4
   bfb22:	f7ff fcb6 	bl	bf492 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   bfb26:	a801      	add	r0, sp, #4
   bfb28:	f7f5 fd26 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfb2c:	4620      	mov	r0, r4
   bfb2e:	b003      	add	sp, #12
   bfb30:	bd30      	pop	{r4, r5, pc}
	...

000bfb34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   bfb34:	b570      	push	{r4, r5, r6, lr}
   bfb36:	b08a      	sub	sp, #40	; 0x28
   bfb38:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   bfb3a:	4601      	mov	r1, r0
   bfb3c:	a804      	add	r0, sp, #16
   bfb3e:	f7ff ffc5 	bl	bfacc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   bfb42:	4e14      	ldr	r6, [pc, #80]	; (bfb94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   bfb44:	a804      	add	r0, sp, #16
   bfb46:	f7ff fd37 	bl	bf5b8 <_ZN5spark18JSONObjectIterator4nextEv>
   bfb4a:	b1e8      	cbz	r0, bfb88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   bfb4c:	a904      	add	r1, sp, #16
   bfb4e:	4668      	mov	r0, sp
   bfb50:	f7ff ffcd 	bl	bfaee <_ZNK5spark18JSONObjectIterator4nameEv>
   bfb54:	9802      	ldr	r0, [sp, #8]
   bfb56:	4631      	mov	r1, r6
   bfb58:	f7ff fe66 	bl	bf828 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   bfb5c:	4604      	mov	r4, r0
   bfb5e:	b110      	cbz	r0, bfb66 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   bfb60:	1e2c      	subs	r4, r5, #0
   bfb62:	bf18      	it	ne
   bfb64:	2401      	movne	r4, #1
   bfb66:	a801      	add	r0, sp, #4
   bfb68:	f7f5 fd06 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb6c:	2c00      	cmp	r4, #0
   bfb6e:	d0e9      	beq.n	bfb44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   bfb70:	a904      	add	r1, sp, #16
   bfb72:	4668      	mov	r0, sp
   bfb74:	f7ff ffcc 	bl	bfb10 <_ZNK5spark18JSONObjectIterator5valueEv>
   bfb78:	4668      	mov	r0, sp
   bfb7a:	f7ff fcc0 	bl	bf4fe <_ZNK5spark9JSONValue5toIntEv>
   bfb7e:	6028      	str	r0, [r5, #0]
   bfb80:	a801      	add	r0, sp, #4
   bfb82:	f7f5 fcf9 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb86:	e7dd      	b.n	bfb44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   bfb88:	a805      	add	r0, sp, #20
   bfb8a:	f7f5 fcf5 	bl	b5578 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfb8e:	b00a      	add	sp, #40	; 0x28
   bfb90:	bd70      	pop	{r4, r5, r6, pc}
   bfb92:	bf00      	nop
   bfb94:	000c71c5 	.word	0x000c71c5

000bfb98 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bfb9a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   bfb9c:	4620      	mov	r0, r4
   bfb9e:	4913      	ldr	r1, [pc, #76]	; (bfbec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   bfba0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   bfba2:	f003 ff49 	bl	c3a38 <strcmp>
   bfba6:	b950      	cbnz	r0, bfbbe <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   bfba8:	f001 fb02 	bl	c11b0 <_Z16_fetch_usbserialv>
   bfbac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bfbb0:	f001 faee 	bl	c1190 <_ZN9USBSerial5beginEl>
}
   bfbb4:	b003      	add	sp, #12
   bfbb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   bfbba:	f001 baf9 	b.w	c11b0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   bfbbe:	490c      	ldr	r1, [pc, #48]	; (bfbf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   bfbc0:	4620      	mov	r0, r4
   bfbc2:	f003 ff39 	bl	c3a38 <strcmp>
   bfbc6:	b978      	cbnz	r0, bfbe8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   bfbc8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   bfbcc:	a901      	add	r1, sp, #4
   bfbce:	4628      	mov	r0, r5
        int baud = 9600;
   bfbd0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   bfbd2:	f7ff ffaf 	bl	bfb34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   bfbd6:	f001 fc83 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   bfbda:	9901      	ldr	r1, [sp, #4]
   bfbdc:	f001 fa80 	bl	c10e0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   bfbe0:	f001 fc7e 	bl	c14e0 <_Z22__fetch_global_Serial1v>
}
   bfbe4:	b003      	add	sp, #12
   bfbe6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   bfbe8:	2000      	movs	r0, #0
   bfbea:	e7fb      	b.n	bfbe4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   bfbec:	000c71ca 	.word	0x000c71ca
   bfbf0:	000c71d1 	.word	0x000c71d1

000bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfbf4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bfbf6:	e9d0 5300 	ldrd	r5, r3, [r0]
   bfbfa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bfbfc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bfbfe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bfc02:	42ae      	cmp	r6, r5
   bfc04:	d005      	beq.n	bfc12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   bfc06:	f105 0008 	add.w	r0, r5, #8
   bfc0a:	f7ff fff3 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfc0e:	3514      	adds	r5, #20
   bfc10:	e7f7      	b.n	bfc02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bfc12:	6820      	ldr	r0, [r4, #0]
   bfc14:	f7fd fd7e 	bl	bd714 <free>
}
   bfc18:	4620      	mov	r0, r4
   bfc1a:	bd70      	pop	{r4, r5, r6, pc}

000bfc1c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   bfc1c:	b510      	push	{r4, lr}
   bfc1e:	4604      	mov	r4, r0
   bfc20:	300c      	adds	r0, #12
   bfc22:	f7ff ffe7 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   bfc26:	4620      	mov	r0, r4
   bfc28:	f7fe f9a9 	bl	bdf7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bfc2c:	4620      	mov	r0, r4
   bfc2e:	bd10      	pop	{r4, pc}

000bfc30 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   bfc30:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   bfc32:	4b04      	ldr	r3, [pc, #16]	; (bfc44 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   bfc34:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   bfc36:	f840 3b04 	str.w	r3, [r0], #4
   bfc3a:	f7ff ffef 	bl	bfc1c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   bfc3e:	4620      	mov	r0, r4
   bfc40:	bd10      	pop	{r4, pc}
   bfc42:	bf00      	nop
   bfc44:	000c60a8 	.word	0x000c60a8

000bfc48 <_ZN5spark16StreamLogHandlerD0Ev>:
   bfc48:	b510      	push	{r4, lr}
   bfc4a:	4604      	mov	r4, r0
   bfc4c:	f7ff fff0 	bl	bfc30 <_ZN5spark16StreamLogHandlerD1Ev>
   bfc50:	4620      	mov	r0, r4
   bfc52:	2124      	movs	r1, #36	; 0x24
   bfc54:	f7f4 fa25 	bl	b40a2 <_ZdlPvj>
   bfc58:	4620      	mov	r0, r4
   bfc5a:	bd10      	pop	{r4, pc}

000bfc5c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   bfc5c:	b510      	push	{r4, lr}
   bfc5e:	4b03      	ldr	r3, [pc, #12]	; (bfc6c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   bfc60:	6003      	str	r3, [r0, #0]
   bfc62:	4604      	mov	r4, r0
   bfc64:	f7ff ffe4 	bl	bfc30 <_ZN5spark16StreamLogHandlerD1Ev>
   bfc68:	4620      	mov	r0, r4
   bfc6a:	bd10      	pop	{r4, pc}
   bfc6c:	000c726c 	.word	0x000c726c

000bfc70 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   bfc70:	b510      	push	{r4, lr}
   bfc72:	4604      	mov	r4, r0
   bfc74:	f7ff fff2 	bl	bfc5c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   bfc78:	4620      	mov	r0, r4
   bfc7a:	2124      	movs	r1, #36	; 0x24
   bfc7c:	f7f4 fa11 	bl	b40a2 <_ZdlPvj>
   bfc80:	4620      	mov	r0, r4
   bfc82:	bd10      	pop	{r4, pc}

000bfc84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   bfc84:	2200      	movs	r2, #0
   bfc86:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   bfc8a:	b510      	push	{r4, lr}
        capacity_(0) {
   bfc8c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   bfc8e:	680c      	ldr	r4, [r1, #0]
   bfc90:	6004      	str	r4, [r0, #0]
   bfc92:	684c      	ldr	r4, [r1, #4]
   bfc94:	6044      	str	r4, [r0, #4]
   bfc96:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfc98:	600a      	str	r2, [r1, #0]
   bfc9a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bfc9c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfc9e:	608a      	str	r2, [r1, #8]
}
   bfca0:	bd10      	pop	{r4, pc}

000bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   bfca2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bfca4:	6803      	ldr	r3, [r0, #0]
   bfca6:	4604      	mov	r4, r0
   bfca8:	6818      	ldr	r0, [r3, #0]
   bfcaa:	f7fd fa2d 	bl	bd108 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   bfcae:	4620      	mov	r0, r4
   bfcb0:	bd10      	pop	{r4, pc}
	...

000bfcb4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   bfcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfcb8:	b087      	sub	sp, #28
   bfcba:	4680      	mov	r8, r0
   bfcbc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   bfcbe:	4b1c      	ldr	r3, [pc, #112]	; (bfd30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   bfcc0:	685b      	ldr	r3, [r3, #4]
   bfcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfcc6:	4689      	mov	r9, r1
   bfcc8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   bfcca:	b96b      	cbnz	r3, bfce8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   bfccc:	f7ff fed0 	bl	bfa70 <_ZN5spark10LogManager8instanceEv>
   bfcd0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfcd2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   bfcd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfcd8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   bfcda:	f7ff fda3 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   bfcde:	7b23      	ldrb	r3, [r4, #12]
   bfce0:	b12b      	cbz	r3, bfcee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   bfce2:	a805      	add	r0, sp, #20
   bfce4:	f7ff ffdd 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   bfce8:	b007      	add	sp, #28
   bfcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   bfcee:	2301      	movs	r3, #1
   bfcf0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   bfcf2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   bfcf6:	fa5f f989 	uxtb.w	r9, r9
   bfcfa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfcfe:	45aa      	cmp	sl, r5
   bfd00:	d012      	beq.n	bfd28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   bfd02:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   bfd06:	4631      	mov	r1, r6
   bfd08:	1d38      	adds	r0, r7, #4
   bfd0a:	f7ff fe3d 	bl	bf988 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfd0e:	4581      	cmp	r9, r0
   bfd10:	d3f5      	bcc.n	bfcfe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   bfd12:	683b      	ldr	r3, [r7, #0]
   bfd14:	9a03      	ldr	r2, [sp, #12]
   bfd16:	9200      	str	r2, [sp, #0]
   bfd18:	f8d3 b008 	ldr.w	fp, [r3, #8]
   bfd1c:	464a      	mov	r2, r9
   bfd1e:	4633      	mov	r3, r6
   bfd20:	4641      	mov	r1, r8
   bfd22:	4638      	mov	r0, r7
   bfd24:	47d8      	blx	fp
   bfd26:	e7ea      	b.n	bfcfe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   bfd28:	2300      	movs	r3, #0
   bfd2a:	7323      	strb	r3, [r4, #12]
   bfd2c:	e7d9      	b.n	bfce2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   bfd2e:	bf00      	nop
   bfd30:	e000ed00 	.word	0xe000ed00

000bfd34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   bfd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfd38:	469b      	mov	fp, r3
   bfd3a:	4b1a      	ldr	r3, [pc, #104]	; (bfda4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   bfd3c:	685b      	ldr	r3, [r3, #4]
   bfd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfd42:	4680      	mov	r8, r0
   bfd44:	4689      	mov	r9, r1
   bfd46:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   bfd48:	b96b      	cbnz	r3, bfd66 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   bfd4a:	f7ff fe91 	bl	bfa70 <_ZN5spark10LogManager8instanceEv>
   bfd4e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   bfd50:	f100 0324 	add.w	r3, r0, #36	; 0x24
   bfd54:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfd56:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfd58:	f7ff fd64 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   bfd5c:	7b23      	ldrb	r3, [r4, #12]
   bfd5e:	b12b      	cbz	r3, bfd6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   bfd60:	a801      	add	r0, sp, #4
   bfd62:	f7ff ff9e 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bfd66:	b003      	add	sp, #12
   bfd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   bfd6c:	2301      	movs	r3, #1
   bfd6e:	7323      	strb	r3, [r4, #12]
   bfd70:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   bfd74:	b2f6      	uxtb	r6, r6
   bfd76:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfd7a:	4555      	cmp	r5, sl
   bfd7c:	d00e      	beq.n	bfd9c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   bfd7e:	f855 7b04 	ldr.w	r7, [r5], #4
   bfd82:	4659      	mov	r1, fp
   bfd84:	1d38      	adds	r0, r7, #4
   bfd86:	f7ff fdff 	bl	bf988 <_ZNK5spark6detail9LogFilter5levelEPKc>
   bfd8a:	4286      	cmp	r6, r0
   bfd8c:	d3f5      	bcc.n	bfd7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   bfd8e:	683b      	ldr	r3, [r7, #0]
   bfd90:	464a      	mov	r2, r9
   bfd92:	68db      	ldr	r3, [r3, #12]
   bfd94:	4641      	mov	r1, r8
   bfd96:	4638      	mov	r0, r7
   bfd98:	4798      	blx	r3
   bfd9a:	e7ee      	b.n	bfd7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   bfd9c:	2300      	movs	r3, #0
   bfd9e:	7323      	strb	r3, [r4, #12]
   bfda0:	e7de      	b.n	bfd60 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   bfda2:	bf00      	nop
   bfda4:	e000ed00 	.word	0xe000ed00

000bfda8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   bfda8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bfdac:	4b16      	ldr	r3, [pc, #88]	; (bfe08 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   bfdae:	685b      	ldr	r3, [r3, #4]
   bfdb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   bfdb4:	4605      	mov	r5, r0
   bfdb6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   bfdb8:	bb1b      	cbnz	r3, bfe02 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   bfdba:	f7ff fe59 	bl	bfa70 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   bfdbe:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   bfdc2:	4604      	mov	r4, r0
   bfdc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfdc6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bfdc8:	f7ff fd2c 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
   bfdcc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   bfdd0:	2446      	movs	r4, #70	; 0x46
   bfdd2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   bfdd6:	45b0      	cmp	r8, r6
   bfdd8:	d109      	bne.n	bfdee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   bfdda:	a801      	add	r0, sp, #4
   bfddc:	f7ff ff61 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   bfde0:	42a5      	cmp	r5, r4
   bfde2:	bfb4      	ite	lt
   bfde4:	2000      	movlt	r0, #0
   bfde6:	2001      	movge	r0, #1
}
   bfde8:	b002      	add	sp, #8
   bfdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   bfdee:	f856 0b04 	ldr.w	r0, [r6], #4
   bfdf2:	4639      	mov	r1, r7
   bfdf4:	3004      	adds	r0, #4
   bfdf6:	f7ff fdc7 	bl	bf988 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   bfdfa:	4284      	cmp	r4, r0
   bfdfc:	bfa8      	it	ge
   bfdfe:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   bfe00:	e7e9      	b.n	bfdd6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   bfe02:	2000      	movs	r0, #0
   bfe04:	e7f0      	b.n	bfde8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   bfe06:	bf00      	nop
   bfe08:	e000ed00 	.word	0xe000ed00

000bfe0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfe0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfe0e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   bfe12:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bfe14:	4604      	mov	r4, r0
   bfe16:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bfe18:	db0d      	blt.n	bfe36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   bfe1a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   bfe1c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bfe1e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bfe20:	dd04      	ble.n	bfe2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   bfe22:	00b9      	lsls	r1, r7, #2
   bfe24:	f7fd fc7e 	bl	bd724 <realloc>
            if (!d) {
   bfe28:	b918      	cbnz	r0, bfe32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   bfe2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   bfe2c:	f7fd fc72 	bl	bd714 <free>
        T* d = nullptr;
   bfe30:	2000      	movs	r0, #0
        data_ = d;
   bfe32:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bfe34:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bfe36:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   bfe38:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bfe3a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   bfe3e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfe40:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   bfe44:	1d08      	adds	r0, r1, #4
   bfe46:	f003 fd81 	bl	c394c <memmove>
    new(p) T(std::move(value));
   bfe4a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   bfe4e:	6863      	ldr	r3, [r4, #4]
   bfe50:	3301      	adds	r3, #1
   bfe52:	6063      	str	r3, [r4, #4]
    return true;
   bfe54:	2001      	movs	r0, #1
   bfe56:	e7e8      	b.n	bfe2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000bfe58 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfe58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   bfe5a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   bfe5e:	4604      	mov	r4, r0
   bfe60:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfe62:	9301      	str	r3, [sp, #4]
   bfe64:	460d      	mov	r5, r1
      { _M_device.lock(); }
   bfe66:	f7ff fcdd 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   bfe6a:	e9d4 3200 	ldrd	r3, r2, [r4]
   bfe6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   bfe72:	4293      	cmp	r3, r2
   bfe74:	4619      	mov	r1, r3
   bfe76:	d00b      	beq.n	bfe90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   bfe78:	6809      	ldr	r1, [r1, #0]
   bfe7a:	42a9      	cmp	r1, r5
   bfe7c:	f103 0304 	add.w	r3, r3, #4
   bfe80:	d1f7      	bne.n	bfe72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   bfe82:	a801      	add	r0, sp, #4
   bfe84:	f7ff ff0d 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfe88:	2500      	movs	r5, #0
}
   bfe8a:	4628      	mov	r0, r5
   bfe8c:	b003      	add	sp, #12
   bfe8e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   bfe90:	4629      	mov	r1, r5
   bfe92:	4620      	mov	r0, r4
   bfe94:	f7ff ffba 	bl	bfe0c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   bfe98:	4605      	mov	r5, r0
   bfe9a:	2800      	cmp	r0, #0
   bfe9c:	d0f1      	beq.n	bfe82 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   bfe9e:	6863      	ldr	r3, [r4, #4]
   bfea0:	2b01      	cmp	r3, #1
   bfea2:	d101      	bne.n	bfea8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bfea4:	f7ff fe00 	bl	bfaa8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bfea8:	a801      	add	r0, sp, #4
   bfeaa:	f7ff fefa 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bfeae:	e7ec      	b.n	bfe8a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bfeb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfeb0:	b570      	push	{r4, r5, r6, lr}
   bfeb2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bfeb4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bfeb8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bfeba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bfebe:	4282      	cmp	r2, r0
   bfec0:	d00f      	beq.n	bfee2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bfec2:	4601      	mov	r1, r0
            if (*p == value) {
   bfec4:	681d      	ldr	r5, [r3, #0]
   bfec6:	f851 6b04 	ldr.w	r6, [r1], #4
   bfeca:	42ae      	cmp	r6, r5
   bfecc:	d107      	bne.n	bfede <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bfece:	1a52      	subs	r2, r2, r1
   bfed0:	f003 fd3c 	bl	c394c <memmove>
    --size_;
   bfed4:	6863      	ldr	r3, [r4, #4]
   bfed6:	3b01      	subs	r3, #1
   bfed8:	6063      	str	r3, [r4, #4]
    return true;
   bfeda:	2001      	movs	r0, #1
}
   bfedc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bfede:	4608      	mov	r0, r1
   bfee0:	e7ed      	b.n	bfebe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bfee2:	2000      	movs	r0, #0
   bfee4:	e7fa      	b.n	bfedc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bfee6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfee6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bfee8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bfeec:	4604      	mov	r4, r0
   bfeee:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bfef0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bfef2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bfef4:	f7ff fc96 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bfef8:	a901      	add	r1, sp, #4
   bfefa:	4620      	mov	r0, r4
   bfefc:	f7ff ffd8 	bl	bfeb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bff00:	b118      	cbz	r0, bff0a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bff02:	6863      	ldr	r3, [r4, #4]
   bff04:	b90b      	cbnz	r3, bff0a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bff06:	f7ff fddb 	bl	bfac0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bff0a:	a803      	add	r0, sp, #12
   bff0c:	f7ff fec9 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bff10:	b004      	add	sp, #16
   bff12:	bd10      	pop	{r4, pc}

000bff14 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bff14:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bff16:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bff1a:	2318      	movs	r3, #24
   bff1c:	4604      	mov	r4, r0
   bff1e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bff22:	42ae      	cmp	r6, r5
   bff24:	d015      	beq.n	bff52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bff26:	f105 0110 	add.w	r1, r5, #16
   bff2a:	4620      	mov	r0, r4
   bff2c:	f7ff ffc0 	bl	bfeb0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bff30:	6863      	ldr	r3, [r4, #4]
   bff32:	b90b      	cbnz	r3, bff38 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bff34:	f7ff fdc4 	bl	bfac0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bff38:	69e0      	ldr	r0, [r4, #28]
   bff3a:	6929      	ldr	r1, [r5, #16]
   bff3c:	6803      	ldr	r3, [r0, #0]
   bff3e:	68db      	ldr	r3, [r3, #12]
   bff40:	4798      	blx	r3
        if (h.stream) {
   bff42:	6969      	ldr	r1, [r5, #20]
   bff44:	b119      	cbz	r1, bff4e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   bff46:	6a20      	ldr	r0, [r4, #32]
   bff48:	6803      	ldr	r3, [r0, #0]
   bff4a:	68db      	ldr	r3, [r3, #12]
   bff4c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   bff4e:	3518      	adds	r5, #24
   bff50:	e7e7      	b.n	bff22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   bff52:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bff56:	2618      	movs	r6, #24
   bff58:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bff5c:	42ae      	cmp	r6, r5
   bff5e:	d004      	beq.n	bff6a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   bff60:	4628      	mov	r0, r5
   bff62:	f000 fea9 	bl	c0cb8 <_ZN6StringD1Ev>
   bff66:	3518      	adds	r5, #24
   bff68:	e7f8      	b.n	bff5c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   bff6a:	2300      	movs	r3, #0
   bff6c:	6163      	str	r3, [r4, #20]
}
   bff6e:	bd70      	pop	{r4, r5, r6, pc}

000bff70 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bff70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bff72:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bff74:	f7ff fda4 	bl	bfac0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bff78:	f104 0324 	add.w	r3, r4, #36	; 0x24
   bff7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bff7e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   bff80:	f7ff fc50 	bl	bf824 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   bff84:	4620      	mov	r0, r4
   bff86:	f7ff ffc5 	bl	bff14 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   bff8a:	a801      	add	r0, sp, #4
   bff8c:	f7ff fe89 	bl	bfca2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   bff90:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bff92:	b108      	cbz	r0, bff98 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   bff94:	f7fd f8a8 	bl	bd0e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   bff98:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   bff9c:	2618      	movs	r6, #24
   bff9e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bffa2:	42ae      	cmp	r6, r5
   bffa4:	d004      	beq.n	bffb0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   bffa6:	4628      	mov	r0, r5
   bffa8:	f000 fe86 	bl	c0cb8 <_ZN6StringD1Ev>
   bffac:	3518      	adds	r5, #24
   bffae:	e7f8      	b.n	bffa2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   bffb0:	6920      	ldr	r0, [r4, #16]
   bffb2:	f7fd fbaf 	bl	bd714 <free>
   bffb6:	6820      	ldr	r0, [r4, #0]
   bffb8:	f7fd fbac 	bl	bd714 <free>
}
   bffbc:	4620      	mov	r0, r4
   bffbe:	b002      	add	sp, #8
   bffc0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bffc4 <__tcf_2>:
    static LogManager mgr;
   bffc4:	4801      	ldr	r0, [pc, #4]	; (bffcc <__tcf_2+0x8>)
   bffc6:	f7ff bfd3 	b.w	bff70 <_ZN5spark10LogManagerD1Ev>
   bffca:	bf00      	nop
   bffcc:	2003e678 	.word	0x2003e678

000bffd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   bffd0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bffd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bffd4:	4604      	mov	r4, r0
   bffd6:	460d      	mov	r5, r1
   bffd8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bffda:	d915      	bls.n	c0008 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   bffdc:	4290      	cmp	r0, r2
   bffde:	d214      	bcs.n	c000a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   bffe0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bffe4:	1a75      	subs	r5, r6, r1
   bffe6:	f1a1 0714 	sub.w	r7, r1, #20
   bffea:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bffec:	42b7      	cmp	r7, r6
   bffee:	d01a      	beq.n	c0026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   bfff0:	b11c      	cbz	r4, bfffa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   bfff2:	4631      	mov	r1, r6
   bfff4:	4620      	mov	r0, r4
   bfff6:	f7ff fc78 	bl	bf8ea <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   bfffa:	f106 0008 	add.w	r0, r6, #8
   bfffe:	f7ff fdf9 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0002:	3e14      	subs	r6, #20
   c0004:	3c14      	subs	r4, #20
   c0006:	e7f1      	b.n	bffec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0008:	d00d      	beq.n	c0026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c000a:	42b5      	cmp	r5, r6
   c000c:	d00b      	beq.n	c0026 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c000e:	b11c      	cbz	r4, c0018 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0010:	4629      	mov	r1, r5
   c0012:	4620      	mov	r0, r4
   c0014:	f7ff fc69 	bl	bf8ea <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0018:	f105 0008 	add.w	r0, r5, #8
   c001c:	f7ff fdea 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0020:	3514      	adds	r5, #20
   c0022:	3414      	adds	r4, #20
   c0024:	e7f1      	b.n	c000a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0028 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0028:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c002a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c002c:	4604      	mov	r4, r0
   c002e:	460d      	mov	r5, r1
   c0030:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0032:	d914      	bls.n	c005e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0034:	4290      	cmp	r0, r2
   c0036:	d213      	bcs.n	c0060 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0038:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c003c:	1a75      	subs	r5, r6, r1
   c003e:	f1a1 0710 	sub.w	r7, r1, #16
   c0042:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0044:	42b7      	cmp	r7, r6
   c0046:	d018      	beq.n	c007a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0048:	b11c      	cbz	r4, c0052 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c004a:	4631      	mov	r1, r6
   c004c:	4620      	mov	r0, r4
   c004e:	f000 feaf 	bl	c0db0 <_ZN6StringC1EOS_>
                end->~T();
   c0052:	4630      	mov	r0, r6
   c0054:	f000 fe30 	bl	c0cb8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0058:	3e10      	subs	r6, #16
   c005a:	3c10      	subs	r4, #16
   c005c:	e7f2      	b.n	c0044 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c005e:	d00c      	beq.n	c007a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0060:	42b5      	cmp	r5, r6
   c0062:	d00a      	beq.n	c007a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0064:	b11c      	cbz	r4, c006e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0066:	4629      	mov	r1, r5
   c0068:	4620      	mov	r0, r4
   c006a:	f000 fea1 	bl	c0db0 <_ZN6StringC1EOS_>
                p->~T();
   c006e:	4628      	mov	r0, r5
   c0070:	f000 fe22 	bl	c0cb8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0074:	3510      	adds	r5, #16
   c0076:	3410      	adds	r4, #16
   c0078:	e7f2      	b.n	c0060 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c007a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c007c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c007c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c007e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0080:	4605      	mov	r5, r0
        if (n > 0) {
   c0082:	dd11      	ble.n	c00a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0084:	0130      	lsls	r0, r6, #4
   c0086:	f7fd fb3d 	bl	bd704 <malloc>
            if (!d) {
   c008a:	4604      	mov	r4, r0
   c008c:	b158      	cbz	r0, c00a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c008e:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0092:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c0096:	f7ff ffc7 	bl	c0028 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c009a:	6828      	ldr	r0, [r5, #0]
   c009c:	f7fd fb3a 	bl	bd714 <free>
        data_ = d;
   c00a0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c00a2:	60ae      	str	r6, [r5, #8]
        return true;
   c00a4:	2001      	movs	r0, #1
    }
   c00a6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c00a8:	2400      	movs	r4, #0
   c00aa:	e7f6      	b.n	c009a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c00ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c00ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c00b0:	4690      	mov	r8, r2
   c00b2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c00b4:	2300      	movs	r3, #0
   c00b6:	9103      	str	r1, [sp, #12]
    return size_;
   c00b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c00bc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c00be:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c00c0:	4299      	cmp	r1, r3
        capacity_(0) {
   c00c2:	e9c0 3300 	strd	r3, r3, [r0]
   c00c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c00ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c00ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c00d2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c00d4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c00d6:	dc23      	bgt.n	c0120 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c00d8:	e9d8 5700 	ldrd	r5, r7, [r8]
   c00dc:	2314      	movs	r3, #20
   c00de:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c00e2:	42af      	cmp	r7, r5
   c00e4:	d03b      	beq.n	c015e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c00e6:	4629      	mov	r1, r5
   c00e8:	a80b      	add	r0, sp, #44	; 0x2c
   c00ea:	f000 fe61 	bl	c0db0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c00ee:	a90b      	add	r1, sp, #44	; 0x2c
   c00f0:	a80f      	add	r0, sp, #60	; 0x3c
   c00f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c00f4:	f000 fe5c 	bl	c0db0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c00f8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c00fc:	4299      	cmp	r1, r3
   c00fe:	da1b      	bge.n	c0138 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0100:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0102:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0104:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0108:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c010c:	4631      	mov	r1, r6
   c010e:	f106 0010 	add.w	r0, r6, #16
   c0112:	f7ff ff89 	bl	c0028 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0116:	b9ee      	cbnz	r6, c0154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0118:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c011a:	3301      	adds	r3, #1
   c011c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c011e:	e011      	b.n	c0144 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0120:	a808      	add	r0, sp, #32
   c0122:	f7ff ffab 	bl	c007c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0126:	2800      	cmp	r0, #0
   c0128:	d1d6      	bne.n	c00d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c012a:	a808      	add	r0, sp, #32
   c012c:	f7fd ff27 	bl	bdf7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0130:	4620      	mov	r0, r4
   c0132:	b015      	add	sp, #84	; 0x54
   c0134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0138:	3101      	adds	r1, #1
   c013a:	a808      	add	r0, sp, #32
   c013c:	f7ff ff9e 	bl	c007c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0140:	2800      	cmp	r0, #0
   c0142:	d1dd      	bne.n	c0100 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0144:	a80f      	add	r0, sp, #60	; 0x3c
   c0146:	f000 fdb7 	bl	c0cb8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c014a:	a80b      	add	r0, sp, #44	; 0x2c
   c014c:	f000 fdb4 	bl	c0cb8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0150:	3514      	adds	r5, #20
   c0152:	e7c6      	b.n	c00e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0154:	a90f      	add	r1, sp, #60	; 0x3c
   c0156:	4630      	mov	r0, r6
   c0158:	f000 fe2a 	bl	c0db0 <_ZN6StringC1EOS_>
   c015c:	e7dc      	b.n	c0118 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c015e:	2600      	movs	r6, #0
   c0160:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0164:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0166:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c016a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c016e:	429e      	cmp	r6, r3
   c0170:	da7c      	bge.n	c026c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0172:	0133      	lsls	r3, r6, #4
   c0174:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0176:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0178:	b90b      	cbnz	r3, c017e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c017a:	3601      	adds	r6, #1
   c017c:	e7f5      	b.n	c016a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c017e:	2300      	movs	r3, #0
   c0180:	9307      	str	r3, [sp, #28]
   c0182:	fb09 f306 	mul.w	r3, r9, r6
   c0186:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0188:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c018a:	a907      	add	r1, sp, #28
   c018c:	a806      	add	r0, sp, #24
   c018e:	f7ff fb22 	bl	bf7d6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0192:	4682      	mov	sl, r0
   c0194:	2800      	cmp	r0, #0
   c0196:	d0f0      	beq.n	c017a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0198:	f04f 0300 	mov.w	r3, #0
   c019c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c01a0:	4601      	mov	r1, r0
   c01a2:	9a07      	ldr	r2, [sp, #28]
   c01a4:	f10d 0317 	add.w	r3, sp, #23
   c01a8:	4628      	mov	r0, r5
   c01aa:	f7ff fbb1 	bl	bf910 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c01ae:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c01b2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c01b4:	2f00      	cmp	r7, #0
   c01b6:	d14a      	bne.n	c024e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c01b8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c01bc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c01c0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c01c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c01c8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c01cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c01d0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c01d2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c01d6:	4293      	cmp	r3, r2
   c01d8:	db17      	blt.n	c020a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c01da:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c01de:	f1ba 0f00 	cmp.w	sl, #0
   c01e2:	dd30      	ble.n	c0246 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c01e4:	fb09 f00a 	mul.w	r0, r9, sl
   c01e8:	f7fd fa8c 	bl	bd704 <malloc>
            if (!d) {
   c01ec:	4683      	mov	fp, r0
   c01ee:	b360      	cbz	r0, c024a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c01f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   c01f4:	fb09 1202 	mla	r2, r9, r2, r1
   c01f8:	f7ff feea 	bl	bffd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c01fc:	6828      	ldr	r0, [r5, #0]
   c01fe:	f7fd fa89 	bl	bd714 <free>
        data_ = d;
   c0202:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0206:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c020a:	682b      	ldr	r3, [r5, #0]
   c020c:	9a01      	ldr	r2, [sp, #4]
   c020e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0212:	686a      	ldr	r2, [r5, #4]
   c0214:	4651      	mov	r1, sl
   c0216:	fb09 3202 	mla	r2, r9, r2, r3
   c021a:	f10a 0014 	add.w	r0, sl, #20
   c021e:	f7ff fed7 	bl	bffd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0222:	f1ba 0f00 	cmp.w	sl, #0
   c0226:	d003      	beq.n	c0230 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0228:	a90f      	add	r1, sp, #60	; 0x3c
   c022a:	4650      	mov	r0, sl
   c022c:	f7ff fb5d 	bl	bf8ea <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0230:	686b      	ldr	r3, [r5, #4]
   c0232:	3301      	adds	r3, #1
   c0234:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0236:	a811      	add	r0, sp, #68	; 0x44
   c0238:	f7ff fcdc 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c023c:	b13f      	cbz	r7, c024e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c023e:	a80b      	add	r0, sp, #44	; 0x2c
   c0240:	f7ff fcd8 	bl	bfbf4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0244:	e771      	b.n	c012a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0246:	46bb      	mov	fp, r7
   c0248:	e7d8      	b.n	c01fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c024a:	2701      	movs	r7, #1
   c024c:	e7f3      	b.n	c0236 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c024e:	9b01      	ldr	r3, [sp, #4]
   c0250:	682d      	ldr	r5, [r5, #0]
   c0252:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0256:	9b06      	ldr	r3, [sp, #24]
   c0258:	781b      	ldrb	r3, [r3, #0]
   c025a:	b92b      	cbnz	r3, c0268 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c025c:	f8d8 3000 	ldr.w	r3, [r8]
   c0260:	9a02      	ldr	r2, [sp, #8]
   c0262:	4413      	add	r3, r2
   c0264:	7c1b      	ldrb	r3, [r3, #16]
   c0266:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0268:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c026a:	e78e      	b.n	c018a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c026c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c026e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0270:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0272:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0274:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0276:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c027a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c027c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c027e:	60a2      	str	r2, [r4, #8]
   c0280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0282:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0284:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0286:	60e2      	str	r2, [r4, #12]
   c0288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c028a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c028c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c028e:	6122      	str	r2, [r4, #16]
   c0290:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0292:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0294:	9b03      	ldr	r3, [sp, #12]
   c0296:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0298:	6162      	str	r2, [r4, #20]
   c029a:	7623      	strb	r3, [r4, #24]
   c029c:	e7cf      	b.n	c023e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c02a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c02a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c02a2:	4604      	mov	r4, r0
   c02a4:	b087      	sub	sp, #28
   c02a6:	460d      	mov	r5, r1
        filter_(level, filters) {
   c02a8:	4626      	mov	r6, r4
        stream_(&stream) {
   c02aa:	4619      	mov	r1, r3
   c02ac:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c02ae:	4617      	mov	r7, r2
        stream_(&stream) {
   c02b0:	f7f5 fd62 	bl	b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c02b4:	4b0b      	ldr	r3, [pc, #44]	; (c02e4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c02b6:	f846 3b04 	str.w	r3, [r6], #4
   c02ba:	4669      	mov	r1, sp
   c02bc:	a803      	add	r0, sp, #12
   c02be:	f7f5 fd5b 	bl	b5d78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c02c2:	aa03      	add	r2, sp, #12
   c02c4:	4639      	mov	r1, r7
   c02c6:	4630      	mov	r0, r6
   c02c8:	f7ff fef0 	bl	c00ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c02cc:	a803      	add	r0, sp, #12
   c02ce:	f7f5 fabf 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c02d2:	4668      	mov	r0, sp
   c02d4:	f7f5 fabc 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c02d8:	4b03      	ldr	r3, [pc, #12]	; (c02e8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c02da:	6023      	str	r3, [r4, #0]
}
   c02dc:	4620      	mov	r0, r4
        stream_(&stream) {
   c02de:	6225      	str	r5, [r4, #32]
}
   c02e0:	b007      	add	sp, #28
   c02e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c02e4:	000c60a8 	.word	0x000c60a8
   c02e8:	000c7254 	.word	0x000c7254

000c02ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c02ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   c02ee:	460f      	mov	r7, r1
   c02f0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c02f2:	491d      	ldr	r1, [pc, #116]	; (c0368 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c02f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c02f6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c02f8:	4616      	mov	r6, r2
   c02fa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c02fc:	f003 fb9c 	bl	c3a38 <strcmp>
   c0300:	b9c0      	cbnz	r0, c0334 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0302:	b1a4      	cbz	r4, c032e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0304:	4629      	mov	r1, r5
   c0306:	a801      	add	r0, sp, #4
   c0308:	f7ff fcbc 	bl	bfc84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c030c:	4917      	ldr	r1, [pc, #92]	; (c036c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c030e:	2024      	movs	r0, #36	; 0x24
   c0310:	f001 f90a 	bl	c1528 <_ZnwjRKSt9nothrow_t>
   c0314:	4605      	mov	r5, r0
   c0316:	b130      	cbz	r0, c0326 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0318:	ab01      	add	r3, sp, #4
   c031a:	4632      	mov	r2, r6
   c031c:	4621      	mov	r1, r4
   c031e:	f7ff ffbf 	bl	c02a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0322:	4b13      	ldr	r3, [pc, #76]	; (c0370 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0324:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0326:	a801      	add	r0, sp, #4
   c0328:	f7f5 fa92 	bl	b5850 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c032c:	462c      	mov	r4, r5
}
   c032e:	4620      	mov	r0, r4
   c0330:	b005      	add	sp, #20
   c0332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0334:	490f      	ldr	r1, [pc, #60]	; (c0374 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0336:	4638      	mov	r0, r7
   c0338:	f003 fb7e 	bl	c3a38 <strcmp>
   c033c:	b990      	cbnz	r0, c0364 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c033e:	2c00      	cmp	r4, #0
   c0340:	d0f5      	beq.n	c032e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0342:	4629      	mov	r1, r5
   c0344:	a801      	add	r0, sp, #4
   c0346:	f7ff fc9d 	bl	bfc84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c034a:	4908      	ldr	r1, [pc, #32]	; (c036c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c034c:	2024      	movs	r0, #36	; 0x24
   c034e:	f001 f8eb 	bl	c1528 <_ZnwjRKSt9nothrow_t>
   c0352:	4605      	mov	r5, r0
   c0354:	2800      	cmp	r0, #0
   c0356:	d0e6      	beq.n	c0326 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0358:	ab01      	add	r3, sp, #4
   c035a:	4632      	mov	r2, r6
   c035c:	4621      	mov	r1, r4
   c035e:	f7ff ff9f 	bl	c02a0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0362:	e7e0      	b.n	c0326 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0364:	2400      	movs	r4, #0
   c0366:	e7e2      	b.n	c032e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0368:	000c71d9 	.word	0x000c71d9
   c036c:	000c736c 	.word	0x000c736c
   c0370:	000c726c 	.word	0x000c726c
   c0374:	000c71dd 	.word	0x000c71dd

000c0378 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0378:	4b01      	ldr	r3, [pc, #4]	; (c0380 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c037a:	4a02      	ldr	r2, [pc, #8]	; (c0384 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c037c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c037e:	4770      	bx	lr
   c0380:	2003e674 	.word	0x2003e674
   c0384:	000c71ee 	.word	0x000c71ee

000c0388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c038c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c038e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0392:	4604      	mov	r4, r0
   c0394:	460e      	mov	r6, r1
   c0396:	4617      	mov	r7, r2
   c0398:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c039a:	f000 ff09 	bl	c11b0 <_Z16_fetch_usbserialv>
   c039e:	4581      	cmp	r9, r0
   c03a0:	d04c      	beq.n	c043c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c03a2:	792b      	ldrb	r3, [r5, #4]
   c03a4:	0719      	lsls	r1, r3, #28
   c03a6:	d504      	bpl.n	c03b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c03a8:	696a      	ldr	r2, [r5, #20]
   c03aa:	4954      	ldr	r1, [pc, #336]	; (c04fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c03ac:	4620      	mov	r0, r4
   c03ae:	f7ff fa8d 	bl	bf8cc <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c03b2:	f1b8 0f00 	cmp.w	r8, #0
   c03b6:	d00d      	beq.n	c03d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c03b8:	215b      	movs	r1, #91	; 0x5b
   c03ba:	4620      	mov	r0, r4
   c03bc:	f7ff fa7a 	bl	bf8b4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c03c0:	4641      	mov	r1, r8
   c03c2:	4620      	mov	r0, r4
   c03c4:	f7ff fa67 	bl	bf896 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c03c8:	6823      	ldr	r3, [r4, #0]
   c03ca:	494d      	ldr	r1, [pc, #308]	; (c0500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c03cc:	68db      	ldr	r3, [r3, #12]
   c03ce:	2202      	movs	r2, #2
   c03d0:	4620      	mov	r0, r4
   c03d2:	4798      	blx	r3
    if (attr.has_file) {
   c03d4:	792b      	ldrb	r3, [r5, #4]
   c03d6:	07da      	lsls	r2, r3, #31
   c03d8:	d523      	bpl.n	c0422 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c03da:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c03de:	212f      	movs	r1, #47	; 0x2f
   c03e0:	4640      	mov	r0, r8
   c03e2:	f003 fba6 	bl	c3b32 <strrchr>
    if (s1) {
   c03e6:	b108      	cbz	r0, c03ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c03e8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c03ec:	4641      	mov	r1, r8
   c03ee:	4620      	mov	r0, r4
   c03f0:	f7ff fa51 	bl	bf896 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c03f4:	792b      	ldrb	r3, [r5, #4]
   c03f6:	079b      	lsls	r3, r3, #30
   c03f8:	d508      	bpl.n	c040c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c03fa:	213a      	movs	r1, #58	; 0x3a
   c03fc:	4620      	mov	r0, r4
   c03fe:	f7ff fa59 	bl	bf8b4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0402:	68ea      	ldr	r2, [r5, #12]
   c0404:	493f      	ldr	r1, [pc, #252]	; (c0504 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0406:	4620      	mov	r0, r4
   c0408:	f7ff fa60 	bl	bf8cc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c040c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c040e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0410:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0414:	68db      	ldr	r3, [r3, #12]
   c0416:	bf14      	ite	ne
   c0418:	493b      	ldrne	r1, [pc, #236]	; (c0508 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c041a:	493c      	ldreq	r1, [pc, #240]	; (c050c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c041c:	2202      	movs	r2, #2
            write(": ", 2);
   c041e:	4620      	mov	r0, r4
   c0420:	4798      	blx	r3
    if (attr.has_function) {
   c0422:	792b      	ldrb	r3, [r5, #4]
   c0424:	0758      	lsls	r0, r3, #29
   c0426:	d51d      	bpl.n	c0464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0428:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c042a:	460b      	mov	r3, r1
   c042c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c042e:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0432:	b160      	cbz	r0, c044e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0434:	2820      	cmp	r0, #32
   c0436:	d108      	bne.n	c044a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0438:	4619      	mov	r1, r3
   c043a:	e7f7      	b.n	c042c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c043c:	4834      	ldr	r0, [pc, #208]	; (c0510 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c043e:	f000 f966 	bl	c070e <_ZN5spark12NetworkClass9listeningEv>
   c0442:	2800      	cmp	r0, #0
   c0444:	d0ad      	beq.n	c03a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c044a:	2828      	cmp	r0, #40	; 0x28
   c044c:	d1ee      	bne.n	c042c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c044e:	6823      	ldr	r3, [r4, #0]
   c0450:	1a52      	subs	r2, r2, r1
   c0452:	68db      	ldr	r3, [r3, #12]
   c0454:	4620      	mov	r0, r4
   c0456:	4798      	blx	r3
        write("(): ", 4);
   c0458:	6823      	ldr	r3, [r4, #0]
   c045a:	492e      	ldr	r1, [pc, #184]	; (c0514 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c045c:	68db      	ldr	r3, [r3, #12]
   c045e:	2204      	movs	r2, #4
   c0460:	4620      	mov	r0, r4
   c0462:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0464:	2100      	movs	r1, #0
   c0466:	4638      	mov	r0, r7
   c0468:	f7fd f856 	bl	bd518 <log_level_name>
   c046c:	4601      	mov	r1, r0
    write(s);
   c046e:	4620      	mov	r0, r4
   c0470:	f7ff fa11 	bl	bf896 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0474:	6823      	ldr	r3, [r4, #0]
   c0476:	4925      	ldr	r1, [pc, #148]	; (c050c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0478:	68db      	ldr	r3, [r3, #12]
   c047a:	2202      	movs	r2, #2
   c047c:	4620      	mov	r0, r4
   c047e:	4798      	blx	r3
    if (msg) {
   c0480:	b11e      	cbz	r6, c048a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c0482:	4631      	mov	r1, r6
   c0484:	4620      	mov	r0, r4
   c0486:	f7ff fa06 	bl	bf896 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c048a:	792b      	ldrb	r3, [r5, #4]
   c048c:	f013 0f30 	tst.w	r3, #48	; 0x30
   c0490:	d02c      	beq.n	c04ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c0492:	6823      	ldr	r3, [r4, #0]
   c0494:	4920      	ldr	r1, [pc, #128]	; (c0518 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0496:	68db      	ldr	r3, [r3, #12]
   c0498:	2202      	movs	r2, #2
   c049a:	4620      	mov	r0, r4
   c049c:	4798      	blx	r3
        if (attr.has_code) {
   c049e:	792b      	ldrb	r3, [r5, #4]
   c04a0:	06d9      	lsls	r1, r3, #27
   c04a2:	d50a      	bpl.n	c04ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c04a4:	6823      	ldr	r3, [r4, #0]
   c04a6:	491d      	ldr	r1, [pc, #116]	; (c051c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c04a8:	68db      	ldr	r3, [r3, #12]
   c04aa:	2207      	movs	r2, #7
   c04ac:	4620      	mov	r0, r4
   c04ae:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c04b0:	69aa      	ldr	r2, [r5, #24]
   c04b2:	491b      	ldr	r1, [pc, #108]	; (c0520 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c04b4:	4620      	mov	r0, r4
   c04b6:	f7ff fa09 	bl	bf8cc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c04ba:	792b      	ldrb	r3, [r5, #4]
   c04bc:	069a      	lsls	r2, r3, #26
   c04be:	d511      	bpl.n	c04e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c04c0:	06db      	lsls	r3, r3, #27
   c04c2:	d505      	bpl.n	c04d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c04c4:	6823      	ldr	r3, [r4, #0]
   c04c6:	4910      	ldr	r1, [pc, #64]	; (c0508 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c04c8:	68db      	ldr	r3, [r3, #12]
   c04ca:	2202      	movs	r2, #2
   c04cc:	4620      	mov	r0, r4
   c04ce:	4798      	blx	r3
            write("details = ", 10);
   c04d0:	6823      	ldr	r3, [r4, #0]
   c04d2:	4914      	ldr	r1, [pc, #80]	; (c0524 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c04d4:	68db      	ldr	r3, [r3, #12]
   c04d6:	4620      	mov	r0, r4
   c04d8:	220a      	movs	r2, #10
   c04da:	4798      	blx	r3
            write(attr.details);
   c04dc:	69e9      	ldr	r1, [r5, #28]
   c04de:	4620      	mov	r0, r4
   c04e0:	f7ff f9d9 	bl	bf896 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c04e4:	215d      	movs	r1, #93	; 0x5d
   c04e6:	4620      	mov	r0, r4
   c04e8:	f7ff f9e4 	bl	bf8b4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c04ec:	6823      	ldr	r3, [r4, #0]
   c04ee:	490e      	ldr	r1, [pc, #56]	; (c0528 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c04f0:	68db      	ldr	r3, [r3, #12]
   c04f2:	4620      	mov	r0, r4
   c04f4:	2202      	movs	r2, #2
}
   c04f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c04fa:	4718      	bx	r3
   c04fc:	000c71f2 	.word	0x000c71f2
   c0500:	000c71f9 	.word	0x000c71f9
   c0504:	000c5dc8 	.word	0x000c5dc8
   c0508:	000c71fc 	.word	0x000c71fc
   c050c:	000c7201 	.word	0x000c7201
   c0510:	2003e6a0 	.word	0x2003e6a0
   c0514:	000c71ff 	.word	0x000c71ff
   c0518:	000c7204 	.word	0x000c7204
   c051c:	000c7207 	.word	0x000c7207
   c0520:	000c720f 	.word	0x000c720f
   c0524:	000c7212 	.word	0x000c7212
   c0528:	000c721d 	.word	0x000c721d

000c052c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c052c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0530:	b085      	sub	sp, #20
    return stream_;
   c0532:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0536:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0538:	4605      	mov	r5, r0
   c053a:	460f      	mov	r7, r1
   c053c:	4690      	mov	r8, r2
   c053e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0540:	f000 fe36 	bl	c11b0 <_Z16_fetch_usbserialv>
   c0544:	4581      	cmp	r9, r0
   c0546:	d105      	bne.n	c0554 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0548:	4849      	ldr	r0, [pc, #292]	; (c0670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c054a:	f000 f8e0 	bl	c070e <_ZN5spark12NetworkClass9listeningEv>
   c054e:	2800      	cmp	r0, #0
   c0550:	f040 808a 	bne.w	c0668 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0554:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0556:	4a47      	ldr	r2, [pc, #284]	; (c0674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0558:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c055a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c055e:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0560:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0562:	f88d 9008 	strb.w	r9, [sp, #8]
   c0566:	f7ff f850 	bl	bf60a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c056a:	4649      	mov	r1, r9
   c056c:	4640      	mov	r0, r8
   c056e:	f7fc ffd3 	bl	bd518 <log_level_name>
    json.name("l", 1).value(s);
   c0572:	4941      	ldr	r1, [pc, #260]	; (c0678 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0574:	4680      	mov	r8, r0
   c0576:	2201      	movs	r2, #1
   c0578:	a801      	add	r0, sp, #4
   c057a:	f7ff f8d5 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c057e:	4641      	mov	r1, r8
   c0580:	f7ff f97b 	bl	bf87a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0584:	b13f      	cbz	r7, c0596 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0586:	493d      	ldr	r1, [pc, #244]	; (c067c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0588:	2201      	movs	r2, #1
   c058a:	a801      	add	r0, sp, #4
   c058c:	f7ff f8cc 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c0590:	4639      	mov	r1, r7
   c0592:	f7ff f972 	bl	bf87a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0596:	b13e      	cbz	r6, c05a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0598:	4939      	ldr	r1, [pc, #228]	; (c0680 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c059a:	2201      	movs	r2, #1
   c059c:	a801      	add	r0, sp, #4
   c059e:	f7ff f8c3 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c05a2:	4631      	mov	r1, r6
   c05a4:	f7ff f969 	bl	bf87a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c05a8:	7923      	ldrb	r3, [r4, #4]
   c05aa:	07df      	lsls	r7, r3, #31
   c05ac:	d50e      	bpl.n	c05cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c05ae:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c05b0:	212f      	movs	r1, #47	; 0x2f
   c05b2:	4630      	mov	r0, r6
   c05b4:	f003 fabd 	bl	c3b32 <strrchr>
    if (s1) {
   c05b8:	b100      	cbz	r0, c05bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c05ba:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c05bc:	4931      	ldr	r1, [pc, #196]	; (c0684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c05be:	2201      	movs	r2, #1
   c05c0:	a801      	add	r0, sp, #4
   c05c2:	f7ff f8b1 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c05c6:	4631      	mov	r1, r6
   c05c8:	f7ff f957 	bl	bf87a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c05cc:	7923      	ldrb	r3, [r4, #4]
   c05ce:	079e      	lsls	r6, r3, #30
   c05d0:	d507      	bpl.n	c05e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c05d2:	492d      	ldr	r1, [pc, #180]	; (c0688 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c05d4:	2202      	movs	r2, #2
   c05d6:	a801      	add	r0, sp, #4
   c05d8:	f7ff f8a6 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c05dc:	68e1      	ldr	r1, [r4, #12]
   c05de:	f7ff f821 	bl	bf624 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c05e2:	7923      	ldrb	r3, [r4, #4]
   c05e4:	0758      	lsls	r0, r3, #29
   c05e6:	d514      	bpl.n	c0612 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c05e8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c05ea:	4633      	mov	r3, r6
   c05ec:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c05ee:	f813 2b01 	ldrb.w	r2, [r3], #1
   c05f2:	b12a      	cbz	r2, c0600 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c05f4:	2a20      	cmp	r2, #32
   c05f6:	d101      	bne.n	c05fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c05f8:	461e      	mov	r6, r3
   c05fa:	e7f7      	b.n	c05ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c05fc:	2a28      	cmp	r2, #40	; 0x28
   c05fe:	d1f5      	bne.n	c05ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0600:	4922      	ldr	r1, [pc, #136]	; (c068c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0602:	2202      	movs	r2, #2
   c0604:	a801      	add	r0, sp, #4
   c0606:	f7ff f88f 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c060a:	1bba      	subs	r2, r7, r6
   c060c:	4631      	mov	r1, r6
   c060e:	f7ff f89b 	bl	bf748 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0612:	7923      	ldrb	r3, [r4, #4]
   c0614:	0719      	lsls	r1, r3, #28
   c0616:	d507      	bpl.n	c0628 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0618:	491d      	ldr	r1, [pc, #116]	; (c0690 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c061a:	2201      	movs	r2, #1
   c061c:	a801      	add	r0, sp, #4
   c061e:	f7ff f883 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c0622:	6961      	ldr	r1, [r4, #20]
   c0624:	f7ff f810 	bl	bf648 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0628:	7923      	ldrb	r3, [r4, #4]
   c062a:	06da      	lsls	r2, r3, #27
   c062c:	d508      	bpl.n	c0640 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c062e:	2204      	movs	r2, #4
   c0630:	4918      	ldr	r1, [pc, #96]	; (c0694 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0632:	eb0d 0002 	add.w	r0, sp, r2
   c0636:	f7ff f877 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c063a:	69a1      	ldr	r1, [r4, #24]
   c063c:	f7fe fff2 	bl	bf624 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0640:	7923      	ldrb	r3, [r4, #4]
   c0642:	069b      	lsls	r3, r3, #26
   c0644:	d507      	bpl.n	c0656 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0646:	4914      	ldr	r1, [pc, #80]	; (c0698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0648:	2206      	movs	r2, #6
   c064a:	a801      	add	r0, sp, #4
   c064c:	f7ff f86c 	bl	bf728 <_ZN5spark10JSONWriter4nameEPKcj>
   c0650:	69e1      	ldr	r1, [r4, #28]
   c0652:	f7ff f912 	bl	bf87a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0656:	a801      	add	r0, sp, #4
   c0658:	f7fe ffc1 	bl	bf5de <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c065c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c065e:	490f      	ldr	r1, [pc, #60]	; (c069c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0660:	6803      	ldr	r3, [r0, #0]
   c0662:	2202      	movs	r2, #2
   c0664:	68db      	ldr	r3, [r3, #12]
   c0666:	4798      	blx	r3
}
   c0668:	b005      	add	sp, #20
   c066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c066e:	bf00      	nop
   c0670:	2003e6a0 	.word	0x2003e6a0
   c0674:	000c723c 	.word	0x000c723c
   c0678:	000c71cf 	.word	0x000c71cf
   c067c:	000c7220 	.word	0x000c7220
   c0680:	000c7b8e 	.word	0x000c7b8e
   c0684:	000c5dfa 	.word	0x000c5dfa
   c0688:	000c7222 	.word	0x000c7222
   c068c:	000c7225 	.word	0x000c7225
   c0690:	000c5f41 	.word	0x000c5f41
   c0694:	000c7228 	.word	0x000c7228
   c0698:	000c722d 	.word	0x000c722d
   c069c:	000c721d 	.word	0x000c721d

000c06a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c06a0:	2300      	movs	r3, #0
   c06a2:	6840      	ldr	r0, [r0, #4]
   c06a4:	461a      	mov	r2, r3
   c06a6:	f7fc bfcd 	b.w	bd644 <network_connect>

000c06aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c06aa:	6840      	ldr	r0, [r0, #4]
   c06ac:	2200      	movs	r2, #0
   c06ae:	2102      	movs	r1, #2
   c06b0:	f7fc bfd8 	b.w	bd664 <network_disconnect>

000c06b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c06b4:	2200      	movs	r2, #0
   c06b6:	6840      	ldr	r0, [r0, #4]
   c06b8:	4611      	mov	r1, r2
   c06ba:	f7fc bfcb 	b.w	bd654 <network_connecting>

000c06be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c06be:	2200      	movs	r2, #0
   c06c0:	6840      	ldr	r0, [r0, #4]
   c06c2:	4611      	mov	r1, r2
   c06c4:	f7fc bfd6 	b.w	bd674 <network_ready>

000c06c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c06c8:	2300      	movs	r3, #0
   c06ca:	6840      	ldr	r0, [r0, #4]
   c06cc:	461a      	mov	r2, r3
   c06ce:	4619      	mov	r1, r3
   c06d0:	f7fc bfd8 	b.w	bd684 <network_on>

000c06d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c06d4:	2300      	movs	r3, #0
   c06d6:	6840      	ldr	r0, [r0, #4]
   c06d8:	461a      	mov	r2, r3
   c06da:	4619      	mov	r1, r3
   c06dc:	f7fc bfda 	b.w	bd694 <network_off>

000c06e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c06e0:	6840      	ldr	r0, [r0, #4]
   c06e2:	2100      	movs	r1, #0
   c06e4:	f7fc bffe 	b.w	bd6e4 <network_is_on>

000c06e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c06e8:	6840      	ldr	r0, [r0, #4]
   c06ea:	2100      	movs	r1, #0
   c06ec:	f7fd b802 	b.w	bd6f4 <network_is_off>

000c06f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c06f0:	6840      	ldr	r0, [r0, #4]
   c06f2:	2200      	movs	r2, #0
   c06f4:	f081 0101 	eor.w	r1, r1, #1
   c06f8:	f7fc bfd4 	b.w	bd6a4 <network_listen>

000c06fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c06fc:	6840      	ldr	r0, [r0, #4]
   c06fe:	2200      	movs	r2, #0
   c0700:	f7fc bfe0 	b.w	bd6c4 <network_set_listen_timeout>

000c0704 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c0704:	2200      	movs	r2, #0
   c0706:	6840      	ldr	r0, [r0, #4]
   c0708:	4611      	mov	r1, r2
   c070a:	f7fc bfe3 	b.w	bd6d4 <network_get_listen_timeout>

000c070e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c070e:	2200      	movs	r2, #0
   c0710:	6840      	ldr	r0, [r0, #4]
   c0712:	4611      	mov	r1, r2
   c0714:	f7fc bfce 	b.w	bd6b4 <network_listening>

000c0718 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c0718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c071c:	b095      	sub	sp, #84	; 0x54
   c071e:	4614      	mov	r4, r2
   c0720:	460d      	mov	r5, r1
   c0722:	4607      	mov	r7, r0
    IPAddress addr;
   c0724:	f7fe fe0a 	bl	bf33c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c0728:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c072a:	221c      	movs	r2, #28
   c072c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c072e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c0730:	f003 f926 	bl	c3980 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c0734:	2340      	movs	r3, #64	; 0x40
   c0736:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c0738:	4620      	mov	r0, r4
   c073a:	466b      	mov	r3, sp
   c073c:	aa0c      	add	r2, sp, #48	; 0x30
   c073e:	2100      	movs	r1, #0
   c0740:	f7fc fdca 	bl	bd2d8 <netdb_getaddrinfo>
    if (!r) {
   c0744:	4604      	mov	r4, r0
   c0746:	2800      	cmp	r0, #0
   c0748:	d14b      	bne.n	c07e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c074a:	4602      	mov	r2, r0
   c074c:	2101      	movs	r1, #1
   c074e:	6868      	ldr	r0, [r5, #4]
   c0750:	f7fc ff90 	bl	bd674 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0754:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c0756:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0758:	4622      	mov	r2, r4
   c075a:	6868      	ldr	r0, [r5, #4]
   c075c:	f7fc ff8a 	bl	bd674 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0760:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c0762:	4681      	mov	r9, r0
        bool ok = false;
   c0764:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0766:	2e00      	cmp	r6, #0
   c0768:	d03b      	beq.n	c07e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c076a:	2900      	cmp	r1, #0
   c076c:	d139      	bne.n	c07e2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c076e:	6873      	ldr	r3, [r6, #4]
   c0770:	2b02      	cmp	r3, #2
   c0772:	d003      	beq.n	c077c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c0774:	2b0a      	cmp	r3, #10
   c0776:	d011      	beq.n	c079c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c0778:	69f6      	ldr	r6, [r6, #28]
   c077a:	e7f4      	b.n	c0766 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c077c:	f1b8 0f00 	cmp.w	r8, #0
   c0780:	d0fa      	beq.n	c0778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c0782:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c0784:	a806      	add	r0, sp, #24
   c0786:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c0788:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c078a:	f7fe fe05 	bl	bf398 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c0790:	1d3c      	adds	r4, r7, #4
   c0792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c0794:	682b      	ldr	r3, [r5, #0]
   c0796:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c0798:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c079a:	e7ed      	b.n	c0778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c079c:	f1b9 0f00 	cmp.w	r9, #0
   c07a0:	d0ea      	beq.n	c0778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c07a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c07a4:	2210      	movs	r2, #16
   c07a6:	a801      	add	r0, sp, #4
   c07a8:	f003 f8ea 	bl	c3980 <memset>
                    a.v = 6;
   c07ac:	2306      	movs	r3, #6
   c07ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c07b2:	ad01      	add	r5, sp, #4
   c07b4:	f104 0308 	add.w	r3, r4, #8
   c07b8:	3418      	adds	r4, #24
   c07ba:	6818      	ldr	r0, [r3, #0]
   c07bc:	6859      	ldr	r1, [r3, #4]
   c07be:	462a      	mov	r2, r5
   c07c0:	c203      	stmia	r2!, {r0, r1}
   c07c2:	3308      	adds	r3, #8
   c07c4:	42a3      	cmp	r3, r4
   c07c6:	4615      	mov	r5, r2
   c07c8:	d1f7      	bne.n	c07ba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c07ca:	a901      	add	r1, sp, #4
   c07cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c07ce:	ad07      	add	r5, sp, #28
   c07d0:	f7fe fdc2 	bl	bf358 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c07d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c07d6:	1d3c      	adds	r4, r7, #4
   c07d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c07da:	682b      	ldr	r3, [r5, #0]
   c07dc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c07de:	4649      	mov	r1, r9
   c07e0:	e7ca      	b.n	c0778 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c07e2:	9800      	ldr	r0, [sp, #0]
   c07e4:	f7fc fd70 	bl	bd2c8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c07e8:	4638      	mov	r0, r7
   c07ea:	b015      	add	sp, #84	; 0x54
   c07ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c07f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c07f0:	4b02      	ldr	r3, [pc, #8]	; (c07fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c07f2:	4a03      	ldr	r2, [pc, #12]	; (c0800 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c07f4:	601a      	str	r2, [r3, #0]
   c07f6:	2200      	movs	r2, #0
   c07f8:	605a      	str	r2, [r3, #4]

} // spark
   c07fa:	4770      	bx	lr
   c07fc:	2003e6a0 	.word	0x2003e6a0
   c0800:	000c72b4 	.word	0x000c72b4

000c0804 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c0804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0806:	4606      	mov	r6, r0
   c0808:	460d      	mov	r5, r1
  size_t n = 0;
   c080a:	188f      	adds	r7, r1, r2
   c080c:	2400      	movs	r4, #0
  while (size--) {
   c080e:	42bd      	cmp	r5, r7
   c0810:	d00c      	beq.n	c082c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c0812:	6833      	ldr	r3, [r6, #0]
   c0814:	f815 1b01 	ldrb.w	r1, [r5], #1
   c0818:	689b      	ldr	r3, [r3, #8]
   c081a:	4630      	mov	r0, r6
   c081c:	4798      	blx	r3
     if (chunk>=0)
   c081e:	1e03      	subs	r3, r0, #0
   c0820:	db01      	blt.n	c0826 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c0822:	441c      	add	r4, r3
  while (size--) {
   c0824:	e7f3      	b.n	c080e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c0826:	2c00      	cmp	r4, #0
   c0828:	bf08      	it	eq
   c082a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c082c:	4620      	mov	r0, r4
   c082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0830 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c0830:	b508      	push	{r3, lr}
  return write(str);
   c0832:	f7f6 fb6b 	bl	b6f0c <_ZN5Print5writeEPKc>
}
   c0836:	bd08      	pop	{r3, pc}

000c0838 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c0838:	6803      	ldr	r3, [r0, #0]
   c083a:	689b      	ldr	r3, [r3, #8]
   c083c:	4718      	bx	r3

000c083e <_ZN5Print5printEPK19__FlashStringHelper>:
   c083e:	b508      	push	{r3, lr}
   c0840:	f7f6 fb64 	bl	b6f0c <_ZN5Print5writeEPKc>
   c0844:	bd08      	pop	{r3, pc}

000c0846 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c0846:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c0848:	210d      	movs	r1, #13
{
   c084a:	4605      	mov	r5, r0
  size_t n = print('\r');
   c084c:	f7ff fff4 	bl	c0838 <_ZN5Print5printEc>
  n += print('\n');
   c0850:	210a      	movs	r1, #10
  size_t n = print('\r');
   c0852:	4604      	mov	r4, r0
  n += print('\n');
   c0854:	4628      	mov	r0, r5
   c0856:	f7ff ffef 	bl	c0838 <_ZN5Print5printEc>
  return n;
}
   c085a:	4420      	add	r0, r4
   c085c:	bd38      	pop	{r3, r4, r5, pc}

000c085e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c085e:	b538      	push	{r3, r4, r5, lr}
   c0860:	4605      	mov	r5, r0
  return write(str);
   c0862:	f7f6 fb53 	bl	b6f0c <_ZN5Print5writeEPKc>
   c0866:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c0868:	4628      	mov	r0, r5
   c086a:	f7ff ffec 	bl	c0846 <_ZN5Print7printlnEv>
  return n;
}
   c086e:	4420      	add	r0, r4
   c0870:	bd38      	pop	{r3, r4, r5, pc}

000c0872 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c0872:	f7ff bff4 	b.w	c085e <_ZN5Print7printlnEPKc>

000c0876 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c0876:	b530      	push	{r4, r5, lr}
   c0878:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c087a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c087c:	2a01      	cmp	r2, #1
  *str = '\0';
   c087e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c0882:	bf98      	it	ls
   c0884:	220a      	movls	r2, #10
   c0886:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c0888:	460d      	mov	r5, r1
   c088a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c088e:	fb01 5312 	mls	r3, r1, r2, r5
   c0892:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c0896:	2b09      	cmp	r3, #9
   c0898:	bf94      	ite	ls
   c089a:	3330      	addls	r3, #48	; 0x30
   c089c:	3337      	addhi	r3, #55	; 0x37
   c089e:	b2db      	uxtb	r3, r3
  } while(n);
   c08a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c08a2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c08a6:	d9ef      	bls.n	c0888 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c08a8:	4621      	mov	r1, r4
   c08aa:	f7f6 fb2f 	bl	b6f0c <_ZN5Print5writeEPKc>
}
   c08ae:	b00b      	add	sp, #44	; 0x2c
   c08b0:	bd30      	pop	{r4, r5, pc}

000c08b2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c08b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c08b6:	b086      	sub	sp, #24
   c08b8:	af00      	add	r7, sp, #0
   c08ba:	4605      	mov	r5, r0
   c08bc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c08be:	1d38      	adds	r0, r7, #4
   c08c0:	2114      	movs	r1, #20
{
   c08c2:	4614      	mov	r4, r2
    va_copy(args2, args);
   c08c4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c08c6:	f7fc ff4d 	bl	bd764 <vsnprintf>

    if (n<bufsize)
   c08ca:	2813      	cmp	r0, #19
   c08cc:	d80e      	bhi.n	c08ec <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c08ce:	1d39      	adds	r1, r7, #4
   c08d0:	4628      	mov	r0, r5
   c08d2:	f7f6 fb1b 	bl	b6f0c <_ZN5Print5writeEPKc>
   c08d6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c08d8:	b11e      	cbz	r6, c08e2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c08da:	4628      	mov	r0, r5
   c08dc:	f7ff ffb3 	bl	c0846 <_ZN5Print7printlnEv>
   c08e0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c08e2:	4620      	mov	r0, r4
   c08e4:	3718      	adds	r7, #24
   c08e6:	46bd      	mov	sp, r7
   c08e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c08ec:	f100 0308 	add.w	r3, r0, #8
   c08f0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c08f4:	46e8      	mov	r8, sp
        char bigger[n+1];
   c08f6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c08fa:	4622      	mov	r2, r4
   c08fc:	1c41      	adds	r1, r0, #1
   c08fe:	683b      	ldr	r3, [r7, #0]
   c0900:	4668      	mov	r0, sp
   c0902:	f7fc ff2f 	bl	bd764 <vsnprintf>
  return write(str);
   c0906:	4669      	mov	r1, sp
   c0908:	4628      	mov	r0, r5
   c090a:	f7f6 faff 	bl	b6f0c <_ZN5Print5writeEPKc>
   c090e:	4604      	mov	r4, r0
   c0910:	46c5      	mov	sp, r8
   c0912:	e7e1      	b.n	c08d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c0914 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0914:	4b01      	ldr	r3, [pc, #4]	; (c091c <_GLOBAL__sub_I_RGB+0x8>)
   c0916:	2200      	movs	r2, #0
   c0918:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c091a:	4770      	bx	lr
   c091c:	2003e6a8 	.word	0x2003e6a8

000c0920 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c0920:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c0924:	1c53      	adds	r3, r2, #1
   c0926:	d00b      	beq.n	c0940 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c0928:	8843      	ldrh	r3, [r0, #2]
   c092a:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c092c:	428b      	cmp	r3, r1
   c092e:	d803      	bhi.n	c0938 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c0930:	4288      	cmp	r0, r1
   c0932:	4603      	mov	r3, r0
   c0934:	bf28      	it	cs
   c0936:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c0938:	4619      	mov	r1, r3
   c093a:	b290      	uxth	r0, r2
   c093c:	f7fc bce4 	b.w	bd308 <HAL_Servo_Write_Pulse_Width>
}
   c0940:	4770      	bx	lr

000c0942 <_ZN5Servo5writeEi>:
{
   c0942:	b513      	push	{r0, r1, r4, lr}
   c0944:	4604      	mov	r4, r0
   c0946:	4608      	mov	r0, r1
   c0948:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c094c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c0950:	4288      	cmp	r0, r1
   c0952:	db10      	blt.n	c0976 <_ZN5Servo5writeEi+0x34>
   c0954:	4290      	cmp	r0, r2
   c0956:	bfa8      	it	ge
   c0958:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c095a:	88a3      	ldrh	r3, [r4, #4]
   c095c:	9300      	str	r3, [sp, #0]
   c095e:	8863      	ldrh	r3, [r4, #2]
   c0960:	f7fc ff38 	bl	bd7d4 <_Z3mapiiiii>
   c0964:	68e1      	ldr	r1, [r4, #12]
   c0966:	4401      	add	r1, r0
   c0968:	b289      	uxth	r1, r1
   c096a:	4620      	mov	r0, r4
}
   c096c:	b002      	add	sp, #8
   c096e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c0972:	f7ff bfd5 	b.w	c0920 <_ZN5Servo17writeMicrosecondsEt>
   c0976:	4608      	mov	r0, r1
   c0978:	e7ef      	b.n	c095a <_ZN5Servo5writeEi+0x18>
	...

000c097c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c097c:	4a04      	ldr	r2, [pc, #16]	; (c0990 <_ZN5Servo11resetFieldsEv+0x14>)
   c097e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c0982:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c0986:	23b4      	movs	r3, #180	; 0xb4
   c0988:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c098a:	2300      	movs	r3, #0
   c098c:	60c3      	str	r3, [r0, #12]
}
   c098e:	4770      	bx	lr
   c0990:	0220ffff 	.word	0x0220ffff

000c0994 <_ZN5ServoC1Ev>:
Servo::Servo()
   c0994:	b508      	push	{r3, lr}
  this->resetFields();
   c0996:	f7ff fff1 	bl	c097c <_ZN5Servo11resetFieldsEv>
}
   c099a:	bd08      	pop	{r3, pc}

000c099c <_ZN5Servo6detachEv>:
{
   c099c:	b510      	push	{r4, lr}
   c099e:	4604      	mov	r4, r0
   c09a0:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c09a4:	1c43      	adds	r3, r0, #1
   c09a6:	d007      	beq.n	c09b8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c09a8:	b280      	uxth	r0, r0
   c09aa:	f7fc fca5 	bl	bd2f8 <HAL_Servo_Detach>
  this->resetFields();
   c09ae:	4620      	mov	r0, r4
   c09b0:	f7ff ffe4 	bl	c097c <_ZN5Servo11resetFieldsEv>
  return true;
   c09b4:	2001      	movs	r0, #1
}
   c09b6:	bd10      	pop	{r4, pc}
    return false;
   c09b8:	2000      	movs	r0, #0
   c09ba:	e7fc      	b.n	c09b6 <_ZN5Servo6detachEv+0x1a>

000c09bc <_ZN5Servo6attachEtttss>:
{
   c09bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c09c0:	460d      	mov	r5, r1
   c09c2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c09c4:	2102      	movs	r1, #2
   c09c6:	4628      	mov	r0, r5
{
   c09c8:	4690      	mov	r8, r2
   c09ca:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c09cc:	f7fc fbdc 	bl	bd188 <HAL_Validate_Pin_Function>
   c09d0:	2802      	cmp	r0, #2
   c09d2:	d003      	beq.n	c09dc <_ZN5Servo6attachEtttss+0x20>
    return false;
   c09d4:	2600      	movs	r6, #0
}
   c09d6:	4630      	mov	r0, r6
   c09d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c09dc:	4628      	mov	r0, r5
   c09de:	f000 fca9 	bl	c1334 <pinAvailable>
   c09e2:	4606      	mov	r6, r0
   c09e4:	2800      	cmp	r0, #0
   c09e6:	d0f5      	beq.n	c09d4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c09e8:	f9b4 3000 	ldrsh.w	r3, [r4]
   c09ec:	3301      	adds	r3, #1
   c09ee:	d002      	beq.n	c09f6 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c09f0:	4620      	mov	r0, r4
   c09f2:	f7ff ffd3 	bl	c099c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c09f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c09fa:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c09fc:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c0a00:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c0a02:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c0a06:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c0a08:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c0a0a:	4628      	mov	r0, r5
   c0a0c:	f7fc fc6c 	bl	bd2e8 <HAL_Servo_Attach>
  return true;
   c0a10:	e7e1      	b.n	c09d6 <_ZN5Servo6attachEtttss+0x1a>

000c0a12 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c0a12:	2100      	movs	r1, #0
   c0a14:	f7fc bcd8 	b.w	bd3c8 <hal_spi_release>

000c0a18 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c0a18:	2100      	movs	r1, #0
   c0a1a:	f7fc bccd 	b.w	bd3b8 <hal_spi_acquire>

000c0a1e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c0a1e:	b510      	push	{r4, lr}
   c0a20:	4604      	mov	r4, r0
   c0a22:	4608      	mov	r0, r1
{
    _spi = spi;
   c0a24:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c0a26:	f7fc fc8f 	bl	bd348 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c0a2a:	2300      	movs	r3, #0
   c0a2c:	6063      	str	r3, [r4, #4]
}
   c0a2e:	4620      	mov	r0, r4
   c0a30:	bd10      	pop	{r4, pc}

000c0a32 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c0a32:	b513      	push	{r0, r1, r4, lr}
   c0a34:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c0a36:	7800      	ldrb	r0, [r0, #0]
   c0a38:	f7ff ffee 	bl	c0a18 <_ZN8SPIClass4lockEv.isra.0>
   c0a3c:	b958      	cbnz	r0, c0a56 <_ZN8SPIClass5beginEv+0x24>
   c0a3e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c0a40:	9001      	str	r0, [sp, #4]
   c0a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c0a46:	f7fc fc67 	bl	bd318 <hal_spi_begin>
        unlock();
   c0a4a:	9801      	ldr	r0, [sp, #4]
    }
}
   c0a4c:	b002      	add	sp, #8
   c0a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0a52:	f7ff bfde 	b.w	c0a12 <_ZN8SPIClass6unlockEv.isra.0>
   c0a56:	b002      	add	sp, #8
   c0a58:	bd10      	pop	{r4, pc}

000c0a5a <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   c0a5a:	b513      	push	{r0, r1, r4, lr}
   c0a5c:	4604      	mov	r4, r0
    if (!lock())
   c0a5e:	7800      	ldrb	r0, [r0, #0]
{
   c0a60:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   c0a64:	f7ff ffd8 	bl	c0a18 <_ZN8SPIClass4lockEv.isra.0>
   c0a68:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0a6c:	4603      	mov	r3, r0
   c0a6e:	b948      	cbnz	r0, c0a84 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   c0a70:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   c0a72:	9000      	str	r0, [sp, #0]
   c0a74:	f7fc fc88 	bl	bd388 <hal_spi_begin_ext>
        unlock();
   c0a78:	9800      	ldr	r0, [sp, #0]
    }
}
   c0a7a:	b002      	add	sp, #8
   c0a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0a80:	f7ff bfc7 	b.w	c0a12 <_ZN8SPIClass6unlockEv.isra.0>
   c0a84:	b002      	add	sp, #8
   c0a86:	bd10      	pop	{r4, pc}

000c0a88 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c0a88:	7800      	ldrb	r0, [r0, #0]
   c0a8a:	f7ff bfc2 	b.w	c0a12 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c0a90 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c0a90:	0840      	lsrs	r0, r0, #1
{
   c0a92:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c0a94:	6018      	str	r0, [r3, #0]
   c0a96:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c0a98:	6818      	ldr	r0, [r3, #0]
   c0a9a:	4288      	cmp	r0, r1
   c0a9c:	b2e5      	uxtb	r5, r4
   c0a9e:	d906      	bls.n	c0aae <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c0aa0:	3401      	adds	r4, #1
   c0aa2:	2c08      	cmp	r4, #8
   c0aa4:	d002      	beq.n	c0aac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c0aa6:	0840      	lsrs	r0, r0, #1
   c0aa8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c0aaa:	e7f5      	b.n	c0a98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c0aac:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c0aae:	4b02      	ldr	r3, [pc, #8]	; (c0ab8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c0ab0:	5d5b      	ldrb	r3, [r3, r5]
   c0ab2:	7013      	strb	r3, [r2, #0]
}
   c0ab4:	bd30      	pop	{r4, r5, pc}
   c0ab6:	bf00      	nop
   c0ab8:	000c72e8 	.word	0x000c72e8

000c0abc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c0abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0ac0:	4606      	mov	r6, r0
   c0ac2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c0ac4:	7800      	ldrb	r0, [r0, #0]
{
   c0ac6:	460c      	mov	r4, r1
    CHECK(lock());
   c0ac8:	f7ff ffa6 	bl	c0a18 <_ZN8SPIClass4lockEv.isra.0>
   c0acc:	2800      	cmp	r0, #0
   c0ace:	db1b      	blt.n	c0b08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c0ad0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0ad2:	2214      	movs	r2, #20
   c0ad4:	2100      	movs	r1, #0
   c0ad6:	a809      	add	r0, sp, #36	; 0x24
   c0ad8:	f002 ff52 	bl	c3980 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0adc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0ade:	2200      	movs	r2, #0
   c0ae0:	a909      	add	r1, sp, #36	; 0x24
   c0ae2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c0ae4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c0ae8:	f7fc fc3e 	bl	bd368 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c0aec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c0af0:	b113      	cbz	r3, c0af8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c0af2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c0af6:	b155      	cbz	r5, c0b0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c0af8:	2700      	movs	r7, #0
   c0afa:	46b9      	mov	r9, r7
   c0afc:	46b8      	mov	r8, r7
   c0afe:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c0b00:	7923      	ldrb	r3, [r4, #4]
   c0b02:	b15d      	cbz	r5, c0b1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c0b04:	b1c3      	cbz	r3, c0b38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c0b06:	2000      	movs	r0, #0
}
   c0b08:	b00f      	add	sp, #60	; 0x3c
   c0b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c0b0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c0b12:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c0b16:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c0b1a:	e7f1      	b.n	c0b00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c0b1c:	2b00      	cmp	r3, #0
   c0b1e:	d135      	bne.n	c0b8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c0b20:	68a3      	ldr	r3, [r4, #8]
   c0b22:	4543      	cmp	r3, r8
   c0b24:	d108      	bne.n	c0b38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c0b26:	f88d 9020 	strb.w	r9, [sp, #32]
   c0b2a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0b2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0b32:	89a3      	ldrh	r3, [r4, #12]
   c0b34:	429a      	cmp	r2, r3
   c0b36:	d0e6      	beq.n	c0b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c0b38:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0b3a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c0b3c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c0b40:	980a      	ldr	r0, [sp, #40]	; 0x28
   c0b42:	ab04      	add	r3, sp, #16
   c0b44:	f10d 020f 	add.w	r2, sp, #15
   c0b48:	f7ff ffa2 	bl	c0a90 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c0b4c:	7921      	ldrb	r1, [r4, #4]
   c0b4e:	b985      	cbnz	r5, c0b72 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c0b50:	b989      	cbnz	r1, c0b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b52:	68a3      	ldr	r3, [r4, #8]
   c0b54:	4543      	cmp	r3, r8
   c0b56:	d30e      	bcc.n	c0b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c0b58:	f88d 9020 	strb.w	r9, [sp, #32]
   c0b5c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c0b60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c0b64:	89a3      	ldrh	r3, [r4, #12]
   c0b66:	429a      	cmp	r2, r3
   c0b68:	d105      	bne.n	c0b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c0b6a:	9b04      	ldr	r3, [sp, #16]
   c0b6c:	4543      	cmp	r3, r8
   c0b6e:	d102      	bne.n	c0b76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c0b70:	e7c9      	b.n	c0b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c0b72:	2900      	cmp	r1, #0
   c0b74:	d1f9      	bne.n	c0b6a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c0b76:	2300      	movs	r3, #0
   c0b78:	9301      	str	r3, [sp, #4]
   c0b7a:	7b63      	ldrb	r3, [r4, #13]
   c0b7c:	9300      	str	r3, [sp, #0]
   c0b7e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c0b82:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c0b84:	7830      	ldrb	r0, [r6, #0]
   c0b86:	f7fc fc0f 	bl	bd3a8 <hal_spi_set_settings>
   c0b8a:	e7bc      	b.n	c0b06 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c0b8c:	e9cd 5500 	strd	r5, r5, [sp]
   c0b90:	462b      	mov	r3, r5
   c0b92:	462a      	mov	r2, r5
   c0b94:	2101      	movs	r1, #1
   c0b96:	e7f5      	b.n	c0b84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c0b98 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   c0b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0b9c:	b088      	sub	sp, #32
    unsigned clock = 0;
   c0b9e:	2300      	movs	r3, #0
{
   c0ba0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   c0ba2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   c0ba4:	9302      	str	r3, [sp, #8]
{
   c0ba6:	460e      	mov	r6, r1
   c0ba8:	4617      	mov	r7, r2
    if (!lock())
   c0baa:	f7ff ff35 	bl	c0a18 <_ZN8SPIClass4lockEv.isra.0>
   c0bae:	4605      	mov	r5, r0
   c0bb0:	bb00      	cbnz	r0, c0bf4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   c0bb2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   c0bb6:	4601      	mov	r1, r0
   c0bb8:	2214      	movs	r2, #20
   c0bba:	a803      	add	r0, sp, #12
   c0bbc:	f002 fee0 	bl	c3980 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c0bc0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c0bc2:	462a      	mov	r2, r5
   c0bc4:	a903      	add	r1, sp, #12
   c0bc6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   c0bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   c0bcc:	f7fc fbcc 	bl	bd368 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0bd0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   c0bd2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   c0bd6:	ab02      	add	r3, sp, #8
   c0bd8:	f10d 0207 	add.w	r2, sp, #7
   c0bdc:	fb07 f106 	mul.w	r1, r7, r6
   c0be0:	f7ff ff56 	bl	c0a90 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   c0be4:	7820      	ldrb	r0, [r4, #0]
   c0be6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   c0bea:	f7fc fb9d 	bl	bd328 <hal_spi_set_clock_divider>
        unlock();
   c0bee:	7820      	ldrb	r0, [r4, #0]
   c0bf0:	f7ff ff0f 	bl	c0a12 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   c0bf4:	9802      	ldr	r0, [sp, #8]
   c0bf6:	b008      	add	sp, #32
   c0bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0bfc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   c0bfc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c0bfe:	7800      	ldrb	r0, [r0, #0]
   c0c00:	f7fc fb9a 	bl	bd338 <hal_spi_transfer>
}
   c0c04:	b2c0      	uxtb	r0, r0
   c0c06:	bd08      	pop	{r3, pc}

000c0c08 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c0c08:	b530      	push	{r4, r5, lr}
   c0c0a:	b087      	sub	sp, #28
   c0c0c:	4604      	mov	r4, r0
   c0c0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c0c10:	9500      	str	r5, [sp, #0]
   c0c12:	7800      	ldrb	r0, [r0, #0]
   c0c14:	f7fc fbb0 	bl	bd378 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c0c18:	b93d      	cbnz	r5, c0c2a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c0c1a:	7820      	ldrb	r0, [r4, #0]
   c0c1c:	a902      	add	r1, sp, #8
   c0c1e:	f7fc fbbb 	bl	bd398 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c0c22:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c0c26:	07db      	lsls	r3, r3, #31
   c0c28:	d4f7      	bmi.n	c0c1a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c0c2a:	b007      	add	sp, #28
   c0c2c:	bd30      	pop	{r4, r5, pc}

000c0c2e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c0c2e:	b510      	push	{r4, lr}
   c0c30:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0c32:	f7fc fa91 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c0c36:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c0c38:	6823      	ldr	r3, [r4, #0]
   c0c3a:	4620      	mov	r0, r4
   c0c3c:	695b      	ldr	r3, [r3, #20]
   c0c3e:	4798      	blx	r3
    if (c >= 0) return c;
   c0c40:	2800      	cmp	r0, #0
   c0c42:	da08      	bge.n	c0c56 <_ZN6Stream9timedReadEv+0x28>
   c0c44:	f7fc fa88 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c0c48:	68e3      	ldr	r3, [r4, #12]
   c0c4a:	1ac0      	subs	r0, r0, r3
   c0c4c:	68a3      	ldr	r3, [r4, #8]
   c0c4e:	4298      	cmp	r0, r3
   c0c50:	d3f2      	bcc.n	c0c38 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c0c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c0c56:	bd10      	pop	{r4, pc}

000c0c58 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c0c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c0c5c:	4607      	mov	r7, r0
   c0c5e:	4688      	mov	r8, r1
   c0c60:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c0c62:	461d      	mov	r5, r3
   c0c64:	b173      	cbz	r3, c0c84 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c0c66:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c0c68:	4638      	mov	r0, r7
   c0c6a:	f7ff ffe0 	bl	c0c2e <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c0c6e:	1e03      	subs	r3, r0, #0
   c0c70:	db05      	blt.n	c0c7e <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c0c72:	4543      	cmp	r3, r8
   c0c74:	d003      	beq.n	c0c7e <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c0c76:	5533      	strb	r3, [r6, r4]
    index++;
   c0c78:	3401      	adds	r4, #1
  while (index < length) {
   c0c7a:	42a5      	cmp	r5, r4
   c0c7c:	d1f4      	bne.n	c0c68 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c0c7e:	4620      	mov	r0, r4
   c0c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c0c84:	461c      	mov	r4, r3
   c0c86:	e7fa      	b.n	c0c7e <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c0c88 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c0c88:	b570      	push	{r4, r5, r6, lr}
   c0c8a:	460d      	mov	r5, r1
  String ret;
   c0c8c:	4909      	ldr	r1, [pc, #36]	; (c0cb4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c0c8e:	4604      	mov	r4, r0
   c0c90:	4616      	mov	r6, r2
  String ret;
   c0c92:	f000 f85c 	bl	c0d4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c0c96:	4628      	mov	r0, r5
   c0c98:	f7ff ffc9 	bl	c0c2e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c0c9c:	2800      	cmp	r0, #0
   c0c9e:	db06      	blt.n	c0cae <_ZN6Stream15readStringUntilEc+0x26>
   c0ca0:	4286      	cmp	r6, r0
   c0ca2:	d004      	beq.n	c0cae <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c0ca4:	b2c1      	uxtb	r1, r0
   c0ca6:	4620      	mov	r0, r4
   c0ca8:	f000 f8d0 	bl	c0e4c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c0cac:	e7f3      	b.n	c0c96 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c0cae:	4620      	mov	r0, r4
   c0cb0:	bd70      	pop	{r4, r5, r6, pc}
   c0cb2:	bf00      	nop
   c0cb4:	000c721f 	.word	0x000c721f

000c0cb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c0cb8:	b510      	push	{r4, lr}
   c0cba:	4604      	mov	r4, r0
{
	free(buffer);
   c0cbc:	6800      	ldr	r0, [r0, #0]
   c0cbe:	f7fc fd29 	bl	bd714 <free>
}
   c0cc2:	4620      	mov	r0, r4
   c0cc4:	bd10      	pop	{r4, pc}

000c0cc6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c0cc6:	b510      	push	{r4, lr}
   c0cc8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c0cca:	6800      	ldr	r0, [r0, #0]
   c0ccc:	b108      	cbz	r0, c0cd2 <_ZN6String10invalidateEv+0xc>
   c0cce:	f7fc fd21 	bl	bd714 <free>
	buffer = NULL;
   c0cd2:	2300      	movs	r3, #0
	capacity = len = 0;
   c0cd4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c0cd8:	6023      	str	r3, [r4, #0]
}
   c0cda:	bd10      	pop	{r4, pc}

000c0cdc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c0cdc:	b538      	push	{r3, r4, r5, lr}
   c0cde:	4604      	mov	r4, r0
   c0ce0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c0ce2:	6800      	ldr	r0, [r0, #0]
   c0ce4:	3101      	adds	r1, #1
   c0ce6:	f7fc fd1d 	bl	bd724 <realloc>
	if (newbuffer) {
   c0cea:	b110      	cbz	r0, c0cf2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c0cec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c0cf0:	2001      	movs	r0, #1
	}
	return 0;
}
   c0cf2:	bd38      	pop	{r3, r4, r5, pc}

000c0cf4 <_ZN6String7reserveEj>:
{
   c0cf4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c0cf6:	6803      	ldr	r3, [r0, #0]
{
   c0cf8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c0cfa:	b123      	cbz	r3, c0d06 <_ZN6String7reserveEj+0x12>
   c0cfc:	6843      	ldr	r3, [r0, #4]
   c0cfe:	428b      	cmp	r3, r1
   c0d00:	d301      	bcc.n	c0d06 <_ZN6String7reserveEj+0x12>
   c0d02:	2001      	movs	r0, #1
}
   c0d04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c0d06:	4620      	mov	r0, r4
   c0d08:	f7ff ffe8 	bl	c0cdc <_ZN6String12changeBufferEj>
   c0d0c:	2800      	cmp	r0, #0
   c0d0e:	d0f9      	beq.n	c0d04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c0d10:	68a3      	ldr	r3, [r4, #8]
   c0d12:	2b00      	cmp	r3, #0
   c0d14:	d1f5      	bne.n	c0d02 <_ZN6String7reserveEj+0xe>
   c0d16:	6822      	ldr	r2, [r4, #0]
   c0d18:	7013      	strb	r3, [r2, #0]
   c0d1a:	e7f2      	b.n	c0d02 <_ZN6String7reserveEj+0xe>

000c0d1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c0d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c0d1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c0d20:	4611      	mov	r1, r2
   c0d22:	9201      	str	r2, [sp, #4]
{
   c0d24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c0d26:	f7ff ffe5 	bl	c0cf4 <_ZN6String7reserveEj>
   c0d2a:	9a01      	ldr	r2, [sp, #4]
   c0d2c:	b928      	cbnz	r0, c0d3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c0d2e:	4620      	mov	r0, r4
   c0d30:	f7ff ffc9 	bl	c0cc6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c0d34:	4620      	mov	r0, r4
   c0d36:	b003      	add	sp, #12
   c0d38:	bd30      	pop	{r4, r5, pc}
	len = length;
   c0d3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c0d3c:	4629      	mov	r1, r5
   c0d3e:	6820      	ldr	r0, [r4, #0]
   c0d40:	f002 fdf6 	bl	c3930 <memcpy>
	buffer[len] = 0;
   c0d44:	6822      	ldr	r2, [r4, #0]
   c0d46:	68a3      	ldr	r3, [r4, #8]
   c0d48:	2100      	movs	r1, #0
   c0d4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   c0d4c:	e7f2      	b.n	c0d34 <_ZN6String4copyEPKcj+0x18>

000c0d4e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c0d4e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c0d50:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c0d52:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c0d56:	4604      	mov	r4, r0
	len = 0;
   c0d58:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0d5a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c0d5c:	b141      	cbz	r1, c0d70 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c0d5e:	4608      	mov	r0, r1
   c0d60:	9101      	str	r1, [sp, #4]
   c0d62:	f002 fe98 	bl	c3a96 <strlen>
   c0d66:	9901      	ldr	r1, [sp, #4]
   c0d68:	4602      	mov	r2, r0
   c0d6a:	4620      	mov	r0, r4
   c0d6c:	f7ff ffd6 	bl	c0d1c <_ZN6String4copyEPKcj>
}
   c0d70:	4620      	mov	r0, r4
   c0d72:	b002      	add	sp, #8
   c0d74:	bd10      	pop	{r4, pc}

000c0d76 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c0d76:	b538      	push	{r3, r4, r5, lr}
   c0d78:	4605      	mov	r5, r0
	if (buffer) {
   c0d7a:	6800      	ldr	r0, [r0, #0]
{
   c0d7c:	460c      	mov	r4, r1
	if (buffer) {
   c0d7e:	b168      	cbz	r0, c0d9c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c0d80:	686a      	ldr	r2, [r5, #4]
   c0d82:	688b      	ldr	r3, [r1, #8]
   c0d84:	429a      	cmp	r2, r3
   c0d86:	d307      	bcc.n	c0d98 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c0d88:	6809      	ldr	r1, [r1, #0]
   c0d8a:	f002 fe5f 	bl	c3a4c <strcpy>
			len = rhs.len;
   c0d8e:	68a3      	ldr	r3, [r4, #8]
   c0d90:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c0d92:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c0d94:	60a3      	str	r3, [r4, #8]
}
   c0d96:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c0d98:	f7fc fcbc 	bl	bd714 <free>
	buffer = rhs.buffer;
   c0d9c:	6823      	ldr	r3, [r4, #0]
   c0d9e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c0da0:	6863      	ldr	r3, [r4, #4]
   c0da2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c0da4:	68a3      	ldr	r3, [r4, #8]
   c0da6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c0da8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c0daa:	e9c4 3300 	strd	r3, r3, [r4]
   c0dae:	e7f1      	b.n	c0d94 <_ZN6String4moveERS_+0x1e>

000c0db0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c0db0:	b510      	push	{r4, lr}
	buffer = NULL;
   c0db2:	2300      	movs	r3, #0
	capacity = 0;
   c0db4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c0db8:	4604      	mov	r4, r0
	len = 0;
   c0dba:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0dbc:	7303      	strb	r3, [r0, #12]
	move(rval);
   c0dbe:	f7ff ffda 	bl	c0d76 <_ZN6String4moveERS_>
}
   c0dc2:	4620      	mov	r0, r4
   c0dc4:	bd10      	pop	{r4, pc}

000c0dc6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c0dc6:	4288      	cmp	r0, r1
{
   c0dc8:	b510      	push	{r4, lr}
   c0dca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c0dcc:	d005      	beq.n	c0dda <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c0dce:	680b      	ldr	r3, [r1, #0]
   c0dd0:	b12b      	cbz	r3, c0dde <_ZN6StringaSERKS_+0x18>
   c0dd2:	688a      	ldr	r2, [r1, #8]
   c0dd4:	4619      	mov	r1, r3
   c0dd6:	f7ff ffa1 	bl	c0d1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0dda:	4620      	mov	r0, r4
   c0ddc:	bd10      	pop	{r4, pc}
	else invalidate();
   c0dde:	f7ff ff72 	bl	c0cc6 <_ZN6String10invalidateEv>
   c0de2:	e7fa      	b.n	c0dda <_ZN6StringaSERKS_+0x14>

000c0de4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c0de4:	b510      	push	{r4, lr}
	buffer = NULL;
   c0de6:	2300      	movs	r3, #0
String::String(const String &value)
   c0de8:	4604      	mov	r4, r0
	capacity = 0;
   c0dea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c0dee:	6083      	str	r3, [r0, #8]
	flags = 0;
   c0df0:	7303      	strb	r3, [r0, #12]
	*this = value;
   c0df2:	f7ff ffe8 	bl	c0dc6 <_ZN6StringaSERKS_>
}
   c0df6:	4620      	mov	r0, r4
   c0df8:	bd10      	pop	{r4, pc}

000c0dfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c0dfa:	b513      	push	{r0, r1, r4, lr}
   c0dfc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c0dfe:	b159      	cbz	r1, c0e18 <_ZN6StringaSEPKc+0x1e>
   c0e00:	4608      	mov	r0, r1
   c0e02:	9101      	str	r1, [sp, #4]
   c0e04:	f002 fe47 	bl	c3a96 <strlen>
   c0e08:	9901      	ldr	r1, [sp, #4]
   c0e0a:	4602      	mov	r2, r0
   c0e0c:	4620      	mov	r0, r4
   c0e0e:	f7ff ff85 	bl	c0d1c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c0e12:	4620      	mov	r0, r4
   c0e14:	b002      	add	sp, #8
   c0e16:	bd10      	pop	{r4, pc}
	else invalidate();
   c0e18:	f7ff ff55 	bl	c0cc6 <_ZN6String10invalidateEv>
   c0e1c:	e7f9      	b.n	c0e12 <_ZN6StringaSEPKc+0x18>

000c0e1e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c0e1e:	b570      	push	{r4, r5, r6, lr}
   c0e20:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c0e22:	460e      	mov	r6, r1
   c0e24:	b909      	cbnz	r1, c0e2a <_ZN6String6concatEPKcj+0xc>
   c0e26:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c0e28:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c0e2a:	b16a      	cbz	r2, c0e48 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c0e2c:	6884      	ldr	r4, [r0, #8]
   c0e2e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c0e30:	4621      	mov	r1, r4
   c0e32:	f7ff ff5f 	bl	c0cf4 <_ZN6String7reserveEj>
   c0e36:	2800      	cmp	r0, #0
   c0e38:	d0f5      	beq.n	c0e26 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c0e3a:	6828      	ldr	r0, [r5, #0]
   c0e3c:	68ab      	ldr	r3, [r5, #8]
   c0e3e:	4631      	mov	r1, r6
   c0e40:	4418      	add	r0, r3
   c0e42:	f002 fe03 	bl	c3a4c <strcpy>
	len = newlen;
   c0e46:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c0e48:	2001      	movs	r0, #1
   c0e4a:	e7ed      	b.n	c0e28 <_ZN6String6concatEPKcj+0xa>

000c0e4c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c0e4c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c0e4e:	2300      	movs	r3, #0
	buf[0] = c;
   c0e50:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c0e54:	2201      	movs	r2, #1
   c0e56:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c0e58:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c0e5c:	f7ff ffdf 	bl	c0e1e <_ZN6String6concatEPKcj>
}
   c0e60:	b003      	add	sp, #12
   c0e62:	f85d fb04 	ldr.w	pc, [sp], #4

000c0e66 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c0e66:	6883      	ldr	r3, [r0, #8]
   c0e68:	428b      	cmp	r3, r1
   c0e6a:	d903      	bls.n	c0e74 <_ZNK6StringixEj+0xe>
   c0e6c:	6800      	ldr	r0, [r0, #0]
   c0e6e:	b110      	cbz	r0, c0e76 <_ZNK6StringixEj+0x10>
	return buffer[index];
   c0e70:	5c40      	ldrb	r0, [r0, r1]
   c0e72:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c0e74:	2000      	movs	r0, #0
}
   c0e76:	4770      	bx	lr

000c0e78 <_ZNK6String6charAtEj>:
	return operator[](loc);
   c0e78:	f7ff bff5 	b.w	c0e66 <_ZNK6StringixEj>

000c0e7c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c0e7c:	4b05      	ldr	r3, [pc, #20]	; (c0e94 <_GLOBAL__sub_I_System+0x18>)
   c0e7e:	2202      	movs	r2, #2
   c0e80:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c0e82:	4b05      	ldr	r3, [pc, #20]	; (c0e98 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c0e84:	4a05      	ldr	r2, [pc, #20]	; (c0e9c <_GLOBAL__sub_I_System+0x20>)
   c0e86:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c0e88:	2000      	movs	r0, #0
   c0e8a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c0e8e:	f7fc bb65 	b.w	bd55c <set_system_mode>
   c0e92:	bf00      	nop
   c0e94:	2003e6c4 	.word	0x2003e6c4
   c0e98:	2003e6b8 	.word	0x2003e6b8
   c0e9c:	ffff0000 	.word	0xffff0000

000c0ea0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0ea4:	4a15      	ldr	r2, [pc, #84]	; (c0efc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0ea6:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0f08 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0eaa:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0eae:	1980      	adds	r0, r0, r6
   c0eb0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0eb4:	4b12      	ldr	r3, [pc, #72]	; (c0f00 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0eb6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0eba:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0ebe:	1986      	adds	r6, r0, r6
   c0ec0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0ec4:	42bb      	cmp	r3, r7
   c0ec6:	bf08      	it	eq
   c0ec8:	42b2      	cmpeq	r2, r6
{
   c0eca:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0ecc:	d013      	beq.n	c0ef6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0ece:	a903      	add	r1, sp, #12
   c0ed0:	4668      	mov	r0, sp
   c0ed2:	e9cd 6700 	strd	r6, r7, [sp]
   c0ed6:	f7fc fc75 	bl	bd7c4 <localtime_r>
	calendar_time.tm_year += 1900;
   c0eda:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0edc:	4d09      	ldr	r5, [pc, #36]	; (c0f04 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0ede:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ee2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0ee4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0eee:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ef2:	6823      	ldr	r3, [r4, #0]
   c0ef4:	602b      	str	r3, [r5, #0]
    }
}
   c0ef6:	b00c      	add	sp, #48	; 0x30
   c0ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0efc:	2003e6f8 	.word	0x2003e6f8
   c0f00:	2003e6f0 	.word	0x2003e6f0
   c0f04:	2003e6cc 	.word	0x2003e6cc
   c0f08:	2003e700 	.word	0x2003e700

000c0f0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c0f0c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f0e:	2000      	movs	r0, #0
   c0f10:	f7fc fb88 	bl	bd624 <spark_sync_time_pending>
   c0f14:	b128      	cbz	r0, c0f22 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0f16:	f7fc fb6d 	bl	bd5f4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f1a:	f080 0001 	eor.w	r0, r0, #1
   c0f1e:	b2c0      	uxtb	r0, r0
    }
   c0f20:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0f22:	2001      	movs	r0, #1
   c0f24:	e7fc      	b.n	c0f20 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0f28 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0f28:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0f2a:	f7ff ffb9 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0f2e:	4b02      	ldr	r3, [pc, #8]	; (c0f38 <_ZN9TimeClass5monthEx+0x10>)
   c0f30:	6918      	ldr	r0, [r3, #16]
}
   c0f32:	3001      	adds	r0, #1
   c0f34:	bd08      	pop	{r3, pc}
   c0f36:	bf00      	nop
   c0f38:	2003e6cc 	.word	0x2003e6cc

000c0f3c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0f3c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0f3e:	2000      	movs	r0, #0
   c0f40:	f7fc f912 	bl	bd168 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0f44:	4604      	mov	r4, r0
   c0f46:	b9a0      	cbnz	r0, c0f72 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0f48:	f7fc fb00 	bl	bd54c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0f4c:	2801      	cmp	r0, #1
   c0f4e:	d110      	bne.n	c0f72 <_ZN9TimeClass7isValidEv+0x36>
   c0f50:	4620      	mov	r0, r4
   c0f52:	f7fc fb23 	bl	bd59c <system_thread_get_state>
   c0f56:	b960      	cbnz	r0, c0f72 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0f58:	f7ff ffd8 	bl	c0f0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0f5c:	b910      	cbnz	r0, c0f64 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0f5e:	f7fc fb41 	bl	bd5e4 <spark_process>
        while (_while() && !_condition()) {
   c0f62:	e7f9      	b.n	c0f58 <_ZN9TimeClass7isValidEv+0x1c>
   c0f64:	f7ff ffd2 	bl	c0f0c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0f6c:	2000      	movs	r0, #0
   c0f6e:	f7fc b8fb 	b.w	bd168 <hal_rtc_time_is_valid>
}
   c0f72:	4620      	mov	r0, r4
   c0f74:	bd10      	pop	{r4, pc}

000c0f76 <_ZN9TimeClass3nowEv>:
{
   c0f76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0f78:	f7ff ffe0 	bl	c0f3c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0f7c:	2210      	movs	r2, #16
   c0f7e:	2100      	movs	r1, #0
   c0f80:	4668      	mov	r0, sp
   c0f82:	f002 fcfd 	bl	c3980 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0f86:	2100      	movs	r1, #0
   c0f88:	4668      	mov	r0, sp
   c0f8a:	f7fc f8f5 	bl	bd178 <hal_rtc_get_time>
}
   c0f8e:	9800      	ldr	r0, [sp, #0]
   c0f90:	b005      	add	sp, #20
   c0f92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0f98 <_ZN9TimeClass4hourEv>:
{
   c0f98:	b508      	push	{r3, lr}
	return hour(now());
   c0f9a:	f7ff ffec 	bl	c0f76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0f9e:	17c1      	asrs	r1, r0, #31
   c0fa0:	f7ff ff7e 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
}
   c0fa4:	4b01      	ldr	r3, [pc, #4]	; (c0fac <_ZN9TimeClass4hourEv+0x14>)
   c0fa6:	6898      	ldr	r0, [r3, #8]
   c0fa8:	bd08      	pop	{r3, pc}
   c0faa:	bf00      	nop
   c0fac:	2003e6cc 	.word	0x2003e6cc

000c0fb0 <_ZN9TimeClass6minuteEv>:
{
   c0fb0:	b508      	push	{r3, lr}
	return minute(now());
   c0fb2:	f7ff ffe0 	bl	c0f76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0fb6:	17c1      	asrs	r1, r0, #31
   c0fb8:	f7ff ff72 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
}
   c0fbc:	4b01      	ldr	r3, [pc, #4]	; (c0fc4 <_ZN9TimeClass6minuteEv+0x14>)
   c0fbe:	6858      	ldr	r0, [r3, #4]
   c0fc0:	bd08      	pop	{r3, pc}
   c0fc2:	bf00      	nop
   c0fc4:	2003e6cc 	.word	0x2003e6cc

000c0fc8 <_ZN9TimeClass6secondEv>:
{
   c0fc8:	b508      	push	{r3, lr}
	return second(now());
   c0fca:	f7ff ffd4 	bl	c0f76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0fce:	17c1      	asrs	r1, r0, #31
   c0fd0:	f7ff ff66 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
}
   c0fd4:	4b01      	ldr	r3, [pc, #4]	; (c0fdc <_ZN9TimeClass6secondEv+0x14>)
   c0fd6:	6818      	ldr	r0, [r3, #0]
   c0fd8:	bd08      	pop	{r3, pc}
   c0fda:	bf00      	nop
   c0fdc:	2003e6cc 	.word	0x2003e6cc

000c0fe0 <_ZN9TimeClass3dayEv>:
{
   c0fe0:	b508      	push	{r3, lr}
	return day(now());
   c0fe2:	f7ff ffc8 	bl	c0f76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0fe6:	17c1      	asrs	r1, r0, #31
   c0fe8:	f7ff ff5a 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
}
   c0fec:	4b01      	ldr	r3, [pc, #4]	; (c0ff4 <_ZN9TimeClass3dayEv+0x14>)
   c0fee:	68d8      	ldr	r0, [r3, #12]
   c0ff0:	bd08      	pop	{r3, pc}
   c0ff2:	bf00      	nop
   c0ff4:	2003e6cc 	.word	0x2003e6cc

000c0ff8 <_ZN9TimeClass5monthEv>:
{
   c0ff8:	b508      	push	{r3, lr}
	return month(now());
   c0ffa:	f7ff ffbc 	bl	c0f76 <_ZN9TimeClass3nowEv>
}
   c0ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1002:	17c1      	asrs	r1, r0, #31
   c1004:	f7ff bf90 	b.w	c0f28 <_ZN9TimeClass5monthEx>

000c1008 <_ZN9TimeClass4yearEv>:
{
   c1008:	b508      	push	{r3, lr}
	return year(now());
   c100a:	f7ff ffb4 	bl	c0f76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c100e:	17c1      	asrs	r1, r0, #31
   c1010:	f7ff ff46 	bl	c0ea0 <_ZL22Refresh_UnixTime_Cachex>
}
   c1014:	4b01      	ldr	r3, [pc, #4]	; (c101c <_ZN9TimeClass4yearEv+0x14>)
   c1016:	6958      	ldr	r0, [r3, #20]
   c1018:	bd08      	pop	{r3, pc}
   c101a:	bf00      	nop
   c101c:	2003e6cc 	.word	0x2003e6cc

000c1020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1020:	4b02      	ldr	r3, [pc, #8]	; (c102c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1022:	681a      	ldr	r2, [r3, #0]
   c1024:	4b02      	ldr	r3, [pc, #8]	; (c1030 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1026:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1028:	4770      	bx	lr
   c102a:	bf00      	nop
   c102c:	2003db98 	.word	0x2003db98
   c1030:	2003e6c8 	.word	0x2003e6c8

000c1034 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1034:	4770      	bx	lr

000c1036 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1036:	7441      	strb	r1, [r0, #17]
}
   c1038:	4770      	bx	lr

000c103a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c103a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c103c:	7c00      	ldrb	r0, [r0, #16]
   c103e:	f7fc fa03 	bl	bd448 <hal_usart_available_data_for_write>
}
   c1042:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1046:	bd08      	pop	{r3, pc}

000c1048 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1048:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c104a:	7c00      	ldrb	r0, [r0, #16]
   c104c:	f7fc f9d4 	bl	bd3f8 <hal_usart_available>
}
   c1050:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1054:	bd08      	pop	{r3, pc}

000c1056 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1056:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1058:	7c00      	ldrb	r0, [r0, #16]
   c105a:	f7fc f9dd 	bl	bd418 <hal_usart_peek>
}
   c105e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1062:	bd08      	pop	{r3, pc}

000c1064 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1064:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1066:	7c00      	ldrb	r0, [r0, #16]
   c1068:	f7fc f9ce 	bl	bd408 <hal_usart_read>
}
   c106c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1070:	bd08      	pop	{r3, pc}

000c1072 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1072:	7c00      	ldrb	r0, [r0, #16]
   c1074:	f7fc b9d8 	b.w	bd428 <hal_usart_flush>

000c1078 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1078:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c107a:	7c45      	ldrb	r5, [r0, #17]
{
   c107c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c107e:	b12d      	cbz	r5, c108c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1080:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1082:	b003      	add	sp, #12
   c1084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1088:	f7fc b9ae 	b.w	bd3e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c108c:	7c00      	ldrb	r0, [r0, #16]
   c108e:	9101      	str	r1, [sp, #4]
   c1090:	f7fc f9da 	bl	bd448 <hal_usart_available_data_for_write>
   c1094:	2800      	cmp	r0, #0
   c1096:	9901      	ldr	r1, [sp, #4]
   c1098:	dcf2      	bgt.n	c1080 <_ZN11USARTSerial5writeEh+0x8>
}
   c109a:	4628      	mov	r0, r5
   c109c:	b003      	add	sp, #12
   c109e:	bd30      	pop	{r4, r5, pc}

000c10a0 <_ZN11USARTSerialD0Ev>:
   c10a0:	b510      	push	{r4, lr}
   c10a2:	2114      	movs	r1, #20
   c10a4:	4604      	mov	r4, r0
   c10a6:	f7f2 fffc 	bl	b40a2 <_ZdlPvj>
   c10aa:	4620      	mov	r0, r4
   c10ac:	bd10      	pop	{r4, pc}
	...

000c10b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c10b0:	b510      	push	{r4, lr}
   c10b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c10b6:	4604      	mov	r4, r0
   c10b8:	4608      	mov	r0, r1
   c10ba:	4611      	mov	r1, r2
   c10bc:	2200      	movs	r2, #0
   c10be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c10c2:	4b04      	ldr	r3, [pc, #16]	; (c10d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c10c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c10c6:	2301      	movs	r3, #1
  _serial = serial;
   c10c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c10ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c10cc:	f7fc f9cc 	bl	bd468 <hal_usart_init_ex>
}
   c10d0:	4620      	mov	r0, r4
   c10d2:	bd10      	pop	{r4, pc}
   c10d4:	000c7314 	.word	0x000c7314

000c10d8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c10d8:	7c00      	ldrb	r0, [r0, #16]
   c10da:	2300      	movs	r3, #0
   c10dc:	f7fc b9bc 	b.w	bd458 <hal_usart_begin_config>

000c10e0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c10e0:	2200      	movs	r2, #0
   c10e2:	f7ff bff9 	b.w	c10d8 <_ZN11USARTSerial5beginEmm>

000c10e6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c10e6:	7c00      	ldrb	r0, [r0, #16]
   c10e8:	f7fc b976 	b.w	bd3d8 <hal_usart_end>

000c10ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c10ec:	7441      	strb	r1, [r0, #17]
}
   c10ee:	4770      	bx	lr

000c10f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c10f0:	4770      	bx	lr

000c10f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c10f2:	4770      	bx	lr

000c10f4 <_ZN9USBSerial4readEv>:
{
   c10f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c10f6:	2100      	movs	r1, #0
   c10f8:	7c00      	ldrb	r0, [r0, #16]
   c10fa:	f7fc f9e5 	bl	bd4c8 <HAL_USB_USART_Receive_Data>
}
   c10fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1102:	bd08      	pop	{r3, pc}

000c1104 <_ZN9USBSerial4peekEv>:
{
   c1104:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1106:	2101      	movs	r1, #1
   c1108:	7c00      	ldrb	r0, [r0, #16]
   c110a:	f7fc f9dd 	bl	bd4c8 <HAL_USB_USART_Receive_Data>
}
   c110e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1112:	bd08      	pop	{r3, pc}

000c1114 <_ZN9USBSerial17availableForWriteEv>:
{
   c1114:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1116:	7c00      	ldrb	r0, [r0, #16]
   c1118:	f7fc f9ce 	bl	bd4b8 <HAL_USB_USART_Available_Data_For_Write>
}
   c111c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1120:	bd08      	pop	{r3, pc}

000c1122 <_ZN9USBSerial9availableEv>:
{
   c1122:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1124:	7c00      	ldrb	r0, [r0, #16]
   c1126:	f7fc f9bf 	bl	bd4a8 <HAL_USB_USART_Available_Data>
}
   c112a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c112e:	bd08      	pop	{r3, pc}

000c1130 <_ZN9USBSerial5writeEh>:
{
   c1130:	b513      	push	{r0, r1, r4, lr}
   c1132:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1134:	7c00      	ldrb	r0, [r0, #16]
{
   c1136:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1138:	f7fc f9be 	bl	bd4b8 <HAL_USB_USART_Available_Data_For_Write>
   c113c:	2800      	cmp	r0, #0
   c113e:	9901      	ldr	r1, [sp, #4]
   c1140:	dc01      	bgt.n	c1146 <_ZN9USBSerial5writeEh+0x16>
   c1142:	7c60      	ldrb	r0, [r4, #17]
   c1144:	b120      	cbz	r0, c1150 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1146:	7c20      	ldrb	r0, [r4, #16]
   c1148:	f7fc f9c6 	bl	bd4d8 <HAL_USB_USART_Send_Data>
   c114c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1150:	b002      	add	sp, #8
   c1152:	bd10      	pop	{r4, pc}

000c1154 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1154:	7c00      	ldrb	r0, [r0, #16]
   c1156:	f7fc b9c7 	b.w	bd4e8 <HAL_USB_USART_Flush_Data>

000c115a <_ZN9USBSerialD0Ev>:
   c115a:	b510      	push	{r4, lr}
   c115c:	2114      	movs	r1, #20
   c115e:	4604      	mov	r4, r0
   c1160:	f7f2 ff9f 	bl	b40a2 <_ZdlPvj>
   c1164:	4620      	mov	r0, r4
   c1166:	bd10      	pop	{r4, pc}

000c1168 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1168:	b510      	push	{r4, lr}
   c116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c116e:	4604      	mov	r4, r0
   c1170:	4608      	mov	r0, r1
   c1172:	2100      	movs	r1, #0
   c1174:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1178:	4b04      	ldr	r3, [pc, #16]	; (c118c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c117a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c117c:	2301      	movs	r3, #1
  _serial = serial;
   c117e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1180:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1182:	4611      	mov	r1, r2
   c1184:	f7fc f978 	bl	bd478 <HAL_USB_USART_Init>
}
   c1188:	4620      	mov	r0, r4
   c118a:	bd10      	pop	{r4, pc}
   c118c:	000c7344 	.word	0x000c7344

000c1190 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1190:	7c00      	ldrb	r0, [r0, #16]
   c1192:	2200      	movs	r2, #0
   c1194:	f7fc b978 	b.w	bd488 <HAL_USB_USART_Begin>

000c1198 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1198:	7c00      	ldrb	r0, [r0, #16]
   c119a:	f7fc b97d 	b.w	bd498 <HAL_USB_USART_End>

000c119e <_Z19acquireSerialBufferv>:
{
   c119e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c11a0:	2214      	movs	r2, #20
{
   c11a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c11a4:	2100      	movs	r1, #0
   c11a6:	f002 fbeb 	bl	c3980 <memset>
}
   c11aa:	4620      	mov	r0, r4
   c11ac:	bd10      	pop	{r4, pc}
	...

000c11b0 <_Z16_fetch_usbserialv>:
{
   c11b0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c11b2:	4c0f      	ldr	r4, [pc, #60]	; (c11f0 <_Z16_fetch_usbserialv+0x40>)
{
   c11b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c11b6:	a803      	add	r0, sp, #12
   c11b8:	f7ff fff1 	bl	c119e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c11bc:	7821      	ldrb	r1, [r4, #0]
   c11be:	f3bf 8f5b 	dmb	ish
   c11c2:	f011 0101 	ands.w	r1, r1, #1
   c11c6:	d10f      	bne.n	c11e8 <_Z16_fetch_usbserialv+0x38>
   c11c8:	4620      	mov	r0, r4
   c11ca:	9101      	str	r1, [sp, #4]
   c11cc:	f7f2 ff78 	bl	b40c0 <__cxa_guard_acquire>
   c11d0:	9901      	ldr	r1, [sp, #4]
   c11d2:	b148      	cbz	r0, c11e8 <_Z16_fetch_usbserialv+0x38>
   c11d4:	aa03      	add	r2, sp, #12
   c11d6:	4807      	ldr	r0, [pc, #28]	; (c11f4 <_Z16_fetch_usbserialv+0x44>)
   c11d8:	f7ff ffc6 	bl	c1168 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c11dc:	4620      	mov	r0, r4
   c11de:	f7f2 ff74 	bl	b40ca <__cxa_guard_release>
   c11e2:	4805      	ldr	r0, [pc, #20]	; (c11f8 <_Z16_fetch_usbserialv+0x48>)
   c11e4:	f002 fb7e 	bl	c38e4 <atexit>
	return _usbserial;
}
   c11e8:	4802      	ldr	r0, [pc, #8]	; (c11f4 <_Z16_fetch_usbserialv+0x44>)
   c11ea:	b008      	add	sp, #32
   c11ec:	bd10      	pop	{r4, pc}
   c11ee:	bf00      	nop
   c11f0:	2003e708 	.word	0x2003e708
   c11f4:	2003e70c 	.word	0x2003e70c
   c11f8:	000c10f1 	.word	0x000c10f1

000c11fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c11fc:	4b01      	ldr	r3, [pc, #4]	; (c1204 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c11fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1200:	4770      	bx	lr
   c1202:	bf00      	nop
   c1204:	2003dba0 	.word	0x2003dba0

000c1208 <serialEventRun>:
{
   c1208:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c120a:	4b0b      	ldr	r3, [pc, #44]	; (c1238 <serialEventRun+0x30>)
   c120c:	b143      	cbz	r3, c1220 <serialEventRun+0x18>
   c120e:	f7ff ffcf 	bl	c11b0 <_Z16_fetch_usbserialv>
   c1212:	6803      	ldr	r3, [r0, #0]
   c1214:	691b      	ldr	r3, [r3, #16]
   c1216:	4798      	blx	r3
   c1218:	2800      	cmp	r0, #0
   c121a:	dd01      	ble.n	c1220 <serialEventRun+0x18>
        serialEvent();
   c121c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1220:	4b06      	ldr	r3, [pc, #24]	; (c123c <serialEventRun+0x34>)
   c1222:	b143      	cbz	r3, c1236 <serialEventRun+0x2e>
   c1224:	f000 f95c 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   c1228:	6803      	ldr	r3, [r0, #0]
   c122a:	691b      	ldr	r3, [r3, #16]
   c122c:	4798      	blx	r3
   c122e:	2800      	cmp	r0, #0
   c1230:	dd01      	ble.n	c1236 <serialEventRun+0x2e>
        serialEvent1();
   c1232:	f3af 8000 	nop.w
}
   c1236:	bd08      	pop	{r3, pc}
	...

000c1240 <_post_loop>:
{
   c1240:	b508      	push	{r3, lr}
	serialEventRun();
   c1242:	f7ff ffe1 	bl	c1208 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1246:	f7fb ff87 	bl	bd158 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c124a:	4b01      	ldr	r3, [pc, #4]	; (c1250 <_post_loop+0x10>)
   c124c:	6018      	str	r0, [r3, #0]
}
   c124e:	bd08      	pop	{r3, pc}
   c1250:	2003e728 	.word	0x2003e728

000c1254 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1254:	4805      	ldr	r0, [pc, #20]	; (c126c <_Z33system_initialize_user_backup_ramv+0x18>)
   c1256:	4a06      	ldr	r2, [pc, #24]	; (c1270 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1258:	4906      	ldr	r1, [pc, #24]	; (c1274 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c125a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c125c:	1a12      	subs	r2, r2, r0
   c125e:	f002 fb67 	bl	c3930 <memcpy>
    __backup_sram_signature = signature;
   c1262:	4b05      	ldr	r3, [pc, #20]	; (c1278 <_Z33system_initialize_user_backup_ramv+0x24>)
   c1264:	4a05      	ldr	r2, [pc, #20]	; (c127c <_Z33system_initialize_user_backup_ramv+0x28>)
   c1266:	601a      	str	r2, [r3, #0]
}
   c1268:	bd08      	pop	{r3, pc}
   c126a:	bf00      	nop
   c126c:	2003f400 	.word	0x2003f400
   c1270:	2003f404 	.word	0x2003f404
   c1274:	000c7cd4 	.word	0x000c7cd4
   c1278:	2003f400 	.word	0x2003f400
   c127c:	9a271c1e 	.word	0x9a271c1e

000c1280 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1280:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1282:	2300      	movs	r3, #0
   c1284:	9300      	str	r3, [sp, #0]
   c1286:	461a      	mov	r2, r3
   c1288:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c128c:	f7fc f9a0 	bl	bd5d0 <system_ctrl_set_result>
}
   c1290:	b003      	add	sp, #12
   c1292:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1298 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1298:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c129a:	8843      	ldrh	r3, [r0, #2]
   c129c:	2b0a      	cmp	r3, #10
   c129e:	d008      	beq.n	c12b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c12a0:	2b50      	cmp	r3, #80	; 0x50
   c12a2:	d10b      	bne.n	c12bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c12a4:	4b09      	ldr	r3, [pc, #36]	; (c12cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c12a6:	681b      	ldr	r3, [r3, #0]
   c12a8:	b14b      	cbz	r3, c12be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c12aa:	b003      	add	sp, #12
   c12ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c12b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c12b2:	f7ff ffe5 	bl	c1280 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c12b6:	b003      	add	sp, #12
   c12b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c12bc:	2300      	movs	r3, #0
   c12be:	9300      	str	r3, [sp, #0]
   c12c0:	461a      	mov	r2, r3
   c12c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c12c6:	f7fc f983 	bl	bd5d0 <system_ctrl_set_result>
}
   c12ca:	e7f4      	b.n	c12b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c12cc:	2003e724 	.word	0x2003e724

000c12d0 <module_user_init_hook>:
{
   c12d0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c12d2:	4812      	ldr	r0, [pc, #72]	; (c131c <module_user_init_hook+0x4c>)
   c12d4:	2100      	movs	r1, #0
   c12d6:	f7fc fa6d 	bl	bd7b4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c12da:	4b11      	ldr	r3, [pc, #68]	; (c1320 <module_user_init_hook+0x50>)
   c12dc:	681a      	ldr	r2, [r3, #0]
   c12de:	4b11      	ldr	r3, [pc, #68]	; (c1324 <module_user_init_hook+0x54>)
   c12e0:	429a      	cmp	r2, r3
   c12e2:	4b11      	ldr	r3, [pc, #68]	; (c1328 <module_user_init_hook+0x58>)
   c12e4:	bf0c      	ite	eq
   c12e6:	2201      	moveq	r2, #1
   c12e8:	2200      	movne	r2, #0
   c12ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c12ec:	d001      	beq.n	c12f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c12ee:	f7ff ffb1 	bl	c1254 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c12f2:	f7fb ff19 	bl	bd128 <HAL_RNG_GetRandomNumber>
   c12f6:	4604      	mov	r4, r0
    srand(seed);
   c12f8:	f002 fb4a 	bl	c3990 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c12fc:	4b0b      	ldr	r3, [pc, #44]	; (c132c <module_user_init_hook+0x5c>)
   c12fe:	b113      	cbz	r3, c1306 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1300:	4620      	mov	r0, r4
   c1302:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1306:	2100      	movs	r1, #0
   c1308:	4808      	ldr	r0, [pc, #32]	; (c132c <module_user_init_hook+0x5c>)
   c130a:	f7fc f993 	bl	bd634 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c130e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1312:	4807      	ldr	r0, [pc, #28]	; (c1330 <module_user_init_hook+0x60>)
   c1314:	2100      	movs	r1, #0
   c1316:	f7fc b951 	b.w	bd5bc <system_ctrl_set_app_request_handler>
   c131a:	bf00      	nop
   c131c:	000c11fd 	.word	0x000c11fd
   c1320:	2003f400 	.word	0x2003f400
   c1324:	9a271c1e 	.word	0x9a271c1e
   c1328:	2003e720 	.word	0x2003e720
   c132c:	00000000 	.word	0x00000000
   c1330:	000c1299 	.word	0x000c1299

000c1334 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1334:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   c1336:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1338:	d902      	bls.n	c1340 <pinAvailable+0xc>
    return false;
   c133a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c133c:	b002      	add	sp, #8
   c133e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1340:	f1a0 030b 	sub.w	r3, r0, #11
   c1344:	2b02      	cmp	r3, #2
   c1346:	d81a      	bhi.n	c137e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1348:	4c17      	ldr	r4, [pc, #92]	; (c13a8 <pinAvailable+0x74>)
   c134a:	7821      	ldrb	r1, [r4, #0]
   c134c:	f3bf 8f5b 	dmb	ish
   c1350:	f011 0101 	ands.w	r1, r1, #1
   c1354:	d10b      	bne.n	c136e <pinAvailable+0x3a>
   c1356:	4620      	mov	r0, r4
   c1358:	9101      	str	r1, [sp, #4]
   c135a:	f7f2 feb1 	bl	b40c0 <__cxa_guard_acquire>
   c135e:	9901      	ldr	r1, [sp, #4]
   c1360:	b128      	cbz	r0, c136e <pinAvailable+0x3a>
   c1362:	4812      	ldr	r0, [pc, #72]	; (c13ac <pinAvailable+0x78>)
   c1364:	f7ff fb5b 	bl	c0a1e <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1368:	4620      	mov	r0, r4
   c136a:	f7f2 feae 	bl	b40ca <__cxa_guard_release>
   c136e:	4b0f      	ldr	r3, [pc, #60]	; (c13ac <pinAvailable+0x78>)
   c1370:	7818      	ldrb	r0, [r3, #0]
   c1372:	f7fb fff1 	bl	bd358 <hal_spi_is_enabled>
   c1376:	2800      	cmp	r0, #0
   c1378:	d1df      	bne.n	c133a <pinAvailable+0x6>
  return true; // 'pin' is available
   c137a:	2001      	movs	r0, #1
   c137c:	e7de      	b.n	c133c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c137e:	2801      	cmp	r0, #1
   c1380:	d809      	bhi.n	c1396 <pinAvailable+0x62>
   c1382:	f000 f86d 	bl	c1460 <_Z19__fetch_global_Wirev>
   c1386:	2100      	movs	r1, #0
   c1388:	7c00      	ldrb	r0, [r0, #16]
   c138a:	f7fb ff7d 	bl	bd288 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c138e:	f080 0001 	eor.w	r0, r0, #1
   c1392:	b2c0      	uxtb	r0, r0
   c1394:	e7d2      	b.n	c133c <pinAvailable+0x8>
   c1396:	3809      	subs	r0, #9
   c1398:	2801      	cmp	r0, #1
   c139a:	d8ee      	bhi.n	c137a <pinAvailable+0x46>
   c139c:	f000 f8a0 	bl	c14e0 <_Z22__fetch_global_Serial1v>
   c13a0:	7c00      	ldrb	r0, [r0, #16]
   c13a2:	f7fc f849 	bl	bd438 <hal_usart_is_enabled>
   c13a6:	e7f2      	b.n	c138e <pinAvailable+0x5a>
   c13a8:	2003dd78 	.word	0x2003dd78
   c13ac:	2003dd7c 	.word	0x2003dd7c

000c13b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c13b0:	2825      	cmp	r0, #37	; 0x25
{
   c13b2:	b538      	push	{r3, r4, r5, lr}
   c13b4:	4604      	mov	r4, r0
   c13b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c13b8:	d80a      	bhi.n	c13d0 <pinMode+0x20>
   c13ba:	29ff      	cmp	r1, #255	; 0xff
   c13bc:	d008      	beq.n	c13d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c13be:	f7ff ffb9 	bl	c1334 <pinAvailable>
   c13c2:	b128      	cbz	r0, c13d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c13c4:	4629      	mov	r1, r5
   c13c6:	4620      	mov	r0, r4
}
   c13c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c13cc:	f7fb bee4 	b.w	bd198 <HAL_Pin_Mode>
}
   c13d0:	bd38      	pop	{r3, r4, r5, pc}

000c13d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c13d2:	b538      	push	{r3, r4, r5, lr}
   c13d4:	4604      	mov	r4, r0
   c13d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c13d8:	f7fb fee6 	bl	bd1a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c13dc:	28ff      	cmp	r0, #255	; 0xff
   c13de:	d010      	beq.n	c1402 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c13e0:	2806      	cmp	r0, #6
   c13e2:	d804      	bhi.n	c13ee <digitalWrite+0x1c>
   c13e4:	234d      	movs	r3, #77	; 0x4d
   c13e6:	fa23 f000 	lsr.w	r0, r3, r0
   c13ea:	07c3      	lsls	r3, r0, #31
   c13ec:	d409      	bmi.n	c1402 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c13ee:	4620      	mov	r0, r4
   c13f0:	f7ff ffa0 	bl	c1334 <pinAvailable>
   c13f4:	b128      	cbz	r0, c1402 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c13f6:	4629      	mov	r1, r5
   c13f8:	4620      	mov	r0, r4
}
   c13fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c13fe:	f7fb bedb 	b.w	bd1b8 <HAL_GPIO_Write>
}
   c1402:	bd38      	pop	{r3, r4, r5, pc}

000c1404 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1404:	280d      	cmp	r0, #13
{
   c1406:	b510      	push	{r4, lr}
   c1408:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c140a:	bf9c      	itt	ls
   c140c:	340e      	addls	r4, #14
   c140e:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1410:	4620      	mov	r0, r4
   c1412:	f7ff ff8f 	bl	c1334 <pinAvailable>
   c1416:	b150      	cbz	r0, c142e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c1418:	2103      	movs	r1, #3
   c141a:	4620      	mov	r0, r4
   c141c:	f7fb feb4 	bl	bd188 <HAL_Validate_Pin_Function>
   c1420:	2803      	cmp	r0, #3
   c1422:	d104      	bne.n	c142e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c1424:	4620      	mov	r0, r4
}
   c1426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c142a:	f7fb bedd 	b.w	bd1e8 <hal_adc_read>
}
   c142e:	2000      	movs	r0, #0
   c1430:	bd10      	pop	{r4, pc}

000c1432 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1432:	4770      	bx	lr

000c1434 <_Z17acquireWireBufferv>:
{
   c1434:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c1436:	2520      	movs	r5, #32
   c1438:	2314      	movs	r3, #20
{
   c143a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c143c:	6003      	str	r3, [r0, #0]
   c143e:	6085      	str	r5, [r0, #8]
   c1440:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c1442:	4906      	ldr	r1, [pc, #24]	; (c145c <_Z17acquireWireBufferv+0x28>)
   c1444:	4628      	mov	r0, r5
   c1446:	f000 f871 	bl	c152c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c144a:	4904      	ldr	r1, [pc, #16]	; (c145c <_Z17acquireWireBufferv+0x28>)
	};
   c144c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c144e:	4628      	mov	r0, r5
   c1450:	f000 f86c 	bl	c152c <_ZnajRKSt9nothrow_t>
	};
   c1454:	60e0      	str	r0, [r4, #12]
}
   c1456:	4620      	mov	r0, r4
   c1458:	bd38      	pop	{r3, r4, r5, pc}
   c145a:	bf00      	nop
   c145c:	000c736c 	.word	0x000c736c

000c1460 <_Z19__fetch_global_Wirev>:
{
   c1460:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1462:	4d0e      	ldr	r5, [pc, #56]	; (c149c <_Z19__fetch_global_Wirev+0x3c>)
   c1464:	7829      	ldrb	r1, [r5, #0]
   c1466:	f3bf 8f5b 	dmb	ish
   c146a:	f011 0401 	ands.w	r4, r1, #1
{
   c146e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c1470:	d111      	bne.n	c1496 <_Z19__fetch_global_Wirev+0x36>
   c1472:	4628      	mov	r0, r5
   c1474:	f7f2 fe24 	bl	b40c0 <__cxa_guard_acquire>
   c1478:	b168      	cbz	r0, c1496 <_Z19__fetch_global_Wirev+0x36>
   c147a:	a801      	add	r0, sp, #4
   c147c:	f7ff ffda 	bl	c1434 <_Z17acquireWireBufferv>
   c1480:	aa01      	add	r2, sp, #4
   c1482:	4621      	mov	r1, r4
   c1484:	4806      	ldr	r0, [pc, #24]	; (c14a0 <_Z19__fetch_global_Wirev+0x40>)
   c1486:	f7fd fec5 	bl	bf214 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c148a:	4628      	mov	r0, r5
   c148c:	f7f2 fe1d 	bl	b40ca <__cxa_guard_release>
   c1490:	4804      	ldr	r0, [pc, #16]	; (c14a4 <_Z19__fetch_global_Wirev+0x44>)
   c1492:	f002 fa27 	bl	c38e4 <atexit>
	return wire;
}
   c1496:	4802      	ldr	r0, [pc, #8]	; (c14a0 <_Z19__fetch_global_Wirev+0x40>)
   c1498:	b007      	add	sp, #28
   c149a:	bd30      	pop	{r4, r5, pc}
   c149c:	2003e72c 	.word	0x2003e72c
   c14a0:	2003e730 	.word	0x2003e730
   c14a4:	000c1433 	.word	0x000c1433

000c14a8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c14a8:	4770      	bx	lr
	...

000c14ac <_Z20acquireSerial1Bufferv>:
{
   c14ac:	b538      	push	{r3, r4, r5, lr}
   c14ae:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c14b0:	2514      	movs	r5, #20
   c14b2:	462a      	mov	r2, r5
   c14b4:	2100      	movs	r1, #0
   c14b6:	f002 fa63 	bl	c3980 <memset>
   c14ba:	8025      	strh	r5, [r4, #0]
   c14bc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14be:	4907      	ldr	r1, [pc, #28]	; (c14dc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c14c0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14c2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c14c4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14c6:	f000 f831 	bl	c152c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14ca:	4904      	ldr	r1, [pc, #16]	; (c14dc <_Z20acquireSerial1Bufferv+0x30>)
    };
   c14cc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c14ce:	4628      	mov	r0, r5
   c14d0:	f000 f82c 	bl	c152c <_ZnajRKSt9nothrow_t>
    };
   c14d4:	60e0      	str	r0, [r4, #12]
}
   c14d6:	4620      	mov	r0, r4
   c14d8:	bd38      	pop	{r3, r4, r5, pc}
   c14da:	bf00      	nop
   c14dc:	000c736c 	.word	0x000c736c

000c14e0 <_Z22__fetch_global_Serial1v>:
{
   c14e0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c14e2:	4d0e      	ldr	r5, [pc, #56]	; (c151c <_Z22__fetch_global_Serial1v+0x3c>)
   c14e4:	7829      	ldrb	r1, [r5, #0]
   c14e6:	f3bf 8f5b 	dmb	ish
   c14ea:	f011 0401 	ands.w	r4, r1, #1
{
   c14ee:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c14f0:	d111      	bne.n	c1516 <_Z22__fetch_global_Serial1v+0x36>
   c14f2:	4628      	mov	r0, r5
   c14f4:	f7f2 fde4 	bl	b40c0 <__cxa_guard_acquire>
   c14f8:	b168      	cbz	r0, c1516 <_Z22__fetch_global_Serial1v+0x36>
   c14fa:	a801      	add	r0, sp, #4
   c14fc:	f7ff ffd6 	bl	c14ac <_Z20acquireSerial1Bufferv>
   c1500:	aa01      	add	r2, sp, #4
   c1502:	4621      	mov	r1, r4
   c1504:	4806      	ldr	r0, [pc, #24]	; (c1520 <_Z22__fetch_global_Serial1v+0x40>)
   c1506:	f7ff fdd3 	bl	c10b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c150a:	4628      	mov	r0, r5
   c150c:	f7f2 fddd 	bl	b40ca <__cxa_guard_release>
   c1510:	4804      	ldr	r0, [pc, #16]	; (c1524 <_Z22__fetch_global_Serial1v+0x44>)
   c1512:	f002 f9e7 	bl	c38e4 <atexit>
    return serial1;
}
   c1516:	4802      	ldr	r0, [pc, #8]	; (c1520 <_Z22__fetch_global_Serial1v+0x40>)
   c1518:	b007      	add	sp, #28
   c151a:	bd30      	pop	{r4, r5, pc}
   c151c:	2003e744 	.word	0x2003e744
   c1520:	2003e748 	.word	0x2003e748
   c1524:	000c14a9 	.word	0x000c14a9

000c1528 <_ZnwjRKSt9nothrow_t>:
   c1528:	f7f2 bdb5 	b.w	b4096 <_Znwj>

000c152c <_ZnajRKSt9nothrow_t>:
   c152c:	f7f2 bdb5 	b.w	b409a <_Znaj>

000c1530 <_ZSt25__throw_bad_function_callv>:
   c1530:	b508      	push	{r3, lr}
   c1532:	f7fc f91f 	bl	bd774 <abort>
	...

000c1538 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c1538:	4901      	ldr	r1, [pc, #4]	; (c1540 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c153a:	f000 b8f9 	b.w	c1730 <_ZNKSt9type_infoeqERKS_>
   c153e:	bf00      	nop
   c1540:	000c7388 	.word	0x000c7388

000c1544 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c1544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1546:	2400      	movs	r4, #0
   c1548:	2310      	movs	r3, #16
   c154a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c154e:	6803      	ldr	r3, [r0, #0]
   c1550:	4615      	mov	r5, r2
   c1552:	699e      	ldr	r6, [r3, #24]
   c1554:	6812      	ldr	r2, [r2, #0]
   c1556:	466b      	mov	r3, sp
   c1558:	e9cd 4400 	strd	r4, r4, [sp]
   c155c:	47b0      	blx	r6
   c155e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c1562:	f003 0306 	and.w	r3, r3, #6
   c1566:	2b06      	cmp	r3, #6
   c1568:	bf03      	ittte	eq
   c156a:	9b00      	ldreq	r3, [sp, #0]
   c156c:	602b      	streq	r3, [r5, #0]
   c156e:	2001      	moveq	r0, #1
   c1570:	4620      	movne	r0, r4
   c1572:	b004      	add	sp, #16
   c1574:	bd70      	pop	{r4, r5, r6, pc}

000c1576 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c1576:	9800      	ldr	r0, [sp, #0]
   c1578:	4290      	cmp	r0, r2
   c157a:	bf14      	ite	ne
   c157c:	2001      	movne	r0, #1
   c157e:	2006      	moveq	r0, #6
   c1580:	4770      	bx	lr
	...

000c1584 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c1584:	b510      	push	{r4, lr}
   c1586:	4b03      	ldr	r3, [pc, #12]	; (c1594 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c1588:	6003      	str	r3, [r0, #0]
   c158a:	4604      	mov	r4, r0
   c158c:	f000 f8cd 	bl	c172a <_ZNSt9type_infoD1Ev>
   c1590:	4620      	mov	r0, r4
   c1592:	bd10      	pop	{r4, pc}
   c1594:	000c73c8 	.word	0x000c73c8

000c1598 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c1598:	b510      	push	{r4, lr}
   c159a:	4604      	mov	r4, r0
   c159c:	f7ff fff2 	bl	c1584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c15a0:	4620      	mov	r0, r4
   c15a2:	2108      	movs	r1, #8
   c15a4:	f7f2 fd7d 	bl	b40a2 <_ZdlPvj>
   c15a8:	4620      	mov	r0, r4
   c15aa:	bd10      	pop	{r4, pc}

000c15ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c15ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c15b0:	461f      	mov	r7, r3
   c15b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c15b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c15ba:	4598      	cmp	r8, r3
   c15bc:	4606      	mov	r6, r0
   c15be:	4615      	mov	r5, r2
   c15c0:	d107      	bne.n	c15d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c15c2:	9907      	ldr	r1, [sp, #28]
   c15c4:	f000 f8b4 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c15c8:	b118      	cbz	r0, c15d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c15ca:	7165      	strb	r5, [r4, #5]
   c15cc:	2000      	movs	r0, #0
   c15ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c15d2:	4639      	mov	r1, r7
   c15d4:	4630      	mov	r0, r6
   c15d6:	f000 f8ab 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c15da:	2800      	cmp	r0, #0
   c15dc:	d0f6      	beq.n	c15cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c15de:	2301      	movs	r3, #1
   c15e0:	f8c4 8000 	str.w	r8, [r4]
   c15e4:	7125      	strb	r5, [r4, #4]
   c15e6:	71a3      	strb	r3, [r4, #6]
   c15e8:	e7f0      	b.n	c15cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c15ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c15ea:	b538      	push	{r3, r4, r5, lr}
   c15ec:	4615      	mov	r5, r2
   c15ee:	461c      	mov	r4, r3
   c15f0:	f000 f89e 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c15f4:	b120      	cbz	r0, c1600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c15f6:	2308      	movs	r3, #8
   c15f8:	60e3      	str	r3, [r4, #12]
   c15fa:	2306      	movs	r3, #6
   c15fc:	6025      	str	r5, [r4, #0]
   c15fe:	7123      	strb	r3, [r4, #4]
   c1600:	bd38      	pop	{r3, r4, r5, pc}

000c1602 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c1602:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c1604:	4605      	mov	r5, r0
   c1606:	460c      	mov	r4, r1
   c1608:	9201      	str	r2, [sp, #4]
   c160a:	461e      	mov	r6, r3
   c160c:	f000 f890 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c1610:	b950      	cbnz	r0, c1628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1612:	2e03      	cmp	r6, #3
   c1614:	d808      	bhi.n	c1628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c1616:	6823      	ldr	r3, [r4, #0]
   c1618:	9a01      	ldr	r2, [sp, #4]
   c161a:	695b      	ldr	r3, [r3, #20]
   c161c:	4629      	mov	r1, r5
   c161e:	4620      	mov	r0, r4
   c1620:	b002      	add	sp, #8
   c1622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c1626:	4718      	bx	r3
   c1628:	b002      	add	sp, #8
   c162a:	bd70      	pop	{r4, r5, r6, pc}

000c162c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c162c:	b510      	push	{r4, lr}
   c162e:	4b03      	ldr	r3, [pc, #12]	; (c163c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c1630:	6003      	str	r3, [r0, #0]
   c1632:	4604      	mov	r4, r0
   c1634:	f7ff ffa6 	bl	c1584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c1638:	4620      	mov	r0, r4
   c163a:	bd10      	pop	{r4, pc}
   c163c:	000c7428 	.word	0x000c7428

000c1640 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c1640:	b510      	push	{r4, lr}
   c1642:	4604      	mov	r4, r0
   c1644:	f7ff fff2 	bl	c162c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c1648:	4620      	mov	r0, r4
   c164a:	210c      	movs	r1, #12
   c164c:	f7f2 fd29 	bl	b40a2 <_ZdlPvj>
   c1650:	4620      	mov	r0, r4
   c1652:	bd10      	pop	{r4, pc}

000c1654 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c1654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c1656:	9f08      	ldr	r7, [sp, #32]
   c1658:	4297      	cmp	r7, r2
   c165a:	4605      	mov	r5, r0
   c165c:	460e      	mov	r6, r1
   c165e:	4614      	mov	r4, r2
   c1660:	d00a      	beq.n	c1678 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c1662:	68a8      	ldr	r0, [r5, #8]
   c1664:	6802      	ldr	r2, [r0, #0]
   c1666:	9708      	str	r7, [sp, #32]
   c1668:	6a15      	ldr	r5, [r2, #32]
   c166a:	4631      	mov	r1, r6
   c166c:	4622      	mov	r2, r4
   c166e:	46ac      	mov	ip, r5
   c1670:	b003      	add	sp, #12
   c1672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1676:	4760      	bx	ip
   c1678:	4619      	mov	r1, r3
   c167a:	9301      	str	r3, [sp, #4]
   c167c:	f000 f858 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c1680:	9b01      	ldr	r3, [sp, #4]
   c1682:	2800      	cmp	r0, #0
   c1684:	d0ed      	beq.n	c1662 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c1686:	2006      	movs	r0, #6
   c1688:	b003      	add	sp, #12
   c168a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c168c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c168c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1690:	460d      	mov	r5, r1
   c1692:	4619      	mov	r1, r3
   c1694:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c1698:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c169c:	4681      	mov	r9, r0
   c169e:	4617      	mov	r7, r2
   c16a0:	4698      	mov	r8, r3
   c16a2:	f000 f845 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c16a6:	b190      	cbz	r0, c16ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c16a8:	2d00      	cmp	r5, #0
   c16aa:	6034      	str	r4, [r6, #0]
   c16ac:	7137      	strb	r7, [r6, #4]
   c16ae:	db09      	blt.n	c16c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c16b0:	1961      	adds	r1, r4, r5
   c16b2:	458a      	cmp	sl, r1
   c16b4:	bf0c      	ite	eq
   c16b6:	2106      	moveq	r1, #6
   c16b8:	2101      	movne	r1, #1
   c16ba:	71b1      	strb	r1, [r6, #6]
   c16bc:	2000      	movs	r0, #0
   c16be:	b001      	add	sp, #4
   c16c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c16c4:	3502      	adds	r5, #2
   c16c6:	d1f9      	bne.n	c16bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16c8:	2301      	movs	r3, #1
   c16ca:	71b3      	strb	r3, [r6, #6]
   c16cc:	e7f6      	b.n	c16bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16ce:	4554      	cmp	r4, sl
   c16d0:	d106      	bne.n	c16e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c16d2:	4659      	mov	r1, fp
   c16d4:	4648      	mov	r0, r9
   c16d6:	f000 f82b 	bl	c1730 <_ZNKSt9type_infoeqERKS_>
   c16da:	b108      	cbz	r0, c16e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c16dc:	7177      	strb	r7, [r6, #5]
   c16de:	e7ed      	b.n	c16bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c16e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c16e4:	6803      	ldr	r3, [r0, #0]
   c16e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c16ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c16ee:	69dc      	ldr	r4, [r3, #28]
   c16f0:	463a      	mov	r2, r7
   c16f2:	4643      	mov	r3, r8
   c16f4:	4629      	mov	r1, r5
   c16f6:	46a4      	mov	ip, r4
   c16f8:	b001      	add	sp, #4
   c16fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c16fe:	4760      	bx	ip

000c1700 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c1700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1704:	4607      	mov	r7, r0
   c1706:	460c      	mov	r4, r1
   c1708:	4615      	mov	r5, r2
   c170a:	461e      	mov	r6, r3
   c170c:	f7ff ff6d 	bl	c15ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c1710:	b948      	cbnz	r0, c1726 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c1712:	68b8      	ldr	r0, [r7, #8]
   c1714:	6803      	ldr	r3, [r0, #0]
   c1716:	699f      	ldr	r7, [r3, #24]
   c1718:	462a      	mov	r2, r5
   c171a:	4633      	mov	r3, r6
   c171c:	4621      	mov	r1, r4
   c171e:	46bc      	mov	ip, r7
   c1720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c1724:	4760      	bx	ip
   c1726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c172a <_ZNSt9type_infoD1Ev>:
   c172a:	4770      	bx	lr

000c172c <_ZNKSt9type_info14__is_pointer_pEv>:
   c172c:	2000      	movs	r0, #0
   c172e:	4770      	bx	lr

000c1730 <_ZNKSt9type_infoeqERKS_>:
   c1730:	4281      	cmp	r1, r0
   c1732:	b508      	push	{r3, lr}
   c1734:	d00e      	beq.n	c1754 <_ZNKSt9type_infoeqERKS_+0x24>
   c1736:	6840      	ldr	r0, [r0, #4]
   c1738:	7803      	ldrb	r3, [r0, #0]
   c173a:	2b2a      	cmp	r3, #42	; 0x2a
   c173c:	d00c      	beq.n	c1758 <_ZNKSt9type_infoeqERKS_+0x28>
   c173e:	6849      	ldr	r1, [r1, #4]
   c1740:	780b      	ldrb	r3, [r1, #0]
   c1742:	2b2a      	cmp	r3, #42	; 0x2a
   c1744:	bf08      	it	eq
   c1746:	3101      	addeq	r1, #1
   c1748:	f002 f976 	bl	c3a38 <strcmp>
   c174c:	fab0 f080 	clz	r0, r0
   c1750:	0940      	lsrs	r0, r0, #5
   c1752:	bd08      	pop	{r3, pc}
   c1754:	2001      	movs	r0, #1
   c1756:	e7fc      	b.n	c1752 <_ZNKSt9type_infoeqERKS_+0x22>
   c1758:	2000      	movs	r0, #0
   c175a:	e7fa      	b.n	c1752 <_ZNKSt9type_infoeqERKS_+0x22>

000c175c <cosf>:
   c175c:	ee10 3a10 	vmov	r3, s0
   c1760:	4a18      	ldr	r2, [pc, #96]	; (c17c4 <cosf+0x68>)
   c1762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c1766:	4293      	cmp	r3, r2
   c1768:	dd1b      	ble.n	c17a2 <cosf+0x46>
   c176a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c176e:	db02      	blt.n	c1776 <cosf+0x1a>
   c1770:	ee30 0a40 	vsub.f32	s0, s0, s0
   c1774:	4770      	bx	lr
   c1776:	b500      	push	{lr}
   c1778:	b083      	sub	sp, #12
   c177a:	4668      	mov	r0, sp
   c177c:	f000 fb12 	bl	c1da4 <__ieee754_rem_pio2f>
   c1780:	f000 0003 	and.w	r0, r0, #3
   c1784:	2801      	cmp	r0, #1
   c1786:	eddd 0a01 	vldr	s1, [sp, #4]
   c178a:	ed9d 0a00 	vldr	s0, [sp]
   c178e:	d00c      	beq.n	c17aa <cosf+0x4e>
   c1790:	2802      	cmp	r0, #2
   c1792:	d012      	beq.n	c17ba <cosf+0x5e>
   c1794:	b170      	cbz	r0, c17b4 <cosf+0x58>
   c1796:	2001      	movs	r0, #1
   c1798:	f000 fff6 	bl	c2788 <__kernel_sinf>
   c179c:	b003      	add	sp, #12
   c179e:	f85d fb04 	ldr.w	pc, [sp], #4
   c17a2:	eddf 0a09 	vldr	s1, [pc, #36]	; c17c8 <cosf+0x6c>
   c17a6:	f000 bc33 	b.w	c2010 <__kernel_cosf>
   c17aa:	f000 ffed 	bl	c2788 <__kernel_sinf>
   c17ae:	eeb1 0a40 	vneg.f32	s0, s0
   c17b2:	e7f3      	b.n	c179c <cosf+0x40>
   c17b4:	f000 fc2c 	bl	c2010 <__kernel_cosf>
   c17b8:	e7f0      	b.n	c179c <cosf+0x40>
   c17ba:	f000 fc29 	bl	c2010 <__kernel_cosf>
   c17be:	eeb1 0a40 	vneg.f32	s0, s0
   c17c2:	e7eb      	b.n	c179c <cosf+0x40>
   c17c4:	3f490fd8 	.word	0x3f490fd8
   c17c8:	00000000 	.word	0x00000000

000c17cc <sinf>:
   c17cc:	ee10 3a10 	vmov	r3, s0
   c17d0:	4a19      	ldr	r2, [pc, #100]	; (c1838 <sinf+0x6c>)
   c17d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c17d6:	4293      	cmp	r3, r2
   c17d8:	dd1c      	ble.n	c1814 <sinf+0x48>
   c17da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c17de:	db02      	blt.n	c17e6 <sinf+0x1a>
   c17e0:	ee30 0a40 	vsub.f32	s0, s0, s0
   c17e4:	4770      	bx	lr
   c17e6:	b500      	push	{lr}
   c17e8:	b083      	sub	sp, #12
   c17ea:	4668      	mov	r0, sp
   c17ec:	f000 fada 	bl	c1da4 <__ieee754_rem_pio2f>
   c17f0:	f000 0003 	and.w	r0, r0, #3
   c17f4:	2801      	cmp	r0, #1
   c17f6:	eddd 0a01 	vldr	s1, [sp, #4]
   c17fa:	ed9d 0a00 	vldr	s0, [sp]
   c17fe:	d00e      	beq.n	c181e <sinf+0x52>
   c1800:	2802      	cmp	r0, #2
   c1802:	d013      	beq.n	c182c <sinf+0x60>
   c1804:	b170      	cbz	r0, c1824 <sinf+0x58>
   c1806:	f000 fc03 	bl	c2010 <__kernel_cosf>
   c180a:	eeb1 0a40 	vneg.f32	s0, s0
   c180e:	b003      	add	sp, #12
   c1810:	f85d fb04 	ldr.w	pc, [sp], #4
   c1814:	eddf 0a09 	vldr	s1, [pc, #36]	; c183c <sinf+0x70>
   c1818:	2000      	movs	r0, #0
   c181a:	f000 bfb5 	b.w	c2788 <__kernel_sinf>
   c181e:	f000 fbf7 	bl	c2010 <__kernel_cosf>
   c1822:	e7f4      	b.n	c180e <sinf+0x42>
   c1824:	2001      	movs	r0, #1
   c1826:	f000 ffaf 	bl	c2788 <__kernel_sinf>
   c182a:	e7f0      	b.n	c180e <sinf+0x42>
   c182c:	2001      	movs	r0, #1
   c182e:	f000 ffab 	bl	c2788 <__kernel_sinf>
   c1832:	eeb1 0a40 	vneg.f32	s0, s0
   c1836:	e7ea      	b.n	c180e <sinf+0x42>
   c1838:	3f490fd8 	.word	0x3f490fd8
   c183c:	00000000 	.word	0x00000000

000c1840 <atan2>:
   c1840:	f000 b866 	b.w	c1910 <__ieee754_atan2>

000c1844 <sqrt>:
   c1844:	b538      	push	{r3, r4, r5, lr}
   c1846:	ed2d 8b02 	vpush	{d8}
   c184a:	ec55 4b10 	vmov	r4, r5, d0
   c184e:	f000 f935 	bl	c1abc <__ieee754_sqrt>
   c1852:	4b18      	ldr	r3, [pc, #96]	; (c18b4 <sqrt+0x70>)
   c1854:	eeb0 8a40 	vmov.f32	s16, s0
   c1858:	eef0 8a60 	vmov.f32	s17, s1
   c185c:	f993 3000 	ldrsb.w	r3, [r3]
   c1860:	3301      	adds	r3, #1
   c1862:	d00d      	beq.n	c1880 <sqrt+0x3c>
   c1864:	4622      	mov	r2, r4
   c1866:	462b      	mov	r3, r5
   c1868:	4620      	mov	r0, r4
   c186a:	4629      	mov	r1, r5
   c186c:	f001 ff6e 	bl	c374c <__aeabi_dcmpun>
   c1870:	b930      	cbnz	r0, c1880 <sqrt+0x3c>
   c1872:	2200      	movs	r2, #0
   c1874:	2300      	movs	r3, #0
   c1876:	4620      	mov	r0, r4
   c1878:	4629      	mov	r1, r5
   c187a:	f001 ff3f 	bl	c36fc <__aeabi_dcmplt>
   c187e:	b930      	cbnz	r0, c188e <sqrt+0x4a>
   c1880:	eeb0 0a48 	vmov.f32	s0, s16
   c1884:	eef0 0a68 	vmov.f32	s1, s17
   c1888:	ecbd 8b02 	vpop	{d8}
   c188c:	bd38      	pop	{r3, r4, r5, pc}
   c188e:	f7fb ff81 	bl	bd794 <__errno>
   c1892:	2200      	movs	r2, #0
   c1894:	2300      	movs	r3, #0
   c1896:	2121      	movs	r1, #33	; 0x21
   c1898:	6001      	str	r1, [r0, #0]
   c189a:	4610      	mov	r0, r2
   c189c:	4619      	mov	r1, r3
   c189e:	f001 fde5 	bl	c346c <__aeabi_ddiv>
   c18a2:	ec41 0b18 	vmov	d8, r0, r1
   c18a6:	eeb0 0a48 	vmov.f32	s0, s16
   c18aa:	eef0 0a68 	vmov.f32	s1, s17
   c18ae:	ecbd 8b02 	vpop	{d8}
   c18b2:	bd38      	pop	{r3, r4, r5, pc}
   c18b4:	2003db9c 	.word	0x2003db9c

000c18b8 <atan2f>:
   c18b8:	f000 b9cc 	b.w	c1c54 <__ieee754_atan2f>

000c18bc <sqrtf>:
   c18bc:	b508      	push	{r3, lr}
   c18be:	ed2d 8b02 	vpush	{d8}
   c18c2:	eeb0 8a40 	vmov.f32	s16, s0
   c18c6:	f000 fb9f 	bl	c2008 <__ieee754_sqrtf>
   c18ca:	4b0e      	ldr	r3, [pc, #56]	; (c1904 <sqrtf+0x48>)
   c18cc:	f993 3000 	ldrsb.w	r3, [r3]
   c18d0:	3301      	adds	r3, #1
   c18d2:	d00b      	beq.n	c18ec <sqrtf+0x30>
   c18d4:	eeb4 8a48 	vcmp.f32	s16, s16
   c18d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c18dc:	d606      	bvs.n	c18ec <sqrtf+0x30>
   c18de:	eddf 8a0a 	vldr	s17, [pc, #40]	; c1908 <sqrtf+0x4c>
   c18e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c18e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c18ea:	d402      	bmi.n	c18f2 <sqrtf+0x36>
   c18ec:	ecbd 8b02 	vpop	{d8}
   c18f0:	bd08      	pop	{r3, pc}
   c18f2:	f7fb ff4f 	bl	bd794 <__errno>
   c18f6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c18fa:	ecbd 8b02 	vpop	{d8}
   c18fe:	2321      	movs	r3, #33	; 0x21
   c1900:	6003      	str	r3, [r0, #0]
   c1902:	bd08      	pop	{r3, pc}
   c1904:	2003db9c 	.word	0x2003db9c
	...

000c1910 <__ieee754_atan2>:
   c1910:	ec51 0b11 	vmov	r0, r1, d1
   c1914:	4243      	negs	r3, r0
   c1916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c191a:	4303      	orrs	r3, r0
   c191c:	4e64      	ldr	r6, [pc, #400]	; (c1ab0 <__ieee754_atan2+0x1a0>)
   c191e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c1922:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c1926:	42b3      	cmp	r3, r6
   c1928:	ec55 4b10 	vmov	r4, r5, d0
   c192c:	d83e      	bhi.n	c19ac <__ieee754_atan2+0x9c>
   c192e:	4263      	negs	r3, r4
   c1930:	4323      	orrs	r3, r4
   c1932:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c1936:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c193a:	42b3      	cmp	r3, r6
   c193c:	46a9      	mov	r9, r5
   c193e:	d835      	bhi.n	c19ac <__ieee754_atan2+0x9c>
   c1940:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c1944:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c1948:	4303      	orrs	r3, r0
   c194a:	d03e      	beq.n	c19ca <__ieee754_atan2+0xba>
   c194c:	178f      	asrs	r7, r1, #30
   c194e:	f007 0702 	and.w	r7, r7, #2
   c1952:	ea5a 0304 	orrs.w	r3, sl, r4
   c1956:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c195a:	d02f      	beq.n	c19bc <__ieee754_atan2+0xac>
   c195c:	ea5e 0300 	orrs.w	r3, lr, r0
   c1960:	d037      	beq.n	c19d2 <__ieee754_atan2+0xc2>
   c1962:	45b6      	cmp	lr, r6
   c1964:	d044      	beq.n	c19f0 <__ieee754_atan2+0xe0>
   c1966:	45b2      	cmp	sl, r6
   c1968:	d033      	beq.n	c19d2 <__ieee754_atan2+0xc2>
   c196a:	ebaa 0e0e 	sub.w	lr, sl, lr
   c196e:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c1972:	ea4f 532e 	mov.w	r3, lr, asr #20
   c1976:	da38      	bge.n	c19ea <__ieee754_atan2+0xda>
   c1978:	2900      	cmp	r1, #0
   c197a:	da45      	bge.n	c1a08 <__ieee754_atan2+0xf8>
   c197c:	333c      	adds	r3, #60	; 0x3c
   c197e:	da43      	bge.n	c1a08 <__ieee754_atan2+0xf8>
   c1980:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c1a78 <__ieee754_atan2+0x168>
   c1984:	2f01      	cmp	r7, #1
   c1986:	d05d      	beq.n	c1a44 <__ieee754_atan2+0x134>
   c1988:	2f02      	cmp	r7, #2
   c198a:	d04a      	beq.n	c1a22 <__ieee754_atan2+0x112>
   c198c:	b1a7      	cbz	r7, c19b8 <__ieee754_atan2+0xa8>
   c198e:	ec51 0b10 	vmov	r0, r1, d0
   c1992:	a33b      	add	r3, pc, #236	; (adr r3, c1a80 <__ieee754_atan2+0x170>)
   c1994:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1998:	f001 fa86 	bl	c2ea8 <__aeabi_dsub>
   c199c:	a33a      	add	r3, pc, #232	; (adr r3, c1a88 <__ieee754_atan2+0x178>)
   c199e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c19a2:	f001 fa81 	bl	c2ea8 <__aeabi_dsub>
   c19a6:	ec41 0b10 	vmov	d0, r0, r1
   c19aa:	e005      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c19ac:	4622      	mov	r2, r4
   c19ae:	462b      	mov	r3, r5
   c19b0:	f001 fa7c 	bl	c2eac <__adddf3>
   c19b4:	ec41 0b10 	vmov	d0, r0, r1
   c19b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c19bc:	2f02      	cmp	r7, #2
   c19be:	d00e      	beq.n	c19de <__ieee754_atan2+0xce>
   c19c0:	2f03      	cmp	r7, #3
   c19c2:	d1f9      	bne.n	c19b8 <__ieee754_atan2+0xa8>
   c19c4:	ed9f 0b32 	vldr	d0, [pc, #200]	; c1a90 <__ieee754_atan2+0x180>
   c19c8:	e7f6      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c19ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c19ce:	f000 bf23 	b.w	c2818 <atan>
   c19d2:	f1b9 0f00 	cmp.w	r9, #0
   c19d6:	db05      	blt.n	c19e4 <__ieee754_atan2+0xd4>
   c19d8:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c1a98 <__ieee754_atan2+0x188>
   c19dc:	e7ec      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c19de:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c1a88 <__ieee754_atan2+0x178>
   c19e2:	e7e9      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c19e4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c1aa0 <__ieee754_atan2+0x190>
   c19e8:	e7e6      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c19ea:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c1a98 <__ieee754_atan2+0x188>
   c19ee:	e7c9      	b.n	c1984 <__ieee754_atan2+0x74>
   c19f0:	45f2      	cmp	sl, lr
   c19f2:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c19f6:	d02e      	beq.n	c1a56 <__ieee754_atan2+0x146>
   c19f8:	2f02      	cmp	r7, #2
   c19fa:	d834      	bhi.n	c1a66 <__ieee754_atan2+0x156>
   c19fc:	4b2d      	ldr	r3, [pc, #180]	; (c1ab4 <__ieee754_atan2+0x1a4>)
   c19fe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1a02:	ed97 0b00 	vldr	d0, [r7]
   c1a06:	e7d7      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a08:	4602      	mov	r2, r0
   c1a0a:	460b      	mov	r3, r1
   c1a0c:	4620      	mov	r0, r4
   c1a0e:	4629      	mov	r1, r5
   c1a10:	f001 fd2c 	bl	c346c <__aeabi_ddiv>
   c1a14:	ec41 0b10 	vmov	d0, r0, r1
   c1a18:	f001 f89e 	bl	c2b58 <fabs>
   c1a1c:	f000 fefc 	bl	c2818 <atan>
   c1a20:	e7b0      	b.n	c1984 <__ieee754_atan2+0x74>
   c1a22:	a317      	add	r3, pc, #92	; (adr r3, c1a80 <__ieee754_atan2+0x170>)
   c1a24:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1a28:	ec51 0b10 	vmov	r0, r1, d0
   c1a2c:	f001 fa3c 	bl	c2ea8 <__aeabi_dsub>
   c1a30:	4602      	mov	r2, r0
   c1a32:	460b      	mov	r3, r1
   c1a34:	a114      	add	r1, pc, #80	; (adr r1, c1a88 <__ieee754_atan2+0x178>)
   c1a36:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1a3a:	f001 fa35 	bl	c2ea8 <__aeabi_dsub>
   c1a3e:	ec41 0b10 	vmov	d0, r0, r1
   c1a42:	e7b9      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a44:	ee10 1a90 	vmov	r1, s1
   c1a48:	ec53 2b10 	vmov	r2, r3, d0
   c1a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1a50:	ec43 2b10 	vmov	d0, r2, r3
   c1a54:	e7b0      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a56:	2f02      	cmp	r7, #2
   c1a58:	d808      	bhi.n	c1a6c <__ieee754_atan2+0x15c>
   c1a5a:	4b17      	ldr	r3, [pc, #92]	; (c1ab8 <__ieee754_atan2+0x1a8>)
   c1a5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c1a60:	ed97 0b00 	vldr	d0, [r7]
   c1a64:	e7a8      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a66:	ed9f 0b04 	vldr	d0, [pc, #16]	; c1a78 <__ieee754_atan2+0x168>
   c1a6a:	e7a5      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a6c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c1aa8 <__ieee754_atan2+0x198>
   c1a70:	e7a2      	b.n	c19b8 <__ieee754_atan2+0xa8>
   c1a72:	bf00      	nop
   c1a74:	f3af 8000 	nop.w
	...
   c1a80:	33145c07 	.word	0x33145c07
   c1a84:	3ca1a626 	.word	0x3ca1a626
   c1a88:	54442d18 	.word	0x54442d18
   c1a8c:	400921fb 	.word	0x400921fb
   c1a90:	54442d18 	.word	0x54442d18
   c1a94:	c00921fb 	.word	0xc00921fb
   c1a98:	54442d18 	.word	0x54442d18
   c1a9c:	3ff921fb 	.word	0x3ff921fb
   c1aa0:	54442d18 	.word	0x54442d18
   c1aa4:	bff921fb 	.word	0xbff921fb
   c1aa8:	54442d18 	.word	0x54442d18
   c1aac:	3fe921fb 	.word	0x3fe921fb
   c1ab0:	7ff00000 	.word	0x7ff00000
   c1ab4:	000c7480 	.word	0x000c7480
   c1ab8:	000c7468 	.word	0x000c7468

000c1abc <__ieee754_sqrt>:
   c1abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c1ac0:	4a63      	ldr	r2, [pc, #396]	; (c1c50 <__ieee754_sqrt+0x194>)
   c1ac2:	ec55 4b10 	vmov	r4, r5, d0
   c1ac6:	43aa      	bics	r2, r5
   c1ac8:	f000 809f 	beq.w	c1c0a <__ieee754_sqrt+0x14e>
   c1acc:	2d00      	cmp	r5, #0
   c1ace:	ee10 ca10 	vmov	ip, s0
   c1ad2:	462b      	mov	r3, r5
   c1ad4:	dd54      	ble.n	c1b80 <__ieee754_sqrt+0xc4>
   c1ad6:	1529      	asrs	r1, r5, #20
   c1ad8:	d063      	beq.n	c1ba2 <__ieee754_sqrt+0xe6>
   c1ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c1ade:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c1ae2:	07c9      	lsls	r1, r1, #31
   c1ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c1ae8:	d404      	bmi.n	c1af4 <__ieee754_sqrt+0x38>
   c1aea:	005b      	lsls	r3, r3, #1
   c1aec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1af0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1af4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c1af8:	2600      	movs	r6, #0
   c1afa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c1afe:	107f      	asrs	r7, r7, #1
   c1b00:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1b04:	f04f 0e16 	mov.w	lr, #22
   c1b08:	4634      	mov	r4, r6
   c1b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c1b0e:	18a1      	adds	r1, r4, r2
   c1b10:	4299      	cmp	r1, r3
   c1b12:	dc02      	bgt.n	c1b1a <__ieee754_sqrt+0x5e>
   c1b14:	1a5b      	subs	r3, r3, r1
   c1b16:	188c      	adds	r4, r1, r2
   c1b18:	4416      	add	r6, r2
   c1b1a:	005b      	lsls	r3, r3, #1
   c1b1c:	f1be 0e01 	subs.w	lr, lr, #1
   c1b20:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c1b24:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1b28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1b2c:	d1ef      	bne.n	c1b0e <__ieee754_sqrt+0x52>
   c1b2e:	4675      	mov	r5, lr
   c1b30:	2020      	movs	r0, #32
   c1b32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c1b36:	e00a      	b.n	c1b4e <__ieee754_sqrt+0x92>
   c1b38:	d044      	beq.n	c1bc4 <__ieee754_sqrt+0x108>
   c1b3a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c1b3e:	3801      	subs	r0, #1
   c1b40:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c1b44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c1b48:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c1b4c:	d043      	beq.n	c1bd6 <__ieee754_sqrt+0x11a>
   c1b4e:	42a3      	cmp	r3, r4
   c1b50:	eb02 010e 	add.w	r1, r2, lr
   c1b54:	ddf0      	ble.n	c1b38 <__ieee754_sqrt+0x7c>
   c1b56:	2900      	cmp	r1, #0
   c1b58:	eb01 0e02 	add.w	lr, r1, r2
   c1b5c:	db0a      	blt.n	c1b74 <__ieee754_sqrt+0xb8>
   c1b5e:	46a0      	mov	r8, r4
   c1b60:	1b1b      	subs	r3, r3, r4
   c1b62:	4561      	cmp	r1, ip
   c1b64:	bf88      	it	hi
   c1b66:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c1b6a:	ebac 0c01 	sub.w	ip, ip, r1
   c1b6e:	4415      	add	r5, r2
   c1b70:	4644      	mov	r4, r8
   c1b72:	e7e2      	b.n	c1b3a <__ieee754_sqrt+0x7e>
   c1b74:	f1be 0f00 	cmp.w	lr, #0
   c1b78:	dbf1      	blt.n	c1b5e <__ieee754_sqrt+0xa2>
   c1b7a:	f104 0801 	add.w	r8, r4, #1
   c1b7e:	e7ef      	b.n	c1b60 <__ieee754_sqrt+0xa4>
   c1b80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c1b84:	4322      	orrs	r2, r4
   c1b86:	d038      	beq.n	c1bfa <__ieee754_sqrt+0x13e>
   c1b88:	2d00      	cmp	r5, #0
   c1b8a:	d14e      	bne.n	c1c2a <__ieee754_sqrt+0x16e>
   c1b8c:	4629      	mov	r1, r5
   c1b8e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c1b92:	3915      	subs	r1, #21
   c1b94:	4613      	mov	r3, r2
   c1b96:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c1b9a:	2a00      	cmp	r2, #0
   c1b9c:	d0f7      	beq.n	c1b8e <__ieee754_sqrt+0xd2>
   c1b9e:	02d6      	lsls	r6, r2, #11
   c1ba0:	d450      	bmi.n	c1c44 <__ieee754_sqrt+0x188>
   c1ba2:	2000      	movs	r0, #0
   c1ba4:	005b      	lsls	r3, r3, #1
   c1ba6:	02dd      	lsls	r5, r3, #11
   c1ba8:	4604      	mov	r4, r0
   c1baa:	f100 0001 	add.w	r0, r0, #1
   c1bae:	d5f9      	bpl.n	c1ba4 <__ieee754_sqrt+0xe8>
   c1bb0:	461a      	mov	r2, r3
   c1bb2:	4663      	mov	r3, ip
   c1bb4:	fa0c fc00 	lsl.w	ip, ip, r0
   c1bb8:	f1c0 0020 	rsb	r0, r0, #32
   c1bbc:	40c3      	lsrs	r3, r0
   c1bbe:	1b09      	subs	r1, r1, r4
   c1bc0:	4313      	orrs	r3, r2
   c1bc2:	e78a      	b.n	c1ada <__ieee754_sqrt+0x1e>
   c1bc4:	4561      	cmp	r1, ip
   c1bc6:	d8b8      	bhi.n	c1b3a <__ieee754_sqrt+0x7e>
   c1bc8:	2900      	cmp	r1, #0
   c1bca:	eb01 0e02 	add.w	lr, r1, r2
   c1bce:	dbd1      	blt.n	c1b74 <__ieee754_sqrt+0xb8>
   c1bd0:	4698      	mov	r8, r3
   c1bd2:	2300      	movs	r3, #0
   c1bd4:	e7c9      	b.n	c1b6a <__ieee754_sqrt+0xae>
   c1bd6:	ea53 030c 	orrs.w	r3, r3, ip
   c1bda:	d110      	bne.n	c1bfe <__ieee754_sqrt+0x142>
   c1bdc:	0868      	lsrs	r0, r5, #1
   c1bde:	1071      	asrs	r1, r6, #1
   c1be0:	07f3      	lsls	r3, r6, #31
   c1be2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c1be6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c1bea:	bf48      	it	mi
   c1bec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c1bf0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c1bf4:	4602      	mov	r2, r0
   c1bf6:	ec43 2b10 	vmov	d0, r2, r3
   c1bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1bfe:	1c6a      	adds	r2, r5, #1
   c1c00:	bf16      	itet	ne
   c1c02:	1c68      	addne	r0, r5, #1
   c1c04:	3601      	addeq	r6, #1
   c1c06:	0840      	lsrne	r0, r0, #1
   c1c08:	e7e9      	b.n	c1bde <__ieee754_sqrt+0x122>
   c1c0a:	ee10 2a10 	vmov	r2, s0
   c1c0e:	ee10 0a10 	vmov	r0, s0
   c1c12:	462b      	mov	r3, r5
   c1c14:	4629      	mov	r1, r5
   c1c16:	f001 faff 	bl	c3218 <__aeabi_dmul>
   c1c1a:	4622      	mov	r2, r4
   c1c1c:	462b      	mov	r3, r5
   c1c1e:	f001 f945 	bl	c2eac <__adddf3>
   c1c22:	ec41 0b10 	vmov	d0, r0, r1
   c1c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1c2a:	ee10 2a10 	vmov	r2, s0
   c1c2e:	4620      	mov	r0, r4
   c1c30:	4629      	mov	r1, r5
   c1c32:	f001 f939 	bl	c2ea8 <__aeabi_dsub>
   c1c36:	4602      	mov	r2, r0
   c1c38:	460b      	mov	r3, r1
   c1c3a:	f001 fc17 	bl	c346c <__aeabi_ddiv>
   c1c3e:	ec41 0b10 	vmov	d0, r0, r1
   c1c42:	e7da      	b.n	c1bfa <__ieee754_sqrt+0x13e>
   c1c44:	4663      	mov	r3, ip
   c1c46:	2020      	movs	r0, #32
   c1c48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c1c4c:	e7b6      	b.n	c1bbc <__ieee754_sqrt+0x100>
   c1c4e:	bf00      	nop
   c1c50:	7ff00000 	.word	0x7ff00000

000c1c54 <__ieee754_atan2f>:
   c1c54:	b510      	push	{r4, lr}
   c1c56:	b082      	sub	sp, #8
   c1c58:	edcd 0a01 	vstr	s1, [sp, #4]
   c1c5c:	9b01      	ldr	r3, [sp, #4]
   c1c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c1c62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1c66:	eef0 7a40 	vmov.f32	s15, s0
   c1c6a:	dc30      	bgt.n	c1cce <__ieee754_atan2f+0x7a>
   c1c6c:	ee10 0a10 	vmov	r0, s0
   c1c70:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c1c74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1c78:	dc29      	bgt.n	c1cce <__ieee754_atan2f+0x7a>
   c1c7a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c1c7e:	d042      	beq.n	c1d06 <__ieee754_atan2f+0xb2>
   c1c80:	179c      	asrs	r4, r3, #30
   c1c82:	f004 0402 	and.w	r4, r4, #2
   c1c86:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c1c8a:	b331      	cbz	r1, c1cda <__ieee754_atan2f+0x86>
   c1c8c:	b37a      	cbz	r2, c1cee <__ieee754_atan2f+0x9a>
   c1c8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c1c92:	d040      	beq.n	c1d16 <__ieee754_atan2f+0xc2>
   c1c94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1c98:	d029      	beq.n	c1cee <__ieee754_atan2f+0x9a>
   c1c9a:	1a8a      	subs	r2, r1, r2
   c1c9c:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c1ca0:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c1ca4:	da34      	bge.n	c1d10 <__ieee754_atan2f+0xbc>
   c1ca6:	2b00      	cmp	r3, #0
   c1ca8:	da42      	bge.n	c1d30 <__ieee754_atan2f+0xdc>
   c1caa:	313c      	adds	r1, #60	; 0x3c
   c1cac:	da40      	bge.n	c1d30 <__ieee754_atan2f+0xdc>
   c1cae:	ed9f 0a34 	vldr	s0, [pc, #208]	; c1d80 <__ieee754_atan2f+0x12c>
   c1cb2:	2c01      	cmp	r4, #1
   c1cb4:	d04e      	beq.n	c1d54 <__ieee754_atan2f+0x100>
   c1cb6:	2c02      	cmp	r4, #2
   c1cb8:	d043      	beq.n	c1d42 <__ieee754_atan2f+0xee>
   c1cba:	b164      	cbz	r4, c1cd6 <__ieee754_atan2f+0x82>
   c1cbc:	ed9f 7a31 	vldr	s14, [pc, #196]	; c1d84 <__ieee754_atan2f+0x130>
   c1cc0:	eddf 7a31 	vldr	s15, [pc, #196]	; c1d88 <__ieee754_atan2f+0x134>
   c1cc4:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1cc8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c1ccc:	e003      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1cce:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1cd2:	ee37 0a27 	vadd.f32	s0, s14, s15
   c1cd6:	b002      	add	sp, #8
   c1cd8:	bd10      	pop	{r4, pc}
   c1cda:	2c02      	cmp	r4, #2
   c1cdc:	d010      	beq.n	c1d00 <__ieee754_atan2f+0xac>
   c1cde:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c1d8c <__ieee754_atan2f+0x138>
   c1ce2:	2c03      	cmp	r4, #3
   c1ce4:	bf18      	it	ne
   c1ce6:	eeb0 0a67 	vmovne.f32	s0, s15
   c1cea:	b002      	add	sp, #8
   c1cec:	bd10      	pop	{r4, pc}
   c1cee:	ed9f 0a28 	vldr	s0, [pc, #160]	; c1d90 <__ieee754_atan2f+0x13c>
   c1cf2:	eddf 7a28 	vldr	s15, [pc, #160]	; c1d94 <__ieee754_atan2f+0x140>
   c1cf6:	2800      	cmp	r0, #0
   c1cf8:	bfb8      	it	lt
   c1cfa:	eeb0 0a67 	vmovlt.f32	s0, s15
   c1cfe:	e7ea      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d00:	ed9f 0a21 	vldr	s0, [pc, #132]	; c1d88 <__ieee754_atan2f+0x134>
   c1d04:	e7e7      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d06:	b002      	add	sp, #8
   c1d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c1d0c:	f000 bf2e 	b.w	c2b6c <atanf>
   c1d10:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c1d90 <__ieee754_atan2f+0x13c>
   c1d14:	e7cd      	b.n	c1cb2 <__ieee754_atan2f+0x5e>
   c1d16:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c1d1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c1d1e:	d020      	beq.n	c1d62 <__ieee754_atan2f+0x10e>
   c1d20:	2c02      	cmp	r4, #2
   c1d22:	d826      	bhi.n	c1d72 <__ieee754_atan2f+0x11e>
   c1d24:	4b1c      	ldr	r3, [pc, #112]	; (c1d98 <__ieee754_atan2f+0x144>)
   c1d26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1d2a:	ed94 0a00 	vldr	s0, [r4]
   c1d2e:	e7d2      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d30:	ed9d 7a01 	vldr	s14, [sp, #4]
   c1d34:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c1d38:	f000 fff2 	bl	c2d20 <fabsf>
   c1d3c:	f000 ff16 	bl	c2b6c <atanf>
   c1d40:	e7b7      	b.n	c1cb2 <__ieee754_atan2f+0x5e>
   c1d42:	ed9f 7a10 	vldr	s14, [pc, #64]	; c1d84 <__ieee754_atan2f+0x130>
   c1d46:	eddf 7a10 	vldr	s15, [pc, #64]	; c1d88 <__ieee754_atan2f+0x134>
   c1d4a:	ee30 0a07 	vadd.f32	s0, s0, s14
   c1d4e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c1d52:	e7c0      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d54:	ee10 3a10 	vmov	r3, s0
   c1d58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c1d5c:	ee00 3a10 	vmov	s0, r3
   c1d60:	e7b9      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d62:	2c02      	cmp	r4, #2
   c1d64:	d808      	bhi.n	c1d78 <__ieee754_atan2f+0x124>
   c1d66:	4b0d      	ldr	r3, [pc, #52]	; (c1d9c <__ieee754_atan2f+0x148>)
   c1d68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c1d6c:	ed94 0a00 	vldr	s0, [r4]
   c1d70:	e7b1      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d72:	ed9f 0a03 	vldr	s0, [pc, #12]	; c1d80 <__ieee754_atan2f+0x12c>
   c1d76:	e7ae      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d78:	ed9f 0a09 	vldr	s0, [pc, #36]	; c1da0 <__ieee754_atan2f+0x14c>
   c1d7c:	e7ab      	b.n	c1cd6 <__ieee754_atan2f+0x82>
   c1d7e:	bf00      	nop
   c1d80:	00000000 	.word	0x00000000
   c1d84:	33bbbd2e 	.word	0x33bbbd2e
   c1d88:	40490fdb 	.word	0x40490fdb
   c1d8c:	c0490fdb 	.word	0xc0490fdb
   c1d90:	3fc90fdb 	.word	0x3fc90fdb
   c1d94:	bfc90fdb 	.word	0xbfc90fdb
   c1d98:	000c74a4 	.word	0x000c74a4
   c1d9c:	000c7498 	.word	0x000c7498
   c1da0:	3f490fdb 	.word	0x3f490fdb

000c1da4 <__ieee754_rem_pio2f>:
   c1da4:	b570      	push	{r4, r5, r6, lr}
   c1da6:	ee10 3a10 	vmov	r3, s0
   c1daa:	4a89      	ldr	r2, [pc, #548]	; (c1fd0 <__ieee754_rem_pio2f+0x22c>)
   c1dac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c1db0:	4294      	cmp	r4, r2
   c1db2:	b086      	sub	sp, #24
   c1db4:	4605      	mov	r5, r0
   c1db6:	dd70      	ble.n	c1e9a <__ieee754_rem_pio2f+0xf6>
   c1db8:	4a86      	ldr	r2, [pc, #536]	; (c1fd4 <__ieee754_rem_pio2f+0x230>)
   c1dba:	4294      	cmp	r4, r2
   c1dbc:	ee10 6a10 	vmov	r6, s0
   c1dc0:	dc22      	bgt.n	c1e08 <__ieee754_rem_pio2f+0x64>
   c1dc2:	2b00      	cmp	r3, #0
   c1dc4:	eddf 7a84 	vldr	s15, [pc, #528]	; c1fd8 <__ieee754_rem_pio2f+0x234>
   c1dc8:	4a84      	ldr	r2, [pc, #528]	; (c1fdc <__ieee754_rem_pio2f+0x238>)
   c1dca:	f024 040f 	bic.w	r4, r4, #15
   c1dce:	eeb0 7a40 	vmov.f32	s14, s0
   c1dd2:	f340 80e4 	ble.w	c1f9e <__ieee754_rem_pio2f+0x1fa>
   c1dd6:	4294      	cmp	r4, r2
   c1dd8:	ee70 7a67 	vsub.f32	s15, s0, s15
   c1ddc:	bf09      	itett	eq
   c1dde:	eddf 6a80 	vldreq	s13, [pc, #512]	; c1fe0 <__ieee754_rem_pio2f+0x23c>
   c1de2:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c1fe4 <__ieee754_rem_pio2f+0x240>
   c1de6:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c1fe8 <__ieee754_rem_pio2f+0x244>
   c1dea:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c1dee:	2001      	movs	r0, #1
   c1df0:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c1df4:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c1df8:	edc5 6a00 	vstr	s13, [r5]
   c1dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1e00:	edc5 7a01 	vstr	s15, [r5, #4]
   c1e04:	b006      	add	sp, #24
   c1e06:	bd70      	pop	{r4, r5, r6, pc}
   c1e08:	4a78      	ldr	r2, [pc, #480]	; (c1fec <__ieee754_rem_pio2f+0x248>)
   c1e0a:	4294      	cmp	r4, r2
   c1e0c:	dd54      	ble.n	c1eb8 <__ieee754_rem_pio2f+0x114>
   c1e0e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c1e12:	da49      	bge.n	c1ea8 <__ieee754_rem_pio2f+0x104>
   c1e14:	15e2      	asrs	r2, r4, #23
   c1e16:	3a86      	subs	r2, #134	; 0x86
   c1e18:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c1e1c:	ee07 3a90 	vmov	s15, r3
   c1e20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1e24:	eddf 6a72 	vldr	s13, [pc, #456]	; c1ff0 <__ieee754_rem_pio2f+0x24c>
   c1e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1e30:	ed8d 7a03 	vstr	s14, [sp, #12]
   c1e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1e38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c1e3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c1e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c1e44:	ed8d 7a04 	vstr	s14, [sp, #16]
   c1e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c1e4c:	eef5 7a40 	vcmp.f32	s15, #0.0
   c1e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1e54:	edcd 7a05 	vstr	s15, [sp, #20]
   c1e58:	f040 8090 	bne.w	c1f7c <__ieee754_rem_pio2f+0x1d8>
   c1e5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c1e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c1e64:	bf14      	ite	ne
   c1e66:	2302      	movne	r3, #2
   c1e68:	2301      	moveq	r3, #1
   c1e6a:	4962      	ldr	r1, [pc, #392]	; (c1ff4 <__ieee754_rem_pio2f+0x250>)
   c1e6c:	9101      	str	r1, [sp, #4]
   c1e6e:	2102      	movs	r1, #2
   c1e70:	9100      	str	r1, [sp, #0]
   c1e72:	a803      	add	r0, sp, #12
   c1e74:	4629      	mov	r1, r5
   c1e76:	f000 f94d 	bl	c2114 <__kernel_rem_pio2f>
   c1e7a:	2e00      	cmp	r6, #0
   c1e7c:	dac2      	bge.n	c1e04 <__ieee754_rem_pio2f+0x60>
   c1e7e:	ed95 7a00 	vldr	s14, [r5]
   c1e82:	edd5 7a01 	vldr	s15, [r5, #4]
   c1e86:	eeb1 7a47 	vneg.f32	s14, s14
   c1e8a:	eef1 7a67 	vneg.f32	s15, s15
   c1e8e:	ed85 7a00 	vstr	s14, [r5]
   c1e92:	edc5 7a01 	vstr	s15, [r5, #4]
   c1e96:	4240      	negs	r0, r0
   c1e98:	e7b4      	b.n	c1e04 <__ieee754_rem_pio2f+0x60>
   c1e9a:	2200      	movs	r2, #0
   c1e9c:	ed85 0a00 	vstr	s0, [r5]
   c1ea0:	6042      	str	r2, [r0, #4]
   c1ea2:	2000      	movs	r0, #0
   c1ea4:	b006      	add	sp, #24
   c1ea6:	bd70      	pop	{r4, r5, r6, pc}
   c1ea8:	ee70 7a40 	vsub.f32	s15, s0, s0
   c1eac:	2000      	movs	r0, #0
   c1eae:	edc5 7a01 	vstr	s15, [r5, #4]
   c1eb2:	edc5 7a00 	vstr	s15, [r5]
   c1eb6:	e7a5      	b.n	c1e04 <__ieee754_rem_pio2f+0x60>
   c1eb8:	f000 ff32 	bl	c2d20 <fabsf>
   c1ebc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c1ff8 <__ieee754_rem_pio2f+0x254>
   c1ec0:	ed9f 6a45 	vldr	s12, [pc, #276]	; c1fd8 <__ieee754_rem_pio2f+0x234>
   c1ec4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c1ec8:	eee0 7a07 	vfma.f32	s15, s0, s14
   c1ecc:	ed9f 7a45 	vldr	s14, [pc, #276]	; c1fe4 <__ieee754_rem_pio2f+0x240>
   c1ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c1ed4:	ee17 0a90 	vmov	r0, s15
   c1ed8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c1edc:	281f      	cmp	r0, #31
   c1ede:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c1ee2:	ee66 7a87 	vmul.f32	s15, s13, s14
   c1ee6:	eeb1 6a66 	vneg.f32	s12, s13
   c1eea:	dc1e      	bgt.n	c1f2a <__ieee754_rem_pio2f+0x186>
   c1eec:	4a43      	ldr	r2, [pc, #268]	; (c1ffc <__ieee754_rem_pio2f+0x258>)
   c1eee:	1e41      	subs	r1, r0, #1
   c1ef0:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c1ef4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c1ef8:	4293      	cmp	r3, r2
   c1efa:	d016      	beq.n	c1f2a <__ieee754_rem_pio2f+0x186>
   c1efc:	ee30 7a67 	vsub.f32	s14, s0, s15
   c1f00:	ed85 7a00 	vstr	s14, [r5]
   c1f04:	ee30 0a47 	vsub.f32	s0, s0, s14
   c1f08:	2e00      	cmp	r6, #0
   c1f0a:	ee30 0a67 	vsub.f32	s0, s0, s15
   c1f0e:	ed85 0a01 	vstr	s0, [r5, #4]
   c1f12:	f6bf af77 	bge.w	c1e04 <__ieee754_rem_pio2f+0x60>
   c1f16:	eeb1 7a47 	vneg.f32	s14, s14
   c1f1a:	eeb1 0a40 	vneg.f32	s0, s0
   c1f1e:	ed85 7a00 	vstr	s14, [r5]
   c1f22:	ed85 0a01 	vstr	s0, [r5, #4]
   c1f26:	4240      	negs	r0, r0
   c1f28:	e76c      	b.n	c1e04 <__ieee754_rem_pio2f+0x60>
   c1f2a:	ee30 7a67 	vsub.f32	s14, s0, s15
   c1f2e:	15e2      	asrs	r2, r4, #23
   c1f30:	ee17 3a10 	vmov	r3, s14
   c1f34:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c1f38:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c1f3c:	2c08      	cmp	r4, #8
   c1f3e:	dddf      	ble.n	c1f00 <__ieee754_rem_pio2f+0x15c>
   c1f40:	eddf 7a27 	vldr	s15, [pc, #156]	; c1fe0 <__ieee754_rem_pio2f+0x23c>
   c1f44:	ed9f 7a28 	vldr	s14, [pc, #160]	; c1fe8 <__ieee754_rem_pio2f+0x244>
   c1f48:	eef0 5a40 	vmov.f32	s11, s0
   c1f4c:	eee6 5a27 	vfma.f32	s11, s12, s15
   c1f50:	ee30 0a65 	vsub.f32	s0, s0, s11
   c1f54:	eea6 0a27 	vfma.f32	s0, s12, s15
   c1f58:	eef0 7a40 	vmov.f32	s15, s0
   c1f5c:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c1f60:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c1f64:	ee17 3a10 	vmov	r3, s14
   c1f68:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c1f6c:	1ad2      	subs	r2, r2, r3
   c1f6e:	2a19      	cmp	r2, #25
   c1f70:	dc06      	bgt.n	c1f80 <__ieee754_rem_pio2f+0x1dc>
   c1f72:	eeb0 0a65 	vmov.f32	s0, s11
   c1f76:	ed85 7a00 	vstr	s14, [r5]
   c1f7a:	e7c3      	b.n	c1f04 <__ieee754_rem_pio2f+0x160>
   c1f7c:	2303      	movs	r3, #3
   c1f7e:	e774      	b.n	c1e6a <__ieee754_rem_pio2f+0xc6>
   c1f80:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2000 <__ieee754_rem_pio2f+0x25c>
   c1f84:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2004 <__ieee754_rem_pio2f+0x260>
   c1f88:	eeb0 0a65 	vmov.f32	s0, s11
   c1f8c:	eea6 0a07 	vfma.f32	s0, s12, s14
   c1f90:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c1f94:	eee6 7a07 	vfma.f32	s15, s12, s14
   c1f98:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c1f9c:	e7ae      	b.n	c1efc <__ieee754_rem_pio2f+0x158>
   c1f9e:	4294      	cmp	r4, r2
   c1fa0:	ee70 7a27 	vadd.f32	s15, s0, s15
   c1fa4:	bf09      	itett	eq
   c1fa6:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c1fe0 <__ieee754_rem_pio2f+0x23c>
   c1faa:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c1fe4 <__ieee754_rem_pio2f+0x240>
   c1fae:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c1fe8 <__ieee754_rem_pio2f+0x244>
   c1fb2:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c1fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c1fba:	ee77 6a87 	vadd.f32	s13, s15, s14
   c1fbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c1fc2:	edc5 6a00 	vstr	s13, [r5]
   c1fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c1fca:	edc5 7a01 	vstr	s15, [r5, #4]
   c1fce:	e719      	b.n	c1e04 <__ieee754_rem_pio2f+0x60>
   c1fd0:	3f490fd8 	.word	0x3f490fd8
   c1fd4:	4016cbe3 	.word	0x4016cbe3
   c1fd8:	3fc90f80 	.word	0x3fc90f80
   c1fdc:	3fc90fd0 	.word	0x3fc90fd0
   c1fe0:	37354400 	.word	0x37354400
   c1fe4:	37354443 	.word	0x37354443
   c1fe8:	2e85a308 	.word	0x2e85a308
   c1fec:	43490f80 	.word	0x43490f80
   c1ff0:	43800000 	.word	0x43800000
   c1ff4:	000c7530 	.word	0x000c7530
   c1ff8:	3f22f984 	.word	0x3f22f984
   c1ffc:	000c74b0 	.word	0x000c74b0
   c2000:	2e85a300 	.word	0x2e85a300
   c2004:	248d3132 	.word	0x248d3132

000c2008 <__ieee754_sqrtf>:
   c2008:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c200c:	4770      	bx	lr
   c200e:	bf00      	nop

000c2010 <__kernel_cosf>:
   c2010:	ee10 3a10 	vmov	r3, s0
   c2014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2018:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c201c:	da2c      	bge.n	c2078 <__kernel_cosf+0x68>
   c201e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2022:	ee17 3a90 	vmov	r3, s15
   c2026:	2b00      	cmp	r3, #0
   c2028:	d060      	beq.n	c20ec <__kernel_cosf+0xdc>
   c202a:	ee20 7a00 	vmul.f32	s14, s0, s0
   c202e:	eddf 7a31 	vldr	s15, [pc, #196]	; c20f4 <__kernel_cosf+0xe4>
   c2032:	ed9f 5a31 	vldr	s10, [pc, #196]	; c20f8 <__kernel_cosf+0xe8>
   c2036:	eddf 5a31 	vldr	s11, [pc, #196]	; c20fc <__kernel_cosf+0xec>
   c203a:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2100 <__kernel_cosf+0xf0>
   c203e:	eddf 6a31 	vldr	s13, [pc, #196]	; c2104 <__kernel_cosf+0xf4>
   c2042:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2046:	eddf 7a30 	vldr	s15, [pc, #192]	; c2108 <__kernel_cosf+0xf8>
   c204a:	eee7 5a05 	vfma.f32	s11, s14, s10
   c204e:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2052:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2056:	eee7 6a27 	vfma.f32	s13, s14, s15
   c205a:	ee67 6a26 	vmul.f32	s13, s14, s13
   c205e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2062:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2066:	eee7 0a26 	vfma.f32	s1, s14, s13
   c206a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c206e:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2072:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2076:	4770      	bx	lr
   c2078:	ee20 7a00 	vmul.f32	s14, s0, s0
   c207c:	eddf 7a1d 	vldr	s15, [pc, #116]	; c20f4 <__kernel_cosf+0xe4>
   c2080:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c20f8 <__kernel_cosf+0xe8>
   c2084:	eddf 5a1d 	vldr	s11, [pc, #116]	; c20fc <__kernel_cosf+0xec>
   c2088:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2100 <__kernel_cosf+0xf0>
   c208c:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2104 <__kernel_cosf+0xf4>
   c2090:	4a1e      	ldr	r2, [pc, #120]	; (c210c <__kernel_cosf+0xfc>)
   c2092:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2096:	4293      	cmp	r3, r2
   c2098:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2108 <__kernel_cosf+0xf8>
   c209c:	eee5 5a07 	vfma.f32	s11, s10, s14
   c20a0:	eea5 6a87 	vfma.f32	s12, s11, s14
   c20a4:	eee6 7a07 	vfma.f32	s15, s12, s14
   c20a8:	eee7 6a87 	vfma.f32	s13, s15, s14
   c20ac:	ee66 6a87 	vmul.f32	s13, s13, s14
   c20b0:	ddd5      	ble.n	c205e <__kernel_cosf+0x4e>
   c20b2:	4a17      	ldr	r2, [pc, #92]	; (c2110 <__kernel_cosf+0x100>)
   c20b4:	4293      	cmp	r3, r2
   c20b6:	dc14      	bgt.n	c20e2 <__kernel_cosf+0xd2>
   c20b8:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c20bc:	ee07 3a90 	vmov	s15, r3
   c20c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c20c4:	ee36 6a67 	vsub.f32	s12, s12, s15
   c20c8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c20cc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c20d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c20d4:	eee7 0a26 	vfma.f32	s1, s14, s13
   c20d8:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c20dc:	ee36 0a60 	vsub.f32	s0, s12, s1
   c20e0:	4770      	bx	lr
   c20e2:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c20e6:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c20ea:	e7ed      	b.n	c20c8 <__kernel_cosf+0xb8>
   c20ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c20f0:	4770      	bx	lr
   c20f2:	bf00      	nop
   c20f4:	ad47d74e 	.word	0xad47d74e
   c20f8:	310f74f6 	.word	0x310f74f6
   c20fc:	b493f27c 	.word	0xb493f27c
   c2100:	37d00d01 	.word	0x37d00d01
   c2104:	3d2aaaab 	.word	0x3d2aaaab
   c2108:	bab60b61 	.word	0xbab60b61
   c210c:	3e999999 	.word	0x3e999999
   c2110:	3f480000 	.word	0x3f480000

000c2114 <__kernel_rem_pio2f>:
   c2114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2118:	ed2d 8b04 	vpush	{d8-d9}
   c211c:	b0db      	sub	sp, #364	; 0x16c
   c211e:	461c      	mov	r4, r3
   c2120:	9303      	str	r3, [sp, #12]
   c2122:	9106      	str	r1, [sp, #24]
   c2124:	4ba3      	ldr	r3, [pc, #652]	; (c23b4 <__kernel_rem_pio2f+0x2a0>)
   c2126:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2128:	9208      	str	r2, [sp, #32]
   c212a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c212e:	1d11      	adds	r1, r2, #4
   c2130:	4682      	mov	sl, r0
   c2132:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2136:	f2c0 82a2 	blt.w	c267e <__kernel_rem_pio2f+0x56a>
   c213a:	1ed3      	subs	r3, r2, #3
   c213c:	bf44      	itt	mi
   c213e:	4613      	movmi	r3, r2
   c2140:	3304      	addmi	r3, #4
   c2142:	10db      	asrs	r3, r3, #3
   c2144:	9302      	str	r3, [sp, #8]
   c2146:	3301      	adds	r3, #1
   c2148:	00db      	lsls	r3, r3, #3
   c214a:	9307      	str	r3, [sp, #28]
   c214c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2150:	1a9b      	subs	r3, r3, r2
   c2152:	9305      	str	r3, [sp, #20]
   c2154:	9b02      	ldr	r3, [sp, #8]
   c2156:	eb15 0108 	adds.w	r1, r5, r8
   c215a:	eba3 0308 	sub.w	r3, r3, r8
   c215e:	d416      	bmi.n	c218e <__kernel_rem_pio2f+0x7a>
   c2160:	3101      	adds	r1, #1
   c2162:	ed9f 7a95 	vldr	s14, [pc, #596]	; c23b8 <__kernel_rem_pio2f+0x2a4>
   c2166:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2168:	4419      	add	r1, r3
   c216a:	aa1e      	add	r2, sp, #120	; 0x78
   c216c:	2b00      	cmp	r3, #0
   c216e:	bfa4      	itt	ge
   c2170:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2174:	ee07 4a90 	vmovge	s15, r4
   c2178:	f103 0301 	add.w	r3, r3, #1
   c217c:	bfac      	ite	ge
   c217e:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2182:	eef0 7a47 	vmovlt.f32	s15, s14
   c2186:	428b      	cmp	r3, r1
   c2188:	ece2 7a01 	vstmia	r2!, {s15}
   c218c:	d1ee      	bne.n	c216c <__kernel_rem_pio2f+0x58>
   c218e:	2d00      	cmp	r5, #0
   c2190:	f2c0 82e5 	blt.w	c275e <__kernel_rem_pio2f+0x64a>
   c2194:	9b03      	ldr	r3, [sp, #12]
   c2196:	a91e      	add	r1, sp, #120	; 0x78
   c2198:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c219c:	ae46      	add	r6, sp, #280	; 0x118
   c219e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c21a2:	4640      	mov	r0, r8
   c21a4:	18ef      	adds	r7, r5, r3
   c21a6:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c21aa:	f1b8 0f00 	cmp.w	r8, #0
   c21ae:	eddf 7a82 	vldr	s15, [pc, #520]	; c23b8 <__kernel_rem_pio2f+0x2a4>
   c21b2:	db09      	blt.n	c21c8 <__kernel_rem_pio2f+0xb4>
   c21b4:	4622      	mov	r2, r4
   c21b6:	4653      	mov	r3, sl
   c21b8:	ecf3 6a01 	vldmia	r3!, {s13}
   c21bc:	ed32 7a01 	vldmdb	r2!, {s14}
   c21c0:	428b      	cmp	r3, r1
   c21c2:	eee6 7a87 	vfma.f32	s15, s13, s14
   c21c6:	d1f7      	bne.n	c21b8 <__kernel_rem_pio2f+0xa4>
   c21c8:	3001      	adds	r0, #1
   c21ca:	42b8      	cmp	r0, r7
   c21cc:	ece6 7a01 	vstmia	r6!, {s15}
   c21d0:	f104 0404 	add.w	r4, r4, #4
   c21d4:	d1e9      	bne.n	c21aa <__kernel_rem_pio2f+0x96>
   c21d6:	ab09      	add	r3, sp, #36	; 0x24
   c21d8:	af0a      	add	r7, sp, #40	; 0x28
   c21da:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c21de:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c21e2:	3b08      	subs	r3, #8
   c21e4:	ed9f 9a76 	vldr	s18, [pc, #472]	; c23c0 <__kernel_rem_pio2f+0x2ac>
   c21e8:	eddf 8a74 	vldr	s17, [pc, #464]	; c23bc <__kernel_rem_pio2f+0x2a8>
   c21ec:	9805      	ldr	r0, [sp, #20]
   c21ee:	9304      	str	r3, [sp, #16]
   c21f0:	eb0a 040c 	add.w	r4, sl, ip
   c21f4:	ae46      	add	r6, sp, #280	; 0x118
   c21f6:	9500      	str	r5, [sp, #0]
   c21f8:	ab5a      	add	r3, sp, #360	; 0x168
   c21fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c21fe:	2d00      	cmp	r5, #0
   c2200:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2204:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2208:	dd16      	ble.n	c2238 <__kernel_rem_pio2f+0x124>
   c220a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c220e:	463a      	mov	r2, r7
   c2210:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2214:	eeb0 7a40 	vmov.f32	s14, s0
   c2218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c221c:	ed73 6a01 	vldmdb	r3!, {s13}
   c2220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2224:	42b3      	cmp	r3, r6
   c2226:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c222a:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c222e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2232:	eca2 7a01 	vstmia	r2!, {s14}
   c2236:	d1eb      	bne.n	c2210 <__kernel_rem_pio2f+0xfc>
   c2238:	9001      	str	r0, [sp, #4]
   c223a:	f000 fdbf 	bl	c2dbc <scalbnf>
   c223e:	eeb0 8a40 	vmov.f32	s16, s0
   c2242:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2246:	ee28 0a00 	vmul.f32	s0, s16, s0
   c224a:	f000 fd71 	bl	c2d30 <floorf>
   c224e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2252:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2256:	9801      	ldr	r0, [sp, #4]
   c2258:	2800      	cmp	r0, #0
   c225a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c225e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2262:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2266:	dd79      	ble.n	c235c <__kernel_rem_pio2f+0x248>
   c2268:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c226c:	f1c0 0308 	rsb	r3, r0, #8
   c2270:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2274:	fa41 fc03 	asr.w	ip, r1, r3
   c2278:	fa0c f303 	lsl.w	r3, ip, r3
   c227c:	1acb      	subs	r3, r1, r3
   c227e:	f1c0 0207 	rsb	r2, r0, #7
   c2282:	ee19 1a90 	vmov	r1, s19
   c2286:	fa43 f202 	asr.w	r2, r3, r2
   c228a:	4461      	add	r1, ip
   c228c:	2a00      	cmp	r2, #0
   c228e:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2292:	ee09 1a90 	vmov	s19, r1
   c2296:	dc69      	bgt.n	c236c <__kernel_rem_pio2f+0x258>
   c2298:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c22a0:	f040 80c1 	bne.w	c2426 <__kernel_rem_pio2f+0x312>
   c22a4:	9b00      	ldr	r3, [sp, #0]
   c22a6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c22aa:	455b      	cmp	r3, fp
   c22ac:	dc10      	bgt.n	c22d0 <__kernel_rem_pio2f+0x1bc>
   c22ae:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c22b2:	3b01      	subs	r3, #1
   c22b4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c22b8:	2100      	movs	r1, #0
   c22ba:	4694      	mov	ip, r2
   c22bc:	f853 2904 	ldr.w	r2, [r3], #-4
   c22c0:	454b      	cmp	r3, r9
   c22c2:	ea41 0102 	orr.w	r1, r1, r2
   c22c6:	d1f9      	bne.n	c22bc <__kernel_rem_pio2f+0x1a8>
   c22c8:	4662      	mov	r2, ip
   c22ca:	2900      	cmp	r1, #0
   c22cc:	f040 80f3 	bne.w	c24b6 <__kernel_rem_pio2f+0x3a2>
   c22d0:	9b00      	ldr	r3, [sp, #0]
   c22d2:	3b01      	subs	r3, #1
   c22d4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c22d8:	2b00      	cmp	r3, #0
   c22da:	f040 80e8 	bne.w	c24ae <__kernel_rem_pio2f+0x39a>
   c22de:	9b04      	ldr	r3, [sp, #16]
   c22e0:	f04f 0c01 	mov.w	ip, #1
   c22e4:	f853 2904 	ldr.w	r2, [r3], #-4
   c22e8:	f10c 0c01 	add.w	ip, ip, #1
   c22ec:	2a00      	cmp	r2, #0
   c22ee:	d0f9      	beq.n	c22e4 <__kernel_rem_pio2f+0x1d0>
   c22f0:	1c6b      	adds	r3, r5, #1
   c22f2:	44ac      	add	ip, r5
   c22f4:	469e      	mov	lr, r3
   c22f6:	9a03      	ldr	r2, [sp, #12]
   c22f8:	1951      	adds	r1, r2, r5
   c22fa:	9a02      	ldr	r2, [sp, #8]
   c22fc:	eb02 0b03 	add.w	fp, r2, r3
   c2300:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2304:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2306:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c230a:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c230e:	ab1e      	add	r3, sp, #120	; 0x78
   c2310:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2314:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2318:	eddb 7a01 	vldr	s15, [fp, #4]
   c231c:	ed9f 7a26 	vldr	s14, [pc, #152]	; c23b8 <__kernel_rem_pio2f+0x2a4>
   c2320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2324:	f1b8 0f00 	cmp.w	r8, #0
   c2328:	f10b 0b04 	add.w	fp, fp, #4
   c232c:	edc1 7a00 	vstr	s15, [r1]
   c2330:	460a      	mov	r2, r1
   c2332:	f101 0104 	add.w	r1, r1, #4
   c2336:	db09      	blt.n	c234c <__kernel_rem_pio2f+0x238>
   c2338:	4653      	mov	r3, sl
   c233a:	e001      	b.n	c2340 <__kernel_rem_pio2f+0x22c>
   c233c:	ed72 7a01 	vldmdb	r2!, {s15}
   c2340:	ecf3 6a01 	vldmia	r3!, {s13}
   c2344:	42a3      	cmp	r3, r4
   c2346:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c234a:	d1f7      	bne.n	c233c <__kernel_rem_pio2f+0x228>
   c234c:	f10e 0e01 	add.w	lr, lr, #1
   c2350:	45e6      	cmp	lr, ip
   c2352:	eca5 7a01 	vstmia	r5!, {s14}
   c2356:	dddf      	ble.n	c2318 <__kernel_rem_pio2f+0x204>
   c2358:	4665      	mov	r5, ip
   c235a:	e74d      	b.n	c21f8 <__kernel_rem_pio2f+0xe4>
   c235c:	f040 809d 	bne.w	c249a <__kernel_rem_pio2f+0x386>
   c2360:	1e6b      	subs	r3, r5, #1
   c2362:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2366:	1212      	asrs	r2, r2, #8
   c2368:	2a00      	cmp	r2, #0
   c236a:	dd95      	ble.n	c2298 <__kernel_rem_pio2f+0x184>
   c236c:	ee19 3a90 	vmov	r3, s19
   c2370:	2d00      	cmp	r5, #0
   c2372:	f103 0301 	add.w	r3, r3, #1
   c2376:	ee09 3a90 	vmov	s19, r3
   c237a:	f340 8196 	ble.w	c26aa <__kernel_rem_pio2f+0x596>
   c237e:	6839      	ldr	r1, [r7, #0]
   c2380:	2900      	cmp	r1, #0
   c2382:	f040 8080 	bne.w	c2486 <__kernel_rem_pio2f+0x372>
   c2386:	2d01      	cmp	r5, #1
   c2388:	d026      	beq.n	c23d8 <__kernel_rem_pio2f+0x2c4>
   c238a:	463b      	mov	r3, r7
   c238c:	f04f 0c01 	mov.w	ip, #1
   c2390:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2394:	2900      	cmp	r1, #0
   c2396:	d07a      	beq.n	c248e <__kernel_rem_pio2f+0x37a>
   c2398:	f10c 0301 	add.w	r3, ip, #1
   c239c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c23a0:	429d      	cmp	r5, r3
   c23a2:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c23a6:	dd16      	ble.n	c23d6 <__kernel_rem_pio2f+0x2c2>
   c23a8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c23ac:	44bb      	add	fp, r7
   c23ae:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c23b2:	e00a      	b.n	c23ca <__kernel_rem_pio2f+0x2b6>
   c23b4:	000c7874 	.word	0x000c7874
   c23b8:	00000000 	.word	0x00000000
   c23bc:	43800000 	.word	0x43800000
   c23c0:	3b800000 	.word	0x3b800000
   c23c4:	3fc90000 	.word	0x3fc90000
   c23c8:	6819      	ldr	r1, [r3, #0]
   c23ca:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c23ce:	f843 1b04 	str.w	r1, [r3], #4
   c23d2:	455b      	cmp	r3, fp
   c23d4:	d1f8      	bne.n	c23c8 <__kernel_rem_pio2f+0x2b4>
   c23d6:	2101      	movs	r1, #1
   c23d8:	2800      	cmp	r0, #0
   c23da:	dd0c      	ble.n	c23f6 <__kernel_rem_pio2f+0x2e2>
   c23dc:	2801      	cmp	r0, #1
   c23de:	f000 8145 	beq.w	c266c <__kernel_rem_pio2f+0x558>
   c23e2:	2802      	cmp	r0, #2
   c23e4:	d107      	bne.n	c23f6 <__kernel_rem_pio2f+0x2e2>
   c23e6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c23ea:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c23ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c23f2:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c23f6:	2a02      	cmp	r2, #2
   c23f8:	f47f af4e 	bne.w	c2298 <__kernel_rem_pio2f+0x184>
   c23fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2400:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2404:	2900      	cmp	r1, #0
   c2406:	f43f af47 	beq.w	c2298 <__kernel_rem_pio2f+0x184>
   c240a:	9209      	str	r2, [sp, #36]	; 0x24
   c240c:	9001      	str	r0, [sp, #4]
   c240e:	f000 fcd5 	bl	c2dbc <scalbnf>
   c2412:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2416:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c2418:	9801      	ldr	r0, [sp, #4]
   c241a:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2422:	f43f af3f 	beq.w	c22a4 <__kernel_rem_pio2f+0x190>
   c2426:	9202      	str	r2, [sp, #8]
   c2428:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c242c:	eeb0 0a48 	vmov.f32	s0, s16
   c2430:	1a98      	subs	r0, r3, r2
   c2432:	9501      	str	r5, [sp, #4]
   c2434:	9d00      	ldr	r5, [sp, #0]
   c2436:	f000 fcc1 	bl	c2dbc <scalbnf>
   c243a:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c23bc <__kernel_rem_pio2f+0x2a8>
   c243e:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c2442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2446:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c244a:	f2c0 8156 	blt.w	c26fa <__kernel_rem_pio2f+0x5e6>
   c244e:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c23c0 <__kernel_rem_pio2f+0x2ac>
   c2452:	9905      	ldr	r1, [sp, #20]
   c2454:	ee60 7a27 	vmul.f32	s15, s0, s15
   c2458:	3108      	adds	r1, #8
   c245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c245e:	9105      	str	r1, [sp, #20]
   c2460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2464:	f103 0b01 	add.w	fp, r3, #1
   c2468:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c246c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2470:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c2474:	ee10 1a10 	vmov	r1, s0
   c2478:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c247c:	ee17 3a90 	vmov	r3, s15
   c2480:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c2484:	e02e      	b.n	c24e4 <__kernel_rem_pio2f+0x3d0>
   c2486:	2301      	movs	r3, #1
   c2488:	f04f 0c00 	mov.w	ip, #0
   c248c:	e786      	b.n	c239c <__kernel_rem_pio2f+0x288>
   c248e:	f10c 0c01 	add.w	ip, ip, #1
   c2492:	45ac      	cmp	ip, r5
   c2494:	f47f af7c 	bne.w	c2390 <__kernel_rem_pio2f+0x27c>
   c2498:	e79e      	b.n	c23d8 <__kernel_rem_pio2f+0x2c4>
   c249a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c249e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c24a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24a6:	f280 80ef 	bge.w	c2688 <__kernel_rem_pio2f+0x574>
   c24aa:	2200      	movs	r2, #0
   c24ac:	e6f4      	b.n	c2298 <__kernel_rem_pio2f+0x184>
   c24ae:	1c6b      	adds	r3, r5, #1
   c24b0:	469e      	mov	lr, r3
   c24b2:	469c      	mov	ip, r3
   c24b4:	e71f      	b.n	c22f6 <__kernel_rem_pio2f+0x1e2>
   c24b6:	9905      	ldr	r1, [sp, #20]
   c24b8:	f1a1 0008 	sub.w	r0, r1, #8
   c24bc:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c24c0:	9005      	str	r0, [sp, #20]
   c24c2:	462b      	mov	r3, r5
   c24c4:	9d00      	ldr	r5, [sp, #0]
   c24c6:	b969      	cbnz	r1, c24e4 <__kernel_rem_pio2f+0x3d0>
   c24c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c24cc:	3b02      	subs	r3, #2
   c24ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c24d2:	4601      	mov	r1, r0
   c24d4:	f853 0904 	ldr.w	r0, [r3], #-4
   c24d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c24dc:	3908      	subs	r1, #8
   c24de:	2800      	cmp	r0, #0
   c24e0:	d0f8      	beq.n	c24d4 <__kernel_rem_pio2f+0x3c0>
   c24e2:	9105      	str	r1, [sp, #20]
   c24e4:	9805      	ldr	r0, [sp, #20]
   c24e6:	9200      	str	r2, [sp, #0]
   c24e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c24ec:	f000 fc66 	bl	c2dbc <scalbnf>
   c24f0:	f1bb 0f00 	cmp.w	fp, #0
   c24f4:	9a00      	ldr	r2, [sp, #0]
   c24f6:	f2c0 8125 	blt.w	c2744 <__kernel_rem_pio2f+0x630>
   c24fa:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c24fe:	ab46      	add	r3, sp, #280	; 0x118
   c2500:	eb03 060e 	add.w	r6, r3, lr
   c2504:	f10e 0c04 	add.w	ip, lr, #4
   c2508:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c23c0 <__kernel_rem_pio2f+0x2ac>
   c250c:	eb07 030c 	add.w	r3, r7, ip
   c2510:	1d31      	adds	r1, r6, #4
   c2512:	ed73 7a01 	vldmdb	r3!, {s15}
   c2516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c251a:	42bb      	cmp	r3, r7
   c251c:	ee67 7a80 	vmul.f32	s15, s15, s0
   c2520:	ee20 0a07 	vmul.f32	s0, s0, s14
   c2524:	ed61 7a01 	vstmdb	r1!, {s15}
   c2528:	d1f3      	bne.n	c2512 <__kernel_rem_pio2f+0x3fe>
   c252a:	2d00      	cmp	r5, #0
   c252c:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c23c4 <__kernel_rem_pio2f+0x2b0>
   c2530:	f04f 0400 	mov.w	r4, #0
   c2534:	db20      	blt.n	c2578 <__kernel_rem_pio2f+0x464>
   c2536:	4892      	ldr	r0, [pc, #584]	; (c2780 <__kernel_rem_pio2f+0x66c>)
   c2538:	eddf 7a92 	vldr	s15, [pc, #584]	; c2784 <__kernel_rem_pio2f+0x670>
   c253c:	eeb0 7a46 	vmov.f32	s14, s12
   c2540:	4631      	mov	r1, r6
   c2542:	2300      	movs	r3, #0
   c2544:	e003      	b.n	c254e <__kernel_rem_pio2f+0x43a>
   c2546:	429c      	cmp	r4, r3
   c2548:	db08      	blt.n	c255c <__kernel_rem_pio2f+0x448>
   c254a:	ecb0 7a01 	vldmia	r0!, {s14}
   c254e:	ecf1 6a01 	vldmia	r1!, {s13}
   c2552:	3301      	adds	r3, #1
   c2554:	429d      	cmp	r5, r3
   c2556:	eee6 7a87 	vfma.f32	s15, s13, s14
   c255a:	daf4      	bge.n	c2546 <__kernel_rem_pio2f+0x432>
   c255c:	ab5a      	add	r3, sp, #360	; 0x168
   c255e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c2562:	45a3      	cmp	fp, r4
   c2564:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c2568:	f1a6 0604 	sub.w	r6, r6, #4
   c256c:	f104 0301 	add.w	r3, r4, #1
   c2570:	d005      	beq.n	c257e <__kernel_rem_pio2f+0x46a>
   c2572:	2d00      	cmp	r5, #0
   c2574:	461c      	mov	r4, r3
   c2576:	dade      	bge.n	c2536 <__kernel_rem_pio2f+0x422>
   c2578:	eddf 7a82 	vldr	s15, [pc, #520]	; c2784 <__kernel_rem_pio2f+0x670>
   c257c:	e7ee      	b.n	c255c <__kernel_rem_pio2f+0x448>
   c257e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2580:	2902      	cmp	r1, #2
   c2582:	dc1c      	bgt.n	c25be <__kernel_rem_pio2f+0x4aa>
   c2584:	2900      	cmp	r1, #0
   c2586:	f300 8092 	bgt.w	c26ae <__kernel_rem_pio2f+0x59a>
   c258a:	d10f      	bne.n	c25ac <__kernel_rem_pio2f+0x498>
   c258c:	ab32      	add	r3, sp, #200	; 0xc8
   c258e:	eddf 7a7d 	vldr	s15, [pc, #500]	; c2784 <__kernel_rem_pio2f+0x670>
   c2592:	449c      	add	ip, r3
   c2594:	ed3c 7a01 	vldmdb	ip!, {s14}
   c2598:	4563      	cmp	r3, ip
   c259a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c259e:	d1f9      	bne.n	c2594 <__kernel_rem_pio2f+0x480>
   c25a0:	b10a      	cbz	r2, c25a6 <__kernel_rem_pio2f+0x492>
   c25a2:	eef1 7a67 	vneg.f32	s15, s15
   c25a6:	9b06      	ldr	r3, [sp, #24]
   c25a8:	edc3 7a00 	vstr	s15, [r3]
   c25ac:	ee19 3a90 	vmov	r3, s19
   c25b0:	f003 0007 	and.w	r0, r3, #7
   c25b4:	b05b      	add	sp, #364	; 0x16c
   c25b6:	ecbd 8b04 	vpop	{d8-d9}
   c25ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c25be:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c25c0:	2b03      	cmp	r3, #3
   c25c2:	d1f3      	bne.n	c25ac <__kernel_rem_pio2f+0x498>
   c25c4:	f1bb 0f00 	cmp.w	fp, #0
   c25c8:	f000 80d1 	beq.w	c276e <__kernel_rem_pio2f+0x65a>
   c25cc:	ab5a      	add	r3, sp, #360	; 0x168
   c25ce:	4473      	add	r3, lr
   c25d0:	a932      	add	r1, sp, #200	; 0xc8
   c25d2:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c25d6:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c25da:	ed73 7a01 	vldmdb	r3!, {s15}
   c25de:	eef0 6a47 	vmov.f32	s13, s14
   c25e2:	ee37 7a27 	vadd.f32	s14, s14, s15
   c25e6:	4299      	cmp	r1, r3
   c25e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c25ec:	ed83 7a00 	vstr	s14, [r3]
   c25f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c25f4:	edc3 7a01 	vstr	s15, [r3, #4]
   c25f8:	d1ef      	bne.n	c25da <__kernel_rem_pio2f+0x4c6>
   c25fa:	f1bb 0f01 	cmp.w	fp, #1
   c25fe:	f340 80b6 	ble.w	c276e <__kernel_rem_pio2f+0x65a>
   c2602:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2606:	ab5a      	add	r3, sp, #360	; 0x168
   c2608:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c260c:	449e      	add	lr, r3
   c260e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c2612:	f10b 0304 	add.w	r3, fp, #4
   c2616:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c261a:	440b      	add	r3, r1
   c261c:	a833      	add	r0, sp, #204	; 0xcc
   c261e:	ed73 7a01 	vldmdb	r3!, {s15}
   c2622:	eef0 6a47 	vmov.f32	s13, s14
   c2626:	ee37 7a27 	vadd.f32	s14, s14, s15
   c262a:	4298      	cmp	r0, r3
   c262c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2630:	ed83 7a00 	vstr	s14, [r3]
   c2634:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c2638:	edc3 7a01 	vstr	s15, [r3, #4]
   c263c:	d1ef      	bne.n	c261e <__kernel_rem_pio2f+0x50a>
   c263e:	f10b 0b08 	add.w	fp, fp, #8
   c2642:	eddf 7a50 	vldr	s15, [pc, #320]	; c2784 <__kernel_rem_pio2f+0x670>
   c2646:	eb01 030b 	add.w	r3, r1, fp
   c264a:	3108      	adds	r1, #8
   c264c:	ed33 7a01 	vldmdb	r3!, {s14}
   c2650:	4299      	cmp	r1, r3
   c2652:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2656:	d1f9      	bne.n	c264c <__kernel_rem_pio2f+0x538>
   c2658:	2a00      	cmp	r2, #0
   c265a:	d156      	bne.n	c270a <__kernel_rem_pio2f+0x5f6>
   c265c:	9906      	ldr	r1, [sp, #24]
   c265e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c2660:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c2662:	600a      	str	r2, [r1, #0]
   c2664:	604b      	str	r3, [r1, #4]
   c2666:	edc1 7a02 	vstr	s15, [r1, #8]
   c266a:	e79f      	b.n	c25ac <__kernel_rem_pio2f+0x498>
   c266c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2670:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c2678:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c267c:	e6bb      	b.n	c23f6 <__kernel_rem_pio2f+0x2e2>
   c267e:	2308      	movs	r3, #8
   c2680:	9307      	str	r3, [sp, #28]
   c2682:	2300      	movs	r3, #0
   c2684:	9302      	str	r3, [sp, #8]
   c2686:	e561      	b.n	c214c <__kernel_rem_pio2f+0x38>
   c2688:	ee19 3a90 	vmov	r3, s19
   c268c:	2d00      	cmp	r5, #0
   c268e:	f103 0301 	add.w	r3, r3, #1
   c2692:	ee09 3a90 	vmov	s19, r3
   c2696:	bfc8      	it	gt
   c2698:	2202      	movgt	r2, #2
   c269a:	f73f ae70 	bgt.w	c237e <__kernel_rem_pio2f+0x26a>
   c269e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c26a2:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c26a6:	2202      	movs	r2, #2
   c26a8:	e5f6      	b.n	c2298 <__kernel_rem_pio2f+0x184>
   c26aa:	2100      	movs	r1, #0
   c26ac:	e694      	b.n	c23d8 <__kernel_rem_pio2f+0x2c4>
   c26ae:	a932      	add	r1, sp, #200	; 0xc8
   c26b0:	eddf 7a34 	vldr	s15, [pc, #208]	; c2784 <__kernel_rem_pio2f+0x670>
   c26b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c26b8:	ed33 7a01 	vldmdb	r3!, {s14}
   c26bc:	4299      	cmp	r1, r3
   c26be:	ee77 7a87 	vadd.f32	s15, s15, s14
   c26c2:	d1f9      	bne.n	c26b8 <__kernel_rem_pio2f+0x5a4>
   c26c4:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c26c8:	bb8a      	cbnz	r2, c272e <__kernel_rem_pio2f+0x61a>
   c26ca:	9b06      	ldr	r3, [sp, #24]
   c26cc:	f1bb 0f00 	cmp.w	fp, #0
   c26d0:	edc3 7a00 	vstr	s15, [r3]
   c26d4:	ee77 7a67 	vsub.f32	s15, s14, s15
   c26d8:	dd0b      	ble.n	c26f2 <__kernel_rem_pio2f+0x5de>
   c26da:	a933      	add	r1, sp, #204	; 0xcc
   c26dc:	2301      	movs	r3, #1
   c26de:	ecb1 7a01 	vldmia	r1!, {s14}
   c26e2:	3301      	adds	r3, #1
   c26e4:	459b      	cmp	fp, r3
   c26e6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c26ea:	daf8      	bge.n	c26de <__kernel_rem_pio2f+0x5ca>
   c26ec:	b10a      	cbz	r2, c26f2 <__kernel_rem_pio2f+0x5de>
   c26ee:	eef1 7a67 	vneg.f32	s15, s15
   c26f2:	9b06      	ldr	r3, [sp, #24]
   c26f4:	edc3 7a01 	vstr	s15, [r3, #4]
   c26f8:	e758      	b.n	c25ac <__kernel_rem_pio2f+0x498>
   c26fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c26fe:	469b      	mov	fp, r3
   c2700:	ee10 1a10 	vmov	r1, s0
   c2704:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c2708:	e6ec      	b.n	c24e4 <__kernel_rem_pio2f+0x3d0>
   c270a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c270e:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c2712:	9b06      	ldr	r3, [sp, #24]
   c2714:	eef1 6a66 	vneg.f32	s13, s13
   c2718:	eeb1 7a47 	vneg.f32	s14, s14
   c271c:	eef1 7a67 	vneg.f32	s15, s15
   c2720:	edc3 6a00 	vstr	s13, [r3]
   c2724:	ed83 7a01 	vstr	s14, [r3, #4]
   c2728:	edc3 7a02 	vstr	s15, [r3, #8]
   c272c:	e73e      	b.n	c25ac <__kernel_rem_pio2f+0x498>
   c272e:	9b06      	ldr	r3, [sp, #24]
   c2730:	eef1 6a67 	vneg.f32	s13, s15
   c2734:	f1bb 0f00 	cmp.w	fp, #0
   c2738:	ee77 7a67 	vsub.f32	s15, s14, s15
   c273c:	edc3 6a00 	vstr	s13, [r3]
   c2740:	dccb      	bgt.n	c26da <__kernel_rem_pio2f+0x5c6>
   c2742:	e7d4      	b.n	c26ee <__kernel_rem_pio2f+0x5da>
   c2744:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2746:	2b02      	cmp	r3, #2
   c2748:	dc0d      	bgt.n	c2766 <__kernel_rem_pio2f+0x652>
   c274a:	2b00      	cmp	r3, #0
   c274c:	dc14      	bgt.n	c2778 <__kernel_rem_pio2f+0x664>
   c274e:	f47f af2d 	bne.w	c25ac <__kernel_rem_pio2f+0x498>
   c2752:	eddf 7a0c 	vldr	s15, [pc, #48]	; c2784 <__kernel_rem_pio2f+0x670>
   c2756:	2a00      	cmp	r2, #0
   c2758:	f43f af25 	beq.w	c25a6 <__kernel_rem_pio2f+0x492>
   c275c:	e721      	b.n	c25a2 <__kernel_rem_pio2f+0x48e>
   c275e:	9b03      	ldr	r3, [sp, #12]
   c2760:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2764:	e537      	b.n	c21d6 <__kernel_rem_pio2f+0xc2>
   c2766:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c2768:	2b03      	cmp	r3, #3
   c276a:	f47f af1f 	bne.w	c25ac <__kernel_rem_pio2f+0x498>
   c276e:	eddf 7a05 	vldr	s15, [pc, #20]	; c2784 <__kernel_rem_pio2f+0x670>
   c2772:	2a00      	cmp	r2, #0
   c2774:	d1c9      	bne.n	c270a <__kernel_rem_pio2f+0x5f6>
   c2776:	e771      	b.n	c265c <__kernel_rem_pio2f+0x548>
   c2778:	eddf 7a02 	vldr	s15, [pc, #8]	; c2784 <__kernel_rem_pio2f+0x670>
   c277c:	e7a2      	b.n	c26c4 <__kernel_rem_pio2f+0x5b0>
   c277e:	bf00      	nop
   c2780:	000c784c 	.word	0x000c784c
   c2784:	00000000 	.word	0x00000000

000c2788 <__kernel_sinf>:
   c2788:	ee10 3a10 	vmov	r3, s0
   c278c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2790:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2794:	da04      	bge.n	c27a0 <__kernel_sinf+0x18>
   c2796:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c279a:	ee17 3a90 	vmov	r3, s15
   c279e:	b35b      	cbz	r3, c27f8 <__kernel_sinf+0x70>
   c27a0:	ee60 7a00 	vmul.f32	s15, s0, s0
   c27a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; c27fc <__kernel_sinf+0x74>
   c27a8:	eddf 5a15 	vldr	s11, [pc, #84]	; c2800 <__kernel_sinf+0x78>
   c27ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; c2804 <__kernel_sinf+0x7c>
   c27b0:	eddf 6a15 	vldr	s13, [pc, #84]	; c2808 <__kernel_sinf+0x80>
   c27b4:	eee7 5a87 	vfma.f32	s11, s15, s14
   c27b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; c280c <__kernel_sinf+0x84>
   c27bc:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c27c0:	ee20 5a27 	vmul.f32	s10, s0, s15
   c27c4:	eee6 6a27 	vfma.f32	s13, s12, s15
   c27c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c27cc:	b930      	cbnz	r0, c27dc <__kernel_sinf+0x54>
   c27ce:	eddf 6a10 	vldr	s13, [pc, #64]	; c2810 <__kernel_sinf+0x88>
   c27d2:	eee7 6a87 	vfma.f32	s13, s15, s14
   c27d6:	eea6 0a85 	vfma.f32	s0, s13, s10
   c27da:	4770      	bx	lr
   c27dc:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c27e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c27e4:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c27e8:	eddf 6a0a 	vldr	s13, [pc, #40]	; c2814 <__kernel_sinf+0x8c>
   c27ec:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c27f0:	eee5 0a26 	vfma.f32	s1, s10, s13
   c27f4:	ee30 0a60 	vsub.f32	s0, s0, s1
   c27f8:	4770      	bx	lr
   c27fa:	bf00      	nop
   c27fc:	2f2ec9d3 	.word	0x2f2ec9d3
   c2800:	b2d72f34 	.word	0xb2d72f34
   c2804:	3638ef1b 	.word	0x3638ef1b
   c2808:	b9500d01 	.word	0xb9500d01
   c280c:	3c088889 	.word	0x3c088889
   c2810:	be2aaaab 	.word	0xbe2aaaab
   c2814:	3e2aaaab 	.word	0x3e2aaaab

000c2818 <atan>:
   c2818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c281c:	ec55 4b10 	vmov	r4, r5, d0
   c2820:	4bc3      	ldr	r3, [pc, #780]	; (c2b30 <atan+0x318>)
   c2822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c2826:	429e      	cmp	r6, r3
   c2828:	46aa      	mov	sl, r5
   c282a:	dd17      	ble.n	c285c <atan+0x44>
   c282c:	4bc1      	ldr	r3, [pc, #772]	; (c2b34 <atan+0x31c>)
   c282e:	429e      	cmp	r6, r3
   c2830:	dc0a      	bgt.n	c2848 <atan+0x30>
   c2832:	d007      	beq.n	c2844 <atan+0x2c>
   c2834:	f1ba 0f00 	cmp.w	sl, #0
   c2838:	f340 80cb 	ble.w	c29d2 <atan+0x1ba>
   c283c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c2ac0 <atan+0x2a8>
   c2840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2844:	2c00      	cmp	r4, #0
   c2846:	d0f5      	beq.n	c2834 <atan+0x1c>
   c2848:	4622      	mov	r2, r4
   c284a:	462b      	mov	r3, r5
   c284c:	4620      	mov	r0, r4
   c284e:	4629      	mov	r1, r5
   c2850:	f000 fb2c 	bl	c2eac <__adddf3>
   c2854:	ec41 0b10 	vmov	d0, r0, r1
   c2858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c285c:	4bb6      	ldr	r3, [pc, #728]	; (c2b38 <atan+0x320>)
   c285e:	429e      	cmp	r6, r3
   c2860:	f300 80bb 	bgt.w	c29da <atan+0x1c2>
   c2864:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c2868:	429e      	cmp	r6, r3
   c286a:	f340 80a0 	ble.w	c29ae <atan+0x196>
   c286e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c2872:	4622      	mov	r2, r4
   c2874:	462b      	mov	r3, r5
   c2876:	4620      	mov	r0, r4
   c2878:	4629      	mov	r1, r5
   c287a:	f000 fccd 	bl	c3218 <__aeabi_dmul>
   c287e:	4602      	mov	r2, r0
   c2880:	460b      	mov	r3, r1
   c2882:	4680      	mov	r8, r0
   c2884:	4689      	mov	r9, r1
   c2886:	f000 fcc7 	bl	c3218 <__aeabi_dmul>
   c288a:	a38f      	add	r3, pc, #572	; (adr r3, c2ac8 <atan+0x2b0>)
   c288c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2890:	4606      	mov	r6, r0
   c2892:	460f      	mov	r7, r1
   c2894:	f000 fcc0 	bl	c3218 <__aeabi_dmul>
   c2898:	a38d      	add	r3, pc, #564	; (adr r3, c2ad0 <atan+0x2b8>)
   c289a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c289e:	f000 fb05 	bl	c2eac <__adddf3>
   c28a2:	4632      	mov	r2, r6
   c28a4:	463b      	mov	r3, r7
   c28a6:	f000 fcb7 	bl	c3218 <__aeabi_dmul>
   c28aa:	a38b      	add	r3, pc, #556	; (adr r3, c2ad8 <atan+0x2c0>)
   c28ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28b0:	f000 fafc 	bl	c2eac <__adddf3>
   c28b4:	4632      	mov	r2, r6
   c28b6:	463b      	mov	r3, r7
   c28b8:	f000 fcae 	bl	c3218 <__aeabi_dmul>
   c28bc:	a388      	add	r3, pc, #544	; (adr r3, c2ae0 <atan+0x2c8>)
   c28be:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28c2:	f000 faf3 	bl	c2eac <__adddf3>
   c28c6:	4632      	mov	r2, r6
   c28c8:	463b      	mov	r3, r7
   c28ca:	f000 fca5 	bl	c3218 <__aeabi_dmul>
   c28ce:	a386      	add	r3, pc, #536	; (adr r3, c2ae8 <atan+0x2d0>)
   c28d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28d4:	f000 faea 	bl	c2eac <__adddf3>
   c28d8:	4632      	mov	r2, r6
   c28da:	463b      	mov	r3, r7
   c28dc:	f000 fc9c 	bl	c3218 <__aeabi_dmul>
   c28e0:	a383      	add	r3, pc, #524	; (adr r3, c2af0 <atan+0x2d8>)
   c28e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28e6:	f000 fae1 	bl	c2eac <__adddf3>
   c28ea:	4642      	mov	r2, r8
   c28ec:	464b      	mov	r3, r9
   c28ee:	f000 fc93 	bl	c3218 <__aeabi_dmul>
   c28f2:	a381      	add	r3, pc, #516	; (adr r3, c2af8 <atan+0x2e0>)
   c28f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c28f8:	4680      	mov	r8, r0
   c28fa:	4689      	mov	r9, r1
   c28fc:	4630      	mov	r0, r6
   c28fe:	4639      	mov	r1, r7
   c2900:	f000 fc8a 	bl	c3218 <__aeabi_dmul>
   c2904:	a37e      	add	r3, pc, #504	; (adr r3, c2b00 <atan+0x2e8>)
   c2906:	e9d3 2300 	ldrd	r2, r3, [r3]
   c290a:	f000 facd 	bl	c2ea8 <__aeabi_dsub>
   c290e:	4632      	mov	r2, r6
   c2910:	463b      	mov	r3, r7
   c2912:	f000 fc81 	bl	c3218 <__aeabi_dmul>
   c2916:	a37c      	add	r3, pc, #496	; (adr r3, c2b08 <atan+0x2f0>)
   c2918:	e9d3 2300 	ldrd	r2, r3, [r3]
   c291c:	f000 fac4 	bl	c2ea8 <__aeabi_dsub>
   c2920:	4632      	mov	r2, r6
   c2922:	463b      	mov	r3, r7
   c2924:	f000 fc78 	bl	c3218 <__aeabi_dmul>
   c2928:	a379      	add	r3, pc, #484	; (adr r3, c2b10 <atan+0x2f8>)
   c292a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c292e:	f000 fabb 	bl	c2ea8 <__aeabi_dsub>
   c2932:	4632      	mov	r2, r6
   c2934:	463b      	mov	r3, r7
   c2936:	f000 fc6f 	bl	c3218 <__aeabi_dmul>
   c293a:	a377      	add	r3, pc, #476	; (adr r3, c2b18 <atan+0x300>)
   c293c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2940:	f000 fab2 	bl	c2ea8 <__aeabi_dsub>
   c2944:	4632      	mov	r2, r6
   c2946:	463b      	mov	r3, r7
   c2948:	f000 fc66 	bl	c3218 <__aeabi_dmul>
   c294c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c2950:	4602      	mov	r2, r0
   c2952:	460b      	mov	r3, r1
   c2954:	4640      	mov	r0, r8
   c2956:	4649      	mov	r1, r9
   c2958:	d062      	beq.n	c2a20 <atan+0x208>
   c295a:	f000 faa7 	bl	c2eac <__adddf3>
   c295e:	4e77      	ldr	r6, [pc, #476]	; (c2b3c <atan+0x324>)
   c2960:	4622      	mov	r2, r4
   c2962:	462b      	mov	r3, r5
   c2964:	f000 fc58 	bl	c3218 <__aeabi_dmul>
   c2968:	4b75      	ldr	r3, [pc, #468]	; (c2b40 <atan+0x328>)
   c296a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c296e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c2972:	449b      	add	fp, r3
   c2974:	e9db 2300 	ldrd	r2, r3, [fp]
   c2978:	f000 fa96 	bl	c2ea8 <__aeabi_dsub>
   c297c:	4622      	mov	r2, r4
   c297e:	462b      	mov	r3, r5
   c2980:	f000 fa92 	bl	c2ea8 <__aeabi_dsub>
   c2984:	4602      	mov	r2, r0
   c2986:	460b      	mov	r3, r1
   c2988:	e9d6 0100 	ldrd	r0, r1, [r6]
   c298c:	f000 fa8c 	bl	c2ea8 <__aeabi_dsub>
   c2990:	f1ba 0f00 	cmp.w	sl, #0
   c2994:	ec41 0b10 	vmov	d0, r0, r1
   c2998:	f6bf af5e 	bge.w	c2858 <atan+0x40>
   c299c:	ee10 1a90 	vmov	r1, s1
   c29a0:	4602      	mov	r2, r0
   c29a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c29a6:	ec43 2b10 	vmov	d0, r2, r3
   c29aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c29ae:	a35c      	add	r3, pc, #368	; (adr r3, c2b20 <atan+0x308>)
   c29b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c29b4:	ee10 0a10 	vmov	r0, s0
   c29b8:	4629      	mov	r1, r5
   c29ba:	f000 fa77 	bl	c2eac <__adddf3>
   c29be:	4b61      	ldr	r3, [pc, #388]	; (c2b44 <atan+0x32c>)
   c29c0:	2200      	movs	r2, #0
   c29c2:	f000 feb9 	bl	c3738 <__aeabi_dcmpgt>
   c29c6:	2800      	cmp	r0, #0
   c29c8:	f43f af51 	beq.w	c286e <atan+0x56>
   c29cc:	ec45 4b10 	vmov	d0, r4, r5
   c29d0:	e742      	b.n	c2858 <atan+0x40>
   c29d2:	ed9f 0b55 	vldr	d0, [pc, #340]	; c2b28 <atan+0x310>
   c29d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c29da:	f000 f8bd 	bl	c2b58 <fabs>
   c29de:	4b5a      	ldr	r3, [pc, #360]	; (c2b48 <atan+0x330>)
   c29e0:	429e      	cmp	r6, r3
   c29e2:	ec55 4b10 	vmov	r4, r5, d0
   c29e6:	dc2b      	bgt.n	c2a40 <atan+0x228>
   c29e8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c29ec:	429e      	cmp	r6, r3
   c29ee:	dc56      	bgt.n	c2a9e <atan+0x286>
   c29f0:	ee10 2a10 	vmov	r2, s0
   c29f4:	462b      	mov	r3, r5
   c29f6:	ee10 0a10 	vmov	r0, s0
   c29fa:	4629      	mov	r1, r5
   c29fc:	f000 fa56 	bl	c2eac <__adddf3>
   c2a00:	4b50      	ldr	r3, [pc, #320]	; (c2b44 <atan+0x32c>)
   c2a02:	2200      	movs	r2, #0
   c2a04:	f000 fa50 	bl	c2ea8 <__aeabi_dsub>
   c2a08:	4602      	mov	r2, r0
   c2a0a:	460b      	mov	r3, r1
   c2a0c:	4620      	mov	r0, r4
   c2a0e:	4629      	mov	r1, r5
   c2a10:	4614      	mov	r4, r2
   c2a12:	461d      	mov	r5, r3
   c2a14:	f04f 0b00 	mov.w	fp, #0
   c2a18:	2200      	movs	r2, #0
   c2a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c2a1e:	e027      	b.n	c2a70 <atan+0x258>
   c2a20:	f000 fa44 	bl	c2eac <__adddf3>
   c2a24:	4622      	mov	r2, r4
   c2a26:	462b      	mov	r3, r5
   c2a28:	f000 fbf6 	bl	c3218 <__aeabi_dmul>
   c2a2c:	4602      	mov	r2, r0
   c2a2e:	460b      	mov	r3, r1
   c2a30:	4620      	mov	r0, r4
   c2a32:	4629      	mov	r1, r5
   c2a34:	f000 fa38 	bl	c2ea8 <__aeabi_dsub>
   c2a38:	ec41 0b10 	vmov	d0, r0, r1
   c2a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2a40:	4b42      	ldr	r3, [pc, #264]	; (c2b4c <atan+0x334>)
   c2a42:	429e      	cmp	r6, r3
   c2a44:	da1f      	bge.n	c2a86 <atan+0x26e>
   c2a46:	4b42      	ldr	r3, [pc, #264]	; (c2b50 <atan+0x338>)
   c2a48:	2200      	movs	r2, #0
   c2a4a:	4629      	mov	r1, r5
   c2a4c:	ee10 0a10 	vmov	r0, s0
   c2a50:	f000 fa2a 	bl	c2ea8 <__aeabi_dsub>
   c2a54:	4602      	mov	r2, r0
   c2a56:	460b      	mov	r3, r1
   c2a58:	4620      	mov	r0, r4
   c2a5a:	4629      	mov	r1, r5
   c2a5c:	4614      	mov	r4, r2
   c2a5e:	461d      	mov	r5, r3
   c2a60:	2200      	movs	r2, #0
   c2a62:	4b3b      	ldr	r3, [pc, #236]	; (c2b50 <atan+0x338>)
   c2a64:	f04f 0b02 	mov.w	fp, #2
   c2a68:	f000 fbd6 	bl	c3218 <__aeabi_dmul>
   c2a6c:	4b35      	ldr	r3, [pc, #212]	; (c2b44 <atan+0x32c>)
   c2a6e:	2200      	movs	r2, #0
   c2a70:	f000 fa1c 	bl	c2eac <__adddf3>
   c2a74:	4602      	mov	r2, r0
   c2a76:	460b      	mov	r3, r1
   c2a78:	4620      	mov	r0, r4
   c2a7a:	4629      	mov	r1, r5
   c2a7c:	f000 fcf6 	bl	c346c <__aeabi_ddiv>
   c2a80:	4604      	mov	r4, r0
   c2a82:	460d      	mov	r5, r1
   c2a84:	e6f5      	b.n	c2872 <atan+0x5a>
   c2a86:	462b      	mov	r3, r5
   c2a88:	4932      	ldr	r1, [pc, #200]	; (c2b54 <atan+0x33c>)
   c2a8a:	ee10 2a10 	vmov	r2, s0
   c2a8e:	2000      	movs	r0, #0
   c2a90:	f000 fcec 	bl	c346c <__aeabi_ddiv>
   c2a94:	f04f 0b03 	mov.w	fp, #3
   c2a98:	4604      	mov	r4, r0
   c2a9a:	460d      	mov	r5, r1
   c2a9c:	e6e9      	b.n	c2872 <atan+0x5a>
   c2a9e:	4b29      	ldr	r3, [pc, #164]	; (c2b44 <atan+0x32c>)
   c2aa0:	2200      	movs	r2, #0
   c2aa2:	4629      	mov	r1, r5
   c2aa4:	ee10 0a10 	vmov	r0, s0
   c2aa8:	f000 f9fe 	bl	c2ea8 <__aeabi_dsub>
   c2aac:	4602      	mov	r2, r0
   c2aae:	460b      	mov	r3, r1
   c2ab0:	4620      	mov	r0, r4
   c2ab2:	4629      	mov	r1, r5
   c2ab4:	f04f 0b01 	mov.w	fp, #1
   c2ab8:	4614      	mov	r4, r2
   c2aba:	461d      	mov	r5, r3
   c2abc:	e7d6      	b.n	c2a6c <atan+0x254>
   c2abe:	bf00      	nop
   c2ac0:	54442d18 	.word	0x54442d18
   c2ac4:	3ff921fb 	.word	0x3ff921fb
   c2ac8:	e322da11 	.word	0xe322da11
   c2acc:	3f90ad3a 	.word	0x3f90ad3a
   c2ad0:	24760deb 	.word	0x24760deb
   c2ad4:	3fa97b4b 	.word	0x3fa97b4b
   c2ad8:	a0d03d51 	.word	0xa0d03d51
   c2adc:	3fb10d66 	.word	0x3fb10d66
   c2ae0:	c54c206e 	.word	0xc54c206e
   c2ae4:	3fb745cd 	.word	0x3fb745cd
   c2ae8:	920083ff 	.word	0x920083ff
   c2aec:	3fc24924 	.word	0x3fc24924
   c2af0:	5555550d 	.word	0x5555550d
   c2af4:	3fd55555 	.word	0x3fd55555
   c2af8:	2c6a6c2f 	.word	0x2c6a6c2f
   c2afc:	bfa2b444 	.word	0xbfa2b444
   c2b00:	52defd9a 	.word	0x52defd9a
   c2b04:	3fadde2d 	.word	0x3fadde2d
   c2b08:	af749a6d 	.word	0xaf749a6d
   c2b0c:	3fb3b0f2 	.word	0x3fb3b0f2
   c2b10:	fe231671 	.word	0xfe231671
   c2b14:	3fbc71c6 	.word	0x3fbc71c6
   c2b18:	9998ebc4 	.word	0x9998ebc4
   c2b1c:	3fc99999 	.word	0x3fc99999
   c2b20:	8800759c 	.word	0x8800759c
   c2b24:	7e37e43c 	.word	0x7e37e43c
   c2b28:	54442d18 	.word	0x54442d18
   c2b2c:	bff921fb 	.word	0xbff921fb
   c2b30:	440fffff 	.word	0x440fffff
   c2b34:	7ff00000 	.word	0x7ff00000
   c2b38:	3fdbffff 	.word	0x3fdbffff
   c2b3c:	000c7880 	.word	0x000c7880
   c2b40:	000c78a0 	.word	0x000c78a0
   c2b44:	3ff00000 	.word	0x3ff00000
   c2b48:	3ff2ffff 	.word	0x3ff2ffff
   c2b4c:	40038000 	.word	0x40038000
   c2b50:	3ff80000 	.word	0x3ff80000
   c2b54:	bff00000 	.word	0xbff00000

000c2b58 <fabs>:
   c2b58:	ec51 0b10 	vmov	r0, r1, d0
   c2b5c:	ee10 2a10 	vmov	r2, s0
   c2b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c2b64:	ec43 2b10 	vmov	d0, r2, r3
   c2b68:	4770      	bx	lr
   c2b6a:	bf00      	nop

000c2b6c <atanf>:
   c2b6c:	b538      	push	{r3, r4, r5, lr}
   c2b6e:	ee10 5a10 	vmov	r5, s0
   c2b72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c2b76:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c2b7a:	eef0 7a40 	vmov.f32	s15, s0
   c2b7e:	db0b      	blt.n	c2b98 <atanf+0x2c>
   c2b80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2b84:	dc5b      	bgt.n	c2c3e <atanf+0xd2>
   c2b86:	eddf 7a53 	vldr	s15, [pc, #332]	; c2cd4 <atanf+0x168>
   c2b8a:	ed9f 0a53 	vldr	s0, [pc, #332]	; c2cd8 <atanf+0x16c>
   c2b8e:	2d00      	cmp	r5, #0
   c2b90:	bfc8      	it	gt
   c2b92:	eeb0 0a67 	vmovgt.f32	s0, s15
   c2b96:	bd38      	pop	{r3, r4, r5, pc}
   c2b98:	4b50      	ldr	r3, [pc, #320]	; (c2cdc <atanf+0x170>)
   c2b9a:	429c      	cmp	r4, r3
   c2b9c:	dc5e      	bgt.n	c2c5c <atanf+0xf0>
   c2b9e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c2ba2:	db4f      	blt.n	c2c44 <atanf+0xd8>
   c2ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2ba8:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c2bac:	eddf 4a4c 	vldr	s9, [pc, #304]	; c2ce0 <atanf+0x174>
   c2bb0:	eddf 5a4c 	vldr	s11, [pc, #304]	; c2ce4 <atanf+0x178>
   c2bb4:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c2ce8 <atanf+0x17c>
   c2bb8:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c2cec <atanf+0x180>
   c2bbc:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c2bc0:	eeb0 6a66 	vmov.f32	s12, s13
   c2bc4:	eee7 5a24 	vfma.f32	s11, s14, s9
   c2bc8:	1c5a      	adds	r2, r3, #1
   c2bca:	eddf 4a49 	vldr	s9, [pc, #292]	; c2cf0 <atanf+0x184>
   c2bce:	eddf 6a49 	vldr	s13, [pc, #292]	; c2cf4 <atanf+0x188>
   c2bd2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2bd6:	eee7 6a24 	vfma.f32	s13, s14, s9
   c2bda:	eddf 5a47 	vldr	s11, [pc, #284]	; c2cf8 <atanf+0x18c>
   c2bde:	eddf 4a47 	vldr	s9, [pc, #284]	; c2cfc <atanf+0x190>
   c2be2:	eee6 5a87 	vfma.f32	s11, s13, s14
   c2be6:	eea5 4a07 	vfma.f32	s8, s10, s14
   c2bea:	ed9f 5a45 	vldr	s10, [pc, #276]	; c2d00 <atanf+0x194>
   c2bee:	eddf 6a45 	vldr	s13, [pc, #276]	; c2d04 <atanf+0x198>
   c2bf2:	eea5 5a87 	vfma.f32	s10, s11, s14
   c2bf6:	eee4 4a07 	vfma.f32	s9, s8, s14
   c2bfa:	eddf 5a43 	vldr	s11, [pc, #268]	; c2d08 <atanf+0x19c>
   c2bfe:	eee4 6a87 	vfma.f32	s13, s9, s14
   c2c02:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2c06:	ee66 6a86 	vmul.f32	s13, s13, s12
   c2c0a:	ee25 7a87 	vmul.f32	s14, s11, s14
   c2c0e:	d03a      	beq.n	c2c86 <atanf+0x11a>
   c2c10:	4a3e      	ldr	r2, [pc, #248]	; (c2d0c <atanf+0x1a0>)
   c2c12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c2c16:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2c1a:	ed92 0a00 	vldr	s0, [r2]
   c2c1e:	4a3c      	ldr	r2, [pc, #240]	; (c2d10 <atanf+0x1a4>)
   c2c20:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c2c24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c2c28:	2d00      	cmp	r5, #0
   c2c2a:	ed93 7a00 	vldr	s14, [r3]
   c2c2e:	ee70 7a67 	vsub.f32	s15, s0, s15
   c2c32:	ee37 0a67 	vsub.f32	s0, s14, s15
   c2c36:	daae      	bge.n	c2b96 <atanf+0x2a>
   c2c38:	eeb1 0a40 	vneg.f32	s0, s0
   c2c3c:	bd38      	pop	{r3, r4, r5, pc}
   c2c3e:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2c42:	bd38      	pop	{r3, r4, r5, pc}
   c2c44:	ed9f 7a33 	vldr	s14, [pc, #204]	; c2d14 <atanf+0x1a8>
   c2c48:	ee30 7a07 	vadd.f32	s14, s0, s14
   c2c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c2c50:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c2c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2c58:	dda4      	ble.n	c2ba4 <atanf+0x38>
   c2c5a:	bd38      	pop	{r3, r4, r5, pc}
   c2c5c:	f000 f860 	bl	c2d20 <fabsf>
   c2c60:	4b2d      	ldr	r3, [pc, #180]	; (c2d18 <atanf+0x1ac>)
   c2c62:	429c      	cmp	r4, r3
   c2c64:	dc16      	bgt.n	c2c94 <atanf+0x128>
   c2c66:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c2c6a:	429c      	cmp	r4, r3
   c2c6c:	dc27      	bgt.n	c2cbe <atanf+0x152>
   c2c6e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c2c72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2c76:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2c7a:	2300      	movs	r3, #0
   c2c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2c80:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2c84:	e790      	b.n	c2ba8 <atanf+0x3c>
   c2c86:	ee76 6a87 	vadd.f32	s13, s13, s14
   c2c8a:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c2c8e:	eeb0 0a67 	vmov.f32	s0, s15
   c2c92:	bd38      	pop	{r3, r4, r5, pc}
   c2c94:	4b21      	ldr	r3, [pc, #132]	; (c2d1c <atanf+0x1b0>)
   c2c96:	429c      	cmp	r4, r3
   c2c98:	dc0b      	bgt.n	c2cb2 <atanf+0x146>
   c2c9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c2c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c2ca2:	eea0 7a27 	vfma.f32	s14, s0, s15
   c2ca6:	2302      	movs	r3, #2
   c2ca8:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2cac:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c2cb0:	e77a      	b.n	c2ba8 <atanf+0x3c>
   c2cb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c2cb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2cba:	2303      	movs	r3, #3
   c2cbc:	e774      	b.n	c2ba8 <atanf+0x3c>
   c2cbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c2cc2:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2cc6:	ee30 0a27 	vadd.f32	s0, s0, s15
   c2cca:	2301      	movs	r3, #1
   c2ccc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c2cd0:	e76a      	b.n	c2ba8 <atanf+0x3c>
   c2cd2:	bf00      	nop
   c2cd4:	3fc90fdb 	.word	0x3fc90fdb
   c2cd8:	bfc90fdb 	.word	0xbfc90fdb
   c2cdc:	3edfffff 	.word	0x3edfffff
   c2ce0:	3c8569d7 	.word	0x3c8569d7
   c2ce4:	3d4bda59 	.word	0x3d4bda59
   c2ce8:	3d886b35 	.word	0x3d886b35
   c2cec:	3dba2e6e 	.word	0x3dba2e6e
   c2cf0:	bd15a221 	.word	0xbd15a221
   c2cf4:	bd6ef16b 	.word	0xbd6ef16b
   c2cf8:	bd9d8795 	.word	0xbd9d8795
   c2cfc:	3e124925 	.word	0x3e124925
   c2d00:	bde38e38 	.word	0xbde38e38
   c2d04:	3eaaaaab 	.word	0x3eaaaaab
   c2d08:	be4ccccd 	.word	0xbe4ccccd
   c2d0c:	000c78d0 	.word	0x000c78d0
   c2d10:	000c78c0 	.word	0x000c78c0
   c2d14:	7149f2ca 	.word	0x7149f2ca
   c2d18:	3f97ffff 	.word	0x3f97ffff
   c2d1c:	401bffff 	.word	0x401bffff

000c2d20 <fabsf>:
   c2d20:	ee10 3a10 	vmov	r3, s0
   c2d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2d28:	ee00 3a10 	vmov	s0, r3
   c2d2c:	4770      	bx	lr
   c2d2e:	bf00      	nop

000c2d30 <floorf>:
   c2d30:	ee10 2a10 	vmov	r2, s0
   c2d34:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c2d38:	3b7f      	subs	r3, #127	; 0x7f
   c2d3a:	2b16      	cmp	r3, #22
   c2d3c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c2d40:	dc28      	bgt.n	c2d94 <floorf+0x64>
   c2d42:	2b00      	cmp	r3, #0
   c2d44:	db18      	blt.n	c2d78 <floorf+0x48>
   c2d46:	491a      	ldr	r1, [pc, #104]	; (c2db0 <floorf+0x80>)
   c2d48:	4119      	asrs	r1, r3
   c2d4a:	420a      	tst	r2, r1
   c2d4c:	d021      	beq.n	c2d92 <floorf+0x62>
   c2d4e:	eddf 7a19 	vldr	s15, [pc, #100]	; c2db4 <floorf+0x84>
   c2d52:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2d5e:	dd18      	ble.n	c2d92 <floorf+0x62>
   c2d60:	2a00      	cmp	r2, #0
   c2d62:	da04      	bge.n	c2d6e <floorf+0x3e>
   c2d64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c2d68:	fa40 f303 	asr.w	r3, r0, r3
   c2d6c:	441a      	add	r2, r3
   c2d6e:	ea22 0301 	bic.w	r3, r2, r1
   c2d72:	ee00 3a10 	vmov	s0, r3
   c2d76:	4770      	bx	lr
   c2d78:	eddf 7a0e 	vldr	s15, [pc, #56]	; c2db4 <floorf+0x84>
   c2d7c:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c2d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2d88:	dd03      	ble.n	c2d92 <floorf+0x62>
   c2d8a:	2a00      	cmp	r2, #0
   c2d8c:	db08      	blt.n	c2da0 <floorf+0x70>
   c2d8e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c2db8 <floorf+0x88>
   c2d92:	4770      	bx	lr
   c2d94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2d98:	d3fb      	bcc.n	c2d92 <floorf+0x62>
   c2d9a:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2d9e:	4770      	bx	lr
   c2da0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c2da4:	2900      	cmp	r1, #0
   c2da6:	bf18      	it	ne
   c2da8:	eeb0 0a67 	vmovne.f32	s0, s15
   c2dac:	4770      	bx	lr
   c2dae:	bf00      	nop
   c2db0:	007fffff 	.word	0x007fffff
   c2db4:	7149f2ca 	.word	0x7149f2ca
   c2db8:	00000000 	.word	0x00000000

000c2dbc <scalbnf>:
   c2dbc:	b082      	sub	sp, #8
   c2dbe:	ed8d 0a01 	vstr	s0, [sp, #4]
   c2dc2:	9b01      	ldr	r3, [sp, #4]
   c2dc4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c2dc8:	d02a      	beq.n	c2e20 <scalbnf+0x64>
   c2dca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c2dce:	d223      	bcs.n	c2e18 <scalbnf+0x5c>
   c2dd0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c2dd4:	d128      	bne.n	c2e28 <scalbnf+0x6c>
   c2dd6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c2dda:	eddf 7a2a 	vldr	s15, [pc, #168]	; c2e84 <scalbnf+0xc8>
   c2dde:	4b2a      	ldr	r3, [pc, #168]	; (c2e88 <scalbnf+0xcc>)
   c2de0:	ee67 7a27 	vmul.f32	s15, s14, s15
   c2de4:	4298      	cmp	r0, r3
   c2de6:	edcd 7a01 	vstr	s15, [sp, #4]
   c2dea:	db37      	blt.n	c2e5c <scalbnf+0xa0>
   c2dec:	9b01      	ldr	r3, [sp, #4]
   c2dee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c2df2:	3a19      	subs	r2, #25
   c2df4:	4402      	add	r2, r0
   c2df6:	2afe      	cmp	r2, #254	; 0xfe
   c2df8:	dd1a      	ble.n	c2e30 <scalbnf+0x74>
   c2dfa:	ed9f 0a24 	vldr	s0, [pc, #144]	; c2e8c <scalbnf+0xd0>
   c2dfe:	ed9f 7a24 	vldr	s14, [pc, #144]	; c2e90 <scalbnf+0xd4>
   c2e02:	9b01      	ldr	r3, [sp, #4]
   c2e04:	2b00      	cmp	r3, #0
   c2e06:	eef0 7a40 	vmov.f32	s15, s0
   c2e0a:	bfb8      	it	lt
   c2e0c:	eeb0 0a47 	vmovlt.f32	s0, s14
   c2e10:	ee20 0a27 	vmul.f32	s0, s0, s15
   c2e14:	b002      	add	sp, #8
   c2e16:	4770      	bx	lr
   c2e18:	ee30 0a00 	vadd.f32	s0, s0, s0
   c2e1c:	b002      	add	sp, #8
   c2e1e:	4770      	bx	lr
   c2e20:	ed9d 0a01 	vldr	s0, [sp, #4]
   c2e24:	b002      	add	sp, #8
   c2e26:	4770      	bx	lr
   c2e28:	0dd2      	lsrs	r2, r2, #23
   c2e2a:	4402      	add	r2, r0
   c2e2c:	2afe      	cmp	r2, #254	; 0xfe
   c2e2e:	dce4      	bgt.n	c2dfa <scalbnf+0x3e>
   c2e30:	2a00      	cmp	r2, #0
   c2e32:	dc0b      	bgt.n	c2e4c <scalbnf+0x90>
   c2e34:	f112 0f16 	cmn.w	r2, #22
   c2e38:	da17      	bge.n	c2e6a <scalbnf+0xae>
   c2e3a:	f24c 3350 	movw	r3, #50000	; 0xc350
   c2e3e:	4298      	cmp	r0, r3
   c2e40:	dcdb      	bgt.n	c2dfa <scalbnf+0x3e>
   c2e42:	ed9f 0a14 	vldr	s0, [pc, #80]	; c2e94 <scalbnf+0xd8>
   c2e46:	ed9f 7a14 	vldr	s14, [pc, #80]	; c2e98 <scalbnf+0xdc>
   c2e4a:	e7da      	b.n	c2e02 <scalbnf+0x46>
   c2e4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2e50:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2e54:	ee00 3a10 	vmov	s0, r3
   c2e58:	b002      	add	sp, #8
   c2e5a:	4770      	bx	lr
   c2e5c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c2e94 <scalbnf+0xd8>
   c2e60:	eddd 7a01 	vldr	s15, [sp, #4]
   c2e64:	ee27 0a80 	vmul.f32	s0, s15, s0
   c2e68:	e7d8      	b.n	c2e1c <scalbnf+0x60>
   c2e6a:	3219      	adds	r2, #25
   c2e6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c2e70:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c2e74:	eddf 7a09 	vldr	s15, [pc, #36]	; c2e9c <scalbnf+0xe0>
   c2e78:	ee07 3a10 	vmov	s14, r3
   c2e7c:	ee27 0a27 	vmul.f32	s0, s14, s15
   c2e80:	e7cc      	b.n	c2e1c <scalbnf+0x60>
   c2e82:	bf00      	nop
   c2e84:	4c000000 	.word	0x4c000000
   c2e88:	ffff3cb0 	.word	0xffff3cb0
   c2e8c:	7149f2ca 	.word	0x7149f2ca
   c2e90:	f149f2ca 	.word	0xf149f2ca
   c2e94:	0da24260 	.word	0x0da24260
   c2e98:	8da24260 	.word	0x8da24260
   c2e9c:	33000000 	.word	0x33000000

000c2ea0 <__aeabi_drsub>:
   c2ea0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c2ea4:	e002      	b.n	c2eac <__adddf3>
   c2ea6:	bf00      	nop

000c2ea8 <__aeabi_dsub>:
   c2ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c2eac <__adddf3>:
   c2eac:	b530      	push	{r4, r5, lr}
   c2eae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c2eb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c2eb6:	ea94 0f05 	teq	r4, r5
   c2eba:	bf08      	it	eq
   c2ebc:	ea90 0f02 	teqeq	r0, r2
   c2ec0:	bf1f      	itttt	ne
   c2ec2:	ea54 0c00 	orrsne.w	ip, r4, r0
   c2ec6:	ea55 0c02 	orrsne.w	ip, r5, r2
   c2eca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c2ece:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c2ed2:	f000 80e2 	beq.w	c309a <__adddf3+0x1ee>
   c2ed6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c2eda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c2ede:	bfb8      	it	lt
   c2ee0:	426d      	neglt	r5, r5
   c2ee2:	dd0c      	ble.n	c2efe <__adddf3+0x52>
   c2ee4:	442c      	add	r4, r5
   c2ee6:	ea80 0202 	eor.w	r2, r0, r2
   c2eea:	ea81 0303 	eor.w	r3, r1, r3
   c2eee:	ea82 0000 	eor.w	r0, r2, r0
   c2ef2:	ea83 0101 	eor.w	r1, r3, r1
   c2ef6:	ea80 0202 	eor.w	r2, r0, r2
   c2efa:	ea81 0303 	eor.w	r3, r1, r3
   c2efe:	2d36      	cmp	r5, #54	; 0x36
   c2f00:	bf88      	it	hi
   c2f02:	bd30      	pophi	{r4, r5, pc}
   c2f04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c2f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c2f0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c2f10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c2f14:	d002      	beq.n	c2f1c <__adddf3+0x70>
   c2f16:	4240      	negs	r0, r0
   c2f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c2f1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c2f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c2f24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c2f28:	d002      	beq.n	c2f30 <__adddf3+0x84>
   c2f2a:	4252      	negs	r2, r2
   c2f2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c2f30:	ea94 0f05 	teq	r4, r5
   c2f34:	f000 80a7 	beq.w	c3086 <__adddf3+0x1da>
   c2f38:	f1a4 0401 	sub.w	r4, r4, #1
   c2f3c:	f1d5 0e20 	rsbs	lr, r5, #32
   c2f40:	db0d      	blt.n	c2f5e <__adddf3+0xb2>
   c2f42:	fa02 fc0e 	lsl.w	ip, r2, lr
   c2f46:	fa22 f205 	lsr.w	r2, r2, r5
   c2f4a:	1880      	adds	r0, r0, r2
   c2f4c:	f141 0100 	adc.w	r1, r1, #0
   c2f50:	fa03 f20e 	lsl.w	r2, r3, lr
   c2f54:	1880      	adds	r0, r0, r2
   c2f56:	fa43 f305 	asr.w	r3, r3, r5
   c2f5a:	4159      	adcs	r1, r3
   c2f5c:	e00e      	b.n	c2f7c <__adddf3+0xd0>
   c2f5e:	f1a5 0520 	sub.w	r5, r5, #32
   c2f62:	f10e 0e20 	add.w	lr, lr, #32
   c2f66:	2a01      	cmp	r2, #1
   c2f68:	fa03 fc0e 	lsl.w	ip, r3, lr
   c2f6c:	bf28      	it	cs
   c2f6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   c2f72:	fa43 f305 	asr.w	r3, r3, r5
   c2f76:	18c0      	adds	r0, r0, r3
   c2f78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c2f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c2f80:	d507      	bpl.n	c2f92 <__adddf3+0xe6>
   c2f82:	f04f 0e00 	mov.w	lr, #0
   c2f86:	f1dc 0c00 	rsbs	ip, ip, #0
   c2f8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   c2f8e:	eb6e 0101 	sbc.w	r1, lr, r1
   c2f92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c2f96:	d31b      	bcc.n	c2fd0 <__adddf3+0x124>
   c2f98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c2f9c:	d30c      	bcc.n	c2fb8 <__adddf3+0x10c>
   c2f9e:	0849      	lsrs	r1, r1, #1
   c2fa0:	ea5f 0030 	movs.w	r0, r0, rrx
   c2fa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c2fa8:	f104 0401 	add.w	r4, r4, #1
   c2fac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c2fb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c2fb4:	f080 809a 	bcs.w	c30ec <__adddf3+0x240>
   c2fb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c2fbc:	bf08      	it	eq
   c2fbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c2fc2:	f150 0000 	adcs.w	r0, r0, #0
   c2fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c2fca:	ea41 0105 	orr.w	r1, r1, r5
   c2fce:	bd30      	pop	{r4, r5, pc}
   c2fd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c2fd4:	4140      	adcs	r0, r0
   c2fd6:	eb41 0101 	adc.w	r1, r1, r1
   c2fda:	3c01      	subs	r4, #1
   c2fdc:	bf28      	it	cs
   c2fde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c2fe2:	d2e9      	bcs.n	c2fb8 <__adddf3+0x10c>
   c2fe4:	f091 0f00 	teq	r1, #0
   c2fe8:	bf04      	itt	eq
   c2fea:	4601      	moveq	r1, r0
   c2fec:	2000      	moveq	r0, #0
   c2fee:	fab1 f381 	clz	r3, r1
   c2ff2:	bf08      	it	eq
   c2ff4:	3320      	addeq	r3, #32
   c2ff6:	f1a3 030b 	sub.w	r3, r3, #11
   c2ffa:	f1b3 0220 	subs.w	r2, r3, #32
   c2ffe:	da0c      	bge.n	c301a <__adddf3+0x16e>
   c3000:	320c      	adds	r2, #12
   c3002:	dd08      	ble.n	c3016 <__adddf3+0x16a>
   c3004:	f102 0c14 	add.w	ip, r2, #20
   c3008:	f1c2 020c 	rsb	r2, r2, #12
   c300c:	fa01 f00c 	lsl.w	r0, r1, ip
   c3010:	fa21 f102 	lsr.w	r1, r1, r2
   c3014:	e00c      	b.n	c3030 <__adddf3+0x184>
   c3016:	f102 0214 	add.w	r2, r2, #20
   c301a:	bfd8      	it	le
   c301c:	f1c2 0c20 	rsble	ip, r2, #32
   c3020:	fa01 f102 	lsl.w	r1, r1, r2
   c3024:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3028:	bfdc      	itt	le
   c302a:	ea41 010c 	orrle.w	r1, r1, ip
   c302e:	4090      	lslle	r0, r2
   c3030:	1ae4      	subs	r4, r4, r3
   c3032:	bfa2      	ittt	ge
   c3034:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3038:	4329      	orrge	r1, r5
   c303a:	bd30      	popge	{r4, r5, pc}
   c303c:	ea6f 0404 	mvn.w	r4, r4
   c3040:	3c1f      	subs	r4, #31
   c3042:	da1c      	bge.n	c307e <__adddf3+0x1d2>
   c3044:	340c      	adds	r4, #12
   c3046:	dc0e      	bgt.n	c3066 <__adddf3+0x1ba>
   c3048:	f104 0414 	add.w	r4, r4, #20
   c304c:	f1c4 0220 	rsb	r2, r4, #32
   c3050:	fa20 f004 	lsr.w	r0, r0, r4
   c3054:	fa01 f302 	lsl.w	r3, r1, r2
   c3058:	ea40 0003 	orr.w	r0, r0, r3
   c305c:	fa21 f304 	lsr.w	r3, r1, r4
   c3060:	ea45 0103 	orr.w	r1, r5, r3
   c3064:	bd30      	pop	{r4, r5, pc}
   c3066:	f1c4 040c 	rsb	r4, r4, #12
   c306a:	f1c4 0220 	rsb	r2, r4, #32
   c306e:	fa20 f002 	lsr.w	r0, r0, r2
   c3072:	fa01 f304 	lsl.w	r3, r1, r4
   c3076:	ea40 0003 	orr.w	r0, r0, r3
   c307a:	4629      	mov	r1, r5
   c307c:	bd30      	pop	{r4, r5, pc}
   c307e:	fa21 f004 	lsr.w	r0, r1, r4
   c3082:	4629      	mov	r1, r5
   c3084:	bd30      	pop	{r4, r5, pc}
   c3086:	f094 0f00 	teq	r4, #0
   c308a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c308e:	bf06      	itte	eq
   c3090:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3094:	3401      	addeq	r4, #1
   c3096:	3d01      	subne	r5, #1
   c3098:	e74e      	b.n	c2f38 <__adddf3+0x8c>
   c309a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c309e:	bf18      	it	ne
   c30a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c30a4:	d029      	beq.n	c30fa <__adddf3+0x24e>
   c30a6:	ea94 0f05 	teq	r4, r5
   c30aa:	bf08      	it	eq
   c30ac:	ea90 0f02 	teqeq	r0, r2
   c30b0:	d005      	beq.n	c30be <__adddf3+0x212>
   c30b2:	ea54 0c00 	orrs.w	ip, r4, r0
   c30b6:	bf04      	itt	eq
   c30b8:	4619      	moveq	r1, r3
   c30ba:	4610      	moveq	r0, r2
   c30bc:	bd30      	pop	{r4, r5, pc}
   c30be:	ea91 0f03 	teq	r1, r3
   c30c2:	bf1e      	ittt	ne
   c30c4:	2100      	movne	r1, #0
   c30c6:	2000      	movne	r0, #0
   c30c8:	bd30      	popne	{r4, r5, pc}
   c30ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c30ce:	d105      	bne.n	c30dc <__adddf3+0x230>
   c30d0:	0040      	lsls	r0, r0, #1
   c30d2:	4149      	adcs	r1, r1
   c30d4:	bf28      	it	cs
   c30d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c30da:	bd30      	pop	{r4, r5, pc}
   c30dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c30e0:	bf3c      	itt	cc
   c30e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c30e6:	bd30      	popcc	{r4, r5, pc}
   c30e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c30ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c30f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c30f4:	f04f 0000 	mov.w	r0, #0
   c30f8:	bd30      	pop	{r4, r5, pc}
   c30fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c30fe:	bf1a      	itte	ne
   c3100:	4619      	movne	r1, r3
   c3102:	4610      	movne	r0, r2
   c3104:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3108:	bf1c      	itt	ne
   c310a:	460b      	movne	r3, r1
   c310c:	4602      	movne	r2, r0
   c310e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3112:	bf06      	itte	eq
   c3114:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3118:	ea91 0f03 	teqeq	r1, r3
   c311c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3120:	bd30      	pop	{r4, r5, pc}
   c3122:	bf00      	nop

000c3124 <__aeabi_ui2d>:
   c3124:	f090 0f00 	teq	r0, #0
   c3128:	bf04      	itt	eq
   c312a:	2100      	moveq	r1, #0
   c312c:	4770      	bxeq	lr
   c312e:	b530      	push	{r4, r5, lr}
   c3130:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3134:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3138:	f04f 0500 	mov.w	r5, #0
   c313c:	f04f 0100 	mov.w	r1, #0
   c3140:	e750      	b.n	c2fe4 <__adddf3+0x138>
   c3142:	bf00      	nop

000c3144 <__aeabi_i2d>:
   c3144:	f090 0f00 	teq	r0, #0
   c3148:	bf04      	itt	eq
   c314a:	2100      	moveq	r1, #0
   c314c:	4770      	bxeq	lr
   c314e:	b530      	push	{r4, r5, lr}
   c3150:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3154:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3158:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c315c:	bf48      	it	mi
   c315e:	4240      	negmi	r0, r0
   c3160:	f04f 0100 	mov.w	r1, #0
   c3164:	e73e      	b.n	c2fe4 <__adddf3+0x138>
   c3166:	bf00      	nop

000c3168 <__aeabi_f2d>:
   c3168:	0042      	lsls	r2, r0, #1
   c316a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c316e:	ea4f 0131 	mov.w	r1, r1, rrx
   c3172:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3176:	bf1f      	itttt	ne
   c3178:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c317c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3180:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3184:	4770      	bxne	lr
   c3186:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c318a:	bf08      	it	eq
   c318c:	4770      	bxeq	lr
   c318e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3192:	bf04      	itt	eq
   c3194:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3198:	4770      	bxeq	lr
   c319a:	b530      	push	{r4, r5, lr}
   c319c:	f44f 7460 	mov.w	r4, #896	; 0x380
   c31a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c31a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c31a8:	e71c      	b.n	c2fe4 <__adddf3+0x138>
   c31aa:	bf00      	nop

000c31ac <__aeabi_ul2d>:
   c31ac:	ea50 0201 	orrs.w	r2, r0, r1
   c31b0:	bf08      	it	eq
   c31b2:	4770      	bxeq	lr
   c31b4:	b530      	push	{r4, r5, lr}
   c31b6:	f04f 0500 	mov.w	r5, #0
   c31ba:	e00a      	b.n	c31d2 <__aeabi_l2d+0x16>

000c31bc <__aeabi_l2d>:
   c31bc:	ea50 0201 	orrs.w	r2, r0, r1
   c31c0:	bf08      	it	eq
   c31c2:	4770      	bxeq	lr
   c31c4:	b530      	push	{r4, r5, lr}
   c31c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c31ca:	d502      	bpl.n	c31d2 <__aeabi_l2d+0x16>
   c31cc:	4240      	negs	r0, r0
   c31ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c31d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c31d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c31da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c31de:	f43f aed8 	beq.w	c2f92 <__adddf3+0xe6>
   c31e2:	f04f 0203 	mov.w	r2, #3
   c31e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c31ea:	bf18      	it	ne
   c31ec:	3203      	addne	r2, #3
   c31ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c31f2:	bf18      	it	ne
   c31f4:	3203      	addne	r2, #3
   c31f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c31fa:	f1c2 0320 	rsb	r3, r2, #32
   c31fe:	fa00 fc03 	lsl.w	ip, r0, r3
   c3202:	fa20 f002 	lsr.w	r0, r0, r2
   c3206:	fa01 fe03 	lsl.w	lr, r1, r3
   c320a:	ea40 000e 	orr.w	r0, r0, lr
   c320e:	fa21 f102 	lsr.w	r1, r1, r2
   c3212:	4414      	add	r4, r2
   c3214:	e6bd      	b.n	c2f92 <__adddf3+0xe6>
   c3216:	bf00      	nop

000c3218 <__aeabi_dmul>:
   c3218:	b570      	push	{r4, r5, r6, lr}
   c321a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c321e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3226:	bf1d      	ittte	ne
   c3228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c322c:	ea94 0f0c 	teqne	r4, ip
   c3230:	ea95 0f0c 	teqne	r5, ip
   c3234:	f000 f8de 	bleq	c33f4 <__aeabi_dmul+0x1dc>
   c3238:	442c      	add	r4, r5
   c323a:	ea81 0603 	eor.w	r6, r1, r3
   c323e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c324a:	bf18      	it	ne
   c324c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3258:	d038      	beq.n	c32cc <__aeabi_dmul+0xb4>
   c325a:	fba0 ce02 	umull	ip, lr, r0, r2
   c325e:	f04f 0500 	mov.w	r5, #0
   c3262:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c326a:	fbe0 e503 	umlal	lr, r5, r0, r3
   c326e:	f04f 0600 	mov.w	r6, #0
   c3272:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3276:	f09c 0f00 	teq	ip, #0
   c327a:	bf18      	it	ne
   c327c:	f04e 0e01 	orrne.w	lr, lr, #1
   c3280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c328c:	d204      	bcs.n	c3298 <__aeabi_dmul+0x80>
   c328e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3292:	416d      	adcs	r5, r5
   c3294:	eb46 0606 	adc.w	r6, r6, r6
   c3298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c329c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c32a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c32a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c32a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c32ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c32b0:	bf88      	it	hi
   c32b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c32b6:	d81e      	bhi.n	c32f6 <__aeabi_dmul+0xde>
   c32b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c32bc:	bf08      	it	eq
   c32be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c32c2:	f150 0000 	adcs.w	r0, r0, #0
   c32c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c32ca:	bd70      	pop	{r4, r5, r6, pc}
   c32cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c32d0:	ea46 0101 	orr.w	r1, r6, r1
   c32d4:	ea40 0002 	orr.w	r0, r0, r2
   c32d8:	ea81 0103 	eor.w	r1, r1, r3
   c32dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c32e0:	bfc2      	ittt	gt
   c32e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   c32e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c32ea:	bd70      	popgt	{r4, r5, r6, pc}
   c32ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c32f0:	f04f 0e00 	mov.w	lr, #0
   c32f4:	3c01      	subs	r4, #1
   c32f6:	f300 80ab 	bgt.w	c3450 <__aeabi_dmul+0x238>
   c32fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c32fe:	bfde      	ittt	le
   c3300:	2000      	movle	r0, #0
   c3302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3306:	bd70      	pople	{r4, r5, r6, pc}
   c3308:	f1c4 0400 	rsb	r4, r4, #0
   c330c:	3c20      	subs	r4, #32
   c330e:	da35      	bge.n	c337c <__aeabi_dmul+0x164>
   c3310:	340c      	adds	r4, #12
   c3312:	dc1b      	bgt.n	c334c <__aeabi_dmul+0x134>
   c3314:	f104 0414 	add.w	r4, r4, #20
   c3318:	f1c4 0520 	rsb	r5, r4, #32
   c331c:	fa00 f305 	lsl.w	r3, r0, r5
   c3320:	fa20 f004 	lsr.w	r0, r0, r4
   c3324:	fa01 f205 	lsl.w	r2, r1, r5
   c3328:	ea40 0002 	orr.w	r0, r0, r2
   c332c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3338:	fa21 f604 	lsr.w	r6, r1, r4
   c333c:	eb42 0106 	adc.w	r1, r2, r6
   c3340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3344:	bf08      	it	eq
   c3346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c334a:	bd70      	pop	{r4, r5, r6, pc}
   c334c:	f1c4 040c 	rsb	r4, r4, #12
   c3350:	f1c4 0520 	rsb	r5, r4, #32
   c3354:	fa00 f304 	lsl.w	r3, r0, r4
   c3358:	fa20 f005 	lsr.w	r0, r0, r5
   c335c:	fa01 f204 	lsl.w	r2, r1, r4
   c3360:	ea40 0002 	orr.w	r0, r0, r2
   c3364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c336c:	f141 0100 	adc.w	r1, r1, #0
   c3370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3374:	bf08      	it	eq
   c3376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c337a:	bd70      	pop	{r4, r5, r6, pc}
   c337c:	f1c4 0520 	rsb	r5, r4, #32
   c3380:	fa00 f205 	lsl.w	r2, r0, r5
   c3384:	ea4e 0e02 	orr.w	lr, lr, r2
   c3388:	fa20 f304 	lsr.w	r3, r0, r4
   c338c:	fa01 f205 	lsl.w	r2, r1, r5
   c3390:	ea43 0302 	orr.w	r3, r3, r2
   c3394:	fa21 f004 	lsr.w	r0, r1, r4
   c3398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c339c:	fa21 f204 	lsr.w	r2, r1, r4
   c33a0:	ea20 0002 	bic.w	r0, r0, r2
   c33a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c33a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c33ac:	bf08      	it	eq
   c33ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c33b2:	bd70      	pop	{r4, r5, r6, pc}
   c33b4:	f094 0f00 	teq	r4, #0
   c33b8:	d10f      	bne.n	c33da <__aeabi_dmul+0x1c2>
   c33ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c33be:	0040      	lsls	r0, r0, #1
   c33c0:	eb41 0101 	adc.w	r1, r1, r1
   c33c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c33c8:	bf08      	it	eq
   c33ca:	3c01      	subeq	r4, #1
   c33cc:	d0f7      	beq.n	c33be <__aeabi_dmul+0x1a6>
   c33ce:	ea41 0106 	orr.w	r1, r1, r6
   c33d2:	f095 0f00 	teq	r5, #0
   c33d6:	bf18      	it	ne
   c33d8:	4770      	bxne	lr
   c33da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c33de:	0052      	lsls	r2, r2, #1
   c33e0:	eb43 0303 	adc.w	r3, r3, r3
   c33e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c33e8:	bf08      	it	eq
   c33ea:	3d01      	subeq	r5, #1
   c33ec:	d0f7      	beq.n	c33de <__aeabi_dmul+0x1c6>
   c33ee:	ea43 0306 	orr.w	r3, r3, r6
   c33f2:	4770      	bx	lr
   c33f4:	ea94 0f0c 	teq	r4, ip
   c33f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c33fc:	bf18      	it	ne
   c33fe:	ea95 0f0c 	teqne	r5, ip
   c3402:	d00c      	beq.n	c341e <__aeabi_dmul+0x206>
   c3404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3408:	bf18      	it	ne
   c340a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c340e:	d1d1      	bne.n	c33b4 <__aeabi_dmul+0x19c>
   c3410:	ea81 0103 	eor.w	r1, r1, r3
   c3414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3418:	f04f 0000 	mov.w	r0, #0
   c341c:	bd70      	pop	{r4, r5, r6, pc}
   c341e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3422:	bf06      	itte	eq
   c3424:	4610      	moveq	r0, r2
   c3426:	4619      	moveq	r1, r3
   c3428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c342c:	d019      	beq.n	c3462 <__aeabi_dmul+0x24a>
   c342e:	ea94 0f0c 	teq	r4, ip
   c3432:	d102      	bne.n	c343a <__aeabi_dmul+0x222>
   c3434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c3438:	d113      	bne.n	c3462 <__aeabi_dmul+0x24a>
   c343a:	ea95 0f0c 	teq	r5, ip
   c343e:	d105      	bne.n	c344c <__aeabi_dmul+0x234>
   c3440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c3444:	bf1c      	itt	ne
   c3446:	4610      	movne	r0, r2
   c3448:	4619      	movne	r1, r3
   c344a:	d10a      	bne.n	c3462 <__aeabi_dmul+0x24a>
   c344c:	ea81 0103 	eor.w	r1, r1, r3
   c3450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c345c:	f04f 0000 	mov.w	r0, #0
   c3460:	bd70      	pop	{r4, r5, r6, pc}
   c3462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c3466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c346a:	bd70      	pop	{r4, r5, r6, pc}

000c346c <__aeabi_ddiv>:
   c346c:	b570      	push	{r4, r5, r6, lr}
   c346e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3472:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3476:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c347a:	bf1d      	ittte	ne
   c347c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3480:	ea94 0f0c 	teqne	r4, ip
   c3484:	ea95 0f0c 	teqne	r5, ip
   c3488:	f000 f8a7 	bleq	c35da <__aeabi_ddiv+0x16e>
   c348c:	eba4 0405 	sub.w	r4, r4, r5
   c3490:	ea81 0e03 	eor.w	lr, r1, r3
   c3494:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3498:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c349c:	f000 8088 	beq.w	c35b0 <__aeabi_ddiv+0x144>
   c34a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c34a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c34a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c34ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c34b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c34b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c34b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c34bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c34c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c34c4:	429d      	cmp	r5, r3
   c34c6:	bf08      	it	eq
   c34c8:	4296      	cmpeq	r6, r2
   c34ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c34ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c34d2:	d202      	bcs.n	c34da <__aeabi_ddiv+0x6e>
   c34d4:	085b      	lsrs	r3, r3, #1
   c34d6:	ea4f 0232 	mov.w	r2, r2, rrx
   c34da:	1ab6      	subs	r6, r6, r2
   c34dc:	eb65 0503 	sbc.w	r5, r5, r3
   c34e0:	085b      	lsrs	r3, r3, #1
   c34e2:	ea4f 0232 	mov.w	r2, r2, rrx
   c34e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c34ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c34ee:	ebb6 0e02 	subs.w	lr, r6, r2
   c34f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c34f6:	bf22      	ittt	cs
   c34f8:	1ab6      	subcs	r6, r6, r2
   c34fa:	4675      	movcs	r5, lr
   c34fc:	ea40 000c 	orrcs.w	r0, r0, ip
   c3500:	085b      	lsrs	r3, r3, #1
   c3502:	ea4f 0232 	mov.w	r2, r2, rrx
   c3506:	ebb6 0e02 	subs.w	lr, r6, r2
   c350a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c350e:	bf22      	ittt	cs
   c3510:	1ab6      	subcs	r6, r6, r2
   c3512:	4675      	movcs	r5, lr
   c3514:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c3518:	085b      	lsrs	r3, r3, #1
   c351a:	ea4f 0232 	mov.w	r2, r2, rrx
   c351e:	ebb6 0e02 	subs.w	lr, r6, r2
   c3522:	eb75 0e03 	sbcs.w	lr, r5, r3
   c3526:	bf22      	ittt	cs
   c3528:	1ab6      	subcs	r6, r6, r2
   c352a:	4675      	movcs	r5, lr
   c352c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c3530:	085b      	lsrs	r3, r3, #1
   c3532:	ea4f 0232 	mov.w	r2, r2, rrx
   c3536:	ebb6 0e02 	subs.w	lr, r6, r2
   c353a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c353e:	bf22      	ittt	cs
   c3540:	1ab6      	subcs	r6, r6, r2
   c3542:	4675      	movcs	r5, lr
   c3544:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c3548:	ea55 0e06 	orrs.w	lr, r5, r6
   c354c:	d018      	beq.n	c3580 <__aeabi_ddiv+0x114>
   c354e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c3552:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c3556:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c355a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c355e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c3562:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c3566:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c356a:	d1c0      	bne.n	c34ee <__aeabi_ddiv+0x82>
   c356c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3570:	d10b      	bne.n	c358a <__aeabi_ddiv+0x11e>
   c3572:	ea41 0100 	orr.w	r1, r1, r0
   c3576:	f04f 0000 	mov.w	r0, #0
   c357a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c357e:	e7b6      	b.n	c34ee <__aeabi_ddiv+0x82>
   c3580:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3584:	bf04      	itt	eq
   c3586:	4301      	orreq	r1, r0
   c3588:	2000      	moveq	r0, #0
   c358a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c358e:	bf88      	it	hi
   c3590:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3594:	f63f aeaf 	bhi.w	c32f6 <__aeabi_dmul+0xde>
   c3598:	ebb5 0c03 	subs.w	ip, r5, r3
   c359c:	bf04      	itt	eq
   c359e:	ebb6 0c02 	subseq.w	ip, r6, r2
   c35a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c35a6:	f150 0000 	adcs.w	r0, r0, #0
   c35aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c35ae:	bd70      	pop	{r4, r5, r6, pc}
   c35b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c35b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c35b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c35bc:	bfc2      	ittt	gt
   c35be:	ebd4 050c 	rsbsgt	r5, r4, ip
   c35c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c35c6:	bd70      	popgt	{r4, r5, r6, pc}
   c35c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c35cc:	f04f 0e00 	mov.w	lr, #0
   c35d0:	3c01      	subs	r4, #1
   c35d2:	e690      	b.n	c32f6 <__aeabi_dmul+0xde>
   c35d4:	ea45 0e06 	orr.w	lr, r5, r6
   c35d8:	e68d      	b.n	c32f6 <__aeabi_dmul+0xde>
   c35da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c35de:	ea94 0f0c 	teq	r4, ip
   c35e2:	bf08      	it	eq
   c35e4:	ea95 0f0c 	teqeq	r5, ip
   c35e8:	f43f af3b 	beq.w	c3462 <__aeabi_dmul+0x24a>
   c35ec:	ea94 0f0c 	teq	r4, ip
   c35f0:	d10a      	bne.n	c3608 <__aeabi_ddiv+0x19c>
   c35f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c35f6:	f47f af34 	bne.w	c3462 <__aeabi_dmul+0x24a>
   c35fa:	ea95 0f0c 	teq	r5, ip
   c35fe:	f47f af25 	bne.w	c344c <__aeabi_dmul+0x234>
   c3602:	4610      	mov	r0, r2
   c3604:	4619      	mov	r1, r3
   c3606:	e72c      	b.n	c3462 <__aeabi_dmul+0x24a>
   c3608:	ea95 0f0c 	teq	r5, ip
   c360c:	d106      	bne.n	c361c <__aeabi_ddiv+0x1b0>
   c360e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c3612:	f43f aefd 	beq.w	c3410 <__aeabi_dmul+0x1f8>
   c3616:	4610      	mov	r0, r2
   c3618:	4619      	mov	r1, r3
   c361a:	e722      	b.n	c3462 <__aeabi_dmul+0x24a>
   c361c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3620:	bf18      	it	ne
   c3622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3626:	f47f aec5 	bne.w	c33b4 <__aeabi_dmul+0x19c>
   c362a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c362e:	f47f af0d 	bne.w	c344c <__aeabi_dmul+0x234>
   c3632:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c3636:	f47f aeeb 	bne.w	c3410 <__aeabi_dmul+0x1f8>
   c363a:	e712      	b.n	c3462 <__aeabi_dmul+0x24a>

000c363c <__gedf2>:
   c363c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c3640:	e006      	b.n	c3650 <__cmpdf2+0x4>
   c3642:	bf00      	nop

000c3644 <__ledf2>:
   c3644:	f04f 0c01 	mov.w	ip, #1
   c3648:	e002      	b.n	c3650 <__cmpdf2+0x4>
   c364a:	bf00      	nop

000c364c <__cmpdf2>:
   c364c:	f04f 0c01 	mov.w	ip, #1
   c3650:	f84d cd04 	str.w	ip, [sp, #-4]!
   c3654:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3658:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c365c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3660:	bf18      	it	ne
   c3662:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c3666:	d01b      	beq.n	c36a0 <__cmpdf2+0x54>
   c3668:	b001      	add	sp, #4
   c366a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c366e:	bf0c      	ite	eq
   c3670:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c3674:	ea91 0f03 	teqne	r1, r3
   c3678:	bf02      	ittt	eq
   c367a:	ea90 0f02 	teqeq	r0, r2
   c367e:	2000      	moveq	r0, #0
   c3680:	4770      	bxeq	lr
   c3682:	f110 0f00 	cmn.w	r0, #0
   c3686:	ea91 0f03 	teq	r1, r3
   c368a:	bf58      	it	pl
   c368c:	4299      	cmppl	r1, r3
   c368e:	bf08      	it	eq
   c3690:	4290      	cmpeq	r0, r2
   c3692:	bf2c      	ite	cs
   c3694:	17d8      	asrcs	r0, r3, #31
   c3696:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c369a:	f040 0001 	orr.w	r0, r0, #1
   c369e:	4770      	bx	lr
   c36a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c36a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c36a8:	d102      	bne.n	c36b0 <__cmpdf2+0x64>
   c36aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c36ae:	d107      	bne.n	c36c0 <__cmpdf2+0x74>
   c36b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c36b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c36b8:	d1d6      	bne.n	c3668 <__cmpdf2+0x1c>
   c36ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c36be:	d0d3      	beq.n	c3668 <__cmpdf2+0x1c>
   c36c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   c36c4:	4770      	bx	lr
   c36c6:	bf00      	nop

000c36c8 <__aeabi_cdrcmple>:
   c36c8:	4684      	mov	ip, r0
   c36ca:	4610      	mov	r0, r2
   c36cc:	4662      	mov	r2, ip
   c36ce:	468c      	mov	ip, r1
   c36d0:	4619      	mov	r1, r3
   c36d2:	4663      	mov	r3, ip
   c36d4:	e000      	b.n	c36d8 <__aeabi_cdcmpeq>
   c36d6:	bf00      	nop

000c36d8 <__aeabi_cdcmpeq>:
   c36d8:	b501      	push	{r0, lr}
   c36da:	f7ff ffb7 	bl	c364c <__cmpdf2>
   c36de:	2800      	cmp	r0, #0
   c36e0:	bf48      	it	mi
   c36e2:	f110 0f00 	cmnmi.w	r0, #0
   c36e6:	bd01      	pop	{r0, pc}

000c36e8 <__aeabi_dcmpeq>:
   c36e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c36ec:	f7ff fff4 	bl	c36d8 <__aeabi_cdcmpeq>
   c36f0:	bf0c      	ite	eq
   c36f2:	2001      	moveq	r0, #1
   c36f4:	2000      	movne	r0, #0
   c36f6:	f85d fb08 	ldr.w	pc, [sp], #8
   c36fa:	bf00      	nop

000c36fc <__aeabi_dcmplt>:
   c36fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3700:	f7ff ffea 	bl	c36d8 <__aeabi_cdcmpeq>
   c3704:	bf34      	ite	cc
   c3706:	2001      	movcc	r0, #1
   c3708:	2000      	movcs	r0, #0
   c370a:	f85d fb08 	ldr.w	pc, [sp], #8
   c370e:	bf00      	nop

000c3710 <__aeabi_dcmple>:
   c3710:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3714:	f7ff ffe0 	bl	c36d8 <__aeabi_cdcmpeq>
   c3718:	bf94      	ite	ls
   c371a:	2001      	movls	r0, #1
   c371c:	2000      	movhi	r0, #0
   c371e:	f85d fb08 	ldr.w	pc, [sp], #8
   c3722:	bf00      	nop

000c3724 <__aeabi_dcmpge>:
   c3724:	f84d ed08 	str.w	lr, [sp, #-8]!
   c3728:	f7ff ffce 	bl	c36c8 <__aeabi_cdrcmple>
   c372c:	bf94      	ite	ls
   c372e:	2001      	movls	r0, #1
   c3730:	2000      	movhi	r0, #0
   c3732:	f85d fb08 	ldr.w	pc, [sp], #8
   c3736:	bf00      	nop

000c3738 <__aeabi_dcmpgt>:
   c3738:	f84d ed08 	str.w	lr, [sp, #-8]!
   c373c:	f7ff ffc4 	bl	c36c8 <__aeabi_cdrcmple>
   c3740:	bf34      	ite	cc
   c3742:	2001      	movcc	r0, #1
   c3744:	2000      	movcs	r0, #0
   c3746:	f85d fb08 	ldr.w	pc, [sp], #8
   c374a:	bf00      	nop

000c374c <__aeabi_dcmpun>:
   c374c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c3750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3754:	d102      	bne.n	c375c <__aeabi_dcmpun+0x10>
   c3756:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c375a:	d10a      	bne.n	c3772 <__aeabi_dcmpun+0x26>
   c375c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c3760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c3764:	d102      	bne.n	c376c <__aeabi_dcmpun+0x20>
   c3766:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c376a:	d102      	bne.n	c3772 <__aeabi_dcmpun+0x26>
   c376c:	f04f 0000 	mov.w	r0, #0
   c3770:	4770      	bx	lr
   c3772:	f04f 0001 	mov.w	r0, #1
   c3776:	4770      	bx	lr

000c3778 <__aeabi_d2iz>:
   c3778:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c377c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c3780:	d215      	bcs.n	c37ae <__aeabi_d2iz+0x36>
   c3782:	d511      	bpl.n	c37a8 <__aeabi_d2iz+0x30>
   c3784:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c3788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c378c:	d912      	bls.n	c37b4 <__aeabi_d2iz+0x3c>
   c378e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c3792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c3796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c379a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c379e:	fa23 f002 	lsr.w	r0, r3, r2
   c37a2:	bf18      	it	ne
   c37a4:	4240      	negne	r0, r0
   c37a6:	4770      	bx	lr
   c37a8:	f04f 0000 	mov.w	r0, #0
   c37ac:	4770      	bx	lr
   c37ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c37b2:	d105      	bne.n	c37c0 <__aeabi_d2iz+0x48>
   c37b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c37b8:	bf08      	it	eq
   c37ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c37be:	4770      	bx	lr
   c37c0:	f04f 0000 	mov.w	r0, #0
   c37c4:	4770      	bx	lr
   c37c6:	bf00      	nop

000c37c8 <__aeabi_d2uiz>:
   c37c8:	004a      	lsls	r2, r1, #1
   c37ca:	d211      	bcs.n	c37f0 <__aeabi_d2uiz+0x28>
   c37cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c37d0:	d211      	bcs.n	c37f6 <__aeabi_d2uiz+0x2e>
   c37d2:	d50d      	bpl.n	c37f0 <__aeabi_d2uiz+0x28>
   c37d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c37d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c37dc:	d40e      	bmi.n	c37fc <__aeabi_d2uiz+0x34>
   c37de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c37e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c37e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c37ea:	fa23 f002 	lsr.w	r0, r3, r2
   c37ee:	4770      	bx	lr
   c37f0:	f04f 0000 	mov.w	r0, #0
   c37f4:	4770      	bx	lr
   c37f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c37fa:	d102      	bne.n	c3802 <__aeabi_d2uiz+0x3a>
   c37fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3800:	4770      	bx	lr
   c3802:	f04f 0000 	mov.w	r0, #0
   c3806:	4770      	bx	lr

000c3808 <__aeabi_d2f>:
   c3808:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c380c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c3810:	bf24      	itt	cs
   c3812:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c3816:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c381a:	d90d      	bls.n	c3838 <__aeabi_d2f+0x30>
   c381c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c3820:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c3824:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c3828:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c382c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c3830:	bf08      	it	eq
   c3832:	f020 0001 	biceq.w	r0, r0, #1
   c3836:	4770      	bx	lr
   c3838:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c383c:	d121      	bne.n	c3882 <__aeabi_d2f+0x7a>
   c383e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c3842:	bfbc      	itt	lt
   c3844:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c3848:	4770      	bxlt	lr
   c384a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c384e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c3852:	f1c2 0218 	rsb	r2, r2, #24
   c3856:	f1c2 0c20 	rsb	ip, r2, #32
   c385a:	fa10 f30c 	lsls.w	r3, r0, ip
   c385e:	fa20 f002 	lsr.w	r0, r0, r2
   c3862:	bf18      	it	ne
   c3864:	f040 0001 	orrne.w	r0, r0, #1
   c3868:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c386c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c3870:	fa03 fc0c 	lsl.w	ip, r3, ip
   c3874:	ea40 000c 	orr.w	r0, r0, ip
   c3878:	fa23 f302 	lsr.w	r3, r3, r2
   c387c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c3880:	e7cc      	b.n	c381c <__aeabi_d2f+0x14>
   c3882:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c3886:	d107      	bne.n	c3898 <__aeabi_d2f+0x90>
   c3888:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c388c:	bf1e      	ittt	ne
   c388e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c3892:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c3896:	4770      	bxne	lr
   c3898:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c389c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c38a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c38a4:	4770      	bx	lr
   c38a6:	bf00      	nop

000c38a8 <__aeabi_d2ulz>:
   c38a8:	b5d0      	push	{r4, r6, r7, lr}
   c38aa:	4b0c      	ldr	r3, [pc, #48]	; (c38dc <__aeabi_d2ulz+0x34>)
   c38ac:	2200      	movs	r2, #0
   c38ae:	4606      	mov	r6, r0
   c38b0:	460f      	mov	r7, r1
   c38b2:	f7ff fcb1 	bl	c3218 <__aeabi_dmul>
   c38b6:	f7ff ff87 	bl	c37c8 <__aeabi_d2uiz>
   c38ba:	4604      	mov	r4, r0
   c38bc:	f7ff fc32 	bl	c3124 <__aeabi_ui2d>
   c38c0:	4b07      	ldr	r3, [pc, #28]	; (c38e0 <__aeabi_d2ulz+0x38>)
   c38c2:	2200      	movs	r2, #0
   c38c4:	f7ff fca8 	bl	c3218 <__aeabi_dmul>
   c38c8:	4602      	mov	r2, r0
   c38ca:	460b      	mov	r3, r1
   c38cc:	4630      	mov	r0, r6
   c38ce:	4639      	mov	r1, r7
   c38d0:	f7ff faea 	bl	c2ea8 <__aeabi_dsub>
   c38d4:	f7ff ff78 	bl	c37c8 <__aeabi_d2uiz>
   c38d8:	4621      	mov	r1, r4
   c38da:	bdd0      	pop	{r4, r6, r7, pc}
   c38dc:	3df00000 	.word	0x3df00000
   c38e0:	41f00000 	.word	0x41f00000

000c38e4 <atexit>:
   c38e4:	2300      	movs	r3, #0
   c38e6:	4601      	mov	r1, r0
   c38e8:	461a      	mov	r2, r3
   c38ea:	4618      	mov	r0, r3
   c38ec:	f001 b806 	b.w	c48fc <__register_exitproc>

000c38f0 <atof>:
   c38f0:	2100      	movs	r1, #0
   c38f2:	f000 bf6b 	b.w	c47cc <strtod>

000c38f6 <atoi>:
   c38f6:	220a      	movs	r2, #10
   c38f8:	2100      	movs	r1, #0
   c38fa:	f000 bff5 	b.w	c48e8 <strtol>
	...

000c3900 <isprint>:
   c3900:	4b02      	ldr	r3, [pc, #8]	; (c390c <isprint+0xc>)
   c3902:	4418      	add	r0, r3
   c3904:	7840      	ldrb	r0, [r0, #1]
   c3906:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c390a:	4770      	bx	lr
   c390c:	000c79b0 	.word	0x000c79b0

000c3910 <memcmp>:
   c3910:	b510      	push	{r4, lr}
   c3912:	3901      	subs	r1, #1
   c3914:	4402      	add	r2, r0
   c3916:	4290      	cmp	r0, r2
   c3918:	d101      	bne.n	c391e <memcmp+0xe>
   c391a:	2000      	movs	r0, #0
   c391c:	e005      	b.n	c392a <memcmp+0x1a>
   c391e:	7803      	ldrb	r3, [r0, #0]
   c3920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3924:	42a3      	cmp	r3, r4
   c3926:	d001      	beq.n	c392c <memcmp+0x1c>
   c3928:	1b18      	subs	r0, r3, r4
   c392a:	bd10      	pop	{r4, pc}
   c392c:	3001      	adds	r0, #1
   c392e:	e7f2      	b.n	c3916 <memcmp+0x6>

000c3930 <memcpy>:
   c3930:	440a      	add	r2, r1
   c3932:	4291      	cmp	r1, r2
   c3934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c3938:	d100      	bne.n	c393c <memcpy+0xc>
   c393a:	4770      	bx	lr
   c393c:	b510      	push	{r4, lr}
   c393e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c3942:	f803 4f01 	strb.w	r4, [r3, #1]!
   c3946:	4291      	cmp	r1, r2
   c3948:	d1f9      	bne.n	c393e <memcpy+0xe>
   c394a:	bd10      	pop	{r4, pc}

000c394c <memmove>:
   c394c:	4288      	cmp	r0, r1
   c394e:	b510      	push	{r4, lr}
   c3950:	eb01 0402 	add.w	r4, r1, r2
   c3954:	d902      	bls.n	c395c <memmove+0x10>
   c3956:	4284      	cmp	r4, r0
   c3958:	4623      	mov	r3, r4
   c395a:	d807      	bhi.n	c396c <memmove+0x20>
   c395c:	1e43      	subs	r3, r0, #1
   c395e:	42a1      	cmp	r1, r4
   c3960:	d008      	beq.n	c3974 <memmove+0x28>
   c3962:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3966:	f803 2f01 	strb.w	r2, [r3, #1]!
   c396a:	e7f8      	b.n	c395e <memmove+0x12>
   c396c:	4402      	add	r2, r0
   c396e:	4601      	mov	r1, r0
   c3970:	428a      	cmp	r2, r1
   c3972:	d100      	bne.n	c3976 <memmove+0x2a>
   c3974:	bd10      	pop	{r4, pc}
   c3976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c397a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c397e:	e7f7      	b.n	c3970 <memmove+0x24>

000c3980 <memset>:
   c3980:	4402      	add	r2, r0
   c3982:	4603      	mov	r3, r0
   c3984:	4293      	cmp	r3, r2
   c3986:	d100      	bne.n	c398a <memset+0xa>
   c3988:	4770      	bx	lr
   c398a:	f803 1b01 	strb.w	r1, [r3], #1
   c398e:	e7f9      	b.n	c3984 <memset+0x4>

000c3990 <srand>:
   c3990:	b538      	push	{r3, r4, r5, lr}
   c3992:	4b10      	ldr	r3, [pc, #64]	; (c39d4 <srand+0x44>)
   c3994:	681d      	ldr	r5, [r3, #0]
   c3996:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c3998:	4604      	mov	r4, r0
   c399a:	b9b3      	cbnz	r3, c39ca <srand+0x3a>
   c399c:	2018      	movs	r0, #24
   c399e:	f7f9 feb1 	bl	bd704 <malloc>
   c39a2:	4602      	mov	r2, r0
   c39a4:	63a8      	str	r0, [r5, #56]	; 0x38
   c39a6:	b920      	cbnz	r0, c39b2 <srand+0x22>
   c39a8:	4b0b      	ldr	r3, [pc, #44]	; (c39d8 <srand+0x48>)
   c39aa:	480c      	ldr	r0, [pc, #48]	; (c39dc <srand+0x4c>)
   c39ac:	2142      	movs	r1, #66	; 0x42
   c39ae:	f7f9 fef9 	bl	bd7a4 <__assert_func>
   c39b2:	490b      	ldr	r1, [pc, #44]	; (c39e0 <srand+0x50>)
   c39b4:	4b0b      	ldr	r3, [pc, #44]	; (c39e4 <srand+0x54>)
   c39b6:	e9c0 1300 	strd	r1, r3, [r0]
   c39ba:	4b0b      	ldr	r3, [pc, #44]	; (c39e8 <srand+0x58>)
   c39bc:	6083      	str	r3, [r0, #8]
   c39be:	230b      	movs	r3, #11
   c39c0:	8183      	strh	r3, [r0, #12]
   c39c2:	2100      	movs	r1, #0
   c39c4:	2001      	movs	r0, #1
   c39c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c39ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c39cc:	2200      	movs	r2, #0
   c39ce:	611c      	str	r4, [r3, #16]
   c39d0:	615a      	str	r2, [r3, #20]
   c39d2:	bd38      	pop	{r3, r4, r5, pc}
   c39d4:	2003dba0 	.word	0x2003dba0
   c39d8:	000c78e0 	.word	0x000c78e0
   c39dc:	000c78f7 	.word	0x000c78f7
   c39e0:	abcd330e 	.word	0xabcd330e
   c39e4:	e66d1234 	.word	0xe66d1234
   c39e8:	0005deec 	.word	0x0005deec

000c39ec <strcat>:
   c39ec:	b510      	push	{r4, lr}
   c39ee:	4602      	mov	r2, r0
   c39f0:	7814      	ldrb	r4, [r2, #0]
   c39f2:	4613      	mov	r3, r2
   c39f4:	3201      	adds	r2, #1
   c39f6:	2c00      	cmp	r4, #0
   c39f8:	d1fa      	bne.n	c39f0 <strcat+0x4>
   c39fa:	3b01      	subs	r3, #1
   c39fc:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3a00:	f803 2f01 	strb.w	r2, [r3, #1]!
   c3a04:	2a00      	cmp	r2, #0
   c3a06:	d1f9      	bne.n	c39fc <strcat+0x10>
   c3a08:	bd10      	pop	{r4, pc}

000c3a0a <strchr>:
   c3a0a:	b2c9      	uxtb	r1, r1
   c3a0c:	4603      	mov	r3, r0
   c3a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3a12:	b11a      	cbz	r2, c3a1c <strchr+0x12>
   c3a14:	428a      	cmp	r2, r1
   c3a16:	d1f9      	bne.n	c3a0c <strchr+0x2>
   c3a18:	4618      	mov	r0, r3
   c3a1a:	4770      	bx	lr
   c3a1c:	2900      	cmp	r1, #0
   c3a1e:	bf18      	it	ne
   c3a20:	2300      	movne	r3, #0
   c3a22:	e7f9      	b.n	c3a18 <strchr+0xe>

000c3a24 <strchrnul>:
   c3a24:	b510      	push	{r4, lr}
   c3a26:	4604      	mov	r4, r0
   c3a28:	f7ff ffef 	bl	c3a0a <strchr>
   c3a2c:	b918      	cbnz	r0, c3a36 <strchrnul+0x12>
   c3a2e:	4620      	mov	r0, r4
   c3a30:	f000 f831 	bl	c3a96 <strlen>
   c3a34:	4420      	add	r0, r4
   c3a36:	bd10      	pop	{r4, pc}

000c3a38 <strcmp>:
   c3a38:	f810 2b01 	ldrb.w	r2, [r0], #1
   c3a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   c3a40:	2a01      	cmp	r2, #1
   c3a42:	bf28      	it	cs
   c3a44:	429a      	cmpcs	r2, r3
   c3a46:	d0f7      	beq.n	c3a38 <strcmp>
   c3a48:	1ad0      	subs	r0, r2, r3
   c3a4a:	4770      	bx	lr

000c3a4c <strcpy>:
   c3a4c:	4603      	mov	r3, r0
   c3a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   c3a52:	f803 2b01 	strb.w	r2, [r3], #1
   c3a56:	2a00      	cmp	r2, #0
   c3a58:	d1f9      	bne.n	c3a4e <strcpy+0x2>
   c3a5a:	4770      	bx	lr

000c3a5c <strdup>:
   c3a5c:	4b02      	ldr	r3, [pc, #8]	; (c3a68 <strdup+0xc>)
   c3a5e:	4601      	mov	r1, r0
   c3a60:	6818      	ldr	r0, [r3, #0]
   c3a62:	f000 b803 	b.w	c3a6c <_strdup_r>
   c3a66:	bf00      	nop
   c3a68:	2003dba0 	.word	0x2003dba0

000c3a6c <_strdup_r>:
   c3a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c3a6e:	4604      	mov	r4, r0
   c3a70:	4608      	mov	r0, r1
   c3a72:	460d      	mov	r5, r1
   c3a74:	f000 f80f 	bl	c3a96 <strlen>
   c3a78:	1c42      	adds	r2, r0, #1
   c3a7a:	4611      	mov	r1, r2
   c3a7c:	4620      	mov	r0, r4
   c3a7e:	9201      	str	r2, [sp, #4]
   c3a80:	f7f9 fe80 	bl	bd784 <_malloc_r>
   c3a84:	4604      	mov	r4, r0
   c3a86:	b118      	cbz	r0, c3a90 <_strdup_r+0x24>
   c3a88:	9a01      	ldr	r2, [sp, #4]
   c3a8a:	4629      	mov	r1, r5
   c3a8c:	f7ff ff50 	bl	c3930 <memcpy>
   c3a90:	4620      	mov	r0, r4
   c3a92:	b003      	add	sp, #12
   c3a94:	bd30      	pop	{r4, r5, pc}

000c3a96 <strlen>:
   c3a96:	4603      	mov	r3, r0
   c3a98:	f813 2b01 	ldrb.w	r2, [r3], #1
   c3a9c:	2a00      	cmp	r2, #0
   c3a9e:	d1fb      	bne.n	c3a98 <strlen+0x2>
   c3aa0:	1a18      	subs	r0, r3, r0
   c3aa2:	3801      	subs	r0, #1
   c3aa4:	4770      	bx	lr
	...

000c3aa8 <strlwr>:
   c3aa8:	b510      	push	{r4, lr}
   c3aaa:	4c07      	ldr	r4, [pc, #28]	; (c3ac8 <strlwr+0x20>)
   c3aac:	1e42      	subs	r2, r0, #1
   c3aae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c3ab2:	b903      	cbnz	r3, c3ab6 <strlwr+0xe>
   c3ab4:	bd10      	pop	{r4, pc}
   c3ab6:	5ce1      	ldrb	r1, [r4, r3]
   c3ab8:	f001 0103 	and.w	r1, r1, #3
   c3abc:	2901      	cmp	r1, #1
   c3abe:	bf08      	it	eq
   c3ac0:	3320      	addeq	r3, #32
   c3ac2:	7013      	strb	r3, [r2, #0]
   c3ac4:	e7f3      	b.n	c3aae <strlwr+0x6>
   c3ac6:	bf00      	nop
   c3ac8:	000c79b1 	.word	0x000c79b1

000c3acc <strncmp>:
   c3acc:	b510      	push	{r4, lr}
   c3ace:	b17a      	cbz	r2, c3af0 <strncmp+0x24>
   c3ad0:	4603      	mov	r3, r0
   c3ad2:	3901      	subs	r1, #1
   c3ad4:	1884      	adds	r4, r0, r2
   c3ad6:	f813 0b01 	ldrb.w	r0, [r3], #1
   c3ada:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c3ade:	4290      	cmp	r0, r2
   c3ae0:	d101      	bne.n	c3ae6 <strncmp+0x1a>
   c3ae2:	42a3      	cmp	r3, r4
   c3ae4:	d101      	bne.n	c3aea <strncmp+0x1e>
   c3ae6:	1a80      	subs	r0, r0, r2
   c3ae8:	bd10      	pop	{r4, pc}
   c3aea:	2800      	cmp	r0, #0
   c3aec:	d1f3      	bne.n	c3ad6 <strncmp+0xa>
   c3aee:	e7fa      	b.n	c3ae6 <strncmp+0x1a>
   c3af0:	4610      	mov	r0, r2
   c3af2:	e7f9      	b.n	c3ae8 <strncmp+0x1c>

000c3af4 <strncpy>:
   c3af4:	b510      	push	{r4, lr}
   c3af6:	3901      	subs	r1, #1
   c3af8:	4603      	mov	r3, r0
   c3afa:	b132      	cbz	r2, c3b0a <strncpy+0x16>
   c3afc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c3b00:	f803 4b01 	strb.w	r4, [r3], #1
   c3b04:	3a01      	subs	r2, #1
   c3b06:	2c00      	cmp	r4, #0
   c3b08:	d1f7      	bne.n	c3afa <strncpy+0x6>
   c3b0a:	441a      	add	r2, r3
   c3b0c:	2100      	movs	r1, #0
   c3b0e:	4293      	cmp	r3, r2
   c3b10:	d100      	bne.n	c3b14 <strncpy+0x20>
   c3b12:	bd10      	pop	{r4, pc}
   c3b14:	f803 1b01 	strb.w	r1, [r3], #1
   c3b18:	e7f9      	b.n	c3b0e <strncpy+0x1a>

000c3b1a <strnlen>:
   c3b1a:	b510      	push	{r4, lr}
   c3b1c:	4602      	mov	r2, r0
   c3b1e:	4401      	add	r1, r0
   c3b20:	428a      	cmp	r2, r1
   c3b22:	4613      	mov	r3, r2
   c3b24:	d003      	beq.n	c3b2e <strnlen+0x14>
   c3b26:	781c      	ldrb	r4, [r3, #0]
   c3b28:	3201      	adds	r2, #1
   c3b2a:	2c00      	cmp	r4, #0
   c3b2c:	d1f8      	bne.n	c3b20 <strnlen+0x6>
   c3b2e:	1a18      	subs	r0, r3, r0
   c3b30:	bd10      	pop	{r4, pc}

000c3b32 <strrchr>:
   c3b32:	b538      	push	{r3, r4, r5, lr}
   c3b34:	4603      	mov	r3, r0
   c3b36:	460c      	mov	r4, r1
   c3b38:	b969      	cbnz	r1, c3b56 <strrchr+0x24>
   c3b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3b3e:	f7ff bf64 	b.w	c3a0a <strchr>
   c3b42:	1c43      	adds	r3, r0, #1
   c3b44:	4605      	mov	r5, r0
   c3b46:	4621      	mov	r1, r4
   c3b48:	4618      	mov	r0, r3
   c3b4a:	f7ff ff5e 	bl	c3a0a <strchr>
   c3b4e:	2800      	cmp	r0, #0
   c3b50:	d1f7      	bne.n	c3b42 <strrchr+0x10>
   c3b52:	4628      	mov	r0, r5
   c3b54:	bd38      	pop	{r3, r4, r5, pc}
   c3b56:	2500      	movs	r5, #0
   c3b58:	e7f5      	b.n	c3b46 <strrchr+0x14>

000c3b5a <strstr>:
   c3b5a:	780a      	ldrb	r2, [r1, #0]
   c3b5c:	b570      	push	{r4, r5, r6, lr}
   c3b5e:	b96a      	cbnz	r2, c3b7c <strstr+0x22>
   c3b60:	bd70      	pop	{r4, r5, r6, pc}
   c3b62:	429a      	cmp	r2, r3
   c3b64:	d109      	bne.n	c3b7a <strstr+0x20>
   c3b66:	460c      	mov	r4, r1
   c3b68:	4605      	mov	r5, r0
   c3b6a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c3b6e:	2b00      	cmp	r3, #0
   c3b70:	d0f6      	beq.n	c3b60 <strstr+0x6>
   c3b72:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c3b76:	429e      	cmp	r6, r3
   c3b78:	d0f7      	beq.n	c3b6a <strstr+0x10>
   c3b7a:	3001      	adds	r0, #1
   c3b7c:	7803      	ldrb	r3, [r0, #0]
   c3b7e:	2b00      	cmp	r3, #0
   c3b80:	d1ef      	bne.n	c3b62 <strstr+0x8>
   c3b82:	4618      	mov	r0, r3
   c3b84:	e7ec      	b.n	c3b60 <strstr+0x6>

000c3b86 <sulp>:
   c3b86:	b570      	push	{r4, r5, r6, lr}
   c3b88:	4604      	mov	r4, r0
   c3b8a:	460d      	mov	r5, r1
   c3b8c:	ec45 4b10 	vmov	d0, r4, r5
   c3b90:	4616      	mov	r6, r2
   c3b92:	f001 fe0d 	bl	c57b0 <__ulp>
   c3b96:	ec51 0b10 	vmov	r0, r1, d0
   c3b9a:	b17e      	cbz	r6, c3bbc <sulp+0x36>
   c3b9c:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c3ba0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c3ba4:	2b00      	cmp	r3, #0
   c3ba6:	dd09      	ble.n	c3bbc <sulp+0x36>
   c3ba8:	051b      	lsls	r3, r3, #20
   c3baa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c3bae:	2400      	movs	r4, #0
   c3bb0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c3bb4:	4622      	mov	r2, r4
   c3bb6:	462b      	mov	r3, r5
   c3bb8:	f7ff fb2e 	bl	c3218 <__aeabi_dmul>
   c3bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000c3bc0 <_strtod_l>:
   c3bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3bc4:	ed2d 8b02 	vpush	{d8}
   c3bc8:	b09d      	sub	sp, #116	; 0x74
   c3bca:	461f      	mov	r7, r3
   c3bcc:	2300      	movs	r3, #0
   c3bce:	9318      	str	r3, [sp, #96]	; 0x60
   c3bd0:	4ba2      	ldr	r3, [pc, #648]	; (c3e5c <_strtod_l+0x29c>)
   c3bd2:	9213      	str	r2, [sp, #76]	; 0x4c
   c3bd4:	681b      	ldr	r3, [r3, #0]
   c3bd6:	9305      	str	r3, [sp, #20]
   c3bd8:	4604      	mov	r4, r0
   c3bda:	4618      	mov	r0, r3
   c3bdc:	4688      	mov	r8, r1
   c3bde:	f7ff ff5a 	bl	c3a96 <strlen>
   c3be2:	f04f 0a00 	mov.w	sl, #0
   c3be6:	4605      	mov	r5, r0
   c3be8:	f04f 0b00 	mov.w	fp, #0
   c3bec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3bf2:	781a      	ldrb	r2, [r3, #0]
   c3bf4:	2a2b      	cmp	r2, #43	; 0x2b
   c3bf6:	d04e      	beq.n	c3c96 <_strtod_l+0xd6>
   c3bf8:	d83b      	bhi.n	c3c72 <_strtod_l+0xb2>
   c3bfa:	2a0d      	cmp	r2, #13
   c3bfc:	d834      	bhi.n	c3c68 <_strtod_l+0xa8>
   c3bfe:	2a08      	cmp	r2, #8
   c3c00:	d834      	bhi.n	c3c6c <_strtod_l+0xac>
   c3c02:	2a00      	cmp	r2, #0
   c3c04:	d03e      	beq.n	c3c84 <_strtod_l+0xc4>
   c3c06:	2300      	movs	r3, #0
   c3c08:	930a      	str	r3, [sp, #40]	; 0x28
   c3c0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c3c0c:	7833      	ldrb	r3, [r6, #0]
   c3c0e:	2b30      	cmp	r3, #48	; 0x30
   c3c10:	f040 80b0 	bne.w	c3d74 <_strtod_l+0x1b4>
   c3c14:	7873      	ldrb	r3, [r6, #1]
   c3c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c3c1a:	2b58      	cmp	r3, #88	; 0x58
   c3c1c:	d168      	bne.n	c3cf0 <_strtod_l+0x130>
   c3c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3c20:	9301      	str	r3, [sp, #4]
   c3c22:	ab18      	add	r3, sp, #96	; 0x60
   c3c24:	9702      	str	r7, [sp, #8]
   c3c26:	9300      	str	r3, [sp, #0]
   c3c28:	4a8d      	ldr	r2, [pc, #564]	; (c3e60 <_strtod_l+0x2a0>)
   c3c2a:	ab19      	add	r3, sp, #100	; 0x64
   c3c2c:	a917      	add	r1, sp, #92	; 0x5c
   c3c2e:	4620      	mov	r0, r4
   c3c30:	f000 ff2e 	bl	c4a90 <__gethex>
   c3c34:	f010 0707 	ands.w	r7, r0, #7
   c3c38:	4605      	mov	r5, r0
   c3c3a:	d005      	beq.n	c3c48 <_strtod_l+0x88>
   c3c3c:	2f06      	cmp	r7, #6
   c3c3e:	d12c      	bne.n	c3c9a <_strtod_l+0xda>
   c3c40:	3601      	adds	r6, #1
   c3c42:	2300      	movs	r3, #0
   c3c44:	9617      	str	r6, [sp, #92]	; 0x5c
   c3c46:	930a      	str	r3, [sp, #40]	; 0x28
   c3c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3c4a:	2b00      	cmp	r3, #0
   c3c4c:	f040 8590 	bne.w	c4770 <_strtod_l+0xbb0>
   c3c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c3c52:	b1eb      	cbz	r3, c3c90 <_strtod_l+0xd0>
   c3c54:	4652      	mov	r2, sl
   c3c56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c3c5a:	ec43 2b10 	vmov	d0, r2, r3
   c3c5e:	b01d      	add	sp, #116	; 0x74
   c3c60:	ecbd 8b02 	vpop	{d8}
   c3c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3c68:	2a20      	cmp	r2, #32
   c3c6a:	d1cc      	bne.n	c3c06 <_strtod_l+0x46>
   c3c6c:	3301      	adds	r3, #1
   c3c6e:	9317      	str	r3, [sp, #92]	; 0x5c
   c3c70:	e7be      	b.n	c3bf0 <_strtod_l+0x30>
   c3c72:	2a2d      	cmp	r2, #45	; 0x2d
   c3c74:	d1c7      	bne.n	c3c06 <_strtod_l+0x46>
   c3c76:	2201      	movs	r2, #1
   c3c78:	920a      	str	r2, [sp, #40]	; 0x28
   c3c7a:	1c5a      	adds	r2, r3, #1
   c3c7c:	9217      	str	r2, [sp, #92]	; 0x5c
   c3c7e:	785b      	ldrb	r3, [r3, #1]
   c3c80:	2b00      	cmp	r3, #0
   c3c82:	d1c2      	bne.n	c3c0a <_strtod_l+0x4a>
   c3c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c3c86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3c8a:	2b00      	cmp	r3, #0
   c3c8c:	f040 856e 	bne.w	c476c <_strtod_l+0xbac>
   c3c90:	4652      	mov	r2, sl
   c3c92:	465b      	mov	r3, fp
   c3c94:	e7e1      	b.n	c3c5a <_strtod_l+0x9a>
   c3c96:	2200      	movs	r2, #0
   c3c98:	e7ee      	b.n	c3c78 <_strtod_l+0xb8>
   c3c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c3c9c:	b13a      	cbz	r2, c3cae <_strtod_l+0xee>
   c3c9e:	2135      	movs	r1, #53	; 0x35
   c3ca0:	a81a      	add	r0, sp, #104	; 0x68
   c3ca2:	f001 fe90 	bl	c59c6 <__copybits>
   c3ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c3ca8:	4620      	mov	r0, r4
   c3caa:	f001 fa4f 	bl	c514c <_Bfree>
   c3cae:	3f01      	subs	r7, #1
   c3cb0:	2f04      	cmp	r7, #4
   c3cb2:	d806      	bhi.n	c3cc2 <_strtod_l+0x102>
   c3cb4:	e8df f007 	tbb	[pc, r7]
   c3cb8:	1714030a 	.word	0x1714030a
   c3cbc:	0a          	.byte	0x0a
   c3cbd:	00          	.byte	0x00
   c3cbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c3cc2:	0728      	lsls	r0, r5, #28
   c3cc4:	d5c0      	bpl.n	c3c48 <_strtod_l+0x88>
   c3cc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c3cca:	e7bd      	b.n	c3c48 <_strtod_l+0x88>
   c3ccc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c3cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c3cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c3cd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c3cda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c3cde:	e7f0      	b.n	c3cc2 <_strtod_l+0x102>
   c3ce0:	f8df b180 	ldr.w	fp, [pc, #384]	; c3e64 <_strtod_l+0x2a4>
   c3ce4:	e7ed      	b.n	c3cc2 <_strtod_l+0x102>
   c3ce6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c3cea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c3cee:	e7e8      	b.n	c3cc2 <_strtod_l+0x102>
   c3cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3cf2:	1c5a      	adds	r2, r3, #1
   c3cf4:	9217      	str	r2, [sp, #92]	; 0x5c
   c3cf6:	785b      	ldrb	r3, [r3, #1]
   c3cf8:	2b30      	cmp	r3, #48	; 0x30
   c3cfa:	d0f9      	beq.n	c3cf0 <_strtod_l+0x130>
   c3cfc:	2b00      	cmp	r3, #0
   c3cfe:	d0a3      	beq.n	c3c48 <_strtod_l+0x88>
   c3d00:	2301      	movs	r3, #1
   c3d02:	f04f 0900 	mov.w	r9, #0
   c3d06:	9304      	str	r3, [sp, #16]
   c3d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3d0a:	9308      	str	r3, [sp, #32]
   c3d0c:	f8cd 901c 	str.w	r9, [sp, #28]
   c3d10:	464f      	mov	r7, r9
   c3d12:	220a      	movs	r2, #10
   c3d14:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c3d16:	7806      	ldrb	r6, [r0, #0]
   c3d18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c3d1c:	b2d9      	uxtb	r1, r3
   c3d1e:	2909      	cmp	r1, #9
   c3d20:	d92a      	bls.n	c3d78 <_strtod_l+0x1b8>
   c3d22:	9905      	ldr	r1, [sp, #20]
   c3d24:	462a      	mov	r2, r5
   c3d26:	f7ff fed1 	bl	c3acc <strncmp>
   c3d2a:	b398      	cbz	r0, c3d94 <_strtod_l+0x1d4>
   c3d2c:	2000      	movs	r0, #0
   c3d2e:	4632      	mov	r2, r6
   c3d30:	463d      	mov	r5, r7
   c3d32:	9005      	str	r0, [sp, #20]
   c3d34:	4603      	mov	r3, r0
   c3d36:	2a65      	cmp	r2, #101	; 0x65
   c3d38:	d001      	beq.n	c3d3e <_strtod_l+0x17e>
   c3d3a:	2a45      	cmp	r2, #69	; 0x45
   c3d3c:	d118      	bne.n	c3d70 <_strtod_l+0x1b0>
   c3d3e:	b91d      	cbnz	r5, c3d48 <_strtod_l+0x188>
   c3d40:	9a04      	ldr	r2, [sp, #16]
   c3d42:	4302      	orrs	r2, r0
   c3d44:	d09e      	beq.n	c3c84 <_strtod_l+0xc4>
   c3d46:	2500      	movs	r5, #0
   c3d48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c3d4c:	f108 0201 	add.w	r2, r8, #1
   c3d50:	9217      	str	r2, [sp, #92]	; 0x5c
   c3d52:	f898 2001 	ldrb.w	r2, [r8, #1]
   c3d56:	2a2b      	cmp	r2, #43	; 0x2b
   c3d58:	d075      	beq.n	c3e46 <_strtod_l+0x286>
   c3d5a:	2a2d      	cmp	r2, #45	; 0x2d
   c3d5c:	d07b      	beq.n	c3e56 <_strtod_l+0x296>
   c3d5e:	f04f 0c00 	mov.w	ip, #0
   c3d62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c3d66:	2909      	cmp	r1, #9
   c3d68:	f240 8082 	bls.w	c3e70 <_strtod_l+0x2b0>
   c3d6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c3d70:	2600      	movs	r6, #0
   c3d72:	e09d      	b.n	c3eb0 <_strtod_l+0x2f0>
   c3d74:	2300      	movs	r3, #0
   c3d76:	e7c4      	b.n	c3d02 <_strtod_l+0x142>
   c3d78:	2f08      	cmp	r7, #8
   c3d7a:	bfd8      	it	le
   c3d7c:	9907      	ldrle	r1, [sp, #28]
   c3d7e:	f100 0001 	add.w	r0, r0, #1
   c3d82:	bfda      	itte	le
   c3d84:	fb02 3301 	mlale	r3, r2, r1, r3
   c3d88:	9307      	strle	r3, [sp, #28]
   c3d8a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c3d8e:	3701      	adds	r7, #1
   c3d90:	9017      	str	r0, [sp, #92]	; 0x5c
   c3d92:	e7bf      	b.n	c3d14 <_strtod_l+0x154>
   c3d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3d96:	195a      	adds	r2, r3, r5
   c3d98:	9217      	str	r2, [sp, #92]	; 0x5c
   c3d9a:	5d5a      	ldrb	r2, [r3, r5]
   c3d9c:	2f00      	cmp	r7, #0
   c3d9e:	d037      	beq.n	c3e10 <_strtod_l+0x250>
   c3da0:	9005      	str	r0, [sp, #20]
   c3da2:	463d      	mov	r5, r7
   c3da4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c3da8:	2b09      	cmp	r3, #9
   c3daa:	d912      	bls.n	c3dd2 <_strtod_l+0x212>
   c3dac:	2301      	movs	r3, #1
   c3dae:	e7c2      	b.n	c3d36 <_strtod_l+0x176>
   c3db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3db2:	1c5a      	adds	r2, r3, #1
   c3db4:	9217      	str	r2, [sp, #92]	; 0x5c
   c3db6:	785a      	ldrb	r2, [r3, #1]
   c3db8:	3001      	adds	r0, #1
   c3dba:	2a30      	cmp	r2, #48	; 0x30
   c3dbc:	d0f8      	beq.n	c3db0 <_strtod_l+0x1f0>
   c3dbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c3dc2:	2b08      	cmp	r3, #8
   c3dc4:	f200 84d9 	bhi.w	c477a <_strtod_l+0xbba>
   c3dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3dca:	9005      	str	r0, [sp, #20]
   c3dcc:	2000      	movs	r0, #0
   c3dce:	9308      	str	r3, [sp, #32]
   c3dd0:	4605      	mov	r5, r0
   c3dd2:	3a30      	subs	r2, #48	; 0x30
   c3dd4:	f100 0301 	add.w	r3, r0, #1
   c3dd8:	d014      	beq.n	c3e04 <_strtod_l+0x244>
   c3dda:	9905      	ldr	r1, [sp, #20]
   c3ddc:	4419      	add	r1, r3
   c3dde:	9105      	str	r1, [sp, #20]
   c3de0:	462b      	mov	r3, r5
   c3de2:	eb00 0e05 	add.w	lr, r0, r5
   c3de6:	210a      	movs	r1, #10
   c3de8:	4573      	cmp	r3, lr
   c3dea:	d113      	bne.n	c3e14 <_strtod_l+0x254>
   c3dec:	182b      	adds	r3, r5, r0
   c3dee:	2b08      	cmp	r3, #8
   c3df0:	f105 0501 	add.w	r5, r5, #1
   c3df4:	4405      	add	r5, r0
   c3df6:	dc1c      	bgt.n	c3e32 <_strtod_l+0x272>
   c3df8:	9907      	ldr	r1, [sp, #28]
   c3dfa:	230a      	movs	r3, #10
   c3dfc:	fb03 2301 	mla	r3, r3, r1, r2
   c3e00:	9307      	str	r3, [sp, #28]
   c3e02:	2300      	movs	r3, #0
   c3e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3e06:	1c51      	adds	r1, r2, #1
   c3e08:	9117      	str	r1, [sp, #92]	; 0x5c
   c3e0a:	7852      	ldrb	r2, [r2, #1]
   c3e0c:	4618      	mov	r0, r3
   c3e0e:	e7c9      	b.n	c3da4 <_strtod_l+0x1e4>
   c3e10:	4638      	mov	r0, r7
   c3e12:	e7d2      	b.n	c3dba <_strtod_l+0x1fa>
   c3e14:	2b08      	cmp	r3, #8
   c3e16:	dc04      	bgt.n	c3e22 <_strtod_l+0x262>
   c3e18:	9e07      	ldr	r6, [sp, #28]
   c3e1a:	434e      	muls	r6, r1
   c3e1c:	9607      	str	r6, [sp, #28]
   c3e1e:	3301      	adds	r3, #1
   c3e20:	e7e2      	b.n	c3de8 <_strtod_l+0x228>
   c3e22:	f103 0c01 	add.w	ip, r3, #1
   c3e26:	f1bc 0f10 	cmp.w	ip, #16
   c3e2a:	bfd8      	it	le
   c3e2c:	fb01 f909 	mulle.w	r9, r1, r9
   c3e30:	e7f5      	b.n	c3e1e <_strtod_l+0x25e>
   c3e32:	2d10      	cmp	r5, #16
   c3e34:	bfdc      	itt	le
   c3e36:	230a      	movle	r3, #10
   c3e38:	fb03 2909 	mlale	r9, r3, r9, r2
   c3e3c:	e7e1      	b.n	c3e02 <_strtod_l+0x242>
   c3e3e:	2300      	movs	r3, #0
   c3e40:	9305      	str	r3, [sp, #20]
   c3e42:	2301      	movs	r3, #1
   c3e44:	e77c      	b.n	c3d40 <_strtod_l+0x180>
   c3e46:	f04f 0c00 	mov.w	ip, #0
   c3e4a:	f108 0202 	add.w	r2, r8, #2
   c3e4e:	9217      	str	r2, [sp, #92]	; 0x5c
   c3e50:	f898 2002 	ldrb.w	r2, [r8, #2]
   c3e54:	e785      	b.n	c3d62 <_strtod_l+0x1a2>
   c3e56:	f04f 0c01 	mov.w	ip, #1
   c3e5a:	e7f6      	b.n	c3e4a <_strtod_l+0x28a>
   c3e5c:	000c7b24 	.word	0x000c7b24
   c3e60:	000c795c 	.word	0x000c795c
   c3e64:	7ff00000 	.word	0x7ff00000
   c3e68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3e6a:	1c51      	adds	r1, r2, #1
   c3e6c:	9117      	str	r1, [sp, #92]	; 0x5c
   c3e6e:	7852      	ldrb	r2, [r2, #1]
   c3e70:	2a30      	cmp	r2, #48	; 0x30
   c3e72:	d0f9      	beq.n	c3e68 <_strtod_l+0x2a8>
   c3e74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c3e78:	2908      	cmp	r1, #8
   c3e7a:	f63f af79 	bhi.w	c3d70 <_strtod_l+0x1b0>
   c3e7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c3e82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3e84:	9206      	str	r2, [sp, #24]
   c3e86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c3e88:	1c51      	adds	r1, r2, #1
   c3e8a:	9117      	str	r1, [sp, #92]	; 0x5c
   c3e8c:	7852      	ldrb	r2, [r2, #1]
   c3e8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c3e92:	2e09      	cmp	r6, #9
   c3e94:	d937      	bls.n	c3f06 <_strtod_l+0x346>
   c3e96:	9e06      	ldr	r6, [sp, #24]
   c3e98:	1b89      	subs	r1, r1, r6
   c3e9a:	2908      	cmp	r1, #8
   c3e9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c3ea0:	dc02      	bgt.n	c3ea8 <_strtod_l+0x2e8>
   c3ea2:	4576      	cmp	r6, lr
   c3ea4:	bfa8      	it	ge
   c3ea6:	4676      	movge	r6, lr
   c3ea8:	f1bc 0f00 	cmp.w	ip, #0
   c3eac:	d000      	beq.n	c3eb0 <_strtod_l+0x2f0>
   c3eae:	4276      	negs	r6, r6
   c3eb0:	2d00      	cmp	r5, #0
   c3eb2:	d14d      	bne.n	c3f50 <_strtod_l+0x390>
   c3eb4:	9904      	ldr	r1, [sp, #16]
   c3eb6:	4301      	orrs	r1, r0
   c3eb8:	f47f aec6 	bne.w	c3c48 <_strtod_l+0x88>
   c3ebc:	2b00      	cmp	r3, #0
   c3ebe:	f47f aee1 	bne.w	c3c84 <_strtod_l+0xc4>
   c3ec2:	2a69      	cmp	r2, #105	; 0x69
   c3ec4:	d027      	beq.n	c3f16 <_strtod_l+0x356>
   c3ec6:	dc24      	bgt.n	c3f12 <_strtod_l+0x352>
   c3ec8:	2a49      	cmp	r2, #73	; 0x49
   c3eca:	d024      	beq.n	c3f16 <_strtod_l+0x356>
   c3ecc:	2a4e      	cmp	r2, #78	; 0x4e
   c3ece:	f47f aed9 	bne.w	c3c84 <_strtod_l+0xc4>
   c3ed2:	499f      	ldr	r1, [pc, #636]	; (c4150 <_strtod_l+0x590>)
   c3ed4:	a817      	add	r0, sp, #92	; 0x5c
   c3ed6:	f001 f833 	bl	c4f40 <__match>
   c3eda:	2800      	cmp	r0, #0
   c3edc:	f43f aed2 	beq.w	c3c84 <_strtod_l+0xc4>
   c3ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3ee2:	781b      	ldrb	r3, [r3, #0]
   c3ee4:	2b28      	cmp	r3, #40	; 0x28
   c3ee6:	d12d      	bne.n	c3f44 <_strtod_l+0x384>
   c3ee8:	499a      	ldr	r1, [pc, #616]	; (c4154 <_strtod_l+0x594>)
   c3eea:	aa1a      	add	r2, sp, #104	; 0x68
   c3eec:	a817      	add	r0, sp, #92	; 0x5c
   c3eee:	f001 f83b 	bl	c4f68 <__hexnan>
   c3ef2:	2805      	cmp	r0, #5
   c3ef4:	d126      	bne.n	c3f44 <_strtod_l+0x384>
   c3ef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c3ef8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c3efc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c3f00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c3f04:	e6a0      	b.n	c3c48 <_strtod_l+0x88>
   c3f06:	210a      	movs	r1, #10
   c3f08:	fb01 2e0e 	mla	lr, r1, lr, r2
   c3f0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c3f10:	e7b9      	b.n	c3e86 <_strtod_l+0x2c6>
   c3f12:	2a6e      	cmp	r2, #110	; 0x6e
   c3f14:	e7db      	b.n	c3ece <_strtod_l+0x30e>
   c3f16:	4990      	ldr	r1, [pc, #576]	; (c4158 <_strtod_l+0x598>)
   c3f18:	a817      	add	r0, sp, #92	; 0x5c
   c3f1a:	f001 f811 	bl	c4f40 <__match>
   c3f1e:	2800      	cmp	r0, #0
   c3f20:	f43f aeb0 	beq.w	c3c84 <_strtod_l+0xc4>
   c3f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3f26:	498d      	ldr	r1, [pc, #564]	; (c415c <_strtod_l+0x59c>)
   c3f28:	3b01      	subs	r3, #1
   c3f2a:	a817      	add	r0, sp, #92	; 0x5c
   c3f2c:	9317      	str	r3, [sp, #92]	; 0x5c
   c3f2e:	f001 f807 	bl	c4f40 <__match>
   c3f32:	b910      	cbnz	r0, c3f3a <_strtod_l+0x37a>
   c3f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c3f36:	3301      	adds	r3, #1
   c3f38:	9317      	str	r3, [sp, #92]	; 0x5c
   c3f3a:	f8df b230 	ldr.w	fp, [pc, #560]	; c416c <_strtod_l+0x5ac>
   c3f3e:	f04f 0a00 	mov.w	sl, #0
   c3f42:	e681      	b.n	c3c48 <_strtod_l+0x88>
   c3f44:	4886      	ldr	r0, [pc, #536]	; (c4160 <_strtod_l+0x5a0>)
   c3f46:	f001 fd93 	bl	c5a70 <nan>
   c3f4a:	ec5b ab10 	vmov	sl, fp, d0
   c3f4e:	e67b      	b.n	c3c48 <_strtod_l+0x88>
   c3f50:	9b05      	ldr	r3, [sp, #20]
   c3f52:	9807      	ldr	r0, [sp, #28]
   c3f54:	1af3      	subs	r3, r6, r3
   c3f56:	2f00      	cmp	r7, #0
   c3f58:	bf08      	it	eq
   c3f5a:	462f      	moveq	r7, r5
   c3f5c:	2d10      	cmp	r5, #16
   c3f5e:	9306      	str	r3, [sp, #24]
   c3f60:	46a8      	mov	r8, r5
   c3f62:	bfa8      	it	ge
   c3f64:	f04f 0810 	movge.w	r8, #16
   c3f68:	f7ff f8dc 	bl	c3124 <__aeabi_ui2d>
   c3f6c:	2d09      	cmp	r5, #9
   c3f6e:	4682      	mov	sl, r0
   c3f70:	468b      	mov	fp, r1
   c3f72:	dd13      	ble.n	c3f9c <_strtod_l+0x3dc>
   c3f74:	4b7b      	ldr	r3, [pc, #492]	; (c4164 <_strtod_l+0x5a4>)
   c3f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c3f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c3f7e:	f7ff f94b 	bl	c3218 <__aeabi_dmul>
   c3f82:	4682      	mov	sl, r0
   c3f84:	4648      	mov	r0, r9
   c3f86:	468b      	mov	fp, r1
   c3f88:	f7ff f8cc 	bl	c3124 <__aeabi_ui2d>
   c3f8c:	4602      	mov	r2, r0
   c3f8e:	460b      	mov	r3, r1
   c3f90:	4650      	mov	r0, sl
   c3f92:	4659      	mov	r1, fp
   c3f94:	f7fe ff8a 	bl	c2eac <__adddf3>
   c3f98:	4682      	mov	sl, r0
   c3f9a:	468b      	mov	fp, r1
   c3f9c:	2d0f      	cmp	r5, #15
   c3f9e:	dc38      	bgt.n	c4012 <_strtod_l+0x452>
   c3fa0:	9b06      	ldr	r3, [sp, #24]
   c3fa2:	2b00      	cmp	r3, #0
   c3fa4:	f43f ae50 	beq.w	c3c48 <_strtod_l+0x88>
   c3fa8:	dd24      	ble.n	c3ff4 <_strtod_l+0x434>
   c3faa:	2b16      	cmp	r3, #22
   c3fac:	dc0b      	bgt.n	c3fc6 <_strtod_l+0x406>
   c3fae:	496d      	ldr	r1, [pc, #436]	; (c4164 <_strtod_l+0x5a4>)
   c3fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c3fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c3fb8:	4652      	mov	r2, sl
   c3fba:	465b      	mov	r3, fp
   c3fbc:	f7ff f92c 	bl	c3218 <__aeabi_dmul>
   c3fc0:	4682      	mov	sl, r0
   c3fc2:	468b      	mov	fp, r1
   c3fc4:	e640      	b.n	c3c48 <_strtod_l+0x88>
   c3fc6:	9a06      	ldr	r2, [sp, #24]
   c3fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c3fcc:	4293      	cmp	r3, r2
   c3fce:	db20      	blt.n	c4012 <_strtod_l+0x452>
   c3fd0:	4c64      	ldr	r4, [pc, #400]	; (c4164 <_strtod_l+0x5a4>)
   c3fd2:	f1c5 050f 	rsb	r5, r5, #15
   c3fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c3fda:	4652      	mov	r2, sl
   c3fdc:	465b      	mov	r3, fp
   c3fde:	e9d1 0100 	ldrd	r0, r1, [r1]
   c3fe2:	f7ff f919 	bl	c3218 <__aeabi_dmul>
   c3fe6:	9b06      	ldr	r3, [sp, #24]
   c3fe8:	1b5d      	subs	r5, r3, r5
   c3fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c3fee:	e9d4 2300 	ldrd	r2, r3, [r4]
   c3ff2:	e7e3      	b.n	c3fbc <_strtod_l+0x3fc>
   c3ff4:	9b06      	ldr	r3, [sp, #24]
   c3ff6:	3316      	adds	r3, #22
   c3ff8:	db0b      	blt.n	c4012 <_strtod_l+0x452>
   c3ffa:	9b05      	ldr	r3, [sp, #20]
   c3ffc:	1b9e      	subs	r6, r3, r6
   c3ffe:	4b59      	ldr	r3, [pc, #356]	; (c4164 <_strtod_l+0x5a4>)
   c4000:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4004:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4008:	4650      	mov	r0, sl
   c400a:	4659      	mov	r1, fp
   c400c:	f7ff fa2e 	bl	c346c <__aeabi_ddiv>
   c4010:	e7d6      	b.n	c3fc0 <_strtod_l+0x400>
   c4012:	9b06      	ldr	r3, [sp, #24]
   c4014:	eba5 0808 	sub.w	r8, r5, r8
   c4018:	4498      	add	r8, r3
   c401a:	f1b8 0f00 	cmp.w	r8, #0
   c401e:	dd74      	ble.n	c410a <_strtod_l+0x54a>
   c4020:	f018 030f 	ands.w	r3, r8, #15
   c4024:	d00a      	beq.n	c403c <_strtod_l+0x47c>
   c4026:	494f      	ldr	r1, [pc, #316]	; (c4164 <_strtod_l+0x5a4>)
   c4028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c402c:	4652      	mov	r2, sl
   c402e:	465b      	mov	r3, fp
   c4030:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4034:	f7ff f8f0 	bl	c3218 <__aeabi_dmul>
   c4038:	4682      	mov	sl, r0
   c403a:	468b      	mov	fp, r1
   c403c:	f038 080f 	bics.w	r8, r8, #15
   c4040:	d04f      	beq.n	c40e2 <_strtod_l+0x522>
   c4042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4046:	dd22      	ble.n	c408e <_strtod_l+0x4ce>
   c4048:	2500      	movs	r5, #0
   c404a:	462e      	mov	r6, r5
   c404c:	9507      	str	r5, [sp, #28]
   c404e:	9505      	str	r5, [sp, #20]
   c4050:	2322      	movs	r3, #34	; 0x22
   c4052:	f8df b118 	ldr.w	fp, [pc, #280]	; c416c <_strtod_l+0x5ac>
   c4056:	6023      	str	r3, [r4, #0]
   c4058:	f04f 0a00 	mov.w	sl, #0
   c405c:	9b07      	ldr	r3, [sp, #28]
   c405e:	2b00      	cmp	r3, #0
   c4060:	f43f adf2 	beq.w	c3c48 <_strtod_l+0x88>
   c4064:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4066:	4620      	mov	r0, r4
   c4068:	f001 f870 	bl	c514c <_Bfree>
   c406c:	9905      	ldr	r1, [sp, #20]
   c406e:	4620      	mov	r0, r4
   c4070:	f001 f86c 	bl	c514c <_Bfree>
   c4074:	4631      	mov	r1, r6
   c4076:	4620      	mov	r0, r4
   c4078:	f001 f868 	bl	c514c <_Bfree>
   c407c:	9907      	ldr	r1, [sp, #28]
   c407e:	4620      	mov	r0, r4
   c4080:	f001 f864 	bl	c514c <_Bfree>
   c4084:	4629      	mov	r1, r5
   c4086:	4620      	mov	r0, r4
   c4088:	f001 f860 	bl	c514c <_Bfree>
   c408c:	e5dc      	b.n	c3c48 <_strtod_l+0x88>
   c408e:	4b36      	ldr	r3, [pc, #216]	; (c4168 <_strtod_l+0x5a8>)
   c4090:	9304      	str	r3, [sp, #16]
   c4092:	2300      	movs	r3, #0
   c4094:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4098:	4650      	mov	r0, sl
   c409a:	4659      	mov	r1, fp
   c409c:	4699      	mov	r9, r3
   c409e:	f1b8 0f01 	cmp.w	r8, #1
   c40a2:	dc21      	bgt.n	c40e8 <_strtod_l+0x528>
   c40a4:	b10b      	cbz	r3, c40aa <_strtod_l+0x4ea>
   c40a6:	4682      	mov	sl, r0
   c40a8:	468b      	mov	fp, r1
   c40aa:	4b2f      	ldr	r3, [pc, #188]	; (c4168 <_strtod_l+0x5a8>)
   c40ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c40b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c40b4:	4652      	mov	r2, sl
   c40b6:	465b      	mov	r3, fp
   c40b8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c40bc:	f7ff f8ac 	bl	c3218 <__aeabi_dmul>
   c40c0:	4b2a      	ldr	r3, [pc, #168]	; (c416c <_strtod_l+0x5ac>)
   c40c2:	460a      	mov	r2, r1
   c40c4:	400b      	ands	r3, r1
   c40c6:	492a      	ldr	r1, [pc, #168]	; (c4170 <_strtod_l+0x5b0>)
   c40c8:	428b      	cmp	r3, r1
   c40ca:	4682      	mov	sl, r0
   c40cc:	d8bc      	bhi.n	c4048 <_strtod_l+0x488>
   c40ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c40d2:	428b      	cmp	r3, r1
   c40d4:	bf86      	itte	hi
   c40d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4174 <_strtod_l+0x5b4>
   c40da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c40de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c40e2:	2300      	movs	r3, #0
   c40e4:	9304      	str	r3, [sp, #16]
   c40e6:	e084      	b.n	c41f2 <_strtod_l+0x632>
   c40e8:	f018 0f01 	tst.w	r8, #1
   c40ec:	d005      	beq.n	c40fa <_strtod_l+0x53a>
   c40ee:	9b04      	ldr	r3, [sp, #16]
   c40f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c40f4:	f7ff f890 	bl	c3218 <__aeabi_dmul>
   c40f8:	2301      	movs	r3, #1
   c40fa:	9a04      	ldr	r2, [sp, #16]
   c40fc:	3208      	adds	r2, #8
   c40fe:	f109 0901 	add.w	r9, r9, #1
   c4102:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4106:	9204      	str	r2, [sp, #16]
   c4108:	e7c9      	b.n	c409e <_strtod_l+0x4de>
   c410a:	d0ea      	beq.n	c40e2 <_strtod_l+0x522>
   c410c:	f1c8 0800 	rsb	r8, r8, #0
   c4110:	f018 020f 	ands.w	r2, r8, #15
   c4114:	d00a      	beq.n	c412c <_strtod_l+0x56c>
   c4116:	4b13      	ldr	r3, [pc, #76]	; (c4164 <_strtod_l+0x5a4>)
   c4118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c411c:	4650      	mov	r0, sl
   c411e:	4659      	mov	r1, fp
   c4120:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4124:	f7ff f9a2 	bl	c346c <__aeabi_ddiv>
   c4128:	4682      	mov	sl, r0
   c412a:	468b      	mov	fp, r1
   c412c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4130:	d0d7      	beq.n	c40e2 <_strtod_l+0x522>
   c4132:	f1b8 0f1f 	cmp.w	r8, #31
   c4136:	dd1f      	ble.n	c4178 <_strtod_l+0x5b8>
   c4138:	2500      	movs	r5, #0
   c413a:	462e      	mov	r6, r5
   c413c:	9507      	str	r5, [sp, #28]
   c413e:	9505      	str	r5, [sp, #20]
   c4140:	2322      	movs	r3, #34	; 0x22
   c4142:	f04f 0a00 	mov.w	sl, #0
   c4146:	f04f 0b00 	mov.w	fp, #0
   c414a:	6023      	str	r3, [r4, #0]
   c414c:	e786      	b.n	c405c <_strtod_l+0x49c>
   c414e:	bf00      	nop
   c4150:	000c7959 	.word	0x000c7959
   c4154:	000c7970 	.word	0x000c7970
   c4158:	000c7950 	.word	0x000c7950
   c415c:	000c7953 	.word	0x000c7953
   c4160:	000c721f 	.word	0x000c721f
   c4164:	000c7bb8 	.word	0x000c7bb8
   c4168:	000c7b90 	.word	0x000c7b90
   c416c:	7ff00000 	.word	0x7ff00000
   c4170:	7ca00000 	.word	0x7ca00000
   c4174:	7fefffff 	.word	0x7fefffff
   c4178:	f018 0310 	ands.w	r3, r8, #16
   c417c:	bf18      	it	ne
   c417e:	236a      	movne	r3, #106	; 0x6a
   c4180:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c4530 <_strtod_l+0x970>
   c4184:	9304      	str	r3, [sp, #16]
   c4186:	4650      	mov	r0, sl
   c4188:	4659      	mov	r1, fp
   c418a:	2300      	movs	r3, #0
   c418c:	f018 0f01 	tst.w	r8, #1
   c4190:	d004      	beq.n	c419c <_strtod_l+0x5dc>
   c4192:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4196:	f7ff f83f 	bl	c3218 <__aeabi_dmul>
   c419a:	2301      	movs	r3, #1
   c419c:	ea5f 0868 	movs.w	r8, r8, asr #1
   c41a0:	f109 0908 	add.w	r9, r9, #8
   c41a4:	d1f2      	bne.n	c418c <_strtod_l+0x5cc>
   c41a6:	b10b      	cbz	r3, c41ac <_strtod_l+0x5ec>
   c41a8:	4682      	mov	sl, r0
   c41aa:	468b      	mov	fp, r1
   c41ac:	9b04      	ldr	r3, [sp, #16]
   c41ae:	b1c3      	cbz	r3, c41e2 <_strtod_l+0x622>
   c41b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c41b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c41b8:	2b00      	cmp	r3, #0
   c41ba:	4659      	mov	r1, fp
   c41bc:	dd11      	ble.n	c41e2 <_strtod_l+0x622>
   c41be:	2b1f      	cmp	r3, #31
   c41c0:	f340 8124 	ble.w	c440c <_strtod_l+0x84c>
   c41c4:	2b34      	cmp	r3, #52	; 0x34
   c41c6:	bfde      	ittt	le
   c41c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c41cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c41d0:	fa03 f202 	lslle.w	r2, r3, r2
   c41d4:	f04f 0a00 	mov.w	sl, #0
   c41d8:	bfcc      	ite	gt
   c41da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c41de:	ea02 0b01 	andle.w	fp, r2, r1
   c41e2:	2200      	movs	r2, #0
   c41e4:	2300      	movs	r3, #0
   c41e6:	4650      	mov	r0, sl
   c41e8:	4659      	mov	r1, fp
   c41ea:	f7ff fa7d 	bl	c36e8 <__aeabi_dcmpeq>
   c41ee:	2800      	cmp	r0, #0
   c41f0:	d1a2      	bne.n	c4138 <_strtod_l+0x578>
   c41f2:	9b07      	ldr	r3, [sp, #28]
   c41f4:	9300      	str	r3, [sp, #0]
   c41f6:	9908      	ldr	r1, [sp, #32]
   c41f8:	462b      	mov	r3, r5
   c41fa:	463a      	mov	r2, r7
   c41fc:	4620      	mov	r0, r4
   c41fe:	f001 f80d 	bl	c521c <__s2b>
   c4202:	9007      	str	r0, [sp, #28]
   c4204:	2800      	cmp	r0, #0
   c4206:	f43f af1f 	beq.w	c4048 <_strtod_l+0x488>
   c420a:	9b05      	ldr	r3, [sp, #20]
   c420c:	1b9e      	subs	r6, r3, r6
   c420e:	9b06      	ldr	r3, [sp, #24]
   c4210:	2b00      	cmp	r3, #0
   c4212:	bfb4      	ite	lt
   c4214:	4633      	movlt	r3, r6
   c4216:	2300      	movge	r3, #0
   c4218:	930c      	str	r3, [sp, #48]	; 0x30
   c421a:	9b06      	ldr	r3, [sp, #24]
   c421c:	2500      	movs	r5, #0
   c421e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4222:	9312      	str	r3, [sp, #72]	; 0x48
   c4224:	462e      	mov	r6, r5
   c4226:	9b07      	ldr	r3, [sp, #28]
   c4228:	4620      	mov	r0, r4
   c422a:	6859      	ldr	r1, [r3, #4]
   c422c:	f000 ff4e 	bl	c50cc <_Balloc>
   c4230:	9005      	str	r0, [sp, #20]
   c4232:	2800      	cmp	r0, #0
   c4234:	f43f af0c 	beq.w	c4050 <_strtod_l+0x490>
   c4238:	9b07      	ldr	r3, [sp, #28]
   c423a:	691a      	ldr	r2, [r3, #16]
   c423c:	3202      	adds	r2, #2
   c423e:	f103 010c 	add.w	r1, r3, #12
   c4242:	0092      	lsls	r2, r2, #2
   c4244:	300c      	adds	r0, #12
   c4246:	f7ff fb73 	bl	c3930 <memcpy>
   c424a:	ec4b ab10 	vmov	d0, sl, fp
   c424e:	aa1a      	add	r2, sp, #104	; 0x68
   c4250:	a919      	add	r1, sp, #100	; 0x64
   c4252:	4620      	mov	r0, r4
   c4254:	f001 fb28 	bl	c58a8 <__d2b>
   c4258:	ec4b ab18 	vmov	d8, sl, fp
   c425c:	9018      	str	r0, [sp, #96]	; 0x60
   c425e:	2800      	cmp	r0, #0
   c4260:	f43f aef6 	beq.w	c4050 <_strtod_l+0x490>
   c4264:	2101      	movs	r1, #1
   c4266:	4620      	mov	r0, r4
   c4268:	f001 f872 	bl	c5350 <__i2b>
   c426c:	4606      	mov	r6, r0
   c426e:	2800      	cmp	r0, #0
   c4270:	f43f aeee 	beq.w	c4050 <_strtod_l+0x490>
   c4274:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4276:	9904      	ldr	r1, [sp, #16]
   c4278:	2b00      	cmp	r3, #0
   c427a:	bfab      	itete	ge
   c427c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c427e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4282:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4286:	bfac      	ite	ge
   c4288:	eb03 0902 	addge.w	r9, r3, r2
   c428c:	1ad7      	sublt	r7, r2, r3
   c428e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4290:	eba3 0801 	sub.w	r8, r3, r1
   c4294:	4490      	add	r8, r2
   c4296:	4ba1      	ldr	r3, [pc, #644]	; (c451c <_strtod_l+0x95c>)
   c4298:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c429c:	4598      	cmp	r8, r3
   c429e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c42a2:	f280 80c7 	bge.w	c4434 <_strtod_l+0x874>
   c42a6:	eba3 0308 	sub.w	r3, r3, r8
   c42aa:	2b1f      	cmp	r3, #31
   c42ac:	eba2 0203 	sub.w	r2, r2, r3
   c42b0:	f04f 0101 	mov.w	r1, #1
   c42b4:	f300 80b1 	bgt.w	c441a <_strtod_l+0x85a>
   c42b8:	fa01 f303 	lsl.w	r3, r1, r3
   c42bc:	930d      	str	r3, [sp, #52]	; 0x34
   c42be:	2300      	movs	r3, #0
   c42c0:	9308      	str	r3, [sp, #32]
   c42c2:	eb09 0802 	add.w	r8, r9, r2
   c42c6:	9b04      	ldr	r3, [sp, #16]
   c42c8:	45c1      	cmp	r9, r8
   c42ca:	4417      	add	r7, r2
   c42cc:	441f      	add	r7, r3
   c42ce:	464b      	mov	r3, r9
   c42d0:	bfa8      	it	ge
   c42d2:	4643      	movge	r3, r8
   c42d4:	42bb      	cmp	r3, r7
   c42d6:	bfa8      	it	ge
   c42d8:	463b      	movge	r3, r7
   c42da:	2b00      	cmp	r3, #0
   c42dc:	bfc2      	ittt	gt
   c42de:	eba8 0803 	subgt.w	r8, r8, r3
   c42e2:	1aff      	subgt	r7, r7, r3
   c42e4:	eba9 0903 	subgt.w	r9, r9, r3
   c42e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c42ea:	2b00      	cmp	r3, #0
   c42ec:	dd17      	ble.n	c431e <_strtod_l+0x75e>
   c42ee:	4631      	mov	r1, r6
   c42f0:	461a      	mov	r2, r3
   c42f2:	4620      	mov	r0, r4
   c42f4:	f001 f8ec 	bl	c54d0 <__pow5mult>
   c42f8:	4606      	mov	r6, r0
   c42fa:	2800      	cmp	r0, #0
   c42fc:	f43f aea8 	beq.w	c4050 <_strtod_l+0x490>
   c4300:	4601      	mov	r1, r0
   c4302:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4304:	4620      	mov	r0, r4
   c4306:	f001 f839 	bl	c537c <__multiply>
   c430a:	900b      	str	r0, [sp, #44]	; 0x2c
   c430c:	2800      	cmp	r0, #0
   c430e:	f43f ae9f 	beq.w	c4050 <_strtod_l+0x490>
   c4312:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4314:	4620      	mov	r0, r4
   c4316:	f000 ff19 	bl	c514c <_Bfree>
   c431a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c431c:	9318      	str	r3, [sp, #96]	; 0x60
   c431e:	f1b8 0f00 	cmp.w	r8, #0
   c4322:	f300 808c 	bgt.w	c443e <_strtod_l+0x87e>
   c4326:	9b06      	ldr	r3, [sp, #24]
   c4328:	2b00      	cmp	r3, #0
   c432a:	dd08      	ble.n	c433e <_strtod_l+0x77e>
   c432c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c432e:	9905      	ldr	r1, [sp, #20]
   c4330:	4620      	mov	r0, r4
   c4332:	f001 f8cd 	bl	c54d0 <__pow5mult>
   c4336:	9005      	str	r0, [sp, #20]
   c4338:	2800      	cmp	r0, #0
   c433a:	f43f ae89 	beq.w	c4050 <_strtod_l+0x490>
   c433e:	2f00      	cmp	r7, #0
   c4340:	dd08      	ble.n	c4354 <_strtod_l+0x794>
   c4342:	9905      	ldr	r1, [sp, #20]
   c4344:	463a      	mov	r2, r7
   c4346:	4620      	mov	r0, r4
   c4348:	f001 f91c 	bl	c5584 <__lshift>
   c434c:	9005      	str	r0, [sp, #20]
   c434e:	2800      	cmp	r0, #0
   c4350:	f43f ae7e 	beq.w	c4050 <_strtod_l+0x490>
   c4354:	f1b9 0f00 	cmp.w	r9, #0
   c4358:	dd08      	ble.n	c436c <_strtod_l+0x7ac>
   c435a:	4631      	mov	r1, r6
   c435c:	464a      	mov	r2, r9
   c435e:	4620      	mov	r0, r4
   c4360:	f001 f910 	bl	c5584 <__lshift>
   c4364:	4606      	mov	r6, r0
   c4366:	2800      	cmp	r0, #0
   c4368:	f43f ae72 	beq.w	c4050 <_strtod_l+0x490>
   c436c:	9a05      	ldr	r2, [sp, #20]
   c436e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4370:	4620      	mov	r0, r4
   c4372:	f001 f993 	bl	c569c <__mdiff>
   c4376:	4605      	mov	r5, r0
   c4378:	2800      	cmp	r0, #0
   c437a:	f43f ae69 	beq.w	c4050 <_strtod_l+0x490>
   c437e:	68c3      	ldr	r3, [r0, #12]
   c4380:	930b      	str	r3, [sp, #44]	; 0x2c
   c4382:	2300      	movs	r3, #0
   c4384:	60c3      	str	r3, [r0, #12]
   c4386:	4631      	mov	r1, r6
   c4388:	f001 f96c 	bl	c5664 <__mcmp>
   c438c:	2800      	cmp	r0, #0
   c438e:	da60      	bge.n	c4452 <_strtod_l+0x892>
   c4390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4392:	ea53 030a 	orrs.w	r3, r3, sl
   c4396:	f040 8082 	bne.w	c449e <_strtod_l+0x8de>
   c439a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c439e:	2b00      	cmp	r3, #0
   c43a0:	d17d      	bne.n	c449e <_strtod_l+0x8de>
   c43a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c43a6:	0d1b      	lsrs	r3, r3, #20
   c43a8:	051b      	lsls	r3, r3, #20
   c43aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c43ae:	d976      	bls.n	c449e <_strtod_l+0x8de>
   c43b0:	696b      	ldr	r3, [r5, #20]
   c43b2:	b913      	cbnz	r3, c43ba <_strtod_l+0x7fa>
   c43b4:	692b      	ldr	r3, [r5, #16]
   c43b6:	2b01      	cmp	r3, #1
   c43b8:	dd71      	ble.n	c449e <_strtod_l+0x8de>
   c43ba:	4629      	mov	r1, r5
   c43bc:	2201      	movs	r2, #1
   c43be:	4620      	mov	r0, r4
   c43c0:	f001 f8e0 	bl	c5584 <__lshift>
   c43c4:	4631      	mov	r1, r6
   c43c6:	4605      	mov	r5, r0
   c43c8:	f001 f94c 	bl	c5664 <__mcmp>
   c43cc:	2800      	cmp	r0, #0
   c43ce:	dd66      	ble.n	c449e <_strtod_l+0x8de>
   c43d0:	9904      	ldr	r1, [sp, #16]
   c43d2:	4a53      	ldr	r2, [pc, #332]	; (c4520 <_strtod_l+0x960>)
   c43d4:	465b      	mov	r3, fp
   c43d6:	2900      	cmp	r1, #0
   c43d8:	f000 8081 	beq.w	c44de <_strtod_l+0x91e>
   c43dc:	ea02 010b 	and.w	r1, r2, fp
   c43e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c43e4:	dc7b      	bgt.n	c44de <_strtod_l+0x91e>
   c43e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c43ea:	f77f aea9 	ble.w	c4140 <_strtod_l+0x580>
   c43ee:	4b4d      	ldr	r3, [pc, #308]	; (c4524 <_strtod_l+0x964>)
   c43f0:	4650      	mov	r0, sl
   c43f2:	4659      	mov	r1, fp
   c43f4:	2200      	movs	r2, #0
   c43f6:	f7fe ff0f 	bl	c3218 <__aeabi_dmul>
   c43fa:	460b      	mov	r3, r1
   c43fc:	4303      	orrs	r3, r0
   c43fe:	bf08      	it	eq
   c4400:	2322      	moveq	r3, #34	; 0x22
   c4402:	4682      	mov	sl, r0
   c4404:	468b      	mov	fp, r1
   c4406:	bf08      	it	eq
   c4408:	6023      	streq	r3, [r4, #0]
   c440a:	e62b      	b.n	c4064 <_strtod_l+0x4a4>
   c440c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4410:	fa02 f303 	lsl.w	r3, r2, r3
   c4414:	ea03 0a0a 	and.w	sl, r3, sl
   c4418:	e6e3      	b.n	c41e2 <_strtod_l+0x622>
   c441a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c441e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c4422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c4426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c442a:	fa01 f308 	lsl.w	r3, r1, r8
   c442e:	9308      	str	r3, [sp, #32]
   c4430:	910d      	str	r1, [sp, #52]	; 0x34
   c4432:	e746      	b.n	c42c2 <_strtod_l+0x702>
   c4434:	2300      	movs	r3, #0
   c4436:	9308      	str	r3, [sp, #32]
   c4438:	2301      	movs	r3, #1
   c443a:	930d      	str	r3, [sp, #52]	; 0x34
   c443c:	e741      	b.n	c42c2 <_strtod_l+0x702>
   c443e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4440:	4642      	mov	r2, r8
   c4442:	4620      	mov	r0, r4
   c4444:	f001 f89e 	bl	c5584 <__lshift>
   c4448:	9018      	str	r0, [sp, #96]	; 0x60
   c444a:	2800      	cmp	r0, #0
   c444c:	f47f af6b 	bne.w	c4326 <_strtod_l+0x766>
   c4450:	e5fe      	b.n	c4050 <_strtod_l+0x490>
   c4452:	465f      	mov	r7, fp
   c4454:	d16e      	bne.n	c4534 <_strtod_l+0x974>
   c4456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c4458:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c445c:	b342      	cbz	r2, c44b0 <_strtod_l+0x8f0>
   c445e:	4a32      	ldr	r2, [pc, #200]	; (c4528 <_strtod_l+0x968>)
   c4460:	4293      	cmp	r3, r2
   c4462:	d128      	bne.n	c44b6 <_strtod_l+0x8f6>
   c4464:	9b04      	ldr	r3, [sp, #16]
   c4466:	4651      	mov	r1, sl
   c4468:	b1eb      	cbz	r3, c44a6 <_strtod_l+0x8e6>
   c446a:	4b2d      	ldr	r3, [pc, #180]	; (c4520 <_strtod_l+0x960>)
   c446c:	403b      	ands	r3, r7
   c446e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c4472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4476:	d819      	bhi.n	c44ac <_strtod_l+0x8ec>
   c4478:	0d1b      	lsrs	r3, r3, #20
   c447a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c447e:	fa02 f303 	lsl.w	r3, r2, r3
   c4482:	4299      	cmp	r1, r3
   c4484:	d117      	bne.n	c44b6 <_strtod_l+0x8f6>
   c4486:	4b29      	ldr	r3, [pc, #164]	; (c452c <_strtod_l+0x96c>)
   c4488:	429f      	cmp	r7, r3
   c448a:	d102      	bne.n	c4492 <_strtod_l+0x8d2>
   c448c:	3101      	adds	r1, #1
   c448e:	f43f addf 	beq.w	c4050 <_strtod_l+0x490>
   c4492:	4b23      	ldr	r3, [pc, #140]	; (c4520 <_strtod_l+0x960>)
   c4494:	403b      	ands	r3, r7
   c4496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c449a:	f04f 0a00 	mov.w	sl, #0
   c449e:	9b04      	ldr	r3, [sp, #16]
   c44a0:	2b00      	cmp	r3, #0
   c44a2:	d1a4      	bne.n	c43ee <_strtod_l+0x82e>
   c44a4:	e5de      	b.n	c4064 <_strtod_l+0x4a4>
   c44a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c44aa:	e7ea      	b.n	c4482 <_strtod_l+0x8c2>
   c44ac:	4613      	mov	r3, r2
   c44ae:	e7e8      	b.n	c4482 <_strtod_l+0x8c2>
   c44b0:	ea53 030a 	orrs.w	r3, r3, sl
   c44b4:	d08c      	beq.n	c43d0 <_strtod_l+0x810>
   c44b6:	9b08      	ldr	r3, [sp, #32]
   c44b8:	b1db      	cbz	r3, c44f2 <_strtod_l+0x932>
   c44ba:	423b      	tst	r3, r7
   c44bc:	d0ef      	beq.n	c449e <_strtod_l+0x8de>
   c44be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c44c0:	9a04      	ldr	r2, [sp, #16]
   c44c2:	4650      	mov	r0, sl
   c44c4:	4659      	mov	r1, fp
   c44c6:	b1c3      	cbz	r3, c44fa <_strtod_l+0x93a>
   c44c8:	f7ff fb5d 	bl	c3b86 <sulp>
   c44cc:	4602      	mov	r2, r0
   c44ce:	460b      	mov	r3, r1
   c44d0:	ec51 0b18 	vmov	r0, r1, d8
   c44d4:	f7fe fcea 	bl	c2eac <__adddf3>
   c44d8:	4682      	mov	sl, r0
   c44da:	468b      	mov	fp, r1
   c44dc:	e7df      	b.n	c449e <_strtod_l+0x8de>
   c44de:	4013      	ands	r3, r2
   c44e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c44e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c44e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c44ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c44f0:	e7d5      	b.n	c449e <_strtod_l+0x8de>
   c44f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c44f4:	ea13 0f0a 	tst.w	r3, sl
   c44f8:	e7e0      	b.n	c44bc <_strtod_l+0x8fc>
   c44fa:	f7ff fb44 	bl	c3b86 <sulp>
   c44fe:	4602      	mov	r2, r0
   c4500:	460b      	mov	r3, r1
   c4502:	ec51 0b18 	vmov	r0, r1, d8
   c4506:	f7fe fccf 	bl	c2ea8 <__aeabi_dsub>
   c450a:	2200      	movs	r2, #0
   c450c:	2300      	movs	r3, #0
   c450e:	4682      	mov	sl, r0
   c4510:	468b      	mov	fp, r1
   c4512:	f7ff f8e9 	bl	c36e8 <__aeabi_dcmpeq>
   c4516:	2800      	cmp	r0, #0
   c4518:	d0c1      	beq.n	c449e <_strtod_l+0x8de>
   c451a:	e611      	b.n	c4140 <_strtod_l+0x580>
   c451c:	fffffc02 	.word	0xfffffc02
   c4520:	7ff00000 	.word	0x7ff00000
   c4524:	39500000 	.word	0x39500000
   c4528:	000fffff 	.word	0x000fffff
   c452c:	7fefffff 	.word	0x7fefffff
   c4530:	000c7988 	.word	0x000c7988
   c4534:	4631      	mov	r1, r6
   c4536:	4628      	mov	r0, r5
   c4538:	f001 fa12 	bl	c5960 <__ratio>
   c453c:	ec59 8b10 	vmov	r8, r9, d0
   c4540:	ee10 0a10 	vmov	r0, s0
   c4544:	2200      	movs	r2, #0
   c4546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c454a:	4649      	mov	r1, r9
   c454c:	f7ff f8e0 	bl	c3710 <__aeabi_dcmple>
   c4550:	2800      	cmp	r0, #0
   c4552:	d07a      	beq.n	c464a <_strtod_l+0xa8a>
   c4554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4556:	2b00      	cmp	r3, #0
   c4558:	d04a      	beq.n	c45f0 <_strtod_l+0xa30>
   c455a:	4b95      	ldr	r3, [pc, #596]	; (c47b0 <_strtod_l+0xbf0>)
   c455c:	2200      	movs	r2, #0
   c455e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4562:	f8df 924c 	ldr.w	r9, [pc, #588]	; c47b0 <_strtod_l+0xbf0>
   c4566:	f04f 0800 	mov.w	r8, #0
   c456a:	4b92      	ldr	r3, [pc, #584]	; (c47b4 <_strtod_l+0xbf4>)
   c456c:	403b      	ands	r3, r7
   c456e:	930d      	str	r3, [sp, #52]	; 0x34
   c4570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4572:	4b91      	ldr	r3, [pc, #580]	; (c47b8 <_strtod_l+0xbf8>)
   c4574:	429a      	cmp	r2, r3
   c4576:	f040 80b0 	bne.w	c46da <_strtod_l+0xb1a>
   c457a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c457e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c4582:	ec4b ab10 	vmov	d0, sl, fp
   c4586:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c458a:	f001 f911 	bl	c57b0 <__ulp>
   c458e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4592:	ec53 2b10 	vmov	r2, r3, d0
   c4596:	f7fe fe3f 	bl	c3218 <__aeabi_dmul>
   c459a:	4652      	mov	r2, sl
   c459c:	465b      	mov	r3, fp
   c459e:	f7fe fc85 	bl	c2eac <__adddf3>
   c45a2:	460b      	mov	r3, r1
   c45a4:	4983      	ldr	r1, [pc, #524]	; (c47b4 <_strtod_l+0xbf4>)
   c45a6:	4a85      	ldr	r2, [pc, #532]	; (c47bc <_strtod_l+0xbfc>)
   c45a8:	4019      	ands	r1, r3
   c45aa:	4291      	cmp	r1, r2
   c45ac:	4682      	mov	sl, r0
   c45ae:	d960      	bls.n	c4672 <_strtod_l+0xab2>
   c45b0:	ee18 3a90 	vmov	r3, s17
   c45b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c45b8:	4293      	cmp	r3, r2
   c45ba:	d104      	bne.n	c45c6 <_strtod_l+0xa06>
   c45bc:	ee18 3a10 	vmov	r3, s16
   c45c0:	3301      	adds	r3, #1
   c45c2:	f43f ad45 	beq.w	c4050 <_strtod_l+0x490>
   c45c6:	f8df b200 	ldr.w	fp, [pc, #512]	; c47c8 <_strtod_l+0xc08>
   c45ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c45ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   c45d0:	4620      	mov	r0, r4
   c45d2:	f000 fdbb 	bl	c514c <_Bfree>
   c45d6:	9905      	ldr	r1, [sp, #20]
   c45d8:	4620      	mov	r0, r4
   c45da:	f000 fdb7 	bl	c514c <_Bfree>
   c45de:	4631      	mov	r1, r6
   c45e0:	4620      	mov	r0, r4
   c45e2:	f000 fdb3 	bl	c514c <_Bfree>
   c45e6:	4629      	mov	r1, r5
   c45e8:	4620      	mov	r0, r4
   c45ea:	f000 fdaf 	bl	c514c <_Bfree>
   c45ee:	e61a      	b.n	c4226 <_strtod_l+0x666>
   c45f0:	f1ba 0f00 	cmp.w	sl, #0
   c45f4:	d11b      	bne.n	c462e <_strtod_l+0xa6e>
   c45f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c45fa:	b9f3      	cbnz	r3, c463a <_strtod_l+0xa7a>
   c45fc:	4b6c      	ldr	r3, [pc, #432]	; (c47b0 <_strtod_l+0xbf0>)
   c45fe:	2200      	movs	r2, #0
   c4600:	4640      	mov	r0, r8
   c4602:	4649      	mov	r1, r9
   c4604:	f7ff f87a 	bl	c36fc <__aeabi_dcmplt>
   c4608:	b9d0      	cbnz	r0, c4640 <_strtod_l+0xa80>
   c460a:	4640      	mov	r0, r8
   c460c:	4649      	mov	r1, r9
   c460e:	4b6c      	ldr	r3, [pc, #432]	; (c47c0 <_strtod_l+0xc00>)
   c4610:	2200      	movs	r2, #0
   c4612:	f7fe fe01 	bl	c3218 <__aeabi_dmul>
   c4616:	4680      	mov	r8, r0
   c4618:	4689      	mov	r9, r1
   c461a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c461e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c4622:	9315      	str	r3, [sp, #84]	; 0x54
   c4624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c4628:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c462c:	e79d      	b.n	c456a <_strtod_l+0x9aa>
   c462e:	f1ba 0f01 	cmp.w	sl, #1
   c4632:	d102      	bne.n	c463a <_strtod_l+0xa7a>
   c4634:	2f00      	cmp	r7, #0
   c4636:	f43f ad83 	beq.w	c4140 <_strtod_l+0x580>
   c463a:	4b62      	ldr	r3, [pc, #392]	; (c47c4 <_strtod_l+0xc04>)
   c463c:	2200      	movs	r2, #0
   c463e:	e78e      	b.n	c455e <_strtod_l+0x99e>
   c4640:	f8df 917c 	ldr.w	r9, [pc, #380]	; c47c0 <_strtod_l+0xc00>
   c4644:	f04f 0800 	mov.w	r8, #0
   c4648:	e7e7      	b.n	c461a <_strtod_l+0xa5a>
   c464a:	4b5d      	ldr	r3, [pc, #372]	; (c47c0 <_strtod_l+0xc00>)
   c464c:	4640      	mov	r0, r8
   c464e:	4649      	mov	r1, r9
   c4650:	2200      	movs	r2, #0
   c4652:	f7fe fde1 	bl	c3218 <__aeabi_dmul>
   c4656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4658:	4680      	mov	r8, r0
   c465a:	4689      	mov	r9, r1
   c465c:	b933      	cbnz	r3, c466c <_strtod_l+0xaac>
   c465e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4662:	900e      	str	r0, [sp, #56]	; 0x38
   c4664:	930f      	str	r3, [sp, #60]	; 0x3c
   c4666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c466a:	e7dd      	b.n	c4628 <_strtod_l+0xa68>
   c466c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c4670:	e7f9      	b.n	c4666 <_strtod_l+0xaa6>
   c4672:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c4676:	9b04      	ldr	r3, [sp, #16]
   c4678:	2b00      	cmp	r3, #0
   c467a:	d1a8      	bne.n	c45ce <_strtod_l+0xa0e>
   c467c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4682:	0d1b      	lsrs	r3, r3, #20
   c4684:	051b      	lsls	r3, r3, #20
   c4686:	429a      	cmp	r2, r3
   c4688:	d1a1      	bne.n	c45ce <_strtod_l+0xa0e>
   c468a:	4640      	mov	r0, r8
   c468c:	4649      	mov	r1, r9
   c468e:	f001 fa05 	bl	c5a9c <__aeabi_d2lz>
   c4692:	f7fe fd93 	bl	c31bc <__aeabi_l2d>
   c4696:	4602      	mov	r2, r0
   c4698:	460b      	mov	r3, r1
   c469a:	4640      	mov	r0, r8
   c469c:	4649      	mov	r1, r9
   c469e:	f7fe fc03 	bl	c2ea8 <__aeabi_dsub>
   c46a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c46a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c46a8:	ea43 030a 	orr.w	r3, r3, sl
   c46ac:	4313      	orrs	r3, r2
   c46ae:	4680      	mov	r8, r0
   c46b0:	4689      	mov	r9, r1
   c46b2:	d055      	beq.n	c4760 <_strtod_l+0xba0>
   c46b4:	a336      	add	r3, pc, #216	; (adr r3, c4790 <_strtod_l+0xbd0>)
   c46b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c46ba:	f7ff f81f 	bl	c36fc <__aeabi_dcmplt>
   c46be:	2800      	cmp	r0, #0
   c46c0:	f47f acd0 	bne.w	c4064 <_strtod_l+0x4a4>
   c46c4:	a334      	add	r3, pc, #208	; (adr r3, c4798 <_strtod_l+0xbd8>)
   c46c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c46ca:	4640      	mov	r0, r8
   c46cc:	4649      	mov	r1, r9
   c46ce:	f7ff f833 	bl	c3738 <__aeabi_dcmpgt>
   c46d2:	2800      	cmp	r0, #0
   c46d4:	f43f af7b 	beq.w	c45ce <_strtod_l+0xa0e>
   c46d8:	e4c4      	b.n	c4064 <_strtod_l+0x4a4>
   c46da:	9b04      	ldr	r3, [sp, #16]
   c46dc:	b333      	cbz	r3, c472c <_strtod_l+0xb6c>
   c46de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c46e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c46e4:	d822      	bhi.n	c472c <_strtod_l+0xb6c>
   c46e6:	a32e      	add	r3, pc, #184	; (adr r3, c47a0 <_strtod_l+0xbe0>)
   c46e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c46ec:	4640      	mov	r0, r8
   c46ee:	4649      	mov	r1, r9
   c46f0:	f7ff f80e 	bl	c3710 <__aeabi_dcmple>
   c46f4:	b1a0      	cbz	r0, c4720 <_strtod_l+0xb60>
   c46f6:	4649      	mov	r1, r9
   c46f8:	4640      	mov	r0, r8
   c46fa:	f7ff f865 	bl	c37c8 <__aeabi_d2uiz>
   c46fe:	2801      	cmp	r0, #1
   c4700:	bf38      	it	cc
   c4702:	2001      	movcc	r0, #1
   c4704:	f7fe fd0e 	bl	c3124 <__aeabi_ui2d>
   c4708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c470a:	4680      	mov	r8, r0
   c470c:	4689      	mov	r9, r1
   c470e:	bb23      	cbnz	r3, c475a <_strtod_l+0xb9a>
   c4710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c4714:	9010      	str	r0, [sp, #64]	; 0x40
   c4716:	9311      	str	r3, [sp, #68]	; 0x44
   c4718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c471c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c4720:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c4722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c4724:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c4728:	1a9b      	subs	r3, r3, r2
   c472a:	9309      	str	r3, [sp, #36]	; 0x24
   c472c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4730:	eeb0 0a48 	vmov.f32	s0, s16
   c4734:	eef0 0a68 	vmov.f32	s1, s17
   c4738:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c473c:	f001 f838 	bl	c57b0 <__ulp>
   c4740:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c4744:	ec53 2b10 	vmov	r2, r3, d0
   c4748:	f7fe fd66 	bl	c3218 <__aeabi_dmul>
   c474c:	ec53 2b18 	vmov	r2, r3, d8
   c4750:	f7fe fbac 	bl	c2eac <__adddf3>
   c4754:	4682      	mov	sl, r0
   c4756:	468b      	mov	fp, r1
   c4758:	e78d      	b.n	c4676 <_strtod_l+0xab6>
   c475a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c475e:	e7db      	b.n	c4718 <_strtod_l+0xb58>
   c4760:	a311      	add	r3, pc, #68	; (adr r3, c47a8 <_strtod_l+0xbe8>)
   c4762:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4766:	f7fe ffc9 	bl	c36fc <__aeabi_dcmplt>
   c476a:	e7b2      	b.n	c46d2 <_strtod_l+0xb12>
   c476c:	2300      	movs	r3, #0
   c476e:	930a      	str	r3, [sp, #40]	; 0x28
   c4770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c4772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4774:	6013      	str	r3, [r2, #0]
   c4776:	f7ff ba6b 	b.w	c3c50 <_strtod_l+0x90>
   c477a:	2a65      	cmp	r2, #101	; 0x65
   c477c:	f43f ab5f 	beq.w	c3e3e <_strtod_l+0x27e>
   c4780:	2a45      	cmp	r2, #69	; 0x45
   c4782:	f43f ab5c 	beq.w	c3e3e <_strtod_l+0x27e>
   c4786:	2301      	movs	r3, #1
   c4788:	f7ff bb94 	b.w	c3eb4 <_strtod_l+0x2f4>
   c478c:	f3af 8000 	nop.w
   c4790:	94a03595 	.word	0x94a03595
   c4794:	3fdfffff 	.word	0x3fdfffff
   c4798:	35afe535 	.word	0x35afe535
   c479c:	3fe00000 	.word	0x3fe00000
   c47a0:	ffc00000 	.word	0xffc00000
   c47a4:	41dfffff 	.word	0x41dfffff
   c47a8:	94a03595 	.word	0x94a03595
   c47ac:	3fcfffff 	.word	0x3fcfffff
   c47b0:	3ff00000 	.word	0x3ff00000
   c47b4:	7ff00000 	.word	0x7ff00000
   c47b8:	7fe00000 	.word	0x7fe00000
   c47bc:	7c9fffff 	.word	0x7c9fffff
   c47c0:	3fe00000 	.word	0x3fe00000
   c47c4:	bff00000 	.word	0xbff00000
   c47c8:	7fefffff 	.word	0x7fefffff

000c47cc <strtod>:
   c47cc:	460a      	mov	r2, r1
   c47ce:	4601      	mov	r1, r0
   c47d0:	4802      	ldr	r0, [pc, #8]	; (c47dc <strtod+0x10>)
   c47d2:	4b03      	ldr	r3, [pc, #12]	; (c47e0 <strtod+0x14>)
   c47d4:	6800      	ldr	r0, [r0, #0]
   c47d6:	f7ff b9f3 	b.w	c3bc0 <_strtod_l>
   c47da:	bf00      	nop
   c47dc:	2003dba0 	.word	0x2003dba0
   c47e0:	2003dc0c 	.word	0x2003dc0c

000c47e4 <_strtol_l.constprop.0>:
   c47e4:	2b01      	cmp	r3, #1
   c47e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c47ea:	d001      	beq.n	c47f0 <_strtol_l.constprop.0+0xc>
   c47ec:	2b24      	cmp	r3, #36	; 0x24
   c47ee:	d906      	bls.n	c47fe <_strtol_l.constprop.0+0x1a>
   c47f0:	f7f8 ffd0 	bl	bd794 <__errno>
   c47f4:	2316      	movs	r3, #22
   c47f6:	6003      	str	r3, [r0, #0]
   c47f8:	2000      	movs	r0, #0
   c47fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c47fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c48e4 <_strtol_l.constprop.0+0x100>
   c4802:	460d      	mov	r5, r1
   c4804:	462e      	mov	r6, r5
   c4806:	f815 4b01 	ldrb.w	r4, [r5], #1
   c480a:	f814 700c 	ldrb.w	r7, [r4, ip]
   c480e:	f017 0708 	ands.w	r7, r7, #8
   c4812:	d1f7      	bne.n	c4804 <_strtol_l.constprop.0+0x20>
   c4814:	2c2d      	cmp	r4, #45	; 0x2d
   c4816:	d132      	bne.n	c487e <_strtol_l.constprop.0+0x9a>
   c4818:	782c      	ldrb	r4, [r5, #0]
   c481a:	2701      	movs	r7, #1
   c481c:	1cb5      	adds	r5, r6, #2
   c481e:	2b00      	cmp	r3, #0
   c4820:	d05b      	beq.n	c48da <_strtol_l.constprop.0+0xf6>
   c4822:	2b10      	cmp	r3, #16
   c4824:	d109      	bne.n	c483a <_strtol_l.constprop.0+0x56>
   c4826:	2c30      	cmp	r4, #48	; 0x30
   c4828:	d107      	bne.n	c483a <_strtol_l.constprop.0+0x56>
   c482a:	782c      	ldrb	r4, [r5, #0]
   c482c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c4830:	2c58      	cmp	r4, #88	; 0x58
   c4832:	d14d      	bne.n	c48d0 <_strtol_l.constprop.0+0xec>
   c4834:	786c      	ldrb	r4, [r5, #1]
   c4836:	2310      	movs	r3, #16
   c4838:	3502      	adds	r5, #2
   c483a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c483e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4842:	f04f 0c00 	mov.w	ip, #0
   c4846:	fbb8 f9f3 	udiv	r9, r8, r3
   c484a:	4666      	mov	r6, ip
   c484c:	fb03 8a19 	mls	sl, r3, r9, r8
   c4850:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c4854:	f1be 0f09 	cmp.w	lr, #9
   c4858:	d816      	bhi.n	c4888 <_strtol_l.constprop.0+0xa4>
   c485a:	4674      	mov	r4, lr
   c485c:	42a3      	cmp	r3, r4
   c485e:	dd24      	ble.n	c48aa <_strtol_l.constprop.0+0xc6>
   c4860:	f1bc 0f00 	cmp.w	ip, #0
   c4864:	db1e      	blt.n	c48a4 <_strtol_l.constprop.0+0xc0>
   c4866:	45b1      	cmp	r9, r6
   c4868:	d31c      	bcc.n	c48a4 <_strtol_l.constprop.0+0xc0>
   c486a:	d101      	bne.n	c4870 <_strtol_l.constprop.0+0x8c>
   c486c:	45a2      	cmp	sl, r4
   c486e:	db19      	blt.n	c48a4 <_strtol_l.constprop.0+0xc0>
   c4870:	fb06 4603 	mla	r6, r6, r3, r4
   c4874:	f04f 0c01 	mov.w	ip, #1
   c4878:	f815 4b01 	ldrb.w	r4, [r5], #1
   c487c:	e7e8      	b.n	c4850 <_strtol_l.constprop.0+0x6c>
   c487e:	2c2b      	cmp	r4, #43	; 0x2b
   c4880:	bf04      	itt	eq
   c4882:	782c      	ldrbeq	r4, [r5, #0]
   c4884:	1cb5      	addeq	r5, r6, #2
   c4886:	e7ca      	b.n	c481e <_strtol_l.constprop.0+0x3a>
   c4888:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c488c:	f1be 0f19 	cmp.w	lr, #25
   c4890:	d801      	bhi.n	c4896 <_strtol_l.constprop.0+0xb2>
   c4892:	3c37      	subs	r4, #55	; 0x37
   c4894:	e7e2      	b.n	c485c <_strtol_l.constprop.0+0x78>
   c4896:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c489a:	f1be 0f19 	cmp.w	lr, #25
   c489e:	d804      	bhi.n	c48aa <_strtol_l.constprop.0+0xc6>
   c48a0:	3c57      	subs	r4, #87	; 0x57
   c48a2:	e7db      	b.n	c485c <_strtol_l.constprop.0+0x78>
   c48a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c48a8:	e7e6      	b.n	c4878 <_strtol_l.constprop.0+0x94>
   c48aa:	f1bc 0f00 	cmp.w	ip, #0
   c48ae:	da05      	bge.n	c48bc <_strtol_l.constprop.0+0xd8>
   c48b0:	2322      	movs	r3, #34	; 0x22
   c48b2:	6003      	str	r3, [r0, #0]
   c48b4:	4646      	mov	r6, r8
   c48b6:	b942      	cbnz	r2, c48ca <_strtol_l.constprop.0+0xe6>
   c48b8:	4630      	mov	r0, r6
   c48ba:	e79e      	b.n	c47fa <_strtol_l.constprop.0+0x16>
   c48bc:	b107      	cbz	r7, c48c0 <_strtol_l.constprop.0+0xdc>
   c48be:	4276      	negs	r6, r6
   c48c0:	2a00      	cmp	r2, #0
   c48c2:	d0f9      	beq.n	c48b8 <_strtol_l.constprop.0+0xd4>
   c48c4:	f1bc 0f00 	cmp.w	ip, #0
   c48c8:	d000      	beq.n	c48cc <_strtol_l.constprop.0+0xe8>
   c48ca:	1e69      	subs	r1, r5, #1
   c48cc:	6011      	str	r1, [r2, #0]
   c48ce:	e7f3      	b.n	c48b8 <_strtol_l.constprop.0+0xd4>
   c48d0:	2430      	movs	r4, #48	; 0x30
   c48d2:	2b00      	cmp	r3, #0
   c48d4:	d1b1      	bne.n	c483a <_strtol_l.constprop.0+0x56>
   c48d6:	2308      	movs	r3, #8
   c48d8:	e7af      	b.n	c483a <_strtol_l.constprop.0+0x56>
   c48da:	2c30      	cmp	r4, #48	; 0x30
   c48dc:	d0a5      	beq.n	c482a <_strtol_l.constprop.0+0x46>
   c48de:	230a      	movs	r3, #10
   c48e0:	e7ab      	b.n	c483a <_strtol_l.constprop.0+0x56>
   c48e2:	bf00      	nop
   c48e4:	000c79b1 	.word	0x000c79b1

000c48e8 <strtol>:
   c48e8:	4613      	mov	r3, r2
   c48ea:	460a      	mov	r2, r1
   c48ec:	4601      	mov	r1, r0
   c48ee:	4802      	ldr	r0, [pc, #8]	; (c48f8 <strtol+0x10>)
   c48f0:	6800      	ldr	r0, [r0, #0]
   c48f2:	f7ff bf77 	b.w	c47e4 <_strtol_l.constprop.0>
   c48f6:	bf00      	nop
   c48f8:	2003dba0 	.word	0x2003dba0

000c48fc <__register_exitproc>:
   c48fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c4900:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c49bc <__register_exitproc+0xc0>
   c4904:	4606      	mov	r6, r0
   c4906:	f8d8 0000 	ldr.w	r0, [r8]
   c490a:	461f      	mov	r7, r3
   c490c:	460d      	mov	r5, r1
   c490e:	4691      	mov	r9, r2
   c4910:	f000 fbc6 	bl	c50a0 <__retarget_lock_acquire_recursive>
   c4914:	4b25      	ldr	r3, [pc, #148]	; (c49ac <__register_exitproc+0xb0>)
   c4916:	681c      	ldr	r4, [r3, #0]
   c4918:	b934      	cbnz	r4, c4928 <__register_exitproc+0x2c>
   c491a:	4c25      	ldr	r4, [pc, #148]	; (c49b0 <__register_exitproc+0xb4>)
   c491c:	601c      	str	r4, [r3, #0]
   c491e:	4b25      	ldr	r3, [pc, #148]	; (c49b4 <__register_exitproc+0xb8>)
   c4920:	b113      	cbz	r3, c4928 <__register_exitproc+0x2c>
   c4922:	681b      	ldr	r3, [r3, #0]
   c4924:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c4928:	6863      	ldr	r3, [r4, #4]
   c492a:	2b1f      	cmp	r3, #31
   c492c:	dd07      	ble.n	c493e <__register_exitproc+0x42>
   c492e:	f8d8 0000 	ldr.w	r0, [r8]
   c4932:	f000 fbb7 	bl	c50a4 <__retarget_lock_release_recursive>
   c4936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c493a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c493e:	b34e      	cbz	r6, c4994 <__register_exitproc+0x98>
   c4940:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c4944:	b988      	cbnz	r0, c496a <__register_exitproc+0x6e>
   c4946:	4b1c      	ldr	r3, [pc, #112]	; (c49b8 <__register_exitproc+0xbc>)
   c4948:	b923      	cbnz	r3, c4954 <__register_exitproc+0x58>
   c494a:	f8d8 0000 	ldr.w	r0, [r8]
   c494e:	f000 fba8 	bl	c50a2 <__retarget_lock_release>
   c4952:	e7f0      	b.n	c4936 <__register_exitproc+0x3a>
   c4954:	f44f 7084 	mov.w	r0, #264	; 0x108
   c4958:	f7f8 fed4 	bl	bd704 <malloc>
   c495c:	2800      	cmp	r0, #0
   c495e:	d0f4      	beq.n	c494a <__register_exitproc+0x4e>
   c4960:	2300      	movs	r3, #0
   c4962:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c4966:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c496a:	6863      	ldr	r3, [r4, #4]
   c496c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c4970:	2201      	movs	r2, #1
   c4972:	409a      	lsls	r2, r3
   c4974:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c4978:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c497c:	4313      	orrs	r3, r2
   c497e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c4982:	2e02      	cmp	r6, #2
   c4984:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c4988:	bf02      	ittt	eq
   c498a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c498e:	4313      	orreq	r3, r2
   c4990:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c4994:	6863      	ldr	r3, [r4, #4]
   c4996:	f8d8 0000 	ldr.w	r0, [r8]
   c499a:	1c5a      	adds	r2, r3, #1
   c499c:	3302      	adds	r3, #2
   c499e:	6062      	str	r2, [r4, #4]
   c49a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c49a4:	f000 fb7e 	bl	c50a4 <__retarget_lock_release_recursive>
   c49a8:	2000      	movs	r0, #0
   c49aa:	e7c6      	b.n	c493a <__register_exitproc+0x3e>
   c49ac:	2003e7e8 	.word	0x2003e7e8
   c49b0:	2003e75c 	.word	0x2003e75c
   c49b4:	00000000 	.word	0x00000000
   c49b8:	000bd705 	.word	0x000bd705
   c49bc:	2003dc04 	.word	0x2003dc04

000c49c0 <rshift>:
   c49c0:	6903      	ldr	r3, [r0, #16]
   c49c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c49c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c49ca:	ea4f 1261 	mov.w	r2, r1, asr #5
   c49ce:	f100 0414 	add.w	r4, r0, #20
   c49d2:	dd45      	ble.n	c4a60 <rshift+0xa0>
   c49d4:	f011 011f 	ands.w	r1, r1, #31
   c49d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c49dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c49e0:	d10c      	bne.n	c49fc <rshift+0x3c>
   c49e2:	f100 0710 	add.w	r7, r0, #16
   c49e6:	4629      	mov	r1, r5
   c49e8:	42b1      	cmp	r1, r6
   c49ea:	d334      	bcc.n	c4a56 <rshift+0x96>
   c49ec:	1a9b      	subs	r3, r3, r2
   c49ee:	009b      	lsls	r3, r3, #2
   c49f0:	1eea      	subs	r2, r5, #3
   c49f2:	4296      	cmp	r6, r2
   c49f4:	bf38      	it	cc
   c49f6:	2300      	movcc	r3, #0
   c49f8:	4423      	add	r3, r4
   c49fa:	e015      	b.n	c4a28 <rshift+0x68>
   c49fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c4a00:	f1c1 0820 	rsb	r8, r1, #32
   c4a04:	40cf      	lsrs	r7, r1
   c4a06:	f105 0e04 	add.w	lr, r5, #4
   c4a0a:	46a1      	mov	r9, r4
   c4a0c:	4576      	cmp	r6, lr
   c4a0e:	46f4      	mov	ip, lr
   c4a10:	d815      	bhi.n	c4a3e <rshift+0x7e>
   c4a12:	1a9a      	subs	r2, r3, r2
   c4a14:	0092      	lsls	r2, r2, #2
   c4a16:	3a04      	subs	r2, #4
   c4a18:	3501      	adds	r5, #1
   c4a1a:	42ae      	cmp	r6, r5
   c4a1c:	bf38      	it	cc
   c4a1e:	2200      	movcc	r2, #0
   c4a20:	18a3      	adds	r3, r4, r2
   c4a22:	50a7      	str	r7, [r4, r2]
   c4a24:	b107      	cbz	r7, c4a28 <rshift+0x68>
   c4a26:	3304      	adds	r3, #4
   c4a28:	1b1a      	subs	r2, r3, r4
   c4a2a:	42a3      	cmp	r3, r4
   c4a2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c4a30:	bf08      	it	eq
   c4a32:	2300      	moveq	r3, #0
   c4a34:	6102      	str	r2, [r0, #16]
   c4a36:	bf08      	it	eq
   c4a38:	6143      	streq	r3, [r0, #20]
   c4a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c4a3e:	f8dc c000 	ldr.w	ip, [ip]
   c4a42:	fa0c fc08 	lsl.w	ip, ip, r8
   c4a46:	ea4c 0707 	orr.w	r7, ip, r7
   c4a4a:	f849 7b04 	str.w	r7, [r9], #4
   c4a4e:	f85e 7b04 	ldr.w	r7, [lr], #4
   c4a52:	40cf      	lsrs	r7, r1
   c4a54:	e7da      	b.n	c4a0c <rshift+0x4c>
   c4a56:	f851 cb04 	ldr.w	ip, [r1], #4
   c4a5a:	f847 cf04 	str.w	ip, [r7, #4]!
   c4a5e:	e7c3      	b.n	c49e8 <rshift+0x28>
   c4a60:	4623      	mov	r3, r4
   c4a62:	e7e1      	b.n	c4a28 <rshift+0x68>

000c4a64 <__hexdig_fun>:
   c4a64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c4a68:	2b09      	cmp	r3, #9
   c4a6a:	d802      	bhi.n	c4a72 <__hexdig_fun+0xe>
   c4a6c:	3820      	subs	r0, #32
   c4a6e:	b2c0      	uxtb	r0, r0
   c4a70:	4770      	bx	lr
   c4a72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c4a76:	2b05      	cmp	r3, #5
   c4a78:	d801      	bhi.n	c4a7e <__hexdig_fun+0x1a>
   c4a7a:	3847      	subs	r0, #71	; 0x47
   c4a7c:	e7f7      	b.n	c4a6e <__hexdig_fun+0xa>
   c4a7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c4a82:	2b05      	cmp	r3, #5
   c4a84:	d801      	bhi.n	c4a8a <__hexdig_fun+0x26>
   c4a86:	3827      	subs	r0, #39	; 0x27
   c4a88:	e7f1      	b.n	c4a6e <__hexdig_fun+0xa>
   c4a8a:	2000      	movs	r0, #0
   c4a8c:	4770      	bx	lr
	...

000c4a90 <__gethex>:
   c4a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4a94:	ed2d 8b02 	vpush	{d8}
   c4a98:	b089      	sub	sp, #36	; 0x24
   c4a9a:	ee08 0a10 	vmov	s16, r0
   c4a9e:	9304      	str	r3, [sp, #16]
   c4aa0:	4bb4      	ldr	r3, [pc, #720]	; (c4d74 <__gethex+0x2e4>)
   c4aa2:	681b      	ldr	r3, [r3, #0]
   c4aa4:	9301      	str	r3, [sp, #4]
   c4aa6:	4618      	mov	r0, r3
   c4aa8:	468b      	mov	fp, r1
   c4aaa:	4690      	mov	r8, r2
   c4aac:	f7fe fff3 	bl	c3a96 <strlen>
   c4ab0:	9b01      	ldr	r3, [sp, #4]
   c4ab2:	f8db 2000 	ldr.w	r2, [fp]
   c4ab6:	4403      	add	r3, r0
   c4ab8:	4682      	mov	sl, r0
   c4aba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c4abe:	9305      	str	r3, [sp, #20]
   c4ac0:	1c93      	adds	r3, r2, #2
   c4ac2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c4ac6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c4aca:	32fe      	adds	r2, #254	; 0xfe
   c4acc:	18d1      	adds	r1, r2, r3
   c4ace:	461f      	mov	r7, r3
   c4ad0:	f813 0b01 	ldrb.w	r0, [r3], #1
   c4ad4:	9100      	str	r1, [sp, #0]
   c4ad6:	2830      	cmp	r0, #48	; 0x30
   c4ad8:	d0f8      	beq.n	c4acc <__gethex+0x3c>
   c4ada:	f7ff ffc3 	bl	c4a64 <__hexdig_fun>
   c4ade:	4604      	mov	r4, r0
   c4ae0:	2800      	cmp	r0, #0
   c4ae2:	d13a      	bne.n	c4b5a <__gethex+0xca>
   c4ae4:	9901      	ldr	r1, [sp, #4]
   c4ae6:	4652      	mov	r2, sl
   c4ae8:	4638      	mov	r0, r7
   c4aea:	f7fe ffef 	bl	c3acc <strncmp>
   c4aee:	4605      	mov	r5, r0
   c4af0:	2800      	cmp	r0, #0
   c4af2:	d168      	bne.n	c4bc6 <__gethex+0x136>
   c4af4:	f817 000a 	ldrb.w	r0, [r7, sl]
   c4af8:	eb07 060a 	add.w	r6, r7, sl
   c4afc:	f7ff ffb2 	bl	c4a64 <__hexdig_fun>
   c4b00:	2800      	cmp	r0, #0
   c4b02:	d062      	beq.n	c4bca <__gethex+0x13a>
   c4b04:	4633      	mov	r3, r6
   c4b06:	7818      	ldrb	r0, [r3, #0]
   c4b08:	2830      	cmp	r0, #48	; 0x30
   c4b0a:	461f      	mov	r7, r3
   c4b0c:	f103 0301 	add.w	r3, r3, #1
   c4b10:	d0f9      	beq.n	c4b06 <__gethex+0x76>
   c4b12:	f7ff ffa7 	bl	c4a64 <__hexdig_fun>
   c4b16:	2301      	movs	r3, #1
   c4b18:	fab0 f480 	clz	r4, r0
   c4b1c:	0964      	lsrs	r4, r4, #5
   c4b1e:	4635      	mov	r5, r6
   c4b20:	9300      	str	r3, [sp, #0]
   c4b22:	463a      	mov	r2, r7
   c4b24:	4616      	mov	r6, r2
   c4b26:	3201      	adds	r2, #1
   c4b28:	7830      	ldrb	r0, [r6, #0]
   c4b2a:	f7ff ff9b 	bl	c4a64 <__hexdig_fun>
   c4b2e:	2800      	cmp	r0, #0
   c4b30:	d1f8      	bne.n	c4b24 <__gethex+0x94>
   c4b32:	9901      	ldr	r1, [sp, #4]
   c4b34:	4652      	mov	r2, sl
   c4b36:	4630      	mov	r0, r6
   c4b38:	f7fe ffc8 	bl	c3acc <strncmp>
   c4b3c:	b980      	cbnz	r0, c4b60 <__gethex+0xd0>
   c4b3e:	b94d      	cbnz	r5, c4b54 <__gethex+0xc4>
   c4b40:	eb06 050a 	add.w	r5, r6, sl
   c4b44:	462a      	mov	r2, r5
   c4b46:	4616      	mov	r6, r2
   c4b48:	3201      	adds	r2, #1
   c4b4a:	7830      	ldrb	r0, [r6, #0]
   c4b4c:	f7ff ff8a 	bl	c4a64 <__hexdig_fun>
   c4b50:	2800      	cmp	r0, #0
   c4b52:	d1f8      	bne.n	c4b46 <__gethex+0xb6>
   c4b54:	1bad      	subs	r5, r5, r6
   c4b56:	00ad      	lsls	r5, r5, #2
   c4b58:	e004      	b.n	c4b64 <__gethex+0xd4>
   c4b5a:	2400      	movs	r4, #0
   c4b5c:	4625      	mov	r5, r4
   c4b5e:	e7e0      	b.n	c4b22 <__gethex+0x92>
   c4b60:	2d00      	cmp	r5, #0
   c4b62:	d1f7      	bne.n	c4b54 <__gethex+0xc4>
   c4b64:	7833      	ldrb	r3, [r6, #0]
   c4b66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4b6a:	2b50      	cmp	r3, #80	; 0x50
   c4b6c:	d13b      	bne.n	c4be6 <__gethex+0x156>
   c4b6e:	7873      	ldrb	r3, [r6, #1]
   c4b70:	2b2b      	cmp	r3, #43	; 0x2b
   c4b72:	d02c      	beq.n	c4bce <__gethex+0x13e>
   c4b74:	2b2d      	cmp	r3, #45	; 0x2d
   c4b76:	d02e      	beq.n	c4bd6 <__gethex+0x146>
   c4b78:	1c71      	adds	r1, r6, #1
   c4b7a:	f04f 0900 	mov.w	r9, #0
   c4b7e:	7808      	ldrb	r0, [r1, #0]
   c4b80:	f7ff ff70 	bl	c4a64 <__hexdig_fun>
   c4b84:	1e43      	subs	r3, r0, #1
   c4b86:	b2db      	uxtb	r3, r3
   c4b88:	2b18      	cmp	r3, #24
   c4b8a:	d82c      	bhi.n	c4be6 <__gethex+0x156>
   c4b8c:	f1a0 0210 	sub.w	r2, r0, #16
   c4b90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c4b94:	f7ff ff66 	bl	c4a64 <__hexdig_fun>
   c4b98:	1e43      	subs	r3, r0, #1
   c4b9a:	b2db      	uxtb	r3, r3
   c4b9c:	2b18      	cmp	r3, #24
   c4b9e:	d91d      	bls.n	c4bdc <__gethex+0x14c>
   c4ba0:	f1b9 0f00 	cmp.w	r9, #0
   c4ba4:	d000      	beq.n	c4ba8 <__gethex+0x118>
   c4ba6:	4252      	negs	r2, r2
   c4ba8:	4415      	add	r5, r2
   c4baa:	f8cb 1000 	str.w	r1, [fp]
   c4bae:	b1e4      	cbz	r4, c4bea <__gethex+0x15a>
   c4bb0:	9b00      	ldr	r3, [sp, #0]
   c4bb2:	2b00      	cmp	r3, #0
   c4bb4:	bf14      	ite	ne
   c4bb6:	2700      	movne	r7, #0
   c4bb8:	2706      	moveq	r7, #6
   c4bba:	4638      	mov	r0, r7
   c4bbc:	b009      	add	sp, #36	; 0x24
   c4bbe:	ecbd 8b02 	vpop	{d8}
   c4bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4bc6:	463e      	mov	r6, r7
   c4bc8:	4625      	mov	r5, r4
   c4bca:	2401      	movs	r4, #1
   c4bcc:	e7ca      	b.n	c4b64 <__gethex+0xd4>
   c4bce:	f04f 0900 	mov.w	r9, #0
   c4bd2:	1cb1      	adds	r1, r6, #2
   c4bd4:	e7d3      	b.n	c4b7e <__gethex+0xee>
   c4bd6:	f04f 0901 	mov.w	r9, #1
   c4bda:	e7fa      	b.n	c4bd2 <__gethex+0x142>
   c4bdc:	230a      	movs	r3, #10
   c4bde:	fb03 0202 	mla	r2, r3, r2, r0
   c4be2:	3a10      	subs	r2, #16
   c4be4:	e7d4      	b.n	c4b90 <__gethex+0x100>
   c4be6:	4631      	mov	r1, r6
   c4be8:	e7df      	b.n	c4baa <__gethex+0x11a>
   c4bea:	1bf3      	subs	r3, r6, r7
   c4bec:	3b01      	subs	r3, #1
   c4bee:	4621      	mov	r1, r4
   c4bf0:	2b07      	cmp	r3, #7
   c4bf2:	dc0b      	bgt.n	c4c0c <__gethex+0x17c>
   c4bf4:	ee18 0a10 	vmov	r0, s16
   c4bf8:	f000 fa68 	bl	c50cc <_Balloc>
   c4bfc:	4604      	mov	r4, r0
   c4bfe:	b940      	cbnz	r0, c4c12 <__gethex+0x182>
   c4c00:	4b5d      	ldr	r3, [pc, #372]	; (c4d78 <__gethex+0x2e8>)
   c4c02:	4602      	mov	r2, r0
   c4c04:	21de      	movs	r1, #222	; 0xde
   c4c06:	485d      	ldr	r0, [pc, #372]	; (c4d7c <__gethex+0x2ec>)
   c4c08:	f7f8 fdcc 	bl	bd7a4 <__assert_func>
   c4c0c:	3101      	adds	r1, #1
   c4c0e:	105b      	asrs	r3, r3, #1
   c4c10:	e7ee      	b.n	c4bf0 <__gethex+0x160>
   c4c12:	f100 0914 	add.w	r9, r0, #20
   c4c16:	f04f 0b00 	mov.w	fp, #0
   c4c1a:	f1ca 0301 	rsb	r3, sl, #1
   c4c1e:	f8cd 9008 	str.w	r9, [sp, #8]
   c4c22:	f8cd b000 	str.w	fp, [sp]
   c4c26:	9306      	str	r3, [sp, #24]
   c4c28:	42b7      	cmp	r7, r6
   c4c2a:	d340      	bcc.n	c4cae <__gethex+0x21e>
   c4c2c:	9802      	ldr	r0, [sp, #8]
   c4c2e:	9b00      	ldr	r3, [sp, #0]
   c4c30:	f840 3b04 	str.w	r3, [r0], #4
   c4c34:	eba0 0009 	sub.w	r0, r0, r9
   c4c38:	1080      	asrs	r0, r0, #2
   c4c3a:	0146      	lsls	r6, r0, #5
   c4c3c:	6120      	str	r0, [r4, #16]
   c4c3e:	4618      	mov	r0, r3
   c4c40:	f000 fb36 	bl	c52b0 <__hi0bits>
   c4c44:	1a30      	subs	r0, r6, r0
   c4c46:	f8d8 6000 	ldr.w	r6, [r8]
   c4c4a:	42b0      	cmp	r0, r6
   c4c4c:	dd63      	ble.n	c4d16 <__gethex+0x286>
   c4c4e:	1b87      	subs	r7, r0, r6
   c4c50:	4639      	mov	r1, r7
   c4c52:	4620      	mov	r0, r4
   c4c54:	f000 feda 	bl	c5a0c <__any_on>
   c4c58:	4682      	mov	sl, r0
   c4c5a:	b1a8      	cbz	r0, c4c88 <__gethex+0x1f8>
   c4c5c:	1e7b      	subs	r3, r7, #1
   c4c5e:	1159      	asrs	r1, r3, #5
   c4c60:	f003 021f 	and.w	r2, r3, #31
   c4c64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c4c68:	f04f 0a01 	mov.w	sl, #1
   c4c6c:	fa0a f202 	lsl.w	r2, sl, r2
   c4c70:	420a      	tst	r2, r1
   c4c72:	d009      	beq.n	c4c88 <__gethex+0x1f8>
   c4c74:	4553      	cmp	r3, sl
   c4c76:	dd05      	ble.n	c4c84 <__gethex+0x1f4>
   c4c78:	1eb9      	subs	r1, r7, #2
   c4c7a:	4620      	mov	r0, r4
   c4c7c:	f000 fec6 	bl	c5a0c <__any_on>
   c4c80:	2800      	cmp	r0, #0
   c4c82:	d145      	bne.n	c4d10 <__gethex+0x280>
   c4c84:	f04f 0a02 	mov.w	sl, #2
   c4c88:	4639      	mov	r1, r7
   c4c8a:	4620      	mov	r0, r4
   c4c8c:	f7ff fe98 	bl	c49c0 <rshift>
   c4c90:	443d      	add	r5, r7
   c4c92:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c4c96:	42ab      	cmp	r3, r5
   c4c98:	da4c      	bge.n	c4d34 <__gethex+0x2a4>
   c4c9a:	ee18 0a10 	vmov	r0, s16
   c4c9e:	4621      	mov	r1, r4
   c4ca0:	f000 fa54 	bl	c514c <_Bfree>
   c4ca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4ca6:	2300      	movs	r3, #0
   c4ca8:	6013      	str	r3, [r2, #0]
   c4caa:	27a3      	movs	r7, #163	; 0xa3
   c4cac:	e785      	b.n	c4bba <__gethex+0x12a>
   c4cae:	1e73      	subs	r3, r6, #1
   c4cb0:	9a05      	ldr	r2, [sp, #20]
   c4cb2:	9303      	str	r3, [sp, #12]
   c4cb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c4cb8:	4293      	cmp	r3, r2
   c4cba:	d019      	beq.n	c4cf0 <__gethex+0x260>
   c4cbc:	f1bb 0f20 	cmp.w	fp, #32
   c4cc0:	d107      	bne.n	c4cd2 <__gethex+0x242>
   c4cc2:	9b02      	ldr	r3, [sp, #8]
   c4cc4:	9a00      	ldr	r2, [sp, #0]
   c4cc6:	f843 2b04 	str.w	r2, [r3], #4
   c4cca:	9302      	str	r3, [sp, #8]
   c4ccc:	2300      	movs	r3, #0
   c4cce:	9300      	str	r3, [sp, #0]
   c4cd0:	469b      	mov	fp, r3
   c4cd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c4cd6:	f7ff fec5 	bl	c4a64 <__hexdig_fun>
   c4cda:	9b00      	ldr	r3, [sp, #0]
   c4cdc:	f000 000f 	and.w	r0, r0, #15
   c4ce0:	fa00 f00b 	lsl.w	r0, r0, fp
   c4ce4:	4303      	orrs	r3, r0
   c4ce6:	9300      	str	r3, [sp, #0]
   c4ce8:	f10b 0b04 	add.w	fp, fp, #4
   c4cec:	9b03      	ldr	r3, [sp, #12]
   c4cee:	e00d      	b.n	c4d0c <__gethex+0x27c>
   c4cf0:	9b03      	ldr	r3, [sp, #12]
   c4cf2:	9a06      	ldr	r2, [sp, #24]
   c4cf4:	4413      	add	r3, r2
   c4cf6:	42bb      	cmp	r3, r7
   c4cf8:	d3e0      	bcc.n	c4cbc <__gethex+0x22c>
   c4cfa:	4618      	mov	r0, r3
   c4cfc:	9901      	ldr	r1, [sp, #4]
   c4cfe:	9307      	str	r3, [sp, #28]
   c4d00:	4652      	mov	r2, sl
   c4d02:	f7fe fee3 	bl	c3acc <strncmp>
   c4d06:	9b07      	ldr	r3, [sp, #28]
   c4d08:	2800      	cmp	r0, #0
   c4d0a:	d1d7      	bne.n	c4cbc <__gethex+0x22c>
   c4d0c:	461e      	mov	r6, r3
   c4d0e:	e78b      	b.n	c4c28 <__gethex+0x198>
   c4d10:	f04f 0a03 	mov.w	sl, #3
   c4d14:	e7b8      	b.n	c4c88 <__gethex+0x1f8>
   c4d16:	da0a      	bge.n	c4d2e <__gethex+0x29e>
   c4d18:	1a37      	subs	r7, r6, r0
   c4d1a:	4621      	mov	r1, r4
   c4d1c:	ee18 0a10 	vmov	r0, s16
   c4d20:	463a      	mov	r2, r7
   c4d22:	f000 fc2f 	bl	c5584 <__lshift>
   c4d26:	1bed      	subs	r5, r5, r7
   c4d28:	4604      	mov	r4, r0
   c4d2a:	f100 0914 	add.w	r9, r0, #20
   c4d2e:	f04f 0a00 	mov.w	sl, #0
   c4d32:	e7ae      	b.n	c4c92 <__gethex+0x202>
   c4d34:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c4d38:	42a8      	cmp	r0, r5
   c4d3a:	dd72      	ble.n	c4e22 <__gethex+0x392>
   c4d3c:	1b45      	subs	r5, r0, r5
   c4d3e:	42ae      	cmp	r6, r5
   c4d40:	dc36      	bgt.n	c4db0 <__gethex+0x320>
   c4d42:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4d46:	2b02      	cmp	r3, #2
   c4d48:	d02a      	beq.n	c4da0 <__gethex+0x310>
   c4d4a:	2b03      	cmp	r3, #3
   c4d4c:	d02c      	beq.n	c4da8 <__gethex+0x318>
   c4d4e:	2b01      	cmp	r3, #1
   c4d50:	d11c      	bne.n	c4d8c <__gethex+0x2fc>
   c4d52:	42ae      	cmp	r6, r5
   c4d54:	d11a      	bne.n	c4d8c <__gethex+0x2fc>
   c4d56:	2e01      	cmp	r6, #1
   c4d58:	d112      	bne.n	c4d80 <__gethex+0x2f0>
   c4d5a:	9a04      	ldr	r2, [sp, #16]
   c4d5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c4d60:	6013      	str	r3, [r2, #0]
   c4d62:	2301      	movs	r3, #1
   c4d64:	6123      	str	r3, [r4, #16]
   c4d66:	f8c9 3000 	str.w	r3, [r9]
   c4d6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4d6c:	2762      	movs	r7, #98	; 0x62
   c4d6e:	601c      	str	r4, [r3, #0]
   c4d70:	e723      	b.n	c4bba <__gethex+0x12a>
   c4d72:	bf00      	nop
   c4d74:	000c7b24 	.word	0x000c7b24
   c4d78:	000c7ab1 	.word	0x000c7ab1
   c4d7c:	000c7ac2 	.word	0x000c7ac2
   c4d80:	1e71      	subs	r1, r6, #1
   c4d82:	4620      	mov	r0, r4
   c4d84:	f000 fe42 	bl	c5a0c <__any_on>
   c4d88:	2800      	cmp	r0, #0
   c4d8a:	d1e6      	bne.n	c4d5a <__gethex+0x2ca>
   c4d8c:	ee18 0a10 	vmov	r0, s16
   c4d90:	4621      	mov	r1, r4
   c4d92:	f000 f9db 	bl	c514c <_Bfree>
   c4d96:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c4d98:	2300      	movs	r3, #0
   c4d9a:	6013      	str	r3, [r2, #0]
   c4d9c:	2750      	movs	r7, #80	; 0x50
   c4d9e:	e70c      	b.n	c4bba <__gethex+0x12a>
   c4da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4da2:	2b00      	cmp	r3, #0
   c4da4:	d1f2      	bne.n	c4d8c <__gethex+0x2fc>
   c4da6:	e7d8      	b.n	c4d5a <__gethex+0x2ca>
   c4da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4daa:	2b00      	cmp	r3, #0
   c4dac:	d1d5      	bne.n	c4d5a <__gethex+0x2ca>
   c4dae:	e7ed      	b.n	c4d8c <__gethex+0x2fc>
   c4db0:	1e6f      	subs	r7, r5, #1
   c4db2:	f1ba 0f00 	cmp.w	sl, #0
   c4db6:	d131      	bne.n	c4e1c <__gethex+0x38c>
   c4db8:	b127      	cbz	r7, c4dc4 <__gethex+0x334>
   c4dba:	4639      	mov	r1, r7
   c4dbc:	4620      	mov	r0, r4
   c4dbe:	f000 fe25 	bl	c5a0c <__any_on>
   c4dc2:	4682      	mov	sl, r0
   c4dc4:	117b      	asrs	r3, r7, #5
   c4dc6:	2101      	movs	r1, #1
   c4dc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c4dcc:	f007 071f 	and.w	r7, r7, #31
   c4dd0:	fa01 f707 	lsl.w	r7, r1, r7
   c4dd4:	421f      	tst	r7, r3
   c4dd6:	4629      	mov	r1, r5
   c4dd8:	4620      	mov	r0, r4
   c4dda:	bf18      	it	ne
   c4ddc:	f04a 0a02 	orrne.w	sl, sl, #2
   c4de0:	1b76      	subs	r6, r6, r5
   c4de2:	f7ff fded 	bl	c49c0 <rshift>
   c4de6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c4dea:	2702      	movs	r7, #2
   c4dec:	f1ba 0f00 	cmp.w	sl, #0
   c4df0:	d048      	beq.n	c4e84 <__gethex+0x3f4>
   c4df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c4df6:	2b02      	cmp	r3, #2
   c4df8:	d015      	beq.n	c4e26 <__gethex+0x396>
   c4dfa:	2b03      	cmp	r3, #3
   c4dfc:	d017      	beq.n	c4e2e <__gethex+0x39e>
   c4dfe:	2b01      	cmp	r3, #1
   c4e00:	d109      	bne.n	c4e16 <__gethex+0x386>
   c4e02:	f01a 0f02 	tst.w	sl, #2
   c4e06:	d006      	beq.n	c4e16 <__gethex+0x386>
   c4e08:	f8d9 0000 	ldr.w	r0, [r9]
   c4e0c:	ea4a 0a00 	orr.w	sl, sl, r0
   c4e10:	f01a 0f01 	tst.w	sl, #1
   c4e14:	d10e      	bne.n	c4e34 <__gethex+0x3a4>
   c4e16:	f047 0710 	orr.w	r7, r7, #16
   c4e1a:	e033      	b.n	c4e84 <__gethex+0x3f4>
   c4e1c:	f04f 0a01 	mov.w	sl, #1
   c4e20:	e7d0      	b.n	c4dc4 <__gethex+0x334>
   c4e22:	2701      	movs	r7, #1
   c4e24:	e7e2      	b.n	c4dec <__gethex+0x35c>
   c4e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4e28:	f1c3 0301 	rsb	r3, r3, #1
   c4e2c:	9315      	str	r3, [sp, #84]	; 0x54
   c4e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c4e30:	2b00      	cmp	r3, #0
   c4e32:	d0f0      	beq.n	c4e16 <__gethex+0x386>
   c4e34:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c4e38:	f104 0314 	add.w	r3, r4, #20
   c4e3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c4e40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c4e44:	f04f 0c00 	mov.w	ip, #0
   c4e48:	4618      	mov	r0, r3
   c4e4a:	f853 2b04 	ldr.w	r2, [r3], #4
   c4e4e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c4e52:	d01c      	beq.n	c4e8e <__gethex+0x3fe>
   c4e54:	3201      	adds	r2, #1
   c4e56:	6002      	str	r2, [r0, #0]
   c4e58:	2f02      	cmp	r7, #2
   c4e5a:	f104 0314 	add.w	r3, r4, #20
   c4e5e:	d13f      	bne.n	c4ee0 <__gethex+0x450>
   c4e60:	f8d8 2000 	ldr.w	r2, [r8]
   c4e64:	3a01      	subs	r2, #1
   c4e66:	42b2      	cmp	r2, r6
   c4e68:	d10a      	bne.n	c4e80 <__gethex+0x3f0>
   c4e6a:	1171      	asrs	r1, r6, #5
   c4e6c:	2201      	movs	r2, #1
   c4e6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c4e72:	f006 061f 	and.w	r6, r6, #31
   c4e76:	fa02 f606 	lsl.w	r6, r2, r6
   c4e7a:	421e      	tst	r6, r3
   c4e7c:	bf18      	it	ne
   c4e7e:	4617      	movne	r7, r2
   c4e80:	f047 0720 	orr.w	r7, r7, #32
   c4e84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c4e86:	601c      	str	r4, [r3, #0]
   c4e88:	9b04      	ldr	r3, [sp, #16]
   c4e8a:	601d      	str	r5, [r3, #0]
   c4e8c:	e695      	b.n	c4bba <__gethex+0x12a>
   c4e8e:	4299      	cmp	r1, r3
   c4e90:	f843 cc04 	str.w	ip, [r3, #-4]
   c4e94:	d8d8      	bhi.n	c4e48 <__gethex+0x3b8>
   c4e96:	68a3      	ldr	r3, [r4, #8]
   c4e98:	459b      	cmp	fp, r3
   c4e9a:	db19      	blt.n	c4ed0 <__gethex+0x440>
   c4e9c:	6861      	ldr	r1, [r4, #4]
   c4e9e:	ee18 0a10 	vmov	r0, s16
   c4ea2:	3101      	adds	r1, #1
   c4ea4:	f000 f912 	bl	c50cc <_Balloc>
   c4ea8:	4681      	mov	r9, r0
   c4eaa:	b918      	cbnz	r0, c4eb4 <__gethex+0x424>
   c4eac:	4b1a      	ldr	r3, [pc, #104]	; (c4f18 <__gethex+0x488>)
   c4eae:	4602      	mov	r2, r0
   c4eb0:	2184      	movs	r1, #132	; 0x84
   c4eb2:	e6a8      	b.n	c4c06 <__gethex+0x176>
   c4eb4:	6922      	ldr	r2, [r4, #16]
   c4eb6:	3202      	adds	r2, #2
   c4eb8:	f104 010c 	add.w	r1, r4, #12
   c4ebc:	0092      	lsls	r2, r2, #2
   c4ebe:	300c      	adds	r0, #12
   c4ec0:	f7fe fd36 	bl	c3930 <memcpy>
   c4ec4:	4621      	mov	r1, r4
   c4ec6:	ee18 0a10 	vmov	r0, s16
   c4eca:	f000 f93f 	bl	c514c <_Bfree>
   c4ece:	464c      	mov	r4, r9
   c4ed0:	6923      	ldr	r3, [r4, #16]
   c4ed2:	1c5a      	adds	r2, r3, #1
   c4ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c4ed8:	6122      	str	r2, [r4, #16]
   c4eda:	2201      	movs	r2, #1
   c4edc:	615a      	str	r2, [r3, #20]
   c4ede:	e7bb      	b.n	c4e58 <__gethex+0x3c8>
   c4ee0:	6922      	ldr	r2, [r4, #16]
   c4ee2:	455a      	cmp	r2, fp
   c4ee4:	dd0b      	ble.n	c4efe <__gethex+0x46e>
   c4ee6:	2101      	movs	r1, #1
   c4ee8:	4620      	mov	r0, r4
   c4eea:	f7ff fd69 	bl	c49c0 <rshift>
   c4eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c4ef2:	3501      	adds	r5, #1
   c4ef4:	42ab      	cmp	r3, r5
   c4ef6:	f6ff aed0 	blt.w	c4c9a <__gethex+0x20a>
   c4efa:	2701      	movs	r7, #1
   c4efc:	e7c0      	b.n	c4e80 <__gethex+0x3f0>
   c4efe:	f016 061f 	ands.w	r6, r6, #31
   c4f02:	d0fa      	beq.n	c4efa <__gethex+0x46a>
   c4f04:	4453      	add	r3, sl
   c4f06:	f1c6 0620 	rsb	r6, r6, #32
   c4f0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c4f0e:	f000 f9cf 	bl	c52b0 <__hi0bits>
   c4f12:	42b0      	cmp	r0, r6
   c4f14:	dbe7      	blt.n	c4ee6 <__gethex+0x456>
   c4f16:	e7f0      	b.n	c4efa <__gethex+0x46a>
   c4f18:	000c7ab1 	.word	0x000c7ab1

000c4f1c <L_shift>:
   c4f1c:	f1c2 0208 	rsb	r2, r2, #8
   c4f20:	0092      	lsls	r2, r2, #2
   c4f22:	b570      	push	{r4, r5, r6, lr}
   c4f24:	f1c2 0620 	rsb	r6, r2, #32
   c4f28:	6843      	ldr	r3, [r0, #4]
   c4f2a:	6804      	ldr	r4, [r0, #0]
   c4f2c:	fa03 f506 	lsl.w	r5, r3, r6
   c4f30:	432c      	orrs	r4, r5
   c4f32:	40d3      	lsrs	r3, r2
   c4f34:	6004      	str	r4, [r0, #0]
   c4f36:	f840 3f04 	str.w	r3, [r0, #4]!
   c4f3a:	4288      	cmp	r0, r1
   c4f3c:	d3f4      	bcc.n	c4f28 <L_shift+0xc>
   c4f3e:	bd70      	pop	{r4, r5, r6, pc}

000c4f40 <__match>:
   c4f40:	b530      	push	{r4, r5, lr}
   c4f42:	6803      	ldr	r3, [r0, #0]
   c4f44:	3301      	adds	r3, #1
   c4f46:	f811 4b01 	ldrb.w	r4, [r1], #1
   c4f4a:	b914      	cbnz	r4, c4f52 <__match+0x12>
   c4f4c:	6003      	str	r3, [r0, #0]
   c4f4e:	2001      	movs	r0, #1
   c4f50:	bd30      	pop	{r4, r5, pc}
   c4f52:	f813 2b01 	ldrb.w	r2, [r3], #1
   c4f56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c4f5a:	2d19      	cmp	r5, #25
   c4f5c:	bf98      	it	ls
   c4f5e:	3220      	addls	r2, #32
   c4f60:	42a2      	cmp	r2, r4
   c4f62:	d0f0      	beq.n	c4f46 <__match+0x6>
   c4f64:	2000      	movs	r0, #0
   c4f66:	e7f3      	b.n	c4f50 <__match+0x10>

000c4f68 <__hexnan>:
   c4f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4f6c:	680b      	ldr	r3, [r1, #0]
   c4f6e:	115e      	asrs	r6, r3, #5
   c4f70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c4f74:	f013 031f 	ands.w	r3, r3, #31
   c4f78:	b087      	sub	sp, #28
   c4f7a:	bf18      	it	ne
   c4f7c:	3604      	addne	r6, #4
   c4f7e:	2500      	movs	r5, #0
   c4f80:	1f37      	subs	r7, r6, #4
   c4f82:	4690      	mov	r8, r2
   c4f84:	6802      	ldr	r2, [r0, #0]
   c4f86:	9301      	str	r3, [sp, #4]
   c4f88:	4682      	mov	sl, r0
   c4f8a:	f846 5c04 	str.w	r5, [r6, #-4]
   c4f8e:	46b9      	mov	r9, r7
   c4f90:	463c      	mov	r4, r7
   c4f92:	9502      	str	r5, [sp, #8]
   c4f94:	46ab      	mov	fp, r5
   c4f96:	7851      	ldrb	r1, [r2, #1]
   c4f98:	1c53      	adds	r3, r2, #1
   c4f9a:	9303      	str	r3, [sp, #12]
   c4f9c:	b341      	cbz	r1, c4ff0 <__hexnan+0x88>
   c4f9e:	4608      	mov	r0, r1
   c4fa0:	9205      	str	r2, [sp, #20]
   c4fa2:	9104      	str	r1, [sp, #16]
   c4fa4:	f7ff fd5e 	bl	c4a64 <__hexdig_fun>
   c4fa8:	2800      	cmp	r0, #0
   c4faa:	d14f      	bne.n	c504c <__hexnan+0xe4>
   c4fac:	9904      	ldr	r1, [sp, #16]
   c4fae:	9a05      	ldr	r2, [sp, #20]
   c4fb0:	2920      	cmp	r1, #32
   c4fb2:	d818      	bhi.n	c4fe6 <__hexnan+0x7e>
   c4fb4:	9b02      	ldr	r3, [sp, #8]
   c4fb6:	459b      	cmp	fp, r3
   c4fb8:	dd13      	ble.n	c4fe2 <__hexnan+0x7a>
   c4fba:	454c      	cmp	r4, r9
   c4fbc:	d206      	bcs.n	c4fcc <__hexnan+0x64>
   c4fbe:	2d07      	cmp	r5, #7
   c4fc0:	dc04      	bgt.n	c4fcc <__hexnan+0x64>
   c4fc2:	462a      	mov	r2, r5
   c4fc4:	4649      	mov	r1, r9
   c4fc6:	4620      	mov	r0, r4
   c4fc8:	f7ff ffa8 	bl	c4f1c <L_shift>
   c4fcc:	4544      	cmp	r4, r8
   c4fce:	d950      	bls.n	c5072 <__hexnan+0x10a>
   c4fd0:	2300      	movs	r3, #0
   c4fd2:	f1a4 0904 	sub.w	r9, r4, #4
   c4fd6:	f844 3c04 	str.w	r3, [r4, #-4]
   c4fda:	f8cd b008 	str.w	fp, [sp, #8]
   c4fde:	464c      	mov	r4, r9
   c4fe0:	461d      	mov	r5, r3
   c4fe2:	9a03      	ldr	r2, [sp, #12]
   c4fe4:	e7d7      	b.n	c4f96 <__hexnan+0x2e>
   c4fe6:	2929      	cmp	r1, #41	; 0x29
   c4fe8:	d156      	bne.n	c5098 <__hexnan+0x130>
   c4fea:	3202      	adds	r2, #2
   c4fec:	f8ca 2000 	str.w	r2, [sl]
   c4ff0:	f1bb 0f00 	cmp.w	fp, #0
   c4ff4:	d050      	beq.n	c5098 <__hexnan+0x130>
   c4ff6:	454c      	cmp	r4, r9
   c4ff8:	d206      	bcs.n	c5008 <__hexnan+0xa0>
   c4ffa:	2d07      	cmp	r5, #7
   c4ffc:	dc04      	bgt.n	c5008 <__hexnan+0xa0>
   c4ffe:	462a      	mov	r2, r5
   c5000:	4649      	mov	r1, r9
   c5002:	4620      	mov	r0, r4
   c5004:	f7ff ff8a 	bl	c4f1c <L_shift>
   c5008:	4544      	cmp	r4, r8
   c500a:	d934      	bls.n	c5076 <__hexnan+0x10e>
   c500c:	f1a8 0204 	sub.w	r2, r8, #4
   c5010:	4623      	mov	r3, r4
   c5012:	f853 1b04 	ldr.w	r1, [r3], #4
   c5016:	f842 1f04 	str.w	r1, [r2, #4]!
   c501a:	429f      	cmp	r7, r3
   c501c:	d2f9      	bcs.n	c5012 <__hexnan+0xaa>
   c501e:	1b3b      	subs	r3, r7, r4
   c5020:	f023 0303 	bic.w	r3, r3, #3
   c5024:	3304      	adds	r3, #4
   c5026:	3401      	adds	r4, #1
   c5028:	3e03      	subs	r6, #3
   c502a:	42b4      	cmp	r4, r6
   c502c:	bf88      	it	hi
   c502e:	2304      	movhi	r3, #4
   c5030:	4443      	add	r3, r8
   c5032:	2200      	movs	r2, #0
   c5034:	f843 2b04 	str.w	r2, [r3], #4
   c5038:	429f      	cmp	r7, r3
   c503a:	d2fb      	bcs.n	c5034 <__hexnan+0xcc>
   c503c:	683b      	ldr	r3, [r7, #0]
   c503e:	b91b      	cbnz	r3, c5048 <__hexnan+0xe0>
   c5040:	4547      	cmp	r7, r8
   c5042:	d127      	bne.n	c5094 <__hexnan+0x12c>
   c5044:	2301      	movs	r3, #1
   c5046:	603b      	str	r3, [r7, #0]
   c5048:	2005      	movs	r0, #5
   c504a:	e026      	b.n	c509a <__hexnan+0x132>
   c504c:	3501      	adds	r5, #1
   c504e:	2d08      	cmp	r5, #8
   c5050:	f10b 0b01 	add.w	fp, fp, #1
   c5054:	dd06      	ble.n	c5064 <__hexnan+0xfc>
   c5056:	4544      	cmp	r4, r8
   c5058:	d9c3      	bls.n	c4fe2 <__hexnan+0x7a>
   c505a:	2300      	movs	r3, #0
   c505c:	f844 3c04 	str.w	r3, [r4, #-4]
   c5060:	2501      	movs	r5, #1
   c5062:	3c04      	subs	r4, #4
   c5064:	6822      	ldr	r2, [r4, #0]
   c5066:	f000 000f 	and.w	r0, r0, #15
   c506a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c506e:	6022      	str	r2, [r4, #0]
   c5070:	e7b7      	b.n	c4fe2 <__hexnan+0x7a>
   c5072:	2508      	movs	r5, #8
   c5074:	e7b5      	b.n	c4fe2 <__hexnan+0x7a>
   c5076:	9b01      	ldr	r3, [sp, #4]
   c5078:	2b00      	cmp	r3, #0
   c507a:	d0df      	beq.n	c503c <__hexnan+0xd4>
   c507c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5080:	f1c3 0320 	rsb	r3, r3, #32
   c5084:	fa22 f303 	lsr.w	r3, r2, r3
   c5088:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c508c:	401a      	ands	r2, r3
   c508e:	f846 2c04 	str.w	r2, [r6, #-4]
   c5092:	e7d3      	b.n	c503c <__hexnan+0xd4>
   c5094:	3f04      	subs	r7, #4
   c5096:	e7d1      	b.n	c503c <__hexnan+0xd4>
   c5098:	2004      	movs	r0, #4
   c509a:	b007      	add	sp, #28
   c509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c50a0 <__retarget_lock_acquire_recursive>:
   c50a0:	4770      	bx	lr

000c50a2 <__retarget_lock_release>:
   c50a2:	4770      	bx	lr

000c50a4 <__retarget_lock_release_recursive>:
   c50a4:	4770      	bx	lr

000c50a6 <__ascii_mbtowc>:
   c50a6:	b082      	sub	sp, #8
   c50a8:	b901      	cbnz	r1, c50ac <__ascii_mbtowc+0x6>
   c50aa:	a901      	add	r1, sp, #4
   c50ac:	b142      	cbz	r2, c50c0 <__ascii_mbtowc+0x1a>
   c50ae:	b14b      	cbz	r3, c50c4 <__ascii_mbtowc+0x1e>
   c50b0:	7813      	ldrb	r3, [r2, #0]
   c50b2:	600b      	str	r3, [r1, #0]
   c50b4:	7812      	ldrb	r2, [r2, #0]
   c50b6:	1e10      	subs	r0, r2, #0
   c50b8:	bf18      	it	ne
   c50ba:	2001      	movne	r0, #1
   c50bc:	b002      	add	sp, #8
   c50be:	4770      	bx	lr
   c50c0:	4610      	mov	r0, r2
   c50c2:	e7fb      	b.n	c50bc <__ascii_mbtowc+0x16>
   c50c4:	f06f 0001 	mvn.w	r0, #1
   c50c8:	e7f8      	b.n	c50bc <__ascii_mbtowc+0x16>
	...

000c50cc <_Balloc>:
   c50cc:	b570      	push	{r4, r5, r6, lr}
   c50ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c50d0:	4604      	mov	r4, r0
   c50d2:	460d      	mov	r5, r1
   c50d4:	b976      	cbnz	r6, c50f4 <_Balloc+0x28>
   c50d6:	2010      	movs	r0, #16
   c50d8:	f7f8 fb14 	bl	bd704 <malloc>
   c50dc:	4602      	mov	r2, r0
   c50de:	6260      	str	r0, [r4, #36]	; 0x24
   c50e0:	b920      	cbnz	r0, c50ec <_Balloc+0x20>
   c50e2:	4b18      	ldr	r3, [pc, #96]	; (c5144 <_Balloc+0x78>)
   c50e4:	4818      	ldr	r0, [pc, #96]	; (c5148 <_Balloc+0x7c>)
   c50e6:	2166      	movs	r1, #102	; 0x66
   c50e8:	f7f8 fb5c 	bl	bd7a4 <__assert_func>
   c50ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c50f0:	6006      	str	r6, [r0, #0]
   c50f2:	60c6      	str	r6, [r0, #12]
   c50f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c50f6:	68f3      	ldr	r3, [r6, #12]
   c50f8:	b183      	cbz	r3, c511c <_Balloc+0x50>
   c50fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c50fc:	68db      	ldr	r3, [r3, #12]
   c50fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5102:	b9b8      	cbnz	r0, c5134 <_Balloc+0x68>
   c5104:	2101      	movs	r1, #1
   c5106:	fa01 f605 	lsl.w	r6, r1, r5
   c510a:	1d72      	adds	r2, r6, #5
   c510c:	0092      	lsls	r2, r2, #2
   c510e:	4620      	mov	r0, r4
   c5110:	f000 fc9d 	bl	c5a4e <_calloc_r>
   c5114:	b160      	cbz	r0, c5130 <_Balloc+0x64>
   c5116:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c511a:	e00e      	b.n	c513a <_Balloc+0x6e>
   c511c:	2221      	movs	r2, #33	; 0x21
   c511e:	2104      	movs	r1, #4
   c5120:	4620      	mov	r0, r4
   c5122:	f000 fc94 	bl	c5a4e <_calloc_r>
   c5126:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5128:	60f0      	str	r0, [r6, #12]
   c512a:	68db      	ldr	r3, [r3, #12]
   c512c:	2b00      	cmp	r3, #0
   c512e:	d1e4      	bne.n	c50fa <_Balloc+0x2e>
   c5130:	2000      	movs	r0, #0
   c5132:	bd70      	pop	{r4, r5, r6, pc}
   c5134:	6802      	ldr	r2, [r0, #0]
   c5136:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c513a:	2300      	movs	r3, #0
   c513c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5140:	e7f7      	b.n	c5132 <_Balloc+0x66>
   c5142:	bf00      	nop
   c5144:	000c78e0 	.word	0x000c78e0
   c5148:	000c7b36 	.word	0x000c7b36

000c514c <_Bfree>:
   c514c:	b570      	push	{r4, r5, r6, lr}
   c514e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5150:	4605      	mov	r5, r0
   c5152:	460c      	mov	r4, r1
   c5154:	b976      	cbnz	r6, c5174 <_Bfree+0x28>
   c5156:	2010      	movs	r0, #16
   c5158:	f7f8 fad4 	bl	bd704 <malloc>
   c515c:	4602      	mov	r2, r0
   c515e:	6268      	str	r0, [r5, #36]	; 0x24
   c5160:	b920      	cbnz	r0, c516c <_Bfree+0x20>
   c5162:	4b09      	ldr	r3, [pc, #36]	; (c5188 <_Bfree+0x3c>)
   c5164:	4809      	ldr	r0, [pc, #36]	; (c518c <_Bfree+0x40>)
   c5166:	218a      	movs	r1, #138	; 0x8a
   c5168:	f7f8 fb1c 	bl	bd7a4 <__assert_func>
   c516c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5170:	6006      	str	r6, [r0, #0]
   c5172:	60c6      	str	r6, [r0, #12]
   c5174:	b13c      	cbz	r4, c5186 <_Bfree+0x3a>
   c5176:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5178:	6862      	ldr	r2, [r4, #4]
   c517a:	68db      	ldr	r3, [r3, #12]
   c517c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5180:	6021      	str	r1, [r4, #0]
   c5182:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5186:	bd70      	pop	{r4, r5, r6, pc}
   c5188:	000c78e0 	.word	0x000c78e0
   c518c:	000c7b36 	.word	0x000c7b36

000c5190 <__multadd>:
   c5190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5194:	690d      	ldr	r5, [r1, #16]
   c5196:	4607      	mov	r7, r0
   c5198:	460c      	mov	r4, r1
   c519a:	461e      	mov	r6, r3
   c519c:	f101 0c14 	add.w	ip, r1, #20
   c51a0:	2000      	movs	r0, #0
   c51a2:	f8dc 3000 	ldr.w	r3, [ip]
   c51a6:	b299      	uxth	r1, r3
   c51a8:	fb02 6101 	mla	r1, r2, r1, r6
   c51ac:	0c1e      	lsrs	r6, r3, #16
   c51ae:	0c0b      	lsrs	r3, r1, #16
   c51b0:	fb02 3306 	mla	r3, r2, r6, r3
   c51b4:	b289      	uxth	r1, r1
   c51b6:	3001      	adds	r0, #1
   c51b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c51bc:	4285      	cmp	r5, r0
   c51be:	f84c 1b04 	str.w	r1, [ip], #4
   c51c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c51c6:	dcec      	bgt.n	c51a2 <__multadd+0x12>
   c51c8:	b30e      	cbz	r6, c520e <__multadd+0x7e>
   c51ca:	68a3      	ldr	r3, [r4, #8]
   c51cc:	42ab      	cmp	r3, r5
   c51ce:	dc19      	bgt.n	c5204 <__multadd+0x74>
   c51d0:	6861      	ldr	r1, [r4, #4]
   c51d2:	4638      	mov	r0, r7
   c51d4:	3101      	adds	r1, #1
   c51d6:	f7ff ff79 	bl	c50cc <_Balloc>
   c51da:	4680      	mov	r8, r0
   c51dc:	b928      	cbnz	r0, c51ea <__multadd+0x5a>
   c51de:	4602      	mov	r2, r0
   c51e0:	4b0c      	ldr	r3, [pc, #48]	; (c5214 <__multadd+0x84>)
   c51e2:	480d      	ldr	r0, [pc, #52]	; (c5218 <__multadd+0x88>)
   c51e4:	21b5      	movs	r1, #181	; 0xb5
   c51e6:	f7f8 fadd 	bl	bd7a4 <__assert_func>
   c51ea:	6922      	ldr	r2, [r4, #16]
   c51ec:	3202      	adds	r2, #2
   c51ee:	f104 010c 	add.w	r1, r4, #12
   c51f2:	0092      	lsls	r2, r2, #2
   c51f4:	300c      	adds	r0, #12
   c51f6:	f7fe fb9b 	bl	c3930 <memcpy>
   c51fa:	4621      	mov	r1, r4
   c51fc:	4638      	mov	r0, r7
   c51fe:	f7ff ffa5 	bl	c514c <_Bfree>
   c5202:	4644      	mov	r4, r8
   c5204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5208:	3501      	adds	r5, #1
   c520a:	615e      	str	r6, [r3, #20]
   c520c:	6125      	str	r5, [r4, #16]
   c520e:	4620      	mov	r0, r4
   c5210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5214:	000c7ab1 	.word	0x000c7ab1
   c5218:	000c7b36 	.word	0x000c7b36

000c521c <__s2b>:
   c521c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5220:	460c      	mov	r4, r1
   c5222:	4615      	mov	r5, r2
   c5224:	461f      	mov	r7, r3
   c5226:	2209      	movs	r2, #9
   c5228:	3308      	adds	r3, #8
   c522a:	4606      	mov	r6, r0
   c522c:	fb93 f3f2 	sdiv	r3, r3, r2
   c5230:	2100      	movs	r1, #0
   c5232:	2201      	movs	r2, #1
   c5234:	429a      	cmp	r2, r3
   c5236:	db09      	blt.n	c524c <__s2b+0x30>
   c5238:	4630      	mov	r0, r6
   c523a:	f7ff ff47 	bl	c50cc <_Balloc>
   c523e:	b940      	cbnz	r0, c5252 <__s2b+0x36>
   c5240:	4602      	mov	r2, r0
   c5242:	4b19      	ldr	r3, [pc, #100]	; (c52a8 <__s2b+0x8c>)
   c5244:	4819      	ldr	r0, [pc, #100]	; (c52ac <__s2b+0x90>)
   c5246:	21ce      	movs	r1, #206	; 0xce
   c5248:	f7f8 faac 	bl	bd7a4 <__assert_func>
   c524c:	0052      	lsls	r2, r2, #1
   c524e:	3101      	adds	r1, #1
   c5250:	e7f0      	b.n	c5234 <__s2b+0x18>
   c5252:	9b08      	ldr	r3, [sp, #32]
   c5254:	6143      	str	r3, [r0, #20]
   c5256:	2d09      	cmp	r5, #9
   c5258:	f04f 0301 	mov.w	r3, #1
   c525c:	6103      	str	r3, [r0, #16]
   c525e:	dd16      	ble.n	c528e <__s2b+0x72>
   c5260:	f104 0909 	add.w	r9, r4, #9
   c5264:	46c8      	mov	r8, r9
   c5266:	442c      	add	r4, r5
   c5268:	f818 3b01 	ldrb.w	r3, [r8], #1
   c526c:	4601      	mov	r1, r0
   c526e:	3b30      	subs	r3, #48	; 0x30
   c5270:	220a      	movs	r2, #10
   c5272:	4630      	mov	r0, r6
   c5274:	f7ff ff8c 	bl	c5190 <__multadd>
   c5278:	45a0      	cmp	r8, r4
   c527a:	d1f5      	bne.n	c5268 <__s2b+0x4c>
   c527c:	f1a5 0408 	sub.w	r4, r5, #8
   c5280:	444c      	add	r4, r9
   c5282:	1b2d      	subs	r5, r5, r4
   c5284:	1963      	adds	r3, r4, r5
   c5286:	42bb      	cmp	r3, r7
   c5288:	db04      	blt.n	c5294 <__s2b+0x78>
   c528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c528e:	340a      	adds	r4, #10
   c5290:	2509      	movs	r5, #9
   c5292:	e7f6      	b.n	c5282 <__s2b+0x66>
   c5294:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5298:	4601      	mov	r1, r0
   c529a:	3b30      	subs	r3, #48	; 0x30
   c529c:	220a      	movs	r2, #10
   c529e:	4630      	mov	r0, r6
   c52a0:	f7ff ff76 	bl	c5190 <__multadd>
   c52a4:	e7ee      	b.n	c5284 <__s2b+0x68>
   c52a6:	bf00      	nop
   c52a8:	000c7ab1 	.word	0x000c7ab1
   c52ac:	000c7b36 	.word	0x000c7b36

000c52b0 <__hi0bits>:
   c52b0:	0c03      	lsrs	r3, r0, #16
   c52b2:	041b      	lsls	r3, r3, #16
   c52b4:	b9d3      	cbnz	r3, c52ec <__hi0bits+0x3c>
   c52b6:	0400      	lsls	r0, r0, #16
   c52b8:	2310      	movs	r3, #16
   c52ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c52be:	bf04      	itt	eq
   c52c0:	0200      	lsleq	r0, r0, #8
   c52c2:	3308      	addeq	r3, #8
   c52c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c52c8:	bf04      	itt	eq
   c52ca:	0100      	lsleq	r0, r0, #4
   c52cc:	3304      	addeq	r3, #4
   c52ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c52d2:	bf04      	itt	eq
   c52d4:	0080      	lsleq	r0, r0, #2
   c52d6:	3302      	addeq	r3, #2
   c52d8:	2800      	cmp	r0, #0
   c52da:	db05      	blt.n	c52e8 <__hi0bits+0x38>
   c52dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c52e0:	f103 0301 	add.w	r3, r3, #1
   c52e4:	bf08      	it	eq
   c52e6:	2320      	moveq	r3, #32
   c52e8:	4618      	mov	r0, r3
   c52ea:	4770      	bx	lr
   c52ec:	2300      	movs	r3, #0
   c52ee:	e7e4      	b.n	c52ba <__hi0bits+0xa>

000c52f0 <__lo0bits>:
   c52f0:	6803      	ldr	r3, [r0, #0]
   c52f2:	f013 0207 	ands.w	r2, r3, #7
   c52f6:	4601      	mov	r1, r0
   c52f8:	d00b      	beq.n	c5312 <__lo0bits+0x22>
   c52fa:	07da      	lsls	r2, r3, #31
   c52fc:	d423      	bmi.n	c5346 <__lo0bits+0x56>
   c52fe:	0798      	lsls	r0, r3, #30
   c5300:	bf49      	itett	mi
   c5302:	085b      	lsrmi	r3, r3, #1
   c5304:	089b      	lsrpl	r3, r3, #2
   c5306:	2001      	movmi	r0, #1
   c5308:	600b      	strmi	r3, [r1, #0]
   c530a:	bf5c      	itt	pl
   c530c:	600b      	strpl	r3, [r1, #0]
   c530e:	2002      	movpl	r0, #2
   c5310:	4770      	bx	lr
   c5312:	b298      	uxth	r0, r3
   c5314:	b9a8      	cbnz	r0, c5342 <__lo0bits+0x52>
   c5316:	0c1b      	lsrs	r3, r3, #16
   c5318:	2010      	movs	r0, #16
   c531a:	b2da      	uxtb	r2, r3
   c531c:	b90a      	cbnz	r2, c5322 <__lo0bits+0x32>
   c531e:	3008      	adds	r0, #8
   c5320:	0a1b      	lsrs	r3, r3, #8
   c5322:	071a      	lsls	r2, r3, #28
   c5324:	bf04      	itt	eq
   c5326:	091b      	lsreq	r3, r3, #4
   c5328:	3004      	addeq	r0, #4
   c532a:	079a      	lsls	r2, r3, #30
   c532c:	bf04      	itt	eq
   c532e:	089b      	lsreq	r3, r3, #2
   c5330:	3002      	addeq	r0, #2
   c5332:	07da      	lsls	r2, r3, #31
   c5334:	d403      	bmi.n	c533e <__lo0bits+0x4e>
   c5336:	085b      	lsrs	r3, r3, #1
   c5338:	f100 0001 	add.w	r0, r0, #1
   c533c:	d005      	beq.n	c534a <__lo0bits+0x5a>
   c533e:	600b      	str	r3, [r1, #0]
   c5340:	4770      	bx	lr
   c5342:	4610      	mov	r0, r2
   c5344:	e7e9      	b.n	c531a <__lo0bits+0x2a>
   c5346:	2000      	movs	r0, #0
   c5348:	4770      	bx	lr
   c534a:	2020      	movs	r0, #32
   c534c:	4770      	bx	lr
	...

000c5350 <__i2b>:
   c5350:	b510      	push	{r4, lr}
   c5352:	460c      	mov	r4, r1
   c5354:	2101      	movs	r1, #1
   c5356:	f7ff feb9 	bl	c50cc <_Balloc>
   c535a:	4602      	mov	r2, r0
   c535c:	b928      	cbnz	r0, c536a <__i2b+0x1a>
   c535e:	4b05      	ldr	r3, [pc, #20]	; (c5374 <__i2b+0x24>)
   c5360:	4805      	ldr	r0, [pc, #20]	; (c5378 <__i2b+0x28>)
   c5362:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5366:	f7f8 fa1d 	bl	bd7a4 <__assert_func>
   c536a:	2301      	movs	r3, #1
   c536c:	6144      	str	r4, [r0, #20]
   c536e:	6103      	str	r3, [r0, #16]
   c5370:	bd10      	pop	{r4, pc}
   c5372:	bf00      	nop
   c5374:	000c7ab1 	.word	0x000c7ab1
   c5378:	000c7b36 	.word	0x000c7b36

000c537c <__multiply>:
   c537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5380:	4691      	mov	r9, r2
   c5382:	690a      	ldr	r2, [r1, #16]
   c5384:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5388:	429a      	cmp	r2, r3
   c538a:	bfb8      	it	lt
   c538c:	460b      	movlt	r3, r1
   c538e:	460c      	mov	r4, r1
   c5390:	bfbc      	itt	lt
   c5392:	464c      	movlt	r4, r9
   c5394:	4699      	movlt	r9, r3
   c5396:	6927      	ldr	r7, [r4, #16]
   c5398:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c539c:	68a3      	ldr	r3, [r4, #8]
   c539e:	6861      	ldr	r1, [r4, #4]
   c53a0:	eb07 060a 	add.w	r6, r7, sl
   c53a4:	42b3      	cmp	r3, r6
   c53a6:	b085      	sub	sp, #20
   c53a8:	bfb8      	it	lt
   c53aa:	3101      	addlt	r1, #1
   c53ac:	f7ff fe8e 	bl	c50cc <_Balloc>
   c53b0:	b930      	cbnz	r0, c53c0 <__multiply+0x44>
   c53b2:	4602      	mov	r2, r0
   c53b4:	4b44      	ldr	r3, [pc, #272]	; (c54c8 <__multiply+0x14c>)
   c53b6:	4845      	ldr	r0, [pc, #276]	; (c54cc <__multiply+0x150>)
   c53b8:	f240 115d 	movw	r1, #349	; 0x15d
   c53bc:	f7f8 f9f2 	bl	bd7a4 <__assert_func>
   c53c0:	f100 0514 	add.w	r5, r0, #20
   c53c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c53c8:	462b      	mov	r3, r5
   c53ca:	2200      	movs	r2, #0
   c53cc:	4543      	cmp	r3, r8
   c53ce:	d321      	bcc.n	c5414 <__multiply+0x98>
   c53d0:	f104 0314 	add.w	r3, r4, #20
   c53d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c53d8:	f109 0314 	add.w	r3, r9, #20
   c53dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c53e0:	9202      	str	r2, [sp, #8]
   c53e2:	1b3a      	subs	r2, r7, r4
   c53e4:	3a15      	subs	r2, #21
   c53e6:	f022 0203 	bic.w	r2, r2, #3
   c53ea:	3204      	adds	r2, #4
   c53ec:	f104 0115 	add.w	r1, r4, #21
   c53f0:	428f      	cmp	r7, r1
   c53f2:	bf38      	it	cc
   c53f4:	2204      	movcc	r2, #4
   c53f6:	9201      	str	r2, [sp, #4]
   c53f8:	9a02      	ldr	r2, [sp, #8]
   c53fa:	9303      	str	r3, [sp, #12]
   c53fc:	429a      	cmp	r2, r3
   c53fe:	d80c      	bhi.n	c541a <__multiply+0x9e>
   c5400:	2e00      	cmp	r6, #0
   c5402:	dd03      	ble.n	c540c <__multiply+0x90>
   c5404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5408:	2b00      	cmp	r3, #0
   c540a:	d05a      	beq.n	c54c2 <__multiply+0x146>
   c540c:	6106      	str	r6, [r0, #16]
   c540e:	b005      	add	sp, #20
   c5410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5414:	f843 2b04 	str.w	r2, [r3], #4
   c5418:	e7d8      	b.n	c53cc <__multiply+0x50>
   c541a:	f8b3 a000 	ldrh.w	sl, [r3]
   c541e:	f1ba 0f00 	cmp.w	sl, #0
   c5422:	d024      	beq.n	c546e <__multiply+0xf2>
   c5424:	f104 0e14 	add.w	lr, r4, #20
   c5428:	46a9      	mov	r9, r5
   c542a:	f04f 0c00 	mov.w	ip, #0
   c542e:	f85e 2b04 	ldr.w	r2, [lr], #4
   c5432:	f8d9 1000 	ldr.w	r1, [r9]
   c5436:	fa1f fb82 	uxth.w	fp, r2
   c543a:	b289      	uxth	r1, r1
   c543c:	fb0a 110b 	mla	r1, sl, fp, r1
   c5440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c5444:	f8d9 2000 	ldr.w	r2, [r9]
   c5448:	4461      	add	r1, ip
   c544a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c544e:	fb0a c20b 	mla	r2, sl, fp, ip
   c5452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c5456:	b289      	uxth	r1, r1
   c5458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c545c:	4577      	cmp	r7, lr
   c545e:	f849 1b04 	str.w	r1, [r9], #4
   c5462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c5466:	d8e2      	bhi.n	c542e <__multiply+0xb2>
   c5468:	9a01      	ldr	r2, [sp, #4]
   c546a:	f845 c002 	str.w	ip, [r5, r2]
   c546e:	9a03      	ldr	r2, [sp, #12]
   c5470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c5474:	3304      	adds	r3, #4
   c5476:	f1b9 0f00 	cmp.w	r9, #0
   c547a:	d020      	beq.n	c54be <__multiply+0x142>
   c547c:	6829      	ldr	r1, [r5, #0]
   c547e:	f104 0c14 	add.w	ip, r4, #20
   c5482:	46ae      	mov	lr, r5
   c5484:	f04f 0a00 	mov.w	sl, #0
   c5488:	f8bc b000 	ldrh.w	fp, [ip]
   c548c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c5490:	fb09 220b 	mla	r2, r9, fp, r2
   c5494:	4492      	add	sl, r2
   c5496:	b289      	uxth	r1, r1
   c5498:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c549c:	f84e 1b04 	str.w	r1, [lr], #4
   c54a0:	f85c 2b04 	ldr.w	r2, [ip], #4
   c54a4:	f8be 1000 	ldrh.w	r1, [lr]
   c54a8:	0c12      	lsrs	r2, r2, #16
   c54aa:	fb09 1102 	mla	r1, r9, r2, r1
   c54ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c54b2:	4567      	cmp	r7, ip
   c54b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c54b8:	d8e6      	bhi.n	c5488 <__multiply+0x10c>
   c54ba:	9a01      	ldr	r2, [sp, #4]
   c54bc:	50a9      	str	r1, [r5, r2]
   c54be:	3504      	adds	r5, #4
   c54c0:	e79a      	b.n	c53f8 <__multiply+0x7c>
   c54c2:	3e01      	subs	r6, #1
   c54c4:	e79c      	b.n	c5400 <__multiply+0x84>
   c54c6:	bf00      	nop
   c54c8:	000c7ab1 	.word	0x000c7ab1
   c54cc:	000c7b36 	.word	0x000c7b36

000c54d0 <__pow5mult>:
   c54d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c54d4:	4615      	mov	r5, r2
   c54d6:	f012 0203 	ands.w	r2, r2, #3
   c54da:	4606      	mov	r6, r0
   c54dc:	460f      	mov	r7, r1
   c54de:	d007      	beq.n	c54f0 <__pow5mult+0x20>
   c54e0:	4c25      	ldr	r4, [pc, #148]	; (c5578 <__pow5mult+0xa8>)
   c54e2:	3a01      	subs	r2, #1
   c54e4:	2300      	movs	r3, #0
   c54e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c54ea:	f7ff fe51 	bl	c5190 <__multadd>
   c54ee:	4607      	mov	r7, r0
   c54f0:	10ad      	asrs	r5, r5, #2
   c54f2:	d03d      	beq.n	c5570 <__pow5mult+0xa0>
   c54f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c54f6:	b97c      	cbnz	r4, c5518 <__pow5mult+0x48>
   c54f8:	2010      	movs	r0, #16
   c54fa:	f7f8 f903 	bl	bd704 <malloc>
   c54fe:	4602      	mov	r2, r0
   c5500:	6270      	str	r0, [r6, #36]	; 0x24
   c5502:	b928      	cbnz	r0, c5510 <__pow5mult+0x40>
   c5504:	4b1d      	ldr	r3, [pc, #116]	; (c557c <__pow5mult+0xac>)
   c5506:	481e      	ldr	r0, [pc, #120]	; (c5580 <__pow5mult+0xb0>)
   c5508:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c550c:	f7f8 f94a 	bl	bd7a4 <__assert_func>
   c5510:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c5514:	6004      	str	r4, [r0, #0]
   c5516:	60c4      	str	r4, [r0, #12]
   c5518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c551c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c5520:	b94c      	cbnz	r4, c5536 <__pow5mult+0x66>
   c5522:	f240 2171 	movw	r1, #625	; 0x271
   c5526:	4630      	mov	r0, r6
   c5528:	f7ff ff12 	bl	c5350 <__i2b>
   c552c:	2300      	movs	r3, #0
   c552e:	f8c8 0008 	str.w	r0, [r8, #8]
   c5532:	4604      	mov	r4, r0
   c5534:	6003      	str	r3, [r0, #0]
   c5536:	f04f 0900 	mov.w	r9, #0
   c553a:	07eb      	lsls	r3, r5, #31
   c553c:	d50a      	bpl.n	c5554 <__pow5mult+0x84>
   c553e:	4639      	mov	r1, r7
   c5540:	4622      	mov	r2, r4
   c5542:	4630      	mov	r0, r6
   c5544:	f7ff ff1a 	bl	c537c <__multiply>
   c5548:	4639      	mov	r1, r7
   c554a:	4680      	mov	r8, r0
   c554c:	4630      	mov	r0, r6
   c554e:	f7ff fdfd 	bl	c514c <_Bfree>
   c5552:	4647      	mov	r7, r8
   c5554:	106d      	asrs	r5, r5, #1
   c5556:	d00b      	beq.n	c5570 <__pow5mult+0xa0>
   c5558:	6820      	ldr	r0, [r4, #0]
   c555a:	b938      	cbnz	r0, c556c <__pow5mult+0x9c>
   c555c:	4622      	mov	r2, r4
   c555e:	4621      	mov	r1, r4
   c5560:	4630      	mov	r0, r6
   c5562:	f7ff ff0b 	bl	c537c <__multiply>
   c5566:	6020      	str	r0, [r4, #0]
   c5568:	f8c0 9000 	str.w	r9, [r0]
   c556c:	4604      	mov	r4, r0
   c556e:	e7e4      	b.n	c553a <__pow5mult+0x6a>
   c5570:	4638      	mov	r0, r7
   c5572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5576:	bf00      	nop
   c5578:	000c7c80 	.word	0x000c7c80
   c557c:	000c78e0 	.word	0x000c78e0
   c5580:	000c7b36 	.word	0x000c7b36

000c5584 <__lshift>:
   c5584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c5588:	460c      	mov	r4, r1
   c558a:	6849      	ldr	r1, [r1, #4]
   c558c:	6923      	ldr	r3, [r4, #16]
   c558e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c5592:	68a3      	ldr	r3, [r4, #8]
   c5594:	4607      	mov	r7, r0
   c5596:	4691      	mov	r9, r2
   c5598:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c559c:	f108 0601 	add.w	r6, r8, #1
   c55a0:	42b3      	cmp	r3, r6
   c55a2:	db0b      	blt.n	c55bc <__lshift+0x38>
   c55a4:	4638      	mov	r0, r7
   c55a6:	f7ff fd91 	bl	c50cc <_Balloc>
   c55aa:	4605      	mov	r5, r0
   c55ac:	b948      	cbnz	r0, c55c2 <__lshift+0x3e>
   c55ae:	4602      	mov	r2, r0
   c55b0:	4b2a      	ldr	r3, [pc, #168]	; (c565c <__lshift+0xd8>)
   c55b2:	482b      	ldr	r0, [pc, #172]	; (c5660 <__lshift+0xdc>)
   c55b4:	f240 11d9 	movw	r1, #473	; 0x1d9
   c55b8:	f7f8 f8f4 	bl	bd7a4 <__assert_func>
   c55bc:	3101      	adds	r1, #1
   c55be:	005b      	lsls	r3, r3, #1
   c55c0:	e7ee      	b.n	c55a0 <__lshift+0x1c>
   c55c2:	2300      	movs	r3, #0
   c55c4:	f100 0114 	add.w	r1, r0, #20
   c55c8:	f100 0210 	add.w	r2, r0, #16
   c55cc:	4618      	mov	r0, r3
   c55ce:	4553      	cmp	r3, sl
   c55d0:	db37      	blt.n	c5642 <__lshift+0xbe>
   c55d2:	6920      	ldr	r0, [r4, #16]
   c55d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c55d8:	f104 0314 	add.w	r3, r4, #20
   c55dc:	f019 091f 	ands.w	r9, r9, #31
   c55e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c55e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c55e8:	d02f      	beq.n	c564a <__lshift+0xc6>
   c55ea:	f1c9 0e20 	rsb	lr, r9, #32
   c55ee:	468a      	mov	sl, r1
   c55f0:	f04f 0c00 	mov.w	ip, #0
   c55f4:	681a      	ldr	r2, [r3, #0]
   c55f6:	fa02 f209 	lsl.w	r2, r2, r9
   c55fa:	ea42 020c 	orr.w	r2, r2, ip
   c55fe:	f84a 2b04 	str.w	r2, [sl], #4
   c5602:	f853 2b04 	ldr.w	r2, [r3], #4
   c5606:	4298      	cmp	r0, r3
   c5608:	fa22 fc0e 	lsr.w	ip, r2, lr
   c560c:	d8f2      	bhi.n	c55f4 <__lshift+0x70>
   c560e:	1b03      	subs	r3, r0, r4
   c5610:	3b15      	subs	r3, #21
   c5612:	f023 0303 	bic.w	r3, r3, #3
   c5616:	3304      	adds	r3, #4
   c5618:	f104 0215 	add.w	r2, r4, #21
   c561c:	4290      	cmp	r0, r2
   c561e:	bf38      	it	cc
   c5620:	2304      	movcc	r3, #4
   c5622:	f841 c003 	str.w	ip, [r1, r3]
   c5626:	f1bc 0f00 	cmp.w	ip, #0
   c562a:	d001      	beq.n	c5630 <__lshift+0xac>
   c562c:	f108 0602 	add.w	r6, r8, #2
   c5630:	3e01      	subs	r6, #1
   c5632:	4638      	mov	r0, r7
   c5634:	612e      	str	r6, [r5, #16]
   c5636:	4621      	mov	r1, r4
   c5638:	f7ff fd88 	bl	c514c <_Bfree>
   c563c:	4628      	mov	r0, r5
   c563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c5642:	f842 0f04 	str.w	r0, [r2, #4]!
   c5646:	3301      	adds	r3, #1
   c5648:	e7c1      	b.n	c55ce <__lshift+0x4a>
   c564a:	3904      	subs	r1, #4
   c564c:	f853 2b04 	ldr.w	r2, [r3], #4
   c5650:	f841 2f04 	str.w	r2, [r1, #4]!
   c5654:	4298      	cmp	r0, r3
   c5656:	d8f9      	bhi.n	c564c <__lshift+0xc8>
   c5658:	e7ea      	b.n	c5630 <__lshift+0xac>
   c565a:	bf00      	nop
   c565c:	000c7ab1 	.word	0x000c7ab1
   c5660:	000c7b36 	.word	0x000c7b36

000c5664 <__mcmp>:
   c5664:	b530      	push	{r4, r5, lr}
   c5666:	6902      	ldr	r2, [r0, #16]
   c5668:	690c      	ldr	r4, [r1, #16]
   c566a:	1b12      	subs	r2, r2, r4
   c566c:	d10e      	bne.n	c568c <__mcmp+0x28>
   c566e:	f100 0314 	add.w	r3, r0, #20
   c5672:	3114      	adds	r1, #20
   c5674:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c5678:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c567c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c5680:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c5684:	42a5      	cmp	r5, r4
   c5686:	d003      	beq.n	c5690 <__mcmp+0x2c>
   c5688:	d305      	bcc.n	c5696 <__mcmp+0x32>
   c568a:	2201      	movs	r2, #1
   c568c:	4610      	mov	r0, r2
   c568e:	bd30      	pop	{r4, r5, pc}
   c5690:	4283      	cmp	r3, r0
   c5692:	d3f3      	bcc.n	c567c <__mcmp+0x18>
   c5694:	e7fa      	b.n	c568c <__mcmp+0x28>
   c5696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c569a:	e7f7      	b.n	c568c <__mcmp+0x28>

000c569c <__mdiff>:
   c569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c56a0:	460c      	mov	r4, r1
   c56a2:	4606      	mov	r6, r0
   c56a4:	4611      	mov	r1, r2
   c56a6:	4620      	mov	r0, r4
   c56a8:	4690      	mov	r8, r2
   c56aa:	f7ff ffdb 	bl	c5664 <__mcmp>
   c56ae:	1e05      	subs	r5, r0, #0
   c56b0:	d110      	bne.n	c56d4 <__mdiff+0x38>
   c56b2:	4629      	mov	r1, r5
   c56b4:	4630      	mov	r0, r6
   c56b6:	f7ff fd09 	bl	c50cc <_Balloc>
   c56ba:	b930      	cbnz	r0, c56ca <__mdiff+0x2e>
   c56bc:	4b3a      	ldr	r3, [pc, #232]	; (c57a8 <__mdiff+0x10c>)
   c56be:	4602      	mov	r2, r0
   c56c0:	f240 2132 	movw	r1, #562	; 0x232
   c56c4:	4839      	ldr	r0, [pc, #228]	; (c57ac <__mdiff+0x110>)
   c56c6:	f7f8 f86d 	bl	bd7a4 <__assert_func>
   c56ca:	2301      	movs	r3, #1
   c56cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c56d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c56d4:	bfa4      	itt	ge
   c56d6:	4643      	movge	r3, r8
   c56d8:	46a0      	movge	r8, r4
   c56da:	4630      	mov	r0, r6
   c56dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c56e0:	bfa6      	itte	ge
   c56e2:	461c      	movge	r4, r3
   c56e4:	2500      	movge	r5, #0
   c56e6:	2501      	movlt	r5, #1
   c56e8:	f7ff fcf0 	bl	c50cc <_Balloc>
   c56ec:	b920      	cbnz	r0, c56f8 <__mdiff+0x5c>
   c56ee:	4b2e      	ldr	r3, [pc, #184]	; (c57a8 <__mdiff+0x10c>)
   c56f0:	4602      	mov	r2, r0
   c56f2:	f44f 7110 	mov.w	r1, #576	; 0x240
   c56f6:	e7e5      	b.n	c56c4 <__mdiff+0x28>
   c56f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c56fc:	6926      	ldr	r6, [r4, #16]
   c56fe:	60c5      	str	r5, [r0, #12]
   c5700:	f104 0914 	add.w	r9, r4, #20
   c5704:	f108 0514 	add.w	r5, r8, #20
   c5708:	f100 0e14 	add.w	lr, r0, #20
   c570c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c5710:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c5714:	f108 0210 	add.w	r2, r8, #16
   c5718:	46f2      	mov	sl, lr
   c571a:	2100      	movs	r1, #0
   c571c:	f859 3b04 	ldr.w	r3, [r9], #4
   c5720:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c5724:	fa1f f883 	uxth.w	r8, r3
   c5728:	fa11 f18b 	uxtah	r1, r1, fp
   c572c:	0c1b      	lsrs	r3, r3, #16
   c572e:	eba1 0808 	sub.w	r8, r1, r8
   c5732:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c5736:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c573a:	fa1f f888 	uxth.w	r8, r8
   c573e:	1419      	asrs	r1, r3, #16
   c5740:	454e      	cmp	r6, r9
   c5742:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c5746:	f84a 3b04 	str.w	r3, [sl], #4
   c574a:	d8e7      	bhi.n	c571c <__mdiff+0x80>
   c574c:	1b33      	subs	r3, r6, r4
   c574e:	3b15      	subs	r3, #21
   c5750:	f023 0303 	bic.w	r3, r3, #3
   c5754:	3304      	adds	r3, #4
   c5756:	3415      	adds	r4, #21
   c5758:	42a6      	cmp	r6, r4
   c575a:	bf38      	it	cc
   c575c:	2304      	movcc	r3, #4
   c575e:	441d      	add	r5, r3
   c5760:	4473      	add	r3, lr
   c5762:	469e      	mov	lr, r3
   c5764:	462e      	mov	r6, r5
   c5766:	4566      	cmp	r6, ip
   c5768:	d30e      	bcc.n	c5788 <__mdiff+0xec>
   c576a:	f10c 0203 	add.w	r2, ip, #3
   c576e:	1b52      	subs	r2, r2, r5
   c5770:	f022 0203 	bic.w	r2, r2, #3
   c5774:	3d03      	subs	r5, #3
   c5776:	45ac      	cmp	ip, r5
   c5778:	bf38      	it	cc
   c577a:	2200      	movcc	r2, #0
   c577c:	441a      	add	r2, r3
   c577e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c5782:	b17b      	cbz	r3, c57a4 <__mdiff+0x108>
   c5784:	6107      	str	r7, [r0, #16]
   c5786:	e7a3      	b.n	c56d0 <__mdiff+0x34>
   c5788:	f856 8b04 	ldr.w	r8, [r6], #4
   c578c:	fa11 f288 	uxtah	r2, r1, r8
   c5790:	1414      	asrs	r4, r2, #16
   c5792:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c5796:	b292      	uxth	r2, r2
   c5798:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c579c:	f84e 2b04 	str.w	r2, [lr], #4
   c57a0:	1421      	asrs	r1, r4, #16
   c57a2:	e7e0      	b.n	c5766 <__mdiff+0xca>
   c57a4:	3f01      	subs	r7, #1
   c57a6:	e7ea      	b.n	c577e <__mdiff+0xe2>
   c57a8:	000c7ab1 	.word	0x000c7ab1
   c57ac:	000c7b36 	.word	0x000c7b36

000c57b0 <__ulp>:
   c57b0:	b082      	sub	sp, #8
   c57b2:	ed8d 0b00 	vstr	d0, [sp]
   c57b6:	9b01      	ldr	r3, [sp, #4]
   c57b8:	4912      	ldr	r1, [pc, #72]	; (c5804 <__ulp+0x54>)
   c57ba:	4019      	ands	r1, r3
   c57bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c57c0:	2900      	cmp	r1, #0
   c57c2:	dd05      	ble.n	c57d0 <__ulp+0x20>
   c57c4:	2200      	movs	r2, #0
   c57c6:	460b      	mov	r3, r1
   c57c8:	ec43 2b10 	vmov	d0, r2, r3
   c57cc:	b002      	add	sp, #8
   c57ce:	4770      	bx	lr
   c57d0:	4249      	negs	r1, r1
   c57d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c57d6:	ea4f 5021 	mov.w	r0, r1, asr #20
   c57da:	f04f 0200 	mov.w	r2, #0
   c57de:	f04f 0300 	mov.w	r3, #0
   c57e2:	da04      	bge.n	c57ee <__ulp+0x3e>
   c57e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c57e8:	fa41 f300 	asr.w	r3, r1, r0
   c57ec:	e7ec      	b.n	c57c8 <__ulp+0x18>
   c57ee:	f1a0 0114 	sub.w	r1, r0, #20
   c57f2:	291e      	cmp	r1, #30
   c57f4:	bfda      	itte	le
   c57f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c57fa:	fa20 f101 	lsrle.w	r1, r0, r1
   c57fe:	2101      	movgt	r1, #1
   c5800:	460a      	mov	r2, r1
   c5802:	e7e1      	b.n	c57c8 <__ulp+0x18>
   c5804:	7ff00000 	.word	0x7ff00000

000c5808 <__b2d>:
   c5808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c580a:	6905      	ldr	r5, [r0, #16]
   c580c:	f100 0714 	add.w	r7, r0, #20
   c5810:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c5814:	1f2e      	subs	r6, r5, #4
   c5816:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c581a:	4620      	mov	r0, r4
   c581c:	f7ff fd48 	bl	c52b0 <__hi0bits>
   c5820:	f1c0 0320 	rsb	r3, r0, #32
   c5824:	280a      	cmp	r0, #10
   c5826:	f8df c07c 	ldr.w	ip, [pc, #124]	; c58a4 <__b2d+0x9c>
   c582a:	600b      	str	r3, [r1, #0]
   c582c:	dc14      	bgt.n	c5858 <__b2d+0x50>
   c582e:	f1c0 0e0b 	rsb	lr, r0, #11
   c5832:	fa24 f10e 	lsr.w	r1, r4, lr
   c5836:	42b7      	cmp	r7, r6
   c5838:	ea41 030c 	orr.w	r3, r1, ip
   c583c:	bf34      	ite	cc
   c583e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5842:	2100      	movcs	r1, #0
   c5844:	3015      	adds	r0, #21
   c5846:	fa04 f000 	lsl.w	r0, r4, r0
   c584a:	fa21 f10e 	lsr.w	r1, r1, lr
   c584e:	ea40 0201 	orr.w	r2, r0, r1
   c5852:	ec43 2b10 	vmov	d0, r2, r3
   c5856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c5858:	42b7      	cmp	r7, r6
   c585a:	bf3a      	itte	cc
   c585c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c5860:	f1a5 0608 	subcc.w	r6, r5, #8
   c5864:	2100      	movcs	r1, #0
   c5866:	380b      	subs	r0, #11
   c5868:	d017      	beq.n	c589a <__b2d+0x92>
   c586a:	f1c0 0c20 	rsb	ip, r0, #32
   c586e:	fa04 f500 	lsl.w	r5, r4, r0
   c5872:	42be      	cmp	r6, r7
   c5874:	fa21 f40c 	lsr.w	r4, r1, ip
   c5878:	ea45 0504 	orr.w	r5, r5, r4
   c587c:	bf8c      	ite	hi
   c587e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c5882:	2400      	movls	r4, #0
   c5884:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c5888:	fa01 f000 	lsl.w	r0, r1, r0
   c588c:	fa24 f40c 	lsr.w	r4, r4, ip
   c5890:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c5894:	ea40 0204 	orr.w	r2, r0, r4
   c5898:	e7db      	b.n	c5852 <__b2d+0x4a>
   c589a:	ea44 030c 	orr.w	r3, r4, ip
   c589e:	460a      	mov	r2, r1
   c58a0:	e7d7      	b.n	c5852 <__b2d+0x4a>
   c58a2:	bf00      	nop
   c58a4:	3ff00000 	.word	0x3ff00000

000c58a8 <__d2b>:
   c58a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c58ac:	4689      	mov	r9, r1
   c58ae:	2101      	movs	r1, #1
   c58b0:	ec57 6b10 	vmov	r6, r7, d0
   c58b4:	4690      	mov	r8, r2
   c58b6:	f7ff fc09 	bl	c50cc <_Balloc>
   c58ba:	4604      	mov	r4, r0
   c58bc:	b930      	cbnz	r0, c58cc <__d2b+0x24>
   c58be:	4602      	mov	r2, r0
   c58c0:	4b25      	ldr	r3, [pc, #148]	; (c5958 <__d2b+0xb0>)
   c58c2:	4826      	ldr	r0, [pc, #152]	; (c595c <__d2b+0xb4>)
   c58c4:	f240 310a 	movw	r1, #778	; 0x30a
   c58c8:	f7f7 ff6c 	bl	bd7a4 <__assert_func>
   c58cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c58d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c58d4:	bb35      	cbnz	r5, c5924 <__d2b+0x7c>
   c58d6:	2e00      	cmp	r6, #0
   c58d8:	9301      	str	r3, [sp, #4]
   c58da:	d028      	beq.n	c592e <__d2b+0x86>
   c58dc:	4668      	mov	r0, sp
   c58de:	9600      	str	r6, [sp, #0]
   c58e0:	f7ff fd06 	bl	c52f0 <__lo0bits>
   c58e4:	9900      	ldr	r1, [sp, #0]
   c58e6:	b300      	cbz	r0, c592a <__d2b+0x82>
   c58e8:	9a01      	ldr	r2, [sp, #4]
   c58ea:	f1c0 0320 	rsb	r3, r0, #32
   c58ee:	fa02 f303 	lsl.w	r3, r2, r3
   c58f2:	430b      	orrs	r3, r1
   c58f4:	40c2      	lsrs	r2, r0
   c58f6:	6163      	str	r3, [r4, #20]
   c58f8:	9201      	str	r2, [sp, #4]
   c58fa:	9b01      	ldr	r3, [sp, #4]
   c58fc:	61a3      	str	r3, [r4, #24]
   c58fe:	2b00      	cmp	r3, #0
   c5900:	bf14      	ite	ne
   c5902:	2202      	movne	r2, #2
   c5904:	2201      	moveq	r2, #1
   c5906:	6122      	str	r2, [r4, #16]
   c5908:	b1d5      	cbz	r5, c5940 <__d2b+0x98>
   c590a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c590e:	4405      	add	r5, r0
   c5910:	f8c9 5000 	str.w	r5, [r9]
   c5914:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c5918:	f8c8 0000 	str.w	r0, [r8]
   c591c:	4620      	mov	r0, r4
   c591e:	b003      	add	sp, #12
   c5920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c5928:	e7d5      	b.n	c58d6 <__d2b+0x2e>
   c592a:	6161      	str	r1, [r4, #20]
   c592c:	e7e5      	b.n	c58fa <__d2b+0x52>
   c592e:	a801      	add	r0, sp, #4
   c5930:	f7ff fcde 	bl	c52f0 <__lo0bits>
   c5934:	9b01      	ldr	r3, [sp, #4]
   c5936:	6163      	str	r3, [r4, #20]
   c5938:	2201      	movs	r2, #1
   c593a:	6122      	str	r2, [r4, #16]
   c593c:	3020      	adds	r0, #32
   c593e:	e7e3      	b.n	c5908 <__d2b+0x60>
   c5940:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c5944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c5948:	f8c9 0000 	str.w	r0, [r9]
   c594c:	6918      	ldr	r0, [r3, #16]
   c594e:	f7ff fcaf 	bl	c52b0 <__hi0bits>
   c5952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c5956:	e7df      	b.n	c5918 <__d2b+0x70>
   c5958:	000c7ab1 	.word	0x000c7ab1
   c595c:	000c7b36 	.word	0x000c7b36

000c5960 <__ratio>:
   c5960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5964:	4688      	mov	r8, r1
   c5966:	4669      	mov	r1, sp
   c5968:	4681      	mov	r9, r0
   c596a:	f7ff ff4d 	bl	c5808 <__b2d>
   c596e:	a901      	add	r1, sp, #4
   c5970:	4640      	mov	r0, r8
   c5972:	ec55 4b10 	vmov	r4, r5, d0
   c5976:	f7ff ff47 	bl	c5808 <__b2d>
   c597a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c597e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c5982:	eba3 0c02 	sub.w	ip, r3, r2
   c5986:	e9dd 3200 	ldrd	r3, r2, [sp]
   c598a:	1a9b      	subs	r3, r3, r2
   c598c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c5990:	ec51 0b10 	vmov	r0, r1, d0
   c5994:	2b00      	cmp	r3, #0
   c5996:	bfd6      	itet	le
   c5998:	460a      	movle	r2, r1
   c599a:	462a      	movgt	r2, r5
   c599c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c59a0:	468b      	mov	fp, r1
   c59a2:	462f      	mov	r7, r5
   c59a4:	bfd4      	ite	le
   c59a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c59aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c59ae:	4620      	mov	r0, r4
   c59b0:	ee10 2a10 	vmov	r2, s0
   c59b4:	465b      	mov	r3, fp
   c59b6:	4639      	mov	r1, r7
   c59b8:	f7fd fd58 	bl	c346c <__aeabi_ddiv>
   c59bc:	ec41 0b10 	vmov	d0, r0, r1
   c59c0:	b003      	add	sp, #12
   c59c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c59c6 <__copybits>:
   c59c6:	3901      	subs	r1, #1
   c59c8:	b570      	push	{r4, r5, r6, lr}
   c59ca:	1149      	asrs	r1, r1, #5
   c59cc:	6914      	ldr	r4, [r2, #16]
   c59ce:	3101      	adds	r1, #1
   c59d0:	f102 0314 	add.w	r3, r2, #20
   c59d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c59d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c59dc:	1f05      	subs	r5, r0, #4
   c59de:	42a3      	cmp	r3, r4
   c59e0:	d30c      	bcc.n	c59fc <__copybits+0x36>
   c59e2:	1aa3      	subs	r3, r4, r2
   c59e4:	3b11      	subs	r3, #17
   c59e6:	f023 0303 	bic.w	r3, r3, #3
   c59ea:	3211      	adds	r2, #17
   c59ec:	42a2      	cmp	r2, r4
   c59ee:	bf88      	it	hi
   c59f0:	2300      	movhi	r3, #0
   c59f2:	4418      	add	r0, r3
   c59f4:	2300      	movs	r3, #0
   c59f6:	4288      	cmp	r0, r1
   c59f8:	d305      	bcc.n	c5a06 <__copybits+0x40>
   c59fa:	bd70      	pop	{r4, r5, r6, pc}
   c59fc:	f853 6b04 	ldr.w	r6, [r3], #4
   c5a00:	f845 6f04 	str.w	r6, [r5, #4]!
   c5a04:	e7eb      	b.n	c59de <__copybits+0x18>
   c5a06:	f840 3b04 	str.w	r3, [r0], #4
   c5a0a:	e7f4      	b.n	c59f6 <__copybits+0x30>

000c5a0c <__any_on>:
   c5a0c:	f100 0214 	add.w	r2, r0, #20
   c5a10:	6900      	ldr	r0, [r0, #16]
   c5a12:	114b      	asrs	r3, r1, #5
   c5a14:	4298      	cmp	r0, r3
   c5a16:	b510      	push	{r4, lr}
   c5a18:	db11      	blt.n	c5a3e <__any_on+0x32>
   c5a1a:	dd0a      	ble.n	c5a32 <__any_on+0x26>
   c5a1c:	f011 011f 	ands.w	r1, r1, #31
   c5a20:	d007      	beq.n	c5a32 <__any_on+0x26>
   c5a22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c5a26:	fa24 f001 	lsr.w	r0, r4, r1
   c5a2a:	fa00 f101 	lsl.w	r1, r0, r1
   c5a2e:	428c      	cmp	r4, r1
   c5a30:	d10b      	bne.n	c5a4a <__any_on+0x3e>
   c5a32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c5a36:	4293      	cmp	r3, r2
   c5a38:	d803      	bhi.n	c5a42 <__any_on+0x36>
   c5a3a:	2000      	movs	r0, #0
   c5a3c:	bd10      	pop	{r4, pc}
   c5a3e:	4603      	mov	r3, r0
   c5a40:	e7f7      	b.n	c5a32 <__any_on+0x26>
   c5a42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c5a46:	2900      	cmp	r1, #0
   c5a48:	d0f5      	beq.n	c5a36 <__any_on+0x2a>
   c5a4a:	2001      	movs	r0, #1
   c5a4c:	e7f6      	b.n	c5a3c <__any_on+0x30>

000c5a4e <_calloc_r>:
   c5a4e:	b513      	push	{r0, r1, r4, lr}
   c5a50:	434a      	muls	r2, r1
   c5a52:	4611      	mov	r1, r2
   c5a54:	9201      	str	r2, [sp, #4]
   c5a56:	f7f7 fe95 	bl	bd784 <_malloc_r>
   c5a5a:	4604      	mov	r4, r0
   c5a5c:	b118      	cbz	r0, c5a66 <_calloc_r+0x18>
   c5a5e:	9a01      	ldr	r2, [sp, #4]
   c5a60:	2100      	movs	r1, #0
   c5a62:	f7fd ff8d 	bl	c3980 <memset>
   c5a66:	4620      	mov	r0, r4
   c5a68:	b002      	add	sp, #8
   c5a6a:	bd10      	pop	{r4, pc}
   c5a6c:	0000      	movs	r0, r0
	...

000c5a70 <nan>:
   c5a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; c5a78 <nan+0x8>
   c5a74:	4770      	bx	lr
   c5a76:	bf00      	nop
   c5a78:	00000000 	.word	0x00000000
   c5a7c:	7ff80000 	.word	0x7ff80000

000c5a80 <__ascii_wctomb>:
   c5a80:	b149      	cbz	r1, c5a96 <__ascii_wctomb+0x16>
   c5a82:	2aff      	cmp	r2, #255	; 0xff
   c5a84:	bf85      	ittet	hi
   c5a86:	238a      	movhi	r3, #138	; 0x8a
   c5a88:	6003      	strhi	r3, [r0, #0]
   c5a8a:	700a      	strbls	r2, [r1, #0]
   c5a8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c5a90:	bf98      	it	ls
   c5a92:	2001      	movls	r0, #1
   c5a94:	4770      	bx	lr
   c5a96:	4608      	mov	r0, r1
   c5a98:	4770      	bx	lr
	...

000c5a9c <__aeabi_d2lz>:
   c5a9c:	b538      	push	{r3, r4, r5, lr}
   c5a9e:	2200      	movs	r2, #0
   c5aa0:	2300      	movs	r3, #0
   c5aa2:	4604      	mov	r4, r0
   c5aa4:	460d      	mov	r5, r1
   c5aa6:	f7fd fe29 	bl	c36fc <__aeabi_dcmplt>
   c5aaa:	b928      	cbnz	r0, c5ab8 <__aeabi_d2lz+0x1c>
   c5aac:	4620      	mov	r0, r4
   c5aae:	4629      	mov	r1, r5
   c5ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5ab4:	f7fd bef8 	b.w	c38a8 <__aeabi_d2ulz>
   c5ab8:	4620      	mov	r0, r4
   c5aba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c5abe:	f7fd fef3 	bl	c38a8 <__aeabi_d2ulz>
   c5ac2:	4240      	negs	r0, r0
   c5ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c5ac8:	bd38      	pop	{r3, r4, r5, pc}
   c5aca:	bf00      	nop

000c5acc <dynalib_user>:
   c5acc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c5adc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c5aec:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   c5afc:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   c5b0c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   c5b1c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   c5b2c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   c5b3c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   c5b4c:	4544 7525 003e 6157 6e72 6e69 2c67 6d20     DE%u>.Warning, m
   c5b5c:	746f 726f 6320 6d6f 616d 646e 6820 7361     otor command has
   c5b6c:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c5b7c:	6465 6920 206e 766f 7265 2520 6d64 2c73     ed in over %dms,
   c5b8c:	6320 7475 6974 676e 6d20 746f 726f 0073      cutting motors.
   c5b9c:	7453 7461 7375 203a 6425 5b00 4157 4e52     Status: %d.[WARN
   c5bac:	205d 4258 6565 4d20 7365 6173 6567 2073     ] XBee Messages 
   c5bbc:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5bcc:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5bdc:	7373 6d75 6e69 2067 4258 6565 6920 2073     ssuming XBee is 
   c5bec:	6e75 7661 6961 616c 6c62 0065 575b 5241     unavailable.[WAR
   c5bfc:	5d4e 4220 454c 4d20 7365 6173 6567 2073     N] BLE Messages 
   c5c0c:	6168 6576 6e20 746f 6220 6565 206e 6572     have not been re
   c5c1c:	6563 7669 6465 6920 206e 6425 2c73 6120     ceived in %ds, a
   c5c2c:	7373 6d75 6e69 2067 4c42 2045 7369 7520     ssuming BLE is u
   c5c3c:	616e 6176 6c69 6261 656c 4300 6568 6b63     navailable.Check
   c5c4c:	7573 3a6d 2520 3230 2c78 2520 3330 0064     sum: %02x, %03d.
   c5c5c:	7453 6972 676e 4c20 6e65 203a 6425 202c     String Len: %d, 
   c5c6c:	6843 6365 736b 6d75 203a 6425 5b00 4157     Checksum: %d.[WA
   c5c7c:	4e52 205d 654d 7373 6761 2065 6843 6365     RN] Message Chec
   c5c8c:	736b 6d75 4420 656f 2073 6f4e 2074 614d     ksum Does Not Ma
   c5c9c:	6374 2168 203a 7325 5700 7261 696e 676e     tch!: %s.Warning
   c5cac:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c5cbc:	6f6e 2074 616d 6374 0068 6361 006b 7463     not match.ack.ct
   c5ccc:	006c 7325 2520 2073 6425 2520 2064 6425     l.%s %s %d %d %d
   c5cdc:	6d00 7274 5200 6365 6965 6576 2064 6f4d     .mtr.Received Mo
   c5cec:	6f74 2072 6f43 6d6d 6e61 3a64 4c20 7053     tor Command: LSp
   c5cfc:	6565 3d64 6425 522c 7053 6565 3d64 6425     eed=%d,RSpeed=%d
   c5d0c:	7200 7165 7000 7374 5b00 5550 5354 205d     .req.pts.[PUTS] 
   c5d1c:	6552 6563 7669 6465 5320 7274 6e69 2067     Received String 
   c5d2c:	6f43 6d6d 6e61 3a64 2520 0073 7073 0063     Command: %s.spc.
   c5d3c:	7768 0061 7561 0074 6d64 0070 495b 464e     hwa.aut.dmp.[INF
   c5d4c:	5d4f 5220 6365 6965 6576 2064 544c 2045     O] Received LTE 
   c5d5c:	654d 7373 6761 3a65 2520 0073 654e 2077     Message: %s.New 
   c5d6c:	5442 4320 6d6f 616d 646e 003a 495b 464e     BT Command:.[INF
   c5d7c:	5d4f 5220 6365 6965 6576 2064 4c42 2045     O] Received BLE 
   c5d8c:	654d 7373 6761 3a65 2520 0073 4343 7548     Message: %s.CCHu
   c5d9c:	0062 7245 6f72 2c72 4320 756f 646c 6e20     b.Error, Could n
   c5dac:	746f 6920 696e 6974 6c61 7a69 2065 5047     ot initialize GP
   c5dbc:	0053 3a58 2520 2c64 5920 203a 6425 2500     S.X: %d, Y: %d.%
   c5dcc:	3230 2564 3230 2564 3430 2564 3230 2564     02d%02d%04d%02d%
   c5ddc:	3230 2564 3230 0064 7325 252c 2c66 6625     02d%02d.%s,%f,%f
   c5dec:	252c 2c66 6625 252c 2c66 6625 252c 0066     ,%f,%f,%f,%f,%f.
   c5dfc:	654e 2077 4258 6565 4320 6d6f 616d 646e     New XBee Command
   c5e0c:	003a 495b 464e 5d4f 5220 6365 6965 6576     :.[INFO] Receive
   c5e1c:	2064 4258 6565 4d20 7365 6173 6567 203a     d XBee Message: 
   c5e2c:	7325 4500 746e 7265 6e69 2067 6144 6174     %s.Entering Data
   c5e3c:	4f20 6666 6f6c 6461 7265 4d20 646f 0065      Offloader Mode.
   c5e4c:	002f 7245 6f72 2c72 6320 756f 646c 6e20     /.Error, could n
   c5e5c:	746f 6f20 6570 206e 6f72 746f 5320 2044     ot open root SD 
   c5e6c:	6163 6472 6420 7269 6365 6f74 7972 5700     card directory.W
   c5e7c:	6961 6974 676e 6620 726f 4320 4843 6275     aiting for CCHub
   c5e8c:	6320 6e6f 656e 7463 6f69 2e6e 2e2e 5300      connection....S
   c5e9c:	6174 7472 6e69 2067 7274 6e61 6673 7265     tarting transfer
   c5eac:	2e2e 002e 6843 6365 696b 676e 6920 2066     ....Checking if 
   c5ebc:	6966 656c 2520 2073 7369 6120 2e20 7363     file %s is a .cs
   c5ecc:	2076 726f 2e20 7874 2e74 2e2e 2e00 7363     v or .txt.....cs
   c5edc:	0076 6966 656c 6f64 656e 6600 6c69 6e65     v.filedone.filen
   c5eec:	6d61 0065 6553 646e 6e69 2067 6f63 6d6d     ame.Sending comm
   c5efc:	6e61 2064 7325 4600 6c69 2065 7325 6920     and %s.File %s i
   c5f0c:	2073 2061 632e 7673 6f20 2072 742e 7478     s a .csv or .txt
   c5f1c:	7020 6972 746e 6e69 2067 6164 6174 6600      printing data.f
   c5f2c:	6c69 6365 6d6f 0070 7325 3025 7832 4200     ilecomp.%s%02x.B
   c5f3c:	746f 6431 7461 4200 6425 4343 6e73 2573     ot1dat.B%dCCsns%
   c5f4c:	2e30 6636 2520 2e30 6636 2520 2064 6425     0.6f %0.6f %d %d
   c5f5c:	2520 2064 6425 2520 2064 4200 6425 4241      %d %d %d .B%dAB
   c5f6c:	7573 2570 2064 6425 2520 362e 2066 2e25     sup%d %d %.6f %.
   c5f7c:	6636 0020 3142 4343 7470 6273 6769 6f62     6f .B1CCptsbigbo
   c5f8c:	0074 6146 6c69 6465 7420 206f 6966 646e     t.Failed to find
   c5f9c:	4c20 5349 4d33 4c44 6320 6968 0070 494c      LIS3MDL chip.LI
   c5fac:	3353 444d 204c 6f46 6e75 2164 5700 7461     S3MDL Found!.Wat
   c5fbc:	7265 6f42 0074 4c5f 474f 742e 7478 4500     erBot._LOG.txt.E
   c5fcc:	7272 726f 203a 6f63 6c75 2064 6f6e 2074     rror: could not 
   c5fdc:	6f63 6e6e 6365 2074 6f74 5320 2044 6163     connect to SD ca
   c5fec:	6472 0021 6954 656d 4c2c 7461 7469 6475     rd!.Time,Latitud
   c5ffc:	2c65 6f4c 676e 7469 6475 2c65 6554 706d     e,Longitude,Temp
   c600c:	7265 7461 7275 2c65 4870 442c 7369 6f73     erature,pH,Disso
   c601c:	766c 6465 4f20 2c32 6f43 646e 6375 6974     lved O2,Conducti
   c602c:	6976 7974 3020 312e 2c4b 6f43 646e 6375     vity 0.1K,Conduc
   c603c:	6974 6976 7974 3120 004b 495b 464e 5d4f     tivity 1K.[INFO]
   c604c:	5720 7461 7265 6f42 2074 6425 203a 7453      WaterBot %d: St
   c605c:	7261 6574 2064 6f4c 6767 6e69 2167 7400     arted Logging!.t
   c606c:	0078 7872 6f00 6666 0000 0000               x.rx.off....

000c6078 <_ZTVN8particle11SPISettingsE>:
	...
   c6080:	4305 000b 40d1 000b 4175 000b               .C...@..uA..

000c608c <_ZTV5Timer>:
	...
   c6094:	43f1 000b 4445 000b 41db 000b               .C..ED...A..

000c60a0 <_ZTVN5spark10LogHandlerE>:
	...
   c60b0:	40a9 000b 40d3 000b                         .@...@..

000c60b8 <_ZTVN8particle9LEDStatusE>:
	...
   c60c0:	4241 000b 425d 000b 40dd 000b               AB..]B...@..

000c60cc <_ZTVN5spark16SerialLogHandlerE>:
	...
   c60d4:	4271 000b 42a5 000b 0389 000c 40d5 000b     qB...B.......@..

000c60e4 <_ZTV4File>:
	...
   c60ec:	40f9 000b 4183 000b 4197 000b 4191 000b     .@...A...A...A..
   c60fc:	40df 000b 41bb 000b 41b5 000b 41af 000b     .@...A...A...A..
   c610c:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   c611c:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c612c:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   c613c:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c614c:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c615c:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   c616c:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c617c:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   c618c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c619c:	6232 0030                                   2b0.

000c61a0 <CSWTCH.291>:
   c61a0:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c61b0:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c61c0:	444d 004c                                   MDL.

000c61c4 <CSWTCH.26>:
   c61c4:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c61d4 <_ZTV16Adafruit_LIS3MDL>:
	...
   c61dc:	784b 000b 7895 000b 7849 000b 7945 000b     Kx...x..Ix..Ey..
   c61ec:	784d 000b 6573 5074 6361 656b 4374 6766     Mx..setPacketCfg
   c61fc:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c620c:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c621c:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c622c:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c623c:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c624c:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c625c:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c626c:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c627c:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c628c:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c629c:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c62ac:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c62bc:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c62cc:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c62dc:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c62ec:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c62fc:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c630c:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c631c:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c632c:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c633c:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c634c:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c635c:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c636c:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c637c:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c638c:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c639c:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c63ac:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c63bc:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c63cc:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c63dc:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c63ec:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c63fc:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c640c:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c641c:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c642c:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c643c:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c644c:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c645c:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c646c:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c647c:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c648c:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c649c:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c64ac:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c64bc:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c64cc:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c64dc:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c64ec:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c64fc:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c650c:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c651c:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c652c:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c653c:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c654c:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c655c:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c656c:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c657c:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c658c:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c659c:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c65ac:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c65bc:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c65cc:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c65dc:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c65ec:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c65fc:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c660c:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c661c:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c662c:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c663c:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c664c:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c665c:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c666c:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c667c:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c668c:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c669c:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c66ac:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c66bc:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c66cc:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c66dc:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c66ec:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c66fc:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c670c:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c671c:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c672c:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c673c:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c674c:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c675c:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c676c:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c677c:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c678c:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c679c:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c67ac:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c67bc:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c67cc:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c67dc:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c67ec:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c67fc:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c680c:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c681c:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c682c:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c683c:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c684c:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c685c:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c686c:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c687c:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c688c:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c689c:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c68ac:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c68bc:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c68cc:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c68dc:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c68ec:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c68fc:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c690c:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c691c:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c692c:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c693c:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c694c:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c695c:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c696c:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c697c:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c698c:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c699c:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c69ac:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c69bc:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c69cc:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c69dc:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c69ec:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c69fc:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c6a0c:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c6a1c:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c6a2c:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c6a3c:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c6a4c:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c6a5c:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c6a6c:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c6a7c:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c6a8c:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c6a9c:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c6aac:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c6abc:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c6acc:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c6adc:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6aec:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c6afc:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c6b0c:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c6b1c:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c6b2c:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c6b3c:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6b4c:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c6b5c:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c6b6c:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c6b7c:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c6b8c:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c6b9c:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c6bac:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c6bbc:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c6bcc:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c6bdc:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c6bec:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c6bfc:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c6c0c:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c6c1c:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c6c2c:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c6c3c:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c6c4c:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c6c5c:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c6c6c:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c6c7c:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c6c8c:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c6c9c:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c6cac:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c6cbc:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c6ccc:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c6cdc:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c6cec:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c6cfc:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c6d0c:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c6d1c:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c6d2c:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c6d3c:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c6d4c:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c6d5c:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c6d6c:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c6d7c:	6900 696e 5074 6361 656b 5574 5842 4643     .initPacketUBXCF
   c6d8c:	5047 5452 203a 4152 204d 6c61 6f6c 2063     GPRT: RAM alloc 
   c6d9c:	6166 6c69 6465 0021 6562 6967 3a6e 6920     failed!.begin: i
   c6dac:	4373 6e6f 656e 7463 6465 2d20 7320 6365     sConnected - sec
   c6dbc:	6e6f 2064 7461 6574 706d 0074 6562 6967     ond attempt.begi
   c6dcc:	3a6e 6920 4373 6e6f 656e 7463 6465 2d20     n: isConnected -
   c6ddc:	7420 6968 6472 6120 7474 6d65 7470 6200      third attempt.b
   c6dec:	6765 6e69 203a 6874 7269 2064 7461 6574     egin: third atte
   c6dfc:	706d 2074 6166 6c69 6465 202e 7341 7573     mpt failed. Assu
   c6e0c:	696d 676e 7320 6375 6563 7373 2e2e 002e     ming success....

000c6e1c <CSWTCH.334>:
   c6e1c:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c6e2c:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c6e3c:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c6e5c:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c6e84:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c6ed8:	0000 0010 0004                              ......

000c6ede <CSWTCH.335>:
   c6ede:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c6efa:	002c 0000 0000 0000 0010 0024               ,.........$.

000c6f06 <CSWTCH.336>:
   c6f06:	2048 4124 7373 7265 6974 6e6f 6146 6c69     H $AssertionFail
   c6f16:	7275 2065 6166 736c 0065 6977 6972 676e     ure false.wiring
   c6f26:	622e 656c 5300 6174 7472 6420 7369 6f63     .ble.Start disco
   c6f36:	6576 6972 676e 7320 7265 6976 6563 2e73     vering services.
   c6f46:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   c6f56:	2065 6168 5f6c 6c62 5f65 7473 6361 5f6b     e hal_ble_stack_
   c6f66:	6e69 7469 6e28 6c75 706c 7274 2029 3d3d     init(nullptr) ==
   c6f76:	5320 5359 4554 5f4d 5245 4f52 5f52 4f4e      SYSTEM_ERROR_NO
   c6f86:	454e 5000 6565 2072 6564 6976 6563 6920     NE.Peer device i
   c6f96:	2073 696d 7373 6e69 2167 4600 6961 656c     s missing!.Faile
   c6fa6:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c6fb6:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c6fc6:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c6fd6:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c6fe6:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c6ff6:	6f6d 6574 6420 7665 6369 2e65 4400 7075     mote device..Dup
   c7006:	696c 6163 6574 2064 6863 7261 6361 6574     licated characte
   c7016:	6972 7473 6369 6320 6e61 6f6e 2074 6562     ristic cannot be
   c7026:	6120 6464 6465 002e 6146 6c69 6465 7420      added..Failed t
   c7036:	206f 7061 6570 646e 6c20 636f 6c61 6320     o append local c
   c7046:	6168 6172 7463 7265 7369 6974 2e63 0000     haracteristic...
	...

000c7058 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7060:	d821 000b d885 000b d959 000b d8af 000b     !.......Y.......
   c7070:	d825 000b                                   %...

000c7074 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c707c:	d81d 000b d893 000b d81f 000b d8b5 000b     ................
   c708c:	d845 000b                                   E...

000c7090 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7098:	d81b 000b d8a1 000b e115 000b d8bb 000b     ................
   c70a8:	d865 000b                                   e...

000c70ac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c70b8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c70ca <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c70ca:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c70da <_ZN8particle7BleUuid9BASE_UUIDE>:
   c70da:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c70ec <_ZTVN5spark13CellularClassE>:
	...
   c70f4:	ebd7 000b ebcd 000b ebc3 000b eb79 000b     ............y...
   c7104:	ebb7 000b ebab 000b 06e1 000c 06e9 000c     ................
   c7114:	eb9f 000b eb97 000b eb8d 000b eb83 000b     ................
   c7124:	0719 000c                                   ....

000c7128 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7130:	ec11 000b ec17 000b ec55 000b ec25 000b     ........U...%...
   c7140:	ec13 000b                                   ....

000c7144 <_ZTVN5spark13EthernetClassE>:
	...
   c714c:	f19f 000b f195 000b f18b 000b f181 000b     ................
   c715c:	f175 000b f169 000b 06e1 000c 06e9 000c     u...i...........
   c716c:	f15d 000b f155 000b f14b 000b f141 000b     ]...U...K...A...
   c717c:	0719 000c                                   ....

000c7180 <_ZTV7TwoWire>:
	...
   c7188:	f1bd 000b f207 000b f1df 000b f1bf 000b     ................
   c7198:	f1e7 000b f1ef 000b f1f7 000b f1ff 000b     ................

000c71a8 <_ZTV9IPAddress>:
	...
   c71b0:	f2d9 000b f2c9 000b f2cb 000b 7525 7500     ............%u.u
   c71c0:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c71d0:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c71e0:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c71f0:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c7200:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c7210:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c7220:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c7230:	6961 006c                                   ail.

000c7234 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c723c:	f7d5 000b f7fb 000b f7b9 000b f3e7 000b     ................

000c724c <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7254:	fc31 000b fc49 000b 0389 000c 40d5 000b     1...I........@..

000c7264 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c726c:	fc5d 000b fc71 000b 052d 000c f7c1 000b     ]...q...-.......

000c727c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7284:	f7d3 000b f809 000b 02ed 000c f7c3 000b     ................

000c7294 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c729c:	f7d1 000b f817 000b fb99 000b f839 000b     ............9...

000c72ac <_ZTVN5spark12NetworkClassE>:
	...
   c72b4:	06a1 000c 06ab 000c 06b5 000c 06bf 000c     ................
   c72c4:	06c9 000c 06d5 000c 06e1 000c 06e9 000c     ................
   c72d4:	06f1 000c 06fd 000c 0705 000c 070f 000c     ................
   c72e4:	0719 000c                                   ....

000c72e8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c72e8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c72f8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c7308:	6d69 0065                                   ime.

000c730c <_ZTV11USARTSerial>:
	...
   c7314:	1035 000c 10a1 000c 1079 000c 0805 000c     5.......y.......
   c7324:	1049 000c 1065 000c 1057 000c 1073 000c     I...e...W...s...
   c7334:	1037 000c 103b 000c                         7...;...

000c733c <_ZTV9USBSerial>:
	...
   c7344:	10f3 000c 115b 000c 1131 000c 0805 000c     ....[...1.......
   c7354:	1123 000c 10f5 000c 1105 000c 1155 000c     #...........U...
   c7364:	1115 000c 10ed 000c                         ........

000c736c <_ZSt7nothrow>:
	...

000c736d <_ZTSSt19_Sp_make_shared_tag>:
   c736d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c737d:	6572 5f64 6174 0067 0000                     red_tag....

000c7388 <_ZTISt19_Sp_make_shared_tag>:
   c7388:	73c8 000c 736d 000c                         .s..ms..

000c7390 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c7390:	7428 000c 739c 000c 744c 000c               (t...s..Lt..

000c739c <_ZTSN10__cxxabiv117__class_type_infoE>:
   c739c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c73ac:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c73bc:	0045 0000                                   E...

000c73c0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c73c0:	0000 0000 7390 000c 1585 000c 1599 000c     .....s..........
   c73d0:	172d 000c 172d 000c 1603 000c 1545 000c     -...-.......E...
   c73e0:	15eb 000c 15ad 000c 1577 000c               ........w...

000c73ec <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c73ec:	7428 000c 73f8 000c 7390 000c               (t...s...s..

000c73f8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c73f8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c7408:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c7418:	666e 456f 0000 0000                         nfoE....

000c7420 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c7420:	0000 0000 73ec 000c 162d 000c 1641 000c     .....s..-...A...
   c7430:	172d 000c 172d 000c 1603 000c 1545 000c     -...-.......E...
   c7440:	1701 000c 168d 000c 1655 000c               ........U...

000c744c <_ZTISt9type_info>:
   c744c:	73c8 000c 7454 000c                         .s..Tt..

000c7454 <_ZTSSt9type_info>:
   c7454:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
   c7464:	0000 0000                                   ....

000c7468 <CSWTCH.8>:
   c7468:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c7478:	21d2 7f33 d97c c002                         .!3.|...

000c7480 <CSWTCH.9>:
   c7480:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c7490:	2d18 5444 21fb c009                         .-DT.!..

000c7498 <CSWTCH.8>:
   c7498:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c74a4 <CSWTCH.9>:
   c74a4:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c74b0 <npio2_hw>:
   c74b0:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c74c0:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c74d0:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c74e0:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c74f0:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c7500:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c7510:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c7520:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c7530 <two_over_pi>:
   c7530:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c7540:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c7550:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c7560:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c7570:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c7580:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c7590:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c75a0:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c75b0:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c75c0:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c75d0:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c75e0:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c75f0:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c7600:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c7610:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c7620:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c7630:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c7640:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c7650:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c7660:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c7670:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c7680:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c7690:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c76a0:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c76b0:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c76c0:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c76d0:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c76e0:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c76f0:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c7700:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c7710:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c7720:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c7730:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c7740:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c7750:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c7760:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c7770:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c7780:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c7790:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c77a0:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c77b0:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c77c0:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c77d0:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c77e0:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c77f0:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c7800:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c7810:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c7820:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c7830:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c7840:	008c 0000 006b 0000                         ....k...

000c7848 <PIo2>:
   c7848:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c7858:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c7868:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c7874 <init_jk>:
   c7874:	0004 0000 0007 0000 0009 0000               ............

000c7880 <atanhi>:
   c7880:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c7890:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c78a0 <atanlo>:
   c78a0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c78b0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c78c0 <atanhi>:
   c78c0:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c78d0 <atanlo>:
   c78d0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c78e0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c78f0:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c7900:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c7910:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c7920:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c7930:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c7940:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c7950:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c795c <fpi.1>:
   c795c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c796c:	0000 0000                                   ....

000c7970 <fpinan.0>:
   c7970:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c7988 <tinytens>:
   c7988:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c7998:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c79a8:	6f43 64ac 0628 1168                         Co.d(.h.

000c79b0 <_ctype_>:
   c79b0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c79c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c79d0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c79e0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c79f0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c7a00:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c7a10:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c7a20:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c7a30:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c7ab0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c7ac0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c7ad0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7ae0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7af0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7b00:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7b10:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c7b20:	632e 0000                                   .c..

000c7b24 <_C_numeric_locale>:
   c7b24:	63c7 000c 721f 000c dc08 2003 4f50 4953     .c...r..... POSI
   c7b34:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c7b44:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c7b54:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c7b64:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c7b74:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c7b84:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c7b90 <__mprec_bigtens>:
   c7b90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c7ba0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c7bb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c7bb8 <__mprec_tens>:
   c7bb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c7bc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c7bd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c7be8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c7bf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c7c08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c7c18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c7c28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c7c38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c7c48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c7c58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c7c68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c7c78:	9db4 79d9 7843 44ea                         ...yCx.D

000c7c80 <p05.0>:
   c7c80:	0005 0000 0019 0000 007d 0000               ........}...

000c7c8c <link_const_variable_data_end>:
   c7c8c:	000b5ddd 	.word	0x000b5ddd
   c7c90:	000beb69 	.word	0x000beb69
   c7c94:	000bebe1 	.word	0x000bebe1
   c7c98:	000bf1a9 	.word	0x000bf1a9
   c7c9c:	000c0379 	.word	0x000c0379
   c7ca0:	000c07f1 	.word	0x000c07f1
   c7ca4:	000c0915 	.word	0x000c0915
   c7ca8:	000c0e7d 	.word	0x000c0e7d
   c7cac:	000c1021 	.word	0x000c1021
