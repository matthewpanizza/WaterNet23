
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23PreAlpha/target/4.0.0/boron/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014990  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c89b0  000c89b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c89d4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db20  000c89d8  0002db20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ad0  2003dd20  2003dd20  0003dd20  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8bd8  000c8bd8  00038bd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8c00  000c8c00  00038c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022dfc1  00000000  00000000  00038c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f79  00000000  00000000  00266bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00071292  00000000  00000000  00287b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f88  00000000  00000000  002f8dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011560  00000000  00000000  002fdd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00050048  00000000  00000000  0030f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00087c78  00000000  00000000  0035f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c180  00000000  00000000  003e6f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd9c  00000000  00000000  005430f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 fa71 	bl	c4518 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 fa93 	bl	c4568 <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db20 	.word	0x2003db20
   b404c:	000c89d8 	.word	0x000c89d8
   b4050:	2003dd20 	.word	0x2003dd20
   b4054:	2003dd20 	.word	0x2003dd20
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f00d ff17 	bl	c1e94 <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c8984 	.word	0x000c8984
   b4080:	000c89a8 	.word	0x000c89a8

000b4084 <module_user_setup>:
   b4084:	f006 b808 	b.w	ba098 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f007 fc27 	bl	bb8dc <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f00d beb7 	b.w	c1e04 <_post_loop>

000b4096 <_Znwj>:
   b4096:	f00a b8ef 	b.w	be278 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b8ed 	b.w	be278 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b8f3 	b.w	be288 <free>

000b40a2 <_ZdlPvj>:
   b40a2:	f00a b8f1 	b.w	be288 <free>
	...

000b40a8 <__cxa_pure_virtual>:
   b40a8:	b508      	push	{r3, lr}
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 ffd4 	bl	be05c <panic_>
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdc8d 	.word	0x000bdc8d
   b40bc:	000c66c8 	.word	0x000c66c8

000b40c0 <__cxa_guard_acquire>:
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b40d0:	4770      	bx	lr

000b40d2 <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b40d2:	4770      	bx	lr

000b40d4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b40d4:	b538      	push	{r3, r4, r5, lr}
   b40d6:	460c      	mov	r4, r1
   b40d8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b40da:	2220      	movs	r2, #32
   b40dc:	2100      	movs	r1, #0
   b40de:	f104 0008 	add.w	r0, r4, #8
   b40e2:	f010 fa41 	bl	c4568 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b40e6:	4909      	ldr	r1, [pc, #36]	; (b410c <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b40e8:	220b      	movs	r2, #11
   b40ea:	4620      	mov	r0, r4
   b40ec:	f010 faf6 	bl	c46dc <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b40f0:	2301      	movs	r3, #1
   b40f2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b40f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b40f6:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b40f8:	2302      	movs	r3, #2
   b40fa:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b40fc:	4b04      	ldr	r3, [pc, #16]	; (b4110 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b40fe:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b4100:	4b04      	ldr	r3, [pc, #16]	; (b4114 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b4102:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b4104:	4b04      	ldr	r3, [pc, #16]	; (b4118 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b4106:	6223      	str	r3, [r4, #32]
}
   b4108:	bd38      	pop	{r3, r4, r5, pc}
   b410a:	bf00      	nop
   b410c:	000c66dd 	.word	0x000c66dd
   b4110:	c4c80000 	.word	0xc4c80000
   b4114:	44c80000 	.word	0x44c80000
   b4118:	3c75c28f 	.word	0x3c75c28f

000b411c <_ZN16Adafruit_LIS3MDLD0Ev>:
   b411c:	b510      	push	{r4, lr}
   b411e:	2128      	movs	r1, #40	; 0x28
   b4120:	4604      	mov	r4, r0
   b4122:	f7ff ffbe 	bl	b40a2 <_ZdlPvj>
   b4126:	4620      	mov	r0, r4
   b4128:	bd10      	pop	{r4, pc}
	...

000b412c <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b412c:	4a03      	ldr	r2, [pc, #12]	; (b413c <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b412e:	6002      	str	r2, [r0, #0]
   b4130:	2200      	movs	r2, #0
   b4132:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b4136:	7602      	strb	r2, [r0, #24]
   b4138:	4770      	bx	lr
   b413a:	bf00      	nop
   b413c:	000c6700 	.word	0x000c6700

000b4140 <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b4140:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b4142:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b4144:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b4146:	2200      	movs	r2, #0
   b4148:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b414c:	2506      	movs	r5, #6
   b414e:	2228      	movs	r2, #40	; 0x28
   b4150:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b4154:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b4156:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b415a:	a806      	add	r0, sp, #24
   b415c:	f007 fdee 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b4160:	462a      	mov	r2, r5
   b4162:	a904      	add	r1, sp, #16
   b4164:	a806      	add	r0, sp, #24
   b4166:	f007 fe67 	bl	bbe38 <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b416a:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b416c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b4170:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b4174:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b4178:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b417a:	2d03      	cmp	r5, #3
   b417c:	bf98      	it	ls
   b417e:	4812      	ldrls	r0, [pc, #72]	; (b41c8 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b4180:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b4182:	ee07 1a10 	vmov	s14, r1
   b4186:	bf9c      	itt	ls
   b4188:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b418c:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b4190:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b4192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b4196:	bf88      	it	hi
   b4198:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b419c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b41a0:	ee07 2a10 	vmov	s14, r2
   b41a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b41a8:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b41ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b41b0:	ee07 3a10 	vmov	s14, r3
   b41b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b41b8:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b41bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b41c0:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b41c4:	b00d      	add	sp, #52	; 0x34
   b41c6:	bd30      	pop	{r4, r5, pc}
   b41c8:	000c66e8 	.word	0x000c66e8

000b41cc <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b41cc:	b538      	push	{r3, r4, r5, lr}
   b41ce:	460c      	mov	r4, r1
   b41d0:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b41d2:	2220      	movs	r2, #32
   b41d4:	2100      	movs	r1, #0
   b41d6:	1d20      	adds	r0, r4, #4
   b41d8:	f010 f9c6 	bl	c4568 <memset>
  event->version = sizeof(sensors_event_t);
   b41dc:	2324      	movs	r3, #36	; 0x24
   b41de:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b41e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b41e2:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b41e4:	2302      	movs	r3, #2
   b41e6:	60a3      	str	r3, [r4, #8]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41e8:	f009 fd60 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b41ec:	6120      	str	r0, [r4, #16]
  read();
   b41ee:	4628      	mov	r0, r5
   b41f0:	f7ff ffa6 	bl	b4140 <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b41f4:	edd5 7a03 	vldr	s15, [r5, #12]
   b41f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; b4220 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b41fc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b4200:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b4202:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b4206:	edd5 7a04 	vldr	s15, [r5, #16]
   b420a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b420e:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b4212:	edd5 7a05 	vldr	s15, [r5, #20]
   b4216:	ee67 7a87 	vmul.f32	s15, s15, s14
   b421a:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b421e:	bd38      	pop	{r3, r4, r5, pc}
   b4220:	42c80000 	.word	0x42c80000

000b4224 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b4224:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b4226:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b4228:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b422a:	2700      	movs	r7, #0
   b422c:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b4230:	2320      	movs	r3, #32
   b4232:	9300      	str	r3, [sp, #0]
   b4234:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b4236:	460e      	mov	r6, r1
   b4238:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b423a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b423e:	462b      	mov	r3, r5
   b4240:	a808      	add	r0, sp, #32
   b4242:	f007 fd7b 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b4246:	2305      	movs	r3, #5
   b4248:	2202      	movs	r2, #2
   b424a:	a908      	add	r1, sp, #32
   b424c:	a804      	add	r0, sp, #16
   b424e:	f007 fe51 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b4252:	4631      	mov	r1, r6
   b4254:	a804      	add	r0, sp, #16
   b4256:	f007 fe5f 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b425a:	2323      	movs	r3, #35	; 0x23
   b425c:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b4260:	9300      	str	r3, [sp, #0]
   b4262:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b4266:	462b      	mov	r3, r5
   b4268:	9501      	str	r5, [sp, #4]
   b426a:	a80e      	add	r0, sp, #56	; 0x38
   b426c:	f007 fd66 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b4270:	2302      	movs	r3, #2
   b4272:	461a      	mov	r2, r3
   b4274:	a90e      	add	r1, sp, #56	; 0x38
   b4276:	a806      	add	r0, sp, #24
   b4278:	f007 fe3c 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b427c:	4631      	mov	r1, r6
   b427e:	a806      	add	r0, sp, #24
   b4280:	f007 fe4a 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b4284:	b015      	add	sp, #84	; 0x54
   b4286:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4288 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b4288:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b428a:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b428c:	b08c      	sub	sp, #48	; 0x30
   b428e:	4606      	mov	r6, r0
   b4290:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b4292:	d103      	bne.n	b429c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b4294:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b4296:	f7ff ffc5 	bl	b4224 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b429a:	e009      	b.n	b42b0 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b429c:	2903      	cmp	r1, #3
   b429e:	d003      	beq.n	b42a8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b42a0:	2905      	cmp	r1, #5
   b42a2:	d103      	bne.n	b42ac <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b42a4:	2101      	movs	r1, #1
   b42a6:	e7f6      	b.n	b4296 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b42a8:	2102      	movs	r1, #2
   b42aa:	e7f4      	b.n	b4296 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b42ac:	2907      	cmp	r1, #7
   b42ae:	d01b      	beq.n	b42e8 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b42b0:	200a      	movs	r0, #10
   b42b2:	f00a f855 	bl	be360 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b42b6:	2501      	movs	r5, #1
   b42b8:	2300      	movs	r3, #0
   b42ba:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b42be:	2320      	movs	r3, #32
   b42c0:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b42c4:	9300      	str	r3, [sp, #0]
   b42c6:	9501      	str	r5, [sp, #4]
   b42c8:	462b      	mov	r3, r5
   b42ca:	a806      	add	r0, sp, #24
   b42cc:	f007 fd36 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b42d0:	462b      	mov	r3, r5
   b42d2:	2204      	movs	r2, #4
   b42d4:	a906      	add	r1, sp, #24
   b42d6:	a804      	add	r0, sp, #16
   b42d8:	f007 fe0c 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b42dc:	4621      	mov	r1, r4
   b42de:	a804      	add	r0, sp, #16
   b42e0:	f007 fe1a 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b42e4:	b00c      	add	sp, #48	; 0x30
   b42e6:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b42e8:	2100      	movs	r1, #0
   b42ea:	e7d4      	b.n	b4296 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b42ec <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b42ec:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b42ee:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b42f0:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b42f2:	2500      	movs	r5, #0
   b42f4:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b42f8:	2222      	movs	r2, #34	; 0x22
   b42fa:	9301      	str	r3, [sp, #4]
   b42fc:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b42fe:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b4300:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b4304:	a806      	add	r0, sp, #24
   b4306:	f007 fd19 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b430a:	462b      	mov	r3, r5
   b430c:	2202      	movs	r2, #2
   b430e:	a906      	add	r1, sp, #24
   b4310:	a804      	add	r0, sp, #16
   b4312:	f007 fdef 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b4316:	4621      	mov	r1, r4
   b4318:	a804      	add	r0, sp, #16
   b431a:	f007 fdfd 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b431e:	b00d      	add	sp, #52	; 0x34
   b4320:	bd30      	pop	{r4, r5, pc}

000b4322 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b4322:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4324:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b4326:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4328:	2200      	movs	r2, #0
   b432a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b432e:	2221      	movs	r2, #33	; 0x21
   b4330:	9301      	str	r3, [sp, #4]
   b4332:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b4334:	460d      	mov	r5, r1
   b4336:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4338:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b433c:	a806      	add	r0, sp, #24
   b433e:	f007 fcfd 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b4342:	2305      	movs	r3, #5
   b4344:	2202      	movs	r2, #2
   b4346:	a906      	add	r1, sp, #24
   b4348:	a804      	add	r0, sp, #16
   b434a:	f007 fdd3 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b434e:	4629      	mov	r1, r5
   b4350:	a804      	add	r0, sp, #16
   b4352:	f007 fde1 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b4356:	7625      	strb	r5, [r4, #24]
}
   b4358:	b00d      	add	sp, #52	; 0x34
   b435a:	bd30      	pop	{r4, r5, pc}

000b435c <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b435c:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b435e:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b4360:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4362:	2200      	movs	r2, #0
   b4364:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b4368:	2221      	movs	r2, #33	; 0x21
   b436a:	9301      	str	r3, [sp, #4]
   b436c:	9200      	str	r2, [sp, #0]
   b436e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b4372:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4374:	a806      	add	r0, sp, #24
   b4376:	f007 fce1 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b437a:	2305      	movs	r3, #5
   b437c:	2202      	movs	r2, #2
   b437e:	a906      	add	r1, sp, #24
   b4380:	a804      	add	r0, sp, #16
   b4382:	f007 fdb7 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b4386:	a804      	add	r0, sp, #16
   b4388:	f007 fdb9 	bl	bbefe <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b438c:	b2c0      	uxtb	r0, r0
   b438e:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b4390:	b00c      	add	sp, #48	; 0x30
   b4392:	bd10      	pop	{r4, pc}

000b4394 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b4394:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b4396:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b4398:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b439a:	2501      	movs	r5, #1
   b439c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b43a0:	2321      	movs	r3, #33	; 0x21
   b43a2:	9300      	str	r3, [sp, #0]
   b43a4:	9501      	str	r5, [sp, #4]
   b43a6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b43aa:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b43ac:	462b      	mov	r3, r5
   b43ae:	a806      	add	r0, sp, #24
   b43b0:	f007 fcc4 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b43b4:	2302      	movs	r3, #2
   b43b6:	462a      	mov	r2, r5
   b43b8:	a906      	add	r1, sp, #24
   b43ba:	a804      	add	r0, sp, #16
   b43bc:	f007 fd9a 	bl	bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b43c0:	4629      	mov	r1, r5
   b43c2:	a804      	add	r0, sp, #16
   b43c4:	f007 fda8 	bl	bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b43c8:	200a      	movs	r0, #10
   b43ca:	f009 ffc9 	bl	be360 <delay>
  getRange();
   b43ce:	4620      	mov	r0, r4
   b43d0:	f7ff ffc4 	bl	b435c <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b43d4:	b00d      	add	sp, #52	; 0x34
   b43d6:	bd30      	pop	{r4, r5, pc}

000b43d8 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b43d8:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b43da:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b43dc:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b43de:	2500      	movs	r5, #0
   b43e0:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b43e4:	230f      	movs	r3, #15
   b43e6:	9300      	str	r3, [sp, #0]
   b43e8:	9601      	str	r6, [sp, #4]
   b43ea:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b43ee:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b43f0:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b43f2:	a804      	add	r0, sp, #16
   b43f4:	f007 fca2 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b43f8:	a804      	add	r0, sp, #16
   b43fa:	f007 fd5f 	bl	bbebc <_ZN23Adafruit_BusIO_Register4readEv>
   b43fe:	283d      	cmp	r0, #61	; 0x3d
   b4400:	d115      	bne.n	b442e <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b4402:	4620      	mov	r0, r4
   b4404:	f7ff ffc6 	bl	b4394 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b4408:	2103      	movs	r1, #3
   b440a:	4620      	mov	r0, r4
   b440c:	f7ff ff0a 	bl	b4224 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b4410:	4631      	mov	r1, r6
   b4412:	4620      	mov	r0, r4
   b4414:	f7ff ff38 	bl	b4288 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b4418:	4629      	mov	r1, r5
   b441a:	4620      	mov	r0, r4
   b441c:	f7ff ff81 	bl	b4322 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b4420:	4620      	mov	r0, r4
   b4422:	4629      	mov	r1, r5
   b4424:	f7ff ff62 	bl	b42ec <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b4428:	4630      	mov	r0, r6
}
   b442a:	b00a      	add	sp, #40	; 0x28
   b442c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b442e:	4628      	mov	r0, r5
   b4430:	e7fb      	b.n	b442a <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b4432 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b4432:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b4434:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b4436:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b4438:	b95b      	cbnz	r3, b4452 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b443a:	2010      	movs	r0, #16
   b443c:	e9cd 1200 	strd	r1, r2, [sp]
   b4440:	f7ff fe29 	bl	b4096 <_Znwj>
   b4444:	4605      	mov	r5, r0
   b4446:	b118      	cbz	r0, b4450 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b4448:	e9dd 1200 	ldrd	r1, r2, [sp]
   b444c:	f007 fd7d 	bl	bbf4a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4450:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b4452:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b4454:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b4456:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b4458:	2101      	movs	r1, #1
   b445a:	f007 fd92 	bl	bbf82 <_ZN18Adafruit_I2CDevice5beginEb>
   b445e:	b128      	cbz	r0, b446c <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b4460:	4620      	mov	r0, r4
}
   b4462:	b003      	add	sp, #12
   b4464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b4468:	f7ff bfb6 	b.w	b43d8 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b446c:	b003      	add	sp, #12
   b446e:	bd30      	pop	{r4, r5, pc}

000b4470 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b4470:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b4472:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b4474:	b08b      	sub	sp, #44	; 0x2c
   b4476:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b4478:	2500      	movs	r5, #0
   b447a:	2232      	movs	r2, #50	; 0x32
   b447c:	2102      	movs	r1, #2
   b447e:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b4482:	e9cd 2100 	strd	r2, r1, [sp]
   b4486:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b448a:	a804      	add	r0, sp, #16
   b448c:	f007 fc56 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b4490:	462a      	mov	r2, r5
   b4492:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b4496:	a804      	add	r0, sp, #16
   b4498:	f007 fcb0 	bl	bbdfc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b449c:	b00b      	add	sp, #44	; 0x2c
   b449e:	bd30      	pop	{r4, r5, pc}

000b44a0 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b44a0:	b530      	push	{r4, r5, lr}
   b44a2:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b44a4:	2500      	movs	r5, #0
  value |= latch << 1;
   b44a6:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b44aa:	0064      	lsls	r4, r4, #1
   b44ac:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b44b0:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b44b4:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b44b8:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b44bc:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b44c0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b44c4:	2301      	movs	r3, #1
  value |= latch << 1;
   b44c6:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b44ca:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b44ce:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b44d0:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b44d2:	2230      	movs	r2, #48	; 0x30
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	9200      	str	r2, [sp, #0]
   b44d8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b44dc:	a804      	add	r0, sp, #16
   b44de:	f007 fc2d 	bl	bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b44e2:	462a      	mov	r2, r5
   b44e4:	4621      	mov	r1, r4
   b44e6:	a804      	add	r0, sp, #16
   b44e8:	f007 fc88 	bl	bbdfc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b44ec:	b00b      	add	sp, #44	; 0x2c
   b44ee:	bd30      	pop	{r4, r5, pc}

000b44f0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b44f0:	4770      	bx	lr

000b44f2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b44f2:	b510      	push	{r4, lr}
  }
   b44f4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b44f6:	4604      	mov	r4, r0
  }
   b44f8:	f7ff fdd3 	bl	b40a2 <_ZdlPvj>
   b44fc:	4620      	mov	r0, r4
   b44fe:	bd10      	pop	{r4, pc}

000b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b4500:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b4502:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b4504:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b4506:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b4508:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b450a:	041b      	lsls	r3, r3, #16
   b450c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b4510:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b4512:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b4514:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b4518:	bd10      	pop	{r4, pc}

000b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b451a:	1843      	adds	r3, r0, r1
   b451c:	5c40      	ldrb	r0, [r0, r1]
   b451e:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b4520:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b4524:	4770      	bx	lr

000b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4526:	b410      	push	{r4}
{
    if (base == 0) {
   b4528:	b92a      	cbnz	r2, b4536 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b452a:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b452c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b4530:	6892      	ldr	r2, [r2, #8]
   b4532:	b2c9      	uxtb	r1, r1
   b4534:	4710      	bx	r2
}
   b4536:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b453a:	b2d2      	uxtb	r2, r2
   b453c:	f00c bfaf 	b.w	c149e <_ZN5Print11printNumberEmh>

000b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b4540:	b912      	cbnz	r2, b4548 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b4542:	6803      	ldr	r3, [r0, #0]
   b4544:	689b      	ldr	r3, [r3, #8]
   b4546:	4718      	bx	r3
        return printNumber(val, base) + t;
   b4548:	b2d2      	uxtb	r2, r2
   b454a:	f00c bfa8 	b.w	c149e <_ZN5Print11printNumberEmh>

000b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b454e:	b510      	push	{r4, lr}
   b4550:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b4552:	f7ff fff5 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b4556:	4620      	mov	r0, r4
    }
   b4558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b455c:	f00c bf87 	b.w	c146e <_ZN5Print7printlnEv>

000b4560 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4560:	6803      	ldr	r3, [r0, #0]
   b4562:	b2c9      	uxtb	r1, r1
   b4564:	689b      	ldr	r3, [r3, #8]
   b4566:	4718      	bx	r3

000b4568 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4568:	b40e      	push	{r1, r2, r3}
   b456a:	b503      	push	{r0, r1, lr}
   b456c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b456e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4570:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4574:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4576:	f00c ffb0 	bl	c14da <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b457a:	b002      	add	sp, #8
   b457c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4580:	b003      	add	sp, #12
   b4582:	4770      	bx	lr

000b4584 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4584:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4586:	4604      	mov	r4, r0
   b4588:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b458a:	7922      	ldrb	r2, [r4, #4]
   b458c:	68a3      	ldr	r3, [r4, #8]
   b458e:	b132      	cbz	r2, b459e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4590:	b9a3      	cbnz	r3, b45bc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4592:	490b      	ldr	r1, [pc, #44]	; (b45c0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4594:	b002      	add	sp, #8
   b4596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b459a:	f00c bf5d 	b.w	c1458 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b459e:	4a09      	ldr	r2, [pc, #36]	; (b45c4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b45a0:	7b26      	ldrb	r6, [r4, #12]
   b45a2:	4d09      	ldr	r5, [pc, #36]	; (b45c8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b45a4:	4909      	ldr	r1, [pc, #36]	; (b45cc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b45a6:	7b64      	ldrb	r4, [r4, #13]
   b45a8:	2e01      	cmp	r6, #1
   b45aa:	bf18      	it	ne
   b45ac:	4629      	movne	r1, r5
   b45ae:	e9cd 1400 	strd	r1, r4, [sp]
   b45b2:	4907      	ldr	r1, [pc, #28]	; (b45d0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b45b4:	f7ff ffd8 	bl	b4568 <_ZN5Print6printfEPKcz>
  }
   b45b8:	b002      	add	sp, #8
   b45ba:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b45bc:	4a05      	ldr	r2, [pc, #20]	; (b45d4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b45be:	e7ef      	b.n	b45a0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b45c0:	000c6725 	.word	0x000c6725
   b45c4:	000c7f1b 	.word	0x000c7f1b
   b45c8:	000c6721 	.word	0x000c6721
   b45cc:	000c671d 	.word	0x000c671d
   b45d0:	000c673b 	.word	0x000c673b
   b45d4:	000c6714 	.word	0x000c6714

000b45d8 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b45d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b45dc:	8002      	strh	r2, [r0, #0]
   b45de:	2142      	movs	r1, #66	; 0x42
   b45e0:	2200      	movs	r2, #0
   b45e2:	b510      	push	{r4, lr}
   b45e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b45e8:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b45ec:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b45f0:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b45f4:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b45f8:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b45fc:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b4600:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b4604:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b4608:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b460c:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b4610:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b4614:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b4618:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b461c:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b4620:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b4624:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b4628:	2180      	movs	r1, #128	; 0x80
   b462a:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b462e:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b4632:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b4636:	4925      	ldr	r1, [pc, #148]	; (b46cc <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b4638:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b463c:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b4640:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b4644:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b4648:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b464c:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b4650:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b4654:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b4658:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b465c:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b4660:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b4664:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b4668:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b466c:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b4670:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b4674:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b4678:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b467c:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b4680:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b4684:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b4688:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b468c:	4910      	ldr	r1, [pc, #64]	; (b46d0 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b468e:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b4692:	f640 1164 	movw	r1, #2404	; 0x964
   b4696:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b469a:	2158      	movs	r1, #88	; 0x58
   b469c:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b46a0:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b46a2:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b46a6:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b46aa:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b46ae:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b46b2:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b46b6:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b46ba:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b46be:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b46c2:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b46c6:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b46ca:	bd10      	pop	{r4, pc}
   b46cc:	02020000 	.word	0x02020000
   b46d0:	64640200 	.word	0x64640200

000b46d4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b46d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b46d6:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b46d8:	460d      	mov	r5, r1
   b46da:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b46de:	b9a9      	cbnz	r1, b470c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b46e0:	b1a8      	cbz	r0, b470e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b46e2:	f7ff fcdc 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b46e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b46ea:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b46ee:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b46f2:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b46f6:	b913      	cbnz	r3, b46fe <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b46f8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b46fc:	b123      	cbz	r3, b4708 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b46fe:	4920      	ldr	r1, [pc, #128]	; (b4780 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b4700:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b4704:	f00c fec9 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b4708:	2001      	movs	r0, #1
   b470a:	e011      	b.n	b4730 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b470c:	b9b8      	cbnz	r0, b473e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b470e:	4628      	mov	r0, r5
   b4710:	f7ff fcc3 	bl	b409a <_Znaj>
   b4714:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b4718:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b471c:	bb60      	cbnz	r0, b4778 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b471e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b4722:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b4726:	b923      	cbnz	r3, b4732 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b4728:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b472c:	b90b      	cbnz	r3, b4732 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b472e:	2000      	movs	r0, #0
}
   b4730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b4732:	4914      	ldr	r1, [pc, #80]	; (b4784 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b4734:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b4738:	f00c feaf 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b473c:	e7f7      	b.n	b472e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b473e:	4608      	mov	r0, r1
   b4740:	f7ff fcab 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b4744:	4606      	mov	r6, r0
   b4746:	b940      	cbnz	r0, b475a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b4748:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b474c:	b91b      	cbnz	r3, b4756 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b474e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b4752:	2b00      	cmp	r3, #0
   b4754:	d0eb      	beq.n	b472e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b4756:	490c      	ldr	r1, [pc, #48]	; (b4788 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b4758:	e7ec      	b.n	b4734 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b475a:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b475e:	42aa      	cmp	r2, r5
   b4760:	bf28      	it	cs
   b4762:	462a      	movcs	r2, r5
   b4764:	4639      	mov	r1, r7
   b4766:	f00f fed7 	bl	c4518 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b476a:	4638      	mov	r0, r7
   b476c:	f7ff fc97 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b4770:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b4774:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b4778:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b477c:	e7c4      	b.n	b4708 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b477e:	bf00      	nop
   b4780:	000c6758 	.word	0x000c6758
   b4784:	000c6783 	.word	0x000c6783
   b4788:	000c67ae 	.word	0x000c67ae

000b478c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b478c:	290d      	cmp	r1, #13
   b478e:	f000 80cd 	beq.w	b492c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b4792:	d809      	bhi.n	b47a8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b4794:	2902      	cmp	r1, #2
   b4796:	f000 80a7 	beq.w	b48e8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b479a:	2906      	cmp	r1, #6
   b479c:	f000 80be 	beq.w	b491c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b47a0:	2901      	cmp	r1, #1
   b47a2:	d016      	beq.n	b47d2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b47a4:	2000      	movs	r0, #0
}
   b47a6:	4770      	bx	lr
  switch (Class)
   b47a8:	2913      	cmp	r1, #19
   b47aa:	f000 80d4 	beq.w	b4956 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b47ae:	2928      	cmp	r1, #40	; 0x28
   b47b0:	f000 80dc 	beq.w	b496c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b47b4:	2910      	cmp	r1, #16
   b47b6:	d1f5      	bne.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b47b8:	2a10      	cmp	r2, #16
   b47ba:	f000 80c9 	beq.w	b4950 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b47be:	f200 80ba 	bhi.w	b4936 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b47c2:	2a02      	cmp	r2, #2
   b47c4:	f000 80c1 	beq.w	b494a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b47c8:	2a03      	cmp	r2, #3
   b47ca:	d1eb      	bne.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b47cc:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b47d0:	e066      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b47d2:	2a26      	cmp	r2, #38	; 0x26
   b47d4:	d854      	bhi.n	b4880 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b47d6:	2a00      	cmp	r2, #0
   b47d8:	d0e4      	beq.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b47da:	3a01      	subs	r2, #1
   b47dc:	2a25      	cmp	r2, #37	; 0x25
   b47de:	d8e1      	bhi.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b47e0:	a301      	add	r3, pc, #4	; (adr r3, b47e8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b47e2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b47e6:	bf00      	nop
   b47e8:	000b489f 	.word	0x000b489f
   b47ec:	000b47a5 	.word	0x000b47a5
   b47f0:	000b48a9 	.word	0x000b48a9
   b47f4:	000b48ad 	.word	0x000b48ad
   b47f8:	000b48b1 	.word	0x000b48b1
   b47fc:	000b47a5 	.word	0x000b47a5
   b4800:	000b48b5 	.word	0x000b48b5
   b4804:	000b47a5 	.word	0x000b47a5
   b4808:	000b48b9 	.word	0x000b48b9
   b480c:	000b47a5 	.word	0x000b47a5
   b4810:	000b47a5 	.word	0x000b47a5
   b4814:	000b47a5 	.word	0x000b47a5
   b4818:	000b47a5 	.word	0x000b47a5
   b481c:	000b47a5 	.word	0x000b47a5
   b4820:	000b47a5 	.word	0x000b47a5
   b4824:	000b47a5 	.word	0x000b47a5
   b4828:	000b48bd 	.word	0x000b48bd
   b482c:	000b48c1 	.word	0x000b48c1
   b4830:	000b48c5 	.word	0x000b48c5
   b4834:	000b48c9 	.word	0x000b48c9
   b4838:	000b47a5 	.word	0x000b47a5
   b483c:	000b47a5 	.word	0x000b47a5
   b4840:	000b48cd 	.word	0x000b48cd
   b4844:	000b47a5 	.word	0x000b47a5
   b4848:	000b47a5 	.word	0x000b47a5
   b484c:	000b47a5 	.word	0x000b47a5
   b4850:	000b47a5 	.word	0x000b47a5
   b4854:	000b47a5 	.word	0x000b47a5
   b4858:	000b47a5 	.word	0x000b47a5
   b485c:	000b47a5 	.word	0x000b47a5
   b4860:	000b47a5 	.word	0x000b47a5
   b4864:	000b47a5 	.word	0x000b47a5
   b4868:	000b48d1 	.word	0x000b48d1
   b486c:	000b48d5 	.word	0x000b48d5
   b4870:	000b47a5 	.word	0x000b47a5
   b4874:	000b47a5 	.word	0x000b47a5
   b4878:	000b47a5 	.word	0x000b47a5
   b487c:	000b48d9 	.word	0x000b48d9
   b4880:	2a3c      	cmp	r2, #60	; 0x3c
   b4882:	d02d      	beq.n	b48e0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b4884:	d805      	bhi.n	b4892 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b4886:	2a35      	cmp	r2, #53	; 0x35
   b4888:	d028      	beq.n	b48dc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b488a:	2a3b      	cmp	r2, #59	; 0x3b
   b488c:	d18a      	bne.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b488e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b4890:	e006      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b4892:	2a60      	cmp	r2, #96	; 0x60
   b4894:	d026      	beq.n	b48e4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b4896:	2a61      	cmp	r2, #97	; 0x61
   b4898:	d184      	bne.n	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b489a:	6980      	ldr	r0, [r0, #24]
   b489c:	e000      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b489e:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b48a0:	3800      	subs	r0, #0
   b48a2:	bf18      	it	ne
   b48a4:	2001      	movne	r0, #1
   b48a6:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b48a8:	6900      	ldr	r0, [r0, #16]
   b48aa:	e7f9      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b48ac:	6940      	ldr	r0, [r0, #20]
   b48ae:	e7f7      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b48b0:	69c0      	ldr	r0, [r0, #28]
   b48b2:	e7f5      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b48b4:	6a00      	ldr	r0, [r0, #32]
   b48b6:	e7f3      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b48b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b48ba:	e7f1      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b48bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b48be:	e7ef      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b48c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b48c2:	e7ed      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b48c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b48c6:	e7eb      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b48c8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b48ca:	e7e9      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b48cc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b48ce:	e7e7      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b48d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b48d2:	e7e5      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b48d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b48d6:	e7e3      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b48d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b48da:	e7e1      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b48dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b48de:	e7df      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b48e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b48e2:	e7dd      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b48e4:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b48e6:	e7db      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b48e8:	2a34      	cmp	r2, #52	; 0x34
   b48ea:	d015      	beq.n	b4918 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b48ec:	d806      	bhi.n	b48fc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b48ee:	2a13      	cmp	r2, #19
   b48f0:	d00b      	beq.n	b490a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b48f2:	2a15      	cmp	r2, #21
   b48f4:	f47f af56 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b48f8:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b48fa:	e7d1      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b48fc:	2a72      	cmp	r2, #114	; 0x72
   b48fe:	d006      	beq.n	b490e <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b4900:	2a73      	cmp	r2, #115	; 0x73
   b4902:	f47f af4f 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b4906:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b4908:	e7ca      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b490a:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b490c:	e7c8      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b490e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b4910:	2b00      	cmp	r3, #0
   b4912:	d13b      	bne.n	b498c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b4914:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b4916:	e7c3      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b4918:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b491a:	e7c1      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b491c:	b122      	cbz	r2, b4928 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b491e:	2a08      	cmp	r2, #8
   b4920:	f47f af40 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b4924:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b4926:	e7bb      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b4928:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b492a:	e7b9      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b492c:	2a03      	cmp	r2, #3
   b492e:	f47f af39 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b4932:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b4934:	e7b4      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b4936:	2a14      	cmp	r2, #20
   b4938:	d005      	beq.n	b4946 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b493a:	2a15      	cmp	r2, #21
   b493c:	f47f af32 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b4940:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b4944:	e7ac      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b4946:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b4948:	e7aa      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b494a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b494e:	e7a7      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b4950:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b4954:	e7a4      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b4956:	2a60      	cmp	r2, #96	; 0x60
   b4958:	d005      	beq.n	b4966 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b495a:	2a80      	cmp	r2, #128	; 0x80
   b495c:	f47f af22 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b4960:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b4964:	e79c      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b4966:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b496a:	e799      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b496c:	2a01      	cmp	r2, #1
   b496e:	d007      	beq.n	b4980 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b4970:	2a02      	cmp	r2, #2
   b4972:	d008      	beq.n	b4986 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b4974:	2a00      	cmp	r2, #0
   b4976:	f47f af15 	bne.w	b47a4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b497a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b497e:	e78f      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b4980:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b4984:	e78c      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b4986:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b498a:	e789      	b.n	b48a0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b498c:	2001      	movs	r0, #1
   b498e:	4770      	bx	lr

000b4990 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b4990:	290d      	cmp	r1, #13
   b4992:	d035      	beq.n	b4a00 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b4994:	d807      	bhi.n	b49a6 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b4996:	2902      	cmp	r1, #2
   b4998:	d019      	beq.n	b49ce <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b499a:	2906      	cmp	r1, #6
   b499c:	d02a      	beq.n	b49f4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b499e:	2901      	cmp	r1, #1
   b49a0:	d00d      	beq.n	b49be <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b49a2:	2000      	movs	r0, #0
}
   b49a4:	4770      	bx	lr
  switch (Class)
   b49a6:	2913      	cmp	r1, #19
   b49a8:	d02f      	beq.n	b4a0a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b49aa:	2928      	cmp	r1, #40	; 0x28
   b49ac:	d034      	beq.n	b4a18 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b49ae:	2910      	cmp	r1, #16
   b49b0:	d1f7      	bne.n	b49a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b49b2:	3a02      	subs	r2, #2
   b49b4:	b2d2      	uxtb	r2, r2
   b49b6:	2a13      	cmp	r2, #19
   b49b8:	d8f3      	bhi.n	b49a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b49ba:	4b1f      	ldr	r3, [pc, #124]	; (b4a38 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b49bc:	e004      	b.n	b49c8 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b49be:	3a01      	subs	r2, #1
   b49c0:	b2d2      	uxtb	r2, r2
   b49c2:	2a60      	cmp	r2, #96	; 0x60
   b49c4:	d8ed      	bhi.n	b49a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b49c6:	4b1d      	ldr	r3, [pc, #116]	; (b4a3c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b49c8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b49cc:	4770      	bx	lr
    switch (ID)
   b49ce:	2a34      	cmp	r2, #52	; 0x34
   b49d0:	d027      	beq.n	b4a22 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b49d2:	d807      	bhi.n	b49e4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b49d4:	2a13      	cmp	r2, #19
   b49d6:	d026      	beq.n	b4a26 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b49d8:	2a15      	cmp	r2, #21
   b49da:	bf14      	ite	ne
   b49dc:	2000      	movne	r0, #0
   b49de:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b49e2:	4770      	bx	lr
   b49e4:	2a72      	cmp	r2, #114	; 0x72
   b49e6:	d020      	beq.n	b4a2a <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b49e8:	2a73      	cmp	r2, #115	; 0x73
   b49ea:	bf14      	ite	ne
   b49ec:	2000      	movne	r0, #0
   b49ee:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b49f2:	4770      	bx	lr
    switch (ID)
   b49f4:	b1e2      	cbz	r2, b4a30 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b49f6:	2a08      	cmp	r2, #8
   b49f8:	bf14      	ite	ne
   b49fa:	2000      	movne	r0, #0
   b49fc:	2006      	moveq	r0, #6
   b49fe:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b4a00:	2a03      	cmp	r2, #3
   b4a02:	bf14      	ite	ne
   b4a04:	2000      	movne	r0, #0
   b4a06:	201c      	moveq	r0, #28
   b4a08:	4770      	bx	lr
    switch (ID)
   b4a0a:	2a60      	cmp	r2, #96	; 0x60
   b4a0c:	d012      	beq.n	b4a34 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b4a0e:	2a80      	cmp	r2, #128	; 0x80
   b4a10:	bf14      	ite	ne
   b4a12:	2000      	movne	r0, #0
   b4a14:	20a4      	moveq	r0, #164	; 0xa4
   b4a16:	4770      	bx	lr
    switch (ID)
   b4a18:	2a02      	cmp	r2, #2
   b4a1a:	d8c2      	bhi.n	b49a2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b4a1c:	4b08      	ldr	r3, [pc, #32]	; (b4a40 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b4a1e:	5c98      	ldrb	r0, [r3, r2]
   b4a20:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b4a22:	200c      	movs	r0, #12
   b4a24:	4770      	bx	lr
   b4a26:	2048      	movs	r0, #72	; 0x48
   b4a28:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b4a2a:	f44f 7004 	mov.w	r0, #528	; 0x210
   b4a2e:	4770      	bx	lr
   b4a30:	2014      	movs	r0, #20
   b4a32:	4770      	bx	lr
   b4a34:	2008      	movs	r0, #8
   b4a36:	4770      	bx	lr
   b4a38:	000c7482 	.word	0x000c7482
   b4a3c:	000c73c0 	.word	0x000c73c0
   b4a40:	000c74aa 	.word	0x000c74aa

000b4a44 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b4a44:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b4a46:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b4a4a:	07ca      	lsls	r2, r1, #31
   b4a4c:	d415      	bmi.n	b4a7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b4a4e:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b4a52:	4b59      	ldr	r3, [pc, #356]	; (b4bb8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b4a54:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b4a58:	429a      	cmp	r2, r3
   b4a5a:	d101      	bne.n	b4a60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b4a5c:	078b      	lsls	r3, r1, #30
   b4a5e:	d40c      	bmi.n	b4a7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b4a60:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b4a64:	2b47      	cmp	r3, #71	; 0x47
   b4a66:	d174      	bne.n	b4b52 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b4a68:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b4a6c:	f245 1441 	movw	r4, #20801	; 0x5141
   b4a70:	42a3      	cmp	r3, r4
   b4a72:	d104      	bne.n	b4a7e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b4a74:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b4a78:	d06b      	beq.n	b4b52 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b4a7a:	2001      	movs	r0, #1
   b4a7c:	e070      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b4a7e:	f245 1442 	movw	r4, #20802	; 0x5142
   b4a82:	42a3      	cmp	r3, r4
   b4a84:	d102      	bne.n	b4a8c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b4a86:	f011 0f08 	tst.w	r1, #8
   b4a8a:	e7f5      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b4a8c:	f245 3442 	movw	r4, #21314	; 0x5342
   b4a90:	42a3      	cmp	r3, r4
   b4a92:	d102      	bne.n	b4a9a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b4a94:	f011 0f10 	tst.w	r1, #16
   b4a98:	e7ee      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b4a9a:	f244 1447 	movw	r4, #16711	; 0x4147
   b4a9e:	42a3      	cmp	r3, r4
   b4aa0:	d102      	bne.n	b4aa8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b4aa2:	f011 0f20 	tst.w	r1, #32
   b4aa6:	e7e7      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b4aa8:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b4aac:	42a3      	cmp	r3, r4
   b4aae:	d102      	bne.n	b4ab6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b4ab0:	f011 0f40 	tst.w	r1, #64	; 0x40
   b4ab4:	e7e0      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b4ab6:	f245 144c 	movw	r4, #20812	; 0x514c
   b4aba:	42a3      	cmp	r3, r4
   b4abc:	d102      	bne.n	b4ac4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b4abe:	f011 0f80 	tst.w	r1, #128	; 0x80
   b4ac2:	e7d9      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b4ac4:	f245 114e 	movw	r1, #20814	; 0x514e
   b4ac8:	428b      	cmp	r3, r1
   b4aca:	d104      	bne.n	b4ad6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b4acc:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4ad0:	f013 0f01 	tst.w	r3, #1
   b4ad4:	e7d0      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b4ad6:	f245 314e 	movw	r1, #21326	; 0x534e
   b4ada:	428b      	cmp	r3, r1
   b4adc:	d104      	bne.n	b4ae8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b4ade:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4ae2:	f013 0f02 	tst.w	r3, #2
   b4ae6:	e7c7      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b4ae8:	f245 1150 	movw	r1, #20816	; 0x5150
   b4aec:	428b      	cmp	r3, r1
   b4aee:	d104      	bne.n	b4afa <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b4af0:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4af4:	f013 0f04 	tst.w	r3, #4
   b4af8:	e7be      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b4afa:	f245 1151 	movw	r1, #20817	; 0x5151
   b4afe:	428b      	cmp	r3, r1
   b4b00:	d104      	bne.n	b4b0c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b4b02:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4b06:	f013 0f08 	tst.w	r3, #8
   b4b0a:	e7b5      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b4b0c:	f245 3152 	movw	r1, #21330	; 0x5352
   b4b10:	428b      	cmp	r3, r1
   b4b12:	d104      	bne.n	b4b1e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b4b14:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4b18:	f013 0f10 	tst.w	r3, #16
   b4b1c:	e7ac      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b4b1e:	f244 1153 	movw	r1, #16723	; 0x4153
   b4b22:	428b      	cmp	r3, r1
   b4b24:	d104      	bne.n	b4b30 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b4b26:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4b2a:	f013 0f20 	tst.w	r3, #32
   b4b2e:	e7a3      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b4b30:	f245 4153 	movw	r1, #21587	; 0x5453
   b4b34:	428b      	cmp	r3, r1
   b4b36:	d104      	bne.n	b4b42 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b4b38:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b4b3c:	f013 0f40 	tst.w	r3, #64	; 0x40
   b4b40:	e79a      	b.n	b4a78 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b4b42:	f245 6153 	movw	r1, #22099	; 0x5653
   b4b46:	428b      	cmp	r3, r1
   b4b48:	d103      	bne.n	b4b52 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b4b4a:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b4b4e:	2b00      	cmp	r3, #0
   b4b50:	db93      	blt.n	b4a7a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b4b52:	4b1a      	ldr	r3, [pc, #104]	; (b4bbc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b4b54:	429a      	cmp	r2, r3
   b4b56:	d104      	bne.n	b4b62 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b4b58:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4b5c:	f000 0001 	and.w	r0, r0, #1
}
   b4b60:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b4b62:	4b17      	ldr	r3, [pc, #92]	; (b4bc0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b4b64:	429a      	cmp	r2, r3
   b4b66:	d104      	bne.n	b4b72 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b4b68:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4b6c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b4b70:	e7f6      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b4b72:	4b14      	ldr	r3, [pc, #80]	; (b4bc4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b4b74:	429a      	cmp	r2, r3
   b4b76:	d104      	bne.n	b4b82 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b4b78:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4b7c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b4b80:	e7ee      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b4b82:	4b11      	ldr	r3, [pc, #68]	; (b4bc8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b4b84:	429a      	cmp	r2, r3
   b4b86:	d104      	bne.n	b4b92 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b4b88:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4b8c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4b90:	e7e6      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b4b92:	4b0e      	ldr	r3, [pc, #56]	; (b4bcc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b4b94:	429a      	cmp	r2, r3
   b4b96:	d104      	bne.n	b4ba2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b4b98:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4b9c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b4ba0:	e7de      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b4ba2:	4b0b      	ldr	r3, [pc, #44]	; (b4bd0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b4ba4:	429a      	cmp	r2, r3
   b4ba6:	d104      	bne.n	b4bb2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b4ba8:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b4bac:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b4bb0:	e7d6      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b4bb2:	2000      	movs	r0, #0
   b4bb4:	e7d4      	b.n	b4b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b4bb6:	bf00      	nop
   b4bb8:	4d544400 	.word	0x4d544400
   b4bbc:	4d4c5200 	.word	0x4d4c5200
   b4bc0:	434d5200 	.word	0x434d5200
   b4bc4:	54585400 	.word	0x54585400
   b4bc8:	574c5600 	.word	0x574c5600
   b4bcc:	47545600 	.word	0x47545600
   b4bd0:	41445a00 	.word	0x41445a00

000b4bd4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b4bd4:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b4bd8:	2b2a      	cmp	r3, #42	; 0x2a
   b4bda:	d157      	bne.n	b4c8c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b4bdc:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b4be0:	2b47      	cmp	r3, #71	; 0x47
   b4be2:	d153      	bne.n	b4c8c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b4be4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b4be8:	4a29      	ldr	r2, [pc, #164]	; (b4c90 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b4bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b4bee:	4293      	cmp	r3, r2
   b4bf0:	d011      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b4bf2:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b4bf6:	2a47      	cmp	r2, #71	; 0x47
   b4bf8:	d11a      	bne.n	b4c30 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b4bfa:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b4bfe:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b4c02:	3941      	subs	r1, #65	; 0x41
   b4c04:	b289      	uxth	r1, r1
   b4c06:	2910      	cmp	r1, #16
   b4c08:	d907      	bls.n	b4c1a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b4c0a:	f022 0110 	bic.w	r1, r2, #16
   b4c0e:	f245 3042 	movw	r0, #21314	; 0x5342
   b4c12:	4281      	cmp	r1, r0
   b4c14:	d129      	bne.n	b4c6a <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b4c16:	2001      	movs	r0, #1
}
   b4c18:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b4c1a:	481e      	ldr	r0, [pc, #120]	; (b4c94 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b4c1c:	fa20 f101 	lsr.w	r1, r0, r1
   b4c20:	07c9      	lsls	r1, r1, #31
   b4c22:	d4f8      	bmi.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b4c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b4c28:	f245 4153 	movw	r1, #21587	; 0x5453
   b4c2c:	428a      	cmp	r2, r1
   b4c2e:	d0f2      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b4c30:	4a19      	ldr	r2, [pc, #100]	; (b4c98 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b4c32:	4293      	cmp	r3, r2
   b4c34:	d0ef      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b4c36:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b4c3a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b4c3e:	4293      	cmp	r3, r2
   b4c40:	d0e9      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b4c42:	4a16      	ldr	r2, [pc, #88]	; (b4c9c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b4c44:	4293      	cmp	r3, r2
   b4c46:	d0e6      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b4c48:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b4c4c:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b4c50:	4293      	cmp	r3, r2
   b4c52:	d0e0      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b4c54:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b4c58:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b4c5c:	4293      	cmp	r3, r2
   b4c5e:	d0da      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b4c60:	480f      	ldr	r0, [pc, #60]	; (b4ca0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b4c62:	1a1b      	subs	r3, r3, r0
   b4c64:	4258      	negs	r0, r3
   b4c66:	4158      	adcs	r0, r3
   b4c68:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b4c6a:	f244 1147 	movw	r1, #16711	; 0x4147
   b4c6e:	428a      	cmp	r2, r1
   b4c70:	d0d1      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b4c72:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b4c76:	428a      	cmp	r2, r1
   b4c78:	d0cd      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b4c7a:	f245 314e 	movw	r1, #21326	; 0x534e
   b4c7e:	428a      	cmp	r2, r1
   b4c80:	d0c9      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b4c82:	f244 1153 	movw	r1, #16723	; 0x4153
   b4c86:	428a      	cmp	r2, r1
   b4c88:	d0c5      	beq.n	b4c16 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b4c8a:	e7cb      	b.n	b4c24 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b4c8c:	2000      	movs	r0, #0
   b4c8e:	4770      	bx	lr
   b4c90:	4d544400 	.word	0x4d544400
   b4c94:	0001a803 	.word	0x0001a803
   b4c98:	4d4c5200 	.word	0x4d4c5200
   b4c9c:	54585400 	.word	0x54585400
   b4ca0:	41445a00 	.word	0x41445a00

000b4ca4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b4ca4:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b4ca6:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b4caa:	07ca      	lsls	r2, r1, #31
   b4cac:	d415      	bmi.n	b4cda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b4cae:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b4cb2:	4b59      	ldr	r3, [pc, #356]	; (b4e18 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b4cb4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b4cb8:	429a      	cmp	r2, r3
   b4cba:	d101      	bne.n	b4cc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b4cbc:	078b      	lsls	r3, r1, #30
   b4cbe:	d40c      	bmi.n	b4cda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b4cc0:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b4cc4:	2b47      	cmp	r3, #71	; 0x47
   b4cc6:	d174      	bne.n	b4db2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b4cc8:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b4ccc:	f245 1441 	movw	r4, #20801	; 0x5141
   b4cd0:	42a3      	cmp	r3, r4
   b4cd2:	d104      	bne.n	b4cde <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b4cd4:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b4cd8:	d06b      	beq.n	b4db2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b4cda:	2001      	movs	r0, #1
   b4cdc:	e070      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b4cde:	f245 1442 	movw	r4, #20802	; 0x5142
   b4ce2:	42a3      	cmp	r3, r4
   b4ce4:	d102      	bne.n	b4cec <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b4ce6:	f011 0f08 	tst.w	r1, #8
   b4cea:	e7f5      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b4cec:	f245 3442 	movw	r4, #21314	; 0x5342
   b4cf0:	42a3      	cmp	r3, r4
   b4cf2:	d102      	bne.n	b4cfa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b4cf4:	f011 0f10 	tst.w	r1, #16
   b4cf8:	e7ee      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b4cfa:	f244 1447 	movw	r4, #16711	; 0x4147
   b4cfe:	42a3      	cmp	r3, r4
   b4d00:	d102      	bne.n	b4d08 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b4d02:	f011 0f20 	tst.w	r1, #32
   b4d06:	e7e7      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b4d08:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b4d0c:	42a3      	cmp	r3, r4
   b4d0e:	d102      	bne.n	b4d16 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b4d10:	f011 0f40 	tst.w	r1, #64	; 0x40
   b4d14:	e7e0      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b4d16:	f245 144c 	movw	r4, #20812	; 0x514c
   b4d1a:	42a3      	cmp	r3, r4
   b4d1c:	d102      	bne.n	b4d24 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b4d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
   b4d22:	e7d9      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b4d24:	f245 114e 	movw	r1, #20814	; 0x514e
   b4d28:	428b      	cmp	r3, r1
   b4d2a:	d104      	bne.n	b4d36 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b4d2c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d30:	f013 0f01 	tst.w	r3, #1
   b4d34:	e7d0      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b4d36:	f245 314e 	movw	r1, #21326	; 0x534e
   b4d3a:	428b      	cmp	r3, r1
   b4d3c:	d104      	bne.n	b4d48 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b4d3e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d42:	f013 0f02 	tst.w	r3, #2
   b4d46:	e7c7      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b4d48:	f245 1150 	movw	r1, #20816	; 0x5150
   b4d4c:	428b      	cmp	r3, r1
   b4d4e:	d104      	bne.n	b4d5a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b4d50:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d54:	f013 0f04 	tst.w	r3, #4
   b4d58:	e7be      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b4d5a:	f245 1151 	movw	r1, #20817	; 0x5151
   b4d5e:	428b      	cmp	r3, r1
   b4d60:	d104      	bne.n	b4d6c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b4d62:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d66:	f013 0f08 	tst.w	r3, #8
   b4d6a:	e7b5      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b4d6c:	f245 3152 	movw	r1, #21330	; 0x5352
   b4d70:	428b      	cmp	r3, r1
   b4d72:	d104      	bne.n	b4d7e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b4d74:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d78:	f013 0f10 	tst.w	r3, #16
   b4d7c:	e7ac      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b4d7e:	f244 1153 	movw	r1, #16723	; 0x4153
   b4d82:	428b      	cmp	r3, r1
   b4d84:	d104      	bne.n	b4d90 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b4d86:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d8a:	f013 0f20 	tst.w	r3, #32
   b4d8e:	e7a3      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b4d90:	f245 4153 	movw	r1, #21587	; 0x5453
   b4d94:	428b      	cmp	r3, r1
   b4d96:	d104      	bne.n	b4da2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b4d98:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b4d9c:	f013 0f40 	tst.w	r3, #64	; 0x40
   b4da0:	e79a      	b.n	b4cd8 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b4da2:	f245 6153 	movw	r1, #22099	; 0x5653
   b4da6:	428b      	cmp	r3, r1
   b4da8:	d103      	bne.n	b4db2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b4daa:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b4dae:	2b00      	cmp	r3, #0
   b4db0:	db93      	blt.n	b4cda <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b4db2:	4b1a      	ldr	r3, [pc, #104]	; (b4e1c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b4db4:	429a      	cmp	r2, r3
   b4db6:	d104      	bne.n	b4dc2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b4db8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4dbc:	f000 0001 	and.w	r0, r0, #1
}
   b4dc0:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b4dc2:	4b17      	ldr	r3, [pc, #92]	; (b4e20 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b4dc4:	429a      	cmp	r2, r3
   b4dc6:	d104      	bne.n	b4dd2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b4dc8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4dcc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b4dd0:	e7f6      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b4dd2:	4b14      	ldr	r3, [pc, #80]	; (b4e24 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b4dd4:	429a      	cmp	r2, r3
   b4dd6:	d104      	bne.n	b4de2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b4dd8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4ddc:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b4de0:	e7ee      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b4de2:	4b11      	ldr	r3, [pc, #68]	; (b4e28 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b4de4:	429a      	cmp	r2, r3
   b4de6:	d104      	bne.n	b4df2 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b4de8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4dec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4df0:	e7e6      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b4df2:	4b0e      	ldr	r3, [pc, #56]	; (b4e2c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b4df4:	429a      	cmp	r2, r3
   b4df6:	d104      	bne.n	b4e02 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b4df8:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4dfc:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b4e00:	e7de      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b4e02:	4b0b      	ldr	r3, [pc, #44]	; (b4e30 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b4e04:	429a      	cmp	r2, r3
   b4e06:	d104      	bne.n	b4e12 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b4e08:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b4e0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b4e10:	e7d6      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b4e12:	2000      	movs	r0, #0
   b4e14:	e7d4      	b.n	b4dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b4e16:	bf00      	nop
   b4e18:	4d544400 	.word	0x4d544400
   b4e1c:	4d4c5200 	.word	0x4d4c5200
   b4e20:	434d5200 	.word	0x434d5200
   b4e24:	54585400 	.word	0x54585400
   b4e28:	574c5600 	.word	0x574c5600
   b4e2c:	47545600 	.word	0x47545600
   b4e30:	41445a00 	.word	0x41445a00

000b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b4e34:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b4e38:	b110      	cbz	r0, b4e40 <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b4e3a:	6803      	ldr	r3, [r0, #0]
   b4e3c:	689b      	ldr	r3, [r3, #8]
   b4e3e:	4718      	bx	r3
}
   b4e40:	4770      	bx	lr
	...

000b4e44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b4e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b4e46:	4b3d      	ldr	r3, [pc, #244]	; (b4f3c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b4e48:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4e4a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b4e4e:	6818      	ldr	r0, [r3, #0]
   b4e50:	9000      	str	r0, [sp, #0]
   b4e52:	889b      	ldrh	r3, [r3, #4]
   b4e54:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4e58:	2205      	movs	r2, #5
   b4e5a:	4629      	mov	r1, r5
   b4e5c:	4668      	mov	r0, sp
   b4e5e:	f00f fb4b 	bl	c44f8 <memcmp>
   b4e62:	b928      	cbnz	r0, b4e70 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b4e64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b4e68:	b113      	cbz	r3, b4e70 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b4e6a:	2001      	movs	r0, #1
}
   b4e6c:	b003      	add	sp, #12
   b4e6e:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b4e70:	4933      	ldr	r1, [pc, #204]	; (b4f40 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b4e72:	4668      	mov	r0, sp
   b4e74:	f00f fbde 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4e78:	2205      	movs	r2, #5
   b4e7a:	4629      	mov	r1, r5
   b4e7c:	4668      	mov	r0, sp
   b4e7e:	f00f fb3b 	bl	c44f8 <memcmp>
   b4e82:	b918      	cbnz	r0, b4e8c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b4e84:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b4e88:	2b00      	cmp	r3, #0
   b4e8a:	d1ee      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b4e8c:	492d      	ldr	r1, [pc, #180]	; (b4f44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b4e8e:	4668      	mov	r0, sp
   b4e90:	f00f fbd0 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4e94:	2205      	movs	r2, #5
   b4e96:	4629      	mov	r1, r5
   b4e98:	4668      	mov	r0, sp
   b4e9a:	f00f fb2d 	bl	c44f8 <memcmp>
   b4e9e:	b918      	cbnz	r0, b4ea8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b4ea0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b4ea4:	2b00      	cmp	r3, #0
   b4ea6:	d1e0      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b4ea8:	4927      	ldr	r1, [pc, #156]	; (b4f48 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b4eaa:	4668      	mov	r0, sp
   b4eac:	f00f fbc2 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4eb0:	2205      	movs	r2, #5
   b4eb2:	4629      	mov	r1, r5
   b4eb4:	4668      	mov	r0, sp
   b4eb6:	f00f fb1f 	bl	c44f8 <memcmp>
   b4eba:	b918      	cbnz	r0, b4ec4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b4ebc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b4ec0:	2b00      	cmp	r3, #0
   b4ec2:	d1d2      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b4ec4:	4921      	ldr	r1, [pc, #132]	; (b4f4c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b4ec6:	4668      	mov	r0, sp
   b4ec8:	f00f fbb4 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4ecc:	2205      	movs	r2, #5
   b4ece:	4629      	mov	r1, r5
   b4ed0:	4668      	mov	r0, sp
   b4ed2:	f00f fb11 	bl	c44f8 <memcmp>
   b4ed6:	b918      	cbnz	r0, b4ee0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b4ed8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b4edc:	2b00      	cmp	r3, #0
   b4ede:	d1c4      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b4ee0:	491b      	ldr	r1, [pc, #108]	; (b4f50 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b4ee2:	4668      	mov	r0, sp
   b4ee4:	f00f fba6 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4ee8:	2205      	movs	r2, #5
   b4eea:	4629      	mov	r1, r5
   b4eec:	4668      	mov	r0, sp
   b4eee:	f00f fb03 	bl	c44f8 <memcmp>
   b4ef2:	b918      	cbnz	r0, b4efc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b4ef4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b4ef8:	2b00      	cmp	r3, #0
   b4efa:	d1b6      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b4efc:	4915      	ldr	r1, [pc, #84]	; (b4f54 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b4efe:	4668      	mov	r0, sp
   b4f00:	f00f fb98 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4f04:	2205      	movs	r2, #5
   b4f06:	4629      	mov	r1, r5
   b4f08:	4668      	mov	r0, sp
   b4f0a:	f00f faf5 	bl	c44f8 <memcmp>
   b4f0e:	b918      	cbnz	r0, b4f18 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b4f10:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b4f14:	2b00      	cmp	r3, #0
   b4f16:	d1a8      	bne.n	b4e6a <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b4f18:	490f      	ldr	r1, [pc, #60]	; (b4f58 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b4f1a:	4668      	mov	r0, sp
   b4f1c:	f00f fb8a 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4f20:	2205      	movs	r2, #5
   b4f22:	4629      	mov	r1, r5
   b4f24:	4668      	mov	r0, sp
   b4f26:	f00f fae7 	bl	c44f8 <memcmp>
   b4f2a:	b928      	cbnz	r0, b4f38 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b4f2c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b4f30:	3800      	subs	r0, #0
   b4f32:	bf18      	it	ne
   b4f34:	2001      	movne	r0, #1
   b4f36:	e799      	b.n	b4e6c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b4f38:	2000      	movs	r0, #0
   b4f3a:	e797      	b.n	b4e6c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b4f3c:	000c6804 	.word	0x000c6804
   b4f40:	000c67da 	.word	0x000c67da
   b4f44:	000c67e0 	.word	0x000c67e0
   b4f48:	000c67e6 	.word	0x000c67e6
   b4f4c:	000c67ec 	.word	0x000c67ec
   b4f50:	000c67f2 	.word	0x000c67f2
   b4f54:	000c67f8 	.word	0x000c67f8
   b4f58:	000c67fe 	.word	0x000c67fe

000b4f5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b4f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b4f5e:	4b62      	ldr	r3, [pc, #392]	; (b50e8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b4f60:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4f62:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b4f66:	6818      	ldr	r0, [r3, #0]
   b4f68:	9000      	str	r0, [sp, #0]
   b4f6a:	889b      	ldrh	r3, [r3, #4]
   b4f6c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4f70:	2205      	movs	r2, #5
   b4f72:	4629      	mov	r1, r5
   b4f74:	4668      	mov	r0, sp
   b4f76:	f00f fabf 	bl	c44f8 <memcmp>
   b4f7a:	b978      	cbnz	r0, b4f9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b4f7c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b4f80:	b163      	cbz	r3, b4f9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b4f82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b4f86:	b14a      	cbz	r2, b4f9c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b4f88:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b4f8c:	2a00      	cmp	r2, #0
   b4f8e:	f040 80a3 	bne.w	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b4f92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b4f96:	2b00      	cmp	r3, #0
   b4f98:	f040 809e 	bne.w	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b4f9c:	4953      	ldr	r1, [pc, #332]	; (b50ec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b4f9e:	4668      	mov	r0, sp
   b4fa0:	f00f fb48 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4fa4:	2205      	movs	r2, #5
   b4fa6:	4629      	mov	r1, r5
   b4fa8:	4668      	mov	r0, sp
   b4faa:	f00f faa5 	bl	c44f8 <memcmp>
   b4fae:	b978      	cbnz	r0, b4fd0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b4fb0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b4fb4:	b163      	cbz	r3, b4fd0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b4fb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b4fba:	b14a      	cbz	r2, b4fd0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b4fbc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b4fc0:	2a00      	cmp	r2, #0
   b4fc2:	f040 8089 	bne.w	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b4fc6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b4fca:	2b00      	cmp	r3, #0
   b4fcc:	f040 8084 	bne.w	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b4fd0:	4947      	ldr	r1, [pc, #284]	; (b50f0 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b4fd2:	4668      	mov	r0, sp
   b4fd4:	f00f fb2e 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b4fd8:	2205      	movs	r2, #5
   b4fda:	4629      	mov	r1, r5
   b4fdc:	4668      	mov	r0, sp
   b4fde:	f00f fa8b 	bl	c44f8 <memcmp>
   b4fe2:	b968      	cbnz	r0, b5000 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b4fe4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b4fe8:	b153      	cbz	r3, b5000 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b4fea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b4fee:	b13a      	cbz	r2, b5000 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b4ff0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b4ff4:	2a00      	cmp	r2, #0
   b4ff6:	d16f      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b4ff8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b4ffc:	2b00      	cmp	r3, #0
   b4ffe:	d16b      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b5000:	493c      	ldr	r1, [pc, #240]	; (b50f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b5002:	4668      	mov	r0, sp
   b5004:	f00f fb16 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5008:	2205      	movs	r2, #5
   b500a:	4629      	mov	r1, r5
   b500c:	4668      	mov	r0, sp
   b500e:	f00f fa73 	bl	c44f8 <memcmp>
   b5012:	b968      	cbnz	r0, b5030 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b5014:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b5018:	b153      	cbz	r3, b5030 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b501a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b501e:	b13a      	cbz	r2, b5030 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b5020:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b5024:	2a00      	cmp	r2, #0
   b5026:	d157      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b5028:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b502c:	2b00      	cmp	r3, #0
   b502e:	d153      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b5030:	4931      	ldr	r1, [pc, #196]	; (b50f8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b5032:	4668      	mov	r0, sp
   b5034:	f00f fafe 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5038:	2205      	movs	r2, #5
   b503a:	4629      	mov	r1, r5
   b503c:	4668      	mov	r0, sp
   b503e:	f00f fa5b 	bl	c44f8 <memcmp>
   b5042:	b968      	cbnz	r0, b5060 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b5044:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b5048:	b153      	cbz	r3, b5060 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b504a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b504e:	b13a      	cbz	r2, b5060 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b5050:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b5054:	2a00      	cmp	r2, #0
   b5056:	d13f      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b5058:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b505c:	2b00      	cmp	r3, #0
   b505e:	d13b      	bne.n	b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b5060:	4926      	ldr	r1, [pc, #152]	; (b50fc <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b5062:	4668      	mov	r0, sp
   b5064:	f00f fae6 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5068:	2205      	movs	r2, #5
   b506a:	4629      	mov	r1, r5
   b506c:	4668      	mov	r0, sp
   b506e:	f00f fa43 	bl	c44f8 <memcmp>
   b5072:	b958      	cbnz	r0, b508c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b5074:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b5078:	b143      	cbz	r3, b508c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b507a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b507e:	b12a      	cbz	r2, b508c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b5080:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b5084:	bb42      	cbnz	r2, b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b5086:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b508a:	bb2b      	cbnz	r3, b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b508c:	491c      	ldr	r1, [pc, #112]	; (b5100 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b508e:	4668      	mov	r0, sp
   b5090:	f00f fad0 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5094:	2205      	movs	r2, #5
   b5096:	4629      	mov	r1, r5
   b5098:	4668      	mov	r0, sp
   b509a:	f00f fa2d 	bl	c44f8 <memcmp>
   b509e:	b940      	cbnz	r0, b50b2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b50a0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b50a4:	b12b      	cbz	r3, b50b2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b50a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b50a8:	b11a      	cbz	r2, b50b2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b50aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b50ac:	b9a2      	cbnz	r2, b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b50ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b50b0:	b993      	cbnz	r3, b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b50b2:	4914      	ldr	r1, [pc, #80]	; (b5104 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b50b4:	4668      	mov	r0, sp
   b50b6:	f00f fabd 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b50ba:	2205      	movs	r2, #5
   b50bc:	4629      	mov	r1, r5
   b50be:	4668      	mov	r0, sp
   b50c0:	f00f fa1a 	bl	c44f8 <memcmp>
   b50c4:	b958      	cbnz	r0, b50de <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b50c6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b50ca:	b153      	cbz	r3, b50e2 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b50cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b50ce:	b120      	cbz	r0, b50da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b50d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b50d2:	b90a      	cbnz	r2, b50d8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b50d4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b50d6:	b100      	cbz	r0, b50da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b50d8:	2001      	movs	r0, #1
}
   b50da:	b003      	add	sp, #12
   b50dc:	bd30      	pop	{r4, r5, pc}
  return false;
   b50de:	2000      	movs	r0, #0
   b50e0:	e7fb      	b.n	b50da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b50e2:	4618      	mov	r0, r3
   b50e4:	e7f9      	b.n	b50da <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b50e6:	bf00      	nop
   b50e8:	000c6804 	.word	0x000c6804
   b50ec:	000c67da 	.word	0x000c67da
   b50f0:	000c67e0 	.word	0x000c67e0
   b50f4:	000c67e6 	.word	0x000c67e6
   b50f8:	000c67ec 	.word	0x000c67ec
   b50fc:	000c67f2 	.word	0x000c67f2
   b5100:	000c67f8 	.word	0x000c67f8
   b5104:	000c67fe 	.word	0x000c67fe

000b5108 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b5108:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b510a:	4b38      	ldr	r3, [pc, #224]	; (b51ec <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b510c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b510e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b5112:	6818      	ldr	r0, [r3, #0]
   b5114:	9000      	str	r0, [sp, #0]
   b5116:	889b      	ldrh	r3, [r3, #4]
   b5118:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b511c:	2205      	movs	r2, #5
   b511e:	4629      	mov	r1, r5
   b5120:	4668      	mov	r0, sp
   b5122:	f00f f9e9 	bl	c44f8 <memcmp>
   b5126:	b920      	cbnz	r0, b5132 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b5128:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b512c:	3001      	adds	r0, #1
}
   b512e:	b003      	add	sp, #12
   b5130:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b5132:	492f      	ldr	r1, [pc, #188]	; (b51f0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b5134:	4668      	mov	r0, sp
   b5136:	f00f fa7d 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b513a:	2205      	movs	r2, #5
   b513c:	4629      	mov	r1, r5
   b513e:	4668      	mov	r0, sp
   b5140:	f00f f9da 	bl	c44f8 <memcmp>
   b5144:	b910      	cbnz	r0, b514c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b5146:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b514a:	e7ef      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b514c:	4929      	ldr	r1, [pc, #164]	; (b51f4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b514e:	4668      	mov	r0, sp
   b5150:	f00f fa70 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5154:	2205      	movs	r2, #5
   b5156:	4629      	mov	r1, r5
   b5158:	4668      	mov	r0, sp
   b515a:	f00f f9cd 	bl	c44f8 <memcmp>
   b515e:	b910      	cbnz	r0, b5166 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b5160:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b5164:	e7e2      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b5166:	4924      	ldr	r1, [pc, #144]	; (b51f8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b5168:	4668      	mov	r0, sp
   b516a:	f00f fa63 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b516e:	2205      	movs	r2, #5
   b5170:	4629      	mov	r1, r5
   b5172:	4668      	mov	r0, sp
   b5174:	f00f f9c0 	bl	c44f8 <memcmp>
   b5178:	b910      	cbnz	r0, b5180 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b517a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b517e:	e7d5      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b5180:	491e      	ldr	r1, [pc, #120]	; (b51fc <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b5182:	4668      	mov	r0, sp
   b5184:	f00f fa56 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5188:	2205      	movs	r2, #5
   b518a:	4629      	mov	r1, r5
   b518c:	4668      	mov	r0, sp
   b518e:	f00f f9b3 	bl	c44f8 <memcmp>
   b5192:	b910      	cbnz	r0, b519a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b5194:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b5198:	e7c8      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b519a:	4919      	ldr	r1, [pc, #100]	; (b5200 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b519c:	4668      	mov	r0, sp
   b519e:	f00f fa49 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b51a2:	2205      	movs	r2, #5
   b51a4:	4629      	mov	r1, r5
   b51a6:	4668      	mov	r0, sp
   b51a8:	f00f f9a6 	bl	c44f8 <memcmp>
   b51ac:	b910      	cbnz	r0, b51b4 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b51ae:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b51b2:	e7bb      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b51b4:	4913      	ldr	r1, [pc, #76]	; (b5204 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b51b6:	4668      	mov	r0, sp
   b51b8:	f00f fa3c 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b51bc:	2205      	movs	r2, #5
   b51be:	4629      	mov	r1, r5
   b51c0:	4668      	mov	r0, sp
   b51c2:	f00f f999 	bl	c44f8 <memcmp>
   b51c6:	b910      	cbnz	r0, b51ce <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b51c8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b51cc:	e7ae      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b51ce:	490e      	ldr	r1, [pc, #56]	; (b5208 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b51d0:	4668      	mov	r0, sp
   b51d2:	f00f fa2f 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b51d6:	2205      	movs	r2, #5
   b51d8:	4629      	mov	r1, r5
   b51da:	4668      	mov	r0, sp
   b51dc:	f00f f98c 	bl	c44f8 <memcmp>
   b51e0:	b910      	cbnz	r0, b51e8 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b51e2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b51e6:	e7a1      	b.n	b512c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b51e8:	2000      	movs	r0, #0
   b51ea:	e7a0      	b.n	b512e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b51ec:	000c6804 	.word	0x000c6804
   b51f0:	000c67da 	.word	0x000c67da
   b51f4:	000c67e0 	.word	0x000c67e0
   b51f8:	000c67e6 	.word	0x000c67e6
   b51fc:	000c67ec 	.word	0x000c67ec
   b5200:	000c67f2 	.word	0x000c67f2
   b5204:	000c67f8 	.word	0x000c67f8
   b5208:	000c67fe 	.word	0x000c67fe

000b520c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b520c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b520e:	4b38      	ldr	r3, [pc, #224]	; (b52f0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b5210:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5212:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b5216:	6818      	ldr	r0, [r3, #0]
   b5218:	9000      	str	r0, [sp, #0]
   b521a:	889b      	ldrh	r3, [r3, #4]
   b521c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5220:	2205      	movs	r2, #5
   b5222:	4629      	mov	r1, r5
   b5224:	4668      	mov	r0, sp
   b5226:	f00f f967 	bl	c44f8 <memcmp>
   b522a:	b920      	cbnz	r0, b5236 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b522c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b5230:	3002      	adds	r0, #2
}
   b5232:	b003      	add	sp, #12
   b5234:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b5236:	492f      	ldr	r1, [pc, #188]	; (b52f4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b5238:	4668      	mov	r0, sp
   b523a:	f00f f9fb 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b523e:	2205      	movs	r2, #5
   b5240:	4629      	mov	r1, r5
   b5242:	4668      	mov	r0, sp
   b5244:	f00f f958 	bl	c44f8 <memcmp>
   b5248:	b910      	cbnz	r0, b5250 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b524a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b524e:	e7ef      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b5250:	4929      	ldr	r1, [pc, #164]	; (b52f8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b5252:	4668      	mov	r0, sp
   b5254:	f00f f9ee 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5258:	2205      	movs	r2, #5
   b525a:	4629      	mov	r1, r5
   b525c:	4668      	mov	r0, sp
   b525e:	f00f f94b 	bl	c44f8 <memcmp>
   b5262:	b910      	cbnz	r0, b526a <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b5264:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b5268:	e7e2      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b526a:	4924      	ldr	r1, [pc, #144]	; (b52fc <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b526c:	4668      	mov	r0, sp
   b526e:	f00f f9e1 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5272:	2205      	movs	r2, #5
   b5274:	4629      	mov	r1, r5
   b5276:	4668      	mov	r0, sp
   b5278:	f00f f93e 	bl	c44f8 <memcmp>
   b527c:	b910      	cbnz	r0, b5284 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b527e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b5282:	e7d5      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b5284:	491e      	ldr	r1, [pc, #120]	; (b5300 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b5286:	4668      	mov	r0, sp
   b5288:	f00f f9d4 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b528c:	2205      	movs	r2, #5
   b528e:	4629      	mov	r1, r5
   b5290:	4668      	mov	r0, sp
   b5292:	f00f f931 	bl	c44f8 <memcmp>
   b5296:	b910      	cbnz	r0, b529e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b5298:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b529c:	e7c8      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b529e:	4919      	ldr	r1, [pc, #100]	; (b5304 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b52a0:	4668      	mov	r0, sp
   b52a2:	f00f f9c7 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b52a6:	2205      	movs	r2, #5
   b52a8:	4629      	mov	r1, r5
   b52aa:	4668      	mov	r0, sp
   b52ac:	f00f f924 	bl	c44f8 <memcmp>
   b52b0:	b910      	cbnz	r0, b52b8 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b52b2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b52b6:	e7bb      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b52b8:	4913      	ldr	r1, [pc, #76]	; (b5308 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b52ba:	4668      	mov	r0, sp
   b52bc:	f00f f9ba 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b52c0:	2205      	movs	r2, #5
   b52c2:	4629      	mov	r1, r5
   b52c4:	4668      	mov	r0, sp
   b52c6:	f00f f917 	bl	c44f8 <memcmp>
   b52ca:	b910      	cbnz	r0, b52d2 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b52cc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b52d0:	e7ae      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b52d2:	490e      	ldr	r1, [pc, #56]	; (b530c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b52d4:	4668      	mov	r0, sp
   b52d6:	f00f f9ad 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b52da:	2205      	movs	r2, #5
   b52dc:	4629      	mov	r1, r5
   b52de:	4668      	mov	r0, sp
   b52e0:	f00f f90a 	bl	c44f8 <memcmp>
   b52e4:	b910      	cbnz	r0, b52ec <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b52e6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b52ea:	e7a1      	b.n	b5230 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b52ec:	2000      	movs	r0, #0
   b52ee:	e7a0      	b.n	b5232 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b52f0:	000c6804 	.word	0x000c6804
   b52f4:	000c67da 	.word	0x000c67da
   b52f8:	000c67e0 	.word	0x000c67e0
   b52fc:	000c67e6 	.word	0x000c67e6
   b5300:	000c67ec 	.word	0x000c67ec
   b5304:	000c67f2 	.word	0x000c67f2
   b5308:	000c67f8 	.word	0x000c67f8
   b530c:	000c67fe 	.word	0x000c67fe

000b5310 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b5310:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b5312:	4b39      	ldr	r3, [pc, #228]	; (b53f8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b5314:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5316:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b531a:	6818      	ldr	r0, [r3, #0]
   b531c:	9000      	str	r0, [sp, #0]
   b531e:	889b      	ldrh	r3, [r3, #4]
   b5320:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5324:	2205      	movs	r2, #5
   b5326:	4629      	mov	r1, r5
   b5328:	4668      	mov	r0, sp
   b532a:	f00f f8e5 	bl	c44f8 <memcmp>
   b532e:	b920      	cbnz	r0, b533a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b5330:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b5334:	3066      	adds	r0, #102	; 0x66
}
   b5336:	b003      	add	sp, #12
   b5338:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b533a:	4930      	ldr	r1, [pc, #192]	; (b53fc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b533c:	4668      	mov	r0, sp
   b533e:	f00f f979 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5342:	2205      	movs	r2, #5
   b5344:	4629      	mov	r1, r5
   b5346:	4668      	mov	r0, sp
   b5348:	f00f f8d6 	bl	c44f8 <memcmp>
   b534c:	b910      	cbnz	r0, b5354 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b534e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b5352:	e7ef      	b.n	b5334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b5354:	492a      	ldr	r1, [pc, #168]	; (b5400 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b5356:	4668      	mov	r0, sp
   b5358:	f00f f96c 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b535c:	2205      	movs	r2, #5
   b535e:	4629      	mov	r1, r5
   b5360:	4668      	mov	r0, sp
   b5362:	f00f f8c9 	bl	c44f8 <memcmp>
   b5366:	b910      	cbnz	r0, b536e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b5368:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b536c:	e7e2      	b.n	b5334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b536e:	4925      	ldr	r1, [pc, #148]	; (b5404 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b5370:	4668      	mov	r0, sp
   b5372:	f00f f95f 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5376:	2205      	movs	r2, #5
   b5378:	4629      	mov	r1, r5
   b537a:	4668      	mov	r0, sp
   b537c:	f00f f8bc 	bl	c44f8 <memcmp>
   b5380:	b910      	cbnz	r0, b5388 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b5382:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b5386:	e7d5      	b.n	b5334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b5388:	491f      	ldr	r1, [pc, #124]	; (b5408 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b538a:	4668      	mov	r0, sp
   b538c:	f00f f952 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5390:	2205      	movs	r2, #5
   b5392:	4629      	mov	r1, r5
   b5394:	4668      	mov	r0, sp
   b5396:	f00f f8af 	bl	c44f8 <memcmp>
   b539a:	b910      	cbnz	r0, b53a2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b539c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b53a0:	e7c8      	b.n	b5334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b53a2:	491a      	ldr	r1, [pc, #104]	; (b540c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b53a4:	4668      	mov	r0, sp
   b53a6:	f00f f945 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b53aa:	2205      	movs	r2, #5
   b53ac:	4629      	mov	r1, r5
   b53ae:	4668      	mov	r0, sp
   b53b0:	f00f f8a2 	bl	c44f8 <memcmp>
   b53b4:	b910      	cbnz	r0, b53bc <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b53b6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b53ba:	e7bb      	b.n	b5334 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b53bc:	4914      	ldr	r1, [pc, #80]	; (b5410 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b53be:	4668      	mov	r0, sp
   b53c0:	f00f f938 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b53c4:	2205      	movs	r2, #5
   b53c6:	4629      	mov	r1, r5
   b53c8:	4668      	mov	r0, sp
   b53ca:	f00f f895 	bl	c44f8 <memcmp>
   b53ce:	b918      	cbnz	r0, b53d8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b53d0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b53d4:	3034      	adds	r0, #52	; 0x34
   b53d6:	e7ae      	b.n	b5336 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b53d8:	490e      	ldr	r1, [pc, #56]	; (b5414 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b53da:	4668      	mov	r0, sp
   b53dc:	f00f f92a 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b53e0:	2205      	movs	r2, #5
   b53e2:	4629      	mov	r1, r5
   b53e4:	4668      	mov	r0, sp
   b53e6:	f00f f887 	bl	c44f8 <memcmp>
   b53ea:	b910      	cbnz	r0, b53f2 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b53ec:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b53f0:	e7f0      	b.n	b53d4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b53f2:	2000      	movs	r0, #0
   b53f4:	e79f      	b.n	b5336 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b53f6:	bf00      	nop
   b53f8:	000c6804 	.word	0x000c6804
   b53fc:	000c67da 	.word	0x000c67da
   b5400:	000c67e0 	.word	0x000c67e0
   b5404:	000c67e6 	.word	0x000c67e6
   b5408:	000c67ec 	.word	0x000c67ec
   b540c:	000c67f2 	.word	0x000c67f2
   b5410:	000c67f8 	.word	0x000c67f8
   b5414:	000c67fe 	.word	0x000c67fe

000b5418 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b5418:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b541a:	4b39      	ldr	r3, [pc, #228]	; (b5500 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b541c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b541e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b5422:	6818      	ldr	r0, [r3, #0]
   b5424:	9000      	str	r0, [sp, #0]
   b5426:	889b      	ldrh	r3, [r3, #4]
   b5428:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b542c:	2205      	movs	r2, #5
   b542e:	4629      	mov	r1, r5
   b5430:	4668      	mov	r0, sp
   b5432:	f00f f861 	bl	c44f8 <memcmp>
   b5436:	b920      	cbnz	r0, b5442 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b5438:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b543c:	3067      	adds	r0, #103	; 0x67
}
   b543e:	b003      	add	sp, #12
   b5440:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b5442:	4930      	ldr	r1, [pc, #192]	; (b5504 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b5444:	4668      	mov	r0, sp
   b5446:	f00f f8f5 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b544a:	2205      	movs	r2, #5
   b544c:	4629      	mov	r1, r5
   b544e:	4668      	mov	r0, sp
   b5450:	f00f f852 	bl	c44f8 <memcmp>
   b5454:	b910      	cbnz	r0, b545c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b5456:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b545a:	e7ef      	b.n	b543c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b545c:	492a      	ldr	r1, [pc, #168]	; (b5508 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b545e:	4668      	mov	r0, sp
   b5460:	f00f f8e8 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5464:	2205      	movs	r2, #5
   b5466:	4629      	mov	r1, r5
   b5468:	4668      	mov	r0, sp
   b546a:	f00f f845 	bl	c44f8 <memcmp>
   b546e:	b910      	cbnz	r0, b5476 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b5470:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b5474:	e7e2      	b.n	b543c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b5476:	4925      	ldr	r1, [pc, #148]	; (b550c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b5478:	4668      	mov	r0, sp
   b547a:	f00f f8db 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b547e:	2205      	movs	r2, #5
   b5480:	4629      	mov	r1, r5
   b5482:	4668      	mov	r0, sp
   b5484:	f00f f838 	bl	c44f8 <memcmp>
   b5488:	b910      	cbnz	r0, b5490 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b548a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b548e:	e7d5      	b.n	b543c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b5490:	491f      	ldr	r1, [pc, #124]	; (b5510 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b5492:	4668      	mov	r0, sp
   b5494:	f00f f8ce 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5498:	2205      	movs	r2, #5
   b549a:	4629      	mov	r1, r5
   b549c:	4668      	mov	r0, sp
   b549e:	f00f f82b 	bl	c44f8 <memcmp>
   b54a2:	b910      	cbnz	r0, b54aa <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b54a4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b54a8:	e7c8      	b.n	b543c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b54aa:	491a      	ldr	r1, [pc, #104]	; (b5514 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b54ac:	4668      	mov	r0, sp
   b54ae:	f00f f8c1 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b54b2:	2205      	movs	r2, #5
   b54b4:	4629      	mov	r1, r5
   b54b6:	4668      	mov	r0, sp
   b54b8:	f00f f81e 	bl	c44f8 <memcmp>
   b54bc:	b910      	cbnz	r0, b54c4 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b54be:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b54c2:	e7bb      	b.n	b543c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b54c4:	4914      	ldr	r1, [pc, #80]	; (b5518 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b54c6:	4668      	mov	r0, sp
   b54c8:	f00f f8b4 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b54cc:	2205      	movs	r2, #5
   b54ce:	4629      	mov	r1, r5
   b54d0:	4668      	mov	r0, sp
   b54d2:	f00f f811 	bl	c44f8 <memcmp>
   b54d6:	b918      	cbnz	r0, b54e0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b54d8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b54dc:	3035      	adds	r0, #53	; 0x35
   b54de:	e7ae      	b.n	b543e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b54e0:	490e      	ldr	r1, [pc, #56]	; (b551c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b54e2:	4668      	mov	r0, sp
   b54e4:	f00f f8a6 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b54e8:	2205      	movs	r2, #5
   b54ea:	4629      	mov	r1, r5
   b54ec:	4668      	mov	r0, sp
   b54ee:	f00f f803 	bl	c44f8 <memcmp>
   b54f2:	b910      	cbnz	r0, b54fa <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b54f4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b54f8:	e7f0      	b.n	b54dc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b54fa:	2000      	movs	r0, #0
   b54fc:	e79f      	b.n	b543e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b54fe:	bf00      	nop
   b5500:	000c6804 	.word	0x000c6804
   b5504:	000c67da 	.word	0x000c67da
   b5508:	000c67e0 	.word	0x000c67e0
   b550c:	000c67e6 	.word	0x000c67e6
   b5510:	000c67ec 	.word	0x000c67ec
   b5514:	000c67f2 	.word	0x000c67f2
   b5518:	000c67f8 	.word	0x000c67f8
   b551c:	000c67fe 	.word	0x000c67fe

000b5520 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b5520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b5522:	4b39      	ldr	r3, [pc, #228]	; (b5608 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b5524:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5526:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b552a:	6818      	ldr	r0, [r3, #0]
   b552c:	9000      	str	r0, [sp, #0]
   b552e:	889b      	ldrh	r3, [r3, #4]
   b5530:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5534:	2205      	movs	r2, #5
   b5536:	4629      	mov	r1, r5
   b5538:	4668      	mov	r0, sp
   b553a:	f00e ffdd 	bl	c44f8 <memcmp>
   b553e:	b928      	cbnz	r0, b554c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b5540:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b5544:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b5548:	b003      	add	sp, #12
   b554a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b554c:	492f      	ldr	r1, [pc, #188]	; (b560c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b554e:	4668      	mov	r0, sp
   b5550:	f00f f870 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5554:	2205      	movs	r2, #5
   b5556:	4629      	mov	r1, r5
   b5558:	4668      	mov	r0, sp
   b555a:	f00e ffcd 	bl	c44f8 <memcmp>
   b555e:	b910      	cbnz	r0, b5566 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b5560:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b5564:	e7ee      	b.n	b5544 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b5566:	492a      	ldr	r1, [pc, #168]	; (b5610 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b5568:	4668      	mov	r0, sp
   b556a:	f00f f863 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b556e:	2205      	movs	r2, #5
   b5570:	4629      	mov	r1, r5
   b5572:	4668      	mov	r0, sp
   b5574:	f00e ffc0 	bl	c44f8 <memcmp>
   b5578:	b910      	cbnz	r0, b5580 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b557a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b557e:	e7e1      	b.n	b5544 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b5580:	4924      	ldr	r1, [pc, #144]	; (b5614 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b5582:	4668      	mov	r0, sp
   b5584:	f00f f856 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5588:	2205      	movs	r2, #5
   b558a:	4629      	mov	r1, r5
   b558c:	4668      	mov	r0, sp
   b558e:	f00e ffb3 	bl	c44f8 <memcmp>
   b5592:	b910      	cbnz	r0, b559a <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b5594:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b5598:	e7d4      	b.n	b5544 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b559a:	491f      	ldr	r1, [pc, #124]	; (b5618 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b559c:	4668      	mov	r0, sp
   b559e:	f00f f849 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b55a2:	2205      	movs	r2, #5
   b55a4:	4629      	mov	r1, r5
   b55a6:	4668      	mov	r0, sp
   b55a8:	f00e ffa6 	bl	c44f8 <memcmp>
   b55ac:	b910      	cbnz	r0, b55b4 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b55ae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b55b2:	e7c7      	b.n	b5544 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b55b4:	4919      	ldr	r1, [pc, #100]	; (b561c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b55b6:	4668      	mov	r0, sp
   b55b8:	f00f f83c 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b55bc:	2205      	movs	r2, #5
   b55be:	4629      	mov	r1, r5
   b55c0:	4668      	mov	r0, sp
   b55c2:	f00e ff99 	bl	c44f8 <memcmp>
   b55c6:	b910      	cbnz	r0, b55ce <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b55c8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b55cc:	e7ba      	b.n	b5544 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b55ce:	4914      	ldr	r1, [pc, #80]	; (b5620 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b55d0:	4668      	mov	r0, sp
   b55d2:	f00f f82f 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b55d6:	2205      	movs	r2, #5
   b55d8:	4629      	mov	r1, r5
   b55da:	4668      	mov	r0, sp
   b55dc:	f00e ff8c 	bl	c44f8 <memcmp>
   b55e0:	b918      	cbnz	r0, b55ea <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b55e2:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b55e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b55e8:	e7ae      	b.n	b5548 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b55ea:	490e      	ldr	r1, [pc, #56]	; (b5624 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b55ec:	4668      	mov	r0, sp
   b55ee:	f00f f821 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b55f2:	2205      	movs	r2, #5
   b55f4:	4629      	mov	r1, r5
   b55f6:	4668      	mov	r0, sp
   b55f8:	f00e ff7e 	bl	c44f8 <memcmp>
   b55fc:	b910      	cbnz	r0, b5604 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b55fe:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b5602:	e7f0      	b.n	b55e6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b5604:	2000      	movs	r0, #0
   b5606:	e79f      	b.n	b5548 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b5608:	000c6804 	.word	0x000c6804
   b560c:	000c67da 	.word	0x000c67da
   b5610:	000c67e0 	.word	0x000c67e0
   b5614:	000c67e6 	.word	0x000c67e6
   b5618:	000c67ec 	.word	0x000c67ec
   b561c:	000c67f2 	.word	0x000c67f2
   b5620:	000c67f8 	.word	0x000c67f8
   b5624:	000c67fe 	.word	0x000c67fe

000b5628 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b5628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b562a:	4b3a      	ldr	r3, [pc, #232]	; (b5714 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b562c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b562e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b5632:	6818      	ldr	r0, [r3, #0]
   b5634:	9000      	str	r0, [sp, #0]
   b5636:	889b      	ldrh	r3, [r3, #4]
   b5638:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b563c:	2205      	movs	r2, #5
   b563e:	4629      	mov	r1, r5
   b5640:	4668      	mov	r0, sp
   b5642:	f00e ff59 	bl	c44f8 <memcmp>
   b5646:	b930      	cbnz	r0, b5656 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b5648:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b564c:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b5650:	3001      	adds	r0, #1
}
   b5652:	b003      	add	sp, #12
   b5654:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b5656:	4930      	ldr	r1, [pc, #192]	; (b5718 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b5658:	4668      	mov	r0, sp
   b565a:	f00e ffeb 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b565e:	2205      	movs	r2, #5
   b5660:	4629      	mov	r1, r5
   b5662:	4668      	mov	r0, sp
   b5664:	f00e ff48 	bl	c44f8 <memcmp>
   b5668:	b910      	cbnz	r0, b5670 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b566a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b566e:	e7ed      	b.n	b564c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b5670:	492a      	ldr	r1, [pc, #168]	; (b571c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b5672:	4668      	mov	r0, sp
   b5674:	f00e ffde 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5678:	2205      	movs	r2, #5
   b567a:	4629      	mov	r1, r5
   b567c:	4668      	mov	r0, sp
   b567e:	f00e ff3b 	bl	c44f8 <memcmp>
   b5682:	b910      	cbnz	r0, b568a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b5684:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b5688:	e7e0      	b.n	b564c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b568a:	4925      	ldr	r1, [pc, #148]	; (b5720 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b568c:	4668      	mov	r0, sp
   b568e:	f00e ffd1 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5692:	2205      	movs	r2, #5
   b5694:	4629      	mov	r1, r5
   b5696:	4668      	mov	r0, sp
   b5698:	f00e ff2e 	bl	c44f8 <memcmp>
   b569c:	b910      	cbnz	r0, b56a4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b569e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b56a2:	e7d3      	b.n	b564c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b56a4:	491f      	ldr	r1, [pc, #124]	; (b5724 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b56a6:	4668      	mov	r0, sp
   b56a8:	f00e ffc4 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b56ac:	2205      	movs	r2, #5
   b56ae:	4629      	mov	r1, r5
   b56b0:	4668      	mov	r0, sp
   b56b2:	f00e ff21 	bl	c44f8 <memcmp>
   b56b6:	b910      	cbnz	r0, b56be <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b56b8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b56bc:	e7c6      	b.n	b564c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b56be:	491a      	ldr	r1, [pc, #104]	; (b5728 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b56c0:	4668      	mov	r0, sp
   b56c2:	f00e ffb7 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b56c6:	2205      	movs	r2, #5
   b56c8:	4629      	mov	r1, r5
   b56ca:	4668      	mov	r0, sp
   b56cc:	f00e ff14 	bl	c44f8 <memcmp>
   b56d0:	b910      	cbnz	r0, b56d8 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b56d2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b56d6:	e7b9      	b.n	b564c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b56d8:	4914      	ldr	r1, [pc, #80]	; (b572c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b56da:	4668      	mov	r0, sp
   b56dc:	f00e ffaa 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b56e0:	2205      	movs	r2, #5
   b56e2:	4629      	mov	r1, r5
   b56e4:	4668      	mov	r0, sp
   b56e6:	f00e ff07 	bl	c44f8 <memcmp>
   b56ea:	b918      	cbnz	r0, b56f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b56ec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b56f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b56f2:	e7ad      	b.n	b5650 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b56f4:	490e      	ldr	r1, [pc, #56]	; (b5730 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b56f6:	4668      	mov	r0, sp
   b56f8:	f00e ff9c 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b56fc:	2205      	movs	r2, #5
   b56fe:	4629      	mov	r1, r5
   b5700:	4668      	mov	r0, sp
   b5702:	f00e fef9 	bl	c44f8 <memcmp>
   b5706:	b910      	cbnz	r0, b570e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b5708:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b570c:	e7f0      	b.n	b56f0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b570e:	2000      	movs	r0, #0
   b5710:	e79f      	b.n	b5652 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b5712:	bf00      	nop
   b5714:	000c6804 	.word	0x000c6804
   b5718:	000c67da 	.word	0x000c67da
   b571c:	000c67e0 	.word	0x000c67e0
   b5720:	000c67e6 	.word	0x000c67e6
   b5724:	000c67ec 	.word	0x000c67ec
   b5728:	000c67f2 	.word	0x000c67f2
   b572c:	000c67f8 	.word	0x000c67f8
   b5730:	000c67fe 	.word	0x000c67fe

000b5734 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b5734:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b5736:	4b30      	ldr	r3, [pc, #192]	; (b57f8 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b5738:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b573a:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b573e:	6818      	ldr	r0, [r3, #0]
   b5740:	9000      	str	r0, [sp, #0]
   b5742:	889b      	ldrh	r3, [r3, #4]
   b5744:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5748:	2205      	movs	r2, #5
   b574a:	4621      	mov	r1, r4
   b574c:	4668      	mov	r0, sp
   b574e:	f00e fed3 	bl	c44f8 <memcmp>
   b5752:	b910      	cbnz	r0, b575a <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b5754:	2064      	movs	r0, #100	; 0x64
}
   b5756:	b002      	add	sp, #8
   b5758:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b575a:	4928      	ldr	r1, [pc, #160]	; (b57fc <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b575c:	4668      	mov	r0, sp
   b575e:	f00e ff69 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5762:	2205      	movs	r2, #5
   b5764:	4621      	mov	r1, r4
   b5766:	4668      	mov	r0, sp
   b5768:	f00e fec6 	bl	c44f8 <memcmp>
   b576c:	2800      	cmp	r0, #0
   b576e:	d0f1      	beq.n	b5754 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b5770:	4923      	ldr	r1, [pc, #140]	; (b5800 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b5772:	4668      	mov	r0, sp
   b5774:	f00e ff5e 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5778:	2205      	movs	r2, #5
   b577a:	4621      	mov	r1, r4
   b577c:	4668      	mov	r0, sp
   b577e:	f00e febb 	bl	c44f8 <memcmp>
   b5782:	2800      	cmp	r0, #0
   b5784:	d0e6      	beq.n	b5754 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b5786:	491f      	ldr	r1, [pc, #124]	; (b5804 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b5788:	4668      	mov	r0, sp
   b578a:	f00e ff53 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b578e:	2205      	movs	r2, #5
   b5790:	4621      	mov	r1, r4
   b5792:	4668      	mov	r0, sp
   b5794:	f00e feb0 	bl	c44f8 <memcmp>
   b5798:	2800      	cmp	r0, #0
   b579a:	d0db      	beq.n	b5754 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b579c:	491a      	ldr	r1, [pc, #104]	; (b5808 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b579e:	4668      	mov	r0, sp
   b57a0:	f00e ff48 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b57a4:	2205      	movs	r2, #5
   b57a6:	4621      	mov	r1, r4
   b57a8:	4668      	mov	r0, sp
   b57aa:	f00e fea5 	bl	c44f8 <memcmp>
   b57ae:	2800      	cmp	r0, #0
   b57b0:	d0d0      	beq.n	b5754 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b57b2:	4916      	ldr	r1, [pc, #88]	; (b580c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b57b4:	4668      	mov	r0, sp
   b57b6:	f00e ff3d 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b57ba:	2205      	movs	r2, #5
   b57bc:	4621      	mov	r1, r4
   b57be:	4668      	mov	r0, sp
   b57c0:	f00e fe9a 	bl	c44f8 <memcmp>
   b57c4:	2800      	cmp	r0, #0
   b57c6:	d0c5      	beq.n	b5754 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b57c8:	4911      	ldr	r1, [pc, #68]	; (b5810 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b57ca:	4668      	mov	r0, sp
   b57cc:	f00e ff32 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b57d0:	2205      	movs	r2, #5
   b57d2:	4621      	mov	r1, r4
   b57d4:	4668      	mov	r0, sp
   b57d6:	f00e fe8f 	bl	c44f8 <memcmp>
   b57da:	b148      	cbz	r0, b57f0 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b57dc:	490d      	ldr	r1, [pc, #52]	; (b5814 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b57de:	4668      	mov	r0, sp
   b57e0:	f00e ff28 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b57e4:	2205      	movs	r2, #5
   b57e6:	4621      	mov	r1, r4
   b57e8:	4668      	mov	r0, sp
   b57ea:	f00e fe85 	bl	c44f8 <memcmp>
   b57ee:	b908      	cbnz	r0, b57f4 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b57f0:	2032      	movs	r0, #50	; 0x32
   b57f2:	e7b0      	b.n	b5756 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b57f4:	2000      	movs	r0, #0
   b57f6:	e7ae      	b.n	b5756 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b57f8:	000c6804 	.word	0x000c6804
   b57fc:	000c67da 	.word	0x000c67da
   b5800:	000c67e0 	.word	0x000c67e0
   b5804:	000c67e6 	.word	0x000c67e6
   b5808:	000c67ec 	.word	0x000c67ec
   b580c:	000c67f2 	.word	0x000c67f2
   b5810:	000c67f8 	.word	0x000c67f8
   b5814:	000c67fe 	.word	0x000c67fe

000b5818 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b5818:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b581a:	4b38      	ldr	r3, [pc, #224]	; (b58fc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b581c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b581e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b5822:	6818      	ldr	r0, [r3, #0]
   b5824:	9000      	str	r0, [sp, #0]
   b5826:	889b      	ldrh	r3, [r3, #4]
   b5828:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b582c:	2205      	movs	r2, #5
   b582e:	4629      	mov	r1, r5
   b5830:	4668      	mov	r0, sp
   b5832:	f00e fe61 	bl	c44f8 <memcmp>
   b5836:	b918      	cbnz	r0, b5840 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b5838:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b583c:	b003      	add	sp, #12
   b583e:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b5840:	492f      	ldr	r1, [pc, #188]	; (b5900 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b5842:	4668      	mov	r0, sp
   b5844:	f00e fef6 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5848:	2205      	movs	r2, #5
   b584a:	4629      	mov	r1, r5
   b584c:	4668      	mov	r0, sp
   b584e:	f00e fe53 	bl	c44f8 <memcmp>
   b5852:	b910      	cbnz	r0, b585a <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b5854:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b5858:	e7f0      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b585a:	492a      	ldr	r1, [pc, #168]	; (b5904 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b585c:	4668      	mov	r0, sp
   b585e:	f00e fee9 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5862:	2205      	movs	r2, #5
   b5864:	4629      	mov	r1, r5
   b5866:	4668      	mov	r0, sp
   b5868:	f00e fe46 	bl	c44f8 <memcmp>
   b586c:	b910      	cbnz	r0, b5874 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b586e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b5872:	e7e3      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b5874:	4924      	ldr	r1, [pc, #144]	; (b5908 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b5876:	4668      	mov	r0, sp
   b5878:	f00e fedc 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b587c:	2205      	movs	r2, #5
   b587e:	4629      	mov	r1, r5
   b5880:	4668      	mov	r0, sp
   b5882:	f00e fe39 	bl	c44f8 <memcmp>
   b5886:	b910      	cbnz	r0, b588e <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b5888:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b588c:	e7d6      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b588e:	491f      	ldr	r1, [pc, #124]	; (b590c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b5890:	4668      	mov	r0, sp
   b5892:	f00e fecf 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b5896:	2205      	movs	r2, #5
   b5898:	4629      	mov	r1, r5
   b589a:	4668      	mov	r0, sp
   b589c:	f00e fe2c 	bl	c44f8 <memcmp>
   b58a0:	b910      	cbnz	r0, b58a8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b58a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b58a6:	e7c9      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b58a8:	4919      	ldr	r1, [pc, #100]	; (b5910 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b58aa:	4668      	mov	r0, sp
   b58ac:	f00e fec2 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b58b0:	2205      	movs	r2, #5
   b58b2:	4629      	mov	r1, r5
   b58b4:	4668      	mov	r0, sp
   b58b6:	f00e fe1f 	bl	c44f8 <memcmp>
   b58ba:	b910      	cbnz	r0, b58c2 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b58bc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b58c0:	e7bc      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b58c2:	4914      	ldr	r1, [pc, #80]	; (b5914 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b58c4:	4668      	mov	r0, sp
   b58c6:	f00e feb5 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b58ca:	2205      	movs	r2, #5
   b58cc:	4629      	mov	r1, r5
   b58ce:	4668      	mov	r0, sp
   b58d0:	f00e fe12 	bl	c44f8 <memcmp>
   b58d4:	b910      	cbnz	r0, b58dc <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b58d6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b58da:	e7af      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b58dc:	490e      	ldr	r1, [pc, #56]	; (b5918 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b58de:	4668      	mov	r0, sp
   b58e0:	f00e fea8 	bl	c4634 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b58e4:	2205      	movs	r2, #5
   b58e6:	4629      	mov	r1, r5
   b58e8:	4668      	mov	r0, sp
   b58ea:	f00e fe05 	bl	c44f8 <memcmp>
   b58ee:	b910      	cbnz	r0, b58f6 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b58f0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b58f4:	e7a2      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b58f6:	2000      	movs	r0, #0
   b58f8:	e7a0      	b.n	b583c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b58fa:	bf00      	nop
   b58fc:	000c6804 	.word	0x000c6804
   b5900:	000c67da 	.word	0x000c67da
   b5904:	000c67e0 	.word	0x000c67e0
   b5908:	000c67e6 	.word	0x000c67e6
   b590c:	000c67ec 	.word	0x000c67ec
   b5910:	000c67f2 	.word	0x000c67f2
   b5914:	000c67f8 	.word	0x000c67f8
   b5918:	000c67fe 	.word	0x000c67fe

000b591c <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b591c:	4770      	bx	lr
	...

000b5920 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b5920:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b5922:	8813      	ldrh	r3, [r2, #0]
   b5924:	4d0c      	ldr	r5, [pc, #48]	; (b5958 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b5926:	2b01      	cmp	r3, #1
{
   b5928:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b592a:	d10e      	bne.n	b594a <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b592c:	020a      	lsls	r2, r1, #8
   b592e:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b5932:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b5934:	3301      	adds	r3, #1
   b5936:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b5938:	f7ff fff0 	bl	b591c <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b593c:	8820      	ldrh	r0, [r4, #0]
   b593e:	882b      	ldrh	r3, [r5, #0]
}
   b5940:	4298      	cmp	r0, r3
   b5942:	bf14      	ite	ne
   b5944:	2003      	movne	r0, #3
   b5946:	2000      	moveq	r0, #0
   b5948:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b594a:	2b02      	cmp	r3, #2
   b594c:	d1f2      	bne.n	b5934 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b594e:	882a      	ldrh	r2, [r5, #0]
   b5950:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b5952:	3206      	adds	r2, #6
   b5954:	e7ed      	b.n	b5932 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b5956:	bf00      	nop
   b5958:	2003dd20 	.word	0x2003dd20

000b595c <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b595c:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b595e:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b5960:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b5962:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b5964:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b5966:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b596a:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b596e:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b5972:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b5976:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b597a:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b597c:	4413      	add	r3, r2
   b597e:	734b      	strb	r3, [r1, #13]
   b5980:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b5982:	b293      	uxth	r3, r2
   b5984:	429c      	cmp	r4, r3
   b5986:	d90a      	bls.n	b599e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b5988:	688b      	ldr	r3, [r1, #8]
   b598a:	7b08      	ldrb	r0, [r1, #12]
   b598c:	5c9b      	ldrb	r3, [r3, r2]
   b598e:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b5990:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b5992:	b2db      	uxtb	r3, r3
   b5994:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b5996:	4403      	add	r3, r0
   b5998:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b599a:	3201      	adds	r2, #1
   b599c:	e7f1      	b.n	b5982 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b599e:	bd30      	pop	{r4, r5, pc}

000b59a0 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b59a0:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b59a4:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b59a6:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b59aa:	b2c9      	uxtb	r1, r1
   b59ac:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b59b0:	4419      	add	r1, r3
   b59b2:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b59b6:	4770      	bx	lr

000b59b8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b59b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b59bc:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b59c0:	f10b 0b08 	add.w	fp, fp, #8
   b59c4:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b59c8:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b59cc:	f1ab 0302 	sub.w	r3, fp, #2
{
   b59d0:	4604      	mov	r4, r0
   b59d2:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b59d4:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b59d6:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b59d8:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b59da:	f1ba 0f00 	cmp.w	sl, #0
   b59de:	f000 80a6 	beq.w	b5b2e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b59e2:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b59e4:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b59e8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b59ec:	4556      	cmp	r6, sl
   b59ee:	bf28      	it	cs
   b59f0:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b59f2:	ebaa 0a06 	sub.w	sl, sl, r6
   b59f6:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b59fa:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b59fe:	bf02      	ittt	eq
   b5a00:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   b5a04:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b5a06:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b5a0a:	f00a fa33 	bl	bfe74 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b5a0e:	f1b9 0f00 	cmp.w	r9, #0
   b5a12:	d15c      	bne.n	b5ace <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b5a14:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a18:	6803      	ldr	r3, [r0, #0]
   b5a1a:	21b5      	movs	r1, #181	; 0xb5
   b5a1c:	689b      	ldr	r3, [r3, #8]
   b5a1e:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b5a20:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a24:	6803      	ldr	r3, [r0, #0]
   b5a26:	2162      	movs	r1, #98	; 0x62
   b5a28:	689b      	ldr	r3, [r3, #8]
   b5a2a:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b5a2c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a30:	7829      	ldrb	r1, [r5, #0]
   b5a32:	6803      	ldr	r3, [r0, #0]
   b5a34:	689b      	ldr	r3, [r3, #8]
   b5a36:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b5a38:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a3c:	7869      	ldrb	r1, [r5, #1]
   b5a3e:	6803      	ldr	r3, [r0, #0]
   b5a40:	689b      	ldr	r3, [r3, #8]
   b5a42:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b5a44:	78a9      	ldrb	r1, [r5, #2]
   b5a46:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a4a:	f7fe fd89 	bl	b4560 <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b5a4e:	8869      	ldrh	r1, [r5, #2]
   b5a50:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a54:	0a09      	lsrs	r1, r1, #8
   b5a56:	f7fe fd83 	bl	b4560 <_ZN7TwoWire5writeEi.isra.0>
   b5a5a:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b5a5c:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b5a5e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5a62:	fa1f f983 	uxth.w	r9, r3
   b5a66:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b5a6a:	454a      	cmp	r2, r9
   b5a6c:	b2bf      	uxth	r7, r7
   b5a6e:	d90d      	bls.n	b5a8c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b5a70:	42be      	cmp	r6, r7
   b5a72:	d90b      	bls.n	b5a8c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b5a74:	68aa      	ldr	r2, [r5, #8]
   b5a76:	6801      	ldr	r1, [r0, #0]
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	4442      	add	r2, r8
   b5a7c:	688f      	ldr	r7, [r1, #8]
   b5a7e:	5cd1      	ldrb	r1, [r2, r3]
   b5a80:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b5a82:	9b01      	ldr	r3, [sp, #4]
   b5a84:	3301      	adds	r3, #1
   b5a86:	e7e9      	b.n	b5a5c <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b5a88:	46b9      	mov	r9, r7
   b5a8a:	e7a6      	b.n	b59da <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b5a8c:	3e02      	subs	r6, #2
      startSpot += x;
   b5a8e:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b5a90:	42b7      	cmp	r7, r6
      startSpot += x;
   b5a92:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b5a96:	d10c      	bne.n	b5ab2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b5a98:	6803      	ldr	r3, [r0, #0]
   b5a9a:	7b29      	ldrb	r1, [r5, #12]
   b5a9c:	689b      	ldr	r3, [r3, #8]
   b5a9e:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b5aa0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5aa4:	7b69      	ldrb	r1, [r5, #13]
   b5aa6:	6803      	ldr	r3, [r0, #0]
   b5aa8:	689b      	ldr	r3, [r3, #8]
   b5aaa:	4798      	blx	r3
        bytesSent += 2;
   b5aac:	f109 0708 	add.w	r7, r9, #8
   b5ab0:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b5ab2:	455f      	cmp	r7, fp
   b5ab4:	d2e8      	bcs.n	b5a88 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b5ab6:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b5aba:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5abe:	f00a f9e0 	bl	bfe82 <_ZN7TwoWire15endTransmissionEh>
   b5ac2:	2800      	cmp	r0, #0
   b5ac4:	d0e0      	beq.n	b5a88 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b5ac6:	200c      	movs	r0, #12
}
   b5ac8:	b003      	add	sp, #12
   b5aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ace:	2200      	movs	r2, #0
   b5ad0:	b291      	uxth	r1, r2
   b5ad2:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b5ad6:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b5ad8:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5adc:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b5ade:	d910      	bls.n	b5b02 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b5ae0:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b5ae4:	eb08 0c02 	add.w	ip, r8, r2
   b5ae8:	1c53      	adds	r3, r2, #1
   b5aea:	45f4      	cmp	ip, lr
   b5aec:	9301      	str	r3, [sp, #4]
   b5aee:	da08      	bge.n	b5b02 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b5af0:	68a9      	ldr	r1, [r5, #8]
   b5af2:	6802      	ldr	r2, [r0, #0]
   b5af4:	f811 100c 	ldrb.w	r1, [r1, ip]
   b5af8:	6892      	ldr	r2, [r2, #8]
   b5afa:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b5afc:	9b01      	ldr	r3, [sp, #4]
   b5afe:	461a      	mov	r2, r3
   b5b00:	e7e6      	b.n	b5ad0 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b5b02:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b5b04:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b5b06:	429f      	cmp	r7, r3
      startSpot += x;
   b5b08:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b5b0c:	d1d1      	bne.n	b5ab2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b5b0e:	3e02      	subs	r6, #2
   b5b10:	42b2      	cmp	r2, r6
   b5b12:	d1ce      	bne.n	b5ab2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b5b14:	6803      	ldr	r3, [r0, #0]
   b5b16:	7b29      	ldrb	r1, [r5, #12]
   b5b18:	689b      	ldr	r3, [r3, #8]
   b5b1a:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b5b1c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5b20:	7b69      	ldrb	r1, [r5, #13]
   b5b22:	6803      	ldr	r3, [r0, #0]
   b5b24:	689b      	ldr	r3, [r3, #8]
   b5b26:	4798      	blx	r3
        bytesSent += 2;
   b5b28:	fa1f f78b 	uxth.w	r7, fp
   b5b2c:	e7c1      	b.n	b5ab2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b5b2e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b5b32:	f00a f9aa 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
   b5b36:	2800      	cmp	r0, #0
   b5b38:	d0c6      	beq.n	b5ac8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b5b3a:	e7c4      	b.n	b5ac6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b5b3c <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b5b3c:	b570      	push	{r4, r5, r6, lr}
   b5b3e:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b5b40:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b5b44:	6803      	ldr	r3, [r0, #0]
{
   b5b46:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b5b48:	689b      	ldr	r3, [r3, #8]
   b5b4a:	21b5      	movs	r1, #181	; 0xb5
   b5b4c:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b5b4e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5b52:	6803      	ldr	r3, [r0, #0]
   b5b54:	2162      	movs	r1, #98	; 0x62
   b5b56:	689b      	ldr	r3, [r3, #8]
   b5b58:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b5b5a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5b5e:	7821      	ldrb	r1, [r4, #0]
   b5b60:	6803      	ldr	r3, [r0, #0]
   b5b62:	689b      	ldr	r3, [r3, #8]
   b5b64:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b5b66:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5b6a:	7861      	ldrb	r1, [r4, #1]
   b5b6c:	6803      	ldr	r3, [r0, #0]
   b5b6e:	689b      	ldr	r3, [r3, #8]
   b5b70:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b5b72:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5b76:	78a1      	ldrb	r1, [r4, #2]
   b5b78:	6803      	ldr	r3, [r0, #0]
   b5b7a:	689b      	ldr	r3, [r3, #8]
   b5b7c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b5b7e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5b82:	8861      	ldrh	r1, [r4, #2]
   b5b84:	6803      	ldr	r3, [r0, #0]
   b5b86:	0a09      	lsrs	r1, r1, #8
   b5b88:	689b      	ldr	r3, [r3, #8]
   b5b8a:	4798      	blx	r3
   b5b8c:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b5b8e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5b92:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b5b94:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5b96:	b2b2      	uxth	r2, r6
   b5b98:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b5b9a:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5b9c:	d904      	bls.n	b5ba8 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b5b9e:	68a1      	ldr	r1, [r4, #8]
   b5ba0:	5c89      	ldrb	r1, [r1, r2]
   b5ba2:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5ba4:	3601      	adds	r6, #1
   b5ba6:	e7f2      	b.n	b5b8e <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b5ba8:	7b21      	ldrb	r1, [r4, #12]
   b5baa:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b5bac:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b5bb0:	7b61      	ldrb	r1, [r4, #13]
   b5bb2:	6803      	ldr	r3, [r0, #0]
}
   b5bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b5bb8:	689b      	ldr	r3, [r3, #8]
   b5bba:	4718      	bx	r3

000b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b5bbc:	b510      	push	{r4, lr}
   b5bbe:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b5bc0:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b5bc4:	f00b fde4 	bl	c1790 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b5bc8:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b5bcc:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b5bd0:	429a      	cmp	r2, r3
   b5bd2:	d90b      	bls.n	b5bec <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b5bd4:	28ff      	cmp	r0, #255	; 0xff
   b5bd6:	d101      	bne.n	b5bdc <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b5bd8:	7822      	ldrb	r2, [r4, #0]
   b5bda:	b13a      	cbz	r2, b5bec <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b5bdc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b5be0:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b5be2:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b5be6:	3301      	adds	r3, #1
   b5be8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b5bec:	bd10      	pop	{r4, pc}
	...

000b5bf0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b5bf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b5bf4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b5bf8:	4604      	mov	r4, r0
   b5bfa:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b5bfc:	b97b      	cbnz	r3, b5c1e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b5bfe:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b5c02:	b923      	cbnz	r3, b5c0e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b5c04:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b5c08:	2b00      	cmp	r3, #0
   b5c0a:	f000 80ca 	beq.w	b5da2 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b5c0e:	4966      	ldr	r1, [pc, #408]	; (b5da8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b5c10:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b5c14:	b004      	add	sp, #16
   b5c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b5c1a:	f00b bc24 	b.w	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b5c1e:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b5c22:	4a62      	ldr	r2, [pc, #392]	; (b5dac <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b5c24:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b5c26:	2600      	movs	r6, #0
   b5c28:	2301      	movs	r3, #1
   b5c2a:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b5c2e:	4669      	mov	r1, sp
   b5c30:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b5c34:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5c38:	9200      	str	r2, [sp, #0]
   b5c3a:	f88d 6004 	strb.w	r6, [sp, #4]
   b5c3e:	f00b fd39 	bl	c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b5c42:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b5c46:	4631      	mov	r1, r6
   b5c48:	f00c f9a5 	bl	c1f96 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b5c4c:	21b5      	movs	r1, #181	; 0xb5
   b5c4e:	4620      	mov	r0, r4
   b5c50:	f7ff ffb4 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b5c54:	2162      	movs	r1, #98	; 0x62
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff ffb0 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b5c5c:	7829      	ldrb	r1, [r5, #0]
   b5c5e:	4620      	mov	r0, r4
   b5c60:	f7ff ffac 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b5c64:	7869      	ldrb	r1, [r5, #1]
   b5c66:	4620      	mov	r0, r4
   b5c68:	f7ff ffa8 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b5c6c:	78a9      	ldrb	r1, [r5, #2]
   b5c6e:	4620      	mov	r0, r4
   b5c70:	f7ff ffa4 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b5c74:	8869      	ldrh	r1, [r5, #2]
   b5c76:	4620      	mov	r0, r4
   b5c78:	0a09      	lsrs	r1, r1, #8
   b5c7a:	f7ff ff9f 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b5c7e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b5c82:	2b00      	cmp	r3, #0
   b5c84:	d042      	beq.n	b5d0c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b5c86:	494a      	ldr	r1, [pc, #296]	; (b5db0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b5c88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5c8c:	f00b fbeb 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b5c90:	2210      	movs	r2, #16
   b5c92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5c96:	21b5      	movs	r1, #181	; 0xb5
   b5c98:	f7fe fc52 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b5c9c:	4945      	ldr	r1, [pc, #276]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5c9e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5ca2:	f00b fbe0 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b5ca6:	2210      	movs	r2, #16
   b5ca8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cac:	2162      	movs	r1, #98	; 0x62
   b5cae:	f7fe fc47 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b5cb2:	4940      	ldr	r1, [pc, #256]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5cb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cb8:	f00b fbd5 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b5cbc:	2210      	movs	r2, #16
   b5cbe:	7829      	ldrb	r1, [r5, #0]
   b5cc0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cc4:	f7fe fc3c 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b5cc8:	493a      	ldr	r1, [pc, #232]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5cca:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cce:	f00b fbca 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b5cd2:	2210      	movs	r2, #16
   b5cd4:	7869      	ldrb	r1, [r5, #1]
   b5cd6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cda:	f7fe fc31 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b5cde:	4935      	ldr	r1, [pc, #212]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5ce0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5ce4:	f00b fbbf 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b5ce8:	2210      	movs	r2, #16
   b5cea:	78a9      	ldrb	r1, [r5, #2]
   b5cec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cf0:	f00b fbd5 	bl	c149e <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b5cf4:	492f      	ldr	r1, [pc, #188]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5cf6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5cfa:	f00b fbb4 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b5cfe:	8869      	ldrh	r1, [r5, #2]
   b5d00:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d04:	2210      	movs	r2, #16
   b5d06:	0a09      	lsrs	r1, r1, #8
   b5d08:	f00b fbc9 	bl	c149e <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b5d0c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b5d10:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5d12:	886a      	ldrh	r2, [r5, #2]
   b5d14:	b2b3      	uxth	r3, r6
   b5d16:	429a      	cmp	r2, r3
   b5d18:	d916      	bls.n	b5d48 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b5d1a:	461f      	mov	r7, r3
   b5d1c:	68ab      	ldr	r3, [r5, #8]
   b5d1e:	4620      	mov	r0, r4
   b5d20:	5dd9      	ldrb	r1, [r3, r7]
   b5d22:	f7ff ff4b 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b5d26:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b5d2a:	b15b      	cbz	r3, b5d44 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b5d2c:	4641      	mov	r1, r8
   b5d2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d32:	f00b fb98 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b5d36:	68ab      	ldr	r3, [r5, #8]
   b5d38:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d3c:	5dd9      	ldrb	r1, [r3, r7]
   b5d3e:	2210      	movs	r2, #16
   b5d40:	f7fe fbfe 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b5d44:	3601      	adds	r6, #1
   b5d46:	e7e4      	b.n	b5d12 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b5d48:	7b29      	ldrb	r1, [r5, #12]
   b5d4a:	4620      	mov	r0, r4
   b5d4c:	f7ff ff36 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b5d50:	7b69      	ldrb	r1, [r5, #13]
   b5d52:	4620      	mov	r0, r4
   b5d54:	f7ff ff32 	bl	b5bbc <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b5d58:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b5d5c:	2101      	movs	r1, #1
   b5d5e:	f00c f91a 	bl	c1f96 <digitalWrite>
  _spiPort->endTransaction();
   b5d62:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b5d66:	f00b fc8c 	bl	c1682 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b5d6a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b5d6e:	b1c3      	cbz	r3, b5da2 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b5d70:	4910      	ldr	r1, [pc, #64]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5d72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d76:	f00b fb76 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b5d7a:	7b29      	ldrb	r1, [r5, #12]
   b5d7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d80:	2210      	movs	r2, #16
   b5d82:	f7fe fbdd 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b5d86:	490b      	ldr	r1, [pc, #44]	; (b5db4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b5d88:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d8c:	f00b fb6b 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b5d90:	7b69      	ldrb	r1, [r5, #13]
   b5d92:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5d96:	2210      	movs	r2, #16
}
   b5d98:	b004      	add	sp, #16
   b5d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b5d9e:	f7fe bbd6 	b.w	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b5da2:	b004      	add	sp, #16
   b5da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5da8:	000c680a 	.word	0x000c680a
   b5dac:	000c73b4 	.word	0x000c73b4
   b5db0:	000c683f 	.word	0x000c683f
   b5db4:	000c7ef9 	.word	0x000c7ef9

000b5db8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b5db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b5dba:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b5dbe:	4604      	mov	r4, r0
   b5dc0:	460d      	mov	r5, r1
   b5dc2:	4616      	mov	r6, r2
  if (_printDebug == true)
   b5dc4:	2b00      	cmp	r3, #0
   b5dc6:	f000 8082 	beq.w	b5ece <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b5dca:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b5dce:	4940      	ldr	r1, [pc, #256]	; (b5ed0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b5dd0:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b5dd4:	f00b fb47 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b5dd8:	782b      	ldrb	r3, [r5, #0]
   b5dda:	2b01      	cmp	r3, #1
   b5ddc:	d13c      	bne.n	b5e58 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b5dde:	493d      	ldr	r1, [pc, #244]	; (b5ed4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b5de0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b5de4:	f00b fb3f 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b5de8:	493b      	ldr	r1, [pc, #236]	; (b5ed8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b5dea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5dee:	f00b fb3a 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b5df2:	882b      	ldrh	r3, [r5, #0]
   b5df4:	f240 7201 	movw	r2, #1793	; 0x701
   b5df8:	4293      	cmp	r3, r2
   b5dfa:	d145      	bne.n	b5e88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b5dfc:	4937      	ldr	r1, [pc, #220]	; (b5edc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b5dfe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b5e02:	f00b fb30 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b5e06:	4936      	ldr	r1, [pc, #216]	; (b5ee0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b5e08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5e0c:	f00b fb2b 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
   b5e10:	8869      	ldrh	r1, [r5, #2]
   b5e12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5e16:	2210      	movs	r2, #16
   b5e18:	f00b fb41 	bl	c149e <_ZN5Print11printNumberEmh>
    if (printPayload)
   b5e1c:	2f01      	cmp	r7, #1
   b5e1e:	d101      	bne.n	b5e24 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b5e20:	2e00      	cmp	r6, #0
   b5e22:	d049      	beq.n	b5eb8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b5e24:	492f      	ldr	r1, [pc, #188]	; (b5ee4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b5e26:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b5e2a:	4f2f      	ldr	r7, [pc, #188]	; (b5ee8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b5e2c:	f00b fb1b 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
   b5e30:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b5e32:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b5e34:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b5e38:	b2b3      	uxth	r3, r6
   b5e3a:	429a      	cmp	r2, r3
   b5e3c:	d941      	bls.n	b5ec2 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b5e3e:	4639      	mov	r1, r7
   b5e40:	f00b fb11 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b5e44:	b2b3      	uxth	r3, r6
   b5e46:	68a9      	ldr	r1, [r5, #8]
   b5e48:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5e4c:	5cc9      	ldrb	r1, [r1, r3]
   b5e4e:	2210      	movs	r2, #16
   b5e50:	f7fe fb76 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b5e54:	3601      	adds	r6, #1
   b5e56:	e7ec      	b.n	b5e32 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b5e58:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b5e5a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b5e5e:	d101      	bne.n	b5e64 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b5e60:	4922      	ldr	r1, [pc, #136]	; (b5eec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b5e62:	e7bf      	b.n	b5de4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b5e64:	2b06      	cmp	r3, #6
   b5e66:	d101      	bne.n	b5e6c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b5e68:	4921      	ldr	r1, [pc, #132]	; (b5ef0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b5e6a:	e7bb      	b.n	b5de4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b5e6c:	2b0a      	cmp	r3, #10
   b5e6e:	d101      	bne.n	b5e74 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b5e70:	4920      	ldr	r1, [pc, #128]	; (b5ef4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b5e72:	e7b7      	b.n	b5de4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b5e74:	4920      	ldr	r1, [pc, #128]	; (b5ef8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b5e76:	f00b faf6 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b5e7a:	7829      	ldrb	r1, [r5, #0]
   b5e7c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5e80:	2210      	movs	r2, #16
   b5e82:	f7fe fb5d 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b5e86:	e7af      	b.n	b5de8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b5e88:	f640 0206 	movw	r2, #2054	; 0x806
   b5e8c:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b5e8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b5e92:	d101      	bne.n	b5e98 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b5e94:	4919      	ldr	r1, [pc, #100]	; (b5efc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b5e96:	e7b4      	b.n	b5e02 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b5e98:	f640 1206 	movw	r2, #2310	; 0x906
   b5e9c:	4293      	cmp	r3, r2
   b5e9e:	d101      	bne.n	b5ea4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b5ea0:	4917      	ldr	r1, [pc, #92]	; (b5f00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b5ea2:	e7ae      	b.n	b5e02 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b5ea4:	4914      	ldr	r1, [pc, #80]	; (b5ef8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b5ea6:	f00b fade 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b5eaa:	7869      	ldrb	r1, [r5, #1]
   b5eac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5eb0:	2210      	movs	r2, #16
   b5eb2:	f7fe fb45 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b5eb6:	e7a6      	b.n	b5e06 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b5eb8:	4912      	ldr	r1, [pc, #72]	; (b5f04 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b5eba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5ebe:	f00b fad2 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b5ec2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b5ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b5eca:	f00b bad0 	b.w	c146e <_ZN5Print7printlnEv>
}
   b5ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5ed0:	000c6850 	.word	0x000c6850
   b5ed4:	000c6855 	.word	0x000c6855
   b5ed8:	000c6865 	.word	0x000c6865
   b5edc:	000c686a 	.word	0x000c686a
   b5ee0:	000c6878 	.word	0x000c6878
   b5ee4:	000c6881 	.word	0x000c6881
   b5ee8:	000c7ef9 	.word	0x000c7ef9
   b5eec:	000c6859 	.word	0x000c6859
   b5ef0:	000c685d 	.word	0x000c685d
   b5ef4:	000c6861 	.word	0x000c6861
   b5ef8:	000c6ad6 	.word	0x000c6ad6
   b5efc:	000c686e 	.word	0x000c686e
   b5f00:	000c6873 	.word	0x000c6873
   b5f04:	000c688b 	.word	0x000c688b

000b5f08 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   b5f08:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b5f0a:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   b5f0e:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   b5f10:	b955      	cbnz	r5, b5f28 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   b5f12:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b5f16:	b90b      	cbnz	r3, b5f1c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   b5f18:	2000      	movs	r0, #0
}
   b5f1a:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   b5f1c:	491a      	ldr	r1, [pc, #104]	; (b5f88 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b5f1e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5f22:	f00b faba 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b5f26:	e7f7      	b.n	b5f18 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   b5f28:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   b5f2c:	b12b      	cbz	r3, b5f3a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   b5f2e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b5f32:	2b00      	cmp	r3, #0
   b5f34:	d0f0      	beq.n	b5f18 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   b5f36:	4915      	ldr	r1, [pc, #84]	; (b5f8c <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   b5f38:	e7f1      	b.n	b5f1e <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   b5f3a:	4628      	mov	r0, r5
   b5f3c:	f7fe f8ad 	bl	b409a <_Znaj>
   b5f40:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b5f44:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   b5f48:	b930      	cbnz	r0, b5f58 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b5f4a:	b91b      	cbnz	r3, b5f54 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   b5f4c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b5f50:	2b00      	cmp	r3, #0
   b5f52:	d0e1      	beq.n	b5f18 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   b5f54:	490e      	ldr	r1, [pc, #56]	; (b5f90 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   b5f56:	e7e2      	b.n	b5f1e <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   b5f58:	b17b      	cbz	r3, b5f7a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   b5f5a:	490e      	ldr	r1, [pc, #56]	; (b5f94 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   b5f5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b5f60:	f00b fa81 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   b5f64:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b5f68:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   b5f6c:	220a      	movs	r2, #10
   b5f6e:	4628      	mov	r0, r5
   b5f70:	f00b fa95 	bl	c149e <_ZN5Print11printNumberEmh>
        n += println();
   b5f74:	4628      	mov	r0, r5
   b5f76:	f00b fa7a 	bl	c146e <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   b5f7a:	2300      	movs	r3, #0
   b5f7c:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   b5f80:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   b5f84:	2001      	movs	r0, #1
   b5f86:	e7c8      	b.n	b5f1a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   b5f88:	000c689d 	.word	0x000c689d
   b5f8c:	000c68ee 	.word	0x000c68ee
   b5f90:	000c6931 	.word	0x000c6931
   b5f94:	000c6955 	.word	0x000c6955

000b5f98 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   b5f98:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b5f9c:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   b5fa0:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b5fa2:	bf3b      	ittet	cc
   b5fa4:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   b5fa8:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   b5faa:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   b5fac:	1a80      	subcc	r0, r0, r2
   b5fae:	b280      	uxth	r0, r0
}
   b5fb0:	4770      	bx	lr

000b5fb2 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   b5fb2:	b508      	push	{r3, lr}
   b5fb4:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   b5fb6:	f7ff ffef 	bl	b5f98 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   b5fba:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   b5fbe:	1a18      	subs	r0, r3, r0
}
   b5fc0:	b280      	uxth	r0, r0
   b5fc2:	bd08      	pop	{r3, pc}

000b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   b5fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   b5fc8:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   b5fcc:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   b5fd0:	1aed      	subs	r5, r5, r3
   b5fd2:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   b5fd4:	4295      	cmp	r5, r2
   b5fd6:	bf28      	it	cs
   b5fd8:	4615      	movcs	r5, r2
{
   b5fda:	4616      	mov	r6, r2
   b5fdc:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b5fde:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b5fe2:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b5fe4:	462a      	mov	r2, r5
   b5fe6:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   b5fe8:	b2bf      	uxth	r7, r7
{
   b5fea:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   b5fec:	f00e fa94 	bl	c4518 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   b5ff0:	b19f      	cbz	r7, b601a <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   b5ff2:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   b5ff6:	463a      	mov	r2, r7
   b5ff8:	eb08 0105 	add.w	r1, r8, r5
   b5ffc:	f00e fa8c 	bl	c4518 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   b6000:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   b6004:	4620      	mov	r0, r4
   b6006:	f7ff ffc7 	bl	b5f98 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   b600a:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   b600e:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   b6010:	bf38      	it	cc
   b6012:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   b6016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   b601a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   b601e:	4416      	add	r6, r2
   b6020:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   b6024:	e7ee      	b.n	b6004 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000b6028 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   b6028:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b602a:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b602e:	4604      	mov	r4, r0
   b6030:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b6032:	b113      	cbz	r3, b603a <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   b6034:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b6038:	b953      	cbnz	r3, b6050 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   b603a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b603e:	b128      	cbz	r0, b604c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   b6040:	4924      	ldr	r1, [pc, #144]	; (b60d4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b6042:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b6046:	f00b fa28 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b604a:	2000      	movs	r0, #0
}
   b604c:	b003      	add	sp, #12
   b604e:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   b6050:	f7ff ffaf 	bl	b5fb2 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   b6054:	886b      	ldrh	r3, [r5, #2]
   b6056:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   b6058:	b29b      	uxth	r3, r3
   b605a:	4283      	cmp	r3, r0
   b605c:	d908      	bls.n	b6070 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b605e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b6062:	b91b      	cbnz	r3, b606c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   b6064:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b6068:	2800      	cmp	r0, #0
   b606a:	d0ef      	beq.n	b604c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   b606c:	491a      	ldr	r1, [pc, #104]	; (b60d8 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   b606e:	e7e8      	b.n	b6042 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b6070:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   b6074:	2202      	movs	r2, #2
   b6076:	4669      	mov	r1, sp
   b6078:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   b607a:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   b607e:	f7ff ffa1 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   b6082:	2201      	movs	r2, #1
   b6084:	4629      	mov	r1, r5
   b6086:	4620      	mov	r0, r4
   b6088:	f7ff ff9c 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   b608c:	2201      	movs	r2, #1
   b608e:	18a9      	adds	r1, r5, r2
   b6090:	4620      	mov	r0, r4
   b6092:	f7ff ff97 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   b6096:	886b      	ldrh	r3, [r5, #2]
   b6098:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   b609c:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   b609e:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   b60a0:	a901      	add	r1, sp, #4
   b60a2:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   b60a4:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   b60a8:	f7ff ff8c 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   b60ac:	886a      	ldrh	r2, [r5, #2]
   b60ae:	68a9      	ldr	r1, [r5, #8]
   b60b0:	4620      	mov	r0, r4
   b60b2:	f7ff ff87 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   b60b6:	2201      	movs	r2, #1
   b60b8:	f105 010c 	add.w	r1, r5, #12
   b60bc:	4620      	mov	r0, r4
   b60be:	f7ff ff81 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   b60c2:	4620      	mov	r0, r4
   b60c4:	2201      	movs	r2, #1
   b60c6:	f105 010d 	add.w	r1, r5, #13
   b60ca:	f7ff ff7b 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b60ce:	2001      	movs	r0, #1
   b60d0:	e7bc      	b.n	b604c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   b60d2:	bf00      	nop
   b60d4:	000c697b 	.word	0x000c697b
   b60d8:	000c69a3 	.word	0x000c69a3

000b60dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   b60dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   b60e0:	780e      	ldrb	r6, [r1, #0]
   b60e2:	2e0d      	cmp	r6, #13
{
   b60e4:	4604      	mov	r4, r0
   b60e6:	460d      	mov	r5, r1
  switch (msg->cls)
   b60e8:	f001 8228 	beq.w	b753c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   b60ec:	d809      	bhi.n	b6102 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   b60ee:	2e02      	cmp	r6, #2
   b60f0:	f000 879a 	beq.w	b7028 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   b60f4:	2e06      	cmp	r6, #6
   b60f6:	f001 81cc 	beq.w	b7492 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   b60fa:	2e01      	cmp	r6, #1
   b60fc:	d04f      	beq.n	b619e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   b60fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   b6102:	2e13      	cmp	r6, #19
   b6104:	f001 83eb 	beq.w	b78de <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   b6108:	2e28      	cmp	r6, #40	; 0x28
   b610a:	f001 84ca 	beq.w	b7aa2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   b610e:	2e10      	cmp	r6, #16
   b6110:	d1f5      	bne.n	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   b6112:	680b      	ldr	r3, [r1, #0]
   b6114:	4a8e      	ldr	r2, [pc, #568]	; (b6350 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   b6116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b611a:	4293      	cmp	r3, r2
   b611c:	f041 826a 	bne.w	b75f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   b6120:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   b6122:	2e00      	cmp	r6, #0
   b6124:	d0eb      	beq.n	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   b6126:	68a8      	ldr	r0, [r5, #8]
   b6128:	2100      	movs	r1, #0
   b612a:	f7fe f9e9 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b612e:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   b6130:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b6132:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b6134:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   b6136:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b6138:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b613a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b613c:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   b613e:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b6140:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b6142:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   b6144:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   b6146:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   b6148:	68a8      	ldr	r0, [r5, #8]
   b614a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   b614c:	2108      	movs	r1, #8
   b614e:	f7fe f9d7 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6152:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6154:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b6156:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6158:	210c      	movs	r1, #12
   b615a:	f7fe f9de 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   b615e:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6160:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b6162:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6164:	210e      	movs	r1, #14
   b6166:	f7fe f9d8 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   b616a:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b616c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b616e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6172:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6174:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b6176:	6a1a      	ldr	r2, [r3, #32]
   b6178:	b17a      	cbz	r2, b619a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b617a:	7819      	ldrb	r1, [r3, #0]
   b617c:	0708      	lsls	r0, r1, #28
   b617e:	d40c      	bmi.n	b619a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   b6180:	1d19      	adds	r1, r3, #4
   b6182:	3314      	adds	r3, #20
   b6184:	f851 0b04 	ldr.w	r0, [r1], #4
   b6188:	f842 0b04 	str.w	r0, [r2], #4
   b618c:	4299      	cmp	r1, r3
   b618e:	d1f9      	bne.n	b6184 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   b6190:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   b6192:	7813      	ldrb	r3, [r2, #0]
   b6194:	f043 0308 	orr.w	r3, r3, #8
   b6198:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   b619a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   b619c:	e03d      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   b619e:	680b      	ldr	r3, [r1, #0]
   b61a0:	4a6c      	ldr	r2, [pc, #432]	; (b6354 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   b61a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b61a6:	4293      	cmp	r3, r2
   b61a8:	d141      	bne.n	b622e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   b61aa:	68c6      	ldr	r6, [r0, #12]
   b61ac:	2e00      	cmp	r6, #0
   b61ae:	d0a6      	beq.n	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   b61b0:	68a8      	ldr	r0, [r5, #8]
   b61b2:	2100      	movs	r1, #0
   b61b4:	f7fe f9a4 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b61b8:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61ba:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b61bc:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61be:	2104      	movs	r1, #4
   b61c0:	f7fe f99e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   b61c4:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61c6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b61c8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61ca:	2108      	movs	r1, #8
   b61cc:	f7fe f998 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   b61d0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61d2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b61d4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b61d6:	210c      	movs	r1, #12
   b61d8:	f7fe f992 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   b61dc:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   b61de:	68a8      	ldr	r0, [r5, #8]
   b61e0:	68e6      	ldr	r6, [r4, #12]
   b61e2:	2110      	movs	r1, #16
   b61e4:	f7fe f98c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b61e8:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b61ea:	68e3      	ldr	r3, [r4, #12]
   b61ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b61f0:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b61f2:	68e3      	ldr	r3, [r4, #12]
   b61f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b61f6:	b17a      	cbz	r2, b6218 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b61f8:	7819      	ldrb	r1, [r3, #0]
   b61fa:	0709      	lsls	r1, r1, #28
   b61fc:	d40c      	bmi.n	b6218 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   b61fe:	1d19      	adds	r1, r3, #4
   b6200:	3318      	adds	r3, #24
   b6202:	f851 0b04 	ldr.w	r0, [r1], #4
   b6206:	f842 0b04 	str.w	r0, [r2], #4
   b620a:	4299      	cmp	r1, r3
   b620c:	d1f9      	bne.n	b6202 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b620e:	68e2      	ldr	r2, [r4, #12]
   b6210:	7813      	ldrb	r3, [r2, #0]
   b6212:	f043 0308 	orr.w	r3, r3, #8
   b6216:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b6218:	68e3      	ldr	r3, [r4, #12]
   b621a:	781b      	ldrb	r3, [r3, #0]
   b621c:	075f      	lsls	r7, r3, #29
   b621e:	f57f af6e 	bpl.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   b6222:	4629      	mov	r1, r5
   b6224:	4620      	mov	r0, r4
}
   b6226:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   b622a:	f7ff befd 	b.w	b6028 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   b622e:	4a4a      	ldr	r2, [pc, #296]	; (b6358 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   b6230:	4293      	cmp	r3, r2
   b6232:	d13d      	bne.n	b62b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   b6234:	6906      	ldr	r6, [r0, #16]
   b6236:	2e00      	cmp	r6, #0
   b6238:	f43f af61 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   b623c:	68a8      	ldr	r0, [r5, #8]
   b623e:	2100      	movs	r1, #0
   b6240:	f7fe f95e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6244:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b6246:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b6248:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b624a:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   b624c:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b624e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b6250:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b6252:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   b6254:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b6256:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b6258:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b625a:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   b625c:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b625e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b6260:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   b6262:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   b6264:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   b6266:	68a8      	ldr	r0, [r5, #8]
   b6268:	6926      	ldr	r6, [r4, #16]
   b626a:	2108      	movs	r1, #8
   b626c:	f7fe f948 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6270:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   b6272:	68a8      	ldr	r0, [r5, #8]
   b6274:	6926      	ldr	r6, [r4, #16]
   b6276:	210c      	movs	r1, #12
   b6278:	f7fe f942 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b627c:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b627e:	6923      	ldr	r3, [r4, #16]
   b6280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6284:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6286:	6923      	ldr	r3, [r4, #16]
   b6288:	6a1a      	ldr	r2, [r3, #32]
   b628a:	b17a      	cbz	r2, b62ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b628c:	7819      	ldrb	r1, [r3, #0]
   b628e:	070e      	lsls	r6, r1, #28
   b6290:	d40c      	bmi.n	b62ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   b6292:	1d19      	adds	r1, r3, #4
   b6294:	3314      	adds	r3, #20
   b6296:	f851 0b04 	ldr.w	r0, [r1], #4
   b629a:	f842 0b04 	str.w	r0, [r2], #4
   b629e:	4299      	cmp	r1, r3
   b62a0:	d1f9      	bne.n	b6296 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b62a2:	6922      	ldr	r2, [r4, #16]
   b62a4:	7813      	ldrb	r3, [r2, #0]
   b62a6:	f043 0308 	orr.w	r3, r3, #8
   b62aa:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b62ac:	6923      	ldr	r3, [r4, #16]
   b62ae:	e7b4      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   b62b0:	4a2a      	ldr	r2, [pc, #168]	; (b635c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   b62b2:	4293      	cmp	r3, r2
   b62b4:	d154      	bne.n	b6360 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   b62b6:	6946      	ldr	r6, [r0, #20]
   b62b8:	2e00      	cmp	r6, #0
   b62ba:	f43f af20 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   b62be:	68a8      	ldr	r0, [r5, #8]
   b62c0:	2100      	movs	r1, #0
   b62c2:	f7fe f91d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b62c6:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   b62c8:	68a8      	ldr	r0, [r5, #8]
   b62ca:	6966      	ldr	r6, [r4, #20]
   b62cc:	2104      	movs	r1, #4
   b62ce:	f7fe f924 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b62d2:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   b62d4:	68a8      	ldr	r0, [r5, #8]
   b62d6:	6966      	ldr	r6, [r4, #20]
   b62d8:	2106      	movs	r1, #6
   b62da:	f7fe f91e 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b62de:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   b62e0:	68a8      	ldr	r0, [r5, #8]
   b62e2:	6966      	ldr	r6, [r4, #20]
   b62e4:	2108      	movs	r1, #8
   b62e6:	f7fe f918 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b62ea:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   b62ec:	68a8      	ldr	r0, [r5, #8]
   b62ee:	6966      	ldr	r6, [r4, #20]
   b62f0:	210a      	movs	r1, #10
   b62f2:	f7fe f912 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b62f6:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   b62f8:	68a8      	ldr	r0, [r5, #8]
   b62fa:	6966      	ldr	r6, [r4, #20]
   b62fc:	210c      	movs	r1, #12
   b62fe:	f7fe f90c 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6302:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   b6304:	68a8      	ldr	r0, [r5, #8]
   b6306:	6966      	ldr	r6, [r4, #20]
   b6308:	210e      	movs	r1, #14
   b630a:	f7fe f906 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b630e:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   b6310:	68a8      	ldr	r0, [r5, #8]
   b6312:	6966      	ldr	r6, [r4, #20]
   b6314:	2110      	movs	r1, #16
   b6316:	f7fe f900 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b631a:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b631c:	6963      	ldr	r3, [r4, #20]
   b631e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6322:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6324:	6963      	ldr	r3, [r4, #20]
   b6326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b6328:	b17a      	cbz	r2, b634a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b632a:	7819      	ldrb	r1, [r3, #0]
   b632c:	0708      	lsls	r0, r1, #28
   b632e:	d40c      	bmi.n	b634a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   b6330:	1d19      	adds	r1, r3, #4
   b6332:	3318      	adds	r3, #24
   b6334:	f851 0b04 	ldr.w	r0, [r1], #4
   b6338:	f842 0b04 	str.w	r0, [r2], #4
   b633c:	4299      	cmp	r1, r3
   b633e:	d1f9      	bne.n	b6334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   b6340:	6962      	ldr	r2, [r4, #20]
   b6342:	7813      	ldrb	r3, [r2, #0]
   b6344:	f043 0308 	orr.w	r3, r3, #8
   b6348:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   b634a:	6963      	ldr	r3, [r4, #20]
   b634c:	e765      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b634e:	bf00      	nop
   b6350:	00101400 	.word	0x00101400
   b6354:	00140100 	.word	0x00140100
   b6358:	00100300 	.word	0x00100300
   b635c:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   b6360:	4a8c      	ldr	r2, [pc, #560]	; (b6594 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   b6362:	4293      	cmp	r3, r2
   b6364:	d149      	bne.n	b63fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   b6366:	69c6      	ldr	r6, [r0, #28]
   b6368:	2e00      	cmp	r6, #0
   b636a:	f43f aec8 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   b636e:	68a8      	ldr	r0, [r5, #8]
   b6370:	2100      	movs	r1, #0
   b6372:	f7fe f8c5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6376:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b6378:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b637a:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   b637c:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   b637e:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6380:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b6382:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6384:	2108      	movs	r1, #8
   b6386:	f7fe f8bb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   b638a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b638c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b638e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6390:	210c      	movs	r1, #12
   b6392:	f7fe f8b5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   b6396:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6398:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b639a:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b639c:	2110      	movs	r1, #16
   b639e:	f7fe f8af 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   b63a2:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   b63a4:	68a8      	ldr	r0, [r5, #8]
   b63a6:	69e6      	ldr	r6, [r4, #28]
   b63a8:	2114      	movs	r1, #20
   b63aa:	f7fe f8a9 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b63ae:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   b63b0:	68a8      	ldr	r0, [r5, #8]
   b63b2:	69e6      	ldr	r6, [r4, #28]
   b63b4:	2118      	movs	r1, #24
   b63b6:	f7fe f8a3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b63ba:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   b63bc:	68a8      	ldr	r0, [r5, #8]
   b63be:	69e6      	ldr	r6, [r4, #28]
   b63c0:	211c      	movs	r1, #28
   b63c2:	f7fe f89d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b63c6:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b63c8:	69e3      	ldr	r3, [r4, #28]
   b63ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b63ce:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b63d0:	69e3      	ldr	r3, [r4, #28]
   b63d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b63d4:	b17a      	cbz	r2, b63f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b63d6:	7819      	ldrb	r1, [r3, #0]
   b63d8:	0709      	lsls	r1, r1, #28
   b63da:	d40c      	bmi.n	b63f6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   b63dc:	1d19      	adds	r1, r3, #4
   b63de:	3324      	adds	r3, #36	; 0x24
   b63e0:	f851 0b04 	ldr.w	r0, [r1], #4
   b63e4:	f842 0b04 	str.w	r0, [r2], #4
   b63e8:	4299      	cmp	r1, r3
   b63ea:	d1f9      	bne.n	b63e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b63ec:	69e2      	ldr	r2, [r4, #28]
   b63ee:	7813      	ldrb	r3, [r2, #0]
   b63f0:	f043 0308 	orr.w	r3, r3, #8
   b63f4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   b63f6:	69e3      	ldr	r3, [r4, #28]
   b63f8:	e70f      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   b63fa:	4a67      	ldr	r2, [pc, #412]	; (b6598 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   b63fc:	4293      	cmp	r3, r2
   b63fe:	f040 80cd 	bne.w	b659c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   b6402:	6a06      	ldr	r6, [r0, #32]
   b6404:	2e00      	cmp	r6, #0
   b6406:	f43f ae7a 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   b640a:	68a8      	ldr	r0, [r5, #8]
   b640c:	2100      	movs	r1, #0
   b640e:	f7fe f877 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6412:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   b6414:	68a8      	ldr	r0, [r5, #8]
   b6416:	6a26      	ldr	r6, [r4, #32]
   b6418:	2104      	movs	r1, #4
   b641a:	f7fe f87e 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b641e:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   b6420:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b6422:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6424:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   b6426:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b6428:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b642a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b642c:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   b642e:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b6430:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b6432:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6434:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   b6436:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b6438:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b643a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b643c:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   b643e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b6440:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b6442:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6444:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   b6446:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b6448:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b644a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b644c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   b644e:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   b6450:	210c      	movs	r1, #12
   b6452:	68a8      	ldr	r0, [r5, #8]
   b6454:	6a26      	ldr	r6, [r4, #32]
   b6456:	f7fe f853 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b645a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b645c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b645e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6460:	2110      	movs	r1, #16
   b6462:	f7fe f84d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   b6466:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b6468:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b646a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b646c:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   b646e:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b6470:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b6472:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6474:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   b6476:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b6478:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b647a:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b647c:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   b647e:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b6480:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b6482:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6484:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   b6486:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6488:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b648a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b648c:	2118      	movs	r1, #24
   b648e:	f7fe f837 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   b6492:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6494:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b6496:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6498:	211c      	movs	r1, #28
   b649a:	f7fe f831 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   b649e:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64a0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b64a2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64a4:	2120      	movs	r1, #32
   b64a6:	f7fe f82b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   b64aa:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64ac:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b64ae:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64b0:	2124      	movs	r1, #36	; 0x24
   b64b2:	f7fe f825 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   b64b6:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   b64b8:	68a8      	ldr	r0, [r5, #8]
   b64ba:	6a26      	ldr	r6, [r4, #32]
   b64bc:	2128      	movs	r1, #40	; 0x28
   b64be:	f7fe f81f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b64c2:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   b64c4:	6a26      	ldr	r6, [r4, #32]
   b64c6:	68a8      	ldr	r0, [r5, #8]
   b64c8:	212c      	movs	r1, #44	; 0x2c
   b64ca:	f7fe f819 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b64ce:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64d0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b64d2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64d4:	2130      	movs	r1, #48	; 0x30
   b64d6:	f7fe f813 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   b64da:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64dc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b64de:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64e0:	2134      	movs	r1, #52	; 0x34
   b64e2:	f7fe f80d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   b64e6:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64e8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b64ea:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64ec:	2138      	movs	r1, #56	; 0x38
   b64ee:	f7fe f807 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   b64f2:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64f4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b64f6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b64f8:	213c      	movs	r1, #60	; 0x3c
   b64fa:	f7fe f801 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   b64fe:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6500:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b6502:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6504:	2140      	movs	r1, #64	; 0x40
   b6506:	f7fd fffb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   b650a:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   b650c:	68a8      	ldr	r0, [r5, #8]
   b650e:	6a26      	ldr	r6, [r4, #32]
   b6510:	2144      	movs	r1, #68	; 0x44
   b6512:	f7fd fff5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6516:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   b6518:	68a8      	ldr	r0, [r5, #8]
   b651a:	6a26      	ldr	r6, [r4, #32]
   b651c:	2148      	movs	r1, #72	; 0x48
   b651e:	f7fd ffef 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6522:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   b6524:	68a8      	ldr	r0, [r5, #8]
   b6526:	6a26      	ldr	r6, [r4, #32]
   b6528:	214c      	movs	r1, #76	; 0x4c
   b652a:	f7fd fff6 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b652e:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   b6532:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b6534:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   b6536:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   b653a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b653e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6540:	68a8      	ldr	r0, [r5, #8]
   b6542:	2154      	movs	r1, #84	; 0x54
   b6544:	f7fd ffdc 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   b6548:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b654a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b654c:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b654e:	2158      	movs	r1, #88	; 0x58
   b6550:	f7fd ffe3 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   b6554:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   b6558:	68a8      	ldr	r0, [r5, #8]
   b655a:	6a26      	ldr	r6, [r4, #32]
   b655c:	215a      	movs	r1, #90	; 0x5a
   b655e:	f7fd ffdc 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6562:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b6566:	6a22      	ldr	r2, [r4, #32]
   b6568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b656c:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b656e:	6a22      	ldr	r2, [r4, #32]
   b6570:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6572:	6a21      	ldr	r1, [r4, #32]
   b6574:	6f08      	ldr	r0, [r1, #112]	; 0x70
   b6576:	b158      	cbz	r0, b6590 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6578:	780b      	ldrb	r3, [r1, #0]
   b657a:	071b      	lsls	r3, r3, #28
   b657c:	d408      	bmi.n	b6590 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   b657e:	225c      	movs	r2, #92	; 0x5c
   b6580:	3104      	adds	r1, #4
   b6582:	f00d ffc9 	bl	c4518 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b6586:	6a22      	ldr	r2, [r4, #32]
   b6588:	7813      	ldrb	r3, [r2, #0]
   b658a:	f043 0308 	orr.w	r3, r3, #8
   b658e:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   b6590:	6a23      	ldr	r3, [r4, #32]
   b6592:	e642      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b6594:	00200500 	.word	0x00200500
   b6598:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   b659c:	4a8e      	ldr	r2, [pc, #568]	; (b67d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   b659e:	4293      	cmp	r3, r2
   b65a0:	d137      	bne.n	b6612 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   b65a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   b65a4:	2b00      	cmp	r3, #0
   b65a6:	f43f adaa 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b65aa:	688a      	ldr	r2, [r1, #8]
   b65ac:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   b65ae:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   b65b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b65b2:	68a8      	ldr	r0, [r5, #8]
   b65b4:	2104      	movs	r1, #4
   b65b6:	f7fd ffa3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b65ba:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   b65bc:	68a8      	ldr	r0, [r5, #8]
   b65be:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b65c0:	2108      	movs	r1, #8
   b65c2:	f7fd ff9d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b65c6:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   b65c8:	68a8      	ldr	r0, [r5, #8]
   b65ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b65cc:	210c      	movs	r1, #12
   b65ce:	f7fd ff97 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b65d2:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   b65d4:	68a8      	ldr	r0, [r5, #8]
   b65d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b65d8:	2110      	movs	r1, #16
   b65da:	f7fd ff91 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b65de:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b65e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b65e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b65e6:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b65e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b65ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b65ec:	b17a      	cbz	r2, b660e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b65ee:	7819      	ldrb	r1, [r3, #0]
   b65f0:	070f      	lsls	r7, r1, #28
   b65f2:	d40c      	bmi.n	b660e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   b65f4:	1d19      	adds	r1, r3, #4
   b65f6:	3318      	adds	r3, #24
   b65f8:	f851 0b04 	ldr.w	r0, [r1], #4
   b65fc:	f842 0b04 	str.w	r0, [r2], #4
   b6600:	4299      	cmp	r1, r3
   b6602:	d1f9      	bne.n	b65f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   b6604:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b6606:	7813      	ldrb	r3, [r2, #0]
   b6608:	f043 0308 	orr.w	r3, r3, #8
   b660c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   b660e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6610:	e603      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   b6612:	4a72      	ldr	r2, [pc, #456]	; (b67dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   b6614:	4293      	cmp	r3, r2
   b6616:	d139      	bne.n	b668c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   b6618:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   b661a:	2e00      	cmp	r6, #0
   b661c:	f43f ad6f 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   b6620:	68a8      	ldr	r0, [r5, #8]
   b6622:	2100      	movs	r1, #0
   b6624:	f7fd ff6c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6628:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b662a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b662c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b662e:	2104      	movs	r1, #4
   b6630:	f7fd ff66 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   b6634:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6636:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b6638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b663a:	2108      	movs	r1, #8
   b663c:	f7fd ff60 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   b6640:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6642:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b6644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6646:	210c      	movs	r1, #12
   b6648:	f7fd ff5a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   b664c:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   b664e:	68a8      	ldr	r0, [r5, #8]
   b6650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   b6652:	2110      	movs	r1, #16
   b6654:	f7fd ff54 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6658:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b665a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b665c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6660:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b6666:	b17a      	cbz	r2, b6688 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6668:	7819      	ldrb	r1, [r3, #0]
   b666a:	070e      	lsls	r6, r1, #28
   b666c:	d40c      	bmi.n	b6688 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   b666e:	1d19      	adds	r1, r3, #4
   b6670:	3318      	adds	r3, #24
   b6672:	f851 0b04 	ldr.w	r0, [r1], #4
   b6676:	f842 0b04 	str.w	r0, [r2], #4
   b667a:	4299      	cmp	r1, r3
   b667c:	d1f9      	bne.n	b6672 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b667e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   b6680:	7813      	ldrb	r3, [r2, #0]
   b6682:	f043 0308 	orr.w	r3, r3, #8
   b6686:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   b6688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b668a:	e5c6      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   b668c:	4a54      	ldr	r2, [pc, #336]	; (b67e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   b668e:	4293      	cmp	r3, r2
   b6690:	d151      	bne.n	b6736 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   b6692:	6b06      	ldr	r6, [r0, #48]	; 0x30
   b6694:	2e00      	cmp	r6, #0
   b6696:	f43f ad32 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   b669a:	68a8      	ldr	r0, [r5, #8]
   b669c:	2100      	movs	r1, #0
   b669e:	f7fd ff2f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b66a2:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b66a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66a8:	2104      	movs	r1, #4
   b66aa:	f7fd ff29 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   b66ae:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b66b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66b4:	2108      	movs	r1, #8
   b66b6:	f7fd ff23 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   b66ba:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66bc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b66be:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66c0:	210c      	movs	r1, #12
   b66c2:	f7fd ff1d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   b66c6:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   b66c8:	68a8      	ldr	r0, [r5, #8]
   b66ca:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b66cc:	2110      	movs	r1, #16
   b66ce:	f7fd ff17 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b66d2:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   b66d4:	68a8      	ldr	r0, [r5, #8]
   b66d6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b66d8:	2114      	movs	r1, #20
   b66da:	f7fd ff11 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b66de:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66e0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b66e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b66e4:	2118      	movs	r1, #24
   b66e6:	f7fd ff0b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   b66ea:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   b66ec:	68a8      	ldr	r0, [r5, #8]
   b66ee:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b66f0:	211c      	movs	r1, #28
   b66f2:	f7fd ff05 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b66f6:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   b66f8:	68a8      	ldr	r0, [r5, #8]
   b66fa:	6b26      	ldr	r6, [r4, #48]	; 0x30
   b66fc:	2120      	movs	r1, #32
   b66fe:	f7fd feff 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6702:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6704:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b670a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b670c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b670e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b6710:	b17a      	cbz	r2, b6732 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6712:	7819      	ldrb	r1, [r3, #0]
   b6714:	0708      	lsls	r0, r1, #28
   b6716:	d40c      	bmi.n	b6732 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   b6718:	1d19      	adds	r1, r3, #4
   b671a:	3328      	adds	r3, #40	; 0x28
   b671c:	f851 0b04 	ldr.w	r0, [r1], #4
   b6720:	f842 0b04 	str.w	r0, [r2], #4
   b6724:	4299      	cmp	r1, r3
   b6726:	d1f9      	bne.n	b671c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b6728:	6b22      	ldr	r2, [r4, #48]	; 0x30
   b672a:	7813      	ldrb	r3, [r2, #0]
   b672c:	f043 0308 	orr.w	r3, r3, #8
   b6730:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   b6732:	6b23      	ldr	r3, [r4, #48]	; 0x30
   b6734:	e571      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   b6736:	4a2b      	ldr	r2, [pc, #172]	; (b67e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   b6738:	4293      	cmp	r3, r2
   b673a:	d155      	bne.n	b67e8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   b673c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b673e:	2b00      	cmp	r3, #0
   b6740:	f43f acdd 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b6744:	688a      	ldr	r2, [r1, #8]
   b6746:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   b6748:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   b674a:	6b46      	ldr	r6, [r0, #52]	; 0x34
   b674c:	68a8      	ldr	r0, [r5, #8]
   b674e:	2104      	movs	r1, #4
   b6750:	f7fd fed6 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6754:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6756:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b6758:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b675a:	2108      	movs	r1, #8
   b675c:	f7fd fed0 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   b6760:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6762:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b6764:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6766:	210c      	movs	r1, #12
   b6768:	f7fd feca 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   b676c:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b676e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b6770:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6772:	2110      	movs	r1, #16
   b6774:	f7fd fec4 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   b6778:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   b677a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   b677c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b677e:	7d12      	ldrb	r2, [r2, #20]
   b6780:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   b6782:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   b6784:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6786:	7d52      	ldrb	r2, [r2, #21]
   b6788:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   b678a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   b678c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b678e:	7d92      	ldrb	r2, [r2, #22]
   b6790:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   b6792:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b6794:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   b6796:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   b6798:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   b679a:	6b66      	ldr	r6, [r4, #52]	; 0x34
   b679c:	68a8      	ldr	r0, [r5, #8]
   b679e:	2118      	movs	r1, #24
   b67a0:	f7fd feae 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b67a4:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b67a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b67a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b67ac:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b67ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b67b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b67b2:	b17a      	cbz	r2, b67d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b67b4:	7819      	ldrb	r1, [r3, #0]
   b67b6:	0709      	lsls	r1, r1, #28
   b67b8:	d40c      	bmi.n	b67d4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   b67ba:	1d19      	adds	r1, r3, #4
   b67bc:	3320      	adds	r3, #32
   b67be:	f851 0b04 	ldr.w	r0, [r1], #4
   b67c2:	f842 0b04 	str.w	r0, [r2], #4
   b67c6:	4299      	cmp	r1, r3
   b67c8:	d1f9      	bne.n	b67be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   b67ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b67cc:	7813      	ldrb	r3, [r2, #0]
   b67ce:	f043 0308 	orr.w	r3, r3, #8
   b67d2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   b67d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b67d6:	e520      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b67d8:	00140900 	.word	0x00140900
   b67dc:	00141100 	.word	0x00141100
   b67e0:	00241200 	.word	0x00241200
   b67e4:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   b67e8:	4a30      	ldr	r2, [pc, #192]	; (b68ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   b67ea:	4293      	cmp	r3, r2
   b67ec:	d160      	bne.n	b68b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   b67ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   b67f0:	2b00      	cmp	r3, #0
   b67f2:	f43f ac84 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b67f6:	688a      	ldr	r2, [r1, #8]
   b67f8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   b67fa:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b67fc:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b67fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   b6800:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   b6802:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   b6804:	6b86      	ldr	r6, [r0, #56]	; 0x38
   b6806:	68a8      	ldr	r0, [r5, #8]
   b6808:	2104      	movs	r1, #4
   b680a:	f7fd fe79 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b680e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6810:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b6812:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6814:	2108      	movs	r1, #8
   b6816:	f7fd fe73 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   b681a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b681c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b681e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6820:	210c      	movs	r1, #12
   b6822:	f7fd fe6d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   b6826:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6828:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b682a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b682c:	2110      	movs	r1, #16
   b682e:	f7fd fe67 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   b6832:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6834:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b6836:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6838:	2114      	movs	r1, #20
   b683a:	f7fd fe61 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   b683e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b6840:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   b6842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b6844:	7e12      	ldrb	r2, [r2, #24]
   b6846:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b6848:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   b684a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b684c:	7e52      	ldrb	r2, [r2, #25]
   b684e:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b6850:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   b6852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b6854:	7e92      	ldrb	r2, [r2, #26]
   b6856:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b6858:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   b685a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b685c:	7ed2      	ldrb	r2, [r2, #27]
   b685e:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   b6860:	68a8      	ldr	r0, [r5, #8]
   b6862:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b6864:	211c      	movs	r1, #28
   b6866:	f7fd fe4b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b686a:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   b686c:	68a8      	ldr	r0, [r5, #8]
   b686e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   b6870:	2120      	movs	r1, #32
   b6872:	f7fd fe45 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6876:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b687a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b687e:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b6882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b6884:	b17a      	cbz	r2, b68a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6886:	7819      	ldrb	r1, [r3, #0]
   b6888:	070f      	lsls	r7, r1, #28
   b688a:	d40c      	bmi.n	b68a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   b688c:	1d19      	adds	r1, r3, #4
   b688e:	3328      	adds	r3, #40	; 0x28
   b6890:	f851 0b04 	ldr.w	r0, [r1], #4
   b6894:	f842 0b04 	str.w	r0, [r2], #4
   b6898:	4299      	cmp	r1, r3
   b689a:	d1f9      	bne.n	b6890 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   b689c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   b689e:	7813      	ldrb	r3, [r2, #0]
   b68a0:	f043 0308 	orr.w	r3, r3, #8
   b68a4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   b68a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b68a8:	e4b7      	b.n	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b68aa:	bf00      	nop
   b68ac:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   b68b0:	4aa1      	ldr	r2, [pc, #644]	; (b6b38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   b68b2:	4293      	cmp	r3, r2
   b68b4:	f040 80f0 	bne.w	b6a98 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   b68b8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   b68ba:	2e00      	cmp	r6, #0
   b68bc:	f43f ac1f 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   b68c0:	68a8      	ldr	r0, [r5, #8]
   b68c2:	2100      	movs	r1, #0
   b68c4:	f7fd fe1c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b68c8:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b68ca:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b68cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b68ce:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   b68d0:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b68d2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b68d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b68d6:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   b68d8:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   b68da:	68a8      	ldr	r0, [r5, #8]
   b68dc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b68de:	2106      	movs	r1, #6
   b68e0:	f7fd fe1b 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b68e4:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b68e6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b68e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b68ea:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   b68ec:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b68ee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b68f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b68f2:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   b68f4:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b68f6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b68f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b68fa:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   b68fc:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b68fe:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b6900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b6902:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   b6904:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   b6906:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b6908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b690a:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   b690c:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   b690e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6910:	68a8      	ldr	r0, [r5, #8]
   b6912:	2110      	movs	r1, #16
   b6914:	f7fd fdf4 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6918:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b691a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b691c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b691e:	2114      	movs	r1, #20
   b6920:	f7fd fdee 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   b6924:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b6926:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b6928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b692a:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   b692c:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b692e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b6930:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b6932:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   b6934:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b6936:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b6938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b693a:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   b693c:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   b693e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b6940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   b6942:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   b6944:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6946:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b6948:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b694a:	211c      	movs	r1, #28
   b694c:	f7fd fdd8 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   b6950:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6952:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b6954:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6956:	2120      	movs	r1, #32
   b6958:	f7fd fdd2 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   b695c:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b695e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b6960:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6962:	2124      	movs	r1, #36	; 0x24
   b6964:	f7fd fdcc 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   b6968:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b696a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b696c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b696e:	2128      	movs	r1, #40	; 0x28
   b6970:	f7fd fdc6 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   b6974:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   b6976:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6978:	68a8      	ldr	r0, [r5, #8]
   b697a:	212c      	movs	r1, #44	; 0x2c
   b697c:	f7fd fdc0 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6980:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   b6982:	68a8      	ldr	r0, [r5, #8]
   b6984:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6986:	2130      	movs	r1, #48	; 0x30
   b6988:	f7fd fdba 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b698c:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b698e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b6990:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6992:	2134      	movs	r1, #52	; 0x34
   b6994:	f7fd fdb4 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   b6998:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b699a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b699c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b699e:	2138      	movs	r1, #56	; 0x38
   b69a0:	f7fd fdae 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   b69a4:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69a6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b69a8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69aa:	213c      	movs	r1, #60	; 0x3c
   b69ac:	f7fd fda8 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   b69b0:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69b2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b69b4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69b6:	2140      	movs	r1, #64	; 0x40
   b69b8:	f7fd fda2 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   b69bc:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   b69be:	68a8      	ldr	r0, [r5, #8]
   b69c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b69c2:	2144      	movs	r1, #68	; 0x44
   b69c4:	f7fd fd9c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b69c8:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69ca:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b69cc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69ce:	2148      	movs	r1, #72	; 0x48
   b69d0:	f7fd fd96 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   b69d4:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69d6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b69d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69da:	214c      	movs	r1, #76	; 0x4c
   b69dc:	f7fd fd90 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   b69e0:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b69e4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69e6:	2150      	movs	r1, #80	; 0x50
   b69e8:	f7fd fd8a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   b69ec:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69ee:	2154      	movs	r1, #84	; 0x54
   b69f0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b69f2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b69f4:	f7fd fd84 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   b69f8:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   b69fa:	68a8      	ldr	r0, [r5, #8]
   b69fc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b69fe:	2158      	movs	r1, #88	; 0x58
   b6a00:	f7fd fd8b 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6a04:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   b6a08:	68a8      	ldr	r0, [r5, #8]
   b6a0a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a0c:	215a      	movs	r1, #90	; 0x5a
   b6a0e:	f7fd fd84 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6a12:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   b6a16:	68a8      	ldr	r0, [r5, #8]
   b6a18:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a1a:	215c      	movs	r1, #92	; 0x5c
   b6a1c:	f7fd fd7d 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6a20:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6a24:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b6a26:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6a28:	215e      	movs	r1, #94	; 0x5e
   b6a2a:	f7fd fd76 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   b6a2e:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   b6a32:	68a8      	ldr	r0, [r5, #8]
   b6a34:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a36:	2160      	movs	r1, #96	; 0x60
   b6a38:	f7fd fd6f 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6a3c:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   b6a40:	68a8      	ldr	r0, [r5, #8]
   b6a42:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a44:	2162      	movs	r1, #98	; 0x62
   b6a46:	f7fd fd68 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6a4a:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   b6a4e:	68a8      	ldr	r0, [r5, #8]
   b6a50:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a52:	2164      	movs	r1, #100	; 0x64
   b6a54:	f7fd fd54 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6a58:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   b6a5a:	68a8      	ldr	r0, [r5, #8]
   b6a5c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   b6a5e:	2168      	movs	r1, #104	; 0x68
   b6a60:	f7fd fd4e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6a64:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   b6a66:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6a6c:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   b6a6e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6a70:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6a72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b6a74:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   b6a78:	b158      	cbz	r0, b6a92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6a7a:	780b      	ldrb	r3, [r1, #0]
   b6a7c:	071e      	lsls	r6, r3, #28
   b6a7e:	d408      	bmi.n	b6a92 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   b6a80:	2274      	movs	r2, #116	; 0x74
   b6a82:	3104      	adds	r1, #4
   b6a84:	f00d fd48 	bl	c4518 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b6a88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   b6a8a:	7813      	ldrb	r3, [r2, #0]
   b6a8c:	f043 0308 	orr.w	r3, r3, #8
   b6a90:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   b6a92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6a94:	f7ff bbc1 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   b6a98:	4a28      	ldr	r2, [pc, #160]	; (b6b3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   b6a9a:	4293      	cmp	r3, r2
   b6a9c:	d150      	bne.n	b6b40 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   b6a9e:	6a86      	ldr	r6, [r0, #40]	; 0x28
   b6aa0:	2e00      	cmp	r6, #0
   b6aa2:	f43f ab2c 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   b6aa6:	68a8      	ldr	r0, [r5, #8]
   b6aa8:	2100      	movs	r1, #0
   b6aaa:	f7fd fd29 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6aae:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   b6ab0:	68a8      	ldr	r0, [r5, #8]
   b6ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b6ab4:	2104      	movs	r1, #4
   b6ab6:	f7fd fd23 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6aba:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6abc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b6abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6ac0:	2108      	movs	r1, #8
   b6ac2:	f7fd fd1d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   b6ac6:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   b6ac8:	68a8      	ldr	r0, [r5, #8]
   b6aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b6acc:	210c      	movs	r1, #12
   b6ace:	f7fd fd24 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6ad2:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   b6ad4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b6ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6ad8:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   b6ada:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   b6adc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b6ade:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6ae0:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   b6ae2:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   b6ae4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b6ae6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6ae8:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   b6aea:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   b6aec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b6aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6af0:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   b6af2:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   b6af4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b6af6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6af8:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   b6afa:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b6afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6afe:	68aa      	ldr	r2, [r5, #8]
   b6b00:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   b6b02:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6b06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b0a:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6b0e:	6a1a      	ldr	r2, [r3, #32]
   b6b10:	b17a      	cbz	r2, b6b32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6b12:	7819      	ldrb	r1, [r3, #0]
   b6b14:	0708      	lsls	r0, r1, #28
   b6b16:	d40c      	bmi.n	b6b32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   b6b18:	1d19      	adds	r1, r3, #4
   b6b1a:	3318      	adds	r3, #24
   b6b1c:	f851 0b04 	ldr.w	r0, [r1], #4
   b6b20:	f842 0b04 	str.w	r0, [r2], #4
   b6b24:	4299      	cmp	r1, r3
   b6b26:	d1f9      	bne.n	b6b1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   b6b28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6b2a:	7813      	ldrb	r3, [r2, #0]
   b6b2c:	f043 0308 	orr.w	r3, r3, #8
   b6b30:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   b6b32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6b34:	f7ff bb71 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b6b38:	00741700 	.word	0x00741700
   b6b3c:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   b6b40:	4a84      	ldr	r2, [pc, #528]	; (b6d54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   b6b42:	4293      	cmp	r3, r2
   b6b44:	d13a      	bne.n	b6bbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   b6b46:	6c06      	ldr	r6, [r0, #64]	; 0x40
   b6b48:	2e00      	cmp	r6, #0
   b6b4a:	f43f aad8 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   b6b4e:	68a8      	ldr	r0, [r5, #8]
   b6b50:	2100      	movs	r1, #0
   b6b52:	f7fd fcd5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6b56:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6b58:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b6b5a:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6b5c:	2104      	movs	r1, #4
   b6b5e:	f7fd fccf 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   b6b62:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6b64:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b6b66:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6b68:	2108      	movs	r1, #8
   b6b6a:	f7fd fcc9 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   b6b6e:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   b6b70:	68a8      	ldr	r0, [r5, #8]
   b6b72:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b6b74:	210c      	movs	r1, #12
   b6b76:	f7fd fcc3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6b7a:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   b6b7c:	68a8      	ldr	r0, [r5, #8]
   b6b7e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   b6b80:	2110      	movs	r1, #16
   b6b82:	f7fd fcbd 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6b86:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b6b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b8e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b6b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   b6b94:	b17a      	cbz	r2, b6bb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6b96:	7819      	ldrb	r1, [r3, #0]
   b6b98:	0709      	lsls	r1, r1, #28
   b6b9a:	d40c      	bmi.n	b6bb6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   b6b9c:	1d19      	adds	r1, r3, #4
   b6b9e:	3318      	adds	r3, #24
   b6ba0:	f851 0b04 	ldr.w	r0, [r1], #4
   b6ba4:	f842 0b04 	str.w	r0, [r2], #4
   b6ba8:	4299      	cmp	r1, r3
   b6baa:	d1f9      	bne.n	b6ba0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   b6bac:	6c22      	ldr	r2, [r4, #64]	; 0x40
   b6bae:	7813      	ldrb	r3, [r2, #0]
   b6bb0:	f043 0308 	orr.w	r3, r3, #8
   b6bb4:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   b6bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   b6bb8:	f7ff bb2f 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   b6bbc:	4a66      	ldr	r2, [pc, #408]	; (b6d58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   b6bbe:	4293      	cmp	r3, r2
   b6bc0:	d138      	bne.n	b6c34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   b6bc2:	6c46      	ldr	r6, [r0, #68]	; 0x44
   b6bc4:	2e00      	cmp	r6, #0
   b6bc6:	f43f aa9a 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   b6bca:	68a8      	ldr	r0, [r5, #8]
   b6bcc:	2100      	movs	r1, #0
   b6bce:	f7fd fc97 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6bd2:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b6bd4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   b6bd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b6bd8:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   b6bda:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b6bdc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   b6bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b6be0:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   b6be2:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b6be4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   b6be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b6be8:	7a52      	ldrb	r2, [r2, #9]
   b6bea:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b6bec:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   b6bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   b6bf0:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   b6bf2:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b6bf4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   b6bf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b6bf8:	7ad2      	ldrb	r2, [r2, #11]
   b6bfa:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6bfc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   b6bfe:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c00:	210c      	movs	r1, #12
   b6c02:	f7fd fc7d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   b6c06:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   b6c08:	68a8      	ldr	r0, [r5, #8]
   b6c0a:	6c66      	ldr	r6, [r4, #68]	; 0x44
   b6c0c:	2110      	movs	r1, #16
   b6c0e:	f7fd fc84 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6c12:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   b6c14:	68a8      	ldr	r0, [r5, #8]
   b6c16:	6c66      	ldr	r6, [r4, #68]	; 0x44
   b6c18:	2112      	movs	r1, #18
   b6c1a:	f7fd fc7e 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6c1e:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   b6c20:	68ab      	ldr	r3, [r5, #8]
   b6c22:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   b6c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b6c26:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6c28:	6c63      	ldr	r3, [r4, #68]	; 0x44
   b6c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6c2e:	61da      	str	r2, [r3, #28]
   b6c30:	f7ff ba65 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   b6c34:	4a49      	ldr	r2, [pc, #292]	; (b6d5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   b6c36:	4293      	cmp	r3, r2
   b6c38:	d162      	bne.n	b6d00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   b6c3a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   b6c3c:	2b00      	cmp	r3, #0
   b6c3e:	f43f aa5e 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b6c42:	688a      	ldr	r2, [r1, #8]
   b6c44:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   b6c46:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   b6c48:	6c86      	ldr	r6, [r0, #72]	; 0x48
   b6c4a:	68a8      	ldr	r0, [r5, #8]
   b6c4c:	2104      	movs	r1, #4
   b6c4e:	f7fd fc57 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6c52:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   b6c54:	68a8      	ldr	r0, [r5, #8]
   b6c56:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b6c58:	2108      	movs	r1, #8
   b6c5a:	f7fd fc51 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6c5e:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c60:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   b6c62:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c64:	210c      	movs	r1, #12
   b6c66:	f7fd fc4b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   b6c6a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c6c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   b6c6e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c70:	2110      	movs	r1, #16
   b6c72:	f7fd fc45 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   b6c76:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c78:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   b6c7a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6c7c:	2114      	movs	r1, #20
   b6c7e:	f7fd fc3f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   b6c82:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   b6c84:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   b6c86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6c88:	7e12      	ldrb	r2, [r2, #24]
   b6c8a:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   b6c8c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   b6c8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6c90:	7e52      	ldrb	r2, [r2, #25]
   b6c92:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   b6c94:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   b6c96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6c98:	7e92      	ldrb	r2, [r2, #26]
   b6c9a:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   b6c9c:	211c      	movs	r1, #28
   b6c9e:	68a8      	ldr	r0, [r5, #8]
   b6ca0:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b6ca2:	f7fd fc2d 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6ca6:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   b6ca8:	68a8      	ldr	r0, [r5, #8]
   b6caa:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   b6cac:	2120      	movs	r1, #32
   b6cae:	f7fd fc27 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6cb2:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b6cb4:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   b6cb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6cb8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   b6cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   b6cc0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   b6cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6cc4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   b6cc8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6ccc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6cd2:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6cd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b6cd8:	b17a      	cbz	r2, b6cfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6cda:	7819      	ldrb	r1, [r3, #0]
   b6cdc:	070f      	lsls	r7, r1, #28
   b6cde:	d40c      	bmi.n	b6cfa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   b6ce0:	1d19      	adds	r1, r3, #4
   b6ce2:	332c      	adds	r3, #44	; 0x2c
   b6ce4:	f851 0b04 	ldr.w	r0, [r1], #4
   b6ce8:	f842 0b04 	str.w	r0, [r2], #4
   b6cec:	4299      	cmp	r1, r3
   b6cee:	d1f9      	bne.n	b6ce4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   b6cf0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   b6cf2:	7813      	ldrb	r3, [r2, #0]
   b6cf4:	f043 0308 	orr.w	r3, r3, #8
   b6cf8:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   b6cfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   b6cfc:	f7ff ba8d 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   b6d00:	784a      	ldrb	r2, [r1, #1]
   b6d02:	2a35      	cmp	r2, #53	; 0x35
   b6d04:	d17f      	bne.n	b6e06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   b6d06:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   b6d08:	2e00      	cmp	r6, #0
   b6d0a:	f43f a9f8 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   b6d0e:	68a8      	ldr	r0, [r5, #8]
   b6d10:	2100      	movs	r1, #0
   b6d12:	f7fd fbf5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6d16:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b6d18:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   b6d1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b6d1c:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   b6d1e:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b6d20:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   b6d22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b6d24:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   b6d26:	725a      	strb	r2, [r3, #9]
   b6d28:	f04f 0808 	mov.w	r8, #8
   b6d2c:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b6d2e:	f04f 0a0c 	mov.w	sl, #12
   b6d32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6d34:	7a59      	ldrb	r1, [r3, #9]
   b6d36:	b2ba      	uxth	r2, r7
   b6d38:	4291      	cmp	r1, r2
   b6d3a:	d811      	bhi.n	b6d60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   b6d3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6d3e:	2201      	movs	r2, #1
   b6d40:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6d44:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6d46:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   b6d4a:	2800      	cmp	r0, #0
   b6d4c:	d14d      	bne.n	b6dea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   b6d4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6d50:	f7ff ba63 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b6d54:	00142200 	.word	0x00142200
   b6d58:	00182600 	.word	0x00182600
   b6d5c:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b6d60:	886a      	ldrh	r2, [r5, #2]
   b6d62:	fb0a f607 	mul.w	r6, sl, r7
   b6d66:	3a08      	subs	r2, #8
   b6d68:	42b2      	cmp	r2, r6
   b6d6a:	dde7      	ble.n	b6d3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   b6d6c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   b6d6e:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b6d70:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   b6d74:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b6d76:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b6d78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b6d7a:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b6d7c:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b6d7e:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   b6d80:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b6d82:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b6d84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b6d86:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b6d88:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   b6d8a:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   b6d8c:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b6d8e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   b6d90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   b6d92:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   b6d94:	4433      	add	r3, r6
   b6d96:	78d2      	ldrb	r2, [r2, #3]
   b6d98:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b6d9a:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6d9e:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b6da2:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6da6:	68a8      	ldr	r0, [r5, #8]
   b6da8:	b289      	uxth	r1, r1
   b6daa:	f7fd fbb6 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b6dae:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6db0:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   b6db4:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b6db8:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   b6dbc:	68a8      	ldr	r0, [r5, #8]
   b6dbe:	b289      	uxth	r1, r1
   b6dc0:	f7fd fbab 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b6dc4:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b6dc6:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   b6dca:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b6dce:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   b6dd2:	68a8      	ldr	r0, [r5, #8]
   b6dd4:	b289      	uxth	r1, r1
   b6dd6:	f7fd fb93 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6dda:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b6ddc:	3701      	adds	r7, #1
   b6dde:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   b6de0:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   b6de2:	f108 080c 	add.w	r8, r8, #12
   b6de6:	d1a4      	bne.n	b6d32 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   b6de8:	e7a8      	b.n	b6d3c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6dea:	780b      	ldrb	r3, [r1, #0]
   b6dec:	071e      	lsls	r6, r3, #28
   b6dee:	d4ae      	bmi.n	b6d4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   b6df0:	f640 32fc 	movw	r2, #3068	; 0xbfc
   b6df4:	3104      	adds	r1, #4
   b6df6:	f00d fb8f 	bl	c4518 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   b6dfa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   b6dfc:	7813      	ldrb	r3, [r2, #0]
   b6dfe:	f043 0308 	orr.w	r3, r3, #8
   b6e02:	7013      	strb	r3, [r2, #0]
   b6e04:	e7a3      	b.n	b6d4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   b6e06:	2a3c      	cmp	r2, #60	; 0x3c
   b6e08:	f040 80bf 	bne.w	b6f8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   b6e0c:	884a      	ldrh	r2, [r1, #2]
   b6e0e:	2a28      	cmp	r2, #40	; 0x28
   b6e10:	d002      	beq.n	b6e18 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   b6e12:	2a40      	cmp	r2, #64	; 0x40
   b6e14:	f040 80b9 	bne.w	b6f8a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   b6e18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e1a:	2b00      	cmp	r3, #0
   b6e1c:	f43f a96f 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b6e20:	68aa      	ldr	r2, [r5, #8]
   b6e22:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   b6e24:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   b6e26:	68a8      	ldr	r0, [r5, #8]
   b6e28:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6e2a:	2102      	movs	r1, #2
   b6e2c:	f7fd fb75 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b6e30:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   b6e32:	68a8      	ldr	r0, [r5, #8]
   b6e34:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6e36:	2104      	movs	r1, #4
   b6e38:	f7fd fb62 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6e3c:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   b6e40:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e42:	2108      	movs	r1, #8
   b6e44:	f7fd fb5c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   b6e48:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e4a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   b6e4c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e4e:	210c      	movs	r1, #12
   b6e50:	f7fd fb56 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   b6e54:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e56:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   b6e58:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6e5a:	2110      	movs	r1, #16
   b6e5c:	f7fd fb50 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   b6e60:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   b6e62:	886b      	ldrh	r3, [r5, #2]
   b6e64:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b6e66:	2b28      	cmp	r3, #40	; 0x28
   b6e68:	d14b      	bne.n	b6f02 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   b6e6a:	2600      	movs	r6, #0
   b6e6c:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   b6e6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e70:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   b6e72:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   b6e74:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e76:	7d12      	ldrb	r2, [r2, #20]
   b6e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b6e7c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   b6e7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e80:	7d52      	ldrb	r2, [r2, #21]
   b6e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   b6e86:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   b6e88:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e8a:	7d92      	ldrb	r2, [r2, #22]
   b6e8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   b6e90:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6e92:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   b6e96:	68a8      	ldr	r0, [r5, #8]
   b6e98:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b6e9a:	2118      	movs	r1, #24
   b6e9c:	f7fd fb30 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6ea0:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   b6ea2:	68a8      	ldr	r0, [r5, #8]
   b6ea4:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b6ea6:	211c      	movs	r1, #28
   b6ea8:	f7fd fb2a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6eac:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   b6eae:	68a8      	ldr	r0, [r5, #8]
   b6eb0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   b6eb2:	2120      	movs	r1, #32
   b6eb4:	f7fd fb24 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6eb8:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   b6eba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ebc:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   b6ebe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ec0:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   b6ec2:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6ec4:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   b6ec6:	68a8      	ldr	r0, [r5, #8]
   b6ec8:	f7fd fb1a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6ecc:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6ece:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6ed4:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6ed6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   b6eda:	b17a      	cbz	r2, b6efc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6edc:	7819      	ldrb	r1, [r3, #0]
   b6ede:	0708      	lsls	r0, r1, #28
   b6ee0:	d40c      	bmi.n	b6efc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   b6ee2:	1d19      	adds	r1, r3, #4
   b6ee4:	3344      	adds	r3, #68	; 0x44
   b6ee6:	f851 0b04 	ldr.w	r0, [r1], #4
   b6eea:	f842 0b04 	str.w	r0, [r2], #4
   b6eee:	4299      	cmp	r1, r3
   b6ef0:	d1f9      	bne.n	b6ee6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   b6ef2:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6ef4:	7813      	ldrb	r3, [r2, #0]
   b6ef6:	f043 0308 	orr.w	r3, r3, #8
   b6efa:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   b6efc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6efe:	f7ff b98c 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6f02:	68a8      	ldr	r0, [r5, #8]
   b6f04:	2114      	movs	r1, #20
   b6f06:	f7fd fafb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   b6f0a:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6f0c:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   b6f0e:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b6f10:	2118      	movs	r1, #24
   b6f12:	f7fd faf5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   b6f16:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   b6f18:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   b6f1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6f1c:	f892 2020 	ldrb.w	r2, [r2, #32]
   b6f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   b6f24:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   b6f26:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6f28:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   b6f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   b6f30:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   b6f32:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6f34:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   b6f38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   b6f3c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   b6f3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6f40:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   b6f44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   b6f48:	68a8      	ldr	r0, [r5, #8]
   b6f4a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f4c:	2124      	movs	r1, #36	; 0x24
   b6f4e:	f7fd fad7 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6f52:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   b6f54:	68a8      	ldr	r0, [r5, #8]
   b6f56:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f58:	2128      	movs	r1, #40	; 0x28
   b6f5a:	f7fd fad1 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6f5e:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   b6f60:	68a8      	ldr	r0, [r5, #8]
   b6f62:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f64:	212c      	movs	r1, #44	; 0x2c
   b6f66:	f7fd facb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6f6a:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   b6f6c:	68a8      	ldr	r0, [r5, #8]
   b6f6e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f70:	2130      	movs	r1, #48	; 0x30
   b6f72:	f7fd fac5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6f76:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   b6f78:	2134      	movs	r1, #52	; 0x34
   b6f7a:	68a8      	ldr	r0, [r5, #8]
   b6f7c:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f7e:	f7fd fabf 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6f82:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   b6f84:	6d26      	ldr	r6, [r4, #80]	; 0x50
   b6f86:	213c      	movs	r1, #60	; 0x3c
   b6f88:	e79d      	b.n	b6ec6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   b6f8a:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   b6f8e:	d12a      	bne.n	b6fe6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   b6f90:	6d66      	ldr	r6, [r4, #84]	; 0x54
   b6f92:	2e00      	cmp	r6, #0
   b6f94:	f43f a8b3 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   b6f98:	68a8      	ldr	r0, [r5, #8]
   b6f9a:	2100      	movs	r1, #0
   b6f9c:	f7fd fab0 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6fa0:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b6fa2:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   b6fa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   b6fa6:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   b6fa8:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b6faa:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   b6fac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   b6fae:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   b6fb0:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b6fb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6fb8:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b6fba:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6fbc:	6a1a      	ldr	r2, [r3, #32]
   b6fbe:	b17a      	cbz	r2, b6fe0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b6fc0:	7819      	ldrb	r1, [r3, #0]
   b6fc2:	0709      	lsls	r1, r1, #28
   b6fc4:	d40c      	bmi.n	b6fe0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   b6fc6:	1d19      	adds	r1, r3, #4
   b6fc8:	3314      	adds	r3, #20
   b6fca:	f851 0b04 	ldr.w	r0, [r1], #4
   b6fce:	f842 0b04 	str.w	r0, [r2], #4
   b6fd2:	4299      	cmp	r1, r3
   b6fd4:	d1f9      	bne.n	b6fca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b6fd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
   b6fd8:	7813      	ldrb	r3, [r2, #0]
   b6fda:	f043 0308 	orr.w	r3, r3, #8
   b6fde:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b6fe0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6fe2:	f7ff b91a 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   b6fe6:	4aa1      	ldr	r2, [pc, #644]	; (b726c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   b6fe8:	4293      	cmp	r3, r2
   b6fea:	f47f a888 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   b6fee:	69a6      	ldr	r6, [r4, #24]
   b6ff0:	2e00      	cmp	r6, #0
   b6ff2:	f43f a884 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   b6ff6:	68a8      	ldr	r0, [r5, #8]
   b6ff8:	2100      	movs	r1, #0
   b6ffa:	f7fd fa81 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b6ffe:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7000:	69a3      	ldr	r3, [r4, #24]
   b7002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7006:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7008:	69a3      	ldr	r3, [r4, #24]
   b700a:	691a      	ldr	r2, [r3, #16]
   b700c:	b14a      	cbz	r2, b7022 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b700e:	7819      	ldrb	r1, [r3, #0]
   b7010:	070f      	lsls	r7, r1, #28
   b7012:	d406      	bmi.n	b7022 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   b7014:	685b      	ldr	r3, [r3, #4]
   b7016:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   b7018:	69a2      	ldr	r2, [r4, #24]
   b701a:	7813      	ldrb	r3, [r2, #0]
   b701c:	f043 0308 	orr.w	r3, r3, #8
   b7020:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   b7022:	69a3      	ldr	r3, [r4, #24]
   b7024:	f7ff b8f9 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   b7028:	784b      	ldrb	r3, [r1, #1]
   b702a:	2b72      	cmp	r3, #114	; 0x72
   b702c:	f040 80a4 	bne.w	b7178 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   b7030:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b7032:	2b00      	cmp	r3, #0
   b7034:	d069      	beq.n	b710a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   b7036:	689b      	ldr	r3, [r3, #8]
   b7038:	2b00      	cmp	r3, #0
   b703a:	d066      	beq.n	b710a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   b703c:	688a      	ldr	r2, [r1, #8]
   b703e:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   b7040:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   b7042:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b7044:	68a8      	ldr	r0, [r5, #8]
   b7046:	689f      	ldr	r7, [r3, #8]
   b7048:	4631      	mov	r1, r6
   b704a:	f7fd fa66 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b704e:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   b7050:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b7052:	68a8      	ldr	r0, [r5, #8]
   b7054:	689e      	ldr	r6, [r3, #8]
   b7056:	2104      	movs	r1, #4
   b7058:	f7fd fa52 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b705c:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   b705e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b7060:	68a8      	ldr	r0, [r5, #8]
   b7062:	689e      	ldr	r6, [r3, #8]
   b7064:	2108      	movs	r1, #8
   b7066:	f7fd fa4b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b706a:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   b706c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b706e:	68a8      	ldr	r0, [r5, #8]
   b7070:	689e      	ldr	r6, [r3, #8]
   b7072:	210c      	movs	r1, #12
   b7074:	f7fd fa44 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7078:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   b707a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b707c:	68a8      	ldr	r0, [r5, #8]
   b707e:	689e      	ldr	r6, [r3, #8]
   b7080:	2110      	movs	r1, #16
   b7082:	f7fd fa4a 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7086:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b7088:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b708a:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b708c:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b708e:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   b7090:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b7092:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b7094:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b7096:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b7098:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   b709a:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   b709c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b709e:	689e      	ldr	r6, [r3, #8]
   b70a0:	7833      	ldrb	r3, [r6, #0]
   b70a2:	bb23      	cbnz	r3, b70ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   b70a4:	68a8      	ldr	r0, [r5, #8]
   b70a6:	f44f 7103 	mov.w	r1, #524	; 0x20c
   b70aa:	f7fd fa36 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b70ae:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   b70b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b70b2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   b70b4:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b70b6:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b70ba:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   b70bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   b70be:	689b      	ldr	r3, [r3, #8]
   b70c0:	781a      	ldrb	r2, [r3, #0]
   b70c2:	2a00      	cmp	r2, #0
   b70c4:	f040 865d 	bne.w	b7d82 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   b70c8:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   b70ca:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   b70ce:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b70d0:	b299      	uxth	r1, r3
   b70d2:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b70d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b70d6:	d914      	bls.n	b7102 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   b70d8:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   b70dc:	d011      	beq.n	b7102 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   b70de:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b70e0:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   b70e2:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b70e4:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   b70e6:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   b70e8:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   b70ea:	3301      	adds	r3, #1
   b70ec:	e7f0      	b.n	b70d0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   b70ee:	68a8      	ldr	r0, [r5, #8]
   b70f0:	2114      	movs	r1, #20
   b70f2:	f7fd fa12 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b70f6:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b70f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   b70fa:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   b70fc:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b70fe:	7d92      	ldrb	r2, [r2, #22]
   b7100:	e7db      	b.n	b70ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   b7102:	7813      	ldrb	r3, [r2, #0]
   b7104:	f043 0308 	orr.w	r3, r3, #8
   b7108:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   b710a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b710c:	2b00      	cmp	r3, #0
   b710e:	f43e aff6 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   b7112:	689b      	ldr	r3, [r3, #8]
   b7114:	2b00      	cmp	r3, #0
   b7116:	f43e aff2 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   b711a:	22b5      	movs	r2, #181	; 0xb5
   b711c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   b711e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7120:	689b      	ldr	r3, [r3, #8]
   b7122:	2262      	movs	r2, #98	; 0x62
   b7124:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   b7126:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7128:	689b      	ldr	r3, [r3, #8]
   b712a:	2202      	movs	r2, #2
   b712c:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   b712e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7130:	689b      	ldr	r3, [r3, #8]
   b7132:	2272      	movs	r2, #114	; 0x72
   b7134:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   b7136:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7138:	886a      	ldrh	r2, [r5, #2]
   b713a:	689b      	ldr	r3, [r3, #8]
   b713c:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   b713e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7140:	689a      	ldr	r2, [r3, #8]
   b7142:	886b      	ldrh	r3, [r5, #2]
   b7144:	0a1b      	lsrs	r3, r3, #8
   b7146:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   b7148:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b714a:	886a      	ldrh	r2, [r5, #2]
   b714c:	6898      	ldr	r0, [r3, #8]
   b714e:	68a9      	ldr	r1, [r5, #8]
   b7150:	3006      	adds	r0, #6
   b7152:	f00d f9e1 	bl	c4518 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   b7156:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7158:	7b2a      	ldrb	r2, [r5, #12]
   b715a:	689b      	ldr	r3, [r3, #8]
   b715c:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   b7160:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7162:	7b6a      	ldrb	r2, [r5, #13]
   b7164:	689b      	ldr	r3, [r3, #8]
   b7166:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   b716a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   b716c:	7813      	ldrb	r3, [r2, #0]
   b716e:	f043 0308 	orr.w	r3, r3, #8
   b7172:	7013      	strb	r3, [r2, #0]
   b7174:	f7fe bfc3 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   b7178:	2b73      	cmp	r3, #115	; 0x73
   b717a:	d14d      	bne.n	b7218 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   b717c:	6e01      	ldr	r1, [r0, #96]	; 0x60
   b717e:	780b      	ldrb	r3, [r1, #0]
   b7180:	071e      	lsls	r6, r3, #28
   b7182:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   b7186:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b718a:	d543      	bpl.n	b7214 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   b718c:	0843      	lsrs	r3, r0, #1
   b718e:	f47e afb6 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   b7192:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   b7194:	f44f 7688 	mov.w	r6, #272	; 0x110
   b7198:	688b      	ldr	r3, [r1, #8]
   b719a:	437e      	muls	r6, r7
   b719c:	22b5      	movs	r2, #181	; 0xb5
   b719e:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   b71a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71a2:	689b      	ldr	r3, [r3, #8]
   b71a4:	4433      	add	r3, r6
   b71a6:	2262      	movs	r2, #98	; 0x62
   b71a8:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   b71aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71ac:	689b      	ldr	r3, [r3, #8]
   b71ae:	4433      	add	r3, r6
   b71b0:	2202      	movs	r2, #2
   b71b2:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   b71b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71b6:	689b      	ldr	r3, [r3, #8]
   b71b8:	4433      	add	r3, r6
   b71ba:	2273      	movs	r2, #115	; 0x73
   b71bc:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   b71be:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71c0:	886a      	ldrh	r2, [r5, #2]
   b71c2:	689b      	ldr	r3, [r3, #8]
   b71c4:	4433      	add	r3, r6
   b71c6:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   b71c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71ca:	886a      	ldrh	r2, [r5, #2]
   b71cc:	689b      	ldr	r3, [r3, #8]
   b71ce:	4433      	add	r3, r6
   b71d0:	0a12      	lsrs	r2, r2, #8
   b71d2:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   b71d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71d6:	886a      	ldrh	r2, [r5, #2]
   b71d8:	6898      	ldr	r0, [r3, #8]
   b71da:	68a9      	ldr	r1, [r5, #8]
   b71dc:	4430      	add	r0, r6
   b71de:	3006      	adds	r0, #6
   b71e0:	f00d f99a 	bl	c4518 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   b71e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71e6:	7b2a      	ldrb	r2, [r5, #12]
   b71e8:	689b      	ldr	r3, [r3, #8]
   b71ea:	4433      	add	r3, r6
   b71ec:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   b71f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b71f2:	7b6a      	ldrb	r2, [r5, #13]
   b71f4:	689b      	ldr	r3, [r3, #8]
   b71f6:	441e      	add	r6, r3
   b71f8:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   b71fc:	6e21      	ldr	r1, [r4, #96]	; 0x60
   b71fe:	780b      	ldrb	r3, [r1, #0]
   b7200:	2201      	movs	r2, #1
   b7202:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   b7206:	40ba      	lsls	r2, r7
   b7208:	4302      	orrs	r2, r0
   b720a:	f362 03c4 	bfi	r3, r2, #3, #2
   b720e:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   b7210:	f7fe bf75 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   b7214:	4617      	mov	r7, r2
   b7216:	e7bd      	b.n	b7194 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   b7218:	2b34      	cmp	r3, #52	; 0x34
   b721a:	d129      	bne.n	b7270 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   b721c:	6e43      	ldr	r3, [r0, #100]	; 0x64
   b721e:	2b00      	cmp	r3, #0
   b7220:	f43e af6d 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   b7224:	689b      	ldr	r3, [r3, #8]
   b7226:	2b00      	cmp	r3, #0
   b7228:	f43e af69 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b722c:	688a      	ldr	r2, [r1, #8]
   b722e:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   b7230:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   b7232:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   b7234:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   b7236:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   b7238:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   b723a:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   b723c:	6e43      	ldr	r3, [r0, #100]	; 0x64
   b723e:	68a8      	ldr	r0, [r5, #8]
   b7240:	689e      	ldr	r6, [r3, #8]
   b7242:	2104      	movs	r1, #4
   b7244:	f7fd f95c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7248:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   b724a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   b724c:	68a8      	ldr	r0, [r5, #8]
   b724e:	689e      	ldr	r6, [r3, #8]
   b7250:	2108      	movs	r1, #8
   b7252:	f7fd f962 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7256:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   b7258:	6e63      	ldr	r3, [r4, #100]	; 0x64
   b725a:	68a8      	ldr	r0, [r5, #8]
   b725c:	689e      	ldr	r6, [r3, #8]
   b725e:	210a      	movs	r1, #10
   b7260:	f7fd f95b 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7264:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   b7266:	6e62      	ldr	r2, [r4, #100]	; 0x64
   b7268:	e780      	b.n	b716c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   b726a:	bf00      	nop
   b726c:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   b7270:	2b13      	cmp	r3, #19
   b7272:	d14a      	bne.n	b730a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   b7274:	6e83      	ldr	r3, [r0, #104]	; 0x68
   b7276:	2b00      	cmp	r3, #0
   b7278:	f43e af41 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b727c:	688a      	ldr	r2, [r1, #8]
   b727e:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   b7280:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b7282:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   b7284:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   b7286:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   b7288:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   b728a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   b728c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   b728e:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   b7290:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   b7292:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   b7294:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   b7296:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   b7298:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b729a:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   b729c:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   b729e:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   b72a0:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   b72a2:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   b72a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   b72a6:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   b72a8:	729a      	strb	r2, [r3, #10]
   b72aa:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   b72ac:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   b72ae:	7a3a      	ldrb	r2, [r7, #8]
   b72b0:	b2f3      	uxtb	r3, r6
   b72b2:	429a      	cmp	r2, r3
   b72b4:	d809      	bhi.n	b72ca <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   b72b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   b72b8:	2201      	movs	r2, #1
   b72ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b72be:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   b72c0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b72c2:	b9a8      	cbnz	r0, b72f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   b72c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   b72c6:	f7fe bfa8 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   b72ca:	886b      	ldrh	r3, [r5, #2]
   b72cc:	3b08      	subs	r3, #8
   b72ce:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   b72d2:	ea4f 0186 	mov.w	r1, r6, lsl #2
   b72d6:	ddee      	ble.n	b72b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   b72d8:	3108      	adds	r1, #8
   b72da:	68a8      	ldr	r0, [r5, #8]
   b72dc:	b289      	uxth	r1, r1
   b72de:	f7fd f90f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b72e2:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   b72e6:	3601      	adds	r6, #1
   b72e8:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   b72ea:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   b72ec:	d1de      	bne.n	b72ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   b72ee:	e7e2      	b.n	b72b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b72f0:	780b      	ldrb	r3, [r1, #0]
   b72f2:	071b      	lsls	r3, r3, #28
   b72f4:	d4e6      	bmi.n	b72c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   b72f6:	2248      	movs	r2, #72	; 0x48
   b72f8:	3104      	adds	r1, #4
   b72fa:	f00d f90d 	bl	c4518 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   b72fe:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   b7300:	7813      	ldrb	r3, [r2, #0]
   b7302:	f043 0308 	orr.w	r3, r3, #8
   b7306:	7013      	strb	r3, [r2, #0]
   b7308:	e7dc      	b.n	b72c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   b730a:	2b15      	cmp	r3, #21
   b730c:	f47e aef7 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   b7310:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   b7312:	2b00      	cmp	r3, #0
   b7314:	f43e aef3 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   b7318:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   b731a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b731c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   b731e:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   b7320:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   b7322:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   b7324:	3101      	adds	r1, #1
   b7326:	2908      	cmp	r1, #8
   b7328:	d1f7      	bne.n	b731a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   b732a:	68a8      	ldr	r0, [r5, #8]
   b732c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   b732e:	f7fd f8f4 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7332:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   b7334:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   b7336:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7338:	7a92      	ldrb	r2, [r2, #10]
   b733a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b733c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   b733e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7340:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   b7342:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b7344:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   b7346:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7348:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   b734a:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b734c:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   b734e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7350:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   b7352:	73da      	strb	r2, [r3, #15]
   b7354:	2610      	movs	r6, #16
   b7356:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   b7358:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   b735a:	7b51      	ldrb	r1, [r2, #13]
   b735c:	b2da      	uxtb	r2, r3
   b735e:	4291      	cmp	r1, r2
   b7360:	d80b      	bhi.n	b737a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   b7362:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7364:	2201      	movs	r2, #1
   b7366:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b736a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   b736c:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   b7370:	2800      	cmp	r0, #0
   b7372:	d17f      	bne.n	b7474 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   b7374:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   b7376:	f7fe bf50 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   b737a:	886a      	ldrh	r2, [r5, #2]
   b737c:	3a10      	subs	r2, #16
   b737e:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   b7382:	ea4f 1843 	mov.w	r8, r3, lsl #5
   b7386:	ddec      	ble.n	b7362 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   b7388:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   b738a:	46b4      	mov	ip, r6
   b738c:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   b738e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7390:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   b7392:	4440      	add	r0, r8
   b7394:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   b7396:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   b739a:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   b739c:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   b739e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b73a0:	4437      	add	r7, r6
   b73a2:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   b73a4:	4440      	add	r0, r8
   b73a6:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   b73a8:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   b73aa:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   b73ac:	2a03      	cmp	r2, #3
   b73ae:	d80b      	bhi.n	b73c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   b73b0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b73b2:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   b73b4:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   b73b8:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   b73bc:	4440      	add	r0, r8
   b73be:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   b73c0:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   b73c4:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   b73c8:	3201      	adds	r2, #1
   b73ca:	2a08      	cmp	r2, #8
   b73cc:	f10c 0c01 	add.w	ip, ip, #1
   b73d0:	d1dd      	bne.n	b738e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   b73d2:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   b73d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   b73d6:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   b73d8:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   b73da:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   b73de:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   b73e0:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   b73e2:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   b73e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b73e6:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   b73e8:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   b73ec:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   b73ee:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   b73f0:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   b73f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b73f4:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   b73f6:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   b73fa:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   b73fc:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b73fe:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   b7400:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7402:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   b7404:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   b7408:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   b740a:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   b740c:	3118      	adds	r1, #24
   b740e:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   b7412:	68a8      	ldr	r0, [r5, #8]
   b7414:	b289      	uxth	r1, r1
   b7416:	f7fd f880 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b741a:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   b741c:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   b741e:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   b7422:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   b7424:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7426:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   b7428:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   b742a:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   b742c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   b7430:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   b7432:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7434:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   b7436:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   b7438:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   b743a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   b743e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   b7440:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7442:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   b7444:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   b7446:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   b7448:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   b744c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   b744e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b7450:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   b7452:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   b7454:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   b7456:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   b745a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   b745c:	68aa      	ldr	r2, [r5, #8]
   b745e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   b7460:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   b7462:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   b7464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   b7468:	f106 0620 	add.w	r6, r6, #32
   b746c:	463b      	mov	r3, r7
   b746e:	f47f af73 	bne.w	b7358 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   b7472:	e776      	b.n	b7362 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7474:	780b      	ldrb	r3, [r1, #0]
   b7476:	071f      	lsls	r7, r3, #28
   b7478:	f53f af7c 	bmi.w	b7374 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   b747c:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   b7480:	3102      	adds	r1, #2
   b7482:	f00d f849 	bl	c4518 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   b7486:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   b7488:	7813      	ldrb	r3, [r2, #0]
   b748a:	f043 0308 	orr.w	r3, r3, #8
   b748e:	7013      	strb	r3, [r2, #0]
   b7490:	e770      	b.n	b7374 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   b7492:	680b      	ldr	r3, [r1, #0]
   b7494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b7498:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   b749c:	d12f      	bne.n	b74fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   b749e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   b74a0:	2b00      	cmp	r3, #0
   b74a2:	f43e ae2c 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b74a6:	688a      	ldr	r2, [r1, #8]
   b74a8:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   b74aa:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   b74ac:	6f06      	ldr	r6, [r0, #112]	; 0x70
   b74ae:	68a8      	ldr	r0, [r5, #8]
   b74b0:	2102      	movs	r1, #2
   b74b2:	f7fd f832 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b74b6:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   b74b8:	68a8      	ldr	r0, [r5, #8]
   b74ba:	6f26      	ldr	r6, [r4, #112]	; 0x70
   b74bc:	2104      	movs	r1, #4
   b74be:	f7fd f81f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b74c2:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   b74c4:	68a8      	ldr	r0, [r5, #8]
   b74c6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   b74c8:	2108      	movs	r1, #8
   b74ca:	f7fd f819 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b74ce:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   b74d0:	68a8      	ldr	r0, [r5, #8]
   b74d2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   b74d4:	210c      	movs	r1, #12
   b74d6:	f7fd f820 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b74da:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   b74dc:	68a8      	ldr	r0, [r5, #8]
   b74de:	6f26      	ldr	r6, [r4, #112]	; 0x70
   b74e0:	210e      	movs	r1, #14
   b74e2:	f7fd f81a 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b74e6:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   b74e8:	68a8      	ldr	r0, [r5, #8]
   b74ea:	6f26      	ldr	r6, [r4, #112]	; 0x70
   b74ec:	2110      	movs	r1, #16
   b74ee:	f7fd f814 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b74f2:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   b74f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
   b74f6:	2201      	movs	r2, #1
   b74f8:	751a      	strb	r2, [r3, #20]
   b74fa:	f7fe be00 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   b74fe:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   b7502:	f47e adfc 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   b7506:	6f46      	ldr	r6, [r0, #116]	; 0x74
   b7508:	2e00      	cmp	r6, #0
   b750a:	f43e adf8 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   b750e:	68a8      	ldr	r0, [r5, #8]
   b7510:	2100      	movs	r1, #0
   b7512:	f7fd f802 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7516:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   b7518:	68a8      	ldr	r0, [r5, #8]
   b751a:	6f66      	ldr	r6, [r4, #116]	; 0x74
   b751c:	2102      	movs	r1, #2
   b751e:	f7fc fffc 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7522:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   b7524:	68a8      	ldr	r0, [r5, #8]
   b7526:	6f66      	ldr	r6, [r4, #116]	; 0x74
   b7528:	2104      	movs	r1, #4
   b752a:	f7fc fff6 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b752e:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7530:	6f63      	ldr	r3, [r4, #116]	; 0x74
   b7532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7536:	609a      	str	r2, [r3, #8]
   b7538:	f7fe bde1 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   b753c:	680b      	ldr	r3, [r1, #0]
   b753e:	4ab0      	ldr	r2, [pc, #704]	; (b7800 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   b7540:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b7544:	4293      	cmp	r3, r2
   b7546:	f47e adda 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   b754a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   b754c:	2b00      	cmp	r3, #0
   b754e:	f43e add6 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   b7552:	688a      	ldr	r2, [r1, #8]
   b7554:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   b7556:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   b7558:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   b755a:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   b755c:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   b755e:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   b7560:	6f86      	ldr	r6, [r0, #120]	; 0x78
   b7562:	68a8      	ldr	r0, [r5, #8]
   b7564:	2102      	movs	r1, #2
   b7566:	f7fc ffd8 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b756a:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   b756c:	68a8      	ldr	r0, [r5, #8]
   b756e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b7570:	2104      	movs	r1, #4
   b7572:	f7fc ffd2 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7576:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   b7578:	68a8      	ldr	r0, [r5, #8]
   b757a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b757c:	2106      	movs	r1, #6
   b757e:	f7fc ffcc 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7582:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   b7584:	68a8      	ldr	r0, [r5, #8]
   b7586:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b7588:	2108      	movs	r1, #8
   b758a:	f7fc ffb9 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b758e:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   b7590:	68a8      	ldr	r0, [r5, #8]
   b7592:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b7594:	210c      	movs	r1, #12
   b7596:	f7fc ffb3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b759a:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   b759c:	68a8      	ldr	r0, [r5, #8]
   b759e:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b75a0:	2110      	movs	r1, #16
   b75a2:	f7fc ffad 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b75a6:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   b75a8:	68a8      	ldr	r0, [r5, #8]
   b75aa:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b75ac:	2114      	movs	r1, #20
   b75ae:	f7fc ffa7 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b75b2:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   b75b4:	68a8      	ldr	r0, [r5, #8]
   b75b6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   b75b8:	2118      	movs	r1, #24
   b75ba:	f7fc ffa1 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b75be:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b75c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b75c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b75c6:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b75c8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b75ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   b75cc:	b17a      	cbz	r2, b75ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b75ce:	7819      	ldrb	r1, [r3, #0]
   b75d0:	070e      	lsls	r6, r1, #28
   b75d2:	d40c      	bmi.n	b75ee <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   b75d4:	1d19      	adds	r1, r3, #4
   b75d6:	3320      	adds	r3, #32
   b75d8:	f851 0b04 	ldr.w	r0, [r1], #4
   b75dc:	f842 0b04 	str.w	r0, [r2], #4
   b75e0:	4299      	cmp	r1, r3
   b75e2:	d1f9      	bne.n	b75d8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   b75e4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   b75e6:	7813      	ldrb	r3, [r2, #0]
   b75e8:	f043 0308 	orr.w	r3, r3, #8
   b75ec:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   b75ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   b75f0:	f7fe be13 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   b75f4:	4a83      	ldr	r2, [pc, #524]	; (b7804 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   b75f6:	4293      	cmp	r3, r2
   b75f8:	d158      	bne.n	b76ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   b75fa:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   b75fe:	2f00      	cmp	r7, #0
   b7600:	f43e ad7d 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   b7604:	68a8      	ldr	r0, [r5, #8]
   b7606:	2100      	movs	r1, #0
   b7608:	f7fc ff7a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b760c:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   b760e:	68a8      	ldr	r0, [r5, #8]
   b7610:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   b7614:	2108      	movs	r1, #8
   b7616:	f7fc ff73 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b761a:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b761c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   b761e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7622:	210c      	movs	r1, #12
   b7624:	f7fc ff6c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   b7628:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b762a:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   b762c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7630:	4631      	mov	r1, r6
   b7632:	f7fc ff65 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   b7636:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7638:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   b763a:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b763e:	2114      	movs	r1, #20
   b7640:	f7fc ff5e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   b7644:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7646:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   b7648:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b764c:	2118      	movs	r1, #24
   b764e:	f7fc ff57 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   b7652:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7654:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   b7656:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b765a:	211c      	movs	r1, #28
   b765c:	f7fc ff50 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   b7660:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7662:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   b7664:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7668:	2120      	movs	r1, #32
   b766a:	f7fc ff49 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   b766e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7670:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b7674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7678:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b767a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b767e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b7680:	b182      	cbz	r2, b76a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7682:	7819      	ldrb	r1, [r3, #0]
   b7684:	0709      	lsls	r1, r1, #28
   b7686:	d40d      	bmi.n	b76a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   b7688:	1d19      	adds	r1, r3, #4
   b768a:	3328      	adds	r3, #40	; 0x28
   b768c:	f851 0b04 	ldr.w	r0, [r1], #4
   b7690:	f842 0b04 	str.w	r0, [r2], #4
   b7694:	4299      	cmp	r1, r3
   b7696:	d1f9      	bne.n	b768c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   b7698:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   b769c:	7813      	ldrb	r3, [r2, #0]
   b769e:	f043 0308 	orr.w	r3, r3, #8
   b76a2:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   b76a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   b76a8:	f7fe bdb7 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   b76ac:	784b      	ldrb	r3, [r1, #1]
   b76ae:	2b02      	cmp	r3, #2
   b76b0:	d158      	bne.n	b7764 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   b76b2:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   b76b6:	2e00      	cmp	r6, #0
   b76b8:	f43e ad21 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   b76bc:	68a8      	ldr	r0, [r5, #8]
   b76be:	2100      	movs	r1, #0
   b76c0:	f7fc ff1e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b76c4:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   b76c6:	68a8      	ldr	r0, [r5, #8]
   b76c8:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   b76cc:	2104      	movs	r1, #4
   b76ce:	f7fc ff24 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b76d2:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   b76d4:	68a8      	ldr	r0, [r5, #8]
   b76d6:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   b76da:	2106      	movs	r1, #6
   b76dc:	f7fc ff1d 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b76e0:	8170      	strh	r0, [r6, #10]
   b76e2:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   b76e4:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   b76e8:	886b      	ldrh	r3, [r5, #2]
   b76ea:	7a7a      	ldrb	r2, [r7, #9]
   b76ec:	b2b1      	uxth	r1, r6
   b76ee:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   b76f2:	d320      	bcc.n	b7736 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   b76f4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   b76f8:	886a      	ldrh	r2, [r5, #2]
   b76fa:	7a73      	ldrb	r3, [r6, #9]
   b76fc:	08db      	lsrs	r3, r3, #3
   b76fe:	3302      	adds	r3, #2
   b7700:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   b7704:	ea4f 0183 	mov.w	r1, r3, lsl #2
   b7708:	d826      	bhi.n	b7758 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b770a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   b770e:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   b7712:	b160      	cbz	r0, b772e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7714:	780b      	ldrb	r3, [r1, #0]
   b7716:	071a      	lsls	r2, r3, #28
   b7718:	d409      	bmi.n	b772e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   b771a:	2288      	movs	r2, #136	; 0x88
   b771c:	3104      	adds	r1, #4
   b771e:	f00c fefb 	bl	c4518 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   b7722:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   b7726:	7813      	ldrb	r3, [r2, #0]
   b7728:	f043 0308 	orr.w	r3, r3, #8
   b772c:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   b772e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   b7732:	f7fe bd72 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   b7736:	3b08      	subs	r3, #8
   b7738:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   b773c:	ddda      	ble.n	b76f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   b773e:	0089      	lsls	r1, r1, #2
   b7740:	3108      	adds	r1, #8
   b7742:	68a8      	ldr	r0, [r5, #8]
   b7744:	b289      	uxth	r1, r1
   b7746:	f7fc fedb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b774a:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   b774e:	3601      	adds	r6, #1
   b7750:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   b7752:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   b7754:	d1c6      	bne.n	b76e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   b7756:	e7cd      	b.n	b76f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   b7758:	68a8      	ldr	r0, [r5, #8]
   b775a:	f7fc fed1 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b775e:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   b7762:	e7d2      	b.n	b770a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   b7764:	2b03      	cmp	r3, #3
   b7766:	d14f      	bne.n	b7808 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   b7768:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   b776c:	2900      	cmp	r1, #0
   b776e:	f43e acc6 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   b7772:	886a      	ldrh	r2, [r5, #2]
   b7774:	1f13      	subs	r3, r2, #4
   b7776:	bf48      	it	mi
   b7778:	1cd3      	addmi	r3, r2, #3
   b777a:	10db      	asrs	r3, r3, #3
   b777c:	2700      	movs	r7, #0
   b777e:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   b7782:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   b7784:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   b7786:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   b778a:	3b04      	subs	r3, #4
   b778c:	42bb      	cmp	r3, r7
   b778e:	dc08      	bgt.n	b77a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7790:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   b7794:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   b7798:	bb10      	cbnz	r0, b77e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   b779a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   b779e:	f7fe bd3c 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   b77a2:	fa1f f887 	uxth.w	r8, r7
   b77a6:	f108 0104 	add.w	r1, r8, #4
   b77aa:	68a8      	ldr	r0, [r5, #8]
   b77ac:	b289      	uxth	r1, r1
   b77ae:	f7fc fea7 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b77b2:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   b77b6:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   b77ba:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   b77be:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   b77c2:	68a8      	ldr	r0, [r5, #8]
   b77c4:	b289      	uxth	r1, r1
   b77c6:	f7fc fe9b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   b77ca:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   b77ce:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   b77d0:	3601      	adds	r6, #1
   b77d2:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   b77d4:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   b77d8:	f107 0708 	add.w	r7, r7, #8
   b77dc:	d1d2      	bne.n	b7784 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   b77de:	e7d7      	b.n	b7790 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b77e0:	780b      	ldrb	r3, [r1, #0]
   b77e2:	071b      	lsls	r3, r3, #28
   b77e4:	d4d9      	bmi.n	b779a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   b77e6:	f44f 720e 	mov.w	r2, #568	; 0x238
   b77ea:	3108      	adds	r1, #8
   b77ec:	3004      	adds	r0, #4
   b77ee:	f00c fe93 	bl	c4518 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   b77f2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   b77f6:	7813      	ldrb	r3, [r2, #0]
   b77f8:	f043 0308 	orr.w	r3, r3, #8
   b77fc:	7013      	strb	r3, [r2, #0]
   b77fe:	e7cc      	b.n	b779a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   b7800:	001c0300 	.word	0x001c0300
   b7804:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   b7808:	2b10      	cmp	r3, #16
   b780a:	f47e ac78 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   b780e:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   b7812:	2e00      	cmp	r6, #0
   b7814:	f43e ac73 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   b7818:	68a8      	ldr	r0, [r5, #8]
   b781a:	2100      	movs	r1, #0
   b781c:	f7fc fe70 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7820:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b7822:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   b7824:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b7828:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   b782a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   b782c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   b782e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b7832:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   b7834:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   b7836:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   b7838:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b783c:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   b783e:	74da      	strb	r2, [r3, #19]
   b7840:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   b7842:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   b7846:	7cc6      	ldrb	r6, [r0, #19]
   b7848:	b28a      	uxth	r2, r1
   b784a:	4296      	cmp	r6, r2
   b784c:	d80c      	bhi.n	b7868 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b784e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b7852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7856:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7858:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b785c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   b785e:	bb62      	cbnz	r2, b78ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   b7860:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   b7864:	f7fe bcd9 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   b7868:	886a      	ldrh	r2, [r5, #2]
   b786a:	3a10      	subs	r2, #16
   b786c:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   b7870:	dded      	ble.n	b784e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   b7872:	68aa      	ldr	r2, [r5, #8]
   b7874:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   b7876:	1d0a      	adds	r2, r1, #4
   b7878:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   b787c:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   b787e:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   b7880:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   b7882:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b7886:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   b7888:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   b788c:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   b788e:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   b7890:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   b7892:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b7896:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   b7898:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   b789c:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   b789e:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   b78a0:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   b78a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   b78a6:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   b78a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   b78ac:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   b78ae:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   b78b0:	2907      	cmp	r1, #7
   b78b2:	f103 0304 	add.w	r3, r3, #4
   b78b6:	d1c4      	bne.n	b7842 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   b78b8:	e7c9      	b.n	b784e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b78ba:	7819      	ldrb	r1, [r3, #0]
   b78bc:	070f      	lsls	r7, r1, #28
   b78be:	d4cf      	bmi.n	b7860 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   b78c0:	1d19      	adds	r1, r3, #4
   b78c2:	3330      	adds	r3, #48	; 0x30
   b78c4:	f851 0b04 	ldr.w	r0, [r1], #4
   b78c8:	f842 0b04 	str.w	r0, [r2], #4
   b78cc:	4299      	cmp	r1, r3
   b78ce:	d1f9      	bne.n	b78c4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   b78d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   b78d4:	7813      	ldrb	r3, [r2, #0]
   b78d6:	f043 0308 	orr.w	r3, r3, #8
   b78da:	7013      	strb	r3, [r2, #0]
   b78dc:	e7c0      	b.n	b7860 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   b78de:	680b      	ldr	r3, [r1, #0]
   b78e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b78e4:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   b78e8:	d16a      	bne.n	b79c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   b78ea:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   b78ee:	2b00      	cmp	r3, #0
   b78f0:	f43e ac05 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   b78f4:	7818      	ldrb	r0, [r3, #0]
   b78f6:	7859      	ldrb	r1, [r3, #1]
   b78f8:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   b78fa:	bf36      	itet	cc
   b78fc:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   b7900:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   b7902:	1a52      	subcc	r2, r2, r1
   b7904:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   b7906:	2a0e      	cmp	r2, #14
   b7908:	d84b      	bhi.n	b79a2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   b790a:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   b790c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   b7910:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   b7912:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   b7914:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7918:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   b791a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b791c:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   b791e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7922:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   b7924:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7928:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   b792a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b792c:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   b792e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7932:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   b7934:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7938:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   b793a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b793c:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   b793e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7942:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   b7944:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7948:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   b794a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b794c:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   b794e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7952:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   b7954:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7958:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   b795a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b795c:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   b795e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7962:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   b7964:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7968:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   b796a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b796c:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   b796e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7972:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   b7974:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   b7978:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   b797a:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   b797c:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   b797e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   b7982:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   b7984:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   b7988:	7813      	ldrb	r3, [r2, #0]
   b798a:	3301      	adds	r3, #1
   b798c:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   b798e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   b7992:	781a      	ldrb	r2, [r3, #0]
   b7994:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   b7996:	f47e abb2 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   b799a:	2200      	movs	r2, #0
   b799c:	701a      	strb	r2, [r3, #0]
   b799e:	f7fe bbae 	b.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b79a2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b79a6:	b923      	cbnz	r3, b79b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   b79a8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b79ac:	2b00      	cmp	r3, #0
   b79ae:	f43e aba6 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   b79b2:	4996      	ldr	r1, [pc, #600]	; (b7c0c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   b79b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b79b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   b79bc:	f009 bd6d 	b.w	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   b79c0:	784b      	ldrb	r3, [r1, #1]
   b79c2:	2b80      	cmp	r3, #128	; 0x80
   b79c4:	f47e ab9b 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   b79c8:	884b      	ldrh	r3, [r1, #2]
   b79ca:	2ba4      	cmp	r3, #164	; 0xa4
   b79cc:	f63e ab97 	bhi.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   b79d0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   b79d4:	2a00      	cmp	r2, #0
   b79d6:	f43e ab92 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   b79da:	7810      	ldrb	r0, [r2, #0]
   b79dc:	7851      	ldrb	r1, [r2, #1]
   b79de:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   b79e0:	bf36      	itet	cc
   b79e2:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   b79e4:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   b79e6:	1a5b      	subcc	r3, r3, r1
   b79e8:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   b79ea:	2bf8      	cmp	r3, #248	; 0xf8
   b79ec:	d84f      	bhi.n	b7a8e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   b79ee:	23ac      	movs	r3, #172	; 0xac
   b79f0:	fb03 2200 	mla	r2, r3, r0, r2
   b79f4:	21b5      	movs	r1, #181	; 0xb5
   b79f6:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   b79f8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b79fc:	7811      	ldrb	r1, [r2, #0]
   b79fe:	fb03 2201 	mla	r2, r3, r1, r2
   b7a02:	2162      	movs	r1, #98	; 0x62
   b7a04:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   b7a06:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a0a:	7811      	ldrb	r1, [r2, #0]
   b7a0c:	fb03 2201 	mla	r2, r3, r1, r2
   b7a10:	2113      	movs	r1, #19
   b7a12:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   b7a14:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a18:	7811      	ldrb	r1, [r2, #0]
   b7a1a:	fb03 2201 	mla	r2, r3, r1, r2
   b7a1e:	2180      	movs	r1, #128	; 0x80
   b7a20:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   b7a22:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a26:	7811      	ldrb	r1, [r2, #0]
   b7a28:	fb03 2201 	mla	r2, r3, r1, r2
   b7a2c:	8869      	ldrh	r1, [r5, #2]
   b7a2e:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   b7a30:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a34:	7811      	ldrb	r1, [r2, #0]
   b7a36:	fb03 2201 	mla	r2, r3, r1, r2
   b7a3a:	8869      	ldrh	r1, [r5, #2]
   b7a3c:	0a09      	lsrs	r1, r1, #8
   b7a3e:	71d1      	strb	r1, [r2, #7]
   b7a40:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   b7a42:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   b7a44:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   b7a48:	b28e      	uxth	r6, r1
   b7a4a:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   b7a4c:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   b7a4e:	d907      	bls.n	b7a60 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   b7a50:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   b7a52:	fb03 2200 	mla	r2, r3, r0, r2
   b7a56:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   b7a58:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   b7a5a:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   b7a5c:	3101      	adds	r1, #1
   b7a5e:	e7f0      	b.n	b7a42 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   b7a60:	fb03 2200 	mla	r2, r3, r0, r2
   b7a64:	7b29      	ldrb	r1, [r5, #12]
   b7a66:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   b7a6a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a6e:	7b69      	ldrb	r1, [r5, #13]
   b7a70:	7810      	ldrb	r0, [r2, #0]
   b7a72:	fb03 2300 	mla	r3, r3, r0, r2
   b7a76:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   b7a7a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   b7a7e:	7813      	ldrb	r3, [r2, #0]
   b7a80:	3301      	adds	r3, #1
   b7a82:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   b7a84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   b7a88:	781a      	ldrb	r2, [r3, #0]
   b7a8a:	2afa      	cmp	r2, #250	; 0xfa
   b7a8c:	e783      	b.n	b7996 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7a8e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7a92:	b923      	cbnz	r3, b7a9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   b7a94:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7a98:	2b00      	cmp	r3, #0
   b7a9a:	f43e ab30 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   b7a9e:	495c      	ldr	r1, [pc, #368]	; (b7c10 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   b7aa0:	e788      	b.n	b79b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   b7aa2:	680b      	ldr	r3, [r1, #0]
   b7aa4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b7aa8:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   b7aac:	f040 80b2 	bne.w	b7c14 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   b7ab0:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   b7ab4:	2f00      	cmp	r7, #0
   b7ab6:	f43e ab22 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   b7aba:	68a8      	ldr	r0, [r5, #8]
   b7abc:	2100      	movs	r1, #0
   b7abe:	f7fc fd1f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7ac2:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   b7ac4:	68a8      	ldr	r0, [r5, #8]
   b7ac6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   b7aca:	2104      	movs	r1, #4
   b7acc:	f7fc fd25 	bl	b451a <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   b7ad0:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   b7ad2:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   b7ad4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7ad8:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   b7ada:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   b7adc:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   b7ade:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7ae2:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   b7ae4:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   b7ae6:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   b7ae8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7aec:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   b7aee:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   b7af0:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   b7af2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7af6:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   b7af8:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   b7afa:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   b7afc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7b00:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   b7b02:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   b7b04:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   b7b06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7b0a:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   b7b0c:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b0e:	210c      	movs	r1, #12
   b7b10:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   b7b12:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b16:	f7fc fcf3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   b7b1a:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   b7b1c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   b7b1e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7b22:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   b7b24:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   b7b26:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   b7b28:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   b7b2c:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   b7b2e:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b30:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   b7b32:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b36:	2114      	movs	r1, #20
   b7b38:	f7fc fce2 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   b7b3c:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b3e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   b7b40:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b44:	2118      	movs	r1, #24
   b7b46:	f7fc fcdb 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   b7b4a:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b4c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   b7b4e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b52:	211c      	movs	r1, #28
   b7b54:	f7fc fcd4 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   b7b58:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   b7b5c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b60:	2120      	movs	r1, #32
   b7b62:	f7fc fccd 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   b7b66:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b68:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   b7b6a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b6e:	2124      	movs	r1, #36	; 0x24
   b7b70:	f7fc fcc6 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   b7b74:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b76:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   b7b78:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b7c:	4631      	mov	r1, r6
   b7b7e:	f7fc fcbf 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   b7b82:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b84:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   b7b86:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b8a:	212c      	movs	r1, #44	; 0x2c
   b7b8c:	f7fc fcb8 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   b7b90:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b92:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   b7b94:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7b98:	2130      	movs	r1, #48	; 0x30
   b7b9a:	f7fc fcb1 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   b7b9e:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   b7ba0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   b7ba4:	68a8      	ldr	r0, [r5, #8]
   b7ba6:	2134      	movs	r1, #52	; 0x34
   b7ba8:	f7fc fcaa 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7bac:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   b7bae:	68a8      	ldr	r0, [r5, #8]
   b7bb0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   b7bb4:	2138      	movs	r1, #56	; 0x38
   b7bb6:	f7fc fca3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7bba:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   b7bbc:	68a8      	ldr	r0, [r5, #8]
   b7bbe:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   b7bc2:	213c      	movs	r1, #60	; 0x3c
   b7bc4:	f7fc fc9c 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7bc8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   b7bca:	68a8      	ldr	r0, [r5, #8]
   b7bcc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   b7bd0:	2140      	movs	r1, #64	; 0x40
   b7bd2:	f7fc fc95 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7bd6:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7bd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b7bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7be0:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7be2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   b7be6:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b7be8:	b160      	cbz	r0, b7c04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7bea:	780b      	ldrb	r3, [r1, #0]
   b7bec:	071e      	lsls	r6, r3, #28
   b7bee:	d409      	bmi.n	b7c04 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   b7bf0:	2248      	movs	r2, #72	; 0x48
   b7bf2:	3104      	adds	r1, #4
   b7bf4:	f00c fc90 	bl	c4518 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   b7bf8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   b7bfc:	7813      	ldrb	r3, [r2, #0]
   b7bfe:	f043 0308 	orr.w	r3, r3, #8
   b7c02:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   b7c04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   b7c08:	f7fe bb07 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   b7c0c:	000c69e1 	.word	0x000c69e1
   b7c10:	000c6a1e 	.word	0x000c6a1e
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   b7c14:	4a5d      	ldr	r2, [pc, #372]	; (b7d8c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   b7c16:	4293      	cmp	r3, r2
   b7c18:	d156      	bne.n	b7cc8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   b7c1a:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   b7c1e:	2e00      	cmp	r6, #0
   b7c20:	f43e aa6d 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   b7c24:	68a8      	ldr	r0, [r5, #8]
   b7c26:	2100      	movs	r1, #0
   b7c28:	f7fc fc6a 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7c2c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   b7c2e:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   b7c30:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   b7c34:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   b7c36:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c38:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   b7c3a:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c3e:	2108      	movs	r1, #8
   b7c40:	f7fc fc5e 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   b7c44:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c46:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   b7c48:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c4c:	210c      	movs	r1, #12
   b7c4e:	f7fc fc57 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   b7c52:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c54:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   b7c56:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7c5a:	2110      	movs	r1, #16
   b7c5c:	f7fc fc50 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   b7c60:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   b7c62:	68a8      	ldr	r0, [r5, #8]
   b7c64:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   b7c68:	2114      	movs	r1, #20
   b7c6a:	f7fc fc49 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7c6e:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   b7c70:	68a8      	ldr	r0, [r5, #8]
   b7c72:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   b7c76:	2118      	movs	r1, #24
   b7c78:	f7fc fc42 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7c7c:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   b7c7e:	68a8      	ldr	r0, [r5, #8]
   b7c80:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   b7c84:	211c      	movs	r1, #28
   b7c86:	f7fc fc3b 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7c8a:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7c8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   b7c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7c94:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7c96:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   b7c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   b7c9c:	b182      	cbz	r2, b7cc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7c9e:	7819      	ldrb	r1, [r3, #0]
   b7ca0:	0708      	lsls	r0, r1, #28
   b7ca2:	d40d      	bmi.n	b7cc0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   b7ca4:	1d19      	adds	r1, r3, #4
   b7ca6:	3324      	adds	r3, #36	; 0x24
   b7ca8:	f851 0b04 	ldr.w	r0, [r1], #4
   b7cac:	f842 0b04 	str.w	r0, [r2], #4
   b7cb0:	4299      	cmp	r1, r3
   b7cb2:	d1f9      	bne.n	b7ca8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   b7cb4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   b7cb8:	7813      	ldrb	r3, [r2, #0]
   b7cba:	f043 0308 	orr.w	r3, r3, #8
   b7cbe:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   b7cc0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   b7cc4:	f7fe baa9 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   b7cc8:	4a31      	ldr	r2, [pc, #196]	; (b7d90 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   b7cca:	4293      	cmp	r3, r2
   b7ccc:	f47e aa17 	bne.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   b7cd0:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   b7cd4:	2e00      	cmp	r6, #0
   b7cd6:	f43e aa12 	beq.w	b60fe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   b7cda:	68a8      	ldr	r0, [r5, #8]
   b7cdc:	2100      	movs	r1, #0
   b7cde:	f7fc fc0f 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7ce2:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   b7ce4:	68a8      	ldr	r0, [r5, #8]
   b7ce6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   b7cea:	2108      	movs	r1, #8
   b7cec:	f7fc fc08 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   b7cf0:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7cf2:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   b7cf4:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7cf8:	210c      	movs	r1, #12
   b7cfa:	f7fc fc01 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   b7cfe:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d00:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   b7d02:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d06:	2110      	movs	r1, #16
   b7d08:	f7fc fbfa 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   b7d0c:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   b7d10:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d14:	2114      	movs	r1, #20
   b7d16:	f7fc fbf3 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   b7d1a:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d1c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   b7d1e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d22:	2118      	movs	r1, #24
   b7d24:	f7fc fbec 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   b7d28:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d2a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   b7d2c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d30:	211c      	movs	r1, #28
   b7d32:	f7fc fbe5 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   b7d36:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d38:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   b7d3a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   b7d3e:	2120      	movs	r1, #32
   b7d40:	f7fc fbde 	bl	b4500 <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   b7d44:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   b7d46:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   b7d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7d4e:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   b7d50:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   b7d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   b7d56:	b182      	cbz	r2, b7d7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   b7d58:	7819      	ldrb	r1, [r3, #0]
   b7d5a:	0709      	lsls	r1, r1, #28
   b7d5c:	d40d      	bmi.n	b7d7a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   b7d5e:	1d19      	adds	r1, r3, #4
   b7d60:	3328      	adds	r3, #40	; 0x28
   b7d62:	f851 0b04 	ldr.w	r0, [r1], #4
   b7d66:	f842 0b04 	str.w	r0, [r2], #4
   b7d6a:	4299      	cmp	r1, r3
   b7d6c:	d1f9      	bne.n	b7d62 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   b7d6e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   b7d72:	7813      	ldrb	r3, [r2, #0]
   b7d74:	f043 0308 	orr.w	r3, r3, #8
   b7d78:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   b7d7a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   b7d7e:	f7fe ba4c 	b.w	b621a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   b7d82:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   b7d84:	2018      	movs	r0, #24
   b7d86:	f7ff b9a2 	b.w	b70ce <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   b7d8a:	bf00      	nop
   b7d8c:	00200100 	.word	0x00200100
   b7d90:	00240200 	.word	0x00240200

000b7d94 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   b7d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d98:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   b7d9a:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   b7d9e:	f89d a020 	ldrb.w	sl, [sp, #32]
   b7da2:	4604      	mov	r4, r0
   b7da4:	460f      	mov	r7, r1
   b7da6:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   b7da8:	b993      	cbnz	r3, b7dd0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   b7daa:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   b7dae:	886b      	ldrh	r3, [r5, #2]
   b7db0:	88aa      	ldrh	r2, [r5, #4]
   b7db2:	3303      	adds	r3, #3
   b7db4:	4293      	cmp	r3, r2
   b7db6:	db03      	blt.n	b7dc0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   b7db8:	4639      	mov	r1, r7
   b7dba:	4620      	mov	r0, r4
   b7dbc:	f7fd fdf0 	bl	b59a0 <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   b7dc0:	88ae      	ldrh	r6, [r5, #4]
   b7dc2:	bb7e      	cbnz	r6, b7e24 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   b7dc4:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   b7dc6:	88ab      	ldrh	r3, [r5, #4]
   b7dc8:	3301      	adds	r3, #1
   b7dca:	80ab      	strh	r3, [r5, #4]
}
   b7dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   b7dd0:	2b03      	cmp	r3, #3
   b7dd2:	d124      	bne.n	b7e1e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   b7dd4:	7852      	ldrb	r2, [r2, #1]
   b7dd6:	7829      	ldrb	r1, [r5, #0]
   b7dd8:	f7fc fdda 	bl	b4990 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   b7ddc:	4680      	mov	r8, r0
   b7dde:	2800      	cmp	r0, #0
   b7de0:	d1e5      	bne.n	b7dae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7de2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7de6:	b91b      	cbnz	r3, b7df0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   b7de8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b7dec:	2b00      	cmp	r3, #0
   b7dee:	d0de      	beq.n	b7dae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   b7df0:	49b7      	ldr	r1, [pc, #732]	; (b80d0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   b7df2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7df6:	f009 fb36 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   b7dfa:	7829      	ldrb	r1, [r5, #0]
   b7dfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e00:	220a      	movs	r2, #10
   b7e02:	f7fc fb9d 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   b7e06:	49b3      	ldr	r1, [pc, #716]	; (b80d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   b7e08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e0c:	f009 fb2b 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   b7e10:	7869      	ldrb	r1, [r5, #1]
   b7e12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e16:	220a      	movs	r2, #10
   b7e18:	f7fc fb99 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b7e1c:	e7c7      	b.n	b7dae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   b7e1e:	f04f 0802 	mov.w	r8, #2
   b7e22:	e7c4      	b.n	b7dae <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   b7e24:	2e01      	cmp	r6, #1
   b7e26:	d101      	bne.n	b7e2c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   b7e28:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b7e2a:	e7cc      	b.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   b7e2c:	2e02      	cmp	r6, #2
   b7e2e:	d101      	bne.n	b7e34 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   b7e30:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b7e32:	e7c8      	b.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   b7e34:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   b7e36:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   b7e38:	d103      	bne.n	b7e42 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   b7e3a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   b7e3e:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b7e40:	e7c1      	b.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   b7e42:	1d0b      	adds	r3, r1, #4
   b7e44:	429e      	cmp	r6, r3
   b7e46:	d136      	bne.n	b7eb6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   b7e48:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b7e4a:	88aa      	ldrh	r2, [r5, #4]
   b7e4c:	f108 0306 	add.w	r3, r8, #6
   b7e50:	429a      	cmp	r2, r3
   b7e52:	d1b8      	bne.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   b7e54:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   b7e58:	2b00      	cmp	r3, #0
   b7e5a:	d1b4      	bne.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   b7e5c:	2200      	movs	r2, #0
   b7e5e:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b7e60:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   b7e64:	b91a      	cbnz	r2, b7e6e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   b7e66:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   b7e6a:	2a00      	cmp	r2, #0
   b7e6c:	d0ab      	beq.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   b7e6e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   b7e72:	2b00      	cmp	r3, #0
   b7e74:	f000 8170 	beq.w	b8158 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   b7e78:	4997      	ldr	r1, [pc, #604]	; (b80d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   b7e7a:	f009 faf4 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   b7e7e:	4997      	ldr	r1, [pc, #604]	; (b80dc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   b7e80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e84:	f009 faef 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b7e88:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   b7e8c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e90:	220a      	movs	r2, #10
   b7e92:	f009 fb04 	bl	c149e <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   b7e96:	4992      	ldr	r1, [pc, #584]	; (b80e0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   b7e98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7e9c:	f009 fae3 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   b7ea0:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   b7ea4:	220a      	movs	r2, #10
   b7ea6:	4641      	mov	r1, r8
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	f009 faf8 	bl	c149e <_ZN5Print11printNumberEmh>
        n += println();
   b7eae:	4620      	mov	r0, r4
   b7eb0:	f009 fadd 	bl	c146e <_ZN5Print7printlnEv>
        return n;
   b7eb4:	e787      	b.n	b7dc6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   b7eb6:	3105      	adds	r1, #5
   b7eb8:	428e      	cmp	r6, r1
   b7eba:	f040 812f 	bne.w	b811c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   b7ebe:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   b7ec0:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   b7ec2:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   b7ec4:	89a9      	ldrh	r1, [r5, #12]
   b7ec6:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   b7eca:	4291      	cmp	r1, r2
   b7ecc:	f040 80ae 	bne.w	b802c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   b7ed0:	2301      	movs	r3, #1
   b7ed2:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   b7ed4:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   b7ed8:	7829      	ldrb	r1, [r5, #0]
   b7eda:	4549      	cmp	r1, r9
   b7edc:	d155      	bne.n	b7f8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   b7ede:	786b      	ldrb	r3, [r5, #1]
   b7ee0:	4553      	cmp	r3, sl
   b7ee2:	d152      	bne.n	b7f8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   b7ee4:	2301      	movs	r3, #1
   b7ee6:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   b7ee8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7eec:	b3b3      	cbz	r3, b7f5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   b7eee:	497d      	ldr	r1, [pc, #500]	; (b80e4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   b7ef0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7ef4:	f009 fab7 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b7ef8:	220a      	movs	r2, #10
   b7efa:	8869      	ldrh	r1, [r5, #2]
   b7efc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f00:	f009 facd 	bl	c149e <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   b7f04:	4978      	ldr	r1, [pc, #480]	; (b80e8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   b7f06:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f0a:	f009 faac 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   b7f0e:	2200      	movs	r2, #0
   b7f10:	4629      	mov	r1, r5
   b7f12:	4620      	mov	r0, r4
   b7f14:	f7fd ff50 	bl	b5db8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   b7f18:	7bab      	ldrb	r3, [r5, #14]
   b7f1a:	2b01      	cmp	r3, #1
   b7f1c:	d104      	bne.n	b7f28 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   b7f1e:	4973      	ldr	r1, [pc, #460]	; (b80ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   b7f20:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f24:	f009 fab9 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   b7f28:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   b7f2c:	2b01      	cmp	r3, #1
   b7f2e:	d104      	bne.n	b7f3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   b7f30:	496f      	ldr	r1, [pc, #444]	; (b80f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   b7f32:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f36:	f009 fab0 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   b7f3a:	7beb      	ldrb	r3, [r5, #15]
   b7f3c:	2b01      	cmp	r3, #1
   b7f3e:	d104      	bne.n	b7f4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   b7f40:	496c      	ldr	r1, [pc, #432]	; (b80f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   b7f42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f46:	f009 faa8 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   b7f4a:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   b7f4e:	2b01      	cmp	r3, #1
   b7f50:	d104      	bne.n	b7f5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   b7f52:	4969      	ldr	r1, [pc, #420]	; (b80f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   b7f54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7f58:	f009 fa9f 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   b7f5c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   b7f60:	b91b      	cbnz	r3, b7f6a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   b7f62:	4629      	mov	r1, r5
   b7f64:	4620      	mov	r0, r4
   b7f66:	f7fe f8b9 	bl	b60dc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   b7f6a:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   b7f6e:	2b03      	cmp	r3, #3
   b7f70:	f47f af6b 	bne.w	b7e4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   b7f74:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   b7f78:	b108      	cbz	r0, b7f7e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   b7f7a:	f7fc f890 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   b7f7e:	2300      	movs	r3, #0
   b7f80:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   b7f84:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b7f88:	e75f      	b.n	b7e4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   b7f8a:	882b      	ldrh	r3, [r5, #0]
   b7f8c:	f240 1205 	movw	r2, #261	; 0x105
   b7f90:	4293      	cmp	r3, r2
   b7f92:	d123      	bne.n	b7fdc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   b7f94:	68ab      	ldr	r3, [r5, #8]
   b7f96:	781a      	ldrb	r2, [r3, #0]
   b7f98:	454a      	cmp	r2, r9
   b7f9a:	d102      	bne.n	b7fa2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   b7f9c:	785b      	ldrb	r3, [r3, #1]
   b7f9e:	4553      	cmp	r3, sl
   b7fa0:	d0a0      	beq.n	b7ee4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   b7fa2:	786a      	ldrb	r2, [r5, #1]
   b7fa4:	4620      	mov	r0, r4
   b7fa6:	f7fc fbf1 	bl	b478c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   b7faa:	2800      	cmp	r0, #0
   b7fac:	d09c      	beq.n	b7ee8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   b7fae:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7fb2:	2b00      	cmp	r3, #0
   b7fb4:	d0d2      	beq.n	b7f5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   b7fb6:	4951      	ldr	r1, [pc, #324]	; (b80fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   b7fb8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7fbc:	f009 fa53 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   b7fc0:	2210      	movs	r2, #16
   b7fc2:	7829      	ldrb	r1, [r5, #0]
   b7fc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7fc8:	f7fc faba 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   b7fcc:	4941      	ldr	r1, [pc, #260]	; (b80d4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   b7fce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b7fd2:	f009 fa48 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   b7fd6:	7869      	ldrb	r1, [r5, #1]
   b7fd8:	2210      	movs	r2, #16
   b7fda:	e022      	b.n	b8022 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   b7fdc:	2b05      	cmp	r3, #5
   b7fde:	d1e0      	bne.n	b7fa2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   b7fe0:	68ab      	ldr	r3, [r5, #8]
   b7fe2:	781a      	ldrb	r2, [r3, #0]
   b7fe4:	454a      	cmp	r2, r9
   b7fe6:	d1dc      	bne.n	b7fa2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   b7fe8:	785b      	ldrb	r3, [r3, #1]
   b7fea:	4553      	cmp	r3, sl
   b7fec:	d1d9      	bne.n	b7fa2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   b7fee:	2303      	movs	r3, #3
   b7ff0:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   b7ff2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b7ff6:	2b00      	cmp	r3, #0
   b7ff8:	d0b0      	beq.n	b7f5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   b7ffa:	4941      	ldr	r1, [pc, #260]	; (b8100 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   b7ffc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8000:	f009 fa31 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   b8004:	68ab      	ldr	r3, [r5, #8]
   b8006:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b800a:	7819      	ldrb	r1, [r3, #0]
   b800c:	2210      	movs	r2, #16
   b800e:	f7fc fa97 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   b8012:	493c      	ldr	r1, [pc, #240]	; (b8104 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   b8014:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8018:	f009 fa25 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   b801c:	68ab      	ldr	r3, [r5, #8]
   b801e:	7859      	ldrb	r1, [r3, #1]
   b8020:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   b8022:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8026:	f7fc fa92 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b802a:	e75d      	b.n	b7ee8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   b802c:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   b802e:	782b      	ldrb	r3, [r5, #0]
   b8030:	454b      	cmp	r3, r9
   b8032:	d143      	bne.n	b80bc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   b8034:	786a      	ldrb	r2, [r5, #1]
   b8036:	4552      	cmp	r2, sl
   b8038:	d140      	bne.n	b80bc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   b803a:	2300      	movs	r3, #0
   b803c:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b803e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8042:	b91b      	cbnz	r3, b804c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   b8044:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8048:	2b00      	cmp	r3, #0
   b804a:	d08e      	beq.n	b7f6a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   b804c:	492e      	ldr	r1, [pc, #184]	; (b8108 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   b804e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8052:	f009 fa08 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   b8056:	492d      	ldr	r1, [pc, #180]	; (b810c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   b8058:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b805c:	f009 fa03 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   b8060:	7b29      	ldrb	r1, [r5, #12]
   b8062:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8066:	220a      	movs	r2, #10
   b8068:	f7fc fa6a 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   b806c:	4928      	ldr	r1, [pc, #160]	; (b8110 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   b806e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8072:	f009 f9f8 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   b8076:	7b69      	ldrb	r1, [r5, #13]
   b8078:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b807c:	220a      	movs	r2, #10
   b807e:	f7fc fa5f 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   b8082:	4924      	ldr	r1, [pc, #144]	; (b8114 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   b8084:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8088:	f009 f9ed 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   b808c:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   b8090:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8094:	220a      	movs	r2, #10
   b8096:	f7fc fa53 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   b809a:	491f      	ldr	r1, [pc, #124]	; (b8118 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   b809c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b80a0:	f009 f9e1 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   b80a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b80a8:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   b80ac:	220a      	movs	r2, #10
   b80ae:	f7fc fa47 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   b80b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b80b6:	f009 f9da 	bl	c146e <_ZN5Print7printlnEv>
   b80ba:	e756      	b.n	b7f6a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   b80bc:	2b05      	cmp	r3, #5
   b80be:	d1be      	bne.n	b803e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   b80c0:	68ab      	ldr	r3, [r5, #8]
   b80c2:	781a      	ldrb	r2, [r3, #0]
   b80c4:	454a      	cmp	r2, r9
   b80c6:	d1ba      	bne.n	b803e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   b80c8:	785b      	ldrb	r3, [r3, #1]
   b80ca:	4553      	cmp	r3, sl
   b80cc:	d1b7      	bne.n	b803e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   b80ce:	e7b4      	b.n	b803a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   b80d0:	000c6a60 	.word	0x000c6a60
   b80d4:	000c6ad1 	.word	0x000c6ad1
   b80d8:	000c6bd9 	.word	0x000c6bd9
   b80dc:	000c6c30 	.word	0x000c6c30
   b80e0:	000c6c46 	.word	0x000c6c46
   b80e4:	000c6b0d 	.word	0x000c6b0d
   b80e8:	000c6b1e 	.word	0x000c6b1e
   b80ec:	000c6b2a 	.word	0x000c6b2a
   b80f0:	000c6b3e 	.word	0x000c6b3e
   b80f4:	000c6b52 	.word	0x000c6b52
   b80f8:	000c6b6c 	.word	0x000c6b6c
   b80fc:	000c6ad9 	.word	0x000c6ad9
   b8100:	000c6a98 	.word	0x000c6a98
   b8104:	000c6ac7 	.word	0x000c6ac7
   b8108:	000c6b86 	.word	0x000c6b86
   b810c:	000c6b97 	.word	0x000c6b97
   b8110:	000c6ba4 	.word	0x000c6ba4
   b8114:	000c6bb1 	.word	0x000c6bb1
   b8118:	000c6bc5 	.word	0x000c6bc5
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   b811c:	786a      	ldrb	r2, [r5, #1]
   b811e:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   b8120:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   b8124:	4620      	mov	r0, r4
   b8126:	f7fc fb31 	bl	b478c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   b812a:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   b812e:	2800      	cmp	r0, #0
   b8130:	bf18      	it	ne
   b8132:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   b8136:	2b00      	cmp	r3, #0
   b8138:	f47f ae87 	bne.w	b7e4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   b813c:	1ef3      	subs	r3, r6, #3
   b813e:	454b      	cmp	r3, r9
   b8140:	f77f ae83 	ble.w	b7e4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   b8144:	3e04      	subs	r6, #4
   b8146:	eba6 0609 	sub.w	r6, r6, r9
   b814a:	4546      	cmp	r6, r8
   b814c:	da02      	bge.n	b8154 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   b814e:	68ab      	ldr	r3, [r5, #8]
   b8150:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   b8152:	e67a      	b.n	b7e4a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   b8154:	2301      	movs	r3, #1
   b8156:	e681      	b.n	b7e5c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   b8158:	4900      	ldr	r1, [pc, #0]	; (b815c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   b815a:	e68e      	b.n	b7e7a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   b815c:	000c6bfe 	.word	0x000c6bfe

000b8160 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   b8160:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b8162:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   b8166:	4604      	mov	r4, r0
   b8168:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   b816a:	b113      	cbz	r3, b8172 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   b816c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   b8170:	b953      	cbnz	r3, b8188 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   b8172:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   b8176:	b128      	cbz	r0, b8184 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   b8178:	490e      	ldr	r1, [pc, #56]	; (b81b4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   b817a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b817e:	f009 f98c 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   b8182:	2000      	movs	r0, #0
}
   b8184:	b003      	add	sp, #12
   b8186:	bd30      	pop	{r4, r5, pc}
   b8188:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   b818a:	f7fd ff12 	bl	b5fb2 <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   b818e:	4285      	cmp	r5, r0
   b8190:	9901      	ldr	r1, [sp, #4]
   b8192:	d908      	bls.n	b81a6 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8194:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8198:	b91b      	cbnz	r3, b81a2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   b819a:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b819e:	2800      	cmp	r0, #0
   b81a0:	d0f0      	beq.n	b8184 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   b81a2:	4905      	ldr	r1, [pc, #20]	; (b81b8 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   b81a4:	e7e9      	b.n	b817a <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   b81a6:	4620      	mov	r0, r4
   b81a8:	462a      	mov	r2, r5
   b81aa:	f7fd ff0b 	bl	b5fc4 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   b81ae:	2001      	movs	r0, #1
   b81b0:	e7e8      	b.n	b8184 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   b81b2:	bf00      	nop
   b81b4:	000c6c5e 	.word	0x000c6c5e
   b81b8:	000c6c89 	.word	0x000c6c89

000b81bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   b81bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b81c0:	4604      	mov	r4, r0
   b81c2:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   b81c4:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   b81c8:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   b81cc:	f88d 100f 	strb.w	r1, [sp, #15]
   b81d0:	4615      	mov	r5, r2
   b81d2:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   b81d4:	b118      	cbz	r0, b81de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   b81d6:	6803      	ldr	r3, [r0, #0]
   b81d8:	b2c9      	uxtb	r1, r1
   b81da:	689b      	ldr	r3, [r3, #8]
   b81dc:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   b81de:	7823      	ldrb	r3, [r4, #0]
   b81e0:	2b01      	cmp	r3, #1
   b81e2:	d80e      	bhi.n	b8202 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   b81e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b81e8:	2bb5      	cmp	r3, #181	; 0xb5
   b81ea:	d12e      	bne.n	b824a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   b81ec:	2300      	movs	r3, #0
   b81ee:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   b81f2:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   b81f4:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   b81f8:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   b81fc:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   b81fe:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   b8202:	7826      	ldrb	r6, [r4, #0]
   b8204:	2e02      	cmp	r6, #2
   b8206:	f040 81d5 	bne.w	b85b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   b820a:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   b820e:	bb5b      	cbnz	r3, b8268 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   b8210:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b8214:	2bb5      	cmp	r3, #181	; 0xb5
   b8216:	d001      	beq.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   b8218:	2300      	movs	r3, #0
   b821a:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   b821c:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   b8220:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b8224:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   b8228:	2b01      	cmp	r3, #1
   b822a:	f040 81a3 	bne.w	b8574 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   b822e:	463b      	mov	r3, r7
   b8230:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   b8234:	4620      	mov	r0, r4
   b8236:	f7ff fdad 	bl	b7d94 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   b823a:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   b823e:	3301      	adds	r3, #1
   b8240:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   b8244:	b005      	add	sp, #20
   b8246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   b824a:	2b24      	cmp	r3, #36	; 0x24
   b824c:	d105      	bne.n	b825a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   b824e:	2300      	movs	r3, #0
   b8250:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   b8254:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b8256:	7023      	strb	r3, [r4, #0]
   b8258:	e7d3      	b.n	b8202 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   b825a:	2bd3      	cmp	r3, #211	; 0xd3
   b825c:	d1d1      	bne.n	b8202 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   b825e:	2300      	movs	r3, #0
   b8260:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b8264:	2303      	movs	r3, #3
   b8266:	e7f6      	b.n	b8256 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   b8268:	2b01      	cmp	r3, #1
   b826a:	d103      	bne.n	b8274 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   b826c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b8270:	2b62      	cmp	r3, #98	; 0x62
   b8272:	e7d0      	b.n	b8216 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   b8274:	2b02      	cmp	r3, #2
   b8276:	d10e      	bne.n	b8296 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   b8278:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b827c:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   b8280:	2200      	movs	r2, #0
   b8282:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   b8286:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   b828a:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   b828e:	88eb      	ldrh	r3, [r5, #6]
   b8290:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   b8294:	e7c2      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   b8296:	2b03      	cmp	r3, #3
   b8298:	f040 80b7 	bne.w	b840a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   b829c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   b82a0:	f89d 600f 	ldrb.w	r6, [sp, #15]
   b82a4:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   b82a8:	2905      	cmp	r1, #5
   b82aa:	d0b7      	beq.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   b82ac:	42b9      	cmp	r1, r7
   b82ae:	d10c      	bne.n	b82ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   b82b0:	4546      	cmp	r6, r8
   b82b2:	d10a      	bne.n	b82ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   b82b4:	2300      	movs	r3, #0
   b82b6:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   b82ba:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   b82bc:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   b82c0:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   b82c2:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   b82c6:	80ab      	strh	r3, [r5, #4]
   b82c8:	e7a8      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   b82ca:	4632      	mov	r2, r6
   b82cc:	4620      	mov	r0, r4
   b82ce:	f7fc fa5d 	bl	b478c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   b82d2:	2800      	cmp	r0, #0
   b82d4:	f000 8095 	beq.w	b8402 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   b82d8:	4632      	mov	r2, r6
   b82da:	4620      	mov	r0, r4
   b82dc:	f7fc fb58 	bl	b4990 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   b82e0:	4606      	mov	r6, r0
   b82e2:	b9e8      	cbnz	r0, b8320 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b82e4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b82e8:	b913      	cbnz	r3, b82f0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   b82ea:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b82ee:	b1bb      	cbz	r3, b8320 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   b82f0:	49a7      	ldr	r1, [pc, #668]	; (b8590 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   b82f2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b82f6:	f009 f8b6 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   b82fa:	220a      	movs	r2, #10
   b82fc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   b8300:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8304:	f7fc f91c 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   b8308:	49a2      	ldr	r1, [pc, #648]	; (b8594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   b830a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b830e:	f009 f8aa 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   b8312:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   b8316:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b831a:	220a      	movs	r2, #10
   b831c:	f7fc f917 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   b8320:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   b8324:	b1a3      	cbz	r3, b8350 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8326:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b832a:	b913      	cbnz	r3, b8332 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   b832c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8330:	b123      	cbz	r3, b833c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   b8332:	4999      	ldr	r1, [pc, #612]	; (b8598 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   b8334:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8338:	f009 f8af 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   b833c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   b8340:	b108      	cbz	r0, b8346 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   b8342:	f7fb feac 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   b8346:	2300      	movs	r3, #0
   b8348:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   b834c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   b8350:	4630      	mov	r0, r6
   b8352:	f7fb fea2 	bl	b409a <_Znaj>
   b8356:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b835a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   b835e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   b8362:	bb38      	cbnz	r0, b83b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8364:	b913      	cbnz	r3, b836c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   b8366:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b836a:	b1e3      	cbz	r3, b83a6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   b836c:	498b      	ldr	r1, [pc, #556]	; (b859c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   b836e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8372:	f009 f878 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   b8376:	2210      	movs	r2, #16
   b8378:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   b837c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8380:	f7fc f8de 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   b8384:	4983      	ldr	r1, [pc, #524]	; (b8594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   b8386:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b838a:	f009 f86c 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   b838e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   b8392:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8396:	2210      	movs	r2, #16
   b8398:	f7fc f8d9 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   b839c:	4980      	ldr	r1, [pc, #512]	; (b85a0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   b839e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b83a2:	f009 f87a 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   b83a6:	2300      	movs	r3, #0
   b83a8:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   b83ac:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   b83b0:	702b      	strb	r3, [r5, #0]
   b83b2:	e783      	b.n	b82bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   b83b4:	2203      	movs	r2, #3
   b83b6:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   b83ba:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   b83be:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   b83c2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   b83c6:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   b83ca:	2b00      	cmp	r3, #0
   b83cc:	f43f af26 	beq.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   b83d0:	4974      	ldr	r1, [pc, #464]	; (b85a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   b83d2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b83d6:	f009 f846 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   b83da:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   b83de:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b83e2:	2210      	movs	r2, #16
   b83e4:	f7fc f8ac 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   b83e8:	496a      	ldr	r1, [pc, #424]	; (b8594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   b83ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b83ee:	f009 f83a 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   b83f2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   b83f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b83fa:	2210      	movs	r2, #16
   b83fc:	f7fc f8a7 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b8400:	e70c      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   b8402:	2301      	movs	r3, #1
   b8404:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   b8408:	e708      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   b840a:	2b04      	cmp	r3, #4
   b840c:	d104      	bne.n	b8418 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   b840e:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   b8412:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   b8416:	e701      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   b8418:	2b05      	cmp	r3, #5
   b841a:	d106      	bne.n	b842a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   b841c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8420:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   b8424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   b8428:	e7f3      	b.n	b8412 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   b842a:	2b06      	cmp	r3, #6
   b842c:	d12b      	bne.n	b8486 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   b842e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   b8432:	bb13      	cbnz	r3, b847a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8434:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8438:	b913      	cbnz	r3, b8440 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   b843a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b843e:	b1bb      	cbz	r3, b8470 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   b8440:	4959      	ldr	r1, [pc, #356]	; (b85a8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   b8442:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8446:	f009 f80e 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   b844a:	2210      	movs	r2, #16
   b844c:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   b8450:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8454:	f7fc f874 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   b8458:	494e      	ldr	r1, [pc, #312]	; (b8594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   b845a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b845e:	f009 f802 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   b8462:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   b8466:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b846a:	2210      	movs	r2, #16
   b846c:	f7fc f86f 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   b8470:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b8474:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b8478:	e6d0      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   b847a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   b847e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8482:	701a      	strb	r2, [r3, #0]
   b8484:	e6ca      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   b8486:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   b8488:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   b848c:	f47f aec6 	bne.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   b8490:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   b8494:	bb9b      	cbnz	r3, b84fe <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   b8496:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   b849a:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   b849e:	2b02      	cmp	r3, #2
   b84a0:	f47f aebc 	bne.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   b84a4:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   b84a8:	2905      	cmp	r1, #5
   b84aa:	f47f aeb7 	bne.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   b84ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   b84b2:	781a      	ldrb	r2, [r3, #0]
   b84b4:	42ba      	cmp	r2, r7
   b84b6:	f47f aeb1 	bne.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   b84ba:	785a      	ldrb	r2, [r3, #1]
   b84bc:	4542      	cmp	r2, r8
   b84be:	f47f aead 	bne.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   b84c2:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   b84c6:	2a02      	cmp	r2, #2
   b84c8:	d121      	bne.n	b850e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   b84ca:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   b84ce:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   b84d2:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   b84d6:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   b84da:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   b84de:	2001      	movs	r0, #1
   b84e0:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   b84e4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   b84e8:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   b84ec:	781b      	ldrb	r3, [r3, #0]
   b84ee:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   b84f0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   b84f4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   b84f8:	7852      	ldrb	r2, [r2, #1]
   b84fa:	705a      	strb	r2, [r3, #1]
   b84fc:	e68e      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   b84fe:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   b8500:	bf16      	itet	ne
   b8502:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   b8506:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   b850a:	705a      	strbne	r2, [r3, #1]
   b850c:	e7c5      	b.n	b849a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b850e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8512:	b923      	cbnz	r3, b851e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   b8514:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8518:	2b00      	cmp	r3, #0
   b851a:	f43f ae7f 	beq.w	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   b851e:	4923      	ldr	r1, [pc, #140]	; (b85ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   b8520:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8524:	f008 ff9f 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   b8528:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   b852c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8530:	7819      	ldrb	r1, [r3, #0]
   b8532:	2210      	movs	r2, #16
   b8534:	f7fc f804 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   b8538:	4916      	ldr	r1, [pc, #88]	; (b8594 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   b853a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b853e:	f008 ff92 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   b8542:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   b8546:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b854a:	7859      	ldrb	r1, [r3, #1]
   b854c:	2210      	movs	r2, #16
   b854e:	f7fb fff7 	bl	b4540 <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   b8552:	4917      	ldr	r1, [pc, #92]	; (b85b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   b8554:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8558:	f008 ff85 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   b855c:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   b8560:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   b8564:	220a      	movs	r2, #10
   b8566:	4630      	mov	r0, r6
   b8568:	f008 ff99 	bl	c149e <_ZN5Print11printNumberEmh>
        n += println();
   b856c:	4630      	mov	r0, r6
   b856e:	f008 ff7e 	bl	c146e <_ZN5Print7printlnEv>
        return n;
   b8572:	e653      	b.n	b821c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   b8574:	b913      	cbnz	r3, b857c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   b8576:	463b      	mov	r3, r7
   b8578:	462a      	mov	r2, r5
   b857a:	e65b      	b.n	b8234 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   b857c:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   b857e:	bf08      	it	eq
   b8580:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   b8584:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   b8586:	bf18      	it	ne
   b8588:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   b858c:	e652      	b.n	b8234 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   b858e:	bf00      	nop
   b8590:	000c6cca 	.word	0x000c6cca
   b8594:	000c6ad1 	.word	0x000c6ad1
   b8598:	000c6cff 	.word	0x000c6cff
   b859c:	000c6d41 	.word	0x000c6d41
   b85a0:	000c6d86 	.word	0x000c6d86
   b85a4:	000c6db8 	.word	0x000c6db8
   b85a8:	000c6de9 	.word	0x000c6de9
   b85ac:	000c6e19 	.word	0x000c6e19
   b85b0:	000c6e49 	.word	0x000c6e49
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   b85b4:	2e01      	cmp	r6, #1
   b85b6:	f040 8188 	bne.w	b88ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   b85ba:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   b85be:	2b00      	cmp	r3, #0
   b85c0:	d146      	bne.n	b8650 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   b85c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b85c6:	2a24      	cmp	r2, #36	; 0x24
   b85c8:	f000 8086 	beq.w	b86d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   b85cc:	2300      	movs	r3, #0
   b85ce:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   b85d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b85d4:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   b85d6:	bf04      	itt	eq
   b85d8:	23fb      	moveq	r3, #251	; 0xfb
   b85da:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   b85de:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   b85e2:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   b85e6:	3501      	adds	r5, #1
   b85e8:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   b85ea:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   b85ec:	bf08      	it	eq
   b85ee:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   b85f0:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   b85f4:	bf08      	it	eq
   b85f6:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   b85f8:	2d00      	cmp	r5, #0
   b85fa:	f47f ae23 	bne.w	b8244 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   b85fe:	4620      	mov	r0, r4
   b8600:	f7fc fc20 	bl	b4e44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   b8604:	2800      	cmp	r0, #0
   b8606:	f000 8120 	beq.w	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   b860a:	4620      	mov	r0, r4
   b860c:	f7fc fd7c 	bl	b5108 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   b8610:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   b8612:	4620      	mov	r0, r4
   b8614:	f7fc fdfa 	bl	b520c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   b8618:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   b861a:	4620      	mov	r0, r4
   b861c:	f7fd f88a 	bl	b5734 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   b8620:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   b8622:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   b8624:	1e41      	subs	r1, r0, #1
   b8626:	428e      	cmp	r6, r1
   b8628:	f280 80b4 	bge.w	b8794 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   b862c:	783a      	ldrb	r2, [r7, #0]
   b862e:	3a04      	subs	r2, #4
   b8630:	4296      	cmp	r6, r2
   b8632:	f280 80af 	bge.w	b8794 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   b8636:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   b8638:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   b863c:	f000 80ad 	beq.w	b879a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   b8640:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   b8642:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   b8646:	bf18      	it	ne
   b8648:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   b864a:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   b864c:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   b864e:	e7ea      	b.n	b8626 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   b8650:	2b01      	cmp	r3, #1
   b8652:	d103      	bne.n	b865c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   b8654:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8658:	2a47      	cmp	r2, #71	; 0x47
   b865a:	e7b5      	b.n	b85c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   b865c:	b2da      	uxtb	r2, r3
   b865e:	2a05      	cmp	r2, #5
   b8660:	d93a      	bls.n	b86d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   b8662:	4620      	mov	r0, r4
   b8664:	f7fc fbee 	bl	b4e44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   b8668:	b308      	cbz	r0, b86ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   b866a:	4620      	mov	r0, r4
   b866c:	f7fc fd4c 	bl	b5108 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   b8670:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   b8672:	4620      	mov	r0, r4
   b8674:	f7fc fdca 	bl	b520c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   b8678:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   b867a:	4620      	mov	r0, r4
   b867c:	f7fd f85a 	bl	b5734 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   b8680:	782b      	ldrb	r3, [r5, #0]
   b8682:	4283      	cmp	r3, r0
   b8684:	d213      	bcs.n	b86ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   b8686:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b868a:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   b868c:	782b      	ldrb	r3, [r5, #0]
   b868e:	3301      	adds	r3, #1
   b8690:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   b8692:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   b8694:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   b8696:	d10a      	bne.n	b86ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8698:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b869c:	b913      	cbnz	r3, b86a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   b869e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b86a2:	b123      	cbz	r3, b86ae <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   b86a4:	498f      	ldr	r1, [pc, #572]	; (b88e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   b86a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b86aa:	f008 fef6 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   b86ae:	4620      	mov	r0, r4
   b86b0:	f7fc f9c8 	bl	b4a44 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   b86b4:	b128      	cbz	r0, b86c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   b86b6:	2201      	movs	r2, #1
   b86b8:	f10d 010f 	add.w	r1, sp, #15
   b86bc:	4620      	mov	r0, r4
   b86be:	f7ff fd4f 	bl	b8160 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   b86c2:	4620      	mov	r0, r4
   b86c4:	f7fc faee 	bl	b4ca4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   b86c8:	2800      	cmp	r0, #0
   b86ca:	d081      	beq.n	b85d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   b86cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b86d0:	4620      	mov	r0, r4
   b86d2:	f7fc fbaf 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   b86d6:	e77b      	b.n	b85d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   b86d8:	18e2      	adds	r2, r4, r3
   b86da:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b86de:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   b86e2:	2b05      	cmp	r3, #5
   b86e4:	f47f af74 	bne.w	b85d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   b86e8:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   b86ec:	b923      	cbnz	r3, b86f8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   b86ee:	4620      	mov	r0, r4
   b86f0:	f7fc fa70 	bl	b4bd4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   b86f4:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   b86f8:	4620      	mov	r0, r4
   b86fa:	f7fc fba3 	bl	b4e44 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   b86fe:	b1b8      	cbz	r0, b8730 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   b8700:	4620      	mov	r0, r4
   b8702:	f7fc fd01 	bl	b5108 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   b8706:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   b8708:	4620      	mov	r0, r4
   b870a:	f7fc fd7f 	bl	b520c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   b870e:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   b8710:	4620      	mov	r0, r4
   b8712:	f7fd f80f 	bl	b5734 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   b8716:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   b8718:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   b871a:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   b871c:	2100      	movs	r1, #0
   b871e:	4628      	mov	r0, r5
   b8720:	f00b ff22 	bl	c4568 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   b8724:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   b8728:	602b      	str	r3, [r5, #0]
   b872a:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   b872e:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   b8730:	4620      	mov	r0, r4
   b8732:	f7fc f987 	bl	b4a44 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   b8736:	b128      	cbz	r0, b8744 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   b8738:	2206      	movs	r2, #6
   b873a:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   b873e:	4620      	mov	r0, r4
   b8740:	f7ff fd0e 	bl	b8160 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   b8744:	4620      	mov	r0, r4
   b8746:	f7fc faad 	bl	b4ca4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   b874a:	b1e8      	cbz	r0, b8788 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   b874c:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   b8750:	4620      	mov	r0, r4
   b8752:	f7fc fb6f 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   b8756:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   b875a:	4620      	mov	r0, r4
   b875c:	f7fc fb6a 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   b8760:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   b8764:	4620      	mov	r0, r4
   b8766:	f7fc fb65 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   b876a:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   b876e:	4620      	mov	r0, r4
   b8770:	f7fc fb60 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   b8774:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   b8778:	4620      	mov	r0, r4
   b877a:	f7fc fb5b 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   b877e:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   b8782:	4620      	mov	r0, r4
   b8784:	f7fc fb56 	bl	b4e34 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   b8788:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   b878c:	2b05      	cmp	r3, #5
   b878e:	f67f af1f 	bls.w	b85d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   b8792:	e766      	b.n	b8662 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   b8794:	2d2a      	cmp	r5, #42	; 0x2a
   b8796:	f040 808b 	bne.w	b88b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   b879a:	091a      	lsrs	r2, r3, #4
   b879c:	f102 0530 	add.w	r5, r2, #48	; 0x30
   b87a0:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   b87a2:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   b87a4:	f003 030f 	and.w	r3, r3, #15
   b87a8:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   b87ac:	bf84      	itt	hi
   b87ae:	3237      	addhi	r2, #55	; 0x37
   b87b0:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   b87b2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   b87b6:	bf88      	it	hi
   b87b8:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   b87bc:	f818 3006 	ldrb.w	r3, [r8, r6]
   b87c0:	42ab      	cmp	r3, r5
   b87c2:	eb08 0b06 	add.w	fp, r8, r6
   b87c6:	d143      	bne.n	b8850 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   b87c8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b87cc:	4553      	cmp	r3, sl
   b87ce:	d13f      	bne.n	b8850 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   b87d0:	4620      	mov	r0, r4
   b87d2:	f7fc fd9d 	bl	b5310 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   b87d6:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   b87d8:	4620      	mov	r0, r4
   b87da:	f7fc fe1d 	bl	b5418 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   b87de:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   b87e0:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   b87e2:	2100      	movs	r1, #0
   b87e4:	f00b fec0 	bl	c4568 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   b87e8:	783a      	ldrb	r2, [r7, #0]
   b87ea:	4641      	mov	r1, r8
   b87ec:	4630      	mov	r0, r6
   b87ee:	f00b fe93 	bl	c4518 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   b87f2:	783b      	ldrb	r3, [r7, #0]
   b87f4:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   b87f6:	4620      	mov	r0, r4
   b87f8:	f7fd f80e 	bl	b5818 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   b87fc:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   b87fe:	f025 0503 	bic.w	r5, r5, #3
   b8802:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   b8806:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   b8808:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   b880c:	4620      	mov	r0, r4
   b880e:	f7fc fba5 	bl	b4f5c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   b8812:	b1d0      	cbz	r0, b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   b8814:	f01a 0104 	ands.w	r1, sl, #4
   b8818:	d117      	bne.n	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   b881a:	4620      	mov	r0, r4
   b881c:	9102      	str	r1, [sp, #8]
   b881e:	f7fc fe7f 	bl	b5520 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   b8822:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   b8824:	4620      	mov	r0, r4
   b8826:	f7fc feff 	bl	b5628 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   b882a:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   b882c:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   b882e:	464a      	mov	r2, r9
   b8830:	f00b fe9a 	bl	c4568 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   b8834:	783a      	ldrb	r2, [r7, #0]
   b8836:	4641      	mov	r1, r8
   b8838:	4650      	mov	r0, sl
   b883a:	f00b fe6d 	bl	c4518 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   b883e:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   b8842:	783b      	ldrb	r3, [r7, #0]
   b8844:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   b8848:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   b884a:	2300      	movs	r3, #0
   b884c:	7023      	strb	r3, [r4, #0]
   b884e:	e4f9      	b.n	b8244 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8850:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8854:	b91b      	cbnz	r3, b885e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   b8856:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b885a:	2b00      	cmp	r3, #0
   b885c:	d0f5      	beq.n	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   b885e:	4922      	ldr	r1, [pc, #136]	; (b88e8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   b8860:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8864:	f008 fdff 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   b8868:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b886c:	6803      	ldr	r3, [r0, #0]
   b886e:	4629      	mov	r1, r5
   b8870:	689b      	ldr	r3, [r3, #8]
   b8872:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   b8874:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8878:	6803      	ldr	r3, [r0, #0]
   b887a:	4651      	mov	r1, sl
   b887c:	689b      	ldr	r3, [r3, #8]
   b887e:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   b8880:	491a      	ldr	r1, [pc, #104]	; (b88ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   b8882:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8886:	f008 fdee 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   b888a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b888e:	f89b 1000 	ldrb.w	r1, [fp]
   b8892:	6803      	ldr	r3, [r0, #0]
   b8894:	689b      	ldr	r3, [r3, #8]
   b8896:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   b8898:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b889c:	f89b 1001 	ldrb.w	r1, [fp, #1]
   b88a0:	6803      	ldr	r3, [r0, #0]
   b88a2:	689b      	ldr	r3, [r3, #8]
   b88a4:	4798      	blx	r3
              _debugSerial->println();
   b88a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b88aa:	f008 fde0 	bl	c146e <_ZN5Print7printlnEv>
   b88ae:	e7cc      	b.n	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b88b0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b88b4:	b91b      	cbnz	r3, b88be <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   b88b6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b88ba:	2b00      	cmp	r3, #0
   b88bc:	d0c5      	beq.n	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   b88be:	490c      	ldr	r1, [pc, #48]	; (b88f0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   b88c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b88c4:	f008 fde9 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b88c8:	e7bf      	b.n	b884a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   b88ca:	2e03      	cmp	r6, #3
   b88cc:	f47f acba 	bne.w	b8244 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   b88d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b88d4:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   b88d8:	4620      	mov	r0, r4
   b88da:	f7fd f821 	bl	b5920 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   b88de:	7020      	strb	r0, [r4, #0]
}
   b88e0:	e4b0      	b.n	b8244 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   b88e2:	bf00      	nop
   b88e4:	000c6e50 	.word	0x000c6e50
   b88e8:	000c6e6e 	.word	0x000c6e6e
   b88ec:	000c6e99 	.word	0x000c6e99
   b88f0:	000c6e9f 	.word	0x000c6e9f

000b88f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   b88f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b88f8:	4604      	mov	r4, r0
   b88fa:	4699      	mov	r9, r3
   b88fc:	460f      	mov	r7, r1
   b88fe:	4690      	mov	r8, r2
   b8900:	f005 f9d4 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   b8904:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   b8908:	1ac0      	subs	r0, r0, r3
   b890a:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   b890e:	4298      	cmp	r0, r3
   b8910:	f0c0 80a8 	bcc.w	b8a64 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   b8914:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b8918:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b891c:	f007 faaa 	bl	bfe74 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   b8920:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8924:	21fd      	movs	r1, #253	; 0xfd
   b8926:	f7fb fe1b 	bl	b4560 <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   b892a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b892e:	2100      	movs	r1, #0
   b8930:	f007 faa7 	bl	bfe82 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   b8934:	4605      	mov	r5, r0
   b8936:	b1a8      	cbz	r0, b8964 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8938:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b893c:	b933      	cbnz	r3, b894c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   b893e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8942:	b91b      	cbnz	r3, b894c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   b8944:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   b8946:	b002      	add	sp, #8
   b8948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   b894c:	4946      	ldr	r1, [pc, #280]	; (b8a68 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   b894e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8952:	f008 fd88 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   b8956:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b895a:	220a      	movs	r2, #10
   b895c:	4629      	mov	r1, r5
   b895e:	f7fb fdf6 	bl	b454e <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   b8962:	e7ef      	b.n	b8944 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   b8964:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b8968:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b896c:	2202      	movs	r2, #2
   b896e:	f007 fa7e 	bl	bfe6e <_ZN7TwoWire11requestFromEhj>
   b8972:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   b8974:	2d02      	cmp	r5, #2
   b8976:	d008      	beq.n	b898a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8978:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b897c:	b91b      	cbnz	r3, b8986 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   b897e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8982:	2b00      	cmp	r3, #0
   b8984:	d0de      	beq.n	b8944 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   b8986:	4939      	ldr	r1, [pc, #228]	; (b8a6c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   b8988:	e7e1      	b.n	b894e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   b898a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b898e:	6803      	ldr	r3, [r0, #0]
   b8990:	695b      	ldr	r3, [r3, #20]
   b8992:	4798      	blx	r3
   b8994:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   b8996:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b899a:	6803      	ldr	r3, [r0, #0]
   b899c:	695b      	ldr	r3, [r3, #20]
   b899e:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   b89a0:	b2c6      	uxtb	r6, r0
   b89a2:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   b89a6:	b22a      	sxth	r2, r5
   b89a8:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   b89aa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b89ae:	b955      	cbnz	r5, b89c6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   b89b0:	b123      	cbz	r3, b89bc <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   b89b2:	492f      	ldr	r1, [pc, #188]	; (b8a70 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   b89b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b89b8:	f008 fd6f 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b89bc:	f005 f976 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   b89c0:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   b89c4:	e7be      	b.n	b8944 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   b89c6:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   b89c8:	bfb8      	it	lt
   b89ca:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   b89ce:	2d64      	cmp	r5, #100	; 0x64
   b89d0:	d936      	bls.n	b8a40 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   b89d2:	b17b      	cbz	r3, b89f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   b89d4:	4927      	ldr	r1, [pc, #156]	; (b8a74 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   b89d6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b89da:	f008 fd44 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b89de:	4629      	mov	r1, r5
   b89e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b89e4:	220a      	movs	r2, #10
   b89e6:	f008 fd5a 	bl	c149e <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   b89ea:	4923      	ldr	r1, [pc, #140]	; (b8a78 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   b89ec:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b89f0:	f008 fd53 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   b89f4:	2d00      	cmp	r5, #0
   b89f6:	d035      	beq.n	b8a64 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   b89f8:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   b89fa:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b89fe:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8a02:	42ae      	cmp	r6, r5
   b8a04:	bf28      	it	cs
   b8a06:	462e      	movcs	r6, r5
   b8a08:	4632      	mov	r2, r6
   b8a0a:	f007 fa30 	bl	bfe6e <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   b8a0e:	b2c0      	uxtb	r0, r0
   b8a10:	4286      	cmp	r6, r0
   b8a12:	d197      	bne.n	b8944 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   b8a14:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   b8a18:	fa1f f38a 	uxth.w	r3, sl
   b8a1c:	429e      	cmp	r6, r3
   b8a1e:	d91e      	bls.n	b8a5e <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   b8a20:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b8a24:	6803      	ldr	r3, [r0, #0]
   b8a26:	695b      	ldr	r3, [r3, #20]
   b8a28:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   b8a2a:	f8cd 9000 	str.w	r9, [sp]
   b8a2e:	b2c1      	uxtb	r1, r0
   b8a30:	4643      	mov	r3, r8
   b8a32:	463a      	mov	r2, r7
   b8a34:	4620      	mov	r0, r4
   b8a36:	f7ff fbc1 	bl	b81bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   b8a3a:	f10a 0a01 	add.w	sl, sl, #1
   b8a3e:	e7eb      	b.n	b8a18 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   b8a40:	2b00      	cmp	r3, #0
   b8a42:	d0d7      	beq.n	b89f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   b8a44:	490d      	ldr	r1, [pc, #52]	; (b8a7c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   b8a46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8a4a:	f008 fd0c 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
   b8a4e:	4629      	mov	r1, r5
   b8a50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8a54:	220a      	movs	r2, #10
   b8a56:	f008 fd22 	bl	c149e <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   b8a5a:	4909      	ldr	r1, [pc, #36]	; (b8a80 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   b8a5c:	e7c6      	b.n	b89ec <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   b8a5e:	1bad      	subs	r5, r5, r6
   b8a60:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   b8a62:	e7c7      	b.n	b89f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   b8a64:	2001      	movs	r0, #1
   b8a66:	e76e      	b.n	b8946 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   b8a68:	000c6ec0 	.word	0x000c6ec0
   b8a6c:	000c6ef4 	.word	0x000c6ef4
   b8a70:	000c6f29 	.word	0x000c6f29
   b8a74:	000c6f51 	.word	0x000c6f51
   b8a78:	000c6f71 	.word	0x000c6f71
   b8a7c:	000c6f81 	.word	0x000c6f81
   b8a80:	000c6f99 	.word	0x000c6f99

000b8a84 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   b8a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8a86:	4604      	mov	r4, r0
   b8a88:	460d      	mov	r5, r1
   b8a8a:	4616      	mov	r6, r2
   b8a8c:	461f      	mov	r7, r3
  while (_serialPort->available())
   b8a8e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   b8a92:	6803      	ldr	r3, [r0, #0]
   b8a94:	691b      	ldr	r3, [r3, #16]
   b8a96:	4798      	blx	r3
   b8a98:	b160      	cbz	r0, b8ab4 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   b8a9a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   b8a9e:	6803      	ldr	r3, [r0, #0]
   b8aa0:	695b      	ldr	r3, [r3, #20]
   b8aa2:	4798      	blx	r3
   b8aa4:	9700      	str	r7, [sp, #0]
   b8aa6:	b2c1      	uxtb	r1, r0
   b8aa8:	4633      	mov	r3, r6
   b8aaa:	462a      	mov	r2, r5
   b8aac:	4620      	mov	r0, r4
   b8aae:	f7ff fb85 	bl	b81bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   b8ab2:	e7ec      	b.n	b8a8e <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   b8ab4:	2001      	movs	r0, #1
   b8ab6:	b003      	add	sp, #12
   b8ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8abc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   b8abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ac0:	4604      	mov	r4, r0
   b8ac2:	b087      	sub	sp, #28
   b8ac4:	460d      	mov	r5, r1
   b8ac6:	4616      	mov	r6, r2
   b8ac8:	461f      	mov	r7, r3
   b8aca:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   b8ace:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   b8ad2:	fa5f f388 	uxtb.w	r3, r8
   b8ad6:	429a      	cmp	r2, r3
   b8ad8:	d90b      	bls.n	b8af2 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   b8ada:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b8ade:	4620      	mov	r0, r4
   b8ae0:	5cd1      	ldrb	r1, [r2, r3]
   b8ae2:	9700      	str	r7, [sp, #0]
   b8ae4:	4633      	mov	r3, r6
   b8ae6:	462a      	mov	r2, r5
   b8ae8:	f7ff fb68 	bl	b81bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   b8aec:	f108 0801 	add.w	r8, r8, #1
   b8af0:	e7ed      	b.n	b8ace <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   b8af2:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b8af6:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   b8afa:	4a25      	ldr	r2, [pc, #148]	; (b8b90 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   b8afc:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   b8b00:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b8b04:	a902      	add	r1, sp, #8
   b8b06:	f04f 0901 	mov.w	r9, #1
   b8b0a:	9202      	str	r2, [sp, #8]
   b8b0c:	9304      	str	r3, [sp, #16]
   b8b0e:	f88d 800c 	strb.w	r8, [sp, #12]
   b8b12:	f8ad 9014 	strh.w	r9, [sp, #20]
   b8b16:	f008 fdcd 	bl	c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b8b1a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b8b1e:	4641      	mov	r1, r8
   b8b20:	f009 fa39 	bl	c1f96 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   b8b24:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b8b28:	21ff      	movs	r1, #255	; 0xff
   b8b2a:	f008 fe31 	bl	c1790 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   b8b2e:	28ff      	cmp	r0, #255	; 0xff
   b8b30:	d116      	bne.n	b8b60 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   b8b32:	7823      	ldrb	r3, [r4, #0]
   b8b34:	b983      	cbnz	r3, b8b58 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   b8b36:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b8b3a:	4649      	mov	r1, r9
   b8b3c:	f009 fa2b 	bl	c1f96 <digitalWrite>
    _spiPort->endTransaction();
   b8b40:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b8b44:	f008 fd9d 	bl	c1682 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   b8b48:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   b8b4c:	f005 fc08 	bl	be360 <delay>
} // end checkUbloxSpi()
   b8b50:	2001      	movs	r0, #1
   b8b52:	b007      	add	sp, #28
   b8b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b8b58:	28ff      	cmp	r0, #255	; 0xff
   b8b5a:	d101      	bne.n	b8b60 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   b8b5c:	7823      	ldrb	r3, [r4, #0]
   b8b5e:	b163      	cbz	r3, b8b7a <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   b8b60:	4601      	mov	r1, r0
   b8b62:	9700      	str	r7, [sp, #0]
   b8b64:	4620      	mov	r0, r4
   b8b66:	4633      	mov	r3, r6
   b8b68:	462a      	mov	r2, r5
   b8b6a:	f7ff fb27 	bl	b81bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   b8b6e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b8b72:	21ff      	movs	r1, #255	; 0xff
   b8b74:	f008 fe0c 	bl	c1790 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b8b78:	e7ee      	b.n	b8b58 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   b8b7a:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b8b7e:	2101      	movs	r1, #1
   b8b80:	f009 fa09 	bl	c1f96 <digitalWrite>
  _spiPort->endTransaction();
   b8b84:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b8b88:	f008 fd7b 	bl	c1682 <_ZN8SPIClass14endTransactionEv>
  return (true);
   b8b8c:	e7e0      	b.n	b8b50 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   b8b8e:	bf00      	nop
   b8b90:	000c73b4 	.word	0x000c73b4

000b8b94 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   b8b94:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   b8b96:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   b8b9a:	b91c      	cbnz	r4, b8ba4 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   b8b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   b8ba0:	f7ff bea8 	b.w	b88f4 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   b8ba4:	2c01      	cmp	r4, #1
   b8ba6:	d103      	bne.n	b8bb0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   b8ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   b8bac:	f7ff bf6a 	b.w	b8a84 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   b8bb0:	2c02      	cmp	r4, #2
   b8bb2:	d103      	bne.n	b8bbc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   b8bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   b8bb8:	f7ff bf80 	b.w	b8abc <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   b8bbc:	2000      	movs	r0, #0
   b8bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   b8bc2:	4770      	bx	lr

000b8bc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   b8bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8bc8:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   b8bca:	2102      	movs	r1, #2
   b8bcc:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8bce:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8bd2:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8bd6:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   b8bda:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8bdc:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8be0:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8be4:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   b8be8:	4604      	mov	r4, r0
   b8bea:	4617      	mov	r7, r2
   b8bec:	4698      	mov	r8, r3
   b8bee:	f005 f85d 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   b8bf2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   b8bf6:	4606      	mov	r6, r0
   b8bf8:	4481      	add	r9, r0
   b8bfa:	f005 f857 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8bfe:	4581      	cmp	r9, r0
   b8c00:	f240 80a8 	bls.w	b8d54 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   b8c04:	4643      	mov	r3, r8
   b8c06:	463a      	mov	r2, r7
   b8c08:	4629      	mov	r1, r5
   b8c0a:	4620      	mov	r0, r4
   b8c0c:	f7ff ffc2 	bl	b8b94 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   b8c10:	2800      	cmp	r0, #0
   b8c12:	f000 809b 	beq.w	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8c16:	7beb      	ldrb	r3, [r5, #15]
   b8c18:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   b8c1c:	2b01      	cmp	r3, #1
   b8c1e:	d125      	bne.n	b8c6c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   b8c20:	2901      	cmp	r1, #1
   b8c22:	f040 80ec 	bne.w	b8dfe <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   b8c26:	7bab      	ldrb	r3, [r5, #14]
   b8c28:	2b01      	cmp	r3, #1
   b8c2a:	782b      	ldrb	r3, [r5, #0]
   b8c2c:	d13b      	bne.n	b8ca6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   b8c2e:	42bb      	cmp	r3, r7
   b8c30:	d13e      	bne.n	b8cb0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   b8c32:	786a      	ldrb	r2, [r5, #1]
   b8c34:	4542      	cmp	r2, r8
   b8c36:	d136      	bne.n	b8ca6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   b8c38:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8c3c:	b913      	cbnz	r3, b8c44 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   b8c3e:	200b      	movs	r0, #11
}
   b8c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   b8c44:	4978      	ldr	r1, [pc, #480]	; (b8e28 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   b8c46:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c4a:	f008 fc0c 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8c4e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8c52:	f005 f82b 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8c56:	220a      	movs	r2, #10
   b8c58:	1b81      	subs	r1, r0, r6
   b8c5a:	4628      	mov	r0, r5
   b8c5c:	f7fb fc63 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8c60:	4972      	ldr	r1, [pc, #456]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8c62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c66:	f008 fc18 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8c6a:	e7e8      	b.n	b8c3e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   b8c6c:	2b02      	cmp	r3, #2
   b8c6e:	d137      	bne.n	b8ce0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   b8c70:	2901      	cmp	r1, #1
   b8c72:	f040 80aa 	bne.w	b8dca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   b8c76:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8c7a:	b193      	cbz	r3, b8ca2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   b8c7c:	496c      	ldr	r1, [pc, #432]	; (b8e30 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   b8c7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c82:	f008 fbf0 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8c86:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8c8a:	f005 f80f 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8c8e:	220a      	movs	r2, #10
   b8c90:	1b81      	subs	r1, r0, r6
   b8c92:	4628      	mov	r0, r5
   b8c94:	f7fb fc47 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8c98:	4964      	ldr	r1, [pc, #400]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8c9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8c9e:	f008 fbfc 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   b8ca2:	200a      	movs	r0, #10
   b8ca4:	e7cc      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   b8ca6:	42bb      	cmp	r3, r7
   b8ca8:	d102      	bne.n	b8cb0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   b8caa:	786b      	ldrb	r3, [r5, #1]
   b8cac:	4543      	cmp	r3, r8
   b8cae:	d019      	beq.n	b8ce4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   b8cb0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8cb4:	b193      	cbz	r3, b8cdc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   b8cb6:	495f      	ldr	r1, [pc, #380]	; (b8e34 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   b8cb8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8cbc:	f008 fbd3 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8cc0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8cc4:	f004 fff2 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8cc8:	220a      	movs	r2, #10
   b8cca:	1b81      	subs	r1, r0, r6
   b8ccc:	4628      	mov	r0, r5
   b8cce:	f7fb fc2a 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8cd2:	4956      	ldr	r1, [pc, #344]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8cd4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8cd8:	f008 fbdf 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   b8cdc:	200d      	movs	r0, #13
   b8cde:	e7af      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   b8ce0:	2901      	cmp	r1, #1
   b8ce2:	d172      	bne.n	b8dca <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   b8ce4:	89eb      	ldrh	r3, [r5, #14]
   b8ce6:	bb8b      	cbnz	r3, b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   b8ce8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8cec:	b193      	cbz	r3, b8d14 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   b8cee:	4952      	ldr	r1, [pc, #328]	; (b8e38 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   b8cf0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8cf4:	f008 fbb7 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8cf8:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8cfc:	f004 ffd6 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8d00:	220a      	movs	r2, #10
   b8d02:	1b81      	subs	r1, r0, r6
   b8d04:	4628      	mov	r0, r5
   b8d06:	f7fb fc0e 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8d0a:	4948      	ldr	r1, [pc, #288]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8d0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d10:	f008 fbc3 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   b8d14:	2002      	movs	r0, #2
   b8d16:	e793      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   b8d18:	430b      	orrs	r3, r1
   b8d1a:	d117      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   b8d1c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8d20:	b193      	cbz	r3, b8d48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   b8d22:	4946      	ldr	r1, [pc, #280]	; (b8e3c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   b8d24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d28:	f008 fb9d 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8d2c:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8d30:	f004 ffbc 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8d34:	220a      	movs	r2, #10
   b8d36:	1b81      	subs	r1, r0, r6
   b8d38:	4628      	mov	r0, r5
   b8d3a:	f7fb fbf4 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8d3e:	493b      	ldr	r1, [pc, #236]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8d40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d44:	f008 fba9 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   b8d48:	2001      	movs	r0, #1
   b8d4a:	e779      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   b8d4c:	2001      	movs	r0, #1
   b8d4e:	f005 fb07 	bl	be360 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   b8d52:	e752      	b.n	b8bfa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8d54:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   b8d56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8d5a:	2a01      	cmp	r2, #1
   b8d5c:	d11f      	bne.n	b8d9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   b8d5e:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   b8d62:	2a02      	cmp	r2, #2
   b8d64:	d11b      	bne.n	b8d9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   b8d66:	7baa      	ldrb	r2, [r5, #14]
   b8d68:	2a01      	cmp	r2, #1
   b8d6a:	d118      	bne.n	b8d9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   b8d6c:	782a      	ldrb	r2, [r5, #0]
   b8d6e:	42ba      	cmp	r2, r7
   b8d70:	d115      	bne.n	b8d9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   b8d72:	786a      	ldrb	r2, [r5, #1]
   b8d74:	4542      	cmp	r2, r8
   b8d76:	d112      	bne.n	b8d9e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   b8d78:	2b00      	cmp	r3, #0
   b8d7a:	f43f af60 	beq.w	b8c3e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   b8d7e:	4930      	ldr	r1, [pc, #192]	; (b8e40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   b8d80:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8d84:	f008 fb6f 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   b8d88:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8d8c:	f004 ff8e 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8d90:	220a      	movs	r2, #10
   b8d92:	1b81      	subs	r1, r0, r6
   b8d94:	4628      	mov	r0, r5
   b8d96:	f7fb fbc6 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   b8d9a:	492a      	ldr	r1, [pc, #168]	; (b8e44 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   b8d9c:	e761      	b.n	b8c62 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   b8d9e:	b193      	cbz	r3, b8dc6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   b8da0:	4929      	ldr	r1, [pc, #164]	; (b8e48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   b8da2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8da6:	f008 fb5e 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   b8daa:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8dae:	f004 ff7d 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8db2:	220a      	movs	r2, #10
   b8db4:	1b81      	subs	r1, r0, r6
   b8db6:	4628      	mov	r0, r5
   b8db8:	f7fb fbb5 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   b8dbc:	4923      	ldr	r1, [pc, #140]	; (b8e4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   b8dbe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8dc2:	f008 fb6a 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   b8dc6:	2003      	movs	r0, #3
   b8dc8:	e73a      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   b8dca:	2903      	cmp	r1, #3
   b8dcc:	d1a4      	bne.n	b8d18 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   b8dce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8dd2:	b193      	cbz	r3, b8dfa <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   b8dd4:	491e      	ldr	r1, [pc, #120]	; (b8e50 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   b8dd6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8dda:	f008 fb44 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8dde:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8de2:	f004 ff63 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8de6:	220a      	movs	r2, #10
   b8de8:	1b81      	subs	r1, r0, r6
   b8dea:	4628      	mov	r0, r5
   b8dec:	f7fb fb9b 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8df0:	490e      	ldr	r1, [pc, #56]	; (b8e2c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   b8df2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8df6:	f008 fb50 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   b8dfa:	2004      	movs	r0, #4
   b8dfc:	e720      	b.n	b8c40 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   b8dfe:	2903      	cmp	r1, #3
   b8e00:	d0e5      	beq.n	b8dce <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8e02:	2900      	cmp	r1, #0
   b8e04:	d1a2      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   b8e06:	7bab      	ldrb	r3, [r5, #14]
   b8e08:	2b01      	cmp	r3, #1
   b8e0a:	d19f      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   b8e0c:	782b      	ldrb	r3, [r5, #0]
   b8e0e:	42bb      	cmp	r3, r7
   b8e10:	d19c      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   b8e12:	786b      	ldrb	r3, [r5, #1]
   b8e14:	4543      	cmp	r3, r8
   b8e16:	d199      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   b8e18:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8e1c:	2b00      	cmp	r3, #0
   b8e1e:	f43f af0e 	beq.w	b8c3e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   b8e22:	490c      	ldr	r1, [pc, #48]	; (b8e54 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   b8e24:	e70f      	b.n	b8c46 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   b8e26:	bf00      	nop
   b8e28:	000c6fa0 	.word	0x000c6fa0
   b8e2c:	000c6fdd 	.word	0x000c6fdd
   b8e30:	000c6fe3 	.word	0x000c6fe3
   b8e34:	000c7014 	.word	0x000c7014
   b8e38:	000c7046 	.word	0x000c7046
   b8e3c:	000c70e6 	.word	0x000c70e6
   b8e40:	000c7127 	.word	0x000c7127
   b8e44:	000c715a 	.word	0x000c715a
   b8e48:	000c7162 	.word	0x000c7162
   b8e4c:	000c7185 	.word	0x000c7185
   b8e50:	000c706c 	.word	0x000c706c
   b8e54:	000c70a7 	.word	0x000c70a7

000b8e58 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   b8e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e5c:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   b8e5e:	2102      	movs	r1, #2
   b8e60:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e62:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e66:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e6a:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   b8e6e:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e70:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e74:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   b8e78:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   b8e7c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   b8e80:	4604      	mov	r4, r0
   b8e82:	4617      	mov	r7, r2
   b8e84:	4698      	mov	r8, r3
   b8e86:	f004 ff11 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8e8a:	f240 1a01 	movw	sl, #257	; 0x101
   b8e8e:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   b8e90:	f240 2b01 	movw	fp, #513	; 0x201
   b8e94:	f004 ff0a 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   b8e98:	1b80      	subs	r0, r0, r6
   b8e9a:	4548      	cmp	r0, r9
   b8e9c:	d269      	bcs.n	b8f72 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   b8e9e:	4643      	mov	r3, r8
   b8ea0:	463a      	mov	r2, r7
   b8ea2:	4629      	mov	r1, r5
   b8ea4:	4620      	mov	r0, r4
   b8ea6:	f7ff fe75 	bl	b8b94 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   b8eaa:	2800      	cmp	r0, #0
   b8eac:	d05d      	beq.n	b8f6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   b8eae:	89ea      	ldrh	r2, [r5, #14]
   b8eb0:	4552      	cmp	r2, sl
   b8eb2:	d11e      	bne.n	b8ef2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   b8eb4:	782b      	ldrb	r3, [r5, #0]
   b8eb6:	42bb      	cmp	r3, r7
   b8eb8:	d11b      	bne.n	b8ef2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   b8eba:	786b      	ldrb	r3, [r5, #1]
   b8ebc:	4543      	cmp	r3, r8
   b8ebe:	d118      	bne.n	b8ef2 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   b8ec0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8ec4:	b193      	cbz	r3, b8eec <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   b8ec6:	4937      	ldr	r1, [pc, #220]	; (b8fa4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   b8ec8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8ecc:	f008 facb 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8ed0:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8ed4:	f004 feea 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8ed8:	220a      	movs	r2, #10
   b8eda:	1b81      	subs	r1, r0, r6
   b8edc:	4628      	mov	r0, r5
   b8ede:	f7fb fb22 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8ee2:	4931      	ldr	r1, [pc, #196]	; (b8fa8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   b8ee4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8ee8:	f008 fad7 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   b8eec:	200b      	movs	r0, #11
}
   b8eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   b8ef2:	7beb      	ldrb	r3, [r5, #15]
   b8ef4:	2b01      	cmp	r3, #1
   b8ef6:	d11d      	bne.n	b8f34 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   b8ef8:	782b      	ldrb	r3, [r5, #0]
   b8efa:	42bb      	cmp	r3, r7
   b8efc:	d102      	bne.n	b8f04 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   b8efe:	786b      	ldrb	r3, [r5, #1]
   b8f00:	4543      	cmp	r3, r8
   b8f02:	d032      	beq.n	b8f6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   b8f04:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8f08:	b193      	cbz	r3, b8f30 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   b8f0a:	4928      	ldr	r1, [pc, #160]	; (b8fac <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   b8f0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f10:	f008 faa9 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8f14:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8f18:	f004 fec8 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8f1c:	220a      	movs	r2, #10
   b8f1e:	1b81      	subs	r1, r0, r6
   b8f20:	4628      	mov	r0, r5
   b8f22:	f7fb fb00 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8f26:	4920      	ldr	r1, [pc, #128]	; (b8fa8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   b8f28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f2c:	f008 fab5 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   b8f30:	200d      	movs	r0, #13
   b8f32:	e7dc      	b.n	b8eee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   b8f34:	455a      	cmp	r2, fp
   b8f36:	d018      	beq.n	b8f6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   b8f38:	b9bb      	cbnz	r3, b8f6a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   b8f3a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8f3e:	b193      	cbz	r3, b8f66 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   b8f40:	491b      	ldr	r1, [pc, #108]	; (b8fb0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   b8f42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f46:	f008 fa8e 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   b8f4a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8f4e:	f004 fead 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8f52:	220a      	movs	r2, #10
   b8f54:	1b81      	subs	r1, r0, r6
   b8f56:	4628      	mov	r0, r5
   b8f58:	f7fb fae5 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   b8f5c:	4912      	ldr	r1, [pc, #72]	; (b8fa8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   b8f5e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f62:	f008 fa9a 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   b8f66:	2002      	movs	r0, #2
   b8f68:	e7c1      	b.n	b8eee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   b8f6a:	2001      	movs	r0, #1
   b8f6c:	f005 f9f8 	bl	be360 <delay>
  while (millis() - startTime < maxTime)
   b8f70:	e790      	b.n	b8e94 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   b8f72:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8f76:	b193      	cbz	r3, b8f9e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   b8f78:	490e      	ldr	r1, [pc, #56]	; (b8fb4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   b8f7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f7e:	f008 fa72 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   b8f82:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   b8f86:	f004 fe91 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b8f8a:	220a      	movs	r2, #10
   b8f8c:	1b81      	subs	r1, r0, r6
   b8f8e:	4628      	mov	r0, r5
   b8f90:	f7fb fac9 	bl	b4526 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   b8f94:	4908      	ldr	r1, [pc, #32]	; (b8fb8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   b8f96:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8f9a:	f008 fa7e 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   b8f9e:	2003      	movs	r0, #3
   b8fa0:	e7a5      	b.n	b8eee <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   b8fa2:	bf00      	nop
   b8fa4:	000c718c 	.word	0x000c718c
   b8fa8:	000c6fdd 	.word	0x000c6fdd
   b8fac:	000c71c6 	.word	0x000c71c6
   b8fb0:	000c71fa 	.word	0x000c71fa
   b8fb4:	000c7233 	.word	0x000c7233
   b8fb8:	000c7258 	.word	0x000c7258

000b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   b8fbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8fc0:	4604      	mov	r4, r0
   b8fc2:	4698      	mov	r8, r3
   b8fc4:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   b8fc6:	f7fc fcc9 	bl	b595c <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   b8fca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   b8fce:	460d      	mov	r5, r1
  if (_printDebug == true)
   b8fd0:	b14b      	cbz	r3, b8fe6 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   b8fd2:	492a      	ldr	r1, [pc, #168]	; (b907c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   b8fd4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8fd8:	f008 fa45 	bl	c1466 <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   b8fdc:	2201      	movs	r2, #1
   b8fde:	4629      	mov	r1, r5
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	f7fc fee9 	bl	b5db8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   b8fe6:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   b8fea:	b993      	cbnz	r3, b9012 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   b8fec:	463a      	mov	r2, r7
   b8fee:	4629      	mov	r1, r5
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	f7fc fce1 	bl	b59b8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   b8ff6:	4606      	mov	r6, r0
   b8ff8:	b188      	cbz	r0, b901e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   b8ffa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8ffe:	b123      	cbz	r3, b900a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   b9000:	491f      	ldr	r1, [pc, #124]	; (b9080 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   b9002:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9006:	f008 fa48 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   b900a:	4630      	mov	r0, r6
   b900c:	b002      	add	sp, #8
   b900e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   b9012:	2b01      	cmp	r3, #1
   b9014:	d11b      	bne.n	b904e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   b9016:	4629      	mov	r1, r5
   b9018:	4620      	mov	r0, r4
   b901a:	f7fc fd8f 	bl	b5b3c <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   b901e:	b35f      	cbz	r7, b9078 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   b9020:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   b9022:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   b9026:	2a06      	cmp	r2, #6
   b9028:	d002      	beq.n	b9030 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   b902a:	f1b8 0f00 	cmp.w	r8, #0
   b902e:	d015      	beq.n	b905c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   b9030:	b123      	cbz	r3, b903c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   b9032:	4914      	ldr	r1, [pc, #80]	; (b9084 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   b9034:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9038:	f008 fa2f 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   b903c:	786b      	ldrb	r3, [r5, #1]
   b903e:	782a      	ldrb	r2, [r5, #0]
   b9040:	9700      	str	r7, [sp, #0]
   b9042:	4629      	mov	r1, r5
   b9044:	4620      	mov	r0, r4
   b9046:	f7ff fdbd 	bl	b8bc4 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   b904a:	4606      	mov	r6, r0
   b904c:	e7dd      	b.n	b900a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   b904e:	2b02      	cmp	r3, #2
   b9050:	d1e5      	bne.n	b901e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   b9052:	4629      	mov	r1, r5
   b9054:	4620      	mov	r0, r4
   b9056:	f7fc fdcb 	bl	b5bf0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   b905a:	e7e0      	b.n	b901e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   b905c:	b123      	cbz	r3, b9068 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   b905e:	490a      	ldr	r1, [pc, #40]	; (b9088 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   b9060:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9064:	f008 fa19 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   b9068:	786b      	ldrb	r3, [r5, #1]
   b906a:	782a      	ldrb	r2, [r5, #0]
   b906c:	9700      	str	r7, [sp, #0]
   b906e:	4629      	mov	r1, r5
   b9070:	4620      	mov	r0, r4
   b9072:	f7ff fef1 	bl	b8e58 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   b9076:	e7e8      	b.n	b904a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   b9078:	463e      	mov	r6, r7
   b907a:	e7c6      	b.n	b900a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   b907c:	000c7273 	.word	0x000c7273
   b9080:	000c727e 	.word	0x000c727e
   b9084:	000c7296 	.word	0x000c7296
   b9088:	000c72bc 	.word	0x000c72bc

000b908c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   b908c:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   b908e:	4b09      	ldr	r3, [pc, #36]	; (b90b4 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   b9090:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   b9094:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   b9098:	2300      	movs	r3, #0
   b909a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   b909e:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   b90a0:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   b90a4:	f7ff ff8a 	bl	b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   b90a8:	f1a0 030b 	sub.w	r3, r0, #11
   b90ac:	4258      	negs	r0, r3
   b90ae:	4158      	adcs	r0, r3
   b90b0:	bd38      	pop	{r3, r4, r5, pc}
   b90b2:	bf00      	nop
   b90b4:	00010006 	.word	0x00010006

000b90b8 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   b90b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90ba:	4615      	mov	r5, r2
   b90bc:	461a      	mov	r2, r3
   b90be:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   b90c0:	9301      	str	r3, [sp, #4]
   b90c2:	f7ff ffe3 	bl	b908c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   b90c6:	b190      	cbz	r0, b90ee <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   b90c8:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   b90cc:	4b09      	ldr	r3, [pc, #36]	; (b90f4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   b90ce:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   b90d2:	2300      	movs	r3, #0
   b90d4:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   b90d8:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   b90da:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   b90dc:	4620      	mov	r0, r4
   b90de:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   b90e2:	f7ff ff6b 	bl	b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   b90e6:	f1a0 030a 	sub.w	r3, r0, #10
   b90ea:	4258      	negs	r0, r3
   b90ec:	4158      	adcs	r0, r3
}
   b90ee:	b003      	add	sp, #12
   b90f0:	bd30      	pop	{r4, r5, pc}
   b90f2:	bf00      	nop
   b90f4:	00140006 	.word	0x00140006

000b90f8 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   b90f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b90fa:	4615      	mov	r5, r2
   b90fc:	461a      	mov	r2, r3
   b90fe:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   b9100:	9301      	str	r3, [sp, #4]
   b9102:	f7ff ffc3 	bl	b908c <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   b9106:	b190      	cbz	r0, b912e <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   b9108:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   b910c:	4b09      	ldr	r3, [pc, #36]	; (b9134 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   b910e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   b9112:	2300      	movs	r3, #0
   b9114:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   b9118:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   b911a:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   b911c:	4620      	mov	r0, r4
   b911e:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   b9122:	f7ff ff4b 	bl	b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   b9126:	f1a0 030a 	sub.w	r3, r0, #10
   b912a:	4258      	negs	r0, r3
   b912c:	4158      	adcs	r0, r3
}
   b912e:	b003      	add	sp, #12
   b9130:	bd30      	pop	{r4, r5, pc}
   b9132:	bf00      	nop
   b9134:	00140006 	.word	0x00140006

000b9138 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   b9138:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   b913a:	460a      	mov	r2, r1
   b913c:	2100      	movs	r1, #0
   b913e:	f7ff bfbb 	b.w	b90b8 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000b9144 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   b9144:	b510      	push	{r4, lr}
   b9146:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   b9148:	2074      	movs	r0, #116	; 0x74
   b914a:	f7fa ffa4 	bl	b4096 <_Znwj>
   b914e:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   b9150:	b960      	cbnz	r0, b916c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9152:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9156:	b913      	cbnz	r3, b915e <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   b9158:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b915c:	b128      	cbz	r0, b916a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   b915e:	4908      	ldr	r1, [pc, #32]	; (b9180 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   b9160:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9164:	f008 f999 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9168:	2000      	movs	r0, #0
}
   b916a:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   b916c:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   b916e:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   b9172:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   b9176:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   b9178:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   b917a:	2001      	movs	r0, #1
   b917c:	e7f5      	b.n	b916a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   b917e:	bf00      	nop
   b9180:	000c72e5 	.word	0x000c72e5

000b9184 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   b9184:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   b9186:	6a03      	ldr	r3, [r0, #32]
{
   b9188:	4604      	mov	r4, r0
   b918a:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   b918c:	b91b      	cbnz	r3, b9196 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   b918e:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   b9190:	f7ff ffd8 	bl	b9144 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   b9194:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   b9196:	6a20      	ldr	r0, [r4, #32]
   b9198:	b180      	cbz	r0, b91bc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   b919a:	7803      	ldrb	r3, [r0, #0]
   b919c:	f003 0303 	and.w	r3, r3, #3
   b91a0:	2b03      	cmp	r3, #3
   b91a2:	d10d      	bne.n	b91c0 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   b91a4:	2307      	movs	r3, #7
   b91a6:	2201      	movs	r2, #1
   b91a8:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   b91ac:	4620      	mov	r0, r4
   b91ae:	f7ff fcf1 	bl	b8b94 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   b91b2:	6a23      	ldr	r3, [r4, #32]
   b91b4:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   b91b8:	f000 0001 	and.w	r0, r0, #1
}
   b91bc:	b002      	add	sp, #8
   b91be:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   b91c0:	2b01      	cmp	r3, #1
   b91c2:	f04f 0300 	mov.w	r3, #0
   b91c6:	d011      	beq.n	b91ec <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   b91c8:	f240 7101 	movw	r1, #1793	; 0x701
   b91cc:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   b91d0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   b91d4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   b91d8:	4620      	mov	r0, r4
   b91da:	f7ff feef 	bl	b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   b91de:	280b      	cmp	r0, #11
   b91e0:	d006      	beq.n	b91f0 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   b91e2:	f1a0 030d 	sub.w	r3, r0, #13
   b91e6:	4258      	negs	r0, r3
   b91e8:	4158      	adcs	r0, r3
   b91ea:	e7e7      	b.n	b91bc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   b91ec:	4618      	mov	r0, r3
   b91ee:	e7e5      	b.n	b91bc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   b91f0:	2001      	movs	r0, #1
   b91f2:	e7e3      	b.n	b91bc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000b91f4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   b91f4:	b510      	push	{r4, lr}
   b91f6:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   b91f8:	2018      	movs	r0, #24
   b91fa:	f7fa ff4c 	bl	b4096 <_Znwj>
   b91fe:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   b9200:	b960      	cbnz	r0, b921c <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9202:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9206:	b913      	cbnz	r3, b920e <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   b9208:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   b920c:	b128      	cbz	r0, b921a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   b920e:	4905      	ldr	r1, [pc, #20]	; (b9224 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   b9210:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9214:	f008 f941 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9218:	2000      	movs	r0, #0
}
   b921a:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   b921c:	2300      	movs	r3, #0
   b921e:	7503      	strb	r3, [r0, #20]
  return (true);
   b9220:	2001      	movs	r0, #1
   b9222:	e7fa      	b.n	b921a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   b9224:	000c730c 	.word	0x000c730c

000b9228 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   b9228:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   b922a:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   b922c:	4605      	mov	r5, r0
   b922e:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   b9230:	b18b      	cbz	r3, b9256 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   b9232:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   b9236:	4b13      	ldr	r3, [pc, #76]	; (b9284 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   b9238:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   b923c:	2300      	movs	r3, #0
   b923e:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   b9242:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   b9244:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   b9246:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   b924a:	f7ff feb7 	bl	b8fbc <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   b924e:	280b      	cmp	r0, #11
   b9250:	d10b      	bne.n	b926a <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   b9252:	2401      	movs	r4, #1
   b9254:	e00d      	b.n	b9272 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   b9256:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   b9258:	f7ff ffcc 	bl	b91f4 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   b925c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   b925e:	9a01      	ldr	r2, [sp, #4]
   b9260:	2c00      	cmp	r4, #0
   b9262:	d1e6      	bne.n	b9232 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   b9264:	4620      	mov	r0, r4
   b9266:	b002      	add	sp, #8
   b9268:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   b926a:	f1a0 030d 	sub.w	r3, r0, #13
   b926e:	425c      	negs	r4, r3
   b9270:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   b9272:	6f28      	ldr	r0, [r5, #112]	; 0x70
   b9274:	b110      	cbz	r0, b927c <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   b9276:	2118      	movs	r1, #24
   b9278:	f7fa ff13 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   b927c:	2300      	movs	r3, #0
   b927e:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   b9280:	e7f0      	b.n	b9264 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   b9282:	bf00      	nop
   b9284:	00010006 	.word	0x00010006

000b9288 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   b9288:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   b928a:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   b928e:	4604      	mov	r4, r0
   b9290:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   b9292:	b145      	cbz	r5, b92a6 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   b9294:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   b9298:	b9b1      	cbnz	r1, b92c8 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   b929a:	4620      	mov	r0, r4
}
   b929c:	b003      	add	sp, #12
   b929e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   b92a2:	f7ff bfc1 	b.w	b9228 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   b92a6:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   b92a8:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   b92ac:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   b92b0:	f006 fde0 	bl	bfe74 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   b92b4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b92b8:	f006 fde7 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
   b92bc:	9a01      	ldr	r2, [sp, #4]
   b92be:	2800      	cmp	r0, #0
   b92c0:	d0e8      	beq.n	b9294 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   b92c2:	4628      	mov	r0, r5
   b92c4:	b003      	add	sp, #12
   b92c6:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   b92c8:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   b92ca:	bf18      	it	ne
   b92cc:	2104      	movne	r1, #4
   b92ce:	e7e4      	b.n	b929a <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000b92d0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   b92d0:	b570      	push	{r4, r5, r6, lr}
   b92d2:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   b92d4:	2300      	movs	r3, #0
   b92d6:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   b92da:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   b92de:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   b92e2:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   b92e6:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   b92ea:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   b92ec:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   b92f0:	b91b      	cbnz	r3, b92fa <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   b92f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   b92f6:	f7fb f9ed 	bl	b46d4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   b92fa:	4620      	mov	r0, r4
   b92fc:	f7fc fe04 	bl	b5f08 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   b9300:	4631      	mov	r1, r6
   b9302:	4620      	mov	r0, r4
   b9304:	f7ff ffc0 	bl	b9288 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   b9308:	b110      	cbz	r0, b9310 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   b930a:	2501      	movs	r5, #1
}
   b930c:	4628      	mov	r0, r5
   b930e:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9310:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9314:	b913      	cbnz	r3, b931c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   b9316:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b931a:	b123      	cbz	r3, b9326 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   b931c:	4917      	ldr	r1, [pc, #92]	; (b937c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   b931e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9322:	f008 f8ba 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   b9326:	4631      	mov	r1, r6
   b9328:	4620      	mov	r0, r4
   b932a:	f7ff ffad 	bl	b9288 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   b932e:	2800      	cmp	r0, #0
   b9330:	d1eb      	bne.n	b930a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9332:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9336:	b913      	cbnz	r3, b933e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   b9338:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b933c:	b123      	cbz	r3, b9348 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   b933e:	4910      	ldr	r1, [pc, #64]	; (b9380 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   b9340:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9344:	f008 f8a9 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   b9348:	4631      	mov	r1, r6
   b934a:	4620      	mov	r0, r4
   b934c:	f7ff ff9c 	bl	b9288 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   b9350:	2800      	cmp	r0, #0
   b9352:	d1da      	bne.n	b930a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   b9354:	2d00      	cmp	r5, #0
   b9356:	d0d9      	beq.n	b930c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   b9358:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   b935c:	2d00      	cmp	r5, #0
   b935e:	d0d5      	beq.n	b930c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9360:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9364:	b91b      	cbnz	r3, b936e <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   b9366:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b936a:	2b00      	cmp	r3, #0
   b936c:	d0cd      	beq.n	b930a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   b936e:	4905      	ldr	r1, [pc, #20]	; (b9384 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   b9370:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9374:	f008 f891 	bl	c149a <_ZN5Print7printlnEPK19__FlashStringHelper>
   b9378:	e7c8      	b.n	b930c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   b937a:	bf00      	nop
   b937c:	000c7333 	.word	0x000c7333
   b9380:	000c7357 	.word	0x000c7357
   b9384:	000c737a 	.word	0x000c737a

000b9388 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   b9388:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   b938a:	6a03      	ldr	r3, [r0, #32]
{
   b938c:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   b938e:	b91b      	cbnz	r3, b9398 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   b9390:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   b9392:	f7ff fed7 	bl	b9144 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   b9396:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   b9398:	6a20      	ldr	r0, [r4, #32]
   b939a:	b1b0      	cbz	r0, b93ca <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   b939c:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   b93a0:	07db      	lsls	r3, r3, #31
   b93a2:	d402      	bmi.n	b93aa <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   b93a4:	4620      	mov	r0, r4
   b93a6:	f7ff feed 	bl	b9184 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   b93aa:	6a23      	ldr	r3, [r4, #32]
   b93ac:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   b93b0:	f36f 0200 	bfc	r2, #0, #1
   b93b4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   b93b8:	6a23      	ldr	r3, [r4, #32]
   b93ba:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   b93be:	f36f 0200 	bfc	r2, #0, #1
   b93c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   b93c6:	6a23      	ldr	r3, [r4, #32]
   b93c8:	69d8      	ldr	r0, [r3, #28]
}
   b93ca:	b002      	add	sp, #8
   b93cc:	bd10      	pop	{r4, pc}

000b93ce <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   b93ce:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   b93d0:	6a03      	ldr	r3, [r0, #32]
{
   b93d2:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   b93d4:	b91b      	cbnz	r3, b93de <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   b93d6:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   b93d8:	f7ff feb4 	bl	b9144 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   b93dc:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   b93de:	6a20      	ldr	r0, [r4, #32]
   b93e0:	b1b0      	cbz	r0, b9410 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   b93e2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   b93e6:	079b      	lsls	r3, r3, #30
   b93e8:	d402      	bmi.n	b93f0 <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   b93ea:	4620      	mov	r0, r4
   b93ec:	f7ff feca 	bl	b9184 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   b93f0:	6a23      	ldr	r3, [r4, #32]
   b93f2:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   b93f6:	f36f 0241 	bfc	r2, #1, #1
   b93fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   b93fe:	6a23      	ldr	r3, [r4, #32]
   b9400:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   b9404:	f36f 0200 	bfc	r2, #0, #1
   b9408:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   b940c:	6a23      	ldr	r3, [r4, #32]
   b940e:	6a18      	ldr	r0, [r3, #32]
}
   b9410:	b002      	add	sp, #8
   b9412:	bd10      	pop	{r4, pc}

000b9414 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b9414:	4770      	bx	lr

000b9416 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b9416:	6a00      	ldr	r0, [r0, #32]
   b9418:	6803      	ldr	r3, [r0, #0]
   b941a:	68db      	ldr	r3, [r3, #12]
   b941c:	4718      	bx	r3

000b941e <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b941e:	4770      	bx	lr

000b9420 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b9420:	7c03      	ldrb	r3, [r0, #16]
   b9422:	f013 0308 	ands.w	r3, r3, #8
   b9426:	bf1e      	ittt	ne
   b9428:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b942a:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b942c:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b942e:	2b00      	cmp	r3, #0
  }
   b9430:	bfac      	ite	ge
   b9432:	4618      	movge	r0, r3
   b9434:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b9438:	4770      	bx	lr
	...

000b943c <_Z13StatusHandlerv>:

//ISR Function to calculate bitmasked status number and signal to the main loop that the status is ready
void StatusHandler(){
    statusFlags = 0;                    //Reset status flags to 0, then add up the individual flags
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b943c:	4b15      	ldr	r3, [pc, #84]	; (b9494 <_Z13StatusHandlerv+0x58>)
   b943e:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b9440:	4b15      	ldr	r3, [pc, #84]	; (b9498 <_Z13StatusHandlerv+0x5c>)
   b9442:	781b      	ldrb	r3, [r3, #0]
   b9444:	009b      	lsls	r3, r3, #2
   b9446:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
   b944a:	4b14      	ldr	r3, [pc, #80]	; (b949c <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b944c:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b944e:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;    //Bit 3 indicates bot is currently offloading
   b9450:	4a13      	ldr	r2, [pc, #76]	; (b94a0 <_Z13StatusHandlerv+0x64>)
   b9452:	7812      	ldrb	r2, [r2, #0]
   b9454:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;      //Bit 4 indicates the current drive mode
   b9458:	4a12      	ldr	r2, [pc, #72]	; (b94a4 <_Z13StatusHandlerv+0x68>)
   b945a:	7812      	ldrb	r2, [r2, #0]
   b945c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;     //Bit 6 indicates that the battery is low
   b9460:	4a11      	ldr	r2, [pc, #68]	; (b94a8 <_Z13StatusHandlerv+0x6c>)
   b9462:	7812      	ldrb	r2, [r2, #0]
   b9464:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;     //Bit 7 indicates that the Atlas sensors are being logged to the SD card
   b9468:	4a10      	ldr	r2, [pc, #64]	; (b94ac <_Z13StatusHandlerv+0x70>)
   b946a:	7812      	ldrb	r2, [r2, #0]
   b946c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;       //Bit 8 indicates neo-m8u GPS is available and receiving non-null data
   b9470:	4a0f      	ldr	r2, [pc, #60]	; (b94b0 <_Z13StatusHandlerv+0x74>)
   b9472:	7812      	ldrb	r2, [r2, #0]
   b9474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;   //Bit 9 indicates the LIS3MDL compass is connected and providing dat
   b9478:	4a0e      	ldr	r2, [pc, #56]	; (b94b4 <_Z13StatusHandlerv+0x78>)
   b947a:	7812      	ldrb	r2, [r2, #0]
   b947c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;       //Bit 10 indicates the SD card is functional and can record data
   b9480:	4a0d      	ldr	r2, [pc, #52]	; (b94b8 <_Z13StatusHandlerv+0x7c>)
   b9482:	7812      	ldrb	r2, [r2, #0]
   b9484:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b9488:	4a0c      	ldr	r2, [pc, #48]	; (b94bc <_Z13StatusHandlerv+0x80>)
   b948a:	8013      	strh	r3, [r2, #0]
    statusReady = true;                 //Set flag true, so the main loop will transmit out status to CChub
   b948c:	4b0c      	ldr	r3, [pc, #48]	; (b94c0 <_Z13StatusHandlerv+0x84>)
   b948e:	2201      	movs	r2, #1
   b9490:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b9492:	4770      	bx	lr
   b9494:	2003dd78 	.word	0x2003dd78
   b9498:	2003dd30 	.word	0x2003dd30
   b949c:	2003dd65 	.word	0x2003dd65
   b94a0:	2003e0b0 	.word	0x2003e0b0
   b94a4:	2003ddad 	.word	0x2003ddad
   b94a8:	2003dedc 	.word	0x2003dedc
   b94ac:	2003ded5 	.word	0x2003ded5
   b94b0:	2003dd64 	.word	0x2003dd64
   b94b4:	2003dd40 	.word	0x2003dd40
   b94b8:	2003dd68 	.word	0x2003dd68
   b94bc:	2003e5a8 	.word	0x2003e5a8
   b94c0:	2003e5c8 	.word	0x2003e5c8

000b94c4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b94c4:	4770      	bx	lr

000b94c6 <_ZN4FileD0Ev>:
   b94c6:	b510      	push	{r4, lr}
   b94c8:	2134      	movs	r1, #52	; 0x34
   b94ca:	4604      	mov	r4, r0
   b94cc:	f7fa fde9 	bl	b40a2 <_ZdlPvj>
   b94d0:	4620      	mov	r0, r4
   b94d2:	bd10      	pop	{r4, pc}

000b94d4 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b94d4:	6943      	ldr	r3, [r0, #20]
   b94d6:	b113      	cbz	r3, b94de <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b94d8:	6983      	ldr	r3, [r0, #24]
   b94da:	300c      	adds	r0, #12
   b94dc:	4718      	bx	r3
            callback();
        }
    }
   b94de:	4770      	bx	lr

000b94e0 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b94e0:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b94e2:	2100      	movs	r1, #0
   b94e4:	4604      	mov	r4, r0
   b94e6:	4608      	mov	r0, r1
   b94e8:	f004 fb78 	bl	bdbdc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b94ec:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b94ee:	4620      	mov	r0, r4
   b94f0:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b94f2:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b94f4:	f004 fb8a 	bl	bdc0c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b94f8:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b94fa:	b10c      	cbz	r4, b9500 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b94fc:	2301      	movs	r3, #1
   b94fe:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b9500:	2100      	movs	r1, #0
   b9502:	2001      	movs	r0, #1
   b9504:	f004 fb6a 	bl	bdbdc <os_thread_scheduling>
            }
        }
        if (t) {
   b9508:	b12c      	cbz	r4, b9516 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b950a:	6823      	ldr	r3, [r4, #0]
   b950c:	4620      	mov	r0, r4
   b950e:	689b      	ldr	r3, [r3, #8]
   b9510:	4798      	blx	r3
            t->running = false;
   b9512:	2300      	movs	r3, #0
   b9514:	7123      	strb	r3, [r4, #4]
        }
    }
   b9516:	b002      	add	sp, #8
   b9518:	bd10      	pop	{r4, pc}

000b951a <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b951a:	3010      	adds	r0, #16
   b951c:	f003 b954 	b.w	bc7c8 <_ZN7FatFile4syncEv>

000b9520 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b9520:	3010      	adds	r0, #16
   b9522:	f003 b835 	b.w	bc590 <_ZN7FatFile4peekEv>

000b9526 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b9526:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b9528:	2201      	movs	r2, #1
   b952a:	f10d 0107 	add.w	r1, sp, #7
   b952e:	3010      	adds	r0, #16
   b9530:	f002 ff80 	bl	bc434 <_ZN7FatFile4readEPvj>
   b9534:	2801      	cmp	r0, #1
   b9536:	bf0c      	ite	eq
   b9538:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b953c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b9540:	b003      	add	sp, #12
   b9542:	f85d fb04 	ldr.w	pc, [sp], #4

000b9546 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b9546:	3010      	adds	r0, #16
   b9548:	f003 b9c8 	b.w	bc8dc <_ZN7FatFile5writeEPKvj>

000b954c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b954c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b954e:	2201      	movs	r2, #1
   b9550:	f88d 1007 	strb.w	r1, [sp, #7]
   b9554:	3010      	adds	r0, #16
   b9556:	f10d 0107 	add.w	r1, sp, #7
   b955a:	f003 f9bf 	bl	bc8dc <_ZN7FatFile5writeEPKvj>
  }
   b955e:	b003      	add	sp, #12
   b9560:	f85d fb04 	ldr.w	pc, [sp], #4

000b9564 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b9564:	2a01      	cmp	r2, #1
   b9566:	d102      	bne.n	b956e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9568:	6001      	str	r1, [r0, #0]
      }
   b956a:	2000      	movs	r0, #0
   b956c:	4770      	bx	lr
	  switch (__op)
   b956e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b9570:	bf04      	itt	eq
   b9572:	680b      	ldreq	r3, [r1, #0]
   b9574:	6003      	streq	r3, [r0, #0]
	      break;
   b9576:	e7f8      	b.n	b956a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b9578 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b9578:	6803      	ldr	r3, [r0, #0]
   b957a:	4718      	bx	r3

000b957c <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b957c:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b957e:	6880      	ldr	r0, [r0, #8]
   b9580:	b128      	cbz	r0, b958e <_ZN5Timer5_stopEjb.isra.0+0x12>
   b9582:	2300      	movs	r3, #0
   b9584:	e9cd 1300 	strd	r1, r3, [sp]
   b9588:	2102      	movs	r1, #2
   b958a:	f004 fb47 	bl	bdc1c <os_timer_change>
    }
   b958e:	b003      	add	sp, #12
   b9590:	f85d fb04 	ldr.w	pc, [sp], #4

000b9594 <_ZN7TwoWire5writeEi.isra.0>:
   b9594:	6803      	ldr	r3, [r0, #0]
   b9596:	b2c9      	uxtb	r1, r1
   b9598:	689b      	ldr	r3, [r3, #8]
   b959a:	4718      	bx	r3

000b959c <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b959c:	b510      	push	{r4, lr}
   b959e:	4b05      	ldr	r3, [pc, #20]	; (b95b4 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b95a0:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b95a2:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b95a4:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b95a6:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b95aa:	f004 fd77 	bl	be09c <led_set_status_active>
}
   b95ae:	4620      	mov	r0, r4
   b95b0:	bd10      	pop	{r4, pc}
   b95b2:	bf00      	nop
   b95b4:	000c7ae4 	.word	0x000c7ae4

000b95b8 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b95b8:	b510      	push	{r4, lr}
   b95ba:	4604      	mov	r4, r0
}
   b95bc:	f7ff ffee 	bl	b959c <_ZN8particle9LEDStatusD1Ev>
   b95c0:	4620      	mov	r0, r4
   b95c2:	2120      	movs	r1, #32
   b95c4:	f7fa fd6d 	bl	b40a2 <_ZdlPvj>
   b95c8:	4620      	mov	r0, r4
   b95ca:	bd10      	pop	{r4, pc}

000b95cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b95cc:	4b0a      	ldr	r3, [pc, #40]	; (b95f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b95ce:	b510      	push	{r4, lr}
   b95d0:	4604      	mov	r4, r0
   b95d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b95d4:	f007 f860 	bl	c0698 <_ZN5spark10LogManager8instanceEv>
   b95d8:	4621      	mov	r1, r4
   b95da:	f007 fa98 	bl	c0b0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b95de:	f008 fbc9 	bl	c1d74 <_Z16_fetch_usbserialv>
   b95e2:	f008 fbbb 	bl	c1d5c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b95e6:	4620      	mov	r0, r4
   b95e8:	4b04      	ldr	r3, [pc, #16]	; (b95fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b95ea:	f840 3b04 	str.w	r3, [r0], #4
   b95ee:	f007 f929 	bl	c0844 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b95f2:	4620      	mov	r0, r4
   b95f4:	bd10      	pop	{r4, pc}
   b95f6:	bf00      	nop
   b95f8:	000c7af8 	.word	0x000c7af8
   b95fc:	000c7acc 	.word	0x000c7acc

000b9600 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b9600:	b510      	push	{r4, lr}
   b9602:	4604      	mov	r4, r0
    }
   b9604:	f7ff ffe2 	bl	b95cc <_ZN5spark16SerialLogHandlerD1Ev>
   b9608:	4620      	mov	r0, r4
   b960a:	2124      	movs	r1, #36	; 0x24
   b960c:	f7fa fd49 	bl	b40a2 <_ZdlPvj>
   b9610:	4620      	mov	r0, r4
   b9612:	bd10      	pop	{r4, pc}

000b9614 <_Z11buttonTimerv>:
    bool stopFromISR() { return _stop(0, true); }
   b9614:	4802      	ldr	r0, [pc, #8]	; (b9620 <_Z11buttonTimerv+0xc>)
   b9616:	2201      	movs	r2, #1
   b9618:	2100      	movs	r1, #0
   b961a:	f7ff bfaf 	b.w	b957c <_ZN5Timer5_stopEjb.isra.0>
   b961e:	bf00      	nop
   b9620:	2003e564 	.word	0x2003e564

000b9624 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b9624:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9626:	4606      	mov	r6, r0
   b9628:	4614      	mov	r4, r2
   b962a:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b962c:	2200      	movs	r2, #0
   b962e:	4621      	mov	r1, r4
   b9630:	f7ff ffa4 	bl	b957c <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b9634:	68b0      	ldr	r0, [r6, #8]
   b9636:	b130      	cbz	r0, b9646 <_ZN5Timer6_startEjb.isra.0+0x22>
   b9638:	2300      	movs	r3, #0
   b963a:	e9cd 5300 	strd	r5, r3, [sp]
   b963e:	4622      	mov	r2, r4
   b9640:	4619      	mov	r1, r3
   b9642:	f004 faeb 	bl	bdc1c <os_timer_change>
    }
   b9646:	b002      	add	sp, #8
   b9648:	bd70      	pop	{r4, r5, r6, pc}
	...

000b964c <_Z13buttonHandlerv>:
    #endif
    shutdownTimer.stopFromISR();
}

//ISR triggered when button is pressed or released
void buttonHandler(){
   b964c:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){               //If the interrupt was triggered by the button being pressed
   b964e:	2012      	movs	r0, #18
   b9650:	f008 fcba 	bl	c1fc8 <digitalRead>
   b9654:	4d08      	ldr	r5, [pc, #32]	; (b9678 <_Z13buttonHandlerv+0x2c>)
   b9656:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b9658:	2201      	movs	r2, #1
   b965a:	b130      	cbz	r0, b966a <_Z13buttonHandlerv+0x1e>
   b965c:	4807      	ldr	r0, [pc, #28]	; (b967c <_Z13buttonHandlerv+0x30>)
   b965e:	2100      	movs	r1, #0
   b9660:	f7ff ffe0 	bl	b9624 <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();       //Start the shutdown timer, which will check if the button has been held for long enough
        shutdownActive = true;              //Set flag to true to make LED flash and indicate shutdown initiate
   b9664:	2301      	movs	r3, #1
   b9666:	702b      	strb	r3, [r5, #0]
    }
    else{                                   //If the interrupt was triggered by the button being released
        shutdownTimer.stopFromISR();        //Stop the ISR which will shut off the bot
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
    }
}
   b9668:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b966a:	4601      	mov	r1, r0
   b966c:	4803      	ldr	r0, [pc, #12]	; (b967c <_Z13buttonHandlerv+0x30>)
   b966e:	f7ff ff85 	bl	b957c <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
   b9672:	702c      	strb	r4, [r5, #0]
}
   b9674:	e7f8      	b.n	b9668 <_Z13buttonHandlerv+0x1c>
   b9676:	bf00      	nop
   b9678:	2003e562 	.word	0x2003e562
   b967c:	2003e564 	.word	0x2003e564

000b9680 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9680:	b40e      	push	{r1, r2, r3}
   b9682:	b503      	push	{r0, r1, lr}
   b9684:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b9686:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b9688:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b968c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b968e:	f007 ff24 	bl	c14da <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b9692:	b002      	add	sp, #8
   b9694:	f85d eb04 	ldr.w	lr, [sp], #4
   b9698:	b003      	add	sp, #12
   b969a:	4770      	bx	lr

000b969c <_Z13motionHandlerv>:
void motionHandler(){
   b969c:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b969e:	4d2b      	ldr	r5, [pc, #172]	; (b974c <_Z13motionHandlerv+0xb0>)
   b96a0:	782b      	ldrb	r3, [r5, #0]
   b96a2:	bb3b      	cbnz	r3, b96f4 <_Z13motionHandlerv+0x58>
   b96a4:	4e2a      	ldr	r6, [pc, #168]	; (b9750 <_Z13motionHandlerv+0xb4>)
   b96a6:	7833      	ldrb	r3, [r6, #0]
   b96a8:	2b5a      	cmp	r3, #90	; 0x5a
   b96aa:	d023      	beq.n	b96f4 <_Z13motionHandlerv+0x58>
   b96ac:	4c29      	ldr	r4, [pc, #164]	; (b9754 <_Z13motionHandlerv+0xb8>)
   b96ae:	7823      	ldrb	r3, [r4, #0]
   b96b0:	2b5a      	cmp	r3, #90	; 0x5a
   b96b2:	d01f      	beq.n	b96f4 <_Z13motionHandlerv+0x58>
   b96b4:	f004 fafa 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b96b8:	4b27      	ldr	r3, [pc, #156]	; (b9758 <_Z13motionHandlerv+0xbc>)
   b96ba:	681b      	ldr	r3, [r3, #0]
   b96bc:	1ac0      	subs	r0, r0, r3
   b96be:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b96c2:	d917      	bls.n	b96f4 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b96c4:	4b25      	ldr	r3, [pc, #148]	; (b975c <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b96c6:	4826      	ldr	r0, [pc, #152]	; (b9760 <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b96c8:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b96ca:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b96cc:	4b25      	ldr	r3, [pc, #148]	; (b9764 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b96ce:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b96d0:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b96d2:	4b25      	ldr	r3, [pc, #148]	; (b9768 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b96d4:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b96d6:	2201      	movs	r2, #1
   b96d8:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b96da:	f007 ff46 	bl	c156a <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b96de:	7821      	ldrb	r1, [r4, #0]
   b96e0:	4822      	ldr	r0, [pc, #136]	; (b976c <_Z13motionHandlerv+0xd0>)
   b96e2:	f007 ff42 	bl	c156a <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b96e6:	f008 fb45 	bl	c1d74 <_Z16_fetch_usbserialv>
   b96ea:	4921      	ldr	r1, [pc, #132]	; (b9770 <_Z13motionHandlerv+0xd4>)
   b96ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b96f0:	f7ff ffc6 	bl	b9680 <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b96f4:	4e1f      	ldr	r6, [pc, #124]	; (b9774 <_Z13motionHandlerv+0xd8>)
   b96f6:	7834      	ldrb	r4, [r6, #0]
   b96f8:	bb3c      	cbnz	r4, b974a <_Z13motionHandlerv+0xae>
   b96fa:	782b      	ldrb	r3, [r5, #0]
   b96fc:	b32b      	cbz	r3, b974a <_Z13motionHandlerv+0xae>
   b96fe:	f004 fad5 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b9702:	4b1d      	ldr	r3, [pc, #116]	; (b9778 <_Z13motionHandlerv+0xdc>)
   b9704:	681b      	ldr	r3, [r3, #0]
   b9706:	1ac0      	subs	r0, r0, r3
   b9708:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b970c:	d91d      	bls.n	b974a <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b970e:	4b1b      	ldr	r3, [pc, #108]	; (b977c <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b9710:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b9712:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b9714:	4b0e      	ldr	r3, [pc, #56]	; (b9750 <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b9716:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b9718:	215a      	movs	r1, #90	; 0x5a
   b971a:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b971c:	4b0f      	ldr	r3, [pc, #60]	; (b975c <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b971e:	4c0d      	ldr	r4, [pc, #52]	; (b9754 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b9720:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b9722:	4b10      	ldr	r3, [pc, #64]	; (b9764 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b9724:	480e      	ldr	r0, [pc, #56]	; (b9760 <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b9726:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b9728:	4b0f      	ldr	r3, [pc, #60]	; (b9768 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b972a:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b972c:	2201      	movs	r2, #1
   b972e:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b9730:	f007 ff1b 	bl	c156a <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b9734:	7821      	ldrb	r1, [r4, #0]
   b9736:	480d      	ldr	r0, [pc, #52]	; (b976c <_Z13motionHandlerv+0xd0>)
   b9738:	f007 ff17 	bl	c156a <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b973c:	f008 fb1a 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9740:	490f      	ldr	r1, [pc, #60]	; (b9780 <_Z13motionHandlerv+0xe4>)
   b9742:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b9746:	f7ff ff9b 	bl	b9680 <_ZN5Print8printlnfEPKcz>
}
   b974a:	bd70      	pop	{r4, r5, r6, pc}
   b974c:	2003ddad 	.word	0x2003ddad
   b9750:	2003e560 	.word	0x2003e560
   b9754:	2003e561 	.word	0x2003e561
   b9758:	2003ddf0 	.word	0x2003ddf0
   b975c:	2003de1c 	.word	0x2003de1c
   b9760:	2003dd44 	.word	0x2003dd44
   b9764:	2003e0b9 	.word	0x2003e0b9
   b9768:	2003e5ec 	.word	0x2003e5ec
   b976c:	2003dd54 	.word	0x2003dd54
   b9770:	000c74ad 	.word	0x000c74ad
   b9774:	2003e5d8 	.word	0x2003e5d8
   b9778:	2003ddf8 	.word	0x2003ddf8
   b977c:	2003e0b1 	.word	0x2003e0b1
   b9780:	000c74f7 	.word	0x000c74f7

000b9784 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b9784:	b510      	push	{r4, lr}
      if (_M_manager)
   b9786:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b9788:	4604      	mov	r4, r0
      if (_M_manager)
   b978a:	b113      	cbz	r3, b9792 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b978c:	2203      	movs	r2, #3
   b978e:	4601      	mov	r1, r0
   b9790:	4798      	blx	r3
    }
   b9792:	4620      	mov	r0, r4
   b9794:	bd10      	pop	{r4, pc}
	...

000b9798 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b9798:	b538      	push	{r3, r4, r5, lr}
   b979a:	4b10      	ldr	r3, [pc, #64]	; (b97dc <_ZN5TimerD1Ev+0x44>)
   b979c:	6003      	str	r3, [r0, #0]
        if (handle) {
   b979e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b97a0:	4604      	mov	r4, r0
        if (handle) {
   b97a2:	b1a3      	cbz	r3, b97ce <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b97a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b97a8:	2200      	movs	r2, #0
   b97aa:	f7ff fee7 	bl	b957c <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b97ae:	68a0      	ldr	r0, [r4, #8]
   b97b0:	2100      	movs	r1, #0
   b97b2:	f004 fa5b 	bl	bdc6c <os_timer_set_id>
            while (running) {
   b97b6:	7923      	ldrb	r3, [r4, #4]
   b97b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b97bc:	b113      	cbz	r3, b97c4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b97be:	f004 fa05 	bl	bdbcc <os_thread_yield>
            while (running) {
   b97c2:	e7f8      	b.n	b97b6 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b97c4:	68a0      	ldr	r0, [r4, #8]
   b97c6:	4629      	mov	r1, r5
   b97c8:	f004 fa18 	bl	bdbfc <os_timer_destroy>
            handle = nullptr;
   b97cc:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b97ce:	f104 000c 	add.w	r0, r4, #12
   b97d2:	f7ff ffd7 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
    }
   b97d6:	4620      	mov	r0, r4
   b97d8:	bd38      	pop	{r3, r4, r5, pc}
   b97da:	bf00      	nop
   b97dc:	000c7ab8 	.word	0x000c7ab8

000b97e0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b97e0:	b510      	push	{r4, lr}
   b97e2:	4604      	mov	r4, r0
    }
   b97e4:	f7ff ffd8 	bl	b9798 <_ZN5TimerD1Ev>
   b97e8:	4620      	mov	r0, r4
   b97ea:	211c      	movs	r1, #28
   b97ec:	f7fa fc59 	bl	b40a2 <_ZdlPvj>
   b97f0:	4620      	mov	r0, r4
   b97f2:	bd10      	pop	{r4, pc}

000b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b97f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b97f6:	468c      	mov	ip, r1
   b97f8:	2500      	movs	r5, #0
   b97fa:	4914      	ldr	r1, [pc, #80]	; (b984c <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b97fc:	7105      	strb	r5, [r0, #4]
   b97fe:	4604      	mov	r4, r0
   b9800:	6085      	str	r5, [r0, #8]
   b9802:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9804:	e892 0003 	ldmia.w	r2, {r0, r1}
   b9808:	b085      	sub	sp, #20
   b980a:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b980c:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9810:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9814:	e896 0003 	ldmia.w	r6, {r0, r1}
   b9818:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b981c:	e897 0003 	ldmia.w	r7, {r0, r1}
   b9820:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9824:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9826:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b9828:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b982a:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b982c:	6095      	str	r5, [r2, #8]
   b982e:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9830:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b9832:	e9cd 3500 	strd	r3, r5, [sp]
   b9836:	4a06      	ldr	r2, [pc, #24]	; (b9850 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b9838:	4623      	mov	r3, r4
   b983a:	4661      	mov	r1, ip
   b983c:	f104 0008 	add.w	r0, r4, #8
   b9840:	f004 f9d4 	bl	bdbec <os_timer_create>
    }
   b9844:	4620      	mov	r0, r4
   b9846:	b005      	add	sp, #20
   b9848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b984a:	bf00      	nop
   b984c:	000c7ab8 	.word	0x000c7ab8
   b9850:	000b94e1 	.word	0x000b94e1

000b9854 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b9854:	b510      	push	{r4, lr}
   b9856:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b9858:	2200      	movs	r2, #0
   b985a:	7c40      	ldrb	r0, [r0, #17]
   b985c:	f004 fc58 	bl	be110 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b9860:	7c63      	ldrb	r3, [r4, #17]
   b9862:	2b0f      	cmp	r3, #15
        d_.period = period;
   b9864:	bf18      	it	ne
   b9866:	8320      	strhne	r0, [r4, #24]
}
   b9868:	bd10      	pop	{r4, pc}
	...

000b986c <_Z10LEDHandlerv>:

//ISR timer to update the color and pattern of the LED based on the status of the system
void LEDHandler(){
   b986c:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    //Special LED Modes
    if(shutdownActive){     //The user is holding down the power off button
   b986e:	4b2e      	ldr	r3, [pc, #184]	; (b9928 <_Z10LEDHandlerv+0xbc>)
   b9870:	781a      	ldrb	r2, [r3, #0]
   b9872:	4b2e      	ldr	r3, [pc, #184]	; (b992c <_Z10LEDHandlerv+0xc0>)
   b9874:	b162      	cbz	r2, b9890 <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b9876:	7c5a      	ldrb	r2, [r3, #17]
   b9878:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b987a:	bf1c      	itt	ne
   b987c:	2202      	movne	r2, #2
   b987e:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b9880:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b9884:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){          //The user has enabled the "Signal" menu item
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b9886:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b9888:	4828      	ldr	r0, [pc, #160]	; (b992c <_Z10LEDHandlerv+0xc0>)
   b988a:	f7ff ffe3 	bl	b9854 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b988e:	bd10      	pop	{r4, pc}
    if(stopActive){         //The user has pressed the stop button on the CChub
   b9890:	4a27      	ldr	r2, [pc, #156]	; (b9930 <_Z10LEDHandlerv+0xc4>)
   b9892:	7812      	ldrb	r2, [r2, #0]
   b9894:	b132      	cbz	r2, b98a4 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b9896:	7c5a      	ldrb	r2, [r3, #17]
   b9898:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b989a:	bf1c      	itt	ne
   b989c:	2202      	movne	r2, #2
   b989e:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b98a0:	4a24      	ldr	r2, [pc, #144]	; (b9934 <_Z10LEDHandlerv+0xc8>)
   b98a2:	e7ef      	b.n	b9884 <_Z10LEDHandlerv+0x18>
    if(offloadMode){        //The CChub is offloading data over BLE
   b98a4:	4a24      	ldr	r2, [pc, #144]	; (b9938 <_Z10LEDHandlerv+0xcc>)
   b98a6:	7812      	ldrb	r2, [r2, #0]
   b98a8:	b132      	cbz	r2, b98b8 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b98aa:	7c5a      	ldrb	r2, [r3, #17]
   b98ac:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b98ae:	bf1c      	itt	ne
   b98b0:	2202      	movne	r2, #2
   b98b2:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b98b4:	22ff      	movs	r2, #255	; 0xff
   b98b6:	e7e5      	b.n	b9884 <_Z10LEDHandlerv+0x18>
    if(signalLED){          //The user has enabled the "Signal" menu item
   b98b8:	4a20      	ldr	r2, [pc, #128]	; (b993c <_Z10LEDHandlerv+0xd0>)
   b98ba:	7812      	ldrb	r2, [r2, #0]
   b98bc:	b132      	cbz	r2, b98cc <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b98be:	7c5a      	ldrb	r2, [r3, #17]
   b98c0:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b98c2:	bf1c      	itt	ne
   b98c4:	2202      	movne	r2, #2
   b98c6:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b98c8:	4a1d      	ldr	r2, [pc, #116]	; (b9940 <_Z10LEDHandlerv+0xd4>)
   b98ca:	e7db      	b.n	b9884 <_Z10LEDHandlerv+0x18>
    if(lowBattery){     //Flash the status color quickly if the battery is low
   b98cc:	4a1d      	ldr	r2, [pc, #116]	; (b9944 <_Z10LEDHandlerv+0xd8>)
   b98ce:	7812      	ldrb	r2, [r2, #0]
   b98d0:	bb1a      	cbnz	r2, b991a <_Z10LEDHandlerv+0xae>
    else if(driveMode == 2){    //If we're in autonomous mode, do a fade pattern
   b98d2:	4a1d      	ldr	r2, [pc, #116]	; (b9948 <_Z10LEDHandlerv+0xdc>)
   b98d4:	7812      	ldrb	r2, [r2, #0]
   b98d6:	2a02      	cmp	r2, #2
   b98d8:	d022      	beq.n	b9920 <_Z10LEDHandlerv+0xb4>
        SetSpeed = LED_SPEED_NORMAL;
   b98da:	2a01      	cmp	r2, #1
   b98dc:	bf0b      	itete	eq
   b98de:	210a      	moveq	r1, #10
   b98e0:	2114      	movne	r1, #20
   b98e2:	2002      	moveq	r0, #2
   b98e4:	2001      	movne	r0, #1
    statusMode |= XBeeAvail << 1;
   b98e6:	4a19      	ldr	r2, [pc, #100]	; (b994c <_Z10LEDHandlerv+0xe0>)
   b98e8:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b98ea:	4a19      	ldr	r2, [pc, #100]	; (b9950 <_Z10LEDHandlerv+0xe4>)
   b98ec:	7812      	ldrb	r2, [r2, #0]
   b98ee:	0092      	lsls	r2, r2, #2
   b98f0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;          //Create bit mask with each of the available mode shifted into different bits
   b98f4:	4c17      	ldr	r4, [pc, #92]	; (b9954 <_Z10LEDHandlerv+0xe8>)
    statusMode |= BLEAvail << 2;
   b98f6:	7824      	ldrb	r4, [r4, #0]
   b98f8:	4322      	orrs	r2, r4
   b98fa:	3a01      	subs	r2, #1
   b98fc:	b2d2      	uxtb	r2, r2
   b98fe:	2a06      	cmp	r2, #6
   b9900:	bf9c      	itt	ls
   b9902:	4c15      	ldrls	r4, [pc, #84]	; (b9958 <_Z10LEDHandlerv+0xec>)
   b9904:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b9908:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b990a:	bf88      	it	hi
   b990c:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b9910:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b9912:	bf18      	it	ne
   b9914:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b9916:	615a      	str	r2, [r3, #20]
   b9918:	e7b6      	b.n	b9888 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b991a:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b991c:	2002      	movs	r0, #2
   b991e:	e7e2      	b.n	b98e6 <_Z10LEDHandlerv+0x7a>
        SetSpeed = LED_SPEED_NORMAL;
   b9920:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_FADE;
   b9922:	2003      	movs	r0, #3
   b9924:	e7df      	b.n	b98e6 <_Z10LEDHandlerv+0x7a>
   b9926:	bf00      	nop
   b9928:	2003e562 	.word	0x2003e562
   b992c:	2003e588 	.word	0x2003e588
   b9930:	2003e5c9 	.word	0x2003e5c9
   b9934:	00ffff00 	.word	0x00ffff00
   b9938:	2003e0b0 	.word	0x2003e0b0
   b993c:	2003e580 	.word	0x2003e580
   b9940:	00ff6000 	.word	0x00ff6000
   b9944:	2003dedc 	.word	0x2003dedc
   b9948:	2003ddad 	.word	0x2003ddad
   b994c:	2003dd78 	.word	0x2003dd78
   b9950:	2003dd30 	.word	0x2003dd30
   b9954:	2003dd65 	.word	0x2003dd65
   b9958:	000c7bec 	.word	0x000c7bec

000b995c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b995c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b995e:	460a      	mov	r2, r1
   b9960:	4901      	ldr	r1, [pc, #4]	; (b9968 <_ZN7FatFile4openEPKci+0xc>)
   b9962:	6809      	ldr	r1, [r1, #0]
   b9964:	f002 bf6d 	b.w	bc842 <_ZN7FatFile4openEPS_PKci>
   b9968:	2003e610 	.word	0x2003e610

000b996c <_Z11wdogHandlerv>:
void wdogHandler(){
   b996c:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b996e:	f004 fbfb 	bl	be168 <spark_cloud_flag_connected>
   b9972:	4c2e      	ldr	r4, [pc, #184]	; (b9a2c <_Z11wdogHandlerv+0xc0>)
    if(Particle.connected()) LTEAvail = true;   //If particle cloud is connected, assume that LTE is available
   b9974:	b308      	cbz	r0, b99ba <_Z11wdogHandlerv+0x4e>
   b9976:	2301      	movs	r3, #1
        LTEAvail = false;
   b9978:	7023      	strb	r3, [r4, #0]
   b997a:	f004 f997 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){   //If the time since the last XBee message is too long, print warning and set status flag to false
   b997e:	4b2c      	ldr	r3, [pc, #176]	; (b9a30 <_Z11wdogHandlerv+0xc4>)
   b9980:	4c2c      	ldr	r4, [pc, #176]	; (b9a34 <_Z11wdogHandlerv+0xc8>)
   b9982:	681b      	ldr	r3, [r3, #0]
   b9984:	f247 5230 	movw	r2, #30000	; 0x7530
   b9988:	1ac0      	subs	r0, r0, r3
   b998a:	4290      	cmp	r0, r2
   b998c:	d828      	bhi.n	b99e0 <_Z11wdogHandlerv+0x74>
   b998e:	b33b      	cbz	r3, b99e0 <_Z11wdogHandlerv+0x74>
    else XBeeAvail = true;
   b9990:	2301      	movs	r3, #1
        XBeeAvail = false;
   b9992:	7023      	strb	r3, [r4, #0]
   b9994:	f004 f98a 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){      //If the time since the last BLE message is too long, print warning and set status flag to false
   b9998:	4b27      	ldr	r3, [pc, #156]	; (b9a38 <_Z11wdogHandlerv+0xcc>)
   b999a:	4c28      	ldr	r4, [pc, #160]	; (b9a3c <_Z11wdogHandlerv+0xd0>)
   b999c:	681b      	ldr	r3, [r3, #0]
   b999e:	f247 5230 	movw	r2, #30000	; 0x7530
   b99a2:	1ac0      	subs	r0, r0, r3
   b99a4:	4290      	cmp	r0, r2
   b99a6:	d82d      	bhi.n	b9a04 <_Z11wdogHandlerv+0x98>
   b99a8:	b363      	cbz	r3, b9a04 <_Z11wdogHandlerv+0x98>
    else BLEAvail = true;
   b99aa:	2301      	movs	r3, #1
        BLEAvail = false;
   b99ac:	7023      	strb	r3, [r4, #0]
    if(stopActive) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b99ae:	4b24      	ldr	r3, [pc, #144]	; (b9a40 <_Z11wdogHandlerv+0xd4>)
   b99b0:	781a      	ldrb	r2, [r3, #0]
   b99b2:	b10a      	cbz	r2, b99b8 <_Z11wdogHandlerv+0x4c>
   b99b4:	2200      	movs	r2, #0
   b99b6:	701a      	strb	r2, [r3, #0]
}
   b99b8:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b99ba:	7823      	ldrb	r3, [r4, #0]
   b99bc:	2b00      	cmp	r3, #0
   b99be:	d0dc      	beq.n	b997a <_Z11wdogHandlerv+0xe>
    return m_attr;
   b99c0:	4820      	ldr	r0, [pc, #128]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b99c2:	7c03      	ldrb	r3, [r0, #16]
   b99c4:	b92b      	cbnz	r3, b99d2 <_Z11wdogHandlerv+0x66>
   b99c6:	4920      	ldr	r1, [pc, #128]	; (b9a48 <_Z11wdogHandlerv+0xdc>)
   b99c8:	f244 2202 	movw	r2, #16898	; 0x4202
   b99cc:	3010      	adds	r0, #16
   b99ce:	f7ff ffc5 	bl	b995c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] LTE Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b99d2:	491e      	ldr	r1, [pc, #120]	; (b9a4c <_Z11wdogHandlerv+0xe0>)
   b99d4:	481b      	ldr	r0, [pc, #108]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
   b99d6:	221e      	movs	r2, #30
   b99d8:	f7ff fe52 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b99dc:	2300      	movs	r3, #0
   b99de:	e7cb      	b.n	b9978 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b99e0:	7823      	ldrb	r3, [r4, #0]
   b99e2:	b16b      	cbz	r3, b9a00 <_Z11wdogHandlerv+0x94>
   b99e4:	4817      	ldr	r0, [pc, #92]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b99e6:	7c03      	ldrb	r3, [r0, #16]
   b99e8:	b92b      	cbnz	r3, b99f6 <_Z11wdogHandlerv+0x8a>
   b99ea:	4917      	ldr	r1, [pc, #92]	; (b9a48 <_Z11wdogHandlerv+0xdc>)
   b99ec:	f244 2202 	movw	r2, #16898	; 0x4202
   b99f0:	3010      	adds	r0, #16
   b99f2:	f7ff ffb3 	bl	b995c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b99f6:	4916      	ldr	r1, [pc, #88]	; (b9a50 <_Z11wdogHandlerv+0xe4>)
   b99f8:	4812      	ldr	r0, [pc, #72]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
   b99fa:	221e      	movs	r2, #30
   b99fc:	f7ff fe40 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b9a00:	2300      	movs	r3, #0
   b9a02:	e7c6      	b.n	b9992 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b9a04:	7822      	ldrb	r2, [r4, #0]
   b9a06:	b172      	cbz	r2, b9a26 <_Z11wdogHandlerv+0xba>
   b9a08:	b16b      	cbz	r3, b9a26 <_Z11wdogHandlerv+0xba>
   b9a0a:	480e      	ldr	r0, [pc, #56]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9a0c:	7c03      	ldrb	r3, [r0, #16]
   b9a0e:	b92b      	cbnz	r3, b9a1c <_Z11wdogHandlerv+0xb0>
   b9a10:	490d      	ldr	r1, [pc, #52]	; (b9a48 <_Z11wdogHandlerv+0xdc>)
   b9a12:	f244 2202 	movw	r2, #16898	; 0x4202
   b9a16:	3010      	adds	r0, #16
   b9a18:	f7ff ffa0 	bl	b995c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b9a1c:	490d      	ldr	r1, [pc, #52]	; (b9a54 <_Z11wdogHandlerv+0xe8>)
   b9a1e:	4809      	ldr	r0, [pc, #36]	; (b9a44 <_Z11wdogHandlerv+0xd8>)
   b9a20:	221e      	movs	r2, #30
   b9a22:	f7ff fe2d 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b9a26:	2300      	movs	r3, #0
   b9a28:	e7c0      	b.n	b99ac <_Z11wdogHandlerv+0x40>
   b9a2a:	bf00      	nop
   b9a2c:	2003dd65 	.word	0x2003dd65
   b9a30:	2003dd7c 	.word	0x2003dd7c
   b9a34:	2003dd78 	.word	0x2003dd78
   b9a38:	2003dd3c 	.word	0x2003dd3c
   b9a3c:	2003dd30 	.word	0x2003dd30
   b9a40:	2003e5c9 	.word	0x2003e5c9
   b9a44:	2003de7c 	.word	0x2003de7c
   b9a48:	2003ddce 	.word	0x2003ddce
   b9a4c:	000c7551 	.word	0x000c7551
   b9a50:	000c75a1 	.word	0x000c75a1
   b9a54:	000c75f2 	.word	0x000c75f2

000b9a58 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b9a58:	b530      	push	{r4, r5, lr}
   b9a5a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b9a5c:	4b1b      	ldr	r3, [pc, #108]	; (b9acc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b9a5e:	9300      	str	r3, [sp, #0]
   b9a60:	7913      	ldrb	r3, [r2, #4]
   b9a62:	f88d 3004 	strb.w	r3, [sp, #4]
   b9a66:	6893      	ldr	r3, [r2, #8]
   b9a68:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b9a6a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b9a6e:	8993      	ldrh	r3, [r2, #12]
   b9a70:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b9a74:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b9a76:	460a      	mov	r2, r1
   b9a78:	466b      	mov	r3, sp
   b9a7a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b9a7e:	4628      	mov	r0, r5
   b9a80:	f003 fe10 	bl	bd6a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b9a84:	b910      	cbnz	r0, b9a8c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b9a86:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b9a88:	b005      	add	sp, #20
   b9a8a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b9a8c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b9a8e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b9a92:	4628      	mov	r0, r5
   b9a94:	f002 fece 	bl	bc834 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b9a98:	2101      	movs	r1, #1
   b9a9a:	4620      	mov	r0, r4
   b9a9c:	f003 fcad 	bl	bd3fa <_ZN9FatVolume4initEh>
   b9aa0:	4601      	mov	r1, r0
   b9aa2:	b168      	cbz	r0, b9ac0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b9aa4:	4621      	mov	r1, r4
   b9aa6:	4628      	mov	r0, r5
   b9aa8:	f002 fcbe 	bl	bc428 <_ZN7FatFile8openRootEP9FatVolume>
   b9aac:	2800      	cmp	r0, #0
   b9aae:	d0ea      	beq.n	b9a86 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b9ab0:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b9ab4:	f013 0f70 	tst.w	r3, #112	; 0x70
   b9ab8:	d0e5      	beq.n	b9a86 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b9aba:	4b05      	ldr	r3, [pc, #20]	; (b9ad0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b9abc:	601d      	str	r5, [r3, #0]
    return true;
   b9abe:	e7e3      	b.n	b9a88 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b9ac0:	4620      	mov	r0, r4
   b9ac2:	f003 fc9a 	bl	bd3fa <_ZN9FatVolume4initEh>
   b9ac6:	2800      	cmp	r0, #0
   b9ac8:	d1ec      	bne.n	b9aa4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b9aca:	e7dc      	b.n	b9a86 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b9acc:	000c73b4 	.word	0x000c73b4
   b9ad0:	2003e610 	.word	0x2003e610

000b9ad4 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b9ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ad8:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b9ada:	7883      	ldrb	r3, [r0, #2]
   b9adc:	2b42      	cmp	r3, #66	; 0x42
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b9ade:	af04      	add	r7, sp, #16
   b9ae0:	4604      	mov	r4, r0
   b9ae2:	468a      	mov	sl, r1
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b9ae4:	d14e      	bne.n	b9b84 <_Z14processCommandPKchb+0xb0>
   b9ae6:	78c3      	ldrb	r3, [r0, #3]
   b9ae8:	2b31      	cmp	r3, #49	; 0x31
   b9aea:	f040 80ef 	bne.w	b9ccc <_Z14processCommandPKchb+0x1f8>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b9aee:	4620      	mov	r0, r4
   b9af0:	f00a fdc5 	bl	c467e <strlen>
   b9af4:	3801      	subs	r0, #1
   b9af6:	f020 0007 	bic.w	r0, r0, #7
        }
   b9afa:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b9afc:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b9b00:	4620      	mov	r0, r4
   b9b02:	f00a fdbc 	bl	c467e <strlen>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b9b06:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b9b08:	4428      	add	r0, r5
   b9b0a:	2600      	movs	r6, #0
   b9b0c:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b9b10:	4620      	mov	r0, r4
        cmdStr[3] = '\0';                   //Set null at end of command string
   b9b12:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b9b14:	813e      	strh	r6, [r7, #8]
   b9b16:	72be      	strb	r6, [r7, #10]
   b9b18:	f00a fdb1 	bl	c467e <strlen>
   b9b1c:	4420      	add	r0, r4
   b9b1e:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b9b22:	723b      	strb	r3, [r7, #8]
   b9b24:	4620      	mov	r0, r4
   b9b26:	f00a fdaa 	bl	c467e <strlen>
   b9b2a:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b9b2c:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b9b2e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b9b32:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b9b34:	2210      	movs	r2, #16
   b9b36:	f107 0008 	add.w	r0, r7, #8
   b9b3a:	f00b fcc9 	bl	c54d0 <strtol>
   b9b3e:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b9b40:	fa5f f888 	uxtb.w	r8, r8
   b9b44:	f008 f916 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9b48:	49ae      	ldr	r1, [pc, #696]	; (b9e04 <_Z14processCommandPKchb+0x330>)
   b9b4a:	4643      	mov	r3, r8
   b9b4c:	4642      	mov	r2, r8
   b9b4e:	f7ff fd97 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b9b52:	2604      	movs	r6, #4
   b9b54:	4620      	mov	r0, r4
   b9b56:	f00a fd92 	bl	c467e <strlen>
   b9b5a:	3802      	subs	r0, #2
   b9b5c:	4286      	cmp	r6, r0
   b9b5e:	d217      	bcs.n	b9b90 <_Z14processCommandPKchb+0xbc>
            if(i < 7) cmdStr[i-4] = command[i];
   b9b60:	2e06      	cmp	r6, #6
   b9b62:	bf9b      	ittet	ls
   b9b64:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b9b68:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b9b6a:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b9b6c:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b9b6e:	bf8c      	ite	hi
   b9b70:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b9b72:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b9b76:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b9b7a:	bf88      	it	hi
   b9b7c:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b9b80:	b2f6      	uxtb	r6, r6
   b9b82:	e7e7      	b.n	b9b54 <_Z14processCommandPKchb+0x80>
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b9b84:	2b41      	cmp	r3, #65	; 0x41
   b9b86:	f040 80a1 	bne.w	b9ccc <_Z14processCommandPKchb+0x1f8>
   b9b8a:	78c3      	ldrb	r3, [r0, #3]
   b9b8c:	2b42      	cmp	r3, #66	; 0x42
   b9b8e:	e7ac      	b.n	b9aea <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){      //Check if the received checksum matches the length of the string received
   b9b90:	4540      	cmp	r0, r8
   b9b92:	d02a      	beq.n	b9bea <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum); //Print to console
   b9b94:	f008 f8ee 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9b98:	4605      	mov	r5, r0
   b9b9a:	4620      	mov	r0, r4
   b9b9c:	f00a fd6f 	bl	c467e <strlen>
   b9ba0:	4643      	mov	r3, r8
   b9ba2:	1e82      	subs	r2, r0, #2
   b9ba4:	4998      	ldr	r1, [pc, #608]	; (b9e08 <_Z14processCommandPKchb+0x334>)
   b9ba6:	4628      	mov	r0, r5
    return m_attr;
   b9ba8:	4d98      	ldr	r5, [pc, #608]	; (b9e0c <_Z14processCommandPKchb+0x338>)
   b9baa:	f7ff fd69 	bl	b9680 <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b9bae:	f008 f8e1 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9bb2:	4997      	ldr	r1, [pc, #604]	; (b9e10 <_Z14processCommandPKchb+0x33c>)
   b9bb4:	f007 fc67 	bl	c1486 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){  //Print to SD Card
   b9bb8:	7c2b      	ldrb	r3, [r5, #16]
   b9bba:	b983      	cbnz	r3, b9bde <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9bbc:	4995      	ldr	r1, [pc, #596]	; (b9e14 <_Z14processCommandPKchb+0x340>)
   b9bbe:	f244 2202 	movw	r2, #16898	; 0x4202
   b9bc2:	f105 0010 	add.w	r0, r5, #16
   b9bc6:	f7ff fec9 	bl	b995c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b9bca:	4993      	ldr	r1, [pc, #588]	; (b9e18 <_Z14processCommandPKchb+0x344>)
   b9bcc:	4622      	mov	r2, r4
   b9bce:	4628      	mov	r0, r5
   b9bd0:	f7ff fd56 	bl	b9680 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b9bd4:	f105 0010 	add.w	r0, r5, #16
                logFile.close();
   b9bd8:	f002 fe2c 	bl	bc834 <_ZN7FatFile5closeEv>
   b9bdc:	e075      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b9bde:	498e      	ldr	r1, [pc, #568]	; (b9e18 <_Z14processCommandPKchb+0x344>)
   b9be0:	4622      	mov	r2, r4
   b9be2:	4628      	mov	r0, r5
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b9be4:	f7ff fd4c 	bl	b9680 <_ZN5Print8printlnfEPKcz>
   b9be8:	e06f      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        if(!strcmp(cmdStr,"ctl")){      //Control command from CC that contains data about the drive mode, target latitude and longitude, and offloading
   b9bea:	498c      	ldr	r1, [pc, #560]	; (b9e1c <_Z14processCommandPKchb+0x348>)
   b9bec:	f107 000c 	add.w	r0, r7, #12
   b9bf0:	f00a fd16 	bl	c4620 <strcmp>
   b9bf4:	2800      	cmp	r0, #0
   b9bf6:	d139      	bne.n	b9c6c <_Z14processCommandPKchb+0x198>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b9bf8:	4b89      	ldr	r3, [pc, #548]	; (b9e20 <_Z14processCommandPKchb+0x34c>)
   b9bfa:	9302      	str	r3, [sp, #8]
   b9bfc:	4b89      	ldr	r3, [pc, #548]	; (b9e24 <_Z14processCommandPKchb+0x350>)
   b9bfe:	9301      	str	r3, [sp, #4]
   b9c00:	4b89      	ldr	r3, [pc, #548]	; (b9e28 <_Z14processCommandPKchb+0x354>)
   b9c02:	498a      	ldr	r1, [pc, #552]	; (b9e2c <_Z14processCommandPKchb+0x358>)
   b9c04:	9300      	str	r3, [sp, #0]
   b9c06:	f107 0210 	add.w	r2, r7, #16
   b9c0a:	f107 031c 	add.w	r3, r7, #28
   b9c0e:	4628      	mov	r0, r5
   b9c10:	f004 fb52 	bl	be2b8 <sscanf>
            targetLat = atof(tLat);     //Convert latitude string to float
   b9c14:	f107 0010 	add.w	r0, r7, #16
   b9c18:	f00a fc5e 	bl	c44d8 <atof>
   b9c1c:	ec51 0b10 	vmov	r0, r1, d0
   b9c20:	f00a fbe6 	bl	c43f0 <__aeabi_d2f>
   b9c24:	f8df 827c 	ldr.w	r8, [pc, #636]	; b9ea4 <_Z14processCommandPKchb+0x3d0>
            targetLon = atof(tLon);     //Convert longitude string to float
   b9c28:	4e81      	ldr	r6, [pc, #516]	; (b9e30 <_Z14processCommandPKchb+0x35c>)
            targetLat = atof(tLat);     //Convert latitude string to float
   b9c2a:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);     //Convert longitude string to float
   b9c2e:	f107 001c 	add.w	r0, r7, #28
   b9c32:	f00a fc51 	bl	c44d8 <atof>
   b9c36:	ec51 0b10 	vmov	r0, r1, d0
   b9c3a:	f00a fbd9 	bl	c43f0 <__aeabi_d2f>
   b9c3e:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b9c40:	f008 f898 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9c44:	4604      	mov	r4, r0
   b9c46:	f8d8 0000 	ldr.w	r0, [r8]
   b9c4a:	f00a f881 	bl	c3d50 <__aeabi_f2d>
   b9c4e:	4602      	mov	r2, r0
   b9c50:	460b      	mov	r3, r1
   b9c52:	6830      	ldr	r0, [r6, #0]
   b9c54:	e9c7 2300 	strd	r2, r3, [r7]
   b9c58:	f00a f87a 	bl	c3d50 <__aeabi_f2d>
   b9c5c:	e9cd 0100 	strd	r0, r1, [sp]
   b9c60:	e9d7 2300 	ldrd	r2, r3, [r7]
   b9c64:	4973      	ldr	r1, [pc, #460]	; (b9e34 <_Z14processCommandPKchb+0x360>)
   b9c66:	4620      	mov	r0, r4
   b9c68:	f7ff fd0a 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b9c6c:	4972      	ldr	r1, [pc, #456]	; (b9e38 <_Z14processCommandPKchb+0x364>)
   b9c6e:	f107 000c 	add.w	r0, r7, #12
   b9c72:	f00a fcd5 	bl	c4620 <strcmp>
   b9c76:	4604      	mov	r4, r0
   b9c78:	bb60      	cbnz	r0, b9cd4 <_Z14processCommandPKchb+0x200>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};  //Get the first three characters of the data for the left target speed
   b9c7a:	782b      	ldrb	r3, [r5, #0]
   b9c7c:	743b      	strb	r3, [r7, #16]
   b9c7e:	786b      	ldrb	r3, [r5, #1]
   b9c80:	747b      	strb	r3, [r7, #17]
   b9c82:	78ab      	ldrb	r3, [r5, #2]
   b9c84:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b9c86:	78eb      	ldrb	r3, [r5, #3]
   b9c88:	773b      	strb	r3, [r7, #28]
   b9c8a:	792b      	ldrb	r3, [r5, #4]
   b9c8c:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b9c8e:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b9c92:	796b      	ldrb	r3, [r5, #5]
   b9c94:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b9c96:	f00a fc22 	bl	c44de <atoi>
   b9c9a:	4d68      	ldr	r5, [pc, #416]	; (b9e3c <_Z14processCommandPKchb+0x368>)
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b9c9c:	4e68      	ldr	r6, [pc, #416]	; (b9e40 <_Z14processCommandPKchb+0x36c>)
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b9c9e:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b9ca0:	f107 001c 	add.w	r0, r7, #28
   b9ca4:	f00a fc1b 	bl	c44de <atoi>
   b9ca8:	7030      	strb	r0, [r6, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b9caa:	f008 f863 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9cae:	7833      	ldrb	r3, [r6, #0]
   b9cb0:	782a      	ldrb	r2, [r5, #0]
   b9cb2:	4964      	ldr	r1, [pc, #400]	; (b9e44 <_Z14processCommandPKchb+0x370>)
   b9cb4:	f7ff fce4 	bl	b9680 <_ZN5Print8printlnfEPKcz>
            updateMotorControl = true;      //Set flag to indicate to updateMotors that a new speed has been received
   b9cb8:	4b63      	ldr	r3, [pc, #396]	; (b9e48 <_Z14processCommandPKchb+0x374>)
   b9cba:	2201      	movs	r2, #1
   b9cbc:	701a      	strb	r2, [r3, #0]
   b9cbe:	f003 fff5 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();         //Update timer for the watchdog that a motor speed was received from CC hub
   b9cc2:	4b62      	ldr	r3, [pc, #392]	; (b9e4c <_Z14processCommandPKchb+0x378>)
   b9cc4:	6018      	str	r0, [r3, #0]
            driveMode = 0;                  //In case we missed the switch from an autonomous to manual mode, switch to manual mode
   b9cc6:	4b58      	ldr	r3, [pc, #352]	; (b9e28 <_Z14processCommandPKchb+0x354>)
   b9cc8:	701c      	strb	r4, [r3, #0]
   b9cca:	46cd      	mov	sp, r9
}
   b9ccc:	3728      	adds	r7, #40	; 0x28
   b9cce:	46bd      	mov	sp, r7
   b9cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(!strcmp(cmdStr,"req")){     //Data Request from CChub to get the bundle of sensor data and transmit it out
   b9cd4:	495e      	ldr	r1, [pc, #376]	; (b9e50 <_Z14processCommandPKchb+0x37c>)
   b9cd6:	f107 000c 	add.w	r0, r7, #12
   b9cda:	f00a fca1 	bl	c4620 <strcmp>
   b9cde:	b918      	cbnz	r0, b9ce8 <_Z14processCommandPKchb+0x214>
            requestActive = mode;           //Set flag, as it's not possible to use 2/3 communication modes in an interrupt handler (which is where processCommand is called from)
   b9ce0:	4b5c      	ldr	r3, [pc, #368]	; (b9e54 <_Z14processCommandPKchb+0x380>)
   b9ce2:	f883 a000 	strb.w	sl, [r3]
   b9ce6:	e7f0      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"pts")){     //Command used for debugging, which allows the CChub (or any bluetooth device) to print a string to the console and to the SD card
   b9ce8:	495b      	ldr	r1, [pc, #364]	; (b9e58 <_Z14processCommandPKchb+0x384>)
   b9cea:	f107 000c 	add.w	r0, r7, #12
   b9cee:	f00a fc97 	bl	c4620 <strcmp>
   b9cf2:	b9d0      	cbnz	r0, b9d2a <_Z14processCommandPKchb+0x256>
   b9cf4:	4c45      	ldr	r4, [pc, #276]	; (b9e0c <_Z14processCommandPKchb+0x338>)
            Serial.println(dataStr);        //Print to console
   b9cf6:	f008 f83d 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9cfa:	4629      	mov	r1, r5
   b9cfc:	f007 fbc3 	bl	c1486 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){          //Print to SD card
   b9d00:	7c23      	ldrb	r3, [r4, #16]
   b9d02:	b973      	cbnz	r3, b9d22 <_Z14processCommandPKchb+0x24e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9d04:	4943      	ldr	r1, [pc, #268]	; (b9e14 <_Z14processCommandPKchb+0x340>)
   b9d06:	f244 2202 	movw	r2, #16898	; 0x4202
   b9d0a:	f104 0010 	add.w	r0, r4, #16
   b9d0e:	f7ff fe25 	bl	b995c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b9d12:	4952      	ldr	r1, [pc, #328]	; (b9e5c <_Z14processCommandPKchb+0x388>)
   b9d14:	462a      	mov	r2, r5
   b9d16:	4620      	mov	r0, r4
   b9d18:	f7ff fcb2 	bl	b9680 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b9d1c:	f104 0010 	add.w	r0, r4, #16
   b9d20:	e75a      	b.n	b9bd8 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b9d22:	494e      	ldr	r1, [pc, #312]	; (b9e5c <_Z14processCommandPKchb+0x388>)
   b9d24:	462a      	mov	r2, r5
   b9d26:	4620      	mov	r0, r4
   b9d28:	e75c      	b.n	b9be4 <_Z14processCommandPKchb+0x110>
        else if(!strcmp(cmdStr,"spc")){         //Incoming communication status from CChub, this data is used in addition to control strings to determine which communication methods are available between this bot and CChub
   b9d2a:	494d      	ldr	r1, [pc, #308]	; (b9e60 <_Z14processCommandPKchb+0x38c>)
   b9d2c:	f107 000c 	add.w	r0, r7, #12
   b9d30:	f00a fc76 	bl	c4620 <strcmp>
   b9d34:	b920      	cbnz	r0, b9d40 <_Z14processCommandPKchb+0x26c>
   b9d36:	f003 ffb9 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();          //Update timer with the current time, and the watchdog will automatically set the flags based on this timer and the current time
   b9d3a:	4b4a      	ldr	r3, [pc, #296]	; (b9e64 <_Z14processCommandPKchb+0x390>)
   b9d3c:	6018      	str	r0, [r3, #0]
   b9d3e:	e7c4      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"hwa")){         //Hello-world acknowledge command from the CCHub, which will bring this bot out of pairing mode on startup
   b9d40:	4949      	ldr	r1, [pc, #292]	; (b9e68 <_Z14processCommandPKchb+0x394>)
   b9d42:	f107 000c 	add.w	r0, r7, #12
   b9d46:	f00a fc6b 	bl	c4620 <strcmp>
   b9d4a:	b910      	cbnz	r0, b9d52 <_Z14processCommandPKchb+0x27e>
            waitForConnection = false;          //Setup loop waits for this to be set true before moving into main loop
   b9d4c:	4b47      	ldr	r3, [pc, #284]	; (b9e6c <_Z14processCommandPKchb+0x398>)
   b9d4e:	7018      	strb	r0, [r3, #0]
   b9d50:	e7bb      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"dmp")){         //Enter SD Card "Dump Mode" for Bluetooth offloading
   b9d52:	4947      	ldr	r1, [pc, #284]	; (b9e70 <_Z14processCommandPKchb+0x39c>)
   b9d54:	f107 000c 	add.w	r0, r7, #12
   b9d58:	f00a fc62 	bl	c4620 <strcmp>
   b9d5c:	b978      	cbnz	r0, b9d7e <_Z14processCommandPKchb+0x2aa>
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b9d5e:	4b45      	ldr	r3, [pc, #276]	; (b9e74 <_Z14processCommandPKchb+0x3a0>)
            status.setSpeed(LED_SPEED_FAST);
   b9d60:	4845      	ldr	r0, [pc, #276]	; (b9e78 <_Z14processCommandPKchb+0x3a4>)
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b9d62:	2201      	movs	r2, #1
   b9d64:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b9d66:	4b44      	ldr	r3, [pc, #272]	; (b9e78 <_Z14processCommandPKchb+0x3a4>)
   b9d68:	7c5a      	ldrb	r2, [r3, #17]
   b9d6a:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b9d6c:	bf1c      	itt	ne
   b9d6e:	2202      	movne	r2, #2
   b9d70:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b9d72:	211e      	movs	r1, #30
    d_.color = color;
   b9d74:	22ff      	movs	r2, #255	; 0xff
   b9d76:	615a      	str	r2, [r3, #20]
   b9d78:	f7ff fd6c 	bl	b9854 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b9d7c:	e7a5      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"egp")){         //Emulated GPS point for testing purposes. Set the target latitude and longitude which allows testing of the distance and bearing functions for the GPS and compass
   b9d7e:	493f      	ldr	r1, [pc, #252]	; (b9e7c <_Z14processCommandPKchb+0x3a8>)
   b9d80:	f107 000c 	add.w	r0, r7, #12
   b9d84:	f00a fc4c 	bl	c4620 <strcmp>
   b9d88:	b9e0      	cbnz	r0, b9dc4 <_Z14processCommandPKchb+0x2f0>
            sscanf(dataStr,"%s %s",tLat,tLon);      //Scan in the target latitude and longitude from the data string
   b9d8a:	f107 0210 	add.w	r2, r7, #16
   b9d8e:	f107 031c 	add.w	r3, r7, #28
   b9d92:	493b      	ldr	r1, [pc, #236]	; (b9e80 <_Z14processCommandPKchb+0x3ac>)
   b9d94:	4628      	mov	r0, r5
   b9d96:	f004 fa8f 	bl	be2b8 <sscanf>
            latitude = atof(tLat);              //Convert strings with latitude and longitude to a float variable
   b9d9a:	f107 0010 	add.w	r0, r7, #16
   b9d9e:	f00a fb9b 	bl	c44d8 <atof>
   b9da2:	ec51 0b10 	vmov	r0, r1, d0
   b9da6:	f00a fb23 	bl	c43f0 <__aeabi_d2f>
   b9daa:	4b36      	ldr	r3, [pc, #216]	; (b9e84 <_Z14processCommandPKchb+0x3b0>)
   b9dac:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b9dae:	f107 001c 	add.w	r0, r7, #28
   b9db2:	f00a fb91 	bl	c44d8 <atof>
   b9db6:	ec51 0b10 	vmov	r0, r1, d0
   b9dba:	f00a fb19 	bl	c43f0 <__aeabi_d2f>
   b9dbe:	4b32      	ldr	r3, [pc, #200]	; (b9e88 <_Z14processCommandPKchb+0x3b4>)
   b9dc0:	6018      	str	r0, [r3, #0]
   b9dc2:	e782      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"stp")){         //Stop Command (Emergency stop for motors)
   b9dc4:	4931      	ldr	r1, [pc, #196]	; (b9e8c <_Z14processCommandPKchb+0x3b8>)
   b9dc6:	f107 000c 	add.w	r0, r7, #12
   b9dca:	f00a fc29 	bl	c4620 <strcmp>
   b9dce:	2800      	cmp	r0, #0
   b9dd0:	f47f af7b 	bne.w	b9cca <_Z14processCommandPKchb+0x1f6>
            driveMode = 0;                      //Set drive mode back to manual mode
   b9dd4:	4b14      	ldr	r3, [pc, #80]	; (b9e28 <_Z14processCommandPKchb+0x354>)
   b9dd6:	7018      	strb	r0, [r3, #0]
            setLSpeed = 90;                     //Stop motors
   b9dd8:	4b18      	ldr	r3, [pc, #96]	; (b9e3c <_Z14processCommandPKchb+0x368>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b9dda:	482d      	ldr	r0, [pc, #180]	; (b9e90 <_Z14processCommandPKchb+0x3bc>)
            setLSpeed = 90;                     //Stop motors
   b9ddc:	245a      	movs	r4, #90	; 0x5a
   b9dde:	701c      	strb	r4, [r3, #0]
            setRSpeed = 90;                 
   b9de0:	4b17      	ldr	r3, [pc, #92]	; (b9e40 <_Z14processCommandPKchb+0x36c>)
   b9de2:	701c      	strb	r4, [r3, #0]
            leftMotorSpeed = 90;                //Immediately stop motors (no ramp)
   b9de4:	4b2b      	ldr	r3, [pc, #172]	; (b9e94 <_Z14processCommandPKchb+0x3c0>)
   b9de6:	701c      	strb	r4, [r3, #0]
            rightMotorSpeed = 90;
   b9de8:	4b2b      	ldr	r3, [pc, #172]	; (b9e98 <_Z14processCommandPKchb+0x3c4>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b9dea:	4621      	mov	r1, r4
            rightMotorSpeed = 90;
   b9dec:	701c      	strb	r4, [r3, #0]
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b9dee:	f007 fbbc 	bl	c156a <_ZN5Servo5writeEi>
            ESCR.write(90);
   b9df2:	482a      	ldr	r0, [pc, #168]	; (b9e9c <_Z14processCommandPKchb+0x3c8>)
   b9df4:	4621      	mov	r1, r4
   b9df6:	f007 fbb8 	bl	c156a <_ZN5Servo5writeEi>
            stopActive = true;                  //Set flag to indicate that stop was hit
   b9dfa:	4b29      	ldr	r3, [pc, #164]	; (b9ea0 <_Z14processCommandPKchb+0x3cc>)
   b9dfc:	2201      	movs	r2, #1
   b9dfe:	701a      	strb	r2, [r3, #0]
   b9e00:	e763      	b.n	b9cca <_Z14processCommandPKchb+0x1f6>
   b9e02:	bf00      	nop
   b9e04:	000c7641 	.word	0x000c7641
   b9e08:	000c7656 	.word	0x000c7656
   b9e0c:	2003de7c 	.word	0x2003de7c
   b9e10:	000c7673 	.word	0x000c7673
   b9e14:	2003ddce 	.word	0x2003ddce
   b9e18:	000c7694 	.word	0x000c7694
   b9e1c:	000c76c0 	.word	0x000c76c0
   b9e20:	2003e580 	.word	0x2003e580
   b9e24:	2003ded5 	.word	0x2003ded5
   b9e28:	2003ddad 	.word	0x2003ddad
   b9e2c:	000c76c4 	.word	0x000c76c4
   b9e30:	2003e5d4 	.word	0x2003e5d4
   b9e34:	000c76d3 	.word	0x000c76d3
   b9e38:	000c76f3 	.word	0x000c76f3
   b9e3c:	2003e560 	.word	0x2003e560
   b9e40:	2003e561 	.word	0x2003e561
   b9e44:	000c76f7 	.word	0x000c76f7
   b9e48:	2003e5ec 	.word	0x2003e5ec
   b9e4c:	2003ddf0 	.word	0x2003ddf0
   b9e50:	000c7723 	.word	0x000c7723
   b9e54:	2003e0b8 	.word	0x2003e0b8
   b9e58:	000c7727 	.word	0x000c7727
   b9e5c:	000c772b 	.word	0x000c772b
   b9e60:	000c774e 	.word	0x000c774e
   b9e64:	2003ddf4 	.word	0x2003ddf4
   b9e68:	000c7752 	.word	0x000c7752
   b9e6c:	2003e5ed 	.word	0x2003e5ed
   b9e70:	000c7756 	.word	0x000c7756
   b9e74:	2003e0b0 	.word	0x2003e0b0
   b9e78:	2003e588 	.word	0x2003e588
   b9e7c:	000c775a 	.word	0x000c775a
   b9e80:	000c775e 	.word	0x000c775e
   b9e84:	2003ddfc 	.word	0x2003ddfc
   b9e88:	2003ded8 	.word	0x2003ded8
   b9e8c:	000c7764 	.word	0x000c7764
   b9e90:	2003dd44 	.word	0x2003dd44
   b9e94:	2003de1c 	.word	0x2003de1c
   b9e98:	2003e0b9 	.word	0x2003e0b9
   b9e9c:	2003dd54 	.word	0x2003dd54
   b9ea0:	2003e5c9 	.word	0x2003e5c9
   b9ea4:	2003e5d0 	.word	0x2003e5d0

000b9ea8 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b9ea8:	b510      	push	{r4, lr}
   b9eaa:	460c      	mov	r4, r1
    processCommand(data, 4,false);      //Pass received string directly to the processCommand directory
   b9eac:	2200      	movs	r2, #0
   b9eae:	2104      	movs	r1, #4
   b9eb0:	4620      	mov	r0, r4
   b9eb2:	f7ff fe0f 	bl	b9ad4 <_Z14processCommandPKchb>
    if(logMessages){                    //Log message to the SD card for later debugging
   b9eb6:	4b0b      	ldr	r3, [pc, #44]	; (b9ee4 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b9eb8:	781b      	ldrb	r3, [r3, #0]
   b9eba:	b193      	cbz	r3, b9ee2 <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b9ebc:	480a      	ldr	r0, [pc, #40]	; (b9ee8 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9ebe:	7c03      	ldrb	r3, [r0, #16]
   b9ec0:	b92b      	cbnz	r3, b9ece <_Z13cmdLTEHandlerPKcS0_+0x26>
   b9ec2:	490a      	ldr	r1, [pc, #40]	; (b9eec <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b9ec4:	f244 2202 	movw	r2, #16898	; 0x4202
   b9ec8:	3010      	adds	r0, #16
   b9eca:	f7ff fd47 	bl	b995c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b9ece:	4622      	mov	r2, r4
   b9ed0:	4907      	ldr	r1, [pc, #28]	; (b9ef0 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b9ed2:	4805      	ldr	r0, [pc, #20]	; (b9ee8 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b9ed4:	f7ff fbd4 	bl	b9680 <_ZN5Print8printlnfEPKcz>
}
   b9ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b9edc:	4805      	ldr	r0, [pc, #20]	; (b9ef4 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b9ede:	f002 bca9 	b.w	bc834 <_ZN7FatFile5closeEv>
}
   b9ee2:	bd10      	pop	{r4, pc}
   b9ee4:	2003ded4 	.word	0x2003ded4
   b9ee8:	2003de7c 	.word	0x2003de7c
   b9eec:	2003ddce 	.word	0x2003ddce
   b9ef0:	000c7768 	.word	0x000c7768
   b9ef4:	2003de8c 	.word	0x2003de8c

000b9ef8 <_Z15LTEInputCommand6String>:
    }
    else logFile.println(message);
}

//Particle function for processing a debug string, for testing things like an emulated GPS point
int LTEInputCommand(String cmd){
   b9ef8:	b500      	push	{lr}
   b9efa:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b9efc:	2300      	movs	r3, #0
   b9efe:	2264      	movs	r2, #100	; 0x64
   b9f00:	a901      	add	r1, sp, #4
   b9f02:	f007 fd85 	bl	c1a10 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b9f06:	2104      	movs	r1, #4
   b9f08:	2200      	movs	r2, #0
   b9f0a:	eb0d 0001 	add.w	r0, sp, r1
   b9f0e:	f7ff fde1 	bl	b9ad4 <_Z14processCommandPKchb>
    if(logMessages){
   b9f12:	4b0c      	ldr	r3, [pc, #48]	; (b9f44 <_Z15LTEInputCommand6String+0x4c>)
   b9f14:	781b      	ldrb	r3, [r3, #0]
   b9f16:	b183      	cbz	r3, b9f3a <_Z15LTEInputCommand6String+0x42>
   b9f18:	480b      	ldr	r0, [pc, #44]	; (b9f48 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9f1a:	7c03      	ldrb	r3, [r0, #16]
   b9f1c:	b92b      	cbnz	r3, b9f2a <_Z15LTEInputCommand6String+0x32>
   b9f1e:	490b      	ldr	r1, [pc, #44]	; (b9f4c <_Z15LTEInputCommand6String+0x54>)
   b9f20:	f244 2202 	movw	r2, #16898	; 0x4202
   b9f24:	3010      	adds	r0, #16
   b9f26:	f7ff fd19 	bl	b995c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b9f2a:	4909      	ldr	r1, [pc, #36]	; (b9f50 <_Z15LTEInputCommand6String+0x58>)
   b9f2c:	4806      	ldr	r0, [pc, #24]	; (b9f48 <_Z15LTEInputCommand6String+0x50>)
   b9f2e:	aa01      	add	r2, sp, #4
   b9f30:	f7ff fba6 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b9f34:	4807      	ldr	r0, [pc, #28]	; (b9f54 <_Z15LTEInputCommand6String+0x5c>)
   b9f36:	f002 fc7d 	bl	bc834 <_ZN7FatFile5closeEv>
    }
    return 1;
   b9f3a:	2001      	movs	r0, #1
   b9f3c:	b01b      	add	sp, #108	; 0x6c
   b9f3e:	f85d fb04 	ldr.w	pc, [sp], #4
   b9f42:	bf00      	nop
   b9f44:	2003ded4 	.word	0x2003ded4
   b9f48:	2003de7c 	.word	0x2003de7c
   b9f4c:	2003ddce 	.word	0x2003ddce
   b9f50:	000c7768 	.word	0x000c7768
   b9f54:	2003de8c 	.word	0x2003de8c

000b9f58 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b9f58:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];                                              //Create character array for the received command
   b9f5a:	f101 0308 	add.w	r3, r1, #8
   b9f5e:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b9f62:	af00      	add	r7, sp, #0
    char btBuf[len+1];                                              //Create character array for the received command
   b9f64:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b9f68:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];       //Convert byte array into character array
   b9f6a:	460a      	mov	r2, r1
   b9f6c:	4601      	mov	r1, r0
   b9f6e:	4668      	mov	r0, sp
   b9f70:	f00a fad2 	bl	c4518 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b9f74:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];                                              //Create character array for the received command
   b9f78:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b9f7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9f7e:	b113      	cbz	r3, b9f86 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b9f80:	2300      	movs	r3, #0
   b9f82:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b9f86:	f007 fef5 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9f8a:	4916      	ldr	r1, [pc, #88]	; (b9fe4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b9f8c:	f007 fa7b 	bl	c1486 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);                                          //Print out command for debugging purposes
   b9f90:	f007 fef0 	bl	c1d74 <_Z16_fetch_usbserialv>
   b9f94:	4629      	mov	r1, r5
   b9f96:	f007 fa76 	bl	c1486 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);                                   //Process the command received over BLE using the dictionary
   b9f9a:	2201      	movs	r2, #1
   b9f9c:	4611      	mov	r1, r2
   b9f9e:	4628      	mov	r0, r5
   b9fa0:	f7ff fd98 	bl	b9ad4 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();    //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b9fa4:	782b      	ldrb	r3, [r5, #0]
   b9fa6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b9faa:	2b41      	cmp	r3, #65	; 0x41
   b9fac:	d103      	bne.n	b9fb6 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b9fae:	f003 fe7d 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   b9fb2:	4b0d      	ldr	r3, [pc, #52]	; (b9fe8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b9fb4:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b9fb6:	4b0d      	ldr	r3, [pc, #52]	; (b9fec <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b9fb8:	781b      	ldrb	r3, [r3, #0]
   b9fba:	b183      	cbz	r3, b9fde <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b9fbc:	480c      	ldr	r0, [pc, #48]	; (b9ff0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b9fbe:	7c03      	ldrb	r3, [r0, #16]
   b9fc0:	b92b      	cbnz	r3, b9fce <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b9fc2:	490c      	ldr	r1, [pc, #48]	; (b9ff4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b9fc4:	f244 2202 	movw	r2, #16898	; 0x4202
   b9fc8:	3010      	adds	r0, #16
   b9fca:	f7ff fcc7 	bl	b995c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b9fce:	490a      	ldr	r1, [pc, #40]	; (b9ff8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b9fd0:	4807      	ldr	r0, [pc, #28]	; (b9ff0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b9fd2:	462a      	mov	r2, r5
   b9fd4:	f7ff fb54 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b9fd8:	4808      	ldr	r0, [pc, #32]	; (b9ffc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b9fda:	f002 fc2b 	bl	bc834 <_ZN7FatFile5closeEv>
}
   b9fde:	46bd      	mov	sp, r7
   b9fe0:	bdb0      	pop	{r4, r5, r7, pc}
   b9fe2:	bf00      	nop
   b9fe4:	000c7788 	.word	0x000c7788
   b9fe8:	2003dd3c 	.word	0x2003dd3c
   b9fec:	2003ded4 	.word	0x2003ded4
   b9ff0:	2003de7c 	.word	0x2003de7c
   b9ff4:	2003ddce 	.word	0x2003ddce
   b9ff8:	000c7798 	.word	0x000c7798
   b9ffc:	2003de8c 	.word	0x2003de8c

000ba000 <_Z9setupXBeev>:
void setupXBee(){
   ba000:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   ba002:	f008 f863 	bl	c20cc <_Z22__fetch_global_Serial1v>
   ba006:	4908      	ldr	r1, [pc, #32]	; (ba028 <_Z9setupXBeev+0x28>)
   ba008:	f7fa faae 	bl	b4568 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   ba00c:	2014      	movs	r0, #20
   ba00e:	f004 f9a7 	bl	be360 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   ba012:	f008 f85b 	bl	c20cc <_Z22__fetch_global_Serial1v>
   ba016:	4905      	ldr	r1, [pc, #20]	; (ba02c <_Z9setupXBeev+0x2c>)
   ba018:	f7fa faa6 	bl	b4568 <_ZN5Print6printfEPKcz>
}
   ba01c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   ba020:	2014      	movs	r0, #20
   ba022:	f004 b99d 	b.w	be360 <delay>
   ba026:	bf00      	nop
   ba028:	000c7f1a 	.word	0x000c7f1a
   ba02c:	000c6723 	.word	0x000c6723

000ba030 <_Z8setupGPSv>:
void setupGPS(){
   ba030:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   ba032:	4c15      	ldr	r4, [pc, #84]	; (ba088 <_Z8setupGPSv+0x58>)
   ba034:	2301      	movs	r3, #1
   ba036:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   ba038:	f008 f808 	bl	c204c <_Z19__fetch_global_Wirev>
   ba03c:	2300      	movs	r3, #0
   ba03e:	4601      	mov	r1, r0
   ba040:	9300      	str	r3, [sp, #0]
   ba042:	4812      	ldr	r0, [pc, #72]	; (ba08c <_Z8setupGPSv+0x5c>)
   ba044:	f240 434c 	movw	r3, #1100	; 0x44c
   ba048:	2242      	movs	r2, #66	; 0x42
   ba04a:	f7ff f941 	bl	b92d0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   ba04e:	b928      	cbnz	r0, ba05c <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   ba050:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   ba052:	f007 fe8f 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba056:	490e      	ldr	r1, [pc, #56]	; (ba090 <_Z8setupGPSv+0x60>)
   ba058:	f007 fa15 	bl	c1486 <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   ba05c:	f240 424c 	movw	r2, #1100	; 0x44c
   ba060:	2101      	movs	r1, #1
   ba062:	480a      	ldr	r0, [pc, #40]	; (ba08c <_Z8setupGPSv+0x5c>)
   ba064:	f7ff f868 	bl	b9138 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   ba068:	f240 434c 	movw	r3, #1100	; 0x44c
   ba06c:	2201      	movs	r2, #1
   ba06e:	2100      	movs	r1, #0
   ba070:	4806      	ldr	r0, [pc, #24]	; (ba08c <_Z8setupGPSv+0x5c>)
   ba072:	f7ff f841 	bl	b90f8 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   ba076:	f007 ffe9 	bl	c204c <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   ba07a:	4906      	ldr	r1, [pc, #24]	; (ba094 <_Z8setupGPSv+0x64>)
}
   ba07c:	b002      	add	sp, #8
   ba07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba082:	f005 bec1 	b.w	bfe08 <_ZN7TwoWire8setSpeedEm>
   ba086:	bf00      	nop
   ba088:	2003dd64 	.word	0x2003dd64
   ba08c:	2003df30 	.word	0x2003df30
   ba090:	000c77b8 	.word	0x000c77b8
   ba094:	00061a80 	.word	0x00061a80

000ba098 <setup>:
void setup(){
   ba098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   ba09c:	4bc6      	ldr	r3, [pc, #792]	; (ba3b8 <setup+0x320>)
    led_set_status_active(&d_, active, nullptr);
   ba09e:	48c7      	ldr	r0, [pc, #796]	; (ba3bc <setup+0x324>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   ba0a0:	7c1a      	ldrb	r2, [r3, #16]
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba0a2:	4fc7      	ldr	r7, [pc, #796]	; (ba3c0 <setup+0x328>)
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba0a4:	4ec7      	ldr	r6, [pc, #796]	; (ba3c4 <setup+0x32c>)
   ba0a6:	f002 0203 	and.w	r2, r2, #3
   ba0aa:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   ba0ae:	741a      	strb	r2, [r3, #16]
    d_.color = color;
   ba0b0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   ba0b4:	615a      	str	r2, [r3, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   ba0b6:	7c5a      	ldrb	r2, [r3, #17]
   ba0b8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   ba0ba:	bf18      	it	ne
   ba0bc:	2201      	movne	r2, #1
void setup(){
   ba0be:	b095      	sub	sp, #84	; 0x54
   ba0c0:	bf18      	it	ne
   ba0c2:	745a      	strbne	r2, [r3, #17]
    led_set_status_active(&d_, active, nullptr);
   ba0c4:	2101      	movs	r1, #1
   ba0c6:	2200      	movs	r2, #0
   ba0c8:	f003 ffe8 	bl	be09c <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);                          //Configure the pin for the Atlas sensors as an output and pull low to enable power to the Atlas sensors
   ba0cc:	2101      	movs	r1, #1
   ba0ce:	2002      	movs	r0, #2
   ba0d0:	f007 ff50 	bl	c1f74 <pinMode>
    digitalWrite(SENSE_EN,LOW);                     
   ba0d4:	2100      	movs	r1, #0
   ba0d6:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   ba0d8:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);                     
   ba0da:	f007 ff5c 	bl	c1f96 <digitalWrite>
    pinMode(PWR_BUT, INPUT);                            //Configure power button input as an input, no pull as the resistor divider will handle pin floating
   ba0de:	2100      	movs	r1, #0
   ba0e0:	2012      	movs	r0, #18
   ba0e2:	f007 ff47 	bl	c1f74 <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   ba0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   ba0ea:	4622      	mov	r2, r4
   ba0ec:	49b6      	ldr	r1, [pc, #728]	; (ba3c8 <setup+0x330>)
   ba0ee:	9400      	str	r4, [sp, #0]
   ba0f0:	2012      	movs	r0, #18
   ba0f2:	f005 fecf 	bl	bfe94 <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(BAT_LEAK_DET,INPUT);                        //Configure the battery leak detect output of the PCB to be an input with no pull. External pull on PCB
   ba0f6:	4621      	mov	r1, r4
   ba0f8:	200f      	movs	r0, #15
   ba0fa:	f007 ff3b 	bl	c1f74 <pinMode>
   ba0fe:	f003 fdd5 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba102:	4ab2      	ldr	r2, [pc, #712]	; (ba3cc <setup+0x334>)
   ba104:	235a      	movs	r3, #90	; 0x5a
   ba106:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba108:	4ab1      	ldr	r2, [pc, #708]	; (ba3d0 <setup+0x338>)
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba10a:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   ba10c:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   ba110:	7033      	strb	r3, [r6, #0]
   ba112:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   ba114:	2106      	movs	r1, #6
   ba116:	e9cd 4800 	strd	r4, r8, [sp]
   ba11a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   ba11e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba122:	4605      	mov	r5, r0
   ba124:	48ab      	ldr	r0, [pc, #684]	; (ba3d4 <setup+0x33c>)
   ba126:	f007 fa5d 	bl	c15e4 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   ba12a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   ba12e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba132:	e9cd 4800 	strd	r4, r8, [sp]
   ba136:	2105      	movs	r1, #5
   ba138:	48a7      	ldr	r0, [pc, #668]	; (ba3d8 <setup+0x340>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   ba13a:	f8df 834c 	ldr.w	r8, [pc, #844]	; ba488 <setup+0x3f0>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   ba13e:	f007 fa51 	bl	c15e4 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   ba142:	7839      	ldrb	r1, [r7, #0]
   ba144:	48a3      	ldr	r0, [pc, #652]	; (ba3d4 <setup+0x33c>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   ba146:	4fa5      	ldr	r7, [pc, #660]	; (ba3dc <setup+0x344>)
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   ba148:	f007 fa0f 	bl	c156a <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   ba14c:	7831      	ldrb	r1, [r6, #0]
   ba14e:	48a2      	ldr	r0, [pc, #648]	; (ba3d8 <setup+0x340>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   ba150:	4ea3      	ldr	r6, [pc, #652]	; (ba3e0 <setup+0x348>)
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   ba152:	f007 fa0a 	bl	c156a <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   ba156:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   ba15a:	f004 f901 	bl	be360 <delay>
    BLE.on();                                   //Turn on Bluetooth
   ba15e:	f004 fc63 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba162:	f004 fcab 	bl	beabc <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);                          //Max transmitting power
   ba166:	f004 fc5f 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba16a:	2108      	movs	r1, #8
   ba16c:	f004 fcad 	bl	beaca <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   ba170:	f007 fe00 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba174:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   ba178:	f007 fdec 	bl	c1d54 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   ba17c:	f007 ffa6 	bl	c20cc <_Z22__fetch_global_Serial1v>
   ba180:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   ba184:	f007 fd8e 	bl	c1ca4 <_ZN11USARTSerial5beginEm>
    setupXBee();                                //Setup XBee module
   ba188:	f7ff ff3a 	bl	ba000 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   ba18c:	f7ff ff50 	bl	ba030 <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   ba190:	2301      	movs	r3, #1
   ba192:	4994      	ldr	r1, [pc, #592]	; (ba3e4 <setup+0x34c>)
   ba194:	4894      	ldr	r0, [pc, #592]	; (ba3e8 <setup+0x350>)
   ba196:	4622      	mov	r2, r4
   ba198:	e9cd 4400 	strd	r4, r4, [sp]
   ba19c:	f003 fff4 	bl	be188 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   ba1a0:	4992      	ldr	r1, [pc, #584]	; (ba3ec <setup+0x354>)
   ba1a2:	4a93      	ldr	r2, [pc, #588]	; (ba3f0 <setup+0x358>)
   ba1a4:	4893      	ldr	r0, [pc, #588]	; (ba3f4 <setup+0x35c>)
   ba1a6:	f005 fb50 	bl	bf84a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   ba1aa:	4b93      	ldr	r3, [pc, #588]	; (ba3f8 <setup+0x360>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   ba1ac:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   ba1b0:	701c      	strb	r4, [r3, #0]
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   ba1b2:	f886 9000 	strb.w	r9, [r6]
   ba1b6:	f003 fd79 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   ba1ba:	4b90      	ldr	r3, [pc, #576]	; (ba3fc <setup+0x364>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   ba1bc:	f888 9000 	strb.w	r9, [r8]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   ba1c0:	6018      	str	r0, [r3, #0]
   ba1c2:	4b8f      	ldr	r3, [pc, #572]	; (ba400 <setup+0x368>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   ba1c4:	f887 9000 	strb.w	r9, [r7]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   ba1c8:	6018      	str	r0, [r3, #0]
   ba1ca:	4b8e      	ldr	r3, [pc, #568]	; (ba404 <setup+0x36c>)
   ba1cc:	6018      	str	r0, [r3, #0]
   ba1ce:	4b8e      	ldr	r3, [pc, #568]	; (ba408 <setup+0x370>)
   ba1d0:	6018      	str	r0, [r3, #0]
   ba1d2:	4b8e      	ldr	r3, [pc, #568]	; (ba40c <setup+0x374>)
   ba1d4:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;                             //Initialize timer for checking that XBee is available
   ba1d6:	4b8e      	ldr	r3, [pc, #568]	; (ba410 <setup+0x378>)
   ba1d8:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;                              //Initialize timer for checking that BLE is available
   ba1da:	4b8e      	ldr	r3, [pc, #568]	; (ba414 <setup+0x37c>)
   ba1dc:	601c      	str	r4, [r3, #0]
    dataWait = false;                           //Set false initially to first request data to sensors before attempting to read data
   ba1de:	4b8e      	ldr	r3, [pc, #568]	; (ba418 <setup+0x380>)
   ba1e0:	701c      	strb	r4, [r3, #0]
    offloadMode = false;                        //Set offload to false, otherwise could try to offload with no CC connected
   ba1e2:	4b8e      	ldr	r3, [pc, #568]	; (ba41c <setup+0x384>)
   ba1e4:	701c      	strb	r4, [r3, #0]
    requestActive = false;                      //Set request to false, otherwise we are trying to send sensor data with no CC connected
   ba1e6:	4b8e      	ldr	r3, [pc, #568]	; (ba420 <setup+0x388>)
   ba1e8:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;            //Initialize counter for LTE backup messages. This counter limits the number of LTE messages being sent so we don't burn through the data limit
   ba1ea:	4b8e      	ldr	r3, [pc, #568]	; (ba424 <setup+0x38c>)
   ba1ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   ba1f0:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;                     //Initially assume GPS and compass are not available until we receive the first point from each
   ba1f2:	4b8d      	ldr	r3, [pc, #564]	; (ba428 <setup+0x390>)
   ba1f4:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;                     //Initially set the shutdown state to false until the button is pressed and held for 3 seconds, then shut off
   ba1f6:	4b8d      	ldr	r3, [pc, #564]	; (ba42c <setup+0x394>)
   ba1f8:	701c      	strb	r4, [r3, #0]
    stopActive = false;                         //Initially disable stop, otherwise user might not know that the stop button must be pressed
   ba1fa:	4b8d      	ldr	r3, [pc, #564]	; (ba430 <setup+0x398>)
   ba1fc:	701c      	strb	r4, [r3, #0]
    warnedBattLeak = false;                     //Initially set false so at least one leak message will be sent in the case of a leak
   ba1fe:	4b8d      	ldr	r3, [pc, #564]	; (ba434 <setup+0x39c>)
   ba200:	701c      	strb	r4, [r3, #0]
    warnedLeak = false;                         //Initially set false so at least one leak message will be sent in the case of a leak
   ba202:	4b8d      	ldr	r3, [pc, #564]	; (ba438 <setup+0x3a0>)
   ba204:	701c      	strb	r4, [r3, #0]
    battPercent = 50;                           //Initially set battery reading to 50% until we read the actual voltage so the LED states are not affected 
   ba206:	4b8d      	ldr	r3, [pc, #564]	; (ba43c <setup+0x3a4>)
   ba208:	2232      	movs	r2, #50	; 0x32
   ba20a:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add characteristic for the stream of transmitting out data over BLE
   ba20c:	f004 fc0c 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba210:	4a8b      	ldr	r2, [pc, #556]	; (ba440 <setup+0x3a8>)
   ba212:	4601      	mov	r1, r0
   ba214:	a80f      	add	r0, sp, #60	; 0x3c
   ba216:	f005 f961 	bl	bf4dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   ba21a:	a80f      	add	r0, sp, #60	; 0x3c
   ba21c:	f004 fd11 	bl	bec42 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);    //Add characteristic for the stream of receiving data from BLE
   ba220:	f004 fc02 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba224:	4a87      	ldr	r2, [pc, #540]	; (ba444 <setup+0x3ac>)
   ba226:	4601      	mov	r1, r0
   ba228:	a80f      	add	r0, sp, #60	; 0x3c
   ba22a:	f005 f957 	bl	bf4dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   ba22e:	a80f      	add	r0, sp, #60	; 0x3c
   ba230:	f004 fd07 	bl	bec42 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);   //Add characteristic for offloading stream for BLE
   ba234:	f004 fbf8 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba238:	4a83      	ldr	r2, [pc, #524]	; (ba448 <setup+0x3b0>)
   ba23a:	4601      	mov	r1, r0
   ba23c:	a80f      	add	r0, sp, #60	; 0x3c
   ba23e:	f005 f94d 	bl	bf4dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   ba242:	a80f      	add	r0, sp, #60	; 0x3c
   ba244:	f004 fcfd 	bl	bec42 <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);    //Add BLE Characteristics for BLE serial debug stream
   ba248:	f004 fbee 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba24c:	4a7f      	ldr	r2, [pc, #508]	; (ba44c <setup+0x3b4>)
   ba24e:	4601      	mov	r1, r0
   ba250:	a80f      	add	r0, sp, #60	; 0x3c
   ba252:	f005 f943 	bl	bf4dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   ba256:	a80f      	add	r0, sp, #60	; 0x3c
   ba258:	f004 fcf3 	bl	bec42 <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;                  //Put this bot's bot number in the advertising data so other bots can see it's ID without connecting to it
   ba25c:	4b7c      	ldr	r3, [pc, #496]	; (ba450 <setup+0x3b8>)
   ba25e:	f883 9000 	strb.w	r9, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   ba262:	4b7c      	ldr	r3, [pc, #496]	; (ba454 <setup+0x3bc>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   ba264:	a80f      	add	r0, sp, #60	; 0x3c
   ba266:	6819      	ldr	r1, [r3, #0]
   ba268:	f004 fa90 	bl	be78c <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   ba26c:	a80f      	add	r0, sp, #60	; 0x3c
   ba26e:	f004 f9ef 	bl	be650 <_ZNK8particle7BleUuid4typeEv>
   ba272:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   ba274:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   ba276:	f1b9 0f00 	cmp.w	r9, #0
   ba27a:	f040 8134 	bne.w	ba4e6 <setup+0x44e>
            uint16_t uuid16 = tempUUID.shorted();
   ba27e:	f004 fa03 	bl	be688 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   ba282:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   ba286:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   ba28a:	2302      	movs	r3, #2
   ba28c:	aa0b      	add	r2, sp, #44	; 0x2c
   ba28e:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   ba290:	4871      	ldr	r0, [pc, #452]	; (ba458 <setup+0x3c0>)
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   ba292:	4c72      	ldr	r4, [pc, #456]	; (ba45c <setup+0x3c4>)
   ba294:	f004 fe00 	bl	bee98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   ba298:	2300      	movs	r3, #0
   ba29a:	496d      	ldr	r1, [pc, #436]	; (ba450 <setup+0x3b8>)
   ba29c:	486e      	ldr	r0, [pc, #440]	; (ba458 <setup+0x3c0>)
   ba29e:	2208      	movs	r2, #8
   ba2a0:	f004 fe18 	bl	beed4 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   ba2a4:	f004 fbc0 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   ba2a8:	2200      	movs	r2, #0
   ba2aa:	496b      	ldr	r1, [pc, #428]	; (ba458 <setup+0x3c0>)
   ba2ac:	f004 fc6d 	bl	beb8a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   ba2b0:	f007 fecc 	bl	c204c <_Z19__fetch_global_Wirev>
   ba2b4:	f005 fdac 	bl	bfe10 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   ba2b8:	f007 fec8 	bl	c204c <_Z19__fetch_global_Wirev>
   ba2bc:	4968      	ldr	r1, [pc, #416]	; (ba460 <setup+0x3c8>)
   ba2be:	f005 fda3 	bl	bfe08 <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   ba2c2:	2301      	movs	r3, #1
   ba2c4:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {                // hardware I2C mode, can pass in address & alt Wire
   ba2c6:	f007 fec1 	bl	c204c <_Z19__fetch_global_Wirev>
   ba2ca:	211c      	movs	r1, #28
   ba2cc:	4602      	mov	r2, r0
   ba2ce:	4865      	ldr	r0, [pc, #404]	; (ba464 <setup+0x3cc>)
   ba2d0:	f7fa f8af 	bl	b4432 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   ba2d4:	2800      	cmp	r0, #0
   ba2d6:	f040 810d 	bne.w	ba4f4 <setup+0x45c>
        CompassAvail = false;                   //Couldn't connect over I2C, so assume the compass is unavailable. Flag disables Autonomous/Sentry mode
   ba2da:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   ba2dc:	f007 fd4a 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba2e0:	4961      	ldr	r1, [pc, #388]	; (ba468 <setup+0x3d0>)
    else Serial.println("LIS3MDL Found!");
   ba2e2:	f007 f8d0 	bl	c1486 <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   ba2e6:	485f      	ldr	r0, [pc, #380]	; (ba464 <setup+0x3cc>)
   ba2e8:	2102      	movs	r1, #2
   ba2ea:	f7f9 ff9b 	bl	b4224 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   ba2ee:	485d      	ldr	r0, [pc, #372]	; (ba464 <setup+0x3cc>)
   ba2f0:	2100      	movs	r1, #0
   ba2f2:	f7f9 fffb 	bl	b42ec <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   ba2f6:	485b      	ldr	r0, [pc, #364]	; (ba464 <setup+0x3cc>)
   ba2f8:	2101      	movs	r1, #1
   ba2fa:	f7f9 ffc5 	bl	b4288 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   ba2fe:	4859      	ldr	r0, [pc, #356]	; (ba464 <setup+0x3cc>)
   ba300:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   ba302:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   ba304:	f7fa f80d 	bl	b4322 <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   ba308:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   ba30c:	4855      	ldr	r0, [pc, #340]	; (ba464 <setup+0x3cc>)
   ba30e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   ba312:	f7fa f8ad 	bl	b4470 <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   ba316:	4622      	mov	r2, r4
   ba318:	4621      	mov	r1, r4
   ba31a:	464b      	mov	r3, r9
   ba31c:	e9cd 4901 	strd	r4, r9, [sp, #4]
   ba320:	4850      	ldr	r0, [pc, #320]	; (ba464 <setup+0x3cc>)
   ba322:	f8cd 9000 	str.w	r9, [sp]
   ba326:	f7fa f8bb 	bl	b44a0 <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"B%d%02d%02d%04d%02d%02d%02d", BOTNUM, Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   ba32a:	f007 fc47 	bl	c1bbc <_ZN9TimeClass5monthEv>
   ba32e:	4682      	mov	sl, r0
   ba330:	f007 fc38 	bl	c1ba4 <_ZN9TimeClass3dayEv>
   ba334:	4683      	mov	fp, r0
   ba336:	f007 fc49 	bl	c1bcc <_ZN9TimeClass4yearEv>
   ba33a:	9009      	str	r0, [sp, #36]	; 0x24
   ba33c:	f007 fc0e 	bl	c1b5c <_ZN9TimeClass4hourEv>
   ba340:	9008      	str	r0, [sp, #32]
   ba342:	f007 fc17 	bl	c1b74 <_ZN9TimeClass6minuteEv>
   ba346:	9007      	str	r0, [sp, #28]
   ba348:	f007 fc20 	bl	c1b8c <_ZN9TimeClass6secondEv>
   ba34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba34e:	9907      	ldr	r1, [sp, #28]
   ba350:	9a08      	ldr	r2, [sp, #32]
   ba352:	9005      	str	r0, [sp, #20]
   ba354:	e9cd b301 	strd	fp, r3, [sp, #4]
   ba358:	9104      	str	r1, [sp, #16]
   ba35a:	464b      	mov	r3, r9
   ba35c:	9203      	str	r2, [sp, #12]
   ba35e:	2110      	movs	r1, #16
   ba360:	4a42      	ldr	r2, [pc, #264]	; (ba46c <setup+0x3d4>)
   ba362:	f8cd a000 	str.w	sl, [sp]
   ba366:	a80b      	add	r0, sp, #44	; 0x2c
   ba368:	f003 ffae 	bl	be2c8 <snprintf>
    strcpy(filename,DEF_FILENAME);              //Copy in all of the necessary elements of the file name
   ba36c:	4940      	ldr	r1, [pc, #256]	; (ba470 <setup+0x3d8>)
   ba36e:	4841      	ldr	r0, [pc, #260]	; (ba474 <setup+0x3dc>)
   ba370:	f00a f960 	bl	c4634 <strcpy>
    strcat(filename,timestamp);
   ba374:	a90b      	add	r1, sp, #44	; 0x2c
   ba376:	483f      	ldr	r0, [pc, #252]	; (ba474 <setup+0x3dc>)
   ba378:	f00a f92c 	bl	c45d4 <strcat>
    strcpy(filenameMessages,filename);
   ba37c:	493d      	ldr	r1, [pc, #244]	; (ba474 <setup+0x3dc>)
   ba37e:	483e      	ldr	r0, [pc, #248]	; (ba478 <setup+0x3e0>)
   ba380:	f00a f958 	bl	c4634 <strcpy>
    strcat(filename,".csv");
   ba384:	493d      	ldr	r1, [pc, #244]	; (ba47c <setup+0x3e4>)
   ba386:	483b      	ldr	r0, [pc, #236]	; (ba474 <setup+0x3dc>)
   ba388:	f00a f924 	bl	c45d4 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   ba38c:	493c      	ldr	r1, [pc, #240]	; (ba480 <setup+0x3e8>)
   ba38e:	483a      	ldr	r0, [pc, #232]	; (ba478 <setup+0x3e0>)
   ba390:	f00a f920 	bl	c45d4 <strcat>
    Serial.println(filename);                   //Print the filenames to the console for debugging
   ba394:	f007 fcee 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba398:	4936      	ldr	r1, [pc, #216]	; (ba474 <setup+0x3dc>)
   ba39a:	f007 f874 	bl	c1486 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   ba39e:	f007 fce9 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba3a2:	4935      	ldr	r1, [pc, #212]	; (ba478 <setup+0x3e0>)
   ba3a4:	f007 f86f 	bl	c1486 <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   ba3a8:	4622      	mov	r2, r4
   ba3aa:	4836      	ldr	r0, [pc, #216]	; (ba484 <setup+0x3ec>)
   ba3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ba3b0:	f7ff f938 	bl	b9624 <_ZN5Timer6_startEjb.isra.0>
   ba3b4:	4622      	mov	r2, r4
   ba3b6:	e069      	b.n	ba48c <setup+0x3f4>
   ba3b8:	2003e588 	.word	0x2003e588
   ba3bc:	2003e58c 	.word	0x2003e58c
   ba3c0:	2003e560 	.word	0x2003e560
   ba3c4:	2003e561 	.word	0x2003e561
   ba3c8:	000b964d 	.word	0x000b964d
   ba3cc:	2003de1c 	.word	0x2003de1c
   ba3d0:	2003e0b9 	.word	0x2003e0b9
   ba3d4:	2003dd44 	.word	0x2003dd44
   ba3d8:	2003dd54 	.word	0x2003dd54
   ba3dc:	2003ded4 	.word	0x2003ded4
   ba3e0:	2003dd68 	.word	0x2003dd68
   ba3e4:	000b9ea9 	.word	0x000b9ea9
   ba3e8:	000c77d8 	.word	0x000c77d8
   ba3ec:	000b9ef9 	.word	0x000b9ef9
   ba3f0:	000c77de 	.word	0x000c77de
   ba3f4:	000bf81f 	.word	0x000bf81f
   ba3f8:	2003dd65 	.word	0x2003dd65
   ba3fc:	2003e55c 	.word	0x2003e55c
   ba400:	2003dda8 	.word	0x2003dda8
   ba404:	2003ddf4 	.word	0x2003ddf4
   ba408:	2003ddf8 	.word	0x2003ddf8
   ba40c:	2003e0b4 	.word	0x2003e0b4
   ba410:	2003dd7c 	.word	0x2003dd7c
   ba414:	2003dd3c 	.word	0x2003dd3c
   ba418:	2003ddac 	.word	0x2003ddac
   ba41c:	2003e0b0 	.word	0x2003e0b0
   ba420:	2003e0b8 	.word	0x2003e0b8
   ba424:	2003dd66 	.word	0x2003dd66
   ba428:	2003e5d8 	.word	0x2003e5d8
   ba42c:	2003e562 	.word	0x2003e562
   ba430:	2003e5c9 	.word	0x2003e5c9
   ba434:	2003e5ee 	.word	0x2003e5ee
   ba438:	2003e5ef 	.word	0x2003e5ef
   ba43c:	2003dd94 	.word	0x2003dd94
   ba440:	2003e5e4 	.word	0x2003e5e4
   ba444:	2003e0bc 	.word	0x2003e0bc
   ba448:	2003e0a8 	.word	0x2003e0a8
   ba44c:	2003dd9c 	.word	0x2003dd9c
   ba450:	2003dd31 	.word	0x2003dd31
   ba454:	2003db20 	.word	0x2003db20
   ba458:	2003dd84 	.word	0x2003dd84
   ba45c:	2003dd40 	.word	0x2003dd40
   ba460:	00061a80 	.word	0x00061a80
   ba464:	2003de20 	.word	0x2003de20
   ba468:	000c77ec 	.word	0x000c77ec
   ba46c:	000c7817 	.word	0x000c7817
   ba470:	000c7833 	.word	0x000c7833
   ba474:	2003ddae 	.word	0x2003ddae
   ba478:	2003ddce 	.word	0x2003ddce
   ba47c:	000c783c 	.word	0x000c783c
   ba480:	000c7841 	.word	0x000c7841
   ba484:	2003e5f0 	.word	0x2003e5f0
   ba488:	2003ded5 	.word	0x2003ded5
   ba48c:	482f      	ldr	r0, [pc, #188]	; (ba54c <setup+0x4b4>)
   ba48e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ba492:	f7ff f8c7 	bl	b9624 <_ZN5Timer6_startEjb.isra.0>
   ba496:	4622      	mov	r2, r4
   ba498:	482d      	ldr	r0, [pc, #180]	; (ba550 <setup+0x4b8>)
   ba49a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   ba49e:	f7ff f8c1 	bl	b9624 <_ZN5Timer6_startEjb.isra.0>
      dataMode_{dataMode}
   ba4a2:	4b2c      	ldr	r3, [pc, #176]	; (ba554 <setup+0x4bc>)
   ba4a4:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {     //Try to connect to the SD card
   ba4a6:	482c      	ldr	r0, [pc, #176]	; (ba558 <setup+0x4c0>)
   ba4a8:	4b2c      	ldr	r3, [pc, #176]	; (ba55c <setup+0x4c4>)
   ba4aa:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   ba4ae:	aa0f      	add	r2, sp, #60	; 0x3c
   ba4b0:	2108      	movs	r1, #8
   ba4b2:	9311      	str	r3, [sp, #68]	; 0x44
   ba4b4:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   ba4b8:	f7ff face 	bl	b9a58 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   ba4bc:	4604      	mov	r4, r0
   ba4be:	b9e8      	cbnz	r0, ba4fc <setup+0x464>
        Serial.println("Error: could not connect to SD card!");     //If not, warn the user in the console
   ba4c0:	f007 fc58 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba4c4:	4926      	ldr	r1, [pc, #152]	; (ba560 <setup+0x4c8>)
   ba4c6:	f006 ffde 	bl	c1486 <_ZN5Print7printlnEPKc>
        logSensors = false;                         //Set flags that the SD card is not available which will warn the user on the CChub
   ba4ca:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   ba4ce:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   ba4d0:	7034      	strb	r4, [r6, #0]
   ba4d2:	f003 fbeb 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);   //Check that the we've been in this setup function for at least two seconds so the ESC's will arm and allow movement
   ba4d6:	1b40      	subs	r0, r0, r5
   ba4d8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   ba4dc:	d233      	bcs.n	ba546 <setup+0x4ae>
   ba4de:	2005      	movs	r0, #5
   ba4e0:	f003 ff3e 	bl	be360 <delay>
   ba4e4:	e7f5      	b.n	ba4d2 <setup+0x43a>
   ba4e6:	f004 f8d1 	bl	be68c <_ZNK8particle7BleUuid8rawBytesEv>
   ba4ea:	9400      	str	r4, [sp, #0]
   ba4ec:	4602      	mov	r2, r0
   ba4ee:	2310      	movs	r3, #16
   ba4f0:	2107      	movs	r1, #7
   ba4f2:	e6cd      	b.n	ba290 <setup+0x1f8>
    else Serial.println("LIS3MDL Found!");
   ba4f4:	f007 fc3e 	bl	c1d74 <_Z16_fetch_usbserialv>
   ba4f8:	491a      	ldr	r1, [pc, #104]	; (ba564 <setup+0x4cc>)
   ba4fa:	e6f2      	b.n	ba2e2 <setup+0x24a>
    if(logSensors){                                 //Logsensors enables logging of sensor data, if enabled, then create the file on the SD card
   ba4fc:	f898 3000 	ldrb.w	r3, [r8]
   ba500:	b163      	cbz	r3, ba51c <setup+0x484>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   ba502:	4919      	ldr	r1, [pc, #100]	; (ba568 <setup+0x4d0>)
   ba504:	4819      	ldr	r0, [pc, #100]	; (ba56c <setup+0x4d4>)
   ba506:	f244 2202 	movw	r2, #16898	; 0x4202
   ba50a:	f7ff fa27 	bl	b995c <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   ba50e:	4918      	ldr	r1, [pc, #96]	; (ba570 <setup+0x4d8>)
   ba510:	4818      	ldr	r0, [pc, #96]	; (ba574 <setup+0x4dc>)
   ba512:	f006 ffb8 	bl	c1486 <_ZN5Print7printlnEPKc>
        myFile.close();
   ba516:	4815      	ldr	r0, [pc, #84]	; (ba56c <setup+0x4d4>)
   ba518:	f002 f98c 	bl	bc834 <_ZN7FatFile5closeEv>
    if(logMessages){                                //Logsensors enables logging of messages, if enabled, then create the file on the SD card
   ba51c:	783b      	ldrb	r3, [r7, #0]
   ba51e:	2b00      	cmp	r3, #0
   ba520:	d0d7      	beq.n	ba4d2 <setup+0x43a>
   ba522:	4815      	ldr	r0, [pc, #84]	; (ba578 <setup+0x4e0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   ba524:	7c03      	ldrb	r3, [r0, #16]
   ba526:	b92b      	cbnz	r3, ba534 <setup+0x49c>
   ba528:	4914      	ldr	r1, [pc, #80]	; (ba57c <setup+0x4e4>)
   ba52a:	f244 2202 	movw	r2, #16898	; 0x4202
   ba52e:	3010      	adds	r0, #16
   ba530:	f7ff fa14 	bl	b995c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   ba534:	4912      	ldr	r1, [pc, #72]	; (ba580 <setup+0x4e8>)
   ba536:	4810      	ldr	r0, [pc, #64]	; (ba578 <setup+0x4e0>)
   ba538:	2201      	movs	r2, #1
   ba53a:	f7ff f8a1 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   ba53e:	4811      	ldr	r0, [pc, #68]	; (ba584 <setup+0x4ec>)
   ba540:	f002 f978 	bl	bc834 <_ZN7FatFile5closeEv>
   ba544:	e7c5      	b.n	ba4d2 <setup+0x43a>
}
   ba546:	b015      	add	sp, #84	; 0x54
   ba548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba54c:	2003de00 	.word	0x2003de00
   ba550:	2003e5ac 	.word	0x2003e5ac
   ba554:	000c73b4 	.word	0x000c73b4
   ba558:	2003e0c4 	.word	0x2003e0c4
   ba55c:	007a1200 	.word	0x007a1200
   ba560:	000c784a 	.word	0x000c784a
   ba564:	000c7808 	.word	0x000c7808
   ba568:	2003ddae 	.word	0x2003ddae
   ba56c:	2003df0c 	.word	0x2003df0c
   ba570:	000c786f 	.word	0x000c786f
   ba574:	2003defc 	.word	0x2003defc
   ba578:	2003de7c 	.word	0x2003de7c
   ba57c:	2003ddce 	.word	0x2003ddce
   ba580:	000c78c5 	.word	0x000c78c5
   ba584:	2003de8c 	.word	0x2003de8c

000ba588 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   ba588:	b510      	push	{r4, lr}
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   ba58a:	4b31      	ldr	r3, [pc, #196]	; (ba650 <_Z12readPowerSysv+0xc8>)
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   ba58c:	4c31      	ldr	r4, [pc, #196]	; (ba654 <_Z12readPowerSysv+0xcc>)
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   ba58e:	6818      	ldr	r0, [r3, #0]
   ba590:	f009 fbde 	bl	c3d50 <__aeabi_f2d>
   ba594:	a328      	add	r3, pc, #160	; (adr r3, ba638 <_Z12readPowerSysv+0xb0>)
   ba596:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba59a:	f009 fa79 	bl	c3a90 <__aeabi_dsub>
   ba59e:	4b2e      	ldr	r3, [pc, #184]	; (ba658 <_Z12readPowerSysv+0xd0>)
   ba5a0:	2200      	movs	r2, #0
   ba5a2:	f009 fc2d 	bl	c3e00 <__aeabi_dmul>
   ba5a6:	a326      	add	r3, pc, #152	; (adr r3, ba640 <_Z12readPowerSysv+0xb8>)
   ba5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5ac:	f009 fd52 	bl	c4054 <__aeabi_ddiv>
   ba5b0:	f009 fed6 	bl	c4360 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;                                              //Max/min percentage so there is a slight deadzone at either end
   ba5b4:	2864      	cmp	r0, #100	; 0x64
   ba5b6:	4603      	mov	r3, r0
   ba5b8:	bfa8      	it	ge
   ba5ba:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   ba5bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   ba5c0:	2814      	cmp	r0, #20
   ba5c2:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;                      //Check if battery percentage is low, if low then set flag so the LED flashes and the CChub pops up an alert
   ba5c4:	4b25      	ldr	r3, [pc, #148]	; (ba65c <_Z12readPowerSysv+0xd4>)
   ba5c6:	bfcc      	ite	gt
   ba5c8:	2000      	movgt	r0, #0
   ba5ca:	2001      	movle	r0, #1
   ba5cc:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095; //Read the amplified input from the shunt from the batter and solar array and calculate the multiplier based on the resistor value and datasheet
   ba5ce:	2010      	movs	r0, #16
   ba5d0:	f007 fd0d 	bl	c1fee <analogRead>
   ba5d4:	ee07 0a90 	vmov	s15, r0
   ba5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba5dc:	ee17 0a90 	vmov	r0, s15
   ba5e0:	f009 fbb6 	bl	c3d50 <__aeabi_f2d>
   ba5e4:	4b1e      	ldr	r3, [pc, #120]	; (ba660 <_Z12readPowerSysv+0xd8>)
   ba5e6:	2200      	movs	r2, #0
   ba5e8:	f009 fc0a 	bl	c3e00 <__aeabi_dmul>
   ba5ec:	a316      	add	r3, pc, #88	; (adr r3, ba648 <_Z12readPowerSysv+0xc0>)
   ba5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba5f2:	f009 fd2f 	bl	c4054 <__aeabi_ddiv>
   ba5f6:	f009 fefb 	bl	c43f0 <__aeabi_d2f>
   ba5fa:	4b1a      	ldr	r3, [pc, #104]	; (ba664 <_Z12readPowerSysv+0xdc>)
   ba5fc:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   ba5fe:	2011      	movs	r0, #17
   ba600:	f007 fcf5 	bl	c1fee <analogRead>
   ba604:	ee07 0a90 	vmov	s15, r0
   ba608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   ba60c:	ee17 0a90 	vmov	r0, s15
   ba610:	f009 fb9e 	bl	c3d50 <__aeabi_f2d>
   ba614:	4b14      	ldr	r3, [pc, #80]	; (ba668 <_Z12readPowerSysv+0xe0>)
   ba616:	2200      	movs	r2, #0
   ba618:	f009 fbf2 	bl	c3e00 <__aeabi_dmul>
   ba61c:	a30a      	add	r3, pc, #40	; (adr r3, ba648 <_Z12readPowerSysv+0xc0>)
   ba61e:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba622:	f009 fd17 	bl	c4054 <__aeabi_ddiv>
   ba626:	f009 fee3 	bl	c43f0 <__aeabi_d2f>
   ba62a:	4b10      	ldr	r3, [pc, #64]	; (ba66c <_Z12readPowerSysv+0xe4>)
   ba62c:	6018      	str	r0, [r3, #0]
}
   ba62e:	7820      	ldrb	r0, [r4, #0]
   ba630:	bd10      	pop	{r4, pc}
   ba632:	bf00      	nop
   ba634:	f3af 8000 	nop.w
   ba638:	66666666 	.word	0x66666666
   ba63c:	40246666 	.word	0x40246666
   ba640:	cccccccc 	.word	0xcccccccc
   ba644:	4018cccc 	.word	0x4018cccc
   ba648:	00000000 	.word	0x00000000
   ba64c:	40affe00 	.word	0x40affe00
   ba650:	2003dd98 	.word	0x2003dd98
   ba654:	2003dd94 	.word	0x2003dd94
   ba658:	40590000 	.word	0x40590000
   ba65c:	2003dedc 	.word	0x2003dedc
   ba660:	40408000 	.word	0x40408000
   ba664:	2003dd90 	.word	0x2003dd90
   ba668:	40308000 	.word	0x40308000
   ba66c:	2003e584 	.word	0x2003e584

000ba670 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   ba670:	b538      	push	{r3, r4, r5, lr}
   ba672:	eef0 7a60 	vmov.f32	s15, s1
   ba676:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   ba67a:	eef0 0a40 	vmov.f32	s1, s0
   ba67e:	eeb0 0a67 	vmov.f32	s0, s15
   ba682:	f007 ff0f 	bl	c24a4 <atan2f>
   ba686:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;  //Convert x and y compass acceleration to a heading
   ba68a:	f009 fb61 	bl	c3d50 <__aeabi_f2d>
   ba68e:	4b8e      	ldr	r3, [pc, #568]	; (ba8c8 <_Z18readCompassHeadingff+0x258>)
   ba690:	2200      	movs	r2, #0
   ba692:	f009 fbb5 	bl	c3e00 <__aeabi_dmul>
   ba696:	a384      	add	r3, pc, #528	; (adr r3, ba8a8 <_Z18readCompassHeadingff+0x238>)
   ba698:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba69c:	f009 fcda 	bl	c4054 <__aeabi_ddiv>
   ba6a0:	f009 fea6 	bl	c43f0 <__aeabi_d2f>
   ba6a4:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   ba6a8:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   ba6ac:	eeb4 8ae8 	vcmpe.f32	s16, s17
   ba6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba6b4:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   ba6b8:	db13      	blt.n	ba6e2 <_Z18readCompassHeadingff+0x72>
   ba6ba:	eeb4 8ac9 	vcmpe.f32	s16, s18
   ba6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba6c2:	d50e      	bpl.n	ba6e2 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   ba6c4:	f009 fb44 	bl	c3d50 <__aeabi_f2d>
   ba6c8:	4b80      	ldr	r3, [pc, #512]	; (ba8cc <_Z18readCompassHeadingff+0x25c>)
   ba6ca:	2200      	movs	r2, #0
   ba6cc:	f009 f9e0 	bl	c3a90 <__aeabi_dsub>
   ba6d0:	4b7f      	ldr	r3, [pc, #508]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba6d2:	2200      	movs	r2, #0
   ba6d4:	f009 fb94 	bl	c3e00 <__aeabi_dmul>
   ba6d8:	4b7e      	ldr	r3, [pc, #504]	; (ba8d4 <_Z18readCompassHeadingff+0x264>)
   ba6da:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   ba6dc:	f009 fcba 	bl	c4054 <__aeabi_ddiv>
   ba6e0:	e021      	b.n	ba726 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   ba6e2:	ee18 0a10 	vmov	r0, s16
   ba6e6:	f009 fb33 	bl	c3d50 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   ba6ea:	eeb4 8ac9 	vcmpe.f32	s16, s18
   ba6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba6f2:	eddf 7a79 	vldr	s15, [pc, #484]	; ba8d8 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   ba6f6:	4604      	mov	r4, r0
   ba6f8:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   ba6fa:	db1b      	blt.n	ba734 <_Z18readCompassHeadingff+0xc4>
   ba6fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba704:	d516      	bpl.n	ba734 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   ba706:	4b75      	ldr	r3, [pc, #468]	; (ba8dc <_Z18readCompassHeadingff+0x26c>)
   ba708:	2200      	movs	r2, #0
   ba70a:	f009 f9c1 	bl	c3a90 <__aeabi_dsub>
   ba70e:	4b70      	ldr	r3, [pc, #448]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba710:	2200      	movs	r2, #0
   ba712:	f009 fb75 	bl	c3e00 <__aeabi_dmul>
   ba716:	4b72      	ldr	r3, [pc, #456]	; (ba8e0 <_Z18readCompassHeadingff+0x270>)
   ba718:	2200      	movs	r2, #0
   ba71a:	f009 fc9b 	bl	c4054 <__aeabi_ddiv>
   ba71e:	4b6c      	ldr	r3, [pc, #432]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba720:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   ba722:	f009 f9b7 	bl	c3a94 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   ba726:	f009 fe63 	bl	c43f0 <__aeabi_d2f>
}
   ba72a:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   ba72e:	ee00 0a10 	vmov	s0, r0
}
   ba732:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   ba734:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba73c:	eddf 7a69 	vldr	s15, [pc, #420]	; ba8e4 <_Z18readCompassHeadingff+0x274>
   ba740:	db15      	blt.n	ba76e <_Z18readCompassHeadingff+0xfe>
   ba742:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba74a:	d510      	bpl.n	ba76e <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   ba74c:	4b66      	ldr	r3, [pc, #408]	; (ba8e8 <_Z18readCompassHeadingff+0x278>)
   ba74e:	2200      	movs	r2, #0
   ba750:	4620      	mov	r0, r4
   ba752:	4629      	mov	r1, r5
   ba754:	f009 f99c 	bl	c3a90 <__aeabi_dsub>
   ba758:	4b5d      	ldr	r3, [pc, #372]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba75a:	2200      	movs	r2, #0
   ba75c:	f009 fb50 	bl	c3e00 <__aeabi_dmul>
   ba760:	4b62      	ldr	r3, [pc, #392]	; (ba8ec <_Z18readCompassHeadingff+0x27c>)
   ba762:	2200      	movs	r2, #0
   ba764:	f009 fc76 	bl	c4054 <__aeabi_ddiv>
   ba768:	4b61      	ldr	r3, [pc, #388]	; (ba8f0 <_Z18readCompassHeadingff+0x280>)
   ba76a:	2200      	movs	r2, #0
   ba76c:	e7d9      	b.n	ba722 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   ba76e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba776:	db18      	blt.n	ba7aa <_Z18readCompassHeadingff+0x13a>
   ba778:	eddf 7a5e 	vldr	s15, [pc, #376]	; ba8f4 <_Z18readCompassHeadingff+0x284>
   ba77c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba784:	d511      	bpl.n	ba7aa <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   ba786:	4b5c      	ldr	r3, [pc, #368]	; (ba8f8 <_Z18readCompassHeadingff+0x288>)
   ba788:	2200      	movs	r2, #0
   ba78a:	4620      	mov	r0, r4
   ba78c:	4629      	mov	r1, r5
   ba78e:	f009 f97f 	bl	c3a90 <__aeabi_dsub>
   ba792:	4b4f      	ldr	r3, [pc, #316]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba794:	2200      	movs	r2, #0
   ba796:	f009 fb33 	bl	c3e00 <__aeabi_dmul>
   ba79a:	4b58      	ldr	r3, [pc, #352]	; (ba8fc <_Z18readCompassHeadingff+0x28c>)
   ba79c:	2200      	movs	r2, #0
   ba79e:	f009 fc59 	bl	c4054 <__aeabi_ddiv>
   ba7a2:	a343      	add	r3, pc, #268	; (adr r3, ba8b0 <_Z18readCompassHeadingff+0x240>)
   ba7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7a8:	e7bb      	b.n	ba722 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   ba7aa:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   ba7ae:	eeb4 8ac7 	vcmpe.f32	s16, s14
   ba7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba7b6:	db11      	blt.n	ba7dc <_Z18readCompassHeadingff+0x16c>
   ba7b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
   ba7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba7c0:	d50c      	bpl.n	ba7dc <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   ba7c2:	4b42      	ldr	r3, [pc, #264]	; (ba8cc <_Z18readCompassHeadingff+0x25c>)
   ba7c4:	2200      	movs	r2, #0
   ba7c6:	4620      	mov	r0, r4
   ba7c8:	4629      	mov	r1, r5
   ba7ca:	f009 f961 	bl	c3a90 <__aeabi_dsub>
   ba7ce:	4b4c      	ldr	r3, [pc, #304]	; (ba900 <_Z18readCompassHeadingff+0x290>)
   ba7d0:	2200      	movs	r2, #0
   ba7d2:	f009 fb15 	bl	c3e00 <__aeabi_dmul>
   ba7d6:	4b4b      	ldr	r3, [pc, #300]	; (ba904 <_Z18readCompassHeadingff+0x294>)
   ba7d8:	2200      	movs	r2, #0
   ba7da:	e77f      	b.n	ba6dc <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   ba7dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; ba908 <_Z18readCompassHeadingff+0x298>
   ba7e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba7e8:	db17      	blt.n	ba81a <_Z18readCompassHeadingff+0x1aa>
   ba7ea:	eeb4 8ac7 	vcmpe.f32	s16, s14
   ba7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba7f2:	d512      	bpl.n	ba81a <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   ba7f4:	4b45      	ldr	r3, [pc, #276]	; (ba90c <_Z18readCompassHeadingff+0x29c>)
   ba7f6:	2200      	movs	r2, #0
   ba7f8:	4620      	mov	r0, r4
   ba7fa:	4629      	mov	r1, r5
   ba7fc:	f009 f94a 	bl	c3a94 <__adddf3>
   ba800:	4b3f      	ldr	r3, [pc, #252]	; (ba900 <_Z18readCompassHeadingff+0x290>)
   ba802:	2200      	movs	r2, #0
   ba804:	f009 fafc 	bl	c3e00 <__aeabi_dmul>
   ba808:	4b41      	ldr	r3, [pc, #260]	; (ba910 <_Z18readCompassHeadingff+0x2a0>)
   ba80a:	2200      	movs	r2, #0
   ba80c:	f009 fc22 	bl	c4054 <__aeabi_ddiv>
   ba810:	4b2f      	ldr	r3, [pc, #188]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba812:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   ba814:	f009 f93c 	bl	c3a90 <__aeabi_dsub>
   ba818:	e785      	b.n	ba726 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   ba81a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; ba914 <_Z18readCompassHeadingff+0x2a4>
   ba81e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   ba822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba826:	db15      	blt.n	ba854 <_Z18readCompassHeadingff+0x1e4>
   ba828:	eeb4 8ae7 	vcmpe.f32	s16, s15
   ba82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba830:	d510      	bpl.n	ba854 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   ba832:	4b39      	ldr	r3, [pc, #228]	; (ba918 <_Z18readCompassHeadingff+0x2a8>)
   ba834:	2200      	movs	r2, #0
   ba836:	4620      	mov	r0, r4
   ba838:	4629      	mov	r1, r5
   ba83a:	f009 f92b 	bl	c3a94 <__adddf3>
   ba83e:	4b30      	ldr	r3, [pc, #192]	; (ba900 <_Z18readCompassHeadingff+0x290>)
   ba840:	2200      	movs	r2, #0
   ba842:	f009 fadd 	bl	c3e00 <__aeabi_dmul>
   ba846:	4b35      	ldr	r3, [pc, #212]	; (ba91c <_Z18readCompassHeadingff+0x2ac>)
   ba848:	2200      	movs	r2, #0
   ba84a:	f009 fc03 	bl	c4054 <__aeabi_ddiv>
   ba84e:	4b28      	ldr	r3, [pc, #160]	; (ba8f0 <_Z18readCompassHeadingff+0x280>)
   ba850:	2200      	movs	r2, #0
   ba852:	e7df      	b.n	ba814 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   ba854:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   ba858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   ba85c:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   ba860:	dd10      	ble.n	ba884 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   ba862:	4b2f      	ldr	r3, [pc, #188]	; (ba920 <_Z18readCompassHeadingff+0x2b0>)
   ba864:	4620      	mov	r0, r4
   ba866:	4629      	mov	r1, r5
   ba868:	f009 f912 	bl	c3a90 <__aeabi_dsub>
   ba86c:	4b18      	ldr	r3, [pc, #96]	; (ba8d0 <_Z18readCompassHeadingff+0x260>)
   ba86e:	2200      	movs	r2, #0
   ba870:	f009 fac6 	bl	c3e00 <__aeabi_dmul>
   ba874:	a310      	add	r3, pc, #64	; (adr r3, ba8b8 <_Z18readCompassHeadingff+0x248>)
   ba876:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba87a:	f009 fbeb 	bl	c4054 <__aeabi_ddiv>
   ba87e:	4b12      	ldr	r3, [pc, #72]	; (ba8c8 <_Z18readCompassHeadingff+0x258>)
   ba880:	2200      	movs	r2, #0
   ba882:	e7c7      	b.n	ba814 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   ba884:	4b27      	ldr	r3, [pc, #156]	; (ba924 <_Z18readCompassHeadingff+0x2b4>)
   ba886:	4620      	mov	r0, r4
   ba888:	4629      	mov	r1, r5
   ba88a:	f009 f903 	bl	c3a94 <__adddf3>
   ba88e:	a30c      	add	r3, pc, #48	; (adr r3, ba8c0 <_Z18readCompassHeadingff+0x250>)
   ba890:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba894:	f009 fab4 	bl	c3e00 <__aeabi_dmul>
   ba898:	4b23      	ldr	r3, [pc, #140]	; (ba928 <_Z18readCompassHeadingff+0x2b8>)
   ba89a:	2200      	movs	r2, #0
   ba89c:	f009 fbda 	bl	c4054 <__aeabi_ddiv>
   ba8a0:	a303      	add	r3, pc, #12	; (adr r3, ba8b0 <_Z18readCompassHeadingff+0x240>)
   ba8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba8a6:	e7b5      	b.n	ba814 <_Z18readCompassHeadingff+0x1a4>
   ba8a8:	54442d18 	.word	0x54442d18
   ba8ac:	400921fb 	.word	0x400921fb
   ba8b0:	00000000 	.word	0x00000000
   ba8b4:	4060e000 	.word	0x4060e000
   ba8b8:	00000000 	.word	0x00000000
   ba8bc:	4063a000 	.word	0x4063a000
   ba8c0:	bb000000 	.word	0xbb000000
   ba8c4:	403d3c54 	.word	0x403d3c54
   ba8c8:	40668000 	.word	0x40668000
   ba8cc:	40180000 	.word	0x40180000
   ba8d0:	40468000 	.word	0x40468000
   ba8d4:	40390000 	.word	0x40390000
   ba8d8:	42680000 	.word	0x42680000
   ba8dc:	403f0000 	.word	0x403f0000
   ba8e0:	403b0000 	.word	0x403b0000
   ba8e4:	42ac0000 	.word	0x42ac0000
   ba8e8:	404d0000 	.word	0x404d0000
   ba8ec:	403c0000 	.word	0x403c0000
   ba8f0:	40568000 	.word	0x40568000
   ba8f4:	42fa0000 	.word	0x42fa0000
   ba8f8:	40558000 	.word	0x40558000
   ba8fc:	40438000 	.word	0x40438000
   ba900:	c0468000 	.word	0xc0468000
   ba904:	c0380000 	.word	0xc0380000
   ba908:	c2200000 	.word	0xc2200000
   ba90c:	40320000 	.word	0x40320000
   ba910:	c0360000 	.word	0xc0360000
   ba914:	c29c0000 	.word	0xc29c0000
   ba918:	40440000 	.word	0x40440000
   ba91c:	c0430000 	.word	0xc0430000
   ba920:	405f4000 	.word	0x405f4000
   ba924:	40538000 	.word	0x40538000
   ba928:	40598000 	.word	0x40598000
   ba92c:	00000000 	.word	0x00000000

000ba930 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   ba930:	b510      	push	{r4, lr}
   ba932:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba936:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   ba93a:	b082      	sub	sp, #8
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba93c:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   ba940:	eef0 aa41 	vmov.f32	s21, s2
   ba944:	eeb0 aa61 	vmov.f32	s20, s3
   ba948:	eef0 8a60 	vmov.f32	s17, s1
   ba94c:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba950:	f009 f9fe 	bl	c3d50 <__aeabi_f2d>
   ba954:	a342      	add	r3, pc, #264	; (adr r3, baa60 <_Z12calcDistanceffff+0x130>)
   ba956:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba95a:	f009 fa51 	bl	c3e00 <__aeabi_dmul>
   ba95e:	f009 fd47 	bl	c43f0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba962:	ee07 0a90 	vmov	s15, r0
   ba966:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   ba96a:	ee27 0a8b 	vmul.f32	s0, s15, s22
   ba96e:	f007 fd23 	bl	c23b8 <sinf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba972:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba976:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba97a:	f009 f9e9 	bl	c3d50 <__aeabi_f2d>
   ba97e:	a338      	add	r3, pc, #224	; (adr r3, baa60 <_Z12calcDistanceffff+0x130>)
   ba980:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba984:	f009 fa3c 	bl	c3e00 <__aeabi_dmul>
   ba988:	f009 fd32 	bl	c43f0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba98c:	ee00 0a10 	vmov	s0, r0
   ba990:	f007 fcda 	bl	c2348 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba994:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba998:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba99c:	f009 f9d8 	bl	c3d50 <__aeabi_f2d>
   ba9a0:	a32f      	add	r3, pc, #188	; (adr r3, baa60 <_Z12calcDistanceffff+0x130>)
   ba9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9a6:	f009 fa2b 	bl	c3e00 <__aeabi_dmul>
   ba9aa:	f009 fd21 	bl	c43f0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba9ae:	ee00 0a10 	vmov	s0, r0
   ba9b2:	f007 fcc9 	bl	c2348 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba9b6:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba9ba:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   ba9be:	ee17 0a90 	vmov	r0, s15
   ba9c2:	f009 f9c5 	bl	c3d50 <__aeabi_f2d>
   ba9c6:	a326      	add	r3, pc, #152	; (adr r3, baa60 <_Z12calcDistanceffff+0x130>)
   ba9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba9cc:	f009 fa18 	bl	c3e00 <__aeabi_dmul>
   ba9d0:	f009 fd0e 	bl	c43f0 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   ba9d4:	ee07 0a90 	vmov	s15, r0
   ba9d8:	ee27 0a8b 	vmul.f32	s0, s15, s22
   ba9dc:	f007 fcec 	bl	c23b8 <sinf>
   ba9e0:	ee68 8aa9 	vmul.f32	s17, s17, s19
   ba9e4:	ee68 8a80 	vmul.f32	s17, s17, s0
   ba9e8:	ee28 8a80 	vmul.f32	s16, s17, s0
   ba9ec:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   ba9f0:	eeb0 0a48 	vmov.f32	s0, s16
   ba9f4:	f007 fd58 	bl	c24a8 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   ba9f8:	ee18 0a10 	vmov	r0, s16
   ba9fc:	ee10 4a10 	vmov	r4, s0
   baa00:	f009 f9a6 	bl	c3d50 <__aeabi_f2d>
   baa04:	4602      	mov	r2, r0
   baa06:	460b      	mov	r3, r1
   baa08:	2000      	movs	r0, #0
   baa0a:	4913      	ldr	r1, [pc, #76]	; (baa58 <_Z12calcDistanceffff+0x128>)
   baa0c:	f009 f840 	bl	c3a90 <__aeabi_dsub>
   baa10:	ec41 0b10 	vmov	d0, r0, r1
   baa14:	f007 fd0c 	bl	c2430 <sqrt>
      return atan2(__type(__y), __type(__x));
   baa18:	4620      	mov	r0, r4
   baa1a:	ed8d 0b00 	vstr	d0, [sp]
   baa1e:	f009 f997 	bl	c3d50 <__aeabi_f2d>
   baa22:	ed9d 1b00 	vldr	d1, [sp]
   baa26:	ec41 0b10 	vmov	d0, r0, r1
   baa2a:	f007 fcff 	bl	c242c <atan2>
   baa2e:	ec53 2b10 	vmov	r2, r3, d0
   baa32:	ee10 0a10 	vmov	r0, s0
   baa36:	4619      	mov	r1, r3
   baa38:	f009 f82c 	bl	c3a94 <__adddf3>
   baa3c:	f009 fcd8 	bl	c43f0 <__aeabi_d2f>
}
   baa40:	ed9f 0a06 	vldr	s0, [pc, #24]	; baa5c <_Z12calcDistanceffff+0x12c>
   baa44:	ee07 0a90 	vmov	s15, r0
   baa48:	ee27 0a80 	vmul.f32	s0, s15, s0
   baa4c:	b002      	add	sp, #8
   baa4e:	ecbd 8b08 	vpop	{d8-d11}
   baa52:	bd10      	pop	{r4, pc}
   baa54:	f3af 8000 	nop.w
   baa58:	3ff00000 	.word	0x3ff00000
   baa5c:	4ac26d70 	.word	0x4ac26d70
   baa60:	a50de270 	.word	0xa50de270
   baa64:	3f91df45 	.word	0x3f91df45

000baa68 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   baa68:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){ 
   baa6a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   baa6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   baa72:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   baa76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   baa7a:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){ 
   baa7e:	dd37      	ble.n	baaf0 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   baa80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baa84:	dd04      	ble.n	baa90 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   baa86:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   baa8a:	ecbd 8b02 	vpop	{d8}
   baa8e:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   baa90:	eddf 7a2b 	vldr	s15, [pc, #172]	; bab40 <_Z9calcDeltaff+0xd8>
   baa94:	ee77 7ae0 	vsub.f32	s15, s15, s1
   baa98:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   baa9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   baaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baaa4:	dcef      	bgt.n	baa86 <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   baaa6:	ee10 0a10 	vmov	r0, s0
   baaaa:	f009 f951 	bl	c3d50 <__aeabi_f2d>
   baaae:	4b25      	ldr	r3, [pc, #148]	; (bab44 <_Z9calcDeltaff+0xdc>)
   baab0:	2200      	movs	r2, #0
   baab2:	f008 ffef 	bl	c3a94 <__adddf3>
   baab6:	4602      	mov	r2, r0
   baab8:	460b      	mov	r3, r1
   baaba:	2000      	movs	r0, #0
   baabc:	2100      	movs	r1, #0
   baabe:	f008 ffe7 	bl	c3a90 <__aeabi_dsub>
   baac2:	4604      	mov	r4, r0
   baac4:	ee18 0a10 	vmov	r0, s16
   baac8:	460d      	mov	r5, r1
   baaca:	f009 f941 	bl	c3d50 <__aeabi_f2d>
   baace:	4602      	mov	r2, r0
   baad0:	460b      	mov	r3, r1
   baad2:	2000      	movs	r0, #0
   baad4:	491b      	ldr	r1, [pc, #108]	; (bab44 <_Z9calcDeltaff+0xdc>)
   baad6:	f008 ffdb 	bl	c3a90 <__aeabi_dsub>
   baada:	4602      	mov	r2, r0
   baadc:	460b      	mov	r3, r1
   baade:	4620      	mov	r0, r4
   baae0:	4629      	mov	r1, r5
   baae2:	f008 ffd5 	bl	c3a90 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   baae6:	f009 fc83 	bl	c43f0 <__aeabi_d2f>
   baaea:	ee00 0a10 	vmov	s0, r0
   baaee:	e7cc      	b.n	baa8a <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   baaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baaf4:	ddc7      	ble.n	baa86 <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   baaf6:	eddf 7a12 	vldr	s15, [pc, #72]	; bab40 <_Z9calcDeltaff+0xd8>
   baafa:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   baafe:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bab06:	d4be      	bmi.n	baa86 <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   bab08:	ee10 0a10 	vmov	r0, s0
   bab0c:	f009 f920 	bl	c3d50 <__aeabi_f2d>
   bab10:	4602      	mov	r2, r0
   bab12:	460b      	mov	r3, r1
   bab14:	2000      	movs	r0, #0
   bab16:	490b      	ldr	r1, [pc, #44]	; (bab44 <_Z9calcDeltaff+0xdc>)
   bab18:	f008 ffba 	bl	c3a90 <__aeabi_dsub>
   bab1c:	4604      	mov	r4, r0
   bab1e:	ee18 0a10 	vmov	r0, s16
   bab22:	460d      	mov	r5, r1
   bab24:	f009 f914 	bl	c3d50 <__aeabi_f2d>
   bab28:	4b06      	ldr	r3, [pc, #24]	; (bab44 <_Z9calcDeltaff+0xdc>)
   bab2a:	2200      	movs	r2, #0
   bab2c:	f008 ffb2 	bl	c3a94 <__adddf3>
   bab30:	4602      	mov	r2, r0
   bab32:	460b      	mov	r3, r1
   bab34:	4620      	mov	r0, r4
   bab36:	4629      	mov	r1, r5
   bab38:	f008 ffac 	bl	c3a94 <__adddf3>
   bab3c:	e7d3      	b.n	baae6 <_Z9calcDeltaff+0x7e>
   bab3e:	bf00      	nop
   bab40:	43340000 	.word	0x43340000
   bab44:	40668000 	.word	0x40668000

000bab48 <_Z15getPositionDatav>:
void getPositionData(){
   bab48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bab4c:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   bab50:	4c59      	ldr	r4, [pc, #356]	; (bacb8 <_Z15getPositionDatav+0x170>)
void getPositionData(){
   bab52:	b08b      	sub	sp, #44	; 0x2c
   bab54:	f003 f8aa 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   bab58:	6823      	ldr	r3, [r4, #0]
   bab5a:	1ac0      	subs	r0, r0, r3
   bab5c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   bab60:	f240 809c 	bls.w	bac9c <_Z15getPositionDatav+0x154>
   bab64:	f003 f8a2 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   bab68:	4b54      	ldr	r3, [pc, #336]	; (bacbc <_Z15getPositionDatav+0x174>)
        positionTimer = millis();                       //Reset timer
   bab6a:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   bab6c:	2501      	movs	r5, #1
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   bab6e:	4854      	ldr	r0, [pc, #336]	; (bacc0 <_Z15getPositionDatav+0x178>)
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   bab70:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   bab72:	f240 414c 	movw	r1, #1100	; 0x44c
   bab76:	f7fe fb87 	bl	b9288 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   bab7a:	4c52      	ldr	r4, [pc, #328]	; (bacc4 <_Z15getPositionDatav+0x17c>)
   bab7c:	2800      	cmp	r0, #0
   bab7e:	f000 8092 	beq.w	baca6 <_Z15getPositionDatav+0x15e>
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   bab82:	f240 414c 	movw	r1, #1100	; 0x44c
   bab86:	484e      	ldr	r0, [pc, #312]	; (bacc0 <_Z15getPositionDatav+0x178>)
   bab88:	ed9f 8a4f 	vldr	s16, [pc, #316]	; bacc8 <_Z15getPositionDatav+0x180>
   bab8c:	f7fe fc1f 	bl	b93ce <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   bab90:	ee07 0a90 	vmov	s15, r0
   bab94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bab98:	4b4c      	ldr	r3, [pc, #304]	; (baccc <_Z15getPositionDatav+0x184>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   bab9a:	4849      	ldr	r0, [pc, #292]	; (bacc0 <_Z15getPositionDatav+0x178>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   bab9c:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   baba0:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   baba4:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   baba8:	f7fe fbee 	bl	b9388 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   babac:	ee07 0a90 	vmov	s15, r0
   babb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   babb4:	4b46      	ldr	r3, [pc, #280]	; (bacd0 <_Z15getPositionDatav+0x188>)
            GPSAvail = true;
   babb6:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   babb8:	ee87 7a88 	vdiv.f32	s14, s15, s16
   babbc:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();                                 // get X Y and Z data at once
   babc0:	4844      	ldr	r0, [pc, #272]	; (bacd4 <_Z15getPositionDatav+0x18c>)
   babc2:	f7f9 fabd 	bl	b4140 <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);   //Get event data over I2C from compass
   babc6:	4843      	ldr	r0, [pc, #268]	; (bacd4 <_Z15getPositionDatav+0x18c>)
   babc8:	a901      	add	r1, sp, #4
   babca:	f7f9 faff 	bl	b41cc <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   babce:	4604      	mov	r4, r0
   babd0:	b140      	cbz	r0, babe4 <_Z15getPositionDatav+0x9c>
   babd2:	eddd 0a07 	vldr	s1, [sp, #28]
   babd6:	ed9d 0a06 	vldr	s0, [sp, #24]
   babda:	f7ff fd49 	bl	ba670 <_Z18readCompassHeadingff>
   babde:	4b3e      	ldr	r3, [pc, #248]	; (bacd8 <_Z15getPositionDatav+0x190>)
   babe0:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){         //Check that the target latitude and longitude are valid
   babe4:	4e3d      	ldr	r6, [pc, #244]	; (bacdc <_Z15getPositionDatav+0x194>)
   babe6:	ed9f 6a3e 	vldr	s12, [pc, #248]	; bace0 <_Z15getPositionDatav+0x198>
   babea:	ed96 7a00 	vldr	s14, [r6]
   babee:	eeb4 7ac6 	vcmpe.f32	s14, s12
   babf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babf6:	db51      	blt.n	bac9c <_Z15getPositionDatav+0x154>
   babf8:	eddf 6a3a 	vldr	s13, [pc, #232]	; bace4 <_Z15getPositionDatav+0x19c>
   babfc:	eeb4 7ae6 	vcmpe.f32	s14, s13
   bac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac04:	d84a      	bhi.n	bac9c <_Z15getPositionDatav+0x154>
   bac06:	f8df 80f8 	ldr.w	r8, [pc, #248]	; bad00 <_Z15getPositionDatav+0x1b8>
   bac0a:	edd8 7a00 	vldr	s15, [r8]
   bac0e:	eef4 7ac6 	vcmpe.f32	s15, s12
   bac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac16:	db41      	blt.n	bac9c <_Z15getPositionDatav+0x154>
   bac18:	eef4 7ae6 	vcmpe.f32	s15, s13
   bac1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac20:	d83c      	bhi.n	bac9c <_Z15getPositionDatav+0x154>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   bac22:	4f2a      	ldr	r7, [pc, #168]	; (baccc <_Z15getPositionDatav+0x184>)
   bac24:	f8df 90a8 	ldr.w	r9, [pc, #168]	; bacd0 <_Z15getPositionDatav+0x188>
   bac28:	edd7 0a00 	vldr	s1, [r7]
   bac2c:	ed99 0a00 	vldr	s0, [r9]
   bac30:	4d2d      	ldr	r5, [pc, #180]	; (bace8 <_Z15getPositionDatav+0x1a0>)
  { return __builtin_atan2f(__y, __x); }
   bac32:	ee77 0a60 	vsub.f32	s1, s14, s1
   bac36:	ee37 0ac0 	vsub.f32	s0, s15, s0
   bac3a:	f007 fc33 	bl	c24a4 <atan2f>
   bac3e:	eddf 7a2b 	vldr	s15, [pc, #172]	; bacec <_Z15getPositionDatav+0x1a4>
   bac42:	ee60 7a27 	vmul.f32	s15, s0, s15
   bac46:	ee17 0a90 	vmov	r0, s15
   bac4a:	f009 f881 	bl	c3d50 <__aeabi_f2d>
   bac4e:	a318      	add	r3, pc, #96	; (adr r3, bacb0 <_Z15getPositionDatav+0x168>)
   bac50:	e9d3 2300 	ldrd	r2, r3, [r3]
   bac54:	f009 f9fe 	bl	c4054 <__aeabi_ddiv>
   bac58:	f009 fbca 	bl	c43f0 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   bac5c:	edd9 1a00 	vldr	s3, [r9]
   bac60:	ed98 1a00 	vldr	s2, [r8]
   bac64:	edd7 0a00 	vldr	s1, [r7]
   bac68:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   bac6c:	6028      	str	r0, [r5, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   bac6e:	f7ff fe5f 	bl	ba930 <_Z12calcDistanceffff>
   bac72:	4b1f      	ldr	r3, [pc, #124]	; (bacf0 <_Z15getPositionDatav+0x1a8>)
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   bac74:	edd5 0a00 	vldr	s1, [r5]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   bac78:	ed83 0a00 	vstr	s0, [r3]
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   bac7c:	4b16      	ldr	r3, [pc, #88]	; (bacd8 <_Z15getPositionDatav+0x190>)
   bac7e:	ed93 0a00 	vldr	s0, [r3]
   bac82:	f7ff fef1 	bl	baa68 <_Z9calcDeltaff>
   bac86:	4b1b      	ldr	r3, [pc, #108]	; (bacf4 <_Z15getPositionDatav+0x1ac>)
   bac88:	ed83 0a00 	vstr	s0, [r3]
   bac8c:	f003 f80e 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();                                                           //Update telemetry time
   bac90:	4b19      	ldr	r3, [pc, #100]	; (bacf8 <_Z15getPositionDatav+0x1b0>)
   bac92:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;                                             //If compass and GPS are available, set flag to true
   bac94:	b114      	cbz	r4, bac9c <_Z15getPositionDatav+0x154>
   bac96:	4b19      	ldr	r3, [pc, #100]	; (bacfc <_Z15getPositionDatav+0x1b4>)
   bac98:	2201      	movs	r2, #1
   bac9a:	701a      	strb	r2, [r3, #0]
}
   bac9c:	b00b      	add	sp, #44	; 0x2c
   bac9e:	ecbd 8b02 	vpop	{d8}
   baca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else GPSAvail = false;                          //Set flag to indicate GPS unavailable if not connected
   baca6:	7020      	strb	r0, [r4, #0]
   baca8:	e78a      	b.n	babc0 <_Z15getPositionDatav+0x78>
   bacaa:	bf00      	nop
   bacac:	f3af 8000 	nop.w
   bacb0:	54442d18 	.word	0x54442d18
   bacb4:	400921fb 	.word	0x400921fb
   bacb8:	2003e0b4 	.word	0x2003e0b4
   bacbc:	2003e5ec 	.word	0x2003e5ec
   bacc0:	2003df30 	.word	0x2003df30
   bacc4:	2003dd64 	.word	0x2003dd64
   bacc8:	49742400 	.word	0x49742400
   baccc:	2003ddfc 	.word	0x2003ddfc
   bacd0:	2003ded8 	.word	0x2003ded8
   bacd4:	2003de20 	.word	0x2003de20
   bacd8:	2003dda4 	.word	0x2003dda4
   bacdc:	2003e5d0 	.word	0x2003e5d0
   bace0:	c2b40000 	.word	0xc2b40000
   bace4:	42b40000 	.word	0x42b40000
   bace8:	2003e5e0 	.word	0x2003e5e0
   bacec:	43340000 	.word	0x43340000
   bacf0:	2003e5dc 	.word	0x2003e5dc
   bacf4:	2003e5cc 	.word	0x2003e5cc
   bacf8:	2003ddf8 	.word	0x2003ddf8
   bacfc:	2003e5d8 	.word	0x2003e5d8
   bad00:	2003e5d4 	.word	0x2003e5d4

000bad04 <_Z12updateMotorsv>:
void updateMotors(){
   bad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   bad08:	f8df a254 	ldr.w	sl, [pc, #596]	; baf60 <_Z12updateMotorsv+0x25c>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   bad0c:	4b85      	ldr	r3, [pc, #532]	; (baf24 <_Z12updateMotorsv+0x220>)
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   bad0e:	f89a 2000 	ldrb.w	r2, [sl]
void updateMotors(){
   bad12:	ed2d 8b04 	vpush	{d8-d9}
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   bad16:	781b      	ldrb	r3, [r3, #0]
void updateMotors(){
   bad18:	b083      	sub	sp, #12
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   bad1a:	2a00      	cmp	r2, #0
   bad1c:	f000 80f0 	beq.w	baf00 <_Z12updateMotorsv+0x1fc>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   bad20:	3b01      	subs	r3, #1
   bad22:	2b01      	cmp	r3, #1
   bad24:	4c80      	ldr	r4, [pc, #512]	; (baf28 <_Z12updateMotorsv+0x224>)
   bad26:	4f81      	ldr	r7, [pc, #516]	; (baf2c <_Z12updateMotorsv+0x228>)
   bad28:	4d81      	ldr	r5, [pc, #516]	; (baf30 <_Z12updateMotorsv+0x22c>)
   bad2a:	4e82      	ldr	r6, [pc, #520]	; (baf34 <_Z12updateMotorsv+0x230>)
   bad2c:	f200 8099 	bhi.w	bae62 <_Z12updateMotorsv+0x15e>
            if(travelDistance < MTR_CUTOFF_RAD){            //If the bot is close enough to the center when in autonomous and sentry, then disable motors and float there
   bad30:	4b81      	ldr	r3, [pc, #516]	; (baf38 <_Z12updateMotorsv+0x234>)
   bad32:	edd3 7a00 	vldr	s15, [r3]
   bad36:	4b81      	ldr	r3, [pc, #516]	; (baf3c <_Z12updateMotorsv+0x238>)
   bad38:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   bad3c:	eef4 7ac7 	vcmpe.f32	s15, s14
   bad40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad44:	d53d      	bpl.n	badc2 <_Z12updateMotorsv+0xbe>
                pointArrived = true;                        //Indicate that the bot has arrived at the target point, which acts as a disable until it drifts out of the larger radius
   bad46:	2201      	movs	r2, #1
   bad48:	701a      	strb	r2, [r3, #0]
                leftMotorSpeed = setLSpeed = 90;            //Set left and right motor speeds to off
   bad4a:	235a      	movs	r3, #90	; 0x5a
   bad4c:	7023      	strb	r3, [r4, #0]
   bad4e:	703b      	strb	r3, [r7, #0]
                rightMotorSpeed = setRSpeed = 90;
   bad50:	702b      	strb	r3, [r5, #0]
   bad52:	7033      	strb	r3, [r6, #0]
        if(setLSpeed < 90 && setLSpeed >= MTR_ST_REV) setLSpeed = MTR_ST_REV;
   bad54:	7823      	ldrb	r3, [r4, #0]
   bad56:	3b4b      	subs	r3, #75	; 0x4b
   bad58:	2b0e      	cmp	r3, #14
   bad5a:	bf9c      	itt	ls
   bad5c:	234b      	movls	r3, #75	; 0x4b
   bad5e:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   bad60:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   bad62:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >= MTR_ST_REV) setRSpeed = MTR_ST_REV;
   bad64:	3b4b      	subs	r3, #75	; 0x4b
   bad66:	2b0e      	cmp	r3, #14
   bad68:	bf9c      	itt	ls
   bad6a:	234b      	movls	r3, #75	; 0x4b
   bad6c:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   bad6e:	783b      	ldrb	r3, [r7, #0]
   bad70:	4293      	cmp	r3, r2
   bad72:	f080 80b3 	bcs.w	baedc <_Z12updateMotorsv+0x1d8>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;   //If we're off by more than one step size, then increment by one step
   bad76:	1ad1      	subs	r1, r2, r3
   bad78:	2903      	cmp	r1, #3
   bad7a:	f340 80b6 	ble.w	baeea <_Z12updateMotorsv+0x1e6>
   bad7e:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   bad80:	703b      	strb	r3, [r7, #0]
        if(rightMotorSpeed < setRSpeed){                                                    //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   bad82:	7833      	ldrb	r3, [r6, #0]
   bad84:	782a      	ldrb	r2, [r5, #0]
   bad86:	4293      	cmp	r3, r2
   bad88:	f080 80b1 	bcs.w	baeee <_Z12updateMotorsv+0x1ea>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD; //If we're off by more than one step size, then increment by one step
   bad8c:	1ad1      	subs	r1, r2, r3
   bad8e:	2903      	cmp	r1, #3
   bad90:	f340 80b4 	ble.w	baefc <_Z12updateMotorsv+0x1f8>
   bad94:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   bad96:	7033      	strb	r3, [r6, #0]
        if(!stopActive){                    //If there has not been a stop command, then update the ESC
   bad98:	4b69      	ldr	r3, [pc, #420]	; (baf40 <_Z12updateMotorsv+0x23c>)
   bad9a:	781b      	ldrb	r3, [r3, #0]
   bad9c:	b94b      	cbnz	r3, badb2 <_Z12updateMotorsv+0xae>
            ESCL.write(leftMotorSpeed);
   bad9e:	7839      	ldrb	r1, [r7, #0]
   bada0:	4868      	ldr	r0, [pc, #416]	; (baf44 <_Z12updateMotorsv+0x240>)
   bada2:	f006 fbe2 	bl	c156a <_ZN5Servo5writeEi>
            ESCR.write(180-rightMotorSpeed);
   bada6:	7831      	ldrb	r1, [r6, #0]
   bada8:	4867      	ldr	r0, [pc, #412]	; (baf48 <_Z12updateMotorsv+0x244>)
   badaa:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   badae:	f006 fbdc 	bl	c156a <_ZN5Servo5writeEi>
        updateMotorControl = false;        //Set the flag to false
   badb2:	2300      	movs	r3, #0
   badb4:	f88a 3000 	strb.w	r3, [sl]
}
   badb8:	b003      	add	sp, #12
   badba:	ecbd 8b04 	vpop	{d8-d9}
   badbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){      //Check if the bot is inside of the larger radius of approaching the target point, start slowing motors here
   badc2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   badc6:	eef4 7ac7 	vcmpe.f32	s15, s14
   badca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badce:	d55e      	bpl.n	bae8e <_Z12updateMotorsv+0x18a>
                if(pointArrived){                           //If we had already arrived at the target point, then use this larger radius as a deadzone so we don't have rapid on/off on the small radius border
   badd0:	781b      	ldrb	r3, [r3, #0]
   badd2:	9301      	str	r3, [sp, #4]
   badd4:	b11b      	cbz	r3, badde <_Z12updateMotorsv+0xda>
                    setLSpeed = 90;                         //Keep motors off here
   badd6:	235a      	movs	r3, #90	; 0x5a
   badd8:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   badda:	702b      	strb	r3, [r5, #0]
   baddc:	e7ba      	b.n	bad54 <_Z12updateMotorsv+0x50>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);    //Take the base 90 (stopped speed), add the delta for how much the heading is off, and slow with distance
   badde:	4b5b      	ldr	r3, [pc, #364]	; (baf4c <_Z12updateMotorsv+0x248>)
   bade0:	eddf 8a5b 	vldr	s17, [pc, #364]	; baf50 <_Z12updateMotorsv+0x24c>
   bade4:	ed93 8a00 	vldr	s16, [r3]
   bade8:	4b5a      	ldr	r3, [pc, #360]	; (baf54 <_Z12updateMotorsv+0x250>)
   badea:	eee8 8a28 	vfma.f32	s17, s16, s17
   badee:	ed93 7a00 	vldr	s14, [r3]
   badf2:	ee17 0a90 	vmov	r0, s15
   badf6:	ee28 8a07 	vmul.f32	s16, s16, s14
   badfa:	f008 ffa9 	bl	c3d50 <__aeabi_f2d>
   badfe:	4b56      	ldr	r3, [pc, #344]	; (baf58 <_Z12updateMotorsv+0x254>)
   bae00:	2200      	movs	r2, #0
   bae02:	f008 fffd 	bl	c3e00 <__aeabi_dmul>
   bae06:	ee78 7a88 	vadd.f32	s15, s17, s16
   bae0a:	4680      	mov	r8, r0
   bae0c:	4689      	mov	r9, r1
   bae0e:	ee17 0a90 	vmov	r0, s15
   bae12:	f008 ff9d 	bl	c3d50 <__aeabi_f2d>
   bae16:	4642      	mov	r2, r8
   bae18:	464b      	mov	r3, r9
   bae1a:	f008 fff1 	bl	c3e00 <__aeabi_dmul>
   bae1e:	f009 fa9f 	bl	c4360 <__aeabi_d2iz>
   bae22:	4683      	mov	fp, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   bae24:	ee18 0a90 	vmov	r0, s17
   bae28:	f008 ff92 	bl	c3d50 <__aeabi_f2d>
   bae2c:	ec41 0b19 	vmov	d9, r0, r1
   bae30:	ee18 0a10 	vmov	r0, s16
   bae34:	f008 ff8c 	bl	c3d50 <__aeabi_f2d>
   bae38:	4642      	mov	r2, r8
   bae3a:	464b      	mov	r3, r9
   bae3c:	f008 ffe0 	bl	c3e00 <__aeabi_dmul>
   bae40:	4602      	mov	r2, r0
   bae42:	460b      	mov	r3, r1
   bae44:	ec51 0b19 	vmov	r0, r1, d9
   bae48:	f008 fe22 	bl	c3a90 <__aeabi_dsub>
   bae4c:	f009 fa88 	bl	c4360 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;             //Cap the speed between 0 and 180
   bae50:	f1bb 0f00 	cmp.w	fp, #0
   bae54:	da12      	bge.n	bae7c <_Z12updateMotorsv+0x178>
   bae56:	9b01      	ldr	r3, [sp, #4]
                    else if(Lset > 180) setLSpeed = 180;
   bae58:	7023      	strb	r3, [r4, #0]
                    if(Rset < 0) setRSpeed = 0;
   bae5a:	2800      	cmp	r0, #0
   bae5c:	da13      	bge.n	bae86 <_Z12updateMotorsv+0x182>
   bae5e:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   bae60:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <= MTR_ST_FWD) setLSpeed = MTR_ST_FWD; //Push motor speed out of deadzone to make sure the motors actually respond to non-90 inputs
   bae62:	7823      	ldrb	r3, [r4, #0]
   bae64:	3b5b      	subs	r3, #91	; 0x5b
   bae66:	2b13      	cmp	r3, #19
   bae68:	bf9c      	itt	ls
   bae6a:	236e      	movls	r3, #110	; 0x6e
   bae6c:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <= MTR_ST_FWD) setRSpeed = MTR_ST_FWD;
   bae6e:	782b      	ldrb	r3, [r5, #0]
   bae70:	3b5b      	subs	r3, #91	; 0x5b
   bae72:	2b13      	cmp	r3, #19
   bae74:	f63f af6e 	bhi.w	bad54 <_Z12updateMotorsv+0x50>
   bae78:	236e      	movs	r3, #110	; 0x6e
   bae7a:	e7ae      	b.n	badda <_Z12updateMotorsv+0xd6>
                    else if(Lset > 180) setLSpeed = 180;
   bae7c:	f1bb 0fb4 	cmp.w	fp, #180	; 0xb4
   bae80:	ddeb      	ble.n	bae5a <_Z12updateMotorsv+0x156>
   bae82:	23b4      	movs	r3, #180	; 0xb4
   bae84:	e7e8      	b.n	bae58 <_Z12updateMotorsv+0x154>
                    else if(Rset > 180) setRSpeed = 180;
   bae86:	28b4      	cmp	r0, #180	; 0xb4
   bae88:	ddeb      	ble.n	bae62 <_Z12updateMotorsv+0x15e>
   bae8a:	23b4      	movs	r3, #180	; 0xb4
   bae8c:	e7e8      	b.n	bae60 <_Z12updateMotorsv+0x15c>
                pointArrived = false;                       //Set flag back to false so we have to travel to the inner circle, also happens usually when a new point is specified
   bae8e:	2100      	movs	r1, #0
   bae90:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   bae92:	4b2e      	ldr	r3, [pc, #184]	; (baf4c <_Z12updateMotorsv+0x248>)
   bae94:	eddf 7a2e 	vldr	s15, [pc, #184]	; baf50 <_Z12updateMotorsv+0x24c>
   bae98:	edd3 6a00 	vldr	s13, [r3]
   bae9c:	4b2d      	ldr	r3, [pc, #180]	; (baf54 <_Z12updateMotorsv+0x250>)
   bae9e:	eee6 7aa7 	vfma.f32	s15, s13, s15
   baea2:	ed93 6a00 	vldr	s12, [r3]
   baea6:	eeb0 7a67 	vmov.f32	s14, s15
   baeaa:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   baeae:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   baeb2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   baeb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   baeba:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   baebe:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   baec0:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   baec4:	da05      	bge.n	baed2 <_Z12updateMotorsv+0x1ce>
   baec6:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   baec8:	2b00      	cmp	r3, #0
   baeca:	dbc8      	blt.n	bae5e <_Z12updateMotorsv+0x15a>
                else if(Rset > 180) setRSpeed = 180;
   baecc:	2bb4      	cmp	r3, #180	; 0xb4
   baece:	dcdc      	bgt.n	bae8a <_Z12updateMotorsv+0x186>
   baed0:	e7c6      	b.n	bae60 <_Z12updateMotorsv+0x15c>
                else if(Lset > 180) setLSpeed = 180;
   baed2:	2ab4      	cmp	r2, #180	; 0xb4
   baed4:	bfc8      	it	gt
   baed6:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   baed8:	7022      	strb	r2, [r4, #0]
   baeda:	e7f5      	b.n	baec8 <_Z12updateMotorsv+0x1c4>
        else if(leftMotorSpeed > setLSpeed){                                                //If the acutal motor (leftMotorSpeed) speed is greater than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   baedc:	f67f af51 	bls.w	bad82 <_Z12updateMotorsv+0x7e>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   baee0:	1a99      	subs	r1, r3, r2
   baee2:	2903      	cmp	r1, #3
   baee4:	dd01      	ble.n	baeea <_Z12updateMotorsv+0x1e6>
   baee6:	3b03      	subs	r3, #3
   baee8:	e74a      	b.n	bad80 <_Z12updateMotorsv+0x7c>
            else leftMotorSpeed = setLSpeed;                                                //Otherwise, we're less than one step, so finish step function
   baeea:	703a      	strb	r2, [r7, #0]
   baeec:	e749      	b.n	bad82 <_Z12updateMotorsv+0x7e>
        else if(rightMotorSpeed > setRSpeed){                                               //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   baeee:	f67f af53 	bls.w	bad98 <_Z12updateMotorsv+0x94>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   baef2:	1a99      	subs	r1, r3, r2
   baef4:	2903      	cmp	r1, #3
   baef6:	dd01      	ble.n	baefc <_Z12updateMotorsv+0x1f8>
   baef8:	3b03      	subs	r3, #3
   baefa:	e74c      	b.n	bad96 <_Z12updateMotorsv+0x92>
            else rightMotorSpeed = setRSpeed;                                               //Otherwise, we're less than one step, so finish step function
   baefc:	7032      	strb	r2, [r6, #0]
   baefe:	e74b      	b.n	bad98 <_Z12updateMotorsv+0x94>
    else if(driveMode == 0 && millis() - positionTimer > MANUAL_RAMP_PD){   //If in manual movement mode, there isn't a trigger for updating the motor speed, so trigger with time periodically
   baf00:	2b00      	cmp	r3, #0
   baf02:	f47f af59 	bne.w	badb8 <_Z12updateMotorsv+0xb4>
   baf06:	4c15      	ldr	r4, [pc, #84]	; (baf5c <_Z12updateMotorsv+0x258>)
   baf08:	f002 fed0 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   baf0c:	6823      	ldr	r3, [r4, #0]
   baf0e:	1ac0      	subs	r0, r0, r3
   baf10:	2864      	cmp	r0, #100	; 0x64
   baf12:	f67f af51 	bls.w	badb8 <_Z12updateMotorsv+0xb4>
        updateMotorControl = true;
   baf16:	2301      	movs	r3, #1
   baf18:	f88a 3000 	strb.w	r3, [sl]
   baf1c:	f002 fec6 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
        positionTimer = millis();
   baf20:	6020      	str	r0, [r4, #0]
}
   baf22:	e749      	b.n	badb8 <_Z12updateMotorsv+0xb4>
   baf24:	2003ddad 	.word	0x2003ddad
   baf28:	2003e560 	.word	0x2003e560
   baf2c:	2003de1c 	.word	0x2003de1c
   baf30:	2003e561 	.word	0x2003e561
   baf34:	2003e0b9 	.word	0x2003e0b9
   baf38:	2003e5dc 	.word	0x2003e5dc
   baf3c:	2003e0b1 	.word	0x2003e0b1
   baf40:	2003e5c9 	.word	0x2003e5c9
   baf44:	2003dd44 	.word	0x2003dd44
   baf48:	2003dd54 	.word	0x2003dd54
   baf4c:	2003db24 	.word	0x2003db24
   baf50:	42b40000 	.word	0x42b40000
   baf54:	2003e5cc 	.word	0x2003e5cc
   baf58:	3fd00000 	.word	0x3fd00000
   baf5c:	2003e0b4 	.word	0x2003e0b4
   baf60:	2003e5ec 	.word	0x2003e5ec

000baf64 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   baf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   baf68:	b084      	sub	sp, #16
   baf6a:	af02      	add	r7, sp, #8
   baf6c:	4604      	mov	r4, r0
   baf6e:	460e      	mov	r6, r1
   baf70:	4691      	mov	r9, r2
   baf72:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   baf74:	f009 fb83 	bl	c467e <strlen>
   baf78:	3009      	adds	r0, #9
   baf7a:	f020 0307 	bic.w	r3, r0, #7
   baf7e:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   baf82:	4620      	mov	r0, r4
   baf84:	f009 fb7b 	bl	c467e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   baf88:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   baf8c:	492e      	ldr	r1, [pc, #184]	; (bb048 <_Z8sendDataPKchbbb+0xe4>)
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   baf8e:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   baf90:	4603      	mov	r3, r0
   baf92:	4622      	mov	r2, r4
   baf94:	4628      	mov	r0, r5
   baf96:	f003 f987 	bl	be2a8 <sprintf>
    if(sendLTE || sendMode == 4){                               //If sending over LTE, just use the particle event
   baf9a:	f1ba 0f00 	cmp.w	sl, #0
   baf9e:	d101      	bne.n	bafa4 <_Z8sendDataPKchbbb+0x40>
   bafa0:	2e04      	cmp	r6, #4
   bafa2:	d11b      	bne.n	bafdc <_Z8sendDataPKchbbb+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   bafa4:	4b29      	ldr	r3, [pc, #164]	; (bb04c <_Z8sendDataPKchbbb+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   bafa6:	492a      	ldr	r1, [pc, #168]	; (bb050 <_Z8sendDataPKchbbb+0xec>)
   bafa8:	781b      	ldrb	r3, [r3, #0]
   bafaa:	f88d 3000 	strb.w	r3, [sp]
   bafae:	462a      	mov	r2, r5
   bafb0:	233c      	movs	r3, #60	; 0x3c
   bafb2:	4638      	mov	r0, r7
   bafb4:	f004 fd40 	bl	bfa38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   bafb8:	687c      	ldr	r4, [r7, #4]
   bafba:	b17c      	cbz	r4, bafdc <_Z8sendDataPKchbbb+0x78>
      if (--_M_use_count == 0)
   bafbc:	6863      	ldr	r3, [r4, #4]
   bafbe:	3b01      	subs	r3, #1
   bafc0:	6063      	str	r3, [r4, #4]
   bafc2:	b95b      	cbnz	r3, bafdc <_Z8sendDataPKchbbb+0x78>
          _M_dispose();
   bafc4:	6823      	ldr	r3, [r4, #0]
   bafc6:	4620      	mov	r0, r4
   bafc8:	689b      	ldr	r3, [r3, #8]
   bafca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bafcc:	68a3      	ldr	r3, [r4, #8]
   bafce:	3b01      	subs	r3, #1
   bafd0:	60a3      	str	r3, [r4, #8]
   bafd2:	b91b      	cbnz	r3, bafdc <_Z8sendDataPKchbbb+0x78>
            _M_destroy();
   bafd4:	6823      	ldr	r3, [r4, #0]
   bafd6:	4620      	mov	r0, r4
   bafd8:	68db      	ldr	r3, [r3, #12]
   bafda:	4798      	blx	r3
    if((sendBLE || sendMode == 1) && BLE.connected()){          //Check that BLE is connected before trying to transmit here
   bafdc:	f1b9 0f00 	cmp.w	r9, #0
   bafe0:	d101      	bne.n	bafe6 <_Z8sendDataPKchbbb+0x82>
   bafe2:	2e01      	cmp	r6, #1
   bafe4:	d121      	bne.n	bb02a <_Z8sendDataPKchbbb+0xc6>
   bafe6:	f003 fd1f 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bafea:	f003 fd7b 	bl	beae4 <_ZNK8particle14BleLocalDevice9connectedEv>
   bafee:	b1e0      	cbz	r0, bb02a <_Z8sendDataPKchbbb+0xc6>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   baff0:	4628      	mov	r0, r5
   baff2:	f009 fb44 	bl	c467e <strlen>
   baff6:	3007      	adds	r0, #7
   baff8:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   baffc:	466c      	mov	r4, sp
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   baffe:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   bb002:	4628      	mov	r0, r5
   bb004:	f009 fb3b 	bl	c467e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   bb008:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   bb00c:	4602      	mov	r2, r0
   bb00e:	4629      	mov	r1, r5
   bb010:	4648      	mov	r0, r9
   bb012:	f009 fa81 	bl	c4518 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   bb016:	4628      	mov	r0, r5
   bb018:	f009 fb31 	bl	c467e <strlen>
   bb01c:	2300      	movs	r3, #0
   bb01e:	4602      	mov	r2, r0
   bb020:	4649      	mov	r1, r9
   bb022:	480c      	ldr	r0, [pc, #48]	; (bb054 <_Z8sendDataPKchbbb+0xf0>)
   bb024:	f003 fbf0 	bl	be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   bb028:	46a5      	mov	sp, r4
    if(sendXBee || sendMode == 2){                              //Send out over the harware serial to go through XBee
   bb02a:	f1b8 0f00 	cmp.w	r8, #0
   bb02e:	d101      	bne.n	bb034 <_Z8sendDataPKchbbb+0xd0>
   bb030:	2e02      	cmp	r6, #2
   bb032:	d104      	bne.n	bb03e <_Z8sendDataPKchbbb+0xda>
        Serial1.println(outStr);
   bb034:	f007 f84a 	bl	c20cc <_Z22__fetch_global_Serial1v>
   bb038:	4629      	mov	r1, r5
   bb03a:	f006 fa24 	bl	c1486 <_ZN5Print7printlnEPKc>
}
   bb03e:	3708      	adds	r7, #8
   bb040:	46bd      	mov	sp, r7
   bb042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb046:	bf00      	nop
   bb048:	000c78ea 	.word	0x000c78ea
   bb04c:	2003dd80 	.word	0x2003dd80
   bb050:	000c78f1 	.word	0x000c78f1
   bb054:	2003e5e4 	.word	0x2003e5e4

000bb058 <_Z16sendResponseDatav>:
void sendResponseData(){
   bb058:	b530      	push	{r4, r5, lr}
    if(requestActive){              //If the CC has requested data using the req command
   bb05a:	4d2a      	ldr	r5, [pc, #168]	; (bb104 <_Z16sendResponseDatav+0xac>)
   bb05c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   bb05e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){              //If the CC has requested data using the req command
   bb060:	2b00      	cmp	r3, #0
   bb062:	d04d      	beq.n	bb100 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);   //Empty the string if it had something
   bb064:	2241      	movs	r2, #65	; 0x41
   bb066:	2100      	movs	r1, #0
   bb068:	a80b      	add	r0, sp, #44	; 0x2c
   bb06a:	f009 fa7d 	bl	c4568 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   bb06e:	4b26      	ldr	r3, [pc, #152]	; (bb108 <_Z16sendResponseDatav+0xb0>)
   bb070:	ed9f 7a26 	vldr	s14, [pc, #152]	; bb10c <_Z16sendResponseDatav+0xb4>
   bb074:	edd3 7a00 	vldr	s15, [r3]
   bb078:	4b25      	ldr	r3, [pc, #148]	; (bb110 <_Z16sendResponseDatav+0xb8>)
   bb07a:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   bb07e:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   bb080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb084:	edcd 7a08 	vstr	s15, [sp, #32]
   bb088:	edd3 7a00 	vldr	s15, [r3]
   bb08c:	4b21      	ldr	r3, [pc, #132]	; (bb114 <_Z16sendResponseDatav+0xbc>)
   bb08e:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb096:	edcd 7a07 	vstr	s15, [sp, #28]
   bb09a:	edd3 7a00 	vldr	s15, [r3]
   bb09e:	4b1e      	ldr	r3, [pc, #120]	; (bb118 <_Z16sendResponseDatav+0xc0>)
   bb0a0:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb0a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb0a8:	edcd 7a06 	vstr	s15, [sp, #24]
   bb0ac:	edd3 7a00 	vldr	s15, [r3]
   bb0b0:	4b1a      	ldr	r3, [pc, #104]	; (bb11c <_Z16sendResponseDatav+0xc4>)
   bb0b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb0b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb0ba:	edcd 7a05 	vstr	s15, [sp, #20]
   bb0be:	edd3 7a00 	vldr	s15, [r3]
   bb0c2:	4b17      	ldr	r3, [pc, #92]	; (bb120 <_Z16sendResponseDatav+0xc8>)
   bb0c4:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb0c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb0cc:	edcd 7a04 	vstr	s15, [sp, #16]
   bb0d0:	6818      	ldr	r0, [r3, #0]
   bb0d2:	f008 fe3d 	bl	c3d50 <__aeabi_f2d>
   bb0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb0da:	4b12      	ldr	r3, [pc, #72]	; (bb124 <_Z16sendResponseDatav+0xcc>)
   bb0dc:	6818      	ldr	r0, [r3, #0]
   bb0de:	f008 fe37 	bl	c3d50 <__aeabi_f2d>
   bb0e2:	2201      	movs	r2, #1
   bb0e4:	e9cd 0100 	strd	r0, r1, [sp]
   bb0e8:	490f      	ldr	r1, [pc, #60]	; (bb128 <_Z16sendResponseDatav+0xd0>)
   bb0ea:	a80b      	add	r0, sp, #44	; 0x2c
   bb0ec:	f003 f8dc 	bl	be2a8 <sprintf>
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   bb0f0:	7829      	ldrb	r1, [r5, #0]
   bb0f2:	9400      	str	r4, [sp, #0]
   bb0f4:	4623      	mov	r3, r4
   bb0f6:	4622      	mov	r2, r4
   bb0f8:	a80b      	add	r0, sp, #44	; 0x2c
   bb0fa:	f7ff ff33 	bl	baf64 <_Z8sendDataPKchbbb>
        requestActive = 0;          //Set flag back to 0
   bb0fe:	702c      	strb	r4, [r5, #0]
}
   bb100:	b01d      	add	sp, #116	; 0x74
   bb102:	bd30      	pop	{r4, r5, pc}
   bb104:	2003e0b8 	.word	0x2003e0b8
   bb108:	2003e558 	.word	0x2003e558
   bb10c:	447a0000 	.word	0x447a0000
   bb110:	2003e550 	.word	0x2003e550
   bb114:	2003e548 	.word	0x2003e548
   bb118:	2003e554 	.word	0x2003e554
   bb11c:	2003e54c 	.word	0x2003e54c
   bb120:	2003ded8 	.word	0x2003ded8
   bb124:	2003ddfc 	.word	0x2003ddfc
   bb128:	000c78f9 	.word	0x000c78f9

000bb12c <_Z12statusUpdatev>:
void statusUpdate(){
   bb12c:	b530      	push	{r4, r5, lr}
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   bb12e:	4d2d      	ldr	r5, [pc, #180]	; (bb1e4 <_Z12statusUpdatev+0xb8>)
   bb130:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   bb132:	b099      	sub	sp, #100	; 0x64
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   bb134:	2b00      	cmp	r3, #0
   bb136:	d04a      	beq.n	bb1ce <_Z12statusUpdatev+0xa2>
        Serial.println("Sending a status update!");     //Log to console (for debug purposes)
   bb138:	f006 fe1c 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb13c:	492a      	ldr	r1, [pc, #168]	; (bb1e8 <_Z12statusUpdatev+0xbc>)
   bb13e:	4c2b      	ldr	r4, [pc, #172]	; (bb1ec <_Z12statusUpdatev+0xc0>)
   bb140:	f006 f9a1 	bl	c1486 <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f %d %d ",BOTNUM,battPercent,statusFlags,latitude,longitude,(int)(battVoltage * battCurrent),(int)(battVoltage * solarCurrent));  //Print status flags, battery, latitude and logitude
   bb144:	4b2a      	ldr	r3, [pc, #168]	; (bb1f0 <_Z12statusUpdatev+0xc4>)
   bb146:	4a2b      	ldr	r2, [pc, #172]	; (bb1f4 <_Z12statusUpdatev+0xc8>)
   bb148:	edd3 7a00 	vldr	s15, [r3]
   bb14c:	ed92 7a00 	vldr	s14, [r2]
   bb150:	4b29      	ldr	r3, [pc, #164]	; (bb1f8 <_Z12statusUpdatev+0xcc>)
   bb152:	4a2a      	ldr	r2, [pc, #168]	; (bb1fc <_Z12statusUpdatev+0xd0>)
   bb154:	781b      	ldrb	r3, [r3, #0]
   bb156:	9309      	str	r3, [sp, #36]	; 0x24
   bb158:	ee27 7a87 	vmul.f32	s14, s15, s14
   bb15c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   bb160:	ed8d 7a07 	vstr	s14, [sp, #28]
   bb164:	ed92 7a00 	vldr	s14, [r2]
   bb168:	4a25      	ldr	r2, [pc, #148]	; (bb200 <_Z12statusUpdatev+0xd4>)
   bb16a:	ee67 7a87 	vmul.f32	s15, s15, s14
   bb16e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   bb172:	edcd 7a06 	vstr	s15, [sp, #24]
   bb176:	6810      	ldr	r0, [r2, #0]
   bb178:	f008 fdea 	bl	c3d50 <__aeabi_f2d>
   bb17c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   bb180:	4a20      	ldr	r2, [pc, #128]	; (bb204 <_Z12statusUpdatev+0xd8>)
   bb182:	6810      	ldr	r0, [r2, #0]
   bb184:	f008 fde4 	bl	c3d50 <__aeabi_f2d>
   bb188:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb18c:	4a1e      	ldr	r2, [pc, #120]	; (bb208 <_Z12statusUpdatev+0xdc>)
   bb18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb190:	8812      	ldrh	r2, [r2, #0]
   bb192:	9200      	str	r2, [sp, #0]
   bb194:	491d      	ldr	r1, [pc, #116]	; (bb20c <_Z12statusUpdatev+0xe0>)
   bb196:	2201      	movs	r2, #1
   bb198:	a80a      	add	r0, sp, #40	; 0x28
   bb19a:	f003 f885 	bl	be2a8 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   bb19e:	4b1c      	ldr	r3, [pc, #112]	; (bb210 <_Z12statusUpdatev+0xe4>)
   bb1a0:	781b      	ldrb	r3, [r3, #0]
   bb1a2:	b9b3      	cbnz	r3, bb1d2 <_Z12statusUpdatev+0xa6>
   bb1a4:	4b1b      	ldr	r3, [pc, #108]	; (bb214 <_Z12statusUpdatev+0xe8>)
   bb1a6:	781b      	ldrb	r3, [r3, #0]
   bb1a8:	b99b      	cbnz	r3, bb1d2 <_Z12statusUpdatev+0xa6>
   bb1aa:	8823      	ldrh	r3, [r4, #0]
   bb1ac:	b1a3      	cbz	r3, bb1d8 <_Z12statusUpdatev+0xac>
   bb1ae:	f013 0303 	ands.w	r3, r3, #3
   bb1b2:	d111      	bne.n	bb1d8 <_Z12statusUpdatev+0xac>
            sendData(updateStr,0,false,false,true);     //Only send out over LTE
   bb1b4:	2201      	movs	r2, #1
   bb1b6:	9200      	str	r2, [sp, #0]
   bb1b8:	4619      	mov	r1, r3
   bb1ba:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   bb1bc:	a80a      	add	r0, sp, #40	; 0x28
   bb1be:	f7ff fed1 	bl	baf64 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;            //Decrement a large coounter for the LTE status. This stops sending the status over LTE after a while to not burn up monthly quota. Should be recovering bots if on cell only
   bb1c2:	8823      	ldrh	r3, [r4, #0]
   bb1c4:	b10b      	cbz	r3, bb1ca <_Z12statusUpdatev+0x9e>
   bb1c6:	3b01      	subs	r3, #1
   bb1c8:	8023      	strh	r3, [r4, #0]
        statusReady = false;                            //Clear ready flag
   bb1ca:	2300      	movs	r3, #0
   bb1cc:	702b      	strb	r3, [r5, #0]
}
   bb1ce:	b019      	add	sp, #100	; 0x64
   bb1d0:	bd30      	pop	{r4, r5, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;  //Otherwise, we're sending updates over BLE or XBee, reset counter for cellular
   bb1d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   bb1d6:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   bb1d8:	2100      	movs	r1, #0
   bb1da:	2301      	movs	r3, #1
   bb1dc:	9100      	str	r1, [sp, #0]
   bb1de:	461a      	mov	r2, r3
   bb1e0:	e7ec      	b.n	bb1bc <_Z12statusUpdatev+0x90>
   bb1e2:	bf00      	nop
   bb1e4:	2003e5c8 	.word	0x2003e5c8
   bb1e8:	000c791d 	.word	0x000c791d
   bb1ec:	2003dd66 	.word	0x2003dd66
   bb1f0:	2003dd98 	.word	0x2003dd98
   bb1f4:	2003e584 	.word	0x2003e584
   bb1f8:	2003dd94 	.word	0x2003dd94
   bb1fc:	2003dd90 	.word	0x2003dd90
   bb200:	2003ded8 	.word	0x2003ded8
   bb204:	2003ddfc 	.word	0x2003ddfc
   bb208:	2003e5a8 	.word	0x2003e5a8
   bb20c:	000c7936 	.word	0x000c7936
   bb210:	2003dd30 	.word	0x2003dd30
   bb214:	2003dd78 	.word	0x2003dd78

000bb218 <_Z13sensorHandlerv>:
void sensorHandler(){
   bb218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   bb21c:	4d60      	ldr	r5, [pc, #384]	; (bb3a0 <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   bb21e:	b097      	sub	sp, #92	; 0x5c
   bb220:	f002 fd44 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   bb224:	682b      	ldr	r3, [r5, #0]
   bb226:	4283      	cmp	r3, r0
   bb228:	f080 8139 	bcs.w	bb49e <_Z13sensorHandlerv+0x286>
   bb22c:	4e5d      	ldr	r6, [pc, #372]	; (bb3a4 <_Z13sensorHandlerv+0x18c>)
   bb22e:	7833      	ldrb	r3, [r6, #0]
   bb230:	2b00      	cmp	r3, #0
   bb232:	f000 8134 	beq.w	bb49e <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){    //Request 20 bytes from the PH sensor
   bb236:	f006 ff09 	bl	c204c <_Z19__fetch_global_Wirev>
   bb23a:	2301      	movs	r3, #1
   bb23c:	2214      	movs	r2, #20
   bb23e:	2163      	movs	r1, #99	; 0x63
   bb240:	f004 fe03 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
   bb244:	b1e8      	cbz	r0, bb282 <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   bb246:	f006 ff01 	bl	c204c <_Z19__fetch_global_Wirev>
   bb24a:	6803      	ldr	r3, [r0, #0]
   bb24c:	695b      	ldr	r3, [r3, #20]
   bb24e:	4798      	blx	r3
            int c = 0;                          //Index variable for the temporary string
   bb250:	ac11      	add	r4, sp, #68	; 0x44
   bb252:	4627      	mov	r7, r4
            while(Wire.available()){            // slave may send less than requested
   bb254:	f006 fefa 	bl	c204c <_Z19__fetch_global_Wirev>
   bb258:	6803      	ldr	r3, [r0, #0]
   bb25a:	691b      	ldr	r3, [r3, #16]
   bb25c:	4798      	blx	r3
   bb25e:	b138      	cbz	r0, bb270 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();   //Read each of the bytes returned by the sensor into a string
   bb260:	f006 fef4 	bl	c204c <_Z19__fetch_global_Wirev>
   bb264:	6803      	ldr	r3, [r0, #0]
   bb266:	695b      	ldr	r3, [r3, #20]
   bb268:	4798      	blx	r3
   bb26a:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){            // slave may send less than requested
   bb26e:	e7f1      	b.n	bb254 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);          //Convert the string to a float and store it in the global pH variable
   bb270:	4638      	mov	r0, r7
   bb272:	f009 f931 	bl	c44d8 <atof>
   bb276:	ec51 0b10 	vmov	r0, r1, d0
   bb27a:	f009 f8b9 	bl	c43f0 <__aeabi_d2f>
   bb27e:	4b4a      	ldr	r3, [pc, #296]	; (bb3a8 <_Z13sensorHandlerv+0x190>)
   bb280:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   bb282:	f006 fee3 	bl	c204c <_Z19__fetch_global_Wirev>
   bb286:	2301      	movs	r3, #1
   bb288:	2214      	movs	r2, #20
   bb28a:	2164      	movs	r1, #100	; 0x64
   bb28c:	f004 fddd 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
   bb290:	b1e8      	cbz	r0, bb2ce <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   bb292:	f006 fedb 	bl	c204c <_Z19__fetch_global_Wirev>
   bb296:	6803      	ldr	r3, [r0, #0]
   bb298:	695b      	ldr	r3, [r3, #20]
   bb29a:	4798      	blx	r3
            int c = 0;
   bb29c:	ac11      	add	r4, sp, #68	; 0x44
   bb29e:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   bb2a0:	f006 fed4 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2a4:	6803      	ldr	r3, [r0, #0]
   bb2a6:	691b      	ldr	r3, [r3, #16]
   bb2a8:	4798      	blx	r3
   bb2aa:	b138      	cbz	r0, bb2bc <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   bb2ac:	f006 fece 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2b0:	6803      	ldr	r3, [r0, #0]
   bb2b2:	695b      	ldr	r3, [r3, #20]
   bb2b4:	4798      	blx	r3
   bb2b6:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   bb2ba:	e7f1      	b.n	bb2a0 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   bb2bc:	4638      	mov	r0, r7
   bb2be:	f009 f90b 	bl	c44d8 <atof>
   bb2c2:	ec51 0b10 	vmov	r0, r1, d0
   bb2c6:	f009 f893 	bl	c43f0 <__aeabi_d2f>
   bb2ca:	4b38      	ldr	r3, [pc, #224]	; (bb3ac <_Z13sensorHandlerv+0x194>)
   bb2cc:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   bb2ce:	f006 febd 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2d2:	2301      	movs	r3, #1
   bb2d4:	2214      	movs	r2, #20
   bb2d6:	2165      	movs	r1, #101	; 0x65
   bb2d8:	f004 fdb7 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
   bb2dc:	b1e8      	cbz	r0, bb31a <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   bb2de:	f006 feb5 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2e2:	6803      	ldr	r3, [r0, #0]
   bb2e4:	695b      	ldr	r3, [r3, #20]
   bb2e6:	4798      	blx	r3
            int c = 0;
   bb2e8:	ac11      	add	r4, sp, #68	; 0x44
   bb2ea:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   bb2ec:	f006 feae 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2f0:	6803      	ldr	r3, [r0, #0]
   bb2f2:	691b      	ldr	r3, [r3, #16]
   bb2f4:	4798      	blx	r3
   bb2f6:	b138      	cbz	r0, bb308 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   bb2f8:	f006 fea8 	bl	c204c <_Z19__fetch_global_Wirev>
   bb2fc:	6803      	ldr	r3, [r0, #0]
   bb2fe:	695b      	ldr	r3, [r3, #20]
   bb300:	4798      	blx	r3
   bb302:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   bb306:	e7f1      	b.n	bb2ec <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   bb308:	4638      	mov	r0, r7
   bb30a:	f009 f8e5 	bl	c44d8 <atof>
   bb30e:	ec51 0b10 	vmov	r0, r1, d0
   bb312:	f009 f86d 	bl	c43f0 <__aeabi_d2f>
   bb316:	4b26      	ldr	r3, [pc, #152]	; (bb3b0 <_Z13sensorHandlerv+0x198>)
   bb318:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   bb31a:	f006 fe97 	bl	c204c <_Z19__fetch_global_Wirev>
   bb31e:	2301      	movs	r3, #1
   bb320:	2214      	movs	r2, #20
   bb322:	2166      	movs	r1, #102	; 0x66
   bb324:	f004 fd91 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
   bb328:	b1e8      	cbz	r0, bb366 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   bb32a:	f006 fe8f 	bl	c204c <_Z19__fetch_global_Wirev>
   bb32e:	6803      	ldr	r3, [r0, #0]
   bb330:	695b      	ldr	r3, [r3, #20]
   bb332:	4798      	blx	r3
            int c = 0;
   bb334:	ac11      	add	r4, sp, #68	; 0x44
   bb336:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   bb338:	f006 fe88 	bl	c204c <_Z19__fetch_global_Wirev>
   bb33c:	6803      	ldr	r3, [r0, #0]
   bb33e:	691b      	ldr	r3, [r3, #16]
   bb340:	4798      	blx	r3
   bb342:	b138      	cbz	r0, bb354 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   bb344:	f006 fe82 	bl	c204c <_Z19__fetch_global_Wirev>
   bb348:	6803      	ldr	r3, [r0, #0]
   bb34a:	695b      	ldr	r3, [r3, #20]
   bb34c:	4798      	blx	r3
   bb34e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   bb352:	e7f1      	b.n	bb338 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   bb354:	4638      	mov	r0, r7
   bb356:	f009 f8bf 	bl	c44d8 <atof>
   bb35a:	ec51 0b10 	vmov	r0, r1, d0
   bb35e:	f009 f847 	bl	c43f0 <__aeabi_d2f>
   bb362:	4b14      	ldr	r3, [pc, #80]	; (bb3b4 <_Z13sensorHandlerv+0x19c>)
   bb364:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   bb366:	f006 fe71 	bl	c204c <_Z19__fetch_global_Wirev>
   bb36a:	2301      	movs	r3, #1
   bb36c:	2214      	movs	r2, #20
   bb36e:	2161      	movs	r1, #97	; 0x61
   bb370:	f004 fd6b 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
   bb374:	b348      	cbz	r0, bb3ca <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   bb376:	f006 fe69 	bl	c204c <_Z19__fetch_global_Wirev>
   bb37a:	6803      	ldr	r3, [r0, #0]
   bb37c:	695b      	ldr	r3, [r3, #20]
   bb37e:	4798      	blx	r3
            int c = 0;
   bb380:	ac11      	add	r4, sp, #68	; 0x44
   bb382:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   bb384:	f006 fe62 	bl	c204c <_Z19__fetch_global_Wirev>
   bb388:	6803      	ldr	r3, [r0, #0]
   bb38a:	691b      	ldr	r3, [r3, #16]
   bb38c:	4798      	blx	r3
   bb38e:	b198      	cbz	r0, bb3b8 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   bb390:	f006 fe5c 	bl	c204c <_Z19__fetch_global_Wirev>
   bb394:	6803      	ldr	r3, [r0, #0]
   bb396:	695b      	ldr	r3, [r3, #20]
   bb398:	4798      	blx	r3
   bb39a:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   bb39e:	e7f1      	b.n	bb384 <_Z13sensorHandlerv+0x16c>
   bb3a0:	2003dda8 	.word	0x2003dda8
   bb3a4:	2003ddac 	.word	0x2003ddac
   bb3a8:	2003e554 	.word	0x2003e554
   bb3ac:	2003e550 	.word	0x2003e550
   bb3b0:	2003e548 	.word	0x2003e548
   bb3b4:	2003e558 	.word	0x2003e558
            senseDO = atof(addrSense);
   bb3b8:	4638      	mov	r0, r7
   bb3ba:	f009 f88d 	bl	c44d8 <atof>
   bb3be:	ec51 0b10 	vmov	r0, r1, d0
   bb3c2:	f009 f815 	bl	c43f0 <__aeabi_d2f>
   bb3c6:	4b7a      	ldr	r3, [pc, #488]	; (bb5b0 <_Z13sensorHandlerv+0x398>)
   bb3c8:	6018      	str	r0, [r3, #0]
        dataWait = false;                       //Set flag false until next data request has been made
   bb3ca:	2300      	movs	r3, #0
   bb3cc:	7033      	strb	r3, [r6, #0]
        if(logSensors){                         //Log sensors to SD card if enabled
   bb3ce:	4b79      	ldr	r3, [pc, #484]	; (bb5b4 <_Z13sensorHandlerv+0x39c>)
   bb3d0:	781b      	ldrb	r3, [r3, #0]
   bb3d2:	2b00      	cmp	r3, #0
   bb3d4:	d063      	beq.n	bb49e <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   bb3d6:	f006 fbf1 	bl	c1bbc <_ZN9TimeClass5monthEv>
   bb3da:	900f      	str	r0, [sp, #60]	; 0x3c
   bb3dc:	f006 fbe2 	bl	c1ba4 <_ZN9TimeClass3dayEv>
   bb3e0:	4604      	mov	r4, r0
   bb3e2:	f006 fbf3 	bl	c1bcc <_ZN9TimeClass4yearEv>
   bb3e6:	4606      	mov	r6, r0
   bb3e8:	f006 fbb8 	bl	c1b5c <_ZN9TimeClass4hourEv>
   bb3ec:	4607      	mov	r7, r0
   bb3ee:	f006 fbc1 	bl	c1b74 <_ZN9TimeClass6minuteEv>
   bb3f2:	4680      	mov	r8, r0
   bb3f4:	f006 fbca 	bl	c1b8c <_ZN9TimeClass6secondEv>
   bb3f8:	9400      	str	r4, [sp, #0]
   bb3fa:	4c6f      	ldr	r4, [pc, #444]	; (bb5b8 <_Z13sensorHandlerv+0x3a0>)
   bb3fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bb3fe:	4a6f      	ldr	r2, [pc, #444]	; (bb5bc <_Z13sensorHandlerv+0x3a4>)
   bb400:	f8df 91d8 	ldr.w	r9, [pc, #472]	; bb5dc <_Z13sensorHandlerv+0x3c4>
   bb404:	f8df b1d8 	ldr.w	fp, [pc, #472]	; bb5e0 <_Z13sensorHandlerv+0x3c8>
   bb408:	f8df a1a4 	ldr.w	sl, [pc, #420]	; bb5b0 <_Z13sensorHandlerv+0x398>
   bb40c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   bb410:	e9cd 6701 	strd	r6, r7, [sp, #4]
   bb414:	2110      	movs	r1, #16
   bb416:	a811      	add	r0, sp, #68	; 0x44
   bb418:	f002 ff56 	bl	be2c8 <snprintf>
            if(!myFile.isOpen()){               //Print out each of the global sensor values
   bb41c:	7c22      	ldrb	r2, [r4, #16]
   bb41e:	4b68      	ldr	r3, [pc, #416]	; (bb5c0 <_Z13sensorHandlerv+0x3a8>)
   bb420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; bb5e4 <_Z13sensorHandlerv+0x3cc>
   bb424:	4f67      	ldr	r7, [pc, #412]	; (bb5c4 <_Z13sensorHandlerv+0x3ac>)
   bb426:	4e68      	ldr	r6, [pc, #416]	; (bb5c8 <_Z13sensorHandlerv+0x3b0>)
   bb428:	2a00      	cmp	r2, #0
   bb42a:	f040 8094 	bne.w	bb556 <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   bb42e:	f244 2202 	movw	r2, #16898	; 0x4202
   bb432:	4966      	ldr	r1, [pc, #408]	; (bb5cc <_Z13sensorHandlerv+0x3b4>)
   bb434:	f104 0010 	add.w	r0, r4, #16
   bb438:	f7fe fa90 	bl	b995c <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   bb43c:	4b60      	ldr	r3, [pc, #384]	; (bb5c0 <_Z13sensorHandlerv+0x3a8>)
   bb43e:	6818      	ldr	r0, [r3, #0]
   bb440:	f008 fc86 	bl	c3d50 <__aeabi_f2d>
   bb444:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   bb448:	f8db 0000 	ldr.w	r0, [fp]
   bb44c:	f008 fc80 	bl	c3d50 <__aeabi_f2d>
   bb450:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   bb454:	f8da 0000 	ldr.w	r0, [sl]
   bb458:	f008 fc7a 	bl	c3d50 <__aeabi_f2d>
   bb45c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb460:	f8d9 0000 	ldr.w	r0, [r9]
   bb464:	f008 fc74 	bl	c3d50 <__aeabi_f2d>
   bb468:	e9cd 0106 	strd	r0, r1, [sp, #24]
   bb46c:	f8d8 0000 	ldr.w	r0, [r8]
   bb470:	f008 fc6e 	bl	c3d50 <__aeabi_f2d>
   bb474:	e9cd 0104 	strd	r0, r1, [sp, #16]
   bb478:	6838      	ldr	r0, [r7, #0]
   bb47a:	f008 fc69 	bl	c3d50 <__aeabi_f2d>
   bb47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb482:	6830      	ldr	r0, [r6, #0]
   bb484:	f008 fc64 	bl	c3d50 <__aeabi_f2d>
   bb488:	aa11      	add	r2, sp, #68	; 0x44
   bb48a:	e9cd 0100 	strd	r0, r1, [sp]
   bb48e:	4950      	ldr	r1, [pc, #320]	; (bb5d0 <_Z13sensorHandlerv+0x3b8>)
   bb490:	4620      	mov	r0, r4
   bb492:	f7fe f8f5 	bl	b9680 <_ZN5Print8printlnfEPKcz>
                myFile.close();
   bb496:	f104 0010 	add.w	r0, r4, #16
   bb49a:	f001 f9cb 	bl	bc834 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){                  //Check time to see if we should request more data
   bb49e:	4c4d      	ldr	r4, [pc, #308]	; (bb5d4 <_Z13sensorHandlerv+0x3bc>)
   bb4a0:	f002 fc04 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   bb4a4:	6823      	ldr	r3, [r4, #0]
   bb4a6:	4283      	cmp	r3, r0
   bb4a8:	d252      	bcs.n	bb550 <_Z13sensorHandlerv+0x338>
   bb4aa:	f002 fbff 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;   //Calculate next time to request data from the sensors
   bb4ae:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   bb4b2:	6020      	str	r0, [r4, #0]
   bb4b4:	f002 fbfa 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;   //Calculate the time to read the data that has just been requested
   bb4b8:	f200 3039 	addw	r0, r0, #825	; 0x339
   bb4bc:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);         //call the circuit by its ID number.
   bb4be:	f006 fdc5 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4c2:	2163      	movs	r1, #99	; 0x63
   bb4c4:	f004 fcda 	bl	bfe7c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   bb4c8:	f006 fdc0 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4cc:	2172      	movs	r1, #114	; 0x72
   bb4ce:	f7fe f861 	bl	b9594 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   bb4d2:	f006 fdbb 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4d6:	f004 fcd8 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);          //call the circuit by its ID number.
   bb4da:	f006 fdb7 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4de:	2164      	movs	r1, #100	; 0x64
   bb4e0:	f004 fccc 	bl	bfe7c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   bb4e4:	f006 fdb2 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4e8:	2172      	movs	r1, #114	; 0x72
   bb4ea:	f7fe f853 	bl	b9594 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   bb4ee:	f006 fdad 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4f2:	f004 fcca 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);           //call the circuit by its ID number.
   bb4f6:	f006 fda9 	bl	c204c <_Z19__fetch_global_Wirev>
   bb4fa:	2165      	movs	r1, #101	; 0x65
   bb4fc:	f004 fcbe 	bl	bfe7c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   bb500:	f006 fda4 	bl	c204c <_Z19__fetch_global_Wirev>
   bb504:	2172      	movs	r1, #114	; 0x72
   bb506:	f7fe f845 	bl	b9594 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   bb50a:	f006 fd9f 	bl	c204c <_Z19__fetch_global_Wirev>
   bb50e:	f004 fcbc 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);       //call the circuit by its ID number.
   bb512:	f006 fd9b 	bl	c204c <_Z19__fetch_global_Wirev>
   bb516:	2166      	movs	r1, #102	; 0x66
   bb518:	f004 fcb0 	bl	bfe7c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   bb51c:	f006 fd96 	bl	c204c <_Z19__fetch_global_Wirev>
   bb520:	2172      	movs	r1, #114	; 0x72
   bb522:	f7fe f837 	bl	b9594 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   bb526:	f006 fd91 	bl	c204c <_Z19__fetch_global_Wirev>
   bb52a:	f004 fcae 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);         //call the circuit by its ID number.
   bb52e:	f006 fd8d 	bl	c204c <_Z19__fetch_global_Wirev>
   bb532:	2161      	movs	r1, #97	; 0x61
   bb534:	f004 fca2 	bl	bfe7c <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   bb538:	f006 fd88 	bl	c204c <_Z19__fetch_global_Wirev>
   bb53c:	2172      	movs	r1, #114	; 0x72
   bb53e:	f7fe f829 	bl	b9594 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   bb542:	f006 fd83 	bl	c204c <_Z19__fetch_global_Wirev>
   bb546:	f004 fca0 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   bb54a:	4b23      	ldr	r3, [pc, #140]	; (bb5d8 <_Z13sensorHandlerv+0x3c0>)
   bb54c:	2201      	movs	r2, #1
   bb54e:	701a      	strb	r2, [r3, #0]
}
   bb550:	b017      	add	sp, #92	; 0x5c
   bb552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   bb556:	6818      	ldr	r0, [r3, #0]
   bb558:	f008 fbfa 	bl	c3d50 <__aeabi_f2d>
   bb55c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   bb560:	f8db 0000 	ldr.w	r0, [fp]
   bb564:	f008 fbf4 	bl	c3d50 <__aeabi_f2d>
   bb568:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   bb56c:	f8da 0000 	ldr.w	r0, [sl]
   bb570:	f008 fbee 	bl	c3d50 <__aeabi_f2d>
   bb574:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb578:	f8d9 0000 	ldr.w	r0, [r9]
   bb57c:	f008 fbe8 	bl	c3d50 <__aeabi_f2d>
   bb580:	e9cd 0106 	strd	r0, r1, [sp, #24]
   bb584:	f8d8 0000 	ldr.w	r0, [r8]
   bb588:	f008 fbe2 	bl	c3d50 <__aeabi_f2d>
   bb58c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   bb590:	6838      	ldr	r0, [r7, #0]
   bb592:	f008 fbdd 	bl	c3d50 <__aeabi_f2d>
   bb596:	e9cd 0102 	strd	r0, r1, [sp, #8]
   bb59a:	6830      	ldr	r0, [r6, #0]
   bb59c:	f008 fbd8 	bl	c3d50 <__aeabi_f2d>
   bb5a0:	aa11      	add	r2, sp, #68	; 0x44
   bb5a2:	e9cd 0100 	strd	r0, r1, [sp]
   bb5a6:	490a      	ldr	r1, [pc, #40]	; (bb5d0 <_Z13sensorHandlerv+0x3b8>)
   bb5a8:	4620      	mov	r0, r4
   bb5aa:	f7fe f869 	bl	b9680 <_ZN5Print8printlnfEPKcz>
   bb5ae:	e776      	b.n	bb49e <_Z13sensorHandlerv+0x286>
   bb5b0:	2003e54c 	.word	0x2003e54c
   bb5b4:	2003ded5 	.word	0x2003ded5
   bb5b8:	2003defc 	.word	0x2003defc
   bb5bc:	000c781a 	.word	0x000c781a
   bb5c0:	2003e548 	.word	0x2003e548
   bb5c4:	2003ded8 	.word	0x2003ded8
   bb5c8:	2003ddfc 	.word	0x2003ddfc
   bb5cc:	2003ddae 	.word	0x2003ddae
   bb5d0:	000c7957 	.word	0x000c7957
   bb5d4:	2003e55c 	.word	0x2003e55c
   bb5d8:	2003ddac 	.word	0x2003ddac
   bb5dc:	2003e554 	.word	0x2003e554
   bb5e0:	2003e550 	.word	0x2003e550
   bb5e4:	2003e558 	.word	0x2003e558

000bb5e8 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   bb5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   bb5ec:	4e3c      	ldr	r6, [pc, #240]	; (bb6e0 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   bb5ee:	f8df 8104 	ldr.w	r8, [pc, #260]	; bb6f4 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   bb5f2:	f8df 9104 	ldr.w	r9, [pc, #260]	; bb6f8 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   bb5f6:	b089      	sub	sp, #36	; 0x24
   bb5f8:	af00      	add	r7, sp, #0
    while(Serial1.available()){                         //Read data from the XBee buffer
   bb5fa:	f006 fd67 	bl	c20cc <_Z22__fetch_global_Serial1v>
   bb5fe:	6803      	ldr	r3, [r0, #0]
   bb600:	691b      	ldr	r3, [r3, #16]
   bb602:	4798      	blx	r3
   bb604:	2800      	cmp	r0, #0
   bb606:	d066      	beq.n	bb6d6 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   bb608:	f006 fd60 	bl	c20cc <_Z22__fetch_global_Serial1v>
   bb60c:	220a      	movs	r2, #10
   bb60e:	4601      	mov	r1, r0
   bb610:	4638      	mov	r0, r7
   bb612:	f006 f903 	bl	c181c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   bb616:	68bb      	ldr	r3, [r7, #8]
   bb618:	3307      	adds	r3, #7
   bb61a:	f023 0307 	bic.w	r3, r3, #7
    }
   bb61e:	466d      	mov	r5, sp
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   bb620:	ebad 0d03 	sub.w	sp, sp, r3
   bb624:	46ea      	mov	sl, sp
   bb626:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   bb628:	68b9      	ldr	r1, [r7, #8]
   bb62a:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);    //Loop over characters and copy them into char array
   bb62e:	458b      	cmp	fp, r1
   bb630:	f103 0401 	add.w	r4, r3, #1
   bb634:	d207      	bcs.n	bb646 <_Z11XBeeHandlerv+0x5e>
   bb636:	4659      	mov	r1, fp
   bb638:	4638      	mov	r0, r7
   bb63a:	f006 f9e7 	bl	c1a0c <_ZNK6String6charAtEj>
   bb63e:	4623      	mov	r3, r4
   bb640:	f80a 000b 	strb.w	r0, [sl, fp]
   bb644:	e7f0      	b.n	bb628 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;      //If there was a carriage return, then get rid of it and set to terminate character
   bb646:	2901      	cmp	r1, #1
   bb648:	d90a      	bls.n	bb660 <_Z11XBeeHandlerv+0x78>
   bb64a:	3901      	subs	r1, #1
   bb64c:	4638      	mov	r0, r7
   bb64e:	f006 f9dd 	bl	c1a0c <_ZNK6String6charAtEj>
   bb652:	280d      	cmp	r0, #13
   bb654:	bf01      	itttt	eq
   bb656:	68bb      	ldreq	r3, [r7, #8]
   bb658:	4453      	addeq	r3, sl
   bb65a:	2200      	moveq	r2, #0
   bb65c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   bb660:	f006 fb88 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb664:	4631      	mov	r1, r6
   bb666:	f005 ff0e 	bl	c1486 <_ZN5Print7printlnEPKc>
        Serial.println(data);                           //Print out command for debugging
   bb66a:	f006 fb83 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb66e:	6839      	ldr	r1, [r7, #0]
   bb670:	f005 ff09 	bl	c1486 <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);                  //Process the command received over Xbee using the dictionary
   bb674:	2201      	movs	r2, #1
   bb676:	2102      	movs	r1, #2
   bb678:	4650      	mov	r0, sl
   bb67a:	f7fe fa2b 	bl	b9ad4 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   bb67e:	f89a 3000 	ldrb.w	r3, [sl]
   bb682:	3b42      	subs	r3, #66	; 0x42
   bb684:	2b01      	cmp	r3, #1
   bb686:	d803      	bhi.n	bb690 <_Z11XBeeHandlerv+0xa8>
   bb688:	f002 fb10 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   bb68c:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   bb690:	f899 3000 	ldrb.w	r3, [r9]
   bb694:	b1d3      	cbz	r3, bb6cc <_Z11XBeeHandlerv+0xe4>
   bb696:	4813      	ldr	r0, [pc, #76]	; (bb6e4 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   bb698:	7c03      	ldrb	r3, [r0, #16]
   bb69a:	b92b      	cbnz	r3, bb6a8 <_Z11XBeeHandlerv+0xc0>
   bb69c:	4912      	ldr	r1, [pc, #72]	; (bb6e8 <_Z11XBeeHandlerv+0x100>)
   bb69e:	f244 2202 	movw	r2, #16898	; 0x4202
   bb6a2:	3010      	adds	r0, #16
   bb6a4:	f7fe f95a 	bl	b995c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   bb6a8:	4639      	mov	r1, r7
   bb6aa:	f107 0010 	add.w	r0, r7, #16
   bb6ae:	f006 f963 	bl	c1978 <_ZN6StringC1ERKS_>
   bb6b2:	490e      	ldr	r1, [pc, #56]	; (bb6ec <_Z11XBeeHandlerv+0x104>)
   bb6b4:	480b      	ldr	r0, [pc, #44]	; (bb6e4 <_Z11XBeeHandlerv+0xfc>)
   bb6b6:	f107 0210 	add.w	r2, r7, #16
   bb6ba:	f7fd ffe1 	bl	b9680 <_ZN5Print8printlnfEPKcz>
   bb6be:	f107 0010 	add.w	r0, r7, #16
   bb6c2:	f006 f8c3 	bl	c184c <_ZN6StringD1Ev>
            logFile.close();
   bb6c6:	480a      	ldr	r0, [pc, #40]	; (bb6f0 <_Z11XBeeHandlerv+0x108>)
   bb6c8:	f001 f8b4 	bl	bc834 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   bb6cc:	4638      	mov	r0, r7
   bb6ce:	f006 f8bd 	bl	c184c <_ZN6StringD1Ev>
   bb6d2:	46ad      	mov	sp, r5
    while(Serial1.available()){                         //Read data from the XBee buffer
   bb6d4:	e791      	b.n	bb5fa <_Z11XBeeHandlerv+0x12>
}
   bb6d6:	3724      	adds	r7, #36	; 0x24
   bb6d8:	46bd      	mov	sp, r7
   bb6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb6de:	bf00      	nop
   bb6e0:	000c796f 	.word	0x000c796f
   bb6e4:	2003de7c 	.word	0x2003de7c
   bb6e8:	2003ddce 	.word	0x2003ddce
   bb6ec:	000c7981 	.word	0x000c7981
   bb6f0:	2003de8c 	.word	0x2003de8c
   bb6f4:	2003dd7c 	.word	0x2003dd7c
   bb6f8:	2003ded4 	.word	0x2003ded4

000bb6fc <_Z13dataOffloaderv>:
void dataOffloader(){
   bb6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb700:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   bb702:	f006 fb37 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb706:	4963      	ldr	r1, [pc, #396]	; (bb894 <_Z13dataOffloaderv+0x198>)
   bb708:	f005 febd 	bl	c1486 <_ZN5Print7printlnEPKc>
    myFile.close();
   bb70c:	4862      	ldr	r0, [pc, #392]	; (bb898 <_Z13dataOffloaderv+0x19c>)
   bb70e:	f001 f891 	bl	bc834 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   bb712:	4962      	ldr	r1, [pc, #392]	; (bb89c <_Z13dataOffloaderv+0x1a0>)
   bb714:	4862      	ldr	r0, [pc, #392]	; (bb8a0 <_Z13dataOffloaderv+0x1a4>)
   bb716:	2200      	movs	r2, #0
   bb718:	f7fe f920 	bl	b995c <_ZN7FatFile4openEPKci>
   bb71c:	b948      	cbnz	r0, bb732 <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   bb71e:	4b61      	ldr	r3, [pc, #388]	; (bb8a4 <_Z13dataOffloaderv+0x1a8>)
   bb720:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   bb722:	f006 fb27 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb726:	4960      	ldr	r1, [pc, #384]	; (bb8a8 <_Z13dataOffloaderv+0x1ac>)
}
   bb728:	b02d      	add	sp, #180	; 0xb4
   bb72a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   bb72e:	f005 beaa 	b.w	c1486 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   bb732:	f006 fb1f 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb736:	495d      	ldr	r1, [pc, #372]	; (bb8ac <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   bb738:	4d5d      	ldr	r5, [pc, #372]	; (bb8b0 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   bb73a:	f005 fea4 	bl	c1486 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   bb73e:	f003 f973 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb742:	f003 f9cf 	bl	beae4 <_ZNK8particle14BleLocalDevice9connectedEv>
   bb746:	4604      	mov	r4, r0
   bb748:	b948      	cbnz	r0, bb75e <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   bb74a:	f003 f96d 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb74e:	4622      	mov	r2, r4
   bb750:	4629      	mov	r1, r5
   bb752:	f003 fa1a 	bl	beb8a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   bb756:	200a      	movs	r0, #10
   bb758:	f002 fe02 	bl	be360 <delay>
    while(!BLE.connected()){
   bb75c:	e7ef      	b.n	bb73e <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   bb75e:	f006 fb09 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb762:	4954      	ldr	r1, [pc, #336]	; (bb8b4 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   bb764:	4f4e      	ldr	r7, [pc, #312]	; (bb8a0 <_Z13dataOffloaderv+0x1a4>)
   bb766:	4d4c      	ldr	r5, [pc, #304]	; (bb898 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   bb768:	f8df 816c 	ldr.w	r8, [pc, #364]	; bb8d8 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   bb76c:	f005 fe8b 	bl	c1486 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   bb770:	2200      	movs	r2, #0
   bb772:	4639      	mov	r1, r7
   bb774:	4628      	mov	r0, r5
   bb776:	f000 ffea 	bl	bc74e <_ZN7FatFile8openNextEPS_i>
   bb77a:	b1f8      	cbz	r0, bb7bc <_Z13dataOffloaderv+0xc0>
   bb77c:	f003 f954 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb780:	f003 f9b0 	bl	beae4 <_ZNK8particle14BleLocalDevice9connectedEv>
   bb784:	b1d0      	cbz	r0, bb7bc <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   bb786:	2220      	movs	r2, #32
   bb788:	a901      	add	r1, sp, #4
   bb78a:	4628      	mov	r0, r5
   bb78c:	f001 f9a6 	bl	bcadc <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   bb790:	f006 faf0 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb794:	4641      	mov	r1, r8
   bb796:	aa01      	add	r2, sp, #4
   bb798:	f7fd ff72 	bl	b9680 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   bb79c:	a801      	add	r0, sp, #4
   bb79e:	f008 ff6e 	bl	c467e <strlen>
   bb7a2:	ab01      	add	r3, sp, #4
   bb7a4:	3804      	subs	r0, #4
   bb7a6:	4418      	add	r0, r3
   bb7a8:	f008 ff72 	bl	c4690 <strlwr>
   bb7ac:	4942      	ldr	r1, [pc, #264]	; (bb8b8 <_Z13dataOffloaderv+0x1bc>)
   bb7ae:	f008 ffc8 	bl	c4742 <strstr>
   bb7b2:	b9d8      	cbnz	r0, bb7ec <_Z13dataOffloaderv+0xf0>
            myFile.close();
   bb7b4:	4628      	mov	r0, r5
   bb7b6:	f001 f83d 	bl	bc834 <_ZN7FatFile5closeEv>
   bb7ba:	e7d9      	b.n	bb770 <_Z13dataOffloaderv+0x74>
    logDir.close();
   bb7bc:	4838      	ldr	r0, [pc, #224]	; (bb8a0 <_Z13dataOffloaderv+0x1a4>)
   bb7be:	f001 f839 	bl	bc834 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   bb7c2:	2228      	movs	r2, #40	; 0x28
   bb7c4:	2100      	movs	r1, #0
   bb7c6:	a809      	add	r0, sp, #36	; 0x24
   bb7c8:	f008 fece 	bl	c4568 <memset>
    strcpy(fileCode,"filedone");
   bb7cc:	493b      	ldr	r1, [pc, #236]	; (bb8bc <_Z13dataOffloaderv+0x1c0>)
   bb7ce:	a809      	add	r0, sp, #36	; 0x24
   bb7d0:	f008 ff30 	bl	c4634 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   bb7d4:	2300      	movs	r3, #0
   bb7d6:	2228      	movs	r2, #40	; 0x28
   bb7d8:	a909      	add	r1, sp, #36	; 0x24
   bb7da:	4839      	ldr	r0, [pc, #228]	; (bb8c0 <_Z13dataOffloaderv+0x1c4>)
   bb7dc:	f003 f814 	bl	be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   bb7e0:	4b30      	ldr	r3, [pc, #192]	; (bb8a4 <_Z13dataOffloaderv+0x1a8>)
   bb7e2:	2200      	movs	r2, #0
   bb7e4:	701a      	strb	r2, [r3, #0]
}
   bb7e6:	b02d      	add	sp, #180	; 0xb4
   bb7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   bb7ec:	2228      	movs	r2, #40	; 0x28
   bb7ee:	2100      	movs	r1, #0
   bb7f0:	a809      	add	r0, sp, #36	; 0x24
   bb7f2:	f008 feb9 	bl	c4568 <memset>
            strcpy(fileCode,"filename");
   bb7f6:	4933      	ldr	r1, [pc, #204]	; (bb8c4 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   bb7f8:	4e33      	ldr	r6, [pc, #204]	; (bb8c8 <_Z13dataOffloaderv+0x1cc>)
   bb7fa:	f8df 90c4 	ldr.w	r9, [pc, #196]	; bb8c0 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   bb7fe:	a809      	add	r0, sp, #36	; 0x24
   bb800:	f008 ff18 	bl	c4634 <strcpy>
            strcat(fileCode,namebuf);
   bb804:	a901      	add	r1, sp, #4
   bb806:	a809      	add	r0, sp, #36	; 0x24
   bb808:	f008 fee4 	bl	c45d4 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   bb80c:	f006 fab2 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb810:	492e      	ldr	r1, [pc, #184]	; (bb8cc <_Z13dataOffloaderv+0x1d0>)
   bb812:	aa09      	add	r2, sp, #36	; 0x24
   bb814:	f7fd ff34 	bl	b9680 <_ZN5Print8printlnfEPKcz>
   bb818:	2300      	movs	r3, #0
   bb81a:	2228      	movs	r2, #40	; 0x28
   bb81c:	a909      	add	r1, sp, #36	; 0x24
   bb81e:	4828      	ldr	r0, [pc, #160]	; (bb8c0 <_Z13dataOffloaderv+0x1c4>)
   bb820:	f002 fff2 	bl	be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   bb824:	f006 faa6 	bl	c1d74 <_Z16_fetch_usbserialv>
   bb828:	4929      	ldr	r1, [pc, #164]	; (bb8d0 <_Z13dataOffloaderv+0x1d4>)
   bb82a:	aa01      	add	r2, sp, #4
   bb82c:	f7fd ff28 	bl	b9680 <_ZN5Print8printlnfEPKcz>
            delay(150);
   bb830:	2096      	movs	r0, #150	; 0x96
   bb832:	f002 fd95 	bl	be360 <delay>
            noInterrupts();
   bb836:	f004 fb57 	bl	bfee8 <_Z12noInterruptsv>
            while(myFile.available()){
   bb83a:	4630      	mov	r0, r6
   bb83c:	f7fd fdf0 	bl	b9420 <_ZN4File9availableEv>
   bb840:	4604      	mov	r4, r0
   bb842:	b188      	cbz	r0, bb868 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   bb844:	2264      	movs	r2, #100	; 0x64
   bb846:	2100      	movs	r1, #0
   bb848:	a813      	add	r0, sp, #76	; 0x4c
   bb84a:	f008 fe8d 	bl	c4568 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   bb84e:	aa13      	add	r2, sp, #76	; 0x4c
   bb850:	2364      	movs	r3, #100	; 0x64
   bb852:	210d      	movs	r1, #13
   bb854:	4630      	mov	r0, r6
   bb856:	f005 ffc9 	bl	c17ec <_ZN6Stream14readBytesUntilEcPcj>
   bb85a:	2300      	movs	r3, #0
   bb85c:	2264      	movs	r2, #100	; 0x64
   bb85e:	a913      	add	r1, sp, #76	; 0x4c
   bb860:	4648      	mov	r0, r9
   bb862:	f002 ffd1 	bl	be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   bb866:	e7e8      	b.n	bb83a <_Z13dataOffloaderv+0x13e>
            interrupts();
   bb868:	f004 fb40 	bl	bfeec <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   bb86c:	2228      	movs	r2, #40	; 0x28
   bb86e:	4621      	mov	r1, r4
   bb870:	a809      	add	r0, sp, #36	; 0x24
   bb872:	f008 fe79 	bl	c4568 <memset>
            strcpy(fileCode,"filecomp");
   bb876:	4917      	ldr	r1, [pc, #92]	; (bb8d4 <_Z13dataOffloaderv+0x1d8>)
   bb878:	a809      	add	r0, sp, #36	; 0x24
   bb87a:	f008 fedb 	bl	c4634 <strcpy>
   bb87e:	4623      	mov	r3, r4
   bb880:	2228      	movs	r2, #40	; 0x28
   bb882:	a909      	add	r1, sp, #36	; 0x24
   bb884:	480e      	ldr	r0, [pc, #56]	; (bb8c0 <_Z13dataOffloaderv+0x1c4>)
   bb886:	f002 ffbf 	bl	be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   bb88a:	2096      	movs	r0, #150	; 0x96
   bb88c:	f002 fd68 	bl	be360 <delay>
   bb890:	e790      	b.n	bb7b4 <_Z13dataOffloaderv+0xb8>
   bb892:	bf00      	nop
   bb894:	000c79a2 	.word	0x000c79a2
   bb898:	2003df0c 	.word	0x2003df0c
   bb89c:	000c79bf 	.word	0x000c79bf
   bb8a0:	2003de58 	.word	0x2003de58
   bb8a4:	2003e0b0 	.word	0x2003e0b0
   bb8a8:	000c79c1 	.word	0x000c79c1
   bb8ac:	000c79ee 	.word	0x000c79ee
   bb8b0:	2003dd84 	.word	0x2003dd84
   bb8b4:	000c7a0e 	.word	0x000c7a0e
   bb8b8:	000c783c 	.word	0x000c783c
   bb8bc:	000c7a4c 	.word	0x000c7a4c
   bb8c0:	2003e0a8 	.word	0x2003e0a8
   bb8c4:	000c7a55 	.word	0x000c7a55
   bb8c8:	2003defc 	.word	0x2003defc
   bb8cc:	000c7a5e 	.word	0x000c7a5e
   bb8d0:	000c7a71 	.word	0x000c7a71
   bb8d4:	000c7a99 	.word	0x000c7a99
   bb8d8:	000c7a23 	.word	0x000c7a23

000bb8dc <loop>:
void loop(){
   bb8dc:	b508      	push	{r3, lr}
    getPositionData();      //Grab position data from GPS and Compass
   bb8de:	f7ff f933 	bl	bab48 <_Z15getPositionDatav>
    readPowerSys();         //Read power from battery and solar panel
   bb8e2:	f7fe fe51 	bl	ba588 <_Z12readPowerSysv>
    sensorHandler();        //Read and request data from Atlas sensor
   bb8e6:	f7ff fc97 	bl	bb218 <_Z13sensorHandlerv>
    XBeeHandler();          //Check if a string has come in from XBee
   bb8ea:	f7ff fe7d 	bl	bb5e8 <_Z11XBeeHandlerv>
    statusUpdate();         //Check if a status update has to be sent out
   bb8ee:	f7ff fc1d 	bl	bb12c <_Z12statusUpdatev>
    updateMotors();         //Update the motor speeds dependent on the mode
   bb8f2:	f7ff fa07 	bl	bad04 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();    //Check if a signal to offload has been received
   bb8f6:	4b06      	ldr	r3, [pc, #24]	; (bb910 <loop+0x34>)
   bb8f8:	781b      	ldrb	r3, [r3, #0]
   bb8fa:	b10b      	cbz	r3, bb900 <loop+0x24>
   bb8fc:	f7ff fefe 	bl	bb6fc <_Z13dataOffloaderv>
    sendResponseData();     //Send sensor data if requested from the CC
   bb900:	f7ff fbaa 	bl	bb058 <_Z16sendResponseDatav>
}
   bb904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);              //Slow down the program a little bit, 10ms per loop
   bb908:	200a      	movs	r0, #10
   bb90a:	f002 bd29 	b.w	be360 <delay>
   bb90e:	bf00      	nop
   bb910:	2003e0b0 	.word	0x2003e0b0

000bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb914:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bb916:	e9d0 5300 	ldrd	r5, r3, [r0]
   bb91a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   bb91c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bb91e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   bb922:	42ae      	cmp	r6, r5
   bb924:	d004      	beq.n	bb930 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   bb926:	4628      	mov	r0, r5
   bb928:	f005 ff90 	bl	c184c <_ZN6StringD1Ev>
   bb92c:	3514      	adds	r5, #20
   bb92e:	e7f8      	b.n	bb922 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   bb930:	6820      	ldr	r0, [r4, #0]
   bb932:	f002 fca9 	bl	be288 <free>
    AllocatorT::free(data_);
}
   bb936:	4620      	mov	r0, r4
   bb938:	bd70      	pop	{r4, r5, r6, pc}

000bb93a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   bb93a:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb93c:	4616      	mov	r6, r2
   bb93e:	b08f      	sub	sp, #60	; 0x3c
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   bb940:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb942:	e9c0 2200 	strd	r2, r2, [r0]
   bb946:	4604      	mov	r4, r0
   bb948:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   bb94a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   bb94c:	4619      	mov	r1, r3
   bb94e:	a804      	add	r0, sp, #16
   bb950:	f002 ff1c 	bl	be78c <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   bb954:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb956:	4638      	mov	r0, r7
   bb958:	f002 ff18 	bl	be78c <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   bb95c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   bb95e:	9302      	str	r3, [sp, #8]
   bb960:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bb962:	4620      	mov	r0, r4
   bb964:	e9cd 7300 	strd	r7, r3, [sp]
   bb968:	4632      	mov	r2, r6
   bb96a:	ab04      	add	r3, sp, #16
   bb96c:	4629      	mov	r1, r5
   bb96e:	f003 fc8b 	bl	bf288 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   bb972:	4620      	mov	r0, r4
   bb974:	b00f      	add	sp, #60	; 0x3c
   bb976:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   bb978:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   bb97a:	4c0b      	ldr	r4, [pc, #44]	; (bb9a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   bb97c:	7821      	ldrb	r1, [r4, #0]
   bb97e:	f3bf 8f5b 	dmb	ish
   bb982:	f011 0101 	ands.w	r1, r1, #1
   bb986:	d10b      	bne.n	bb9a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb988:	4620      	mov	r0, r4
   bb98a:	9101      	str	r1, [sp, #4]
   bb98c:	f7f8 fb98 	bl	b40c0 <__cxa_guard_acquire>
   bb990:	9901      	ldr	r1, [sp, #4]
   bb992:	b128      	cbz	r0, bb9a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   bb994:	4805      	ldr	r0, [pc, #20]	; (bb9ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb996:	f005 fe56 	bl	c1646 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb99a:	4620      	mov	r0, r4
   bb99c:	f7f8 fb95 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   bb9a0:	4802      	ldr	r0, [pc, #8]	; (bb9ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   bb9a2:	b002      	add	sp, #8
   bb9a4:	bd10      	pop	{r4, pc}
   bb9a6:	bf00      	nop
   bb9a8:	2003dd24 	.word	0x2003dd24
   bb9ac:	2003dd28 	.word	0x2003dd28

000bb9b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   bb9b0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9b4:	4604      	mov	r4, r0
   bb9b6:	460d      	mov	r5, r1
   bb9b8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb9ba:	d916      	bls.n	bb9ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   bb9bc:	4290      	cmp	r0, r2
   bb9be:	d215      	bcs.n	bb9ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   bb9c0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   bb9c4:	1a75      	subs	r5, r6, r1
   bb9c6:	f1a1 0714 	sub.w	r7, r1, #20
   bb9ca:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb9cc:	42b7      	cmp	r7, r6
   bb9ce:	d01c      	beq.n	bba0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   bb9d0:	b12c      	cbz	r4, bb9de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   bb9d2:	4631      	mov	r1, r6
   bb9d4:	4620      	mov	r0, r4
   bb9d6:	f005 ffb5 	bl	c1944 <_ZN6StringC1EOS_>
   bb9da:	7c33      	ldrb	r3, [r6, #16]
   bb9dc:	7423      	strb	r3, [r4, #16]
   bb9de:	4630      	mov	r0, r6
   bb9e0:	f005 ff34 	bl	c184c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bb9e4:	3e14      	subs	r6, #20
   bb9e6:	3c14      	subs	r4, #20
   bb9e8:	e7f0      	b.n	bb9cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bb9ea:	d00e      	beq.n	bba0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   bb9ec:	42b5      	cmp	r5, r6
   bb9ee:	d00c      	beq.n	bba0a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   bb9f0:	b12c      	cbz	r4, bb9fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   bb9f2:	4629      	mov	r1, r5
   bb9f4:	4620      	mov	r0, r4
   bb9f6:	f005 ffa5 	bl	c1944 <_ZN6StringC1EOS_>
   bb9fa:	7c2b      	ldrb	r3, [r5, #16]
   bb9fc:	7423      	strb	r3, [r4, #16]
   bb9fe:	4628      	mov	r0, r5
   bba00:	f005 ff24 	bl	c184c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bba04:	3514      	adds	r5, #20
   bba06:	3414      	adds	r4, #20
   bba08:	e7f0      	b.n	bb9ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   bba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bba10:	2300      	movs	r3, #0
   bba12:	e9c0 3300 	strd	r3, r3, [r0]
   bba16:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bba18:	684f      	ldr	r7, [r1, #4]
   bba1a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bba1c:	4604      	mov	r4, r0
   bba1e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bba20:	dd23      	ble.n	bba6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bba22:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   bba26:	fb08 f007 	mul.w	r0, r8, r7
   bba2a:	f002 fc25 	bl	be278 <malloc>
            if (!d) {
   bba2e:	4605      	mov	r5, r0
   bba30:	b1d8      	cbz	r0, bba6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   bba32:	e9d4 1200 	ldrd	r1, r2, [r4]
   bba36:	fb08 1202 	mla	r2, r8, r2, r1
   bba3a:	f7ff ffb9 	bl	bb9b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bba3e:	6820      	ldr	r0, [r4, #0]
   bba40:	f002 fc22 	bl	be288 <free>
        data_ = d;
   bba44:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bba46:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bba48:	e9d6 7300 	ldrd	r7, r3, [r6]
   bba4c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   bba50:	45b8      	cmp	r8, r7
   bba52:	d008      	beq.n	bba66 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   bba54:	4639      	mov	r1, r7
   bba56:	4628      	mov	r0, r5
   bba58:	f005 ff8e 	bl	c1978 <_ZN6StringC1ERKS_>
   bba5c:	7c3b      	ldrb	r3, [r7, #16]
   bba5e:	742b      	strb	r3, [r5, #16]
   bba60:	3714      	adds	r7, #20
   bba62:	3514      	adds	r5, #20
   bba64:	e7f4      	b.n	bba50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   bba66:	6873      	ldr	r3, [r6, #4]
   bba68:	6063      	str	r3, [r4, #4]
}
   bba6a:	4620      	mov	r0, r4
   bba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bba70 <_GLOBAL__sub_I_SystemMode>:
   bba70:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   bba72:	4b85      	ldr	r3, [pc, #532]	; (bbc88 <_GLOBAL__sub_I_SystemMode+0x218>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   bba74:	4a85      	ldr	r2, [pc, #532]	; (bbc8c <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   bba76:	4d86      	ldr	r5, [pc, #536]	; (bbc90 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   bba78:	4f86      	ldr	r7, [pc, #536]	; (bbc94 <_GLOBAL__sub_I_SystemMode+0x224>)
   bba7a:	2601      	movs	r6, #1
   bba7c:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bba7e:	4b86      	ldr	r3, [pc, #536]	; (bbc98 <_GLOBAL__sub_I_SystemMode+0x228>)
   bba80:	2400      	movs	r4, #0
   bba82:	b093      	sub	sp, #76	; 0x4c
    SleepResult() {}
   bba84:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bba86:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bba8a:	2003      	movs	r0, #3
   bba8c:	f002 fb18 	bl	be0c0 <set_system_mode>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   bba90:	e9cd 4401 	strd	r4, r4, [sp, #4]
   bba94:	682b      	ldr	r3, [r5, #0]
   bba96:	9300      	str	r3, [sp, #0]
   bba98:	4b80      	ldr	r3, [pc, #512]	; (bbc9c <_GLOBAL__sub_I_SystemMode+0x22c>)
   bba9a:	4981      	ldr	r1, [pc, #516]	; (bbca0 <_GLOBAL__sub_I_SystemMode+0x230>)
   bba9c:	681b      	ldr	r3, [r3, #0]
   bba9e:	4881      	ldr	r0, [pc, #516]	; (bbca4 <_GLOBAL__sub_I_SystemMode+0x234>)
   bbaa0:	f04f 0210 	mov.w	r2, #16
   bbaa4:	f7ff ff49 	bl	bb93a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   bbaa8:	4b7f      	ldr	r3, [pc, #508]	; (bbca8 <_GLOBAL__sub_I_SystemMode+0x238>)
   bbaaa:	9402      	str	r4, [sp, #8]
   bbaac:	9301      	str	r3, [sp, #4]
   bbaae:	682b      	ldr	r3, [r5, #0]
   bbab0:	9300      	str	r3, [sp, #0]
   bbab2:	4b7e      	ldr	r3, [pc, #504]	; (bbcac <_GLOBAL__sub_I_SystemMode+0x23c>)
   bbab4:	497e      	ldr	r1, [pc, #504]	; (bbcb0 <_GLOBAL__sub_I_SystemMode+0x240>)
   bbab6:	681b      	ldr	r3, [r3, #0]
   bbab8:	487e      	ldr	r0, [pc, #504]	; (bbcb4 <_GLOBAL__sub_I_SystemMode+0x244>)
   bbaba:	f04f 0204 	mov.w	r2, #4
   bbabe:	f7ff ff3c 	bl	bb93a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   bbac2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   bbac6:	682b      	ldr	r3, [r5, #0]
   bbac8:	9300      	str	r3, [sp, #0]
   bbaca:	4b7b      	ldr	r3, [pc, #492]	; (bbcb8 <_GLOBAL__sub_I_SystemMode+0x248>)
   bbacc:	497b      	ldr	r1, [pc, #492]	; (bbcbc <_GLOBAL__sub_I_SystemMode+0x24c>)
   bbace:	681b      	ldr	r3, [r3, #0]
   bbad0:	487b      	ldr	r0, [pc, #492]	; (bbcc0 <_GLOBAL__sub_I_SystemMode+0x250>)
   bbad2:	f04f 0210 	mov.w	r2, #16
   bbad6:	f7ff ff30 	bl	bb93a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   bbada:	e9cd 4401 	strd	r4, r4, [sp, #4]
   bbade:	682b      	ldr	r3, [r5, #0]
   bbae0:	9300      	str	r3, [sp, #0]
   bbae2:	4b78      	ldr	r3, [pc, #480]	; (bbcc4 <_GLOBAL__sub_I_SystemMode+0x254>)
   bbae4:	4978      	ldr	r1, [pc, #480]	; (bbcc8 <_GLOBAL__sub_I_SystemMode+0x258>)
   bbae6:	681b      	ldr	r3, [r3, #0]
   bbae8:	4878      	ldr	r0, [pc, #480]	; (bbccc <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   bbaea:	4d79      	ldr	r5, [pc, #484]	; (bbcd0 <_GLOBAL__sub_I_SystemMode+0x260>)
   bbaec:	f04f 0210 	mov.w	r2, #16
   bbaf0:	f7ff ff23 	bl	bb93a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                         //Advertising data
   bbaf4:	4877      	ldr	r0, [pc, #476]	; (bbcd4 <_GLOBAL__sub_I_SystemMode+0x264>)
   bbaf6:	f003 f9da 	bl	beeae <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bbafa:	4b77      	ldr	r3, [pc, #476]	; (bbcd8 <_GLOBAL__sub_I_SystemMode+0x268>)
   bbafc:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);           //Create timer for watchdog, which checks if certain methods of communication are available
   bbafe:	aa0e      	add	r2, sp, #56	; 0x38
   bbb00:	4623      	mov	r3, r4
   bbb02:	f643 2198 	movw	r1, #15000	; 0x3a98
   bbb06:	4875      	ldr	r0, [pc, #468]	; (bbcdc <_GLOBAL__sub_I_SystemMode+0x26c>)
	    _M_manager = &_My_handler::_M_manager;
   bbb08:	9510      	str	r5, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
   bbb0a:	9711      	str	r7, [sp, #68]	; 0x44
   bbb0c:	f7fd fe72 	bl	b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   bbb10:	a80e      	add	r0, sp, #56	; 0x38
   bbb12:	f7fd fe37 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bbb16:	4b72      	ldr	r3, [pc, #456]	; (bbce0 <_GLOBAL__sub_I_SystemMode+0x270>)
   bbb18:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(300,LEDHandler);                     //Create timer for LED, which updates the color of the LED based on what communication/hardware modes are available
   bbb1a:	aa0e      	add	r2, sp, #56	; 0x38
   bbb1c:	4623      	mov	r3, r4
   bbb1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   bbb22:	4870      	ldr	r0, [pc, #448]	; (bbce4 <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   bbb24:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   bbb28:	f7fd fe64 	bl	b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   bbb2c:	a80e      	add	r0, sp, #56	; 0x38
   bbb2e:	f7fd fe29 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bbb32:	4b6d      	ldr	r3, [pc, #436]	; (bbce8 <_GLOBAL__sub_I_SystemMode+0x278>)
   bbb34:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);             //Create timer for motor watchdog, which cuts off motors if messages from CC have not been received recently enough
   bbb36:	aa0e      	add	r2, sp, #56	; 0x38
   bbb38:	4623      	mov	r3, r4
   bbb3a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   bbb3e:	486b      	ldr	r0, [pc, #428]	; (bbcec <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_manager = &_My_handler::_M_manager;
   bbb40:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   bbb44:	f7fd fe56 	bl	b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   bbb48:	a80e      	add	r0, sp, #56	; 0x38
   bbb4a:	f7fd fe1b 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bbb4e:	4b68      	ldr	r3, [pc, #416]	; (bbcf0 <_GLOBAL__sub_I_SystemMode+0x280>)
   bbb50:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);            //Create timer for status, which calculates the status values that will be transmitted to CC and sets a flag for transmitting out the status
   bbb52:	aa0e      	add	r2, sp, #56	; 0x38
   bbb54:	4623      	mov	r3, r4
   bbb56:	f242 7110 	movw	r1, #10000	; 0x2710
   bbb5a:	4866      	ldr	r0, [pc, #408]	; (bbcf4 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_manager = &_My_handler::_M_manager;
   bbb5c:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   bbb60:	f7fd fe48 	bl	b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   bbb64:	a80e      	add	r0, sp, #56	; 0x38
   bbb66:	f7fd fe0d 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   bbb6a:	4b63      	ldr	r3, [pc, #396]	; (bbcf8 <_GLOBAL__sub_I_SystemMode+0x288>)
   bbb6c:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);    //Create timer for shutdown, which runs when the button is pressed to calculate if the button has been held for SHUTDOWN_HOLD seconds 
   bbb6e:	aa0e      	add	r2, sp, #56	; 0x38
   bbb70:	4623      	mov	r3, r4
   bbb72:	f640 31b8 	movw	r1, #3000	; 0xbb8
   bbb76:	4861      	ldr	r0, [pc, #388]	; (bbcfc <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   bbb78:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   bbb7c:	f7fd fe3a 	bl	b97f4 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   bbb80:	a80e      	add	r0, sp, #56	; 0x38
   bbb82:	f7fd fdff 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
SFE_UBLOX_GNSS myGPS;                           //GPS Buffer and Objects
   bbb86:	485e      	ldr	r0, [pc, #376]	; (bbd00 <_GLOBAL__sub_I_SystemMode+0x290>)
  explicit SdFat(SPIClass* spiPort) {
   bbb88:	4d5e      	ldr	r5, [pc, #376]	; (bbd04 <_GLOBAL__sub_I_SystemMode+0x294>)
   bbb8a:	f7f8 fd25 	bl	b45d8 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;                       //Compass object
   bbb8e:	485e      	ldr	r0, [pc, #376]	; (bbd08 <_GLOBAL__sub_I_SystemMode+0x298>)
   bbb90:	f7f8 facc 	bl	b412c <_ZN16Adafruit_LIS3MDLC1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   bbb94:	4622      	mov	r2, r4
   bbb96:	2114      	movs	r1, #20
   bbb98:	4630      	mov	r0, r6
   bbb9a:	f002 fab9 	bl	be110 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   bbb9e:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   bbba0:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   bbba2:	9200      	str	r2, [sp, #0]
   bbba4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   bbba8:	4632      	mov	r2, r6
   bbbaa:	4858      	ldr	r0, [pc, #352]	; (bbd0c <_GLOBAL__sub_I_SystemMode+0x29c>)
   bbbac:	9601      	str	r6, [sp, #4]
   bbbae:	f004 fbf5 	bl	c039c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   bbbb2:	f7ff fee1 	bl	bb978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bbbb6:	2364      	movs	r3, #100	; 0x64
   bbbb8:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   bbbbc:	4b54      	ldr	r3, [pc, #336]	; (bbd10 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   bbbbe:	606c      	str	r4, [r5, #4]
   bbbc0:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   bbbc4:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   bbbc8:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   bbbcc:	f885 6474 	strb.w	r6, [r5, #1140]	; 0x474
   bbbd0:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   bbbd4:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   bbbd8:	b908      	cbnz	r0, bbbde <_GLOBAL__sub_I_SystemMode+0x16e>
   bbbda:	f7ff fecd 	bl	bb978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   bbbde:	4a4d      	ldr	r2, [pc, #308]	; (bbd14 <_GLOBAL__sub_I_SystemMode+0x2a4>)
  File() {}
   bbbe0:	494d      	ldr	r1, [pc, #308]	; (bbd18 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   bbbe2:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bbbe6:	2300      	movs	r3, #0
   bbbe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   bbbec:	e9c2 3001 	strd	r3, r0, [r2, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   bbbf0:	6113      	str	r3, [r2, #16]
   bbbf2:	6011      	str	r1, [r2, #0]
   bbbf4:	4a49      	ldr	r2, [pc, #292]	; (bbd1c <_GLOBAL__sub_I_SystemMode+0x2ac>)
        capacity_(0) {
   bbbf6:	9307      	str	r3, [sp, #28]
   bbbf8:	e9c2 3001 	strd	r3, r0, [r2, #4]
   bbbfc:	6113      	str	r3, [r2, #16]
   bbbfe:	6011      	str	r1, [r2, #0]
   bbc00:	4a47      	ldr	r2, [pc, #284]	; (bbd20 <_GLOBAL__sub_I_SystemMode+0x2b0>)
        filter_(level, filters) {
   bbc02:	4c48      	ldr	r4, [pc, #288]	; (bbd24 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   bbc04:	6113      	str	r3, [r2, #16]
   bbc06:	e9c2 3001 	strd	r3, r0, [r2, #4]
   bbc0a:	6011      	str	r1, [r2, #0]
   bbc0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   bbc10:	f006 f8b0 	bl	c1d74 <_Z16_fetch_usbserialv>
   bbc14:	a905      	add	r1, sp, #20
   bbc16:	4605      	mov	r5, r0
   bbc18:	a808      	add	r0, sp, #32
   bbc1a:	f7ff fef7 	bl	bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   bbc1e:	a908      	add	r1, sp, #32
   bbc20:	a80b      	add	r0, sp, #44	; 0x2c
   bbc22:	f7ff fef3 	bl	bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bbc26:	4b40      	ldr	r3, [pc, #256]	; (bbd28 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   bbc28:	6023      	str	r3, [r4, #0]
   bbc2a:	a90b      	add	r1, sp, #44	; 0x2c
   bbc2c:	a80e      	add	r0, sp, #56	; 0x38
   bbc2e:	f7ff feed 	bl	bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bbc32:	aa0e      	add	r2, sp, #56	; 0x38
   bbc34:	211e      	movs	r1, #30
   bbc36:	1d20      	adds	r0, r4, #4
   bbc38:	f005 f84c 	bl	c0cd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bbc3c:	a80e      	add	r0, sp, #56	; 0x38
   bbc3e:	f7ff fe69 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bbc42:	a80b      	add	r0, sp, #44	; 0x2c
   bbc44:	f7ff fe66 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bbc48:	4b38      	ldr	r3, [pc, #224]	; (bbd2c <_GLOBAL__sub_I_SystemMode+0x2bc>)
   bbc4a:	6023      	str	r3, [r4, #0]
   bbc4c:	6225      	str	r5, [r4, #32]
   bbc4e:	a808      	add	r0, sp, #32
   bbc50:	f7ff fe60 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bbc54:	4b36      	ldr	r3, [pc, #216]	; (bbd30 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   bbc56:	6023      	str	r3, [r4, #0]
        Serial.begin();
   bbc58:	f006 f88c 	bl	c1d74 <_Z16_fetch_usbserialv>
   bbc5c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   bbc60:	f006 f878 	bl	c1d54 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   bbc64:	f004 fd18 	bl	c0698 <_ZN5spark10LogManager8instanceEv>
   bbc68:	4621      	mov	r1, r4
   bbc6a:	f004 ff09 	bl	c0a80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //Log Configuration
   bbc6e:	a805      	add	r0, sp, #20
   bbc70:	f7ff fe50 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL;                                     //Object for servo esc of left motor 
   bbc74:	482f      	ldr	r0, [pc, #188]	; (bbd34 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   bbc76:	f005 fca1 	bl	c15bc <_ZN5ServoC1Ev>
Servo ESCR;                                     //Object for servo esc of right motor
   bbc7a:	482f      	ldr	r0, [pc, #188]	; (bbd38 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   bbc7c:	b013      	add	sp, #76	; 0x4c
   bbc7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Servo ESCR;                                     //Object for servo esc of right motor
   bbc82:	f005 bc9b 	b.w	c15bc <_ZN5ServoC1Ev>
   bbc86:	bf00      	nop
   bbc88:	2003dd80 	.word	0x2003dd80
   bbc8c:	ffff0000 	.word	0xffff0000
   bbc90:	2003db20 	.word	0x2003db20
   bbc94:	000b9579 	.word	0x000b9579
   bbc98:	2003dd6c 	.word	0x2003dd6c
   bbc9c:	2003db34 	.word	0x2003db34
   bbca0:	000c7aa2 	.word	0x000c7aa2
   bbca4:	2003e5e4 	.word	0x2003e5e4
   bbca8:	000b9f59 	.word	0x000b9f59
   bbcac:	2003db30 	.word	0x2003db30
   bbcb0:	000c7aa5 	.word	0x000c7aa5
   bbcb4:	2003e0bc 	.word	0x2003e0bc
   bbcb8:	2003db2c 	.word	0x2003db2c
   bbcbc:	000c7aa8 	.word	0x000c7aa8
   bbcc0:	2003e0a8 	.word	0x2003e0a8
   bbcc4:	2003db28 	.word	0x2003db28
   bbcc8:	000c7aac 	.word	0x000c7aac
   bbccc:	2003dd9c 	.word	0x2003dd9c
   bbcd0:	000b9565 	.word	0x000b9565
   bbcd4:	2003dd84 	.word	0x2003dd84
   bbcd8:	000b996d 	.word	0x000b996d
   bbcdc:	2003e5f0 	.word	0x2003e5f0
   bbce0:	000b986d 	.word	0x000b986d
   bbce4:	2003de00 	.word	0x2003de00
   bbce8:	000b969d 	.word	0x000b969d
   bbcec:	2003dee0 	.word	0x2003dee0
   bbcf0:	000b943d 	.word	0x000b943d
   bbcf4:	2003e5ac 	.word	0x2003e5ac
   bbcf8:	000b9615 	.word	0x000b9615
   bbcfc:	2003e564 	.word	0x2003e564
   bbd00:	2003df30 	.word	0x2003df30
   bbd04:	2003e0c4 	.word	0x2003e0c4
   bbd08:	2003de20 	.word	0x2003de20
   bbd0c:	2003e588 	.word	0x2003e588
   bbd10:	000c73b4 	.word	0x000c73b4
   bbd14:	2003defc 	.word	0x2003defc
   bbd18:	000c7b10 	.word	0x000c7b10
   bbd1c:	2003de7c 	.word	0x2003de7c
   bbd20:	2003de48 	.word	0x2003de48
   bbd24:	2003deb0 	.word	0x2003deb0
   bbd28:	000c7acc 	.word	0x000c7acc
   bbd2c:	000c7f50 	.word	0x000c7f50
   bbd30:	000c7af8 	.word	0x000c7af8
   bbd34:	2003dd44 	.word	0x2003dd44
   bbd38:	2003dd54 	.word	0x2003dd54

000bbd3c <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bbd3c:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bbd3e:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bbd40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bbd44:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bbd46:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bbd4a:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bbd4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bbd50:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bbd52:	2500      	movs	r5, #0
  _width = width;
   bbd54:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bbd58:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bbd5a:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bbd5e:	7303      	strb	r3, [r0, #12]
}
   bbd60:	bd30      	pop	{r4, r5, pc}

000bbd62 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bbd62:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bbd64:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bbd66:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bbd68:	b085      	sub	sp, #20
   bbd6a:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bbd6c:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bbd6e:	f88d 400c 	strb.w	r4, [sp, #12]
   bbd72:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bbd74:	460e      	mov	r6, r1
   bbd76:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bbd78:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bbd7c:	b140      	cbz	r0, bbd90 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bbd7e:	7b5b      	ldrb	r3, [r3, #13]
   bbd80:	9301      	str	r3, [sp, #4]
   bbd82:	ab03      	add	r3, sp, #12
   bbd84:	9300      	str	r3, [sp, #0]
   bbd86:	2301      	movs	r3, #1
   bbd88:	f000 f90a 	bl	bbfa0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bbd8c:	b005      	add	sp, #20
   bbd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bbd90:	6858      	ldr	r0, [r3, #4]
   bbd92:	2800      	cmp	r0, #0
   bbd94:	d0fa      	beq.n	bbd8c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bbd96:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bbd9a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bbd9e:	f1be 0f03 	cmp.w	lr, #3
   bbda2:	d10c      	bne.n	bbdbe <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bbda4:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bbda8:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bbdac:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bbdae:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bbdb2:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bbdb6:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bbdb8:	f000 fa2b 	bl	bc212 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bbdbc:	e7e6      	b.n	bbd8c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bbdbe:	f1be 0f00 	cmp.w	lr, #0
   bbdc2:	d109      	bne.n	bbdd8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bbdc4:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bbdc8:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bbdcc:	f8cd c000 	str.w	ip, [sp]
   bbdd0:	ab03      	add	r3, sp, #12
   bbdd2:	463a      	mov	r2, r7
   bbdd4:	4631      	mov	r1, r6
   bbdd6:	e7ef      	b.n	bbdb8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bbdd8:	f1be 0f02 	cmp.w	lr, #2
   bbddc:	d102      	bne.n	bbde4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bbdde:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bbde2:	e7f1      	b.n	bbdc8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bbde4:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bbde8:	bf01      	itttt	eq
   bbdea:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bbdee:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bbdf2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bbdf6:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bbdfa:	e7e7      	b.n	bbdcc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bbdfc <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bbdfc:	b4f0      	push	{r4, r5, r6, r7}
   bbdfe:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bbe00:	b902      	cbnz	r2, bbe04 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bbe02:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bbe04:	2a04      	cmp	r2, #4
   bbe06:	d814      	bhi.n	bbe32 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bbe08:	f100 050f 	add.w	r5, r0, #15
   bbe0c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bbe0e:	1884      	adds	r4, r0, r2
   bbe10:	4629      	mov	r1, r5
   bbe12:	4284      	cmp	r4, r0
   bbe14:	d009      	beq.n	bbe2a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bbe16:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bbe18:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bbe1a:	b927      	cbnz	r7, bbe26 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bbe1c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bbe1e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bbe20:	3501      	adds	r5, #1
   bbe22:	3c01      	subs	r4, #1
   bbe24:	e7f5      	b.n	bbe12 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bbe26:	73a6      	strb	r6, [r4, #14]
   bbe28:	e7f9      	b.n	bbe1e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bbe2a:	4620      	mov	r0, r4
}
   bbe2c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bbe2e:	f7ff bf98 	b.w	bbd62 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bbe32:	2000      	movs	r0, #0
   bbe34:	bcf0      	pop	{r4, r5, r6, r7}
   bbe36:	4770      	bx	lr

000bbe38 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bbe38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bbe3a:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bbe3c:	7a85      	ldrb	r5, [r0, #10]
   bbe3e:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bbe42:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bbe44:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bbe46:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bbe48:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bbe4a:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bbe4e:	b140      	cbz	r0, bbe62 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bbe50:	2100      	movs	r1, #0
   bbe52:	e9cd 2100 	strd	r2, r1, [sp]
   bbe56:	a903      	add	r1, sp, #12
   bbe58:	7b62      	ldrb	r2, [r4, #13]
   bbe5a:	f000 f90f 	bl	bc07c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bbe5e:	b004      	add	sp, #16
   bbe60:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bbe62:	6860      	ldr	r0, [r4, #4]
   bbe64:	2800      	cmp	r0, #0
   bbe66:	d0fa      	beq.n	bbe5e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bbe68:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bbe6a:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bbe6c:	2903      	cmp	r1, #3
   bbe6e:	d10d      	bne.n	bbe8c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bbe70:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bbe74:	21ff      	movs	r1, #255	; 0xff
   bbe76:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bbe7a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bbe7e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bbe82:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bbe84:	a903      	add	r1, sp, #12
   bbe86:	f000 f9f6 	bl	bc276 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bbe8a:	e7e8      	b.n	bbe5e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bbe8c:	b941      	cbnz	r1, bbea0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bbe8e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bbe92:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bbe96:	21ff      	movs	r1, #255	; 0xff
   bbe98:	e9cd 2100 	strd	r2, r1, [sp]
   bbe9c:	4622      	mov	r2, r4
   bbe9e:	e7f1      	b.n	bbe84 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bbea0:	2902      	cmp	r1, #2
   bbea2:	d102      	bne.n	bbeaa <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bbea4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bbea8:	e7f3      	b.n	bbe92 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bbeaa:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bbeac:	bf02      	ittt	eq
   bbeae:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bbeb2:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bbeb6:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bbeba:	e7ec      	b.n	bbe96 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bbebc <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bbebc:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bbebe:	f100 050f 	add.w	r5, r0, #15
   bbec2:	7b02      	ldrb	r2, [r0, #12]
   bbec4:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bbec6:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bbec8:	f7ff ffb6 	bl	bbe38 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bbecc:	b178      	cbz	r0, bbeee <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bbece:	7b22      	ldrb	r2, [r4, #12]
   bbed0:	4629      	mov	r1, r5
   bbed2:	4422      	add	r2, r4
  uint32_t value = 0;
   bbed4:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bbed6:	42a2      	cmp	r2, r4
   bbed8:	d00b      	beq.n	bbef2 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bbeda:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bbedc:	7ba0      	ldrb	r0, [r4, #14]
   bbede:	b920      	cbnz	r0, bbeea <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bbee0:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bbee2:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bbee4:	3a01      	subs	r2, #1
   bbee6:	3101      	adds	r1, #1
   bbee8:	e7f5      	b.n	bbed6 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bbeea:	7808      	ldrb	r0, [r1, #0]
   bbeec:	e7f9      	b.n	bbee2 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bbeee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bbef2:	bd38      	pop	{r3, r4, r5, pc}

000bbef4 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bbef4:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bbef6:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bbef8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bbefa:	7143      	strb	r3, [r0, #5]
}
   bbefc:	bd10      	pop	{r4, pc}

000bbefe <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bbefe:	b510      	push	{r4, lr}
   bbf00:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bbf02:	6800      	ldr	r0, [r0, #0]
   bbf04:	f7ff ffda 	bl	bbebc <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bbf08:	7922      	ldrb	r2, [r4, #4]
   bbf0a:	2301      	movs	r3, #1
   bbf0c:	4093      	lsls	r3, r2
  val >>= _shift;
   bbf0e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bbf10:	3b01      	subs	r3, #1
  val >>= _shift;
   bbf12:	40d0      	lsrs	r0, r2
}
   bbf14:	4018      	ands	r0, r3
   bbf16:	bd10      	pop	{r4, pc}

000bbf18 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bbf18:	b570      	push	{r4, r5, r6, lr}
   bbf1a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bbf1c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bbf1e:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bbf20:	f7ff ffcc 	bl	bbebc <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bbf24:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bbf26:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bbf28:	2201      	movs	r2, #1
   bbf2a:	409a      	lsls	r2, r3
   bbf2c:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bbf2e:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bbf32:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bbf36:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bbf38:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bbf3a:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bbf3e:	4329      	orrs	r1, r5
   bbf40:	7b02      	ldrb	r2, [r0, #12]
}
   bbf42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bbf46:	f7ff bf59 	b.w	bbdfc <_ZN23Adafruit_BusIO_Register5writeEmh>

000bbf4a <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bbf4a:	6042      	str	r2, [r0, #4]
  _begun = false;
   bbf4c:	2200      	movs	r2, #0
   bbf4e:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bbf50:	2220      	movs	r2, #32
  _addr = addr;
   bbf52:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bbf54:	60c2      	str	r2, [r0, #12]
#endif
}
   bbf56:	4770      	bx	lr

000bbf58 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bbf58:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bbf5a:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bbf5c:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bbf5e:	b153      	cbz	r3, bbf76 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bbf60:	7821      	ldrb	r1, [r4, #0]
   bbf62:	6860      	ldr	r0, [r4, #4]
   bbf64:	f003 ff86 	bl	bfe74 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bbf68:	6860      	ldr	r0, [r4, #4]
   bbf6a:	f003 ff8e 	bl	bfe8a <_ZN7TwoWire15endTransmissionEv>
   bbf6e:	fab0 f080 	clz	r0, r0
   bbf72:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bbf74:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bbf76:	2101      	movs	r1, #1
   bbf78:	f000 f803 	bl	bbf82 <_ZN18Adafruit_I2CDevice5beginEb>
   bbf7c:	2800      	cmp	r0, #0
   bbf7e:	d1ef      	bne.n	bbf60 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bbf80:	e7f8      	b.n	bbf74 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bbf82 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bbf82:	b538      	push	{r3, r4, r5, lr}
   bbf84:	4604      	mov	r4, r0
  _wire->begin();
   bbf86:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bbf88:	460d      	mov	r5, r1
  _wire->begin();
   bbf8a:	f003 ff41 	bl	bfe10 <_ZN7TwoWire5beginEv>
  _begun = true;
   bbf8e:	2001      	movs	r0, #1
   bbf90:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bbf92:	b125      	cbz	r5, bbf9e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bbf94:	4620      	mov	r0, r4
}
   bbf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bbf9a:	f7ff bfdd 	b.w	bbf58 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bbf9e:	bd38      	pop	{r3, r4, r5, pc}

000bbfa0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bbfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbfa4:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bbfa8:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bbfaa:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bbfac:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bbfae:	4432      	add	r2, r6
   bbfb0:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bbfb2:	4604      	mov	r4, r0
   bbfb4:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bbfb6:	d902      	bls.n	bbfbe <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bbfb8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bbfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bbfbe:	7801      	ldrb	r1, [r0, #0]
   bbfc0:	6840      	ldr	r0, [r0, #4]
   bbfc2:	f003 ff57 	bl	bfe74 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bbfc6:	b97e      	cbnz	r6, bbfe8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bbfc8:	6860      	ldr	r0, [r4, #4]
   bbfca:	6803      	ldr	r3, [r0, #0]
   bbfcc:	462a      	mov	r2, r5
   bbfce:	68db      	ldr	r3, [r3, #12]
   bbfd0:	4641      	mov	r1, r8
   bbfd2:	4798      	blx	r3
   bbfd4:	4285      	cmp	r5, r0
   bbfd6:	d1ef      	bne.n	bbfb8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bbfd8:	6860      	ldr	r0, [r4, #4]
   bbfda:	4639      	mov	r1, r7
   bbfdc:	f003 ff51 	bl	bfe82 <_ZN7TwoWire15endTransmissionEh>
   bbfe0:	fab0 f080 	clz	r0, r0
   bbfe4:	0940      	lsrs	r0, r0, #5
   bbfe6:	e7e8      	b.n	bbfba <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bbfe8:	f1b9 0f00 	cmp.w	r9, #0
   bbfec:	d0ec      	beq.n	bbfc8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bbfee:	6860      	ldr	r0, [r4, #4]
   bbff0:	6803      	ldr	r3, [r0, #0]
   bbff2:	4632      	mov	r2, r6
   bbff4:	68db      	ldr	r3, [r3, #12]
   bbff6:	4649      	mov	r1, r9
   bbff8:	4798      	blx	r3
   bbffa:	4286      	cmp	r6, r0
   bbffc:	d1dc      	bne.n	bbfb8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bbffe:	e7e3      	b.n	bbfc8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bc000 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bc000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc004:	4615      	mov	r5, r2
   bc006:	4604      	mov	r4, r0
   bc008:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bc00a:	b2d2      	uxtb	r2, r2
   bc00c:	7801      	ldrb	r1, [r0, #0]
   bc00e:	6840      	ldr	r0, [r0, #4]
   bc010:	f003 ff1b 	bl	bfe4a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bc014:	4285      	cmp	r5, r0
   bc016:	d10d      	bne.n	bc034 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bc018:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bc01a:	fa1f f887 	uxth.w	r8, r7
   bc01e:	45a8      	cmp	r8, r5
   bc020:	f107 0701 	add.w	r7, r7, #1
   bc024:	d209      	bcs.n	bc03a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bc026:	6860      	ldr	r0, [r4, #4]
   bc028:	6803      	ldr	r3, [r0, #0]
   bc02a:	695b      	ldr	r3, [r3, #20]
   bc02c:	4798      	blx	r3
   bc02e:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bc032:	e7f2      	b.n	bc01a <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bc034:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bc036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc03a:	2001      	movs	r0, #1
   bc03c:	e7fb      	b.n	bc036 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bc03e <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bc03e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc042:	4607      	mov	r7, r0
   bc044:	4688      	mov	r8, r1
   bc046:	4616      	mov	r6, r2
   bc048:	4699      	mov	r9, r3
  size_t pos = 0;
   bc04a:	2500      	movs	r5, #0
  while (pos < len) {
   bc04c:	42b5      	cmp	r5, r6
   bc04e:	d212      	bcs.n	bc076 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bc050:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bc052:	1b74      	subs	r4, r6, r5
   bc054:	4294      	cmp	r4, r2
   bc056:	bf28      	it	cs
   bc058:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bc05a:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bc05c:	42ab      	cmp	r3, r5
   bc05e:	bf94      	ite	ls
   bc060:	464b      	movls	r3, r9
   bc062:	2300      	movhi	r3, #0
   bc064:	4622      	mov	r2, r4
   bc066:	eb08 0105 	add.w	r1, r8, r5
   bc06a:	4638      	mov	r0, r7
   bc06c:	f7ff ffc8 	bl	bc000 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bc070:	b110      	cbz	r0, bc078 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bc072:	4425      	add	r5, r4
  while (pos < len) {
   bc074:	e7ea      	b.n	bc04c <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bc076:	2001      	movs	r0, #1
}
   bc078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bc07c <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bc07c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bc07e:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bc080:	2300      	movs	r3, #0
   bc082:	e9cd 3300 	strd	r3, r3, [sp]
   bc086:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bc08a:	9e06      	ldr	r6, [sp, #24]
   bc08c:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bc08e:	f7ff ff87 	bl	bbfa0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bc092:	b140      	cbz	r0, bc0a6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bc094:	2301      	movs	r3, #1
   bc096:	4632      	mov	r2, r6
   bc098:	4629      	mov	r1, r5
   bc09a:	4620      	mov	r0, r4
}
   bc09c:	b002      	add	sp, #8
   bc09e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bc0a2:	f7ff bfcc 	b.w	bc03e <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bc0a6:	b002      	add	sp, #8
   bc0a8:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc0ac <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bc0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc0b0:	4604      	mov	r4, r0
  if (_spi) {
   bc0b2:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bc0b4:	b085      	sub	sp, #20
   bc0b6:	460d      	mov	r5, r1
  if (_spi) {
   bc0b8:	b140      	cbz	r0, bc0cc <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bc0ba:	2300      	movs	r3, #0
   bc0bc:	9300      	str	r3, [sp, #0]
   bc0be:	4613      	mov	r3, r2
   bc0c0:	460a      	mov	r2, r1
   bc0c2:	f005 fb6b 	bl	c179c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bc0c6:	b005      	add	sp, #20
   bc0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bc0cc:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bc0ce:	68a0      	ldr	r0, [r4, #8]
   bc0d0:	4f48      	ldr	r7, [pc, #288]	; (bc1f4 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bc0d2:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bc0d6:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bc0d8:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bc0da:	bf0c      	ite	eq
   bc0dc:	f04f 0b01 	moveq.w	fp, #1
   bc0e0:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bc0e4:	ea1b 0f03 	tst.w	fp, r3
   bc0e8:	eb01 0302 	add.w	r3, r1, r2
   bc0ec:	bf0c      	ite	eq
   bc0ee:	f04f 0901 	moveq.w	r9, #1
   bc0f2:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bc0f6:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bc0f8:	9303      	str	r3, [sp, #12]
   bc0fa:	9b03      	ldr	r3, [sp, #12]
   bc0fc:	42ab      	cmp	r3, r5
   bc0fe:	d0e2      	beq.n	bc0c6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bc100:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bc104:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bc106:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bc10a:	b117      	cbz	r7, bc112 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bc10c:	4638      	mov	r0, r7
   bc10e:	f001 fdbd 	bl	bdc8c <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bc112:	7b63      	ldrb	r3, [r4, #13]
   bc114:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bc118:	d141      	bne.n	bc19e <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bc11a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bc11e:	1c5a      	adds	r2, r3, #1
   bc120:	d00f      	beq.n	bc142 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bc122:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bc126:	bf14      	ite	ne
   bc128:	2301      	movne	r3, #1
   bc12a:	2300      	moveq	r3, #0
   bc12c:	454b      	cmp	r3, r9
   bc12e:	d008      	beq.n	bc142 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bc130:	6963      	ldr	r3, [r4, #20]
   bc132:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bc134:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bc136:	2900      	cmp	r1, #0
   bc138:	d02c      	beq.n	bc194 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bc13a:	4302      	orrs	r2, r0
   bc13c:	601a      	str	r2, [r3, #0]
   bc13e:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bc142:	69a1      	ldr	r1, [r4, #24]
   bc144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc146:	680a      	ldr	r2, [r1, #0]
   bc148:	4313      	orrs	r3, r2
   bc14a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bc14c:	b117      	cbz	r7, bc154 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bc14e:	4638      	mov	r0, r7
   bc150:	f001 fd9c 	bl	bdc8c <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bc154:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bc158:	3301      	adds	r3, #1
   bc15a:	d006      	beq.n	bc16a <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bc15c:	69e3      	ldr	r3, [r4, #28]
   bc15e:	681a      	ldr	r2, [r3, #0]
   bc160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bc162:	421a      	tst	r2, r3
            reply |= b;
   bc164:	bf18      	it	ne
   bc166:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bc16a:	69a1      	ldr	r1, [r4, #24]
   bc16c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc16e:	680a      	ldr	r2, [r1, #0]
   bc170:	ea22 0303 	bic.w	r3, r2, r3
   bc174:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bc176:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bc17a:	3301      	adds	r3, #1
        buffer[i] = reply;
   bc17c:	bf18      	it	ne
   bc17e:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bc182:	7b23      	ldrb	r3, [r4, #12]
   bc184:	2b00      	cmp	r3, #0
   bc186:	d132      	bne.n	bc1ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bc188:	0076      	lsls	r6, r6, #1
   bc18a:	b2f6      	uxtb	r6, r6
   bc18c:	2e00      	cmp	r6, #0
   bc18e:	d1bc      	bne.n	bc10a <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bc190:	3501      	adds	r5, #1
   bc192:	e7b2      	b.n	bc0fa <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bc194:	ea22 0200 	bic.w	r2, r2, r0
   bc198:	601a      	str	r2, [r3, #0]
   bc19a:	4689      	mov	r9, r1
   bc19c:	e7d1      	b.n	bc142 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bc19e:	69a1      	ldr	r1, [r4, #24]
   bc1a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc1a2:	680a      	ldr	r2, [r1, #0]
   bc1a4:	4313      	orrs	r3, r2
   bc1a6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bc1a8:	b117      	cbz	r7, bc1b0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bc1aa:	4638      	mov	r0, r7
   bc1ac:	f001 fd6e 	bl	bdc8c <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bc1b0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bc1b4:	3301      	adds	r3, #1
   bc1b6:	d008      	beq.n	bc1ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bc1b8:	6963      	ldr	r3, [r4, #20]
   bc1ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bc1bc:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bc1be:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bc1c2:	bf14      	ite	ne
   bc1c4:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bc1c6:	438a      	biceq	r2, r1
   bc1c8:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bc1ca:	69a1      	ldr	r1, [r4, #24]
   bc1cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc1ce:	680a      	ldr	r2, [r1, #0]
   bc1d0:	ea22 0303 	bic.w	r3, r2, r3
   bc1d4:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bc1d6:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bc1da:	3301      	adds	r3, #1
   bc1dc:	d0cb      	beq.n	bc176 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bc1de:	69e3      	ldr	r3, [r4, #28]
   bc1e0:	681a      	ldr	r2, [r3, #0]
   bc1e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bc1e4:	421a      	tst	r2, r3
            reply |= b;
   bc1e6:	bf18      	it	ne
   bc1e8:	ea46 0808 	orrne.w	r8, r6, r8
   bc1ec:	e7c3      	b.n	bc176 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bc1ee:	0876      	lsrs	r6, r6, #1
   bc1f0:	e7cc      	b.n	bc18c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bc1f2:	bf00      	nop
   bc1f4:	0007a120 	.word	0x0007a120

000bc1f8 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bc1f8:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bc1fa:	2201      	movs	r2, #1
  uint8_t data = send;
   bc1fc:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bc200:	f10d 0107 	add.w	r1, sp, #7
   bc204:	f7ff ff52 	bl	bc0ac <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bc208:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bc20c:	b003      	add	sp, #12
   bc20e:	f85d fb04 	ldr.w	pc, [sp], #4

000bc212 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bc212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc216:	4604      	mov	r4, r0
  if (_spi) {
   bc218:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bc21a:	460e      	mov	r6, r1
   bc21c:	4617      	mov	r7, r2
   bc21e:	461d      	mov	r5, r3
  if (_spi) {
   bc220:	b110      	cbz	r0, bc228 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bc222:	6861      	ldr	r1, [r4, #4]
   bc224:	f005 fa46 	bl	c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bc228:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bc22c:	2100      	movs	r1, #0
   bc22e:	b280      	uxth	r0, r0
   bc230:	f005 feb1 	bl	c1f96 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bc234:	9b06      	ldr	r3, [sp, #24]
   bc236:	eb05 0803 	add.w	r8, r5, r3
   bc23a:	4545      	cmp	r5, r8
   bc23c:	d108      	bne.n	bc250 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bc23e:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bc240:	42b7      	cmp	r7, r6
   bc242:	d00b      	beq.n	bc25c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bc244:	f816 1b01 	ldrb.w	r1, [r6], #1
   bc248:	4620      	mov	r0, r4
   bc24a:	f7ff ffd5 	bl	bc1f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bc24e:	e7f7      	b.n	bc240 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bc250:	f815 1b01 	ldrb.w	r1, [r5], #1
   bc254:	4620      	mov	r0, r4
   bc256:	f7ff ffcf 	bl	bc1f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bc25a:	e7ee      	b.n	bc23a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bc25c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bc260:	2101      	movs	r1, #1
   bc262:	b280      	uxth	r0, r0
   bc264:	f005 fe97 	bl	c1f96 <digitalWrite>

  if (_spi) {
   bc268:	6820      	ldr	r0, [r4, #0]
   bc26a:	b108      	cbz	r0, bc270 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bc26c:	f005 fa09 	bl	c1682 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bc270:	2001      	movs	r0, #1
   bc272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc276 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bc276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc27a:	4604      	mov	r4, r0
  if (_spi) {
   bc27c:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bc27e:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bc282:	460e      	mov	r6, r1
   bc284:	4617      	mov	r7, r2
   bc286:	461d      	mov	r5, r3
  if (_spi) {
   bc288:	b110      	cbz	r0, bc290 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bc28a:	6861      	ldr	r1, [r4, #4]
   bc28c:	f005 fa12 	bl	c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bc290:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bc294:	2100      	movs	r1, #0
   bc296:	b280      	uxth	r0, r0
   bc298:	f005 fe7d 	bl	c1f96 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bc29c:	4437      	add	r7, r6
   bc29e:	42be      	cmp	r6, r7
   bc2a0:	d10a      	bne.n	bc2b8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bc2a2:	9b06      	ldr	r3, [sp, #24]
   bc2a4:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bc2a6:	42ae      	cmp	r6, r5
   bc2a8:	d00c      	beq.n	bc2c4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bc2aa:	4641      	mov	r1, r8
   bc2ac:	4620      	mov	r0, r4
   bc2ae:	f7ff ffa3 	bl	bc1f8 <_ZN18Adafruit_SPIDevice8transferEh>
   bc2b2:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bc2b6:	e7f6      	b.n	bc2a6 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bc2b8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bc2bc:	4620      	mov	r0, r4
   bc2be:	f7ff ff9b 	bl	bc1f8 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bc2c2:	e7ec      	b.n	bc29e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bc2c4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bc2c8:	2101      	movs	r1, #1
   bc2ca:	b280      	uxth	r0, r0
   bc2cc:	f005 fe63 	bl	c1f96 <digitalWrite>

  if (_spi) {
   bc2d0:	6820      	ldr	r0, [r4, #0]
   bc2d2:	b108      	cbz	r0, bc2d8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bc2d4:	f005 f9d5 	bl	c1682 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bc2d8:	2001      	movs	r0, #1
   bc2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc2de <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   bc2de:	b538      	push	{r3, r4, r5, lr}
   bc2e0:	4604      	mov	r4, r0
   bc2e2:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   bc2e4:	2224      	movs	r2, #36	; 0x24
   bc2e6:	2100      	movs	r1, #0
   bc2e8:	f008 f93e 	bl	c4568 <memset>

  m_vol = vol;
   bc2ec:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   bc2ee:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   bc2f0:	2b10      	cmp	r3, #16
   bc2f2:	d003      	beq.n	bc2fc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   bc2f4:	2b20      	cmp	r3, #32
   bc2f6:	d006      	beq.n	bc306 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   bc2f8:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   bc2fa:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   bc2fc:	2320      	movs	r3, #32
  m_flags = F_READ;
   bc2fe:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   bc300:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   bc302:	70a0      	strb	r0, [r4, #2]
  return true;
   bc304:	e7f9      	b.n	bc2fa <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   bc306:	2340      	movs	r3, #64	; 0x40
   bc308:	e7f9      	b.n	bc2fe <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000bc30a <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   bc30a:	b510      	push	{r4, lr}
   bc30c:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   bc30e:	3024      	adds	r0, #36	; 0x24
   bc310:	f000 ff65 	bl	bd1de <_ZN8FatCache4syncEv>
   bc314:	b128      	cbz	r0, bc322 <_ZN9FatVolume9cacheSyncEv+0x18>
   bc316:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   bc31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   bc31e:	f000 bf5e 	b.w	bd1de <_ZN8FatCache4syncEv>
  }
   bc322:	bd10      	pop	{r4, pc}

000bc324 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   bc324:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   bc326:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   bc328:	f043 0304 	orr.w	r3, r3, #4
   bc32c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   bc32e:	f100 0210 	add.w	r2, r0, #16
   bc332:	6880      	ldr	r0, [r0, #8]
   bc334:	f001 b809 	b.w	bd34a <_ZN9FatVolume15allocateClusterEmPm>

000bc338 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   bc338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   bc33c:	7801      	ldrb	r1, [r0, #0]
   bc33e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   bc342:	4604      	mov	r4, r0
  if (isRootFixed()) {
   bc344:	d003      	beq.n	bc34e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   bc346:	2600      	movs	r6, #0
}
   bc348:	4630      	mov	r0, r6
   bc34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   bc34e:	6942      	ldr	r2, [r0, #20]
   bc350:	4b17      	ldr	r3, [pc, #92]	; (bc3b0 <_ZN7FatFile13addDirClusterEv+0x78>)
   bc352:	429a      	cmp	r2, r3
   bc354:	d2f7      	bcs.n	bc346 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   bc356:	f7ff ffe5 	bl	bc324 <_ZN7FatFile10addClusterEv>
   bc35a:	4606      	mov	r6, r0
   bc35c:	2800      	cmp	r0, #0
   bc35e:	d0f2      	beq.n	bc346 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   bc360:	6921      	ldr	r1, [r4, #16]
   bc362:	68a0      	ldr	r0, [r4, #8]
   bc364:	f000 ff86 	bl	bd274 <_ZNK9FatVolume17clusterFirstBlockEm>
   bc368:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   bc36a:	68a0      	ldr	r0, [r4, #8]
   bc36c:	2205      	movs	r2, #5
   bc36e:	4639      	mov	r1, r7
   bc370:	3024      	adds	r0, #36	; 0x24
   bc372:	f000 ff5c 	bl	bd22e <_ZN8FatCache4readEmh>
  if (!pc) {
   bc376:	4680      	mov	r8, r0
   bc378:	2800      	cmp	r0, #0
   bc37a:	d0e4      	beq.n	bc346 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   bc37c:	4629      	mov	r1, r5
   bc37e:	f44f 7200 	mov.w	r2, #512	; 0x200
   bc382:	f008 f8f1 	bl	c4568 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   bc386:	2501      	movs	r5, #1
   bc388:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   bc38a:	791a      	ldrb	r2, [r3, #4]
   bc38c:	42aa      	cmp	r2, r5
   bc38e:	d909      	bls.n	bc3a4 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   bc390:	6818      	ldr	r0, [r3, #0]
   bc392:	4642      	mov	r2, r8
   bc394:	19e9      	adds	r1, r5, r7
   bc396:	f001 fab6 	bl	bd906 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   bc39a:	2800      	cmp	r0, #0
   bc39c:	d0d3      	beq.n	bc346 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   bc39e:	3501      	adds	r5, #1
   bc3a0:	b2ed      	uxtb	r5, r5
   bc3a2:	e7f1      	b.n	bc388 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   bc3a4:	6963      	ldr	r3, [r4, #20]
   bc3a6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   bc3aa:	6163      	str	r3, [r4, #20]
  return true;
   bc3ac:	e7cc      	b.n	bc348 <_ZN7FatFile13addDirClusterEv+0x10>
   bc3ae:	bf00      	nop
   bc3b0:	001ffe00 	.word	0x001ffe00

000bc3b4 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   bc3b4:	b510      	push	{r4, lr}
   bc3b6:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   bc3b8:	6880      	ldr	r0, [r0, #8]
   bc3ba:	460a      	mov	r2, r1
   bc3bc:	3024      	adds	r0, #36	; 0x24
   bc3be:	69a1      	ldr	r1, [r4, #24]
   bc3c0:	f000 ff35 	bl	bd22e <_ZN8FatCache4readEmh>
  if (!pc) {
   bc3c4:	b120      	cbz	r0, bc3d0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   bc3c6:	88a3      	ldrh	r3, [r4, #4]
   bc3c8:	f003 030f 	and.w	r3, r3, #15
   bc3cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   bc3d0:	bd10      	pop	{r4, pc}

000bc3d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   bc3d2:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   bc3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc3d6:	4604      	mov	r4, r0
   bc3d8:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   bc3da:	2608      	movs	r6, #8
  uint8_t j = 0;
   bc3dc:	4618      	mov	r0, r3
      name[j++] = '.';
   bc3de:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   bc3e0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   bc3e4:	2a20      	cmp	r2, #32
   bc3e6:	d018      	beq.n	bc41a <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   bc3e8:	2b08      	cmp	r3, #8
      name[j++] = '.';
   bc3ea:	bf02      	ittt	eq
   bc3ec:	540f      	strbeq	r7, [r1, r0]
   bc3ee:	1c42      	addeq	r2, r0, #1
   bc3f0:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   bc3f2:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   bc3f4:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   bc3f8:	bf08      	it	eq
   bc3fa:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   bc3fc:	f1bc 0f19 	cmp.w	ip, #25
   bc400:	d806      	bhi.n	bc410 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   bc402:	f894 c00c 	ldrb.w	ip, [r4, #12]
   bc406:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   bc40a:	bf1c      	itt	ne
   bc40c:	3220      	addne	r2, #32
   bc40e:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   bc410:	f100 0c01 	add.w	ip, r0, #1
   bc414:	540a      	strb	r2, [r1, r0]
   bc416:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   bc41a:	3301      	adds	r3, #1
   bc41c:	b2db      	uxtb	r3, r3
   bc41e:	2b0b      	cmp	r3, #11
   bc420:	d1de      	bne.n	bc3e0 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   bc422:	2300      	movs	r3, #0
   bc424:	540b      	strb	r3, [r1, r0]
}
   bc426:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc428 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   bc428:	7803      	ldrb	r3, [r0, #0]
   bc42a:	b90b      	cbnz	r3, bc430 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   bc42c:	f7ff bf57 	b.w	bc2de <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   bc430:	2000      	movs	r0, #0
   bc432:	4770      	bx	lr

000bc434 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   bc434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   bc438:	7803      	ldrb	r3, [r0, #0]
   bc43a:	4604      	mov	r4, r0
   bc43c:	4688      	mov	r8, r1
   bc43e:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   bc440:	2b00      	cmp	r3, #0
   bc442:	d05d      	beq.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
   bc444:	7882      	ldrb	r2, [r0, #2]
   bc446:	07d1      	lsls	r1, r2, #31
   bc448:	d55a      	bpl.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   bc44a:	071a      	lsls	r2, r3, #28
   bc44c:	d52d      	bpl.n	bc4aa <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   bc44e:	69c3      	ldr	r3, [r0, #28]
   bc450:	6942      	ldr	r2, [r0, #20]
   bc452:	1a9b      	subs	r3, r3, r2
   bc454:	429d      	cmp	r5, r3
   bc456:	bf28      	it	cs
   bc458:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   bc45a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   bc45c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   bc460:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   bc464:	2e00      	cmp	r6, #0
   bc466:	f000 808f 	beq.w	bc588 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   bc46a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   bc46c:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   bc46e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   bc470:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   bc472:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   bc476:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   bc47a:	d51f      	bpl.n	bc4bc <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   bc47c:	6a00      	ldr	r0, [r0, #32]
   bc47e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   bc480:	68a0      	ldr	r0, [r4, #8]
   bc482:	f1ba 0f00 	cmp.w	sl, #0
   bc486:	d142      	bne.n	bc50e <_ZN7FatFile4readEPvj+0xda>
   bc488:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bc48c:	d33f      	bcc.n	bc50e <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   bc48e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   bc490:	4299      	cmp	r1, r3
   bc492:	d03c      	beq.n	bc50e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   bc494:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   bc498:	d252      	bcs.n	bc540 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   bc49a:	6800      	ldr	r0, [r0, #0]
   bc49c:	4642      	mov	r2, r8
   bc49e:	f001 f9a9 	bl	bd7f4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   bc4a2:	b368      	cbz	r0, bc500 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   bc4a4:	f44f 7700 	mov.w	r7, #512	; 0x200
   bc4a8:	e044      	b.n	bc534 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   bc4aa:	069b      	lsls	r3, r3, #26
   bc4ac:	d5d5      	bpl.n	bc45a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   bc4ae:	6883      	ldr	r3, [r0, #8]
   bc4b0:	891a      	ldrh	r2, [r3, #8]
   bc4b2:	6943      	ldr	r3, [r0, #20]
   bc4b4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   bc4b8:	b29b      	uxth	r3, r3
   bc4ba:	e7cb      	b.n	bc454 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   bc4bc:	f890 9005 	ldrb.w	r9, [r0, #5]
   bc4c0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   bc4c4:	f1ba 0f00 	cmp.w	sl, #0
   bc4c8:	d108      	bne.n	bc4dc <_ZN7FatFile4readEPvj+0xa8>
   bc4ca:	f1b9 0f00 	cmp.w	r9, #0
   bc4ce:	d105      	bne.n	bc4dc <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   bc4d0:	b95b      	cbnz	r3, bc4ea <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   bc4d2:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   bc4d4:	bf4c      	ite	mi
   bc4d6:	6a03      	ldrmi	r3, [r0, #32]
   bc4d8:	6a23      	ldrpl	r3, [r4, #32]
   bc4da:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   bc4dc:	6921      	ldr	r1, [r4, #16]
   bc4de:	68a0      	ldr	r0, [r4, #8]
   bc4e0:	f000 fec8 	bl	bd274 <_ZNK9FatVolume17clusterFirstBlockEm>
   bc4e4:	eb09 0100 	add.w	r1, r9, r0
   bc4e8:	e7ca      	b.n	bc480 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   bc4ea:	6921      	ldr	r1, [r4, #16]
   bc4ec:	465a      	mov	r2, fp
   bc4ee:	f000 fec7 	bl	bd280 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   bc4f2:	2800      	cmp	r0, #0
   bc4f4:	db04      	blt.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   bc4f6:	d1f1      	bne.n	bc4dc <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   bc4f8:	7823      	ldrb	r3, [r4, #0]
   bc4fa:	f013 0f70 	tst.w	r3, #112	; 0x70
   bc4fe:	d143      	bne.n	bc588 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   bc500:	7863      	ldrb	r3, [r4, #1]
   bc502:	f043 0302 	orr.w	r3, r3, #2
   bc506:	7063      	strb	r3, [r4, #1]
  return -1;
   bc508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc50c:	e03d      	b.n	bc58a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   bc50e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   bc512:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   bc514:	f04f 0200 	mov.w	r2, #0
   bc518:	f100 0024 	add.w	r0, r0, #36	; 0x24
   bc51c:	bf28      	it	cs
   bc51e:	4637      	movcs	r7, r6
   bc520:	f000 fe85 	bl	bd22e <_ZN8FatCache4readEmh>
      if (!pc) {
   bc524:	2800      	cmp	r0, #0
   bc526:	d0eb      	beq.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   bc528:	eb00 010a 	add.w	r1, r0, sl
   bc52c:	463a      	mov	r2, r7
   bc52e:	4640      	mov	r0, r8
   bc530:	f007 fff2 	bl	c4518 <memcpy>
    m_curPosition += n;
   bc534:	6963      	ldr	r3, [r4, #20]
   bc536:	443b      	add	r3, r7
    dst += n;
   bc538:	44b8      	add	r8, r7
    m_curPosition += n;
   bc53a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   bc53c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   bc53e:	e791      	b.n	bc464 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   bc540:	7822      	ldrb	r2, [r4, #0]
   bc542:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   bc544:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   bc548:	d406      	bmi.n	bc558 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   bc54a:	7902      	ldrb	r2, [r0, #4]
   bc54c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   bc550:	b2d2      	uxtb	r2, r2
   bc552:	4592      	cmp	sl, r2
   bc554:	bf28      	it	cs
   bc556:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   bc558:	4299      	cmp	r1, r3
      n = 512*nb;
   bc55a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   bc55e:	d208      	bcs.n	bc572 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   bc560:	68a0      	ldr	r0, [r4, #8]
   bc562:	4653      	mov	r3, sl
   bc564:	6800      	ldr	r0, [r0, #0]
   bc566:	4642      	mov	r2, r8
   bc568:	f001 f98c 	bl	bd884 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   bc56c:	2800      	cmp	r0, #0
   bc56e:	d1e1      	bne.n	bc534 <_ZN7FatFile4readEPvj+0x100>
   bc570:	e7c6      	b.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   bc572:	4453      	add	r3, sl
   bc574:	428b      	cmp	r3, r1
   bc576:	d9f3      	bls.n	bc560 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   bc578:	3024      	adds	r0, #36	; 0x24
   bc57a:	9101      	str	r1, [sp, #4]
   bc57c:	f000 fe2f 	bl	bd1de <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   bc580:	9901      	ldr	r1, [sp, #4]
   bc582:	2800      	cmp	r0, #0
   bc584:	d1ec      	bne.n	bc560 <_ZN7FatFile4readEPvj+0x12c>
   bc586:	e7bb      	b.n	bc500 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   bc588:	1ba8      	subs	r0, r5, r6
}
   bc58a:	b003      	add	sp, #12
   bc58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc590 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   bc590:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   bc592:	2201      	movs	r2, #1
   bc594:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   bc598:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   bc59c:	4604      	mov	r4, r0
   bc59e:	f7ff ff49 	bl	bc434 <_ZN7FatFile4readEPvj>
   bc5a2:	2801      	cmp	r0, #1
   bc5a4:	bf0a      	itet	eq
   bc5a6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   bc5aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   bc5ae:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   bc5b2:	b002      	add	sp, #8
   bc5b4:	bd70      	pop	{r4, r5, r6, pc}

000bc5b6 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   bc5b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   bc5b8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   bc5ba:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   bc5be:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   bc5c0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   bc5c4:	d000      	beq.n	bc5c8 <_ZN7FatFile12readDirCacheEb+0x12>
   bc5c6:	b999      	cbnz	r1, bc5f0 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   bc5c8:	2201      	movs	r2, #1
   bc5ca:	f10d 0107 	add.w	r1, sp, #7
   bc5ce:	4620      	mov	r0, r4
   bc5d0:	f7ff ff30 	bl	bc434 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   bc5d4:	b240      	sxtb	r0, r0
   bc5d6:	2801      	cmp	r0, #1
   bc5d8:	d002      	beq.n	bc5e0 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   bc5da:	2000      	movs	r0, #0
}
   bc5dc:	b003      	add	sp, #12
   bc5de:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   bc5e0:	6963      	ldr	r3, [r4, #20]
   bc5e2:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   bc5e4:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   bc5e6:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   bc5e8:	3030      	adds	r0, #48	; 0x30
   bc5ea:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   bc5ee:	e7f5      	b.n	bc5dc <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   bc5f0:	3320      	adds	r3, #32
   bc5f2:	e7f7      	b.n	bc5e4 <_ZN7FatFile12readDirCacheEb+0x2e>

000bc5f4 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   bc5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   bc5f8:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   bc5fa:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   bc5fc:	4604      	mov	r4, r0
   bc5fe:	460d      	mov	r5, r1
  if (!isOpen()) {
   bc600:	b162      	cbz	r2, bc61c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   bc602:	6940      	ldr	r0, [r0, #20]
   bc604:	4288      	cmp	r0, r1
   bc606:	d002      	beq.n	bc60e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   bc608:	b919      	cbnz	r1, bc612 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   bc60a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   bc60c:	6165      	str	r5, [r4, #20]
    return true;
   bc60e:	2001      	movs	r0, #1
   bc610:	e006      	b.n	bc620 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   bc612:	0716      	lsls	r6, r2, #28
   bc614:	d506      	bpl.n	bc624 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   bc616:	69e3      	ldr	r3, [r4, #28]
   bc618:	428b      	cmp	r3, r1
   bc61a:	d20b      	bcs.n	bc634 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   bc61c:	6127      	str	r7, [r4, #16]
  return false;
   bc61e:	2000      	movs	r0, #0
}
   bc620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   bc624:	0691      	lsls	r1, r2, #26
   bc626:	d505      	bpl.n	bc634 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   bc628:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   bc62a:	891b      	ldrh	r3, [r3, #8]
   bc62c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   bc630:	d9ec      	bls.n	bc60c <_ZN7FatFile7seekSetEm+0x18>
   bc632:	e7f3      	b.n	bc61c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   bc634:	f8d4 c008 	ldr.w	ip, [r4, #8]
   bc638:	f89c 6006 	ldrb.w	r6, [ip, #6]
   bc63c:	1e43      	subs	r3, r0, #1
   bc63e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   bc642:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   bc644:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   bc646:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   bc648:	42b3      	cmp	r3, r6
   bc64a:	d800      	bhi.n	bc64e <_ZN7FatFile7seekSetEm+0x5a>
   bc64c:	b998      	cbnz	r0, bc676 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   bc64e:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   bc650:	bf4c      	ite	mi
   bc652:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   bc656:	6a23      	ldrpl	r3, [r4, #32]
   bc658:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   bc65a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   bc65e:	2e00      	cmp	r6, #0
   bc660:	d0d4      	beq.n	bc60c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   bc662:	6921      	ldr	r1, [r4, #16]
   bc664:	68a0      	ldr	r0, [r4, #8]
   bc666:	4642      	mov	r2, r8
   bc668:	f000 fe0a 	bl	bd280 <_ZN9FatVolume6fatGetEmPm>
   bc66c:	2800      	cmp	r0, #0
   bc66e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   bc672:	dcf4      	bgt.n	bc65e <_ZN7FatFile7seekSetEm+0x6a>
   bc674:	e7d2      	b.n	bc61c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   bc676:	1af6      	subs	r6, r6, r3
   bc678:	e7ef      	b.n	bc65a <_ZN7FatFile7seekSetEm+0x66>

000bc67a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   bc67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc67c:	460f      	mov	r7, r1
   bc67e:	4604      	mov	r4, r0
   bc680:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   bc682:	2100      	movs	r1, #0
   bc684:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   bc686:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   bc688:	f007 ff6e 	bl	c4568 <memset>
  m_vol = dirFile->m_vol;
   bc68c:	68b8      	ldr	r0, [r7, #8]
   bc68e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   bc690:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   bc692:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   bc696:	6a3b      	ldr	r3, [r7, #32]
   bc698:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   bc69a:	016a      	lsls	r2, r5, #5
   bc69c:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   bc6a0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   bc6a4:	071f      	lsls	r7, r3, #28
   bc6a6:	d444      	bmi.n	bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   bc6a8:	f003 0317 	and.w	r3, r3, #23
   bc6ac:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   bc6ae:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   bc6b2:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   bc6b6:	bf04      	itt	eq
   bc6b8:	f043 0308 	orreq.w	r3, r3, #8
   bc6bc:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   bc6be:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bc6c2:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   bc6c4:	f006 0303 	and.w	r3, r6, #3
   bc6c8:	2b01      	cmp	r3, #1
   bc6ca:	d02c      	beq.n	bc726 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   bc6cc:	2b02      	cmp	r3, #2
   bc6ce:	d028      	beq.n	bc722 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   bc6d0:	bb7b      	cbnz	r3, bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   bc6d2:	0571      	lsls	r1, r6, #21
   bc6d4:	d42d      	bmi.n	bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   bc6d6:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   bc6d8:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   bc6da:	78a1      	ldrb	r1, [r4, #2]
   bc6dc:	078b      	lsls	r3, r1, #30
   bc6de:	d504      	bpl.n	bc6ea <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   bc6e0:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   bc6e2:	06df      	lsls	r7, r3, #27
   bc6e4:	d425      	bmi.n	bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   bc6e6:	07dd      	lsls	r5, r3, #31
   bc6e8:	d423      	bmi.n	bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   bc6ea:	11b3      	asrs	r3, r6, #6
   bc6ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   bc6f0:	f006 0508 	and.w	r5, r6, #8
   bc6f4:	432b      	orrs	r3, r5
   bc6f6:	430b      	orrs	r3, r1
   bc6f8:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   bc6fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   bc6fc:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   bc6fe:	1883      	adds	r3, r0, r2
   bc700:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   bc704:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   bc708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   bc70c:	0572      	lsls	r2, r6, #21
   bc70e:	d513      	bpl.n	bc738 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   bc710:	b959      	cbnz	r1, bc72a <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   bc712:	78a3      	ldrb	r3, [r4, #2]
   bc714:	f043 0304 	orr.w	r3, r3, #4
   bc718:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   bc71a:	0473      	lsls	r3, r6, #17
   bc71c:	d410      	bmi.n	bc740 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   bc71e:	2001      	movs	r0, #1
}
   bc720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   bc722:	2303      	movs	r3, #3
   bc724:	e7d8      	b.n	bc6d8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   bc726:	2302      	movs	r3, #2
   bc728:	e7d6      	b.n	bc6d8 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   bc72a:	f000 fe49 	bl	bd3c0 <_ZN9FatVolume9freeChainEm>
   bc72e:	2800      	cmp	r0, #0
   bc730:	d1ef      	bne.n	bc712 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   bc732:	2000      	movs	r0, #0
   bc734:	7020      	strb	r0, [r4, #0]
  return false;
   bc736:	e7f3      	b.n	bc720 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   bc738:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   bc73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bc73c:	61e3      	str	r3, [r4, #28]
   bc73e:	e7ec      	b.n	bc71a <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   bc740:	69e1      	ldr	r1, [r4, #28]
   bc742:	4620      	mov	r0, r4
   bc744:	f7ff ff56 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
   bc748:	2800      	cmp	r0, #0
   bc74a:	d1e8      	bne.n	bc71e <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   bc74c:	e7f1      	b.n	bc732 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000bc74e <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   bc74e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   bc752:	7803      	ldrb	r3, [r0, #0]
   bc754:	4607      	mov	r7, r0
   bc756:	460d      	mov	r5, r1
   bc758:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   bc75a:	bb53      	cbnz	r3, bc7b2 <_ZN7FatFile8openNextEPS_i+0x64>
   bc75c:	780b      	ldrb	r3, [r1, #0]
   bc75e:	f013 0f70 	tst.w	r3, #112	; 0x70
   bc762:	d026      	beq.n	bc7b2 <_ZN7FatFile8openNextEPS_i+0x64>
   bc764:	694c      	ldr	r4, [r1, #20]
   bc766:	f014 041f 	ands.w	r4, r4, #31
   bc76a:	d122      	bne.n	bc7b2 <_ZN7FatFile8openNextEPS_i+0x64>
   bc76c:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   bc76e:	2100      	movs	r1, #0
   bc770:	4628      	mov	r0, r5
    return m_curPosition;
   bc772:	f8d5 9014 	ldr.w	r9, [r5, #20]
   bc776:	f7ff ff1e 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   bc77a:	b1d0      	cbz	r0, bc7b2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   bc77c:	7806      	ldrb	r6, [r0, #0]
   bc77e:	b1c6      	cbz	r6, bc7b2 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   bc780:	2e2e      	cmp	r6, #46	; 0x2e
   bc782:	d010      	beq.n	bc7a6 <_ZN7FatFile8openNextEPS_i+0x58>
   bc784:	2ee5      	cmp	r6, #229	; 0xe5
   bc786:	d00e      	beq.n	bc7a6 <_ZN7FatFile8openNextEPS_i+0x58>
   bc788:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   bc78a:	071a      	lsls	r2, r3, #28
   bc78c:	d413      	bmi.n	bc7b6 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   bc78e:	b964      	cbnz	r4, bc7aa <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   bc790:	9400      	str	r4, [sp, #0]
   bc792:	4653      	mov	r3, sl
   bc794:	f3c9 124f 	ubfx	r2, r9, #5, #16
   bc798:	4629      	mov	r1, r5
   bc79a:	4638      	mov	r0, r7
   bc79c:	f7ff ff6d 	bl	bc67a <_ZN7FatFile15openCachedEntryEPS_tih>
}
   bc7a0:	b002      	add	sp, #8
   bc7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   bc7a6:	2400      	movs	r4, #0
   bc7a8:	e7e1      	b.n	bc76e <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   bc7aa:	f000 f971 	bl	bca90 <_ZN7FatFile11lfnChecksumEPh>
   bc7ae:	4540      	cmp	r0, r8
   bc7b0:	d0ee      	beq.n	bc790 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   bc7b2:	2000      	movs	r0, #0
   bc7b4:	e7f4      	b.n	bc7a0 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   bc7b6:	2b0f      	cmp	r3, #15
   bc7b8:	d1f5      	bne.n	bc7a6 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   bc7ba:	0673      	lsls	r3, r6, #25
   bc7bc:	d5d7      	bpl.n	bc76e <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   bc7be:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   bc7c2:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   bc7c6:	e7d2      	b.n	bc76e <_ZN7FatFile8openNextEPS_i+0x20>

000bc7c8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   bc7c8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   bc7ca:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   bc7cc:	4604      	mov	r4, r0
  if (!isOpen()) {
   bc7ce:	b90b      	cbnz	r3, bc7d4 <_ZN7FatFile4syncEv+0xc>
    return true;
   bc7d0:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   bc7d2:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   bc7d4:	7883      	ldrb	r3, [r0, #2]
   bc7d6:	075a      	lsls	r2, r3, #29
   bc7d8:	d523      	bpl.n	bc822 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   bc7da:	2101      	movs	r1, #1
   bc7dc:	f7ff fdea 	bl	bc3b4 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   bc7e0:	4605      	mov	r5, r0
   bc7e2:	b928      	cbnz	r0, bc7f0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   bc7e4:	7863      	ldrb	r3, [r4, #1]
   bc7e6:	f043 0301 	orr.w	r3, r3, #1
   bc7ea:	7063      	strb	r3, [r4, #1]
  return false;
   bc7ec:	2000      	movs	r0, #0
   bc7ee:	e7f0      	b.n	bc7d2 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   bc7f0:	7803      	ldrb	r3, [r0, #0]
   bc7f2:	2be5      	cmp	r3, #229	; 0xe5
   bc7f4:	d0f6      	beq.n	bc7e4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   bc7f6:	7823      	ldrb	r3, [r4, #0]
   bc7f8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   bc7fa:	bf44      	itt	mi
   bc7fc:	69e3      	ldrmi	r3, [r4, #28]
   bc7fe:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   bc800:	6a23      	ldr	r3, [r4, #32]
   bc802:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   bc804:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   bc806:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   bc808:	4b09      	ldr	r3, [pc, #36]	; (bc830 <_ZN7FatFile4syncEv+0x68>)
   bc80a:	681b      	ldr	r3, [r3, #0]
   bc80c:	b12b      	cbz	r3, bc81a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   bc80e:	f100 0116 	add.w	r1, r0, #22
   bc812:	3018      	adds	r0, #24
   bc814:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   bc816:	8b2b      	ldrh	r3, [r5, #24]
   bc818:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   bc81a:	78a3      	ldrb	r3, [r4, #2]
   bc81c:	f023 0304 	bic.w	r3, r3, #4
   bc820:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   bc822:	68a0      	ldr	r0, [r4, #8]
   bc824:	f7ff fd71 	bl	bc30a <_ZN9FatVolume9cacheSyncEv>
   bc828:	2800      	cmp	r0, #0
   bc82a:	d0db      	beq.n	bc7e4 <_ZN7FatFile4syncEv+0x1c>
   bc82c:	e7d0      	b.n	bc7d0 <_ZN7FatFile4syncEv+0x8>
   bc82e:	bf00      	nop
   bc830:	2003e60c 	.word	0x2003e60c

000bc834 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   bc834:	b510      	push	{r4, lr}
   bc836:	4604      	mov	r4, r0
  bool rtn = sync();
   bc838:	f7ff ffc6 	bl	bc7c8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   bc83c:	2300      	movs	r3, #0
   bc83e:	7023      	strb	r3, [r4, #0]
}
   bc840:	bd10      	pop	{r4, pc}

000bc842 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   bc842:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc844:	b093      	sub	sp, #76	; 0x4c
   bc846:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   bc848:	2300      	movs	r3, #0
   bc84a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   bc84c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   bc84e:	9201      	str	r2, [sp, #4]
   bc850:	4606      	mov	r6, r0
   bc852:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   bc854:	b113      	cbz	r3, bc85c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   bc856:	2000      	movs	r0, #0
}
   bc858:	b013      	add	sp, #76	; 0x4c
   bc85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   bc85c:	780b      	ldrb	r3, [r1, #0]
   bc85e:	f013 0f70 	tst.w	r3, #112	; 0x70
   bc862:	d0f8      	beq.n	bc856 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   bc864:	7813      	ldrb	r3, [r2, #0]
   bc866:	2b2f      	cmp	r3, #47	; 0x2f
   bc868:	d112      	bne.n	bc890 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   bc86a:	9a01      	ldr	r2, [sp, #4]
   bc86c:	7813      	ldrb	r3, [r2, #0]
   bc86e:	2b2f      	cmp	r3, #47	; 0x2f
   bc870:	d102      	bne.n	bc878 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   bc872:	3201      	adds	r2, #1
   bc874:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   bc876:	e7f8      	b.n	bc86a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   bc878:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   bc87a:	b91b      	cbnz	r3, bc884 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   bc87c:	4630      	mov	r0, r6
   bc87e:	f7ff fdd3 	bl	bc428 <_ZN7FatFile8openRootEP9FatVolume>
   bc882:	e7e9      	b.n	bc858 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   bc884:	a809      	add	r0, sp, #36	; 0x24
   bc886:	f7ff fd2a 	bl	bc2de <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   bc88a:	2800      	cmp	r0, #0
   bc88c:	d0e3      	beq.n	bc856 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   bc88e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   bc890:	9801      	ldr	r0, [sp, #4]
   bc892:	aa01      	add	r2, sp, #4
   bc894:	a903      	add	r1, sp, #12
   bc896:	f000 f98f 	bl	bcbb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   bc89a:	2800      	cmp	r0, #0
   bc89c:	d0db      	beq.n	bc856 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   bc89e:	9b01      	ldr	r3, [sp, #4]
   bc8a0:	781b      	ldrb	r3, [r3, #0]
   bc8a2:	b19b      	cbz	r3, bc8cc <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   bc8a4:	2300      	movs	r3, #0
   bc8a6:	aa03      	add	r2, sp, #12
   bc8a8:	4621      	mov	r1, r4
   bc8aa:	4630      	mov	r0, r6
   bc8ac:	f000 fab6 	bl	bce1c <_ZN7FatFile4openEPS_P7fname_ti>
   bc8b0:	2800      	cmp	r0, #0
   bc8b2:	d0d0      	beq.n	bc856 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   bc8b4:	4635      	mov	r5, r6
   bc8b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc8b8:	ac09      	add	r4, sp, #36	; 0x24
   bc8ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc8be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc8c0:	682b      	ldr	r3, [r5, #0]
   bc8c2:	6023      	str	r3, [r4, #0]
    close();
   bc8c4:	4630      	mov	r0, r6
   bc8c6:	f7ff ffb5 	bl	bc834 <_ZN7FatFile5closeEv>
  while (1) {
   bc8ca:	e7e0      	b.n	bc88e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   bc8cc:	463b      	mov	r3, r7
   bc8ce:	aa03      	add	r2, sp, #12
   bc8d0:	4621      	mov	r1, r4
   bc8d2:	4630      	mov	r0, r6
   bc8d4:	f000 faa2 	bl	bce1c <_ZN7FatFile4openEPS_P7fname_ti>
   bc8d8:	e7be      	b.n	bc858 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000bc8dc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   bc8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   bc8e0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   bc8e2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   bc8e4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   bc8e6:	4604      	mov	r4, r0
   bc8e8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   bc8ea:	d55b      	bpl.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
   bc8ec:	7883      	ldrb	r3, [r0, #2]
   bc8ee:	079a      	lsls	r2, r3, #30
   bc8f0:	d558      	bpl.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   bc8f2:	071b      	lsls	r3, r3, #28
   bc8f4:	d451      	bmi.n	bc99a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   bc8f6:	6963      	ldr	r3, [r4, #20]
   bc8f8:	43db      	mvns	r3, r3
   bc8fa:	42bb      	cmp	r3, r7
   bc8fc:	d352      	bcc.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
   bc8fe:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   bc900:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   bc904:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   bc906:	f1b8 0f00 	cmp.w	r8, #0
   bc90a:	f000 8091 	beq.w	bca30 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   bc90e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   bc910:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   bc912:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   bc916:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   bc91a:	d10e      	bne.n	bc93a <_ZN7FatFile5writeEPKvj+0x5e>
   bc91c:	b96d      	cbnz	r5, bc93a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   bc91e:	6921      	ldr	r1, [r4, #16]
   bc920:	2900      	cmp	r1, #0
   bc922:	d046      	beq.n	bc9b2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   bc924:	4652      	mov	r2, sl
   bc926:	f000 fcab 	bl	bd280 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   bc92a:	2800      	cmp	r0, #0
   bc92c:	db3a      	blt.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   bc92e:	d104      	bne.n	bc93a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   bc930:	4620      	mov	r0, r4
   bc932:	f7ff fcf7 	bl	bc324 <_ZN7FatFile10addClusterEv>
   bc936:	2800      	cmp	r0, #0
   bc938:	d034      	beq.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   bc93a:	6921      	ldr	r1, [r4, #16]
   bc93c:	68a0      	ldr	r0, [r4, #8]
   bc93e:	f000 fc99 	bl	bd274 <_ZNK9FatVolume17clusterFirstBlockEm>
   bc942:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   bc944:	68a0      	ldr	r0, [r4, #8]
   bc946:	b915      	cbnz	r5, bc94e <_ZN7FatFile5writeEPKvj+0x72>
   bc948:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   bc94c:	d23f      	bcs.n	bc9ce <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   bc94e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   bc952:	4546      	cmp	r6, r8
   bc954:	bf28      	it	cs
   bc956:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   bc958:	2d00      	cmp	r5, #0
   bc95a:	d136      	bne.n	bc9ca <_ZN7FatFile5writeEPKvj+0xee>
   bc95c:	6962      	ldr	r2, [r4, #20]
   bc95e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   bc960:	429a      	cmp	r2, r3
   bc962:	bf34      	ite	cc
   bc964:	2201      	movcc	r2, #1
   bc966:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   bc968:	3024      	adds	r0, #36	; 0x24
   bc96a:	f000 fc60 	bl	bd22e <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   bc96e:	b1c8      	cbz	r0, bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   bc970:	4428      	add	r0, r5
   bc972:	4632      	mov	r2, r6
   bc974:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   bc976:	4435      	add	r5, r6
      memcpy(dst, src, n);
   bc978:	f007 fdce 	bl	c4518 <memcpy>
      if (512 == (n + blockOffset)) {
   bc97c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   bc980:	d104      	bne.n	bc98c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   bc982:	68a0      	ldr	r0, [r4, #8]
   bc984:	3024      	adds	r0, #36	; 0x24
   bc986:	f000 fc2a 	bl	bd1de <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   bc98a:	b158      	cbz	r0, bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   bc98c:	6963      	ldr	r3, [r4, #20]
   bc98e:	4433      	add	r3, r6
   bc990:	6163      	str	r3, [r4, #20]
    src += n;
   bc992:	44b1      	add	r9, r6
    nToWrite -= n;
   bc994:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   bc998:	e7b4      	b.n	bc904 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   bc99a:	69c1      	ldr	r1, [r0, #28]
   bc99c:	f7ff fe2a 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
   bc9a0:	2800      	cmp	r0, #0
   bc9a2:	d1a8      	bne.n	bc8f6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   bc9a4:	7863      	ldrb	r3, [r4, #1]
   bc9a6:	f043 0301 	orr.w	r3, r3, #1
   bc9aa:	7063      	strb	r3, [r4, #1]
  return -1;
   bc9ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc9b0:	e050      	b.n	bca54 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   bc9b2:	6a23      	ldr	r3, [r4, #32]
   bc9b4:	b93b      	cbnz	r3, bc9c6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   bc9b6:	4620      	mov	r0, r4
   bc9b8:	f7ff fcb4 	bl	bc324 <_ZN7FatFile10addClusterEv>
   bc9bc:	2800      	cmp	r0, #0
   bc9be:	d0f1      	beq.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   bc9c0:	6923      	ldr	r3, [r4, #16]
   bc9c2:	6223      	str	r3, [r4, #32]
   bc9c4:	e7b9      	b.n	bc93a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   bc9c6:	6123      	str	r3, [r4, #16]
   bc9c8:	e7b7      	b.n	bc93a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   bc9ca:	2201      	movs	r2, #1
   bc9cc:	e7cc      	b.n	bc968 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   bc9ce:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   bc9d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   bc9d4:	d31b      	bcc.n	bca0e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   bc9d6:	f890 c004 	ldrb.w	ip, [r0, #4]
   bc9da:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   bc9de:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   bc9e0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   bc9e4:	4573      	cmp	r3, lr
   bc9e6:	bf28      	it	cs
   bc9e8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   bc9ea:	4291      	cmp	r1, r2
      n = 512*nb;
   bc9ec:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   bc9f0:	d307      	bcc.n	bca02 <_ZN7FatFile5writeEPKvj+0x126>
   bc9f2:	441a      	add	r2, r3
   bc9f4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   bc9f6:	bf82      	ittt	hi
   bc9f8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   bc9fc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   bca00:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   bca02:	68a5      	ldr	r5, [r4, #8]
   bca04:	464a      	mov	r2, r9
   bca06:	6828      	ldr	r0, [r5, #0]
   bca08:	f000 fff3 	bl	bd9f2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   bca0c:	e7bd      	b.n	bc98a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   bca0e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   bca10:	bf02      	ittt	eq
   bca12:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   bca16:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   bca1a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   bca1c:	68a3      	ldr	r3, [r4, #8]
   bca1e:	464a      	mov	r2, r9
   bca20:	6818      	ldr	r0, [r3, #0]
   bca22:	f000 ff70 	bl	bd906 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   bca26:	2800      	cmp	r0, #0
   bca28:	d0bc      	beq.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   bca2a:	f44f 7600 	mov.w	r6, #512	; 0x200
   bca2e:	e7ad      	b.n	bc98c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   bca30:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   bca32:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   bca34:	42b2      	cmp	r2, r6
   bca36:	d204      	bcs.n	bca42 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   bca38:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   bca3a:	f043 0304 	orr.w	r3, r3, #4
   bca3e:	70a3      	strb	r3, [r4, #2]
   bca40:	e003      	b.n	bca4a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   bca42:	4a08      	ldr	r2, [pc, #32]	; (bca64 <_ZN7FatFile5writeEPKvj+0x188>)
   bca44:	6812      	ldr	r2, [r2, #0]
   bca46:	2a00      	cmp	r2, #0
   bca48:	d1f7      	bne.n	bca3a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   bca4a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   bca4e:	2b00      	cmp	r3, #0
   bca50:	db02      	blt.n	bca58 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   bca52:	4638      	mov	r0, r7
}
   bca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   bca58:	4620      	mov	r0, r4
   bca5a:	f7ff feb5 	bl	bc7c8 <_ZN7FatFile4syncEv>
   bca5e:	2800      	cmp	r0, #0
   bca60:	d1f7      	bne.n	bca52 <_ZN7FatFile5writeEPKvj+0x176>
   bca62:	e79f      	b.n	bc9a4 <_ZN7FatFile5writeEPKvj+0xc8>
   bca64:	2003e60c 	.word	0x2003e60c

000bca68 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   bca68:	2904      	cmp	r1, #4
   bca6a:	d804      	bhi.n	bca76 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   bca6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   bca70:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   bca74:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   bca76:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   bca78:	bf9b      	ittet	ls
   bca7a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   bca7e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   bca82:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   bca84:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   bca86:	bf84      	itt	hi
   bca88:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   bca8c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   bca8e:	4770      	bx	lr

000bca90 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   bca90:	1e41      	subs	r1, r0, #1
   bca92:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   bca96:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   bca98:	0842      	lsrs	r2, r0, #1
   bca9a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   bca9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bcaa2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   bcaa6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   bcaa8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   bcaaa:	d1f5      	bne.n	bca98 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   bcaac:	4770      	bx	lr

000bcaae <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   bcaae:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   bcab0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   bcab2:	4604      	mov	r4, r0
   bcab4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   bcab6:	b923      	cbnz	r3, bcac2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   bcab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   bcabc:	6889      	ldr	r1, [r1, #8]
   bcabe:	f7ff bcb3 	b.w	bc428 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   bcac2:	2224      	movs	r2, #36	; 0x24
   bcac4:	2100      	movs	r1, #0
   bcac6:	f007 fd4f 	bl	c4568 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   bcaca:	2310      	movs	r3, #16
  m_flags = F_READ;
   bcacc:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   bcace:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   bcad0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   bcad2:	68ab      	ldr	r3, [r5, #8]
   bcad4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   bcad6:	68eb      	ldr	r3, [r5, #12]
   bcad8:	6223      	str	r3, [r4, #32]
}
   bcada:	bd38      	pop	{r3, r4, r5, pc}

000bcadc <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   bcadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcae0:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   bcae2:	7803      	ldrb	r3, [r0, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   bcae4:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   bcae8:	4606      	mov	r6, r0
   bcaea:	460f      	mov	r7, r1
   bcaec:	4690      	mov	r8, r2
   bcaee:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   bcaf2:	2b00      	cmp	r3, #0
   bcaf4:	d05d      	beq.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
   bcaf6:	2a0c      	cmp	r2, #12
   bcaf8:	d95b      	bls.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   bcafa:	78c3      	ldrb	r3, [r0, #3]
   bcafc:	b933      	cbnz	r3, bcb0c <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   bcafe:	f000 fb57 	bl	bd1b0 <_ZN7FatFile6getSFNEPc>
   bcb02:	4604      	mov	r4, r0
}
   bcb04:	4620      	mov	r0, r4
   bcb06:	b00d      	add	sp, #52	; 0x34
   bcb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   bcb0c:	4601      	mov	r1, r0
   bcb0e:	a803      	add	r0, sp, #12
   bcb10:	f7ff ffcd 	bl	bcaae <_ZN7FatFile11openClusterEPS_>
   bcb14:	2800      	cmp	r0, #0
   bcb16:	d04c      	beq.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   bcb18:	eb07 0308 	add.w	r3, r7, r8
   bcb1c:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   bcb20:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   bcb24:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   bcb26:	78f3      	ldrb	r3, [r6, #3]
   bcb28:	fa5f f58b 	uxtb.w	r5, fp
   bcb2c:	42ab      	cmp	r3, r5
   bcb2e:	d340      	bcc.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   bcb30:	88b1      	ldrh	r1, [r6, #4]
   bcb32:	eba1 010b 	sub.w	r1, r1, fp
   bcb36:	0149      	lsls	r1, r1, #5
   bcb38:	a803      	add	r0, sp, #12
   bcb3a:	f7ff fd5b 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
   bcb3e:	4604      	mov	r4, r0
   bcb40:	2800      	cmp	r0, #0
   bcb42:	d036      	beq.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   bcb44:	2100      	movs	r1, #0
   bcb46:	a803      	add	r0, sp, #12
   bcb48:	f7ff fd35 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   bcb4c:	4603      	mov	r3, r0
   bcb4e:	b380      	cbz	r0, bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   bcb50:	7ac2      	ldrb	r2, [r0, #11]
   bcb52:	2a0f      	cmp	r2, #15
   bcb54:	d12d      	bne.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   bcb56:	7802      	ldrb	r2, [r0, #0]
   bcb58:	f002 021f 	and.w	r2, r2, #31
   bcb5c:	42aa      	cmp	r2, r5
   bcb5e:	d128      	bne.n	bcbb2 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   bcb60:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   bcb64:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   bcb68:	197a      	adds	r2, r7, r5
   bcb6a:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   bcb6c:	4618      	mov	r0, r3
   bcb6e:	9101      	str	r1, [sp, #4]
   bcb70:	f7ff ff7a 	bl	bca68 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   bcb74:	b168      	cbz	r0, bcb92 <_ZN7FatFile7getNameEPcj+0xb6>
   bcb76:	45a8      	cmp	r8, r5
   bcb78:	d912      	bls.n	bcba0 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   bcb7a:	9901      	ldr	r1, [sp, #4]
   bcb7c:	3101      	adds	r1, #1
   bcb7e:	287f      	cmp	r0, #127	; 0x7f
   bcb80:	b2c9      	uxtb	r1, r1
   bcb82:	bf28      	it	cs
   bcb84:	203f      	movcs	r0, #63	; 0x3f
   bcb86:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   bcb88:	f802 0b01 	strb.w	r0, [r2], #1
   bcb8c:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   bcb90:	d1ec      	bne.n	bcb6c <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   bcb92:	45a8      	cmp	r8, r5
   bcb94:	d904      	bls.n	bcba0 <_ZN7FatFile7getNameEPcj+0xc4>
   bcb96:	781a      	ldrb	r2, [r3, #0]
   bcb98:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   bcb9a:	bf48      	it	mi
   bcb9c:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   bcba0:	9a00      	ldr	r2, [sp, #0]
   bcba2:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   bcba6:	781b      	ldrb	r3, [r3, #0]
   bcba8:	065b      	lsls	r3, r3, #25
   bcbaa:	f10b 0b01 	add.w	fp, fp, #1
   bcbae:	d5ba      	bpl.n	bcb26 <_ZN7FatFile7getNameEPcj+0x4a>
   bcbb0:	e7a8      	b.n	bcb04 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   bcbb2:	2400      	movs	r4, #0
   bcbb4:	703c      	strb	r4, [r7, #0]
  return false;
   bcbb6:	e7a5      	b.n	bcb04 <_ZN7FatFile7getNameEPcj+0x28>

000bcbb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   bcbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bcbbc:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   bcbbe:	f810 3b01 	ldrb.w	r3, [r0], #1
   bcbc2:	2b20      	cmp	r3, #32
   bcbc4:	d0fa      	beq.n	bcbbc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   bcbc6:	4d6a      	ldr	r5, [pc, #424]	; (bcd70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   bcbc8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   bcbca:	2400      	movs	r4, #0
    c = path[len];
   bcbcc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   bcbce:	b1c3      	cbz	r3, bcc02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   bcbd0:	2b2f      	cmp	r3, #47	; 0x2f
   bcbd2:	d016      	beq.n	bcc02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   bcbd4:	2b5c      	cmp	r3, #92	; 0x5c
   bcbd6:	d102      	bne.n	bcbde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   bcbd8:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   bcbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   bcbde:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   bcbe2:	b2c0      	uxtb	r0, r0
   bcbe4:	281d      	cmp	r0, #29
   bcbe6:	d803      	bhi.n	bcbf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   bcbe8:	fa25 f000 	lsr.w	r0, r5, r0
   bcbec:	07c0      	lsls	r0, r0, #31
   bcbee:	d4f3      	bmi.n	bcbd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   bcbf0:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   bcbf4:	283c      	cmp	r0, #60	; 0x3c
   bcbf6:	d0ef      	beq.n	bcbd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   bcbf8:	3b20      	subs	r3, #32
   bcbfa:	2b5e      	cmp	r3, #94	; 0x5e
   bcbfc:	d8ec      	bhi.n	bcbd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   bcbfe:	3401      	adds	r4, #1
    c = path[len];
   bcc00:	e7e4      	b.n	bcbcc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   bcc02:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   bcc04:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   bcc06:	4607      	mov	r7, r0
   bcc08:	f810 5b01 	ldrb.w	r5, [r0], #1
   bcc0c:	2d20      	cmp	r5, #32
   bcc0e:	d0fa      	beq.n	bcc06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   bcc10:	2d2f      	cmp	r5, #47	; 0x2f
   bcc12:	d0f8      	beq.n	bcc06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   bcc14:	6017      	str	r7, [r2, #0]
  while (len) {
   bcc16:	b14c      	cbz	r4, bcc2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   bcc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   bcc1c:	2a2e      	cmp	r2, #46	; 0x2e
   bcc1e:	d001      	beq.n	bcc24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   bcc20:	2a20      	cmp	r2, #32
   bcc22:	d101      	bne.n	bcc28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   bcc24:	3c01      	subs	r4, #1
  while (len) {
   bcc26:	e7f6      	b.n	bcc16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   bcc28:	2cff      	cmp	r4, #255	; 0xff
   bcc2a:	dcd5      	bgt.n	bcbd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   bcc2c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   bcc30:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   bcc34:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   bcc36:	f8c1 300d 	str.w	r3, [r1, #13]
   bcc3a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   bcc3c:	f04f 0800 	mov.w	r8, #0
   bcc40:	f816 3008 	ldrb.w	r3, [r6, r8]
   bcc44:	2b2e      	cmp	r3, #46	; 0x2e
   bcc46:	d001      	beq.n	bcc4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   bcc48:	2b20      	cmp	r3, #32
   bcc4a:	d102      	bne.n	bcc52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   bcc4c:	f108 0801 	add.w	r8, r8, #1
   bcc50:	e7f6      	b.n	bcc40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   bcc52:	fab8 f088 	clz	r0, r8
   bcc56:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   bcc58:	1e65      	subs	r5, r4, #1
   bcc5a:	1c6b      	adds	r3, r5, #1
   bcc5c:	d002      	beq.n	bcc64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   bcc5e:	5d73      	ldrb	r3, [r6, r5]
   bcc60:	2b2e      	cmp	r3, #46	; 0x2e
   bcc62:	d114      	bne.n	bcc8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   bcc64:	f04f 0900 	mov.w	r9, #0
   bcc68:	2707      	movs	r7, #7
   bcc6a:	464a      	mov	r2, r9
   bcc6c:	46ca      	mov	sl, r9
   bcc6e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   bcc72:	45a0      	cmp	r8, r4
   bcc74:	da68      	bge.n	bcd48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   bcc76:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   bcc7a:	2b20      	cmp	r3, #32
   bcc7c:	d003      	beq.n	bcc86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   bcc7e:	2b2e      	cmp	r3, #46	; 0x2e
   bcc80:	d107      	bne.n	bcc92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   bcc82:	45a8      	cmp	r8, r5
   bcc84:	d012      	beq.n	bccac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   bcc86:	2000      	movs	r0, #0
  for (; si < len; si++) {
   bcc88:	f108 0801 	add.w	r8, r8, #1
   bcc8c:	e7f1      	b.n	bcc72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   bcc8e:	3d01      	subs	r5, #1
   bcc90:	e7e3      	b.n	bcc5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   bcc92:	2b22      	cmp	r3, #34	; 0x22
   bcc94:	d008      	beq.n	bcca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   bcc96:	2b7c      	cmp	r3, #124	; 0x7c
   bcc98:	d006      	beq.n	bcca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   bcc9a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   bcc9e:	f1bc 0f05 	cmp.w	ip, #5
   bcca2:	d80a      	bhi.n	bccba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   bcca4:	2b2d      	cmp	r3, #45	; 0x2d
   bcca6:	d012      	beq.n	bccce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   bcca8:	45a8      	cmp	r8, r5
   bccaa:	d15b      	bne.n	bcd64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   bccac:	2f0a      	cmp	r7, #10
   bccae:	d04a      	beq.n	bcd46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   bccb0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   bccb2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   bccb4:	f04f 0e10 	mov.w	lr, #16
   bccb8:	e7e6      	b.n	bcc88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   bccba:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   bccbe:	f1bc 0f05 	cmp.w	ip, #5
   bccc2:	d9f1      	bls.n	bcca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   bccc4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   bccc8:	f1bc 0f02 	cmp.w	ip, #2
   bcccc:	d9ec      	bls.n	bcca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   bccce:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   bccd2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   bccd6:	d8e7      	bhi.n	bcca8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   bccd8:	45a8      	cmp	r8, r5
   bccda:	d0e7      	beq.n	bccac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   bccdc:	42ba      	cmp	r2, r7
   bccde:	d830      	bhi.n	bcd42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   bcce0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   bcce4:	f1bc 0f19 	cmp.w	ip, #25
   bcce8:	d81a      	bhi.n	bcd20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   bccea:	3b20      	subs	r3, #32
        lc |= bit;
   bccec:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   bccf0:	b2db      	uxtb	r3, r3
        lc |= bit;
   bccf2:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   bccf6:	f102 0c01 	add.w	ip, r2, #1
   bccfa:	fa5f fc8c 	uxtb.w	ip, ip
   bccfe:	440a      	add	r2, r1
      if (i < 7) {
   bcd00:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   bcd04:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   bcd06:	d801      	bhi.n	bcd0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   bcd08:	f881 c00c 	strb.w	ip, [r1, #12]
   bcd0c:	4662      	mov	r2, ip
   bcd0e:	e7bb      	b.n	bcc88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   bcd10:	45a8      	cmp	r8, r5
   bcd12:	dc18      	bgt.n	bcd46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   bcd14:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   bcd16:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   bcd18:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   bcd1a:	f04f 0e10 	mov.w	lr, #16
   bcd1e:	e7b2      	b.n	bcc86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   bcd20:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   bcd24:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   bcd28:	bf98      	it	ls
   bcd2a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   bcd2e:	e7e2      	b.n	bccf6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   bcd30:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   bcd32:	2001      	movs	r0, #1
   bcd34:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   bcd36:	4419      	add	r1, r3
   bcd38:	237e      	movs	r3, #126	; 0x7e
   bcd3a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   bcd3c:	2331      	movs	r3, #49	; 0x31
   bcd3e:	738b      	strb	r3, [r1, #14]
   bcd40:	e74b      	b.n	bcbda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   bcd42:	2f0a      	cmp	r7, #10
   bcd44:	d1e4      	bne.n	bcd10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   bcd46:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   bcd48:	7b4b      	ldrb	r3, [r1, #13]
   bcd4a:	2b20      	cmp	r3, #32
   bcd4c:	f43f af44 	beq.w	bcbd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   bcd50:	2800      	cmp	r0, #0
   bcd52:	d0ed      	beq.n	bcd30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   bcd54:	ea1a 0f09 	tst.w	sl, r9
   bcd58:	bf18      	it	ne
   bcd5a:	f04f 0902 	movne.w	r9, #2
   bcd5e:	f881 9000 	strb.w	r9, [r1]
   bcd62:	e73a      	b.n	bcbda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   bcd64:	42ba      	cmp	r2, r7
   bcd66:	d8ec      	bhi.n	bcd42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   bcd68:	2000      	movs	r0, #0
      c = '_';
   bcd6a:	235f      	movs	r3, #95	; 0x5f
   bcd6c:	e7c3      	b.n	bccf6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   bcd6e:	bf00      	nop
   bcd70:	31000101 	.word	0x31000101

000bcd74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   bcd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   bcd78:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   bcd7c:	4606      	mov	r6, r0
   bcd7e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   bcd80:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   bcd82:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   bcd84:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   bcd88:	6861      	ldr	r1, [r4, #4]
   bcd8a:	68a2      	ldr	r2, [r4, #8]
   bcd8c:	186b      	adds	r3, r5, r1
   bcd8e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   bcd90:	4411      	add	r1, r2
   bcd92:	4291      	cmp	r1, r2
   bcd94:	d006      	beq.n	bcda4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   bcd96:	f812 0b01 	ldrb.w	r0, [r2], #1
   bcd9a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   bcd9e:	4043      	eors	r3, r0
   bcda0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   bcda2:	e7f6      	b.n	bcd92 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   bcda4:	f1b9 0f03 	cmp.w	r9, #3
   bcda8:	bf28      	it	cs
   bcdaa:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   bcdae:	f109 0204 	add.w	r2, r9, #4
   bcdb2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   bcdb4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   bcdb8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   bcdba:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   bcdbc:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   bcdbe:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   bcdc0:	bf94      	ite	ls
   bcdc2:	3130      	addls	r1, #48	; 0x30
   bcdc4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   bcdc6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   bcdc8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   bcdca:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   bcdce:	d1f1      	bne.n	bcdb4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   bcdd0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   bcdd4:	2100      	movs	r1, #0
   bcdd6:	735f      	strb	r7, [r3, #13]
   bcdd8:	4630      	mov	r0, r6
   bcdda:	f7ff fc0b 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   bcdde:	2101      	movs	r1, #1
   bcde0:	4630      	mov	r0, r6
   bcde2:	f7ff fbe8 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   bcde6:	4601      	mov	r1, r0
   bcde8:	b928      	cbnz	r0, bcdf6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   bcdea:	7870      	ldrb	r0, [r6, #1]
   bcdec:	fab0 f080 	clz	r0, r0
   bcdf0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   bcdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   bcdf6:	7803      	ldrb	r3, [r0, #0]
   bcdf8:	b16b      	cbz	r3, bce16 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   bcdfa:	7ac3      	ldrb	r3, [r0, #11]
   bcdfc:	071b      	lsls	r3, r3, #28
   bcdfe:	d4ee      	bmi.n	bcdde <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   bce00:	220b      	movs	r2, #11
   bce02:	4640      	mov	r0, r8
   bce04:	f007 fb78 	bl	c44f8 <memcmp>
   bce08:	2800      	cmp	r0, #0
   bce0a:	d1e8      	bne.n	bcdde <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   bce0c:	3501      	adds	r5, #1
   bce0e:	b2ad      	uxth	r5, r5
   bce10:	2d64      	cmp	r5, #100	; 0x64
   bce12:	d1b9      	bne.n	bcd88 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   bce14:	e7ed      	b.n	bcdf2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   bce16:	2001      	movs	r0, #1
   bce18:	e7eb      	b.n	bcdf2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000bce1c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   bce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce20:	ed2d 8b02 	vpush	{d8}
   bce24:	b08b      	sub	sp, #44	; 0x2c
   bce26:	460d      	mov	r5, r1
   bce28:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   bce2a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   bce2c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   bce2e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   bce32:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   bce34:	d105      	bne.n	bce42 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   bce36:	2000      	movs	r0, #0
}
   bce38:	b00b      	add	sp, #44	; 0x2c
   bce3a:	ecbd 8b02 	vpop	{d8}
   bce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   bce42:	9b07      	ldr	r3, [sp, #28]
   bce44:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   bce46:	2b00      	cmp	r3, #0
   bce48:	d1f5      	bne.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   bce4a:	6853      	ldr	r3, [r2, #4]
   bce4c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   bce4e:	7813      	ldrb	r3, [r2, #0]
   bce50:	079c      	lsls	r4, r3, #30
   bce52:	bf1f      	itttt	ne
   bce54:	9b05      	ldrne	r3, [sp, #20]
   bce56:	330c      	addne	r3, #12
   bce58:	220d      	movne	r2, #13
   bce5a:	fbb3 f3f2 	udivne	r3, r3, r2
   bce5e:	bf1a      	itte	ne
   bce60:	3301      	addne	r3, #1
   bce62:	b2db      	uxtbne	r3, r3
   bce64:	2301      	moveq	r3, #1
    seekSet(0);
   bce66:	2100      	movs	r1, #0
   bce68:	4628      	mov	r0, r5
   bce6a:	9303      	str	r3, [sp, #12]
   bce6c:	f7ff fbc2 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   bce70:	f107 030d 	add.w	r3, r7, #13
  }
   bce74:	f04f 0b00 	mov.w	fp, #0
   bce78:	ee08 3a10 	vmov	s16, r3
   bce7c:	46da      	mov	sl, fp
   bce7e:	465c      	mov	r4, fp
   bce80:	465e      	mov	r6, fp
   bce82:	f8cd b010 	str.w	fp, [sp, #16]
   bce86:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   bce88:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   bce8a:	2101      	movs	r1, #1
   bce8c:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   bce8e:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   bce92:	f7ff fb90 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   bce96:	4603      	mov	r3, r0
   bce98:	2800      	cmp	r0, #0
   bce9a:	d171      	bne.n	bcf80 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   bce9c:	786b      	ldrb	r3, [r5, #1]
   bce9e:	2b00      	cmp	r3, #0
   bcea0:	d1c9      	bne.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   bcea2:	9b06      	ldr	r3, [sp, #24]
   bcea4:	059a      	lsls	r2, r3, #22
   bcea6:	d5c6      	bpl.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   bcea8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   bceac:	3b01      	subs	r3, #1
   bceae:	2b01      	cmp	r3, #1
   bceb0:	d8c1      	bhi.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   bceb2:	9b04      	ldr	r3, [sp, #16]
   bceb4:	2c00      	cmp	r4, #0
   bceb6:	bf08      	it	eq
   bceb8:	4643      	moveq	r3, r8
   bceba:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   bcebc:	9b03      	ldr	r3, [sp, #12]
   bcebe:	429c      	cmp	r4, r3
   bcec0:	f0c0 80f1 	bcc.w	bd0a6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   bcec4:	f1b9 0f00 	cmp.w	r9, #0
   bcec8:	f040 810a 	bne.w	bd0e0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   bcecc:	9b04      	ldr	r3, [sp, #16]
   bcece:	4628      	mov	r0, r5
   bced0:	0159      	lsls	r1, r3, #5
   bced2:	f7ff fb8f 	bl	bc5f4 <_ZN7FatFile7seekSetEm>
   bced6:	2800      	cmp	r0, #0
   bced8:	d0ad      	beq.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   bceda:	9b03      	ldr	r3, [sp, #12]
   bcedc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   bcee0:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   bcee4:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   bcee6:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   bceea:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   bceee:	2e00      	cmp	r6, #0
   bcef0:	f000 810d 	beq.w	bd10e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   bcef4:	2100      	movs	r1, #0
   bcef6:	4628      	mov	r0, r5
   bcef8:	f7ff fb5d 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   bcefc:	4604      	mov	r4, r0
   bcefe:	2800      	cmp	r0, #0
   bcf00:	d099      	beq.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   bcf02:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   bcf04:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   bcf08:	454e      	cmp	r6, r9
   bcf0a:	f043 0301 	orr.w	r3, r3, #1
   bcf0e:	bf0c      	ite	eq
   bcf10:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   bcf14:	46b3      	movne	fp, r6
   bcf16:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   bcf1a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   bcf1e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   bcf22:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   bcf26:	f107 000d 	add.w	r0, r7, #13
   bcf2a:	f7ff fdb1 	bl	bca90 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   bcf2e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   bcf32:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   bcf34:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   bcf38:	f00b 031f 	and.w	r3, fp, #31
   bcf3c:	220d      	movs	r2, #13
   bcf3e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   bcf40:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   bcf44:	4353      	muls	r3, r2
   bcf46:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   bcf48:	9905      	ldr	r1, [sp, #20]
   bcf4a:	4299      	cmp	r1, r3
   bcf4c:	f240 80d0 	bls.w	bd0f0 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   bcf50:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   bcf54:	2a04      	cmp	r2, #4
   bcf56:	fa5f fe82 	uxtb.w	lr, r2
   bcf5a:	f102 0001 	add.w	r0, r2, #1
   bcf5e:	f200 80cd 	bhi.w	bd0fc <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   bcf62:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   bcf66:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   bcf6a:	280d      	cmp	r0, #13
   bcf6c:	f103 0301 	add.w	r3, r3, #1
   bcf70:	4602      	mov	r2, r0
   bcf72:	d1e9      	bne.n	bcf48 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   bcf74:	3e01      	subs	r6, #1
   bcf76:	b2f6      	uxtb	r6, r6
   bcf78:	e7b9      	b.n	bceee <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   bcf7a:	f04f 0901 	mov.w	r9, #1
   bcf7e:	e783      	b.n	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   bcf80:	7802      	ldrb	r2, [r0, #0]
   bcf82:	2ae5      	cmp	r2, #229	; 0xe5
   bcf84:	d000      	beq.n	bcf88 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   bcf86:	b97a      	cbnz	r2, bcfa8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   bcf88:	9904      	ldr	r1, [sp, #16]
   bcf8a:	2c00      	cmp	r4, #0
   bcf8c:	bf08      	it	eq
   bcf8e:	4641      	moveq	r1, r8
   bcf90:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   bcf92:	9903      	ldr	r1, [sp, #12]
   bcf94:	428c      	cmp	r4, r1
        freeFound++;
   bcf96:	bf3c      	itt	cc
   bcf98:	3401      	addcc	r4, #1
   bcf9a:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   bcf9c:	2a00      	cmp	r2, #0
   bcf9e:	d080      	beq.n	bcea2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   bcfa0:	2ae5      	cmp	r2, #229	; 0xe5
   bcfa2:	d105      	bne.n	bcfb0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   bcfa4:	2600      	movs	r6, #0
   bcfa6:	e76f      	b.n	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   bcfa8:	9903      	ldr	r1, [sp, #12]
   bcfaa:	428c      	cmp	r4, r1
   bcfac:	bf38      	it	cc
   bcfae:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   bcfb0:	2a2e      	cmp	r2, #46	; 0x2e
   bcfb2:	d0f7      	beq.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   bcfb4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   bcfb6:	290f      	cmp	r1, #15
   bcfb8:	d14a      	bne.n	bd050 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   bcfba:	bb16      	cbnz	r6, bd002 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   bcfbc:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   bcfc0:	f43f af62 	beq.w	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   bcfc4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   bcfc8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   bcfcc:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   bcfce:	220d      	movs	r2, #13
   bcfd0:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   bcfd4:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   bcfd8:	9a05      	ldr	r2, [sp, #20]
   bcfda:	4542      	cmp	r2, r8
   bcfdc:	d9e2      	bls.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   bcfde:	eba2 0208 	sub.w	r2, r2, r8
   bcfe2:	9208      	str	r2, [sp, #32]
   bcfe4:	2200      	movs	r2, #0
   bcfe6:	eb02 0108 	add.w	r1, r2, r8
   bcfea:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   bcfec:	4618      	mov	r0, r3
   bcfee:	b2d1      	uxtb	r1, r2
   bcff0:	f7ff fd3a 	bl	bca68 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   bcff4:	9908      	ldr	r1, [sp, #32]
   bcff6:	428a      	cmp	r2, r1
   bcff8:	d10d      	bne.n	bd016 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   bcffa:	2800      	cmp	r0, #0
   bcffc:	bf18      	it	ne
   bcffe:	2600      	movne	r6, #0
   bd000:	e742      	b.n	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   bd002:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   bd006:	fa5f fa8a 	uxtb.w	sl, sl
   bd00a:	4552      	cmp	r2, sl
   bd00c:	d1ca      	bne.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   bd00e:	7b5a      	ldrb	r2, [r3, #13]
   bd010:	455a      	cmp	r2, fp
   bd012:	d0dc      	beq.n	bcfce <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   bd014:	e7c6      	b.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   bd016:	28ff      	cmp	r0, #255	; 0xff
   bd018:	d8c4      	bhi.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   bd01a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   bd01e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   bd022:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   bd024:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   bd026:	bf9c      	itt	ls
   bd028:	f10e 0020 	addls.w	r0, lr, #32
   bd02c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   bd030:	4608      	mov	r0, r1
   bd032:	9909      	ldr	r1, [sp, #36]	; 0x24
   bd034:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   bd036:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   bd03a:	f1bc 0f19 	cmp.w	ip, #25
   bd03e:	bf9c      	itt	ls
   bd040:	3120      	addls	r1, #32
   bd042:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   bd044:	4571      	cmp	r1, lr
   bd046:	d1ad      	bne.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   bd048:	3201      	adds	r2, #1
   bd04a:	2a0d      	cmp	r2, #13
   bd04c:	d1cb      	bne.n	bcfe6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   bd04e:	e71b      	b.n	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   bd050:	0708      	lsls	r0, r1, #28
   bd052:	d4a7      	bmi.n	bcfa4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   bd054:	b15e      	cbz	r6, bd06e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   bd056:	f1ba 0f01 	cmp.w	sl, #1
   bd05a:	f47f aeec 	bne.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   bd05e:	4618      	mov	r0, r3
   bd060:	f7ff fd16 	bl	bca90 <_ZN7FatFile11lfnChecksumEPh>
   bd064:	4558      	cmp	r0, fp
   bd066:	f47f aee6 	bne.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   bd06a:	46b1      	mov	r9, r6
   bd06c:	e00e      	b.n	bd08c <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   bd06e:	ee18 1a10 	vmov	r1, s16
   bd072:	220b      	movs	r2, #11
   bd074:	4618      	mov	r0, r3
   bd076:	f007 fa3f 	bl	c44f8 <memcmp>
   bd07a:	2800      	cmp	r0, #0
   bd07c:	f47f af04 	bne.w	bce88 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   bd080:	f897 9000 	ldrb.w	r9, [r7]
   bd084:	f019 0901 	ands.w	r9, r9, #1
   bd088:	f47f af77 	bne.w	bcf7a <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   bd08c:	9b06      	ldr	r3, [sp, #24]
   bd08e:	0519      	lsls	r1, r3, #20
   bd090:	f53f aed1 	bmi.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   bd094:	9b06      	ldr	r3, [sp, #24]
   bd096:	9807      	ldr	r0, [sp, #28]
   bd098:	f8cd 9000 	str.w	r9, [sp]
   bd09c:	4642      	mov	r2, r8
   bd09e:	4629      	mov	r1, r5
   bd0a0:	f7ff faeb 	bl	bc67a <_ZN7FatFile15openCachedEntryEPS_tih>
   bd0a4:	e6c8      	b.n	bce38 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   bd0a6:	2100      	movs	r1, #0
   bd0a8:	4628      	mov	r0, r5
   bd0aa:	f7ff fa84 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   bd0ae:	b9a0      	cbnz	r0, bd0da <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   bd0b0:	786b      	ldrb	r3, [r5, #1]
   bd0b2:	2b00      	cmp	r3, #0
   bd0b4:	f47f aebf 	bne.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   bd0b8:	4628      	mov	r0, r5
   bd0ba:	f7ff f93d 	bl	bc338 <_ZN7FatFile13addDirClusterEv>
   bd0be:	2800      	cmp	r0, #0
   bd0c0:	f43f aeb9 	beq.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   bd0c4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   bd0c6:	791b      	ldrb	r3, [r3, #4]
   bd0c8:	2b01      	cmp	r3, #1
   bd0ca:	f63f aefb 	bhi.w	bcec4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   bd0ce:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   bd0d0:	3410      	adds	r4, #16
   bd0d2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   bd0d4:	42a3      	cmp	r3, r4
   bd0d6:	d8ef      	bhi.n	bd0b8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   bd0d8:	e6f4      	b.n	bcec4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   bd0da:	3401      	adds	r4, #1
   bd0dc:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   bd0de:	e6ed      	b.n	bcebc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   bd0e0:	4639      	mov	r1, r7
   bd0e2:	4628      	mov	r0, r5
   bd0e4:	f7ff fe46 	bl	bcd74 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   bd0e8:	2800      	cmp	r0, #0
   bd0ea:	f47f aeef 	bne.w	bcecc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   bd0ee:	e6a2      	b.n	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   bd0f0:	bf14      	ite	ne
   bd0f2:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   bd0f6:	2100      	moveq	r1, #0
   bd0f8:	b289      	uxth	r1, r1
   bd0fa:	e72b      	b.n	bcf54 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   bd0fc:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   bd100:	bf94      	ite	ls
   bd102:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   bd106:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   bd10a:	8091      	strh	r1, [r2, #4]
   bd10c:	e72d      	b.n	bcf6a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   bd10e:	4631      	mov	r1, r6
   bd110:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   bd112:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   bd116:	f7ff fa4e 	bl	bc5b6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   bd11a:	4604      	mov	r4, r0
   bd11c:	2800      	cmp	r0, #0
   bd11e:	f43f ae8a 	beq.w	bce36 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   bd122:	2220      	movs	r2, #32
   bd124:	4631      	mov	r1, r6
   bd126:	f007 fa1f 	bl	c4568 <memset>
  memcpy(dir->name, fname->sfn, 11);
   bd12a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   bd12e:	6023      	str	r3, [r4, #0]
   bd130:	f8d7 3011 	ldr.w	r3, [r7, #17]
   bd134:	6063      	str	r3, [r4, #4]
   bd136:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   bd13a:	8123      	strh	r3, [r4, #8]
   bd13c:	7dfb      	ldrb	r3, [r7, #23]
   bd13e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   bd140:	783b      	ldrb	r3, [r7, #0]
   bd142:	f003 0318 	and.w	r3, r3, #24
   bd146:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   bd148:	4b0f      	ldr	r3, [pc, #60]	; (bd188 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   bd14a:	681b      	ldr	r3, [r3, #0]
   bd14c:	b19b      	cbz	r3, bd176 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   bd14e:	f104 010e 	add.w	r1, r4, #14
   bd152:	f104 0010 	add.w	r0, r4, #16
   bd156:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   bd158:	8a23      	ldrh	r3, [r4, #16]
   bd15a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   bd15c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   bd15e:	89e3      	ldrh	r3, [r4, #14]
   bd160:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   bd162:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   bd164:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   bd168:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   bd16c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   bd170:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   bd174:	e78e      	b.n	bd094 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   bd176:	2321      	movs	r3, #33	; 0x21
   bd178:	7423      	strb	r3, [r4, #16]
   bd17a:	2328      	movs	r3, #40	; 0x28
   bd17c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   bd17e:	2308      	movs	r3, #8
   bd180:	73a6      	strb	r6, [r4, #14]
   bd182:	73e3      	strb	r3, [r4, #15]
   bd184:	e7e8      	b.n	bd158 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   bd186:	bf00      	nop
   bd188:	2003e60c 	.word	0x2003e60c

000bd18c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bd18c:	b513      	push	{r0, r1, r4, lr}
   bd18e:	4604      	mov	r4, r0
    }
   bd190:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bd192:	b159      	cbz	r1, bd1ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bd194:	9101      	str	r1, [sp, #4]
   bd196:	f007 fa72 	bl	c467e <strlen>
   bd19a:	6823      	ldr	r3, [r4, #0]
   bd19c:	9901      	ldr	r1, [sp, #4]
   bd19e:	68db      	ldr	r3, [r3, #12]
   bd1a0:	4602      	mov	r2, r0
   bd1a2:	4620      	mov	r0, r4
    }
   bd1a4:	b002      	add	sp, #8
   bd1a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bd1aa:	4718      	bx	r3
    }
   bd1ac:	b002      	add	sp, #8
   bd1ae:	bd10      	pop	{r4, pc}

000bd1b0 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   bd1b0:	b510      	push	{r4, lr}
   bd1b2:	460c      	mov	r4, r1
    return m_attr;
   bd1b4:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   bd1b6:	b909      	cbnz	r1, bd1bc <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   bd1b8:	2000      	movs	r0, #0
}
   bd1ba:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   bd1bc:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   bd1c0:	d005      	beq.n	bd1ce <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   bd1c2:	232f      	movs	r3, #47	; 0x2f
   bd1c4:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   bd1c6:	2300      	movs	r3, #0
   bd1c8:	7063      	strb	r3, [r4, #1]
  return true;
   bd1ca:	2001      	movs	r0, #1
   bd1cc:	e7f5      	b.n	bd1ba <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   bd1ce:	f7ff f8f1 	bl	bc3b4 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   bd1d2:	2800      	cmp	r0, #0
   bd1d4:	d0f0      	beq.n	bd1b8 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   bd1d6:	4621      	mov	r1, r4
   bd1d8:	f7ff f8fb 	bl	bc3d2 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   bd1dc:	e7f5      	b.n	bd1ca <_ZN7FatFile6getSFNEPc+0x1a>

000bd1de <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   bd1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   bd1e0:	7803      	ldrb	r3, [r0, #0]
   bd1e2:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   bd1e4:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   bd1e6:	d520      	bpl.n	bd22a <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   bd1e8:	6843      	ldr	r3, [r0, #4]
   bd1ea:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   bd1ec:	f100 020c 	add.w	r2, r0, #12
   bd1f0:	6818      	ldr	r0, [r3, #0]
   bd1f2:	9201      	str	r2, [sp, #4]
   bd1f4:	f000 fb87 	bl	bd906 <_ZN9SdSpiCard10writeBlockEmPKh>
   bd1f8:	9a01      	ldr	r2, [sp, #4]
   bd1fa:	4605      	mov	r5, r0
   bd1fc:	b918      	cbnz	r0, bd206 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   bd1fe:	2500      	movs	r5, #0
}
   bd200:	4628      	mov	r0, r5
   bd202:	b003      	add	sp, #12
   bd204:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   bd206:	7823      	ldrb	r3, [r4, #0]
   bd208:	079b      	lsls	r3, r3, #30
   bd20a:	d404      	bmi.n	bd216 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   bd20c:	7823      	ldrb	r3, [r4, #0]
   bd20e:	f023 0301 	bic.w	r3, r3, #1
   bd212:	7023      	strb	r3, [r4, #0]
   bd214:	e7f4      	b.n	bd200 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   bd216:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   bd21a:	6919      	ldr	r1, [r3, #16]
   bd21c:	4401      	add	r1, r0
   bd21e:	6818      	ldr	r0, [r3, #0]
   bd220:	f000 fb71 	bl	bd906 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   bd224:	2800      	cmp	r0, #0
   bd226:	d1f1      	bne.n	bd20c <_ZN8FatCache4syncEv+0x2e>
   bd228:	e7e9      	b.n	bd1fe <_ZN8FatCache4syncEv+0x20>
  return true;
   bd22a:	2501      	movs	r5, #1
   bd22c:	e7e8      	b.n	bd200 <_ZN8FatCache4syncEv+0x22>

000bd22e <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   bd22e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   bd230:	6883      	ldr	r3, [r0, #8]
   bd232:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   bd234:	4604      	mov	r4, r0
   bd236:	460e      	mov	r6, r1
   bd238:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   bd23a:	d009      	beq.n	bd250 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   bd23c:	f7ff ffcf 	bl	bd1de <_ZN8FatCache4syncEv>
   bd240:	b908      	cbnz	r0, bd246 <_ZN8FatCache4readEmh+0x18>
  return 0;
   bd242:	2000      	movs	r0, #0
}
   bd244:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   bd246:	076b      	lsls	r3, r5, #29
   bd248:	d50a      	bpl.n	bd260 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   bd24a:	2300      	movs	r3, #0
   bd24c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   bd24e:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   bd250:	7822      	ldrb	r2, [r4, #0]
   bd252:	f005 0503 	and.w	r5, r5, #3
   bd256:	4620      	mov	r0, r4
   bd258:	4315      	orrs	r5, r2
   bd25a:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   bd25e:	e7f1      	b.n	bd244 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   bd260:	6863      	ldr	r3, [r4, #4]
   bd262:	f104 020c 	add.w	r2, r4, #12
   bd266:	6818      	ldr	r0, [r3, #0]
   bd268:	4631      	mov	r1, r6
   bd26a:	f000 fac3 	bl	bd7f4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   bd26e:	2800      	cmp	r0, #0
   bd270:	d1eb      	bne.n	bd24a <_ZN8FatCache4readEmh+0x1c>
   bd272:	e7e6      	b.n	bd242 <_ZN8FatCache4readEmh+0x14>

000bd274 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   bd274:	7983      	ldrb	r3, [r0, #6]
   bd276:	6940      	ldr	r0, [r0, #20]
   bd278:	3902      	subs	r1, #2
   bd27a:	4099      	lsls	r1, r3
}
   bd27c:	4408      	add	r0, r1
   bd27e:	4770      	bx	lr

000bd280 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   bd280:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   bd282:	b570      	push	{r4, r5, r6, lr}
   bd284:	4605      	mov	r5, r0
   bd286:	460c      	mov	r4, r1
   bd288:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   bd28a:	d802      	bhi.n	bd292 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   bd28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bd290:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   bd292:	69c3      	ldr	r3, [r0, #28]
   bd294:	428b      	cmp	r3, r1
   bd296:	d3f9      	bcc.n	bd28c <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   bd298:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   bd29a:	2b20      	cmp	r3, #32
   bd29c:	d116      	bne.n	bd2cc <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   bd29e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   bd2a0:	2202      	movs	r2, #2
   bd2a2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   bd2a6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   bd2aa:	f7ff ffc0 	bl	bd22e <_ZN8FatCache4readEmh>
    if (!pc) {
   bd2ae:	2800      	cmp	r0, #0
   bd2b0:	d0ec      	beq.n	bd28c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   bd2b2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   bd2b6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   bd2ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   bd2be:	69ea      	ldr	r2, [r5, #28]
   bd2c0:	429a      	cmp	r2, r3
  *value = next;
   bd2c2:	bf26      	itte	cs
   bd2c4:	6033      	strcs	r3, [r6, #0]
  return 1;
   bd2c6:	2001      	movcs	r0, #1
    return 0;
   bd2c8:	2000      	movcc	r0, #0
   bd2ca:	e7e1      	b.n	bd290 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   bd2cc:	2b10      	cmp	r3, #16
   bd2ce:	d1dd      	bne.n	bd28c <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   bd2d0:	f3c1 2307 	ubfx	r3, r1, #8, #8
   bd2d4:	6981      	ldr	r1, [r0, #24]
   bd2d6:	2202      	movs	r2, #2
   bd2d8:	4419      	add	r1, r3
   bd2da:	f500 700c 	add.w	r0, r0, #560	; 0x230
   bd2de:	f7ff ffa6 	bl	bd22e <_ZN8FatCache4readEmh>
    if (!pc) {
   bd2e2:	2800      	cmp	r0, #0
   bd2e4:	d0d2      	beq.n	bd28c <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   bd2e6:	b2e4      	uxtb	r4, r4
   bd2e8:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   bd2ec:	e7e7      	b.n	bd2be <_ZN9FatVolume6fatGetEmPm+0x3e>

000bd2ee <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   bd2ee:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   bd2f0:	b538      	push	{r3, r4, r5, lr}
   bd2f2:	460c      	mov	r4, r1
   bd2f4:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   bd2f6:	d801      	bhi.n	bd2fc <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   bd2f8:	2000      	movs	r0, #0
}
   bd2fa:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   bd2fc:	69c3      	ldr	r3, [r0, #28]
   bd2fe:	428b      	cmp	r3, r1
   bd300:	d3fa      	bcc.n	bd2f8 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   bd302:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   bd304:	2b20      	cmp	r3, #32
   bd306:	d10f      	bne.n	bd328 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   bd308:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   bd30a:	2203      	movs	r2, #3
   bd30c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   bd310:	f500 700c 	add.w	r0, r0, #560	; 0x230
   bd314:	f7ff ff8b 	bl	bd22e <_ZN8FatCache4readEmh>
    if (!pc) {
   bd318:	2800      	cmp	r0, #0
   bd31a:	d0ed      	beq.n	bd2f8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   bd31c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   bd320:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   bd324:	2001      	movs	r0, #1
   bd326:	e7e8      	b.n	bd2fa <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   bd328:	2b10      	cmp	r3, #16
   bd32a:	d1e5      	bne.n	bd2f8 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   bd32c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   bd330:	6981      	ldr	r1, [r0, #24]
   bd332:	2203      	movs	r2, #3
   bd334:	4419      	add	r1, r3
   bd336:	f500 700c 	add.w	r0, r0, #560	; 0x230
   bd33a:	f7ff ff78 	bl	bd22e <_ZN8FatCache4readEmh>
    if (!pc) {
   bd33e:	2800      	cmp	r0, #0
   bd340:	d0da      	beq.n	bd2f8 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   bd342:	b2e4      	uxtb	r4, r4
   bd344:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   bd348:	e7ec      	b.n	bd324 <_ZN9FatVolume6fatPutEmm+0x36>

000bd34a <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   bd34a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   bd34e:	68c4      	ldr	r4, [r0, #12]
   bd350:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   bd352:	4605      	mov	r5, r0
   bd354:	460e      	mov	r6, r1
   bd356:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   bd358:	d301      	bcc.n	bd35e <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   bd35a:	2701      	movs	r7, #1
   bd35c:	e001      	b.n	bd362 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   bd35e:	460c      	mov	r4, r1
    setStart = false;
   bd360:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   bd362:	69eb      	ldr	r3, [r5, #28]
    find++;
   bd364:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   bd366:	42a3      	cmp	r3, r4
   bd368:	d202      	bcs.n	bd370 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   bd36a:	b9c7      	cbnz	r7, bd39e <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   bd36c:	68ec      	ldr	r4, [r5, #12]
   bd36e:	e7f4      	b.n	bd35a <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   bd370:	42a6      	cmp	r6, r4
   bd372:	d014      	beq.n	bd39e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   bd374:	aa01      	add	r2, sp, #4
   bd376:	4621      	mov	r1, r4
   bd378:	4628      	mov	r0, r5
   bd37a:	f7ff ff81 	bl	bd280 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   bd37e:	2800      	cmp	r0, #0
   bd380:	db0d      	blt.n	bd39e <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   bd382:	d0ee      	beq.n	bd362 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   bd384:	9b01      	ldr	r3, [sp, #4]
   bd386:	2b00      	cmp	r3, #0
   bd388:	d1eb      	bne.n	bd362 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   bd38a:	b107      	cbz	r7, bd38e <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   bd38c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   bd38e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   bd392:	4621      	mov	r1, r4
   bd394:	4628      	mov	r0, r5
   bd396:	f7ff ffaa 	bl	bd2ee <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   bd39a:	4607      	mov	r7, r0
   bd39c:	b920      	cbnz	r0, bd3a8 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   bd39e:	2700      	movs	r7, #0
}
   bd3a0:	4638      	mov	r0, r7
   bd3a2:	b002      	add	sp, #8
   bd3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   bd3a8:	b916      	cbnz	r6, bd3b0 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   bd3aa:	f8c8 4000 	str.w	r4, [r8]
  return true;
   bd3ae:	e7f7      	b.n	bd3a0 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   bd3b0:	4622      	mov	r2, r4
   bd3b2:	4631      	mov	r1, r6
   bd3b4:	4628      	mov	r0, r5
   bd3b6:	f7ff ff9a 	bl	bd2ee <_ZN9FatVolume6fatPutEmm>
   bd3ba:	2800      	cmp	r0, #0
   bd3bc:	d1f5      	bne.n	bd3aa <_ZN9FatVolume15allocateClusterEmPm+0x60>
   bd3be:	e7ee      	b.n	bd39e <_ZN9FatVolume15allocateClusterEmPm+0x54>

000bd3c0 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   bd3c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bd3c2:	4605      	mov	r5, r0
   bd3c4:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   bd3c6:	aa01      	add	r2, sp, #4
   bd3c8:	4621      	mov	r1, r4
   bd3ca:	4628      	mov	r0, r5
   bd3cc:	f7ff ff58 	bl	bd280 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   bd3d0:	1e06      	subs	r6, r0, #0
   bd3d2:	db10      	blt.n	bd3f6 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   bd3d4:	2200      	movs	r2, #0
   bd3d6:	4621      	mov	r1, r4
   bd3d8:	4628      	mov	r0, r5
   bd3da:	f7ff ff88 	bl	bd2ee <_ZN9FatVolume6fatPutEmm>
   bd3de:	b150      	cbz	r0, bd3f6 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   bd3e0:	68eb      	ldr	r3, [r5, #12]
   bd3e2:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   bd3e4:	bf24      	itt	cs
   bd3e6:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   bd3ea:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   bd3ec:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   bd3ee:	2e00      	cmp	r6, #0
   bd3f0:	d1e9      	bne.n	bd3c6 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   bd3f2:	b002      	add	sp, #8
   bd3f4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   bd3f6:	2000      	movs	r0, #0
   bd3f8:	e7fb      	b.n	bd3f2 <_ZN9FatVolume9freeChainEm+0x32>

000bd3fa <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   bd3fa:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   bd3fc:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   bd3fe:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   bd400:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   bd402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   bd406:	4604      	mov	r4, r0
  m_fatType = 0;
   bd408:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   bd40a:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   bd40e:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   bd410:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   bd414:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   bd416:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   bd41a:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   bd41e:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   bd422:	460d      	mov	r5, r1
   bd424:	b1b9      	cbz	r1, bd456 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   bd426:	2904      	cmp	r1, #4
   bd428:	d901      	bls.n	bd42e <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   bd42a:	2000      	movs	r0, #0
}
   bd42c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   bd42e:	4611      	mov	r1, r2
   bd430:	4630      	mov	r0, r6
   bd432:	f7ff fefc 	bl	bd22e <_ZN8FatCache4readEmh>
    if (!pc) {
   bd436:	2800      	cmp	r0, #0
   bd438:	d0f7      	beq.n	bd42a <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   bd43a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   bd43e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   bd442:	065b      	lsls	r3, r3, #25
   bd444:	d1f1      	bne.n	bd42a <_ZN9FatVolume4initEh+0x30>
   bd446:	f105 011b 	add.w	r1, r5, #27
   bd44a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   bd44e:	f8d0 5006 	ldr.w	r5, [r0, #6]
   bd452:	2d00      	cmp	r5, #0
   bd454:	d0e9      	beq.n	bd42a <_ZN9FatVolume4initEh+0x30>
   bd456:	2200      	movs	r2, #0
   bd458:	4629      	mov	r1, r5
   bd45a:	4630      	mov	r0, r6
   bd45c:	f7ff fee7 	bl	bd22e <_ZN8FatCache4readEmh>
  if (!pc) {
   bd460:	2800      	cmp	r0, #0
   bd462:	d0e2      	beq.n	bd42a <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   bd464:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   bd468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   bd46c:	d1dd      	bne.n	bd42a <_ZN9FatVolume4initEh+0x30>
   bd46e:	7c03      	ldrb	r3, [r0, #16]
   bd470:	2b02      	cmp	r3, #2
   bd472:	d1da      	bne.n	bd42a <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   bd474:	89c3      	ldrh	r3, [r0, #14]
   bd476:	2b00      	cmp	r3, #0
   bd478:	d0d7      	beq.n	bd42a <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   bd47a:	7b41      	ldrb	r1, [r0, #13]
   bd47c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   bd47e:	1e4b      	subs	r3, r1, #1
   bd480:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   bd482:	2300      	movs	r3, #0
   bd484:	71a3      	strb	r3, [r4, #6]
   bd486:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   bd488:	2301      	movs	r3, #1
   bd48a:	4299      	cmp	r1, r3
   bd48c:	d007      	beq.n	bd49e <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   bd48e:	3e01      	subs	r6, #1
   bd490:	d0cb      	beq.n	bd42a <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   bd492:	79a2      	ldrb	r2, [r4, #6]
   bd494:	005b      	lsls	r3, r3, #1
   bd496:	3201      	adds	r2, #1
   bd498:	b2db      	uxtb	r3, r3
   bd49a:	71a2      	strb	r2, [r4, #6]
   bd49c:	e7f5      	b.n	bd48a <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   bd49e:	8ac1      	ldrh	r1, [r0, #22]
   bd4a0:	b901      	cbnz	r1, bd4a4 <_ZN9FatVolume4initEh+0xaa>
   bd4a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   bd4a4:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   bd4a6:	89c3      	ldrh	r3, [r0, #14]
   bd4a8:	442b      	add	r3, r5
   bd4aa:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   bd4ac:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   bd4b0:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   bd4b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   bd4b6:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   bd4b8:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   bd4bc:	0149      	lsls	r1, r1, #5
   bd4be:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   bd4c2:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   bd4c6:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   bd4c8:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   bd4cc:	b902      	cbnz	r2, bd4d0 <_ZN9FatVolume4initEh+0xd6>
   bd4ce:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   bd4d0:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   bd4d2:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   bd4d4:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   bd4d6:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   bd4d8:	1c4b      	adds	r3, r1, #1
   bd4da:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   bd4dc:	f640 73f4 	movw	r3, #4084	; 0xff4
   bd4e0:	4299      	cmp	r1, r3
   bd4e2:	d802      	bhi.n	bd4ea <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   bd4e4:	230c      	movs	r3, #12
   bd4e6:	71e3      	strb	r3, [r4, #7]
   bd4e8:	e79f      	b.n	bd42a <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   bd4ea:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   bd4ee:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   bd4f0:	bf85      	ittet	hi
   bd4f2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   bd4f4:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   bd4f6:	2310      	movls	r3, #16
    m_fatType = 32;
   bd4f8:	2320      	movhi	r3, #32
   bd4fa:	71e3      	strb	r3, [r4, #7]
  return true;
   bd4fc:	2001      	movs	r0, #1
   bd4fe:	e795      	b.n	bd42c <_ZN9FatVolume4initEh+0x32>

000bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   bd500:	f000 baca 	b.w	bda98 <_ZN14SdSpiAltDriver4sendEh>

000bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   bd504:	f000 baad 	b.w	bda62 <_ZN14SdSpiAltDriver7receiveEv>

000bd508 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   bd508:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   bd50a:	4e0e      	ldr	r6, [pc, #56]	; (bd544 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   bd50c:	460d      	mov	r5, r1
   bd50e:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   bd510:	f000 fbc4 	bl	bdc9c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   bd514:	6833      	ldr	r3, [r6, #0]
   bd516:	1ac0      	subs	r0, r0, r3
   bd518:	4b0b      	ldr	r3, [pc, #44]	; (bd548 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   bd51a:	4298      	cmp	r0, r3
   bd51c:	d908      	bls.n	bd530 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bd51e:	f000 fbc5 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bd522:	4b0a      	ldr	r3, [pc, #40]	; (bd54c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   bd524:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   bd526:	f000 fe17 	bl	be158 <spark_process>
   bd52a:	f000 fbb7 	bl	bdc9c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   bd52e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bd530:	f000 fbbc 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   bd534:	b280      	uxth	r0, r0
   bd536:	1b40      	subs	r0, r0, r5
}
   bd538:	42a0      	cmp	r0, r4
   bd53a:	bfd4      	ite	le
   bd53c:	2000      	movle	r0, #0
   bd53e:	2001      	movgt	r0, #1
   bd540:	bd70      	pop	{r4, r5, r6, pc}
   bd542:	bf00      	nop
   bd544:	2003e614 	.word	0x2003e614
   bd548:	000186a0 	.word	0x000186a0
   bd54c:	2003e728 	.word	0x2003e728

000bd550 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   bd550:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   bd552:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   bd554:	4604      	mov	r4, r0
  if (!m_spiActive) {
   bd556:	b94d      	cbnz	r5, bd56c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   bd558:	6840      	ldr	r0, [r0, #4]
   bd55a:	f000 fa6b 	bl	bda34 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   bd55e:	6863      	ldr	r3, [r4, #4]
   bd560:	4629      	mov	r1, r5
   bd562:	7d18      	ldrb	r0, [r3, #20]
   bd564:	f004 fd17 	bl	c1f96 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   bd568:	2301      	movs	r3, #1
   bd56a:	7223      	strb	r3, [r4, #8]
  }
}
   bd56c:	bd38      	pop	{r3, r4, r5, pc}

000bd56e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   bd56e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   bd570:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   bd572:	4604      	mov	r4, r0
  if (m_spiActive) {
   bd574:	b16b      	cbz	r3, bd592 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   bd576:	6843      	ldr	r3, [r0, #4]
   bd578:	2101      	movs	r1, #1
   bd57a:	7d18      	ldrb	r0, [r3, #20]
   bd57c:	f004 fd0b 	bl	c1f96 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   bd580:	6860      	ldr	r0, [r4, #4]
   bd582:	21ff      	movs	r1, #255	; 0xff
   bd584:	f7ff ffbc 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   bd588:	6860      	ldr	r0, [r4, #4]
   bd58a:	f000 fa67 	bl	bda5c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   bd58e:	2300      	movs	r3, #0
   bd590:	7223      	strb	r3, [r4, #8]
  }
}
   bd592:	bd10      	pop	{r4, pc}

000bd594 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   bd594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd596:	4604      	mov	r4, r0
   bd598:	460d      	mov	r5, r1
   bd59a:	4616      	mov	r6, r2
   bd59c:	f000 fb86 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   bd5a0:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   bd5a2:	6860      	ldr	r0, [r4, #4]
   bd5a4:	f7ff ffae 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd5a8:	28ff      	cmp	r0, #255	; 0xff
   bd5aa:	7260      	strb	r0, [r4, #9]
   bd5ac:	d10e      	bne.n	bd5cc <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   bd5ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bd5b2:	4639      	mov	r1, r7
   bd5b4:	4620      	mov	r0, r4
   bd5b6:	f7ff ffa7 	bl	bd508 <_ZN9SdSpiCard10isTimedOutEtt>
   bd5ba:	2800      	cmp	r0, #0
   bd5bc:	d0f1      	beq.n	bd5a2 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   bd5be:	2355      	movs	r3, #85	; 0x55
  spiStop();
   bd5c0:	4620      	mov	r0, r4
   bd5c2:	7023      	strb	r3, [r4, #0]
   bd5c4:	f7ff ffd3 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd5c8:	2000      	movs	r0, #0
}
   bd5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   bd5cc:	28fe      	cmp	r0, #254	; 0xfe
   bd5ce:	d001      	beq.n	bd5d4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   bd5d0:	2350      	movs	r3, #80	; 0x50
   bd5d2:	e7f5      	b.n	bd5c0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   bd5d4:	6860      	ldr	r0, [r4, #4]
   bd5d6:	4632      	mov	r2, r6
   bd5d8:	4629      	mov	r1, r5
   bd5da:	f000 fa47 	bl	bda6c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   bd5de:	7260      	strb	r0, [r4, #9]
   bd5e0:	b108      	cbz	r0, bd5e6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   bd5e2:	2360      	movs	r3, #96	; 0x60
   bd5e4:	e7ec      	b.n	bd5c0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   bd5e6:	6860      	ldr	r0, [r4, #4]
   bd5e8:	f7ff ff8c 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   bd5ec:	6860      	ldr	r0, [r4, #4]
   bd5ee:	f7ff ff89 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   bd5f2:	2001      	movs	r0, #1
   bd5f4:	e7e9      	b.n	bd5ca <_ZN9SdSpiCard8readDataEPhj+0x36>

000bd5f6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   bd5f6:	b570      	push	{r4, r5, r6, lr}
   bd5f8:	4604      	mov	r4, r0
   bd5fa:	460e      	mov	r6, r1
   bd5fc:	f000 fb56 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
   bd600:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   bd602:	4632      	mov	r2, r6
   bd604:	4629      	mov	r1, r5
   bd606:	4620      	mov	r0, r4
   bd608:	f7ff ff7e 	bl	bd508 <_ZN9SdSpiCard10isTimedOutEtt>
   bd60c:	b930      	cbnz	r0, bd61c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   bd60e:	6860      	ldr	r0, [r4, #4]
   bd610:	f7ff ff78 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd614:	28ff      	cmp	r0, #255	; 0xff
   bd616:	d1f4      	bne.n	bd602 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   bd618:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   bd61a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   bd61c:	2000      	movs	r0, #0
   bd61e:	e7fc      	b.n	bd61a <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000bd620 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   bd620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   bd622:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   bd624:	9201      	str	r2, [sp, #4]
   bd626:	4604      	mov	r4, r0
   bd628:	460d      	mov	r5, r1
  if (!m_spiActive) {
   bd62a:	b90b      	cbnz	r3, bd630 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   bd62c:	f7ff ff90 	bl	bd550 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   bd630:	b125      	cbz	r5, bd63c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   bd632:	f44f 7196 	mov.w	r1, #300	; 0x12c
   bd636:	4620      	mov	r0, r4
   bd638:	f7ff ffdd 	bl	bd5f6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   bd63c:	6860      	ldr	r0, [r4, #4]
   bd63e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   bd642:	f7ff ff5d 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
   bd646:	2603      	movs	r6, #3
    spiSend(pa[i]);
   bd648:	af01      	add	r7, sp, #4
   bd64a:	5db9      	ldrb	r1, [r7, r6]
   bd64c:	6860      	ldr	r0, [r4, #4]
   bd64e:	f7ff ff57 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   bd652:	3e01      	subs	r6, #1
   bd654:	d2f9      	bcs.n	bd64a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   bd656:	2d00      	cmp	r5, #0
   bd658:	6860      	ldr	r0, [r4, #4]
   bd65a:	bf0c      	ite	eq
   bd65c:	2195      	moveq	r1, #149	; 0x95
   bd65e:	2187      	movne	r1, #135	; 0x87
   bd660:	f7ff ff4e 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   bd664:	6860      	ldr	r0, [r4, #4]
   bd666:	f7ff ff4d 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd66a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   bd66c:	6860      	ldr	r0, [r4, #4]
   bd66e:	f7ff ff49 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd672:	0603      	lsls	r3, r0, #24
   bd674:	7260      	strb	r0, [r4, #9]
   bd676:	d503      	bpl.n	bd680 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   bd678:	3d01      	subs	r5, #1
   bd67a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   bd67e:	d1f5      	bne.n	bd66c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   bd680:	b003      	add	sp, #12
   bd682:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bd684 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   bd684:	b570      	push	{r4, r5, r6, lr}
   bd686:	4604      	mov	r4, r0
   bd688:	460d      	mov	r5, r1
   bd68a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   bd68c:	2137      	movs	r1, #55	; 0x37
   bd68e:	2200      	movs	r2, #0
   bd690:	f7ff ffc6 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   bd694:	4632      	mov	r2, r6
   bd696:	4629      	mov	r1, r5
   bd698:	4620      	mov	r0, r4
  }
   bd69a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   bd69e:	f7ff bfbf 	b.w	bd620 <_ZN9SdSpiCard11cardCommandEhm>
	...

000bd6a4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   bd6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   bd6a8:	2500      	movs	r5, #0
   bd6aa:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   bd6ac:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   bd6ae:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   bd6b0:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   bd6b2:	4604      	mov	r4, r0
   bd6b4:	4690      	mov	r8, r2
   bd6b6:	461e      	mov	r6, r3
   bd6b8:	f000 faf8 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   bd6bc:	4641      	mov	r1, r8
   bd6be:	4607      	mov	r7, r0
   bd6c0:	6860      	ldr	r0, [r4, #4]
   bd6c2:	f000 f9bb 	bl	bda3c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   bd6c6:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   bd6c8:	4a49      	ldr	r2, [pc, #292]	; (bd7f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   bd6ca:	721d      	strb	r5, [r3, #8]
   bd6cc:	2501      	movs	r5, #1
   bd6ce:	60da      	str	r2, [r3, #12]
   bd6d0:	821d      	strh	r5, [r3, #16]
  spiStart();
   bd6d2:	4620      	mov	r0, r4
   bd6d4:	f7ff ff3c 	bl	bd550 <_ZN9SdSpiCard8spiStartEv>
   bd6d8:	6863      	ldr	r3, [r4, #4]
   bd6da:	4629      	mov	r1, r5
   bd6dc:	7d18      	ldrb	r0, [r3, #20]
   bd6de:	f004 fc5a 	bl	c1f96 <digitalWrite>
   bd6e2:	250a      	movs	r5, #10
    spiSend(0XFF);
   bd6e4:	6860      	ldr	r0, [r4, #4]
   bd6e6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   bd6e8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   bd6ea:	f7ff ff09 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   bd6ee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   bd6f2:	d1f7      	bne.n	bd6e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   bd6f4:	6863      	ldr	r3, [r4, #4]
   bd6f6:	4629      	mov	r1, r5
   bd6f8:	7d18      	ldrb	r0, [r3, #20]
   bd6fa:	f004 fc4c 	bl	c1f96 <digitalWrite>
  }
   bd6fe:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   bd700:	2200      	movs	r2, #0
   bd702:	4611      	mov	r1, r2
   bd704:	4620      	mov	r0, r4
   bd706:	f7ff ff8b 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd70a:	2801      	cmp	r0, #1
   bd70c:	4680      	mov	r8, r0
   bd70e:	d018      	beq.n	bd742 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   bd710:	3d01      	subs	r5, #1
   bd712:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   bd716:	d107      	bne.n	bd728 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   bd718:	2320      	movs	r3, #32
  spiStop();
   bd71a:	4620      	mov	r0, r4
   bd71c:	7023      	strb	r3, [r4, #0]
   bd71e:	f7ff ff26 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd722:	2000      	movs	r0, #0
}
   bd724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   bd728:	6860      	ldr	r0, [r4, #4]
   bd72a:	21fd      	movs	r1, #253	; 0xfd
   bd72c:	f7ff fee8 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
   bd730:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   bd734:	6860      	ldr	r0, [r4, #4]
   bd736:	f7ff fee5 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   bd73a:	f1b8 0801 	subs.w	r8, r8, #1
   bd73e:	d1f9      	bne.n	bd734 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   bd740:	e7de      	b.n	bd700 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   bd742:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   bd746:	2108      	movs	r1, #8
   bd748:	4620      	mov	r0, r4
   bd74a:	f7ff ff69 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd74e:	2805      	cmp	r0, #5
   bd750:	d114      	bne.n	bd77c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   bd752:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   bd756:	2500      	movs	r5, #0
   bd758:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   bd75a:	462a      	mov	r2, r5
   bd75c:	2129      	movs	r1, #41	; 0x29
   bd75e:	4620      	mov	r0, r4
   bd760:	f7ff ff90 	bl	bd684 <_ZN9SdSpiCard8cardAcmdEhm>
   bd764:	4602      	mov	r2, r0
   bd766:	b1d8      	cbz	r0, bd7a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   bd768:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   bd76c:	4639      	mov	r1, r7
   bd76e:	4620      	mov	r0, r4
   bd770:	f7ff feca 	bl	bd508 <_ZN9SdSpiCard10isTimedOutEtt>
   bd774:	2800      	cmp	r0, #0
   bd776:	d0f0      	beq.n	bd75a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   bd778:	2343      	movs	r3, #67	; 0x43
   bd77a:	e7ce      	b.n	bd71a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   bd77c:	2504      	movs	r5, #4
      m_status = spiReceive();
   bd77e:	6860      	ldr	r0, [r4, #4]
   bd780:	f7ff fec0 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   bd784:	3d01      	subs	r5, #1
   bd786:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   bd78a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   bd78c:	d1f7      	bne.n	bd77e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   bd78e:	28aa      	cmp	r0, #170	; 0xaa
   bd790:	d104      	bne.n	bd79c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   bd792:	2302      	movs	r3, #2
   bd794:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   bd796:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   bd79a:	e7dd      	b.n	bd758 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   bd79c:	2325      	movs	r3, #37	; 0x25
   bd79e:	e7bc      	b.n	bd71a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   bd7a0:	7aa3      	ldrb	r3, [r4, #10]
   bd7a2:	2b02      	cmp	r3, #2
   bd7a4:	d118      	bne.n	bd7d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   bd7a6:	213a      	movs	r1, #58	; 0x3a
   bd7a8:	4620      	mov	r0, r4
   bd7aa:	f7ff ff39 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd7ae:	b108      	cbz	r0, bd7b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   bd7b0:	2337      	movs	r3, #55	; 0x37
   bd7b2:	e7b2      	b.n	bd71a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   bd7b4:	6860      	ldr	r0, [r4, #4]
   bd7b6:	f7ff fea5 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd7ba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   bd7be:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   bd7c0:	bf04      	itt	eq
   bd7c2:	2303      	moveq	r3, #3
   bd7c4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   bd7c6:	6860      	ldr	r0, [r4, #4]
   bd7c8:	f7ff fe9c 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd7cc:	6860      	ldr	r0, [r4, #4]
   bd7ce:	f7ff fe99 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd7d2:	6860      	ldr	r0, [r4, #4]
   bd7d4:	f7ff fe96 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   bd7d8:	4620      	mov	r0, r4
   bd7da:	f7ff fec8 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   bd7de:	6863      	ldr	r3, [r4, #4]
   bd7e0:	7930      	ldrb	r0, [r6, #4]
   bd7e2:	68b1      	ldr	r1, [r6, #8]
   bd7e4:	89b2      	ldrh	r2, [r6, #12]
   bd7e6:	821a      	strh	r2, [r3, #16]
   bd7e8:	7218      	strb	r0, [r3, #8]
   bd7ea:	60d9      	str	r1, [r3, #12]
  return true;
   bd7ec:	2001      	movs	r0, #1
   bd7ee:	e799      	b.n	bd724 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   bd7f0:	0003d090 	.word	0x0003d090

000bd7f4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   bd7f4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   bd7f6:	7a83      	ldrb	r3, [r0, #10]
   bd7f8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   bd7fa:	bf18      	it	ne
   bd7fc:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   bd7fe:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   bd800:	460a      	mov	r2, r1
   bd802:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   bd804:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   bd806:	f7ff ff0b 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd80a:	b130      	cbz	r0, bd81a <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   bd80c:	2330      	movs	r3, #48	; 0x30
   bd80e:	7023      	strb	r3, [r4, #0]
  spiStop();
   bd810:	4620      	mov	r0, r4
   bd812:	f7ff feac 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd816:	2500      	movs	r5, #0
   bd818:	e00b      	b.n	bd832 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   bd81a:	4629      	mov	r1, r5
   bd81c:	f44f 7200 	mov.w	r2, #512	; 0x200
   bd820:	4620      	mov	r0, r4
   bd822:	f7ff feb7 	bl	bd594 <_ZN9SdSpiCard8readDataEPhj>
   bd826:	4605      	mov	r5, r0
   bd828:	2800      	cmp	r0, #0
   bd82a:	d0f1      	beq.n	bd810 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   bd82c:	4620      	mov	r0, r4
   bd82e:	f7ff fe9e 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
}
   bd832:	4628      	mov	r0, r5
   bd834:	bd38      	pop	{r3, r4, r5, pc}

000bd836 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   bd836:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   bd838:	7a83      	ldrb	r3, [r0, #10]
   bd83a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   bd83c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   bd83e:	bf18      	it	ne
   bd840:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   bd842:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   bd844:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   bd846:	f7ff feeb 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd84a:	b130      	cbz	r0, bd85a <_ZN9SdSpiCard9readStartEm+0x24>
   bd84c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   bd84e:	4620      	mov	r0, r4
   bd850:	7023      	strb	r3, [r4, #0]
   bd852:	f7ff fe8c 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd856:	2000      	movs	r0, #0
}
   bd858:	bd10      	pop	{r4, pc}
  return true;
   bd85a:	2001      	movs	r0, #1
   bd85c:	e7fc      	b.n	bd858 <_ZN9SdSpiCard9readStartEm+0x22>

000bd85e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   bd85e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   bd860:	2200      	movs	r2, #0
   bd862:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   bd864:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   bd866:	f7ff fedb 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd86a:	b130      	cbz	r0, bd87a <_ZN9SdSpiCard8readStopEv+0x1c>
   bd86c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   bd86e:	4620      	mov	r0, r4
   bd870:	7023      	strb	r3, [r4, #0]
   bd872:	f7ff fe7c 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd876:	2000      	movs	r0, #0
}
   bd878:	bd10      	pop	{r4, pc}
  spiStop();
   bd87a:	4620      	mov	r0, r4
   bd87c:	f7ff fe77 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return true;
   bd880:	2001      	movs	r0, #1
   bd882:	e7f9      	b.n	bd878 <_ZN9SdSpiCard8readStopEv+0x1a>

000bd884 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   bd884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd886:	4604      	mov	r4, r0
   bd888:	4616      	mov	r6, r2
   bd88a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   bd88c:	f7ff ffd3 	bl	bd836 <_ZN9SdSpiCard9readStartEm>
   bd890:	b168      	cbz	r0, bd8ae <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   bd892:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   bd894:	b2ab      	uxth	r3, r5
   bd896:	429f      	cmp	r7, r3
   bd898:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   bd89c:	d909      	bls.n	bd8b2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   bd89e:	f44f 7200 	mov.w	r2, #512	; 0x200
   bd8a2:	4620      	mov	r0, r4
   bd8a4:	f7ff fe76 	bl	bd594 <_ZN9SdSpiCard8readDataEPhj>
   bd8a8:	3501      	adds	r5, #1
   bd8aa:	2800      	cmp	r0, #0
   bd8ac:	d1f2      	bne.n	bd894 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   bd8ae:	2000      	movs	r0, #0
   bd8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   bd8b2:	4620      	mov	r0, r4
}
   bd8b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   bd8b8:	f7ff bfd1 	b.w	bd85e <_ZN9SdSpiCard8readStopEv>

000bd8bc <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   bd8bc:	b538      	push	{r3, r4, r5, lr}
   bd8be:	4604      	mov	r4, r0
   bd8c0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   bd8c2:	6840      	ldr	r0, [r0, #4]
   bd8c4:	f7ff fe1c 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   bd8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   bd8cc:	6860      	ldr	r0, [r4, #4]
   bd8ce:	4629      	mov	r1, r5
   bd8d0:	f000 f8e6 	bl	bdaa0 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   bd8d4:	6860      	ldr	r0, [r4, #4]
   bd8d6:	21ff      	movs	r1, #255	; 0xff
   bd8d8:	f7ff fe12 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   bd8dc:	6860      	ldr	r0, [r4, #4]
   bd8de:	21ff      	movs	r1, #255	; 0xff
   bd8e0:	f7ff fe0e 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   bd8e4:	6860      	ldr	r0, [r4, #4]
   bd8e6:	f7ff fe0d 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd8ea:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   bd8ec:	f000 001f 	and.w	r0, r0, #31
   bd8f0:	2805      	cmp	r0, #5
   bd8f2:	d006      	beq.n	bd902 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   bd8f4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   bd8f6:	4620      	mov	r0, r4
   bd8f8:	7023      	strb	r3, [r4, #0]
   bd8fa:	f7ff fe38 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd8fe:	2000      	movs	r0, #0
}
   bd900:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   bd902:	2001      	movs	r0, #1
   bd904:	e7fc      	b.n	bd900 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000bd906 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   bd906:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   bd908:	7a83      	ldrb	r3, [r0, #10]
   bd90a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   bd90c:	bf18      	it	ne
   bd90e:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   bd910:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   bd912:	460a      	mov	r2, r1
   bd914:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   bd916:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   bd918:	f7ff fe82 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd91c:	4606      	mov	r6, r0
   bd91e:	b130      	cbz	r0, bd92e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   bd920:	2332      	movs	r3, #50	; 0x32
   bd922:	7023      	strb	r3, [r4, #0]
  spiStop();
   bd924:	4620      	mov	r0, r4
   bd926:	f7ff fe22 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd92a:	2500      	movs	r5, #0
   bd92c:	e01f      	b.n	bd96e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   bd92e:	462a      	mov	r2, r5
   bd930:	21fe      	movs	r1, #254	; 0xfe
   bd932:	4620      	mov	r0, r4
   bd934:	f7ff ffc2 	bl	bd8bc <_ZN9SdSpiCard9writeDataEhPKh>
   bd938:	2800      	cmp	r0, #0
   bd93a:	d0f3      	beq.n	bd924 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   bd93c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   bd940:	4620      	mov	r0, r4
   bd942:	f7ff fe58 	bl	bd5f6 <_ZN9SdSpiCard11waitNotBusyEt>
   bd946:	4605      	mov	r5, r0
   bd948:	b908      	cbnz	r0, bd94e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   bd94a:	235a      	movs	r3, #90	; 0x5a
   bd94c:	e7e9      	b.n	bd922 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   bd94e:	4632      	mov	r2, r6
   bd950:	210d      	movs	r1, #13
   bd952:	4620      	mov	r0, r4
   bd954:	f7ff fe64 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd958:	b108      	cbz	r0, bd95e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   bd95a:	2329      	movs	r3, #41	; 0x29
   bd95c:	e7e1      	b.n	bd922 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   bd95e:	6860      	ldr	r0, [r4, #4]
   bd960:	f7ff fdd0 	bl	bd504 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   bd964:	2800      	cmp	r0, #0
   bd966:	d1f8      	bne.n	bd95a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   bd968:	4620      	mov	r0, r4
   bd96a:	f7ff fe00 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
}
   bd96e:	4628      	mov	r0, r5
   bd970:	bd70      	pop	{r4, r5, r6, pc}

000bd972 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   bd972:	b513      	push	{r0, r1, r4, lr}
   bd974:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   bd976:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   bd97a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   bd97c:	f7ff fe3b 	bl	bd5f6 <_ZN9SdSpiCard11waitNotBusyEt>
   bd980:	9a01      	ldr	r2, [sp, #4]
   bd982:	b930      	cbnz	r0, bd992 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   bd984:	235b      	movs	r3, #91	; 0x5b
   bd986:	7023      	strb	r3, [r4, #0]
  spiStop();
   bd988:	4620      	mov	r0, r4
   bd98a:	f7ff fdf0 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd98e:	2000      	movs	r0, #0
   bd990:	e005      	b.n	bd99e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   bd992:	21fc      	movs	r1, #252	; 0xfc
   bd994:	4620      	mov	r0, r4
   bd996:	f7ff ff91 	bl	bd8bc <_ZN9SdSpiCard9writeDataEhPKh>
   bd99a:	2800      	cmp	r0, #0
   bd99c:	d0f4      	beq.n	bd988 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   bd99e:	b002      	add	sp, #8
   bd9a0:	bd10      	pop	{r4, pc}

000bd9a2 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   bd9a2:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   bd9a4:	7a83      	ldrb	r3, [r0, #10]
   bd9a6:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   bd9a8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   bd9aa:	bf18      	it	ne
   bd9ac:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   bd9ae:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   bd9b0:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   bd9b2:	f7ff fe35 	bl	bd620 <_ZN9SdSpiCard11cardCommandEhm>
   bd9b6:	b130      	cbz	r0, bd9c6 <_ZN9SdSpiCard10writeStartEm+0x24>
   bd9b8:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   bd9ba:	4620      	mov	r0, r4
   bd9bc:	7023      	strb	r3, [r4, #0]
   bd9be:	f7ff fdd6 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
  return false;
   bd9c2:	2000      	movs	r0, #0
}
   bd9c4:	bd10      	pop	{r4, pc}
  return true;
   bd9c6:	2001      	movs	r0, #1
   bd9c8:	e7fc      	b.n	bd9c4 <_ZN9SdSpiCard10writeStartEm+0x22>

000bd9ca <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   bd9ca:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   bd9cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   bd9d0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   bd9d2:	f7ff fe10 	bl	bd5f6 <_ZN9SdSpiCard11waitNotBusyEt>
   bd9d6:	4605      	mov	r5, r0
   bd9d8:	b930      	cbnz	r0, bd9e8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   bd9da:	2356      	movs	r3, #86	; 0x56
   bd9dc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   bd9de:	4620      	mov	r0, r4
   bd9e0:	f7ff fdc5 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   bd9e4:	4628      	mov	r0, r5
   bd9e6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   bd9e8:	6860      	ldr	r0, [r4, #4]
   bd9ea:	21fd      	movs	r1, #253	; 0xfd
   bd9ec:	f7ff fd88 	bl	bd500 <_ZN9SdSpiCard7spiSendEh.isra.0>
   bd9f0:	e7f5      	b.n	bd9de <_ZN9SdSpiCard9writeStopEv+0x14>

000bd9f2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   bd9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bd9f4:	4604      	mov	r4, r0
   bd9f6:	4616      	mov	r6, r2
   bd9f8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   bd9fa:	f7ff ffd2 	bl	bd9a2 <_ZN9SdSpiCard10writeStartEm>
   bd9fe:	b170      	cbz	r0, bda1e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   bda00:	2500      	movs	r5, #0
   bda02:	42bd      	cmp	r5, r7
   bda04:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   bda08:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   bda0a:	d004      	beq.n	bda16 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   bda0c:	f7ff ffb1 	bl	bd972 <_ZN9SdSpiCard9writeDataEPKh>
   bda10:	b128      	cbz	r0, bda1e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   bda12:	3501      	adds	r5, #1
   bda14:	e7f5      	b.n	bda02 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   bda16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   bda1a:	f7ff bfd6 	b.w	bd9ca <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   bda1e:	4620      	mov	r0, r4
   bda20:	f7ff fda5 	bl	bd56e <_ZN9SdSpiCard7spiStopEv>
}
   bda24:	2000      	movs	r0, #0
   bda26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bda28 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   bda28:	4b01      	ldr	r3, [pc, #4]	; (bda30 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   bda2a:	2201      	movs	r2, #1
   bda2c:	701a      	strb	r2, [r3, #0]
}
   bda2e:	4770      	bx	lr
   bda30:	2003e618 	.word	0x2003e618

000bda34 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   bda34:	1d01      	adds	r1, r0, #4
   bda36:	6800      	ldr	r0, [r0, #0]
   bda38:	f003 be3c 	b.w	c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bda3c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   bda3c:	b510      	push	{r4, lr}
   bda3e:	4604      	mov	r4, r0
  m_csPin = csPin;
   bda40:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   bda42:	6800      	ldr	r0, [r0, #0]
   bda44:	f003 fe09 	bl	c165a <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   bda48:	7d20      	ldrb	r0, [r4, #20]
   bda4a:	2101      	movs	r1, #1
   bda4c:	f004 fa92 	bl	c1f74 <pinMode>
  digitalWrite(m_csPin, HIGH);
   bda50:	7d20      	ldrb	r0, [r4, #20]
   bda52:	2101      	movs	r1, #1
}
   bda54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   bda58:	f004 ba9d 	b.w	c1f96 <digitalWrite>

000bda5c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   bda5c:	6800      	ldr	r0, [r0, #0]
   bda5e:	f003 be10 	b.w	c1682 <_ZN8SPIClass14endTransactionEv>

000bda62 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   bda62:	6800      	ldr	r0, [r0, #0]
   bda64:	21ff      	movs	r1, #255	; 0xff
   bda66:	f003 be93 	b.w	c1790 <_ZN8SPIClass8transferEh>
	...

000bda6c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   bda6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bda6e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   bda70:	4a07      	ldr	r2, [pc, #28]	; (bda90 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   bda72:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   bda74:	2500      	movs	r5, #0
   bda76:	4c07      	ldr	r4, [pc, #28]	; (bda94 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   bda78:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   bda7a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   bda7c:	460a      	mov	r2, r1
   bda7e:	4629      	mov	r1, r5
   bda80:	f003 fe8c 	bl	c179c <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   bda84:	7823      	ldrb	r3, [r4, #0]
   bda86:	2b00      	cmp	r3, #0
   bda88:	d0fc      	beq.n	bda84 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   bda8a:	2000      	movs	r0, #0
   bda8c:	b003      	add	sp, #12
   bda8e:	bd30      	pop	{r4, r5, pc}
   bda90:	000bda29 	.word	0x000bda29
   bda94:	2003e618 	.word	0x2003e618

000bda98 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   bda98:	6800      	ldr	r0, [r0, #0]
   bda9a:	f003 be79 	b.w	c1790 <_ZN8SPIClass8transferEh>
	...

000bdaa0 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   bdaa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bdaa2:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   bdaa4:	4a06      	ldr	r2, [pc, #24]	; (bdac0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   bdaa6:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   bdaa8:	2500      	movs	r5, #0
   bdaaa:	4c06      	ldr	r4, [pc, #24]	; (bdac4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   bdaac:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   bdaae:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   bdab0:	462a      	mov	r2, r5
   bdab2:	f003 fe73 	bl	c179c <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   bdab6:	7823      	ldrb	r3, [r4, #0]
   bdab8:	2b00      	cmp	r3, #0
   bdaba:	d0fc      	beq.n	bdab6 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   bdabc:	b003      	add	sp, #12
   bdabe:	bd30      	pop	{r4, r5, pc}
   bdac0:	000bda29 	.word	0x000bda29
   bdac4:	2003e618 	.word	0x2003e618

000bdac8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdac8:	b508      	push	{r3, lr}
   bdaca:	4b02      	ldr	r3, [pc, #8]	; (bdad4 <hal_ble_stack_init+0xc>)
   bdacc:	681b      	ldr	r3, [r3, #0]
   bdace:	689b      	ldr	r3, [r3, #8]
   bdad0:	9301      	str	r3, [sp, #4]
   bdad2:	bd08      	pop	{r3, pc}
   bdad4:	00030278 	.word	0x00030278

000bdad8 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdad8:	b508      	push	{r3, lr}
   bdada:	4b02      	ldr	r3, [pc, #8]	; (bdae4 <hal_ble_gap_set_tx_power+0xc>)
   bdadc:	681b      	ldr	r3, [r3, #0]
   bdade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdae0:	9301      	str	r3, [sp, #4]
   bdae2:	bd08      	pop	{r3, pc}
   bdae4:	00030278 	.word	0x00030278

000bdae8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdae8:	b508      	push	{r3, lr}
   bdaea:	4b02      	ldr	r3, [pc, #8]	; (bdaf4 <hal_ble_gap_set_advertising_data+0xc>)
   bdaec:	681b      	ldr	r3, [r3, #0]
   bdaee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdaf0:	9301      	str	r3, [sp, #4]
   bdaf2:	bd08      	pop	{r3, pc}
   bdaf4:	00030278 	.word	0x00030278

000bdaf8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdaf8:	b508      	push	{r3, lr}
   bdafa:	4b02      	ldr	r3, [pc, #8]	; (bdb04 <hal_ble_gap_set_scan_response_data+0xc>)
   bdafc:	681b      	ldr	r3, [r3, #0]
   bdafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdb00:	9301      	str	r3, [sp, #4]
   bdb02:	bd08      	pop	{r3, pc}
   bdb04:	00030278 	.word	0x00030278

000bdb08 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdb08:	b508      	push	{r3, lr}
   bdb0a:	4b02      	ldr	r3, [pc, #8]	; (bdb14 <hal_ble_gap_start_advertising+0xc>)
   bdb0c:	681b      	ldr	r3, [r3, #0]
   bdb0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdb10:	9301      	str	r3, [sp, #4]
   bdb12:	bd08      	pop	{r3, pc}
   bdb14:	00030278 	.word	0x00030278

000bdb18 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdb18:	b508      	push	{r3, lr}
   bdb1a:	4b03      	ldr	r3, [pc, #12]	; (bdb28 <hal_ble_gap_disconnect+0x10>)
   bdb1c:	681b      	ldr	r3, [r3, #0]
   bdb1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdb22:	9301      	str	r3, [sp, #4]
   bdb24:	bd08      	pop	{r3, pc}
   bdb26:	0000      	.short	0x0000
   bdb28:	00030278 	.word	0x00030278

000bdb2c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdb2c:	b508      	push	{r3, lr}
   bdb2e:	4b03      	ldr	r3, [pc, #12]	; (bdb3c <hal_ble_gatt_server_add_service+0x10>)
   bdb30:	681b      	ldr	r3, [r3, #0]
   bdb32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdb36:	9301      	str	r3, [sp, #4]
   bdb38:	bd08      	pop	{r3, pc}
   bdb3a:	0000      	.short	0x0000
   bdb3c:	00030278 	.word	0x00030278

000bdb40 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb40:	b508      	push	{r3, lr}
   bdb42:	4b03      	ldr	r3, [pc, #12]	; (bdb50 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdb44:	681b      	ldr	r3, [r3, #0]
   bdb46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdb4a:	9301      	str	r3, [sp, #4]
   bdb4c:	bd08      	pop	{r3, pc}
   bdb4e:	0000      	.short	0x0000
   bdb50:	00030278 	.word	0x00030278

000bdb54 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb54:	b508      	push	{r3, lr}
   bdb56:	4b03      	ldr	r3, [pc, #12]	; (bdb64 <hal_ble_gatt_client_write_with_response+0x10>)
   bdb58:	681b      	ldr	r3, [r3, #0]
   bdb5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdb5e:	9301      	str	r3, [sp, #4]
   bdb60:	bd08      	pop	{r3, pc}
   bdb62:	0000      	.short	0x0000
   bdb64:	00030278 	.word	0x00030278

000bdb68 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdb68:	b508      	push	{r3, lr}
   bdb6a:	4b03      	ldr	r3, [pc, #12]	; (bdb78 <hal_ble_gatt_client_write_without_response+0x10>)
   bdb6c:	681b      	ldr	r3, [r3, #0]
   bdb6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdb72:	9301      	str	r3, [sp, #4]
   bdb74:	bd08      	pop	{r3, pc}
   bdb76:	0000      	.short	0x0000
   bdb78:	00030278 	.word	0x00030278

000bdb7c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdb7c:	b508      	push	{r3, lr}
   bdb7e:	4b03      	ldr	r3, [pc, #12]	; (bdb8c <hal_ble_gatt_server_add_characteristic+0x10>)
   bdb80:	681b      	ldr	r3, [r3, #0]
   bdb82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdb86:	9301      	str	r3, [sp, #4]
   bdb88:	bd08      	pop	{r3, pc}
   bdb8a:	0000      	.short	0x0000
   bdb8c:	00030278 	.word	0x00030278

000bdb90 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdb90:	b508      	push	{r3, lr}
   bdb92:	4b03      	ldr	r3, [pc, #12]	; (bdba0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdb94:	681b      	ldr	r3, [r3, #0]
   bdb96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdb9a:	9301      	str	r3, [sp, #4]
   bdb9c:	bd08      	pop	{r3, pc}
   bdb9e:	0000      	.short	0x0000
   bdba0:	00030278 	.word	0x00030278

000bdba4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdba4:	b508      	push	{r3, lr}
   bdba6:	4b03      	ldr	r3, [pc, #12]	; (bdbb4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdba8:	681b      	ldr	r3, [r3, #0]
   bdbaa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdbae:	9301      	str	r3, [sp, #4]
   bdbb0:	bd08      	pop	{r3, pc}
   bdbb2:	0000      	.short	0x0000
   bdbb4:	00030278 	.word	0x00030278

000bdbb8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdbb8:	b508      	push	{r3, lr}
   bdbba:	4b03      	ldr	r3, [pc, #12]	; (bdbc8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdbbc:	681b      	ldr	r3, [r3, #0]
   bdbbe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdbc2:	9301      	str	r3, [sp, #4]
   bdbc4:	bd08      	pop	{r3, pc}
   bdbc6:	0000      	.short	0x0000
   bdbc8:	00030278 	.word	0x00030278

000bdbcc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdbcc:	b508      	push	{r3, lr}
   bdbce:	4b02      	ldr	r3, [pc, #8]	; (bdbd8 <os_thread_yield+0xc>)
   bdbd0:	681b      	ldr	r3, [r3, #0]
   bdbd2:	68db      	ldr	r3, [r3, #12]
   bdbd4:	9301      	str	r3, [sp, #4]
   bdbd6:	bd08      	pop	{r3, pc}
   bdbd8:	00030248 	.word	0x00030248

000bdbdc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdbdc:	b508      	push	{r3, lr}
   bdbde:	4b02      	ldr	r3, [pc, #8]	; (bdbe8 <os_thread_scheduling+0xc>)
   bdbe0:	681b      	ldr	r3, [r3, #0]
   bdbe2:	69db      	ldr	r3, [r3, #28]
   bdbe4:	9301      	str	r3, [sp, #4]
   bdbe6:	bd08      	pop	{r3, pc}
   bdbe8:	00030248 	.word	0x00030248

000bdbec <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bdbec:	b508      	push	{r3, lr}
   bdbee:	4b02      	ldr	r3, [pc, #8]	; (bdbf8 <os_timer_create+0xc>)
   bdbf0:	681b      	ldr	r3, [r3, #0]
   bdbf2:	6a1b      	ldr	r3, [r3, #32]
   bdbf4:	9301      	str	r3, [sp, #4]
   bdbf6:	bd08      	pop	{r3, pc}
   bdbf8:	00030248 	.word	0x00030248

000bdbfc <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bdbfc:	b508      	push	{r3, lr}
   bdbfe:	4b02      	ldr	r3, [pc, #8]	; (bdc08 <os_timer_destroy+0xc>)
   bdc00:	681b      	ldr	r3, [r3, #0]
   bdc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdc04:	9301      	str	r3, [sp, #4]
   bdc06:	bd08      	pop	{r3, pc}
   bdc08:	00030248 	.word	0x00030248

000bdc0c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bdc0c:	b508      	push	{r3, lr}
   bdc0e:	4b02      	ldr	r3, [pc, #8]	; (bdc18 <os_timer_get_id+0xc>)
   bdc10:	681b      	ldr	r3, [r3, #0]
   bdc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdc14:	9301      	str	r3, [sp, #4]
   bdc16:	bd08      	pop	{r3, pc}
   bdc18:	00030248 	.word	0x00030248

000bdc1c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdc1c:	b508      	push	{r3, lr}
   bdc1e:	4b02      	ldr	r3, [pc, #8]	; (bdc28 <os_timer_change+0xc>)
   bdc20:	681b      	ldr	r3, [r3, #0]
   bdc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdc24:	9301      	str	r3, [sp, #4]
   bdc26:	bd08      	pop	{r3, pc}
   bdc28:	00030248 	.word	0x00030248

000bdc2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bdc2c:	b508      	push	{r3, lr}
   bdc2e:	4b02      	ldr	r3, [pc, #8]	; (bdc38 <os_mutex_recursive_create+0xc>)
   bdc30:	681b      	ldr	r3, [r3, #0]
   bdc32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdc34:	9301      	str	r3, [sp, #4]
   bdc36:	bd08      	pop	{r3, pc}
   bdc38:	00030248 	.word	0x00030248

000bdc3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdc3c:	b508      	push	{r3, lr}
   bdc3e:	4b02      	ldr	r3, [pc, #8]	; (bdc48 <os_mutex_recursive_destroy+0xc>)
   bdc40:	681b      	ldr	r3, [r3, #0]
   bdc42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdc44:	9301      	str	r3, [sp, #4]
   bdc46:	bd08      	pop	{r3, pc}
   bdc48:	00030248 	.word	0x00030248

000bdc4c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdc4c:	b508      	push	{r3, lr}
   bdc4e:	4b02      	ldr	r3, [pc, #8]	; (bdc58 <os_mutex_recursive_lock+0xc>)
   bdc50:	681b      	ldr	r3, [r3, #0]
   bdc52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdc54:	9301      	str	r3, [sp, #4]
   bdc56:	bd08      	pop	{r3, pc}
   bdc58:	00030248 	.word	0x00030248

000bdc5c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdc5c:	b508      	push	{r3, lr}
   bdc5e:	4b02      	ldr	r3, [pc, #8]	; (bdc68 <os_mutex_recursive_unlock+0xc>)
   bdc60:	681b      	ldr	r3, [r3, #0]
   bdc62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdc64:	9301      	str	r3, [sp, #4]
   bdc66:	bd08      	pop	{r3, pc}
   bdc68:	00030248 	.word	0x00030248

000bdc6c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdc6c:	b508      	push	{r3, lr}
   bdc6e:	4b02      	ldr	r3, [pc, #8]	; (bdc78 <os_timer_set_id+0xc>)
   bdc70:	681b      	ldr	r3, [r3, #0]
   bdc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdc74:	9301      	str	r3, [sp, #4]
   bdc76:	bd08      	pop	{r3, pc}
   bdc78:	00030248 	.word	0x00030248

000bdc7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdc7c:	b508      	push	{r3, lr}
   bdc7e:	4b02      	ldr	r3, [pc, #8]	; (bdc88 <HAL_RNG_GetRandomNumber+0xc>)
   bdc80:	681b      	ldr	r3, [r3, #0]
   bdc82:	685b      	ldr	r3, [r3, #4]
   bdc84:	9301      	str	r3, [sp, #4]
   bdc86:	bd08      	pop	{r3, pc}
   bdc88:	00030218 	.word	0x00030218

000bdc8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdc8c:	b508      	push	{r3, lr}
   bdc8e:	4b02      	ldr	r3, [pc, #8]	; (bdc98 <HAL_Delay_Microseconds+0xc>)
   bdc90:	681b      	ldr	r3, [r3, #0]
   bdc92:	68db      	ldr	r3, [r3, #12]
   bdc94:	9301      	str	r3, [sp, #4]
   bdc96:	bd08      	pop	{r3, pc}
   bdc98:	00030218 	.word	0x00030218

000bdc9c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bdc9c:	b508      	push	{r3, lr}
   bdc9e:	4b02      	ldr	r3, [pc, #8]	; (bdca8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bdca0:	681b      	ldr	r3, [r3, #0]
   bdca2:	691b      	ldr	r3, [r3, #16]
   bdca4:	9301      	str	r3, [sp, #4]
   bdca6:	bd08      	pop	{r3, pc}
   bdca8:	00030218 	.word	0x00030218

000bdcac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bdcac:	b508      	push	{r3, lr}
   bdcae:	4b02      	ldr	r3, [pc, #8]	; (bdcb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bdcb0:	681b      	ldr	r3, [r3, #0]
   bdcb2:	695b      	ldr	r3, [r3, #20]
   bdcb4:	9301      	str	r3, [sp, #4]
   bdcb6:	bd08      	pop	{r3, pc}
   bdcb8:	00030218 	.word	0x00030218

000bdcbc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bdcbc:	b508      	push	{r3, lr}
   bdcbe:	4b02      	ldr	r3, [pc, #8]	; (bdcc8 <hal_rtc_time_is_valid+0xc>)
   bdcc0:	681b      	ldr	r3, [r3, #0]
   bdcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdcc4:	9301      	str	r3, [sp, #4]
   bdcc6:	bd08      	pop	{r3, pc}
   bdcc8:	00030218 	.word	0x00030218

000bdccc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdccc:	b508      	push	{r3, lr}
   bdcce:	4b02      	ldr	r3, [pc, #8]	; (bdcd8 <hal_rtc_get_time+0xc>)
   bdcd0:	681b      	ldr	r3, [r3, #0]
   bdcd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdcd4:	9301      	str	r3, [sp, #4]
   bdcd6:	bd08      	pop	{r3, pc}
   bdcd8:	00030218 	.word	0x00030218

000bdcdc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bdcdc:	b508      	push	{r3, lr}
   bdcde:	4b02      	ldr	r3, [pc, #8]	; (bdce8 <HAL_Validate_Pin_Function+0xc>)
   bdce0:	681b      	ldr	r3, [r3, #0]
   bdce2:	685b      	ldr	r3, [r3, #4]
   bdce4:	9301      	str	r3, [sp, #4]
   bdce6:	bd08      	pop	{r3, pc}
   bdce8:	0003022c 	.word	0x0003022c

000bdcec <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bdcec:	b508      	push	{r3, lr}
   bdcee:	4b02      	ldr	r3, [pc, #8]	; (bdcf8 <HAL_Pin_Mode+0xc>)
   bdcf0:	681b      	ldr	r3, [r3, #0]
   bdcf2:	689b      	ldr	r3, [r3, #8]
   bdcf4:	9301      	str	r3, [sp, #4]
   bdcf6:	bd08      	pop	{r3, pc}
   bdcf8:	0003022c 	.word	0x0003022c

000bdcfc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bdcfc:	b508      	push	{r3, lr}
   bdcfe:	4b02      	ldr	r3, [pc, #8]	; (bdd08 <HAL_Get_Pin_Mode+0xc>)
   bdd00:	681b      	ldr	r3, [r3, #0]
   bdd02:	68db      	ldr	r3, [r3, #12]
   bdd04:	9301      	str	r3, [sp, #4]
   bdd06:	bd08      	pop	{r3, pc}
   bdd08:	0003022c 	.word	0x0003022c

000bdd0c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bdd0c:	b508      	push	{r3, lr}
   bdd0e:	4b02      	ldr	r3, [pc, #8]	; (bdd18 <HAL_GPIO_Write+0xc>)
   bdd10:	681b      	ldr	r3, [r3, #0]
   bdd12:	691b      	ldr	r3, [r3, #16]
   bdd14:	9301      	str	r3, [sp, #4]
   bdd16:	bd08      	pop	{r3, pc}
   bdd18:	0003022c 	.word	0x0003022c

000bdd1c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bdd1c:	b508      	push	{r3, lr}
   bdd1e:	4b02      	ldr	r3, [pc, #8]	; (bdd28 <HAL_GPIO_Read+0xc>)
   bdd20:	681b      	ldr	r3, [r3, #0]
   bdd22:	695b      	ldr	r3, [r3, #20]
   bdd24:	9301      	str	r3, [sp, #4]
   bdd26:	bd08      	pop	{r3, pc}
   bdd28:	0003022c 	.word	0x0003022c

000bdd2c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bdd2c:	b508      	push	{r3, lr}
   bdd2e:	4b02      	ldr	r3, [pc, #8]	; (bdd38 <HAL_Interrupts_Attach+0xc>)
   bdd30:	681b      	ldr	r3, [r3, #0]
   bdd32:	699b      	ldr	r3, [r3, #24]
   bdd34:	9301      	str	r3, [sp, #4]
   bdd36:	bd08      	pop	{r3, pc}
   bdd38:	0003022c 	.word	0x0003022c

000bdd3c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bdd3c:	b508      	push	{r3, lr}
   bdd3e:	4b02      	ldr	r3, [pc, #8]	; (bdd48 <HAL_Interrupts_Detach+0xc>)
   bdd40:	681b      	ldr	r3, [r3, #0]
   bdd42:	69db      	ldr	r3, [r3, #28]
   bdd44:	9301      	str	r3, [sp, #4]
   bdd46:	bd08      	pop	{r3, pc}
   bdd48:	0003022c 	.word	0x0003022c

000bdd4c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bdd4c:	b508      	push	{r3, lr}
   bdd4e:	4b02      	ldr	r3, [pc, #8]	; (bdd58 <HAL_Interrupts_Enable_All+0xc>)
   bdd50:	681b      	ldr	r3, [r3, #0]
   bdd52:	6a1b      	ldr	r3, [r3, #32]
   bdd54:	9301      	str	r3, [sp, #4]
   bdd56:	bd08      	pop	{r3, pc}
   bdd58:	0003022c 	.word	0x0003022c

000bdd5c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bdd5c:	b508      	push	{r3, lr}
   bdd5e:	4b02      	ldr	r3, [pc, #8]	; (bdd68 <HAL_Interrupts_Disable_All+0xc>)
   bdd60:	681b      	ldr	r3, [r3, #0]
   bdd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd64:	9301      	str	r3, [sp, #4]
   bdd66:	bd08      	pop	{r3, pc}
   bdd68:	0003022c 	.word	0x0003022c

000bdd6c <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bdd6c:	b508      	push	{r3, lr}
   bdd6e:	4b02      	ldr	r3, [pc, #8]	; (bdd78 <hal_adc_read+0xc>)
   bdd70:	681b      	ldr	r3, [r3, #0]
   bdd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdd74:	9301      	str	r3, [sp, #4]
   bdd76:	bd08      	pop	{r3, pc}
   bdd78:	0003022c 	.word	0x0003022c

000bdd7c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bdd7c:	b508      	push	{r3, lr}
   bdd7e:	4b02      	ldr	r3, [pc, #8]	; (bdd88 <hal_i2c_set_speed+0xc>)
   bdd80:	681b      	ldr	r3, [r3, #0]
   bdd82:	681b      	ldr	r3, [r3, #0]
   bdd84:	9301      	str	r3, [sp, #4]
   bdd86:	bd08      	pop	{r3, pc}
   bdd88:	00030228 	.word	0x00030228

000bdd8c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bdd8c:	b508      	push	{r3, lr}
   bdd8e:	4b02      	ldr	r3, [pc, #8]	; (bdd98 <hal_i2c_begin+0xc>)
   bdd90:	681b      	ldr	r3, [r3, #0]
   bdd92:	68db      	ldr	r3, [r3, #12]
   bdd94:	9301      	str	r3, [sp, #4]
   bdd96:	bd08      	pop	{r3, pc}
   bdd98:	00030228 	.word	0x00030228

000bdd9c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bdd9c:	b508      	push	{r3, lr}
   bdd9e:	4b02      	ldr	r3, [pc, #8]	; (bdda8 <hal_i2c_begin_transmission+0xc>)
   bdda0:	681b      	ldr	r3, [r3, #0]
   bdda2:	699b      	ldr	r3, [r3, #24]
   bdda4:	9301      	str	r3, [sp, #4]
   bdda6:	bd08      	pop	{r3, pc}
   bdda8:	00030228 	.word	0x00030228

000bddac <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bddac:	b508      	push	{r3, lr}
   bddae:	4b02      	ldr	r3, [pc, #8]	; (bddb8 <hal_i2c_end_transmission+0xc>)
   bddb0:	681b      	ldr	r3, [r3, #0]
   bddb2:	69db      	ldr	r3, [r3, #28]
   bddb4:	9301      	str	r3, [sp, #4]
   bddb6:	bd08      	pop	{r3, pc}
   bddb8:	00030228 	.word	0x00030228

000bddbc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bddbc:	b508      	push	{r3, lr}
   bddbe:	4b02      	ldr	r3, [pc, #8]	; (bddc8 <hal_i2c_write+0xc>)
   bddc0:	681b      	ldr	r3, [r3, #0]
   bddc2:	6a1b      	ldr	r3, [r3, #32]
   bddc4:	9301      	str	r3, [sp, #4]
   bddc6:	bd08      	pop	{r3, pc}
   bddc8:	00030228 	.word	0x00030228

000bddcc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bddcc:	b508      	push	{r3, lr}
   bddce:	4b02      	ldr	r3, [pc, #8]	; (bddd8 <hal_i2c_available+0xc>)
   bddd0:	681b      	ldr	r3, [r3, #0]
   bddd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bddd4:	9301      	str	r3, [sp, #4]
   bddd6:	bd08      	pop	{r3, pc}
   bddd8:	00030228 	.word	0x00030228

000bdddc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdddc:	b508      	push	{r3, lr}
   bddde:	4b02      	ldr	r3, [pc, #8]	; (bdde8 <hal_i2c_read+0xc>)
   bdde0:	681b      	ldr	r3, [r3, #0]
   bdde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdde4:	9301      	str	r3, [sp, #4]
   bdde6:	bd08      	pop	{r3, pc}
   bdde8:	00030228 	.word	0x00030228

000bddec <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bddec:	b508      	push	{r3, lr}
   bddee:	4b02      	ldr	r3, [pc, #8]	; (bddf8 <hal_i2c_peek+0xc>)
   bddf0:	681b      	ldr	r3, [r3, #0]
   bddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bddf4:	9301      	str	r3, [sp, #4]
   bddf6:	bd08      	pop	{r3, pc}
   bddf8:	00030228 	.word	0x00030228

000bddfc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bddfc:	b508      	push	{r3, lr}
   bddfe:	4b02      	ldr	r3, [pc, #8]	; (bde08 <hal_i2c_flush+0xc>)
   bde00:	681b      	ldr	r3, [r3, #0]
   bde02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bde04:	9301      	str	r3, [sp, #4]
   bde06:	bd08      	pop	{r3, pc}
   bde08:	00030228 	.word	0x00030228

000bde0c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bde0c:	b508      	push	{r3, lr}
   bde0e:	4b02      	ldr	r3, [pc, #8]	; (bde18 <hal_i2c_is_enabled+0xc>)
   bde10:	681b      	ldr	r3, [r3, #0]
   bde12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bde14:	9301      	str	r3, [sp, #4]
   bde16:	bd08      	pop	{r3, pc}
   bde18:	00030228 	.word	0x00030228

000bde1c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bde1c:	b508      	push	{r3, lr}
   bde1e:	4b02      	ldr	r3, [pc, #8]	; (bde28 <hal_i2c_init+0xc>)
   bde20:	681b      	ldr	r3, [r3, #0]
   bde22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bde24:	9301      	str	r3, [sp, #4]
   bde26:	bd08      	pop	{r3, pc}
   bde28:	00030228 	.word	0x00030228

000bde2c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bde2c:	b508      	push	{r3, lr}
   bde2e:	4b02      	ldr	r3, [pc, #8]	; (bde38 <hal_i2c_request_ex+0xc>)
   bde30:	681b      	ldr	r3, [r3, #0]
   bde32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bde34:	9301      	str	r3, [sp, #4]
   bde36:	bd08      	pop	{r3, pc}
   bde38:	00030228 	.word	0x00030228

000bde3c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bde3c:	b508      	push	{r3, lr}
   bde3e:	4b02      	ldr	r3, [pc, #8]	; (bde48 <inet_inet_ntop+0xc>)
   bde40:	681b      	ldr	r3, [r3, #0]
   bde42:	695b      	ldr	r3, [r3, #20]
   bde44:	9301      	str	r3, [sp, #4]
   bde46:	bd08      	pop	{r3, pc}
   bde48:	00030264 	.word	0x00030264

000bde4c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bde4c:	b508      	push	{r3, lr}
   bde4e:	4b02      	ldr	r3, [pc, #8]	; (bde58 <netdb_freeaddrinfo+0xc>)
   bde50:	681b      	ldr	r3, [r3, #0]
   bde52:	689b      	ldr	r3, [r3, #8]
   bde54:	9301      	str	r3, [sp, #4]
   bde56:	bd08      	pop	{r3, pc}
   bde58:	00030268 	.word	0x00030268

000bde5c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bde5c:	b508      	push	{r3, lr}
   bde5e:	4b02      	ldr	r3, [pc, #8]	; (bde68 <netdb_getaddrinfo+0xc>)
   bde60:	681b      	ldr	r3, [r3, #0]
   bde62:	68db      	ldr	r3, [r3, #12]
   bde64:	9301      	str	r3, [sp, #4]
   bde66:	bd08      	pop	{r3, pc}
   bde68:	00030268 	.word	0x00030268

000bde6c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bde6c:	b508      	push	{r3, lr}
   bde6e:	4b02      	ldr	r3, [pc, #8]	; (bde78 <HAL_Servo_Attach+0xc>)
   bde70:	681b      	ldr	r3, [r3, #0]
   bde72:	691b      	ldr	r3, [r3, #16]
   bde74:	9301      	str	r3, [sp, #4]
   bde76:	bd08      	pop	{r3, pc}
   bde78:	00030224 	.word	0x00030224

000bde7c <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bde7c:	b508      	push	{r3, lr}
   bde7e:	4b02      	ldr	r3, [pc, #8]	; (bde88 <HAL_Servo_Detach+0xc>)
   bde80:	681b      	ldr	r3, [r3, #0]
   bde82:	695b      	ldr	r3, [r3, #20]
   bde84:	9301      	str	r3, [sp, #4]
   bde86:	bd08      	pop	{r3, pc}
   bde88:	00030224 	.word	0x00030224

000bde8c <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bde8c:	b508      	push	{r3, lr}
   bde8e:	4b02      	ldr	r3, [pc, #8]	; (bde98 <HAL_Servo_Write_Pulse_Width+0xc>)
   bde90:	681b      	ldr	r3, [r3, #0]
   bde92:	699b      	ldr	r3, [r3, #24]
   bde94:	9301      	str	r3, [sp, #4]
   bde96:	bd08      	pop	{r3, pc}
   bde98:	00030224 	.word	0x00030224

000bde9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bde9c:	b508      	push	{r3, lr}
   bde9e:	4b02      	ldr	r3, [pc, #8]	; (bdea8 <hal_spi_begin+0xc>)
   bdea0:	681b      	ldr	r3, [r3, #0]
   bdea2:	681b      	ldr	r3, [r3, #0]
   bdea4:	9301      	str	r3, [sp, #4]
   bdea6:	bd08      	pop	{r3, pc}
   bdea8:	00030230 	.word	0x00030230

000bdeac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdeac:	b508      	push	{r3, lr}
   bdeae:	4b02      	ldr	r3, [pc, #8]	; (bdeb8 <hal_spi_transfer+0xc>)
   bdeb0:	681b      	ldr	r3, [r3, #0]
   bdeb2:	695b      	ldr	r3, [r3, #20]
   bdeb4:	9301      	str	r3, [sp, #4]
   bdeb6:	bd08      	pop	{r3, pc}
   bdeb8:	00030230 	.word	0x00030230

000bdebc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdebc:	b508      	push	{r3, lr}
   bdebe:	4b02      	ldr	r3, [pc, #8]	; (bdec8 <hal_spi_init+0xc>)
   bdec0:	681b      	ldr	r3, [r3, #0]
   bdec2:	69db      	ldr	r3, [r3, #28]
   bdec4:	9301      	str	r3, [sp, #4]
   bdec6:	bd08      	pop	{r3, pc}
   bdec8:	00030230 	.word	0x00030230

000bdecc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdecc:	b508      	push	{r3, lr}
   bdece:	4b02      	ldr	r3, [pc, #8]	; (bded8 <hal_spi_is_enabled+0xc>)
   bded0:	681b      	ldr	r3, [r3, #0]
   bded2:	6a1b      	ldr	r3, [r3, #32]
   bded4:	9301      	str	r3, [sp, #4]
   bded6:	bd08      	pop	{r3, pc}
   bded8:	00030230 	.word	0x00030230

000bdedc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdedc:	b508      	push	{r3, lr}
   bdede:	4b02      	ldr	r3, [pc, #8]	; (bdee8 <hal_spi_info+0xc>)
   bdee0:	681b      	ldr	r3, [r3, #0]
   bdee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdee4:	9301      	str	r3, [sp, #4]
   bdee6:	bd08      	pop	{r3, pc}
   bdee8:	00030230 	.word	0x00030230

000bdeec <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bdeec:	b508      	push	{r3, lr}
   bdeee:	4b02      	ldr	r3, [pc, #8]	; (bdef8 <hal_spi_transfer_dma+0xc>)
   bdef0:	681b      	ldr	r3, [r3, #0]
   bdef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdef4:	9301      	str	r3, [sp, #4]
   bdef6:	bd08      	pop	{r3, pc}
   bdef8:	00030230 	.word	0x00030230

000bdefc <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bdefc:	b508      	push	{r3, lr}
   bdefe:	4b02      	ldr	r3, [pc, #8]	; (bdf08 <hal_spi_transfer_dma_status+0xc>)
   bdf00:	681b      	ldr	r3, [r3, #0]
   bdf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bdf04:	9301      	str	r3, [sp, #4]
   bdf06:	bd08      	pop	{r3, pc}
   bdf08:	00030230 	.word	0x00030230

000bdf0c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bdf0c:	b508      	push	{r3, lr}
   bdf0e:	4b02      	ldr	r3, [pc, #8]	; (bdf18 <hal_spi_set_settings+0xc>)
   bdf10:	681b      	ldr	r3, [r3, #0]
   bdf12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdf14:	9301      	str	r3, [sp, #4]
   bdf16:	bd08      	pop	{r3, pc}
   bdf18:	00030230 	.word	0x00030230

000bdf1c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bdf1c:	b508      	push	{r3, lr}
   bdf1e:	4b02      	ldr	r3, [pc, #8]	; (bdf28 <hal_spi_acquire+0xc>)
   bdf20:	681b      	ldr	r3, [r3, #0]
   bdf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdf24:	9301      	str	r3, [sp, #4]
   bdf26:	bd08      	pop	{r3, pc}
   bdf28:	00030230 	.word	0x00030230

000bdf2c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bdf2c:	b508      	push	{r3, lr}
   bdf2e:	4b02      	ldr	r3, [pc, #8]	; (bdf38 <hal_spi_release+0xc>)
   bdf30:	681b      	ldr	r3, [r3, #0]
   bdf32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdf34:	9301      	str	r3, [sp, #4]
   bdf36:	bd08      	pop	{r3, pc}
   bdf38:	00030230 	.word	0x00030230

000bdf3c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bdf3c:	b508      	push	{r3, lr}
   bdf3e:	4b02      	ldr	r3, [pc, #8]	; (bdf48 <hal_usart_end+0xc>)
   bdf40:	681b      	ldr	r3, [r3, #0]
   bdf42:	689b      	ldr	r3, [r3, #8]
   bdf44:	9301      	str	r3, [sp, #4]
   bdf46:	bd08      	pop	{r3, pc}
   bdf48:	0003023c 	.word	0x0003023c

000bdf4c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bdf4c:	b508      	push	{r3, lr}
   bdf4e:	4b02      	ldr	r3, [pc, #8]	; (bdf58 <hal_usart_write+0xc>)
   bdf50:	681b      	ldr	r3, [r3, #0]
   bdf52:	68db      	ldr	r3, [r3, #12]
   bdf54:	9301      	str	r3, [sp, #4]
   bdf56:	bd08      	pop	{r3, pc}
   bdf58:	0003023c 	.word	0x0003023c

000bdf5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bdf5c:	b508      	push	{r3, lr}
   bdf5e:	4b02      	ldr	r3, [pc, #8]	; (bdf68 <hal_usart_available+0xc>)
   bdf60:	681b      	ldr	r3, [r3, #0]
   bdf62:	691b      	ldr	r3, [r3, #16]
   bdf64:	9301      	str	r3, [sp, #4]
   bdf66:	bd08      	pop	{r3, pc}
   bdf68:	0003023c 	.word	0x0003023c

000bdf6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bdf6c:	b508      	push	{r3, lr}
   bdf6e:	4b02      	ldr	r3, [pc, #8]	; (bdf78 <hal_usart_read+0xc>)
   bdf70:	681b      	ldr	r3, [r3, #0]
   bdf72:	695b      	ldr	r3, [r3, #20]
   bdf74:	9301      	str	r3, [sp, #4]
   bdf76:	bd08      	pop	{r3, pc}
   bdf78:	0003023c 	.word	0x0003023c

000bdf7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bdf7c:	b508      	push	{r3, lr}
   bdf7e:	4b02      	ldr	r3, [pc, #8]	; (bdf88 <hal_usart_peek+0xc>)
   bdf80:	681b      	ldr	r3, [r3, #0]
   bdf82:	699b      	ldr	r3, [r3, #24]
   bdf84:	9301      	str	r3, [sp, #4]
   bdf86:	bd08      	pop	{r3, pc}
   bdf88:	0003023c 	.word	0x0003023c

000bdf8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bdf8c:	b508      	push	{r3, lr}
   bdf8e:	4b02      	ldr	r3, [pc, #8]	; (bdf98 <hal_usart_flush+0xc>)
   bdf90:	681b      	ldr	r3, [r3, #0]
   bdf92:	69db      	ldr	r3, [r3, #28]
   bdf94:	9301      	str	r3, [sp, #4]
   bdf96:	bd08      	pop	{r3, pc}
   bdf98:	0003023c 	.word	0x0003023c

000bdf9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bdf9c:	b508      	push	{r3, lr}
   bdf9e:	4b02      	ldr	r3, [pc, #8]	; (bdfa8 <hal_usart_is_enabled+0xc>)
   bdfa0:	681b      	ldr	r3, [r3, #0]
   bdfa2:	6a1b      	ldr	r3, [r3, #32]
   bdfa4:	9301      	str	r3, [sp, #4]
   bdfa6:	bd08      	pop	{r3, pc}
   bdfa8:	0003023c 	.word	0x0003023c

000bdfac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bdfac:	b508      	push	{r3, lr}
   bdfae:	4b02      	ldr	r3, [pc, #8]	; (bdfb8 <hal_usart_available_data_for_write+0xc>)
   bdfb0:	681b      	ldr	r3, [r3, #0]
   bdfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdfb4:	9301      	str	r3, [sp, #4]
   bdfb6:	bd08      	pop	{r3, pc}
   bdfb8:	0003023c 	.word	0x0003023c

000bdfbc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bdfbc:	b508      	push	{r3, lr}
   bdfbe:	4b02      	ldr	r3, [pc, #8]	; (bdfc8 <hal_usart_begin_config+0xc>)
   bdfc0:	681b      	ldr	r3, [r3, #0]
   bdfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdfc4:	9301      	str	r3, [sp, #4]
   bdfc6:	bd08      	pop	{r3, pc}
   bdfc8:	0003023c 	.word	0x0003023c

000bdfcc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bdfcc:	b508      	push	{r3, lr}
   bdfce:	4b02      	ldr	r3, [pc, #8]	; (bdfd8 <hal_usart_init_ex+0xc>)
   bdfd0:	681b      	ldr	r3, [r3, #0]
   bdfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdfd4:	9301      	str	r3, [sp, #4]
   bdfd6:	bd08      	pop	{r3, pc}
   bdfd8:	0003023c 	.word	0x0003023c

000bdfdc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bdfdc:	b508      	push	{r3, lr}
   bdfde:	4b02      	ldr	r3, [pc, #8]	; (bdfe8 <HAL_USB_USART_Init+0xc>)
   bdfe0:	681b      	ldr	r3, [r3, #0]
   bdfe2:	681b      	ldr	r3, [r3, #0]
   bdfe4:	9301      	str	r3, [sp, #4]
   bdfe6:	bd08      	pop	{r3, pc}
   bdfe8:	0003024c 	.word	0x0003024c

000bdfec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bdfec:	b508      	push	{r3, lr}
   bdfee:	4b02      	ldr	r3, [pc, #8]	; (bdff8 <HAL_USB_USART_Begin+0xc>)
   bdff0:	681b      	ldr	r3, [r3, #0]
   bdff2:	685b      	ldr	r3, [r3, #4]
   bdff4:	9301      	str	r3, [sp, #4]
   bdff6:	bd08      	pop	{r3, pc}
   bdff8:	0003024c 	.word	0x0003024c

000bdffc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bdffc:	b508      	push	{r3, lr}
   bdffe:	4b02      	ldr	r3, [pc, #8]	; (be008 <HAL_USB_USART_End+0xc>)
   be000:	681b      	ldr	r3, [r3, #0]
   be002:	689b      	ldr	r3, [r3, #8]
   be004:	9301      	str	r3, [sp, #4]
   be006:	bd08      	pop	{r3, pc}
   be008:	0003024c 	.word	0x0003024c

000be00c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   be00c:	b508      	push	{r3, lr}
   be00e:	4b02      	ldr	r3, [pc, #8]	; (be018 <HAL_USB_USART_Available_Data+0xc>)
   be010:	681b      	ldr	r3, [r3, #0]
   be012:	691b      	ldr	r3, [r3, #16]
   be014:	9301      	str	r3, [sp, #4]
   be016:	bd08      	pop	{r3, pc}
   be018:	0003024c 	.word	0x0003024c

000be01c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   be01c:	b508      	push	{r3, lr}
   be01e:	4b02      	ldr	r3, [pc, #8]	; (be028 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   be020:	681b      	ldr	r3, [r3, #0]
   be022:	695b      	ldr	r3, [r3, #20]
   be024:	9301      	str	r3, [sp, #4]
   be026:	bd08      	pop	{r3, pc}
   be028:	0003024c 	.word	0x0003024c

000be02c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be02c:	b508      	push	{r3, lr}
   be02e:	4b02      	ldr	r3, [pc, #8]	; (be038 <HAL_USB_USART_Receive_Data+0xc>)
   be030:	681b      	ldr	r3, [r3, #0]
   be032:	699b      	ldr	r3, [r3, #24]
   be034:	9301      	str	r3, [sp, #4]
   be036:	bd08      	pop	{r3, pc}
   be038:	0003024c 	.word	0x0003024c

000be03c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be03c:	b508      	push	{r3, lr}
   be03e:	4b02      	ldr	r3, [pc, #8]	; (be048 <HAL_USB_USART_Send_Data+0xc>)
   be040:	681b      	ldr	r3, [r3, #0]
   be042:	69db      	ldr	r3, [r3, #28]
   be044:	9301      	str	r3, [sp, #4]
   be046:	bd08      	pop	{r3, pc}
   be048:	0003024c 	.word	0x0003024c

000be04c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   be04c:	b508      	push	{r3, lr}
   be04e:	4b02      	ldr	r3, [pc, #8]	; (be058 <HAL_USB_USART_Flush_Data+0xc>)
   be050:	681b      	ldr	r3, [r3, #0]
   be052:	6a1b      	ldr	r3, [r3, #32]
   be054:	9301      	str	r3, [sp, #4]
   be056:	bd08      	pop	{r3, pc}
   be058:	0003024c 	.word	0x0003024c

000be05c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   be05c:	b508      	push	{r3, lr}
   be05e:	4b02      	ldr	r3, [pc, #8]	; (be068 <panic_+0xc>)
   be060:	681b      	ldr	r3, [r3, #0]
   be062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be064:	9301      	str	r3, [sp, #4]
   be066:	bd08      	pop	{r3, pc}
   be068:	00030260 	.word	0x00030260

000be06c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   be06c:	b508      	push	{r3, lr}
   be06e:	4b02      	ldr	r3, [pc, #8]	; (be078 <log_message+0xc>)
   be070:	681b      	ldr	r3, [r3, #0]
   be072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   be074:	9301      	str	r3, [sp, #4]
   be076:	bd08      	pop	{r3, pc}
   be078:	00030260 	.word	0x00030260

000be07c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   be07c:	b508      	push	{r3, lr}
   be07e:	4b02      	ldr	r3, [pc, #8]	; (be088 <log_level_name+0xc>)
   be080:	681b      	ldr	r3, [r3, #0]
   be082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   be084:	9301      	str	r3, [sp, #4]
   be086:	bd08      	pop	{r3, pc}
   be088:	00030260 	.word	0x00030260

000be08c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   be08c:	b508      	push	{r3, lr}
   be08e:	4b02      	ldr	r3, [pc, #8]	; (be098 <log_set_callbacks+0xc>)
   be090:	681b      	ldr	r3, [r3, #0]
   be092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   be094:	9301      	str	r3, [sp, #4]
   be096:	bd08      	pop	{r3, pc}
   be098:	00030260 	.word	0x00030260

000be09c <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   be09c:	b508      	push	{r3, lr}
   be09e:	4b03      	ldr	r3, [pc, #12]	; (be0ac <led_set_status_active+0x10>)
   be0a0:	681b      	ldr	r3, [r3, #0]
   be0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   be0a6:	9301      	str	r3, [sp, #4]
   be0a8:	bd08      	pop	{r3, pc}
   be0aa:	0000      	.short	0x0000
   be0ac:	00030260 	.word	0x00030260

000be0b0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   be0b0:	b508      	push	{r3, lr}
   be0b2:	4b02      	ldr	r3, [pc, #8]	; (be0bc <system_mode+0xc>)
   be0b4:	681b      	ldr	r3, [r3, #0]
   be0b6:	681b      	ldr	r3, [r3, #0]
   be0b8:	9301      	str	r3, [sp, #4]
   be0ba:	bd08      	pop	{r3, pc}
   be0bc:	00030220 	.word	0x00030220

000be0c0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   be0c0:	b508      	push	{r3, lr}
   be0c2:	4b02      	ldr	r3, [pc, #8]	; (be0cc <set_system_mode+0xc>)
   be0c4:	681b      	ldr	r3, [r3, #0]
   be0c6:	685b      	ldr	r3, [r3, #4]
   be0c8:	9301      	str	r3, [sp, #4]
   be0ca:	bd08      	pop	{r3, pc}
   be0cc:	00030220 	.word	0x00030220

000be0d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   be0d0:	b508      	push	{r3, lr}
   be0d2:	4b02      	ldr	r3, [pc, #8]	; (be0dc <system_delay_ms+0xc>)
   be0d4:	681b      	ldr	r3, [r3, #0]
   be0d6:	695b      	ldr	r3, [r3, #20]
   be0d8:	9301      	str	r3, [sp, #4]
   be0da:	bd08      	pop	{r3, pc}
   be0dc:	00030220 	.word	0x00030220

000be0e0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   be0e0:	b508      	push	{r3, lr}
   be0e2:	4b02      	ldr	r3, [pc, #8]	; (be0ec <application_thread_current+0xc>)
   be0e4:	681b      	ldr	r3, [r3, #0]
   be0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be0e8:	9301      	str	r3, [sp, #4]
   be0ea:	bd08      	pop	{r3, pc}
   be0ec:	00030220 	.word	0x00030220

000be0f0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   be0f0:	b508      	push	{r3, lr}
   be0f2:	4b02      	ldr	r3, [pc, #8]	; (be0fc <application_thread_invoke+0xc>)
   be0f4:	681b      	ldr	r3, [r3, #0]
   be0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   be0f8:	9301      	str	r3, [sp, #4]
   be0fa:	bd08      	pop	{r3, pc}
   be0fc:	00030220 	.word	0x00030220

000be100 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   be100:	b508      	push	{r3, lr}
   be102:	4b02      	ldr	r3, [pc, #8]	; (be10c <system_thread_get_state+0xc>)
   be104:	681b      	ldr	r3, [r3, #0]
   be106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   be108:	9301      	str	r3, [sp, #4]
   be10a:	bd08      	pop	{r3, pc}
   be10c:	00030220 	.word	0x00030220

000be110 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   be110:	b508      	push	{r3, lr}
   be112:	4b02      	ldr	r3, [pc, #8]	; (be11c <led_pattern_period+0xc>)
   be114:	681b      	ldr	r3, [r3, #0]
   be116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be118:	9301      	str	r3, [sp, #4]
   be11a:	bd08      	pop	{r3, pc}
   be11c:	00030220 	.word	0x00030220

000be120 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be120:	b508      	push	{r3, lr}
   be122:	4b03      	ldr	r3, [pc, #12]	; (be130 <system_ctrl_set_app_request_handler+0x10>)
   be124:	681b      	ldr	r3, [r3, #0]
   be126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be12a:	9301      	str	r3, [sp, #4]
   be12c:	bd08      	pop	{r3, pc}
   be12e:	0000      	.short	0x0000
   be130:	00030220 	.word	0x00030220

000be134 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be134:	b508      	push	{r3, lr}
   be136:	4b03      	ldr	r3, [pc, #12]	; (be144 <system_ctrl_set_result+0x10>)
   be138:	681b      	ldr	r3, [r3, #0]
   be13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be13e:	9301      	str	r3, [sp, #4]
   be140:	bd08      	pop	{r3, pc}
   be142:	0000      	.short	0x0000
   be144:	00030220 	.word	0x00030220

000be148 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be148:	b508      	push	{r3, lr}
   be14a:	4b02      	ldr	r3, [pc, #8]	; (be154 <spark_function+0xc>)
   be14c:	681b      	ldr	r3, [r3, #0]
   be14e:	685b      	ldr	r3, [r3, #4]
   be150:	9301      	str	r3, [sp, #4]
   be152:	bd08      	pop	{r3, pc}
   be154:	00030244 	.word	0x00030244

000be158 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be158:	b508      	push	{r3, lr}
   be15a:	4b02      	ldr	r3, [pc, #8]	; (be164 <spark_process+0xc>)
   be15c:	681b      	ldr	r3, [r3, #0]
   be15e:	689b      	ldr	r3, [r3, #8]
   be160:	9301      	str	r3, [sp, #4]
   be162:	bd08      	pop	{r3, pc}
   be164:	00030244 	.word	0x00030244

000be168 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be168:	b508      	push	{r3, lr}
   be16a:	4b02      	ldr	r3, [pc, #8]	; (be174 <spark_cloud_flag_connected+0xc>)
   be16c:	681b      	ldr	r3, [r3, #0]
   be16e:	695b      	ldr	r3, [r3, #20]
   be170:	9301      	str	r3, [sp, #4]
   be172:	bd08      	pop	{r3, pc}
   be174:	00030244 	.word	0x00030244

000be178 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be178:	b508      	push	{r3, lr}
   be17a:	4b02      	ldr	r3, [pc, #8]	; (be184 <spark_send_event+0xc>)
   be17c:	681b      	ldr	r3, [r3, #0]
   be17e:	6a1b      	ldr	r3, [r3, #32]
   be180:	9301      	str	r3, [sp, #4]
   be182:	bd08      	pop	{r3, pc}
   be184:	00030244 	.word	0x00030244

000be188 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be188:	b508      	push	{r3, lr}
   be18a:	4b02      	ldr	r3, [pc, #8]	; (be194 <spark_subscribe+0xc>)
   be18c:	681b      	ldr	r3, [r3, #0]
   be18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be190:	9301      	str	r3, [sp, #4]
   be192:	bd08      	pop	{r3, pc}
   be194:	00030244 	.word	0x00030244

000be198 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be198:	b508      	push	{r3, lr}
   be19a:	4b02      	ldr	r3, [pc, #8]	; (be1a4 <spark_sync_time_pending+0xc>)
   be19c:	681b      	ldr	r3, [r3, #0]
   be19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be1a0:	9301      	str	r3, [sp, #4]
   be1a2:	bd08      	pop	{r3, pc}
   be1a4:	00030244 	.word	0x00030244

000be1a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be1a8:	b508      	push	{r3, lr}
   be1aa:	4b02      	ldr	r3, [pc, #8]	; (be1b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   be1ac:	681b      	ldr	r3, [r3, #0]
   be1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be1b0:	9301      	str	r3, [sp, #4]
   be1b2:	bd08      	pop	{r3, pc}
   be1b4:	00030244 	.word	0x00030244

000be1b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be1b8:	b508      	push	{r3, lr}
   be1ba:	4b02      	ldr	r3, [pc, #8]	; (be1c4 <network_connect+0xc>)
   be1bc:	681b      	ldr	r3, [r3, #0]
   be1be:	685b      	ldr	r3, [r3, #4]
   be1c0:	9301      	str	r3, [sp, #4]
   be1c2:	bd08      	pop	{r3, pc}
   be1c4:	00030240 	.word	0x00030240

000be1c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be1c8:	b508      	push	{r3, lr}
   be1ca:	4b02      	ldr	r3, [pc, #8]	; (be1d4 <network_connecting+0xc>)
   be1cc:	681b      	ldr	r3, [r3, #0]
   be1ce:	689b      	ldr	r3, [r3, #8]
   be1d0:	9301      	str	r3, [sp, #4]
   be1d2:	bd08      	pop	{r3, pc}
   be1d4:	00030240 	.word	0x00030240

000be1d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be1d8:	b508      	push	{r3, lr}
   be1da:	4b02      	ldr	r3, [pc, #8]	; (be1e4 <network_disconnect+0xc>)
   be1dc:	681b      	ldr	r3, [r3, #0]
   be1de:	68db      	ldr	r3, [r3, #12]
   be1e0:	9301      	str	r3, [sp, #4]
   be1e2:	bd08      	pop	{r3, pc}
   be1e4:	00030240 	.word	0x00030240

000be1e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be1e8:	b508      	push	{r3, lr}
   be1ea:	4b02      	ldr	r3, [pc, #8]	; (be1f4 <network_ready+0xc>)
   be1ec:	681b      	ldr	r3, [r3, #0]
   be1ee:	691b      	ldr	r3, [r3, #16]
   be1f0:	9301      	str	r3, [sp, #4]
   be1f2:	bd08      	pop	{r3, pc}
   be1f4:	00030240 	.word	0x00030240

000be1f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be1f8:	b508      	push	{r3, lr}
   be1fa:	4b02      	ldr	r3, [pc, #8]	; (be204 <network_on+0xc>)
   be1fc:	681b      	ldr	r3, [r3, #0]
   be1fe:	695b      	ldr	r3, [r3, #20]
   be200:	9301      	str	r3, [sp, #4]
   be202:	bd08      	pop	{r3, pc}
   be204:	00030240 	.word	0x00030240

000be208 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be208:	b508      	push	{r3, lr}
   be20a:	4b02      	ldr	r3, [pc, #8]	; (be214 <network_off+0xc>)
   be20c:	681b      	ldr	r3, [r3, #0]
   be20e:	699b      	ldr	r3, [r3, #24]
   be210:	9301      	str	r3, [sp, #4]
   be212:	bd08      	pop	{r3, pc}
   be214:	00030240 	.word	0x00030240

000be218 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be218:	b508      	push	{r3, lr}
   be21a:	4b02      	ldr	r3, [pc, #8]	; (be224 <network_listen+0xc>)
   be21c:	681b      	ldr	r3, [r3, #0]
   be21e:	69db      	ldr	r3, [r3, #28]
   be220:	9301      	str	r3, [sp, #4]
   be222:	bd08      	pop	{r3, pc}
   be224:	00030240 	.word	0x00030240

000be228 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be228:	b508      	push	{r3, lr}
   be22a:	4b02      	ldr	r3, [pc, #8]	; (be234 <network_listening+0xc>)
   be22c:	681b      	ldr	r3, [r3, #0]
   be22e:	6a1b      	ldr	r3, [r3, #32]
   be230:	9301      	str	r3, [sp, #4]
   be232:	bd08      	pop	{r3, pc}
   be234:	00030240 	.word	0x00030240

000be238 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be238:	b508      	push	{r3, lr}
   be23a:	4b02      	ldr	r3, [pc, #8]	; (be244 <network_set_listen_timeout+0xc>)
   be23c:	681b      	ldr	r3, [r3, #0]
   be23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be240:	9301      	str	r3, [sp, #4]
   be242:	bd08      	pop	{r3, pc}
   be244:	00030240 	.word	0x00030240

000be248 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be248:	b508      	push	{r3, lr}
   be24a:	4b02      	ldr	r3, [pc, #8]	; (be254 <network_get_listen_timeout+0xc>)
   be24c:	681b      	ldr	r3, [r3, #0]
   be24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be250:	9301      	str	r3, [sp, #4]
   be252:	bd08      	pop	{r3, pc}
   be254:	00030240 	.word	0x00030240

000be258 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be258:	b508      	push	{r3, lr}
   be25a:	4b02      	ldr	r3, [pc, #8]	; (be264 <network_is_on+0xc>)
   be25c:	681b      	ldr	r3, [r3, #0]
   be25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be260:	9301      	str	r3, [sp, #4]
   be262:	bd08      	pop	{r3, pc}
   be264:	00030240 	.word	0x00030240

000be268 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be268:	b508      	push	{r3, lr}
   be26a:	4b02      	ldr	r3, [pc, #8]	; (be274 <network_is_off+0xc>)
   be26c:	681b      	ldr	r3, [r3, #0]
   be26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be270:	9301      	str	r3, [sp, #4]
   be272:	bd08      	pop	{r3, pc}
   be274:	00030240 	.word	0x00030240

000be278 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be278:	b508      	push	{r3, lr}
   be27a:	4b02      	ldr	r3, [pc, #8]	; (be284 <malloc+0xc>)
   be27c:	681b      	ldr	r3, [r3, #0]
   be27e:	681b      	ldr	r3, [r3, #0]
   be280:	9301      	str	r3, [sp, #4]
   be282:	bd08      	pop	{r3, pc}
   be284:	0003021c 	.word	0x0003021c

000be288 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be288:	b508      	push	{r3, lr}
   be28a:	4b02      	ldr	r3, [pc, #8]	; (be294 <free+0xc>)
   be28c:	681b      	ldr	r3, [r3, #0]
   be28e:	685b      	ldr	r3, [r3, #4]
   be290:	9301      	str	r3, [sp, #4]
   be292:	bd08      	pop	{r3, pc}
   be294:	0003021c 	.word	0x0003021c

000be298 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be298:	b508      	push	{r3, lr}
   be29a:	4b02      	ldr	r3, [pc, #8]	; (be2a4 <realloc+0xc>)
   be29c:	681b      	ldr	r3, [r3, #0]
   be29e:	689b      	ldr	r3, [r3, #8]
   be2a0:	9301      	str	r3, [sp, #4]
   be2a2:	bd08      	pop	{r3, pc}
   be2a4:	0003021c 	.word	0x0003021c

000be2a8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be2a8:	b508      	push	{r3, lr}
   be2aa:	4b02      	ldr	r3, [pc, #8]	; (be2b4 <sprintf+0xc>)
   be2ac:	681b      	ldr	r3, [r3, #0]
   be2ae:	68db      	ldr	r3, [r3, #12]
   be2b0:	9301      	str	r3, [sp, #4]
   be2b2:	bd08      	pop	{r3, pc}
   be2b4:	0003021c 	.word	0x0003021c

000be2b8 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be2b8:	b508      	push	{r3, lr}
   be2ba:	4b02      	ldr	r3, [pc, #8]	; (be2c4 <sscanf+0xc>)
   be2bc:	681b      	ldr	r3, [r3, #0]
   be2be:	695b      	ldr	r3, [r3, #20]
   be2c0:	9301      	str	r3, [sp, #4]
   be2c2:	bd08      	pop	{r3, pc}
   be2c4:	0003021c 	.word	0x0003021c

000be2c8 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be2c8:	b508      	push	{r3, lr}
   be2ca:	4b02      	ldr	r3, [pc, #8]	; (be2d4 <snprintf+0xc>)
   be2cc:	681b      	ldr	r3, [r3, #0]
   be2ce:	69db      	ldr	r3, [r3, #28]
   be2d0:	9301      	str	r3, [sp, #4]
   be2d2:	bd08      	pop	{r3, pc}
   be2d4:	0003021c 	.word	0x0003021c

000be2d8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be2d8:	b508      	push	{r3, lr}
   be2da:	4b02      	ldr	r3, [pc, #8]	; (be2e4 <vsnprintf+0xc>)
   be2dc:	681b      	ldr	r3, [r3, #0]
   be2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be2e0:	9301      	str	r3, [sp, #4]
   be2e2:	bd08      	pop	{r3, pc}
   be2e4:	0003021c 	.word	0x0003021c

000be2e8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be2e8:	b508      	push	{r3, lr}
   be2ea:	4b02      	ldr	r3, [pc, #8]	; (be2f4 <abort+0xc>)
   be2ec:	681b      	ldr	r3, [r3, #0]
   be2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be2f0:	9301      	str	r3, [sp, #4]
   be2f2:	bd08      	pop	{r3, pc}
   be2f4:	0003021c 	.word	0x0003021c

000be2f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be2f8:	b508      	push	{r3, lr}
   be2fa:	4b02      	ldr	r3, [pc, #8]	; (be304 <_malloc_r+0xc>)
   be2fc:	681b      	ldr	r3, [r3, #0]
   be2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be300:	9301      	str	r3, [sp, #4]
   be302:	bd08      	pop	{r3, pc}
   be304:	0003021c 	.word	0x0003021c

000be308 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be308:	b508      	push	{r3, lr}
   be30a:	4b02      	ldr	r3, [pc, #8]	; (be314 <__errno+0xc>)
   be30c:	681b      	ldr	r3, [r3, #0]
   be30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be310:	9301      	str	r3, [sp, #4]
   be312:	bd08      	pop	{r3, pc}
   be314:	0003021c 	.word	0x0003021c

000be318 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be318:	b508      	push	{r3, lr}
   be31a:	4b02      	ldr	r3, [pc, #8]	; (be324 <__assert_func+0xc>)
   be31c:	681b      	ldr	r3, [r3, #0]
   be31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be320:	9301      	str	r3, [sp, #4]
   be322:	bd08      	pop	{r3, pc}
   be324:	0003021c 	.word	0x0003021c

000be328 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be328:	b508      	push	{r3, lr}
   be32a:	4b02      	ldr	r3, [pc, #8]	; (be334 <newlib_impure_ptr_callback+0xc>)
   be32c:	681b      	ldr	r3, [r3, #0]
   be32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be330:	9301      	str	r3, [sp, #4]
   be332:	bd08      	pop	{r3, pc}
   be334:	0003021c 	.word	0x0003021c

000be338 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be338:	b508      	push	{r3, lr}
   be33a:	4b02      	ldr	r3, [pc, #8]	; (be344 <localtime_r+0xc>)
   be33c:	681b      	ldr	r3, [r3, #0]
   be33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be340:	9301      	str	r3, [sp, #4]
   be342:	bd08      	pop	{r3, pc}
   be344:	0003021c 	.word	0x0003021c

000be348 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   be348:	428a      	cmp	r2, r1
{
   be34a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   be34c:	d007      	beq.n	be35e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   be34e:	1a44      	subs	r4, r0, r1
   be350:	9802      	ldr	r0, [sp, #8]
   be352:	1ac0      	subs	r0, r0, r3
   be354:	4344      	muls	r4, r0
   be356:	1a50      	subs	r0, r2, r1
   be358:	fb94 f0f0 	sdiv	r0, r4, r0
   be35c:	4418      	add	r0, r3
}
   be35e:	bd10      	pop	{r4, pc}

000be360 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   be360:	2100      	movs	r1, #0
   be362:	f7ff beb5 	b.w	be0d0 <system_delay_ms>

000be366 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   be366:	b510      	push	{r4, lr}
      if (_M_empty())
   be368:	6883      	ldr	r3, [r0, #8]
   be36a:	4604      	mov	r4, r0
   be36c:	b90b      	cbnz	r3, be372 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   be36e:	f003 fed5 	bl	c211c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   be372:	68c3      	ldr	r3, [r0, #12]
   be374:	4798      	blx	r3
      if (_M_manager)
   be376:	68a3      	ldr	r3, [r4, #8]
   be378:	b11b      	cbz	r3, be382 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   be37a:	2203      	movs	r2, #3
   be37c:	4621      	mov	r1, r4
   be37e:	4620      	mov	r0, r4
   be380:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   be382:	4620      	mov	r0, r4
   be384:	2110      	movs	r1, #16
}
   be386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   be38a:	f7f5 be8a 	b.w	b40a2 <_ZdlPvj>

000be38e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be38e:	4770      	bx	lr

000be390 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be390:	4770      	bx	lr

000be392 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be392:	4770      	bx	lr

000be394 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be394:	4770      	bx	lr
	...

000be398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be398:	4b06      	ldr	r3, [pc, #24]	; (be3b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be39a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be39c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be39e:	f100 040c 	add.w	r4, r0, #12
	    ||
   be3a2:	d005      	beq.n	be3b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be3a4:	4608      	mov	r0, r1
   be3a6:	f003 febd 	bl	c2124 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be3aa:	2800      	cmp	r0, #0
   be3ac:	bf08      	it	eq
   be3ae:	2400      	moveq	r4, #0
      }
   be3b0:	4620      	mov	r0, r4
   be3b2:	bd10      	pop	{r4, pc}
   be3b4:	000c7da8 	.word	0x000c7da8

000be3b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be3b8:	4b06      	ldr	r3, [pc, #24]	; (be3d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be3ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be3bc:	b510      	push	{r4, lr}
   be3be:	f100 040c 	add.w	r4, r0, #12
	    ||
   be3c2:	d005      	beq.n	be3d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be3c4:	4608      	mov	r0, r1
   be3c6:	f003 fead 	bl	c2124 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be3ca:	2800      	cmp	r0, #0
   be3cc:	bf08      	it	eq
   be3ce:	2400      	moveq	r4, #0
      }
   be3d0:	4620      	mov	r0, r4
   be3d2:	bd10      	pop	{r4, pc}
   be3d4:	000c7da8 	.word	0x000c7da8

000be3d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be3d8:	4b06      	ldr	r3, [pc, #24]	; (be3f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be3da:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be3dc:	b510      	push	{r4, lr}
   be3de:	f100 040c 	add.w	r4, r0, #12
	    ||
   be3e2:	d005      	beq.n	be3f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be3e4:	4608      	mov	r0, r1
   be3e6:	f003 fe9d 	bl	c2124 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be3ea:	2800      	cmp	r0, #0
   be3ec:	bf08      	it	eq
   be3ee:	2400      	moveq	r4, #0
      }
   be3f0:	4620      	mov	r0, r4
   be3f2:	bd10      	pop	{r4, pc}
   be3f4:	000c7da8 	.word	0x000c7da8

000be3f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be3f8:	b510      	push	{r4, lr}
   be3fa:	2168      	movs	r1, #104	; 0x68
   be3fc:	4604      	mov	r4, r0
   be3fe:	f7f5 fe50 	bl	b40a2 <_ZdlPvj>
   be402:	4620      	mov	r0, r4
   be404:	bd10      	pop	{r4, pc}

000be406 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be406:	b510      	push	{r4, lr}
   be408:	2128      	movs	r1, #40	; 0x28
   be40a:	4604      	mov	r4, r0
   be40c:	f7f5 fe49 	bl	b40a2 <_ZdlPvj>
   be410:	4620      	mov	r0, r4
   be412:	bd10      	pop	{r4, pc}

000be414 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be414:	b510      	push	{r4, lr}
   be416:	2130      	movs	r1, #48	; 0x30
   be418:	4604      	mov	r4, r0
   be41a:	f7f5 fe42 	bl	b40a2 <_ZdlPvj>
   be41e:	4620      	mov	r0, r4
   be420:	bd10      	pop	{r4, pc}

000be422 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be422:	2168      	movs	r1, #104	; 0x68
   be424:	f7f5 be3d 	b.w	b40a2 <_ZdlPvj>

000be428 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be428:	2128      	movs	r1, #40	; 0x28
   be42a:	f7f5 be3a 	b.w	b40a2 <_ZdlPvj>

000be42e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be42e:	2130      	movs	r1, #48	; 0x30
   be430:	f7f5 be37 	b.w	b40a2 <_ZdlPvj>

000be434 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be434:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be436:	2500      	movs	r5, #0
   be438:	1cec      	adds	r4, r5, #3
   be43a:	428c      	cmp	r4, r1
   be43c:	d80d      	bhi.n	be45a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be43e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be440:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be442:	5d87      	ldrb	r7, [r0, r6]
   be444:	4297      	cmp	r7, r2
   be446:	d105      	bne.n	be454 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be448:	4426      	add	r6, r4
   be44a:	42b1      	cmp	r1, r6
   be44c:	d305      	bcc.n	be45a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be44e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be450:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be452:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be454:	3401      	adds	r4, #1
   be456:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be458:	e7ee      	b.n	be438 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be45a:	2000      	movs	r0, #0
   be45c:	e7f9      	b.n	be452 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be460 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be460:	4a02      	ldr	r2, [pc, #8]	; (be46c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be462:	4903      	ldr	r1, [pc, #12]	; (be470 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be464:	200a      	movs	r0, #10
   be466:	f7ff bdf9 	b.w	be05c <panic_>
   be46a:	bf00      	nop
   be46c:	000bdc8d 	.word	0x000bdc8d
   be470:	000c7c08 	.word	0x000c7c08

000be474 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be474:	b430      	push	{r4, r5}
   be476:	460d      	mov	r5, r1
   be478:	4611      	mov	r1, r2
   be47a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be47c:	6803      	ldr	r3, [r0, #0]
   be47e:	6809      	ldr	r1, [r1, #0]
   be480:	6828      	ldr	r0, [r5, #0]
   be482:	e9d3 4300 	ldrd	r4, r3, [r3]
   be486:	46a4      	mov	ip, r4
      }
   be488:	bc30      	pop	{r4, r5}
   be48a:	4760      	bx	ip

000be48c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be48c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be48e:	b538      	push	{r3, r4, r5, lr}
   be490:	4604      	mov	r4, r0
	switch (__op)
   be492:	d102      	bne.n	be49a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be494:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be496:	6023      	str	r3, [r4, #0]
	}
   be498:	e003      	b.n	be4a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be49a:	2a02      	cmp	r2, #2
   be49c:	d003      	beq.n	be4a6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be49e:	2a03      	cmp	r2, #3
   be4a0:	d00d      	beq.n	be4be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be4a2:	2000      	movs	r0, #0
   be4a4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be4a6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be4a8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be4aa:	f7f5 fdf4 	bl	b4096 <_Znwj>
   be4ae:	4603      	mov	r3, r0
   be4b0:	2800      	cmp	r0, #0
   be4b2:	d0f0      	beq.n	be496 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be4b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   be4b8:	e883 0003 	stmia.w	r3, {r0, r1}
   be4bc:	e7eb      	b.n	be496 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be4be:	6800      	ldr	r0, [r0, #0]
   be4c0:	2800      	cmp	r0, #0
   be4c2:	d0ee      	beq.n	be4a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be4c4:	2108      	movs	r1, #8
   be4c6:	f7f5 fdec 	bl	b40a2 <_ZdlPvj>
   be4ca:	e7ea      	b.n	be4a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be4cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be4cc:	b510      	push	{r4, lr}
   be4ce:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be4d0:	3058      	adds	r0, #88	; 0x58
   be4d2:	f7fb f957 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be4d6:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be4de:	f003 b9b5 	b.w	c184c <_ZN6StringD1Ev>

000be4e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   be4e2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   be4e4:	6843      	ldr	r3, [r0, #4]
   be4e6:	3b01      	subs	r3, #1
    {
   be4e8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   be4ea:	6043      	str	r3, [r0, #4]
   be4ec:	b963      	cbnz	r3, be508 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   be4ee:	6803      	ldr	r3, [r0, #0]
   be4f0:	689b      	ldr	r3, [r3, #8]
   be4f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   be4f4:	68a3      	ldr	r3, [r4, #8]
   be4f6:	3b01      	subs	r3, #1
   be4f8:	60a3      	str	r3, [r4, #8]
   be4fa:	b92b      	cbnz	r3, be508 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   be4fc:	6823      	ldr	r3, [r4, #0]
   be4fe:	4620      	mov	r0, r4
   be500:	68db      	ldr	r3, [r3, #12]
    }
   be502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   be506:	4718      	bx	r3
    }
   be508:	bd10      	pop	{r4, pc}

000be50a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   be50a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be50e:	b2da      	uxtb	r2, r3
   be510:	2a09      	cmp	r2, #9
   be512:	d801      	bhi.n	be518 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   be514:	4618      	mov	r0, r3
   be516:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   be518:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   be51c:	2b05      	cmp	r3, #5
   be51e:	d801      	bhi.n	be524 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   be520:	3857      	subs	r0, #87	; 0x57
   be522:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   be524:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   be528:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   be52a:	bf94      	ite	ls
   be52c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   be52e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   be532:	4770      	bx	lr

000be534 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   be534:	b510      	push	{r4, lr}
            locked_(false) {
   be536:	2300      	movs	r3, #0
   be538:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be53a:	4b04      	ldr	r3, [pc, #16]	; (be54c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   be53c:	4604      	mov	r4, r0
   be53e:	6818      	ldr	r0, [r3, #0]
   be540:	f7ff fb84 	bl	bdc4c <os_mutex_recursive_lock>
        locked_ = true;
   be544:	2301      	movs	r3, #1
   be546:	7023      	strb	r3, [r4, #0]
    }
   be548:	4620      	mov	r0, r4
   be54a:	bd10      	pop	{r4, pc}
   be54c:	2003e624 	.word	0x2003e624

000be550 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   be550:	b510      	push	{r4, lr}
        if (locked_) {
   be552:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   be554:	4604      	mov	r4, r0
        if (locked_) {
   be556:	b11b      	cbz	r3, be560 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be558:	4b02      	ldr	r3, [pc, #8]	; (be564 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   be55a:	6818      	ldr	r0, [r3, #0]
   be55c:	f7ff fb7e 	bl	bdc5c <os_mutex_recursive_unlock>
    }
   be560:	4620      	mov	r0, r4
   be562:	bd10      	pop	{r4, pc}
   be564:	2003e624 	.word	0x2003e624

000be568 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   be568:	b082      	sub	sp, #8
   be56a:	4603      	mov	r3, r0
    address_ = addr;
   be56c:	6808      	ldr	r0, [r1, #0]
   be56e:	6849      	ldr	r1, [r1, #4]
   be570:	466a      	mov	r2, sp
   be572:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   be574:	466a      	mov	r2, sp
   be576:	ca03      	ldmia	r2!, {r0, r1}
   be578:	6018      	str	r0, [r3, #0]
}
   be57a:	4618      	mov	r0, r3
    address_ = addr.address_;
   be57c:	6059      	str	r1, [r3, #4]
}
   be57e:	b002      	add	sp, #8
   be580:	4770      	bx	lr

000be582 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   be582:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   be584:	7982      	ldrb	r2, [r0, #6]
   be586:	798b      	ldrb	r3, [r1, #6]
   be588:	429a      	cmp	r2, r3
   be58a:	d106      	bne.n	be59a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   be58c:	2206      	movs	r2, #6
   be58e:	f005 ffb3 	bl	c44f8 <memcmp>
   be592:	fab0 f080 	clz	r0, r0
   be596:	0940      	lsrs	r0, r0, #5
}
   be598:	bd08      	pop	{r3, pc}
    return false;
   be59a:	2000      	movs	r0, #0
   be59c:	e7fc      	b.n	be598 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000be59e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   be59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   be5a2:	6003      	str	r3, [r0, #0]
   be5a4:	8083      	strh	r3, [r0, #4]
}
   be5a6:	2000      	movs	r0, #0
   be5a8:	4770      	bx	lr

000be5aa <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   be5aa:	b508      	push	{r3, lr}
   be5ac:	4602      	mov	r2, r0
        : address_{} {
   be5ae:	2100      	movs	r1, #0
   be5b0:	6001      	str	r1, [r0, #0]
   be5b2:	6041      	str	r1, [r0, #4]
    clear();
   be5b4:	f7ff fff3 	bl	be59e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   be5b8:	7191      	strb	r1, [r2, #6]
}
   be5ba:	4610      	mov	r0, r2
   be5bc:	bd08      	pop	{r3, pc}
	...

000be5c0 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   be5c0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   be5c2:	2301      	movs	r3, #1
   be5c4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be5c6:	4b05      	ldr	r3, [pc, #20]	; (be5dc <_ZN8particle7BleUuidC1Ev+0x1c>)
   be5c8:	4602      	mov	r2, r0
   be5ca:	f103 0110 	add.w	r1, r3, #16
   be5ce:	f853 4b04 	ldr.w	r4, [r3], #4
   be5d2:	f842 4b04 	str.w	r4, [r2], #4
   be5d6:	428b      	cmp	r3, r1
   be5d8:	d1f9      	bne.n	be5ce <_ZN8particle7BleUuidC1Ev+0xe>
}
   be5da:	bd10      	pop	{r4, pc}
   be5dc:	000c7db6 	.word	0x000c7db6

000be5e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be5e0:	b510      	push	{r4, lr}
    if (uuid128) {
   be5e2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   be5e4:	4604      	mov	r4, r0
    if (uuid128) {
   be5e6:	b1b1      	cbz	r1, be616 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   be5e8:	2a01      	cmp	r2, #1
   be5ea:	f101 0210 	add.w	r2, r1, #16
   be5ee:	d10a      	bne.n	be606 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   be5f0:	4601      	mov	r1, r0
   be5f2:	f853 0b04 	ldr.w	r0, [r3], #4
   be5f6:	f841 0b04 	str.w	r0, [r1], #4
   be5fa:	4293      	cmp	r3, r2
   be5fc:	d1f9      	bne.n	be5f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   be5fe:	2301      	movs	r3, #1
   be600:	6123      	str	r3, [r4, #16]
}
   be602:	4620      	mov	r0, r4
   be604:	bd10      	pop	{r4, pc}
   be606:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   be608:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   be60c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   be610:	429a      	cmp	r2, r3
   be612:	d1f9      	bne.n	be608 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   be614:	e7f3      	b.n	be5fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   be616:	2210      	movs	r2, #16
   be618:	f005 ffa6 	bl	c4568 <memset>
   be61c:	e7f1      	b.n	be602 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000be61e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   be61e:	b538      	push	{r3, r4, r5, lr}
   be620:	4604      	mov	r4, r0
   be622:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   be624:	461a      	mov	r2, r3
   be626:	f7ff ffdb 	bl	be5e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   be62a:	81a5      	strh	r5, [r4, #12]
}
   be62c:	4620      	mov	r0, r4
   be62e:	bd38      	pop	{r3, r4, r5, pc}

000be630 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   be630:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   be632:	6902      	ldr	r2, [r0, #16]
   be634:	b922      	cbnz	r2, be640 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   be636:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be638:	3800      	subs	r0, #0
   be63a:	bf18      	it	ne
   be63c:	2001      	movne	r0, #1
}
   be63e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be640:	4902      	ldr	r1, [pc, #8]	; (be64c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   be642:	2210      	movs	r2, #16
   be644:	f005 ff58 	bl	c44f8 <memcmp>
   be648:	e7f6      	b.n	be638 <_ZNK8particle7BleUuid7isValidEv+0x8>
   be64a:	bf00      	nop
   be64c:	000c7dd6 	.word	0x000c7dd6

000be650 <_ZNK8particle7BleUuid4typeEv>:
}
   be650:	6900      	ldr	r0, [r0, #16]
   be652:	4770      	bx	lr

000be654 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   be654:	b538      	push	{r3, r4, r5, lr}
   be656:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   be658:	2214      	movs	r2, #20
   be65a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   be65c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   be65e:	f005 ff83 	bl	c4568 <memset>
    if (type_ == BleUuidType::SHORT) {
   be662:	6923      	ldr	r3, [r4, #16]
   be664:	b91b      	cbnz	r3, be66e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   be666:	89a3      	ldrh	r3, [r4, #12]
   be668:	802b      	strh	r3, [r5, #0]
}
   be66a:	4628      	mov	r0, r5
   be66c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   be66e:	2301      	movs	r3, #1
   be670:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   be672:	4621      	mov	r1, r4
   be674:	462b      	mov	r3, r5
   be676:	f104 0210 	add.w	r2, r4, #16
   be67a:	f851 0b04 	ldr.w	r0, [r1], #4
   be67e:	f843 0b04 	str.w	r0, [r3], #4
   be682:	4291      	cmp	r1, r2
   be684:	d1f9      	bne.n	be67a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   be686:	e7f0      	b.n	be66a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000be688 <_ZNK8particle7BleUuid7shortedEv>:
}
   be688:	8980      	ldrh	r0, [r0, #12]
   be68a:	4770      	bx	lr

000be68c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   be68c:	4770      	bx	lr

000be68e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   be68e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be690:	6902      	ldr	r2, [r0, #16]
   be692:	690b      	ldr	r3, [r1, #16]
   be694:	429a      	cmp	r2, r3
   be696:	d106      	bne.n	be6a6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   be698:	2210      	movs	r2, #16
   be69a:	f005 ff2d 	bl	c44f8 <memcmp>
   be69e:	fab0 f080 	clz	r0, r0
   be6a2:	0940      	lsrs	r0, r0, #5
}
   be6a4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   be6a6:	2000      	movs	r0, #0
   be6a8:	e7fc      	b.n	be6a4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000be6ac <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   be6ac:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   be6ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   be6b2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be6b4:	4b34      	ldr	r3, [pc, #208]	; (be788 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   be6b6:	460c      	mov	r4, r1
   be6b8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   be6ba:	4602      	mov	r2, r0
   be6bc:	f103 0110 	add.w	r1, r3, #16
   be6c0:	f853 0b04 	ldr.w	r0, [r3], #4
   be6c4:	f842 0b04 	str.w	r0, [r2], #4
   be6c8:	428b      	cmp	r3, r1
   be6ca:	d1f9      	bne.n	be6c0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   be6cc:	b344      	cbz	r4, be720 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   be6ce:	2124      	movs	r1, #36	; 0x24
   be6d0:	4620      	mov	r0, r4
   be6d2:	f006 f816 	bl	c4702 <strnlen>
   be6d6:	2804      	cmp	r0, #4
   be6d8:	f04f 0500 	mov.w	r5, #0
   be6dc:	d123      	bne.n	be726 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   be6de:	f8ad 5004 	strh.w	r5, [sp, #4]
   be6e2:	af01      	add	r7, sp, #4
   be6e4:	1ca5      	adds	r5, r4, #2
   be6e6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   be6e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   be6ec:	f7ff ff0d 	bl	be50a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   be6f0:	f1b0 0800 	subs.w	r8, r0, #0
   be6f4:	db12      	blt.n	be71c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   be6f6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   be6fa:	f7ff ff06 	bl	be50a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   be6fe:	2800      	cmp	r0, #0
   be700:	db0c      	blt.n	be71c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   be702:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be704:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   be708:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   be70a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   be70e:	d1eb      	bne.n	be6e8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   be710:	f89d 3005 	ldrb.w	r3, [sp, #5]
   be714:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   be716:	f89d 3004 	ldrb.w	r3, [sp, #4]
   be71a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   be71c:	2300      	movs	r3, #0
   be71e:	6133      	str	r3, [r6, #16]
}
   be720:	b002      	add	sp, #8
   be722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   be726:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be72a:	2124      	movs	r1, #36	; 0x24
   be72c:	4620      	mov	r0, r4
   be72e:	f005 ffe8 	bl	c4702 <strnlen>
   be732:	42a8      	cmp	r0, r5
   be734:	d807      	bhi.n	be746 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   be736:	4642      	mov	r2, r8
   be738:	2100      	movs	r1, #0
   be73a:	4630      	mov	r0, r6
}
   be73c:	b002      	add	sp, #8
   be73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   be742:	f005 bf11 	b.w	c4568 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be746:	f1b8 0f00 	cmp.w	r8, #0
   be74a:	d0e9      	beq.n	be720 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   be74c:	5d60      	ldrb	r0, [r4, r5]
   be74e:	f7ff fedc 	bl	be50a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   be752:	0603      	lsls	r3, r0, #24
   be754:	d415      	bmi.n	be782 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   be756:	0100      	lsls	r0, r0, #4
   be758:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   be75c:	b2c7      	uxtb	r7, r0
   be75e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   be762:	2124      	movs	r1, #36	; 0x24
   be764:	4620      	mov	r0, r4
   be766:	f005 ffcc 	bl	c4702 <strnlen>
   be76a:	3501      	adds	r5, #1
   be76c:	42a8      	cmp	r0, r5
   be76e:	d908      	bls.n	be782 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   be770:	5d60      	ldrb	r0, [r4, r5]
   be772:	f7ff feca 	bl	be50a <_ZN8particle11hexToNibbleEc>
   be776:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   be778:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   be77a:	bfa4      	itt	ge
   be77c:	4338      	orrge	r0, r7
   be77e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   be782:	3501      	adds	r5, #1
   be784:	e7d1      	b.n	be72a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   be786:	bf00      	nop
   be788:	000c7db6 	.word	0x000c7db6

000be78c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   be78c:	b513      	push	{r0, r1, r4, lr}
   be78e:	4604      	mov	r4, r0
   be790:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   be792:	f7ff ff15 	bl	be5c0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   be796:	4620      	mov	r0, r4
   be798:	9901      	ldr	r1, [sp, #4]
   be79a:	f7ff ff87 	bl	be6ac <_ZN8particle7BleUuid9constructEPKc>
}
   be79e:	4620      	mov	r0, r4
   be7a0:	b002      	add	sp, #8
   be7a2:	bd10      	pop	{r4, pc}

000be7a4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   be7a4:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   be7a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be7aa:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   be7ac:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   be7ae:	8043      	strh	r3, [r0, #2]
   be7b0:	220e      	movs	r2, #14
   be7b2:	4629      	mov	r1, r5
   be7b4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   be7b6:	7105      	strb	r5, [r0, #4]
   be7b8:	3006      	adds	r0, #6
   be7ba:	f005 fed5 	bl	c4568 <memset>
   be7be:	f104 0014 	add.w	r0, r4, #20
   be7c2:	f7ff fefd 	bl	be5c0 <_ZN8particle7BleUuidC1Ev>
   be7c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   be7ca:	f7ff fef9 	bl	be5c0 <_ZN8particle7BleUuidC1Ev>
   be7ce:	4904      	ldr	r1, [pc, #16]	; (be7e0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   be7d0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   be7d4:	f003 f885 	bl	c18e2 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   be7d8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   be7da:	4620      	mov	r0, r4
   be7dc:	bd38      	pop	{r3, r4, r5, pc}
   be7de:	bf00      	nop
   be7e0:	000c7f1b 	.word	0x000c7f1b

000be7e4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   be7e4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   be7e6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   be7ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   be7ee:	4293      	cmp	r3, r2
   be7f0:	4618      	mov	r0, r3
   be7f2:	d006      	beq.n	be802 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   be7f4:	6804      	ldr	r4, [r0, #0]
   be7f6:	8824      	ldrh	r4, [r4, #0]
   be7f8:	428c      	cmp	r4, r1
   be7fa:	f103 0308 	add.w	r3, r3, #8
   be7fe:	d1f6      	bne.n	be7ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   be800:	bd10      	pop	{r4, pc}
        return nullptr;
   be802:	2000      	movs	r0, #0
   be804:	e7fc      	b.n	be800 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000be808 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   be808:	b5f0      	push	{r4, r5, r6, r7, lr}
   be80a:	4606      	mov	r6, r0
   be80c:	b085      	sub	sp, #20
   be80e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   be810:	460d      	mov	r5, r1
   be812:	2900      	cmp	r1, #0
   be814:	d050      	beq.n	be8b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   be816:	2a00      	cmp	r2, #0
   be818:	d04e      	beq.n	be8b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   be81a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   be81c:	7823      	ldrb	r3, [r4, #0]
   be81e:	2af4      	cmp	r2, #244	; 0xf4
   be820:	bf28      	it	cs
   be822:	22f4      	movcs	r2, #244	; 0xf4
   be824:	b343      	cbz	r3, be878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   be826:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   be828:	0798      	lsls	r0, r3, #30
   be82a:	d509      	bpl.n	be840 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   be82c:	89a0      	ldrh	r0, [r4, #12]
   be82e:	9203      	str	r2, [sp, #12]
   be830:	2300      	movs	r3, #0
   be832:	f7ff f985 	bl	bdb40 <hal_ble_gatt_server_set_characteristic_value>
   be836:	2800      	cmp	r0, #0
   be838:	9a03      	ldr	r2, [sp, #12]
   be83a:	da03      	bge.n	be844 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   be83c:	b005      	add	sp, #20
   be83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   be840:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be844:	6834      	ldr	r4, [r6, #0]
   be846:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   be848:	06d9      	lsls	r1, r3, #27
   be84a:	d509      	bpl.n	be860 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   be84c:	2f01      	cmp	r7, #1
   be84e:	d007      	beq.n	be860 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be850:	89a0      	ldrh	r0, [r4, #12]
   be852:	2300      	movs	r3, #0
   be854:	4629      	mov	r1, r5
}
   be856:	b005      	add	sp, #20
   be858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be85c:	f7ff b9a2 	b.w	bdba4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   be860:	069b      	lsls	r3, r3, #26
   be862:	d5eb      	bpl.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be864:	2f02      	cmp	r7, #2
   be866:	d0e9      	beq.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be868:	89a0      	ldrh	r0, [r4, #12]
   be86a:	2300      	movs	r3, #0
   be86c:	4629      	mov	r1, r5
}
   be86e:	b005      	add	sp, #20
   be870:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   be874:	f7ff b9a0 	b.w	bdbb8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   be878:	8860      	ldrh	r0, [r4, #2]
   be87a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be87e:	4288      	cmp	r0, r1
   be880:	d01c      	beq.n	be8bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   be882:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   be884:	074e      	lsls	r6, r1, #29
   be886:	d501      	bpl.n	be88c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   be888:	2f01      	cmp	r7, #1
   be88a:	d104      	bne.n	be896 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be88c:	070b      	lsls	r3, r1, #28
   be88e:	d409      	bmi.n	be8a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   be890:	f06f 0077 	mvn.w	r0, #119	; 0x77
   be894:	e7d2      	b.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be896:	89a1      	ldrh	r1, [r4, #12]
   be898:	9300      	str	r3, [sp, #0]
   be89a:	4613      	mov	r3, r2
   be89c:	462a      	mov	r2, r5
   be89e:	f7ff f963 	bl	bdb68 <hal_ble_gatt_client_write_without_response>
   be8a2:	e7cb      	b.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   be8a4:	2f02      	cmp	r7, #2
   be8a6:	d0f3      	beq.n	be890 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   be8a8:	2300      	movs	r3, #0
   be8aa:	89a1      	ldrh	r1, [r4, #12]
   be8ac:	9300      	str	r3, [sp, #0]
   be8ae:	4613      	mov	r3, r2
   be8b0:	462a      	mov	r2, r5
   be8b2:	f7ff f94f 	bl	bdb54 <hal_ble_gatt_client_write_with_response>
   be8b6:	e7c1      	b.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   be8b8:	4802      	ldr	r0, [pc, #8]	; (be8c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   be8ba:	e7bf      	b.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   be8bc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   be8c0:	e7bc      	b.n	be83c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   be8c2:	bf00      	nop
   be8c4:	fffffef2 	.word	0xfffffef2

000be8c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   be8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be8cc:	2600      	movs	r6, #0
   be8ce:	6006      	str	r6, [r0, #0]
   be8d0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   be8d2:	2028      	movs	r0, #40	; 0x28
   be8d4:	460c      	mov	r4, r1
   be8d6:	f7f5 fbde 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be8da:	1e05      	subs	r5, r0, #0
   be8dc:	f105 080c 	add.w	r8, r5, #12
   be8e0:	d00f      	beq.n	be902 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   be8e2:	2301      	movs	r3, #1
   be8e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   be8e8:	4b08      	ldr	r3, [pc, #32]	; (be90c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   be8ea:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   be8ec:	4640      	mov	r0, r8
   be8ee:	f7ff fe67 	bl	be5c0 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   be8f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   be8f4:	622e      	str	r6, [r5, #32]
   be8f6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   be8fa:	4646      	mov	r6, r8
   be8fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   be8fe:	6823      	ldr	r3, [r4, #0]
   be900:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   be902:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be906:	4638      	mov	r0, r7
   be908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   be90c:	000c7d78 	.word	0x000c7d78

000be910 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   be910:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   be912:	2500      	movs	r5, #0
   be914:	6005      	str	r5, [r0, #0]
   be916:	4606      	mov	r6, r0
   be918:	2030      	movs	r0, #48	; 0x30
   be91a:	f7f5 fbbc 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   be91e:	4604      	mov	r4, r0
   be920:	b188      	cbz	r0, be946 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   be922:	2301      	movs	r3, #1
   be924:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   be928:	4b09      	ldr	r3, [pc, #36]	; (be950 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   be92a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   be92c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   be930:	8183      	strh	r3, [r0, #12]
   be932:	300e      	adds	r0, #14
   be934:	f7ff fe39 	bl	be5aa <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   be938:	e9c4 5506 	strd	r5, r5, [r4, #24]
   be93c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   be940:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   be944:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   be946:	6074      	str	r4, [r6, #4]
   be948:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   be94a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   be94c:	4630      	mov	r0, r6
   be94e:	bd70      	pop	{r4, r5, r6, pc}
   be950:	000c7d94 	.word	0x000c7d94

000be954 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   be954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be956:	460d      	mov	r5, r1
   be958:	4604      	mov	r4, r0
    WiringBleLock lk;
   be95a:	a801      	add	r0, sp, #4
   be95c:	f7ff fdea 	bl	be534 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   be960:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   be962:	f8d2 3002 	ldr.w	r3, [r2, #2]
   be966:	6023      	str	r3, [r4, #0]
   be968:	f8d2 3006 	ldr.w	r3, [r2, #6]
   be96c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   be96e:	a801      	add	r0, sp, #4
   be970:	f7ff fdee 	bl	be550 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   be974:	4620      	mov	r0, r4
   be976:	b003      	add	sp, #12
   be978:	bd30      	pop	{r4, r5, pc}

000be97a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   be97a:	b530      	push	{r4, r5, lr}
   be97c:	4605      	mov	r5, r0
   be97e:	b087      	sub	sp, #28
   be980:	460c      	mov	r4, r1
    WiringBleLock lk;
   be982:	a801      	add	r0, sp, #4
   be984:	f7ff fdd6 	bl	be534 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   be988:	682a      	ldr	r2, [r5, #0]
   be98a:	6823      	ldr	r3, [r4, #0]
   be98c:	8812      	ldrh	r2, [r2, #0]
   be98e:	881b      	ldrh	r3, [r3, #0]
   be990:	429a      	cmp	r2, r3
   be992:	d10d      	bne.n	be9b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   be994:	4629      	mov	r1, r5
   be996:	a802      	add	r0, sp, #8
   be998:	f7ff ffdc 	bl	be954 <_ZNK8particle13BlePeerDevice7addressEv>
   be99c:	4621      	mov	r1, r4
   be99e:	a804      	add	r0, sp, #16
   be9a0:	f7ff ffd8 	bl	be954 <_ZNK8particle13BlePeerDevice7addressEv>
   be9a4:	a904      	add	r1, sp, #16
   be9a6:	a802      	add	r0, sp, #8
   be9a8:	f7ff fdeb 	bl	be582 <_ZNK8particle10BleAddresseqERKS0_>
   be9ac:	4604      	mov	r4, r0
   be9ae:	b900      	cbnz	r0, be9b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   be9b0:	2400      	movs	r4, #0
    WiringBleLock lk;
   be9b2:	a801      	add	r0, sp, #4
   be9b4:	f7ff fdcc 	bl	be550 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   be9b8:	4620      	mov	r0, r4
   be9ba:	b007      	add	sp, #28
   be9bc:	bd30      	pop	{r4, r5, pc}
	...

000be9c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   be9c0:	b510      	push	{r4, lr}
   be9c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   be9c4:	2064      	movs	r0, #100	; 0x64
   be9c6:	f7f5 fb66 	bl	b4096 <_Znwj>
   be9ca:	b168      	cbz	r0, be9e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   be9cc:	2300      	movs	r3, #0
   be9ce:	e9c0 3300 	strd	r3, r3, [r0]
   be9d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   be9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   be9da:	e9c0 3306 	strd	r3, r3, [r0, #24]
   be9de:	6203      	str	r3, [r0, #32]
   be9e0:	62c3      	str	r3, [r0, #44]	; 0x2c
   be9e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   be9e4:	64c3      	str	r3, [r0, #76]	; 0x4c
   be9e6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   be9e8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   be9ea:	b920      	cbnz	r0, be9f6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   be9ec:	4a0a      	ldr	r2, [pc, #40]	; (bea18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   be9ee:	490b      	ldr	r1, [pc, #44]	; (bea1c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   be9f0:	200a      	movs	r0, #10
   be9f2:	f7ff fb33 	bl	be05c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   be9f6:	2000      	movs	r0, #0
   be9f8:	f7ff f866 	bl	bdac8 <hal_ble_stack_init>
   be9fc:	b120      	cbz	r0, bea08 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   be9fe:	4a06      	ldr	r2, [pc, #24]	; (bea18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bea00:	4907      	ldr	r1, [pc, #28]	; (bea20 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bea02:	200a      	movs	r0, #10
   bea04:	f7ff fb2a 	bl	be05c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bea08:	6821      	ldr	r1, [r4, #0]
   bea0a:	4806      	ldr	r0, [pc, #24]	; (bea24 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bea0c:	2200      	movs	r2, #0
   bea0e:	f7ff f8bf 	bl	bdb90 <hal_ble_set_callback_on_periph_link_events>
}
   bea12:	4620      	mov	r0, r4
   bea14:	bd10      	pop	{r4, pc}
   bea16:	bf00      	nop
   bea18:	000bdc8d 	.word	0x000bdc8d
   bea1c:	000c7c08 	.word	0x000c7c08
   bea20:	000c7c46 	.word	0x000c7c46
   bea24:	000beff5 	.word	0x000beff5

000bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bea28:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bea2a:	4c0a      	ldr	r4, [pc, #40]	; (bea54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bea2c:	7823      	ldrb	r3, [r4, #0]
   bea2e:	f3bf 8f5b 	dmb	ish
   bea32:	07db      	lsls	r3, r3, #31
   bea34:	d40c      	bmi.n	bea50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bea36:	4620      	mov	r0, r4
   bea38:	f7f5 fb42 	bl	b40c0 <__cxa_guard_acquire>
   bea3c:	b140      	cbz	r0, bea50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bea3e:	4806      	ldr	r0, [pc, #24]	; (bea58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bea40:	f7ff ffbe 	bl	be9c0 <_ZN8particle14BleLocalDeviceC1Ev>
   bea44:	4620      	mov	r0, r4
   bea46:	f7f5 fb40 	bl	b40ca <__cxa_guard_release>
   bea4a:	4804      	ldr	r0, [pc, #16]	; (bea5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bea4c:	f005 fd3e 	bl	c44cc <atexit>
    return instance;
}
   bea50:	4801      	ldr	r0, [pc, #4]	; (bea58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bea52:	bd10      	pop	{r4, pc}
   bea54:	2003e61c 	.word	0x2003e61c
   bea58:	2003e628 	.word	0x2003e628
   bea5c:	000becad 	.word	0x000becad

000bea60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bea60:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bea62:	6803      	ldr	r3, [r0, #0]
   bea64:	3b09      	subs	r3, #9
   bea66:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bea68:	b08d      	sub	sp, #52	; 0x34
   bea6a:	4604      	mov	r4, r0
   bea6c:	460d      	mov	r5, r1
    switch (event->type) {
   bea6e:	d811      	bhi.n	bea94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bea70:	f7ff ffda 	bl	bea28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bea74:	88a1      	ldrh	r1, [r4, #4]
   bea76:	6800      	ldr	r0, [r0, #0]
   bea78:	f7ff feb4 	bl	be7e4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   bea7c:	4603      	mov	r3, r0
   bea7e:	b958      	cbnz	r0, bea98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   bea80:	2220      	movs	r2, #32
   bea82:	e9cd 2004 	strd	r2, r0, [sp, #16]
   bea86:	4a0b      	ldr	r2, [pc, #44]	; (beab4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   bea88:	9200      	str	r2, [sp, #0]
   bea8a:	490b      	ldr	r1, [pc, #44]	; (beab8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   bea8c:	aa04      	add	r2, sp, #16
   bea8e:	2032      	movs	r0, #50	; 0x32
   bea90:	f7ff faec 	bl	be06c <log_message>
}
   bea94:	b00d      	add	sp, #52	; 0x34
   bea96:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   bea98:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   bea9a:	2a00      	cmp	r2, #0
   bea9c:	d0fa      	beq.n	bea94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   bea9e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   beaa2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   beaa6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   beaaa:	6dac      	ldr	r4, [r5, #88]	; 0x58
   beaac:	aa04      	add	r2, sp, #16
   beaae:	a903      	add	r1, sp, #12
   beab0:	47a0      	blx	r4
}
   beab2:	e7ef      	b.n	bea94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   beab4:	000c7c88 	.word	0x000c7c88
   beab8:	000c7c1f 	.word	0x000c7c1f

000beabc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   beabc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   beabe:	2000      	movs	r0, #0
   beac0:	f7ff f802 	bl	bdac8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   beac4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   beac8:	bd08      	pop	{r3, pc}

000beaca <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   beaca:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   beacc:	2100      	movs	r1, #0
   beace:	f7ff b803 	b.w	bdad8 <hal_ble_gap_set_tx_power>

000bead2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   bead2:	b919      	cbnz	r1, beadc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   bead4:	460a      	mov	r2, r1
   bead6:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   bead8:	f7ff b806 	b.w	bdae8 <hal_ble_gap_set_advertising_data>
   beadc:	e9d1 0100 	ldrd	r0, r1, [r1]
   beae0:	2200      	movs	r2, #0
   beae2:	e7f9      	b.n	bead8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000beae4 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   beae4:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   beae6:	69d8      	ldr	r0, [r3, #28]
}
   beae8:	2800      	cmp	r0, #0
   beaea:	bfd4      	ite	le
   beaec:	2000      	movle	r0, #0
   beaee:	2001      	movgt	r0, #1
   beaf0:	4770      	bx	lr

000beaf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   beaf2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   beaf4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   beaf8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   beafa:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   beafe:	42ae      	cmp	r6, r5
   beb00:	d004      	beq.n	beb0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   beb02:	4628      	mov	r0, r5
   beb04:	f002 fea2 	bl	c184c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   beb08:	3510      	adds	r5, #16
   beb0a:	e7f8      	b.n	beafe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   beb0c:	6820      	ldr	r0, [r4, #0]
   beb0e:	f7ff fbbb 	bl	be288 <free>
}
   beb12:	4620      	mov	r0, r4
   beb14:	bd70      	pop	{r4, r5, r6, pc}

000beb16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   beb16:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   beb18:	1e14      	subs	r4, r2, #0
   beb1a:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   beb1c:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   beb1e:	db02      	blt.n	beb26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   beb20:	1862      	adds	r2, r4, r1
   beb22:	429a      	cmp	r2, r3
   beb24:	dd00      	ble.n	beb28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   beb26:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   beb28:	682a      	ldr	r2, [r5, #0]
   beb2a:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   beb2c:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   beb2e:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   beb30:	1a52      	subs	r2, r2, r1
   beb32:	f005 fcff 	bl	c4534 <memmove>
    size_ -= n;
   beb36:	686a      	ldr	r2, [r5, #4]
   beb38:	1b12      	subs	r2, r2, r4
   beb3a:	606a      	str	r2, [r5, #4]
}
   beb3c:	bd38      	pop	{r3, r4, r5, pc}

000beb3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   beb3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   beb40:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   beb42:	4604      	mov	r4, r0
   beb44:	460d      	mov	r5, r1
   beb46:	ab01      	add	r3, sp, #4
   beb48:	e9d0 0100 	ldrd	r0, r1, [r0]
   beb4c:	f7ff fc72 	bl	be434 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   beb50:	4602      	mov	r2, r0
   beb52:	b138      	cbz	r0, beb64 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   beb54:	9901      	ldr	r1, [sp, #4]
   beb56:	4620      	mov	r0, r4
   beb58:	f7ff ffdd 	bl	beb16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   beb5c:	4629      	mov	r1, r5
   beb5e:	4620      	mov	r0, r4
   beb60:	f7ff ffed 	bl	beb3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   beb64:	b003      	add	sp, #12
   beb66:	bd30      	pop	{r4, r5, pc}

000beb68 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   beb68:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   beb6a:	460c      	mov	r4, r1
   beb6c:	b929      	cbnz	r1, beb7a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   beb6e:	460a      	mov	r2, r1
   beb70:	4608      	mov	r0, r1
}
   beb72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   beb76:	f7fe bfbf 	b.w	bdaf8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   beb7a:	2101      	movs	r1, #1
   beb7c:	4620      	mov	r0, r4
   beb7e:	f7ff ffde 	bl	beb3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   beb82:	e9d4 0100 	ldrd	r0, r1, [r4]
   beb86:	2200      	movs	r2, #0
   beb88:	e7f3      	b.n	beb72 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000beb8a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   beb8a:	b538      	push	{r3, r4, r5, lr}
   beb8c:	4604      	mov	r4, r0
   beb8e:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   beb90:	f7ff ff9f 	bl	bead2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   beb94:	2800      	cmp	r0, #0
   beb96:	db0a      	blt.n	bebae <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   beb98:	4629      	mov	r1, r5
   beb9a:	4620      	mov	r0, r4
   beb9c:	f7ff ffe4 	bl	beb68 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   beba0:	2800      	cmp	r0, #0
   beba2:	db04      	blt.n	bebae <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   beba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   beba8:	2000      	movs	r0, #0
   bebaa:	f7fe bfad 	b.w	bdb08 <hal_ble_gap_start_advertising>
}
   bebae:	bd38      	pop	{r3, r4, r5, pc}

000bebb0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bebb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bebb2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bebb4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bebb6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bebb8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bebba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bebbc:	f7f5 fa6b 	bl	b4096 <_Znwj>
   bebc0:	b118      	cbz	r0, bebca <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bebc2:	682b      	ldr	r3, [r5, #0]
   bebc4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bebc6:	686b      	ldr	r3, [r5, #4]
   bebc8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bebca:	4b03      	ldr	r3, [pc, #12]	; (bebd8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bebcc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bebce:	4b03      	ldr	r3, [pc, #12]	; (bebdc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bebd0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bebd2:	60a3      	str	r3, [r4, #8]
      }
   bebd4:	4620      	mov	r0, r4
   bebd6:	bd38      	pop	{r3, r4, r5, pc}
   bebd8:	000be475 	.word	0x000be475
   bebdc:	000be48d 	.word	0x000be48d

000bebe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bebe0:	680b      	ldr	r3, [r1, #0]
   bebe2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bebe4:	b113      	cbz	r3, bebec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bebe6:	685a      	ldr	r2, [r3, #4]
   bebe8:	3201      	adds	r2, #1
   bebea:	605a      	str	r2, [r3, #4]
      }
   bebec:	4770      	bx	lr

000bebee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bebee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bebf0:	f851 3b04 	ldr.w	r3, [r1], #4
   bebf4:	4604      	mov	r4, r0
   bebf6:	f840 3b04 	str.w	r3, [r0], #4
   bebfa:	f7ff fff1 	bl	bebe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bebfe:	6823      	ldr	r3, [r4, #0]
   bec00:	b90b      	cbnz	r3, bec06 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bec02:	f7ff fc2d 	bl	be460 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bec06:	4620      	mov	r0, r4
   bec08:	bd10      	pop	{r4, pc}

000bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bec0a:	b510      	push	{r4, lr}
   bec0c:	f851 3b04 	ldr.w	r3, [r1], #4
   bec10:	4604      	mov	r4, r0
   bec12:	f840 3b04 	str.w	r3, [r0], #4
   bec16:	f7ff ffe3 	bl	bebe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bec1a:	4620      	mov	r0, r4
   bec1c:	bd10      	pop	{r4, pc}

000bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bec1e:	b510      	push	{r4, lr}
   bec20:	f851 3b04 	ldr.w	r3, [r1], #4
   bec24:	4604      	mov	r4, r0
   bec26:	f840 3b04 	str.w	r3, [r0], #4
   bec2a:	f7ff ffd9 	bl	bebe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bec2e:	4620      	mov	r0, r4
   bec30:	bd10      	pop	{r4, pc}

000bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bec32:	b510      	push	{r4, lr}
   bec34:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bec36:	6800      	ldr	r0, [r0, #0]
   bec38:	b108      	cbz	r0, bec3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bec3a:	f7ff fc52 	bl	be4e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bec3e:	4620      	mov	r0, r4
   bec40:	bd10      	pop	{r4, pc}

000bec42 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bec42:	b510      	push	{r4, lr}
   bec44:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bec46:	3004      	adds	r0, #4
   bec48:	f7ff fff3 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bec4c:	4620      	mov	r0, r4
   bec4e:	bd10      	pop	{r4, pc}

000bec50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec50:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bec52:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec56:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bec58:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bec5c:	42ae      	cmp	r6, r5
   bec5e:	d004      	beq.n	bec6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bec60:	1d28      	adds	r0, r5, #4
   bec62:	f7ff ffe6 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec66:	3508      	adds	r5, #8
   bec68:	e7f8      	b.n	bec5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bec6a:	6820      	ldr	r0, [r4, #0]
   bec6c:	f7ff fb0c 	bl	be288 <free>
}
   bec70:	4620      	mov	r0, r4
   bec72:	bd70      	pop	{r4, r5, r6, pc}

000bec74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec74:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bec76:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bec7a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bec7c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bec80:	42ae      	cmp	r6, r5
   bec82:	d004      	beq.n	bec8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bec84:	1d28      	adds	r0, r5, #4
   bec86:	f7ff ffd4 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bec8a:	3508      	adds	r5, #8
   bec8c:	e7f8      	b.n	bec80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bec8e:	6820      	ldr	r0, [r4, #0]
   bec90:	f7ff fafa 	bl	be288 <free>
}
   bec94:	4620      	mov	r0, r4
   bec96:	bd70      	pop	{r4, r5, r6, pc}

000bec98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bec98:	b510      	push	{r4, lr}
   bec9a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bec9c:	3024      	adds	r0, #36	; 0x24
   bec9e:	f7ff ffe9 	bl	bec74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   beca2:	f104 0018 	add.w	r0, r4, #24
   beca6:	f7ff ffd3 	bl	bec50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   becaa:	bd10      	pop	{r4, pc}

000becac <__tcf_0>:
    static BleLocalDevice instance;
   becac:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   becae:	4b17      	ldr	r3, [pc, #92]	; (bed0c <__tcf_0+0x60>)
   becb0:	681c      	ldr	r4, [r3, #0]
   becb2:	b354      	cbz	r4, bed0a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   becb4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   becb8:	f7fa fd64 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   becbc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   becc0:	f7fa fd60 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   becc4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   becc8:	f7fa fd5c 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   beccc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   becd0:	f7fa fd58 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   becd4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   becd8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   becdc:	42ae      	cmp	r6, r5
   becde:	d004      	beq.n	becea <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bece0:	1d28      	adds	r0, r5, #4
   bece2:	f7ff ffa6 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bece6:	3508      	adds	r5, #8
   bece8:	e7f8      	b.n	becdc <__tcf_0+0x30>
    ::free(ptr);
   becea:	69a0      	ldr	r0, [r4, #24]
   becec:	f7ff facc 	bl	be288 <free>
    ~BleLocalDeviceImpl() = default;
   becf0:	f104 000c 	add.w	r0, r4, #12
   becf4:	f7ff ffbe 	bl	bec74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   becf8:	4620      	mov	r0, r4
   becfa:	f7ff ffa9 	bl	bec50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   becfe:	4620      	mov	r0, r4
   bed00:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bed02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bed06:	f7f5 b9cc 	b.w	b40a2 <_ZdlPvj>
   bed0a:	bd70      	pop	{r4, r5, r6, pc}
   bed0c:	2003e628 	.word	0x2003e628

000bed10 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bed10:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bed12:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bed14:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bed18:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bed1c:	6803      	ldr	r3, [r0, #0]
   bed1e:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bed20:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bed22:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bed24:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bed26:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bed28:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bed2a:	f7ff ff82 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bed2e:	b002      	add	sp, #8
   bed30:	bd10      	pop	{r4, pc}

000bed32 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bed32:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bed34:	b510      	push	{r4, lr}
      if (_M_empty())
   bed36:	b90a      	cbnz	r2, bed3c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bed38:	f003 f9f0 	bl	c211c <_ZSt25__throw_bad_function_callv>
    }
   bed3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bed40:	68c3      	ldr	r3, [r0, #12]
   bed42:	4718      	bx	r3

000bed44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bed44:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bed46:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bed48:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bed4a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bed4c:	dd03      	ble.n	bed56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bed4e:	f7ff faa3 	bl	be298 <realloc>
            if (!d) {
   bed52:	b918      	cbnz	r0, bed5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bed54:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bed56:	f7ff fa97 	bl	be288 <free>
        T* d = nullptr;
   bed5a:	2000      	movs	r0, #0
        data_ = d;
   bed5c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bed5e:	60a5      	str	r5, [r4, #8]
        return true;
   bed60:	2001      	movs	r0, #1
   bed62:	e7f7      	b.n	bed54 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bed64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bed64:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bed66:	6883      	ldr	r3, [r0, #8]
   bed68:	428b      	cmp	r3, r1
   bed6a:	da02      	bge.n	bed72 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bed6c:	f7ff ffea 	bl	bed44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bed70:	bd08      	pop	{r3, pc}
    return true;
   bed72:	2001      	movs	r0, #1
   bed74:	e7fc      	b.n	bed70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bed76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bed76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bed7a:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bed7c:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bed7e:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bed80:	4419      	add	r1, r3
   bed82:	6883      	ldr	r3, [r0, #8]
   bed84:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bed86:	4604      	mov	r4, r0
   bed88:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bed8a:	dc12      	bgt.n	bedb2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bed8c:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bed8e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bed90:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bed92:	1bd2      	subs	r2, r2, r7
   bed94:	4631      	mov	r1, r6
   bed96:	1970      	adds	r0, r6, r5
   bed98:	f005 fbcc 	bl	c4534 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bed9c:	462a      	mov	r2, r5
   bed9e:	4641      	mov	r1, r8
   beda0:	4630      	mov	r0, r6
   beda2:	f005 fbb9 	bl	c4518 <memcpy>
    size_ += n;
   beda6:	6863      	ldr	r3, [r4, #4]
   beda8:	442b      	add	r3, r5
   bedaa:	6063      	str	r3, [r4, #4]
    return true;
   bedac:	2001      	movs	r0, #1
}
   bedae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bedb2:	f7ff ffc7 	bl	bed44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bedb6:	2800      	cmp	r0, #0
   bedb8:	d1e8      	bne.n	bed8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bedba:	e7f8      	b.n	bedae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bedbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bedbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bedbe:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bedc0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bedc4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bedc6:	4604      	mov	r4, r0
   bedc8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bedca:	da0b      	bge.n	bede4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bedcc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bedce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bedd0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bedd2:	1b52      	subs	r2, r2, r5
   bedd4:	1c48      	adds	r0, r1, #1
   bedd6:	f005 fbad 	bl	c4534 <memmove>
    new(p) T(std::move(value));
   bedda:	557e      	strb	r6, [r7, r5]
    ++size_;
   beddc:	6863      	ldr	r3, [r4, #4]
   bedde:	3301      	adds	r3, #1
   bede0:	6063      	str	r3, [r4, #4]
}
   bede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bede4:	3101      	adds	r1, #1
   bede6:	f7ff ffad 	bl	bed44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bedea:	2800      	cmp	r0, #0
   bedec:	d1ee      	bne.n	bedcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bedee:	e7f8      	b.n	bede2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bedf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bedf0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bedf2:	6841      	ldr	r1, [r0, #4]
   bedf4:	f7ff bfe2 	b.w	bedbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bedf8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bedf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bedfc:	4604      	mov	r4, r0
   bedfe:	461d      	mov	r5, r3
   bee00:	460f      	mov	r7, r1
   bee02:	ab01      	add	r3, sp, #4
   bee04:	4690      	mov	r8, r2
   bee06:	460a      	mov	r2, r1
   bee08:	e9d0 0100 	ldrd	r0, r1, [r0]
   bee0c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bee10:	f7ff fb10 	bl	be434 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bee14:	1cae      	adds	r6, r5, #2
   bee16:	6863      	ldr	r3, [r4, #4]
   bee18:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bee1a:	f1b9 0f00 	cmp.w	r9, #0
   bee1e:	d126      	bne.n	bee6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bee20:	b328      	cbz	r0, bee6e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bee22:	4433      	add	r3, r6
   bee24:	1a1b      	subs	r3, r3, r0
   bee26:	2bff      	cmp	r3, #255	; 0xff
   bee28:	d809      	bhi.n	bee3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bee2a:	9901      	ldr	r1, [sp, #4]
   bee2c:	4620      	mov	r0, r4
   bee2e:	f7ff fe72 	bl	beb16 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bee32:	6861      	ldr	r1, [r4, #4]
   bee34:	4620      	mov	r0, r4
   bee36:	4431      	add	r1, r6
   bee38:	f7ff ff94 	bl	bed64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bee3c:	b918      	cbnz	r0, bee46 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bee3e:	6860      	ldr	r0, [r4, #4]
}
   bee40:	b003      	add	sp, #12
   bee42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bee46:	1c6a      	adds	r2, r5, #1
   bee48:	9901      	ldr	r1, [sp, #4]
   bee4a:	b2d2      	uxtb	r2, r2
   bee4c:	4620      	mov	r0, r4
   bee4e:	f7ff ffb5 	bl	bedbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bee52:	9901      	ldr	r1, [sp, #4]
   bee54:	463a      	mov	r2, r7
   bee56:	3101      	adds	r1, #1
   bee58:	4620      	mov	r0, r4
   bee5a:	f7ff ffaf 	bl	bedbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bee5e:	9901      	ldr	r1, [sp, #4]
   bee60:	462b      	mov	r3, r5
   bee62:	4642      	mov	r2, r8
   bee64:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bee66:	4620      	mov	r0, r4
   bee68:	f7ff ff85 	bl	bed76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bee6c:	e7e7      	b.n	bee3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bee6e:	18f1      	adds	r1, r6, r3
   bee70:	29ff      	cmp	r1, #255	; 0xff
   bee72:	d8e4      	bhi.n	bee3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bee74:	4620      	mov	r0, r4
   bee76:	f7ff ff75 	bl	bed64 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bee7a:	2800      	cmp	r0, #0
   bee7c:	d0df      	beq.n	bee3e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bee7e:	1c69      	adds	r1, r5, #1
   bee80:	b2c9      	uxtb	r1, r1
   bee82:	4620      	mov	r0, r4
   bee84:	f7ff ffb4 	bl	bedf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bee88:	4639      	mov	r1, r7
   bee8a:	4620      	mov	r0, r4
   bee8c:	f7ff ffb0 	bl	bedf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bee90:	6861      	ldr	r1, [r4, #4]
   bee92:	462b      	mov	r3, r5
   bee94:	4642      	mov	r2, r8
   bee96:	e7e6      	b.n	bee66 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bee98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bee98:	b430      	push	{r4, r5}
   bee9a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bee9e:	b11a      	cbz	r2, beea8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   beea0:	9502      	str	r5, [sp, #8]
}
   beea2:	bc30      	pop	{r4, r5}
   beea4:	f7ff bfa8 	b.w	bedf8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   beea8:	6840      	ldr	r0, [r0, #4]
}
   beeaa:	bc30      	pop	{r4, r5}
   beeac:	4770      	bx	lr

000beeae <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   beeae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   beeb0:	2300      	movs	r3, #0
   beeb2:	e9c0 3300 	strd	r3, r3, [r0]
   beeb6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   beeb8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   beeba:	9300      	str	r3, [sp, #0]
   beebc:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   beebe:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   beec2:	4619      	mov	r1, r3
   beec4:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   beec8:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   beeca:	f7ff ffe5 	bl	bee98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   beece:	4620      	mov	r0, r4
   beed0:	b004      	add	sp, #16
   beed2:	bd10      	pop	{r4, pc}

000beed4 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   beed4:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   beed6:	9300      	str	r3, [sp, #0]
   beed8:	4613      	mov	r3, r2
   beeda:	460a      	mov	r2, r1
   beedc:	21ff      	movs	r1, #255	; 0xff
   beede:	f7ff ffdb 	bl	bee98 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   beee2:	b003      	add	sp, #12
   beee4:	f85d fb04 	ldr.w	pc, [sp], #4

000beee8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   beee8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beeea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beeec:	4604      	mov	r4, r0
   beeee:	460d      	mov	r5, r1
   beef0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beef2:	d914      	bls.n	bef1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   beef4:	4290      	cmp	r0, r2
   beef6:	d213      	bcs.n	bef20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   beef8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   beefc:	1a75      	subs	r5, r6, r1
   beefe:	f1a1 0708 	sub.w	r7, r1, #8
   bef02:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bef04:	42b7      	cmp	r7, r6
   bef06:	d018      	beq.n	bef3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bef08:	b11c      	cbz	r4, bef12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bef0a:	4631      	mov	r1, r6
   bef0c:	4620      	mov	r0, r4
   bef0e:	f7ff fe86 	bl	bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bef12:	1d30      	adds	r0, r6, #4
   bef14:	f7ff fe8d 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bef18:	3e08      	subs	r6, #8
   bef1a:	3c08      	subs	r4, #8
   bef1c:	e7f2      	b.n	bef04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bef1e:	d00c      	beq.n	bef3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bef20:	42b5      	cmp	r5, r6
   bef22:	d00a      	beq.n	bef3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bef24:	b11c      	cbz	r4, bef2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bef26:	4629      	mov	r1, r5
   bef28:	4620      	mov	r0, r4
   bef2a:	f7ff fe78 	bl	bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bef2e:	1d28      	adds	r0, r5, #4
   bef30:	f7ff fe7f 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bef34:	3508      	adds	r5, #8
   bef36:	3408      	adds	r4, #8
   bef38:	e7f2      	b.n	bef20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bef3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bef3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bef3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bef3e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bef40:	6846      	ldr	r6, [r0, #4]
   bef42:	4668      	mov	r0, sp
   bef44:	f7ff fe6b 	bl	bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bef48:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bef4c:	429f      	cmp	r7, r3
   bef4e:	db12      	blt.n	bef76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bef50:	3701      	adds	r7, #1
        if (n > 0) {
   bef52:	2f00      	cmp	r7, #0
   bef54:	dd29      	ble.n	befaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bef56:	00f8      	lsls	r0, r7, #3
   bef58:	f7ff f98e 	bl	be278 <malloc>
            if (!d) {
   bef5c:	4605      	mov	r5, r0
   bef5e:	b1f0      	cbz	r0, bef9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bef60:	e9d4 1200 	ldrd	r1, r2, [r4]
   bef64:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bef68:	f7ff ffbe 	bl	beee8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bef6c:	6820      	ldr	r0, [r4, #0]
   bef6e:	f7ff f98b 	bl	be288 <free>
        data_ = d;
   bef72:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bef74:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bef76:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bef78:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bef7a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bef7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bef82:	4631      	mov	r1, r6
   bef84:	f106 0008 	add.w	r0, r6, #8
   bef88:	f7ff ffae 	bl	beee8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bef8c:	b11e      	cbz	r6, bef96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bef8e:	4669      	mov	r1, sp
   bef90:	4630      	mov	r0, r6
   bef92:	f7ff fe44 	bl	bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bef96:	6863      	ldr	r3, [r4, #4]
   bef98:	3301      	adds	r3, #1
   bef9a:	6063      	str	r3, [r4, #4]
    return true;
   bef9c:	2501      	movs	r5, #1
   bef9e:	a801      	add	r0, sp, #4
   befa0:	f7ff fe47 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   befa4:	4628      	mov	r0, r5
   befa6:	b003      	add	sp, #12
   befa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   befaa:	2500      	movs	r5, #0
   befac:	e7de      	b.n	bef6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000befae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   befae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   befb0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   befb4:	4605      	mov	r5, r0
   befb6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   befb8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   befbc:	42a6      	cmp	r6, r4
   befbe:	d005      	beq.n	befcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   befc0:	4639      	mov	r1, r7
   befc2:	4620      	mov	r0, r4
   befc4:	f7ff fcd9 	bl	be97a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   befc8:	b108      	cbz	r0, befce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   befca:	b914      	cbnz	r4, befd2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   befcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   befce:	3408      	adds	r4, #8
   befd0:	e7f4      	b.n	befbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   befd2:	1d20      	adds	r0, r4, #4
   befd4:	f7ff fe2d 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   befd8:	e9d5 3200 	ldrd	r3, r2, [r5]
   befdc:	f104 0108 	add.w	r1, r4, #8
   befe0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   befe4:	4620      	mov	r0, r4
   befe6:	f7ff ff7f 	bl	beee8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   befea:	686b      	ldr	r3, [r5, #4]
   befec:	3b01      	subs	r3, #1
   befee:	606b      	str	r3, [r5, #4]
    return true;
   beff0:	e7ec      	b.n	befcc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000beff4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   beff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   beff8:	4605      	mov	r5, r0
   beffa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   beffc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   beffe:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf000:	f7ff fa98 	bl	be534 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf004:	682e      	ldr	r6, [r5, #0]
   bf006:	1ef3      	subs	r3, r6, #3
   bf008:	2b0d      	cmp	r3, #13
   bf00a:	d83c      	bhi.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf00c:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf010:	0053000e 	.word	0x0053000e
   bf014:	00d1003b 	.word	0x00d1003b
   bf018:	003b003b 	.word	0x003b003b
   bf01c:	003b003b 	.word	0x003b003b
   bf020:	009b003b 	.word	0x009b003b
   bf024:	009b009b 	.word	0x009b009b
   bf028:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf02c:	a804      	add	r0, sp, #16
   bf02e:	f7ff fc6f 	bl	be910 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf032:	9b04      	ldr	r3, [sp, #16]
   bf034:	89aa      	ldrh	r2, [r5, #12]
   bf036:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf038:	6869      	ldr	r1, [r5, #4]
   bf03a:	9804      	ldr	r0, [sp, #16]
   bf03c:	3108      	adds	r1, #8
   bf03e:	3002      	adds	r0, #2
   bf040:	f7ff fa92 	bl	be568 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf044:	a904      	add	r1, sp, #16
   bf046:	a806      	add	r0, sp, #24
   bf048:	f7ff fde9 	bl	bec1e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf04c:	a906      	add	r1, sp, #24
   bf04e:	f104 0018 	add.w	r0, r4, #24
   bf052:	f7ff ff73 	bl	bef3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf056:	4605      	mov	r5, r0
   bf058:	a807      	add	r0, sp, #28
   bf05a:	f7ff fdea 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf05e:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf060:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf062:	b9b5      	cbnz	r5, bf092 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf064:	4b5d      	ldr	r3, [pc, #372]	; (bf1dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf066:	495e      	ldr	r1, [pc, #376]	; (bf1e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf068:	9300      	str	r3, [sp, #0]
   bf06a:	2032      	movs	r0, #50	; 0x32
   bf06c:	462b      	mov	r3, r5
   bf06e:	aa06      	add	r2, sp, #24
   bf070:	9507      	str	r5, [sp, #28]
   bf072:	f7fe fffb 	bl	be06c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf076:	9b04      	ldr	r3, [sp, #16]
   bf078:	4629      	mov	r1, r5
   bf07a:	8818      	ldrh	r0, [r3, #0]
   bf07c:	f7fe fd4c 	bl	bdb18 <hal_ble_gap_disconnect>
   bf080:	a805      	add	r0, sp, #20
   bf082:	f7ff fdd6 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf086:	a803      	add	r0, sp, #12
   bf088:	f7ff fa62 	bl	be550 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf08c:	b00e      	add	sp, #56	; 0x38
   bf08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf092:	4a54      	ldr	r2, [pc, #336]	; (bf1e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf094:	9200      	str	r2, [sp, #0]
   bf096:	2300      	movs	r3, #0
   bf098:	4951      	ldr	r1, [pc, #324]	; (bf1e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf09a:	9307      	str	r3, [sp, #28]
   bf09c:	aa06      	add	r2, sp, #24
   bf09e:	2001      	movs	r0, #1
   bf0a0:	f7fe ffe4 	bl	be06c <log_message>
                if (impl->connectedCallback_) {
   bf0a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf0a6:	2b00      	cmp	r3, #0
   bf0a8:	d0ea      	beq.n	bf080 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf0aa:	a904      	add	r1, sp, #16
   bf0ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf0b0:	f7ff fe3f 	bl	bed32 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf0b4:	e7e4      	b.n	bf080 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf0b6:	89a9      	ldrh	r1, [r5, #12]
   bf0b8:	4620      	mov	r0, r4
   bf0ba:	f7ff fb93 	bl	be7e4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf0be:	4606      	mov	r6, r0
   bf0c0:	2800      	cmp	r0, #0
   bf0c2:	d0e0      	beq.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf0c4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf0c6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf0ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf0ce:	8029      	strh	r1, [r5, #0]
   bf0d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf0d4:	429a      	cmp	r2, r3
   bf0d6:	d003      	beq.n	bf0e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf0d8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf0dc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf0de:	e7f9      	b.n	bf0d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf0e0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf0e4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf0e8:	45b8      	cmp	r8, r7
   bf0ea:	d004      	beq.n	bf0f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf0ec:	1d38      	adds	r0, r7, #4
   bf0ee:	f7ff fda0 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf0f2:	3708      	adds	r7, #8
   bf0f4:	e7f8      	b.n	bf0e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf0f6:	2300      	movs	r3, #0
   bf0f8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf0fa:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf0fe:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf102:	45b8      	cmp	r8, r7
   bf104:	d004      	beq.n	bf110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf106:	1d38      	adds	r0, r7, #4
   bf108:	f7ff fd93 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf10c:	3708      	adds	r7, #8
   bf10e:	e7f8      	b.n	bf102 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf110:	2300      	movs	r3, #0
   bf112:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf114:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf118:	b123      	cbz	r3, bf124 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf11a:	4631      	mov	r1, r6
   bf11c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf120:	f7ff fe07 	bl	bed32 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf124:	2300      	movs	r3, #0
   bf126:	2220      	movs	r2, #32
   bf128:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf12c:	4a2e      	ldr	r2, [pc, #184]	; (bf1e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf12e:	9200      	str	r2, [sp, #0]
   bf130:	492b      	ldr	r1, [pc, #172]	; (bf1e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf132:	aa06      	add	r2, sp, #24
   bf134:	2001      	movs	r0, #1
   bf136:	f7fe ff99 	bl	be06c <log_message>
                    impl->peers_.removeOne(*peer);
   bf13a:	4631      	mov	r1, r6
   bf13c:	f104 0018 	add.w	r0, r4, #24
   bf140:	f7ff ff35 	bl	befae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf144:	e79f      	b.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf146:	89a9      	ldrh	r1, [r5, #12]
   bf148:	4620      	mov	r0, r4
   bf14a:	f7ff fb4b 	bl	be7e4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf14e:	2800      	cmp	r0, #0
   bf150:	d099      	beq.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf152:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf154:	2b00      	cmp	r3, #0
   bf156:	d096      	beq.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf158:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf15a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf15c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf160:	d001      	beq.n	bf166 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf162:	2e10      	cmp	r6, #16
   bf164:	d117      	bne.n	bf196 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf166:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf168:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf16a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf16c:	2506      	movs	r5, #6
                        };
   bf16e:	f88d 3015 	strb.w	r3, [sp, #21]
   bf172:	9104      	str	r1, [sp, #16]
   bf174:	f88d 2014 	strb.w	r2, [sp, #20]
   bf178:	9006      	str	r0, [sp, #24]
   bf17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf17e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf180:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf184:	9508      	str	r5, [sp, #32]
   bf186:	e883 0003 	stmia.w	r3, {r0, r1}
   bf18a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf18c:	a906      	add	r1, sp, #24
   bf18e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf192:	4798      	blx	r3
   bf194:	e777      	b.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf196:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf198:	bf01      	itttt	eq
   bf19a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf19c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf19e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf1a2:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf1a4:	bf0f      	iteee	eq
   bf1a6:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf1aa:	461a      	movne	r2, r3
   bf1ac:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf1ae:	461d      	movne	r5, r3
   bf1b0:	e7dd      	b.n	bf16e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf1b2:	89a9      	ldrh	r1, [r5, #12]
   bf1b4:	4620      	mov	r0, r4
   bf1b6:	f7ff fb15 	bl	be7e4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf1ba:	4601      	mov	r1, r0
   bf1bc:	2800      	cmp	r0, #0
   bf1be:	f43f af62 	beq.w	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf1c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf1c4:	2b00      	cmp	r3, #0
   bf1c6:	f43f af5e 	beq.w	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf1ca:	686b      	ldr	r3, [r5, #4]
   bf1cc:	9306      	str	r3, [sp, #24]
   bf1ce:	aa06      	add	r2, sp, #24
   bf1d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf1d2:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf1d6:	4798      	blx	r3
   bf1d8:	e755      	b.n	bf086 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf1da:	bf00      	nop
   bf1dc:	000c7ca0 	.word	0x000c7ca0
   bf1e0:	000c7c1f 	.word	0x000c7c1f
   bf1e4:	000c7cc6 	.word	0x000c7cc6
   bf1e8:	000c7ce3 	.word	0x000c7ce3

000bf1ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf1ec:	b513      	push	{r0, r1, r4, lr}
   bf1ee:	460b      	mov	r3, r1
   bf1f0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf1f2:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf1f6:	466c      	mov	r4, sp
   bf1f8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf1fc:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf200:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf204:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf208:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf20c:	b002      	add	sp, #8
   bf20e:	bd10      	pop	{r4, pc}

000bf210 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf210:	b538      	push	{r3, r4, r5, lr}
   bf212:	4605      	mov	r5, r0
   bf214:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf216:	f7ff ffe9 	bl	bf1ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf21a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf21c:	68a2      	ldr	r2, [r4, #8]
   bf21e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf220:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf222:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf224:	68e2      	ldr	r2, [r4, #12]
   bf226:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf228:	60e3      	str	r3, [r4, #12]
      }
   bf22a:	bd38      	pop	{r3, r4, r5, pc}

000bf22c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf22c:	b570      	push	{r4, r5, r6, lr}
   bf22e:	4604      	mov	r4, r0
   bf230:	b08c      	sub	sp, #48	; 0x30
   bf232:	460e      	mov	r6, r1
   bf234:	9201      	str	r2, [sp, #4]
   bf236:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf238:	f7ff fab4 	bl	be7a4 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf23c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf23e:	9901      	ldr	r1, [sp, #4]
   bf240:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf244:	f002 fba3 	bl	c198e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf248:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf24c:	b1cd      	cbz	r5, bf282 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf24e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf250:	9502      	str	r5, [sp, #8]
   bf252:	a902      	add	r1, sp, #8
   bf254:	a804      	add	r0, sp, #16
   bf256:	9303      	str	r3, [sp, #12]
   bf258:	f7ff fcaa 	bl	bebb0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf25c:	2300      	movs	r3, #0
	__x.swap(*this);
   bf25e:	a908      	add	r1, sp, #32
   bf260:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf262:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf264:	f7ff ffd4 	bl	bf210 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf268:	4631      	mov	r1, r6
   bf26a:	a808      	add	r0, sp, #32
   bf26c:	f7ff ffd0 	bl	bf210 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf270:	a808      	add	r0, sp, #32
   bf272:	f7fa fa87 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   bf276:	a804      	add	r0, sp, #16
   bf278:	f7fa fa84 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
    }
   bf27c:	4620      	mov	r0, r4
   bf27e:	b00c      	add	sp, #48	; 0x30
   bf280:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf282:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf284:	e7ea      	b.n	bf25c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf288 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf28c:	b087      	sub	sp, #28
   bf28e:	461d      	mov	r5, r3
   bf290:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf294:	4680      	mov	r8, r0
   bf296:	468b      	mov	fp, r1
   bf298:	4692      	mov	sl, r2
   bf29a:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf29c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf29e:	2200      	movs	r2, #0
   bf2a0:	2068      	movs	r0, #104	; 0x68
   bf2a2:	9102      	str	r1, [sp, #8]
   bf2a4:	9204      	str	r2, [sp, #16]
   bf2a6:	f7f4 fef6 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf2aa:	1e06      	subs	r6, r0, #0
   bf2ac:	f106 090c 	add.w	r9, r6, #12
   bf2b0:	d018      	beq.n	bf2e4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf2b2:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf2b4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf2b6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf2ba:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf2bc:	4a15      	ldr	r2, [pc, #84]	; (bf314 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf2be:	f847 2b20 	str.w	r2, [r7], #32
   bf2c2:	9b03      	ldr	r3, [sp, #12]
   bf2c4:	9100      	str	r1, [sp, #0]
   bf2c6:	465a      	mov	r2, fp
   bf2c8:	4651      	mov	r1, sl
   bf2ca:	4648      	mov	r0, r9
   bf2cc:	f7ff ffae 	bl	bf22c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf2d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf2d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf2d4:	682b      	ldr	r3, [r5, #0]
   bf2d6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf2d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf2da:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf2de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf2e0:	6823      	ldr	r3, [r4, #0]
   bf2e2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf2e4:	a904      	add	r1, sp, #16
   bf2e6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf2e8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf2ec:	f7ff fd10 	bl	bed10 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf2f0:	a805      	add	r0, sp, #20
   bf2f2:	f7ff fc9e 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf2f6:	f8d8 3000 	ldr.w	r3, [r8]
   bf2fa:	b93b      	cbnz	r3, bf30c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf2fc:	4a06      	ldr	r2, [pc, #24]	; (bf318 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf2fe:	4907      	ldr	r1, [pc, #28]	; (bf31c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf300:	200a      	movs	r0, #10
}
   bf302:	b007      	add	sp, #28
   bf304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf308:	f7fe bea8 	b.w	be05c <panic_>
}
   bf30c:	b007      	add	sp, #28
   bf30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf312:	bf00      	nop
   bf314:	000c7d5c 	.word	0x000c7d5c
   bf318:	000bdc8d 	.word	0x000bdc8d
   bf31c:	000c7c08 	.word	0x000c7c08

000bf320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf320:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf324:	4604      	mov	r4, r0
   bf326:	460d      	mov	r5, r1
   bf328:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf32a:	d914      	bls.n	bf356 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf32c:	4290      	cmp	r0, r2
   bf32e:	d213      	bcs.n	bf358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf330:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf334:	1a75      	subs	r5, r6, r1
   bf336:	f1a1 0708 	sub.w	r7, r1, #8
   bf33a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf33c:	42b7      	cmp	r7, r6
   bf33e:	d018      	beq.n	bf372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf340:	b11c      	cbz	r4, bf34a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf342:	4631      	mov	r1, r6
   bf344:	4620      	mov	r0, r4
   bf346:	f7ff fc60 	bl	bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf34a:	1d30      	adds	r0, r6, #4
   bf34c:	f7ff fc71 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf350:	3e08      	subs	r6, #8
   bf352:	3c08      	subs	r4, #8
   bf354:	e7f2      	b.n	bf33c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf356:	d00c      	beq.n	bf372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf358:	42b5      	cmp	r5, r6
   bf35a:	d00a      	beq.n	bf372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf35c:	b11c      	cbz	r4, bf366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf35e:	4629      	mov	r1, r5
   bf360:	4620      	mov	r0, r4
   bf362:	f7ff fc52 	bl	bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf366:	1d28      	adds	r0, r5, #4
   bf368:	f7ff fc63 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf36c:	3508      	adds	r5, #8
   bf36e:	3408      	adds	r4, #8
   bf370:	e7f2      	b.n	bf358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf374:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf376:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf378:	4605      	mov	r5, r0
        if (n > 0) {
   bf37a:	dd11      	ble.n	bf3a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf37c:	00f0      	lsls	r0, r6, #3
   bf37e:	f7fe ff7b 	bl	be278 <malloc>
            if (!d) {
   bf382:	4604      	mov	r4, r0
   bf384:	b158      	cbz	r0, bf39e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf386:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf38a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf38e:	f7ff ffc7 	bl	bf320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf392:	6828      	ldr	r0, [r5, #0]
   bf394:	f7fe ff78 	bl	be288 <free>
        data_ = d;
   bf398:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf39a:	60ae      	str	r6, [r5, #8]
        return true;
   bf39c:	2001      	movs	r0, #1
    }
   bf39e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf3a0:	2400      	movs	r4, #0
   bf3a2:	e7f6      	b.n	bf392 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf3a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf3a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf3a6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf3a8:	6845      	ldr	r5, [r0, #4]
   bf3aa:	4668      	mov	r0, sp
   bf3ac:	f7ff fc2d 	bl	bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf3b0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf3b4:	4299      	cmp	r1, r3
   bf3b6:	da10      	bge.n	bf3da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf3b8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf3ba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf3bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf3c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf3c4:	4629      	mov	r1, r5
   bf3c6:	f105 0008 	add.w	r0, r5, #8
   bf3ca:	f7ff ffa9 	bl	bf320 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf3ce:	b98d      	cbnz	r5, bf3f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf3d0:	6863      	ldr	r3, [r4, #4]
   bf3d2:	3301      	adds	r3, #1
   bf3d4:	6063      	str	r3, [r4, #4]
    return true;
   bf3d6:	2601      	movs	r6, #1
   bf3d8:	e006      	b.n	bf3e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf3da:	3101      	adds	r1, #1
   bf3dc:	4620      	mov	r0, r4
   bf3de:	f7ff ffc9 	bl	bf374 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf3e2:	4606      	mov	r6, r0
   bf3e4:	2800      	cmp	r0, #0
   bf3e6:	d1e7      	bne.n	bf3b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf3e8:	a801      	add	r0, sp, #4
   bf3ea:	f7ff fc22 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf3ee:	4630      	mov	r0, r6
   bf3f0:	b002      	add	sp, #8
   bf3f2:	bd70      	pop	{r4, r5, r6, pc}
   bf3f4:	4669      	mov	r1, sp
   bf3f6:	4628      	mov	r0, r5
   bf3f8:	f7ff fc07 	bl	bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf3fc:	e7e8      	b.n	bf3d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf3fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf3fe:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf402:	4604      	mov	r4, r0
   bf404:	460d      	mov	r5, r1
   bf406:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf408:	d914      	bls.n	bf434 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf40a:	4290      	cmp	r0, r2
   bf40c:	d213      	bcs.n	bf436 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf40e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf412:	1a75      	subs	r5, r6, r1
   bf414:	f1a1 0708 	sub.w	r7, r1, #8
   bf418:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf41a:	42b7      	cmp	r7, r6
   bf41c:	d018      	beq.n	bf450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf41e:	b11c      	cbz	r4, bf428 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf420:	4631      	mov	r1, r6
   bf422:	4620      	mov	r0, r4
   bf424:	f7ff fbe3 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf428:	1d30      	adds	r0, r6, #4
   bf42a:	f7ff fc02 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf42e:	3e08      	subs	r6, #8
   bf430:	3c08      	subs	r4, #8
   bf432:	e7f2      	b.n	bf41a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf434:	d00c      	beq.n	bf450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf436:	42b5      	cmp	r5, r6
   bf438:	d00a      	beq.n	bf450 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf43a:	b11c      	cbz	r4, bf444 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf43c:	4629      	mov	r1, r5
   bf43e:	4620      	mov	r0, r4
   bf440:	f7ff fbd5 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf444:	1d28      	adds	r0, r5, #4
   bf446:	f7ff fbf4 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf44a:	3508      	adds	r5, #8
   bf44c:	3408      	adds	r4, #8
   bf44e:	e7f2      	b.n	bf436 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf452 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf452:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf454:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf456:	4605      	mov	r5, r0
        if (n > 0) {
   bf458:	dd11      	ble.n	bf47e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf45a:	00f0      	lsls	r0, r6, #3
   bf45c:	f7fe ff0c 	bl	be278 <malloc>
            if (!d) {
   bf460:	4604      	mov	r4, r0
   bf462:	b158      	cbz	r0, bf47c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf464:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf468:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf46c:	f7ff ffc7 	bl	bf3fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf470:	6828      	ldr	r0, [r5, #0]
   bf472:	f7fe ff09 	bl	be288 <free>
        data_ = d;
   bf476:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf478:	60ae      	str	r6, [r5, #8]
        return true;
   bf47a:	2001      	movs	r0, #1
    }
   bf47c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf47e:	2400      	movs	r4, #0
   bf480:	e7f6      	b.n	bf470 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf482 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf482:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf484:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf486:	6845      	ldr	r5, [r0, #4]
   bf488:	4668      	mov	r0, sp
   bf48a:	f7ff fbb0 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf48e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf492:	4299      	cmp	r1, r3
   bf494:	da10      	bge.n	bf4b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf496:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf498:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf49a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf49e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf4a2:	4629      	mov	r1, r5
   bf4a4:	f105 0008 	add.w	r0, r5, #8
   bf4a8:	f7ff ffa9 	bl	bf3fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf4ac:	b98d      	cbnz	r5, bf4d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf4ae:	6863      	ldr	r3, [r4, #4]
   bf4b0:	3301      	adds	r3, #1
   bf4b2:	6063      	str	r3, [r4, #4]
    return true;
   bf4b4:	2601      	movs	r6, #1
   bf4b6:	e006      	b.n	bf4c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf4b8:	3101      	adds	r1, #1
   bf4ba:	4620      	mov	r0, r4
   bf4bc:	f7ff ffc9 	bl	bf452 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf4c0:	4606      	mov	r6, r0
   bf4c2:	2800      	cmp	r0, #0
   bf4c4:	d1e7      	bne.n	bf496 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf4c6:	a801      	add	r0, sp, #4
   bf4c8:	f7ff fbb3 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf4cc:	4630      	mov	r0, r6
   bf4ce:	b002      	add	sp, #8
   bf4d0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf4d2:	4669      	mov	r1, sp
   bf4d4:	4628      	mov	r0, r5
   bf4d6:	f7ff fb8a 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf4da:	e7e8      	b.n	bf4ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf4dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf4e0:	4617      	mov	r7, r2
   bf4e2:	b0a1      	sub	sp, #132	; 0x84
   bf4e4:	4680      	mov	r8, r0
    WiringBleLock lk;
   bf4e6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bf4e8:	460e      	mov	r6, r1
    WiringBleLock lk;
   bf4ea:	f7ff f823 	bl	be534 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bf4ee:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bf4f0:	7923      	ldrb	r3, [r4, #4]
   bf4f2:	b953      	cbnz	r3, bf50a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bf4f4:	4639      	mov	r1, r7
   bf4f6:	4640      	mov	r0, r8
   bf4f8:	f7ff fb79 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bf4fc:	a80a      	add	r0, sp, #40	; 0x28
   bf4fe:	f7ff f827 	bl	be550 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bf502:	4640      	mov	r0, r8
   bf504:	b021      	add	sp, #132	; 0x84
   bf506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bf50a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bf50c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bf510:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bf514:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bf516:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bf51a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bf51e:	9b03      	ldr	r3, [sp, #12]
   bf520:	429d      	cmp	r5, r3
   bf522:	d021      	beq.n	bf568 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bf524:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bf528:	4658      	mov	r0, fp
   bf52a:	f109 0114 	add.w	r1, r9, #20
   bf52e:	f7ff f8ae 	bl	be68e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bf532:	b1b8      	cbz	r0, bf564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bf534:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bf538:	4650      	mov	r0, sl
   bf53a:	f7ff f8a8 	bl	be68e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bf53e:	b188      	cbz	r0, bf564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bf540:	6823      	ldr	r3, [r4, #0]
   bf542:	f8d9 2000 	ldr.w	r2, [r9]
   bf546:	4053      	eors	r3, r2
   bf548:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bf54c:	d10a      	bne.n	bf564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bf54e:	2220      	movs	r2, #32
   bf550:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bf554:	4a5e      	ldr	r2, [pc, #376]	; (bf6d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bf556:	9200      	str	r2, [sp, #0]
   bf558:	aa15      	add	r2, sp, #84	; 0x54
   bf55a:	495e      	ldr	r1, [pc, #376]	; (bf6d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bf55c:	2032      	movs	r0, #50	; 0x32
   bf55e:	f7fe fd85 	bl	be06c <log_message>
   bf562:	e7c7      	b.n	bf4f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bf564:	3508      	adds	r5, #8
   bf566:	e7da      	b.n	bf51e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bf568:	4650      	mov	r0, sl
   bf56a:	f7ff f861 	bl	be630 <_ZNK8particle7BleUuid7isValidEv>
   bf56e:	b960      	cbnz	r0, bf58a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bf570:	4959      	ldr	r1, [pc, #356]	; (bf6d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bf572:	2201      	movs	r2, #1
   bf574:	a815      	add	r0, sp, #84	; 0x54
   bf576:	ad15      	add	r5, sp, #84	; 0x54
   bf578:	f7ff f832 	bl	be5e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bf57c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf57e:	46d4      	mov	ip, sl
   bf580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf584:	682b      	ldr	r3, [r5, #0]
   bf586:	f8cc 3000 	str.w	r3, [ip]
   bf58a:	6833      	ldr	r3, [r6, #0]
   bf58c:	e9d3 5300 	ldrd	r5, r3, [r3]
   bf590:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bf594:	455d      	cmp	r5, fp
   bf596:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bf598:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bf59a:	d06e      	beq.n	bf67a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bf59c:	f855 0b08 	ldr.w	r0, [r5], #8
   bf5a0:	f7ff f875 	bl	be68e <_ZNK8particle7BleUuideqERKS0_>
   bf5a4:	2800      	cmp	r0, #0
   bf5a6:	d0f5      	beq.n	bf594 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bf5a8:	f104 0a14 	add.w	sl, r4, #20
   bf5ac:	4650      	mov	r0, sl
   bf5ae:	f7ff f83f 	bl	be630 <_ZNK8particle7BleUuid7isValidEv>
   bf5b2:	b988      	cbnz	r0, bf5d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bf5b4:	4b49      	ldr	r3, [pc, #292]	; (bf6dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf5b6:	4948      	ldr	r1, [pc, #288]	; (bf6d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bf5b8:	881a      	ldrh	r2, [r3, #0]
   bf5ba:	3201      	adds	r2, #1
   bf5bc:	b292      	uxth	r2, r2
   bf5be:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf5c0:	a815      	add	r0, sp, #84	; 0x54
   bf5c2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bf5c4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bf5c6:	f7ff f82a 	bl	be61e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bf5ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf5cc:	46d4      	mov	ip, sl
   bf5ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bf5d2:	682b      	ldr	r3, [r5, #0]
   bf5d4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bf5d8:	4b41      	ldr	r3, [pc, #260]	; (bf6e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bf5da:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bf5dc:	2228      	movs	r2, #40	; 0x28
   bf5de:	2100      	movs	r1, #0
   bf5e0:	a816      	add	r0, sp, #88	; 0x58
   bf5e2:	f004 ffc1 	bl	c4568 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bf5e6:	4651      	mov	r1, sl
   bf5e8:	a804      	add	r0, sp, #16
   bf5ea:	f7ff f833 	bl	be654 <_ZN8particle7BleUuid7halUUIDEv>
   bf5ee:	ab04      	add	r3, sp, #16
   bf5f0:	aa18      	add	r2, sp, #96	; 0x60
   bf5f2:	f10d 0c20 	add.w	ip, sp, #32
   bf5f6:	6818      	ldr	r0, [r3, #0]
   bf5f8:	6859      	ldr	r1, [r3, #4]
   bf5fa:	4615      	mov	r5, r2
   bf5fc:	c503      	stmia	r5!, {r0, r1}
   bf5fe:	3308      	adds	r3, #8
   bf600:	4563      	cmp	r3, ip
   bf602:	462a      	mov	r2, r5
   bf604:	d1f7      	bne.n	bf5f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bf606:	6818      	ldr	r0, [r3, #0]
   bf608:	6028      	str	r0, [r5, #0]
    return value_;
   bf60a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bf60c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bf610:	f8d9 3000 	ldr.w	r3, [r9]
   bf614:	8a9b      	ldrh	r3, [r3, #20]
   bf616:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bf61a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf61c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bf61e:	4b31      	ldr	r3, [pc, #196]	; (bf6e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf620:	2200      	movs	r2, #0
   bf622:	1da1      	adds	r1, r4, #6
   bf624:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bf626:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bf62a:	f7fe faa7 	bl	bdb7c <hal_ble_gatt_server_add_characteristic>
   bf62e:	2800      	cmp	r0, #0
   bf630:	f47f af60 	bne.w	bf4f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bf634:	2301      	movs	r3, #1
   bf636:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bf638:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bf63a:	4639      	mov	r1, r7
        return characteristics_;
   bf63c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bf63e:	a80d      	add	r0, sp, #52	; 0x34
   bf640:	f7ff fad5 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf644:	4620      	mov	r0, r4
   bf646:	a90d      	add	r1, sp, #52	; 0x34
   bf648:	f7ff ff1b 	bl	bf482 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bf64c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf64e:	a80e      	add	r0, sp, #56	; 0x38
   bf650:	f7ff faef 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf654:	2c00      	cmp	r4, #0
   bf656:	f47f af4d 	bne.w	bf4f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bf65a:	2320      	movs	r3, #32
   bf65c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bf660:	4b21      	ldr	r3, [pc, #132]	; (bf6e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bf662:	9300      	str	r3, [sp, #0]
   bf664:	aa0d      	add	r2, sp, #52	; 0x34
   bf666:	4623      	mov	r3, r4
   bf668:	e777      	b.n	bf55a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bf66a:	4639      	mov	r1, r7
   bf66c:	4640      	mov	r0, r8
   bf66e:	f7ff fabe 	bl	bebee <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf672:	a80c      	add	r0, sp, #48	; 0x30
   bf674:	f7ff fadd 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf678:	e740      	b.n	bf4fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bf67a:	a80b      	add	r0, sp, #44	; 0x2c
   bf67c:	f7ff f924 	bl	be8c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bf680:	4651      	mov	r1, sl
   bf682:	a815      	add	r0, sp, #84	; 0x54
   bf684:	f7fe ffe6 	bl	be654 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bf688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bf68a:	2300      	movs	r3, #0
   bf68c:	3214      	adds	r2, #20
   bf68e:	a915      	add	r1, sp, #84	; 0x54
   bf690:	2001      	movs	r0, #1
   bf692:	f7fe fa4b 	bl	bdb2c <hal_ble_gatt_server_add_service>
   bf696:	2800      	cmp	r0, #0
   bf698:	d1e7      	bne.n	bf66a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bf69a:	6835      	ldr	r5, [r6, #0]
   bf69c:	a90b      	add	r1, sp, #44	; 0x2c
   bf69e:	a80d      	add	r0, sp, #52	; 0x34
   bf6a0:	f7ff fab3 	bl	bec0a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bf6a4:	4628      	mov	r0, r5
   bf6a6:	a90d      	add	r1, sp, #52	; 0x34
   bf6a8:	f7ff fe7c 	bl	bf3a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bf6ac:	4605      	mov	r5, r0
   bf6ae:	a80e      	add	r0, sp, #56	; 0x38
   bf6b0:	f7ff fabf 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6b4:	2d00      	cmp	r5, #0
   bf6b6:	d0d8      	beq.n	bf66a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bf6b8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bf6ba:	6853      	ldr	r3, [r2, #4]
   bf6bc:	6812      	ldr	r2, [r2, #0]
   bf6be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bf6c2:	3b01      	subs	r3, #1
   bf6c4:	a80c      	add	r0, sp, #48	; 0x30
   bf6c6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bf6ca:	f7ff fab2 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf6ce:	e76b      	b.n	bf5a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bf6d0:	000c7d02 	.word	0x000c7d02
   bf6d4:	000c7c1f 	.word	0x000c7c1f
   bf6d8:	000c7dc6 	.word	0x000c7dc6
   bf6dc:	2003e620 	.word	0x2003e620
   bf6e0:	002c0003 	.word	0x002c0003
   bf6e4:	000bea61 	.word	0x000bea61
   bf6e8:	000c7d2d 	.word	0x000c7d2d

000bf6ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bf6ec:	4802      	ldr	r0, [pc, #8]	; (bf6f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bf6ee:	2300      	movs	r3, #0
   bf6f0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bf6f2:	f7fe ba9b 	b.w	bdc2c <os_mutex_recursive_create>
   bf6f6:	bf00      	nop
   bf6f8:	2003e624 	.word	0x2003e624

000bf6fc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bf6fc:	2200      	movs	r2, #0
   bf6fe:	6840      	ldr	r0, [r0, #4]
   bf700:	4611      	mov	r1, r2
   bf702:	f7fe bd71 	b.w	be1e8 <network_ready>

000bf706 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bf706:	2200      	movs	r2, #0
   bf708:	6840      	ldr	r0, [r0, #4]
   bf70a:	4611      	mov	r1, r2
   bf70c:	f7fe bd8c 	b.w	be228 <network_listening>

000bf710 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bf710:	2200      	movs	r2, #0
   bf712:	6840      	ldr	r0, [r0, #4]
   bf714:	4611      	mov	r1, r2
   bf716:	f7fe bd97 	b.w	be248 <network_get_listen_timeout>

000bf71a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bf71a:	6840      	ldr	r0, [r0, #4]
   bf71c:	2200      	movs	r2, #0
   bf71e:	f7fe bd8b 	b.w	be238 <network_set_listen_timeout>

000bf722 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bf722:	6840      	ldr	r0, [r0, #4]
   bf724:	2200      	movs	r2, #0
   bf726:	f081 0101 	eor.w	r1, r1, #1
   bf72a:	f7fe bd75 	b.w	be218 <network_listen>

000bf72e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bf72e:	2300      	movs	r3, #0
   bf730:	6840      	ldr	r0, [r0, #4]
   bf732:	461a      	mov	r2, r3
   bf734:	4619      	mov	r1, r3
   bf736:	f7fe bd67 	b.w	be208 <network_off>

000bf73a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bf73a:	2300      	movs	r3, #0
   bf73c:	6840      	ldr	r0, [r0, #4]
   bf73e:	461a      	mov	r2, r3
   bf740:	4619      	mov	r1, r3
   bf742:	f7fe bd59 	b.w	be1f8 <network_on>

000bf746 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bf746:	2200      	movs	r2, #0
   bf748:	6840      	ldr	r0, [r0, #4]
   bf74a:	4611      	mov	r1, r2
   bf74c:	f7fe bd3c 	b.w	be1c8 <network_connecting>

000bf750 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bf750:	6840      	ldr	r0, [r0, #4]
   bf752:	2200      	movs	r2, #0
   bf754:	2102      	movs	r1, #2
   bf756:	f7fe bd3f 	b.w	be1d8 <network_disconnect>

000bf75a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bf75a:	2300      	movs	r3, #0
   bf75c:	6840      	ldr	r0, [r0, #4]
   bf75e:	461a      	mov	r2, r3
   bf760:	f7fe bd2a 	b.w	be1b8 <network_connect>

000bf764 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bf764:	4b08      	ldr	r3, [pc, #32]	; (bf788 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bf766:	b510      	push	{r4, lr}
   bf768:	2428      	movs	r4, #40	; 0x28
   bf76a:	4622      	mov	r2, r4
   bf76c:	4618      	mov	r0, r3
   bf76e:	2100      	movs	r1, #0
   bf770:	f004 fefa 	bl	c4568 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bf774:	4b05      	ldr	r3, [pc, #20]	; (bf78c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bf776:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bf778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf77c:	6042      	str	r2, [r0, #4]
   bf77e:	2204      	movs	r2, #4
   bf780:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bf782:	4a03      	ldr	r2, [pc, #12]	; (bf790 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bf784:	601a      	str	r2, [r3, #0]
   bf786:	bd10      	pop	{r4, pc}
   bf788:	2003e634 	.word	0x2003e634
   bf78c:	2003e62c 	.word	0x2003e62c
   bf790:	000c7df0 	.word	0x000c7df0

000bf794 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf794:	4770      	bx	lr

000bf796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bf796:	2000      	movs	r0, #0
   bf798:	4770      	bx	lr

000bf79a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bf79a:	b510      	push	{r4, lr}
   bf79c:	2110      	movs	r1, #16
   bf79e:	4604      	mov	r4, r0
   bf7a0:	f7f4 fc7f 	bl	b40a2 <_ZdlPvj>
   bf7a4:	4620      	mov	r0, r4
   bf7a6:	bd10      	pop	{r4, pc}

000bf7a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bf7a8:	b508      	push	{r3, lr}
      { delete this; }
   bf7aa:	f7ff fff6 	bl	bf79a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bf7ae:	bd08      	pop	{r3, pc}

000bf7b0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bf7b0:	b530      	push	{r4, r5, lr}
        type_(type) {
   bf7b2:	2200      	movs	r2, #0
   bf7b4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bf7b8:	6002      	str	r2, [r0, #0]
   bf7ba:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf7bc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7be:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bf7c0:	680c      	ldr	r4, [r1, #0]
   bf7c2:	8085      	strh	r5, [r0, #4]
   bf7c4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf7c6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bf7c8:	bd30      	pop	{r4, r5, pc}

000bf7ca <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bf7ca:	b510      	push	{r4, lr}
   bf7cc:	4604      	mov	r4, r0
    free((void*)msg_);
   bf7ce:	6800      	ldr	r0, [r0, #0]
   bf7d0:	f7fe fd5a 	bl	be288 <free>
}
   bf7d4:	4620      	mov	r0, r4
   bf7d6:	bd10      	pop	{r4, pc}

000bf7d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf7d8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bf7da:	68c4      	ldr	r4, [r0, #12]
   bf7dc:	b1f4      	cbz	r4, bf81c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bf7de:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bf7e0:	2b02      	cmp	r3, #2
   bf7e2:	d103      	bne.n	bf7ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bf7e4:	f104 000c 	add.w	r0, r4, #12
   bf7e8:	f7ff ffef 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bf7ec:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bf7ee:	b135      	cbz	r5, bf7fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bf7f0:	4628      	mov	r0, r5
   bf7f2:	f7f9 ffc7 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   bf7f6:	2110      	movs	r1, #16
   bf7f8:	4628      	mov	r0, r5
   bf7fa:	f7f4 fc52 	bl	b40a2 <_ZdlPvj>
   bf7fe:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bf800:	b135      	cbz	r5, bf810 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bf802:	4628      	mov	r0, r5
   bf804:	f7f9 ffbe 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
   bf808:	2110      	movs	r1, #16
   bf80a:	4628      	mov	r0, r5
   bf80c:	f7f4 fc49 	bl	b40a2 <_ZdlPvj>
   bf810:	4620      	mov	r0, r4
   bf812:	2114      	movs	r1, #20
   bf814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bf818:	f7f4 bc43 	b.w	b40a2 <_ZdlPvj>
   bf81c:	bd38      	pop	{r3, r4, r5, pc}

000bf81e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   bf81e:	b510      	push	{r4, lr}
   bf820:	b088      	sub	sp, #32
   bf822:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   bf824:	4668      	mov	r0, sp
   bf826:	f002 f85c 	bl	c18e2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   bf82a:	4669      	mov	r1, sp
   bf82c:	a804      	add	r0, sp, #16
   bf82e:	f002 f8a3 	bl	c1978 <_ZN6StringC1ERKS_>
   bf832:	a804      	add	r0, sp, #16
   bf834:	47a0      	blx	r4
   bf836:	4604      	mov	r4, r0
   bf838:	a804      	add	r0, sp, #16
   bf83a:	f002 f807 	bl	c184c <_ZN6StringD1Ev>
    String p(param);
   bf83e:	4668      	mov	r0, sp
   bf840:	f002 f804 	bl	c184c <_ZN6StringD1Ev>
}
   bf844:	4620      	mov	r0, r4
   bf846:	b008      	add	sp, #32
   bf848:	bd10      	pop	{r4, pc}

000bf84a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bf84a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bf84c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bf84e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bf852:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bf854:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bf856:	461a      	mov	r2, r3
   bf858:	4669      	mov	r1, sp
   bf85a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bf85c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bf860:	f8ad 4000 	strh.w	r4, [sp]
   bf864:	f7fe fc70 	bl	be148 <spark_function>
}
   bf868:	b004      	add	sp, #16
   bf86a:	bd10      	pop	{r4, pc}

000bf86c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf86c:	680b      	ldr	r3, [r1, #0]
   bf86e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bf870:	684b      	ldr	r3, [r1, #4]
   bf872:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bf874:	b113      	cbz	r3, bf87c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bf876:	685a      	ldr	r2, [r3, #4]
   bf878:	3201      	adds	r2, #1
   bf87a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf87c:	4770      	bx	lr

000bf87e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bf87e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf880:	4604      	mov	r4, r0
   bf882:	4668      	mov	r0, sp
   bf884:	460d      	mov	r5, r1
   bf886:	f7ff fff1 	bl	bf86c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf88a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf88c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bf88e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bf890:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bf892:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bf894:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bf896:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bf898:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bf89a:	f7ff f9ca 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bf89e:	b135      	cbz	r5, bf8ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bf8a0:	1d28      	adds	r0, r5, #4
   bf8a2:	f7ff f9c6 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf8a6:	2108      	movs	r1, #8
   bf8a8:	4628      	mov	r0, r5
   bf8aa:	f7f4 fbfa 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   bf8ae:	4620      	mov	r0, r4
   bf8b0:	b003      	add	sp, #12
   bf8b2:	bd30      	pop	{r4, r5, pc}

000bf8b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bf8b4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf8b6:	b510      	push	{r4, lr}
      if (_M_empty())
   bf8b8:	b90a      	cbnz	r2, bf8be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bf8ba:	f002 fc2f 	bl	c211c <_ZSt25__throw_bad_function_callv>
    }
   bf8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf8c2:	68c3      	ldr	r3, [r0, #12]
   bf8c4:	4718      	bx	r3

000bf8c6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf8c6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf8c8:	6800      	ldr	r0, [r0, #0]
   bf8ca:	f100 0110 	add.w	r1, r0, #16
   bf8ce:	f7ff fff1 	bl	bf8b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bf8d2:	bd08      	pop	{r3, pc}

000bf8d4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bf8d4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf8d6:	b510      	push	{r4, lr}
      if (_M_empty())
   bf8d8:	b90a      	cbnz	r2, bf8de <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bf8da:	f002 fc1f 	bl	c211c <_ZSt25__throw_bad_function_callv>
    }
   bf8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf8e2:	68c3      	ldr	r3, [r0, #12]
   bf8e4:	4718      	bx	r3

000bf8e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bf8e6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bf8e8:	6800      	ldr	r0, [r0, #0]
   bf8ea:	f100 0110 	add.w	r1, r0, #16
   bf8ee:	f7ff fff1 	bl	bf8d4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bf8f2:	bd08      	pop	{r3, pc}

000bf8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bf8f4:	b538      	push	{r3, r4, r5, lr}
   bf8f6:	2300      	movs	r3, #0
   bf8f8:	4604      	mov	r4, r0
   bf8fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf8fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bf8fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf900:	f7f4 fbc9 	bl	b4096 <_Znwj>
   bf904:	b128      	cbz	r0, bf912 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bf906:	2301      	movs	r3, #1
   bf908:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bf90c:	4b02      	ldr	r3, [pc, #8]	; (bf918 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bf90e:	6003      	str	r3, [r0, #0]
   bf910:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bf912:	6020      	str	r0, [r4, #0]
	}
   bf914:	4620      	mov	r0, r4
   bf916:	bd38      	pop	{r3, r4, r5, pc}
   bf918:	000c7e2c 	.word	0x000c7e2c

000bf91c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bf91c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf91e:	2300      	movs	r3, #0
   bf920:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bf922:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bf924:	4604      	mov	r4, r0
   bf926:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bf928:	b12b      	cbz	r3, bf936 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bf92a:	2202      	movs	r2, #2
   bf92c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bf92e:	68eb      	ldr	r3, [r5, #12]
   bf930:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bf932:	68ab      	ldr	r3, [r5, #8]
   bf934:	60a3      	str	r3, [r4, #8]
    }
   bf936:	4620      	mov	r0, r4
   bf938:	bd38      	pop	{r3, r4, r5, pc}
	...

000bf93c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bf93c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bf93e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bf940:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bf942:	4668      	mov	r0, sp
   bf944:	f7ff ff34 	bl	bf7b0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bf948:	f04f 0302 	mov.w	r3, #2
   bf94c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bf950:	2a00      	cmp	r2, #0
   bf952:	d103      	bne.n	bf95c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bf954:	e8c4 3f41 	strexb	r1, r3, [r4]
   bf958:	2900      	cmp	r1, #0
   bf95a:	d1f7      	bne.n	bf94c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bf95c:	d125      	bne.n	bf9aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bf95e:	f104 050c 	add.w	r5, r4, #12
   bf962:	4669      	mov	r1, sp
   bf964:	4628      	mov	r0, r5
   bf966:	f7ff ff23 	bl	bf7b0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bf96a:	f3bf 8f5b 	dmb	ish
   bf96e:	2301      	movs	r3, #1
   bf970:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bf972:	2000      	movs	r0, #0
   bf974:	f104 0308 	add.w	r3, r4, #8
   bf978:	f3bf 8f5b 	dmb	ish
   bf97c:	e853 6f00 	ldrex	r6, [r3]
   bf980:	e843 0200 	strex	r2, r0, [r3]
   bf984:	2a00      	cmp	r2, #0
   bf986:	d1f9      	bne.n	bf97c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bf988:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bf98c:	b16e      	cbz	r6, bf9aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bf98e:	f7fe fba7 	bl	be0e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bf992:	b178      	cbz	r0, bf9b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bf994:	4629      	mov	r1, r5
   bf996:	4630      	mov	r0, r6
   bf998:	f7ff ff8c 	bl	bf8b4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bf99c:	4630      	mov	r0, r6
   bf99e:	f7f9 fef1 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bf9a2:	2110      	movs	r1, #16
   bf9a4:	4630      	mov	r0, r6
   bf9a6:	f7f4 fb7c 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   bf9aa:	4668      	mov	r0, sp
   bf9ac:	f7ff ff0d 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
    }
   bf9b0:	b009      	add	sp, #36	; 0x24
   bf9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bf9b4:	4631      	mov	r1, r6
   bf9b6:	a802      	add	r0, sp, #8
   bf9b8:	f7ff ffb0 	bl	bf91c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bf9bc:	68e0      	ldr	r0, [r4, #12]
   bf9be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bf9c2:	b108      	cbz	r0, bf9c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bf9c4:	f004 fe3e 	bl	c4644 <strdup>
        type_(type) {
   bf9c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bf9ca:	2010      	movs	r0, #16
   bf9cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bf9d0:	f7f4 fb61 	bl	b4096 <_Znwj>
   bf9d4:	4605      	mov	r5, r0
   bf9d6:	b1e8      	cbz	r0, bfa14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bf9d8:	2700      	movs	r7, #0
   bf9da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf9dc:	2018      	movs	r0, #24
   bf9de:	f7f4 fb5a 	bl	b4096 <_Znwj>
   bf9e2:	4604      	mov	r4, r0
   bf9e4:	b188      	cbz	r0, bfa0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bf9e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bf9e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bf9ea:	a802      	add	r0, sp, #8
   bf9ec:	f7ff fbfe 	bl	bf1ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf9f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bf9f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf9f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf9f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bf9f8:	9204      	str	r2, [sp, #16]
   bf9fa:	a906      	add	r1, sp, #24
   bf9fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf9fe:	60e3      	str	r3, [r4, #12]
   bfa00:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bfa04:	9205      	str	r2, [sp, #20]
   bfa06:	f7ff fed3 	bl	bf7b0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bfa0a:	4b08      	ldr	r3, [pc, #32]	; (bfa2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bfa0c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfa0e:	4b08      	ldr	r3, [pc, #32]	; (bfa30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfa10:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfa12:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bfa14:	a806      	add	r0, sp, #24
   bfa16:	f7ff fed8 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfa1a:	a802      	add	r0, sp, #8
   bfa1c:	f7f9 feb2 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfa20:	2200      	movs	r2, #0
   bfa22:	4629      	mov	r1, r5
   bfa24:	4803      	ldr	r0, [pc, #12]	; (bfa34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bfa26:	f7fe fb63 	bl	be0f0 <application_thread_invoke>
   bfa2a:	e7b7      	b.n	bf99c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bfa2c:	000bf8c7 	.word	0x000bf8c7
   bfa30:	000bfb49 	.word	0x000bfb49
   bfa34:	000be367 	.word	0x000be367

000bfa38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bfa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa3c:	b08b      	sub	sp, #44	; 0x2c
   bfa3e:	4605      	mov	r5, r0
   bfa40:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bfa44:	460f      	mov	r7, r1
   bfa46:	4690      	mov	r8, r2
   bfa48:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfa4a:	f7fe fb8d 	bl	be168 <spark_cloud_flag_connected>
   bfa4e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bfa50:	4683      	mov	fp, r0
   bfa52:	bb38      	cbnz	r0, bfaa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bfa54:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bfa58:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfa5a:	a905      	add	r1, sp, #20
   bfa5c:	4630      	mov	r0, r6
   bfa5e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfa62:	f7ff fea5 	bl	bf7b0 <_ZN8particle5ErrorC1EOS0_>
   bfa66:	2014      	movs	r0, #20
   bfa68:	f7f4 fb15 	bl	b4096 <_Znwj>
   bfa6c:	4604      	mov	r4, r0
   bfa6e:	b148      	cbz	r0, bfa84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bfa70:	2302      	movs	r3, #2
   bfa72:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfa74:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfa76:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfa7a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bfa7c:	4631      	mov	r1, r6
   bfa7e:	300c      	adds	r0, #12
   bfa80:	f7ff fe96 	bl	bf7b0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfa84:	4628      	mov	r0, r5
	: __shared_count(__p)
   bfa86:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfa88:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bfa8c:	f7ff ff32 	bl	bf8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bfa90:	4630      	mov	r0, r6
   bfa92:	f7ff fe9a 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bfa96:	a805      	add	r0, sp, #20
   bfa98:	f7ff fe97 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bfa9c:	4628      	mov	r0, r5
   bfa9e:	b00b      	add	sp, #44	; 0x2c
   bfaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bfaa4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bfaa6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bfaa8:	2014      	movs	r0, #20
   bfaaa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bfaae:	9307      	str	r3, [sp, #28]
   bfab0:	f7f4 faf1 	bl	b4096 <_Znwj>
   bfab4:	4601      	mov	r1, r0
   bfab6:	b118      	cbz	r0, bfac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bfab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bfabc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bfabe:	7044      	strb	r4, [r0, #1]
   bfac0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bfac2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bfac4:	f7ff ff16 	bl	bf8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bfac8:	4b1e      	ldr	r3, [pc, #120]	; (bfb44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bfaca:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bfacc:	2008      	movs	r0, #8
   bface:	f7f4 fae2 	bl	b4096 <_Znwj>
   bfad2:	4604      	mov	r4, r0
   bfad4:	b110      	cbz	r0, bfadc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bfad6:	a903      	add	r1, sp, #12
   bfad8:	f7ff fec8 	bl	bf86c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfadc:	9600      	str	r6, [sp, #0]
   bfade:	fa5f f38a 	uxtb.w	r3, sl
   bfae2:	464a      	mov	r2, r9
   bfae4:	4641      	mov	r1, r8
   bfae6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bfae8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bfaea:	f7fe fb45 	bl	be178 <spark_send_event>
   bfaee:	b9b8      	cbnz	r0, bfb20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bfaf0:	9b03      	ldr	r3, [sp, #12]
   bfaf2:	785b      	ldrb	r3, [r3, #1]
   bfaf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bfaf8:	b993      	cbnz	r3, bfb20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bfafa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bfafe:	a905      	add	r1, sp, #20
   bfb00:	a803      	add	r0, sp, #12
   bfb02:	9205      	str	r2, [sp, #20]
   bfb04:	f8ad 3018 	strh.w	r3, [sp, #24]
   bfb08:	f7ff ff18 	bl	bf93c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfb0c:	a805      	add	r0, sp, #20
   bfb0e:	f7ff fe5c 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bfb12:	a805      	add	r0, sp, #20
   bfb14:	9909      	ldr	r1, [sp, #36]	; 0x24
   bfb16:	f7ff feb2 	bl	bf87e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bfb1a:	a806      	add	r0, sp, #24
   bfb1c:	f7ff f889 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb20:	a903      	add	r1, sp, #12
   bfb22:	a805      	add	r0, sp, #20
   bfb24:	f7ff fea2 	bl	bf86c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfb28:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bfb2a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bfb2c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bfb2e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bfb30:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bfb32:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bfb34:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bfb36:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bfb38:	f7ff f87b 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb3c:	a804      	add	r0, sp, #16
   bfb3e:	f7ff f878 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bfb42:	e7ab      	b.n	bfa9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bfb44:	000bfbc5 	.word	0x000bfbc5

000bfb48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bfb48:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfb4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfb4c:	4605      	mov	r5, r0
	switch (__op)
   bfb4e:	d103      	bne.n	bfb58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfb50:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfb52:	6003      	str	r3, [r0, #0]
      }
   bfb54:	2000      	movs	r0, #0
   bfb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bfb58:	2a02      	cmp	r2, #2
   bfb5a:	d010      	beq.n	bfb7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bfb5c:	2a03      	cmp	r2, #3
   bfb5e:	d1f9      	bne.n	bfb54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfb60:	6804      	ldr	r4, [r0, #0]
   bfb62:	2c00      	cmp	r4, #0
   bfb64:	d0f6      	beq.n	bfb54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bfb66:	f104 0010 	add.w	r0, r4, #16
   bfb6a:	f7ff fe2e 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bfb6e:	4620      	mov	r0, r4
   bfb70:	f7f9 fe08 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfb74:	2118      	movs	r1, #24
   bfb76:	4620      	mov	r0, r4
   bfb78:	f7f4 fa93 	bl	b40a2 <_ZdlPvj>
   bfb7c:	e7ea      	b.n	bfb54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfb7e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bfb80:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfb82:	f7f4 fa88 	bl	b4096 <_Znwj>
   bfb86:	4604      	mov	r4, r0
   bfb88:	b150      	cbz	r0, bfba0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bfb8a:	4631      	mov	r1, r6
   bfb8c:	f7ff fec6 	bl	bf91c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bfb90:	6930      	ldr	r0, [r6, #16]
   bfb92:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfb96:	b108      	cbz	r0, bfb9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bfb98:	f004 fd54 	bl	c4644 <strdup>
        type_(type) {
   bfb9c:	6120      	str	r0, [r4, #16]
   bfb9e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bfba0:	602c      	str	r4, [r5, #0]
	}
   bfba2:	e7d7      	b.n	bfb54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bfba4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bfba4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bfba6:	2300      	movs	r3, #0
   bfba8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bfbaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bfbac:	4604      	mov	r4, r0
   bfbae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bfbb0:	b12b      	cbz	r3, bfbbe <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bfbb2:	2202      	movs	r2, #2
   bfbb4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bfbb6:	68eb      	ldr	r3, [r5, #12]
   bfbb8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bfbba:	68ab      	ldr	r3, [r5, #8]
   bfbbc:	60a3      	str	r3, [r4, #8]
    }
   bfbbe:	4620      	mov	r0, r4
   bfbc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bfbc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bfbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfbc6:	b089      	sub	sp, #36	; 0x24
   bfbc8:	4604      	mov	r4, r0
   bfbca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bfbcc:	a801      	add	r0, sp, #4
   bfbce:	4611      	mov	r1, r2
   bfbd0:	f7ff fe55 	bl	bf87e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bfbd4:	b1a4      	cbz	r4, bfc00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bfbd6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bfbd8:	b11d      	cbz	r5, bfbe2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bfbda:	4628      	mov	r0, r5
   bfbdc:	f004 fd32 	bl	c4644 <strdup>
   bfbe0:	4605      	mov	r5, r0
   bfbe2:	a801      	add	r0, sp, #4
   bfbe4:	a903      	add	r1, sp, #12
        type_(type) {
   bfbe6:	9503      	str	r5, [sp, #12]
   bfbe8:	f8ad 4010 	strh.w	r4, [sp, #16]
   bfbec:	f7ff fea6 	bl	bf93c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bfbf0:	a803      	add	r0, sp, #12
   bfbf2:	f7ff fdea 	bl	bf7ca <_ZN8particle5ErrorD1Ev>
   bfbf6:	a802      	add	r0, sp, #8
   bfbf8:	f7ff f81b 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bfbfc:	b009      	add	sp, #36	; 0x24
   bfbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bfc00:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bfc02:	2301      	movs	r3, #1
   bfc04:	e8d5 2f4f 	ldrexb	r2, [r5]
   bfc08:	2a00      	cmp	r2, #0
   bfc0a:	d103      	bne.n	bfc14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bfc0c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bfc10:	2900      	cmp	r1, #0
   bfc12:	d1f7      	bne.n	bfc04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bfc14:	d1ef      	bne.n	bfbf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bfc16:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bfc18:	f3bf 8f5b 	dmb	ish
   bfc1c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bfc1e:	1d2b      	adds	r3, r5, #4
   bfc20:	f3bf 8f5b 	dmb	ish
   bfc24:	e853 6f00 	ldrex	r6, [r3]
   bfc28:	e843 4200 	strex	r2, r4, [r3]
   bfc2c:	2a00      	cmp	r2, #0
   bfc2e:	d1f9      	bne.n	bfc24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bfc30:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bfc34:	2e00      	cmp	r6, #0
   bfc36:	d0de      	beq.n	bfbf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bfc38:	4620      	mov	r0, r4
   bfc3a:	f7fe fa51 	bl	be0e0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bfc3e:	4607      	mov	r7, r0
   bfc40:	b160      	cbz	r0, bfc5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bfc42:	f105 010c 	add.w	r1, r5, #12
   bfc46:	4630      	mov	r0, r6
   bfc48:	f7ff fe44 	bl	bf8d4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bfc4c:	4630      	mov	r0, r6
   bfc4e:	f7f9 fd99 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bfc52:	2110      	movs	r1, #16
   bfc54:	4630      	mov	r0, r6
   bfc56:	f7f4 fa24 	bl	b40a2 <_ZdlPvj>
   bfc5a:	e7cc      	b.n	bfbf6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bfc5c:	4631      	mov	r1, r6
   bfc5e:	a803      	add	r0, sp, #12
   bfc60:	f7ff ffa0 	bl	bfba4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bfc64:	7b2b      	ldrb	r3, [r5, #12]
   bfc66:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bfc6a:	2010      	movs	r0, #16
   bfc6c:	f7f4 fa13 	bl	b4096 <_Znwj>
   bfc70:	4605      	mov	r5, r0
   bfc72:	b1d0      	cbz	r0, bfcaa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bfc74:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfc76:	2014      	movs	r0, #20
   bfc78:	f7f4 fa0d 	bl	b4096 <_Znwj>
   bfc7c:	4604      	mov	r4, r0
   bfc7e:	b178      	cbz	r0, bfca0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bfc80:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bfc82:	4601      	mov	r1, r0
   bfc84:	a803      	add	r0, sp, #12
   bfc86:	f7ff fab1 	bl	bf1ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfc8a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bfc8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bfc8e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bfc90:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bfc92:	9205      	str	r2, [sp, #20]
   bfc94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bfc96:	60e3      	str	r3, [r4, #12]
   bfc98:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bfc9c:	9206      	str	r2, [sp, #24]
   bfc9e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bfca0:	4b06      	ldr	r3, [pc, #24]	; (bfcbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bfca2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bfca4:	4b06      	ldr	r3, [pc, #24]	; (bfcc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bfca6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bfca8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bfcaa:	a803      	add	r0, sp, #12
   bfcac:	f7f9 fd6a 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bfcb0:	2200      	movs	r2, #0
   bfcb2:	4629      	mov	r1, r5
   bfcb4:	4803      	ldr	r0, [pc, #12]	; (bfcc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bfcb6:	f7fe fa1b 	bl	be0f0 <application_thread_invoke>
   bfcba:	e7c7      	b.n	bfc4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bfcbc:	000bf8e7 	.word	0x000bf8e7
   bfcc0:	000bfcc9 	.word	0x000bfcc9
   bfcc4:	000be367 	.word	0x000be367

000bfcc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bfcc8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bfcca:	b570      	push	{r4, r5, r6, lr}
   bfccc:	4604      	mov	r4, r0
	switch (__op)
   bfcce:	d103      	bne.n	bfcd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bfcd0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bfcd2:	6003      	str	r3, [r0, #0]
      }
   bfcd4:	2000      	movs	r0, #0
   bfcd6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bfcd8:	2a02      	cmp	r2, #2
   bfcda:	d00c      	beq.n	bfcf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bfcdc:	2a03      	cmp	r2, #3
   bfcde:	d1f9      	bne.n	bfcd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bfce0:	6804      	ldr	r4, [r0, #0]
   bfce2:	2c00      	cmp	r4, #0
   bfce4:	d0f6      	beq.n	bfcd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bfce6:	4620      	mov	r0, r4
   bfce8:	f7f9 fd4c 	bl	b9784 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bfcec:	2114      	movs	r1, #20
   bfcee:	4620      	mov	r0, r4
   bfcf0:	f7f4 f9d7 	bl	b40a2 <_ZdlPvj>
   bfcf4:	e7ee      	b.n	bfcd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bfcf6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bfcf8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bfcfa:	f7f4 f9cc 	bl	b4096 <_Znwj>
   bfcfe:	4605      	mov	r5, r0
   bfd00:	b120      	cbz	r0, bfd0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bfd02:	4631      	mov	r1, r6
   bfd04:	f7ff ff4e 	bl	bfba4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bfd08:	7c33      	ldrb	r3, [r6, #16]
   bfd0a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bfd0c:	6025      	str	r5, [r4, #0]
	}
   bfd0e:	e7e1      	b.n	bfcd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bfd10 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bfd10:	2200      	movs	r2, #0
   bfd12:	6840      	ldr	r0, [r0, #4]
   bfd14:	4611      	mov	r1, r2
   bfd16:	f7fe ba87 	b.w	be228 <network_listening>

000bfd1a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bfd1a:	2200      	movs	r2, #0
   bfd1c:	6840      	ldr	r0, [r0, #4]
   bfd1e:	4611      	mov	r1, r2
   bfd20:	f7fe ba92 	b.w	be248 <network_get_listen_timeout>

000bfd24 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bfd24:	6840      	ldr	r0, [r0, #4]
   bfd26:	2200      	movs	r2, #0
   bfd28:	f7fe ba86 	b.w	be238 <network_set_listen_timeout>

000bfd2c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bfd2c:	6840      	ldr	r0, [r0, #4]
   bfd2e:	2200      	movs	r2, #0
   bfd30:	f081 0101 	eor.w	r1, r1, #1
   bfd34:	f7fe ba70 	b.w	be218 <network_listen>

000bfd38 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bfd38:	2300      	movs	r3, #0
   bfd3a:	6840      	ldr	r0, [r0, #4]
   bfd3c:	461a      	mov	r2, r3
   bfd3e:	4619      	mov	r1, r3
   bfd40:	f7fe ba62 	b.w	be208 <network_off>

000bfd44 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bfd44:	2300      	movs	r3, #0
   bfd46:	6840      	ldr	r0, [r0, #4]
   bfd48:	461a      	mov	r2, r3
   bfd4a:	4619      	mov	r1, r3
   bfd4c:	f7fe ba54 	b.w	be1f8 <network_on>

000bfd50 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bfd50:	2200      	movs	r2, #0
   bfd52:	6840      	ldr	r0, [r0, #4]
   bfd54:	4611      	mov	r1, r2
   bfd56:	f7fe ba47 	b.w	be1e8 <network_ready>

000bfd5a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bfd5a:	2200      	movs	r2, #0
   bfd5c:	6840      	ldr	r0, [r0, #4]
   bfd5e:	4611      	mov	r1, r2
   bfd60:	f7fe ba32 	b.w	be1c8 <network_connecting>

000bfd64 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bfd64:	6840      	ldr	r0, [r0, #4]
   bfd66:	2200      	movs	r2, #0
   bfd68:	2102      	movs	r1, #2
   bfd6a:	f7fe ba35 	b.w	be1d8 <network_disconnect>

000bfd6e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bfd6e:	2300      	movs	r3, #0
   bfd70:	6840      	ldr	r0, [r0, #4]
   bfd72:	461a      	mov	r2, r3
   bfd74:	f7fe ba20 	b.w	be1b8 <network_connect>

000bfd78 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bfd78:	4b02      	ldr	r3, [pc, #8]	; (bfd84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bfd7a:	2203      	movs	r2, #3
   bfd7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bfd7e:	4a02      	ldr	r2, [pc, #8]	; (bfd88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bfd80:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bfd82:	4770      	bx	lr
   bfd84:	2003e65c 	.word	0x2003e65c
   bfd88:	000c7e48 	.word	0x000c7e48

000bfd8c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bfd8c:	4770      	bx	lr

000bfd8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bfd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfd90:	4606      	mov	r6, r0
   bfd92:	4615      	mov	r5, r2
   bfd94:	460c      	mov	r4, r1
   bfd96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bfd98:	42bc      	cmp	r4, r7
   bfd9a:	d006      	beq.n	bfdaa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bfd9c:	6833      	ldr	r3, [r6, #0]
   bfd9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   bfda2:	689b      	ldr	r3, [r3, #8]
   bfda4:	4630      	mov	r0, r6
   bfda6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bfda8:	e7f6      	b.n	bfd98 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bfdaa:	4628      	mov	r0, r5
   bfdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfdae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bfdae:	7c00      	ldrb	r0, [r0, #16]
   bfdb0:	2200      	movs	r2, #0
   bfdb2:	f7fe b803 	b.w	bddbc <hal_i2c_write>

000bfdb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bfdb6:	7c00      	ldrb	r0, [r0, #16]
   bfdb8:	2100      	movs	r1, #0
   bfdba:	f7fe b807 	b.w	bddcc <hal_i2c_available>

000bfdbe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bfdbe:	7c00      	ldrb	r0, [r0, #16]
   bfdc0:	2100      	movs	r1, #0
   bfdc2:	f7fe b80b 	b.w	bdddc <hal_i2c_read>

000bfdc6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bfdc6:	7c00      	ldrb	r0, [r0, #16]
   bfdc8:	2100      	movs	r1, #0
   bfdca:	f7fe b80f 	b.w	bddec <hal_i2c_peek>

000bfdce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bfdce:	7c00      	ldrb	r0, [r0, #16]
   bfdd0:	2100      	movs	r1, #0
   bfdd2:	f7fe b813 	b.w	bddfc <hal_i2c_flush>

000bfdd6 <_ZN7TwoWireD0Ev>:
   bfdd6:	b510      	push	{r4, lr}
   bfdd8:	2114      	movs	r1, #20
   bfdda:	4604      	mov	r4, r0
   bfddc:	f7f4 f961 	bl	b40a2 <_ZdlPvj>
   bfde0:	4620      	mov	r0, r4
   bfde2:	bd10      	pop	{r4, pc}

000bfde4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bfde4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bfde6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bfdea:	4604      	mov	r4, r0
   bfdec:	4608      	mov	r0, r1
   bfdee:	2100      	movs	r1, #0
   bfdf0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bfdf4:	4b03      	ldr	r3, [pc, #12]	; (bfe04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bfdf6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bfdf8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bfdfa:	4611      	mov	r1, r2
   bfdfc:	f7fe f80e 	bl	bde1c <hal_i2c_init>
}
   bfe00:	4620      	mov	r0, r4
   bfe02:	bd10      	pop	{r4, pc}
   bfe04:	000c7e84 	.word	0x000c7e84

000bfe08 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bfe08:	7c00      	ldrb	r0, [r0, #16]
   bfe0a:	2200      	movs	r2, #0
   bfe0c:	f7fd bfb6 	b.w	bdd7c <hal_i2c_set_speed>

000bfe10 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bfe10:	2300      	movs	r3, #0
   bfe12:	7c00      	ldrb	r0, [r0, #16]
   bfe14:	461a      	mov	r2, r3
   bfe16:	4619      	mov	r1, r3
   bfe18:	f7fd bfb8 	b.w	bdd8c <hal_i2c_begin>

000bfe1c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bfe1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bfe1e:	2200      	movs	r2, #0
   bfe20:	2314      	movs	r3, #20
   bfe22:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bfe26:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bfe2a:	780b      	ldrb	r3, [r1, #0]
   bfe2c:	f88d 3008 	strb.w	r3, [sp, #8]
   bfe30:	684b      	ldr	r3, [r1, #4]
   bfe32:	9303      	str	r3, [sp, #12]
   bfe34:	68cb      	ldr	r3, [r1, #12]
   bfe36:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bfe38:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bfe3a:	7a0b      	ldrb	r3, [r1, #8]
   bfe3c:	9305      	str	r3, [sp, #20]
   bfe3e:	a901      	add	r1, sp, #4
   bfe40:	f7fd fff4 	bl	bde2c <hal_i2c_request_ex>
}
   bfe44:	b007      	add	sp, #28
   bfe46:	f85d fb04 	ldr.w	pc, [sp], #4

000bfe4a <_ZN7TwoWire11requestFromEhjh>:
{
   bfe4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bfe4c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bfe4e:	f88d 1000 	strb.w	r1, [sp]
   bfe52:	f04f 0164 	mov.w	r1, #100	; 0x64
   bfe56:	9103      	str	r1, [sp, #12]
   bfe58:	bf18      	it	ne
   bfe5a:	2301      	movne	r3, #1
   bfe5c:	4669      	mov	r1, sp
    size_ = size;
   bfe5e:	9201      	str	r2, [sp, #4]
   bfe60:	f88d 3008 	strb.w	r3, [sp, #8]
   bfe64:	f7ff ffda 	bl	bfe1c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bfe68:	b005      	add	sp, #20
   bfe6a:	f85d fb04 	ldr.w	pc, [sp], #4

000bfe6e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   bfe6e:	2301      	movs	r3, #1
   bfe70:	f7ff bfeb 	b.w	bfe4a <_ZN7TwoWire11requestFromEhjh>

000bfe74 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bfe74:	7c00      	ldrb	r0, [r0, #16]
   bfe76:	2200      	movs	r2, #0
   bfe78:	f7fd bf90 	b.w	bdd9c <hal_i2c_begin_transmission>

000bfe7c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bfe7c:	b2c9      	uxtb	r1, r1
   bfe7e:	f7ff bff9 	b.w	bfe74 <_ZN7TwoWire17beginTransmissionEh>

000bfe82 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bfe82:	7c00      	ldrb	r0, [r0, #16]
   bfe84:	2200      	movs	r2, #0
   bfe86:	f7fd bf91 	b.w	bddac <hal_i2c_end_transmission>

000bfe8a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bfe8a:	2101      	movs	r1, #1
   bfe8c:	f7ff bff9 	b.w	bfe82 <_ZN7TwoWire15endTransmissionEh>

000bfe90 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bfe90:	4700      	bx	r0
	...

000bfe94 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bfe94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bfe98:	2400      	movs	r4, #0
{
   bfe9a:	461d      	mov	r5, r3
   bfe9c:	460f      	mov	r7, r1
   bfe9e:	4690      	mov	r8, r2
   bfea0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bfea2:	f7fd ff4b 	bl	bdd3c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bfea6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bfea8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bfeac:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bfeb0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bfeb4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bfeb8:	bfa2      	ittt	ge
   bfeba:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bfebe:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bfec2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bfec4:	4907      	ldr	r1, [pc, #28]	; (bfee4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bfec6:	9400      	str	r4, [sp, #0]
   bfec8:	4643      	mov	r3, r8
   bfeca:	463a      	mov	r2, r7
   bfecc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bfece:	bfa8      	it	ge
   bfed0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bfed4:	f7fd ff2a 	bl	bdd2c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bfed8:	fab0 f080 	clz	r0, r0
   bfedc:	0940      	lsrs	r0, r0, #5
   bfede:	b004      	add	sp, #16
   bfee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfee4:	000bfe91 	.word	0x000bfe91

000bfee8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bfee8:	f7fd bf38 	b.w	bdd5c <HAL_Interrupts_Disable_All>

000bfeec <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bfeec:	f7fd bf2e 	b.w	bdd4c <HAL_Interrupts_Enable_All>

000bfef0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bfef0:	4770      	bx	lr

000bfef2 <_ZN9IPAddressD0Ev>:
   bfef2:	b510      	push	{r4, lr}
   bfef4:	2118      	movs	r1, #24
   bfef6:	4604      	mov	r4, r0
   bfef8:	f7f4 f8d3 	bl	b40a2 <_ZdlPvj>
   bfefc:	4620      	mov	r0, r4
   bfefe:	bd10      	pop	{r4, pc}

000bff00 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bff00:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bff02:	7d03      	ldrb	r3, [r0, #20]
   bff04:	2b06      	cmp	r3, #6
{
   bff06:	b08d      	sub	sp, #52	; 0x34
   bff08:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bff0a:	f100 0704 	add.w	r7, r0, #4
   bff0e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bff12:	d012      	beq.n	bff3a <_ZNK9IPAddress7printToER5Print+0x3a>
   bff14:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bff18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bff1c:	220a      	movs	r2, #10
   bff1e:	4630      	mov	r0, r6
   bff20:	f001 fabd 	bl	c149e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bff24:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bff26:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bff28:	d019      	beq.n	bff5e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bff2a:	2c00      	cmp	r4, #0
   bff2c:	d0f4      	beq.n	bff18 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bff2e:	212e      	movs	r1, #46	; 0x2e
   bff30:	4630      	mov	r0, r6
   bff32:	f001 fa95 	bl	c1460 <_ZN5Print5printEc>
   bff36:	4404      	add	r4, r0
   bff38:	e7ee      	b.n	bff18 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bff3a:	232f      	movs	r3, #47	; 0x2f
   bff3c:	466a      	mov	r2, sp
   bff3e:	4639      	mov	r1, r7
   bff40:	200a      	movs	r0, #10
		buf[0] = 0;
   bff42:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bff46:	f7fd ff79 	bl	bde3c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bff4a:	4668      	mov	r0, sp
   bff4c:	f004 fb97 	bl	c467e <strlen>
   bff50:	6833      	ldr	r3, [r6, #0]
   bff52:	4602      	mov	r2, r0
   bff54:	68db      	ldr	r3, [r3, #12]
   bff56:	4669      	mov	r1, sp
   bff58:	4630      	mov	r0, r6
   bff5a:	4798      	blx	r3
   bff5c:	4604      	mov	r4, r0
    }
    return n;
}
   bff5e:	4620      	mov	r0, r4
   bff60:	b00d      	add	sp, #52	; 0x34
   bff62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bff64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bff64:	b510      	push	{r4, lr}
   bff66:	4b05      	ldr	r3, [pc, #20]	; (bff7c <_ZN9IPAddressC1Ev+0x18>)
   bff68:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bff6a:	2211      	movs	r2, #17
   bff6c:	f840 3b04 	str.w	r3, [r0], #4
   bff70:	2100      	movs	r1, #0
   bff72:	f004 faf9 	bl	c4568 <memset>
}
   bff76:	4620      	mov	r0, r4
   bff78:	bd10      	pop	{r4, pc}
   bff7a:	bf00      	nop
   bff7c:	000c7eac 	.word	0x000c7eac

000bff80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bff80:	4603      	mov	r3, r0
   bff82:	4a07      	ldr	r2, [pc, #28]	; (bffa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bff84:	b510      	push	{r4, lr}
   bff86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bff8a:	f101 0210 	add.w	r2, r1, #16
   bff8e:	f851 4b04 	ldr.w	r4, [r1], #4
   bff92:	f843 4b04 	str.w	r4, [r3], #4
   bff96:	4291      	cmp	r1, r2
   bff98:	d1f9      	bne.n	bff8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bff9a:	780a      	ldrb	r2, [r1, #0]
   bff9c:	701a      	strb	r2, [r3, #0]
}
   bff9e:	bd10      	pop	{r4, pc}
   bffa0:	000c7eac 	.word	0x000c7eac

000bffa4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bffa4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bffa6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bffaa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bffae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bffb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bffb6:	2304      	movs	r3, #4
   bffb8:	6041      	str	r1, [r0, #4]
   bffba:	7503      	strb	r3, [r0, #20]
}
   bffbc:	bd10      	pop	{r4, pc}
	...

000bffc0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bffc0:	b507      	push	{r0, r1, r2, lr}
   bffc2:	4b06      	ldr	r3, [pc, #24]	; (bffdc <_ZN9IPAddressC1EPKh+0x1c>)
   bffc4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bffc6:	78cb      	ldrb	r3, [r1, #3]
   bffc8:	9300      	str	r3, [sp, #0]
   bffca:	788b      	ldrb	r3, [r1, #2]
   bffcc:	784a      	ldrb	r2, [r1, #1]
   bffce:	7809      	ldrb	r1, [r1, #0]
   bffd0:	f7ff ffe8 	bl	bffa4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bffd4:	b003      	add	sp, #12
   bffd6:	f85d fb04 	ldr.w	pc, [sp], #4
   bffda:	bf00      	nop
   bffdc:	000c7eac 	.word	0x000c7eac

000bffe0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bffe0:	f100 0310 	add.w	r3, r0, #16
   bffe4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bffe6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bffea:	2901      	cmp	r1, #1
   bffec:	4618      	mov	r0, r3
   bffee:	d108      	bne.n	c0002 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bfff0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bfff4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bfff8:	3a01      	subs	r2, #1
   bfffa:	f103 0310 	add.w	r3, r3, #16
   bfffe:	d1f2      	bne.n	bffe6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c0000:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c0002:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c0004:	bf04      	itt	eq
   c0006:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c000a:	1852      	addeq	r2, r2, r1
   c000c:	e7f4      	b.n	bfff8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c000e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c000e:	b40e      	push	{r1, r2, r3}
   c0010:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0012:	b088      	sub	sp, #32
   c0014:	af00      	add	r7, sp, #0
   c0016:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c001a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c001c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0020:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c0022:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0024:	462b      	mov	r3, r5
   c0026:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c0028:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c002a:	f7fe f955 	bl	be2d8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c002e:	280f      	cmp	r0, #15
   c0030:	687a      	ldr	r2, [r7, #4]
   c0032:	d91a      	bls.n	c006a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c0034:	f100 0308 	add.w	r3, r0, #8
   c0038:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c003c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c003e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c0042:	1c41      	adds	r1, r0, #1
   c0044:	462b      	mov	r3, r5
   c0046:	4668      	mov	r0, sp
        va_start(args, fmt);
   c0048:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c004a:	f7fe f945 	bl	be2d8 <vsnprintf>
        if (n > 0) {
   c004e:	1e02      	subs	r2, r0, #0
   c0050:	dd04      	ble.n	c005c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c0052:	6823      	ldr	r3, [r4, #0]
   c0054:	4669      	mov	r1, sp
   c0056:	689b      	ldr	r3, [r3, #8]
   c0058:	4620      	mov	r0, r4
   c005a:	4798      	blx	r3
   c005c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c005e:	3720      	adds	r7, #32
   c0060:	46bd      	mov	sp, r7
   c0062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c0066:	b003      	add	sp, #12
   c0068:	4770      	bx	lr
    } else if (n > 0) {
   c006a:	2800      	cmp	r0, #0
   c006c:	d0f7      	beq.n	c005e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c006e:	6823      	ldr	r3, [r4, #0]
   c0070:	4602      	mov	r2, r0
   c0072:	689b      	ldr	r3, [r3, #8]
   c0074:	f107 0110 	add.w	r1, r7, #16
   c0078:	4620      	mov	r0, r4
   c007a:	4798      	blx	r3
}
   c007c:	e7ef      	b.n	c005e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c007e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c007e:	b538      	push	{r3, r4, r5, lr}
   c0080:	680b      	ldr	r3, [r1, #0]
   c0082:	6003      	str	r3, [r0, #0]
   c0084:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c0086:	6843      	ldr	r3, [r0, #4]
   c0088:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c008a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c008c:	d008      	beq.n	c00a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c008e:	b115      	cbz	r5, c0096 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c0090:	686b      	ldr	r3, [r5, #4]
   c0092:	3301      	adds	r3, #1
   c0094:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c0096:	6860      	ldr	r0, [r4, #4]
   c0098:	b108      	cbz	r0, c009e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c009a:	f7fe fa22 	bl	be4e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c009e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c00a0:	bd38      	pop	{r3, r4, r5, pc}

000c00a2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   c00a2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c00a4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c00a6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c00aa:	689b      	ldr	r3, [r3, #8]
   c00ac:	2201      	movs	r2, #1
   c00ae:	f10d 0107 	add.w	r1, sp, #7
   c00b2:	4798      	blx	r3
}
   c00b4:	b003      	add	sp, #12
   c00b6:	f85d fb04 	ldr.w	pc, [sp], #4

000c00ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c00ba:	460b      	mov	r3, r1
   c00bc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c00be:	2200      	movs	r2, #0
   c00c0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c00c2:	e9c0 2200 	strd	r2, r2, [r0]
   c00c6:	4604      	mov	r4, r0
        t_ = t;
   c00c8:	6083      	str	r3, [r0, #8]
    if (t) {
   c00ca:	b90b      	cbnz	r3, c00d0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c00cc:	4620      	mov	r0, r4
   c00ce:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c00d0:	f7ff ffd5 	bl	c007e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c00d4:	e7fa      	b.n	c00cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c00d6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c00d6:	6883      	ldr	r3, [r0, #8]
   c00d8:	b1eb      	cbz	r3, c0116 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c00da:	781a      	ldrb	r2, [r3, #0]
   c00dc:	2a03      	cmp	r2, #3
   c00de:	d81a      	bhi.n	c0116 <_ZNK5spark9JSONValue4typeEv+0x40>
   c00e0:	e8df f002 	tbb	[pc, r2]
   c00e4:	1b021704 	.word	0x1b021704
   c00e8:	2005      	movs	r0, #5
   c00ea:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c00ec:	6802      	ldr	r2, [r0, #0]
   c00ee:	685b      	ldr	r3, [r3, #4]
   c00f0:	6852      	ldr	r2, [r2, #4]
   c00f2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c00f4:	282d      	cmp	r0, #45	; 0x2d
   c00f6:	d012      	beq.n	c011e <_ZNK5spark9JSONValue4typeEv+0x48>
   c00f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c00fc:	2b09      	cmp	r3, #9
   c00fe:	d90e      	bls.n	c011e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c0100:	2874      	cmp	r0, #116	; 0x74
   c0102:	d00e      	beq.n	c0122 <_ZNK5spark9JSONValue4typeEv+0x4c>
   c0104:	2866      	cmp	r0, #102	; 0x66
   c0106:	d00c      	beq.n	c0122 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c0108:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c010c:	4258      	negs	r0, r3
   c010e:	4158      	adcs	r0, r3
   c0110:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c0112:	2006      	movs	r0, #6
   c0114:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c0116:	2000      	movs	r0, #0
   c0118:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c011a:	2004      	movs	r0, #4
   c011c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c011e:	2003      	movs	r0, #3
   c0120:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c0122:	2002      	movs	r0, #2
}
   c0124:	4770      	bx	lr

000c0126 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c0126:	b510      	push	{r4, lr}
   c0128:	4604      	mov	r4, r0
    switch (type()) {
   c012a:	f7ff ffd4 	bl	c00d6 <_ZNK5spark9JSONValue4typeEv>
   c012e:	2802      	cmp	r0, #2
   c0130:	d00e      	beq.n	c0150 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c0132:	1ec3      	subs	r3, r0, #3
   c0134:	b2db      	uxtb	r3, r3
   c0136:	2b01      	cmp	r3, #1
   c0138:	d814      	bhi.n	c0164 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c013a:	6822      	ldr	r2, [r4, #0]
   c013c:	68a3      	ldr	r3, [r4, #8]
   c013e:	6850      	ldr	r0, [r2, #4]
   c0140:	685b      	ldr	r3, [r3, #4]
}
   c0142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c0146:	220a      	movs	r2, #10
   c0148:	2100      	movs	r1, #0
   c014a:	4418      	add	r0, r3
   c014c:	f005 b9c0 	b.w	c54d0 <strtol>
        const char* const s = d_->json + t_->start;
   c0150:	6822      	ldr	r2, [r4, #0]
   c0152:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c0154:	6852      	ldr	r2, [r2, #4]
   c0156:	685b      	ldr	r3, [r3, #4]
   c0158:	5cd0      	ldrb	r0, [r2, r3]
   c015a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c015e:	4258      	negs	r0, r3
   c0160:	4158      	adcs	r0, r3
}
   c0162:	bd10      	pop	{r4, pc}
    switch (type()) {
   c0164:	2000      	movs	r0, #0
   c0166:	e7fc      	b.n	c0162 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c0168 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c0168:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c016a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c016c:	e9c0 3300 	strd	r3, r3, [r0]
   c0170:	4604      	mov	r4, r0
        n_(0) {
   c0172:	480e      	ldr	r0, [pc, #56]	; (c01ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c0174:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c0178:	b1a9      	cbz	r1, c01a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c017a:	780b      	ldrb	r3, [r1, #0]
   c017c:	2b03      	cmp	r3, #3
   c017e:	d006      	beq.n	c018e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c0180:	b98b      	cbnz	r3, c01a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c0182:	6813      	ldr	r3, [r2, #0]
   c0184:	6858      	ldr	r0, [r3, #4]
   c0186:	684b      	ldr	r3, [r1, #4]
   c0188:	5cc3      	ldrb	r3, [r0, r3]
   c018a:	2b6e      	cmp	r3, #110	; 0x6e
   c018c:	d007      	beq.n	c019e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c018e:	6813      	ldr	r3, [r2, #0]
   c0190:	684d      	ldr	r5, [r1, #4]
   c0192:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c0194:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c0196:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c0198:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c019a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c019c:	60e3      	str	r3, [r4, #12]
   c019e:	4611      	mov	r1, r2
   c01a0:	4620      	mov	r0, r4
   c01a2:	f7ff ff6c 	bl	c007e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c01a6:	4620      	mov	r0, r4
   c01a8:	bd38      	pop	{r3, r4, r5, pc}
   c01aa:	bf00      	nop
   c01ac:	000c7f1b 	.word	0x000c7f1b

000c01b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c01b0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c01b2:	2500      	movs	r5, #0
   c01b4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c01b6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c01ba:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c01be:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c01c2:	4604      	mov	r4, r0
   c01c4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c01c6:	b14b      	cbz	r3, c01dc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c01c8:	781a      	ldrb	r2, [r3, #0]
   c01ca:	2a01      	cmp	r2, #1
   c01cc:	d106      	bne.n	c01dc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c01ce:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c01d2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c01d4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c01d6:	6143      	str	r3, [r0, #20]
   c01d8:	f7ff ff51 	bl	c007e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c01dc:	4620      	mov	r0, r4
   c01de:	bd38      	pop	{r3, r4, r5, pc}

000c01e0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c01e0:	b510      	push	{r4, lr}
    if (!n_) {
   c01e2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c01e4:	4604      	mov	r4, r0
    if (!n_) {
   c01e6:	b163      	cbz	r3, c0202 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c01e8:	6880      	ldr	r0, [r0, #8]
   c01ea:	60e0      	str	r0, [r4, #12]
    --n_;
   c01ec:	3b01      	subs	r3, #1
    ++t_;
   c01ee:	3010      	adds	r0, #16
   c01f0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c01f2:	6120      	str	r0, [r4, #16]
    --n_;
   c01f4:	6163      	str	r3, [r4, #20]
    if (n_) {
   c01f6:	b113      	cbz	r3, c01fe <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c01f8:	f7ff fef2 	bl	bffe0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c01fc:	60a0      	str	r0, [r4, #8]
    return true;
   c01fe:	2001      	movs	r0, #1
   c0200:	e000      	b.n	c0204 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c0202:	4618      	mov	r0, r3
}
   c0204:	bd10      	pop	{r4, pc}

000c0206 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c0206:	b510      	push	{r4, lr}
    write('}');
   c0208:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c020a:	4604      	mov	r4, r0
    write('}');
   c020c:	f7ff ff49 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c0210:	2301      	movs	r3, #1
   c0212:	7123      	strb	r3, [r4, #4]
}
   c0214:	4620      	mov	r0, r4
   c0216:	bd10      	pop	{r4, pc}

000c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c0218:	b508      	push	{r3, lr}
    switch (state_) {
   c021a:	7903      	ldrb	r3, [r0, #4]
   c021c:	2b01      	cmp	r3, #1
   c021e:	d002      	beq.n	c0226 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c0220:	2b02      	cmp	r3, #2
   c0222:	d004      	beq.n	c022e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c0224:	bd08      	pop	{r3, pc}
        write(',');
   c0226:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c0228:	f7ff ff3b 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
}
   c022c:	e7fa      	b.n	c0224 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c022e:	213a      	movs	r1, #58	; 0x3a
   c0230:	e7fa      	b.n	c0228 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c0232 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c0232:	b510      	push	{r4, lr}
   c0234:	4604      	mov	r4, r0
    writeSeparator();
   c0236:	f7ff ffef 	bl	c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c023a:	4620      	mov	r0, r4
   c023c:	217b      	movs	r1, #123	; 0x7b
   c023e:	f7ff ff30 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c0242:	2300      	movs	r3, #0
   c0244:	7123      	strb	r3, [r4, #4]
}
   c0246:	4620      	mov	r0, r4
   c0248:	bd10      	pop	{r4, pc}
	...

000c024c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c024c:	b513      	push	{r0, r1, r4, lr}
   c024e:	4604      	mov	r4, r0
   c0250:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c0252:	f7ff ffe1 	bl	c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c0256:	6823      	ldr	r3, [r4, #0]
   c0258:	9a01      	ldr	r2, [sp, #4]
   c025a:	68db      	ldr	r3, [r3, #12]
   c025c:	4903      	ldr	r1, [pc, #12]	; (c026c <_ZN5spark10JSONWriter5valueEi+0x20>)
   c025e:	4620      	mov	r0, r4
   c0260:	4798      	blx	r3
    state_ = NEXT;
   c0262:	2301      	movs	r3, #1
}
   c0264:	4620      	mov	r0, r4
    state_ = NEXT;
   c0266:	7123      	strb	r3, [r4, #4]
}
   c0268:	b002      	add	sp, #8
   c026a:	bd10      	pop	{r4, pc}
   c026c:	000c7670 	.word	0x000c7670

000c0270 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c0270:	b513      	push	{r0, r1, r4, lr}
   c0272:	4604      	mov	r4, r0
   c0274:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c0276:	f7ff ffcf 	bl	c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c027a:	6823      	ldr	r3, [r4, #0]
   c027c:	9a01      	ldr	r2, [sp, #4]
   c027e:	68db      	ldr	r3, [r3, #12]
   c0280:	4903      	ldr	r1, [pc, #12]	; (c0290 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c0282:	4620      	mov	r0, r4
   c0284:	4798      	blx	r3
    state_ = NEXT;
   c0286:	2301      	movs	r3, #1
}
   c0288:	4620      	mov	r0, r4
    state_ = NEXT;
   c028a:	7123      	strb	r3, [r4, #4]
}
   c028c:	b002      	add	sp, #8
   c028e:	bd10      	pop	{r4, pc}
   c0290:	000c7eb8 	.word	0x000c7eb8

000c0294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c0294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0298:	460d      	mov	r5, r1
    write('"');
   c029a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c029c:	4690      	mov	r8, r2
   c029e:	4604      	mov	r4, r0
    write('"');
   c02a0:	f7ff feff 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c02a4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c034c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c02a8:	44a8      	add	r8, r5
    const char *s = str;
   c02aa:	462f      	mov	r7, r5
    while (s != end) {
   c02ac:	4547      	cmp	r7, r8
   c02ae:	46ba      	mov	sl, r7
   c02b0:	d03d      	beq.n	c032e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c02b2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c02b6:	2e22      	cmp	r6, #34	; 0x22
   c02b8:	d006      	beq.n	c02c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c02ba:	2e5c      	cmp	r6, #92	; 0x5c
   c02bc:	d004      	beq.n	c02c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c02be:	4630      	mov	r0, r6
   c02c0:	f004 f912 	bl	c44e8 <isprint>
   c02c4:	2800      	cmp	r0, #0
   c02c6:	d1f1      	bne.n	c02ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c02c8:	6823      	ldr	r3, [r4, #0]
   c02ca:	ebaa 0205 	sub.w	r2, sl, r5
   c02ce:	689b      	ldr	r3, [r3, #8]
   c02d0:	4629      	mov	r1, r5
   c02d2:	4620      	mov	r0, r4
   c02d4:	4798      	blx	r3
            write('\\');
   c02d6:	215c      	movs	r1, #92	; 0x5c
   c02d8:	4620      	mov	r0, r4
   c02da:	f7ff fee2 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c02de:	2e0d      	cmp	r6, #13
   c02e0:	d80a      	bhi.n	c02f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c02e2:	2e07      	cmp	r6, #7
   c02e4:	d91c      	bls.n	c0320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c02e6:	f1a6 0308 	sub.w	r3, r6, #8
   c02ea:	2b05      	cmp	r3, #5
   c02ec:	d818      	bhi.n	c0320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c02ee:	e8df f003 	tbb	[pc, r3]
   c02f2:	0f0d      	.short	0x0f0d
   c02f4:	15131711 	.word	0x15131711
   c02f8:	2e22      	cmp	r6, #34	; 0x22
   c02fa:	d001      	beq.n	c0300 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c02fc:	2e5c      	cmp	r6, #92	; 0x5c
   c02fe:	d10f      	bne.n	c0320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c0300:	4631      	mov	r1, r6
                write('b');
   c0302:	4620      	mov	r0, r4
   c0304:	f7ff fecd 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c0308:	463d      	mov	r5, r7
    while (s != end) {
   c030a:	e7cf      	b.n	c02ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c030c:	2162      	movs	r1, #98	; 0x62
   c030e:	e7f8      	b.n	c0302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c0310:	2174      	movs	r1, #116	; 0x74
   c0312:	e7f6      	b.n	c0302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c0314:	216e      	movs	r1, #110	; 0x6e
   c0316:	e7f4      	b.n	c0302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c0318:	2166      	movs	r1, #102	; 0x66
   c031a:	e7f2      	b.n	c0302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c031c:	2172      	movs	r1, #114	; 0x72
   c031e:	e7f0      	b.n	c0302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c0320:	6823      	ldr	r3, [r4, #0]
   c0322:	4632      	mov	r2, r6
   c0324:	68db      	ldr	r3, [r3, #12]
   c0326:	4649      	mov	r1, r9
   c0328:	4620      	mov	r0, r4
   c032a:	4798      	blx	r3
                break;
   c032c:	e7ec      	b.n	c0308 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c032e:	42bd      	cmp	r5, r7
   c0330:	d005      	beq.n	c033e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c0332:	6823      	ldr	r3, [r4, #0]
   c0334:	1b7a      	subs	r2, r7, r5
   c0336:	689b      	ldr	r3, [r3, #8]
   c0338:	4629      	mov	r1, r5
   c033a:	4620      	mov	r0, r4
   c033c:	4798      	blx	r3
    }
    write('"');
   c033e:	2122      	movs	r1, #34	; 0x22
   c0340:	4620      	mov	r0, r4
   c0342:	f7ff feae 	bl	c00a2 <_ZN5spark10JSONWriter5writeEc>
}
   c0346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c034a:	bf00      	nop
   c034c:	000c7ebb 	.word	0x000c7ebb

000c0350 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c0350:	b513      	push	{r0, r1, r4, lr}
   c0352:	4604      	mov	r4, r0
   c0354:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0358:	f7ff ff5e 	bl	c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c035c:	4620      	mov	r0, r4
   c035e:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0362:	f7ff ff97 	bl	c0294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c0366:	2302      	movs	r3, #2
}
   c0368:	4620      	mov	r0, r4
    state_ = VALUE;
   c036a:	7123      	strb	r3, [r4, #4]
}
   c036c:	b002      	add	sp, #8
   c036e:	bd10      	pop	{r4, pc}

000c0370 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c0370:	b513      	push	{r0, r1, r4, lr}
   c0372:	4604      	mov	r4, r0
   c0374:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c0378:	f7ff ff4e 	bl	c0218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c037c:	4620      	mov	r0, r4
   c037e:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0382:	f7ff ff87 	bl	c0294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c0386:	2301      	movs	r3, #1
}
   c0388:	4620      	mov	r0, r4
    state_ = NEXT;
   c038a:	7123      	strb	r3, [r4, #4]
}
   c038c:	b002      	add	sp, #8
   c038e:	bd10      	pop	{r4, pc}

000c0390 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   c0390:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   c0392:	460b      	mov	r3, r1
    s->update(ticks);
   c0394:	6892      	ldr	r2, [r2, #8]
   c0396:	4601      	mov	r1, r0
   c0398:	4618      	mov	r0, r3
   c039a:	4710      	bx	r2

000c039c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   c039c:	b570      	push	{r4, r5, r6, lr}
   c039e:	4c0e      	ldr	r4, [pc, #56]	; (c03d8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   c03a0:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   c03a2:	2500      	movs	r5, #0
   c03a4:	241c      	movs	r4, #28
   c03a6:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c03aa:	f89d 4014 	ldrb.w	r4, [sp, #20]
   c03ae:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   c03b2:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   c03b4:	f004 0403 	and.w	r4, r4, #3
   c03b8:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   c03bc:	b2e4      	uxtb	r4, r4
   c03be:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   c03c0:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   c03c2:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   c03c4:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   c03c6:	7c42      	ldrb	r2, [r0, #17]
   c03c8:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   c03ca:	bf0a      	itet	eq
   c03cc:	4b03      	ldreq	r3, [pc, #12]	; (c03dc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   c03ce:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   c03d0:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   c03d4:	bd70      	pop	{r4, r5, r6, pc}
   c03d6:	bf00      	nop
   c03d8:	000c7ae4 	.word	0x000c7ae4
   c03dc:	000c0391 	.word	0x000c0391

000c03e0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   c03e0:	6880      	ldr	r0, [r0, #8]
   c03e2:	6803      	ldr	r3, [r0, #0]
   c03e4:	68db      	ldr	r3, [r3, #12]
   c03e6:	4718      	bx	r3

000c03e8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   c03e8:	4770      	bx	lr

000c03ea <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   c03ea:	4608      	mov	r0, r1
   c03ec:	b111      	cbz	r1, c03f4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   c03ee:	680b      	ldr	r3, [r1, #0]
   c03f0:	685b      	ldr	r3, [r3, #4]
   c03f2:	4718      	bx	r3
}
   c03f4:	4770      	bx	lr

000c03f6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   c03f6:	4770      	bx	lr

000c03f8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c03f8:	4770      	bx	lr

000c03fa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   c03fa:	4770      	bx	lr

000c03fc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   c03fc:	4770      	bx	lr

000c03fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   c03fe:	b538      	push	{r3, r4, r5, lr}
   c0400:	4604      	mov	r4, r0
   c0402:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   c0404:	6800      	ldr	r0, [r0, #0]
   c0406:	212e      	movs	r1, #46	; 0x2e
   c0408:	f004 f900 	bl	c460c <strchrnul>
    size = s - category;
   c040c:	6823      	ldr	r3, [r4, #0]
   c040e:	1ac3      	subs	r3, r0, r3
   c0410:	602b      	str	r3, [r5, #0]
    if (size) {
   c0412:	b123      	cbz	r3, c041e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   c0414:	7803      	ldrb	r3, [r0, #0]
   c0416:	b103      	cbz	r3, c041a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   c0418:	3001      	adds	r0, #1
   c041a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c041c:	6020      	str	r0, [r4, #0]
}
   c041e:	4618      	mov	r0, r3
   c0420:	bd38      	pop	{r3, r4, r5, pc}

000c0422 <_ZN5spark16JSONStreamWriterD0Ev>:
   c0422:	b510      	push	{r4, lr}
   c0424:	210c      	movs	r1, #12
   c0426:	4604      	mov	r4, r0
   c0428:	f7f3 fe3b 	bl	b40a2 <_ZdlPvj>
   c042c:	4620      	mov	r0, r4
   c042e:	bd10      	pop	{r4, pc}

000c0430 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   c0430:	b510      	push	{r4, lr}
   c0432:	2104      	movs	r1, #4
   c0434:	4604      	mov	r4, r0
   c0436:	f7f3 fe34 	bl	b40a2 <_ZdlPvj>
   c043a:	4620      	mov	r0, r4
   c043c:	bd10      	pop	{r4, pc}

000c043e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   c043e:	b510      	push	{r4, lr}
   c0440:	2104      	movs	r1, #4
   c0442:	4604      	mov	r4, r0
   c0444:	f7f3 fe2d 	bl	b40a2 <_ZdlPvj>
   c0448:	4620      	mov	r0, r4
   c044a:	bd10      	pop	{r4, pc}

000c044c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   c044c:	f7fd bbfe 	b.w	bdc4c <os_mutex_recursive_lock>

000c0450 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   c0450:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   c0452:	f004 f8e5 	bl	c4620 <strcmp>
}
   c0456:	fab0 f080 	clz	r0, r0
   c045a:	0940      	lsrs	r0, r0, #5
   c045c:	bd08      	pop	{r3, pc}

000c045e <__tcf_1>:
   c045e:	4770      	bx	lr

000c0460 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   c0460:	b510      	push	{r4, lr}
   c0462:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   c0464:	f001 fc86 	bl	c1d74 <_Z16_fetch_usbserialv>
   c0468:	4284      	cmp	r4, r0
   c046a:	d010      	beq.n	c048e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   c046c:	f001 fe2e 	bl	c20cc <_Z22__fetch_global_Serial1v>
   c0470:	4284      	cmp	r4, r0
   c0472:	d105      	bne.n	c0480 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   c0474:	f001 fe2a 	bl	c20cc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   c0478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   c047c:	f001 bc15 	b.w	c1caa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   c0480:	b12c      	cbz	r4, c048e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   c0482:	6823      	ldr	r3, [r4, #0]
   c0484:	4620      	mov	r0, r4
   c0486:	685b      	ldr	r3, [r3, #4]
}
   c0488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c048c:	4718      	bx	r3
   c048e:	bd10      	pop	{r4, pc}

000c0490 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c0490:	680b      	ldr	r3, [r1, #0]
   c0492:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c0494:	684b      	ldr	r3, [r1, #4]
   c0496:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c0498:	b113      	cbz	r3, c04a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   c049a:	685a      	ldr	r2, [r3, #4]
   c049c:	3201      	adds	r2, #1
   c049e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c04a0:	4770      	bx	lr

000c04a2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   c04a2:	b513      	push	{r0, r1, r4, lr}
   c04a4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   c04a6:	4608      	mov	r0, r1
   c04a8:	9101      	str	r1, [sp, #4]
   c04aa:	f004 f8e8 	bl	c467e <strlen>
   c04ae:	9901      	ldr	r1, [sp, #4]
   c04b0:	4602      	mov	r2, r0
   c04b2:	4620      	mov	r0, r4
}
   c04b4:	b002      	add	sp, #8
   c04b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   c04ba:	f7ff bf59 	b.w	c0370 <_ZN5spark10JSONWriter5valueEPKcj>

000c04be <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   c04be:	b513      	push	{r0, r1, r4, lr}
   c04c0:	4604      	mov	r4, r0
    write(str, strlen(str));
   c04c2:	4608      	mov	r0, r1
   c04c4:	9101      	str	r1, [sp, #4]
   c04c6:	f004 f8da 	bl	c467e <strlen>
   c04ca:	6823      	ldr	r3, [r4, #0]
   c04cc:	9901      	ldr	r1, [sp, #4]
   c04ce:	68db      	ldr	r3, [r3, #12]
   c04d0:	4602      	mov	r2, r0
   c04d2:	4620      	mov	r0, r4
}
   c04d4:	b002      	add	sp, #8
   c04d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   c04da:	4718      	bx	r3

000c04dc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   c04dc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c04de:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   c04e0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c04e4:	68db      	ldr	r3, [r3, #12]
   c04e6:	2201      	movs	r2, #1
   c04e8:	f10d 0107 	add.w	r1, sp, #7
   c04ec:	4798      	blx	r3
}
   c04ee:	b003      	add	sp, #12
   c04f0:	f85d fb04 	ldr.w	pc, [sp], #4

000c04f4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c04f4:	b40e      	push	{r1, r2, r3}
   c04f6:	b503      	push	{r0, r1, lr}
   c04f8:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   c04fa:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   c04fc:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   c0500:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   c0502:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   c0504:	f000 ffe9 	bl	c14da <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   c0508:	b002      	add	sp, #8
   c050a:	f85d eb04 	ldr.w	lr, [sp], #4
   c050e:	b003      	add	sp, #12
   c0510:	4770      	bx	lr

000c0512 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   c0512:	680a      	ldr	r2, [r1, #0]
   c0514:	6002      	str	r2, [r0, #0]
   c0516:	684a      	ldr	r2, [r1, #4]
   c0518:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   c051a:	2200      	movs	r2, #0
   c051c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   c0520:	b510      	push	{r4, lr}
   c0522:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0524:	688c      	ldr	r4, [r1, #8]
   c0526:	6084      	str	r4, [r0, #8]
   c0528:	68cc      	ldr	r4, [r1, #12]
   c052a:	60c4      	str	r4, [r0, #12]
   c052c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c052e:	608a      	str	r2, [r1, #8]
   c0530:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0532:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   c0534:	610a      	str	r2, [r1, #16]
   c0536:	bd10      	pop	{r4, pc}

000c0538 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   c053c:	e9d0 8400 	ldrd	r8, r4, [r0]
   c0540:	f04f 0a14 	mov.w	sl, #20
   c0544:	9300      	str	r3, [sp, #0]
   c0546:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   c054a:	4b18      	ldr	r3, [pc, #96]	; (c05ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c054c:	10a4      	asrs	r4, r4, #2
   c054e:	4617      	mov	r7, r2
   c0550:	435c      	muls	r4, r3
   c0552:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   c0554:	2c00      	cmp	r4, #0
   c0556:	dd21      	ble.n	c059c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   c0558:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   c055a:	fb0a f006 	mul.w	r0, sl, r6
   c055e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   c0562:	463a      	mov	r2, r7
   c0564:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   c0568:	5828      	ldr	r0, [r5, r0]
   c056a:	9101      	str	r1, [sp, #4]
   c056c:	455f      	cmp	r7, fp
   c056e:	bf28      	it	cs
   c0570:	465a      	movcs	r2, fp
   c0572:	f004 f89f 	bl	c46b4 <strncmp>
                if (cmp == 0) {
   c0576:	2800      	cmp	r0, #0
   c0578:	9901      	ldr	r1, [sp, #4]
   c057a:	f04f 0301 	mov.w	r3, #1
   c057e:	d10b      	bne.n	c0598 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   c0580:	455f      	cmp	r7, fp
   c0582:	d103      	bne.n	c058c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   c0584:	9a00      	ldr	r2, [sp, #0]
   c0586:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   c0588:	4634      	mov	r4, r6
   c058a:	e7e3      	b.n	c0554 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   c058c:	d9fc      	bls.n	c0588 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   c058e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   c0590:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   c0594:	3e01      	subs	r6, #1
   c0596:	e7f7      	b.n	c0588 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   c0598:	dbf9      	blt.n	c058e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   c059a:	e7f5      	b.n	c0588 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   c059c:	eba5 0508 	sub.w	r5, r5, r8
}
   c05a0:	4802      	ldr	r0, [pc, #8]	; (c05ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   c05a2:	10ad      	asrs	r5, r5, #2
   c05a4:	4368      	muls	r0, r5
   c05a6:	b003      	add	sp, #12
   c05a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c05ac:	cccccccd 	.word	0xcccccccd

000c05b0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c05b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   c05b2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   c05b4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   c05b6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   c05b8:	b303      	cbz	r3, c05fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   c05ba:	b1f9      	cbz	r1, c05fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   c05bc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   c05be:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   c05c2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   c05c4:	a903      	add	r1, sp, #12
   c05c6:	a801      	add	r0, sp, #4
   c05c8:	f7ff ff19 	bl	c03fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c05cc:	4601      	mov	r1, r0
   c05ce:	b1a8      	cbz	r0, c05fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   c05d0:	f10d 030b 	add.w	r3, sp, #11
   c05d4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   c05d6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   c05da:	4620      	mov	r0, r4
   c05dc:	f7ff ffac 	bl	c0538 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   c05e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c05e4:	b153      	cbz	r3, c05fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   c05e6:	6823      	ldr	r3, [r4, #0]
   c05e8:	2414      	movs	r4, #20
   c05ea:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   c05ee:	3408      	adds	r4, #8
            if (node.level >= 0) {
   c05f0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   c05f4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   c05f6:	bfa8      	it	ge
   c05f8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   c05fa:	e7e3      	b.n	c05c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   c05fc:	4628      	mov	r0, r5
   c05fe:	b004      	add	sp, #16
   c0600:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0604 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   c0604:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   c0606:	4c09      	ldr	r4, [pc, #36]	; (c062c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   c0608:	7823      	ldrb	r3, [r4, #0]
   c060a:	f3bf 8f5b 	dmb	ish
   c060e:	07db      	lsls	r3, r3, #31
   c0610:	d409      	bmi.n	c0626 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c0612:	4620      	mov	r0, r4
   c0614:	f7f3 fd54 	bl	b40c0 <__cxa_guard_acquire>
   c0618:	b128      	cbz	r0, c0626 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   c061a:	4620      	mov	r0, r4
   c061c:	f7f3 fd55 	bl	b40ca <__cxa_guard_release>
   c0620:	4803      	ldr	r0, [pc, #12]	; (c0630 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   c0622:	f003 ff53 	bl	c44cc <atexit>
}
   c0626:	4803      	ldr	r0, [pc, #12]	; (c0634 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c0628:	bd10      	pop	{r4, pc}
   c062a:	bf00      	nop
   c062c:	2003e668 	.word	0x2003e668
   c0630:	000c03f7 	.word	0x000c03f7
   c0634:	2003db38 	.word	0x2003db38

000c0638 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c0638:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c063a:	4c09      	ldr	r4, [pc, #36]	; (c0660 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c063c:	7823      	ldrb	r3, [r4, #0]
   c063e:	f3bf 8f5b 	dmb	ish
   c0642:	07db      	lsls	r3, r3, #31
   c0644:	d409      	bmi.n	c065a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c0646:	4620      	mov	r0, r4
   c0648:	f7f3 fd3a 	bl	b40c0 <__cxa_guard_acquire>
   c064c:	b128      	cbz	r0, c065a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c064e:	4620      	mov	r0, r4
   c0650:	f7f3 fd3b 	bl	b40ca <__cxa_guard_release>
   c0654:	4803      	ldr	r0, [pc, #12]	; (c0664 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c0656:	f003 ff39 	bl	c44cc <atexit>
    return &factory;
}
   c065a:	4803      	ldr	r0, [pc, #12]	; (c0668 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c065c:	bd10      	pop	{r4, pc}
   c065e:	bf00      	nop
   c0660:	2003e66c 	.word	0x2003e66c
   c0664:	000c045f 	.word	0x000c045f
   c0668:	2003db3c 	.word	0x2003db3c

000c066c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c066c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c066e:	2500      	movs	r5, #0
   c0670:	4604      	mov	r4, r0
   c0672:	e9c0 5500 	strd	r5, r5, [r0]
   c0676:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c067a:	6085      	str	r5, [r0, #8]
   c067c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c067e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c0682:	f7fd fad3 	bl	bdc2c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c0686:	f7ff ffbd 	bl	c0604 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c068a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c068c:	f7ff ffd4 	bl	c0638 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c0690:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0692:	6220      	str	r0, [r4, #32]
}
   c0694:	4620      	mov	r0, r4
   c0696:	bd38      	pop	{r3, r4, r5, pc}

000c0698 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0698:	b510      	push	{r4, lr}
    static LogManager mgr;
   c069a:	4c0a      	ldr	r4, [pc, #40]	; (c06c4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c069c:	7823      	ldrb	r3, [r4, #0]
   c069e:	f3bf 8f5b 	dmb	ish
   c06a2:	07db      	lsls	r3, r3, #31
   c06a4:	d40c      	bmi.n	c06c0 <_ZN5spark10LogManager8instanceEv+0x28>
   c06a6:	4620      	mov	r0, r4
   c06a8:	f7f3 fd0a 	bl	b40c0 <__cxa_guard_acquire>
   c06ac:	b140      	cbz	r0, c06c0 <_ZN5spark10LogManager8instanceEv+0x28>
   c06ae:	4806      	ldr	r0, [pc, #24]	; (c06c8 <_ZN5spark10LogManager8instanceEv+0x30>)
   c06b0:	f7ff ffdc 	bl	c066c <_ZN5spark10LogManagerC1Ev>
   c06b4:	4620      	mov	r0, r4
   c06b6:	f7f3 fd08 	bl	b40ca <__cxa_guard_release>
   c06ba:	4804      	ldr	r0, [pc, #16]	; (c06cc <_ZN5spark10LogManager8instanceEv+0x34>)
   c06bc:	f003 ff06 	bl	c44cc <atexit>
    return &mgr;
}
   c06c0:	4801      	ldr	r0, [pc, #4]	; (c06c8 <_ZN5spark10LogManager8instanceEv+0x30>)
   c06c2:	bd10      	pop	{r4, pc}
   c06c4:	2003e664 	.word	0x2003e664
   c06c8:	2003e674 	.word	0x2003e674
   c06cc:	000c0bed 	.word	0x000c0bed

000c06d0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c06d0:	4a02      	ldr	r2, [pc, #8]	; (c06dc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c06d2:	4903      	ldr	r1, [pc, #12]	; (c06e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c06d4:	4803      	ldr	r0, [pc, #12]	; (c06e4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c06d6:	2300      	movs	r3, #0
   c06d8:	f7fd bcd8 	b.w	be08c <log_set_callbacks>
   c06dc:	000c09d1 	.word	0x000c09d1
   c06e0:	000c095d 	.word	0x000c095d
   c06e4:	000c08dd 	.word	0x000c08dd

000c06e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c06e8:	2300      	movs	r3, #0
   c06ea:	461a      	mov	r2, r3
   c06ec:	4619      	mov	r1, r3
   c06ee:	4618      	mov	r0, r3
   c06f0:	f7fd bccc 	b.w	be08c <log_set_callbacks>

000c06f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c06f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c06f6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c06f8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c06fa:	4668      	mov	r0, sp
   c06fc:	f7ff fec8 	bl	c0490 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c0700:	466a      	mov	r2, sp
   c0702:	4629      	mov	r1, r5
   c0704:	4620      	mov	r0, r4
   c0706:	f7ff fd53 	bl	c01b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c070a:	a801      	add	r0, sp, #4
   c070c:	f7fe fa91 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0710:	4620      	mov	r0, r4
   c0712:	b003      	add	sp, #12
   c0714:	bd30      	pop	{r4, r5, pc}

000c0716 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c0716:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c0718:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c071a:	4604      	mov	r4, r0
   c071c:	4668      	mov	r0, sp
   c071e:	f7ff feb7 	bl	c0490 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c0722:	466a      	mov	r2, sp
   c0724:	4629      	mov	r1, r5
   c0726:	4620      	mov	r0, r4
   c0728:	f7ff fd1e 	bl	c0168 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c072c:	a801      	add	r0, sp, #4
   c072e:	f7fe fa80 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0732:	4620      	mov	r0, r4
   c0734:	b003      	add	sp, #12
   c0736:	bd30      	pop	{r4, r5, pc}

000c0738 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0738:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c073a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c073c:	4604      	mov	r4, r0
   c073e:	4668      	mov	r0, sp
   c0740:	f7ff fea6 	bl	c0490 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c0744:	466a      	mov	r2, sp
   c0746:	4629      	mov	r1, r5
   c0748:	4620      	mov	r0, r4
   c074a:	f7ff fcb6 	bl	c00ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c074e:	a801      	add	r0, sp, #4
   c0750:	f7fe fa6f 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0754:	4620      	mov	r0, r4
   c0756:	b003      	add	sp, #12
   c0758:	bd30      	pop	{r4, r5, pc}
	...

000c075c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c075c:	b570      	push	{r4, r5, r6, lr}
   c075e:	b08a      	sub	sp, #40	; 0x28
   c0760:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c0762:	4601      	mov	r1, r0
   c0764:	a804      	add	r0, sp, #16
   c0766:	f7ff ffc5 	bl	c06f4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c076a:	4e14      	ldr	r6, [pc, #80]	; (c07bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c076c:	a804      	add	r0, sp, #16
   c076e:	f7ff fd37 	bl	c01e0 <_ZN5spark18JSONObjectIterator4nextEv>
   c0772:	b1e8      	cbz	r0, c07b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c0774:	a904      	add	r1, sp, #16
   c0776:	4668      	mov	r0, sp
   c0778:	f7ff ffcd 	bl	c0716 <_ZNK5spark18JSONObjectIterator4nameEv>
   c077c:	9802      	ldr	r0, [sp, #8]
   c077e:	4631      	mov	r1, r6
   c0780:	f7ff fe66 	bl	c0450 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c0784:	4604      	mov	r4, r0
   c0786:	b110      	cbz	r0, c078e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0788:	1e2c      	subs	r4, r5, #0
   c078a:	bf18      	it	ne
   c078c:	2401      	movne	r4, #1
   c078e:	a801      	add	r0, sp, #4
   c0790:	f7fe fa4f 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0794:	2c00      	cmp	r4, #0
   c0796:	d0e9      	beq.n	c076c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0798:	a904      	add	r1, sp, #16
   c079a:	4668      	mov	r0, sp
   c079c:	f7ff ffcc 	bl	c0738 <_ZNK5spark18JSONObjectIterator5valueEv>
   c07a0:	4668      	mov	r0, sp
   c07a2:	f7ff fcc0 	bl	c0126 <_ZNK5spark9JSONValue5toIntEv>
   c07a6:	6028      	str	r0, [r5, #0]
   c07a8:	a801      	add	r0, sp, #4
   c07aa:	f7fe fa42 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c07ae:	e7dd      	b.n	c076c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c07b0:	a805      	add	r0, sp, #20
   c07b2:	f7fe fa3e 	bl	bec32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c07b6:	b00a      	add	sp, #40	; 0x28
   c07b8:	bd70      	pop	{r4, r5, r6, pc}
   c07ba:	bf00      	nop
   c07bc:	000c7ec1 	.word	0x000c7ec1

000c07c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c07c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c07c2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c07c4:	4620      	mov	r0, r4
   c07c6:	4913      	ldr	r1, [pc, #76]	; (c0814 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c07c8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c07ca:	f003 ff29 	bl	c4620 <strcmp>
   c07ce:	b950      	cbnz	r0, c07e6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c07d0:	f001 fad0 	bl	c1d74 <_Z16_fetch_usbserialv>
   c07d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c07d8:	f001 fabc 	bl	c1d54 <_ZN9USBSerial5beginEl>
}
   c07dc:	b003      	add	sp, #12
   c07de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c07e2:	f001 bac7 	b.w	c1d74 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c07e6:	490c      	ldr	r1, [pc, #48]	; (c0818 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c07e8:	4620      	mov	r0, r4
   c07ea:	f003 ff19 	bl	c4620 <strcmp>
   c07ee:	b978      	cbnz	r0, c0810 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c07f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c07f4:	a901      	add	r1, sp, #4
   c07f6:	4628      	mov	r0, r5
        int baud = 9600;
   c07f8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c07fa:	f7ff ffaf 	bl	c075c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c07fe:	f001 fc65 	bl	c20cc <_Z22__fetch_global_Serial1v>
   c0802:	9901      	ldr	r1, [sp, #4]
   c0804:	f001 fa4e 	bl	c1ca4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c0808:	f001 fc60 	bl	c20cc <_Z22__fetch_global_Serial1v>
}
   c080c:	b003      	add	sp, #12
   c080e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c0810:	2000      	movs	r0, #0
   c0812:	e7fb      	b.n	c080c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c0814:	000c7ec6 	.word	0x000c7ec6
   c0818:	000c7ecd 	.word	0x000c7ecd

000c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c081c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c081e:	e9d0 5300 	ldrd	r5, r3, [r0]
   c0822:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0824:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c0826:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c082a:	42ae      	cmp	r6, r5
   c082c:	d005      	beq.n	c083a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c082e:	f105 0008 	add.w	r0, r5, #8
   c0832:	f7ff fff3 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0836:	3514      	adds	r5, #20
   c0838:	e7f7      	b.n	c082a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c083a:	6820      	ldr	r0, [r4, #0]
   c083c:	f7fd fd24 	bl	be288 <free>
}
   c0840:	4620      	mov	r0, r4
   c0842:	bd70      	pop	{r4, r5, r6, pc}

000c0844 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c0844:	b510      	push	{r4, lr}
   c0846:	4604      	mov	r4, r0
   c0848:	300c      	adds	r0, #12
   c084a:	f7ff ffe7 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c084e:	4620      	mov	r0, r4
   c0850:	f7fe f94f 	bl	beaf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0854:	4620      	mov	r0, r4
   c0856:	bd10      	pop	{r4, pc}

000c0858 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0858:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c085a:	4b04      	ldr	r3, [pc, #16]	; (c086c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c085c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c085e:	f840 3b04 	str.w	r3, [r0], #4
   c0862:	f7ff ffef 	bl	c0844 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c0866:	4620      	mov	r0, r4
   c0868:	bd10      	pop	{r4, pc}
   c086a:	bf00      	nop
   c086c:	000c7acc 	.word	0x000c7acc

000c0870 <_ZN5spark16StreamLogHandlerD0Ev>:
   c0870:	b510      	push	{r4, lr}
   c0872:	4604      	mov	r4, r0
   c0874:	f7ff fff0 	bl	c0858 <_ZN5spark16StreamLogHandlerD1Ev>
   c0878:	4620      	mov	r0, r4
   c087a:	2124      	movs	r1, #36	; 0x24
   c087c:	f7f3 fc11 	bl	b40a2 <_ZdlPvj>
   c0880:	4620      	mov	r0, r4
   c0882:	bd10      	pop	{r4, pc}

000c0884 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c0884:	b510      	push	{r4, lr}
   c0886:	4b03      	ldr	r3, [pc, #12]	; (c0894 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0888:	6003      	str	r3, [r0, #0]
   c088a:	4604      	mov	r4, r0
   c088c:	f7ff ffe4 	bl	c0858 <_ZN5spark16StreamLogHandlerD1Ev>
   c0890:	4620      	mov	r0, r4
   c0892:	bd10      	pop	{r4, pc}
   c0894:	000c7f68 	.word	0x000c7f68

000c0898 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0898:	b510      	push	{r4, lr}
   c089a:	4604      	mov	r4, r0
   c089c:	f7ff fff2 	bl	c0884 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c08a0:	4620      	mov	r0, r4
   c08a2:	2124      	movs	r1, #36	; 0x24
   c08a4:	f7f3 fbfd 	bl	b40a2 <_ZdlPvj>
   c08a8:	4620      	mov	r0, r4
   c08aa:	bd10      	pop	{r4, pc}

000c08ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c08ac:	2200      	movs	r2, #0
   c08ae:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c08b2:	b510      	push	{r4, lr}
        capacity_(0) {
   c08b4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c08b6:	680c      	ldr	r4, [r1, #0]
   c08b8:	6004      	str	r4, [r0, #0]
   c08ba:	684c      	ldr	r4, [r1, #4]
   c08bc:	6044      	str	r4, [r0, #4]
   c08be:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c08c0:	600a      	str	r2, [r1, #0]
   c08c2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c08c4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c08c6:	608a      	str	r2, [r1, #8]
}
   c08c8:	bd10      	pop	{r4, pc}

000c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c08ca:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c08cc:	6803      	ldr	r3, [r0, #0]
   c08ce:	4604      	mov	r4, r0
   c08d0:	6818      	ldr	r0, [r3, #0]
   c08d2:	f7fd f9c3 	bl	bdc5c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c08d6:	4620      	mov	r0, r4
   c08d8:	bd10      	pop	{r4, pc}
	...

000c08dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c08dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c08e0:	b087      	sub	sp, #28
   c08e2:	4680      	mov	r8, r0
   c08e4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c08e6:	4b1c      	ldr	r3, [pc, #112]	; (c0958 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c08e8:	685b      	ldr	r3, [r3, #4]
   c08ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c08ee:	4689      	mov	r9, r1
   c08f0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c08f2:	b96b      	cbnz	r3, c0910 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c08f4:	f7ff fed0 	bl	c0698 <_ZN5spark10LogManager8instanceEv>
   c08f8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c08fa:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c08fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0900:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c0902:	f7ff fda3 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c0906:	7b23      	ldrb	r3, [r4, #12]
   c0908:	b12b      	cbz	r3, c0916 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c090a:	a805      	add	r0, sp, #20
   c090c:	f7ff ffdd 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c0910:	b007      	add	sp, #28
   c0912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c0916:	2301      	movs	r3, #1
   c0918:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c091a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c091e:	fa5f f989 	uxtb.w	r9, r9
   c0922:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0926:	45aa      	cmp	sl, r5
   c0928:	d012      	beq.n	c0950 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c092a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c092e:	4631      	mov	r1, r6
   c0930:	1d38      	adds	r0, r7, #4
   c0932:	f7ff fe3d 	bl	c05b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0936:	4581      	cmp	r9, r0
   c0938:	d3f5      	bcc.n	c0926 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c093a:	683b      	ldr	r3, [r7, #0]
   c093c:	9a03      	ldr	r2, [sp, #12]
   c093e:	9200      	str	r2, [sp, #0]
   c0940:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c0944:	464a      	mov	r2, r9
   c0946:	4633      	mov	r3, r6
   c0948:	4641      	mov	r1, r8
   c094a:	4638      	mov	r0, r7
   c094c:	47d8      	blx	fp
   c094e:	e7ea      	b.n	c0926 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c0950:	2300      	movs	r3, #0
   c0952:	7323      	strb	r3, [r4, #12]
   c0954:	e7d9      	b.n	c090a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c0956:	bf00      	nop
   c0958:	e000ed00 	.word	0xe000ed00

000c095c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c095c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0960:	469b      	mov	fp, r3
   c0962:	4b1a      	ldr	r3, [pc, #104]	; (c09cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0964:	685b      	ldr	r3, [r3, #4]
   c0966:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c096a:	4680      	mov	r8, r0
   c096c:	4689      	mov	r9, r1
   c096e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c0970:	b96b      	cbnz	r3, c098e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c0972:	f7ff fe91 	bl	c0698 <_ZN5spark10LogManager8instanceEv>
   c0976:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0978:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c097c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c097e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0980:	f7ff fd64 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0984:	7b23      	ldrb	r3, [r4, #12]
   c0986:	b12b      	cbz	r3, c0994 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0988:	a801      	add	r0, sp, #4
   c098a:	f7ff ff9e 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c098e:	b003      	add	sp, #12
   c0990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0994:	2301      	movs	r3, #1
   c0996:	7323      	strb	r3, [r4, #12]
   c0998:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c099c:	b2f6      	uxtb	r6, r6
   c099e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c09a2:	4555      	cmp	r5, sl
   c09a4:	d00e      	beq.n	c09c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c09a6:	f855 7b04 	ldr.w	r7, [r5], #4
   c09aa:	4659      	mov	r1, fp
   c09ac:	1d38      	adds	r0, r7, #4
   c09ae:	f7ff fdff 	bl	c05b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   c09b2:	4286      	cmp	r6, r0
   c09b4:	d3f5      	bcc.n	c09a2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c09b6:	683b      	ldr	r3, [r7, #0]
   c09b8:	464a      	mov	r2, r9
   c09ba:	68db      	ldr	r3, [r3, #12]
   c09bc:	4641      	mov	r1, r8
   c09be:	4638      	mov	r0, r7
   c09c0:	4798      	blx	r3
   c09c2:	e7ee      	b.n	c09a2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c09c4:	2300      	movs	r3, #0
   c09c6:	7323      	strb	r3, [r4, #12]
   c09c8:	e7de      	b.n	c0988 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c09ca:	bf00      	nop
   c09cc:	e000ed00 	.word	0xe000ed00

000c09d0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c09d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c09d4:	4b16      	ldr	r3, [pc, #88]	; (c0a30 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c09d6:	685b      	ldr	r3, [r3, #4]
   c09d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c09dc:	4605      	mov	r5, r0
   c09de:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c09e0:	bb1b      	cbnz	r3, c0a2a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c09e2:	f7ff fe59 	bl	c0698 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c09e6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c09ea:	4604      	mov	r4, r0
   c09ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c09ee:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c09f0:	f7ff fd2c 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
   c09f4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c09f8:	2446      	movs	r4, #70	; 0x46
   c09fa:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c09fe:	45b0      	cmp	r8, r6
   c0a00:	d109      	bne.n	c0a16 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c0a02:	a801      	add	r0, sp, #4
   c0a04:	f7ff ff61 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c0a08:	42a5      	cmp	r5, r4
   c0a0a:	bfb4      	ite	lt
   c0a0c:	2000      	movlt	r0, #0
   c0a0e:	2001      	movge	r0, #1
}
   c0a10:	b002      	add	sp, #8
   c0a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c0a16:	f856 0b04 	ldr.w	r0, [r6], #4
   c0a1a:	4639      	mov	r1, r7
   c0a1c:	3004      	adds	r0, #4
   c0a1e:	f7ff fdc7 	bl	c05b0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c0a22:	4284      	cmp	r4, r0
   c0a24:	bfa8      	it	ge
   c0a26:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0a28:	e7e9      	b.n	c09fe <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0a2a:	2000      	movs	r0, #0
   c0a2c:	e7f0      	b.n	c0a10 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c0a2e:	bf00      	nop
   c0a30:	e000ed00 	.word	0xe000ed00

000c0a34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0a36:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0a3a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0a3c:	4604      	mov	r4, r0
   c0a3e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0a40:	db0d      	blt.n	c0a5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c0a42:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0a44:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0a46:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0a48:	dd04      	ble.n	c0a54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0a4a:	00b9      	lsls	r1, r7, #2
   c0a4c:	f7fd fc24 	bl	be298 <realloc>
            if (!d) {
   c0a50:	b918      	cbnz	r0, c0a5a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c0a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0a54:	f7fd fc18 	bl	be288 <free>
        T* d = nullptr;
   c0a58:	2000      	movs	r0, #0
        data_ = d;
   c0a5a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0a5c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c0a5e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c0a60:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c0a62:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0a66:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0a68:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0a6c:	1d08      	adds	r0, r1, #4
   c0a6e:	f003 fd61 	bl	c4534 <memmove>
    new(p) T(std::move(value));
   c0a72:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0a76:	6863      	ldr	r3, [r4, #4]
   c0a78:	3301      	adds	r3, #1
   c0a7a:	6063      	str	r3, [r4, #4]
    return true;
   c0a7c:	2001      	movs	r0, #1
   c0a7e:	e7e8      	b.n	c0a52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c0a80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c0a82:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0a86:	4604      	mov	r4, r0
   c0a88:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0a8a:	9301      	str	r3, [sp, #4]
   c0a8c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c0a8e:	f7ff fcdd 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c0a92:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0a96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0a9a:	4293      	cmp	r3, r2
   c0a9c:	4619      	mov	r1, r3
   c0a9e:	d00b      	beq.n	c0ab8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c0aa0:	6809      	ldr	r1, [r1, #0]
   c0aa2:	42a9      	cmp	r1, r5
   c0aa4:	f103 0304 	add.w	r3, r3, #4
   c0aa8:	d1f7      	bne.n	c0a9a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0aaa:	a801      	add	r0, sp, #4
   c0aac:	f7ff ff0d 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0ab0:	2500      	movs	r5, #0
}
   c0ab2:	4628      	mov	r0, r5
   c0ab4:	b003      	add	sp, #12
   c0ab6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0ab8:	4629      	mov	r1, r5
   c0aba:	4620      	mov	r0, r4
   c0abc:	f7ff ffba 	bl	c0a34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c0ac0:	4605      	mov	r5, r0
   c0ac2:	2800      	cmp	r0, #0
   c0ac4:	d0f1      	beq.n	c0aaa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c0ac6:	6863      	ldr	r3, [r4, #4]
   c0ac8:	2b01      	cmp	r3, #1
   c0aca:	d101      	bne.n	c0ad0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c0acc:	f7ff fe00 	bl	c06d0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0ad0:	a801      	add	r0, sp, #4
   c0ad2:	f7ff fefa 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c0ad6:	e7ec      	b.n	c0ab2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c0ad8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0ad8:	b570      	push	{r4, r5, r6, lr}
   c0ada:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c0adc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c0ae0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c0ae2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c0ae6:	4282      	cmp	r2, r0
   c0ae8:	d00f      	beq.n	c0b0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c0aea:	4601      	mov	r1, r0
            if (*p == value) {
   c0aec:	681d      	ldr	r5, [r3, #0]
   c0aee:	f851 6b04 	ldr.w	r6, [r1], #4
   c0af2:	42ae      	cmp	r6, r5
   c0af4:	d107      	bne.n	c0b06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0af6:	1a52      	subs	r2, r2, r1
   c0af8:	f003 fd1c 	bl	c4534 <memmove>
    --size_;
   c0afc:	6863      	ldr	r3, [r4, #4]
   c0afe:	3b01      	subs	r3, #1
   c0b00:	6063      	str	r3, [r4, #4]
    return true;
   c0b02:	2001      	movs	r0, #1
}
   c0b04:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c0b06:	4608      	mov	r0, r1
   c0b08:	e7ed      	b.n	c0ae6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c0b0a:	2000      	movs	r0, #0
   c0b0c:	e7fa      	b.n	c0b04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c0b0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0b0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c0b10:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c0b14:	4604      	mov	r4, r0
   c0b16:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c0b18:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0b1a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c0b1c:	f7ff fc96 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c0b20:	a901      	add	r1, sp, #4
   c0b22:	4620      	mov	r0, r4
   c0b24:	f7ff ffd8 	bl	c0ad8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0b28:	b118      	cbz	r0, c0b32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0b2a:	6863      	ldr	r3, [r4, #4]
   c0b2c:	b90b      	cbnz	r3, c0b32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c0b2e:	f7ff fddb 	bl	c06e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0b32:	a803      	add	r0, sp, #12
   c0b34:	f7ff fec9 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0b38:	b004      	add	sp, #16
   c0b3a:	bd10      	pop	{r4, pc}

000c0b3c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0b3c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c0b3e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c0b42:	2318      	movs	r3, #24
   c0b44:	4604      	mov	r4, r0
   c0b46:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0b4a:	42ae      	cmp	r6, r5
   c0b4c:	d015      	beq.n	c0b7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c0b4e:	f105 0110 	add.w	r1, r5, #16
   c0b52:	4620      	mov	r0, r4
   c0b54:	f7ff ffc0 	bl	c0ad8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0b58:	6863      	ldr	r3, [r4, #4]
   c0b5a:	b90b      	cbnz	r3, c0b60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0b5c:	f7ff fdc4 	bl	c06e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c0b60:	69e0      	ldr	r0, [r4, #28]
   c0b62:	6929      	ldr	r1, [r5, #16]
   c0b64:	6803      	ldr	r3, [r0, #0]
   c0b66:	68db      	ldr	r3, [r3, #12]
   c0b68:	4798      	blx	r3
        if (h.stream) {
   c0b6a:	6969      	ldr	r1, [r5, #20]
   c0b6c:	b119      	cbz	r1, c0b76 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c0b6e:	6a20      	ldr	r0, [r4, #32]
   c0b70:	6803      	ldr	r3, [r0, #0]
   c0b72:	68db      	ldr	r3, [r3, #12]
   c0b74:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0b76:	3518      	adds	r5, #24
   c0b78:	e7e7      	b.n	c0b4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0b7a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0b7e:	2618      	movs	r6, #24
   c0b80:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0b84:	42ae      	cmp	r6, r5
   c0b86:	d004      	beq.n	c0b92 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0b88:	4628      	mov	r0, r5
   c0b8a:	f000 fe5f 	bl	c184c <_ZN6StringD1Ev>
   c0b8e:	3518      	adds	r5, #24
   c0b90:	e7f8      	b.n	c0b84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c0b92:	2300      	movs	r3, #0
   c0b94:	6163      	str	r3, [r4, #20]
}
   c0b96:	bd70      	pop	{r4, r5, r6, pc}

000c0b98 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0b9a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0b9c:	f7ff fda4 	bl	c06e8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c0ba0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0ba4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0ba6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0ba8:	f7ff fc50 	bl	c044c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0bac:	4620      	mov	r0, r4
   c0bae:	f7ff ffc5 	bl	c0b3c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c0bb2:	a801      	add	r0, sp, #4
   c0bb4:	f7ff fe89 	bl	c08ca <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0bb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0bba:	b108      	cbz	r0, c0bc0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0bbc:	f7fd f83e 	bl	bdc3c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c0bc0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c0bc4:	2618      	movs	r6, #24
   c0bc6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0bca:	42ae      	cmp	r6, r5
   c0bcc:	d004      	beq.n	c0bd8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c0bce:	4628      	mov	r0, r5
   c0bd0:	f000 fe3c 	bl	c184c <_ZN6StringD1Ev>
   c0bd4:	3518      	adds	r5, #24
   c0bd6:	e7f8      	b.n	c0bca <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c0bd8:	6920      	ldr	r0, [r4, #16]
   c0bda:	f7fd fb55 	bl	be288 <free>
   c0bde:	6820      	ldr	r0, [r4, #0]
   c0be0:	f7fd fb52 	bl	be288 <free>
}
   c0be4:	4620      	mov	r0, r4
   c0be6:	b002      	add	sp, #8
   c0be8:	bd70      	pop	{r4, r5, r6, pc}
	...

000c0bec <__tcf_2>:
    static LogManager mgr;
   c0bec:	4801      	ldr	r0, [pc, #4]	; (c0bf4 <__tcf_2+0x8>)
   c0bee:	f7ff bfd3 	b.w	c0b98 <_ZN5spark10LogManagerD1Ev>
   c0bf2:	bf00      	nop
   c0bf4:	2003e674 	.word	0x2003e674

000c0bf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c0bf8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0bfc:	4604      	mov	r4, r0
   c0bfe:	460d      	mov	r5, r1
   c0c00:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0c02:	d915      	bls.n	c0c30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c0c04:	4290      	cmp	r0, r2
   c0c06:	d214      	bcs.n	c0c32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c0c08:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c0c0c:	1a75      	subs	r5, r6, r1
   c0c0e:	f1a1 0714 	sub.w	r7, r1, #20
   c0c12:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0c14:	42b7      	cmp	r7, r6
   c0c16:	d01a      	beq.n	c0c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c0c18:	b11c      	cbz	r4, c0c22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c0c1a:	4631      	mov	r1, r6
   c0c1c:	4620      	mov	r0, r4
   c0c1e:	f7ff fc78 	bl	c0512 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c0c22:	f106 0008 	add.w	r0, r6, #8
   c0c26:	f7ff fdf9 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0c2a:	3e14      	subs	r6, #20
   c0c2c:	3c14      	subs	r4, #20
   c0c2e:	e7f1      	b.n	c0c14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c0c30:	d00d      	beq.n	c0c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c0c32:	42b5      	cmp	r5, r6
   c0c34:	d00b      	beq.n	c0c4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0c36:	b11c      	cbz	r4, c0c40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0c38:	4629      	mov	r1, r5
   c0c3a:	4620      	mov	r0, r4
   c0c3c:	f7ff fc69 	bl	c0512 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c0c40:	f105 0008 	add.w	r0, r5, #8
   c0c44:	f7ff fdea 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0c48:	3514      	adds	r5, #20
   c0c4a:	3414      	adds	r4, #20
   c0c4c:	e7f1      	b.n	c0c32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c0c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0c50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c0c50:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c0c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0c54:	4604      	mov	r4, r0
   c0c56:	460d      	mov	r5, r1
   c0c58:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0c5a:	d914      	bls.n	c0c86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0c5c:	4290      	cmp	r0, r2
   c0c5e:	d213      	bcs.n	c0c88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c0c60:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0c64:	1a75      	subs	r5, r6, r1
   c0c66:	f1a1 0710 	sub.w	r7, r1, #16
   c0c6a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0c6c:	42b7      	cmp	r7, r6
   c0c6e:	d018      	beq.n	c0ca2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c0c70:	b11c      	cbz	r4, c0c7a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c0c72:	4631      	mov	r1, r6
   c0c74:	4620      	mov	r0, r4
   c0c76:	f000 fe65 	bl	c1944 <_ZN6StringC1EOS_>
                end->~T();
   c0c7a:	4630      	mov	r0, r6
   c0c7c:	f000 fde6 	bl	c184c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c0c80:	3e10      	subs	r6, #16
   c0c82:	3c10      	subs	r4, #16
   c0c84:	e7f2      	b.n	c0c6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0c86:	d00c      	beq.n	c0ca2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0c88:	42b5      	cmp	r5, r6
   c0c8a:	d00a      	beq.n	c0ca2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0c8c:	b11c      	cbz	r4, c0c96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c0c8e:	4629      	mov	r1, r5
   c0c90:	4620      	mov	r0, r4
   c0c92:	f000 fe57 	bl	c1944 <_ZN6StringC1EOS_>
                p->~T();
   c0c96:	4628      	mov	r0, r5
   c0c98:	f000 fdd8 	bl	c184c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0c9c:	3510      	adds	r5, #16
   c0c9e:	3410      	adds	r4, #16
   c0ca0:	e7f2      	b.n	c0c88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c0ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0ca4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0ca6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0ca8:	4605      	mov	r5, r0
        if (n > 0) {
   c0caa:	dd11      	ble.n	c0cd0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0cac:	0130      	lsls	r0, r6, #4
   c0cae:	f7fd fae3 	bl	be278 <malloc>
            if (!d) {
   c0cb2:	4604      	mov	r4, r0
   c0cb4:	b158      	cbz	r0, c0cce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0cb6:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0cba:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c0cbe:	f7ff ffc7 	bl	c0c50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c0cc2:	6828      	ldr	r0, [r5, #0]
   c0cc4:	f7fd fae0 	bl	be288 <free>
        data_ = d;
   c0cc8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c0cca:	60ae      	str	r6, [r5, #8]
        return true;
   c0ccc:	2001      	movs	r0, #1
    }
   c0cce:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c0cd0:	2400      	movs	r4, #0
   c0cd2:	e7f6      	b.n	c0cc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c0cd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0cd8:	4690      	mov	r8, r2
   c0cda:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c0cdc:	2300      	movs	r3, #0
   c0cde:	9103      	str	r1, [sp, #12]
    return size_;
   c0ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c0ce4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0ce6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c0ce8:	4299      	cmp	r1, r3
        capacity_(0) {
   c0cea:	e9c0 3300 	strd	r3, r3, [r0]
   c0cee:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c0cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c0cf6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c0cfa:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c0cfc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c0cfe:	dc23      	bgt.n	c0d48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c0d00:	e9d8 5700 	ldrd	r5, r7, [r8]
   c0d04:	2314      	movs	r3, #20
   c0d06:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c0d0a:	42af      	cmp	r7, r5
   c0d0c:	d03b      	beq.n	c0d86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c0d0e:	4629      	mov	r1, r5
   c0d10:	a80b      	add	r0, sp, #44	; 0x2c
   c0d12:	f000 fe17 	bl	c1944 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c0d16:	a90b      	add	r1, sp, #44	; 0x2c
   c0d18:	a80f      	add	r0, sp, #60	; 0x3c
   c0d1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c0d1c:	f000 fe12 	bl	c1944 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0d20:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0d24:	4299      	cmp	r1, r3
   c0d26:	da1b      	bge.n	c0d60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0d28:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0d2c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c0d30:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0d34:	4631      	mov	r1, r6
   c0d36:	f106 0010 	add.w	r0, r6, #16
   c0d3a:	f7ff ff89 	bl	c0c50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c0d3e:	b9ee      	cbnz	r6, c0d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c0d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0d42:	3301      	adds	r3, #1
   c0d44:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0d46:	e011      	b.n	c0d6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0d48:	a808      	add	r0, sp, #32
   c0d4a:	f7ff ffab 	bl	c0ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0d4e:	2800      	cmp	r0, #0
   c0d50:	d1d6      	bne.n	c0d00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c0d52:	a808      	add	r0, sp, #32
   c0d54:	f7fd fecd 	bl	beaf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0d58:	4620      	mov	r0, r4
   c0d5a:	b015      	add	sp, #84	; 0x54
   c0d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0d60:	3101      	adds	r1, #1
   c0d62:	a808      	add	r0, sp, #32
   c0d64:	f7ff ff9e 	bl	c0ca4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0d68:	2800      	cmp	r0, #0
   c0d6a:	d1dd      	bne.n	c0d28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0d6c:	a80f      	add	r0, sp, #60	; 0x3c
   c0d6e:	f000 fd6d 	bl	c184c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c0d72:	a80b      	add	r0, sp, #44	; 0x2c
   c0d74:	f000 fd6a 	bl	c184c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0d78:	3514      	adds	r5, #20
   c0d7a:	e7c6      	b.n	c0d0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0d7c:	a90f      	add	r1, sp, #60	; 0x3c
   c0d7e:	4630      	mov	r0, r6
   c0d80:	f000 fde0 	bl	c1944 <_ZN6StringC1EOS_>
   c0d84:	e7dc      	b.n	c0d40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0d86:	2600      	movs	r6, #0
   c0d88:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0d8c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c0d8e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c0d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0d96:	429e      	cmp	r6, r3
   c0d98:	da7c      	bge.n	c0e94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0d9a:	0133      	lsls	r3, r6, #4
   c0d9c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c0d9e:	9306      	str	r3, [sp, #24]
        if (!category) {
   c0da0:	b90b      	cbnz	r3, c0da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c0da2:	3601      	adds	r6, #1
   c0da4:	e7f5      	b.n	c0d92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0da6:	2300      	movs	r3, #0
   c0da8:	9307      	str	r3, [sp, #28]
   c0daa:	fb09 f306 	mul.w	r3, r9, r6
   c0dae:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c0db0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c0db2:	a907      	add	r1, sp, #28
   c0db4:	a806      	add	r0, sp, #24
   c0db6:	f7ff fb22 	bl	c03fe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0dba:	4682      	mov	sl, r0
   c0dbc:	2800      	cmp	r0, #0
   c0dbe:	d0f0      	beq.n	c0da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c0dc0:	f04f 0300 	mov.w	r3, #0
   c0dc4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0dc8:	4601      	mov	r1, r0
   c0dca:	9a07      	ldr	r2, [sp, #28]
   c0dcc:	f10d 0317 	add.w	r3, sp, #23
   c0dd0:	4628      	mov	r0, r5
   c0dd2:	f7ff fbb1 	bl	c0538 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0dd6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c0dda:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0ddc:	2f00      	cmp	r7, #0
   c0dde:	d14a      	bne.n	c0e76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c0de0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c0de4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c0de8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c0dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0df0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c0df4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c0df8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0dfa:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c0dfe:	4293      	cmp	r3, r2
   c0e00:	db17      	blt.n	c0e32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c0e02:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c0e06:	f1ba 0f00 	cmp.w	sl, #0
   c0e0a:	dd30      	ble.n	c0e6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c0e0c:	fb09 f00a 	mul.w	r0, r9, sl
   c0e10:	f7fd fa32 	bl	be278 <malloc>
            if (!d) {
   c0e14:	4683      	mov	fp, r0
   c0e16:	b360      	cbz	r0, c0e72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c0e18:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0e1c:	fb09 1202 	mla	r2, r9, r2, r1
   c0e20:	f7ff feea 	bl	c0bf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0e24:	6828      	ldr	r0, [r5, #0]
   c0e26:	f7fd fa2f 	bl	be288 <free>
        data_ = d;
   c0e2a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c0e2e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c0e32:	682b      	ldr	r3, [r5, #0]
   c0e34:	9a01      	ldr	r2, [sp, #4]
   c0e36:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0e3a:	686a      	ldr	r2, [r5, #4]
   c0e3c:	4651      	mov	r1, sl
   c0e3e:	fb09 3202 	mla	r2, r9, r2, r3
   c0e42:	f10a 0014 	add.w	r0, sl, #20
   c0e46:	f7ff fed7 	bl	c0bf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0e4a:	f1ba 0f00 	cmp.w	sl, #0
   c0e4e:	d003      	beq.n	c0e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c0e50:	a90f      	add	r1, sp, #60	; 0x3c
   c0e52:	4650      	mov	r0, sl
   c0e54:	f7ff fb5d 	bl	c0512 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0e58:	686b      	ldr	r3, [r5, #4]
   c0e5a:	3301      	adds	r3, #1
   c0e5c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c0e5e:	a811      	add	r0, sp, #68	; 0x44
   c0e60:	f7ff fcdc 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0e64:	b13f      	cbz	r7, c0e76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0e66:	a80b      	add	r0, sp, #44	; 0x2c
   c0e68:	f7ff fcd8 	bl	c081c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0e6c:	e771      	b.n	c0d52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c0e6e:	46bb      	mov	fp, r7
   c0e70:	e7d8      	b.n	c0e24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0e72:	2701      	movs	r7, #1
   c0e74:	e7f3      	b.n	c0e5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0e76:	9b01      	ldr	r3, [sp, #4]
   c0e78:	682d      	ldr	r5, [r5, #0]
   c0e7a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c0e7e:	9b06      	ldr	r3, [sp, #24]
   c0e80:	781b      	ldrb	r3, [r3, #0]
   c0e82:	b92b      	cbnz	r3, c0e90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0e84:	f8d8 3000 	ldr.w	r3, [r8]
   c0e88:	9a02      	ldr	r2, [sp, #8]
   c0e8a:	4413      	add	r3, r2
   c0e8c:	7c1b      	ldrb	r3, [r3, #16]
   c0e8e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c0e90:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c0e92:	e78e      	b.n	c0db2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0e94:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0e96:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0e98:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0e9a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0e9c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c0e9e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c0ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c0ea2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0ea4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0ea6:	60a2      	str	r2, [r4, #8]
   c0ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0eaa:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0eac:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c0eae:	60e2      	str	r2, [r4, #12]
   c0eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c0eb2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0eb4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0eb6:	6122      	str	r2, [r4, #16]
   c0eb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0eba:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0ebc:	9b03      	ldr	r3, [sp, #12]
   c0ebe:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c0ec0:	6162      	str	r2, [r4, #20]
   c0ec2:	7623      	strb	r3, [r4, #24]
   c0ec4:	e7cf      	b.n	c0e66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c0ec8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0eca:	4604      	mov	r4, r0
   c0ecc:	b087      	sub	sp, #28
   c0ece:	460d      	mov	r5, r1
        filter_(level, filters) {
   c0ed0:	4626      	mov	r6, r4
        stream_(&stream) {
   c0ed2:	4619      	mov	r1, r3
   c0ed4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c0ed6:	4617      	mov	r7, r2
        stream_(&stream) {
   c0ed8:	f7fa fd98 	bl	bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c0edc:	4b0b      	ldr	r3, [pc, #44]	; (c0f0c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c0ede:	f846 3b04 	str.w	r3, [r6], #4
   c0ee2:	4669      	mov	r1, sp
   c0ee4:	a803      	add	r0, sp, #12
   c0ee6:	f7fa fd91 	bl	bba0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c0eea:	aa03      	add	r2, sp, #12
   c0eec:	4639      	mov	r1, r7
   c0eee:	4630      	mov	r0, r6
   c0ef0:	f7ff fef0 	bl	c0cd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0ef4:	a803      	add	r0, sp, #12
   c0ef6:	f7fa fd0d 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c0efa:	4668      	mov	r0, sp
   c0efc:	f7fa fd0a 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0f00:	4b03      	ldr	r3, [pc, #12]	; (c0f10 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c0f02:	6023      	str	r3, [r4, #0]
}
   c0f04:	4620      	mov	r0, r4
        stream_(&stream) {
   c0f06:	6225      	str	r5, [r4, #32]
}
   c0f08:	b007      	add	sp, #28
   c0f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c0f0c:	000c7acc 	.word	0x000c7acc
   c0f10:	000c7f50 	.word	0x000c7f50

000c0f14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c0f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0f16:	460f      	mov	r7, r1
   c0f18:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0f1a:	491d      	ldr	r1, [pc, #116]	; (c0f90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c0f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0f1e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c0f20:	4616      	mov	r6, r2
   c0f22:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0f24:	f003 fb7c 	bl	c4620 <strcmp>
   c0f28:	b9c0      	cbnz	r0, c0f5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0f2a:	b1a4      	cbz	r4, c0f56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0f2c:	4629      	mov	r1, r5
   c0f2e:	a801      	add	r0, sp, #4
   c0f30:	f7ff fcbc 	bl	c08ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0f34:	4917      	ldr	r1, [pc, #92]	; (c0f94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0f36:	2024      	movs	r0, #36	; 0x24
   c0f38:	f001 f8ec 	bl	c2114 <_ZnwjRKSt9nothrow_t>
   c0f3c:	4605      	mov	r5, r0
   c0f3e:	b130      	cbz	r0, c0f4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c0f40:	ab01      	add	r3, sp, #4
   c0f42:	4632      	mov	r2, r6
   c0f44:	4621      	mov	r1, r4
   c0f46:	f7ff ffbf 	bl	c0ec8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0f4a:	4b13      	ldr	r3, [pc, #76]	; (c0f98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0f4c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0f4e:	a801      	add	r0, sp, #4
   c0f50:	f7fa fce0 	bl	bb914 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0f54:	462c      	mov	r4, r5
}
   c0f56:	4620      	mov	r0, r4
   c0f58:	b005      	add	sp, #20
   c0f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0f5c:	490f      	ldr	r1, [pc, #60]	; (c0f9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c0f5e:	4638      	mov	r0, r7
   c0f60:	f003 fb5e 	bl	c4620 <strcmp>
   c0f64:	b990      	cbnz	r0, c0f8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c0f66:	2c00      	cmp	r4, #0
   c0f68:	d0f5      	beq.n	c0f56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0f6a:	4629      	mov	r1, r5
   c0f6c:	a801      	add	r0, sp, #4
   c0f6e:	f7ff fc9d 	bl	c08ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0f72:	4908      	ldr	r1, [pc, #32]	; (c0f94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0f74:	2024      	movs	r0, #36	; 0x24
   c0f76:	f001 f8cd 	bl	c2114 <_ZnwjRKSt9nothrow_t>
   c0f7a:	4605      	mov	r5, r0
   c0f7c:	2800      	cmp	r0, #0
   c0f7e:	d0e6      	beq.n	c0f4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c0f80:	ab01      	add	r3, sp, #4
   c0f82:	4632      	mov	r2, r6
   c0f84:	4621      	mov	r1, r4
   c0f86:	f7ff ff9f 	bl	c0ec8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0f8a:	e7e0      	b.n	c0f4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0f8c:	2400      	movs	r4, #0
   c0f8e:	e7e2      	b.n	c0f56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c0f90:	000c7ed5 	.word	0x000c7ed5
   c0f94:	000c8068 	.word	0x000c8068
   c0f98:	000c7f68 	.word	0x000c7f68
   c0f9c:	000c7ed9 	.word	0x000c7ed9

000c0fa0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c0fa0:	4b01      	ldr	r3, [pc, #4]	; (c0fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c0fa2:	4a02      	ldr	r2, [pc, #8]	; (c0fac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0fa4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c0fa6:	4770      	bx	lr
   c0fa8:	2003e670 	.word	0x2003e670
   c0fac:	000c7eea 	.word	0x000c7eea

000c0fb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0fb4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c0fb6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0fba:	4604      	mov	r4, r0
   c0fbc:	460e      	mov	r6, r1
   c0fbe:	4617      	mov	r7, r2
   c0fc0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c0fc2:	f000 fed7 	bl	c1d74 <_Z16_fetch_usbserialv>
   c0fc6:	4581      	cmp	r9, r0
   c0fc8:	d04c      	beq.n	c1064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c0fca:	792b      	ldrb	r3, [r5, #4]
   c0fcc:	0719      	lsls	r1, r3, #28
   c0fce:	d504      	bpl.n	c0fda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c0fd0:	696a      	ldr	r2, [r5, #20]
   c0fd2:	4954      	ldr	r1, [pc, #336]	; (c1124 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c0fd4:	4620      	mov	r0, r4
   c0fd6:	f7ff fa8d 	bl	c04f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c0fda:	f1b8 0f00 	cmp.w	r8, #0
   c0fde:	d00d      	beq.n	c0ffc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c0fe0:	215b      	movs	r1, #91	; 0x5b
   c0fe2:	4620      	mov	r0, r4
   c0fe4:	f7ff fa7a 	bl	c04dc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c0fe8:	4641      	mov	r1, r8
   c0fea:	4620      	mov	r0, r4
   c0fec:	f7ff fa67 	bl	c04be <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c0ff0:	6823      	ldr	r3, [r4, #0]
   c0ff2:	494d      	ldr	r1, [pc, #308]	; (c1128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c0ff4:	68db      	ldr	r3, [r3, #12]
   c0ff6:	2202      	movs	r2, #2
   c0ff8:	4620      	mov	r0, r4
   c0ffa:	4798      	blx	r3
    if (attr.has_file) {
   c0ffc:	792b      	ldrb	r3, [r5, #4]
   c0ffe:	07da      	lsls	r2, r3, #31
   c1000:	d523      	bpl.n	c104a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c1002:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c1006:	212f      	movs	r1, #47	; 0x2f
   c1008:	4640      	mov	r0, r8
   c100a:	f003 fb86 	bl	c471a <strrchr>
    if (s1) {
   c100e:	b108      	cbz	r0, c1014 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c1010:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c1014:	4641      	mov	r1, r8
   c1016:	4620      	mov	r0, r4
   c1018:	f7ff fa51 	bl	c04be <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c101c:	792b      	ldrb	r3, [r5, #4]
   c101e:	079b      	lsls	r3, r3, #30
   c1020:	d508      	bpl.n	c1034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c1022:	213a      	movs	r1, #58	; 0x3a
   c1024:	4620      	mov	r0, r4
   c1026:	f7ff fa59 	bl	c04dc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c102a:	68ea      	ldr	r2, [r5, #12]
   c102c:	493f      	ldr	r1, [pc, #252]	; (c112c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c102e:	4620      	mov	r0, r4
   c1030:	f7ff fa60 	bl	c04f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c1034:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c1036:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c1038:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c103c:	68db      	ldr	r3, [r3, #12]
   c103e:	bf14      	ite	ne
   c1040:	493b      	ldrne	r1, [pc, #236]	; (c1130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c1042:	493c      	ldreq	r1, [pc, #240]	; (c1134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c1044:	2202      	movs	r2, #2
            write(": ", 2);
   c1046:	4620      	mov	r0, r4
   c1048:	4798      	blx	r3
    if (attr.has_function) {
   c104a:	792b      	ldrb	r3, [r5, #4]
   c104c:	0758      	lsls	r0, r3, #29
   c104e:	d51d      	bpl.n	c108c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1050:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c1052:	460b      	mov	r3, r1
   c1054:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c1056:	f813 0b01 	ldrb.w	r0, [r3], #1
   c105a:	b160      	cbz	r0, c1076 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c105c:	2820      	cmp	r0, #32
   c105e:	d108      	bne.n	c1072 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c1060:	4619      	mov	r1, r3
   c1062:	e7f7      	b.n	c1054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c1064:	4834      	ldr	r0, [pc, #208]	; (c1138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c1066:	f000 f966 	bl	c1336 <_ZN5spark12NetworkClass9listeningEv>
   c106a:	2800      	cmp	r0, #0
   c106c:	d0ad      	beq.n	c0fca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c1072:	2828      	cmp	r0, #40	; 0x28
   c1074:	d1ee      	bne.n	c1054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c1076:	6823      	ldr	r3, [r4, #0]
   c1078:	1a52      	subs	r2, r2, r1
   c107a:	68db      	ldr	r3, [r3, #12]
   c107c:	4620      	mov	r0, r4
   c107e:	4798      	blx	r3
        write("(): ", 4);
   c1080:	6823      	ldr	r3, [r4, #0]
   c1082:	492e      	ldr	r1, [pc, #184]	; (c113c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c1084:	68db      	ldr	r3, [r3, #12]
   c1086:	2204      	movs	r2, #4
   c1088:	4620      	mov	r0, r4
   c108a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c108c:	2100      	movs	r1, #0
   c108e:	4638      	mov	r0, r7
   c1090:	f7fc fff4 	bl	be07c <log_level_name>
   c1094:	4601      	mov	r1, r0
    write(s);
   c1096:	4620      	mov	r0, r4
   c1098:	f7ff fa11 	bl	c04be <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c109c:	6823      	ldr	r3, [r4, #0]
   c109e:	4925      	ldr	r1, [pc, #148]	; (c1134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c10a0:	68db      	ldr	r3, [r3, #12]
   c10a2:	2202      	movs	r2, #2
   c10a4:	4620      	mov	r0, r4
   c10a6:	4798      	blx	r3
    if (msg) {
   c10a8:	b11e      	cbz	r6, c10b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c10aa:	4631      	mov	r1, r6
   c10ac:	4620      	mov	r0, r4
   c10ae:	f7ff fa06 	bl	c04be <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c10b2:	792b      	ldrb	r3, [r5, #4]
   c10b4:	f013 0f30 	tst.w	r3, #48	; 0x30
   c10b8:	d02c      	beq.n	c1114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c10ba:	6823      	ldr	r3, [r4, #0]
   c10bc:	4920      	ldr	r1, [pc, #128]	; (c1140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c10be:	68db      	ldr	r3, [r3, #12]
   c10c0:	2202      	movs	r2, #2
   c10c2:	4620      	mov	r0, r4
   c10c4:	4798      	blx	r3
        if (attr.has_code) {
   c10c6:	792b      	ldrb	r3, [r5, #4]
   c10c8:	06d9      	lsls	r1, r3, #27
   c10ca:	d50a      	bpl.n	c10e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c10cc:	6823      	ldr	r3, [r4, #0]
   c10ce:	491d      	ldr	r1, [pc, #116]	; (c1144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c10d0:	68db      	ldr	r3, [r3, #12]
   c10d2:	2207      	movs	r2, #7
   c10d4:	4620      	mov	r0, r4
   c10d6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c10d8:	69aa      	ldr	r2, [r5, #24]
   c10da:	491b      	ldr	r1, [pc, #108]	; (c1148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c10dc:	4620      	mov	r0, r4
   c10de:	f7ff fa09 	bl	c04f4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c10e2:	792b      	ldrb	r3, [r5, #4]
   c10e4:	069a      	lsls	r2, r3, #26
   c10e6:	d511      	bpl.n	c110c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c10e8:	06db      	lsls	r3, r3, #27
   c10ea:	d505      	bpl.n	c10f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c10ec:	6823      	ldr	r3, [r4, #0]
   c10ee:	4910      	ldr	r1, [pc, #64]	; (c1130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c10f0:	68db      	ldr	r3, [r3, #12]
   c10f2:	2202      	movs	r2, #2
   c10f4:	4620      	mov	r0, r4
   c10f6:	4798      	blx	r3
            write("details = ", 10);
   c10f8:	6823      	ldr	r3, [r4, #0]
   c10fa:	4914      	ldr	r1, [pc, #80]	; (c114c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c10fc:	68db      	ldr	r3, [r3, #12]
   c10fe:	4620      	mov	r0, r4
   c1100:	220a      	movs	r2, #10
   c1102:	4798      	blx	r3
            write(attr.details);
   c1104:	69e9      	ldr	r1, [r5, #28]
   c1106:	4620      	mov	r0, r4
   c1108:	f7ff f9d9 	bl	c04be <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c110c:	215d      	movs	r1, #93	; 0x5d
   c110e:	4620      	mov	r0, r4
   c1110:	f7ff f9e4 	bl	c04dc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c1114:	6823      	ldr	r3, [r4, #0]
   c1116:	490e      	ldr	r1, [pc, #56]	; (c1150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c1118:	68db      	ldr	r3, [r3, #12]
   c111a:	4620      	mov	r0, r4
   c111c:	2202      	movs	r2, #2
}
   c111e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c1122:	4718      	bx	r3
   c1124:	000c7eee 	.word	0x000c7eee
   c1128:	000c7ef5 	.word	0x000c7ef5
   c112c:	000c7670 	.word	0x000c7670
   c1130:	000c7ef8 	.word	0x000c7ef8
   c1134:	000c7efd 	.word	0x000c7efd
   c1138:	2003e69c 	.word	0x2003e69c
   c113c:	000c7efb 	.word	0x000c7efb
   c1140:	000c7f00 	.word	0x000c7f00
   c1144:	000c7f03 	.word	0x000c7f03
   c1148:	000c7f0b 	.word	0x000c7f0b
   c114c:	000c7f0e 	.word	0x000c7f0e
   c1150:	000c7f19 	.word	0x000c7f19

000c1154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c1154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1158:	b085      	sub	sp, #20
    return stream_;
   c115a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c115e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c1160:	4605      	mov	r5, r0
   c1162:	460f      	mov	r7, r1
   c1164:	4690      	mov	r8, r2
   c1166:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c1168:	f000 fe04 	bl	c1d74 <_Z16_fetch_usbserialv>
   c116c:	4581      	cmp	r9, r0
   c116e:	d105      	bne.n	c117c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c1170:	4849      	ldr	r0, [pc, #292]	; (c1298 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c1172:	f000 f8e0 	bl	c1336 <_ZN5spark12NetworkClass9listeningEv>
   c1176:	2800      	cmp	r0, #0
   c1178:	f040 808a 	bne.w	c1290 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c117c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c117e:	4a47      	ldr	r2, [pc, #284]	; (c129c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c1180:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c1182:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c1186:	a801      	add	r0, sp, #4
        strm_(stream) {
   c1188:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c118a:	f88d 9008 	strb.w	r9, [sp, #8]
   c118e:	f7ff f850 	bl	c0232 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c1192:	4649      	mov	r1, r9
   c1194:	4640      	mov	r0, r8
   c1196:	f7fc ff71 	bl	be07c <log_level_name>
    json.name("l", 1).value(s);
   c119a:	4941      	ldr	r1, [pc, #260]	; (c12a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c119c:	4680      	mov	r8, r0
   c119e:	2201      	movs	r2, #1
   c11a0:	a801      	add	r0, sp, #4
   c11a2:	f7ff f8d5 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c11a6:	4641      	mov	r1, r8
   c11a8:	f7ff f97b 	bl	c04a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c11ac:	b13f      	cbz	r7, c11be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c11ae:	493d      	ldr	r1, [pc, #244]	; (c12a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c11b0:	2201      	movs	r2, #1
   c11b2:	a801      	add	r0, sp, #4
   c11b4:	f7ff f8cc 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c11b8:	4639      	mov	r1, r7
   c11ba:	f7ff f972 	bl	c04a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c11be:	b13e      	cbz	r6, c11d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c11c0:	4939      	ldr	r1, [pc, #228]	; (c12a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c11c2:	2201      	movs	r2, #1
   c11c4:	a801      	add	r0, sp, #4
   c11c6:	f7ff f8c3 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c11ca:	4631      	mov	r1, r6
   c11cc:	f7ff f969 	bl	c04a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c11d0:	7923      	ldrb	r3, [r4, #4]
   c11d2:	07df      	lsls	r7, r3, #31
   c11d4:	d50e      	bpl.n	c11f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c11d6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c11d8:	212f      	movs	r1, #47	; 0x2f
   c11da:	4630      	mov	r0, r6
   c11dc:	f003 fa9d 	bl	c471a <strrchr>
    if (s1) {
   c11e0:	b100      	cbz	r0, c11e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c11e2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c11e4:	4931      	ldr	r1, [pc, #196]	; (c12ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c11e6:	2201      	movs	r2, #1
   c11e8:	a801      	add	r0, sp, #4
   c11ea:	f7ff f8b1 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c11ee:	4631      	mov	r1, r6
   c11f0:	f7ff f957 	bl	c04a2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c11f4:	7923      	ldrb	r3, [r4, #4]
   c11f6:	079e      	lsls	r6, r3, #30
   c11f8:	d507      	bpl.n	c120a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c11fa:	492d      	ldr	r1, [pc, #180]	; (c12b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c11fc:	2202      	movs	r2, #2
   c11fe:	a801      	add	r0, sp, #4
   c1200:	f7ff f8a6 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c1204:	68e1      	ldr	r1, [r4, #12]
   c1206:	f7ff f821 	bl	c024c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c120a:	7923      	ldrb	r3, [r4, #4]
   c120c:	0758      	lsls	r0, r3, #29
   c120e:	d514      	bpl.n	c123a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c1210:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c1212:	4633      	mov	r3, r6
   c1214:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c1216:	f813 2b01 	ldrb.w	r2, [r3], #1
   c121a:	b12a      	cbz	r2, c1228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c121c:	2a20      	cmp	r2, #32
   c121e:	d101      	bne.n	c1224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c1220:	461e      	mov	r6, r3
   c1222:	e7f7      	b.n	c1214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c1224:	2a28      	cmp	r2, #40	; 0x28
   c1226:	d1f5      	bne.n	c1214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c1228:	4922      	ldr	r1, [pc, #136]	; (c12b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c122a:	2202      	movs	r2, #2
   c122c:	a801      	add	r0, sp, #4
   c122e:	f7ff f88f 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c1232:	1bba      	subs	r2, r7, r6
   c1234:	4631      	mov	r1, r6
   c1236:	f7ff f89b 	bl	c0370 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c123a:	7923      	ldrb	r3, [r4, #4]
   c123c:	0719      	lsls	r1, r3, #28
   c123e:	d507      	bpl.n	c1250 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c1240:	491d      	ldr	r1, [pc, #116]	; (c12b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c1242:	2201      	movs	r2, #1
   c1244:	a801      	add	r0, sp, #4
   c1246:	f7ff f883 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c124a:	6961      	ldr	r1, [r4, #20]
   c124c:	f7ff f810 	bl	c0270 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c1250:	7923      	ldrb	r3, [r4, #4]
   c1252:	06da      	lsls	r2, r3, #27
   c1254:	d508      	bpl.n	c1268 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c1256:	2204      	movs	r2, #4
   c1258:	4918      	ldr	r1, [pc, #96]	; (c12bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c125a:	eb0d 0002 	add.w	r0, sp, r2
   c125e:	f7ff f877 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c1262:	69a1      	ldr	r1, [r4, #24]
   c1264:	f7fe fff2 	bl	c024c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c1268:	7923      	ldrb	r3, [r4, #4]
   c126a:	069b      	lsls	r3, r3, #26
   c126c:	d507      	bpl.n	c127e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c126e:	4914      	ldr	r1, [pc, #80]	; (c12c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c1270:	2206      	movs	r2, #6
   c1272:	a801      	add	r0, sp, #4
   c1274:	f7ff f86c 	bl	c0350 <_ZN5spark10JSONWriter4nameEPKcj>
   c1278:	69e1      	ldr	r1, [r4, #28]
   c127a:	f7ff f912 	bl	c04a2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c127e:	a801      	add	r0, sp, #4
   c1280:	f7fe ffc1 	bl	c0206 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c1284:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c1286:	490f      	ldr	r1, [pc, #60]	; (c12c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c1288:	6803      	ldr	r3, [r0, #0]
   c128a:	2202      	movs	r2, #2
   c128c:	68db      	ldr	r3, [r3, #12]
   c128e:	4798      	blx	r3
}
   c1290:	b005      	add	sp, #20
   c1292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c1296:	bf00      	nop
   c1298:	2003e69c 	.word	0x2003e69c
   c129c:	000c7f38 	.word	0x000c7f38
   c12a0:	000c7ecb 	.word	0x000c7ecb
   c12a4:	000c7f1c 	.word	0x000c7f1c
   c12a8:	000c8886 	.word	0x000c8886
   c12ac:	000c76f1 	.word	0x000c76f1
   c12b0:	000c7f1e 	.word	0x000c7f1e
   c12b4:	000c7f21 	.word	0x000c7f21
   c12b8:	000c78f7 	.word	0x000c78f7
   c12bc:	000c7f24 	.word	0x000c7f24
   c12c0:	000c7f29 	.word	0x000c7f29
   c12c4:	000c7f19 	.word	0x000c7f19

000c12c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c12c8:	2300      	movs	r3, #0
   c12ca:	6840      	ldr	r0, [r0, #4]
   c12cc:	461a      	mov	r2, r3
   c12ce:	f7fc bf73 	b.w	be1b8 <network_connect>

000c12d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c12d2:	6840      	ldr	r0, [r0, #4]
   c12d4:	2200      	movs	r2, #0
   c12d6:	2102      	movs	r1, #2
   c12d8:	f7fc bf7e 	b.w	be1d8 <network_disconnect>

000c12dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c12dc:	2200      	movs	r2, #0
   c12de:	6840      	ldr	r0, [r0, #4]
   c12e0:	4611      	mov	r1, r2
   c12e2:	f7fc bf71 	b.w	be1c8 <network_connecting>

000c12e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c12e6:	2200      	movs	r2, #0
   c12e8:	6840      	ldr	r0, [r0, #4]
   c12ea:	4611      	mov	r1, r2
   c12ec:	f7fc bf7c 	b.w	be1e8 <network_ready>

000c12f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c12f0:	2300      	movs	r3, #0
   c12f2:	6840      	ldr	r0, [r0, #4]
   c12f4:	461a      	mov	r2, r3
   c12f6:	4619      	mov	r1, r3
   c12f8:	f7fc bf7e 	b.w	be1f8 <network_on>

000c12fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c12fc:	2300      	movs	r3, #0
   c12fe:	6840      	ldr	r0, [r0, #4]
   c1300:	461a      	mov	r2, r3
   c1302:	4619      	mov	r1, r3
   c1304:	f7fc bf80 	b.w	be208 <network_off>

000c1308 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c1308:	6840      	ldr	r0, [r0, #4]
   c130a:	2100      	movs	r1, #0
   c130c:	f7fc bfa4 	b.w	be258 <network_is_on>

000c1310 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1310:	6840      	ldr	r0, [r0, #4]
   c1312:	2100      	movs	r1, #0
   c1314:	f7fc bfa8 	b.w	be268 <network_is_off>

000c1318 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1318:	6840      	ldr	r0, [r0, #4]
   c131a:	2200      	movs	r2, #0
   c131c:	f081 0101 	eor.w	r1, r1, #1
   c1320:	f7fc bf7a 	b.w	be218 <network_listen>

000c1324 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c1324:	6840      	ldr	r0, [r0, #4]
   c1326:	2200      	movs	r2, #0
   c1328:	f7fc bf86 	b.w	be238 <network_set_listen_timeout>

000c132c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c132c:	2200      	movs	r2, #0
   c132e:	6840      	ldr	r0, [r0, #4]
   c1330:	4611      	mov	r1, r2
   c1332:	f7fc bf89 	b.w	be248 <network_get_listen_timeout>

000c1336 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c1336:	2200      	movs	r2, #0
   c1338:	6840      	ldr	r0, [r0, #4]
   c133a:	4611      	mov	r1, r2
   c133c:	f7fc bf74 	b.w	be228 <network_listening>

000c1340 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1344:	b095      	sub	sp, #84	; 0x54
   c1346:	4614      	mov	r4, r2
   c1348:	460d      	mov	r5, r1
   c134a:	4607      	mov	r7, r0
    IPAddress addr;
   c134c:	f7fe fe0a 	bl	bff64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1350:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c1352:	221c      	movs	r2, #28
   c1354:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1356:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1358:	f003 f906 	bl	c4568 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c135c:	2340      	movs	r3, #64	; 0x40
   c135e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1360:	4620      	mov	r0, r4
   c1362:	466b      	mov	r3, sp
   c1364:	aa0c      	add	r2, sp, #48	; 0x30
   c1366:	2100      	movs	r1, #0
   c1368:	f7fc fd78 	bl	bde5c <netdb_getaddrinfo>
    if (!r) {
   c136c:	4604      	mov	r4, r0
   c136e:	2800      	cmp	r0, #0
   c1370:	d14b      	bne.n	c140a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1372:	4602      	mov	r2, r0
   c1374:	2101      	movs	r1, #1
   c1376:	6868      	ldr	r0, [r5, #4]
   c1378:	f7fc ff36 	bl	be1e8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c137c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c137e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1380:	4622      	mov	r2, r4
   c1382:	6868      	ldr	r0, [r5, #4]
   c1384:	f7fc ff30 	bl	be1e8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1388:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c138a:	4681      	mov	r9, r0
        bool ok = false;
   c138c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c138e:	2e00      	cmp	r6, #0
   c1390:	d03b      	beq.n	c140a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c1392:	2900      	cmp	r1, #0
   c1394:	d139      	bne.n	c140a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c1396:	6873      	ldr	r3, [r6, #4]
   c1398:	2b02      	cmp	r3, #2
   c139a:	d003      	beq.n	c13a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c139c:	2b0a      	cmp	r3, #10
   c139e:	d011      	beq.n	c13c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c13a0:	69f6      	ldr	r6, [r6, #28]
   c13a2:	e7f4      	b.n	c138e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c13a4:	f1b8 0f00 	cmp.w	r8, #0
   c13a8:	d0fa      	beq.n	c13a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c13aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c13ac:	a806      	add	r0, sp, #24
   c13ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c13b0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c13b2:	f7fe fe05 	bl	bffc0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c13b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c13b8:	1d3c      	adds	r4, r7, #4
   c13ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c13bc:	682b      	ldr	r3, [r5, #0]
   c13be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c13c0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c13c2:	e7ed      	b.n	c13a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c13c4:	f1b9 0f00 	cmp.w	r9, #0
   c13c8:	d0ea      	beq.n	c13a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c13ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c13cc:	2210      	movs	r2, #16
   c13ce:	a801      	add	r0, sp, #4
   c13d0:	f003 f8ca 	bl	c4568 <memset>
                    a.v = 6;
   c13d4:	2306      	movs	r3, #6
   c13d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c13da:	ad01      	add	r5, sp, #4
   c13dc:	f104 0308 	add.w	r3, r4, #8
   c13e0:	3418      	adds	r4, #24
   c13e2:	6818      	ldr	r0, [r3, #0]
   c13e4:	6859      	ldr	r1, [r3, #4]
   c13e6:	462a      	mov	r2, r5
   c13e8:	c203      	stmia	r2!, {r0, r1}
   c13ea:	3308      	adds	r3, #8
   c13ec:	42a3      	cmp	r3, r4
   c13ee:	4615      	mov	r5, r2
   c13f0:	d1f7      	bne.n	c13e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c13f2:	a901      	add	r1, sp, #4
   c13f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c13f6:	ad07      	add	r5, sp, #28
   c13f8:	f7fe fdc2 	bl	bff80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c13fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c13fe:	1d3c      	adds	r4, r7, #4
   c1400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1402:	682b      	ldr	r3, [r5, #0]
   c1404:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1406:	4649      	mov	r1, r9
   c1408:	e7ca      	b.n	c13a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c140a:	9800      	ldr	r0, [sp, #0]
   c140c:	f7fc fd1e 	bl	bde4c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1410:	4638      	mov	r0, r7
   c1412:	b015      	add	sp, #84	; 0x54
   c1414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1418 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1418:	4b02      	ldr	r3, [pc, #8]	; (c1424 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c141a:	4a03      	ldr	r2, [pc, #12]	; (c1428 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c141c:	601a      	str	r2, [r3, #0]
   c141e:	2200      	movs	r2, #0
   c1420:	605a      	str	r2, [r3, #4]

} // spark
   c1422:	4770      	bx	lr
   c1424:	2003e69c 	.word	0x2003e69c
   c1428:	000c7fb0 	.word	0x000c7fb0

000c142c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c142e:	4606      	mov	r6, r0
   c1430:	460d      	mov	r5, r1
  size_t n = 0;
   c1432:	188f      	adds	r7, r1, r2
   c1434:	2400      	movs	r4, #0
  while (size--) {
   c1436:	42bd      	cmp	r5, r7
   c1438:	d00c      	beq.n	c1454 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c143a:	6833      	ldr	r3, [r6, #0]
   c143c:	f815 1b01 	ldrb.w	r1, [r5], #1
   c1440:	689b      	ldr	r3, [r3, #8]
   c1442:	4630      	mov	r0, r6
   c1444:	4798      	blx	r3
     if (chunk>=0)
   c1446:	1e03      	subs	r3, r0, #0
   c1448:	db01      	blt.n	c144e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c144a:	441c      	add	r4, r3
  while (size--) {
   c144c:	e7f3      	b.n	c1436 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c144e:	2c00      	cmp	r4, #0
   c1450:	bf08      	it	eq
   c1452:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c1454:	4620      	mov	r0, r4
   c1456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1458 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c1458:	b508      	push	{r3, lr}
  return write(str);
   c145a:	f7fb fe97 	bl	bd18c <_ZN5Print5writeEPKc>
}
   c145e:	bd08      	pop	{r3, pc}

000c1460 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c1460:	6803      	ldr	r3, [r0, #0]
   c1462:	689b      	ldr	r3, [r3, #8]
   c1464:	4718      	bx	r3

000c1466 <_ZN5Print5printEPK19__FlashStringHelper>:
   c1466:	b508      	push	{r3, lr}
   c1468:	f7fb fe90 	bl	bd18c <_ZN5Print5writeEPKc>
   c146c:	bd08      	pop	{r3, pc}

000c146e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c146e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c1470:	210d      	movs	r1, #13
{
   c1472:	4605      	mov	r5, r0
  size_t n = print('\r');
   c1474:	f7ff fff4 	bl	c1460 <_ZN5Print5printEc>
  n += print('\n');
   c1478:	210a      	movs	r1, #10
  size_t n = print('\r');
   c147a:	4604      	mov	r4, r0
  n += print('\n');
   c147c:	4628      	mov	r0, r5
   c147e:	f7ff ffef 	bl	c1460 <_ZN5Print5printEc>
  return n;
}
   c1482:	4420      	add	r0, r4
   c1484:	bd38      	pop	{r3, r4, r5, pc}

000c1486 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c1486:	b538      	push	{r3, r4, r5, lr}
   c1488:	4605      	mov	r5, r0
  return write(str);
   c148a:	f7fb fe7f 	bl	bd18c <_ZN5Print5writeEPKc>
   c148e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c1490:	4628      	mov	r0, r5
   c1492:	f7ff ffec 	bl	c146e <_ZN5Print7printlnEv>
  return n;
}
   c1496:	4420      	add	r0, r4
   c1498:	bd38      	pop	{r3, r4, r5, pc}

000c149a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   c149a:	f7ff bff4 	b.w	c1486 <_ZN5Print7printlnEPKc>

000c149e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c149e:	b530      	push	{r4, r5, lr}
   c14a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c14a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c14a4:	2a01      	cmp	r2, #1
  *str = '\0';
   c14a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c14aa:	bf98      	it	ls
   c14ac:	220a      	movls	r2, #10
   c14ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c14b0:	460d      	mov	r5, r1
   c14b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c14b6:	fb01 5312 	mls	r3, r1, r2, r5
   c14ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c14be:	2b09      	cmp	r3, #9
   c14c0:	bf94      	ite	ls
   c14c2:	3330      	addls	r3, #48	; 0x30
   c14c4:	3337      	addhi	r3, #55	; 0x37
   c14c6:	b2db      	uxtb	r3, r3
  } while(n);
   c14c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c14ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c14ce:	d9ef      	bls.n	c14b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c14d0:	4621      	mov	r1, r4
   c14d2:	f7fb fe5b 	bl	bd18c <_ZN5Print5writeEPKc>
}
   c14d6:	b00b      	add	sp, #44	; 0x2c
   c14d8:	bd30      	pop	{r4, r5, pc}

000c14da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c14da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c14de:	b086      	sub	sp, #24
   c14e0:	af00      	add	r7, sp, #0
   c14e2:	4605      	mov	r5, r0
   c14e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c14e6:	1d38      	adds	r0, r7, #4
   c14e8:	2114      	movs	r1, #20
{
   c14ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   c14ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c14ee:	f7fc fef3 	bl	be2d8 <vsnprintf>

    if (n<bufsize)
   c14f2:	2813      	cmp	r0, #19
   c14f4:	d80e      	bhi.n	c1514 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c14f6:	1d39      	adds	r1, r7, #4
   c14f8:	4628      	mov	r0, r5
   c14fa:	f7fb fe47 	bl	bd18c <_ZN5Print5writeEPKc>
   c14fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c1500:	b11e      	cbz	r6, c150a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c1502:	4628      	mov	r0, r5
   c1504:	f7ff ffb3 	bl	c146e <_ZN5Print7printlnEv>
   c1508:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c150a:	4620      	mov	r0, r4
   c150c:	3718      	adds	r7, #24
   c150e:	46bd      	mov	sp, r7
   c1510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c1514:	f100 0308 	add.w	r3, r0, #8
   c1518:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c151c:	46e8      	mov	r8, sp
        char bigger[n+1];
   c151e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c1522:	4622      	mov	r2, r4
   c1524:	1c41      	adds	r1, r0, #1
   c1526:	683b      	ldr	r3, [r7, #0]
   c1528:	4668      	mov	r0, sp
   c152a:	f7fc fed5 	bl	be2d8 <vsnprintf>
  return write(str);
   c152e:	4669      	mov	r1, sp
   c1530:	4628      	mov	r0, r5
   c1532:	f7fb fe2b 	bl	bd18c <_ZN5Print5writeEPKc>
   c1536:	4604      	mov	r4, r0
   c1538:	46c5      	mov	sp, r8
   c153a:	e7e1      	b.n	c1500 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c153c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c153c:	4b01      	ldr	r3, [pc, #4]	; (c1544 <_GLOBAL__sub_I_RGB+0x8>)
   c153e:	2200      	movs	r2, #0
   c1540:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c1542:	4770      	bx	lr
   c1544:	2003e6a4 	.word	0x2003e6a4

000c1548 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   c1548:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   c154c:	1c53      	adds	r3, r2, #1
   c154e:	d00b      	beq.n	c1568 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   c1550:	8843      	ldrh	r3, [r0, #2]
   c1552:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   c1554:	428b      	cmp	r3, r1
   c1556:	d803      	bhi.n	c1560 <_ZN5Servo17writeMicrosecondsEt+0x18>
   c1558:	4288      	cmp	r0, r1
   c155a:	4603      	mov	r3, r0
   c155c:	bf28      	it	cs
   c155e:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   c1560:	4619      	mov	r1, r3
   c1562:	b290      	uxth	r0, r2
   c1564:	f7fc bc92 	b.w	bde8c <HAL_Servo_Write_Pulse_Width>
}
   c1568:	4770      	bx	lr

000c156a <_ZN5Servo5writeEi>:
{
   c156a:	b513      	push	{r0, r1, r4, lr}
   c156c:	4604      	mov	r4, r0
   c156e:	4608      	mov	r0, r1
   c1570:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   c1574:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   c1578:	4288      	cmp	r0, r1
   c157a:	db10      	blt.n	c159e <_ZN5Servo5writeEi+0x34>
   c157c:	4290      	cmp	r0, r2
   c157e:	bfa8      	it	ge
   c1580:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c1582:	88a3      	ldrh	r3, [r4, #4]
   c1584:	9300      	str	r3, [sp, #0]
   c1586:	8863      	ldrh	r3, [r4, #2]
   c1588:	f7fc fede 	bl	be348 <_Z3mapiiiii>
   c158c:	68e1      	ldr	r1, [r4, #12]
   c158e:	4401      	add	r1, r0
   c1590:	b289      	uxth	r1, r1
   c1592:	4620      	mov	r0, r4
}
   c1594:	b002      	add	sp, #8
   c1596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   c159a:	f7ff bfd5 	b.w	c1548 <_ZN5Servo17writeMicrosecondsEt>
   c159e:	4608      	mov	r0, r1
   c15a0:	e7ef      	b.n	c1582 <_ZN5Servo5writeEi+0x18>
	...

000c15a4 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   c15a4:	4a04      	ldr	r2, [pc, #16]	; (c15b8 <_ZN5Servo11resetFieldsEv+0x14>)
   c15a6:	f44f 6316 	mov.w	r3, #2400	; 0x960
   c15aa:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   c15ae:	23b4      	movs	r3, #180	; 0xb4
   c15b0:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   c15b2:	2300      	movs	r3, #0
   c15b4:	60c3      	str	r3, [r0, #12]
}
   c15b6:	4770      	bx	lr
   c15b8:	0220ffff 	.word	0x0220ffff

000c15bc <_ZN5ServoC1Ev>:
Servo::Servo()
   c15bc:	b508      	push	{r3, lr}
  this->resetFields();
   c15be:	f7ff fff1 	bl	c15a4 <_ZN5Servo11resetFieldsEv>
}
   c15c2:	bd08      	pop	{r3, pc}

000c15c4 <_ZN5Servo6detachEv>:
{
   c15c4:	b510      	push	{r4, lr}
   c15c6:	4604      	mov	r4, r0
   c15c8:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   c15cc:	1c43      	adds	r3, r0, #1
   c15ce:	d007      	beq.n	c15e0 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   c15d0:	b280      	uxth	r0, r0
   c15d2:	f7fc fc53 	bl	bde7c <HAL_Servo_Detach>
  this->resetFields();
   c15d6:	4620      	mov	r0, r4
   c15d8:	f7ff ffe4 	bl	c15a4 <_ZN5Servo11resetFieldsEv>
  return true;
   c15dc:	2001      	movs	r0, #1
}
   c15de:	bd10      	pop	{r4, pc}
    return false;
   c15e0:	2000      	movs	r0, #0
   c15e2:	e7fc      	b.n	c15de <_ZN5Servo6detachEv+0x1a>

000c15e4 <_ZN5Servo6attachEtttss>:
{
   c15e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c15e8:	460d      	mov	r5, r1
   c15ea:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c15ec:	2102      	movs	r1, #2
   c15ee:	4628      	mov	r0, r5
{
   c15f0:	4690      	mov	r8, r2
   c15f2:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   c15f4:	f7fc fb72 	bl	bdcdc <HAL_Validate_Pin_Function>
   c15f8:	2802      	cmp	r0, #2
   c15fa:	d003      	beq.n	c1604 <_ZN5Servo6attachEtttss+0x20>
    return false;
   c15fc:	2600      	movs	r6, #0
}
   c15fe:	4630      	mov	r0, r6
   c1600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   c1604:	4628      	mov	r0, r5
   c1606:	f000 fc77 	bl	c1ef8 <pinAvailable>
   c160a:	4606      	mov	r6, r0
   c160c:	2800      	cmp	r0, #0
   c160e:	d0f5      	beq.n	c15fc <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   c1610:	f9b4 3000 	ldrsh.w	r3, [r4]
   c1614:	3301      	adds	r3, #1
   c1616:	d002      	beq.n	c161e <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   c1618:	4620      	mov	r0, r4
   c161a:	f7ff ffd3 	bl	c15c4 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   c161e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   c1622:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   c1624:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   c1628:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   c162a:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   c162e:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   c1630:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   c1632:	4628      	mov	r0, r5
   c1634:	f7fc fc1a 	bl	bde6c <HAL_Servo_Attach>
  return true;
   c1638:	e7e1      	b.n	c15fe <_ZN5Servo6attachEtttss+0x1a>

000c163a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c163a:	2100      	movs	r1, #0
   c163c:	f7fc bc76 	b.w	bdf2c <hal_spi_release>

000c1640 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c1640:	2100      	movs	r1, #0
   c1642:	f7fc bc6b 	b.w	bdf1c <hal_spi_acquire>

000c1646 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c1646:	b510      	push	{r4, lr}
   c1648:	4604      	mov	r4, r0
   c164a:	4608      	mov	r0, r1
{
    _spi = spi;
   c164c:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c164e:	f7fc fc35 	bl	bdebc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c1652:	2300      	movs	r3, #0
   c1654:	6063      	str	r3, [r4, #4]
}
   c1656:	4620      	mov	r0, r4
   c1658:	bd10      	pop	{r4, pc}

000c165a <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c165a:	b513      	push	{r0, r1, r4, lr}
   c165c:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c165e:	7800      	ldrb	r0, [r0, #0]
   c1660:	f7ff ffee 	bl	c1640 <_ZN8SPIClass4lockEv.isra.0>
   c1664:	b958      	cbnz	r0, c167e <_ZN8SPIClass5beginEv+0x24>
   c1666:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c1668:	9001      	str	r0, [sp, #4]
   c166a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c166e:	f7fc fc15 	bl	bde9c <hal_spi_begin>
        unlock();
   c1672:	9801      	ldr	r0, [sp, #4]
    }
}
   c1674:	b002      	add	sp, #8
   c1676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c167a:	f7ff bfde 	b.w	c163a <_ZN8SPIClass6unlockEv.isra.0>
   c167e:	b002      	add	sp, #8
   c1680:	bd10      	pop	{r4, pc}

000c1682 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c1682:	7800      	ldrb	r0, [r0, #0]
   c1684:	f7ff bfd9 	b.w	c163a <_ZN8SPIClass6unlockEv.isra.0>

000c1688 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c1688:	0840      	lsrs	r0, r0, #1
{
   c168a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c168c:	6018      	str	r0, [r3, #0]
   c168e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c1690:	6818      	ldr	r0, [r3, #0]
   c1692:	4288      	cmp	r0, r1
   c1694:	b2e5      	uxtb	r5, r4
   c1696:	d906      	bls.n	c16a6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c1698:	3401      	adds	r4, #1
   c169a:	2c08      	cmp	r4, #8
   c169c:	d002      	beq.n	c16a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c169e:	0840      	lsrs	r0, r0, #1
   c16a0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c16a2:	e7f5      	b.n	c1690 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c16a4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c16a6:	4b02      	ldr	r3, [pc, #8]	; (c16b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c16a8:	5d5b      	ldrb	r3, [r3, r5]
   c16aa:	7013      	strb	r3, [r2, #0]
}
   c16ac:	bd30      	pop	{r4, r5, pc}
   c16ae:	bf00      	nop
   c16b0:	000c7fe4 	.word	0x000c7fe4

000c16b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c16b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c16b8:	4606      	mov	r6, r0
   c16ba:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c16bc:	7800      	ldrb	r0, [r0, #0]
{
   c16be:	460c      	mov	r4, r1
    CHECK(lock());
   c16c0:	f7ff ffbe 	bl	c1640 <_ZN8SPIClass4lockEv.isra.0>
   c16c4:	2800      	cmp	r0, #0
   c16c6:	db1b      	blt.n	c1700 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c16c8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c16ca:	2214      	movs	r2, #20
   c16cc:	2100      	movs	r1, #0
   c16ce:	a809      	add	r0, sp, #36	; 0x24
   c16d0:	f002 ff4a 	bl	c4568 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c16d4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c16d6:	2200      	movs	r2, #0
   c16d8:	a909      	add	r1, sp, #36	; 0x24
   c16da:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c16dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c16e0:	f7fc fbfc 	bl	bdedc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c16e4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c16e8:	b113      	cbz	r3, c16f0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c16ea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c16ee:	b155      	cbz	r5, c1706 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c16f0:	2700      	movs	r7, #0
   c16f2:	46b9      	mov	r9, r7
   c16f4:	46b8      	mov	r8, r7
   c16f6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c16f8:	7923      	ldrb	r3, [r4, #4]
   c16fa:	b15d      	cbz	r5, c1714 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c16fc:	b1c3      	cbz	r3, c1730 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c16fe:	2000      	movs	r0, #0
}
   c1700:	b00f      	add	sp, #60	; 0x3c
   c1702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c1706:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c170a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c170e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c1712:	e7f1      	b.n	c16f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c1714:	2b00      	cmp	r3, #0
   c1716:	d135      	bne.n	c1784 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c1718:	68a3      	ldr	r3, [r4, #8]
   c171a:	4543      	cmp	r3, r8
   c171c:	d108      	bne.n	c1730 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c171e:	f88d 9020 	strb.w	r9, [sp, #32]
   c1722:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1726:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c172a:	89a3      	ldrh	r3, [r4, #12]
   c172c:	429a      	cmp	r2, r3
   c172e:	d0e6      	beq.n	c16fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c1730:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1732:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c1734:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c1738:	980a      	ldr	r0, [sp, #40]	; 0x28
   c173a:	ab04      	add	r3, sp, #16
   c173c:	f10d 020f 	add.w	r2, sp, #15
   c1740:	f7ff ffa2 	bl	c1688 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c1744:	7921      	ldrb	r1, [r4, #4]
   c1746:	b985      	cbnz	r5, c176a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c1748:	b989      	cbnz	r1, c176e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c174a:	68a3      	ldr	r3, [r4, #8]
   c174c:	4543      	cmp	r3, r8
   c174e:	d30e      	bcc.n	c176e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c1750:	f88d 9020 	strb.w	r9, [sp, #32]
   c1754:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c1758:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c175c:	89a3      	ldrh	r3, [r4, #12]
   c175e:	429a      	cmp	r2, r3
   c1760:	d105      	bne.n	c176e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c1762:	9b04      	ldr	r3, [sp, #16]
   c1764:	4543      	cmp	r3, r8
   c1766:	d102      	bne.n	c176e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c1768:	e7c9      	b.n	c16fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c176a:	2900      	cmp	r1, #0
   c176c:	d1f9      	bne.n	c1762 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c176e:	2300      	movs	r3, #0
   c1770:	9301      	str	r3, [sp, #4]
   c1772:	7b63      	ldrb	r3, [r4, #13]
   c1774:	9300      	str	r3, [sp, #0]
   c1776:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c177a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c177c:	7830      	ldrb	r0, [r6, #0]
   c177e:	f7fc fbc5 	bl	bdf0c <hal_spi_set_settings>
   c1782:	e7bc      	b.n	c16fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c1784:	e9cd 5500 	strd	r5, r5, [sp]
   c1788:	462b      	mov	r3, r5
   c178a:	462a      	mov	r2, r5
   c178c:	2101      	movs	r1, #1
   c178e:	e7f5      	b.n	c177c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c1790 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   c1790:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c1792:	7800      	ldrb	r0, [r0, #0]
   c1794:	f7fc fb8a 	bl	bdeac <hal_spi_transfer>
}
   c1798:	b2c0      	uxtb	r0, r0
   c179a:	bd08      	pop	{r3, pc}

000c179c <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c179c:	b530      	push	{r4, r5, lr}
   c179e:	b087      	sub	sp, #28
   c17a0:	4604      	mov	r4, r0
   c17a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c17a4:	9500      	str	r5, [sp, #0]
   c17a6:	7800      	ldrb	r0, [r0, #0]
   c17a8:	f7fc fba0 	bl	bdeec <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c17ac:	b93d      	cbnz	r5, c17be <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c17ae:	7820      	ldrb	r0, [r4, #0]
   c17b0:	a902      	add	r1, sp, #8
   c17b2:	f7fc fba3 	bl	bdefc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c17b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c17ba:	07db      	lsls	r3, r3, #31
   c17bc:	d4f7      	bmi.n	c17ae <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c17be:	b007      	add	sp, #28
   c17c0:	bd30      	pop	{r4, r5, pc}

000c17c2 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c17c2:	b510      	push	{r4, lr}
   c17c4:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c17c6:	f7fc fa71 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c17ca:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c17cc:	6823      	ldr	r3, [r4, #0]
   c17ce:	4620      	mov	r0, r4
   c17d0:	695b      	ldr	r3, [r3, #20]
   c17d2:	4798      	blx	r3
    if (c >= 0) return c;
   c17d4:	2800      	cmp	r0, #0
   c17d6:	da08      	bge.n	c17ea <_ZN6Stream9timedReadEv+0x28>
   c17d8:	f7fc fa68 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c17dc:	68e3      	ldr	r3, [r4, #12]
   c17de:	1ac0      	subs	r0, r0, r3
   c17e0:	68a3      	ldr	r3, [r4, #8]
   c17e2:	4298      	cmp	r0, r3
   c17e4:	d3f2      	bcc.n	c17cc <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c17e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c17ea:	bd10      	pop	{r4, pc}

000c17ec <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c17ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c17f0:	4607      	mov	r7, r0
   c17f2:	4688      	mov	r8, r1
   c17f4:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c17f6:	461d      	mov	r5, r3
   c17f8:	b173      	cbz	r3, c1818 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c17fa:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c17fc:	4638      	mov	r0, r7
   c17fe:	f7ff ffe0 	bl	c17c2 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c1802:	1e03      	subs	r3, r0, #0
   c1804:	db05      	blt.n	c1812 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c1806:	4543      	cmp	r3, r8
   c1808:	d003      	beq.n	c1812 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c180a:	5533      	strb	r3, [r6, r4]
    index++;
   c180c:	3401      	adds	r4, #1
  while (index < length) {
   c180e:	42a5      	cmp	r5, r4
   c1810:	d1f4      	bne.n	c17fc <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c1812:	4620      	mov	r0, r4
   c1814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c1818:	461c      	mov	r4, r3
   c181a:	e7fa      	b.n	c1812 <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c181c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   c181c:	b570      	push	{r4, r5, r6, lr}
   c181e:	460d      	mov	r5, r1
  String ret;
   c1820:	4909      	ldr	r1, [pc, #36]	; (c1848 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   c1822:	4604      	mov	r4, r0
   c1824:	4616      	mov	r6, r2
  String ret;
   c1826:	f000 f85c 	bl	c18e2 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   c182a:	4628      	mov	r0, r5
   c182c:	f7ff ffc9 	bl	c17c2 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   c1830:	2800      	cmp	r0, #0
   c1832:	db06      	blt.n	c1842 <_ZN6Stream15readStringUntilEc+0x26>
   c1834:	4286      	cmp	r6, r0
   c1836:	d004      	beq.n	c1842 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   c1838:	b2c1      	uxtb	r1, r0
   c183a:	4620      	mov	r0, r4
   c183c:	f000 f8d0 	bl	c19e0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   c1840:	e7f3      	b.n	c182a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   c1842:	4620      	mov	r0, r4
   c1844:	bd70      	pop	{r4, r5, r6, pc}
   c1846:	bf00      	nop
   c1848:	000c7f1b 	.word	0x000c7f1b

000c184c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   c184c:	b510      	push	{r4, lr}
   c184e:	4604      	mov	r4, r0
{
	free(buffer);
   c1850:	6800      	ldr	r0, [r0, #0]
   c1852:	f7fc fd19 	bl	be288 <free>
}
   c1856:	4620      	mov	r0, r4
   c1858:	bd10      	pop	{r4, pc}

000c185a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   c185a:	b510      	push	{r4, lr}
   c185c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   c185e:	6800      	ldr	r0, [r0, #0]
   c1860:	b108      	cbz	r0, c1866 <_ZN6String10invalidateEv+0xc>
   c1862:	f7fc fd11 	bl	be288 <free>
	buffer = NULL;
   c1866:	2300      	movs	r3, #0
	capacity = len = 0;
   c1868:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   c186c:	6023      	str	r3, [r4, #0]
}
   c186e:	bd10      	pop	{r4, pc}

000c1870 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c1870:	b538      	push	{r3, r4, r5, lr}
   c1872:	4604      	mov	r4, r0
   c1874:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c1876:	6800      	ldr	r0, [r0, #0]
   c1878:	3101      	adds	r1, #1
   c187a:	f7fc fd0d 	bl	be298 <realloc>
	if (newbuffer) {
   c187e:	b110      	cbz	r0, c1886 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   c1880:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   c1884:	2001      	movs	r0, #1
	}
	return 0;
}
   c1886:	bd38      	pop	{r3, r4, r5, pc}

000c1888 <_ZN6String7reserveEj>:
{
   c1888:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   c188a:	6803      	ldr	r3, [r0, #0]
{
   c188c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   c188e:	b123      	cbz	r3, c189a <_ZN6String7reserveEj+0x12>
   c1890:	6843      	ldr	r3, [r0, #4]
   c1892:	428b      	cmp	r3, r1
   c1894:	d301      	bcc.n	c189a <_ZN6String7reserveEj+0x12>
   c1896:	2001      	movs	r0, #1
}
   c1898:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   c189a:	4620      	mov	r0, r4
   c189c:	f7ff ffe8 	bl	c1870 <_ZN6String12changeBufferEj>
   c18a0:	2800      	cmp	r0, #0
   c18a2:	d0f9      	beq.n	c1898 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   c18a4:	68a3      	ldr	r3, [r4, #8]
   c18a6:	2b00      	cmp	r3, #0
   c18a8:	d1f5      	bne.n	c1896 <_ZN6String7reserveEj+0xe>
   c18aa:	6822      	ldr	r2, [r4, #0]
   c18ac:	7013      	strb	r3, [r2, #0]
   c18ae:	e7f2      	b.n	c1896 <_ZN6String7reserveEj+0xe>

000c18b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c18b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c18b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   c18b4:	4611      	mov	r1, r2
   c18b6:	9201      	str	r2, [sp, #4]
{
   c18b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   c18ba:	f7ff ffe5 	bl	c1888 <_ZN6String7reserveEj>
   c18be:	9a01      	ldr	r2, [sp, #4]
   c18c0:	b928      	cbnz	r0, c18ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   c18c2:	4620      	mov	r0, r4
   c18c4:	f7ff ffc9 	bl	c185a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   c18c8:	4620      	mov	r0, r4
   c18ca:	b003      	add	sp, #12
   c18cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   c18ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   c18d0:	4629      	mov	r1, r5
   c18d2:	6820      	ldr	r0, [r4, #0]
   c18d4:	f002 fe20 	bl	c4518 <memcpy>
	buffer[len] = 0;
   c18d8:	6822      	ldr	r2, [r4, #0]
   c18da:	68a3      	ldr	r3, [r4, #8]
   c18dc:	2100      	movs	r1, #0
   c18de:	54d1      	strb	r1, [r2, r3]
	return *this;
   c18e0:	e7f2      	b.n	c18c8 <_ZN6String4copyEPKcj+0x18>

000c18e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   c18e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c18e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   c18e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c18ea:	4604      	mov	r4, r0
	len = 0;
   c18ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   c18ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   c18f0:	b141      	cbz	r1, c1904 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   c18f2:	4608      	mov	r0, r1
   c18f4:	9101      	str	r1, [sp, #4]
   c18f6:	f002 fec2 	bl	c467e <strlen>
   c18fa:	9901      	ldr	r1, [sp, #4]
   c18fc:	4602      	mov	r2, r0
   c18fe:	4620      	mov	r0, r4
   c1900:	f7ff ffd6 	bl	c18b0 <_ZN6String4copyEPKcj>
}
   c1904:	4620      	mov	r0, r4
   c1906:	b002      	add	sp, #8
   c1908:	bd10      	pop	{r4, pc}

000c190a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   c190a:	b538      	push	{r3, r4, r5, lr}
   c190c:	4605      	mov	r5, r0
	if (buffer) {
   c190e:	6800      	ldr	r0, [r0, #0]
{
   c1910:	460c      	mov	r4, r1
	if (buffer) {
   c1912:	b168      	cbz	r0, c1930 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   c1914:	686a      	ldr	r2, [r5, #4]
   c1916:	688b      	ldr	r3, [r1, #8]
   c1918:	429a      	cmp	r2, r3
   c191a:	d307      	bcc.n	c192c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   c191c:	6809      	ldr	r1, [r1, #0]
   c191e:	f002 fe89 	bl	c4634 <strcpy>
			len = rhs.len;
   c1922:	68a3      	ldr	r3, [r4, #8]
   c1924:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   c1926:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   c1928:	60a3      	str	r3, [r4, #8]
}
   c192a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   c192c:	f7fc fcac 	bl	be288 <free>
	buffer = rhs.buffer;
   c1930:	6823      	ldr	r3, [r4, #0]
   c1932:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   c1934:	6863      	ldr	r3, [r4, #4]
   c1936:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   c1938:	68a3      	ldr	r3, [r4, #8]
   c193a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   c193c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   c193e:	e9c4 3300 	strd	r3, r3, [r4]
   c1942:	e7f1      	b.n	c1928 <_ZN6String4moveERS_+0x1e>

000c1944 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   c1944:	b510      	push	{r4, lr}
	buffer = NULL;
   c1946:	2300      	movs	r3, #0
	capacity = 0;
   c1948:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   c194c:	4604      	mov	r4, r0
	len = 0;
   c194e:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1950:	7303      	strb	r3, [r0, #12]
	move(rval);
   c1952:	f7ff ffda 	bl	c190a <_ZN6String4moveERS_>
}
   c1956:	4620      	mov	r0, r4
   c1958:	bd10      	pop	{r4, pc}

000c195a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   c195a:	4288      	cmp	r0, r1
{
   c195c:	b510      	push	{r4, lr}
   c195e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   c1960:	d005      	beq.n	c196e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   c1962:	680b      	ldr	r3, [r1, #0]
   c1964:	b12b      	cbz	r3, c1972 <_ZN6StringaSERKS_+0x18>
   c1966:	688a      	ldr	r2, [r1, #8]
   c1968:	4619      	mov	r1, r3
   c196a:	f7ff ffa1 	bl	c18b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c196e:	4620      	mov	r0, r4
   c1970:	bd10      	pop	{r4, pc}
	else invalidate();
   c1972:	f7ff ff72 	bl	c185a <_ZN6String10invalidateEv>
   c1976:	e7fa      	b.n	c196e <_ZN6StringaSERKS_+0x14>

000c1978 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c1978:	b510      	push	{r4, lr}
	buffer = NULL;
   c197a:	2300      	movs	r3, #0
String::String(const String &value)
   c197c:	4604      	mov	r4, r0
	capacity = 0;
   c197e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   c1982:	6083      	str	r3, [r0, #8]
	flags = 0;
   c1984:	7303      	strb	r3, [r0, #12]
	*this = value;
   c1986:	f7ff ffe8 	bl	c195a <_ZN6StringaSERKS_>
}
   c198a:	4620      	mov	r0, r4
   c198c:	bd10      	pop	{r4, pc}

000c198e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   c198e:	b513      	push	{r0, r1, r4, lr}
   c1990:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   c1992:	b159      	cbz	r1, c19ac <_ZN6StringaSEPKc+0x1e>
   c1994:	4608      	mov	r0, r1
   c1996:	9101      	str	r1, [sp, #4]
   c1998:	f002 fe71 	bl	c467e <strlen>
   c199c:	9901      	ldr	r1, [sp, #4]
   c199e:	4602      	mov	r2, r0
   c19a0:	4620      	mov	r0, r4
   c19a2:	f7ff ff85 	bl	c18b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   c19a6:	4620      	mov	r0, r4
   c19a8:	b002      	add	sp, #8
   c19aa:	bd10      	pop	{r4, pc}
	else invalidate();
   c19ac:	f7ff ff55 	bl	c185a <_ZN6String10invalidateEv>
   c19b0:	e7f9      	b.n	c19a6 <_ZN6StringaSEPKc+0x18>

000c19b2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   c19b2:	b570      	push	{r4, r5, r6, lr}
   c19b4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   c19b6:	460e      	mov	r6, r1
   c19b8:	b909      	cbnz	r1, c19be <_ZN6String6concatEPKcj+0xc>
   c19ba:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   c19bc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   c19be:	b16a      	cbz	r2, c19dc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   c19c0:	6884      	ldr	r4, [r0, #8]
   c19c2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   c19c4:	4621      	mov	r1, r4
   c19c6:	f7ff ff5f 	bl	c1888 <_ZN6String7reserveEj>
   c19ca:	2800      	cmp	r0, #0
   c19cc:	d0f5      	beq.n	c19ba <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   c19ce:	6828      	ldr	r0, [r5, #0]
   c19d0:	68ab      	ldr	r3, [r5, #8]
   c19d2:	4631      	mov	r1, r6
   c19d4:	4418      	add	r0, r3
   c19d6:	f002 fe2d 	bl	c4634 <strcpy>
	len = newlen;
   c19da:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   c19dc:	2001      	movs	r0, #1
   c19de:	e7ed      	b.n	c19bc <_ZN6String6concatEPKcj+0xa>

000c19e0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   c19e0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   c19e2:	2300      	movs	r3, #0
	buf[0] = c;
   c19e4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   c19e8:	2201      	movs	r2, #1
   c19ea:	a901      	add	r1, sp, #4
	buf[1] = 0;
   c19ec:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   c19f0:	f7ff ffdf 	bl	c19b2 <_ZN6String6concatEPKcj>
}
   c19f4:	b003      	add	sp, #12
   c19f6:	f85d fb04 	ldr.w	pc, [sp], #4

000c19fa <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   c19fa:	6883      	ldr	r3, [r0, #8]
   c19fc:	428b      	cmp	r3, r1
   c19fe:	d903      	bls.n	c1a08 <_ZNK6StringixEj+0xe>
   c1a00:	6800      	ldr	r0, [r0, #0]
   c1a02:	b110      	cbz	r0, c1a0a <_ZNK6StringixEj+0x10>
	return buffer[index];
   c1a04:	5c40      	ldrb	r0, [r0, r1]
   c1a06:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   c1a08:	2000      	movs	r0, #0
}
   c1a0a:	4770      	bx	lr

000c1a0c <_ZNK6String6charAtEj>:
	return operator[](loc);
   c1a0c:	f7ff bff5 	b.w	c19fa <_ZNK6StringixEj>

000c1a10 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   c1a10:	b558      	push	{r3, r4, r6, lr}
   c1a12:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   c1a14:	b12a      	cbz	r2, c1a22 <_ZNK6String8getBytesEPhjj+0x12>
   c1a16:	b121      	cbz	r1, c1a22 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   c1a18:	6884      	ldr	r4, [r0, #8]
   c1a1a:	42a3      	cmp	r3, r4
   c1a1c:	d302      	bcc.n	c1a24 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   c1a1e:	2300      	movs	r3, #0
   c1a20:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   c1a22:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   c1a24:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   c1a26:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   c1a28:	6801      	ldr	r1, [r0, #0]
   c1a2a:	4294      	cmp	r4, r2
   c1a2c:	bf28      	it	cs
   c1a2e:	4614      	movcs	r4, r2
   c1a30:	4419      	add	r1, r3
   c1a32:	4622      	mov	r2, r4
   c1a34:	4630      	mov	r0, r6
   c1a36:	f002 fe51 	bl	c46dc <strncpy>
	buf[n] = 0;
   c1a3a:	2300      	movs	r3, #0
   c1a3c:	5533      	strb	r3, [r6, r4]
   c1a3e:	e7f0      	b.n	c1a22 <_ZNK6String8getBytesEPhjj+0x12>

000c1a40 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c1a40:	4b05      	ldr	r3, [pc, #20]	; (c1a58 <_GLOBAL__sub_I_System+0x18>)
   c1a42:	2202      	movs	r2, #2
   c1a44:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c1a46:	4b05      	ldr	r3, [pc, #20]	; (c1a5c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c1a48:	4a05      	ldr	r2, [pc, #20]	; (c1a60 <_GLOBAL__sub_I_System+0x20>)
   c1a4a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c1a4c:	2000      	movs	r0, #0
   c1a4e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c1a52:	f7fc bb35 	b.w	be0c0 <set_system_mode>
   c1a56:	bf00      	nop
   c1a58:	2003e6c0 	.word	0x2003e6c0
   c1a5c:	2003e6b4 	.word	0x2003e6b4
   c1a60:	ffff0000 	.word	0xffff0000

000c1a64 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c1a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c1a68:	4a15      	ldr	r2, [pc, #84]	; (c1ac0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c1a6a:	f8df 8060 	ldr.w	r8, [pc, #96]	; c1acc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c1a6e:	e9d2 6300 	ldrd	r6, r3, [r2]
   c1a72:	1980      	adds	r0, r0, r6
   c1a74:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c1a78:	4b12      	ldr	r3, [pc, #72]	; (c1ac4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c1a7a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c1a7e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c1a82:	1986      	adds	r6, r0, r6
   c1a84:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c1a88:	42bb      	cmp	r3, r7
   c1a8a:	bf08      	it	eq
   c1a8c:	42b2      	cmpeq	r2, r6
{
   c1a8e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c1a90:	d013      	beq.n	c1aba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c1a92:	a903      	add	r1, sp, #12
   c1a94:	4668      	mov	r0, sp
   c1a96:	e9cd 6700 	strd	r6, r7, [sp]
   c1a9a:	f7fc fc4d 	bl	be338 <localtime_r>
	calendar_time.tm_year += 1900;
   c1a9e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1aa0:	4d09      	ldr	r5, [pc, #36]	; (c1ac8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c1aa2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1aa6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c1aa8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c1aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c1ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c1ab2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c1ab6:	6823      	ldr	r3, [r4, #0]
   c1ab8:	602b      	str	r3, [r5, #0]
    }
}
   c1aba:	b00c      	add	sp, #48	; 0x30
   c1abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c1ac0:	2003e6f8 	.word	0x2003e6f8
   c1ac4:	2003e6f0 	.word	0x2003e6f0
   c1ac8:	2003e6c8 	.word	0x2003e6c8
   c1acc:	2003e700 	.word	0x2003e700

000c1ad0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c1ad0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1ad2:	2000      	movs	r0, #0
   c1ad4:	f7fc fb60 	bl	be198 <spark_sync_time_pending>
   c1ad8:	b128      	cbz	r0, c1ae6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1ada:	f7fc fb45 	bl	be168 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1ade:	f080 0001 	eor.w	r0, r0, #1
   c1ae2:	b2c0      	uxtb	r0, r0
    }
   c1ae4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c1ae6:	2001      	movs	r0, #1
   c1ae8:	e7fc      	b.n	c1ae4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c1aec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c1aec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c1aee:	f7ff ffb9 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c1af2:	4b02      	ldr	r3, [pc, #8]	; (c1afc <_ZN9TimeClass5monthEx+0x10>)
   c1af4:	6918      	ldr	r0, [r3, #16]
}
   c1af6:	3001      	adds	r0, #1
   c1af8:	bd08      	pop	{r3, pc}
   c1afa:	bf00      	nop
   c1afc:	2003e6c8 	.word	0x2003e6c8

000c1b00 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c1b00:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c1b02:	2000      	movs	r0, #0
   c1b04:	f7fc f8da 	bl	bdcbc <hal_rtc_time_is_valid>
    if (rtcstate)
   c1b08:	4604      	mov	r4, r0
   c1b0a:	b9a0      	cbnz	r0, c1b36 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c1b0c:	f7fc fad0 	bl	be0b0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c1b10:	2801      	cmp	r0, #1
   c1b12:	d110      	bne.n	c1b36 <_ZN9TimeClass7isValidEv+0x36>
   c1b14:	4620      	mov	r0, r4
   c1b16:	f7fc faf3 	bl	be100 <system_thread_get_state>
   c1b1a:	b960      	cbnz	r0, c1b36 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c1b1c:	f7ff ffd8 	bl	c1ad0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c1b20:	b910      	cbnz	r0, c1b28 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c1b22:	f7fc fb19 	bl	be158 <spark_process>
        while (_while() && !_condition()) {
   c1b26:	e7f9      	b.n	c1b1c <_ZN9TimeClass7isValidEv+0x1c>
   c1b28:	f7ff ffd2 	bl	c1ad0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c1b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c1b30:	2000      	movs	r0, #0
   c1b32:	f7fc b8c3 	b.w	bdcbc <hal_rtc_time_is_valid>
}
   c1b36:	4620      	mov	r0, r4
   c1b38:	bd10      	pop	{r4, pc}

000c1b3a <_ZN9TimeClass3nowEv>:
{
   c1b3a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c1b3c:	f7ff ffe0 	bl	c1b00 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c1b40:	2210      	movs	r2, #16
   c1b42:	2100      	movs	r1, #0
   c1b44:	4668      	mov	r0, sp
   c1b46:	f002 fd0f 	bl	c4568 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c1b4a:	2100      	movs	r1, #0
   c1b4c:	4668      	mov	r0, sp
   c1b4e:	f7fc f8bd 	bl	bdccc <hal_rtc_get_time>
}
   c1b52:	9800      	ldr	r0, [sp, #0]
   c1b54:	b005      	add	sp, #20
   c1b56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1b5c <_ZN9TimeClass4hourEv>:
{
   c1b5c:	b508      	push	{r3, lr}
	return hour(now());
   c1b5e:	f7ff ffec 	bl	c1b3a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1b62:	17c1      	asrs	r1, r0, #31
   c1b64:	f7ff ff7e 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
}
   c1b68:	4b01      	ldr	r3, [pc, #4]	; (c1b70 <_ZN9TimeClass4hourEv+0x14>)
   c1b6a:	6898      	ldr	r0, [r3, #8]
   c1b6c:	bd08      	pop	{r3, pc}
   c1b6e:	bf00      	nop
   c1b70:	2003e6c8 	.word	0x2003e6c8

000c1b74 <_ZN9TimeClass6minuteEv>:
{
   c1b74:	b508      	push	{r3, lr}
	return minute(now());
   c1b76:	f7ff ffe0 	bl	c1b3a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1b7a:	17c1      	asrs	r1, r0, #31
   c1b7c:	f7ff ff72 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
}
   c1b80:	4b01      	ldr	r3, [pc, #4]	; (c1b88 <_ZN9TimeClass6minuteEv+0x14>)
   c1b82:	6858      	ldr	r0, [r3, #4]
   c1b84:	bd08      	pop	{r3, pc}
   c1b86:	bf00      	nop
   c1b88:	2003e6c8 	.word	0x2003e6c8

000c1b8c <_ZN9TimeClass6secondEv>:
{
   c1b8c:	b508      	push	{r3, lr}
	return second(now());
   c1b8e:	f7ff ffd4 	bl	c1b3a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1b92:	17c1      	asrs	r1, r0, #31
   c1b94:	f7ff ff66 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
}
   c1b98:	4b01      	ldr	r3, [pc, #4]	; (c1ba0 <_ZN9TimeClass6secondEv+0x14>)
   c1b9a:	6818      	ldr	r0, [r3, #0]
   c1b9c:	bd08      	pop	{r3, pc}
   c1b9e:	bf00      	nop
   c1ba0:	2003e6c8 	.word	0x2003e6c8

000c1ba4 <_ZN9TimeClass3dayEv>:
{
   c1ba4:	b508      	push	{r3, lr}
	return day(now());
   c1ba6:	f7ff ffc8 	bl	c1b3a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1baa:	17c1      	asrs	r1, r0, #31
   c1bac:	f7ff ff5a 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
}
   c1bb0:	4b01      	ldr	r3, [pc, #4]	; (c1bb8 <_ZN9TimeClass3dayEv+0x14>)
   c1bb2:	68d8      	ldr	r0, [r3, #12]
   c1bb4:	bd08      	pop	{r3, pc}
   c1bb6:	bf00      	nop
   c1bb8:	2003e6c8 	.word	0x2003e6c8

000c1bbc <_ZN9TimeClass5monthEv>:
{
   c1bbc:	b508      	push	{r3, lr}
	return month(now());
   c1bbe:	f7ff ffbc 	bl	c1b3a <_ZN9TimeClass3nowEv>
}
   c1bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c1bc6:	17c1      	asrs	r1, r0, #31
   c1bc8:	f7ff bf90 	b.w	c1aec <_ZN9TimeClass5monthEx>

000c1bcc <_ZN9TimeClass4yearEv>:
{
   c1bcc:	b508      	push	{r3, lr}
	return year(now());
   c1bce:	f7ff ffb4 	bl	c1b3a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c1bd2:	17c1      	asrs	r1, r0, #31
   c1bd4:	f7ff ff46 	bl	c1a64 <_ZL22Refresh_UnixTime_Cachex>
}
   c1bd8:	4b01      	ldr	r3, [pc, #4]	; (c1be0 <_ZN9TimeClass4yearEv+0x14>)
   c1bda:	6958      	ldr	r0, [r3, #20]
   c1bdc:	bd08      	pop	{r3, pc}
   c1bde:	bf00      	nop
   c1be0:	2003e6c8 	.word	0x2003e6c8

000c1be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c1be4:	4b02      	ldr	r3, [pc, #8]	; (c1bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c1be6:	681a      	ldr	r2, [r3, #0]
   c1be8:	4b02      	ldr	r3, [pc, #8]	; (c1bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c1bea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c1bec:	4770      	bx	lr
   c1bee:	bf00      	nop
   c1bf0:	2003db40 	.word	0x2003db40
   c1bf4:	2003e6c4 	.word	0x2003e6c4

000c1bf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1bf8:	4770      	bx	lr

000c1bfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1bfa:	7441      	strb	r1, [r0, #17]
}
   c1bfc:	4770      	bx	lr

000c1bfe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1bfe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1c00:	7c00      	ldrb	r0, [r0, #16]
   c1c02:	f7fc f9d3 	bl	bdfac <hal_usart_available_data_for_write>
}
   c1c06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1c0a:	bd08      	pop	{r3, pc}

000c1c0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1c0c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1c0e:	7c00      	ldrb	r0, [r0, #16]
   c1c10:	f7fc f9a4 	bl	bdf5c <hal_usart_available>
}
   c1c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1c18:	bd08      	pop	{r3, pc}

000c1c1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1c1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1c1c:	7c00      	ldrb	r0, [r0, #16]
   c1c1e:	f7fc f9ad 	bl	bdf7c <hal_usart_peek>
}
   c1c22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1c26:	bd08      	pop	{r3, pc}

000c1c28 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1c28:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1c2a:	7c00      	ldrb	r0, [r0, #16]
   c1c2c:	f7fc f99e 	bl	bdf6c <hal_usart_read>
}
   c1c30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1c34:	bd08      	pop	{r3, pc}

000c1c36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c1c36:	7c00      	ldrb	r0, [r0, #16]
   c1c38:	f7fc b9a8 	b.w	bdf8c <hal_usart_flush>

000c1c3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1c3e:	7c45      	ldrb	r5, [r0, #17]
{
   c1c40:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1c42:	b12d      	cbz	r5, c1c50 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c1c44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c1c46:	b003      	add	sp, #12
   c1c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1c4c:	f7fc b97e 	b.w	bdf4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1c50:	7c00      	ldrb	r0, [r0, #16]
   c1c52:	9101      	str	r1, [sp, #4]
   c1c54:	f7fc f9aa 	bl	bdfac <hal_usart_available_data_for_write>
   c1c58:	2800      	cmp	r0, #0
   c1c5a:	9901      	ldr	r1, [sp, #4]
   c1c5c:	dcf2      	bgt.n	c1c44 <_ZN11USARTSerial5writeEh+0x8>
}
   c1c5e:	4628      	mov	r0, r5
   c1c60:	b003      	add	sp, #12
   c1c62:	bd30      	pop	{r4, r5, pc}

000c1c64 <_ZN11USARTSerialD0Ev>:
   c1c64:	b510      	push	{r4, lr}
   c1c66:	2114      	movs	r1, #20
   c1c68:	4604      	mov	r4, r0
   c1c6a:	f7f2 fa1a 	bl	b40a2 <_ZdlPvj>
   c1c6e:	4620      	mov	r0, r4
   c1c70:	bd10      	pop	{r4, pc}
	...

000c1c74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c1c74:	b510      	push	{r4, lr}
   c1c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1c7a:	4604      	mov	r4, r0
   c1c7c:	4608      	mov	r0, r1
   c1c7e:	4611      	mov	r1, r2
   c1c80:	2200      	movs	r2, #0
   c1c82:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c1c86:	4b04      	ldr	r3, [pc, #16]	; (c1c98 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c1c88:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1c8a:	2301      	movs	r3, #1
  _serial = serial;
   c1c8c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1c8e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c1c90:	f7fc f99c 	bl	bdfcc <hal_usart_init_ex>
}
   c1c94:	4620      	mov	r0, r4
   c1c96:	bd10      	pop	{r4, pc}
   c1c98:	000c8010 	.word	0x000c8010

000c1c9c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c1c9c:	7c00      	ldrb	r0, [r0, #16]
   c1c9e:	2300      	movs	r3, #0
   c1ca0:	f7fc b98c 	b.w	bdfbc <hal_usart_begin_config>

000c1ca4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c1ca4:	2200      	movs	r2, #0
   c1ca6:	f7ff bff9 	b.w	c1c9c <_ZN11USARTSerial5beginEmm>

000c1caa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c1caa:	7c00      	ldrb	r0, [r0, #16]
   c1cac:	f7fc b946 	b.w	bdf3c <hal_usart_end>

000c1cb0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1cb0:	7441      	strb	r1, [r0, #17]
}
   c1cb2:	4770      	bx	lr

000c1cb4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1cb4:	4770      	bx	lr

000c1cb6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c1cb6:	4770      	bx	lr

000c1cb8 <_ZN9USBSerial4readEv>:
{
   c1cb8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1cba:	2100      	movs	r1, #0
   c1cbc:	7c00      	ldrb	r0, [r0, #16]
   c1cbe:	f7fc f9b5 	bl	be02c <HAL_USB_USART_Receive_Data>
}
   c1cc2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1cc6:	bd08      	pop	{r3, pc}

000c1cc8 <_ZN9USBSerial4peekEv>:
{
   c1cc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1cca:	2101      	movs	r1, #1
   c1ccc:	7c00      	ldrb	r0, [r0, #16]
   c1cce:	f7fc f9ad 	bl	be02c <HAL_USB_USART_Receive_Data>
}
   c1cd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c1cd6:	bd08      	pop	{r3, pc}

000c1cd8 <_ZN9USBSerial17availableForWriteEv>:
{
   c1cd8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1cda:	7c00      	ldrb	r0, [r0, #16]
   c1cdc:	f7fc f99e 	bl	be01c <HAL_USB_USART_Available_Data_For_Write>
}
   c1ce0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1ce4:	bd08      	pop	{r3, pc}

000c1ce6 <_ZN9USBSerial9availableEv>:
{
   c1ce6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1ce8:	7c00      	ldrb	r0, [r0, #16]
   c1cea:	f7fc f98f 	bl	be00c <HAL_USB_USART_Available_Data>
}
   c1cee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1cf2:	bd08      	pop	{r3, pc}

000c1cf4 <_ZN9USBSerial5writeEh>:
{
   c1cf4:	b513      	push	{r0, r1, r4, lr}
   c1cf6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1cf8:	7c00      	ldrb	r0, [r0, #16]
{
   c1cfa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1cfc:	f7fc f98e 	bl	be01c <HAL_USB_USART_Available_Data_For_Write>
   c1d00:	2800      	cmp	r0, #0
   c1d02:	9901      	ldr	r1, [sp, #4]
   c1d04:	dc01      	bgt.n	c1d0a <_ZN9USBSerial5writeEh+0x16>
   c1d06:	7c60      	ldrb	r0, [r4, #17]
   c1d08:	b120      	cbz	r0, c1d14 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1d0a:	7c20      	ldrb	r0, [r4, #16]
   c1d0c:	f7fc f996 	bl	be03c <HAL_USB_USART_Send_Data>
   c1d10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c1d14:	b002      	add	sp, #8
   c1d16:	bd10      	pop	{r4, pc}

000c1d18 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1d18:	7c00      	ldrb	r0, [r0, #16]
   c1d1a:	f7fc b997 	b.w	be04c <HAL_USB_USART_Flush_Data>

000c1d1e <_ZN9USBSerialD0Ev>:
   c1d1e:	b510      	push	{r4, lr}
   c1d20:	2114      	movs	r1, #20
   c1d22:	4604      	mov	r4, r0
   c1d24:	f7f2 f9bd 	bl	b40a2 <_ZdlPvj>
   c1d28:	4620      	mov	r0, r4
   c1d2a:	bd10      	pop	{r4, pc}

000c1d2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1d2c:	b510      	push	{r4, lr}
   c1d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1d32:	4604      	mov	r4, r0
   c1d34:	4608      	mov	r0, r1
   c1d36:	2100      	movs	r1, #0
   c1d38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1d3c:	4b04      	ldr	r3, [pc, #16]	; (c1d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1d3e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1d40:	2301      	movs	r3, #1
  _serial = serial;
   c1d42:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c1d44:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c1d46:	4611      	mov	r1, r2
   c1d48:	f7fc f948 	bl	bdfdc <HAL_USB_USART_Init>
}
   c1d4c:	4620      	mov	r0, r4
   c1d4e:	bd10      	pop	{r4, pc}
   c1d50:	000c8040 	.word	0x000c8040

000c1d54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c1d54:	7c00      	ldrb	r0, [r0, #16]
   c1d56:	2200      	movs	r2, #0
   c1d58:	f7fc b948 	b.w	bdfec <HAL_USB_USART_Begin>

000c1d5c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c1d5c:	7c00      	ldrb	r0, [r0, #16]
   c1d5e:	f7fc b94d 	b.w	bdffc <HAL_USB_USART_End>

000c1d62 <_Z19acquireSerialBufferv>:
{
   c1d62:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c1d64:	2214      	movs	r2, #20
{
   c1d66:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c1d68:	2100      	movs	r1, #0
   c1d6a:	f002 fbfd 	bl	c4568 <memset>
}
   c1d6e:	4620      	mov	r0, r4
   c1d70:	bd10      	pop	{r4, pc}
	...

000c1d74 <_Z16_fetch_usbserialv>:
{
   c1d74:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1d76:	4c0f      	ldr	r4, [pc, #60]	; (c1db4 <_Z16_fetch_usbserialv+0x40>)
{
   c1d78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c1d7a:	a803      	add	r0, sp, #12
   c1d7c:	f7ff fff1 	bl	c1d62 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c1d80:	7821      	ldrb	r1, [r4, #0]
   c1d82:	f3bf 8f5b 	dmb	ish
   c1d86:	f011 0101 	ands.w	r1, r1, #1
   c1d8a:	d10f      	bne.n	c1dac <_Z16_fetch_usbserialv+0x38>
   c1d8c:	4620      	mov	r0, r4
   c1d8e:	9101      	str	r1, [sp, #4]
   c1d90:	f7f2 f996 	bl	b40c0 <__cxa_guard_acquire>
   c1d94:	9901      	ldr	r1, [sp, #4]
   c1d96:	b148      	cbz	r0, c1dac <_Z16_fetch_usbserialv+0x38>
   c1d98:	aa03      	add	r2, sp, #12
   c1d9a:	4807      	ldr	r0, [pc, #28]	; (c1db8 <_Z16_fetch_usbserialv+0x44>)
   c1d9c:	f7ff ffc6 	bl	c1d2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c1da0:	4620      	mov	r0, r4
   c1da2:	f7f2 f992 	bl	b40ca <__cxa_guard_release>
   c1da6:	4805      	ldr	r0, [pc, #20]	; (c1dbc <_Z16_fetch_usbserialv+0x48>)
   c1da8:	f002 fb90 	bl	c44cc <atexit>
	return _usbserial;
}
   c1dac:	4802      	ldr	r0, [pc, #8]	; (c1db8 <_Z16_fetch_usbserialv+0x44>)
   c1dae:	b008      	add	sp, #32
   c1db0:	bd10      	pop	{r4, pc}
   c1db2:	bf00      	nop
   c1db4:	2003e708 	.word	0x2003e708
   c1db8:	2003e70c 	.word	0x2003e70c
   c1dbc:	000c1cb5 	.word	0x000c1cb5

000c1dc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c1dc0:	4b01      	ldr	r3, [pc, #4]	; (c1dc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c1dc2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c1dc4:	4770      	bx	lr
   c1dc6:	bf00      	nop
   c1dc8:	2003db48 	.word	0x2003db48

000c1dcc <serialEventRun>:
{
   c1dcc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c1dce:	4b0b      	ldr	r3, [pc, #44]	; (c1dfc <serialEventRun+0x30>)
   c1dd0:	b143      	cbz	r3, c1de4 <serialEventRun+0x18>
   c1dd2:	f7ff ffcf 	bl	c1d74 <_Z16_fetch_usbserialv>
   c1dd6:	6803      	ldr	r3, [r0, #0]
   c1dd8:	691b      	ldr	r3, [r3, #16]
   c1dda:	4798      	blx	r3
   c1ddc:	2800      	cmp	r0, #0
   c1dde:	dd01      	ble.n	c1de4 <serialEventRun+0x18>
        serialEvent();
   c1de0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c1de4:	4b06      	ldr	r3, [pc, #24]	; (c1e00 <serialEventRun+0x34>)
   c1de6:	b143      	cbz	r3, c1dfa <serialEventRun+0x2e>
   c1de8:	f000 f970 	bl	c20cc <_Z22__fetch_global_Serial1v>
   c1dec:	6803      	ldr	r3, [r0, #0]
   c1dee:	691b      	ldr	r3, [r3, #16]
   c1df0:	4798      	blx	r3
   c1df2:	2800      	cmp	r0, #0
   c1df4:	dd01      	ble.n	c1dfa <serialEventRun+0x2e>
        serialEvent1();
   c1df6:	f3af 8000 	nop.w
}
   c1dfa:	bd08      	pop	{r3, pc}
	...

000c1e04 <_post_loop>:
{
   c1e04:	b508      	push	{r3, lr}
	serialEventRun();
   c1e06:	f7ff ffe1 	bl	c1dcc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c1e0a:	f7fb ff4f 	bl	bdcac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c1e0e:	4b01      	ldr	r3, [pc, #4]	; (c1e14 <_post_loop+0x10>)
   c1e10:	6018      	str	r0, [r3, #0]
}
   c1e12:	bd08      	pop	{r3, pc}
   c1e14:	2003e728 	.word	0x2003e728

000c1e18 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1e18:	4805      	ldr	r0, [pc, #20]	; (c1e30 <_Z33system_initialize_user_backup_ramv+0x18>)
   c1e1a:	4a06      	ldr	r2, [pc, #24]	; (c1e34 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c1e1c:	4906      	ldr	r1, [pc, #24]	; (c1e38 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c1e1e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c1e20:	1a12      	subs	r2, r2, r0
   c1e22:	f002 fb79 	bl	c4518 <memcpy>
    __backup_sram_signature = signature;
   c1e26:	4b05      	ldr	r3, [pc, #20]	; (c1e3c <_Z33system_initialize_user_backup_ramv+0x24>)
   c1e28:	4a05      	ldr	r2, [pc, #20]	; (c1e40 <_Z33system_initialize_user_backup_ramv+0x28>)
   c1e2a:	601a      	str	r2, [r3, #0]
}
   c1e2c:	bd08      	pop	{r3, pc}
   c1e2e:	bf00      	nop
   c1e30:	2003f400 	.word	0x2003f400
   c1e34:	2003f404 	.word	0x2003f404
   c1e38:	000c89d4 	.word	0x000c89d4
   c1e3c:	2003f400 	.word	0x2003f400
   c1e40:	9a271c1e 	.word	0x9a271c1e

000c1e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c1e44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1e46:	2300      	movs	r3, #0
   c1e48:	9300      	str	r3, [sp, #0]
   c1e4a:	461a      	mov	r2, r3
   c1e4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1e50:	f7fc f970 	bl	be134 <system_ctrl_set_result>
}
   c1e54:	b003      	add	sp, #12
   c1e56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c1e5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c1e5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c1e5e:	8843      	ldrh	r3, [r0, #2]
   c1e60:	2b0a      	cmp	r3, #10
   c1e62:	d008      	beq.n	c1e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c1e64:	2b50      	cmp	r3, #80	; 0x50
   c1e66:	d10b      	bne.n	c1e80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c1e68:	4b09      	ldr	r3, [pc, #36]	; (c1e90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c1e6a:	681b      	ldr	r3, [r3, #0]
   c1e6c:	b14b      	cbz	r3, c1e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c1e6e:	b003      	add	sp, #12
   c1e70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c1e74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c1e76:	f7ff ffe5 	bl	c1e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c1e7a:	b003      	add	sp, #12
   c1e7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c1e80:	2300      	movs	r3, #0
   c1e82:	9300      	str	r3, [sp, #0]
   c1e84:	461a      	mov	r2, r3
   c1e86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c1e8a:	f7fc f953 	bl	be134 <system_ctrl_set_result>
}
   c1e8e:	e7f4      	b.n	c1e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c1e90:	2003e724 	.word	0x2003e724

000c1e94 <module_user_init_hook>:
{
   c1e94:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c1e96:	4812      	ldr	r0, [pc, #72]	; (c1ee0 <module_user_init_hook+0x4c>)
   c1e98:	2100      	movs	r1, #0
   c1e9a:	f7fc fa45 	bl	be328 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c1e9e:	4b11      	ldr	r3, [pc, #68]	; (c1ee4 <module_user_init_hook+0x50>)
   c1ea0:	681a      	ldr	r2, [r3, #0]
   c1ea2:	4b11      	ldr	r3, [pc, #68]	; (c1ee8 <module_user_init_hook+0x54>)
   c1ea4:	429a      	cmp	r2, r3
   c1ea6:	4b11      	ldr	r3, [pc, #68]	; (c1eec <module_user_init_hook+0x58>)
   c1ea8:	bf0c      	ite	eq
   c1eaa:	2201      	moveq	r2, #1
   c1eac:	2200      	movne	r2, #0
   c1eae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c1eb0:	d001      	beq.n	c1eb6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c1eb2:	f7ff ffb1 	bl	c1e18 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c1eb6:	f7fb fee1 	bl	bdc7c <HAL_RNG_GetRandomNumber>
   c1eba:	4604      	mov	r4, r0
    srand(seed);
   c1ebc:	f002 fb5c 	bl	c4578 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c1ec0:	4b0b      	ldr	r3, [pc, #44]	; (c1ef0 <module_user_init_hook+0x5c>)
   c1ec2:	b113      	cbz	r3, c1eca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c1ec4:	4620      	mov	r0, r4
   c1ec6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c1eca:	2100      	movs	r1, #0
   c1ecc:	4808      	ldr	r0, [pc, #32]	; (c1ef0 <module_user_init_hook+0x5c>)
   c1ece:	f7fc f96b 	bl	be1a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c1ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c1ed6:	4807      	ldr	r0, [pc, #28]	; (c1ef4 <module_user_init_hook+0x60>)
   c1ed8:	2100      	movs	r1, #0
   c1eda:	f7fc b921 	b.w	be120 <system_ctrl_set_app_request_handler>
   c1ede:	bf00      	nop
   c1ee0:	000c1dc1 	.word	0x000c1dc1
   c1ee4:	2003f400 	.word	0x2003f400
   c1ee8:	9a271c1e 	.word	0x9a271c1e
   c1eec:	2003e720 	.word	0x2003e720
   c1ef0:	00000000 	.word	0x00000000
   c1ef4:	000c1e5d 	.word	0x000c1e5d

000c1ef8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1ef8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c1efa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1efc:	d902      	bls.n	c1f04 <pinAvailable+0xc>
    return false;
   c1efe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1f00:	b002      	add	sp, #8
   c1f02:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1f04:	f1a0 030b 	sub.w	r3, r0, #11
   c1f08:	2b02      	cmp	r3, #2
   c1f0a:	d81a      	bhi.n	c1f42 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1f0c:	4c17      	ldr	r4, [pc, #92]	; (c1f6c <pinAvailable+0x74>)
   c1f0e:	7821      	ldrb	r1, [r4, #0]
   c1f10:	f3bf 8f5b 	dmb	ish
   c1f14:	f011 0101 	ands.w	r1, r1, #1
   c1f18:	d10b      	bne.n	c1f32 <pinAvailable+0x3a>
   c1f1a:	4620      	mov	r0, r4
   c1f1c:	9101      	str	r1, [sp, #4]
   c1f1e:	f7f2 f8cf 	bl	b40c0 <__cxa_guard_acquire>
   c1f22:	9901      	ldr	r1, [sp, #4]
   c1f24:	b128      	cbz	r0, c1f32 <pinAvailable+0x3a>
   c1f26:	4812      	ldr	r0, [pc, #72]	; (c1f70 <pinAvailable+0x78>)
   c1f28:	f7ff fb8d 	bl	c1646 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1f2c:	4620      	mov	r0, r4
   c1f2e:	f7f2 f8cc 	bl	b40ca <__cxa_guard_release>
   c1f32:	4b0f      	ldr	r3, [pc, #60]	; (c1f70 <pinAvailable+0x78>)
   c1f34:	7818      	ldrb	r0, [r3, #0]
   c1f36:	f7fb ffc9 	bl	bdecc <hal_spi_is_enabled>
   c1f3a:	2800      	cmp	r0, #0
   c1f3c:	d1df      	bne.n	c1efe <pinAvailable+0x6>
  return true; // 'pin' is available
   c1f3e:	2001      	movs	r0, #1
   c1f40:	e7de      	b.n	c1f00 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1f42:	2801      	cmp	r0, #1
   c1f44:	d809      	bhi.n	c1f5a <pinAvailable+0x62>
   c1f46:	f000 f881 	bl	c204c <_Z19__fetch_global_Wirev>
   c1f4a:	2100      	movs	r1, #0
   c1f4c:	7c00      	ldrb	r0, [r0, #16]
   c1f4e:	f7fb ff5d 	bl	bde0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c1f52:	f080 0001 	eor.w	r0, r0, #1
   c1f56:	b2c0      	uxtb	r0, r0
   c1f58:	e7d2      	b.n	c1f00 <pinAvailable+0x8>
   c1f5a:	3809      	subs	r0, #9
   c1f5c:	2801      	cmp	r0, #1
   c1f5e:	d8ee      	bhi.n	c1f3e <pinAvailable+0x46>
   c1f60:	f000 f8b4 	bl	c20cc <_Z22__fetch_global_Serial1v>
   c1f64:	7c00      	ldrb	r0, [r0, #16]
   c1f66:	f7fc f819 	bl	bdf9c <hal_usart_is_enabled>
   c1f6a:	e7f2      	b.n	c1f52 <pinAvailable+0x5a>
   c1f6c:	2003dd24 	.word	0x2003dd24
   c1f70:	2003dd28 	.word	0x2003dd28

000c1f74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1f74:	2823      	cmp	r0, #35	; 0x23
{
   c1f76:	b538      	push	{r3, r4, r5, lr}
   c1f78:	4604      	mov	r4, r0
   c1f7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1f7c:	d80a      	bhi.n	c1f94 <pinMode+0x20>
   c1f7e:	29ff      	cmp	r1, #255	; 0xff
   c1f80:	d008      	beq.n	c1f94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1f82:	f7ff ffb9 	bl	c1ef8 <pinAvailable>
   c1f86:	b128      	cbz	r0, c1f94 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1f88:	4629      	mov	r1, r5
   c1f8a:	4620      	mov	r0, r4
}
   c1f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1f90:	f7fb beac 	b.w	bdcec <HAL_Pin_Mode>
}
   c1f94:	bd38      	pop	{r3, r4, r5, pc}

000c1f96 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1f96:	b538      	push	{r3, r4, r5, lr}
   c1f98:	4604      	mov	r4, r0
   c1f9a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1f9c:	f7fb feae 	bl	bdcfc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1fa0:	28ff      	cmp	r0, #255	; 0xff
   c1fa2:	d010      	beq.n	c1fc6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1fa4:	2806      	cmp	r0, #6
   c1fa6:	d804      	bhi.n	c1fb2 <digitalWrite+0x1c>
   c1fa8:	234d      	movs	r3, #77	; 0x4d
   c1faa:	fa23 f000 	lsr.w	r0, r3, r0
   c1fae:	07c3      	lsls	r3, r0, #31
   c1fb0:	d409      	bmi.n	c1fc6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1fb2:	4620      	mov	r0, r4
   c1fb4:	f7ff ffa0 	bl	c1ef8 <pinAvailable>
   c1fb8:	b128      	cbz	r0, c1fc6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1fba:	4629      	mov	r1, r5
   c1fbc:	4620      	mov	r0, r4
}
   c1fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1fc2:	f7fb bea3 	b.w	bdd0c <HAL_GPIO_Write>
}
   c1fc6:	bd38      	pop	{r3, r4, r5, pc}

000c1fc8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c1fc8:	b510      	push	{r4, lr}
   c1fca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1fcc:	f7fb fe96 	bl	bdcfc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c1fd0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c1fd2:	b2db      	uxtb	r3, r3
   c1fd4:	2b01      	cmp	r3, #1
   c1fd6:	d908      	bls.n	c1fea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c1fd8:	4620      	mov	r0, r4
   c1fda:	f7ff ff8d 	bl	c1ef8 <pinAvailable>
   c1fde:	b120      	cbz	r0, c1fea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c1fe0:	4620      	mov	r0, r4
}
   c1fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c1fe6:	f7fb be99 	b.w	bdd1c <HAL_GPIO_Read>
}
   c1fea:	2000      	movs	r0, #0
   c1fec:	bd10      	pop	{r4, pc}

000c1fee <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1fee:	280d      	cmp	r0, #13
{
   c1ff0:	b510      	push	{r4, lr}
   c1ff2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c1ff4:	bf9c      	itt	ls
   c1ff6:	340e      	addls	r4, #14
   c1ff8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c1ffa:	4620      	mov	r0, r4
   c1ffc:	f7ff ff7c 	bl	c1ef8 <pinAvailable>
   c2000:	b150      	cbz	r0, c2018 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c2002:	2103      	movs	r1, #3
   c2004:	4620      	mov	r0, r4
   c2006:	f7fb fe69 	bl	bdcdc <HAL_Validate_Pin_Function>
   c200a:	2803      	cmp	r0, #3
   c200c:	d104      	bne.n	c2018 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c200e:	4620      	mov	r0, r4
}
   c2010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c2014:	f7fb beaa 	b.w	bdd6c <hal_adc_read>
}
   c2018:	2000      	movs	r0, #0
   c201a:	bd10      	pop	{r4, pc}

000c201c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c201c:	4770      	bx	lr
	...

000c2020 <_Z17acquireWireBufferv>:
{
   c2020:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c2022:	2520      	movs	r5, #32
   c2024:	2314      	movs	r3, #20
{
   c2026:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c2028:	6003      	str	r3, [r0, #0]
   c202a:	6085      	str	r5, [r0, #8]
   c202c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c202e:	4906      	ldr	r1, [pc, #24]	; (c2048 <_Z17acquireWireBufferv+0x28>)
   c2030:	4628      	mov	r0, r5
   c2032:	f000 f871 	bl	c2118 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c2036:	4904      	ldr	r1, [pc, #16]	; (c2048 <_Z17acquireWireBufferv+0x28>)
	};
   c2038:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c203a:	4628      	mov	r0, r5
   c203c:	f000 f86c 	bl	c2118 <_ZnajRKSt9nothrow_t>
	};
   c2040:	60e0      	str	r0, [r4, #12]
}
   c2042:	4620      	mov	r0, r4
   c2044:	bd38      	pop	{r3, r4, r5, pc}
   c2046:	bf00      	nop
   c2048:	000c8068 	.word	0x000c8068

000c204c <_Z19__fetch_global_Wirev>:
{
   c204c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c204e:	4d0e      	ldr	r5, [pc, #56]	; (c2088 <_Z19__fetch_global_Wirev+0x3c>)
   c2050:	7829      	ldrb	r1, [r5, #0]
   c2052:	f3bf 8f5b 	dmb	ish
   c2056:	f011 0401 	ands.w	r4, r1, #1
{
   c205a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c205c:	d111      	bne.n	c2082 <_Z19__fetch_global_Wirev+0x36>
   c205e:	4628      	mov	r0, r5
   c2060:	f7f2 f82e 	bl	b40c0 <__cxa_guard_acquire>
   c2064:	b168      	cbz	r0, c2082 <_Z19__fetch_global_Wirev+0x36>
   c2066:	a801      	add	r0, sp, #4
   c2068:	f7ff ffda 	bl	c2020 <_Z17acquireWireBufferv>
   c206c:	aa01      	add	r2, sp, #4
   c206e:	4621      	mov	r1, r4
   c2070:	4806      	ldr	r0, [pc, #24]	; (c208c <_Z19__fetch_global_Wirev+0x40>)
   c2072:	f7fd feb7 	bl	bfde4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c2076:	4628      	mov	r0, r5
   c2078:	f7f2 f827 	bl	b40ca <__cxa_guard_release>
   c207c:	4804      	ldr	r0, [pc, #16]	; (c2090 <_Z19__fetch_global_Wirev+0x44>)
   c207e:	f002 fa25 	bl	c44cc <atexit>
	return wire;
}
   c2082:	4802      	ldr	r0, [pc, #8]	; (c208c <_Z19__fetch_global_Wirev+0x40>)
   c2084:	b007      	add	sp, #28
   c2086:	bd30      	pop	{r4, r5, pc}
   c2088:	2003e72c 	.word	0x2003e72c
   c208c:	2003e730 	.word	0x2003e730
   c2090:	000c201d 	.word	0x000c201d

000c2094 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2094:	4770      	bx	lr
	...

000c2098 <_Z20acquireSerial1Bufferv>:
{
   c2098:	b538      	push	{r3, r4, r5, lr}
   c209a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c209c:	2514      	movs	r5, #20
   c209e:	462a      	mov	r2, r5
   c20a0:	2100      	movs	r1, #0
   c20a2:	f002 fa61 	bl	c4568 <memset>
   c20a6:	8025      	strh	r5, [r4, #0]
   c20a8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20aa:	4907      	ldr	r1, [pc, #28]	; (c20c8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c20ac:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20ae:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c20b0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20b2:	f000 f831 	bl	c2118 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20b6:	4904      	ldr	r1, [pc, #16]	; (c20c8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c20b8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c20ba:	4628      	mov	r0, r5
   c20bc:	f000 f82c 	bl	c2118 <_ZnajRKSt9nothrow_t>
    };
   c20c0:	60e0      	str	r0, [r4, #12]
}
   c20c2:	4620      	mov	r0, r4
   c20c4:	bd38      	pop	{r3, r4, r5, pc}
   c20c6:	bf00      	nop
   c20c8:	000c8068 	.word	0x000c8068

000c20cc <_Z22__fetch_global_Serial1v>:
{
   c20cc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c20ce:	4d0e      	ldr	r5, [pc, #56]	; (c2108 <_Z22__fetch_global_Serial1v+0x3c>)
   c20d0:	7829      	ldrb	r1, [r5, #0]
   c20d2:	f3bf 8f5b 	dmb	ish
   c20d6:	f011 0401 	ands.w	r4, r1, #1
{
   c20da:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c20dc:	d111      	bne.n	c2102 <_Z22__fetch_global_Serial1v+0x36>
   c20de:	4628      	mov	r0, r5
   c20e0:	f7f1 ffee 	bl	b40c0 <__cxa_guard_acquire>
   c20e4:	b168      	cbz	r0, c2102 <_Z22__fetch_global_Serial1v+0x36>
   c20e6:	a801      	add	r0, sp, #4
   c20e8:	f7ff ffd6 	bl	c2098 <_Z20acquireSerial1Bufferv>
   c20ec:	aa01      	add	r2, sp, #4
   c20ee:	4621      	mov	r1, r4
   c20f0:	4806      	ldr	r0, [pc, #24]	; (c210c <_Z22__fetch_global_Serial1v+0x40>)
   c20f2:	f7ff fdbf 	bl	c1c74 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c20f6:	4628      	mov	r0, r5
   c20f8:	f7f1 ffe7 	bl	b40ca <__cxa_guard_release>
   c20fc:	4804      	ldr	r0, [pc, #16]	; (c2110 <_Z22__fetch_global_Serial1v+0x44>)
   c20fe:	f002 f9e5 	bl	c44cc <atexit>
    return serial1;
}
   c2102:	4802      	ldr	r0, [pc, #8]	; (c210c <_Z22__fetch_global_Serial1v+0x40>)
   c2104:	b007      	add	sp, #28
   c2106:	bd30      	pop	{r4, r5, pc}
   c2108:	2003e744 	.word	0x2003e744
   c210c:	2003e748 	.word	0x2003e748
   c2110:	000c2095 	.word	0x000c2095

000c2114 <_ZnwjRKSt9nothrow_t>:
   c2114:	f7f1 bfbf 	b.w	b4096 <_Znwj>

000c2118 <_ZnajRKSt9nothrow_t>:
   c2118:	f7f1 bfbf 	b.w	b409a <_Znaj>

000c211c <_ZSt25__throw_bad_function_callv>:
   c211c:	b508      	push	{r3, lr}
   c211e:	f7fc f8e3 	bl	be2e8 <abort>
	...

000c2124 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c2124:	4901      	ldr	r1, [pc, #4]	; (c212c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c2126:	f000 b8f9 	b.w	c231c <_ZNKSt9type_infoeqERKS_>
   c212a:	bf00      	nop
   c212c:	000c8084 	.word	0x000c8084

000c2130 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c2130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c2132:	2400      	movs	r4, #0
   c2134:	2310      	movs	r3, #16
   c2136:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c213a:	6803      	ldr	r3, [r0, #0]
   c213c:	4615      	mov	r5, r2
   c213e:	699e      	ldr	r6, [r3, #24]
   c2140:	6812      	ldr	r2, [r2, #0]
   c2142:	466b      	mov	r3, sp
   c2144:	e9cd 4400 	strd	r4, r4, [sp]
   c2148:	47b0      	blx	r6
   c214a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c214e:	f003 0306 	and.w	r3, r3, #6
   c2152:	2b06      	cmp	r3, #6
   c2154:	bf03      	ittte	eq
   c2156:	9b00      	ldreq	r3, [sp, #0]
   c2158:	602b      	streq	r3, [r5, #0]
   c215a:	2001      	moveq	r0, #1
   c215c:	4620      	movne	r0, r4
   c215e:	b004      	add	sp, #16
   c2160:	bd70      	pop	{r4, r5, r6, pc}

000c2162 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c2162:	9800      	ldr	r0, [sp, #0]
   c2164:	4290      	cmp	r0, r2
   c2166:	bf14      	ite	ne
   c2168:	2001      	movne	r0, #1
   c216a:	2006      	moveq	r0, #6
   c216c:	4770      	bx	lr
	...

000c2170 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c2170:	b510      	push	{r4, lr}
   c2172:	4b03      	ldr	r3, [pc, #12]	; (c2180 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c2174:	6003      	str	r3, [r0, #0]
   c2176:	4604      	mov	r4, r0
   c2178:	f000 f8cd 	bl	c2316 <_ZNSt9type_infoD1Ev>
   c217c:	4620      	mov	r0, r4
   c217e:	bd10      	pop	{r4, pc}
   c2180:	000c80c4 	.word	0x000c80c4

000c2184 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c2184:	b510      	push	{r4, lr}
   c2186:	4604      	mov	r4, r0
   c2188:	f7ff fff2 	bl	c2170 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c218c:	4620      	mov	r0, r4
   c218e:	2108      	movs	r1, #8
   c2190:	f7f1 ff87 	bl	b40a2 <_ZdlPvj>
   c2194:	4620      	mov	r0, r4
   c2196:	bd10      	pop	{r4, pc}

000c2198 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c2198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c219c:	461f      	mov	r7, r3
   c219e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c21a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c21a6:	4598      	cmp	r8, r3
   c21a8:	4606      	mov	r6, r0
   c21aa:	4615      	mov	r5, r2
   c21ac:	d107      	bne.n	c21be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c21ae:	9907      	ldr	r1, [sp, #28]
   c21b0:	f000 f8b4 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c21b4:	b118      	cbz	r0, c21be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c21b6:	7165      	strb	r5, [r4, #5]
   c21b8:	2000      	movs	r0, #0
   c21ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c21be:	4639      	mov	r1, r7
   c21c0:	4630      	mov	r0, r6
   c21c2:	f000 f8ab 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c21c6:	2800      	cmp	r0, #0
   c21c8:	d0f6      	beq.n	c21b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c21ca:	2301      	movs	r3, #1
   c21cc:	f8c4 8000 	str.w	r8, [r4]
   c21d0:	7125      	strb	r5, [r4, #4]
   c21d2:	71a3      	strb	r3, [r4, #6]
   c21d4:	e7f0      	b.n	c21b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c21d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c21d6:	b538      	push	{r3, r4, r5, lr}
   c21d8:	4615      	mov	r5, r2
   c21da:	461c      	mov	r4, r3
   c21dc:	f000 f89e 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c21e0:	b120      	cbz	r0, c21ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c21e2:	2308      	movs	r3, #8
   c21e4:	60e3      	str	r3, [r4, #12]
   c21e6:	2306      	movs	r3, #6
   c21e8:	6025      	str	r5, [r4, #0]
   c21ea:	7123      	strb	r3, [r4, #4]
   c21ec:	bd38      	pop	{r3, r4, r5, pc}

000c21ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c21ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c21f0:	4605      	mov	r5, r0
   c21f2:	460c      	mov	r4, r1
   c21f4:	9201      	str	r2, [sp, #4]
   c21f6:	461e      	mov	r6, r3
   c21f8:	f000 f890 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c21fc:	b950      	cbnz	r0, c2214 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c21fe:	2e03      	cmp	r6, #3
   c2200:	d808      	bhi.n	c2214 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c2202:	6823      	ldr	r3, [r4, #0]
   c2204:	9a01      	ldr	r2, [sp, #4]
   c2206:	695b      	ldr	r3, [r3, #20]
   c2208:	4629      	mov	r1, r5
   c220a:	4620      	mov	r0, r4
   c220c:	b002      	add	sp, #8
   c220e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c2212:	4718      	bx	r3
   c2214:	b002      	add	sp, #8
   c2216:	bd70      	pop	{r4, r5, r6, pc}

000c2218 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2218:	b510      	push	{r4, lr}
   c221a:	4b03      	ldr	r3, [pc, #12]	; (c2228 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c221c:	6003      	str	r3, [r0, #0]
   c221e:	4604      	mov	r4, r0
   c2220:	f7ff ffa6 	bl	c2170 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2224:	4620      	mov	r0, r4
   c2226:	bd10      	pop	{r4, pc}
   c2228:	000c8124 	.word	0x000c8124

000c222c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c222c:	b510      	push	{r4, lr}
   c222e:	4604      	mov	r4, r0
   c2230:	f7ff fff2 	bl	c2218 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c2234:	4620      	mov	r0, r4
   c2236:	210c      	movs	r1, #12
   c2238:	f7f1 ff33 	bl	b40a2 <_ZdlPvj>
   c223c:	4620      	mov	r0, r4
   c223e:	bd10      	pop	{r4, pc}

000c2240 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c2240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c2242:	9f08      	ldr	r7, [sp, #32]
   c2244:	4297      	cmp	r7, r2
   c2246:	4605      	mov	r5, r0
   c2248:	460e      	mov	r6, r1
   c224a:	4614      	mov	r4, r2
   c224c:	d00a      	beq.n	c2264 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c224e:	68a8      	ldr	r0, [r5, #8]
   c2250:	6802      	ldr	r2, [r0, #0]
   c2252:	9708      	str	r7, [sp, #32]
   c2254:	6a15      	ldr	r5, [r2, #32]
   c2256:	4631      	mov	r1, r6
   c2258:	4622      	mov	r2, r4
   c225a:	46ac      	mov	ip, r5
   c225c:	b003      	add	sp, #12
   c225e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c2262:	4760      	bx	ip
   c2264:	4619      	mov	r1, r3
   c2266:	9301      	str	r3, [sp, #4]
   c2268:	f000 f858 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c226c:	9b01      	ldr	r3, [sp, #4]
   c226e:	2800      	cmp	r0, #0
   c2270:	d0ed      	beq.n	c224e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c2272:	2006      	movs	r0, #6
   c2274:	b003      	add	sp, #12
   c2276:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c2278 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c2278:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c227c:	460d      	mov	r5, r1
   c227e:	4619      	mov	r1, r3
   c2280:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c2284:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c2288:	4681      	mov	r9, r0
   c228a:	4617      	mov	r7, r2
   c228c:	4698      	mov	r8, r3
   c228e:	f000 f845 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c2292:	b190      	cbz	r0, c22ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c2294:	2d00      	cmp	r5, #0
   c2296:	6034      	str	r4, [r6, #0]
   c2298:	7137      	strb	r7, [r6, #4]
   c229a:	db09      	blt.n	c22b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c229c:	1961      	adds	r1, r4, r5
   c229e:	458a      	cmp	sl, r1
   c22a0:	bf0c      	ite	eq
   c22a2:	2106      	moveq	r1, #6
   c22a4:	2101      	movne	r1, #1
   c22a6:	71b1      	strb	r1, [r6, #6]
   c22a8:	2000      	movs	r0, #0
   c22aa:	b001      	add	sp, #4
   c22ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c22b0:	3502      	adds	r5, #2
   c22b2:	d1f9      	bne.n	c22a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22b4:	2301      	movs	r3, #1
   c22b6:	71b3      	strb	r3, [r6, #6]
   c22b8:	e7f6      	b.n	c22a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22ba:	4554      	cmp	r4, sl
   c22bc:	d106      	bne.n	c22cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c22be:	4659      	mov	r1, fp
   c22c0:	4648      	mov	r0, r9
   c22c2:	f000 f82b 	bl	c231c <_ZNKSt9type_infoeqERKS_>
   c22c6:	b108      	cbz	r0, c22cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c22c8:	7177      	strb	r7, [r6, #5]
   c22ca:	e7ed      	b.n	c22a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c22d0:	6803      	ldr	r3, [r0, #0]
   c22d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c22d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c22da:	69dc      	ldr	r4, [r3, #28]
   c22dc:	463a      	mov	r2, r7
   c22de:	4643      	mov	r3, r8
   c22e0:	4629      	mov	r1, r5
   c22e2:	46a4      	mov	ip, r4
   c22e4:	b001      	add	sp, #4
   c22e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c22ea:	4760      	bx	ip

000c22ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c22ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c22f0:	4607      	mov	r7, r0
   c22f2:	460c      	mov	r4, r1
   c22f4:	4615      	mov	r5, r2
   c22f6:	461e      	mov	r6, r3
   c22f8:	f7ff ff6d 	bl	c21d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c22fc:	b948      	cbnz	r0, c2312 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c22fe:	68b8      	ldr	r0, [r7, #8]
   c2300:	6803      	ldr	r3, [r0, #0]
   c2302:	699f      	ldr	r7, [r3, #24]
   c2304:	462a      	mov	r2, r5
   c2306:	4633      	mov	r3, r6
   c2308:	4621      	mov	r1, r4
   c230a:	46bc      	mov	ip, r7
   c230c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c2310:	4760      	bx	ip
   c2312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c2316 <_ZNSt9type_infoD1Ev>:
   c2316:	4770      	bx	lr

000c2318 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2318:	2000      	movs	r0, #0
   c231a:	4770      	bx	lr

000c231c <_ZNKSt9type_infoeqERKS_>:
   c231c:	4281      	cmp	r1, r0
   c231e:	b508      	push	{r3, lr}
   c2320:	d00e      	beq.n	c2340 <_ZNKSt9type_infoeqERKS_+0x24>
   c2322:	6840      	ldr	r0, [r0, #4]
   c2324:	7803      	ldrb	r3, [r0, #0]
   c2326:	2b2a      	cmp	r3, #42	; 0x2a
   c2328:	d00c      	beq.n	c2344 <_ZNKSt9type_infoeqERKS_+0x28>
   c232a:	6849      	ldr	r1, [r1, #4]
   c232c:	780b      	ldrb	r3, [r1, #0]
   c232e:	2b2a      	cmp	r3, #42	; 0x2a
   c2330:	bf08      	it	eq
   c2332:	3101      	addeq	r1, #1
   c2334:	f002 f974 	bl	c4620 <strcmp>
   c2338:	fab0 f080 	clz	r0, r0
   c233c:	0940      	lsrs	r0, r0, #5
   c233e:	bd08      	pop	{r3, pc}
   c2340:	2001      	movs	r0, #1
   c2342:	e7fc      	b.n	c233e <_ZNKSt9type_infoeqERKS_+0x22>
   c2344:	2000      	movs	r0, #0
   c2346:	e7fa      	b.n	c233e <_ZNKSt9type_infoeqERKS_+0x22>

000c2348 <cosf>:
   c2348:	ee10 3a10 	vmov	r3, s0
   c234c:	4a18      	ldr	r2, [pc, #96]	; (c23b0 <cosf+0x68>)
   c234e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2352:	4293      	cmp	r3, r2
   c2354:	dd1b      	ble.n	c238e <cosf+0x46>
   c2356:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c235a:	db02      	blt.n	c2362 <cosf+0x1a>
   c235c:	ee30 0a40 	vsub.f32	s0, s0, s0
   c2360:	4770      	bx	lr
   c2362:	b500      	push	{lr}
   c2364:	b083      	sub	sp, #12
   c2366:	4668      	mov	r0, sp
   c2368:	f000 fb10 	bl	c298c <__ieee754_rem_pio2f>
   c236c:	f000 0003 	and.w	r0, r0, #3
   c2370:	2801      	cmp	r0, #1
   c2372:	eddd 0a01 	vldr	s1, [sp, #4]
   c2376:	ed9d 0a00 	vldr	s0, [sp]
   c237a:	d00c      	beq.n	c2396 <cosf+0x4e>
   c237c:	2802      	cmp	r0, #2
   c237e:	d012      	beq.n	c23a6 <cosf+0x5e>
   c2380:	b170      	cbz	r0, c23a0 <cosf+0x58>
   c2382:	2001      	movs	r0, #1
   c2384:	f000 fff4 	bl	c3370 <__kernel_sinf>
   c2388:	b003      	add	sp, #12
   c238a:	f85d fb04 	ldr.w	pc, [sp], #4
   c238e:	eddf 0a09 	vldr	s1, [pc, #36]	; c23b4 <cosf+0x6c>
   c2392:	f000 bc31 	b.w	c2bf8 <__kernel_cosf>
   c2396:	f000 ffeb 	bl	c3370 <__kernel_sinf>
   c239a:	eeb1 0a40 	vneg.f32	s0, s0
   c239e:	e7f3      	b.n	c2388 <cosf+0x40>
   c23a0:	f000 fc2a 	bl	c2bf8 <__kernel_cosf>
   c23a4:	e7f0      	b.n	c2388 <cosf+0x40>
   c23a6:	f000 fc27 	bl	c2bf8 <__kernel_cosf>
   c23aa:	eeb1 0a40 	vneg.f32	s0, s0
   c23ae:	e7eb      	b.n	c2388 <cosf+0x40>
   c23b0:	3f490fd8 	.word	0x3f490fd8
   c23b4:	00000000 	.word	0x00000000

000c23b8 <sinf>:
   c23b8:	ee10 3a10 	vmov	r3, s0
   c23bc:	4a19      	ldr	r2, [pc, #100]	; (c2424 <sinf+0x6c>)
   c23be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c23c2:	4293      	cmp	r3, r2
   c23c4:	dd1c      	ble.n	c2400 <sinf+0x48>
   c23c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c23ca:	db02      	blt.n	c23d2 <sinf+0x1a>
   c23cc:	ee30 0a40 	vsub.f32	s0, s0, s0
   c23d0:	4770      	bx	lr
   c23d2:	b500      	push	{lr}
   c23d4:	b083      	sub	sp, #12
   c23d6:	4668      	mov	r0, sp
   c23d8:	f000 fad8 	bl	c298c <__ieee754_rem_pio2f>
   c23dc:	f000 0003 	and.w	r0, r0, #3
   c23e0:	2801      	cmp	r0, #1
   c23e2:	eddd 0a01 	vldr	s1, [sp, #4]
   c23e6:	ed9d 0a00 	vldr	s0, [sp]
   c23ea:	d00e      	beq.n	c240a <sinf+0x52>
   c23ec:	2802      	cmp	r0, #2
   c23ee:	d013      	beq.n	c2418 <sinf+0x60>
   c23f0:	b170      	cbz	r0, c2410 <sinf+0x58>
   c23f2:	f000 fc01 	bl	c2bf8 <__kernel_cosf>
   c23f6:	eeb1 0a40 	vneg.f32	s0, s0
   c23fa:	b003      	add	sp, #12
   c23fc:	f85d fb04 	ldr.w	pc, [sp], #4
   c2400:	eddf 0a09 	vldr	s1, [pc, #36]	; c2428 <sinf+0x70>
   c2404:	2000      	movs	r0, #0
   c2406:	f000 bfb3 	b.w	c3370 <__kernel_sinf>
   c240a:	f000 fbf5 	bl	c2bf8 <__kernel_cosf>
   c240e:	e7f4      	b.n	c23fa <sinf+0x42>
   c2410:	2001      	movs	r0, #1
   c2412:	f000 ffad 	bl	c3370 <__kernel_sinf>
   c2416:	e7f0      	b.n	c23fa <sinf+0x42>
   c2418:	2001      	movs	r0, #1
   c241a:	f000 ffa9 	bl	c3370 <__kernel_sinf>
   c241e:	eeb1 0a40 	vneg.f32	s0, s0
   c2422:	e7ea      	b.n	c23fa <sinf+0x42>
   c2424:	3f490fd8 	.word	0x3f490fd8
   c2428:	00000000 	.word	0x00000000

000c242c <atan2>:
   c242c:	f000 b864 	b.w	c24f8 <__ieee754_atan2>

000c2430 <sqrt>:
   c2430:	b538      	push	{r3, r4, r5, lr}
   c2432:	ed2d 8b02 	vpush	{d8}
   c2436:	ec55 4b10 	vmov	r4, r5, d0
   c243a:	f000 f933 	bl	c26a4 <__ieee754_sqrt>
   c243e:	4b18      	ldr	r3, [pc, #96]	; (c24a0 <sqrt+0x70>)
   c2440:	eeb0 8a40 	vmov.f32	s16, s0
   c2444:	eef0 8a60 	vmov.f32	s17, s1
   c2448:	f993 3000 	ldrsb.w	r3, [r3]
   c244c:	3301      	adds	r3, #1
   c244e:	d00d      	beq.n	c246c <sqrt+0x3c>
   c2450:	4622      	mov	r2, r4
   c2452:	462b      	mov	r3, r5
   c2454:	4620      	mov	r0, r4
   c2456:	4629      	mov	r1, r5
   c2458:	f001 ff6c 	bl	c4334 <__aeabi_dcmpun>
   c245c:	b930      	cbnz	r0, c246c <sqrt+0x3c>
   c245e:	2200      	movs	r2, #0
   c2460:	2300      	movs	r3, #0
   c2462:	4620      	mov	r0, r4
   c2464:	4629      	mov	r1, r5
   c2466:	f001 ff3d 	bl	c42e4 <__aeabi_dcmplt>
   c246a:	b930      	cbnz	r0, c247a <sqrt+0x4a>
   c246c:	eeb0 0a48 	vmov.f32	s0, s16
   c2470:	eef0 0a68 	vmov.f32	s1, s17
   c2474:	ecbd 8b02 	vpop	{d8}
   c2478:	bd38      	pop	{r3, r4, r5, pc}
   c247a:	f7fb ff45 	bl	be308 <__errno>
   c247e:	2200      	movs	r2, #0
   c2480:	2300      	movs	r3, #0
   c2482:	2121      	movs	r1, #33	; 0x21
   c2484:	6001      	str	r1, [r0, #0]
   c2486:	4610      	mov	r0, r2
   c2488:	4619      	mov	r1, r3
   c248a:	f001 fde3 	bl	c4054 <__aeabi_ddiv>
   c248e:	ec41 0b18 	vmov	d8, r0, r1
   c2492:	eeb0 0a48 	vmov.f32	s0, s16
   c2496:	eef0 0a68 	vmov.f32	s1, s17
   c249a:	ecbd 8b02 	vpop	{d8}
   c249e:	bd38      	pop	{r3, r4, r5, pc}
   c24a0:	2003db44 	.word	0x2003db44

000c24a4 <atan2f>:
   c24a4:	f000 b9ca 	b.w	c283c <__ieee754_atan2f>

000c24a8 <sqrtf>:
   c24a8:	b508      	push	{r3, lr}
   c24aa:	ed2d 8b02 	vpush	{d8}
   c24ae:	eeb0 8a40 	vmov.f32	s16, s0
   c24b2:	f000 fb9d 	bl	c2bf0 <__ieee754_sqrtf>
   c24b6:	4b0e      	ldr	r3, [pc, #56]	; (c24f0 <sqrtf+0x48>)
   c24b8:	f993 3000 	ldrsb.w	r3, [r3]
   c24bc:	3301      	adds	r3, #1
   c24be:	d00b      	beq.n	c24d8 <sqrtf+0x30>
   c24c0:	eeb4 8a48 	vcmp.f32	s16, s16
   c24c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24c8:	d606      	bvs.n	c24d8 <sqrtf+0x30>
   c24ca:	eddf 8a0a 	vldr	s17, [pc, #40]	; c24f4 <sqrtf+0x4c>
   c24ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c24d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24d6:	d402      	bmi.n	c24de <sqrtf+0x36>
   c24d8:	ecbd 8b02 	vpop	{d8}
   c24dc:	bd08      	pop	{r3, pc}
   c24de:	f7fb ff13 	bl	be308 <__errno>
   c24e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c24e6:	ecbd 8b02 	vpop	{d8}
   c24ea:	2321      	movs	r3, #33	; 0x21
   c24ec:	6003      	str	r3, [r0, #0]
   c24ee:	bd08      	pop	{r3, pc}
   c24f0:	2003db44 	.word	0x2003db44
   c24f4:	00000000 	.word	0x00000000

000c24f8 <__ieee754_atan2>:
   c24f8:	ec51 0b11 	vmov	r0, r1, d1
   c24fc:	4243      	negs	r3, r0
   c24fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2502:	4303      	orrs	r3, r0
   c2504:	4e64      	ldr	r6, [pc, #400]	; (c2698 <__ieee754_atan2+0x1a0>)
   c2506:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c250a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c250e:	42b3      	cmp	r3, r6
   c2510:	ec55 4b10 	vmov	r4, r5, d0
   c2514:	d83e      	bhi.n	c2594 <__ieee754_atan2+0x9c>
   c2516:	4263      	negs	r3, r4
   c2518:	4323      	orrs	r3, r4
   c251a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c251e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c2522:	42b3      	cmp	r3, r6
   c2524:	46a9      	mov	r9, r5
   c2526:	d835      	bhi.n	c2594 <__ieee754_atan2+0x9c>
   c2528:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c252c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2530:	4303      	orrs	r3, r0
   c2532:	d03e      	beq.n	c25b2 <__ieee754_atan2+0xba>
   c2534:	178f      	asrs	r7, r1, #30
   c2536:	f007 0702 	and.w	r7, r7, #2
   c253a:	ea5a 0304 	orrs.w	r3, sl, r4
   c253e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c2542:	d02f      	beq.n	c25a4 <__ieee754_atan2+0xac>
   c2544:	ea5e 0300 	orrs.w	r3, lr, r0
   c2548:	d037      	beq.n	c25ba <__ieee754_atan2+0xc2>
   c254a:	45b6      	cmp	lr, r6
   c254c:	d044      	beq.n	c25d8 <__ieee754_atan2+0xe0>
   c254e:	45b2      	cmp	sl, r6
   c2550:	d033      	beq.n	c25ba <__ieee754_atan2+0xc2>
   c2552:	ebaa 0e0e 	sub.w	lr, sl, lr
   c2556:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c255a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c255e:	da38      	bge.n	c25d2 <__ieee754_atan2+0xda>
   c2560:	2900      	cmp	r1, #0
   c2562:	da45      	bge.n	c25f0 <__ieee754_atan2+0xf8>
   c2564:	333c      	adds	r3, #60	; 0x3c
   c2566:	da43      	bge.n	c25f0 <__ieee754_atan2+0xf8>
   c2568:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2660 <__ieee754_atan2+0x168>
   c256c:	2f01      	cmp	r7, #1
   c256e:	d05d      	beq.n	c262c <__ieee754_atan2+0x134>
   c2570:	2f02      	cmp	r7, #2
   c2572:	d04a      	beq.n	c260a <__ieee754_atan2+0x112>
   c2574:	b1a7      	cbz	r7, c25a0 <__ieee754_atan2+0xa8>
   c2576:	ec51 0b10 	vmov	r0, r1, d0
   c257a:	a33b      	add	r3, pc, #236	; (adr r3, c2668 <__ieee754_atan2+0x170>)
   c257c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2580:	f001 fa86 	bl	c3a90 <__aeabi_dsub>
   c2584:	a33a      	add	r3, pc, #232	; (adr r3, c2670 <__ieee754_atan2+0x178>)
   c2586:	e9d3 2300 	ldrd	r2, r3, [r3]
   c258a:	f001 fa81 	bl	c3a90 <__aeabi_dsub>
   c258e:	ec41 0b10 	vmov	d0, r0, r1
   c2592:	e005      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c2594:	4622      	mov	r2, r4
   c2596:	462b      	mov	r3, r5
   c2598:	f001 fa7c 	bl	c3a94 <__adddf3>
   c259c:	ec41 0b10 	vmov	d0, r0, r1
   c25a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c25a4:	2f02      	cmp	r7, #2
   c25a6:	d00e      	beq.n	c25c6 <__ieee754_atan2+0xce>
   c25a8:	2f03      	cmp	r7, #3
   c25aa:	d1f9      	bne.n	c25a0 <__ieee754_atan2+0xa8>
   c25ac:	ed9f 0b32 	vldr	d0, [pc, #200]	; c2678 <__ieee754_atan2+0x180>
   c25b0:	e7f6      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c25b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c25b6:	f000 bf23 	b.w	c3400 <atan>
   c25ba:	f1b9 0f00 	cmp.w	r9, #0
   c25be:	db05      	blt.n	c25cc <__ieee754_atan2+0xd4>
   c25c0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c2680 <__ieee754_atan2+0x188>
   c25c4:	e7ec      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c25c6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2670 <__ieee754_atan2+0x178>
   c25ca:	e7e9      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c25cc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c2688 <__ieee754_atan2+0x190>
   c25d0:	e7e6      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c25d2:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c2680 <__ieee754_atan2+0x188>
   c25d6:	e7c9      	b.n	c256c <__ieee754_atan2+0x74>
   c25d8:	45f2      	cmp	sl, lr
   c25da:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c25de:	d02e      	beq.n	c263e <__ieee754_atan2+0x146>
   c25e0:	2f02      	cmp	r7, #2
   c25e2:	d834      	bhi.n	c264e <__ieee754_atan2+0x156>
   c25e4:	4b2d      	ldr	r3, [pc, #180]	; (c269c <__ieee754_atan2+0x1a4>)
   c25e6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c25ea:	ed97 0b00 	vldr	d0, [r7]
   c25ee:	e7d7      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c25f0:	4602      	mov	r2, r0
   c25f2:	460b      	mov	r3, r1
   c25f4:	4620      	mov	r0, r4
   c25f6:	4629      	mov	r1, r5
   c25f8:	f001 fd2c 	bl	c4054 <__aeabi_ddiv>
   c25fc:	ec41 0b10 	vmov	d0, r0, r1
   c2600:	f001 f89e 	bl	c3740 <fabs>
   c2604:	f000 fefc 	bl	c3400 <atan>
   c2608:	e7b0      	b.n	c256c <__ieee754_atan2+0x74>
   c260a:	a317      	add	r3, pc, #92	; (adr r3, c2668 <__ieee754_atan2+0x170>)
   c260c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2610:	ec51 0b10 	vmov	r0, r1, d0
   c2614:	f001 fa3c 	bl	c3a90 <__aeabi_dsub>
   c2618:	4602      	mov	r2, r0
   c261a:	460b      	mov	r3, r1
   c261c:	a114      	add	r1, pc, #80	; (adr r1, c2670 <__ieee754_atan2+0x178>)
   c261e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2622:	f001 fa35 	bl	c3a90 <__aeabi_dsub>
   c2626:	ec41 0b10 	vmov	d0, r0, r1
   c262a:	e7b9      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c262c:	ee10 1a90 	vmov	r1, s1
   c2630:	ec53 2b10 	vmov	r2, r3, d0
   c2634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2638:	ec43 2b10 	vmov	d0, r2, r3
   c263c:	e7b0      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c263e:	2f02      	cmp	r7, #2
   c2640:	d808      	bhi.n	c2654 <__ieee754_atan2+0x15c>
   c2642:	4b17      	ldr	r3, [pc, #92]	; (c26a0 <__ieee754_atan2+0x1a8>)
   c2644:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2648:	ed97 0b00 	vldr	d0, [r7]
   c264c:	e7a8      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c264e:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2660 <__ieee754_atan2+0x168>
   c2652:	e7a5      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c2654:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c2690 <__ieee754_atan2+0x198>
   c2658:	e7a2      	b.n	c25a0 <__ieee754_atan2+0xa8>
   c265a:	bf00      	nop
   c265c:	f3af 8000 	nop.w
	...
   c2668:	33145c07 	.word	0x33145c07
   c266c:	3ca1a626 	.word	0x3ca1a626
   c2670:	54442d18 	.word	0x54442d18
   c2674:	400921fb 	.word	0x400921fb
   c2678:	54442d18 	.word	0x54442d18
   c267c:	c00921fb 	.word	0xc00921fb
   c2680:	54442d18 	.word	0x54442d18
   c2684:	3ff921fb 	.word	0x3ff921fb
   c2688:	54442d18 	.word	0x54442d18
   c268c:	bff921fb 	.word	0xbff921fb
   c2690:	54442d18 	.word	0x54442d18
   c2694:	3fe921fb 	.word	0x3fe921fb
   c2698:	7ff00000 	.word	0x7ff00000
   c269c:	000c8178 	.word	0x000c8178
   c26a0:	000c8160 	.word	0x000c8160

000c26a4 <__ieee754_sqrt>:
   c26a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c26a8:	4a63      	ldr	r2, [pc, #396]	; (c2838 <__ieee754_sqrt+0x194>)
   c26aa:	ec55 4b10 	vmov	r4, r5, d0
   c26ae:	43aa      	bics	r2, r5
   c26b0:	f000 809f 	beq.w	c27f2 <__ieee754_sqrt+0x14e>
   c26b4:	2d00      	cmp	r5, #0
   c26b6:	ee10 ca10 	vmov	ip, s0
   c26ba:	462b      	mov	r3, r5
   c26bc:	dd54      	ble.n	c2768 <__ieee754_sqrt+0xc4>
   c26be:	1529      	asrs	r1, r5, #20
   c26c0:	d063      	beq.n	c278a <__ieee754_sqrt+0xe6>
   c26c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c26c6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c26ca:	07c9      	lsls	r1, r1, #31
   c26cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c26d0:	d404      	bmi.n	c26dc <__ieee754_sqrt+0x38>
   c26d2:	005b      	lsls	r3, r3, #1
   c26d4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c26d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c26dc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c26e0:	2600      	movs	r6, #0
   c26e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c26e6:	107f      	asrs	r7, r7, #1
   c26e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c26ec:	f04f 0e16 	mov.w	lr, #22
   c26f0:	4634      	mov	r4, r6
   c26f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c26f6:	18a1      	adds	r1, r4, r2
   c26f8:	4299      	cmp	r1, r3
   c26fa:	dc02      	bgt.n	c2702 <__ieee754_sqrt+0x5e>
   c26fc:	1a5b      	subs	r3, r3, r1
   c26fe:	188c      	adds	r4, r1, r2
   c2700:	4416      	add	r6, r2
   c2702:	005b      	lsls	r3, r3, #1
   c2704:	f1be 0e01 	subs.w	lr, lr, #1
   c2708:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c270c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2710:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2714:	d1ef      	bne.n	c26f6 <__ieee754_sqrt+0x52>
   c2716:	4675      	mov	r5, lr
   c2718:	2020      	movs	r0, #32
   c271a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c271e:	e00a      	b.n	c2736 <__ieee754_sqrt+0x92>
   c2720:	d044      	beq.n	c27ac <__ieee754_sqrt+0x108>
   c2722:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c2726:	3801      	subs	r0, #1
   c2728:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c272c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2730:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2734:	d043      	beq.n	c27be <__ieee754_sqrt+0x11a>
   c2736:	42a3      	cmp	r3, r4
   c2738:	eb02 010e 	add.w	r1, r2, lr
   c273c:	ddf0      	ble.n	c2720 <__ieee754_sqrt+0x7c>
   c273e:	2900      	cmp	r1, #0
   c2740:	eb01 0e02 	add.w	lr, r1, r2
   c2744:	db0a      	blt.n	c275c <__ieee754_sqrt+0xb8>
   c2746:	46a0      	mov	r8, r4
   c2748:	1b1b      	subs	r3, r3, r4
   c274a:	4561      	cmp	r1, ip
   c274c:	bf88      	it	hi
   c274e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c2752:	ebac 0c01 	sub.w	ip, ip, r1
   c2756:	4415      	add	r5, r2
   c2758:	4644      	mov	r4, r8
   c275a:	e7e2      	b.n	c2722 <__ieee754_sqrt+0x7e>
   c275c:	f1be 0f00 	cmp.w	lr, #0
   c2760:	dbf1      	blt.n	c2746 <__ieee754_sqrt+0xa2>
   c2762:	f104 0801 	add.w	r8, r4, #1
   c2766:	e7ef      	b.n	c2748 <__ieee754_sqrt+0xa4>
   c2768:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c276c:	4322      	orrs	r2, r4
   c276e:	d038      	beq.n	c27e2 <__ieee754_sqrt+0x13e>
   c2770:	2d00      	cmp	r5, #0
   c2772:	d14e      	bne.n	c2812 <__ieee754_sqrt+0x16e>
   c2774:	4629      	mov	r1, r5
   c2776:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c277a:	3915      	subs	r1, #21
   c277c:	4613      	mov	r3, r2
   c277e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c2782:	2a00      	cmp	r2, #0
   c2784:	d0f7      	beq.n	c2776 <__ieee754_sqrt+0xd2>
   c2786:	02d6      	lsls	r6, r2, #11
   c2788:	d450      	bmi.n	c282c <__ieee754_sqrt+0x188>
   c278a:	2000      	movs	r0, #0
   c278c:	005b      	lsls	r3, r3, #1
   c278e:	02dd      	lsls	r5, r3, #11
   c2790:	4604      	mov	r4, r0
   c2792:	f100 0001 	add.w	r0, r0, #1
   c2796:	d5f9      	bpl.n	c278c <__ieee754_sqrt+0xe8>
   c2798:	461a      	mov	r2, r3
   c279a:	4663      	mov	r3, ip
   c279c:	fa0c fc00 	lsl.w	ip, ip, r0
   c27a0:	f1c0 0020 	rsb	r0, r0, #32
   c27a4:	40c3      	lsrs	r3, r0
   c27a6:	1b09      	subs	r1, r1, r4
   c27a8:	4313      	orrs	r3, r2
   c27aa:	e78a      	b.n	c26c2 <__ieee754_sqrt+0x1e>
   c27ac:	4561      	cmp	r1, ip
   c27ae:	d8b8      	bhi.n	c2722 <__ieee754_sqrt+0x7e>
   c27b0:	2900      	cmp	r1, #0
   c27b2:	eb01 0e02 	add.w	lr, r1, r2
   c27b6:	dbd1      	blt.n	c275c <__ieee754_sqrt+0xb8>
   c27b8:	4698      	mov	r8, r3
   c27ba:	2300      	movs	r3, #0
   c27bc:	e7c9      	b.n	c2752 <__ieee754_sqrt+0xae>
   c27be:	ea53 030c 	orrs.w	r3, r3, ip
   c27c2:	d110      	bne.n	c27e6 <__ieee754_sqrt+0x142>
   c27c4:	0868      	lsrs	r0, r5, #1
   c27c6:	1071      	asrs	r1, r6, #1
   c27c8:	07f3      	lsls	r3, r6, #31
   c27ca:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c27ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c27d2:	bf48      	it	mi
   c27d4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c27d8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c27dc:	4602      	mov	r2, r0
   c27de:	ec43 2b10 	vmov	d0, r2, r3
   c27e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c27e6:	1c6a      	adds	r2, r5, #1
   c27e8:	bf16      	itet	ne
   c27ea:	1c68      	addne	r0, r5, #1
   c27ec:	3601      	addeq	r6, #1
   c27ee:	0840      	lsrne	r0, r0, #1
   c27f0:	e7e9      	b.n	c27c6 <__ieee754_sqrt+0x122>
   c27f2:	ee10 2a10 	vmov	r2, s0
   c27f6:	ee10 0a10 	vmov	r0, s0
   c27fa:	462b      	mov	r3, r5
   c27fc:	4629      	mov	r1, r5
   c27fe:	f001 faff 	bl	c3e00 <__aeabi_dmul>
   c2802:	4622      	mov	r2, r4
   c2804:	462b      	mov	r3, r5
   c2806:	f001 f945 	bl	c3a94 <__adddf3>
   c280a:	ec41 0b10 	vmov	d0, r0, r1
   c280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2812:	ee10 2a10 	vmov	r2, s0
   c2816:	4620      	mov	r0, r4
   c2818:	4629      	mov	r1, r5
   c281a:	f001 f939 	bl	c3a90 <__aeabi_dsub>
   c281e:	4602      	mov	r2, r0
   c2820:	460b      	mov	r3, r1
   c2822:	f001 fc17 	bl	c4054 <__aeabi_ddiv>
   c2826:	ec41 0b10 	vmov	d0, r0, r1
   c282a:	e7da      	b.n	c27e2 <__ieee754_sqrt+0x13e>
   c282c:	4663      	mov	r3, ip
   c282e:	2020      	movs	r0, #32
   c2830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c2834:	e7b6      	b.n	c27a4 <__ieee754_sqrt+0x100>
   c2836:	bf00      	nop
   c2838:	7ff00000 	.word	0x7ff00000

000c283c <__ieee754_atan2f>:
   c283c:	b510      	push	{r4, lr}
   c283e:	b082      	sub	sp, #8
   c2840:	edcd 0a01 	vstr	s1, [sp, #4]
   c2844:	9b01      	ldr	r3, [sp, #4]
   c2846:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c284a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c284e:	eef0 7a40 	vmov.f32	s15, s0
   c2852:	dc30      	bgt.n	c28b6 <__ieee754_atan2f+0x7a>
   c2854:	ee10 0a10 	vmov	r0, s0
   c2858:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c285c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2860:	dc29      	bgt.n	c28b6 <__ieee754_atan2f+0x7a>
   c2862:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c2866:	d042      	beq.n	c28ee <__ieee754_atan2f+0xb2>
   c2868:	179c      	asrs	r4, r3, #30
   c286a:	f004 0402 	and.w	r4, r4, #2
   c286e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c2872:	b331      	cbz	r1, c28c2 <__ieee754_atan2f+0x86>
   c2874:	b37a      	cbz	r2, c28d6 <__ieee754_atan2f+0x9a>
   c2876:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c287a:	d040      	beq.n	c28fe <__ieee754_atan2f+0xc2>
   c287c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2880:	d029      	beq.n	c28d6 <__ieee754_atan2f+0x9a>
   c2882:	1a8a      	subs	r2, r1, r2
   c2884:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c2888:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c288c:	da34      	bge.n	c28f8 <__ieee754_atan2f+0xbc>
   c288e:	2b00      	cmp	r3, #0
   c2890:	da42      	bge.n	c2918 <__ieee754_atan2f+0xdc>
   c2892:	313c      	adds	r1, #60	; 0x3c
   c2894:	da40      	bge.n	c2918 <__ieee754_atan2f+0xdc>
   c2896:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2968 <__ieee754_atan2f+0x12c>
   c289a:	2c01      	cmp	r4, #1
   c289c:	d04e      	beq.n	c293c <__ieee754_atan2f+0x100>
   c289e:	2c02      	cmp	r4, #2
   c28a0:	d043      	beq.n	c292a <__ieee754_atan2f+0xee>
   c28a2:	b164      	cbz	r4, c28be <__ieee754_atan2f+0x82>
   c28a4:	ed9f 7a31 	vldr	s14, [pc, #196]	; c296c <__ieee754_atan2f+0x130>
   c28a8:	eddf 7a31 	vldr	s15, [pc, #196]	; c2970 <__ieee754_atan2f+0x134>
   c28ac:	ee30 0a07 	vadd.f32	s0, s0, s14
   c28b0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c28b4:	e003      	b.n	c28be <__ieee754_atan2f+0x82>
   c28b6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c28ba:	ee37 0a27 	vadd.f32	s0, s14, s15
   c28be:	b002      	add	sp, #8
   c28c0:	bd10      	pop	{r4, pc}
   c28c2:	2c02      	cmp	r4, #2
   c28c4:	d010      	beq.n	c28e8 <__ieee754_atan2f+0xac>
   c28c6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2974 <__ieee754_atan2f+0x138>
   c28ca:	2c03      	cmp	r4, #3
   c28cc:	bf18      	it	ne
   c28ce:	eeb0 0a67 	vmovne.f32	s0, s15
   c28d2:	b002      	add	sp, #8
   c28d4:	bd10      	pop	{r4, pc}
   c28d6:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2978 <__ieee754_atan2f+0x13c>
   c28da:	eddf 7a28 	vldr	s15, [pc, #160]	; c297c <__ieee754_atan2f+0x140>
   c28de:	2800      	cmp	r0, #0
   c28e0:	bfb8      	it	lt
   c28e2:	eeb0 0a67 	vmovlt.f32	s0, s15
   c28e6:	e7ea      	b.n	c28be <__ieee754_atan2f+0x82>
   c28e8:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2970 <__ieee754_atan2f+0x134>
   c28ec:	e7e7      	b.n	c28be <__ieee754_atan2f+0x82>
   c28ee:	b002      	add	sp, #8
   c28f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c28f4:	f000 bf2e 	b.w	c3754 <atanf>
   c28f8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2978 <__ieee754_atan2f+0x13c>
   c28fc:	e7cd      	b.n	c289a <__ieee754_atan2f+0x5e>
   c28fe:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2902:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   c2906:	d020      	beq.n	c294a <__ieee754_atan2f+0x10e>
   c2908:	2c02      	cmp	r4, #2
   c290a:	d826      	bhi.n	c295a <__ieee754_atan2f+0x11e>
   c290c:	4b1c      	ldr	r3, [pc, #112]	; (c2980 <__ieee754_atan2f+0x144>)
   c290e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2912:	ed94 0a00 	vldr	s0, [r4]
   c2916:	e7d2      	b.n	c28be <__ieee754_atan2f+0x82>
   c2918:	ed9d 7a01 	vldr	s14, [sp, #4]
   c291c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2920:	f000 fff2 	bl	c3908 <fabsf>
   c2924:	f000 ff16 	bl	c3754 <atanf>
   c2928:	e7b7      	b.n	c289a <__ieee754_atan2f+0x5e>
   c292a:	ed9f 7a10 	vldr	s14, [pc, #64]	; c296c <__ieee754_atan2f+0x130>
   c292e:	eddf 7a10 	vldr	s15, [pc, #64]	; c2970 <__ieee754_atan2f+0x134>
   c2932:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2936:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c293a:	e7c0      	b.n	c28be <__ieee754_atan2f+0x82>
   c293c:	ee10 3a10 	vmov	r3, s0
   c2940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c2944:	ee00 3a10 	vmov	s0, r3
   c2948:	e7b9      	b.n	c28be <__ieee754_atan2f+0x82>
   c294a:	2c02      	cmp	r4, #2
   c294c:	d808      	bhi.n	c2960 <__ieee754_atan2f+0x124>
   c294e:	4b0d      	ldr	r3, [pc, #52]	; (c2984 <__ieee754_atan2f+0x148>)
   c2950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2954:	ed94 0a00 	vldr	s0, [r4]
   c2958:	e7b1      	b.n	c28be <__ieee754_atan2f+0x82>
   c295a:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2968 <__ieee754_atan2f+0x12c>
   c295e:	e7ae      	b.n	c28be <__ieee754_atan2f+0x82>
   c2960:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2988 <__ieee754_atan2f+0x14c>
   c2964:	e7ab      	b.n	c28be <__ieee754_atan2f+0x82>
   c2966:	bf00      	nop
   c2968:	00000000 	.word	0x00000000
   c296c:	33bbbd2e 	.word	0x33bbbd2e
   c2970:	40490fdb 	.word	0x40490fdb
   c2974:	c0490fdb 	.word	0xc0490fdb
   c2978:	3fc90fdb 	.word	0x3fc90fdb
   c297c:	bfc90fdb 	.word	0xbfc90fdb
   c2980:	000c819c 	.word	0x000c819c
   c2984:	000c8190 	.word	0x000c8190
   c2988:	3f490fdb 	.word	0x3f490fdb

000c298c <__ieee754_rem_pio2f>:
   c298c:	b570      	push	{r4, r5, r6, lr}
   c298e:	ee10 3a10 	vmov	r3, s0
   c2992:	4a89      	ldr	r2, [pc, #548]	; (c2bb8 <__ieee754_rem_pio2f+0x22c>)
   c2994:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c2998:	4294      	cmp	r4, r2
   c299a:	b086      	sub	sp, #24
   c299c:	4605      	mov	r5, r0
   c299e:	dd70      	ble.n	c2a82 <__ieee754_rem_pio2f+0xf6>
   c29a0:	4a86      	ldr	r2, [pc, #536]	; (c2bbc <__ieee754_rem_pio2f+0x230>)
   c29a2:	4294      	cmp	r4, r2
   c29a4:	ee10 6a10 	vmov	r6, s0
   c29a8:	dc22      	bgt.n	c29f0 <__ieee754_rem_pio2f+0x64>
   c29aa:	2b00      	cmp	r3, #0
   c29ac:	eddf 7a84 	vldr	s15, [pc, #528]	; c2bc0 <__ieee754_rem_pio2f+0x234>
   c29b0:	4a84      	ldr	r2, [pc, #528]	; (c2bc4 <__ieee754_rem_pio2f+0x238>)
   c29b2:	f024 040f 	bic.w	r4, r4, #15
   c29b6:	eeb0 7a40 	vmov.f32	s14, s0
   c29ba:	f340 80e4 	ble.w	c2b86 <__ieee754_rem_pio2f+0x1fa>
   c29be:	4294      	cmp	r4, r2
   c29c0:	ee70 7a67 	vsub.f32	s15, s0, s15
   c29c4:	bf09      	itett	eq
   c29c6:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2bc8 <__ieee754_rem_pio2f+0x23c>
   c29ca:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2bcc <__ieee754_rem_pio2f+0x240>
   c29ce:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2bd0 <__ieee754_rem_pio2f+0x244>
   c29d2:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c29d6:	2001      	movs	r0, #1
   c29d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c29dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c29e0:	edc5 6a00 	vstr	s13, [r5]
   c29e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c29e8:	edc5 7a01 	vstr	s15, [r5, #4]
   c29ec:	b006      	add	sp, #24
   c29ee:	bd70      	pop	{r4, r5, r6, pc}
   c29f0:	4a78      	ldr	r2, [pc, #480]	; (c2bd4 <__ieee754_rem_pio2f+0x248>)
   c29f2:	4294      	cmp	r4, r2
   c29f4:	dd54      	ble.n	c2aa0 <__ieee754_rem_pio2f+0x114>
   c29f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c29fa:	da49      	bge.n	c2a90 <__ieee754_rem_pio2f+0x104>
   c29fc:	15e2      	asrs	r2, r4, #23
   c29fe:	3a86      	subs	r2, #134	; 0x86
   c2a00:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2a04:	ee07 3a90 	vmov	s15, r3
   c2a08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2a0c:	eddf 6a72 	vldr	s13, [pc, #456]	; c2bd8 <__ieee754_rem_pio2f+0x24c>
   c2a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a18:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2a1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2a20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2a24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a2c:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2a34:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2a3c:	edcd 7a05 	vstr	s15, [sp, #20]
   c2a40:	f040 8090 	bne.w	c2b64 <__ieee754_rem_pio2f+0x1d8>
   c2a44:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2a4c:	bf14      	ite	ne
   c2a4e:	2302      	movne	r3, #2
   c2a50:	2301      	moveq	r3, #1
   c2a52:	4962      	ldr	r1, [pc, #392]	; (c2bdc <__ieee754_rem_pio2f+0x250>)
   c2a54:	9101      	str	r1, [sp, #4]
   c2a56:	2102      	movs	r1, #2
   c2a58:	9100      	str	r1, [sp, #0]
   c2a5a:	a803      	add	r0, sp, #12
   c2a5c:	4629      	mov	r1, r5
   c2a5e:	f000 f94d 	bl	c2cfc <__kernel_rem_pio2f>
   c2a62:	2e00      	cmp	r6, #0
   c2a64:	dac2      	bge.n	c29ec <__ieee754_rem_pio2f+0x60>
   c2a66:	ed95 7a00 	vldr	s14, [r5]
   c2a6a:	edd5 7a01 	vldr	s15, [r5, #4]
   c2a6e:	eeb1 7a47 	vneg.f32	s14, s14
   c2a72:	eef1 7a67 	vneg.f32	s15, s15
   c2a76:	ed85 7a00 	vstr	s14, [r5]
   c2a7a:	edc5 7a01 	vstr	s15, [r5, #4]
   c2a7e:	4240      	negs	r0, r0
   c2a80:	e7b4      	b.n	c29ec <__ieee754_rem_pio2f+0x60>
   c2a82:	2200      	movs	r2, #0
   c2a84:	ed85 0a00 	vstr	s0, [r5]
   c2a88:	6042      	str	r2, [r0, #4]
   c2a8a:	2000      	movs	r0, #0
   c2a8c:	b006      	add	sp, #24
   c2a8e:	bd70      	pop	{r4, r5, r6, pc}
   c2a90:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2a94:	2000      	movs	r0, #0
   c2a96:	edc5 7a01 	vstr	s15, [r5, #4]
   c2a9a:	edc5 7a00 	vstr	s15, [r5]
   c2a9e:	e7a5      	b.n	c29ec <__ieee754_rem_pio2f+0x60>
   c2aa0:	f000 ff32 	bl	c3908 <fabsf>
   c2aa4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2be0 <__ieee754_rem_pio2f+0x254>
   c2aa8:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2bc0 <__ieee754_rem_pio2f+0x234>
   c2aac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2ab0:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2ab4:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2bcc <__ieee754_rem_pio2f+0x240>
   c2ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2abc:	ee17 0a90 	vmov	r0, s15
   c2ac0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2ac4:	281f      	cmp	r0, #31
   c2ac6:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2aca:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2ace:	eeb1 6a66 	vneg.f32	s12, s13
   c2ad2:	dc1e      	bgt.n	c2b12 <__ieee754_rem_pio2f+0x186>
   c2ad4:	4a43      	ldr	r2, [pc, #268]	; (c2be4 <__ieee754_rem_pio2f+0x258>)
   c2ad6:	1e41      	subs	r1, r0, #1
   c2ad8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2adc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2ae0:	4293      	cmp	r3, r2
   c2ae2:	d016      	beq.n	c2b12 <__ieee754_rem_pio2f+0x186>
   c2ae4:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2ae8:	ed85 7a00 	vstr	s14, [r5]
   c2aec:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2af0:	2e00      	cmp	r6, #0
   c2af2:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2af6:	ed85 0a01 	vstr	s0, [r5, #4]
   c2afa:	f6bf af77 	bge.w	c29ec <__ieee754_rem_pio2f+0x60>
   c2afe:	eeb1 7a47 	vneg.f32	s14, s14
   c2b02:	eeb1 0a40 	vneg.f32	s0, s0
   c2b06:	ed85 7a00 	vstr	s14, [r5]
   c2b0a:	ed85 0a01 	vstr	s0, [r5, #4]
   c2b0e:	4240      	negs	r0, r0
   c2b10:	e76c      	b.n	c29ec <__ieee754_rem_pio2f+0x60>
   c2b12:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2b16:	15e2      	asrs	r2, r4, #23
   c2b18:	ee17 3a10 	vmov	r3, s14
   c2b1c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2b20:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2b24:	2c08      	cmp	r4, #8
   c2b26:	dddf      	ble.n	c2ae8 <__ieee754_rem_pio2f+0x15c>
   c2b28:	eddf 7a27 	vldr	s15, [pc, #156]	; c2bc8 <__ieee754_rem_pio2f+0x23c>
   c2b2c:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2bd0 <__ieee754_rem_pio2f+0x244>
   c2b30:	eef0 5a40 	vmov.f32	s11, s0
   c2b34:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2b38:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2b3c:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2b40:	eef0 7a40 	vmov.f32	s15, s0
   c2b44:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2b48:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2b4c:	ee17 3a10 	vmov	r3, s14
   c2b50:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2b54:	1ad2      	subs	r2, r2, r3
   c2b56:	2a19      	cmp	r2, #25
   c2b58:	dc06      	bgt.n	c2b68 <__ieee754_rem_pio2f+0x1dc>
   c2b5a:	eeb0 0a65 	vmov.f32	s0, s11
   c2b5e:	ed85 7a00 	vstr	s14, [r5]
   c2b62:	e7c3      	b.n	c2aec <__ieee754_rem_pio2f+0x160>
   c2b64:	2303      	movs	r3, #3
   c2b66:	e774      	b.n	c2a52 <__ieee754_rem_pio2f+0xc6>
   c2b68:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2be8 <__ieee754_rem_pio2f+0x25c>
   c2b6c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2bec <__ieee754_rem_pio2f+0x260>
   c2b70:	eeb0 0a65 	vmov.f32	s0, s11
   c2b74:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2b78:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2b7c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2b80:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2b84:	e7ae      	b.n	c2ae4 <__ieee754_rem_pio2f+0x158>
   c2b86:	4294      	cmp	r4, r2
   c2b88:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2b8c:	bf09      	itett	eq
   c2b8e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2bc8 <__ieee754_rem_pio2f+0x23c>
   c2b92:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2bcc <__ieee754_rem_pio2f+0x240>
   c2b96:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2bd0 <__ieee754_rem_pio2f+0x244>
   c2b9a:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c2ba2:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2ba6:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2baa:	edc5 6a00 	vstr	s13, [r5]
   c2bae:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2bb2:	edc5 7a01 	vstr	s15, [r5, #4]
   c2bb6:	e719      	b.n	c29ec <__ieee754_rem_pio2f+0x60>
   c2bb8:	3f490fd8 	.word	0x3f490fd8
   c2bbc:	4016cbe3 	.word	0x4016cbe3
   c2bc0:	3fc90f80 	.word	0x3fc90f80
   c2bc4:	3fc90fd0 	.word	0x3fc90fd0
   c2bc8:	37354400 	.word	0x37354400
   c2bcc:	37354443 	.word	0x37354443
   c2bd0:	2e85a308 	.word	0x2e85a308
   c2bd4:	43490f80 	.word	0x43490f80
   c2bd8:	43800000 	.word	0x43800000
   c2bdc:	000c8228 	.word	0x000c8228
   c2be0:	3f22f984 	.word	0x3f22f984
   c2be4:	000c81a8 	.word	0x000c81a8
   c2be8:	2e85a300 	.word	0x2e85a300
   c2bec:	248d3132 	.word	0x248d3132

000c2bf0 <__ieee754_sqrtf>:
   c2bf0:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2bf4:	4770      	bx	lr
   c2bf6:	bf00      	nop

000c2bf8 <__kernel_cosf>:
   c2bf8:	ee10 3a10 	vmov	r3, s0
   c2bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2c00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2c04:	da2c      	bge.n	c2c60 <__kernel_cosf+0x68>
   c2c06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2c0a:	ee17 3a90 	vmov	r3, s15
   c2c0e:	2b00      	cmp	r3, #0
   c2c10:	d060      	beq.n	c2cd4 <__kernel_cosf+0xdc>
   c2c12:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2c16:	eddf 7a31 	vldr	s15, [pc, #196]	; c2cdc <__kernel_cosf+0xe4>
   c2c1a:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2ce0 <__kernel_cosf+0xe8>
   c2c1e:	eddf 5a31 	vldr	s11, [pc, #196]	; c2ce4 <__kernel_cosf+0xec>
   c2c22:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2ce8 <__kernel_cosf+0xf0>
   c2c26:	eddf 6a31 	vldr	s13, [pc, #196]	; c2cec <__kernel_cosf+0xf4>
   c2c2a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2c2e:	eddf 7a30 	vldr	s15, [pc, #192]	; c2cf0 <__kernel_cosf+0xf8>
   c2c32:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2c36:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2c3a:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2c3e:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2c42:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2c46:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2c4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2c4e:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2c52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2c56:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2c5a:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2c5e:	4770      	bx	lr
   c2c60:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2c64:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2cdc <__kernel_cosf+0xe4>
   c2c68:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2ce0 <__kernel_cosf+0xe8>
   c2c6c:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2ce4 <__kernel_cosf+0xec>
   c2c70:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2ce8 <__kernel_cosf+0xf0>
   c2c74:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2cec <__kernel_cosf+0xf4>
   c2c78:	4a1e      	ldr	r2, [pc, #120]	; (c2cf4 <__kernel_cosf+0xfc>)
   c2c7a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2c7e:	4293      	cmp	r3, r2
   c2c80:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2cf0 <__kernel_cosf+0xf8>
   c2c84:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2c88:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2c8c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2c90:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2c94:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2c98:	ddd5      	ble.n	c2c46 <__kernel_cosf+0x4e>
   c2c9a:	4a17      	ldr	r2, [pc, #92]	; (c2cf8 <__kernel_cosf+0x100>)
   c2c9c:	4293      	cmp	r3, r2
   c2c9e:	dc14      	bgt.n	c2cca <__kernel_cosf+0xd2>
   c2ca0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2ca4:	ee07 3a90 	vmov	s15, r3
   c2ca8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2cac:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2cb0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2cb4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2cb8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2cbc:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2cc0:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2cc4:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2cc8:	4770      	bx	lr
   c2cca:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2cce:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2cd2:	e7ed      	b.n	c2cb0 <__kernel_cosf+0xb8>
   c2cd4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2cd8:	4770      	bx	lr
   c2cda:	bf00      	nop
   c2cdc:	ad47d74e 	.word	0xad47d74e
   c2ce0:	310f74f6 	.word	0x310f74f6
   c2ce4:	b493f27c 	.word	0xb493f27c
   c2ce8:	37d00d01 	.word	0x37d00d01
   c2cec:	3d2aaaab 	.word	0x3d2aaaab
   c2cf0:	bab60b61 	.word	0xbab60b61
   c2cf4:	3e999999 	.word	0x3e999999
   c2cf8:	3f480000 	.word	0x3f480000

000c2cfc <__kernel_rem_pio2f>:
   c2cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2d00:	ed2d 8b04 	vpush	{d8-d9}
   c2d04:	b0db      	sub	sp, #364	; 0x16c
   c2d06:	461c      	mov	r4, r3
   c2d08:	9303      	str	r3, [sp, #12]
   c2d0a:	9106      	str	r1, [sp, #24]
   c2d0c:	4ba3      	ldr	r3, [pc, #652]	; (c2f9c <__kernel_rem_pio2f+0x2a0>)
   c2d0e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2d10:	9208      	str	r2, [sp, #32]
   c2d12:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2d16:	1d11      	adds	r1, r2, #4
   c2d18:	4682      	mov	sl, r0
   c2d1a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   c2d1e:	f2c0 82a2 	blt.w	c3266 <__kernel_rem_pio2f+0x56a>
   c2d22:	1ed3      	subs	r3, r2, #3
   c2d24:	bf44      	itt	mi
   c2d26:	4613      	movmi	r3, r2
   c2d28:	3304      	addmi	r3, #4
   c2d2a:	10db      	asrs	r3, r3, #3
   c2d2c:	9302      	str	r3, [sp, #8]
   c2d2e:	3301      	adds	r3, #1
   c2d30:	00db      	lsls	r3, r3, #3
   c2d32:	9307      	str	r3, [sp, #28]
   c2d34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2d38:	1a9b      	subs	r3, r3, r2
   c2d3a:	9305      	str	r3, [sp, #20]
   c2d3c:	9b02      	ldr	r3, [sp, #8]
   c2d3e:	eb15 0108 	adds.w	r1, r5, r8
   c2d42:	eba3 0308 	sub.w	r3, r3, r8
   c2d46:	d416      	bmi.n	c2d76 <__kernel_rem_pio2f+0x7a>
   c2d48:	3101      	adds	r1, #1
   c2d4a:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2fa0 <__kernel_rem_pio2f+0x2a4>
   c2d4e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2d50:	4419      	add	r1, r3
   c2d52:	aa1e      	add	r2, sp, #120	; 0x78
   c2d54:	2b00      	cmp	r3, #0
   c2d56:	bfa4      	itt	ge
   c2d58:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2d5c:	ee07 4a90 	vmovge	s15, r4
   c2d60:	f103 0301 	add.w	r3, r3, #1
   c2d64:	bfac      	ite	ge
   c2d66:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2d6a:	eef0 7a47 	vmovlt.f32	s15, s14
   c2d6e:	428b      	cmp	r3, r1
   c2d70:	ece2 7a01 	vstmia	r2!, {s15}
   c2d74:	d1ee      	bne.n	c2d54 <__kernel_rem_pio2f+0x58>
   c2d76:	2d00      	cmp	r5, #0
   c2d78:	f2c0 82e5 	blt.w	c3346 <__kernel_rem_pio2f+0x64a>
   c2d7c:	9b03      	ldr	r3, [sp, #12]
   c2d7e:	a91e      	add	r1, sp, #120	; 0x78
   c2d80:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2d84:	ae46      	add	r6, sp, #280	; 0x118
   c2d86:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2d8a:	4640      	mov	r0, r8
   c2d8c:	18ef      	adds	r7, r5, r3
   c2d8e:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2d92:	f1b8 0f00 	cmp.w	r8, #0
   c2d96:	eddf 7a82 	vldr	s15, [pc, #520]	; c2fa0 <__kernel_rem_pio2f+0x2a4>
   c2d9a:	db09      	blt.n	c2db0 <__kernel_rem_pio2f+0xb4>
   c2d9c:	4622      	mov	r2, r4
   c2d9e:	4653      	mov	r3, sl
   c2da0:	ecf3 6a01 	vldmia	r3!, {s13}
   c2da4:	ed32 7a01 	vldmdb	r2!, {s14}
   c2da8:	428b      	cmp	r3, r1
   c2daa:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2dae:	d1f7      	bne.n	c2da0 <__kernel_rem_pio2f+0xa4>
   c2db0:	3001      	adds	r0, #1
   c2db2:	42b8      	cmp	r0, r7
   c2db4:	ece6 7a01 	vstmia	r6!, {s15}
   c2db8:	f104 0404 	add.w	r4, r4, #4
   c2dbc:	d1e9      	bne.n	c2d92 <__kernel_rem_pio2f+0x96>
   c2dbe:	ab09      	add	r3, sp, #36	; 0x24
   c2dc0:	af0a      	add	r7, sp, #40	; 0x28
   c2dc2:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2dc6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2dca:	3b08      	subs	r3, #8
   c2dcc:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2fa8 <__kernel_rem_pio2f+0x2ac>
   c2dd0:	eddf 8a74 	vldr	s17, [pc, #464]	; c2fa4 <__kernel_rem_pio2f+0x2a8>
   c2dd4:	9805      	ldr	r0, [sp, #20]
   c2dd6:	9304      	str	r3, [sp, #16]
   c2dd8:	eb0a 040c 	add.w	r4, sl, ip
   c2ddc:	ae46      	add	r6, sp, #280	; 0x118
   c2dde:	9500      	str	r5, [sp, #0]
   c2de0:	ab5a      	add	r3, sp, #360	; 0x168
   c2de2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2de6:	2d00      	cmp	r5, #0
   c2de8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2dec:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2df0:	dd16      	ble.n	c2e20 <__kernel_rem_pio2f+0x124>
   c2df2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2df6:	463a      	mov	r2, r7
   c2df8:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2dfc:	eeb0 7a40 	vmov.f32	s14, s0
   c2e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2e04:	ed73 6a01 	vldmdb	r3!, {s13}
   c2e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2e0c:	42b3      	cmp	r3, r6
   c2e0e:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2e12:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2e16:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2e1a:	eca2 7a01 	vstmia	r2!, {s14}
   c2e1e:	d1eb      	bne.n	c2df8 <__kernel_rem_pio2f+0xfc>
   c2e20:	9001      	str	r0, [sp, #4]
   c2e22:	f000 fdbf 	bl	c39a4 <scalbnf>
   c2e26:	eeb0 8a40 	vmov.f32	s16, s0
   c2e2a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2e2e:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2e32:	f000 fd71 	bl	c3918 <floorf>
   c2e36:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2e3a:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2e3e:	9801      	ldr	r0, [sp, #4]
   c2e40:	2800      	cmp	r0, #0
   c2e42:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2e46:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2e4a:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2e4e:	dd79      	ble.n	c2f44 <__kernel_rem_pio2f+0x248>
   c2e50:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   c2e54:	f1c0 0308 	rsb	r3, r0, #8
   c2e58:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2e5c:	fa41 fc03 	asr.w	ip, r1, r3
   c2e60:	fa0c f303 	lsl.w	r3, ip, r3
   c2e64:	1acb      	subs	r3, r1, r3
   c2e66:	f1c0 0207 	rsb	r2, r0, #7
   c2e6a:	ee19 1a90 	vmov	r1, s19
   c2e6e:	fa43 f202 	asr.w	r2, r3, r2
   c2e72:	4461      	add	r1, ip
   c2e74:	2a00      	cmp	r2, #0
   c2e76:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2e7a:	ee09 1a90 	vmov	s19, r1
   c2e7e:	dc69      	bgt.n	c2f54 <__kernel_rem_pio2f+0x258>
   c2e80:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2e88:	f040 80c1 	bne.w	c300e <__kernel_rem_pio2f+0x312>
   c2e8c:	9b00      	ldr	r3, [sp, #0]
   c2e8e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   c2e92:	455b      	cmp	r3, fp
   c2e94:	dc10      	bgt.n	c2eb8 <__kernel_rem_pio2f+0x1bc>
   c2e96:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2e9a:	3b01      	subs	r3, #1
   c2e9c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2ea0:	2100      	movs	r1, #0
   c2ea2:	4694      	mov	ip, r2
   c2ea4:	f853 2904 	ldr.w	r2, [r3], #-4
   c2ea8:	454b      	cmp	r3, r9
   c2eaa:	ea41 0102 	orr.w	r1, r1, r2
   c2eae:	d1f9      	bne.n	c2ea4 <__kernel_rem_pio2f+0x1a8>
   c2eb0:	4662      	mov	r2, ip
   c2eb2:	2900      	cmp	r1, #0
   c2eb4:	f040 80f3 	bne.w	c309e <__kernel_rem_pio2f+0x3a2>
   c2eb8:	9b00      	ldr	r3, [sp, #0]
   c2eba:	3b01      	subs	r3, #1
   c2ebc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2ec0:	2b00      	cmp	r3, #0
   c2ec2:	f040 80e8 	bne.w	c3096 <__kernel_rem_pio2f+0x39a>
   c2ec6:	9b04      	ldr	r3, [sp, #16]
   c2ec8:	f04f 0c01 	mov.w	ip, #1
   c2ecc:	f853 2904 	ldr.w	r2, [r3], #-4
   c2ed0:	f10c 0c01 	add.w	ip, ip, #1
   c2ed4:	2a00      	cmp	r2, #0
   c2ed6:	d0f9      	beq.n	c2ecc <__kernel_rem_pio2f+0x1d0>
   c2ed8:	1c6b      	adds	r3, r5, #1
   c2eda:	44ac      	add	ip, r5
   c2edc:	469e      	mov	lr, r3
   c2ede:	9a03      	ldr	r2, [sp, #12]
   c2ee0:	1951      	adds	r1, r2, r5
   c2ee2:	9a02      	ldr	r2, [sp, #8]
   c2ee4:	eb02 0b03 	add.w	fp, r2, r3
   c2ee8:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2eec:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2eee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c2ef2:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2ef6:	ab1e      	add	r3, sp, #120	; 0x78
   c2ef8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2efc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2f00:	eddb 7a01 	vldr	s15, [fp, #4]
   c2f04:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2fa0 <__kernel_rem_pio2f+0x2a4>
   c2f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f0c:	f1b8 0f00 	cmp.w	r8, #0
   c2f10:	f10b 0b04 	add.w	fp, fp, #4
   c2f14:	edc1 7a00 	vstr	s15, [r1]
   c2f18:	460a      	mov	r2, r1
   c2f1a:	f101 0104 	add.w	r1, r1, #4
   c2f1e:	db09      	blt.n	c2f34 <__kernel_rem_pio2f+0x238>
   c2f20:	4653      	mov	r3, sl
   c2f22:	e001      	b.n	c2f28 <__kernel_rem_pio2f+0x22c>
   c2f24:	ed72 7a01 	vldmdb	r2!, {s15}
   c2f28:	ecf3 6a01 	vldmia	r3!, {s13}
   c2f2c:	42a3      	cmp	r3, r4
   c2f2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2f32:	d1f7      	bne.n	c2f24 <__kernel_rem_pio2f+0x228>
   c2f34:	f10e 0e01 	add.w	lr, lr, #1
   c2f38:	45e6      	cmp	lr, ip
   c2f3a:	eca5 7a01 	vstmia	r5!, {s14}
   c2f3e:	dddf      	ble.n	c2f00 <__kernel_rem_pio2f+0x204>
   c2f40:	4665      	mov	r5, ip
   c2f42:	e74d      	b.n	c2de0 <__kernel_rem_pio2f+0xe4>
   c2f44:	f040 809d 	bne.w	c3082 <__kernel_rem_pio2f+0x386>
   c2f48:	1e6b      	subs	r3, r5, #1
   c2f4a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2f4e:	1212      	asrs	r2, r2, #8
   c2f50:	2a00      	cmp	r2, #0
   c2f52:	dd95      	ble.n	c2e80 <__kernel_rem_pio2f+0x184>
   c2f54:	ee19 3a90 	vmov	r3, s19
   c2f58:	2d00      	cmp	r5, #0
   c2f5a:	f103 0301 	add.w	r3, r3, #1
   c2f5e:	ee09 3a90 	vmov	s19, r3
   c2f62:	f340 8196 	ble.w	c3292 <__kernel_rem_pio2f+0x596>
   c2f66:	6839      	ldr	r1, [r7, #0]
   c2f68:	2900      	cmp	r1, #0
   c2f6a:	f040 8080 	bne.w	c306e <__kernel_rem_pio2f+0x372>
   c2f6e:	2d01      	cmp	r5, #1
   c2f70:	d026      	beq.n	c2fc0 <__kernel_rem_pio2f+0x2c4>
   c2f72:	463b      	mov	r3, r7
   c2f74:	f04f 0c01 	mov.w	ip, #1
   c2f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2f7c:	2900      	cmp	r1, #0
   c2f7e:	d07a      	beq.n	c3076 <__kernel_rem_pio2f+0x37a>
   c2f80:	f10c 0301 	add.w	r3, ip, #1
   c2f84:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c2f88:	429d      	cmp	r5, r3
   c2f8a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c2f8e:	dd16      	ble.n	c2fbe <__kernel_rem_pio2f+0x2c2>
   c2f90:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c2f94:	44bb      	add	fp, r7
   c2f96:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2f9a:	e00a      	b.n	c2fb2 <__kernel_rem_pio2f+0x2b6>
   c2f9c:	000c856c 	.word	0x000c856c
   c2fa0:	00000000 	.word	0x00000000
   c2fa4:	43800000 	.word	0x43800000
   c2fa8:	3b800000 	.word	0x3b800000
   c2fac:	3fc90000 	.word	0x3fc90000
   c2fb0:	6819      	ldr	r1, [r3, #0]
   c2fb2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c2fb6:	f843 1b04 	str.w	r1, [r3], #4
   c2fba:	455b      	cmp	r3, fp
   c2fbc:	d1f8      	bne.n	c2fb0 <__kernel_rem_pio2f+0x2b4>
   c2fbe:	2101      	movs	r1, #1
   c2fc0:	2800      	cmp	r0, #0
   c2fc2:	dd0c      	ble.n	c2fde <__kernel_rem_pio2f+0x2e2>
   c2fc4:	2801      	cmp	r0, #1
   c2fc6:	f000 8145 	beq.w	c3254 <__kernel_rem_pio2f+0x558>
   c2fca:	2802      	cmp	r0, #2
   c2fcc:	d107      	bne.n	c2fde <__kernel_rem_pio2f+0x2e2>
   c2fce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c2fd2:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2fda:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2fde:	2a02      	cmp	r2, #2
   c2fe0:	f47f af4e 	bne.w	c2e80 <__kernel_rem_pio2f+0x184>
   c2fe4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2fe8:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2fec:	2900      	cmp	r1, #0
   c2fee:	f43f af47 	beq.w	c2e80 <__kernel_rem_pio2f+0x184>
   c2ff2:	9209      	str	r2, [sp, #36]	; 0x24
   c2ff4:	9001      	str	r0, [sp, #4]
   c2ff6:	f000 fcd5 	bl	c39a4 <scalbnf>
   c2ffa:	ee38 8a40 	vsub.f32	s16, s16, s0
   c2ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c3000:	9801      	ldr	r0, [sp, #4]
   c3002:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c3006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c300a:	f43f af3f 	beq.w	c2e8c <__kernel_rem_pio2f+0x190>
   c300e:	9202      	str	r2, [sp, #8]
   c3010:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c3014:	eeb0 0a48 	vmov.f32	s0, s16
   c3018:	1a98      	subs	r0, r3, r2
   c301a:	9501      	str	r5, [sp, #4]
   c301c:	9d00      	ldr	r5, [sp, #0]
   c301e:	f000 fcc1 	bl	c39a4 <scalbnf>
   c3022:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c2fa4 <__kernel_rem_pio2f+0x2a8>
   c3026:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c302e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c3032:	f2c0 8156 	blt.w	c32e2 <__kernel_rem_pio2f+0x5e6>
   c3036:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2fa8 <__kernel_rem_pio2f+0x2ac>
   c303a:	9905      	ldr	r1, [sp, #20]
   c303c:	ee60 7a27 	vmul.f32	s15, s0, s15
   c3040:	3108      	adds	r1, #8
   c3042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3046:	9105      	str	r1, [sp, #20]
   c3048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c304c:	f103 0b01 	add.w	fp, r3, #1
   c3050:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c3054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3058:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c305c:	ee10 1a10 	vmov	r1, s0
   c3060:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3064:	ee17 3a90 	vmov	r3, s15
   c3068:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c306c:	e02e      	b.n	c30cc <__kernel_rem_pio2f+0x3d0>
   c306e:	2301      	movs	r3, #1
   c3070:	f04f 0c00 	mov.w	ip, #0
   c3074:	e786      	b.n	c2f84 <__kernel_rem_pio2f+0x288>
   c3076:	f10c 0c01 	add.w	ip, ip, #1
   c307a:	45ac      	cmp	ip, r5
   c307c:	f47f af7c 	bne.w	c2f78 <__kernel_rem_pio2f+0x27c>
   c3080:	e79e      	b.n	c2fc0 <__kernel_rem_pio2f+0x2c4>
   c3082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c3086:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c308e:	f280 80ef 	bge.w	c3270 <__kernel_rem_pio2f+0x574>
   c3092:	2200      	movs	r2, #0
   c3094:	e6f4      	b.n	c2e80 <__kernel_rem_pio2f+0x184>
   c3096:	1c6b      	adds	r3, r5, #1
   c3098:	469e      	mov	lr, r3
   c309a:	469c      	mov	ip, r3
   c309c:	e71f      	b.n	c2ede <__kernel_rem_pio2f+0x1e2>
   c309e:	9905      	ldr	r1, [sp, #20]
   c30a0:	f1a1 0008 	sub.w	r0, r1, #8
   c30a4:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c30a8:	9005      	str	r0, [sp, #20]
   c30aa:	462b      	mov	r3, r5
   c30ac:	9d00      	ldr	r5, [sp, #0]
   c30ae:	b969      	cbnz	r1, c30cc <__kernel_rem_pio2f+0x3d0>
   c30b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c30b4:	3b02      	subs	r3, #2
   c30b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c30ba:	4601      	mov	r1, r0
   c30bc:	f853 0904 	ldr.w	r0, [r3], #-4
   c30c0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c30c4:	3908      	subs	r1, #8
   c30c6:	2800      	cmp	r0, #0
   c30c8:	d0f8      	beq.n	c30bc <__kernel_rem_pio2f+0x3c0>
   c30ca:	9105      	str	r1, [sp, #20]
   c30cc:	9805      	ldr	r0, [sp, #20]
   c30ce:	9200      	str	r2, [sp, #0]
   c30d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c30d4:	f000 fc66 	bl	c39a4 <scalbnf>
   c30d8:	f1bb 0f00 	cmp.w	fp, #0
   c30dc:	9a00      	ldr	r2, [sp, #0]
   c30de:	f2c0 8125 	blt.w	c332c <__kernel_rem_pio2f+0x630>
   c30e2:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c30e6:	ab46      	add	r3, sp, #280	; 0x118
   c30e8:	eb03 060e 	add.w	r6, r3, lr
   c30ec:	f10e 0c04 	add.w	ip, lr, #4
   c30f0:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2fa8 <__kernel_rem_pio2f+0x2ac>
   c30f4:	eb07 030c 	add.w	r3, r7, ip
   c30f8:	1d31      	adds	r1, r6, #4
   c30fa:	ed73 7a01 	vldmdb	r3!, {s15}
   c30fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c3102:	42bb      	cmp	r3, r7
   c3104:	ee67 7a80 	vmul.f32	s15, s15, s0
   c3108:	ee20 0a07 	vmul.f32	s0, s0, s14
   c310c:	ed61 7a01 	vstmdb	r1!, {s15}
   c3110:	d1f3      	bne.n	c30fa <__kernel_rem_pio2f+0x3fe>
   c3112:	2d00      	cmp	r5, #0
   c3114:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2fac <__kernel_rem_pio2f+0x2b0>
   c3118:	f04f 0400 	mov.w	r4, #0
   c311c:	db20      	blt.n	c3160 <__kernel_rem_pio2f+0x464>
   c311e:	4892      	ldr	r0, [pc, #584]	; (c3368 <__kernel_rem_pio2f+0x66c>)
   c3120:	eddf 7a92 	vldr	s15, [pc, #584]	; c336c <__kernel_rem_pio2f+0x670>
   c3124:	eeb0 7a46 	vmov.f32	s14, s12
   c3128:	4631      	mov	r1, r6
   c312a:	2300      	movs	r3, #0
   c312c:	e003      	b.n	c3136 <__kernel_rem_pio2f+0x43a>
   c312e:	429c      	cmp	r4, r3
   c3130:	db08      	blt.n	c3144 <__kernel_rem_pio2f+0x448>
   c3132:	ecb0 7a01 	vldmia	r0!, {s14}
   c3136:	ecf1 6a01 	vldmia	r1!, {s13}
   c313a:	3301      	adds	r3, #1
   c313c:	429d      	cmp	r5, r3
   c313e:	eee6 7a87 	vfma.f32	s15, s13, s14
   c3142:	daf4      	bge.n	c312e <__kernel_rem_pio2f+0x432>
   c3144:	ab5a      	add	r3, sp, #360	; 0x168
   c3146:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c314a:	45a3      	cmp	fp, r4
   c314c:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3150:	f1a6 0604 	sub.w	r6, r6, #4
   c3154:	f104 0301 	add.w	r3, r4, #1
   c3158:	d005      	beq.n	c3166 <__kernel_rem_pio2f+0x46a>
   c315a:	2d00      	cmp	r5, #0
   c315c:	461c      	mov	r4, r3
   c315e:	dade      	bge.n	c311e <__kernel_rem_pio2f+0x422>
   c3160:	eddf 7a82 	vldr	s15, [pc, #520]	; c336c <__kernel_rem_pio2f+0x670>
   c3164:	e7ee      	b.n	c3144 <__kernel_rem_pio2f+0x448>
   c3166:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c3168:	2902      	cmp	r1, #2
   c316a:	dc1c      	bgt.n	c31a6 <__kernel_rem_pio2f+0x4aa>
   c316c:	2900      	cmp	r1, #0
   c316e:	f300 8092 	bgt.w	c3296 <__kernel_rem_pio2f+0x59a>
   c3172:	d10f      	bne.n	c3194 <__kernel_rem_pio2f+0x498>
   c3174:	ab32      	add	r3, sp, #200	; 0xc8
   c3176:	eddf 7a7d 	vldr	s15, [pc, #500]	; c336c <__kernel_rem_pio2f+0x670>
   c317a:	449c      	add	ip, r3
   c317c:	ed3c 7a01 	vldmdb	ip!, {s14}
   c3180:	4563      	cmp	r3, ip
   c3182:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3186:	d1f9      	bne.n	c317c <__kernel_rem_pio2f+0x480>
   c3188:	b10a      	cbz	r2, c318e <__kernel_rem_pio2f+0x492>
   c318a:	eef1 7a67 	vneg.f32	s15, s15
   c318e:	9b06      	ldr	r3, [sp, #24]
   c3190:	edc3 7a00 	vstr	s15, [r3]
   c3194:	ee19 3a90 	vmov	r3, s19
   c3198:	f003 0007 	and.w	r0, r3, #7
   c319c:	b05b      	add	sp, #364	; 0x16c
   c319e:	ecbd 8b04 	vpop	{d8-d9}
   c31a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c31a6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c31a8:	2b03      	cmp	r3, #3
   c31aa:	d1f3      	bne.n	c3194 <__kernel_rem_pio2f+0x498>
   c31ac:	f1bb 0f00 	cmp.w	fp, #0
   c31b0:	f000 80d1 	beq.w	c3356 <__kernel_rem_pio2f+0x65a>
   c31b4:	ab5a      	add	r3, sp, #360	; 0x168
   c31b6:	4473      	add	r3, lr
   c31b8:	a932      	add	r1, sp, #200	; 0xc8
   c31ba:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c31be:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c31c2:	ed73 7a01 	vldmdb	r3!, {s15}
   c31c6:	eef0 6a47 	vmov.f32	s13, s14
   c31ca:	ee37 7a27 	vadd.f32	s14, s14, s15
   c31ce:	4299      	cmp	r1, r3
   c31d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c31d4:	ed83 7a00 	vstr	s14, [r3]
   c31d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c31dc:	edc3 7a01 	vstr	s15, [r3, #4]
   c31e0:	d1ef      	bne.n	c31c2 <__kernel_rem_pio2f+0x4c6>
   c31e2:	f1bb 0f01 	cmp.w	fp, #1
   c31e6:	f340 80b6 	ble.w	c3356 <__kernel_rem_pio2f+0x65a>
   c31ea:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c31ee:	ab5a      	add	r3, sp, #360	; 0x168
   c31f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   c31f4:	449e      	add	lr, r3
   c31f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c31fa:	f10b 0304 	add.w	r3, fp, #4
   c31fe:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c3202:	440b      	add	r3, r1
   c3204:	a833      	add	r0, sp, #204	; 0xcc
   c3206:	ed73 7a01 	vldmdb	r3!, {s15}
   c320a:	eef0 6a47 	vmov.f32	s13, s14
   c320e:	ee37 7a27 	vadd.f32	s14, s14, s15
   c3212:	4298      	cmp	r0, r3
   c3214:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3218:	ed83 7a00 	vstr	s14, [r3]
   c321c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3220:	edc3 7a01 	vstr	s15, [r3, #4]
   c3224:	d1ef      	bne.n	c3206 <__kernel_rem_pio2f+0x50a>
   c3226:	f10b 0b08 	add.w	fp, fp, #8
   c322a:	eddf 7a50 	vldr	s15, [pc, #320]	; c336c <__kernel_rem_pio2f+0x670>
   c322e:	eb01 030b 	add.w	r3, r1, fp
   c3232:	3108      	adds	r1, #8
   c3234:	ed33 7a01 	vldmdb	r3!, {s14}
   c3238:	4299      	cmp	r1, r3
   c323a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c323e:	d1f9      	bne.n	c3234 <__kernel_rem_pio2f+0x538>
   c3240:	2a00      	cmp	r2, #0
   c3242:	d156      	bne.n	c32f2 <__kernel_rem_pio2f+0x5f6>
   c3244:	9906      	ldr	r1, [sp, #24]
   c3246:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c3248:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c324a:	600a      	str	r2, [r1, #0]
   c324c:	604b      	str	r3, [r1, #4]
   c324e:	edc1 7a02 	vstr	s15, [r1, #8]
   c3252:	e79f      	b.n	c3194 <__kernel_rem_pio2f+0x498>
   c3254:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   c3258:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c325c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c3260:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c3264:	e6bb      	b.n	c2fde <__kernel_rem_pio2f+0x2e2>
   c3266:	2308      	movs	r3, #8
   c3268:	9307      	str	r3, [sp, #28]
   c326a:	2300      	movs	r3, #0
   c326c:	9302      	str	r3, [sp, #8]
   c326e:	e561      	b.n	c2d34 <__kernel_rem_pio2f+0x38>
   c3270:	ee19 3a90 	vmov	r3, s19
   c3274:	2d00      	cmp	r5, #0
   c3276:	f103 0301 	add.w	r3, r3, #1
   c327a:	ee09 3a90 	vmov	s19, r3
   c327e:	bfc8      	it	gt
   c3280:	2202      	movgt	r2, #2
   c3282:	f73f ae70 	bgt.w	c2f66 <__kernel_rem_pio2f+0x26a>
   c3286:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c328a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c328e:	2202      	movs	r2, #2
   c3290:	e5f6      	b.n	c2e80 <__kernel_rem_pio2f+0x184>
   c3292:	2100      	movs	r1, #0
   c3294:	e694      	b.n	c2fc0 <__kernel_rem_pio2f+0x2c4>
   c3296:	a932      	add	r1, sp, #200	; 0xc8
   c3298:	eddf 7a34 	vldr	s15, [pc, #208]	; c336c <__kernel_rem_pio2f+0x670>
   c329c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c32a0:	ed33 7a01 	vldmdb	r3!, {s14}
   c32a4:	4299      	cmp	r1, r3
   c32a6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32aa:	d1f9      	bne.n	c32a0 <__kernel_rem_pio2f+0x5a4>
   c32ac:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c32b0:	bb8a      	cbnz	r2, c3316 <__kernel_rem_pio2f+0x61a>
   c32b2:	9b06      	ldr	r3, [sp, #24]
   c32b4:	f1bb 0f00 	cmp.w	fp, #0
   c32b8:	edc3 7a00 	vstr	s15, [r3]
   c32bc:	ee77 7a67 	vsub.f32	s15, s14, s15
   c32c0:	dd0b      	ble.n	c32da <__kernel_rem_pio2f+0x5de>
   c32c2:	a933      	add	r1, sp, #204	; 0xcc
   c32c4:	2301      	movs	r3, #1
   c32c6:	ecb1 7a01 	vldmia	r1!, {s14}
   c32ca:	3301      	adds	r3, #1
   c32cc:	459b      	cmp	fp, r3
   c32ce:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32d2:	daf8      	bge.n	c32c6 <__kernel_rem_pio2f+0x5ca>
   c32d4:	b10a      	cbz	r2, c32da <__kernel_rem_pio2f+0x5de>
   c32d6:	eef1 7a67 	vneg.f32	s15, s15
   c32da:	9b06      	ldr	r3, [sp, #24]
   c32dc:	edc3 7a01 	vstr	s15, [r3, #4]
   c32e0:	e758      	b.n	c3194 <__kernel_rem_pio2f+0x498>
   c32e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c32e6:	469b      	mov	fp, r3
   c32e8:	ee10 1a10 	vmov	r1, s0
   c32ec:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c32f0:	e6ec      	b.n	c30cc <__kernel_rem_pio2f+0x3d0>
   c32f2:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c32f6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c32fa:	9b06      	ldr	r3, [sp, #24]
   c32fc:	eef1 6a66 	vneg.f32	s13, s13
   c3300:	eeb1 7a47 	vneg.f32	s14, s14
   c3304:	eef1 7a67 	vneg.f32	s15, s15
   c3308:	edc3 6a00 	vstr	s13, [r3]
   c330c:	ed83 7a01 	vstr	s14, [r3, #4]
   c3310:	edc3 7a02 	vstr	s15, [r3, #8]
   c3314:	e73e      	b.n	c3194 <__kernel_rem_pio2f+0x498>
   c3316:	9b06      	ldr	r3, [sp, #24]
   c3318:	eef1 6a67 	vneg.f32	s13, s15
   c331c:	f1bb 0f00 	cmp.w	fp, #0
   c3320:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3324:	edc3 6a00 	vstr	s13, [r3]
   c3328:	dccb      	bgt.n	c32c2 <__kernel_rem_pio2f+0x5c6>
   c332a:	e7d4      	b.n	c32d6 <__kernel_rem_pio2f+0x5da>
   c332c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c332e:	2b02      	cmp	r3, #2
   c3330:	dc0d      	bgt.n	c334e <__kernel_rem_pio2f+0x652>
   c3332:	2b00      	cmp	r3, #0
   c3334:	dc14      	bgt.n	c3360 <__kernel_rem_pio2f+0x664>
   c3336:	f47f af2d 	bne.w	c3194 <__kernel_rem_pio2f+0x498>
   c333a:	eddf 7a0c 	vldr	s15, [pc, #48]	; c336c <__kernel_rem_pio2f+0x670>
   c333e:	2a00      	cmp	r2, #0
   c3340:	f43f af25 	beq.w	c318e <__kernel_rem_pio2f+0x492>
   c3344:	e721      	b.n	c318a <__kernel_rem_pio2f+0x48e>
   c3346:	9b03      	ldr	r3, [sp, #12]
   c3348:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c334c:	e537      	b.n	c2dbe <__kernel_rem_pio2f+0xc2>
   c334e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3350:	2b03      	cmp	r3, #3
   c3352:	f47f af1f 	bne.w	c3194 <__kernel_rem_pio2f+0x498>
   c3356:	eddf 7a05 	vldr	s15, [pc, #20]	; c336c <__kernel_rem_pio2f+0x670>
   c335a:	2a00      	cmp	r2, #0
   c335c:	d1c9      	bne.n	c32f2 <__kernel_rem_pio2f+0x5f6>
   c335e:	e771      	b.n	c3244 <__kernel_rem_pio2f+0x548>
   c3360:	eddf 7a02 	vldr	s15, [pc, #8]	; c336c <__kernel_rem_pio2f+0x670>
   c3364:	e7a2      	b.n	c32ac <__kernel_rem_pio2f+0x5b0>
   c3366:	bf00      	nop
   c3368:	000c8544 	.word	0x000c8544
   c336c:	00000000 	.word	0x00000000

000c3370 <__kernel_sinf>:
   c3370:	ee10 3a10 	vmov	r3, s0
   c3374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3378:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c337c:	da04      	bge.n	c3388 <__kernel_sinf+0x18>
   c337e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c3382:	ee17 3a90 	vmov	r3, s15
   c3386:	b35b      	cbz	r3, c33e0 <__kernel_sinf+0x70>
   c3388:	ee60 7a00 	vmul.f32	s15, s0, s0
   c338c:	ed9f 7a15 	vldr	s14, [pc, #84]	; c33e4 <__kernel_sinf+0x74>
   c3390:	eddf 5a15 	vldr	s11, [pc, #84]	; c33e8 <__kernel_sinf+0x78>
   c3394:	ed9f 6a15 	vldr	s12, [pc, #84]	; c33ec <__kernel_sinf+0x7c>
   c3398:	eddf 6a15 	vldr	s13, [pc, #84]	; c33f0 <__kernel_sinf+0x80>
   c339c:	eee7 5a87 	vfma.f32	s11, s15, s14
   c33a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; c33f4 <__kernel_sinf+0x84>
   c33a4:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c33a8:	ee20 5a27 	vmul.f32	s10, s0, s15
   c33ac:	eee6 6a27 	vfma.f32	s13, s12, s15
   c33b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c33b4:	b930      	cbnz	r0, c33c4 <__kernel_sinf+0x54>
   c33b6:	eddf 6a10 	vldr	s13, [pc, #64]	; c33f8 <__kernel_sinf+0x88>
   c33ba:	eee7 6a87 	vfma.f32	s13, s15, s14
   c33be:	eea6 0a85 	vfma.f32	s0, s13, s10
   c33c2:	4770      	bx	lr
   c33c4:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c33c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c33cc:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c33d0:	eddf 6a0a 	vldr	s13, [pc, #40]	; c33fc <__kernel_sinf+0x8c>
   c33d4:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c33d8:	eee5 0a26 	vfma.f32	s1, s10, s13
   c33dc:	ee30 0a60 	vsub.f32	s0, s0, s1
   c33e0:	4770      	bx	lr
   c33e2:	bf00      	nop
   c33e4:	2f2ec9d3 	.word	0x2f2ec9d3
   c33e8:	b2d72f34 	.word	0xb2d72f34
   c33ec:	3638ef1b 	.word	0x3638ef1b
   c33f0:	b9500d01 	.word	0xb9500d01
   c33f4:	3c088889 	.word	0x3c088889
   c33f8:	be2aaaab 	.word	0xbe2aaaab
   c33fc:	3e2aaaab 	.word	0x3e2aaaab

000c3400 <atan>:
   c3400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3404:	ec55 4b10 	vmov	r4, r5, d0
   c3408:	4bc3      	ldr	r3, [pc, #780]	; (c3718 <atan+0x318>)
   c340a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c340e:	429e      	cmp	r6, r3
   c3410:	46aa      	mov	sl, r5
   c3412:	dd17      	ble.n	c3444 <atan+0x44>
   c3414:	4bc1      	ldr	r3, [pc, #772]	; (c371c <atan+0x31c>)
   c3416:	429e      	cmp	r6, r3
   c3418:	dc0a      	bgt.n	c3430 <atan+0x30>
   c341a:	d007      	beq.n	c342c <atan+0x2c>
   c341c:	f1ba 0f00 	cmp.w	sl, #0
   c3420:	f340 80cb 	ble.w	c35ba <atan+0x1ba>
   c3424:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c36a8 <atan+0x2a8>
   c3428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c342c:	2c00      	cmp	r4, #0
   c342e:	d0f5      	beq.n	c341c <atan+0x1c>
   c3430:	4622      	mov	r2, r4
   c3432:	462b      	mov	r3, r5
   c3434:	4620      	mov	r0, r4
   c3436:	4629      	mov	r1, r5
   c3438:	f000 fb2c 	bl	c3a94 <__adddf3>
   c343c:	ec41 0b10 	vmov	d0, r0, r1
   c3440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3444:	4bb6      	ldr	r3, [pc, #728]	; (c3720 <atan+0x320>)
   c3446:	429e      	cmp	r6, r3
   c3448:	f300 80bb 	bgt.w	c35c2 <atan+0x1c2>
   c344c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3450:	429e      	cmp	r6, r3
   c3452:	f340 80a0 	ble.w	c3596 <atan+0x196>
   c3456:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c345a:	4622      	mov	r2, r4
   c345c:	462b      	mov	r3, r5
   c345e:	4620      	mov	r0, r4
   c3460:	4629      	mov	r1, r5
   c3462:	f000 fccd 	bl	c3e00 <__aeabi_dmul>
   c3466:	4602      	mov	r2, r0
   c3468:	460b      	mov	r3, r1
   c346a:	4680      	mov	r8, r0
   c346c:	4689      	mov	r9, r1
   c346e:	f000 fcc7 	bl	c3e00 <__aeabi_dmul>
   c3472:	a38f      	add	r3, pc, #572	; (adr r3, c36b0 <atan+0x2b0>)
   c3474:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3478:	4606      	mov	r6, r0
   c347a:	460f      	mov	r7, r1
   c347c:	f000 fcc0 	bl	c3e00 <__aeabi_dmul>
   c3480:	a38d      	add	r3, pc, #564	; (adr r3, c36b8 <atan+0x2b8>)
   c3482:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3486:	f000 fb05 	bl	c3a94 <__adddf3>
   c348a:	4632      	mov	r2, r6
   c348c:	463b      	mov	r3, r7
   c348e:	f000 fcb7 	bl	c3e00 <__aeabi_dmul>
   c3492:	a38b      	add	r3, pc, #556	; (adr r3, c36c0 <atan+0x2c0>)
   c3494:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3498:	f000 fafc 	bl	c3a94 <__adddf3>
   c349c:	4632      	mov	r2, r6
   c349e:	463b      	mov	r3, r7
   c34a0:	f000 fcae 	bl	c3e00 <__aeabi_dmul>
   c34a4:	a388      	add	r3, pc, #544	; (adr r3, c36c8 <atan+0x2c8>)
   c34a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34aa:	f000 faf3 	bl	c3a94 <__adddf3>
   c34ae:	4632      	mov	r2, r6
   c34b0:	463b      	mov	r3, r7
   c34b2:	f000 fca5 	bl	c3e00 <__aeabi_dmul>
   c34b6:	a386      	add	r3, pc, #536	; (adr r3, c36d0 <atan+0x2d0>)
   c34b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34bc:	f000 faea 	bl	c3a94 <__adddf3>
   c34c0:	4632      	mov	r2, r6
   c34c2:	463b      	mov	r3, r7
   c34c4:	f000 fc9c 	bl	c3e00 <__aeabi_dmul>
   c34c8:	a383      	add	r3, pc, #524	; (adr r3, c36d8 <atan+0x2d8>)
   c34ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34ce:	f000 fae1 	bl	c3a94 <__adddf3>
   c34d2:	4642      	mov	r2, r8
   c34d4:	464b      	mov	r3, r9
   c34d6:	f000 fc93 	bl	c3e00 <__aeabi_dmul>
   c34da:	a381      	add	r3, pc, #516	; (adr r3, c36e0 <atan+0x2e0>)
   c34dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34e0:	4680      	mov	r8, r0
   c34e2:	4689      	mov	r9, r1
   c34e4:	4630      	mov	r0, r6
   c34e6:	4639      	mov	r1, r7
   c34e8:	f000 fc8a 	bl	c3e00 <__aeabi_dmul>
   c34ec:	a37e      	add	r3, pc, #504	; (adr r3, c36e8 <atan+0x2e8>)
   c34ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34f2:	f000 facd 	bl	c3a90 <__aeabi_dsub>
   c34f6:	4632      	mov	r2, r6
   c34f8:	463b      	mov	r3, r7
   c34fa:	f000 fc81 	bl	c3e00 <__aeabi_dmul>
   c34fe:	a37c      	add	r3, pc, #496	; (adr r3, c36f0 <atan+0x2f0>)
   c3500:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3504:	f000 fac4 	bl	c3a90 <__aeabi_dsub>
   c3508:	4632      	mov	r2, r6
   c350a:	463b      	mov	r3, r7
   c350c:	f000 fc78 	bl	c3e00 <__aeabi_dmul>
   c3510:	a379      	add	r3, pc, #484	; (adr r3, c36f8 <atan+0x2f8>)
   c3512:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3516:	f000 fabb 	bl	c3a90 <__aeabi_dsub>
   c351a:	4632      	mov	r2, r6
   c351c:	463b      	mov	r3, r7
   c351e:	f000 fc6f 	bl	c3e00 <__aeabi_dmul>
   c3522:	a377      	add	r3, pc, #476	; (adr r3, c3700 <atan+0x300>)
   c3524:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3528:	f000 fab2 	bl	c3a90 <__aeabi_dsub>
   c352c:	4632      	mov	r2, r6
   c352e:	463b      	mov	r3, r7
   c3530:	f000 fc66 	bl	c3e00 <__aeabi_dmul>
   c3534:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c3538:	4602      	mov	r2, r0
   c353a:	460b      	mov	r3, r1
   c353c:	4640      	mov	r0, r8
   c353e:	4649      	mov	r1, r9
   c3540:	d062      	beq.n	c3608 <atan+0x208>
   c3542:	f000 faa7 	bl	c3a94 <__adddf3>
   c3546:	4e77      	ldr	r6, [pc, #476]	; (c3724 <atan+0x324>)
   c3548:	4622      	mov	r2, r4
   c354a:	462b      	mov	r3, r5
   c354c:	f000 fc58 	bl	c3e00 <__aeabi_dmul>
   c3550:	4b75      	ldr	r3, [pc, #468]	; (c3728 <atan+0x328>)
   c3552:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c3556:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c355a:	449b      	add	fp, r3
   c355c:	e9db 2300 	ldrd	r2, r3, [fp]
   c3560:	f000 fa96 	bl	c3a90 <__aeabi_dsub>
   c3564:	4622      	mov	r2, r4
   c3566:	462b      	mov	r3, r5
   c3568:	f000 fa92 	bl	c3a90 <__aeabi_dsub>
   c356c:	4602      	mov	r2, r0
   c356e:	460b      	mov	r3, r1
   c3570:	e9d6 0100 	ldrd	r0, r1, [r6]
   c3574:	f000 fa8c 	bl	c3a90 <__aeabi_dsub>
   c3578:	f1ba 0f00 	cmp.w	sl, #0
   c357c:	ec41 0b10 	vmov	d0, r0, r1
   c3580:	f6bf af5e 	bge.w	c3440 <atan+0x40>
   c3584:	ee10 1a90 	vmov	r1, s1
   c3588:	4602      	mov	r2, r0
   c358a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c358e:	ec43 2b10 	vmov	d0, r2, r3
   c3592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3596:	a35c      	add	r3, pc, #368	; (adr r3, c3708 <atan+0x308>)
   c3598:	e9d3 2300 	ldrd	r2, r3, [r3]
   c359c:	ee10 0a10 	vmov	r0, s0
   c35a0:	4629      	mov	r1, r5
   c35a2:	f000 fa77 	bl	c3a94 <__adddf3>
   c35a6:	4b61      	ldr	r3, [pc, #388]	; (c372c <atan+0x32c>)
   c35a8:	2200      	movs	r2, #0
   c35aa:	f000 feb9 	bl	c4320 <__aeabi_dcmpgt>
   c35ae:	2800      	cmp	r0, #0
   c35b0:	f43f af51 	beq.w	c3456 <atan+0x56>
   c35b4:	ec45 4b10 	vmov	d0, r4, r5
   c35b8:	e742      	b.n	c3440 <atan+0x40>
   c35ba:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3710 <atan+0x310>
   c35be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c35c2:	f000 f8bd 	bl	c3740 <fabs>
   c35c6:	4b5a      	ldr	r3, [pc, #360]	; (c3730 <atan+0x330>)
   c35c8:	429e      	cmp	r6, r3
   c35ca:	ec55 4b10 	vmov	r4, r5, d0
   c35ce:	dc2b      	bgt.n	c3628 <atan+0x228>
   c35d0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c35d4:	429e      	cmp	r6, r3
   c35d6:	dc56      	bgt.n	c3686 <atan+0x286>
   c35d8:	ee10 2a10 	vmov	r2, s0
   c35dc:	462b      	mov	r3, r5
   c35de:	ee10 0a10 	vmov	r0, s0
   c35e2:	4629      	mov	r1, r5
   c35e4:	f000 fa56 	bl	c3a94 <__adddf3>
   c35e8:	4b50      	ldr	r3, [pc, #320]	; (c372c <atan+0x32c>)
   c35ea:	2200      	movs	r2, #0
   c35ec:	f000 fa50 	bl	c3a90 <__aeabi_dsub>
   c35f0:	4602      	mov	r2, r0
   c35f2:	460b      	mov	r3, r1
   c35f4:	4620      	mov	r0, r4
   c35f6:	4629      	mov	r1, r5
   c35f8:	4614      	mov	r4, r2
   c35fa:	461d      	mov	r5, r3
   c35fc:	f04f 0b00 	mov.w	fp, #0
   c3600:	2200      	movs	r2, #0
   c3602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3606:	e027      	b.n	c3658 <atan+0x258>
   c3608:	f000 fa44 	bl	c3a94 <__adddf3>
   c360c:	4622      	mov	r2, r4
   c360e:	462b      	mov	r3, r5
   c3610:	f000 fbf6 	bl	c3e00 <__aeabi_dmul>
   c3614:	4602      	mov	r2, r0
   c3616:	460b      	mov	r3, r1
   c3618:	4620      	mov	r0, r4
   c361a:	4629      	mov	r1, r5
   c361c:	f000 fa38 	bl	c3a90 <__aeabi_dsub>
   c3620:	ec41 0b10 	vmov	d0, r0, r1
   c3624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3628:	4b42      	ldr	r3, [pc, #264]	; (c3734 <atan+0x334>)
   c362a:	429e      	cmp	r6, r3
   c362c:	da1f      	bge.n	c366e <atan+0x26e>
   c362e:	4b42      	ldr	r3, [pc, #264]	; (c3738 <atan+0x338>)
   c3630:	2200      	movs	r2, #0
   c3632:	4629      	mov	r1, r5
   c3634:	ee10 0a10 	vmov	r0, s0
   c3638:	f000 fa2a 	bl	c3a90 <__aeabi_dsub>
   c363c:	4602      	mov	r2, r0
   c363e:	460b      	mov	r3, r1
   c3640:	4620      	mov	r0, r4
   c3642:	4629      	mov	r1, r5
   c3644:	4614      	mov	r4, r2
   c3646:	461d      	mov	r5, r3
   c3648:	2200      	movs	r2, #0
   c364a:	4b3b      	ldr	r3, [pc, #236]	; (c3738 <atan+0x338>)
   c364c:	f04f 0b02 	mov.w	fp, #2
   c3650:	f000 fbd6 	bl	c3e00 <__aeabi_dmul>
   c3654:	4b35      	ldr	r3, [pc, #212]	; (c372c <atan+0x32c>)
   c3656:	2200      	movs	r2, #0
   c3658:	f000 fa1c 	bl	c3a94 <__adddf3>
   c365c:	4602      	mov	r2, r0
   c365e:	460b      	mov	r3, r1
   c3660:	4620      	mov	r0, r4
   c3662:	4629      	mov	r1, r5
   c3664:	f000 fcf6 	bl	c4054 <__aeabi_ddiv>
   c3668:	4604      	mov	r4, r0
   c366a:	460d      	mov	r5, r1
   c366c:	e6f5      	b.n	c345a <atan+0x5a>
   c366e:	462b      	mov	r3, r5
   c3670:	4932      	ldr	r1, [pc, #200]	; (c373c <atan+0x33c>)
   c3672:	ee10 2a10 	vmov	r2, s0
   c3676:	2000      	movs	r0, #0
   c3678:	f000 fcec 	bl	c4054 <__aeabi_ddiv>
   c367c:	f04f 0b03 	mov.w	fp, #3
   c3680:	4604      	mov	r4, r0
   c3682:	460d      	mov	r5, r1
   c3684:	e6e9      	b.n	c345a <atan+0x5a>
   c3686:	4b29      	ldr	r3, [pc, #164]	; (c372c <atan+0x32c>)
   c3688:	2200      	movs	r2, #0
   c368a:	4629      	mov	r1, r5
   c368c:	ee10 0a10 	vmov	r0, s0
   c3690:	f000 f9fe 	bl	c3a90 <__aeabi_dsub>
   c3694:	4602      	mov	r2, r0
   c3696:	460b      	mov	r3, r1
   c3698:	4620      	mov	r0, r4
   c369a:	4629      	mov	r1, r5
   c369c:	f04f 0b01 	mov.w	fp, #1
   c36a0:	4614      	mov	r4, r2
   c36a2:	461d      	mov	r5, r3
   c36a4:	e7d6      	b.n	c3654 <atan+0x254>
   c36a6:	bf00      	nop
   c36a8:	54442d18 	.word	0x54442d18
   c36ac:	3ff921fb 	.word	0x3ff921fb
   c36b0:	e322da11 	.word	0xe322da11
   c36b4:	3f90ad3a 	.word	0x3f90ad3a
   c36b8:	24760deb 	.word	0x24760deb
   c36bc:	3fa97b4b 	.word	0x3fa97b4b
   c36c0:	a0d03d51 	.word	0xa0d03d51
   c36c4:	3fb10d66 	.word	0x3fb10d66
   c36c8:	c54c206e 	.word	0xc54c206e
   c36cc:	3fb745cd 	.word	0x3fb745cd
   c36d0:	920083ff 	.word	0x920083ff
   c36d4:	3fc24924 	.word	0x3fc24924
   c36d8:	5555550d 	.word	0x5555550d
   c36dc:	3fd55555 	.word	0x3fd55555
   c36e0:	2c6a6c2f 	.word	0x2c6a6c2f
   c36e4:	bfa2b444 	.word	0xbfa2b444
   c36e8:	52defd9a 	.word	0x52defd9a
   c36ec:	3fadde2d 	.word	0x3fadde2d
   c36f0:	af749a6d 	.word	0xaf749a6d
   c36f4:	3fb3b0f2 	.word	0x3fb3b0f2
   c36f8:	fe231671 	.word	0xfe231671
   c36fc:	3fbc71c6 	.word	0x3fbc71c6
   c3700:	9998ebc4 	.word	0x9998ebc4
   c3704:	3fc99999 	.word	0x3fc99999
   c3708:	8800759c 	.word	0x8800759c
   c370c:	7e37e43c 	.word	0x7e37e43c
   c3710:	54442d18 	.word	0x54442d18
   c3714:	bff921fb 	.word	0xbff921fb
   c3718:	440fffff 	.word	0x440fffff
   c371c:	7ff00000 	.word	0x7ff00000
   c3720:	3fdbffff 	.word	0x3fdbffff
   c3724:	000c8578 	.word	0x000c8578
   c3728:	000c8598 	.word	0x000c8598
   c372c:	3ff00000 	.word	0x3ff00000
   c3730:	3ff2ffff 	.word	0x3ff2ffff
   c3734:	40038000 	.word	0x40038000
   c3738:	3ff80000 	.word	0x3ff80000
   c373c:	bff00000 	.word	0xbff00000

000c3740 <fabs>:
   c3740:	ec51 0b10 	vmov	r0, r1, d0
   c3744:	ee10 2a10 	vmov	r2, s0
   c3748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c374c:	ec43 2b10 	vmov	d0, r2, r3
   c3750:	4770      	bx	lr
   c3752:	bf00      	nop

000c3754 <atanf>:
   c3754:	b538      	push	{r3, r4, r5, lr}
   c3756:	ee10 5a10 	vmov	r5, s0
   c375a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c375e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c3762:	eef0 7a40 	vmov.f32	s15, s0
   c3766:	db0b      	blt.n	c3780 <atanf+0x2c>
   c3768:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c376c:	dc5b      	bgt.n	c3826 <atanf+0xd2>
   c376e:	eddf 7a53 	vldr	s15, [pc, #332]	; c38bc <atanf+0x168>
   c3772:	ed9f 0a53 	vldr	s0, [pc, #332]	; c38c0 <atanf+0x16c>
   c3776:	2d00      	cmp	r5, #0
   c3778:	bfc8      	it	gt
   c377a:	eeb0 0a67 	vmovgt.f32	s0, s15
   c377e:	bd38      	pop	{r3, r4, r5, pc}
   c3780:	4b50      	ldr	r3, [pc, #320]	; (c38c4 <atanf+0x170>)
   c3782:	429c      	cmp	r4, r3
   c3784:	dc5e      	bgt.n	c3844 <atanf+0xf0>
   c3786:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c378a:	db4f      	blt.n	c382c <atanf+0xd8>
   c378c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c3790:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c3794:	eddf 4a4c 	vldr	s9, [pc, #304]	; c38c8 <atanf+0x174>
   c3798:	eddf 5a4c 	vldr	s11, [pc, #304]	; c38cc <atanf+0x178>
   c379c:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c38d0 <atanf+0x17c>
   c37a0:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c38d4 <atanf+0x180>
   c37a4:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c37a8:	eeb0 6a66 	vmov.f32	s12, s13
   c37ac:	eee7 5a24 	vfma.f32	s11, s14, s9
   c37b0:	1c5a      	adds	r2, r3, #1
   c37b2:	eddf 4a49 	vldr	s9, [pc, #292]	; c38d8 <atanf+0x184>
   c37b6:	eddf 6a49 	vldr	s13, [pc, #292]	; c38dc <atanf+0x188>
   c37ba:	eea5 5a87 	vfma.f32	s10, s11, s14
   c37be:	eee7 6a24 	vfma.f32	s13, s14, s9
   c37c2:	eddf 5a47 	vldr	s11, [pc, #284]	; c38e0 <atanf+0x18c>
   c37c6:	eddf 4a47 	vldr	s9, [pc, #284]	; c38e4 <atanf+0x190>
   c37ca:	eee6 5a87 	vfma.f32	s11, s13, s14
   c37ce:	eea5 4a07 	vfma.f32	s8, s10, s14
   c37d2:	ed9f 5a45 	vldr	s10, [pc, #276]	; c38e8 <atanf+0x194>
   c37d6:	eddf 6a45 	vldr	s13, [pc, #276]	; c38ec <atanf+0x198>
   c37da:	eea5 5a87 	vfma.f32	s10, s11, s14
   c37de:	eee4 4a07 	vfma.f32	s9, s8, s14
   c37e2:	eddf 5a43 	vldr	s11, [pc, #268]	; c38f0 <atanf+0x19c>
   c37e6:	eee4 6a87 	vfma.f32	s13, s9, s14
   c37ea:	eee5 5a07 	vfma.f32	s11, s10, s14
   c37ee:	ee66 6a86 	vmul.f32	s13, s13, s12
   c37f2:	ee25 7a87 	vmul.f32	s14, s11, s14
   c37f6:	d03a      	beq.n	c386e <atanf+0x11a>
   c37f8:	4a3e      	ldr	r2, [pc, #248]	; (c38f4 <atanf+0x1a0>)
   c37fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c37fe:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3802:	ed92 0a00 	vldr	s0, [r2]
   c3806:	4a3c      	ldr	r2, [pc, #240]	; (c38f8 <atanf+0x1a4>)
   c3808:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c380c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3810:	2d00      	cmp	r5, #0
   c3812:	ed93 7a00 	vldr	s14, [r3]
   c3816:	ee70 7a67 	vsub.f32	s15, s0, s15
   c381a:	ee37 0a67 	vsub.f32	s0, s14, s15
   c381e:	daae      	bge.n	c377e <atanf+0x2a>
   c3820:	eeb1 0a40 	vneg.f32	s0, s0
   c3824:	bd38      	pop	{r3, r4, r5, pc}
   c3826:	ee30 0a00 	vadd.f32	s0, s0, s0
   c382a:	bd38      	pop	{r3, r4, r5, pc}
   c382c:	ed9f 7a33 	vldr	s14, [pc, #204]	; c38fc <atanf+0x1a8>
   c3830:	ee30 7a07 	vadd.f32	s14, s0, s14
   c3834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3838:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3840:	dda4      	ble.n	c378c <atanf+0x38>
   c3842:	bd38      	pop	{r3, r4, r5, pc}
   c3844:	f000 f860 	bl	c3908 <fabsf>
   c3848:	4b2d      	ldr	r3, [pc, #180]	; (c3900 <atanf+0x1ac>)
   c384a:	429c      	cmp	r4, r3
   c384c:	dc16      	bgt.n	c387c <atanf+0x128>
   c384e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c3852:	429c      	cmp	r4, r3
   c3854:	dc27      	bgt.n	c38a6 <atanf+0x152>
   c3856:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c385a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c385e:	eea0 7a27 	vfma.f32	s14, s0, s15
   c3862:	2300      	movs	r3, #0
   c3864:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3868:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c386c:	e790      	b.n	c3790 <atanf+0x3c>
   c386e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3872:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c3876:	eeb0 0a67 	vmov.f32	s0, s15
   c387a:	bd38      	pop	{r3, r4, r5, pc}
   c387c:	4b21      	ldr	r3, [pc, #132]	; (c3904 <atanf+0x1b0>)
   c387e:	429c      	cmp	r4, r3
   c3880:	dc0b      	bgt.n	c389a <atanf+0x146>
   c3882:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c3886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c388a:	eea0 7a27 	vfma.f32	s14, s0, s15
   c388e:	2302      	movs	r3, #2
   c3890:	ee30 0a67 	vsub.f32	s0, s0, s15
   c3894:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c3898:	e77a      	b.n	c3790 <atanf+0x3c>
   c389a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c389e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c38a2:	2303      	movs	r3, #3
   c38a4:	e774      	b.n	c3790 <atanf+0x3c>
   c38a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c38aa:	ee30 7a67 	vsub.f32	s14, s0, s15
   c38ae:	ee30 0a27 	vadd.f32	s0, s0, s15
   c38b2:	2301      	movs	r3, #1
   c38b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c38b8:	e76a      	b.n	c3790 <atanf+0x3c>
   c38ba:	bf00      	nop
   c38bc:	3fc90fdb 	.word	0x3fc90fdb
   c38c0:	bfc90fdb 	.word	0xbfc90fdb
   c38c4:	3edfffff 	.word	0x3edfffff
   c38c8:	3c8569d7 	.word	0x3c8569d7
   c38cc:	3d4bda59 	.word	0x3d4bda59
   c38d0:	3d886b35 	.word	0x3d886b35
   c38d4:	3dba2e6e 	.word	0x3dba2e6e
   c38d8:	bd15a221 	.word	0xbd15a221
   c38dc:	bd6ef16b 	.word	0xbd6ef16b
   c38e0:	bd9d8795 	.word	0xbd9d8795
   c38e4:	3e124925 	.word	0x3e124925
   c38e8:	bde38e38 	.word	0xbde38e38
   c38ec:	3eaaaaab 	.word	0x3eaaaaab
   c38f0:	be4ccccd 	.word	0xbe4ccccd
   c38f4:	000c85c8 	.word	0x000c85c8
   c38f8:	000c85b8 	.word	0x000c85b8
   c38fc:	7149f2ca 	.word	0x7149f2ca
   c3900:	3f97ffff 	.word	0x3f97ffff
   c3904:	401bffff 	.word	0x401bffff

000c3908 <fabsf>:
   c3908:	ee10 3a10 	vmov	r3, s0
   c390c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3910:	ee00 3a10 	vmov	s0, r3
   c3914:	4770      	bx	lr
   c3916:	bf00      	nop

000c3918 <floorf>:
   c3918:	ee10 2a10 	vmov	r2, s0
   c391c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3920:	3b7f      	subs	r3, #127	; 0x7f
   c3922:	2b16      	cmp	r3, #22
   c3924:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3928:	dc28      	bgt.n	c397c <floorf+0x64>
   c392a:	2b00      	cmp	r3, #0
   c392c:	db18      	blt.n	c3960 <floorf+0x48>
   c392e:	491a      	ldr	r1, [pc, #104]	; (c3998 <floorf+0x80>)
   c3930:	4119      	asrs	r1, r3
   c3932:	420a      	tst	r2, r1
   c3934:	d021      	beq.n	c397a <floorf+0x62>
   c3936:	eddf 7a19 	vldr	s15, [pc, #100]	; c399c <floorf+0x84>
   c393a:	ee70 7a27 	vadd.f32	s15, s0, s15
   c393e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3946:	dd18      	ble.n	c397a <floorf+0x62>
   c3948:	2a00      	cmp	r2, #0
   c394a:	da04      	bge.n	c3956 <floorf+0x3e>
   c394c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3950:	fa40 f303 	asr.w	r3, r0, r3
   c3954:	441a      	add	r2, r3
   c3956:	ea22 0301 	bic.w	r3, r2, r1
   c395a:	ee00 3a10 	vmov	s0, r3
   c395e:	4770      	bx	lr
   c3960:	eddf 7a0e 	vldr	s15, [pc, #56]	; c399c <floorf+0x84>
   c3964:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3968:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3970:	dd03      	ble.n	c397a <floorf+0x62>
   c3972:	2a00      	cmp	r2, #0
   c3974:	db08      	blt.n	c3988 <floorf+0x70>
   c3976:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c39a0 <floorf+0x88>
   c397a:	4770      	bx	lr
   c397c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3980:	d3fb      	bcc.n	c397a <floorf+0x62>
   c3982:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3986:	4770      	bx	lr
   c3988:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c398c:	2900      	cmp	r1, #0
   c398e:	bf18      	it	ne
   c3990:	eeb0 0a67 	vmovne.f32	s0, s15
   c3994:	4770      	bx	lr
   c3996:	bf00      	nop
   c3998:	007fffff 	.word	0x007fffff
   c399c:	7149f2ca 	.word	0x7149f2ca
   c39a0:	00000000 	.word	0x00000000

000c39a4 <scalbnf>:
   c39a4:	b082      	sub	sp, #8
   c39a6:	ed8d 0a01 	vstr	s0, [sp, #4]
   c39aa:	9b01      	ldr	r3, [sp, #4]
   c39ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c39b0:	d02a      	beq.n	c3a08 <scalbnf+0x64>
   c39b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c39b6:	d223      	bcs.n	c3a00 <scalbnf+0x5c>
   c39b8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c39bc:	d128      	bne.n	c3a10 <scalbnf+0x6c>
   c39be:	ed9d 7a01 	vldr	s14, [sp, #4]
   c39c2:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3a6c <scalbnf+0xc8>
   c39c6:	4b2a      	ldr	r3, [pc, #168]	; (c3a70 <scalbnf+0xcc>)
   c39c8:	ee67 7a27 	vmul.f32	s15, s14, s15
   c39cc:	4298      	cmp	r0, r3
   c39ce:	edcd 7a01 	vstr	s15, [sp, #4]
   c39d2:	db37      	blt.n	c3a44 <scalbnf+0xa0>
   c39d4:	9b01      	ldr	r3, [sp, #4]
   c39d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c39da:	3a19      	subs	r2, #25
   c39dc:	4402      	add	r2, r0
   c39de:	2afe      	cmp	r2, #254	; 0xfe
   c39e0:	dd1a      	ble.n	c3a18 <scalbnf+0x74>
   c39e2:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3a74 <scalbnf+0xd0>
   c39e6:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3a78 <scalbnf+0xd4>
   c39ea:	9b01      	ldr	r3, [sp, #4]
   c39ec:	2b00      	cmp	r3, #0
   c39ee:	eef0 7a40 	vmov.f32	s15, s0
   c39f2:	bfb8      	it	lt
   c39f4:	eeb0 0a47 	vmovlt.f32	s0, s14
   c39f8:	ee20 0a27 	vmul.f32	s0, s0, s15
   c39fc:	b002      	add	sp, #8
   c39fe:	4770      	bx	lr
   c3a00:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3a04:	b002      	add	sp, #8
   c3a06:	4770      	bx	lr
   c3a08:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3a0c:	b002      	add	sp, #8
   c3a0e:	4770      	bx	lr
   c3a10:	0dd2      	lsrs	r2, r2, #23
   c3a12:	4402      	add	r2, r0
   c3a14:	2afe      	cmp	r2, #254	; 0xfe
   c3a16:	dce4      	bgt.n	c39e2 <scalbnf+0x3e>
   c3a18:	2a00      	cmp	r2, #0
   c3a1a:	dc0b      	bgt.n	c3a34 <scalbnf+0x90>
   c3a1c:	f112 0f16 	cmn.w	r2, #22
   c3a20:	da17      	bge.n	c3a52 <scalbnf+0xae>
   c3a22:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3a26:	4298      	cmp	r0, r3
   c3a28:	dcdb      	bgt.n	c39e2 <scalbnf+0x3e>
   c3a2a:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3a7c <scalbnf+0xd8>
   c3a2e:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3a80 <scalbnf+0xdc>
   c3a32:	e7da      	b.n	c39ea <scalbnf+0x46>
   c3a34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3a38:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3a3c:	ee00 3a10 	vmov	s0, r3
   c3a40:	b002      	add	sp, #8
   c3a42:	4770      	bx	lr
   c3a44:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3a7c <scalbnf+0xd8>
   c3a48:	eddd 7a01 	vldr	s15, [sp, #4]
   c3a4c:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3a50:	e7d8      	b.n	c3a04 <scalbnf+0x60>
   c3a52:	3219      	adds	r2, #25
   c3a54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3a58:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3a5c:	eddf 7a09 	vldr	s15, [pc, #36]	; c3a84 <scalbnf+0xe0>
   c3a60:	ee07 3a10 	vmov	s14, r3
   c3a64:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3a68:	e7cc      	b.n	c3a04 <scalbnf+0x60>
   c3a6a:	bf00      	nop
   c3a6c:	4c000000 	.word	0x4c000000
   c3a70:	ffff3cb0 	.word	0xffff3cb0
   c3a74:	7149f2ca 	.word	0x7149f2ca
   c3a78:	f149f2ca 	.word	0xf149f2ca
   c3a7c:	0da24260 	.word	0x0da24260
   c3a80:	8da24260 	.word	0x8da24260
   c3a84:	33000000 	.word	0x33000000

000c3a88 <__aeabi_drsub>:
   c3a88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c3a8c:	e002      	b.n	c3a94 <__adddf3>
   c3a8e:	bf00      	nop

000c3a90 <__aeabi_dsub>:
   c3a90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3a94 <__adddf3>:
   c3a94:	b530      	push	{r4, r5, lr}
   c3a96:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3a9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3a9e:	ea94 0f05 	teq	r4, r5
   c3aa2:	bf08      	it	eq
   c3aa4:	ea90 0f02 	teqeq	r0, r2
   c3aa8:	bf1f      	itttt	ne
   c3aaa:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3aae:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3ab2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3ab6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3aba:	f000 80e2 	beq.w	c3c82 <__adddf3+0x1ee>
   c3abe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3ac2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3ac6:	bfb8      	it	lt
   c3ac8:	426d      	neglt	r5, r5
   c3aca:	dd0c      	ble.n	c3ae6 <__adddf3+0x52>
   c3acc:	442c      	add	r4, r5
   c3ace:	ea80 0202 	eor.w	r2, r0, r2
   c3ad2:	ea81 0303 	eor.w	r3, r1, r3
   c3ad6:	ea82 0000 	eor.w	r0, r2, r0
   c3ada:	ea83 0101 	eor.w	r1, r3, r1
   c3ade:	ea80 0202 	eor.w	r2, r0, r2
   c3ae2:	ea81 0303 	eor.w	r3, r1, r3
   c3ae6:	2d36      	cmp	r5, #54	; 0x36
   c3ae8:	bf88      	it	hi
   c3aea:	bd30      	pophi	{r4, r5, pc}
   c3aec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3af0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3af4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3af8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3afc:	d002      	beq.n	c3b04 <__adddf3+0x70>
   c3afe:	4240      	negs	r0, r0
   c3b00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3b04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3b08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3b0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3b10:	d002      	beq.n	c3b18 <__adddf3+0x84>
   c3b12:	4252      	negs	r2, r2
   c3b14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3b18:	ea94 0f05 	teq	r4, r5
   c3b1c:	f000 80a7 	beq.w	c3c6e <__adddf3+0x1da>
   c3b20:	f1a4 0401 	sub.w	r4, r4, #1
   c3b24:	f1d5 0e20 	rsbs	lr, r5, #32
   c3b28:	db0d      	blt.n	c3b46 <__adddf3+0xb2>
   c3b2a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3b2e:	fa22 f205 	lsr.w	r2, r2, r5
   c3b32:	1880      	adds	r0, r0, r2
   c3b34:	f141 0100 	adc.w	r1, r1, #0
   c3b38:	fa03 f20e 	lsl.w	r2, r3, lr
   c3b3c:	1880      	adds	r0, r0, r2
   c3b3e:	fa43 f305 	asr.w	r3, r3, r5
   c3b42:	4159      	adcs	r1, r3
   c3b44:	e00e      	b.n	c3b64 <__adddf3+0xd0>
   c3b46:	f1a5 0520 	sub.w	r5, r5, #32
   c3b4a:	f10e 0e20 	add.w	lr, lr, #32
   c3b4e:	2a01      	cmp	r2, #1
   c3b50:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3b54:	bf28      	it	cs
   c3b56:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3b5a:	fa43 f305 	asr.w	r3, r3, r5
   c3b5e:	18c0      	adds	r0, r0, r3
   c3b60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3b64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3b68:	d507      	bpl.n	c3b7a <__adddf3+0xe6>
   c3b6a:	f04f 0e00 	mov.w	lr, #0
   c3b6e:	f1dc 0c00 	rsbs	ip, ip, #0
   c3b72:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3b76:	eb6e 0101 	sbc.w	r1, lr, r1
   c3b7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3b7e:	d31b      	bcc.n	c3bb8 <__adddf3+0x124>
   c3b80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3b84:	d30c      	bcc.n	c3ba0 <__adddf3+0x10c>
   c3b86:	0849      	lsrs	r1, r1, #1
   c3b88:	ea5f 0030 	movs.w	r0, r0, rrx
   c3b8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3b90:	f104 0401 	add.w	r4, r4, #1
   c3b94:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3b98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3b9c:	f080 809a 	bcs.w	c3cd4 <__adddf3+0x240>
   c3ba0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3ba4:	bf08      	it	eq
   c3ba6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3baa:	f150 0000 	adcs.w	r0, r0, #0
   c3bae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3bb2:	ea41 0105 	orr.w	r1, r1, r5
   c3bb6:	bd30      	pop	{r4, r5, pc}
   c3bb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3bbc:	4140      	adcs	r0, r0
   c3bbe:	eb41 0101 	adc.w	r1, r1, r1
   c3bc2:	3c01      	subs	r4, #1
   c3bc4:	bf28      	it	cs
   c3bc6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3bca:	d2e9      	bcs.n	c3ba0 <__adddf3+0x10c>
   c3bcc:	f091 0f00 	teq	r1, #0
   c3bd0:	bf04      	itt	eq
   c3bd2:	4601      	moveq	r1, r0
   c3bd4:	2000      	moveq	r0, #0
   c3bd6:	fab1 f381 	clz	r3, r1
   c3bda:	bf08      	it	eq
   c3bdc:	3320      	addeq	r3, #32
   c3bde:	f1a3 030b 	sub.w	r3, r3, #11
   c3be2:	f1b3 0220 	subs.w	r2, r3, #32
   c3be6:	da0c      	bge.n	c3c02 <__adddf3+0x16e>
   c3be8:	320c      	adds	r2, #12
   c3bea:	dd08      	ble.n	c3bfe <__adddf3+0x16a>
   c3bec:	f102 0c14 	add.w	ip, r2, #20
   c3bf0:	f1c2 020c 	rsb	r2, r2, #12
   c3bf4:	fa01 f00c 	lsl.w	r0, r1, ip
   c3bf8:	fa21 f102 	lsr.w	r1, r1, r2
   c3bfc:	e00c      	b.n	c3c18 <__adddf3+0x184>
   c3bfe:	f102 0214 	add.w	r2, r2, #20
   c3c02:	bfd8      	it	le
   c3c04:	f1c2 0c20 	rsble	ip, r2, #32
   c3c08:	fa01 f102 	lsl.w	r1, r1, r2
   c3c0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3c10:	bfdc      	itt	le
   c3c12:	ea41 010c 	orrle.w	r1, r1, ip
   c3c16:	4090      	lslle	r0, r2
   c3c18:	1ae4      	subs	r4, r4, r3
   c3c1a:	bfa2      	ittt	ge
   c3c1c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3c20:	4329      	orrge	r1, r5
   c3c22:	bd30      	popge	{r4, r5, pc}
   c3c24:	ea6f 0404 	mvn.w	r4, r4
   c3c28:	3c1f      	subs	r4, #31
   c3c2a:	da1c      	bge.n	c3c66 <__adddf3+0x1d2>
   c3c2c:	340c      	adds	r4, #12
   c3c2e:	dc0e      	bgt.n	c3c4e <__adddf3+0x1ba>
   c3c30:	f104 0414 	add.w	r4, r4, #20
   c3c34:	f1c4 0220 	rsb	r2, r4, #32
   c3c38:	fa20 f004 	lsr.w	r0, r0, r4
   c3c3c:	fa01 f302 	lsl.w	r3, r1, r2
   c3c40:	ea40 0003 	orr.w	r0, r0, r3
   c3c44:	fa21 f304 	lsr.w	r3, r1, r4
   c3c48:	ea45 0103 	orr.w	r1, r5, r3
   c3c4c:	bd30      	pop	{r4, r5, pc}
   c3c4e:	f1c4 040c 	rsb	r4, r4, #12
   c3c52:	f1c4 0220 	rsb	r2, r4, #32
   c3c56:	fa20 f002 	lsr.w	r0, r0, r2
   c3c5a:	fa01 f304 	lsl.w	r3, r1, r4
   c3c5e:	ea40 0003 	orr.w	r0, r0, r3
   c3c62:	4629      	mov	r1, r5
   c3c64:	bd30      	pop	{r4, r5, pc}
   c3c66:	fa21 f004 	lsr.w	r0, r1, r4
   c3c6a:	4629      	mov	r1, r5
   c3c6c:	bd30      	pop	{r4, r5, pc}
   c3c6e:	f094 0f00 	teq	r4, #0
   c3c72:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3c76:	bf06      	itte	eq
   c3c78:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3c7c:	3401      	addeq	r4, #1
   c3c7e:	3d01      	subne	r5, #1
   c3c80:	e74e      	b.n	c3b20 <__adddf3+0x8c>
   c3c82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3c86:	bf18      	it	ne
   c3c88:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3c8c:	d029      	beq.n	c3ce2 <__adddf3+0x24e>
   c3c8e:	ea94 0f05 	teq	r4, r5
   c3c92:	bf08      	it	eq
   c3c94:	ea90 0f02 	teqeq	r0, r2
   c3c98:	d005      	beq.n	c3ca6 <__adddf3+0x212>
   c3c9a:	ea54 0c00 	orrs.w	ip, r4, r0
   c3c9e:	bf04      	itt	eq
   c3ca0:	4619      	moveq	r1, r3
   c3ca2:	4610      	moveq	r0, r2
   c3ca4:	bd30      	pop	{r4, r5, pc}
   c3ca6:	ea91 0f03 	teq	r1, r3
   c3caa:	bf1e      	ittt	ne
   c3cac:	2100      	movne	r1, #0
   c3cae:	2000      	movne	r0, #0
   c3cb0:	bd30      	popne	{r4, r5, pc}
   c3cb2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3cb6:	d105      	bne.n	c3cc4 <__adddf3+0x230>
   c3cb8:	0040      	lsls	r0, r0, #1
   c3cba:	4149      	adcs	r1, r1
   c3cbc:	bf28      	it	cs
   c3cbe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3cc2:	bd30      	pop	{r4, r5, pc}
   c3cc4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3cc8:	bf3c      	itt	cc
   c3cca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3cce:	bd30      	popcc	{r4, r5, pc}
   c3cd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3cd4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3cd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3cdc:	f04f 0000 	mov.w	r0, #0
   c3ce0:	bd30      	pop	{r4, r5, pc}
   c3ce2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3ce6:	bf1a      	itte	ne
   c3ce8:	4619      	movne	r1, r3
   c3cea:	4610      	movne	r0, r2
   c3cec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3cf0:	bf1c      	itt	ne
   c3cf2:	460b      	movne	r3, r1
   c3cf4:	4602      	movne	r2, r0
   c3cf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3cfa:	bf06      	itte	eq
   c3cfc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3d00:	ea91 0f03 	teqeq	r1, r3
   c3d04:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3d08:	bd30      	pop	{r4, r5, pc}
   c3d0a:	bf00      	nop

000c3d0c <__aeabi_ui2d>:
   c3d0c:	f090 0f00 	teq	r0, #0
   c3d10:	bf04      	itt	eq
   c3d12:	2100      	moveq	r1, #0
   c3d14:	4770      	bxeq	lr
   c3d16:	b530      	push	{r4, r5, lr}
   c3d18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3d1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3d20:	f04f 0500 	mov.w	r5, #0
   c3d24:	f04f 0100 	mov.w	r1, #0
   c3d28:	e750      	b.n	c3bcc <__adddf3+0x138>
   c3d2a:	bf00      	nop

000c3d2c <__aeabi_i2d>:
   c3d2c:	f090 0f00 	teq	r0, #0
   c3d30:	bf04      	itt	eq
   c3d32:	2100      	moveq	r1, #0
   c3d34:	4770      	bxeq	lr
   c3d36:	b530      	push	{r4, r5, lr}
   c3d38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3d3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3d40:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3d44:	bf48      	it	mi
   c3d46:	4240      	negmi	r0, r0
   c3d48:	f04f 0100 	mov.w	r1, #0
   c3d4c:	e73e      	b.n	c3bcc <__adddf3+0x138>
   c3d4e:	bf00      	nop

000c3d50 <__aeabi_f2d>:
   c3d50:	0042      	lsls	r2, r0, #1
   c3d52:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3d56:	ea4f 0131 	mov.w	r1, r1, rrx
   c3d5a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3d5e:	bf1f      	itttt	ne
   c3d60:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3d64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3d68:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3d6c:	4770      	bxne	lr
   c3d6e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3d72:	bf08      	it	eq
   c3d74:	4770      	bxeq	lr
   c3d76:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3d7a:	bf04      	itt	eq
   c3d7c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3d80:	4770      	bxeq	lr
   c3d82:	b530      	push	{r4, r5, lr}
   c3d84:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3d8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3d90:	e71c      	b.n	c3bcc <__adddf3+0x138>
   c3d92:	bf00      	nop

000c3d94 <__aeabi_ul2d>:
   c3d94:	ea50 0201 	orrs.w	r2, r0, r1
   c3d98:	bf08      	it	eq
   c3d9a:	4770      	bxeq	lr
   c3d9c:	b530      	push	{r4, r5, lr}
   c3d9e:	f04f 0500 	mov.w	r5, #0
   c3da2:	e00a      	b.n	c3dba <__aeabi_l2d+0x16>

000c3da4 <__aeabi_l2d>:
   c3da4:	ea50 0201 	orrs.w	r2, r0, r1
   c3da8:	bf08      	it	eq
   c3daa:	4770      	bxeq	lr
   c3dac:	b530      	push	{r4, r5, lr}
   c3dae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3db2:	d502      	bpl.n	c3dba <__aeabi_l2d+0x16>
   c3db4:	4240      	negs	r0, r0
   c3db6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3dba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3dbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3dc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3dc6:	f43f aed8 	beq.w	c3b7a <__adddf3+0xe6>
   c3dca:	f04f 0203 	mov.w	r2, #3
   c3dce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3dd2:	bf18      	it	ne
   c3dd4:	3203      	addne	r2, #3
   c3dd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3dda:	bf18      	it	ne
   c3ddc:	3203      	addne	r2, #3
   c3dde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3de2:	f1c2 0320 	rsb	r3, r2, #32
   c3de6:	fa00 fc03 	lsl.w	ip, r0, r3
   c3dea:	fa20 f002 	lsr.w	r0, r0, r2
   c3dee:	fa01 fe03 	lsl.w	lr, r1, r3
   c3df2:	ea40 000e 	orr.w	r0, r0, lr
   c3df6:	fa21 f102 	lsr.w	r1, r1, r2
   c3dfa:	4414      	add	r4, r2
   c3dfc:	e6bd      	b.n	c3b7a <__adddf3+0xe6>
   c3dfe:	bf00      	nop

000c3e00 <__aeabi_dmul>:
   c3e00:	b570      	push	{r4, r5, r6, lr}
   c3e02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3e06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3e0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3e0e:	bf1d      	ittte	ne
   c3e10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3e14:	ea94 0f0c 	teqne	r4, ip
   c3e18:	ea95 0f0c 	teqne	r5, ip
   c3e1c:	f000 f8de 	bleq	c3fdc <__aeabi_dmul+0x1dc>
   c3e20:	442c      	add	r4, r5
   c3e22:	ea81 0603 	eor.w	r6, r1, r3
   c3e26:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3e2a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3e2e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3e32:	bf18      	it	ne
   c3e34:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3e38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3e40:	d038      	beq.n	c3eb4 <__aeabi_dmul+0xb4>
   c3e42:	fba0 ce02 	umull	ip, lr, r0, r2
   c3e46:	f04f 0500 	mov.w	r5, #0
   c3e4a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3e4e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3e52:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3e56:	f04f 0600 	mov.w	r6, #0
   c3e5a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3e5e:	f09c 0f00 	teq	ip, #0
   c3e62:	bf18      	it	ne
   c3e64:	f04e 0e01 	orrne.w	lr, lr, #1
   c3e68:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3e6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3e70:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3e74:	d204      	bcs.n	c3e80 <__aeabi_dmul+0x80>
   c3e76:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3e7a:	416d      	adcs	r5, r5
   c3e7c:	eb46 0606 	adc.w	r6, r6, r6
   c3e80:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3e84:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3e88:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3e8c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3e90:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3e94:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3e98:	bf88      	it	hi
   c3e9a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3e9e:	d81e      	bhi.n	c3ede <__aeabi_dmul+0xde>
   c3ea0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3ea4:	bf08      	it	eq
   c3ea6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3eaa:	f150 0000 	adcs.w	r0, r0, #0
   c3eae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3eb2:	bd70      	pop	{r4, r5, r6, pc}
   c3eb4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3eb8:	ea46 0101 	orr.w	r1, r6, r1
   c3ebc:	ea40 0002 	orr.w	r0, r0, r2
   c3ec0:	ea81 0103 	eor.w	r1, r1, r3
   c3ec4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3ec8:	bfc2      	ittt	gt
   c3eca:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3ece:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3ed2:	bd70      	popgt	{r4, r5, r6, pc}
   c3ed4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3ed8:	f04f 0e00 	mov.w	lr, #0
   c3edc:	3c01      	subs	r4, #1
   c3ede:	f300 80ab 	bgt.w	c4038 <__aeabi_dmul+0x238>
   c3ee2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c3ee6:	bfde      	ittt	le
   c3ee8:	2000      	movle	r0, #0
   c3eea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3eee:	bd70      	pople	{r4, r5, r6, pc}
   c3ef0:	f1c4 0400 	rsb	r4, r4, #0
   c3ef4:	3c20      	subs	r4, #32
   c3ef6:	da35      	bge.n	c3f64 <__aeabi_dmul+0x164>
   c3ef8:	340c      	adds	r4, #12
   c3efa:	dc1b      	bgt.n	c3f34 <__aeabi_dmul+0x134>
   c3efc:	f104 0414 	add.w	r4, r4, #20
   c3f00:	f1c4 0520 	rsb	r5, r4, #32
   c3f04:	fa00 f305 	lsl.w	r3, r0, r5
   c3f08:	fa20 f004 	lsr.w	r0, r0, r4
   c3f0c:	fa01 f205 	lsl.w	r2, r1, r5
   c3f10:	ea40 0002 	orr.w	r0, r0, r2
   c3f14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3f1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3f20:	fa21 f604 	lsr.w	r6, r1, r4
   c3f24:	eb42 0106 	adc.w	r1, r2, r6
   c3f28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3f2c:	bf08      	it	eq
   c3f2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3f32:	bd70      	pop	{r4, r5, r6, pc}
   c3f34:	f1c4 040c 	rsb	r4, r4, #12
   c3f38:	f1c4 0520 	rsb	r5, r4, #32
   c3f3c:	fa00 f304 	lsl.w	r3, r0, r4
   c3f40:	fa20 f005 	lsr.w	r0, r0, r5
   c3f44:	fa01 f204 	lsl.w	r2, r1, r4
   c3f48:	ea40 0002 	orr.w	r0, r0, r2
   c3f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3f50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3f54:	f141 0100 	adc.w	r1, r1, #0
   c3f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3f5c:	bf08      	it	eq
   c3f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3f62:	bd70      	pop	{r4, r5, r6, pc}
   c3f64:	f1c4 0520 	rsb	r5, r4, #32
   c3f68:	fa00 f205 	lsl.w	r2, r0, r5
   c3f6c:	ea4e 0e02 	orr.w	lr, lr, r2
   c3f70:	fa20 f304 	lsr.w	r3, r0, r4
   c3f74:	fa01 f205 	lsl.w	r2, r1, r5
   c3f78:	ea43 0302 	orr.w	r3, r3, r2
   c3f7c:	fa21 f004 	lsr.w	r0, r1, r4
   c3f80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3f84:	fa21 f204 	lsr.w	r2, r1, r4
   c3f88:	ea20 0002 	bic.w	r0, r0, r2
   c3f8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c3f90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3f94:	bf08      	it	eq
   c3f96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3f9a:	bd70      	pop	{r4, r5, r6, pc}
   c3f9c:	f094 0f00 	teq	r4, #0
   c3fa0:	d10f      	bne.n	c3fc2 <__aeabi_dmul+0x1c2>
   c3fa2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c3fa6:	0040      	lsls	r0, r0, #1
   c3fa8:	eb41 0101 	adc.w	r1, r1, r1
   c3fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3fb0:	bf08      	it	eq
   c3fb2:	3c01      	subeq	r4, #1
   c3fb4:	d0f7      	beq.n	c3fa6 <__aeabi_dmul+0x1a6>
   c3fb6:	ea41 0106 	orr.w	r1, r1, r6
   c3fba:	f095 0f00 	teq	r5, #0
   c3fbe:	bf18      	it	ne
   c3fc0:	4770      	bxne	lr
   c3fc2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c3fc6:	0052      	lsls	r2, r2, #1
   c3fc8:	eb43 0303 	adc.w	r3, r3, r3
   c3fcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3fd0:	bf08      	it	eq
   c3fd2:	3d01      	subeq	r5, #1
   c3fd4:	d0f7      	beq.n	c3fc6 <__aeabi_dmul+0x1c6>
   c3fd6:	ea43 0306 	orr.w	r3, r3, r6
   c3fda:	4770      	bx	lr
   c3fdc:	ea94 0f0c 	teq	r4, ip
   c3fe0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3fe4:	bf18      	it	ne
   c3fe6:	ea95 0f0c 	teqne	r5, ip
   c3fea:	d00c      	beq.n	c4006 <__aeabi_dmul+0x206>
   c3fec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c3ff0:	bf18      	it	ne
   c3ff2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c3ff6:	d1d1      	bne.n	c3f9c <__aeabi_dmul+0x19c>
   c3ff8:	ea81 0103 	eor.w	r1, r1, r3
   c3ffc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4000:	f04f 0000 	mov.w	r0, #0
   c4004:	bd70      	pop	{r4, r5, r6, pc}
   c4006:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c400a:	bf06      	itte	eq
   c400c:	4610      	moveq	r0, r2
   c400e:	4619      	moveq	r1, r3
   c4010:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4014:	d019      	beq.n	c404a <__aeabi_dmul+0x24a>
   c4016:	ea94 0f0c 	teq	r4, ip
   c401a:	d102      	bne.n	c4022 <__aeabi_dmul+0x222>
   c401c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c4020:	d113      	bne.n	c404a <__aeabi_dmul+0x24a>
   c4022:	ea95 0f0c 	teq	r5, ip
   c4026:	d105      	bne.n	c4034 <__aeabi_dmul+0x234>
   c4028:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c402c:	bf1c      	itt	ne
   c402e:	4610      	movne	r0, r2
   c4030:	4619      	movne	r1, r3
   c4032:	d10a      	bne.n	c404a <__aeabi_dmul+0x24a>
   c4034:	ea81 0103 	eor.w	r1, r1, r3
   c4038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c403c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c4044:	f04f 0000 	mov.w	r0, #0
   c4048:	bd70      	pop	{r4, r5, r6, pc}
   c404a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c404e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c4052:	bd70      	pop	{r4, r5, r6, pc}

000c4054 <__aeabi_ddiv>:
   c4054:	b570      	push	{r4, r5, r6, lr}
   c4056:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c405a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c405e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c4062:	bf1d      	ittte	ne
   c4064:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4068:	ea94 0f0c 	teqne	r4, ip
   c406c:	ea95 0f0c 	teqne	r5, ip
   c4070:	f000 f8a7 	bleq	c41c2 <__aeabi_ddiv+0x16e>
   c4074:	eba4 0405 	sub.w	r4, r4, r5
   c4078:	ea81 0e03 	eor.w	lr, r1, r3
   c407c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c4080:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c4084:	f000 8088 	beq.w	c4198 <__aeabi_ddiv+0x144>
   c4088:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c408c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c4090:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c4094:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c4098:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c409c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c40a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c40a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c40a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c40ac:	429d      	cmp	r5, r3
   c40ae:	bf08      	it	eq
   c40b0:	4296      	cmpeq	r6, r2
   c40b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c40b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c40ba:	d202      	bcs.n	c40c2 <__aeabi_ddiv+0x6e>
   c40bc:	085b      	lsrs	r3, r3, #1
   c40be:	ea4f 0232 	mov.w	r2, r2, rrx
   c40c2:	1ab6      	subs	r6, r6, r2
   c40c4:	eb65 0503 	sbc.w	r5, r5, r3
   c40c8:	085b      	lsrs	r3, r3, #1
   c40ca:	ea4f 0232 	mov.w	r2, r2, rrx
   c40ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c40d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c40d6:	ebb6 0e02 	subs.w	lr, r6, r2
   c40da:	eb75 0e03 	sbcs.w	lr, r5, r3
   c40de:	bf22      	ittt	cs
   c40e0:	1ab6      	subcs	r6, r6, r2
   c40e2:	4675      	movcs	r5, lr
   c40e4:	ea40 000c 	orrcs.w	r0, r0, ip
   c40e8:	085b      	lsrs	r3, r3, #1
   c40ea:	ea4f 0232 	mov.w	r2, r2, rrx
   c40ee:	ebb6 0e02 	subs.w	lr, r6, r2
   c40f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c40f6:	bf22      	ittt	cs
   c40f8:	1ab6      	subcs	r6, r6, r2
   c40fa:	4675      	movcs	r5, lr
   c40fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c4100:	085b      	lsrs	r3, r3, #1
   c4102:	ea4f 0232 	mov.w	r2, r2, rrx
   c4106:	ebb6 0e02 	subs.w	lr, r6, r2
   c410a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c410e:	bf22      	ittt	cs
   c4110:	1ab6      	subcs	r6, r6, r2
   c4112:	4675      	movcs	r5, lr
   c4114:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4118:	085b      	lsrs	r3, r3, #1
   c411a:	ea4f 0232 	mov.w	r2, r2, rrx
   c411e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4122:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4126:	bf22      	ittt	cs
   c4128:	1ab6      	subcs	r6, r6, r2
   c412a:	4675      	movcs	r5, lr
   c412c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4130:	ea55 0e06 	orrs.w	lr, r5, r6
   c4134:	d018      	beq.n	c4168 <__aeabi_ddiv+0x114>
   c4136:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c413a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c413e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c4142:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c4146:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c414a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c414e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4152:	d1c0      	bne.n	c40d6 <__aeabi_ddiv+0x82>
   c4154:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4158:	d10b      	bne.n	c4172 <__aeabi_ddiv+0x11e>
   c415a:	ea41 0100 	orr.w	r1, r1, r0
   c415e:	f04f 0000 	mov.w	r0, #0
   c4162:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c4166:	e7b6      	b.n	c40d6 <__aeabi_ddiv+0x82>
   c4168:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c416c:	bf04      	itt	eq
   c416e:	4301      	orreq	r1, r0
   c4170:	2000      	moveq	r0, #0
   c4172:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4176:	bf88      	it	hi
   c4178:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c417c:	f63f aeaf 	bhi.w	c3ede <__aeabi_dmul+0xde>
   c4180:	ebb5 0c03 	subs.w	ip, r5, r3
   c4184:	bf04      	itt	eq
   c4186:	ebb6 0c02 	subseq.w	ip, r6, r2
   c418a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c418e:	f150 0000 	adcs.w	r0, r0, #0
   c4192:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c4196:	bd70      	pop	{r4, r5, r6, pc}
   c4198:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c419c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c41a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c41a4:	bfc2      	ittt	gt
   c41a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c41aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c41ae:	bd70      	popgt	{r4, r5, r6, pc}
   c41b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c41b4:	f04f 0e00 	mov.w	lr, #0
   c41b8:	3c01      	subs	r4, #1
   c41ba:	e690      	b.n	c3ede <__aeabi_dmul+0xde>
   c41bc:	ea45 0e06 	orr.w	lr, r5, r6
   c41c0:	e68d      	b.n	c3ede <__aeabi_dmul+0xde>
   c41c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c41c6:	ea94 0f0c 	teq	r4, ip
   c41ca:	bf08      	it	eq
   c41cc:	ea95 0f0c 	teqeq	r5, ip
   c41d0:	f43f af3b 	beq.w	c404a <__aeabi_dmul+0x24a>
   c41d4:	ea94 0f0c 	teq	r4, ip
   c41d8:	d10a      	bne.n	c41f0 <__aeabi_ddiv+0x19c>
   c41da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c41de:	f47f af34 	bne.w	c404a <__aeabi_dmul+0x24a>
   c41e2:	ea95 0f0c 	teq	r5, ip
   c41e6:	f47f af25 	bne.w	c4034 <__aeabi_dmul+0x234>
   c41ea:	4610      	mov	r0, r2
   c41ec:	4619      	mov	r1, r3
   c41ee:	e72c      	b.n	c404a <__aeabi_dmul+0x24a>
   c41f0:	ea95 0f0c 	teq	r5, ip
   c41f4:	d106      	bne.n	c4204 <__aeabi_ddiv+0x1b0>
   c41f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c41fa:	f43f aefd 	beq.w	c3ff8 <__aeabi_dmul+0x1f8>
   c41fe:	4610      	mov	r0, r2
   c4200:	4619      	mov	r1, r3
   c4202:	e722      	b.n	c404a <__aeabi_dmul+0x24a>
   c4204:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4208:	bf18      	it	ne
   c420a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c420e:	f47f aec5 	bne.w	c3f9c <__aeabi_dmul+0x19c>
   c4212:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c4216:	f47f af0d 	bne.w	c4034 <__aeabi_dmul+0x234>
   c421a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c421e:	f47f aeeb 	bne.w	c3ff8 <__aeabi_dmul+0x1f8>
   c4222:	e712      	b.n	c404a <__aeabi_dmul+0x24a>

000c4224 <__gedf2>:
   c4224:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c4228:	e006      	b.n	c4238 <__cmpdf2+0x4>
   c422a:	bf00      	nop

000c422c <__ledf2>:
   c422c:	f04f 0c01 	mov.w	ip, #1
   c4230:	e002      	b.n	c4238 <__cmpdf2+0x4>
   c4232:	bf00      	nop

000c4234 <__cmpdf2>:
   c4234:	f04f 0c01 	mov.w	ip, #1
   c4238:	f84d cd04 	str.w	ip, [sp, #-4]!
   c423c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4244:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4248:	bf18      	it	ne
   c424a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c424e:	d01b      	beq.n	c4288 <__cmpdf2+0x54>
   c4250:	b001      	add	sp, #4
   c4252:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c4256:	bf0c      	ite	eq
   c4258:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c425c:	ea91 0f03 	teqne	r1, r3
   c4260:	bf02      	ittt	eq
   c4262:	ea90 0f02 	teqeq	r0, r2
   c4266:	2000      	moveq	r0, #0
   c4268:	4770      	bxeq	lr
   c426a:	f110 0f00 	cmn.w	r0, #0
   c426e:	ea91 0f03 	teq	r1, r3
   c4272:	bf58      	it	pl
   c4274:	4299      	cmppl	r1, r3
   c4276:	bf08      	it	eq
   c4278:	4290      	cmpeq	r0, r2
   c427a:	bf2c      	ite	cs
   c427c:	17d8      	asrcs	r0, r3, #31
   c427e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c4282:	f040 0001 	orr.w	r0, r0, #1
   c4286:	4770      	bx	lr
   c4288:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c428c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4290:	d102      	bne.n	c4298 <__cmpdf2+0x64>
   c4292:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4296:	d107      	bne.n	c42a8 <__cmpdf2+0x74>
   c4298:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c429c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c42a0:	d1d6      	bne.n	c4250 <__cmpdf2+0x1c>
   c42a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c42a6:	d0d3      	beq.n	c4250 <__cmpdf2+0x1c>
   c42a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c42ac:	4770      	bx	lr
   c42ae:	bf00      	nop

000c42b0 <__aeabi_cdrcmple>:
   c42b0:	4684      	mov	ip, r0
   c42b2:	4610      	mov	r0, r2
   c42b4:	4662      	mov	r2, ip
   c42b6:	468c      	mov	ip, r1
   c42b8:	4619      	mov	r1, r3
   c42ba:	4663      	mov	r3, ip
   c42bc:	e000      	b.n	c42c0 <__aeabi_cdcmpeq>
   c42be:	bf00      	nop

000c42c0 <__aeabi_cdcmpeq>:
   c42c0:	b501      	push	{r0, lr}
   c42c2:	f7ff ffb7 	bl	c4234 <__cmpdf2>
   c42c6:	2800      	cmp	r0, #0
   c42c8:	bf48      	it	mi
   c42ca:	f110 0f00 	cmnmi.w	r0, #0
   c42ce:	bd01      	pop	{r0, pc}

000c42d0 <__aeabi_dcmpeq>:
   c42d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c42d4:	f7ff fff4 	bl	c42c0 <__aeabi_cdcmpeq>
   c42d8:	bf0c      	ite	eq
   c42da:	2001      	moveq	r0, #1
   c42dc:	2000      	movne	r0, #0
   c42de:	f85d fb08 	ldr.w	pc, [sp], #8
   c42e2:	bf00      	nop

000c42e4 <__aeabi_dcmplt>:
   c42e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c42e8:	f7ff ffea 	bl	c42c0 <__aeabi_cdcmpeq>
   c42ec:	bf34      	ite	cc
   c42ee:	2001      	movcc	r0, #1
   c42f0:	2000      	movcs	r0, #0
   c42f2:	f85d fb08 	ldr.w	pc, [sp], #8
   c42f6:	bf00      	nop

000c42f8 <__aeabi_dcmple>:
   c42f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c42fc:	f7ff ffe0 	bl	c42c0 <__aeabi_cdcmpeq>
   c4300:	bf94      	ite	ls
   c4302:	2001      	movls	r0, #1
   c4304:	2000      	movhi	r0, #0
   c4306:	f85d fb08 	ldr.w	pc, [sp], #8
   c430a:	bf00      	nop

000c430c <__aeabi_dcmpge>:
   c430c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4310:	f7ff ffce 	bl	c42b0 <__aeabi_cdrcmple>
   c4314:	bf94      	ite	ls
   c4316:	2001      	movls	r0, #1
   c4318:	2000      	movhi	r0, #0
   c431a:	f85d fb08 	ldr.w	pc, [sp], #8
   c431e:	bf00      	nop

000c4320 <__aeabi_dcmpgt>:
   c4320:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4324:	f7ff ffc4 	bl	c42b0 <__aeabi_cdrcmple>
   c4328:	bf34      	ite	cc
   c432a:	2001      	movcc	r0, #1
   c432c:	2000      	movcs	r0, #0
   c432e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4332:	bf00      	nop

000c4334 <__aeabi_dcmpun>:
   c4334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c433c:	d102      	bne.n	c4344 <__aeabi_dcmpun+0x10>
   c433e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4342:	d10a      	bne.n	c435a <__aeabi_dcmpun+0x26>
   c4344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c434c:	d102      	bne.n	c4354 <__aeabi_dcmpun+0x20>
   c434e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4352:	d102      	bne.n	c435a <__aeabi_dcmpun+0x26>
   c4354:	f04f 0000 	mov.w	r0, #0
   c4358:	4770      	bx	lr
   c435a:	f04f 0001 	mov.w	r0, #1
   c435e:	4770      	bx	lr

000c4360 <__aeabi_d2iz>:
   c4360:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4364:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4368:	d215      	bcs.n	c4396 <__aeabi_d2iz+0x36>
   c436a:	d511      	bpl.n	c4390 <__aeabi_d2iz+0x30>
   c436c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4370:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4374:	d912      	bls.n	c439c <__aeabi_d2iz+0x3c>
   c4376:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c437a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c437e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4382:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c4386:	fa23 f002 	lsr.w	r0, r3, r2
   c438a:	bf18      	it	ne
   c438c:	4240      	negne	r0, r0
   c438e:	4770      	bx	lr
   c4390:	f04f 0000 	mov.w	r0, #0
   c4394:	4770      	bx	lr
   c4396:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c439a:	d105      	bne.n	c43a8 <__aeabi_d2iz+0x48>
   c439c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c43a0:	bf08      	it	eq
   c43a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c43a6:	4770      	bx	lr
   c43a8:	f04f 0000 	mov.w	r0, #0
   c43ac:	4770      	bx	lr
   c43ae:	bf00      	nop

000c43b0 <__aeabi_d2uiz>:
   c43b0:	004a      	lsls	r2, r1, #1
   c43b2:	d211      	bcs.n	c43d8 <__aeabi_d2uiz+0x28>
   c43b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c43b8:	d211      	bcs.n	c43de <__aeabi_d2uiz+0x2e>
   c43ba:	d50d      	bpl.n	c43d8 <__aeabi_d2uiz+0x28>
   c43bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c43c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c43c4:	d40e      	bmi.n	c43e4 <__aeabi_d2uiz+0x34>
   c43c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c43ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c43ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c43d2:	fa23 f002 	lsr.w	r0, r3, r2
   c43d6:	4770      	bx	lr
   c43d8:	f04f 0000 	mov.w	r0, #0
   c43dc:	4770      	bx	lr
   c43de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c43e2:	d102      	bne.n	c43ea <__aeabi_d2uiz+0x3a>
   c43e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c43e8:	4770      	bx	lr
   c43ea:	f04f 0000 	mov.w	r0, #0
   c43ee:	4770      	bx	lr

000c43f0 <__aeabi_d2f>:
   c43f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c43f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c43f8:	bf24      	itt	cs
   c43fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c43fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c4402:	d90d      	bls.n	c4420 <__aeabi_d2f+0x30>
   c4404:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c4408:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c440c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4410:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c4414:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4418:	bf08      	it	eq
   c441a:	f020 0001 	biceq.w	r0, r0, #1
   c441e:	4770      	bx	lr
   c4420:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c4424:	d121      	bne.n	c446a <__aeabi_d2f+0x7a>
   c4426:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c442a:	bfbc      	itt	lt
   c442c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4430:	4770      	bxlt	lr
   c4432:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4436:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c443a:	f1c2 0218 	rsb	r2, r2, #24
   c443e:	f1c2 0c20 	rsb	ip, r2, #32
   c4442:	fa10 f30c 	lsls.w	r3, r0, ip
   c4446:	fa20 f002 	lsr.w	r0, r0, r2
   c444a:	bf18      	it	ne
   c444c:	f040 0001 	orrne.w	r0, r0, #1
   c4450:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c4454:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4458:	fa03 fc0c 	lsl.w	ip, r3, ip
   c445c:	ea40 000c 	orr.w	r0, r0, ip
   c4460:	fa23 f302 	lsr.w	r3, r3, r2
   c4464:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c4468:	e7cc      	b.n	c4404 <__aeabi_d2f+0x14>
   c446a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c446e:	d107      	bne.n	c4480 <__aeabi_d2f+0x90>
   c4470:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c4474:	bf1e      	ittt	ne
   c4476:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c447a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c447e:	4770      	bxne	lr
   c4480:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c4484:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c4488:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c448c:	4770      	bx	lr
   c448e:	bf00      	nop

000c4490 <__aeabi_d2ulz>:
   c4490:	b5d0      	push	{r4, r6, r7, lr}
   c4492:	4b0c      	ldr	r3, [pc, #48]	; (c44c4 <__aeabi_d2ulz+0x34>)
   c4494:	2200      	movs	r2, #0
   c4496:	4606      	mov	r6, r0
   c4498:	460f      	mov	r7, r1
   c449a:	f7ff fcb1 	bl	c3e00 <__aeabi_dmul>
   c449e:	f7ff ff87 	bl	c43b0 <__aeabi_d2uiz>
   c44a2:	4604      	mov	r4, r0
   c44a4:	f7ff fc32 	bl	c3d0c <__aeabi_ui2d>
   c44a8:	4b07      	ldr	r3, [pc, #28]	; (c44c8 <__aeabi_d2ulz+0x38>)
   c44aa:	2200      	movs	r2, #0
   c44ac:	f7ff fca8 	bl	c3e00 <__aeabi_dmul>
   c44b0:	4602      	mov	r2, r0
   c44b2:	460b      	mov	r3, r1
   c44b4:	4630      	mov	r0, r6
   c44b6:	4639      	mov	r1, r7
   c44b8:	f7ff faea 	bl	c3a90 <__aeabi_dsub>
   c44bc:	f7ff ff78 	bl	c43b0 <__aeabi_d2uiz>
   c44c0:	4621      	mov	r1, r4
   c44c2:	bdd0      	pop	{r4, r6, r7, pc}
   c44c4:	3df00000 	.word	0x3df00000
   c44c8:	41f00000 	.word	0x41f00000

000c44cc <atexit>:
   c44cc:	2300      	movs	r3, #0
   c44ce:	4601      	mov	r1, r0
   c44d0:	461a      	mov	r2, r3
   c44d2:	4618      	mov	r0, r3
   c44d4:	f001 b806 	b.w	c54e4 <__register_exitproc>

000c44d8 <atof>:
   c44d8:	2100      	movs	r1, #0
   c44da:	f000 bf6b 	b.w	c53b4 <strtod>

000c44de <atoi>:
   c44de:	220a      	movs	r2, #10
   c44e0:	2100      	movs	r1, #0
   c44e2:	f000 bff5 	b.w	c54d0 <strtol>
	...

000c44e8 <isprint>:
   c44e8:	4b02      	ldr	r3, [pc, #8]	; (c44f4 <isprint+0xc>)
   c44ea:	4418      	add	r0, r3
   c44ec:	7840      	ldrb	r0, [r0, #1]
   c44ee:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c44f2:	4770      	bx	lr
   c44f4:	000c86a8 	.word	0x000c86a8

000c44f8 <memcmp>:
   c44f8:	b510      	push	{r4, lr}
   c44fa:	3901      	subs	r1, #1
   c44fc:	4402      	add	r2, r0
   c44fe:	4290      	cmp	r0, r2
   c4500:	d101      	bne.n	c4506 <memcmp+0xe>
   c4502:	2000      	movs	r0, #0
   c4504:	e005      	b.n	c4512 <memcmp+0x1a>
   c4506:	7803      	ldrb	r3, [r0, #0]
   c4508:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c450c:	42a3      	cmp	r3, r4
   c450e:	d001      	beq.n	c4514 <memcmp+0x1c>
   c4510:	1b18      	subs	r0, r3, r4
   c4512:	bd10      	pop	{r4, pc}
   c4514:	3001      	adds	r0, #1
   c4516:	e7f2      	b.n	c44fe <memcmp+0x6>

000c4518 <memcpy>:
   c4518:	440a      	add	r2, r1
   c451a:	4291      	cmp	r1, r2
   c451c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c4520:	d100      	bne.n	c4524 <memcpy+0xc>
   c4522:	4770      	bx	lr
   c4524:	b510      	push	{r4, lr}
   c4526:	f811 4b01 	ldrb.w	r4, [r1], #1
   c452a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c452e:	4291      	cmp	r1, r2
   c4530:	d1f9      	bne.n	c4526 <memcpy+0xe>
   c4532:	bd10      	pop	{r4, pc}

000c4534 <memmove>:
   c4534:	4288      	cmp	r0, r1
   c4536:	b510      	push	{r4, lr}
   c4538:	eb01 0402 	add.w	r4, r1, r2
   c453c:	d902      	bls.n	c4544 <memmove+0x10>
   c453e:	4284      	cmp	r4, r0
   c4540:	4623      	mov	r3, r4
   c4542:	d807      	bhi.n	c4554 <memmove+0x20>
   c4544:	1e43      	subs	r3, r0, #1
   c4546:	42a1      	cmp	r1, r4
   c4548:	d008      	beq.n	c455c <memmove+0x28>
   c454a:	f811 2b01 	ldrb.w	r2, [r1], #1
   c454e:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4552:	e7f8      	b.n	c4546 <memmove+0x12>
   c4554:	4402      	add	r2, r0
   c4556:	4601      	mov	r1, r0
   c4558:	428a      	cmp	r2, r1
   c455a:	d100      	bne.n	c455e <memmove+0x2a>
   c455c:	bd10      	pop	{r4, pc}
   c455e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c4562:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c4566:	e7f7      	b.n	c4558 <memmove+0x24>

000c4568 <memset>:
   c4568:	4402      	add	r2, r0
   c456a:	4603      	mov	r3, r0
   c456c:	4293      	cmp	r3, r2
   c456e:	d100      	bne.n	c4572 <memset+0xa>
   c4570:	4770      	bx	lr
   c4572:	f803 1b01 	strb.w	r1, [r3], #1
   c4576:	e7f9      	b.n	c456c <memset+0x4>

000c4578 <srand>:
   c4578:	b538      	push	{r3, r4, r5, lr}
   c457a:	4b10      	ldr	r3, [pc, #64]	; (c45bc <srand+0x44>)
   c457c:	681d      	ldr	r5, [r3, #0]
   c457e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4580:	4604      	mov	r4, r0
   c4582:	b9b3      	cbnz	r3, c45b2 <srand+0x3a>
   c4584:	2018      	movs	r0, #24
   c4586:	f7f9 fe77 	bl	be278 <malloc>
   c458a:	4602      	mov	r2, r0
   c458c:	63a8      	str	r0, [r5, #56]	; 0x38
   c458e:	b920      	cbnz	r0, c459a <srand+0x22>
   c4590:	4b0b      	ldr	r3, [pc, #44]	; (c45c0 <srand+0x48>)
   c4592:	480c      	ldr	r0, [pc, #48]	; (c45c4 <srand+0x4c>)
   c4594:	2142      	movs	r1, #66	; 0x42
   c4596:	f7f9 febf 	bl	be318 <__assert_func>
   c459a:	490b      	ldr	r1, [pc, #44]	; (c45c8 <srand+0x50>)
   c459c:	4b0b      	ldr	r3, [pc, #44]	; (c45cc <srand+0x54>)
   c459e:	e9c0 1300 	strd	r1, r3, [r0]
   c45a2:	4b0b      	ldr	r3, [pc, #44]	; (c45d0 <srand+0x58>)
   c45a4:	6083      	str	r3, [r0, #8]
   c45a6:	230b      	movs	r3, #11
   c45a8:	8183      	strh	r3, [r0, #12]
   c45aa:	2100      	movs	r1, #0
   c45ac:	2001      	movs	r0, #1
   c45ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c45b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c45b4:	2200      	movs	r2, #0
   c45b6:	611c      	str	r4, [r3, #16]
   c45b8:	615a      	str	r2, [r3, #20]
   c45ba:	bd38      	pop	{r3, r4, r5, pc}
   c45bc:	2003db48 	.word	0x2003db48
   c45c0:	000c85d8 	.word	0x000c85d8
   c45c4:	000c85ef 	.word	0x000c85ef
   c45c8:	abcd330e 	.word	0xabcd330e
   c45cc:	e66d1234 	.word	0xe66d1234
   c45d0:	0005deec 	.word	0x0005deec

000c45d4 <strcat>:
   c45d4:	b510      	push	{r4, lr}
   c45d6:	4602      	mov	r2, r0
   c45d8:	7814      	ldrb	r4, [r2, #0]
   c45da:	4613      	mov	r3, r2
   c45dc:	3201      	adds	r2, #1
   c45de:	2c00      	cmp	r4, #0
   c45e0:	d1fa      	bne.n	c45d8 <strcat+0x4>
   c45e2:	3b01      	subs	r3, #1
   c45e4:	f811 2b01 	ldrb.w	r2, [r1], #1
   c45e8:	f803 2f01 	strb.w	r2, [r3, #1]!
   c45ec:	2a00      	cmp	r2, #0
   c45ee:	d1f9      	bne.n	c45e4 <strcat+0x10>
   c45f0:	bd10      	pop	{r4, pc}

000c45f2 <strchr>:
   c45f2:	b2c9      	uxtb	r1, r1
   c45f4:	4603      	mov	r3, r0
   c45f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   c45fa:	b11a      	cbz	r2, c4604 <strchr+0x12>
   c45fc:	428a      	cmp	r2, r1
   c45fe:	d1f9      	bne.n	c45f4 <strchr+0x2>
   c4600:	4618      	mov	r0, r3
   c4602:	4770      	bx	lr
   c4604:	2900      	cmp	r1, #0
   c4606:	bf18      	it	ne
   c4608:	2300      	movne	r3, #0
   c460a:	e7f9      	b.n	c4600 <strchr+0xe>

000c460c <strchrnul>:
   c460c:	b510      	push	{r4, lr}
   c460e:	4604      	mov	r4, r0
   c4610:	f7ff ffef 	bl	c45f2 <strchr>
   c4614:	b918      	cbnz	r0, c461e <strchrnul+0x12>
   c4616:	4620      	mov	r0, r4
   c4618:	f000 f831 	bl	c467e <strlen>
   c461c:	4420      	add	r0, r4
   c461e:	bd10      	pop	{r4, pc}

000c4620 <strcmp>:
   c4620:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4624:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4628:	2a01      	cmp	r2, #1
   c462a:	bf28      	it	cs
   c462c:	429a      	cmpcs	r2, r3
   c462e:	d0f7      	beq.n	c4620 <strcmp>
   c4630:	1ad0      	subs	r0, r2, r3
   c4632:	4770      	bx	lr

000c4634 <strcpy>:
   c4634:	4603      	mov	r3, r0
   c4636:	f811 2b01 	ldrb.w	r2, [r1], #1
   c463a:	f803 2b01 	strb.w	r2, [r3], #1
   c463e:	2a00      	cmp	r2, #0
   c4640:	d1f9      	bne.n	c4636 <strcpy+0x2>
   c4642:	4770      	bx	lr

000c4644 <strdup>:
   c4644:	4b02      	ldr	r3, [pc, #8]	; (c4650 <strdup+0xc>)
   c4646:	4601      	mov	r1, r0
   c4648:	6818      	ldr	r0, [r3, #0]
   c464a:	f000 b803 	b.w	c4654 <_strdup_r>
   c464e:	bf00      	nop
   c4650:	2003db48 	.word	0x2003db48

000c4654 <_strdup_r>:
   c4654:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4656:	4604      	mov	r4, r0
   c4658:	4608      	mov	r0, r1
   c465a:	460d      	mov	r5, r1
   c465c:	f000 f80f 	bl	c467e <strlen>
   c4660:	1c42      	adds	r2, r0, #1
   c4662:	4611      	mov	r1, r2
   c4664:	4620      	mov	r0, r4
   c4666:	9201      	str	r2, [sp, #4]
   c4668:	f7f9 fe46 	bl	be2f8 <_malloc_r>
   c466c:	4604      	mov	r4, r0
   c466e:	b118      	cbz	r0, c4678 <_strdup_r+0x24>
   c4670:	9a01      	ldr	r2, [sp, #4]
   c4672:	4629      	mov	r1, r5
   c4674:	f7ff ff50 	bl	c4518 <memcpy>
   c4678:	4620      	mov	r0, r4
   c467a:	b003      	add	sp, #12
   c467c:	bd30      	pop	{r4, r5, pc}

000c467e <strlen>:
   c467e:	4603      	mov	r3, r0
   c4680:	f813 2b01 	ldrb.w	r2, [r3], #1
   c4684:	2a00      	cmp	r2, #0
   c4686:	d1fb      	bne.n	c4680 <strlen+0x2>
   c4688:	1a18      	subs	r0, r3, r0
   c468a:	3801      	subs	r0, #1
   c468c:	4770      	bx	lr
	...

000c4690 <strlwr>:
   c4690:	b510      	push	{r4, lr}
   c4692:	4c07      	ldr	r4, [pc, #28]	; (c46b0 <strlwr+0x20>)
   c4694:	1e42      	subs	r2, r0, #1
   c4696:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c469a:	b903      	cbnz	r3, c469e <strlwr+0xe>
   c469c:	bd10      	pop	{r4, pc}
   c469e:	5ce1      	ldrb	r1, [r4, r3]
   c46a0:	f001 0103 	and.w	r1, r1, #3
   c46a4:	2901      	cmp	r1, #1
   c46a6:	bf08      	it	eq
   c46a8:	3320      	addeq	r3, #32
   c46aa:	7013      	strb	r3, [r2, #0]
   c46ac:	e7f3      	b.n	c4696 <strlwr+0x6>
   c46ae:	bf00      	nop
   c46b0:	000c86a9 	.word	0x000c86a9

000c46b4 <strncmp>:
   c46b4:	b510      	push	{r4, lr}
   c46b6:	b17a      	cbz	r2, c46d8 <strncmp+0x24>
   c46b8:	4603      	mov	r3, r0
   c46ba:	3901      	subs	r1, #1
   c46bc:	1884      	adds	r4, r0, r2
   c46be:	f813 0b01 	ldrb.w	r0, [r3], #1
   c46c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c46c6:	4290      	cmp	r0, r2
   c46c8:	d101      	bne.n	c46ce <strncmp+0x1a>
   c46ca:	42a3      	cmp	r3, r4
   c46cc:	d101      	bne.n	c46d2 <strncmp+0x1e>
   c46ce:	1a80      	subs	r0, r0, r2
   c46d0:	bd10      	pop	{r4, pc}
   c46d2:	2800      	cmp	r0, #0
   c46d4:	d1f3      	bne.n	c46be <strncmp+0xa>
   c46d6:	e7fa      	b.n	c46ce <strncmp+0x1a>
   c46d8:	4610      	mov	r0, r2
   c46da:	e7f9      	b.n	c46d0 <strncmp+0x1c>

000c46dc <strncpy>:
   c46dc:	b510      	push	{r4, lr}
   c46de:	3901      	subs	r1, #1
   c46e0:	4603      	mov	r3, r0
   c46e2:	b132      	cbz	r2, c46f2 <strncpy+0x16>
   c46e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c46e8:	f803 4b01 	strb.w	r4, [r3], #1
   c46ec:	3a01      	subs	r2, #1
   c46ee:	2c00      	cmp	r4, #0
   c46f0:	d1f7      	bne.n	c46e2 <strncpy+0x6>
   c46f2:	441a      	add	r2, r3
   c46f4:	2100      	movs	r1, #0
   c46f6:	4293      	cmp	r3, r2
   c46f8:	d100      	bne.n	c46fc <strncpy+0x20>
   c46fa:	bd10      	pop	{r4, pc}
   c46fc:	f803 1b01 	strb.w	r1, [r3], #1
   c4700:	e7f9      	b.n	c46f6 <strncpy+0x1a>

000c4702 <strnlen>:
   c4702:	b510      	push	{r4, lr}
   c4704:	4602      	mov	r2, r0
   c4706:	4401      	add	r1, r0
   c4708:	428a      	cmp	r2, r1
   c470a:	4613      	mov	r3, r2
   c470c:	d003      	beq.n	c4716 <strnlen+0x14>
   c470e:	781c      	ldrb	r4, [r3, #0]
   c4710:	3201      	adds	r2, #1
   c4712:	2c00      	cmp	r4, #0
   c4714:	d1f8      	bne.n	c4708 <strnlen+0x6>
   c4716:	1a18      	subs	r0, r3, r0
   c4718:	bd10      	pop	{r4, pc}

000c471a <strrchr>:
   c471a:	b538      	push	{r3, r4, r5, lr}
   c471c:	4603      	mov	r3, r0
   c471e:	460c      	mov	r4, r1
   c4720:	b969      	cbnz	r1, c473e <strrchr+0x24>
   c4722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4726:	f7ff bf64 	b.w	c45f2 <strchr>
   c472a:	1c43      	adds	r3, r0, #1
   c472c:	4605      	mov	r5, r0
   c472e:	4621      	mov	r1, r4
   c4730:	4618      	mov	r0, r3
   c4732:	f7ff ff5e 	bl	c45f2 <strchr>
   c4736:	2800      	cmp	r0, #0
   c4738:	d1f7      	bne.n	c472a <strrchr+0x10>
   c473a:	4628      	mov	r0, r5
   c473c:	bd38      	pop	{r3, r4, r5, pc}
   c473e:	2500      	movs	r5, #0
   c4740:	e7f5      	b.n	c472e <strrchr+0x14>

000c4742 <strstr>:
   c4742:	780a      	ldrb	r2, [r1, #0]
   c4744:	b570      	push	{r4, r5, r6, lr}
   c4746:	b96a      	cbnz	r2, c4764 <strstr+0x22>
   c4748:	bd70      	pop	{r4, r5, r6, pc}
   c474a:	429a      	cmp	r2, r3
   c474c:	d109      	bne.n	c4762 <strstr+0x20>
   c474e:	460c      	mov	r4, r1
   c4750:	4605      	mov	r5, r0
   c4752:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c4756:	2b00      	cmp	r3, #0
   c4758:	d0f6      	beq.n	c4748 <strstr+0x6>
   c475a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c475e:	429e      	cmp	r6, r3
   c4760:	d0f7      	beq.n	c4752 <strstr+0x10>
   c4762:	3001      	adds	r0, #1
   c4764:	7803      	ldrb	r3, [r0, #0]
   c4766:	2b00      	cmp	r3, #0
   c4768:	d1ef      	bne.n	c474a <strstr+0x8>
   c476a:	4618      	mov	r0, r3
   c476c:	e7ec      	b.n	c4748 <strstr+0x6>

000c476e <sulp>:
   c476e:	b570      	push	{r4, r5, r6, lr}
   c4770:	4604      	mov	r4, r0
   c4772:	460d      	mov	r5, r1
   c4774:	ec45 4b10 	vmov	d0, r4, r5
   c4778:	4616      	mov	r6, r2
   c477a:	f001 fe0d 	bl	c6398 <__ulp>
   c477e:	ec51 0b10 	vmov	r0, r1, d0
   c4782:	b17e      	cbz	r6, c47a4 <sulp+0x36>
   c4784:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c4788:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c478c:	2b00      	cmp	r3, #0
   c478e:	dd09      	ble.n	c47a4 <sulp+0x36>
   c4790:	051b      	lsls	r3, r3, #20
   c4792:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c4796:	2400      	movs	r4, #0
   c4798:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c479c:	4622      	mov	r2, r4
   c479e:	462b      	mov	r3, r5
   c47a0:	f7ff fb2e 	bl	c3e00 <__aeabi_dmul>
   c47a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000c47a8 <_strtod_l>:
   c47a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c47ac:	ed2d 8b02 	vpush	{d8}
   c47b0:	b09d      	sub	sp, #116	; 0x74
   c47b2:	461f      	mov	r7, r3
   c47b4:	2300      	movs	r3, #0
   c47b6:	9318      	str	r3, [sp, #96]	; 0x60
   c47b8:	4ba2      	ldr	r3, [pc, #648]	; (c4a44 <_strtod_l+0x29c>)
   c47ba:	9213      	str	r2, [sp, #76]	; 0x4c
   c47bc:	681b      	ldr	r3, [r3, #0]
   c47be:	9305      	str	r3, [sp, #20]
   c47c0:	4604      	mov	r4, r0
   c47c2:	4618      	mov	r0, r3
   c47c4:	4688      	mov	r8, r1
   c47c6:	f7ff ff5a 	bl	c467e <strlen>
   c47ca:	f04f 0a00 	mov.w	sl, #0
   c47ce:	4605      	mov	r5, r0
   c47d0:	f04f 0b00 	mov.w	fp, #0
   c47d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c47d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47da:	781a      	ldrb	r2, [r3, #0]
   c47dc:	2a2b      	cmp	r2, #43	; 0x2b
   c47de:	d04e      	beq.n	c487e <_strtod_l+0xd6>
   c47e0:	d83b      	bhi.n	c485a <_strtod_l+0xb2>
   c47e2:	2a0d      	cmp	r2, #13
   c47e4:	d834      	bhi.n	c4850 <_strtod_l+0xa8>
   c47e6:	2a08      	cmp	r2, #8
   c47e8:	d834      	bhi.n	c4854 <_strtod_l+0xac>
   c47ea:	2a00      	cmp	r2, #0
   c47ec:	d03e      	beq.n	c486c <_strtod_l+0xc4>
   c47ee:	2300      	movs	r3, #0
   c47f0:	930a      	str	r3, [sp, #40]	; 0x28
   c47f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c47f4:	7833      	ldrb	r3, [r6, #0]
   c47f6:	2b30      	cmp	r3, #48	; 0x30
   c47f8:	f040 80b0 	bne.w	c495c <_strtod_l+0x1b4>
   c47fc:	7873      	ldrb	r3, [r6, #1]
   c47fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4802:	2b58      	cmp	r3, #88	; 0x58
   c4804:	d168      	bne.n	c48d8 <_strtod_l+0x130>
   c4806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4808:	9301      	str	r3, [sp, #4]
   c480a:	ab18      	add	r3, sp, #96	; 0x60
   c480c:	9702      	str	r7, [sp, #8]
   c480e:	9300      	str	r3, [sp, #0]
   c4810:	4a8d      	ldr	r2, [pc, #564]	; (c4a48 <_strtod_l+0x2a0>)
   c4812:	ab19      	add	r3, sp, #100	; 0x64
   c4814:	a917      	add	r1, sp, #92	; 0x5c
   c4816:	4620      	mov	r0, r4
   c4818:	f000 ff2e 	bl	c5678 <__gethex>
   c481c:	f010 0707 	ands.w	r7, r0, #7
   c4820:	4605      	mov	r5, r0
   c4822:	d005      	beq.n	c4830 <_strtod_l+0x88>
   c4824:	2f06      	cmp	r7, #6
   c4826:	d12c      	bne.n	c4882 <_strtod_l+0xda>
   c4828:	3601      	adds	r6, #1
   c482a:	2300      	movs	r3, #0
   c482c:	9617      	str	r6, [sp, #92]	; 0x5c
   c482e:	930a      	str	r3, [sp, #40]	; 0x28
   c4830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4832:	2b00      	cmp	r3, #0
   c4834:	f040 8590 	bne.w	c5358 <_strtod_l+0xbb0>
   c4838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c483a:	b1eb      	cbz	r3, c4878 <_strtod_l+0xd0>
   c483c:	4652      	mov	r2, sl
   c483e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c4842:	ec43 2b10 	vmov	d0, r2, r3
   c4846:	b01d      	add	sp, #116	; 0x74
   c4848:	ecbd 8b02 	vpop	{d8}
   c484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4850:	2a20      	cmp	r2, #32
   c4852:	d1cc      	bne.n	c47ee <_strtod_l+0x46>
   c4854:	3301      	adds	r3, #1
   c4856:	9317      	str	r3, [sp, #92]	; 0x5c
   c4858:	e7be      	b.n	c47d8 <_strtod_l+0x30>
   c485a:	2a2d      	cmp	r2, #45	; 0x2d
   c485c:	d1c7      	bne.n	c47ee <_strtod_l+0x46>
   c485e:	2201      	movs	r2, #1
   c4860:	920a      	str	r2, [sp, #40]	; 0x28
   c4862:	1c5a      	adds	r2, r3, #1
   c4864:	9217      	str	r2, [sp, #92]	; 0x5c
   c4866:	785b      	ldrb	r3, [r3, #1]
   c4868:	2b00      	cmp	r3, #0
   c486a:	d1c2      	bne.n	c47f2 <_strtod_l+0x4a>
   c486c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c486e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4872:	2b00      	cmp	r3, #0
   c4874:	f040 856e 	bne.w	c5354 <_strtod_l+0xbac>
   c4878:	4652      	mov	r2, sl
   c487a:	465b      	mov	r3, fp
   c487c:	e7e1      	b.n	c4842 <_strtod_l+0x9a>
   c487e:	2200      	movs	r2, #0
   c4880:	e7ee      	b.n	c4860 <_strtod_l+0xb8>
   c4882:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4884:	b13a      	cbz	r2, c4896 <_strtod_l+0xee>
   c4886:	2135      	movs	r1, #53	; 0x35
   c4888:	a81a      	add	r0, sp, #104	; 0x68
   c488a:	f001 fe90 	bl	c65ae <__copybits>
   c488e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4890:	4620      	mov	r0, r4
   c4892:	f001 fa4f 	bl	c5d34 <_Bfree>
   c4896:	3f01      	subs	r7, #1
   c4898:	2f04      	cmp	r7, #4
   c489a:	d806      	bhi.n	c48aa <_strtod_l+0x102>
   c489c:	e8df f007 	tbb	[pc, r7]
   c48a0:	1714030a 	.word	0x1714030a
   c48a4:	0a          	.byte	0x0a
   c48a5:	00          	.byte	0x00
   c48a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c48aa:	0728      	lsls	r0, r5, #28
   c48ac:	d5c0      	bpl.n	c4830 <_strtod_l+0x88>
   c48ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c48b2:	e7bd      	b.n	c4830 <_strtod_l+0x88>
   c48b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c48b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c48ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c48be:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c48c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c48c6:	e7f0      	b.n	c48aa <_strtod_l+0x102>
   c48c8:	f8df b180 	ldr.w	fp, [pc, #384]	; c4a4c <_strtod_l+0x2a4>
   c48cc:	e7ed      	b.n	c48aa <_strtod_l+0x102>
   c48ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c48d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c48d6:	e7e8      	b.n	c48aa <_strtod_l+0x102>
   c48d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c48da:	1c5a      	adds	r2, r3, #1
   c48dc:	9217      	str	r2, [sp, #92]	; 0x5c
   c48de:	785b      	ldrb	r3, [r3, #1]
   c48e0:	2b30      	cmp	r3, #48	; 0x30
   c48e2:	d0f9      	beq.n	c48d8 <_strtod_l+0x130>
   c48e4:	2b00      	cmp	r3, #0
   c48e6:	d0a3      	beq.n	c4830 <_strtod_l+0x88>
   c48e8:	2301      	movs	r3, #1
   c48ea:	f04f 0900 	mov.w	r9, #0
   c48ee:	9304      	str	r3, [sp, #16]
   c48f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c48f2:	9308      	str	r3, [sp, #32]
   c48f4:	f8cd 901c 	str.w	r9, [sp, #28]
   c48f8:	464f      	mov	r7, r9
   c48fa:	220a      	movs	r2, #10
   c48fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c48fe:	7806      	ldrb	r6, [r0, #0]
   c4900:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c4904:	b2d9      	uxtb	r1, r3
   c4906:	2909      	cmp	r1, #9
   c4908:	d92a      	bls.n	c4960 <_strtod_l+0x1b8>
   c490a:	9905      	ldr	r1, [sp, #20]
   c490c:	462a      	mov	r2, r5
   c490e:	f7ff fed1 	bl	c46b4 <strncmp>
   c4912:	b398      	cbz	r0, c497c <_strtod_l+0x1d4>
   c4914:	2000      	movs	r0, #0
   c4916:	4632      	mov	r2, r6
   c4918:	463d      	mov	r5, r7
   c491a:	9005      	str	r0, [sp, #20]
   c491c:	4603      	mov	r3, r0
   c491e:	2a65      	cmp	r2, #101	; 0x65
   c4920:	d001      	beq.n	c4926 <_strtod_l+0x17e>
   c4922:	2a45      	cmp	r2, #69	; 0x45
   c4924:	d118      	bne.n	c4958 <_strtod_l+0x1b0>
   c4926:	b91d      	cbnz	r5, c4930 <_strtod_l+0x188>
   c4928:	9a04      	ldr	r2, [sp, #16]
   c492a:	4302      	orrs	r2, r0
   c492c:	d09e      	beq.n	c486c <_strtod_l+0xc4>
   c492e:	2500      	movs	r5, #0
   c4930:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4934:	f108 0201 	add.w	r2, r8, #1
   c4938:	9217      	str	r2, [sp, #92]	; 0x5c
   c493a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c493e:	2a2b      	cmp	r2, #43	; 0x2b
   c4940:	d075      	beq.n	c4a2e <_strtod_l+0x286>
   c4942:	2a2d      	cmp	r2, #45	; 0x2d
   c4944:	d07b      	beq.n	c4a3e <_strtod_l+0x296>
   c4946:	f04f 0c00 	mov.w	ip, #0
   c494a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c494e:	2909      	cmp	r1, #9
   c4950:	f240 8082 	bls.w	c4a58 <_strtod_l+0x2b0>
   c4954:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4958:	2600      	movs	r6, #0
   c495a:	e09d      	b.n	c4a98 <_strtod_l+0x2f0>
   c495c:	2300      	movs	r3, #0
   c495e:	e7c4      	b.n	c48ea <_strtod_l+0x142>
   c4960:	2f08      	cmp	r7, #8
   c4962:	bfd8      	it	le
   c4964:	9907      	ldrle	r1, [sp, #28]
   c4966:	f100 0001 	add.w	r0, r0, #1
   c496a:	bfda      	itte	le
   c496c:	fb02 3301 	mlale	r3, r2, r1, r3
   c4970:	9307      	strle	r3, [sp, #28]
   c4972:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4976:	3701      	adds	r7, #1
   c4978:	9017      	str	r0, [sp, #92]	; 0x5c
   c497a:	e7bf      	b.n	c48fc <_strtod_l+0x154>
   c497c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c497e:	195a      	adds	r2, r3, r5
   c4980:	9217      	str	r2, [sp, #92]	; 0x5c
   c4982:	5d5a      	ldrb	r2, [r3, r5]
   c4984:	2f00      	cmp	r7, #0
   c4986:	d037      	beq.n	c49f8 <_strtod_l+0x250>
   c4988:	9005      	str	r0, [sp, #20]
   c498a:	463d      	mov	r5, r7
   c498c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c4990:	2b09      	cmp	r3, #9
   c4992:	d912      	bls.n	c49ba <_strtod_l+0x212>
   c4994:	2301      	movs	r3, #1
   c4996:	e7c2      	b.n	c491e <_strtod_l+0x176>
   c4998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c499a:	1c5a      	adds	r2, r3, #1
   c499c:	9217      	str	r2, [sp, #92]	; 0x5c
   c499e:	785a      	ldrb	r2, [r3, #1]
   c49a0:	3001      	adds	r0, #1
   c49a2:	2a30      	cmp	r2, #48	; 0x30
   c49a4:	d0f8      	beq.n	c4998 <_strtod_l+0x1f0>
   c49a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c49aa:	2b08      	cmp	r3, #8
   c49ac:	f200 84d9 	bhi.w	c5362 <_strtod_l+0xbba>
   c49b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49b2:	9005      	str	r0, [sp, #20]
   c49b4:	2000      	movs	r0, #0
   c49b6:	9308      	str	r3, [sp, #32]
   c49b8:	4605      	mov	r5, r0
   c49ba:	3a30      	subs	r2, #48	; 0x30
   c49bc:	f100 0301 	add.w	r3, r0, #1
   c49c0:	d014      	beq.n	c49ec <_strtod_l+0x244>
   c49c2:	9905      	ldr	r1, [sp, #20]
   c49c4:	4419      	add	r1, r3
   c49c6:	9105      	str	r1, [sp, #20]
   c49c8:	462b      	mov	r3, r5
   c49ca:	eb00 0e05 	add.w	lr, r0, r5
   c49ce:	210a      	movs	r1, #10
   c49d0:	4573      	cmp	r3, lr
   c49d2:	d113      	bne.n	c49fc <_strtod_l+0x254>
   c49d4:	182b      	adds	r3, r5, r0
   c49d6:	2b08      	cmp	r3, #8
   c49d8:	f105 0501 	add.w	r5, r5, #1
   c49dc:	4405      	add	r5, r0
   c49de:	dc1c      	bgt.n	c4a1a <_strtod_l+0x272>
   c49e0:	9907      	ldr	r1, [sp, #28]
   c49e2:	230a      	movs	r3, #10
   c49e4:	fb03 2301 	mla	r3, r3, r1, r2
   c49e8:	9307      	str	r3, [sp, #28]
   c49ea:	2300      	movs	r3, #0
   c49ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c49ee:	1c51      	adds	r1, r2, #1
   c49f0:	9117      	str	r1, [sp, #92]	; 0x5c
   c49f2:	7852      	ldrb	r2, [r2, #1]
   c49f4:	4618      	mov	r0, r3
   c49f6:	e7c9      	b.n	c498c <_strtod_l+0x1e4>
   c49f8:	4638      	mov	r0, r7
   c49fa:	e7d2      	b.n	c49a2 <_strtod_l+0x1fa>
   c49fc:	2b08      	cmp	r3, #8
   c49fe:	dc04      	bgt.n	c4a0a <_strtod_l+0x262>
   c4a00:	9e07      	ldr	r6, [sp, #28]
   c4a02:	434e      	muls	r6, r1
   c4a04:	9607      	str	r6, [sp, #28]
   c4a06:	3301      	adds	r3, #1
   c4a08:	e7e2      	b.n	c49d0 <_strtod_l+0x228>
   c4a0a:	f103 0c01 	add.w	ip, r3, #1
   c4a0e:	f1bc 0f10 	cmp.w	ip, #16
   c4a12:	bfd8      	it	le
   c4a14:	fb01 f909 	mulle.w	r9, r1, r9
   c4a18:	e7f5      	b.n	c4a06 <_strtod_l+0x25e>
   c4a1a:	2d10      	cmp	r5, #16
   c4a1c:	bfdc      	itt	le
   c4a1e:	230a      	movle	r3, #10
   c4a20:	fb03 2909 	mlale	r9, r3, r9, r2
   c4a24:	e7e1      	b.n	c49ea <_strtod_l+0x242>
   c4a26:	2300      	movs	r3, #0
   c4a28:	9305      	str	r3, [sp, #20]
   c4a2a:	2301      	movs	r3, #1
   c4a2c:	e77c      	b.n	c4928 <_strtod_l+0x180>
   c4a2e:	f04f 0c00 	mov.w	ip, #0
   c4a32:	f108 0202 	add.w	r2, r8, #2
   c4a36:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a38:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4a3c:	e785      	b.n	c494a <_strtod_l+0x1a2>
   c4a3e:	f04f 0c01 	mov.w	ip, #1
   c4a42:	e7f6      	b.n	c4a32 <_strtod_l+0x28a>
   c4a44:	000c881c 	.word	0x000c881c
   c4a48:	000c8654 	.word	0x000c8654
   c4a4c:	7ff00000 	.word	0x7ff00000
   c4a50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a52:	1c51      	adds	r1, r2, #1
   c4a54:	9117      	str	r1, [sp, #92]	; 0x5c
   c4a56:	7852      	ldrb	r2, [r2, #1]
   c4a58:	2a30      	cmp	r2, #48	; 0x30
   c4a5a:	d0f9      	beq.n	c4a50 <_strtod_l+0x2a8>
   c4a5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4a60:	2908      	cmp	r1, #8
   c4a62:	f63f af79 	bhi.w	c4958 <_strtod_l+0x1b0>
   c4a66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4a6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a6c:	9206      	str	r2, [sp, #24]
   c4a6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a70:	1c51      	adds	r1, r2, #1
   c4a72:	9117      	str	r1, [sp, #92]	; 0x5c
   c4a74:	7852      	ldrb	r2, [r2, #1]
   c4a76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4a7a:	2e09      	cmp	r6, #9
   c4a7c:	d937      	bls.n	c4aee <_strtod_l+0x346>
   c4a7e:	9e06      	ldr	r6, [sp, #24]
   c4a80:	1b89      	subs	r1, r1, r6
   c4a82:	2908      	cmp	r1, #8
   c4a84:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4a88:	dc02      	bgt.n	c4a90 <_strtod_l+0x2e8>
   c4a8a:	4576      	cmp	r6, lr
   c4a8c:	bfa8      	it	ge
   c4a8e:	4676      	movge	r6, lr
   c4a90:	f1bc 0f00 	cmp.w	ip, #0
   c4a94:	d000      	beq.n	c4a98 <_strtod_l+0x2f0>
   c4a96:	4276      	negs	r6, r6
   c4a98:	2d00      	cmp	r5, #0
   c4a9a:	d14d      	bne.n	c4b38 <_strtod_l+0x390>
   c4a9c:	9904      	ldr	r1, [sp, #16]
   c4a9e:	4301      	orrs	r1, r0
   c4aa0:	f47f aec6 	bne.w	c4830 <_strtod_l+0x88>
   c4aa4:	2b00      	cmp	r3, #0
   c4aa6:	f47f aee1 	bne.w	c486c <_strtod_l+0xc4>
   c4aaa:	2a69      	cmp	r2, #105	; 0x69
   c4aac:	d027      	beq.n	c4afe <_strtod_l+0x356>
   c4aae:	dc24      	bgt.n	c4afa <_strtod_l+0x352>
   c4ab0:	2a49      	cmp	r2, #73	; 0x49
   c4ab2:	d024      	beq.n	c4afe <_strtod_l+0x356>
   c4ab4:	2a4e      	cmp	r2, #78	; 0x4e
   c4ab6:	f47f aed9 	bne.w	c486c <_strtod_l+0xc4>
   c4aba:	499f      	ldr	r1, [pc, #636]	; (c4d38 <_strtod_l+0x590>)
   c4abc:	a817      	add	r0, sp, #92	; 0x5c
   c4abe:	f001 f833 	bl	c5b28 <__match>
   c4ac2:	2800      	cmp	r0, #0
   c4ac4:	f43f aed2 	beq.w	c486c <_strtod_l+0xc4>
   c4ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4aca:	781b      	ldrb	r3, [r3, #0]
   c4acc:	2b28      	cmp	r3, #40	; 0x28
   c4ace:	d12d      	bne.n	c4b2c <_strtod_l+0x384>
   c4ad0:	499a      	ldr	r1, [pc, #616]	; (c4d3c <_strtod_l+0x594>)
   c4ad2:	aa1a      	add	r2, sp, #104	; 0x68
   c4ad4:	a817      	add	r0, sp, #92	; 0x5c
   c4ad6:	f001 f83b 	bl	c5b50 <__hexnan>
   c4ada:	2805      	cmp	r0, #5
   c4adc:	d126      	bne.n	c4b2c <_strtod_l+0x384>
   c4ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4ae0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4ae4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4ae8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4aec:	e6a0      	b.n	c4830 <_strtod_l+0x88>
   c4aee:	210a      	movs	r1, #10
   c4af0:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4af4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4af8:	e7b9      	b.n	c4a6e <_strtod_l+0x2c6>
   c4afa:	2a6e      	cmp	r2, #110	; 0x6e
   c4afc:	e7db      	b.n	c4ab6 <_strtod_l+0x30e>
   c4afe:	4990      	ldr	r1, [pc, #576]	; (c4d40 <_strtod_l+0x598>)
   c4b00:	a817      	add	r0, sp, #92	; 0x5c
   c4b02:	f001 f811 	bl	c5b28 <__match>
   c4b06:	2800      	cmp	r0, #0
   c4b08:	f43f aeb0 	beq.w	c486c <_strtod_l+0xc4>
   c4b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4b0e:	498d      	ldr	r1, [pc, #564]	; (c4d44 <_strtod_l+0x59c>)
   c4b10:	3b01      	subs	r3, #1
   c4b12:	a817      	add	r0, sp, #92	; 0x5c
   c4b14:	9317      	str	r3, [sp, #92]	; 0x5c
   c4b16:	f001 f807 	bl	c5b28 <__match>
   c4b1a:	b910      	cbnz	r0, c4b22 <_strtod_l+0x37a>
   c4b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4b1e:	3301      	adds	r3, #1
   c4b20:	9317      	str	r3, [sp, #92]	; 0x5c
   c4b22:	f8df b230 	ldr.w	fp, [pc, #560]	; c4d54 <_strtod_l+0x5ac>
   c4b26:	f04f 0a00 	mov.w	sl, #0
   c4b2a:	e681      	b.n	c4830 <_strtod_l+0x88>
   c4b2c:	4886      	ldr	r0, [pc, #536]	; (c4d48 <_strtod_l+0x5a0>)
   c4b2e:	f001 fd93 	bl	c6658 <nan>
   c4b32:	ec5b ab10 	vmov	sl, fp, d0
   c4b36:	e67b      	b.n	c4830 <_strtod_l+0x88>
   c4b38:	9b05      	ldr	r3, [sp, #20]
   c4b3a:	9807      	ldr	r0, [sp, #28]
   c4b3c:	1af3      	subs	r3, r6, r3
   c4b3e:	2f00      	cmp	r7, #0
   c4b40:	bf08      	it	eq
   c4b42:	462f      	moveq	r7, r5
   c4b44:	2d10      	cmp	r5, #16
   c4b46:	9306      	str	r3, [sp, #24]
   c4b48:	46a8      	mov	r8, r5
   c4b4a:	bfa8      	it	ge
   c4b4c:	f04f 0810 	movge.w	r8, #16
   c4b50:	f7ff f8dc 	bl	c3d0c <__aeabi_ui2d>
   c4b54:	2d09      	cmp	r5, #9
   c4b56:	4682      	mov	sl, r0
   c4b58:	468b      	mov	fp, r1
   c4b5a:	dd13      	ble.n	c4b84 <_strtod_l+0x3dc>
   c4b5c:	4b7b      	ldr	r3, [pc, #492]	; (c4d4c <_strtod_l+0x5a4>)
   c4b5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4b62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4b66:	f7ff f94b 	bl	c3e00 <__aeabi_dmul>
   c4b6a:	4682      	mov	sl, r0
   c4b6c:	4648      	mov	r0, r9
   c4b6e:	468b      	mov	fp, r1
   c4b70:	f7ff f8cc 	bl	c3d0c <__aeabi_ui2d>
   c4b74:	4602      	mov	r2, r0
   c4b76:	460b      	mov	r3, r1
   c4b78:	4650      	mov	r0, sl
   c4b7a:	4659      	mov	r1, fp
   c4b7c:	f7fe ff8a 	bl	c3a94 <__adddf3>
   c4b80:	4682      	mov	sl, r0
   c4b82:	468b      	mov	fp, r1
   c4b84:	2d0f      	cmp	r5, #15
   c4b86:	dc38      	bgt.n	c4bfa <_strtod_l+0x452>
   c4b88:	9b06      	ldr	r3, [sp, #24]
   c4b8a:	2b00      	cmp	r3, #0
   c4b8c:	f43f ae50 	beq.w	c4830 <_strtod_l+0x88>
   c4b90:	dd24      	ble.n	c4bdc <_strtod_l+0x434>
   c4b92:	2b16      	cmp	r3, #22
   c4b94:	dc0b      	bgt.n	c4bae <_strtod_l+0x406>
   c4b96:	496d      	ldr	r1, [pc, #436]	; (c4d4c <_strtod_l+0x5a4>)
   c4b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4ba0:	4652      	mov	r2, sl
   c4ba2:	465b      	mov	r3, fp
   c4ba4:	f7ff f92c 	bl	c3e00 <__aeabi_dmul>
   c4ba8:	4682      	mov	sl, r0
   c4baa:	468b      	mov	fp, r1
   c4bac:	e640      	b.n	c4830 <_strtod_l+0x88>
   c4bae:	9a06      	ldr	r2, [sp, #24]
   c4bb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4bb4:	4293      	cmp	r3, r2
   c4bb6:	db20      	blt.n	c4bfa <_strtod_l+0x452>
   c4bb8:	4c64      	ldr	r4, [pc, #400]	; (c4d4c <_strtod_l+0x5a4>)
   c4bba:	f1c5 050f 	rsb	r5, r5, #15
   c4bbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4bc2:	4652      	mov	r2, sl
   c4bc4:	465b      	mov	r3, fp
   c4bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4bca:	f7ff f919 	bl	c3e00 <__aeabi_dmul>
   c4bce:	9b06      	ldr	r3, [sp, #24]
   c4bd0:	1b5d      	subs	r5, r3, r5
   c4bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4bda:	e7e3      	b.n	c4ba4 <_strtod_l+0x3fc>
   c4bdc:	9b06      	ldr	r3, [sp, #24]
   c4bde:	3316      	adds	r3, #22
   c4be0:	db0b      	blt.n	c4bfa <_strtod_l+0x452>
   c4be2:	9b05      	ldr	r3, [sp, #20]
   c4be4:	1b9e      	subs	r6, r3, r6
   c4be6:	4b59      	ldr	r3, [pc, #356]	; (c4d4c <_strtod_l+0x5a4>)
   c4be8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4bec:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4bf0:	4650      	mov	r0, sl
   c4bf2:	4659      	mov	r1, fp
   c4bf4:	f7ff fa2e 	bl	c4054 <__aeabi_ddiv>
   c4bf8:	e7d6      	b.n	c4ba8 <_strtod_l+0x400>
   c4bfa:	9b06      	ldr	r3, [sp, #24]
   c4bfc:	eba5 0808 	sub.w	r8, r5, r8
   c4c00:	4498      	add	r8, r3
   c4c02:	f1b8 0f00 	cmp.w	r8, #0
   c4c06:	dd74      	ble.n	c4cf2 <_strtod_l+0x54a>
   c4c08:	f018 030f 	ands.w	r3, r8, #15
   c4c0c:	d00a      	beq.n	c4c24 <_strtod_l+0x47c>
   c4c0e:	494f      	ldr	r1, [pc, #316]	; (c4d4c <_strtod_l+0x5a4>)
   c4c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4c14:	4652      	mov	r2, sl
   c4c16:	465b      	mov	r3, fp
   c4c18:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4c1c:	f7ff f8f0 	bl	c3e00 <__aeabi_dmul>
   c4c20:	4682      	mov	sl, r0
   c4c22:	468b      	mov	fp, r1
   c4c24:	f038 080f 	bics.w	r8, r8, #15
   c4c28:	d04f      	beq.n	c4cca <_strtod_l+0x522>
   c4c2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4c2e:	dd22      	ble.n	c4c76 <_strtod_l+0x4ce>
   c4c30:	2500      	movs	r5, #0
   c4c32:	462e      	mov	r6, r5
   c4c34:	9507      	str	r5, [sp, #28]
   c4c36:	9505      	str	r5, [sp, #20]
   c4c38:	2322      	movs	r3, #34	; 0x22
   c4c3a:	f8df b118 	ldr.w	fp, [pc, #280]	; c4d54 <_strtod_l+0x5ac>
   c4c3e:	6023      	str	r3, [r4, #0]
   c4c40:	f04f 0a00 	mov.w	sl, #0
   c4c44:	9b07      	ldr	r3, [sp, #28]
   c4c46:	2b00      	cmp	r3, #0
   c4c48:	f43f adf2 	beq.w	c4830 <_strtod_l+0x88>
   c4c4c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4c4e:	4620      	mov	r0, r4
   c4c50:	f001 f870 	bl	c5d34 <_Bfree>
   c4c54:	9905      	ldr	r1, [sp, #20]
   c4c56:	4620      	mov	r0, r4
   c4c58:	f001 f86c 	bl	c5d34 <_Bfree>
   c4c5c:	4631      	mov	r1, r6
   c4c5e:	4620      	mov	r0, r4
   c4c60:	f001 f868 	bl	c5d34 <_Bfree>
   c4c64:	9907      	ldr	r1, [sp, #28]
   c4c66:	4620      	mov	r0, r4
   c4c68:	f001 f864 	bl	c5d34 <_Bfree>
   c4c6c:	4629      	mov	r1, r5
   c4c6e:	4620      	mov	r0, r4
   c4c70:	f001 f860 	bl	c5d34 <_Bfree>
   c4c74:	e5dc      	b.n	c4830 <_strtod_l+0x88>
   c4c76:	4b36      	ldr	r3, [pc, #216]	; (c4d50 <_strtod_l+0x5a8>)
   c4c78:	9304      	str	r3, [sp, #16]
   c4c7a:	2300      	movs	r3, #0
   c4c7c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4c80:	4650      	mov	r0, sl
   c4c82:	4659      	mov	r1, fp
   c4c84:	4699      	mov	r9, r3
   c4c86:	f1b8 0f01 	cmp.w	r8, #1
   c4c8a:	dc21      	bgt.n	c4cd0 <_strtod_l+0x528>
   c4c8c:	b10b      	cbz	r3, c4c92 <_strtod_l+0x4ea>
   c4c8e:	4682      	mov	sl, r0
   c4c90:	468b      	mov	fp, r1
   c4c92:	4b2f      	ldr	r3, [pc, #188]	; (c4d50 <_strtod_l+0x5a8>)
   c4c94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4c98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4c9c:	4652      	mov	r2, sl
   c4c9e:	465b      	mov	r3, fp
   c4ca0:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4ca4:	f7ff f8ac 	bl	c3e00 <__aeabi_dmul>
   c4ca8:	4b2a      	ldr	r3, [pc, #168]	; (c4d54 <_strtod_l+0x5ac>)
   c4caa:	460a      	mov	r2, r1
   c4cac:	400b      	ands	r3, r1
   c4cae:	492a      	ldr	r1, [pc, #168]	; (c4d58 <_strtod_l+0x5b0>)
   c4cb0:	428b      	cmp	r3, r1
   c4cb2:	4682      	mov	sl, r0
   c4cb4:	d8bc      	bhi.n	c4c30 <_strtod_l+0x488>
   c4cb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4cba:	428b      	cmp	r3, r1
   c4cbc:	bf86      	itte	hi
   c4cbe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4d5c <_strtod_l+0x5b4>
   c4cc2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c4cc6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4cca:	2300      	movs	r3, #0
   c4ccc:	9304      	str	r3, [sp, #16]
   c4cce:	e084      	b.n	c4dda <_strtod_l+0x632>
   c4cd0:	f018 0f01 	tst.w	r8, #1
   c4cd4:	d005      	beq.n	c4ce2 <_strtod_l+0x53a>
   c4cd6:	9b04      	ldr	r3, [sp, #16]
   c4cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4cdc:	f7ff f890 	bl	c3e00 <__aeabi_dmul>
   c4ce0:	2301      	movs	r3, #1
   c4ce2:	9a04      	ldr	r2, [sp, #16]
   c4ce4:	3208      	adds	r2, #8
   c4ce6:	f109 0901 	add.w	r9, r9, #1
   c4cea:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4cee:	9204      	str	r2, [sp, #16]
   c4cf0:	e7c9      	b.n	c4c86 <_strtod_l+0x4de>
   c4cf2:	d0ea      	beq.n	c4cca <_strtod_l+0x522>
   c4cf4:	f1c8 0800 	rsb	r8, r8, #0
   c4cf8:	f018 020f 	ands.w	r2, r8, #15
   c4cfc:	d00a      	beq.n	c4d14 <_strtod_l+0x56c>
   c4cfe:	4b13      	ldr	r3, [pc, #76]	; (c4d4c <_strtod_l+0x5a4>)
   c4d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4d04:	4650      	mov	r0, sl
   c4d06:	4659      	mov	r1, fp
   c4d08:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4d0c:	f7ff f9a2 	bl	c4054 <__aeabi_ddiv>
   c4d10:	4682      	mov	sl, r0
   c4d12:	468b      	mov	fp, r1
   c4d14:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4d18:	d0d7      	beq.n	c4cca <_strtod_l+0x522>
   c4d1a:	f1b8 0f1f 	cmp.w	r8, #31
   c4d1e:	dd1f      	ble.n	c4d60 <_strtod_l+0x5b8>
   c4d20:	2500      	movs	r5, #0
   c4d22:	462e      	mov	r6, r5
   c4d24:	9507      	str	r5, [sp, #28]
   c4d26:	9505      	str	r5, [sp, #20]
   c4d28:	2322      	movs	r3, #34	; 0x22
   c4d2a:	f04f 0a00 	mov.w	sl, #0
   c4d2e:	f04f 0b00 	mov.w	fp, #0
   c4d32:	6023      	str	r3, [r4, #0]
   c4d34:	e786      	b.n	c4c44 <_strtod_l+0x49c>
   c4d36:	bf00      	nop
   c4d38:	000c8651 	.word	0x000c8651
   c4d3c:	000c8668 	.word	0x000c8668
   c4d40:	000c8648 	.word	0x000c8648
   c4d44:	000c864b 	.word	0x000c864b
   c4d48:	000c7f1b 	.word	0x000c7f1b
   c4d4c:	000c88b0 	.word	0x000c88b0
   c4d50:	000c8888 	.word	0x000c8888
   c4d54:	7ff00000 	.word	0x7ff00000
   c4d58:	7ca00000 	.word	0x7ca00000
   c4d5c:	7fefffff 	.word	0x7fefffff
   c4d60:	f018 0310 	ands.w	r3, r8, #16
   c4d64:	bf18      	it	ne
   c4d66:	236a      	movne	r3, #106	; 0x6a
   c4d68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c5118 <_strtod_l+0x970>
   c4d6c:	9304      	str	r3, [sp, #16]
   c4d6e:	4650      	mov	r0, sl
   c4d70:	4659      	mov	r1, fp
   c4d72:	2300      	movs	r3, #0
   c4d74:	f018 0f01 	tst.w	r8, #1
   c4d78:	d004      	beq.n	c4d84 <_strtod_l+0x5dc>
   c4d7a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4d7e:	f7ff f83f 	bl	c3e00 <__aeabi_dmul>
   c4d82:	2301      	movs	r3, #1
   c4d84:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4d88:	f109 0908 	add.w	r9, r9, #8
   c4d8c:	d1f2      	bne.n	c4d74 <_strtod_l+0x5cc>
   c4d8e:	b10b      	cbz	r3, c4d94 <_strtod_l+0x5ec>
   c4d90:	4682      	mov	sl, r0
   c4d92:	468b      	mov	fp, r1
   c4d94:	9b04      	ldr	r3, [sp, #16]
   c4d96:	b1c3      	cbz	r3, c4dca <_strtod_l+0x622>
   c4d98:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4d9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4da0:	2b00      	cmp	r3, #0
   c4da2:	4659      	mov	r1, fp
   c4da4:	dd11      	ble.n	c4dca <_strtod_l+0x622>
   c4da6:	2b1f      	cmp	r3, #31
   c4da8:	f340 8124 	ble.w	c4ff4 <_strtod_l+0x84c>
   c4dac:	2b34      	cmp	r3, #52	; 0x34
   c4dae:	bfde      	ittt	le
   c4db0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4db4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c4db8:	fa03 f202 	lslle.w	r2, r3, r2
   c4dbc:	f04f 0a00 	mov.w	sl, #0
   c4dc0:	bfcc      	ite	gt
   c4dc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4dc6:	ea02 0b01 	andle.w	fp, r2, r1
   c4dca:	2200      	movs	r2, #0
   c4dcc:	2300      	movs	r3, #0
   c4dce:	4650      	mov	r0, sl
   c4dd0:	4659      	mov	r1, fp
   c4dd2:	f7ff fa7d 	bl	c42d0 <__aeabi_dcmpeq>
   c4dd6:	2800      	cmp	r0, #0
   c4dd8:	d1a2      	bne.n	c4d20 <_strtod_l+0x578>
   c4dda:	9b07      	ldr	r3, [sp, #28]
   c4ddc:	9300      	str	r3, [sp, #0]
   c4dde:	9908      	ldr	r1, [sp, #32]
   c4de0:	462b      	mov	r3, r5
   c4de2:	463a      	mov	r2, r7
   c4de4:	4620      	mov	r0, r4
   c4de6:	f001 f80d 	bl	c5e04 <__s2b>
   c4dea:	9007      	str	r0, [sp, #28]
   c4dec:	2800      	cmp	r0, #0
   c4dee:	f43f af1f 	beq.w	c4c30 <_strtod_l+0x488>
   c4df2:	9b05      	ldr	r3, [sp, #20]
   c4df4:	1b9e      	subs	r6, r3, r6
   c4df6:	9b06      	ldr	r3, [sp, #24]
   c4df8:	2b00      	cmp	r3, #0
   c4dfa:	bfb4      	ite	lt
   c4dfc:	4633      	movlt	r3, r6
   c4dfe:	2300      	movge	r3, #0
   c4e00:	930c      	str	r3, [sp, #48]	; 0x30
   c4e02:	9b06      	ldr	r3, [sp, #24]
   c4e04:	2500      	movs	r5, #0
   c4e06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4e0a:	9312      	str	r3, [sp, #72]	; 0x48
   c4e0c:	462e      	mov	r6, r5
   c4e0e:	9b07      	ldr	r3, [sp, #28]
   c4e10:	4620      	mov	r0, r4
   c4e12:	6859      	ldr	r1, [r3, #4]
   c4e14:	f000 ff4e 	bl	c5cb4 <_Balloc>
   c4e18:	9005      	str	r0, [sp, #20]
   c4e1a:	2800      	cmp	r0, #0
   c4e1c:	f43f af0c 	beq.w	c4c38 <_strtod_l+0x490>
   c4e20:	9b07      	ldr	r3, [sp, #28]
   c4e22:	691a      	ldr	r2, [r3, #16]
   c4e24:	3202      	adds	r2, #2
   c4e26:	f103 010c 	add.w	r1, r3, #12
   c4e2a:	0092      	lsls	r2, r2, #2
   c4e2c:	300c      	adds	r0, #12
   c4e2e:	f7ff fb73 	bl	c4518 <memcpy>
   c4e32:	ec4b ab10 	vmov	d0, sl, fp
   c4e36:	aa1a      	add	r2, sp, #104	; 0x68
   c4e38:	a919      	add	r1, sp, #100	; 0x64
   c4e3a:	4620      	mov	r0, r4
   c4e3c:	f001 fb28 	bl	c6490 <__d2b>
   c4e40:	ec4b ab18 	vmov	d8, sl, fp
   c4e44:	9018      	str	r0, [sp, #96]	; 0x60
   c4e46:	2800      	cmp	r0, #0
   c4e48:	f43f aef6 	beq.w	c4c38 <_strtod_l+0x490>
   c4e4c:	2101      	movs	r1, #1
   c4e4e:	4620      	mov	r0, r4
   c4e50:	f001 f872 	bl	c5f38 <__i2b>
   c4e54:	4606      	mov	r6, r0
   c4e56:	2800      	cmp	r0, #0
   c4e58:	f43f aeee 	beq.w	c4c38 <_strtod_l+0x490>
   c4e5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4e5e:	9904      	ldr	r1, [sp, #16]
   c4e60:	2b00      	cmp	r3, #0
   c4e62:	bfab      	itete	ge
   c4e64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4e66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4e68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4e6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4e6e:	bfac      	ite	ge
   c4e70:	eb03 0902 	addge.w	r9, r3, r2
   c4e74:	1ad7      	sublt	r7, r2, r3
   c4e76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4e78:	eba3 0801 	sub.w	r8, r3, r1
   c4e7c:	4490      	add	r8, r2
   c4e7e:	4ba1      	ldr	r3, [pc, #644]	; (c5104 <_strtod_l+0x95c>)
   c4e80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c4e84:	4598      	cmp	r8, r3
   c4e86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4e8a:	f280 80c7 	bge.w	c501c <_strtod_l+0x874>
   c4e8e:	eba3 0308 	sub.w	r3, r3, r8
   c4e92:	2b1f      	cmp	r3, #31
   c4e94:	eba2 0203 	sub.w	r2, r2, r3
   c4e98:	f04f 0101 	mov.w	r1, #1
   c4e9c:	f300 80b1 	bgt.w	c5002 <_strtod_l+0x85a>
   c4ea0:	fa01 f303 	lsl.w	r3, r1, r3
   c4ea4:	930d      	str	r3, [sp, #52]	; 0x34
   c4ea6:	2300      	movs	r3, #0
   c4ea8:	9308      	str	r3, [sp, #32]
   c4eaa:	eb09 0802 	add.w	r8, r9, r2
   c4eae:	9b04      	ldr	r3, [sp, #16]
   c4eb0:	45c1      	cmp	r9, r8
   c4eb2:	4417      	add	r7, r2
   c4eb4:	441f      	add	r7, r3
   c4eb6:	464b      	mov	r3, r9
   c4eb8:	bfa8      	it	ge
   c4eba:	4643      	movge	r3, r8
   c4ebc:	42bb      	cmp	r3, r7
   c4ebe:	bfa8      	it	ge
   c4ec0:	463b      	movge	r3, r7
   c4ec2:	2b00      	cmp	r3, #0
   c4ec4:	bfc2      	ittt	gt
   c4ec6:	eba8 0803 	subgt.w	r8, r8, r3
   c4eca:	1aff      	subgt	r7, r7, r3
   c4ecc:	eba9 0903 	subgt.w	r9, r9, r3
   c4ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4ed2:	2b00      	cmp	r3, #0
   c4ed4:	dd17      	ble.n	c4f06 <_strtod_l+0x75e>
   c4ed6:	4631      	mov	r1, r6
   c4ed8:	461a      	mov	r2, r3
   c4eda:	4620      	mov	r0, r4
   c4edc:	f001 f8ec 	bl	c60b8 <__pow5mult>
   c4ee0:	4606      	mov	r6, r0
   c4ee2:	2800      	cmp	r0, #0
   c4ee4:	f43f aea8 	beq.w	c4c38 <_strtod_l+0x490>
   c4ee8:	4601      	mov	r1, r0
   c4eea:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4eec:	4620      	mov	r0, r4
   c4eee:	f001 f839 	bl	c5f64 <__multiply>
   c4ef2:	900b      	str	r0, [sp, #44]	; 0x2c
   c4ef4:	2800      	cmp	r0, #0
   c4ef6:	f43f ae9f 	beq.w	c4c38 <_strtod_l+0x490>
   c4efa:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4efc:	4620      	mov	r0, r4
   c4efe:	f000 ff19 	bl	c5d34 <_Bfree>
   c4f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f04:	9318      	str	r3, [sp, #96]	; 0x60
   c4f06:	f1b8 0f00 	cmp.w	r8, #0
   c4f0a:	f300 808c 	bgt.w	c5026 <_strtod_l+0x87e>
   c4f0e:	9b06      	ldr	r3, [sp, #24]
   c4f10:	2b00      	cmp	r3, #0
   c4f12:	dd08      	ble.n	c4f26 <_strtod_l+0x77e>
   c4f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4f16:	9905      	ldr	r1, [sp, #20]
   c4f18:	4620      	mov	r0, r4
   c4f1a:	f001 f8cd 	bl	c60b8 <__pow5mult>
   c4f1e:	9005      	str	r0, [sp, #20]
   c4f20:	2800      	cmp	r0, #0
   c4f22:	f43f ae89 	beq.w	c4c38 <_strtod_l+0x490>
   c4f26:	2f00      	cmp	r7, #0
   c4f28:	dd08      	ble.n	c4f3c <_strtod_l+0x794>
   c4f2a:	9905      	ldr	r1, [sp, #20]
   c4f2c:	463a      	mov	r2, r7
   c4f2e:	4620      	mov	r0, r4
   c4f30:	f001 f91c 	bl	c616c <__lshift>
   c4f34:	9005      	str	r0, [sp, #20]
   c4f36:	2800      	cmp	r0, #0
   c4f38:	f43f ae7e 	beq.w	c4c38 <_strtod_l+0x490>
   c4f3c:	f1b9 0f00 	cmp.w	r9, #0
   c4f40:	dd08      	ble.n	c4f54 <_strtod_l+0x7ac>
   c4f42:	4631      	mov	r1, r6
   c4f44:	464a      	mov	r2, r9
   c4f46:	4620      	mov	r0, r4
   c4f48:	f001 f910 	bl	c616c <__lshift>
   c4f4c:	4606      	mov	r6, r0
   c4f4e:	2800      	cmp	r0, #0
   c4f50:	f43f ae72 	beq.w	c4c38 <_strtod_l+0x490>
   c4f54:	9a05      	ldr	r2, [sp, #20]
   c4f56:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4f58:	4620      	mov	r0, r4
   c4f5a:	f001 f993 	bl	c6284 <__mdiff>
   c4f5e:	4605      	mov	r5, r0
   c4f60:	2800      	cmp	r0, #0
   c4f62:	f43f ae69 	beq.w	c4c38 <_strtod_l+0x490>
   c4f66:	68c3      	ldr	r3, [r0, #12]
   c4f68:	930b      	str	r3, [sp, #44]	; 0x2c
   c4f6a:	2300      	movs	r3, #0
   c4f6c:	60c3      	str	r3, [r0, #12]
   c4f6e:	4631      	mov	r1, r6
   c4f70:	f001 f96c 	bl	c624c <__mcmp>
   c4f74:	2800      	cmp	r0, #0
   c4f76:	da60      	bge.n	c503a <_strtod_l+0x892>
   c4f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f7a:	ea53 030a 	orrs.w	r3, r3, sl
   c4f7e:	f040 8082 	bne.w	c5086 <_strtod_l+0x8de>
   c4f82:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4f86:	2b00      	cmp	r3, #0
   c4f88:	d17d      	bne.n	c5086 <_strtod_l+0x8de>
   c4f8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4f8e:	0d1b      	lsrs	r3, r3, #20
   c4f90:	051b      	lsls	r3, r3, #20
   c4f92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c4f96:	d976      	bls.n	c5086 <_strtod_l+0x8de>
   c4f98:	696b      	ldr	r3, [r5, #20]
   c4f9a:	b913      	cbnz	r3, c4fa2 <_strtod_l+0x7fa>
   c4f9c:	692b      	ldr	r3, [r5, #16]
   c4f9e:	2b01      	cmp	r3, #1
   c4fa0:	dd71      	ble.n	c5086 <_strtod_l+0x8de>
   c4fa2:	4629      	mov	r1, r5
   c4fa4:	2201      	movs	r2, #1
   c4fa6:	4620      	mov	r0, r4
   c4fa8:	f001 f8e0 	bl	c616c <__lshift>
   c4fac:	4631      	mov	r1, r6
   c4fae:	4605      	mov	r5, r0
   c4fb0:	f001 f94c 	bl	c624c <__mcmp>
   c4fb4:	2800      	cmp	r0, #0
   c4fb6:	dd66      	ble.n	c5086 <_strtod_l+0x8de>
   c4fb8:	9904      	ldr	r1, [sp, #16]
   c4fba:	4a53      	ldr	r2, [pc, #332]	; (c5108 <_strtod_l+0x960>)
   c4fbc:	465b      	mov	r3, fp
   c4fbe:	2900      	cmp	r1, #0
   c4fc0:	f000 8081 	beq.w	c50c6 <_strtod_l+0x91e>
   c4fc4:	ea02 010b 	and.w	r1, r2, fp
   c4fc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4fcc:	dc7b      	bgt.n	c50c6 <_strtod_l+0x91e>
   c4fce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c4fd2:	f77f aea9 	ble.w	c4d28 <_strtod_l+0x580>
   c4fd6:	4b4d      	ldr	r3, [pc, #308]	; (c510c <_strtod_l+0x964>)
   c4fd8:	4650      	mov	r0, sl
   c4fda:	4659      	mov	r1, fp
   c4fdc:	2200      	movs	r2, #0
   c4fde:	f7fe ff0f 	bl	c3e00 <__aeabi_dmul>
   c4fe2:	460b      	mov	r3, r1
   c4fe4:	4303      	orrs	r3, r0
   c4fe6:	bf08      	it	eq
   c4fe8:	2322      	moveq	r3, #34	; 0x22
   c4fea:	4682      	mov	sl, r0
   c4fec:	468b      	mov	fp, r1
   c4fee:	bf08      	it	eq
   c4ff0:	6023      	streq	r3, [r4, #0]
   c4ff2:	e62b      	b.n	c4c4c <_strtod_l+0x4a4>
   c4ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c4ff8:	fa02 f303 	lsl.w	r3, r2, r3
   c4ffc:	ea03 0a0a 	and.w	sl, r3, sl
   c5000:	e6e3      	b.n	c4dca <_strtod_l+0x622>
   c5002:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c5006:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c500a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c500e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c5012:	fa01 f308 	lsl.w	r3, r1, r8
   c5016:	9308      	str	r3, [sp, #32]
   c5018:	910d      	str	r1, [sp, #52]	; 0x34
   c501a:	e746      	b.n	c4eaa <_strtod_l+0x702>
   c501c:	2300      	movs	r3, #0
   c501e:	9308      	str	r3, [sp, #32]
   c5020:	2301      	movs	r3, #1
   c5022:	930d      	str	r3, [sp, #52]	; 0x34
   c5024:	e741      	b.n	c4eaa <_strtod_l+0x702>
   c5026:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5028:	4642      	mov	r2, r8
   c502a:	4620      	mov	r0, r4
   c502c:	f001 f89e 	bl	c616c <__lshift>
   c5030:	9018      	str	r0, [sp, #96]	; 0x60
   c5032:	2800      	cmp	r0, #0
   c5034:	f47f af6b 	bne.w	c4f0e <_strtod_l+0x766>
   c5038:	e5fe      	b.n	c4c38 <_strtod_l+0x490>
   c503a:	465f      	mov	r7, fp
   c503c:	d16e      	bne.n	c511c <_strtod_l+0x974>
   c503e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c5040:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5044:	b342      	cbz	r2, c5098 <_strtod_l+0x8f0>
   c5046:	4a32      	ldr	r2, [pc, #200]	; (c5110 <_strtod_l+0x968>)
   c5048:	4293      	cmp	r3, r2
   c504a:	d128      	bne.n	c509e <_strtod_l+0x8f6>
   c504c:	9b04      	ldr	r3, [sp, #16]
   c504e:	4651      	mov	r1, sl
   c5050:	b1eb      	cbz	r3, c508e <_strtod_l+0x8e6>
   c5052:	4b2d      	ldr	r3, [pc, #180]	; (c5108 <_strtod_l+0x960>)
   c5054:	403b      	ands	r3, r7
   c5056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c505a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c505e:	d819      	bhi.n	c5094 <_strtod_l+0x8ec>
   c5060:	0d1b      	lsrs	r3, r3, #20
   c5062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c5066:	fa02 f303 	lsl.w	r3, r2, r3
   c506a:	4299      	cmp	r1, r3
   c506c:	d117      	bne.n	c509e <_strtod_l+0x8f6>
   c506e:	4b29      	ldr	r3, [pc, #164]	; (c5114 <_strtod_l+0x96c>)
   c5070:	429f      	cmp	r7, r3
   c5072:	d102      	bne.n	c507a <_strtod_l+0x8d2>
   c5074:	3101      	adds	r1, #1
   c5076:	f43f addf 	beq.w	c4c38 <_strtod_l+0x490>
   c507a:	4b23      	ldr	r3, [pc, #140]	; (c5108 <_strtod_l+0x960>)
   c507c:	403b      	ands	r3, r7
   c507e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c5082:	f04f 0a00 	mov.w	sl, #0
   c5086:	9b04      	ldr	r3, [sp, #16]
   c5088:	2b00      	cmp	r3, #0
   c508a:	d1a4      	bne.n	c4fd6 <_strtod_l+0x82e>
   c508c:	e5de      	b.n	c4c4c <_strtod_l+0x4a4>
   c508e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c5092:	e7ea      	b.n	c506a <_strtod_l+0x8c2>
   c5094:	4613      	mov	r3, r2
   c5096:	e7e8      	b.n	c506a <_strtod_l+0x8c2>
   c5098:	ea53 030a 	orrs.w	r3, r3, sl
   c509c:	d08c      	beq.n	c4fb8 <_strtod_l+0x810>
   c509e:	9b08      	ldr	r3, [sp, #32]
   c50a0:	b1db      	cbz	r3, c50da <_strtod_l+0x932>
   c50a2:	423b      	tst	r3, r7
   c50a4:	d0ef      	beq.n	c5086 <_strtod_l+0x8de>
   c50a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c50a8:	9a04      	ldr	r2, [sp, #16]
   c50aa:	4650      	mov	r0, sl
   c50ac:	4659      	mov	r1, fp
   c50ae:	b1c3      	cbz	r3, c50e2 <_strtod_l+0x93a>
   c50b0:	f7ff fb5d 	bl	c476e <sulp>
   c50b4:	4602      	mov	r2, r0
   c50b6:	460b      	mov	r3, r1
   c50b8:	ec51 0b18 	vmov	r0, r1, d8
   c50bc:	f7fe fcea 	bl	c3a94 <__adddf3>
   c50c0:	4682      	mov	sl, r0
   c50c2:	468b      	mov	fp, r1
   c50c4:	e7df      	b.n	c5086 <_strtod_l+0x8de>
   c50c6:	4013      	ands	r3, r2
   c50c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c50cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c50d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c50d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c50d8:	e7d5      	b.n	c5086 <_strtod_l+0x8de>
   c50da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c50dc:	ea13 0f0a 	tst.w	r3, sl
   c50e0:	e7e0      	b.n	c50a4 <_strtod_l+0x8fc>
   c50e2:	f7ff fb44 	bl	c476e <sulp>
   c50e6:	4602      	mov	r2, r0
   c50e8:	460b      	mov	r3, r1
   c50ea:	ec51 0b18 	vmov	r0, r1, d8
   c50ee:	f7fe fccf 	bl	c3a90 <__aeabi_dsub>
   c50f2:	2200      	movs	r2, #0
   c50f4:	2300      	movs	r3, #0
   c50f6:	4682      	mov	sl, r0
   c50f8:	468b      	mov	fp, r1
   c50fa:	f7ff f8e9 	bl	c42d0 <__aeabi_dcmpeq>
   c50fe:	2800      	cmp	r0, #0
   c5100:	d0c1      	beq.n	c5086 <_strtod_l+0x8de>
   c5102:	e611      	b.n	c4d28 <_strtod_l+0x580>
   c5104:	fffffc02 	.word	0xfffffc02
   c5108:	7ff00000 	.word	0x7ff00000
   c510c:	39500000 	.word	0x39500000
   c5110:	000fffff 	.word	0x000fffff
   c5114:	7fefffff 	.word	0x7fefffff
   c5118:	000c8680 	.word	0x000c8680
   c511c:	4631      	mov	r1, r6
   c511e:	4628      	mov	r0, r5
   c5120:	f001 fa12 	bl	c6548 <__ratio>
   c5124:	ec59 8b10 	vmov	r8, r9, d0
   c5128:	ee10 0a10 	vmov	r0, s0
   c512c:	2200      	movs	r2, #0
   c512e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5132:	4649      	mov	r1, r9
   c5134:	f7ff f8e0 	bl	c42f8 <__aeabi_dcmple>
   c5138:	2800      	cmp	r0, #0
   c513a:	d07a      	beq.n	c5232 <_strtod_l+0xa8a>
   c513c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c513e:	2b00      	cmp	r3, #0
   c5140:	d04a      	beq.n	c51d8 <_strtod_l+0xa30>
   c5142:	4b95      	ldr	r3, [pc, #596]	; (c5398 <_strtod_l+0xbf0>)
   c5144:	2200      	movs	r2, #0
   c5146:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c514a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c5398 <_strtod_l+0xbf0>
   c514e:	f04f 0800 	mov.w	r8, #0
   c5152:	4b92      	ldr	r3, [pc, #584]	; (c539c <_strtod_l+0xbf4>)
   c5154:	403b      	ands	r3, r7
   c5156:	930d      	str	r3, [sp, #52]	; 0x34
   c5158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c515a:	4b91      	ldr	r3, [pc, #580]	; (c53a0 <_strtod_l+0xbf8>)
   c515c:	429a      	cmp	r2, r3
   c515e:	f040 80b0 	bne.w	c52c2 <_strtod_l+0xb1a>
   c5162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5166:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c516a:	ec4b ab10 	vmov	d0, sl, fp
   c516e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5172:	f001 f911 	bl	c6398 <__ulp>
   c5176:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c517a:	ec53 2b10 	vmov	r2, r3, d0
   c517e:	f7fe fe3f 	bl	c3e00 <__aeabi_dmul>
   c5182:	4652      	mov	r2, sl
   c5184:	465b      	mov	r3, fp
   c5186:	f7fe fc85 	bl	c3a94 <__adddf3>
   c518a:	460b      	mov	r3, r1
   c518c:	4983      	ldr	r1, [pc, #524]	; (c539c <_strtod_l+0xbf4>)
   c518e:	4a85      	ldr	r2, [pc, #532]	; (c53a4 <_strtod_l+0xbfc>)
   c5190:	4019      	ands	r1, r3
   c5192:	4291      	cmp	r1, r2
   c5194:	4682      	mov	sl, r0
   c5196:	d960      	bls.n	c525a <_strtod_l+0xab2>
   c5198:	ee18 3a90 	vmov	r3, s17
   c519c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c51a0:	4293      	cmp	r3, r2
   c51a2:	d104      	bne.n	c51ae <_strtod_l+0xa06>
   c51a4:	ee18 3a10 	vmov	r3, s16
   c51a8:	3301      	adds	r3, #1
   c51aa:	f43f ad45 	beq.w	c4c38 <_strtod_l+0x490>
   c51ae:	f8df b200 	ldr.w	fp, [pc, #512]	; c53b0 <_strtod_l+0xc08>
   c51b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c51b6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c51b8:	4620      	mov	r0, r4
   c51ba:	f000 fdbb 	bl	c5d34 <_Bfree>
   c51be:	9905      	ldr	r1, [sp, #20]
   c51c0:	4620      	mov	r0, r4
   c51c2:	f000 fdb7 	bl	c5d34 <_Bfree>
   c51c6:	4631      	mov	r1, r6
   c51c8:	4620      	mov	r0, r4
   c51ca:	f000 fdb3 	bl	c5d34 <_Bfree>
   c51ce:	4629      	mov	r1, r5
   c51d0:	4620      	mov	r0, r4
   c51d2:	f000 fdaf 	bl	c5d34 <_Bfree>
   c51d6:	e61a      	b.n	c4e0e <_strtod_l+0x666>
   c51d8:	f1ba 0f00 	cmp.w	sl, #0
   c51dc:	d11b      	bne.n	c5216 <_strtod_l+0xa6e>
   c51de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c51e2:	b9f3      	cbnz	r3, c5222 <_strtod_l+0xa7a>
   c51e4:	4b6c      	ldr	r3, [pc, #432]	; (c5398 <_strtod_l+0xbf0>)
   c51e6:	2200      	movs	r2, #0
   c51e8:	4640      	mov	r0, r8
   c51ea:	4649      	mov	r1, r9
   c51ec:	f7ff f87a 	bl	c42e4 <__aeabi_dcmplt>
   c51f0:	b9d0      	cbnz	r0, c5228 <_strtod_l+0xa80>
   c51f2:	4640      	mov	r0, r8
   c51f4:	4649      	mov	r1, r9
   c51f6:	4b6c      	ldr	r3, [pc, #432]	; (c53a8 <_strtod_l+0xc00>)
   c51f8:	2200      	movs	r2, #0
   c51fa:	f7fe fe01 	bl	c3e00 <__aeabi_dmul>
   c51fe:	4680      	mov	r8, r0
   c5200:	4689      	mov	r9, r1
   c5202:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c5206:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c520a:	9315      	str	r3, [sp, #84]	; 0x54
   c520c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5210:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5214:	e79d      	b.n	c5152 <_strtod_l+0x9aa>
   c5216:	f1ba 0f01 	cmp.w	sl, #1
   c521a:	d102      	bne.n	c5222 <_strtod_l+0xa7a>
   c521c:	2f00      	cmp	r7, #0
   c521e:	f43f ad83 	beq.w	c4d28 <_strtod_l+0x580>
   c5222:	4b62      	ldr	r3, [pc, #392]	; (c53ac <_strtod_l+0xc04>)
   c5224:	2200      	movs	r2, #0
   c5226:	e78e      	b.n	c5146 <_strtod_l+0x99e>
   c5228:	f8df 917c 	ldr.w	r9, [pc, #380]	; c53a8 <_strtod_l+0xc00>
   c522c:	f04f 0800 	mov.w	r8, #0
   c5230:	e7e7      	b.n	c5202 <_strtod_l+0xa5a>
   c5232:	4b5d      	ldr	r3, [pc, #372]	; (c53a8 <_strtod_l+0xc00>)
   c5234:	4640      	mov	r0, r8
   c5236:	4649      	mov	r1, r9
   c5238:	2200      	movs	r2, #0
   c523a:	f7fe fde1 	bl	c3e00 <__aeabi_dmul>
   c523e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5240:	4680      	mov	r8, r0
   c5242:	4689      	mov	r9, r1
   c5244:	b933      	cbnz	r3, c5254 <_strtod_l+0xaac>
   c5246:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c524a:	900e      	str	r0, [sp, #56]	; 0x38
   c524c:	930f      	str	r3, [sp, #60]	; 0x3c
   c524e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c5252:	e7dd      	b.n	c5210 <_strtod_l+0xa68>
   c5254:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5258:	e7f9      	b.n	c524e <_strtod_l+0xaa6>
   c525a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c525e:	9b04      	ldr	r3, [sp, #16]
   c5260:	2b00      	cmp	r3, #0
   c5262:	d1a8      	bne.n	c51b6 <_strtod_l+0xa0e>
   c5264:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c5268:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c526a:	0d1b      	lsrs	r3, r3, #20
   c526c:	051b      	lsls	r3, r3, #20
   c526e:	429a      	cmp	r2, r3
   c5270:	d1a1      	bne.n	c51b6 <_strtod_l+0xa0e>
   c5272:	4640      	mov	r0, r8
   c5274:	4649      	mov	r1, r9
   c5276:	f001 fa05 	bl	c6684 <__aeabi_d2lz>
   c527a:	f7fe fd93 	bl	c3da4 <__aeabi_l2d>
   c527e:	4602      	mov	r2, r0
   c5280:	460b      	mov	r3, r1
   c5282:	4640      	mov	r0, r8
   c5284:	4649      	mov	r1, r9
   c5286:	f7fe fc03 	bl	c3a90 <__aeabi_dsub>
   c528a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c528c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5290:	ea43 030a 	orr.w	r3, r3, sl
   c5294:	4313      	orrs	r3, r2
   c5296:	4680      	mov	r8, r0
   c5298:	4689      	mov	r9, r1
   c529a:	d055      	beq.n	c5348 <_strtod_l+0xba0>
   c529c:	a336      	add	r3, pc, #216	; (adr r3, c5378 <_strtod_l+0xbd0>)
   c529e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52a2:	f7ff f81f 	bl	c42e4 <__aeabi_dcmplt>
   c52a6:	2800      	cmp	r0, #0
   c52a8:	f47f acd0 	bne.w	c4c4c <_strtod_l+0x4a4>
   c52ac:	a334      	add	r3, pc, #208	; (adr r3, c5380 <_strtod_l+0xbd8>)
   c52ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52b2:	4640      	mov	r0, r8
   c52b4:	4649      	mov	r1, r9
   c52b6:	f7ff f833 	bl	c4320 <__aeabi_dcmpgt>
   c52ba:	2800      	cmp	r0, #0
   c52bc:	f43f af7b 	beq.w	c51b6 <_strtod_l+0xa0e>
   c52c0:	e4c4      	b.n	c4c4c <_strtod_l+0x4a4>
   c52c2:	9b04      	ldr	r3, [sp, #16]
   c52c4:	b333      	cbz	r3, c5314 <_strtod_l+0xb6c>
   c52c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c52c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c52cc:	d822      	bhi.n	c5314 <_strtod_l+0xb6c>
   c52ce:	a32e      	add	r3, pc, #184	; (adr r3, c5388 <_strtod_l+0xbe0>)
   c52d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52d4:	4640      	mov	r0, r8
   c52d6:	4649      	mov	r1, r9
   c52d8:	f7ff f80e 	bl	c42f8 <__aeabi_dcmple>
   c52dc:	b1a0      	cbz	r0, c5308 <_strtod_l+0xb60>
   c52de:	4649      	mov	r1, r9
   c52e0:	4640      	mov	r0, r8
   c52e2:	f7ff f865 	bl	c43b0 <__aeabi_d2uiz>
   c52e6:	2801      	cmp	r0, #1
   c52e8:	bf38      	it	cc
   c52ea:	2001      	movcc	r0, #1
   c52ec:	f7fe fd0e 	bl	c3d0c <__aeabi_ui2d>
   c52f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c52f2:	4680      	mov	r8, r0
   c52f4:	4689      	mov	r9, r1
   c52f6:	bb23      	cbnz	r3, c5342 <_strtod_l+0xb9a>
   c52f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c52fc:	9010      	str	r0, [sp, #64]	; 0x40
   c52fe:	9311      	str	r3, [sp, #68]	; 0x44
   c5300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c5304:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c530a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c530c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5310:	1a9b      	subs	r3, r3, r2
   c5312:	9309      	str	r3, [sp, #36]	; 0x24
   c5314:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5318:	eeb0 0a48 	vmov.f32	s0, s16
   c531c:	eef0 0a68 	vmov.f32	s1, s17
   c5320:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5324:	f001 f838 	bl	c6398 <__ulp>
   c5328:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c532c:	ec53 2b10 	vmov	r2, r3, d0
   c5330:	f7fe fd66 	bl	c3e00 <__aeabi_dmul>
   c5334:	ec53 2b18 	vmov	r2, r3, d8
   c5338:	f7fe fbac 	bl	c3a94 <__adddf3>
   c533c:	4682      	mov	sl, r0
   c533e:	468b      	mov	fp, r1
   c5340:	e78d      	b.n	c525e <_strtod_l+0xab6>
   c5342:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c5346:	e7db      	b.n	c5300 <_strtod_l+0xb58>
   c5348:	a311      	add	r3, pc, #68	; (adr r3, c5390 <_strtod_l+0xbe8>)
   c534a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c534e:	f7fe ffc9 	bl	c42e4 <__aeabi_dcmplt>
   c5352:	e7b2      	b.n	c52ba <_strtod_l+0xb12>
   c5354:	2300      	movs	r3, #0
   c5356:	930a      	str	r3, [sp, #40]	; 0x28
   c5358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c535a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c535c:	6013      	str	r3, [r2, #0]
   c535e:	f7ff ba6b 	b.w	c4838 <_strtod_l+0x90>
   c5362:	2a65      	cmp	r2, #101	; 0x65
   c5364:	f43f ab5f 	beq.w	c4a26 <_strtod_l+0x27e>
   c5368:	2a45      	cmp	r2, #69	; 0x45
   c536a:	f43f ab5c 	beq.w	c4a26 <_strtod_l+0x27e>
   c536e:	2301      	movs	r3, #1
   c5370:	f7ff bb94 	b.w	c4a9c <_strtod_l+0x2f4>
   c5374:	f3af 8000 	nop.w
   c5378:	94a03595 	.word	0x94a03595
   c537c:	3fdfffff 	.word	0x3fdfffff
   c5380:	35afe535 	.word	0x35afe535
   c5384:	3fe00000 	.word	0x3fe00000
   c5388:	ffc00000 	.word	0xffc00000
   c538c:	41dfffff 	.word	0x41dfffff
   c5390:	94a03595 	.word	0x94a03595
   c5394:	3fcfffff 	.word	0x3fcfffff
   c5398:	3ff00000 	.word	0x3ff00000
   c539c:	7ff00000 	.word	0x7ff00000
   c53a0:	7fe00000 	.word	0x7fe00000
   c53a4:	7c9fffff 	.word	0x7c9fffff
   c53a8:	3fe00000 	.word	0x3fe00000
   c53ac:	bff00000 	.word	0xbff00000
   c53b0:	7fefffff 	.word	0x7fefffff

000c53b4 <strtod>:
   c53b4:	460a      	mov	r2, r1
   c53b6:	4601      	mov	r1, r0
   c53b8:	4802      	ldr	r0, [pc, #8]	; (c53c4 <strtod+0x10>)
   c53ba:	4b03      	ldr	r3, [pc, #12]	; (c53c8 <strtod+0x14>)
   c53bc:	6800      	ldr	r0, [r0, #0]
   c53be:	f7ff b9f3 	b.w	c47a8 <_strtod_l>
   c53c2:	bf00      	nop
   c53c4:	2003db48 	.word	0x2003db48
   c53c8:	2003dbb4 	.word	0x2003dbb4

000c53cc <_strtol_l.constprop.0>:
   c53cc:	2b01      	cmp	r3, #1
   c53ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c53d2:	d001      	beq.n	c53d8 <_strtol_l.constprop.0+0xc>
   c53d4:	2b24      	cmp	r3, #36	; 0x24
   c53d6:	d906      	bls.n	c53e6 <_strtol_l.constprop.0+0x1a>
   c53d8:	f7f8 ff96 	bl	be308 <__errno>
   c53dc:	2316      	movs	r3, #22
   c53de:	6003      	str	r3, [r0, #0]
   c53e0:	2000      	movs	r0, #0
   c53e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c53e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c54cc <_strtol_l.constprop.0+0x100>
   c53ea:	460d      	mov	r5, r1
   c53ec:	462e      	mov	r6, r5
   c53ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   c53f2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c53f6:	f017 0708 	ands.w	r7, r7, #8
   c53fa:	d1f7      	bne.n	c53ec <_strtol_l.constprop.0+0x20>
   c53fc:	2c2d      	cmp	r4, #45	; 0x2d
   c53fe:	d132      	bne.n	c5466 <_strtol_l.constprop.0+0x9a>
   c5400:	782c      	ldrb	r4, [r5, #0]
   c5402:	2701      	movs	r7, #1
   c5404:	1cb5      	adds	r5, r6, #2
   c5406:	2b00      	cmp	r3, #0
   c5408:	d05b      	beq.n	c54c2 <_strtol_l.constprop.0+0xf6>
   c540a:	2b10      	cmp	r3, #16
   c540c:	d109      	bne.n	c5422 <_strtol_l.constprop.0+0x56>
   c540e:	2c30      	cmp	r4, #48	; 0x30
   c5410:	d107      	bne.n	c5422 <_strtol_l.constprop.0+0x56>
   c5412:	782c      	ldrb	r4, [r5, #0]
   c5414:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5418:	2c58      	cmp	r4, #88	; 0x58
   c541a:	d14d      	bne.n	c54b8 <_strtol_l.constprop.0+0xec>
   c541c:	786c      	ldrb	r4, [r5, #1]
   c541e:	2310      	movs	r3, #16
   c5420:	3502      	adds	r5, #2
   c5422:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c5426:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c542a:	f04f 0c00 	mov.w	ip, #0
   c542e:	fbb8 f9f3 	udiv	r9, r8, r3
   c5432:	4666      	mov	r6, ip
   c5434:	fb03 8a19 	mls	sl, r3, r9, r8
   c5438:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c543c:	f1be 0f09 	cmp.w	lr, #9
   c5440:	d816      	bhi.n	c5470 <_strtol_l.constprop.0+0xa4>
   c5442:	4674      	mov	r4, lr
   c5444:	42a3      	cmp	r3, r4
   c5446:	dd24      	ble.n	c5492 <_strtol_l.constprop.0+0xc6>
   c5448:	f1bc 0f00 	cmp.w	ip, #0
   c544c:	db1e      	blt.n	c548c <_strtol_l.constprop.0+0xc0>
   c544e:	45b1      	cmp	r9, r6
   c5450:	d31c      	bcc.n	c548c <_strtol_l.constprop.0+0xc0>
   c5452:	d101      	bne.n	c5458 <_strtol_l.constprop.0+0x8c>
   c5454:	45a2      	cmp	sl, r4
   c5456:	db19      	blt.n	c548c <_strtol_l.constprop.0+0xc0>
   c5458:	fb06 4603 	mla	r6, r6, r3, r4
   c545c:	f04f 0c01 	mov.w	ip, #1
   c5460:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5464:	e7e8      	b.n	c5438 <_strtol_l.constprop.0+0x6c>
   c5466:	2c2b      	cmp	r4, #43	; 0x2b
   c5468:	bf04      	itt	eq
   c546a:	782c      	ldrbeq	r4, [r5, #0]
   c546c:	1cb5      	addeq	r5, r6, #2
   c546e:	e7ca      	b.n	c5406 <_strtol_l.constprop.0+0x3a>
   c5470:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c5474:	f1be 0f19 	cmp.w	lr, #25
   c5478:	d801      	bhi.n	c547e <_strtol_l.constprop.0+0xb2>
   c547a:	3c37      	subs	r4, #55	; 0x37
   c547c:	e7e2      	b.n	c5444 <_strtol_l.constprop.0+0x78>
   c547e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c5482:	f1be 0f19 	cmp.w	lr, #25
   c5486:	d804      	bhi.n	c5492 <_strtol_l.constprop.0+0xc6>
   c5488:	3c57      	subs	r4, #87	; 0x57
   c548a:	e7db      	b.n	c5444 <_strtol_l.constprop.0+0x78>
   c548c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c5490:	e7e6      	b.n	c5460 <_strtol_l.constprop.0+0x94>
   c5492:	f1bc 0f00 	cmp.w	ip, #0
   c5496:	da05      	bge.n	c54a4 <_strtol_l.constprop.0+0xd8>
   c5498:	2322      	movs	r3, #34	; 0x22
   c549a:	6003      	str	r3, [r0, #0]
   c549c:	4646      	mov	r6, r8
   c549e:	b942      	cbnz	r2, c54b2 <_strtol_l.constprop.0+0xe6>
   c54a0:	4630      	mov	r0, r6
   c54a2:	e79e      	b.n	c53e2 <_strtol_l.constprop.0+0x16>
   c54a4:	b107      	cbz	r7, c54a8 <_strtol_l.constprop.0+0xdc>
   c54a6:	4276      	negs	r6, r6
   c54a8:	2a00      	cmp	r2, #0
   c54aa:	d0f9      	beq.n	c54a0 <_strtol_l.constprop.0+0xd4>
   c54ac:	f1bc 0f00 	cmp.w	ip, #0
   c54b0:	d000      	beq.n	c54b4 <_strtol_l.constprop.0+0xe8>
   c54b2:	1e69      	subs	r1, r5, #1
   c54b4:	6011      	str	r1, [r2, #0]
   c54b6:	e7f3      	b.n	c54a0 <_strtol_l.constprop.0+0xd4>
   c54b8:	2430      	movs	r4, #48	; 0x30
   c54ba:	2b00      	cmp	r3, #0
   c54bc:	d1b1      	bne.n	c5422 <_strtol_l.constprop.0+0x56>
   c54be:	2308      	movs	r3, #8
   c54c0:	e7af      	b.n	c5422 <_strtol_l.constprop.0+0x56>
   c54c2:	2c30      	cmp	r4, #48	; 0x30
   c54c4:	d0a5      	beq.n	c5412 <_strtol_l.constprop.0+0x46>
   c54c6:	230a      	movs	r3, #10
   c54c8:	e7ab      	b.n	c5422 <_strtol_l.constprop.0+0x56>
   c54ca:	bf00      	nop
   c54cc:	000c86a9 	.word	0x000c86a9

000c54d0 <strtol>:
   c54d0:	4613      	mov	r3, r2
   c54d2:	460a      	mov	r2, r1
   c54d4:	4601      	mov	r1, r0
   c54d6:	4802      	ldr	r0, [pc, #8]	; (c54e0 <strtol+0x10>)
   c54d8:	6800      	ldr	r0, [r0, #0]
   c54da:	f7ff bf77 	b.w	c53cc <_strtol_l.constprop.0>
   c54de:	bf00      	nop
   c54e0:	2003db48 	.word	0x2003db48

000c54e4 <__register_exitproc>:
   c54e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c54e8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c55a4 <__register_exitproc+0xc0>
   c54ec:	4606      	mov	r6, r0
   c54ee:	f8d8 0000 	ldr.w	r0, [r8]
   c54f2:	461f      	mov	r7, r3
   c54f4:	460d      	mov	r5, r1
   c54f6:	4691      	mov	r9, r2
   c54f8:	f000 fbc6 	bl	c5c88 <__retarget_lock_acquire_recursive>
   c54fc:	4b25      	ldr	r3, [pc, #148]	; (c5594 <__register_exitproc+0xb0>)
   c54fe:	681c      	ldr	r4, [r3, #0]
   c5500:	b934      	cbnz	r4, c5510 <__register_exitproc+0x2c>
   c5502:	4c25      	ldr	r4, [pc, #148]	; (c5598 <__register_exitproc+0xb4>)
   c5504:	601c      	str	r4, [r3, #0]
   c5506:	4b25      	ldr	r3, [pc, #148]	; (c559c <__register_exitproc+0xb8>)
   c5508:	b113      	cbz	r3, c5510 <__register_exitproc+0x2c>
   c550a:	681b      	ldr	r3, [r3, #0]
   c550c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5510:	6863      	ldr	r3, [r4, #4]
   c5512:	2b1f      	cmp	r3, #31
   c5514:	dd07      	ble.n	c5526 <__register_exitproc+0x42>
   c5516:	f8d8 0000 	ldr.w	r0, [r8]
   c551a:	f000 fbb7 	bl	c5c8c <__retarget_lock_release_recursive>
   c551e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c5522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5526:	b34e      	cbz	r6, c557c <__register_exitproc+0x98>
   c5528:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c552c:	b988      	cbnz	r0, c5552 <__register_exitproc+0x6e>
   c552e:	4b1c      	ldr	r3, [pc, #112]	; (c55a0 <__register_exitproc+0xbc>)
   c5530:	b923      	cbnz	r3, c553c <__register_exitproc+0x58>
   c5532:	f8d8 0000 	ldr.w	r0, [r8]
   c5536:	f000 fba8 	bl	c5c8a <__retarget_lock_release>
   c553a:	e7f0      	b.n	c551e <__register_exitproc+0x3a>
   c553c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5540:	f7f8 fe9a 	bl	be278 <malloc>
   c5544:	2800      	cmp	r0, #0
   c5546:	d0f4      	beq.n	c5532 <__register_exitproc+0x4e>
   c5548:	2300      	movs	r3, #0
   c554a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c554e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c5552:	6863      	ldr	r3, [r4, #4]
   c5554:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5558:	2201      	movs	r2, #1
   c555a:	409a      	lsls	r2, r3
   c555c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5560:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c5564:	4313      	orrs	r3, r2
   c5566:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c556a:	2e02      	cmp	r6, #2
   c556c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5570:	bf02      	ittt	eq
   c5572:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c5576:	4313      	orreq	r3, r2
   c5578:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c557c:	6863      	ldr	r3, [r4, #4]
   c557e:	f8d8 0000 	ldr.w	r0, [r8]
   c5582:	1c5a      	adds	r2, r3, #1
   c5584:	3302      	adds	r3, #2
   c5586:	6062      	str	r2, [r4, #4]
   c5588:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c558c:	f000 fb7e 	bl	c5c8c <__retarget_lock_release_recursive>
   c5590:	2000      	movs	r0, #0
   c5592:	e7c6      	b.n	c5522 <__register_exitproc+0x3e>
   c5594:	2003e7e8 	.word	0x2003e7e8
   c5598:	2003e75c 	.word	0x2003e75c
   c559c:	00000000 	.word	0x00000000
   c55a0:	000be279 	.word	0x000be279
   c55a4:	2003dbac 	.word	0x2003dbac

000c55a8 <rshift>:
   c55a8:	6903      	ldr	r3, [r0, #16]
   c55aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c55ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c55b2:	ea4f 1261 	mov.w	r2, r1, asr #5
   c55b6:	f100 0414 	add.w	r4, r0, #20
   c55ba:	dd45      	ble.n	c5648 <rshift+0xa0>
   c55bc:	f011 011f 	ands.w	r1, r1, #31
   c55c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c55c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c55c8:	d10c      	bne.n	c55e4 <rshift+0x3c>
   c55ca:	f100 0710 	add.w	r7, r0, #16
   c55ce:	4629      	mov	r1, r5
   c55d0:	42b1      	cmp	r1, r6
   c55d2:	d334      	bcc.n	c563e <rshift+0x96>
   c55d4:	1a9b      	subs	r3, r3, r2
   c55d6:	009b      	lsls	r3, r3, #2
   c55d8:	1eea      	subs	r2, r5, #3
   c55da:	4296      	cmp	r6, r2
   c55dc:	bf38      	it	cc
   c55de:	2300      	movcc	r3, #0
   c55e0:	4423      	add	r3, r4
   c55e2:	e015      	b.n	c5610 <rshift+0x68>
   c55e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c55e8:	f1c1 0820 	rsb	r8, r1, #32
   c55ec:	40cf      	lsrs	r7, r1
   c55ee:	f105 0e04 	add.w	lr, r5, #4
   c55f2:	46a1      	mov	r9, r4
   c55f4:	4576      	cmp	r6, lr
   c55f6:	46f4      	mov	ip, lr
   c55f8:	d815      	bhi.n	c5626 <rshift+0x7e>
   c55fa:	1a9a      	subs	r2, r3, r2
   c55fc:	0092      	lsls	r2, r2, #2
   c55fe:	3a04      	subs	r2, #4
   c5600:	3501      	adds	r5, #1
   c5602:	42ae      	cmp	r6, r5
   c5604:	bf38      	it	cc
   c5606:	2200      	movcc	r2, #0
   c5608:	18a3      	adds	r3, r4, r2
   c560a:	50a7      	str	r7, [r4, r2]
   c560c:	b107      	cbz	r7, c5610 <rshift+0x68>
   c560e:	3304      	adds	r3, #4
   c5610:	1b1a      	subs	r2, r3, r4
   c5612:	42a3      	cmp	r3, r4
   c5614:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5618:	bf08      	it	eq
   c561a:	2300      	moveq	r3, #0
   c561c:	6102      	str	r2, [r0, #16]
   c561e:	bf08      	it	eq
   c5620:	6143      	streq	r3, [r0, #20]
   c5622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5626:	f8dc c000 	ldr.w	ip, [ip]
   c562a:	fa0c fc08 	lsl.w	ip, ip, r8
   c562e:	ea4c 0707 	orr.w	r7, ip, r7
   c5632:	f849 7b04 	str.w	r7, [r9], #4
   c5636:	f85e 7b04 	ldr.w	r7, [lr], #4
   c563a:	40cf      	lsrs	r7, r1
   c563c:	e7da      	b.n	c55f4 <rshift+0x4c>
   c563e:	f851 cb04 	ldr.w	ip, [r1], #4
   c5642:	f847 cf04 	str.w	ip, [r7, #4]!
   c5646:	e7c3      	b.n	c55d0 <rshift+0x28>
   c5648:	4623      	mov	r3, r4
   c564a:	e7e1      	b.n	c5610 <rshift+0x68>

000c564c <__hexdig_fun>:
   c564c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5650:	2b09      	cmp	r3, #9
   c5652:	d802      	bhi.n	c565a <__hexdig_fun+0xe>
   c5654:	3820      	subs	r0, #32
   c5656:	b2c0      	uxtb	r0, r0
   c5658:	4770      	bx	lr
   c565a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c565e:	2b05      	cmp	r3, #5
   c5660:	d801      	bhi.n	c5666 <__hexdig_fun+0x1a>
   c5662:	3847      	subs	r0, #71	; 0x47
   c5664:	e7f7      	b.n	c5656 <__hexdig_fun+0xa>
   c5666:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c566a:	2b05      	cmp	r3, #5
   c566c:	d801      	bhi.n	c5672 <__hexdig_fun+0x26>
   c566e:	3827      	subs	r0, #39	; 0x27
   c5670:	e7f1      	b.n	c5656 <__hexdig_fun+0xa>
   c5672:	2000      	movs	r0, #0
   c5674:	4770      	bx	lr
	...

000c5678 <__gethex>:
   c5678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c567c:	ed2d 8b02 	vpush	{d8}
   c5680:	b089      	sub	sp, #36	; 0x24
   c5682:	ee08 0a10 	vmov	s16, r0
   c5686:	9304      	str	r3, [sp, #16]
   c5688:	4bb4      	ldr	r3, [pc, #720]	; (c595c <__gethex+0x2e4>)
   c568a:	681b      	ldr	r3, [r3, #0]
   c568c:	9301      	str	r3, [sp, #4]
   c568e:	4618      	mov	r0, r3
   c5690:	468b      	mov	fp, r1
   c5692:	4690      	mov	r8, r2
   c5694:	f7fe fff3 	bl	c467e <strlen>
   c5698:	9b01      	ldr	r3, [sp, #4]
   c569a:	f8db 2000 	ldr.w	r2, [fp]
   c569e:	4403      	add	r3, r0
   c56a0:	4682      	mov	sl, r0
   c56a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c56a6:	9305      	str	r3, [sp, #20]
   c56a8:	1c93      	adds	r3, r2, #2
   c56aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c56ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c56b2:	32fe      	adds	r2, #254	; 0xfe
   c56b4:	18d1      	adds	r1, r2, r3
   c56b6:	461f      	mov	r7, r3
   c56b8:	f813 0b01 	ldrb.w	r0, [r3], #1
   c56bc:	9100      	str	r1, [sp, #0]
   c56be:	2830      	cmp	r0, #48	; 0x30
   c56c0:	d0f8      	beq.n	c56b4 <__gethex+0x3c>
   c56c2:	f7ff ffc3 	bl	c564c <__hexdig_fun>
   c56c6:	4604      	mov	r4, r0
   c56c8:	2800      	cmp	r0, #0
   c56ca:	d13a      	bne.n	c5742 <__gethex+0xca>
   c56cc:	9901      	ldr	r1, [sp, #4]
   c56ce:	4652      	mov	r2, sl
   c56d0:	4638      	mov	r0, r7
   c56d2:	f7fe ffef 	bl	c46b4 <strncmp>
   c56d6:	4605      	mov	r5, r0
   c56d8:	2800      	cmp	r0, #0
   c56da:	d168      	bne.n	c57ae <__gethex+0x136>
   c56dc:	f817 000a 	ldrb.w	r0, [r7, sl]
   c56e0:	eb07 060a 	add.w	r6, r7, sl
   c56e4:	f7ff ffb2 	bl	c564c <__hexdig_fun>
   c56e8:	2800      	cmp	r0, #0
   c56ea:	d062      	beq.n	c57b2 <__gethex+0x13a>
   c56ec:	4633      	mov	r3, r6
   c56ee:	7818      	ldrb	r0, [r3, #0]
   c56f0:	2830      	cmp	r0, #48	; 0x30
   c56f2:	461f      	mov	r7, r3
   c56f4:	f103 0301 	add.w	r3, r3, #1
   c56f8:	d0f9      	beq.n	c56ee <__gethex+0x76>
   c56fa:	f7ff ffa7 	bl	c564c <__hexdig_fun>
   c56fe:	2301      	movs	r3, #1
   c5700:	fab0 f480 	clz	r4, r0
   c5704:	0964      	lsrs	r4, r4, #5
   c5706:	4635      	mov	r5, r6
   c5708:	9300      	str	r3, [sp, #0]
   c570a:	463a      	mov	r2, r7
   c570c:	4616      	mov	r6, r2
   c570e:	3201      	adds	r2, #1
   c5710:	7830      	ldrb	r0, [r6, #0]
   c5712:	f7ff ff9b 	bl	c564c <__hexdig_fun>
   c5716:	2800      	cmp	r0, #0
   c5718:	d1f8      	bne.n	c570c <__gethex+0x94>
   c571a:	9901      	ldr	r1, [sp, #4]
   c571c:	4652      	mov	r2, sl
   c571e:	4630      	mov	r0, r6
   c5720:	f7fe ffc8 	bl	c46b4 <strncmp>
   c5724:	b980      	cbnz	r0, c5748 <__gethex+0xd0>
   c5726:	b94d      	cbnz	r5, c573c <__gethex+0xc4>
   c5728:	eb06 050a 	add.w	r5, r6, sl
   c572c:	462a      	mov	r2, r5
   c572e:	4616      	mov	r6, r2
   c5730:	3201      	adds	r2, #1
   c5732:	7830      	ldrb	r0, [r6, #0]
   c5734:	f7ff ff8a 	bl	c564c <__hexdig_fun>
   c5738:	2800      	cmp	r0, #0
   c573a:	d1f8      	bne.n	c572e <__gethex+0xb6>
   c573c:	1bad      	subs	r5, r5, r6
   c573e:	00ad      	lsls	r5, r5, #2
   c5740:	e004      	b.n	c574c <__gethex+0xd4>
   c5742:	2400      	movs	r4, #0
   c5744:	4625      	mov	r5, r4
   c5746:	e7e0      	b.n	c570a <__gethex+0x92>
   c5748:	2d00      	cmp	r5, #0
   c574a:	d1f7      	bne.n	c573c <__gethex+0xc4>
   c574c:	7833      	ldrb	r3, [r6, #0]
   c574e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c5752:	2b50      	cmp	r3, #80	; 0x50
   c5754:	d13b      	bne.n	c57ce <__gethex+0x156>
   c5756:	7873      	ldrb	r3, [r6, #1]
   c5758:	2b2b      	cmp	r3, #43	; 0x2b
   c575a:	d02c      	beq.n	c57b6 <__gethex+0x13e>
   c575c:	2b2d      	cmp	r3, #45	; 0x2d
   c575e:	d02e      	beq.n	c57be <__gethex+0x146>
   c5760:	1c71      	adds	r1, r6, #1
   c5762:	f04f 0900 	mov.w	r9, #0
   c5766:	7808      	ldrb	r0, [r1, #0]
   c5768:	f7ff ff70 	bl	c564c <__hexdig_fun>
   c576c:	1e43      	subs	r3, r0, #1
   c576e:	b2db      	uxtb	r3, r3
   c5770:	2b18      	cmp	r3, #24
   c5772:	d82c      	bhi.n	c57ce <__gethex+0x156>
   c5774:	f1a0 0210 	sub.w	r2, r0, #16
   c5778:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c577c:	f7ff ff66 	bl	c564c <__hexdig_fun>
   c5780:	1e43      	subs	r3, r0, #1
   c5782:	b2db      	uxtb	r3, r3
   c5784:	2b18      	cmp	r3, #24
   c5786:	d91d      	bls.n	c57c4 <__gethex+0x14c>
   c5788:	f1b9 0f00 	cmp.w	r9, #0
   c578c:	d000      	beq.n	c5790 <__gethex+0x118>
   c578e:	4252      	negs	r2, r2
   c5790:	4415      	add	r5, r2
   c5792:	f8cb 1000 	str.w	r1, [fp]
   c5796:	b1e4      	cbz	r4, c57d2 <__gethex+0x15a>
   c5798:	9b00      	ldr	r3, [sp, #0]
   c579a:	2b00      	cmp	r3, #0
   c579c:	bf14      	ite	ne
   c579e:	2700      	movne	r7, #0
   c57a0:	2706      	moveq	r7, #6
   c57a2:	4638      	mov	r0, r7
   c57a4:	b009      	add	sp, #36	; 0x24
   c57a6:	ecbd 8b02 	vpop	{d8}
   c57aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c57ae:	463e      	mov	r6, r7
   c57b0:	4625      	mov	r5, r4
   c57b2:	2401      	movs	r4, #1
   c57b4:	e7ca      	b.n	c574c <__gethex+0xd4>
   c57b6:	f04f 0900 	mov.w	r9, #0
   c57ba:	1cb1      	adds	r1, r6, #2
   c57bc:	e7d3      	b.n	c5766 <__gethex+0xee>
   c57be:	f04f 0901 	mov.w	r9, #1
   c57c2:	e7fa      	b.n	c57ba <__gethex+0x142>
   c57c4:	230a      	movs	r3, #10
   c57c6:	fb03 0202 	mla	r2, r3, r2, r0
   c57ca:	3a10      	subs	r2, #16
   c57cc:	e7d4      	b.n	c5778 <__gethex+0x100>
   c57ce:	4631      	mov	r1, r6
   c57d0:	e7df      	b.n	c5792 <__gethex+0x11a>
   c57d2:	1bf3      	subs	r3, r6, r7
   c57d4:	3b01      	subs	r3, #1
   c57d6:	4621      	mov	r1, r4
   c57d8:	2b07      	cmp	r3, #7
   c57da:	dc0b      	bgt.n	c57f4 <__gethex+0x17c>
   c57dc:	ee18 0a10 	vmov	r0, s16
   c57e0:	f000 fa68 	bl	c5cb4 <_Balloc>
   c57e4:	4604      	mov	r4, r0
   c57e6:	b940      	cbnz	r0, c57fa <__gethex+0x182>
   c57e8:	4b5d      	ldr	r3, [pc, #372]	; (c5960 <__gethex+0x2e8>)
   c57ea:	4602      	mov	r2, r0
   c57ec:	21de      	movs	r1, #222	; 0xde
   c57ee:	485d      	ldr	r0, [pc, #372]	; (c5964 <__gethex+0x2ec>)
   c57f0:	f7f8 fd92 	bl	be318 <__assert_func>
   c57f4:	3101      	adds	r1, #1
   c57f6:	105b      	asrs	r3, r3, #1
   c57f8:	e7ee      	b.n	c57d8 <__gethex+0x160>
   c57fa:	f100 0914 	add.w	r9, r0, #20
   c57fe:	f04f 0b00 	mov.w	fp, #0
   c5802:	f1ca 0301 	rsb	r3, sl, #1
   c5806:	f8cd 9008 	str.w	r9, [sp, #8]
   c580a:	f8cd b000 	str.w	fp, [sp]
   c580e:	9306      	str	r3, [sp, #24]
   c5810:	42b7      	cmp	r7, r6
   c5812:	d340      	bcc.n	c5896 <__gethex+0x21e>
   c5814:	9802      	ldr	r0, [sp, #8]
   c5816:	9b00      	ldr	r3, [sp, #0]
   c5818:	f840 3b04 	str.w	r3, [r0], #4
   c581c:	eba0 0009 	sub.w	r0, r0, r9
   c5820:	1080      	asrs	r0, r0, #2
   c5822:	0146      	lsls	r6, r0, #5
   c5824:	6120      	str	r0, [r4, #16]
   c5826:	4618      	mov	r0, r3
   c5828:	f000 fb36 	bl	c5e98 <__hi0bits>
   c582c:	1a30      	subs	r0, r6, r0
   c582e:	f8d8 6000 	ldr.w	r6, [r8]
   c5832:	42b0      	cmp	r0, r6
   c5834:	dd63      	ble.n	c58fe <__gethex+0x286>
   c5836:	1b87      	subs	r7, r0, r6
   c5838:	4639      	mov	r1, r7
   c583a:	4620      	mov	r0, r4
   c583c:	f000 feda 	bl	c65f4 <__any_on>
   c5840:	4682      	mov	sl, r0
   c5842:	b1a8      	cbz	r0, c5870 <__gethex+0x1f8>
   c5844:	1e7b      	subs	r3, r7, #1
   c5846:	1159      	asrs	r1, r3, #5
   c5848:	f003 021f 	and.w	r2, r3, #31
   c584c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5850:	f04f 0a01 	mov.w	sl, #1
   c5854:	fa0a f202 	lsl.w	r2, sl, r2
   c5858:	420a      	tst	r2, r1
   c585a:	d009      	beq.n	c5870 <__gethex+0x1f8>
   c585c:	4553      	cmp	r3, sl
   c585e:	dd05      	ble.n	c586c <__gethex+0x1f4>
   c5860:	1eb9      	subs	r1, r7, #2
   c5862:	4620      	mov	r0, r4
   c5864:	f000 fec6 	bl	c65f4 <__any_on>
   c5868:	2800      	cmp	r0, #0
   c586a:	d145      	bne.n	c58f8 <__gethex+0x280>
   c586c:	f04f 0a02 	mov.w	sl, #2
   c5870:	4639      	mov	r1, r7
   c5872:	4620      	mov	r0, r4
   c5874:	f7ff fe98 	bl	c55a8 <rshift>
   c5878:	443d      	add	r5, r7
   c587a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c587e:	42ab      	cmp	r3, r5
   c5880:	da4c      	bge.n	c591c <__gethex+0x2a4>
   c5882:	ee18 0a10 	vmov	r0, s16
   c5886:	4621      	mov	r1, r4
   c5888:	f000 fa54 	bl	c5d34 <_Bfree>
   c588c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c588e:	2300      	movs	r3, #0
   c5890:	6013      	str	r3, [r2, #0]
   c5892:	27a3      	movs	r7, #163	; 0xa3
   c5894:	e785      	b.n	c57a2 <__gethex+0x12a>
   c5896:	1e73      	subs	r3, r6, #1
   c5898:	9a05      	ldr	r2, [sp, #20]
   c589a:	9303      	str	r3, [sp, #12]
   c589c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c58a0:	4293      	cmp	r3, r2
   c58a2:	d019      	beq.n	c58d8 <__gethex+0x260>
   c58a4:	f1bb 0f20 	cmp.w	fp, #32
   c58a8:	d107      	bne.n	c58ba <__gethex+0x242>
   c58aa:	9b02      	ldr	r3, [sp, #8]
   c58ac:	9a00      	ldr	r2, [sp, #0]
   c58ae:	f843 2b04 	str.w	r2, [r3], #4
   c58b2:	9302      	str	r3, [sp, #8]
   c58b4:	2300      	movs	r3, #0
   c58b6:	9300      	str	r3, [sp, #0]
   c58b8:	469b      	mov	fp, r3
   c58ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c58be:	f7ff fec5 	bl	c564c <__hexdig_fun>
   c58c2:	9b00      	ldr	r3, [sp, #0]
   c58c4:	f000 000f 	and.w	r0, r0, #15
   c58c8:	fa00 f00b 	lsl.w	r0, r0, fp
   c58cc:	4303      	orrs	r3, r0
   c58ce:	9300      	str	r3, [sp, #0]
   c58d0:	f10b 0b04 	add.w	fp, fp, #4
   c58d4:	9b03      	ldr	r3, [sp, #12]
   c58d6:	e00d      	b.n	c58f4 <__gethex+0x27c>
   c58d8:	9b03      	ldr	r3, [sp, #12]
   c58da:	9a06      	ldr	r2, [sp, #24]
   c58dc:	4413      	add	r3, r2
   c58de:	42bb      	cmp	r3, r7
   c58e0:	d3e0      	bcc.n	c58a4 <__gethex+0x22c>
   c58e2:	4618      	mov	r0, r3
   c58e4:	9901      	ldr	r1, [sp, #4]
   c58e6:	9307      	str	r3, [sp, #28]
   c58e8:	4652      	mov	r2, sl
   c58ea:	f7fe fee3 	bl	c46b4 <strncmp>
   c58ee:	9b07      	ldr	r3, [sp, #28]
   c58f0:	2800      	cmp	r0, #0
   c58f2:	d1d7      	bne.n	c58a4 <__gethex+0x22c>
   c58f4:	461e      	mov	r6, r3
   c58f6:	e78b      	b.n	c5810 <__gethex+0x198>
   c58f8:	f04f 0a03 	mov.w	sl, #3
   c58fc:	e7b8      	b.n	c5870 <__gethex+0x1f8>
   c58fe:	da0a      	bge.n	c5916 <__gethex+0x29e>
   c5900:	1a37      	subs	r7, r6, r0
   c5902:	4621      	mov	r1, r4
   c5904:	ee18 0a10 	vmov	r0, s16
   c5908:	463a      	mov	r2, r7
   c590a:	f000 fc2f 	bl	c616c <__lshift>
   c590e:	1bed      	subs	r5, r5, r7
   c5910:	4604      	mov	r4, r0
   c5912:	f100 0914 	add.w	r9, r0, #20
   c5916:	f04f 0a00 	mov.w	sl, #0
   c591a:	e7ae      	b.n	c587a <__gethex+0x202>
   c591c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5920:	42a8      	cmp	r0, r5
   c5922:	dd72      	ble.n	c5a0a <__gethex+0x392>
   c5924:	1b45      	subs	r5, r0, r5
   c5926:	42ae      	cmp	r6, r5
   c5928:	dc36      	bgt.n	c5998 <__gethex+0x320>
   c592a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c592e:	2b02      	cmp	r3, #2
   c5930:	d02a      	beq.n	c5988 <__gethex+0x310>
   c5932:	2b03      	cmp	r3, #3
   c5934:	d02c      	beq.n	c5990 <__gethex+0x318>
   c5936:	2b01      	cmp	r3, #1
   c5938:	d11c      	bne.n	c5974 <__gethex+0x2fc>
   c593a:	42ae      	cmp	r6, r5
   c593c:	d11a      	bne.n	c5974 <__gethex+0x2fc>
   c593e:	2e01      	cmp	r6, #1
   c5940:	d112      	bne.n	c5968 <__gethex+0x2f0>
   c5942:	9a04      	ldr	r2, [sp, #16]
   c5944:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5948:	6013      	str	r3, [r2, #0]
   c594a:	2301      	movs	r3, #1
   c594c:	6123      	str	r3, [r4, #16]
   c594e:	f8c9 3000 	str.w	r3, [r9]
   c5952:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5954:	2762      	movs	r7, #98	; 0x62
   c5956:	601c      	str	r4, [r3, #0]
   c5958:	e723      	b.n	c57a2 <__gethex+0x12a>
   c595a:	bf00      	nop
   c595c:	000c881c 	.word	0x000c881c
   c5960:	000c87a9 	.word	0x000c87a9
   c5964:	000c87ba 	.word	0x000c87ba
   c5968:	1e71      	subs	r1, r6, #1
   c596a:	4620      	mov	r0, r4
   c596c:	f000 fe42 	bl	c65f4 <__any_on>
   c5970:	2800      	cmp	r0, #0
   c5972:	d1e6      	bne.n	c5942 <__gethex+0x2ca>
   c5974:	ee18 0a10 	vmov	r0, s16
   c5978:	4621      	mov	r1, r4
   c597a:	f000 f9db 	bl	c5d34 <_Bfree>
   c597e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5980:	2300      	movs	r3, #0
   c5982:	6013      	str	r3, [r2, #0]
   c5984:	2750      	movs	r7, #80	; 0x50
   c5986:	e70c      	b.n	c57a2 <__gethex+0x12a>
   c5988:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c598a:	2b00      	cmp	r3, #0
   c598c:	d1f2      	bne.n	c5974 <__gethex+0x2fc>
   c598e:	e7d8      	b.n	c5942 <__gethex+0x2ca>
   c5990:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5992:	2b00      	cmp	r3, #0
   c5994:	d1d5      	bne.n	c5942 <__gethex+0x2ca>
   c5996:	e7ed      	b.n	c5974 <__gethex+0x2fc>
   c5998:	1e6f      	subs	r7, r5, #1
   c599a:	f1ba 0f00 	cmp.w	sl, #0
   c599e:	d131      	bne.n	c5a04 <__gethex+0x38c>
   c59a0:	b127      	cbz	r7, c59ac <__gethex+0x334>
   c59a2:	4639      	mov	r1, r7
   c59a4:	4620      	mov	r0, r4
   c59a6:	f000 fe25 	bl	c65f4 <__any_on>
   c59aa:	4682      	mov	sl, r0
   c59ac:	117b      	asrs	r3, r7, #5
   c59ae:	2101      	movs	r1, #1
   c59b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c59b4:	f007 071f 	and.w	r7, r7, #31
   c59b8:	fa01 f707 	lsl.w	r7, r1, r7
   c59bc:	421f      	tst	r7, r3
   c59be:	4629      	mov	r1, r5
   c59c0:	4620      	mov	r0, r4
   c59c2:	bf18      	it	ne
   c59c4:	f04a 0a02 	orrne.w	sl, sl, #2
   c59c8:	1b76      	subs	r6, r6, r5
   c59ca:	f7ff fded 	bl	c55a8 <rshift>
   c59ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c59d2:	2702      	movs	r7, #2
   c59d4:	f1ba 0f00 	cmp.w	sl, #0
   c59d8:	d048      	beq.n	c5a6c <__gethex+0x3f4>
   c59da:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c59de:	2b02      	cmp	r3, #2
   c59e0:	d015      	beq.n	c5a0e <__gethex+0x396>
   c59e2:	2b03      	cmp	r3, #3
   c59e4:	d017      	beq.n	c5a16 <__gethex+0x39e>
   c59e6:	2b01      	cmp	r3, #1
   c59e8:	d109      	bne.n	c59fe <__gethex+0x386>
   c59ea:	f01a 0f02 	tst.w	sl, #2
   c59ee:	d006      	beq.n	c59fe <__gethex+0x386>
   c59f0:	f8d9 0000 	ldr.w	r0, [r9]
   c59f4:	ea4a 0a00 	orr.w	sl, sl, r0
   c59f8:	f01a 0f01 	tst.w	sl, #1
   c59fc:	d10e      	bne.n	c5a1c <__gethex+0x3a4>
   c59fe:	f047 0710 	orr.w	r7, r7, #16
   c5a02:	e033      	b.n	c5a6c <__gethex+0x3f4>
   c5a04:	f04f 0a01 	mov.w	sl, #1
   c5a08:	e7d0      	b.n	c59ac <__gethex+0x334>
   c5a0a:	2701      	movs	r7, #1
   c5a0c:	e7e2      	b.n	c59d4 <__gethex+0x35c>
   c5a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a10:	f1c3 0301 	rsb	r3, r3, #1
   c5a14:	9315      	str	r3, [sp, #84]	; 0x54
   c5a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a18:	2b00      	cmp	r3, #0
   c5a1a:	d0f0      	beq.n	c59fe <__gethex+0x386>
   c5a1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5a20:	f104 0314 	add.w	r3, r4, #20
   c5a24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5a28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5a2c:	f04f 0c00 	mov.w	ip, #0
   c5a30:	4618      	mov	r0, r3
   c5a32:	f853 2b04 	ldr.w	r2, [r3], #4
   c5a36:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c5a3a:	d01c      	beq.n	c5a76 <__gethex+0x3fe>
   c5a3c:	3201      	adds	r2, #1
   c5a3e:	6002      	str	r2, [r0, #0]
   c5a40:	2f02      	cmp	r7, #2
   c5a42:	f104 0314 	add.w	r3, r4, #20
   c5a46:	d13f      	bne.n	c5ac8 <__gethex+0x450>
   c5a48:	f8d8 2000 	ldr.w	r2, [r8]
   c5a4c:	3a01      	subs	r2, #1
   c5a4e:	42b2      	cmp	r2, r6
   c5a50:	d10a      	bne.n	c5a68 <__gethex+0x3f0>
   c5a52:	1171      	asrs	r1, r6, #5
   c5a54:	2201      	movs	r2, #1
   c5a56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5a5a:	f006 061f 	and.w	r6, r6, #31
   c5a5e:	fa02 f606 	lsl.w	r6, r2, r6
   c5a62:	421e      	tst	r6, r3
   c5a64:	bf18      	it	ne
   c5a66:	4617      	movne	r7, r2
   c5a68:	f047 0720 	orr.w	r7, r7, #32
   c5a6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5a6e:	601c      	str	r4, [r3, #0]
   c5a70:	9b04      	ldr	r3, [sp, #16]
   c5a72:	601d      	str	r5, [r3, #0]
   c5a74:	e695      	b.n	c57a2 <__gethex+0x12a>
   c5a76:	4299      	cmp	r1, r3
   c5a78:	f843 cc04 	str.w	ip, [r3, #-4]
   c5a7c:	d8d8      	bhi.n	c5a30 <__gethex+0x3b8>
   c5a7e:	68a3      	ldr	r3, [r4, #8]
   c5a80:	459b      	cmp	fp, r3
   c5a82:	db19      	blt.n	c5ab8 <__gethex+0x440>
   c5a84:	6861      	ldr	r1, [r4, #4]
   c5a86:	ee18 0a10 	vmov	r0, s16
   c5a8a:	3101      	adds	r1, #1
   c5a8c:	f000 f912 	bl	c5cb4 <_Balloc>
   c5a90:	4681      	mov	r9, r0
   c5a92:	b918      	cbnz	r0, c5a9c <__gethex+0x424>
   c5a94:	4b1a      	ldr	r3, [pc, #104]	; (c5b00 <__gethex+0x488>)
   c5a96:	4602      	mov	r2, r0
   c5a98:	2184      	movs	r1, #132	; 0x84
   c5a9a:	e6a8      	b.n	c57ee <__gethex+0x176>
   c5a9c:	6922      	ldr	r2, [r4, #16]
   c5a9e:	3202      	adds	r2, #2
   c5aa0:	f104 010c 	add.w	r1, r4, #12
   c5aa4:	0092      	lsls	r2, r2, #2
   c5aa6:	300c      	adds	r0, #12
   c5aa8:	f7fe fd36 	bl	c4518 <memcpy>
   c5aac:	4621      	mov	r1, r4
   c5aae:	ee18 0a10 	vmov	r0, s16
   c5ab2:	f000 f93f 	bl	c5d34 <_Bfree>
   c5ab6:	464c      	mov	r4, r9
   c5ab8:	6923      	ldr	r3, [r4, #16]
   c5aba:	1c5a      	adds	r2, r3, #1
   c5abc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5ac0:	6122      	str	r2, [r4, #16]
   c5ac2:	2201      	movs	r2, #1
   c5ac4:	615a      	str	r2, [r3, #20]
   c5ac6:	e7bb      	b.n	c5a40 <__gethex+0x3c8>
   c5ac8:	6922      	ldr	r2, [r4, #16]
   c5aca:	455a      	cmp	r2, fp
   c5acc:	dd0b      	ble.n	c5ae6 <__gethex+0x46e>
   c5ace:	2101      	movs	r1, #1
   c5ad0:	4620      	mov	r0, r4
   c5ad2:	f7ff fd69 	bl	c55a8 <rshift>
   c5ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5ada:	3501      	adds	r5, #1
   c5adc:	42ab      	cmp	r3, r5
   c5ade:	f6ff aed0 	blt.w	c5882 <__gethex+0x20a>
   c5ae2:	2701      	movs	r7, #1
   c5ae4:	e7c0      	b.n	c5a68 <__gethex+0x3f0>
   c5ae6:	f016 061f 	ands.w	r6, r6, #31
   c5aea:	d0fa      	beq.n	c5ae2 <__gethex+0x46a>
   c5aec:	4453      	add	r3, sl
   c5aee:	f1c6 0620 	rsb	r6, r6, #32
   c5af2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5af6:	f000 f9cf 	bl	c5e98 <__hi0bits>
   c5afa:	42b0      	cmp	r0, r6
   c5afc:	dbe7      	blt.n	c5ace <__gethex+0x456>
   c5afe:	e7f0      	b.n	c5ae2 <__gethex+0x46a>
   c5b00:	000c87a9 	.word	0x000c87a9

000c5b04 <L_shift>:
   c5b04:	f1c2 0208 	rsb	r2, r2, #8
   c5b08:	0092      	lsls	r2, r2, #2
   c5b0a:	b570      	push	{r4, r5, r6, lr}
   c5b0c:	f1c2 0620 	rsb	r6, r2, #32
   c5b10:	6843      	ldr	r3, [r0, #4]
   c5b12:	6804      	ldr	r4, [r0, #0]
   c5b14:	fa03 f506 	lsl.w	r5, r3, r6
   c5b18:	432c      	orrs	r4, r5
   c5b1a:	40d3      	lsrs	r3, r2
   c5b1c:	6004      	str	r4, [r0, #0]
   c5b1e:	f840 3f04 	str.w	r3, [r0, #4]!
   c5b22:	4288      	cmp	r0, r1
   c5b24:	d3f4      	bcc.n	c5b10 <L_shift+0xc>
   c5b26:	bd70      	pop	{r4, r5, r6, pc}

000c5b28 <__match>:
   c5b28:	b530      	push	{r4, r5, lr}
   c5b2a:	6803      	ldr	r3, [r0, #0]
   c5b2c:	3301      	adds	r3, #1
   c5b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5b32:	b914      	cbnz	r4, c5b3a <__match+0x12>
   c5b34:	6003      	str	r3, [r0, #0]
   c5b36:	2001      	movs	r0, #1
   c5b38:	bd30      	pop	{r4, r5, pc}
   c5b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5b3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5b42:	2d19      	cmp	r5, #25
   c5b44:	bf98      	it	ls
   c5b46:	3220      	addls	r2, #32
   c5b48:	42a2      	cmp	r2, r4
   c5b4a:	d0f0      	beq.n	c5b2e <__match+0x6>
   c5b4c:	2000      	movs	r0, #0
   c5b4e:	e7f3      	b.n	c5b38 <__match+0x10>

000c5b50 <__hexnan>:
   c5b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5b54:	680b      	ldr	r3, [r1, #0]
   c5b56:	115e      	asrs	r6, r3, #5
   c5b58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5b5c:	f013 031f 	ands.w	r3, r3, #31
   c5b60:	b087      	sub	sp, #28
   c5b62:	bf18      	it	ne
   c5b64:	3604      	addne	r6, #4
   c5b66:	2500      	movs	r5, #0
   c5b68:	1f37      	subs	r7, r6, #4
   c5b6a:	4690      	mov	r8, r2
   c5b6c:	6802      	ldr	r2, [r0, #0]
   c5b6e:	9301      	str	r3, [sp, #4]
   c5b70:	4682      	mov	sl, r0
   c5b72:	f846 5c04 	str.w	r5, [r6, #-4]
   c5b76:	46b9      	mov	r9, r7
   c5b78:	463c      	mov	r4, r7
   c5b7a:	9502      	str	r5, [sp, #8]
   c5b7c:	46ab      	mov	fp, r5
   c5b7e:	7851      	ldrb	r1, [r2, #1]
   c5b80:	1c53      	adds	r3, r2, #1
   c5b82:	9303      	str	r3, [sp, #12]
   c5b84:	b341      	cbz	r1, c5bd8 <__hexnan+0x88>
   c5b86:	4608      	mov	r0, r1
   c5b88:	9205      	str	r2, [sp, #20]
   c5b8a:	9104      	str	r1, [sp, #16]
   c5b8c:	f7ff fd5e 	bl	c564c <__hexdig_fun>
   c5b90:	2800      	cmp	r0, #0
   c5b92:	d14f      	bne.n	c5c34 <__hexnan+0xe4>
   c5b94:	9904      	ldr	r1, [sp, #16]
   c5b96:	9a05      	ldr	r2, [sp, #20]
   c5b98:	2920      	cmp	r1, #32
   c5b9a:	d818      	bhi.n	c5bce <__hexnan+0x7e>
   c5b9c:	9b02      	ldr	r3, [sp, #8]
   c5b9e:	459b      	cmp	fp, r3
   c5ba0:	dd13      	ble.n	c5bca <__hexnan+0x7a>
   c5ba2:	454c      	cmp	r4, r9
   c5ba4:	d206      	bcs.n	c5bb4 <__hexnan+0x64>
   c5ba6:	2d07      	cmp	r5, #7
   c5ba8:	dc04      	bgt.n	c5bb4 <__hexnan+0x64>
   c5baa:	462a      	mov	r2, r5
   c5bac:	4649      	mov	r1, r9
   c5bae:	4620      	mov	r0, r4
   c5bb0:	f7ff ffa8 	bl	c5b04 <L_shift>
   c5bb4:	4544      	cmp	r4, r8
   c5bb6:	d950      	bls.n	c5c5a <__hexnan+0x10a>
   c5bb8:	2300      	movs	r3, #0
   c5bba:	f1a4 0904 	sub.w	r9, r4, #4
   c5bbe:	f844 3c04 	str.w	r3, [r4, #-4]
   c5bc2:	f8cd b008 	str.w	fp, [sp, #8]
   c5bc6:	464c      	mov	r4, r9
   c5bc8:	461d      	mov	r5, r3
   c5bca:	9a03      	ldr	r2, [sp, #12]
   c5bcc:	e7d7      	b.n	c5b7e <__hexnan+0x2e>
   c5bce:	2929      	cmp	r1, #41	; 0x29
   c5bd0:	d156      	bne.n	c5c80 <__hexnan+0x130>
   c5bd2:	3202      	adds	r2, #2
   c5bd4:	f8ca 2000 	str.w	r2, [sl]
   c5bd8:	f1bb 0f00 	cmp.w	fp, #0
   c5bdc:	d050      	beq.n	c5c80 <__hexnan+0x130>
   c5bde:	454c      	cmp	r4, r9
   c5be0:	d206      	bcs.n	c5bf0 <__hexnan+0xa0>
   c5be2:	2d07      	cmp	r5, #7
   c5be4:	dc04      	bgt.n	c5bf0 <__hexnan+0xa0>
   c5be6:	462a      	mov	r2, r5
   c5be8:	4649      	mov	r1, r9
   c5bea:	4620      	mov	r0, r4
   c5bec:	f7ff ff8a 	bl	c5b04 <L_shift>
   c5bf0:	4544      	cmp	r4, r8
   c5bf2:	d934      	bls.n	c5c5e <__hexnan+0x10e>
   c5bf4:	f1a8 0204 	sub.w	r2, r8, #4
   c5bf8:	4623      	mov	r3, r4
   c5bfa:	f853 1b04 	ldr.w	r1, [r3], #4
   c5bfe:	f842 1f04 	str.w	r1, [r2, #4]!
   c5c02:	429f      	cmp	r7, r3
   c5c04:	d2f9      	bcs.n	c5bfa <__hexnan+0xaa>
   c5c06:	1b3b      	subs	r3, r7, r4
   c5c08:	f023 0303 	bic.w	r3, r3, #3
   c5c0c:	3304      	adds	r3, #4
   c5c0e:	3401      	adds	r4, #1
   c5c10:	3e03      	subs	r6, #3
   c5c12:	42b4      	cmp	r4, r6
   c5c14:	bf88      	it	hi
   c5c16:	2304      	movhi	r3, #4
   c5c18:	4443      	add	r3, r8
   c5c1a:	2200      	movs	r2, #0
   c5c1c:	f843 2b04 	str.w	r2, [r3], #4
   c5c20:	429f      	cmp	r7, r3
   c5c22:	d2fb      	bcs.n	c5c1c <__hexnan+0xcc>
   c5c24:	683b      	ldr	r3, [r7, #0]
   c5c26:	b91b      	cbnz	r3, c5c30 <__hexnan+0xe0>
   c5c28:	4547      	cmp	r7, r8
   c5c2a:	d127      	bne.n	c5c7c <__hexnan+0x12c>
   c5c2c:	2301      	movs	r3, #1
   c5c2e:	603b      	str	r3, [r7, #0]
   c5c30:	2005      	movs	r0, #5
   c5c32:	e026      	b.n	c5c82 <__hexnan+0x132>
   c5c34:	3501      	adds	r5, #1
   c5c36:	2d08      	cmp	r5, #8
   c5c38:	f10b 0b01 	add.w	fp, fp, #1
   c5c3c:	dd06      	ble.n	c5c4c <__hexnan+0xfc>
   c5c3e:	4544      	cmp	r4, r8
   c5c40:	d9c3      	bls.n	c5bca <__hexnan+0x7a>
   c5c42:	2300      	movs	r3, #0
   c5c44:	f844 3c04 	str.w	r3, [r4, #-4]
   c5c48:	2501      	movs	r5, #1
   c5c4a:	3c04      	subs	r4, #4
   c5c4c:	6822      	ldr	r2, [r4, #0]
   c5c4e:	f000 000f 	and.w	r0, r0, #15
   c5c52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5c56:	6022      	str	r2, [r4, #0]
   c5c58:	e7b7      	b.n	c5bca <__hexnan+0x7a>
   c5c5a:	2508      	movs	r5, #8
   c5c5c:	e7b5      	b.n	c5bca <__hexnan+0x7a>
   c5c5e:	9b01      	ldr	r3, [sp, #4]
   c5c60:	2b00      	cmp	r3, #0
   c5c62:	d0df      	beq.n	c5c24 <__hexnan+0xd4>
   c5c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5c68:	f1c3 0320 	rsb	r3, r3, #32
   c5c6c:	fa22 f303 	lsr.w	r3, r2, r3
   c5c70:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5c74:	401a      	ands	r2, r3
   c5c76:	f846 2c04 	str.w	r2, [r6, #-4]
   c5c7a:	e7d3      	b.n	c5c24 <__hexnan+0xd4>
   c5c7c:	3f04      	subs	r7, #4
   c5c7e:	e7d1      	b.n	c5c24 <__hexnan+0xd4>
   c5c80:	2004      	movs	r0, #4
   c5c82:	b007      	add	sp, #28
   c5c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5c88 <__retarget_lock_acquire_recursive>:
   c5c88:	4770      	bx	lr

000c5c8a <__retarget_lock_release>:
   c5c8a:	4770      	bx	lr

000c5c8c <__retarget_lock_release_recursive>:
   c5c8c:	4770      	bx	lr

000c5c8e <__ascii_mbtowc>:
   c5c8e:	b082      	sub	sp, #8
   c5c90:	b901      	cbnz	r1, c5c94 <__ascii_mbtowc+0x6>
   c5c92:	a901      	add	r1, sp, #4
   c5c94:	b142      	cbz	r2, c5ca8 <__ascii_mbtowc+0x1a>
   c5c96:	b14b      	cbz	r3, c5cac <__ascii_mbtowc+0x1e>
   c5c98:	7813      	ldrb	r3, [r2, #0]
   c5c9a:	600b      	str	r3, [r1, #0]
   c5c9c:	7812      	ldrb	r2, [r2, #0]
   c5c9e:	1e10      	subs	r0, r2, #0
   c5ca0:	bf18      	it	ne
   c5ca2:	2001      	movne	r0, #1
   c5ca4:	b002      	add	sp, #8
   c5ca6:	4770      	bx	lr
   c5ca8:	4610      	mov	r0, r2
   c5caa:	e7fb      	b.n	c5ca4 <__ascii_mbtowc+0x16>
   c5cac:	f06f 0001 	mvn.w	r0, #1
   c5cb0:	e7f8      	b.n	c5ca4 <__ascii_mbtowc+0x16>
	...

000c5cb4 <_Balloc>:
   c5cb4:	b570      	push	{r4, r5, r6, lr}
   c5cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5cb8:	4604      	mov	r4, r0
   c5cba:	460d      	mov	r5, r1
   c5cbc:	b976      	cbnz	r6, c5cdc <_Balloc+0x28>
   c5cbe:	2010      	movs	r0, #16
   c5cc0:	f7f8 fada 	bl	be278 <malloc>
   c5cc4:	4602      	mov	r2, r0
   c5cc6:	6260      	str	r0, [r4, #36]	; 0x24
   c5cc8:	b920      	cbnz	r0, c5cd4 <_Balloc+0x20>
   c5cca:	4b18      	ldr	r3, [pc, #96]	; (c5d2c <_Balloc+0x78>)
   c5ccc:	4818      	ldr	r0, [pc, #96]	; (c5d30 <_Balloc+0x7c>)
   c5cce:	2166      	movs	r1, #102	; 0x66
   c5cd0:	f7f8 fb22 	bl	be318 <__assert_func>
   c5cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5cd8:	6006      	str	r6, [r0, #0]
   c5cda:	60c6      	str	r6, [r0, #12]
   c5cdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5cde:	68f3      	ldr	r3, [r6, #12]
   c5ce0:	b183      	cbz	r3, c5d04 <_Balloc+0x50>
   c5ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5ce4:	68db      	ldr	r3, [r3, #12]
   c5ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5cea:	b9b8      	cbnz	r0, c5d1c <_Balloc+0x68>
   c5cec:	2101      	movs	r1, #1
   c5cee:	fa01 f605 	lsl.w	r6, r1, r5
   c5cf2:	1d72      	adds	r2, r6, #5
   c5cf4:	0092      	lsls	r2, r2, #2
   c5cf6:	4620      	mov	r0, r4
   c5cf8:	f000 fc9d 	bl	c6636 <_calloc_r>
   c5cfc:	b160      	cbz	r0, c5d18 <_Balloc+0x64>
   c5cfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5d02:	e00e      	b.n	c5d22 <_Balloc+0x6e>
   c5d04:	2221      	movs	r2, #33	; 0x21
   c5d06:	2104      	movs	r1, #4
   c5d08:	4620      	mov	r0, r4
   c5d0a:	f000 fc94 	bl	c6636 <_calloc_r>
   c5d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5d10:	60f0      	str	r0, [r6, #12]
   c5d12:	68db      	ldr	r3, [r3, #12]
   c5d14:	2b00      	cmp	r3, #0
   c5d16:	d1e4      	bne.n	c5ce2 <_Balloc+0x2e>
   c5d18:	2000      	movs	r0, #0
   c5d1a:	bd70      	pop	{r4, r5, r6, pc}
   c5d1c:	6802      	ldr	r2, [r0, #0]
   c5d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5d22:	2300      	movs	r3, #0
   c5d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5d28:	e7f7      	b.n	c5d1a <_Balloc+0x66>
   c5d2a:	bf00      	nop
   c5d2c:	000c85d8 	.word	0x000c85d8
   c5d30:	000c882e 	.word	0x000c882e

000c5d34 <_Bfree>:
   c5d34:	b570      	push	{r4, r5, r6, lr}
   c5d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5d38:	4605      	mov	r5, r0
   c5d3a:	460c      	mov	r4, r1
   c5d3c:	b976      	cbnz	r6, c5d5c <_Bfree+0x28>
   c5d3e:	2010      	movs	r0, #16
   c5d40:	f7f8 fa9a 	bl	be278 <malloc>
   c5d44:	4602      	mov	r2, r0
   c5d46:	6268      	str	r0, [r5, #36]	; 0x24
   c5d48:	b920      	cbnz	r0, c5d54 <_Bfree+0x20>
   c5d4a:	4b09      	ldr	r3, [pc, #36]	; (c5d70 <_Bfree+0x3c>)
   c5d4c:	4809      	ldr	r0, [pc, #36]	; (c5d74 <_Bfree+0x40>)
   c5d4e:	218a      	movs	r1, #138	; 0x8a
   c5d50:	f7f8 fae2 	bl	be318 <__assert_func>
   c5d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5d58:	6006      	str	r6, [r0, #0]
   c5d5a:	60c6      	str	r6, [r0, #12]
   c5d5c:	b13c      	cbz	r4, c5d6e <_Bfree+0x3a>
   c5d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5d60:	6862      	ldr	r2, [r4, #4]
   c5d62:	68db      	ldr	r3, [r3, #12]
   c5d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5d68:	6021      	str	r1, [r4, #0]
   c5d6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5d6e:	bd70      	pop	{r4, r5, r6, pc}
   c5d70:	000c85d8 	.word	0x000c85d8
   c5d74:	000c882e 	.word	0x000c882e

000c5d78 <__multadd>:
   c5d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5d7c:	690d      	ldr	r5, [r1, #16]
   c5d7e:	4607      	mov	r7, r0
   c5d80:	460c      	mov	r4, r1
   c5d82:	461e      	mov	r6, r3
   c5d84:	f101 0c14 	add.w	ip, r1, #20
   c5d88:	2000      	movs	r0, #0
   c5d8a:	f8dc 3000 	ldr.w	r3, [ip]
   c5d8e:	b299      	uxth	r1, r3
   c5d90:	fb02 6101 	mla	r1, r2, r1, r6
   c5d94:	0c1e      	lsrs	r6, r3, #16
   c5d96:	0c0b      	lsrs	r3, r1, #16
   c5d98:	fb02 3306 	mla	r3, r2, r6, r3
   c5d9c:	b289      	uxth	r1, r1
   c5d9e:	3001      	adds	r0, #1
   c5da0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5da4:	4285      	cmp	r5, r0
   c5da6:	f84c 1b04 	str.w	r1, [ip], #4
   c5daa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5dae:	dcec      	bgt.n	c5d8a <__multadd+0x12>
   c5db0:	b30e      	cbz	r6, c5df6 <__multadd+0x7e>
   c5db2:	68a3      	ldr	r3, [r4, #8]
   c5db4:	42ab      	cmp	r3, r5
   c5db6:	dc19      	bgt.n	c5dec <__multadd+0x74>
   c5db8:	6861      	ldr	r1, [r4, #4]
   c5dba:	4638      	mov	r0, r7
   c5dbc:	3101      	adds	r1, #1
   c5dbe:	f7ff ff79 	bl	c5cb4 <_Balloc>
   c5dc2:	4680      	mov	r8, r0
   c5dc4:	b928      	cbnz	r0, c5dd2 <__multadd+0x5a>
   c5dc6:	4602      	mov	r2, r0
   c5dc8:	4b0c      	ldr	r3, [pc, #48]	; (c5dfc <__multadd+0x84>)
   c5dca:	480d      	ldr	r0, [pc, #52]	; (c5e00 <__multadd+0x88>)
   c5dcc:	21b5      	movs	r1, #181	; 0xb5
   c5dce:	f7f8 faa3 	bl	be318 <__assert_func>
   c5dd2:	6922      	ldr	r2, [r4, #16]
   c5dd4:	3202      	adds	r2, #2
   c5dd6:	f104 010c 	add.w	r1, r4, #12
   c5dda:	0092      	lsls	r2, r2, #2
   c5ddc:	300c      	adds	r0, #12
   c5dde:	f7fe fb9b 	bl	c4518 <memcpy>
   c5de2:	4621      	mov	r1, r4
   c5de4:	4638      	mov	r0, r7
   c5de6:	f7ff ffa5 	bl	c5d34 <_Bfree>
   c5dea:	4644      	mov	r4, r8
   c5dec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5df0:	3501      	adds	r5, #1
   c5df2:	615e      	str	r6, [r3, #20]
   c5df4:	6125      	str	r5, [r4, #16]
   c5df6:	4620      	mov	r0, r4
   c5df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5dfc:	000c87a9 	.word	0x000c87a9
   c5e00:	000c882e 	.word	0x000c882e

000c5e04 <__s2b>:
   c5e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5e08:	460c      	mov	r4, r1
   c5e0a:	4615      	mov	r5, r2
   c5e0c:	461f      	mov	r7, r3
   c5e0e:	2209      	movs	r2, #9
   c5e10:	3308      	adds	r3, #8
   c5e12:	4606      	mov	r6, r0
   c5e14:	fb93 f3f2 	sdiv	r3, r3, r2
   c5e18:	2100      	movs	r1, #0
   c5e1a:	2201      	movs	r2, #1
   c5e1c:	429a      	cmp	r2, r3
   c5e1e:	db09      	blt.n	c5e34 <__s2b+0x30>
   c5e20:	4630      	mov	r0, r6
   c5e22:	f7ff ff47 	bl	c5cb4 <_Balloc>
   c5e26:	b940      	cbnz	r0, c5e3a <__s2b+0x36>
   c5e28:	4602      	mov	r2, r0
   c5e2a:	4b19      	ldr	r3, [pc, #100]	; (c5e90 <__s2b+0x8c>)
   c5e2c:	4819      	ldr	r0, [pc, #100]	; (c5e94 <__s2b+0x90>)
   c5e2e:	21ce      	movs	r1, #206	; 0xce
   c5e30:	f7f8 fa72 	bl	be318 <__assert_func>
   c5e34:	0052      	lsls	r2, r2, #1
   c5e36:	3101      	adds	r1, #1
   c5e38:	e7f0      	b.n	c5e1c <__s2b+0x18>
   c5e3a:	9b08      	ldr	r3, [sp, #32]
   c5e3c:	6143      	str	r3, [r0, #20]
   c5e3e:	2d09      	cmp	r5, #9
   c5e40:	f04f 0301 	mov.w	r3, #1
   c5e44:	6103      	str	r3, [r0, #16]
   c5e46:	dd16      	ble.n	c5e76 <__s2b+0x72>
   c5e48:	f104 0909 	add.w	r9, r4, #9
   c5e4c:	46c8      	mov	r8, r9
   c5e4e:	442c      	add	r4, r5
   c5e50:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5e54:	4601      	mov	r1, r0
   c5e56:	3b30      	subs	r3, #48	; 0x30
   c5e58:	220a      	movs	r2, #10
   c5e5a:	4630      	mov	r0, r6
   c5e5c:	f7ff ff8c 	bl	c5d78 <__multadd>
   c5e60:	45a0      	cmp	r8, r4
   c5e62:	d1f5      	bne.n	c5e50 <__s2b+0x4c>
   c5e64:	f1a5 0408 	sub.w	r4, r5, #8
   c5e68:	444c      	add	r4, r9
   c5e6a:	1b2d      	subs	r5, r5, r4
   c5e6c:	1963      	adds	r3, r4, r5
   c5e6e:	42bb      	cmp	r3, r7
   c5e70:	db04      	blt.n	c5e7c <__s2b+0x78>
   c5e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5e76:	340a      	adds	r4, #10
   c5e78:	2509      	movs	r5, #9
   c5e7a:	e7f6      	b.n	c5e6a <__s2b+0x66>
   c5e7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5e80:	4601      	mov	r1, r0
   c5e82:	3b30      	subs	r3, #48	; 0x30
   c5e84:	220a      	movs	r2, #10
   c5e86:	4630      	mov	r0, r6
   c5e88:	f7ff ff76 	bl	c5d78 <__multadd>
   c5e8c:	e7ee      	b.n	c5e6c <__s2b+0x68>
   c5e8e:	bf00      	nop
   c5e90:	000c87a9 	.word	0x000c87a9
   c5e94:	000c882e 	.word	0x000c882e

000c5e98 <__hi0bits>:
   c5e98:	0c03      	lsrs	r3, r0, #16
   c5e9a:	041b      	lsls	r3, r3, #16
   c5e9c:	b9d3      	cbnz	r3, c5ed4 <__hi0bits+0x3c>
   c5e9e:	0400      	lsls	r0, r0, #16
   c5ea0:	2310      	movs	r3, #16
   c5ea2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5ea6:	bf04      	itt	eq
   c5ea8:	0200      	lsleq	r0, r0, #8
   c5eaa:	3308      	addeq	r3, #8
   c5eac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5eb0:	bf04      	itt	eq
   c5eb2:	0100      	lsleq	r0, r0, #4
   c5eb4:	3304      	addeq	r3, #4
   c5eb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5eba:	bf04      	itt	eq
   c5ebc:	0080      	lsleq	r0, r0, #2
   c5ebe:	3302      	addeq	r3, #2
   c5ec0:	2800      	cmp	r0, #0
   c5ec2:	db05      	blt.n	c5ed0 <__hi0bits+0x38>
   c5ec4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5ec8:	f103 0301 	add.w	r3, r3, #1
   c5ecc:	bf08      	it	eq
   c5ece:	2320      	moveq	r3, #32
   c5ed0:	4618      	mov	r0, r3
   c5ed2:	4770      	bx	lr
   c5ed4:	2300      	movs	r3, #0
   c5ed6:	e7e4      	b.n	c5ea2 <__hi0bits+0xa>

000c5ed8 <__lo0bits>:
   c5ed8:	6803      	ldr	r3, [r0, #0]
   c5eda:	f013 0207 	ands.w	r2, r3, #7
   c5ede:	4601      	mov	r1, r0
   c5ee0:	d00b      	beq.n	c5efa <__lo0bits+0x22>
   c5ee2:	07da      	lsls	r2, r3, #31
   c5ee4:	d423      	bmi.n	c5f2e <__lo0bits+0x56>
   c5ee6:	0798      	lsls	r0, r3, #30
   c5ee8:	bf49      	itett	mi
   c5eea:	085b      	lsrmi	r3, r3, #1
   c5eec:	089b      	lsrpl	r3, r3, #2
   c5eee:	2001      	movmi	r0, #1
   c5ef0:	600b      	strmi	r3, [r1, #0]
   c5ef2:	bf5c      	itt	pl
   c5ef4:	600b      	strpl	r3, [r1, #0]
   c5ef6:	2002      	movpl	r0, #2
   c5ef8:	4770      	bx	lr
   c5efa:	b298      	uxth	r0, r3
   c5efc:	b9a8      	cbnz	r0, c5f2a <__lo0bits+0x52>
   c5efe:	0c1b      	lsrs	r3, r3, #16
   c5f00:	2010      	movs	r0, #16
   c5f02:	b2da      	uxtb	r2, r3
   c5f04:	b90a      	cbnz	r2, c5f0a <__lo0bits+0x32>
   c5f06:	3008      	adds	r0, #8
   c5f08:	0a1b      	lsrs	r3, r3, #8
   c5f0a:	071a      	lsls	r2, r3, #28
   c5f0c:	bf04      	itt	eq
   c5f0e:	091b      	lsreq	r3, r3, #4
   c5f10:	3004      	addeq	r0, #4
   c5f12:	079a      	lsls	r2, r3, #30
   c5f14:	bf04      	itt	eq
   c5f16:	089b      	lsreq	r3, r3, #2
   c5f18:	3002      	addeq	r0, #2
   c5f1a:	07da      	lsls	r2, r3, #31
   c5f1c:	d403      	bmi.n	c5f26 <__lo0bits+0x4e>
   c5f1e:	085b      	lsrs	r3, r3, #1
   c5f20:	f100 0001 	add.w	r0, r0, #1
   c5f24:	d005      	beq.n	c5f32 <__lo0bits+0x5a>
   c5f26:	600b      	str	r3, [r1, #0]
   c5f28:	4770      	bx	lr
   c5f2a:	4610      	mov	r0, r2
   c5f2c:	e7e9      	b.n	c5f02 <__lo0bits+0x2a>
   c5f2e:	2000      	movs	r0, #0
   c5f30:	4770      	bx	lr
   c5f32:	2020      	movs	r0, #32
   c5f34:	4770      	bx	lr
	...

000c5f38 <__i2b>:
   c5f38:	b510      	push	{r4, lr}
   c5f3a:	460c      	mov	r4, r1
   c5f3c:	2101      	movs	r1, #1
   c5f3e:	f7ff feb9 	bl	c5cb4 <_Balloc>
   c5f42:	4602      	mov	r2, r0
   c5f44:	b928      	cbnz	r0, c5f52 <__i2b+0x1a>
   c5f46:	4b05      	ldr	r3, [pc, #20]	; (c5f5c <__i2b+0x24>)
   c5f48:	4805      	ldr	r0, [pc, #20]	; (c5f60 <__i2b+0x28>)
   c5f4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5f4e:	f7f8 f9e3 	bl	be318 <__assert_func>
   c5f52:	2301      	movs	r3, #1
   c5f54:	6144      	str	r4, [r0, #20]
   c5f56:	6103      	str	r3, [r0, #16]
   c5f58:	bd10      	pop	{r4, pc}
   c5f5a:	bf00      	nop
   c5f5c:	000c87a9 	.word	0x000c87a9
   c5f60:	000c882e 	.word	0x000c882e

000c5f64 <__multiply>:
   c5f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5f68:	4691      	mov	r9, r2
   c5f6a:	690a      	ldr	r2, [r1, #16]
   c5f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5f70:	429a      	cmp	r2, r3
   c5f72:	bfb8      	it	lt
   c5f74:	460b      	movlt	r3, r1
   c5f76:	460c      	mov	r4, r1
   c5f78:	bfbc      	itt	lt
   c5f7a:	464c      	movlt	r4, r9
   c5f7c:	4699      	movlt	r9, r3
   c5f7e:	6927      	ldr	r7, [r4, #16]
   c5f80:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c5f84:	68a3      	ldr	r3, [r4, #8]
   c5f86:	6861      	ldr	r1, [r4, #4]
   c5f88:	eb07 060a 	add.w	r6, r7, sl
   c5f8c:	42b3      	cmp	r3, r6
   c5f8e:	b085      	sub	sp, #20
   c5f90:	bfb8      	it	lt
   c5f92:	3101      	addlt	r1, #1
   c5f94:	f7ff fe8e 	bl	c5cb4 <_Balloc>
   c5f98:	b930      	cbnz	r0, c5fa8 <__multiply+0x44>
   c5f9a:	4602      	mov	r2, r0
   c5f9c:	4b44      	ldr	r3, [pc, #272]	; (c60b0 <__multiply+0x14c>)
   c5f9e:	4845      	ldr	r0, [pc, #276]	; (c60b4 <__multiply+0x150>)
   c5fa0:	f240 115d 	movw	r1, #349	; 0x15d
   c5fa4:	f7f8 f9b8 	bl	be318 <__assert_func>
   c5fa8:	f100 0514 	add.w	r5, r0, #20
   c5fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5fb0:	462b      	mov	r3, r5
   c5fb2:	2200      	movs	r2, #0
   c5fb4:	4543      	cmp	r3, r8
   c5fb6:	d321      	bcc.n	c5ffc <__multiply+0x98>
   c5fb8:	f104 0314 	add.w	r3, r4, #20
   c5fbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5fc0:	f109 0314 	add.w	r3, r9, #20
   c5fc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5fc8:	9202      	str	r2, [sp, #8]
   c5fca:	1b3a      	subs	r2, r7, r4
   c5fcc:	3a15      	subs	r2, #21
   c5fce:	f022 0203 	bic.w	r2, r2, #3
   c5fd2:	3204      	adds	r2, #4
   c5fd4:	f104 0115 	add.w	r1, r4, #21
   c5fd8:	428f      	cmp	r7, r1
   c5fda:	bf38      	it	cc
   c5fdc:	2204      	movcc	r2, #4
   c5fde:	9201      	str	r2, [sp, #4]
   c5fe0:	9a02      	ldr	r2, [sp, #8]
   c5fe2:	9303      	str	r3, [sp, #12]
   c5fe4:	429a      	cmp	r2, r3
   c5fe6:	d80c      	bhi.n	c6002 <__multiply+0x9e>
   c5fe8:	2e00      	cmp	r6, #0
   c5fea:	dd03      	ble.n	c5ff4 <__multiply+0x90>
   c5fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c5ff0:	2b00      	cmp	r3, #0
   c5ff2:	d05a      	beq.n	c60aa <__multiply+0x146>
   c5ff4:	6106      	str	r6, [r0, #16]
   c5ff6:	b005      	add	sp, #20
   c5ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5ffc:	f843 2b04 	str.w	r2, [r3], #4
   c6000:	e7d8      	b.n	c5fb4 <__multiply+0x50>
   c6002:	f8b3 a000 	ldrh.w	sl, [r3]
   c6006:	f1ba 0f00 	cmp.w	sl, #0
   c600a:	d024      	beq.n	c6056 <__multiply+0xf2>
   c600c:	f104 0e14 	add.w	lr, r4, #20
   c6010:	46a9      	mov	r9, r5
   c6012:	f04f 0c00 	mov.w	ip, #0
   c6016:	f85e 2b04 	ldr.w	r2, [lr], #4
   c601a:	f8d9 1000 	ldr.w	r1, [r9]
   c601e:	fa1f fb82 	uxth.w	fp, r2
   c6022:	b289      	uxth	r1, r1
   c6024:	fb0a 110b 	mla	r1, sl, fp, r1
   c6028:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c602c:	f8d9 2000 	ldr.w	r2, [r9]
   c6030:	4461      	add	r1, ip
   c6032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c6036:	fb0a c20b 	mla	r2, sl, fp, ip
   c603a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c603e:	b289      	uxth	r1, r1
   c6040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c6044:	4577      	cmp	r7, lr
   c6046:	f849 1b04 	str.w	r1, [r9], #4
   c604a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c604e:	d8e2      	bhi.n	c6016 <__multiply+0xb2>
   c6050:	9a01      	ldr	r2, [sp, #4]
   c6052:	f845 c002 	str.w	ip, [r5, r2]
   c6056:	9a03      	ldr	r2, [sp, #12]
   c6058:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c605c:	3304      	adds	r3, #4
   c605e:	f1b9 0f00 	cmp.w	r9, #0
   c6062:	d020      	beq.n	c60a6 <__multiply+0x142>
   c6064:	6829      	ldr	r1, [r5, #0]
   c6066:	f104 0c14 	add.w	ip, r4, #20
   c606a:	46ae      	mov	lr, r5
   c606c:	f04f 0a00 	mov.w	sl, #0
   c6070:	f8bc b000 	ldrh.w	fp, [ip]
   c6074:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c6078:	fb09 220b 	mla	r2, r9, fp, r2
   c607c:	4492      	add	sl, r2
   c607e:	b289      	uxth	r1, r1
   c6080:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c6084:	f84e 1b04 	str.w	r1, [lr], #4
   c6088:	f85c 2b04 	ldr.w	r2, [ip], #4
   c608c:	f8be 1000 	ldrh.w	r1, [lr]
   c6090:	0c12      	lsrs	r2, r2, #16
   c6092:	fb09 1102 	mla	r1, r9, r2, r1
   c6096:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c609a:	4567      	cmp	r7, ip
   c609c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c60a0:	d8e6      	bhi.n	c6070 <__multiply+0x10c>
   c60a2:	9a01      	ldr	r2, [sp, #4]
   c60a4:	50a9      	str	r1, [r5, r2]
   c60a6:	3504      	adds	r5, #4
   c60a8:	e79a      	b.n	c5fe0 <__multiply+0x7c>
   c60aa:	3e01      	subs	r6, #1
   c60ac:	e79c      	b.n	c5fe8 <__multiply+0x84>
   c60ae:	bf00      	nop
   c60b0:	000c87a9 	.word	0x000c87a9
   c60b4:	000c882e 	.word	0x000c882e

000c60b8 <__pow5mult>:
   c60b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c60bc:	4615      	mov	r5, r2
   c60be:	f012 0203 	ands.w	r2, r2, #3
   c60c2:	4606      	mov	r6, r0
   c60c4:	460f      	mov	r7, r1
   c60c6:	d007      	beq.n	c60d8 <__pow5mult+0x20>
   c60c8:	4c25      	ldr	r4, [pc, #148]	; (c6160 <__pow5mult+0xa8>)
   c60ca:	3a01      	subs	r2, #1
   c60cc:	2300      	movs	r3, #0
   c60ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c60d2:	f7ff fe51 	bl	c5d78 <__multadd>
   c60d6:	4607      	mov	r7, r0
   c60d8:	10ad      	asrs	r5, r5, #2
   c60da:	d03d      	beq.n	c6158 <__pow5mult+0xa0>
   c60dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c60de:	b97c      	cbnz	r4, c6100 <__pow5mult+0x48>
   c60e0:	2010      	movs	r0, #16
   c60e2:	f7f8 f8c9 	bl	be278 <malloc>
   c60e6:	4602      	mov	r2, r0
   c60e8:	6270      	str	r0, [r6, #36]	; 0x24
   c60ea:	b928      	cbnz	r0, c60f8 <__pow5mult+0x40>
   c60ec:	4b1d      	ldr	r3, [pc, #116]	; (c6164 <__pow5mult+0xac>)
   c60ee:	481e      	ldr	r0, [pc, #120]	; (c6168 <__pow5mult+0xb0>)
   c60f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c60f4:	f7f8 f910 	bl	be318 <__assert_func>
   c60f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c60fc:	6004      	str	r4, [r0, #0]
   c60fe:	60c4      	str	r4, [r0, #12]
   c6100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c6104:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c6108:	b94c      	cbnz	r4, c611e <__pow5mult+0x66>
   c610a:	f240 2171 	movw	r1, #625	; 0x271
   c610e:	4630      	mov	r0, r6
   c6110:	f7ff ff12 	bl	c5f38 <__i2b>
   c6114:	2300      	movs	r3, #0
   c6116:	f8c8 0008 	str.w	r0, [r8, #8]
   c611a:	4604      	mov	r4, r0
   c611c:	6003      	str	r3, [r0, #0]
   c611e:	f04f 0900 	mov.w	r9, #0
   c6122:	07eb      	lsls	r3, r5, #31
   c6124:	d50a      	bpl.n	c613c <__pow5mult+0x84>
   c6126:	4639      	mov	r1, r7
   c6128:	4622      	mov	r2, r4
   c612a:	4630      	mov	r0, r6
   c612c:	f7ff ff1a 	bl	c5f64 <__multiply>
   c6130:	4639      	mov	r1, r7
   c6132:	4680      	mov	r8, r0
   c6134:	4630      	mov	r0, r6
   c6136:	f7ff fdfd 	bl	c5d34 <_Bfree>
   c613a:	4647      	mov	r7, r8
   c613c:	106d      	asrs	r5, r5, #1
   c613e:	d00b      	beq.n	c6158 <__pow5mult+0xa0>
   c6140:	6820      	ldr	r0, [r4, #0]
   c6142:	b938      	cbnz	r0, c6154 <__pow5mult+0x9c>
   c6144:	4622      	mov	r2, r4
   c6146:	4621      	mov	r1, r4
   c6148:	4630      	mov	r0, r6
   c614a:	f7ff ff0b 	bl	c5f64 <__multiply>
   c614e:	6020      	str	r0, [r4, #0]
   c6150:	f8c0 9000 	str.w	r9, [r0]
   c6154:	4604      	mov	r4, r0
   c6156:	e7e4      	b.n	c6122 <__pow5mult+0x6a>
   c6158:	4638      	mov	r0, r7
   c615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c615e:	bf00      	nop
   c6160:	000c8978 	.word	0x000c8978
   c6164:	000c85d8 	.word	0x000c85d8
   c6168:	000c882e 	.word	0x000c882e

000c616c <__lshift>:
   c616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c6170:	460c      	mov	r4, r1
   c6172:	6849      	ldr	r1, [r1, #4]
   c6174:	6923      	ldr	r3, [r4, #16]
   c6176:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c617a:	68a3      	ldr	r3, [r4, #8]
   c617c:	4607      	mov	r7, r0
   c617e:	4691      	mov	r9, r2
   c6180:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c6184:	f108 0601 	add.w	r6, r8, #1
   c6188:	42b3      	cmp	r3, r6
   c618a:	db0b      	blt.n	c61a4 <__lshift+0x38>
   c618c:	4638      	mov	r0, r7
   c618e:	f7ff fd91 	bl	c5cb4 <_Balloc>
   c6192:	4605      	mov	r5, r0
   c6194:	b948      	cbnz	r0, c61aa <__lshift+0x3e>
   c6196:	4602      	mov	r2, r0
   c6198:	4b2a      	ldr	r3, [pc, #168]	; (c6244 <__lshift+0xd8>)
   c619a:	482b      	ldr	r0, [pc, #172]	; (c6248 <__lshift+0xdc>)
   c619c:	f240 11d9 	movw	r1, #473	; 0x1d9
   c61a0:	f7f8 f8ba 	bl	be318 <__assert_func>
   c61a4:	3101      	adds	r1, #1
   c61a6:	005b      	lsls	r3, r3, #1
   c61a8:	e7ee      	b.n	c6188 <__lshift+0x1c>
   c61aa:	2300      	movs	r3, #0
   c61ac:	f100 0114 	add.w	r1, r0, #20
   c61b0:	f100 0210 	add.w	r2, r0, #16
   c61b4:	4618      	mov	r0, r3
   c61b6:	4553      	cmp	r3, sl
   c61b8:	db37      	blt.n	c622a <__lshift+0xbe>
   c61ba:	6920      	ldr	r0, [r4, #16]
   c61bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c61c0:	f104 0314 	add.w	r3, r4, #20
   c61c4:	f019 091f 	ands.w	r9, r9, #31
   c61c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c61cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c61d0:	d02f      	beq.n	c6232 <__lshift+0xc6>
   c61d2:	f1c9 0e20 	rsb	lr, r9, #32
   c61d6:	468a      	mov	sl, r1
   c61d8:	f04f 0c00 	mov.w	ip, #0
   c61dc:	681a      	ldr	r2, [r3, #0]
   c61de:	fa02 f209 	lsl.w	r2, r2, r9
   c61e2:	ea42 020c 	orr.w	r2, r2, ip
   c61e6:	f84a 2b04 	str.w	r2, [sl], #4
   c61ea:	f853 2b04 	ldr.w	r2, [r3], #4
   c61ee:	4298      	cmp	r0, r3
   c61f0:	fa22 fc0e 	lsr.w	ip, r2, lr
   c61f4:	d8f2      	bhi.n	c61dc <__lshift+0x70>
   c61f6:	1b03      	subs	r3, r0, r4
   c61f8:	3b15      	subs	r3, #21
   c61fa:	f023 0303 	bic.w	r3, r3, #3
   c61fe:	3304      	adds	r3, #4
   c6200:	f104 0215 	add.w	r2, r4, #21
   c6204:	4290      	cmp	r0, r2
   c6206:	bf38      	it	cc
   c6208:	2304      	movcc	r3, #4
   c620a:	f841 c003 	str.w	ip, [r1, r3]
   c620e:	f1bc 0f00 	cmp.w	ip, #0
   c6212:	d001      	beq.n	c6218 <__lshift+0xac>
   c6214:	f108 0602 	add.w	r6, r8, #2
   c6218:	3e01      	subs	r6, #1
   c621a:	4638      	mov	r0, r7
   c621c:	612e      	str	r6, [r5, #16]
   c621e:	4621      	mov	r1, r4
   c6220:	f7ff fd88 	bl	c5d34 <_Bfree>
   c6224:	4628      	mov	r0, r5
   c6226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c622a:	f842 0f04 	str.w	r0, [r2, #4]!
   c622e:	3301      	adds	r3, #1
   c6230:	e7c1      	b.n	c61b6 <__lshift+0x4a>
   c6232:	3904      	subs	r1, #4
   c6234:	f853 2b04 	ldr.w	r2, [r3], #4
   c6238:	f841 2f04 	str.w	r2, [r1, #4]!
   c623c:	4298      	cmp	r0, r3
   c623e:	d8f9      	bhi.n	c6234 <__lshift+0xc8>
   c6240:	e7ea      	b.n	c6218 <__lshift+0xac>
   c6242:	bf00      	nop
   c6244:	000c87a9 	.word	0x000c87a9
   c6248:	000c882e 	.word	0x000c882e

000c624c <__mcmp>:
   c624c:	b530      	push	{r4, r5, lr}
   c624e:	6902      	ldr	r2, [r0, #16]
   c6250:	690c      	ldr	r4, [r1, #16]
   c6252:	1b12      	subs	r2, r2, r4
   c6254:	d10e      	bne.n	c6274 <__mcmp+0x28>
   c6256:	f100 0314 	add.w	r3, r0, #20
   c625a:	3114      	adds	r1, #20
   c625c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c6260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c6264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c6268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c626c:	42a5      	cmp	r5, r4
   c626e:	d003      	beq.n	c6278 <__mcmp+0x2c>
   c6270:	d305      	bcc.n	c627e <__mcmp+0x32>
   c6272:	2201      	movs	r2, #1
   c6274:	4610      	mov	r0, r2
   c6276:	bd30      	pop	{r4, r5, pc}
   c6278:	4283      	cmp	r3, r0
   c627a:	d3f3      	bcc.n	c6264 <__mcmp+0x18>
   c627c:	e7fa      	b.n	c6274 <__mcmp+0x28>
   c627e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c6282:	e7f7      	b.n	c6274 <__mcmp+0x28>

000c6284 <__mdiff>:
   c6284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6288:	460c      	mov	r4, r1
   c628a:	4606      	mov	r6, r0
   c628c:	4611      	mov	r1, r2
   c628e:	4620      	mov	r0, r4
   c6290:	4690      	mov	r8, r2
   c6292:	f7ff ffdb 	bl	c624c <__mcmp>
   c6296:	1e05      	subs	r5, r0, #0
   c6298:	d110      	bne.n	c62bc <__mdiff+0x38>
   c629a:	4629      	mov	r1, r5
   c629c:	4630      	mov	r0, r6
   c629e:	f7ff fd09 	bl	c5cb4 <_Balloc>
   c62a2:	b930      	cbnz	r0, c62b2 <__mdiff+0x2e>
   c62a4:	4b3a      	ldr	r3, [pc, #232]	; (c6390 <__mdiff+0x10c>)
   c62a6:	4602      	mov	r2, r0
   c62a8:	f240 2132 	movw	r1, #562	; 0x232
   c62ac:	4839      	ldr	r0, [pc, #228]	; (c6394 <__mdiff+0x110>)
   c62ae:	f7f8 f833 	bl	be318 <__assert_func>
   c62b2:	2301      	movs	r3, #1
   c62b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c62b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c62bc:	bfa4      	itt	ge
   c62be:	4643      	movge	r3, r8
   c62c0:	46a0      	movge	r8, r4
   c62c2:	4630      	mov	r0, r6
   c62c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c62c8:	bfa6      	itte	ge
   c62ca:	461c      	movge	r4, r3
   c62cc:	2500      	movge	r5, #0
   c62ce:	2501      	movlt	r5, #1
   c62d0:	f7ff fcf0 	bl	c5cb4 <_Balloc>
   c62d4:	b920      	cbnz	r0, c62e0 <__mdiff+0x5c>
   c62d6:	4b2e      	ldr	r3, [pc, #184]	; (c6390 <__mdiff+0x10c>)
   c62d8:	4602      	mov	r2, r0
   c62da:	f44f 7110 	mov.w	r1, #576	; 0x240
   c62de:	e7e5      	b.n	c62ac <__mdiff+0x28>
   c62e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c62e4:	6926      	ldr	r6, [r4, #16]
   c62e6:	60c5      	str	r5, [r0, #12]
   c62e8:	f104 0914 	add.w	r9, r4, #20
   c62ec:	f108 0514 	add.w	r5, r8, #20
   c62f0:	f100 0e14 	add.w	lr, r0, #20
   c62f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c62f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c62fc:	f108 0210 	add.w	r2, r8, #16
   c6300:	46f2      	mov	sl, lr
   c6302:	2100      	movs	r1, #0
   c6304:	f859 3b04 	ldr.w	r3, [r9], #4
   c6308:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c630c:	fa1f f883 	uxth.w	r8, r3
   c6310:	fa11 f18b 	uxtah	r1, r1, fp
   c6314:	0c1b      	lsrs	r3, r3, #16
   c6316:	eba1 0808 	sub.w	r8, r1, r8
   c631a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c631e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c6322:	fa1f f888 	uxth.w	r8, r8
   c6326:	1419      	asrs	r1, r3, #16
   c6328:	454e      	cmp	r6, r9
   c632a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c632e:	f84a 3b04 	str.w	r3, [sl], #4
   c6332:	d8e7      	bhi.n	c6304 <__mdiff+0x80>
   c6334:	1b33      	subs	r3, r6, r4
   c6336:	3b15      	subs	r3, #21
   c6338:	f023 0303 	bic.w	r3, r3, #3
   c633c:	3304      	adds	r3, #4
   c633e:	3415      	adds	r4, #21
   c6340:	42a6      	cmp	r6, r4
   c6342:	bf38      	it	cc
   c6344:	2304      	movcc	r3, #4
   c6346:	441d      	add	r5, r3
   c6348:	4473      	add	r3, lr
   c634a:	469e      	mov	lr, r3
   c634c:	462e      	mov	r6, r5
   c634e:	4566      	cmp	r6, ip
   c6350:	d30e      	bcc.n	c6370 <__mdiff+0xec>
   c6352:	f10c 0203 	add.w	r2, ip, #3
   c6356:	1b52      	subs	r2, r2, r5
   c6358:	f022 0203 	bic.w	r2, r2, #3
   c635c:	3d03      	subs	r5, #3
   c635e:	45ac      	cmp	ip, r5
   c6360:	bf38      	it	cc
   c6362:	2200      	movcc	r2, #0
   c6364:	441a      	add	r2, r3
   c6366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c636a:	b17b      	cbz	r3, c638c <__mdiff+0x108>
   c636c:	6107      	str	r7, [r0, #16]
   c636e:	e7a3      	b.n	c62b8 <__mdiff+0x34>
   c6370:	f856 8b04 	ldr.w	r8, [r6], #4
   c6374:	fa11 f288 	uxtah	r2, r1, r8
   c6378:	1414      	asrs	r4, r2, #16
   c637a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c637e:	b292      	uxth	r2, r2
   c6380:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c6384:	f84e 2b04 	str.w	r2, [lr], #4
   c6388:	1421      	asrs	r1, r4, #16
   c638a:	e7e0      	b.n	c634e <__mdiff+0xca>
   c638c:	3f01      	subs	r7, #1
   c638e:	e7ea      	b.n	c6366 <__mdiff+0xe2>
   c6390:	000c87a9 	.word	0x000c87a9
   c6394:	000c882e 	.word	0x000c882e

000c6398 <__ulp>:
   c6398:	b082      	sub	sp, #8
   c639a:	ed8d 0b00 	vstr	d0, [sp]
   c639e:	9b01      	ldr	r3, [sp, #4]
   c63a0:	4912      	ldr	r1, [pc, #72]	; (c63ec <__ulp+0x54>)
   c63a2:	4019      	ands	r1, r3
   c63a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c63a8:	2900      	cmp	r1, #0
   c63aa:	dd05      	ble.n	c63b8 <__ulp+0x20>
   c63ac:	2200      	movs	r2, #0
   c63ae:	460b      	mov	r3, r1
   c63b0:	ec43 2b10 	vmov	d0, r2, r3
   c63b4:	b002      	add	sp, #8
   c63b6:	4770      	bx	lr
   c63b8:	4249      	negs	r1, r1
   c63ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c63be:	ea4f 5021 	mov.w	r0, r1, asr #20
   c63c2:	f04f 0200 	mov.w	r2, #0
   c63c6:	f04f 0300 	mov.w	r3, #0
   c63ca:	da04      	bge.n	c63d6 <__ulp+0x3e>
   c63cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c63d0:	fa41 f300 	asr.w	r3, r1, r0
   c63d4:	e7ec      	b.n	c63b0 <__ulp+0x18>
   c63d6:	f1a0 0114 	sub.w	r1, r0, #20
   c63da:	291e      	cmp	r1, #30
   c63dc:	bfda      	itte	le
   c63de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c63e2:	fa20 f101 	lsrle.w	r1, r0, r1
   c63e6:	2101      	movgt	r1, #1
   c63e8:	460a      	mov	r2, r1
   c63ea:	e7e1      	b.n	c63b0 <__ulp+0x18>
   c63ec:	7ff00000 	.word	0x7ff00000

000c63f0 <__b2d>:
   c63f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c63f2:	6905      	ldr	r5, [r0, #16]
   c63f4:	f100 0714 	add.w	r7, r0, #20
   c63f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c63fc:	1f2e      	subs	r6, r5, #4
   c63fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c6402:	4620      	mov	r0, r4
   c6404:	f7ff fd48 	bl	c5e98 <__hi0bits>
   c6408:	f1c0 0320 	rsb	r3, r0, #32
   c640c:	280a      	cmp	r0, #10
   c640e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c648c <__b2d+0x9c>
   c6412:	600b      	str	r3, [r1, #0]
   c6414:	dc14      	bgt.n	c6440 <__b2d+0x50>
   c6416:	f1c0 0e0b 	rsb	lr, r0, #11
   c641a:	fa24 f10e 	lsr.w	r1, r4, lr
   c641e:	42b7      	cmp	r7, r6
   c6420:	ea41 030c 	orr.w	r3, r1, ip
   c6424:	bf34      	ite	cc
   c6426:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c642a:	2100      	movcs	r1, #0
   c642c:	3015      	adds	r0, #21
   c642e:	fa04 f000 	lsl.w	r0, r4, r0
   c6432:	fa21 f10e 	lsr.w	r1, r1, lr
   c6436:	ea40 0201 	orr.w	r2, r0, r1
   c643a:	ec43 2b10 	vmov	d0, r2, r3
   c643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c6440:	42b7      	cmp	r7, r6
   c6442:	bf3a      	itte	cc
   c6444:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6448:	f1a5 0608 	subcc.w	r6, r5, #8
   c644c:	2100      	movcs	r1, #0
   c644e:	380b      	subs	r0, #11
   c6450:	d017      	beq.n	c6482 <__b2d+0x92>
   c6452:	f1c0 0c20 	rsb	ip, r0, #32
   c6456:	fa04 f500 	lsl.w	r5, r4, r0
   c645a:	42be      	cmp	r6, r7
   c645c:	fa21 f40c 	lsr.w	r4, r1, ip
   c6460:	ea45 0504 	orr.w	r5, r5, r4
   c6464:	bf8c      	ite	hi
   c6466:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c646a:	2400      	movls	r4, #0
   c646c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c6470:	fa01 f000 	lsl.w	r0, r1, r0
   c6474:	fa24 f40c 	lsr.w	r4, r4, ip
   c6478:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c647c:	ea40 0204 	orr.w	r2, r0, r4
   c6480:	e7db      	b.n	c643a <__b2d+0x4a>
   c6482:	ea44 030c 	orr.w	r3, r4, ip
   c6486:	460a      	mov	r2, r1
   c6488:	e7d7      	b.n	c643a <__b2d+0x4a>
   c648a:	bf00      	nop
   c648c:	3ff00000 	.word	0x3ff00000

000c6490 <__d2b>:
   c6490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c6494:	4689      	mov	r9, r1
   c6496:	2101      	movs	r1, #1
   c6498:	ec57 6b10 	vmov	r6, r7, d0
   c649c:	4690      	mov	r8, r2
   c649e:	f7ff fc09 	bl	c5cb4 <_Balloc>
   c64a2:	4604      	mov	r4, r0
   c64a4:	b930      	cbnz	r0, c64b4 <__d2b+0x24>
   c64a6:	4602      	mov	r2, r0
   c64a8:	4b25      	ldr	r3, [pc, #148]	; (c6540 <__d2b+0xb0>)
   c64aa:	4826      	ldr	r0, [pc, #152]	; (c6544 <__d2b+0xb4>)
   c64ac:	f240 310a 	movw	r1, #778	; 0x30a
   c64b0:	f7f7 ff32 	bl	be318 <__assert_func>
   c64b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c64b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c64bc:	bb35      	cbnz	r5, c650c <__d2b+0x7c>
   c64be:	2e00      	cmp	r6, #0
   c64c0:	9301      	str	r3, [sp, #4]
   c64c2:	d028      	beq.n	c6516 <__d2b+0x86>
   c64c4:	4668      	mov	r0, sp
   c64c6:	9600      	str	r6, [sp, #0]
   c64c8:	f7ff fd06 	bl	c5ed8 <__lo0bits>
   c64cc:	9900      	ldr	r1, [sp, #0]
   c64ce:	b300      	cbz	r0, c6512 <__d2b+0x82>
   c64d0:	9a01      	ldr	r2, [sp, #4]
   c64d2:	f1c0 0320 	rsb	r3, r0, #32
   c64d6:	fa02 f303 	lsl.w	r3, r2, r3
   c64da:	430b      	orrs	r3, r1
   c64dc:	40c2      	lsrs	r2, r0
   c64de:	6163      	str	r3, [r4, #20]
   c64e0:	9201      	str	r2, [sp, #4]
   c64e2:	9b01      	ldr	r3, [sp, #4]
   c64e4:	61a3      	str	r3, [r4, #24]
   c64e6:	2b00      	cmp	r3, #0
   c64e8:	bf14      	ite	ne
   c64ea:	2202      	movne	r2, #2
   c64ec:	2201      	moveq	r2, #1
   c64ee:	6122      	str	r2, [r4, #16]
   c64f0:	b1d5      	cbz	r5, c6528 <__d2b+0x98>
   c64f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c64f6:	4405      	add	r5, r0
   c64f8:	f8c9 5000 	str.w	r5, [r9]
   c64fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6500:	f8c8 0000 	str.w	r0, [r8]
   c6504:	4620      	mov	r0, r4
   c6506:	b003      	add	sp, #12
   c6508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c650c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6510:	e7d5      	b.n	c64be <__d2b+0x2e>
   c6512:	6161      	str	r1, [r4, #20]
   c6514:	e7e5      	b.n	c64e2 <__d2b+0x52>
   c6516:	a801      	add	r0, sp, #4
   c6518:	f7ff fcde 	bl	c5ed8 <__lo0bits>
   c651c:	9b01      	ldr	r3, [sp, #4]
   c651e:	6163      	str	r3, [r4, #20]
   c6520:	2201      	movs	r2, #1
   c6522:	6122      	str	r2, [r4, #16]
   c6524:	3020      	adds	r0, #32
   c6526:	e7e3      	b.n	c64f0 <__d2b+0x60>
   c6528:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c652c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6530:	f8c9 0000 	str.w	r0, [r9]
   c6534:	6918      	ldr	r0, [r3, #16]
   c6536:	f7ff fcaf 	bl	c5e98 <__hi0bits>
   c653a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c653e:	e7df      	b.n	c6500 <__d2b+0x70>
   c6540:	000c87a9 	.word	0x000c87a9
   c6544:	000c882e 	.word	0x000c882e

000c6548 <__ratio>:
   c6548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c654c:	4688      	mov	r8, r1
   c654e:	4669      	mov	r1, sp
   c6550:	4681      	mov	r9, r0
   c6552:	f7ff ff4d 	bl	c63f0 <__b2d>
   c6556:	a901      	add	r1, sp, #4
   c6558:	4640      	mov	r0, r8
   c655a:	ec55 4b10 	vmov	r4, r5, d0
   c655e:	f7ff ff47 	bl	c63f0 <__b2d>
   c6562:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6566:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c656a:	eba3 0c02 	sub.w	ip, r3, r2
   c656e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c6572:	1a9b      	subs	r3, r3, r2
   c6574:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c6578:	ec51 0b10 	vmov	r0, r1, d0
   c657c:	2b00      	cmp	r3, #0
   c657e:	bfd6      	itet	le
   c6580:	460a      	movle	r2, r1
   c6582:	462a      	movgt	r2, r5
   c6584:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c6588:	468b      	mov	fp, r1
   c658a:	462f      	mov	r7, r5
   c658c:	bfd4      	ite	le
   c658e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c6592:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c6596:	4620      	mov	r0, r4
   c6598:	ee10 2a10 	vmov	r2, s0
   c659c:	465b      	mov	r3, fp
   c659e:	4639      	mov	r1, r7
   c65a0:	f7fd fd58 	bl	c4054 <__aeabi_ddiv>
   c65a4:	ec41 0b10 	vmov	d0, r0, r1
   c65a8:	b003      	add	sp, #12
   c65aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c65ae <__copybits>:
   c65ae:	3901      	subs	r1, #1
   c65b0:	b570      	push	{r4, r5, r6, lr}
   c65b2:	1149      	asrs	r1, r1, #5
   c65b4:	6914      	ldr	r4, [r2, #16]
   c65b6:	3101      	adds	r1, #1
   c65b8:	f102 0314 	add.w	r3, r2, #20
   c65bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c65c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c65c4:	1f05      	subs	r5, r0, #4
   c65c6:	42a3      	cmp	r3, r4
   c65c8:	d30c      	bcc.n	c65e4 <__copybits+0x36>
   c65ca:	1aa3      	subs	r3, r4, r2
   c65cc:	3b11      	subs	r3, #17
   c65ce:	f023 0303 	bic.w	r3, r3, #3
   c65d2:	3211      	adds	r2, #17
   c65d4:	42a2      	cmp	r2, r4
   c65d6:	bf88      	it	hi
   c65d8:	2300      	movhi	r3, #0
   c65da:	4418      	add	r0, r3
   c65dc:	2300      	movs	r3, #0
   c65de:	4288      	cmp	r0, r1
   c65e0:	d305      	bcc.n	c65ee <__copybits+0x40>
   c65e2:	bd70      	pop	{r4, r5, r6, pc}
   c65e4:	f853 6b04 	ldr.w	r6, [r3], #4
   c65e8:	f845 6f04 	str.w	r6, [r5, #4]!
   c65ec:	e7eb      	b.n	c65c6 <__copybits+0x18>
   c65ee:	f840 3b04 	str.w	r3, [r0], #4
   c65f2:	e7f4      	b.n	c65de <__copybits+0x30>

000c65f4 <__any_on>:
   c65f4:	f100 0214 	add.w	r2, r0, #20
   c65f8:	6900      	ldr	r0, [r0, #16]
   c65fa:	114b      	asrs	r3, r1, #5
   c65fc:	4298      	cmp	r0, r3
   c65fe:	b510      	push	{r4, lr}
   c6600:	db11      	blt.n	c6626 <__any_on+0x32>
   c6602:	dd0a      	ble.n	c661a <__any_on+0x26>
   c6604:	f011 011f 	ands.w	r1, r1, #31
   c6608:	d007      	beq.n	c661a <__any_on+0x26>
   c660a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c660e:	fa24 f001 	lsr.w	r0, r4, r1
   c6612:	fa00 f101 	lsl.w	r1, r0, r1
   c6616:	428c      	cmp	r4, r1
   c6618:	d10b      	bne.n	c6632 <__any_on+0x3e>
   c661a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c661e:	4293      	cmp	r3, r2
   c6620:	d803      	bhi.n	c662a <__any_on+0x36>
   c6622:	2000      	movs	r0, #0
   c6624:	bd10      	pop	{r4, pc}
   c6626:	4603      	mov	r3, r0
   c6628:	e7f7      	b.n	c661a <__any_on+0x26>
   c662a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c662e:	2900      	cmp	r1, #0
   c6630:	d0f5      	beq.n	c661e <__any_on+0x2a>
   c6632:	2001      	movs	r0, #1
   c6634:	e7f6      	b.n	c6624 <__any_on+0x30>

000c6636 <_calloc_r>:
   c6636:	b513      	push	{r0, r1, r4, lr}
   c6638:	434a      	muls	r2, r1
   c663a:	4611      	mov	r1, r2
   c663c:	9201      	str	r2, [sp, #4]
   c663e:	f7f7 fe5b 	bl	be2f8 <_malloc_r>
   c6642:	4604      	mov	r4, r0
   c6644:	b118      	cbz	r0, c664e <_calloc_r+0x18>
   c6646:	9a01      	ldr	r2, [sp, #4]
   c6648:	2100      	movs	r1, #0
   c664a:	f7fd ff8d 	bl	c4568 <memset>
   c664e:	4620      	mov	r0, r4
   c6650:	b002      	add	sp, #8
   c6652:	bd10      	pop	{r4, pc}
   c6654:	0000      	movs	r0, r0
	...

000c6658 <nan>:
   c6658:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6660 <nan+0x8>
   c665c:	4770      	bx	lr
   c665e:	bf00      	nop
   c6660:	00000000 	.word	0x00000000
   c6664:	7ff80000 	.word	0x7ff80000

000c6668 <__ascii_wctomb>:
   c6668:	b149      	cbz	r1, c667e <__ascii_wctomb+0x16>
   c666a:	2aff      	cmp	r2, #255	; 0xff
   c666c:	bf85      	ittet	hi
   c666e:	238a      	movhi	r3, #138	; 0x8a
   c6670:	6003      	strhi	r3, [r0, #0]
   c6672:	700a      	strbls	r2, [r1, #0]
   c6674:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c6678:	bf98      	it	ls
   c667a:	2001      	movls	r0, #1
   c667c:	4770      	bx	lr
   c667e:	4608      	mov	r0, r1
   c6680:	4770      	bx	lr
	...

000c6684 <__aeabi_d2lz>:
   c6684:	b538      	push	{r3, r4, r5, lr}
   c6686:	2200      	movs	r2, #0
   c6688:	2300      	movs	r3, #0
   c668a:	4604      	mov	r4, r0
   c668c:	460d      	mov	r5, r1
   c668e:	f7fd fe29 	bl	c42e4 <__aeabi_dcmplt>
   c6692:	b928      	cbnz	r0, c66a0 <__aeabi_d2lz+0x1c>
   c6694:	4620      	mov	r0, r4
   c6696:	4629      	mov	r1, r5
   c6698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c669c:	f7fd bef8 	b.w	c4490 <__aeabi_d2ulz>
   c66a0:	4620      	mov	r0, r4
   c66a2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c66a6:	f7fd fef3 	bl	c4490 <__aeabi_d2ulz>
   c66aa:	4240      	negs	r0, r0
   c66ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c66b0:	bd38      	pop	{r3, r4, r5, pc}
   c66b2:	bf00      	nop

000c66b4 <dynalib_user>:
   c66b4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c66c4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c66d4:	7620 7269 7574 6c61 4c00 5349 4d33 4c44      virtual.LIS3MDL
   c66e4:	0000 0000                                   ....

000c66e8 <CSWTCH.26>:
   c66e8:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c66f8 <_ZTV16Adafruit_LIS3MDL>:
	...
   c6700:	40d3 000b 411d 000b 40d1 000b 41cd 000b     .@...A...@...A..
   c6710:	40d5 000b 6564 6166 6c75 2074 4d00 4253     .@..default .MSB
   c6720:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   c6730:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   c6740:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   c6750:	4f4d 4544 7525 003e 6573 5074 6361 656b     MODE%u>.setPacke
   c6760:	4374 6766 6150 6c79 616f 5364 7a69 3a65     tCfgPayloadSize:
   c6770:	5a20 7265 206f 6170 6c79 616f 5364 7a69      Zero payloadSiz
   c6780:	2165 7300 7465 6150 6b63 7465 6643 5067     e!.setPacketCfgP
   c6790:	7961 6f6c 6461 6953 657a 203a 4152 204d     ayloadSize: RAM 
   c67a0:	6c61 6f6c 2063 6166 6c69 6465 0021 6573     alloc failed!.se
   c67b0:	5074 6361 656b 4374 6766 6150 6c79 616f     tPacketCfgPayloa
   c67c0:	5364 7a69 3a65 5220 4d41 7220 7365 7a69     dSize: RAM resiz
   c67d0:	2065 6166 6c69 6465 0021 4e47 4747 0041     e failed!.GNGGA.
   c67e0:	5047 5456 0047 4e47 5456 0047 5047 4d52     GPVTG.GNVTG.GPRM
   c67f0:	0043 4e47 4d52 0043 5047 445a 0041 4e47     C.GNRMC.GPZDA.GN
   c6800:	445a 0041 5047 4747 0041 6573 646e 7053     ZDA.GPGGA.sendSp
   c6810:	4369 6d6f 616d 646e 203a 6f6e 6d20 6d65     iCommand: no mem
   c6820:	726f 2079 6c61 6f6c 6163 6974 6e6f 6620     ory allocation f
   c6830:	726f 5320 4950 4220 6675 6566 2172 7300     or SPI Buffer!.s
   c6840:	6e65 5364 6970 6f43 6d6d 6e61 3a64 0020     endSpiCommand: .
   c6850:	4c43 3a53 4e00 5641 4100 4b43 4300 4746     CLS:.NAV.ACK.CFG
   c6860:	4d00 4e4f 2000 4449 003a 5650 0054 4152     .MON. ID:.PVT.RA
   c6870:	4554 5300 5641 0045 4c20 6e65 203a 7830     TE.SAVE. Len: 0x
   c6880:	2000 6150 6c79 616f 3a64 2000 6150 6c79     . Payload:. Payl
   c6890:	616f 3a64 4920 4e47 524f 4445 6300 6572     oad: IGNORED.cre
   c68a0:	7461 4665 6c69 4265 6675 6566 3a72 5720     ateFileBuffer: W
   c68b0:	7261 696e 676e 202e 6966 656c 7542 6666     arning. fileBuff
   c68c0:	7265 6953 657a 6920 2073 657a 6f72 202e     erSize is zero. 
   c68d0:	6144 6174 6c20 676f 6967 676e 6920 2073     Data logging is 
   c68e0:	6f6e 2074 6f70 7373 6269 656c 002e 7263     not possible..cr
   c68f0:	6165 6574 6946 656c 7542 6666 7265 203a     eateFileBuffer: 
   c6900:	6157 6e72 6e69 2e67 4620 6c69 2065 7562     Warning. File bu
   c6910:	6666 7265 6120 726c 6165 7964 6520 6978     ffer already exi
   c6920:	7473 2e73 5320 696b 7070 6e69 2e67 2e2e     sts. Skipping...
   c6930:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c6940:	3a72 5220 4d41 6120 6c6c 636f 6620 6961     r: RAM alloc fai
   c6950:	656c 2164 6300 6572 7461 4665 6c69 4265     led!.createFileB
   c6960:	6675 6566 3a72 6620 6c69 4265 6675 6566     uffer: fileBuffe
   c6970:	5372 7a69 2065 7369 203a 7300 6f74 6572     rSize is: .store
   c6980:	6150 6b63 7465 203a 6966 656c 6220 6675     Packet: file buf
   c6990:	6566 2072 6f6e 2074 7661 6961 616c 6c62     fer not availabl
   c69a0:	2165 7300 6f74 6572 6150 6b63 7465 203a     e!.storePacket: 
   c69b0:	6e69 7573 6666 6369 6569 746e 7320 6170     insufficient spa
   c69c0:	6563 6120 6176 6c69 6261 656c 2021 6144     ce available! Da
   c69d0:	6174 7720 6c69 206c 6562 6c20 736f 2174     ta will be lost!
   c69e0:	7000 6f72 6563 7373 4255 7058 6361 656b     .processUBXpacke
   c69f0:	3a74 7020 6361 656b 5574 5842 474d 4141     t: packetUBXMGAA
   c6a00:	4b43 6920 2073 7566 6c6c 202e 4341 204b     CK is full. ACK 
   c6a10:	6977 6c6c 6220 2065 6f6c 7473 0021 7270     will be lost!.pr
   c6a20:	636f 7365 5573 5842 6170 6b63 7465 203a     ocessUBXpacket: 
   c6a30:	6170 6b63 7465 4255 4d58 4147 4244 2044     packetUBXMGADBD 
   c6a40:	7369 6620 6c75 2e6c 4420 4442 6420 7461     is full. DBD dat
   c6a50:	2061 6977 6c6c 6220 2065 6f6c 7473 0021     a will be lost!.
   c6a60:	7270 636f 7365 5573 5842 203a 6567 4d74     processUBX: getM
   c6a70:	7861 6150 6c79 616f 5364 7a69 2065 6572     axPayloadSize re
   c6a80:	7574 6e72 6465 5a20 5245 214f 2021 6c43     turned ZERO!! Cl
   c6a90:	7361 3a73 3020 0078 7270 636f 7365 5573     ass: 0x.processU
   c6aa0:	5842 203a 414e 4b43 7220 6365 6965 6576     BX: NACK receive
   c6ab0:	3a64 5220 7165 6575 7473 6465 4320 616c     d: Requested Cla
   c6ac0:	7373 203a 7830 2000 6552 7571 7365 6574     ss: 0x. Requeste
   c6ad0:	2064 4449 203a 7830 7000 6f72 6563 7373     d ID: 0x.process
   c6ae0:	4255 3a58 6920 636e 6d6f 6e69 2067 6122     UBX: incoming "a
   c6af0:	7475 6d6f 7461 6369 2022 656d 7373 6761     utomatic" messag
   c6b00:	3a65 4320 616c 7373 203a 7830 4900 636e     e: Class: 0x.Inc
   c6b10:	6d6f 6e69 3a67 5320 7a69 3a65 0020 5220     oming: Size: . R
   c6b20:	6365 6965 6576 3a64 0020 6170 6b63 7465     eceived: .packet
   c6b30:	6643 2067 6f6e 2077 6176 696c 0064 6170     Cfg now valid.pa
   c6b40:	6b63 7465 6341 206b 6f6e 2077 6176 696c     cketAck now vali
   c6b50:	0064 6170 6b63 7465 6643 2067 6c63 7361     d.packetCfg clas
   c6b60:	4173 646e 4449 616d 6374 0068 6170 6b63     sAndIDmatch.pack
   c6b70:	7465 6341 206b 6c63 7361 4173 646e 4449     etAck classAndID
   c6b80:	616d 6374 0068 6843 6365 736b 6d75 6620     match.Checksum f
   c6b90:	6961 656c 3a64 2000 6863 6365 736b 6d75     ailed:. checksum
   c6ba0:	3a41 0020 6320 6568 6b63 7573 426d 203a     A: . checksumB: 
   c6bb0:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c6bc0:	416d 203a 2000 6f72 6c6c 6e69 4367 6568     mA: . rollingChe
   c6bd0:	6b63 7573 426d 203a 7000 6f72 6563 7373     cksumB: .process
   c6be0:	4255 3a58 6220 6675 6566 2072 766f 7265     UBX: buffer over
   c6bf0:	7572 206e 6564 6574 7463 6465 0021 7270     run detected!.pr
   c6c00:	636f 7365 5573 5842 203a 6f63 6e75 6574     ocessUBX: counte
   c6c10:	2072 6968 2074 616d 6978 756d 5f6d 6170     r hit maximum_pa
   c6c20:	6c79 616f 5f64 6973 657a 2b20 3620 0021     yload_size + 6!.
   c6c30:	6120 7463 7669 5065 6361 656b 4274 6675      activePacketBuf
   c6c40:	6566 3a72 0020 6d20 7861 6d69 6d75 705f     fer: . maximum_p
   c6c50:	7961 6f6c 6461 735f 7a69 3a65 0020 7473     ayload_size: .st
   c6c60:	726f 4665 6c69 4265 7479 7365 203a 6966     oreFileBytes: fi
   c6c70:	656c 6220 6675 6566 2072 6f6e 2074 7661     le buffer not av
   c6c80:	6961 616c 6c62 2165 7300 6f74 6572 6946     ailable!.storeFi
   c6c90:	656c 7942 6574 3a73 6920 736e 6675 6966     leBytes: insuffi
   c6ca0:	6963 6e65 2074 7073 6361 2065 7661 6961     cient space avai
   c6cb0:	616c 6c62 2165 4420 7461 2061 6977 6c6c     lable! Data will
   c6cc0:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c6cd0:	3a73 6720 7465 614d 5078 7961 6f6c 6461     s: getMaxPayload
   c6ce0:	6953 657a 7220 7465 7275 656e 2064 455a     Size returned ZE
   c6cf0:	4f52 2121 4320 616c 7373 203a 7830 7000     RO!! Class: 0x.p
   c6d00:	6f72 6563 7373 203a 656d 6f6d 7972 6920     rocess: memory i
   c6d10:	2073 6c61 6572 6461 2079 6c61 6f6c 6163     s already alloca
   c6d20:	6574 2064 6f66 2072 6170 6c79 616f 4164     ted for payloadA
   c6d30:	7475 216f 4420 6c65 7465 6e69 2e67 2e2e     uto! Deleting...
   c6d40:	7000 6f72 6563 7373 203a 656d 6f6d 7972     .process: memory
   c6d50:	6120 6c6c 636f 7461 6f69 206e 6166 6c69      allocation fail
   c6d60:	6465 6620 726f 2220 7561 6f74 616d 6974     ed for "automati
   c6d70:	2263 6d20 7365 6173 6567 203a 6c43 7361     c" message: Clas
   c6d80:	3a73 3020 0078 7270 636f 7365 3a73 2220     s: 0x.process: "
   c6d90:	7561 6f74 616d 6974 2263 6d20 7365 6173     automatic" messa
   c6da0:	6567 6320 756f 646c 6f20 6576 7772 6972     ge could overwri
   c6db0:	6574 6420 7461 0061 7270 636f 7365 3a73     te data.process:
   c6dc0:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c6dd0:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c6de0:	616c 7373 203a 7830 7000 6f72 6563 7373     lass: 0x.process
   c6df0:	203a 455a 4f52 4c20 4e45 5447 2048 6170     : ZERO LENGTH pa
   c6e00:	6b63 7465 7220 6365 6965 6576 3a64 4320     cket received: C
   c6e10:	616c 7373 203a 7830 7000 6f72 6563 7373     lass: 0x.process
   c6e20:	203a 4341 204b 6572 6563 7669 6465 7720     : ACK received w
   c6e30:	7469 2068 6c2e 6e65 2120 203d 3a32 4320     ith .len != 2: C
   c6e40:	616c 7373 203a 7830 2000 656c 3a6e 0020     lass: 0x. len: .
   c6e50:	7270 636f 7365 3a73 4e20 454d 2041 7562     process: NMEA bu
   c6e60:	6666 7265 6920 2073 7566 6c6c 0021 7270     ffer is full!.pr
   c6e70:	636f 7365 3a73 4e20 454d 2041 6863 6365     ocess: NMEA chec
   c6e80:	736b 6d75 6620 6961 206c 3228 2129 4520     ksum fail (2)! E
   c6e90:	7078 6365 6574 2064 2000 6f47 2074 7000     xpected . Got .p
   c6ea0:	6f72 6563 7373 203a 4d4e 4145 6320 6568     rocess: NMEA che
   c6eb0:	6b63 7573 206d 6166 6c69 2820 2931 0021     cksum fail (1)!.
   c6ec0:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c6ed0:	4332 6520 7272 726f 203a 6e65 5464 6172     2C error: endTra
   c6ee0:	736e 696d 7373 6f69 206e 6572 7574 6e72     nsmission return
   c6ef0:	6465 0020 6863 6365 556b 6c62 786f 3249     ed .checkUbloxI2
   c6f00:	3a43 4920 4332 6520 7272 726f 203a 6572     C: I2C error: re
   c6f10:	7571 7365 4674 6f72 206d 7830 4446 7220     questFrom 0xFD r
   c6f20:	7465 7275 656e 2064 6300 6568 6b63 6255     eturned .checkUb
   c6f30:	6f6c 4978 4332 203a 4b4f 202c 657a 6f72     loxI2C: OK, zero
   c6f40:	6220 7479 7365 6120 6176 6c69 6261 656c      bytes available
   c6f50:	6300 6568 6b63 6255 6f6c 4978 4332 203a     .checkUbloxI2C: 
   c6f60:	614c 6772 2065 6170 6b63 7465 6f20 2066     Large packet of 
   c6f70:	2000 7962 6574 2073 6572 6563 7669 6465     . bytes received
   c6f80:	6300 6568 6b63 6255 6f6c 4978 4332 203a     .checkUbloxI2C: 
   c6f90:	6552 6461 6e69 2067 2000 7962 6574 0073     Reading . bytes.
   c6fa0:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c6fb0:	6573 203a 6176 696c 2064 6164 6174 6120     se: valid data a
   c6fc0:	646e 7620 6c61 6469 4120 4b43 7220 6365     nd valid ACK rec
   c6fd0:	6965 6576 2064 6661 6574 2072 2000 736d     eived after . ms
   c6fe0:	6365 7700 6961 4674 726f 4341 524b 7365     ec.waitForACKRes
   c6ff0:	6f70 736e 3a65 6e20 206f 6164 6174 6120     ponse: no data a
   c7000:	646e 7620 6c61 6469 4120 4b43 6120 7466     nd valid ACK aft
   c7010:	7265 0020 6177 7469 6f46 4172 4b43 6552     er .waitForACKRe
   c7020:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c7030:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c7040:	7466 7265 0020 6177 7469 6f46 4172 4b43     fter .waitForACK
   c7050:	6552 7073 6e6f 6573 203a 5243 2043 6166     Response: CRC fa
   c7060:	6c69 6465 6120 7466 7265 0020 6177 7469     iled after .wait
   c7070:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c7080:	6164 6174 7720 7361 4e20 544f 4341 4e4b     data was NOTACKN
   c7090:	574f 454c 4744 4445 2820 414e 4b43 2029     OWLEDGED (NACK) 
   c70a0:	6661 6574 2072 7700 6961 4674 726f 4341     after .waitForAC
   c70b0:	524b 7365 6f70 736e 3a65 5620 4c41 4449     KResponse: VALID
   c70c0:	6420 7461 2061 6e61 2064 4e49 4156 494c      data and INVALI
   c70d0:	2044 4341 204b 6572 6563 7669 6465 6120     D ACK received a
   c70e0:	7466 7265 0020 6177 7469 6f46 4172 4b43     fter .waitForACK
   c70f0:	6552 7073 6e6f 6573 203a 4e49 4156 494c     Response: INVALI
   c7100:	2044 6164 6174 6120 646e 4920 564e 4c41     D data and INVAL
   c7110:	4449 4120 4b43 7220 6365 6965 6576 2064     ID ACK received 
   c7120:	6661 6574 2072 7700 6961 4674 726f 4341     after .waitForAC
   c7130:	524b 7365 6f70 736e 3a65 5420 4d49 4f45     KResponse: TIMEO
   c7140:	5455 7720 7469 2068 6176 696c 2064 6164     UT with valid da
   c7150:	6174 6120 7466 7265 0020 6d20 6573 2e63     ta after . msec.
   c7160:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c7170:	6e6f 6573 203a 4954 454d 554f 2054 6661     onse: TIMEOUT af
   c7180:	6574 2072 2000 736d 6365 002e 6177 7469     ter . msec..wait
   c7190:	6f46 4e72 416f 4b43 6552 7073 6e6f 6573     ForNoACKResponse
   c71a0:	203a 6176 696c 2064 6164 6174 7720 7469     : valid data wit
   c71b0:	2068 4c43 2f53 4449 6d20 7461 6863 6120     h CLS/ID match a
   c71c0:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c71d0:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c71e0:	6220 6965 676e 4f20 4556 5752 4952 5454      being OVERWRITT
   c71f0:	4e45 6120 7466 7265 0020 6177 7469 6f46     EN after .waitFo
   c7200:	4e72 416f 4b43 6552 7073 6e6f 6573 203a     rNoACKResponse: 
   c7210:	4c43 2f53 4449 6d20 7461 6863 6220 7475     CLS/ID match but
   c7220:	6620 6961 656c 2064 5243 2043 6661 6574      failed CRC afte
   c7230:	2072 7700 6961 4674 726f 6f4e 4341 524b     r .waitForNoACKR
   c7240:	7365 6f70 736e 3a65 5420 4d49 4f45 5455     esponse: TIMEOUT
   c7250:	6120 7466 7265 0020 6d20 6573 2e63 4e20      after . msec. N
   c7260:	206f 6170 6b63 7465 7220 6365 6965 6576     o packet receive
   c7270:	2e64 0a00 6553 646e 6e69 3a67 0020 6553     d...Sending: .Se
   c7280:	646e 4920 4332 4320 6d6f 616d 646e 6620     nd I2C Command f
   c7290:	6961 656c 0064 6573 646e 6f43 6d6d 6e61     ailed.sendComman
   c72a0:	3a64 5720 6961 6974 676e 6620 726f 4120     d: Waiting for A
   c72b0:	4b43 7220 7365 6f70 736e 0065 6573 646e     CK response.send
   c72c0:	6f43 6d6d 6e61 3a64 5720 6961 6974 676e     Command: Waiting
   c72d0:	6620 726f 4e20 206f 4341 204b 6572 7073      for No ACK resp
   c72e0:	6e6f 6573 6900 696e 5074 6361 656b 5574     onse.initPacketU
   c72f0:	5842 414e 5056 5456 203a 4152 204d 6c61     BXNAVPVT: RAM al
   c7300:	6f6c 2063 6166 6c69 6465 0021 6e69 7469     loc failed!.init
   c7310:	6150 6b63 7465 4255 4358 4746 5250 3a54     PacketUBXCFGPRT:
   c7320:	5220 4d41 6120 6c6c 636f 6620 6961 656c      RAM alloc faile
   c7330:	2164 6200 6765 6e69 203a 7369 6f43 6e6e     d!.begin: isConn
   c7340:	6365 6574 2064 202d 6573 6f63 646e 6120     ected - second a
   c7350:	7474 6d65 7470 6200 6765 6e69 203a 7369     ttempt.begin: is
   c7360:	6f43 6e6e 6365 6574 2064 202d 6874 7269     Connected - thir
   c7370:	2064 7461 6574 706d 0074 6562 6967 3a6e     d attempt.begin:
   c7380:	7420 6968 6472 6120 7474 6d65 7470 6620      third attempt f
   c7390:	6961 656c 2e64 4120 7373 6d75 6e69 2067     ailed. Assuming 
   c73a0:	7573 6363 7365 2e73 2e2e 0000               success.....

000c73ac <_ZTVN8particle11SPISettingsE>:
	...
   c73b4:	4585 000b 44f1 000b 44f3 000b               .E...D...D..

000c73c0 <CSWTCH.334>:
   c73c0:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c73d0:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c73e0:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7400:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7428:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c747c:	0000 0010 0004                              ......

000c7482 <CSWTCH.335>:
   c7482:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c749e:	002c 0000 0000 0000 0010 0024               ,.........$.

000c74aa <CSWTCH.336>:
   c74aa:	2048 5724 7261 696e 676e 202c 6f6d 6f74     H $Warning, moto
   c74ba:	2072 6f63 6d6d 6e61 2064 6168 2073 6f6e     r command has no
   c74ca:	2074 6562 6e65 7220 6365 6965 6576 2064     t been received 
   c74da:	6e69 6f20 6576 2072 6425 736d 202c 7563     in over %dms, cu
   c74ea:	7474 6e69 2067 6f6d 6f74 7372 5700 7261     tting motors.War
   c74fa:	696e 676e 202c 5047 2053 726f 4320 6d6f     ning, GPS or Com
   c750a:	6170 7373 6420 7461 2061 6f6e 2074 7661     pass data not av
   c751a:	6961 616c 6c62 2065 6f66 2072 7267 6165     ailable for grea
   c752a:	6574 2072 6874 6e61 2520 6d64 2c73 6520     ter than %dms, e
   c753a:	6978 6974 676e 6120 7475 6e6f 6d6f 756f     xiting autonomou
   c754a:	2073 6f6d 6564 5b00 4157 4e52 205d 544c     s mode.[WARN] LT
   c755a:	2045 654d 7373 6761 7365 6820 7661 2065     E Messages have 
   c756a:	6f6e 2074 6562 6e65 7220 6365 6965 6576     not been receive
   c757a:	2064 6e69 2520 7364 202c 7361 7573 696d     d in %ds, assumi
   c758a:	676e 5820 6542 2065 7369 7520 616e 6176     ng XBee is unava
   c759a:	6c69 6261 656c 5b00 4157 4e52 205d 4258     ilable.[WARN] XB
   c75aa:	6565 4d20 7365 6173 6567 2073 6168 6576     ee Messages have
   c75ba:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c75ca:	6465 6920 206e 6425 2c73 6120 7373 6d75     ed in %ds, assum
   c75da:	6e69 2067 4258 6565 6920 2073 6e75 7661     ing XBee is unav
   c75ea:	6961 616c 6c62 0065 575b 5241 5d4e 4220     ailable.[WARN] B
   c75fa:	454c 4d20 7365 6173 6567 2073 6168 6576     LE Messages have
   c760a:	6e20 746f 6220 6565 206e 6572 6563 7669      not been receiv
   c761a:	6465 6920 206e 6425 2c73 6120 7373 6d75     ed in %ds, assum
   c762a:	6e69 2067 4c42 2045 7369 7520 616e 6176     ing BLE is unava
   c763a:	6c69 6261 656c 4300 6568 6b63 7573 3a6d     ilable.Checksum:
   c764a:	2520 3230 2c78 2520 3330 0064 7453 6972      %02x, %03d.Stri
   c765a:	676e 4c20 6e65 203a 6425 202c 6843 6365     ng Len: %d, Chec
   c766a:	736b 6d75 203a 6425 5700 7261 696e 676e     ksum: %d.Warning
   c767a:	202c 6863 6365 736b 6d75 6420 656f 2073     , checksum does 
   c768a:	6f6e 2074 616d 6374 0068 575b 5241 5d4e     not match.[WARN]
   c769a:	4d20 7365 6173 6567 4320 6568 6b63 7573      Message Checksu
   c76aa:	206d 6f44 7365 4e20 746f 4d20 7461 6863     m Does Not Match
   c76ba:	3a21 2520 0073 7463 006c 7325 2520 2073     !: %s.ctl.%s %s 
   c76ca:	6425 2520 2064 6425 4e00 7765 7420 7261     %d %d %d.New tar
   c76da:	6567 2074 5047 2c53 4c20 7461 203a 6625     get GPS, Lat: %f
   c76ea:	4c20 6e6f 203a 6625 6d00 7274 5200 6365      Lon: %f.mtr.Rec
   c76fa:	6965 6576 2064 6f4d 6f74 2072 6f43 6d6d     eived Motor Comm
   c770a:	6e61 3a64 4c20 7053 6565 3d64 6425 522c     and: LSpeed=%d,R
   c771a:	7053 6565 3d64 6425 7200 7165 7000 7374     Speed=%d.req.pts
   c772a:	5b00 5550 5354 205d 6552 6563 7669 6465     .[PUTS] Received
   c773a:	5320 7274 6e69 2067 6f43 6d6d 6e61 3a64      String Command:
   c774a:	2520 0073 7073 0063 7768 0061 6d64 0070      %s.spc.hwa.dmp.
   c775a:	6765 0070 7325 2520 0073 7473 0070 495b     egp.%s %s.stp.[I
   c776a:	464e 5d4f 5220 6365 6965 6576 2064 544c     NFO] Received LT
   c777a:	2045 654d 7373 6761 3a65 2520 0073 654e     E Message: %s.Ne
   c778a:	2077 5442 4320 6d6f 616d 646e 003a 495b     w BT Command:.[I
   c779a:	464e 5d4f 5220 6365 6965 6576 2064 4c42     NFO] Received BL
   c77aa:	2045 654d 7373 6761 3a65 2520 0073 7245     E Message: %s.Er
   c77ba:	6f72 2c72 4320 756f 646c 6e20 746f 6920     ror, Could not i
   c77ca:	696e 6974 6c61 7a69 2065 5047 0053 4343     nitialize GPS.CC
   c77da:	7548 0062 6e49 7570 2074 6f43 6d6d 6e61     Hub.Input Comman
   c77ea:	0064 6146 6c69 6465 7420 206f 6966 646e     d.Failed to find
   c77fa:	4c20 5349 4d33 4c44 6320 6968 0070 494c      LIS3MDL chip.LI
   c780a:	3353 444d 204c 6f46 6e75 2164 4200 6425     S3MDL Found!.B%d
   c781a:	3025 6432 3025 6432 3025 6434 3025 6432     %02d%02d%04d%02d
   c782a:	3025 6432 3025 6432 5700 7461 7265 6f42     %02d%02d.WaterBo
   c783a:	0074 632e 7673 5f00 4f4c 2e47 7874 0074     t..csv._LOG.txt.
   c784a:	7245 6f72 3a72 6320 756f 646c 6e20 746f     Error: could not
   c785a:	6320 6e6f 656e 7463 7420 206f 4453 6320      connect to SD c
   c786a:	7261 2164 5400 6d69 2c65 614c 6974 7574     ard!.Time,Latitu
   c787a:	6564 4c2c 6e6f 6967 7574 6564 542c 6d65     de,Longitude,Tem
   c788a:	6570 6172 7574 6572 702c 2c48 6944 7373     perature,pH,Diss
   c789a:	6c6f 6576 2064 324f 432c 6e6f 7564 7463     olved O2,Conduct
   c78aa:	7669 7469 2079 2e30 4b31 432c 6e6f 7564     ivity 0.1K,Condu
   c78ba:	7463 7669 7469 2079 4b31 5b00 4e49 4f46     ctivity 1K.[INFO
   c78ca:	205d 6157 6574 4272 746f 2520 3a64 5320     ] WaterBot %d: S
   c78da:	6174 7472 6465 4c20 676f 6967 676e 0021     tarted Logging!.
   c78ea:	7325 3025 7832 4200 746f 6431 7461 4200     %s%02x.Bot1dat.B
   c78fa:	6425 4343 6e73 2573 2e30 6636 2520 2e30     %dCCsns%0.6f %0.
   c790a:	6636 2520 2064 6425 2520 2064 6425 2520     6f %d %d %d %d %
   c791a:	2064 5300 6e65 6964 676e 6120 7320 6174     d .Sending a sta
   c792a:	7574 2073 7075 6164 6574 0021 2542 4164     tus update!.B%dA
   c793a:	7342 7075 6425 2520 2064 3025 362e 2066     Bsup%d %d %0.6f 
   c794a:	3025 362e 2066 6425 2520 2064 2500 2c73     %0.6f %d %d .%s,
   c795a:	6625 252c 2c66 6625 252c 2c66 6625 252c     %f,%f,%f,%f,%f,%
   c796a:	2c66 6625 4e00 7765 5820 6542 2065 6f43     f,%f.New XBee Co
   c797a:	6d6d 6e61 3a64 5b00 4e49 4f46 205d 6552     mmand:.[INFO] Re
   c798a:	6563 7669 6465 5820 6542 2065 654d 7373     ceived XBee Mess
   c799a:	6761 3a65 2520 0073 6e45 6574 6972 676e     age: %s.Entering
   c79aa:	4420 7461 2061 664f 6c66 616f 6564 2072      Data Offloader 
   c79ba:	6f4d 6564 2f00 4500 7272 726f 202c 6f63     Mode./.Error, co
   c79ca:	6c75 2064 6f6e 2074 706f 6e65 7220 6f6f     uld not open roo
   c79da:	2074 4453 6320 7261 2064 6964 6572 7463     t SD card direct
   c79ea:	726f 0079 6157 7469 6e69 2067 6f66 2072     ory.Waiting for 
   c79fa:	4343 7548 2062 6f63 6e6e 6365 6974 6e6f     CCHub connection
   c7a0a:	2e2e 002e 7453 7261 6974 676e 7420 6172     ....Starting tra
   c7a1a:	736e 6566 2e72 2e2e 4300 6568 6b63 6e69     nsfer....Checkin
   c7a2a:	2067 6669 6620 6c69 2065 7325 6920 2073     g if file %s is 
   c7a3a:	2061 632e 7673 6f20 2072 742e 7478 2e2e     a .csv or .txt..
   c7a4a:	002e 6966 656c 6f64 656e 6600 6c69 6e65     ..filedone.filen
   c7a5a:	6d61 0065 6553 646e 6e69 2067 6f63 6d6d     ame.Sending comm
   c7a6a:	6e61 2064 7325 4600 6c69 2065 7325 6920     and %s.File %s i
   c7a7a:	2073 2061 632e 7673 6f20 2072 742e 7478     s a .csv or .txt
   c7a8a:	7020 6972 746e 6e69 2067 6164 6174 6600      printing data.f
   c7a9a:	6c69 6365 6d6f 0070 7874 7200 0078 666f     ilecomp.tx.rx.of
   c7aaa:	0066 6264 0067                              f.dbg.

000c7ab0 <_ZTV5Timer>:
	...
   c7ab8:	9799 000b 97e1 000b 94d5 000b               ............

000c7ac4 <_ZTVN5spark10LogHandlerE>:
	...
   c7ad4:	40a9 000b 9415 000b                         .@......

000c7adc <_ZTVN8particle9LEDStatusE>:
	...
   c7ae4:	959d 000b 95b9 000b 941f 000b               ............

000c7af0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c7af8:	95cd 000b 9601 000b 0fb1 000c 9417 000b     ................

000c7b08 <_ZTV4File>:
	...
   c7b10:	94c5 000b 94c7 000b 954d 000b 9547 000b     ........M...G...
   c7b20:	9421 000b 9527 000b 9521 000b 951b 000b     !...'...!.......
   c7b30:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c7b40:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c7b50:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c7b60:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c7b70:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c7b80:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c7b90:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c7ba0:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c7bb0:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c7bc0:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c7bd0:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c7be0:	3765 3135 3238 3062 0000 0000               e75182b0....

000c7bec <CSWTCH.403>:
   c7bec:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c7bfc:	ffff 00ff ff00 00ff ffff 0000 7341 6573     ............Asse
   c7c0c:	7472 6f69 466e 6961 756c 6572 6620 6c61     rtionFailure fal
   c7c1c:	6573 7700 7269 6e69 2e67 6c62 0065 7453     se.wiring.ble.St
   c7c2c:	7261 2074 6964 6373 766f 7265 6e69 2067     art discovering 
   c7c3c:	6573 7672 6369 7365 002e 7341 6573 7472     services..Assert
   c7c4c:	6f69 466e 6961 756c 6572 6820 6c61 625f     ionFailure hal_b
   c7c5c:	656c 735f 6174 6b63 695f 696e 2874 756e     le_stack_init(nu
   c7c6c:	6c6c 7470 2972 3d20 203d 5953 5453 4d45     llptr) == SYSTEM
   c7c7c:	455f 5252 524f 4e5f 4e4f 0045 6550 7265     _ERROR_NONE.Peer
   c7c8c:	6420 7665 6369 2065 7369 6d20 7369 6973      device is missi
   c7c9c:	676e 0021 6146 6c69 6465 7420 206f 7061     ng!.Failed to ap
   c7cac:	6570 646e 7020 6565 2072 6543 746e 6172     pend peer Centra
   c7cbc:	206c 6564 6976 6563 002e 6f43 6e6e 6365     l device..Connec
   c7ccc:	6574 2064 7962 4320 6e65 7274 6c61 6420     ted by Central d
   c7cdc:	7665 6369 2e65 4400 7369 6f63 6e6e 6365     evice..Disconnec
   c7cec:	6574 2064 7962 7220 6d65 746f 2065 6564     ted by remote de
   c7cfc:	6976 6563 002e 7544 6c70 6369 7461 6465     vice..Duplicated
   c7d0c:	6320 6168 6172 7463 7265 7369 6974 2063      characteristic 
   c7d1c:	6163 6e6e 746f 6220 2065 6461 6564 2e64     cannot be added.
   c7d2c:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   c7d3c:	2064 6f6c 6163 206c 6863 7261 6361 6574     d local characte
   c7d4c:	6972 7473 6369 002e                         ristic..

000c7d54 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7d5c:	e395 000b e3f9 000b e4cd 000b e423 000b     ............#...
   c7d6c:	e399 000b                                   ....

000c7d70 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7d78:	e391 000b e407 000b e393 000b e429 000b     ............)...
   c7d88:	e3b9 000b                                   ....

000c7d8c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7d94:	e38f 000b e415 000b ec99 000b e42f 000b     ............/...
   c7da4:	e3d9 000b                                   ....

000c7da8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7db4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7dc6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7dc6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7dd6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7dd6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000c7de8 <_ZTVN5spark13CellularClassE>:
	...
   c7df0:	f75b 000b f751 000b f747 000b f6fd 000b     [...Q...G.......
   c7e00:	f73b 000b f72f 000b 1309 000c 1311 000c     ;.../...........
   c7e10:	f723 000b f71b 000b f711 000b f707 000b     #...............
   c7e20:	1341 000c                                   A...

000c7e24 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7e2c:	f795 000b f79b 000b f7d9 000b f7a9 000b     ................
   c7e3c:	f797 000b                                   ....

000c7e40 <_ZTVN5spark13EthernetClassE>:
	...
   c7e48:	fd6f 000b fd65 000b fd5b 000b fd51 000b     o...e...[...Q...
   c7e58:	fd45 000b fd39 000b 1309 000c 1311 000c     E...9...........
   c7e68:	fd2d 000b fd25 000b fd1b 000b fd11 000b     -...%...........
   c7e78:	1341 000c                                   A...

000c7e7c <_ZTV7TwoWire>:
	...
   c7e84:	fd8d 000b fdd7 000b fdaf 000b fd8f 000b     ................
   c7e94:	fdb7 000b fdbf 000b fdc7 000b fdcf 000b     ................

000c7ea4 <_ZTV9IPAddress>:
	...
   c7eac:	ff01 000b fef1 000b fef3 000b 7525 7500     ............%u.u
   c7ebc:	3025 7834 6200 7561 0064 6553 6972 6c61     %04x.baud.Serial
   c7ecc:	5300 7265 6169 316c 4a00 4f53 534e 7274     .Serial1.JSONStr
   c7edc:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
   c7eec:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
   c7efc:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   c7f0c:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   c7f1c:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
   c7f2c:	6961 006c                                   ail.

000c7f30 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7f38:	03fd 000c 0423 000c 03e1 000c 000f 000c     ....#...........

000c7f48 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7f50:	0859 000c 0871 000c 0fb1 000c 9417 000b     Y...q...........

000c7f60 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7f68:	0885 000c 0899 000c 1155 000c 03e9 000c     ........U.......

000c7f78 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7f80:	03fb 000c 0431 000c 0f15 000c 03eb 000c     ....1...........

000c7f90 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7f98:	03f9 000c 043f 000c 07c1 000c 0461 000c     ....?.......a...

000c7fa8 <_ZTVN5spark12NetworkClassE>:
	...
   c7fb0:	12c9 000c 12d3 000c 12dd 000c 12e7 000c     ................
   c7fc0:	12f1 000c 12fd 000c 1309 000c 1311 000c     ................
   c7fd0:	1319 000c 1325 000c 132d 000c 1337 000c     ....%...-...7...
   c7fe0:	1341 000c                                   A...

000c7fe4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7fe4:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c7ff4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c8004:	6d69 0065                                   ime.

000c8008 <_ZTV11USARTSerial>:
	...
   c8010:	1bf9 000c 1c65 000c 1c3d 000c 142d 000c     ....e...=...-...
   c8020:	1c0d 000c 1c29 000c 1c1b 000c 1c37 000c     ....).......7...
   c8030:	1bfb 000c 1bff 000c                         ........

000c8038 <_ZTV9USBSerial>:
	...
   c8040:	1cb7 000c 1d1f 000c 1cf5 000c 142d 000c     ............-...
   c8050:	1ce7 000c 1cb9 000c 1cc9 000c 1d19 000c     ................
   c8060:	1cd9 000c 1cb1 000c                         ........

000c8068 <_ZSt7nothrow>:
	...

000c8069 <_ZTSSt19_Sp_make_shared_tag>:
   c8069:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c8079:	6572 5f64 6174 0067 0000                     red_tag....

000c8084 <_ZTISt19_Sp_make_shared_tag>:
   c8084:	80c4 000c 8069 000c                         ....i...

000c808c <_ZTIN10__cxxabiv117__class_type_infoE>:
   c808c:	8124 000c 8098 000c 8148 000c               $.......H...

000c8098 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c8098:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c80a8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c80b8:	0045 0000                                   E...

000c80bc <_ZTVN10__cxxabiv117__class_type_infoE>:
   c80bc:	0000 0000 808c 000c 2171 000c 2185 000c     ........q!...!..
   c80cc:	2319 000c 2319 000c 21ef 000c 2131 000c     .#...#...!..1!..
   c80dc:	21d7 000c 2199 000c 2163 000c               .!...!..c!..

000c80e8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c80e8:	8124 000c 80f4 000c 808c 000c               $...........

000c80f4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c80f4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c8104:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c8114:	666e 456f 0000 0000                         nfoE....

000c811c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c811c:	0000 0000 80e8 000c 2219 000c 222d 000c     ........."..-"..
   c812c:	2319 000c 2319 000c 21ef 000c 2131 000c     .#...#...!..1!..
   c813c:	22ed 000c 2279 000c 2241 000c               ."..y"..A"..

000c8148 <_ZTISt9type_info>:
   c8148:	80c4 000c 8150 000c                         ....P...

000c8150 <_ZTSSt9type_info>:
   c8150:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000c8160 <CSWTCH.8>:
   c8160:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c8170:	21d2 7f33 d97c c002                         .!3.|...

000c8178 <CSWTCH.9>:
   c8178:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c8188:	2d18 5444 21fb c009                         .-DT.!..

000c8190 <CSWTCH.8>:
   c8190:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c819c <CSWTCH.9>:
   c819c:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c81a8 <npio2_hw>:
   c81a8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c81b8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c81c8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c81d8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c81e8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c81f8:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c8208:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8218:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8228 <two_over_pi>:
   c8228:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8238:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8248:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8258:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c8268:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c8278:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c8288:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c8298:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c82a8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c82b8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c82c8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c82d8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c82e8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c82f8:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c8308:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8318:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8328:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8338:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8348:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8358:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c8368:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c8378:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c8388:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c8398:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c83a8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c83b8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c83c8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c83d8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c83e8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c83f8:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c8408:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8418:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8428:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8438:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8448:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8458:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c8468:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c8478:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c8488:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c8498:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c84a8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c84b8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c84c8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c84d8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c84e8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c84f8:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c8508:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8518:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8528:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8538:	008c 0000 006b 0000                         ....k...

000c8540 <PIo2>:
   c8540:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8550:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c8560:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c856c <init_jk>:
   c856c:	0004 0000 0007 0000 0009 0000               ............

000c8578 <atanhi>:
   c8578:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c8588:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c8598 <atanlo>:
   c8598:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c85a8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c85b8 <atanhi>:
   c85b8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c85c8 <atanlo>:
   c85c8:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c85d8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c85e8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   c85f8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   c8608:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   c8618:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   c8628:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   c8638:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.
   c8648:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000c8654 <fpi.1>:
   c8654:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c8664:	0000 0000                                   ....

000c8668 <fpinan.0>:
   c8668:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c8680 <tinytens>:
   c8680:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c8690:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c86a0:	6f43 64ac 0628 1168                         Co.d(.h.

000c86a8 <_ctype_>:
   c86a8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c86b8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c86c8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c86d8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c86e8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c86f8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8708:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8718:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8728:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c87a8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c87b8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c87c8:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c87d8:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c87e8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c87f8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c8808:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c8818:	632e 0000                                   .c..

000c881c <_C_numeric_locale>:
   c881c:	692f 000c 7f1b 000c dbb0 2003 4f50 4953     /i......... POSI
   c882c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
   c883c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c884c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c885c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c886c:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c887c:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

000c8888 <__mprec_bigtens>:
   c8888:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c8898:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c88a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c88b0 <__mprec_tens>:
   c88b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c88c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c88d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c88e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c88f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8900:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8910:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8920:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c8930:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c8940:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c8950:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c8960:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c8970:	9db4 79d9 7843 44ea                         ...yCx.D

000c8978 <p05.0>:
   c8978:	0005 0000 0019 0000 007d 0000               ........}...

000c8984 <link_const_variable_data_end>:
   c8984:	000bba71 	.word	0x000bba71
   c8988:	000bf6ed 	.word	0x000bf6ed
   c898c:	000bf765 	.word	0x000bf765
   c8990:	000bfd79 	.word	0x000bfd79
   c8994:	000c0fa1 	.word	0x000c0fa1
   c8998:	000c1419 	.word	0x000c1419
   c899c:	000c153d 	.word	0x000c153d
   c89a0:	000c1a41 	.word	0x000c1a41
   c89a4:	000c1be5 	.word	0x000c1be5

000c89a8 <link_constructors_end>:
	...
