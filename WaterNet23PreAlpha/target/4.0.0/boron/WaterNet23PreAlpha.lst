
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/boron/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b6c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf6e0  000bf6e0  0000f6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf704  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dc1c  000bf708  0002dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e0  2003de10  2003de10  0003de10  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bf8fc  000bf8fc  0002f8fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf924  000bf924  0002f924  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bf1e9  00000000  00000000  0002f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001e274  00000000  00000000  001eeb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c6de  00000000  00000000  0020cd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000039b8  00000000  00000000  00259463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d0d0  00000000  00000000  0025ce1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004aadd  00000000  00000000  00269eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00065142  00000000  00000000  002b49c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144a1a  00000000  00000000  00319b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b0a0  00000000  00000000  0045e524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 faab 	bl	bc58c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 facd 	bl	bc5dc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dc1c 	.word	0x2003dc1c
   b404c:	000bf708 	.word	0x000bf708
   b4050:	2003de10 	.word	0x2003de10
   b4054:	2003de10 	.word	0x2003de10
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fbf7 	bl	ba854 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf6b4 	.word	0x000bf6b4
   b4080:	000bf6d8 	.word	0x000bf6d8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b9fa 	b.w	b547c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f97f 	bl	b538c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bb97 	b.w	ba7c4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bd69 	b.w	b7b6c <malloc>

000b409a <_Znaj>:
   b409a:	f003 bd67 	b.w	b7b6c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bd6d 	b.w	b7b7c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 fc58 	bl	b7960 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b747d 	.word	0x000b747d
   b40b8:	000be718 	.word	0x000be718

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ce:	4770      	bx	lr

000b40d0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d0:	6a00      	ldr	r0, [r0, #32]
   b40d2:	6803      	ldr	r3, [r0, #0]
   b40d4:	68db      	ldr	r3, [r3, #12]
   b40d6:	4718      	bx	r3

000b40d8 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40d8:	4770      	bx	lr

000b40da <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40da:	7c03      	ldrb	r3, [r0, #16]
   b40dc:	f013 0308 	ands.w	r3, r3, #8
   b40e0:	bf1e      	ittt	ne
   b40e2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40e6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40e8:	2b00      	cmp	r3, #0
  }
   b40ea:	bfac      	ite	ge
   b40ec:	4618      	movge	r0, r3
   b40ee:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f2:	4770      	bx	lr

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr
	...

000b40f8 <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40f8:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fa:	4b13      	ldr	r3, [pc, #76]	; (b4148 <_Z13StatusHandlerv+0x50>)
   b40fc:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x54>)
   b4100:	781b      	ldrb	r3, [r3, #0]
   b4102:	009b      	lsls	r3, r3, #2
   b4104:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b4108:	4a11      	ldr	r2, [pc, #68]	; (b4150 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410a:	7812      	ldrb	r2, [r2, #0]
   b410c:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b410e:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b4110:	7812      	ldrb	r2, [r2, #0]
   b4112:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= manualRC << 4;
   b4116:	4a10      	ldr	r2, [pc, #64]	; (b4158 <_Z13StatusHandlerv+0x60>)
   b4118:	7812      	ldrb	r2, [r2, #0]
   b411a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 5;
   b411e:	4a0f      	ldr	r2, [pc, #60]	; (b415c <_Z13StatusHandlerv+0x64>)
   b4120:	7812      	ldrb	r2, [r2, #0]
   b4122:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    statusFlags |= logSensors << 6;
   b4126:	4a0e      	ldr	r2, [pc, #56]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4128:	7812      	ldrb	r2, [r2, #0]
   b412a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   b412e:	4a0d      	ldr	r2, [pc, #52]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b4130:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4132:	4b0d      	ldr	r3, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4134:	2201      	movs	r2, #1
   b4136:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b4138:	f006 ff30 	bl	baf9c <_Z16_fetch_usbserialv>
}
   b413c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4140:	490a      	ldr	r1, [pc, #40]	; (b416c <_Z13StatusHandlerv+0x74>)
   b4142:	f005 ba2a 	b.w	b959a <_ZN5Print7printlnEPKc>
   b4146:	bf00      	nop
   b4148:	2003de5c 	.word	0x2003de5c
   b414c:	2003de1c 	.word	0x2003de1c
   b4150:	2003de4c 	.word	0x2003de4c
   b4154:	2003e0ec 	.word	0x2003e0ec
   b4158:	2003df7d 	.word	0x2003df7d
   b415c:	2003df7c 	.word	0x2003df7c
   b4160:	2003df71 	.word	0x2003df71
   b4164:	2003e5b4 	.word	0x2003e5b4
   b4168:	2003e5d4 	.word	0x2003e5d4
   b416c:	000be72d 	.word	0x000be72d

000b4170 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4170:	b510      	push	{r4, lr}
  }
   b4172:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4174:	4604      	mov	r4, r0
  }
   b4176:	f7ff ff92 	bl	b409e <_ZdlPvj>
   b417a:	4620      	mov	r0, r4
   b417c:	bd10      	pop	{r4, pc}

000b417e <_ZN4FileD0Ev>:
   b417e:	b510      	push	{r4, lr}
   b4180:	2134      	movs	r1, #52	; 0x34
   b4182:	4604      	mov	r4, r0
   b4184:	f7ff ff8b 	bl	b409e <_ZdlPvj>
   b4188:	4620      	mov	r0, r4
   b418a:	bd10      	pop	{r4, pc}

000b418c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b418c:	3010      	adds	r0, #16
   b418e:	f002 bba3 	b.w	b68d8 <_ZN7FatFile5writeEPKvj>

000b4192 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4192:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4194:	2201      	movs	r2, #1
   b4196:	f88d 1007 	strb.w	r1, [sp, #7]
   b419a:	3010      	adds	r0, #16
   b419c:	f10d 0107 	add.w	r1, sp, #7
   b41a0:	f002 fb9a 	bl	b68d8 <_ZN7FatFile5writeEPKvj>
  }
   b41a4:	b003      	add	sp, #12
   b41a6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41aa <_ZN4File5flushEv>:
    FatFile::sync();
   b41aa:	3010      	adds	r0, #16
   b41ac:	f002 bb0a 	b.w	b67c4 <_ZN7FatFile4syncEv>

000b41b0 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b0:	3010      	adds	r0, #16
   b41b2:	f002 b9eb 	b.w	b658c <_ZN7FatFile4peekEv>

000b41b6 <_ZN4File4readEv>:
  int read() {
   b41b6:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41b8:	2201      	movs	r2, #1
   b41ba:	f10d 0107 	add.w	r1, sp, #7
   b41be:	3010      	adds	r0, #16
   b41c0:	f002 f936 	bl	b6430 <_ZN7FatFile4readEPvj>
   b41c4:	2801      	cmp	r0, #1
   b41c6:	bf0c      	ite	eq
   b41c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41cc:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b41d0:	b003      	add	sp, #12
   b41d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b41d6 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41d6:	6943      	ldr	r3, [r0, #20]
   b41d8:	b113      	cbz	r3, b41e0 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41da:	6983      	ldr	r3, [r0, #24]
   b41dc:	300c      	adds	r0, #12
   b41de:	4718      	bx	r3
            callback();
        }
    }
   b41e0:	4770      	bx	lr

000b41e2 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e2:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e4:	2100      	movs	r1, #0
   b41e6:	4604      	mov	r4, r0
   b41e8:	4608      	mov	r0, r1
   b41ea:	f003 f9f9 	bl	b75e0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41ee:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f0:	4620      	mov	r0, r4
   b41f2:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f4:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41f6:	f003 fa0b 	bl	b7610 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fa:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41fc:	b10c      	cbz	r4, b4202 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41fe:	2301      	movs	r3, #1
   b4200:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4202:	2100      	movs	r1, #0
   b4204:	2001      	movs	r0, #1
   b4206:	f003 f9eb 	bl	b75e0 <os_thread_scheduling>
            }
        }
        if (t) {
   b420a:	b12c      	cbz	r4, b4218 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b420c:	6823      	ldr	r3, [r4, #0]
   b420e:	4620      	mov	r0, r4
   b4210:	689b      	ldr	r3, [r3, #8]
   b4212:	4798      	blx	r3
            t->running = false;
   b4214:	2300      	movs	r3, #0
   b4216:	7123      	strb	r3, [r4, #4]
        }
    }
   b4218:	b002      	add	sp, #8
   b421a:	bd10      	pop	{r4, pc}

000b421c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b421c:	2a01      	cmp	r2, #1
   b421e:	d102      	bne.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4220:	6001      	str	r1, [r0, #0]
      }
   b4222:	2000      	movs	r0, #0
   b4224:	4770      	bx	lr
	  switch (__op)
   b4226:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4228:	bf04      	itt	eq
   b422a:	680b      	ldreq	r3, [r1, #0]
   b422c:	6003      	streq	r3, [r0, #0]
	      break;
   b422e:	e7f8      	b.n	b4222 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4230 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4230:	6803      	ldr	r3, [r0, #0]
   b4232:	4718      	bx	r3

000b4234 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4234:	6803      	ldr	r3, [r0, #0]
   b4236:	b2c9      	uxtb	r1, r1
   b4238:	689b      	ldr	r3, [r3, #8]
   b423a:	4718      	bx	r3

000b423c <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b423c:	b510      	push	{r4, lr}
   b423e:	4b05      	ldr	r3, [pc, #20]	; (b4254 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4240:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4242:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4244:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4246:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b424a:	f003 fba9 	bl	b79a0 <led_set_status_active>
}
   b424e:	4620      	mov	r0, r4
   b4250:	bd10      	pop	{r4, pc}
   b4252:	bf00      	nop
   b4254:	000bec40 	.word	0x000bec40

000b4258 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4258:	b510      	push	{r4, lr}
   b425a:	4604      	mov	r4, r0
}
   b425c:	f7ff ffee 	bl	b423c <_ZN8particle9LEDStatusD1Ev>
   b4260:	4620      	mov	r0, r4
   b4262:	2120      	movs	r1, #32
   b4264:	f7ff ff1b 	bl	b409e <_ZdlPvj>
   b4268:	4620      	mov	r0, r4
   b426a:	bd10      	pop	{r4, pc}

000b426c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b426c:	4b0a      	ldr	r3, [pc, #40]	; (b4298 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b426e:	b510      	push	{r4, lr}
   b4270:	4604      	mov	r4, r0
   b4272:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4274:	f005 fb8c 	bl	b9990 <_ZN5spark10LogManager8instanceEv>
   b4278:	4621      	mov	r1, r4
   b427a:	f005 fdc4 	bl	b9e06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b427e:	f006 fe8d 	bl	baf9c <_Z16_fetch_usbserialv>
   b4282:	f006 fe7f 	bl	baf84 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4286:	4620      	mov	r0, r4
   b4288:	4b04      	ldr	r3, [pc, #16]	; (b429c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b428a:	f840 3b04 	str.w	r3, [r0], #4
   b428e:	f005 fc55 	bl	b9b3c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4292:	4620      	mov	r0, r4
   b4294:	bd10      	pop	{r4, pc}
   b4296:	bf00      	nop
   b4298:	000bec54 	.word	0x000bec54
   b429c:	000bec28 	.word	0x000bec28

000b42a0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42a0:	b510      	push	{r4, lr}
   b42a2:	4604      	mov	r4, r0
    }
   b42a4:	f7ff ffe2 	bl	b426c <_ZN5spark16SerialLogHandlerD1Ev>
   b42a8:	4620      	mov	r0, r4
   b42aa:	2124      	movs	r1, #36	; 0x24
   b42ac:	f7ff fef7 	bl	b409e <_ZdlPvj>
   b42b0:	4620      	mov	r0, r4
   b42b2:	bd10      	pop	{r4, pc}

000b42b4 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b42b6:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42b8:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42ba:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b42bc:	b130      	cbz	r0, b42cc <_ZN5Timer5startEj.isra.0+0x18>
   b42be:	2300      	movs	r3, #0
   b42c0:	e9cd 3300 	strd	r3, r3, [sp]
   b42c4:	461a      	mov	r2, r3
   b42c6:	2102      	movs	r1, #2
   b42c8:	f003 f9aa 	bl	b7620 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b42cc:	68a0      	ldr	r0, [r4, #8]
   b42ce:	b130      	cbz	r0, b42de <_ZN5Timer5startEj.isra.0+0x2a>
   b42d0:	2300      	movs	r3, #0
   b42d2:	e9cd 5300 	strd	r5, r3, [sp]
   b42d6:	461a      	mov	r2, r3
   b42d8:	4619      	mov	r1, r3
   b42da:	f003 f9a1 	bl	b7620 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b42de:	b003      	add	sp, #12
   b42e0:	bd30      	pop	{r4, r5, pc}

000b42e2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e2:	b40e      	push	{r1, r2, r3}
   b42e4:	b503      	push	{r0, r1, lr}
   b42e6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42e8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ea:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42ee:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f0:	f005 f97b 	bl	b95ea <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f4:	b002      	add	sp, #8
   b42f6:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fa:	b003      	add	sp, #12
   b42fc:	4770      	bx	lr
	...

000b4300 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4302:	4604      	mov	r4, r0
   b4304:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4306:	7922      	ldrb	r2, [r4, #4]
   b4308:	68a3      	ldr	r3, [r4, #8]
   b430a:	b132      	cbz	r2, b431a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b430c:	b9a3      	cbnz	r3, b4338 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b430e:	490b      	ldr	r1, [pc, #44]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4316:	f005 b92d 	b.w	b9574 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431a:	4a09      	ldr	r2, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b431c:	7b26      	ldrb	r6, [r4, #12]
   b431e:	4d09      	ldr	r5, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4320:	4909      	ldr	r1, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4322:	7b64      	ldrb	r4, [r4, #13]
   b4324:	2e01      	cmp	r6, #1
   b4326:	bf18      	it	ne
   b4328:	4629      	movne	r1, r5
   b432a:	e9cd 1400 	strd	r1, r4, [sp]
   b432e:	4907      	ldr	r1, [pc, #28]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4330:	f7ff ffd7 	bl	b42e2 <_ZN5Print6printfEPKcz>
  }
   b4334:	b002      	add	sp, #8
   b4336:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4338:	4a05      	ldr	r2, [pc, #20]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433a:	e7ef      	b.n	b431c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b433c:	000be757 	.word	0x000be757
   b4340:	000befb8 	.word	0x000befb8
   b4344:	000be753 	.word	0x000be753
   b4348:	000be74f 	.word	0x000be74f
   b434c:	000be76d 	.word	0x000be76d
   b4350:	000be746 	.word	0x000be746

000b4354 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	b40e      	push	{r1, r2, r3}
   b4356:	b503      	push	{r0, r1, lr}
   b4358:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4360:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4362:	f005 f942 	bl	b95ea <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4366:	b002      	add	sp, #8
   b4368:	f85d eb04 	ldr.w	lr, [sp], #4
   b436c:	b003      	add	sp, #12
   b436e:	4770      	bx	lr

000b4370 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4370:	b510      	push	{r4, lr}
      if (_M_manager)
   b4372:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4374:	4604      	mov	r4, r0
      if (_M_manager)
   b4376:	b113      	cbz	r3, b437e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4378:	2203      	movs	r2, #3
   b437a:	4601      	mov	r1, r0
   b437c:	4798      	blx	r3
    }
   b437e:	4620      	mov	r0, r4
   b4380:	bd10      	pop	{r4, pc}
	...

000b4384 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4384:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4386:	4b13      	ldr	r3, [pc, #76]	; (b43d4 <_ZN5TimerD1Ev+0x50>)
   b4388:	6003      	str	r3, [r0, #0]
   b438a:	4604      	mov	r4, r0
        if (handle) {
   b438c:	6880      	ldr	r0, [r0, #8]
   b438e:	b1c8      	cbz	r0, b43c4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4390:	2500      	movs	r5, #0
   b4392:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4396:	e9cd 3500 	strd	r3, r5, [sp]
   b439a:	2102      	movs	r1, #2
   b439c:	462b      	mov	r3, r5
   b439e:	462a      	mov	r2, r5
   b43a0:	f003 f93e 	bl	b7620 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b43a4:	68a0      	ldr	r0, [r4, #8]
   b43a6:	4629      	mov	r1, r5
   b43a8:	f003 f962 	bl	b7670 <os_timer_set_id>
            while (running) {
   b43ac:	7923      	ldrb	r3, [r4, #4]
   b43ae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b43b2:	b113      	cbz	r3, b43ba <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b43b4:	f003 f90c 	bl	b75d0 <os_thread_yield>
            while (running) {
   b43b8:	e7f8      	b.n	b43ac <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b43ba:	68a0      	ldr	r0, [r4, #8]
   b43bc:	4629      	mov	r1, r5
   b43be:	f003 f91f 	bl	b7600 <os_timer_destroy>
            handle = nullptr;
   b43c2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b43c4:	f104 000c 	add.w	r0, r4, #12
   b43c8:	f7ff ffd2 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    }
   b43cc:	4620      	mov	r0, r4
   b43ce:	b003      	add	sp, #12
   b43d0:	bd30      	pop	{r4, r5, pc}
   b43d2:	bf00      	nop
   b43d4:	000bec14 	.word	0x000bec14

000b43d8 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43d8:	b510      	push	{r4, lr}
   b43da:	4604      	mov	r4, r0
    }
   b43dc:	f7ff ffd2 	bl	b4384 <_ZN5TimerD1Ev>
   b43e0:	4620      	mov	r0, r4
   b43e2:	211c      	movs	r1, #28
   b43e4:	f7ff fe5b 	bl	b409e <_ZdlPvj>
   b43e8:	4620      	mov	r0, r4
   b43ea:	bd10      	pop	{r4, pc}

000b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43ee:	468c      	mov	ip, r1
   b43f0:	2500      	movs	r5, #0
   b43f2:	4914      	ldr	r1, [pc, #80]	; (b4444 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43f4:	7105      	strb	r5, [r0, #4]
   b43f6:	4604      	mov	r4, r0
   b43f8:	6085      	str	r5, [r0, #8]
   b43fa:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4400:	b085      	sub	sp, #20
   b4402:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4404:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4408:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b440c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4410:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4414:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4418:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b441c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b441e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4420:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4422:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4424:	6095      	str	r5, [r2, #8]
   b4426:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4428:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b442a:	e9cd 3500 	strd	r3, r5, [sp]
   b442e:	4a06      	ldr	r2, [pc, #24]	; (b4448 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4430:	4623      	mov	r3, r4
   b4432:	4661      	mov	r1, ip
   b4434:	f104 0008 	add.w	r0, r4, #8
   b4438:	f003 f8da 	bl	b75f0 <os_timer_create>
    }
   b443c:	4620      	mov	r0, r4
   b443e:	b005      	add	sp, #20
   b4440:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4442:	bf00      	nop
   b4444:	000bec14 	.word	0x000bec14
   b4448:	000b41e3 	.word	0x000b41e3

000b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b444c:	b510      	push	{r4, lr}
   b444e:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b4450:	2200      	movs	r2, #0
   b4452:	7c40      	ldrb	r0, [r0, #17]
   b4454:	f003 fade 	bl	b7a14 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4458:	7c63      	ldrb	r3, [r4, #17]
   b445a:	2b0f      	cmp	r3, #15
        d_.period = period;
   b445c:	bf18      	it	ne
   b445e:	8320      	strhne	r0, [r4, #24]
}
   b4460:	bd10      	pop	{r4, pc}
	...

000b4464 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b4466:	4b24      	ldr	r3, [pc, #144]	; (b44f8 <_Z10LEDHandlerv+0x94>)
   b4468:	4d24      	ldr	r5, [pc, #144]	; (b44fc <_Z10LEDHandlerv+0x98>)
   b446a:	781b      	ldrb	r3, [r3, #0]
   b446c:	b15b      	cbz	r3, b4486 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b446e:	7c6b      	ldrb	r3, [r5, #17]
   b4470:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4472:	bf1c      	itt	ne
   b4474:	2302      	movne	r3, #2
   b4476:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4478:	23ff      	movs	r3, #255	; 0xff
   b447a:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b447c:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b447e:	481f      	ldr	r0, [pc, #124]	; (b44fc <_Z10LEDHandlerv+0x98>)
   b4480:	f7ff ffe4 	bl	b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lowBattery){
   b4486:	4b1e      	ldr	r3, [pc, #120]	; (b4500 <_Z10LEDHandlerv+0x9c>)
   b4488:	781b      	ldrb	r3, [r3, #0]
   b448a:	2b00      	cmp	r3, #0
   b448c:	d12d      	bne.n	b44ea <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b448e:	4b1d      	ldr	r3, [pc, #116]	; (b4504 <_Z10LEDHandlerv+0xa0>)
   b4490:	781b      	ldrb	r3, [r3, #0]
   b4492:	2b00      	cmp	r3, #0
   b4494:	d12c      	bne.n	b44f0 <_Z10LEDHandlerv+0x8c>
    else if(manualRC){
   b4496:	4b1c      	ldr	r3, [pc, #112]	; (b4508 <_Z10LEDHandlerv+0xa4>)
   b4498:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b449a:	2b00      	cmp	r3, #0
   b449c:	bf15      	itete	ne
   b449e:	260a      	movne	r6, #10
   b44a0:	2614      	moveq	r6, #20
   b44a2:	2702      	movne	r7, #2
   b44a4:	2703      	moveq	r7, #3
    statusMode |= XBeeAvail << 1;
   b44a6:	4b19      	ldr	r3, [pc, #100]	; (b450c <_Z10LEDHandlerv+0xa8>)
   b44a8:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b44aa:	4b19      	ldr	r3, [pc, #100]	; (b4510 <_Z10LEDHandlerv+0xac>)
   b44ac:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b44ae:	4b19      	ldr	r3, [pc, #100]	; (b4514 <_Z10LEDHandlerv+0xb0>)
    statusMode |= BLEAvail << 2;
   b44b0:	00a4      	lsls	r4, r4, #2
   b44b2:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b44b6:	781a      	ldrb	r2, [r3, #0]
   b44b8:	4314      	orrs	r4, r2
   b44ba:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b44bc:	f006 fd6e 	bl	baf9c <_Z16_fetch_usbserialv>
   b44c0:	4622      	mov	r2, r4
   b44c2:	3c01      	subs	r4, #1
   b44c4:	4914      	ldr	r1, [pc, #80]	; (b4518 <_Z10LEDHandlerv+0xb4>)
   b44c6:	b2e4      	uxtb	r4, r4
   b44c8:	f7ff ff44 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b44cc:	2c06      	cmp	r4, #6
   b44ce:	bf98      	it	ls
   b44d0:	4b12      	ldrls	r3, [pc, #72]	; (b451c <_Z10LEDHandlerv+0xb8>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44d2:	7c6a      	ldrb	r2, [r5, #17]
   b44d4:	bf94      	ite	ls
   b44d6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b44da:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b44de:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b44e0:	bf18      	it	ne
   b44e2:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b44e4:	4631      	mov	r1, r6
    d_.color = color;
   b44e6:	616b      	str	r3, [r5, #20]
   b44e8:	e7c9      	b.n	b447e <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b44ea:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b44ec:	2702      	movs	r7, #2
   b44ee:	e7da      	b.n	b44a6 <_Z10LEDHandlerv+0x42>
        SetSpeed = LED_SPEED_NORMAL;
   b44f0:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b44f2:	2701      	movs	r7, #1
   b44f4:	e7d7      	b.n	b44a6 <_Z10LEDHandlerv+0x42>
   b44f6:	bf00      	nop
   b44f8:	2003e0ec 	.word	0x2003e0ec
   b44fc:	2003e594 	.word	0x2003e594
   b4500:	2003df7c 	.word	0x2003df7c
   b4504:	2003df71 	.word	0x2003df71
   b4508:	2003df7d 	.word	0x2003df7d
   b450c:	2003de5c 	.word	0x2003de5c
   b4510:	2003de1c 	.word	0x2003de1c
   b4514:	2003de4c 	.word	0x2003de4c
   b4518:	000be78a 	.word	0x000be78a
   b451c:	000bed20 	.word	0x000bed20

000b4520 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4520:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b4522:	460a      	mov	r2, r1
   b4524:	4901      	ldr	r1, [pc, #4]	; (b452c <_ZN7FatFile4openEPKci+0xc>)
   b4526:	6809      	ldr	r1, [r1, #0]
   b4528:	f002 b989 	b.w	b683e <_ZN7FatFile4openEPS_PKci>
   b452c:	2003e614 	.word	0x2003e614

000b4530 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4530:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4532:	f003 faf3 	bl	b7b1c <spark_cloud_flag_connected>
   b4536:	4c2b      	ldr	r4, [pc, #172]	; (b45e4 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4538:	b1e0      	cbz	r0, b4574 <_Z11wdogHandlerv+0x44>
   b453a:	2301      	movs	r3, #1
        LTEAvail = false;
   b453c:	7023      	strb	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b453e:	f002 ffad 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b4542:	4b29      	ldr	r3, [pc, #164]	; (b45e8 <_Z11wdogHandlerv+0xb8>)
   b4544:	4c29      	ldr	r4, [pc, #164]	; (b45ec <_Z11wdogHandlerv+0xbc>)
   b4546:	681b      	ldr	r3, [r3, #0]
   b4548:	f247 5230 	movw	r2, #30000	; 0x7530
   b454c:	1ac0      	subs	r0, r0, r3
   b454e:	4290      	cmp	r0, r2
   b4550:	d823      	bhi.n	b459a <_Z11wdogHandlerv+0x6a>
   b4552:	b313      	cbz	r3, b459a <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4554:	2301      	movs	r3, #1
        XBeeAvail = false;
   b4556:	7023      	strb	r3, [r4, #0]
   b4558:	f002 ffa0 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b455c:	4b24      	ldr	r3, [pc, #144]	; (b45f0 <_Z11wdogHandlerv+0xc0>)
   b455e:	4c25      	ldr	r4, [pc, #148]	; (b45f4 <_Z11wdogHandlerv+0xc4>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	f247 5230 	movw	r2, #30000	; 0x7530
   b4566:	1ac0      	subs	r0, r0, r3
   b4568:	4290      	cmp	r0, r2
   b456a:	d828      	bhi.n	b45be <_Z11wdogHandlerv+0x8e>
   b456c:	b33b      	cbz	r3, b45be <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b456e:	2301      	movs	r3, #1
        BLEAvail = false;
   b4570:	7023      	strb	r3, [r4, #0]
}
   b4572:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b4574:	7823      	ldrb	r3, [r4, #0]
   b4576:	2b00      	cmp	r3, #0
   b4578:	d0e1      	beq.n	b453e <_Z11wdogHandlerv+0xe>
    return m_attr;
   b457a:	481f      	ldr	r0, [pc, #124]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b457c:	7c03      	ldrb	r3, [r0, #16]
   b457e:	b92b      	cbnz	r3, b458c <_Z11wdogHandlerv+0x5c>
   b4580:	491e      	ldr	r1, [pc, #120]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b4582:	f244 2202 	movw	r2, #16898	; 0x4202
   b4586:	3010      	adds	r0, #16
   b4588:	f7ff ffca 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b458c:	491c      	ldr	r1, [pc, #112]	; (b4600 <_Z11wdogHandlerv+0xd0>)
   b458e:	481a      	ldr	r0, [pc, #104]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b4590:	221e      	movs	r2, #30
   b4592:	f7ff fedf 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4596:	2300      	movs	r3, #0
   b4598:	e7d0      	b.n	b453c <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b459a:	7823      	ldrb	r3, [r4, #0]
   b459c:	b16b      	cbz	r3, b45ba <_Z11wdogHandlerv+0x8a>
   b459e:	4816      	ldr	r0, [pc, #88]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45a0:	7c03      	ldrb	r3, [r0, #16]
   b45a2:	b92b      	cbnz	r3, b45b0 <_Z11wdogHandlerv+0x80>
   b45a4:	4915      	ldr	r1, [pc, #84]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b45a6:	f244 2202 	movw	r2, #16898	; 0x4202
   b45aa:	3010      	adds	r0, #16
   b45ac:	f7ff ffb8 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45b0:	4913      	ldr	r1, [pc, #76]	; (b4600 <_Z11wdogHandlerv+0xd0>)
   b45b2:	4811      	ldr	r0, [pc, #68]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b45b4:	221e      	movs	r2, #30
   b45b6:	f7ff fecd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b45ba:	2300      	movs	r3, #0
   b45bc:	e7cb      	b.n	b4556 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b45be:	7822      	ldrb	r2, [r4, #0]
   b45c0:	b172      	cbz	r2, b45e0 <_Z11wdogHandlerv+0xb0>
   b45c2:	b16b      	cbz	r3, b45e0 <_Z11wdogHandlerv+0xb0>
   b45c4:	480c      	ldr	r0, [pc, #48]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45c6:	7c03      	ldrb	r3, [r0, #16]
   b45c8:	b92b      	cbnz	r3, b45d6 <_Z11wdogHandlerv+0xa6>
   b45ca:	490c      	ldr	r1, [pc, #48]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b45cc:	f244 2202 	movw	r2, #16898	; 0x4202
   b45d0:	3010      	adds	r0, #16
   b45d2:	f7ff ffa5 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b45d6:	490b      	ldr	r1, [pc, #44]	; (b4604 <_Z11wdogHandlerv+0xd4>)
   b45d8:	4807      	ldr	r0, [pc, #28]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b45da:	221e      	movs	r2, #30
   b45dc:	f7ff feba 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b45e0:	2300      	movs	r3, #0
   b45e2:	e7c5      	b.n	b4570 <_Z11wdogHandlerv+0x40>
   b45e4:	2003de4c 	.word	0x2003de4c
   b45e8:	2003de60 	.word	0x2003de60
   b45ec:	2003de5c 	.word	0x2003de5c
   b45f0:	2003de28 	.word	0x2003de28
   b45f4:	2003de1c 	.word	0x2003de1c
   b45f8:	2003df18 	.word	0x2003df18
   b45fc:	2003de9b 	.word	0x2003de9b
   b4600:	000be795 	.word	0x000be795
   b4604:	000be7e6 	.word	0x000be7e6

000b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4608:	b530      	push	{r4, r5, lr}
   b460a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b460c:	4b1b      	ldr	r3, [pc, #108]	; (b467c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b460e:	9300      	str	r3, [sp, #0]
   b4610:	7913      	ldrb	r3, [r2, #4]
   b4612:	f88d 3004 	strb.w	r3, [sp, #4]
   b4616:	6893      	ldr	r3, [r2, #8]
   b4618:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b461a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b461e:	8993      	ldrh	r3, [r2, #12]
   b4620:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4624:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4626:	460a      	mov	r2, r1
   b4628:	466b      	mov	r3, sp
   b462a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b462e:	4628      	mov	r0, r5
   b4630:	f002 fc8e 	bl	b6f50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4634:	b910      	cbnz	r0, b463c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4636:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4638:	b005      	add	sp, #20
   b463a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b463c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b463e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4642:	4628      	mov	r0, r5
   b4644:	f002 f8f4 	bl	b6830 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4648:	2101      	movs	r1, #1
   b464a:	4620      	mov	r0, r4
   b464c:	f002 fb2a 	bl	b6ca4 <_ZN9FatVolume4initEh>
   b4650:	4601      	mov	r1, r0
   b4652:	b168      	cbz	r0, b4670 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4654:	4621      	mov	r1, r4
   b4656:	4628      	mov	r0, r5
   b4658:	f001 fee4 	bl	b6424 <_ZN7FatFile8openRootEP9FatVolume>
   b465c:	2800      	cmp	r0, #0
   b465e:	d0ea      	beq.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4660:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4664:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4668:	d0e5      	beq.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b466a:	4b05      	ldr	r3, [pc, #20]	; (b4680 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b466c:	601d      	str	r5, [r3, #0]
    return true;
   b466e:	e7e3      	b.n	b4638 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4670:	4620      	mov	r0, r4
   b4672:	f002 fb17 	bl	b6ca4 <_ZN9FatVolume4initEh>
   b4676:	2800      	cmp	r0, #0
   b4678:	d1ec      	bne.n	b4654 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b467a:	e7dc      	b.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b467c:	000bec00 	.word	0x000bec00
   b4680:	2003e614 	.word	0x2003e614

000b4684 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4688:	b084      	sub	sp, #16
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b468a:	7883      	ldrb	r3, [r0, #2]
   b468c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b468e:	af00      	add	r7, sp, #0
   b4690:	4604      	mov	r4, r0
   b4692:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4694:	d14b      	bne.n	b472e <_Z14processCommandPKchb+0xaa>
   b4696:	78c3      	ldrb	r3, [r0, #3]
   b4698:	2b42      	cmp	r3, #66	; 0x42
   b469a:	d174      	bne.n	b4786 <_Z14processCommandPKchb+0x102>
        char dataStr[strlen(command)-8];
   b469c:	4620      	mov	r0, r4
   b469e:	f008 f828 	bl	bc6f2 <strlen>
   b46a2:	3801      	subs	r0, #1
   b46a4:	f020 0007 	bic.w	r0, r0, #7
        }
   b46a8:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b46aa:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b46ae:	4620      	mov	r0, r4
   b46b0:	f008 f81f 	bl	bc6f2 <strlen>
   b46b4:	4468      	add	r0, sp
   b46b6:	2600      	movs	r6, #0
   b46b8:	f800 6c09 	strb.w	r6, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b46bc:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b46be:	73fe      	strb	r6, [r7, #15]
        checkStr[0] = command[strlen(command)-2];
   b46c0:	f008 f817 	bl	bc6f2 <strlen>
   b46c4:	4420      	add	r0, r4
        char dataStr[strlen(command)-8];
   b46c6:	466d      	mov	r5, sp
        checkStr[0] = command[strlen(command)-2];
   b46c8:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b46cc:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   b46ce:	4620      	mov	r0, r4
   b46d0:	f008 f80f 	bl	bc6f2 <strlen>
   b46d4:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46d6:	4631      	mov	r1, r6
        checkStr[1] = command[strlen(command)-1];
   b46d8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b46dc:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46de:	2210      	movs	r2, #16
   b46e0:	4638      	mov	r0, r7
        checkStr[2] = '\0';
   b46e2:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46e4:	f008 ff1c 	bl	bd520 <strtol>
   b46e8:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b46ea:	fa5f f888 	uxtb.w	r8, r8
   b46ee:	f006 fc55 	bl	baf9c <_Z16_fetch_usbserialv>
   b46f2:	4978      	ldr	r1, [pc, #480]	; (b48d4 <_Z14processCommandPKchb+0x250>)
   b46f4:	4643      	mov	r3, r8
   b46f6:	4642      	mov	r2, r8
   b46f8:	f7ff fe2c 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b46fc:	2604      	movs	r6, #4
   b46fe:	4620      	mov	r0, r4
   b4700:	f007 fff7 	bl	bc6f2 <strlen>
   b4704:	3802      	subs	r0, #2
   b4706:	4286      	cmp	r6, r0
   b4708:	d216      	bcs.n	b4738 <_Z14processCommandPKchb+0xb4>
            if(i < 7) cmdStr[i-4] = command[i];
   b470a:	2e06      	cmp	r6, #6
   b470c:	bf9b      	ittet	ls
   b470e:	f107 0310 	addls.w	r3, r7, #16
   b4712:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4714:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4716:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b4718:	bf8c      	ite	hi
   b471a:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b471c:	f803 2c08 	strbls.w	r2, [r3, #-8]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4720:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4724:	bf88      	it	hi
   b4726:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b472a:	b2f6      	uxtb	r6, r6
   b472c:	e7e7      	b.n	b46fe <_Z14processCommandPKchb+0x7a>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b472e:	2b42      	cmp	r3, #66	; 0x42
   b4730:	d129      	bne.n	b4786 <_Z14processCommandPKchb+0x102>
   b4732:	78c3      	ldrb	r3, [r0, #3]
   b4734:	2b31      	cmp	r3, #49	; 0x31
   b4736:	e7b0      	b.n	b469a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b4738:	4540      	cmp	r0, r8
   b473a:	d02e      	beq.n	b479a <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b473c:	f006 fc2e 	bl	baf9c <_Z16_fetch_usbserialv>
   b4740:	4605      	mov	r5, r0
   b4742:	4620      	mov	r0, r4
   b4744:	f007 ffd5 	bl	bc6f2 <strlen>
   b4748:	1e82      	subs	r2, r0, #2
   b474a:	4628      	mov	r0, r5
    return m_attr;
   b474c:	4d62      	ldr	r5, [pc, #392]	; (b48d8 <_Z14processCommandPKchb+0x254>)
   b474e:	4963      	ldr	r1, [pc, #396]	; (b48dc <_Z14processCommandPKchb+0x258>)
   b4750:	4643      	mov	r3, r8
   b4752:	f7ff fdff 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4756:	7c2b      	ldrb	r3, [r5, #16]
   b4758:	b9cb      	cbnz	r3, b478e <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b475a:	4961      	ldr	r1, [pc, #388]	; (b48e0 <_Z14processCommandPKchb+0x25c>)
   b475c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4760:	f105 0010 	add.w	r0, r5, #16
   b4764:	f7ff fedc 	bl	b4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4768:	495e      	ldr	r1, [pc, #376]	; (b48e4 <_Z14processCommandPKchb+0x260>)
   b476a:	4622      	mov	r2, r4
   b476c:	4628      	mov	r0, r5
   b476e:	f7ff fdf1 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4772:	f105 0010 	add.w	r0, r5, #16
   b4776:	f002 f85b 	bl	b6830 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b477a:	f006 fc0f 	bl	baf9c <_Z16_fetch_usbserialv>
   b477e:	495a      	ldr	r1, [pc, #360]	; (b48e8 <_Z14processCommandPKchb+0x264>)
   b4780:	f004 ff0b 	bl	b959a <_ZN5Print7printlnEPKc>
            return;
   b4784:	46cd      	mov	sp, r9
}
   b4786:	3710      	adds	r7, #16
   b4788:	46bd      	mov	sp, r7
   b478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b478e:	4955      	ldr	r1, [pc, #340]	; (b48e4 <_Z14processCommandPKchb+0x260>)
   b4790:	4622      	mov	r2, r4
   b4792:	4628      	mov	r0, r5
   b4794:	f7ff fdde 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4798:	e7ef      	b.n	b477a <_Z14processCommandPKchb+0xf6>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b479a:	4954      	ldr	r1, [pc, #336]	; (b48ec <_Z14processCommandPKchb+0x268>)
   b479c:	f107 000c 	add.w	r0, r7, #12
   b47a0:	f007 ff78 	bl	bc694 <strcmp>
   b47a4:	2800      	cmp	r0, #0
   b47a6:	d0ed      	beq.n	b4784 <_Z14processCommandPKchb+0x100>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b47a8:	4951      	ldr	r1, [pc, #324]	; (b48f0 <_Z14processCommandPKchb+0x26c>)
   b47aa:	f107 000c 	add.w	r0, r7, #12
   b47ae:	f007 ff71 	bl	bc694 <strcmp>
   b47b2:	bb58      	cbnz	r0, b480c <_Z14processCommandPKchb+0x188>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b47b4:	782b      	ldrb	r3, [r5, #0]
   b47b6:	713b      	strb	r3, [r7, #4]
   b47b8:	786b      	ldrb	r3, [r5, #1]
   b47ba:	717b      	strb	r3, [r7, #5]
   b47bc:	78ab      	ldrb	r3, [r5, #2]
   b47be:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47c0:	78eb      	ldrb	r3, [r5, #3]
   b47c2:	723b      	strb	r3, [r7, #8]
   b47c4:	792b      	ldrb	r3, [r5, #4]
   b47c6:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   b47c8:	1d38      	adds	r0, r7, #4
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47ca:	796b      	ldrb	r3, [r5, #5]
   b47cc:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   b47ce:	f007 fec0 	bl	bc552 <atoi>
   b47d2:	4d48      	ldr	r5, [pc, #288]	; (b48f4 <_Z14processCommandPKchb+0x270>)
            setRSpeed = atoi(rSpd);
   b47d4:	4c48      	ldr	r4, [pc, #288]	; (b48f8 <_Z14processCommandPKchb+0x274>)
            setLSpeed = atoi(lSpd);
   b47d6:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b47d8:	f107 0008 	add.w	r0, r7, #8
   b47dc:	f007 feb9 	bl	bc552 <atoi>
   b47e0:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b47e2:	f006 fbdb 	bl	baf9c <_Z16_fetch_usbserialv>
   b47e6:	7823      	ldrb	r3, [r4, #0]
   b47e8:	782a      	ldrb	r2, [r5, #0]
   b47ea:	4944      	ldr	r1, [pc, #272]	; (b48fc <_Z14processCommandPKchb+0x278>)
   b47ec:	f7ff fdb2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b47f0:	7829      	ldrb	r1, [r5, #0]
   b47f2:	4843      	ldr	r0, [pc, #268]	; (b4900 <_Z14processCommandPKchb+0x27c>)
   b47f4:	f003 fb9e 	bl	b7f34 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b47f8:	7821      	ldrb	r1, [r4, #0]
   b47fa:	4842      	ldr	r0, [pc, #264]	; (b4904 <_Z14processCommandPKchb+0x280>)
   b47fc:	f003 fb9a 	bl	b7f34 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4800:	4a41      	ldr	r2, [pc, #260]	; (b4908 <_Z14processCommandPKchb+0x284>)
   b4802:	2301      	movs	r3, #1
   b4804:	7013      	strb	r3, [r2, #0]
            manualRC = true;
   b4806:	4a41      	ldr	r2, [pc, #260]	; (b490c <_Z14processCommandPKchb+0x288>)
   b4808:	7013      	strb	r3, [r2, #0]
   b480a:	e7bb      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b480c:	4940      	ldr	r1, [pc, #256]	; (b4910 <_Z14processCommandPKchb+0x28c>)
   b480e:	f107 000c 	add.w	r0, r7, #12
   b4812:	f007 ff3f 	bl	bc694 <strcmp>
   b4816:	b918      	cbnz	r0, b4820 <_Z14processCommandPKchb+0x19c>
            requestActive = mode;
   b4818:	4b3e      	ldr	r3, [pc, #248]	; (b4914 <_Z14processCommandPKchb+0x290>)
   b481a:	f883 a000 	strb.w	sl, [r3]
   b481e:	e7b1      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"pts")){
   b4820:	493d      	ldr	r1, [pc, #244]	; (b4918 <_Z14processCommandPKchb+0x294>)
   b4822:	f107 000c 	add.w	r0, r7, #12
   b4826:	f007 ff35 	bl	bc694 <strcmp>
   b482a:	b9f0      	cbnz	r0, b486a <_Z14processCommandPKchb+0x1e6>
   b482c:	4c2a      	ldr	r4, [pc, #168]	; (b48d8 <_Z14processCommandPKchb+0x254>)
            Serial.println(dataStr);
   b482e:	f006 fbb5 	bl	baf9c <_Z16_fetch_usbserialv>
   b4832:	4629      	mov	r1, r5
   b4834:	f004 feb1 	bl	b959a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4838:	7c23      	ldrb	r3, [r4, #16]
   b483a:	b983      	cbnz	r3, b485e <_Z14processCommandPKchb+0x1da>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b483c:	4928      	ldr	r1, [pc, #160]	; (b48e0 <_Z14processCommandPKchb+0x25c>)
   b483e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4842:	f104 0010 	add.w	r0, r4, #16
   b4846:	f7ff fe6b 	bl	b4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b484a:	4934      	ldr	r1, [pc, #208]	; (b491c <_Z14processCommandPKchb+0x298>)
   b484c:	462a      	mov	r2, r5
   b484e:	4620      	mov	r0, r4
   b4850:	f7ff fd80 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4854:	f104 0010 	add.w	r0, r4, #16
   b4858:	f001 ffea 	bl	b6830 <_ZN7FatFile5closeEv>
   b485c:	e792      	b.n	b4784 <_Z14processCommandPKchb+0x100>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b485e:	492f      	ldr	r1, [pc, #188]	; (b491c <_Z14processCommandPKchb+0x298>)
   b4860:	462a      	mov	r2, r5
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff fd76 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4868:	e78c      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b486a:	492d      	ldr	r1, [pc, #180]	; (b4920 <_Z14processCommandPKchb+0x29c>)
   b486c:	f107 000c 	add.w	r0, r7, #12
   b4870:	f007 ff10 	bl	bc694 <strcmp>
   b4874:	b920      	cbnz	r0, b4880 <_Z14processCommandPKchb+0x1fc>
   b4876:	f002 fe11 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b487a:	4b2a      	ldr	r3, [pc, #168]	; (b4924 <_Z14processCommandPKchb+0x2a0>)
   b487c:	6018      	str	r0, [r3, #0]
   b487e:	e781      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"hwa")){
   b4880:	4929      	ldr	r1, [pc, #164]	; (b4928 <_Z14processCommandPKchb+0x2a4>)
   b4882:	f107 000c 	add.w	r0, r7, #12
   b4886:	f007 ff05 	bl	bc694 <strcmp>
   b488a:	b910      	cbnz	r0, b4892 <_Z14processCommandPKchb+0x20e>
            waitForConnection = false;
   b488c:	4b27      	ldr	r3, [pc, #156]	; (b492c <_Z14processCommandPKchb+0x2a8>)
   b488e:	7018      	strb	r0, [r3, #0]
   b4890:	e778      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b4892:	4927      	ldr	r1, [pc, #156]	; (b4930 <_Z14processCommandPKchb+0x2ac>)
   b4894:	f107 000c 	add.w	r0, r7, #12
   b4898:	f007 fefc 	bl	bc694 <strcmp>
   b489c:	2800      	cmp	r0, #0
   b489e:	f43f af71 	beq.w	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b48a2:	4924      	ldr	r1, [pc, #144]	; (b4934 <_Z14processCommandPKchb+0x2b0>)
   b48a4:	f107 000c 	add.w	r0, r7, #12
   b48a8:	f007 fef4 	bl	bc694 <strcmp>
   b48ac:	2800      	cmp	r0, #0
   b48ae:	f47f af69 	bne.w	b4784 <_Z14processCommandPKchb+0x100>
            offloadMode = true;
   b48b2:	4b21      	ldr	r3, [pc, #132]	; (b4938 <_Z14processCommandPKchb+0x2b4>)
            status.setSpeed(LED_SPEED_FAST);
   b48b4:	4821      	ldr	r0, [pc, #132]	; (b493c <_Z14processCommandPKchb+0x2b8>)
            offloadMode = true;
   b48b6:	2201      	movs	r2, #1
   b48b8:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48ba:	4b20      	ldr	r3, [pc, #128]	; (b493c <_Z14processCommandPKchb+0x2b8>)
   b48bc:	7c5a      	ldrb	r2, [r3, #17]
   b48be:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b48c0:	bf1c      	itt	ne
   b48c2:	2202      	movne	r2, #2
   b48c4:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b48c6:	211e      	movs	r1, #30
    d_.color = color;
   b48c8:	22ff      	movs	r2, #255	; 0xff
   b48ca:	615a      	str	r2, [r3, #20]
   b48cc:	f7ff fdbe 	bl	b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b48d0:	e758      	b.n	b4784 <_Z14processCommandPKchb+0x100>
   b48d2:	bf00      	nop
   b48d4:	000be835 	.word	0x000be835
   b48d8:	2003df18 	.word	0x2003df18
   b48dc:	000be84a 	.word	0x000be84a
   b48e0:	2003de9b 	.word	0x2003de9b
   b48e4:	000be867 	.word	0x000be867
   b48e8:	000be893 	.word	0x000be893
   b48ec:	000be8b4 	.word	0x000be8b4
   b48f0:	000be8b8 	.word	0x000be8b8
   b48f4:	2003e590 	.word	0x2003e590
   b48f8:	2003e591 	.word	0x2003e591
   b48fc:	000be8bc 	.word	0x000be8bc
   b4900:	2003de2c 	.word	0x2003de2c
   b4904:	2003de3c 	.word	0x2003de3c
   b4908:	2003e5e0 	.word	0x2003e5e0
   b490c:	2003df7d 	.word	0x2003df7d
   b4910:	000be8e8 	.word	0x000be8e8
   b4914:	2003e0ed 	.word	0x2003e0ed
   b4918:	000be8ec 	.word	0x000be8ec
   b491c:	000be8f0 	.word	0x000be8f0
   b4920:	000be913 	.word	0x000be913
   b4924:	2003debc 	.word	0x2003debc
   b4928:	000be917 	.word	0x000be917
   b492c:	2003e5e1 	.word	0x2003e5e1
   b4930:	000be91b 	.word	0x000be91b
   b4934:	000be91f 	.word	0x000be91f
   b4938:	2003e0ec 	.word	0x2003e0ec
   b493c:	2003e594 	.word	0x2003e594

000b4940 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4940:	b510      	push	{r4, lr}
   b4942:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4944:	2200      	movs	r2, #0
   b4946:	2104      	movs	r1, #4
   b4948:	4620      	mov	r0, r4
   b494a:	f7ff fe9b 	bl	b4684 <_Z14processCommandPKchb>
    if(logMessages){
   b494e:	4b0b      	ldr	r3, [pc, #44]	; (b497c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4950:	781b      	ldrb	r3, [r3, #0]
   b4952:	b193      	cbz	r3, b497a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4954:	480a      	ldr	r0, [pc, #40]	; (b4980 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4956:	7c03      	ldrb	r3, [r0, #16]
   b4958:	b92b      	cbnz	r3, b4966 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b495a:	490a      	ldr	r1, [pc, #40]	; (b4984 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b495c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4960:	3010      	adds	r0, #16
   b4962:	f7ff fddd 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4966:	4622      	mov	r2, r4
   b4968:	4907      	ldr	r1, [pc, #28]	; (b4988 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b496a:	4805      	ldr	r0, [pc, #20]	; (b4980 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b496c:	f7ff fcf2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
}
   b4970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4974:	4805      	ldr	r0, [pc, #20]	; (b498c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4976:	f001 bf5b 	b.w	b6830 <_ZN7FatFile5closeEv>
}
   b497a:	bd10      	pop	{r4, pc}
   b497c:	2003df70 	.word	0x2003df70
   b4980:	2003df18 	.word	0x2003df18
   b4984:	2003de9b 	.word	0x2003de9b
   b4988:	000be923 	.word	0x000be923
   b498c:	2003df28 	.word	0x2003df28

000b4990 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4990:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4992:	f101 0308 	add.w	r3, r1, #8
   b4996:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b499a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b499c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49a0:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b49a2:	460a      	mov	r2, r1
   b49a4:	4601      	mov	r1, r0
   b49a6:	4668      	mov	r0, sp
   b49a8:	f007 fdf0 	bl	bc58c <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49ac:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b49b0:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b49b6:	b113      	cbz	r3, b49be <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b49b8:	2300      	movs	r3, #0
   b49ba:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b49be:	f006 faed 	bl	baf9c <_Z16_fetch_usbserialv>
   b49c2:	4916      	ldr	r1, [pc, #88]	; (b4a1c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b49c4:	f004 fde9 	bl	b959a <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b49c8:	f006 fae8 	bl	baf9c <_Z16_fetch_usbserialv>
   b49cc:	4629      	mov	r1, r5
   b49ce:	f004 fde4 	bl	b959a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b49d2:	2201      	movs	r2, #1
   b49d4:	4611      	mov	r1, r2
   b49d6:	4628      	mov	r0, r5
   b49d8:	f7ff fe54 	bl	b4684 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b49dc:	782b      	ldrb	r3, [r5, #0]
   b49de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b49e2:	2b41      	cmp	r3, #65	; 0x41
   b49e4:	d103      	bne.n	b49ee <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b49e6:	f002 fd59 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
   b49ea:	4b0d      	ldr	r3, [pc, #52]	; (b4a20 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b49ec:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b49ee:	4b0d      	ldr	r3, [pc, #52]	; (b4a24 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b49f0:	781b      	ldrb	r3, [r3, #0]
   b49f2:	b183      	cbz	r3, b4a16 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b49f4:	480c      	ldr	r0, [pc, #48]	; (b4a28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49f6:	7c03      	ldrb	r3, [r0, #16]
   b49f8:	b92b      	cbnz	r3, b4a06 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b49fa:	490c      	ldr	r1, [pc, #48]	; (b4a2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b49fc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a00:	3010      	adds	r0, #16
   b4a02:	f7ff fd8d 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4a06:	490a      	ldr	r1, [pc, #40]	; (b4a30 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4a08:	4807      	ldr	r0, [pc, #28]	; (b4a28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4a0a:	462a      	mov	r2, r5
   b4a0c:	f7ff fca2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4a10:	4808      	ldr	r0, [pc, #32]	; (b4a34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4a12:	f001 ff0d 	bl	b6830 <_ZN7FatFile5closeEv>
}
   b4a16:	46bd      	mov	sp, r7
   b4a18:	bdb0      	pop	{r4, r5, r7, pc}
   b4a1a:	bf00      	nop
   b4a1c:	000be943 	.word	0x000be943
   b4a20:	2003de28 	.word	0x2003de28
   b4a24:	2003df70 	.word	0x2003df70
   b4a28:	2003df18 	.word	0x2003df18
   b4a2c:	2003de9b 	.word	0x2003de9b
   b4a30:	000be953 	.word	0x000be953
   b4a34:	2003df28 	.word	0x2003df28

000b4a38 <_Z8setupLTEv>:
void setupLTE(){
   b4a38:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4a3a:	2400      	movs	r4, #0
   b4a3c:	e9cd 4400 	strd	r4, r4, [sp]
   b4a40:	4904      	ldr	r1, [pc, #16]	; (b4a54 <_Z8setupLTEv+0x1c>)
   b4a42:	4805      	ldr	r0, [pc, #20]	; (b4a58 <_Z8setupLTEv+0x20>)
   b4a44:	2301      	movs	r3, #1
   b4a46:	4622      	mov	r2, r4
   b4a48:	f003 f878 	bl	b7b3c <spark_subscribe>
    LTEAvail = false;
   b4a4c:	4b03      	ldr	r3, [pc, #12]	; (b4a5c <_Z8setupLTEv+0x24>)
   b4a4e:	701c      	strb	r4, [r3, #0]
}
   b4a50:	b002      	add	sp, #8
   b4a52:	bd10      	pop	{r4, pc}
   b4a54:	000b4941 	.word	0x000b4941
   b4a58:	000be973 	.word	0x000be973
   b4a5c:	2003de4c 	.word	0x2003de4c

000b4a60 <_Z9setupXBeev>:
void setupXBee(){
   b4a60:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a62:	f006 ff0f 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b4a66:	4908      	ldr	r1, [pc, #32]	; (b4a88 <_Z9setupXBeev+0x28>)
   b4a68:	f7ff fc3b 	bl	b42e2 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4a6c:	2014      	movs	r0, #20
   b4a6e:	f005 fe7d 	bl	ba76c <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4a72:	f006 ff07 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b4a76:	4905      	ldr	r1, [pc, #20]	; (b4a8c <_Z9setupXBeev+0x2c>)
   b4a78:	f7ff fc33 	bl	b42e2 <_ZN5Print6printfEPKcz>
}
   b4a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4a80:	2014      	movs	r0, #20
   b4a82:	f005 be73 	b.w	ba76c <delay>
   b4a86:	bf00      	nop
   b4a88:	000befb7 	.word	0x000befb7
   b4a8c:	000be755 	.word	0x000be755

000b4a90 <_Z8setupGPSv>:
void setupGPS(){
   b4a90:	b508      	push	{r3, lr}
    myGPS.begin(Wire);
   b4a92:	f006 ff33 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4a96:	4601      	mov	r1, r0
   b4a98:	4806      	ldr	r0, [pc, #24]	; (b4ab4 <_Z8setupGPSv+0x24>)
   b4a9a:	f002 fc8f 	bl	b73bc <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   b4a9e:	4805      	ldr	r0, [pc, #20]	; (b4ab4 <_Z8setupGPSv+0x24>)
   b4aa0:	f002 fc97 	bl	b73d2 <_ZN13SFE_UBLOX_GPS11isConnectedEv>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4aa4:	f006 ff2a 	bl	bb8fc <_Z19__fetch_global_Wirev>
}
   b4aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  setSpeed(speed);
   b4aac:	4902      	ldr	r1, [pc, #8]	; (b4ab8 <_Z8setupGPSv+0x28>)
   b4aae:	f006 bb99 	b.w	bb1e4 <_ZN7TwoWire8setSpeedEm>
   b4ab2:	bf00      	nop
   b4ab4:	2003dfb4 	.word	0x2003dfb4
   b4ab8:	00061a80 	.word	0x00061a80

000b4abc <_Z12updateMotorsv>:
void updateMotors(){
   b4abc:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4abe:	4c08      	ldr	r4, [pc, #32]	; (b4ae0 <_Z12updateMotorsv+0x24>)
   b4ac0:	7823      	ldrb	r3, [r4, #0]
   b4ac2:	b15b      	cbz	r3, b4adc <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4ac4:	4b07      	ldr	r3, [pc, #28]	; (b4ae4 <_Z12updateMotorsv+0x28>)
   b4ac6:	4808      	ldr	r0, [pc, #32]	; (b4ae8 <_Z12updateMotorsv+0x2c>)
   b4ac8:	7819      	ldrb	r1, [r3, #0]
   b4aca:	f003 fa33 	bl	b7f34 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4ace:	4b07      	ldr	r3, [pc, #28]	; (b4aec <_Z12updateMotorsv+0x30>)
   b4ad0:	4807      	ldr	r0, [pc, #28]	; (b4af0 <_Z12updateMotorsv+0x34>)
   b4ad2:	7819      	ldrb	r1, [r3, #0]
   b4ad4:	f003 fa2e 	bl	b7f34 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4ad8:	2300      	movs	r3, #0
   b4ada:	7023      	strb	r3, [r4, #0]
}
   b4adc:	bd10      	pop	{r4, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e5e0 	.word	0x2003e5e0
   b4ae4:	2003e590 	.word	0x2003e590
   b4ae8:	2003de2c 	.word	0x2003de2c
   b4aec:	2003e591 	.word	0x2003e591
   b4af0:	2003de3c 	.word	0x2003de3c
   b4af4:	00000000 	.word	0x00000000

000b4af8 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4afc:	4db2      	ldr	r5, [pc, #712]	; (b4dc8 <_Z13sensorHandlerv+0x2d0>)
void sensorHandler(){
   b4afe:	b0ab      	sub	sp, #172	; 0xac
   b4b00:	f002 fccc 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4b04:	682b      	ldr	r3, [r5, #0]
   b4b06:	4283      	cmp	r3, r0
   b4b08:	f080 8109 	bcs.w	b4d1e <_Z13sensorHandlerv+0x226>
   b4b0c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; b4df8 <_Z13sensorHandlerv+0x300>
   b4b10:	f89b 3000 	ldrb.w	r3, [fp]
   b4b14:	2b00      	cmp	r3, #0
   b4b16:	f000 8102 	beq.w	b4d1e <_Z13sensorHandlerv+0x226>
        Wire.requestFrom(PHADDR, 20, 1);
   b4b1a:	f006 feef 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b1e:	2301      	movs	r3, #1
   b4b20:	2214      	movs	r2, #20
   b4b22:	2163      	movs	r1, #99	; 0x63
   b4b24:	f006 fb7f 	bl	bb226 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4b28:	f006 fee8 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b2c:	6803      	ldr	r3, [r0, #0]
   b4b2e:	695b      	ldr	r3, [r3, #20]
   b4b30:	4798      	blx	r3
        int c = 0;
   b4b32:	ac16      	add	r4, sp, #88	; 0x58
   b4b34:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4b36:	f006 fee1 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b3a:	6803      	ldr	r3, [r0, #0]
   b4b3c:	691b      	ldr	r3, [r3, #16]
   b4b3e:	4798      	blx	r3
   b4b40:	b138      	cbz	r0, b4b52 <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4b42:	f006 fedb 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b46:	6803      	ldr	r3, [r0, #0]
   b4b48:	695b      	ldr	r3, [r3, #20]
   b4b4a:	4798      	blx	r3
   b4b4c:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4b50:	e7f1      	b.n	b4b36 <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4b52:	4630      	mov	r0, r6
   b4b54:	f007 fcfa 	bl	bc54c <atof>
   b4b58:	ec51 0b10 	vmov	r0, r1, d0
   b4b5c:	f007 fc82 	bl	bc464 <__aeabi_d2f>
   b4b60:	f8df a298 	ldr.w	sl, [pc, #664]	; b4dfc <_Z13sensorHandlerv+0x304>
   b4b64:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b4b68:	f006 fec8 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b6c:	2301      	movs	r3, #1
   b4b6e:	2214      	movs	r2, #20
   b4b70:	2164      	movs	r1, #100	; 0x64
   b4b72:	f006 fb58 	bl	bb226 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4b76:	f006 fec1 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b7a:	6803      	ldr	r3, [r0, #0]
   b4b7c:	695b      	ldr	r3, [r3, #20]
   b4b7e:	4798      	blx	r3
        c = 0;
   b4b80:	ac1b      	add	r4, sp, #108	; 0x6c
   b4b82:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4b84:	f006 feba 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b88:	6803      	ldr	r3, [r0, #0]
   b4b8a:	691b      	ldr	r3, [r3, #16]
   b4b8c:	4798      	blx	r3
   b4b8e:	b138      	cbz	r0, b4ba0 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b4b90:	f006 feb4 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4b94:	6803      	ldr	r3, [r0, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	4798      	blx	r3
   b4b9a:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4b9e:	e7f1      	b.n	b4b84 <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b4ba0:	4630      	mov	r0, r6
   b4ba2:	f007 fcd3 	bl	bc54c <atof>
        Wire.requestFrom(COND, 20, 1);
   b4ba6:	f006 fea9 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4baa:	2301      	movs	r3, #1
   b4bac:	2214      	movs	r2, #20
   b4bae:	2165      	movs	r1, #101	; 0x65
   b4bb0:	f006 fb39 	bl	bb226 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bb4:	f006 fea2 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4bb8:	6803      	ldr	r3, [r0, #0]
   b4bba:	695b      	ldr	r3, [r3, #20]
   b4bbc:	4798      	blx	r3
        c = 0;
   b4bbe:	ac20      	add	r4, sp, #128	; 0x80
   b4bc0:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4bc2:	f006 fe9b 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4bc6:	6803      	ldr	r3, [r0, #0]
   b4bc8:	691b      	ldr	r3, [r3, #16]
   b4bca:	4798      	blx	r3
   b4bcc:	b138      	cbz	r0, b4bde <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b4bce:	f006 fe95 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4bd2:	6803      	ldr	r3, [r0, #0]
   b4bd4:	695b      	ldr	r3, [r3, #20]
   b4bd6:	4798      	blx	r3
   b4bd8:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4bdc:	e7f1      	b.n	b4bc2 <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b4bde:	4630      	mov	r0, r6
   b4be0:	f007 fcb4 	bl	bc54c <atof>
   b4be4:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b4be8:	f006 fe88 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4bec:	2301      	movs	r3, #1
   b4bee:	2214      	movs	r2, #20
   b4bf0:	2166      	movs	r1, #102	; 0x66
   b4bf2:	f006 fb18 	bl	bb226 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bf6:	f006 fe81 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4bfa:	6803      	ldr	r3, [r0, #0]
   b4bfc:	695b      	ldr	r3, [r3, #20]
   b4bfe:	4798      	blx	r3
        c = 0;
   b4c00:	af25      	add	r7, sp, #148	; 0x94
   b4c02:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b4c04:	f006 fe7a 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4c08:	6803      	ldr	r3, [r0, #0]
   b4c0a:	691b      	ldr	r3, [r3, #16]
   b4c0c:	4798      	blx	r3
   b4c0e:	4604      	mov	r4, r0
   b4c10:	b138      	cbz	r0, b4c22 <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b4c12:	f006 fe73 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4c16:	6803      	ldr	r3, [r0, #0]
   b4c18:	695b      	ldr	r3, [r3, #20]
   b4c1a:	4798      	blx	r3
   b4c1c:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b4c20:	e7f0      	b.n	b4c04 <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b4c22:	4630      	mov	r0, r6
   b4c24:	f007 fc92 	bl	bc54c <atof>
        if(logSensors){
   b4c28:	4b68      	ldr	r3, [pc, #416]	; (b4dcc <_Z13sensorHandlerv+0x2d4>)
        dataWait = false;
   b4c2a:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b4c2e:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b4c30:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b4c34:	2b00      	cmp	r3, #0
   b4c36:	d072      	beq.n	b4d1e <_Z13sensorHandlerv+0x226>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b4c38:	f005 fd6e 	bl	ba718 <_ZN9TimeClass5monthEv>
   b4c3c:	9011      	str	r0, [sp, #68]	; 0x44
   b4c3e:	f005 fd5f 	bl	ba700 <_ZN9TimeClass3dayEv>
   b4c42:	4604      	mov	r4, r0
   b4c44:	f005 fd70 	bl	ba728 <_ZN9TimeClass4yearEv>
   b4c48:	4683      	mov	fp, r0
   b4c4a:	f005 fd35 	bl	ba6b8 <_ZN9TimeClass4hourEv>
   b4c4e:	9010      	str	r0, [sp, #64]	; 0x40
   b4c50:	f005 fd3e 	bl	ba6d0 <_ZN9TimeClass6minuteEv>
   b4c54:	900f      	str	r0, [sp, #60]	; 0x3c
   b4c56:	f005 fd47 	bl	ba6e8 <_ZN9TimeClass6secondEv>
   b4c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4c60:	9004      	str	r0, [sp, #16]
   b4c62:	e9cd b201 	strd	fp, r2, [sp, #4]
   b4c66:	9103      	str	r1, [sp, #12]
   b4c68:	4a59      	ldr	r2, [pc, #356]	; (b4dd0 <_Z13sensorHandlerv+0x2d8>)
   b4c6a:	9400      	str	r4, [sp, #0]
   b4c6c:	2110      	movs	r1, #16
   b4c6e:	a812      	add	r0, sp, #72	; 0x48
   b4c70:	f002 ff9c 	bl	b7bac <snprintf>
   b4c74:	4857      	ldr	r0, [pc, #348]	; (b4dd4 <_Z13sensorHandlerv+0x2dc>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b4c76:	7c03      	ldrb	r3, [r0, #16]
   b4c78:	b92b      	cbnz	r3, b4c86 <_Z13sensorHandlerv+0x18e>
   b4c7a:	4957      	ldr	r1, [pc, #348]	; (b4dd8 <_Z13sensorHandlerv+0x2e0>)
   b4c7c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c80:	3010      	adds	r0, #16
   b4c82:	f7ff fc4d 	bl	b4520 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b4c86:	4649      	mov	r1, r9
   b4c88:	4640      	mov	r0, r8
   b4c8a:	f007 fbeb 	bl	bc464 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4c8e:	f007 f8d7 	bl	bbe40 <__aeabi_f2d>
   b4c92:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b4c96:	4b51      	ldr	r3, [pc, #324]	; (b4ddc <_Z13sensorHandlerv+0x2e4>)
   b4c98:	6818      	ldr	r0, [r3, #0]
   b4c9a:	f007 f8d1 	bl	bbe40 <__aeabi_f2d>
   b4c9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4ca2:	4b4f      	ldr	r3, [pc, #316]	; (b4de0 <_Z13sensorHandlerv+0x2e8>)
   b4ca4:	6818      	ldr	r0, [r3, #0]
   b4ca6:	f007 f8cb 	bl	bbe40 <__aeabi_f2d>
   b4caa:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4cae:	f8da 0000 	ldr.w	r0, [sl]
   b4cb2:	f007 f8c5 	bl	bbe40 <__aeabi_f2d>
   b4cb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b4cba:	4639      	mov	r1, r7
   b4cbc:	4630      	mov	r0, r6
   b4cbe:	f007 fbd1 	bl	bc464 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4cc2:	f007 f8bd 	bl	bbe40 <__aeabi_f2d>
   b4cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4cca:	4b46      	ldr	r3, [pc, #280]	; (b4de4 <_Z13sensorHandlerv+0x2ec>)
   b4ccc:	6818      	ldr	r0, [r3, #0]
   b4cce:	ee07 0a90 	vmov	s15, r0
   b4cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cd6:	ee17 0a90 	vmov	r0, s15
   b4cda:	f007 f8b1 	bl	bbe40 <__aeabi_f2d>
   b4cde:	a338      	add	r3, pc, #224	; (adr r3, b4dc0 <_Z13sensorHandlerv+0x2c8>)
   b4ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ce4:	f007 fa2e 	bl	bc144 <__aeabi_ddiv>
   b4ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4cec:	4b3e      	ldr	r3, [pc, #248]	; (b4de8 <_Z13sensorHandlerv+0x2f0>)
   b4cee:	6818      	ldr	r0, [r3, #0]
   b4cf0:	ee07 0a90 	vmov	s15, r0
   b4cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cf8:	ee17 0a90 	vmov	r0, s15
   b4cfc:	f007 f8a0 	bl	bbe40 <__aeabi_f2d>
   b4d00:	a32f      	add	r3, pc, #188	; (adr r3, b4dc0 <_Z13sensorHandlerv+0x2c8>)
   b4d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d06:	f007 fa1d 	bl	bc144 <__aeabi_ddiv>
   b4d0a:	aa12      	add	r2, sp, #72	; 0x48
   b4d0c:	e9cd 0100 	strd	r0, r1, [sp]
   b4d10:	4936      	ldr	r1, [pc, #216]	; (b4dec <_Z13sensorHandlerv+0x2f4>)
   b4d12:	4830      	ldr	r0, [pc, #192]	; (b4dd4 <_Z13sensorHandlerv+0x2dc>)
   b4d14:	f7ff fb1e 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b4d18:	4835      	ldr	r0, [pc, #212]	; (b4df0 <_Z13sensorHandlerv+0x2f8>)
   b4d1a:	f001 fd89 	bl	b6830 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b4d1e:	4c35      	ldr	r4, [pc, #212]	; (b4df4 <_Z13sensorHandlerv+0x2fc>)
   b4d20:	f002 fbbc 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
   b4d24:	6823      	ldr	r3, [r4, #0]
   b4d26:	4283      	cmp	r3, r0
   b4d28:	d244      	bcs.n	b4db4 <_Z13sensorHandlerv+0x2bc>
   b4d2a:	f002 fbb7 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b4d2e:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b4d32:	6020      	str	r0, [r4, #0]
   b4d34:	f002 fbb2 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b4d38:	f200 3039 	addw	r0, r0, #825	; 0x339
   b4d3c:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b4d3e:	f006 fddd 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d42:	2163      	movs	r1, #99	; 0x63
   b4d44:	f006 fa85 	bl	bb252 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d48:	f006 fdd8 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d4c:	2172      	movs	r1, #114	; 0x72
   b4d4e:	f7ff fa71 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d52:	f006 fdd3 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d56:	f006 fa83 	bl	bb260 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b4d5a:	f006 fdcf 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d5e:	2164      	movs	r1, #100	; 0x64
   b4d60:	f006 fa77 	bl	bb252 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d64:	f006 fdca 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d68:	2172      	movs	r1, #114	; 0x72
   b4d6a:	f7ff fa63 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d6e:	f006 fdc5 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d72:	f006 fa75 	bl	bb260 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b4d76:	f006 fdc1 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d7a:	2165      	movs	r1, #101	; 0x65
   b4d7c:	f006 fa69 	bl	bb252 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d80:	f006 fdbc 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d84:	2172      	movs	r1, #114	; 0x72
   b4d86:	f7ff fa55 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d8a:	f006 fdb7 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d8e:	f006 fa67 	bl	bb260 <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b4d92:	f006 fdb3 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4d96:	2166      	movs	r1, #102	; 0x66
   b4d98:	f006 fa5b 	bl	bb252 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d9c:	f006 fdae 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4da0:	2172      	movs	r1, #114	; 0x72
   b4da2:	f7ff fa47 	bl	b4234 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4da6:	f006 fda9 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b4daa:	f006 fa59 	bl	bb260 <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b4dae:	4b12      	ldr	r3, [pc, #72]	; (b4df8 <_Z13sensorHandlerv+0x300>)
   b4db0:	2201      	movs	r2, #1
   b4db2:	701a      	strb	r2, [r3, #0]
}
   b4db4:	b02b      	add	sp, #172	; 0xac
   b4db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4dba:	bf00      	nop
   b4dbc:	f3af 8000 	nop.w
   b4dc0:	00000000 	.word	0x00000000
   b4dc4:	412e8480 	.word	0x412e8480
   b4dc8:	2003de78 	.word	0x2003de78
   b4dcc:	2003df71 	.word	0x2003df71
   b4dd0:	000be979 	.word	0x000be979
   b4dd4:	2003df80 	.word	0x2003df80
   b4dd8:	2003de7d 	.word	0x2003de7d
   b4ddc:	2003e584 	.word	0x2003e584
   b4de0:	2003e580 	.word	0x2003e580
   b4de4:	2003df78 	.word	0x2003df78
   b4de8:	2003dec4 	.word	0x2003dec4
   b4dec:	000be992 	.word	0x000be992
   b4df0:	2003df90 	.word	0x2003df90
   b4df4:	2003e58c 	.word	0x2003e58c
   b4df8:	2003de7c 	.word	0x2003de7c
   b4dfc:	2003e588 	.word	0x2003e588

000b4e00 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4e04:	4e3c      	ldr	r6, [pc, #240]	; (b4ef8 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e06:	f8df 8104 	ldr.w	r8, [pc, #260]	; b4f0c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b4e0a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4f10 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b4e0e:	b089      	sub	sp, #36	; 0x24
   b4e10:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4e12:	f006 fd37 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b4e16:	6803      	ldr	r3, [r0, #0]
   b4e18:	691b      	ldr	r3, [r3, #16]
   b4e1a:	4798      	blx	r3
   b4e1c:	2800      	cmp	r0, #0
   b4e1e:	d066      	beq.n	b4eee <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b4e20:	f006 fd30 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b4e24:	220a      	movs	r2, #10
   b4e26:	4601      	mov	r1, r0
   b4e28:	4638      	mov	r0, r7
   b4e2a:	f004 fc3d 	bl	b96a8 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4e2e:	68bb      	ldr	r3, [r7, #8]
   b4e30:	3307      	adds	r3, #7
   b4e32:	f023 0307 	bic.w	r3, r3, #7
    }
   b4e36:	466d      	mov	r5, sp
        char buffer[data.length()];
   b4e38:	ebad 0d03 	sub.w	sp, sp, r3
   b4e3c:	46ea      	mov	sl, sp
   b4e3e:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4e40:	68b9      	ldr	r1, [r7, #8]
   b4e42:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4e46:	458b      	cmp	fp, r1
   b4e48:	f103 0401 	add.w	r4, r3, #1
   b4e4c:	d207      	bcs.n	b4e5e <_Z11XBeeHandlerv+0x5e>
   b4e4e:	4659      	mov	r1, fp
   b4e50:	4638      	mov	r0, r7
   b4e52:	f003 f9c9 	bl	b81e8 <_ZNK6String6charAtEj>
   b4e56:	4623      	mov	r3, r4
   b4e58:	f80a 000b 	strb.w	r0, [sl, fp]
   b4e5c:	e7f0      	b.n	b4e40 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4e5e:	2901      	cmp	r1, #1
   b4e60:	d90a      	bls.n	b4e78 <_Z11XBeeHandlerv+0x78>
   b4e62:	3901      	subs	r1, #1
   b4e64:	4638      	mov	r0, r7
   b4e66:	f003 f9bf 	bl	b81e8 <_ZNK6String6charAtEj>
   b4e6a:	280d      	cmp	r0, #13
   b4e6c:	bf01      	itttt	eq
   b4e6e:	68bb      	ldreq	r3, [r7, #8]
   b4e70:	4453      	addeq	r3, sl
   b4e72:	2200      	moveq	r2, #0
   b4e74:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4e78:	2201      	movs	r2, #1
   b4e7a:	2102      	movs	r1, #2
   b4e7c:	4650      	mov	r0, sl
   b4e7e:	f7ff fc01 	bl	b4684 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4e82:	f006 f88b 	bl	baf9c <_Z16_fetch_usbserialv>
   b4e86:	4631      	mov	r1, r6
   b4e88:	f004 fb87 	bl	b959a <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4e8c:	f006 f886 	bl	baf9c <_Z16_fetch_usbserialv>
   b4e90:	6839      	ldr	r1, [r7, #0]
   b4e92:	f004 fb82 	bl	b959a <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e96:	f89a 3000 	ldrb.w	r3, [sl]
   b4e9a:	3b42      	subs	r3, #66	; 0x42
   b4e9c:	2b01      	cmp	r3, #1
   b4e9e:	d803      	bhi.n	b4ea8 <_Z11XBeeHandlerv+0xa8>
   b4ea0:	f002 fafc 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
   b4ea4:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b4ea8:	f899 3000 	ldrb.w	r3, [r9]
   b4eac:	b1d3      	cbz	r3, b4ee4 <_Z11XBeeHandlerv+0xe4>
   b4eae:	4813      	ldr	r0, [pc, #76]	; (b4efc <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4eb0:	7c03      	ldrb	r3, [r0, #16]
   b4eb2:	b92b      	cbnz	r3, b4ec0 <_Z11XBeeHandlerv+0xc0>
   b4eb4:	4912      	ldr	r1, [pc, #72]	; (b4f00 <_Z11XBeeHandlerv+0x100>)
   b4eb6:	f244 2202 	movw	r2, #16898	; 0x4202
   b4eba:	3010      	adds	r0, #16
   b4ebc:	f7ff fb30 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4ec0:	4639      	mov	r1, r7
   b4ec2:	f107 0010 	add.w	r0, r7, #16
   b4ec6:	f003 f945 	bl	b8154 <_ZN6StringC1ERKS_>
   b4eca:	490e      	ldr	r1, [pc, #56]	; (b4f04 <_Z11XBeeHandlerv+0x104>)
   b4ecc:	480b      	ldr	r0, [pc, #44]	; (b4efc <_Z11XBeeHandlerv+0xfc>)
   b4ece:	f107 0210 	add.w	r2, r7, #16
   b4ed2:	f7ff fa3f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4ed6:	f107 0010 	add.w	r0, r7, #16
   b4eda:	f003 f8a5 	bl	b8028 <_ZN6StringD1Ev>
            logFile.close();
   b4ede:	480a      	ldr	r0, [pc, #40]	; (b4f08 <_Z11XBeeHandlerv+0x108>)
   b4ee0:	f001 fca6 	bl	b6830 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4ee4:	4638      	mov	r0, r7
   b4ee6:	f003 f89f 	bl	b8028 <_ZN6StringD1Ev>
   b4eea:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b4eec:	e791      	b.n	b4e12 <_Z11XBeeHandlerv+0x12>
}
   b4eee:	3724      	adds	r7, #36	; 0x24
   b4ef0:	46bd      	mov	sp, r7
   b4ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4ef6:	bf00      	nop
   b4ef8:	000be9aa 	.word	0x000be9aa
   b4efc:	2003df18 	.word	0x2003df18
   b4f00:	2003de9b 	.word	0x2003de9b
   b4f04:	000be9bc 	.word	0x000be9bc
   b4f08:	2003df28 	.word	0x2003df28
   b4f0c:	2003de60 	.word	0x2003de60
   b4f10:	2003df70 	.word	0x2003df70

000b4f14 <_Z13dataOffloaderv>:
void dataOffloader(){
   b4f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f18:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b4f1a:	f006 f83f 	bl	baf9c <_Z16_fetch_usbserialv>
   b4f1e:	4961      	ldr	r1, [pc, #388]	; (b50a4 <_Z13dataOffloaderv+0x190>)
   b4f20:	f004 fb3b 	bl	b959a <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b4f24:	4960      	ldr	r1, [pc, #384]	; (b50a8 <_Z13dataOffloaderv+0x194>)
   b4f26:	4861      	ldr	r0, [pc, #388]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4f28:	2200      	movs	r2, #0
   b4f2a:	f7ff faf9 	bl	b4520 <_ZN7FatFile4openEPKci>
   b4f2e:	b948      	cbnz	r0, b4f44 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b4f30:	4b5f      	ldr	r3, [pc, #380]	; (b50b0 <_Z13dataOffloaderv+0x19c>)
   b4f32:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b4f34:	f006 f832 	bl	baf9c <_Z16_fetch_usbserialv>
   b4f38:	495e      	ldr	r1, [pc, #376]	; (b50b4 <_Z13dataOffloaderv+0x1a0>)
}
   b4f3a:	b02d      	add	sp, #180	; 0xb4
   b4f3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b4f40:	f004 bb2b 	b.w	b959a <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b4f44:	f006 f82a 	bl	baf9c <_Z16_fetch_usbserialv>
   b4f48:	495b      	ldr	r1, [pc, #364]	; (b50b8 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b4f4a:	4d5c      	ldr	r5, [pc, #368]	; (b50bc <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b4f4c:	f004 fb25 	bl	b959a <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b4f50:	f003 fc98 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f54:	f003 fcf4 	bl	b8940 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f58:	4604      	mov	r4, r0
   b4f5a:	b948      	cbnz	r0, b4f70 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b4f5c:	f003 fc92 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f60:	4622      	mov	r2, r4
   b4f62:	4629      	mov	r1, r5
   b4f64:	f003 fd3f 	bl	b89e6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b4f68:	200a      	movs	r0, #10
   b4f6a:	f005 fbff 	bl	ba76c <delay>
    while(!BLE.connected()){
   b4f6e:	e7ef      	b.n	b4f50 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b4f70:	f006 f814 	bl	baf9c <_Z16_fetch_usbserialv>
   b4f74:	4952      	ldr	r1, [pc, #328]	; (b50c0 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4f76:	4f4d      	ldr	r7, [pc, #308]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4f78:	4d52      	ldr	r5, [pc, #328]	; (b50c4 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b4f7a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b50e8 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b4f7e:	f004 fb0c 	bl	b959a <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4f82:	2200      	movs	r2, #0
   b4f84:	4639      	mov	r1, r7
   b4f86:	4628      	mov	r0, r5
   b4f88:	f001 fbdf 	bl	b674a <_ZN7FatFile8openNextEPS_i>
   b4f8c:	b1f8      	cbz	r0, b4fce <_Z13dataOffloaderv+0xba>
   b4f8e:	f003 fc79 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f92:	f003 fcd5 	bl	b8940 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f96:	b1d0      	cbz	r0, b4fce <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b4f98:	221e      	movs	r2, #30
   b4f9a:	a901      	add	r1, sp, #4
   b4f9c:	4628      	mov	r0, r5
   b4f9e:	f000 fe38 	bl	b5c12 <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b4fa2:	f005 fffb 	bl	baf9c <_Z16_fetch_usbserialv>
   b4fa6:	4641      	mov	r1, r8
   b4fa8:	aa01      	add	r2, sp, #4
   b4faa:	f7ff f9d3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b4fae:	a801      	add	r0, sp, #4
   b4fb0:	f007 fb9f 	bl	bc6f2 <strlen>
   b4fb4:	ab01      	add	r3, sp, #4
   b4fb6:	3804      	subs	r0, #4
   b4fb8:	4418      	add	r0, r3
   b4fba:	f007 fba3 	bl	bc704 <strlwr>
   b4fbe:	4942      	ldr	r1, [pc, #264]	; (b50c8 <_Z13dataOffloaderv+0x1b4>)
   b4fc0:	f007 fbe6 	bl	bc790 <strstr>
   b4fc4:	b9d8      	cbnz	r0, b4ffe <_Z13dataOffloaderv+0xea>
            myFile.close();
   b4fc6:	4628      	mov	r0, r5
   b4fc8:	f001 fc32 	bl	b6830 <_ZN7FatFile5closeEv>
   b4fcc:	e7d9      	b.n	b4f82 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b4fce:	4837      	ldr	r0, [pc, #220]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4fd0:	f001 fc2e 	bl	b6830 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b4fd4:	2226      	movs	r2, #38	; 0x26
   b4fd6:	2100      	movs	r1, #0
   b4fd8:	a809      	add	r0, sp, #36	; 0x24
   b4fda:	f007 faff 	bl	bc5dc <memset>
    strcpy(fileCode,"filedone");
   b4fde:	493b      	ldr	r1, [pc, #236]	; (b50cc <_Z13dataOffloaderv+0x1b8>)
   b4fe0:	a809      	add	r0, sp, #36	; 0x24
   b4fe2:	f007 fb61 	bl	bc6a8 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4fe6:	2300      	movs	r3, #0
   b4fe8:	2226      	movs	r2, #38	; 0x26
   b4fea:	a909      	add	r1, sp, #36	; 0x24
   b4fec:	4838      	ldr	r0, [pc, #224]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b4fee:	f003 fb39 	bl	b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b4ff2:	4b2f      	ldr	r3, [pc, #188]	; (b50b0 <_Z13dataOffloaderv+0x19c>)
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	701a      	strb	r2, [r3, #0]
}
   b4ff8:	b02d      	add	sp, #180	; 0xb4
   b4ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b4ffe:	2226      	movs	r2, #38	; 0x26
   b5000:	2100      	movs	r1, #0
   b5002:	a809      	add	r0, sp, #36	; 0x24
   b5004:	f007 faea 	bl	bc5dc <memset>
            strcpy(fileCode,"filename");
   b5008:	4932      	ldr	r1, [pc, #200]	; (b50d4 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b500a:	4e33      	ldr	r6, [pc, #204]	; (b50d8 <_Z13dataOffloaderv+0x1c4>)
   b500c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b50d0 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b5010:	a809      	add	r0, sp, #36	; 0x24
   b5012:	f007 fb49 	bl	bc6a8 <strcpy>
            strcat(fileCode,namebuf);
   b5016:	a901      	add	r1, sp, #4
   b5018:	a809      	add	r0, sp, #36	; 0x24
   b501a:	f007 fb15 	bl	bc648 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b501e:	f005 ffbd 	bl	baf9c <_Z16_fetch_usbserialv>
   b5022:	492e      	ldr	r1, [pc, #184]	; (b50dc <_Z13dataOffloaderv+0x1c8>)
   b5024:	aa09      	add	r2, sp, #36	; 0x24
   b5026:	f7ff f995 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b502a:	2300      	movs	r3, #0
   b502c:	2226      	movs	r2, #38	; 0x26
   b502e:	a909      	add	r1, sp, #36	; 0x24
   b5030:	4827      	ldr	r0, [pc, #156]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b5032:	f003 fb17 	bl	b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5036:	f005 ffb1 	bl	baf9c <_Z16_fetch_usbserialv>
   b503a:	4929      	ldr	r1, [pc, #164]	; (b50e0 <_Z13dataOffloaderv+0x1cc>)
   b503c:	aa01      	add	r2, sp, #4
   b503e:	f7ff f989 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5042:	2096      	movs	r0, #150	; 0x96
   b5044:	f005 fb92 	bl	ba76c <delay>
            noInterrupts();
   b5048:	f005 ffce 	bl	bafe8 <_Z12noInterruptsv>
            while(myFile.available()){
   b504c:	4630      	mov	r0, r6
   b504e:	f7ff f844 	bl	b40da <_ZN4File9availableEv>
   b5052:	4604      	mov	r4, r0
   b5054:	b188      	cbz	r0, b507a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5056:	2264      	movs	r2, #100	; 0x64
   b5058:	2100      	movs	r1, #0
   b505a:	a813      	add	r0, sp, #76	; 0x4c
   b505c:	f007 fabe 	bl	bc5dc <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5060:	aa13      	add	r2, sp, #76	; 0x4c
   b5062:	2364      	movs	r3, #100	; 0x64
   b5064:	210d      	movs	r1, #13
   b5066:	4630      	mov	r0, r6
   b5068:	f004 fb05 	bl	b9676 <_ZN6Stream14readBytesUntilEcPcj>
   b506c:	2300      	movs	r3, #0
   b506e:	2264      	movs	r2, #100	; 0x64
   b5070:	a913      	add	r1, sp, #76	; 0x4c
   b5072:	4648      	mov	r0, r9
   b5074:	f003 faf6 	bl	b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5078:	e7e8      	b.n	b504c <_Z13dataOffloaderv+0x138>
            interrupts();
   b507a:	f005 ffb7 	bl	bafec <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b507e:	2226      	movs	r2, #38	; 0x26
   b5080:	4621      	mov	r1, r4
   b5082:	a809      	add	r0, sp, #36	; 0x24
   b5084:	f007 faaa 	bl	bc5dc <memset>
            strcpy(fileCode,"filecomp");
   b5088:	4916      	ldr	r1, [pc, #88]	; (b50e4 <_Z13dataOffloaderv+0x1d0>)
   b508a:	a809      	add	r0, sp, #36	; 0x24
   b508c:	f007 fb0c 	bl	bc6a8 <strcpy>
   b5090:	4623      	mov	r3, r4
   b5092:	2226      	movs	r2, #38	; 0x26
   b5094:	a909      	add	r1, sp, #36	; 0x24
   b5096:	480e      	ldr	r0, [pc, #56]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b5098:	f003 fae4 	bl	b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b509c:	2096      	movs	r0, #150	; 0x96
   b509e:	f005 fb65 	bl	ba76c <delay>
   b50a2:	e790      	b.n	b4fc6 <_Z13dataOffloaderv+0xb2>
   b50a4:	000be9dd 	.word	0x000be9dd
   b50a8:	000be9fa 	.word	0x000be9fa
   b50ac:	2003def4 	.word	0x2003def4
   b50b0:	2003e0ec 	.word	0x2003e0ec
   b50b4:	000be9fc 	.word	0x000be9fc
   b50b8:	000bea29 	.word	0x000bea29
   b50bc:	2003de68 	.word	0x2003de68
   b50c0:	000bea49 	.word	0x000bea49
   b50c4:	2003df90 	.word	0x2003df90
   b50c8:	000bea87 	.word	0x000bea87
   b50cc:	000bea8c 	.word	0x000bea8c
   b50d0:	2003e0e4 	.word	0x2003e0e4
   b50d4:	000bea95 	.word	0x000bea95
   b50d8:	2003df80 	.word	0x2003df80
   b50dc:	000bea9e 	.word	0x000bea9e
   b50e0:	000beab1 	.word	0x000beab1
   b50e4:	000bead9 	.word	0x000bead9
   b50e8:	000bea5e 	.word	0x000bea5e

000b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b50ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b50ee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b50f0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b50f2:	b17c      	cbz	r4, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b50f4:	6863      	ldr	r3, [r4, #4]
   b50f6:	3b01      	subs	r3, #1
   b50f8:	6063      	str	r3, [r4, #4]
   b50fa:	b95b      	cbnz	r3, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b50fc:	6823      	ldr	r3, [r4, #0]
   b50fe:	4620      	mov	r0, r4
   b5100:	689b      	ldr	r3, [r3, #8]
   b5102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5104:	68a3      	ldr	r3, [r4, #8]
   b5106:	3b01      	subs	r3, #1
   b5108:	60a3      	str	r3, [r4, #8]
   b510a:	b91b      	cbnz	r3, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b510c:	6823      	ldr	r3, [r4, #0]
   b510e:	4620      	mov	r0, r4
   b5110:	68db      	ldr	r3, [r3, #12]
   b5112:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5114:	4628      	mov	r0, r5
   b5116:	bd38      	pop	{r3, r4, r5, pc}

000b5118 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b511c:	b084      	sub	sp, #16
   b511e:	af02      	add	r7, sp, #8
   b5120:	4680      	mov	r8, r0
   b5122:	4691      	mov	r9, r2
   b5124:	461e      	mov	r6, r3
   b5126:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5128:	f007 fae3 	bl	bc6f2 <strlen>
   b512c:	3009      	adds	r0, #9
   b512e:	f020 0107 	bic.w	r1, r0, #7
   b5132:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5136:	4640      	mov	r0, r8
   b5138:	f007 fadb 	bl	bc6f2 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b513c:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5140:	4925      	ldr	r1, [pc, #148]	; (b51d8 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5142:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5144:	4603      	mov	r3, r0
   b5146:	4642      	mov	r2, r8
   b5148:	4620      	mov	r0, r4
   b514a:	f002 fd27 	bl	b7b9c <sprintf>
    if(sendLTE || sendMode == 4){
   b514e:	f1ba 0f00 	cmp.w	sl, #0
   b5152:	d101      	bne.n	b5158 <_Z8sendDataPKchbbb+0x40>
   b5154:	2d04      	cmp	r5, #4
   b5156:	d10c      	bne.n	b5172 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5158:	4b20      	ldr	r3, [pc, #128]	; (b51dc <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b515a:	4921      	ldr	r1, [pc, #132]	; (b51e0 <_Z8sendDataPKchbbb+0xc8>)
   b515c:	781b      	ldrb	r3, [r3, #0]
   b515e:	f88d 3000 	strb.w	r3, [sp]
   b5162:	4638      	mov	r0, r7
   b5164:	233c      	movs	r3, #60	; 0x3c
   b5166:	4622      	mov	r2, r4
   b5168:	f005 fcd2 	bl	bab10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b516c:	1d38      	adds	r0, r7, #4
   b516e:	f7ff ffbd 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5172:	f1b9 0f00 	cmp.w	r9, #0
   b5176:	d101      	bne.n	b517c <_Z8sendDataPKchbbb+0x64>
   b5178:	2d01      	cmp	r5, #1
   b517a:	d121      	bne.n	b51c0 <_Z8sendDataPKchbbb+0xa8>
   b517c:	f003 fb82 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5180:	f003 fbde 	bl	b8940 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5184:	b1e0      	cbz	r0, b51c0 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5186:	4620      	mov	r0, r4
   b5188:	f007 fab3 	bl	bc6f2 <strlen>
   b518c:	3007      	adds	r0, #7
   b518e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5192:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5194:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5198:	4620      	mov	r0, r4
   b519a:	f007 faaa 	bl	bc6f2 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b519e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b51a2:	4602      	mov	r2, r0
   b51a4:	4621      	mov	r1, r4
   b51a6:	4648      	mov	r0, r9
   b51a8:	f007 f9f0 	bl	bc58c <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b51ac:	4620      	mov	r0, r4
   b51ae:	f007 faa0 	bl	bc6f2 <strlen>
   b51b2:	2300      	movs	r3, #0
   b51b4:	4602      	mov	r2, r0
   b51b6:	4649      	mov	r1, r9
   b51b8:	480a      	ldr	r0, [pc, #40]	; (b51e4 <_Z8sendDataPKchbbb+0xcc>)
   b51ba:	f003 fa53 	bl	b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b51be:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b51c0:	b90e      	cbnz	r6, b51c6 <_Z8sendDataPKchbbb+0xae>
   b51c2:	2d02      	cmp	r5, #2
   b51c4:	d104      	bne.n	b51d0 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b51c6:	f006 fb5d 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b51ca:	4621      	mov	r1, r4
   b51cc:	f004 f9e5 	bl	b959a <_ZN5Print7printlnEPKc>
}
   b51d0:	3708      	adds	r7, #8
   b51d2:	46bd      	mov	sp, r7
   b51d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b51d8:	000beae2 	.word	0x000beae2
   b51dc:	2003de64 	.word	0x2003de64
   b51e0:	000beae9 	.word	0x000beae9
   b51e4:	2003e5d8 	.word	0x2003e5d8

000b51e8 <_Z16sendResponseDatav>:
void sendResponseData(){
   b51e8:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b51ea:	4d27      	ldr	r5, [pc, #156]	; (b5288 <_Z16sendResponseDatav+0xa0>)
   b51ec:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b51ee:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b51f0:	2b00      	cmp	r3, #0
   b51f2:	d046      	beq.n	b5282 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b51f4:	2241      	movs	r2, #65	; 0x41
   b51f6:	2100      	movs	r1, #0
   b51f8:	a80b      	add	r0, sp, #44	; 0x2c
   b51fa:	f007 f9ef 	bl	bc5dc <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b51fe:	4b23      	ldr	r3, [pc, #140]	; (b528c <_Z16sendResponseDatav+0xa4>)
   b5200:	9308      	str	r3, [sp, #32]
   b5202:	4b23      	ldr	r3, [pc, #140]	; (b5290 <_Z16sendResponseDatav+0xa8>)
   b5204:	eddf 6a23 	vldr	s13, [pc, #140]	; b5294 <_Z16sendResponseDatav+0xac>
   b5208:	ed93 7a00 	vldr	s14, [r3]
   b520c:	4b22      	ldr	r3, [pc, #136]	; (b5298 <_Z16sendResponseDatav+0xb0>)
   b520e:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b5212:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5214:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5218:	ed8d 7a07 	vstr	s14, [sp, #28]
   b521c:	ed93 7a00 	vldr	s14, [r3]
   b5220:	4b1e      	ldr	r3, [pc, #120]	; (b529c <_Z16sendResponseDatav+0xb4>)
   b5222:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5226:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b522a:	ed8d 7a06 	vstr	s14, [sp, #24]
   b522e:	ed93 7a00 	vldr	s14, [r3]
   b5232:	4b1b      	ldr	r3, [pc, #108]	; (b52a0 <_Z16sendResponseDatav+0xb8>)
   b5234:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5238:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b523c:	ed8d 7a05 	vstr	s14, [sp, #20]
   b5240:	edd3 7a00 	vldr	s15, [r3]
   b5244:	4b17      	ldr	r3, [pc, #92]	; (b52a4 <_Z16sendResponseDatav+0xbc>)
   b5246:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b524a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b524e:	edcd 7a04 	vstr	s15, [sp, #16]
   b5252:	6818      	ldr	r0, [r3, #0]
   b5254:	f006 fdf4 	bl	bbe40 <__aeabi_f2d>
   b5258:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b525c:	4b12      	ldr	r3, [pc, #72]	; (b52a8 <_Z16sendResponseDatav+0xc0>)
   b525e:	6818      	ldr	r0, [r3, #0]
   b5260:	f006 fdee 	bl	bbe40 <__aeabi_f2d>
   b5264:	2201      	movs	r2, #1
   b5266:	e9cd 0100 	strd	r0, r1, [sp]
   b526a:	4910      	ldr	r1, [pc, #64]	; (b52ac <_Z16sendResponseDatav+0xc4>)
   b526c:	a80b      	add	r0, sp, #44	; 0x2c
   b526e:	f002 fc95 	bl	b7b9c <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5272:	7829      	ldrb	r1, [r5, #0]
   b5274:	9400      	str	r4, [sp, #0]
   b5276:	4623      	mov	r3, r4
   b5278:	4622      	mov	r2, r4
   b527a:	a80b      	add	r0, sp, #44	; 0x2c
   b527c:	f7ff ff4c 	bl	b5118 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5280:	702c      	strb	r4, [r5, #0]
}
   b5282:	b01d      	add	sp, #116	; 0x74
   b5284:	bd30      	pop	{r4, r5, pc}
   b5286:	bf00      	nop
   b5288:	2003e0ed 	.word	0x2003e0ed
   b528c:	00010d88 	.word	0x00010d88
   b5290:	2003e584 	.word	0x2003e584
   b5294:	447a0000 	.word	0x447a0000
   b5298:	2003e57c 	.word	0x2003e57c
   b529c:	2003e588 	.word	0x2003e588
   b52a0:	2003e580 	.word	0x2003e580
   b52a4:	2003df74 	.word	0x2003df74
   b52a8:	2003dec0 	.word	0x2003dec0
   b52ac:	000beaf1 	.word	0x000beaf1

000b52b0 <_Z12statusUpdatev>:
void statusUpdate(){
   b52b0:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b52b2:	4e2c      	ldr	r6, [pc, #176]	; (b5364 <_Z12statusUpdatev+0xb4>)
   b52b4:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b52b6:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b52b8:	2b00      	cmp	r3, #0
   b52ba:	d049      	beq.n	b5350 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b52bc:	4a2a      	ldr	r2, [pc, #168]	; (b5368 <_Z12statusUpdatev+0xb8>)
   b52be:	4b2b      	ldr	r3, [pc, #172]	; (b536c <_Z12statusUpdatev+0xbc>)
   b52c0:	6810      	ldr	r0, [r2, #0]
   b52c2:	781b      	ldrb	r3, [r3, #0]
   b52c4:	9307      	str	r3, [sp, #28]
   b52c6:	f006 fdbb 	bl	bbe40 <__aeabi_f2d>
   b52ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b52ce:	4a28      	ldr	r2, [pc, #160]	; (b5370 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b52d0:	4c28      	ldr	r4, [pc, #160]	; (b5374 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b52d2:	6810      	ldr	r0, [r2, #0]
   b52d4:	f006 fdb4 	bl	bbe40 <__aeabi_f2d>
   b52d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b52dc:	4a26      	ldr	r2, [pc, #152]	; (b5378 <_Z12statusUpdatev+0xc8>)
   b52de:	9b07      	ldr	r3, [sp, #28]
   b52e0:	7812      	ldrb	r2, [r2, #0]
   b52e2:	4926      	ldr	r1, [pc, #152]	; (b537c <_Z12statusUpdatev+0xcc>)
   b52e4:	9200      	str	r2, [sp, #0]
   b52e6:	a809      	add	r0, sp, #36	; 0x24
   b52e8:	2201      	movs	r2, #1
   b52ea:	f002 fc57 	bl	b7b9c <sprintf>
        Serial.println(updateStr);
   b52ee:	f005 fe55 	bl	baf9c <_Z16_fetch_usbserialv>
   b52f2:	a909      	add	r1, sp, #36	; 0x24
   b52f4:	f004 f951 	bl	b959a <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b52f8:	f005 fe50 	bl	baf9c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b52fc:	8821      	ldrh	r1, [r4, #0]
   b52fe:	4605      	mov	r5, r0
   b5300:	220a      	movs	r2, #10
   b5302:	f004 f954 	bl	b95ae <_ZN5Print11printNumberEmh>
        n += println();
   b5306:	4628      	mov	r0, r5
   b5308:	f004 f93b 	bl	b9582 <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b530c:	4b1c      	ldr	r3, [pc, #112]	; (b5380 <_Z12statusUpdatev+0xd0>)
   b530e:	781b      	ldrb	r3, [r3, #0]
   b5310:	bb03      	cbnz	r3, b5354 <_Z12statusUpdatev+0xa4>
   b5312:	4b1c      	ldr	r3, [pc, #112]	; (b5384 <_Z12statusUpdatev+0xd4>)
   b5314:	781b      	ldrb	r3, [r3, #0]
   b5316:	b9eb      	cbnz	r3, b5354 <_Z12statusUpdatev+0xa4>
   b5318:	8823      	ldrh	r3, [r4, #0]
   b531a:	b1f3      	cbz	r3, b535a <_Z12statusUpdatev+0xaa>
   b531c:	f013 0303 	ands.w	r3, r3, #3
   b5320:	d11b      	bne.n	b535a <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5322:	2201      	movs	r2, #1
   b5324:	9200      	str	r2, [sp, #0]
   b5326:	4619      	mov	r1, r3
   b5328:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b532a:	a809      	add	r0, sp, #36	; 0x24
   b532c:	f7ff fef4 	bl	b5118 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5330:	8823      	ldrh	r3, [r4, #0]
   b5332:	b10b      	cbz	r3, b5338 <_Z12statusUpdatev+0x88>
   b5334:	3b01      	subs	r3, #1
   b5336:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5338:	2400      	movs	r4, #0
        delay(100);
   b533a:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b533c:	7034      	strb	r4, [r6, #0]
        delay(100);
   b533e:	f005 fa15 	bl	ba76c <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b5342:	4811      	ldr	r0, [pc, #68]	; (b5388 <_Z12statusUpdatev+0xd8>)
   b5344:	9400      	str	r4, [sp, #0]
   b5346:	4623      	mov	r3, r4
   b5348:	2201      	movs	r2, #1
   b534a:	4621      	mov	r1, r4
   b534c:	f7ff fee4 	bl	b5118 <_Z8sendDataPKchbbb>
}
   b5350:	b010      	add	sp, #64	; 0x40
   b5352:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5354:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5358:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b535a:	2100      	movs	r1, #0
   b535c:	2301      	movs	r3, #1
   b535e:	9100      	str	r1, [sp, #0]
   b5360:	461a      	mov	r2, r3
   b5362:	e7e2      	b.n	b532a <_Z12statusUpdatev+0x7a>
   b5364:	2003e5d4 	.word	0x2003e5d4
   b5368:	2003df74 	.word	0x2003df74
   b536c:	2003de74 	.word	0x2003de74
   b5370:	2003dec0 	.word	0x2003dec0
   b5374:	2003de4e 	.word	0x2003de4e
   b5378:	2003e5b4 	.word	0x2003e5b4
   b537c:	000beb15 	.word	0x000beb15
   b5380:	2003de1c 	.word	0x2003de1c
   b5384:	2003de5c 	.word	0x2003de5c
   b5388:	000beb2e 	.word	0x000beb2e

000b538c <loop>:
void loop(){
   b538c:	b508      	push	{r3, lr}
    sensorHandler();
   b538e:	f7ff fbb3 	bl	b4af8 <_Z13sensorHandlerv>
    XBeeHandler();
   b5392:	f7ff fd35 	bl	b4e00 <_Z11XBeeHandlerv>
    statusUpdate();
   b5396:	f7ff ff8b 	bl	b52b0 <_Z12statusUpdatev>
    updateMotors();
   b539a:	f7ff fb8f 	bl	b4abc <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b539e:	4b06      	ldr	r3, [pc, #24]	; (b53b8 <loop+0x2c>)
   b53a0:	781b      	ldrb	r3, [r3, #0]
   b53a2:	b10b      	cbz	r3, b53a8 <loop+0x1c>
   b53a4:	f7ff fdb6 	bl	b4f14 <_Z13dataOffloaderv>
    sendResponseData();
   b53a8:	f7ff ff1e 	bl	b51e8 <_Z16sendResponseDatav>
}
   b53ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(100);
   b53b0:	2064      	movs	r0, #100	; 0x64
   b53b2:	f005 b9db 	b.w	ba76c <delay>
   b53b6:	bf00      	nop
   b53b8:	2003e0ec 	.word	0x2003e0ec

000b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b53be:	e9d0 5300 	ldrd	r5, r3, [r0]
   b53c2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b53c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b53ca:	42ae      	cmp	r6, r5
   b53cc:	d004      	beq.n	b53d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b53ce:	4628      	mov	r0, r5
   b53d0:	f002 fe2a 	bl	b8028 <_ZN6StringD1Ev>
   b53d4:	3514      	adds	r5, #20
   b53d6:	e7f8      	b.n	b53ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b53d8:	6820      	ldr	r0, [r4, #0]
   b53da:	f002 fbcf 	bl	b7b7c <free>
    AllocatorT::free(data_);
}
   b53de:	4620      	mov	r0, r4
   b53e0:	bd70      	pop	{r4, r5, r6, pc}

000b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b53e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53e4:	4616      	mov	r6, r2
   b53e6:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b53e8:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b53ea:	e9c0 2200 	strd	r2, r2, [r0]
   b53ee:	4604      	mov	r4, r0
   b53f0:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b53f2:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b53f4:	4619      	mov	r1, r3
   b53f6:	a804      	add	r0, sp, #16
   b53f8:	f003 f8f6 	bl	b85e8 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b53fc:	9914      	ldr	r1, [sp, #80]	; 0x50
   b53fe:	4638      	mov	r0, r7
   b5400:	f003 f8f2 	bl	b85e8 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5404:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5406:	9302      	str	r3, [sp, #8]
   b5408:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b540a:	4620      	mov	r0, r4
   b540c:	e9cd 7300 	strd	r7, r3, [sp]
   b5410:	4632      	mov	r2, r6
   b5412:	ab04      	add	r3, sp, #16
   b5414:	4629      	mov	r1, r5
   b5416:	f003 fe5d 	bl	b90d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b541a:	4620      	mov	r0, r4
   b541c:	b00f      	add	sp, #60	; 0x3c
   b541e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5420:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5422:	4c0b      	ldr	r4, [pc, #44]	; (b5450 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5424:	7821      	ldrb	r1, [r4, #0]
   b5426:	f3bf 8f5b 	dmb	ish
   b542a:	f011 0101 	ands.w	r1, r1, #1
   b542e:	d10b      	bne.n	b5448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5430:	4620      	mov	r0, r4
   b5432:	9101      	str	r1, [sp, #4]
   b5434:	f7fe fe42 	bl	b40bc <__cxa_guard_acquire>
   b5438:	9901      	ldr	r1, [sp, #4]
   b543a:	b128      	cbz	r0, b5448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b543c:	4805      	ldr	r0, [pc, #20]	; (b5454 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b543e:	f002 fc61 	bl	b7d04 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5442:	4620      	mov	r0, r4
   b5444:	f7fe fe3f 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b5448:	4802      	ldr	r0, [pc, #8]	; (b5454 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b544a:	b002      	add	sp, #8
   b544c:	bd10      	pop	{r4, pc}
   b544e:	bf00      	nop
   b5450:	2003de10 	.word	0x2003de10
   b5454:	2003de14 	.word	0x2003de14

000b5458 <_Z8setupSPIv>:
void setupSPI(){
   b5458:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b545a:	f7ff ffe1 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b545e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5462:	2100      	movs	r1, #0
   b5464:	f002 fc6c 	bl	b7d40 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5468:	f7ff ffda 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b546c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5470:	4901      	ldr	r1, [pc, #4]	; (b5478 <_Z8setupSPIv+0x20>)
   b5472:	2201      	movs	r2, #1
   b5474:	f002 bd02 	b.w	b7e7c <_ZN8SPIClass13setClockSpeedEjj>
   b5478:	000f4240 	.word	0x000f4240

000b547c <setup>:
void setup(){
   b547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5480:	48ae      	ldr	r0, [pc, #696]	; (b573c <setup+0x2c0>)
    setLSpeed = 90;
   b5482:	4eaf      	ldr	r6, [pc, #700]	; (b5740 <setup+0x2c4>)
   b5484:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b5486:	4daf      	ldr	r5, [pc, #700]	; (b5744 <setup+0x2c8>)
   b5488:	f003 0303 	and.w	r3, r3, #3
   b548c:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5490:	b093      	sub	sp, #76	; 0x4c
   b5492:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5494:	2200      	movs	r2, #0
   b5496:	2101      	movs	r1, #1
   b5498:	3004      	adds	r0, #4
   b549a:	f002 fa81 	bl	b79a0 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b549e:	2101      	movs	r1, #1
   b54a0:	2002      	movs	r0, #2
   b54a2:	f006 f9a9 	bl	bb7f8 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b54a6:	2100      	movs	r1, #0
   b54a8:	2002      	movs	r0, #2
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54aa:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);
   b54ac:	f006 f9b5 	bl	bb81a <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54b0:	27b4      	movs	r7, #180	; 0xb4
   b54b2:	f001 fff3 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b54b6:	235a      	movs	r3, #90	; 0x5a
   b54b8:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b54ba:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b54c0:	e9cd 4700 	strd	r4, r7, [sp]
   b54c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b54c8:	2106      	movs	r1, #6
   b54ca:	489f      	ldr	r0, [pc, #636]	; (b5748 <setup+0x2cc>)
   b54cc:	f002 fd6e 	bl	b7fac <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b54d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b54d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b54d8:	e9cd 4700 	strd	r4, r7, [sp]
   b54dc:	2105      	movs	r1, #5
   b54de:	489b      	ldr	r0, [pc, #620]	; (b574c <setup+0x2d0>)
    logSensors = true;
   b54e0:	4f9b      	ldr	r7, [pc, #620]	; (b5750 <setup+0x2d4>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b54e2:	f002 fd63 	bl	b7fac <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b54e6:	7831      	ldrb	r1, [r6, #0]
   b54e8:	4897      	ldr	r0, [pc, #604]	; (b5748 <setup+0x2cc>)
    logMessages = true;
   b54ea:	4e9a      	ldr	r6, [pc, #616]	; (b5754 <setup+0x2d8>)
    ESCL.write(setLSpeed);
   b54ec:	f002 fd22 	bl	b7f34 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b54f0:	7829      	ldrb	r1, [r5, #0]
   b54f2:	4896      	ldr	r0, [pc, #600]	; (b574c <setup+0x2d0>)
   b54f4:	f002 fd1e 	bl	b7f34 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b54f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b54fc:	f005 f936 	bl	ba76c <delay>
    BLE.on();
   b5500:	f003 f9c0 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5504:	f003 fa08 	bl	b8918 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5508:	f003 f9bc 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b550c:	2108      	movs	r1, #8
   b550e:	f003 fa0a 	bl	b8926 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b5512:	f005 fd43 	bl	baf9c <_Z16_fetch_usbserialv>
   b5516:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b551a:	f005 fd2f 	bl	baf7c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b551e:	f006 f9b1 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b5522:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5526:	f005 fe05 	bl	bb134 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b552a:	f7ff ff95 	bl	b5458 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b552e:	f7ff fa97 	bl	b4a60 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b5532:	f7ff faad 	bl	b4a90 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b5536:	f7ff fa7f 	bl	b4a38 <_Z8setupLTEv>
    manualRC = true;
   b553a:	4b87      	ldr	r3, [pc, #540]	; (b5758 <setup+0x2dc>)
   b553c:	2501      	movs	r5, #1
   b553e:	701d      	strb	r5, [r3, #0]
   b5540:	f001 ffac 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b5544:	4b85      	ldr	r3, [pc, #532]	; (b575c <setup+0x2e0>)
   b5546:	6018      	str	r0, [r3, #0]
   b5548:	f001 ffa8 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b554c:	4b84      	ldr	r3, [pc, #528]	; (b5760 <setup+0x2e4>)
   b554e:	6018      	str	r0, [r3, #0]
   b5550:	f001 ffa4 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5554:	4b83      	ldr	r3, [pc, #524]	; (b5764 <setup+0x2e8>)
    logSensors = true;
   b5556:	703d      	strb	r5, [r7, #0]
    lastStatusTime = millis();
   b5558:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b555a:	4b83      	ldr	r3, [pc, #524]	; (b5768 <setup+0x2ec>)
    logMessages = true;
   b555c:	7035      	strb	r5, [r6, #0]
    XBeeRxTime = 0;
   b555e:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5560:	4b82      	ldr	r3, [pc, #520]	; (b576c <setup+0x2f0>)
   b5562:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5564:	4b82      	ldr	r3, [pc, #520]	; (b5770 <setup+0x2f4>)
   b5566:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5568:	4b82      	ldr	r3, [pc, #520]	; (b5774 <setup+0x2f8>)
   b556a:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b556c:	4b82      	ldr	r3, [pc, #520]	; (b5778 <setup+0x2fc>)
   b556e:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5570:	4b82      	ldr	r3, [pc, #520]	; (b577c <setup+0x300>)
   b5572:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5576:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5578:	4b81      	ldr	r3, [pc, #516]	; (b5780 <setup+0x304>)
   b557a:	2232      	movs	r2, #50	; 0x32
   b557c:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b557e:	f003 f981 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5582:	4a80      	ldr	r2, [pc, #512]	; (b5784 <setup+0x308>)
   b5584:	4601      	mov	r1, r0
   b5586:	a80d      	add	r0, sp, #52	; 0x34
   b5588:	f003 fece 	bl	b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b558c:	a80d      	add	r0, sp, #52	; 0x34
   b558e:	f003 fa7e 	bl	b8a8e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5592:	f003 f977 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5596:	4a7c      	ldr	r2, [pc, #496]	; (b5788 <setup+0x30c>)
   b5598:	4601      	mov	r1, r0
   b559a:	a80d      	add	r0, sp, #52	; 0x34
   b559c:	f003 fec4 	bl	b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55a0:	a80d      	add	r0, sp, #52	; 0x34
   b55a2:	f003 fa74 	bl	b8a8e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b55a6:	f003 f96d 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55aa:	4a78      	ldr	r2, [pc, #480]	; (b578c <setup+0x310>)
   b55ac:	4601      	mov	r1, r0
   b55ae:	a80d      	add	r0, sp, #52	; 0x34
   b55b0:	f003 feba 	bl	b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55b4:	a80d      	add	r0, sp, #52	; 0x34
   b55b6:	f003 fa6a 	bl	b8a8e <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b55ba:	4b75      	ldr	r3, [pc, #468]	; (b5790 <setup+0x314>)
   b55bc:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b55be:	4b75      	ldr	r3, [pc, #468]	; (b5794 <setup+0x318>)
        BleUuid tempUUID(uuid);
   b55c0:	a80d      	add	r0, sp, #52	; 0x34
   b55c2:	6819      	ldr	r1, [r3, #0]
   b55c4:	f003 f810 	bl	b85e8 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55c8:	a80d      	add	r0, sp, #52	; 0x34
   b55ca:	f002 ff6f 	bl	b84ac <_ZNK8particle7BleUuid4typeEv>
   b55ce:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b55d0:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55d2:	2d00      	cmp	r5, #0
   b55d4:	f040 8084 	bne.w	b56e0 <setup+0x264>
            uint16_t uuid16 = tempUUID.shorted();
   b55d8:	f002 ff84 	bl	b84e4 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55dc:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b55de:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55e2:	2302      	movs	r3, #2
   b55e4:	aa09      	add	r2, sp, #36	; 0x24
   b55e6:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b55e8:	486b      	ldr	r0, [pc, #428]	; (b5798 <setup+0x31c>)
   b55ea:	f003 fb7b 	bl	b8ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b55ee:	2300      	movs	r3, #0
   b55f0:	4967      	ldr	r1, [pc, #412]	; (b5790 <setup+0x314>)
   b55f2:	4869      	ldr	r0, [pc, #420]	; (b5798 <setup+0x31c>)
   b55f4:	2208      	movs	r2, #8
   b55f6:	f003 fb93 	bl	b8d20 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b55fa:	f003 f943 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55fe:	2200      	movs	r2, #0
   b5600:	4965      	ldr	r1, [pc, #404]	; (b5798 <setup+0x31c>)
   b5602:	f003 f9f0 	bl	b89e6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5606:	f006 f979 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b560a:	f005 fdef 	bl	bb1ec <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b560e:	f006 f975 	bl	bb8fc <_Z19__fetch_global_Wirev>
   b5612:	4962      	ldr	r1, [pc, #392]	; (b579c <setup+0x320>)
   b5614:	f005 fde6 	bl	bb1e4 <_ZN7TwoWire8setSpeedEm>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5618:	f005 f87e 	bl	ba718 <_ZN9TimeClass5monthEv>
   b561c:	9007      	str	r0, [sp, #28]
   b561e:	f005 f86f 	bl	ba700 <_ZN9TimeClass3dayEv>
   b5622:	4604      	mov	r4, r0
   b5624:	f005 f880 	bl	ba728 <_ZN9TimeClass4yearEv>
   b5628:	4605      	mov	r5, r0
   b562a:	f005 f845 	bl	ba6b8 <_ZN9TimeClass4hourEv>
   b562e:	4680      	mov	r8, r0
   b5630:	f005 f84e 	bl	ba6d0 <_ZN9TimeClass6minuteEv>
   b5634:	4681      	mov	r9, r0
   b5636:	f005 f857 	bl	ba6e8 <_ZN9TimeClass6secondEv>
   b563a:	9b07      	ldr	r3, [sp, #28]
   b563c:	4a58      	ldr	r2, [pc, #352]	; (b57a0 <setup+0x324>)
   b563e:	9400      	str	r4, [sp, #0]
   b5640:	e9cd 9003 	strd	r9, r0, [sp, #12]
   b5644:	2110      	movs	r1, #16
   b5646:	e9cd 5801 	strd	r5, r8, [sp, #4]
   b564a:	a809      	add	r0, sp, #36	; 0x24
   b564c:	f002 faae 	bl	b7bac <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5650:	4954      	ldr	r1, [pc, #336]	; (b57a4 <setup+0x328>)
   b5652:	4855      	ldr	r0, [pc, #340]	; (b57a8 <setup+0x32c>)
   b5654:	f007 f828 	bl	bc6a8 <strcpy>
    strcat(filename,timestamp);
   b5658:	a909      	add	r1, sp, #36	; 0x24
   b565a:	4853      	ldr	r0, [pc, #332]	; (b57a8 <setup+0x32c>)
   b565c:	f006 fff4 	bl	bc648 <strcat>
    strcpy(filenameMessages,filename);
   b5660:	4951      	ldr	r1, [pc, #324]	; (b57a8 <setup+0x32c>)
   b5662:	4852      	ldr	r0, [pc, #328]	; (b57ac <setup+0x330>)
   b5664:	f007 f820 	bl	bc6a8 <strcpy>
    strcat(filename,".csv");
   b5668:	4951      	ldr	r1, [pc, #324]	; (b57b0 <setup+0x334>)
   b566a:	484f      	ldr	r0, [pc, #316]	; (b57a8 <setup+0x32c>)
   b566c:	f006 ffec 	bl	bc648 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5670:	4950      	ldr	r1, [pc, #320]	; (b57b4 <setup+0x338>)
   b5672:	484e      	ldr	r0, [pc, #312]	; (b57ac <setup+0x330>)
   b5674:	f006 ffe8 	bl	bc648 <strcat>
    Serial.println(filename);
   b5678:	f005 fc90 	bl	baf9c <_Z16_fetch_usbserialv>
   b567c:	494a      	ldr	r1, [pc, #296]	; (b57a8 <setup+0x32c>)
   b567e:	f003 ff8c 	bl	b959a <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5682:	f005 fc8b 	bl	baf9c <_Z16_fetch_usbserialv>
   b5686:	4949      	ldr	r1, [pc, #292]	; (b57ac <setup+0x330>)
   b5688:	f003 ff87 	bl	b959a <_ZN5Print7printlnEPKc>
    watchdog.start();
   b568c:	484a      	ldr	r0, [pc, #296]	; (b57b8 <setup+0x33c>)
   b568e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5692:	f7fe fe0f 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5696:	4849      	ldr	r0, [pc, #292]	; (b57bc <setup+0x340>)
   b5698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b569c:	f7fe fe0a 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b56a0:	4847      	ldr	r0, [pc, #284]	; (b57c0 <setup+0x344>)
   b56a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b56a6:	f7fe fe05 	bl	b42b4 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b56aa:	4b46      	ldr	r3, [pc, #280]	; (b57c4 <setup+0x348>)
   b56ac:	930d      	str	r3, [sp, #52]	; 0x34
   b56ae:	2300      	movs	r3, #0
   b56b0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   b56b4:	4b44      	ldr	r3, [pc, #272]	; (b57c8 <setup+0x34c>)
   b56b6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b56b8:	4844      	ldr	r0, [pc, #272]	; (b57cc <setup+0x350>)
   b56ba:	2301      	movs	r3, #1
   b56bc:	aa0d      	add	r2, sp, #52	; 0x34
   b56be:	2108      	movs	r1, #8
   b56c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   b56c4:	f7fe ffa0 	bl	b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b56c8:	4604      	mov	r4, r0
   b56ca:	b980      	cbnz	r0, b56ee <setup+0x272>
        Serial.println("Error: could not connect to SD card!");
   b56cc:	f005 fc66 	bl	baf9c <_Z16_fetch_usbserialv>
   b56d0:	493f      	ldr	r1, [pc, #252]	; (b57d0 <setup+0x354>)
   b56d2:	f003 ff62 	bl	b959a <_ZN5Print7printlnEPKc>
        logSensors = false;
   b56d6:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b56d8:	7034      	strb	r4, [r6, #0]
}
   b56da:	b013      	add	sp, #76	; 0x4c
   b56dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b56e0:	f002 ff02 	bl	b84e8 <_ZNK8particle7BleUuid8rawBytesEv>
   b56e4:	9400      	str	r4, [sp, #0]
   b56e6:	4602      	mov	r2, r0
   b56e8:	2310      	movs	r3, #16
   b56ea:	2107      	movs	r1, #7
   b56ec:	e77c      	b.n	b55e8 <setup+0x16c>
    if(logSensors){
   b56ee:	783b      	ldrb	r3, [r7, #0]
   b56f0:	b17b      	cbz	r3, b5712 <setup+0x296>
   b56f2:	4838      	ldr	r0, [pc, #224]	; (b57d4 <setup+0x358>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b56f4:	7c03      	ldrb	r3, [r0, #16]
   b56f6:	b92b      	cbnz	r3, b5704 <setup+0x288>
   b56f8:	492b      	ldr	r1, [pc, #172]	; (b57a8 <setup+0x32c>)
   b56fa:	f244 2202 	movw	r2, #16898	; 0x4202
   b56fe:	3010      	adds	r0, #16
   b5700:	f7fe ff0e 	bl	b4520 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5704:	4934      	ldr	r1, [pc, #208]	; (b57d8 <setup+0x35c>)
   b5706:	4833      	ldr	r0, [pc, #204]	; (b57d4 <setup+0x358>)
   b5708:	f003 ff47 	bl	b959a <_ZN5Print7printlnEPKc>
        myFile.close();
   b570c:	4833      	ldr	r0, [pc, #204]	; (b57dc <setup+0x360>)
   b570e:	f001 f88f 	bl	b6830 <_ZN7FatFile5closeEv>
    if(logMessages){
   b5712:	7833      	ldrb	r3, [r6, #0]
   b5714:	2b00      	cmp	r3, #0
   b5716:	d0e0      	beq.n	b56da <setup+0x25e>
   b5718:	4831      	ldr	r0, [pc, #196]	; (b57e0 <setup+0x364>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b571a:	7c03      	ldrb	r3, [r0, #16]
   b571c:	b92b      	cbnz	r3, b572a <setup+0x2ae>
   b571e:	4923      	ldr	r1, [pc, #140]	; (b57ac <setup+0x330>)
   b5720:	f244 2202 	movw	r2, #16898	; 0x4202
   b5724:	3010      	adds	r0, #16
   b5726:	f7fe fefb 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b572a:	492e      	ldr	r1, [pc, #184]	; (b57e4 <setup+0x368>)
   b572c:	482c      	ldr	r0, [pc, #176]	; (b57e0 <setup+0x364>)
   b572e:	2201      	movs	r2, #1
   b5730:	f7fe fe10 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5734:	482c      	ldr	r0, [pc, #176]	; (b57e8 <setup+0x36c>)
   b5736:	f001 f87b 	bl	b6830 <_ZN7FatFile5closeEv>
}
   b573a:	e7ce      	b.n	b56da <setup+0x25e>
   b573c:	2003e594 	.word	0x2003e594
   b5740:	2003e590 	.word	0x2003e590
   b5744:	2003e591 	.word	0x2003e591
   b5748:	2003de2c 	.word	0x2003de2c
   b574c:	2003de3c 	.word	0x2003de3c
   b5750:	2003df71 	.word	0x2003df71
   b5754:	2003df70 	.word	0x2003df70
   b5758:	2003df7d 	.word	0x2003df7d
   b575c:	2003e58c 	.word	0x2003e58c
   b5760:	2003de78 	.word	0x2003de78
   b5764:	2003debc 	.word	0x2003debc
   b5768:	2003de60 	.word	0x2003de60
   b576c:	2003de28 	.word	0x2003de28
   b5770:	2003de7c 	.word	0x2003de7c
   b5774:	2003e0ec 	.word	0x2003e0ec
   b5778:	2003e0ed 	.word	0x2003e0ed
   b577c:	2003de4e 	.word	0x2003de4e
   b5780:	2003de74 	.word	0x2003de74
   b5784:	2003e5d8 	.word	0x2003e5d8
   b5788:	2003e0f0 	.word	0x2003e0f0
   b578c:	2003e0e4 	.word	0x2003e0e4
   b5790:	2003de1d 	.word	0x2003de1d
   b5794:	2003dc1c 	.word	0x2003dc1c
   b5798:	2003de68 	.word	0x2003de68
   b579c:	00061a80 	.word	0x00061a80
   b57a0:	000be979 	.word	0x000be979
   b57a4:	000beb3c 	.word	0x000beb3c
   b57a8:	2003de7d 	.word	0x2003de7d
   b57ac:	2003de9b 	.word	0x2003de9b
   b57b0:	000bea87 	.word	0x000bea87
   b57b4:	000beb45 	.word	0x000beb45
   b57b8:	2003e5e4 	.word	0x2003e5e4
   b57bc:	2003dec8 	.word	0x2003dec8
   b57c0:	2003e5b8 	.word	0x2003e5b8
   b57c4:	000bec00 	.word	0x000bec00
   b57c8:	007a1200 	.word	0x007a1200
   b57cc:	2003e0f8 	.word	0x2003e0f8
   b57d0:	000beb4e 	.word	0x000beb4e
   b57d4:	2003df80 	.word	0x2003df80
   b57d8:	000beb73 	.word	0x000beb73
   b57dc:	2003df90 	.word	0x2003df90
   b57e0:	2003df18 	.word	0x2003df18
   b57e4:	000bebc9 	.word	0x000bebc9
   b57e8:	2003df28 	.word	0x2003df28

000b57ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b57ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b57ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	460d      	mov	r5, r1
   b57f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b57f6:	d916      	bls.n	b5826 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b57f8:	4290      	cmp	r0, r2
   b57fa:	d215      	bcs.n	b5828 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b57fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5800:	1a75      	subs	r5, r6, r1
   b5802:	f1a1 0714 	sub.w	r7, r1, #20
   b5806:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5808:	42b7      	cmp	r7, r6
   b580a:	d01c      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b580c:	b12c      	cbz	r4, b581a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b580e:	4631      	mov	r1, r6
   b5810:	4620      	mov	r0, r4
   b5812:	f002 fc85 	bl	b8120 <_ZN6StringC1EOS_>
   b5816:	7c33      	ldrb	r3, [r6, #16]
   b5818:	7423      	strb	r3, [r4, #16]
   b581a:	4630      	mov	r0, r6
   b581c:	f002 fc04 	bl	b8028 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5820:	3e14      	subs	r6, #20
   b5822:	3c14      	subs	r4, #20
   b5824:	e7f0      	b.n	b5808 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5826:	d00e      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5828:	42b5      	cmp	r5, r6
   b582a:	d00c      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b582c:	b12c      	cbz	r4, b583a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b582e:	4629      	mov	r1, r5
   b5830:	4620      	mov	r0, r4
   b5832:	f002 fc75 	bl	b8120 <_ZN6StringC1EOS_>
   b5836:	7c2b      	ldrb	r3, [r5, #16]
   b5838:	7423      	strb	r3, [r4, #16]
   b583a:	4628      	mov	r0, r5
   b583c:	f002 fbf4 	bl	b8028 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5840:	3514      	adds	r5, #20
   b5842:	3414      	adds	r4, #20
   b5844:	e7f0      	b.n	b5828 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b584c:	2300      	movs	r3, #0
   b584e:	e9c0 3300 	strd	r3, r3, [r0]
   b5852:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5854:	684f      	ldr	r7, [r1, #4]
   b5856:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5858:	4604      	mov	r4, r0
   b585a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b585c:	dd23      	ble.n	b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b585e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5862:	fb08 f007 	mul.w	r0, r8, r7
   b5866:	f002 f981 	bl	b7b6c <malloc>
            if (!d) {
   b586a:	4605      	mov	r5, r0
   b586c:	b1d8      	cbz	r0, b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b586e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5872:	fb08 1202 	mla	r2, r8, r2, r1
   b5876:	f7ff ffb9 	bl	b57ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b587a:	6820      	ldr	r0, [r4, #0]
   b587c:	f002 f97e 	bl	b7b7c <free>
        data_ = d;
   b5880:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5882:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5884:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5888:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b588c:	45b8      	cmp	r8, r7
   b588e:	d008      	beq.n	b58a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5890:	4639      	mov	r1, r7
   b5892:	4628      	mov	r0, r5
   b5894:	f002 fc5e 	bl	b8154 <_ZN6StringC1ERKS_>
   b5898:	7c3b      	ldrb	r3, [r7, #16]
   b589a:	742b      	strb	r3, [r5, #16]
   b589c:	3714      	adds	r7, #20
   b589e:	3514      	adds	r5, #20
   b58a0:	e7f4      	b.n	b588c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b58a2:	6873      	ldr	r3, [r6, #4]
   b58a4:	6063      	str	r3, [r4, #4]
}
   b58a6:	4620      	mov	r0, r4
   b58a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b58ac <_GLOBAL__sub_I_SystemMode>:
   b58ac:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b58ae:	4b73      	ldr	r3, [pc, #460]	; (b5a7c <_GLOBAL__sub_I_SystemMode+0x1d0>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b58b0:	4a73      	ldr	r2, [pc, #460]	; (b5a80 <_GLOBAL__sub_I_SystemMode+0x1d4>)
  explicit SdFat(SPIClass* spiPort) {
   b58b2:	4c74      	ldr	r4, [pc, #464]	; (b5a84 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   b58b4:	2601      	movs	r6, #1
   b58b6:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b58b8:	4b73      	ldr	r3, [pc, #460]	; (b5a88 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   b58ba:	2500      	movs	r5, #0
    SleepResult() {}
   b58bc:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b58be:	e9c3 5500 	strd	r5, r5, [r3]
   b58c2:	b093      	sub	sp, #76	; 0x4c

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b58c4:	2003      	movs	r0, #3
   b58c6:	f002 f87d 	bl	b79c4 <set_system_mode>
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   b58ca:	4970      	ldr	r1, [pc, #448]	; (b5a8c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   b58cc:	4870      	ldr	r0, [pc, #448]	; (b5a90 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   b58ce:	2264      	movs	r2, #100	; 0x64
   b58d0:	f000 f94a 	bl	b5b68 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   b58d4:	486f      	ldr	r0, [pc, #444]	; (b5a94 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   b58d6:	f001 fd4d 	bl	b7374 <_ZN13SFE_UBLOX_GPSC1Ev>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b58da:	f7ff fda1 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58de:	2364      	movs	r3, #100	; 0x64
   b58e0:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  {
   b58e4:	4b6c      	ldr	r3, [pc, #432]	; (b5a98 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   b58e6:	6065      	str	r5, [r4, #4]
   b58e8:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
   b58ec:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
   b58f0:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
   b58f4:	f884 6474 	strb.w	r6, [r4, #1140]	; 0x474
   b58f8:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
   b58fc:	f8a4 547c 	strh.w	r5, [r4, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5900:	b908      	cbnz	r0, b5906 <_GLOBAL__sub_I_SystemMode+0x5a>
   b5902:	f7ff fd8d 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b5906:	4b65      	ldr	r3, [pc, #404]	; (b5a9c <_GLOBAL__sub_I_SystemMode+0x1f0>)
  File() {}
   b5908:	4a65      	ldr	r2, [pc, #404]	; (b5aa0 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   b590a:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b590e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   b5912:	2400      	movs	r4, #0
   b5914:	601a      	str	r2, [r3, #0]
   b5916:	e9c3 4601 	strd	r4, r6, [r3, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b591a:	611c      	str	r4, [r3, #16]
   b591c:	4b61      	ldr	r3, [pc, #388]	; (b5aa4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
        capacity_(0) {
   b591e:	9407      	str	r4, [sp, #28]
   b5920:	601a      	str	r2, [r3, #0]
   b5922:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5926:	611c      	str	r4, [r3, #16]
   b5928:	4b5f      	ldr	r3, [pc, #380]	; (b5aa8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
        filter_(level, filters) {
   b592a:	4d60      	ldr	r5, [pc, #384]	; (b5aac <_GLOBAL__sub_I_SystemMode+0x200>)
   b592c:	601a      	str	r2, [r3, #0]
   b592e:	e9c3 4601 	strd	r4, r6, [r3, #4]
   b5932:	611c      	str	r4, [r3, #16]
   b5934:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5938:	f005 fb30 	bl	baf9c <_Z16_fetch_usbserialv>
   b593c:	a905      	add	r1, sp, #20
   b593e:	4607      	mov	r7, r0
   b5940:	a808      	add	r0, sp, #32
   b5942:	f7ff ff81 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5946:	a908      	add	r1, sp, #32
   b5948:	a80b      	add	r0, sp, #44	; 0x2c
   b594a:	f7ff ff7d 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b594e:	4b58      	ldr	r3, [pc, #352]	; (b5ab0 <_GLOBAL__sub_I_SystemMode+0x204>)
   b5950:	602b      	str	r3, [r5, #0]
   b5952:	a90b      	add	r1, sp, #44	; 0x2c
   b5954:	a80e      	add	r0, sp, #56	; 0x38
   b5956:	f7ff ff77 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b595a:	aa0e      	add	r2, sp, #56	; 0x38
   b595c:	211e      	movs	r1, #30
   b595e:	1d28      	adds	r0, r5, #4
   b5960:	f004 fb34 	bl	b9fcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5964:	a80e      	add	r0, sp, #56	; 0x38
   b5966:	f7ff fd29 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b596a:	a80b      	add	r0, sp, #44	; 0x2c
   b596c:	f7ff fd26 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5970:	4b50      	ldr	r3, [pc, #320]	; (b5ab4 <_GLOBAL__sub_I_SystemMode+0x208>)
   b5972:	602b      	str	r3, [r5, #0]
   b5974:	622f      	str	r7, [r5, #32]
   b5976:	a808      	add	r0, sp, #32
   b5978:	f7ff fd20 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b597c:	4b4e      	ldr	r3, [pc, #312]	; (b5ab8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b597e:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5980:	f005 fb0c 	bl	baf9c <_Z16_fetch_usbserialv>
   b5984:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5988:	f005 faf8 	bl	baf7c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b598c:	f004 f800 	bl	b9990 <_ZN5spark10LogManager8instanceEv>
   b5990:	4629      	mov	r1, r5
   b5992:	f004 f9f1 	bl	b9d78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b5996:	a805      	add	r0, sp, #20
   b5998:	f7ff fd10 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b599c:	4847      	ldr	r0, [pc, #284]	; (b5abc <_GLOBAL__sub_I_SystemMode+0x210>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b599e:	4d48      	ldr	r5, [pc, #288]	; (b5ac0 <_GLOBAL__sub_I_SystemMode+0x214>)
	    _M_invoker = &_My_handler::_M_invoke;
   b59a0:	4f48      	ldr	r7, [pc, #288]	; (b5ac4 <_GLOBAL__sub_I_SystemMode+0x218>)
Servo ESCL; 
   b59a2:	f002 faef 	bl	b7f84 <_ZN5ServoC1Ev>
Servo ESCR;
   b59a6:	4848      	ldr	r0, [pc, #288]	; (b5ac8 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b59a8:	f002 faec 	bl	b7f84 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b59ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b59b0:	682b      	ldr	r3, [r5, #0]
   b59b2:	9300      	str	r3, [sp, #0]
   b59b4:	4b45      	ldr	r3, [pc, #276]	; (b5acc <_GLOBAL__sub_I_SystemMode+0x220>)
   b59b6:	4946      	ldr	r1, [pc, #280]	; (b5ad0 <_GLOBAL__sub_I_SystemMode+0x224>)
   b59b8:	681b      	ldr	r3, [r3, #0]
   b59ba:	4846      	ldr	r0, [pc, #280]	; (b5ad4 <_GLOBAL__sub_I_SystemMode+0x228>)
   b59bc:	f04f 0210 	mov.w	r2, #16
   b59c0:	f7ff fd0f 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b59c4:	4b44      	ldr	r3, [pc, #272]	; (b5ad8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b59c6:	9402      	str	r4, [sp, #8]
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	682b      	ldr	r3, [r5, #0]
   b59cc:	9300      	str	r3, [sp, #0]
   b59ce:	4b43      	ldr	r3, [pc, #268]	; (b5adc <_GLOBAL__sub_I_SystemMode+0x230>)
   b59d0:	4943      	ldr	r1, [pc, #268]	; (b5ae0 <_GLOBAL__sub_I_SystemMode+0x234>)
   b59d2:	681b      	ldr	r3, [r3, #0]
   b59d4:	4843      	ldr	r0, [pc, #268]	; (b5ae4 <_GLOBAL__sub_I_SystemMode+0x238>)
   b59d6:	f04f 0204 	mov.w	r2, #4
   b59da:	f7ff fd02 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b59de:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b59e2:	682b      	ldr	r3, [r5, #0]
   b59e4:	9300      	str	r3, [sp, #0]
   b59e6:	4b40      	ldr	r3, [pc, #256]	; (b5ae8 <_GLOBAL__sub_I_SystemMode+0x23c>)
   b59e8:	4940      	ldr	r1, [pc, #256]	; (b5aec <_GLOBAL__sub_I_SystemMode+0x240>)
   b59ea:	681b      	ldr	r3, [r3, #0]
   b59ec:	4840      	ldr	r0, [pc, #256]	; (b5af0 <_GLOBAL__sub_I_SystemMode+0x244>)
	    _M_manager = &_My_handler::_M_manager;
   b59ee:	4d41      	ldr	r5, [pc, #260]	; (b5af4 <_GLOBAL__sub_I_SystemMode+0x248>)
   b59f0:	f04f 0210 	mov.w	r2, #16
   b59f4:	f7ff fcf5 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b59f8:	483f      	ldr	r0, [pc, #252]	; (b5af8 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b59fa:	f003 f97e 	bl	b8cfa <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b59fe:	4b3f      	ldr	r3, [pc, #252]	; (b5afc <_GLOBAL__sub_I_SystemMode+0x250>)
   b5a00:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5a02:	aa0e      	add	r2, sp, #56	; 0x38
   b5a04:	4623      	mov	r3, r4
   b5a06:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5a0a:	483d      	ldr	r0, [pc, #244]	; (b5b00 <_GLOBAL__sub_I_SystemMode+0x254>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5a0c:	9711      	str	r7, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5a0e:	9510      	str	r5, [sp, #64]	; 0x40
   b5a10:	f7fe fcec 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a14:	a80e      	add	r0, sp, #56	; 0x38
   b5a16:	f7fe fcab 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a1a:	4b3a      	ldr	r3, [pc, #232]	; (b5b04 <_GLOBAL__sub_I_SystemMode+0x258>)
   b5a1c:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5a1e:	aa0e      	add	r2, sp, #56	; 0x38
   b5a20:	4623      	mov	r3, r4
   b5a22:	4631      	mov	r1, r6
   b5a24:	4838      	ldr	r0, [pc, #224]	; (b5b08 <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   b5a26:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5a2a:	f7fe fcdf 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a2e:	a80e      	add	r0, sp, #56	; 0x38
   b5a30:	f7fe fc9e 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a34:	4b35      	ldr	r3, [pc, #212]	; (b5b0c <_GLOBAL__sub_I_SystemMode+0x260>)
   b5a36:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5a38:	aa0e      	add	r2, sp, #56	; 0x38
   b5a3a:	4623      	mov	r3, r4
   b5a3c:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5a40:	4833      	ldr	r0, [pc, #204]	; (b5b10 <_GLOBAL__sub_I_SystemMode+0x264>)
	    _M_manager = &_My_handler::_M_manager;
   b5a42:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b5a46:	f7fe fcd1 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a4a:	a80e      	add	r0, sp, #56	; 0x38
   b5a4c:	f7fe fc90 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5a50:	4622      	mov	r2, r4
   b5a52:	2114      	movs	r1, #20
   b5a54:	2001      	movs	r0, #1
   b5a56:	f001 ffdd 	bl	b7a14 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5a5a:	2201      	movs	r2, #1
   b5a5c:	2114      	movs	r1, #20
   b5a5e:	e9cd 1200 	strd	r1, r2, [sp]
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5a62:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5a64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5a68:	482a      	ldr	r0, [pc, #168]	; (b5b14 <_GLOBAL__sub_I_SystemMode+0x268>)
   b5a6a:	f002 f923 	bl	b7cb4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
String xbeeBuf;
   b5a6e:	492a      	ldr	r1, [pc, #168]	; (b5b18 <_GLOBAL__sub_I_SystemMode+0x26c>)
   b5a70:	482a      	ldr	r0, [pc, #168]	; (b5b1c <_GLOBAL__sub_I_SystemMode+0x270>)
   b5a72:	b013      	add	sp, #76	; 0x4c
   b5a74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String xbeeBuf;
   b5a78:	f002 bb21 	b.w	b80be <_ZN6StringC1EPK19__FlashStringHelper>
   b5a7c:	2003de64 	.word	0x2003de64
   b5a80:	ffff0000 	.word	0xffff0000
   b5a84:	2003e0f8 	.word	0x2003e0f8
   b5a88:	2003de50 	.word	0x2003de50
   b5a8c:	2003e080 	.word	0x2003e080
   b5a90:	2003e03c 	.word	0x2003e03c
   b5a94:	2003dfb4 	.word	0x2003dfb4
   b5a98:	000bec00 	.word	0x000bec00
   b5a9c:	2003df80 	.word	0x2003df80
   b5aa0:	000bec6c 	.word	0x000bec6c
   b5aa4:	2003df18 	.word	0x2003df18
   b5aa8:	2003dee4 	.word	0x2003dee4
   b5aac:	2003df4c 	.word	0x2003df4c
   b5ab0:	000bec28 	.word	0x000bec28
   b5ab4:	000beff0 	.word	0x000beff0
   b5ab8:	000bec54 	.word	0x000bec54
   b5abc:	2003de2c 	.word	0x2003de2c
   b5ac0:	2003dc1c 	.word	0x2003dc1c
   b5ac4:	000b4231 	.word	0x000b4231
   b5ac8:	2003de3c 	.word	0x2003de3c
   b5acc:	2003dc28 	.word	0x2003dc28
   b5ad0:	000bebee 	.word	0x000bebee
   b5ad4:	2003e5d8 	.word	0x2003e5d8
   b5ad8:	000b4991 	.word	0x000b4991
   b5adc:	2003dc24 	.word	0x2003dc24
   b5ae0:	000bebf1 	.word	0x000bebf1
   b5ae4:	2003e0f0 	.word	0x2003e0f0
   b5ae8:	2003dc20 	.word	0x2003dc20
   b5aec:	000bebf4 	.word	0x000bebf4
   b5af0:	2003e0e4 	.word	0x2003e0e4
   b5af4:	000b421d 	.word	0x000b421d
   b5af8:	2003de68 	.word	0x2003de68
   b5afc:	000b4531 	.word	0x000b4531
   b5b00:	2003e5e4 	.word	0x2003e5e4
   b5b04:	000b4465 	.word	0x000b4465
   b5b08:	2003dec8 	.word	0x2003dec8
   b5b0c:	000b40f9 	.word	0x000b40f9
   b5b10:	2003e5b8 	.word	0x2003e5b8
   b5b14:	2003e594 	.word	0x2003e594
   b5b18:	000befb8 	.word	0x000befb8
   b5b1c:	2003e600 	.word	0x2003e600

000b5b20 <_ZN9MicroNMEA9setBufferEPvh>:

void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
	_buffer = (char*)buf;
	_ptr = _buffer;
   b5b20:	e9c0 1101 	strd	r1, r1, [r0, #4]
	_bufferLen = len;
   b5b24:	7002      	strb	r2, [r0, #0]
	if (_bufferLen) {
   b5b26:	b132      	cbz	r2, b5b36 <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   b5b28:	2200      	movs	r2, #0
   b5b2a:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   b5b2c:	7801      	ldrb	r1, [r0, #0]
   b5b2e:	6843      	ldr	r3, [r0, #4]
   b5b30:	440b      	add	r3, r1
   b5b32:	f803 2c01 	strb.w	r2, [r3, #-1]
	}
}
   b5b36:	4770      	bx	lr

000b5b38 <_ZN9MicroNMEA5clearEv>:


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   b5b38:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
   b5b3a:	4a09      	ldr	r2, [pc, #36]	; (b5b60 <_ZN9MicroNMEA5clearEv+0x28>)
	_navSystem = '\0';
   b5b3c:	74c3      	strb	r3, [r0, #19]
	_isValid = false;
   b5b3e:	7503      	strb	r3, [r0, #20]
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   b5b40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   b5b44:	6303      	str	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   b5b46:	4b07      	ldr	r3, [pc, #28]	; (b5b64 <_ZN9MicroNMEA5clearEv+0x2c>)
   b5b48:	6343      	str	r3, [r0, #52]	; 0x34
	_longitude = 999000000L;
   b5b4a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	_numSat = 0;
   b5b4e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	_altitude = _speed = _course = LONG_MIN;
   b5b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b5b56:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
   b5b5a:	6202      	str	r2, [r0, #32]
	_numSat = 0;
   b5b5c:	8703      	strh	r3, [r0, #56]	; 0x38
	_hundredths = 0;
}
   b5b5e:	4770      	bx	lr
   b5b60:	3b8b87c0 	.word	0x3b8b87c0
   b5b64:	00636363 	.word	0x00636363

000b5b68 <_ZN9MicroNMEAC1EPvh>:
MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   b5b68:	b538      	push	{r3, r4, r5, lr}
	_unknownSentenceHandler(nullptr)
   b5b6a:	2400      	movs	r4, #0
   b5b6c:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
   b5b70:	7304      	strb	r4, [r0, #12]
   b5b72:	f8c0 400d 	str.w	r4, [r0, #13]
   b5b76:	f8a0 4011 	strh.w	r4, [r0, #17]
	setBuffer(buf, len);
   b5b7a:	f7ff ffd1 	bl	b5b20 <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   b5b7e:	f7ff ffdb 	bl	b5b38 <_ZN9MicroNMEA5clearEv>
}
   b5b82:	bd38      	pop	{r3, r4, r5, pc}

000b5b84 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5b84:	2904      	cmp	r1, #4
   b5b86:	d804      	bhi.n	b5b92 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5b88:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5b8c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5b90:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5b92:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5b94:	bf9b      	ittet	ls
   b5b96:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5b9a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5b9e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5ba0:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5ba2:	bf84      	itt	hi
   b5ba4:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5ba8:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5baa:	4770      	bx	lr

000b5bac <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5bac:	b510      	push	{r4, lr}
   b5bae:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5bb0:	3024      	adds	r0, #36	; 0x24
   b5bb2:	f000 ff69 	bl	b6a88 <_ZN8FatCache4syncEv>
   b5bb6:	b128      	cbz	r0, b5bc4 <_ZN9FatVolume9cacheSyncEv+0x18>
   b5bb8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5bc0:	f000 bf62 	b.w	b6a88 <_ZN8FatCache4syncEv>
  }
   b5bc4:	bd10      	pop	{r4, pc}

000b5bc6 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5bc6:	1e41      	subs	r1, r0, #1
   b5bc8:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5bcc:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5bce:	0842      	lsrs	r2, r0, #1
   b5bd0:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5bd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5bd8:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5bdc:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5bde:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5be0:	d1f5      	bne.n	b5bce <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5be2:	4770      	bx	lr

000b5be4 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b5be4:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b5be6:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b5be8:	4604      	mov	r4, r0
   b5bea:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b5bec:	b923      	cbnz	r3, b5bf8 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b5bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b5bf2:	6889      	ldr	r1, [r1, #8]
   b5bf4:	f000 bc16 	b.w	b6424 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b5bf8:	2224      	movs	r2, #36	; 0x24
   b5bfa:	2100      	movs	r1, #0
   b5bfc:	f006 fcee 	bl	bc5dc <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b5c00:	2310      	movs	r3, #16
  m_flags = F_READ;
   b5c02:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5c04:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5c06:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5c08:	68ab      	ldr	r3, [r5, #8]
   b5c0a:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5c0c:	68eb      	ldr	r3, [r5, #12]
   b5c0e:	6223      	str	r3, [r4, #32]
}
   b5c10:	bd38      	pop	{r3, r4, r5, pc}

000b5c12 <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b5c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c16:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b5c18:	7803      	ldrb	r3, [r0, #0]
   b5c1a:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b5c1e:	4606      	mov	r6, r0
   b5c20:	460f      	mov	r7, r1
   b5c22:	4690      	mov	r8, r2
   b5c24:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b5c28:	2b00      	cmp	r3, #0
   b5c2a:	d05d      	beq.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
   b5c2c:	2a0c      	cmp	r2, #12
   b5c2e:	d95b      	bls.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b5c30:	78c3      	ldrb	r3, [r0, #3]
   b5c32:	b933      	cbnz	r3, b5c42 <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b5c34:	f000 fb46 	bl	b62c4 <_ZN7FatFile6getSFNEPc>
   b5c38:	4604      	mov	r4, r0
}
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	b00d      	add	sp, #52	; 0x34
   b5c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b5c42:	4601      	mov	r1, r0
   b5c44:	a803      	add	r0, sp, #12
   b5c46:	f7ff ffcd 	bl	b5be4 <_ZN7FatFile11openClusterEPS_>
   b5c4a:	2800      	cmp	r0, #0
   b5c4c:	d04c      	beq.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b5c4e:	eb07 0308 	add.w	r3, r7, r8
   b5c52:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5c56:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b5c5a:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b5c5c:	78f3      	ldrb	r3, [r6, #3]
   b5c5e:	fa5f f58b 	uxtb.w	r5, fp
   b5c62:	42ab      	cmp	r3, r5
   b5c64:	d340      	bcc.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5c66:	88b1      	ldrh	r1, [r6, #4]
   b5c68:	eba1 010b 	sub.w	r1, r1, fp
   b5c6c:	0149      	lsls	r1, r1, #5
   b5c6e:	a803      	add	r0, sp, #12
   b5c70:	f000 fcbe 	bl	b65f0 <_ZN7FatFile7seekSetEm>
   b5c74:	4604      	mov	r4, r0
   b5c76:	2800      	cmp	r0, #0
   b5c78:	d036      	beq.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5c7a:	2100      	movs	r1, #0
   b5c7c:	a803      	add	r0, sp, #12
   b5c7e:	f000 fc98 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5c82:	4603      	mov	r3, r0
   b5c84:	b380      	cbz	r0, b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b5c86:	7ac2      	ldrb	r2, [r0, #11]
   b5c88:	2a0f      	cmp	r2, #15
   b5c8a:	d12d      	bne.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b5c8c:	7802      	ldrb	r2, [r0, #0]
   b5c8e:	f002 021f 	and.w	r2, r2, #31
   b5c92:	42aa      	cmp	r2, r5
   b5c94:	d128      	bne.n	b5ce8 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5c96:	f10b 35ff 	add.w	r5, fp, #4294967295
   b5c9a:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b5c9e:	197a      	adds	r2, r7, r5
   b5ca0:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b5ca2:	4618      	mov	r0, r3
   b5ca4:	9101      	str	r1, [sp, #4]
   b5ca6:	f7ff ff6d 	bl	b5b84 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b5caa:	b168      	cbz	r0, b5cc8 <_ZN7FatFile7getNameEPcj+0xb6>
   b5cac:	45a8      	cmp	r8, r5
   b5cae:	d912      	bls.n	b5cd6 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b5cb0:	9901      	ldr	r1, [sp, #4]
   b5cb2:	3101      	adds	r1, #1
   b5cb4:	287f      	cmp	r0, #127	; 0x7f
   b5cb6:	b2c9      	uxtb	r1, r1
   b5cb8:	bf28      	it	cs
   b5cba:	203f      	movcs	r0, #63	; 0x3f
   b5cbc:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b5cbe:	f802 0b01 	strb.w	r0, [r2], #1
   b5cc2:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b5cc6:	d1ec      	bne.n	b5ca2 <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b5cc8:	45a8      	cmp	r8, r5
   b5cca:	d904      	bls.n	b5cd6 <_ZN7FatFile7getNameEPcj+0xc4>
   b5ccc:	781a      	ldrb	r2, [r3, #0]
   b5cce:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b5cd0:	bf48      	it	mi
   b5cd2:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b5cd6:	9a00      	ldr	r2, [sp, #0]
   b5cd8:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b5cdc:	781b      	ldrb	r3, [r3, #0]
   b5cde:	065b      	lsls	r3, r3, #25
   b5ce0:	f10b 0b01 	add.w	fp, fp, #1
   b5ce4:	d5ba      	bpl.n	b5c5c <_ZN7FatFile7getNameEPcj+0x4a>
   b5ce6:	e7a8      	b.n	b5c3a <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b5ce8:	2400      	movs	r4, #0
   b5cea:	703c      	strb	r4, [r7, #0]
  return false;
   b5cec:	e7a5      	b.n	b5c3a <_ZN7FatFile7getNameEPcj+0x28>
	...

000b5cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5cf4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5cf6:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5cfa:	2b20      	cmp	r3, #32
   b5cfc:	d0fa      	beq.n	b5cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5cfe:	4d6a      	ldr	r5, [pc, #424]	; (b5ea8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5d00:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5d02:	2400      	movs	r4, #0
    c = path[len];
   b5d04:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5d06:	b1c3      	cbz	r3, b5d3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5d08:	2b2f      	cmp	r3, #47	; 0x2f
   b5d0a:	d016      	beq.n	b5d3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5d0c:	2b5c      	cmp	r3, #92	; 0x5c
   b5d0e:	d102      	bne.n	b5d16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5d10:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5d16:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5d1a:	b2c0      	uxtb	r0, r0
   b5d1c:	281d      	cmp	r0, #29
   b5d1e:	d803      	bhi.n	b5d28 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5d20:	fa25 f000 	lsr.w	r0, r5, r0
   b5d24:	07c0      	lsls	r0, r0, #31
   b5d26:	d4f3      	bmi.n	b5d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5d28:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5d2c:	283c      	cmp	r0, #60	; 0x3c
   b5d2e:	d0ef      	beq.n	b5d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5d30:	3b20      	subs	r3, #32
   b5d32:	2b5e      	cmp	r3, #94	; 0x5e
   b5d34:	d8ec      	bhi.n	b5d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5d36:	3401      	adds	r4, #1
    c = path[len];
   b5d38:	e7e4      	b.n	b5d04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5d3a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5d3c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5d3e:	4607      	mov	r7, r0
   b5d40:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5d44:	2d20      	cmp	r5, #32
   b5d46:	d0fa      	beq.n	b5d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5d48:	2d2f      	cmp	r5, #47	; 0x2f
   b5d4a:	d0f8      	beq.n	b5d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5d4c:	6017      	str	r7, [r2, #0]
  while (len) {
   b5d4e:	b14c      	cbz	r4, b5d64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5d54:	2a2e      	cmp	r2, #46	; 0x2e
   b5d56:	d001      	beq.n	b5d5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5d58:	2a20      	cmp	r2, #32
   b5d5a:	d101      	bne.n	b5d60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5d5c:	3c01      	subs	r4, #1
  while (len) {
   b5d5e:	e7f6      	b.n	b5d4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5d60:	2cff      	cmp	r4, #255	; 0xff
   b5d62:	dcd5      	bgt.n	b5d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5d64:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5d68:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5d6c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5d6e:	f8c1 300d 	str.w	r3, [r1, #13]
   b5d72:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5d74:	f04f 0800 	mov.w	r8, #0
   b5d78:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5d7c:	2b2e      	cmp	r3, #46	; 0x2e
   b5d7e:	d001      	beq.n	b5d84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5d80:	2b20      	cmp	r3, #32
   b5d82:	d102      	bne.n	b5d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5d84:	f108 0801 	add.w	r8, r8, #1
   b5d88:	e7f6      	b.n	b5d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5d8a:	fab8 f088 	clz	r0, r8
   b5d8e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5d90:	1e65      	subs	r5, r4, #1
   b5d92:	1c6b      	adds	r3, r5, #1
   b5d94:	d002      	beq.n	b5d9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5d96:	5d73      	ldrb	r3, [r6, r5]
   b5d98:	2b2e      	cmp	r3, #46	; 0x2e
   b5d9a:	d114      	bne.n	b5dc6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5d9c:	f04f 0900 	mov.w	r9, #0
   b5da0:	2707      	movs	r7, #7
   b5da2:	464a      	mov	r2, r9
   b5da4:	46ca      	mov	sl, r9
   b5da6:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5daa:	45a0      	cmp	r8, r4
   b5dac:	da68      	bge.n	b5e80 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5dae:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5db2:	2b20      	cmp	r3, #32
   b5db4:	d003      	beq.n	b5dbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5db6:	2b2e      	cmp	r3, #46	; 0x2e
   b5db8:	d107      	bne.n	b5dca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5dba:	45a8      	cmp	r8, r5
   b5dbc:	d012      	beq.n	b5de4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5dbe:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5dc0:	f108 0801 	add.w	r8, r8, #1
   b5dc4:	e7f1      	b.n	b5daa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5dc6:	3d01      	subs	r5, #1
   b5dc8:	e7e3      	b.n	b5d92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5dca:	2b22      	cmp	r3, #34	; 0x22
   b5dcc:	d008      	beq.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5dce:	2b7c      	cmp	r3, #124	; 0x7c
   b5dd0:	d006      	beq.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5dd2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5dd6:	f1bc 0f05 	cmp.w	ip, #5
   b5dda:	d80a      	bhi.n	b5df2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5ddc:	2b2d      	cmp	r3, #45	; 0x2d
   b5dde:	d012      	beq.n	b5e06 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5de0:	45a8      	cmp	r8, r5
   b5de2:	d15b      	bne.n	b5e9c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5de4:	2f0a      	cmp	r7, #10
   b5de6:	d04a      	beq.n	b5e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5de8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5dea:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5dec:	f04f 0e10 	mov.w	lr, #16
   b5df0:	e7e6      	b.n	b5dc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5df2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5df6:	f1bc 0f05 	cmp.w	ip, #5
   b5dfa:	d9f1      	bls.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5dfc:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5e00:	f1bc 0f02 	cmp.w	ip, #2
   b5e04:	d9ec      	bls.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5e06:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5e0a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5e0e:	d8e7      	bhi.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5e10:	45a8      	cmp	r8, r5
   b5e12:	d0e7      	beq.n	b5de4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5e14:	42ba      	cmp	r2, r7
   b5e16:	d830      	bhi.n	b5e7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5e18:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5e1c:	f1bc 0f19 	cmp.w	ip, #25
   b5e20:	d81a      	bhi.n	b5e58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5e22:	3b20      	subs	r3, #32
        lc |= bit;
   b5e24:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5e28:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5e2a:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5e2e:	f102 0c01 	add.w	ip, r2, #1
   b5e32:	fa5f fc8c 	uxtb.w	ip, ip
   b5e36:	440a      	add	r2, r1
      if (i < 7) {
   b5e38:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5e3c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5e3e:	d801      	bhi.n	b5e44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5e40:	f881 c00c 	strb.w	ip, [r1, #12]
   b5e44:	4662      	mov	r2, ip
   b5e46:	e7bb      	b.n	b5dc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5e48:	45a8      	cmp	r8, r5
   b5e4a:	dc18      	bgt.n	b5e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5e4c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5e4e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5e50:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5e52:	f04f 0e10 	mov.w	lr, #16
   b5e56:	e7b2      	b.n	b5dbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5e58:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5e5c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5e60:	bf98      	it	ls
   b5e62:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5e66:	e7e2      	b.n	b5e2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5e68:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5e6a:	2001      	movs	r0, #1
   b5e6c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5e6e:	4419      	add	r1, r3
   b5e70:	237e      	movs	r3, #126	; 0x7e
   b5e72:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5e74:	2331      	movs	r3, #49	; 0x31
   b5e76:	738b      	strb	r3, [r1, #14]
   b5e78:	e74b      	b.n	b5d12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5e7a:	2f0a      	cmp	r7, #10
   b5e7c:	d1e4      	bne.n	b5e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5e7e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5e80:	7b4b      	ldrb	r3, [r1, #13]
   b5e82:	2b20      	cmp	r3, #32
   b5e84:	f43f af44 	beq.w	b5d10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5e88:	2800      	cmp	r0, #0
   b5e8a:	d0ed      	beq.n	b5e68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5e8c:	ea1a 0f09 	tst.w	sl, r9
   b5e90:	bf18      	it	ne
   b5e92:	f04f 0902 	movne.w	r9, #2
   b5e96:	f881 9000 	strb.w	r9, [r1]
   b5e9a:	e73a      	b.n	b5d12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5e9c:	42ba      	cmp	r2, r7
   b5e9e:	d8ec      	bhi.n	b5e7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5ea0:	2000      	movs	r0, #0
      c = '_';
   b5ea2:	235f      	movs	r3, #95	; 0x5f
   b5ea4:	e7c3      	b.n	b5e2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5ea6:	bf00      	nop
   b5ea8:	31000101 	.word	0x31000101

000b5eac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5eb0:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5eb4:	4606      	mov	r6, r0
   b5eb6:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5eb8:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5eba:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5ebc:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5ec0:	6861      	ldr	r1, [r4, #4]
   b5ec2:	68a2      	ldr	r2, [r4, #8]
   b5ec4:	186b      	adds	r3, r5, r1
   b5ec6:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5ec8:	4411      	add	r1, r2
   b5eca:	4291      	cmp	r1, r2
   b5ecc:	d006      	beq.n	b5edc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5ece:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5ed2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5ed6:	4043      	eors	r3, r0
   b5ed8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5eda:	e7f6      	b.n	b5eca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5edc:	f1b9 0f03 	cmp.w	r9, #3
   b5ee0:	bf28      	it	cs
   b5ee2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5ee6:	f109 0204 	add.w	r2, r9, #4
   b5eea:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5eec:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5ef0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5ef2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5ef4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5ef6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5ef8:	bf94      	ite	ls
   b5efa:	3130      	addls	r1, #48	; 0x30
   b5efc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5efe:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5f00:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5f02:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f06:	d1f1      	bne.n	b5eec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5f08:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5f0c:	2100      	movs	r1, #0
   b5f0e:	735f      	strb	r7, [r3, #13]
   b5f10:	4630      	mov	r0, r6
   b5f12:	f000 fb6d 	bl	b65f0 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5f16:	2101      	movs	r1, #1
   b5f18:	4630      	mov	r0, r6
   b5f1a:	f000 fb4a 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5f1e:	4601      	mov	r1, r0
   b5f20:	b928      	cbnz	r0, b5f2e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5f22:	7870      	ldrb	r0, [r6, #1]
   b5f24:	fab0 f080 	clz	r0, r0
   b5f28:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5f2e:	7803      	ldrb	r3, [r0, #0]
   b5f30:	b16b      	cbz	r3, b5f4e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5f32:	7ac3      	ldrb	r3, [r0, #11]
   b5f34:	071b      	lsls	r3, r3, #28
   b5f36:	d4ee      	bmi.n	b5f16 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5f38:	220b      	movs	r2, #11
   b5f3a:	4640      	mov	r0, r8
   b5f3c:	f006 fb16 	bl	bc56c <memcmp>
   b5f40:	2800      	cmp	r0, #0
   b5f42:	d1e8      	bne.n	b5f16 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5f44:	3501      	adds	r5, #1
   b5f46:	b2ad      	uxth	r5, r5
   b5f48:	2d64      	cmp	r5, #100	; 0x64
   b5f4a:	d1b9      	bne.n	b5ec0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5f4c:	e7ed      	b.n	b5f2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b5f4e:	2001      	movs	r0, #1
   b5f50:	e7eb      	b.n	b5f2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5f54 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f58:	ed2d 8b02 	vpush	{d8}
   b5f5c:	b08b      	sub	sp, #44	; 0x2c
   b5f5e:	460d      	mov	r5, r1
   b5f60:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5f62:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f64:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5f66:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f6a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5f6c:	d105      	bne.n	b5f7a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b5f6e:	2000      	movs	r0, #0
}
   b5f70:	b00b      	add	sp, #44	; 0x2c
   b5f72:	ecbd 8b02 	vpop	{d8}
   b5f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5f7a:	9b07      	ldr	r3, [sp, #28]
   b5f7c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b5f7e:	2b00      	cmp	r3, #0
   b5f80:	d1f5      	bne.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5f82:	6853      	ldr	r3, [r2, #4]
   b5f84:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5f86:	7813      	ldrb	r3, [r2, #0]
   b5f88:	079c      	lsls	r4, r3, #30
   b5f8a:	bf1f      	itttt	ne
   b5f8c:	9b05      	ldrne	r3, [sp, #20]
   b5f8e:	330c      	addne	r3, #12
   b5f90:	220d      	movne	r2, #13
   b5f92:	fbb3 f3f2 	udivne	r3, r3, r2
   b5f96:	bf1a      	itte	ne
   b5f98:	3301      	addne	r3, #1
   b5f9a:	b2db      	uxtbne	r3, r3
   b5f9c:	2301      	moveq	r3, #1
    seekSet(0);
   b5f9e:	2100      	movs	r1, #0
   b5fa0:	4628      	mov	r0, r5
   b5fa2:	9303      	str	r3, [sp, #12]
   b5fa4:	f000 fb24 	bl	b65f0 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5fa8:	f107 030d 	add.w	r3, r7, #13
  }
   b5fac:	f04f 0b00 	mov.w	fp, #0
   b5fb0:	ee08 3a10 	vmov	s16, r3
   b5fb4:	46da      	mov	sl, fp
   b5fb6:	465c      	mov	r4, fp
   b5fb8:	465e      	mov	r6, fp
   b5fba:	f8cd b010 	str.w	fp, [sp, #16]
   b5fbe:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5fc0:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5fc2:	2101      	movs	r1, #1
   b5fc4:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5fc6:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5fca:	f000 faf2 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5fce:	4603      	mov	r3, r0
   b5fd0:	2800      	cmp	r0, #0
   b5fd2:	d171      	bne.n	b60b8 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b5fd4:	786b      	ldrb	r3, [r5, #1]
   b5fd6:	2b00      	cmp	r3, #0
   b5fd8:	d1c9      	bne.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b5fda:	9b06      	ldr	r3, [sp, #24]
   b5fdc:	059a      	lsls	r2, r3, #22
   b5fde:	d5c6      	bpl.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b5fe0:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b5fe4:	3b01      	subs	r3, #1
   b5fe6:	2b01      	cmp	r3, #1
   b5fe8:	d8c1      	bhi.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b5fea:	9b04      	ldr	r3, [sp, #16]
   b5fec:	2c00      	cmp	r4, #0
   b5fee:	bf08      	it	eq
   b5ff0:	4643      	moveq	r3, r8
   b5ff2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b5ff4:	9b03      	ldr	r3, [sp, #12]
   b5ff6:	429c      	cmp	r4, r3
   b5ff8:	f0c0 80f1 	bcc.w	b61de <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b5ffc:	f1b9 0f00 	cmp.w	r9, #0
   b6000:	f040 810a 	bne.w	b6218 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6004:	9b04      	ldr	r3, [sp, #16]
   b6006:	4628      	mov	r0, r5
   b6008:	0159      	lsls	r1, r3, #5
   b600a:	f000 faf1 	bl	b65f0 <_ZN7FatFile7seekSetEm>
   b600e:	2800      	cmp	r0, #0
   b6010:	d0ad      	beq.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6012:	9b03      	ldr	r3, [sp, #12]
   b6014:	f103 39ff 	add.w	r9, r3, #4294967295
   b6018:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b601c:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b601e:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6022:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6026:	2e00      	cmp	r6, #0
   b6028:	f000 810d 	beq.w	b6246 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b602c:	2100      	movs	r1, #0
   b602e:	4628      	mov	r0, r5
   b6030:	f000 fabf 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6034:	4604      	mov	r4, r0
   b6036:	2800      	cmp	r0, #0
   b6038:	d099      	beq.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b603a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b603c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6040:	454e      	cmp	r6, r9
   b6042:	f043 0301 	orr.w	r3, r3, #1
   b6046:	bf0c      	ite	eq
   b6048:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b604c:	46b3      	movne	fp, r6
   b604e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6052:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6056:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b605a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b605e:	f107 000d 	add.w	r0, r7, #13
   b6062:	f7ff fdb0 	bl	b5bc6 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6066:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b606a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b606c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6070:	f00b 031f 	and.w	r3, fp, #31
   b6074:	220d      	movs	r2, #13
   b6076:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6078:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b607c:	4353      	muls	r3, r2
   b607e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6080:	9905      	ldr	r1, [sp, #20]
   b6082:	4299      	cmp	r1, r3
   b6084:	f240 80d0 	bls.w	b6228 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6088:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b608c:	2a04      	cmp	r2, #4
   b608e:	fa5f fe82 	uxtb.w	lr, r2
   b6092:	f102 0001 	add.w	r0, r2, #1
   b6096:	f200 80cd 	bhi.w	b6234 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b609a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b609e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b60a2:	280d      	cmp	r0, #13
   b60a4:	f103 0301 	add.w	r3, r3, #1
   b60a8:	4602      	mov	r2, r0
   b60aa:	d1e9      	bne.n	b6080 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b60ac:	3e01      	subs	r6, #1
   b60ae:	b2f6      	uxtb	r6, r6
   b60b0:	e7b9      	b.n	b6026 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b60b2:	f04f 0901 	mov.w	r9, #1
   b60b6:	e783      	b.n	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b60b8:	7802      	ldrb	r2, [r0, #0]
   b60ba:	2ae5      	cmp	r2, #229	; 0xe5
   b60bc:	d000      	beq.n	b60c0 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b60be:	b97a      	cbnz	r2, b60e0 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b60c0:	9904      	ldr	r1, [sp, #16]
   b60c2:	2c00      	cmp	r4, #0
   b60c4:	bf08      	it	eq
   b60c6:	4641      	moveq	r1, r8
   b60c8:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b60ca:	9903      	ldr	r1, [sp, #12]
   b60cc:	428c      	cmp	r4, r1
        freeFound++;
   b60ce:	bf3c      	itt	cc
   b60d0:	3401      	addcc	r4, #1
   b60d2:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b60d4:	2a00      	cmp	r2, #0
   b60d6:	d080      	beq.n	b5fda <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b60d8:	2ae5      	cmp	r2, #229	; 0xe5
   b60da:	d105      	bne.n	b60e8 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b60dc:	2600      	movs	r6, #0
   b60de:	e76f      	b.n	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b60e0:	9903      	ldr	r1, [sp, #12]
   b60e2:	428c      	cmp	r4, r1
   b60e4:	bf38      	it	cc
   b60e6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b60e8:	2a2e      	cmp	r2, #46	; 0x2e
   b60ea:	d0f7      	beq.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b60ec:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b60ee:	290f      	cmp	r1, #15
   b60f0:	d14a      	bne.n	b6188 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b60f2:	bb16      	cbnz	r6, b613a <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b60f4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b60f8:	f43f af62 	beq.w	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b60fc:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6100:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6104:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6106:	220d      	movs	r2, #13
   b6108:	f10a 38ff 	add.w	r8, sl, #4294967295
   b610c:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6110:	9a05      	ldr	r2, [sp, #20]
   b6112:	4542      	cmp	r2, r8
   b6114:	d9e2      	bls.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6116:	eba2 0208 	sub.w	r2, r2, r8
   b611a:	9208      	str	r2, [sp, #32]
   b611c:	2200      	movs	r2, #0
   b611e:	eb02 0108 	add.w	r1, r2, r8
   b6122:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6124:	4618      	mov	r0, r3
   b6126:	b2d1      	uxtb	r1, r2
   b6128:	f7ff fd2c 	bl	b5b84 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b612c:	9908      	ldr	r1, [sp, #32]
   b612e:	428a      	cmp	r2, r1
   b6130:	d10d      	bne.n	b614e <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6132:	2800      	cmp	r0, #0
   b6134:	bf18      	it	ne
   b6136:	2600      	movne	r6, #0
   b6138:	e742      	b.n	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b613a:	f10a 3aff 	add.w	sl, sl, #4294967295
   b613e:	fa5f fa8a 	uxtb.w	sl, sl
   b6142:	4552      	cmp	r2, sl
   b6144:	d1ca      	bne.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6146:	7b5a      	ldrb	r2, [r3, #13]
   b6148:	455a      	cmp	r2, fp
   b614a:	d0dc      	beq.n	b6106 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b614c:	e7c6      	b.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b614e:	28ff      	cmp	r0, #255	; 0xff
   b6150:	d8c4      	bhi.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6152:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6156:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b615a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b615c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b615e:	bf9c      	itt	ls
   b6160:	f10e 0020 	addls.w	r0, lr, #32
   b6164:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6168:	4608      	mov	r0, r1
   b616a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b616c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b616e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6172:	f1bc 0f19 	cmp.w	ip, #25
   b6176:	bf9c      	itt	ls
   b6178:	3120      	addls	r1, #32
   b617a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b617c:	4571      	cmp	r1, lr
   b617e:	d1ad      	bne.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6180:	3201      	adds	r2, #1
   b6182:	2a0d      	cmp	r2, #13
   b6184:	d1cb      	bne.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6186:	e71b      	b.n	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6188:	0708      	lsls	r0, r1, #28
   b618a:	d4a7      	bmi.n	b60dc <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b618c:	b15e      	cbz	r6, b61a6 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b618e:	f1ba 0f01 	cmp.w	sl, #1
   b6192:	f47f aeec 	bne.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6196:	4618      	mov	r0, r3
   b6198:	f7ff fd15 	bl	b5bc6 <_ZN7FatFile11lfnChecksumEPh>
   b619c:	4558      	cmp	r0, fp
   b619e:	f47f aee6 	bne.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b61a2:	46b1      	mov	r9, r6
   b61a4:	e00e      	b.n	b61c4 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b61a6:	ee18 1a10 	vmov	r1, s16
   b61aa:	220b      	movs	r2, #11
   b61ac:	4618      	mov	r0, r3
   b61ae:	f006 f9dd 	bl	bc56c <memcmp>
   b61b2:	2800      	cmp	r0, #0
   b61b4:	f47f af04 	bne.w	b5fc0 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b61b8:	f897 9000 	ldrb.w	r9, [r7]
   b61bc:	f019 0901 	ands.w	r9, r9, #1
   b61c0:	f47f af77 	bne.w	b60b2 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b61c4:	9b06      	ldr	r3, [sp, #24]
   b61c6:	0519      	lsls	r1, r3, #20
   b61c8:	f53f aed1 	bmi.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b61cc:	9b06      	ldr	r3, [sp, #24]
   b61ce:	9807      	ldr	r0, [sp, #28]
   b61d0:	f8cd 9000 	str.w	r9, [sp]
   b61d4:	4642      	mov	r2, r8
   b61d6:	4629      	mov	r1, r5
   b61d8:	f000 fa4d 	bl	b6676 <_ZN7FatFile15openCachedEntryEPS_tih>
   b61dc:	e6c8      	b.n	b5f70 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b61de:	2100      	movs	r1, #0
   b61e0:	4628      	mov	r0, r5
   b61e2:	f000 f9e6 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b61e6:	b9a0      	cbnz	r0, b6212 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b61e8:	786b      	ldrb	r3, [r5, #1]
   b61ea:	2b00      	cmp	r3, #0
   b61ec:	f47f aebf 	bne.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b61f0:	4628      	mov	r0, r5
   b61f2:	f000 f89f 	bl	b6334 <_ZN7FatFile13addDirClusterEv>
   b61f6:	2800      	cmp	r0, #0
   b61f8:	f43f aeb9 	beq.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b61fc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b61fe:	791b      	ldrb	r3, [r3, #4]
   b6200:	2b01      	cmp	r3, #1
   b6202:	f63f aefb 	bhi.w	b5ffc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6206:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6208:	3410      	adds	r4, #16
   b620a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b620c:	42a3      	cmp	r3, r4
   b620e:	d8ef      	bhi.n	b61f0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6210:	e6f4      	b.n	b5ffc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6212:	3401      	adds	r4, #1
   b6214:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6216:	e6ed      	b.n	b5ff4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6218:	4639      	mov	r1, r7
   b621a:	4628      	mov	r0, r5
   b621c:	f7ff fe46 	bl	b5eac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6220:	2800      	cmp	r0, #0
   b6222:	f47f aeef 	bne.w	b6004 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6226:	e6a2      	b.n	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6228:	bf14      	ite	ne
   b622a:	f04f 31ff 	movne.w	r1, #4294967295
   b622e:	2100      	moveq	r1, #0
   b6230:	b289      	uxth	r1, r1
   b6232:	e72b      	b.n	b608c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6234:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6238:	bf94      	ite	ls
   b623a:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b623e:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6242:	8091      	strh	r1, [r2, #4]
   b6244:	e72d      	b.n	b60a2 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6246:	4631      	mov	r1, r6
   b6248:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b624a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b624e:	f000 f9b0 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6252:	4604      	mov	r4, r0
   b6254:	2800      	cmp	r0, #0
   b6256:	f43f ae8a 	beq.w	b5f6e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b625a:	2220      	movs	r2, #32
   b625c:	4631      	mov	r1, r6
   b625e:	f006 f9bd 	bl	bc5dc <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6262:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6266:	6023      	str	r3, [r4, #0]
   b6268:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b626c:	6063      	str	r3, [r4, #4]
   b626e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6272:	8123      	strh	r3, [r4, #8]
   b6274:	7dfb      	ldrb	r3, [r7, #23]
   b6276:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6278:	783b      	ldrb	r3, [r7, #0]
   b627a:	f003 0318 	and.w	r3, r3, #24
   b627e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6280:	4b0f      	ldr	r3, [pc, #60]	; (b62c0 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6282:	681b      	ldr	r3, [r3, #0]
   b6284:	b19b      	cbz	r3, b62ae <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6286:	f104 010e 	add.w	r1, r4, #14
   b628a:	f104 0010 	add.w	r0, r4, #16
   b628e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6290:	8a23      	ldrh	r3, [r4, #16]
   b6292:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6294:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6296:	89e3      	ldrh	r3, [r4, #14]
   b6298:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b629a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b629c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b62a0:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b62a4:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b62a8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b62ac:	e78e      	b.n	b61cc <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b62ae:	2321      	movs	r3, #33	; 0x21
   b62b0:	7423      	strb	r3, [r4, #16]
   b62b2:	2328      	movs	r3, #40	; 0x28
   b62b4:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b62b6:	2308      	movs	r3, #8
   b62b8:	73a6      	strb	r6, [r4, #14]
   b62ba:	73e3      	strb	r3, [r4, #15]
   b62bc:	e7e8      	b.n	b6290 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b62be:	bf00      	nop
   b62c0:	2003e610 	.word	0x2003e610

000b62c4 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b62c4:	b510      	push	{r4, lr}
   b62c6:	460c      	mov	r4, r1
    return m_attr;
   b62c8:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b62ca:	b909      	cbnz	r1, b62d0 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b62cc:	2000      	movs	r0, #0
}
   b62ce:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b62d0:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b62d4:	d005      	beq.n	b62e2 <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b62d6:	232f      	movs	r3, #47	; 0x2f
   b62d8:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b62da:	2300      	movs	r3, #0
   b62dc:	7063      	strb	r3, [r4, #1]
  return true;
   b62de:	2001      	movs	r0, #1
   b62e0:	e7f5      	b.n	b62ce <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b62e2:	f000 f865 	bl	b63b0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b62e6:	2800      	cmp	r0, #0
   b62e8:	d0f0      	beq.n	b62cc <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b62ea:	4621      	mov	r1, r4
   b62ec:	f000 f86f 	bl	b63ce <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b62f0:	e7f5      	b.n	b62de <_ZN7FatFile6getSFNEPc+0x1a>

000b62f2 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b62f2:	b538      	push	{r3, r4, r5, lr}
   b62f4:	4604      	mov	r4, r0
   b62f6:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b62f8:	2224      	movs	r2, #36	; 0x24
   b62fa:	2100      	movs	r1, #0
   b62fc:	f006 f96e 	bl	bc5dc <memset>

  m_vol = vol;
   b6300:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b6302:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6304:	2b10      	cmp	r3, #16
   b6306:	d003      	beq.n	b6310 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6308:	2b20      	cmp	r3, #32
   b630a:	d006      	beq.n	b631a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b630c:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b630e:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6310:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6312:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6314:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6316:	70a0      	strb	r0, [r4, #2]
  return true;
   b6318:	e7f9      	b.n	b630e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b631a:	2340      	movs	r3, #64	; 0x40
   b631c:	e7f9      	b.n	b6312 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b631e <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b631e:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6320:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6322:	f043 0304 	orr.w	r3, r3, #4
   b6326:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6328:	f100 0210 	add.w	r2, r0, #16
   b632c:	6880      	ldr	r0, [r0, #8]
   b632e:	f000 bc61 	b.w	b6bf4 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6334 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6338:	7801      	ldrb	r1, [r0, #0]
   b633a:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b633e:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6340:	d003      	beq.n	b634a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6342:	2600      	movs	r6, #0
}
   b6344:	4630      	mov	r0, r6
   b6346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b634a:	6942      	ldr	r2, [r0, #20]
   b634c:	4b17      	ldr	r3, [pc, #92]	; (b63ac <_ZN7FatFile13addDirClusterEv+0x78>)
   b634e:	429a      	cmp	r2, r3
   b6350:	d2f7      	bcs.n	b6342 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6352:	f7ff ffe4 	bl	b631e <_ZN7FatFile10addClusterEv>
   b6356:	4606      	mov	r6, r0
   b6358:	2800      	cmp	r0, #0
   b635a:	d0f2      	beq.n	b6342 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b635c:	6921      	ldr	r1, [r4, #16]
   b635e:	68a0      	ldr	r0, [r4, #8]
   b6360:	f000 fbdd 	bl	b6b1e <_ZNK9FatVolume17clusterFirstBlockEm>
   b6364:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6366:	68a0      	ldr	r0, [r4, #8]
   b6368:	2205      	movs	r2, #5
   b636a:	4639      	mov	r1, r7
   b636c:	3024      	adds	r0, #36	; 0x24
   b636e:	f000 fbb3 	bl	b6ad8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6372:	4680      	mov	r8, r0
   b6374:	2800      	cmp	r0, #0
   b6376:	d0e4      	beq.n	b6342 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6378:	4629      	mov	r1, r5
   b637a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b637e:	f006 f92d 	bl	bc5dc <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6382:	2501      	movs	r5, #1
   b6384:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6386:	791a      	ldrb	r2, [r3, #4]
   b6388:	42aa      	cmp	r2, r5
   b638a:	d909      	bls.n	b63a0 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b638c:	6818      	ldr	r0, [r3, #0]
   b638e:	4642      	mov	r2, r8
   b6390:	19e9      	adds	r1, r5, r7
   b6392:	f000 ff0e 	bl	b71b2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6396:	2800      	cmp	r0, #0
   b6398:	d0d3      	beq.n	b6342 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b639a:	3501      	adds	r5, #1
   b639c:	b2ed      	uxtb	r5, r5
   b639e:	e7f1      	b.n	b6384 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b63a0:	6963      	ldr	r3, [r4, #20]
   b63a2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b63a6:	6163      	str	r3, [r4, #20]
  return true;
   b63a8:	e7cc      	b.n	b6344 <_ZN7FatFile13addDirClusterEv+0x10>
   b63aa:	bf00      	nop
   b63ac:	001ffe00 	.word	0x001ffe00

000b63b0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b63b0:	b510      	push	{r4, lr}
   b63b2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b63b4:	6880      	ldr	r0, [r0, #8]
   b63b6:	460a      	mov	r2, r1
   b63b8:	3024      	adds	r0, #36	; 0x24
   b63ba:	69a1      	ldr	r1, [r4, #24]
   b63bc:	f000 fb8c 	bl	b6ad8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b63c0:	b120      	cbz	r0, b63cc <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b63c2:	88a3      	ldrh	r3, [r4, #4]
   b63c4:	f003 030f 	and.w	r3, r3, #15
   b63c8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b63cc:	bd10      	pop	{r4, pc}

000b63ce <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b63ce:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b63d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63d2:	4604      	mov	r4, r0
   b63d4:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b63d6:	2608      	movs	r6, #8
  uint8_t j = 0;
   b63d8:	4618      	mov	r0, r3
      name[j++] = '.';
   b63da:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b63dc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b63e0:	2a20      	cmp	r2, #32
   b63e2:	d018      	beq.n	b6416 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b63e4:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b63e6:	bf02      	ittt	eq
   b63e8:	540f      	strbeq	r7, [r1, r0]
   b63ea:	1c42      	addeq	r2, r0, #1
   b63ec:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b63ee:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b63f0:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b63f4:	bf08      	it	eq
   b63f6:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b63f8:	f1bc 0f19 	cmp.w	ip, #25
   b63fc:	d806      	bhi.n	b640c <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b63fe:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b6402:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6406:	bf1c      	itt	ne
   b6408:	3220      	addne	r2, #32
   b640a:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b640c:	f100 0c01 	add.w	ip, r0, #1
   b6410:	540a      	strb	r2, [r1, r0]
   b6412:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6416:	3301      	adds	r3, #1
   b6418:	b2db      	uxtb	r3, r3
   b641a:	2b0b      	cmp	r3, #11
   b641c:	d1de      	bne.n	b63dc <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b641e:	2300      	movs	r3, #0
   b6420:	540b      	strb	r3, [r1, r0]
}
   b6422:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6424 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6424:	7803      	ldrb	r3, [r0, #0]
   b6426:	b90b      	cbnz	r3, b642c <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6428:	f7ff bf63 	b.w	b62f2 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b642c:	2000      	movs	r0, #0
   b642e:	4770      	bx	lr

000b6430 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b6430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6434:	7803      	ldrb	r3, [r0, #0]
   b6436:	4604      	mov	r4, r0
   b6438:	4688      	mov	r8, r1
   b643a:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b643c:	2b00      	cmp	r3, #0
   b643e:	d05d      	beq.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
   b6440:	7882      	ldrb	r2, [r0, #2]
   b6442:	07d1      	lsls	r1, r2, #31
   b6444:	d55a      	bpl.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6446:	071a      	lsls	r2, r3, #28
   b6448:	d52d      	bpl.n	b64a6 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b644a:	69c3      	ldr	r3, [r0, #28]
   b644c:	6942      	ldr	r2, [r0, #20]
   b644e:	1a9b      	subs	r3, r3, r2
   b6450:	429d      	cmp	r5, r3
   b6452:	bf28      	it	cs
   b6454:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6456:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6458:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b645c:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b6460:	2e00      	cmp	r6, #0
   b6462:	f000 808f 	beq.w	b6584 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6466:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6468:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b646a:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b646c:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b646e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6472:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b6476:	d51f      	bpl.n	b64b8 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6478:	6a00      	ldr	r0, [r0, #32]
   b647a:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b647c:	68a0      	ldr	r0, [r4, #8]
   b647e:	f1ba 0f00 	cmp.w	sl, #0
   b6482:	d142      	bne.n	b650a <_ZN7FatFile4readEPvj+0xda>
   b6484:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6488:	d33f      	bcc.n	b650a <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b648a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b648c:	4299      	cmp	r1, r3
   b648e:	d03c      	beq.n	b650a <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b6490:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b6494:	d252      	bcs.n	b653c <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b6496:	6800      	ldr	r0, [r0, #0]
   b6498:	4642      	mov	r2, r8
   b649a:	f000 fe01 	bl	b70a0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b649e:	b368      	cbz	r0, b64fc <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b64a0:	f44f 7700 	mov.w	r7, #512	; 0x200
   b64a4:	e044      	b.n	b6530 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b64a6:	069b      	lsls	r3, r3, #26
   b64a8:	d5d5      	bpl.n	b6456 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b64aa:	6883      	ldr	r3, [r0, #8]
   b64ac:	891a      	ldrh	r2, [r3, #8]
   b64ae:	6943      	ldr	r3, [r0, #20]
   b64b0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b64b4:	b29b      	uxth	r3, r3
   b64b6:	e7cb      	b.n	b6450 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b64b8:	f890 9005 	ldrb.w	r9, [r0, #5]
   b64bc:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b64c0:	f1ba 0f00 	cmp.w	sl, #0
   b64c4:	d108      	bne.n	b64d8 <_ZN7FatFile4readEPvj+0xa8>
   b64c6:	f1b9 0f00 	cmp.w	r9, #0
   b64ca:	d105      	bne.n	b64d8 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b64cc:	b95b      	cbnz	r3, b64e6 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b64ce:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b64d0:	bf4c      	ite	mi
   b64d2:	6a03      	ldrmi	r3, [r0, #32]
   b64d4:	6a23      	ldrpl	r3, [r4, #32]
   b64d6:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b64d8:	6921      	ldr	r1, [r4, #16]
   b64da:	68a0      	ldr	r0, [r4, #8]
   b64dc:	f000 fb1f 	bl	b6b1e <_ZNK9FatVolume17clusterFirstBlockEm>
   b64e0:	eb09 0100 	add.w	r1, r9, r0
   b64e4:	e7ca      	b.n	b647c <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b64e6:	6921      	ldr	r1, [r4, #16]
   b64e8:	465a      	mov	r2, fp
   b64ea:	f000 fb1e 	bl	b6b2a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b64ee:	2800      	cmp	r0, #0
   b64f0:	db04      	blt.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b64f2:	d1f1      	bne.n	b64d8 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b64f4:	7823      	ldrb	r3, [r4, #0]
   b64f6:	f013 0f70 	tst.w	r3, #112	; 0x70
   b64fa:	d143      	bne.n	b6584 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b64fc:	7863      	ldrb	r3, [r4, #1]
   b64fe:	f043 0302 	orr.w	r3, r3, #2
   b6502:	7063      	strb	r3, [r4, #1]
  return -1;
   b6504:	f04f 30ff 	mov.w	r0, #4294967295
   b6508:	e03d      	b.n	b6586 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b650a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b650e:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b6510:	f04f 0200 	mov.w	r2, #0
   b6514:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6518:	bf28      	it	cs
   b651a:	4637      	movcs	r7, r6
   b651c:	f000 fadc 	bl	b6ad8 <_ZN8FatCache4readEmh>
      if (!pc) {
   b6520:	2800      	cmp	r0, #0
   b6522:	d0eb      	beq.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6524:	eb00 010a 	add.w	r1, r0, sl
   b6528:	463a      	mov	r2, r7
   b652a:	4640      	mov	r0, r8
   b652c:	f006 f82e 	bl	bc58c <memcpy>
    m_curPosition += n;
   b6530:	6963      	ldr	r3, [r4, #20]
   b6532:	443b      	add	r3, r7
    dst += n;
   b6534:	44b8      	add	r8, r7
    m_curPosition += n;
   b6536:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6538:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b653a:	e791      	b.n	b6460 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b653c:	7822      	ldrb	r2, [r4, #0]
   b653e:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b6540:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6544:	d406      	bmi.n	b6554 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6546:	7902      	ldrb	r2, [r0, #4]
   b6548:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b654c:	b2d2      	uxtb	r2, r2
   b654e:	4592      	cmp	sl, r2
   b6550:	bf28      	it	cs
   b6552:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6554:	4299      	cmp	r1, r3
      n = 512*nb;
   b6556:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b655a:	d208      	bcs.n	b656e <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b655c:	68a0      	ldr	r0, [r4, #8]
   b655e:	4653      	mov	r3, sl
   b6560:	6800      	ldr	r0, [r0, #0]
   b6562:	4642      	mov	r2, r8
   b6564:	f000 fde4 	bl	b7130 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6568:	2800      	cmp	r0, #0
   b656a:	d1e1      	bne.n	b6530 <_ZN7FatFile4readEPvj+0x100>
   b656c:	e7c6      	b.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b656e:	4453      	add	r3, sl
   b6570:	428b      	cmp	r3, r1
   b6572:	d9f3      	bls.n	b655c <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b6574:	3024      	adds	r0, #36	; 0x24
   b6576:	9101      	str	r1, [sp, #4]
   b6578:	f000 fa86 	bl	b6a88 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b657c:	9901      	ldr	r1, [sp, #4]
   b657e:	2800      	cmp	r0, #0
   b6580:	d1ec      	bne.n	b655c <_ZN7FatFile4readEPvj+0x12c>
   b6582:	e7bb      	b.n	b64fc <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b6584:	1ba8      	subs	r0, r5, r6
}
   b6586:	b003      	add	sp, #12
   b6588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b658c <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b658c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b658e:	2201      	movs	r2, #1
   b6590:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b6594:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b6598:	4604      	mov	r4, r0
   b659a:	f7ff ff49 	bl	b6430 <_ZN7FatFile4readEPvj>
   b659e:	2801      	cmp	r0, #1
   b65a0:	bf0a      	itet	eq
   b65a2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b65a6:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b65aa:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b65ae:	b002      	add	sp, #8
   b65b0:	bd70      	pop	{r4, r5, r6, pc}

000b65b2 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b65b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b65b4:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b65b6:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b65ba:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b65bc:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b65c0:	d000      	beq.n	b65c4 <_ZN7FatFile12readDirCacheEb+0x12>
   b65c2:	b999      	cbnz	r1, b65ec <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b65c4:	2201      	movs	r2, #1
   b65c6:	f10d 0107 	add.w	r1, sp, #7
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff ff30 	bl	b6430 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b65d0:	b240      	sxtb	r0, r0
   b65d2:	2801      	cmp	r0, #1
   b65d4:	d002      	beq.n	b65dc <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b65d6:	2000      	movs	r0, #0
}
   b65d8:	b003      	add	sp, #12
   b65da:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b65dc:	6963      	ldr	r3, [r4, #20]
   b65de:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b65e0:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b65e2:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b65e4:	3030      	adds	r0, #48	; 0x30
   b65e6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b65ea:	e7f5      	b.n	b65d8 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b65ec:	3320      	adds	r3, #32
   b65ee:	e7f7      	b.n	b65e0 <_ZN7FatFile12readDirCacheEb+0x2e>

000b65f0 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b65f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b65f4:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b65f6:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b65f8:	4604      	mov	r4, r0
   b65fa:	460d      	mov	r5, r1
  if (!isOpen()) {
   b65fc:	b162      	cbz	r2, b6618 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b65fe:	6940      	ldr	r0, [r0, #20]
   b6600:	4288      	cmp	r0, r1
   b6602:	d002      	beq.n	b660a <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6604:	b919      	cbnz	r1, b660e <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6606:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6608:	6165      	str	r5, [r4, #20]
    return true;
   b660a:	2001      	movs	r0, #1
   b660c:	e006      	b.n	b661c <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b660e:	0716      	lsls	r6, r2, #28
   b6610:	d506      	bpl.n	b6620 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b6612:	69e3      	ldr	r3, [r4, #28]
   b6614:	428b      	cmp	r3, r1
   b6616:	d20b      	bcs.n	b6630 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6618:	6127      	str	r7, [r4, #16]
  return false;
   b661a:	2000      	movs	r0, #0
}
   b661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b6620:	0691      	lsls	r1, r2, #26
   b6622:	d505      	bpl.n	b6630 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6624:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6626:	891b      	ldrh	r3, [r3, #8]
   b6628:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b662c:	d9ec      	bls.n	b6608 <_ZN7FatFile7seekSetEm+0x18>
   b662e:	e7f3      	b.n	b6618 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6630:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6634:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6638:	1e43      	subs	r3, r0, #1
   b663a:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b663e:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b6640:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b6642:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6644:	42b3      	cmp	r3, r6
   b6646:	d800      	bhi.n	b664a <_ZN7FatFile7seekSetEm+0x5a>
   b6648:	b998      	cbnz	r0, b6672 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b664a:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b664c:	bf4c      	ite	mi
   b664e:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b6652:	6a23      	ldrpl	r3, [r4, #32]
   b6654:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6656:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b665a:	2e00      	cmp	r6, #0
   b665c:	d0d4      	beq.n	b6608 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b665e:	6921      	ldr	r1, [r4, #16]
   b6660:	68a0      	ldr	r0, [r4, #8]
   b6662:	4642      	mov	r2, r8
   b6664:	f000 fa61 	bl	b6b2a <_ZN9FatVolume6fatGetEmPm>
   b6668:	2800      	cmp	r0, #0
   b666a:	f106 36ff 	add.w	r6, r6, #4294967295
   b666e:	dcf4      	bgt.n	b665a <_ZN7FatFile7seekSetEm+0x6a>
   b6670:	e7d2      	b.n	b6618 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b6672:	1af6      	subs	r6, r6, r3
   b6674:	e7ef      	b.n	b6656 <_ZN7FatFile7seekSetEm+0x66>

000b6676 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b6676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6678:	460f      	mov	r7, r1
   b667a:	4604      	mov	r4, r0
   b667c:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b667e:	2100      	movs	r1, #0
   b6680:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b6682:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b6684:	f005 ffaa 	bl	bc5dc <memset>
  m_vol = dirFile->m_vol;
   b6688:	68b8      	ldr	r0, [r7, #8]
   b668a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b668c:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b668e:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b6692:	6a3b      	ldr	r3, [r7, #32]
   b6694:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b6696:	016a      	lsls	r2, r5, #5
   b6698:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b669c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b66a0:	071f      	lsls	r7, r3, #28
   b66a2:	d444      	bmi.n	b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b66a4:	f003 0317 	and.w	r3, r3, #23
   b66a8:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b66aa:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b66ae:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b66b2:	bf04      	itt	eq
   b66b4:	f043 0308 	orreq.w	r3, r3, #8
   b66b8:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b66ba:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b66be:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b66c0:	f006 0303 	and.w	r3, r6, #3
   b66c4:	2b01      	cmp	r3, #1
   b66c6:	d02c      	beq.n	b6722 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b66c8:	2b02      	cmp	r3, #2
   b66ca:	d028      	beq.n	b671e <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b66cc:	bb7b      	cbnz	r3, b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b66ce:	0571      	lsls	r1, r6, #21
   b66d0:	d42d      	bmi.n	b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b66d2:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b66d4:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b66d6:	78a1      	ldrb	r1, [r4, #2]
   b66d8:	078b      	lsls	r3, r1, #30
   b66da:	d504      	bpl.n	b66e6 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b66dc:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b66de:	06df      	lsls	r7, r3, #27
   b66e0:	d425      	bmi.n	b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b66e2:	07dd      	lsls	r5, r3, #31
   b66e4:	d423      	bmi.n	b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b66e6:	11b3      	asrs	r3, r6, #6
   b66e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b66ec:	f006 0508 	and.w	r5, r6, #8
   b66f0:	432b      	orrs	r3, r5
   b66f2:	430b      	orrs	r3, r1
   b66f4:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b66f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b66f8:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b66fa:	1883      	adds	r3, r0, r2
   b66fc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b6700:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6708:	0572      	lsls	r2, r6, #21
   b670a:	d513      	bpl.n	b6734 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b670c:	b959      	cbnz	r1, b6726 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b670e:	78a3      	ldrb	r3, [r4, #2]
   b6710:	f043 0304 	orr.w	r3, r3, #4
   b6714:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6716:	0473      	lsls	r3, r6, #17
   b6718:	d410      	bmi.n	b673c <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b671a:	2001      	movs	r0, #1
}
   b671c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b671e:	2303      	movs	r3, #3
   b6720:	e7d8      	b.n	b66d4 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b6722:	2302      	movs	r3, #2
   b6724:	e7d6      	b.n	b66d4 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6726:	f000 faa0 	bl	b6c6a <_ZN9FatVolume9freeChainEm>
   b672a:	2800      	cmp	r0, #0
   b672c:	d1ef      	bne.n	b670e <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b672e:	2000      	movs	r0, #0
   b6730:	7020      	strb	r0, [r4, #0]
  return false;
   b6732:	e7f3      	b.n	b671c <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6734:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6738:	61e3      	str	r3, [r4, #28]
   b673a:	e7ec      	b.n	b6716 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b673c:	69e1      	ldr	r1, [r4, #28]
   b673e:	4620      	mov	r0, r4
   b6740:	f7ff ff56 	bl	b65f0 <_ZN7FatFile7seekSetEm>
   b6744:	2800      	cmp	r0, #0
   b6746:	d1e8      	bne.n	b671a <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6748:	e7f1      	b.n	b672e <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b674a <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b674a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b674e:	7803      	ldrb	r3, [r0, #0]
   b6750:	4607      	mov	r7, r0
   b6752:	460d      	mov	r5, r1
   b6754:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6756:	bb53      	cbnz	r3, b67ae <_ZN7FatFile8openNextEPS_i+0x64>
   b6758:	780b      	ldrb	r3, [r1, #0]
   b675a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b675e:	d026      	beq.n	b67ae <_ZN7FatFile8openNextEPS_i+0x64>
   b6760:	694c      	ldr	r4, [r1, #20]
   b6762:	f014 041f 	ands.w	r4, r4, #31
   b6766:	d122      	bne.n	b67ae <_ZN7FatFile8openNextEPS_i+0x64>
   b6768:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b676a:	2100      	movs	r1, #0
   b676c:	4628      	mov	r0, r5
    return m_curPosition;
   b676e:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b6772:	f7ff ff1e 	bl	b65b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6776:	b1d0      	cbz	r0, b67ae <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b6778:	7806      	ldrb	r6, [r0, #0]
   b677a:	b1c6      	cbz	r6, b67ae <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b677c:	2e2e      	cmp	r6, #46	; 0x2e
   b677e:	d010      	beq.n	b67a2 <_ZN7FatFile8openNextEPS_i+0x58>
   b6780:	2ee5      	cmp	r6, #229	; 0xe5
   b6782:	d00e      	beq.n	b67a2 <_ZN7FatFile8openNextEPS_i+0x58>
   b6784:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6786:	071a      	lsls	r2, r3, #28
   b6788:	d413      	bmi.n	b67b2 <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b678a:	b964      	cbnz	r4, b67a6 <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b678c:	9400      	str	r4, [sp, #0]
   b678e:	4653      	mov	r3, sl
   b6790:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b6794:	4629      	mov	r1, r5
   b6796:	4638      	mov	r0, r7
   b6798:	f7ff ff6d 	bl	b6676 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b679c:	b002      	add	sp, #8
   b679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b67a2:	2400      	movs	r4, #0
   b67a4:	e7e1      	b.n	b676a <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b67a6:	f7ff fa0e 	bl	b5bc6 <_ZN7FatFile11lfnChecksumEPh>
   b67aa:	4540      	cmp	r0, r8
   b67ac:	d0ee      	beq.n	b678c <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b67ae:	2000      	movs	r0, #0
   b67b0:	e7f4      	b.n	b679c <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b67b2:	2b0f      	cmp	r3, #15
   b67b4:	d1f5      	bne.n	b67a2 <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b67b6:	0673      	lsls	r3, r6, #25
   b67b8:	d5d7      	bpl.n	b676a <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b67ba:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b67be:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b67c2:	e7d2      	b.n	b676a <_ZN7FatFile8openNextEPS_i+0x20>

000b67c4 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b67c4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b67c6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b67c8:	4604      	mov	r4, r0
  if (!isOpen()) {
   b67ca:	b90b      	cbnz	r3, b67d0 <_ZN7FatFile4syncEv+0xc>
    return true;
   b67cc:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b67ce:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b67d0:	7883      	ldrb	r3, [r0, #2]
   b67d2:	075a      	lsls	r2, r3, #29
   b67d4:	d523      	bpl.n	b681e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b67d6:	2101      	movs	r1, #1
   b67d8:	f7ff fdea 	bl	b63b0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b67dc:	4605      	mov	r5, r0
   b67de:	b928      	cbnz	r0, b67ec <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b67e0:	7863      	ldrb	r3, [r4, #1]
   b67e2:	f043 0301 	orr.w	r3, r3, #1
   b67e6:	7063      	strb	r3, [r4, #1]
  return false;
   b67e8:	2000      	movs	r0, #0
   b67ea:	e7f0      	b.n	b67ce <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b67ec:	7803      	ldrb	r3, [r0, #0]
   b67ee:	2be5      	cmp	r3, #229	; 0xe5
   b67f0:	d0f6      	beq.n	b67e0 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b67f2:	7823      	ldrb	r3, [r4, #0]
   b67f4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b67f6:	bf44      	itt	mi
   b67f8:	69e3      	ldrmi	r3, [r4, #28]
   b67fa:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b67fc:	6a23      	ldr	r3, [r4, #32]
   b67fe:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b6800:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b6802:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6804:	4b09      	ldr	r3, [pc, #36]	; (b682c <_ZN7FatFile4syncEv+0x68>)
   b6806:	681b      	ldr	r3, [r3, #0]
   b6808:	b12b      	cbz	r3, b6816 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b680a:	f100 0116 	add.w	r1, r0, #22
   b680e:	3018      	adds	r0, #24
   b6810:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b6812:	8b2b      	ldrh	r3, [r5, #24]
   b6814:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6816:	78a3      	ldrb	r3, [r4, #2]
   b6818:	f023 0304 	bic.w	r3, r3, #4
   b681c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b681e:	68a0      	ldr	r0, [r4, #8]
   b6820:	f7ff f9c4 	bl	b5bac <_ZN9FatVolume9cacheSyncEv>
   b6824:	2800      	cmp	r0, #0
   b6826:	d0db      	beq.n	b67e0 <_ZN7FatFile4syncEv+0x1c>
   b6828:	e7d0      	b.n	b67cc <_ZN7FatFile4syncEv+0x8>
   b682a:	bf00      	nop
   b682c:	2003e610 	.word	0x2003e610

000b6830 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b6830:	b510      	push	{r4, lr}
   b6832:	4604      	mov	r4, r0
  bool rtn = sync();
   b6834:	f7ff ffc6 	bl	b67c4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6838:	2300      	movs	r3, #0
   b683a:	7023      	strb	r3, [r4, #0]
}
   b683c:	bd10      	pop	{r4, pc}

000b683e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b683e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6840:	b093      	sub	sp, #76	; 0x4c
   b6842:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6844:	2300      	movs	r3, #0
   b6846:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6848:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b684a:	9201      	str	r2, [sp, #4]
   b684c:	4606      	mov	r6, r0
   b684e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b6850:	b113      	cbz	r3, b6858 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b6852:	2000      	movs	r0, #0
}
   b6854:	b013      	add	sp, #76	; 0x4c
   b6856:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6858:	780b      	ldrb	r3, [r1, #0]
   b685a:	f013 0f70 	tst.w	r3, #112	; 0x70
   b685e:	d0f8      	beq.n	b6852 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6860:	7813      	ldrb	r3, [r2, #0]
   b6862:	2b2f      	cmp	r3, #47	; 0x2f
   b6864:	d112      	bne.n	b688c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6866:	9a01      	ldr	r2, [sp, #4]
   b6868:	7813      	ldrb	r3, [r2, #0]
   b686a:	2b2f      	cmp	r3, #47	; 0x2f
   b686c:	d102      	bne.n	b6874 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b686e:	3201      	adds	r2, #1
   b6870:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6872:	e7f8      	b.n	b6866 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6874:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6876:	b91b      	cbnz	r3, b6880 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6878:	4630      	mov	r0, r6
   b687a:	f7ff fdd3 	bl	b6424 <_ZN7FatFile8openRootEP9FatVolume>
   b687e:	e7e9      	b.n	b6854 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6880:	a809      	add	r0, sp, #36	; 0x24
   b6882:	f7ff fd36 	bl	b62f2 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6886:	2800      	cmp	r0, #0
   b6888:	d0e3      	beq.n	b6852 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b688a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b688c:	9801      	ldr	r0, [sp, #4]
   b688e:	aa01      	add	r2, sp, #4
   b6890:	a903      	add	r1, sp, #12
   b6892:	f7ff fa2d 	bl	b5cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6896:	2800      	cmp	r0, #0
   b6898:	d0db      	beq.n	b6852 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b689a:	9b01      	ldr	r3, [sp, #4]
   b689c:	781b      	ldrb	r3, [r3, #0]
   b689e:	b19b      	cbz	r3, b68c8 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b68a0:	2300      	movs	r3, #0
   b68a2:	aa03      	add	r2, sp, #12
   b68a4:	4621      	mov	r1, r4
   b68a6:	4630      	mov	r0, r6
   b68a8:	f7ff fb54 	bl	b5f54 <_ZN7FatFile4openEPS_P7fname_ti>
   b68ac:	2800      	cmp	r0, #0
   b68ae:	d0d0      	beq.n	b6852 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b68b0:	4635      	mov	r5, r6
   b68b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68b4:	ac09      	add	r4, sp, #36	; 0x24
   b68b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68bc:	682b      	ldr	r3, [r5, #0]
   b68be:	6023      	str	r3, [r4, #0]
    close();
   b68c0:	4630      	mov	r0, r6
   b68c2:	f7ff ffb5 	bl	b6830 <_ZN7FatFile5closeEv>
  while (1) {
   b68c6:	e7e0      	b.n	b688a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b68c8:	463b      	mov	r3, r7
   b68ca:	aa03      	add	r2, sp, #12
   b68cc:	4621      	mov	r1, r4
   b68ce:	4630      	mov	r0, r6
   b68d0:	f7ff fb40 	bl	b5f54 <_ZN7FatFile4openEPS_P7fname_ti>
   b68d4:	e7be      	b.n	b6854 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b68d8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b68d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68dc:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b68de:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68e0:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b68e2:	4604      	mov	r4, r0
   b68e4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b68e6:	d55b      	bpl.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b68e8:	7883      	ldrb	r3, [r0, #2]
   b68ea:	079a      	lsls	r2, r3, #30
   b68ec:	d558      	bpl.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b68ee:	071b      	lsls	r3, r3, #28
   b68f0:	d451      	bmi.n	b6996 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b68f2:	6963      	ldr	r3, [r4, #20]
   b68f4:	43db      	mvns	r3, r3
   b68f6:	42bb      	cmp	r3, r7
   b68f8:	d352      	bcc.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b68fa:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b68fc:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6900:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b6902:	f1b8 0f00 	cmp.w	r8, #0
   b6906:	f000 8091 	beq.w	b6a2c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b690a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b690c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b690e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b6912:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6916:	d10e      	bne.n	b6936 <_ZN7FatFile5writeEPKvj+0x5e>
   b6918:	b96d      	cbnz	r5, b6936 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b691a:	6921      	ldr	r1, [r4, #16]
   b691c:	2900      	cmp	r1, #0
   b691e:	d046      	beq.n	b69ae <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6920:	4652      	mov	r2, sl
   b6922:	f000 f902 	bl	b6b2a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6926:	2800      	cmp	r0, #0
   b6928:	db3a      	blt.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b692a:	d104      	bne.n	b6936 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b692c:	4620      	mov	r0, r4
   b692e:	f7ff fcf6 	bl	b631e <_ZN7FatFile10addClusterEv>
   b6932:	2800      	cmp	r0, #0
   b6934:	d034      	beq.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6936:	6921      	ldr	r1, [r4, #16]
   b6938:	68a0      	ldr	r0, [r4, #8]
   b693a:	f000 f8f0 	bl	b6b1e <_ZNK9FatVolume17clusterFirstBlockEm>
   b693e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b6940:	68a0      	ldr	r0, [r4, #8]
   b6942:	b915      	cbnz	r5, b694a <_ZN7FatFile5writeEPKvj+0x72>
   b6944:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6948:	d23f      	bcs.n	b69ca <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b694a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b694e:	4546      	cmp	r6, r8
   b6950:	bf28      	it	cs
   b6952:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6954:	2d00      	cmp	r5, #0
   b6956:	d136      	bne.n	b69c6 <_ZN7FatFile5writeEPKvj+0xee>
   b6958:	6962      	ldr	r2, [r4, #20]
   b695a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b695c:	429a      	cmp	r2, r3
   b695e:	bf34      	ite	cc
   b6960:	2201      	movcc	r2, #1
   b6962:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6964:	3024      	adds	r0, #36	; 0x24
   b6966:	f000 f8b7 	bl	b6ad8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b696a:	b1c8      	cbz	r0, b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b696c:	4428      	add	r0, r5
   b696e:	4632      	mov	r2, r6
   b6970:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6972:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6974:	f005 fe0a 	bl	bc58c <memcpy>
      if (512 == (n + blockOffset)) {
   b6978:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b697c:	d104      	bne.n	b6988 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b697e:	68a0      	ldr	r0, [r4, #8]
   b6980:	3024      	adds	r0, #36	; 0x24
   b6982:	f000 f881 	bl	b6a88 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6986:	b158      	cbz	r0, b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6988:	6963      	ldr	r3, [r4, #20]
   b698a:	4433      	add	r3, r6
   b698c:	6163      	str	r3, [r4, #20]
    src += n;
   b698e:	44b1      	add	r9, r6
    nToWrite -= n;
   b6990:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6994:	e7b4      	b.n	b6900 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6996:	69c1      	ldr	r1, [r0, #28]
   b6998:	f7ff fe2a 	bl	b65f0 <_ZN7FatFile7seekSetEm>
   b699c:	2800      	cmp	r0, #0
   b699e:	d1a8      	bne.n	b68f2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b69a0:	7863      	ldrb	r3, [r4, #1]
   b69a2:	f043 0301 	orr.w	r3, r3, #1
   b69a6:	7063      	strb	r3, [r4, #1]
  return -1;
   b69a8:	f04f 30ff 	mov.w	r0, #4294967295
   b69ac:	e050      	b.n	b6a50 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b69ae:	6a23      	ldr	r3, [r4, #32]
   b69b0:	b93b      	cbnz	r3, b69c2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b69b2:	4620      	mov	r0, r4
   b69b4:	f7ff fcb3 	bl	b631e <_ZN7FatFile10addClusterEv>
   b69b8:	2800      	cmp	r0, #0
   b69ba:	d0f1      	beq.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b69bc:	6923      	ldr	r3, [r4, #16]
   b69be:	6223      	str	r3, [r4, #32]
   b69c0:	e7b9      	b.n	b6936 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b69c2:	6123      	str	r3, [r4, #16]
   b69c4:	e7b7      	b.n	b6936 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b69c6:	2201      	movs	r2, #1
   b69c8:	e7cc      	b.n	b6964 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b69ca:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b69ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b69d0:	d31b      	bcc.n	b6a0a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b69d2:	f890 c004 	ldrb.w	ip, [r0, #4]
   b69d6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b69da:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b69dc:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b69e0:	4573      	cmp	r3, lr
   b69e2:	bf28      	it	cs
   b69e4:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69e6:	4291      	cmp	r1, r2
      n = 512*nb;
   b69e8:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b69ec:	d307      	bcc.n	b69fe <_ZN7FatFile5writeEPKvj+0x126>
   b69ee:	441a      	add	r2, r3
   b69f0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b69f2:	bf82      	ittt	hi
   b69f4:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b69f8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b69fc:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b69fe:	68a5      	ldr	r5, [r4, #8]
   b6a00:	464a      	mov	r2, r9
   b6a02:	6828      	ldr	r0, [r5, #0]
   b6a04:	f000 fc4b 	bl	b729e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6a08:	e7bd      	b.n	b6986 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6a0a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6a0c:	bf02      	ittt	eq
   b6a0e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b6a12:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6a16:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6a18:	68a3      	ldr	r3, [r4, #8]
   b6a1a:	464a      	mov	r2, r9
   b6a1c:	6818      	ldr	r0, [r3, #0]
   b6a1e:	f000 fbc8 	bl	b71b2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6a22:	2800      	cmp	r0, #0
   b6a24:	d0bc      	beq.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6a26:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6a2a:	e7ad      	b.n	b6988 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6a2c:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a2e:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6a30:	42b2      	cmp	r2, r6
   b6a32:	d204      	bcs.n	b6a3e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6a34:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a36:	f043 0304 	orr.w	r3, r3, #4
   b6a3a:	70a3      	strb	r3, [r4, #2]
   b6a3c:	e003      	b.n	b6a46 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6a3e:	4a08      	ldr	r2, [pc, #32]	; (b6a60 <_ZN7FatFile5writeEPKvj+0x188>)
   b6a40:	6812      	ldr	r2, [r2, #0]
   b6a42:	2a00      	cmp	r2, #0
   b6a44:	d1f7      	bne.n	b6a36 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6a46:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6a4a:	2b00      	cmp	r3, #0
   b6a4c:	db02      	blt.n	b6a54 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6a4e:	4638      	mov	r0, r7
}
   b6a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6a54:	4620      	mov	r0, r4
   b6a56:	f7ff feb5 	bl	b67c4 <_ZN7FatFile4syncEv>
   b6a5a:	2800      	cmp	r0, #0
   b6a5c:	d1f7      	bne.n	b6a4e <_ZN7FatFile5writeEPKvj+0x176>
   b6a5e:	e79f      	b.n	b69a0 <_ZN7FatFile5writeEPKvj+0xc8>
   b6a60:	2003e610 	.word	0x2003e610

000b6a64 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a64:	b513      	push	{r0, r1, r4, lr}
   b6a66:	4604      	mov	r4, r0
    }
   b6a68:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a6a:	b159      	cbz	r1, b6a84 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a6c:	9101      	str	r1, [sp, #4]
   b6a6e:	f005 fe40 	bl	bc6f2 <strlen>
   b6a72:	6823      	ldr	r3, [r4, #0]
   b6a74:	9901      	ldr	r1, [sp, #4]
   b6a76:	68db      	ldr	r3, [r3, #12]
   b6a78:	4602      	mov	r2, r0
   b6a7a:	4620      	mov	r0, r4
    }
   b6a7c:	b002      	add	sp, #8
   b6a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a82:	4718      	bx	r3
    }
   b6a84:	b002      	add	sp, #8
   b6a86:	bd10      	pop	{r4, pc}

000b6a88 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6a8a:	7803      	ldrb	r3, [r0, #0]
   b6a8c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6a8e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6a90:	d520      	bpl.n	b6ad4 <_ZN8FatCache4syncEv+0x4c>
   b6a92:	6843      	ldr	r3, [r0, #4]
   b6a94:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6a96:	f100 020c 	add.w	r2, r0, #12
   b6a9a:	6818      	ldr	r0, [r3, #0]
   b6a9c:	9201      	str	r2, [sp, #4]
   b6a9e:	f000 fb88 	bl	b71b2 <_ZN9SdSpiCard10writeBlockEmPKh>
   b6aa2:	9a01      	ldr	r2, [sp, #4]
   b6aa4:	4605      	mov	r5, r0
   b6aa6:	b918      	cbnz	r0, b6ab0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6aa8:	2500      	movs	r5, #0
}
   b6aaa:	4628      	mov	r0, r5
   b6aac:	b003      	add	sp, #12
   b6aae:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6ab0:	7823      	ldrb	r3, [r4, #0]
   b6ab2:	079b      	lsls	r3, r3, #30
   b6ab4:	d404      	bmi.n	b6ac0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6ab6:	7823      	ldrb	r3, [r4, #0]
   b6ab8:	f023 0301 	bic.w	r3, r3, #1
   b6abc:	7023      	strb	r3, [r4, #0]
   b6abe:	e7f4      	b.n	b6aaa <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6ac0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6ac4:	6919      	ldr	r1, [r3, #16]
   b6ac6:	4401      	add	r1, r0
   b6ac8:	6818      	ldr	r0, [r3, #0]
   b6aca:	f000 fb72 	bl	b71b2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6ace:	2800      	cmp	r0, #0
   b6ad0:	d1f1      	bne.n	b6ab6 <_ZN8FatCache4syncEv+0x2e>
   b6ad2:	e7e9      	b.n	b6aa8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6ad4:	2501      	movs	r5, #1
   b6ad6:	e7e8      	b.n	b6aaa <_ZN8FatCache4syncEv+0x22>

000b6ad8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6ad8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6ada:	6883      	ldr	r3, [r0, #8]
   b6adc:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6ade:	4604      	mov	r4, r0
   b6ae0:	460e      	mov	r6, r1
   b6ae2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6ae4:	d009      	beq.n	b6afa <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6ae6:	f7ff ffcf 	bl	b6a88 <_ZN8FatCache4syncEv>
   b6aea:	b908      	cbnz	r0, b6af0 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6aec:	2000      	movs	r0, #0
}
   b6aee:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6af0:	076b      	lsls	r3, r5, #29
   b6af2:	d50a      	bpl.n	b6b0a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6af4:	2300      	movs	r3, #0
   b6af6:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6af8:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6afa:	7822      	ldrb	r2, [r4, #0]
   b6afc:	f005 0503 	and.w	r5, r5, #3
   b6b00:	4620      	mov	r0, r4
   b6b02:	4315      	orrs	r5, r2
   b6b04:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6b08:	e7f1      	b.n	b6aee <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6b0a:	6863      	ldr	r3, [r4, #4]
   b6b0c:	f104 020c 	add.w	r2, r4, #12
   b6b10:	6818      	ldr	r0, [r3, #0]
   b6b12:	4631      	mov	r1, r6
   b6b14:	f000 fac4 	bl	b70a0 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6b18:	2800      	cmp	r0, #0
   b6b1a:	d1eb      	bne.n	b6af4 <_ZN8FatCache4readEmh+0x1c>
   b6b1c:	e7e6      	b.n	b6aec <_ZN8FatCache4readEmh+0x14>

000b6b1e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6b1e:	7983      	ldrb	r3, [r0, #6]
   b6b20:	6940      	ldr	r0, [r0, #20]
   b6b22:	3902      	subs	r1, #2
   b6b24:	4099      	lsls	r1, r3
}
   b6b26:	4408      	add	r0, r1
   b6b28:	4770      	bx	lr

000b6b2a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b2a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6b2c:	b570      	push	{r4, r5, r6, lr}
   b6b2e:	4605      	mov	r5, r0
   b6b30:	460c      	mov	r4, r1
   b6b32:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b34:	d802      	bhi.n	b6b3c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6b36:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6b3a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b3c:	69c3      	ldr	r3, [r0, #28]
   b6b3e:	428b      	cmp	r3, r1
   b6b40:	d3f9      	bcc.n	b6b36 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6b42:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6b44:	2b20      	cmp	r3, #32
   b6b46:	d116      	bne.n	b6b76 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6b48:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6b4a:	2202      	movs	r2, #2
   b6b4c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6b50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6b54:	f7ff ffc0 	bl	b6ad8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6b58:	2800      	cmp	r0, #0
   b6b5a:	d0ec      	beq.n	b6b36 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6b5c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6b60:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6b64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6b68:	69ea      	ldr	r2, [r5, #28]
   b6b6a:	429a      	cmp	r2, r3
  *value = next;
   b6b6c:	bf26      	itte	cs
   b6b6e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6b70:	2001      	movcs	r0, #1
    return 0;
   b6b72:	2000      	movcc	r0, #0
   b6b74:	e7e1      	b.n	b6b3a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6b76:	2b10      	cmp	r3, #16
   b6b78:	d1dd      	bne.n	b6b36 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6b7a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6b7e:	6981      	ldr	r1, [r0, #24]
   b6b80:	2202      	movs	r2, #2
   b6b82:	4419      	add	r1, r3
   b6b84:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6b88:	f7ff ffa6 	bl	b6ad8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6b8c:	2800      	cmp	r0, #0
   b6b8e:	d0d2      	beq.n	b6b36 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6b90:	b2e4      	uxtb	r4, r4
   b6b92:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6b96:	e7e7      	b.n	b6b68 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6b98 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b98:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6b9a:	b538      	push	{r3, r4, r5, lr}
   b6b9c:	460c      	mov	r4, r1
   b6b9e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6ba0:	d801      	bhi.n	b6ba6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6ba2:	2000      	movs	r0, #0
}
   b6ba4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6ba6:	69c3      	ldr	r3, [r0, #28]
   b6ba8:	428b      	cmp	r3, r1
   b6baa:	d3fa      	bcc.n	b6ba2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6bac:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6bae:	2b20      	cmp	r3, #32
   b6bb0:	d10f      	bne.n	b6bd2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6bb2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6bb4:	2203      	movs	r2, #3
   b6bb6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6bba:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6bbe:	f7ff ff8b 	bl	b6ad8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6bc2:	2800      	cmp	r0, #0
   b6bc4:	d0ed      	beq.n	b6ba2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6bc6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6bca:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6bce:	2001      	movs	r0, #1
   b6bd0:	e7e8      	b.n	b6ba4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6bd2:	2b10      	cmp	r3, #16
   b6bd4:	d1e5      	bne.n	b6ba2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6bd6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6bda:	6981      	ldr	r1, [r0, #24]
   b6bdc:	2203      	movs	r2, #3
   b6bde:	4419      	add	r1, r3
   b6be0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6be4:	f7ff ff78 	bl	b6ad8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6be8:	2800      	cmp	r0, #0
   b6bea:	d0da      	beq.n	b6ba2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6bec:	b2e4      	uxtb	r4, r4
   b6bee:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6bf2:	e7ec      	b.n	b6bce <_ZN9FatVolume6fatPutEmm+0x36>

000b6bf4 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6bf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6bf8:	68c4      	ldr	r4, [r0, #12]
   b6bfa:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6bfc:	4605      	mov	r5, r0
   b6bfe:	460e      	mov	r6, r1
   b6c00:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6c02:	d301      	bcc.n	b6c08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6c04:	2701      	movs	r7, #1
   b6c06:	e001      	b.n	b6c0c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6c08:	460c      	mov	r4, r1
    setStart = false;
   b6c0a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6c0c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6c0e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6c10:	42a3      	cmp	r3, r4
   b6c12:	d202      	bcs.n	b6c1a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6c14:	b9c7      	cbnz	r7, b6c48 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6c16:	68ec      	ldr	r4, [r5, #12]
   b6c18:	e7f4      	b.n	b6c04 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6c1a:	42a6      	cmp	r6, r4
   b6c1c:	d014      	beq.n	b6c48 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6c1e:	aa01      	add	r2, sp, #4
   b6c20:	4621      	mov	r1, r4
   b6c22:	4628      	mov	r0, r5
   b6c24:	f7ff ff81 	bl	b6b2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	db0d      	blt.n	b6c48 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6c2c:	d0ee      	beq.n	b6c0c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6c2e:	9b01      	ldr	r3, [sp, #4]
   b6c30:	2b00      	cmp	r3, #0
   b6c32:	d1eb      	bne.n	b6c0c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6c34:	b107      	cbz	r7, b6c38 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6c36:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6c38:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6c3c:	4621      	mov	r1, r4
   b6c3e:	4628      	mov	r0, r5
   b6c40:	f7ff ffaa 	bl	b6b98 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6c44:	4607      	mov	r7, r0
   b6c46:	b920      	cbnz	r0, b6c52 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6c48:	2700      	movs	r7, #0
}
   b6c4a:	4638      	mov	r0, r7
   b6c4c:	b002      	add	sp, #8
   b6c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6c52:	b916      	cbnz	r6, b6c5a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6c54:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6c58:	e7f7      	b.n	b6c4a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6c5a:	4622      	mov	r2, r4
   b6c5c:	4631      	mov	r1, r6
   b6c5e:	4628      	mov	r0, r5
   b6c60:	f7ff ff9a 	bl	b6b98 <_ZN9FatVolume6fatPutEmm>
   b6c64:	2800      	cmp	r0, #0
   b6c66:	d1f5      	bne.n	b6c54 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6c68:	e7ee      	b.n	b6c48 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6c6a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c6c:	4605      	mov	r5, r0
   b6c6e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6c70:	aa01      	add	r2, sp, #4
   b6c72:	4621      	mov	r1, r4
   b6c74:	4628      	mov	r0, r5
   b6c76:	f7ff ff58 	bl	b6b2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6c7a:	1e06      	subs	r6, r0, #0
   b6c7c:	db10      	blt.n	b6ca0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6c7e:	2200      	movs	r2, #0
   b6c80:	4621      	mov	r1, r4
   b6c82:	4628      	mov	r0, r5
   b6c84:	f7ff ff88 	bl	b6b98 <_ZN9FatVolume6fatPutEmm>
   b6c88:	b150      	cbz	r0, b6ca0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6c8a:	68eb      	ldr	r3, [r5, #12]
   b6c8c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6c8e:	bf24      	itt	cs
   b6c90:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6c94:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6c96:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6c98:	2e00      	cmp	r6, #0
   b6c9a:	d1e9      	bne.n	b6c70 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6c9c:	b002      	add	sp, #8
   b6c9e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6ca0:	2000      	movs	r0, #0
   b6ca2:	e7fb      	b.n	b6c9c <_ZN9FatVolume9freeChainEm+0x32>

000b6ca4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6ca4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6ca6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6ca8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6caa:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6cac:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b6cb0:	4604      	mov	r4, r0
  m_fatType = 0;
   b6cb2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6cb4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6cb8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6cba:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6cbe:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6cc0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6cc4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6cc8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6ccc:	460d      	mov	r5, r1
   b6cce:	b1b9      	cbz	r1, b6d00 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6cd0:	2904      	cmp	r1, #4
   b6cd2:	d901      	bls.n	b6cd8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6cd4:	2000      	movs	r0, #0
}
   b6cd6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6cd8:	4611      	mov	r1, r2
   b6cda:	4630      	mov	r0, r6
   b6cdc:	f7ff fefc 	bl	b6ad8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6ce0:	2800      	cmp	r0, #0
   b6ce2:	d0f7      	beq.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6ce4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6ce8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6cec:	065b      	lsls	r3, r3, #25
   b6cee:	d1f1      	bne.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
   b6cf0:	f105 011b 	add.w	r1, r5, #27
   b6cf4:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6cf8:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6cfc:	2d00      	cmp	r5, #0
   b6cfe:	d0e9      	beq.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
   b6d00:	2200      	movs	r2, #0
   b6d02:	4629      	mov	r1, r5
   b6d04:	4630      	mov	r0, r6
   b6d06:	f7ff fee7 	bl	b6ad8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6d0a:	2800      	cmp	r0, #0
   b6d0c:	d0e2      	beq.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6d0e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6d16:	d1dd      	bne.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
   b6d18:	7c03      	ldrb	r3, [r0, #16]
   b6d1a:	2b02      	cmp	r3, #2
   b6d1c:	d1da      	bne.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6d1e:	89c3      	ldrh	r3, [r0, #14]
   b6d20:	2b00      	cmp	r3, #0
   b6d22:	d0d7      	beq.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6d24:	7b41      	ldrb	r1, [r0, #13]
   b6d26:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6d28:	1e4b      	subs	r3, r1, #1
   b6d2a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6d2c:	2300      	movs	r3, #0
   b6d2e:	71a3      	strb	r3, [r4, #6]
   b6d30:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d32:	2301      	movs	r3, #1
   b6d34:	4299      	cmp	r1, r3
   b6d36:	d007      	beq.n	b6d48 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6d38:	3e01      	subs	r6, #1
   b6d3a:	d0cb      	beq.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d3c:	79a2      	ldrb	r2, [r4, #6]
   b6d3e:	005b      	lsls	r3, r3, #1
   b6d40:	3201      	adds	r2, #1
   b6d42:	b2db      	uxtb	r3, r3
   b6d44:	71a2      	strb	r2, [r4, #6]
   b6d46:	e7f5      	b.n	b6d34 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6d48:	8ac1      	ldrh	r1, [r0, #22]
   b6d4a:	b901      	cbnz	r1, b6d4e <_ZN9FatVolume4initEh+0xaa>
   b6d4c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6d4e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6d50:	89c3      	ldrh	r3, [r0, #14]
   b6d52:	442b      	add	r3, r5
   b6d54:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6d56:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6d5a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6d5c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6d60:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6d62:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6d66:	0149      	lsls	r1, r1, #5
   b6d68:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6d6c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6d70:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6d72:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6d76:	b902      	cbnz	r2, b6d7a <_ZN9FatVolume4initEh+0xd6>
   b6d78:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6d7a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6d7c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6d7e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6d80:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6d82:	1c4b      	adds	r3, r1, #1
   b6d84:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6d86:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6d8a:	4299      	cmp	r1, r3
   b6d8c:	d802      	bhi.n	b6d94 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6d8e:	230c      	movs	r3, #12
   b6d90:	71e3      	strb	r3, [r4, #7]
   b6d92:	e79f      	b.n	b6cd4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6d94:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6d98:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6d9a:	bf85      	ittet	hi
   b6d9c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6d9e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6da0:	2310      	movls	r3, #16
    m_fatType = 32;
   b6da2:	2320      	movhi	r3, #32
   b6da4:	71e3      	strb	r3, [r4, #7]
  return true;
   b6da6:	2001      	movs	r0, #1
   b6da8:	e795      	b.n	b6cd6 <_ZN9FatVolume4initEh+0x32>

000b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6daa:	f000 bacb 	b.w	b7344 <_ZN14SdSpiAltDriver4sendEh>

000b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6dae:	f000 baae 	b.w	b730e <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6db4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6db4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6db6:	4e0e      	ldr	r6, [pc, #56]	; (b6df0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6db8:	460d      	mov	r5, r1
   b6dba:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6dbc:	f000 fb66 	bl	b748c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6dc0:	6833      	ldr	r3, [r6, #0]
   b6dc2:	1ac0      	subs	r0, r0, r3
   b6dc4:	4b0b      	ldr	r3, [pc, #44]	; (b6df4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6dc6:	4298      	cmp	r0, r3
   b6dc8:	d908      	bls.n	b6ddc <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6dca:	f000 fb67 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6dce:	4b0a      	ldr	r3, [pc, #40]	; (b6df8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6dd0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b6dd2:	f000 fe9b 	bl	b7b0c <spark_process>
   b6dd6:	f000 fb59 	bl	b748c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6dda:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ddc:	f000 fb5e 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6de0:	b280      	uxth	r0, r0
   b6de2:	1b40      	subs	r0, r0, r5
}
   b6de4:	42a0      	cmp	r0, r4
   b6de6:	bfd4      	ite	le
   b6de8:	2000      	movle	r0, #0
   b6dea:	2001      	movgt	r0, #1
   b6dec:	bd70      	pop	{r4, r5, r6, pc}
   b6dee:	bf00      	nop
   b6df0:	2003e618 	.word	0x2003e618
   b6df4:	000186a0 	.word	0x000186a0
   b6df8:	2003e740 	.word	0x2003e740

000b6dfc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6dfc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6dfe:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6e00:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6e02:	b94d      	cbnz	r5, b6e18 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6e04:	6840      	ldr	r0, [r0, #4]
   b6e06:	f000 fa6b 	bl	b72e0 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6e0a:	6863      	ldr	r3, [r4, #4]
   b6e0c:	4629      	mov	r1, r5
   b6e0e:	7d18      	ldrb	r0, [r3, #20]
   b6e10:	f004 fd03 	bl	bb81a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6e14:	2301      	movs	r3, #1
   b6e16:	7223      	strb	r3, [r4, #8]
  }
}
   b6e18:	bd38      	pop	{r3, r4, r5, pc}

000b6e1a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6e1a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6e1c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6e1e:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6e20:	b16b      	cbz	r3, b6e3e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6e22:	6843      	ldr	r3, [r0, #4]
   b6e24:	2101      	movs	r1, #1
   b6e26:	7d18      	ldrb	r0, [r3, #20]
   b6e28:	f004 fcf7 	bl	bb81a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6e2c:	6860      	ldr	r0, [r4, #4]
   b6e2e:	21ff      	movs	r1, #255	; 0xff
   b6e30:	f7ff ffbb 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6e34:	6860      	ldr	r0, [r4, #4]
   b6e36:	f000 fa67 	bl	b7308 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6e3a:	2300      	movs	r3, #0
   b6e3c:	7223      	strb	r3, [r4, #8]
  }
}
   b6e3e:	bd10      	pop	{r4, pc}

000b6e40 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e42:	4604      	mov	r4, r0
   b6e44:	460d      	mov	r5, r1
   b6e46:	4616      	mov	r6, r2
   b6e48:	f000 fb28 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6e4c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6e4e:	6860      	ldr	r0, [r4, #4]
   b6e50:	f7ff ffad 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e54:	28ff      	cmp	r0, #255	; 0xff
   b6e56:	7260      	strb	r0, [r4, #9]
   b6e58:	d10e      	bne.n	b6e78 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6e5e:	4639      	mov	r1, r7
   b6e60:	4620      	mov	r0, r4
   b6e62:	f7ff ffa7 	bl	b6db4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6e66:	2800      	cmp	r0, #0
   b6e68:	d0f1      	beq.n	b6e4e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6e6a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6e6c:	4620      	mov	r0, r4
   b6e6e:	7023      	strb	r3, [r4, #0]
   b6e70:	f7ff ffd3 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6e74:	2000      	movs	r0, #0
}
   b6e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6e78:	28fe      	cmp	r0, #254	; 0xfe
   b6e7a:	d001      	beq.n	b6e80 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6e7c:	2350      	movs	r3, #80	; 0x50
   b6e7e:	e7f5      	b.n	b6e6c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6e80:	6860      	ldr	r0, [r4, #4]
   b6e82:	4632      	mov	r2, r6
   b6e84:	4629      	mov	r1, r5
   b6e86:	f000 fa47 	bl	b7318 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6e8a:	7260      	strb	r0, [r4, #9]
   b6e8c:	b108      	cbz	r0, b6e92 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6e8e:	2360      	movs	r3, #96	; 0x60
   b6e90:	e7ec      	b.n	b6e6c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6e92:	6860      	ldr	r0, [r4, #4]
   b6e94:	f7ff ff8b 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6e98:	6860      	ldr	r0, [r4, #4]
   b6e9a:	f7ff ff88 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b6e9e:	2001      	movs	r0, #1
   b6ea0:	e7e9      	b.n	b6e76 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b6ea2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b6ea2:	b570      	push	{r4, r5, r6, lr}
   b6ea4:	4604      	mov	r4, r0
   b6ea6:	460e      	mov	r6, r1
   b6ea8:	f000 faf8 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
   b6eac:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b6eae:	4632      	mov	r2, r6
   b6eb0:	4629      	mov	r1, r5
   b6eb2:	4620      	mov	r0, r4
   b6eb4:	f7ff ff7e 	bl	b6db4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6eb8:	b930      	cbnz	r0, b6ec8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6eba:	6860      	ldr	r0, [r4, #4]
   b6ebc:	f7ff ff77 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6ec0:	28ff      	cmp	r0, #255	; 0xff
   b6ec2:	d1f4      	bne.n	b6eae <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6ec4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6ec6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6ec8:	2000      	movs	r0, #0
   b6eca:	e7fc      	b.n	b6ec6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6ecc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b6ece:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6ed0:	9201      	str	r2, [sp, #4]
   b6ed2:	4604      	mov	r4, r0
   b6ed4:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6ed6:	b90b      	cbnz	r3, b6edc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6ed8:	f7ff ff90 	bl	b6dfc <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6edc:	b125      	cbz	r5, b6ee8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b6ede:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6ee2:	4620      	mov	r0, r4
   b6ee4:	f7ff ffdd 	bl	b6ea2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6ee8:	6860      	ldr	r0, [r4, #4]
   b6eea:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b6eee:	f7ff ff5c 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6ef2:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6ef4:	af01      	add	r7, sp, #4
   b6ef6:	5db9      	ldrb	r1, [r7, r6]
   b6ef8:	6860      	ldr	r0, [r4, #4]
   b6efa:	f7ff ff56 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6efe:	3e01      	subs	r6, #1
   b6f00:	d2f9      	bcs.n	b6ef6 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6f02:	2d00      	cmp	r5, #0
   b6f04:	6860      	ldr	r0, [r4, #4]
   b6f06:	bf0c      	ite	eq
   b6f08:	2195      	moveq	r1, #149	; 0x95
   b6f0a:	2187      	movne	r1, #135	; 0x87
   b6f0c:	f7ff ff4d 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6f10:	6860      	ldr	r0, [r4, #4]
   b6f12:	f7ff ff4c 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f16:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6f18:	6860      	ldr	r0, [r4, #4]
   b6f1a:	f7ff ff48 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f1e:	0603      	lsls	r3, r0, #24
   b6f20:	7260      	strb	r0, [r4, #9]
   b6f22:	d503      	bpl.n	b6f2c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6f24:	3d01      	subs	r5, #1
   b6f26:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6f2a:	d1f5      	bne.n	b6f18 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6f2c:	b003      	add	sp, #12
   b6f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f30 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6f30:	b570      	push	{r4, r5, r6, lr}
   b6f32:	4604      	mov	r4, r0
   b6f34:	460d      	mov	r5, r1
   b6f36:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6f38:	2137      	movs	r1, #55	; 0x37
   b6f3a:	2200      	movs	r2, #0
   b6f3c:	f7ff ffc6 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6f40:	4632      	mov	r2, r6
   b6f42:	4629      	mov	r1, r5
   b6f44:	4620      	mov	r0, r4
  }
   b6f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6f4a:	f7ff bfbf 	b.w	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6f50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6f54:	2500      	movs	r5, #0
   b6f56:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6f58:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6f5a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6f5c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f5e:	4604      	mov	r4, r0
   b6f60:	4690      	mov	r8, r2
   b6f62:	461e      	mov	r6, r3
   b6f64:	f000 fa9a 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6f68:	4641      	mov	r1, r8
   b6f6a:	4607      	mov	r7, r0
   b6f6c:	6860      	ldr	r0, [r4, #4]
   b6f6e:	f000 f9bb 	bl	b72e8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6f72:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6f74:	4a49      	ldr	r2, [pc, #292]	; (b709c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6f76:	721d      	strb	r5, [r3, #8]
   b6f78:	2501      	movs	r5, #1
   b6f7a:	60da      	str	r2, [r3, #12]
   b6f7c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b6f7e:	4620      	mov	r0, r4
   b6f80:	f7ff ff3c 	bl	b6dfc <_ZN9SdSpiCard8spiStartEv>
   b6f84:	6863      	ldr	r3, [r4, #4]
   b6f86:	4629      	mov	r1, r5
   b6f88:	7d18      	ldrb	r0, [r3, #20]
   b6f8a:	f004 fc46 	bl	bb81a <digitalWrite>
   b6f8e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6f90:	6860      	ldr	r0, [r4, #4]
   b6f92:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6f94:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6f96:	f7ff ff08 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6f9a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6f9e:	d1f7      	bne.n	b6f90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b6fa0:	6863      	ldr	r3, [r4, #4]
   b6fa2:	4629      	mov	r1, r5
   b6fa4:	7d18      	ldrb	r0, [r3, #20]
   b6fa6:	f004 fc38 	bl	bb81a <digitalWrite>
  }
   b6faa:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6fac:	2200      	movs	r2, #0
   b6fae:	4611      	mov	r1, r2
   b6fb0:	4620      	mov	r0, r4
   b6fb2:	f7ff ff8b 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b6fb6:	2801      	cmp	r0, #1
   b6fb8:	4680      	mov	r8, r0
   b6fba:	d018      	beq.n	b6fee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6fbc:	3d01      	subs	r5, #1
   b6fbe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6fc2:	d107      	bne.n	b6fd4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6fc4:	2320      	movs	r3, #32
  spiStop();
   b6fc6:	4620      	mov	r0, r4
   b6fc8:	7023      	strb	r3, [r4, #0]
   b6fca:	f7ff ff26 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6fce:	2000      	movs	r0, #0
}
   b6fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6fd4:	6860      	ldr	r0, [r4, #4]
   b6fd6:	21fd      	movs	r1, #253	; 0xfd
   b6fd8:	f7ff fee7 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6fdc:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b6fe0:	6860      	ldr	r0, [r4, #4]
   b6fe2:	f7ff fee4 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6fe6:	f1b8 0801 	subs.w	r8, r8, #1
   b6fea:	d1f9      	bne.n	b6fe0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6fec:	e7de      	b.n	b6fac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b6fee:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6ff2:	2108      	movs	r1, #8
   b6ff4:	4620      	mov	r0, r4
   b6ff6:	f7ff ff69 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b6ffa:	2805      	cmp	r0, #5
   b6ffc:	d114      	bne.n	b7028 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b6ffe:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7002:	2500      	movs	r5, #0
   b7004:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7006:	462a      	mov	r2, r5
   b7008:	2129      	movs	r1, #41	; 0x29
   b700a:	4620      	mov	r0, r4
   b700c:	f7ff ff90 	bl	b6f30 <_ZN9SdSpiCard8cardAcmdEhm>
   b7010:	4602      	mov	r2, r0
   b7012:	b1d8      	cbz	r0, b704c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7014:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7018:	4639      	mov	r1, r7
   b701a:	4620      	mov	r0, r4
   b701c:	f7ff feca 	bl	b6db4 <_ZN9SdSpiCard10isTimedOutEtt>
   b7020:	2800      	cmp	r0, #0
   b7022:	d0f0      	beq.n	b7006 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7024:	2343      	movs	r3, #67	; 0x43
   b7026:	e7ce      	b.n	b6fc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7028:	2504      	movs	r5, #4
      m_status = spiReceive();
   b702a:	6860      	ldr	r0, [r4, #4]
   b702c:	f7ff febf 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7030:	3d01      	subs	r5, #1
   b7032:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7036:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7038:	d1f7      	bne.n	b702a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b703a:	28aa      	cmp	r0, #170	; 0xaa
   b703c:	d104      	bne.n	b7048 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b703e:	2302      	movs	r3, #2
   b7040:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7042:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7046:	e7dd      	b.n	b7004 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7048:	2325      	movs	r3, #37	; 0x25
   b704a:	e7bc      	b.n	b6fc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b704c:	7aa3      	ldrb	r3, [r4, #10]
   b704e:	2b02      	cmp	r3, #2
   b7050:	d118      	bne.n	b7084 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7052:	213a      	movs	r1, #58	; 0x3a
   b7054:	4620      	mov	r0, r4
   b7056:	f7ff ff39 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b705a:	b108      	cbz	r0, b7060 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b705c:	2337      	movs	r3, #55	; 0x37
   b705e:	e7b2      	b.n	b6fc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7060:	6860      	ldr	r0, [r4, #4]
   b7062:	f7ff fea4 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7066:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b706a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b706c:	bf04      	itt	eq
   b706e:	2303      	moveq	r3, #3
   b7070:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7072:	6860      	ldr	r0, [r4, #4]
   b7074:	f7ff fe9b 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7078:	6860      	ldr	r0, [r4, #4]
   b707a:	f7ff fe98 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b707e:	6860      	ldr	r0, [r4, #4]
   b7080:	f7ff fe95 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7084:	4620      	mov	r0, r4
   b7086:	f7ff fec8 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b708a:	6863      	ldr	r3, [r4, #4]
   b708c:	7930      	ldrb	r0, [r6, #4]
   b708e:	68b1      	ldr	r1, [r6, #8]
   b7090:	89b2      	ldrh	r2, [r6, #12]
   b7092:	821a      	strh	r2, [r3, #16]
   b7094:	7218      	strb	r0, [r3, #8]
   b7096:	60d9      	str	r1, [r3, #12]
  return true;
   b7098:	2001      	movs	r0, #1
   b709a:	e799      	b.n	b6fd0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b709c:	0003d090 	.word	0x0003d090

000b70a0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70a0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b70a2:	7a83      	ldrb	r3, [r0, #10]
   b70a4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b70a6:	bf18      	it	ne
   b70a8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70aa:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b70ac:	460a      	mov	r2, r1
   b70ae:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70b0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b70b2:	f7ff ff0b 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b70b6:	b130      	cbz	r0, b70c6 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b70b8:	2330      	movs	r3, #48	; 0x30
   b70ba:	7023      	strb	r3, [r4, #0]
  spiStop();
   b70bc:	4620      	mov	r0, r4
   b70be:	f7ff feac 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b70c2:	2500      	movs	r5, #0
   b70c4:	e00b      	b.n	b70de <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b70c6:	4629      	mov	r1, r5
   b70c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b70cc:	4620      	mov	r0, r4
   b70ce:	f7ff feb7 	bl	b6e40 <_ZN9SdSpiCard8readDataEPhj>
   b70d2:	4605      	mov	r5, r0
   b70d4:	2800      	cmp	r0, #0
   b70d6:	d0f1      	beq.n	b70bc <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b70d8:	4620      	mov	r0, r4
   b70da:	f7ff fe9e 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
}
   b70de:	4628      	mov	r0, r5
   b70e0:	bd38      	pop	{r3, r4, r5, pc}

000b70e2 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70e2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b70e4:	7a83      	ldrb	r3, [r0, #10]
   b70e6:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70e8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b70ea:	bf18      	it	ne
   b70ec:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b70ee:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b70f0:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b70f2:	f7ff feeb 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b70f6:	b130      	cbz	r0, b7106 <_ZN9SdSpiCard9readStartEm+0x24>
   b70f8:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b70fa:	4620      	mov	r0, r4
   b70fc:	7023      	strb	r3, [r4, #0]
   b70fe:	f7ff fe8c 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7102:	2000      	movs	r0, #0
}
   b7104:	bd10      	pop	{r4, pc}
  return true;
   b7106:	2001      	movs	r0, #1
   b7108:	e7fc      	b.n	b7104 <_ZN9SdSpiCard9readStartEm+0x22>

000b710a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b710a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b710c:	2200      	movs	r2, #0
   b710e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7110:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7112:	f7ff fedb 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b7116:	b130      	cbz	r0, b7126 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7118:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b711a:	4620      	mov	r0, r4
   b711c:	7023      	strb	r3, [r4, #0]
   b711e:	f7ff fe7c 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7122:	2000      	movs	r0, #0
}
   b7124:	bd10      	pop	{r4, pc}
  spiStop();
   b7126:	4620      	mov	r0, r4
   b7128:	f7ff fe77 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return true;
   b712c:	2001      	movs	r0, #1
   b712e:	e7f9      	b.n	b7124 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7130 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7132:	4604      	mov	r4, r0
   b7134:	4616      	mov	r6, r2
   b7136:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7138:	f7ff ffd3 	bl	b70e2 <_ZN9SdSpiCard9readStartEm>
   b713c:	b168      	cbz	r0, b715a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b713e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7140:	b2ab      	uxth	r3, r5
   b7142:	429f      	cmp	r7, r3
   b7144:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7148:	d909      	bls.n	b715e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b714a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b714e:	4620      	mov	r0, r4
   b7150:	f7ff fe76 	bl	b6e40 <_ZN9SdSpiCard8readDataEPhj>
   b7154:	3501      	adds	r5, #1
   b7156:	2800      	cmp	r0, #0
   b7158:	d1f2      	bne.n	b7140 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b715a:	2000      	movs	r0, #0
   b715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b715e:	4620      	mov	r0, r4
}
   b7160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7164:	f7ff bfd1 	b.w	b710a <_ZN9SdSpiCard8readStopEv>

000b7168 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7168:	b538      	push	{r3, r4, r5, lr}
   b716a:	4604      	mov	r4, r0
   b716c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b716e:	6840      	ldr	r0, [r0, #4]
   b7170:	f7ff fe1b 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7174:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7178:	6860      	ldr	r0, [r4, #4]
   b717a:	4629      	mov	r1, r5
   b717c:	f000 f8e6 	bl	b734c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7180:	6860      	ldr	r0, [r4, #4]
   b7182:	21ff      	movs	r1, #255	; 0xff
   b7184:	f7ff fe11 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7188:	6860      	ldr	r0, [r4, #4]
   b718a:	21ff      	movs	r1, #255	; 0xff
   b718c:	f7ff fe0d 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7190:	6860      	ldr	r0, [r4, #4]
   b7192:	f7ff fe0c 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7196:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7198:	f000 001f 	and.w	r0, r0, #31
   b719c:	2805      	cmp	r0, #5
   b719e:	d006      	beq.n	b71ae <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b71a0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b71a2:	4620      	mov	r0, r4
   b71a4:	7023      	strb	r3, [r4, #0]
   b71a6:	f7ff fe38 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71aa:	2000      	movs	r0, #0
}
   b71ac:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b71ae:	2001      	movs	r0, #1
   b71b0:	e7fc      	b.n	b71ac <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b71b2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71b2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b71b4:	7a83      	ldrb	r3, [r0, #10]
   b71b6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b71b8:	bf18      	it	ne
   b71ba:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71bc:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b71be:	460a      	mov	r2, r1
   b71c0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71c2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b71c4:	f7ff fe82 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b71c8:	4606      	mov	r6, r0
   b71ca:	b130      	cbz	r0, b71da <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b71cc:	2332      	movs	r3, #50	; 0x32
   b71ce:	7023      	strb	r3, [r4, #0]
  spiStop();
   b71d0:	4620      	mov	r0, r4
   b71d2:	f7ff fe22 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71d6:	2500      	movs	r5, #0
   b71d8:	e01f      	b.n	b721a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b71da:	462a      	mov	r2, r5
   b71dc:	21fe      	movs	r1, #254	; 0xfe
   b71de:	4620      	mov	r0, r4
   b71e0:	f7ff ffc2 	bl	b7168 <_ZN9SdSpiCard9writeDataEhPKh>
   b71e4:	2800      	cmp	r0, #0
   b71e6:	d0f3      	beq.n	b71d0 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b71e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b71ec:	4620      	mov	r0, r4
   b71ee:	f7ff fe58 	bl	b6ea2 <_ZN9SdSpiCard11waitNotBusyEt>
   b71f2:	4605      	mov	r5, r0
   b71f4:	b908      	cbnz	r0, b71fa <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b71f6:	235a      	movs	r3, #90	; 0x5a
   b71f8:	e7e9      	b.n	b71ce <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b71fa:	4632      	mov	r2, r6
   b71fc:	210d      	movs	r1, #13
   b71fe:	4620      	mov	r0, r4
   b7200:	f7ff fe64 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b7204:	b108      	cbz	r0, b720a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7206:	2329      	movs	r3, #41	; 0x29
   b7208:	e7e1      	b.n	b71ce <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b720a:	6860      	ldr	r0, [r4, #4]
   b720c:	f7ff fdcf 	bl	b6dae <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7210:	2800      	cmp	r0, #0
   b7212:	d1f8      	bne.n	b7206 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7214:	4620      	mov	r0, r4
   b7216:	f7ff fe00 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
}
   b721a:	4628      	mov	r0, r5
   b721c:	bd70      	pop	{r4, r5, r6, pc}

000b721e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b721e:	b513      	push	{r0, r1, r4, lr}
   b7220:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7222:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7226:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7228:	f7ff fe3b 	bl	b6ea2 <_ZN9SdSpiCard11waitNotBusyEt>
   b722c:	9a01      	ldr	r2, [sp, #4]
   b722e:	b930      	cbnz	r0, b723e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7230:	235b      	movs	r3, #91	; 0x5b
   b7232:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7234:	4620      	mov	r0, r4
   b7236:	f7ff fdf0 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b723a:	2000      	movs	r0, #0
   b723c:	e005      	b.n	b724a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b723e:	21fc      	movs	r1, #252	; 0xfc
   b7240:	4620      	mov	r0, r4
   b7242:	f7ff ff91 	bl	b7168 <_ZN9SdSpiCard9writeDataEhPKh>
   b7246:	2800      	cmp	r0, #0
   b7248:	d0f4      	beq.n	b7234 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b724a:	b002      	add	sp, #8
   b724c:	bd10      	pop	{r4, pc}

000b724e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b724e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7250:	7a83      	ldrb	r3, [r0, #10]
   b7252:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7254:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7256:	bf18      	it	ne
   b7258:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b725a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b725c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b725e:	f7ff fe35 	bl	b6ecc <_ZN9SdSpiCard11cardCommandEhm>
   b7262:	b130      	cbz	r0, b7272 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7264:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7266:	4620      	mov	r0, r4
   b7268:	7023      	strb	r3, [r4, #0]
   b726a:	f7ff fdd6 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b726e:	2000      	movs	r0, #0
}
   b7270:	bd10      	pop	{r4, pc}
  return true;
   b7272:	2001      	movs	r0, #1
   b7274:	e7fc      	b.n	b7270 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7276 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7276:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7278:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b727c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b727e:	f7ff fe10 	bl	b6ea2 <_ZN9SdSpiCard11waitNotBusyEt>
   b7282:	4605      	mov	r5, r0
   b7284:	b930      	cbnz	r0, b7294 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7286:	2356      	movs	r3, #86	; 0x56
   b7288:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b728a:	4620      	mov	r0, r4
   b728c:	f7ff fdc5 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7290:	4628      	mov	r0, r5
   b7292:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7294:	6860      	ldr	r0, [r4, #4]
   b7296:	21fd      	movs	r1, #253	; 0xfd
   b7298:	f7ff fd87 	bl	b6daa <_ZN9SdSpiCard7spiSendEh.isra.0>
   b729c:	e7f5      	b.n	b728a <_ZN9SdSpiCard9writeStopEv+0x14>

000b729e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72a0:	4604      	mov	r4, r0
   b72a2:	4616      	mov	r6, r2
   b72a4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b72a6:	f7ff ffd2 	bl	b724e <_ZN9SdSpiCard10writeStartEm>
   b72aa:	b170      	cbz	r0, b72ca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b72ac:	2500      	movs	r5, #0
   b72ae:	42bd      	cmp	r5, r7
   b72b0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b72b4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b72b6:	d004      	beq.n	b72c2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b72b8:	f7ff ffb1 	bl	b721e <_ZN9SdSpiCard9writeDataEPKh>
   b72bc:	b128      	cbz	r0, b72ca <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b72be:	3501      	adds	r5, #1
   b72c0:	e7f5      	b.n	b72ae <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b72c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b72c6:	f7ff bfd6 	b.w	b7276 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b72ca:	4620      	mov	r0, r4
   b72cc:	f7ff fda5 	bl	b6e1a <_ZN9SdSpiCard7spiStopEv>
}
   b72d0:	2000      	movs	r0, #0
   b72d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72d4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b72d4:	4b01      	ldr	r3, [pc, #4]	; (b72dc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b72d6:	2201      	movs	r2, #1
   b72d8:	701a      	strb	r2, [r3, #0]
}
   b72da:	4770      	bx	lr
   b72dc:	2003e61c 	.word	0x2003e61c

000b72e0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b72e0:	1d01      	adds	r1, r0, #4
   b72e2:	6800      	ldr	r0, [r0, #0]
   b72e4:	f000 bd5c 	b.w	b7da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b72e8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b72e8:	b510      	push	{r4, lr}
   b72ea:	4604      	mov	r4, r0
  m_csPin = csPin;
   b72ec:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b72ee:	6800      	ldr	r0, [r0, #0]
   b72f0:	f000 fd12 	bl	b7d18 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b72f4:	7d20      	ldrb	r0, [r4, #20]
   b72f6:	2101      	movs	r1, #1
   b72f8:	f004 fa7e 	bl	bb7f8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b72fc:	7d20      	ldrb	r0, [r4, #20]
   b72fe:	2101      	movs	r1, #1
}
   b7300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7304:	f004 ba89 	b.w	bb81a <digitalWrite>

000b7308 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7308:	6800      	ldr	r0, [r0, #0]
   b730a:	f000 bd30 	b.w	b7d6e <_ZN8SPIClass14endTransactionEv>

000b730e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b730e:	6800      	ldr	r0, [r0, #0]
   b7310:	21ff      	movs	r1, #255	; 0xff
   b7312:	f000 bde5 	b.w	b7ee0 <_ZN8SPIClass8transferEh>
	...

000b7318 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7318:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b731a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b731c:	4a07      	ldr	r2, [pc, #28]	; (b733c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b731e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7320:	2500      	movs	r5, #0
   b7322:	4c07      	ldr	r4, [pc, #28]	; (b7340 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7324:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7326:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7328:	460a      	mov	r2, r1
   b732a:	4629      	mov	r1, r5
   b732c:	f000 fdde 	bl	b7eec <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7330:	7823      	ldrb	r3, [r4, #0]
   b7332:	2b00      	cmp	r3, #0
   b7334:	d0fc      	beq.n	b7330 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7336:	2000      	movs	r0, #0
   b7338:	b003      	add	sp, #12
   b733a:	bd30      	pop	{r4, r5, pc}
   b733c:	000b72d5 	.word	0x000b72d5
   b7340:	2003e61c 	.word	0x2003e61c

000b7344 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7344:	6800      	ldr	r0, [r0, #0]
   b7346:	f000 bdcb 	b.w	b7ee0 <_ZN8SPIClass8transferEh>
	...

000b734c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b734c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b734e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7350:	4a06      	ldr	r2, [pc, #24]	; (b736c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7352:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7354:	2500      	movs	r5, #0
   b7356:	4c06      	ldr	r4, [pc, #24]	; (b7370 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7358:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b735a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b735c:	462a      	mov	r2, r5
   b735e:	f000 fdc5 	bl	b7eec <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7362:	7823      	ldrb	r3, [r4, #0]
   b7364:	2b00      	cmp	r3, #0
   b7366:	d0fc      	beq.n	b7362 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7368:	b003      	add	sp, #12
   b736a:	bd30      	pop	{r4, r5, pc}
   b736c:	000b72d5 	.word	0x000b72d5
   b7370:	2003e61c 	.word	0x2003e61c

000b7374 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   b7374:	b538      	push	{r3, r4, r5, lr}
   b7376:	2500      	movs	r5, #0
   b7378:	2342      	movs	r3, #66	; 0x42
   b737a:	4604      	mov	r4, r0
   b737c:	6085      	str	r5, [r0, #8]
   b737e:	7305      	strb	r5, [r0, #12]
   b7380:	6145      	str	r5, [r0, #20]
   b7382:	7603      	strb	r3, [r0, #24]
   b7384:	4629      	mov	r1, r5
   b7386:	2210      	movs	r2, #16
   b7388:	305c      	adds	r0, #92	; 0x5c
   b738a:	f005 f927 	bl	bc5dc <memset>
   b738e:	f104 0319 	add.w	r3, r4, #25
   b7392:	6663      	str	r3, [r4, #100]	; 0x64
   b7394:	2210      	movs	r2, #16
   b7396:	4629      	mov	r1, r5
   b7398:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   b739c:	f005 f91e 	bl	bc5dc <memset>
   b73a0:	f104 031b 	add.w	r3, r4, #27
   b73a4:	6763      	str	r3, [r4, #116]	; 0x74
   b73a6:	2319      	movs	r3, #25
   b73a8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   b73ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   b73b0:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   b73b4:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   b73b8:	4620      	mov	r0, r4
   b73ba:	bd38      	pop	{r3, r4, r5, pc}

000b73bc <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   b73bc:	b510      	push	{r4, lr}
   b73be:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
   b73c0:	2300      	movs	r3, #0
   b73c2:	7323      	strb	r3, [r4, #12]
{
   b73c4:	4608      	mov	r0, r1
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   b73c6:	6121      	str	r1, [r4, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   b73c8:	f003 ff10 	bl	bb1ec <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   b73cc:	2342      	movs	r3, #66	; 0x42
   b73ce:	7623      	strb	r3, [r4, #24]
}
   b73d0:	bd10      	pop	{r4, pc}

000b73d2 <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   b73d2:	b510      	push	{r4, lr}
   b73d4:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   b73d6:	7e01      	ldrb	r1, [r0, #24]
   b73d8:	6900      	ldr	r0, [r0, #16]
   b73da:	f003 ff36 	bl	bb24a <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   b73de:	6920      	ldr	r0, [r4, #16]
   b73e0:	f003 ff3e 	bl	bb260 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   b73e4:	fab0 f080 	clz	r0, r0
   b73e8:	0940      	lsrs	r0, r0, #5
   b73ea:	bd10      	pop	{r4, pc}

000b73ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b73ec:	b508      	push	{r3, lr}
   b73ee:	4b02      	ldr	r3, [pc, #8]	; (b73f8 <netdb_freeaddrinfo+0xc>)
   b73f0:	681b      	ldr	r3, [r3, #0]
   b73f2:	689b      	ldr	r3, [r3, #8]
   b73f4:	9301      	str	r3, [sp, #4]
   b73f6:	bd08      	pop	{r3, pc}
   b73f8:	00030268 	.word	0x00030268

000b73fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b73fc:	b508      	push	{r3, lr}
   b73fe:	4b02      	ldr	r3, [pc, #8]	; (b7408 <netdb_getaddrinfo+0xc>)
   b7400:	681b      	ldr	r3, [r3, #0]
   b7402:	68db      	ldr	r3, [r3, #12]
   b7404:	9301      	str	r3, [sp, #4]
   b7406:	bd08      	pop	{r3, pc}
   b7408:	00030268 	.word	0x00030268

000b740c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b740c:	b508      	push	{r3, lr}
   b740e:	4b02      	ldr	r3, [pc, #8]	; (b7418 <HAL_Validate_Pin_Function+0xc>)
   b7410:	681b      	ldr	r3, [r3, #0]
   b7412:	685b      	ldr	r3, [r3, #4]
   b7414:	9301      	str	r3, [sp, #4]
   b7416:	bd08      	pop	{r3, pc}
   b7418:	0003022c 	.word	0x0003022c

000b741c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b741c:	b508      	push	{r3, lr}
   b741e:	4b02      	ldr	r3, [pc, #8]	; (b7428 <HAL_Pin_Mode+0xc>)
   b7420:	681b      	ldr	r3, [r3, #0]
   b7422:	689b      	ldr	r3, [r3, #8]
   b7424:	9301      	str	r3, [sp, #4]
   b7426:	bd08      	pop	{r3, pc}
   b7428:	0003022c 	.word	0x0003022c

000b742c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b742c:	b508      	push	{r3, lr}
   b742e:	4b02      	ldr	r3, [pc, #8]	; (b7438 <HAL_Get_Pin_Mode+0xc>)
   b7430:	681b      	ldr	r3, [r3, #0]
   b7432:	68db      	ldr	r3, [r3, #12]
   b7434:	9301      	str	r3, [sp, #4]
   b7436:	bd08      	pop	{r3, pc}
   b7438:	0003022c 	.word	0x0003022c

000b743c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b743c:	b508      	push	{r3, lr}
   b743e:	4b02      	ldr	r3, [pc, #8]	; (b7448 <HAL_GPIO_Write+0xc>)
   b7440:	681b      	ldr	r3, [r3, #0]
   b7442:	691b      	ldr	r3, [r3, #16]
   b7444:	9301      	str	r3, [sp, #4]
   b7446:	bd08      	pop	{r3, pc}
   b7448:	0003022c 	.word	0x0003022c

000b744c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b744c:	b508      	push	{r3, lr}
   b744e:	4b02      	ldr	r3, [pc, #8]	; (b7458 <HAL_Interrupts_Enable_All+0xc>)
   b7450:	681b      	ldr	r3, [r3, #0]
   b7452:	6a1b      	ldr	r3, [r3, #32]
   b7454:	9301      	str	r3, [sp, #4]
   b7456:	bd08      	pop	{r3, pc}
   b7458:	0003022c 	.word	0x0003022c

000b745c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b745c:	b508      	push	{r3, lr}
   b745e:	4b02      	ldr	r3, [pc, #8]	; (b7468 <HAL_Interrupts_Disable_All+0xc>)
   b7460:	681b      	ldr	r3, [r3, #0]
   b7462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7464:	9301      	str	r3, [sp, #4]
   b7466:	bd08      	pop	{r3, pc}
   b7468:	0003022c 	.word	0x0003022c

000b746c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b746c:	b508      	push	{r3, lr}
   b746e:	4b02      	ldr	r3, [pc, #8]	; (b7478 <HAL_RNG_GetRandomNumber+0xc>)
   b7470:	681b      	ldr	r3, [r3, #0]
   b7472:	685b      	ldr	r3, [r3, #4]
   b7474:	9301      	str	r3, [sp, #4]
   b7476:	bd08      	pop	{r3, pc}
   b7478:	00030218 	.word	0x00030218

000b747c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b747c:	b508      	push	{r3, lr}
   b747e:	4b02      	ldr	r3, [pc, #8]	; (b7488 <HAL_Delay_Microseconds+0xc>)
   b7480:	681b      	ldr	r3, [r3, #0]
   b7482:	68db      	ldr	r3, [r3, #12]
   b7484:	9301      	str	r3, [sp, #4]
   b7486:	bd08      	pop	{r3, pc}
   b7488:	00030218 	.word	0x00030218

000b748c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b748c:	b508      	push	{r3, lr}
   b748e:	4b02      	ldr	r3, [pc, #8]	; (b7498 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7490:	681b      	ldr	r3, [r3, #0]
   b7492:	691b      	ldr	r3, [r3, #16]
   b7494:	9301      	str	r3, [sp, #4]
   b7496:	bd08      	pop	{r3, pc}
   b7498:	00030218 	.word	0x00030218

000b749c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b749c:	b508      	push	{r3, lr}
   b749e:	4b02      	ldr	r3, [pc, #8]	; (b74a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b74a0:	681b      	ldr	r3, [r3, #0]
   b74a2:	695b      	ldr	r3, [r3, #20]
   b74a4:	9301      	str	r3, [sp, #4]
   b74a6:	bd08      	pop	{r3, pc}
   b74a8:	00030218 	.word	0x00030218

000b74ac <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b74ac:	b508      	push	{r3, lr}
   b74ae:	4b02      	ldr	r3, [pc, #8]	; (b74b8 <hal_rtc_time_is_valid+0xc>)
   b74b0:	681b      	ldr	r3, [r3, #0]
   b74b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b74b4:	9301      	str	r3, [sp, #4]
   b74b6:	bd08      	pop	{r3, pc}
   b74b8:	00030218 	.word	0x00030218

000b74bc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b74bc:	b508      	push	{r3, lr}
   b74be:	4b02      	ldr	r3, [pc, #8]	; (b74c8 <hal_rtc_get_time+0xc>)
   b74c0:	681b      	ldr	r3, [r3, #0]
   b74c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b74c4:	9301      	str	r3, [sp, #4]
   b74c6:	bd08      	pop	{r3, pc}
   b74c8:	00030218 	.word	0x00030218

000b74cc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b74cc:	b508      	push	{r3, lr}
   b74ce:	4b02      	ldr	r3, [pc, #8]	; (b74d8 <hal_ble_stack_init+0xc>)
   b74d0:	681b      	ldr	r3, [r3, #0]
   b74d2:	689b      	ldr	r3, [r3, #8]
   b74d4:	9301      	str	r3, [sp, #4]
   b74d6:	bd08      	pop	{r3, pc}
   b74d8:	00030278 	.word	0x00030278

000b74dc <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b74dc:	b508      	push	{r3, lr}
   b74de:	4b02      	ldr	r3, [pc, #8]	; (b74e8 <hal_ble_gap_set_tx_power+0xc>)
   b74e0:	681b      	ldr	r3, [r3, #0]
   b74e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b74e4:	9301      	str	r3, [sp, #4]
   b74e6:	bd08      	pop	{r3, pc}
   b74e8:	00030278 	.word	0x00030278

000b74ec <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b74ec:	b508      	push	{r3, lr}
   b74ee:	4b02      	ldr	r3, [pc, #8]	; (b74f8 <hal_ble_gap_set_advertising_data+0xc>)
   b74f0:	681b      	ldr	r3, [r3, #0]
   b74f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b74f4:	9301      	str	r3, [sp, #4]
   b74f6:	bd08      	pop	{r3, pc}
   b74f8:	00030278 	.word	0x00030278

000b74fc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b74fc:	b508      	push	{r3, lr}
   b74fe:	4b02      	ldr	r3, [pc, #8]	; (b7508 <hal_ble_gap_set_scan_response_data+0xc>)
   b7500:	681b      	ldr	r3, [r3, #0]
   b7502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7504:	9301      	str	r3, [sp, #4]
   b7506:	bd08      	pop	{r3, pc}
   b7508:	00030278 	.word	0x00030278

000b750c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b750c:	b508      	push	{r3, lr}
   b750e:	4b02      	ldr	r3, [pc, #8]	; (b7518 <hal_ble_gap_start_advertising+0xc>)
   b7510:	681b      	ldr	r3, [r3, #0]
   b7512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7514:	9301      	str	r3, [sp, #4]
   b7516:	bd08      	pop	{r3, pc}
   b7518:	00030278 	.word	0x00030278

000b751c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b751c:	b508      	push	{r3, lr}
   b751e:	4b03      	ldr	r3, [pc, #12]	; (b752c <hal_ble_gap_disconnect+0x10>)
   b7520:	681b      	ldr	r3, [r3, #0]
   b7522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7526:	9301      	str	r3, [sp, #4]
   b7528:	bd08      	pop	{r3, pc}
   b752a:	0000      	.short	0x0000
   b752c:	00030278 	.word	0x00030278

000b7530 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b7530:	b508      	push	{r3, lr}
   b7532:	4b03      	ldr	r3, [pc, #12]	; (b7540 <hal_ble_gatt_server_add_service+0x10>)
   b7534:	681b      	ldr	r3, [r3, #0]
   b7536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b753a:	9301      	str	r3, [sp, #4]
   b753c:	bd08      	pop	{r3, pc}
   b753e:	0000      	.short	0x0000
   b7540:	00030278 	.word	0x00030278

000b7544 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7544:	b508      	push	{r3, lr}
   b7546:	4b03      	ldr	r3, [pc, #12]	; (b7554 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b7548:	681b      	ldr	r3, [r3, #0]
   b754a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b754e:	9301      	str	r3, [sp, #4]
   b7550:	bd08      	pop	{r3, pc}
   b7552:	0000      	.short	0x0000
   b7554:	00030278 	.word	0x00030278

000b7558 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b03      	ldr	r3, [pc, #12]	; (b7568 <hal_ble_gatt_client_write_with_response+0x10>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b7562:	9301      	str	r3, [sp, #4]
   b7564:	bd08      	pop	{r3, pc}
   b7566:	0000      	.short	0x0000
   b7568:	00030278 	.word	0x00030278

000b756c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b756c:	b508      	push	{r3, lr}
   b756e:	4b03      	ldr	r3, [pc, #12]	; (b757c <hal_ble_gatt_client_write_without_response+0x10>)
   b7570:	681b      	ldr	r3, [r3, #0]
   b7572:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b7576:	9301      	str	r3, [sp, #4]
   b7578:	bd08      	pop	{r3, pc}
   b757a:	0000      	.short	0x0000
   b757c:	00030278 	.word	0x00030278

000b7580 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b7580:	b508      	push	{r3, lr}
   b7582:	4b03      	ldr	r3, [pc, #12]	; (b7590 <hal_ble_gatt_server_add_characteristic+0x10>)
   b7584:	681b      	ldr	r3, [r3, #0]
   b7586:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b758a:	9301      	str	r3, [sp, #4]
   b758c:	bd08      	pop	{r3, pc}
   b758e:	0000      	.short	0x0000
   b7590:	00030278 	.word	0x00030278

000b7594 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b7594:	b508      	push	{r3, lr}
   b7596:	4b03      	ldr	r3, [pc, #12]	; (b75a4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b7598:	681b      	ldr	r3, [r3, #0]
   b759a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b759e:	9301      	str	r3, [sp, #4]
   b75a0:	bd08      	pop	{r3, pc}
   b75a2:	0000      	.short	0x0000
   b75a4:	00030278 	.word	0x00030278

000b75a8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75a8:	b508      	push	{r3, lr}
   b75aa:	4b03      	ldr	r3, [pc, #12]	; (b75b8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b75ac:	681b      	ldr	r3, [r3, #0]
   b75ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b75b2:	9301      	str	r3, [sp, #4]
   b75b4:	bd08      	pop	{r3, pc}
   b75b6:	0000      	.short	0x0000
   b75b8:	00030278 	.word	0x00030278

000b75bc <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75bc:	b508      	push	{r3, lr}
   b75be:	4b03      	ldr	r3, [pc, #12]	; (b75cc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b75c0:	681b      	ldr	r3, [r3, #0]
   b75c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b75c6:	9301      	str	r3, [sp, #4]
   b75c8:	bd08      	pop	{r3, pc}
   b75ca:	0000      	.short	0x0000
   b75cc:	00030278 	.word	0x00030278

000b75d0 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b75d0:	b508      	push	{r3, lr}
   b75d2:	4b02      	ldr	r3, [pc, #8]	; (b75dc <os_thread_yield+0xc>)
   b75d4:	681b      	ldr	r3, [r3, #0]
   b75d6:	68db      	ldr	r3, [r3, #12]
   b75d8:	9301      	str	r3, [sp, #4]
   b75da:	bd08      	pop	{r3, pc}
   b75dc:	00030248 	.word	0x00030248

000b75e0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b75e0:	b508      	push	{r3, lr}
   b75e2:	4b02      	ldr	r3, [pc, #8]	; (b75ec <os_thread_scheduling+0xc>)
   b75e4:	681b      	ldr	r3, [r3, #0]
   b75e6:	69db      	ldr	r3, [r3, #28]
   b75e8:	9301      	str	r3, [sp, #4]
   b75ea:	bd08      	pop	{r3, pc}
   b75ec:	00030248 	.word	0x00030248

000b75f0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b75f0:	b508      	push	{r3, lr}
   b75f2:	4b02      	ldr	r3, [pc, #8]	; (b75fc <os_timer_create+0xc>)
   b75f4:	681b      	ldr	r3, [r3, #0]
   b75f6:	6a1b      	ldr	r3, [r3, #32]
   b75f8:	9301      	str	r3, [sp, #4]
   b75fa:	bd08      	pop	{r3, pc}
   b75fc:	00030248 	.word	0x00030248

000b7600 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b7600:	b508      	push	{r3, lr}
   b7602:	4b02      	ldr	r3, [pc, #8]	; (b760c <os_timer_destroy+0xc>)
   b7604:	681b      	ldr	r3, [r3, #0]
   b7606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7608:	9301      	str	r3, [sp, #4]
   b760a:	bd08      	pop	{r3, pc}
   b760c:	00030248 	.word	0x00030248

000b7610 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b7610:	b508      	push	{r3, lr}
   b7612:	4b02      	ldr	r3, [pc, #8]	; (b761c <os_timer_get_id+0xc>)
   b7614:	681b      	ldr	r3, [r3, #0]
   b7616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7618:	9301      	str	r3, [sp, #4]
   b761a:	bd08      	pop	{r3, pc}
   b761c:	00030248 	.word	0x00030248

000b7620 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b7620:	b508      	push	{r3, lr}
   b7622:	4b02      	ldr	r3, [pc, #8]	; (b762c <os_timer_change+0xc>)
   b7624:	681b      	ldr	r3, [r3, #0]
   b7626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7628:	9301      	str	r3, [sp, #4]
   b762a:	bd08      	pop	{r3, pc}
   b762c:	00030248 	.word	0x00030248

000b7630 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7630:	b508      	push	{r3, lr}
   b7632:	4b02      	ldr	r3, [pc, #8]	; (b763c <os_mutex_recursive_create+0xc>)
   b7634:	681b      	ldr	r3, [r3, #0]
   b7636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7638:	9301      	str	r3, [sp, #4]
   b763a:	bd08      	pop	{r3, pc}
   b763c:	00030248 	.word	0x00030248

000b7640 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b7640:	b508      	push	{r3, lr}
   b7642:	4b02      	ldr	r3, [pc, #8]	; (b764c <os_mutex_recursive_destroy+0xc>)
   b7644:	681b      	ldr	r3, [r3, #0]
   b7646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7648:	9301      	str	r3, [sp, #4]
   b764a:	bd08      	pop	{r3, pc}
   b764c:	00030248 	.word	0x00030248

000b7650 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b7650:	b508      	push	{r3, lr}
   b7652:	4b02      	ldr	r3, [pc, #8]	; (b765c <os_mutex_recursive_lock+0xc>)
   b7654:	681b      	ldr	r3, [r3, #0]
   b7656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7658:	9301      	str	r3, [sp, #4]
   b765a:	bd08      	pop	{r3, pc}
   b765c:	00030248 	.word	0x00030248

000b7660 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b7660:	b508      	push	{r3, lr}
   b7662:	4b02      	ldr	r3, [pc, #8]	; (b766c <os_mutex_recursive_unlock+0xc>)
   b7664:	681b      	ldr	r3, [r3, #0]
   b7666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7668:	9301      	str	r3, [sp, #4]
   b766a:	bd08      	pop	{r3, pc}
   b766c:	00030248 	.word	0x00030248

000b7670 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b7670:	b508      	push	{r3, lr}
   b7672:	4b02      	ldr	r3, [pc, #8]	; (b767c <os_timer_set_id+0xc>)
   b7674:	681b      	ldr	r3, [r3, #0]
   b7676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7678:	9301      	str	r3, [sp, #4]
   b767a:	bd08      	pop	{r3, pc}
   b767c:	00030248 	.word	0x00030248

000b7680 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7680:	b508      	push	{r3, lr}
   b7682:	4b02      	ldr	r3, [pc, #8]	; (b768c <inet_inet_ntop+0xc>)
   b7684:	681b      	ldr	r3, [r3, #0]
   b7686:	695b      	ldr	r3, [r3, #20]
   b7688:	9301      	str	r3, [sp, #4]
   b768a:	bd08      	pop	{r3, pc}
   b768c:	00030264 	.word	0x00030264

000b7690 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b7690:	b508      	push	{r3, lr}
   b7692:	4b02      	ldr	r3, [pc, #8]	; (b769c <hal_usart_end+0xc>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	689b      	ldr	r3, [r3, #8]
   b7698:	9301      	str	r3, [sp, #4]
   b769a:	bd08      	pop	{r3, pc}
   b769c:	0003023c 	.word	0x0003023c

000b76a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b76a0:	b508      	push	{r3, lr}
   b76a2:	4b02      	ldr	r3, [pc, #8]	; (b76ac <hal_usart_write+0xc>)
   b76a4:	681b      	ldr	r3, [r3, #0]
   b76a6:	68db      	ldr	r3, [r3, #12]
   b76a8:	9301      	str	r3, [sp, #4]
   b76aa:	bd08      	pop	{r3, pc}
   b76ac:	0003023c 	.word	0x0003023c

000b76b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b76b0:	b508      	push	{r3, lr}
   b76b2:	4b02      	ldr	r3, [pc, #8]	; (b76bc <hal_usart_available+0xc>)
   b76b4:	681b      	ldr	r3, [r3, #0]
   b76b6:	691b      	ldr	r3, [r3, #16]
   b76b8:	9301      	str	r3, [sp, #4]
   b76ba:	bd08      	pop	{r3, pc}
   b76bc:	0003023c 	.word	0x0003023c

000b76c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b76c0:	b508      	push	{r3, lr}
   b76c2:	4b02      	ldr	r3, [pc, #8]	; (b76cc <hal_usart_read+0xc>)
   b76c4:	681b      	ldr	r3, [r3, #0]
   b76c6:	695b      	ldr	r3, [r3, #20]
   b76c8:	9301      	str	r3, [sp, #4]
   b76ca:	bd08      	pop	{r3, pc}
   b76cc:	0003023c 	.word	0x0003023c

000b76d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b76d0:	b508      	push	{r3, lr}
   b76d2:	4b02      	ldr	r3, [pc, #8]	; (b76dc <hal_usart_peek+0xc>)
   b76d4:	681b      	ldr	r3, [r3, #0]
   b76d6:	699b      	ldr	r3, [r3, #24]
   b76d8:	9301      	str	r3, [sp, #4]
   b76da:	bd08      	pop	{r3, pc}
   b76dc:	0003023c 	.word	0x0003023c

000b76e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b76e0:	b508      	push	{r3, lr}
   b76e2:	4b02      	ldr	r3, [pc, #8]	; (b76ec <hal_usart_flush+0xc>)
   b76e4:	681b      	ldr	r3, [r3, #0]
   b76e6:	69db      	ldr	r3, [r3, #28]
   b76e8:	9301      	str	r3, [sp, #4]
   b76ea:	bd08      	pop	{r3, pc}
   b76ec:	0003023c 	.word	0x0003023c

000b76f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b76f0:	b508      	push	{r3, lr}
   b76f2:	4b02      	ldr	r3, [pc, #8]	; (b76fc <hal_usart_is_enabled+0xc>)
   b76f4:	681b      	ldr	r3, [r3, #0]
   b76f6:	6a1b      	ldr	r3, [r3, #32]
   b76f8:	9301      	str	r3, [sp, #4]
   b76fa:	bd08      	pop	{r3, pc}
   b76fc:	0003023c 	.word	0x0003023c

000b7700 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7700:	b508      	push	{r3, lr}
   b7702:	4b02      	ldr	r3, [pc, #8]	; (b770c <hal_usart_available_data_for_write+0xc>)
   b7704:	681b      	ldr	r3, [r3, #0]
   b7706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7708:	9301      	str	r3, [sp, #4]
   b770a:	bd08      	pop	{r3, pc}
   b770c:	0003023c 	.word	0x0003023c

000b7710 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7710:	b508      	push	{r3, lr}
   b7712:	4b02      	ldr	r3, [pc, #8]	; (b771c <hal_usart_begin_config+0xc>)
   b7714:	681b      	ldr	r3, [r3, #0]
   b7716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7718:	9301      	str	r3, [sp, #4]
   b771a:	bd08      	pop	{r3, pc}
   b771c:	0003023c 	.word	0x0003023c

000b7720 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7720:	b508      	push	{r3, lr}
   b7722:	4b02      	ldr	r3, [pc, #8]	; (b772c <hal_usart_init_ex+0xc>)
   b7724:	681b      	ldr	r3, [r3, #0]
   b7726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7728:	9301      	str	r3, [sp, #4]
   b772a:	bd08      	pop	{r3, pc}
   b772c:	0003023c 	.word	0x0003023c

000b7730 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b7730:	b508      	push	{r3, lr}
   b7732:	4b02      	ldr	r3, [pc, #8]	; (b773c <hal_i2c_set_speed+0xc>)
   b7734:	681b      	ldr	r3, [r3, #0]
   b7736:	681b      	ldr	r3, [r3, #0]
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	bd08      	pop	{r3, pc}
   b773c:	00030228 	.word	0x00030228

000b7740 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7740:	b508      	push	{r3, lr}
   b7742:	4b02      	ldr	r3, [pc, #8]	; (b774c <hal_i2c_begin+0xc>)
   b7744:	681b      	ldr	r3, [r3, #0]
   b7746:	68db      	ldr	r3, [r3, #12]
   b7748:	9301      	str	r3, [sp, #4]
   b774a:	bd08      	pop	{r3, pc}
   b774c:	00030228 	.word	0x00030228

000b7750 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7750:	b508      	push	{r3, lr}
   b7752:	4b02      	ldr	r3, [pc, #8]	; (b775c <hal_i2c_begin_transmission+0xc>)
   b7754:	681b      	ldr	r3, [r3, #0]
   b7756:	699b      	ldr	r3, [r3, #24]
   b7758:	9301      	str	r3, [sp, #4]
   b775a:	bd08      	pop	{r3, pc}
   b775c:	00030228 	.word	0x00030228

000b7760 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7760:	b508      	push	{r3, lr}
   b7762:	4b02      	ldr	r3, [pc, #8]	; (b776c <hal_i2c_end_transmission+0xc>)
   b7764:	681b      	ldr	r3, [r3, #0]
   b7766:	69db      	ldr	r3, [r3, #28]
   b7768:	9301      	str	r3, [sp, #4]
   b776a:	bd08      	pop	{r3, pc}
   b776c:	00030228 	.word	0x00030228

000b7770 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7770:	b508      	push	{r3, lr}
   b7772:	4b02      	ldr	r3, [pc, #8]	; (b777c <hal_i2c_write+0xc>)
   b7774:	681b      	ldr	r3, [r3, #0]
   b7776:	6a1b      	ldr	r3, [r3, #32]
   b7778:	9301      	str	r3, [sp, #4]
   b777a:	bd08      	pop	{r3, pc}
   b777c:	00030228 	.word	0x00030228

000b7780 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7780:	b508      	push	{r3, lr}
   b7782:	4b02      	ldr	r3, [pc, #8]	; (b778c <hal_i2c_available+0xc>)
   b7784:	681b      	ldr	r3, [r3, #0]
   b7786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7788:	9301      	str	r3, [sp, #4]
   b778a:	bd08      	pop	{r3, pc}
   b778c:	00030228 	.word	0x00030228

000b7790 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7790:	b508      	push	{r3, lr}
   b7792:	4b02      	ldr	r3, [pc, #8]	; (b779c <hal_i2c_read+0xc>)
   b7794:	681b      	ldr	r3, [r3, #0]
   b7796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7798:	9301      	str	r3, [sp, #4]
   b779a:	bd08      	pop	{r3, pc}
   b779c:	00030228 	.word	0x00030228

000b77a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b77a0:	b508      	push	{r3, lr}
   b77a2:	4b02      	ldr	r3, [pc, #8]	; (b77ac <hal_i2c_peek+0xc>)
   b77a4:	681b      	ldr	r3, [r3, #0]
   b77a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77a8:	9301      	str	r3, [sp, #4]
   b77aa:	bd08      	pop	{r3, pc}
   b77ac:	00030228 	.word	0x00030228

000b77b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b77b0:	b508      	push	{r3, lr}
   b77b2:	4b02      	ldr	r3, [pc, #8]	; (b77bc <hal_i2c_flush+0xc>)
   b77b4:	681b      	ldr	r3, [r3, #0]
   b77b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77b8:	9301      	str	r3, [sp, #4]
   b77ba:	bd08      	pop	{r3, pc}
   b77bc:	00030228 	.word	0x00030228

000b77c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b77c0:	b508      	push	{r3, lr}
   b77c2:	4b02      	ldr	r3, [pc, #8]	; (b77cc <hal_i2c_is_enabled+0xc>)
   b77c4:	681b      	ldr	r3, [r3, #0]
   b77c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b77c8:	9301      	str	r3, [sp, #4]
   b77ca:	bd08      	pop	{r3, pc}
   b77cc:	00030228 	.word	0x00030228

000b77d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b77d0:	b508      	push	{r3, lr}
   b77d2:	4b02      	ldr	r3, [pc, #8]	; (b77dc <hal_i2c_init+0xc>)
   b77d4:	681b      	ldr	r3, [r3, #0]
   b77d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b77d8:	9301      	str	r3, [sp, #4]
   b77da:	bd08      	pop	{r3, pc}
   b77dc:	00030228 	.word	0x00030228

000b77e0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b77e0:	b508      	push	{r3, lr}
   b77e2:	4b02      	ldr	r3, [pc, #8]	; (b77ec <hal_i2c_request_ex+0xc>)
   b77e4:	681b      	ldr	r3, [r3, #0]
   b77e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b77e8:	9301      	str	r3, [sp, #4]
   b77ea:	bd08      	pop	{r3, pc}
   b77ec:	00030228 	.word	0x00030228

000b77f0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b77f0:	b508      	push	{r3, lr}
   b77f2:	4b02      	ldr	r3, [pc, #8]	; (b77fc <hal_spi_begin+0xc>)
   b77f4:	681b      	ldr	r3, [r3, #0]
   b77f6:	681b      	ldr	r3, [r3, #0]
   b77f8:	9301      	str	r3, [sp, #4]
   b77fa:	bd08      	pop	{r3, pc}
   b77fc:	00030230 	.word	0x00030230

000b7800 <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b7800:	b508      	push	{r3, lr}
   b7802:	4b02      	ldr	r3, [pc, #8]	; (b780c <hal_spi_set_clock_divider+0xc>)
   b7804:	681b      	ldr	r3, [r3, #0]
   b7806:	691b      	ldr	r3, [r3, #16]
   b7808:	9301      	str	r3, [sp, #4]
   b780a:	bd08      	pop	{r3, pc}
   b780c:	00030230 	.word	0x00030230

000b7810 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7810:	b508      	push	{r3, lr}
   b7812:	4b02      	ldr	r3, [pc, #8]	; (b781c <hal_spi_transfer+0xc>)
   b7814:	681b      	ldr	r3, [r3, #0]
   b7816:	695b      	ldr	r3, [r3, #20]
   b7818:	9301      	str	r3, [sp, #4]
   b781a:	bd08      	pop	{r3, pc}
   b781c:	00030230 	.word	0x00030230

000b7820 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7820:	b508      	push	{r3, lr}
   b7822:	4b02      	ldr	r3, [pc, #8]	; (b782c <hal_spi_init+0xc>)
   b7824:	681b      	ldr	r3, [r3, #0]
   b7826:	69db      	ldr	r3, [r3, #28]
   b7828:	9301      	str	r3, [sp, #4]
   b782a:	bd08      	pop	{r3, pc}
   b782c:	00030230 	.word	0x00030230

000b7830 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7830:	b508      	push	{r3, lr}
   b7832:	4b02      	ldr	r3, [pc, #8]	; (b783c <hal_spi_is_enabled+0xc>)
   b7834:	681b      	ldr	r3, [r3, #0]
   b7836:	6a1b      	ldr	r3, [r3, #32]
   b7838:	9301      	str	r3, [sp, #4]
   b783a:	bd08      	pop	{r3, pc}
   b783c:	00030230 	.word	0x00030230

000b7840 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7840:	b508      	push	{r3, lr}
   b7842:	4b02      	ldr	r3, [pc, #8]	; (b784c <hal_spi_info+0xc>)
   b7844:	681b      	ldr	r3, [r3, #0]
   b7846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7848:	9301      	str	r3, [sp, #4]
   b784a:	bd08      	pop	{r3, pc}
   b784c:	00030230 	.word	0x00030230

000b7850 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b7850:	b508      	push	{r3, lr}
   b7852:	4b02      	ldr	r3, [pc, #8]	; (b785c <hal_spi_transfer_dma+0xc>)
   b7854:	681b      	ldr	r3, [r3, #0]
   b7856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7858:	9301      	str	r3, [sp, #4]
   b785a:	bd08      	pop	{r3, pc}
   b785c:	00030230 	.word	0x00030230

000b7860 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   b7860:	b508      	push	{r3, lr}
   b7862:	4b02      	ldr	r3, [pc, #8]	; (b786c <hal_spi_begin_ext+0xc>)
   b7864:	681b      	ldr	r3, [r3, #0]
   b7866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7868:	9301      	str	r3, [sp, #4]
   b786a:	bd08      	pop	{r3, pc}
   b786c:	00030230 	.word	0x00030230

000b7870 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b7870:	b508      	push	{r3, lr}
   b7872:	4b02      	ldr	r3, [pc, #8]	; (b787c <hal_spi_transfer_dma_status+0xc>)
   b7874:	681b      	ldr	r3, [r3, #0]
   b7876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7878:	9301      	str	r3, [sp, #4]
   b787a:	bd08      	pop	{r3, pc}
   b787c:	00030230 	.word	0x00030230

000b7880 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7880:	b508      	push	{r3, lr}
   b7882:	4b02      	ldr	r3, [pc, #8]	; (b788c <hal_spi_set_settings+0xc>)
   b7884:	681b      	ldr	r3, [r3, #0]
   b7886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7888:	9301      	str	r3, [sp, #4]
   b788a:	bd08      	pop	{r3, pc}
   b788c:	00030230 	.word	0x00030230

000b7890 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7890:	b508      	push	{r3, lr}
   b7892:	4b02      	ldr	r3, [pc, #8]	; (b789c <hal_spi_acquire+0xc>)
   b7894:	681b      	ldr	r3, [r3, #0]
   b7896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7898:	9301      	str	r3, [sp, #4]
   b789a:	bd08      	pop	{r3, pc}
   b789c:	00030230 	.word	0x00030230

000b78a0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b78a0:	b508      	push	{r3, lr}
   b78a2:	4b02      	ldr	r3, [pc, #8]	; (b78ac <hal_spi_release+0xc>)
   b78a4:	681b      	ldr	r3, [r3, #0]
   b78a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b78a8:	9301      	str	r3, [sp, #4]
   b78aa:	bd08      	pop	{r3, pc}
   b78ac:	00030230 	.word	0x00030230

000b78b0 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b78b0:	b508      	push	{r3, lr}
   b78b2:	4b02      	ldr	r3, [pc, #8]	; (b78bc <HAL_Servo_Attach+0xc>)
   b78b4:	681b      	ldr	r3, [r3, #0]
   b78b6:	691b      	ldr	r3, [r3, #16]
   b78b8:	9301      	str	r3, [sp, #4]
   b78ba:	bd08      	pop	{r3, pc}
   b78bc:	00030224 	.word	0x00030224

000b78c0 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b78c0:	b508      	push	{r3, lr}
   b78c2:	4b02      	ldr	r3, [pc, #8]	; (b78cc <HAL_Servo_Detach+0xc>)
   b78c4:	681b      	ldr	r3, [r3, #0]
   b78c6:	695b      	ldr	r3, [r3, #20]
   b78c8:	9301      	str	r3, [sp, #4]
   b78ca:	bd08      	pop	{r3, pc}
   b78cc:	00030224 	.word	0x00030224

000b78d0 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b78d0:	b508      	push	{r3, lr}
   b78d2:	4b02      	ldr	r3, [pc, #8]	; (b78dc <HAL_Servo_Write_Pulse_Width+0xc>)
   b78d4:	681b      	ldr	r3, [r3, #0]
   b78d6:	699b      	ldr	r3, [r3, #24]
   b78d8:	9301      	str	r3, [sp, #4]
   b78da:	bd08      	pop	{r3, pc}
   b78dc:	00030224 	.word	0x00030224

000b78e0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b78e0:	b508      	push	{r3, lr}
   b78e2:	4b02      	ldr	r3, [pc, #8]	; (b78ec <HAL_USB_USART_Init+0xc>)
   b78e4:	681b      	ldr	r3, [r3, #0]
   b78e6:	681b      	ldr	r3, [r3, #0]
   b78e8:	9301      	str	r3, [sp, #4]
   b78ea:	bd08      	pop	{r3, pc}
   b78ec:	0003024c 	.word	0x0003024c

000b78f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b78f0:	b508      	push	{r3, lr}
   b78f2:	4b02      	ldr	r3, [pc, #8]	; (b78fc <HAL_USB_USART_Begin+0xc>)
   b78f4:	681b      	ldr	r3, [r3, #0]
   b78f6:	685b      	ldr	r3, [r3, #4]
   b78f8:	9301      	str	r3, [sp, #4]
   b78fa:	bd08      	pop	{r3, pc}
   b78fc:	0003024c 	.word	0x0003024c

000b7900 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7900:	b508      	push	{r3, lr}
   b7902:	4b02      	ldr	r3, [pc, #8]	; (b790c <HAL_USB_USART_End+0xc>)
   b7904:	681b      	ldr	r3, [r3, #0]
   b7906:	689b      	ldr	r3, [r3, #8]
   b7908:	9301      	str	r3, [sp, #4]
   b790a:	bd08      	pop	{r3, pc}
   b790c:	0003024c 	.word	0x0003024c

000b7910 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7910:	b508      	push	{r3, lr}
   b7912:	4b02      	ldr	r3, [pc, #8]	; (b791c <HAL_USB_USART_Available_Data+0xc>)
   b7914:	681b      	ldr	r3, [r3, #0]
   b7916:	691b      	ldr	r3, [r3, #16]
   b7918:	9301      	str	r3, [sp, #4]
   b791a:	bd08      	pop	{r3, pc}
   b791c:	0003024c 	.word	0x0003024c

000b7920 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7920:	b508      	push	{r3, lr}
   b7922:	4b02      	ldr	r3, [pc, #8]	; (b792c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7924:	681b      	ldr	r3, [r3, #0]
   b7926:	695b      	ldr	r3, [r3, #20]
   b7928:	9301      	str	r3, [sp, #4]
   b792a:	bd08      	pop	{r3, pc}
   b792c:	0003024c 	.word	0x0003024c

000b7930 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7930:	b508      	push	{r3, lr}
   b7932:	4b02      	ldr	r3, [pc, #8]	; (b793c <HAL_USB_USART_Receive_Data+0xc>)
   b7934:	681b      	ldr	r3, [r3, #0]
   b7936:	699b      	ldr	r3, [r3, #24]
   b7938:	9301      	str	r3, [sp, #4]
   b793a:	bd08      	pop	{r3, pc}
   b793c:	0003024c 	.word	0x0003024c

000b7940 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7940:	b508      	push	{r3, lr}
   b7942:	4b02      	ldr	r3, [pc, #8]	; (b794c <HAL_USB_USART_Send_Data+0xc>)
   b7944:	681b      	ldr	r3, [r3, #0]
   b7946:	69db      	ldr	r3, [r3, #28]
   b7948:	9301      	str	r3, [sp, #4]
   b794a:	bd08      	pop	{r3, pc}
   b794c:	0003024c 	.word	0x0003024c

000b7950 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7950:	b508      	push	{r3, lr}
   b7952:	4b02      	ldr	r3, [pc, #8]	; (b795c <HAL_USB_USART_Flush_Data+0xc>)
   b7954:	681b      	ldr	r3, [r3, #0]
   b7956:	6a1b      	ldr	r3, [r3, #32]
   b7958:	9301      	str	r3, [sp, #4]
   b795a:	bd08      	pop	{r3, pc}
   b795c:	0003024c 	.word	0x0003024c

000b7960 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7960:	b508      	push	{r3, lr}
   b7962:	4b02      	ldr	r3, [pc, #8]	; (b796c <panic_+0xc>)
   b7964:	681b      	ldr	r3, [r3, #0]
   b7966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7968:	9301      	str	r3, [sp, #4]
   b796a:	bd08      	pop	{r3, pc}
   b796c:	00030260 	.word	0x00030260

000b7970 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7970:	b508      	push	{r3, lr}
   b7972:	4b02      	ldr	r3, [pc, #8]	; (b797c <log_message+0xc>)
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7978:	9301      	str	r3, [sp, #4]
   b797a:	bd08      	pop	{r3, pc}
   b797c:	00030260 	.word	0x00030260

000b7980 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7980:	b508      	push	{r3, lr}
   b7982:	4b02      	ldr	r3, [pc, #8]	; (b798c <log_level_name+0xc>)
   b7984:	681b      	ldr	r3, [r3, #0]
   b7986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7988:	9301      	str	r3, [sp, #4]
   b798a:	bd08      	pop	{r3, pc}
   b798c:	00030260 	.word	0x00030260

000b7990 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7990:	b508      	push	{r3, lr}
   b7992:	4b02      	ldr	r3, [pc, #8]	; (b799c <log_set_callbacks+0xc>)
   b7994:	681b      	ldr	r3, [r3, #0]
   b7996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7998:	9301      	str	r3, [sp, #4]
   b799a:	bd08      	pop	{r3, pc}
   b799c:	00030260 	.word	0x00030260

000b79a0 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b79a0:	b508      	push	{r3, lr}
   b79a2:	4b03      	ldr	r3, [pc, #12]	; (b79b0 <led_set_status_active+0x10>)
   b79a4:	681b      	ldr	r3, [r3, #0]
   b79a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b79aa:	9301      	str	r3, [sp, #4]
   b79ac:	bd08      	pop	{r3, pc}
   b79ae:	0000      	.short	0x0000
   b79b0:	00030260 	.word	0x00030260

000b79b4 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b79b4:	b508      	push	{r3, lr}
   b79b6:	4b02      	ldr	r3, [pc, #8]	; (b79c0 <system_mode+0xc>)
   b79b8:	681b      	ldr	r3, [r3, #0]
   b79ba:	681b      	ldr	r3, [r3, #0]
   b79bc:	9301      	str	r3, [sp, #4]
   b79be:	bd08      	pop	{r3, pc}
   b79c0:	00030220 	.word	0x00030220

000b79c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b79c4:	b508      	push	{r3, lr}
   b79c6:	4b02      	ldr	r3, [pc, #8]	; (b79d0 <set_system_mode+0xc>)
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	685b      	ldr	r3, [r3, #4]
   b79cc:	9301      	str	r3, [sp, #4]
   b79ce:	bd08      	pop	{r3, pc}
   b79d0:	00030220 	.word	0x00030220

000b79d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b79d4:	b508      	push	{r3, lr}
   b79d6:	4b02      	ldr	r3, [pc, #8]	; (b79e0 <system_delay_ms+0xc>)
   b79d8:	681b      	ldr	r3, [r3, #0]
   b79da:	695b      	ldr	r3, [r3, #20]
   b79dc:	9301      	str	r3, [sp, #4]
   b79de:	bd08      	pop	{r3, pc}
   b79e0:	00030220 	.word	0x00030220

000b79e4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b79e4:	b508      	push	{r3, lr}
   b79e6:	4b02      	ldr	r3, [pc, #8]	; (b79f0 <application_thread_current+0xc>)
   b79e8:	681b      	ldr	r3, [r3, #0]
   b79ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b79ec:	9301      	str	r3, [sp, #4]
   b79ee:	bd08      	pop	{r3, pc}
   b79f0:	00030220 	.word	0x00030220

000b79f4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b79f4:	b508      	push	{r3, lr}
   b79f6:	4b02      	ldr	r3, [pc, #8]	; (b7a00 <application_thread_invoke+0xc>)
   b79f8:	681b      	ldr	r3, [r3, #0]
   b79fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b79fc:	9301      	str	r3, [sp, #4]
   b79fe:	bd08      	pop	{r3, pc}
   b7a00:	00030220 	.word	0x00030220

000b7a04 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7a04:	b508      	push	{r3, lr}
   b7a06:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <system_thread_get_state+0xc>)
   b7a08:	681b      	ldr	r3, [r3, #0]
   b7a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	bd08      	pop	{r3, pc}
   b7a10:	00030220 	.word	0x00030220

000b7a14 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b7a14:	b508      	push	{r3, lr}
   b7a16:	4b02      	ldr	r3, [pc, #8]	; (b7a20 <led_pattern_period+0xc>)
   b7a18:	681b      	ldr	r3, [r3, #0]
   b7a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7a1c:	9301      	str	r3, [sp, #4]
   b7a1e:	bd08      	pop	{r3, pc}
   b7a20:	00030220 	.word	0x00030220

000b7a24 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7a24:	b508      	push	{r3, lr}
   b7a26:	4b03      	ldr	r3, [pc, #12]	; (b7a34 <system_ctrl_set_app_request_handler+0x10>)
   b7a28:	681b      	ldr	r3, [r3, #0]
   b7a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7a2e:	9301      	str	r3, [sp, #4]
   b7a30:	bd08      	pop	{r3, pc}
   b7a32:	0000      	.short	0x0000
   b7a34:	00030220 	.word	0x00030220

000b7a38 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7a38:	b508      	push	{r3, lr}
   b7a3a:	4b03      	ldr	r3, [pc, #12]	; (b7a48 <system_ctrl_set_result+0x10>)
   b7a3c:	681b      	ldr	r3, [r3, #0]
   b7a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7a42:	9301      	str	r3, [sp, #4]
   b7a44:	bd08      	pop	{r3, pc}
   b7a46:	0000      	.short	0x0000
   b7a48:	00030220 	.word	0x00030220

000b7a4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a4c:	b508      	push	{r3, lr}
   b7a4e:	4b02      	ldr	r3, [pc, #8]	; (b7a58 <network_connect+0xc>)
   b7a50:	681b      	ldr	r3, [r3, #0]
   b7a52:	685b      	ldr	r3, [r3, #4]
   b7a54:	9301      	str	r3, [sp, #4]
   b7a56:	bd08      	pop	{r3, pc}
   b7a58:	00030240 	.word	0x00030240

000b7a5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7a5c:	b508      	push	{r3, lr}
   b7a5e:	4b02      	ldr	r3, [pc, #8]	; (b7a68 <network_connecting+0xc>)
   b7a60:	681b      	ldr	r3, [r3, #0]
   b7a62:	689b      	ldr	r3, [r3, #8]
   b7a64:	9301      	str	r3, [sp, #4]
   b7a66:	bd08      	pop	{r3, pc}
   b7a68:	00030240 	.word	0x00030240

000b7a6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7a6c:	b508      	push	{r3, lr}
   b7a6e:	4b02      	ldr	r3, [pc, #8]	; (b7a78 <network_disconnect+0xc>)
   b7a70:	681b      	ldr	r3, [r3, #0]
   b7a72:	68db      	ldr	r3, [r3, #12]
   b7a74:	9301      	str	r3, [sp, #4]
   b7a76:	bd08      	pop	{r3, pc}
   b7a78:	00030240 	.word	0x00030240

000b7a7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7a7c:	b508      	push	{r3, lr}
   b7a7e:	4b02      	ldr	r3, [pc, #8]	; (b7a88 <network_ready+0xc>)
   b7a80:	681b      	ldr	r3, [r3, #0]
   b7a82:	691b      	ldr	r3, [r3, #16]
   b7a84:	9301      	str	r3, [sp, #4]
   b7a86:	bd08      	pop	{r3, pc}
   b7a88:	00030240 	.word	0x00030240

000b7a8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	4b02      	ldr	r3, [pc, #8]	; (b7a98 <network_on+0xc>)
   b7a90:	681b      	ldr	r3, [r3, #0]
   b7a92:	695b      	ldr	r3, [r3, #20]
   b7a94:	9301      	str	r3, [sp, #4]
   b7a96:	bd08      	pop	{r3, pc}
   b7a98:	00030240 	.word	0x00030240

000b7a9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a9c:	b508      	push	{r3, lr}
   b7a9e:	4b02      	ldr	r3, [pc, #8]	; (b7aa8 <network_off+0xc>)
   b7aa0:	681b      	ldr	r3, [r3, #0]
   b7aa2:	699b      	ldr	r3, [r3, #24]
   b7aa4:	9301      	str	r3, [sp, #4]
   b7aa6:	bd08      	pop	{r3, pc}
   b7aa8:	00030240 	.word	0x00030240

000b7aac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7aac:	b508      	push	{r3, lr}
   b7aae:	4b02      	ldr	r3, [pc, #8]	; (b7ab8 <network_listen+0xc>)
   b7ab0:	681b      	ldr	r3, [r3, #0]
   b7ab2:	69db      	ldr	r3, [r3, #28]
   b7ab4:	9301      	str	r3, [sp, #4]
   b7ab6:	bd08      	pop	{r3, pc}
   b7ab8:	00030240 	.word	0x00030240

000b7abc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7abc:	b508      	push	{r3, lr}
   b7abe:	4b02      	ldr	r3, [pc, #8]	; (b7ac8 <network_listening+0xc>)
   b7ac0:	681b      	ldr	r3, [r3, #0]
   b7ac2:	6a1b      	ldr	r3, [r3, #32]
   b7ac4:	9301      	str	r3, [sp, #4]
   b7ac6:	bd08      	pop	{r3, pc}
   b7ac8:	00030240 	.word	0x00030240

000b7acc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7acc:	b508      	push	{r3, lr}
   b7ace:	4b02      	ldr	r3, [pc, #8]	; (b7ad8 <network_set_listen_timeout+0xc>)
   b7ad0:	681b      	ldr	r3, [r3, #0]
   b7ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7ad4:	9301      	str	r3, [sp, #4]
   b7ad6:	bd08      	pop	{r3, pc}
   b7ad8:	00030240 	.word	0x00030240

000b7adc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7adc:	b508      	push	{r3, lr}
   b7ade:	4b02      	ldr	r3, [pc, #8]	; (b7ae8 <network_get_listen_timeout+0xc>)
   b7ae0:	681b      	ldr	r3, [r3, #0]
   b7ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ae4:	9301      	str	r3, [sp, #4]
   b7ae6:	bd08      	pop	{r3, pc}
   b7ae8:	00030240 	.word	0x00030240

000b7aec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7aec:	b508      	push	{r3, lr}
   b7aee:	4b02      	ldr	r3, [pc, #8]	; (b7af8 <network_is_on+0xc>)
   b7af0:	681b      	ldr	r3, [r3, #0]
   b7af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7af4:	9301      	str	r3, [sp, #4]
   b7af6:	bd08      	pop	{r3, pc}
   b7af8:	00030240 	.word	0x00030240

000b7afc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7afc:	b508      	push	{r3, lr}
   b7afe:	4b02      	ldr	r3, [pc, #8]	; (b7b08 <network_is_off+0xc>)
   b7b00:	681b      	ldr	r3, [r3, #0]
   b7b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b04:	9301      	str	r3, [sp, #4]
   b7b06:	bd08      	pop	{r3, pc}
   b7b08:	00030240 	.word	0x00030240

000b7b0c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7b0c:	b508      	push	{r3, lr}
   b7b0e:	4b02      	ldr	r3, [pc, #8]	; (b7b18 <spark_process+0xc>)
   b7b10:	681b      	ldr	r3, [r3, #0]
   b7b12:	689b      	ldr	r3, [r3, #8]
   b7b14:	9301      	str	r3, [sp, #4]
   b7b16:	bd08      	pop	{r3, pc}
   b7b18:	00030244 	.word	0x00030244

000b7b1c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7b1c:	b508      	push	{r3, lr}
   b7b1e:	4b02      	ldr	r3, [pc, #8]	; (b7b28 <spark_cloud_flag_connected+0xc>)
   b7b20:	681b      	ldr	r3, [r3, #0]
   b7b22:	695b      	ldr	r3, [r3, #20]
   b7b24:	9301      	str	r3, [sp, #4]
   b7b26:	bd08      	pop	{r3, pc}
   b7b28:	00030244 	.word	0x00030244

000b7b2c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7b2c:	b508      	push	{r3, lr}
   b7b2e:	4b02      	ldr	r3, [pc, #8]	; (b7b38 <spark_send_event+0xc>)
   b7b30:	681b      	ldr	r3, [r3, #0]
   b7b32:	6a1b      	ldr	r3, [r3, #32]
   b7b34:	9301      	str	r3, [sp, #4]
   b7b36:	bd08      	pop	{r3, pc}
   b7b38:	00030244 	.word	0x00030244

000b7b3c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7b3c:	b508      	push	{r3, lr}
   b7b3e:	4b02      	ldr	r3, [pc, #8]	; (b7b48 <spark_subscribe+0xc>)
   b7b40:	681b      	ldr	r3, [r3, #0]
   b7b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b44:	9301      	str	r3, [sp, #4]
   b7b46:	bd08      	pop	{r3, pc}
   b7b48:	00030244 	.word	0x00030244

000b7b4c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7b4c:	b508      	push	{r3, lr}
   b7b4e:	4b02      	ldr	r3, [pc, #8]	; (b7b58 <spark_sync_time_pending+0xc>)
   b7b50:	681b      	ldr	r3, [r3, #0]
   b7b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b54:	9301      	str	r3, [sp, #4]
   b7b56:	bd08      	pop	{r3, pc}
   b7b58:	00030244 	.word	0x00030244

000b7b5c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7b5c:	b508      	push	{r3, lr}
   b7b5e:	4b02      	ldr	r3, [pc, #8]	; (b7b68 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7b60:	681b      	ldr	r3, [r3, #0]
   b7b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7b64:	9301      	str	r3, [sp, #4]
   b7b66:	bd08      	pop	{r3, pc}
   b7b68:	00030244 	.word	0x00030244

000b7b6c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7b6c:	b508      	push	{r3, lr}
   b7b6e:	4b02      	ldr	r3, [pc, #8]	; (b7b78 <malloc+0xc>)
   b7b70:	681b      	ldr	r3, [r3, #0]
   b7b72:	681b      	ldr	r3, [r3, #0]
   b7b74:	9301      	str	r3, [sp, #4]
   b7b76:	bd08      	pop	{r3, pc}
   b7b78:	0003021c 	.word	0x0003021c

000b7b7c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7b7c:	b508      	push	{r3, lr}
   b7b7e:	4b02      	ldr	r3, [pc, #8]	; (b7b88 <free+0xc>)
   b7b80:	681b      	ldr	r3, [r3, #0]
   b7b82:	685b      	ldr	r3, [r3, #4]
   b7b84:	9301      	str	r3, [sp, #4]
   b7b86:	bd08      	pop	{r3, pc}
   b7b88:	0003021c 	.word	0x0003021c

000b7b8c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7b8c:	b508      	push	{r3, lr}
   b7b8e:	4b02      	ldr	r3, [pc, #8]	; (b7b98 <realloc+0xc>)
   b7b90:	681b      	ldr	r3, [r3, #0]
   b7b92:	689b      	ldr	r3, [r3, #8]
   b7b94:	9301      	str	r3, [sp, #4]
   b7b96:	bd08      	pop	{r3, pc}
   b7b98:	0003021c 	.word	0x0003021c

000b7b9c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7b9c:	b508      	push	{r3, lr}
   b7b9e:	4b02      	ldr	r3, [pc, #8]	; (b7ba8 <sprintf+0xc>)
   b7ba0:	681b      	ldr	r3, [r3, #0]
   b7ba2:	68db      	ldr	r3, [r3, #12]
   b7ba4:	9301      	str	r3, [sp, #4]
   b7ba6:	bd08      	pop	{r3, pc}
   b7ba8:	0003021c 	.word	0x0003021c

000b7bac <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7bac:	b508      	push	{r3, lr}
   b7bae:	4b02      	ldr	r3, [pc, #8]	; (b7bb8 <snprintf+0xc>)
   b7bb0:	681b      	ldr	r3, [r3, #0]
   b7bb2:	69db      	ldr	r3, [r3, #28]
   b7bb4:	9301      	str	r3, [sp, #4]
   b7bb6:	bd08      	pop	{r3, pc}
   b7bb8:	0003021c 	.word	0x0003021c

000b7bbc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7bbc:	b508      	push	{r3, lr}
   b7bbe:	4b02      	ldr	r3, [pc, #8]	; (b7bc8 <vsnprintf+0xc>)
   b7bc0:	681b      	ldr	r3, [r3, #0]
   b7bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7bc4:	9301      	str	r3, [sp, #4]
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	0003021c 	.word	0x0003021c

000b7bcc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7bcc:	b508      	push	{r3, lr}
   b7bce:	4b02      	ldr	r3, [pc, #8]	; (b7bd8 <abort+0xc>)
   b7bd0:	681b      	ldr	r3, [r3, #0]
   b7bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7bd4:	9301      	str	r3, [sp, #4]
   b7bd6:	bd08      	pop	{r3, pc}
   b7bd8:	0003021c 	.word	0x0003021c

000b7bdc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7bdc:	b508      	push	{r3, lr}
   b7bde:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <_malloc_r+0xc>)
   b7be0:	681b      	ldr	r3, [r3, #0]
   b7be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7be4:	9301      	str	r3, [sp, #4]
   b7be6:	bd08      	pop	{r3, pc}
   b7be8:	0003021c 	.word	0x0003021c

000b7bec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7bec:	b508      	push	{r3, lr}
   b7bee:	4b02      	ldr	r3, [pc, #8]	; (b7bf8 <__errno+0xc>)
   b7bf0:	681b      	ldr	r3, [r3, #0]
   b7bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7bf4:	9301      	str	r3, [sp, #4]
   b7bf6:	bd08      	pop	{r3, pc}
   b7bf8:	0003021c 	.word	0x0003021c

000b7bfc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	4b02      	ldr	r3, [pc, #8]	; (b7c08 <__assert_func+0xc>)
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c04:	9301      	str	r3, [sp, #4]
   b7c06:	bd08      	pop	{r3, pc}
   b7c08:	0003021c 	.word	0x0003021c

000b7c0c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7c0c:	b508      	push	{r3, lr}
   b7c0e:	4b02      	ldr	r3, [pc, #8]	; (b7c18 <newlib_impure_ptr_callback+0xc>)
   b7c10:	681b      	ldr	r3, [r3, #0]
   b7c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c14:	9301      	str	r3, [sp, #4]
   b7c16:	bd08      	pop	{r3, pc}
   b7c18:	0003021c 	.word	0x0003021c

000b7c1c <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	4b02      	ldr	r3, [pc, #8]	; (b7c28 <localtime_r+0xc>)
   b7c20:	681b      	ldr	r3, [r3, #0]
   b7c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7c24:	9301      	str	r3, [sp, #4]
   b7c26:	bd08      	pop	{r3, pc}
   b7c28:	0003021c 	.word	0x0003021c

000b7c2c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c2c:	2200      	movs	r2, #0
   b7c2e:	6840      	ldr	r0, [r0, #4]
   b7c30:	4611      	mov	r1, r2
   b7c32:	f7ff bf43 	b.w	b7abc <network_listening>

000b7c36 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c36:	2200      	movs	r2, #0
   b7c38:	6840      	ldr	r0, [r0, #4]
   b7c3a:	4611      	mov	r1, r2
   b7c3c:	f7ff bf4e 	b.w	b7adc <network_get_listen_timeout>

000b7c40 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c40:	6840      	ldr	r0, [r0, #4]
   b7c42:	2200      	movs	r2, #0
   b7c44:	f7ff bf42 	b.w	b7acc <network_set_listen_timeout>

000b7c48 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c48:	6840      	ldr	r0, [r0, #4]
   b7c4a:	2200      	movs	r2, #0
   b7c4c:	f081 0101 	eor.w	r1, r1, #1
   b7c50:	f7ff bf2c 	b.w	b7aac <network_listen>

000b7c54 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c54:	2300      	movs	r3, #0
   b7c56:	6840      	ldr	r0, [r0, #4]
   b7c58:	461a      	mov	r2, r3
   b7c5a:	4619      	mov	r1, r3
   b7c5c:	f7ff bf1e 	b.w	b7a9c <network_off>

000b7c60 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c60:	2300      	movs	r3, #0
   b7c62:	6840      	ldr	r0, [r0, #4]
   b7c64:	461a      	mov	r2, r3
   b7c66:	4619      	mov	r1, r3
   b7c68:	f7ff bf10 	b.w	b7a8c <network_on>

000b7c6c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7c6c:	2200      	movs	r2, #0
   b7c6e:	6840      	ldr	r0, [r0, #4]
   b7c70:	4611      	mov	r1, r2
   b7c72:	f7ff bf03 	b.w	b7a7c <network_ready>

000b7c76 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7c76:	2200      	movs	r2, #0
   b7c78:	6840      	ldr	r0, [r0, #4]
   b7c7a:	4611      	mov	r1, r2
   b7c7c:	f7ff beee 	b.w	b7a5c <network_connecting>

000b7c80 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7c80:	6840      	ldr	r0, [r0, #4]
   b7c82:	2200      	movs	r2, #0
   b7c84:	2102      	movs	r1, #2
   b7c86:	f7ff bef1 	b.w	b7a6c <network_disconnect>

000b7c8a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7c8a:	2300      	movs	r3, #0
   b7c8c:	6840      	ldr	r0, [r0, #4]
   b7c8e:	461a      	mov	r2, r3
   b7c90:	f7ff bedc 	b.w	b7a4c <network_connect>

000b7c94 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7c94:	4b02      	ldr	r3, [pc, #8]	; (b7ca0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7c96:	2203      	movs	r2, #3
   b7c98:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7c9a:	4a02      	ldr	r2, [pc, #8]	; (b7ca4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7c9c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7c9e:	4770      	bx	lr
   b7ca0:	2003e620 	.word	0x2003e620
   b7ca4:	000bed44 	.word	0x000bed44

000b7ca8 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b7ca8:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b7caa:	460b      	mov	r3, r1
    s->update(ticks);
   b7cac:	6892      	ldr	r2, [r2, #8]
   b7cae:	4601      	mov	r1, r0
   b7cb0:	4618      	mov	r0, r3
   b7cb2:	4710      	bx	r2

000b7cb4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b7cb4:	b570      	push	{r4, r5, r6, lr}
   b7cb6:	4c0e      	ldr	r4, [pc, #56]	; (b7cf0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b7cb8:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b7cba:	2500      	movs	r5, #0
   b7cbc:	241c      	movs	r4, #28
   b7cbe:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b7cc2:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b7cc6:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b7cca:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b7ccc:	f004 0403 	and.w	r4, r4, #3
   b7cd0:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b7cd4:	b2e4      	uxtb	r4, r4
   b7cd6:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b7cd8:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b7cda:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b7cdc:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b7cde:	7c42      	ldrb	r2, [r0, #17]
   b7ce0:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b7ce2:	bf0a      	itet	eq
   b7ce4:	4b03      	ldreq	r3, [pc, #12]	; (b7cf4 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b7ce6:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b7ce8:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b7cec:	bd70      	pop	{r4, r5, r6, pc}
   b7cee:	bf00      	nop
   b7cf0:	000bec40 	.word	0x000bec40
   b7cf4:	000b7ca9 	.word	0x000b7ca9

000b7cf8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7cf8:	2100      	movs	r1, #0
   b7cfa:	f7ff bdd1 	b.w	b78a0 <hal_spi_release>

000b7cfe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7cfe:	2100      	movs	r1, #0
   b7d00:	f7ff bdc6 	b.w	b7890 <hal_spi_acquire>

000b7d04 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d04:	b510      	push	{r4, lr}
   b7d06:	4604      	mov	r4, r0
   b7d08:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d0a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d0c:	f7ff fd88 	bl	b7820 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d10:	2300      	movs	r3, #0
   b7d12:	6063      	str	r3, [r4, #4]
}
   b7d14:	4620      	mov	r0, r4
   b7d16:	bd10      	pop	{r4, pc}

000b7d18 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7d18:	b513      	push	{r0, r1, r4, lr}
   b7d1a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7d1c:	7800      	ldrb	r0, [r0, #0]
   b7d1e:	f7ff ffee 	bl	b7cfe <_ZN8SPIClass4lockEv.isra.0>
   b7d22:	b958      	cbnz	r0, b7d3c <_ZN8SPIClass5beginEv+0x24>
   b7d24:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7d26:	9001      	str	r0, [sp, #4]
   b7d28:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7d2c:	f7ff fd60 	bl	b77f0 <hal_spi_begin>
        unlock();
   b7d30:	9801      	ldr	r0, [sp, #4]
    }
}
   b7d32:	b002      	add	sp, #8
   b7d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d38:	f7ff bfde 	b.w	b7cf8 <_ZN8SPIClass6unlockEv.isra.0>
   b7d3c:	b002      	add	sp, #8
   b7d3e:	bd10      	pop	{r4, pc}

000b7d40 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   b7d40:	b513      	push	{r0, r1, r4, lr}
   b7d42:	4604      	mov	r4, r0
    if (!lock())
   b7d44:	7800      	ldrb	r0, [r0, #0]
{
   b7d46:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   b7d4a:	f7ff ffd8 	bl	b7cfe <_ZN8SPIClass4lockEv.isra.0>
   b7d4e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7d52:	4603      	mov	r3, r0
   b7d54:	b948      	cbnz	r0, b7d6a <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   b7d56:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   b7d58:	9000      	str	r0, [sp, #0]
   b7d5a:	f7ff fd81 	bl	b7860 <hal_spi_begin_ext>
        unlock();
   b7d5e:	9800      	ldr	r0, [sp, #0]
    }
}
   b7d60:	b002      	add	sp, #8
   b7d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d66:	f7ff bfc7 	b.w	b7cf8 <_ZN8SPIClass6unlockEv.isra.0>
   b7d6a:	b002      	add	sp, #8
   b7d6c:	bd10      	pop	{r4, pc}

000b7d6e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7d6e:	7800      	ldrb	r0, [r0, #0]
   b7d70:	f7ff bfc2 	b.w	b7cf8 <_ZN8SPIClass6unlockEv.isra.0>

000b7d74 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7d74:	0840      	lsrs	r0, r0, #1
{
   b7d76:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7d78:	6018      	str	r0, [r3, #0]
   b7d7a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7d7c:	6818      	ldr	r0, [r3, #0]
   b7d7e:	4288      	cmp	r0, r1
   b7d80:	b2e5      	uxtb	r5, r4
   b7d82:	d906      	bls.n	b7d92 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7d84:	3401      	adds	r4, #1
   b7d86:	2c08      	cmp	r4, #8
   b7d88:	d002      	beq.n	b7d90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7d8a:	0840      	lsrs	r0, r0, #1
   b7d8c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7d8e:	e7f5      	b.n	b7d7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7d90:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7d92:	4b02      	ldr	r3, [pc, #8]	; (b7d9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7d94:	5d5b      	ldrb	r3, [r3, r5]
   b7d96:	7013      	strb	r3, [r2, #0]
}
   b7d98:	bd30      	pop	{r4, r5, pc}
   b7d9a:	bf00      	nop
   b7d9c:	000bed78 	.word	0x000bed78

000b7da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7da4:	4606      	mov	r6, r0
   b7da6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7da8:	7800      	ldrb	r0, [r0, #0]
{
   b7daa:	460c      	mov	r4, r1
    CHECK(lock());
   b7dac:	f7ff ffa7 	bl	b7cfe <_ZN8SPIClass4lockEv.isra.0>
   b7db0:	2800      	cmp	r0, #0
   b7db2:	db1b      	blt.n	b7dec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7db4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7db6:	2214      	movs	r2, #20
   b7db8:	2100      	movs	r1, #0
   b7dba:	a809      	add	r0, sp, #36	; 0x24
   b7dbc:	f004 fc0e 	bl	bc5dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7dc0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7dc2:	2200      	movs	r2, #0
   b7dc4:	a909      	add	r1, sp, #36	; 0x24
   b7dc6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7dc8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7dcc:	f7ff fd38 	bl	b7840 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7dd0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7dd4:	b113      	cbz	r3, b7ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7dd6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7dda:	b155      	cbz	r5, b7df2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7ddc:	2700      	movs	r7, #0
   b7dde:	46b9      	mov	r9, r7
   b7de0:	46b8      	mov	r8, r7
   b7de2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7de4:	7923      	ldrb	r3, [r4, #4]
   b7de6:	b15d      	cbz	r5, b7e00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7de8:	b1c3      	cbz	r3, b7e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7dea:	2000      	movs	r0, #0
}
   b7dec:	b00f      	add	sp, #60	; 0x3c
   b7dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7df2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7df6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7dfa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7dfe:	e7f1      	b.n	b7de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7e00:	2b00      	cmp	r3, #0
   b7e02:	d135      	bne.n	b7e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7e04:	68a3      	ldr	r3, [r4, #8]
   b7e06:	4543      	cmp	r3, r8
   b7e08:	d108      	bne.n	b7e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7e0a:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e0e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e16:	89a3      	ldrh	r3, [r4, #12]
   b7e18:	429a      	cmp	r2, r3
   b7e1a:	d0e6      	beq.n	b7dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7e1c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e1e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7e20:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e24:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7e26:	ab04      	add	r3, sp, #16
   b7e28:	f10d 020f 	add.w	r2, sp, #15
   b7e2c:	f7ff ffa2 	bl	b7d74 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7e30:	7921      	ldrb	r1, [r4, #4]
   b7e32:	b985      	cbnz	r5, b7e56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7e34:	b989      	cbnz	r1, b7e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e36:	68a3      	ldr	r3, [r4, #8]
   b7e38:	4543      	cmp	r3, r8
   b7e3a:	d30e      	bcc.n	b7e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7e3c:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e40:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e48:	89a3      	ldrh	r3, [r4, #12]
   b7e4a:	429a      	cmp	r2, r3
   b7e4c:	d105      	bne.n	b7e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7e4e:	9b04      	ldr	r3, [sp, #16]
   b7e50:	4543      	cmp	r3, r8
   b7e52:	d102      	bne.n	b7e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e54:	e7c9      	b.n	b7dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7e56:	2900      	cmp	r1, #0
   b7e58:	d1f9      	bne.n	b7e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7e5a:	2300      	movs	r3, #0
   b7e5c:	9301      	str	r3, [sp, #4]
   b7e5e:	7b63      	ldrb	r3, [r4, #13]
   b7e60:	9300      	str	r3, [sp, #0]
   b7e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7e66:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7e68:	7830      	ldrb	r0, [r6, #0]
   b7e6a:	f7ff fd09 	bl	b7880 <hal_spi_set_settings>
   b7e6e:	e7bc      	b.n	b7dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7e70:	e9cd 5500 	strd	r5, r5, [sp]
   b7e74:	462b      	mov	r3, r5
   b7e76:	462a      	mov	r2, r5
   b7e78:	2101      	movs	r1, #1
   b7e7a:	e7f5      	b.n	b7e68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7e7c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e80:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7e82:	2300      	movs	r3, #0
{
   b7e84:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b7e86:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b7e88:	9302      	str	r3, [sp, #8]
{
   b7e8a:	460e      	mov	r6, r1
   b7e8c:	4617      	mov	r7, r2
    if (!lock())
   b7e8e:	f7ff ff36 	bl	b7cfe <_ZN8SPIClass4lockEv.isra.0>
   b7e92:	4605      	mov	r5, r0
   b7e94:	bb00      	cbnz	r0, b7ed8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b7e96:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7e9a:	4601      	mov	r1, r0
   b7e9c:	2214      	movs	r2, #20
   b7e9e:	a803      	add	r0, sp, #12
   b7ea0:	f004 fb9c 	bl	bc5dc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ea4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7ea6:	462a      	mov	r2, r5
   b7ea8:	a903      	add	r1, sp, #12
   b7eaa:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7eac:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7eb0:	f7ff fcc6 	bl	b7840 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7eb4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7eb6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7eba:	ab02      	add	r3, sp, #8
   b7ebc:	f10d 0207 	add.w	r2, sp, #7
   b7ec0:	fb07 f106 	mul.w	r1, r7, r6
   b7ec4:	f7ff ff56 	bl	b7d74 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7ec8:	7820      	ldrb	r0, [r4, #0]
   b7eca:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7ece:	f7ff fc97 	bl	b7800 <hal_spi_set_clock_divider>
        unlock();
   b7ed2:	7820      	ldrb	r0, [r4, #0]
   b7ed4:	f7ff ff10 	bl	b7cf8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7ed8:	9802      	ldr	r0, [sp, #8]
   b7eda:	b008      	add	sp, #32
   b7edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7ee0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7ee0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7ee2:	7800      	ldrb	r0, [r0, #0]
   b7ee4:	f7ff fc94 	bl	b7810 <hal_spi_transfer>
}
   b7ee8:	b2c0      	uxtb	r0, r0
   b7eea:	bd08      	pop	{r3, pc}

000b7eec <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b7eec:	b530      	push	{r4, r5, lr}
   b7eee:	b087      	sub	sp, #28
   b7ef0:	4604      	mov	r4, r0
   b7ef2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7ef4:	9500      	str	r5, [sp, #0]
   b7ef6:	7800      	ldrb	r0, [r0, #0]
   b7ef8:	f7ff fcaa 	bl	b7850 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b7efc:	b93d      	cbnz	r5, b7f0e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b7efe:	7820      	ldrb	r0, [r4, #0]
   b7f00:	a902      	add	r1, sp, #8
   b7f02:	f7ff fcb5 	bl	b7870 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b7f06:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7f0a:	07db      	lsls	r3, r3, #31
   b7f0c:	d4f7      	bmi.n	b7efe <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7f0e:	b007      	add	sp, #28
   b7f10:	bd30      	pop	{r4, r5, pc}

000b7f12 <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b7f12:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b7f16:	1c53      	adds	r3, r2, #1
   b7f18:	d00b      	beq.n	b7f32 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b7f1a:	8843      	ldrh	r3, [r0, #2]
   b7f1c:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b7f1e:	428b      	cmp	r3, r1
   b7f20:	d803      	bhi.n	b7f2a <_ZN5Servo17writeMicrosecondsEt+0x18>
   b7f22:	4288      	cmp	r0, r1
   b7f24:	4603      	mov	r3, r0
   b7f26:	bf28      	it	cs
   b7f28:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b7f2a:	4619      	mov	r1, r3
   b7f2c:	b290      	uxth	r0, r2
   b7f2e:	f7ff bccf 	b.w	b78d0 <HAL_Servo_Write_Pulse_Width>
}
   b7f32:	4770      	bx	lr

000b7f34 <_ZN5Servo5writeEi>:
{
   b7f34:	b513      	push	{r0, r1, r4, lr}
   b7f36:	4604      	mov	r4, r0
   b7f38:	4608      	mov	r0, r1
   b7f3a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b7f3e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b7f42:	4288      	cmp	r0, r1
   b7f44:	db10      	blt.n	b7f68 <_ZN5Servo5writeEi+0x34>
   b7f46:	4290      	cmp	r0, r2
   b7f48:	bfa8      	it	ge
   b7f4a:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b7f4c:	88a3      	ldrh	r3, [r4, #4]
   b7f4e:	9300      	str	r3, [sp, #0]
   b7f50:	8863      	ldrh	r3, [r4, #2]
   b7f52:	f002 fbff 	bl	ba754 <_Z3mapiiiii>
   b7f56:	68e1      	ldr	r1, [r4, #12]
   b7f58:	4401      	add	r1, r0
   b7f5a:	b289      	uxth	r1, r1
   b7f5c:	4620      	mov	r0, r4
}
   b7f5e:	b002      	add	sp, #8
   b7f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b7f64:	f7ff bfd5 	b.w	b7f12 <_ZN5Servo17writeMicrosecondsEt>
   b7f68:	4608      	mov	r0, r1
   b7f6a:	e7ef      	b.n	b7f4c <_ZN5Servo5writeEi+0x18>

000b7f6c <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b7f6c:	4a04      	ldr	r2, [pc, #16]	; (b7f80 <_ZN5Servo11resetFieldsEv+0x14>)
   b7f6e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b7f72:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b7f76:	23b4      	movs	r3, #180	; 0xb4
   b7f78:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b7f7a:	2300      	movs	r3, #0
   b7f7c:	60c3      	str	r3, [r0, #12]
}
   b7f7e:	4770      	bx	lr
   b7f80:	0220ffff 	.word	0x0220ffff

000b7f84 <_ZN5ServoC1Ev>:
Servo::Servo()
   b7f84:	b508      	push	{r3, lr}
  this->resetFields();
   b7f86:	f7ff fff1 	bl	b7f6c <_ZN5Servo11resetFieldsEv>
}
   b7f8a:	bd08      	pop	{r3, pc}

000b7f8c <_ZN5Servo6detachEv>:
{
   b7f8c:	b510      	push	{r4, lr}
   b7f8e:	4604      	mov	r4, r0
   b7f90:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b7f94:	1c43      	adds	r3, r0, #1
   b7f96:	d007      	beq.n	b7fa8 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b7f98:	b280      	uxth	r0, r0
   b7f9a:	f7ff fc91 	bl	b78c0 <HAL_Servo_Detach>
  this->resetFields();
   b7f9e:	4620      	mov	r0, r4
   b7fa0:	f7ff ffe4 	bl	b7f6c <_ZN5Servo11resetFieldsEv>
  return true;
   b7fa4:	2001      	movs	r0, #1
}
   b7fa6:	bd10      	pop	{r4, pc}
    return false;
   b7fa8:	2000      	movs	r0, #0
   b7faa:	e7fc      	b.n	b7fa6 <_ZN5Servo6detachEv+0x1a>

000b7fac <_ZN5Servo6attachEtttss>:
{
   b7fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fb0:	460d      	mov	r5, r1
   b7fb2:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b7fb4:	2102      	movs	r1, #2
   b7fb6:	4628      	mov	r0, r5
{
   b7fb8:	4690      	mov	r8, r2
   b7fba:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b7fbc:	f7ff fa26 	bl	b740c <HAL_Validate_Pin_Function>
   b7fc0:	2802      	cmp	r0, #2
   b7fc2:	d003      	beq.n	b7fcc <_ZN5Servo6attachEtttss+0x20>
    return false;
   b7fc4:	2600      	movs	r6, #0
}
   b7fc6:	4630      	mov	r0, r6
   b7fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b7fcc:	4628      	mov	r0, r5
   b7fce:	f003 fbd5 	bl	bb77c <pinAvailable>
   b7fd2:	4606      	mov	r6, r0
   b7fd4:	2800      	cmp	r0, #0
   b7fd6:	d0f5      	beq.n	b7fc4 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b7fd8:	f9b4 3000 	ldrsh.w	r3, [r4]
   b7fdc:	3301      	adds	r3, #1
   b7fde:	d002      	beq.n	b7fe6 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	f7ff ffd3 	bl	b7f8c <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b7fe6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b7fea:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b7fec:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b7ff0:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b7ff2:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b7ff6:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b7ff8:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b7ffa:	4628      	mov	r0, r5
   b7ffc:	f7ff fc58 	bl	b78b0 <HAL_Servo_Attach>
  return true;
   b8000:	e7e1      	b.n	b7fc6 <_ZN5Servo6attachEtttss+0x1a>
	...

000b8004 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8004:	4b05      	ldr	r3, [pc, #20]	; (b801c <_GLOBAL__sub_I_System+0x18>)
   b8006:	2202      	movs	r2, #2
   b8008:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b800a:	4b05      	ldr	r3, [pc, #20]	; (b8020 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b800c:	4a05      	ldr	r2, [pc, #20]	; (b8024 <_GLOBAL__sub_I_System+0x20>)
   b800e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8010:	2000      	movs	r0, #0
   b8012:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8016:	f7ff bcd5 	b.w	b79c4 <set_system_mode>
   b801a:	bf00      	nop
   b801c:	2003e634 	.word	0x2003e634
   b8020:	2003e628 	.word	0x2003e628
   b8024:	ffff0000 	.word	0xffff0000

000b8028 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8028:	b510      	push	{r4, lr}
   b802a:	4604      	mov	r4, r0
{
	free(buffer);
   b802c:	6800      	ldr	r0, [r0, #0]
   b802e:	f7ff fda5 	bl	b7b7c <free>
}
   b8032:	4620      	mov	r0, r4
   b8034:	bd10      	pop	{r4, pc}

000b8036 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8036:	b510      	push	{r4, lr}
   b8038:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b803a:	6800      	ldr	r0, [r0, #0]
   b803c:	b108      	cbz	r0, b8042 <_ZN6String10invalidateEv+0xc>
   b803e:	f7ff fd9d 	bl	b7b7c <free>
	buffer = NULL;
   b8042:	2300      	movs	r3, #0
	capacity = len = 0;
   b8044:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8048:	6023      	str	r3, [r4, #0]
}
   b804a:	bd10      	pop	{r4, pc}

000b804c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b804c:	b538      	push	{r3, r4, r5, lr}
   b804e:	4604      	mov	r4, r0
   b8050:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8052:	6800      	ldr	r0, [r0, #0]
   b8054:	3101      	adds	r1, #1
   b8056:	f7ff fd99 	bl	b7b8c <realloc>
	if (newbuffer) {
   b805a:	b110      	cbz	r0, b8062 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b805c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8060:	2001      	movs	r0, #1
	}
	return 0;
}
   b8062:	bd38      	pop	{r3, r4, r5, pc}

000b8064 <_ZN6String7reserveEj>:
{
   b8064:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8066:	6803      	ldr	r3, [r0, #0]
{
   b8068:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b806a:	b123      	cbz	r3, b8076 <_ZN6String7reserveEj+0x12>
   b806c:	6843      	ldr	r3, [r0, #4]
   b806e:	428b      	cmp	r3, r1
   b8070:	d301      	bcc.n	b8076 <_ZN6String7reserveEj+0x12>
   b8072:	2001      	movs	r0, #1
}
   b8074:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8076:	4620      	mov	r0, r4
   b8078:	f7ff ffe8 	bl	b804c <_ZN6String12changeBufferEj>
   b807c:	2800      	cmp	r0, #0
   b807e:	d0f9      	beq.n	b8074 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8080:	68a3      	ldr	r3, [r4, #8]
   b8082:	2b00      	cmp	r3, #0
   b8084:	d1f5      	bne.n	b8072 <_ZN6String7reserveEj+0xe>
   b8086:	6822      	ldr	r2, [r4, #0]
   b8088:	7013      	strb	r3, [r2, #0]
   b808a:	e7f2      	b.n	b8072 <_ZN6String7reserveEj+0xe>

000b808c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b808c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b808e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8090:	4611      	mov	r1, r2
   b8092:	9201      	str	r2, [sp, #4]
{
   b8094:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8096:	f7ff ffe5 	bl	b8064 <_ZN6String7reserveEj>
   b809a:	9a01      	ldr	r2, [sp, #4]
   b809c:	b928      	cbnz	r0, b80aa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b809e:	4620      	mov	r0, r4
   b80a0:	f7ff ffc9 	bl	b8036 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b80a4:	4620      	mov	r0, r4
   b80a6:	b003      	add	sp, #12
   b80a8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b80aa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b80ac:	4629      	mov	r1, r5
   b80ae:	6820      	ldr	r0, [r4, #0]
   b80b0:	f004 fa6c 	bl	bc58c <memcpy>
	buffer[len] = 0;
   b80b4:	6822      	ldr	r2, [r4, #0]
   b80b6:	68a3      	ldr	r3, [r4, #8]
   b80b8:	2100      	movs	r1, #0
   b80ba:	54d1      	strb	r1, [r2, r3]
	return *this;
   b80bc:	e7f2      	b.n	b80a4 <_ZN6String4copyEPKcj+0x18>

000b80be <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b80be:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b80c0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b80c2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b80c6:	4604      	mov	r4, r0
	len = 0;
   b80c8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b80ca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b80cc:	b141      	cbz	r1, b80e0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b80ce:	4608      	mov	r0, r1
   b80d0:	9101      	str	r1, [sp, #4]
   b80d2:	f004 fb0e 	bl	bc6f2 <strlen>
   b80d6:	9901      	ldr	r1, [sp, #4]
   b80d8:	4602      	mov	r2, r0
   b80da:	4620      	mov	r0, r4
   b80dc:	f7ff ffd6 	bl	b808c <_ZN6String4copyEPKcj>
}
   b80e0:	4620      	mov	r0, r4
   b80e2:	b002      	add	sp, #8
   b80e4:	bd10      	pop	{r4, pc}

000b80e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b80e6:	b538      	push	{r3, r4, r5, lr}
   b80e8:	4605      	mov	r5, r0
	if (buffer) {
   b80ea:	6800      	ldr	r0, [r0, #0]
{
   b80ec:	460c      	mov	r4, r1
	if (buffer) {
   b80ee:	b168      	cbz	r0, b810c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b80f0:	686a      	ldr	r2, [r5, #4]
   b80f2:	688b      	ldr	r3, [r1, #8]
   b80f4:	429a      	cmp	r2, r3
   b80f6:	d307      	bcc.n	b8108 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b80f8:	6809      	ldr	r1, [r1, #0]
   b80fa:	f004 fad5 	bl	bc6a8 <strcpy>
			len = rhs.len;
   b80fe:	68a3      	ldr	r3, [r4, #8]
   b8100:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8102:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8104:	60a3      	str	r3, [r4, #8]
}
   b8106:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8108:	f7ff fd38 	bl	b7b7c <free>
	buffer = rhs.buffer;
   b810c:	6823      	ldr	r3, [r4, #0]
   b810e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8110:	6863      	ldr	r3, [r4, #4]
   b8112:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8114:	68a3      	ldr	r3, [r4, #8]
   b8116:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8118:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b811a:	e9c4 3300 	strd	r3, r3, [r4]
   b811e:	e7f1      	b.n	b8104 <_ZN6String4moveERS_+0x1e>

000b8120 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8120:	b510      	push	{r4, lr}
	buffer = NULL;
   b8122:	2300      	movs	r3, #0
	capacity = 0;
   b8124:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8128:	4604      	mov	r4, r0
	len = 0;
   b812a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b812c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b812e:	f7ff ffda 	bl	b80e6 <_ZN6String4moveERS_>
}
   b8132:	4620      	mov	r0, r4
   b8134:	bd10      	pop	{r4, pc}

000b8136 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8136:	4288      	cmp	r0, r1
{
   b8138:	b510      	push	{r4, lr}
   b813a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b813c:	d005      	beq.n	b814a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b813e:	680b      	ldr	r3, [r1, #0]
   b8140:	b12b      	cbz	r3, b814e <_ZN6StringaSERKS_+0x18>
   b8142:	688a      	ldr	r2, [r1, #8]
   b8144:	4619      	mov	r1, r3
   b8146:	f7ff ffa1 	bl	b808c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b814a:	4620      	mov	r0, r4
   b814c:	bd10      	pop	{r4, pc}
	else invalidate();
   b814e:	f7ff ff72 	bl	b8036 <_ZN6String10invalidateEv>
   b8152:	e7fa      	b.n	b814a <_ZN6StringaSERKS_+0x14>

000b8154 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8154:	b510      	push	{r4, lr}
	buffer = NULL;
   b8156:	2300      	movs	r3, #0
String::String(const String &value)
   b8158:	4604      	mov	r4, r0
	capacity = 0;
   b815a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b815e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8160:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8162:	f7ff ffe8 	bl	b8136 <_ZN6StringaSERKS_>
}
   b8166:	4620      	mov	r0, r4
   b8168:	bd10      	pop	{r4, pc}

000b816a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b816a:	b513      	push	{r0, r1, r4, lr}
   b816c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b816e:	b159      	cbz	r1, b8188 <_ZN6StringaSEPKc+0x1e>
   b8170:	4608      	mov	r0, r1
   b8172:	9101      	str	r1, [sp, #4]
   b8174:	f004 fabd 	bl	bc6f2 <strlen>
   b8178:	9901      	ldr	r1, [sp, #4]
   b817a:	4602      	mov	r2, r0
   b817c:	4620      	mov	r0, r4
   b817e:	f7ff ff85 	bl	b808c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8182:	4620      	mov	r0, r4
   b8184:	b002      	add	sp, #8
   b8186:	bd10      	pop	{r4, pc}
	else invalidate();
   b8188:	f7ff ff55 	bl	b8036 <_ZN6String10invalidateEv>
   b818c:	e7f9      	b.n	b8182 <_ZN6StringaSEPKc+0x18>

000b818e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b818e:	b570      	push	{r4, r5, r6, lr}
   b8190:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8192:	460e      	mov	r6, r1
   b8194:	b909      	cbnz	r1, b819a <_ZN6String6concatEPKcj+0xc>
   b8196:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8198:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b819a:	b16a      	cbz	r2, b81b8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b819c:	6884      	ldr	r4, [r0, #8]
   b819e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81a0:	4621      	mov	r1, r4
   b81a2:	f7ff ff5f 	bl	b8064 <_ZN6String7reserveEj>
   b81a6:	2800      	cmp	r0, #0
   b81a8:	d0f5      	beq.n	b8196 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b81aa:	6828      	ldr	r0, [r5, #0]
   b81ac:	68ab      	ldr	r3, [r5, #8]
   b81ae:	4631      	mov	r1, r6
   b81b0:	4418      	add	r0, r3
   b81b2:	f004 fa79 	bl	bc6a8 <strcpy>
	len = newlen;
   b81b6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b81b8:	2001      	movs	r0, #1
   b81ba:	e7ed      	b.n	b8198 <_ZN6String6concatEPKcj+0xa>

000b81bc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b81bc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b81be:	2300      	movs	r3, #0
	buf[0] = c;
   b81c0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b81c4:	2201      	movs	r2, #1
   b81c6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b81c8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b81cc:	f7ff ffdf 	bl	b818e <_ZN6String6concatEPKcj>
}
   b81d0:	b003      	add	sp, #12
   b81d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b81d6 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b81d6:	6883      	ldr	r3, [r0, #8]
   b81d8:	428b      	cmp	r3, r1
   b81da:	d903      	bls.n	b81e4 <_ZNK6StringixEj+0xe>
   b81dc:	6800      	ldr	r0, [r0, #0]
   b81de:	b110      	cbz	r0, b81e6 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b81e0:	5c40      	ldrb	r0, [r0, r1]
   b81e2:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b81e4:	2000      	movs	r0, #0
}
   b81e6:	4770      	bx	lr

000b81e8 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b81e8:	f7ff bff5 	b.w	b81d6 <_ZNK6StringixEj>

000b81ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b81ec:	4770      	bx	lr

000b81ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b81ee:	4770      	bx	lr

000b81f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b81f0:	4770      	bx	lr

000b81f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b81f2:	4770      	bx	lr

000b81f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b81f4:	4b06      	ldr	r3, [pc, #24]	; (b8210 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b81f6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b81f8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b81fa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b81fe:	d005      	beq.n	b820c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8200:	4608      	mov	r0, r1
   b8202:	f003 fba7 	bl	bb954 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8206:	2800      	cmp	r0, #0
   b8208:	bf08      	it	eq
   b820a:	2400      	moveq	r4, #0
      }
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}
   b8210:	000bef20 	.word	0x000bef20

000b8214 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8214:	4b06      	ldr	r3, [pc, #24]	; (b8230 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8216:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8218:	b510      	push	{r4, lr}
   b821a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b821e:	d005      	beq.n	b822c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8220:	4608      	mov	r0, r1
   b8222:	f003 fb97 	bl	bb954 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8226:	2800      	cmp	r0, #0
   b8228:	bf08      	it	eq
   b822a:	2400      	moveq	r4, #0
      }
   b822c:	4620      	mov	r0, r4
   b822e:	bd10      	pop	{r4, pc}
   b8230:	000bef20 	.word	0x000bef20

000b8234 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8234:	4b06      	ldr	r3, [pc, #24]	; (b8250 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8236:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8238:	b510      	push	{r4, lr}
   b823a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b823e:	d005      	beq.n	b824c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8240:	4608      	mov	r0, r1
   b8242:	f003 fb87 	bl	bb954 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8246:	2800      	cmp	r0, #0
   b8248:	bf08      	it	eq
   b824a:	2400      	moveq	r4, #0
      }
   b824c:	4620      	mov	r0, r4
   b824e:	bd10      	pop	{r4, pc}
   b8250:	000bef20 	.word	0x000bef20

000b8254 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8254:	b510      	push	{r4, lr}
   b8256:	2168      	movs	r1, #104	; 0x68
   b8258:	4604      	mov	r4, r0
   b825a:	f7fb ff20 	bl	b409e <_ZdlPvj>
   b825e:	4620      	mov	r0, r4
   b8260:	bd10      	pop	{r4, pc}

000b8262 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8262:	b510      	push	{r4, lr}
   b8264:	2128      	movs	r1, #40	; 0x28
   b8266:	4604      	mov	r4, r0
   b8268:	f7fb ff19 	bl	b409e <_ZdlPvj>
   b826c:	4620      	mov	r0, r4
   b826e:	bd10      	pop	{r4, pc}

000b8270 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b8270:	b510      	push	{r4, lr}
   b8272:	2130      	movs	r1, #48	; 0x30
   b8274:	4604      	mov	r4, r0
   b8276:	f7fb ff12 	bl	b409e <_ZdlPvj>
   b827a:	4620      	mov	r0, r4
   b827c:	bd10      	pop	{r4, pc}

000b827e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b827e:	2168      	movs	r1, #104	; 0x68
   b8280:	f7fb bf0d 	b.w	b409e <_ZdlPvj>

000b8284 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b8284:	2128      	movs	r1, #40	; 0x28
   b8286:	f7fb bf0a 	b.w	b409e <_ZdlPvj>

000b828a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b828a:	2130      	movs	r1, #48	; 0x30
   b828c:	f7fb bf07 	b.w	b409e <_ZdlPvj>

000b8290 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b8290:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b8292:	2500      	movs	r5, #0
   b8294:	1cec      	adds	r4, r5, #3
   b8296:	428c      	cmp	r4, r1
   b8298:	d80d      	bhi.n	b82b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b829a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b829c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b829e:	5d87      	ldrb	r7, [r0, r6]
   b82a0:	4297      	cmp	r7, r2
   b82a2:	d105      	bne.n	b82b0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b82a4:	4426      	add	r6, r4
   b82a6:	42b1      	cmp	r1, r6
   b82a8:	d305      	bcc.n	b82b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b82aa:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b82ac:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b82ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b82b0:	3401      	adds	r4, #1
   b82b2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82b4:	e7ee      	b.n	b8294 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b82b6:	2000      	movs	r0, #0
   b82b8:	e7f9      	b.n	b82ae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b82bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b82bc:	4a02      	ldr	r2, [pc, #8]	; (b82c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b82be:	4903      	ldr	r1, [pc, #12]	; (b82cc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b82c0:	200a      	movs	r0, #10
   b82c2:	f7ff bb4d 	b.w	b7960 <panic_>
   b82c6:	bf00      	nop
   b82c8:	000b747d 	.word	0x000b747d
   b82cc:	000bed80 	.word	0x000bed80

000b82d0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82d0:	b430      	push	{r4, r5}
   b82d2:	460d      	mov	r5, r1
   b82d4:	4611      	mov	r1, r2
   b82d6:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b82d8:	6803      	ldr	r3, [r0, #0]
   b82da:	6809      	ldr	r1, [r1, #0]
   b82dc:	6828      	ldr	r0, [r5, #0]
   b82de:	e9d3 4300 	ldrd	r4, r3, [r3]
   b82e2:	46a4      	mov	ip, r4
      }
   b82e4:	bc30      	pop	{r4, r5}
   b82e6:	4760      	bx	ip

000b82e8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b82e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b82ea:	b538      	push	{r3, r4, r5, lr}
   b82ec:	4604      	mov	r4, r0
	switch (__op)
   b82ee:	d102      	bne.n	b82f6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b82f0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b82f2:	6023      	str	r3, [r4, #0]
	}
   b82f4:	e003      	b.n	b82fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b82f6:	2a02      	cmp	r2, #2
   b82f8:	d003      	beq.n	b8302 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b82fa:	2a03      	cmp	r2, #3
   b82fc:	d00d      	beq.n	b831a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b82fe:	2000      	movs	r0, #0
   b8300:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b8302:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8304:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8306:	f7fb fec6 	bl	b4096 <_Znwj>
   b830a:	4603      	mov	r3, r0
   b830c:	2800      	cmp	r0, #0
   b830e:	d0f0      	beq.n	b82f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b8310:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8314:	e883 0003 	stmia.w	r3, {r0, r1}
   b8318:	e7eb      	b.n	b82f2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b831a:	6800      	ldr	r0, [r0, #0]
   b831c:	2800      	cmp	r0, #0
   b831e:	d0ee      	beq.n	b82fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b8320:	2108      	movs	r1, #8
   b8322:	f7fb febc 	bl	b409e <_ZdlPvj>
   b8326:	e7ea      	b.n	b82fe <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8328 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8328:	b510      	push	{r4, lr}
   b832a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b832c:	3058      	adds	r0, #88	; 0x58
   b832e:	f7fc f81f 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b8332:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b833a:	f7ff be75 	b.w	b8028 <_ZN6StringD1Ev>

000b833e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b833e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8340:	6843      	ldr	r3, [r0, #4]
   b8342:	3b01      	subs	r3, #1
    {
   b8344:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8346:	6043      	str	r3, [r0, #4]
   b8348:	b963      	cbnz	r3, b8364 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b834a:	6803      	ldr	r3, [r0, #0]
   b834c:	689b      	ldr	r3, [r3, #8]
   b834e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8350:	68a3      	ldr	r3, [r4, #8]
   b8352:	3b01      	subs	r3, #1
   b8354:	60a3      	str	r3, [r4, #8]
   b8356:	b92b      	cbnz	r3, b8364 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8358:	6823      	ldr	r3, [r4, #0]
   b835a:	4620      	mov	r0, r4
   b835c:	68db      	ldr	r3, [r3, #12]
    }
   b835e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8362:	4718      	bx	r3
    }
   b8364:	bd10      	pop	{r4, pc}

000b8366 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8366:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b836a:	b2da      	uxtb	r2, r3
   b836c:	2a09      	cmp	r2, #9
   b836e:	d801      	bhi.n	b8374 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b8370:	4618      	mov	r0, r3
   b8372:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b8374:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8378:	2b05      	cmp	r3, #5
   b837a:	d801      	bhi.n	b8380 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b837c:	3857      	subs	r0, #87	; 0x57
   b837e:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b8380:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8384:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b8386:	bf94      	ite	ls
   b8388:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b838a:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b838e:	4770      	bx	lr

000b8390 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b8390:	b510      	push	{r4, lr}
            locked_(false) {
   b8392:	2300      	movs	r3, #0
   b8394:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b8396:	4b04      	ldr	r3, [pc, #16]	; (b83a8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b8398:	4604      	mov	r4, r0
   b839a:	6818      	ldr	r0, [r3, #0]
   b839c:	f7ff f958 	bl	b7650 <os_mutex_recursive_lock>
        locked_ = true;
   b83a0:	2301      	movs	r3, #1
   b83a2:	7023      	strb	r3, [r4, #0]
    }
   b83a4:	4620      	mov	r0, r4
   b83a6:	bd10      	pop	{r4, pc}
   b83a8:	2003e640 	.word	0x2003e640

000b83ac <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b83ac:	b510      	push	{r4, lr}
        if (locked_) {
   b83ae:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b83b0:	4604      	mov	r4, r0
        if (locked_) {
   b83b2:	b11b      	cbz	r3, b83bc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b83b4:	4b02      	ldr	r3, [pc, #8]	; (b83c0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b83b6:	6818      	ldr	r0, [r3, #0]
   b83b8:	f7ff f952 	bl	b7660 <os_mutex_recursive_unlock>
    }
   b83bc:	4620      	mov	r0, r4
   b83be:	bd10      	pop	{r4, pc}
   b83c0:	2003e640 	.word	0x2003e640

000b83c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b83c4:	b082      	sub	sp, #8
   b83c6:	4603      	mov	r3, r0
    address_ = addr;
   b83c8:	6808      	ldr	r0, [r1, #0]
   b83ca:	6849      	ldr	r1, [r1, #4]
   b83cc:	466a      	mov	r2, sp
   b83ce:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b83d0:	466a      	mov	r2, sp
   b83d2:	ca03      	ldmia	r2!, {r0, r1}
   b83d4:	6018      	str	r0, [r3, #0]
}
   b83d6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b83d8:	6059      	str	r1, [r3, #4]
}
   b83da:	b002      	add	sp, #8
   b83dc:	4770      	bx	lr

000b83de <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b83de:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b83e0:	7982      	ldrb	r2, [r0, #6]
   b83e2:	798b      	ldrb	r3, [r1, #6]
   b83e4:	429a      	cmp	r2, r3
   b83e6:	d106      	bne.n	b83f6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b83e8:	2206      	movs	r2, #6
   b83ea:	f004 f8bf 	bl	bc56c <memcmp>
   b83ee:	fab0 f080 	clz	r0, r0
   b83f2:	0940      	lsrs	r0, r0, #5
}
   b83f4:	bd08      	pop	{r3, pc}
    return false;
   b83f6:	2000      	movs	r0, #0
   b83f8:	e7fc      	b.n	b83f4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b83fa <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b83fa:	f04f 33ff 	mov.w	r3, #4294967295
   b83fe:	6003      	str	r3, [r0, #0]
   b8400:	8083      	strh	r3, [r0, #4]
}
   b8402:	2000      	movs	r0, #0
   b8404:	4770      	bx	lr

000b8406 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8406:	b508      	push	{r3, lr}
   b8408:	4602      	mov	r2, r0
        : address_{} {
   b840a:	2100      	movs	r1, #0
   b840c:	6001      	str	r1, [r0, #0]
   b840e:	6041      	str	r1, [r0, #4]
    clear();
   b8410:	f7ff fff3 	bl	b83fa <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8414:	7191      	strb	r1, [r2, #6]
}
   b8416:	4610      	mov	r0, r2
   b8418:	bd08      	pop	{r3, pc}
	...

000b841c <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b841c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b841e:	2301      	movs	r3, #1
   b8420:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8422:	4b05      	ldr	r3, [pc, #20]	; (b8438 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8424:	4602      	mov	r2, r0
   b8426:	f103 0110 	add.w	r1, r3, #16
   b842a:	f853 4b04 	ldr.w	r4, [r3], #4
   b842e:	f842 4b04 	str.w	r4, [r2], #4
   b8432:	428b      	cmp	r3, r1
   b8434:	d1f9      	bne.n	b842a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8436:	bd10      	pop	{r4, pc}
   b8438:	000bef2e 	.word	0x000bef2e

000b843c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b843c:	b510      	push	{r4, lr}
    if (uuid128) {
   b843e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8440:	4604      	mov	r4, r0
    if (uuid128) {
   b8442:	b1b1      	cbz	r1, b8472 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8444:	2a01      	cmp	r2, #1
   b8446:	f101 0210 	add.w	r2, r1, #16
   b844a:	d10a      	bne.n	b8462 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b844c:	4601      	mov	r1, r0
   b844e:	f853 0b04 	ldr.w	r0, [r3], #4
   b8452:	f841 0b04 	str.w	r0, [r1], #4
   b8456:	4293      	cmp	r3, r2
   b8458:	d1f9      	bne.n	b844e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b845a:	2301      	movs	r3, #1
   b845c:	6123      	str	r3, [r4, #16]
}
   b845e:	4620      	mov	r0, r4
   b8460:	bd10      	pop	{r4, pc}
   b8462:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8464:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8468:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b846c:	429a      	cmp	r2, r3
   b846e:	d1f9      	bne.n	b8464 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b8470:	e7f3      	b.n	b845a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b8472:	2210      	movs	r2, #16
   b8474:	f004 f8b2 	bl	bc5dc <memset>
   b8478:	e7f1      	b.n	b845e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b847a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b847a:	b538      	push	{r3, r4, r5, lr}
   b847c:	4604      	mov	r4, r0
   b847e:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b8480:	461a      	mov	r2, r3
   b8482:	f7ff ffdb 	bl	b843c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b8486:	81a5      	strh	r5, [r4, #12]
}
   b8488:	4620      	mov	r0, r4
   b848a:	bd38      	pop	{r3, r4, r5, pc}

000b848c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b848c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b848e:	6902      	ldr	r2, [r0, #16]
   b8490:	b922      	cbnz	r2, b849c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b8492:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8494:	3800      	subs	r0, #0
   b8496:	bf18      	it	ne
   b8498:	2001      	movne	r0, #1
}
   b849a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b849c:	4902      	ldr	r1, [pc, #8]	; (b84a8 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b849e:	2210      	movs	r2, #16
   b84a0:	f004 f864 	bl	bc56c <memcmp>
   b84a4:	e7f6      	b.n	b8494 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b84a6:	bf00      	nop
   b84a8:	000bef4e 	.word	0x000bef4e

000b84ac <_ZNK8particle7BleUuid4typeEv>:
}
   b84ac:	6900      	ldr	r0, [r0, #16]
   b84ae:	4770      	bx	lr

000b84b0 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b84b0:	b538      	push	{r3, r4, r5, lr}
   b84b2:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b84b4:	2214      	movs	r2, #20
   b84b6:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b84b8:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b84ba:	f004 f88f 	bl	bc5dc <memset>
    if (type_ == BleUuidType::SHORT) {
   b84be:	6923      	ldr	r3, [r4, #16]
   b84c0:	b91b      	cbnz	r3, b84ca <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b84c2:	89a3      	ldrh	r3, [r4, #12]
   b84c4:	802b      	strh	r3, [r5, #0]
}
   b84c6:	4628      	mov	r0, r5
   b84c8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b84ca:	2301      	movs	r3, #1
   b84cc:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b84ce:	4621      	mov	r1, r4
   b84d0:	462b      	mov	r3, r5
   b84d2:	f104 0210 	add.w	r2, r4, #16
   b84d6:	f851 0b04 	ldr.w	r0, [r1], #4
   b84da:	f843 0b04 	str.w	r0, [r3], #4
   b84de:	4291      	cmp	r1, r2
   b84e0:	d1f9      	bne.n	b84d6 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b84e2:	e7f0      	b.n	b84c6 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b84e4 <_ZNK8particle7BleUuid7shortedEv>:
}
   b84e4:	8980      	ldrh	r0, [r0, #12]
   b84e6:	4770      	bx	lr

000b84e8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b84e8:	4770      	bx	lr

000b84ea <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b84ea:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b84ec:	6902      	ldr	r2, [r0, #16]
   b84ee:	690b      	ldr	r3, [r1, #16]
   b84f0:	429a      	cmp	r2, r3
   b84f2:	d106      	bne.n	b8502 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b84f4:	2210      	movs	r2, #16
   b84f6:	f004 f839 	bl	bc56c <memcmp>
   b84fa:	fab0 f080 	clz	r0, r0
   b84fe:	0940      	lsrs	r0, r0, #5
}
   b8500:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8502:	2000      	movs	r0, #0
   b8504:	e7fc      	b.n	b8500 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8508 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8508:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b850a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b850e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8510:	4b34      	ldr	r3, [pc, #208]	; (b85e4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b8512:	460c      	mov	r4, r1
   b8514:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8516:	4602      	mov	r2, r0
   b8518:	f103 0110 	add.w	r1, r3, #16
   b851c:	f853 0b04 	ldr.w	r0, [r3], #4
   b8520:	f842 0b04 	str.w	r0, [r2], #4
   b8524:	428b      	cmp	r3, r1
   b8526:	d1f9      	bne.n	b851c <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8528:	b344      	cbz	r4, b857c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b852a:	2124      	movs	r1, #36	; 0x24
   b852c:	4620      	mov	r0, r4
   b852e:	f004 f90f 	bl	bc750 <strnlen>
   b8532:	2804      	cmp	r0, #4
   b8534:	f04f 0500 	mov.w	r5, #0
   b8538:	d123      	bne.n	b8582 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b853a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b853e:	af01      	add	r7, sp, #4
   b8540:	1ca5      	adds	r5, r4, #2
   b8542:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8544:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8548:	f7ff ff0d 	bl	b8366 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b854c:	f1b0 0800 	subs.w	r8, r0, #0
   b8550:	db12      	blt.n	b8578 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b8552:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8556:	f7ff ff06 	bl	b8366 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b855a:	2800      	cmp	r0, #0
   b855c:	db0c      	blt.n	b8578 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b855e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8560:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8564:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8566:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b856a:	d1eb      	bne.n	b8544 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b856c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b8570:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b8572:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8576:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b8578:	2300      	movs	r3, #0
   b857a:	6133      	str	r3, [r6, #16]
}
   b857c:	b002      	add	sp, #8
   b857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b8582:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b8586:	2124      	movs	r1, #36	; 0x24
   b8588:	4620      	mov	r0, r4
   b858a:	f004 f8e1 	bl	bc750 <strnlen>
   b858e:	42a8      	cmp	r0, r5
   b8590:	d807      	bhi.n	b85a2 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b8592:	4642      	mov	r2, r8
   b8594:	2100      	movs	r1, #0
   b8596:	4630      	mov	r0, r6
}
   b8598:	b002      	add	sp, #8
   b859a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b859e:	f004 b81d 	b.w	bc5dc <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b85a2:	f1b8 0f00 	cmp.w	r8, #0
   b85a6:	d0e9      	beq.n	b857c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b85a8:	5d60      	ldrb	r0, [r4, r5]
   b85aa:	f7ff fedc 	bl	b8366 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b85ae:	0603      	lsls	r3, r0, #24
   b85b0:	d415      	bmi.n	b85de <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b85b2:	0100      	lsls	r0, r0, #4
   b85b4:	f108 38ff 	add.w	r8, r8, #4294967295
   b85b8:	b2c7      	uxtb	r7, r0
   b85ba:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b85be:	2124      	movs	r1, #36	; 0x24
   b85c0:	4620      	mov	r0, r4
   b85c2:	f004 f8c5 	bl	bc750 <strnlen>
   b85c6:	3501      	adds	r5, #1
   b85c8:	42a8      	cmp	r0, r5
   b85ca:	d908      	bls.n	b85de <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b85cc:	5d60      	ldrb	r0, [r4, r5]
   b85ce:	f7ff feca 	bl	b8366 <_ZN8particle11hexToNibbleEc>
   b85d2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b85d4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b85d6:	bfa4      	itt	ge
   b85d8:	4338      	orrge	r0, r7
   b85da:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b85de:	3501      	adds	r5, #1
   b85e0:	e7d1      	b.n	b8586 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b85e2:	bf00      	nop
   b85e4:	000bef2e 	.word	0x000bef2e

000b85e8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b85e8:	b513      	push	{r0, r1, r4, lr}
   b85ea:	4604      	mov	r4, r0
   b85ec:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b85ee:	f7ff ff15 	bl	b841c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b85f2:	4620      	mov	r0, r4
   b85f4:	9901      	ldr	r1, [sp, #4]
   b85f6:	f7ff ff87 	bl	b8508 <_ZN8particle7BleUuid9constructEPKc>
}
   b85fa:	4620      	mov	r0, r4
   b85fc:	b002      	add	sp, #8
   b85fe:	bd10      	pop	{r4, pc}

000b8600 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b8600:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b8602:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8606:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8608:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b860a:	8043      	strh	r3, [r0, #2]
   b860c:	220e      	movs	r2, #14
   b860e:	4629      	mov	r1, r5
   b8610:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b8612:	7105      	strb	r5, [r0, #4]
   b8614:	3006      	adds	r0, #6
   b8616:	f003 ffe1 	bl	bc5dc <memset>
   b861a:	f104 0014 	add.w	r0, r4, #20
   b861e:	f7ff fefd 	bl	b841c <_ZN8particle7BleUuidC1Ev>
   b8622:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8626:	f7ff fef9 	bl	b841c <_ZN8particle7BleUuidC1Ev>
   b862a:	4904      	ldr	r1, [pc, #16]	; (b863c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b862c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b8630:	f7ff fd45 	bl	b80be <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8634:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8636:	4620      	mov	r0, r4
   b8638:	bd38      	pop	{r3, r4, r5, pc}
   b863a:	bf00      	nop
   b863c:	000befb8 	.word	0x000befb8

000b8640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b8640:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b8642:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8646:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b864a:	4293      	cmp	r3, r2
   b864c:	4618      	mov	r0, r3
   b864e:	d006      	beq.n	b865e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b8650:	6804      	ldr	r4, [r0, #0]
   b8652:	8824      	ldrh	r4, [r4, #0]
   b8654:	428c      	cmp	r4, r1
   b8656:	f103 0308 	add.w	r3, r3, #8
   b865a:	d1f6      	bne.n	b864a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b865c:	bd10      	pop	{r4, pc}
        return nullptr;
   b865e:	2000      	movs	r0, #0
   b8660:	e7fc      	b.n	b865c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8664 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8664:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8666:	4606      	mov	r6, r0
   b8668:	b085      	sub	sp, #20
   b866a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b866c:	460d      	mov	r5, r1
   b866e:	2900      	cmp	r1, #0
   b8670:	d050      	beq.n	b8714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b8672:	2a00      	cmp	r2, #0
   b8674:	d04e      	beq.n	b8714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8676:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b8678:	7823      	ldrb	r3, [r4, #0]
   b867a:	2af4      	cmp	r2, #244	; 0xf4
   b867c:	bf28      	it	cs
   b867e:	22f4      	movcs	r2, #244	; 0xf4
   b8680:	b343      	cbz	r3, b86d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b8682:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b8684:	0798      	lsls	r0, r3, #30
   b8686:	d509      	bpl.n	b869c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b8688:	89a0      	ldrh	r0, [r4, #12]
   b868a:	9203      	str	r2, [sp, #12]
   b868c:	2300      	movs	r3, #0
   b868e:	f7fe ff59 	bl	b7544 <hal_ble_gatt_server_set_characteristic_value>
   b8692:	2800      	cmp	r0, #0
   b8694:	9a03      	ldr	r2, [sp, #12]
   b8696:	da03      	bge.n	b86a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b8698:	b005      	add	sp, #20
   b869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b869c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b86a0:	6834      	ldr	r4, [r6, #0]
   b86a2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b86a4:	06d9      	lsls	r1, r3, #27
   b86a6:	d509      	bpl.n	b86bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b86a8:	2f01      	cmp	r7, #1
   b86aa:	d007      	beq.n	b86bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86ac:	89a0      	ldrh	r0, [r4, #12]
   b86ae:	2300      	movs	r3, #0
   b86b0:	4629      	mov	r1, r5
}
   b86b2:	b005      	add	sp, #20
   b86b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86b8:	f7fe bf76 	b.w	b75a8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b86bc:	069b      	lsls	r3, r3, #26
   b86be:	d5eb      	bpl.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b86c0:	2f02      	cmp	r7, #2
   b86c2:	d0e9      	beq.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86c4:	89a0      	ldrh	r0, [r4, #12]
   b86c6:	2300      	movs	r3, #0
   b86c8:	4629      	mov	r1, r5
}
   b86ca:	b005      	add	sp, #20
   b86cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86d0:	f7fe bf74 	b.w	b75bc <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b86d4:	8860      	ldrh	r0, [r4, #2]
   b86d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b86da:	4288      	cmp	r0, r1
   b86dc:	d01c      	beq.n	b8718 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b86de:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b86e0:	074e      	lsls	r6, r1, #29
   b86e2:	d501      	bpl.n	b86e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b86e4:	2f01      	cmp	r7, #1
   b86e6:	d104      	bne.n	b86f2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b86e8:	070b      	lsls	r3, r1, #28
   b86ea:	d409      	bmi.n	b8700 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b86ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b86f0:	e7d2      	b.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b86f2:	89a1      	ldrh	r1, [r4, #12]
   b86f4:	9300      	str	r3, [sp, #0]
   b86f6:	4613      	mov	r3, r2
   b86f8:	462a      	mov	r2, r5
   b86fa:	f7fe ff37 	bl	b756c <hal_ble_gatt_client_write_without_response>
   b86fe:	e7cb      	b.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8700:	2f02      	cmp	r7, #2
   b8702:	d0f3      	beq.n	b86ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8704:	2300      	movs	r3, #0
   b8706:	89a1      	ldrh	r1, [r4, #12]
   b8708:	9300      	str	r3, [sp, #0]
   b870a:	4613      	mov	r3, r2
   b870c:	462a      	mov	r2, r5
   b870e:	f7fe ff23 	bl	b7558 <hal_ble_gatt_client_write_with_response>
   b8712:	e7c1      	b.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8714:	4802      	ldr	r0, [pc, #8]	; (b8720 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8716:	e7bf      	b.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8718:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b871c:	e7bc      	b.n	b8698 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b871e:	bf00      	nop
   b8720:	fffffef2 	.word	0xfffffef2

000b8724 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8728:	2600      	movs	r6, #0
   b872a:	6006      	str	r6, [r0, #0]
   b872c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b872e:	2028      	movs	r0, #40	; 0x28
   b8730:	460c      	mov	r4, r1
   b8732:	f7fb fcb0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8736:	1e05      	subs	r5, r0, #0
   b8738:	f105 080c 	add.w	r8, r5, #12
   b873c:	d00f      	beq.n	b875e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b873e:	2301      	movs	r3, #1
   b8740:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8744:	4b08      	ldr	r3, [pc, #32]	; (b8768 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8746:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8748:	4640      	mov	r0, r8
   b874a:	f7ff fe67 	bl	b841c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b874e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b8750:	622e      	str	r6, [r5, #32]
   b8752:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8756:	4646      	mov	r6, r8
   b8758:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b875a:	6823      	ldr	r3, [r4, #0]
   b875c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b875e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b8762:	4638      	mov	r0, r7
   b8764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8768:	000beef0 	.word	0x000beef0

000b876c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b876c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b876e:	2500      	movs	r5, #0
   b8770:	6005      	str	r5, [r0, #0]
   b8772:	4606      	mov	r6, r0
   b8774:	2030      	movs	r0, #48	; 0x30
   b8776:	f7fb fc8e 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b877a:	4604      	mov	r4, r0
   b877c:	b188      	cbz	r0, b87a2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b877e:	2301      	movs	r3, #1
   b8780:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b8784:	4b09      	ldr	r3, [pc, #36]	; (b87ac <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b8786:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b8788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b878c:	8183      	strh	r3, [r0, #12]
   b878e:	300e      	adds	r0, #14
   b8790:	f7ff fe39 	bl	b8406 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b8794:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b8798:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b879c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b87a0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b87a2:	6074      	str	r4, [r6, #4]
   b87a4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b87a6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b87a8:	4630      	mov	r0, r6
   b87aa:	bd70      	pop	{r4, r5, r6, pc}
   b87ac:	000bef0c 	.word	0x000bef0c

000b87b0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b87b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b87b2:	460d      	mov	r5, r1
   b87b4:	4604      	mov	r4, r0
    WiringBleLock lk;
   b87b6:	a801      	add	r0, sp, #4
   b87b8:	f7ff fdea 	bl	b8390 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b87bc:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b87be:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b87c2:	6023      	str	r3, [r4, #0]
   b87c4:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b87c8:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b87ca:	a801      	add	r0, sp, #4
   b87cc:	f7ff fdee 	bl	b83ac <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b87d0:	4620      	mov	r0, r4
   b87d2:	b003      	add	sp, #12
   b87d4:	bd30      	pop	{r4, r5, pc}

000b87d6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b87d6:	b530      	push	{r4, r5, lr}
   b87d8:	4605      	mov	r5, r0
   b87da:	b087      	sub	sp, #28
   b87dc:	460c      	mov	r4, r1
    WiringBleLock lk;
   b87de:	a801      	add	r0, sp, #4
   b87e0:	f7ff fdd6 	bl	b8390 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b87e4:	682a      	ldr	r2, [r5, #0]
   b87e6:	6823      	ldr	r3, [r4, #0]
   b87e8:	8812      	ldrh	r2, [r2, #0]
   b87ea:	881b      	ldrh	r3, [r3, #0]
   b87ec:	429a      	cmp	r2, r3
   b87ee:	d10d      	bne.n	b880c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b87f0:	4629      	mov	r1, r5
   b87f2:	a802      	add	r0, sp, #8
   b87f4:	f7ff ffdc 	bl	b87b0 <_ZNK8particle13BlePeerDevice7addressEv>
   b87f8:	4621      	mov	r1, r4
   b87fa:	a804      	add	r0, sp, #16
   b87fc:	f7ff ffd8 	bl	b87b0 <_ZNK8particle13BlePeerDevice7addressEv>
   b8800:	a904      	add	r1, sp, #16
   b8802:	a802      	add	r0, sp, #8
   b8804:	f7ff fdeb 	bl	b83de <_ZNK8particle10BleAddresseqERKS0_>
   b8808:	4604      	mov	r4, r0
   b880a:	b900      	cbnz	r0, b880e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b880c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b880e:	a801      	add	r0, sp, #4
   b8810:	f7ff fdcc 	bl	b83ac <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8814:	4620      	mov	r0, r4
   b8816:	b007      	add	sp, #28
   b8818:	bd30      	pop	{r4, r5, pc}
	...

000b881c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b881c:	b510      	push	{r4, lr}
   b881e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b8820:	2064      	movs	r0, #100	; 0x64
   b8822:	f7fb fc38 	bl	b4096 <_Znwj>
   b8826:	b168      	cbz	r0, b8844 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8828:	2300      	movs	r3, #0
   b882a:	e9c0 3300 	strd	r3, r3, [r0]
   b882e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8832:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8836:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b883a:	6203      	str	r3, [r0, #32]
   b883c:	62c3      	str	r3, [r0, #44]	; 0x2c
   b883e:	63c3      	str	r3, [r0, #60]	; 0x3c
   b8840:	64c3      	str	r3, [r0, #76]	; 0x4c
   b8842:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8844:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8846:	b920      	cbnz	r0, b8852 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8848:	4a0a      	ldr	r2, [pc, #40]	; (b8874 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b884a:	490b      	ldr	r1, [pc, #44]	; (b8878 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b884c:	200a      	movs	r0, #10
   b884e:	f7ff f887 	bl	b7960 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b8852:	2000      	movs	r0, #0
   b8854:	f7fe fe3a 	bl	b74cc <hal_ble_stack_init>
   b8858:	b120      	cbz	r0, b8864 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b885a:	4a06      	ldr	r2, [pc, #24]	; (b8874 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b885c:	4907      	ldr	r1, [pc, #28]	; (b887c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b885e:	200a      	movs	r0, #10
   b8860:	f7ff f87e 	bl	b7960 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8864:	6821      	ldr	r1, [r4, #0]
   b8866:	4806      	ldr	r0, [pc, #24]	; (b8880 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8868:	2200      	movs	r2, #0
   b886a:	f7fe fe93 	bl	b7594 <hal_ble_set_callback_on_periph_link_events>
}
   b886e:	4620      	mov	r0, r4
   b8870:	bd10      	pop	{r4, pc}
   b8872:	bf00      	nop
   b8874:	000b747d 	.word	0x000b747d
   b8878:	000bed80 	.word	0x000bed80
   b887c:	000bedbe 	.word	0x000bedbe
   b8880:	000b8e41 	.word	0x000b8e41

000b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b8884:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b8886:	4c0a      	ldr	r4, [pc, #40]	; (b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b8888:	7823      	ldrb	r3, [r4, #0]
   b888a:	f3bf 8f5b 	dmb	ish
   b888e:	07db      	lsls	r3, r3, #31
   b8890:	d40c      	bmi.n	b88ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b8892:	4620      	mov	r0, r4
   b8894:	f7fb fc12 	bl	b40bc <__cxa_guard_acquire>
   b8898:	b140      	cbz	r0, b88ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b889a:	4806      	ldr	r0, [pc, #24]	; (b88b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b889c:	f7ff ffbe 	bl	b881c <_ZN8particle14BleLocalDeviceC1Ev>
   b88a0:	4620      	mov	r0, r4
   b88a2:	f7fb fc10 	bl	b40c6 <__cxa_guard_release>
   b88a6:	4804      	ldr	r0, [pc, #16]	; (b88b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b88a8:	f003 fe4a 	bl	bc540 <atexit>
    return instance;
}
   b88ac:	4801      	ldr	r0, [pc, #4]	; (b88b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b88ae:	bd10      	pop	{r4, pc}
   b88b0:	2003e638 	.word	0x2003e638
   b88b4:	2003e644 	.word	0x2003e644
   b88b8:	000b8af9 	.word	0x000b8af9

000b88bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b88bc:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b88be:	6803      	ldr	r3, [r0, #0]
   b88c0:	3b09      	subs	r3, #9
   b88c2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b88c4:	b08d      	sub	sp, #52	; 0x34
   b88c6:	4604      	mov	r4, r0
   b88c8:	460d      	mov	r5, r1
    switch (event->type) {
   b88ca:	d811      	bhi.n	b88f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b88cc:	f7ff ffda 	bl	b8884 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b88d0:	88a1      	ldrh	r1, [r4, #4]
   b88d2:	6800      	ldr	r0, [r0, #0]
   b88d4:	f7ff feb4 	bl	b8640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b88d8:	4603      	mov	r3, r0
   b88da:	b958      	cbnz	r0, b88f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b88dc:	2220      	movs	r2, #32
   b88de:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b88e2:	4a0b      	ldr	r2, [pc, #44]	; (b8910 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b88e4:	9200      	str	r2, [sp, #0]
   b88e6:	490b      	ldr	r1, [pc, #44]	; (b8914 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b88e8:	aa04      	add	r2, sp, #16
   b88ea:	2032      	movs	r0, #50	; 0x32
   b88ec:	f7ff f840 	bl	b7970 <log_message>
}
   b88f0:	b00d      	add	sp, #52	; 0x34
   b88f2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b88f4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b88f6:	2a00      	cmp	r2, #0
   b88f8:	d0fa      	beq.n	b88f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b88fa:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b88fe:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b8902:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8906:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8908:	aa04      	add	r2, sp, #16
   b890a:	a903      	add	r1, sp, #12
   b890c:	47a0      	blx	r4
}
   b890e:	e7ef      	b.n	b88f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b8910:	000bee00 	.word	0x000bee00
   b8914:	000bed97 	.word	0x000bed97

000b8918 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8918:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b891a:	2000      	movs	r0, #0
   b891c:	f7fe fdd6 	bl	b74cc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b8920:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8924:	bd08      	pop	{r3, pc}

000b8926 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   b8926:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   b8928:	2100      	movs	r1, #0
   b892a:	f7fe bdd7 	b.w	b74dc <hal_ble_gap_set_tx_power>

000b892e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b892e:	b919      	cbnz	r1, b8938 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b8930:	460a      	mov	r2, r1
   b8932:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8934:	f7fe bdda 	b.w	b74ec <hal_ble_gap_set_advertising_data>
   b8938:	e9d1 0100 	ldrd	r0, r1, [r1]
   b893c:	2200      	movs	r2, #0
   b893e:	e7f9      	b.n	b8934 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b8940 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b8940:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b8942:	69d8      	ldr	r0, [r3, #28]
}
   b8944:	2800      	cmp	r0, #0
   b8946:	bfd4      	ite	le
   b8948:	2000      	movle	r0, #0
   b894a:	2001      	movgt	r0, #1
   b894c:	4770      	bx	lr

000b894e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b894e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8950:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8954:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8956:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b895a:	42ae      	cmp	r6, r5
   b895c:	d004      	beq.n	b8968 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b895e:	4628      	mov	r0, r5
   b8960:	f7ff fb62 	bl	b8028 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8964:	3510      	adds	r5, #16
   b8966:	e7f8      	b.n	b895a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8968:	6820      	ldr	r0, [r4, #0]
   b896a:	f7ff f907 	bl	b7b7c <free>
}
   b896e:	4620      	mov	r0, r4
   b8970:	bd70      	pop	{r4, r5, r6, pc}

000b8972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8972:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8974:	1e14      	subs	r4, r2, #0
   b8976:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8978:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b897a:	db02      	blt.n	b8982 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b897c:	1862      	adds	r2, r4, r1
   b897e:	429a      	cmp	r2, r3
   b8980:	dd00      	ble.n	b8984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8982:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8984:	682a      	ldr	r2, [r5, #0]
   b8986:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8988:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b898a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b898c:	1a52      	subs	r2, r2, r1
   b898e:	f003 fe0b 	bl	bc5a8 <memmove>
    size_ -= n;
   b8992:	686a      	ldr	r2, [r5, #4]
   b8994:	1b12      	subs	r2, r2, r4
   b8996:	606a      	str	r2, [r5, #4]
}
   b8998:	bd38      	pop	{r3, r4, r5, pc}

000b899a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b899a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b899c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b899e:	4604      	mov	r4, r0
   b89a0:	460d      	mov	r5, r1
   b89a2:	ab01      	add	r3, sp, #4
   b89a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b89a8:	f7ff fc72 	bl	b8290 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b89ac:	4602      	mov	r2, r0
   b89ae:	b138      	cbz	r0, b89c0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b89b0:	9901      	ldr	r1, [sp, #4]
   b89b2:	4620      	mov	r0, r4
   b89b4:	f7ff ffdd 	bl	b8972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b89b8:	4629      	mov	r1, r5
   b89ba:	4620      	mov	r0, r4
   b89bc:	f7ff ffed 	bl	b899a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b89c0:	b003      	add	sp, #12
   b89c2:	bd30      	pop	{r4, r5, pc}

000b89c4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b89c4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b89c6:	460c      	mov	r4, r1
   b89c8:	b929      	cbnz	r1, b89d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b89ca:	460a      	mov	r2, r1
   b89cc:	4608      	mov	r0, r1
}
   b89ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b89d2:	f7fe bd93 	b.w	b74fc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b89d6:	2101      	movs	r1, #1
   b89d8:	4620      	mov	r0, r4
   b89da:	f7ff ffde 	bl	b899a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b89de:	e9d4 0100 	ldrd	r0, r1, [r4]
   b89e2:	2200      	movs	r2, #0
   b89e4:	e7f3      	b.n	b89ce <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b89e6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b89e6:	b538      	push	{r3, r4, r5, lr}
   b89e8:	4604      	mov	r4, r0
   b89ea:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b89ec:	f7ff ff9f 	bl	b892e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b89f0:	2800      	cmp	r0, #0
   b89f2:	db0a      	blt.n	b8a0a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b89f4:	4629      	mov	r1, r5
   b89f6:	4620      	mov	r0, r4
   b89f8:	f7ff ffe4 	bl	b89c4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b89fc:	2800      	cmp	r0, #0
   b89fe:	db04      	blt.n	b8a0a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b8a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8a04:	2000      	movs	r0, #0
   b8a06:	f7fe bd81 	b.w	b750c <hal_ble_gap_start_advertising>
}
   b8a0a:	bd38      	pop	{r3, r4, r5, pc}

000b8a0c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8a0c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8a0e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8a10:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8a12:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a14:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8a16:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a18:	f7fb fb3d 	bl	b4096 <_Znwj>
   b8a1c:	b118      	cbz	r0, b8a26 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8a1e:	682b      	ldr	r3, [r5, #0]
   b8a20:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8a22:	686b      	ldr	r3, [r5, #4]
   b8a24:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8a26:	4b03      	ldr	r3, [pc, #12]	; (b8a34 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8a28:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8a2a:	4b03      	ldr	r3, [pc, #12]	; (b8a38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a2c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8a2e:	60a3      	str	r3, [r4, #8]
      }
   b8a30:	4620      	mov	r0, r4
   b8a32:	bd38      	pop	{r3, r4, r5, pc}
   b8a34:	000b82d1 	.word	0x000b82d1
   b8a38:	000b82e9 	.word	0x000b82e9

000b8a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8a3c:	680b      	ldr	r3, [r1, #0]
   b8a3e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8a40:	b113      	cbz	r3, b8a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8a42:	685a      	ldr	r2, [r3, #4]
   b8a44:	3201      	adds	r2, #1
   b8a46:	605a      	str	r2, [r3, #4]
      }
   b8a48:	4770      	bx	lr

000b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8a4a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8a4c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8a50:	4604      	mov	r4, r0
   b8a52:	f840 3b04 	str.w	r3, [r0], #4
   b8a56:	f7ff fff1 	bl	b8a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8a5a:	6823      	ldr	r3, [r4, #0]
   b8a5c:	b90b      	cbnz	r3, b8a62 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8a5e:	f7ff fc2d 	bl	b82bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8a62:	4620      	mov	r0, r4
   b8a64:	bd10      	pop	{r4, pc}

000b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8a66:	b510      	push	{r4, lr}
   b8a68:	f851 3b04 	ldr.w	r3, [r1], #4
   b8a6c:	4604      	mov	r4, r0
   b8a6e:	f840 3b04 	str.w	r3, [r0], #4
   b8a72:	f7ff ffe3 	bl	b8a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8a76:	4620      	mov	r0, r4
   b8a78:	bd10      	pop	{r4, pc}

000b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8a7a:	b510      	push	{r4, lr}
   b8a7c:	f851 3b04 	ldr.w	r3, [r1], #4
   b8a80:	4604      	mov	r4, r0
   b8a82:	f840 3b04 	str.w	r3, [r0], #4
   b8a86:	f7ff ffd9 	bl	b8a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8a8a:	4620      	mov	r0, r4
   b8a8c:	bd10      	pop	{r4, pc}

000b8a8e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8a8e:	b510      	push	{r4, lr}
   b8a90:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8a92:	3004      	adds	r0, #4
   b8a94:	f7fc fb2a 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8a98:	4620      	mov	r0, r4
   b8a9a:	bd10      	pop	{r4, pc}

000b8a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8a9c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8a9e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8aa2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8aa4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8aa8:	42ae      	cmp	r6, r5
   b8aaa:	d004      	beq.n	b8ab6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8aac:	1d28      	adds	r0, r5, #4
   b8aae:	f7fc fb1d 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ab2:	3508      	adds	r5, #8
   b8ab4:	e7f8      	b.n	b8aa8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ab6:	6820      	ldr	r0, [r4, #0]
   b8ab8:	f7ff f860 	bl	b7b7c <free>
}
   b8abc:	4620      	mov	r0, r4
   b8abe:	bd70      	pop	{r4, r5, r6, pc}

000b8ac0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ac0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8ac2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ac6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8ac8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8acc:	42ae      	cmp	r6, r5
   b8ace:	d004      	beq.n	b8ada <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8ad0:	1d28      	adds	r0, r5, #4
   b8ad2:	f7fc fb0b 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ad6:	3508      	adds	r5, #8
   b8ad8:	e7f8      	b.n	b8acc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ada:	6820      	ldr	r0, [r4, #0]
   b8adc:	f7ff f84e 	bl	b7b7c <free>
}
   b8ae0:	4620      	mov	r0, r4
   b8ae2:	bd70      	pop	{r4, r5, r6, pc}

000b8ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8ae4:	b510      	push	{r4, lr}
   b8ae6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8ae8:	3024      	adds	r0, #36	; 0x24
   b8aea:	f7ff ffe9 	bl	b8ac0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8aee:	f104 0018 	add.w	r0, r4, #24
   b8af2:	f7ff ffd3 	bl	b8a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8af6:	bd10      	pop	{r4, pc}

000b8af8 <__tcf_0>:
    static BleLocalDevice instance;
   b8af8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8afa:	4b17      	ldr	r3, [pc, #92]	; (b8b58 <__tcf_0+0x60>)
   b8afc:	681c      	ldr	r4, [r3, #0]
   b8afe:	b354      	cbz	r4, b8b56 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8b00:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8b04:	f7fb fc34 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b08:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8b0c:	f7fb fc30 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b10:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8b14:	f7fb fc2c 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8b1c:	f7fb fc28 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8b20:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8b24:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8b28:	42ae      	cmp	r6, r5
   b8b2a:	d004      	beq.n	b8b36 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8b2c:	1d28      	adds	r0, r5, #4
   b8b2e:	f7fc fadd 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8b32:	3508      	adds	r5, #8
   b8b34:	e7f8      	b.n	b8b28 <__tcf_0+0x30>
    ::free(ptr);
   b8b36:	69a0      	ldr	r0, [r4, #24]
   b8b38:	f7ff f820 	bl	b7b7c <free>
    ~BleLocalDeviceImpl() = default;
   b8b3c:	f104 000c 	add.w	r0, r4, #12
   b8b40:	f7ff ffbe 	bl	b8ac0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8b44:	4620      	mov	r0, r4
   b8b46:	f7ff ffa9 	bl	b8a9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8b4a:	4620      	mov	r0, r4
   b8b4c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8b52:	f7fb baa4 	b.w	b409e <_ZdlPvj>
   b8b56:	bd70      	pop	{r4, r5, r6, pc}
   b8b58:	2003e644 	.word	0x2003e644

000b8b5c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8b5c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8b5e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8b60:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8b64:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b8b68:	6803      	ldr	r3, [r0, #0]
   b8b6a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b6c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8b6e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8b70:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8b72:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8b74:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8b76:	f7fc fab9 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8b7a:	b002      	add	sp, #8
   b8b7c:	bd10      	pop	{r4, pc}

000b8b7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8b7e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8b80:	b510      	push	{r4, lr}
      if (_M_empty())
   b8b82:	b90a      	cbnz	r2, b8b88 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8b84:	f002 fee2 	bl	bb94c <_ZSt25__throw_bad_function_callv>
    }
   b8b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8b8c:	68c3      	ldr	r3, [r0, #12]
   b8b8e:	4718      	bx	r3

000b8b90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8b90:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8b92:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8b94:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8b96:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8b98:	dd03      	ble.n	b8ba2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8b9a:	f7fe fff7 	bl	b7b8c <realloc>
            if (!d) {
   b8b9e:	b918      	cbnz	r0, b8ba8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8ba0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8ba2:	f7fe ffeb 	bl	b7b7c <free>
        T* d = nullptr;
   b8ba6:	2000      	movs	r0, #0
        data_ = d;
   b8ba8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8baa:	60a5      	str	r5, [r4, #8]
        return true;
   b8bac:	2001      	movs	r0, #1
   b8bae:	e7f7      	b.n	b8ba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8bb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8bb0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8bb2:	6883      	ldr	r3, [r0, #8]
   b8bb4:	428b      	cmp	r3, r1
   b8bb6:	da02      	bge.n	b8bbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8bb8:	f7ff ffea 	bl	b8b90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8bbc:	bd08      	pop	{r3, pc}
    return true;
   b8bbe:	2001      	movs	r0, #1
   b8bc0:	e7fc      	b.n	b8bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8bc2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bc6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bc8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bca:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bcc:	4419      	add	r1, r3
   b8bce:	6883      	ldr	r3, [r0, #8]
   b8bd0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bd2:	4604      	mov	r4, r0
   b8bd4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bd6:	dc12      	bgt.n	b8bfe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8bd8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8bda:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8bdc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8bde:	1bd2      	subs	r2, r2, r7
   b8be0:	4631      	mov	r1, r6
   b8be2:	1970      	adds	r0, r6, r5
   b8be4:	f003 fce0 	bl	bc5a8 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8be8:	462a      	mov	r2, r5
   b8bea:	4641      	mov	r1, r8
   b8bec:	4630      	mov	r0, r6
   b8bee:	f003 fccd 	bl	bc58c <memcpy>
    size_ += n;
   b8bf2:	6863      	ldr	r3, [r4, #4]
   b8bf4:	442b      	add	r3, r5
   b8bf6:	6063      	str	r3, [r4, #4]
    return true;
   b8bf8:	2001      	movs	r0, #1
}
   b8bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bfe:	f7ff ffc7 	bl	b8b90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8c02:	2800      	cmp	r0, #0
   b8c04:	d1e8      	bne.n	b8bd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8c06:	e7f8      	b.n	b8bfa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8c08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c0a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c0c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8c10:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c12:	4604      	mov	r4, r0
   b8c14:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c16:	da0b      	bge.n	b8c30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8c18:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c1a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c1c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c1e:	1b52      	subs	r2, r2, r5
   b8c20:	1c48      	adds	r0, r1, #1
   b8c22:	f003 fcc1 	bl	bc5a8 <memmove>
    new(p) T(std::move(value));
   b8c26:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8c28:	6863      	ldr	r3, [r4, #4]
   b8c2a:	3301      	adds	r3, #1
   b8c2c:	6063      	str	r3, [r4, #4]
}
   b8c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c30:	3101      	adds	r1, #1
   b8c32:	f7ff ffad 	bl	b8b90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8c36:	2800      	cmp	r0, #0
   b8c38:	d1ee      	bne.n	b8c18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8c3a:	e7f8      	b.n	b8c2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8c3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c3c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8c3e:	6841      	ldr	r1, [r0, #4]
   b8c40:	f7ff bfe2 	b.w	b8c08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8c44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8c48:	4604      	mov	r4, r0
   b8c4a:	461d      	mov	r5, r3
   b8c4c:	460f      	mov	r7, r1
   b8c4e:	ab01      	add	r3, sp, #4
   b8c50:	4690      	mov	r8, r2
   b8c52:	460a      	mov	r2, r1
   b8c54:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8c58:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8c5c:	f7ff fb18 	bl	b8290 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8c60:	1cae      	adds	r6, r5, #2
   b8c62:	6863      	ldr	r3, [r4, #4]
   b8c64:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8c66:	f1b9 0f00 	cmp.w	r9, #0
   b8c6a:	d126      	bne.n	b8cba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8c6c:	b328      	cbz	r0, b8cba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8c6e:	4433      	add	r3, r6
   b8c70:	1a1b      	subs	r3, r3, r0
   b8c72:	2bff      	cmp	r3, #255	; 0xff
   b8c74:	d809      	bhi.n	b8c8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8c76:	9901      	ldr	r1, [sp, #4]
   b8c78:	4620      	mov	r0, r4
   b8c7a:	f7ff fe7a 	bl	b8972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8c7e:	6861      	ldr	r1, [r4, #4]
   b8c80:	4620      	mov	r0, r4
   b8c82:	4431      	add	r1, r6
   b8c84:	f7ff ff94 	bl	b8bb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8c88:	b918      	cbnz	r0, b8c92 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8c8a:	6860      	ldr	r0, [r4, #4]
}
   b8c8c:	b003      	add	sp, #12
   b8c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8c92:	1c6a      	adds	r2, r5, #1
   b8c94:	9901      	ldr	r1, [sp, #4]
   b8c96:	b2d2      	uxtb	r2, r2
   b8c98:	4620      	mov	r0, r4
   b8c9a:	f7ff ffb5 	bl	b8c08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8c9e:	9901      	ldr	r1, [sp, #4]
   b8ca0:	463a      	mov	r2, r7
   b8ca2:	3101      	adds	r1, #1
   b8ca4:	4620      	mov	r0, r4
   b8ca6:	f7ff ffaf 	bl	b8c08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8caa:	9901      	ldr	r1, [sp, #4]
   b8cac:	462b      	mov	r3, r5
   b8cae:	4642      	mov	r2, r8
   b8cb0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8cb2:	4620      	mov	r0, r4
   b8cb4:	f7ff ff85 	bl	b8bc2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8cb8:	e7e7      	b.n	b8c8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8cba:	18f1      	adds	r1, r6, r3
   b8cbc:	29ff      	cmp	r1, #255	; 0xff
   b8cbe:	d8e4      	bhi.n	b8c8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8cc0:	4620      	mov	r0, r4
   b8cc2:	f7ff ff75 	bl	b8bb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8cc6:	2800      	cmp	r0, #0
   b8cc8:	d0df      	beq.n	b8c8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8cca:	1c69      	adds	r1, r5, #1
   b8ccc:	b2c9      	uxtb	r1, r1
   b8cce:	4620      	mov	r0, r4
   b8cd0:	f7ff ffb4 	bl	b8c3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8cd4:	4639      	mov	r1, r7
   b8cd6:	4620      	mov	r0, r4
   b8cd8:	f7ff ffb0 	bl	b8c3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8cdc:	6861      	ldr	r1, [r4, #4]
   b8cde:	462b      	mov	r3, r5
   b8ce0:	4642      	mov	r2, r8
   b8ce2:	e7e6      	b.n	b8cb2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8ce4:	b430      	push	{r4, r5}
   b8ce6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8cea:	b11a      	cbz	r2, b8cf4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8cec:	9502      	str	r5, [sp, #8]
}
   b8cee:	bc30      	pop	{r4, r5}
   b8cf0:	f7ff bfa8 	b.w	b8c44 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8cf4:	6840      	ldr	r0, [r0, #4]
}
   b8cf6:	bc30      	pop	{r4, r5}
   b8cf8:	4770      	bx	lr

000b8cfa <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8cfa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8cfc:	2300      	movs	r3, #0
   b8cfe:	e9c0 3300 	strd	r3, r3, [r0]
   b8d02:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8d04:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d06:	9300      	str	r3, [sp, #0]
   b8d08:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8d0a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d0e:	4619      	mov	r1, r3
   b8d10:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8d14:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d16:	f7ff ffe5 	bl	b8ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8d1a:	4620      	mov	r0, r4
   b8d1c:	b004      	add	sp, #16
   b8d1e:	bd10      	pop	{r4, pc}

000b8d20 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   b8d20:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   b8d22:	9300      	str	r3, [sp, #0]
   b8d24:	4613      	mov	r3, r2
   b8d26:	460a      	mov	r2, r1
   b8d28:	21ff      	movs	r1, #255	; 0xff
   b8d2a:	f7ff ffdb 	bl	b8ce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8d2e:	b003      	add	sp, #12
   b8d30:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8d34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d38:	4604      	mov	r4, r0
   b8d3a:	460d      	mov	r5, r1
   b8d3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8d3e:	d914      	bls.n	b8d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8d40:	4290      	cmp	r0, r2
   b8d42:	d213      	bcs.n	b8d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8d44:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8d48:	1a75      	subs	r5, r6, r1
   b8d4a:	f1a1 0708 	sub.w	r7, r1, #8
   b8d4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8d50:	42b7      	cmp	r7, r6
   b8d52:	d018      	beq.n	b8d86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8d54:	b11c      	cbz	r4, b8d5e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8d56:	4631      	mov	r1, r6
   b8d58:	4620      	mov	r0, r4
   b8d5a:	f7ff fe8e 	bl	b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8d5e:	1d30      	adds	r0, r6, #4
   b8d60:	f7fc f9c4 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8d64:	3e08      	subs	r6, #8
   b8d66:	3c08      	subs	r4, #8
   b8d68:	e7f2      	b.n	b8d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8d6a:	d00c      	beq.n	b8d86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8d6c:	42b5      	cmp	r5, r6
   b8d6e:	d00a      	beq.n	b8d86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8d70:	b11c      	cbz	r4, b8d7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8d72:	4629      	mov	r1, r5
   b8d74:	4620      	mov	r0, r4
   b8d76:	f7ff fe80 	bl	b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8d7a:	1d28      	adds	r0, r5, #4
   b8d7c:	f7fc f9b6 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8d80:	3508      	adds	r5, #8
   b8d82:	3408      	adds	r4, #8
   b8d84:	e7f2      	b.n	b8d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8d8a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8d8c:	6846      	ldr	r6, [r0, #4]
   b8d8e:	4668      	mov	r0, sp
   b8d90:	f7ff fe73 	bl	b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8d94:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8d98:	429f      	cmp	r7, r3
   b8d9a:	db12      	blt.n	b8dc2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8d9c:	3701      	adds	r7, #1
        if (n > 0) {
   b8d9e:	2f00      	cmp	r7, #0
   b8da0:	dd29      	ble.n	b8df6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8da2:	00f8      	lsls	r0, r7, #3
   b8da4:	f7fe fee2 	bl	b7b6c <malloc>
            if (!d) {
   b8da8:	4605      	mov	r5, r0
   b8daa:	b1f0      	cbz	r0, b8dea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8dac:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8db0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8db4:	f7ff ffbe 	bl	b8d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8db8:	6820      	ldr	r0, [r4, #0]
   b8dba:	f7fe fedf 	bl	b7b7c <free>
        data_ = d;
   b8dbe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8dc0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8dc2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8dc4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8dc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8dca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8dce:	4631      	mov	r1, r6
   b8dd0:	f106 0008 	add.w	r0, r6, #8
   b8dd4:	f7ff ffae 	bl	b8d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8dd8:	b11e      	cbz	r6, b8de2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8dda:	4669      	mov	r1, sp
   b8ddc:	4630      	mov	r0, r6
   b8dde:	f7ff fe4c 	bl	b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8de2:	6863      	ldr	r3, [r4, #4]
   b8de4:	3301      	adds	r3, #1
   b8de6:	6063      	str	r3, [r4, #4]
    return true;
   b8de8:	2501      	movs	r5, #1
   b8dea:	a801      	add	r0, sp, #4
   b8dec:	f7fc f97e 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8df0:	4628      	mov	r0, r5
   b8df2:	b003      	add	sp, #12
   b8df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8df6:	2500      	movs	r5, #0
   b8df8:	e7de      	b.n	b8db8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8dfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8dfc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8e00:	4605      	mov	r5, r0
   b8e02:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8e04:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8e08:	42a6      	cmp	r6, r4
   b8e0a:	d005      	beq.n	b8e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8e0c:	4639      	mov	r1, r7
   b8e0e:	4620      	mov	r0, r4
   b8e10:	f7ff fce1 	bl	b87d6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8e14:	b108      	cbz	r0, b8e1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8e16:	b914      	cbnz	r4, b8e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8e1a:	3408      	adds	r4, #8
   b8e1c:	e7f4      	b.n	b8e08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8e1e:	1d20      	adds	r0, r4, #4
   b8e20:	f7fc f964 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8e24:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8e28:	f104 0108 	add.w	r1, r4, #8
   b8e2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8e30:	4620      	mov	r0, r4
   b8e32:	f7ff ff7f 	bl	b8d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8e36:	686b      	ldr	r3, [r5, #4]
   b8e38:	3b01      	subs	r3, #1
   b8e3a:	606b      	str	r3, [r5, #4]
    return true;
   b8e3c:	e7ec      	b.n	b8e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8e40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e44:	4605      	mov	r5, r0
   b8e46:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8e48:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8e4a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8e4c:	f7ff faa0 	bl	b8390 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8e50:	682e      	ldr	r6, [r5, #0]
   b8e52:	1ef3      	subs	r3, r6, #3
   b8e54:	2b0d      	cmp	r3, #13
   b8e56:	d83c      	bhi.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e58:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8e5c:	0053000e 	.word	0x0053000e
   b8e60:	00d1003b 	.word	0x00d1003b
   b8e64:	003b003b 	.word	0x003b003b
   b8e68:	003b003b 	.word	0x003b003b
   b8e6c:	009b003b 	.word	0x009b003b
   b8e70:	009b009b 	.word	0x009b009b
   b8e74:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8e78:	a804      	add	r0, sp, #16
   b8e7a:	f7ff fc77 	bl	b876c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8e7e:	9b04      	ldr	r3, [sp, #16]
   b8e80:	89aa      	ldrh	r2, [r5, #12]
   b8e82:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8e84:	6869      	ldr	r1, [r5, #4]
   b8e86:	9804      	ldr	r0, [sp, #16]
   b8e88:	3108      	adds	r1, #8
   b8e8a:	3002      	adds	r0, #2
   b8e8c:	f7ff fa9a 	bl	b83c4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8e90:	a904      	add	r1, sp, #16
   b8e92:	a806      	add	r0, sp, #24
   b8e94:	f7ff fdf1 	bl	b8a7a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8e98:	a906      	add	r1, sp, #24
   b8e9a:	f104 0018 	add.w	r0, r4, #24
   b8e9e:	f7ff ff73 	bl	b8d88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8ea2:	4605      	mov	r5, r0
   b8ea4:	a807      	add	r0, sp, #28
   b8ea6:	f7fc f921 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8eaa:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8eac:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8eae:	b9b5      	cbnz	r5, b8ede <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8eb0:	4b5d      	ldr	r3, [pc, #372]	; (b9028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8eb2:	495e      	ldr	r1, [pc, #376]	; (b902c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8eb4:	9300      	str	r3, [sp, #0]
   b8eb6:	2032      	movs	r0, #50	; 0x32
   b8eb8:	462b      	mov	r3, r5
   b8eba:	aa06      	add	r2, sp, #24
   b8ebc:	9507      	str	r5, [sp, #28]
   b8ebe:	f7fe fd57 	bl	b7970 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8ec2:	9b04      	ldr	r3, [sp, #16]
   b8ec4:	4629      	mov	r1, r5
   b8ec6:	8818      	ldrh	r0, [r3, #0]
   b8ec8:	f7fe fb28 	bl	b751c <hal_ble_gap_disconnect>
   b8ecc:	a805      	add	r0, sp, #20
   b8ece:	f7fc f90d 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8ed2:	a803      	add	r0, sp, #12
   b8ed4:	f7ff fa6a 	bl	b83ac <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8ed8:	b00e      	add	sp, #56	; 0x38
   b8eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8ede:	4a54      	ldr	r2, [pc, #336]	; (b9030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8ee0:	9200      	str	r2, [sp, #0]
   b8ee2:	2300      	movs	r3, #0
   b8ee4:	4951      	ldr	r1, [pc, #324]	; (b902c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8ee6:	9307      	str	r3, [sp, #28]
   b8ee8:	aa06      	add	r2, sp, #24
   b8eea:	2001      	movs	r0, #1
   b8eec:	f7fe fd40 	bl	b7970 <log_message>
                if (impl->connectedCallback_) {
   b8ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8ef2:	2b00      	cmp	r3, #0
   b8ef4:	d0ea      	beq.n	b8ecc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8ef6:	a904      	add	r1, sp, #16
   b8ef8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8efc:	f7ff fe3f 	bl	b8b7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8f00:	e7e4      	b.n	b8ecc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8f02:	89a9      	ldrh	r1, [r5, #12]
   b8f04:	4620      	mov	r0, r4
   b8f06:	f7ff fb9b 	bl	b8640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8f0a:	4606      	mov	r6, r0
   b8f0c:	2800      	cmp	r0, #0
   b8f0e:	d0e0      	beq.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8f10:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8f12:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8f16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8f1a:	8029      	strh	r1, [r5, #0]
   b8f1c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8f20:	429a      	cmp	r2, r3
   b8f22:	d003      	beq.n	b8f2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8f24:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8f28:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8f2a:	e7f9      	b.n	b8f20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8f2c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8f30:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8f34:	45b8      	cmp	r8, r7
   b8f36:	d004      	beq.n	b8f42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8f38:	1d38      	adds	r0, r7, #4
   b8f3a:	f7fc f8d7 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f3e:	3708      	adds	r7, #8
   b8f40:	e7f8      	b.n	b8f34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8f42:	2300      	movs	r3, #0
   b8f44:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8f46:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8f4a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8f4e:	45b8      	cmp	r8, r7
   b8f50:	d004      	beq.n	b8f5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8f52:	1d38      	adds	r0, r7, #4
   b8f54:	f7fc f8ca 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f58:	3708      	adds	r7, #8
   b8f5a:	e7f8      	b.n	b8f4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8f5c:	2300      	movs	r3, #0
   b8f5e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8f60:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8f62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8f64:	b123      	cbz	r3, b8f70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8f66:	4631      	mov	r1, r6
   b8f68:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8f6c:	f7ff fe07 	bl	b8b7e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8f70:	2300      	movs	r3, #0
   b8f72:	2220      	movs	r2, #32
   b8f74:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8f78:	4a2e      	ldr	r2, [pc, #184]	; (b9034 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8f7a:	9200      	str	r2, [sp, #0]
   b8f7c:	492b      	ldr	r1, [pc, #172]	; (b902c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8f7e:	aa06      	add	r2, sp, #24
   b8f80:	2001      	movs	r0, #1
   b8f82:	f7fe fcf5 	bl	b7970 <log_message>
                    impl->peers_.removeOne(*peer);
   b8f86:	4631      	mov	r1, r6
   b8f88:	f104 0018 	add.w	r0, r4, #24
   b8f8c:	f7ff ff35 	bl	b8dfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8f90:	e79f      	b.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8f92:	89a9      	ldrh	r1, [r5, #12]
   b8f94:	4620      	mov	r0, r4
   b8f96:	f7ff fb53 	bl	b8640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8f9a:	2800      	cmp	r0, #0
   b8f9c:	d099      	beq.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8f9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8fa0:	2b00      	cmp	r3, #0
   b8fa2:	d096      	beq.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8fa4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8fa6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8fac:	d001      	beq.n	b8fb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8fae:	2e10      	cmp	r6, #16
   b8fb0:	d117      	bne.n	b8fe2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8fb2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8fb4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8fb6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8fb8:	2506      	movs	r5, #6
                        };
   b8fba:	f88d 3015 	strb.w	r3, [sp, #21]
   b8fbe:	9104      	str	r1, [sp, #16]
   b8fc0:	f88d 2014 	strb.w	r2, [sp, #20]
   b8fc4:	9006      	str	r0, [sp, #24]
   b8fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8fca:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8fcc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8fd0:	9508      	str	r5, [sp, #32]
   b8fd2:	e883 0003 	stmia.w	r3, {r0, r1}
   b8fd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8fd8:	a906      	add	r1, sp, #24
   b8fda:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8fde:	4798      	blx	r3
   b8fe0:	e777      	b.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8fe2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8fe4:	bf01      	itttt	eq
   b8fe6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8fe8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8fea:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8fee:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8ff0:	bf0f      	iteee	eq
   b8ff2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8ff6:	461a      	movne	r2, r3
   b8ff8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8ffa:	461d      	movne	r5, r3
   b8ffc:	e7dd      	b.n	b8fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8ffe:	89a9      	ldrh	r1, [r5, #12]
   b9000:	4620      	mov	r0, r4
   b9002:	f7ff fb1d 	bl	b8640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9006:	4601      	mov	r1, r0
   b9008:	2800      	cmp	r0, #0
   b900a:	f43f af62 	beq.w	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b900e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b9010:	2b00      	cmp	r3, #0
   b9012:	f43f af5e 	beq.w	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9016:	686b      	ldr	r3, [r5, #4]
   b9018:	9306      	str	r3, [sp, #24]
   b901a:	aa06      	add	r2, sp, #24
   b901c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b901e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b9022:	4798      	blx	r3
   b9024:	e755      	b.n	b8ed2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9026:	bf00      	nop
   b9028:	000bee18 	.word	0x000bee18
   b902c:	000bed97 	.word	0x000bed97
   b9030:	000bee3e 	.word	0x000bee3e
   b9034:	000bee5b 	.word	0x000bee5b

000b9038 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9038:	b513      	push	{r0, r1, r4, lr}
   b903a:	460b      	mov	r3, r1
   b903c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b903e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b9042:	466c      	mov	r4, sp
   b9044:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9048:	e893 0003 	ldmia.w	r3, {r0, r1}
   b904c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b9050:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9054:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9058:	b002      	add	sp, #8
   b905a:	bd10      	pop	{r4, pc}

000b905c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b905c:	b538      	push	{r3, r4, r5, lr}
   b905e:	4605      	mov	r5, r0
   b9060:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b9062:	f7ff ffe9 	bl	b9038 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9066:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9068:	68a2      	ldr	r2, [r4, #8]
   b906a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b906c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b906e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9070:	68e2      	ldr	r2, [r4, #12]
   b9072:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9074:	60e3      	str	r3, [r4, #12]
      }
   b9076:	bd38      	pop	{r3, r4, r5, pc}

000b9078 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b9078:	b570      	push	{r4, r5, r6, lr}
   b907a:	4604      	mov	r4, r0
   b907c:	b08c      	sub	sp, #48	; 0x30
   b907e:	460e      	mov	r6, r1
   b9080:	9201      	str	r2, [sp, #4]
   b9082:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b9084:	f7ff fabc 	bl	b8600 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b9088:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b908a:	9901      	ldr	r1, [sp, #4]
   b908c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9090:	f7ff f86b 	bl	b816a <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b9094:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b9098:	b1cd      	cbz	r5, b90ce <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b909a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b909c:	9502      	str	r5, [sp, #8]
   b909e:	a902      	add	r1, sp, #8
   b90a0:	a804      	add	r0, sp, #16
   b90a2:	9303      	str	r3, [sp, #12]
   b90a4:	f7ff fcb2 	bl	b8a0c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b90a8:	2300      	movs	r3, #0
	__x.swap(*this);
   b90aa:	a908      	add	r1, sp, #32
   b90ac:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b90ae:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b90b0:	f7ff ffd4 	bl	b905c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b90b4:	4631      	mov	r1, r6
   b90b6:	a808      	add	r0, sp, #32
   b90b8:	f7ff ffd0 	bl	b905c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b90bc:	a808      	add	r0, sp, #32
   b90be:	f7fb f957 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b90c2:	a804      	add	r0, sp, #16
   b90c4:	f7fb f954 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    }
   b90c8:	4620      	mov	r0, r4
   b90ca:	b00c      	add	sp, #48	; 0x30
   b90cc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b90ce:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b90d0:	e7ea      	b.n	b90a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b90d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b90d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b90d8:	b087      	sub	sp, #28
   b90da:	461d      	mov	r5, r3
   b90dc:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b90e0:	4680      	mov	r8, r0
   b90e2:	468b      	mov	fp, r1
   b90e4:	4692      	mov	sl, r2
   b90e6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b90e8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b90ea:	2200      	movs	r2, #0
   b90ec:	2068      	movs	r0, #104	; 0x68
   b90ee:	9102      	str	r1, [sp, #8]
   b90f0:	9204      	str	r2, [sp, #16]
   b90f2:	f7fa ffd0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b90f6:	1e06      	subs	r6, r0, #0
   b90f8:	f106 090c 	add.w	r9, r6, #12
   b90fc:	d018      	beq.n	b9130 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b90fe:	2201      	movs	r2, #1
	: _M_impl(__a)
   b9100:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b9102:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9106:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9108:	4a15      	ldr	r2, [pc, #84]	; (b9160 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b910a:	f847 2b20 	str.w	r2, [r7], #32
   b910e:	9b03      	ldr	r3, [sp, #12]
   b9110:	9100      	str	r1, [sp, #0]
   b9112:	465a      	mov	r2, fp
   b9114:	4651      	mov	r1, sl
   b9116:	4648      	mov	r0, r9
   b9118:	f7ff ffae 	bl	b9078 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b911c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b911e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b9120:	682b      	ldr	r3, [r5, #0]
   b9122:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9126:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b912a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b912c:	6823      	ldr	r3, [r4, #0]
   b912e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b9130:	a904      	add	r1, sp, #16
   b9132:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9134:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9138:	f7ff fd10 	bl	b8b5c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b913c:	a805      	add	r0, sp, #20
   b913e:	f7fb ffd5 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b9142:	f8d8 3000 	ldr.w	r3, [r8]
   b9146:	b93b      	cbnz	r3, b9158 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9148:	4a06      	ldr	r2, [pc, #24]	; (b9164 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b914a:	4907      	ldr	r1, [pc, #28]	; (b9168 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b914c:	200a      	movs	r0, #10
}
   b914e:	b007      	add	sp, #28
   b9150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9154:	f7fe bc04 	b.w	b7960 <panic_>
}
   b9158:	b007      	add	sp, #28
   b915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b915e:	bf00      	nop
   b9160:	000beed4 	.word	0x000beed4
   b9164:	000b747d 	.word	0x000b747d
   b9168:	000bed80 	.word	0x000bed80

000b916c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b916c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b916e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9170:	4604      	mov	r4, r0
   b9172:	460d      	mov	r5, r1
   b9174:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9176:	d914      	bls.n	b91a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9178:	4290      	cmp	r0, r2
   b917a:	d213      	bcs.n	b91a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b917c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b9180:	1a75      	subs	r5, r6, r1
   b9182:	f1a1 0708 	sub.w	r7, r1, #8
   b9186:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9188:	42b7      	cmp	r7, r6
   b918a:	d018      	beq.n	b91be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b918c:	b11c      	cbz	r4, b9196 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b918e:	4631      	mov	r1, r6
   b9190:	4620      	mov	r0, r4
   b9192:	f7ff fc68 	bl	b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9196:	1d30      	adds	r0, r6, #4
   b9198:	f7fb ffa8 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b919c:	3e08      	subs	r6, #8
   b919e:	3c08      	subs	r4, #8
   b91a0:	e7f2      	b.n	b9188 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b91a2:	d00c      	beq.n	b91be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b91a4:	42b5      	cmp	r5, r6
   b91a6:	d00a      	beq.n	b91be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b91a8:	b11c      	cbz	r4, b91b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b91aa:	4629      	mov	r1, r5
   b91ac:	4620      	mov	r0, r4
   b91ae:	f7ff fc5a 	bl	b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91b2:	1d28      	adds	r0, r5, #4
   b91b4:	f7fb ff9a 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b91b8:	3508      	adds	r5, #8
   b91ba:	3408      	adds	r4, #8
   b91bc:	e7f2      	b.n	b91a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b91be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b91c0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b91c2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b91c4:	4605      	mov	r5, r0
        if (n > 0) {
   b91c6:	dd11      	ble.n	b91ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b91c8:	00f0      	lsls	r0, r6, #3
   b91ca:	f7fe fccf 	bl	b7b6c <malloc>
            if (!d) {
   b91ce:	4604      	mov	r4, r0
   b91d0:	b158      	cbz	r0, b91ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b91d2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b91d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b91da:	f7ff ffc7 	bl	b916c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b91de:	6828      	ldr	r0, [r5, #0]
   b91e0:	f7fe fccc 	bl	b7b7c <free>
        data_ = d;
   b91e4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b91e6:	60ae      	str	r6, [r5, #8]
        return true;
   b91e8:	2001      	movs	r0, #1
    }
   b91ea:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b91ec:	2400      	movs	r4, #0
   b91ee:	e7f6      	b.n	b91de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b91f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b91f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b91f2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b91f4:	6845      	ldr	r5, [r0, #4]
   b91f6:	4668      	mov	r0, sp
   b91f8:	f7ff fc35 	bl	b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91fc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9200:	4299      	cmp	r1, r3
   b9202:	da10      	bge.n	b9226 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9204:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9206:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9208:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b920c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b9210:	4629      	mov	r1, r5
   b9212:	f105 0008 	add.w	r0, r5, #8
   b9216:	f7ff ffa9 	bl	b916c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b921a:	b98d      	cbnz	r5, b9240 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b921c:	6863      	ldr	r3, [r4, #4]
   b921e:	3301      	adds	r3, #1
   b9220:	6063      	str	r3, [r4, #4]
    return true;
   b9222:	2601      	movs	r6, #1
   b9224:	e006      	b.n	b9234 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9226:	3101      	adds	r1, #1
   b9228:	4620      	mov	r0, r4
   b922a:	f7ff ffc9 	bl	b91c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b922e:	4606      	mov	r6, r0
   b9230:	2800      	cmp	r0, #0
   b9232:	d1e7      	bne.n	b9204 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9234:	a801      	add	r0, sp, #4
   b9236:	f7fb ff59 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b923a:	4630      	mov	r0, r6
   b923c:	b002      	add	sp, #8
   b923e:	bd70      	pop	{r4, r5, r6, pc}
   b9240:	4669      	mov	r1, sp
   b9242:	4628      	mov	r0, r5
   b9244:	f7ff fc0f 	bl	b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9248:	e7e8      	b.n	b921c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b924a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b924a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b924e:	4604      	mov	r4, r0
   b9250:	460d      	mov	r5, r1
   b9252:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9254:	d914      	bls.n	b9280 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9256:	4290      	cmp	r0, r2
   b9258:	d213      	bcs.n	b9282 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b925a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b925e:	1a75      	subs	r5, r6, r1
   b9260:	f1a1 0708 	sub.w	r7, r1, #8
   b9264:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9266:	42b7      	cmp	r7, r6
   b9268:	d018      	beq.n	b929c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b926a:	b11c      	cbz	r4, b9274 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b926c:	4631      	mov	r1, r6
   b926e:	4620      	mov	r0, r4
   b9270:	f7ff fbeb 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9274:	1d30      	adds	r0, r6, #4
   b9276:	f7fb ff39 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b927a:	3e08      	subs	r6, #8
   b927c:	3c08      	subs	r4, #8
   b927e:	e7f2      	b.n	b9266 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b9280:	d00c      	beq.n	b929c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b9282:	42b5      	cmp	r5, r6
   b9284:	d00a      	beq.n	b929c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b9286:	b11c      	cbz	r4, b9290 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b9288:	4629      	mov	r1, r5
   b928a:	4620      	mov	r0, r4
   b928c:	f7ff fbdd 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9290:	1d28      	adds	r0, r5, #4
   b9292:	f7fb ff2b 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9296:	3508      	adds	r5, #8
   b9298:	3408      	adds	r4, #8
   b929a:	e7f2      	b.n	b9282 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b929c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b929e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b929e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b92a0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b92a2:	4605      	mov	r5, r0
        if (n > 0) {
   b92a4:	dd11      	ble.n	b92ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b92a6:	00f0      	lsls	r0, r6, #3
   b92a8:	f7fe fc60 	bl	b7b6c <malloc>
            if (!d) {
   b92ac:	4604      	mov	r4, r0
   b92ae:	b158      	cbz	r0, b92c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b92b0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b92b4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b92b8:	f7ff ffc7 	bl	b924a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b92bc:	6828      	ldr	r0, [r5, #0]
   b92be:	f7fe fc5d 	bl	b7b7c <free>
        data_ = d;
   b92c2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b92c4:	60ae      	str	r6, [r5, #8]
        return true;
   b92c6:	2001      	movs	r0, #1
    }
   b92c8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b92ca:	2400      	movs	r4, #0
   b92cc:	e7f6      	b.n	b92bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b92ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b92ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b92d0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b92d2:	6845      	ldr	r5, [r0, #4]
   b92d4:	4668      	mov	r0, sp
   b92d6:	f7ff fbb8 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b92da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b92de:	4299      	cmp	r1, r3
   b92e0:	da10      	bge.n	b9304 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b92e2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b92e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b92e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b92ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b92ee:	4629      	mov	r1, r5
   b92f0:	f105 0008 	add.w	r0, r5, #8
   b92f4:	f7ff ffa9 	bl	b924a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b92f8:	b98d      	cbnz	r5, b931e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b92fa:	6863      	ldr	r3, [r4, #4]
   b92fc:	3301      	adds	r3, #1
   b92fe:	6063      	str	r3, [r4, #4]
    return true;
   b9300:	2601      	movs	r6, #1
   b9302:	e006      	b.n	b9312 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9304:	3101      	adds	r1, #1
   b9306:	4620      	mov	r0, r4
   b9308:	f7ff ffc9 	bl	b929e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b930c:	4606      	mov	r6, r0
   b930e:	2800      	cmp	r0, #0
   b9310:	d1e7      	bne.n	b92e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9312:	a801      	add	r0, sp, #4
   b9314:	f7fb feea 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9318:	4630      	mov	r0, r6
   b931a:	b002      	add	sp, #8
   b931c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b931e:	4669      	mov	r1, sp
   b9320:	4628      	mov	r0, r5
   b9322:	f7ff fb92 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9326:	e7e8      	b.n	b92fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9328 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b932c:	4617      	mov	r7, r2
   b932e:	b0a1      	sub	sp, #132	; 0x84
   b9330:	4680      	mov	r8, r0
    WiringBleLock lk;
   b9332:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9334:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9336:	f7ff f82b 	bl	b8390 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b933a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b933c:	7923      	ldrb	r3, [r4, #4]
   b933e:	b953      	cbnz	r3, b9356 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b9340:	4639      	mov	r1, r7
   b9342:	4640      	mov	r0, r8
   b9344:	f7ff fb81 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9348:	a80a      	add	r0, sp, #40	; 0x28
   b934a:	f7ff f82f 	bl	b83ac <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b934e:	4640      	mov	r0, r8
   b9350:	b021      	add	sp, #132	; 0x84
   b9352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9356:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9358:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b935c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b9360:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b9362:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9366:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b936a:	9b03      	ldr	r3, [sp, #12]
   b936c:	429d      	cmp	r5, r3
   b936e:	d021      	beq.n	b93b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b9370:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b9374:	4658      	mov	r0, fp
   b9376:	f109 0114 	add.w	r1, r9, #20
   b937a:	f7ff f8b6 	bl	b84ea <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b937e:	b1b8      	cbz	r0, b93b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b9380:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b9384:	4650      	mov	r0, sl
   b9386:	f7ff f8b0 	bl	b84ea <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b938a:	b188      	cbz	r0, b93b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b938c:	6823      	ldr	r3, [r4, #0]
   b938e:	f8d9 2000 	ldr.w	r2, [r9]
   b9392:	4053      	eors	r3, r2
   b9394:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b9398:	d10a      	bne.n	b93b0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b939a:	2220      	movs	r2, #32
   b939c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b93a0:	4a5e      	ldr	r2, [pc, #376]	; (b951c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b93a2:	9200      	str	r2, [sp, #0]
   b93a4:	aa15      	add	r2, sp, #84	; 0x54
   b93a6:	495e      	ldr	r1, [pc, #376]	; (b9520 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b93a8:	2032      	movs	r0, #50	; 0x32
   b93aa:	f7fe fae1 	bl	b7970 <log_message>
   b93ae:	e7c7      	b.n	b9340 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b93b0:	3508      	adds	r5, #8
   b93b2:	e7da      	b.n	b936a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b93b4:	4650      	mov	r0, sl
   b93b6:	f7ff f869 	bl	b848c <_ZNK8particle7BleUuid7isValidEv>
   b93ba:	b960      	cbnz	r0, b93d6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b93bc:	4959      	ldr	r1, [pc, #356]	; (b9524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b93be:	2201      	movs	r2, #1
   b93c0:	a815      	add	r0, sp, #84	; 0x54
   b93c2:	ad15      	add	r5, sp, #84	; 0x54
   b93c4:	f7ff f83a 	bl	b843c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b93c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b93ca:	46d4      	mov	ip, sl
   b93cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b93d0:	682b      	ldr	r3, [r5, #0]
   b93d2:	f8cc 3000 	str.w	r3, [ip]
   b93d6:	6833      	ldr	r3, [r6, #0]
   b93d8:	e9d3 5300 	ldrd	r5, r3, [r3]
   b93dc:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b93e0:	455d      	cmp	r5, fp
   b93e2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b93e4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b93e6:	d06e      	beq.n	b94c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b93e8:	f855 0b08 	ldr.w	r0, [r5], #8
   b93ec:	f7ff f87d 	bl	b84ea <_ZNK8particle7BleUuideqERKS0_>
   b93f0:	2800      	cmp	r0, #0
   b93f2:	d0f5      	beq.n	b93e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b93f4:	f104 0a14 	add.w	sl, r4, #20
   b93f8:	4650      	mov	r0, sl
   b93fa:	f7ff f847 	bl	b848c <_ZNK8particle7BleUuid7isValidEv>
   b93fe:	b988      	cbnz	r0, b9424 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b9400:	4b49      	ldr	r3, [pc, #292]	; (b9528 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9402:	4948      	ldr	r1, [pc, #288]	; (b9524 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9404:	881a      	ldrh	r2, [r3, #0]
   b9406:	3201      	adds	r2, #1
   b9408:	b292      	uxth	r2, r2
   b940a:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b940c:	a815      	add	r0, sp, #84	; 0x54
   b940e:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b9410:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9412:	f7ff f832 	bl	b847a <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9418:	46d4      	mov	ip, sl
   b941a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b941e:	682b      	ldr	r3, [r5, #0]
   b9420:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9424:	4b41      	ldr	r3, [pc, #260]	; (b952c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9426:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9428:	2228      	movs	r2, #40	; 0x28
   b942a:	2100      	movs	r1, #0
   b942c:	a816      	add	r0, sp, #88	; 0x58
   b942e:	f003 f8d5 	bl	bc5dc <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b9432:	4651      	mov	r1, sl
   b9434:	a804      	add	r0, sp, #16
   b9436:	f7ff f83b 	bl	b84b0 <_ZN8particle7BleUuid7halUUIDEv>
   b943a:	ab04      	add	r3, sp, #16
   b943c:	aa18      	add	r2, sp, #96	; 0x60
   b943e:	f10d 0c20 	add.w	ip, sp, #32
   b9442:	6818      	ldr	r0, [r3, #0]
   b9444:	6859      	ldr	r1, [r3, #4]
   b9446:	4615      	mov	r5, r2
   b9448:	c503      	stmia	r5!, {r0, r1}
   b944a:	3308      	adds	r3, #8
   b944c:	4563      	cmp	r3, ip
   b944e:	462a      	mov	r2, r5
   b9450:	d1f7      	bne.n	b9442 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b9452:	6818      	ldr	r0, [r3, #0]
   b9454:	6028      	str	r0, [r5, #0]
    return value_;
   b9456:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9458:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b945c:	f8d9 3000 	ldr.w	r3, [r9]
   b9460:	8a9b      	ldrh	r3, [r3, #20]
   b9462:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9468:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b946a:	4b31      	ldr	r3, [pc, #196]	; (b9530 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b946c:	2200      	movs	r2, #0
   b946e:	1da1      	adds	r1, r4, #6
   b9470:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b9472:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9476:	f7fe f883 	bl	b7580 <hal_ble_gatt_server_add_characteristic>
   b947a:	2800      	cmp	r0, #0
   b947c:	f47f af60 	bne.w	b9340 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b9480:	2301      	movs	r3, #1
   b9482:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b9484:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b9486:	4639      	mov	r1, r7
        return characteristics_;
   b9488:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b948a:	a80d      	add	r0, sp, #52	; 0x34
   b948c:	f7ff fadd 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9490:	4620      	mov	r0, r4
   b9492:	a90d      	add	r1, sp, #52	; 0x34
   b9494:	f7ff ff1b 	bl	b92ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9498:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b949a:	a80e      	add	r0, sp, #56	; 0x38
   b949c:	f7fb fe26 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94a0:	2c00      	cmp	r4, #0
   b94a2:	f47f af4d 	bne.w	b9340 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b94a6:	2320      	movs	r3, #32
   b94a8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b94ac:	4b21      	ldr	r3, [pc, #132]	; (b9534 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b94ae:	9300      	str	r3, [sp, #0]
   b94b0:	aa0d      	add	r2, sp, #52	; 0x34
   b94b2:	4623      	mov	r3, r4
   b94b4:	e777      	b.n	b93a6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b94b6:	4639      	mov	r1, r7
   b94b8:	4640      	mov	r0, r8
   b94ba:	f7ff fac6 	bl	b8a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b94be:	a80c      	add	r0, sp, #48	; 0x30
   b94c0:	f7fb fe14 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94c4:	e740      	b.n	b9348 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b94c6:	a80b      	add	r0, sp, #44	; 0x2c
   b94c8:	f7ff f92c 	bl	b8724 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b94cc:	4651      	mov	r1, sl
   b94ce:	a815      	add	r0, sp, #84	; 0x54
   b94d0:	f7fe ffee 	bl	b84b0 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b94d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b94d6:	2300      	movs	r3, #0
   b94d8:	3214      	adds	r2, #20
   b94da:	a915      	add	r1, sp, #84	; 0x54
   b94dc:	2001      	movs	r0, #1
   b94de:	f7fe f827 	bl	b7530 <hal_ble_gatt_server_add_service>
   b94e2:	2800      	cmp	r0, #0
   b94e4:	d1e7      	bne.n	b94b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b94e6:	6835      	ldr	r5, [r6, #0]
   b94e8:	a90b      	add	r1, sp, #44	; 0x2c
   b94ea:	a80d      	add	r0, sp, #52	; 0x34
   b94ec:	f7ff fabb 	bl	b8a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b94f0:	4628      	mov	r0, r5
   b94f2:	a90d      	add	r1, sp, #52	; 0x34
   b94f4:	f7ff fe7c 	bl	b91f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b94f8:	4605      	mov	r5, r0
   b94fa:	a80e      	add	r0, sp, #56	; 0x38
   b94fc:	f7fb fdf6 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9500:	2d00      	cmp	r5, #0
   b9502:	d0d8      	beq.n	b94b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9504:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9506:	6853      	ldr	r3, [r2, #4]
   b9508:	6812      	ldr	r2, [r2, #0]
   b950a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b950e:	3b01      	subs	r3, #1
   b9510:	a80c      	add	r0, sp, #48	; 0x30
   b9512:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9516:	f7fb fde9 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b951a:	e76b      	b.n	b93f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b951c:	000bee7a 	.word	0x000bee7a
   b9520:	000bed97 	.word	0x000bed97
   b9524:	000bef3e 	.word	0x000bef3e
   b9528:	2003e63c 	.word	0x2003e63c
   b952c:	002c0003 	.word	0x002c0003
   b9530:	000b88bd 	.word	0x000b88bd
   b9534:	000beea5 	.word	0x000beea5

000b9538 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9538:	4802      	ldr	r0, [pc, #8]	; (b9544 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b953a:	2300      	movs	r3, #0
   b953c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b953e:	f7fe b877 	b.w	b7630 <os_mutex_recursive_create>
   b9542:	bf00      	nop
   b9544:	2003e640 	.word	0x2003e640

000b9548 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b954a:	4606      	mov	r6, r0
   b954c:	460d      	mov	r5, r1
  size_t n = 0;
   b954e:	188f      	adds	r7, r1, r2
   b9550:	2400      	movs	r4, #0
  while (size--) {
   b9552:	42bd      	cmp	r5, r7
   b9554:	d00c      	beq.n	b9570 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9556:	6833      	ldr	r3, [r6, #0]
   b9558:	f815 1b01 	ldrb.w	r1, [r5], #1
   b955c:	689b      	ldr	r3, [r3, #8]
   b955e:	4630      	mov	r0, r6
   b9560:	4798      	blx	r3
     if (chunk>=0)
   b9562:	1e03      	subs	r3, r0, #0
   b9564:	db01      	blt.n	b956a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9566:	441c      	add	r4, r3
  while (size--) {
   b9568:	e7f3      	b.n	b9552 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b956a:	2c00      	cmp	r4, #0
   b956c:	bf08      	it	eq
   b956e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b9570:	4620      	mov	r0, r4
   b9572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9574 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b9574:	b508      	push	{r3, lr}
  return write(str);
   b9576:	f7fd fa75 	bl	b6a64 <_ZN5Print5writeEPKc>
}
   b957a:	bd08      	pop	{r3, pc}

000b957c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b957c:	6803      	ldr	r3, [r0, #0]
   b957e:	689b      	ldr	r3, [r3, #8]
   b9580:	4718      	bx	r3

000b9582 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9582:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9584:	210d      	movs	r1, #13
{
   b9586:	4605      	mov	r5, r0
  size_t n = print('\r');
   b9588:	f7ff fff8 	bl	b957c <_ZN5Print5printEc>
  n += print('\n');
   b958c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b958e:	4604      	mov	r4, r0
  n += print('\n');
   b9590:	4628      	mov	r0, r5
   b9592:	f7ff fff3 	bl	b957c <_ZN5Print5printEc>
  return n;
}
   b9596:	4420      	add	r0, r4
   b9598:	bd38      	pop	{r3, r4, r5, pc}

000b959a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b959a:	b538      	push	{r3, r4, r5, lr}
   b959c:	4605      	mov	r5, r0
  return write(str);
   b959e:	f7fd fa61 	bl	b6a64 <_ZN5Print5writeEPKc>
   b95a2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b95a4:	4628      	mov	r0, r5
   b95a6:	f7ff ffec 	bl	b9582 <_ZN5Print7printlnEv>
  return n;
}
   b95aa:	4420      	add	r0, r4
   b95ac:	bd38      	pop	{r3, r4, r5, pc}

000b95ae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b95ae:	b530      	push	{r4, r5, lr}
   b95b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b95b2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b95b4:	2a01      	cmp	r2, #1
  *str = '\0';
   b95b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b95ba:	bf98      	it	ls
   b95bc:	220a      	movls	r2, #10
   b95be:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b95c0:	460d      	mov	r5, r1
   b95c2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b95c6:	fb01 5312 	mls	r3, r1, r2, r5
   b95ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b95ce:	2b09      	cmp	r3, #9
   b95d0:	bf94      	ite	ls
   b95d2:	3330      	addls	r3, #48	; 0x30
   b95d4:	3337      	addhi	r3, #55	; 0x37
   b95d6:	b2db      	uxtb	r3, r3
  } while(n);
   b95d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b95da:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b95de:	d9ef      	bls.n	b95c0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b95e0:	4621      	mov	r1, r4
   b95e2:	f7fd fa3f 	bl	b6a64 <_ZN5Print5writeEPKc>
}
   b95e6:	b00b      	add	sp, #44	; 0x2c
   b95e8:	bd30      	pop	{r4, r5, pc}

000b95ea <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b95ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b95ee:	b086      	sub	sp, #24
   b95f0:	af00      	add	r7, sp, #0
   b95f2:	4605      	mov	r5, r0
   b95f4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b95f6:	1d38      	adds	r0, r7, #4
   b95f8:	2114      	movs	r1, #20
{
   b95fa:	4614      	mov	r4, r2
    va_copy(args2, args);
   b95fc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b95fe:	f7fe fadd 	bl	b7bbc <vsnprintf>

    if (n<bufsize)
   b9602:	2813      	cmp	r0, #19
   b9604:	d80e      	bhi.n	b9624 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9606:	1d39      	adds	r1, r7, #4
   b9608:	4628      	mov	r0, r5
   b960a:	f7fd fa2b 	bl	b6a64 <_ZN5Print5writeEPKc>
   b960e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9610:	b11e      	cbz	r6, b961a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9612:	4628      	mov	r0, r5
   b9614:	f7ff ffb5 	bl	b9582 <_ZN5Print7printlnEv>
   b9618:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b961a:	4620      	mov	r0, r4
   b961c:	3718      	adds	r7, #24
   b961e:	46bd      	mov	sp, r7
   b9620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9624:	f100 0308 	add.w	r3, r0, #8
   b9628:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b962c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b962e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b9632:	4622      	mov	r2, r4
   b9634:	1c41      	adds	r1, r0, #1
   b9636:	683b      	ldr	r3, [r7, #0]
   b9638:	4668      	mov	r0, sp
   b963a:	f7fe fabf 	bl	b7bbc <vsnprintf>
  return write(str);
   b963e:	4669      	mov	r1, sp
   b9640:	4628      	mov	r0, r5
   b9642:	f7fd fa0f 	bl	b6a64 <_ZN5Print5writeEPKc>
   b9646:	4604      	mov	r4, r0
   b9648:	46c5      	mov	sp, r8
   b964a:	e7e1      	b.n	b9610 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b964c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b964c:	b510      	push	{r4, lr}
   b964e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9650:	f7fd ff24 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b9654:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b9656:	6823      	ldr	r3, [r4, #0]
   b9658:	4620      	mov	r0, r4
   b965a:	695b      	ldr	r3, [r3, #20]
   b965c:	4798      	blx	r3
    if (c >= 0) return c;
   b965e:	2800      	cmp	r0, #0
   b9660:	da08      	bge.n	b9674 <_ZN6Stream9timedReadEv+0x28>
   b9662:	f7fd ff1b 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b9666:	68e3      	ldr	r3, [r4, #12]
   b9668:	1ac0      	subs	r0, r0, r3
   b966a:	68a3      	ldr	r3, [r4, #8]
   b966c:	4298      	cmp	r0, r3
   b966e:	d3f2      	bcc.n	b9656 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b9670:	f04f 30ff 	mov.w	r0, #4294967295
}
   b9674:	bd10      	pop	{r4, pc}

000b9676 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   b9676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b967a:	4607      	mov	r7, r0
   b967c:	4688      	mov	r8, r1
   b967e:	4616      	mov	r6, r2
  if (length < 1) return 0;
   b9680:	461d      	mov	r5, r3
   b9682:	b173      	cbz	r3, b96a2 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   b9684:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   b9686:	4638      	mov	r0, r7
   b9688:	f7ff ffe0 	bl	b964c <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   b968c:	1e03      	subs	r3, r0, #0
   b968e:	db05      	blt.n	b969c <_ZN6Stream14readBytesUntilEcPcj+0x26>
   b9690:	4543      	cmp	r3, r8
   b9692:	d003      	beq.n	b969c <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   b9694:	5533      	strb	r3, [r6, r4]
    index++;
   b9696:	3401      	adds	r4, #1
  while (index < length) {
   b9698:	42a5      	cmp	r5, r4
   b969a:	d1f4      	bne.n	b9686 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   b969c:	4620      	mov	r0, r4
   b969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   b96a2:	461c      	mov	r4, r3
   b96a4:	e7fa      	b.n	b969c <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000b96a8 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b96a8:	b570      	push	{r4, r5, r6, lr}
   b96aa:	460d      	mov	r5, r1
  String ret;
   b96ac:	4909      	ldr	r1, [pc, #36]	; (b96d4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b96ae:	4604      	mov	r4, r0
   b96b0:	4616      	mov	r6, r2
  String ret;
   b96b2:	f7fe fd04 	bl	b80be <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b96b6:	4628      	mov	r0, r5
   b96b8:	f7ff ffc8 	bl	b964c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b96bc:	2800      	cmp	r0, #0
   b96be:	db06      	blt.n	b96ce <_ZN6Stream15readStringUntilEc+0x26>
   b96c0:	4286      	cmp	r6, r0
   b96c2:	d004      	beq.n	b96ce <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b96c4:	b2c1      	uxtb	r1, r0
   b96c6:	4620      	mov	r0, r4
   b96c8:	f7fe fd78 	bl	b81bc <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b96cc:	e7f3      	b.n	b96b6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b96ce:	4620      	mov	r0, r4
   b96d0:	bd70      	pop	{r4, r5, r6, pc}
   b96d2:	bf00      	nop
   b96d4:	000befb8 	.word	0x000befb8

000b96d8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b96d8:	6880      	ldr	r0, [r0, #8]
   b96da:	6803      	ldr	r3, [r0, #0]
   b96dc:	68db      	ldr	r3, [r3, #12]
   b96de:	4718      	bx	r3

000b96e0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b96e0:	4770      	bx	lr

000b96e2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b96e2:	4608      	mov	r0, r1
   b96e4:	b111      	cbz	r1, b96ec <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b96e6:	680b      	ldr	r3, [r1, #0]
   b96e8:	685b      	ldr	r3, [r3, #4]
   b96ea:	4718      	bx	r3
}
   b96ec:	4770      	bx	lr

000b96ee <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b96ee:	4770      	bx	lr

000b96f0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b96f0:	4770      	bx	lr

000b96f2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b96f2:	4770      	bx	lr

000b96f4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b96f4:	4770      	bx	lr

000b96f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b96f6:	b538      	push	{r3, r4, r5, lr}
   b96f8:	4604      	mov	r4, r0
   b96fa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b96fc:	6800      	ldr	r0, [r0, #0]
   b96fe:	212e      	movs	r1, #46	; 0x2e
   b9700:	f002 ffbe 	bl	bc680 <strchrnul>
    size = s - category;
   b9704:	6823      	ldr	r3, [r4, #0]
   b9706:	1ac3      	subs	r3, r0, r3
   b9708:	602b      	str	r3, [r5, #0]
    if (size) {
   b970a:	b123      	cbz	r3, b9716 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b970c:	7803      	ldrb	r3, [r0, #0]
   b970e:	b103      	cbz	r3, b9712 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9710:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b9712:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9714:	6020      	str	r0, [r4, #0]
}
   b9716:	4618      	mov	r0, r3
   b9718:	bd38      	pop	{r3, r4, r5, pc}

000b971a <_ZN5spark16JSONStreamWriterD0Ev>:
   b971a:	b510      	push	{r4, lr}
   b971c:	210c      	movs	r1, #12
   b971e:	4604      	mov	r4, r0
   b9720:	f7fa fcbd 	bl	b409e <_ZdlPvj>
   b9724:	4620      	mov	r0, r4
   b9726:	bd10      	pop	{r4, pc}

000b9728 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9728:	b510      	push	{r4, lr}
   b972a:	2104      	movs	r1, #4
   b972c:	4604      	mov	r4, r0
   b972e:	f7fa fcb6 	bl	b409e <_ZdlPvj>
   b9732:	4620      	mov	r0, r4
   b9734:	bd10      	pop	{r4, pc}

000b9736 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9736:	b510      	push	{r4, lr}
   b9738:	2104      	movs	r1, #4
   b973a:	4604      	mov	r4, r0
   b973c:	f7fa fcaf 	bl	b409e <_ZdlPvj>
   b9740:	4620      	mov	r0, r4
   b9742:	bd10      	pop	{r4, pc}

000b9744 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b9744:	f7fd bf84 	b.w	b7650 <os_mutex_recursive_lock>

000b9748 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9748:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b974a:	f002 ffa3 	bl	bc694 <strcmp>
}
   b974e:	fab0 f080 	clz	r0, r0
   b9752:	0940      	lsrs	r0, r0, #5
   b9754:	bd08      	pop	{r3, pc}

000b9756 <__tcf_1>:
   b9756:	4770      	bx	lr

000b9758 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9758:	b510      	push	{r4, lr}
   b975a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b975c:	f001 fc1e 	bl	baf9c <_Z16_fetch_usbserialv>
   b9760:	4284      	cmp	r4, r0
   b9762:	d010      	beq.n	b9786 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9764:	f002 f88e 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b9768:	4284      	cmp	r4, r0
   b976a:	d105      	bne.n	b9778 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b976c:	f002 f88a 	bl	bb884 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9774:	f001 bce1 	b.w	bb13a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9778:	b12c      	cbz	r4, b9786 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b977a:	6823      	ldr	r3, [r4, #0]
   b977c:	4620      	mov	r0, r4
   b977e:	685b      	ldr	r3, [r3, #4]
}
   b9780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9784:	4718      	bx	r3
   b9786:	bd10      	pop	{r4, pc}

000b9788 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9788:	680b      	ldr	r3, [r1, #0]
   b978a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b978c:	684b      	ldr	r3, [r1, #4]
   b978e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9790:	b113      	cbz	r3, b9798 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9792:	685a      	ldr	r2, [r3, #4]
   b9794:	3201      	adds	r2, #1
   b9796:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9798:	4770      	bx	lr

000b979a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b979a:	b513      	push	{r0, r1, r4, lr}
   b979c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b979e:	4608      	mov	r0, r1
   b97a0:	9101      	str	r1, [sp, #4]
   b97a2:	f002 ffa6 	bl	bc6f2 <strlen>
   b97a6:	9901      	ldr	r1, [sp, #4]
   b97a8:	4602      	mov	r2, r0
   b97aa:	4620      	mov	r0, r4
}
   b97ac:	b002      	add	sp, #8
   b97ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b97b2:	f001 bfd3 	b.w	bb75c <_ZN5spark10JSONWriter5valueEPKcj>

000b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b97b6:	b513      	push	{r0, r1, r4, lr}
   b97b8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b97ba:	4608      	mov	r0, r1
   b97bc:	9101      	str	r1, [sp, #4]
   b97be:	f002 ff98 	bl	bc6f2 <strlen>
   b97c2:	6823      	ldr	r3, [r4, #0]
   b97c4:	9901      	ldr	r1, [sp, #4]
   b97c6:	68db      	ldr	r3, [r3, #12]
   b97c8:	4602      	mov	r2, r0
   b97ca:	4620      	mov	r0, r4
}
   b97cc:	b002      	add	sp, #8
   b97ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b97d2:	4718      	bx	r3

000b97d4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b97d4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b97d6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b97d8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b97dc:	68db      	ldr	r3, [r3, #12]
   b97de:	2201      	movs	r2, #1
   b97e0:	f10d 0107 	add.w	r1, sp, #7
   b97e4:	4798      	blx	r3
}
   b97e6:	b003      	add	sp, #12
   b97e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b97ec <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b97ec:	b40e      	push	{r1, r2, r3}
   b97ee:	b503      	push	{r0, r1, lr}
   b97f0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b97f2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b97f4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b97f8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b97fa:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b97fc:	f7ff fef5 	bl	b95ea <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9800:	b002      	add	sp, #8
   b9802:	f85d eb04 	ldr.w	lr, [sp], #4
   b9806:	b003      	add	sp, #12
   b9808:	4770      	bx	lr

000b980a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b980a:	680a      	ldr	r2, [r1, #0]
   b980c:	6002      	str	r2, [r0, #0]
   b980e:	684a      	ldr	r2, [r1, #4]
   b9810:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9812:	2200      	movs	r2, #0
   b9814:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9818:	b510      	push	{r4, lr}
   b981a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b981c:	688c      	ldr	r4, [r1, #8]
   b981e:	6084      	str	r4, [r0, #8]
   b9820:	68cc      	ldr	r4, [r1, #12]
   b9822:	60c4      	str	r4, [r0, #12]
   b9824:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9826:	608a      	str	r2, [r1, #8]
   b9828:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b982a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b982c:	610a      	str	r2, [r1, #16]
   b982e:	bd10      	pop	{r4, pc}

000b9830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9834:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9838:	f04f 0a14 	mov.w	sl, #20
   b983c:	9300      	str	r3, [sp, #0]
   b983e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9842:	4b18      	ldr	r3, [pc, #96]	; (b98a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9844:	10a4      	asrs	r4, r4, #2
   b9846:	4617      	mov	r7, r2
   b9848:	435c      	muls	r4, r3
   b984a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b984c:	2c00      	cmp	r4, #0
   b984e:	dd21      	ble.n	b9894 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9850:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9852:	fb0a f006 	mul.w	r0, sl, r6
   b9856:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b985a:	463a      	mov	r2, r7
   b985c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9860:	5828      	ldr	r0, [r5, r0]
   b9862:	9101      	str	r1, [sp, #4]
   b9864:	455f      	cmp	r7, fp
   b9866:	bf28      	it	cs
   b9868:	465a      	movcs	r2, fp
   b986a:	f002 ff5d 	bl	bc728 <strncmp>
                if (cmp == 0) {
   b986e:	2800      	cmp	r0, #0
   b9870:	9901      	ldr	r1, [sp, #4]
   b9872:	f04f 0301 	mov.w	r3, #1
   b9876:	d10b      	bne.n	b9890 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9878:	455f      	cmp	r7, fp
   b987a:	d103      	bne.n	b9884 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b987c:	9a00      	ldr	r2, [sp, #0]
   b987e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9880:	4634      	mov	r4, r6
   b9882:	e7e3      	b.n	b984c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9884:	d9fc      	bls.n	b9880 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9886:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9888:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b988c:	3e01      	subs	r6, #1
   b988e:	e7f7      	b.n	b9880 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9890:	dbf9      	blt.n	b9886 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9892:	e7f5      	b.n	b9880 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9894:	eba5 0508 	sub.w	r5, r5, r8
}
   b9898:	4802      	ldr	r0, [pc, #8]	; (b98a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b989a:	10ad      	asrs	r5, r5, #2
   b989c:	4368      	muls	r0, r5
   b989e:	b003      	add	sp, #12
   b98a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98a4:	cccccccd 	.word	0xcccccccd

000b98a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b98a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b98aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b98ac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b98ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b98b0:	b303      	cbz	r3, b98f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b98b2:	b1f9      	cbz	r1, b98f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b98b4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b98b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b98ba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b98bc:	a903      	add	r1, sp, #12
   b98be:	a801      	add	r0, sp, #4
   b98c0:	f7ff ff19 	bl	b96f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b98c4:	4601      	mov	r1, r0
   b98c6:	b1a8      	cbz	r0, b98f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b98c8:	f10d 030b 	add.w	r3, sp, #11
   b98cc:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b98ce:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b98d2:	4620      	mov	r0, r4
   b98d4:	f7ff ffac 	bl	b9830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b98d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b98dc:	b153      	cbz	r3, b98f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b98de:	6823      	ldr	r3, [r4, #0]
   b98e0:	2414      	movs	r4, #20
   b98e2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b98e6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b98e8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b98ec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b98ee:	bfa8      	it	ge
   b98f0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b98f2:	e7e3      	b.n	b98bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b98f4:	4628      	mov	r0, r5
   b98f6:	b004      	add	sp, #16
   b98f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b98fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b98fc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b98fe:	4c09      	ldr	r4, [pc, #36]	; (b9924 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9900:	7823      	ldrb	r3, [r4, #0]
   b9902:	f3bf 8f5b 	dmb	ish
   b9906:	07db      	lsls	r3, r3, #31
   b9908:	d409      	bmi.n	b991e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b990a:	4620      	mov	r0, r4
   b990c:	f7fa fbd6 	bl	b40bc <__cxa_guard_acquire>
   b9910:	b128      	cbz	r0, b991e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9912:	4620      	mov	r0, r4
   b9914:	f7fa fbd7 	bl	b40c6 <__cxa_guard_release>
   b9918:	4803      	ldr	r0, [pc, #12]	; (b9928 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b991a:	f002 fe11 	bl	bc540 <atexit>
}
   b991e:	4803      	ldr	r0, [pc, #12]	; (b992c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9920:	bd10      	pop	{r4, pc}
   b9922:	bf00      	nop
   b9924:	2003e64c 	.word	0x2003e64c
   b9928:	000b96ef 	.word	0x000b96ef
   b992c:	2003dc2c 	.word	0x2003dc2c

000b9930 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9930:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9932:	4c09      	ldr	r4, [pc, #36]	; (b9958 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9934:	7823      	ldrb	r3, [r4, #0]
   b9936:	f3bf 8f5b 	dmb	ish
   b993a:	07db      	lsls	r3, r3, #31
   b993c:	d409      	bmi.n	b9952 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b993e:	4620      	mov	r0, r4
   b9940:	f7fa fbbc 	bl	b40bc <__cxa_guard_acquire>
   b9944:	b128      	cbz	r0, b9952 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9946:	4620      	mov	r0, r4
   b9948:	f7fa fbbd 	bl	b40c6 <__cxa_guard_release>
   b994c:	4803      	ldr	r0, [pc, #12]	; (b995c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b994e:	f002 fdf7 	bl	bc540 <atexit>
    return &factory;
}
   b9952:	4803      	ldr	r0, [pc, #12]	; (b9960 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9954:	bd10      	pop	{r4, pc}
   b9956:	bf00      	nop
   b9958:	2003e650 	.word	0x2003e650
   b995c:	000b9757 	.word	0x000b9757
   b9960:	2003dc30 	.word	0x2003dc30

000b9964 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9964:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9966:	2500      	movs	r5, #0
   b9968:	4604      	mov	r4, r0
   b996a:	e9c0 5500 	strd	r5, r5, [r0]
   b996e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9972:	6085      	str	r5, [r0, #8]
   b9974:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9976:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b997a:	f7fd fe59 	bl	b7630 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b997e:	f7ff ffbd 	bl	b98fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9982:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9984:	f7ff ffd4 	bl	b9930 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9988:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b998a:	6220      	str	r0, [r4, #32]
}
   b998c:	4620      	mov	r0, r4
   b998e:	bd38      	pop	{r3, r4, r5, pc}

000b9990 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9990:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9992:	4c0a      	ldr	r4, [pc, #40]	; (b99bc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9994:	7823      	ldrb	r3, [r4, #0]
   b9996:	f3bf 8f5b 	dmb	ish
   b999a:	07db      	lsls	r3, r3, #31
   b999c:	d40c      	bmi.n	b99b8 <_ZN5spark10LogManager8instanceEv+0x28>
   b999e:	4620      	mov	r0, r4
   b99a0:	f7fa fb8c 	bl	b40bc <__cxa_guard_acquire>
   b99a4:	b140      	cbz	r0, b99b8 <_ZN5spark10LogManager8instanceEv+0x28>
   b99a6:	4806      	ldr	r0, [pc, #24]	; (b99c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b99a8:	f7ff ffdc 	bl	b9964 <_ZN5spark10LogManagerC1Ev>
   b99ac:	4620      	mov	r0, r4
   b99ae:	f7fa fb8a 	bl	b40c6 <__cxa_guard_release>
   b99b2:	4804      	ldr	r0, [pc, #16]	; (b99c4 <_ZN5spark10LogManager8instanceEv+0x34>)
   b99b4:	f002 fdc4 	bl	bc540 <atexit>
    return &mgr;
}
   b99b8:	4801      	ldr	r0, [pc, #4]	; (b99c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   b99ba:	bd10      	pop	{r4, pc}
   b99bc:	2003e648 	.word	0x2003e648
   b99c0:	2003e658 	.word	0x2003e658
   b99c4:	000b9ee5 	.word	0x000b9ee5

000b99c8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b99c8:	4a02      	ldr	r2, [pc, #8]	; (b99d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b99ca:	4903      	ldr	r1, [pc, #12]	; (b99d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b99cc:	4803      	ldr	r0, [pc, #12]	; (b99dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b99ce:	2300      	movs	r3, #0
   b99d0:	f7fd bfde 	b.w	b7990 <log_set_callbacks>
   b99d4:	000b9cc9 	.word	0x000b9cc9
   b99d8:	000b9c55 	.word	0x000b9c55
   b99dc:	000b9bd5 	.word	0x000b9bd5

000b99e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b99e0:	2300      	movs	r3, #0
   b99e2:	461a      	mov	r2, r3
   b99e4:	4619      	mov	r1, r3
   b99e6:	4618      	mov	r0, r3
   b99e8:	f7fd bfd2 	b.w	b7990 <log_set_callbacks>

000b99ec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b99ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b99ee:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b99f0:	4604      	mov	r4, r0
   b99f2:	4668      	mov	r0, sp
   b99f4:	f7ff fec8 	bl	b9788 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b99f8:	466a      	mov	r2, sp
   b99fa:	4629      	mov	r1, r5
   b99fc:	4620      	mov	r0, r4
   b99fe:	f001 fdcd 	bl	bb59c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9a02:	a801      	add	r0, sp, #4
   b9a04:	f7fb fb72 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a08:	4620      	mov	r0, r4
   b9a0a:	b003      	add	sp, #12
   b9a0c:	bd30      	pop	{r4, r5, pc}

000b9a0e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9a0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9a10:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9a12:	4604      	mov	r4, r0
   b9a14:	4668      	mov	r0, sp
   b9a16:	f7ff feb7 	bl	b9788 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9a1a:	466a      	mov	r2, sp
   b9a1c:	4629      	mov	r1, r5
   b9a1e:	4620      	mov	r0, r4
   b9a20:	f001 fd98 	bl	bb554 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9a24:	a801      	add	r0, sp, #4
   b9a26:	f7fb fb61 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a2a:	4620      	mov	r0, r4
   b9a2c:	b003      	add	sp, #12
   b9a2e:	bd30      	pop	{r4, r5, pc}

000b9a30 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9a32:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9a34:	4604      	mov	r4, r0
   b9a36:	4668      	mov	r0, sp
   b9a38:	f7ff fea6 	bl	b9788 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9a3c:	466a      	mov	r2, sp
   b9a3e:	4629      	mov	r1, r5
   b9a40:	4620      	mov	r0, r4
   b9a42:	f001 fd30 	bl	bb4a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9a46:	a801      	add	r0, sp, #4
   b9a48:	f7fb fb50 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a4c:	4620      	mov	r0, r4
   b9a4e:	b003      	add	sp, #12
   b9a50:	bd30      	pop	{r4, r5, pc}
	...

000b9a54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9a54:	b570      	push	{r4, r5, r6, lr}
   b9a56:	b08a      	sub	sp, #40	; 0x28
   b9a58:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9a5a:	4601      	mov	r1, r0
   b9a5c:	a804      	add	r0, sp, #16
   b9a5e:	f7ff ffc5 	bl	b99ec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9a62:	4e14      	ldr	r6, [pc, #80]	; (b9ab4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9a64:	a804      	add	r0, sp, #16
   b9a66:	f001 fdb1 	bl	bb5cc <_ZN5spark18JSONObjectIterator4nextEv>
   b9a6a:	b1e8      	cbz	r0, b9aa8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9a6c:	a904      	add	r1, sp, #16
   b9a6e:	4668      	mov	r0, sp
   b9a70:	f7ff ffcd 	bl	b9a0e <_ZNK5spark18JSONObjectIterator4nameEv>
   b9a74:	9802      	ldr	r0, [sp, #8]
   b9a76:	4631      	mov	r1, r6
   b9a78:	f7ff fe66 	bl	b9748 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9a7c:	4604      	mov	r4, r0
   b9a7e:	b110      	cbz	r0, b9a86 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9a80:	1e2c      	subs	r4, r5, #0
   b9a82:	bf18      	it	ne
   b9a84:	2401      	movne	r4, #1
   b9a86:	a801      	add	r0, sp, #4
   b9a88:	f7fb fb30 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9a8c:	2c00      	cmp	r4, #0
   b9a8e:	d0e9      	beq.n	b9a64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9a90:	a904      	add	r1, sp, #16
   b9a92:	4668      	mov	r0, sp
   b9a94:	f7ff ffcc 	bl	b9a30 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9a98:	4668      	mov	r0, sp
   b9a9a:	f001 fd3a 	bl	bb512 <_ZNK5spark9JSONValue5toIntEv>
   b9a9e:	6028      	str	r0, [r5, #0]
   b9aa0:	a801      	add	r0, sp, #4
   b9aa2:	f7fb fb23 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9aa6:	e7dd      	b.n	b9a64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9aa8:	a805      	add	r0, sp, #20
   b9aaa:	f7fb fb1f 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9aae:	b00a      	add	sp, #40	; 0x28
   b9ab0:	bd70      	pop	{r4, r5, r6, pc}
   b9ab2:	bf00      	nop
   b9ab4:	000bef5e 	.word	0x000bef5e

000b9ab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9aba:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9abc:	4620      	mov	r0, r4
   b9abe:	4913      	ldr	r1, [pc, #76]	; (b9b0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9ac0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9ac2:	f002 fde7 	bl	bc694 <strcmp>
   b9ac6:	b950      	cbnz	r0, b9ade <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9ac8:	f001 fa68 	bl	baf9c <_Z16_fetch_usbserialv>
   b9acc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9ad0:	f001 fa54 	bl	baf7c <_ZN9USBSerial5beginEl>
}
   b9ad4:	b003      	add	sp, #12
   b9ad6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9ada:	f001 ba5f 	b.w	baf9c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9ade:	490c      	ldr	r1, [pc, #48]	; (b9b10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9ae0:	4620      	mov	r0, r4
   b9ae2:	f002 fdd7 	bl	bc694 <strcmp>
   b9ae6:	b978      	cbnz	r0, b9b08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9ae8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9aec:	a901      	add	r1, sp, #4
   b9aee:	4628      	mov	r0, r5
        int baud = 9600;
   b9af0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9af2:	f7ff ffaf 	bl	b9a54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9af6:	f001 fec5 	bl	bb884 <_Z22__fetch_global_Serial1v>
   b9afa:	9901      	ldr	r1, [sp, #4]
   b9afc:	f001 fb1a 	bl	bb134 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9b00:	f001 fec0 	bl	bb884 <_Z22__fetch_global_Serial1v>
}
   b9b04:	b003      	add	sp, #12
   b9b06:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9b08:	2000      	movs	r0, #0
   b9b0a:	e7fb      	b.n	b9b04 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9b0c:	000bef63 	.word	0x000bef63
   b9b10:	000bef6a 	.word	0x000bef6a

000b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9b14:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9b16:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9b1a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9b1c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9b1e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b22:	42ae      	cmp	r6, r5
   b9b24:	d005      	beq.n	b9b32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9b26:	f105 0008 	add.w	r0, r5, #8
   b9b2a:	f7ff fff3 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9b2e:	3514      	adds	r5, #20
   b9b30:	e7f7      	b.n	b9b22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9b32:	6820      	ldr	r0, [r4, #0]
   b9b34:	f7fe f822 	bl	b7b7c <free>
}
   b9b38:	4620      	mov	r0, r4
   b9b3a:	bd70      	pop	{r4, r5, r6, pc}

000b9b3c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9b3c:	b510      	push	{r4, lr}
   b9b3e:	4604      	mov	r4, r0
   b9b40:	300c      	adds	r0, #12
   b9b42:	f7ff ffe7 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9b46:	4620      	mov	r0, r4
   b9b48:	f7fe ff01 	bl	b894e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9b4c:	4620      	mov	r0, r4
   b9b4e:	bd10      	pop	{r4, pc}

000b9b50 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9b50:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9b52:	4b04      	ldr	r3, [pc, #16]	; (b9b64 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9b54:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9b56:	f840 3b04 	str.w	r3, [r0], #4
   b9b5a:	f7ff ffef 	bl	b9b3c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9b5e:	4620      	mov	r0, r4
   b9b60:	bd10      	pop	{r4, pc}
   b9b62:	bf00      	nop
   b9b64:	000bec28 	.word	0x000bec28

000b9b68 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9b68:	b510      	push	{r4, lr}
   b9b6a:	4604      	mov	r4, r0
   b9b6c:	f7ff fff0 	bl	b9b50 <_ZN5spark16StreamLogHandlerD1Ev>
   b9b70:	4620      	mov	r0, r4
   b9b72:	2124      	movs	r1, #36	; 0x24
   b9b74:	f7fa fa93 	bl	b409e <_ZdlPvj>
   b9b78:	4620      	mov	r0, r4
   b9b7a:	bd10      	pop	{r4, pc}

000b9b7c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9b7c:	b510      	push	{r4, lr}
   b9b7e:	4b03      	ldr	r3, [pc, #12]	; (b9b8c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9b80:	6003      	str	r3, [r0, #0]
   b9b82:	4604      	mov	r4, r0
   b9b84:	f7ff ffe4 	bl	b9b50 <_ZN5spark16StreamLogHandlerD1Ev>
   b9b88:	4620      	mov	r0, r4
   b9b8a:	bd10      	pop	{r4, pc}
   b9b8c:	000bf008 	.word	0x000bf008

000b9b90 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9b90:	b510      	push	{r4, lr}
   b9b92:	4604      	mov	r4, r0
   b9b94:	f7ff fff2 	bl	b9b7c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9b98:	4620      	mov	r0, r4
   b9b9a:	2124      	movs	r1, #36	; 0x24
   b9b9c:	f7fa fa7f 	bl	b409e <_ZdlPvj>
   b9ba0:	4620      	mov	r0, r4
   b9ba2:	bd10      	pop	{r4, pc}

000b9ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9ba4:	2200      	movs	r2, #0
   b9ba6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9baa:	b510      	push	{r4, lr}
        capacity_(0) {
   b9bac:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9bae:	680c      	ldr	r4, [r1, #0]
   b9bb0:	6004      	str	r4, [r0, #0]
   b9bb2:	684c      	ldr	r4, [r1, #4]
   b9bb4:	6044      	str	r4, [r0, #4]
   b9bb6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bb8:	600a      	str	r2, [r1, #0]
   b9bba:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9bbc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bbe:	608a      	str	r2, [r1, #8]
}
   b9bc0:	bd10      	pop	{r4, pc}

000b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9bc2:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9bc4:	6803      	ldr	r3, [r0, #0]
   b9bc6:	4604      	mov	r4, r0
   b9bc8:	6818      	ldr	r0, [r3, #0]
   b9bca:	f7fd fd49 	bl	b7660 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9bce:	4620      	mov	r0, r4
   b9bd0:	bd10      	pop	{r4, pc}
	...

000b9bd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bd8:	b087      	sub	sp, #28
   b9bda:	4680      	mov	r8, r0
   b9bdc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9bde:	4b1c      	ldr	r3, [pc, #112]	; (b9c50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9be0:	685b      	ldr	r3, [r3, #4]
   b9be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9be6:	4689      	mov	r9, r1
   b9be8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9bea:	b96b      	cbnz	r3, b9c08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9bec:	f7ff fed0 	bl	b9990 <_ZN5spark10LogManager8instanceEv>
   b9bf0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9bf2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9bf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9bf8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9bfa:	f7ff fda3 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9bfe:	7b23      	ldrb	r3, [r4, #12]
   b9c00:	b12b      	cbz	r3, b9c0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9c02:	a805      	add	r0, sp, #20
   b9c04:	f7ff ffdd 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9c08:	b007      	add	sp, #28
   b9c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9c0e:	2301      	movs	r3, #1
   b9c10:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9c12:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9c16:	fa5f f989 	uxtb.w	r9, r9
   b9c1a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9c1e:	45aa      	cmp	sl, r5
   b9c20:	d012      	beq.n	b9c48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9c22:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9c26:	4631      	mov	r1, r6
   b9c28:	1d38      	adds	r0, r7, #4
   b9c2a:	f7ff fe3d 	bl	b98a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9c2e:	4581      	cmp	r9, r0
   b9c30:	d3f5      	bcc.n	b9c1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9c32:	683b      	ldr	r3, [r7, #0]
   b9c34:	9a03      	ldr	r2, [sp, #12]
   b9c36:	9200      	str	r2, [sp, #0]
   b9c38:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9c3c:	464a      	mov	r2, r9
   b9c3e:	4633      	mov	r3, r6
   b9c40:	4641      	mov	r1, r8
   b9c42:	4638      	mov	r0, r7
   b9c44:	47d8      	blx	fp
   b9c46:	e7ea      	b.n	b9c1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9c48:	2300      	movs	r3, #0
   b9c4a:	7323      	strb	r3, [r4, #12]
   b9c4c:	e7d9      	b.n	b9c02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9c4e:	bf00      	nop
   b9c50:	e000ed00 	.word	0xe000ed00

000b9c54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c58:	469b      	mov	fp, r3
   b9c5a:	4b1a      	ldr	r3, [pc, #104]	; (b9cc4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9c5c:	685b      	ldr	r3, [r3, #4]
   b9c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9c62:	4680      	mov	r8, r0
   b9c64:	4689      	mov	r9, r1
   b9c66:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9c68:	b96b      	cbnz	r3, b9c86 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9c6a:	f7ff fe91 	bl	b9990 <_ZN5spark10LogManager8instanceEv>
   b9c6e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9c70:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9c74:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9c76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9c78:	f7ff fd64 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9c7c:	7b23      	ldrb	r3, [r4, #12]
   b9c7e:	b12b      	cbz	r3, b9c8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9c80:	a801      	add	r0, sp, #4
   b9c82:	f7ff ff9e 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9c86:	b003      	add	sp, #12
   b9c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9c8c:	2301      	movs	r3, #1
   b9c8e:	7323      	strb	r3, [r4, #12]
   b9c90:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9c94:	b2f6      	uxtb	r6, r6
   b9c96:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9c9a:	4555      	cmp	r5, sl
   b9c9c:	d00e      	beq.n	b9cbc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9c9e:	f855 7b04 	ldr.w	r7, [r5], #4
   b9ca2:	4659      	mov	r1, fp
   b9ca4:	1d38      	adds	r0, r7, #4
   b9ca6:	f7ff fdff 	bl	b98a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9caa:	4286      	cmp	r6, r0
   b9cac:	d3f5      	bcc.n	b9c9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9cae:	683b      	ldr	r3, [r7, #0]
   b9cb0:	464a      	mov	r2, r9
   b9cb2:	68db      	ldr	r3, [r3, #12]
   b9cb4:	4641      	mov	r1, r8
   b9cb6:	4638      	mov	r0, r7
   b9cb8:	4798      	blx	r3
   b9cba:	e7ee      	b.n	b9c9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9cbc:	2300      	movs	r3, #0
   b9cbe:	7323      	strb	r3, [r4, #12]
   b9cc0:	e7de      	b.n	b9c80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9cc2:	bf00      	nop
   b9cc4:	e000ed00 	.word	0xe000ed00

000b9cc8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9ccc:	4b16      	ldr	r3, [pc, #88]	; (b9d28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9cce:	685b      	ldr	r3, [r3, #4]
   b9cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9cd4:	4605      	mov	r5, r0
   b9cd6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9cd8:	bb1b      	cbnz	r3, b9d22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9cda:	f7ff fe59 	bl	b9990 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9cde:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9ce2:	4604      	mov	r4, r0
   b9ce4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ce6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ce8:	f7ff fd2c 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
   b9cec:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9cf0:	2446      	movs	r4, #70	; 0x46
   b9cf2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9cf6:	45b0      	cmp	r8, r6
   b9cf8:	d109      	bne.n	b9d0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9cfa:	a801      	add	r0, sp, #4
   b9cfc:	f7ff ff61 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9d00:	42a5      	cmp	r5, r4
   b9d02:	bfb4      	ite	lt
   b9d04:	2000      	movlt	r0, #0
   b9d06:	2001      	movge	r0, #1
}
   b9d08:	b002      	add	sp, #8
   b9d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9d0e:	f856 0b04 	ldr.w	r0, [r6], #4
   b9d12:	4639      	mov	r1, r7
   b9d14:	3004      	adds	r0, #4
   b9d16:	f7ff fdc7 	bl	b98a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9d1a:	4284      	cmp	r4, r0
   b9d1c:	bfa8      	it	ge
   b9d1e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9d20:	e7e9      	b.n	b9cf6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9d22:	2000      	movs	r0, #0
   b9d24:	e7f0      	b.n	b9d08 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9d26:	bf00      	nop
   b9d28:	e000ed00 	.word	0xe000ed00

000b9d2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d2e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9d32:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9d34:	4604      	mov	r4, r0
   b9d36:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d38:	db0d      	blt.n	b9d56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9d3a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9d3c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9d3e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9d40:	dd04      	ble.n	b9d4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9d42:	00b9      	lsls	r1, r7, #2
   b9d44:	f7fd ff22 	bl	b7b8c <realloc>
            if (!d) {
   b9d48:	b918      	cbnz	r0, b9d52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9d4c:	f7fd ff16 	bl	b7b7c <free>
        T* d = nullptr;
   b9d50:	2000      	movs	r0, #0
        data_ = d;
   b9d52:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9d54:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9d56:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9d58:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9d5a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9d5e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9d60:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9d64:	1d08      	adds	r0, r1, #4
   b9d66:	f002 fc1f 	bl	bc5a8 <memmove>
    new(p) T(std::move(value));
   b9d6a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9d6e:	6863      	ldr	r3, [r4, #4]
   b9d70:	3301      	adds	r3, #1
   b9d72:	6063      	str	r3, [r4, #4]
    return true;
   b9d74:	2001      	movs	r0, #1
   b9d76:	e7e8      	b.n	b9d4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9d78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9d7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9d7e:	4604      	mov	r4, r0
   b9d80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9d82:	9301      	str	r3, [sp, #4]
   b9d84:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9d86:	f7ff fcdd 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9d8a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9d8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9d92:	4293      	cmp	r3, r2
   b9d94:	4619      	mov	r1, r3
   b9d96:	d00b      	beq.n	b9db0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9d98:	6809      	ldr	r1, [r1, #0]
   b9d9a:	42a9      	cmp	r1, r5
   b9d9c:	f103 0304 	add.w	r3, r3, #4
   b9da0:	d1f7      	bne.n	b9d92 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9da2:	a801      	add	r0, sp, #4
   b9da4:	f7ff ff0d 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9da8:	2500      	movs	r5, #0
}
   b9daa:	4628      	mov	r0, r5
   b9dac:	b003      	add	sp, #12
   b9dae:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9db0:	4629      	mov	r1, r5
   b9db2:	4620      	mov	r0, r4
   b9db4:	f7ff ffba 	bl	b9d2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9db8:	4605      	mov	r5, r0
   b9dba:	2800      	cmp	r0, #0
   b9dbc:	d0f1      	beq.n	b9da2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9dbe:	6863      	ldr	r3, [r4, #4]
   b9dc0:	2b01      	cmp	r3, #1
   b9dc2:	d101      	bne.n	b9dc8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9dc4:	f7ff fe00 	bl	b99c8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9dc8:	a801      	add	r0, sp, #4
   b9dca:	f7ff fefa 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9dce:	e7ec      	b.n	b9daa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9dd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9dd0:	b570      	push	{r4, r5, r6, lr}
   b9dd2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9dd4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9dd8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9dda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9dde:	4282      	cmp	r2, r0
   b9de0:	d00f      	beq.n	b9e02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9de2:	4601      	mov	r1, r0
            if (*p == value) {
   b9de4:	681d      	ldr	r5, [r3, #0]
   b9de6:	f851 6b04 	ldr.w	r6, [r1], #4
   b9dea:	42ae      	cmp	r6, r5
   b9dec:	d107      	bne.n	b9dfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9dee:	1a52      	subs	r2, r2, r1
   b9df0:	f002 fbda 	bl	bc5a8 <memmove>
    --size_;
   b9df4:	6863      	ldr	r3, [r4, #4]
   b9df6:	3b01      	subs	r3, #1
   b9df8:	6063      	str	r3, [r4, #4]
    return true;
   b9dfa:	2001      	movs	r0, #1
}
   b9dfc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9dfe:	4608      	mov	r0, r1
   b9e00:	e7ed      	b.n	b9dde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9e02:	2000      	movs	r0, #0
   b9e04:	e7fa      	b.n	b9dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9e06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9e06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9e08:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9e0c:	4604      	mov	r4, r0
   b9e0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9e10:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9e12:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9e14:	f7ff fc96 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9e18:	a901      	add	r1, sp, #4
   b9e1a:	4620      	mov	r0, r4
   b9e1c:	f7ff ffd8 	bl	b9dd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9e20:	b118      	cbz	r0, b9e2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9e22:	6863      	ldr	r3, [r4, #4]
   b9e24:	b90b      	cbnz	r3, b9e2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9e26:	f7ff fddb 	bl	b99e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9e2a:	a803      	add	r0, sp, #12
   b9e2c:	f7ff fec9 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9e30:	b004      	add	sp, #16
   b9e32:	bd10      	pop	{r4, pc}

000b9e34 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9e34:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9e36:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9e3a:	2318      	movs	r3, #24
   b9e3c:	4604      	mov	r4, r0
   b9e3e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9e42:	42ae      	cmp	r6, r5
   b9e44:	d015      	beq.n	b9e72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9e46:	f105 0110 	add.w	r1, r5, #16
   b9e4a:	4620      	mov	r0, r4
   b9e4c:	f7ff ffc0 	bl	b9dd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9e50:	6863      	ldr	r3, [r4, #4]
   b9e52:	b90b      	cbnz	r3, b9e58 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9e54:	f7ff fdc4 	bl	b99e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9e58:	69e0      	ldr	r0, [r4, #28]
   b9e5a:	6929      	ldr	r1, [r5, #16]
   b9e5c:	6803      	ldr	r3, [r0, #0]
   b9e5e:	68db      	ldr	r3, [r3, #12]
   b9e60:	4798      	blx	r3
        if (h.stream) {
   b9e62:	6969      	ldr	r1, [r5, #20]
   b9e64:	b119      	cbz	r1, b9e6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9e66:	6a20      	ldr	r0, [r4, #32]
   b9e68:	6803      	ldr	r3, [r0, #0]
   b9e6a:	68db      	ldr	r3, [r3, #12]
   b9e6c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9e6e:	3518      	adds	r5, #24
   b9e70:	e7e7      	b.n	b9e42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9e72:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9e76:	2618      	movs	r6, #24
   b9e78:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9e7c:	42ae      	cmp	r6, r5
   b9e7e:	d004      	beq.n	b9e8a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9e80:	4628      	mov	r0, r5
   b9e82:	f7fe f8d1 	bl	b8028 <_ZN6StringD1Ev>
   b9e86:	3518      	adds	r5, #24
   b9e88:	e7f8      	b.n	b9e7c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9e8a:	2300      	movs	r3, #0
   b9e8c:	6163      	str	r3, [r4, #20]
}
   b9e8e:	bd70      	pop	{r4, r5, r6, pc}

000b9e90 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9e92:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9e94:	f7ff fda4 	bl	b99e0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9e98:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9e9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9e9e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ea0:	f7ff fc50 	bl	b9744 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9ea4:	4620      	mov	r0, r4
   b9ea6:	f7ff ffc5 	bl	b9e34 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9eaa:	a801      	add	r0, sp, #4
   b9eac:	f7ff fe89 	bl	b9bc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9eb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9eb2:	b108      	cbz	r0, b9eb8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9eb4:	f7fd fbc4 	bl	b7640 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9eb8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9ebc:	2618      	movs	r6, #24
   b9ebe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9ec2:	42ae      	cmp	r6, r5
   b9ec4:	d004      	beq.n	b9ed0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9ec6:	4628      	mov	r0, r5
   b9ec8:	f7fe f8ae 	bl	b8028 <_ZN6StringD1Ev>
   b9ecc:	3518      	adds	r5, #24
   b9ece:	e7f8      	b.n	b9ec2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9ed0:	6920      	ldr	r0, [r4, #16]
   b9ed2:	f7fd fe53 	bl	b7b7c <free>
   b9ed6:	6820      	ldr	r0, [r4, #0]
   b9ed8:	f7fd fe50 	bl	b7b7c <free>
}
   b9edc:	4620      	mov	r0, r4
   b9ede:	b002      	add	sp, #8
   b9ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9ee4 <__tcf_2>:
    static LogManager mgr;
   b9ee4:	4801      	ldr	r0, [pc, #4]	; (b9eec <__tcf_2+0x8>)
   b9ee6:	f7ff bfd3 	b.w	b9e90 <_ZN5spark10LogManagerD1Ev>
   b9eea:	bf00      	nop
   b9eec:	2003e658 	.word	0x2003e658

000b9ef0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9ef0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9ef4:	4604      	mov	r4, r0
   b9ef6:	460d      	mov	r5, r1
   b9ef8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9efa:	d915      	bls.n	b9f28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9efc:	4290      	cmp	r0, r2
   b9efe:	d214      	bcs.n	b9f2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9f00:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9f04:	1a75      	subs	r5, r6, r1
   b9f06:	f1a1 0714 	sub.w	r7, r1, #20
   b9f0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9f0c:	42b7      	cmp	r7, r6
   b9f0e:	d01a      	beq.n	b9f46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9f10:	b11c      	cbz	r4, b9f1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9f12:	4631      	mov	r1, r6
   b9f14:	4620      	mov	r0, r4
   b9f16:	f7ff fc78 	bl	b980a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9f1a:	f106 0008 	add.w	r0, r6, #8
   b9f1e:	f7ff fdf9 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9f22:	3e14      	subs	r6, #20
   b9f24:	3c14      	subs	r4, #20
   b9f26:	e7f1      	b.n	b9f0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9f28:	d00d      	beq.n	b9f46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9f2a:	42b5      	cmp	r5, r6
   b9f2c:	d00b      	beq.n	b9f46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9f2e:	b11c      	cbz	r4, b9f38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9f30:	4629      	mov	r1, r5
   b9f32:	4620      	mov	r0, r4
   b9f34:	f7ff fc69 	bl	b980a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9f38:	f105 0008 	add.w	r0, r5, #8
   b9f3c:	f7ff fdea 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9f40:	3514      	adds	r5, #20
   b9f42:	3414      	adds	r4, #20
   b9f44:	e7f1      	b.n	b9f2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9f48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f4c:	4604      	mov	r4, r0
   b9f4e:	460d      	mov	r5, r1
   b9f50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9f52:	d914      	bls.n	b9f7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9f54:	4290      	cmp	r0, r2
   b9f56:	d213      	bcs.n	b9f80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9f58:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9f5c:	1a75      	subs	r5, r6, r1
   b9f5e:	f1a1 0710 	sub.w	r7, r1, #16
   b9f62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9f64:	42b7      	cmp	r7, r6
   b9f66:	d018      	beq.n	b9f9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9f68:	b11c      	cbz	r4, b9f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9f6a:	4631      	mov	r1, r6
   b9f6c:	4620      	mov	r0, r4
   b9f6e:	f7fe f8d7 	bl	b8120 <_ZN6StringC1EOS_>
                end->~T();
   b9f72:	4630      	mov	r0, r6
   b9f74:	f7fe f858 	bl	b8028 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9f78:	3e10      	subs	r6, #16
   b9f7a:	3c10      	subs	r4, #16
   b9f7c:	e7f2      	b.n	b9f64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9f7e:	d00c      	beq.n	b9f9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9f80:	42b5      	cmp	r5, r6
   b9f82:	d00a      	beq.n	b9f9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9f84:	b11c      	cbz	r4, b9f8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9f86:	4629      	mov	r1, r5
   b9f88:	4620      	mov	r0, r4
   b9f8a:	f7fe f8c9 	bl	b8120 <_ZN6StringC1EOS_>
                p->~T();
   b9f8e:	4628      	mov	r0, r5
   b9f90:	f7fe f84a 	bl	b8028 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9f94:	3510      	adds	r5, #16
   b9f96:	3410      	adds	r4, #16
   b9f98:	e7f2      	b.n	b9f80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9f9c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9f9e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9fa0:	4605      	mov	r5, r0
        if (n > 0) {
   b9fa2:	dd11      	ble.n	b9fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9fa4:	0130      	lsls	r0, r6, #4
   b9fa6:	f7fd fde1 	bl	b7b6c <malloc>
            if (!d) {
   b9faa:	4604      	mov	r4, r0
   b9fac:	b158      	cbz	r0, b9fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9fae:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9fb2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9fb6:	f7ff ffc7 	bl	b9f48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9fba:	6828      	ldr	r0, [r5, #0]
   b9fbc:	f7fd fdde 	bl	b7b7c <free>
        data_ = d;
   b9fc0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9fc2:	60ae      	str	r6, [r5, #8]
        return true;
   b9fc4:	2001      	movs	r0, #1
    }
   b9fc6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9fc8:	2400      	movs	r4, #0
   b9fca:	e7f6      	b.n	b9fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9fcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9fd0:	4690      	mov	r8, r2
   b9fd2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9fd4:	2300      	movs	r3, #0
   b9fd6:	9103      	str	r1, [sp, #12]
    return size_;
   b9fd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9fdc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9fde:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9fe0:	4299      	cmp	r1, r3
        capacity_(0) {
   b9fe2:	e9c0 3300 	strd	r3, r3, [r0]
   b9fe6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9fee:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9ff2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9ff4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9ff6:	dc23      	bgt.n	ba040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9ff8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9ffc:	2314      	movs	r3, #20
   b9ffe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba002:	42af      	cmp	r7, r5
   ba004:	d03b      	beq.n	ba07e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba006:	4629      	mov	r1, r5
   ba008:	a80b      	add	r0, sp, #44	; 0x2c
   ba00a:	f7fe f889 	bl	b8120 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba00e:	a90b      	add	r1, sp, #44	; 0x2c
   ba010:	a80f      	add	r0, sp, #60	; 0x3c
   ba012:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba014:	f7fe f884 	bl	b8120 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba018:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba01c:	4299      	cmp	r1, r3
   ba01e:	da1b      	bge.n	ba058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba020:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba022:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba024:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba028:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba02c:	4631      	mov	r1, r6
   ba02e:	f106 0010 	add.w	r0, r6, #16
   ba032:	f7ff ff89 	bl	b9f48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba036:	b9ee      	cbnz	r6, ba074 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba038:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba03a:	3301      	adds	r3, #1
   ba03c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba03e:	e011      	b.n	ba064 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba040:	a808      	add	r0, sp, #32
   ba042:	f7ff ffab 	bl	b9f9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba046:	2800      	cmp	r0, #0
   ba048:	d1d6      	bne.n	b9ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba04a:	a808      	add	r0, sp, #32
   ba04c:	f7fe fc7f 	bl	b894e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba050:	4620      	mov	r0, r4
   ba052:	b015      	add	sp, #84	; 0x54
   ba054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba058:	3101      	adds	r1, #1
   ba05a:	a808      	add	r0, sp, #32
   ba05c:	f7ff ff9e 	bl	b9f9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba060:	2800      	cmp	r0, #0
   ba062:	d1dd      	bne.n	ba020 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba064:	a80f      	add	r0, sp, #60	; 0x3c
   ba066:	f7fd ffdf 	bl	b8028 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba06a:	a80b      	add	r0, sp, #44	; 0x2c
   ba06c:	f7fd ffdc 	bl	b8028 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba070:	3514      	adds	r5, #20
   ba072:	e7c6      	b.n	ba002 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba074:	a90f      	add	r1, sp, #60	; 0x3c
   ba076:	4630      	mov	r0, r6
   ba078:	f7fe f852 	bl	b8120 <_ZN6StringC1EOS_>
   ba07c:	e7dc      	b.n	ba038 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba07e:	2600      	movs	r6, #0
   ba080:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba084:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba086:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba08a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba08e:	429e      	cmp	r6, r3
   ba090:	da7c      	bge.n	ba18c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba092:	0133      	lsls	r3, r6, #4
   ba094:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba096:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba098:	b90b      	cbnz	r3, ba09e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba09a:	3601      	adds	r6, #1
   ba09c:	e7f5      	b.n	ba08a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba09e:	2300      	movs	r3, #0
   ba0a0:	9307      	str	r3, [sp, #28]
   ba0a2:	fb09 f306 	mul.w	r3, r9, r6
   ba0a6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba0a8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba0aa:	a907      	add	r1, sp, #28
   ba0ac:	a806      	add	r0, sp, #24
   ba0ae:	f7ff fb22 	bl	b96f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba0b2:	4682      	mov	sl, r0
   ba0b4:	2800      	cmp	r0, #0
   ba0b6:	d0f0      	beq.n	ba09a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba0b8:	f04f 0300 	mov.w	r3, #0
   ba0bc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0c0:	4601      	mov	r1, r0
   ba0c2:	9a07      	ldr	r2, [sp, #28]
   ba0c4:	f10d 0317 	add.w	r3, sp, #23
   ba0c8:	4628      	mov	r0, r5
   ba0ca:	f7ff fbb1 	bl	b9830 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba0ce:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0d2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba0d4:	2f00      	cmp	r7, #0
   ba0d6:	d14a      	bne.n	ba16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba0d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba0dc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba0e0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba0e8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba0ec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba0f0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba0f2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba0f6:	4293      	cmp	r3, r2
   ba0f8:	db17      	blt.n	ba12a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba0fa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba0fe:	f1ba 0f00 	cmp.w	sl, #0
   ba102:	dd30      	ble.n	ba166 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba104:	fb09 f00a 	mul.w	r0, r9, sl
   ba108:	f7fd fd30 	bl	b7b6c <malloc>
            if (!d) {
   ba10c:	4683      	mov	fp, r0
   ba10e:	b360      	cbz	r0, ba16a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba110:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba114:	fb09 1202 	mla	r2, r9, r2, r1
   ba118:	f7ff feea 	bl	b9ef0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba11c:	6828      	ldr	r0, [r5, #0]
   ba11e:	f7fd fd2d 	bl	b7b7c <free>
        data_ = d;
   ba122:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba126:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba12a:	682b      	ldr	r3, [r5, #0]
   ba12c:	9a01      	ldr	r2, [sp, #4]
   ba12e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba132:	686a      	ldr	r2, [r5, #4]
   ba134:	4651      	mov	r1, sl
   ba136:	fb09 3202 	mla	r2, r9, r2, r3
   ba13a:	f10a 0014 	add.w	r0, sl, #20
   ba13e:	f7ff fed7 	bl	b9ef0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba142:	f1ba 0f00 	cmp.w	sl, #0
   ba146:	d003      	beq.n	ba150 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba148:	a90f      	add	r1, sp, #60	; 0x3c
   ba14a:	4650      	mov	r0, sl
   ba14c:	f7ff fb5d 	bl	b980a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba150:	686b      	ldr	r3, [r5, #4]
   ba152:	3301      	adds	r3, #1
   ba154:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba156:	a811      	add	r0, sp, #68	; 0x44
   ba158:	f7ff fcdc 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba15c:	b13f      	cbz	r7, ba16e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba15e:	a80b      	add	r0, sp, #44	; 0x2c
   ba160:	f7ff fcd8 	bl	b9b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba164:	e771      	b.n	ba04a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba166:	46bb      	mov	fp, r7
   ba168:	e7d8      	b.n	ba11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba16a:	2701      	movs	r7, #1
   ba16c:	e7f3      	b.n	ba156 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba16e:	9b01      	ldr	r3, [sp, #4]
   ba170:	682d      	ldr	r5, [r5, #0]
   ba172:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba176:	9b06      	ldr	r3, [sp, #24]
   ba178:	781b      	ldrb	r3, [r3, #0]
   ba17a:	b92b      	cbnz	r3, ba188 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba17c:	f8d8 3000 	ldr.w	r3, [r8]
   ba180:	9a02      	ldr	r2, [sp, #8]
   ba182:	4413      	add	r3, r2
   ba184:	7c1b      	ldrb	r3, [r3, #16]
   ba186:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba188:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba18a:	e78e      	b.n	ba0aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba18c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba18e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba190:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba192:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba194:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba196:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba19a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba19c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba19e:	60a2      	str	r2, [r4, #8]
   ba1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba1a2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1a4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba1a6:	60e2      	str	r2, [r4, #12]
   ba1a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba1aa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1ac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba1ae:	6122      	str	r2, [r4, #16]
   ba1b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba1b2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba1b4:	9b03      	ldr	r3, [sp, #12]
   ba1b6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba1b8:	6162      	str	r2, [r4, #20]
   ba1ba:	7623      	strb	r3, [r4, #24]
   ba1bc:	e7cf      	b.n	ba15e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba1c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba1c2:	4604      	mov	r4, r0
   ba1c4:	b087      	sub	sp, #28
   ba1c6:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba1c8:	4626      	mov	r6, r4
        stream_(&stream) {
   ba1ca:	4619      	mov	r1, r3
   ba1cc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba1ce:	4617      	mov	r7, r2
        stream_(&stream) {
   ba1d0:	f7fb fb3a 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba1d4:	4b0b      	ldr	r3, [pc, #44]	; (ba204 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba1d6:	f846 3b04 	str.w	r3, [r6], #4
   ba1da:	4669      	mov	r1, sp
   ba1dc:	a803      	add	r0, sp, #12
   ba1de:	f7fb fb33 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba1e2:	aa03      	add	r2, sp, #12
   ba1e4:	4639      	mov	r1, r7
   ba1e6:	4630      	mov	r0, r6
   ba1e8:	f7ff fef0 	bl	b9fcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba1ec:	a803      	add	r0, sp, #12
   ba1ee:	f7fb f8e5 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba1f2:	4668      	mov	r0, sp
   ba1f4:	f7fb f8e2 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba1f8:	4b03      	ldr	r3, [pc, #12]	; (ba208 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba1fa:	6023      	str	r3, [r4, #0]
}
   ba1fc:	4620      	mov	r0, r4
        stream_(&stream) {
   ba1fe:	6225      	str	r5, [r4, #32]
}
   ba200:	b007      	add	sp, #28
   ba202:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba204:	000bec28 	.word	0x000bec28
   ba208:	000beff0 	.word	0x000beff0

000ba20c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba20c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba20e:	460f      	mov	r7, r1
   ba210:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba212:	491d      	ldr	r1, [pc, #116]	; (ba288 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba216:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba218:	4616      	mov	r6, r2
   ba21a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba21c:	f002 fa3a 	bl	bc694 <strcmp>
   ba220:	b9c0      	cbnz	r0, ba254 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba222:	b1a4      	cbz	r4, ba24e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba224:	4629      	mov	r1, r5
   ba226:	a801      	add	r0, sp, #4
   ba228:	f7ff fcbc 	bl	b9ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba22c:	4917      	ldr	r1, [pc, #92]	; (ba28c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba22e:	2024      	movs	r0, #36	; 0x24
   ba230:	f001 fb88 	bl	bb944 <_ZnwjRKSt9nothrow_t>
   ba234:	4605      	mov	r5, r0
   ba236:	b130      	cbz	r0, ba246 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba238:	ab01      	add	r3, sp, #4
   ba23a:	4632      	mov	r2, r6
   ba23c:	4621      	mov	r1, r4
   ba23e:	f7ff ffbf 	bl	ba1c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba242:	4b13      	ldr	r3, [pc, #76]	; (ba290 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba244:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba246:	a801      	add	r0, sp, #4
   ba248:	f7fb f8b8 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba24c:	462c      	mov	r4, r5
}
   ba24e:	4620      	mov	r0, r4
   ba250:	b005      	add	sp, #20
   ba252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba254:	490f      	ldr	r1, [pc, #60]	; (ba294 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba256:	4638      	mov	r0, r7
   ba258:	f002 fa1c 	bl	bc694 <strcmp>
   ba25c:	b990      	cbnz	r0, ba284 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba25e:	2c00      	cmp	r4, #0
   ba260:	d0f5      	beq.n	ba24e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba262:	4629      	mov	r1, r5
   ba264:	a801      	add	r0, sp, #4
   ba266:	f7ff fc9d 	bl	b9ba4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba26a:	4908      	ldr	r1, [pc, #32]	; (ba28c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba26c:	2024      	movs	r0, #36	; 0x24
   ba26e:	f001 fb69 	bl	bb944 <_ZnwjRKSt9nothrow_t>
   ba272:	4605      	mov	r5, r0
   ba274:	2800      	cmp	r0, #0
   ba276:	d0e6      	beq.n	ba246 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba278:	ab01      	add	r3, sp, #4
   ba27a:	4632      	mov	r2, r6
   ba27c:	4621      	mov	r1, r4
   ba27e:	f7ff ff9f 	bl	ba1c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba282:	e7e0      	b.n	ba246 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba284:	2400      	movs	r4, #0
   ba286:	e7e2      	b.n	ba24e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba288:	000bef72 	.word	0x000bef72
   ba28c:	000bf19d 	.word	0x000bf19d
   ba290:	000bf008 	.word	0x000bf008
   ba294:	000bef76 	.word	0x000bef76

000ba298 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba298:	4b01      	ldr	r3, [pc, #4]	; (ba2a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba29a:	4a02      	ldr	r2, [pc, #8]	; (ba2a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba29c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba29e:	4770      	bx	lr
   ba2a0:	2003e654 	.word	0x2003e654
   ba2a4:	000bef87 	.word	0x000bef87

000ba2a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba2ac:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba2ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba2b2:	4604      	mov	r4, r0
   ba2b4:	460e      	mov	r6, r1
   ba2b6:	4617      	mov	r7, r2
   ba2b8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba2ba:	f000 fe6f 	bl	baf9c <_Z16_fetch_usbserialv>
   ba2be:	4581      	cmp	r9, r0
   ba2c0:	d04c      	beq.n	ba35c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba2c2:	792b      	ldrb	r3, [r5, #4]
   ba2c4:	0719      	lsls	r1, r3, #28
   ba2c6:	d504      	bpl.n	ba2d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba2c8:	696a      	ldr	r2, [r5, #20]
   ba2ca:	4954      	ldr	r1, [pc, #336]	; (ba41c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba2cc:	4620      	mov	r0, r4
   ba2ce:	f7ff fa8d 	bl	b97ec <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba2d2:	f1b8 0f00 	cmp.w	r8, #0
   ba2d6:	d00d      	beq.n	ba2f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba2d8:	215b      	movs	r1, #91	; 0x5b
   ba2da:	4620      	mov	r0, r4
   ba2dc:	f7ff fa7a 	bl	b97d4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba2e0:	4641      	mov	r1, r8
   ba2e2:	4620      	mov	r0, r4
   ba2e4:	f7ff fa67 	bl	b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba2e8:	6823      	ldr	r3, [r4, #0]
   ba2ea:	494d      	ldr	r1, [pc, #308]	; (ba420 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba2ec:	68db      	ldr	r3, [r3, #12]
   ba2ee:	2202      	movs	r2, #2
   ba2f0:	4620      	mov	r0, r4
   ba2f2:	4798      	blx	r3
    if (attr.has_file) {
   ba2f4:	792b      	ldrb	r3, [r5, #4]
   ba2f6:	07da      	lsls	r2, r3, #31
   ba2f8:	d523      	bpl.n	ba342 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba2fa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba2fe:	212f      	movs	r1, #47	; 0x2f
   ba300:	4640      	mov	r0, r8
   ba302:	f002 fa31 	bl	bc768 <strrchr>
    if (s1) {
   ba306:	b108      	cbz	r0, ba30c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba308:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba30c:	4641      	mov	r1, r8
   ba30e:	4620      	mov	r0, r4
   ba310:	f7ff fa51 	bl	b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba314:	792b      	ldrb	r3, [r5, #4]
   ba316:	079b      	lsls	r3, r3, #30
   ba318:	d508      	bpl.n	ba32c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba31a:	213a      	movs	r1, #58	; 0x3a
   ba31c:	4620      	mov	r0, r4
   ba31e:	f7ff fa59 	bl	b97d4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba322:	68ea      	ldr	r2, [r5, #12]
   ba324:	493f      	ldr	r1, [pc, #252]	; (ba424 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba326:	4620      	mov	r0, r4
   ba328:	f7ff fa60 	bl	b97ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba32c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba32e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba330:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba334:	68db      	ldr	r3, [r3, #12]
   ba336:	bf14      	ite	ne
   ba338:	493b      	ldrne	r1, [pc, #236]	; (ba428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba33a:	493c      	ldreq	r1, [pc, #240]	; (ba42c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba33c:	2202      	movs	r2, #2
            write(": ", 2);
   ba33e:	4620      	mov	r0, r4
   ba340:	4798      	blx	r3
    if (attr.has_function) {
   ba342:	792b      	ldrb	r3, [r5, #4]
   ba344:	0758      	lsls	r0, r3, #29
   ba346:	d51d      	bpl.n	ba384 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba348:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba34a:	460b      	mov	r3, r1
   ba34c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba34e:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba352:	b160      	cbz	r0, ba36e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba354:	2820      	cmp	r0, #32
   ba356:	d108      	bne.n	ba36a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba358:	4619      	mov	r1, r3
   ba35a:	e7f7      	b.n	ba34c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba35c:	4834      	ldr	r0, [pc, #208]	; (ba430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba35e:	f000 ffb9 	bl	bb2d4 <_ZN5spark12NetworkClass9listeningEv>
   ba362:	2800      	cmp	r0, #0
   ba364:	d0ad      	beq.n	ba2c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba36a:	2828      	cmp	r0, #40	; 0x28
   ba36c:	d1ee      	bne.n	ba34c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba36e:	6823      	ldr	r3, [r4, #0]
   ba370:	1a52      	subs	r2, r2, r1
   ba372:	68db      	ldr	r3, [r3, #12]
   ba374:	4620      	mov	r0, r4
   ba376:	4798      	blx	r3
        write("(): ", 4);
   ba378:	6823      	ldr	r3, [r4, #0]
   ba37a:	492e      	ldr	r1, [pc, #184]	; (ba434 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba37c:	68db      	ldr	r3, [r3, #12]
   ba37e:	2204      	movs	r2, #4
   ba380:	4620      	mov	r0, r4
   ba382:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba384:	2100      	movs	r1, #0
   ba386:	4638      	mov	r0, r7
   ba388:	f7fd fafa 	bl	b7980 <log_level_name>
   ba38c:	4601      	mov	r1, r0
    write(s);
   ba38e:	4620      	mov	r0, r4
   ba390:	f7ff fa11 	bl	b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba394:	6823      	ldr	r3, [r4, #0]
   ba396:	4925      	ldr	r1, [pc, #148]	; (ba42c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba398:	68db      	ldr	r3, [r3, #12]
   ba39a:	2202      	movs	r2, #2
   ba39c:	4620      	mov	r0, r4
   ba39e:	4798      	blx	r3
    if (msg) {
   ba3a0:	b11e      	cbz	r6, ba3aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba3a2:	4631      	mov	r1, r6
   ba3a4:	4620      	mov	r0, r4
   ba3a6:	f7ff fa06 	bl	b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba3aa:	792b      	ldrb	r3, [r5, #4]
   ba3ac:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba3b0:	d02c      	beq.n	ba40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba3b2:	6823      	ldr	r3, [r4, #0]
   ba3b4:	4920      	ldr	r1, [pc, #128]	; (ba438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba3b6:	68db      	ldr	r3, [r3, #12]
   ba3b8:	2202      	movs	r2, #2
   ba3ba:	4620      	mov	r0, r4
   ba3bc:	4798      	blx	r3
        if (attr.has_code) {
   ba3be:	792b      	ldrb	r3, [r5, #4]
   ba3c0:	06d9      	lsls	r1, r3, #27
   ba3c2:	d50a      	bpl.n	ba3da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba3c4:	6823      	ldr	r3, [r4, #0]
   ba3c6:	491d      	ldr	r1, [pc, #116]	; (ba43c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba3c8:	68db      	ldr	r3, [r3, #12]
   ba3ca:	2207      	movs	r2, #7
   ba3cc:	4620      	mov	r0, r4
   ba3ce:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba3d0:	69aa      	ldr	r2, [r5, #24]
   ba3d2:	491b      	ldr	r1, [pc, #108]	; (ba440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba3d4:	4620      	mov	r0, r4
   ba3d6:	f7ff fa09 	bl	b97ec <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba3da:	792b      	ldrb	r3, [r5, #4]
   ba3dc:	069a      	lsls	r2, r3, #26
   ba3de:	d511      	bpl.n	ba404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba3e0:	06db      	lsls	r3, r3, #27
   ba3e2:	d505      	bpl.n	ba3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba3e4:	6823      	ldr	r3, [r4, #0]
   ba3e6:	4910      	ldr	r1, [pc, #64]	; (ba428 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba3e8:	68db      	ldr	r3, [r3, #12]
   ba3ea:	2202      	movs	r2, #2
   ba3ec:	4620      	mov	r0, r4
   ba3ee:	4798      	blx	r3
            write("details = ", 10);
   ba3f0:	6823      	ldr	r3, [r4, #0]
   ba3f2:	4914      	ldr	r1, [pc, #80]	; (ba444 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba3f4:	68db      	ldr	r3, [r3, #12]
   ba3f6:	4620      	mov	r0, r4
   ba3f8:	220a      	movs	r2, #10
   ba3fa:	4798      	blx	r3
            write(attr.details);
   ba3fc:	69e9      	ldr	r1, [r5, #28]
   ba3fe:	4620      	mov	r0, r4
   ba400:	f7ff f9d9 	bl	b97b6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba404:	215d      	movs	r1, #93	; 0x5d
   ba406:	4620      	mov	r0, r4
   ba408:	f7ff f9e4 	bl	b97d4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba40c:	6823      	ldr	r3, [r4, #0]
   ba40e:	490e      	ldr	r1, [pc, #56]	; (ba448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba410:	68db      	ldr	r3, [r3, #12]
   ba412:	4620      	mov	r0, r4
   ba414:	2202      	movs	r2, #2
}
   ba416:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba41a:	4718      	bx	r3
   ba41c:	000bef8b 	.word	0x000bef8b
   ba420:	000bef92 	.word	0x000bef92
   ba424:	000be864 	.word	0x000be864
   ba428:	000bef95 	.word	0x000bef95
   ba42c:	000bef9a 	.word	0x000bef9a
   ba430:	2003e720 	.word	0x2003e720
   ba434:	000bef98 	.word	0x000bef98
   ba438:	000bef9d 	.word	0x000bef9d
   ba43c:	000befa0 	.word	0x000befa0
   ba440:	000befa8 	.word	0x000befa8
   ba444:	000befab 	.word	0x000befab
   ba448:	000befb6 	.word	0x000befb6

000ba44c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba450:	b085      	sub	sp, #20
    return stream_;
   ba452:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba456:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba458:	4605      	mov	r5, r0
   ba45a:	460f      	mov	r7, r1
   ba45c:	4690      	mov	r8, r2
   ba45e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba460:	f000 fd9c 	bl	baf9c <_Z16_fetch_usbserialv>
   ba464:	4581      	cmp	r9, r0
   ba466:	d105      	bne.n	ba474 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba468:	4849      	ldr	r0, [pc, #292]	; (ba590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba46a:	f000 ff33 	bl	bb2d4 <_ZN5spark12NetworkClass9listeningEv>
   ba46e:	2800      	cmp	r0, #0
   ba470:	f040 808a 	bne.w	ba588 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba474:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba476:	4a47      	ldr	r2, [pc, #284]	; (ba594 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba478:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba47a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba47e:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba480:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba482:	f88d 9008 	strb.w	r9, [sp, #8]
   ba486:	f001 f8ca 	bl	bb61e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba48a:	4649      	mov	r1, r9
   ba48c:	4640      	mov	r0, r8
   ba48e:	f7fd fa77 	bl	b7980 <log_level_name>
    json.name("l", 1).value(s);
   ba492:	4941      	ldr	r1, [pc, #260]	; (ba598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba494:	4680      	mov	r8, r0
   ba496:	2201      	movs	r2, #1
   ba498:	a801      	add	r0, sp, #4
   ba49a:	f001 f94f 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba49e:	4641      	mov	r1, r8
   ba4a0:	f7ff f97b 	bl	b979a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba4a4:	b13f      	cbz	r7, ba4b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba4a6:	493d      	ldr	r1, [pc, #244]	; (ba59c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba4a8:	2201      	movs	r2, #1
   ba4aa:	a801      	add	r0, sp, #4
   ba4ac:	f001 f946 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba4b0:	4639      	mov	r1, r7
   ba4b2:	f7ff f972 	bl	b979a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba4b6:	b13e      	cbz	r6, ba4c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba4b8:	4939      	ldr	r1, [pc, #228]	; (ba5a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba4ba:	2201      	movs	r2, #1
   ba4bc:	a801      	add	r0, sp, #4
   ba4be:	f001 f93d 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba4c2:	4631      	mov	r1, r6
   ba4c4:	f7ff f969 	bl	b979a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba4c8:	7923      	ldrb	r3, [r4, #4]
   ba4ca:	07df      	lsls	r7, r3, #31
   ba4cc:	d50e      	bpl.n	ba4ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba4ce:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba4d0:	212f      	movs	r1, #47	; 0x2f
   ba4d2:	4630      	mov	r0, r6
   ba4d4:	f002 f948 	bl	bc768 <strrchr>
    if (s1) {
   ba4d8:	b100      	cbz	r0, ba4dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba4da:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba4dc:	4931      	ldr	r1, [pc, #196]	; (ba5a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba4de:	2201      	movs	r2, #1
   ba4e0:	a801      	add	r0, sp, #4
   ba4e2:	f001 f92b 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba4e6:	4631      	mov	r1, r6
   ba4e8:	f7ff f957 	bl	b979a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba4ec:	7923      	ldrb	r3, [r4, #4]
   ba4ee:	079e      	lsls	r6, r3, #30
   ba4f0:	d507      	bpl.n	ba502 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba4f2:	492d      	ldr	r1, [pc, #180]	; (ba5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba4f4:	2202      	movs	r2, #2
   ba4f6:	a801      	add	r0, sp, #4
   ba4f8:	f001 f920 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba4fc:	68e1      	ldr	r1, [r4, #12]
   ba4fe:	f001 f89b 	bl	bb638 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba502:	7923      	ldrb	r3, [r4, #4]
   ba504:	0758      	lsls	r0, r3, #29
   ba506:	d514      	bpl.n	ba532 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba508:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba50a:	4633      	mov	r3, r6
   ba50c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba50e:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba512:	b12a      	cbz	r2, ba520 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba514:	2a20      	cmp	r2, #32
   ba516:	d101      	bne.n	ba51c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba518:	461e      	mov	r6, r3
   ba51a:	e7f7      	b.n	ba50c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba51c:	2a28      	cmp	r2, #40	; 0x28
   ba51e:	d1f5      	bne.n	ba50c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba520:	4922      	ldr	r1, [pc, #136]	; (ba5ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba522:	2202      	movs	r2, #2
   ba524:	a801      	add	r0, sp, #4
   ba526:	f001 f909 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba52a:	1bba      	subs	r2, r7, r6
   ba52c:	4631      	mov	r1, r6
   ba52e:	f001 f915 	bl	bb75c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba532:	7923      	ldrb	r3, [r4, #4]
   ba534:	0719      	lsls	r1, r3, #28
   ba536:	d507      	bpl.n	ba548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba538:	491d      	ldr	r1, [pc, #116]	; (ba5b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba53a:	2201      	movs	r2, #1
   ba53c:	a801      	add	r0, sp, #4
   ba53e:	f001 f8fd 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba542:	6961      	ldr	r1, [r4, #20]
   ba544:	f001 f88a 	bl	bb65c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba548:	7923      	ldrb	r3, [r4, #4]
   ba54a:	06da      	lsls	r2, r3, #27
   ba54c:	d508      	bpl.n	ba560 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba54e:	2204      	movs	r2, #4
   ba550:	4918      	ldr	r1, [pc, #96]	; (ba5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba552:	eb0d 0002 	add.w	r0, sp, r2
   ba556:	f001 f8f1 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba55a:	69a1      	ldr	r1, [r4, #24]
   ba55c:	f001 f86c 	bl	bb638 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba560:	7923      	ldrb	r3, [r4, #4]
   ba562:	069b      	lsls	r3, r3, #26
   ba564:	d507      	bpl.n	ba576 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba566:	4914      	ldr	r1, [pc, #80]	; (ba5b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba568:	2206      	movs	r2, #6
   ba56a:	a801      	add	r0, sp, #4
   ba56c:	f001 f8e6 	bl	bb73c <_ZN5spark10JSONWriter4nameEPKcj>
   ba570:	69e1      	ldr	r1, [r4, #28]
   ba572:	f7ff f912 	bl	b979a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba576:	a801      	add	r0, sp, #4
   ba578:	f001 f83b 	bl	bb5f2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba57c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba57e:	490f      	ldr	r1, [pc, #60]	; (ba5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba580:	6803      	ldr	r3, [r0, #0]
   ba582:	2202      	movs	r2, #2
   ba584:	68db      	ldr	r3, [r3, #12]
   ba586:	4798      	blx	r3
}
   ba588:	b005      	add	sp, #20
   ba58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba58e:	bf00      	nop
   ba590:	2003e720 	.word	0x2003e720
   ba594:	000befd8 	.word	0x000befd8
   ba598:	000bef68 	.word	0x000bef68
   ba59c:	000befb9 	.word	0x000befb9
   ba5a0:	000bf5b0 	.word	0x000bf5b0
   ba5a4:	000be9a8 	.word	0x000be9a8
   ba5a8:	000befbb 	.word	0x000befbb
   ba5ac:	000befbe 	.word	0x000befbe
   ba5b0:	000beaef 	.word	0x000beaef
   ba5b4:	000befc1 	.word	0x000befc1
   ba5b8:	000befc6 	.word	0x000befc6
   ba5bc:	000befb6 	.word	0x000befb6

000ba5c0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba5c4:	4a15      	ldr	r2, [pc, #84]	; (ba61c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba5c6:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba628 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba5ca:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba5ce:	1980      	adds	r0, r0, r6
   ba5d0:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba5d4:	4b12      	ldr	r3, [pc, #72]	; (ba620 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba5d6:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba5da:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba5de:	1986      	adds	r6, r0, r6
   ba5e0:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba5e4:	42bb      	cmp	r3, r7
   ba5e6:	bf08      	it	eq
   ba5e8:	42b2      	cmpeq	r2, r6
{
   ba5ea:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba5ec:	d013      	beq.n	ba616 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba5ee:	a903      	add	r1, sp, #12
   ba5f0:	4668      	mov	r0, sp
   ba5f2:	e9cd 6700 	strd	r6, r7, [sp]
   ba5f6:	f7fd fb11 	bl	b7c1c <localtime_r>
	calendar_time.tm_year += 1900;
   ba5fa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba5fc:	4d09      	ldr	r5, [pc, #36]	; (ba624 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba5fe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba602:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba604:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba60a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba60c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba60e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba612:	6823      	ldr	r3, [r4, #0]
   ba614:	602b      	str	r3, [r5, #0]
    }
}
   ba616:	b00c      	add	sp, #48	; 0x30
   ba618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba61c:	2003e6b0 	.word	0x2003e6b0
   ba620:	2003e6a8 	.word	0x2003e6a8
   ba624:	2003e684 	.word	0x2003e684
   ba628:	2003e6b8 	.word	0x2003e6b8

000ba62c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   ba62c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba62e:	2000      	movs	r0, #0
   ba630:	f7fd fa8c 	bl	b7b4c <spark_sync_time_pending>
   ba634:	b128      	cbz	r0, ba642 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba636:	f7fd fa71 	bl	b7b1c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba63a:	f080 0001 	eor.w	r0, r0, #1
   ba63e:	b2c0      	uxtb	r0, r0
    }
   ba640:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba642:	2001      	movs	r0, #1
   ba644:	e7fc      	b.n	ba640 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba648 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   ba648:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   ba64a:	f7ff ffb9 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   ba64e:	4b02      	ldr	r3, [pc, #8]	; (ba658 <_ZN9TimeClass5monthEx+0x10>)
   ba650:	6918      	ldr	r0, [r3, #16]
}
   ba652:	3001      	adds	r0, #1
   ba654:	bd08      	pop	{r3, pc}
   ba656:	bf00      	nop
   ba658:	2003e684 	.word	0x2003e684

000ba65c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   ba65c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba65e:	2000      	movs	r0, #0
   ba660:	f7fc ff24 	bl	b74ac <hal_rtc_time_is_valid>
    if (rtcstate)
   ba664:	4604      	mov	r4, r0
   ba666:	b9a0      	cbnz	r0, ba692 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba668:	f7fd f9a4 	bl	b79b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba66c:	2801      	cmp	r0, #1
   ba66e:	d110      	bne.n	ba692 <_ZN9TimeClass7isValidEv+0x36>
   ba670:	4620      	mov	r0, r4
   ba672:	f7fd f9c7 	bl	b7a04 <system_thread_get_state>
   ba676:	b960      	cbnz	r0, ba692 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba678:	f7ff ffd8 	bl	ba62c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba67c:	b910      	cbnz	r0, ba684 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba67e:	f7fd fa45 	bl	b7b0c <spark_process>
        while (_while() && !_condition()) {
   ba682:	e7f9      	b.n	ba678 <_ZN9TimeClass7isValidEv+0x1c>
   ba684:	f7ff ffd2 	bl	ba62c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba68c:	2000      	movs	r0, #0
   ba68e:	f7fc bf0d 	b.w	b74ac <hal_rtc_time_is_valid>
}
   ba692:	4620      	mov	r0, r4
   ba694:	bd10      	pop	{r4, pc}

000ba696 <_ZN9TimeClass3nowEv>:
{
   ba696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba698:	f7ff ffe0 	bl	ba65c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba69c:	2210      	movs	r2, #16
   ba69e:	2100      	movs	r1, #0
   ba6a0:	4668      	mov	r0, sp
   ba6a2:	f001 ff9b 	bl	bc5dc <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba6a6:	2100      	movs	r1, #0
   ba6a8:	4668      	mov	r0, sp
   ba6aa:	f7fc ff07 	bl	b74bc <hal_rtc_get_time>
}
   ba6ae:	9800      	ldr	r0, [sp, #0]
   ba6b0:	b005      	add	sp, #20
   ba6b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba6b8 <_ZN9TimeClass4hourEv>:
{
   ba6b8:	b508      	push	{r3, lr}
	return hour(now());
   ba6ba:	f7ff ffec 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6be:	17c1      	asrs	r1, r0, #31
   ba6c0:	f7ff ff7e 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba6c4:	4b01      	ldr	r3, [pc, #4]	; (ba6cc <_ZN9TimeClass4hourEv+0x14>)
   ba6c6:	6898      	ldr	r0, [r3, #8]
   ba6c8:	bd08      	pop	{r3, pc}
   ba6ca:	bf00      	nop
   ba6cc:	2003e684 	.word	0x2003e684

000ba6d0 <_ZN9TimeClass6minuteEv>:
{
   ba6d0:	b508      	push	{r3, lr}
	return minute(now());
   ba6d2:	f7ff ffe0 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6d6:	17c1      	asrs	r1, r0, #31
   ba6d8:	f7ff ff72 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba6dc:	4b01      	ldr	r3, [pc, #4]	; (ba6e4 <_ZN9TimeClass6minuteEv+0x14>)
   ba6de:	6858      	ldr	r0, [r3, #4]
   ba6e0:	bd08      	pop	{r3, pc}
   ba6e2:	bf00      	nop
   ba6e4:	2003e684 	.word	0x2003e684

000ba6e8 <_ZN9TimeClass6secondEv>:
{
   ba6e8:	b508      	push	{r3, lr}
	return second(now());
   ba6ea:	f7ff ffd4 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6ee:	17c1      	asrs	r1, r0, #31
   ba6f0:	f7ff ff66 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba6f4:	4b01      	ldr	r3, [pc, #4]	; (ba6fc <_ZN9TimeClass6secondEv+0x14>)
   ba6f6:	6818      	ldr	r0, [r3, #0]
   ba6f8:	bd08      	pop	{r3, pc}
   ba6fa:	bf00      	nop
   ba6fc:	2003e684 	.word	0x2003e684

000ba700 <_ZN9TimeClass3dayEv>:
{
   ba700:	b508      	push	{r3, lr}
	return day(now());
   ba702:	f7ff ffc8 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba706:	17c1      	asrs	r1, r0, #31
   ba708:	f7ff ff5a 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba70c:	4b01      	ldr	r3, [pc, #4]	; (ba714 <_ZN9TimeClass3dayEv+0x14>)
   ba70e:	68d8      	ldr	r0, [r3, #12]
   ba710:	bd08      	pop	{r3, pc}
   ba712:	bf00      	nop
   ba714:	2003e684 	.word	0x2003e684

000ba718 <_ZN9TimeClass5monthEv>:
{
   ba718:	b508      	push	{r3, lr}
	return month(now());
   ba71a:	f7ff ffbc 	bl	ba696 <_ZN9TimeClass3nowEv>
}
   ba71e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   ba722:	17c1      	asrs	r1, r0, #31
   ba724:	f7ff bf90 	b.w	ba648 <_ZN9TimeClass5monthEx>

000ba728 <_ZN9TimeClass4yearEv>:
{
   ba728:	b508      	push	{r3, lr}
	return year(now());
   ba72a:	f7ff ffb4 	bl	ba696 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba72e:	17c1      	asrs	r1, r0, #31
   ba730:	f7ff ff46 	bl	ba5c0 <_ZL22Refresh_UnixTime_Cachex>
}
   ba734:	4b01      	ldr	r3, [pc, #4]	; (ba73c <_ZN9TimeClass4yearEv+0x14>)
   ba736:	6958      	ldr	r0, [r3, #20]
   ba738:	bd08      	pop	{r3, pc}
   ba73a:	bf00      	nop
   ba73c:	2003e684 	.word	0x2003e684

000ba740 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba740:	4b02      	ldr	r3, [pc, #8]	; (ba74c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba742:	681a      	ldr	r2, [r3, #0]
   ba744:	4b02      	ldr	r3, [pc, #8]	; (ba750 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba746:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba748:	4770      	bx	lr
   ba74a:	bf00      	nop
   ba74c:	2003dc34 	.word	0x2003dc34
   ba750:	2003e680 	.word	0x2003e680

000ba754 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   ba754:	428a      	cmp	r2, r1
{
   ba756:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   ba758:	d007      	beq.n	ba76a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   ba75a:	1a44      	subs	r4, r0, r1
   ba75c:	9802      	ldr	r0, [sp, #8]
   ba75e:	1ac0      	subs	r0, r0, r3
   ba760:	4344      	muls	r4, r0
   ba762:	1a50      	subs	r0, r2, r1
   ba764:	fb94 f0f0 	sdiv	r0, r4, r0
   ba768:	4418      	add	r0, r3
}
   ba76a:	bd10      	pop	{r4, pc}

000ba76c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba76c:	2100      	movs	r1, #0
   ba76e:	f7fd b931 	b.w	b79d4 <system_delay_ms>
	...

000ba774 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba774:	4b01      	ldr	r3, [pc, #4]	; (ba77c <_GLOBAL__sub_I_RGB+0x8>)
   ba776:	2200      	movs	r2, #0
   ba778:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba77a:	4770      	bx	lr
   ba77c:	2003e6c0 	.word	0x2003e6c0

000ba780 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba780:	4b01      	ldr	r3, [pc, #4]	; (ba788 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba782:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba784:	4770      	bx	lr
   ba786:	bf00      	nop
   ba788:	2003dc38 	.word	0x2003dc38

000ba78c <serialEventRun>:
{
   ba78c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba78e:	4b0b      	ldr	r3, [pc, #44]	; (ba7bc <serialEventRun+0x30>)
   ba790:	b143      	cbz	r3, ba7a4 <serialEventRun+0x18>
   ba792:	f000 fc03 	bl	baf9c <_Z16_fetch_usbserialv>
   ba796:	6803      	ldr	r3, [r0, #0]
   ba798:	691b      	ldr	r3, [r3, #16]
   ba79a:	4798      	blx	r3
   ba79c:	2800      	cmp	r0, #0
   ba79e:	dd01      	ble.n	ba7a4 <serialEventRun+0x18>
        serialEvent();
   ba7a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba7a4:	4b06      	ldr	r3, [pc, #24]	; (ba7c0 <serialEventRun+0x34>)
   ba7a6:	b143      	cbz	r3, ba7ba <serialEventRun+0x2e>
   ba7a8:	f001 f86c 	bl	bb884 <_Z22__fetch_global_Serial1v>
   ba7ac:	6803      	ldr	r3, [r0, #0]
   ba7ae:	691b      	ldr	r3, [r3, #16]
   ba7b0:	4798      	blx	r3
   ba7b2:	2800      	cmp	r0, #0
   ba7b4:	dd01      	ble.n	ba7ba <serialEventRun+0x2e>
        serialEvent1();
   ba7b6:	f3af 8000 	nop.w
}
   ba7ba:	bd08      	pop	{r3, pc}
	...

000ba7c4 <_post_loop>:
{
   ba7c4:	b508      	push	{r3, lr}
	serialEventRun();
   ba7c6:	f7ff ffe1 	bl	ba78c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba7ca:	f7fc fe67 	bl	b749c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba7ce:	4b01      	ldr	r3, [pc, #4]	; (ba7d4 <_post_loop+0x10>)
   ba7d0:	6018      	str	r0, [r3, #0]
}
   ba7d2:	bd08      	pop	{r3, pc}
   ba7d4:	2003e740 	.word	0x2003e740

000ba7d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba7d8:	4805      	ldr	r0, [pc, #20]	; (ba7f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba7da:	4a06      	ldr	r2, [pc, #24]	; (ba7f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba7dc:	4906      	ldr	r1, [pc, #24]	; (ba7f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba7de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba7e0:	1a12      	subs	r2, r2, r0
   ba7e2:	f001 fed3 	bl	bc58c <memcpy>
    __backup_sram_signature = signature;
   ba7e6:	4b05      	ldr	r3, [pc, #20]	; (ba7fc <_Z33system_initialize_user_backup_ramv+0x24>)
   ba7e8:	4a05      	ldr	r2, [pc, #20]	; (ba800 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba7ea:	601a      	str	r2, [r3, #0]
}
   ba7ec:	bd08      	pop	{r3, pc}
   ba7ee:	bf00      	nop
   ba7f0:	2003f400 	.word	0x2003f400
   ba7f4:	2003f404 	.word	0x2003f404
   ba7f8:	000bf704 	.word	0x000bf704
   ba7fc:	2003f400 	.word	0x2003f400
   ba800:	9a271c1e 	.word	0x9a271c1e

000ba804 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba804:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba806:	2300      	movs	r3, #0
   ba808:	9300      	str	r3, [sp, #0]
   ba80a:	461a      	mov	r2, r3
   ba80c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba810:	f7fd f912 	bl	b7a38 <system_ctrl_set_result>
}
   ba814:	b003      	add	sp, #12
   ba816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba81c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba81c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba81e:	8843      	ldrh	r3, [r0, #2]
   ba820:	2b0a      	cmp	r3, #10
   ba822:	d008      	beq.n	ba836 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba824:	2b50      	cmp	r3, #80	; 0x50
   ba826:	d10b      	bne.n	ba840 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba828:	4b09      	ldr	r3, [pc, #36]	; (ba850 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba82a:	681b      	ldr	r3, [r3, #0]
   ba82c:	b14b      	cbz	r3, ba842 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba82e:	b003      	add	sp, #12
   ba830:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba834:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba836:	f7ff ffe5 	bl	ba804 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba83a:	b003      	add	sp, #12
   ba83c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba840:	2300      	movs	r3, #0
   ba842:	9300      	str	r3, [sp, #0]
   ba844:	461a      	mov	r2, r3
   ba846:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba84a:	f7fd f8f5 	bl	b7a38 <system_ctrl_set_result>
}
   ba84e:	e7f4      	b.n	ba83a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba850:	2003e6d4 	.word	0x2003e6d4

000ba854 <module_user_init_hook>:
{
   ba854:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba856:	4812      	ldr	r0, [pc, #72]	; (ba8a0 <module_user_init_hook+0x4c>)
   ba858:	2100      	movs	r1, #0
   ba85a:	f7fd f9d7 	bl	b7c0c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba85e:	4b11      	ldr	r3, [pc, #68]	; (ba8a4 <module_user_init_hook+0x50>)
   ba860:	681a      	ldr	r2, [r3, #0]
   ba862:	4b11      	ldr	r3, [pc, #68]	; (ba8a8 <module_user_init_hook+0x54>)
   ba864:	429a      	cmp	r2, r3
   ba866:	4b11      	ldr	r3, [pc, #68]	; (ba8ac <module_user_init_hook+0x58>)
   ba868:	bf0c      	ite	eq
   ba86a:	2201      	moveq	r2, #1
   ba86c:	2200      	movne	r2, #0
   ba86e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba870:	d001      	beq.n	ba876 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba872:	f7ff ffb1 	bl	ba7d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba876:	f7fc fdf9 	bl	b746c <HAL_RNG_GetRandomNumber>
   ba87a:	4604      	mov	r4, r0
    srand(seed);
   ba87c:	f001 feb6 	bl	bc5ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba880:	4b0b      	ldr	r3, [pc, #44]	; (ba8b0 <module_user_init_hook+0x5c>)
   ba882:	b113      	cbz	r3, ba88a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba884:	4620      	mov	r0, r4
   ba886:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba88a:	2100      	movs	r1, #0
   ba88c:	4808      	ldr	r0, [pc, #32]	; (ba8b0 <module_user_init_hook+0x5c>)
   ba88e:	f7fd f965 	bl	b7b5c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba896:	4807      	ldr	r0, [pc, #28]	; (ba8b4 <module_user_init_hook+0x60>)
   ba898:	2100      	movs	r1, #0
   ba89a:	f7fd b8c3 	b.w	b7a24 <system_ctrl_set_app_request_handler>
   ba89e:	bf00      	nop
   ba8a0:	000ba781 	.word	0x000ba781
   ba8a4:	2003f400 	.word	0x2003f400
   ba8a8:	9a271c1e 	.word	0x9a271c1e
   ba8ac:	2003e6d0 	.word	0x2003e6d0
   ba8b0:	00000000 	.word	0x00000000
   ba8b4:	000ba81d 	.word	0x000ba81d

000ba8b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba8b8:	4770      	bx	lr

000ba8ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   ba8ba:	2000      	movs	r0, #0
   ba8bc:	4770      	bx	lr

000ba8be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba8be:	b510      	push	{r4, lr}
   ba8c0:	2110      	movs	r1, #16
   ba8c2:	4604      	mov	r4, r0
   ba8c4:	f7f9 fbeb 	bl	b409e <_ZdlPvj>
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	bd10      	pop	{r4, pc}

000ba8cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ba8cc:	b508      	push	{r3, lr}
      { delete this; }
   ba8ce:	f7ff fff6 	bl	ba8be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ba8d2:	bd08      	pop	{r3, pc}

000ba8d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba8d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba8d6:	2200      	movs	r2, #0
   ba8d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba8dc:	6002      	str	r2, [r0, #0]
   ba8de:	8084      	strh	r4, [r0, #4]
   ba8e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba8e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba8e4:	680c      	ldr	r4, [r1, #0]
   ba8e6:	8085      	strh	r5, [r0, #4]
   ba8e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba8ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba8ec:	bd30      	pop	{r4, r5, pc}

000ba8ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   ba8ee:	b510      	push	{r4, lr}
   ba8f0:	4604      	mov	r4, r0
    free((void*)msg_);
   ba8f2:	6800      	ldr	r0, [r0, #0]
   ba8f4:	f7fd f942 	bl	b7b7c <free>
}
   ba8f8:	4620      	mov	r0, r4
   ba8fa:	bd10      	pop	{r4, pc}

000ba8fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba8fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   ba8fe:	68c4      	ldr	r4, [r0, #12]
   ba900:	b1f4      	cbz	r4, ba940 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   ba902:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   ba904:	2b02      	cmp	r3, #2
   ba906:	d103      	bne.n	ba910 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   ba908:	f104 000c 	add.w	r0, r4, #12
   ba90c:	f7ff ffef 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   ba910:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   ba912:	b135      	cbz	r5, ba922 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   ba914:	4628      	mov	r0, r5
   ba916:	f7f9 fd2b 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   ba91a:	2110      	movs	r1, #16
   ba91c:	4628      	mov	r0, r5
   ba91e:	f7f9 fbbe 	bl	b409e <_ZdlPvj>
   ba922:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   ba924:	b135      	cbz	r5, ba934 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   ba926:	4628      	mov	r0, r5
   ba928:	f7f9 fd22 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   ba92c:	2110      	movs	r1, #16
   ba92e:	4628      	mov	r0, r5
   ba930:	f7f9 fbb5 	bl	b409e <_ZdlPvj>
   ba934:	4620      	mov	r0, r4
   ba936:	2114      	movs	r1, #20
   ba938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba93c:	f7f9 bbaf 	b.w	b409e <_ZdlPvj>
   ba940:	bd38      	pop	{r3, r4, r5, pc}

000ba942 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba942:	680b      	ldr	r3, [r1, #0]
   ba944:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba946:	684b      	ldr	r3, [r1, #4]
   ba948:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba94a:	b113      	cbz	r3, ba952 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba94c:	685a      	ldr	r2, [r3, #4]
   ba94e:	3201      	adds	r2, #1
   ba950:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba952:	4770      	bx	lr

000ba954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   ba954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba956:	4604      	mov	r4, r0
   ba958:	4668      	mov	r0, sp
   ba95a:	460d      	mov	r5, r1
   ba95c:	f7ff fff1 	bl	ba942 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba960:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba962:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba964:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   ba966:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   ba968:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba96a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   ba96c:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   ba96e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   ba970:	f7fa fbbc 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   ba974:	b135      	cbz	r5, ba984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   ba976:	1d28      	adds	r0, r5, #4
   ba978:	f7fa fbb8 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba97c:	2108      	movs	r1, #8
   ba97e:	4628      	mov	r0, r5
   ba980:	f7f9 fb8d 	bl	b409e <_ZdlPvj>
        return p;
    }
   ba984:	4620      	mov	r0, r4
   ba986:	b003      	add	sp, #12
   ba988:	bd30      	pop	{r4, r5, pc}

000ba98a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   ba98a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba98c:	b510      	push	{r4, lr}
      if (_M_empty())
   ba98e:	b90a      	cbnz	r2, ba994 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   ba990:	f000 ffdc 	bl	bb94c <_ZSt25__throw_bad_function_callv>
    }
   ba994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba998:	68c3      	ldr	r3, [r0, #12]
   ba99a:	4718      	bx	r3

000ba99c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba99c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba99e:	6800      	ldr	r0, [r0, #0]
   ba9a0:	f100 0110 	add.w	r1, r0, #16
   ba9a4:	f7ff fff1 	bl	ba98a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   ba9a8:	bd08      	pop	{r3, pc}

000ba9aa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   ba9aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba9ac:	b510      	push	{r4, lr}
      if (_M_empty())
   ba9ae:	b90a      	cbnz	r2, ba9b4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   ba9b0:	f000 ffcc 	bl	bb94c <_ZSt25__throw_bad_function_callv>
    }
   ba9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba9b8:	68c3      	ldr	r3, [r0, #12]
   ba9ba:	4718      	bx	r3

000ba9bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba9bc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba9be:	6800      	ldr	r0, [r0, #0]
   ba9c0:	f100 0110 	add.w	r1, r0, #16
   ba9c4:	f7ff fff1 	bl	ba9aa <_ZNKSt8functionIFvRKbEEclES1_>
      }
   ba9c8:	bd08      	pop	{r3, pc}
	...

000ba9cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba9cc:	b538      	push	{r3, r4, r5, lr}
   ba9ce:	2300      	movs	r3, #0
   ba9d0:	4604      	mov	r4, r0
   ba9d2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba9d4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   ba9d6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba9d8:	f7f9 fb5d 	bl	b4096 <_Znwj>
   ba9dc:	b128      	cbz	r0, ba9ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   ba9de:	2301      	movs	r3, #1
   ba9e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   ba9e4:	4b02      	ldr	r3, [pc, #8]	; (ba9f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   ba9e6:	6003      	str	r3, [r0, #0]
   ba9e8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   ba9ea:	6020      	str	r0, [r4, #0]
	}
   ba9ec:	4620      	mov	r0, r4
   ba9ee:	bd38      	pop	{r3, r4, r5, pc}
   ba9f0:	000bf06c 	.word	0x000bf06c

000ba9f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   ba9f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba9f6:	2300      	movs	r3, #0
   ba9f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   ba9fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   ba9fc:	4604      	mov	r4, r0
   ba9fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   baa00:	b12b      	cbz	r3, baa0e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   baa02:	2202      	movs	r2, #2
   baa04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   baa06:	68eb      	ldr	r3, [r5, #12]
   baa08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   baa0a:	68ab      	ldr	r3, [r5, #8]
   baa0c:	60a3      	str	r3, [r4, #8]
    }
   baa0e:	4620      	mov	r0, r4
   baa10:	bd38      	pop	{r3, r4, r5, pc}
	...

000baa14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   baa14:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa16:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   baa18:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   baa1a:	4668      	mov	r0, sp
   baa1c:	f7ff ff5a 	bl	ba8d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   baa20:	f04f 0302 	mov.w	r3, #2
   baa24:	e8d4 2f4f 	ldrexb	r2, [r4]
   baa28:	2a00      	cmp	r2, #0
   baa2a:	d103      	bne.n	baa34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   baa2c:	e8c4 3f41 	strexb	r1, r3, [r4]
   baa30:	2900      	cmp	r1, #0
   baa32:	d1f7      	bne.n	baa24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   baa34:	d125      	bne.n	baa82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   baa36:	f104 050c 	add.w	r5, r4, #12
   baa3a:	4669      	mov	r1, sp
   baa3c:	4628      	mov	r0, r5
   baa3e:	f7ff ff49 	bl	ba8d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   baa42:	f3bf 8f5b 	dmb	ish
   baa46:	2301      	movs	r3, #1
   baa48:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   baa4a:	2000      	movs	r0, #0
   baa4c:	f104 0308 	add.w	r3, r4, #8
   baa50:	f3bf 8f5b 	dmb	ish
   baa54:	e853 6f00 	ldrex	r6, [r3]
   baa58:	e843 0200 	strex	r2, r0, [r3]
   baa5c:	2a00      	cmp	r2, #0
   baa5e:	d1f9      	bne.n	baa54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   baa60:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   baa64:	b16e      	cbz	r6, baa82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   baa66:	f7fc ffbd 	bl	b79e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   baa6a:	b178      	cbz	r0, baa8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   baa6c:	4629      	mov	r1, r5
   baa6e:	4630      	mov	r0, r6
   baa70:	f7ff ff8b 	bl	ba98a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   baa74:	4630      	mov	r0, r6
   baa76:	f7f9 fc7b 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   baa7a:	2110      	movs	r1, #16
   baa7c:	4630      	mov	r0, r6
   baa7e:	f7f9 fb0e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   baa82:	4668      	mov	r0, sp
   baa84:	f7ff ff33 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
    }
   baa88:	b009      	add	sp, #36	; 0x24
   baa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baa8c:	4631      	mov	r1, r6
   baa8e:	a802      	add	r0, sp, #8
   baa90:	f7ff ffb0 	bl	ba9f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   baa94:	68e0      	ldr	r0, [r4, #12]
   baa96:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   baa9a:	b108      	cbz	r0, baaa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   baa9c:	f001 fe0c 	bl	bc6b8 <strdup>
        type_(type) {
   baaa0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   baaa2:	2010      	movs	r0, #16
   baaa4:	f8ad 501c 	strh.w	r5, [sp, #28]
   baaa8:	f7f9 faf5 	bl	b4096 <_Znwj>
   baaac:	4605      	mov	r5, r0
   baaae:	b1e8      	cbz	r0, baaec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   baab0:	2700      	movs	r7, #0
   baab2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baab4:	2018      	movs	r0, #24
   baab6:	f7f9 faee 	bl	b4096 <_Znwj>
   baaba:	4604      	mov	r4, r0
   baabc:	b188      	cbz	r0, baae2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   baabe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   baac0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   baac2:	a802      	add	r0, sp, #8
   baac4:	f7fe fab8 	bl	b9038 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baac8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   baaca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   baacc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baace:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   baad0:	9204      	str	r2, [sp, #16]
   baad2:	a906      	add	r1, sp, #24
   baad4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   baad6:	60e3      	str	r3, [r4, #12]
   baad8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   baadc:	9205      	str	r2, [sp, #20]
   baade:	f7ff fef9 	bl	ba8d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   baae2:	4b08      	ldr	r3, [pc, #32]	; (bab04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   baae4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   baae6:	4b08      	ldr	r3, [pc, #32]	; (bab08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baae8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   baaea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   baaec:	a806      	add	r0, sp, #24
   baaee:	f7ff fefe 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   baaf2:	a802      	add	r0, sp, #8
   baaf4:	f7f9 fc3c 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   baaf8:	2200      	movs	r2, #0
   baafa:	4629      	mov	r1, r5
   baafc:	4803      	ldr	r0, [pc, #12]	; (bab0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   baafe:	f7fc ff79 	bl	b79f4 <application_thread_invoke>
   bab02:	e7b7      	b.n	baa74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bab04:	000ba99d 	.word	0x000ba99d
   bab08:	000bac21 	.word	0x000bac21
   bab0c:	000bb141 	.word	0x000bb141

000bab10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab14:	b08b      	sub	sp, #44	; 0x2c
   bab16:	4605      	mov	r5, r0
   bab18:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bab1c:	460f      	mov	r7, r1
   bab1e:	4690      	mov	r8, r2
   bab20:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bab22:	f7fc fffb 	bl	b7b1c <spark_cloud_flag_connected>
   bab26:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bab28:	4683      	mov	fp, r0
   bab2a:	bb38      	cbnz	r0, bab7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bab2c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bab30:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bab32:	a905      	add	r1, sp, #20
   bab34:	4630      	mov	r0, r6
   bab36:	f8ad 3018 	strh.w	r3, [sp, #24]
   bab3a:	f7ff fecb 	bl	ba8d4 <_ZN8particle5ErrorC1EOS0_>
   bab3e:	2014      	movs	r0, #20
   bab40:	f7f9 faa9 	bl	b4096 <_Znwj>
   bab44:	4604      	mov	r4, r0
   bab46:	b148      	cbz	r0, bab5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bab48:	2302      	movs	r3, #2
   bab4a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bab4c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bab4e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bab52:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bab54:	4631      	mov	r1, r6
   bab56:	300c      	adds	r0, #12
   bab58:	f7ff febc 	bl	ba8d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bab5c:	4628      	mov	r0, r5
	: __shared_count(__p)
   bab5e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bab60:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bab64:	f7ff ff32 	bl	ba9cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bab68:	4630      	mov	r0, r6
   bab6a:	f7ff fec0 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bab6e:	a805      	add	r0, sp, #20
   bab70:	f7ff febd 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bab74:	4628      	mov	r0, r5
   bab76:	b00b      	add	sp, #44	; 0x2c
   bab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bab7c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bab7e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bab80:	2014      	movs	r0, #20
   bab82:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bab86:	9307      	str	r3, [sp, #28]
   bab88:	f7f9 fa85 	bl	b4096 <_Znwj>
   bab8c:	4601      	mov	r1, r0
   bab8e:	b118      	cbz	r0, bab98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bab90:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bab94:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bab96:	7044      	strb	r4, [r0, #1]
   bab98:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bab9a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bab9c:	f7ff ff16 	bl	ba9cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   baba0:	4b1e      	ldr	r3, [pc, #120]	; (bac1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   baba2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   baba4:	2008      	movs	r0, #8
   baba6:	f7f9 fa76 	bl	b4096 <_Znwj>
   babaa:	4604      	mov	r4, r0
   babac:	b110      	cbz	r0, babb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   babae:	a903      	add	r1, sp, #12
   babb0:	f7ff fec7 	bl	ba942 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   babb4:	9600      	str	r6, [sp, #0]
   babb6:	fa5f f38a 	uxtb.w	r3, sl
   babba:	464a      	mov	r2, r9
   babbc:	4641      	mov	r1, r8
   babbe:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   babc0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   babc2:	f7fc ffb3 	bl	b7b2c <spark_send_event>
   babc6:	b9b8      	cbnz	r0, babf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   babc8:	9b03      	ldr	r3, [sp, #12]
   babca:	785b      	ldrb	r3, [r3, #1]
   babcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   babd0:	b993      	cbnz	r3, babf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   babd2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   babd6:	a905      	add	r1, sp, #20
   babd8:	a803      	add	r0, sp, #12
   babda:	9205      	str	r2, [sp, #20]
   babdc:	f8ad 3018 	strh.w	r3, [sp, #24]
   babe0:	f7ff ff18 	bl	baa14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   babe4:	a805      	add	r0, sp, #20
   babe6:	f7ff fe82 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   babea:	a805      	add	r0, sp, #20
   babec:	9909      	ldr	r1, [sp, #36]	; 0x24
   babee:	f7ff feb1 	bl	ba954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   babf2:	a806      	add	r0, sp, #24
   babf4:	f7fa fa7a 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   babf8:	a903      	add	r1, sp, #12
   babfa:	a805      	add	r0, sp, #20
   babfc:	f7ff fea1 	bl	ba942 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bac00:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bac02:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bac04:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bac06:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bac08:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bac0a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bac0c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bac0e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bac10:	f7fa fa6c 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac14:	a804      	add	r0, sp, #16
   bac16:	f7fa fa69 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bac1a:	e7ab      	b.n	bab74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bac1c:	000bac9d 	.word	0x000bac9d

000bac20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bac20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bac22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac24:	4605      	mov	r5, r0
	switch (__op)
   bac26:	d103      	bne.n	bac30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bac28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bac2a:	6003      	str	r3, [r0, #0]
      }
   bac2c:	2000      	movs	r0, #0
   bac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bac30:	2a02      	cmp	r2, #2
   bac32:	d010      	beq.n	bac56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bac34:	2a03      	cmp	r2, #3
   bac36:	d1f9      	bne.n	bac2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bac38:	6804      	ldr	r4, [r0, #0]
   bac3a:	2c00      	cmp	r4, #0
   bac3c:	d0f6      	beq.n	bac2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bac3e:	f104 0010 	add.w	r0, r4, #16
   bac42:	f7ff fe54 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bac46:	4620      	mov	r0, r4
   bac48:	f7f9 fb92 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bac4c:	2118      	movs	r1, #24
   bac4e:	4620      	mov	r0, r4
   bac50:	f7f9 fa25 	bl	b409e <_ZdlPvj>
   bac54:	e7ea      	b.n	bac2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bac56:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bac58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bac5a:	f7f9 fa1c 	bl	b4096 <_Znwj>
   bac5e:	4604      	mov	r4, r0
   bac60:	b150      	cbz	r0, bac78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bac62:	4631      	mov	r1, r6
   bac64:	f7ff fec6 	bl	ba9f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bac68:	6930      	ldr	r0, [r6, #16]
   bac6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bac6e:	b108      	cbz	r0, bac74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bac70:	f001 fd22 	bl	bc6b8 <strdup>
        type_(type) {
   bac74:	6120      	str	r0, [r4, #16]
   bac76:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bac78:	602c      	str	r4, [r5, #0]
	}
   bac7a:	e7d7      	b.n	bac2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bac7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bac7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bac7e:	2300      	movs	r3, #0
   bac80:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bac82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bac84:	4604      	mov	r4, r0
   bac86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bac88:	b12b      	cbz	r3, bac96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bac8a:	2202      	movs	r2, #2
   bac8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bac8e:	68eb      	ldr	r3, [r5, #12]
   bac90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bac92:	68ab      	ldr	r3, [r5, #8]
   bac94:	60a3      	str	r3, [r4, #8]
    }
   bac96:	4620      	mov	r0, r4
   bac98:	bd38      	pop	{r3, r4, r5, pc}
	...

000bac9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bac9e:	b089      	sub	sp, #36	; 0x24
   baca0:	4604      	mov	r4, r0
   baca2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   baca4:	a801      	add	r0, sp, #4
   baca6:	4611      	mov	r1, r2
   baca8:	f7ff fe54 	bl	ba954 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bacac:	b1a4      	cbz	r4, bacd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bacae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bacb0:	b11d      	cbz	r5, bacba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bacb2:	4628      	mov	r0, r5
   bacb4:	f001 fd00 	bl	bc6b8 <strdup>
   bacb8:	4605      	mov	r5, r0
   bacba:	a801      	add	r0, sp, #4
   bacbc:	a903      	add	r1, sp, #12
        type_(type) {
   bacbe:	9503      	str	r5, [sp, #12]
   bacc0:	f8ad 4010 	strh.w	r4, [sp, #16]
   bacc4:	f7ff fea6 	bl	baa14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bacc8:	a803      	add	r0, sp, #12
   bacca:	f7ff fe10 	bl	ba8ee <_ZN8particle5ErrorD1Ev>
   bacce:	a802      	add	r0, sp, #8
   bacd0:	f7fa fa0c 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bacd4:	b009      	add	sp, #36	; 0x24
   bacd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bacd8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bacda:	2301      	movs	r3, #1
   bacdc:	e8d5 2f4f 	ldrexb	r2, [r5]
   bace0:	2a00      	cmp	r2, #0
   bace2:	d103      	bne.n	bacec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bace4:	e8c5 3f41 	strexb	r1, r3, [r5]
   bace8:	2900      	cmp	r1, #0
   bacea:	d1f7      	bne.n	bacdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bacec:	d1ef      	bne.n	bacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bacee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bacf0:	f3bf 8f5b 	dmb	ish
   bacf4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bacf6:	1d2b      	adds	r3, r5, #4
   bacf8:	f3bf 8f5b 	dmb	ish
   bacfc:	e853 6f00 	ldrex	r6, [r3]
   bad00:	e843 4200 	strex	r2, r4, [r3]
   bad04:	2a00      	cmp	r2, #0
   bad06:	d1f9      	bne.n	bacfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bad08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bad0c:	2e00      	cmp	r6, #0
   bad0e:	d0de      	beq.n	bacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bad10:	4620      	mov	r0, r4
   bad12:	f7fc fe67 	bl	b79e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bad16:	4607      	mov	r7, r0
   bad18:	b160      	cbz	r0, bad34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bad1a:	f105 010c 	add.w	r1, r5, #12
   bad1e:	4630      	mov	r0, r6
   bad20:	f7ff fe43 	bl	ba9aa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bad24:	4630      	mov	r0, r6
   bad26:	f7f9 fb23 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bad2a:	2110      	movs	r1, #16
   bad2c:	4630      	mov	r0, r6
   bad2e:	f7f9 f9b6 	bl	b409e <_ZdlPvj>
   bad32:	e7cc      	b.n	bacce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bad34:	4631      	mov	r1, r6
   bad36:	a803      	add	r0, sp, #12
   bad38:	f7ff ffa0 	bl	bac7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bad3c:	7b2b      	ldrb	r3, [r5, #12]
   bad3e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bad42:	2010      	movs	r0, #16
   bad44:	f7f9 f9a7 	bl	b4096 <_Znwj>
   bad48:	4605      	mov	r5, r0
   bad4a:	b1d0      	cbz	r0, bad82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bad4c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad4e:	2014      	movs	r0, #20
   bad50:	f7f9 f9a1 	bl	b4096 <_Znwj>
   bad54:	4604      	mov	r4, r0
   bad56:	b178      	cbz	r0, bad78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bad58:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bad5a:	4601      	mov	r1, r0
   bad5c:	a803      	add	r0, sp, #12
   bad5e:	f7fe f96b 	bl	b9038 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bad64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bad66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad68:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bad6a:	9205      	str	r2, [sp, #20]
   bad6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bad6e:	60e3      	str	r3, [r4, #12]
   bad70:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bad74:	9206      	str	r2, [sp, #24]
   bad76:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bad78:	4b06      	ldr	r3, [pc, #24]	; (bad94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bad7a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bad7c:	4b06      	ldr	r3, [pc, #24]	; (bad98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad7e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bad80:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bad82:	a803      	add	r0, sp, #12
   bad84:	f7f9 faf4 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bad88:	2200      	movs	r2, #0
   bad8a:	4629      	mov	r1, r5
   bad8c:	4803      	ldr	r0, [pc, #12]	; (bad9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bad8e:	f7fc fe31 	bl	b79f4 <application_thread_invoke>
   bad92:	e7c7      	b.n	bad24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bad94:	000ba9bd 	.word	0x000ba9bd
   bad98:	000bada1 	.word	0x000bada1
   bad9c:	000bb141 	.word	0x000bb141

000bada0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bada0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bada2:	b570      	push	{r4, r5, r6, lr}
   bada4:	4604      	mov	r4, r0
	switch (__op)
   bada6:	d103      	bne.n	badb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bada8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   badaa:	6003      	str	r3, [r0, #0]
      }
   badac:	2000      	movs	r0, #0
   badae:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   badb0:	2a02      	cmp	r2, #2
   badb2:	d00c      	beq.n	badce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   badb4:	2a03      	cmp	r2, #3
   badb6:	d1f9      	bne.n	badac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   badb8:	6804      	ldr	r4, [r0, #0]
   badba:	2c00      	cmp	r4, #0
   badbc:	d0f6      	beq.n	badac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   badbe:	4620      	mov	r0, r4
   badc0:	f7f9 fad6 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   badc4:	2114      	movs	r1, #20
   badc6:	4620      	mov	r0, r4
   badc8:	f7f9 f969 	bl	b409e <_ZdlPvj>
   badcc:	e7ee      	b.n	badac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   badce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   badd0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   badd2:	f7f9 f960 	bl	b4096 <_Znwj>
   badd6:	4605      	mov	r5, r0
   badd8:	b120      	cbz	r0, bade4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   badda:	4631      	mov	r1, r6
   baddc:	f7ff ff4e 	bl	bac7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bade0:	7c33      	ldrb	r3, [r6, #16]
   bade2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bade4:	6025      	str	r5, [r4, #0]
	}
   bade6:	e7e1      	b.n	badac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bade8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bade8:	4770      	bx	lr

000badea <_ZN9IPAddressD0Ev>:
   badea:	b510      	push	{r4, lr}
   badec:	2118      	movs	r1, #24
   badee:	4604      	mov	r4, r0
   badf0:	f7f9 f955 	bl	b409e <_ZdlPvj>
   badf4:	4620      	mov	r0, r4
   badf6:	bd10      	pop	{r4, pc}

000badf8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   badf8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   badfa:	7d03      	ldrb	r3, [r0, #20]
   badfc:	2b06      	cmp	r3, #6
{
   badfe:	b08d      	sub	sp, #52	; 0x34
   bae00:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae02:	f100 0704 	add.w	r7, r0, #4
   bae06:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bae0a:	d012      	beq.n	bae32 <_ZNK9IPAddress7printToER5Print+0x3a>
   bae0c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bae10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bae14:	220a      	movs	r2, #10
   bae16:	4630      	mov	r0, r6
   bae18:	f7fe fbc9 	bl	b95ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bae1c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bae1e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bae20:	d019      	beq.n	bae56 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bae22:	2c00      	cmp	r4, #0
   bae24:	d0f4      	beq.n	bae10 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bae26:	212e      	movs	r1, #46	; 0x2e
   bae28:	4630      	mov	r0, r6
   bae2a:	f7fe fba7 	bl	b957c <_ZN5Print5printEc>
   bae2e:	4404      	add	r4, r0
   bae30:	e7ee      	b.n	bae10 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae32:	232f      	movs	r3, #47	; 0x2f
   bae34:	466a      	mov	r2, sp
   bae36:	4639      	mov	r1, r7
   bae38:	200a      	movs	r0, #10
		buf[0] = 0;
   bae3a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae3e:	f7fc fc1f 	bl	b7680 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bae42:	4668      	mov	r0, sp
   bae44:	f001 fc55 	bl	bc6f2 <strlen>
   bae48:	6833      	ldr	r3, [r6, #0]
   bae4a:	4602      	mov	r2, r0
   bae4c:	68db      	ldr	r3, [r3, #12]
   bae4e:	4669      	mov	r1, sp
   bae50:	4630      	mov	r0, r6
   bae52:	4798      	blx	r3
   bae54:	4604      	mov	r4, r0
    }
    return n;
}
   bae56:	4620      	mov	r0, r4
   bae58:	b00d      	add	sp, #52	; 0x34
   bae5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bae5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bae5c:	b510      	push	{r4, lr}
   bae5e:	4b05      	ldr	r3, [pc, #20]	; (bae74 <_ZN9IPAddressC1Ev+0x18>)
   bae60:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bae62:	2211      	movs	r2, #17
   bae64:	f840 3b04 	str.w	r3, [r0], #4
   bae68:	2100      	movs	r1, #0
   bae6a:	f001 fbb7 	bl	bc5dc <memset>
}
   bae6e:	4620      	mov	r0, r4
   bae70:	bd10      	pop	{r4, pc}
   bae72:	bf00      	nop
   bae74:	000bf088 	.word	0x000bf088

000bae78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bae78:	4603      	mov	r3, r0
   bae7a:	4a07      	ldr	r2, [pc, #28]	; (bae98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bae7c:	b510      	push	{r4, lr}
   bae7e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bae82:	f101 0210 	add.w	r2, r1, #16
   bae86:	f851 4b04 	ldr.w	r4, [r1], #4
   bae8a:	f843 4b04 	str.w	r4, [r3], #4
   bae8e:	4291      	cmp	r1, r2
   bae90:	d1f9      	bne.n	bae86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bae92:	780a      	ldrb	r2, [r1, #0]
   bae94:	701a      	strb	r2, [r3, #0]
}
   bae96:	bd10      	pop	{r4, pc}
   bae98:	000bf088 	.word	0x000bf088

000bae9c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bae9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bae9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   baea2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   baea6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   baeaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   baeae:	2304      	movs	r3, #4
   baeb0:	6041      	str	r1, [r0, #4]
   baeb2:	7503      	strb	r3, [r0, #20]
}
   baeb4:	bd10      	pop	{r4, pc}
	...

000baeb8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   baeb8:	b507      	push	{r0, r1, r2, lr}
   baeba:	4b06      	ldr	r3, [pc, #24]	; (baed4 <_ZN9IPAddressC1EPKh+0x1c>)
   baebc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   baebe:	78cb      	ldrb	r3, [r1, #3]
   baec0:	9300      	str	r3, [sp, #0]
   baec2:	788b      	ldrb	r3, [r1, #2]
   baec4:	784a      	ldrb	r2, [r1, #1]
   baec6:	7809      	ldrb	r1, [r1, #0]
   baec8:	f7ff ffe8 	bl	bae9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   baecc:	b003      	add	sp, #12
   baece:	f85d fb04 	ldr.w	pc, [sp], #4
   baed2:	bf00      	nop
   baed4:	000bf088 	.word	0x000bf088

000baed8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baed8:	7441      	strb	r1, [r0, #17]
}
   baeda:	4770      	bx	lr

000baedc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baedc:	4770      	bx	lr

000baede <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   baede:	4770      	bx	lr

000baee0 <_ZN9USBSerial4readEv>:
{
   baee0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   baee2:	2100      	movs	r1, #0
   baee4:	7c00      	ldrb	r0, [r0, #16]
   baee6:	f7fc fd23 	bl	b7930 <HAL_USB_USART_Receive_Data>
}
   baeea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baeee:	bd08      	pop	{r3, pc}

000baef0 <_ZN9USBSerial4peekEv>:
{
   baef0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   baef2:	2101      	movs	r1, #1
   baef4:	7c00      	ldrb	r0, [r0, #16]
   baef6:	f7fc fd1b 	bl	b7930 <HAL_USB_USART_Receive_Data>
}
   baefa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baefe:	bd08      	pop	{r3, pc}

000baf00 <_ZN9USBSerial17availableForWriteEv>:
{
   baf00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   baf02:	7c00      	ldrb	r0, [r0, #16]
   baf04:	f7fc fd0c 	bl	b7920 <HAL_USB_USART_Available_Data_For_Write>
}
   baf08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf0c:	bd08      	pop	{r3, pc}

000baf0e <_ZN9USBSerial9availableEv>:
{
   baf0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   baf10:	7c00      	ldrb	r0, [r0, #16]
   baf12:	f7fc fcfd 	bl	b7910 <HAL_USB_USART_Available_Data>
}
   baf16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf1a:	bd08      	pop	{r3, pc}

000baf1c <_ZN9USBSerial5writeEh>:
{
   baf1c:	b513      	push	{r0, r1, r4, lr}
   baf1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf20:	7c00      	ldrb	r0, [r0, #16]
{
   baf22:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf24:	f7fc fcfc 	bl	b7920 <HAL_USB_USART_Available_Data_For_Write>
   baf28:	2800      	cmp	r0, #0
   baf2a:	9901      	ldr	r1, [sp, #4]
   baf2c:	dc01      	bgt.n	baf32 <_ZN9USBSerial5writeEh+0x16>
   baf2e:	7c60      	ldrb	r0, [r4, #17]
   baf30:	b120      	cbz	r0, baf3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   baf32:	7c20      	ldrb	r0, [r4, #16]
   baf34:	f7fc fd04 	bl	b7940 <HAL_USB_USART_Send_Data>
   baf38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   baf3c:	b002      	add	sp, #8
   baf3e:	bd10      	pop	{r4, pc}

000baf40 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baf40:	7c00      	ldrb	r0, [r0, #16]
   baf42:	f7fc bd05 	b.w	b7950 <HAL_USB_USART_Flush_Data>

000baf46 <_ZN9USBSerialD0Ev>:
   baf46:	b510      	push	{r4, lr}
   baf48:	2114      	movs	r1, #20
   baf4a:	4604      	mov	r4, r0
   baf4c:	f7f9 f8a7 	bl	b409e <_ZdlPvj>
   baf50:	4620      	mov	r0, r4
   baf52:	bd10      	pop	{r4, pc}

000baf54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   baf54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   baf56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf5a:	4604      	mov	r4, r0
   baf5c:	4608      	mov	r0, r1
   baf5e:	2100      	movs	r1, #0
   baf60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baf64:	4b04      	ldr	r3, [pc, #16]	; (baf78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baf66:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf68:	2301      	movs	r3, #1
  _serial = serial;
   baf6a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf6c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baf6e:	4611      	mov	r1, r2
   baf70:	f7fc fcb6 	bl	b78e0 <HAL_USB_USART_Init>
}
   baf74:	4620      	mov	r0, r4
   baf76:	bd10      	pop	{r4, pc}
   baf78:	000bf09c 	.word	0x000bf09c

000baf7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   baf7c:	7c00      	ldrb	r0, [r0, #16]
   baf7e:	2200      	movs	r2, #0
   baf80:	f7fc bcb6 	b.w	b78f0 <HAL_USB_USART_Begin>

000baf84 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   baf84:	7c00      	ldrb	r0, [r0, #16]
   baf86:	f7fc bcbb 	b.w	b7900 <HAL_USB_USART_End>

000baf8a <_Z19acquireSerialBufferv>:
{
   baf8a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   baf8c:	2214      	movs	r2, #20
{
   baf8e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   baf90:	2100      	movs	r1, #0
   baf92:	f001 fb23 	bl	bc5dc <memset>
}
   baf96:	4620      	mov	r0, r4
   baf98:	bd10      	pop	{r4, pc}
	...

000baf9c <_Z16_fetch_usbserialv>:
{
   baf9c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baf9e:	4c0f      	ldr	r4, [pc, #60]	; (bafdc <_Z16_fetch_usbserialv+0x40>)
{
   bafa0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bafa2:	a803      	add	r0, sp, #12
   bafa4:	f7ff fff1 	bl	baf8a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bafa8:	7821      	ldrb	r1, [r4, #0]
   bafaa:	f3bf 8f5b 	dmb	ish
   bafae:	f011 0101 	ands.w	r1, r1, #1
   bafb2:	d10f      	bne.n	bafd4 <_Z16_fetch_usbserialv+0x38>
   bafb4:	4620      	mov	r0, r4
   bafb6:	9101      	str	r1, [sp, #4]
   bafb8:	f7f9 f880 	bl	b40bc <__cxa_guard_acquire>
   bafbc:	9901      	ldr	r1, [sp, #4]
   bafbe:	b148      	cbz	r0, bafd4 <_Z16_fetch_usbserialv+0x38>
   bafc0:	aa03      	add	r2, sp, #12
   bafc2:	4807      	ldr	r0, [pc, #28]	; (bafe0 <_Z16_fetch_usbserialv+0x44>)
   bafc4:	f7ff ffc6 	bl	baf54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bafc8:	4620      	mov	r0, r4
   bafca:	f7f9 f87c 	bl	b40c6 <__cxa_guard_release>
   bafce:	4805      	ldr	r0, [pc, #20]	; (bafe4 <_Z16_fetch_usbserialv+0x48>)
   bafd0:	f001 fab6 	bl	bc540 <atexit>
	return _usbserial;
}
   bafd4:	4802      	ldr	r0, [pc, #8]	; (bafe0 <_Z16_fetch_usbserialv+0x44>)
   bafd6:	b008      	add	sp, #32
   bafd8:	bd10      	pop	{r4, pc}
   bafda:	bf00      	nop
   bafdc:	2003e6d8 	.word	0x2003e6d8
   bafe0:	2003e6dc 	.word	0x2003e6dc
   bafe4:	000baedd 	.word	0x000baedd

000bafe8 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bafe8:	f7fc ba38 	b.w	b745c <HAL_Interrupts_Disable_All>

000bafec <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bafec:	f7fc ba2e 	b.w	b744c <HAL_Interrupts_Enable_All>

000baff0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   baff0:	2200      	movs	r2, #0
   baff2:	6840      	ldr	r0, [r0, #4]
   baff4:	4611      	mov	r1, r2
   baff6:	f7fc bd41 	b.w	b7a7c <network_ready>

000baffa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   baffa:	2200      	movs	r2, #0
   baffc:	6840      	ldr	r0, [r0, #4]
   baffe:	4611      	mov	r1, r2
   bb000:	f7fc bd5c 	b.w	b7abc <network_listening>

000bb004 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb004:	2200      	movs	r2, #0
   bb006:	6840      	ldr	r0, [r0, #4]
   bb008:	4611      	mov	r1, r2
   bb00a:	f7fc bd67 	b.w	b7adc <network_get_listen_timeout>

000bb00e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb00e:	6840      	ldr	r0, [r0, #4]
   bb010:	2200      	movs	r2, #0
   bb012:	f7fc bd5b 	b.w	b7acc <network_set_listen_timeout>

000bb016 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb016:	6840      	ldr	r0, [r0, #4]
   bb018:	2200      	movs	r2, #0
   bb01a:	f081 0101 	eor.w	r1, r1, #1
   bb01e:	f7fc bd45 	b.w	b7aac <network_listen>

000bb022 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb022:	2300      	movs	r3, #0
   bb024:	6840      	ldr	r0, [r0, #4]
   bb026:	461a      	mov	r2, r3
   bb028:	4619      	mov	r1, r3
   bb02a:	f7fc bd37 	b.w	b7a9c <network_off>

000bb02e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb02e:	2300      	movs	r3, #0
   bb030:	6840      	ldr	r0, [r0, #4]
   bb032:	461a      	mov	r2, r3
   bb034:	4619      	mov	r1, r3
   bb036:	f7fc bd29 	b.w	b7a8c <network_on>

000bb03a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb03a:	2200      	movs	r2, #0
   bb03c:	6840      	ldr	r0, [r0, #4]
   bb03e:	4611      	mov	r1, r2
   bb040:	f7fc bd0c 	b.w	b7a5c <network_connecting>

000bb044 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb044:	6840      	ldr	r0, [r0, #4]
   bb046:	2200      	movs	r2, #0
   bb048:	2102      	movs	r1, #2
   bb04a:	f7fc bd0f 	b.w	b7a6c <network_disconnect>

000bb04e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb04e:	2300      	movs	r3, #0
   bb050:	6840      	ldr	r0, [r0, #4]
   bb052:	461a      	mov	r2, r3
   bb054:	f7fc bcfa 	b.w	b7a4c <network_connect>

000bb058 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb058:	4b08      	ldr	r3, [pc, #32]	; (bb07c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb05a:	b510      	push	{r4, lr}
   bb05c:	2428      	movs	r4, #40	; 0x28
   bb05e:	4622      	mov	r2, r4
   bb060:	4618      	mov	r0, r3
   bb062:	2100      	movs	r1, #0
   bb064:	f001 faba 	bl	bc5dc <memset>
   bb068:	4b05      	ldr	r3, [pc, #20]	; (bb080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb06a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb06c:	f04f 32ff 	mov.w	r2, #4294967295
   bb070:	6042      	str	r2, [r0, #4]
   bb072:	2204      	movs	r2, #4
   bb074:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb076:	4a03      	ldr	r2, [pc, #12]	; (bb084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb078:	601a      	str	r2, [r3, #0]
   bb07a:	bd10      	pop	{r4, pc}
   bb07c:	2003e6f8 	.word	0x2003e6f8
   bb080:	2003e6f0 	.word	0x2003e6f0
   bb084:	000bf0cc 	.word	0x000bf0cc

000bb088 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb088:	4770      	bx	lr

000bb08a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb08a:	7441      	strb	r1, [r0, #17]
}
   bb08c:	4770      	bx	lr

000bb08e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb08e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb090:	7c00      	ldrb	r0, [r0, #16]
   bb092:	f7fc fb35 	bl	b7700 <hal_usart_available_data_for_write>
}
   bb096:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb09a:	bd08      	pop	{r3, pc}

000bb09c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb09c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb09e:	7c00      	ldrb	r0, [r0, #16]
   bb0a0:	f7fc fb06 	bl	b76b0 <hal_usart_available>
}
   bb0a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0a8:	bd08      	pop	{r3, pc}

000bb0aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb0aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb0ac:	7c00      	ldrb	r0, [r0, #16]
   bb0ae:	f7fc fb0f 	bl	b76d0 <hal_usart_peek>
}
   bb0b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0b6:	bd08      	pop	{r3, pc}

000bb0b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb0b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb0ba:	7c00      	ldrb	r0, [r0, #16]
   bb0bc:	f7fc fb00 	bl	b76c0 <hal_usart_read>
}
   bb0c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0c4:	bd08      	pop	{r3, pc}

000bb0c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb0c6:	7c00      	ldrb	r0, [r0, #16]
   bb0c8:	f7fc bb0a 	b.w	b76e0 <hal_usart_flush>

000bb0cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb0ce:	7c45      	ldrb	r5, [r0, #17]
{
   bb0d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb0d2:	b12d      	cbz	r5, bb0e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb0d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb0d6:	b003      	add	sp, #12
   bb0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb0dc:	f7fc bae0 	b.w	b76a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb0e0:	7c00      	ldrb	r0, [r0, #16]
   bb0e2:	9101      	str	r1, [sp, #4]
   bb0e4:	f7fc fb0c 	bl	b7700 <hal_usart_available_data_for_write>
   bb0e8:	2800      	cmp	r0, #0
   bb0ea:	9901      	ldr	r1, [sp, #4]
   bb0ec:	dcf2      	bgt.n	bb0d4 <_ZN11USARTSerial5writeEh+0x8>
}
   bb0ee:	4628      	mov	r0, r5
   bb0f0:	b003      	add	sp, #12
   bb0f2:	bd30      	pop	{r4, r5, pc}

000bb0f4 <_ZN11USARTSerialD0Ev>:
   bb0f4:	b510      	push	{r4, lr}
   bb0f6:	2114      	movs	r1, #20
   bb0f8:	4604      	mov	r4, r0
   bb0fa:	f7f8 ffd0 	bl	b409e <_ZdlPvj>
   bb0fe:	4620      	mov	r0, r4
   bb100:	bd10      	pop	{r4, pc}
	...

000bb104 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb104:	b510      	push	{r4, lr}
   bb106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb10a:	4604      	mov	r4, r0
   bb10c:	4608      	mov	r0, r1
   bb10e:	4611      	mov	r1, r2
   bb110:	2200      	movs	r2, #0
   bb112:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb116:	4b04      	ldr	r3, [pc, #16]	; (bb128 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb118:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb11a:	2301      	movs	r3, #1
  _serial = serial;
   bb11c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb11e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb120:	f7fc fafe 	bl	b7720 <hal_usart_init_ex>
}
   bb124:	4620      	mov	r0, r4
   bb126:	bd10      	pop	{r4, pc}
   bb128:	000bf108 	.word	0x000bf108

000bb12c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb12c:	7c00      	ldrb	r0, [r0, #16]
   bb12e:	2300      	movs	r3, #0
   bb130:	f7fc baee 	b.w	b7710 <hal_usart_begin_config>

000bb134 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb134:	2200      	movs	r2, #0
   bb136:	f7ff bff9 	b.w	bb12c <_ZN11USARTSerial5beginEmm>

000bb13a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb13a:	7c00      	ldrb	r0, [r0, #16]
   bb13c:	f7fc baa8 	b.w	b7690 <hal_usart_end>

000bb140 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bb140:	b510      	push	{r4, lr}
      if (_M_empty())
   bb142:	6883      	ldr	r3, [r0, #8]
   bb144:	4604      	mov	r4, r0
   bb146:	b90b      	cbnz	r3, bb14c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bb148:	f000 fc00 	bl	bb94c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb14c:	68c3      	ldr	r3, [r0, #12]
   bb14e:	4798      	blx	r3
      if (_M_manager)
   bb150:	68a3      	ldr	r3, [r4, #8]
   bb152:	b11b      	cbz	r3, bb15c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bb154:	2203      	movs	r2, #3
   bb156:	4621      	mov	r1, r4
   bb158:	4620      	mov	r0, r4
   bb15a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bb15c:	4620      	mov	r0, r4
   bb15e:	2110      	movs	r1, #16
}
   bb160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bb164:	f7f8 bf9b 	b.w	b409e <_ZdlPvj>

000bb168 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb168:	4770      	bx	lr

000bb16a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb16c:	4606      	mov	r6, r0
   bb16e:	4615      	mov	r5, r2
   bb170:	460c      	mov	r4, r1
   bb172:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb174:	42bc      	cmp	r4, r7
   bb176:	d006      	beq.n	bb186 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb178:	6833      	ldr	r3, [r6, #0]
   bb17a:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb17e:	689b      	ldr	r3, [r3, #8]
   bb180:	4630      	mov	r0, r6
   bb182:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb184:	e7f6      	b.n	bb174 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb186:	4628      	mov	r0, r5
   bb188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb18a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb18a:	7c00      	ldrb	r0, [r0, #16]
   bb18c:	2200      	movs	r2, #0
   bb18e:	f7fc baef 	b.w	b7770 <hal_i2c_write>

000bb192 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb192:	7c00      	ldrb	r0, [r0, #16]
   bb194:	2100      	movs	r1, #0
   bb196:	f7fc baf3 	b.w	b7780 <hal_i2c_available>

000bb19a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb19a:	7c00      	ldrb	r0, [r0, #16]
   bb19c:	2100      	movs	r1, #0
   bb19e:	f7fc baf7 	b.w	b7790 <hal_i2c_read>

000bb1a2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb1a2:	7c00      	ldrb	r0, [r0, #16]
   bb1a4:	2100      	movs	r1, #0
   bb1a6:	f7fc bafb 	b.w	b77a0 <hal_i2c_peek>

000bb1aa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb1aa:	7c00      	ldrb	r0, [r0, #16]
   bb1ac:	2100      	movs	r1, #0
   bb1ae:	f7fc baff 	b.w	b77b0 <hal_i2c_flush>

000bb1b2 <_ZN7TwoWireD0Ev>:
   bb1b2:	b510      	push	{r4, lr}
   bb1b4:	2114      	movs	r1, #20
   bb1b6:	4604      	mov	r4, r0
   bb1b8:	f7f8 ff71 	bl	b409e <_ZdlPvj>
   bb1bc:	4620      	mov	r0, r4
   bb1be:	bd10      	pop	{r4, pc}

000bb1c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb1c0:	b510      	push	{r4, lr}
   bb1c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb1c6:	4604      	mov	r4, r0
   bb1c8:	4608      	mov	r0, r1
   bb1ca:	2100      	movs	r1, #0
   bb1cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb1d0:	4b03      	ldr	r3, [pc, #12]	; (bb1e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bb1d2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bb1d4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bb1d6:	4611      	mov	r1, r2
   bb1d8:	f7fc fafa 	bl	b77d0 <hal_i2c_init>
}
   bb1dc:	4620      	mov	r0, r4
   bb1de:	bd10      	pop	{r4, pc}
   bb1e0:	000bf138 	.word	0x000bf138

000bb1e4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bb1e4:	7c00      	ldrb	r0, [r0, #16]
   bb1e6:	2200      	movs	r2, #0
   bb1e8:	f7fc baa2 	b.w	b7730 <hal_i2c_set_speed>

000bb1ec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb1ec:	2300      	movs	r3, #0
   bb1ee:	7c00      	ldrb	r0, [r0, #16]
   bb1f0:	461a      	mov	r2, r3
   bb1f2:	4619      	mov	r1, r3
   bb1f4:	f7fc baa4 	b.w	b7740 <hal_i2c_begin>

000bb1f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb1f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb1fa:	2200      	movs	r2, #0
   bb1fc:	2314      	movs	r3, #20
   bb1fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb202:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb206:	780b      	ldrb	r3, [r1, #0]
   bb208:	f88d 3008 	strb.w	r3, [sp, #8]
   bb20c:	684b      	ldr	r3, [r1, #4]
   bb20e:	9303      	str	r3, [sp, #12]
   bb210:	68cb      	ldr	r3, [r1, #12]
   bb212:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb214:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb216:	7a0b      	ldrb	r3, [r1, #8]
   bb218:	9305      	str	r3, [sp, #20]
   bb21a:	a901      	add	r1, sp, #4
   bb21c:	f7fc fae0 	bl	b77e0 <hal_i2c_request_ex>
}
   bb220:	b007      	add	sp, #28
   bb222:	f85d fb04 	ldr.w	pc, [sp], #4

000bb226 <_ZN7TwoWire11requestFromEhjh>:
{
   bb226:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb228:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb22a:	f88d 1000 	strb.w	r1, [sp]
   bb22e:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb232:	9103      	str	r1, [sp, #12]
   bb234:	bf18      	it	ne
   bb236:	2301      	movne	r3, #1
   bb238:	4669      	mov	r1, sp
    size_ = size;
   bb23a:	9201      	str	r2, [sp, #4]
   bb23c:	f88d 3008 	strb.w	r3, [sp, #8]
   bb240:	f7ff ffda 	bl	bb1f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb244:	b005      	add	sp, #20
   bb246:	f85d fb04 	ldr.w	pc, [sp], #4

000bb24a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb24a:	7c00      	ldrb	r0, [r0, #16]
   bb24c:	2200      	movs	r2, #0
   bb24e:	f7fc ba7f 	b.w	b7750 <hal_i2c_begin_transmission>

000bb252 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb252:	b2c9      	uxtb	r1, r1
   bb254:	f7ff bff9 	b.w	bb24a <_ZN7TwoWire17beginTransmissionEh>

000bb258 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb258:	7c00      	ldrb	r0, [r0, #16]
   bb25a:	2200      	movs	r2, #0
   bb25c:	f7fc ba80 	b.w	b7760 <hal_i2c_end_transmission>

000bb260 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb260:	2101      	movs	r1, #1
   bb262:	f7ff bff9 	b.w	bb258 <_ZN7TwoWire15endTransmissionEh>

000bb266 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb266:	2300      	movs	r3, #0
   bb268:	6840      	ldr	r0, [r0, #4]
   bb26a:	461a      	mov	r2, r3
   bb26c:	f7fc bbee 	b.w	b7a4c <network_connect>

000bb270 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb270:	6840      	ldr	r0, [r0, #4]
   bb272:	2200      	movs	r2, #0
   bb274:	2102      	movs	r1, #2
   bb276:	f7fc bbf9 	b.w	b7a6c <network_disconnect>

000bb27a <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb27a:	2200      	movs	r2, #0
   bb27c:	6840      	ldr	r0, [r0, #4]
   bb27e:	4611      	mov	r1, r2
   bb280:	f7fc bbec 	b.w	b7a5c <network_connecting>

000bb284 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb284:	2200      	movs	r2, #0
   bb286:	6840      	ldr	r0, [r0, #4]
   bb288:	4611      	mov	r1, r2
   bb28a:	f7fc bbf7 	b.w	b7a7c <network_ready>

000bb28e <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb28e:	2300      	movs	r3, #0
   bb290:	6840      	ldr	r0, [r0, #4]
   bb292:	461a      	mov	r2, r3
   bb294:	4619      	mov	r1, r3
   bb296:	f7fc bbf9 	b.w	b7a8c <network_on>

000bb29a <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb29a:	2300      	movs	r3, #0
   bb29c:	6840      	ldr	r0, [r0, #4]
   bb29e:	461a      	mov	r2, r3
   bb2a0:	4619      	mov	r1, r3
   bb2a2:	f7fc bbfb 	b.w	b7a9c <network_off>

000bb2a6 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb2a6:	6840      	ldr	r0, [r0, #4]
   bb2a8:	2100      	movs	r1, #0
   bb2aa:	f7fc bc1f 	b.w	b7aec <network_is_on>

000bb2ae <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb2ae:	6840      	ldr	r0, [r0, #4]
   bb2b0:	2100      	movs	r1, #0
   bb2b2:	f7fc bc23 	b.w	b7afc <network_is_off>

000bb2b6 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb2b6:	6840      	ldr	r0, [r0, #4]
   bb2b8:	2200      	movs	r2, #0
   bb2ba:	f081 0101 	eor.w	r1, r1, #1
   bb2be:	f7fc bbf5 	b.w	b7aac <network_listen>

000bb2c2 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb2c2:	6840      	ldr	r0, [r0, #4]
   bb2c4:	2200      	movs	r2, #0
   bb2c6:	f7fc bc01 	b.w	b7acc <network_set_listen_timeout>

000bb2ca <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb2ca:	2200      	movs	r2, #0
   bb2cc:	6840      	ldr	r0, [r0, #4]
   bb2ce:	4611      	mov	r1, r2
   bb2d0:	f7fc bc04 	b.w	b7adc <network_get_listen_timeout>

000bb2d4 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb2d4:	2200      	movs	r2, #0
   bb2d6:	6840      	ldr	r0, [r0, #4]
   bb2d8:	4611      	mov	r1, r2
   bb2da:	f7fc bbef 	b.w	b7abc <network_listening>

000bb2de <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb2e2:	b095      	sub	sp, #84	; 0x54
   bb2e4:	4614      	mov	r4, r2
   bb2e6:	460d      	mov	r5, r1
   bb2e8:	4607      	mov	r7, r0
    IPAddress addr;
   bb2ea:	f7ff fdb7 	bl	bae5c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb2ee:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb2f0:	221c      	movs	r2, #28
   bb2f2:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb2f4:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb2f6:	f001 f971 	bl	bc5dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb2fa:	2340      	movs	r3, #64	; 0x40
   bb2fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb2fe:	4620      	mov	r0, r4
   bb300:	466b      	mov	r3, sp
   bb302:	aa0c      	add	r2, sp, #48	; 0x30
   bb304:	2100      	movs	r1, #0
   bb306:	f7fc f879 	bl	b73fc <netdb_getaddrinfo>
    if (!r) {
   bb30a:	4604      	mov	r4, r0
   bb30c:	2800      	cmp	r0, #0
   bb30e:	d14b      	bne.n	bb3a8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb310:	4602      	mov	r2, r0
   bb312:	2101      	movs	r1, #1
   bb314:	6868      	ldr	r0, [r5, #4]
   bb316:	f7fc fbb1 	bl	b7a7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb31a:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb31c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb31e:	4622      	mov	r2, r4
   bb320:	6868      	ldr	r0, [r5, #4]
   bb322:	f7fc fbab 	bl	b7a7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb326:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb328:	4681      	mov	r9, r0
        bool ok = false;
   bb32a:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb32c:	2e00      	cmp	r6, #0
   bb32e:	d03b      	beq.n	bb3a8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb330:	2900      	cmp	r1, #0
   bb332:	d139      	bne.n	bb3a8 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb334:	6873      	ldr	r3, [r6, #4]
   bb336:	2b02      	cmp	r3, #2
   bb338:	d003      	beq.n	bb342 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb33a:	2b0a      	cmp	r3, #10
   bb33c:	d011      	beq.n	bb362 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb33e:	69f6      	ldr	r6, [r6, #28]
   bb340:	e7f4      	b.n	bb32c <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb342:	f1b8 0f00 	cmp.w	r8, #0
   bb346:	d0fa      	beq.n	bb33e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb348:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb34a:	a806      	add	r0, sp, #24
   bb34c:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb34e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb350:	f7ff fdb2 	bl	baeb8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb356:	1d3c      	adds	r4, r7, #4
   bb358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb35a:	682b      	ldr	r3, [r5, #0]
   bb35c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb35e:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb360:	e7ed      	b.n	bb33e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb362:	f1b9 0f00 	cmp.w	r9, #0
   bb366:	d0ea      	beq.n	bb33e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb368:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb36a:	2210      	movs	r2, #16
   bb36c:	a801      	add	r0, sp, #4
   bb36e:	f001 f935 	bl	bc5dc <memset>
                    a.v = 6;
   bb372:	2306      	movs	r3, #6
   bb374:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb378:	ad01      	add	r5, sp, #4
   bb37a:	f104 0308 	add.w	r3, r4, #8
   bb37e:	3418      	adds	r4, #24
   bb380:	6818      	ldr	r0, [r3, #0]
   bb382:	6859      	ldr	r1, [r3, #4]
   bb384:	462a      	mov	r2, r5
   bb386:	c203      	stmia	r2!, {r0, r1}
   bb388:	3308      	adds	r3, #8
   bb38a:	42a3      	cmp	r3, r4
   bb38c:	4615      	mov	r5, r2
   bb38e:	d1f7      	bne.n	bb380 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb390:	a901      	add	r1, sp, #4
   bb392:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb394:	ad07      	add	r5, sp, #28
   bb396:	f7ff fd6f 	bl	bae78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb39a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb39c:	1d3c      	adds	r4, r7, #4
   bb39e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb3a0:	682b      	ldr	r3, [r5, #0]
   bb3a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb3a4:	4649      	mov	r1, r9
   bb3a6:	e7ca      	b.n	bb33e <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb3a8:	9800      	ldr	r0, [sp, #0]
   bb3aa:	f7fc f81f 	bl	b73ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb3ae:	4638      	mov	r0, r7
   bb3b0:	b015      	add	sp, #84	; 0x54
   bb3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000bb3b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb3b8:	4b02      	ldr	r3, [pc, #8]	; (bb3c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb3ba:	4a03      	ldr	r2, [pc, #12]	; (bb3c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb3bc:	601a      	str	r2, [r3, #0]
   bb3be:	2200      	movs	r2, #0
   bb3c0:	605a      	str	r2, [r3, #4]

} // spark
   bb3c2:	4770      	bx	lr
   bb3c4:	2003e720 	.word	0x2003e720
   bb3c8:	000bf160 	.word	0x000bf160

000bb3cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bb3cc:	f100 0310 	add.w	r3, r0, #16
   bb3d0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bb3d2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bb3d6:	2901      	cmp	r1, #1
   bb3d8:	4618      	mov	r0, r3
   bb3da:	d108      	bne.n	bb3ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bb3dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bb3e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bb3e4:	3a01      	subs	r2, #1
   bb3e6:	f103 0310 	add.w	r3, r3, #16
   bb3ea:	d1f2      	bne.n	bb3d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bb3ec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bb3ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bb3f0:	bf04      	itt	eq
   bb3f2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bb3f6:	1852      	addeq	r2, r2, r1
   bb3f8:	e7f4      	b.n	bb3e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bb3fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bb3fa:	b40e      	push	{r1, r2, r3}
   bb3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb3fe:	b088      	sub	sp, #32
   bb400:	af00      	add	r7, sp, #0
   bb402:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb406:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb408:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb40c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb40e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb410:	462b      	mov	r3, r5
   bb412:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bb414:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb416:	f7fc fbd1 	bl	b7bbc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bb41a:	280f      	cmp	r0, #15
   bb41c:	687a      	ldr	r2, [r7, #4]
   bb41e:	d91a      	bls.n	bb456 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bb420:	f100 0308 	add.w	r3, r0, #8
   bb424:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bb428:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bb42a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb42e:	1c41      	adds	r1, r0, #1
   bb430:	462b      	mov	r3, r5
   bb432:	4668      	mov	r0, sp
        va_start(args, fmt);
   bb434:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb436:	f7fc fbc1 	bl	b7bbc <vsnprintf>
        if (n > 0) {
   bb43a:	1e02      	subs	r2, r0, #0
   bb43c:	dd04      	ble.n	bb448 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bb43e:	6823      	ldr	r3, [r4, #0]
   bb440:	4669      	mov	r1, sp
   bb442:	689b      	ldr	r3, [r3, #8]
   bb444:	4620      	mov	r0, r4
   bb446:	4798      	blx	r3
   bb448:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bb44a:	3720      	adds	r7, #32
   bb44c:	46bd      	mov	sp, r7
   bb44e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb452:	b003      	add	sp, #12
   bb454:	4770      	bx	lr
    } else if (n > 0) {
   bb456:	2800      	cmp	r0, #0
   bb458:	d0f7      	beq.n	bb44a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bb45a:	6823      	ldr	r3, [r4, #0]
   bb45c:	4602      	mov	r2, r0
   bb45e:	689b      	ldr	r3, [r3, #8]
   bb460:	f107 0110 	add.w	r1, r7, #16
   bb464:	4620      	mov	r0, r4
   bb466:	4798      	blx	r3
}
   bb468:	e7ef      	b.n	bb44a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bb46a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb46a:	b538      	push	{r3, r4, r5, lr}
   bb46c:	680b      	ldr	r3, [r1, #0]
   bb46e:	6003      	str	r3, [r0, #0]
   bb470:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bb472:	6843      	ldr	r3, [r0, #4]
   bb474:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb476:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bb478:	d008      	beq.n	bb48c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bb47a:	b115      	cbz	r5, bb482 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bb47c:	686b      	ldr	r3, [r5, #4]
   bb47e:	3301      	adds	r3, #1
   bb480:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bb482:	6860      	ldr	r0, [r4, #4]
   bb484:	b108      	cbz	r0, bb48a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bb486:	f7fc ff5a 	bl	b833e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bb48a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb48c:	bd38      	pop	{r3, r4, r5, pc}

000bb48e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   bb48e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bb490:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bb492:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bb496:	689b      	ldr	r3, [r3, #8]
   bb498:	2201      	movs	r2, #1
   bb49a:	f10d 0107 	add.w	r1, sp, #7
   bb49e:	4798      	blx	r3
}
   bb4a0:	b003      	add	sp, #12
   bb4a2:	f85d fb04 	ldr.w	pc, [sp], #4

000bb4a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb4a6:	460b      	mov	r3, r1
   bb4a8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bb4aa:	2200      	movs	r2, #0
   bb4ac:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bb4ae:	e9c0 2200 	strd	r2, r2, [r0]
   bb4b2:	4604      	mov	r4, r0
        t_ = t;
   bb4b4:	6083      	str	r3, [r0, #8]
    if (t) {
   bb4b6:	b90b      	cbnz	r3, bb4bc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bb4b8:	4620      	mov	r0, r4
   bb4ba:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bb4bc:	f7ff ffd5 	bl	bb46a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bb4c0:	e7fa      	b.n	bb4b8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bb4c2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bb4c2:	6883      	ldr	r3, [r0, #8]
   bb4c4:	b1eb      	cbz	r3, bb502 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bb4c6:	781a      	ldrb	r2, [r3, #0]
   bb4c8:	2a03      	cmp	r2, #3
   bb4ca:	d81a      	bhi.n	bb502 <_ZNK5spark9JSONValue4typeEv+0x40>
   bb4cc:	e8df f002 	tbb	[pc, r2]
   bb4d0:	1b021704 	.word	0x1b021704
   bb4d4:	2005      	movs	r0, #5
   bb4d6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bb4d8:	6802      	ldr	r2, [r0, #0]
   bb4da:	685b      	ldr	r3, [r3, #4]
   bb4dc:	6852      	ldr	r2, [r2, #4]
   bb4de:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bb4e0:	282d      	cmp	r0, #45	; 0x2d
   bb4e2:	d012      	beq.n	bb50a <_ZNK5spark9JSONValue4typeEv+0x48>
   bb4e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb4e8:	2b09      	cmp	r3, #9
   bb4ea:	d90e      	bls.n	bb50a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bb4ec:	2874      	cmp	r0, #116	; 0x74
   bb4ee:	d00e      	beq.n	bb50e <_ZNK5spark9JSONValue4typeEv+0x4c>
   bb4f0:	2866      	cmp	r0, #102	; 0x66
   bb4f2:	d00c      	beq.n	bb50e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bb4f4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bb4f8:	4258      	negs	r0, r3
   bb4fa:	4158      	adcs	r0, r3
   bb4fc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bb4fe:	2006      	movs	r0, #6
   bb500:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bb502:	2000      	movs	r0, #0
   bb504:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bb506:	2004      	movs	r0, #4
   bb508:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bb50a:	2003      	movs	r0, #3
   bb50c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bb50e:	2002      	movs	r0, #2
}
   bb510:	4770      	bx	lr

000bb512 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bb512:	b510      	push	{r4, lr}
   bb514:	4604      	mov	r4, r0
    switch (type()) {
   bb516:	f7ff ffd4 	bl	bb4c2 <_ZNK5spark9JSONValue4typeEv>
   bb51a:	2802      	cmp	r0, #2
   bb51c:	d00e      	beq.n	bb53c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bb51e:	1ec3      	subs	r3, r0, #3
   bb520:	b2db      	uxtb	r3, r3
   bb522:	2b01      	cmp	r3, #1
   bb524:	d814      	bhi.n	bb550 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bb526:	6822      	ldr	r2, [r4, #0]
   bb528:	68a3      	ldr	r3, [r4, #8]
   bb52a:	6850      	ldr	r0, [r2, #4]
   bb52c:	685b      	ldr	r3, [r3, #4]
}
   bb52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bb532:	220a      	movs	r2, #10
   bb534:	2100      	movs	r1, #0
   bb536:	4418      	add	r0, r3
   bb538:	f001 bff2 	b.w	bd520 <strtol>
        const char* const s = d_->json + t_->start;
   bb53c:	6822      	ldr	r2, [r4, #0]
   bb53e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bb540:	6852      	ldr	r2, [r2, #4]
   bb542:	685b      	ldr	r3, [r3, #4]
   bb544:	5cd0      	ldrb	r0, [r2, r3]
   bb546:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bb54a:	4258      	negs	r0, r3
   bb54c:	4158      	adcs	r0, r3
}
   bb54e:	bd10      	pop	{r4, pc}
    switch (type()) {
   bb550:	2000      	movs	r0, #0
   bb552:	e7fc      	b.n	bb54e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bb554 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb554:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb556:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb558:	e9c0 3300 	strd	r3, r3, [r0]
   bb55c:	4604      	mov	r4, r0
        n_(0) {
   bb55e:	480e      	ldr	r0, [pc, #56]	; (bb598 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bb560:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bb564:	b1a9      	cbz	r1, bb592 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bb566:	780b      	ldrb	r3, [r1, #0]
   bb568:	2b03      	cmp	r3, #3
   bb56a:	d006      	beq.n	bb57a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bb56c:	b98b      	cbnz	r3, bb592 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bb56e:	6813      	ldr	r3, [r2, #0]
   bb570:	6858      	ldr	r0, [r3, #4]
   bb572:	684b      	ldr	r3, [r1, #4]
   bb574:	5cc3      	ldrb	r3, [r0, r3]
   bb576:	2b6e      	cmp	r3, #110	; 0x6e
   bb578:	d007      	beq.n	bb58a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bb57a:	6813      	ldr	r3, [r2, #0]
   bb57c:	684d      	ldr	r5, [r1, #4]
   bb57e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bb580:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bb582:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bb584:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bb586:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bb588:	60e3      	str	r3, [r4, #12]
   bb58a:	4611      	mov	r1, r2
   bb58c:	4620      	mov	r0, r4
   bb58e:	f7ff ff6c 	bl	bb46a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb592:	4620      	mov	r0, r4
   bb594:	bd38      	pop	{r3, r4, r5, pc}
   bb596:	bf00      	nop
   bb598:	000befb8 	.word	0x000befb8

000bb59c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb59c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb59e:	2500      	movs	r5, #0
   bb5a0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bb5a2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bb5a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bb5aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb5ae:	4604      	mov	r4, r0
   bb5b0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bb5b2:	b14b      	cbz	r3, bb5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bb5b4:	781a      	ldrb	r2, [r3, #0]
   bb5b6:	2a01      	cmp	r2, #1
   bb5b8:	d106      	bne.n	bb5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bb5ba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bb5be:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bb5c0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bb5c2:	6143      	str	r3, [r0, #20]
   bb5c4:	f7ff ff51 	bl	bb46a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb5c8:	4620      	mov	r0, r4
   bb5ca:	bd38      	pop	{r3, r4, r5, pc}

000bb5cc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bb5cc:	b510      	push	{r4, lr}
    if (!n_) {
   bb5ce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bb5d0:	4604      	mov	r4, r0
    if (!n_) {
   bb5d2:	b163      	cbz	r3, bb5ee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bb5d4:	6880      	ldr	r0, [r0, #8]
   bb5d6:	60e0      	str	r0, [r4, #12]
    --n_;
   bb5d8:	3b01      	subs	r3, #1
    ++t_;
   bb5da:	3010      	adds	r0, #16
   bb5dc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bb5de:	6120      	str	r0, [r4, #16]
    --n_;
   bb5e0:	6163      	str	r3, [r4, #20]
    if (n_) {
   bb5e2:	b113      	cbz	r3, bb5ea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bb5e4:	f7ff fef2 	bl	bb3cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bb5e8:	60a0      	str	r0, [r4, #8]
    return true;
   bb5ea:	2001      	movs	r0, #1
   bb5ec:	e000      	b.n	bb5f0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bb5ee:	4618      	mov	r0, r3
}
   bb5f0:	bd10      	pop	{r4, pc}

000bb5f2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb5f2:	b510      	push	{r4, lr}
    write('}');
   bb5f4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb5f6:	4604      	mov	r4, r0
    write('}');
   bb5f8:	f7ff ff49 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bb5fc:	2301      	movs	r3, #1
   bb5fe:	7123      	strb	r3, [r4, #4]
}
   bb600:	4620      	mov	r0, r4
   bb602:	bd10      	pop	{r4, pc}

000bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bb604:	b508      	push	{r3, lr}
    switch (state_) {
   bb606:	7903      	ldrb	r3, [r0, #4]
   bb608:	2b01      	cmp	r3, #1
   bb60a:	d002      	beq.n	bb612 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bb60c:	2b02      	cmp	r3, #2
   bb60e:	d004      	beq.n	bb61a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bb610:	bd08      	pop	{r3, pc}
        write(',');
   bb612:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bb614:	f7ff ff3b 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
}
   bb618:	e7fa      	b.n	bb610 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bb61a:	213a      	movs	r1, #58	; 0x3a
   bb61c:	e7fa      	b.n	bb614 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bb61e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bb61e:	b510      	push	{r4, lr}
   bb620:	4604      	mov	r4, r0
    writeSeparator();
   bb622:	f7ff ffef 	bl	bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bb626:	4620      	mov	r0, r4
   bb628:	217b      	movs	r1, #123	; 0x7b
   bb62a:	f7ff ff30 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bb62e:	2300      	movs	r3, #0
   bb630:	7123      	strb	r3, [r4, #4]
}
   bb632:	4620      	mov	r0, r4
   bb634:	bd10      	pop	{r4, pc}
	...

000bb638 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bb638:	b513      	push	{r0, r1, r4, lr}
   bb63a:	4604      	mov	r4, r0
   bb63c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb63e:	f7ff ffe1 	bl	bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bb642:	6823      	ldr	r3, [r4, #0]
   bb644:	9a01      	ldr	r2, [sp, #4]
   bb646:	68db      	ldr	r3, [r3, #12]
   bb648:	4903      	ldr	r1, [pc, #12]	; (bb658 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bb64a:	4620      	mov	r0, r4
   bb64c:	4798      	blx	r3
    state_ = NEXT;
   bb64e:	2301      	movs	r3, #1
}
   bb650:	4620      	mov	r0, r4
    state_ = NEXT;
   bb652:	7123      	strb	r3, [r4, #4]
}
   bb654:	b002      	add	sp, #8
   bb656:	bd10      	pop	{r4, pc}
   bb658:	000be864 	.word	0x000be864

000bb65c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bb65c:	b513      	push	{r0, r1, r4, lr}
   bb65e:	4604      	mov	r4, r0
   bb660:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb662:	f7ff ffcf 	bl	bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bb666:	6823      	ldr	r3, [r4, #0]
   bb668:	9a01      	ldr	r2, [sp, #4]
   bb66a:	68db      	ldr	r3, [r3, #12]
   bb66c:	4903      	ldr	r1, [pc, #12]	; (bb67c <_ZN5spark10JSONWriter5valueEj+0x20>)
   bb66e:	4620      	mov	r0, r4
   bb670:	4798      	blx	r3
    state_ = NEXT;
   bb672:	2301      	movs	r3, #1
}
   bb674:	4620      	mov	r0, r4
    state_ = NEXT;
   bb676:	7123      	strb	r3, [r4, #4]
}
   bb678:	b002      	add	sp, #8
   bb67a:	bd10      	pop	{r4, pc}
   bb67c:	000bf194 	.word	0x000bf194

000bb680 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb684:	460d      	mov	r5, r1
    write('"');
   bb686:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb688:	4690      	mov	r8, r2
   bb68a:	4604      	mov	r4, r0
    write('"');
   bb68c:	f7ff feff 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bb690:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bb738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bb694:	44a8      	add	r8, r5
    const char *s = str;
   bb696:	462f      	mov	r7, r5
    while (s != end) {
   bb698:	4547      	cmp	r7, r8
   bb69a:	46ba      	mov	sl, r7
   bb69c:	d03d      	beq.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bb69e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bb6a2:	2e22      	cmp	r6, #34	; 0x22
   bb6a4:	d006      	beq.n	bb6b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb6a6:	2e5c      	cmp	r6, #92	; 0x5c
   bb6a8:	d004      	beq.n	bb6b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb6aa:	4630      	mov	r0, r6
   bb6ac:	f000 ff56 	bl	bc55c <isprint>
   bb6b0:	2800      	cmp	r0, #0
   bb6b2:	d1f1      	bne.n	bb698 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bb6b4:	6823      	ldr	r3, [r4, #0]
   bb6b6:	ebaa 0205 	sub.w	r2, sl, r5
   bb6ba:	689b      	ldr	r3, [r3, #8]
   bb6bc:	4629      	mov	r1, r5
   bb6be:	4620      	mov	r0, r4
   bb6c0:	4798      	blx	r3
            write('\\');
   bb6c2:	215c      	movs	r1, #92	; 0x5c
   bb6c4:	4620      	mov	r0, r4
   bb6c6:	f7ff fee2 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bb6ca:	2e0d      	cmp	r6, #13
   bb6cc:	d80a      	bhi.n	bb6e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bb6ce:	2e07      	cmp	r6, #7
   bb6d0:	d91c      	bls.n	bb70c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb6d2:	f1a6 0308 	sub.w	r3, r6, #8
   bb6d6:	2b05      	cmp	r3, #5
   bb6d8:	d818      	bhi.n	bb70c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb6da:	e8df f003 	tbb	[pc, r3]
   bb6de:	0f0d      	.short	0x0f0d
   bb6e0:	15131711 	.word	0x15131711
   bb6e4:	2e22      	cmp	r6, #34	; 0x22
   bb6e6:	d001      	beq.n	bb6ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bb6e8:	2e5c      	cmp	r6, #92	; 0x5c
   bb6ea:	d10f      	bne.n	bb70c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bb6ec:	4631      	mov	r1, r6
                write('b');
   bb6ee:	4620      	mov	r0, r4
   bb6f0:	f7ff fecd 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bb6f4:	463d      	mov	r5, r7
    while (s != end) {
   bb6f6:	e7cf      	b.n	bb698 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bb6f8:	2162      	movs	r1, #98	; 0x62
   bb6fa:	e7f8      	b.n	bb6ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bb6fc:	2174      	movs	r1, #116	; 0x74
   bb6fe:	e7f6      	b.n	bb6ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bb700:	216e      	movs	r1, #110	; 0x6e
   bb702:	e7f4      	b.n	bb6ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bb704:	2166      	movs	r1, #102	; 0x66
   bb706:	e7f2      	b.n	bb6ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bb708:	2172      	movs	r1, #114	; 0x72
   bb70a:	e7f0      	b.n	bb6ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bb70c:	6823      	ldr	r3, [r4, #0]
   bb70e:	4632      	mov	r2, r6
   bb710:	68db      	ldr	r3, [r3, #12]
   bb712:	4649      	mov	r1, r9
   bb714:	4620      	mov	r0, r4
   bb716:	4798      	blx	r3
                break;
   bb718:	e7ec      	b.n	bb6f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bb71a:	42bd      	cmp	r5, r7
   bb71c:	d005      	beq.n	bb72a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bb71e:	6823      	ldr	r3, [r4, #0]
   bb720:	1b7a      	subs	r2, r7, r5
   bb722:	689b      	ldr	r3, [r3, #8]
   bb724:	4629      	mov	r1, r5
   bb726:	4620      	mov	r0, r4
   bb728:	4798      	blx	r3
    }
    write('"');
   bb72a:	2122      	movs	r1, #34	; 0x22
   bb72c:	4620      	mov	r0, r4
   bb72e:	f7ff feae 	bl	bb48e <_ZN5spark10JSONWriter5writeEc>
}
   bb732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb736:	bf00      	nop
   bb738:	000bf197 	.word	0x000bf197

000bb73c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bb73c:	b513      	push	{r0, r1, r4, lr}
   bb73e:	4604      	mov	r4, r0
   bb740:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bb744:	f7ff ff5e 	bl	bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bb748:	4620      	mov	r0, r4
   bb74a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bb74e:	f7ff ff97 	bl	bb680 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bb752:	2302      	movs	r3, #2
}
   bb754:	4620      	mov	r0, r4
    state_ = VALUE;
   bb756:	7123      	strb	r3, [r4, #4]
}
   bb758:	b002      	add	sp, #8
   bb75a:	bd10      	pop	{r4, pc}

000bb75c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bb75c:	b513      	push	{r0, r1, r4, lr}
   bb75e:	4604      	mov	r4, r0
   bb760:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bb764:	f7ff ff4e 	bl	bb604 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bb768:	4620      	mov	r0, r4
   bb76a:	e9dd 2100 	ldrd	r2, r1, [sp]
   bb76e:	f7ff ff87 	bl	bb680 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bb772:	2301      	movs	r3, #1
}
   bb774:	4620      	mov	r0, r4
    state_ = NEXT;
   bb776:	7123      	strb	r3, [r4, #4]
}
   bb778:	b002      	add	sp, #8
   bb77a:	bd10      	pop	{r4, pc}

000bb77c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb77c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb77e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb780:	d902      	bls.n	bb788 <pinAvailable+0xc>
    return false;
   bb782:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb784:	b002      	add	sp, #8
   bb786:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb788:	f1a0 030b 	sub.w	r3, r0, #11
   bb78c:	2b02      	cmp	r3, #2
   bb78e:	d81a      	bhi.n	bb7c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb790:	4c17      	ldr	r4, [pc, #92]	; (bb7f0 <pinAvailable+0x74>)
   bb792:	7821      	ldrb	r1, [r4, #0]
   bb794:	f3bf 8f5b 	dmb	ish
   bb798:	f011 0101 	ands.w	r1, r1, #1
   bb79c:	d10b      	bne.n	bb7b6 <pinAvailable+0x3a>
   bb79e:	4620      	mov	r0, r4
   bb7a0:	9101      	str	r1, [sp, #4]
   bb7a2:	f7f8 fc8b 	bl	b40bc <__cxa_guard_acquire>
   bb7a6:	9901      	ldr	r1, [sp, #4]
   bb7a8:	b128      	cbz	r0, bb7b6 <pinAvailable+0x3a>
   bb7aa:	4812      	ldr	r0, [pc, #72]	; (bb7f4 <pinAvailable+0x78>)
   bb7ac:	f7fc faaa 	bl	b7d04 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb7b0:	4620      	mov	r0, r4
   bb7b2:	f7f8 fc88 	bl	b40c6 <__cxa_guard_release>
   bb7b6:	4b0f      	ldr	r3, [pc, #60]	; (bb7f4 <pinAvailable+0x78>)
   bb7b8:	7818      	ldrb	r0, [r3, #0]
   bb7ba:	f7fc f839 	bl	b7830 <hal_spi_is_enabled>
   bb7be:	2800      	cmp	r0, #0
   bb7c0:	d1df      	bne.n	bb782 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb7c2:	2001      	movs	r0, #1
   bb7c4:	e7de      	b.n	bb784 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb7c6:	2801      	cmp	r0, #1
   bb7c8:	d809      	bhi.n	bb7de <pinAvailable+0x62>
   bb7ca:	f000 f897 	bl	bb8fc <_Z19__fetch_global_Wirev>
   bb7ce:	2100      	movs	r1, #0
   bb7d0:	7c00      	ldrb	r0, [r0, #16]
   bb7d2:	f7fb fff5 	bl	b77c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb7d6:	f080 0001 	eor.w	r0, r0, #1
   bb7da:	b2c0      	uxtb	r0, r0
   bb7dc:	e7d2      	b.n	bb784 <pinAvailable+0x8>
   bb7de:	3809      	subs	r0, #9
   bb7e0:	2801      	cmp	r0, #1
   bb7e2:	d8ee      	bhi.n	bb7c2 <pinAvailable+0x46>
   bb7e4:	f000 f84e 	bl	bb884 <_Z22__fetch_global_Serial1v>
   bb7e8:	7c00      	ldrb	r0, [r0, #16]
   bb7ea:	f7fb ff81 	bl	b76f0 <hal_usart_is_enabled>
   bb7ee:	e7f2      	b.n	bb7d6 <pinAvailable+0x5a>
   bb7f0:	2003de10 	.word	0x2003de10
   bb7f4:	2003de14 	.word	0x2003de14

000bb7f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb7f8:	2823      	cmp	r0, #35	; 0x23
{
   bb7fa:	b538      	push	{r3, r4, r5, lr}
   bb7fc:	4604      	mov	r4, r0
   bb7fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb800:	d80a      	bhi.n	bb818 <pinMode+0x20>
   bb802:	29ff      	cmp	r1, #255	; 0xff
   bb804:	d008      	beq.n	bb818 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb806:	f7ff ffb9 	bl	bb77c <pinAvailable>
   bb80a:	b128      	cbz	r0, bb818 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb80c:	4629      	mov	r1, r5
   bb80e:	4620      	mov	r0, r4
}
   bb810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb814:	f7fb be02 	b.w	b741c <HAL_Pin_Mode>
}
   bb818:	bd38      	pop	{r3, r4, r5, pc}

000bb81a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb81a:	b538      	push	{r3, r4, r5, lr}
   bb81c:	4604      	mov	r4, r0
   bb81e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb820:	f7fb fe04 	bl	b742c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb824:	28ff      	cmp	r0, #255	; 0xff
   bb826:	d010      	beq.n	bb84a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb828:	2806      	cmp	r0, #6
   bb82a:	d804      	bhi.n	bb836 <digitalWrite+0x1c>
   bb82c:	234d      	movs	r3, #77	; 0x4d
   bb82e:	fa23 f000 	lsr.w	r0, r3, r0
   bb832:	07c3      	lsls	r3, r0, #31
   bb834:	d409      	bmi.n	bb84a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb836:	4620      	mov	r0, r4
   bb838:	f7ff ffa0 	bl	bb77c <pinAvailable>
   bb83c:	b128      	cbz	r0, bb84a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb83e:	4629      	mov	r1, r5
   bb840:	4620      	mov	r0, r4
}
   bb842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb846:	f7fb bdf9 	b.w	b743c <HAL_GPIO_Write>
}
   bb84a:	bd38      	pop	{r3, r4, r5, pc}

000bb84c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb84c:	4770      	bx	lr
	...

000bb850 <_Z20acquireSerial1Bufferv>:
{
   bb850:	b538      	push	{r3, r4, r5, lr}
   bb852:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb854:	2514      	movs	r5, #20
   bb856:	462a      	mov	r2, r5
   bb858:	2100      	movs	r1, #0
   bb85a:	f000 febf 	bl	bc5dc <memset>
   bb85e:	8025      	strh	r5, [r4, #0]
   bb860:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb862:	4907      	ldr	r1, [pc, #28]	; (bb880 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb864:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb866:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb868:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb86a:	f000 f86d 	bl	bb948 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb86e:	4904      	ldr	r1, [pc, #16]	; (bb880 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb870:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb872:	4628      	mov	r0, r5
   bb874:	f000 f868 	bl	bb948 <_ZnajRKSt9nothrow_t>
    };
   bb878:	60e0      	str	r0, [r4, #12]
}
   bb87a:	4620      	mov	r0, r4
   bb87c:	bd38      	pop	{r3, r4, r5, pc}
   bb87e:	bf00      	nop
   bb880:	000bf19d 	.word	0x000bf19d

000bb884 <_Z22__fetch_global_Serial1v>:
{
   bb884:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb886:	4d0e      	ldr	r5, [pc, #56]	; (bb8c0 <_Z22__fetch_global_Serial1v+0x3c>)
   bb888:	7829      	ldrb	r1, [r5, #0]
   bb88a:	f3bf 8f5b 	dmb	ish
   bb88e:	f011 0401 	ands.w	r4, r1, #1
{
   bb892:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb894:	d111      	bne.n	bb8ba <_Z22__fetch_global_Serial1v+0x36>
   bb896:	4628      	mov	r0, r5
   bb898:	f7f8 fc10 	bl	b40bc <__cxa_guard_acquire>
   bb89c:	b168      	cbz	r0, bb8ba <_Z22__fetch_global_Serial1v+0x36>
   bb89e:	a801      	add	r0, sp, #4
   bb8a0:	f7ff ffd6 	bl	bb850 <_Z20acquireSerial1Bufferv>
   bb8a4:	aa01      	add	r2, sp, #4
   bb8a6:	4621      	mov	r1, r4
   bb8a8:	4806      	ldr	r0, [pc, #24]	; (bb8c4 <_Z22__fetch_global_Serial1v+0x40>)
   bb8aa:	f7ff fc2b 	bl	bb104 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb8ae:	4628      	mov	r0, r5
   bb8b0:	f7f8 fc09 	bl	b40c6 <__cxa_guard_release>
   bb8b4:	4804      	ldr	r0, [pc, #16]	; (bb8c8 <_Z22__fetch_global_Serial1v+0x44>)
   bb8b6:	f000 fe43 	bl	bc540 <atexit>
    return serial1;
}
   bb8ba:	4802      	ldr	r0, [pc, #8]	; (bb8c4 <_Z22__fetch_global_Serial1v+0x40>)
   bb8bc:	b007      	add	sp, #28
   bb8be:	bd30      	pop	{r4, r5, pc}
   bb8c0:	2003e728 	.word	0x2003e728
   bb8c4:	2003e72c 	.word	0x2003e72c
   bb8c8:	000bb84d 	.word	0x000bb84d

000bb8cc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb8cc:	4770      	bx	lr
	...

000bb8d0 <_Z17acquireWireBufferv>:
{
   bb8d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb8d2:	2520      	movs	r5, #32
   bb8d4:	2314      	movs	r3, #20
{
   bb8d6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb8d8:	6003      	str	r3, [r0, #0]
   bb8da:	6085      	str	r5, [r0, #8]
   bb8dc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb8de:	4906      	ldr	r1, [pc, #24]	; (bb8f8 <_Z17acquireWireBufferv+0x28>)
   bb8e0:	4628      	mov	r0, r5
   bb8e2:	f000 f831 	bl	bb948 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb8e6:	4904      	ldr	r1, [pc, #16]	; (bb8f8 <_Z17acquireWireBufferv+0x28>)
	};
   bb8e8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb8ea:	4628      	mov	r0, r5
   bb8ec:	f000 f82c 	bl	bb948 <_ZnajRKSt9nothrow_t>
	};
   bb8f0:	60e0      	str	r0, [r4, #12]
}
   bb8f2:	4620      	mov	r0, r4
   bb8f4:	bd38      	pop	{r3, r4, r5, pc}
   bb8f6:	bf00      	nop
   bb8f8:	000bf19d 	.word	0x000bf19d

000bb8fc <_Z19__fetch_global_Wirev>:
{
   bb8fc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb8fe:	4d0e      	ldr	r5, [pc, #56]	; (bb938 <_Z19__fetch_global_Wirev+0x3c>)
   bb900:	7829      	ldrb	r1, [r5, #0]
   bb902:	f3bf 8f5b 	dmb	ish
   bb906:	f011 0401 	ands.w	r4, r1, #1
{
   bb90a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb90c:	d111      	bne.n	bb932 <_Z19__fetch_global_Wirev+0x36>
   bb90e:	4628      	mov	r0, r5
   bb910:	f7f8 fbd4 	bl	b40bc <__cxa_guard_acquire>
   bb914:	b168      	cbz	r0, bb932 <_Z19__fetch_global_Wirev+0x36>
   bb916:	a801      	add	r0, sp, #4
   bb918:	f7ff ffda 	bl	bb8d0 <_Z17acquireWireBufferv>
   bb91c:	aa01      	add	r2, sp, #4
   bb91e:	4621      	mov	r1, r4
   bb920:	4806      	ldr	r0, [pc, #24]	; (bb93c <_Z19__fetch_global_Wirev+0x40>)
   bb922:	f7ff fc4d 	bl	bb1c0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb926:	4628      	mov	r0, r5
   bb928:	f7f8 fbcd 	bl	b40c6 <__cxa_guard_release>
   bb92c:	4804      	ldr	r0, [pc, #16]	; (bb940 <_Z19__fetch_global_Wirev+0x44>)
   bb92e:	f000 fe07 	bl	bc540 <atexit>
	return wire;
}
   bb932:	4802      	ldr	r0, [pc, #8]	; (bb93c <_Z19__fetch_global_Wirev+0x40>)
   bb934:	b007      	add	sp, #28
   bb936:	bd30      	pop	{r4, r5, pc}
   bb938:	2003e744 	.word	0x2003e744
   bb93c:	2003e748 	.word	0x2003e748
   bb940:	000bb8cd 	.word	0x000bb8cd

000bb944 <_ZnwjRKSt9nothrow_t>:
   bb944:	f7f8 bba7 	b.w	b4096 <_Znwj>

000bb948 <_ZnajRKSt9nothrow_t>:
   bb948:	f7f8 bba7 	b.w	b409a <_Znaj>

000bb94c <_ZSt25__throw_bad_function_callv>:
   bb94c:	b508      	push	{r3, lr}
   bb94e:	f7fc f93d 	bl	b7bcc <abort>
	...

000bb954 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb954:	4901      	ldr	r1, [pc, #4]	; (bb95c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb956:	f000 b8f9 	b.w	bbb4c <_ZNKSt9type_infoeqERKS_>
   bb95a:	bf00      	nop
   bb95c:	000bf1b8 	.word	0x000bf1b8

000bb960 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb962:	2400      	movs	r4, #0
   bb964:	2310      	movs	r3, #16
   bb966:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb96a:	6803      	ldr	r3, [r0, #0]
   bb96c:	4615      	mov	r5, r2
   bb96e:	699e      	ldr	r6, [r3, #24]
   bb970:	6812      	ldr	r2, [r2, #0]
   bb972:	466b      	mov	r3, sp
   bb974:	e9cd 4400 	strd	r4, r4, [sp]
   bb978:	47b0      	blx	r6
   bb97a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb97e:	f003 0306 	and.w	r3, r3, #6
   bb982:	2b06      	cmp	r3, #6
   bb984:	bf03      	ittte	eq
   bb986:	9b00      	ldreq	r3, [sp, #0]
   bb988:	602b      	streq	r3, [r5, #0]
   bb98a:	2001      	moveq	r0, #1
   bb98c:	4620      	movne	r0, r4
   bb98e:	b004      	add	sp, #16
   bb990:	bd70      	pop	{r4, r5, r6, pc}

000bb992 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb992:	9800      	ldr	r0, [sp, #0]
   bb994:	4290      	cmp	r0, r2
   bb996:	bf14      	ite	ne
   bb998:	2001      	movne	r0, #1
   bb99a:	2006      	moveq	r0, #6
   bb99c:	4770      	bx	lr
	...

000bb9a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb9a0:	b510      	push	{r4, lr}
   bb9a2:	4b03      	ldr	r3, [pc, #12]	; (bb9b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb9a4:	6003      	str	r3, [r0, #0]
   bb9a6:	4604      	mov	r4, r0
   bb9a8:	f000 f8cd 	bl	bbb46 <_ZNSt9type_infoD1Ev>
   bb9ac:	4620      	mov	r0, r4
   bb9ae:	bd10      	pop	{r4, pc}
   bb9b0:	000bf1f8 	.word	0x000bf1f8

000bb9b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb9b4:	b510      	push	{r4, lr}
   bb9b6:	4604      	mov	r4, r0
   bb9b8:	f7ff fff2 	bl	bb9a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb9bc:	4620      	mov	r0, r4
   bb9be:	2108      	movs	r1, #8
   bb9c0:	f7f8 fb6d 	bl	b409e <_ZdlPvj>
   bb9c4:	4620      	mov	r0, r4
   bb9c6:	bd10      	pop	{r4, pc}

000bb9c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb9cc:	461f      	mov	r7, r3
   bb9ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb9d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb9d6:	4598      	cmp	r8, r3
   bb9d8:	4606      	mov	r6, r0
   bb9da:	4615      	mov	r5, r2
   bb9dc:	d107      	bne.n	bb9ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb9de:	9907      	ldr	r1, [sp, #28]
   bb9e0:	f000 f8b4 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bb9e4:	b118      	cbz	r0, bb9ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb9e6:	7165      	strb	r5, [r4, #5]
   bb9e8:	2000      	movs	r0, #0
   bb9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb9ee:	4639      	mov	r1, r7
   bb9f0:	4630      	mov	r0, r6
   bb9f2:	f000 f8ab 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bb9f6:	2800      	cmp	r0, #0
   bb9f8:	d0f6      	beq.n	bb9e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb9fa:	2301      	movs	r3, #1
   bb9fc:	f8c4 8000 	str.w	r8, [r4]
   bba00:	7125      	strb	r5, [r4, #4]
   bba02:	71a3      	strb	r3, [r4, #6]
   bba04:	e7f0      	b.n	bb9e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bba06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bba06:	b538      	push	{r3, r4, r5, lr}
   bba08:	4615      	mov	r5, r2
   bba0a:	461c      	mov	r4, r3
   bba0c:	f000 f89e 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bba10:	b120      	cbz	r0, bba1c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bba12:	2308      	movs	r3, #8
   bba14:	60e3      	str	r3, [r4, #12]
   bba16:	2306      	movs	r3, #6
   bba18:	6025      	str	r5, [r4, #0]
   bba1a:	7123      	strb	r3, [r4, #4]
   bba1c:	bd38      	pop	{r3, r4, r5, pc}

000bba1e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bba1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bba20:	4605      	mov	r5, r0
   bba22:	460c      	mov	r4, r1
   bba24:	9201      	str	r2, [sp, #4]
   bba26:	461e      	mov	r6, r3
   bba28:	f000 f890 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bba2c:	b950      	cbnz	r0, bba44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba2e:	2e03      	cmp	r6, #3
   bba30:	d808      	bhi.n	bba44 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba32:	6823      	ldr	r3, [r4, #0]
   bba34:	9a01      	ldr	r2, [sp, #4]
   bba36:	695b      	ldr	r3, [r3, #20]
   bba38:	4629      	mov	r1, r5
   bba3a:	4620      	mov	r0, r4
   bba3c:	b002      	add	sp, #8
   bba3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bba42:	4718      	bx	r3
   bba44:	b002      	add	sp, #8
   bba46:	bd70      	pop	{r4, r5, r6, pc}

000bba48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bba48:	b510      	push	{r4, lr}
   bba4a:	4b03      	ldr	r3, [pc, #12]	; (bba58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bba4c:	6003      	str	r3, [r0, #0]
   bba4e:	4604      	mov	r4, r0
   bba50:	f7ff ffa6 	bl	bb9a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bba54:	4620      	mov	r0, r4
   bba56:	bd10      	pop	{r4, pc}
   bba58:	000bf258 	.word	0x000bf258

000bba5c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bba5c:	b510      	push	{r4, lr}
   bba5e:	4604      	mov	r4, r0
   bba60:	f7ff fff2 	bl	bba48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bba64:	4620      	mov	r0, r4
   bba66:	210c      	movs	r1, #12
   bba68:	f7f8 fb19 	bl	b409e <_ZdlPvj>
   bba6c:	4620      	mov	r0, r4
   bba6e:	bd10      	pop	{r4, pc}

000bba70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bba70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bba72:	9f08      	ldr	r7, [sp, #32]
   bba74:	4297      	cmp	r7, r2
   bba76:	4605      	mov	r5, r0
   bba78:	460e      	mov	r6, r1
   bba7a:	4614      	mov	r4, r2
   bba7c:	d00a      	beq.n	bba94 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bba7e:	68a8      	ldr	r0, [r5, #8]
   bba80:	6802      	ldr	r2, [r0, #0]
   bba82:	9708      	str	r7, [sp, #32]
   bba84:	6a15      	ldr	r5, [r2, #32]
   bba86:	4631      	mov	r1, r6
   bba88:	4622      	mov	r2, r4
   bba8a:	46ac      	mov	ip, r5
   bba8c:	b003      	add	sp, #12
   bba8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bba92:	4760      	bx	ip
   bba94:	4619      	mov	r1, r3
   bba96:	9301      	str	r3, [sp, #4]
   bba98:	f000 f858 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bba9c:	9b01      	ldr	r3, [sp, #4]
   bba9e:	2800      	cmp	r0, #0
   bbaa0:	d0ed      	beq.n	bba7e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bbaa2:	2006      	movs	r0, #6
   bbaa4:	b003      	add	sp, #12
   bbaa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbaa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbaa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbaac:	460d      	mov	r5, r1
   bbaae:	4619      	mov	r1, r3
   bbab0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbab4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbab8:	4681      	mov	r9, r0
   bbaba:	4617      	mov	r7, r2
   bbabc:	4698      	mov	r8, r3
   bbabe:	f000 f845 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bbac2:	b190      	cbz	r0, bbaea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbac4:	2d00      	cmp	r5, #0
   bbac6:	6034      	str	r4, [r6, #0]
   bbac8:	7137      	strb	r7, [r6, #4]
   bbaca:	db09      	blt.n	bbae0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbacc:	1961      	adds	r1, r4, r5
   bbace:	458a      	cmp	sl, r1
   bbad0:	bf0c      	ite	eq
   bbad2:	2106      	moveq	r1, #6
   bbad4:	2101      	movne	r1, #1
   bbad6:	71b1      	strb	r1, [r6, #6]
   bbad8:	2000      	movs	r0, #0
   bbada:	b001      	add	sp, #4
   bbadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbae0:	3502      	adds	r5, #2
   bbae2:	d1f9      	bne.n	bbad8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbae4:	2301      	movs	r3, #1
   bbae6:	71b3      	strb	r3, [r6, #6]
   bbae8:	e7f6      	b.n	bbad8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbaea:	4554      	cmp	r4, sl
   bbaec:	d106      	bne.n	bbafc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbaee:	4659      	mov	r1, fp
   bbaf0:	4648      	mov	r0, r9
   bbaf2:	f000 f82b 	bl	bbb4c <_ZNKSt9type_infoeqERKS_>
   bbaf6:	b108      	cbz	r0, bbafc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbaf8:	7177      	strb	r7, [r6, #5]
   bbafa:	e7ed      	b.n	bbad8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbafc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbb00:	6803      	ldr	r3, [r0, #0]
   bbb02:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbb06:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbb0a:	69dc      	ldr	r4, [r3, #28]
   bbb0c:	463a      	mov	r2, r7
   bbb0e:	4643      	mov	r3, r8
   bbb10:	4629      	mov	r1, r5
   bbb12:	46a4      	mov	ip, r4
   bbb14:	b001      	add	sp, #4
   bbb16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbb1a:	4760      	bx	ip

000bbb1c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbb20:	4607      	mov	r7, r0
   bbb22:	460c      	mov	r4, r1
   bbb24:	4615      	mov	r5, r2
   bbb26:	461e      	mov	r6, r3
   bbb28:	f7ff ff6d 	bl	bba06 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbb2c:	b948      	cbnz	r0, bbb42 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbb2e:	68b8      	ldr	r0, [r7, #8]
   bbb30:	6803      	ldr	r3, [r0, #0]
   bbb32:	699f      	ldr	r7, [r3, #24]
   bbb34:	462a      	mov	r2, r5
   bbb36:	4633      	mov	r3, r6
   bbb38:	4621      	mov	r1, r4
   bbb3a:	46bc      	mov	ip, r7
   bbb3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbb40:	4760      	bx	ip
   bbb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbb46 <_ZNSt9type_infoD1Ev>:
   bbb46:	4770      	bx	lr

000bbb48 <_ZNKSt9type_info14__is_pointer_pEv>:
   bbb48:	2000      	movs	r0, #0
   bbb4a:	4770      	bx	lr

000bbb4c <_ZNKSt9type_infoeqERKS_>:
   bbb4c:	4281      	cmp	r1, r0
   bbb4e:	b508      	push	{r3, lr}
   bbb50:	d00e      	beq.n	bbb70 <_ZNKSt9type_infoeqERKS_+0x24>
   bbb52:	6840      	ldr	r0, [r0, #4]
   bbb54:	7803      	ldrb	r3, [r0, #0]
   bbb56:	2b2a      	cmp	r3, #42	; 0x2a
   bbb58:	d00c      	beq.n	bbb74 <_ZNKSt9type_infoeqERKS_+0x28>
   bbb5a:	6849      	ldr	r1, [r1, #4]
   bbb5c:	780b      	ldrb	r3, [r1, #0]
   bbb5e:	2b2a      	cmp	r3, #42	; 0x2a
   bbb60:	bf08      	it	eq
   bbb62:	3101      	addeq	r1, #1
   bbb64:	f000 fd96 	bl	bc694 <strcmp>
   bbb68:	fab0 f080 	clz	r0, r0
   bbb6c:	0940      	lsrs	r0, r0, #5
   bbb6e:	bd08      	pop	{r3, pc}
   bbb70:	2001      	movs	r0, #1
   bbb72:	e7fc      	b.n	bbb6e <_ZNKSt9type_infoeqERKS_+0x22>
   bbb74:	2000      	movs	r0, #0
   bbb76:	e7fa      	b.n	bbb6e <_ZNKSt9type_infoeqERKS_+0x22>

000bbb78 <__aeabi_drsub>:
   bbb78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbb7c:	e002      	b.n	bbb84 <__adddf3>
   bbb7e:	bf00      	nop

000bbb80 <__aeabi_dsub>:
   bbb80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbb84 <__adddf3>:
   bbb84:	b530      	push	{r4, r5, lr}
   bbb86:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbb8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbb8e:	ea94 0f05 	teq	r4, r5
   bbb92:	bf08      	it	eq
   bbb94:	ea90 0f02 	teqeq	r0, r2
   bbb98:	bf1f      	itttt	ne
   bbb9a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbb9e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbba2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbba6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbbaa:	f000 80e2 	beq.w	bbd72 <__adddf3+0x1ee>
   bbbae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbbb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbbb6:	bfb8      	it	lt
   bbbb8:	426d      	neglt	r5, r5
   bbbba:	dd0c      	ble.n	bbbd6 <__adddf3+0x52>
   bbbbc:	442c      	add	r4, r5
   bbbbe:	ea80 0202 	eor.w	r2, r0, r2
   bbbc2:	ea81 0303 	eor.w	r3, r1, r3
   bbbc6:	ea82 0000 	eor.w	r0, r2, r0
   bbbca:	ea83 0101 	eor.w	r1, r3, r1
   bbbce:	ea80 0202 	eor.w	r2, r0, r2
   bbbd2:	ea81 0303 	eor.w	r3, r1, r3
   bbbd6:	2d36      	cmp	r5, #54	; 0x36
   bbbd8:	bf88      	it	hi
   bbbda:	bd30      	pophi	{r4, r5, pc}
   bbbdc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbbe0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbbe4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bbbe8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bbbec:	d002      	beq.n	bbbf4 <__adddf3+0x70>
   bbbee:	4240      	negs	r0, r0
   bbbf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbbf4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bbbf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbbfc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bbc00:	d002      	beq.n	bbc08 <__adddf3+0x84>
   bbc02:	4252      	negs	r2, r2
   bbc04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bbc08:	ea94 0f05 	teq	r4, r5
   bbc0c:	f000 80a7 	beq.w	bbd5e <__adddf3+0x1da>
   bbc10:	f1a4 0401 	sub.w	r4, r4, #1
   bbc14:	f1d5 0e20 	rsbs	lr, r5, #32
   bbc18:	db0d      	blt.n	bbc36 <__adddf3+0xb2>
   bbc1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bbc1e:	fa22 f205 	lsr.w	r2, r2, r5
   bbc22:	1880      	adds	r0, r0, r2
   bbc24:	f141 0100 	adc.w	r1, r1, #0
   bbc28:	fa03 f20e 	lsl.w	r2, r3, lr
   bbc2c:	1880      	adds	r0, r0, r2
   bbc2e:	fa43 f305 	asr.w	r3, r3, r5
   bbc32:	4159      	adcs	r1, r3
   bbc34:	e00e      	b.n	bbc54 <__adddf3+0xd0>
   bbc36:	f1a5 0520 	sub.w	r5, r5, #32
   bbc3a:	f10e 0e20 	add.w	lr, lr, #32
   bbc3e:	2a01      	cmp	r2, #1
   bbc40:	fa03 fc0e 	lsl.w	ip, r3, lr
   bbc44:	bf28      	it	cs
   bbc46:	f04c 0c02 	orrcs.w	ip, ip, #2
   bbc4a:	fa43 f305 	asr.w	r3, r3, r5
   bbc4e:	18c0      	adds	r0, r0, r3
   bbc50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bbc54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbc58:	d507      	bpl.n	bbc6a <__adddf3+0xe6>
   bbc5a:	f04f 0e00 	mov.w	lr, #0
   bbc5e:	f1dc 0c00 	rsbs	ip, ip, #0
   bbc62:	eb7e 0000 	sbcs.w	r0, lr, r0
   bbc66:	eb6e 0101 	sbc.w	r1, lr, r1
   bbc6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bbc6e:	d31b      	bcc.n	bbca8 <__adddf3+0x124>
   bbc70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bbc74:	d30c      	bcc.n	bbc90 <__adddf3+0x10c>
   bbc76:	0849      	lsrs	r1, r1, #1
   bbc78:	ea5f 0030 	movs.w	r0, r0, rrx
   bbc7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bbc80:	f104 0401 	add.w	r4, r4, #1
   bbc84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bbc88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bbc8c:	f080 809a 	bcs.w	bbdc4 <__adddf3+0x240>
   bbc90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bbc94:	bf08      	it	eq
   bbc96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc9a:	f150 0000 	adcs.w	r0, r0, #0
   bbc9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbca2:	ea41 0105 	orr.w	r1, r1, r5
   bbca6:	bd30      	pop	{r4, r5, pc}
   bbca8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bbcac:	4140      	adcs	r0, r0
   bbcae:	eb41 0101 	adc.w	r1, r1, r1
   bbcb2:	3c01      	subs	r4, #1
   bbcb4:	bf28      	it	cs
   bbcb6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bbcba:	d2e9      	bcs.n	bbc90 <__adddf3+0x10c>
   bbcbc:	f091 0f00 	teq	r1, #0
   bbcc0:	bf04      	itt	eq
   bbcc2:	4601      	moveq	r1, r0
   bbcc4:	2000      	moveq	r0, #0
   bbcc6:	fab1 f381 	clz	r3, r1
   bbcca:	bf08      	it	eq
   bbccc:	3320      	addeq	r3, #32
   bbcce:	f1a3 030b 	sub.w	r3, r3, #11
   bbcd2:	f1b3 0220 	subs.w	r2, r3, #32
   bbcd6:	da0c      	bge.n	bbcf2 <__adddf3+0x16e>
   bbcd8:	320c      	adds	r2, #12
   bbcda:	dd08      	ble.n	bbcee <__adddf3+0x16a>
   bbcdc:	f102 0c14 	add.w	ip, r2, #20
   bbce0:	f1c2 020c 	rsb	r2, r2, #12
   bbce4:	fa01 f00c 	lsl.w	r0, r1, ip
   bbce8:	fa21 f102 	lsr.w	r1, r1, r2
   bbcec:	e00c      	b.n	bbd08 <__adddf3+0x184>
   bbcee:	f102 0214 	add.w	r2, r2, #20
   bbcf2:	bfd8      	it	le
   bbcf4:	f1c2 0c20 	rsble	ip, r2, #32
   bbcf8:	fa01 f102 	lsl.w	r1, r1, r2
   bbcfc:	fa20 fc0c 	lsr.w	ip, r0, ip
   bbd00:	bfdc      	itt	le
   bbd02:	ea41 010c 	orrle.w	r1, r1, ip
   bbd06:	4090      	lslle	r0, r2
   bbd08:	1ae4      	subs	r4, r4, r3
   bbd0a:	bfa2      	ittt	ge
   bbd0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bbd10:	4329      	orrge	r1, r5
   bbd12:	bd30      	popge	{r4, r5, pc}
   bbd14:	ea6f 0404 	mvn.w	r4, r4
   bbd18:	3c1f      	subs	r4, #31
   bbd1a:	da1c      	bge.n	bbd56 <__adddf3+0x1d2>
   bbd1c:	340c      	adds	r4, #12
   bbd1e:	dc0e      	bgt.n	bbd3e <__adddf3+0x1ba>
   bbd20:	f104 0414 	add.w	r4, r4, #20
   bbd24:	f1c4 0220 	rsb	r2, r4, #32
   bbd28:	fa20 f004 	lsr.w	r0, r0, r4
   bbd2c:	fa01 f302 	lsl.w	r3, r1, r2
   bbd30:	ea40 0003 	orr.w	r0, r0, r3
   bbd34:	fa21 f304 	lsr.w	r3, r1, r4
   bbd38:	ea45 0103 	orr.w	r1, r5, r3
   bbd3c:	bd30      	pop	{r4, r5, pc}
   bbd3e:	f1c4 040c 	rsb	r4, r4, #12
   bbd42:	f1c4 0220 	rsb	r2, r4, #32
   bbd46:	fa20 f002 	lsr.w	r0, r0, r2
   bbd4a:	fa01 f304 	lsl.w	r3, r1, r4
   bbd4e:	ea40 0003 	orr.w	r0, r0, r3
   bbd52:	4629      	mov	r1, r5
   bbd54:	bd30      	pop	{r4, r5, pc}
   bbd56:	fa21 f004 	lsr.w	r0, r1, r4
   bbd5a:	4629      	mov	r1, r5
   bbd5c:	bd30      	pop	{r4, r5, pc}
   bbd5e:	f094 0f00 	teq	r4, #0
   bbd62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bbd66:	bf06      	itte	eq
   bbd68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bbd6c:	3401      	addeq	r4, #1
   bbd6e:	3d01      	subne	r5, #1
   bbd70:	e74e      	b.n	bbc10 <__adddf3+0x8c>
   bbd72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbd76:	bf18      	it	ne
   bbd78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbd7c:	d029      	beq.n	bbdd2 <__adddf3+0x24e>
   bbd7e:	ea94 0f05 	teq	r4, r5
   bbd82:	bf08      	it	eq
   bbd84:	ea90 0f02 	teqeq	r0, r2
   bbd88:	d005      	beq.n	bbd96 <__adddf3+0x212>
   bbd8a:	ea54 0c00 	orrs.w	ip, r4, r0
   bbd8e:	bf04      	itt	eq
   bbd90:	4619      	moveq	r1, r3
   bbd92:	4610      	moveq	r0, r2
   bbd94:	bd30      	pop	{r4, r5, pc}
   bbd96:	ea91 0f03 	teq	r1, r3
   bbd9a:	bf1e      	ittt	ne
   bbd9c:	2100      	movne	r1, #0
   bbd9e:	2000      	movne	r0, #0
   bbda0:	bd30      	popne	{r4, r5, pc}
   bbda2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bbda6:	d105      	bne.n	bbdb4 <__adddf3+0x230>
   bbda8:	0040      	lsls	r0, r0, #1
   bbdaa:	4149      	adcs	r1, r1
   bbdac:	bf28      	it	cs
   bbdae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bbdb2:	bd30      	pop	{r4, r5, pc}
   bbdb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bbdb8:	bf3c      	itt	cc
   bbdba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bbdbe:	bd30      	popcc	{r4, r5, pc}
   bbdc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbdc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bbdc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbdcc:	f04f 0000 	mov.w	r0, #0
   bbdd0:	bd30      	pop	{r4, r5, pc}
   bbdd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbdd6:	bf1a      	itte	ne
   bbdd8:	4619      	movne	r1, r3
   bbdda:	4610      	movne	r0, r2
   bbddc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bbde0:	bf1c      	itt	ne
   bbde2:	460b      	movne	r3, r1
   bbde4:	4602      	movne	r2, r0
   bbde6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbdea:	bf06      	itte	eq
   bbdec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bbdf0:	ea91 0f03 	teqeq	r1, r3
   bbdf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bbdf8:	bd30      	pop	{r4, r5, pc}
   bbdfa:	bf00      	nop

000bbdfc <__aeabi_ui2d>:
   bbdfc:	f090 0f00 	teq	r0, #0
   bbe00:	bf04      	itt	eq
   bbe02:	2100      	moveq	r1, #0
   bbe04:	4770      	bxeq	lr
   bbe06:	b530      	push	{r4, r5, lr}
   bbe08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe10:	f04f 0500 	mov.w	r5, #0
   bbe14:	f04f 0100 	mov.w	r1, #0
   bbe18:	e750      	b.n	bbcbc <__adddf3+0x138>
   bbe1a:	bf00      	nop

000bbe1c <__aeabi_i2d>:
   bbe1c:	f090 0f00 	teq	r0, #0
   bbe20:	bf04      	itt	eq
   bbe22:	2100      	moveq	r1, #0
   bbe24:	4770      	bxeq	lr
   bbe26:	b530      	push	{r4, r5, lr}
   bbe28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbe34:	bf48      	it	mi
   bbe36:	4240      	negmi	r0, r0
   bbe38:	f04f 0100 	mov.w	r1, #0
   bbe3c:	e73e      	b.n	bbcbc <__adddf3+0x138>
   bbe3e:	bf00      	nop

000bbe40 <__aeabi_f2d>:
   bbe40:	0042      	lsls	r2, r0, #1
   bbe42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbe46:	ea4f 0131 	mov.w	r1, r1, rrx
   bbe4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbe4e:	bf1f      	itttt	ne
   bbe50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbe54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbe58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbe5c:	4770      	bxne	lr
   bbe5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbe62:	bf08      	it	eq
   bbe64:	4770      	bxeq	lr
   bbe66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbe6a:	bf04      	itt	eq
   bbe6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbe70:	4770      	bxeq	lr
   bbe72:	b530      	push	{r4, r5, lr}
   bbe74:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbe78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbe7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbe80:	e71c      	b.n	bbcbc <__adddf3+0x138>
   bbe82:	bf00      	nop

000bbe84 <__aeabi_ul2d>:
   bbe84:	ea50 0201 	orrs.w	r2, r0, r1
   bbe88:	bf08      	it	eq
   bbe8a:	4770      	bxeq	lr
   bbe8c:	b530      	push	{r4, r5, lr}
   bbe8e:	f04f 0500 	mov.w	r5, #0
   bbe92:	e00a      	b.n	bbeaa <__aeabi_l2d+0x16>

000bbe94 <__aeabi_l2d>:
   bbe94:	ea50 0201 	orrs.w	r2, r0, r1
   bbe98:	bf08      	it	eq
   bbe9a:	4770      	bxeq	lr
   bbe9c:	b530      	push	{r4, r5, lr}
   bbe9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbea2:	d502      	bpl.n	bbeaa <__aeabi_l2d+0x16>
   bbea4:	4240      	negs	r0, r0
   bbea6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbeaa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbeae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbeb2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbeb6:	f43f aed8 	beq.w	bbc6a <__adddf3+0xe6>
   bbeba:	f04f 0203 	mov.w	r2, #3
   bbebe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbec2:	bf18      	it	ne
   bbec4:	3203      	addne	r2, #3
   bbec6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbeca:	bf18      	it	ne
   bbecc:	3203      	addne	r2, #3
   bbece:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbed2:	f1c2 0320 	rsb	r3, r2, #32
   bbed6:	fa00 fc03 	lsl.w	ip, r0, r3
   bbeda:	fa20 f002 	lsr.w	r0, r0, r2
   bbede:	fa01 fe03 	lsl.w	lr, r1, r3
   bbee2:	ea40 000e 	orr.w	r0, r0, lr
   bbee6:	fa21 f102 	lsr.w	r1, r1, r2
   bbeea:	4414      	add	r4, r2
   bbeec:	e6bd      	b.n	bbc6a <__adddf3+0xe6>
   bbeee:	bf00      	nop

000bbef0 <__aeabi_dmul>:
   bbef0:	b570      	push	{r4, r5, r6, lr}
   bbef2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbef6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbefa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbefe:	bf1d      	ittte	ne
   bbf00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbf04:	ea94 0f0c 	teqne	r4, ip
   bbf08:	ea95 0f0c 	teqne	r5, ip
   bbf0c:	f000 f8de 	bleq	bc0cc <__aeabi_dmul+0x1dc>
   bbf10:	442c      	add	r4, r5
   bbf12:	ea81 0603 	eor.w	r6, r1, r3
   bbf16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbf1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbf1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbf22:	bf18      	it	ne
   bbf24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbf28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbf30:	d038      	beq.n	bbfa4 <__aeabi_dmul+0xb4>
   bbf32:	fba0 ce02 	umull	ip, lr, r0, r2
   bbf36:	f04f 0500 	mov.w	r5, #0
   bbf3a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbf3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbf42:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbf46:	f04f 0600 	mov.w	r6, #0
   bbf4a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbf4e:	f09c 0f00 	teq	ip, #0
   bbf52:	bf18      	it	ne
   bbf54:	f04e 0e01 	orrne.w	lr, lr, #1
   bbf58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbf5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbf60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbf64:	d204      	bcs.n	bbf70 <__aeabi_dmul+0x80>
   bbf66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbf6a:	416d      	adcs	r5, r5
   bbf6c:	eb46 0606 	adc.w	r6, r6, r6
   bbf70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbf74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbf78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbf7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbf80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbf84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbf88:	bf88      	it	hi
   bbf8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbf8e:	d81e      	bhi.n	bbfce <__aeabi_dmul+0xde>
   bbf90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbf94:	bf08      	it	eq
   bbf96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbf9a:	f150 0000 	adcs.w	r0, r0, #0
   bbf9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbfa2:	bd70      	pop	{r4, r5, r6, pc}
   bbfa4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbfa8:	ea46 0101 	orr.w	r1, r6, r1
   bbfac:	ea40 0002 	orr.w	r0, r0, r2
   bbfb0:	ea81 0103 	eor.w	r1, r1, r3
   bbfb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbfb8:	bfc2      	ittt	gt
   bbfba:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbfbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbfc2:	bd70      	popgt	{r4, r5, r6, pc}
   bbfc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbfc8:	f04f 0e00 	mov.w	lr, #0
   bbfcc:	3c01      	subs	r4, #1
   bbfce:	f300 80ab 	bgt.w	bc128 <__aeabi_dmul+0x238>
   bbfd2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbfd6:	bfde      	ittt	le
   bbfd8:	2000      	movle	r0, #0
   bbfda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbfde:	bd70      	pople	{r4, r5, r6, pc}
   bbfe0:	f1c4 0400 	rsb	r4, r4, #0
   bbfe4:	3c20      	subs	r4, #32
   bbfe6:	da35      	bge.n	bc054 <__aeabi_dmul+0x164>
   bbfe8:	340c      	adds	r4, #12
   bbfea:	dc1b      	bgt.n	bc024 <__aeabi_dmul+0x134>
   bbfec:	f104 0414 	add.w	r4, r4, #20
   bbff0:	f1c4 0520 	rsb	r5, r4, #32
   bbff4:	fa00 f305 	lsl.w	r3, r0, r5
   bbff8:	fa20 f004 	lsr.w	r0, r0, r4
   bbffc:	fa01 f205 	lsl.w	r2, r1, r5
   bc000:	ea40 0002 	orr.w	r0, r0, r2
   bc004:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc008:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc00c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc010:	fa21 f604 	lsr.w	r6, r1, r4
   bc014:	eb42 0106 	adc.w	r1, r2, r6
   bc018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc01c:	bf08      	it	eq
   bc01e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc022:	bd70      	pop	{r4, r5, r6, pc}
   bc024:	f1c4 040c 	rsb	r4, r4, #12
   bc028:	f1c4 0520 	rsb	r5, r4, #32
   bc02c:	fa00 f304 	lsl.w	r3, r0, r4
   bc030:	fa20 f005 	lsr.w	r0, r0, r5
   bc034:	fa01 f204 	lsl.w	r2, r1, r4
   bc038:	ea40 0002 	orr.w	r0, r0, r2
   bc03c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc040:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc044:	f141 0100 	adc.w	r1, r1, #0
   bc048:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc04c:	bf08      	it	eq
   bc04e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc052:	bd70      	pop	{r4, r5, r6, pc}
   bc054:	f1c4 0520 	rsb	r5, r4, #32
   bc058:	fa00 f205 	lsl.w	r2, r0, r5
   bc05c:	ea4e 0e02 	orr.w	lr, lr, r2
   bc060:	fa20 f304 	lsr.w	r3, r0, r4
   bc064:	fa01 f205 	lsl.w	r2, r1, r5
   bc068:	ea43 0302 	orr.w	r3, r3, r2
   bc06c:	fa21 f004 	lsr.w	r0, r1, r4
   bc070:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc074:	fa21 f204 	lsr.w	r2, r1, r4
   bc078:	ea20 0002 	bic.w	r0, r0, r2
   bc07c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc084:	bf08      	it	eq
   bc086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc08a:	bd70      	pop	{r4, r5, r6, pc}
   bc08c:	f094 0f00 	teq	r4, #0
   bc090:	d10f      	bne.n	bc0b2 <__aeabi_dmul+0x1c2>
   bc092:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc096:	0040      	lsls	r0, r0, #1
   bc098:	eb41 0101 	adc.w	r1, r1, r1
   bc09c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc0a0:	bf08      	it	eq
   bc0a2:	3c01      	subeq	r4, #1
   bc0a4:	d0f7      	beq.n	bc096 <__aeabi_dmul+0x1a6>
   bc0a6:	ea41 0106 	orr.w	r1, r1, r6
   bc0aa:	f095 0f00 	teq	r5, #0
   bc0ae:	bf18      	it	ne
   bc0b0:	4770      	bxne	lr
   bc0b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc0b6:	0052      	lsls	r2, r2, #1
   bc0b8:	eb43 0303 	adc.w	r3, r3, r3
   bc0bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc0c0:	bf08      	it	eq
   bc0c2:	3d01      	subeq	r5, #1
   bc0c4:	d0f7      	beq.n	bc0b6 <__aeabi_dmul+0x1c6>
   bc0c6:	ea43 0306 	orr.w	r3, r3, r6
   bc0ca:	4770      	bx	lr
   bc0cc:	ea94 0f0c 	teq	r4, ip
   bc0d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc0d4:	bf18      	it	ne
   bc0d6:	ea95 0f0c 	teqne	r5, ip
   bc0da:	d00c      	beq.n	bc0f6 <__aeabi_dmul+0x206>
   bc0dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0e0:	bf18      	it	ne
   bc0e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc0e6:	d1d1      	bne.n	bc08c <__aeabi_dmul+0x19c>
   bc0e8:	ea81 0103 	eor.w	r1, r1, r3
   bc0ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc0f0:	f04f 0000 	mov.w	r0, #0
   bc0f4:	bd70      	pop	{r4, r5, r6, pc}
   bc0f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc0fa:	bf06      	itte	eq
   bc0fc:	4610      	moveq	r0, r2
   bc0fe:	4619      	moveq	r1, r3
   bc100:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc104:	d019      	beq.n	bc13a <__aeabi_dmul+0x24a>
   bc106:	ea94 0f0c 	teq	r4, ip
   bc10a:	d102      	bne.n	bc112 <__aeabi_dmul+0x222>
   bc10c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc110:	d113      	bne.n	bc13a <__aeabi_dmul+0x24a>
   bc112:	ea95 0f0c 	teq	r5, ip
   bc116:	d105      	bne.n	bc124 <__aeabi_dmul+0x234>
   bc118:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc11c:	bf1c      	itt	ne
   bc11e:	4610      	movne	r0, r2
   bc120:	4619      	movne	r1, r3
   bc122:	d10a      	bne.n	bc13a <__aeabi_dmul+0x24a>
   bc124:	ea81 0103 	eor.w	r1, r1, r3
   bc128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc12c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc130:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc134:	f04f 0000 	mov.w	r0, #0
   bc138:	bd70      	pop	{r4, r5, r6, pc}
   bc13a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc13e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc142:	bd70      	pop	{r4, r5, r6, pc}

000bc144 <__aeabi_ddiv>:
   bc144:	b570      	push	{r4, r5, r6, lr}
   bc146:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc14a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc14e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc152:	bf1d      	ittte	ne
   bc154:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc158:	ea94 0f0c 	teqne	r4, ip
   bc15c:	ea95 0f0c 	teqne	r5, ip
   bc160:	f000 f8a7 	bleq	bc2b2 <__aeabi_ddiv+0x16e>
   bc164:	eba4 0405 	sub.w	r4, r4, r5
   bc168:	ea81 0e03 	eor.w	lr, r1, r3
   bc16c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc170:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc174:	f000 8088 	beq.w	bc288 <__aeabi_ddiv+0x144>
   bc178:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc17c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc180:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc184:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc188:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc18c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc190:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc194:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc198:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc19c:	429d      	cmp	r5, r3
   bc19e:	bf08      	it	eq
   bc1a0:	4296      	cmpeq	r6, r2
   bc1a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc1a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc1aa:	d202      	bcs.n	bc1b2 <__aeabi_ddiv+0x6e>
   bc1ac:	085b      	lsrs	r3, r3, #1
   bc1ae:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1b2:	1ab6      	subs	r6, r6, r2
   bc1b4:	eb65 0503 	sbc.w	r5, r5, r3
   bc1b8:	085b      	lsrs	r3, r3, #1
   bc1ba:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc1c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc1c6:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1ce:	bf22      	ittt	cs
   bc1d0:	1ab6      	subcs	r6, r6, r2
   bc1d2:	4675      	movcs	r5, lr
   bc1d4:	ea40 000c 	orrcs.w	r0, r0, ip
   bc1d8:	085b      	lsrs	r3, r3, #1
   bc1da:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1de:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1e6:	bf22      	ittt	cs
   bc1e8:	1ab6      	subcs	r6, r6, r2
   bc1ea:	4675      	movcs	r5, lr
   bc1ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc1f0:	085b      	lsrs	r3, r3, #1
   bc1f2:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1f6:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1fe:	bf22      	ittt	cs
   bc200:	1ab6      	subcs	r6, r6, r2
   bc202:	4675      	movcs	r5, lr
   bc204:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc208:	085b      	lsrs	r3, r3, #1
   bc20a:	ea4f 0232 	mov.w	r2, r2, rrx
   bc20e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc212:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc216:	bf22      	ittt	cs
   bc218:	1ab6      	subcs	r6, r6, r2
   bc21a:	4675      	movcs	r5, lr
   bc21c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc220:	ea55 0e06 	orrs.w	lr, r5, r6
   bc224:	d018      	beq.n	bc258 <__aeabi_ddiv+0x114>
   bc226:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc22a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc22e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc232:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc236:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc23a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc23e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc242:	d1c0      	bne.n	bc1c6 <__aeabi_ddiv+0x82>
   bc244:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc248:	d10b      	bne.n	bc262 <__aeabi_ddiv+0x11e>
   bc24a:	ea41 0100 	orr.w	r1, r1, r0
   bc24e:	f04f 0000 	mov.w	r0, #0
   bc252:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc256:	e7b6      	b.n	bc1c6 <__aeabi_ddiv+0x82>
   bc258:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc25c:	bf04      	itt	eq
   bc25e:	4301      	orreq	r1, r0
   bc260:	2000      	moveq	r0, #0
   bc262:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc266:	bf88      	it	hi
   bc268:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc26c:	f63f aeaf 	bhi.w	bbfce <__aeabi_dmul+0xde>
   bc270:	ebb5 0c03 	subs.w	ip, r5, r3
   bc274:	bf04      	itt	eq
   bc276:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc27a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc27e:	f150 0000 	adcs.w	r0, r0, #0
   bc282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc286:	bd70      	pop	{r4, r5, r6, pc}
   bc288:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc28c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc290:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc294:	bfc2      	ittt	gt
   bc296:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc29a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc29e:	bd70      	popgt	{r4, r5, r6, pc}
   bc2a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc2a4:	f04f 0e00 	mov.w	lr, #0
   bc2a8:	3c01      	subs	r4, #1
   bc2aa:	e690      	b.n	bbfce <__aeabi_dmul+0xde>
   bc2ac:	ea45 0e06 	orr.w	lr, r5, r6
   bc2b0:	e68d      	b.n	bbfce <__aeabi_dmul+0xde>
   bc2b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc2b6:	ea94 0f0c 	teq	r4, ip
   bc2ba:	bf08      	it	eq
   bc2bc:	ea95 0f0c 	teqeq	r5, ip
   bc2c0:	f43f af3b 	beq.w	bc13a <__aeabi_dmul+0x24a>
   bc2c4:	ea94 0f0c 	teq	r4, ip
   bc2c8:	d10a      	bne.n	bc2e0 <__aeabi_ddiv+0x19c>
   bc2ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc2ce:	f47f af34 	bne.w	bc13a <__aeabi_dmul+0x24a>
   bc2d2:	ea95 0f0c 	teq	r5, ip
   bc2d6:	f47f af25 	bne.w	bc124 <__aeabi_dmul+0x234>
   bc2da:	4610      	mov	r0, r2
   bc2dc:	4619      	mov	r1, r3
   bc2de:	e72c      	b.n	bc13a <__aeabi_dmul+0x24a>
   bc2e0:	ea95 0f0c 	teq	r5, ip
   bc2e4:	d106      	bne.n	bc2f4 <__aeabi_ddiv+0x1b0>
   bc2e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc2ea:	f43f aefd 	beq.w	bc0e8 <__aeabi_dmul+0x1f8>
   bc2ee:	4610      	mov	r0, r2
   bc2f0:	4619      	mov	r1, r3
   bc2f2:	e722      	b.n	bc13a <__aeabi_dmul+0x24a>
   bc2f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc2f8:	bf18      	it	ne
   bc2fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc2fe:	f47f aec5 	bne.w	bc08c <__aeabi_dmul+0x19c>
   bc302:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc306:	f47f af0d 	bne.w	bc124 <__aeabi_dmul+0x234>
   bc30a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc30e:	f47f aeeb 	bne.w	bc0e8 <__aeabi_dmul+0x1f8>
   bc312:	e712      	b.n	bc13a <__aeabi_dmul+0x24a>

000bc314 <__gedf2>:
   bc314:	f04f 3cff 	mov.w	ip, #4294967295
   bc318:	e006      	b.n	bc328 <__cmpdf2+0x4>
   bc31a:	bf00      	nop

000bc31c <__ledf2>:
   bc31c:	f04f 0c01 	mov.w	ip, #1
   bc320:	e002      	b.n	bc328 <__cmpdf2+0x4>
   bc322:	bf00      	nop

000bc324 <__cmpdf2>:
   bc324:	f04f 0c01 	mov.w	ip, #1
   bc328:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc32c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc334:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc338:	bf18      	it	ne
   bc33a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc33e:	d01b      	beq.n	bc378 <__cmpdf2+0x54>
   bc340:	b001      	add	sp, #4
   bc342:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc346:	bf0c      	ite	eq
   bc348:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc34c:	ea91 0f03 	teqne	r1, r3
   bc350:	bf02      	ittt	eq
   bc352:	ea90 0f02 	teqeq	r0, r2
   bc356:	2000      	moveq	r0, #0
   bc358:	4770      	bxeq	lr
   bc35a:	f110 0f00 	cmn.w	r0, #0
   bc35e:	ea91 0f03 	teq	r1, r3
   bc362:	bf58      	it	pl
   bc364:	4299      	cmppl	r1, r3
   bc366:	bf08      	it	eq
   bc368:	4290      	cmpeq	r0, r2
   bc36a:	bf2c      	ite	cs
   bc36c:	17d8      	asrcs	r0, r3, #31
   bc36e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc372:	f040 0001 	orr.w	r0, r0, #1
   bc376:	4770      	bx	lr
   bc378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc37c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc380:	d102      	bne.n	bc388 <__cmpdf2+0x64>
   bc382:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc386:	d107      	bne.n	bc398 <__cmpdf2+0x74>
   bc388:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc38c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc390:	d1d6      	bne.n	bc340 <__cmpdf2+0x1c>
   bc392:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc396:	d0d3      	beq.n	bc340 <__cmpdf2+0x1c>
   bc398:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc39c:	4770      	bx	lr
   bc39e:	bf00      	nop

000bc3a0 <__aeabi_cdrcmple>:
   bc3a0:	4684      	mov	ip, r0
   bc3a2:	4610      	mov	r0, r2
   bc3a4:	4662      	mov	r2, ip
   bc3a6:	468c      	mov	ip, r1
   bc3a8:	4619      	mov	r1, r3
   bc3aa:	4663      	mov	r3, ip
   bc3ac:	e000      	b.n	bc3b0 <__aeabi_cdcmpeq>
   bc3ae:	bf00      	nop

000bc3b0 <__aeabi_cdcmpeq>:
   bc3b0:	b501      	push	{r0, lr}
   bc3b2:	f7ff ffb7 	bl	bc324 <__cmpdf2>
   bc3b6:	2800      	cmp	r0, #0
   bc3b8:	bf48      	it	mi
   bc3ba:	f110 0f00 	cmnmi.w	r0, #0
   bc3be:	bd01      	pop	{r0, pc}

000bc3c0 <__aeabi_dcmpeq>:
   bc3c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3c4:	f7ff fff4 	bl	bc3b0 <__aeabi_cdcmpeq>
   bc3c8:	bf0c      	ite	eq
   bc3ca:	2001      	moveq	r0, #1
   bc3cc:	2000      	movne	r0, #0
   bc3ce:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3d2:	bf00      	nop

000bc3d4 <__aeabi_dcmplt>:
   bc3d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3d8:	f7ff ffea 	bl	bc3b0 <__aeabi_cdcmpeq>
   bc3dc:	bf34      	ite	cc
   bc3de:	2001      	movcc	r0, #1
   bc3e0:	2000      	movcs	r0, #0
   bc3e2:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3e6:	bf00      	nop

000bc3e8 <__aeabi_dcmple>:
   bc3e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3ec:	f7ff ffe0 	bl	bc3b0 <__aeabi_cdcmpeq>
   bc3f0:	bf94      	ite	ls
   bc3f2:	2001      	movls	r0, #1
   bc3f4:	2000      	movhi	r0, #0
   bc3f6:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3fa:	bf00      	nop

000bc3fc <__aeabi_dcmpge>:
   bc3fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc400:	f7ff ffce 	bl	bc3a0 <__aeabi_cdrcmple>
   bc404:	bf94      	ite	ls
   bc406:	2001      	movls	r0, #1
   bc408:	2000      	movhi	r0, #0
   bc40a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc40e:	bf00      	nop

000bc410 <__aeabi_dcmpgt>:
   bc410:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc414:	f7ff ffc4 	bl	bc3a0 <__aeabi_cdrcmple>
   bc418:	bf34      	ite	cc
   bc41a:	2001      	movcc	r0, #1
   bc41c:	2000      	movcs	r0, #0
   bc41e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc422:	bf00      	nop

000bc424 <__aeabi_d2uiz>:
   bc424:	004a      	lsls	r2, r1, #1
   bc426:	d211      	bcs.n	bc44c <__aeabi_d2uiz+0x28>
   bc428:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc42c:	d211      	bcs.n	bc452 <__aeabi_d2uiz+0x2e>
   bc42e:	d50d      	bpl.n	bc44c <__aeabi_d2uiz+0x28>
   bc430:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc434:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc438:	d40e      	bmi.n	bc458 <__aeabi_d2uiz+0x34>
   bc43a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc43e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc442:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc446:	fa23 f002 	lsr.w	r0, r3, r2
   bc44a:	4770      	bx	lr
   bc44c:	f04f 0000 	mov.w	r0, #0
   bc450:	4770      	bx	lr
   bc452:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc456:	d102      	bne.n	bc45e <__aeabi_d2uiz+0x3a>
   bc458:	f04f 30ff 	mov.w	r0, #4294967295
   bc45c:	4770      	bx	lr
   bc45e:	f04f 0000 	mov.w	r0, #0
   bc462:	4770      	bx	lr

000bc464 <__aeabi_d2f>:
   bc464:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc468:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc46c:	bf24      	itt	cs
   bc46e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc472:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc476:	d90d      	bls.n	bc494 <__aeabi_d2f+0x30>
   bc478:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc47c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc480:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc484:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc488:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc48c:	bf08      	it	eq
   bc48e:	f020 0001 	biceq.w	r0, r0, #1
   bc492:	4770      	bx	lr
   bc494:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc498:	d121      	bne.n	bc4de <__aeabi_d2f+0x7a>
   bc49a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc49e:	bfbc      	itt	lt
   bc4a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc4a4:	4770      	bxlt	lr
   bc4a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc4aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc4ae:	f1c2 0218 	rsb	r2, r2, #24
   bc4b2:	f1c2 0c20 	rsb	ip, r2, #32
   bc4b6:	fa10 f30c 	lsls.w	r3, r0, ip
   bc4ba:	fa20 f002 	lsr.w	r0, r0, r2
   bc4be:	bf18      	it	ne
   bc4c0:	f040 0001 	orrne.w	r0, r0, #1
   bc4c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc4c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc4cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc4d0:	ea40 000c 	orr.w	r0, r0, ip
   bc4d4:	fa23 f302 	lsr.w	r3, r3, r2
   bc4d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc4dc:	e7cc      	b.n	bc478 <__aeabi_d2f+0x14>
   bc4de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc4e2:	d107      	bne.n	bc4f4 <__aeabi_d2f+0x90>
   bc4e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc4e8:	bf1e      	ittt	ne
   bc4ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc4ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc4f2:	4770      	bxne	lr
   bc4f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc4f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc4fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc500:	4770      	bx	lr
   bc502:	bf00      	nop

000bc504 <__aeabi_d2ulz>:
   bc504:	b5d0      	push	{r4, r6, r7, lr}
   bc506:	4b0c      	ldr	r3, [pc, #48]	; (bc538 <__aeabi_d2ulz+0x34>)
   bc508:	2200      	movs	r2, #0
   bc50a:	4606      	mov	r6, r0
   bc50c:	460f      	mov	r7, r1
   bc50e:	f7ff fcef 	bl	bbef0 <__aeabi_dmul>
   bc512:	f7ff ff87 	bl	bc424 <__aeabi_d2uiz>
   bc516:	4604      	mov	r4, r0
   bc518:	f7ff fc70 	bl	bbdfc <__aeabi_ui2d>
   bc51c:	4b07      	ldr	r3, [pc, #28]	; (bc53c <__aeabi_d2ulz+0x38>)
   bc51e:	2200      	movs	r2, #0
   bc520:	f7ff fce6 	bl	bbef0 <__aeabi_dmul>
   bc524:	4602      	mov	r2, r0
   bc526:	460b      	mov	r3, r1
   bc528:	4630      	mov	r0, r6
   bc52a:	4639      	mov	r1, r7
   bc52c:	f7ff fb28 	bl	bbb80 <__aeabi_dsub>
   bc530:	f7ff ff78 	bl	bc424 <__aeabi_d2uiz>
   bc534:	4621      	mov	r1, r4
   bc536:	bdd0      	pop	{r4, r6, r7, pc}
   bc538:	3df00000 	.word	0x3df00000
   bc53c:	41f00000 	.word	0x41f00000

000bc540 <atexit>:
   bc540:	2300      	movs	r3, #0
   bc542:	4601      	mov	r1, r0
   bc544:	461a      	mov	r2, r3
   bc546:	4618      	mov	r0, r3
   bc548:	f000 bff4 	b.w	bd534 <__register_exitproc>

000bc54c <atof>:
   bc54c:	2100      	movs	r1, #0
   bc54e:	f000 bf59 	b.w	bd404 <strtod>

000bc552 <atoi>:
   bc552:	220a      	movs	r2, #10
   bc554:	2100      	movs	r1, #0
   bc556:	f000 bfe3 	b.w	bd520 <strtol>
	...

000bc55c <isprint>:
   bc55c:	4b02      	ldr	r3, [pc, #8]	; (bc568 <isprint+0xc>)
   bc55e:	4418      	add	r0, r3
   bc560:	7840      	ldrb	r0, [r0, #1]
   bc562:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc566:	4770      	bx	lr
   bc568:	000bf388 	.word	0x000bf388

000bc56c <memcmp>:
   bc56c:	b510      	push	{r4, lr}
   bc56e:	3901      	subs	r1, #1
   bc570:	4402      	add	r2, r0
   bc572:	4290      	cmp	r0, r2
   bc574:	d101      	bne.n	bc57a <memcmp+0xe>
   bc576:	2000      	movs	r0, #0
   bc578:	e005      	b.n	bc586 <memcmp+0x1a>
   bc57a:	7803      	ldrb	r3, [r0, #0]
   bc57c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc580:	42a3      	cmp	r3, r4
   bc582:	d001      	beq.n	bc588 <memcmp+0x1c>
   bc584:	1b18      	subs	r0, r3, r4
   bc586:	bd10      	pop	{r4, pc}
   bc588:	3001      	adds	r0, #1
   bc58a:	e7f2      	b.n	bc572 <memcmp+0x6>

000bc58c <memcpy>:
   bc58c:	440a      	add	r2, r1
   bc58e:	4291      	cmp	r1, r2
   bc590:	f100 33ff 	add.w	r3, r0, #4294967295
   bc594:	d100      	bne.n	bc598 <memcpy+0xc>
   bc596:	4770      	bx	lr
   bc598:	b510      	push	{r4, lr}
   bc59a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc59e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc5a2:	4291      	cmp	r1, r2
   bc5a4:	d1f9      	bne.n	bc59a <memcpy+0xe>
   bc5a6:	bd10      	pop	{r4, pc}

000bc5a8 <memmove>:
   bc5a8:	4288      	cmp	r0, r1
   bc5aa:	b510      	push	{r4, lr}
   bc5ac:	eb01 0402 	add.w	r4, r1, r2
   bc5b0:	d902      	bls.n	bc5b8 <memmove+0x10>
   bc5b2:	4284      	cmp	r4, r0
   bc5b4:	4623      	mov	r3, r4
   bc5b6:	d807      	bhi.n	bc5c8 <memmove+0x20>
   bc5b8:	1e43      	subs	r3, r0, #1
   bc5ba:	42a1      	cmp	r1, r4
   bc5bc:	d008      	beq.n	bc5d0 <memmove+0x28>
   bc5be:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc5c6:	e7f8      	b.n	bc5ba <memmove+0x12>
   bc5c8:	4402      	add	r2, r0
   bc5ca:	4601      	mov	r1, r0
   bc5cc:	428a      	cmp	r2, r1
   bc5ce:	d100      	bne.n	bc5d2 <memmove+0x2a>
   bc5d0:	bd10      	pop	{r4, pc}
   bc5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc5da:	e7f7      	b.n	bc5cc <memmove+0x24>

000bc5dc <memset>:
   bc5dc:	4402      	add	r2, r0
   bc5de:	4603      	mov	r3, r0
   bc5e0:	4293      	cmp	r3, r2
   bc5e2:	d100      	bne.n	bc5e6 <memset+0xa>
   bc5e4:	4770      	bx	lr
   bc5e6:	f803 1b01 	strb.w	r1, [r3], #1
   bc5ea:	e7f9      	b.n	bc5e0 <memset+0x4>

000bc5ec <srand>:
   bc5ec:	b538      	push	{r3, r4, r5, lr}
   bc5ee:	4b10      	ldr	r3, [pc, #64]	; (bc630 <srand+0x44>)
   bc5f0:	681d      	ldr	r5, [r3, #0]
   bc5f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc5f4:	4604      	mov	r4, r0
   bc5f6:	b9b3      	cbnz	r3, bc626 <srand+0x3a>
   bc5f8:	2018      	movs	r0, #24
   bc5fa:	f7fb fab7 	bl	b7b6c <malloc>
   bc5fe:	4602      	mov	r2, r0
   bc600:	63a8      	str	r0, [r5, #56]	; 0x38
   bc602:	b920      	cbnz	r0, bc60e <srand+0x22>
   bc604:	4b0b      	ldr	r3, [pc, #44]	; (bc634 <srand+0x48>)
   bc606:	480c      	ldr	r0, [pc, #48]	; (bc638 <srand+0x4c>)
   bc608:	2142      	movs	r1, #66	; 0x42
   bc60a:	f7fb faf7 	bl	b7bfc <__assert_func>
   bc60e:	490b      	ldr	r1, [pc, #44]	; (bc63c <srand+0x50>)
   bc610:	4b0b      	ldr	r3, [pc, #44]	; (bc640 <srand+0x54>)
   bc612:	e9c0 1300 	strd	r1, r3, [r0]
   bc616:	4b0b      	ldr	r3, [pc, #44]	; (bc644 <srand+0x58>)
   bc618:	6083      	str	r3, [r0, #8]
   bc61a:	230b      	movs	r3, #11
   bc61c:	8183      	strh	r3, [r0, #12]
   bc61e:	2100      	movs	r1, #0
   bc620:	2001      	movs	r0, #1
   bc622:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc626:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc628:	2200      	movs	r2, #0
   bc62a:	611c      	str	r4, [r3, #16]
   bc62c:	615a      	str	r2, [r3, #20]
   bc62e:	bd38      	pop	{r3, r4, r5, pc}
   bc630:	2003dc38 	.word	0x2003dc38
   bc634:	000bf291 	.word	0x000bf291
   bc638:	000bf2a8 	.word	0x000bf2a8
   bc63c:	abcd330e 	.word	0xabcd330e
   bc640:	e66d1234 	.word	0xe66d1234
   bc644:	0005deec 	.word	0x0005deec

000bc648 <strcat>:
   bc648:	b510      	push	{r4, lr}
   bc64a:	4602      	mov	r2, r0
   bc64c:	7814      	ldrb	r4, [r2, #0]
   bc64e:	4613      	mov	r3, r2
   bc650:	3201      	adds	r2, #1
   bc652:	2c00      	cmp	r4, #0
   bc654:	d1fa      	bne.n	bc64c <strcat+0x4>
   bc656:	3b01      	subs	r3, #1
   bc658:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc65c:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc660:	2a00      	cmp	r2, #0
   bc662:	d1f9      	bne.n	bc658 <strcat+0x10>
   bc664:	bd10      	pop	{r4, pc}

000bc666 <strchr>:
   bc666:	b2c9      	uxtb	r1, r1
   bc668:	4603      	mov	r3, r0
   bc66a:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc66e:	b11a      	cbz	r2, bc678 <strchr+0x12>
   bc670:	428a      	cmp	r2, r1
   bc672:	d1f9      	bne.n	bc668 <strchr+0x2>
   bc674:	4618      	mov	r0, r3
   bc676:	4770      	bx	lr
   bc678:	2900      	cmp	r1, #0
   bc67a:	bf18      	it	ne
   bc67c:	2300      	movne	r3, #0
   bc67e:	e7f9      	b.n	bc674 <strchr+0xe>

000bc680 <strchrnul>:
   bc680:	b510      	push	{r4, lr}
   bc682:	4604      	mov	r4, r0
   bc684:	f7ff ffef 	bl	bc666 <strchr>
   bc688:	b918      	cbnz	r0, bc692 <strchrnul+0x12>
   bc68a:	4620      	mov	r0, r4
   bc68c:	f000 f831 	bl	bc6f2 <strlen>
   bc690:	4420      	add	r0, r4
   bc692:	bd10      	pop	{r4, pc}

000bc694 <strcmp>:
   bc694:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc698:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc69c:	2a01      	cmp	r2, #1
   bc69e:	bf28      	it	cs
   bc6a0:	429a      	cmpcs	r2, r3
   bc6a2:	d0f7      	beq.n	bc694 <strcmp>
   bc6a4:	1ad0      	subs	r0, r2, r3
   bc6a6:	4770      	bx	lr

000bc6a8 <strcpy>:
   bc6a8:	4603      	mov	r3, r0
   bc6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc6ae:	f803 2b01 	strb.w	r2, [r3], #1
   bc6b2:	2a00      	cmp	r2, #0
   bc6b4:	d1f9      	bne.n	bc6aa <strcpy+0x2>
   bc6b6:	4770      	bx	lr

000bc6b8 <strdup>:
   bc6b8:	4b02      	ldr	r3, [pc, #8]	; (bc6c4 <strdup+0xc>)
   bc6ba:	4601      	mov	r1, r0
   bc6bc:	6818      	ldr	r0, [r3, #0]
   bc6be:	f000 b803 	b.w	bc6c8 <_strdup_r>
   bc6c2:	bf00      	nop
   bc6c4:	2003dc38 	.word	0x2003dc38

000bc6c8 <_strdup_r>:
   bc6c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc6ca:	4604      	mov	r4, r0
   bc6cc:	4608      	mov	r0, r1
   bc6ce:	460d      	mov	r5, r1
   bc6d0:	f000 f80f 	bl	bc6f2 <strlen>
   bc6d4:	1c42      	adds	r2, r0, #1
   bc6d6:	4611      	mov	r1, r2
   bc6d8:	4620      	mov	r0, r4
   bc6da:	9201      	str	r2, [sp, #4]
   bc6dc:	f7fb fa7e 	bl	b7bdc <_malloc_r>
   bc6e0:	4604      	mov	r4, r0
   bc6e2:	b118      	cbz	r0, bc6ec <_strdup_r+0x24>
   bc6e4:	9a01      	ldr	r2, [sp, #4]
   bc6e6:	4629      	mov	r1, r5
   bc6e8:	f7ff ff50 	bl	bc58c <memcpy>
   bc6ec:	4620      	mov	r0, r4
   bc6ee:	b003      	add	sp, #12
   bc6f0:	bd30      	pop	{r4, r5, pc}

000bc6f2 <strlen>:
   bc6f2:	4603      	mov	r3, r0
   bc6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc6f8:	2a00      	cmp	r2, #0
   bc6fa:	d1fb      	bne.n	bc6f4 <strlen+0x2>
   bc6fc:	1a18      	subs	r0, r3, r0
   bc6fe:	3801      	subs	r0, #1
   bc700:	4770      	bx	lr
	...

000bc704 <strlwr>:
   bc704:	b510      	push	{r4, lr}
   bc706:	4c07      	ldr	r4, [pc, #28]	; (bc724 <strlwr+0x20>)
   bc708:	1e42      	subs	r2, r0, #1
   bc70a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   bc70e:	b903      	cbnz	r3, bc712 <strlwr+0xe>
   bc710:	bd10      	pop	{r4, pc}
   bc712:	5ce1      	ldrb	r1, [r4, r3]
   bc714:	f001 0103 	and.w	r1, r1, #3
   bc718:	2901      	cmp	r1, #1
   bc71a:	bf08      	it	eq
   bc71c:	3320      	addeq	r3, #32
   bc71e:	7013      	strb	r3, [r2, #0]
   bc720:	e7f3      	b.n	bc70a <strlwr+0x6>
   bc722:	bf00      	nop
   bc724:	000bf389 	.word	0x000bf389

000bc728 <strncmp>:
   bc728:	b510      	push	{r4, lr}
   bc72a:	b17a      	cbz	r2, bc74c <strncmp+0x24>
   bc72c:	4603      	mov	r3, r0
   bc72e:	3901      	subs	r1, #1
   bc730:	1884      	adds	r4, r0, r2
   bc732:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc736:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc73a:	4290      	cmp	r0, r2
   bc73c:	d101      	bne.n	bc742 <strncmp+0x1a>
   bc73e:	42a3      	cmp	r3, r4
   bc740:	d101      	bne.n	bc746 <strncmp+0x1e>
   bc742:	1a80      	subs	r0, r0, r2
   bc744:	bd10      	pop	{r4, pc}
   bc746:	2800      	cmp	r0, #0
   bc748:	d1f3      	bne.n	bc732 <strncmp+0xa>
   bc74a:	e7fa      	b.n	bc742 <strncmp+0x1a>
   bc74c:	4610      	mov	r0, r2
   bc74e:	e7f9      	b.n	bc744 <strncmp+0x1c>

000bc750 <strnlen>:
   bc750:	b510      	push	{r4, lr}
   bc752:	4602      	mov	r2, r0
   bc754:	4401      	add	r1, r0
   bc756:	428a      	cmp	r2, r1
   bc758:	4613      	mov	r3, r2
   bc75a:	d003      	beq.n	bc764 <strnlen+0x14>
   bc75c:	781c      	ldrb	r4, [r3, #0]
   bc75e:	3201      	adds	r2, #1
   bc760:	2c00      	cmp	r4, #0
   bc762:	d1f8      	bne.n	bc756 <strnlen+0x6>
   bc764:	1a18      	subs	r0, r3, r0
   bc766:	bd10      	pop	{r4, pc}

000bc768 <strrchr>:
   bc768:	b538      	push	{r3, r4, r5, lr}
   bc76a:	4603      	mov	r3, r0
   bc76c:	460c      	mov	r4, r1
   bc76e:	b969      	cbnz	r1, bc78c <strrchr+0x24>
   bc770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc774:	f7ff bf77 	b.w	bc666 <strchr>
   bc778:	1c43      	adds	r3, r0, #1
   bc77a:	4605      	mov	r5, r0
   bc77c:	4621      	mov	r1, r4
   bc77e:	4618      	mov	r0, r3
   bc780:	f7ff ff71 	bl	bc666 <strchr>
   bc784:	2800      	cmp	r0, #0
   bc786:	d1f7      	bne.n	bc778 <strrchr+0x10>
   bc788:	4628      	mov	r0, r5
   bc78a:	bd38      	pop	{r3, r4, r5, pc}
   bc78c:	2500      	movs	r5, #0
   bc78e:	e7f5      	b.n	bc77c <strrchr+0x14>

000bc790 <strstr>:
   bc790:	780a      	ldrb	r2, [r1, #0]
   bc792:	b570      	push	{r4, r5, r6, lr}
   bc794:	b96a      	cbnz	r2, bc7b2 <strstr+0x22>
   bc796:	bd70      	pop	{r4, r5, r6, pc}
   bc798:	429a      	cmp	r2, r3
   bc79a:	d109      	bne.n	bc7b0 <strstr+0x20>
   bc79c:	460c      	mov	r4, r1
   bc79e:	4605      	mov	r5, r0
   bc7a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc7a4:	2b00      	cmp	r3, #0
   bc7a6:	d0f6      	beq.n	bc796 <strstr+0x6>
   bc7a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc7ac:	429e      	cmp	r6, r3
   bc7ae:	d0f7      	beq.n	bc7a0 <strstr+0x10>
   bc7b0:	3001      	adds	r0, #1
   bc7b2:	7803      	ldrb	r3, [r0, #0]
   bc7b4:	2b00      	cmp	r3, #0
   bc7b6:	d1ef      	bne.n	bc798 <strstr+0x8>
   bc7b8:	4618      	mov	r0, r3
   bc7ba:	e7ec      	b.n	bc796 <strstr+0x6>

000bc7bc <sulp>:
   bc7bc:	b570      	push	{r4, r5, r6, lr}
   bc7be:	4604      	mov	r4, r0
   bc7c0:	460d      	mov	r5, r1
   bc7c2:	ec45 4b10 	vmov	d0, r4, r5
   bc7c6:	4616      	mov	r6, r2
   bc7c8:	f001 fe0e 	bl	be3e8 <__ulp>
   bc7cc:	ec51 0b10 	vmov	r0, r1, d0
   bc7d0:	b17e      	cbz	r6, bc7f2 <sulp+0x36>
   bc7d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc7d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc7da:	2b00      	cmp	r3, #0
   bc7dc:	dd09      	ble.n	bc7f2 <sulp+0x36>
   bc7de:	051b      	lsls	r3, r3, #20
   bc7e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc7e4:	2400      	movs	r4, #0
   bc7e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc7ea:	4622      	mov	r2, r4
   bc7ec:	462b      	mov	r3, r5
   bc7ee:	f7ff fb7f 	bl	bbef0 <__aeabi_dmul>
   bc7f2:	bd70      	pop	{r4, r5, r6, pc}
   bc7f4:	0000      	movs	r0, r0
	...

000bc7f8 <_strtod_l>:
   bc7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc7fc:	ed2d 8b02 	vpush	{d8}
   bc800:	b09d      	sub	sp, #116	; 0x74
   bc802:	461f      	mov	r7, r3
   bc804:	2300      	movs	r3, #0
   bc806:	9318      	str	r3, [sp, #96]	; 0x60
   bc808:	4ba2      	ldr	r3, [pc, #648]	; (bca94 <_strtod_l+0x29c>)
   bc80a:	9213      	str	r2, [sp, #76]	; 0x4c
   bc80c:	681b      	ldr	r3, [r3, #0]
   bc80e:	9305      	str	r3, [sp, #20]
   bc810:	4604      	mov	r4, r0
   bc812:	4618      	mov	r0, r3
   bc814:	4688      	mov	r8, r1
   bc816:	f7ff ff6c 	bl	bc6f2 <strlen>
   bc81a:	f04f 0a00 	mov.w	sl, #0
   bc81e:	4605      	mov	r5, r0
   bc820:	f04f 0b00 	mov.w	fp, #0
   bc824:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc828:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc82a:	781a      	ldrb	r2, [r3, #0]
   bc82c:	2a2b      	cmp	r2, #43	; 0x2b
   bc82e:	d04e      	beq.n	bc8ce <_strtod_l+0xd6>
   bc830:	d83b      	bhi.n	bc8aa <_strtod_l+0xb2>
   bc832:	2a0d      	cmp	r2, #13
   bc834:	d834      	bhi.n	bc8a0 <_strtod_l+0xa8>
   bc836:	2a08      	cmp	r2, #8
   bc838:	d834      	bhi.n	bc8a4 <_strtod_l+0xac>
   bc83a:	2a00      	cmp	r2, #0
   bc83c:	d03e      	beq.n	bc8bc <_strtod_l+0xc4>
   bc83e:	2300      	movs	r3, #0
   bc840:	930a      	str	r3, [sp, #40]	; 0x28
   bc842:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc844:	7833      	ldrb	r3, [r6, #0]
   bc846:	2b30      	cmp	r3, #48	; 0x30
   bc848:	f040 80b0 	bne.w	bc9ac <_strtod_l+0x1b4>
   bc84c:	7873      	ldrb	r3, [r6, #1]
   bc84e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc852:	2b58      	cmp	r3, #88	; 0x58
   bc854:	d168      	bne.n	bc928 <_strtod_l+0x130>
   bc856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc858:	9301      	str	r3, [sp, #4]
   bc85a:	ab18      	add	r3, sp, #96	; 0x60
   bc85c:	9702      	str	r7, [sp, #8]
   bc85e:	9300      	str	r3, [sp, #0]
   bc860:	4a8d      	ldr	r2, [pc, #564]	; (bca98 <_strtod_l+0x2a0>)
   bc862:	ab19      	add	r3, sp, #100	; 0x64
   bc864:	a917      	add	r1, sp, #92	; 0x5c
   bc866:	4620      	mov	r0, r4
   bc868:	f000 ff2e 	bl	bd6c8 <__gethex>
   bc86c:	f010 0707 	ands.w	r7, r0, #7
   bc870:	4605      	mov	r5, r0
   bc872:	d005      	beq.n	bc880 <_strtod_l+0x88>
   bc874:	2f06      	cmp	r7, #6
   bc876:	d12c      	bne.n	bc8d2 <_strtod_l+0xda>
   bc878:	3601      	adds	r6, #1
   bc87a:	2300      	movs	r3, #0
   bc87c:	9617      	str	r6, [sp, #92]	; 0x5c
   bc87e:	930a      	str	r3, [sp, #40]	; 0x28
   bc880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc882:	2b00      	cmp	r3, #0
   bc884:	f040 8590 	bne.w	bd3a8 <_strtod_l+0xbb0>
   bc888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc88a:	b1eb      	cbz	r3, bc8c8 <_strtod_l+0xd0>
   bc88c:	4652      	mov	r2, sl
   bc88e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc892:	ec43 2b10 	vmov	d0, r2, r3
   bc896:	b01d      	add	sp, #116	; 0x74
   bc898:	ecbd 8b02 	vpop	{d8}
   bc89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc8a0:	2a20      	cmp	r2, #32
   bc8a2:	d1cc      	bne.n	bc83e <_strtod_l+0x46>
   bc8a4:	3301      	adds	r3, #1
   bc8a6:	9317      	str	r3, [sp, #92]	; 0x5c
   bc8a8:	e7be      	b.n	bc828 <_strtod_l+0x30>
   bc8aa:	2a2d      	cmp	r2, #45	; 0x2d
   bc8ac:	d1c7      	bne.n	bc83e <_strtod_l+0x46>
   bc8ae:	2201      	movs	r2, #1
   bc8b0:	920a      	str	r2, [sp, #40]	; 0x28
   bc8b2:	1c5a      	adds	r2, r3, #1
   bc8b4:	9217      	str	r2, [sp, #92]	; 0x5c
   bc8b6:	785b      	ldrb	r3, [r3, #1]
   bc8b8:	2b00      	cmp	r3, #0
   bc8ba:	d1c2      	bne.n	bc842 <_strtod_l+0x4a>
   bc8bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc8be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc8c2:	2b00      	cmp	r3, #0
   bc8c4:	f040 856e 	bne.w	bd3a4 <_strtod_l+0xbac>
   bc8c8:	4652      	mov	r2, sl
   bc8ca:	465b      	mov	r3, fp
   bc8cc:	e7e1      	b.n	bc892 <_strtod_l+0x9a>
   bc8ce:	2200      	movs	r2, #0
   bc8d0:	e7ee      	b.n	bc8b0 <_strtod_l+0xb8>
   bc8d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc8d4:	b13a      	cbz	r2, bc8e6 <_strtod_l+0xee>
   bc8d6:	2135      	movs	r1, #53	; 0x35
   bc8d8:	a81a      	add	r0, sp, #104	; 0x68
   bc8da:	f001 fe90 	bl	be5fe <__copybits>
   bc8de:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc8e0:	4620      	mov	r0, r4
   bc8e2:	f001 fa4f 	bl	bdd84 <_Bfree>
   bc8e6:	3f01      	subs	r7, #1
   bc8e8:	2f04      	cmp	r7, #4
   bc8ea:	d806      	bhi.n	bc8fa <_strtod_l+0x102>
   bc8ec:	e8df f007 	tbb	[pc, r7]
   bc8f0:	1714030a 	.word	0x1714030a
   bc8f4:	0a          	.byte	0x0a
   bc8f5:	00          	.byte	0x00
   bc8f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc8fa:	0728      	lsls	r0, r5, #28
   bc8fc:	d5c0      	bpl.n	bc880 <_strtod_l+0x88>
   bc8fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc902:	e7bd      	b.n	bc880 <_strtod_l+0x88>
   bc904:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc908:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc90a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc90e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc912:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc916:	e7f0      	b.n	bc8fa <_strtod_l+0x102>
   bc918:	f8df b180 	ldr.w	fp, [pc, #384]	; bca9c <_strtod_l+0x2a4>
   bc91c:	e7ed      	b.n	bc8fa <_strtod_l+0x102>
   bc91e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc922:	f04f 3aff 	mov.w	sl, #4294967295
   bc926:	e7e8      	b.n	bc8fa <_strtod_l+0x102>
   bc928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc92a:	1c5a      	adds	r2, r3, #1
   bc92c:	9217      	str	r2, [sp, #92]	; 0x5c
   bc92e:	785b      	ldrb	r3, [r3, #1]
   bc930:	2b30      	cmp	r3, #48	; 0x30
   bc932:	d0f9      	beq.n	bc928 <_strtod_l+0x130>
   bc934:	2b00      	cmp	r3, #0
   bc936:	d0a3      	beq.n	bc880 <_strtod_l+0x88>
   bc938:	2301      	movs	r3, #1
   bc93a:	f04f 0900 	mov.w	r9, #0
   bc93e:	9304      	str	r3, [sp, #16]
   bc940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc942:	9308      	str	r3, [sp, #32]
   bc944:	f8cd 901c 	str.w	r9, [sp, #28]
   bc948:	464f      	mov	r7, r9
   bc94a:	220a      	movs	r2, #10
   bc94c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc94e:	7806      	ldrb	r6, [r0, #0]
   bc950:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc954:	b2d9      	uxtb	r1, r3
   bc956:	2909      	cmp	r1, #9
   bc958:	d92a      	bls.n	bc9b0 <_strtod_l+0x1b8>
   bc95a:	9905      	ldr	r1, [sp, #20]
   bc95c:	462a      	mov	r2, r5
   bc95e:	f7ff fee3 	bl	bc728 <strncmp>
   bc962:	b398      	cbz	r0, bc9cc <_strtod_l+0x1d4>
   bc964:	2000      	movs	r0, #0
   bc966:	4632      	mov	r2, r6
   bc968:	463d      	mov	r5, r7
   bc96a:	9005      	str	r0, [sp, #20]
   bc96c:	4603      	mov	r3, r0
   bc96e:	2a65      	cmp	r2, #101	; 0x65
   bc970:	d001      	beq.n	bc976 <_strtod_l+0x17e>
   bc972:	2a45      	cmp	r2, #69	; 0x45
   bc974:	d118      	bne.n	bc9a8 <_strtod_l+0x1b0>
   bc976:	b91d      	cbnz	r5, bc980 <_strtod_l+0x188>
   bc978:	9a04      	ldr	r2, [sp, #16]
   bc97a:	4302      	orrs	r2, r0
   bc97c:	d09e      	beq.n	bc8bc <_strtod_l+0xc4>
   bc97e:	2500      	movs	r5, #0
   bc980:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc984:	f108 0201 	add.w	r2, r8, #1
   bc988:	9217      	str	r2, [sp, #92]	; 0x5c
   bc98a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc98e:	2a2b      	cmp	r2, #43	; 0x2b
   bc990:	d075      	beq.n	bca7e <_strtod_l+0x286>
   bc992:	2a2d      	cmp	r2, #45	; 0x2d
   bc994:	d07b      	beq.n	bca8e <_strtod_l+0x296>
   bc996:	f04f 0c00 	mov.w	ip, #0
   bc99a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc99e:	2909      	cmp	r1, #9
   bc9a0:	f240 8082 	bls.w	bcaa8 <_strtod_l+0x2b0>
   bc9a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc9a8:	2600      	movs	r6, #0
   bc9aa:	e09d      	b.n	bcae8 <_strtod_l+0x2f0>
   bc9ac:	2300      	movs	r3, #0
   bc9ae:	e7c4      	b.n	bc93a <_strtod_l+0x142>
   bc9b0:	2f08      	cmp	r7, #8
   bc9b2:	bfd8      	it	le
   bc9b4:	9907      	ldrle	r1, [sp, #28]
   bc9b6:	f100 0001 	add.w	r0, r0, #1
   bc9ba:	bfda      	itte	le
   bc9bc:	fb02 3301 	mlale	r3, r2, r1, r3
   bc9c0:	9307      	strle	r3, [sp, #28]
   bc9c2:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc9c6:	3701      	adds	r7, #1
   bc9c8:	9017      	str	r0, [sp, #92]	; 0x5c
   bc9ca:	e7bf      	b.n	bc94c <_strtod_l+0x154>
   bc9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc9ce:	195a      	adds	r2, r3, r5
   bc9d0:	9217      	str	r2, [sp, #92]	; 0x5c
   bc9d2:	5d5a      	ldrb	r2, [r3, r5]
   bc9d4:	2f00      	cmp	r7, #0
   bc9d6:	d037      	beq.n	bca48 <_strtod_l+0x250>
   bc9d8:	9005      	str	r0, [sp, #20]
   bc9da:	463d      	mov	r5, r7
   bc9dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc9e0:	2b09      	cmp	r3, #9
   bc9e2:	d912      	bls.n	bca0a <_strtod_l+0x212>
   bc9e4:	2301      	movs	r3, #1
   bc9e6:	e7c2      	b.n	bc96e <_strtod_l+0x176>
   bc9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc9ea:	1c5a      	adds	r2, r3, #1
   bc9ec:	9217      	str	r2, [sp, #92]	; 0x5c
   bc9ee:	785a      	ldrb	r2, [r3, #1]
   bc9f0:	3001      	adds	r0, #1
   bc9f2:	2a30      	cmp	r2, #48	; 0x30
   bc9f4:	d0f8      	beq.n	bc9e8 <_strtod_l+0x1f0>
   bc9f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc9fa:	2b08      	cmp	r3, #8
   bc9fc:	f200 84d9 	bhi.w	bd3b2 <_strtod_l+0xbba>
   bca00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca02:	9005      	str	r0, [sp, #20]
   bca04:	2000      	movs	r0, #0
   bca06:	9308      	str	r3, [sp, #32]
   bca08:	4605      	mov	r5, r0
   bca0a:	3a30      	subs	r2, #48	; 0x30
   bca0c:	f100 0301 	add.w	r3, r0, #1
   bca10:	d014      	beq.n	bca3c <_strtod_l+0x244>
   bca12:	9905      	ldr	r1, [sp, #20]
   bca14:	4419      	add	r1, r3
   bca16:	9105      	str	r1, [sp, #20]
   bca18:	462b      	mov	r3, r5
   bca1a:	eb00 0e05 	add.w	lr, r0, r5
   bca1e:	210a      	movs	r1, #10
   bca20:	4573      	cmp	r3, lr
   bca22:	d113      	bne.n	bca4c <_strtod_l+0x254>
   bca24:	182b      	adds	r3, r5, r0
   bca26:	2b08      	cmp	r3, #8
   bca28:	f105 0501 	add.w	r5, r5, #1
   bca2c:	4405      	add	r5, r0
   bca2e:	dc1c      	bgt.n	bca6a <_strtod_l+0x272>
   bca30:	9907      	ldr	r1, [sp, #28]
   bca32:	230a      	movs	r3, #10
   bca34:	fb03 2301 	mla	r3, r3, r1, r2
   bca38:	9307      	str	r3, [sp, #28]
   bca3a:	2300      	movs	r3, #0
   bca3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bca3e:	1c51      	adds	r1, r2, #1
   bca40:	9117      	str	r1, [sp, #92]	; 0x5c
   bca42:	7852      	ldrb	r2, [r2, #1]
   bca44:	4618      	mov	r0, r3
   bca46:	e7c9      	b.n	bc9dc <_strtod_l+0x1e4>
   bca48:	4638      	mov	r0, r7
   bca4a:	e7d2      	b.n	bc9f2 <_strtod_l+0x1fa>
   bca4c:	2b08      	cmp	r3, #8
   bca4e:	dc04      	bgt.n	bca5a <_strtod_l+0x262>
   bca50:	9e07      	ldr	r6, [sp, #28]
   bca52:	434e      	muls	r6, r1
   bca54:	9607      	str	r6, [sp, #28]
   bca56:	3301      	adds	r3, #1
   bca58:	e7e2      	b.n	bca20 <_strtod_l+0x228>
   bca5a:	f103 0c01 	add.w	ip, r3, #1
   bca5e:	f1bc 0f10 	cmp.w	ip, #16
   bca62:	bfd8      	it	le
   bca64:	fb01 f909 	mulle.w	r9, r1, r9
   bca68:	e7f5      	b.n	bca56 <_strtod_l+0x25e>
   bca6a:	2d10      	cmp	r5, #16
   bca6c:	bfdc      	itt	le
   bca6e:	230a      	movle	r3, #10
   bca70:	fb03 2909 	mlale	r9, r3, r9, r2
   bca74:	e7e1      	b.n	bca3a <_strtod_l+0x242>
   bca76:	2300      	movs	r3, #0
   bca78:	9305      	str	r3, [sp, #20]
   bca7a:	2301      	movs	r3, #1
   bca7c:	e77c      	b.n	bc978 <_strtod_l+0x180>
   bca7e:	f04f 0c00 	mov.w	ip, #0
   bca82:	f108 0202 	add.w	r2, r8, #2
   bca86:	9217      	str	r2, [sp, #92]	; 0x5c
   bca88:	f898 2002 	ldrb.w	r2, [r8, #2]
   bca8c:	e785      	b.n	bc99a <_strtod_l+0x1a2>
   bca8e:	f04f 0c01 	mov.w	ip, #1
   bca92:	e7f6      	b.n	bca82 <_strtod_l+0x28a>
   bca94:	000bf520 	.word	0x000bf520
   bca98:	000bf334 	.word	0x000bf334
   bca9c:	7ff00000 	.word	0x7ff00000
   bcaa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcaa2:	1c51      	adds	r1, r2, #1
   bcaa4:	9117      	str	r1, [sp, #92]	; 0x5c
   bcaa6:	7852      	ldrb	r2, [r2, #1]
   bcaa8:	2a30      	cmp	r2, #48	; 0x30
   bcaaa:	d0f9      	beq.n	bcaa0 <_strtod_l+0x2a8>
   bcaac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bcab0:	2908      	cmp	r1, #8
   bcab2:	f63f af79 	bhi.w	bc9a8 <_strtod_l+0x1b0>
   bcab6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bcaba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcabc:	9206      	str	r2, [sp, #24]
   bcabe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcac0:	1c51      	adds	r1, r2, #1
   bcac2:	9117      	str	r1, [sp, #92]	; 0x5c
   bcac4:	7852      	ldrb	r2, [r2, #1]
   bcac6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bcaca:	2e09      	cmp	r6, #9
   bcacc:	d937      	bls.n	bcb3e <_strtod_l+0x346>
   bcace:	9e06      	ldr	r6, [sp, #24]
   bcad0:	1b89      	subs	r1, r1, r6
   bcad2:	2908      	cmp	r1, #8
   bcad4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bcad8:	dc02      	bgt.n	bcae0 <_strtod_l+0x2e8>
   bcada:	4576      	cmp	r6, lr
   bcadc:	bfa8      	it	ge
   bcade:	4676      	movge	r6, lr
   bcae0:	f1bc 0f00 	cmp.w	ip, #0
   bcae4:	d000      	beq.n	bcae8 <_strtod_l+0x2f0>
   bcae6:	4276      	negs	r6, r6
   bcae8:	2d00      	cmp	r5, #0
   bcaea:	d14d      	bne.n	bcb88 <_strtod_l+0x390>
   bcaec:	9904      	ldr	r1, [sp, #16]
   bcaee:	4301      	orrs	r1, r0
   bcaf0:	f47f aec6 	bne.w	bc880 <_strtod_l+0x88>
   bcaf4:	2b00      	cmp	r3, #0
   bcaf6:	f47f aee1 	bne.w	bc8bc <_strtod_l+0xc4>
   bcafa:	2a69      	cmp	r2, #105	; 0x69
   bcafc:	d027      	beq.n	bcb4e <_strtod_l+0x356>
   bcafe:	dc24      	bgt.n	bcb4a <_strtod_l+0x352>
   bcb00:	2a49      	cmp	r2, #73	; 0x49
   bcb02:	d024      	beq.n	bcb4e <_strtod_l+0x356>
   bcb04:	2a4e      	cmp	r2, #78	; 0x4e
   bcb06:	f47f aed9 	bne.w	bc8bc <_strtod_l+0xc4>
   bcb0a:	499f      	ldr	r1, [pc, #636]	; (bcd88 <_strtod_l+0x590>)
   bcb0c:	a817      	add	r0, sp, #92	; 0x5c
   bcb0e:	f001 f833 	bl	bdb78 <__match>
   bcb12:	2800      	cmp	r0, #0
   bcb14:	f43f aed2 	beq.w	bc8bc <_strtod_l+0xc4>
   bcb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb1a:	781b      	ldrb	r3, [r3, #0]
   bcb1c:	2b28      	cmp	r3, #40	; 0x28
   bcb1e:	d12d      	bne.n	bcb7c <_strtod_l+0x384>
   bcb20:	499a      	ldr	r1, [pc, #616]	; (bcd8c <_strtod_l+0x594>)
   bcb22:	aa1a      	add	r2, sp, #104	; 0x68
   bcb24:	a817      	add	r0, sp, #92	; 0x5c
   bcb26:	f001 f83b 	bl	bdba0 <__hexnan>
   bcb2a:	2805      	cmp	r0, #5
   bcb2c:	d126      	bne.n	bcb7c <_strtod_l+0x384>
   bcb2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bcb30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bcb34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bcb38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bcb3c:	e6a0      	b.n	bc880 <_strtod_l+0x88>
   bcb3e:	210a      	movs	r1, #10
   bcb40:	fb01 2e0e 	mla	lr, r1, lr, r2
   bcb44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bcb48:	e7b9      	b.n	bcabe <_strtod_l+0x2c6>
   bcb4a:	2a6e      	cmp	r2, #110	; 0x6e
   bcb4c:	e7db      	b.n	bcb06 <_strtod_l+0x30e>
   bcb4e:	4990      	ldr	r1, [pc, #576]	; (bcd90 <_strtod_l+0x598>)
   bcb50:	a817      	add	r0, sp, #92	; 0x5c
   bcb52:	f001 f811 	bl	bdb78 <__match>
   bcb56:	2800      	cmp	r0, #0
   bcb58:	f43f aeb0 	beq.w	bc8bc <_strtod_l+0xc4>
   bcb5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb5e:	498d      	ldr	r1, [pc, #564]	; (bcd94 <_strtod_l+0x59c>)
   bcb60:	3b01      	subs	r3, #1
   bcb62:	a817      	add	r0, sp, #92	; 0x5c
   bcb64:	9317      	str	r3, [sp, #92]	; 0x5c
   bcb66:	f001 f807 	bl	bdb78 <__match>
   bcb6a:	b910      	cbnz	r0, bcb72 <_strtod_l+0x37a>
   bcb6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb6e:	3301      	adds	r3, #1
   bcb70:	9317      	str	r3, [sp, #92]	; 0x5c
   bcb72:	f8df b230 	ldr.w	fp, [pc, #560]	; bcda4 <_strtod_l+0x5ac>
   bcb76:	f04f 0a00 	mov.w	sl, #0
   bcb7a:	e681      	b.n	bc880 <_strtod_l+0x88>
   bcb7c:	4886      	ldr	r0, [pc, #536]	; (bcd98 <_strtod_l+0x5a0>)
   bcb7e:	f001 fd93 	bl	be6a8 <nan>
   bcb82:	ec5b ab10 	vmov	sl, fp, d0
   bcb86:	e67b      	b.n	bc880 <_strtod_l+0x88>
   bcb88:	9b05      	ldr	r3, [sp, #20]
   bcb8a:	9807      	ldr	r0, [sp, #28]
   bcb8c:	1af3      	subs	r3, r6, r3
   bcb8e:	2f00      	cmp	r7, #0
   bcb90:	bf08      	it	eq
   bcb92:	462f      	moveq	r7, r5
   bcb94:	2d10      	cmp	r5, #16
   bcb96:	9306      	str	r3, [sp, #24]
   bcb98:	46a8      	mov	r8, r5
   bcb9a:	bfa8      	it	ge
   bcb9c:	f04f 0810 	movge.w	r8, #16
   bcba0:	f7ff f92c 	bl	bbdfc <__aeabi_ui2d>
   bcba4:	2d09      	cmp	r5, #9
   bcba6:	4682      	mov	sl, r0
   bcba8:	468b      	mov	fp, r1
   bcbaa:	dd13      	ble.n	bcbd4 <_strtod_l+0x3dc>
   bcbac:	4b7b      	ldr	r3, [pc, #492]	; (bcd9c <_strtod_l+0x5a4>)
   bcbae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bcbb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bcbb6:	f7ff f99b 	bl	bbef0 <__aeabi_dmul>
   bcbba:	4682      	mov	sl, r0
   bcbbc:	4648      	mov	r0, r9
   bcbbe:	468b      	mov	fp, r1
   bcbc0:	f7ff f91c 	bl	bbdfc <__aeabi_ui2d>
   bcbc4:	4602      	mov	r2, r0
   bcbc6:	460b      	mov	r3, r1
   bcbc8:	4650      	mov	r0, sl
   bcbca:	4659      	mov	r1, fp
   bcbcc:	f7fe ffda 	bl	bbb84 <__adddf3>
   bcbd0:	4682      	mov	sl, r0
   bcbd2:	468b      	mov	fp, r1
   bcbd4:	2d0f      	cmp	r5, #15
   bcbd6:	dc38      	bgt.n	bcc4a <_strtod_l+0x452>
   bcbd8:	9b06      	ldr	r3, [sp, #24]
   bcbda:	2b00      	cmp	r3, #0
   bcbdc:	f43f ae50 	beq.w	bc880 <_strtod_l+0x88>
   bcbe0:	dd24      	ble.n	bcc2c <_strtod_l+0x434>
   bcbe2:	2b16      	cmp	r3, #22
   bcbe4:	dc0b      	bgt.n	bcbfe <_strtod_l+0x406>
   bcbe6:	496d      	ldr	r1, [pc, #436]	; (bcd9c <_strtod_l+0x5a4>)
   bcbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcbec:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcbf0:	4652      	mov	r2, sl
   bcbf2:	465b      	mov	r3, fp
   bcbf4:	f7ff f97c 	bl	bbef0 <__aeabi_dmul>
   bcbf8:	4682      	mov	sl, r0
   bcbfa:	468b      	mov	fp, r1
   bcbfc:	e640      	b.n	bc880 <_strtod_l+0x88>
   bcbfe:	9a06      	ldr	r2, [sp, #24]
   bcc00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bcc04:	4293      	cmp	r3, r2
   bcc06:	db20      	blt.n	bcc4a <_strtod_l+0x452>
   bcc08:	4c64      	ldr	r4, [pc, #400]	; (bcd9c <_strtod_l+0x5a4>)
   bcc0a:	f1c5 050f 	rsb	r5, r5, #15
   bcc0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bcc12:	4652      	mov	r2, sl
   bcc14:	465b      	mov	r3, fp
   bcc16:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc1a:	f7ff f969 	bl	bbef0 <__aeabi_dmul>
   bcc1e:	9b06      	ldr	r3, [sp, #24]
   bcc20:	1b5d      	subs	r5, r3, r5
   bcc22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bcc26:	e9d4 2300 	ldrd	r2, r3, [r4]
   bcc2a:	e7e3      	b.n	bcbf4 <_strtod_l+0x3fc>
   bcc2c:	9b06      	ldr	r3, [sp, #24]
   bcc2e:	3316      	adds	r3, #22
   bcc30:	db0b      	blt.n	bcc4a <_strtod_l+0x452>
   bcc32:	9b05      	ldr	r3, [sp, #20]
   bcc34:	1b9e      	subs	r6, r3, r6
   bcc36:	4b59      	ldr	r3, [pc, #356]	; (bcd9c <_strtod_l+0x5a4>)
   bcc38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bcc3c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bcc40:	4650      	mov	r0, sl
   bcc42:	4659      	mov	r1, fp
   bcc44:	f7ff fa7e 	bl	bc144 <__aeabi_ddiv>
   bcc48:	e7d6      	b.n	bcbf8 <_strtod_l+0x400>
   bcc4a:	9b06      	ldr	r3, [sp, #24]
   bcc4c:	eba5 0808 	sub.w	r8, r5, r8
   bcc50:	4498      	add	r8, r3
   bcc52:	f1b8 0f00 	cmp.w	r8, #0
   bcc56:	dd74      	ble.n	bcd42 <_strtod_l+0x54a>
   bcc58:	f018 030f 	ands.w	r3, r8, #15
   bcc5c:	d00a      	beq.n	bcc74 <_strtod_l+0x47c>
   bcc5e:	494f      	ldr	r1, [pc, #316]	; (bcd9c <_strtod_l+0x5a4>)
   bcc60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcc64:	4652      	mov	r2, sl
   bcc66:	465b      	mov	r3, fp
   bcc68:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc6c:	f7ff f940 	bl	bbef0 <__aeabi_dmul>
   bcc70:	4682      	mov	sl, r0
   bcc72:	468b      	mov	fp, r1
   bcc74:	f038 080f 	bics.w	r8, r8, #15
   bcc78:	d04f      	beq.n	bcd1a <_strtod_l+0x522>
   bcc7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bcc7e:	dd22      	ble.n	bccc6 <_strtod_l+0x4ce>
   bcc80:	2500      	movs	r5, #0
   bcc82:	462e      	mov	r6, r5
   bcc84:	9507      	str	r5, [sp, #28]
   bcc86:	9505      	str	r5, [sp, #20]
   bcc88:	2322      	movs	r3, #34	; 0x22
   bcc8a:	f8df b118 	ldr.w	fp, [pc, #280]	; bcda4 <_strtod_l+0x5ac>
   bcc8e:	6023      	str	r3, [r4, #0]
   bcc90:	f04f 0a00 	mov.w	sl, #0
   bcc94:	9b07      	ldr	r3, [sp, #28]
   bcc96:	2b00      	cmp	r3, #0
   bcc98:	f43f adf2 	beq.w	bc880 <_strtod_l+0x88>
   bcc9c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcc9e:	4620      	mov	r0, r4
   bcca0:	f001 f870 	bl	bdd84 <_Bfree>
   bcca4:	9905      	ldr	r1, [sp, #20]
   bcca6:	4620      	mov	r0, r4
   bcca8:	f001 f86c 	bl	bdd84 <_Bfree>
   bccac:	4631      	mov	r1, r6
   bccae:	4620      	mov	r0, r4
   bccb0:	f001 f868 	bl	bdd84 <_Bfree>
   bccb4:	9907      	ldr	r1, [sp, #28]
   bccb6:	4620      	mov	r0, r4
   bccb8:	f001 f864 	bl	bdd84 <_Bfree>
   bccbc:	4629      	mov	r1, r5
   bccbe:	4620      	mov	r0, r4
   bccc0:	f001 f860 	bl	bdd84 <_Bfree>
   bccc4:	e5dc      	b.n	bc880 <_strtod_l+0x88>
   bccc6:	4b36      	ldr	r3, [pc, #216]	; (bcda0 <_strtod_l+0x5a8>)
   bccc8:	9304      	str	r3, [sp, #16]
   bccca:	2300      	movs	r3, #0
   bcccc:	ea4f 1828 	mov.w	r8, r8, asr #4
   bccd0:	4650      	mov	r0, sl
   bccd2:	4659      	mov	r1, fp
   bccd4:	4699      	mov	r9, r3
   bccd6:	f1b8 0f01 	cmp.w	r8, #1
   bccda:	dc21      	bgt.n	bcd20 <_strtod_l+0x528>
   bccdc:	b10b      	cbz	r3, bcce2 <_strtod_l+0x4ea>
   bccde:	4682      	mov	sl, r0
   bcce0:	468b      	mov	fp, r1
   bcce2:	4b2f      	ldr	r3, [pc, #188]	; (bcda0 <_strtod_l+0x5a8>)
   bcce4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bcce8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bccec:	4652      	mov	r2, sl
   bccee:	465b      	mov	r3, fp
   bccf0:	e9d9 0100 	ldrd	r0, r1, [r9]
   bccf4:	f7ff f8fc 	bl	bbef0 <__aeabi_dmul>
   bccf8:	4b2a      	ldr	r3, [pc, #168]	; (bcda4 <_strtod_l+0x5ac>)
   bccfa:	460a      	mov	r2, r1
   bccfc:	400b      	ands	r3, r1
   bccfe:	492a      	ldr	r1, [pc, #168]	; (bcda8 <_strtod_l+0x5b0>)
   bcd00:	428b      	cmp	r3, r1
   bcd02:	4682      	mov	sl, r0
   bcd04:	d8bc      	bhi.n	bcc80 <_strtod_l+0x488>
   bcd06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bcd0a:	428b      	cmp	r3, r1
   bcd0c:	bf86      	itte	hi
   bcd0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bcdac <_strtod_l+0x5b4>
   bcd12:	f04f 3aff 	movhi.w	sl, #4294967295
   bcd16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bcd1a:	2300      	movs	r3, #0
   bcd1c:	9304      	str	r3, [sp, #16]
   bcd1e:	e084      	b.n	bce2a <_strtod_l+0x632>
   bcd20:	f018 0f01 	tst.w	r8, #1
   bcd24:	d005      	beq.n	bcd32 <_strtod_l+0x53a>
   bcd26:	9b04      	ldr	r3, [sp, #16]
   bcd28:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd2c:	f7ff f8e0 	bl	bbef0 <__aeabi_dmul>
   bcd30:	2301      	movs	r3, #1
   bcd32:	9a04      	ldr	r2, [sp, #16]
   bcd34:	3208      	adds	r2, #8
   bcd36:	f109 0901 	add.w	r9, r9, #1
   bcd3a:	ea4f 0868 	mov.w	r8, r8, asr #1
   bcd3e:	9204      	str	r2, [sp, #16]
   bcd40:	e7c9      	b.n	bccd6 <_strtod_l+0x4de>
   bcd42:	d0ea      	beq.n	bcd1a <_strtod_l+0x522>
   bcd44:	f1c8 0800 	rsb	r8, r8, #0
   bcd48:	f018 020f 	ands.w	r2, r8, #15
   bcd4c:	d00a      	beq.n	bcd64 <_strtod_l+0x56c>
   bcd4e:	4b13      	ldr	r3, [pc, #76]	; (bcd9c <_strtod_l+0x5a4>)
   bcd50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bcd54:	4650      	mov	r0, sl
   bcd56:	4659      	mov	r1, fp
   bcd58:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd5c:	f7ff f9f2 	bl	bc144 <__aeabi_ddiv>
   bcd60:	4682      	mov	sl, r0
   bcd62:	468b      	mov	fp, r1
   bcd64:	ea5f 1828 	movs.w	r8, r8, asr #4
   bcd68:	d0d7      	beq.n	bcd1a <_strtod_l+0x522>
   bcd6a:	f1b8 0f1f 	cmp.w	r8, #31
   bcd6e:	dd1f      	ble.n	bcdb0 <_strtod_l+0x5b8>
   bcd70:	2500      	movs	r5, #0
   bcd72:	462e      	mov	r6, r5
   bcd74:	9507      	str	r5, [sp, #28]
   bcd76:	9505      	str	r5, [sp, #20]
   bcd78:	2322      	movs	r3, #34	; 0x22
   bcd7a:	f04f 0a00 	mov.w	sl, #0
   bcd7e:	f04f 0b00 	mov.w	fp, #0
   bcd82:	6023      	str	r3, [r4, #0]
   bcd84:	e786      	b.n	bcc94 <_strtod_l+0x49c>
   bcd86:	bf00      	nop
   bcd88:	000bf32e 	.word	0x000bf32e
   bcd8c:	000bf348 	.word	0x000bf348
   bcd90:	000bf325 	.word	0x000bf325
   bcd94:	000bf328 	.word	0x000bf328
   bcd98:	000befb8 	.word	0x000befb8
   bcd9c:	000bf5e0 	.word	0x000bf5e0
   bcda0:	000bf5b8 	.word	0x000bf5b8
   bcda4:	7ff00000 	.word	0x7ff00000
   bcda8:	7ca00000 	.word	0x7ca00000
   bcdac:	7fefffff 	.word	0x7fefffff
   bcdb0:	f018 0310 	ands.w	r3, r8, #16
   bcdb4:	bf18      	it	ne
   bcdb6:	236a      	movne	r3, #106	; 0x6a
   bcdb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bd168 <_strtod_l+0x970>
   bcdbc:	9304      	str	r3, [sp, #16]
   bcdbe:	4650      	mov	r0, sl
   bcdc0:	4659      	mov	r1, fp
   bcdc2:	2300      	movs	r3, #0
   bcdc4:	f018 0f01 	tst.w	r8, #1
   bcdc8:	d004      	beq.n	bcdd4 <_strtod_l+0x5dc>
   bcdca:	e9d9 2300 	ldrd	r2, r3, [r9]
   bcdce:	f7ff f88f 	bl	bbef0 <__aeabi_dmul>
   bcdd2:	2301      	movs	r3, #1
   bcdd4:	ea5f 0868 	movs.w	r8, r8, asr #1
   bcdd8:	f109 0908 	add.w	r9, r9, #8
   bcddc:	d1f2      	bne.n	bcdc4 <_strtod_l+0x5cc>
   bcdde:	b10b      	cbz	r3, bcde4 <_strtod_l+0x5ec>
   bcde0:	4682      	mov	sl, r0
   bcde2:	468b      	mov	fp, r1
   bcde4:	9b04      	ldr	r3, [sp, #16]
   bcde6:	b1c3      	cbz	r3, bce1a <_strtod_l+0x622>
   bcde8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bcdec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bcdf0:	2b00      	cmp	r3, #0
   bcdf2:	4659      	mov	r1, fp
   bcdf4:	dd11      	ble.n	bce1a <_strtod_l+0x622>
   bcdf6:	2b1f      	cmp	r3, #31
   bcdf8:	f340 8124 	ble.w	bd044 <_strtod_l+0x84c>
   bcdfc:	2b34      	cmp	r3, #52	; 0x34
   bcdfe:	bfde      	ittt	le
   bce00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bce04:	f04f 33ff 	movle.w	r3, #4294967295
   bce08:	fa03 f202 	lslle.w	r2, r3, r2
   bce0c:	f04f 0a00 	mov.w	sl, #0
   bce10:	bfcc      	ite	gt
   bce12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bce16:	ea02 0b01 	andle.w	fp, r2, r1
   bce1a:	2200      	movs	r2, #0
   bce1c:	2300      	movs	r3, #0
   bce1e:	4650      	mov	r0, sl
   bce20:	4659      	mov	r1, fp
   bce22:	f7ff facd 	bl	bc3c0 <__aeabi_dcmpeq>
   bce26:	2800      	cmp	r0, #0
   bce28:	d1a2      	bne.n	bcd70 <_strtod_l+0x578>
   bce2a:	9b07      	ldr	r3, [sp, #28]
   bce2c:	9300      	str	r3, [sp, #0]
   bce2e:	9908      	ldr	r1, [sp, #32]
   bce30:	462b      	mov	r3, r5
   bce32:	463a      	mov	r2, r7
   bce34:	4620      	mov	r0, r4
   bce36:	f001 f80d 	bl	bde54 <__s2b>
   bce3a:	9007      	str	r0, [sp, #28]
   bce3c:	2800      	cmp	r0, #0
   bce3e:	f43f af1f 	beq.w	bcc80 <_strtod_l+0x488>
   bce42:	9b05      	ldr	r3, [sp, #20]
   bce44:	1b9e      	subs	r6, r3, r6
   bce46:	9b06      	ldr	r3, [sp, #24]
   bce48:	2b00      	cmp	r3, #0
   bce4a:	bfb4      	ite	lt
   bce4c:	4633      	movlt	r3, r6
   bce4e:	2300      	movge	r3, #0
   bce50:	930c      	str	r3, [sp, #48]	; 0x30
   bce52:	9b06      	ldr	r3, [sp, #24]
   bce54:	2500      	movs	r5, #0
   bce56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bce5a:	9312      	str	r3, [sp, #72]	; 0x48
   bce5c:	462e      	mov	r6, r5
   bce5e:	9b07      	ldr	r3, [sp, #28]
   bce60:	4620      	mov	r0, r4
   bce62:	6859      	ldr	r1, [r3, #4]
   bce64:	f000 ff4e 	bl	bdd04 <_Balloc>
   bce68:	9005      	str	r0, [sp, #20]
   bce6a:	2800      	cmp	r0, #0
   bce6c:	f43f af0c 	beq.w	bcc88 <_strtod_l+0x490>
   bce70:	9b07      	ldr	r3, [sp, #28]
   bce72:	691a      	ldr	r2, [r3, #16]
   bce74:	3202      	adds	r2, #2
   bce76:	f103 010c 	add.w	r1, r3, #12
   bce7a:	0092      	lsls	r2, r2, #2
   bce7c:	300c      	adds	r0, #12
   bce7e:	f7ff fb85 	bl	bc58c <memcpy>
   bce82:	ec4b ab10 	vmov	d0, sl, fp
   bce86:	aa1a      	add	r2, sp, #104	; 0x68
   bce88:	a919      	add	r1, sp, #100	; 0x64
   bce8a:	4620      	mov	r0, r4
   bce8c:	f001 fb28 	bl	be4e0 <__d2b>
   bce90:	ec4b ab18 	vmov	d8, sl, fp
   bce94:	9018      	str	r0, [sp, #96]	; 0x60
   bce96:	2800      	cmp	r0, #0
   bce98:	f43f aef6 	beq.w	bcc88 <_strtod_l+0x490>
   bce9c:	2101      	movs	r1, #1
   bce9e:	4620      	mov	r0, r4
   bcea0:	f001 f872 	bl	bdf88 <__i2b>
   bcea4:	4606      	mov	r6, r0
   bcea6:	2800      	cmp	r0, #0
   bcea8:	f43f aeee 	beq.w	bcc88 <_strtod_l+0x490>
   bceac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bceae:	9904      	ldr	r1, [sp, #16]
   bceb0:	2b00      	cmp	r3, #0
   bceb2:	bfab      	itete	ge
   bceb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bceb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bceb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bceba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bcebe:	bfac      	ite	ge
   bcec0:	eb03 0902 	addge.w	r9, r3, r2
   bcec4:	1ad7      	sublt	r7, r2, r3
   bcec6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bcec8:	eba3 0801 	sub.w	r8, r3, r1
   bcecc:	4490      	add	r8, r2
   bcece:	4ba1      	ldr	r3, [pc, #644]	; (bd154 <_strtod_l+0x95c>)
   bced0:	f108 38ff 	add.w	r8, r8, #4294967295
   bced4:	4598      	cmp	r8, r3
   bced6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bceda:	f280 80c7 	bge.w	bd06c <_strtod_l+0x874>
   bcede:	eba3 0308 	sub.w	r3, r3, r8
   bcee2:	2b1f      	cmp	r3, #31
   bcee4:	eba2 0203 	sub.w	r2, r2, r3
   bcee8:	f04f 0101 	mov.w	r1, #1
   bceec:	f300 80b1 	bgt.w	bd052 <_strtod_l+0x85a>
   bcef0:	fa01 f303 	lsl.w	r3, r1, r3
   bcef4:	930d      	str	r3, [sp, #52]	; 0x34
   bcef6:	2300      	movs	r3, #0
   bcef8:	9308      	str	r3, [sp, #32]
   bcefa:	eb09 0802 	add.w	r8, r9, r2
   bcefe:	9b04      	ldr	r3, [sp, #16]
   bcf00:	45c1      	cmp	r9, r8
   bcf02:	4417      	add	r7, r2
   bcf04:	441f      	add	r7, r3
   bcf06:	464b      	mov	r3, r9
   bcf08:	bfa8      	it	ge
   bcf0a:	4643      	movge	r3, r8
   bcf0c:	42bb      	cmp	r3, r7
   bcf0e:	bfa8      	it	ge
   bcf10:	463b      	movge	r3, r7
   bcf12:	2b00      	cmp	r3, #0
   bcf14:	bfc2      	ittt	gt
   bcf16:	eba8 0803 	subgt.w	r8, r8, r3
   bcf1a:	1aff      	subgt	r7, r7, r3
   bcf1c:	eba9 0903 	subgt.w	r9, r9, r3
   bcf20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bcf22:	2b00      	cmp	r3, #0
   bcf24:	dd17      	ble.n	bcf56 <_strtod_l+0x75e>
   bcf26:	4631      	mov	r1, r6
   bcf28:	461a      	mov	r2, r3
   bcf2a:	4620      	mov	r0, r4
   bcf2c:	f001 f8ec 	bl	be108 <__pow5mult>
   bcf30:	4606      	mov	r6, r0
   bcf32:	2800      	cmp	r0, #0
   bcf34:	f43f aea8 	beq.w	bcc88 <_strtod_l+0x490>
   bcf38:	4601      	mov	r1, r0
   bcf3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bcf3c:	4620      	mov	r0, r4
   bcf3e:	f001 f839 	bl	bdfb4 <__multiply>
   bcf42:	900b      	str	r0, [sp, #44]	; 0x2c
   bcf44:	2800      	cmp	r0, #0
   bcf46:	f43f ae9f 	beq.w	bcc88 <_strtod_l+0x490>
   bcf4a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcf4c:	4620      	mov	r0, r4
   bcf4e:	f000 ff19 	bl	bdd84 <_Bfree>
   bcf52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcf54:	9318      	str	r3, [sp, #96]	; 0x60
   bcf56:	f1b8 0f00 	cmp.w	r8, #0
   bcf5a:	f300 808c 	bgt.w	bd076 <_strtod_l+0x87e>
   bcf5e:	9b06      	ldr	r3, [sp, #24]
   bcf60:	2b00      	cmp	r3, #0
   bcf62:	dd08      	ble.n	bcf76 <_strtod_l+0x77e>
   bcf64:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bcf66:	9905      	ldr	r1, [sp, #20]
   bcf68:	4620      	mov	r0, r4
   bcf6a:	f001 f8cd 	bl	be108 <__pow5mult>
   bcf6e:	9005      	str	r0, [sp, #20]
   bcf70:	2800      	cmp	r0, #0
   bcf72:	f43f ae89 	beq.w	bcc88 <_strtod_l+0x490>
   bcf76:	2f00      	cmp	r7, #0
   bcf78:	dd08      	ble.n	bcf8c <_strtod_l+0x794>
   bcf7a:	9905      	ldr	r1, [sp, #20]
   bcf7c:	463a      	mov	r2, r7
   bcf7e:	4620      	mov	r0, r4
   bcf80:	f001 f91c 	bl	be1bc <__lshift>
   bcf84:	9005      	str	r0, [sp, #20]
   bcf86:	2800      	cmp	r0, #0
   bcf88:	f43f ae7e 	beq.w	bcc88 <_strtod_l+0x490>
   bcf8c:	f1b9 0f00 	cmp.w	r9, #0
   bcf90:	dd08      	ble.n	bcfa4 <_strtod_l+0x7ac>
   bcf92:	4631      	mov	r1, r6
   bcf94:	464a      	mov	r2, r9
   bcf96:	4620      	mov	r0, r4
   bcf98:	f001 f910 	bl	be1bc <__lshift>
   bcf9c:	4606      	mov	r6, r0
   bcf9e:	2800      	cmp	r0, #0
   bcfa0:	f43f ae72 	beq.w	bcc88 <_strtod_l+0x490>
   bcfa4:	9a05      	ldr	r2, [sp, #20]
   bcfa6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcfa8:	4620      	mov	r0, r4
   bcfaa:	f001 f993 	bl	be2d4 <__mdiff>
   bcfae:	4605      	mov	r5, r0
   bcfb0:	2800      	cmp	r0, #0
   bcfb2:	f43f ae69 	beq.w	bcc88 <_strtod_l+0x490>
   bcfb6:	68c3      	ldr	r3, [r0, #12]
   bcfb8:	930b      	str	r3, [sp, #44]	; 0x2c
   bcfba:	2300      	movs	r3, #0
   bcfbc:	60c3      	str	r3, [r0, #12]
   bcfbe:	4631      	mov	r1, r6
   bcfc0:	f001 f96c 	bl	be29c <__mcmp>
   bcfc4:	2800      	cmp	r0, #0
   bcfc6:	da60      	bge.n	bd08a <_strtod_l+0x892>
   bcfc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcfca:	ea53 030a 	orrs.w	r3, r3, sl
   bcfce:	f040 8082 	bne.w	bd0d6 <_strtod_l+0x8de>
   bcfd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcfd6:	2b00      	cmp	r3, #0
   bcfd8:	d17d      	bne.n	bd0d6 <_strtod_l+0x8de>
   bcfda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bcfde:	0d1b      	lsrs	r3, r3, #20
   bcfe0:	051b      	lsls	r3, r3, #20
   bcfe2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bcfe6:	d976      	bls.n	bd0d6 <_strtod_l+0x8de>
   bcfe8:	696b      	ldr	r3, [r5, #20]
   bcfea:	b913      	cbnz	r3, bcff2 <_strtod_l+0x7fa>
   bcfec:	692b      	ldr	r3, [r5, #16]
   bcfee:	2b01      	cmp	r3, #1
   bcff0:	dd71      	ble.n	bd0d6 <_strtod_l+0x8de>
   bcff2:	4629      	mov	r1, r5
   bcff4:	2201      	movs	r2, #1
   bcff6:	4620      	mov	r0, r4
   bcff8:	f001 f8e0 	bl	be1bc <__lshift>
   bcffc:	4631      	mov	r1, r6
   bcffe:	4605      	mov	r5, r0
   bd000:	f001 f94c 	bl	be29c <__mcmp>
   bd004:	2800      	cmp	r0, #0
   bd006:	dd66      	ble.n	bd0d6 <_strtod_l+0x8de>
   bd008:	9904      	ldr	r1, [sp, #16]
   bd00a:	4a53      	ldr	r2, [pc, #332]	; (bd158 <_strtod_l+0x960>)
   bd00c:	465b      	mov	r3, fp
   bd00e:	2900      	cmp	r1, #0
   bd010:	f000 8081 	beq.w	bd116 <_strtod_l+0x91e>
   bd014:	ea02 010b 	and.w	r1, r2, fp
   bd018:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bd01c:	dc7b      	bgt.n	bd116 <_strtod_l+0x91e>
   bd01e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bd022:	f77f aea9 	ble.w	bcd78 <_strtod_l+0x580>
   bd026:	4b4d      	ldr	r3, [pc, #308]	; (bd15c <_strtod_l+0x964>)
   bd028:	4650      	mov	r0, sl
   bd02a:	4659      	mov	r1, fp
   bd02c:	2200      	movs	r2, #0
   bd02e:	f7fe ff5f 	bl	bbef0 <__aeabi_dmul>
   bd032:	460b      	mov	r3, r1
   bd034:	4303      	orrs	r3, r0
   bd036:	bf08      	it	eq
   bd038:	2322      	moveq	r3, #34	; 0x22
   bd03a:	4682      	mov	sl, r0
   bd03c:	468b      	mov	fp, r1
   bd03e:	bf08      	it	eq
   bd040:	6023      	streq	r3, [r4, #0]
   bd042:	e62b      	b.n	bcc9c <_strtod_l+0x4a4>
   bd044:	f04f 32ff 	mov.w	r2, #4294967295
   bd048:	fa02 f303 	lsl.w	r3, r2, r3
   bd04c:	ea03 0a0a 	and.w	sl, r3, sl
   bd050:	e6e3      	b.n	bce1a <_strtod_l+0x622>
   bd052:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bd056:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bd05a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bd05e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bd062:	fa01 f308 	lsl.w	r3, r1, r8
   bd066:	9308      	str	r3, [sp, #32]
   bd068:	910d      	str	r1, [sp, #52]	; 0x34
   bd06a:	e746      	b.n	bcefa <_strtod_l+0x702>
   bd06c:	2300      	movs	r3, #0
   bd06e:	9308      	str	r3, [sp, #32]
   bd070:	2301      	movs	r3, #1
   bd072:	930d      	str	r3, [sp, #52]	; 0x34
   bd074:	e741      	b.n	bcefa <_strtod_l+0x702>
   bd076:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd078:	4642      	mov	r2, r8
   bd07a:	4620      	mov	r0, r4
   bd07c:	f001 f89e 	bl	be1bc <__lshift>
   bd080:	9018      	str	r0, [sp, #96]	; 0x60
   bd082:	2800      	cmp	r0, #0
   bd084:	f47f af6b 	bne.w	bcf5e <_strtod_l+0x766>
   bd088:	e5fe      	b.n	bcc88 <_strtod_l+0x490>
   bd08a:	465f      	mov	r7, fp
   bd08c:	d16e      	bne.n	bd16c <_strtod_l+0x974>
   bd08e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd090:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd094:	b342      	cbz	r2, bd0e8 <_strtod_l+0x8f0>
   bd096:	4a32      	ldr	r2, [pc, #200]	; (bd160 <_strtod_l+0x968>)
   bd098:	4293      	cmp	r3, r2
   bd09a:	d128      	bne.n	bd0ee <_strtod_l+0x8f6>
   bd09c:	9b04      	ldr	r3, [sp, #16]
   bd09e:	4651      	mov	r1, sl
   bd0a0:	b1eb      	cbz	r3, bd0de <_strtod_l+0x8e6>
   bd0a2:	4b2d      	ldr	r3, [pc, #180]	; (bd158 <_strtod_l+0x960>)
   bd0a4:	403b      	ands	r3, r7
   bd0a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd0aa:	f04f 32ff 	mov.w	r2, #4294967295
   bd0ae:	d819      	bhi.n	bd0e4 <_strtod_l+0x8ec>
   bd0b0:	0d1b      	lsrs	r3, r3, #20
   bd0b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd0b6:	fa02 f303 	lsl.w	r3, r2, r3
   bd0ba:	4299      	cmp	r1, r3
   bd0bc:	d117      	bne.n	bd0ee <_strtod_l+0x8f6>
   bd0be:	4b29      	ldr	r3, [pc, #164]	; (bd164 <_strtod_l+0x96c>)
   bd0c0:	429f      	cmp	r7, r3
   bd0c2:	d102      	bne.n	bd0ca <_strtod_l+0x8d2>
   bd0c4:	3101      	adds	r1, #1
   bd0c6:	f43f addf 	beq.w	bcc88 <_strtod_l+0x490>
   bd0ca:	4b23      	ldr	r3, [pc, #140]	; (bd158 <_strtod_l+0x960>)
   bd0cc:	403b      	ands	r3, r7
   bd0ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bd0d2:	f04f 0a00 	mov.w	sl, #0
   bd0d6:	9b04      	ldr	r3, [sp, #16]
   bd0d8:	2b00      	cmp	r3, #0
   bd0da:	d1a4      	bne.n	bd026 <_strtod_l+0x82e>
   bd0dc:	e5de      	b.n	bcc9c <_strtod_l+0x4a4>
   bd0de:	f04f 33ff 	mov.w	r3, #4294967295
   bd0e2:	e7ea      	b.n	bd0ba <_strtod_l+0x8c2>
   bd0e4:	4613      	mov	r3, r2
   bd0e6:	e7e8      	b.n	bd0ba <_strtod_l+0x8c2>
   bd0e8:	ea53 030a 	orrs.w	r3, r3, sl
   bd0ec:	d08c      	beq.n	bd008 <_strtod_l+0x810>
   bd0ee:	9b08      	ldr	r3, [sp, #32]
   bd0f0:	b1db      	cbz	r3, bd12a <_strtod_l+0x932>
   bd0f2:	423b      	tst	r3, r7
   bd0f4:	d0ef      	beq.n	bd0d6 <_strtod_l+0x8de>
   bd0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd0f8:	9a04      	ldr	r2, [sp, #16]
   bd0fa:	4650      	mov	r0, sl
   bd0fc:	4659      	mov	r1, fp
   bd0fe:	b1c3      	cbz	r3, bd132 <_strtod_l+0x93a>
   bd100:	f7ff fb5c 	bl	bc7bc <sulp>
   bd104:	4602      	mov	r2, r0
   bd106:	460b      	mov	r3, r1
   bd108:	ec51 0b18 	vmov	r0, r1, d8
   bd10c:	f7fe fd3a 	bl	bbb84 <__adddf3>
   bd110:	4682      	mov	sl, r0
   bd112:	468b      	mov	fp, r1
   bd114:	e7df      	b.n	bd0d6 <_strtod_l+0x8de>
   bd116:	4013      	ands	r3, r2
   bd118:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bd11c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bd120:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bd124:	f04f 3aff 	mov.w	sl, #4294967295
   bd128:	e7d5      	b.n	bd0d6 <_strtod_l+0x8de>
   bd12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd12c:	ea13 0f0a 	tst.w	r3, sl
   bd130:	e7e0      	b.n	bd0f4 <_strtod_l+0x8fc>
   bd132:	f7ff fb43 	bl	bc7bc <sulp>
   bd136:	4602      	mov	r2, r0
   bd138:	460b      	mov	r3, r1
   bd13a:	ec51 0b18 	vmov	r0, r1, d8
   bd13e:	f7fe fd1f 	bl	bbb80 <__aeabi_dsub>
   bd142:	2200      	movs	r2, #0
   bd144:	2300      	movs	r3, #0
   bd146:	4682      	mov	sl, r0
   bd148:	468b      	mov	fp, r1
   bd14a:	f7ff f939 	bl	bc3c0 <__aeabi_dcmpeq>
   bd14e:	2800      	cmp	r0, #0
   bd150:	d0c1      	beq.n	bd0d6 <_strtod_l+0x8de>
   bd152:	e611      	b.n	bcd78 <_strtod_l+0x580>
   bd154:	fffffc02 	.word	0xfffffc02
   bd158:	7ff00000 	.word	0x7ff00000
   bd15c:	39500000 	.word	0x39500000
   bd160:	000fffff 	.word	0x000fffff
   bd164:	7fefffff 	.word	0x7fefffff
   bd168:	000bf360 	.word	0x000bf360
   bd16c:	4631      	mov	r1, r6
   bd16e:	4628      	mov	r0, r5
   bd170:	f001 fa12 	bl	be598 <__ratio>
   bd174:	ec59 8b10 	vmov	r8, r9, d0
   bd178:	ee10 0a10 	vmov	r0, s0
   bd17c:	2200      	movs	r2, #0
   bd17e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bd182:	4649      	mov	r1, r9
   bd184:	f7ff f930 	bl	bc3e8 <__aeabi_dcmple>
   bd188:	2800      	cmp	r0, #0
   bd18a:	d07a      	beq.n	bd282 <_strtod_l+0xa8a>
   bd18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd18e:	2b00      	cmp	r3, #0
   bd190:	d04a      	beq.n	bd228 <_strtod_l+0xa30>
   bd192:	4b95      	ldr	r3, [pc, #596]	; (bd3e8 <_strtod_l+0xbf0>)
   bd194:	2200      	movs	r2, #0
   bd196:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd19a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bd3e8 <_strtod_l+0xbf0>
   bd19e:	f04f 0800 	mov.w	r8, #0
   bd1a2:	4b92      	ldr	r3, [pc, #584]	; (bd3ec <_strtod_l+0xbf4>)
   bd1a4:	403b      	ands	r3, r7
   bd1a6:	930d      	str	r3, [sp, #52]	; 0x34
   bd1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd1aa:	4b91      	ldr	r3, [pc, #580]	; (bd3f0 <_strtod_l+0xbf8>)
   bd1ac:	429a      	cmp	r2, r3
   bd1ae:	f040 80b0 	bne.w	bd312 <_strtod_l+0xb1a>
   bd1b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd1b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bd1ba:	ec4b ab10 	vmov	d0, sl, fp
   bd1be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd1c2:	f001 f911 	bl	be3e8 <__ulp>
   bd1c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd1ca:	ec53 2b10 	vmov	r2, r3, d0
   bd1ce:	f7fe fe8f 	bl	bbef0 <__aeabi_dmul>
   bd1d2:	4652      	mov	r2, sl
   bd1d4:	465b      	mov	r3, fp
   bd1d6:	f7fe fcd5 	bl	bbb84 <__adddf3>
   bd1da:	460b      	mov	r3, r1
   bd1dc:	4983      	ldr	r1, [pc, #524]	; (bd3ec <_strtod_l+0xbf4>)
   bd1de:	4a85      	ldr	r2, [pc, #532]	; (bd3f4 <_strtod_l+0xbfc>)
   bd1e0:	4019      	ands	r1, r3
   bd1e2:	4291      	cmp	r1, r2
   bd1e4:	4682      	mov	sl, r0
   bd1e6:	d960      	bls.n	bd2aa <_strtod_l+0xab2>
   bd1e8:	ee18 3a90 	vmov	r3, s17
   bd1ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bd1f0:	4293      	cmp	r3, r2
   bd1f2:	d104      	bne.n	bd1fe <_strtod_l+0xa06>
   bd1f4:	ee18 3a10 	vmov	r3, s16
   bd1f8:	3301      	adds	r3, #1
   bd1fa:	f43f ad45 	beq.w	bcc88 <_strtod_l+0x490>
   bd1fe:	f8df b200 	ldr.w	fp, [pc, #512]	; bd400 <_strtod_l+0xc08>
   bd202:	f04f 3aff 	mov.w	sl, #4294967295
   bd206:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd208:	4620      	mov	r0, r4
   bd20a:	f000 fdbb 	bl	bdd84 <_Bfree>
   bd20e:	9905      	ldr	r1, [sp, #20]
   bd210:	4620      	mov	r0, r4
   bd212:	f000 fdb7 	bl	bdd84 <_Bfree>
   bd216:	4631      	mov	r1, r6
   bd218:	4620      	mov	r0, r4
   bd21a:	f000 fdb3 	bl	bdd84 <_Bfree>
   bd21e:	4629      	mov	r1, r5
   bd220:	4620      	mov	r0, r4
   bd222:	f000 fdaf 	bl	bdd84 <_Bfree>
   bd226:	e61a      	b.n	bce5e <_strtod_l+0x666>
   bd228:	f1ba 0f00 	cmp.w	sl, #0
   bd22c:	d11b      	bne.n	bd266 <_strtod_l+0xa6e>
   bd22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd232:	b9f3      	cbnz	r3, bd272 <_strtod_l+0xa7a>
   bd234:	4b6c      	ldr	r3, [pc, #432]	; (bd3e8 <_strtod_l+0xbf0>)
   bd236:	2200      	movs	r2, #0
   bd238:	4640      	mov	r0, r8
   bd23a:	4649      	mov	r1, r9
   bd23c:	f7ff f8ca 	bl	bc3d4 <__aeabi_dcmplt>
   bd240:	b9d0      	cbnz	r0, bd278 <_strtod_l+0xa80>
   bd242:	4640      	mov	r0, r8
   bd244:	4649      	mov	r1, r9
   bd246:	4b6c      	ldr	r3, [pc, #432]	; (bd3f8 <_strtod_l+0xc00>)
   bd248:	2200      	movs	r2, #0
   bd24a:	f7fe fe51 	bl	bbef0 <__aeabi_dmul>
   bd24e:	4680      	mov	r8, r0
   bd250:	4689      	mov	r9, r1
   bd252:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bd256:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bd25a:	9315      	str	r3, [sp, #84]	; 0x54
   bd25c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bd260:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd264:	e79d      	b.n	bd1a2 <_strtod_l+0x9aa>
   bd266:	f1ba 0f01 	cmp.w	sl, #1
   bd26a:	d102      	bne.n	bd272 <_strtod_l+0xa7a>
   bd26c:	2f00      	cmp	r7, #0
   bd26e:	f43f ad83 	beq.w	bcd78 <_strtod_l+0x580>
   bd272:	4b62      	ldr	r3, [pc, #392]	; (bd3fc <_strtod_l+0xc04>)
   bd274:	2200      	movs	r2, #0
   bd276:	e78e      	b.n	bd196 <_strtod_l+0x99e>
   bd278:	f8df 917c 	ldr.w	r9, [pc, #380]	; bd3f8 <_strtod_l+0xc00>
   bd27c:	f04f 0800 	mov.w	r8, #0
   bd280:	e7e7      	b.n	bd252 <_strtod_l+0xa5a>
   bd282:	4b5d      	ldr	r3, [pc, #372]	; (bd3f8 <_strtod_l+0xc00>)
   bd284:	4640      	mov	r0, r8
   bd286:	4649      	mov	r1, r9
   bd288:	2200      	movs	r2, #0
   bd28a:	f7fe fe31 	bl	bbef0 <__aeabi_dmul>
   bd28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd290:	4680      	mov	r8, r0
   bd292:	4689      	mov	r9, r1
   bd294:	b933      	cbnz	r3, bd2a4 <_strtod_l+0xaac>
   bd296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd29a:	900e      	str	r0, [sp, #56]	; 0x38
   bd29c:	930f      	str	r3, [sp, #60]	; 0x3c
   bd29e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bd2a2:	e7dd      	b.n	bd260 <_strtod_l+0xa68>
   bd2a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bd2a8:	e7f9      	b.n	bd29e <_strtod_l+0xaa6>
   bd2aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bd2ae:	9b04      	ldr	r3, [sp, #16]
   bd2b0:	2b00      	cmp	r3, #0
   bd2b2:	d1a8      	bne.n	bd206 <_strtod_l+0xa0e>
   bd2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd2ba:	0d1b      	lsrs	r3, r3, #20
   bd2bc:	051b      	lsls	r3, r3, #20
   bd2be:	429a      	cmp	r2, r3
   bd2c0:	d1a1      	bne.n	bd206 <_strtod_l+0xa0e>
   bd2c2:	4640      	mov	r0, r8
   bd2c4:	4649      	mov	r1, r9
   bd2c6:	f001 fa05 	bl	be6d4 <__aeabi_d2lz>
   bd2ca:	f7fe fde3 	bl	bbe94 <__aeabi_l2d>
   bd2ce:	4602      	mov	r2, r0
   bd2d0:	460b      	mov	r3, r1
   bd2d2:	4640      	mov	r0, r8
   bd2d4:	4649      	mov	r1, r9
   bd2d6:	f7fe fc53 	bl	bbb80 <__aeabi_dsub>
   bd2da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd2e0:	ea43 030a 	orr.w	r3, r3, sl
   bd2e4:	4313      	orrs	r3, r2
   bd2e6:	4680      	mov	r8, r0
   bd2e8:	4689      	mov	r9, r1
   bd2ea:	d055      	beq.n	bd398 <_strtod_l+0xba0>
   bd2ec:	a336      	add	r3, pc, #216	; (adr r3, bd3c8 <_strtod_l+0xbd0>)
   bd2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd2f2:	f7ff f86f 	bl	bc3d4 <__aeabi_dcmplt>
   bd2f6:	2800      	cmp	r0, #0
   bd2f8:	f47f acd0 	bne.w	bcc9c <_strtod_l+0x4a4>
   bd2fc:	a334      	add	r3, pc, #208	; (adr r3, bd3d0 <_strtod_l+0xbd8>)
   bd2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd302:	4640      	mov	r0, r8
   bd304:	4649      	mov	r1, r9
   bd306:	f7ff f883 	bl	bc410 <__aeabi_dcmpgt>
   bd30a:	2800      	cmp	r0, #0
   bd30c:	f43f af7b 	beq.w	bd206 <_strtod_l+0xa0e>
   bd310:	e4c4      	b.n	bcc9c <_strtod_l+0x4a4>
   bd312:	9b04      	ldr	r3, [sp, #16]
   bd314:	b333      	cbz	r3, bd364 <_strtod_l+0xb6c>
   bd316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd318:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd31c:	d822      	bhi.n	bd364 <_strtod_l+0xb6c>
   bd31e:	a32e      	add	r3, pc, #184	; (adr r3, bd3d8 <_strtod_l+0xbe0>)
   bd320:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd324:	4640      	mov	r0, r8
   bd326:	4649      	mov	r1, r9
   bd328:	f7ff f85e 	bl	bc3e8 <__aeabi_dcmple>
   bd32c:	b1a0      	cbz	r0, bd358 <_strtod_l+0xb60>
   bd32e:	4649      	mov	r1, r9
   bd330:	4640      	mov	r0, r8
   bd332:	f7ff f877 	bl	bc424 <__aeabi_d2uiz>
   bd336:	2801      	cmp	r0, #1
   bd338:	bf38      	it	cc
   bd33a:	2001      	movcc	r0, #1
   bd33c:	f7fe fd5e 	bl	bbdfc <__aeabi_ui2d>
   bd340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd342:	4680      	mov	r8, r0
   bd344:	4689      	mov	r9, r1
   bd346:	bb23      	cbnz	r3, bd392 <_strtod_l+0xb9a>
   bd348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd34c:	9010      	str	r0, [sp, #64]	; 0x40
   bd34e:	9311      	str	r3, [sp, #68]	; 0x44
   bd350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bd354:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd358:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd35a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd35c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bd360:	1a9b      	subs	r3, r3, r2
   bd362:	9309      	str	r3, [sp, #36]	; 0x24
   bd364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd368:	eeb0 0a48 	vmov.f32	s0, s16
   bd36c:	eef0 0a68 	vmov.f32	s1, s17
   bd370:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd374:	f001 f838 	bl	be3e8 <__ulp>
   bd378:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd37c:	ec53 2b10 	vmov	r2, r3, d0
   bd380:	f7fe fdb6 	bl	bbef0 <__aeabi_dmul>
   bd384:	ec53 2b18 	vmov	r2, r3, d8
   bd388:	f7fe fbfc 	bl	bbb84 <__adddf3>
   bd38c:	4682      	mov	sl, r0
   bd38e:	468b      	mov	fp, r1
   bd390:	e78d      	b.n	bd2ae <_strtod_l+0xab6>
   bd392:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bd396:	e7db      	b.n	bd350 <_strtod_l+0xb58>
   bd398:	a311      	add	r3, pc, #68	; (adr r3, bd3e0 <_strtod_l+0xbe8>)
   bd39a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd39e:	f7ff f819 	bl	bc3d4 <__aeabi_dcmplt>
   bd3a2:	e7b2      	b.n	bd30a <_strtod_l+0xb12>
   bd3a4:	2300      	movs	r3, #0
   bd3a6:	930a      	str	r3, [sp, #40]	; 0x28
   bd3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bd3aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd3ac:	6013      	str	r3, [r2, #0]
   bd3ae:	f7ff ba6b 	b.w	bc888 <_strtod_l+0x90>
   bd3b2:	2a65      	cmp	r2, #101	; 0x65
   bd3b4:	f43f ab5f 	beq.w	bca76 <_strtod_l+0x27e>
   bd3b8:	2a45      	cmp	r2, #69	; 0x45
   bd3ba:	f43f ab5c 	beq.w	bca76 <_strtod_l+0x27e>
   bd3be:	2301      	movs	r3, #1
   bd3c0:	f7ff bb94 	b.w	bcaec <_strtod_l+0x2f4>
   bd3c4:	f3af 8000 	nop.w
   bd3c8:	94a03595 	.word	0x94a03595
   bd3cc:	3fdfffff 	.word	0x3fdfffff
   bd3d0:	35afe535 	.word	0x35afe535
   bd3d4:	3fe00000 	.word	0x3fe00000
   bd3d8:	ffc00000 	.word	0xffc00000
   bd3dc:	41dfffff 	.word	0x41dfffff
   bd3e0:	94a03595 	.word	0x94a03595
   bd3e4:	3fcfffff 	.word	0x3fcfffff
   bd3e8:	3ff00000 	.word	0x3ff00000
   bd3ec:	7ff00000 	.word	0x7ff00000
   bd3f0:	7fe00000 	.word	0x7fe00000
   bd3f4:	7c9fffff 	.word	0x7c9fffff
   bd3f8:	3fe00000 	.word	0x3fe00000
   bd3fc:	bff00000 	.word	0xbff00000
   bd400:	7fefffff 	.word	0x7fefffff

000bd404 <strtod>:
   bd404:	460a      	mov	r2, r1
   bd406:	4601      	mov	r1, r0
   bd408:	4802      	ldr	r0, [pc, #8]	; (bd414 <strtod+0x10>)
   bd40a:	4b03      	ldr	r3, [pc, #12]	; (bd418 <strtod+0x14>)
   bd40c:	6800      	ldr	r0, [r0, #0]
   bd40e:	f7ff b9f3 	b.w	bc7f8 <_strtod_l>
   bd412:	bf00      	nop
   bd414:	2003dc38 	.word	0x2003dc38
   bd418:	2003dca4 	.word	0x2003dca4

000bd41c <_strtol_l.constprop.0>:
   bd41c:	2b01      	cmp	r3, #1
   bd41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd422:	d001      	beq.n	bd428 <_strtol_l.constprop.0+0xc>
   bd424:	2b24      	cmp	r3, #36	; 0x24
   bd426:	d906      	bls.n	bd436 <_strtol_l.constprop.0+0x1a>
   bd428:	f7fa fbe0 	bl	b7bec <__errno>
   bd42c:	2316      	movs	r3, #22
   bd42e:	6003      	str	r3, [r0, #0]
   bd430:	2000      	movs	r0, #0
   bd432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd51c <_strtol_l.constprop.0+0x100>
   bd43a:	460d      	mov	r5, r1
   bd43c:	462e      	mov	r6, r5
   bd43e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd442:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd446:	f017 0708 	ands.w	r7, r7, #8
   bd44a:	d1f7      	bne.n	bd43c <_strtol_l.constprop.0+0x20>
   bd44c:	2c2d      	cmp	r4, #45	; 0x2d
   bd44e:	d132      	bne.n	bd4b6 <_strtol_l.constprop.0+0x9a>
   bd450:	782c      	ldrb	r4, [r5, #0]
   bd452:	2701      	movs	r7, #1
   bd454:	1cb5      	adds	r5, r6, #2
   bd456:	2b00      	cmp	r3, #0
   bd458:	d05b      	beq.n	bd512 <_strtol_l.constprop.0+0xf6>
   bd45a:	2b10      	cmp	r3, #16
   bd45c:	d109      	bne.n	bd472 <_strtol_l.constprop.0+0x56>
   bd45e:	2c30      	cmp	r4, #48	; 0x30
   bd460:	d107      	bne.n	bd472 <_strtol_l.constprop.0+0x56>
   bd462:	782c      	ldrb	r4, [r5, #0]
   bd464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd468:	2c58      	cmp	r4, #88	; 0x58
   bd46a:	d14d      	bne.n	bd508 <_strtol_l.constprop.0+0xec>
   bd46c:	786c      	ldrb	r4, [r5, #1]
   bd46e:	2310      	movs	r3, #16
   bd470:	3502      	adds	r5, #2
   bd472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd476:	f108 38ff 	add.w	r8, r8, #4294967295
   bd47a:	f04f 0c00 	mov.w	ip, #0
   bd47e:	fbb8 f9f3 	udiv	r9, r8, r3
   bd482:	4666      	mov	r6, ip
   bd484:	fb03 8a19 	mls	sl, r3, r9, r8
   bd488:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd48c:	f1be 0f09 	cmp.w	lr, #9
   bd490:	d816      	bhi.n	bd4c0 <_strtol_l.constprop.0+0xa4>
   bd492:	4674      	mov	r4, lr
   bd494:	42a3      	cmp	r3, r4
   bd496:	dd24      	ble.n	bd4e2 <_strtol_l.constprop.0+0xc6>
   bd498:	f1bc 0f00 	cmp.w	ip, #0
   bd49c:	db1e      	blt.n	bd4dc <_strtol_l.constprop.0+0xc0>
   bd49e:	45b1      	cmp	r9, r6
   bd4a0:	d31c      	bcc.n	bd4dc <_strtol_l.constprop.0+0xc0>
   bd4a2:	d101      	bne.n	bd4a8 <_strtol_l.constprop.0+0x8c>
   bd4a4:	45a2      	cmp	sl, r4
   bd4a6:	db19      	blt.n	bd4dc <_strtol_l.constprop.0+0xc0>
   bd4a8:	fb06 4603 	mla	r6, r6, r3, r4
   bd4ac:	f04f 0c01 	mov.w	ip, #1
   bd4b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd4b4:	e7e8      	b.n	bd488 <_strtol_l.constprop.0+0x6c>
   bd4b6:	2c2b      	cmp	r4, #43	; 0x2b
   bd4b8:	bf04      	itt	eq
   bd4ba:	782c      	ldrbeq	r4, [r5, #0]
   bd4bc:	1cb5      	addeq	r5, r6, #2
   bd4be:	e7ca      	b.n	bd456 <_strtol_l.constprop.0+0x3a>
   bd4c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd4c4:	f1be 0f19 	cmp.w	lr, #25
   bd4c8:	d801      	bhi.n	bd4ce <_strtol_l.constprop.0+0xb2>
   bd4ca:	3c37      	subs	r4, #55	; 0x37
   bd4cc:	e7e2      	b.n	bd494 <_strtol_l.constprop.0+0x78>
   bd4ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd4d2:	f1be 0f19 	cmp.w	lr, #25
   bd4d6:	d804      	bhi.n	bd4e2 <_strtol_l.constprop.0+0xc6>
   bd4d8:	3c57      	subs	r4, #87	; 0x57
   bd4da:	e7db      	b.n	bd494 <_strtol_l.constprop.0+0x78>
   bd4dc:	f04f 3cff 	mov.w	ip, #4294967295
   bd4e0:	e7e6      	b.n	bd4b0 <_strtol_l.constprop.0+0x94>
   bd4e2:	f1bc 0f00 	cmp.w	ip, #0
   bd4e6:	da05      	bge.n	bd4f4 <_strtol_l.constprop.0+0xd8>
   bd4e8:	2322      	movs	r3, #34	; 0x22
   bd4ea:	6003      	str	r3, [r0, #0]
   bd4ec:	4646      	mov	r6, r8
   bd4ee:	b942      	cbnz	r2, bd502 <_strtol_l.constprop.0+0xe6>
   bd4f0:	4630      	mov	r0, r6
   bd4f2:	e79e      	b.n	bd432 <_strtol_l.constprop.0+0x16>
   bd4f4:	b107      	cbz	r7, bd4f8 <_strtol_l.constprop.0+0xdc>
   bd4f6:	4276      	negs	r6, r6
   bd4f8:	2a00      	cmp	r2, #0
   bd4fa:	d0f9      	beq.n	bd4f0 <_strtol_l.constprop.0+0xd4>
   bd4fc:	f1bc 0f00 	cmp.w	ip, #0
   bd500:	d000      	beq.n	bd504 <_strtol_l.constprop.0+0xe8>
   bd502:	1e69      	subs	r1, r5, #1
   bd504:	6011      	str	r1, [r2, #0]
   bd506:	e7f3      	b.n	bd4f0 <_strtol_l.constprop.0+0xd4>
   bd508:	2430      	movs	r4, #48	; 0x30
   bd50a:	2b00      	cmp	r3, #0
   bd50c:	d1b1      	bne.n	bd472 <_strtol_l.constprop.0+0x56>
   bd50e:	2308      	movs	r3, #8
   bd510:	e7af      	b.n	bd472 <_strtol_l.constprop.0+0x56>
   bd512:	2c30      	cmp	r4, #48	; 0x30
   bd514:	d0a5      	beq.n	bd462 <_strtol_l.constprop.0+0x46>
   bd516:	230a      	movs	r3, #10
   bd518:	e7ab      	b.n	bd472 <_strtol_l.constprop.0+0x56>
   bd51a:	bf00      	nop
   bd51c:	000bf389 	.word	0x000bf389

000bd520 <strtol>:
   bd520:	4613      	mov	r3, r2
   bd522:	460a      	mov	r2, r1
   bd524:	4601      	mov	r1, r0
   bd526:	4802      	ldr	r0, [pc, #8]	; (bd530 <strtol+0x10>)
   bd528:	6800      	ldr	r0, [r0, #0]
   bd52a:	f7ff bf77 	b.w	bd41c <_strtol_l.constprop.0>
   bd52e:	bf00      	nop
   bd530:	2003dc38 	.word	0x2003dc38

000bd534 <__register_exitproc>:
   bd534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd538:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd5f4 <__register_exitproc+0xc0>
   bd53c:	4606      	mov	r6, r0
   bd53e:	f8d8 0000 	ldr.w	r0, [r8]
   bd542:	461f      	mov	r7, r3
   bd544:	460d      	mov	r5, r1
   bd546:	4691      	mov	r9, r2
   bd548:	f000 fbc6 	bl	bdcd8 <__retarget_lock_acquire_recursive>
   bd54c:	4b25      	ldr	r3, [pc, #148]	; (bd5e4 <__register_exitproc+0xb0>)
   bd54e:	681c      	ldr	r4, [r3, #0]
   bd550:	b934      	cbnz	r4, bd560 <__register_exitproc+0x2c>
   bd552:	4c25      	ldr	r4, [pc, #148]	; (bd5e8 <__register_exitproc+0xb4>)
   bd554:	601c      	str	r4, [r3, #0]
   bd556:	4b25      	ldr	r3, [pc, #148]	; (bd5ec <__register_exitproc+0xb8>)
   bd558:	b113      	cbz	r3, bd560 <__register_exitproc+0x2c>
   bd55a:	681b      	ldr	r3, [r3, #0]
   bd55c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd560:	6863      	ldr	r3, [r4, #4]
   bd562:	2b1f      	cmp	r3, #31
   bd564:	dd07      	ble.n	bd576 <__register_exitproc+0x42>
   bd566:	f8d8 0000 	ldr.w	r0, [r8]
   bd56a:	f000 fbb7 	bl	bdcdc <__retarget_lock_release_recursive>
   bd56e:	f04f 30ff 	mov.w	r0, #4294967295
   bd572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd576:	b34e      	cbz	r6, bd5cc <__register_exitproc+0x98>
   bd578:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd57c:	b988      	cbnz	r0, bd5a2 <__register_exitproc+0x6e>
   bd57e:	4b1c      	ldr	r3, [pc, #112]	; (bd5f0 <__register_exitproc+0xbc>)
   bd580:	b923      	cbnz	r3, bd58c <__register_exitproc+0x58>
   bd582:	f8d8 0000 	ldr.w	r0, [r8]
   bd586:	f000 fba8 	bl	bdcda <__retarget_lock_release>
   bd58a:	e7f0      	b.n	bd56e <__register_exitproc+0x3a>
   bd58c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd590:	f7fa faec 	bl	b7b6c <malloc>
   bd594:	2800      	cmp	r0, #0
   bd596:	d0f4      	beq.n	bd582 <__register_exitproc+0x4e>
   bd598:	2300      	movs	r3, #0
   bd59a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd59e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd5a2:	6863      	ldr	r3, [r4, #4]
   bd5a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd5a8:	2201      	movs	r2, #1
   bd5aa:	409a      	lsls	r2, r3
   bd5ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd5b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd5b4:	4313      	orrs	r3, r2
   bd5b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd5ba:	2e02      	cmp	r6, #2
   bd5bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd5c0:	bf02      	ittt	eq
   bd5c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd5c6:	4313      	orreq	r3, r2
   bd5c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd5cc:	6863      	ldr	r3, [r4, #4]
   bd5ce:	f8d8 0000 	ldr.w	r0, [r8]
   bd5d2:	1c5a      	adds	r2, r3, #1
   bd5d4:	3302      	adds	r3, #2
   bd5d6:	6062      	str	r2, [r4, #4]
   bd5d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd5dc:	f000 fb7e 	bl	bdcdc <__retarget_lock_release_recursive>
   bd5e0:	2000      	movs	r0, #0
   bd5e2:	e7c6      	b.n	bd572 <__register_exitproc+0x3e>
   bd5e4:	2003e7e8 	.word	0x2003e7e8
   bd5e8:	2003e75c 	.word	0x2003e75c
   bd5ec:	00000000 	.word	0x00000000
   bd5f0:	000b7b6d 	.word	0x000b7b6d
   bd5f4:	2003dc9c 	.word	0x2003dc9c

000bd5f8 <rshift>:
   bd5f8:	6903      	ldr	r3, [r0, #16]
   bd5fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd5fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd602:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd606:	f100 0414 	add.w	r4, r0, #20
   bd60a:	dd45      	ble.n	bd698 <rshift+0xa0>
   bd60c:	f011 011f 	ands.w	r1, r1, #31
   bd610:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd614:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd618:	d10c      	bne.n	bd634 <rshift+0x3c>
   bd61a:	f100 0710 	add.w	r7, r0, #16
   bd61e:	4629      	mov	r1, r5
   bd620:	42b1      	cmp	r1, r6
   bd622:	d334      	bcc.n	bd68e <rshift+0x96>
   bd624:	1a9b      	subs	r3, r3, r2
   bd626:	009b      	lsls	r3, r3, #2
   bd628:	1eea      	subs	r2, r5, #3
   bd62a:	4296      	cmp	r6, r2
   bd62c:	bf38      	it	cc
   bd62e:	2300      	movcc	r3, #0
   bd630:	4423      	add	r3, r4
   bd632:	e015      	b.n	bd660 <rshift+0x68>
   bd634:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd638:	f1c1 0820 	rsb	r8, r1, #32
   bd63c:	40cf      	lsrs	r7, r1
   bd63e:	f105 0e04 	add.w	lr, r5, #4
   bd642:	46a1      	mov	r9, r4
   bd644:	4576      	cmp	r6, lr
   bd646:	46f4      	mov	ip, lr
   bd648:	d815      	bhi.n	bd676 <rshift+0x7e>
   bd64a:	1a9a      	subs	r2, r3, r2
   bd64c:	0092      	lsls	r2, r2, #2
   bd64e:	3a04      	subs	r2, #4
   bd650:	3501      	adds	r5, #1
   bd652:	42ae      	cmp	r6, r5
   bd654:	bf38      	it	cc
   bd656:	2200      	movcc	r2, #0
   bd658:	18a3      	adds	r3, r4, r2
   bd65a:	50a7      	str	r7, [r4, r2]
   bd65c:	b107      	cbz	r7, bd660 <rshift+0x68>
   bd65e:	3304      	adds	r3, #4
   bd660:	1b1a      	subs	r2, r3, r4
   bd662:	42a3      	cmp	r3, r4
   bd664:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd668:	bf08      	it	eq
   bd66a:	2300      	moveq	r3, #0
   bd66c:	6102      	str	r2, [r0, #16]
   bd66e:	bf08      	it	eq
   bd670:	6143      	streq	r3, [r0, #20]
   bd672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd676:	f8dc c000 	ldr.w	ip, [ip]
   bd67a:	fa0c fc08 	lsl.w	ip, ip, r8
   bd67e:	ea4c 0707 	orr.w	r7, ip, r7
   bd682:	f849 7b04 	str.w	r7, [r9], #4
   bd686:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd68a:	40cf      	lsrs	r7, r1
   bd68c:	e7da      	b.n	bd644 <rshift+0x4c>
   bd68e:	f851 cb04 	ldr.w	ip, [r1], #4
   bd692:	f847 cf04 	str.w	ip, [r7, #4]!
   bd696:	e7c3      	b.n	bd620 <rshift+0x28>
   bd698:	4623      	mov	r3, r4
   bd69a:	e7e1      	b.n	bd660 <rshift+0x68>

000bd69c <__hexdig_fun>:
   bd69c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd6a0:	2b09      	cmp	r3, #9
   bd6a2:	d802      	bhi.n	bd6aa <__hexdig_fun+0xe>
   bd6a4:	3820      	subs	r0, #32
   bd6a6:	b2c0      	uxtb	r0, r0
   bd6a8:	4770      	bx	lr
   bd6aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd6ae:	2b05      	cmp	r3, #5
   bd6b0:	d801      	bhi.n	bd6b6 <__hexdig_fun+0x1a>
   bd6b2:	3847      	subs	r0, #71	; 0x47
   bd6b4:	e7f7      	b.n	bd6a6 <__hexdig_fun+0xa>
   bd6b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd6ba:	2b05      	cmp	r3, #5
   bd6bc:	d801      	bhi.n	bd6c2 <__hexdig_fun+0x26>
   bd6be:	3827      	subs	r0, #39	; 0x27
   bd6c0:	e7f1      	b.n	bd6a6 <__hexdig_fun+0xa>
   bd6c2:	2000      	movs	r0, #0
   bd6c4:	4770      	bx	lr
	...

000bd6c8 <__gethex>:
   bd6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd6cc:	ed2d 8b02 	vpush	{d8}
   bd6d0:	b089      	sub	sp, #36	; 0x24
   bd6d2:	ee08 0a10 	vmov	s16, r0
   bd6d6:	9304      	str	r3, [sp, #16]
   bd6d8:	4bb4      	ldr	r3, [pc, #720]	; (bd9ac <__gethex+0x2e4>)
   bd6da:	681b      	ldr	r3, [r3, #0]
   bd6dc:	9301      	str	r3, [sp, #4]
   bd6de:	4618      	mov	r0, r3
   bd6e0:	468b      	mov	fp, r1
   bd6e2:	4690      	mov	r8, r2
   bd6e4:	f7ff f805 	bl	bc6f2 <strlen>
   bd6e8:	9b01      	ldr	r3, [sp, #4]
   bd6ea:	f8db 2000 	ldr.w	r2, [fp]
   bd6ee:	4403      	add	r3, r0
   bd6f0:	4682      	mov	sl, r0
   bd6f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd6f6:	9305      	str	r3, [sp, #20]
   bd6f8:	1c93      	adds	r3, r2, #2
   bd6fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd6fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd702:	32fe      	adds	r2, #254	; 0xfe
   bd704:	18d1      	adds	r1, r2, r3
   bd706:	461f      	mov	r7, r3
   bd708:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd70c:	9100      	str	r1, [sp, #0]
   bd70e:	2830      	cmp	r0, #48	; 0x30
   bd710:	d0f8      	beq.n	bd704 <__gethex+0x3c>
   bd712:	f7ff ffc3 	bl	bd69c <__hexdig_fun>
   bd716:	4604      	mov	r4, r0
   bd718:	2800      	cmp	r0, #0
   bd71a:	d13a      	bne.n	bd792 <__gethex+0xca>
   bd71c:	9901      	ldr	r1, [sp, #4]
   bd71e:	4652      	mov	r2, sl
   bd720:	4638      	mov	r0, r7
   bd722:	f7ff f801 	bl	bc728 <strncmp>
   bd726:	4605      	mov	r5, r0
   bd728:	2800      	cmp	r0, #0
   bd72a:	d168      	bne.n	bd7fe <__gethex+0x136>
   bd72c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd730:	eb07 060a 	add.w	r6, r7, sl
   bd734:	f7ff ffb2 	bl	bd69c <__hexdig_fun>
   bd738:	2800      	cmp	r0, #0
   bd73a:	d062      	beq.n	bd802 <__gethex+0x13a>
   bd73c:	4633      	mov	r3, r6
   bd73e:	7818      	ldrb	r0, [r3, #0]
   bd740:	2830      	cmp	r0, #48	; 0x30
   bd742:	461f      	mov	r7, r3
   bd744:	f103 0301 	add.w	r3, r3, #1
   bd748:	d0f9      	beq.n	bd73e <__gethex+0x76>
   bd74a:	f7ff ffa7 	bl	bd69c <__hexdig_fun>
   bd74e:	2301      	movs	r3, #1
   bd750:	fab0 f480 	clz	r4, r0
   bd754:	0964      	lsrs	r4, r4, #5
   bd756:	4635      	mov	r5, r6
   bd758:	9300      	str	r3, [sp, #0]
   bd75a:	463a      	mov	r2, r7
   bd75c:	4616      	mov	r6, r2
   bd75e:	3201      	adds	r2, #1
   bd760:	7830      	ldrb	r0, [r6, #0]
   bd762:	f7ff ff9b 	bl	bd69c <__hexdig_fun>
   bd766:	2800      	cmp	r0, #0
   bd768:	d1f8      	bne.n	bd75c <__gethex+0x94>
   bd76a:	9901      	ldr	r1, [sp, #4]
   bd76c:	4652      	mov	r2, sl
   bd76e:	4630      	mov	r0, r6
   bd770:	f7fe ffda 	bl	bc728 <strncmp>
   bd774:	b980      	cbnz	r0, bd798 <__gethex+0xd0>
   bd776:	b94d      	cbnz	r5, bd78c <__gethex+0xc4>
   bd778:	eb06 050a 	add.w	r5, r6, sl
   bd77c:	462a      	mov	r2, r5
   bd77e:	4616      	mov	r6, r2
   bd780:	3201      	adds	r2, #1
   bd782:	7830      	ldrb	r0, [r6, #0]
   bd784:	f7ff ff8a 	bl	bd69c <__hexdig_fun>
   bd788:	2800      	cmp	r0, #0
   bd78a:	d1f8      	bne.n	bd77e <__gethex+0xb6>
   bd78c:	1bad      	subs	r5, r5, r6
   bd78e:	00ad      	lsls	r5, r5, #2
   bd790:	e004      	b.n	bd79c <__gethex+0xd4>
   bd792:	2400      	movs	r4, #0
   bd794:	4625      	mov	r5, r4
   bd796:	e7e0      	b.n	bd75a <__gethex+0x92>
   bd798:	2d00      	cmp	r5, #0
   bd79a:	d1f7      	bne.n	bd78c <__gethex+0xc4>
   bd79c:	7833      	ldrb	r3, [r6, #0]
   bd79e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd7a2:	2b50      	cmp	r3, #80	; 0x50
   bd7a4:	d13b      	bne.n	bd81e <__gethex+0x156>
   bd7a6:	7873      	ldrb	r3, [r6, #1]
   bd7a8:	2b2b      	cmp	r3, #43	; 0x2b
   bd7aa:	d02c      	beq.n	bd806 <__gethex+0x13e>
   bd7ac:	2b2d      	cmp	r3, #45	; 0x2d
   bd7ae:	d02e      	beq.n	bd80e <__gethex+0x146>
   bd7b0:	1c71      	adds	r1, r6, #1
   bd7b2:	f04f 0900 	mov.w	r9, #0
   bd7b6:	7808      	ldrb	r0, [r1, #0]
   bd7b8:	f7ff ff70 	bl	bd69c <__hexdig_fun>
   bd7bc:	1e43      	subs	r3, r0, #1
   bd7be:	b2db      	uxtb	r3, r3
   bd7c0:	2b18      	cmp	r3, #24
   bd7c2:	d82c      	bhi.n	bd81e <__gethex+0x156>
   bd7c4:	f1a0 0210 	sub.w	r2, r0, #16
   bd7c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd7cc:	f7ff ff66 	bl	bd69c <__hexdig_fun>
   bd7d0:	1e43      	subs	r3, r0, #1
   bd7d2:	b2db      	uxtb	r3, r3
   bd7d4:	2b18      	cmp	r3, #24
   bd7d6:	d91d      	bls.n	bd814 <__gethex+0x14c>
   bd7d8:	f1b9 0f00 	cmp.w	r9, #0
   bd7dc:	d000      	beq.n	bd7e0 <__gethex+0x118>
   bd7de:	4252      	negs	r2, r2
   bd7e0:	4415      	add	r5, r2
   bd7e2:	f8cb 1000 	str.w	r1, [fp]
   bd7e6:	b1e4      	cbz	r4, bd822 <__gethex+0x15a>
   bd7e8:	9b00      	ldr	r3, [sp, #0]
   bd7ea:	2b00      	cmp	r3, #0
   bd7ec:	bf14      	ite	ne
   bd7ee:	2700      	movne	r7, #0
   bd7f0:	2706      	moveq	r7, #6
   bd7f2:	4638      	mov	r0, r7
   bd7f4:	b009      	add	sp, #36	; 0x24
   bd7f6:	ecbd 8b02 	vpop	{d8}
   bd7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd7fe:	463e      	mov	r6, r7
   bd800:	4625      	mov	r5, r4
   bd802:	2401      	movs	r4, #1
   bd804:	e7ca      	b.n	bd79c <__gethex+0xd4>
   bd806:	f04f 0900 	mov.w	r9, #0
   bd80a:	1cb1      	adds	r1, r6, #2
   bd80c:	e7d3      	b.n	bd7b6 <__gethex+0xee>
   bd80e:	f04f 0901 	mov.w	r9, #1
   bd812:	e7fa      	b.n	bd80a <__gethex+0x142>
   bd814:	230a      	movs	r3, #10
   bd816:	fb03 0202 	mla	r2, r3, r2, r0
   bd81a:	3a10      	subs	r2, #16
   bd81c:	e7d4      	b.n	bd7c8 <__gethex+0x100>
   bd81e:	4631      	mov	r1, r6
   bd820:	e7df      	b.n	bd7e2 <__gethex+0x11a>
   bd822:	1bf3      	subs	r3, r6, r7
   bd824:	3b01      	subs	r3, #1
   bd826:	4621      	mov	r1, r4
   bd828:	2b07      	cmp	r3, #7
   bd82a:	dc0b      	bgt.n	bd844 <__gethex+0x17c>
   bd82c:	ee18 0a10 	vmov	r0, s16
   bd830:	f000 fa68 	bl	bdd04 <_Balloc>
   bd834:	4604      	mov	r4, r0
   bd836:	b940      	cbnz	r0, bd84a <__gethex+0x182>
   bd838:	4b5d      	ldr	r3, [pc, #372]	; (bd9b0 <__gethex+0x2e8>)
   bd83a:	4602      	mov	r2, r0
   bd83c:	21de      	movs	r1, #222	; 0xde
   bd83e:	485d      	ldr	r0, [pc, #372]	; (bd9b4 <__gethex+0x2ec>)
   bd840:	f7fa f9dc 	bl	b7bfc <__assert_func>
   bd844:	3101      	adds	r1, #1
   bd846:	105b      	asrs	r3, r3, #1
   bd848:	e7ee      	b.n	bd828 <__gethex+0x160>
   bd84a:	f100 0914 	add.w	r9, r0, #20
   bd84e:	f04f 0b00 	mov.w	fp, #0
   bd852:	f1ca 0301 	rsb	r3, sl, #1
   bd856:	f8cd 9008 	str.w	r9, [sp, #8]
   bd85a:	f8cd b000 	str.w	fp, [sp]
   bd85e:	9306      	str	r3, [sp, #24]
   bd860:	42b7      	cmp	r7, r6
   bd862:	d340      	bcc.n	bd8e6 <__gethex+0x21e>
   bd864:	9802      	ldr	r0, [sp, #8]
   bd866:	9b00      	ldr	r3, [sp, #0]
   bd868:	f840 3b04 	str.w	r3, [r0], #4
   bd86c:	eba0 0009 	sub.w	r0, r0, r9
   bd870:	1080      	asrs	r0, r0, #2
   bd872:	0146      	lsls	r6, r0, #5
   bd874:	6120      	str	r0, [r4, #16]
   bd876:	4618      	mov	r0, r3
   bd878:	f000 fb36 	bl	bdee8 <__hi0bits>
   bd87c:	1a30      	subs	r0, r6, r0
   bd87e:	f8d8 6000 	ldr.w	r6, [r8]
   bd882:	42b0      	cmp	r0, r6
   bd884:	dd63      	ble.n	bd94e <__gethex+0x286>
   bd886:	1b87      	subs	r7, r0, r6
   bd888:	4639      	mov	r1, r7
   bd88a:	4620      	mov	r0, r4
   bd88c:	f000 feda 	bl	be644 <__any_on>
   bd890:	4682      	mov	sl, r0
   bd892:	b1a8      	cbz	r0, bd8c0 <__gethex+0x1f8>
   bd894:	1e7b      	subs	r3, r7, #1
   bd896:	1159      	asrs	r1, r3, #5
   bd898:	f003 021f 	and.w	r2, r3, #31
   bd89c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd8a0:	f04f 0a01 	mov.w	sl, #1
   bd8a4:	fa0a f202 	lsl.w	r2, sl, r2
   bd8a8:	420a      	tst	r2, r1
   bd8aa:	d009      	beq.n	bd8c0 <__gethex+0x1f8>
   bd8ac:	4553      	cmp	r3, sl
   bd8ae:	dd05      	ble.n	bd8bc <__gethex+0x1f4>
   bd8b0:	1eb9      	subs	r1, r7, #2
   bd8b2:	4620      	mov	r0, r4
   bd8b4:	f000 fec6 	bl	be644 <__any_on>
   bd8b8:	2800      	cmp	r0, #0
   bd8ba:	d145      	bne.n	bd948 <__gethex+0x280>
   bd8bc:	f04f 0a02 	mov.w	sl, #2
   bd8c0:	4639      	mov	r1, r7
   bd8c2:	4620      	mov	r0, r4
   bd8c4:	f7ff fe98 	bl	bd5f8 <rshift>
   bd8c8:	443d      	add	r5, r7
   bd8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd8ce:	42ab      	cmp	r3, r5
   bd8d0:	da4c      	bge.n	bd96c <__gethex+0x2a4>
   bd8d2:	ee18 0a10 	vmov	r0, s16
   bd8d6:	4621      	mov	r1, r4
   bd8d8:	f000 fa54 	bl	bdd84 <_Bfree>
   bd8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd8de:	2300      	movs	r3, #0
   bd8e0:	6013      	str	r3, [r2, #0]
   bd8e2:	27a3      	movs	r7, #163	; 0xa3
   bd8e4:	e785      	b.n	bd7f2 <__gethex+0x12a>
   bd8e6:	1e73      	subs	r3, r6, #1
   bd8e8:	9a05      	ldr	r2, [sp, #20]
   bd8ea:	9303      	str	r3, [sp, #12]
   bd8ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd8f0:	4293      	cmp	r3, r2
   bd8f2:	d019      	beq.n	bd928 <__gethex+0x260>
   bd8f4:	f1bb 0f20 	cmp.w	fp, #32
   bd8f8:	d107      	bne.n	bd90a <__gethex+0x242>
   bd8fa:	9b02      	ldr	r3, [sp, #8]
   bd8fc:	9a00      	ldr	r2, [sp, #0]
   bd8fe:	f843 2b04 	str.w	r2, [r3], #4
   bd902:	9302      	str	r3, [sp, #8]
   bd904:	2300      	movs	r3, #0
   bd906:	9300      	str	r3, [sp, #0]
   bd908:	469b      	mov	fp, r3
   bd90a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd90e:	f7ff fec5 	bl	bd69c <__hexdig_fun>
   bd912:	9b00      	ldr	r3, [sp, #0]
   bd914:	f000 000f 	and.w	r0, r0, #15
   bd918:	fa00 f00b 	lsl.w	r0, r0, fp
   bd91c:	4303      	orrs	r3, r0
   bd91e:	9300      	str	r3, [sp, #0]
   bd920:	f10b 0b04 	add.w	fp, fp, #4
   bd924:	9b03      	ldr	r3, [sp, #12]
   bd926:	e00d      	b.n	bd944 <__gethex+0x27c>
   bd928:	9b03      	ldr	r3, [sp, #12]
   bd92a:	9a06      	ldr	r2, [sp, #24]
   bd92c:	4413      	add	r3, r2
   bd92e:	42bb      	cmp	r3, r7
   bd930:	d3e0      	bcc.n	bd8f4 <__gethex+0x22c>
   bd932:	4618      	mov	r0, r3
   bd934:	9901      	ldr	r1, [sp, #4]
   bd936:	9307      	str	r3, [sp, #28]
   bd938:	4652      	mov	r2, sl
   bd93a:	f7fe fef5 	bl	bc728 <strncmp>
   bd93e:	9b07      	ldr	r3, [sp, #28]
   bd940:	2800      	cmp	r0, #0
   bd942:	d1d7      	bne.n	bd8f4 <__gethex+0x22c>
   bd944:	461e      	mov	r6, r3
   bd946:	e78b      	b.n	bd860 <__gethex+0x198>
   bd948:	f04f 0a03 	mov.w	sl, #3
   bd94c:	e7b8      	b.n	bd8c0 <__gethex+0x1f8>
   bd94e:	da0a      	bge.n	bd966 <__gethex+0x29e>
   bd950:	1a37      	subs	r7, r6, r0
   bd952:	4621      	mov	r1, r4
   bd954:	ee18 0a10 	vmov	r0, s16
   bd958:	463a      	mov	r2, r7
   bd95a:	f000 fc2f 	bl	be1bc <__lshift>
   bd95e:	1bed      	subs	r5, r5, r7
   bd960:	4604      	mov	r4, r0
   bd962:	f100 0914 	add.w	r9, r0, #20
   bd966:	f04f 0a00 	mov.w	sl, #0
   bd96a:	e7ae      	b.n	bd8ca <__gethex+0x202>
   bd96c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd970:	42a8      	cmp	r0, r5
   bd972:	dd72      	ble.n	bda5a <__gethex+0x392>
   bd974:	1b45      	subs	r5, r0, r5
   bd976:	42ae      	cmp	r6, r5
   bd978:	dc36      	bgt.n	bd9e8 <__gethex+0x320>
   bd97a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd97e:	2b02      	cmp	r3, #2
   bd980:	d02a      	beq.n	bd9d8 <__gethex+0x310>
   bd982:	2b03      	cmp	r3, #3
   bd984:	d02c      	beq.n	bd9e0 <__gethex+0x318>
   bd986:	2b01      	cmp	r3, #1
   bd988:	d11c      	bne.n	bd9c4 <__gethex+0x2fc>
   bd98a:	42ae      	cmp	r6, r5
   bd98c:	d11a      	bne.n	bd9c4 <__gethex+0x2fc>
   bd98e:	2e01      	cmp	r6, #1
   bd990:	d112      	bne.n	bd9b8 <__gethex+0x2f0>
   bd992:	9a04      	ldr	r2, [sp, #16]
   bd994:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd998:	6013      	str	r3, [r2, #0]
   bd99a:	2301      	movs	r3, #1
   bd99c:	6123      	str	r3, [r4, #16]
   bd99e:	f8c9 3000 	str.w	r3, [r9]
   bd9a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd9a4:	2762      	movs	r7, #98	; 0x62
   bd9a6:	601c      	str	r4, [r3, #0]
   bd9a8:	e723      	b.n	bd7f2 <__gethex+0x12a>
   bd9aa:	bf00      	nop
   bd9ac:	000bf520 	.word	0x000bf520
   bd9b0:	000bf489 	.word	0x000bf489
   bd9b4:	000bf49a 	.word	0x000bf49a
   bd9b8:	1e71      	subs	r1, r6, #1
   bd9ba:	4620      	mov	r0, r4
   bd9bc:	f000 fe42 	bl	be644 <__any_on>
   bd9c0:	2800      	cmp	r0, #0
   bd9c2:	d1e6      	bne.n	bd992 <__gethex+0x2ca>
   bd9c4:	ee18 0a10 	vmov	r0, s16
   bd9c8:	4621      	mov	r1, r4
   bd9ca:	f000 f9db 	bl	bdd84 <_Bfree>
   bd9ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd9d0:	2300      	movs	r3, #0
   bd9d2:	6013      	str	r3, [r2, #0]
   bd9d4:	2750      	movs	r7, #80	; 0x50
   bd9d6:	e70c      	b.n	bd7f2 <__gethex+0x12a>
   bd9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd9da:	2b00      	cmp	r3, #0
   bd9dc:	d1f2      	bne.n	bd9c4 <__gethex+0x2fc>
   bd9de:	e7d8      	b.n	bd992 <__gethex+0x2ca>
   bd9e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd9e2:	2b00      	cmp	r3, #0
   bd9e4:	d1d5      	bne.n	bd992 <__gethex+0x2ca>
   bd9e6:	e7ed      	b.n	bd9c4 <__gethex+0x2fc>
   bd9e8:	1e6f      	subs	r7, r5, #1
   bd9ea:	f1ba 0f00 	cmp.w	sl, #0
   bd9ee:	d131      	bne.n	bda54 <__gethex+0x38c>
   bd9f0:	b127      	cbz	r7, bd9fc <__gethex+0x334>
   bd9f2:	4639      	mov	r1, r7
   bd9f4:	4620      	mov	r0, r4
   bd9f6:	f000 fe25 	bl	be644 <__any_on>
   bd9fa:	4682      	mov	sl, r0
   bd9fc:	117b      	asrs	r3, r7, #5
   bd9fe:	2101      	movs	r1, #1
   bda00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bda04:	f007 071f 	and.w	r7, r7, #31
   bda08:	fa01 f707 	lsl.w	r7, r1, r7
   bda0c:	421f      	tst	r7, r3
   bda0e:	4629      	mov	r1, r5
   bda10:	4620      	mov	r0, r4
   bda12:	bf18      	it	ne
   bda14:	f04a 0a02 	orrne.w	sl, sl, #2
   bda18:	1b76      	subs	r6, r6, r5
   bda1a:	f7ff fded 	bl	bd5f8 <rshift>
   bda1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bda22:	2702      	movs	r7, #2
   bda24:	f1ba 0f00 	cmp.w	sl, #0
   bda28:	d048      	beq.n	bdabc <__gethex+0x3f4>
   bda2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bda2e:	2b02      	cmp	r3, #2
   bda30:	d015      	beq.n	bda5e <__gethex+0x396>
   bda32:	2b03      	cmp	r3, #3
   bda34:	d017      	beq.n	bda66 <__gethex+0x39e>
   bda36:	2b01      	cmp	r3, #1
   bda38:	d109      	bne.n	bda4e <__gethex+0x386>
   bda3a:	f01a 0f02 	tst.w	sl, #2
   bda3e:	d006      	beq.n	bda4e <__gethex+0x386>
   bda40:	f8d9 0000 	ldr.w	r0, [r9]
   bda44:	ea4a 0a00 	orr.w	sl, sl, r0
   bda48:	f01a 0f01 	tst.w	sl, #1
   bda4c:	d10e      	bne.n	bda6c <__gethex+0x3a4>
   bda4e:	f047 0710 	orr.w	r7, r7, #16
   bda52:	e033      	b.n	bdabc <__gethex+0x3f4>
   bda54:	f04f 0a01 	mov.w	sl, #1
   bda58:	e7d0      	b.n	bd9fc <__gethex+0x334>
   bda5a:	2701      	movs	r7, #1
   bda5c:	e7e2      	b.n	bda24 <__gethex+0x35c>
   bda5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda60:	f1c3 0301 	rsb	r3, r3, #1
   bda64:	9315      	str	r3, [sp, #84]	; 0x54
   bda66:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda68:	2b00      	cmp	r3, #0
   bda6a:	d0f0      	beq.n	bda4e <__gethex+0x386>
   bda6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bda70:	f104 0314 	add.w	r3, r4, #20
   bda74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bda78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bda7c:	f04f 0c00 	mov.w	ip, #0
   bda80:	4618      	mov	r0, r3
   bda82:	f853 2b04 	ldr.w	r2, [r3], #4
   bda86:	f1b2 3fff 	cmp.w	r2, #4294967295
   bda8a:	d01c      	beq.n	bdac6 <__gethex+0x3fe>
   bda8c:	3201      	adds	r2, #1
   bda8e:	6002      	str	r2, [r0, #0]
   bda90:	2f02      	cmp	r7, #2
   bda92:	f104 0314 	add.w	r3, r4, #20
   bda96:	d13f      	bne.n	bdb18 <__gethex+0x450>
   bda98:	f8d8 2000 	ldr.w	r2, [r8]
   bda9c:	3a01      	subs	r2, #1
   bda9e:	42b2      	cmp	r2, r6
   bdaa0:	d10a      	bne.n	bdab8 <__gethex+0x3f0>
   bdaa2:	1171      	asrs	r1, r6, #5
   bdaa4:	2201      	movs	r2, #1
   bdaa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bdaaa:	f006 061f 	and.w	r6, r6, #31
   bdaae:	fa02 f606 	lsl.w	r6, r2, r6
   bdab2:	421e      	tst	r6, r3
   bdab4:	bf18      	it	ne
   bdab6:	4617      	movne	r7, r2
   bdab8:	f047 0720 	orr.w	r7, r7, #32
   bdabc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bdabe:	601c      	str	r4, [r3, #0]
   bdac0:	9b04      	ldr	r3, [sp, #16]
   bdac2:	601d      	str	r5, [r3, #0]
   bdac4:	e695      	b.n	bd7f2 <__gethex+0x12a>
   bdac6:	4299      	cmp	r1, r3
   bdac8:	f843 cc04 	str.w	ip, [r3, #-4]
   bdacc:	d8d8      	bhi.n	bda80 <__gethex+0x3b8>
   bdace:	68a3      	ldr	r3, [r4, #8]
   bdad0:	459b      	cmp	fp, r3
   bdad2:	db19      	blt.n	bdb08 <__gethex+0x440>
   bdad4:	6861      	ldr	r1, [r4, #4]
   bdad6:	ee18 0a10 	vmov	r0, s16
   bdada:	3101      	adds	r1, #1
   bdadc:	f000 f912 	bl	bdd04 <_Balloc>
   bdae0:	4681      	mov	r9, r0
   bdae2:	b918      	cbnz	r0, bdaec <__gethex+0x424>
   bdae4:	4b1a      	ldr	r3, [pc, #104]	; (bdb50 <__gethex+0x488>)
   bdae6:	4602      	mov	r2, r0
   bdae8:	2184      	movs	r1, #132	; 0x84
   bdaea:	e6a8      	b.n	bd83e <__gethex+0x176>
   bdaec:	6922      	ldr	r2, [r4, #16]
   bdaee:	3202      	adds	r2, #2
   bdaf0:	f104 010c 	add.w	r1, r4, #12
   bdaf4:	0092      	lsls	r2, r2, #2
   bdaf6:	300c      	adds	r0, #12
   bdaf8:	f7fe fd48 	bl	bc58c <memcpy>
   bdafc:	4621      	mov	r1, r4
   bdafe:	ee18 0a10 	vmov	r0, s16
   bdb02:	f000 f93f 	bl	bdd84 <_Bfree>
   bdb06:	464c      	mov	r4, r9
   bdb08:	6923      	ldr	r3, [r4, #16]
   bdb0a:	1c5a      	adds	r2, r3, #1
   bdb0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bdb10:	6122      	str	r2, [r4, #16]
   bdb12:	2201      	movs	r2, #1
   bdb14:	615a      	str	r2, [r3, #20]
   bdb16:	e7bb      	b.n	bda90 <__gethex+0x3c8>
   bdb18:	6922      	ldr	r2, [r4, #16]
   bdb1a:	455a      	cmp	r2, fp
   bdb1c:	dd0b      	ble.n	bdb36 <__gethex+0x46e>
   bdb1e:	2101      	movs	r1, #1
   bdb20:	4620      	mov	r0, r4
   bdb22:	f7ff fd69 	bl	bd5f8 <rshift>
   bdb26:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bdb2a:	3501      	adds	r5, #1
   bdb2c:	42ab      	cmp	r3, r5
   bdb2e:	f6ff aed0 	blt.w	bd8d2 <__gethex+0x20a>
   bdb32:	2701      	movs	r7, #1
   bdb34:	e7c0      	b.n	bdab8 <__gethex+0x3f0>
   bdb36:	f016 061f 	ands.w	r6, r6, #31
   bdb3a:	d0fa      	beq.n	bdb32 <__gethex+0x46a>
   bdb3c:	4453      	add	r3, sl
   bdb3e:	f1c6 0620 	rsb	r6, r6, #32
   bdb42:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bdb46:	f000 f9cf 	bl	bdee8 <__hi0bits>
   bdb4a:	42b0      	cmp	r0, r6
   bdb4c:	dbe7      	blt.n	bdb1e <__gethex+0x456>
   bdb4e:	e7f0      	b.n	bdb32 <__gethex+0x46a>
   bdb50:	000bf489 	.word	0x000bf489

000bdb54 <L_shift>:
   bdb54:	f1c2 0208 	rsb	r2, r2, #8
   bdb58:	0092      	lsls	r2, r2, #2
   bdb5a:	b570      	push	{r4, r5, r6, lr}
   bdb5c:	f1c2 0620 	rsb	r6, r2, #32
   bdb60:	6843      	ldr	r3, [r0, #4]
   bdb62:	6804      	ldr	r4, [r0, #0]
   bdb64:	fa03 f506 	lsl.w	r5, r3, r6
   bdb68:	432c      	orrs	r4, r5
   bdb6a:	40d3      	lsrs	r3, r2
   bdb6c:	6004      	str	r4, [r0, #0]
   bdb6e:	f840 3f04 	str.w	r3, [r0, #4]!
   bdb72:	4288      	cmp	r0, r1
   bdb74:	d3f4      	bcc.n	bdb60 <L_shift+0xc>
   bdb76:	bd70      	pop	{r4, r5, r6, pc}

000bdb78 <__match>:
   bdb78:	b530      	push	{r4, r5, lr}
   bdb7a:	6803      	ldr	r3, [r0, #0]
   bdb7c:	3301      	adds	r3, #1
   bdb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdb82:	b914      	cbnz	r4, bdb8a <__match+0x12>
   bdb84:	6003      	str	r3, [r0, #0]
   bdb86:	2001      	movs	r0, #1
   bdb88:	bd30      	pop	{r4, r5, pc}
   bdb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdb8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bdb92:	2d19      	cmp	r5, #25
   bdb94:	bf98      	it	ls
   bdb96:	3220      	addls	r2, #32
   bdb98:	42a2      	cmp	r2, r4
   bdb9a:	d0f0      	beq.n	bdb7e <__match+0x6>
   bdb9c:	2000      	movs	r0, #0
   bdb9e:	e7f3      	b.n	bdb88 <__match+0x10>

000bdba0 <__hexnan>:
   bdba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdba4:	680b      	ldr	r3, [r1, #0]
   bdba6:	115e      	asrs	r6, r3, #5
   bdba8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bdbac:	f013 031f 	ands.w	r3, r3, #31
   bdbb0:	b087      	sub	sp, #28
   bdbb2:	bf18      	it	ne
   bdbb4:	3604      	addne	r6, #4
   bdbb6:	2500      	movs	r5, #0
   bdbb8:	1f37      	subs	r7, r6, #4
   bdbba:	4690      	mov	r8, r2
   bdbbc:	6802      	ldr	r2, [r0, #0]
   bdbbe:	9301      	str	r3, [sp, #4]
   bdbc0:	4682      	mov	sl, r0
   bdbc2:	f846 5c04 	str.w	r5, [r6, #-4]
   bdbc6:	46b9      	mov	r9, r7
   bdbc8:	463c      	mov	r4, r7
   bdbca:	9502      	str	r5, [sp, #8]
   bdbcc:	46ab      	mov	fp, r5
   bdbce:	7851      	ldrb	r1, [r2, #1]
   bdbd0:	1c53      	adds	r3, r2, #1
   bdbd2:	9303      	str	r3, [sp, #12]
   bdbd4:	b341      	cbz	r1, bdc28 <__hexnan+0x88>
   bdbd6:	4608      	mov	r0, r1
   bdbd8:	9205      	str	r2, [sp, #20]
   bdbda:	9104      	str	r1, [sp, #16]
   bdbdc:	f7ff fd5e 	bl	bd69c <__hexdig_fun>
   bdbe0:	2800      	cmp	r0, #0
   bdbe2:	d14f      	bne.n	bdc84 <__hexnan+0xe4>
   bdbe4:	9904      	ldr	r1, [sp, #16]
   bdbe6:	9a05      	ldr	r2, [sp, #20]
   bdbe8:	2920      	cmp	r1, #32
   bdbea:	d818      	bhi.n	bdc1e <__hexnan+0x7e>
   bdbec:	9b02      	ldr	r3, [sp, #8]
   bdbee:	459b      	cmp	fp, r3
   bdbf0:	dd13      	ble.n	bdc1a <__hexnan+0x7a>
   bdbf2:	454c      	cmp	r4, r9
   bdbf4:	d206      	bcs.n	bdc04 <__hexnan+0x64>
   bdbf6:	2d07      	cmp	r5, #7
   bdbf8:	dc04      	bgt.n	bdc04 <__hexnan+0x64>
   bdbfa:	462a      	mov	r2, r5
   bdbfc:	4649      	mov	r1, r9
   bdbfe:	4620      	mov	r0, r4
   bdc00:	f7ff ffa8 	bl	bdb54 <L_shift>
   bdc04:	4544      	cmp	r4, r8
   bdc06:	d950      	bls.n	bdcaa <__hexnan+0x10a>
   bdc08:	2300      	movs	r3, #0
   bdc0a:	f1a4 0904 	sub.w	r9, r4, #4
   bdc0e:	f844 3c04 	str.w	r3, [r4, #-4]
   bdc12:	f8cd b008 	str.w	fp, [sp, #8]
   bdc16:	464c      	mov	r4, r9
   bdc18:	461d      	mov	r5, r3
   bdc1a:	9a03      	ldr	r2, [sp, #12]
   bdc1c:	e7d7      	b.n	bdbce <__hexnan+0x2e>
   bdc1e:	2929      	cmp	r1, #41	; 0x29
   bdc20:	d156      	bne.n	bdcd0 <__hexnan+0x130>
   bdc22:	3202      	adds	r2, #2
   bdc24:	f8ca 2000 	str.w	r2, [sl]
   bdc28:	f1bb 0f00 	cmp.w	fp, #0
   bdc2c:	d050      	beq.n	bdcd0 <__hexnan+0x130>
   bdc2e:	454c      	cmp	r4, r9
   bdc30:	d206      	bcs.n	bdc40 <__hexnan+0xa0>
   bdc32:	2d07      	cmp	r5, #7
   bdc34:	dc04      	bgt.n	bdc40 <__hexnan+0xa0>
   bdc36:	462a      	mov	r2, r5
   bdc38:	4649      	mov	r1, r9
   bdc3a:	4620      	mov	r0, r4
   bdc3c:	f7ff ff8a 	bl	bdb54 <L_shift>
   bdc40:	4544      	cmp	r4, r8
   bdc42:	d934      	bls.n	bdcae <__hexnan+0x10e>
   bdc44:	f1a8 0204 	sub.w	r2, r8, #4
   bdc48:	4623      	mov	r3, r4
   bdc4a:	f853 1b04 	ldr.w	r1, [r3], #4
   bdc4e:	f842 1f04 	str.w	r1, [r2, #4]!
   bdc52:	429f      	cmp	r7, r3
   bdc54:	d2f9      	bcs.n	bdc4a <__hexnan+0xaa>
   bdc56:	1b3b      	subs	r3, r7, r4
   bdc58:	f023 0303 	bic.w	r3, r3, #3
   bdc5c:	3304      	adds	r3, #4
   bdc5e:	3401      	adds	r4, #1
   bdc60:	3e03      	subs	r6, #3
   bdc62:	42b4      	cmp	r4, r6
   bdc64:	bf88      	it	hi
   bdc66:	2304      	movhi	r3, #4
   bdc68:	4443      	add	r3, r8
   bdc6a:	2200      	movs	r2, #0
   bdc6c:	f843 2b04 	str.w	r2, [r3], #4
   bdc70:	429f      	cmp	r7, r3
   bdc72:	d2fb      	bcs.n	bdc6c <__hexnan+0xcc>
   bdc74:	683b      	ldr	r3, [r7, #0]
   bdc76:	b91b      	cbnz	r3, bdc80 <__hexnan+0xe0>
   bdc78:	4547      	cmp	r7, r8
   bdc7a:	d127      	bne.n	bdccc <__hexnan+0x12c>
   bdc7c:	2301      	movs	r3, #1
   bdc7e:	603b      	str	r3, [r7, #0]
   bdc80:	2005      	movs	r0, #5
   bdc82:	e026      	b.n	bdcd2 <__hexnan+0x132>
   bdc84:	3501      	adds	r5, #1
   bdc86:	2d08      	cmp	r5, #8
   bdc88:	f10b 0b01 	add.w	fp, fp, #1
   bdc8c:	dd06      	ble.n	bdc9c <__hexnan+0xfc>
   bdc8e:	4544      	cmp	r4, r8
   bdc90:	d9c3      	bls.n	bdc1a <__hexnan+0x7a>
   bdc92:	2300      	movs	r3, #0
   bdc94:	f844 3c04 	str.w	r3, [r4, #-4]
   bdc98:	2501      	movs	r5, #1
   bdc9a:	3c04      	subs	r4, #4
   bdc9c:	6822      	ldr	r2, [r4, #0]
   bdc9e:	f000 000f 	and.w	r0, r0, #15
   bdca2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bdca6:	6022      	str	r2, [r4, #0]
   bdca8:	e7b7      	b.n	bdc1a <__hexnan+0x7a>
   bdcaa:	2508      	movs	r5, #8
   bdcac:	e7b5      	b.n	bdc1a <__hexnan+0x7a>
   bdcae:	9b01      	ldr	r3, [sp, #4]
   bdcb0:	2b00      	cmp	r3, #0
   bdcb2:	d0df      	beq.n	bdc74 <__hexnan+0xd4>
   bdcb4:	f04f 32ff 	mov.w	r2, #4294967295
   bdcb8:	f1c3 0320 	rsb	r3, r3, #32
   bdcbc:	fa22 f303 	lsr.w	r3, r2, r3
   bdcc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bdcc4:	401a      	ands	r2, r3
   bdcc6:	f846 2c04 	str.w	r2, [r6, #-4]
   bdcca:	e7d3      	b.n	bdc74 <__hexnan+0xd4>
   bdccc:	3f04      	subs	r7, #4
   bdcce:	e7d1      	b.n	bdc74 <__hexnan+0xd4>
   bdcd0:	2004      	movs	r0, #4
   bdcd2:	b007      	add	sp, #28
   bdcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdcd8 <__retarget_lock_acquire_recursive>:
   bdcd8:	4770      	bx	lr

000bdcda <__retarget_lock_release>:
   bdcda:	4770      	bx	lr

000bdcdc <__retarget_lock_release_recursive>:
   bdcdc:	4770      	bx	lr

000bdcde <__ascii_mbtowc>:
   bdcde:	b082      	sub	sp, #8
   bdce0:	b901      	cbnz	r1, bdce4 <__ascii_mbtowc+0x6>
   bdce2:	a901      	add	r1, sp, #4
   bdce4:	b142      	cbz	r2, bdcf8 <__ascii_mbtowc+0x1a>
   bdce6:	b14b      	cbz	r3, bdcfc <__ascii_mbtowc+0x1e>
   bdce8:	7813      	ldrb	r3, [r2, #0]
   bdcea:	600b      	str	r3, [r1, #0]
   bdcec:	7812      	ldrb	r2, [r2, #0]
   bdcee:	1e10      	subs	r0, r2, #0
   bdcf0:	bf18      	it	ne
   bdcf2:	2001      	movne	r0, #1
   bdcf4:	b002      	add	sp, #8
   bdcf6:	4770      	bx	lr
   bdcf8:	4610      	mov	r0, r2
   bdcfa:	e7fb      	b.n	bdcf4 <__ascii_mbtowc+0x16>
   bdcfc:	f06f 0001 	mvn.w	r0, #1
   bdd00:	e7f8      	b.n	bdcf4 <__ascii_mbtowc+0x16>
	...

000bdd04 <_Balloc>:
   bdd04:	b570      	push	{r4, r5, r6, lr}
   bdd06:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bdd08:	4604      	mov	r4, r0
   bdd0a:	460d      	mov	r5, r1
   bdd0c:	b976      	cbnz	r6, bdd2c <_Balloc+0x28>
   bdd0e:	2010      	movs	r0, #16
   bdd10:	f7f9 ff2c 	bl	b7b6c <malloc>
   bdd14:	4602      	mov	r2, r0
   bdd16:	6260      	str	r0, [r4, #36]	; 0x24
   bdd18:	b920      	cbnz	r0, bdd24 <_Balloc+0x20>
   bdd1a:	4b18      	ldr	r3, [pc, #96]	; (bdd7c <_Balloc+0x78>)
   bdd1c:	4818      	ldr	r0, [pc, #96]	; (bdd80 <_Balloc+0x7c>)
   bdd1e:	2166      	movs	r1, #102	; 0x66
   bdd20:	f7f9 ff6c 	bl	b7bfc <__assert_func>
   bdd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bdd28:	6006      	str	r6, [r0, #0]
   bdd2a:	60c6      	str	r6, [r0, #12]
   bdd2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bdd2e:	68f3      	ldr	r3, [r6, #12]
   bdd30:	b183      	cbz	r3, bdd54 <_Balloc+0x50>
   bdd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdd34:	68db      	ldr	r3, [r3, #12]
   bdd36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bdd3a:	b9b8      	cbnz	r0, bdd6c <_Balloc+0x68>
   bdd3c:	2101      	movs	r1, #1
   bdd3e:	fa01 f605 	lsl.w	r6, r1, r5
   bdd42:	1d72      	adds	r2, r6, #5
   bdd44:	0092      	lsls	r2, r2, #2
   bdd46:	4620      	mov	r0, r4
   bdd48:	f000 fc9d 	bl	be686 <_calloc_r>
   bdd4c:	b160      	cbz	r0, bdd68 <_Balloc+0x64>
   bdd4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bdd52:	e00e      	b.n	bdd72 <_Balloc+0x6e>
   bdd54:	2221      	movs	r2, #33	; 0x21
   bdd56:	2104      	movs	r1, #4
   bdd58:	4620      	mov	r0, r4
   bdd5a:	f000 fc94 	bl	be686 <_calloc_r>
   bdd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdd60:	60f0      	str	r0, [r6, #12]
   bdd62:	68db      	ldr	r3, [r3, #12]
   bdd64:	2b00      	cmp	r3, #0
   bdd66:	d1e4      	bne.n	bdd32 <_Balloc+0x2e>
   bdd68:	2000      	movs	r0, #0
   bdd6a:	bd70      	pop	{r4, r5, r6, pc}
   bdd6c:	6802      	ldr	r2, [r0, #0]
   bdd6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bdd72:	2300      	movs	r3, #0
   bdd74:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bdd78:	e7f7      	b.n	bdd6a <_Balloc+0x66>
   bdd7a:	bf00      	nop
   bdd7c:	000bf291 	.word	0x000bf291
   bdd80:	000bf534 	.word	0x000bf534

000bdd84 <_Bfree>:
   bdd84:	b570      	push	{r4, r5, r6, lr}
   bdd86:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bdd88:	4605      	mov	r5, r0
   bdd8a:	460c      	mov	r4, r1
   bdd8c:	b976      	cbnz	r6, bddac <_Bfree+0x28>
   bdd8e:	2010      	movs	r0, #16
   bdd90:	f7f9 feec 	bl	b7b6c <malloc>
   bdd94:	4602      	mov	r2, r0
   bdd96:	6268      	str	r0, [r5, #36]	; 0x24
   bdd98:	b920      	cbnz	r0, bdda4 <_Bfree+0x20>
   bdd9a:	4b09      	ldr	r3, [pc, #36]	; (bddc0 <_Bfree+0x3c>)
   bdd9c:	4809      	ldr	r0, [pc, #36]	; (bddc4 <_Bfree+0x40>)
   bdd9e:	218a      	movs	r1, #138	; 0x8a
   bdda0:	f7f9 ff2c 	bl	b7bfc <__assert_func>
   bdda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bdda8:	6006      	str	r6, [r0, #0]
   bddaa:	60c6      	str	r6, [r0, #12]
   bddac:	b13c      	cbz	r4, bddbe <_Bfree+0x3a>
   bddae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bddb0:	6862      	ldr	r2, [r4, #4]
   bddb2:	68db      	ldr	r3, [r3, #12]
   bddb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bddb8:	6021      	str	r1, [r4, #0]
   bddba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bddbe:	bd70      	pop	{r4, r5, r6, pc}
   bddc0:	000bf291 	.word	0x000bf291
   bddc4:	000bf534 	.word	0x000bf534

000bddc8 <__multadd>:
   bddc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bddcc:	690d      	ldr	r5, [r1, #16]
   bddce:	4607      	mov	r7, r0
   bddd0:	460c      	mov	r4, r1
   bddd2:	461e      	mov	r6, r3
   bddd4:	f101 0c14 	add.w	ip, r1, #20
   bddd8:	2000      	movs	r0, #0
   bddda:	f8dc 3000 	ldr.w	r3, [ip]
   bddde:	b299      	uxth	r1, r3
   bdde0:	fb02 6101 	mla	r1, r2, r1, r6
   bdde4:	0c1e      	lsrs	r6, r3, #16
   bdde6:	0c0b      	lsrs	r3, r1, #16
   bdde8:	fb02 3306 	mla	r3, r2, r6, r3
   bddec:	b289      	uxth	r1, r1
   bddee:	3001      	adds	r0, #1
   bddf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bddf4:	4285      	cmp	r5, r0
   bddf6:	f84c 1b04 	str.w	r1, [ip], #4
   bddfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bddfe:	dcec      	bgt.n	bddda <__multadd+0x12>
   bde00:	b30e      	cbz	r6, bde46 <__multadd+0x7e>
   bde02:	68a3      	ldr	r3, [r4, #8]
   bde04:	42ab      	cmp	r3, r5
   bde06:	dc19      	bgt.n	bde3c <__multadd+0x74>
   bde08:	6861      	ldr	r1, [r4, #4]
   bde0a:	4638      	mov	r0, r7
   bde0c:	3101      	adds	r1, #1
   bde0e:	f7ff ff79 	bl	bdd04 <_Balloc>
   bde12:	4680      	mov	r8, r0
   bde14:	b928      	cbnz	r0, bde22 <__multadd+0x5a>
   bde16:	4602      	mov	r2, r0
   bde18:	4b0c      	ldr	r3, [pc, #48]	; (bde4c <__multadd+0x84>)
   bde1a:	480d      	ldr	r0, [pc, #52]	; (bde50 <__multadd+0x88>)
   bde1c:	21b5      	movs	r1, #181	; 0xb5
   bde1e:	f7f9 feed 	bl	b7bfc <__assert_func>
   bde22:	6922      	ldr	r2, [r4, #16]
   bde24:	3202      	adds	r2, #2
   bde26:	f104 010c 	add.w	r1, r4, #12
   bde2a:	0092      	lsls	r2, r2, #2
   bde2c:	300c      	adds	r0, #12
   bde2e:	f7fe fbad 	bl	bc58c <memcpy>
   bde32:	4621      	mov	r1, r4
   bde34:	4638      	mov	r0, r7
   bde36:	f7ff ffa5 	bl	bdd84 <_Bfree>
   bde3a:	4644      	mov	r4, r8
   bde3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bde40:	3501      	adds	r5, #1
   bde42:	615e      	str	r6, [r3, #20]
   bde44:	6125      	str	r5, [r4, #16]
   bde46:	4620      	mov	r0, r4
   bde48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bde4c:	000bf489 	.word	0x000bf489
   bde50:	000bf534 	.word	0x000bf534

000bde54 <__s2b>:
   bde54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bde58:	460c      	mov	r4, r1
   bde5a:	4615      	mov	r5, r2
   bde5c:	461f      	mov	r7, r3
   bde5e:	2209      	movs	r2, #9
   bde60:	3308      	adds	r3, #8
   bde62:	4606      	mov	r6, r0
   bde64:	fb93 f3f2 	sdiv	r3, r3, r2
   bde68:	2100      	movs	r1, #0
   bde6a:	2201      	movs	r2, #1
   bde6c:	429a      	cmp	r2, r3
   bde6e:	db09      	blt.n	bde84 <__s2b+0x30>
   bde70:	4630      	mov	r0, r6
   bde72:	f7ff ff47 	bl	bdd04 <_Balloc>
   bde76:	b940      	cbnz	r0, bde8a <__s2b+0x36>
   bde78:	4602      	mov	r2, r0
   bde7a:	4b19      	ldr	r3, [pc, #100]	; (bdee0 <__s2b+0x8c>)
   bde7c:	4819      	ldr	r0, [pc, #100]	; (bdee4 <__s2b+0x90>)
   bde7e:	21ce      	movs	r1, #206	; 0xce
   bde80:	f7f9 febc 	bl	b7bfc <__assert_func>
   bde84:	0052      	lsls	r2, r2, #1
   bde86:	3101      	adds	r1, #1
   bde88:	e7f0      	b.n	bde6c <__s2b+0x18>
   bde8a:	9b08      	ldr	r3, [sp, #32]
   bde8c:	6143      	str	r3, [r0, #20]
   bde8e:	2d09      	cmp	r5, #9
   bde90:	f04f 0301 	mov.w	r3, #1
   bde94:	6103      	str	r3, [r0, #16]
   bde96:	dd16      	ble.n	bdec6 <__s2b+0x72>
   bde98:	f104 0909 	add.w	r9, r4, #9
   bde9c:	46c8      	mov	r8, r9
   bde9e:	442c      	add	r4, r5
   bdea0:	f818 3b01 	ldrb.w	r3, [r8], #1
   bdea4:	4601      	mov	r1, r0
   bdea6:	3b30      	subs	r3, #48	; 0x30
   bdea8:	220a      	movs	r2, #10
   bdeaa:	4630      	mov	r0, r6
   bdeac:	f7ff ff8c 	bl	bddc8 <__multadd>
   bdeb0:	45a0      	cmp	r8, r4
   bdeb2:	d1f5      	bne.n	bdea0 <__s2b+0x4c>
   bdeb4:	f1a5 0408 	sub.w	r4, r5, #8
   bdeb8:	444c      	add	r4, r9
   bdeba:	1b2d      	subs	r5, r5, r4
   bdebc:	1963      	adds	r3, r4, r5
   bdebe:	42bb      	cmp	r3, r7
   bdec0:	db04      	blt.n	bdecc <__s2b+0x78>
   bdec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdec6:	340a      	adds	r4, #10
   bdec8:	2509      	movs	r5, #9
   bdeca:	e7f6      	b.n	bdeba <__s2b+0x66>
   bdecc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bded0:	4601      	mov	r1, r0
   bded2:	3b30      	subs	r3, #48	; 0x30
   bded4:	220a      	movs	r2, #10
   bded6:	4630      	mov	r0, r6
   bded8:	f7ff ff76 	bl	bddc8 <__multadd>
   bdedc:	e7ee      	b.n	bdebc <__s2b+0x68>
   bdede:	bf00      	nop
   bdee0:	000bf489 	.word	0x000bf489
   bdee4:	000bf534 	.word	0x000bf534

000bdee8 <__hi0bits>:
   bdee8:	0c03      	lsrs	r3, r0, #16
   bdeea:	041b      	lsls	r3, r3, #16
   bdeec:	b9d3      	cbnz	r3, bdf24 <__hi0bits+0x3c>
   bdeee:	0400      	lsls	r0, r0, #16
   bdef0:	2310      	movs	r3, #16
   bdef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bdef6:	bf04      	itt	eq
   bdef8:	0200      	lsleq	r0, r0, #8
   bdefa:	3308      	addeq	r3, #8
   bdefc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bdf00:	bf04      	itt	eq
   bdf02:	0100      	lsleq	r0, r0, #4
   bdf04:	3304      	addeq	r3, #4
   bdf06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bdf0a:	bf04      	itt	eq
   bdf0c:	0080      	lsleq	r0, r0, #2
   bdf0e:	3302      	addeq	r3, #2
   bdf10:	2800      	cmp	r0, #0
   bdf12:	db05      	blt.n	bdf20 <__hi0bits+0x38>
   bdf14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bdf18:	f103 0301 	add.w	r3, r3, #1
   bdf1c:	bf08      	it	eq
   bdf1e:	2320      	moveq	r3, #32
   bdf20:	4618      	mov	r0, r3
   bdf22:	4770      	bx	lr
   bdf24:	2300      	movs	r3, #0
   bdf26:	e7e4      	b.n	bdef2 <__hi0bits+0xa>

000bdf28 <__lo0bits>:
   bdf28:	6803      	ldr	r3, [r0, #0]
   bdf2a:	f013 0207 	ands.w	r2, r3, #7
   bdf2e:	4601      	mov	r1, r0
   bdf30:	d00b      	beq.n	bdf4a <__lo0bits+0x22>
   bdf32:	07da      	lsls	r2, r3, #31
   bdf34:	d423      	bmi.n	bdf7e <__lo0bits+0x56>
   bdf36:	0798      	lsls	r0, r3, #30
   bdf38:	bf49      	itett	mi
   bdf3a:	085b      	lsrmi	r3, r3, #1
   bdf3c:	089b      	lsrpl	r3, r3, #2
   bdf3e:	2001      	movmi	r0, #1
   bdf40:	600b      	strmi	r3, [r1, #0]
   bdf42:	bf5c      	itt	pl
   bdf44:	600b      	strpl	r3, [r1, #0]
   bdf46:	2002      	movpl	r0, #2
   bdf48:	4770      	bx	lr
   bdf4a:	b298      	uxth	r0, r3
   bdf4c:	b9a8      	cbnz	r0, bdf7a <__lo0bits+0x52>
   bdf4e:	0c1b      	lsrs	r3, r3, #16
   bdf50:	2010      	movs	r0, #16
   bdf52:	b2da      	uxtb	r2, r3
   bdf54:	b90a      	cbnz	r2, bdf5a <__lo0bits+0x32>
   bdf56:	3008      	adds	r0, #8
   bdf58:	0a1b      	lsrs	r3, r3, #8
   bdf5a:	071a      	lsls	r2, r3, #28
   bdf5c:	bf04      	itt	eq
   bdf5e:	091b      	lsreq	r3, r3, #4
   bdf60:	3004      	addeq	r0, #4
   bdf62:	079a      	lsls	r2, r3, #30
   bdf64:	bf04      	itt	eq
   bdf66:	089b      	lsreq	r3, r3, #2
   bdf68:	3002      	addeq	r0, #2
   bdf6a:	07da      	lsls	r2, r3, #31
   bdf6c:	d403      	bmi.n	bdf76 <__lo0bits+0x4e>
   bdf6e:	085b      	lsrs	r3, r3, #1
   bdf70:	f100 0001 	add.w	r0, r0, #1
   bdf74:	d005      	beq.n	bdf82 <__lo0bits+0x5a>
   bdf76:	600b      	str	r3, [r1, #0]
   bdf78:	4770      	bx	lr
   bdf7a:	4610      	mov	r0, r2
   bdf7c:	e7e9      	b.n	bdf52 <__lo0bits+0x2a>
   bdf7e:	2000      	movs	r0, #0
   bdf80:	4770      	bx	lr
   bdf82:	2020      	movs	r0, #32
   bdf84:	4770      	bx	lr
	...

000bdf88 <__i2b>:
   bdf88:	b510      	push	{r4, lr}
   bdf8a:	460c      	mov	r4, r1
   bdf8c:	2101      	movs	r1, #1
   bdf8e:	f7ff feb9 	bl	bdd04 <_Balloc>
   bdf92:	4602      	mov	r2, r0
   bdf94:	b928      	cbnz	r0, bdfa2 <__i2b+0x1a>
   bdf96:	4b05      	ldr	r3, [pc, #20]	; (bdfac <__i2b+0x24>)
   bdf98:	4805      	ldr	r0, [pc, #20]	; (bdfb0 <__i2b+0x28>)
   bdf9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdf9e:	f7f9 fe2d 	bl	b7bfc <__assert_func>
   bdfa2:	2301      	movs	r3, #1
   bdfa4:	6144      	str	r4, [r0, #20]
   bdfa6:	6103      	str	r3, [r0, #16]
   bdfa8:	bd10      	pop	{r4, pc}
   bdfaa:	bf00      	nop
   bdfac:	000bf489 	.word	0x000bf489
   bdfb0:	000bf534 	.word	0x000bf534

000bdfb4 <__multiply>:
   bdfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfb8:	4691      	mov	r9, r2
   bdfba:	690a      	ldr	r2, [r1, #16]
   bdfbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdfc0:	429a      	cmp	r2, r3
   bdfc2:	bfb8      	it	lt
   bdfc4:	460b      	movlt	r3, r1
   bdfc6:	460c      	mov	r4, r1
   bdfc8:	bfbc      	itt	lt
   bdfca:	464c      	movlt	r4, r9
   bdfcc:	4699      	movlt	r9, r3
   bdfce:	6927      	ldr	r7, [r4, #16]
   bdfd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdfd4:	68a3      	ldr	r3, [r4, #8]
   bdfd6:	6861      	ldr	r1, [r4, #4]
   bdfd8:	eb07 060a 	add.w	r6, r7, sl
   bdfdc:	42b3      	cmp	r3, r6
   bdfde:	b085      	sub	sp, #20
   bdfe0:	bfb8      	it	lt
   bdfe2:	3101      	addlt	r1, #1
   bdfe4:	f7ff fe8e 	bl	bdd04 <_Balloc>
   bdfe8:	b930      	cbnz	r0, bdff8 <__multiply+0x44>
   bdfea:	4602      	mov	r2, r0
   bdfec:	4b44      	ldr	r3, [pc, #272]	; (be100 <__multiply+0x14c>)
   bdfee:	4845      	ldr	r0, [pc, #276]	; (be104 <__multiply+0x150>)
   bdff0:	f240 115d 	movw	r1, #349	; 0x15d
   bdff4:	f7f9 fe02 	bl	b7bfc <__assert_func>
   bdff8:	f100 0514 	add.w	r5, r0, #20
   bdffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   be000:	462b      	mov	r3, r5
   be002:	2200      	movs	r2, #0
   be004:	4543      	cmp	r3, r8
   be006:	d321      	bcc.n	be04c <__multiply+0x98>
   be008:	f104 0314 	add.w	r3, r4, #20
   be00c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   be010:	f109 0314 	add.w	r3, r9, #20
   be014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   be018:	9202      	str	r2, [sp, #8]
   be01a:	1b3a      	subs	r2, r7, r4
   be01c:	3a15      	subs	r2, #21
   be01e:	f022 0203 	bic.w	r2, r2, #3
   be022:	3204      	adds	r2, #4
   be024:	f104 0115 	add.w	r1, r4, #21
   be028:	428f      	cmp	r7, r1
   be02a:	bf38      	it	cc
   be02c:	2204      	movcc	r2, #4
   be02e:	9201      	str	r2, [sp, #4]
   be030:	9a02      	ldr	r2, [sp, #8]
   be032:	9303      	str	r3, [sp, #12]
   be034:	429a      	cmp	r2, r3
   be036:	d80c      	bhi.n	be052 <__multiply+0x9e>
   be038:	2e00      	cmp	r6, #0
   be03a:	dd03      	ble.n	be044 <__multiply+0x90>
   be03c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   be040:	2b00      	cmp	r3, #0
   be042:	d05a      	beq.n	be0fa <__multiply+0x146>
   be044:	6106      	str	r6, [r0, #16]
   be046:	b005      	add	sp, #20
   be048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be04c:	f843 2b04 	str.w	r2, [r3], #4
   be050:	e7d8      	b.n	be004 <__multiply+0x50>
   be052:	f8b3 a000 	ldrh.w	sl, [r3]
   be056:	f1ba 0f00 	cmp.w	sl, #0
   be05a:	d024      	beq.n	be0a6 <__multiply+0xf2>
   be05c:	f104 0e14 	add.w	lr, r4, #20
   be060:	46a9      	mov	r9, r5
   be062:	f04f 0c00 	mov.w	ip, #0
   be066:	f85e 2b04 	ldr.w	r2, [lr], #4
   be06a:	f8d9 1000 	ldr.w	r1, [r9]
   be06e:	fa1f fb82 	uxth.w	fp, r2
   be072:	b289      	uxth	r1, r1
   be074:	fb0a 110b 	mla	r1, sl, fp, r1
   be078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   be07c:	f8d9 2000 	ldr.w	r2, [r9]
   be080:	4461      	add	r1, ip
   be082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be086:	fb0a c20b 	mla	r2, sl, fp, ip
   be08a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   be08e:	b289      	uxth	r1, r1
   be090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   be094:	4577      	cmp	r7, lr
   be096:	f849 1b04 	str.w	r1, [r9], #4
   be09a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be09e:	d8e2      	bhi.n	be066 <__multiply+0xb2>
   be0a0:	9a01      	ldr	r2, [sp, #4]
   be0a2:	f845 c002 	str.w	ip, [r5, r2]
   be0a6:	9a03      	ldr	r2, [sp, #12]
   be0a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   be0ac:	3304      	adds	r3, #4
   be0ae:	f1b9 0f00 	cmp.w	r9, #0
   be0b2:	d020      	beq.n	be0f6 <__multiply+0x142>
   be0b4:	6829      	ldr	r1, [r5, #0]
   be0b6:	f104 0c14 	add.w	ip, r4, #20
   be0ba:	46ae      	mov	lr, r5
   be0bc:	f04f 0a00 	mov.w	sl, #0
   be0c0:	f8bc b000 	ldrh.w	fp, [ip]
   be0c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   be0c8:	fb09 220b 	mla	r2, r9, fp, r2
   be0cc:	4492      	add	sl, r2
   be0ce:	b289      	uxth	r1, r1
   be0d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   be0d4:	f84e 1b04 	str.w	r1, [lr], #4
   be0d8:	f85c 2b04 	ldr.w	r2, [ip], #4
   be0dc:	f8be 1000 	ldrh.w	r1, [lr]
   be0e0:	0c12      	lsrs	r2, r2, #16
   be0e2:	fb09 1102 	mla	r1, r9, r2, r1
   be0e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   be0ea:	4567      	cmp	r7, ip
   be0ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   be0f0:	d8e6      	bhi.n	be0c0 <__multiply+0x10c>
   be0f2:	9a01      	ldr	r2, [sp, #4]
   be0f4:	50a9      	str	r1, [r5, r2]
   be0f6:	3504      	adds	r5, #4
   be0f8:	e79a      	b.n	be030 <__multiply+0x7c>
   be0fa:	3e01      	subs	r6, #1
   be0fc:	e79c      	b.n	be038 <__multiply+0x84>
   be0fe:	bf00      	nop
   be100:	000bf489 	.word	0x000bf489
   be104:	000bf534 	.word	0x000bf534

000be108 <__pow5mult>:
   be108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be10c:	4615      	mov	r5, r2
   be10e:	f012 0203 	ands.w	r2, r2, #3
   be112:	4606      	mov	r6, r0
   be114:	460f      	mov	r7, r1
   be116:	d007      	beq.n	be128 <__pow5mult+0x20>
   be118:	4c25      	ldr	r4, [pc, #148]	; (be1b0 <__pow5mult+0xa8>)
   be11a:	3a01      	subs	r2, #1
   be11c:	2300      	movs	r3, #0
   be11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   be122:	f7ff fe51 	bl	bddc8 <__multadd>
   be126:	4607      	mov	r7, r0
   be128:	10ad      	asrs	r5, r5, #2
   be12a:	d03d      	beq.n	be1a8 <__pow5mult+0xa0>
   be12c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   be12e:	b97c      	cbnz	r4, be150 <__pow5mult+0x48>
   be130:	2010      	movs	r0, #16
   be132:	f7f9 fd1b 	bl	b7b6c <malloc>
   be136:	4602      	mov	r2, r0
   be138:	6270      	str	r0, [r6, #36]	; 0x24
   be13a:	b928      	cbnz	r0, be148 <__pow5mult+0x40>
   be13c:	4b1d      	ldr	r3, [pc, #116]	; (be1b4 <__pow5mult+0xac>)
   be13e:	481e      	ldr	r0, [pc, #120]	; (be1b8 <__pow5mult+0xb0>)
   be140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   be144:	f7f9 fd5a 	bl	b7bfc <__assert_func>
   be148:	e9c0 4401 	strd	r4, r4, [r0, #4]
   be14c:	6004      	str	r4, [r0, #0]
   be14e:	60c4      	str	r4, [r0, #12]
   be150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   be154:	f8d8 4008 	ldr.w	r4, [r8, #8]
   be158:	b94c      	cbnz	r4, be16e <__pow5mult+0x66>
   be15a:	f240 2171 	movw	r1, #625	; 0x271
   be15e:	4630      	mov	r0, r6
   be160:	f7ff ff12 	bl	bdf88 <__i2b>
   be164:	2300      	movs	r3, #0
   be166:	f8c8 0008 	str.w	r0, [r8, #8]
   be16a:	4604      	mov	r4, r0
   be16c:	6003      	str	r3, [r0, #0]
   be16e:	f04f 0900 	mov.w	r9, #0
   be172:	07eb      	lsls	r3, r5, #31
   be174:	d50a      	bpl.n	be18c <__pow5mult+0x84>
   be176:	4639      	mov	r1, r7
   be178:	4622      	mov	r2, r4
   be17a:	4630      	mov	r0, r6
   be17c:	f7ff ff1a 	bl	bdfb4 <__multiply>
   be180:	4639      	mov	r1, r7
   be182:	4680      	mov	r8, r0
   be184:	4630      	mov	r0, r6
   be186:	f7ff fdfd 	bl	bdd84 <_Bfree>
   be18a:	4647      	mov	r7, r8
   be18c:	106d      	asrs	r5, r5, #1
   be18e:	d00b      	beq.n	be1a8 <__pow5mult+0xa0>
   be190:	6820      	ldr	r0, [r4, #0]
   be192:	b938      	cbnz	r0, be1a4 <__pow5mult+0x9c>
   be194:	4622      	mov	r2, r4
   be196:	4621      	mov	r1, r4
   be198:	4630      	mov	r0, r6
   be19a:	f7ff ff0b 	bl	bdfb4 <__multiply>
   be19e:	6020      	str	r0, [r4, #0]
   be1a0:	f8c0 9000 	str.w	r9, [r0]
   be1a4:	4604      	mov	r4, r0
   be1a6:	e7e4      	b.n	be172 <__pow5mult+0x6a>
   be1a8:	4638      	mov	r0, r7
   be1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be1ae:	bf00      	nop
   be1b0:	000bf6a8 	.word	0x000bf6a8
   be1b4:	000bf291 	.word	0x000bf291
   be1b8:	000bf534 	.word	0x000bf534

000be1bc <__lshift>:
   be1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be1c0:	460c      	mov	r4, r1
   be1c2:	6849      	ldr	r1, [r1, #4]
   be1c4:	6923      	ldr	r3, [r4, #16]
   be1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   be1ca:	68a3      	ldr	r3, [r4, #8]
   be1cc:	4607      	mov	r7, r0
   be1ce:	4691      	mov	r9, r2
   be1d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   be1d4:	f108 0601 	add.w	r6, r8, #1
   be1d8:	42b3      	cmp	r3, r6
   be1da:	db0b      	blt.n	be1f4 <__lshift+0x38>
   be1dc:	4638      	mov	r0, r7
   be1de:	f7ff fd91 	bl	bdd04 <_Balloc>
   be1e2:	4605      	mov	r5, r0
   be1e4:	b948      	cbnz	r0, be1fa <__lshift+0x3e>
   be1e6:	4602      	mov	r2, r0
   be1e8:	4b2a      	ldr	r3, [pc, #168]	; (be294 <__lshift+0xd8>)
   be1ea:	482b      	ldr	r0, [pc, #172]	; (be298 <__lshift+0xdc>)
   be1ec:	f240 11d9 	movw	r1, #473	; 0x1d9
   be1f0:	f7f9 fd04 	bl	b7bfc <__assert_func>
   be1f4:	3101      	adds	r1, #1
   be1f6:	005b      	lsls	r3, r3, #1
   be1f8:	e7ee      	b.n	be1d8 <__lshift+0x1c>
   be1fa:	2300      	movs	r3, #0
   be1fc:	f100 0114 	add.w	r1, r0, #20
   be200:	f100 0210 	add.w	r2, r0, #16
   be204:	4618      	mov	r0, r3
   be206:	4553      	cmp	r3, sl
   be208:	db37      	blt.n	be27a <__lshift+0xbe>
   be20a:	6920      	ldr	r0, [r4, #16]
   be20c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   be210:	f104 0314 	add.w	r3, r4, #20
   be214:	f019 091f 	ands.w	r9, r9, #31
   be218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   be21c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   be220:	d02f      	beq.n	be282 <__lshift+0xc6>
   be222:	f1c9 0e20 	rsb	lr, r9, #32
   be226:	468a      	mov	sl, r1
   be228:	f04f 0c00 	mov.w	ip, #0
   be22c:	681a      	ldr	r2, [r3, #0]
   be22e:	fa02 f209 	lsl.w	r2, r2, r9
   be232:	ea42 020c 	orr.w	r2, r2, ip
   be236:	f84a 2b04 	str.w	r2, [sl], #4
   be23a:	f853 2b04 	ldr.w	r2, [r3], #4
   be23e:	4298      	cmp	r0, r3
   be240:	fa22 fc0e 	lsr.w	ip, r2, lr
   be244:	d8f2      	bhi.n	be22c <__lshift+0x70>
   be246:	1b03      	subs	r3, r0, r4
   be248:	3b15      	subs	r3, #21
   be24a:	f023 0303 	bic.w	r3, r3, #3
   be24e:	3304      	adds	r3, #4
   be250:	f104 0215 	add.w	r2, r4, #21
   be254:	4290      	cmp	r0, r2
   be256:	bf38      	it	cc
   be258:	2304      	movcc	r3, #4
   be25a:	f841 c003 	str.w	ip, [r1, r3]
   be25e:	f1bc 0f00 	cmp.w	ip, #0
   be262:	d001      	beq.n	be268 <__lshift+0xac>
   be264:	f108 0602 	add.w	r6, r8, #2
   be268:	3e01      	subs	r6, #1
   be26a:	4638      	mov	r0, r7
   be26c:	612e      	str	r6, [r5, #16]
   be26e:	4621      	mov	r1, r4
   be270:	f7ff fd88 	bl	bdd84 <_Bfree>
   be274:	4628      	mov	r0, r5
   be276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be27a:	f842 0f04 	str.w	r0, [r2, #4]!
   be27e:	3301      	adds	r3, #1
   be280:	e7c1      	b.n	be206 <__lshift+0x4a>
   be282:	3904      	subs	r1, #4
   be284:	f853 2b04 	ldr.w	r2, [r3], #4
   be288:	f841 2f04 	str.w	r2, [r1, #4]!
   be28c:	4298      	cmp	r0, r3
   be28e:	d8f9      	bhi.n	be284 <__lshift+0xc8>
   be290:	e7ea      	b.n	be268 <__lshift+0xac>
   be292:	bf00      	nop
   be294:	000bf489 	.word	0x000bf489
   be298:	000bf534 	.word	0x000bf534

000be29c <__mcmp>:
   be29c:	b530      	push	{r4, r5, lr}
   be29e:	6902      	ldr	r2, [r0, #16]
   be2a0:	690c      	ldr	r4, [r1, #16]
   be2a2:	1b12      	subs	r2, r2, r4
   be2a4:	d10e      	bne.n	be2c4 <__mcmp+0x28>
   be2a6:	f100 0314 	add.w	r3, r0, #20
   be2aa:	3114      	adds	r1, #20
   be2ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   be2b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   be2b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   be2b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   be2bc:	42a5      	cmp	r5, r4
   be2be:	d003      	beq.n	be2c8 <__mcmp+0x2c>
   be2c0:	d305      	bcc.n	be2ce <__mcmp+0x32>
   be2c2:	2201      	movs	r2, #1
   be2c4:	4610      	mov	r0, r2
   be2c6:	bd30      	pop	{r4, r5, pc}
   be2c8:	4283      	cmp	r3, r0
   be2ca:	d3f3      	bcc.n	be2b4 <__mcmp+0x18>
   be2cc:	e7fa      	b.n	be2c4 <__mcmp+0x28>
   be2ce:	f04f 32ff 	mov.w	r2, #4294967295
   be2d2:	e7f7      	b.n	be2c4 <__mcmp+0x28>

000be2d4 <__mdiff>:
   be2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be2d8:	460c      	mov	r4, r1
   be2da:	4606      	mov	r6, r0
   be2dc:	4611      	mov	r1, r2
   be2de:	4620      	mov	r0, r4
   be2e0:	4690      	mov	r8, r2
   be2e2:	f7ff ffdb 	bl	be29c <__mcmp>
   be2e6:	1e05      	subs	r5, r0, #0
   be2e8:	d110      	bne.n	be30c <__mdiff+0x38>
   be2ea:	4629      	mov	r1, r5
   be2ec:	4630      	mov	r0, r6
   be2ee:	f7ff fd09 	bl	bdd04 <_Balloc>
   be2f2:	b930      	cbnz	r0, be302 <__mdiff+0x2e>
   be2f4:	4b3a      	ldr	r3, [pc, #232]	; (be3e0 <__mdiff+0x10c>)
   be2f6:	4602      	mov	r2, r0
   be2f8:	f240 2132 	movw	r1, #562	; 0x232
   be2fc:	4839      	ldr	r0, [pc, #228]	; (be3e4 <__mdiff+0x110>)
   be2fe:	f7f9 fc7d 	bl	b7bfc <__assert_func>
   be302:	2301      	movs	r3, #1
   be304:	e9c0 3504 	strd	r3, r5, [r0, #16]
   be308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be30c:	bfa4      	itt	ge
   be30e:	4643      	movge	r3, r8
   be310:	46a0      	movge	r8, r4
   be312:	4630      	mov	r0, r6
   be314:	f8d8 1004 	ldr.w	r1, [r8, #4]
   be318:	bfa6      	itte	ge
   be31a:	461c      	movge	r4, r3
   be31c:	2500      	movge	r5, #0
   be31e:	2501      	movlt	r5, #1
   be320:	f7ff fcf0 	bl	bdd04 <_Balloc>
   be324:	b920      	cbnz	r0, be330 <__mdiff+0x5c>
   be326:	4b2e      	ldr	r3, [pc, #184]	; (be3e0 <__mdiff+0x10c>)
   be328:	4602      	mov	r2, r0
   be32a:	f44f 7110 	mov.w	r1, #576	; 0x240
   be32e:	e7e5      	b.n	be2fc <__mdiff+0x28>
   be330:	f8d8 7010 	ldr.w	r7, [r8, #16]
   be334:	6926      	ldr	r6, [r4, #16]
   be336:	60c5      	str	r5, [r0, #12]
   be338:	f104 0914 	add.w	r9, r4, #20
   be33c:	f108 0514 	add.w	r5, r8, #20
   be340:	f100 0e14 	add.w	lr, r0, #20
   be344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   be348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   be34c:	f108 0210 	add.w	r2, r8, #16
   be350:	46f2      	mov	sl, lr
   be352:	2100      	movs	r1, #0
   be354:	f859 3b04 	ldr.w	r3, [r9], #4
   be358:	f852 bf04 	ldr.w	fp, [r2, #4]!
   be35c:	fa1f f883 	uxth.w	r8, r3
   be360:	fa11 f18b 	uxtah	r1, r1, fp
   be364:	0c1b      	lsrs	r3, r3, #16
   be366:	eba1 0808 	sub.w	r8, r1, r8
   be36a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   be36e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   be372:	fa1f f888 	uxth.w	r8, r8
   be376:	1419      	asrs	r1, r3, #16
   be378:	454e      	cmp	r6, r9
   be37a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   be37e:	f84a 3b04 	str.w	r3, [sl], #4
   be382:	d8e7      	bhi.n	be354 <__mdiff+0x80>
   be384:	1b33      	subs	r3, r6, r4
   be386:	3b15      	subs	r3, #21
   be388:	f023 0303 	bic.w	r3, r3, #3
   be38c:	3304      	adds	r3, #4
   be38e:	3415      	adds	r4, #21
   be390:	42a6      	cmp	r6, r4
   be392:	bf38      	it	cc
   be394:	2304      	movcc	r3, #4
   be396:	441d      	add	r5, r3
   be398:	4473      	add	r3, lr
   be39a:	469e      	mov	lr, r3
   be39c:	462e      	mov	r6, r5
   be39e:	4566      	cmp	r6, ip
   be3a0:	d30e      	bcc.n	be3c0 <__mdiff+0xec>
   be3a2:	f10c 0203 	add.w	r2, ip, #3
   be3a6:	1b52      	subs	r2, r2, r5
   be3a8:	f022 0203 	bic.w	r2, r2, #3
   be3ac:	3d03      	subs	r5, #3
   be3ae:	45ac      	cmp	ip, r5
   be3b0:	bf38      	it	cc
   be3b2:	2200      	movcc	r2, #0
   be3b4:	441a      	add	r2, r3
   be3b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   be3ba:	b17b      	cbz	r3, be3dc <__mdiff+0x108>
   be3bc:	6107      	str	r7, [r0, #16]
   be3be:	e7a3      	b.n	be308 <__mdiff+0x34>
   be3c0:	f856 8b04 	ldr.w	r8, [r6], #4
   be3c4:	fa11 f288 	uxtah	r2, r1, r8
   be3c8:	1414      	asrs	r4, r2, #16
   be3ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   be3ce:	b292      	uxth	r2, r2
   be3d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   be3d4:	f84e 2b04 	str.w	r2, [lr], #4
   be3d8:	1421      	asrs	r1, r4, #16
   be3da:	e7e0      	b.n	be39e <__mdiff+0xca>
   be3dc:	3f01      	subs	r7, #1
   be3de:	e7ea      	b.n	be3b6 <__mdiff+0xe2>
   be3e0:	000bf489 	.word	0x000bf489
   be3e4:	000bf534 	.word	0x000bf534

000be3e8 <__ulp>:
   be3e8:	b082      	sub	sp, #8
   be3ea:	ed8d 0b00 	vstr	d0, [sp]
   be3ee:	9b01      	ldr	r3, [sp, #4]
   be3f0:	4912      	ldr	r1, [pc, #72]	; (be43c <__ulp+0x54>)
   be3f2:	4019      	ands	r1, r3
   be3f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   be3f8:	2900      	cmp	r1, #0
   be3fa:	dd05      	ble.n	be408 <__ulp+0x20>
   be3fc:	2200      	movs	r2, #0
   be3fe:	460b      	mov	r3, r1
   be400:	ec43 2b10 	vmov	d0, r2, r3
   be404:	b002      	add	sp, #8
   be406:	4770      	bx	lr
   be408:	4249      	negs	r1, r1
   be40a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   be40e:	ea4f 5021 	mov.w	r0, r1, asr #20
   be412:	f04f 0200 	mov.w	r2, #0
   be416:	f04f 0300 	mov.w	r3, #0
   be41a:	da04      	bge.n	be426 <__ulp+0x3e>
   be41c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   be420:	fa41 f300 	asr.w	r3, r1, r0
   be424:	e7ec      	b.n	be400 <__ulp+0x18>
   be426:	f1a0 0114 	sub.w	r1, r0, #20
   be42a:	291e      	cmp	r1, #30
   be42c:	bfda      	itte	le
   be42e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   be432:	fa20 f101 	lsrle.w	r1, r0, r1
   be436:	2101      	movgt	r1, #1
   be438:	460a      	mov	r2, r1
   be43a:	e7e1      	b.n	be400 <__ulp+0x18>
   be43c:	7ff00000 	.word	0x7ff00000

000be440 <__b2d>:
   be440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be442:	6905      	ldr	r5, [r0, #16]
   be444:	f100 0714 	add.w	r7, r0, #20
   be448:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   be44c:	1f2e      	subs	r6, r5, #4
   be44e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   be452:	4620      	mov	r0, r4
   be454:	f7ff fd48 	bl	bdee8 <__hi0bits>
   be458:	f1c0 0320 	rsb	r3, r0, #32
   be45c:	280a      	cmp	r0, #10
   be45e:	f8df c07c 	ldr.w	ip, [pc, #124]	; be4dc <__b2d+0x9c>
   be462:	600b      	str	r3, [r1, #0]
   be464:	dc14      	bgt.n	be490 <__b2d+0x50>
   be466:	f1c0 0e0b 	rsb	lr, r0, #11
   be46a:	fa24 f10e 	lsr.w	r1, r4, lr
   be46e:	42b7      	cmp	r7, r6
   be470:	ea41 030c 	orr.w	r3, r1, ip
   be474:	bf34      	ite	cc
   be476:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be47a:	2100      	movcs	r1, #0
   be47c:	3015      	adds	r0, #21
   be47e:	fa04 f000 	lsl.w	r0, r4, r0
   be482:	fa21 f10e 	lsr.w	r1, r1, lr
   be486:	ea40 0201 	orr.w	r2, r0, r1
   be48a:	ec43 2b10 	vmov	d0, r2, r3
   be48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be490:	42b7      	cmp	r7, r6
   be492:	bf3a      	itte	cc
   be494:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be498:	f1a5 0608 	subcc.w	r6, r5, #8
   be49c:	2100      	movcs	r1, #0
   be49e:	380b      	subs	r0, #11
   be4a0:	d017      	beq.n	be4d2 <__b2d+0x92>
   be4a2:	f1c0 0c20 	rsb	ip, r0, #32
   be4a6:	fa04 f500 	lsl.w	r5, r4, r0
   be4aa:	42be      	cmp	r6, r7
   be4ac:	fa21 f40c 	lsr.w	r4, r1, ip
   be4b0:	ea45 0504 	orr.w	r5, r5, r4
   be4b4:	bf8c      	ite	hi
   be4b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be4ba:	2400      	movls	r4, #0
   be4bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be4c0:	fa01 f000 	lsl.w	r0, r1, r0
   be4c4:	fa24 f40c 	lsr.w	r4, r4, ip
   be4c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be4cc:	ea40 0204 	orr.w	r2, r0, r4
   be4d0:	e7db      	b.n	be48a <__b2d+0x4a>
   be4d2:	ea44 030c 	orr.w	r3, r4, ip
   be4d6:	460a      	mov	r2, r1
   be4d8:	e7d7      	b.n	be48a <__b2d+0x4a>
   be4da:	bf00      	nop
   be4dc:	3ff00000 	.word	0x3ff00000

000be4e0 <__d2b>:
   be4e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be4e4:	4689      	mov	r9, r1
   be4e6:	2101      	movs	r1, #1
   be4e8:	ec57 6b10 	vmov	r6, r7, d0
   be4ec:	4690      	mov	r8, r2
   be4ee:	f7ff fc09 	bl	bdd04 <_Balloc>
   be4f2:	4604      	mov	r4, r0
   be4f4:	b930      	cbnz	r0, be504 <__d2b+0x24>
   be4f6:	4602      	mov	r2, r0
   be4f8:	4b25      	ldr	r3, [pc, #148]	; (be590 <__d2b+0xb0>)
   be4fa:	4826      	ldr	r0, [pc, #152]	; (be594 <__d2b+0xb4>)
   be4fc:	f240 310a 	movw	r1, #778	; 0x30a
   be500:	f7f9 fb7c 	bl	b7bfc <__assert_func>
   be504:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be508:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be50c:	bb35      	cbnz	r5, be55c <__d2b+0x7c>
   be50e:	2e00      	cmp	r6, #0
   be510:	9301      	str	r3, [sp, #4]
   be512:	d028      	beq.n	be566 <__d2b+0x86>
   be514:	4668      	mov	r0, sp
   be516:	9600      	str	r6, [sp, #0]
   be518:	f7ff fd06 	bl	bdf28 <__lo0bits>
   be51c:	9900      	ldr	r1, [sp, #0]
   be51e:	b300      	cbz	r0, be562 <__d2b+0x82>
   be520:	9a01      	ldr	r2, [sp, #4]
   be522:	f1c0 0320 	rsb	r3, r0, #32
   be526:	fa02 f303 	lsl.w	r3, r2, r3
   be52a:	430b      	orrs	r3, r1
   be52c:	40c2      	lsrs	r2, r0
   be52e:	6163      	str	r3, [r4, #20]
   be530:	9201      	str	r2, [sp, #4]
   be532:	9b01      	ldr	r3, [sp, #4]
   be534:	61a3      	str	r3, [r4, #24]
   be536:	2b00      	cmp	r3, #0
   be538:	bf14      	ite	ne
   be53a:	2202      	movne	r2, #2
   be53c:	2201      	moveq	r2, #1
   be53e:	6122      	str	r2, [r4, #16]
   be540:	b1d5      	cbz	r5, be578 <__d2b+0x98>
   be542:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be546:	4405      	add	r5, r0
   be548:	f8c9 5000 	str.w	r5, [r9]
   be54c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be550:	f8c8 0000 	str.w	r0, [r8]
   be554:	4620      	mov	r0, r4
   be556:	b003      	add	sp, #12
   be558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be55c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be560:	e7d5      	b.n	be50e <__d2b+0x2e>
   be562:	6161      	str	r1, [r4, #20]
   be564:	e7e5      	b.n	be532 <__d2b+0x52>
   be566:	a801      	add	r0, sp, #4
   be568:	f7ff fcde 	bl	bdf28 <__lo0bits>
   be56c:	9b01      	ldr	r3, [sp, #4]
   be56e:	6163      	str	r3, [r4, #20]
   be570:	2201      	movs	r2, #1
   be572:	6122      	str	r2, [r4, #16]
   be574:	3020      	adds	r0, #32
   be576:	e7e3      	b.n	be540 <__d2b+0x60>
   be578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be57c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be580:	f8c9 0000 	str.w	r0, [r9]
   be584:	6918      	ldr	r0, [r3, #16]
   be586:	f7ff fcaf 	bl	bdee8 <__hi0bits>
   be58a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be58e:	e7df      	b.n	be550 <__d2b+0x70>
   be590:	000bf489 	.word	0x000bf489
   be594:	000bf534 	.word	0x000bf534

000be598 <__ratio>:
   be598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be59c:	4688      	mov	r8, r1
   be59e:	4669      	mov	r1, sp
   be5a0:	4681      	mov	r9, r0
   be5a2:	f7ff ff4d 	bl	be440 <__b2d>
   be5a6:	a901      	add	r1, sp, #4
   be5a8:	4640      	mov	r0, r8
   be5aa:	ec55 4b10 	vmov	r4, r5, d0
   be5ae:	f7ff ff47 	bl	be440 <__b2d>
   be5b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be5b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be5ba:	eba3 0c02 	sub.w	ip, r3, r2
   be5be:	e9dd 3200 	ldrd	r3, r2, [sp]
   be5c2:	1a9b      	subs	r3, r3, r2
   be5c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be5c8:	ec51 0b10 	vmov	r0, r1, d0
   be5cc:	2b00      	cmp	r3, #0
   be5ce:	bfd6      	itet	le
   be5d0:	460a      	movle	r2, r1
   be5d2:	462a      	movgt	r2, r5
   be5d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be5d8:	468b      	mov	fp, r1
   be5da:	462f      	mov	r7, r5
   be5dc:	bfd4      	ite	le
   be5de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be5e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be5e6:	4620      	mov	r0, r4
   be5e8:	ee10 2a10 	vmov	r2, s0
   be5ec:	465b      	mov	r3, fp
   be5ee:	4639      	mov	r1, r7
   be5f0:	f7fd fda8 	bl	bc144 <__aeabi_ddiv>
   be5f4:	ec41 0b10 	vmov	d0, r0, r1
   be5f8:	b003      	add	sp, #12
   be5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be5fe <__copybits>:
   be5fe:	3901      	subs	r1, #1
   be600:	b570      	push	{r4, r5, r6, lr}
   be602:	1149      	asrs	r1, r1, #5
   be604:	6914      	ldr	r4, [r2, #16]
   be606:	3101      	adds	r1, #1
   be608:	f102 0314 	add.w	r3, r2, #20
   be60c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be614:	1f05      	subs	r5, r0, #4
   be616:	42a3      	cmp	r3, r4
   be618:	d30c      	bcc.n	be634 <__copybits+0x36>
   be61a:	1aa3      	subs	r3, r4, r2
   be61c:	3b11      	subs	r3, #17
   be61e:	f023 0303 	bic.w	r3, r3, #3
   be622:	3211      	adds	r2, #17
   be624:	42a2      	cmp	r2, r4
   be626:	bf88      	it	hi
   be628:	2300      	movhi	r3, #0
   be62a:	4418      	add	r0, r3
   be62c:	2300      	movs	r3, #0
   be62e:	4288      	cmp	r0, r1
   be630:	d305      	bcc.n	be63e <__copybits+0x40>
   be632:	bd70      	pop	{r4, r5, r6, pc}
   be634:	f853 6b04 	ldr.w	r6, [r3], #4
   be638:	f845 6f04 	str.w	r6, [r5, #4]!
   be63c:	e7eb      	b.n	be616 <__copybits+0x18>
   be63e:	f840 3b04 	str.w	r3, [r0], #4
   be642:	e7f4      	b.n	be62e <__copybits+0x30>

000be644 <__any_on>:
   be644:	f100 0214 	add.w	r2, r0, #20
   be648:	6900      	ldr	r0, [r0, #16]
   be64a:	114b      	asrs	r3, r1, #5
   be64c:	4298      	cmp	r0, r3
   be64e:	b510      	push	{r4, lr}
   be650:	db11      	blt.n	be676 <__any_on+0x32>
   be652:	dd0a      	ble.n	be66a <__any_on+0x26>
   be654:	f011 011f 	ands.w	r1, r1, #31
   be658:	d007      	beq.n	be66a <__any_on+0x26>
   be65a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be65e:	fa24 f001 	lsr.w	r0, r4, r1
   be662:	fa00 f101 	lsl.w	r1, r0, r1
   be666:	428c      	cmp	r4, r1
   be668:	d10b      	bne.n	be682 <__any_on+0x3e>
   be66a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be66e:	4293      	cmp	r3, r2
   be670:	d803      	bhi.n	be67a <__any_on+0x36>
   be672:	2000      	movs	r0, #0
   be674:	bd10      	pop	{r4, pc}
   be676:	4603      	mov	r3, r0
   be678:	e7f7      	b.n	be66a <__any_on+0x26>
   be67a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be67e:	2900      	cmp	r1, #0
   be680:	d0f5      	beq.n	be66e <__any_on+0x2a>
   be682:	2001      	movs	r0, #1
   be684:	e7f6      	b.n	be674 <__any_on+0x30>

000be686 <_calloc_r>:
   be686:	b513      	push	{r0, r1, r4, lr}
   be688:	434a      	muls	r2, r1
   be68a:	4611      	mov	r1, r2
   be68c:	9201      	str	r2, [sp, #4]
   be68e:	f7f9 faa5 	bl	b7bdc <_malloc_r>
   be692:	4604      	mov	r4, r0
   be694:	b118      	cbz	r0, be69e <_calloc_r+0x18>
   be696:	9a01      	ldr	r2, [sp, #4]
   be698:	2100      	movs	r1, #0
   be69a:	f7fd ff9f 	bl	bc5dc <memset>
   be69e:	4620      	mov	r0, r4
   be6a0:	b002      	add	sp, #8
   be6a2:	bd10      	pop	{r4, pc}
   be6a4:	0000      	movs	r0, r0
	...

000be6a8 <nan>:
   be6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; be6b0 <nan+0x8>
   be6ac:	4770      	bx	lr
   be6ae:	bf00      	nop
   be6b0:	00000000 	.word	0x00000000
   be6b4:	7ff80000 	.word	0x7ff80000

000be6b8 <__ascii_wctomb>:
   be6b8:	b149      	cbz	r1, be6ce <__ascii_wctomb+0x16>
   be6ba:	2aff      	cmp	r2, #255	; 0xff
   be6bc:	bf85      	ittet	hi
   be6be:	238a      	movhi	r3, #138	; 0x8a
   be6c0:	6003      	strhi	r3, [r0, #0]
   be6c2:	700a      	strbls	r2, [r1, #0]
   be6c4:	f04f 30ff 	movhi.w	r0, #4294967295
   be6c8:	bf98      	it	ls
   be6ca:	2001      	movls	r0, #1
   be6cc:	4770      	bx	lr
   be6ce:	4608      	mov	r0, r1
   be6d0:	4770      	bx	lr
	...

000be6d4 <__aeabi_d2lz>:
   be6d4:	b538      	push	{r3, r4, r5, lr}
   be6d6:	2200      	movs	r2, #0
   be6d8:	2300      	movs	r3, #0
   be6da:	4604      	mov	r4, r0
   be6dc:	460d      	mov	r5, r1
   be6de:	f7fd fe79 	bl	bc3d4 <__aeabi_dcmplt>
   be6e2:	b928      	cbnz	r0, be6f0 <__aeabi_d2lz+0x1c>
   be6e4:	4620      	mov	r0, r4
   be6e6:	4629      	mov	r1, r5
   be6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be6ec:	f7fd bf0a 	b.w	bc504 <__aeabi_d2ulz>
   be6f0:	4620      	mov	r0, r4
   be6f2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be6f6:	f7fd ff05 	bl	bc504 <__aeabi_d2ulz>
   be6fa:	4240      	negs	r0, r0
   be6fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be700:	bd38      	pop	{r3, r4, r5, pc}
   be702:	bf00      	nop

000be704 <dynalib_user>:
   be704:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be714:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   be724:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   be734:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   be744:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   be754:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   be764:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   be774:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   be784:	4544 7525 003e 7453 7461 7375 203a 6425     DE%u>.Status: %d
   be794:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   be7a4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   be7b4:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   be7c4:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   be7d4:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   be7e4:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   be7f4:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   be804:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   be814:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   be824:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   be834:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   be844:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   be854:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   be864:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   be874:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   be884:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   be894:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   be8a4:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   be8b4:	6361 006b 746d 0072 6552 6563 7669 6465     ack.mtr.Received
   be8c4:	4d20 746f 726f 4320 6d6f 616d 646e 203a      Motor Command: 
   be8d4:	534c 6570 6465 253d 2c64 5352 6570 6465     LSpeed=%d,RSpeed
   be8e4:	253d 0064 6572 0071 7470 0073 505b 5455     =%d.req.pts.[PUT
   be8f4:	5d53 5220 6365 6965 6576 2064 7453 6972     S] Received Stri
   be904:	676e 4320 6d6f 616d 646e 203a 7325 7300     ng Command: %s.s
   be914:	6370 6800 6177 6100 7475 6400 706d 5b00     pc.hwa.aut.dmp.[
   be924:	4e49 4f46 205d 6552 6563 7669 6465 4c20     INFO] Received L
   be934:	4554 4d20 7365 6173 6567 203a 7325 4e00     TE Message: %s.N
   be944:	7765 4220 2054 6f43 6d6d 6e61 3a64 5b00     ew BT Command:.[
   be954:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   be964:	454c 4d20 7365 6173 6567 203a 7325 4300     LE Message: %s.C
   be974:	4843 6275 2500 3230 2564 3230 2564 3430     CHub.%02d%02d%04
   be984:	2564 3230 2564 3230 2564 3230 0064 7325     d%02d%02d%02d.%s
   be994:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   be9a4:	6625 252c 0066 654e 2077 4258 6565 4320     %f,%f.New XBee C
   be9b4:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   be9c4:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   be9d4:	6173 6567 203a 7325 4500 746e 7265 6e69     sage: %s.Enterin
   be9e4:	2067 6144 6174 4f20 6666 6f6c 6461 7265     g Data Offloader
   be9f4:	4d20 646f 0065 002f 7245 6f72 2c72 6320      Mode./.Error, c
   bea04:	756f 646c 6e20 746f 6f20 6570 206e 6f72     ould not open ro
   bea14:	746f 5320 2044 6163 6472 6420 7269 6365     ot SD card direc
   bea24:	6f74 7972 5700 6961 6974 676e 6620 726f     tory.Waiting for
   bea34:	4320 4843 6275 6320 6e6f 656e 7463 6f69      CCHub connectio
   bea44:	2e6e 2e2e 5300 6174 7472 6e69 2067 7274     n....Starting tr
   bea54:	6e61 6673 7265 2e2e 002e 6843 6365 696b     ansfer....Checki
   bea64:	676e 6920 2066 6966 656c 2520 2073 7369     ng if file %s is
   bea74:	6120 2e20 7363 2076 726f 2e20 7874 2e74      a .csv or .txt.
   bea84:	2e2e 2e00 7363 0076 6966 656c 6f64 656e     ....csv.filedone
   bea94:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   beaa4:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   beab4:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   beac4:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   bead4:	6164 6174 6600 6c69 6365 6d6f 0070 7325     data.filecomp.%s
   beae4:	3025 7832 4200 746f 6431 7461 4200 6425     %02x.Bot1dat.B%d
   beaf4:	4343 6e73 2573 2e30 6636 2520 2e30 6636     CCsns%0.6f %0.6f
   beb04:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   beb14:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   beb24:	362e 2066 2e25 6636 0020 3142 4343 7470     .6f %.6f .B1CCpt
   beb34:	6273 6769 6f62 0074 6157 6574 4272 746f     sbigbot.WaterBot
   beb44:	5f00 4f4c 2e47 7874 0074 7245 6f72 3a72     ._LOG.txt.Error:
   beb54:	6320 756f 646c 6e20 746f 6320 6e6f 656e      could not conne
   beb64:	7463 7420 206f 4453 6320 7261 2164 5400     ct to SD card!.T
   beb74:	6d69 2c65 614c 6974 7574 6564 4c2c 6e6f     ime,Latitude,Lon
   beb84:	6967 7574 6564 542c 6d65 6570 6172 7574     gitude,Temperatu
   beb94:	6572 702c 2c48 6944 7373 6c6f 6576 2064     re,pH,Dissolved 
   beba4:	324f 432c 6e6f 7564 7463 7669 7469 2079     O2,Conductivity 
   bebb4:	2e30 4b31 432c 6e6f 7564 7463 7669 7469     0.1K,Conductivit
   bebc4:	2079 4b31 5b00 4e49 4f46 205d 6157 6574     y 1K.[INFO] Wate
   bebd4:	4272 746f 2520 3a64 5320 6174 7472 6465     rBot %d: Started
   bebe4:	4c20 676f 6967 676e 0021 7874 7200 0078      Logging!.tx.rx.
   bebf4:	666f 0066                                   off.

000bebf8 <_ZTVN8particle11SPISettingsE>:
	...
   bec00:	4301 000b 40cd 000b 4171 000b               .C...@..qA..

000bec0c <_ZTV5Timer>:
	...
   bec14:	4385 000b 43d9 000b 41d7 000b               .C...C...A..

000bec20 <_ZTVN5spark10LogHandlerE>:
	...
   bec30:	40a5 000b 40cf 000b                         .@...@..

000bec38 <_ZTVN8particle9LEDStatusE>:
	...
   bec40:	423d 000b 4259 000b 40d9 000b               =B..YB...@..

000bec4c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bec54:	426d 000b 42a1 000b a2a9 000b 40d1 000b     mB...B.......@..

000bec64 <_ZTV4File>:
	...
   bec6c:	40f5 000b 417f 000b 4193 000b 418d 000b     .@...A...A...A..
   bec7c:	40db 000b 41b7 000b 41b1 000b 41ab 000b     .@...A...A...A..
   bec8c:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   bec9c:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   becac:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   becbc:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   beccc:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   becdc:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   becec:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   becfc:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   bed0c:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   bed1c:	6232 0030                                   2b0.

000bed20 <CSWTCH.261>:
   bed20:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   bed30:	ffff 00ff ff00 00ff ffff 0000               ............

000bed3c <_ZTVN5spark13EthernetClassE>:
	...
   bed44:	7c8b 000b 7c81 000b 7c77 000b 7c6d 000b     .|...|..w|..m|..
   bed54:	7c61 000b 7c55 000b b2a7 000b b2af 000b     a|..U|..........
   bed64:	7c49 000b 7c41 000b 7c37 000b 7c2d 000b     I|..A|..7|..-|..
   bed74:	b2df 000b                                   ....

000bed78 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bed78:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   bed88:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bed98:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   beda8:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bedb8:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bedc8:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bedd8:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bede8:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bedf8:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bee08:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bee18:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bee28:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bee38:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bee48:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bee58:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bee68:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   bee78:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   bee88:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   bee98:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   beea8:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   beeb8:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   beec8:	6369 002e                                   ic..

000beecc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   beed4:	81f3 000b 8255 000b 8329 000b 827f 000b     ....U...).......
   beee4:	81f5 000b                                   ....

000beee8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   beef0:	81ef 000b 8263 000b 81f1 000b 8285 000b     ....c...........
   bef00:	8215 000b                                   ....

000bef04 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bef0c:	81ed 000b 8271 000b 8ae5 000b 828b 000b     ....q...........
   bef1c:	8235 000b                                   5...

000bef20 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bef2c:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bef3e <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bef3e:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bef4e <_ZN8particle7BleUuid9BASE_UUIDE>:
   bef4e:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bef5e:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   bef6e:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   bef7e:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   bef8e:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   bef9e:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   befae:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   befbe:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000befd0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   befd8:	96f5 000b 971b 000b 96d9 000b b3fb 000b     ................

000befe8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   beff0:	9b51 000b 9b69 000b a2a9 000b 40d1 000b     Q...i........@..

000bf000 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf008:	9b7d 000b 9b91 000b a44d 000b 96e1 000b     }.......M.......

000bf018 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf020:	96f3 000b 9729 000b a20d 000b 96e3 000b     ....)...........

000bf030 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf038:	96f1 000b 9737 000b 9ab9 000b 9759 000b     ....7.......Y...
   bf048:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   bf058:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000bf064 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf06c:	a8b9 000b a8bf 000b a8fd 000b a8cd 000b     ................
   bf07c:	a8bb 000b                                   ....

000bf080 <_ZTV9IPAddress>:
	...
   bf088:	adf9 000b ade9 000b adeb 000b               ............

000bf094 <_ZTV9USBSerial>:
	...
   bf09c:	aedf 000b af47 000b af1d 000b 9549 000b     ....G.......I...
   bf0ac:	af0f 000b aee1 000b aef1 000b af41 000b     ............A...
   bf0bc:	af01 000b aed9 000b                         ........

000bf0c4 <_ZTVN5spark13CellularClassE>:
	...
   bf0cc:	b04f 000b b045 000b b03b 000b aff1 000b     O...E...;.......
   bf0dc:	b02f 000b b023 000b b2a7 000b b2af 000b     /...#...........
   bf0ec:	b017 000b b00f 000b b005 000b affb 000b     ................
   bf0fc:	b2df 000b                                   ....

000bf100 <_ZTV11USARTSerial>:
	...
   bf108:	b089 000b b0f5 000b b0cd 000b 9549 000b     ............I...
   bf118:	b09d 000b b0b9 000b b0ab 000b b0c7 000b     ................
   bf128:	b08b 000b b08f 000b                         ........

000bf130 <_ZTV7TwoWire>:
	...
   bf138:	b169 000b b1b3 000b b18b 000b b16b 000b     i...........k...
   bf148:	b193 000b b19b 000b b1a3 000b b1ab 000b     ................

000bf158 <_ZTVN5spark12NetworkClassE>:
	...
   bf160:	b267 000b b271 000b b27b 000b b285 000b     g...q...{.......
   bf170:	b28f 000b b29b 000b b2a7 000b b2af 000b     ................
   bf180:	b2b7 000b b2c3 000b b2cb 000b b2d5 000b     ................
   bf190:	b2df 000b 7525 7500 3025 7834                ....%u.u%04x.

000bf19d <_ZSt7nothrow>:
	...

000bf19e <_ZTSSt19_Sp_make_shared_tag>:
   bf19e:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bf1ae:	6572 5f64 6174 0067 0000                    red_tag...

000bf1b8 <_ZTISt19_Sp_make_shared_tag>:
   bf1b8:	f1f8 000b f19e 000b                         ........

000bf1c0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf1c0:	f258 000b f1cc 000b f27c 000b               X.......|...

000bf1cc <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf1cc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bf1dc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bf1ec:	0045 0000                                   E...

000bf1f0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf1f0:	0000 0000 f1c0 000b b9a1 000b b9b5 000b     ................
   bf200:	bb49 000b bb49 000b ba1f 000b b961 000b     I...I.......a...
   bf210:	ba07 000b b9c9 000b b993 000b               ............

000bf21c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf21c:	f258 000b f228 000b f1c0 000b               X...(.......

000bf228 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf228:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bf238:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bf248:	666e 456f 0000 0000                         nfoE....

000bf250 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf250:	0000 0000 f21c 000b ba49 000b ba5d 000b     ........I...]...
   bf260:	bb49 000b bb49 000b ba1f 000b b961 000b     I...I.......a...
   bf270:	bb1d 000b baa9 000b ba71 000b               ........q...

000bf27c <_ZTISt9type_info>:
   bf27c:	f1f8 000b f284 000b                         ........

000bf284 <_ZTSSt9type_info>:
   bf284:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bf294:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bf2a4:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bf2b4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bf2c4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bf2d4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bf2e4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bf2f4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bf304:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bf314:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bf324:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bf334 <fpi.1>:
   bf334:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bf344:	0000 0000                                   ....

000bf348 <fpinan.0>:
   bf348:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bf360 <tinytens>:
   bf360:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bf370:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bf380:	6f43 64ac 0628 1168                         Co.d(.h.

000bf388 <_ctype_>:
   bf388:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf398:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf3a8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf3b8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf3c8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf3d8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf3e8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf3f8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf408:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bf488:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bf498:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bf4a8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bf4b8:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bf4c8:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bf4d8:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bf4e8:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bf4f8:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bf508:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bf518:	6874 7865 632e 0000                         thex.c..

000bf520 <_C_numeric_locale>:
   bf520:	ea47 000b efb8 000b dca0 2003 0043 4f50     G.......... C.PO
   bf530:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bf540:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bf550:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bf560:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bf570:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bf580:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bf590:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bf5a0:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bf5b0:	0063 0000 0000 0000                         c.......

000bf5b8 <__mprec_bigtens>:
   bf5b8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bf5c8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bf5d8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bf5e0 <__mprec_tens>:
   bf5e0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bf5f0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bf600:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bf610:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bf620:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bf630:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bf640:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bf650:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bf660:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bf670:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bf680:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bf690:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bf6a0:	9db4 79d9 7843 44ea                         ...yCx.D

000bf6a8 <p05.0>:
   bf6a8:	0005 0000 0019 0000 007d 0000               ........}...

000bf6b4 <link_const_variable_data_end>:
   bf6b4:	000b58ad 	.word	0x000b58ad
   bf6b8:	000b7c95 	.word	0x000b7c95
   bf6bc:	000b8005 	.word	0x000b8005
   bf6c0:	000b9539 	.word	0x000b9539
   bf6c4:	000ba299 	.word	0x000ba299
   bf6c8:	000ba741 	.word	0x000ba741
   bf6cc:	000ba775 	.word	0x000ba775
   bf6d0:	000bb059 	.word	0x000bb059
   bf6d4:	000bb3b9 	.word	0x000bb3b9

000bf6d8 <link_constructors_end>:
	...
