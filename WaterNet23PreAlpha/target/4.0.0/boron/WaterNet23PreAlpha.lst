
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/boron/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b6e0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf700  000bf700  0000f700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf724  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  2003dc0c  000bf728  0002dc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009f0  2003de00  2003de00  0003de00  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bf91c  000bf91c  0002f91c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf944  000bf944  0002f944  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bf653  00000000  00000000  0002f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001e274  00000000  00000000  001eef9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004c6e8  00000000  00000000  0020d20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000039b8  00000000  00000000  002598f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d088  00000000  00000000  0025d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004aadd  00000000  00000000  0026a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00065148  00000000  00000000  002b4e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014519a  00000000  00000000  00319f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b0a4  00000000  00000000  0045f0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 fac1 	bl	bc5b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 fae3 	bl	bc608 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dc0c 	.word	0x2003dc0c
   b404c:	000bf728 	.word	0x000bf728
   b4050:	2003de00 	.word	0x2003de00
   b4054:	2003de00 	.word	0x2003de00
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fc0d 	bl	ba880 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf6dc 	.word	0x000bf6dc
   b4080:	000bf700 	.word	0x000bf700

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b9fa 	b.w	b547c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f97f 	bl	b538c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bbad 	b.w	ba7f0 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bd7f 	b.w	b7b98 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bd7d 	b.w	b7b98 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bd83 	b.w	b7ba8 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 fc6e 	bl	b798c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b74a9 	.word	0x000b74a9
   b40b8:	000be740 	.word	0x000be740

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ce:	4770      	bx	lr

000b40d0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d0:	6a00      	ldr	r0, [r0, #32]
   b40d2:	6803      	ldr	r3, [r0, #0]
   b40d4:	68db      	ldr	r3, [r3, #12]
   b40d6:	4718      	bx	r3

000b40d8 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40d8:	4770      	bx	lr

000b40da <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40da:	7c03      	ldrb	r3, [r0, #16]
   b40dc:	f013 0308 	ands.w	r3, r3, #8
   b40e0:	bf1e      	ittt	ne
   b40e2:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e4:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40e6:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40e8:	2b00      	cmp	r3, #0
  }
   b40ea:	bfac      	ite	ge
   b40ec:	4618      	movge	r0, r3
   b40ee:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f2:	4770      	bx	lr

000b40f4 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40f4:	4770      	bx	lr
	...

000b40f8 <_Z13StatusHandlerv>:
    if(sendXBee || sendMode == 2){
        Serial1.println(outStr);
    }
}

void StatusHandler(){
   b40f8:	b508      	push	{r3, lr}
    statusFlags = 0;
    statusFlags = LTEAvail;
    statusFlags |= XBeeAvail << 1;
   b40fa:	4b13      	ldr	r3, [pc, #76]	; (b4148 <_Z13StatusHandlerv+0x50>)
   b40fc:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;
   b40fe:	4b13      	ldr	r3, [pc, #76]	; (b414c <_Z13StatusHandlerv+0x54>)
   b4100:	781b      	ldrb	r3, [r3, #0]
   b4102:	009b      	lsls	r3, r3, #2
   b4104:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    statusFlags = LTEAvail;
   b4108:	4a11      	ldr	r2, [pc, #68]	; (b4150 <_Z13StatusHandlerv+0x58>)
    statusFlags |= BLEAvail << 2;
   b410a:	7812      	ldrb	r2, [r2, #0]
   b410c:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;
   b410e:	4a11      	ldr	r2, [pc, #68]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b4110:	7812      	ldrb	r2, [r2, #0]
   b4112:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= manualRC << 4;
   b4116:	4a10      	ldr	r2, [pc, #64]	; (b4158 <_Z13StatusHandlerv+0x60>)
   b4118:	7812      	ldrb	r2, [r2, #0]
   b411a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 5;
   b411e:	4a0f      	ldr	r2, [pc, #60]	; (b415c <_Z13StatusHandlerv+0x64>)
   b4120:	7812      	ldrb	r2, [r2, #0]
   b4122:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    statusFlags |= logSensors << 6;
   b4126:	4a0e      	ldr	r2, [pc, #56]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4128:	7812      	ldrb	r2, [r2, #0]
   b412a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   b412e:	4a0d      	ldr	r2, [pc, #52]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b4130:	7013      	strb	r3, [r2, #0]
    statusReady = true;
   b4132:	4b0d      	ldr	r3, [pc, #52]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4134:	2201      	movs	r2, #1
   b4136:	701a      	strb	r2, [r3, #0]
    Serial.println("Sending a status update!");
   b4138:	f006 ff46 	bl	bafc8 <_Z16_fetch_usbserialv>
}
   b413c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Sending a status update!");
   b4140:	490a      	ldr	r1, [pc, #40]	; (b416c <_Z13StatusHandlerv+0x74>)
   b4142:	f005 ba40 	b.w	b95c6 <_ZN5Print7printlnEPKc>
   b4146:	bf00      	nop
   b4148:	2003de58 	.word	0x2003de58
   b414c:	2003de18 	.word	0x2003de18
   b4150:	2003de48 	.word	0x2003de48
   b4154:	2003e0e8 	.word	0x2003e0e8
   b4158:	2003df79 	.word	0x2003df79
   b415c:	2003df78 	.word	0x2003df78
   b4160:	2003df6d 	.word	0x2003df6d
   b4164:	2003e5b0 	.word	0x2003e5b0
   b4168:	2003e5d0 	.word	0x2003e5d0
   b416c:	000be755 	.word	0x000be755

000b4170 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4170:	b510      	push	{r4, lr}
  }
   b4172:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4174:	4604      	mov	r4, r0
  }
   b4176:	f7ff ff92 	bl	b409e <_ZdlPvj>
   b417a:	4620      	mov	r0, r4
   b417c:	bd10      	pop	{r4, pc}

000b417e <_ZN4FileD0Ev>:
   b417e:	b510      	push	{r4, lr}
   b4180:	2134      	movs	r1, #52	; 0x34
   b4182:	4604      	mov	r4, r0
   b4184:	f7ff ff8b 	bl	b409e <_ZdlPvj>
   b4188:	4620      	mov	r0, r4
   b418a:	bd10      	pop	{r4, pc}

000b418c <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b418c:	3010      	adds	r0, #16
   b418e:	f002 bbb9 	b.w	b6904 <_ZN7FatFile5writeEPKvj>

000b4192 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4192:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4194:	2201      	movs	r2, #1
   b4196:	f88d 1007 	strb.w	r1, [sp, #7]
   b419a:	3010      	adds	r0, #16
   b419c:	f10d 0107 	add.w	r1, sp, #7
   b41a0:	f002 fbb0 	bl	b6904 <_ZN7FatFile5writeEPKvj>
  }
   b41a4:	b003      	add	sp, #12
   b41a6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41aa <_ZN4File5flushEv>:
    FatFile::sync();
   b41aa:	3010      	adds	r0, #16
   b41ac:	f002 bb20 	b.w	b67f0 <_ZN7FatFile4syncEv>

000b41b0 <_ZN4File4peekEv>:
    return FatFile::peek();
   b41b0:	3010      	adds	r0, #16
   b41b2:	f002 ba01 	b.w	b65b8 <_ZN7FatFile4peekEv>

000b41b6 <_ZN4File4readEv>:
  int read() {
   b41b6:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b41b8:	2201      	movs	r2, #1
   b41ba:	f10d 0107 	add.w	r1, sp, #7
   b41be:	3010      	adds	r0, #16
   b41c0:	f002 f94c 	bl	b645c <_ZN7FatFile4readEPvj>
   b41c4:	2801      	cmp	r0, #1
   b41c6:	bf0c      	ite	eq
   b41c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41cc:	f04f 30ff 	movne.w	r0, #4294967295
  }
   b41d0:	b003      	add	sp, #12
   b41d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b41d6 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41d6:	6943      	ldr	r3, [r0, #20]
   b41d8:	b113      	cbz	r3, b41e0 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41da:	6983      	ldr	r3, [r0, #24]
   b41dc:	300c      	adds	r0, #12
   b41de:	4718      	bx	r3
            callback();
        }
    }
   b41e0:	4770      	bx	lr

000b41e2 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41e2:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41e4:	2100      	movs	r1, #0
   b41e6:	4604      	mov	r4, r0
   b41e8:	4608      	mov	r0, r1
   b41ea:	f003 fa0f 	bl	b760c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41ee:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41f0:	4620      	mov	r0, r4
   b41f2:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41f4:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41f6:	f003 fa21 	bl	b763c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41fa:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41fc:	b10c      	cbz	r4, b4202 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41fe:	2301      	movs	r3, #1
   b4200:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4202:	2100      	movs	r1, #0
   b4204:	2001      	movs	r0, #1
   b4206:	f003 fa01 	bl	b760c <os_thread_scheduling>
            }
        }
        if (t) {
   b420a:	b12c      	cbz	r4, b4218 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b420c:	6823      	ldr	r3, [r4, #0]
   b420e:	4620      	mov	r0, r4
   b4210:	689b      	ldr	r3, [r3, #8]
   b4212:	4798      	blx	r3
            t->running = false;
   b4214:	2300      	movs	r3, #0
   b4216:	7123      	strb	r3, [r4, #4]
        }
    }
   b4218:	b002      	add	sp, #8
   b421a:	bd10      	pop	{r4, pc}

000b421c <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b421c:	2a01      	cmp	r2, #1
   b421e:	d102      	bne.n	b4226 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4220:	6001      	str	r1, [r0, #0]
      }
   b4222:	2000      	movs	r0, #0
   b4224:	4770      	bx	lr
	  switch (__op)
   b4226:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4228:	bf04      	itt	eq
   b422a:	680b      	ldreq	r3, [r1, #0]
   b422c:	6003      	streq	r3, [r0, #0]
	      break;
   b422e:	e7f8      	b.n	b4222 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4230 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4230:	6803      	ldr	r3, [r0, #0]
   b4232:	4718      	bx	r3

000b4234 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4234:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4236:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4238:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b423a:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b423c:	b130      	cbz	r0, b424c <_ZN5Timer5startEj.isra.0+0x18>
   b423e:	2300      	movs	r3, #0
   b4240:	e9cd 3300 	strd	r3, r3, [sp]
   b4244:	461a      	mov	r2, r3
   b4246:	2102      	movs	r1, #2
   b4248:	f003 fa00 	bl	b764c <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b424c:	68a0      	ldr	r0, [r4, #8]
   b424e:	b130      	cbz	r0, b425e <_ZN5Timer5startEj.isra.0+0x2a>
   b4250:	2300      	movs	r3, #0
   b4252:	e9cd 5300 	strd	r5, r3, [sp]
   b4256:	461a      	mov	r2, r3
   b4258:	4619      	mov	r1, r3
   b425a:	f003 f9f7 	bl	b764c <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b425e:	b003      	add	sp, #12
   b4260:	bd30      	pop	{r4, r5, pc}

000b4262 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4262:	6803      	ldr	r3, [r0, #0]
   b4264:	b2c9      	uxtb	r1, r1
   b4266:	689b      	ldr	r3, [r3, #8]
   b4268:	4718      	bx	r3
	...

000b426c <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b426c:	b510      	push	{r4, lr}
   b426e:	4b05      	ldr	r3, [pc, #20]	; (b4284 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4270:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4272:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4274:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4276:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b427a:	f003 fba7 	bl	b79cc <led_set_status_active>
}
   b427e:	4620      	mov	r0, r4
   b4280:	bd10      	pop	{r4, pc}
   b4282:	bf00      	nop
   b4284:	000bec68 	.word	0x000bec68

000b4288 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4288:	b510      	push	{r4, lr}
   b428a:	4604      	mov	r4, r0
}
   b428c:	f7ff ffee 	bl	b426c <_ZN8particle9LEDStatusD1Ev>
   b4290:	4620      	mov	r0, r4
   b4292:	2120      	movs	r1, #32
   b4294:	f7ff ff03 	bl	b409e <_ZdlPvj>
   b4298:	4620      	mov	r0, r4
   b429a:	bd10      	pop	{r4, pc}

000b429c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b429c:	4b0a      	ldr	r3, [pc, #40]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429e:	b510      	push	{r4, lr}
   b42a0:	4604      	mov	r4, r0
   b42a2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a4:	f005 fb8a 	bl	b99bc <_ZN5spark10LogManager8instanceEv>
   b42a8:	4621      	mov	r1, r4
   b42aa:	f005 fdc2 	bl	b9e32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42ae:	f006 fe8b 	bl	bafc8 <_Z16_fetch_usbserialv>
   b42b2:	f006 fe7d 	bl	bafb0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b6:	4620      	mov	r0, r4
   b42b8:	4b04      	ldr	r3, [pc, #16]	; (b42cc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42ba:	f840 3b04 	str.w	r3, [r0], #4
   b42be:	f005 fc53 	bl	b9b68 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42c2:	4620      	mov	r0, r4
   b42c4:	bd10      	pop	{r4, pc}
   b42c6:	bf00      	nop
   b42c8:	000bec7c 	.word	0x000bec7c
   b42cc:	000bec50 	.word	0x000bec50

000b42d0 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42d0:	b510      	push	{r4, lr}
   b42d2:	4604      	mov	r4, r0
    }
   b42d4:	f7ff ffe2 	bl	b429c <_ZN5spark16SerialLogHandlerD1Ev>
   b42d8:	4620      	mov	r0, r4
   b42da:	2124      	movs	r1, #36	; 0x24
   b42dc:	f7ff fedf 	bl	b409e <_ZdlPvj>
   b42e0:	4620      	mov	r0, r4
   b42e2:	bd10      	pop	{r4, pc}

000b42e4 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e4:	b40e      	push	{r1, r2, r3}
   b42e6:	b503      	push	{r0, r1, lr}
   b42e8:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b42ea:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ec:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42f0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42f2:	f005 f990 	bl	b9616 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b42f6:	b002      	add	sp, #8
   b42f8:	f85d eb04 	ldr.w	lr, [sp], #4
   b42fc:	b003      	add	sp, #12
   b42fe:	4770      	bx	lr

000b4300 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4302:	4604      	mov	r4, r0
   b4304:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4306:	7922      	ldrb	r2, [r4, #4]
   b4308:	68a3      	ldr	r3, [r4, #8]
   b430a:	b132      	cbz	r2, b431a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b430c:	b9a3      	cbnz	r3, b4338 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b430e:	490b      	ldr	r1, [pc, #44]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4310:	b002      	add	sp, #8
   b4312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4316:	f005 b943 	b.w	b95a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b431a:	4a09      	ldr	r2, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b431c:	7b26      	ldrb	r6, [r4, #12]
   b431e:	4d09      	ldr	r5, [pc, #36]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4320:	4909      	ldr	r1, [pc, #36]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4322:	7b64      	ldrb	r4, [r4, #13]
   b4324:	2e01      	cmp	r6, #1
   b4326:	bf18      	it	ne
   b4328:	4629      	movne	r1, r5
   b432a:	e9cd 1400 	strd	r1, r4, [sp]
   b432e:	4907      	ldr	r1, [pc, #28]	; (b434c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4330:	f7ff ffd8 	bl	b42e4 <_ZN5Print6printfEPKcz>
  }
   b4334:	b002      	add	sp, #8
   b4336:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4338:	4a05      	ldr	r2, [pc, #20]	; (b4350 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b433a:	e7ef      	b.n	b431c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b433c:	000be77f 	.word	0x000be77f
   b4340:	000befe0 	.word	0x000befe0
   b4344:	000be77b 	.word	0x000be77b
   b4348:	000be777 	.word	0x000be777
   b434c:	000be795 	.word	0x000be795
   b4350:	000be76e 	.word	0x000be76e

000b4354 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	b40e      	push	{r1, r2, r3}
   b4356:	b503      	push	{r0, r1, lr}
   b4358:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b435a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b435c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4360:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4362:	f005 f958 	bl	b9616 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4366:	b002      	add	sp, #8
   b4368:	f85d eb04 	ldr.w	lr, [sp], #4
   b436c:	b003      	add	sp, #12
   b436e:	4770      	bx	lr

000b4370 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4370:	b510      	push	{r4, lr}
      if (_M_manager)
   b4372:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4374:	4604      	mov	r4, r0
      if (_M_manager)
   b4376:	b113      	cbz	r3, b437e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4378:	2203      	movs	r2, #3
   b437a:	4601      	mov	r1, r0
   b437c:	4798      	blx	r3
    }
   b437e:	4620      	mov	r0, r4
   b4380:	bd10      	pop	{r4, pc}
	...

000b4384 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4384:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4386:	4b13      	ldr	r3, [pc, #76]	; (b43d4 <_ZN5TimerD1Ev+0x50>)
   b4388:	6003      	str	r3, [r0, #0]
   b438a:	4604      	mov	r4, r0
        if (handle) {
   b438c:	6880      	ldr	r0, [r0, #8]
   b438e:	b1c8      	cbz	r0, b43c4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4390:	2500      	movs	r5, #0
   b4392:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4396:	e9cd 3500 	strd	r3, r5, [sp]
   b439a:	2102      	movs	r1, #2
   b439c:	462b      	mov	r3, r5
   b439e:	462a      	mov	r2, r5
   b43a0:	f003 f954 	bl	b764c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b43a4:	68a0      	ldr	r0, [r4, #8]
   b43a6:	4629      	mov	r1, r5
   b43a8:	f003 f978 	bl	b769c <os_timer_set_id>
            while (running) {
   b43ac:	7923      	ldrb	r3, [r4, #4]
   b43ae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b43b2:	b113      	cbz	r3, b43ba <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b43b4:	f003 f922 	bl	b75fc <os_thread_yield>
            while (running) {
   b43b8:	e7f8      	b.n	b43ac <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b43ba:	68a0      	ldr	r0, [r4, #8]
   b43bc:	4629      	mov	r1, r5
   b43be:	f003 f935 	bl	b762c <os_timer_destroy>
            handle = nullptr;
   b43c2:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b43c4:	f104 000c 	add.w	r0, r4, #12
   b43c8:	f7ff ffd2 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    }
   b43cc:	4620      	mov	r0, r4
   b43ce:	b003      	add	sp, #12
   b43d0:	bd30      	pop	{r4, r5, pc}
   b43d2:	bf00      	nop
   b43d4:	000bec3c 	.word	0x000bec3c

000b43d8 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b43d8:	b510      	push	{r4, lr}
   b43da:	4604      	mov	r4, r0
    }
   b43dc:	f7ff ffd2 	bl	b4384 <_ZN5TimerD1Ev>
   b43e0:	4620      	mov	r0, r4
   b43e2:	211c      	movs	r1, #28
   b43e4:	f7ff fe5b 	bl	b409e <_ZdlPvj>
   b43e8:	4620      	mov	r0, r4
   b43ea:	bd10      	pop	{r4, pc}

000b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b43ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43ee:	468c      	mov	ip, r1
   b43f0:	2500      	movs	r5, #0
   b43f2:	4914      	ldr	r1, [pc, #80]	; (b4444 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b43f4:	7105      	strb	r5, [r0, #4]
   b43f6:	4604      	mov	r4, r0
   b43f8:	6085      	str	r5, [r0, #8]
   b43fa:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b43fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4400:	b085      	sub	sp, #20
   b4402:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4404:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4408:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b440c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4410:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4414:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4418:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b441c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b441e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4420:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4422:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4424:	6095      	str	r5, [r2, #8]
   b4426:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4428:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b442a:	e9cd 3500 	strd	r3, r5, [sp]
   b442e:	4a06      	ldr	r2, [pc, #24]	; (b4448 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4430:	4623      	mov	r3, r4
   b4432:	4661      	mov	r1, ip
   b4434:	f104 0008 	add.w	r0, r4, #8
   b4438:	f003 f8f0 	bl	b761c <os_timer_create>
    }
   b443c:	4620      	mov	r0, r4
   b443e:	b005      	add	sp, #20
   b4440:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4442:	bf00      	nop
   b4444:	000bec3c 	.word	0x000bec3c
   b4448:	000b41e3 	.word	0x000b41e3

000b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b444c:	b510      	push	{r4, lr}
   b444e:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b4450:	2200      	movs	r2, #0
   b4452:	7c40      	ldrb	r0, [r0, #17]
   b4454:	f003 faf4 	bl	b7a40 <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b4458:	7c63      	ldrb	r3, [r4, #17]
   b445a:	2b0f      	cmp	r3, #15
        d_.period = period;
   b445c:	bf18      	it	ne
   b445e:	8320      	strhne	r0, [r4, #24]
}
   b4460:	bd10      	pop	{r4, pc}
	...

000b4464 <_Z10LEDHandlerv>:
    offloadCharacteristic.setValue(fileCode);
    //BLE.disconnect();
    offloadMode = false;
}

void LEDHandler(){
   b4464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    if(offloadMode){
   b4466:	4b24      	ldr	r3, [pc, #144]	; (b44f8 <_Z10LEDHandlerv+0x94>)
   b4468:	4d24      	ldr	r5, [pc, #144]	; (b44fc <_Z10LEDHandlerv+0x98>)
   b446a:	781b      	ldrb	r3, [r3, #0]
   b446c:	b15b      	cbz	r3, b4486 <_Z10LEDHandlerv+0x22>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b446e:	7c6b      	ldrb	r3, [r5, #17]
   b4470:	2b0f      	cmp	r3, #15
        d_.pattern = pattern;
   b4472:	bf1c      	itt	ne
   b4474:	2302      	movne	r3, #2
   b4476:	746b      	strbne	r3, [r5, #17]
    d_.color = color;
   b4478:	23ff      	movs	r3, #255	; 0xff
   b447a:	616b      	str	r3, [r5, #20]
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_BLUE);
        status.setSpeed(LED_SPEED_FAST);
   b447c:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b447e:	481f      	ldr	r0, [pc, #124]	; (b44fc <_Z10LEDHandlerv+0x98>)
   b4480:	f7ff ffe4 	bl	b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(lowBattery){
   b4486:	4b1e      	ldr	r3, [pc, #120]	; (b4500 <_Z10LEDHandlerv+0x9c>)
   b4488:	781b      	ldrb	r3, [r3, #0]
   b448a:	2b00      	cmp	r3, #0
   b448c:	d12d      	bne.n	b44ea <_Z10LEDHandlerv+0x86>
    else if(logSensors){
   b448e:	4b1d      	ldr	r3, [pc, #116]	; (b4504 <_Z10LEDHandlerv+0xa0>)
   b4490:	781b      	ldrb	r3, [r3, #0]
   b4492:	2b00      	cmp	r3, #0
   b4494:	d12c      	bne.n	b44f0 <_Z10LEDHandlerv+0x8c>
    else if(manualRC){
   b4496:	4b1c      	ldr	r3, [pc, #112]	; (b4508 <_Z10LEDHandlerv+0xa4>)
   b4498:	781b      	ldrb	r3, [r3, #0]
        SetSpeed = LED_SPEED_NORMAL;
   b449a:	2b00      	cmp	r3, #0
   b449c:	bf15      	itete	ne
   b449e:	260a      	movne	r6, #10
   b44a0:	2614      	moveq	r6, #20
   b44a2:	2702      	movne	r7, #2
   b44a4:	2703      	moveq	r7, #3
    statusMode |= XBeeAvail << 1;
   b44a6:	4b19      	ldr	r3, [pc, #100]	; (b450c <_Z10LEDHandlerv+0xa8>)
   b44a8:	781a      	ldrb	r2, [r3, #0]
    statusMode |= BLEAvail << 2;
   b44aa:	4b19      	ldr	r3, [pc, #100]	; (b4510 <_Z10LEDHandlerv+0xac>)
   b44ac:	781c      	ldrb	r4, [r3, #0]
    statusMode = LTEAvail;
   b44ae:	4b19      	ldr	r3, [pc, #100]	; (b4514 <_Z10LEDHandlerv+0xb0>)
    statusMode |= BLEAvail << 2;
   b44b0:	00a4      	lsls	r4, r4, #2
   b44b2:	ea44 0442 	orr.w	r4, r4, r2, lsl #1
   b44b6:	781a      	ldrb	r2, [r3, #0]
   b44b8:	4314      	orrs	r4, r2
   b44ba:	b264      	sxtb	r4, r4
    Serial.printlnf("Status: %d",statusMode);
   b44bc:	f006 fd84 	bl	bafc8 <_Z16_fetch_usbserialv>
   b44c0:	4622      	mov	r2, r4
   b44c2:	3c01      	subs	r4, #1
   b44c4:	4914      	ldr	r1, [pc, #80]	; (b4518 <_Z10LEDHandlerv+0xb4>)
   b44c6:	b2e4      	uxtb	r4, r4
   b44c8:	f7ff ff44 	bl	b4354 <_ZN5Print8printlnfEPKcz>
    switch (statusMode){
   b44cc:	2c06      	cmp	r4, #6
   b44ce:	bf98      	it	ls
   b44d0:	4b12      	ldrls	r3, [pc, #72]	; (b451c <_Z10LEDHandlerv+0xb8>)
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b44d2:	7c6a      	ldrb	r2, [r5, #17]
   b44d4:	bf94      	ite	ls
   b44d6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   b44da:	f44f 037f 	movhi.w	r3, #16711680	; 0xff0000
   b44de:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b44e0:	bf18      	it	ne
   b44e2:	746f      	strbne	r7, [r5, #17]
    status.setSpeed(SetSpeed);    
   b44e4:	4631      	mov	r1, r6
    d_.color = color;
   b44e6:	616b      	str	r3, [r5, #20]
   b44e8:	e7c9      	b.n	b447e <_Z10LEDHandlerv+0x1a>
        SetSpeed = LED_SPEED_NORMAL;
   b44ea:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_BLINK;
   b44ec:	2702      	movs	r7, #2
   b44ee:	e7da      	b.n	b44a6 <_Z10LEDHandlerv+0x42>
        SetSpeed = LED_SPEED_NORMAL;
   b44f0:	2614      	movs	r6, #20
        SetPattern = LED_PATTERN_SOLID;
   b44f2:	2701      	movs	r7, #1
   b44f4:	e7d7      	b.n	b44a6 <_Z10LEDHandlerv+0x42>
   b44f6:	bf00      	nop
   b44f8:	2003e0e8 	.word	0x2003e0e8
   b44fc:	2003e590 	.word	0x2003e590
   b4500:	2003df78 	.word	0x2003df78
   b4504:	2003df6d 	.word	0x2003df6d
   b4508:	2003df79 	.word	0x2003df79
   b450c:	2003de58 	.word	0x2003de58
   b4510:	2003de18 	.word	0x2003de18
   b4514:	2003de48 	.word	0x2003de48
   b4518:	000be7b2 	.word	0x000be7b2
   b451c:	000bed48 	.word	0x000bed48

000b4520 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4520:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b4522:	460a      	mov	r2, r1
   b4524:	4901      	ldr	r1, [pc, #4]	; (b452c <_ZN7FatFile4openEPKci+0xc>)
   b4526:	6809      	ldr	r1, [r1, #0]
   b4528:	f002 b99f 	b.w	b686a <_ZN7FatFile4openEPS_PKci>
   b452c:	2003e610 	.word	0x2003e610

000b4530 <_Z11wdogHandlerv>:
void wdogHandler(){
   b4530:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4532:	f003 fb09 	bl	b7b48 <spark_cloud_flag_connected>
   b4536:	4c2b      	ldr	r4, [pc, #172]	; (b45e4 <_Z11wdogHandlerv+0xb4>)
    if(Particle.connected()) LTEAvail = true;
   b4538:	b1e0      	cbz	r0, b4574 <_Z11wdogHandlerv+0x44>
   b453a:	2301      	movs	r3, #1
        LTEAvail = false;
   b453c:	7023      	strb	r3, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b453e:	f002 ffc3 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){
   b4542:	4b29      	ldr	r3, [pc, #164]	; (b45e8 <_Z11wdogHandlerv+0xb8>)
   b4544:	4c29      	ldr	r4, [pc, #164]	; (b45ec <_Z11wdogHandlerv+0xbc>)
   b4546:	681b      	ldr	r3, [r3, #0]
   b4548:	f247 5230 	movw	r2, #30000	; 0x7530
   b454c:	1ac0      	subs	r0, r0, r3
   b454e:	4290      	cmp	r0, r2
   b4550:	d823      	bhi.n	b459a <_Z11wdogHandlerv+0x6a>
   b4552:	b313      	cbz	r3, b459a <_Z11wdogHandlerv+0x6a>
    else XBeeAvail = true;
   b4554:	2301      	movs	r3, #1
        XBeeAvail = false;
   b4556:	7023      	strb	r3, [r4, #0]
   b4558:	f002 ffb6 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){
   b455c:	4b24      	ldr	r3, [pc, #144]	; (b45f0 <_Z11wdogHandlerv+0xc0>)
   b455e:	4c25      	ldr	r4, [pc, #148]	; (b45f4 <_Z11wdogHandlerv+0xc4>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	f247 5230 	movw	r2, #30000	; 0x7530
   b4566:	1ac0      	subs	r0, r0, r3
   b4568:	4290      	cmp	r0, r2
   b456a:	d828      	bhi.n	b45be <_Z11wdogHandlerv+0x8e>
   b456c:	b33b      	cbz	r3, b45be <_Z11wdogHandlerv+0x8e>
    else BLEAvail = true;
   b456e:	2301      	movs	r3, #1
        BLEAvail = false;
   b4570:	7023      	strb	r3, [r4, #0]
}
   b4572:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b4574:	7823      	ldrb	r3, [r4, #0]
   b4576:	2b00      	cmp	r3, #0
   b4578:	d0e1      	beq.n	b453e <_Z11wdogHandlerv+0xe>
    return m_attr;
   b457a:	481f      	ldr	r0, [pc, #124]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b457c:	7c03      	ldrb	r3, [r0, #16]
   b457e:	b92b      	cbnz	r3, b458c <_Z11wdogHandlerv+0x5c>
   b4580:	491e      	ldr	r1, [pc, #120]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b4582:	f244 2202 	movw	r2, #16898	; 0x4202
   b4586:	3010      	adds	r0, #16
   b4588:	f7ff ffca 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b458c:	491c      	ldr	r1, [pc, #112]	; (b4600 <_Z11wdogHandlerv+0xd0>)
   b458e:	481a      	ldr	r0, [pc, #104]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b4590:	221e      	movs	r2, #30
   b4592:	f7ff fedf 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4596:	2300      	movs	r3, #0
   b4598:	e7d0      	b.n	b453c <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b459a:	7823      	ldrb	r3, [r4, #0]
   b459c:	b16b      	cbz	r3, b45ba <_Z11wdogHandlerv+0x8a>
   b459e:	4816      	ldr	r0, [pc, #88]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45a0:	7c03      	ldrb	r3, [r0, #16]
   b45a2:	b92b      	cbnz	r3, b45b0 <_Z11wdogHandlerv+0x80>
   b45a4:	4915      	ldr	r1, [pc, #84]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b45a6:	f244 2202 	movw	r2, #16898	; 0x4202
   b45aa:	3010      	adds	r0, #16
   b45ac:	f7ff ffb8 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b45b0:	4913      	ldr	r1, [pc, #76]	; (b4600 <_Z11wdogHandlerv+0xd0>)
   b45b2:	4811      	ldr	r0, [pc, #68]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b45b4:	221e      	movs	r2, #30
   b45b6:	f7ff fecd 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b45ba:	2300      	movs	r3, #0
   b45bc:	e7cb      	b.n	b4556 <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b45be:	7822      	ldrb	r2, [r4, #0]
   b45c0:	b172      	cbz	r2, b45e0 <_Z11wdogHandlerv+0xb0>
   b45c2:	b16b      	cbz	r3, b45e0 <_Z11wdogHandlerv+0xb0>
   b45c4:	480c      	ldr	r0, [pc, #48]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b45c6:	7c03      	ldrb	r3, [r0, #16]
   b45c8:	b92b      	cbnz	r3, b45d6 <_Z11wdogHandlerv+0xa6>
   b45ca:	490c      	ldr	r1, [pc, #48]	; (b45fc <_Z11wdogHandlerv+0xcc>)
   b45cc:	f244 2202 	movw	r2, #16898	; 0x4202
   b45d0:	3010      	adds	r0, #16
   b45d2:	f7ff ffa5 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b45d6:	490b      	ldr	r1, [pc, #44]	; (b4604 <_Z11wdogHandlerv+0xd4>)
   b45d8:	4807      	ldr	r0, [pc, #28]	; (b45f8 <_Z11wdogHandlerv+0xc8>)
   b45da:	221e      	movs	r2, #30
   b45dc:	f7ff feba 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b45e0:	2300      	movs	r3, #0
   b45e2:	e7c5      	b.n	b4570 <_Z11wdogHandlerv+0x40>
   b45e4:	2003de48 	.word	0x2003de48
   b45e8:	2003de5c 	.word	0x2003de5c
   b45ec:	2003de58 	.word	0x2003de58
   b45f0:	2003de24 	.word	0x2003de24
   b45f4:	2003de18 	.word	0x2003de18
   b45f8:	2003df14 	.word	0x2003df14
   b45fc:	2003de97 	.word	0x2003de97
   b4600:	000be7bd 	.word	0x000be7bd
   b4604:	000be80e 	.word	0x000be80e

000b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4608:	b530      	push	{r4, r5, lr}
   b460a:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b460c:	4b1b      	ldr	r3, [pc, #108]	; (b467c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b460e:	9300      	str	r3, [sp, #0]
   b4610:	7913      	ldrb	r3, [r2, #4]
   b4612:	f88d 3004 	strb.w	r3, [sp, #4]
   b4616:	6893      	ldr	r3, [r2, #8]
   b4618:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b461a:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b461e:	8993      	ldrh	r3, [r2, #12]
   b4620:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4624:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4626:	460a      	mov	r2, r1
   b4628:	466b      	mov	r3, sp
   b462a:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b462e:	4628      	mov	r0, r5
   b4630:	f002 fca4 	bl	b6f7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b4634:	b910      	cbnz	r0, b463c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b4636:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4638:	b005      	add	sp, #20
   b463a:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b463c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b463e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b4642:	4628      	mov	r0, r5
   b4644:	f002 f90a 	bl	b685c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4648:	2101      	movs	r1, #1
   b464a:	4620      	mov	r0, r4
   b464c:	f002 fb40 	bl	b6cd0 <_ZN9FatVolume4initEh>
   b4650:	4601      	mov	r1, r0
   b4652:	b168      	cbz	r0, b4670 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b4654:	4621      	mov	r1, r4
   b4656:	4628      	mov	r0, r5
   b4658:	f001 fefa 	bl	b6450 <_ZN7FatFile8openRootEP9FatVolume>
   b465c:	2800      	cmp	r0, #0
   b465e:	d0ea      	beq.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4660:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b4664:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4668:	d0e5      	beq.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b466a:	4b05      	ldr	r3, [pc, #20]	; (b4680 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b466c:	601d      	str	r5, [r3, #0]
    return true;
   b466e:	e7e3      	b.n	b4638 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4670:	4620      	mov	r0, r4
   b4672:	f002 fb2d 	bl	b6cd0 <_ZN9FatVolume4initEh>
   b4676:	2800      	cmp	r0, #0
   b4678:	d1ec      	bne.n	b4654 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b467a:	e7dc      	b.n	b4636 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b467c:	000bec28 	.word	0x000bec28
   b4680:	2003e610 	.word	0x2003e610

000b4684 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4688:	b084      	sub	sp, #16
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b468a:	7883      	ldrb	r3, [r0, #2]
   b468c:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b468e:	af00      	add	r7, sp, #0
   b4690:	4604      	mov	r4, r0
   b4692:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b4694:	d14b      	bne.n	b472e <_Z14processCommandPKchb+0xaa>
   b4696:	78c3      	ldrb	r3, [r0, #3]
   b4698:	2b42      	cmp	r3, #66	; 0x42
   b469a:	d174      	bne.n	b4786 <_Z14processCommandPKchb+0x102>
        char dataStr[strlen(command)-8];
   b469c:	4620      	mov	r0, r4
   b469e:	f008 f83e 	bl	bc71e <strlen>
   b46a2:	3801      	subs	r0, #1
   b46a4:	f020 0007 	bic.w	r0, r0, #7
        }
   b46a8:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];
   b46aa:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b46ae:	4620      	mov	r0, r4
   b46b0:	f008 f835 	bl	bc71e <strlen>
   b46b4:	4468      	add	r0, sp
   b46b6:	2600      	movs	r6, #0
   b46b8:	f800 6c09 	strb.w	r6, [r0, #-9]
        checkStr[0] = command[strlen(command)-2];
   b46bc:	4620      	mov	r0, r4
        cmdStr[3] = '\0';
   b46be:	73fe      	strb	r6, [r7, #15]
        checkStr[0] = command[strlen(command)-2];
   b46c0:	f008 f82d 	bl	bc71e <strlen>
   b46c4:	4420      	add	r0, r4
        char dataStr[strlen(command)-8];
   b46c6:	466d      	mov	r5, sp
        checkStr[0] = command[strlen(command)-2];
   b46c8:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b46cc:	703b      	strb	r3, [r7, #0]
        checkStr[1] = command[strlen(command)-1];
   b46ce:	4620      	mov	r0, r4
   b46d0:	f008 f825 	bl	bc71e <strlen>
   b46d4:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46d6:	4631      	mov	r1, r6
        checkStr[1] = command[strlen(command)-1];
   b46d8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b46dc:	707b      	strb	r3, [r7, #1]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46de:	2210      	movs	r2, #16
   b46e0:	4638      	mov	r0, r7
        checkStr[2] = '\0';
   b46e2:	70be      	strb	r6, [r7, #2]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b46e4:	f008 ff30 	bl	bd548 <strtol>
   b46e8:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b46ea:	fa5f f888 	uxtb.w	r8, r8
   b46ee:	f006 fc6b 	bl	bafc8 <_Z16_fetch_usbserialv>
   b46f2:	4978      	ldr	r1, [pc, #480]	; (b48d4 <_Z14processCommandPKchb+0x250>)
   b46f4:	4643      	mov	r3, r8
   b46f6:	4642      	mov	r2, r8
   b46f8:	f7ff fe2c 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b46fc:	2604      	movs	r6, #4
   b46fe:	4620      	mov	r0, r4
   b4700:	f008 f80d 	bl	bc71e <strlen>
   b4704:	3802      	subs	r0, #2
   b4706:	4286      	cmp	r6, r0
   b4708:	d216      	bcs.n	b4738 <_Z14processCommandPKchb+0xb4>
            if(i < 7) cmdStr[i-4] = command[i];
   b470a:	2e06      	cmp	r6, #6
   b470c:	bf9b      	ittet	ls
   b470e:	f107 0310 	addls.w	r3, r7, #16
   b4712:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b4714:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b4716:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b4718:	bf8c      	ite	hi
   b471a:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b471c:	f803 2c08 	strbls.w	r2, [r3, #-8]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4720:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b4724:	bf88      	it	hi
   b4726:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b472a:	b2f6      	uxtb	r6, r6
   b472c:	e7e7      	b.n	b46fe <_Z14processCommandPKchb+0x7a>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'B' && command[3] == BOTNUM+48)){
   b472e:	2b42      	cmp	r3, #66	; 0x42
   b4730:	d129      	bne.n	b4786 <_Z14processCommandPKchb+0x102>
   b4732:	78c3      	ldrb	r3, [r0, #3]
   b4734:	2b31      	cmp	r3, #49	; 0x31
   b4736:	e7b0      	b.n	b469a <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b4738:	4540      	cmp	r0, r8
   b473a:	d02e      	beq.n	b479a <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b473c:	f006 fc44 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4740:	4605      	mov	r5, r0
   b4742:	4620      	mov	r0, r4
   b4744:	f007 ffeb 	bl	bc71e <strlen>
   b4748:	1e82      	subs	r2, r0, #2
   b474a:	4628      	mov	r0, r5
    return m_attr;
   b474c:	4d62      	ldr	r5, [pc, #392]	; (b48d8 <_Z14processCommandPKchb+0x254>)
   b474e:	4963      	ldr	r1, [pc, #396]	; (b48dc <_Z14processCommandPKchb+0x258>)
   b4750:	4643      	mov	r3, r8
   b4752:	f7ff fdff 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4756:	7c2b      	ldrb	r3, [r5, #16]
   b4758:	b9cb      	cbnz	r3, b478e <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b475a:	4961      	ldr	r1, [pc, #388]	; (b48e0 <_Z14processCommandPKchb+0x25c>)
   b475c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4760:	f105 0010 	add.w	r0, r5, #16
   b4764:	f7ff fedc 	bl	b4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4768:	495e      	ldr	r1, [pc, #376]	; (b48e4 <_Z14processCommandPKchb+0x260>)
   b476a:	4622      	mov	r2, r4
   b476c:	4628      	mov	r0, r5
   b476e:	f7ff fdf1 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4772:	f105 0010 	add.w	r0, r5, #16
   b4776:	f002 f871 	bl	b685c <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b477a:	f006 fc25 	bl	bafc8 <_Z16_fetch_usbserialv>
   b477e:	495a      	ldr	r1, [pc, #360]	; (b48e8 <_Z14processCommandPKchb+0x264>)
   b4780:	f004 ff21 	bl	b95c6 <_ZN5Print7printlnEPKc>
            return;
   b4784:	46cd      	mov	sp, r9
}
   b4786:	3710      	adds	r7, #16
   b4788:	46bd      	mov	sp, r7
   b478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b478e:	4955      	ldr	r1, [pc, #340]	; (b48e4 <_Z14processCommandPKchb+0x260>)
   b4790:	4622      	mov	r2, r4
   b4792:	4628      	mov	r0, r5
   b4794:	f7ff fdde 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4798:	e7ef      	b.n	b477a <_Z14processCommandPKchb+0xf6>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b479a:	4954      	ldr	r1, [pc, #336]	; (b48ec <_Z14processCommandPKchb+0x268>)
   b479c:	f107 000c 	add.w	r0, r7, #12
   b47a0:	f007 ff8e 	bl	bc6c0 <strcmp>
   b47a4:	2800      	cmp	r0, #0
   b47a6:	d0ed      	beq.n	b4784 <_Z14processCommandPKchb+0x100>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b47a8:	4951      	ldr	r1, [pc, #324]	; (b48f0 <_Z14processCommandPKchb+0x26c>)
   b47aa:	f107 000c 	add.w	r0, r7, #12
   b47ae:	f007 ff87 	bl	bc6c0 <strcmp>
   b47b2:	bb58      	cbnz	r0, b480c <_Z14processCommandPKchb+0x188>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};
   b47b4:	782b      	ldrb	r3, [r5, #0]
   b47b6:	713b      	strb	r3, [r7, #4]
   b47b8:	786b      	ldrb	r3, [r5, #1]
   b47ba:	717b      	strb	r3, [r7, #5]
   b47bc:	78ab      	ldrb	r3, [r5, #2]
   b47be:	71bb      	strb	r3, [r7, #6]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47c0:	78eb      	ldrb	r3, [r5, #3]
   b47c2:	723b      	strb	r3, [r7, #8]
   b47c4:	792b      	ldrb	r3, [r5, #4]
   b47c6:	727b      	strb	r3, [r7, #9]
            setLSpeed = atoi(lSpd);
   b47c8:	1d38      	adds	r0, r7, #4
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};
   b47ca:	796b      	ldrb	r3, [r5, #5]
   b47cc:	72bb      	strb	r3, [r7, #10]
            setLSpeed = atoi(lSpd);
   b47ce:	f007 fed6 	bl	bc57e <atoi>
   b47d2:	4d48      	ldr	r5, [pc, #288]	; (b48f4 <_Z14processCommandPKchb+0x270>)
            setRSpeed = atoi(rSpd);
   b47d4:	4c48      	ldr	r4, [pc, #288]	; (b48f8 <_Z14processCommandPKchb+0x274>)
            setLSpeed = atoi(lSpd);
   b47d6:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);
   b47d8:	f107 0008 	add.w	r0, r7, #8
   b47dc:	f007 fecf 	bl	bc57e <atoi>
   b47e0:	7020      	strb	r0, [r4, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b47e2:	f006 fbf1 	bl	bafc8 <_Z16_fetch_usbserialv>
   b47e6:	7823      	ldrb	r3, [r4, #0]
   b47e8:	782a      	ldrb	r2, [r5, #0]
   b47ea:	4944      	ldr	r1, [pc, #272]	; (b48fc <_Z14processCommandPKchb+0x278>)
   b47ec:	f7ff fdb2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            ESCL.write(setLSpeed);
   b47f0:	7829      	ldrb	r1, [r5, #0]
   b47f2:	4843      	ldr	r0, [pc, #268]	; (b4900 <_Z14processCommandPKchb+0x27c>)
   b47f4:	f003 fbb4 	bl	b7f60 <_ZN5Servo5writeEi>
            ESCR.write(setRSpeed);
   b47f8:	7821      	ldrb	r1, [r4, #0]
   b47fa:	4842      	ldr	r0, [pc, #264]	; (b4904 <_Z14processCommandPKchb+0x280>)
   b47fc:	f003 fbb0 	bl	b7f60 <_ZN5Servo5writeEi>
            updateMotorControl = true;
   b4800:	4a41      	ldr	r2, [pc, #260]	; (b4908 <_Z14processCommandPKchb+0x284>)
   b4802:	2301      	movs	r3, #1
   b4804:	7013      	strb	r3, [r2, #0]
            manualRC = true;
   b4806:	4a41      	ldr	r2, [pc, #260]	; (b490c <_Z14processCommandPKchb+0x288>)
   b4808:	7013      	strb	r3, [r2, #0]
   b480a:	e7bb      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"req")){  //Data Request
   b480c:	4940      	ldr	r1, [pc, #256]	; (b4910 <_Z14processCommandPKchb+0x28c>)
   b480e:	f107 000c 	add.w	r0, r7, #12
   b4812:	f007 ff55 	bl	bc6c0 <strcmp>
   b4816:	b918      	cbnz	r0, b4820 <_Z14processCommandPKchb+0x19c>
            requestActive = mode;
   b4818:	4b3e      	ldr	r3, [pc, #248]	; (b4914 <_Z14processCommandPKchb+0x290>)
   b481a:	f883 a000 	strb.w	sl, [r3]
   b481e:	e7b1      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"pts")){
   b4820:	493d      	ldr	r1, [pc, #244]	; (b4918 <_Z14processCommandPKchb+0x294>)
   b4822:	f107 000c 	add.w	r0, r7, #12
   b4826:	f007 ff4b 	bl	bc6c0 <strcmp>
   b482a:	b9f0      	cbnz	r0, b486a <_Z14processCommandPKchb+0x1e6>
   b482c:	4c2a      	ldr	r4, [pc, #168]	; (b48d8 <_Z14processCommandPKchb+0x254>)
            Serial.println(dataStr);
   b482e:	f006 fbcb 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4832:	4629      	mov	r1, r5
   b4834:	f004 fec7 	bl	b95c6 <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){
   b4838:	7c23      	ldrb	r3, [r4, #16]
   b483a:	b983      	cbnz	r3, b485e <_Z14processCommandPKchb+0x1da>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b483c:	4928      	ldr	r1, [pc, #160]	; (b48e0 <_Z14processCommandPKchb+0x25c>)
   b483e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4842:	f104 0010 	add.w	r0, r4, #16
   b4846:	f7ff fe6b 	bl	b4520 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b484a:	4934      	ldr	r1, [pc, #208]	; (b491c <_Z14processCommandPKchb+0x298>)
   b484c:	462a      	mov	r2, r5
   b484e:	4620      	mov	r0, r4
   b4850:	f7ff fd80 	bl	b4354 <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4854:	f104 0010 	add.w	r0, r4, #16
   b4858:	f002 f800 	bl	b685c <_ZN7FatFile5closeEv>
   b485c:	e792      	b.n	b4784 <_Z14processCommandPKchb+0x100>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b485e:	492f      	ldr	r1, [pc, #188]	; (b491c <_Z14processCommandPKchb+0x298>)
   b4860:	462a      	mov	r2, r5
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff fd76 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4868:	e78c      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"spc")){  //Incoming communication status
   b486a:	492d      	ldr	r1, [pc, #180]	; (b4920 <_Z14processCommandPKchb+0x29c>)
   b486c:	f107 000c 	add.w	r0, r7, #12
   b4870:	f007 ff26 	bl	bc6c0 <strcmp>
   b4874:	b920      	cbnz	r0, b4880 <_Z14processCommandPKchb+0x1fc>
   b4876:	f002 fe27 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();
   b487a:	4b2a      	ldr	r3, [pc, #168]	; (b4924 <_Z14processCommandPKchb+0x2a0>)
   b487c:	6018      	str	r0, [r3, #0]
   b487e:	e781      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"hwa")){
   b4880:	4929      	ldr	r1, [pc, #164]	; (b4928 <_Z14processCommandPKchb+0x2a4>)
   b4882:	f107 000c 	add.w	r0, r7, #12
   b4886:	f007 ff1b 	bl	bc6c0 <strcmp>
   b488a:	b910      	cbnz	r0, b4892 <_Z14processCommandPKchb+0x20e>
            waitForConnection = false;
   b488c:	4b27      	ldr	r3, [pc, #156]	; (b492c <_Z14processCommandPKchb+0x2a8>)
   b488e:	7018      	strb	r0, [r3, #0]
   b4890:	e778      	b.n	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"aut")){  //Enter autonomous mode
   b4892:	4927      	ldr	r1, [pc, #156]	; (b4930 <_Z14processCommandPKchb+0x2ac>)
   b4894:	f107 000c 	add.w	r0, r7, #12
   b4898:	f007 ff12 	bl	bc6c0 <strcmp>
   b489c:	2800      	cmp	r0, #0
   b489e:	f43f af71 	beq.w	b4784 <_Z14processCommandPKchb+0x100>
        else if(!strcmp(cmdStr,"dmp")){  //Enter SD Card "Dump Mode"
   b48a2:	4924      	ldr	r1, [pc, #144]	; (b4934 <_Z14processCommandPKchb+0x2b0>)
   b48a4:	f107 000c 	add.w	r0, r7, #12
   b48a8:	f007 ff0a 	bl	bc6c0 <strcmp>
   b48ac:	2800      	cmp	r0, #0
   b48ae:	f47f af69 	bne.w	b4784 <_Z14processCommandPKchb+0x100>
            offloadMode = true;
   b48b2:	4b21      	ldr	r3, [pc, #132]	; (b4938 <_Z14processCommandPKchb+0x2b4>)
            status.setSpeed(LED_SPEED_FAST);
   b48b4:	4821      	ldr	r0, [pc, #132]	; (b493c <_Z14processCommandPKchb+0x2b8>)
            offloadMode = true;
   b48b6:	2201      	movs	r2, #1
   b48b8:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b48ba:	4b20      	ldr	r3, [pc, #128]	; (b493c <_Z14processCommandPKchb+0x2b8>)
   b48bc:	7c5a      	ldrb	r2, [r3, #17]
   b48be:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b48c0:	bf1c      	itt	ne
   b48c2:	2202      	movne	r2, #2
   b48c4:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b48c6:	211e      	movs	r1, #30
    d_.color = color;
   b48c8:	22ff      	movs	r2, #255	; 0xff
   b48ca:	615a      	str	r2, [r3, #20]
   b48cc:	f7ff fdbe 	bl	b444c <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b48d0:	e758      	b.n	b4784 <_Z14processCommandPKchb+0x100>
   b48d2:	bf00      	nop
   b48d4:	000be85d 	.word	0x000be85d
   b48d8:	2003df14 	.word	0x2003df14
   b48dc:	000be872 	.word	0x000be872
   b48e0:	2003de97 	.word	0x2003de97
   b48e4:	000be88f 	.word	0x000be88f
   b48e8:	000be8bb 	.word	0x000be8bb
   b48ec:	000be8dc 	.word	0x000be8dc
   b48f0:	000be8e0 	.word	0x000be8e0
   b48f4:	2003e58c 	.word	0x2003e58c
   b48f8:	2003e58d 	.word	0x2003e58d
   b48fc:	000be8e4 	.word	0x000be8e4
   b4900:	2003de28 	.word	0x2003de28
   b4904:	2003de38 	.word	0x2003de38
   b4908:	2003e5dc 	.word	0x2003e5dc
   b490c:	2003df79 	.word	0x2003df79
   b4910:	000be910 	.word	0x000be910
   b4914:	2003e0e9 	.word	0x2003e0e9
   b4918:	000be914 	.word	0x000be914
   b491c:	000be918 	.word	0x000be918
   b4920:	000be93b 	.word	0x000be93b
   b4924:	2003deb8 	.word	0x2003deb8
   b4928:	000be93f 	.word	0x000be93f
   b492c:	2003e5dd 	.word	0x2003e5dd
   b4930:	000be943 	.word	0x000be943
   b4934:	000be947 	.word	0x000be947
   b4938:	2003e0e8 	.word	0x2003e0e8
   b493c:	2003e590 	.word	0x2003e590

000b4940 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4940:	b510      	push	{r4, lr}
   b4942:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4944:	2200      	movs	r2, #0
   b4946:	2104      	movs	r1, #4
   b4948:	4620      	mov	r0, r4
   b494a:	f7ff fe9b 	bl	b4684 <_Z14processCommandPKchb>
    if(logMessages){
   b494e:	4b0b      	ldr	r3, [pc, #44]	; (b497c <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4950:	781b      	ldrb	r3, [r3, #0]
   b4952:	b193      	cbz	r3, b497a <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4954:	480a      	ldr	r0, [pc, #40]	; (b4980 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4956:	7c03      	ldrb	r3, [r0, #16]
   b4958:	b92b      	cbnz	r3, b4966 <_Z13cmdLTEHandlerPKcS0_+0x26>
   b495a:	490a      	ldr	r1, [pc, #40]	; (b4984 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b495c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4960:	3010      	adds	r0, #16
   b4962:	f7ff fddd 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4966:	4622      	mov	r2, r4
   b4968:	4907      	ldr	r1, [pc, #28]	; (b4988 <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b496a:	4805      	ldr	r0, [pc, #20]	; (b4980 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b496c:	f7ff fcf2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
}
   b4970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4974:	4805      	ldr	r0, [pc, #20]	; (b498c <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4976:	f001 bf71 	b.w	b685c <_ZN7FatFile5closeEv>
}
   b497a:	bd10      	pop	{r4, pc}
   b497c:	2003df6c 	.word	0x2003df6c
   b4980:	2003df14 	.word	0x2003df14
   b4984:	2003de97 	.word	0x2003de97
   b4988:	000be94b 	.word	0x000be94b
   b498c:	2003df24 	.word	0x2003df24

000b4990 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4990:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4992:	f101 0308 	add.w	r3, r1, #8
   b4996:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b499a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b499c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b49a0:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b49a2:	460a      	mov	r2, r1
   b49a4:	4601      	mov	r1, r0
   b49a6:	4668      	mov	r0, sp
   b49a8:	f007 fe06 	bl	bc5b8 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49ac:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b49b0:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b49b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b49b6:	b113      	cbz	r3, b49be <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b49b8:	2300      	movs	r3, #0
   b49ba:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b49be:	f006 fb03 	bl	bafc8 <_Z16_fetch_usbserialv>
   b49c2:	4916      	ldr	r1, [pc, #88]	; (b4a1c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b49c4:	f004 fdff 	bl	b95c6 <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);
   b49c8:	f006 fafe 	bl	bafc8 <_Z16_fetch_usbserialv>
   b49cc:	4629      	mov	r1, r5
   b49ce:	f004 fdfa 	bl	b95c6 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b49d2:	2201      	movs	r2, #1
   b49d4:	4611      	mov	r1, r2
   b49d6:	4628      	mov	r0, r5
   b49d8:	f7ff fe54 	bl	b4684 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();
   b49dc:	782b      	ldrb	r3, [r5, #0]
   b49de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b49e2:	2b41      	cmp	r3, #65	; 0x41
   b49e4:	d103      	bne.n	b49ee <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b49e6:	f002 fd6f 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
   b49ea:	4b0d      	ldr	r3, [pc, #52]	; (b4a20 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b49ec:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b49ee:	4b0d      	ldr	r3, [pc, #52]	; (b4a24 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b49f0:	781b      	ldrb	r3, [r3, #0]
   b49f2:	b183      	cbz	r3, b4a16 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b49f4:	480c      	ldr	r0, [pc, #48]	; (b4a28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b49f6:	7c03      	ldrb	r3, [r0, #16]
   b49f8:	b92b      	cbnz	r3, b4a06 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b49fa:	490c      	ldr	r1, [pc, #48]	; (b4a2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b49fc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a00:	3010      	adds	r0, #16
   b4a02:	f7ff fd8d 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4a06:	490a      	ldr	r1, [pc, #40]	; (b4a30 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4a08:	4807      	ldr	r0, [pc, #28]	; (b4a28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4a0a:	462a      	mov	r2, r5
   b4a0c:	f7ff fca2 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4a10:	4808      	ldr	r0, [pc, #32]	; (b4a34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4a12:	f001 ff23 	bl	b685c <_ZN7FatFile5closeEv>
}
   b4a16:	46bd      	mov	sp, r7
   b4a18:	bdb0      	pop	{r4, r5, r7, pc}
   b4a1a:	bf00      	nop
   b4a1c:	000be96b 	.word	0x000be96b
   b4a20:	2003de24 	.word	0x2003de24
   b4a24:	2003df6c 	.word	0x2003df6c
   b4a28:	2003df14 	.word	0x2003df14
   b4a2c:	2003de97 	.word	0x2003de97
   b4a30:	000be97b 	.word	0x000be97b
   b4a34:	2003df24 	.word	0x2003df24

000b4a38 <_Z8setupLTEv>:
void setupLTE(){
   b4a38:	b513      	push	{r0, r1, r4, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4a3a:	2400      	movs	r4, #0
   b4a3c:	e9cd 4400 	strd	r4, r4, [sp]
   b4a40:	4904      	ldr	r1, [pc, #16]	; (b4a54 <_Z8setupLTEv+0x1c>)
   b4a42:	4805      	ldr	r0, [pc, #20]	; (b4a58 <_Z8setupLTEv+0x20>)
   b4a44:	2301      	movs	r3, #1
   b4a46:	4622      	mov	r2, r4
   b4a48:	f003 f88e 	bl	b7b68 <spark_subscribe>
    LTEAvail = false;
   b4a4c:	4b03      	ldr	r3, [pc, #12]	; (b4a5c <_Z8setupLTEv+0x24>)
   b4a4e:	701c      	strb	r4, [r3, #0]
}
   b4a50:	b002      	add	sp, #8
   b4a52:	bd10      	pop	{r4, pc}
   b4a54:	000b4941 	.word	0x000b4941
   b4a58:	000be99b 	.word	0x000be99b
   b4a5c:	2003de48 	.word	0x2003de48

000b4a60 <_Z9setupXBeev>:
void setupXBee(){
   b4a60:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4a62:	f006 ff25 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b4a66:	4908      	ldr	r1, [pc, #32]	; (b4a88 <_Z9setupXBeev+0x28>)
   b4a68:	f7ff fc3c 	bl	b42e4 <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4a6c:	2014      	movs	r0, #20
   b4a6e:	f005 fe93 	bl	ba798 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4a72:	f006 ff1d 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b4a76:	4905      	ldr	r1, [pc, #20]	; (b4a8c <_Z9setupXBeev+0x2c>)
   b4a78:	f7ff fc34 	bl	b42e4 <_ZN5Print6printfEPKcz>
}
   b4a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4a80:	2014      	movs	r0, #20
   b4a82:	f005 be89 	b.w	ba798 <delay>
   b4a86:	bf00      	nop
   b4a88:	000befdf 	.word	0x000befdf
   b4a8c:	000be77d 	.word	0x000be77d

000b4a90 <_Z8setupGPSv>:
void setupGPS(){
   b4a90:	b508      	push	{r3, lr}
    myGPS.begin(Wire);
   b4a92:	f006 ff49 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4a96:	4601      	mov	r1, r0
   b4a98:	4806      	ldr	r0, [pc, #24]	; (b4ab4 <_Z8setupGPSv+0x24>)
   b4a9a:	f002 fca5 	bl	b73e8 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>
    if (myGPS.isConnected() == false){
   b4a9e:	4805      	ldr	r0, [pc, #20]	; (b4ab4 <_Z8setupGPSv+0x24>)
   b4aa0:	f002 fcad 	bl	b73fe <_ZN13SFE_UBLOX_GPS11isConnectedEv>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4aa4:	f006 ff40 	bl	bb928 <_Z19__fetch_global_Wirev>
}
   b4aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  setSpeed(speed);
   b4aac:	4902      	ldr	r1, [pc, #8]	; (b4ab8 <_Z8setupGPSv+0x28>)
   b4aae:	f006 bbaf 	b.w	bb210 <_ZN7TwoWire8setSpeedEm>
   b4ab2:	bf00      	nop
   b4ab4:	2003dfb0 	.word	0x2003dfb0
   b4ab8:	00061a80 	.word	0x00061a80

000b4abc <_Z12updateMotorsv>:
void updateMotors(){
   b4abc:	b510      	push	{r4, lr}
    if(updateMotorControl){
   b4abe:	4c08      	ldr	r4, [pc, #32]	; (b4ae0 <_Z12updateMotorsv+0x24>)
   b4ac0:	7823      	ldrb	r3, [r4, #0]
   b4ac2:	b15b      	cbz	r3, b4adc <_Z12updateMotorsv+0x20>
        ESCL.write(setLSpeed);
   b4ac4:	4b07      	ldr	r3, [pc, #28]	; (b4ae4 <_Z12updateMotorsv+0x28>)
   b4ac6:	4808      	ldr	r0, [pc, #32]	; (b4ae8 <_Z12updateMotorsv+0x2c>)
   b4ac8:	7819      	ldrb	r1, [r3, #0]
   b4aca:	f003 fa49 	bl	b7f60 <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4ace:	4b07      	ldr	r3, [pc, #28]	; (b4aec <_Z12updateMotorsv+0x30>)
   b4ad0:	4807      	ldr	r0, [pc, #28]	; (b4af0 <_Z12updateMotorsv+0x34>)
   b4ad2:	7819      	ldrb	r1, [r3, #0]
   b4ad4:	f003 fa44 	bl	b7f60 <_ZN5Servo5writeEi>
        updateMotorControl = false;        
   b4ad8:	2300      	movs	r3, #0
   b4ada:	7023      	strb	r3, [r4, #0]
}
   b4adc:	bd10      	pop	{r4, pc}
   b4ade:	bf00      	nop
   b4ae0:	2003e5dc 	.word	0x2003e5dc
   b4ae4:	2003e58c 	.word	0x2003e58c
   b4ae8:	2003de28 	.word	0x2003de28
   b4aec:	2003e58d 	.word	0x2003e58d
   b4af0:	2003de38 	.word	0x2003de38
   b4af4:	00000000 	.word	0x00000000

000b4af8 <_Z13sensorHandlerv>:
void sensorHandler(){
   b4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){
   b4afc:	4db2      	ldr	r5, [pc, #712]	; (b4dc8 <_Z13sensorHandlerv+0x2d0>)
void sensorHandler(){
   b4afe:	b0ab      	sub	sp, #172	; 0xac
   b4b00:	f002 fce2 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){
   b4b04:	682b      	ldr	r3, [r5, #0]
   b4b06:	4283      	cmp	r3, r0
   b4b08:	f080 8109 	bcs.w	b4d1e <_Z13sensorHandlerv+0x226>
   b4b0c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; b4df8 <_Z13sensorHandlerv+0x300>
   b4b10:	f89b 3000 	ldrb.w	r3, [fp]
   b4b14:	2b00      	cmp	r3, #0
   b4b16:	f000 8102 	beq.w	b4d1e <_Z13sensorHandlerv+0x226>
        Wire.requestFrom(PHADDR, 20, 1);
   b4b1a:	f006 ff05 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b1e:	2301      	movs	r3, #1
   b4b20:	2214      	movs	r2, #20
   b4b22:	2163      	movs	r1, #99	; 0x63
   b4b24:	f006 fb95 	bl	bb252 <_ZN7TwoWire11requestFromEhjh>
        byte code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4b28:	f006 fefe 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b2c:	6803      	ldr	r3, [r0, #0]
   b4b2e:	695b      	ldr	r3, [r3, #20]
   b4b30:	4798      	blx	r3
        int c = 0;
   b4b32:	ac16      	add	r4, sp, #88	; 0x58
   b4b34:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4b36:	f006 fef7 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b3a:	6803      	ldr	r3, [r0, #0]
   b4b3c:	691b      	ldr	r3, [r3, #16]
   b4b3e:	4798      	blx	r3
   b4b40:	b138      	cbz	r0, b4b52 <_Z13sensorHandlerv+0x5a>
            tempSense[c++] = Wire.read();
   b4b42:	f006 fef1 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b46:	6803      	ldr	r3, [r0, #0]
   b4b48:	695b      	ldr	r3, [r3, #20]
   b4b4a:	4798      	blx	r3
   b4b4c:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4b50:	e7f1      	b.n	b4b36 <_Z13sensorHandlerv+0x3e>
        sensePH = atof(tempSense);
   b4b52:	4630      	mov	r0, r6
   b4b54:	f007 fd10 	bl	bc578 <atof>
   b4b58:	ec51 0b10 	vmov	r0, r1, d0
   b4b5c:	f007 fc98 	bl	bc490 <__aeabi_d2f>
   b4b60:	f8df a298 	ldr.w	sl, [pc, #664]	; b4dfc <_Z13sensorHandlerv+0x304>
   b4b64:	f8ca 0000 	str.w	r0, [sl]
        Wire.requestFrom(MCOND, 20, 1);
   b4b68:	f006 fede 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b6c:	2301      	movs	r3, #1
   b4b6e:	2214      	movs	r2, #20
   b4b70:	2164      	movs	r1, #100	; 0x64
   b4b72:	f006 fb6e 	bl	bb252 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4b76:	f006 fed7 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b7a:	6803      	ldr	r3, [r0, #0]
   b4b7c:	695b      	ldr	r3, [r3, #20]
   b4b7e:	4798      	blx	r3
        c = 0;
   b4b80:	ac1b      	add	r4, sp, #108	; 0x6c
   b4b82:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4b84:	f006 fed0 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b88:	6803      	ldr	r3, [r0, #0]
   b4b8a:	691b      	ldr	r3, [r3, #16]
   b4b8c:	4798      	blx	r3
   b4b8e:	b138      	cbz	r0, b4ba0 <_Z13sensorHandlerv+0xa8>
            mcondSense[c++] = Wire.read();
   b4b90:	f006 feca 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4b94:	6803      	ldr	r3, [r0, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	4798      	blx	r3
   b4b9a:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4b9e:	e7f1      	b.n	b4b84 <_Z13sensorHandlerv+0x8c>
        float senseMCond = atof(mcondSense);
   b4ba0:	4630      	mov	r0, r6
   b4ba2:	f007 fce9 	bl	bc578 <atof>
        Wire.requestFrom(COND, 20, 1);
   b4ba6:	f006 febf 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4baa:	2301      	movs	r3, #1
   b4bac:	2214      	movs	r2, #20
   b4bae:	2165      	movs	r1, #101	; 0x65
   b4bb0:	f006 fb4f 	bl	bb252 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bb4:	f006 feb8 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4bb8:	6803      	ldr	r3, [r0, #0]
   b4bba:	695b      	ldr	r3, [r3, #20]
   b4bbc:	4798      	blx	r3
        c = 0;
   b4bbe:	ac20      	add	r4, sp, #128	; 0x80
   b4bc0:	4626      	mov	r6, r4
        while(Wire.available()){   // slave may send less than requested
   b4bc2:	f006 feb1 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4bc6:	6803      	ldr	r3, [r0, #0]
   b4bc8:	691b      	ldr	r3, [r3, #16]
   b4bca:	4798      	blx	r3
   b4bcc:	b138      	cbz	r0, b4bde <_Z13sensorHandlerv+0xe6>
            condSense[c++] = Wire.read();
   b4bce:	f006 feab 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4bd2:	6803      	ldr	r3, [r0, #0]
   b4bd4:	695b      	ldr	r3, [r3, #20]
   b4bd6:	4798      	blx	r3
   b4bd8:	f804 0b01 	strb.w	r0, [r4], #1
        while(Wire.available()){   // slave may send less than requested
   b4bdc:	e7f1      	b.n	b4bc2 <_Z13sensorHandlerv+0xca>
        float senseCond = atof(condSense);
   b4bde:	4630      	mov	r0, r6
   b4be0:	f007 fcca 	bl	bc578 <atof>
   b4be4:	ec59 8b10 	vmov	r8, r9, d0
        Wire.requestFrom(TEMPADDR, 20, 1);
   b4be8:	f006 fe9e 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4bec:	2301      	movs	r3, #1
   b4bee:	2214      	movs	r2, #20
   b4bf0:	2166      	movs	r1, #102	; 0x66
   b4bf2:	f006 fb2e 	bl	bb252 <_ZN7TwoWire11requestFromEhjh>
        code = Wire.read();               		                                      //the first byte is the response code, we read this separately.
   b4bf6:	f006 fe97 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4bfa:	6803      	ldr	r3, [r0, #0]
   b4bfc:	695b      	ldr	r3, [r3, #20]
   b4bfe:	4798      	blx	r3
        c = 0;
   b4c00:	af25      	add	r7, sp, #148	; 0x94
   b4c02:	463e      	mov	r6, r7
        while(Wire.available()){   // slave may send less than requested
   b4c04:	f006 fe90 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4c08:	6803      	ldr	r3, [r0, #0]
   b4c0a:	691b      	ldr	r3, [r3, #16]
   b4c0c:	4798      	blx	r3
   b4c0e:	4604      	mov	r4, r0
   b4c10:	b138      	cbz	r0, b4c22 <_Z13sensorHandlerv+0x12a>
            addrSense[c++] = Wire.read();
   b4c12:	f006 fe89 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4c16:	6803      	ldr	r3, [r0, #0]
   b4c18:	695b      	ldr	r3, [r3, #20]
   b4c1a:	4798      	blx	r3
   b4c1c:	f807 0b01 	strb.w	r0, [r7], #1
        while(Wire.available()){   // slave may send less than requested
   b4c20:	e7f0      	b.n	b4c04 <_Z13sensorHandlerv+0x10c>
        float senseTemp = atof(addrSense);
   b4c22:	4630      	mov	r0, r6
   b4c24:	f007 fca8 	bl	bc578 <atof>
        if(logSensors){
   b4c28:	4b68      	ldr	r3, [pc, #416]	; (b4dcc <_Z13sensorHandlerv+0x2d4>)
        dataWait = false;
   b4c2a:	f88b 4000 	strb.w	r4, [fp]
        if(logSensors){
   b4c2e:	781b      	ldrb	r3, [r3, #0]
        float senseTemp = atof(addrSense);
   b4c30:	ec57 6b10 	vmov	r6, r7, d0
        if(logSensors){
   b4c34:	2b00      	cmp	r3, #0
   b4c36:	d072      	beq.n	b4d1e <_Z13sensorHandlerv+0x226>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b4c38:	f005 fd84 	bl	ba744 <_ZN9TimeClass5monthEv>
   b4c3c:	9011      	str	r0, [sp, #68]	; 0x44
   b4c3e:	f005 fd75 	bl	ba72c <_ZN9TimeClass3dayEv>
   b4c42:	4604      	mov	r4, r0
   b4c44:	f005 fd86 	bl	ba754 <_ZN9TimeClass4yearEv>
   b4c48:	4683      	mov	fp, r0
   b4c4a:	f005 fd4b 	bl	ba6e4 <_ZN9TimeClass4hourEv>
   b4c4e:	9010      	str	r0, [sp, #64]	; 0x40
   b4c50:	f005 fd54 	bl	ba6fc <_ZN9TimeClass6minuteEv>
   b4c54:	900f      	str	r0, [sp, #60]	; 0x3c
   b4c56:	f005 fd5d 	bl	ba714 <_ZN9TimeClass6secondEv>
   b4c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b4c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   b4c60:	9004      	str	r0, [sp, #16]
   b4c62:	e9cd b201 	strd	fp, r2, [sp, #4]
   b4c66:	9103      	str	r1, [sp, #12]
   b4c68:	4a59      	ldr	r2, [pc, #356]	; (b4dd0 <_Z13sensorHandlerv+0x2d8>)
   b4c6a:	9400      	str	r4, [sp, #0]
   b4c6c:	2110      	movs	r1, #16
   b4c6e:	a812      	add	r0, sp, #72	; 0x48
   b4c70:	f002 ffb2 	bl	b7bd8 <snprintf>
   b4c74:	4857      	ldr	r0, [pc, #348]	; (b4dd4 <_Z13sensorHandlerv+0x2dc>)
            if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b4c76:	7c03      	ldrb	r3, [r0, #16]
   b4c78:	b92b      	cbnz	r3, b4c86 <_Z13sensorHandlerv+0x18e>
   b4c7a:	4957      	ldr	r1, [pc, #348]	; (b4dd8 <_Z13sensorHandlerv+0x2e0>)
   b4c7c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c80:	3010      	adds	r0, #16
   b4c82:	f7ff fc4d 	bl	b4520 <_ZN7FatFile4openEPKci>
        float senseCond = atof(condSense);
   b4c86:	4649      	mov	r1, r9
   b4c88:	4640      	mov	r0, r8
   b4c8a:	f007 fc01 	bl	bc490 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4c8e:	f007 f8ed 	bl	bbe6c <__aeabi_f2d>
   b4c92:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b4c96:	4b51      	ldr	r3, [pc, #324]	; (b4ddc <_Z13sensorHandlerv+0x2e4>)
   b4c98:	6818      	ldr	r0, [r3, #0]
   b4c9a:	f007 f8e7 	bl	bbe6c <__aeabi_f2d>
   b4c9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b4ca2:	4b4f      	ldr	r3, [pc, #316]	; (b4de0 <_Z13sensorHandlerv+0x2e8>)
   b4ca4:	6818      	ldr	r0, [r3, #0]
   b4ca6:	f007 f8e1 	bl	bbe6c <__aeabi_f2d>
   b4caa:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b4cae:	f8da 0000 	ldr.w	r0, [sl]
   b4cb2:	f007 f8db 	bl	bbe6c <__aeabi_f2d>
   b4cb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float senseTemp = atof(addrSense);
   b4cba:	4639      	mov	r1, r7
   b4cbc:	4630      	mov	r0, r6
   b4cbe:	f007 fbe7 	bl	bc490 <__aeabi_d2f>
            myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,((float)latitude_mdeg/1000000.0),((float)longitude_mdeg/1000000.0),senseTemp,sensePH,senseDO,senseMiniCond,senseCond);
   b4cc2:	f007 f8d3 	bl	bbe6c <__aeabi_f2d>
   b4cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4cca:	4b46      	ldr	r3, [pc, #280]	; (b4de4 <_Z13sensorHandlerv+0x2ec>)
   b4ccc:	6818      	ldr	r0, [r3, #0]
   b4cce:	ee07 0a90 	vmov	s15, r0
   b4cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cd6:	ee17 0a90 	vmov	r0, s15
   b4cda:	f007 f8c7 	bl	bbe6c <__aeabi_f2d>
   b4cde:	a338      	add	r3, pc, #224	; (adr r3, b4dc0 <_Z13sensorHandlerv+0x2c8>)
   b4ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ce4:	f007 fa44 	bl	bc170 <__aeabi_ddiv>
   b4ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b4cec:	4b3e      	ldr	r3, [pc, #248]	; (b4de8 <_Z13sensorHandlerv+0x2f0>)
   b4cee:	6818      	ldr	r0, [r3, #0]
   b4cf0:	ee07 0a90 	vmov	s15, r0
   b4cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4cf8:	ee17 0a90 	vmov	r0, s15
   b4cfc:	f007 f8b6 	bl	bbe6c <__aeabi_f2d>
   b4d00:	a32f      	add	r3, pc, #188	; (adr r3, b4dc0 <_Z13sensorHandlerv+0x2c8>)
   b4d02:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d06:	f007 fa33 	bl	bc170 <__aeabi_ddiv>
   b4d0a:	aa12      	add	r2, sp, #72	; 0x48
   b4d0c:	e9cd 0100 	strd	r0, r1, [sp]
   b4d10:	4936      	ldr	r1, [pc, #216]	; (b4dec <_Z13sensorHandlerv+0x2f4>)
   b4d12:	4830      	ldr	r0, [pc, #192]	; (b4dd4 <_Z13sensorHandlerv+0x2dc>)
   b4d14:	f7ff fb1e 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            myFile.close();
   b4d18:	4835      	ldr	r0, [pc, #212]	; (b4df0 <_Z13sensorHandlerv+0x2f8>)
   b4d1a:	f001 fd9f 	bl	b685c <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){
   b4d1e:	4c35      	ldr	r4, [pc, #212]	; (b4df4 <_Z13sensorHandlerv+0x2fc>)
   b4d20:	f002 fbd2 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
   b4d24:	6823      	ldr	r3, [r4, #0]
   b4d26:	4283      	cmp	r3, r0
   b4d28:	d244      	bcs.n	b4db4 <_Z13sensorHandlerv+0x2bc>
   b4d2a:	f002 fbcd 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;
   b4d2e:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b4d32:	6020      	str	r0, [r4, #0]
   b4d34:	f002 fbc8 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;
   b4d38:	f200 3039 	addw	r0, r0, #825	; 0x339
   b4d3c:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);                                              //call the circuit by its ID number.
   b4d3e:	f006 fdf3 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d42:	2163      	movs	r1, #99	; 0x63
   b4d44:	f006 fa9b 	bl	bb27e <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d48:	f006 fdee 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d4c:	2172      	movs	r1, #114	; 0x72
   b4d4e:	f7ff fa88 	bl	b4262 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d52:	f006 fde9 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d56:	f006 fa99 	bl	bb28c <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);                                              //call the circuit by its ID number.
   b4d5a:	f006 fde5 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d5e:	2164      	movs	r1, #100	; 0x64
   b4d60:	f006 fa8d 	bl	bb27e <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d64:	f006 fde0 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d68:	2172      	movs	r1, #114	; 0x72
   b4d6a:	f7ff fa7a 	bl	b4262 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d6e:	f006 fddb 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d72:	f006 fa8b 	bl	bb28c <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);                                              //call the circuit by its ID number.
   b4d76:	f006 fdd7 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d7a:	2165      	movs	r1, #101	; 0x65
   b4d7c:	f006 fa7f 	bl	bb27e <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d80:	f006 fdd2 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d84:	2172      	movs	r1, #114	; 0x72
   b4d86:	f7ff fa6c 	bl	b4262 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4d8a:	f006 fdcd 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d8e:	f006 fa7d 	bl	bb28c <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);                                              //call the circuit by its ID number.
   b4d92:	f006 fdc9 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4d96:	2166      	movs	r1, #102	; 0x66
   b4d98:	f006 fa71 	bl	bb27e <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                                                     //transmit the command that was sent through the serial port.
   b4d9c:	f006 fdc4 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4da0:	2172      	movs	r1, #114	; 0x72
   b4da2:	f7ff fa5e 	bl	b4262 <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                                                       //end the I2C data transmission.
   b4da6:	f006 fdbf 	bl	bb928 <_Z19__fetch_global_Wirev>
   b4daa:	f006 fa6f 	bl	bb28c <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b4dae:	4b12      	ldr	r3, [pc, #72]	; (b4df8 <_Z13sensorHandlerv+0x300>)
   b4db0:	2201      	movs	r2, #1
   b4db2:	701a      	strb	r2, [r3, #0]
}
   b4db4:	b02b      	add	sp, #172	; 0xac
   b4db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4dba:	bf00      	nop
   b4dbc:	f3af 8000 	nop.w
   b4dc0:	00000000 	.word	0x00000000
   b4dc4:	412e8480 	.word	0x412e8480
   b4dc8:	2003de74 	.word	0x2003de74
   b4dcc:	2003df6d 	.word	0x2003df6d
   b4dd0:	000be9a1 	.word	0x000be9a1
   b4dd4:	2003df7c 	.word	0x2003df7c
   b4dd8:	2003de79 	.word	0x2003de79
   b4ddc:	2003e580 	.word	0x2003e580
   b4de0:	2003e57c 	.word	0x2003e57c
   b4de4:	2003df74 	.word	0x2003df74
   b4de8:	2003dec0 	.word	0x2003dec0
   b4dec:	000be9ba 	.word	0x000be9ba
   b4df0:	2003df8c 	.word	0x2003df8c
   b4df4:	2003e588 	.word	0x2003e588
   b4df8:	2003de78 	.word	0x2003de78
   b4dfc:	2003e584 	.word	0x2003e584

000b4e00 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4e04:	4e3c      	ldr	r6, [pc, #240]	; (b4ef8 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e06:	f8df 8104 	ldr.w	r8, [pc, #260]	; b4f0c <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b4e0a:	f8df 9104 	ldr.w	r9, [pc, #260]	; b4f10 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b4e0e:	b089      	sub	sp, #36	; 0x24
   b4e10:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4e12:	f006 fd4d 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b4e16:	6803      	ldr	r3, [r0, #0]
   b4e18:	691b      	ldr	r3, [r3, #16]
   b4e1a:	4798      	blx	r3
   b4e1c:	2800      	cmp	r0, #0
   b4e1e:	d066      	beq.n	b4eee <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');
   b4e20:	f006 fd46 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b4e24:	220a      	movs	r2, #10
   b4e26:	4601      	mov	r1, r0
   b4e28:	4638      	mov	r0, r7
   b4e2a:	f004 fc53 	bl	b96d4 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4e2e:	68bb      	ldr	r3, [r7, #8]
   b4e30:	3307      	adds	r3, #7
   b4e32:	f023 0307 	bic.w	r3, r3, #7
    }
   b4e36:	466d      	mov	r5, sp
        char buffer[data.length()];
   b4e38:	ebad 0d03 	sub.w	sp, sp, r3
   b4e3c:	46ea      	mov	sl, sp
   b4e3e:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4e40:	68b9      	ldr	r1, [r7, #8]
   b4e42:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4e46:	458b      	cmp	fp, r1
   b4e48:	f103 0401 	add.w	r4, r3, #1
   b4e4c:	d207      	bcs.n	b4e5e <_Z11XBeeHandlerv+0x5e>
   b4e4e:	4659      	mov	r1, fp
   b4e50:	4638      	mov	r0, r7
   b4e52:	f003 f9df 	bl	b8214 <_ZNK6String6charAtEj>
   b4e56:	4623      	mov	r3, r4
   b4e58:	f80a 000b 	strb.w	r0, [sl, fp]
   b4e5c:	e7f0      	b.n	b4e40 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4e5e:	2901      	cmp	r1, #1
   b4e60:	d90a      	bls.n	b4e78 <_Z11XBeeHandlerv+0x78>
   b4e62:	3901      	subs	r1, #1
   b4e64:	4638      	mov	r0, r7
   b4e66:	f003 f9d5 	bl	b8214 <_ZNK6String6charAtEj>
   b4e6a:	280d      	cmp	r0, #13
   b4e6c:	bf01      	itttt	eq
   b4e6e:	68bb      	ldreq	r3, [r7, #8]
   b4e70:	4453      	addeq	r3, sl
   b4e72:	2200      	moveq	r2, #0
   b4e74:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4e78:	2201      	movs	r2, #1
   b4e7a:	2102      	movs	r1, #2
   b4e7c:	4650      	mov	r0, sl
   b4e7e:	f7ff fc01 	bl	b4684 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4e82:	f006 f8a1 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4e86:	4631      	mov	r1, r6
   b4e88:	f004 fb9d 	bl	b95c6 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4e8c:	f006 f89c 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4e90:	6839      	ldr	r1, [r7, #0]
   b4e92:	f004 fb98 	bl	b95c6 <_ZN5Print7printlnEPKc>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis();
   b4e96:	f89a 3000 	ldrb.w	r3, [sl]
   b4e9a:	3b42      	subs	r3, #66	; 0x42
   b4e9c:	2b01      	cmp	r3, #1
   b4e9e:	d803      	bhi.n	b4ea8 <_Z11XBeeHandlerv+0xa8>
   b4ea0:	f002 fb12 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
   b4ea4:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b4ea8:	f899 3000 	ldrb.w	r3, [r9]
   b4eac:	b1d3      	cbz	r3, b4ee4 <_Z11XBeeHandlerv+0xe4>
   b4eae:	4813      	ldr	r0, [pc, #76]	; (b4efc <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4eb0:	7c03      	ldrb	r3, [r0, #16]
   b4eb2:	b92b      	cbnz	r3, b4ec0 <_Z11XBeeHandlerv+0xc0>
   b4eb4:	4912      	ldr	r1, [pc, #72]	; (b4f00 <_Z11XBeeHandlerv+0x100>)
   b4eb6:	f244 2202 	movw	r2, #16898	; 0x4202
   b4eba:	3010      	adds	r0, #16
   b4ebc:	f7ff fb30 	bl	b4520 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4ec0:	4639      	mov	r1, r7
   b4ec2:	f107 0010 	add.w	r0, r7, #16
   b4ec6:	f003 f95b 	bl	b8180 <_ZN6StringC1ERKS_>
   b4eca:	490e      	ldr	r1, [pc, #56]	; (b4f04 <_Z11XBeeHandlerv+0x104>)
   b4ecc:	480b      	ldr	r0, [pc, #44]	; (b4efc <_Z11XBeeHandlerv+0xfc>)
   b4ece:	f107 0210 	add.w	r2, r7, #16
   b4ed2:	f7ff fa3f 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b4ed6:	f107 0010 	add.w	r0, r7, #16
   b4eda:	f003 f8bb 	bl	b8054 <_ZN6StringD1Ev>
            logFile.close();
   b4ede:	480a      	ldr	r0, [pc, #40]	; (b4f08 <_Z11XBeeHandlerv+0x108>)
   b4ee0:	f001 fcbc 	bl	b685c <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4ee4:	4638      	mov	r0, r7
   b4ee6:	f003 f8b5 	bl	b8054 <_ZN6StringD1Ev>
   b4eea:	46ad      	mov	sp, r5
    while(Serial1.available()){
   b4eec:	e791      	b.n	b4e12 <_Z11XBeeHandlerv+0x12>
}
   b4eee:	3724      	adds	r7, #36	; 0x24
   b4ef0:	46bd      	mov	sp, r7
   b4ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4ef6:	bf00      	nop
   b4ef8:	000be9d2 	.word	0x000be9d2
   b4efc:	2003df14 	.word	0x2003df14
   b4f00:	2003de97 	.word	0x2003de97
   b4f04:	000be9e4 	.word	0x000be9e4
   b4f08:	2003df24 	.word	0x2003df24
   b4f0c:	2003de5c 	.word	0x2003de5c
   b4f10:	2003df6c 	.word	0x2003df6c

000b4f14 <_Z13dataOffloaderv>:
void dataOffloader(){
   b4f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4f18:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b4f1a:	f006 f855 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4f1e:	4961      	ldr	r1, [pc, #388]	; (b50a4 <_Z13dataOffloaderv+0x190>)
   b4f20:	f004 fb51 	bl	b95c6 <_ZN5Print7printlnEPKc>
    if (!logDir.open("/")) {
   b4f24:	4960      	ldr	r1, [pc, #384]	; (b50a8 <_Z13dataOffloaderv+0x194>)
   b4f26:	4861      	ldr	r0, [pc, #388]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4f28:	2200      	movs	r2, #0
   b4f2a:	f7ff faf9 	bl	b4520 <_ZN7FatFile4openEPKci>
   b4f2e:	b948      	cbnz	r0, b4f44 <_Z13dataOffloaderv+0x30>
        offloadMode = false;
   b4f30:	4b5f      	ldr	r3, [pc, #380]	; (b50b0 <_Z13dataOffloaderv+0x19c>)
   b4f32:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b4f34:	f006 f848 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4f38:	495e      	ldr	r1, [pc, #376]	; (b50b4 <_Z13dataOffloaderv+0x1a0>)
}
   b4f3a:	b02d      	add	sp, #180	; 0xb4
   b4f3c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b4f40:	f004 bb41 	b.w	b95c6 <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b4f44:	f006 f840 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4f48:	495b      	ldr	r1, [pc, #364]	; (b50b8 <_Z13dataOffloaderv+0x1a4>)
        BLE.advertise(&advData);;
   b4f4a:	4d5c      	ldr	r5, [pc, #368]	; (b50bc <_Z13dataOffloaderv+0x1a8>)
    Serial.println("Waiting for CCHub connection...");
   b4f4c:	f004 fb3b 	bl	b95c6 <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b4f50:	f003 fcae 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f54:	f003 fd0a 	bl	b896c <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f58:	4604      	mov	r4, r0
   b4f5a:	b948      	cbnz	r0, b4f70 <_Z13dataOffloaderv+0x5c>
        BLE.advertise(&advData);;
   b4f5c:	f003 fca8 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f60:	4622      	mov	r2, r4
   b4f62:	4629      	mov	r1, r5
   b4f64:	f003 fd55 	bl	b8a12 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b4f68:	200a      	movs	r0, #10
   b4f6a:	f005 fc15 	bl	ba798 <delay>
    while(!BLE.connected()){
   b4f6e:	e7ef      	b.n	b4f50 <_Z13dataOffloaderv+0x3c>
    Serial.println("Starting transfer...");
   b4f70:	f006 f82a 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4f74:	4952      	ldr	r1, [pc, #328]	; (b50c0 <_Z13dataOffloaderv+0x1ac>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4f76:	4f4d      	ldr	r7, [pc, #308]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4f78:	4d52      	ldr	r5, [pc, #328]	; (b50c4 <_Z13dataOffloaderv+0x1b0>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b4f7a:	f8df 816c 	ldr.w	r8, [pc, #364]	; b50e8 <_Z13dataOffloaderv+0x1d4>
    Serial.println("Starting transfer...");
   b4f7e:	f004 fb22 	bl	b95c6 <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b4f82:	2200      	movs	r2, #0
   b4f84:	4639      	mov	r1, r7
   b4f86:	4628      	mov	r0, r5
   b4f88:	f001 fbf5 	bl	b6776 <_ZN7FatFile8openNextEPS_i>
   b4f8c:	b1f8      	cbz	r0, b4fce <_Z13dataOffloaderv+0xba>
   b4f8e:	f003 fc8f 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f92:	f003 fceb 	bl	b896c <_ZNK8particle14BleLocalDevice9connectedEv>
   b4f96:	b1d0      	cbz	r0, b4fce <_Z13dataOffloaderv+0xba>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b4f98:	221e      	movs	r2, #30
   b4f9a:	a901      	add	r1, sp, #4
   b4f9c:	4628      	mov	r0, r5
   b4f9e:	f000 fe4e 	bl	b5c3e <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b4fa2:	f006 f811 	bl	bafc8 <_Z16_fetch_usbserialv>
   b4fa6:	4641      	mov	r1, r8
   b4fa8:	aa01      	add	r2, sp, #4
   b4faa:	f7ff f9d3 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b4fae:	a801      	add	r0, sp, #4
   b4fb0:	f007 fbb5 	bl	bc71e <strlen>
   b4fb4:	ab01      	add	r3, sp, #4
   b4fb6:	3804      	subs	r0, #4
   b4fb8:	4418      	add	r0, r3
   b4fba:	f007 fbb9 	bl	bc730 <strlwr>
   b4fbe:	4942      	ldr	r1, [pc, #264]	; (b50c8 <_Z13dataOffloaderv+0x1b4>)
   b4fc0:	f007 fbfc 	bl	bc7bc <strstr>
   b4fc4:	b9d8      	cbnz	r0, b4ffe <_Z13dataOffloaderv+0xea>
            myFile.close();
   b4fc6:	4628      	mov	r0, r5
   b4fc8:	f001 fc48 	bl	b685c <_ZN7FatFile5closeEv>
   b4fcc:	e7d9      	b.n	b4f82 <_Z13dataOffloaderv+0x6e>
    logDir.close();
   b4fce:	4837      	ldr	r0, [pc, #220]	; (b50ac <_Z13dataOffloaderv+0x198>)
   b4fd0:	f001 fc44 	bl	b685c <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b4fd4:	2226      	movs	r2, #38	; 0x26
   b4fd6:	2100      	movs	r1, #0
   b4fd8:	a809      	add	r0, sp, #36	; 0x24
   b4fda:	f007 fb15 	bl	bc608 <memset>
    strcpy(fileCode,"filedone");
   b4fde:	493b      	ldr	r1, [pc, #236]	; (b50cc <_Z13dataOffloaderv+0x1b8>)
   b4fe0:	a809      	add	r0, sp, #36	; 0x24
   b4fe2:	f007 fb77 	bl	bc6d4 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b4fe6:	2300      	movs	r3, #0
   b4fe8:	2226      	movs	r2, #38	; 0x26
   b4fea:	a909      	add	r1, sp, #36	; 0x24
   b4fec:	4838      	ldr	r0, [pc, #224]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b4fee:	f003 fb4f 	bl	b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b4ff2:	4b2f      	ldr	r3, [pc, #188]	; (b50b0 <_Z13dataOffloaderv+0x19c>)
   b4ff4:	2200      	movs	r2, #0
   b4ff6:	701a      	strb	r2, [r3, #0]
}
   b4ff8:	b02d      	add	sp, #180	; 0xb4
   b4ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b4ffe:	2226      	movs	r2, #38	; 0x26
   b5000:	2100      	movs	r1, #0
   b5002:	a809      	add	r0, sp, #36	; 0x24
   b5004:	f007 fb00 	bl	bc608 <memset>
            strcpy(fileCode,"filename");
   b5008:	4932      	ldr	r1, [pc, #200]	; (b50d4 <_Z13dataOffloaderv+0x1c0>)
            while(myFile.available()){
   b500a:	4e33      	ldr	r6, [pc, #204]	; (b50d8 <_Z13dataOffloaderv+0x1c4>)
   b500c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b50d0 <_Z13dataOffloaderv+0x1bc>
            strcpy(fileCode,"filename");
   b5010:	a809      	add	r0, sp, #36	; 0x24
   b5012:	f007 fb5f 	bl	bc6d4 <strcpy>
            strcat(fileCode,namebuf);
   b5016:	a901      	add	r1, sp, #4
   b5018:	a809      	add	r0, sp, #36	; 0x24
   b501a:	f007 fb2b 	bl	bc674 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b501e:	f005 ffd3 	bl	bafc8 <_Z16_fetch_usbserialv>
   b5022:	492e      	ldr	r1, [pc, #184]	; (b50dc <_Z13dataOffloaderv+0x1c8>)
   b5024:	aa09      	add	r2, sp, #36	; 0x24
   b5026:	f7ff f995 	bl	b4354 <_ZN5Print8printlnfEPKcz>
   b502a:	2300      	movs	r3, #0
   b502c:	2226      	movs	r2, #38	; 0x26
   b502e:	a909      	add	r1, sp, #36	; 0x24
   b5030:	4827      	ldr	r0, [pc, #156]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b5032:	f003 fb2d 	bl	b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b5036:	f005 ffc7 	bl	bafc8 <_Z16_fetch_usbserialv>
   b503a:	4929      	ldr	r1, [pc, #164]	; (b50e0 <_Z13dataOffloaderv+0x1cc>)
   b503c:	aa01      	add	r2, sp, #4
   b503e:	f7ff f989 	bl	b4354 <_ZN5Print8printlnfEPKcz>
            delay(150);
   b5042:	2096      	movs	r0, #150	; 0x96
   b5044:	f005 fba8 	bl	ba798 <delay>
            noInterrupts();
   b5048:	f005 ffe4 	bl	bb014 <_Z12noInterruptsv>
            while(myFile.available()){
   b504c:	4630      	mov	r0, r6
   b504e:	f7ff f844 	bl	b40da <_ZN4File9availableEv>
   b5052:	4604      	mov	r4, r0
   b5054:	b188      	cbz	r0, b507a <_Z13dataOffloaderv+0x166>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b5056:	2264      	movs	r2, #100	; 0x64
   b5058:	2100      	movs	r1, #0
   b505a:	a813      	add	r0, sp, #76	; 0x4c
   b505c:	f007 fad4 	bl	bc608 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b5060:	aa13      	add	r2, sp, #76	; 0x4c
   b5062:	2364      	movs	r3, #100	; 0x64
   b5064:	210d      	movs	r1, #13
   b5066:	4630      	mov	r0, r6
   b5068:	f004 fb1b 	bl	b96a2 <_ZN6Stream14readBytesUntilEcPcj>
   b506c:	2300      	movs	r3, #0
   b506e:	2264      	movs	r2, #100	; 0x64
   b5070:	a913      	add	r1, sp, #76	; 0x4c
   b5072:	4648      	mov	r0, r9
   b5074:	f003 fb0c 	bl	b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b5078:	e7e8      	b.n	b504c <_Z13dataOffloaderv+0x138>
            interrupts();
   b507a:	f005 ffcd 	bl	bb018 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b507e:	2226      	movs	r2, #38	; 0x26
   b5080:	4621      	mov	r1, r4
   b5082:	a809      	add	r0, sp, #36	; 0x24
   b5084:	f007 fac0 	bl	bc608 <memset>
            strcpy(fileCode,"filecomp");
   b5088:	4916      	ldr	r1, [pc, #88]	; (b50e4 <_Z13dataOffloaderv+0x1d0>)
   b508a:	a809      	add	r0, sp, #36	; 0x24
   b508c:	f007 fb22 	bl	bc6d4 <strcpy>
   b5090:	4623      	mov	r3, r4
   b5092:	2226      	movs	r2, #38	; 0x26
   b5094:	a909      	add	r1, sp, #36	; 0x24
   b5096:	480e      	ldr	r0, [pc, #56]	; (b50d0 <_Z13dataOffloaderv+0x1bc>)
   b5098:	f003 fafa 	bl	b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b509c:	2096      	movs	r0, #150	; 0x96
   b509e:	f005 fb7b 	bl	ba798 <delay>
   b50a2:	e790      	b.n	b4fc6 <_Z13dataOffloaderv+0xb2>
   b50a4:	000bea05 	.word	0x000bea05
   b50a8:	000bea22 	.word	0x000bea22
   b50ac:	2003def0 	.word	0x2003def0
   b50b0:	2003e0e8 	.word	0x2003e0e8
   b50b4:	000bea24 	.word	0x000bea24
   b50b8:	000bea51 	.word	0x000bea51
   b50bc:	2003de64 	.word	0x2003de64
   b50c0:	000bea71 	.word	0x000bea71
   b50c4:	2003df8c 	.word	0x2003df8c
   b50c8:	000beaaf 	.word	0x000beaaf
   b50cc:	000beab4 	.word	0x000beab4
   b50d0:	2003e0e0 	.word	0x2003e0e0
   b50d4:	000beabd 	.word	0x000beabd
   b50d8:	2003df7c 	.word	0x2003df7c
   b50dc:	000beac6 	.word	0x000beac6
   b50e0:	000bead9 	.word	0x000bead9
   b50e4:	000beb01 	.word	0x000beb01
   b50e8:	000bea86 	.word	0x000bea86

000b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b50ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b50ee:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b50f0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b50f2:	b17c      	cbz	r4, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b50f4:	6863      	ldr	r3, [r4, #4]
   b50f6:	3b01      	subs	r3, #1
   b50f8:	6063      	str	r3, [r4, #4]
   b50fa:	b95b      	cbnz	r3, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b50fc:	6823      	ldr	r3, [r4, #0]
   b50fe:	4620      	mov	r0, r4
   b5100:	689b      	ldr	r3, [r3, #8]
   b5102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5104:	68a3      	ldr	r3, [r4, #8]
   b5106:	3b01      	subs	r3, #1
   b5108:	60a3      	str	r3, [r4, #8]
   b510a:	b91b      	cbnz	r3, b5114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b510c:	6823      	ldr	r3, [r4, #0]
   b510e:	4620      	mov	r0, r4
   b5110:	68db      	ldr	r3, [r3, #12]
   b5112:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5114:	4628      	mov	r0, r5
   b5116:	bd38      	pop	{r3, r4, r5, pc}

000b5118 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b511c:	b084      	sub	sp, #16
   b511e:	af02      	add	r7, sp, #8
   b5120:	4680      	mov	r8, r0
   b5122:	4691      	mov	r9, r2
   b5124:	461e      	mov	r6, r3
   b5126:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b5128:	f007 faf9 	bl	bc71e <strlen>
   b512c:	3009      	adds	r0, #9
   b512e:	f020 0107 	bic.w	r1, r0, #7
   b5132:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5136:	4640      	mov	r0, r8
   b5138:	f007 faf1 	bl	bc71e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b513c:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5140:	4925      	ldr	r1, [pc, #148]	; (b51d8 <_Z8sendDataPKchbbb+0xc0>)
    char outStr[strlen(dataOut)+2];
   b5142:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b5144:	4603      	mov	r3, r0
   b5146:	4642      	mov	r2, r8
   b5148:	4620      	mov	r0, r4
   b514a:	f002 fd3d 	bl	b7bc8 <sprintf>
    if(sendLTE || sendMode == 4){
   b514e:	f1ba 0f00 	cmp.w	sl, #0
   b5152:	d101      	bne.n	b5158 <_Z8sendDataPKchbbb+0x40>
   b5154:	2d04      	cmp	r5, #4
   b5156:	d10c      	bne.n	b5172 <_Z8sendDataPKchbbb+0x5a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5158:	4b20      	ldr	r3, [pc, #128]	; (b51dc <_Z8sendDataPKchbbb+0xc4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b515a:	4921      	ldr	r1, [pc, #132]	; (b51e0 <_Z8sendDataPKchbbb+0xc8>)
   b515c:	781b      	ldrb	r3, [r3, #0]
   b515e:	f88d 3000 	strb.w	r3, [sp]
   b5162:	4638      	mov	r0, r7
   b5164:	233c      	movs	r3, #60	; 0x3c
   b5166:	4622      	mov	r2, r4
   b5168:	f005 fce8 	bl	bab3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b516c:	1d38      	adds	r0, r7, #4
   b516e:	f7ff ffbd 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b5172:	f1b9 0f00 	cmp.w	r9, #0
   b5176:	d101      	bne.n	b517c <_Z8sendDataPKchbbb+0x64>
   b5178:	2d01      	cmp	r5, #1
   b517a:	d121      	bne.n	b51c0 <_Z8sendDataPKchbbb+0xa8>
   b517c:	f003 fb98 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5180:	f003 fbf4 	bl	b896c <_ZNK8particle14BleLocalDevice9connectedEv>
   b5184:	b1e0      	cbz	r0, b51c0 <_Z8sendDataPKchbbb+0xa8>
        uint8_t txBuf_tmp[strlen(outStr)];
   b5186:	4620      	mov	r0, r4
   b5188:	f007 fac9 	bl	bc71e <strlen>
   b518c:	3007      	adds	r0, #7
   b518e:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b5192:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b5194:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b5198:	4620      	mov	r0, r4
   b519a:	f007 fac0 	bl	bc71e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b519e:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b51a2:	4602      	mov	r2, r0
   b51a4:	4621      	mov	r1, r4
   b51a6:	4648      	mov	r0, r9
   b51a8:	f007 fa06 	bl	bc5b8 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b51ac:	4620      	mov	r0, r4
   b51ae:	f007 fab6 	bl	bc71e <strlen>
   b51b2:	2300      	movs	r3, #0
   b51b4:	4602      	mov	r2, r0
   b51b6:	4649      	mov	r1, r9
   b51b8:	480a      	ldr	r0, [pc, #40]	; (b51e4 <_Z8sendDataPKchbbb+0xcc>)
   b51ba:	f003 fa69 	bl	b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b51be:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b51c0:	b90e      	cbnz	r6, b51c6 <_Z8sendDataPKchbbb+0xae>
   b51c2:	2d02      	cmp	r5, #2
   b51c4:	d104      	bne.n	b51d0 <_Z8sendDataPKchbbb+0xb8>
        Serial1.println(outStr);
   b51c6:	f006 fb73 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b51ca:	4621      	mov	r1, r4
   b51cc:	f004 f9fb 	bl	b95c6 <_ZN5Print7printlnEPKc>
}
   b51d0:	3708      	adds	r7, #8
   b51d2:	46bd      	mov	sp, r7
   b51d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b51d8:	000beb0a 	.word	0x000beb0a
   b51dc:	2003de60 	.word	0x2003de60
   b51e0:	000beb11 	.word	0x000beb11
   b51e4:	2003e5d4 	.word	0x2003e5d4

000b51e8 <_Z16sendResponseDatav>:
void sendResponseData(){
   b51e8:	b530      	push	{r4, r5, lr}
    if(requestActive){
   b51ea:	4d27      	ldr	r5, [pc, #156]	; (b5288 <_Z16sendResponseDatav+0xa0>)
   b51ec:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b51ee:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){
   b51f0:	2b00      	cmp	r3, #0
   b51f2:	d046      	beq.n	b5282 <_Z16sendResponseDatav+0x9a>
        memset(responseStr,0,65);
   b51f4:	2241      	movs	r2, #65	; 0x41
   b51f6:	2100      	movs	r1, #0
   b51f8:	a80b      	add	r0, sp, #44	; 0x2c
   b51fa:	f007 fa05 	bl	bc608 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b51fe:	4b23      	ldr	r3, [pc, #140]	; (b528c <_Z16sendResponseDatav+0xa4>)
   b5200:	9308      	str	r3, [sp, #32]
   b5202:	4b23      	ldr	r3, [pc, #140]	; (b5290 <_Z16sendResponseDatav+0xa8>)
   b5204:	eddf 6a23 	vldr	s13, [pc, #140]	; b5294 <_Z16sendResponseDatav+0xac>
   b5208:	ed93 7a00 	vldr	s14, [r3]
   b520c:	4b22      	ldr	r3, [pc, #136]	; (b5298 <_Z16sendResponseDatav+0xb0>)
   b520e:	ee27 7a26 	vmul.f32	s14, s14, s13
        sendData(responseStr,requestActive,false,false,false);
   b5212:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMiniCond*1000),69000);
   b5214:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5218:	ed8d 7a07 	vstr	s14, [sp, #28]
   b521c:	ed93 7a00 	vldr	s14, [r3]
   b5220:	4b1e      	ldr	r3, [pc, #120]	; (b529c <_Z16sendResponseDatav+0xb4>)
   b5222:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5226:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b522a:	ed8d 7a06 	vstr	s14, [sp, #24]
   b522e:	ed93 7a00 	vldr	s14, [r3]
   b5232:	4b1b      	ldr	r3, [pc, #108]	; (b52a0 <_Z16sendResponseDatav+0xb8>)
   b5234:	ee27 7a26 	vmul.f32	s14, s14, s13
   b5238:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b523c:	ed8d 7a05 	vstr	s14, [sp, #20]
   b5240:	edd3 7a00 	vldr	s15, [r3]
   b5244:	4b17      	ldr	r3, [pc, #92]	; (b52a4 <_Z16sendResponseDatav+0xbc>)
   b5246:	ee67 7aa6 	vmul.f32	s15, s15, s13
   b524a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b524e:	edcd 7a04 	vstr	s15, [sp, #16]
   b5252:	6818      	ldr	r0, [r3, #0]
   b5254:	f006 fe0a 	bl	bbe6c <__aeabi_f2d>
   b5258:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b525c:	4b12      	ldr	r3, [pc, #72]	; (b52a8 <_Z16sendResponseDatav+0xc0>)
   b525e:	6818      	ldr	r0, [r3, #0]
   b5260:	f006 fe04 	bl	bbe6c <__aeabi_f2d>
   b5264:	2201      	movs	r2, #1
   b5266:	e9cd 0100 	strd	r0, r1, [sp]
   b526a:	4910      	ldr	r1, [pc, #64]	; (b52ac <_Z16sendResponseDatav+0xc4>)
   b526c:	a80b      	add	r0, sp, #44	; 0x2c
   b526e:	f002 fcab 	bl	b7bc8 <sprintf>
        sendData(responseStr,requestActive,false,false,false);
   b5272:	7829      	ldrb	r1, [r5, #0]
   b5274:	9400      	str	r4, [sp, #0]
   b5276:	4623      	mov	r3, r4
   b5278:	4622      	mov	r2, r4
   b527a:	a80b      	add	r0, sp, #44	; 0x2c
   b527c:	f7ff ff4c 	bl	b5118 <_Z8sendDataPKchbbb>
        requestActive = 0;
   b5280:	702c      	strb	r4, [r5, #0]
}
   b5282:	b01d      	add	sp, #116	; 0x74
   b5284:	bd30      	pop	{r4, r5, pc}
   b5286:	bf00      	nop
   b5288:	2003e0e9 	.word	0x2003e0e9
   b528c:	00010d88 	.word	0x00010d88
   b5290:	2003e580 	.word	0x2003e580
   b5294:	447a0000 	.word	0x447a0000
   b5298:	2003e578 	.word	0x2003e578
   b529c:	2003e584 	.word	0x2003e584
   b52a0:	2003e57c 	.word	0x2003e57c
   b52a4:	2003df70 	.word	0x2003df70
   b52a8:	2003debc 	.word	0x2003debc
   b52ac:	000beb19 	.word	0x000beb19

000b52b0 <_Z12statusUpdatev>:
void statusUpdate(){
   b52b0:	b570      	push	{r4, r5, r6, lr}
    if(statusReady){
   b52b2:	4e2c      	ldr	r6, [pc, #176]	; (b5364 <_Z12statusUpdatev+0xb4>)
   b52b4:	7833      	ldrb	r3, [r6, #0]
void statusUpdate(){
   b52b6:	b090      	sub	sp, #64	; 0x40
    if(statusReady){
   b52b8:	2b00      	cmp	r3, #0
   b52ba:	d049      	beq.n	b5350 <_Z12statusUpdatev+0xa0>
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b52bc:	4a2a      	ldr	r2, [pc, #168]	; (b5368 <_Z12statusUpdatev+0xb8>)
   b52be:	4b2b      	ldr	r3, [pc, #172]	; (b536c <_Z12statusUpdatev+0xbc>)
   b52c0:	6810      	ldr	r0, [r2, #0]
   b52c2:	781b      	ldrb	r3, [r3, #0]
   b52c4:	9307      	str	r3, [sp, #28]
   b52c6:	f006 fdd1 	bl	bbe6c <__aeabi_f2d>
   b52ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b52ce:	4a28      	ldr	r2, [pc, #160]	; (b5370 <_Z12statusUpdatev+0xc0>)
        Serial.println(LTEStatusCount);
   b52d0:	4c28      	ldr	r4, [pc, #160]	; (b5374 <_Z12statusUpdatev+0xc4>)
        sprintf(updateStr,"B%dABsup%d %d %.6f %.6f ",BOTNUM,battPercent,statusFlags,latitude,longitude);
   b52d2:	6810      	ldr	r0, [r2, #0]
   b52d4:	f006 fdca 	bl	bbe6c <__aeabi_f2d>
   b52d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b52dc:	4a26      	ldr	r2, [pc, #152]	; (b5378 <_Z12statusUpdatev+0xc8>)
   b52de:	9b07      	ldr	r3, [sp, #28]
   b52e0:	7812      	ldrb	r2, [r2, #0]
   b52e2:	4926      	ldr	r1, [pc, #152]	; (b537c <_Z12statusUpdatev+0xcc>)
   b52e4:	9200      	str	r2, [sp, #0]
   b52e6:	a809      	add	r0, sp, #36	; 0x24
   b52e8:	2201      	movs	r2, #1
   b52ea:	f002 fc6d 	bl	b7bc8 <sprintf>
        Serial.println(updateStr);
   b52ee:	f005 fe6b 	bl	bafc8 <_Z16_fetch_usbserialv>
   b52f2:	a909      	add	r1, sp, #36	; 0x24
   b52f4:	f004 f967 	bl	b95c6 <_ZN5Print7printlnEPKc>
        Serial.println(LTEStatusCount);
   b52f8:	f005 fe66 	bl	bafc8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b52fc:	8821      	ldrh	r1, [r4, #0]
   b52fe:	4605      	mov	r5, r0
   b5300:	220a      	movs	r2, #10
   b5302:	f004 f96a 	bl	b95da <_ZN5Print11printNumberEmh>
        n += println();
   b5306:	4628      	mov	r0, r5
   b5308:	f004 f951 	bl	b95ae <_ZN5Print7printlnEv>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){
   b530c:	4b1c      	ldr	r3, [pc, #112]	; (b5380 <_Z12statusUpdatev+0xd0>)
   b530e:	781b      	ldrb	r3, [r3, #0]
   b5310:	bb03      	cbnz	r3, b5354 <_Z12statusUpdatev+0xa4>
   b5312:	4b1c      	ldr	r3, [pc, #112]	; (b5384 <_Z12statusUpdatev+0xd4>)
   b5314:	781b      	ldrb	r3, [r3, #0]
   b5316:	b9eb      	cbnz	r3, b5354 <_Z12statusUpdatev+0xa4>
   b5318:	8823      	ldrh	r3, [r4, #0]
   b531a:	b1f3      	cbz	r3, b535a <_Z12statusUpdatev+0xaa>
   b531c:	f013 0303 	ands.w	r3, r3, #3
   b5320:	d11b      	bne.n	b535a <_Z12statusUpdatev+0xaa>
            sendData(updateStr,0,false,false,true);
   b5322:	2201      	movs	r2, #1
   b5324:	9200      	str	r2, [sp, #0]
   b5326:	4619      	mov	r1, r3
   b5328:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b532a:	a809      	add	r0, sp, #36	; 0x24
   b532c:	f7ff fef4 	bl	b5118 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;
   b5330:	8823      	ldrh	r3, [r4, #0]
   b5332:	b10b      	cbz	r3, b5338 <_Z12statusUpdatev+0x88>
   b5334:	3b01      	subs	r3, #1
   b5336:	8023      	strh	r3, [r4, #0]
        statusReady = false;
   b5338:	2400      	movs	r4, #0
        delay(100);
   b533a:	2064      	movs	r0, #100	; 0x64
        statusReady = false;
   b533c:	7034      	strb	r4, [r6, #0]
        delay(100);
   b533e:	f005 fa2b 	bl	ba798 <delay>
        sendData("B1CCptsbigbot",0,true,false,false);
   b5342:	4811      	ldr	r0, [pc, #68]	; (b5388 <_Z12statusUpdatev+0xd8>)
   b5344:	9400      	str	r4, [sp, #0]
   b5346:	4623      	mov	r3, r4
   b5348:	2201      	movs	r2, #1
   b534a:	4621      	mov	r1, r4
   b534c:	f7ff fee4 	bl	b5118 <_Z8sendDataPKchbbb>
}
   b5350:	b010      	add	sp, #64	; 0x40
   b5352:	bd70      	pop	{r4, r5, r6, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;
   b5354:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5358:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b535a:	2100      	movs	r1, #0
   b535c:	2301      	movs	r3, #1
   b535e:	9100      	str	r1, [sp, #0]
   b5360:	461a      	mov	r2, r3
   b5362:	e7e2      	b.n	b532a <_Z12statusUpdatev+0x7a>
   b5364:	2003e5d0 	.word	0x2003e5d0
   b5368:	2003df70 	.word	0x2003df70
   b536c:	2003de70 	.word	0x2003de70
   b5370:	2003debc 	.word	0x2003debc
   b5374:	2003de4a 	.word	0x2003de4a
   b5378:	2003e5b0 	.word	0x2003e5b0
   b537c:	000beb3d 	.word	0x000beb3d
   b5380:	2003de18 	.word	0x2003de18
   b5384:	2003de58 	.word	0x2003de58
   b5388:	000beb56 	.word	0x000beb56

000b538c <loop>:
void loop(){
   b538c:	b508      	push	{r3, lr}
    sensorHandler();
   b538e:	f7ff fbb3 	bl	b4af8 <_Z13sensorHandlerv>
    XBeeHandler();
   b5392:	f7ff fd35 	bl	b4e00 <_Z11XBeeHandlerv>
    statusUpdate();
   b5396:	f7ff ff8b 	bl	b52b0 <_Z12statusUpdatev>
    updateMotors();
   b539a:	f7ff fb8f 	bl	b4abc <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();
   b539e:	4b06      	ldr	r3, [pc, #24]	; (b53b8 <loop+0x2c>)
   b53a0:	781b      	ldrb	r3, [r3, #0]
   b53a2:	b10b      	cbz	r3, b53a8 <loop+0x1c>
   b53a4:	f7ff fdb6 	bl	b4f14 <_Z13dataOffloaderv>
    sendResponseData();
   b53a8:	f7ff ff1e 	bl	b51e8 <_Z16sendResponseDatav>
}
   b53ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(100);
   b53b0:	2064      	movs	r0, #100	; 0x64
   b53b2:	f005 b9f1 	b.w	ba798 <delay>
   b53b6:	bf00      	nop
   b53b8:	2003e0e8 	.word	0x2003e0e8

000b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b53be:	e9d0 5300 	ldrd	r5, r3, [r0]
   b53c2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b53c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b53c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b53ca:	42ae      	cmp	r6, r5
   b53cc:	d004      	beq.n	b53d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b53ce:	4628      	mov	r0, r5
   b53d0:	f002 fe40 	bl	b8054 <_ZN6StringD1Ev>
   b53d4:	3514      	adds	r5, #20
   b53d6:	e7f8      	b.n	b53ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b53d8:	6820      	ldr	r0, [r4, #0]
   b53da:	f002 fbe5 	bl	b7ba8 <free>
    AllocatorT::free(data_);
}
   b53de:	4620      	mov	r0, r4
   b53e0:	bd70      	pop	{r4, r5, r6, pc}

000b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b53e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53e4:	4616      	mov	r6, r2
   b53e6:	b08f      	sub	sp, #60	; 0x3c
      : _M_ptr(0), _M_refcount()
   b53e8:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b53ea:	e9c0 2200 	strd	r2, r2, [r0]
   b53ee:	4604      	mov	r4, r0
   b53f0:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b53f2:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b53f4:	4619      	mov	r1, r3
   b53f6:	a804      	add	r0, sp, #16
   b53f8:	f003 f90c 	bl	b8614 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b53fc:	9914      	ldr	r1, [sp, #80]	; 0x50
   b53fe:	4638      	mov	r0, r7
   b5400:	f003 f908 	bl	b8614 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b5404:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5406:	9302      	str	r3, [sp, #8]
   b5408:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b540a:	4620      	mov	r0, r4
   b540c:	e9cd 7300 	strd	r7, r3, [sp]
   b5410:	4632      	mov	r2, r6
   b5412:	ab04      	add	r3, sp, #16
   b5414:	4629      	mov	r1, r5
   b5416:	f003 fe73 	bl	b9100 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b541a:	4620      	mov	r0, r4
   b541c:	b00f      	add	sp, #60	; 0x3c
   b541e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5420:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5422:	4c0b      	ldr	r4, [pc, #44]	; (b5450 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5424:	7821      	ldrb	r1, [r4, #0]
   b5426:	f3bf 8f5b 	dmb	ish
   b542a:	f011 0101 	ands.w	r1, r1, #1
   b542e:	d10b      	bne.n	b5448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5430:	4620      	mov	r0, r4
   b5432:	9101      	str	r1, [sp, #4]
   b5434:	f7fe fe42 	bl	b40bc <__cxa_guard_acquire>
   b5438:	9901      	ldr	r1, [sp, #4]
   b543a:	b128      	cbz	r0, b5448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b543c:	4805      	ldr	r0, [pc, #20]	; (b5454 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b543e:	f002 fc77 	bl	b7d30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5442:	4620      	mov	r0, r4
   b5444:	f7fe fe3f 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b5448:	4802      	ldr	r0, [pc, #8]	; (b5454 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b544a:	b002      	add	sp, #8
   b544c:	bd10      	pop	{r4, pc}
   b544e:	bf00      	nop
   b5450:	2003de0c 	.word	0x2003de0c
   b5454:	2003de10 	.word	0x2003de10

000b5458 <_Z8setupSPIv>:
void setupSPI(){
   b5458:	b508      	push	{r3, lr}
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
   b545a:	f7ff ffe1 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b545e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5462:	2100      	movs	r1, #0
   b5464:	f002 fc82 	bl	b7d6c <_ZN8SPIClass5beginE14hal_spi_mode_tt>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   b5468:	f7ff ffda 	bl	b5420 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b546c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5470:	4901      	ldr	r1, [pc, #4]	; (b5478 <_Z8setupSPIv+0x20>)
   b5472:	2201      	movs	r2, #1
   b5474:	f002 bd18 	b.w	b7ea8 <_ZN8SPIClass13setClockSpeedEjj>
   b5478:	000f4240 	.word	0x000f4240

000b547c <setup>:
void setup(){
   b547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b5480:	48ae      	ldr	r0, [pc, #696]	; (b573c <setup+0x2c0>)
    setLSpeed = 90;
   b5482:	4eaf      	ldr	r6, [pc, #700]	; (b5740 <setup+0x2c4>)
   b5484:	7c03      	ldrb	r3, [r0, #16]
    setRSpeed = 90;
   b5486:	4daf      	ldr	r5, [pc, #700]	; (b5744 <setup+0x2c8>)
   b5488:	f003 0303 	and.w	r3, r3, #3
   b548c:	f043 0378 	orr.w	r3, r3, #120	; 0x78
void setup(){
   b5490:	b093      	sub	sp, #76	; 0x4c
   b5492:	7403      	strb	r3, [r0, #16]
    led_set_status_active(&d_, active, nullptr);
   b5494:	2200      	movs	r2, #0
   b5496:	2101      	movs	r1, #1
   b5498:	3004      	adds	r0, #4
   b549a:	f002 fa97 	bl	b79cc <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);
   b549e:	2101      	movs	r1, #1
   b54a0:	2002      	movs	r0, #2
   b54a2:	f006 f9bf 	bl	bb824 <pinMode>
    digitalWrite(SENSE_EN,LOW);
   b54a6:	2100      	movs	r1, #0
   b54a8:	2002      	movs	r0, #2
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54aa:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);
   b54ac:	f006 f9cb 	bl	bb846 <digitalWrite>
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54b0:	27b4      	movs	r7, #180	; 0xb4
   b54b2:	f002 f809 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    setLSpeed = 90;
   b54b6:	235a      	movs	r3, #90	; 0x5a
   b54b8:	7033      	strb	r3, [r6, #0]
    setRSpeed = 90;
   b54ba:	702b      	strb	r3, [r5, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);
   b54bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b54c0:	e9cd 4700 	strd	r4, r7, [sp]
   b54c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b54c8:	2106      	movs	r1, #6
   b54ca:	489f      	ldr	r0, [pc, #636]	; (b5748 <setup+0x2cc>)
   b54cc:	f002 fd84 	bl	b7fd8 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);
   b54d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b54d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b54d8:	e9cd 4700 	strd	r4, r7, [sp]
   b54dc:	2105      	movs	r1, #5
   b54de:	489b      	ldr	r0, [pc, #620]	; (b574c <setup+0x2d0>)
    logSensors = true;
   b54e0:	4f9b      	ldr	r7, [pc, #620]	; (b5750 <setup+0x2d4>)
    ESCR.attach(ESC_PWM_R,1000,2000);
   b54e2:	f002 fd79 	bl	b7fd8 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);
   b54e6:	7831      	ldrb	r1, [r6, #0]
   b54e8:	4897      	ldr	r0, [pc, #604]	; (b5748 <setup+0x2cc>)
    logMessages = true;
   b54ea:	4e9a      	ldr	r6, [pc, #616]	; (b5754 <setup+0x2d8>)
    ESCL.write(setLSpeed);
   b54ec:	f002 fd38 	bl	b7f60 <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);
   b54f0:	7829      	ldrb	r1, [r5, #0]
   b54f2:	4896      	ldr	r0, [pc, #600]	; (b574c <setup+0x2d0>)
   b54f4:	f002 fd34 	bl	b7f60 <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b54f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b54fc:	f005 f94c 	bl	ba798 <delay>
    BLE.on();
   b5500:	f003 f9d6 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5504:	f003 fa1e 	bl	b8944 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);          //Max transmitting power
   b5508:	f003 f9d2 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b550c:	2108      	movs	r1, #8
   b550e:	f003 fa20 	bl	b8952 <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin();
   b5512:	f005 fd59 	bl	bafc8 <_Z16_fetch_usbserialv>
   b5516:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b551a:	f005 fd45 	bl	bafa8 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b551e:	f006 f9c7 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b5522:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5526:	f005 fe1b 	bl	bb160 <_ZN11USARTSerial5beginEm>
    setupSPI();                                 //Setup SPI for BeagleBone
   b552a:	f7ff ff95 	bl	b5458 <_Z8setupSPIv>
    setupXBee();                                //Setup XBee module
   b552e:	f7ff fa97 	bl	b4a60 <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b5532:	f7ff faad 	bl	b4a90 <_Z8setupGPSv>
    setupLTE();                                 //Initialize LTE Flags
   b5536:	f7ff fa7f 	bl	b4a38 <_Z8setupLTEv>
    manualRC = true;
   b553a:	4b87      	ldr	r3, [pc, #540]	; (b5758 <setup+0x2dc>)
   b553c:	2501      	movs	r5, #1
   b553e:	701d      	strb	r5, [r3, #0]
   b5540:	f001 ffc2 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    senseTimer = millis();
   b5544:	4b85      	ldr	r3, [pc, #532]	; (b575c <setup+0x2e0>)
   b5546:	6018      	str	r0, [r3, #0]
   b5548:	f001 ffbe 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    dataTimer = millis();
   b554c:	4b84      	ldr	r3, [pc, #528]	; (b5760 <setup+0x2e4>)
   b554e:	6018      	str	r0, [r3, #0]
   b5550:	f001 ffba 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
    lastStatusTime = millis();
   b5554:	4b83      	ldr	r3, [pc, #524]	; (b5764 <setup+0x2e8>)
    logSensors = true;
   b5556:	703d      	strb	r5, [r7, #0]
    lastStatusTime = millis();
   b5558:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;
   b555a:	4b83      	ldr	r3, [pc, #524]	; (b5768 <setup+0x2ec>)
    logMessages = true;
   b555c:	7035      	strb	r5, [r6, #0]
    XBeeRxTime = 0;
   b555e:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;
   b5560:	4b82      	ldr	r3, [pc, #520]	; (b576c <setup+0x2f0>)
   b5562:	601c      	str	r4, [r3, #0]
    dataWait = false;
   b5564:	4b82      	ldr	r3, [pc, #520]	; (b5770 <setup+0x2f4>)
   b5566:	701c      	strb	r4, [r3, #0]
    offloadMode = false;
   b5568:	4b82      	ldr	r3, [pc, #520]	; (b5774 <setup+0x2f8>)
   b556a:	701c      	strb	r4, [r3, #0]
    requestActive = false;
   b556c:	4b82      	ldr	r3, [pc, #520]	; (b5778 <setup+0x2fc>)
   b556e:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;
   b5570:	4b82      	ldr	r3, [pc, #520]	; (b577c <setup+0x300>)
   b5572:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b5576:	801a      	strh	r2, [r3, #0]
    battPercent = 50;
   b5578:	4b81      	ldr	r3, [pc, #516]	; (b5780 <setup+0x304>)
   b557a:	2232      	movs	r2, #50	; 0x32
   b557c:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add BLE Characteristics for BLE serial
   b557e:	f003 f997 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5582:	4a80      	ldr	r2, [pc, #512]	; (b5784 <setup+0x308>)
   b5584:	4601      	mov	r1, r0
   b5586:	a80d      	add	r0, sp, #52	; 0x34
   b5588:	f003 fee4 	bl	b9354 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b558c:	a80d      	add	r0, sp, #52	; 0x34
   b558e:	f003 fa94 	bl	b8aba <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b5592:	f003 f98d 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5596:	4a7c      	ldr	r2, [pc, #496]	; (b5788 <setup+0x30c>)
   b5598:	4601      	mov	r1, r0
   b559a:	a80d      	add	r0, sp, #52	; 0x34
   b559c:	f003 feda 	bl	b9354 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55a0:	a80d      	add	r0, sp, #52	; 0x34
   b55a2:	f003 fa8a 	bl	b8aba <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);
   b55a6:	f003 f983 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55aa:	4a78      	ldr	r2, [pc, #480]	; (b578c <setup+0x310>)
   b55ac:	4601      	mov	r1, r0
   b55ae:	a80d      	add	r0, sp, #52	; 0x34
   b55b0:	f003 fed0 	bl	b9354 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b55b4:	a80d      	add	r0, sp, #52	; 0x34
   b55b6:	f003 fa80 	bl	b8aba <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;
   b55ba:	4b75      	ldr	r3, [pc, #468]	; (b5790 <setup+0x314>)
   b55bc:	701d      	strb	r5, [r3, #0]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b55be:	4b75      	ldr	r3, [pc, #468]	; (b5794 <setup+0x318>)
        BleUuid tempUUID(uuid);
   b55c0:	a80d      	add	r0, sp, #52	; 0x34
   b55c2:	6819      	ldr	r1, [r3, #0]
   b55c4:	f003 f826 	bl	b8614 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55c8:	a80d      	add	r0, sp, #52	; 0x34
   b55ca:	f002 ff85 	bl	b84d8 <_ZNK8particle7BleUuid4typeEv>
   b55ce:	4605      	mov	r5, r0
            uint16_t uuid16 = tempUUID.shorted();
   b55d0:	a80d      	add	r0, sp, #52	; 0x34
        if (tempUUID.type() == BleUuidType::SHORT) {
   b55d2:	2d00      	cmp	r5, #0
   b55d4:	f040 8084 	bne.w	b56e0 <setup+0x264>
            uint16_t uuid16 = tempUUID.shorted();
   b55d8:	f002 ff9a 	bl	b8510 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55dc:	9500      	str	r5, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b55de:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b55e2:	2302      	movs	r3, #2
   b55e4:	aa09      	add	r2, sp, #36	; 0x24
   b55e6:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b55e8:	486b      	ldr	r0, [pc, #428]	; (b5798 <setup+0x31c>)
   b55ea:	f003 fb91 	bl	b8d10 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b55ee:	2300      	movs	r3, #0
   b55f0:	4967      	ldr	r1, [pc, #412]	; (b5790 <setup+0x314>)
   b55f2:	4869      	ldr	r0, [pc, #420]	; (b5798 <setup+0x31c>)
   b55f4:	2208      	movs	r2, #8
   b55f6:	f003 fba9 	bl	b8d4c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b55fa:	f003 f959 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b55fe:	2200      	movs	r2, #0
   b5600:	4965      	ldr	r1, [pc, #404]	; (b5798 <setup+0x31c>)
   b5602:	f003 fa06 	bl	b8a12 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b5606:	f006 f98f 	bl	bb928 <_Z19__fetch_global_Wirev>
   b560a:	f005 fe05 	bl	bb218 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b560e:	f006 f98b 	bl	bb928 <_Z19__fetch_global_Wirev>
   b5612:	4962      	ldr	r1, [pc, #392]	; (b579c <setup+0x320>)
   b5614:	f005 fdfc 	bl	bb210 <_ZN7TwoWire8setSpeedEm>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5618:	f005 f894 	bl	ba744 <_ZN9TimeClass5monthEv>
   b561c:	9007      	str	r0, [sp, #28]
   b561e:	f005 f885 	bl	ba72c <_ZN9TimeClass3dayEv>
   b5622:	4604      	mov	r4, r0
   b5624:	f005 f896 	bl	ba754 <_ZN9TimeClass4yearEv>
   b5628:	4605      	mov	r5, r0
   b562a:	f005 f85b 	bl	ba6e4 <_ZN9TimeClass4hourEv>
   b562e:	4680      	mov	r8, r0
   b5630:	f005 f864 	bl	ba6fc <_ZN9TimeClass6minuteEv>
   b5634:	4681      	mov	r9, r0
   b5636:	f005 f86d 	bl	ba714 <_ZN9TimeClass6secondEv>
   b563a:	9b07      	ldr	r3, [sp, #28]
   b563c:	4a58      	ldr	r2, [pc, #352]	; (b57a0 <setup+0x324>)
   b563e:	9400      	str	r4, [sp, #0]
   b5640:	e9cd 9003 	strd	r9, r0, [sp, #12]
   b5644:	2110      	movs	r1, #16
   b5646:	e9cd 5801 	strd	r5, r8, [sp, #4]
   b564a:	a809      	add	r0, sp, #36	; 0x24
   b564c:	f002 fac4 	bl	b7bd8 <snprintf>
    strcpy(filename,DEF_FILENAME);
   b5650:	4954      	ldr	r1, [pc, #336]	; (b57a4 <setup+0x328>)
   b5652:	4855      	ldr	r0, [pc, #340]	; (b57a8 <setup+0x32c>)
   b5654:	f007 f83e 	bl	bc6d4 <strcpy>
    strcat(filename,timestamp);
   b5658:	a909      	add	r1, sp, #36	; 0x24
   b565a:	4853      	ldr	r0, [pc, #332]	; (b57a8 <setup+0x32c>)
   b565c:	f007 f80a 	bl	bc674 <strcat>
    strcpy(filenameMessages,filename);
   b5660:	4951      	ldr	r1, [pc, #324]	; (b57a8 <setup+0x32c>)
   b5662:	4852      	ldr	r0, [pc, #328]	; (b57ac <setup+0x330>)
   b5664:	f007 f836 	bl	bc6d4 <strcpy>
    strcat(filename,".csv");
   b5668:	4951      	ldr	r1, [pc, #324]	; (b57b0 <setup+0x334>)
   b566a:	484f      	ldr	r0, [pc, #316]	; (b57a8 <setup+0x32c>)
   b566c:	f007 f802 	bl	bc674 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5670:	4950      	ldr	r1, [pc, #320]	; (b57b4 <setup+0x338>)
   b5672:	484e      	ldr	r0, [pc, #312]	; (b57ac <setup+0x330>)
   b5674:	f006 fffe 	bl	bc674 <strcat>
    Serial.println(filename);
   b5678:	f005 fca6 	bl	bafc8 <_Z16_fetch_usbserialv>
   b567c:	494a      	ldr	r1, [pc, #296]	; (b57a8 <setup+0x32c>)
   b567e:	f003 ffa2 	bl	b95c6 <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b5682:	f005 fca1 	bl	bafc8 <_Z16_fetch_usbserialv>
   b5686:	4949      	ldr	r1, [pc, #292]	; (b57ac <setup+0x330>)
   b5688:	f003 ff9d 	bl	b95c6 <_ZN5Print7printlnEPKc>
    watchdog.start();
   b568c:	484a      	ldr	r0, [pc, #296]	; (b57b8 <setup+0x33c>)
   b568e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5692:	f7fe fdcf 	bl	b4234 <_ZN5Timer5startEj.isra.0>
    ledTimer.start();
   b5696:	4849      	ldr	r0, [pc, #292]	; (b57bc <setup+0x340>)
   b5698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b569c:	f7fe fdca 	bl	b4234 <_ZN5Timer5startEj.isra.0>
    statusPD.start();
   b56a0:	4847      	ldr	r0, [pc, #284]	; (b57c0 <setup+0x344>)
   b56a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b56a6:	f7fe fdc5 	bl	b4234 <_ZN5Timer5startEj.isra.0>
      dataMode_{dataMode}
   b56aa:	4b46      	ldr	r3, [pc, #280]	; (b57c4 <setup+0x348>)
   b56ac:	930d      	str	r3, [sp, #52]	; 0x34
   b56ae:	2300      	movs	r3, #0
   b56b0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   b56b4:	4b44      	ldr	r3, [pc, #272]	; (b57c8 <setup+0x34c>)
   b56b6:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {
   b56b8:	4844      	ldr	r0, [pc, #272]	; (b57cc <setup+0x350>)
   b56ba:	2301      	movs	r3, #1
   b56bc:	aa0d      	add	r2, sp, #52	; 0x34
   b56be:	2108      	movs	r1, #8
   b56c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   b56c4:	f7fe ffa0 	bl	b4608 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b56c8:	4604      	mov	r4, r0
   b56ca:	b980      	cbnz	r0, b56ee <setup+0x272>
        Serial.println("Error: could not connect to SD card!");
   b56cc:	f005 fc7c 	bl	bafc8 <_Z16_fetch_usbserialv>
   b56d0:	493f      	ldr	r1, [pc, #252]	; (b57d0 <setup+0x354>)
   b56d2:	f003 ff78 	bl	b95c6 <_ZN5Print7printlnEPKc>
        logSensors = false;
   b56d6:	703c      	strb	r4, [r7, #0]
        logMessages = false;
   b56d8:	7034      	strb	r4, [r6, #0]
}
   b56da:	b013      	add	sp, #76	; 0x4c
   b56dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b56e0:	f002 ff18 	bl	b8514 <_ZNK8particle7BleUuid8rawBytesEv>
   b56e4:	9400      	str	r4, [sp, #0]
   b56e6:	4602      	mov	r2, r0
   b56e8:	2310      	movs	r3, #16
   b56ea:	2107      	movs	r1, #7
   b56ec:	e77c      	b.n	b55e8 <setup+0x16c>
    if(logSensors){
   b56ee:	783b      	ldrb	r3, [r7, #0]
   b56f0:	b17b      	cbz	r3, b5712 <setup+0x296>
   b56f2:	4838      	ldr	r0, [pc, #224]	; (b57d4 <setup+0x358>)
        if(!myFile.isOpen()) myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b56f4:	7c03      	ldrb	r3, [r0, #16]
   b56f6:	b92b      	cbnz	r3, b5704 <setup+0x288>
   b56f8:	492b      	ldr	r1, [pc, #172]	; (b57a8 <setup+0x32c>)
   b56fa:	f244 2202 	movw	r2, #16898	; 0x4202
   b56fe:	3010      	adds	r0, #16
   b5700:	f7fe ff0e 	bl	b4520 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b5704:	4934      	ldr	r1, [pc, #208]	; (b57d8 <setup+0x35c>)
   b5706:	4833      	ldr	r0, [pc, #204]	; (b57d4 <setup+0x358>)
   b5708:	f003 ff5d 	bl	b95c6 <_ZN5Print7printlnEPKc>
        myFile.close();
   b570c:	4833      	ldr	r0, [pc, #204]	; (b57dc <setup+0x360>)
   b570e:	f001 f8a5 	bl	b685c <_ZN7FatFile5closeEv>
    if(logMessages){
   b5712:	7833      	ldrb	r3, [r6, #0]
   b5714:	2b00      	cmp	r3, #0
   b5716:	d0e0      	beq.n	b56da <setup+0x25e>
   b5718:	4831      	ldr	r0, [pc, #196]	; (b57e0 <setup+0x364>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b571a:	7c03      	ldrb	r3, [r0, #16]
   b571c:	b92b      	cbnz	r3, b572a <setup+0x2ae>
   b571e:	4923      	ldr	r1, [pc, #140]	; (b57ac <setup+0x330>)
   b5720:	f244 2202 	movw	r2, #16898	; 0x4202
   b5724:	3010      	adds	r0, #16
   b5726:	f7fe fefb 	bl	b4520 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b572a:	492e      	ldr	r1, [pc, #184]	; (b57e4 <setup+0x368>)
   b572c:	482c      	ldr	r0, [pc, #176]	; (b57e0 <setup+0x364>)
   b572e:	2201      	movs	r2, #1
   b5730:	f7fe fe10 	bl	b4354 <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b5734:	482c      	ldr	r0, [pc, #176]	; (b57e8 <setup+0x36c>)
   b5736:	f001 f891 	bl	b685c <_ZN7FatFile5closeEv>
}
   b573a:	e7ce      	b.n	b56da <setup+0x25e>
   b573c:	2003e590 	.word	0x2003e590
   b5740:	2003e58c 	.word	0x2003e58c
   b5744:	2003e58d 	.word	0x2003e58d
   b5748:	2003de28 	.word	0x2003de28
   b574c:	2003de38 	.word	0x2003de38
   b5750:	2003df6d 	.word	0x2003df6d
   b5754:	2003df6c 	.word	0x2003df6c
   b5758:	2003df79 	.word	0x2003df79
   b575c:	2003e588 	.word	0x2003e588
   b5760:	2003de74 	.word	0x2003de74
   b5764:	2003deb8 	.word	0x2003deb8
   b5768:	2003de5c 	.word	0x2003de5c
   b576c:	2003de24 	.word	0x2003de24
   b5770:	2003de78 	.word	0x2003de78
   b5774:	2003e0e8 	.word	0x2003e0e8
   b5778:	2003e0e9 	.word	0x2003e0e9
   b577c:	2003de4a 	.word	0x2003de4a
   b5780:	2003de70 	.word	0x2003de70
   b5784:	2003e5d4 	.word	0x2003e5d4
   b5788:	2003e0ec 	.word	0x2003e0ec
   b578c:	2003e0e0 	.word	0x2003e0e0
   b5790:	2003de19 	.word	0x2003de19
   b5794:	2003dc0c 	.word	0x2003dc0c
   b5798:	2003de64 	.word	0x2003de64
   b579c:	00061a80 	.word	0x00061a80
   b57a0:	000be9a1 	.word	0x000be9a1
   b57a4:	000beb64 	.word	0x000beb64
   b57a8:	2003de79 	.word	0x2003de79
   b57ac:	2003de97 	.word	0x2003de97
   b57b0:	000beaaf 	.word	0x000beaaf
   b57b4:	000beb6d 	.word	0x000beb6d
   b57b8:	2003e5e0 	.word	0x2003e5e0
   b57bc:	2003dec4 	.word	0x2003dec4
   b57c0:	2003e5b4 	.word	0x2003e5b4
   b57c4:	000bec28 	.word	0x000bec28
   b57c8:	007a1200 	.word	0x007a1200
   b57cc:	2003e0f4 	.word	0x2003e0f4
   b57d0:	000beb76 	.word	0x000beb76
   b57d4:	2003df7c 	.word	0x2003df7c
   b57d8:	000beb9b 	.word	0x000beb9b
   b57dc:	2003df8c 	.word	0x2003df8c
   b57e0:	2003df14 	.word	0x2003df14
   b57e4:	000bebf1 	.word	0x000bebf1
   b57e8:	2003df24 	.word	0x2003df24

000b57ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b57ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b57ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	460d      	mov	r5, r1
   b57f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b57f6:	d916      	bls.n	b5826 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b57f8:	4290      	cmp	r0, r2
   b57fa:	d215      	bcs.n	b5828 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b57fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5800:	1a75      	subs	r5, r6, r1
   b5802:	f1a1 0714 	sub.w	r7, r1, #20
   b5806:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5808:	42b7      	cmp	r7, r6
   b580a:	d01c      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b580c:	b12c      	cbz	r4, b581a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b580e:	4631      	mov	r1, r6
   b5810:	4620      	mov	r0, r4
   b5812:	f002 fc9b 	bl	b814c <_ZN6StringC1EOS_>
   b5816:	7c33      	ldrb	r3, [r6, #16]
   b5818:	7423      	strb	r3, [r4, #16]
   b581a:	4630      	mov	r0, r6
   b581c:	f002 fc1a 	bl	b8054 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5820:	3e14      	subs	r6, #20
   b5822:	3c14      	subs	r4, #20
   b5824:	e7f0      	b.n	b5808 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5826:	d00e      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5828:	42b5      	cmp	r5, r6
   b582a:	d00c      	beq.n	b5846 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b582c:	b12c      	cbz	r4, b583a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b582e:	4629      	mov	r1, r5
   b5830:	4620      	mov	r0, r4
   b5832:	f002 fc8b 	bl	b814c <_ZN6StringC1EOS_>
   b5836:	7c2b      	ldrb	r3, [r5, #16]
   b5838:	7423      	strb	r3, [r4, #16]
   b583a:	4628      	mov	r0, r5
   b583c:	f002 fc0a 	bl	b8054 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5840:	3514      	adds	r5, #20
   b5842:	3414      	adds	r4, #20
   b5844:	e7f0      	b.n	b5828 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b584c:	2300      	movs	r3, #0
   b584e:	e9c0 3300 	strd	r3, r3, [r0]
   b5852:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5854:	684f      	ldr	r7, [r1, #4]
   b5856:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5858:	4604      	mov	r4, r0
   b585a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b585c:	dd23      	ble.n	b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b585e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5862:	fb08 f007 	mul.w	r0, r8, r7
   b5866:	f002 f997 	bl	b7b98 <malloc>
            if (!d) {
   b586a:	4605      	mov	r5, r0
   b586c:	b1d8      	cbz	r0, b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b586e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5872:	fb08 1202 	mla	r2, r8, r2, r1
   b5876:	f7ff ffb9 	bl	b57ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b587a:	6820      	ldr	r0, [r4, #0]
   b587c:	f002 f994 	bl	b7ba8 <free>
        data_ = d;
   b5880:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5882:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5884:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5888:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b588c:	45b8      	cmp	r8, r7
   b588e:	d008      	beq.n	b58a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5890:	4639      	mov	r1, r7
   b5892:	4628      	mov	r0, r5
   b5894:	f002 fc74 	bl	b8180 <_ZN6StringC1ERKS_>
   b5898:	7c3b      	ldrb	r3, [r7, #16]
   b589a:	742b      	strb	r3, [r5, #16]
   b589c:	3714      	adds	r7, #20
   b589e:	3514      	adds	r5, #20
   b58a0:	e7f4      	b.n	b588c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b58a2:	6873      	ldr	r3, [r6, #4]
   b58a4:	6063      	str	r3, [r4, #4]
}
   b58a6:	4620      	mov	r0, r4
   b58a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b58ac <_GLOBAL__sub_I_SystemMode>:
   b58ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   b58b0:	4b7c      	ldr	r3, [pc, #496]	; (b5aa4 <_GLOBAL__sub_I_SystemMode+0x1f8>)
        static SPIClass instance(Interface);
   b58b2:	4c7d      	ldr	r4, [pc, #500]	; (b5aa8 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   b58b4:	2501      	movs	r5, #1
   b58b6:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b58b8:	4b7c      	ldr	r3, [pc, #496]	; (b5aac <_GLOBAL__sub_I_SystemMode+0x200>)
   b58ba:	2200      	movs	r2, #0
   b58bc:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b58c0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b58c4:	609a      	str	r2, [r3, #8]
   b58c6:	b092      	sub	sp, #72	; 0x48

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b58c8:	2003      	movs	r0, #3
   b58ca:	f002 f891 	bl	b79f0 <set_system_mode>
MicroNMEA nmea(nmeaBuffer, sizeof(nmeaBuffer));
   b58ce:	4978      	ldr	r1, [pc, #480]	; (b5ab0 <_GLOBAL__sub_I_SystemMode+0x204>)
   b58d0:	4878      	ldr	r0, [pc, #480]	; (b5ab4 <_GLOBAL__sub_I_SystemMode+0x208>)
   b58d2:	2264      	movs	r2, #100	; 0x64
   b58d4:	f000 f95e 	bl	b5b94 <_ZN9MicroNMEAC1EPvh>
SFE_UBLOX_GPS myGPS;
   b58d8:	4877      	ldr	r0, [pc, #476]	; (b5ab8 <_GLOBAL__sub_I_SystemMode+0x20c>)
   b58da:	f001 fd61 	bl	b73a0 <_ZN13SFE_UBLOX_GPSC1Ev>
   b58de:	7823      	ldrb	r3, [r4, #0]
   b58e0:	f3bf 8f5b 	dmb	ish
   b58e4:	07db      	lsls	r3, r3, #31
   b58e6:	d40a      	bmi.n	b58fe <_GLOBAL__sub_I_SystemMode+0x52>
   b58e8:	4620      	mov	r0, r4
   b58ea:	f7fe fbe7 	bl	b40bc <__cxa_guard_acquire>
   b58ee:	b130      	cbz	r0, b58fe <_GLOBAL__sub_I_SystemMode+0x52>
   b58f0:	4872      	ldr	r0, [pc, #456]	; (b5abc <_GLOBAL__sub_I_SystemMode+0x210>)
   b58f2:	4629      	mov	r1, r5
   b58f4:	f002 fa1c 	bl	b7d30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b58f8:	4620      	mov	r0, r4
   b58fa:	f7fe fbe4 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b58fe:	4b70      	ldr	r3, [pc, #448]	; (b5ac0 <_GLOBAL__sub_I_SystemMode+0x214>)
        filter_(level, filters) {
   b5900:	4d70      	ldr	r5, [pc, #448]	; (b5ac4 <_GLOBAL__sub_I_SystemMode+0x218>)
   b5902:	2264      	movs	r2, #100	; 0x64
   b5904:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5908:	4a6f      	ldr	r2, [pc, #444]	; (b5ac8 <_GLOBAL__sub_I_SystemMode+0x21c>)
   b590a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b590e:	2400      	movs	r4, #0
   b5910:	2601      	movs	r6, #1
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5912:	4a6a      	ldr	r2, [pc, #424]	; (b5abc <_GLOBAL__sub_I_SystemMode+0x210>)
   b5914:	605c      	str	r4, [r3, #4]
   b5916:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b591a:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b591e:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
   b5922:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5926:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b592a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b592e:	4b67      	ldr	r3, [pc, #412]	; (b5acc <_GLOBAL__sub_I_SystemMode+0x220>)
  File() {}
   b5930:	4a67      	ldr	r2, [pc, #412]	; (b5ad0 <_GLOBAL__sub_I_SystemMode+0x224>)
   b5932:	601a      	str	r2, [r3, #0]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5934:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   b5938:	605c      	str	r4, [r3, #4]
   b593a:	609f      	str	r7, [r3, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b593c:	611c      	str	r4, [r3, #16]
   b593e:	4b65      	ldr	r3, [pc, #404]	; (b5ad4 <_GLOBAL__sub_I_SystemMode+0x228>)
        capacity_(0) {
   b5940:	9407      	str	r4, [sp, #28]
   b5942:	601a      	str	r2, [r3, #0]
   b5944:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5948:	611c      	str	r4, [r3, #16]
   b594a:	4b63      	ldr	r3, [pc, #396]	; (b5ad8 <_GLOBAL__sub_I_SystemMode+0x22c>)
   b594c:	601a      	str	r2, [r3, #0]
   b594e:	e9c3 4701 	strd	r4, r7, [r3, #4]
   b5952:	611c      	str	r4, [r3, #16]
   b5954:	e9cd 4405 	strd	r4, r4, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b5958:	f005 fb36 	bl	bafc8 <_Z16_fetch_usbserialv>
   b595c:	a905      	add	r1, sp, #20
   b595e:	4680      	mov	r8, r0
   b5960:	a808      	add	r0, sp, #32
   b5962:	f7ff ff71 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b5966:	a908      	add	r1, sp, #32
   b5968:	a80b      	add	r0, sp, #44	; 0x2c
   b596a:	f7ff ff6d 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b596e:	4b5b      	ldr	r3, [pc, #364]	; (b5adc <_GLOBAL__sub_I_SystemMode+0x230>)
   b5970:	602b      	str	r3, [r5, #0]
   b5972:	a90b      	add	r1, sp, #44	; 0x2c
   b5974:	a80e      	add	r0, sp, #56	; 0x38
   b5976:	f7ff ff67 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b597a:	aa0e      	add	r2, sp, #56	; 0x38
   b597c:	211e      	movs	r1, #30
   b597e:	1d28      	adds	r0, r5, #4
   b5980:	f004 fb3a 	bl	b9ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5984:	a80e      	add	r0, sp, #56	; 0x38
   b5986:	f7ff fd19 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b598a:	a80b      	add	r0, sp, #44	; 0x2c
   b598c:	f7ff fd16 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5990:	4b53      	ldr	r3, [pc, #332]	; (b5ae0 <_GLOBAL__sub_I_SystemMode+0x234>)
   b5992:	602b      	str	r3, [r5, #0]
   b5994:	f8c5 8020 	str.w	r8, [r5, #32]
   b5998:	a808      	add	r0, sp, #32
   b599a:	f7ff fd0f 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b599e:	4b51      	ldr	r3, [pc, #324]	; (b5ae4 <_GLOBAL__sub_I_SystemMode+0x238>)
   b59a0:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b59a2:	f005 fb11 	bl	bafc8 <_Z16_fetch_usbserialv>
   b59a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59aa:	f005 fafd 	bl	bafa8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b59ae:	f004 f805 	bl	b99bc <_ZN5spark10LogManager8instanceEv>
   b59b2:	4629      	mov	r1, r5
   b59b4:	f004 f9f6 	bl	b9da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);                         //Log Configuration
   b59b8:	a805      	add	r0, sp, #20
   b59ba:	f7ff fcff 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL; 
   b59be:	484a      	ldr	r0, [pc, #296]	; (b5ae8 <_GLOBAL__sub_I_SystemMode+0x23c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b59c0:	4d4a      	ldr	r5, [pc, #296]	; (b5aec <_GLOBAL__sub_I_SystemMode+0x240>)
	    _M_invoker = &_My_handler::_M_invoke;
   b59c2:	f8df 8184 	ldr.w	r8, [pc, #388]	; b5b48 <_GLOBAL__sub_I_SystemMode+0x29c>
Servo ESCL; 
   b59c6:	f002 faf3 	bl	b7fb0 <_ZN5ServoC1Ev>
Servo ESCR;
   b59ca:	4849      	ldr	r0, [pc, #292]	; (b5af0 <_GLOBAL__sub_I_SystemMode+0x244>)
   b59cc:	f002 faf0 	bl	b7fb0 <_ZN5ServoC1Ev>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b59d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b59d4:	682b      	ldr	r3, [r5, #0]
   b59d6:	9300      	str	r3, [sp, #0]
   b59d8:	4b46      	ldr	r3, [pc, #280]	; (b5af4 <_GLOBAL__sub_I_SystemMode+0x248>)
   b59da:	4947      	ldr	r1, [pc, #284]	; (b5af8 <_GLOBAL__sub_I_SystemMode+0x24c>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	4847      	ldr	r0, [pc, #284]	; (b5afc <_GLOBAL__sub_I_SystemMode+0x250>)
   b59e0:	f04f 0210 	mov.w	r2, #16
   b59e4:	f7ff fcfd 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b59e8:	4b45      	ldr	r3, [pc, #276]	; (b5b00 <_GLOBAL__sub_I_SystemMode+0x254>)
   b59ea:	9402      	str	r4, [sp, #8]
   b59ec:	9301      	str	r3, [sp, #4]
   b59ee:	682b      	ldr	r3, [r5, #0]
   b59f0:	9300      	str	r3, [sp, #0]
   b59f2:	4b44      	ldr	r3, [pc, #272]	; (b5b04 <_GLOBAL__sub_I_SystemMode+0x258>)
   b59f4:	4944      	ldr	r1, [pc, #272]	; (b5b08 <_GLOBAL__sub_I_SystemMode+0x25c>)
   b59f6:	681b      	ldr	r3, [r3, #0]
   b59f8:	4844      	ldr	r0, [pc, #272]	; (b5b0c <_GLOBAL__sub_I_SystemMode+0x260>)
   b59fa:	f04f 0204 	mov.w	r2, #4
   b59fe:	f7ff fcf0 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b5a02:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5a06:	682b      	ldr	r3, [r5, #0]
   b5a08:	9300      	str	r3, [sp, #0]
   b5a0a:	4b41      	ldr	r3, [pc, #260]	; (b5b10 <_GLOBAL__sub_I_SystemMode+0x264>)
   b5a0c:	4941      	ldr	r1, [pc, #260]	; (b5b14 <_GLOBAL__sub_I_SystemMode+0x268>)
   b5a0e:	681b      	ldr	r3, [r3, #0]
   b5a10:	4841      	ldr	r0, [pc, #260]	; (b5b18 <_GLOBAL__sub_I_SystemMode+0x26c>)
	    _M_manager = &_My_handler::_M_manager;
   b5a12:	4d42      	ldr	r5, [pc, #264]	; (b5b1c <_GLOBAL__sub_I_SystemMode+0x270>)
   b5a14:	f04f 0210 	mov.w	r2, #16
   b5a18:	f7ff fce3 	bl	b53e2 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                 //Advertising data
   b5a1c:	4840      	ldr	r0, [pc, #256]	; (b5b20 <_GLOBAL__sub_I_SystemMode+0x274>)
   b5a1e:	f003 f982 	bl	b8d26 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a22:	4b40      	ldr	r3, [pc, #256]	; (b5b24 <_GLOBAL__sub_I_SystemMode+0x278>)
   b5a24:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);   //Create timer object for watchdog
   b5a26:	aa0e      	add	r2, sp, #56	; 0x38
   b5a28:	4623      	mov	r3, r4
   b5a2a:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5a2e:	483e      	ldr	r0, [pc, #248]	; (b5b28 <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5a30:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
	    _M_manager = &_My_handler::_M_manager;
   b5a34:	9510      	str	r5, [sp, #64]	; 0x40
   b5a36:	f7fe fcd9 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a3a:	a80e      	add	r0, sp, #56	; 0x38
   b5a3c:	f7fe fc98 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a40:	4b3a      	ldr	r3, [pc, #232]	; (b5b2c <_GLOBAL__sub_I_SystemMode+0x280>)
   b5a42:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(1000,LEDHandler);
   b5a44:	aa0e      	add	r2, sp, #56	; 0x38
   b5a46:	4623      	mov	r3, r4
   b5a48:	4639      	mov	r1, r7
   b5a4a:	4839      	ldr	r0, [pc, #228]	; (b5b30 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_manager = &_My_handler::_M_manager;
   b5a4c:	e9cd 5810 	strd	r5, r8, [sp, #64]	; 0x40
   b5a50:	f7fe fccc 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a54:	a80e      	add	r0, sp, #56	; 0x38
   b5a56:	f7fe fc8b 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5a5a:	4b36      	ldr	r3, [pc, #216]	; (b5b34 <_GLOBAL__sub_I_SystemMode+0x288>)
   b5a5c:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);
   b5a5e:	aa0e      	add	r2, sp, #56	; 0x38
   b5a60:	4623      	mov	r3, r4
   b5a62:	f643 2198 	movw	r1, #15000	; 0x3a98
   b5a66:	4834      	ldr	r0, [pc, #208]	; (b5b38 <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b5a68:	e9cd 5810 	strd	r5, r8, [sp, #64]	; 0x40
   b5a6c:	f7fe fcbe 	bl	b43ec <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5a70:	a80e      	add	r0, sp, #56	; 0x38
   b5a72:	f7fe fc7d 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5a76:	4622      	mov	r2, r4
   b5a78:	2114      	movs	r1, #20
   b5a7a:	4630      	mov	r0, r6
   b5a7c:	f001 ffe0 	bl	b7a40 <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5a80:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b5a82:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b5a84:	9200      	str	r2, [sp, #0]
   b5a86:	9601      	str	r6, [sp, #4]
   b5a88:	4632      	mov	r2, r6
   b5a8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b5a8e:	482b      	ldr	r0, [pc, #172]	; (b5b3c <_GLOBAL__sub_I_SystemMode+0x290>)
   b5a90:	f002 f926 	bl	b7ce0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
String xbeeBuf;
   b5a94:	492a      	ldr	r1, [pc, #168]	; (b5b40 <_GLOBAL__sub_I_SystemMode+0x294>)
   b5a96:	482b      	ldr	r0, [pc, #172]	; (b5b44 <_GLOBAL__sub_I_SystemMode+0x298>)
   b5a98:	b012      	add	sp, #72	; 0x48
   b5a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
String xbeeBuf;
   b5a9e:	f002 bb24 	b.w	b80ea <_ZN6StringC1EPK19__FlashStringHelper>
   b5aa2:	bf00      	nop
   b5aa4:	2003de60 	.word	0x2003de60
   b5aa8:	2003de00 	.word	0x2003de00
   b5aac:	2003de4c 	.word	0x2003de4c
   b5ab0:	2003e07c 	.word	0x2003e07c
   b5ab4:	2003e038 	.word	0x2003e038
   b5ab8:	2003dfb0 	.word	0x2003dfb0
   b5abc:	2003de04 	.word	0x2003de04
   b5ac0:	2003e0f4 	.word	0x2003e0f4
   b5ac4:	2003df48 	.word	0x2003df48
   b5ac8:	000bec28 	.word	0x000bec28
   b5acc:	2003df7c 	.word	0x2003df7c
   b5ad0:	000bec94 	.word	0x000bec94
   b5ad4:	2003df14 	.word	0x2003df14
   b5ad8:	2003dee0 	.word	0x2003dee0
   b5adc:	000bec50 	.word	0x000bec50
   b5ae0:	000bf018 	.word	0x000bf018
   b5ae4:	000bec7c 	.word	0x000bec7c
   b5ae8:	2003de28 	.word	0x2003de28
   b5aec:	2003dc0c 	.word	0x2003dc0c
   b5af0:	2003de38 	.word	0x2003de38
   b5af4:	2003dc18 	.word	0x2003dc18
   b5af8:	000bec16 	.word	0x000bec16
   b5afc:	2003e5d4 	.word	0x2003e5d4
   b5b00:	000b4991 	.word	0x000b4991
   b5b04:	2003dc14 	.word	0x2003dc14
   b5b08:	000bec19 	.word	0x000bec19
   b5b0c:	2003e0ec 	.word	0x2003e0ec
   b5b10:	2003dc10 	.word	0x2003dc10
   b5b14:	000bec1c 	.word	0x000bec1c
   b5b18:	2003e0e0 	.word	0x2003e0e0
   b5b1c:	000b421d 	.word	0x000b421d
   b5b20:	2003de64 	.word	0x2003de64
   b5b24:	000b4531 	.word	0x000b4531
   b5b28:	2003e5e0 	.word	0x2003e5e0
   b5b2c:	000b4465 	.word	0x000b4465
   b5b30:	2003dec4 	.word	0x2003dec4
   b5b34:	000b40f9 	.word	0x000b40f9
   b5b38:	2003e5b4 	.word	0x2003e5b4
   b5b3c:	2003e590 	.word	0x2003e590
   b5b40:	000befe0 	.word	0x000befe0
   b5b44:	2003e5fc 	.word	0x2003e5fc
   b5b48:	000b4231 	.word	0x000b4231

000b5b4c <_ZN9MicroNMEA9setBufferEPvh>:

void MicroNMEA::setBuffer(void* buf, uint8_t len)
{
	_bufferLen = len;
	_buffer = (char*)buf;
	_ptr = _buffer;
   b5b4c:	e9c0 1101 	strd	r1, r1, [r0, #4]
	_bufferLen = len;
   b5b50:	7002      	strb	r2, [r0, #0]
	if (_bufferLen) {
   b5b52:	b132      	cbz	r2, b5b62 <_ZN9MicroNMEA9setBufferEPvh+0x16>
		*_ptr = '\0';
   b5b54:	2200      	movs	r2, #0
   b5b56:	700a      	strb	r2, [r1, #0]
		_buffer[_bufferLen - 1] = '\0';
   b5b58:	7801      	ldrb	r1, [r0, #0]
   b5b5a:	6843      	ldr	r3, [r0, #4]
   b5b5c:	440b      	add	r3, r1
   b5b5e:	f803 2c01 	strb.w	r2, [r3, #-1]
	}
}
   b5b62:	4770      	bx	lr

000b5b64 <_ZN9MicroNMEA5clearEv>:


void MicroNMEA::clear(void)
{
	_navSystem = '\0';
   b5b64:	2300      	movs	r3, #0
	_numSat = 0;
	_hdop = 255;
	_isValid = false;
	_latitude = 999000000L;
   b5b66:	4a09      	ldr	r2, [pc, #36]	; (b5b8c <_ZN9MicroNMEA5clearEv+0x28>)
	_navSystem = '\0';
   b5b68:	74c3      	strb	r3, [r0, #19]
	_isValid = false;
   b5b6a:	7503      	strb	r3, [r0, #20]
	_longitude = 999000000L;
	_altitude = _speed = _course = LONG_MIN;
	_altitudeValid = false;
   b5b6c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	_year = _month = _day = 0;
   b5b70:	6303      	str	r3, [r0, #48]	; 0x30
	_hour = _minute = _second = 99;
   b5b72:	4b07      	ldr	r3, [pc, #28]	; (b5b90 <_ZN9MicroNMEA5clearEv+0x2c>)
   b5b74:	6343      	str	r3, [r0, #52]	; 0x34
	_longitude = 999000000L;
   b5b76:	e9c0 2206 	strd	r2, r2, [r0, #24]
	_numSat = 0;
   b5b7a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
	_altitude = _speed = _course = LONG_MIN;
   b5b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b5b82:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
   b5b86:	6202      	str	r2, [r0, #32]
	_numSat = 0;
   b5b88:	8703      	strh	r3, [r0, #56]	; 0x38
	_hundredths = 0;
}
   b5b8a:	4770      	bx	lr
   b5b8c:	3b8b87c0 	.word	0x3b8b87c0
   b5b90:	00636363 	.word	0x00636363

000b5b94 <_ZN9MicroNMEAC1EPvh>:
MicroNMEA::MicroNMEA(void* buf, uint8_t len) :
   b5b94:	b538      	push	{r3, r4, r5, lr}
	_unknownSentenceHandler(nullptr)
   b5b96:	2400      	movs	r4, #0
   b5b98:	e9c0 440f 	strd	r4, r4, [r0, #60]	; 0x3c
   b5b9c:	7304      	strb	r4, [r0, #12]
   b5b9e:	f8c0 400d 	str.w	r4, [r0, #13]
   b5ba2:	f8a0 4011 	strh.w	r4, [r0, #17]
	setBuffer(buf, len);
   b5ba6:	f7ff ffd1 	bl	b5b4c <_ZN9MicroNMEA9setBufferEPvh>
	clear();
   b5baa:	f7ff ffdb 	bl	b5b64 <_ZN9MicroNMEA5clearEv>
}
   b5bae:	bd38      	pop	{r3, r4, r5, pc}

000b5bb0 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5bb0:	2904      	cmp	r1, #4
   b5bb2:	d804      	bhi.n	b5bbe <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5bb4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5bb8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5bbc:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5bbe:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5bc0:	bf9b      	ittet	ls
   b5bc2:	f101 31ff 	addls.w	r1, r1, #4294967295
   b5bc6:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5bca:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5bcc:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5bce:	bf84      	itt	hi
   b5bd0:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5bd4:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5bd6:	4770      	bx	lr

000b5bd8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5bd8:	b510      	push	{r4, lr}
   b5bda:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5bdc:	3024      	adds	r0, #36	; 0x24
   b5bde:	f000 ff69 	bl	b6ab4 <_ZN8FatCache4syncEv>
   b5be2:	b128      	cbz	r0, b5bf0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b5be4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5bec:	f000 bf62 	b.w	b6ab4 <_ZN8FatCache4syncEv>
  }
   b5bf0:	bd10      	pop	{r4, pc}

000b5bf2 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5bf2:	1e41      	subs	r1, r0, #1
   b5bf4:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5bf8:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5bfa:	0842      	lsrs	r2, r0, #1
   b5bfc:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5c00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5c04:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5c08:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5c0a:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5c0c:	d1f5      	bne.n	b5bfa <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5c0e:	4770      	bx	lr

000b5c10 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b5c10:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b5c12:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b5c14:	4604      	mov	r4, r0
   b5c16:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b5c18:	b923      	cbnz	r3, b5c24 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b5c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b5c1e:	6889      	ldr	r1, [r1, #8]
   b5c20:	f000 bc16 	b.w	b6450 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b5c24:	2224      	movs	r2, #36	; 0x24
   b5c26:	2100      	movs	r1, #0
   b5c28:	f006 fcee 	bl	bc608 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b5c2c:	2310      	movs	r3, #16
  m_flags = F_READ;
   b5c2e:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5c30:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5c32:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5c34:	68ab      	ldr	r3, [r5, #8]
   b5c36:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5c38:	68eb      	ldr	r3, [r5, #12]
   b5c3a:	6223      	str	r3, [r4, #32]
}
   b5c3c:	bd38      	pop	{r3, r4, r5, pc}

000b5c3e <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b5c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c42:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b5c44:	7803      	ldrb	r3, [r0, #0]
   b5c46:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b5c4a:	4606      	mov	r6, r0
   b5c4c:	460f      	mov	r7, r1
   b5c4e:	4690      	mov	r8, r2
   b5c50:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b5c54:	2b00      	cmp	r3, #0
   b5c56:	d05d      	beq.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
   b5c58:	2a0c      	cmp	r2, #12
   b5c5a:	d95b      	bls.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b5c5c:	78c3      	ldrb	r3, [r0, #3]
   b5c5e:	b933      	cbnz	r3, b5c6e <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b5c60:	f000 fb46 	bl	b62f0 <_ZN7FatFile6getSFNEPc>
   b5c64:	4604      	mov	r4, r0
}
   b5c66:	4620      	mov	r0, r4
   b5c68:	b00d      	add	sp, #52	; 0x34
   b5c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b5c6e:	4601      	mov	r1, r0
   b5c70:	a803      	add	r0, sp, #12
   b5c72:	f7ff ffcd 	bl	b5c10 <_ZN7FatFile11openClusterEPS_>
   b5c76:	2800      	cmp	r0, #0
   b5c78:	d04c      	beq.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b5c7a:	eb07 0308 	add.w	r3, r7, r8
   b5c7e:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5c82:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b5c86:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b5c88:	78f3      	ldrb	r3, [r6, #3]
   b5c8a:	fa5f f58b 	uxtb.w	r5, fp
   b5c8e:	42ab      	cmp	r3, r5
   b5c90:	d340      	bcc.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b5c92:	88b1      	ldrh	r1, [r6, #4]
   b5c94:	eba1 010b 	sub.w	r1, r1, fp
   b5c98:	0149      	lsls	r1, r1, #5
   b5c9a:	a803      	add	r0, sp, #12
   b5c9c:	f000 fcbe 	bl	b661c <_ZN7FatFile7seekSetEm>
   b5ca0:	4604      	mov	r4, r0
   b5ca2:	2800      	cmp	r0, #0
   b5ca4:	d036      	beq.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b5ca6:	2100      	movs	r1, #0
   b5ca8:	a803      	add	r0, sp, #12
   b5caa:	f000 fc98 	bl	b65de <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5cae:	4603      	mov	r3, r0
   b5cb0:	b380      	cbz	r0, b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b5cb2:	7ac2      	ldrb	r2, [r0, #11]
   b5cb4:	2a0f      	cmp	r2, #15
   b5cb6:	d12d      	bne.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b5cb8:	7802      	ldrb	r2, [r0, #0]
   b5cba:	f002 021f 	and.w	r2, r2, #31
   b5cbe:	42aa      	cmp	r2, r5
   b5cc0:	d128      	bne.n	b5d14 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5cc2:	f10b 35ff 	add.w	r5, fp, #4294967295
   b5cc6:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b5cca:	197a      	adds	r2, r7, r5
   b5ccc:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b5cce:	4618      	mov	r0, r3
   b5cd0:	9101      	str	r1, [sp, #4]
   b5cd2:	f7ff ff6d 	bl	b5bb0 <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b5cd6:	b168      	cbz	r0, b5cf4 <_ZN7FatFile7getNameEPcj+0xb6>
   b5cd8:	45a8      	cmp	r8, r5
   b5cda:	d912      	bls.n	b5d02 <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b5cdc:	9901      	ldr	r1, [sp, #4]
   b5cde:	3101      	adds	r1, #1
   b5ce0:	287f      	cmp	r0, #127	; 0x7f
   b5ce2:	b2c9      	uxtb	r1, r1
   b5ce4:	bf28      	it	cs
   b5ce6:	203f      	movcs	r0, #63	; 0x3f
   b5ce8:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b5cea:	f802 0b01 	strb.w	r0, [r2], #1
   b5cee:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b5cf2:	d1ec      	bne.n	b5cce <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b5cf4:	45a8      	cmp	r8, r5
   b5cf6:	d904      	bls.n	b5d02 <_ZN7FatFile7getNameEPcj+0xc4>
   b5cf8:	781a      	ldrb	r2, [r3, #0]
   b5cfa:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b5cfc:	bf48      	it	mi
   b5cfe:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b5d02:	9a00      	ldr	r2, [sp, #0]
   b5d04:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b5d08:	781b      	ldrb	r3, [r3, #0]
   b5d0a:	065b      	lsls	r3, r3, #25
   b5d0c:	f10b 0b01 	add.w	fp, fp, #1
   b5d10:	d5ba      	bpl.n	b5c88 <_ZN7FatFile7getNameEPcj+0x4a>
   b5d12:	e7a8      	b.n	b5c66 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b5d14:	2400      	movs	r4, #0
   b5d16:	703c      	strb	r4, [r7, #0]
  return false;
   b5d18:	e7a5      	b.n	b5c66 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b5d1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5d20:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5d22:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5d26:	2b20      	cmp	r3, #32
   b5d28:	d0fa      	beq.n	b5d20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5d2a:	4d6a      	ldr	r5, [pc, #424]	; (b5ed4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5d2c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5d2e:	2400      	movs	r4, #0
    c = path[len];
   b5d30:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5d32:	b1c3      	cbz	r3, b5d66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5d34:	2b2f      	cmp	r3, #47	; 0x2f
   b5d36:	d016      	beq.n	b5d66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5d38:	2b5c      	cmp	r3, #92	; 0x5c
   b5d3a:	d102      	bne.n	b5d42 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5d3c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5d42:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5d46:	b2c0      	uxtb	r0, r0
   b5d48:	281d      	cmp	r0, #29
   b5d4a:	d803      	bhi.n	b5d54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5d4c:	fa25 f000 	lsr.w	r0, r5, r0
   b5d50:	07c0      	lsls	r0, r0, #31
   b5d52:	d4f3      	bmi.n	b5d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5d54:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5d58:	283c      	cmp	r0, #60	; 0x3c
   b5d5a:	d0ef      	beq.n	b5d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5d5c:	3b20      	subs	r3, #32
   b5d5e:	2b5e      	cmp	r3, #94	; 0x5e
   b5d60:	d8ec      	bhi.n	b5d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5d62:	3401      	adds	r4, #1
    c = path[len];
   b5d64:	e7e4      	b.n	b5d30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5d66:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5d68:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5d6a:	4607      	mov	r7, r0
   b5d6c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5d70:	2d20      	cmp	r5, #32
   b5d72:	d0fa      	beq.n	b5d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5d74:	2d2f      	cmp	r5, #47	; 0x2f
   b5d76:	d0f8      	beq.n	b5d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5d78:	6017      	str	r7, [r2, #0]
  while (len) {
   b5d7a:	b14c      	cbz	r4, b5d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5d7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5d80:	2a2e      	cmp	r2, #46	; 0x2e
   b5d82:	d001      	beq.n	b5d88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5d84:	2a20      	cmp	r2, #32
   b5d86:	d101      	bne.n	b5d8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5d88:	3c01      	subs	r4, #1
  while (len) {
   b5d8a:	e7f6      	b.n	b5d7a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5d8c:	2cff      	cmp	r4, #255	; 0xff
   b5d8e:	dcd5      	bgt.n	b5d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5d90:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5d94:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5d98:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5d9a:	f8c1 300d 	str.w	r3, [r1, #13]
   b5d9e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5da0:	f04f 0800 	mov.w	r8, #0
   b5da4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5da8:	2b2e      	cmp	r3, #46	; 0x2e
   b5daa:	d001      	beq.n	b5db0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5dac:	2b20      	cmp	r3, #32
   b5dae:	d102      	bne.n	b5db6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5db0:	f108 0801 	add.w	r8, r8, #1
   b5db4:	e7f6      	b.n	b5da4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5db6:	fab8 f088 	clz	r0, r8
   b5dba:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5dbc:	1e65      	subs	r5, r4, #1
   b5dbe:	1c6b      	adds	r3, r5, #1
   b5dc0:	d002      	beq.n	b5dc8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5dc2:	5d73      	ldrb	r3, [r6, r5]
   b5dc4:	2b2e      	cmp	r3, #46	; 0x2e
   b5dc6:	d114      	bne.n	b5df2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5dc8:	f04f 0900 	mov.w	r9, #0
   b5dcc:	2707      	movs	r7, #7
   b5dce:	464a      	mov	r2, r9
   b5dd0:	46ca      	mov	sl, r9
   b5dd2:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5dd6:	45a0      	cmp	r8, r4
   b5dd8:	da68      	bge.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5dda:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5dde:	2b20      	cmp	r3, #32
   b5de0:	d003      	beq.n	b5dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5de2:	2b2e      	cmp	r3, #46	; 0x2e
   b5de4:	d107      	bne.n	b5df6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5de6:	45a8      	cmp	r8, r5
   b5de8:	d012      	beq.n	b5e10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5dea:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5dec:	f108 0801 	add.w	r8, r8, #1
   b5df0:	e7f1      	b.n	b5dd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5df2:	3d01      	subs	r5, #1
   b5df4:	e7e3      	b.n	b5dbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5df6:	2b22      	cmp	r3, #34	; 0x22
   b5df8:	d008      	beq.n	b5e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5dfa:	2b7c      	cmp	r3, #124	; 0x7c
   b5dfc:	d006      	beq.n	b5e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5dfe:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5e02:	f1bc 0f05 	cmp.w	ip, #5
   b5e06:	d80a      	bhi.n	b5e1e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5e08:	2b2d      	cmp	r3, #45	; 0x2d
   b5e0a:	d012      	beq.n	b5e32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5e0c:	45a8      	cmp	r8, r5
   b5e0e:	d15b      	bne.n	b5ec8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5e10:	2f0a      	cmp	r7, #10
   b5e12:	d04a      	beq.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5e14:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5e16:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5e18:	f04f 0e10 	mov.w	lr, #16
   b5e1c:	e7e6      	b.n	b5dec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5e1e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5e22:	f1bc 0f05 	cmp.w	ip, #5
   b5e26:	d9f1      	bls.n	b5e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5e28:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5e2c:	f1bc 0f02 	cmp.w	ip, #2
   b5e30:	d9ec      	bls.n	b5e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5e32:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5e36:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5e3a:	d8e7      	bhi.n	b5e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5e3c:	45a8      	cmp	r8, r5
   b5e3e:	d0e7      	beq.n	b5e10 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5e40:	42ba      	cmp	r2, r7
   b5e42:	d830      	bhi.n	b5ea6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5e44:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5e48:	f1bc 0f19 	cmp.w	ip, #25
   b5e4c:	d81a      	bhi.n	b5e84 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5e4e:	3b20      	subs	r3, #32
        lc |= bit;
   b5e50:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5e54:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5e56:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5e5a:	f102 0c01 	add.w	ip, r2, #1
   b5e5e:	fa5f fc8c 	uxtb.w	ip, ip
   b5e62:	440a      	add	r2, r1
      if (i < 7) {
   b5e64:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5e68:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5e6a:	d801      	bhi.n	b5e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5e6c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5e70:	4662      	mov	r2, ip
   b5e72:	e7bb      	b.n	b5dec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5e74:	45a8      	cmp	r8, r5
   b5e76:	dc18      	bgt.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5e78:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5e7a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5e7c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5e7e:	f04f 0e10 	mov.w	lr, #16
   b5e82:	e7b2      	b.n	b5dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5e84:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5e88:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5e8c:	bf98      	it	ls
   b5e8e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5e92:	e7e2      	b.n	b5e5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5e94:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5e96:	2001      	movs	r0, #1
   b5e98:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5e9a:	4419      	add	r1, r3
   b5e9c:	237e      	movs	r3, #126	; 0x7e
   b5e9e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5ea0:	2331      	movs	r3, #49	; 0x31
   b5ea2:	738b      	strb	r3, [r1, #14]
   b5ea4:	e74b      	b.n	b5d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5ea6:	2f0a      	cmp	r7, #10
   b5ea8:	d1e4      	bne.n	b5e74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5eaa:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5eac:	7b4b      	ldrb	r3, [r1, #13]
   b5eae:	2b20      	cmp	r3, #32
   b5eb0:	f43f af44 	beq.w	b5d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5eb4:	2800      	cmp	r0, #0
   b5eb6:	d0ed      	beq.n	b5e94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5eb8:	ea1a 0f09 	tst.w	sl, r9
   b5ebc:	bf18      	it	ne
   b5ebe:	f04f 0902 	movne.w	r9, #2
   b5ec2:	f881 9000 	strb.w	r9, [r1]
   b5ec6:	e73a      	b.n	b5d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5ec8:	42ba      	cmp	r2, r7
   b5eca:	d8ec      	bhi.n	b5ea6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5ecc:	2000      	movs	r0, #0
      c = '_';
   b5ece:	235f      	movs	r3, #95	; 0x5f
   b5ed0:	e7c3      	b.n	b5e5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5ed2:	bf00      	nop
   b5ed4:	31000101 	.word	0x31000101

000b5ed8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5edc:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5ee0:	4606      	mov	r6, r0
   b5ee2:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5ee4:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b5ee6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5ee8:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5eec:	6861      	ldr	r1, [r4, #4]
   b5eee:	68a2      	ldr	r2, [r4, #8]
   b5ef0:	186b      	adds	r3, r5, r1
   b5ef2:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5ef4:	4411      	add	r1, r2
   b5ef6:	4291      	cmp	r1, r2
   b5ef8:	d006      	beq.n	b5f08 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b5efa:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5efe:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b5f02:	4043      	eors	r3, r0
   b5f04:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5f06:	e7f6      	b.n	b5ef6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b5f08:	f1b9 0f03 	cmp.w	r9, #3
   b5f0c:	bf28      	it	cs
   b5f0e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f12:	f109 0204 	add.w	r2, r9, #4
   b5f16:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b5f18:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5f1c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f1e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5f20:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f22:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5f24:	bf94      	ite	ls
   b5f26:	3130      	addls	r1, #48	; 0x30
   b5f28:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f2a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b5f2c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b5f2e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b5f32:	d1f1      	bne.n	b5f18 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b5f34:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b5f38:	2100      	movs	r1, #0
   b5f3a:	735f      	strb	r7, [r3, #13]
   b5f3c:	4630      	mov	r0, r6
   b5f3e:	f000 fb6d 	bl	b661c <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b5f42:	2101      	movs	r1, #1
   b5f44:	4630      	mov	r0, r6
   b5f46:	f000 fb4a 	bl	b65de <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b5f4a:	4601      	mov	r1, r0
   b5f4c:	b928      	cbnz	r0, b5f5a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b5f4e:	7870      	ldrb	r0, [r6, #1]
   b5f50:	fab0 f080 	clz	r0, r0
   b5f54:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b5f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b5f5a:	7803      	ldrb	r3, [r0, #0]
   b5f5c:	b16b      	cbz	r3, b5f7a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5f5e:	7ac3      	ldrb	r3, [r0, #11]
   b5f60:	071b      	lsls	r3, r3, #28
   b5f62:	d4ee      	bmi.n	b5f42 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5f64:	220b      	movs	r2, #11
   b5f66:	4640      	mov	r0, r8
   b5f68:	f006 fb16 	bl	bc598 <memcmp>
   b5f6c:	2800      	cmp	r0, #0
   b5f6e:	d1e8      	bne.n	b5f42 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5f70:	3501      	adds	r5, #1
   b5f72:	b2ad      	uxth	r5, r5
   b5f74:	2d64      	cmp	r5, #100	; 0x64
   b5f76:	d1b9      	bne.n	b5eec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b5f78:	e7ed      	b.n	b5f56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b5f7a:	2001      	movs	r0, #1
   b5f7c:	e7eb      	b.n	b5f56 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5f80 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f84:	ed2d 8b02 	vpush	{d8}
   b5f88:	b08b      	sub	sp, #44	; 0x2c
   b5f8a:	460d      	mov	r5, r1
   b5f8c:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5f8e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f90:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5f92:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5f96:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b5f98:	d105      	bne.n	b5fa6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b5f9a:	2000      	movs	r0, #0
}
   b5f9c:	b00b      	add	sp, #44	; 0x2c
   b5f9e:	ecbd 8b02 	vpop	{d8}
   b5fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b5fa6:	9b07      	ldr	r3, [sp, #28]
   b5fa8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b5faa:	2b00      	cmp	r3, #0
   b5fac:	d1f5      	bne.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5fae:	6853      	ldr	r3, [r2, #4]
   b5fb0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5fb2:	7813      	ldrb	r3, [r2, #0]
   b5fb4:	079c      	lsls	r4, r3, #30
   b5fb6:	bf1f      	itttt	ne
   b5fb8:	9b05      	ldrne	r3, [sp, #20]
   b5fba:	330c      	addne	r3, #12
   b5fbc:	220d      	movne	r2, #13
   b5fbe:	fbb3 f3f2 	udivne	r3, r3, r2
   b5fc2:	bf1a      	itte	ne
   b5fc4:	3301      	addne	r3, #1
   b5fc6:	b2db      	uxtbne	r3, r3
   b5fc8:	2301      	moveq	r3, #1
    seekSet(0);
   b5fca:	2100      	movs	r1, #0
   b5fcc:	4628      	mov	r0, r5
   b5fce:	9303      	str	r3, [sp, #12]
   b5fd0:	f000 fb24 	bl	b661c <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5fd4:	f107 030d 	add.w	r3, r7, #13
  }
   b5fd8:	f04f 0b00 	mov.w	fp, #0
   b5fdc:	ee08 3a10 	vmov	s16, r3
   b5fe0:	46da      	mov	sl, fp
   b5fe2:	465c      	mov	r4, fp
   b5fe4:	465e      	mov	r6, fp
   b5fe6:	f8cd b010 	str.w	fp, [sp, #16]
   b5fea:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5fec:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5fee:	2101      	movs	r1, #1
   b5ff0:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5ff2:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b5ff6:	f000 faf2 	bl	b65de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b5ffa:	4603      	mov	r3, r0
   b5ffc:	2800      	cmp	r0, #0
   b5ffe:	d171      	bne.n	b60e4 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6000:	786b      	ldrb	r3, [r5, #1]
   b6002:	2b00      	cmp	r3, #0
   b6004:	d1c9      	bne.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6006:	9b06      	ldr	r3, [sp, #24]
   b6008:	059a      	lsls	r2, r3, #22
   b600a:	d5c6      	bpl.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b600c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6010:	3b01      	subs	r3, #1
   b6012:	2b01      	cmp	r3, #1
   b6014:	d8c1      	bhi.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6016:	9b04      	ldr	r3, [sp, #16]
   b6018:	2c00      	cmp	r4, #0
   b601a:	bf08      	it	eq
   b601c:	4643      	moveq	r3, r8
   b601e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6020:	9b03      	ldr	r3, [sp, #12]
   b6022:	429c      	cmp	r4, r3
   b6024:	f0c0 80f1 	bcc.w	b620a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6028:	f1b9 0f00 	cmp.w	r9, #0
   b602c:	f040 810a 	bne.w	b6244 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6030:	9b04      	ldr	r3, [sp, #16]
   b6032:	4628      	mov	r0, r5
   b6034:	0159      	lsls	r1, r3, #5
   b6036:	f000 faf1 	bl	b661c <_ZN7FatFile7seekSetEm>
   b603a:	2800      	cmp	r0, #0
   b603c:	d0ad      	beq.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b603e:	9b03      	ldr	r3, [sp, #12]
   b6040:	f103 39ff 	add.w	r9, r3, #4294967295
   b6044:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6048:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b604a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b604e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6052:	2e00      	cmp	r6, #0
   b6054:	f000 810d 	beq.w	b6272 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6058:	2100      	movs	r1, #0
   b605a:	4628      	mov	r0, r5
   b605c:	f000 fabf 	bl	b65de <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6060:	4604      	mov	r4, r0
   b6062:	2800      	cmp	r0, #0
   b6064:	d099      	beq.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6066:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6068:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b606c:	454e      	cmp	r6, r9
   b606e:	f043 0301 	orr.w	r3, r3, #1
   b6072:	bf0c      	ite	eq
   b6074:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6078:	46b3      	movne	fp, r6
   b607a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b607e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6082:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6086:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b608a:	f107 000d 	add.w	r0, r7, #13
   b608e:	f7ff fdb0 	bl	b5bf2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6092:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6096:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6098:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b609c:	f00b 031f 	and.w	r3, fp, #31
   b60a0:	220d      	movs	r2, #13
   b60a2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b60a4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b60a8:	4353      	muls	r3, r2
   b60aa:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b60ac:	9905      	ldr	r1, [sp, #20]
   b60ae:	4299      	cmp	r1, r3
   b60b0:	f240 80d0 	bls.w	b6254 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b60b4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b60b8:	2a04      	cmp	r2, #4
   b60ba:	fa5f fe82 	uxtb.w	lr, r2
   b60be:	f102 0001 	add.w	r0, r2, #1
   b60c2:	f200 80cd 	bhi.w	b6260 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b60c6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b60ca:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b60ce:	280d      	cmp	r0, #13
   b60d0:	f103 0301 	add.w	r3, r3, #1
   b60d4:	4602      	mov	r2, r0
   b60d6:	d1e9      	bne.n	b60ac <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b60d8:	3e01      	subs	r6, #1
   b60da:	b2f6      	uxtb	r6, r6
   b60dc:	e7b9      	b.n	b6052 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b60de:	f04f 0901 	mov.w	r9, #1
   b60e2:	e783      	b.n	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b60e4:	7802      	ldrb	r2, [r0, #0]
   b60e6:	2ae5      	cmp	r2, #229	; 0xe5
   b60e8:	d000      	beq.n	b60ec <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b60ea:	b97a      	cbnz	r2, b610c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b60ec:	9904      	ldr	r1, [sp, #16]
   b60ee:	2c00      	cmp	r4, #0
   b60f0:	bf08      	it	eq
   b60f2:	4641      	moveq	r1, r8
   b60f4:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b60f6:	9903      	ldr	r1, [sp, #12]
   b60f8:	428c      	cmp	r4, r1
        freeFound++;
   b60fa:	bf3c      	itt	cc
   b60fc:	3401      	addcc	r4, #1
   b60fe:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6100:	2a00      	cmp	r2, #0
   b6102:	d080      	beq.n	b6006 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6104:	2ae5      	cmp	r2, #229	; 0xe5
   b6106:	d105      	bne.n	b6114 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6108:	2600      	movs	r6, #0
   b610a:	e76f      	b.n	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b610c:	9903      	ldr	r1, [sp, #12]
   b610e:	428c      	cmp	r4, r1
   b6110:	bf38      	it	cc
   b6112:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6114:	2a2e      	cmp	r2, #46	; 0x2e
   b6116:	d0f7      	beq.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6118:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b611a:	290f      	cmp	r1, #15
   b611c:	d14a      	bne.n	b61b4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b611e:	bb16      	cbnz	r6, b6166 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6120:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6124:	f43f af62 	beq.w	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6128:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b612c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6130:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6132:	220d      	movs	r2, #13
   b6134:	f10a 38ff 	add.w	r8, sl, #4294967295
   b6138:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b613c:	9a05      	ldr	r2, [sp, #20]
   b613e:	4542      	cmp	r2, r8
   b6140:	d9e2      	bls.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6142:	eba2 0208 	sub.w	r2, r2, r8
   b6146:	9208      	str	r2, [sp, #32]
   b6148:	2200      	movs	r2, #0
   b614a:	eb02 0108 	add.w	r1, r2, r8
   b614e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6150:	4618      	mov	r0, r3
   b6152:	b2d1      	uxtb	r1, r2
   b6154:	f7ff fd2c 	bl	b5bb0 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6158:	9908      	ldr	r1, [sp, #32]
   b615a:	428a      	cmp	r2, r1
   b615c:	d10d      	bne.n	b617a <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b615e:	2800      	cmp	r0, #0
   b6160:	bf18      	it	ne
   b6162:	2600      	movne	r6, #0
   b6164:	e742      	b.n	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6166:	f10a 3aff 	add.w	sl, sl, #4294967295
   b616a:	fa5f fa8a 	uxtb.w	sl, sl
   b616e:	4552      	cmp	r2, sl
   b6170:	d1ca      	bne.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6172:	7b5a      	ldrb	r2, [r3, #13]
   b6174:	455a      	cmp	r2, fp
   b6176:	d0dc      	beq.n	b6132 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6178:	e7c6      	b.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b617a:	28ff      	cmp	r0, #255	; 0xff
   b617c:	d8c4      	bhi.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b617e:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6182:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6186:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6188:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b618a:	bf9c      	itt	ls
   b618c:	f10e 0020 	addls.w	r0, lr, #32
   b6190:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6194:	4608      	mov	r0, r1
   b6196:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6198:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b619a:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b619e:	f1bc 0f19 	cmp.w	ip, #25
   b61a2:	bf9c      	itt	ls
   b61a4:	3120      	addls	r1, #32
   b61a6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b61a8:	4571      	cmp	r1, lr
   b61aa:	d1ad      	bne.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b61ac:	3201      	adds	r2, #1
   b61ae:	2a0d      	cmp	r2, #13
   b61b0:	d1cb      	bne.n	b614a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b61b2:	e71b      	b.n	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b61b4:	0708      	lsls	r0, r1, #28
   b61b6:	d4a7      	bmi.n	b6108 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b61b8:	b15e      	cbz	r6, b61d2 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b61ba:	f1ba 0f01 	cmp.w	sl, #1
   b61be:	f47f aeec 	bne.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b61c2:	4618      	mov	r0, r3
   b61c4:	f7ff fd15 	bl	b5bf2 <_ZN7FatFile11lfnChecksumEPh>
   b61c8:	4558      	cmp	r0, fp
   b61ca:	f47f aee6 	bne.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b61ce:	46b1      	mov	r9, r6
   b61d0:	e00e      	b.n	b61f0 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b61d2:	ee18 1a10 	vmov	r1, s16
   b61d6:	220b      	movs	r2, #11
   b61d8:	4618      	mov	r0, r3
   b61da:	f006 f9dd 	bl	bc598 <memcmp>
   b61de:	2800      	cmp	r0, #0
   b61e0:	f47f af04 	bne.w	b5fec <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b61e4:	f897 9000 	ldrb.w	r9, [r7]
   b61e8:	f019 0901 	ands.w	r9, r9, #1
   b61ec:	f47f af77 	bne.w	b60de <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b61f0:	9b06      	ldr	r3, [sp, #24]
   b61f2:	0519      	lsls	r1, r3, #20
   b61f4:	f53f aed1 	bmi.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b61f8:	9b06      	ldr	r3, [sp, #24]
   b61fa:	9807      	ldr	r0, [sp, #28]
   b61fc:	f8cd 9000 	str.w	r9, [sp]
   b6200:	4642      	mov	r2, r8
   b6202:	4629      	mov	r1, r5
   b6204:	f000 fa4d 	bl	b66a2 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6208:	e6c8      	b.n	b5f9c <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b620a:	2100      	movs	r1, #0
   b620c:	4628      	mov	r0, r5
   b620e:	f000 f9e6 	bl	b65de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6212:	b9a0      	cbnz	r0, b623e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6214:	786b      	ldrb	r3, [r5, #1]
   b6216:	2b00      	cmp	r3, #0
   b6218:	f47f aebf 	bne.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b621c:	4628      	mov	r0, r5
   b621e:	f000 f89f 	bl	b6360 <_ZN7FatFile13addDirClusterEv>
   b6222:	2800      	cmp	r0, #0
   b6224:	f43f aeb9 	beq.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6228:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b622a:	791b      	ldrb	r3, [r3, #4]
   b622c:	2b01      	cmp	r3, #1
   b622e:	f63f aefb 	bhi.w	b6028 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6232:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6234:	3410      	adds	r4, #16
   b6236:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6238:	42a3      	cmp	r3, r4
   b623a:	d8ef      	bhi.n	b621c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b623c:	e6f4      	b.n	b6028 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b623e:	3401      	adds	r4, #1
   b6240:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6242:	e6ed      	b.n	b6020 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6244:	4639      	mov	r1, r7
   b6246:	4628      	mov	r0, r5
   b6248:	f7ff fe46 	bl	b5ed8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b624c:	2800      	cmp	r0, #0
   b624e:	f47f aeef 	bne.w	b6030 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6252:	e6a2      	b.n	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6254:	bf14      	ite	ne
   b6256:	f04f 31ff 	movne.w	r1, #4294967295
   b625a:	2100      	moveq	r1, #0
   b625c:	b289      	uxth	r1, r1
   b625e:	e72b      	b.n	b60b8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6260:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6264:	bf94      	ite	ls
   b6266:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b626a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b626e:	8091      	strh	r1, [r2, #4]
   b6270:	e72d      	b.n	b60ce <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6272:	4631      	mov	r1, r6
   b6274:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6276:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b627a:	f000 f9b0 	bl	b65de <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b627e:	4604      	mov	r4, r0
   b6280:	2800      	cmp	r0, #0
   b6282:	f43f ae8a 	beq.w	b5f9a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6286:	2220      	movs	r2, #32
   b6288:	4631      	mov	r1, r6
   b628a:	f006 f9bd 	bl	bc608 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b628e:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6292:	6023      	str	r3, [r4, #0]
   b6294:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6298:	6063      	str	r3, [r4, #4]
   b629a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b629e:	8123      	strh	r3, [r4, #8]
   b62a0:	7dfb      	ldrb	r3, [r7, #23]
   b62a2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b62a4:	783b      	ldrb	r3, [r7, #0]
   b62a6:	f003 0318 	and.w	r3, r3, #24
   b62aa:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b62ac:	4b0f      	ldr	r3, [pc, #60]	; (b62ec <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b62ae:	681b      	ldr	r3, [r3, #0]
   b62b0:	b19b      	cbz	r3, b62da <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b62b2:	f104 010e 	add.w	r1, r4, #14
   b62b6:	f104 0010 	add.w	r0, r4, #16
   b62ba:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b62bc:	8a23      	ldrh	r3, [r4, #16]
   b62be:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b62c0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b62c2:	89e3      	ldrh	r3, [r4, #14]
   b62c4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b62c6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b62c8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b62cc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b62d0:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b62d4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b62d8:	e78e      	b.n	b61f8 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b62da:	2321      	movs	r3, #33	; 0x21
   b62dc:	7423      	strb	r3, [r4, #16]
   b62de:	2328      	movs	r3, #40	; 0x28
   b62e0:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b62e2:	2308      	movs	r3, #8
   b62e4:	73a6      	strb	r6, [r4, #14]
   b62e6:	73e3      	strb	r3, [r4, #15]
   b62e8:	e7e8      	b.n	b62bc <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b62ea:	bf00      	nop
   b62ec:	2003e60c 	.word	0x2003e60c

000b62f0 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b62f0:	b510      	push	{r4, lr}
   b62f2:	460c      	mov	r4, r1
    return m_attr;
   b62f4:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b62f6:	b909      	cbnz	r1, b62fc <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b62f8:	2000      	movs	r0, #0
}
   b62fa:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b62fc:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b6300:	d005      	beq.n	b630e <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b6302:	232f      	movs	r3, #47	; 0x2f
   b6304:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b6306:	2300      	movs	r3, #0
   b6308:	7063      	strb	r3, [r4, #1]
  return true;
   b630a:	2001      	movs	r0, #1
   b630c:	e7f5      	b.n	b62fa <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b630e:	f000 f865 	bl	b63dc <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6312:	2800      	cmp	r0, #0
   b6314:	d0f0      	beq.n	b62f8 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b6316:	4621      	mov	r1, r4
   b6318:	f000 f86f 	bl	b63fa <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b631c:	e7f5      	b.n	b630a <_ZN7FatFile6getSFNEPc+0x1a>

000b631e <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b631e:	b538      	push	{r3, r4, r5, lr}
   b6320:	4604      	mov	r4, r0
   b6322:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6324:	2224      	movs	r2, #36	; 0x24
   b6326:	2100      	movs	r1, #0
   b6328:	f006 f96e 	bl	bc608 <memset>

  m_vol = vol;
   b632c:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b632e:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6330:	2b10      	cmp	r3, #16
   b6332:	d003      	beq.n	b633c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6334:	2b20      	cmp	r3, #32
   b6336:	d006      	beq.n	b6346 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6338:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b633a:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b633c:	2320      	movs	r3, #32
  m_flags = F_READ;
   b633e:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6340:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6342:	70a0      	strb	r0, [r4, #2]
  return true;
   b6344:	e7f9      	b.n	b633a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6346:	2340      	movs	r3, #64	; 0x40
   b6348:	e7f9      	b.n	b633e <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b634a <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b634a:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b634c:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b634e:	f043 0304 	orr.w	r3, r3, #4
   b6352:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6354:	f100 0210 	add.w	r2, r0, #16
   b6358:	6880      	ldr	r0, [r0, #8]
   b635a:	f000 bc61 	b.w	b6c20 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b6360 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6364:	7801      	ldrb	r1, [r0, #0]
   b6366:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b636a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b636c:	d003      	beq.n	b6376 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b636e:	2600      	movs	r6, #0
}
   b6370:	4630      	mov	r0, r6
   b6372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6376:	6942      	ldr	r2, [r0, #20]
   b6378:	4b17      	ldr	r3, [pc, #92]	; (b63d8 <_ZN7FatFile13addDirClusterEv+0x78>)
   b637a:	429a      	cmp	r2, r3
   b637c:	d2f7      	bcs.n	b636e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b637e:	f7ff ffe4 	bl	b634a <_ZN7FatFile10addClusterEv>
   b6382:	4606      	mov	r6, r0
   b6384:	2800      	cmp	r0, #0
   b6386:	d0f2      	beq.n	b636e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6388:	6921      	ldr	r1, [r4, #16]
   b638a:	68a0      	ldr	r0, [r4, #8]
   b638c:	f000 fbdd 	bl	b6b4a <_ZNK9FatVolume17clusterFirstBlockEm>
   b6390:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6392:	68a0      	ldr	r0, [r4, #8]
   b6394:	2205      	movs	r2, #5
   b6396:	4639      	mov	r1, r7
   b6398:	3024      	adds	r0, #36	; 0x24
   b639a:	f000 fbb3 	bl	b6b04 <_ZN8FatCache4readEmh>
  if (!pc) {
   b639e:	4680      	mov	r8, r0
   b63a0:	2800      	cmp	r0, #0
   b63a2:	d0e4      	beq.n	b636e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b63a4:	4629      	mov	r1, r5
   b63a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   b63aa:	f006 f92d 	bl	bc608 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b63ae:	2501      	movs	r5, #1
   b63b0:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b63b2:	791a      	ldrb	r2, [r3, #4]
   b63b4:	42aa      	cmp	r2, r5
   b63b6:	d909      	bls.n	b63cc <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b63b8:	6818      	ldr	r0, [r3, #0]
   b63ba:	4642      	mov	r2, r8
   b63bc:	19e9      	adds	r1, r5, r7
   b63be:	f000 ff0e 	bl	b71de <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b63c2:	2800      	cmp	r0, #0
   b63c4:	d0d3      	beq.n	b636e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b63c6:	3501      	adds	r5, #1
   b63c8:	b2ed      	uxtb	r5, r5
   b63ca:	e7f1      	b.n	b63b0 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b63cc:	6963      	ldr	r3, [r4, #20]
   b63ce:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b63d2:	6163      	str	r3, [r4, #20]
  return true;
   b63d4:	e7cc      	b.n	b6370 <_ZN7FatFile13addDirClusterEv+0x10>
   b63d6:	bf00      	nop
   b63d8:	001ffe00 	.word	0x001ffe00

000b63dc <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b63dc:	b510      	push	{r4, lr}
   b63de:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b63e0:	6880      	ldr	r0, [r0, #8]
   b63e2:	460a      	mov	r2, r1
   b63e4:	3024      	adds	r0, #36	; 0x24
   b63e6:	69a1      	ldr	r1, [r4, #24]
   b63e8:	f000 fb8c 	bl	b6b04 <_ZN8FatCache4readEmh>
  if (!pc) {
   b63ec:	b120      	cbz	r0, b63f8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b63ee:	88a3      	ldrh	r3, [r4, #4]
   b63f0:	f003 030f 	and.w	r3, r3, #15
   b63f4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b63f8:	bd10      	pop	{r4, pc}

000b63fa <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b63fa:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b63fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63fe:	4604      	mov	r4, r0
   b6400:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b6402:	2608      	movs	r6, #8
  uint8_t j = 0;
   b6404:	4618      	mov	r0, r3
      name[j++] = '.';
   b6406:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b6408:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b640c:	2a20      	cmp	r2, #32
   b640e:	d018      	beq.n	b6442 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b6410:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b6412:	bf02      	ittt	eq
   b6414:	540f      	strbeq	r7, [r1, r0]
   b6416:	1c42      	addeq	r2, r0, #1
   b6418:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b641a:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b641c:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b6420:	bf08      	it	eq
   b6422:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b6424:	f1bc 0f19 	cmp.w	ip, #25
   b6428:	d806      	bhi.n	b6438 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b642a:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b642e:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b6432:	bf1c      	itt	ne
   b6434:	3220      	addne	r2, #32
   b6436:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b6438:	f100 0c01 	add.w	ip, r0, #1
   b643c:	540a      	strb	r2, [r1, r0]
   b643e:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b6442:	3301      	adds	r3, #1
   b6444:	b2db      	uxtb	r3, r3
   b6446:	2b0b      	cmp	r3, #11
   b6448:	d1de      	bne.n	b6408 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b644a:	2300      	movs	r3, #0
   b644c:	540b      	strb	r3, [r1, r0]
}
   b644e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6450 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b6450:	7803      	ldrb	r3, [r0, #0]
   b6452:	b90b      	cbnz	r3, b6458 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b6454:	f7ff bf63 	b.w	b631e <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b6458:	2000      	movs	r0, #0
   b645a:	4770      	bx	lr

000b645c <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b645c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6460:	7803      	ldrb	r3, [r0, #0]
   b6462:	4604      	mov	r4, r0
   b6464:	4688      	mov	r8, r1
   b6466:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b6468:	2b00      	cmp	r3, #0
   b646a:	d05d      	beq.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
   b646c:	7882      	ldrb	r2, [r0, #2]
   b646e:	07d1      	lsls	r1, r2, #31
   b6470:	d55a      	bpl.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b6472:	071a      	lsls	r2, r3, #28
   b6474:	d52d      	bpl.n	b64d2 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b6476:	69c3      	ldr	r3, [r0, #28]
   b6478:	6942      	ldr	r2, [r0, #20]
   b647a:	1a9b      	subs	r3, r3, r2
   b647c:	429d      	cmp	r5, r3
   b647e:	bf28      	it	cs
   b6480:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b6482:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b6484:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6488:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b648c:	2e00      	cmp	r6, #0
   b648e:	f000 808f 	beq.w	b65b0 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b6492:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b6494:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b6496:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b6498:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b649a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b649e:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b64a2:	d51f      	bpl.n	b64e4 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b64a4:	6a00      	ldr	r0, [r0, #32]
   b64a6:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b64a8:	68a0      	ldr	r0, [r4, #8]
   b64aa:	f1ba 0f00 	cmp.w	sl, #0
   b64ae:	d142      	bne.n	b6536 <_ZN7FatFile4readEPvj+0xda>
   b64b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b64b4:	d33f      	bcc.n	b6536 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b64b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b64b8:	4299      	cmp	r1, r3
   b64ba:	d03c      	beq.n	b6536 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b64bc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b64c0:	d252      	bcs.n	b6568 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b64c2:	6800      	ldr	r0, [r0, #0]
   b64c4:	4642      	mov	r2, r8
   b64c6:	f000 fe01 	bl	b70cc <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b64ca:	b368      	cbz	r0, b6528 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b64cc:	f44f 7700 	mov.w	r7, #512	; 0x200
   b64d0:	e044      	b.n	b655c <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b64d2:	069b      	lsls	r3, r3, #26
   b64d4:	d5d5      	bpl.n	b6482 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b64d6:	6883      	ldr	r3, [r0, #8]
   b64d8:	891a      	ldrh	r2, [r3, #8]
   b64da:	6943      	ldr	r3, [r0, #20]
   b64dc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b64e0:	b29b      	uxth	r3, r3
   b64e2:	e7cb      	b.n	b647c <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b64e4:	f890 9005 	ldrb.w	r9, [r0, #5]
   b64e8:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b64ec:	f1ba 0f00 	cmp.w	sl, #0
   b64f0:	d108      	bne.n	b6504 <_ZN7FatFile4readEPvj+0xa8>
   b64f2:	f1b9 0f00 	cmp.w	r9, #0
   b64f6:	d105      	bne.n	b6504 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b64f8:	b95b      	cbnz	r3, b6512 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b64fa:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b64fc:	bf4c      	ite	mi
   b64fe:	6a03      	ldrmi	r3, [r0, #32]
   b6500:	6a23      	ldrpl	r3, [r4, #32]
   b6502:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6504:	6921      	ldr	r1, [r4, #16]
   b6506:	68a0      	ldr	r0, [r4, #8]
   b6508:	f000 fb1f 	bl	b6b4a <_ZNK9FatVolume17clusterFirstBlockEm>
   b650c:	eb09 0100 	add.w	r1, r9, r0
   b6510:	e7ca      	b.n	b64a8 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6512:	6921      	ldr	r1, [r4, #16]
   b6514:	465a      	mov	r2, fp
   b6516:	f000 fb1e 	bl	b6b56 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b651a:	2800      	cmp	r0, #0
   b651c:	db04      	blt.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b651e:	d1f1      	bne.n	b6504 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b6520:	7823      	ldrb	r3, [r4, #0]
   b6522:	f013 0f70 	tst.w	r3, #112	; 0x70
   b6526:	d143      	bne.n	b65b0 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b6528:	7863      	ldrb	r3, [r4, #1]
   b652a:	f043 0302 	orr.w	r3, r3, #2
   b652e:	7063      	strb	r3, [r4, #1]
  return -1;
   b6530:	f04f 30ff 	mov.w	r0, #4294967295
   b6534:	e03d      	b.n	b65b2 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b6536:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b653a:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b653c:	f04f 0200 	mov.w	r2, #0
   b6540:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b6544:	bf28      	it	cs
   b6546:	4637      	movcs	r7, r6
   b6548:	f000 fadc 	bl	b6b04 <_ZN8FatCache4readEmh>
      if (!pc) {
   b654c:	2800      	cmp	r0, #0
   b654e:	d0eb      	beq.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b6550:	eb00 010a 	add.w	r1, r0, sl
   b6554:	463a      	mov	r2, r7
   b6556:	4640      	mov	r0, r8
   b6558:	f006 f82e 	bl	bc5b8 <memcpy>
    m_curPosition += n;
   b655c:	6963      	ldr	r3, [r4, #20]
   b655e:	443b      	add	r3, r7
    dst += n;
   b6560:	44b8      	add	r8, r7
    m_curPosition += n;
   b6562:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b6564:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b6566:	e791      	b.n	b648c <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b6568:	7822      	ldrb	r2, [r4, #0]
   b656a:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b656c:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b6570:	d406      	bmi.n	b6580 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b6572:	7902      	ldrb	r2, [r0, #4]
   b6574:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b6578:	b2d2      	uxtb	r2, r2
   b657a:	4592      	cmp	sl, r2
   b657c:	bf28      	it	cs
   b657e:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6580:	4299      	cmp	r1, r3
      n = 512*nb;
   b6582:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6586:	d208      	bcs.n	b659a <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b6588:	68a0      	ldr	r0, [r4, #8]
   b658a:	4653      	mov	r3, sl
   b658c:	6800      	ldr	r0, [r0, #0]
   b658e:	4642      	mov	r2, r8
   b6590:	f000 fde4 	bl	b715c <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b6594:	2800      	cmp	r0, #0
   b6596:	d1e1      	bne.n	b655c <_ZN7FatFile4readEPvj+0x100>
   b6598:	e7c6      	b.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b659a:	4453      	add	r3, sl
   b659c:	428b      	cmp	r3, r1
   b659e:	d9f3      	bls.n	b6588 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b65a0:	3024      	adds	r0, #36	; 0x24
   b65a2:	9101      	str	r1, [sp, #4]
   b65a4:	f000 fa86 	bl	b6ab4 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b65a8:	9901      	ldr	r1, [sp, #4]
   b65aa:	2800      	cmp	r0, #0
   b65ac:	d1ec      	bne.n	b6588 <_ZN7FatFile4readEPvj+0x12c>
   b65ae:	e7bb      	b.n	b6528 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b65b0:	1ba8      	subs	r0, r5, r6
}
   b65b2:	b003      	add	sp, #12
   b65b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b65b8 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b65b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b65ba:	2201      	movs	r2, #1
   b65bc:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b65c0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b65c4:	4604      	mov	r4, r0
   b65c6:	f7ff ff49 	bl	b645c <_ZN7FatFile4readEPvj>
   b65ca:	2801      	cmp	r0, #1
   b65cc:	bf0a      	itet	eq
   b65ce:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b65d2:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b65d6:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b65da:	b002      	add	sp, #8
   b65dc:	bd70      	pop	{r4, r5, r6, pc}

000b65de <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b65de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b65e0:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b65e2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b65e6:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b65e8:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b65ec:	d000      	beq.n	b65f0 <_ZN7FatFile12readDirCacheEb+0x12>
   b65ee:	b999      	cbnz	r1, b6618 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b65f0:	2201      	movs	r2, #1
   b65f2:	f10d 0107 	add.w	r1, sp, #7
   b65f6:	4620      	mov	r0, r4
   b65f8:	f7ff ff30 	bl	b645c <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b65fc:	b240      	sxtb	r0, r0
   b65fe:	2801      	cmp	r0, #1
   b6600:	d002      	beq.n	b6608 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b6602:	2000      	movs	r0, #0
}
   b6604:	b003      	add	sp, #12
   b6606:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b6608:	6963      	ldr	r3, [r4, #20]
   b660a:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b660c:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b660e:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b6610:	3030      	adds	r0, #48	; 0x30
   b6612:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b6616:	e7f5      	b.n	b6604 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b6618:	3320      	adds	r3, #32
   b661a:	e7f7      	b.n	b660c <_ZN7FatFile12readDirCacheEb+0x2e>

000b661c <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b661c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b6620:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b6622:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b6624:	4604      	mov	r4, r0
   b6626:	460d      	mov	r5, r1
  if (!isOpen()) {
   b6628:	b162      	cbz	r2, b6644 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b662a:	6940      	ldr	r0, [r0, #20]
   b662c:	4288      	cmp	r0, r1
   b662e:	d002      	beq.n	b6636 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b6630:	b919      	cbnz	r1, b663a <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b6632:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b6634:	6165      	str	r5, [r4, #20]
    return true;
   b6636:	2001      	movs	r0, #1
   b6638:	e006      	b.n	b6648 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b663a:	0716      	lsls	r6, r2, #28
   b663c:	d506      	bpl.n	b664c <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b663e:	69e3      	ldr	r3, [r4, #28]
   b6640:	428b      	cmp	r3, r1
   b6642:	d20b      	bcs.n	b665c <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b6644:	6127      	str	r7, [r4, #16]
  return false;
   b6646:	2000      	movs	r0, #0
}
   b6648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b664c:	0691      	lsls	r1, r2, #26
   b664e:	d505      	bpl.n	b665c <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b6650:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b6652:	891b      	ldrh	r3, [r3, #8]
   b6654:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b6658:	d9ec      	bls.n	b6634 <_ZN7FatFile7seekSetEm+0x18>
   b665a:	e7f3      	b.n	b6644 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b665c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b6660:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b6664:	1e43      	subs	r3, r0, #1
   b6666:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b666a:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b666c:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b666e:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b6670:	42b3      	cmp	r3, r6
   b6672:	d800      	bhi.n	b6676 <_ZN7FatFile7seekSetEm+0x5a>
   b6674:	b998      	cbnz	r0, b669e <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b6676:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b6678:	bf4c      	ite	mi
   b667a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b667e:	6a23      	ldrpl	r3, [r4, #32]
   b6680:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b6682:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b6686:	2e00      	cmp	r6, #0
   b6688:	d0d4      	beq.n	b6634 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b668a:	6921      	ldr	r1, [r4, #16]
   b668c:	68a0      	ldr	r0, [r4, #8]
   b668e:	4642      	mov	r2, r8
   b6690:	f000 fa61 	bl	b6b56 <_ZN9FatVolume6fatGetEmPm>
   b6694:	2800      	cmp	r0, #0
   b6696:	f106 36ff 	add.w	r6, r6, #4294967295
   b669a:	dcf4      	bgt.n	b6686 <_ZN7FatFile7seekSetEm+0x6a>
   b669c:	e7d2      	b.n	b6644 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b669e:	1af6      	subs	r6, r6, r3
   b66a0:	e7ef      	b.n	b6682 <_ZN7FatFile7seekSetEm+0x66>

000b66a2 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b66a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66a4:	460f      	mov	r7, r1
   b66a6:	4604      	mov	r4, r0
   b66a8:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b66aa:	2100      	movs	r1, #0
   b66ac:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b66ae:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b66b0:	f005 ffaa 	bl	bc608 <memset>
  m_vol = dirFile->m_vol;
   b66b4:	68b8      	ldr	r0, [r7, #8]
   b66b6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b66b8:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b66ba:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b66be:	6a3b      	ldr	r3, [r7, #32]
   b66c0:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b66c2:	016a      	lsls	r2, r5, #5
   b66c4:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b66c8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b66cc:	071f      	lsls	r7, r3, #28
   b66ce:	d444      	bmi.n	b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b66d0:	f003 0317 	and.w	r3, r3, #23
   b66d4:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b66d6:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b66da:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b66de:	bf04      	itt	eq
   b66e0:	f043 0308 	orreq.w	r3, r3, #8
   b66e4:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b66e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b66ea:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b66ec:	f006 0303 	and.w	r3, r6, #3
   b66f0:	2b01      	cmp	r3, #1
   b66f2:	d02c      	beq.n	b674e <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b66f4:	2b02      	cmp	r3, #2
   b66f6:	d028      	beq.n	b674a <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b66f8:	bb7b      	cbnz	r3, b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b66fa:	0571      	lsls	r1, r6, #21
   b66fc:	d42d      	bmi.n	b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b66fe:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b6700:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b6702:	78a1      	ldrb	r1, [r4, #2]
   b6704:	078b      	lsls	r3, r1, #30
   b6706:	d504      	bpl.n	b6712 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b6708:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b670a:	06df      	lsls	r7, r3, #27
   b670c:	d425      	bmi.n	b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b670e:	07dd      	lsls	r5, r3, #31
   b6710:	d423      	bmi.n	b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b6712:	11b3      	asrs	r3, r6, #6
   b6714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b6718:	f006 0508 	and.w	r5, r6, #8
   b671c:	432b      	orrs	r3, r5
   b671e:	430b      	orrs	r3, r1
   b6720:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b6722:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b6724:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6726:	1883      	adds	r3, r0, r2
   b6728:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b672c:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b6730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b6734:	0572      	lsls	r2, r6, #21
   b6736:	d513      	bpl.n	b6760 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6738:	b959      	cbnz	r1, b6752 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b673a:	78a3      	ldrb	r3, [r4, #2]
   b673c:	f043 0304 	orr.w	r3, r3, #4
   b6740:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6742:	0473      	lsls	r3, r6, #17
   b6744:	d410      	bmi.n	b6768 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b6746:	2001      	movs	r0, #1
}
   b6748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b674a:	2303      	movs	r3, #3
   b674c:	e7d8      	b.n	b6700 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b674e:	2302      	movs	r3, #2
   b6750:	e7d6      	b.n	b6700 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b6752:	f000 faa0 	bl	b6c96 <_ZN9FatVolume9freeChainEm>
   b6756:	2800      	cmp	r0, #0
   b6758:	d1ef      	bne.n	b673a <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b675a:	2000      	movs	r0, #0
   b675c:	7020      	strb	r0, [r4, #0]
  return false;
   b675e:	e7f3      	b.n	b6748 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b6760:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b6762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6764:	61e3      	str	r3, [r4, #28]
   b6766:	e7ec      	b.n	b6742 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b6768:	69e1      	ldr	r1, [r4, #28]
   b676a:	4620      	mov	r0, r4
   b676c:	f7ff ff56 	bl	b661c <_ZN7FatFile7seekSetEm>
   b6770:	2800      	cmp	r0, #0
   b6772:	d1e8      	bne.n	b6746 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b6774:	e7f1      	b.n	b675a <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b6776 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b6776:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b677a:	7803      	ldrb	r3, [r0, #0]
   b677c:	4607      	mov	r7, r0
   b677e:	460d      	mov	r5, r1
   b6780:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b6782:	bb53      	cbnz	r3, b67da <_ZN7FatFile8openNextEPS_i+0x64>
   b6784:	780b      	ldrb	r3, [r1, #0]
   b6786:	f013 0f70 	tst.w	r3, #112	; 0x70
   b678a:	d026      	beq.n	b67da <_ZN7FatFile8openNextEPS_i+0x64>
   b678c:	694c      	ldr	r4, [r1, #20]
   b678e:	f014 041f 	ands.w	r4, r4, #31
   b6792:	d122      	bne.n	b67da <_ZN7FatFile8openNextEPS_i+0x64>
   b6794:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b6796:	2100      	movs	r1, #0
   b6798:	4628      	mov	r0, r5
    return m_curPosition;
   b679a:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b679e:	f7ff ff1e 	bl	b65de <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b67a2:	b1d0      	cbz	r0, b67da <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b67a4:	7806      	ldrb	r6, [r0, #0]
   b67a6:	b1c6      	cbz	r6, b67da <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b67a8:	2e2e      	cmp	r6, #46	; 0x2e
   b67aa:	d010      	beq.n	b67ce <_ZN7FatFile8openNextEPS_i+0x58>
   b67ac:	2ee5      	cmp	r6, #229	; 0xe5
   b67ae:	d00e      	beq.n	b67ce <_ZN7FatFile8openNextEPS_i+0x58>
   b67b0:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b67b2:	071a      	lsls	r2, r3, #28
   b67b4:	d413      	bmi.n	b67de <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b67b6:	b964      	cbnz	r4, b67d2 <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b67b8:	9400      	str	r4, [sp, #0]
   b67ba:	4653      	mov	r3, sl
   b67bc:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b67c0:	4629      	mov	r1, r5
   b67c2:	4638      	mov	r0, r7
   b67c4:	f7ff ff6d 	bl	b66a2 <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b67c8:	b002      	add	sp, #8
   b67ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b67ce:	2400      	movs	r4, #0
   b67d0:	e7e1      	b.n	b6796 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b67d2:	f7ff fa0e 	bl	b5bf2 <_ZN7FatFile11lfnChecksumEPh>
   b67d6:	4540      	cmp	r0, r8
   b67d8:	d0ee      	beq.n	b67b8 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b67da:	2000      	movs	r0, #0
   b67dc:	e7f4      	b.n	b67c8 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b67de:	2b0f      	cmp	r3, #15
   b67e0:	d1f5      	bne.n	b67ce <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b67e2:	0673      	lsls	r3, r6, #25
   b67e4:	d5d7      	bpl.n	b6796 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b67e6:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b67ea:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b67ee:	e7d2      	b.n	b6796 <_ZN7FatFile8openNextEPS_i+0x20>

000b67f0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b67f0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b67f2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b67f4:	4604      	mov	r4, r0
  if (!isOpen()) {
   b67f6:	b90b      	cbnz	r3, b67fc <_ZN7FatFile4syncEv+0xc>
    return true;
   b67f8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b67fa:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b67fc:	7883      	ldrb	r3, [r0, #2]
   b67fe:	075a      	lsls	r2, r3, #29
   b6800:	d523      	bpl.n	b684a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6802:	2101      	movs	r1, #1
   b6804:	f7ff fdea 	bl	b63dc <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6808:	4605      	mov	r5, r0
   b680a:	b928      	cbnz	r0, b6818 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b680c:	7863      	ldrb	r3, [r4, #1]
   b680e:	f043 0301 	orr.w	r3, r3, #1
   b6812:	7063      	strb	r3, [r4, #1]
  return false;
   b6814:	2000      	movs	r0, #0
   b6816:	e7f0      	b.n	b67fa <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b6818:	7803      	ldrb	r3, [r0, #0]
   b681a:	2be5      	cmp	r3, #229	; 0xe5
   b681c:	d0f6      	beq.n	b680c <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b681e:	7823      	ldrb	r3, [r4, #0]
   b6820:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b6822:	bf44      	itt	mi
   b6824:	69e3      	ldrmi	r3, [r4, #28]
   b6826:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b6828:	6a23      	ldr	r3, [r4, #32]
   b682a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b682c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b682e:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b6830:	4b09      	ldr	r3, [pc, #36]	; (b6858 <_ZN7FatFile4syncEv+0x68>)
   b6832:	681b      	ldr	r3, [r3, #0]
   b6834:	b12b      	cbz	r3, b6842 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b6836:	f100 0116 	add.w	r1, r0, #22
   b683a:	3018      	adds	r0, #24
   b683c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b683e:	8b2b      	ldrh	r3, [r5, #24]
   b6840:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b6842:	78a3      	ldrb	r3, [r4, #2]
   b6844:	f023 0304 	bic.w	r3, r3, #4
   b6848:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b684a:	68a0      	ldr	r0, [r4, #8]
   b684c:	f7ff f9c4 	bl	b5bd8 <_ZN9FatVolume9cacheSyncEv>
   b6850:	2800      	cmp	r0, #0
   b6852:	d0db      	beq.n	b680c <_ZN7FatFile4syncEv+0x1c>
   b6854:	e7d0      	b.n	b67f8 <_ZN7FatFile4syncEv+0x8>
   b6856:	bf00      	nop
   b6858:	2003e60c 	.word	0x2003e60c

000b685c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b685c:	b510      	push	{r4, lr}
   b685e:	4604      	mov	r4, r0
  bool rtn = sync();
   b6860:	f7ff ffc6 	bl	b67f0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b6864:	2300      	movs	r3, #0
   b6866:	7023      	strb	r3, [r4, #0]
}
   b6868:	bd10      	pop	{r4, pc}

000b686a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b686a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b686c:	b093      	sub	sp, #76	; 0x4c
   b686e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6870:	2300      	movs	r3, #0
   b6872:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b6874:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b6876:	9201      	str	r2, [sp, #4]
   b6878:	4606      	mov	r6, r0
   b687a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b687c:	b113      	cbz	r3, b6884 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b687e:	2000      	movs	r0, #0
}
   b6880:	b013      	add	sp, #76	; 0x4c
   b6882:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b6884:	780b      	ldrb	r3, [r1, #0]
   b6886:	f013 0f70 	tst.w	r3, #112	; 0x70
   b688a:	d0f8      	beq.n	b687e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b688c:	7813      	ldrb	r3, [r2, #0]
   b688e:	2b2f      	cmp	r3, #47	; 0x2f
   b6890:	d112      	bne.n	b68b8 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6892:	9a01      	ldr	r2, [sp, #4]
   b6894:	7813      	ldrb	r3, [r2, #0]
   b6896:	2b2f      	cmp	r3, #47	; 0x2f
   b6898:	d102      	bne.n	b68a0 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b689a:	3201      	adds	r2, #1
   b689c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b689e:	e7f8      	b.n	b6892 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b68a0:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b68a2:	b91b      	cbnz	r3, b68ac <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b68a4:	4630      	mov	r0, r6
   b68a6:	f7ff fdd3 	bl	b6450 <_ZN7FatFile8openRootEP9FatVolume>
   b68aa:	e7e9      	b.n	b6880 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b68ac:	a809      	add	r0, sp, #36	; 0x24
   b68ae:	f7ff fd36 	bl	b631e <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b68b2:	2800      	cmp	r0, #0
   b68b4:	d0e3      	beq.n	b687e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b68b6:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b68b8:	9801      	ldr	r0, [sp, #4]
   b68ba:	aa01      	add	r2, sp, #4
   b68bc:	a903      	add	r1, sp, #12
   b68be:	f7ff fa2d 	bl	b5d1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b68c2:	2800      	cmp	r0, #0
   b68c4:	d0db      	beq.n	b687e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b68c6:	9b01      	ldr	r3, [sp, #4]
   b68c8:	781b      	ldrb	r3, [r3, #0]
   b68ca:	b19b      	cbz	r3, b68f4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b68cc:	2300      	movs	r3, #0
   b68ce:	aa03      	add	r2, sp, #12
   b68d0:	4621      	mov	r1, r4
   b68d2:	4630      	mov	r0, r6
   b68d4:	f7ff fb54 	bl	b5f80 <_ZN7FatFile4openEPS_P7fname_ti>
   b68d8:	2800      	cmp	r0, #0
   b68da:	d0d0      	beq.n	b687e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b68dc:	4635      	mov	r5, r6
   b68de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68e0:	ac09      	add	r4, sp, #36	; 0x24
   b68e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68e8:	682b      	ldr	r3, [r5, #0]
   b68ea:	6023      	str	r3, [r4, #0]
    close();
   b68ec:	4630      	mov	r0, r6
   b68ee:	f7ff ffb5 	bl	b685c <_ZN7FatFile5closeEv>
  while (1) {
   b68f2:	e7e0      	b.n	b68b6 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b68f4:	463b      	mov	r3, r7
   b68f6:	aa03      	add	r2, sp, #12
   b68f8:	4621      	mov	r1, r4
   b68fa:	4630      	mov	r0, r6
   b68fc:	f7ff fb40 	bl	b5f80 <_ZN7FatFile4openEPS_P7fname_ti>
   b6900:	e7be      	b.n	b6880 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6904 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6908:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b690a:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b690c:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b690e:	4604      	mov	r4, r0
   b6910:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6912:	d55b      	bpl.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
   b6914:	7883      	ldrb	r3, [r0, #2]
   b6916:	079a      	lsls	r2, r3, #30
   b6918:	d558      	bpl.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b691a:	071b      	lsls	r3, r3, #28
   b691c:	d451      	bmi.n	b69c2 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b691e:	6963      	ldr	r3, [r4, #20]
   b6920:	43db      	mvns	r3, r3
   b6922:	42bb      	cmp	r3, r7
   b6924:	d352      	bcc.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
   b6926:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b6928:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b692c:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b692e:	f1b8 0f00 	cmp.w	r8, #0
   b6932:	f000 8091 	beq.w	b6a58 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b6936:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b6938:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b693a:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b693e:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b6942:	d10e      	bne.n	b6962 <_ZN7FatFile5writeEPKvj+0x5e>
   b6944:	b96d      	cbnz	r5, b6962 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b6946:	6921      	ldr	r1, [r4, #16]
   b6948:	2900      	cmp	r1, #0
   b694a:	d046      	beq.n	b69da <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b694c:	4652      	mov	r2, sl
   b694e:	f000 f902 	bl	b6b56 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b6952:	2800      	cmp	r0, #0
   b6954:	db3a      	blt.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b6956:	d104      	bne.n	b6962 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b6958:	4620      	mov	r0, r4
   b695a:	f7ff fcf6 	bl	b634a <_ZN7FatFile10addClusterEv>
   b695e:	2800      	cmp	r0, #0
   b6960:	d034      	beq.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b6962:	6921      	ldr	r1, [r4, #16]
   b6964:	68a0      	ldr	r0, [r4, #8]
   b6966:	f000 f8f0 	bl	b6b4a <_ZNK9FatVolume17clusterFirstBlockEm>
   b696a:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b696c:	68a0      	ldr	r0, [r4, #8]
   b696e:	b915      	cbnz	r5, b6976 <_ZN7FatFile5writeEPKvj+0x72>
   b6970:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b6974:	d23f      	bcs.n	b69f6 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b6976:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b697a:	4546      	cmp	r6, r8
   b697c:	bf28      	it	cs
   b697e:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b6980:	2d00      	cmp	r5, #0
   b6982:	d136      	bne.n	b69f2 <_ZN7FatFile5writeEPKvj+0xee>
   b6984:	6962      	ldr	r2, [r4, #20]
   b6986:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b6988:	429a      	cmp	r2, r3
   b698a:	bf34      	ite	cc
   b698c:	2201      	movcc	r2, #1
   b698e:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6990:	3024      	adds	r0, #36	; 0x24
   b6992:	f000 f8b7 	bl	b6b04 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b6996:	b1c8      	cbz	r0, b69cc <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b6998:	4428      	add	r0, r5
   b699a:	4632      	mov	r2, r6
   b699c:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b699e:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b69a0:	f005 fe0a 	bl	bc5b8 <memcpy>
      if (512 == (n + blockOffset)) {
   b69a4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b69a8:	d104      	bne.n	b69b4 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b69aa:	68a0      	ldr	r0, [r4, #8]
   b69ac:	3024      	adds	r0, #36	; 0x24
   b69ae:	f000 f881 	bl	b6ab4 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b69b2:	b158      	cbz	r0, b69cc <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b69b4:	6963      	ldr	r3, [r4, #20]
   b69b6:	4433      	add	r3, r6
   b69b8:	6163      	str	r3, [r4, #20]
    src += n;
   b69ba:	44b1      	add	r9, r6
    nToWrite -= n;
   b69bc:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b69c0:	e7b4      	b.n	b692c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b69c2:	69c1      	ldr	r1, [r0, #28]
   b69c4:	f7ff fe2a 	bl	b661c <_ZN7FatFile7seekSetEm>
   b69c8:	2800      	cmp	r0, #0
   b69ca:	d1a8      	bne.n	b691e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b69cc:	7863      	ldrb	r3, [r4, #1]
   b69ce:	f043 0301 	orr.w	r3, r3, #1
   b69d2:	7063      	strb	r3, [r4, #1]
  return -1;
   b69d4:	f04f 30ff 	mov.w	r0, #4294967295
   b69d8:	e050      	b.n	b6a7c <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b69da:	6a23      	ldr	r3, [r4, #32]
   b69dc:	b93b      	cbnz	r3, b69ee <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b69de:	4620      	mov	r0, r4
   b69e0:	f7ff fcb3 	bl	b634a <_ZN7FatFile10addClusterEv>
   b69e4:	2800      	cmp	r0, #0
   b69e6:	d0f1      	beq.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b69e8:	6923      	ldr	r3, [r4, #16]
   b69ea:	6223      	str	r3, [r4, #32]
   b69ec:	e7b9      	b.n	b6962 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b69ee:	6123      	str	r3, [r4, #16]
   b69f0:	e7b7      	b.n	b6962 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b69f2:	2201      	movs	r2, #1
   b69f4:	e7cc      	b.n	b6990 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b69f6:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b69fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b69fc:	d31b      	bcc.n	b6a36 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b69fe:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6a02:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b6a06:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b6a08:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6a0c:	4573      	cmp	r3, lr
   b6a0e:	bf28      	it	cs
   b6a10:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6a12:	4291      	cmp	r1, r2
      n = 512*nb;
   b6a14:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6a18:	d307      	bcc.n	b6a2a <_ZN7FatFile5writeEPKvj+0x126>
   b6a1a:	441a      	add	r2, r3
   b6a1c:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6a1e:	bf82      	ittt	hi
   b6a20:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b6a24:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6a28:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b6a2a:	68a5      	ldr	r5, [r4, #8]
   b6a2c:	464a      	mov	r2, r9
   b6a2e:	6828      	ldr	r0, [r5, #0]
   b6a30:	f000 fc4b 	bl	b72ca <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b6a34:	e7bd      	b.n	b69b2 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b6a36:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b6a38:	bf02      	ittt	eq
   b6a3a:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b6a3e:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6a42:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b6a44:	68a3      	ldr	r3, [r4, #8]
   b6a46:	464a      	mov	r2, r9
   b6a48:	6818      	ldr	r0, [r3, #0]
   b6a4a:	f000 fbc8 	bl	b71de <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b6a4e:	2800      	cmp	r0, #0
   b6a50:	d0bc      	beq.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b6a52:	f44f 7600 	mov.w	r6, #512	; 0x200
   b6a56:	e7ad      	b.n	b69b4 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b6a58:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a5a:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b6a5c:	42b2      	cmp	r2, r6
   b6a5e:	d204      	bcs.n	b6a6a <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b6a60:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b6a62:	f043 0304 	orr.w	r3, r3, #4
   b6a66:	70a3      	strb	r3, [r4, #2]
   b6a68:	e003      	b.n	b6a72 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b6a6a:	4a08      	ldr	r2, [pc, #32]	; (b6a8c <_ZN7FatFile5writeEPKvj+0x188>)
   b6a6c:	6812      	ldr	r2, [r2, #0]
   b6a6e:	2a00      	cmp	r2, #0
   b6a70:	d1f7      	bne.n	b6a62 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b6a72:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b6a76:	2b00      	cmp	r3, #0
   b6a78:	db02      	blt.n	b6a80 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b6a7a:	4638      	mov	r0, r7
}
   b6a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b6a80:	4620      	mov	r0, r4
   b6a82:	f7ff feb5 	bl	b67f0 <_ZN7FatFile4syncEv>
   b6a86:	2800      	cmp	r0, #0
   b6a88:	d1f7      	bne.n	b6a7a <_ZN7FatFile5writeEPKvj+0x176>
   b6a8a:	e79f      	b.n	b69cc <_ZN7FatFile5writeEPKvj+0xc8>
   b6a8c:	2003e60c 	.word	0x2003e60c

000b6a90 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a90:	b513      	push	{r0, r1, r4, lr}
   b6a92:	4604      	mov	r4, r0
    }
   b6a94:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a96:	b159      	cbz	r1, b6ab0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a98:	9101      	str	r1, [sp, #4]
   b6a9a:	f005 fe40 	bl	bc71e <strlen>
   b6a9e:	6823      	ldr	r3, [r4, #0]
   b6aa0:	9901      	ldr	r1, [sp, #4]
   b6aa2:	68db      	ldr	r3, [r3, #12]
   b6aa4:	4602      	mov	r2, r0
   b6aa6:	4620      	mov	r0, r4
    }
   b6aa8:	b002      	add	sp, #8
   b6aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6aae:	4718      	bx	r3
    }
   b6ab0:	b002      	add	sp, #8
   b6ab2:	bd10      	pop	{r4, pc}

000b6ab4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6ab6:	7803      	ldrb	r3, [r0, #0]
   b6ab8:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b6aba:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b6abc:	d520      	bpl.n	b6b00 <_ZN8FatCache4syncEv+0x4c>
   b6abe:	6843      	ldr	r3, [r0, #4]
   b6ac0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6ac2:	f100 020c 	add.w	r2, r0, #12
   b6ac6:	6818      	ldr	r0, [r3, #0]
   b6ac8:	9201      	str	r2, [sp, #4]
   b6aca:	f000 fb88 	bl	b71de <_ZN9SdSpiCard10writeBlockEmPKh>
   b6ace:	9a01      	ldr	r2, [sp, #4]
   b6ad0:	4605      	mov	r5, r0
   b6ad2:	b918      	cbnz	r0, b6adc <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6ad4:	2500      	movs	r5, #0
}
   b6ad6:	4628      	mov	r0, r5
   b6ad8:	b003      	add	sp, #12
   b6ada:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b6adc:	7823      	ldrb	r3, [r4, #0]
   b6ade:	079b      	lsls	r3, r3, #30
   b6ae0:	d404      	bmi.n	b6aec <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6ae2:	7823      	ldrb	r3, [r4, #0]
   b6ae4:	f023 0301 	bic.w	r3, r3, #1
   b6ae8:	7023      	strb	r3, [r4, #0]
   b6aea:	e7f4      	b.n	b6ad6 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b6aec:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6af0:	6919      	ldr	r1, [r3, #16]
   b6af2:	4401      	add	r1, r0
   b6af4:	6818      	ldr	r0, [r3, #0]
   b6af6:	f000 fb72 	bl	b71de <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b6afa:	2800      	cmp	r0, #0
   b6afc:	d1f1      	bne.n	b6ae2 <_ZN8FatCache4syncEv+0x2e>
   b6afe:	e7e9      	b.n	b6ad4 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6b00:	2501      	movs	r5, #1
   b6b02:	e7e8      	b.n	b6ad6 <_ZN8FatCache4syncEv+0x22>

000b6b04 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6b04:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6b06:	6883      	ldr	r3, [r0, #8]
   b6b08:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6b0a:	4604      	mov	r4, r0
   b6b0c:	460e      	mov	r6, r1
   b6b0e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b6b10:	d009      	beq.n	b6b26 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b6b12:	f7ff ffcf 	bl	b6ab4 <_ZN8FatCache4syncEv>
   b6b16:	b908      	cbnz	r0, b6b1c <_ZN8FatCache4readEmh+0x18>
  return 0;
   b6b18:	2000      	movs	r0, #0
}
   b6b1a:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6b1c:	076b      	lsls	r3, r5, #29
   b6b1e:	d50a      	bpl.n	b6b36 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6b20:	2300      	movs	r3, #0
   b6b22:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6b24:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b6b26:	7822      	ldrb	r2, [r4, #0]
   b6b28:	f005 0503 	and.w	r5, r5, #3
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	4315      	orrs	r5, r2
   b6b30:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6b34:	e7f1      	b.n	b6b1a <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b6b36:	6863      	ldr	r3, [r4, #4]
   b6b38:	f104 020c 	add.w	r2, r4, #12
   b6b3c:	6818      	ldr	r0, [r3, #0]
   b6b3e:	4631      	mov	r1, r6
   b6b40:	f000 fac4 	bl	b70cc <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6b44:	2800      	cmp	r0, #0
   b6b46:	d1eb      	bne.n	b6b20 <_ZN8FatCache4readEmh+0x1c>
   b6b48:	e7e6      	b.n	b6b18 <_ZN8FatCache4readEmh+0x14>

000b6b4a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b6b4a:	7983      	ldrb	r3, [r0, #6]
   b6b4c:	6940      	ldr	r0, [r0, #20]
   b6b4e:	3902      	subs	r1, #2
   b6b50:	4099      	lsls	r1, r3
}
   b6b52:	4408      	add	r0, r1
   b6b54:	4770      	bx	lr

000b6b56 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b56:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b6b58:	b570      	push	{r4, r5, r6, lr}
   b6b5a:	4605      	mov	r5, r0
   b6b5c:	460c      	mov	r4, r1
   b6b5e:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b60:	d802      	bhi.n	b6b68 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6b62:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6b66:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6b68:	69c3      	ldr	r3, [r0, #28]
   b6b6a:	428b      	cmp	r3, r1
   b6b6c:	d3f9      	bcc.n	b6b62 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6b6e:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6b70:	2b20      	cmp	r3, #32
   b6b72:	d116      	bne.n	b6ba2 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6b74:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6b76:	2202      	movs	r2, #2
   b6b78:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6b7c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6b80:	f7ff ffc0 	bl	b6b04 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6b84:	2800      	cmp	r0, #0
   b6b86:	d0ec      	beq.n	b6b62 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6b88:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6b8c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6b90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6b94:	69ea      	ldr	r2, [r5, #28]
   b6b96:	429a      	cmp	r2, r3
  *value = next;
   b6b98:	bf26      	itte	cs
   b6b9a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6b9c:	2001      	movcs	r0, #1
    return 0;
   b6b9e:	2000      	movcc	r0, #0
   b6ba0:	e7e1      	b.n	b6b66 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6ba2:	2b10      	cmp	r3, #16
   b6ba4:	d1dd      	bne.n	b6b62 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6ba6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6baa:	6981      	ldr	r1, [r0, #24]
   b6bac:	2202      	movs	r2, #2
   b6bae:	4419      	add	r1, r3
   b6bb0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6bb4:	f7ff ffa6 	bl	b6b04 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6bb8:	2800      	cmp	r0, #0
   b6bba:	d0d2      	beq.n	b6b62 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b6bbc:	b2e4      	uxtb	r4, r4
   b6bbe:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6bc2:	e7e7      	b.n	b6b94 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6bc4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6bc4:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6bc6:	b538      	push	{r3, r4, r5, lr}
   b6bc8:	460c      	mov	r4, r1
   b6bca:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6bcc:	d801      	bhi.n	b6bd2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b6bce:	2000      	movs	r0, #0
}
   b6bd0:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6bd2:	69c3      	ldr	r3, [r0, #28]
   b6bd4:	428b      	cmp	r3, r1
   b6bd6:	d3fa      	bcc.n	b6bce <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6bd8:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6bda:	2b20      	cmp	r3, #32
   b6bdc:	d10f      	bne.n	b6bfe <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b6bde:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6be0:	2203      	movs	r2, #3
   b6be2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6be6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6bea:	f7ff ff8b 	bl	b6b04 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6bee:	2800      	cmp	r0, #0
   b6bf0:	d0ed      	beq.n	b6bce <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6bf2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6bf6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b6bfa:	2001      	movs	r0, #1
   b6bfc:	e7e8      	b.n	b6bd0 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b6bfe:	2b10      	cmp	r3, #16
   b6c00:	d1e5      	bne.n	b6bce <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6c02:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6c06:	6981      	ldr	r1, [r0, #24]
   b6c08:	2203      	movs	r2, #3
   b6c0a:	4419      	add	r1, r3
   b6c0c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6c10:	f7ff ff78 	bl	b6b04 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6c14:	2800      	cmp	r0, #0
   b6c16:	d0da      	beq.n	b6bce <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b6c18:	b2e4      	uxtb	r4, r4
   b6c1a:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6c1e:	e7ec      	b.n	b6bfa <_ZN9FatVolume6fatPutEmm+0x36>

000b6c20 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6c24:	68c4      	ldr	r4, [r0, #12]
   b6c26:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6c28:	4605      	mov	r5, r0
   b6c2a:	460e      	mov	r6, r1
   b6c2c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6c2e:	d301      	bcc.n	b6c34 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6c30:	2701      	movs	r7, #1
   b6c32:	e001      	b.n	b6c38 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6c34:	460c      	mov	r4, r1
    setStart = false;
   b6c36:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b6c38:	69eb      	ldr	r3, [r5, #28]
    find++;
   b6c3a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6c3c:	42a3      	cmp	r3, r4
   b6c3e:	d202      	bcs.n	b6c46 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6c40:	b9c7      	cbnz	r7, b6c74 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6c42:	68ec      	ldr	r4, [r5, #12]
   b6c44:	e7f4      	b.n	b6c30 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b6c46:	42a6      	cmp	r6, r4
   b6c48:	d014      	beq.n	b6c74 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b6c4a:	aa01      	add	r2, sp, #4
   b6c4c:	4621      	mov	r1, r4
   b6c4e:	4628      	mov	r0, r5
   b6c50:	f7ff ff81 	bl	b6b56 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6c54:	2800      	cmp	r0, #0
   b6c56:	db0d      	blt.n	b6c74 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b6c58:	d0ee      	beq.n	b6c38 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6c5a:	9b01      	ldr	r3, [sp, #4]
   b6c5c:	2b00      	cmp	r3, #0
   b6c5e:	d1eb      	bne.n	b6c38 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6c60:	b107      	cbz	r7, b6c64 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6c62:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6c64:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b6c68:	4621      	mov	r1, r4
   b6c6a:	4628      	mov	r0, r5
   b6c6c:	f7ff ffaa 	bl	b6bc4 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6c70:	4607      	mov	r7, r0
   b6c72:	b920      	cbnz	r0, b6c7e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6c74:	2700      	movs	r7, #0
}
   b6c76:	4638      	mov	r0, r7
   b6c78:	b002      	add	sp, #8
   b6c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6c7e:	b916      	cbnz	r6, b6c86 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6c80:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6c84:	e7f7      	b.n	b6c76 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6c86:	4622      	mov	r2, r4
   b6c88:	4631      	mov	r1, r6
   b6c8a:	4628      	mov	r0, r5
   b6c8c:	f7ff ff9a 	bl	b6bc4 <_ZN9FatVolume6fatPutEmm>
   b6c90:	2800      	cmp	r0, #0
   b6c92:	d1f5      	bne.n	b6c80 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6c94:	e7ee      	b.n	b6c74 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6c96 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6c98:	4605      	mov	r5, r0
   b6c9a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6c9c:	aa01      	add	r2, sp, #4
   b6c9e:	4621      	mov	r1, r4
   b6ca0:	4628      	mov	r0, r5
   b6ca2:	f7ff ff58 	bl	b6b56 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6ca6:	1e06      	subs	r6, r0, #0
   b6ca8:	db10      	blt.n	b6ccc <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6caa:	2200      	movs	r2, #0
   b6cac:	4621      	mov	r1, r4
   b6cae:	4628      	mov	r0, r5
   b6cb0:	f7ff ff88 	bl	b6bc4 <_ZN9FatVolume6fatPutEmm>
   b6cb4:	b150      	cbz	r0, b6ccc <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6cb6:	68eb      	ldr	r3, [r5, #12]
   b6cb8:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6cba:	bf24      	itt	cs
   b6cbc:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b6cc0:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6cc2:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6cc4:	2e00      	cmp	r6, #0
   b6cc6:	d1e9      	bne.n	b6c9c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6cc8:	b002      	add	sp, #8
   b6cca:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6ccc:	2000      	movs	r0, #0
   b6cce:	e7fb      	b.n	b6cc8 <_ZN9FatVolume9freeChainEm+0x32>

000b6cd0 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6cd0:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6cd2:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6cd4:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6cd6:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6cd8:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b6cdc:	4604      	mov	r4, r0
  m_fatType = 0;
   b6cde:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6ce0:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6ce4:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6ce6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6cea:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6cec:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6cf0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6cf4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6cf8:	460d      	mov	r5, r1
   b6cfa:	b1b9      	cbz	r1, b6d2c <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6cfc:	2904      	cmp	r1, #4
   b6cfe:	d901      	bls.n	b6d04 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6d00:	2000      	movs	r0, #0
}
   b6d02:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6d04:	4611      	mov	r1, r2
   b6d06:	4630      	mov	r0, r6
   b6d08:	f7ff fefc 	bl	b6b04 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6d0c:	2800      	cmp	r0, #0
   b6d0e:	d0f7      	beq.n	b6d00 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6d10:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6d14:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6d18:	065b      	lsls	r3, r3, #25
   b6d1a:	d1f1      	bne.n	b6d00 <_ZN9FatVolume4initEh+0x30>
   b6d1c:	f105 011b 	add.w	r1, r5, #27
   b6d20:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6d24:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6d28:	2d00      	cmp	r5, #0
   b6d2a:	d0e9      	beq.n	b6d00 <_ZN9FatVolume4initEh+0x30>
   b6d2c:	2200      	movs	r2, #0
   b6d2e:	4629      	mov	r1, r5
   b6d30:	4630      	mov	r0, r6
   b6d32:	f7ff fee7 	bl	b6b04 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6d36:	2800      	cmp	r0, #0
   b6d38:	d0e2      	beq.n	b6d00 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6d3a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6d42:	d1dd      	bne.n	b6d00 <_ZN9FatVolume4initEh+0x30>
   b6d44:	7c03      	ldrb	r3, [r0, #16]
   b6d46:	2b02      	cmp	r3, #2
   b6d48:	d1da      	bne.n	b6d00 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6d4a:	89c3      	ldrh	r3, [r0, #14]
   b6d4c:	2b00      	cmp	r3, #0
   b6d4e:	d0d7      	beq.n	b6d00 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6d50:	7b41      	ldrb	r1, [r0, #13]
   b6d52:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6d54:	1e4b      	subs	r3, r1, #1
   b6d56:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6d58:	2300      	movs	r3, #0
   b6d5a:	71a3      	strb	r3, [r4, #6]
   b6d5c:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d5e:	2301      	movs	r3, #1
   b6d60:	4299      	cmp	r1, r3
   b6d62:	d007      	beq.n	b6d74 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6d64:	3e01      	subs	r6, #1
   b6d66:	d0cb      	beq.n	b6d00 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6d68:	79a2      	ldrb	r2, [r4, #6]
   b6d6a:	005b      	lsls	r3, r3, #1
   b6d6c:	3201      	adds	r2, #1
   b6d6e:	b2db      	uxtb	r3, r3
   b6d70:	71a2      	strb	r2, [r4, #6]
   b6d72:	e7f5      	b.n	b6d60 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6d74:	8ac1      	ldrh	r1, [r0, #22]
   b6d76:	b901      	cbnz	r1, b6d7a <_ZN9FatVolume4initEh+0xaa>
   b6d78:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6d7a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6d7c:	89c3      	ldrh	r3, [r0, #14]
   b6d7e:	442b      	add	r3, r5
   b6d80:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6d82:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6d86:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6d88:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6d8c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6d8e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6d92:	0149      	lsls	r1, r1, #5
   b6d94:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6d98:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6d9c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6d9e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6da2:	b902      	cbnz	r2, b6da6 <_ZN9FatVolume4initEh+0xd6>
   b6da4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6da6:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6da8:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6daa:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6dac:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6dae:	1c4b      	adds	r3, r1, #1
   b6db0:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6db2:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6db6:	4299      	cmp	r1, r3
   b6db8:	d802      	bhi.n	b6dc0 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6dba:	230c      	movs	r3, #12
   b6dbc:	71e3      	strb	r3, [r4, #7]
   b6dbe:	e79f      	b.n	b6d00 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6dc0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6dc4:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6dc6:	bf85      	ittet	hi
   b6dc8:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6dca:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6dcc:	2310      	movls	r3, #16
    m_fatType = 32;
   b6dce:	2320      	movhi	r3, #32
   b6dd0:	71e3      	strb	r3, [r4, #7]
  return true;
   b6dd2:	2001      	movs	r0, #1
   b6dd4:	e795      	b.n	b6d02 <_ZN9FatVolume4initEh+0x32>

000b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6dd6:	f000 bacb 	b.w	b7370 <_ZN14SdSpiAltDriver4sendEh>

000b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6dda:	f000 baae 	b.w	b733a <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6de0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6de0:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6de2:	4e0e      	ldr	r6, [pc, #56]	; (b6e1c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6de4:	460d      	mov	r5, r1
   b6de6:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6de8:	f000 fb66 	bl	b74b8 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6dec:	6833      	ldr	r3, [r6, #0]
   b6dee:	1ac0      	subs	r0, r0, r3
   b6df0:	4b0b      	ldr	r3, [pc, #44]	; (b6e20 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6df2:	4298      	cmp	r0, r3
   b6df4:	d908      	bls.n	b6e08 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6df6:	f000 fb67 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6dfa:	4b0a      	ldr	r3, [pc, #40]	; (b6e24 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6dfc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b6dfe:	f000 fe9b 	bl	b7b38 <spark_process>
   b6e02:	f000 fb59 	bl	b74b8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6e06:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6e08:	f000 fb5e 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6e0c:	b280      	uxth	r0, r0
   b6e0e:	1b40      	subs	r0, r0, r5
}
   b6e10:	42a0      	cmp	r0, r4
   b6e12:	bfd4      	ite	le
   b6e14:	2000      	movle	r0, #0
   b6e16:	2001      	movgt	r0, #1
   b6e18:	bd70      	pop	{r4, r5, r6, pc}
   b6e1a:	bf00      	nop
   b6e1c:	2003e614 	.word	0x2003e614
   b6e20:	000186a0 	.word	0x000186a0
   b6e24:	2003e740 	.word	0x2003e740

000b6e28 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6e28:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6e2a:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6e2c:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6e2e:	b94d      	cbnz	r5, b6e44 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6e30:	6840      	ldr	r0, [r0, #4]
   b6e32:	f000 fa6b 	bl	b730c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6e36:	6863      	ldr	r3, [r4, #4]
   b6e38:	4629      	mov	r1, r5
   b6e3a:	7d18      	ldrb	r0, [r3, #20]
   b6e3c:	f004 fd03 	bl	bb846 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6e40:	2301      	movs	r3, #1
   b6e42:	7223      	strb	r3, [r4, #8]
  }
}
   b6e44:	bd38      	pop	{r3, r4, r5, pc}

000b6e46 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6e46:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6e48:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6e4a:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6e4c:	b16b      	cbz	r3, b6e6a <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6e4e:	6843      	ldr	r3, [r0, #4]
   b6e50:	2101      	movs	r1, #1
   b6e52:	7d18      	ldrb	r0, [r3, #20]
   b6e54:	f004 fcf7 	bl	bb846 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6e58:	6860      	ldr	r0, [r4, #4]
   b6e5a:	21ff      	movs	r1, #255	; 0xff
   b6e5c:	f7ff ffbb 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6e60:	6860      	ldr	r0, [r4, #4]
   b6e62:	f000 fa67 	bl	b7334 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6e66:	2300      	movs	r3, #0
   b6e68:	7223      	strb	r3, [r4, #8]
  }
}
   b6e6a:	bd10      	pop	{r4, pc}

000b6e6c <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e6e:	4604      	mov	r4, r0
   b6e70:	460d      	mov	r5, r1
   b6e72:	4616      	mov	r6, r2
   b6e74:	f000 fb28 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6e78:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6e7a:	6860      	ldr	r0, [r4, #4]
   b6e7c:	f7ff ffad 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e80:	28ff      	cmp	r0, #255	; 0xff
   b6e82:	7260      	strb	r0, [r4, #9]
   b6e84:	d10e      	bne.n	b6ea4 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6e8a:	4639      	mov	r1, r7
   b6e8c:	4620      	mov	r0, r4
   b6e8e:	f7ff ffa7 	bl	b6de0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6e92:	2800      	cmp	r0, #0
   b6e94:	d0f1      	beq.n	b6e7a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6e96:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6e98:	4620      	mov	r0, r4
   b6e9a:	7023      	strb	r3, [r4, #0]
   b6e9c:	f7ff ffd3 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ea0:	2000      	movs	r0, #0
}
   b6ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6ea4:	28fe      	cmp	r0, #254	; 0xfe
   b6ea6:	d001      	beq.n	b6eac <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6ea8:	2350      	movs	r3, #80	; 0x50
   b6eaa:	e7f5      	b.n	b6e98 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6eac:	6860      	ldr	r0, [r4, #4]
   b6eae:	4632      	mov	r2, r6
   b6eb0:	4629      	mov	r1, r5
   b6eb2:	f000 fa47 	bl	b7344 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6eb6:	7260      	strb	r0, [r4, #9]
   b6eb8:	b108      	cbz	r0, b6ebe <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6eba:	2360      	movs	r3, #96	; 0x60
   b6ebc:	e7ec      	b.n	b6e98 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6ebe:	6860      	ldr	r0, [r4, #4]
   b6ec0:	f7ff ff8b 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6ec4:	6860      	ldr	r0, [r4, #4]
   b6ec6:	f7ff ff88 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b6eca:	2001      	movs	r0, #1
   b6ecc:	e7e9      	b.n	b6ea2 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b6ece <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b6ece:	b570      	push	{r4, r5, r6, lr}
   b6ed0:	4604      	mov	r4, r0
   b6ed2:	460e      	mov	r6, r1
   b6ed4:	f000 faf8 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
   b6ed8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b6eda:	4632      	mov	r2, r6
   b6edc:	4629      	mov	r1, r5
   b6ede:	4620      	mov	r0, r4
   b6ee0:	f7ff ff7e 	bl	b6de0 <_ZN9SdSpiCard10isTimedOutEtt>
   b6ee4:	b930      	cbnz	r0, b6ef4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6ee6:	6860      	ldr	r0, [r4, #4]
   b6ee8:	f7ff ff77 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6eec:	28ff      	cmp	r0, #255	; 0xff
   b6eee:	d1f4      	bne.n	b6eda <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6ef0:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6ef2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6ef4:	2000      	movs	r0, #0
   b6ef6:	e7fc      	b.n	b6ef2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6ef8 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b6efa:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6efc:	9201      	str	r2, [sp, #4]
   b6efe:	4604      	mov	r4, r0
   b6f00:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6f02:	b90b      	cbnz	r3, b6f08 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6f04:	f7ff ff90 	bl	b6e28 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6f08:	b125      	cbz	r5, b6f14 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b6f0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6f0e:	4620      	mov	r0, r4
   b6f10:	f7ff ffdd 	bl	b6ece <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6f14:	6860      	ldr	r0, [r4, #4]
   b6f16:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b6f1a:	f7ff ff5c 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6f1e:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6f20:	af01      	add	r7, sp, #4
   b6f22:	5db9      	ldrb	r1, [r7, r6]
   b6f24:	6860      	ldr	r0, [r4, #4]
   b6f26:	f7ff ff56 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6f2a:	3e01      	subs	r6, #1
   b6f2c:	d2f9      	bcs.n	b6f22 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6f2e:	2d00      	cmp	r5, #0
   b6f30:	6860      	ldr	r0, [r4, #4]
   b6f32:	bf0c      	ite	eq
   b6f34:	2195      	moveq	r1, #149	; 0x95
   b6f36:	2187      	movne	r1, #135	; 0x87
   b6f38:	f7ff ff4d 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6f3c:	6860      	ldr	r0, [r4, #4]
   b6f3e:	f7ff ff4c 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f42:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6f44:	6860      	ldr	r0, [r4, #4]
   b6f46:	f7ff ff48 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f4a:	0603      	lsls	r3, r0, #24
   b6f4c:	7260      	strb	r0, [r4, #9]
   b6f4e:	d503      	bpl.n	b6f58 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6f50:	3d01      	subs	r5, #1
   b6f52:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6f56:	d1f5      	bne.n	b6f44 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6f58:	b003      	add	sp, #12
   b6f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f5c <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6f5c:	b570      	push	{r4, r5, r6, lr}
   b6f5e:	4604      	mov	r4, r0
   b6f60:	460d      	mov	r5, r1
   b6f62:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6f64:	2137      	movs	r1, #55	; 0x37
   b6f66:	2200      	movs	r2, #0
   b6f68:	f7ff ffc6 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6f6c:	4632      	mov	r2, r6
   b6f6e:	4629      	mov	r1, r5
   b6f70:	4620      	mov	r0, r4
  }
   b6f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6f76:	f7ff bfbf 	b.w	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6f7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6f80:	2500      	movs	r5, #0
   b6f82:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6f84:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6f86:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6f88:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6f8a:	4604      	mov	r4, r0
   b6f8c:	4690      	mov	r8, r2
   b6f8e:	461e      	mov	r6, r3
   b6f90:	f000 fa9a 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6f94:	4641      	mov	r1, r8
   b6f96:	4607      	mov	r7, r0
   b6f98:	6860      	ldr	r0, [r4, #4]
   b6f9a:	f000 f9bb 	bl	b7314 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6f9e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6fa0:	4a49      	ldr	r2, [pc, #292]	; (b70c8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6fa2:	721d      	strb	r5, [r3, #8]
   b6fa4:	2501      	movs	r5, #1
   b6fa6:	60da      	str	r2, [r3, #12]
   b6fa8:	821d      	strh	r5, [r3, #16]
  spiStart();
   b6faa:	4620      	mov	r0, r4
   b6fac:	f7ff ff3c 	bl	b6e28 <_ZN9SdSpiCard8spiStartEv>
   b6fb0:	6863      	ldr	r3, [r4, #4]
   b6fb2:	4629      	mov	r1, r5
   b6fb4:	7d18      	ldrb	r0, [r3, #20]
   b6fb6:	f004 fc46 	bl	bb846 <digitalWrite>
   b6fba:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6fbc:	6860      	ldr	r0, [r4, #4]
   b6fbe:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6fc0:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6fc2:	f7ff ff08 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6fc6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6fca:	d1f7      	bne.n	b6fbc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b6fcc:	6863      	ldr	r3, [r4, #4]
   b6fce:	4629      	mov	r1, r5
   b6fd0:	7d18      	ldrb	r0, [r3, #20]
   b6fd2:	f004 fc38 	bl	bb846 <digitalWrite>
  }
   b6fd6:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6fd8:	2200      	movs	r2, #0
   b6fda:	4611      	mov	r1, r2
   b6fdc:	4620      	mov	r0, r4
   b6fde:	f7ff ff8b 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b6fe2:	2801      	cmp	r0, #1
   b6fe4:	4680      	mov	r8, r0
   b6fe6:	d018      	beq.n	b701a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6fe8:	3d01      	subs	r5, #1
   b6fea:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6fee:	d107      	bne.n	b7000 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6ff0:	2320      	movs	r3, #32
  spiStop();
   b6ff2:	4620      	mov	r0, r4
   b6ff4:	7023      	strb	r3, [r4, #0]
   b6ff6:	f7ff ff26 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ffa:	2000      	movs	r0, #0
}
   b6ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7000:	6860      	ldr	r0, [r4, #4]
   b7002:	21fd      	movs	r1, #253	; 0xfd
   b7004:	f7ff fee7 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7008:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b700c:	6860      	ldr	r0, [r4, #4]
   b700e:	f7ff fee4 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7012:	f1b8 0801 	subs.w	r8, r8, #1
   b7016:	d1f9      	bne.n	b700c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7018:	e7de      	b.n	b6fd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b701a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b701e:	2108      	movs	r1, #8
   b7020:	4620      	mov	r0, r4
   b7022:	f7ff ff69 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b7026:	2805      	cmp	r0, #5
   b7028:	d114      	bne.n	b7054 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b702a:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b702e:	2500      	movs	r5, #0
   b7030:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7032:	462a      	mov	r2, r5
   b7034:	2129      	movs	r1, #41	; 0x29
   b7036:	4620      	mov	r0, r4
   b7038:	f7ff ff90 	bl	b6f5c <_ZN9SdSpiCard8cardAcmdEhm>
   b703c:	4602      	mov	r2, r0
   b703e:	b1d8      	cbz	r0, b7078 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7040:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7044:	4639      	mov	r1, r7
   b7046:	4620      	mov	r0, r4
   b7048:	f7ff feca 	bl	b6de0 <_ZN9SdSpiCard10isTimedOutEtt>
   b704c:	2800      	cmp	r0, #0
   b704e:	d0f0      	beq.n	b7032 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7050:	2343      	movs	r3, #67	; 0x43
   b7052:	e7ce      	b.n	b6ff2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7054:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7056:	6860      	ldr	r0, [r4, #4]
   b7058:	f7ff febf 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b705c:	3d01      	subs	r5, #1
   b705e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7062:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7064:	d1f7      	bne.n	b7056 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7066:	28aa      	cmp	r0, #170	; 0xaa
   b7068:	d104      	bne.n	b7074 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b706a:	2302      	movs	r3, #2
   b706c:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b706e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7072:	e7dd      	b.n	b7030 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7074:	2325      	movs	r3, #37	; 0x25
   b7076:	e7bc      	b.n	b6ff2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7078:	7aa3      	ldrb	r3, [r4, #10]
   b707a:	2b02      	cmp	r3, #2
   b707c:	d118      	bne.n	b70b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b707e:	213a      	movs	r1, #58	; 0x3a
   b7080:	4620      	mov	r0, r4
   b7082:	f7ff ff39 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b7086:	b108      	cbz	r0, b708c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7088:	2337      	movs	r3, #55	; 0x37
   b708a:	e7b2      	b.n	b6ff2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b708c:	6860      	ldr	r0, [r4, #4]
   b708e:	f7ff fea4 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7092:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7096:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7098:	bf04      	itt	eq
   b709a:	2303      	moveq	r3, #3
   b709c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b709e:	6860      	ldr	r0, [r4, #4]
   b70a0:	f7ff fe9b 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b70a4:	6860      	ldr	r0, [r4, #4]
   b70a6:	f7ff fe98 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b70aa:	6860      	ldr	r0, [r4, #4]
   b70ac:	f7ff fe95 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b70b0:	4620      	mov	r0, r4
   b70b2:	f7ff fec8 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b70b6:	6863      	ldr	r3, [r4, #4]
   b70b8:	7930      	ldrb	r0, [r6, #4]
   b70ba:	68b1      	ldr	r1, [r6, #8]
   b70bc:	89b2      	ldrh	r2, [r6, #12]
   b70be:	821a      	strh	r2, [r3, #16]
   b70c0:	7218      	strb	r0, [r3, #8]
   b70c2:	60d9      	str	r1, [r3, #12]
  return true;
   b70c4:	2001      	movs	r0, #1
   b70c6:	e799      	b.n	b6ffc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b70c8:	0003d090 	.word	0x0003d090

000b70cc <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70cc:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b70ce:	7a83      	ldrb	r3, [r0, #10]
   b70d0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b70d2:	bf18      	it	ne
   b70d4:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70d6:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b70d8:	460a      	mov	r2, r1
   b70da:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b70dc:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b70de:	f7ff ff0b 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b70e2:	b130      	cbz	r0, b70f2 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b70e4:	2330      	movs	r3, #48	; 0x30
   b70e6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b70e8:	4620      	mov	r0, r4
   b70ea:	f7ff feac 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b70ee:	2500      	movs	r5, #0
   b70f0:	e00b      	b.n	b710a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b70f2:	4629      	mov	r1, r5
   b70f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b70f8:	4620      	mov	r0, r4
   b70fa:	f7ff feb7 	bl	b6e6c <_ZN9SdSpiCard8readDataEPhj>
   b70fe:	4605      	mov	r5, r0
   b7100:	2800      	cmp	r0, #0
   b7102:	d0f1      	beq.n	b70e8 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7104:	4620      	mov	r0, r4
   b7106:	f7ff fe9e 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
}
   b710a:	4628      	mov	r0, r5
   b710c:	bd38      	pop	{r3, r4, r5, pc}

000b710e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b710e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7110:	7a83      	ldrb	r3, [r0, #10]
   b7112:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7114:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7116:	bf18      	it	ne
   b7118:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b711a:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b711c:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b711e:	f7ff feeb 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b7122:	b130      	cbz	r0, b7132 <_ZN9SdSpiCard9readStartEm+0x24>
   b7124:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7126:	4620      	mov	r0, r4
   b7128:	7023      	strb	r3, [r4, #0]
   b712a:	f7ff fe8c 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b712e:	2000      	movs	r0, #0
}
   b7130:	bd10      	pop	{r4, pc}
  return true;
   b7132:	2001      	movs	r0, #1
   b7134:	e7fc      	b.n	b7130 <_ZN9SdSpiCard9readStartEm+0x22>

000b7136 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7136:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7138:	2200      	movs	r2, #0
   b713a:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b713c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b713e:	f7ff fedb 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b7142:	b130      	cbz	r0, b7152 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7144:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7146:	4620      	mov	r0, r4
   b7148:	7023      	strb	r3, [r4, #0]
   b714a:	f7ff fe7c 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b714e:	2000      	movs	r0, #0
}
   b7150:	bd10      	pop	{r4, pc}
  spiStop();
   b7152:	4620      	mov	r0, r4
   b7154:	f7ff fe77 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7158:	2001      	movs	r0, #1
   b715a:	e7f9      	b.n	b7150 <_ZN9SdSpiCard8readStopEv+0x1a>

000b715c <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b715e:	4604      	mov	r4, r0
   b7160:	4616      	mov	r6, r2
   b7162:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7164:	f7ff ffd3 	bl	b710e <_ZN9SdSpiCard9readStartEm>
   b7168:	b168      	cbz	r0, b7186 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b716a:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b716c:	b2ab      	uxth	r3, r5
   b716e:	429f      	cmp	r7, r3
   b7170:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7174:	d909      	bls.n	b718a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7176:	f44f 7200 	mov.w	r2, #512	; 0x200
   b717a:	4620      	mov	r0, r4
   b717c:	f7ff fe76 	bl	b6e6c <_ZN9SdSpiCard8readDataEPhj>
   b7180:	3501      	adds	r5, #1
   b7182:	2800      	cmp	r0, #0
   b7184:	d1f2      	bne.n	b716c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7186:	2000      	movs	r0, #0
   b7188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b718a:	4620      	mov	r0, r4
}
   b718c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7190:	f7ff bfd1 	b.w	b7136 <_ZN9SdSpiCard8readStopEv>

000b7194 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7194:	b538      	push	{r3, r4, r5, lr}
   b7196:	4604      	mov	r4, r0
   b7198:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b719a:	6840      	ldr	r0, [r0, #4]
   b719c:	f7ff fe1b 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b71a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b71a4:	6860      	ldr	r0, [r4, #4]
   b71a6:	4629      	mov	r1, r5
   b71a8:	f000 f8e6 	bl	b7378 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b71ac:	6860      	ldr	r0, [r4, #4]
   b71ae:	21ff      	movs	r1, #255	; 0xff
   b71b0:	f7ff fe11 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b71b4:	6860      	ldr	r0, [r4, #4]
   b71b6:	21ff      	movs	r1, #255	; 0xff
   b71b8:	f7ff fe0d 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b71bc:	6860      	ldr	r0, [r4, #4]
   b71be:	f7ff fe0c 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b71c2:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b71c4:	f000 001f 	and.w	r0, r0, #31
   b71c8:	2805      	cmp	r0, #5
   b71ca:	d006      	beq.n	b71da <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b71cc:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b71ce:	4620      	mov	r0, r4
   b71d0:	7023      	strb	r3, [r4, #0]
   b71d2:	f7ff fe38 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b71d6:	2000      	movs	r0, #0
}
   b71d8:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b71da:	2001      	movs	r0, #1
   b71dc:	e7fc      	b.n	b71d8 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b71de <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71de:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b71e0:	7a83      	ldrb	r3, [r0, #10]
   b71e2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b71e4:	bf18      	it	ne
   b71e6:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71e8:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b71ea:	460a      	mov	r2, r1
   b71ec:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b71ee:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b71f0:	f7ff fe82 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b71f4:	4606      	mov	r6, r0
   b71f6:	b130      	cbz	r0, b7206 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b71f8:	2332      	movs	r3, #50	; 0x32
   b71fa:	7023      	strb	r3, [r4, #0]
  spiStop();
   b71fc:	4620      	mov	r0, r4
   b71fe:	f7ff fe22 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7202:	2500      	movs	r5, #0
   b7204:	e01f      	b.n	b7246 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7206:	462a      	mov	r2, r5
   b7208:	21fe      	movs	r1, #254	; 0xfe
   b720a:	4620      	mov	r0, r4
   b720c:	f7ff ffc2 	bl	b7194 <_ZN9SdSpiCard9writeDataEhPKh>
   b7210:	2800      	cmp	r0, #0
   b7212:	d0f3      	beq.n	b71fc <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7214:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7218:	4620      	mov	r0, r4
   b721a:	f7ff fe58 	bl	b6ece <_ZN9SdSpiCard11waitNotBusyEt>
   b721e:	4605      	mov	r5, r0
   b7220:	b908      	cbnz	r0, b7226 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7222:	235a      	movs	r3, #90	; 0x5a
   b7224:	e7e9      	b.n	b71fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7226:	4632      	mov	r2, r6
   b7228:	210d      	movs	r1, #13
   b722a:	4620      	mov	r0, r4
   b722c:	f7ff fe64 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b7230:	b108      	cbz	r0, b7236 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7232:	2329      	movs	r3, #41	; 0x29
   b7234:	e7e1      	b.n	b71fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7236:	6860      	ldr	r0, [r4, #4]
   b7238:	f7ff fdcf 	bl	b6dda <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b723c:	2800      	cmp	r0, #0
   b723e:	d1f8      	bne.n	b7232 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7240:	4620      	mov	r0, r4
   b7242:	f7ff fe00 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
}
   b7246:	4628      	mov	r0, r5
   b7248:	bd70      	pop	{r4, r5, r6, pc}

000b724a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b724a:	b513      	push	{r0, r1, r4, lr}
   b724c:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b724e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7252:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7254:	f7ff fe3b 	bl	b6ece <_ZN9SdSpiCard11waitNotBusyEt>
   b7258:	9a01      	ldr	r2, [sp, #4]
   b725a:	b930      	cbnz	r0, b726a <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b725c:	235b      	movs	r3, #91	; 0x5b
   b725e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7260:	4620      	mov	r0, r4
   b7262:	f7ff fdf0 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7266:	2000      	movs	r0, #0
   b7268:	e005      	b.n	b7276 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b726a:	21fc      	movs	r1, #252	; 0xfc
   b726c:	4620      	mov	r0, r4
   b726e:	f7ff ff91 	bl	b7194 <_ZN9SdSpiCard9writeDataEhPKh>
   b7272:	2800      	cmp	r0, #0
   b7274:	d0f4      	beq.n	b7260 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7276:	b002      	add	sp, #8
   b7278:	bd10      	pop	{r4, pc}

000b727a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b727a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b727c:	7a83      	ldrb	r3, [r0, #10]
   b727e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7280:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7282:	bf18      	it	ne
   b7284:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7286:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7288:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b728a:	f7ff fe35 	bl	b6ef8 <_ZN9SdSpiCard11cardCommandEhm>
   b728e:	b130      	cbz	r0, b729e <_ZN9SdSpiCard10writeStartEm+0x24>
   b7290:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7292:	4620      	mov	r0, r4
   b7294:	7023      	strb	r3, [r4, #0]
   b7296:	f7ff fdd6 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b729a:	2000      	movs	r0, #0
}
   b729c:	bd10      	pop	{r4, pc}
  return true;
   b729e:	2001      	movs	r0, #1
   b72a0:	e7fc      	b.n	b729c <_ZN9SdSpiCard10writeStartEm+0x22>

000b72a2 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b72a2:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b72a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b72a8:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b72aa:	f7ff fe10 	bl	b6ece <_ZN9SdSpiCard11waitNotBusyEt>
   b72ae:	4605      	mov	r5, r0
   b72b0:	b930      	cbnz	r0, b72c0 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b72b2:	2356      	movs	r3, #86	; 0x56
   b72b4:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b72b6:	4620      	mov	r0, r4
   b72b8:	f7ff fdc5 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b72bc:	4628      	mov	r0, r5
   b72be:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b72c0:	6860      	ldr	r0, [r4, #4]
   b72c2:	21fd      	movs	r1, #253	; 0xfd
   b72c4:	f7ff fd87 	bl	b6dd6 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b72c8:	e7f5      	b.n	b72b6 <_ZN9SdSpiCard9writeStopEv+0x14>

000b72ca <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b72ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72cc:	4604      	mov	r4, r0
   b72ce:	4616      	mov	r6, r2
   b72d0:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b72d2:	f7ff ffd2 	bl	b727a <_ZN9SdSpiCard10writeStartEm>
   b72d6:	b170      	cbz	r0, b72f6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b72d8:	2500      	movs	r5, #0
   b72da:	42bd      	cmp	r5, r7
   b72dc:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b72e0:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b72e2:	d004      	beq.n	b72ee <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b72e4:	f7ff ffb1 	bl	b724a <_ZN9SdSpiCard9writeDataEPKh>
   b72e8:	b128      	cbz	r0, b72f6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b72ea:	3501      	adds	r5, #1
   b72ec:	e7f5      	b.n	b72da <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b72ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b72f2:	f7ff bfd6 	b.w	b72a2 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b72f6:	4620      	mov	r0, r4
   b72f8:	f7ff fda5 	bl	b6e46 <_ZN9SdSpiCard7spiStopEv>
}
   b72fc:	2000      	movs	r0, #0
   b72fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7300 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7300:	4b01      	ldr	r3, [pc, #4]	; (b7308 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7302:	2201      	movs	r2, #1
   b7304:	701a      	strb	r2, [r3, #0]
}
   b7306:	4770      	bx	lr
   b7308:	2003e618 	.word	0x2003e618

000b730c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b730c:	1d01      	adds	r1, r0, #4
   b730e:	6800      	ldr	r0, [r0, #0]
   b7310:	f000 bd5c 	b.w	b7dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7314 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7314:	b510      	push	{r4, lr}
   b7316:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7318:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b731a:	6800      	ldr	r0, [r0, #0]
   b731c:	f000 fd12 	bl	b7d44 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7320:	7d20      	ldrb	r0, [r4, #20]
   b7322:	2101      	movs	r1, #1
   b7324:	f004 fa7e 	bl	bb824 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7328:	7d20      	ldrb	r0, [r4, #20]
   b732a:	2101      	movs	r1, #1
}
   b732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7330:	f004 ba89 	b.w	bb846 <digitalWrite>

000b7334 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7334:	6800      	ldr	r0, [r0, #0]
   b7336:	f000 bd30 	b.w	b7d9a <_ZN8SPIClass14endTransactionEv>

000b733a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b733a:	6800      	ldr	r0, [r0, #0]
   b733c:	21ff      	movs	r1, #255	; 0xff
   b733e:	f000 bde5 	b.w	b7f0c <_ZN8SPIClass8transferEh>
	...

000b7344 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7346:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7348:	4a07      	ldr	r2, [pc, #28]	; (b7368 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b734a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b734c:	2500      	movs	r5, #0
   b734e:	4c07      	ldr	r4, [pc, #28]	; (b736c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7350:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7352:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7354:	460a      	mov	r2, r1
   b7356:	4629      	mov	r1, r5
   b7358:	f000 fdde 	bl	b7f18 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b735c:	7823      	ldrb	r3, [r4, #0]
   b735e:	2b00      	cmp	r3, #0
   b7360:	d0fc      	beq.n	b735c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7362:	2000      	movs	r0, #0
   b7364:	b003      	add	sp, #12
   b7366:	bd30      	pop	{r4, r5, pc}
   b7368:	000b7301 	.word	0x000b7301
   b736c:	2003e618 	.word	0x2003e618

000b7370 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7370:	6800      	ldr	r0, [r0, #0]
   b7372:	f000 bdcb 	b.w	b7f0c <_ZN8SPIClass8transferEh>
	...

000b7378 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7378:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b737a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b737c:	4a06      	ldr	r2, [pc, #24]	; (b7398 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b737e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7380:	2500      	movs	r5, #0
   b7382:	4c06      	ldr	r4, [pc, #24]	; (b739c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7384:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7386:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7388:	462a      	mov	r2, r5
   b738a:	f000 fdc5 	bl	b7f18 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b738e:	7823      	ldrb	r3, [r4, #0]
   b7390:	2b00      	cmp	r3, #0
   b7392:	d0fc      	beq.n	b738e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7394:	b003      	add	sp, #12
   b7396:	bd30      	pop	{r4, r5, pc}
   b7398:	000b7301 	.word	0x000b7301
   b739c:	2003e618 	.word	0x2003e618

000b73a0 <_ZN13SFE_UBLOX_GPSC1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_Ublox_Arduino_Library.h"

SFE_UBLOX_GPS::SFE_UBLOX_GPS(void)
   b73a0:	b538      	push	{r3, r4, r5, lr}
   b73a2:	2500      	movs	r5, #0
   b73a4:	2342      	movs	r3, #66	; 0x42
   b73a6:	4604      	mov	r4, r0
   b73a8:	6085      	str	r5, [r0, #8]
   b73aa:	7305      	strb	r5, [r0, #12]
   b73ac:	6145      	str	r5, [r0, #20]
   b73ae:	7603      	strb	r3, [r0, #24]
   b73b0:	4629      	mov	r1, r5
   b73b2:	2210      	movs	r2, #16
   b73b4:	305c      	adds	r0, #92	; 0x5c
   b73b6:	f005 f927 	bl	bc608 <memset>
   b73ba:	f104 0319 	add.w	r3, r4, #25
   b73be:	6663      	str	r3, [r4, #100]	; 0x64
   b73c0:	2210      	movs	r2, #16
   b73c2:	4629      	mov	r1, r5
   b73c4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   b73c8:	f005 f91e 	bl	bc608 <memset>
   b73cc:	f104 031b 	add.w	r3, r4, #27
   b73d0:	6763      	str	r3, [r4, #116]	; 0x74
   b73d2:	2319      	movs	r3, #25
   b73d4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
   b73d8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   b73dc:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
   b73e0:	f8a4 5086 	strh.w	r5, [r4, #134]	; 0x86
{
  // Constructor
}
   b73e4:	4620      	mov	r0, r4
   b73e6:	bd38      	pop	{r3, r4, r5, pc}

000b73e8 <_ZN13SFE_UBLOX_GPS5beginER7TwoWire>:

//Initialize the Serial port
void SFE_UBLOX_GPS::begin(TwoWire &wirePort)
{
   b73e8:	b510      	push	{r4, lr}
   b73ea:	4604      	mov	r4, r0
	commType = COMM_TYPE_I2C;
   b73ec:	2300      	movs	r3, #0
   b73ee:	7323      	strb	r3, [r4, #12]
{
   b73f0:	4608      	mov	r0, r1
	_i2cPort = &wirePort; //Grab which port the user wants us to use
   b73f2:	6121      	str	r1, [r4, #16]

	//We expect caller to begin their I2C port, with the speed of their choice external to the library
	//But if they forget, we start the hardware here.
	_i2cPort->begin();
   b73f4:	f003 ff10 	bl	bb218 <_ZN7TwoWire5beginEv>
//Sets the internal global variable that is the I2C address we read from
//This does not change the I2C address of the module
//0x42 is the default but can be changed via software command
void SFE_UBLOX_GPS::setI2CReadAddress(uint8_t deviceAddress)
{
	_gpsI2Caddress = deviceAddress; //Store the I2C address from user
   b73f8:	2342      	movs	r3, #66	; 0x42
   b73fa:	7623      	strb	r3, [r4, #24]
}
   b73fc:	bd10      	pop	{r4, pc}

000b73fe <_ZN13SFE_UBLOX_GPS11isConnectedEv>:
  return (true);
}

//Returns true if I2C device ack's
boolean SFE_UBLOX_GPS::isConnected()
{
   b73fe:	b510      	push	{r4, lr}
   b7400:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   b7402:	7e01      	ldrb	r1, [r0, #24]
   b7404:	6900      	ldr	r0, [r0, #16]
   b7406:	f003 ff36 	bl	bb276 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   b740a:	6920      	ldr	r0, [r4, #16]
   b740c:	f003 ff3e 	bl	bb28c <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   b7410:	fab0 f080 	clz	r0, r0
   b7414:	0940      	lsrs	r0, r0, #5
   b7416:	bd10      	pop	{r4, pc}

000b7418 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7418:	b508      	push	{r3, lr}
   b741a:	4b02      	ldr	r3, [pc, #8]	; (b7424 <netdb_freeaddrinfo+0xc>)
   b741c:	681b      	ldr	r3, [r3, #0]
   b741e:	689b      	ldr	r3, [r3, #8]
   b7420:	9301      	str	r3, [sp, #4]
   b7422:	bd08      	pop	{r3, pc}
   b7424:	00030268 	.word	0x00030268

000b7428 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7428:	b508      	push	{r3, lr}
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <netdb_getaddrinfo+0xc>)
   b742c:	681b      	ldr	r3, [r3, #0]
   b742e:	68db      	ldr	r3, [r3, #12]
   b7430:	9301      	str	r3, [sp, #4]
   b7432:	bd08      	pop	{r3, pc}
   b7434:	00030268 	.word	0x00030268

000b7438 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7438:	b508      	push	{r3, lr}
   b743a:	4b02      	ldr	r3, [pc, #8]	; (b7444 <HAL_Validate_Pin_Function+0xc>)
   b743c:	681b      	ldr	r3, [r3, #0]
   b743e:	685b      	ldr	r3, [r3, #4]
   b7440:	9301      	str	r3, [sp, #4]
   b7442:	bd08      	pop	{r3, pc}
   b7444:	0003022c 	.word	0x0003022c

000b7448 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7448:	b508      	push	{r3, lr}
   b744a:	4b02      	ldr	r3, [pc, #8]	; (b7454 <HAL_Pin_Mode+0xc>)
   b744c:	681b      	ldr	r3, [r3, #0]
   b744e:	689b      	ldr	r3, [r3, #8]
   b7450:	9301      	str	r3, [sp, #4]
   b7452:	bd08      	pop	{r3, pc}
   b7454:	0003022c 	.word	0x0003022c

000b7458 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7458:	b508      	push	{r3, lr}
   b745a:	4b02      	ldr	r3, [pc, #8]	; (b7464 <HAL_Get_Pin_Mode+0xc>)
   b745c:	681b      	ldr	r3, [r3, #0]
   b745e:	68db      	ldr	r3, [r3, #12]
   b7460:	9301      	str	r3, [sp, #4]
   b7462:	bd08      	pop	{r3, pc}
   b7464:	0003022c 	.word	0x0003022c

000b7468 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7468:	b508      	push	{r3, lr}
   b746a:	4b02      	ldr	r3, [pc, #8]	; (b7474 <HAL_GPIO_Write+0xc>)
   b746c:	681b      	ldr	r3, [r3, #0]
   b746e:	691b      	ldr	r3, [r3, #16]
   b7470:	9301      	str	r3, [sp, #4]
   b7472:	bd08      	pop	{r3, pc}
   b7474:	0003022c 	.word	0x0003022c

000b7478 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   b7478:	b508      	push	{r3, lr}
   b747a:	4b02      	ldr	r3, [pc, #8]	; (b7484 <HAL_Interrupts_Enable_All+0xc>)
   b747c:	681b      	ldr	r3, [r3, #0]
   b747e:	6a1b      	ldr	r3, [r3, #32]
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	bd08      	pop	{r3, pc}
   b7484:	0003022c 	.word	0x0003022c

000b7488 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <HAL_Interrupts_Disable_All+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	0003022c 	.word	0x0003022c

000b7498 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <HAL_RNG_GetRandomNumber+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	685b      	ldr	r3, [r3, #4]
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030218 	.word	0x00030218

000b74a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <HAL_Delay_Microseconds+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	68db      	ldr	r3, [r3, #12]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030218 	.word	0x00030218

000b74b8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	691b      	ldr	r3, [r3, #16]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	00030218 	.word	0x00030218

000b74c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	695b      	ldr	r3, [r3, #20]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	00030218 	.word	0x00030218

000b74d8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <hal_rtc_time_is_valid+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	00030218 	.word	0x00030218

000b74e8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <hal_rtc_get_time+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030218 	.word	0x00030218

000b74f8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <hal_ble_stack_init+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	689b      	ldr	r3, [r3, #8]
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030278 	.word	0x00030278

000b7508 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <hal_ble_gap_set_tx_power+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030278 	.word	0x00030278

000b7518 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <hal_ble_gap_set_advertising_data+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030278 	.word	0x00030278

000b7528 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b02      	ldr	r3, [pc, #8]	; (b7534 <hal_ble_gap_set_scan_response_data+0xc>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7530:	9301      	str	r3, [sp, #4]
   b7532:	bd08      	pop	{r3, pc}
   b7534:	00030278 	.word	0x00030278

000b7538 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b7538:	b508      	push	{r3, lr}
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <hal_ble_gap_start_advertising+0xc>)
   b753c:	681b      	ldr	r3, [r3, #0]
   b753e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b7540:	9301      	str	r3, [sp, #4]
   b7542:	bd08      	pop	{r3, pc}
   b7544:	00030278 	.word	0x00030278

000b7548 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b7548:	b508      	push	{r3, lr}
   b754a:	4b03      	ldr	r3, [pc, #12]	; (b7558 <hal_ble_gap_disconnect+0x10>)
   b754c:	681b      	ldr	r3, [r3, #0]
   b754e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7552:	9301      	str	r3, [sp, #4]
   b7554:	bd08      	pop	{r3, pc}
   b7556:	0000      	.short	0x0000
   b7558:	00030278 	.word	0x00030278

000b755c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b755c:	b508      	push	{r3, lr}
   b755e:	4b03      	ldr	r3, [pc, #12]	; (b756c <hal_ble_gatt_server_add_service+0x10>)
   b7560:	681b      	ldr	r3, [r3, #0]
   b7562:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7566:	9301      	str	r3, [sp, #4]
   b7568:	bd08      	pop	{r3, pc}
   b756a:	0000      	.short	0x0000
   b756c:	00030278 	.word	0x00030278

000b7570 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7570:	b508      	push	{r3, lr}
   b7572:	4b03      	ldr	r3, [pc, #12]	; (b7580 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b7574:	681b      	ldr	r3, [r3, #0]
   b7576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b757a:	9301      	str	r3, [sp, #4]
   b757c:	bd08      	pop	{r3, pc}
   b757e:	0000      	.short	0x0000
   b7580:	00030278 	.word	0x00030278

000b7584 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7584:	b508      	push	{r3, lr}
   b7586:	4b03      	ldr	r3, [pc, #12]	; (b7594 <hal_ble_gatt_client_write_with_response+0x10>)
   b7588:	681b      	ldr	r3, [r3, #0]
   b758a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b758e:	9301      	str	r3, [sp, #4]
   b7590:	bd08      	pop	{r3, pc}
   b7592:	0000      	.short	0x0000
   b7594:	00030278 	.word	0x00030278

000b7598 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b7598:	b508      	push	{r3, lr}
   b759a:	4b03      	ldr	r3, [pc, #12]	; (b75a8 <hal_ble_gatt_client_write_without_response+0x10>)
   b759c:	681b      	ldr	r3, [r3, #0]
   b759e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b75a2:	9301      	str	r3, [sp, #4]
   b75a4:	bd08      	pop	{r3, pc}
   b75a6:	0000      	.short	0x0000
   b75a8:	00030278 	.word	0x00030278

000b75ac <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b75ac:	b508      	push	{r3, lr}
   b75ae:	4b03      	ldr	r3, [pc, #12]	; (b75bc <hal_ble_gatt_server_add_characteristic+0x10>)
   b75b0:	681b      	ldr	r3, [r3, #0]
   b75b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b75b6:	9301      	str	r3, [sp, #4]
   b75b8:	bd08      	pop	{r3, pc}
   b75ba:	0000      	.short	0x0000
   b75bc:	00030278 	.word	0x00030278

000b75c0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b75c0:	b508      	push	{r3, lr}
   b75c2:	4b03      	ldr	r3, [pc, #12]	; (b75d0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b75c4:	681b      	ldr	r3, [r3, #0]
   b75c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b75ca:	9301      	str	r3, [sp, #4]
   b75cc:	bd08      	pop	{r3, pc}
   b75ce:	0000      	.short	0x0000
   b75d0:	00030278 	.word	0x00030278

000b75d4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75d4:	b508      	push	{r3, lr}
   b75d6:	4b03      	ldr	r3, [pc, #12]	; (b75e4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b75d8:	681b      	ldr	r3, [r3, #0]
   b75da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b75de:	9301      	str	r3, [sp, #4]
   b75e0:	bd08      	pop	{r3, pc}
   b75e2:	0000      	.short	0x0000
   b75e4:	00030278 	.word	0x00030278

000b75e8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b75e8:	b508      	push	{r3, lr}
   b75ea:	4b03      	ldr	r3, [pc, #12]	; (b75f8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b75ec:	681b      	ldr	r3, [r3, #0]
   b75ee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b75f2:	9301      	str	r3, [sp, #4]
   b75f4:	bd08      	pop	{r3, pc}
   b75f6:	0000      	.short	0x0000
   b75f8:	00030278 	.word	0x00030278

000b75fc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b75fc:	b508      	push	{r3, lr}
   b75fe:	4b02      	ldr	r3, [pc, #8]	; (b7608 <os_thread_yield+0xc>)
   b7600:	681b      	ldr	r3, [r3, #0]
   b7602:	68db      	ldr	r3, [r3, #12]
   b7604:	9301      	str	r3, [sp, #4]
   b7606:	bd08      	pop	{r3, pc}
   b7608:	00030248 	.word	0x00030248

000b760c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b760c:	b508      	push	{r3, lr}
   b760e:	4b02      	ldr	r3, [pc, #8]	; (b7618 <os_thread_scheduling+0xc>)
   b7610:	681b      	ldr	r3, [r3, #0]
   b7612:	69db      	ldr	r3, [r3, #28]
   b7614:	9301      	str	r3, [sp, #4]
   b7616:	bd08      	pop	{r3, pc}
   b7618:	00030248 	.word	0x00030248

000b761c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b761c:	b508      	push	{r3, lr}
   b761e:	4b02      	ldr	r3, [pc, #8]	; (b7628 <os_timer_create+0xc>)
   b7620:	681b      	ldr	r3, [r3, #0]
   b7622:	6a1b      	ldr	r3, [r3, #32]
   b7624:	9301      	str	r3, [sp, #4]
   b7626:	bd08      	pop	{r3, pc}
   b7628:	00030248 	.word	0x00030248

000b762c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b762c:	b508      	push	{r3, lr}
   b762e:	4b02      	ldr	r3, [pc, #8]	; (b7638 <os_timer_destroy+0xc>)
   b7630:	681b      	ldr	r3, [r3, #0]
   b7632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7634:	9301      	str	r3, [sp, #4]
   b7636:	bd08      	pop	{r3, pc}
   b7638:	00030248 	.word	0x00030248

000b763c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b763c:	b508      	push	{r3, lr}
   b763e:	4b02      	ldr	r3, [pc, #8]	; (b7648 <os_timer_get_id+0xc>)
   b7640:	681b      	ldr	r3, [r3, #0]
   b7642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7644:	9301      	str	r3, [sp, #4]
   b7646:	bd08      	pop	{r3, pc}
   b7648:	00030248 	.word	0x00030248

000b764c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b764c:	b508      	push	{r3, lr}
   b764e:	4b02      	ldr	r3, [pc, #8]	; (b7658 <os_timer_change+0xc>)
   b7650:	681b      	ldr	r3, [r3, #0]
   b7652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7654:	9301      	str	r3, [sp, #4]
   b7656:	bd08      	pop	{r3, pc}
   b7658:	00030248 	.word	0x00030248

000b765c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b765c:	b508      	push	{r3, lr}
   b765e:	4b02      	ldr	r3, [pc, #8]	; (b7668 <os_mutex_recursive_create+0xc>)
   b7660:	681b      	ldr	r3, [r3, #0]
   b7662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7664:	9301      	str	r3, [sp, #4]
   b7666:	bd08      	pop	{r3, pc}
   b7668:	00030248 	.word	0x00030248

000b766c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b766c:	b508      	push	{r3, lr}
   b766e:	4b02      	ldr	r3, [pc, #8]	; (b7678 <os_mutex_recursive_destroy+0xc>)
   b7670:	681b      	ldr	r3, [r3, #0]
   b7672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7674:	9301      	str	r3, [sp, #4]
   b7676:	bd08      	pop	{r3, pc}
   b7678:	00030248 	.word	0x00030248

000b767c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b767c:	b508      	push	{r3, lr}
   b767e:	4b02      	ldr	r3, [pc, #8]	; (b7688 <os_mutex_recursive_lock+0xc>)
   b7680:	681b      	ldr	r3, [r3, #0]
   b7682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7684:	9301      	str	r3, [sp, #4]
   b7686:	bd08      	pop	{r3, pc}
   b7688:	00030248 	.word	0x00030248

000b768c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b768c:	b508      	push	{r3, lr}
   b768e:	4b02      	ldr	r3, [pc, #8]	; (b7698 <os_mutex_recursive_unlock+0xc>)
   b7690:	681b      	ldr	r3, [r3, #0]
   b7692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7694:	9301      	str	r3, [sp, #4]
   b7696:	bd08      	pop	{r3, pc}
   b7698:	00030248 	.word	0x00030248

000b769c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b769c:	b508      	push	{r3, lr}
   b769e:	4b02      	ldr	r3, [pc, #8]	; (b76a8 <os_timer_set_id+0xc>)
   b76a0:	681b      	ldr	r3, [r3, #0]
   b76a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b76a4:	9301      	str	r3, [sp, #4]
   b76a6:	bd08      	pop	{r3, pc}
   b76a8:	00030248 	.word	0x00030248

000b76ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b76ac:	b508      	push	{r3, lr}
   b76ae:	4b02      	ldr	r3, [pc, #8]	; (b76b8 <inet_inet_ntop+0xc>)
   b76b0:	681b      	ldr	r3, [r3, #0]
   b76b2:	695b      	ldr	r3, [r3, #20]
   b76b4:	9301      	str	r3, [sp, #4]
   b76b6:	bd08      	pop	{r3, pc}
   b76b8:	00030264 	.word	0x00030264

000b76bc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b76bc:	b508      	push	{r3, lr}
   b76be:	4b02      	ldr	r3, [pc, #8]	; (b76c8 <hal_usart_end+0xc>)
   b76c0:	681b      	ldr	r3, [r3, #0]
   b76c2:	689b      	ldr	r3, [r3, #8]
   b76c4:	9301      	str	r3, [sp, #4]
   b76c6:	bd08      	pop	{r3, pc}
   b76c8:	0003023c 	.word	0x0003023c

000b76cc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b76cc:	b508      	push	{r3, lr}
   b76ce:	4b02      	ldr	r3, [pc, #8]	; (b76d8 <hal_usart_write+0xc>)
   b76d0:	681b      	ldr	r3, [r3, #0]
   b76d2:	68db      	ldr	r3, [r3, #12]
   b76d4:	9301      	str	r3, [sp, #4]
   b76d6:	bd08      	pop	{r3, pc}
   b76d8:	0003023c 	.word	0x0003023c

000b76dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b76dc:	b508      	push	{r3, lr}
   b76de:	4b02      	ldr	r3, [pc, #8]	; (b76e8 <hal_usart_available+0xc>)
   b76e0:	681b      	ldr	r3, [r3, #0]
   b76e2:	691b      	ldr	r3, [r3, #16]
   b76e4:	9301      	str	r3, [sp, #4]
   b76e6:	bd08      	pop	{r3, pc}
   b76e8:	0003023c 	.word	0x0003023c

000b76ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b76ec:	b508      	push	{r3, lr}
   b76ee:	4b02      	ldr	r3, [pc, #8]	; (b76f8 <hal_usart_read+0xc>)
   b76f0:	681b      	ldr	r3, [r3, #0]
   b76f2:	695b      	ldr	r3, [r3, #20]
   b76f4:	9301      	str	r3, [sp, #4]
   b76f6:	bd08      	pop	{r3, pc}
   b76f8:	0003023c 	.word	0x0003023c

000b76fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b76fc:	b508      	push	{r3, lr}
   b76fe:	4b02      	ldr	r3, [pc, #8]	; (b7708 <hal_usart_peek+0xc>)
   b7700:	681b      	ldr	r3, [r3, #0]
   b7702:	699b      	ldr	r3, [r3, #24]
   b7704:	9301      	str	r3, [sp, #4]
   b7706:	bd08      	pop	{r3, pc}
   b7708:	0003023c 	.word	0x0003023c

000b770c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b770c:	b508      	push	{r3, lr}
   b770e:	4b02      	ldr	r3, [pc, #8]	; (b7718 <hal_usart_flush+0xc>)
   b7710:	681b      	ldr	r3, [r3, #0]
   b7712:	69db      	ldr	r3, [r3, #28]
   b7714:	9301      	str	r3, [sp, #4]
   b7716:	bd08      	pop	{r3, pc}
   b7718:	0003023c 	.word	0x0003023c

000b771c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b771c:	b508      	push	{r3, lr}
   b771e:	4b02      	ldr	r3, [pc, #8]	; (b7728 <hal_usart_is_enabled+0xc>)
   b7720:	681b      	ldr	r3, [r3, #0]
   b7722:	6a1b      	ldr	r3, [r3, #32]
   b7724:	9301      	str	r3, [sp, #4]
   b7726:	bd08      	pop	{r3, pc}
   b7728:	0003023c 	.word	0x0003023c

000b772c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b772c:	b508      	push	{r3, lr}
   b772e:	4b02      	ldr	r3, [pc, #8]	; (b7738 <hal_usart_available_data_for_write+0xc>)
   b7730:	681b      	ldr	r3, [r3, #0]
   b7732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7734:	9301      	str	r3, [sp, #4]
   b7736:	bd08      	pop	{r3, pc}
   b7738:	0003023c 	.word	0x0003023c

000b773c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b773c:	b508      	push	{r3, lr}
   b773e:	4b02      	ldr	r3, [pc, #8]	; (b7748 <hal_usart_begin_config+0xc>)
   b7740:	681b      	ldr	r3, [r3, #0]
   b7742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7744:	9301      	str	r3, [sp, #4]
   b7746:	bd08      	pop	{r3, pc}
   b7748:	0003023c 	.word	0x0003023c

000b774c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b774c:	b508      	push	{r3, lr}
   b774e:	4b02      	ldr	r3, [pc, #8]	; (b7758 <hal_usart_init_ex+0xc>)
   b7750:	681b      	ldr	r3, [r3, #0]
   b7752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7754:	9301      	str	r3, [sp, #4]
   b7756:	bd08      	pop	{r3, pc}
   b7758:	0003023c 	.word	0x0003023c

000b775c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b775c:	b508      	push	{r3, lr}
   b775e:	4b02      	ldr	r3, [pc, #8]	; (b7768 <hal_i2c_set_speed+0xc>)
   b7760:	681b      	ldr	r3, [r3, #0]
   b7762:	681b      	ldr	r3, [r3, #0]
   b7764:	9301      	str	r3, [sp, #4]
   b7766:	bd08      	pop	{r3, pc}
   b7768:	00030228 	.word	0x00030228

000b776c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b776c:	b508      	push	{r3, lr}
   b776e:	4b02      	ldr	r3, [pc, #8]	; (b7778 <hal_i2c_begin+0xc>)
   b7770:	681b      	ldr	r3, [r3, #0]
   b7772:	68db      	ldr	r3, [r3, #12]
   b7774:	9301      	str	r3, [sp, #4]
   b7776:	bd08      	pop	{r3, pc}
   b7778:	00030228 	.word	0x00030228

000b777c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b777c:	b508      	push	{r3, lr}
   b777e:	4b02      	ldr	r3, [pc, #8]	; (b7788 <hal_i2c_begin_transmission+0xc>)
   b7780:	681b      	ldr	r3, [r3, #0]
   b7782:	699b      	ldr	r3, [r3, #24]
   b7784:	9301      	str	r3, [sp, #4]
   b7786:	bd08      	pop	{r3, pc}
   b7788:	00030228 	.word	0x00030228

000b778c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b778c:	b508      	push	{r3, lr}
   b778e:	4b02      	ldr	r3, [pc, #8]	; (b7798 <hal_i2c_end_transmission+0xc>)
   b7790:	681b      	ldr	r3, [r3, #0]
   b7792:	69db      	ldr	r3, [r3, #28]
   b7794:	9301      	str	r3, [sp, #4]
   b7796:	bd08      	pop	{r3, pc}
   b7798:	00030228 	.word	0x00030228

000b779c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b779c:	b508      	push	{r3, lr}
   b779e:	4b02      	ldr	r3, [pc, #8]	; (b77a8 <hal_i2c_write+0xc>)
   b77a0:	681b      	ldr	r3, [r3, #0]
   b77a2:	6a1b      	ldr	r3, [r3, #32]
   b77a4:	9301      	str	r3, [sp, #4]
   b77a6:	bd08      	pop	{r3, pc}
   b77a8:	00030228 	.word	0x00030228

000b77ac <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b77ac:	b508      	push	{r3, lr}
   b77ae:	4b02      	ldr	r3, [pc, #8]	; (b77b8 <hal_i2c_available+0xc>)
   b77b0:	681b      	ldr	r3, [r3, #0]
   b77b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b77b4:	9301      	str	r3, [sp, #4]
   b77b6:	bd08      	pop	{r3, pc}
   b77b8:	00030228 	.word	0x00030228

000b77bc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b77bc:	b508      	push	{r3, lr}
   b77be:	4b02      	ldr	r3, [pc, #8]	; (b77c8 <hal_i2c_read+0xc>)
   b77c0:	681b      	ldr	r3, [r3, #0]
   b77c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b77c4:	9301      	str	r3, [sp, #4]
   b77c6:	bd08      	pop	{r3, pc}
   b77c8:	00030228 	.word	0x00030228

000b77cc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b77cc:	b508      	push	{r3, lr}
   b77ce:	4b02      	ldr	r3, [pc, #8]	; (b77d8 <hal_i2c_peek+0xc>)
   b77d0:	681b      	ldr	r3, [r3, #0]
   b77d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77d4:	9301      	str	r3, [sp, #4]
   b77d6:	bd08      	pop	{r3, pc}
   b77d8:	00030228 	.word	0x00030228

000b77dc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b77dc:	b508      	push	{r3, lr}
   b77de:	4b02      	ldr	r3, [pc, #8]	; (b77e8 <hal_i2c_flush+0xc>)
   b77e0:	681b      	ldr	r3, [r3, #0]
   b77e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b77e4:	9301      	str	r3, [sp, #4]
   b77e6:	bd08      	pop	{r3, pc}
   b77e8:	00030228 	.word	0x00030228

000b77ec <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b77ec:	b508      	push	{r3, lr}
   b77ee:	4b02      	ldr	r3, [pc, #8]	; (b77f8 <hal_i2c_is_enabled+0xc>)
   b77f0:	681b      	ldr	r3, [r3, #0]
   b77f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b77f4:	9301      	str	r3, [sp, #4]
   b77f6:	bd08      	pop	{r3, pc}
   b77f8:	00030228 	.word	0x00030228

000b77fc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b77fc:	b508      	push	{r3, lr}
   b77fe:	4b02      	ldr	r3, [pc, #8]	; (b7808 <hal_i2c_init+0xc>)
   b7800:	681b      	ldr	r3, [r3, #0]
   b7802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7804:	9301      	str	r3, [sp, #4]
   b7806:	bd08      	pop	{r3, pc}
   b7808:	00030228 	.word	0x00030228

000b780c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b780c:	b508      	push	{r3, lr}
   b780e:	4b02      	ldr	r3, [pc, #8]	; (b7818 <hal_i2c_request_ex+0xc>)
   b7810:	681b      	ldr	r3, [r3, #0]
   b7812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7814:	9301      	str	r3, [sp, #4]
   b7816:	bd08      	pop	{r3, pc}
   b7818:	00030228 	.word	0x00030228

000b781c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b781c:	b508      	push	{r3, lr}
   b781e:	4b02      	ldr	r3, [pc, #8]	; (b7828 <hal_spi_begin+0xc>)
   b7820:	681b      	ldr	r3, [r3, #0]
   b7822:	681b      	ldr	r3, [r3, #0]
   b7824:	9301      	str	r3, [sp, #4]
   b7826:	bd08      	pop	{r3, pc}
   b7828:	00030230 	.word	0x00030230

000b782c <hal_spi_set_clock_divider>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b782c:	b508      	push	{r3, lr}
   b782e:	4b02      	ldr	r3, [pc, #8]	; (b7838 <hal_spi_set_clock_divider+0xc>)
   b7830:	681b      	ldr	r3, [r3, #0]
   b7832:	691b      	ldr	r3, [r3, #16]
   b7834:	9301      	str	r3, [sp, #4]
   b7836:	bd08      	pop	{r3, pc}
   b7838:	00030230 	.word	0x00030230

000b783c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b783c:	b508      	push	{r3, lr}
   b783e:	4b02      	ldr	r3, [pc, #8]	; (b7848 <hal_spi_transfer+0xc>)
   b7840:	681b      	ldr	r3, [r3, #0]
   b7842:	695b      	ldr	r3, [r3, #20]
   b7844:	9301      	str	r3, [sp, #4]
   b7846:	bd08      	pop	{r3, pc}
   b7848:	00030230 	.word	0x00030230

000b784c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b784c:	b508      	push	{r3, lr}
   b784e:	4b02      	ldr	r3, [pc, #8]	; (b7858 <hal_spi_init+0xc>)
   b7850:	681b      	ldr	r3, [r3, #0]
   b7852:	69db      	ldr	r3, [r3, #28]
   b7854:	9301      	str	r3, [sp, #4]
   b7856:	bd08      	pop	{r3, pc}
   b7858:	00030230 	.word	0x00030230

000b785c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b785c:	b508      	push	{r3, lr}
   b785e:	4b02      	ldr	r3, [pc, #8]	; (b7868 <hal_spi_is_enabled+0xc>)
   b7860:	681b      	ldr	r3, [r3, #0]
   b7862:	6a1b      	ldr	r3, [r3, #32]
   b7864:	9301      	str	r3, [sp, #4]
   b7866:	bd08      	pop	{r3, pc}
   b7868:	00030230 	.word	0x00030230

000b786c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b786c:	b508      	push	{r3, lr}
   b786e:	4b02      	ldr	r3, [pc, #8]	; (b7878 <hal_spi_info+0xc>)
   b7870:	681b      	ldr	r3, [r3, #0]
   b7872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7874:	9301      	str	r3, [sp, #4]
   b7876:	bd08      	pop	{r3, pc}
   b7878:	00030230 	.word	0x00030230

000b787c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b787c:	b508      	push	{r3, lr}
   b787e:	4b02      	ldr	r3, [pc, #8]	; (b7888 <hal_spi_transfer_dma+0xc>)
   b7880:	681b      	ldr	r3, [r3, #0]
   b7882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7884:	9301      	str	r3, [sp, #4]
   b7886:	bd08      	pop	{r3, pc}
   b7888:	00030230 	.word	0x00030230

000b788c <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
   b788c:	b508      	push	{r3, lr}
   b788e:	4b02      	ldr	r3, [pc, #8]	; (b7898 <hal_spi_begin_ext+0xc>)
   b7890:	681b      	ldr	r3, [r3, #0]
   b7892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7894:	9301      	str	r3, [sp, #4]
   b7896:	bd08      	pop	{r3, pc}
   b7898:	00030230 	.word	0x00030230

000b789c <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b789c:	b508      	push	{r3, lr}
   b789e:	4b02      	ldr	r3, [pc, #8]	; (b78a8 <hal_spi_transfer_dma_status+0xc>)
   b78a0:	681b      	ldr	r3, [r3, #0]
   b78a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b78a4:	9301      	str	r3, [sp, #4]
   b78a6:	bd08      	pop	{r3, pc}
   b78a8:	00030230 	.word	0x00030230

000b78ac <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b78ac:	b508      	push	{r3, lr}
   b78ae:	4b02      	ldr	r3, [pc, #8]	; (b78b8 <hal_spi_set_settings+0xc>)
   b78b0:	681b      	ldr	r3, [r3, #0]
   b78b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b78b4:	9301      	str	r3, [sp, #4]
   b78b6:	bd08      	pop	{r3, pc}
   b78b8:	00030230 	.word	0x00030230

000b78bc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b78bc:	b508      	push	{r3, lr}
   b78be:	4b02      	ldr	r3, [pc, #8]	; (b78c8 <hal_spi_acquire+0xc>)
   b78c0:	681b      	ldr	r3, [r3, #0]
   b78c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b78c4:	9301      	str	r3, [sp, #4]
   b78c6:	bd08      	pop	{r3, pc}
   b78c8:	00030230 	.word	0x00030230

000b78cc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b78cc:	b508      	push	{r3, lr}
   b78ce:	4b02      	ldr	r3, [pc, #8]	; (b78d8 <hal_spi_release+0xc>)
   b78d0:	681b      	ldr	r3, [r3, #0]
   b78d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b78d4:	9301      	str	r3, [sp, #4]
   b78d6:	bd08      	pop	{r3, pc}
   b78d8:	00030230 	.word	0x00030230

000b78dc <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   b78dc:	b508      	push	{r3, lr}
   b78de:	4b02      	ldr	r3, [pc, #8]	; (b78e8 <HAL_Servo_Attach+0xc>)
   b78e0:	681b      	ldr	r3, [r3, #0]
   b78e2:	691b      	ldr	r3, [r3, #16]
   b78e4:	9301      	str	r3, [sp, #4]
   b78e6:	bd08      	pop	{r3, pc}
   b78e8:	00030224 	.word	0x00030224

000b78ec <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   b78ec:	b508      	push	{r3, lr}
   b78ee:	4b02      	ldr	r3, [pc, #8]	; (b78f8 <HAL_Servo_Detach+0xc>)
   b78f0:	681b      	ldr	r3, [r3, #0]
   b78f2:	695b      	ldr	r3, [r3, #20]
   b78f4:	9301      	str	r3, [sp, #4]
   b78f6:	bd08      	pop	{r3, pc}
   b78f8:	00030224 	.word	0x00030224

000b78fc <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   b78fc:	b508      	push	{r3, lr}
   b78fe:	4b02      	ldr	r3, [pc, #8]	; (b7908 <HAL_Servo_Write_Pulse_Width+0xc>)
   b7900:	681b      	ldr	r3, [r3, #0]
   b7902:	699b      	ldr	r3, [r3, #24]
   b7904:	9301      	str	r3, [sp, #4]
   b7906:	bd08      	pop	{r3, pc}
   b7908:	00030224 	.word	0x00030224

000b790c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b790c:	b508      	push	{r3, lr}
   b790e:	4b02      	ldr	r3, [pc, #8]	; (b7918 <HAL_USB_USART_Init+0xc>)
   b7910:	681b      	ldr	r3, [r3, #0]
   b7912:	681b      	ldr	r3, [r3, #0]
   b7914:	9301      	str	r3, [sp, #4]
   b7916:	bd08      	pop	{r3, pc}
   b7918:	0003024c 	.word	0x0003024c

000b791c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b791c:	b508      	push	{r3, lr}
   b791e:	4b02      	ldr	r3, [pc, #8]	; (b7928 <HAL_USB_USART_Begin+0xc>)
   b7920:	681b      	ldr	r3, [r3, #0]
   b7922:	685b      	ldr	r3, [r3, #4]
   b7924:	9301      	str	r3, [sp, #4]
   b7926:	bd08      	pop	{r3, pc}
   b7928:	0003024c 	.word	0x0003024c

000b792c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b792c:	b508      	push	{r3, lr}
   b792e:	4b02      	ldr	r3, [pc, #8]	; (b7938 <HAL_USB_USART_End+0xc>)
   b7930:	681b      	ldr	r3, [r3, #0]
   b7932:	689b      	ldr	r3, [r3, #8]
   b7934:	9301      	str	r3, [sp, #4]
   b7936:	bd08      	pop	{r3, pc}
   b7938:	0003024c 	.word	0x0003024c

000b793c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b793c:	b508      	push	{r3, lr}
   b793e:	4b02      	ldr	r3, [pc, #8]	; (b7948 <HAL_USB_USART_Available_Data+0xc>)
   b7940:	681b      	ldr	r3, [r3, #0]
   b7942:	691b      	ldr	r3, [r3, #16]
   b7944:	9301      	str	r3, [sp, #4]
   b7946:	bd08      	pop	{r3, pc}
   b7948:	0003024c 	.word	0x0003024c

000b794c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b794c:	b508      	push	{r3, lr}
   b794e:	4b02      	ldr	r3, [pc, #8]	; (b7958 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7950:	681b      	ldr	r3, [r3, #0]
   b7952:	695b      	ldr	r3, [r3, #20]
   b7954:	9301      	str	r3, [sp, #4]
   b7956:	bd08      	pop	{r3, pc}
   b7958:	0003024c 	.word	0x0003024c

000b795c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b795c:	b508      	push	{r3, lr}
   b795e:	4b02      	ldr	r3, [pc, #8]	; (b7968 <HAL_USB_USART_Receive_Data+0xc>)
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	699b      	ldr	r3, [r3, #24]
   b7964:	9301      	str	r3, [sp, #4]
   b7966:	bd08      	pop	{r3, pc}
   b7968:	0003024c 	.word	0x0003024c

000b796c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b796c:	b508      	push	{r3, lr}
   b796e:	4b02      	ldr	r3, [pc, #8]	; (b7978 <HAL_USB_USART_Send_Data+0xc>)
   b7970:	681b      	ldr	r3, [r3, #0]
   b7972:	69db      	ldr	r3, [r3, #28]
   b7974:	9301      	str	r3, [sp, #4]
   b7976:	bd08      	pop	{r3, pc}
   b7978:	0003024c 	.word	0x0003024c

000b797c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b797c:	b508      	push	{r3, lr}
   b797e:	4b02      	ldr	r3, [pc, #8]	; (b7988 <HAL_USB_USART_Flush_Data+0xc>)
   b7980:	681b      	ldr	r3, [r3, #0]
   b7982:	6a1b      	ldr	r3, [r3, #32]
   b7984:	9301      	str	r3, [sp, #4]
   b7986:	bd08      	pop	{r3, pc}
   b7988:	0003024c 	.word	0x0003024c

000b798c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b798c:	b508      	push	{r3, lr}
   b798e:	4b02      	ldr	r3, [pc, #8]	; (b7998 <panic_+0xc>)
   b7990:	681b      	ldr	r3, [r3, #0]
   b7992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7994:	9301      	str	r3, [sp, #4]
   b7996:	bd08      	pop	{r3, pc}
   b7998:	00030260 	.word	0x00030260

000b799c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b799c:	b508      	push	{r3, lr}
   b799e:	4b02      	ldr	r3, [pc, #8]	; (b79a8 <log_message+0xc>)
   b79a0:	681b      	ldr	r3, [r3, #0]
   b79a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b79a4:	9301      	str	r3, [sp, #4]
   b79a6:	bd08      	pop	{r3, pc}
   b79a8:	00030260 	.word	0x00030260

000b79ac <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b79ac:	b508      	push	{r3, lr}
   b79ae:	4b02      	ldr	r3, [pc, #8]	; (b79b8 <log_level_name+0xc>)
   b79b0:	681b      	ldr	r3, [r3, #0]
   b79b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b79b4:	9301      	str	r3, [sp, #4]
   b79b6:	bd08      	pop	{r3, pc}
   b79b8:	00030260 	.word	0x00030260

000b79bc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b79bc:	b508      	push	{r3, lr}
   b79be:	4b02      	ldr	r3, [pc, #8]	; (b79c8 <log_set_callbacks+0xc>)
   b79c0:	681b      	ldr	r3, [r3, #0]
   b79c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b79c4:	9301      	str	r3, [sp, #4]
   b79c6:	bd08      	pop	{r3, pc}
   b79c8:	00030260 	.word	0x00030260

000b79cc <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b79cc:	b508      	push	{r3, lr}
   b79ce:	4b03      	ldr	r3, [pc, #12]	; (b79dc <led_set_status_active+0x10>)
   b79d0:	681b      	ldr	r3, [r3, #0]
   b79d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b79d6:	9301      	str	r3, [sp, #4]
   b79d8:	bd08      	pop	{r3, pc}
   b79da:	0000      	.short	0x0000
   b79dc:	00030260 	.word	0x00030260

000b79e0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b79e0:	b508      	push	{r3, lr}
   b79e2:	4b02      	ldr	r3, [pc, #8]	; (b79ec <system_mode+0xc>)
   b79e4:	681b      	ldr	r3, [r3, #0]
   b79e6:	681b      	ldr	r3, [r3, #0]
   b79e8:	9301      	str	r3, [sp, #4]
   b79ea:	bd08      	pop	{r3, pc}
   b79ec:	00030220 	.word	0x00030220

000b79f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b79f0:	b508      	push	{r3, lr}
   b79f2:	4b02      	ldr	r3, [pc, #8]	; (b79fc <set_system_mode+0xc>)
   b79f4:	681b      	ldr	r3, [r3, #0]
   b79f6:	685b      	ldr	r3, [r3, #4]
   b79f8:	9301      	str	r3, [sp, #4]
   b79fa:	bd08      	pop	{r3, pc}
   b79fc:	00030220 	.word	0x00030220

000b7a00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7a00:	b508      	push	{r3, lr}
   b7a02:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <system_delay_ms+0xc>)
   b7a04:	681b      	ldr	r3, [r3, #0]
   b7a06:	695b      	ldr	r3, [r3, #20]
   b7a08:	9301      	str	r3, [sp, #4]
   b7a0a:	bd08      	pop	{r3, pc}
   b7a0c:	00030220 	.word	0x00030220

000b7a10 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7a10:	b508      	push	{r3, lr}
   b7a12:	4b02      	ldr	r3, [pc, #8]	; (b7a1c <application_thread_current+0xc>)
   b7a14:	681b      	ldr	r3, [r3, #0]
   b7a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7a18:	9301      	str	r3, [sp, #4]
   b7a1a:	bd08      	pop	{r3, pc}
   b7a1c:	00030220 	.word	0x00030220

000b7a20 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7a20:	b508      	push	{r3, lr}
   b7a22:	4b02      	ldr	r3, [pc, #8]	; (b7a2c <application_thread_invoke+0xc>)
   b7a24:	681b      	ldr	r3, [r3, #0]
   b7a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7a28:	9301      	str	r3, [sp, #4]
   b7a2a:	bd08      	pop	{r3, pc}
   b7a2c:	00030220 	.word	0x00030220

000b7a30 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7a30:	b508      	push	{r3, lr}
   b7a32:	4b02      	ldr	r3, [pc, #8]	; (b7a3c <system_thread_get_state+0xc>)
   b7a34:	681b      	ldr	r3, [r3, #0]
   b7a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	bd08      	pop	{r3, pc}
   b7a3c:	00030220 	.word	0x00030220

000b7a40 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b7a40:	b508      	push	{r3, lr}
   b7a42:	4b02      	ldr	r3, [pc, #8]	; (b7a4c <led_pattern_period+0xc>)
   b7a44:	681b      	ldr	r3, [r3, #0]
   b7a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7a48:	9301      	str	r3, [sp, #4]
   b7a4a:	bd08      	pop	{r3, pc}
   b7a4c:	00030220 	.word	0x00030220

000b7a50 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7a50:	b508      	push	{r3, lr}
   b7a52:	4b03      	ldr	r3, [pc, #12]	; (b7a60 <system_ctrl_set_app_request_handler+0x10>)
   b7a54:	681b      	ldr	r3, [r3, #0]
   b7a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7a5a:	9301      	str	r3, [sp, #4]
   b7a5c:	bd08      	pop	{r3, pc}
   b7a5e:	0000      	.short	0x0000
   b7a60:	00030220 	.word	0x00030220

000b7a64 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7a64:	b508      	push	{r3, lr}
   b7a66:	4b03      	ldr	r3, [pc, #12]	; (b7a74 <system_ctrl_set_result+0x10>)
   b7a68:	681b      	ldr	r3, [r3, #0]
   b7a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7a6e:	9301      	str	r3, [sp, #4]
   b7a70:	bd08      	pop	{r3, pc}
   b7a72:	0000      	.short	0x0000
   b7a74:	00030220 	.word	0x00030220

000b7a78 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7a78:	b508      	push	{r3, lr}
   b7a7a:	4b02      	ldr	r3, [pc, #8]	; (b7a84 <network_connect+0xc>)
   b7a7c:	681b      	ldr	r3, [r3, #0]
   b7a7e:	685b      	ldr	r3, [r3, #4]
   b7a80:	9301      	str	r3, [sp, #4]
   b7a82:	bd08      	pop	{r3, pc}
   b7a84:	00030240 	.word	0x00030240

000b7a88 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7a88:	b508      	push	{r3, lr}
   b7a8a:	4b02      	ldr	r3, [pc, #8]	; (b7a94 <network_connecting+0xc>)
   b7a8c:	681b      	ldr	r3, [r3, #0]
   b7a8e:	689b      	ldr	r3, [r3, #8]
   b7a90:	9301      	str	r3, [sp, #4]
   b7a92:	bd08      	pop	{r3, pc}
   b7a94:	00030240 	.word	0x00030240

000b7a98 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	4b02      	ldr	r3, [pc, #8]	; (b7aa4 <network_disconnect+0xc>)
   b7a9c:	681b      	ldr	r3, [r3, #0]
   b7a9e:	68db      	ldr	r3, [r3, #12]
   b7aa0:	9301      	str	r3, [sp, #4]
   b7aa2:	bd08      	pop	{r3, pc}
   b7aa4:	00030240 	.word	0x00030240

000b7aa8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7aa8:	b508      	push	{r3, lr}
   b7aaa:	4b02      	ldr	r3, [pc, #8]	; (b7ab4 <network_ready+0xc>)
   b7aac:	681b      	ldr	r3, [r3, #0]
   b7aae:	691b      	ldr	r3, [r3, #16]
   b7ab0:	9301      	str	r3, [sp, #4]
   b7ab2:	bd08      	pop	{r3, pc}
   b7ab4:	00030240 	.word	0x00030240

000b7ab8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ab8:	b508      	push	{r3, lr}
   b7aba:	4b02      	ldr	r3, [pc, #8]	; (b7ac4 <network_on+0xc>)
   b7abc:	681b      	ldr	r3, [r3, #0]
   b7abe:	695b      	ldr	r3, [r3, #20]
   b7ac0:	9301      	str	r3, [sp, #4]
   b7ac2:	bd08      	pop	{r3, pc}
   b7ac4:	00030240 	.word	0x00030240

000b7ac8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7ac8:	b508      	push	{r3, lr}
   b7aca:	4b02      	ldr	r3, [pc, #8]	; (b7ad4 <network_off+0xc>)
   b7acc:	681b      	ldr	r3, [r3, #0]
   b7ace:	699b      	ldr	r3, [r3, #24]
   b7ad0:	9301      	str	r3, [sp, #4]
   b7ad2:	bd08      	pop	{r3, pc}
   b7ad4:	00030240 	.word	0x00030240

000b7ad8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7ad8:	b508      	push	{r3, lr}
   b7ada:	4b02      	ldr	r3, [pc, #8]	; (b7ae4 <network_listen+0xc>)
   b7adc:	681b      	ldr	r3, [r3, #0]
   b7ade:	69db      	ldr	r3, [r3, #28]
   b7ae0:	9301      	str	r3, [sp, #4]
   b7ae2:	bd08      	pop	{r3, pc}
   b7ae4:	00030240 	.word	0x00030240

000b7ae8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7ae8:	b508      	push	{r3, lr}
   b7aea:	4b02      	ldr	r3, [pc, #8]	; (b7af4 <network_listening+0xc>)
   b7aec:	681b      	ldr	r3, [r3, #0]
   b7aee:	6a1b      	ldr	r3, [r3, #32]
   b7af0:	9301      	str	r3, [sp, #4]
   b7af2:	bd08      	pop	{r3, pc}
   b7af4:	00030240 	.word	0x00030240

000b7af8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7af8:	b508      	push	{r3, lr}
   b7afa:	4b02      	ldr	r3, [pc, #8]	; (b7b04 <network_set_listen_timeout+0xc>)
   b7afc:	681b      	ldr	r3, [r3, #0]
   b7afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b00:	9301      	str	r3, [sp, #4]
   b7b02:	bd08      	pop	{r3, pc}
   b7b04:	00030240 	.word	0x00030240

000b7b08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7b08:	b508      	push	{r3, lr}
   b7b0a:	4b02      	ldr	r3, [pc, #8]	; (b7b14 <network_get_listen_timeout+0xc>)
   b7b0c:	681b      	ldr	r3, [r3, #0]
   b7b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7b10:	9301      	str	r3, [sp, #4]
   b7b12:	bd08      	pop	{r3, pc}
   b7b14:	00030240 	.word	0x00030240

000b7b18 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7b18:	b508      	push	{r3, lr}
   b7b1a:	4b02      	ldr	r3, [pc, #8]	; (b7b24 <network_is_on+0xc>)
   b7b1c:	681b      	ldr	r3, [r3, #0]
   b7b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7b20:	9301      	str	r3, [sp, #4]
   b7b22:	bd08      	pop	{r3, pc}
   b7b24:	00030240 	.word	0x00030240

000b7b28 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7b28:	b508      	push	{r3, lr}
   b7b2a:	4b02      	ldr	r3, [pc, #8]	; (b7b34 <network_is_off+0xc>)
   b7b2c:	681b      	ldr	r3, [r3, #0]
   b7b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7b30:	9301      	str	r3, [sp, #4]
   b7b32:	bd08      	pop	{r3, pc}
   b7b34:	00030240 	.word	0x00030240

000b7b38 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7b38:	b508      	push	{r3, lr}
   b7b3a:	4b02      	ldr	r3, [pc, #8]	; (b7b44 <spark_process+0xc>)
   b7b3c:	681b      	ldr	r3, [r3, #0]
   b7b3e:	689b      	ldr	r3, [r3, #8]
   b7b40:	9301      	str	r3, [sp, #4]
   b7b42:	bd08      	pop	{r3, pc}
   b7b44:	00030244 	.word	0x00030244

000b7b48 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7b48:	b508      	push	{r3, lr}
   b7b4a:	4b02      	ldr	r3, [pc, #8]	; (b7b54 <spark_cloud_flag_connected+0xc>)
   b7b4c:	681b      	ldr	r3, [r3, #0]
   b7b4e:	695b      	ldr	r3, [r3, #20]
   b7b50:	9301      	str	r3, [sp, #4]
   b7b52:	bd08      	pop	{r3, pc}
   b7b54:	00030244 	.word	0x00030244

000b7b58 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7b58:	b508      	push	{r3, lr}
   b7b5a:	4b02      	ldr	r3, [pc, #8]	; (b7b64 <spark_send_event+0xc>)
   b7b5c:	681b      	ldr	r3, [r3, #0]
   b7b5e:	6a1b      	ldr	r3, [r3, #32]
   b7b60:	9301      	str	r3, [sp, #4]
   b7b62:	bd08      	pop	{r3, pc}
   b7b64:	00030244 	.word	0x00030244

000b7b68 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7b68:	b508      	push	{r3, lr}
   b7b6a:	4b02      	ldr	r3, [pc, #8]	; (b7b74 <spark_subscribe+0xc>)
   b7b6c:	681b      	ldr	r3, [r3, #0]
   b7b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b70:	9301      	str	r3, [sp, #4]
   b7b72:	bd08      	pop	{r3, pc}
   b7b74:	00030244 	.word	0x00030244

000b7b78 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7b78:	b508      	push	{r3, lr}
   b7b7a:	4b02      	ldr	r3, [pc, #8]	; (b7b84 <spark_sync_time_pending+0xc>)
   b7b7c:	681b      	ldr	r3, [r3, #0]
   b7b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b80:	9301      	str	r3, [sp, #4]
   b7b82:	bd08      	pop	{r3, pc}
   b7b84:	00030244 	.word	0x00030244

000b7b88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7b88:	b508      	push	{r3, lr}
   b7b8a:	4b02      	ldr	r3, [pc, #8]	; (b7b94 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7b8c:	681b      	ldr	r3, [r3, #0]
   b7b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7b90:	9301      	str	r3, [sp, #4]
   b7b92:	bd08      	pop	{r3, pc}
   b7b94:	00030244 	.word	0x00030244

000b7b98 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <malloc+0xc>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	681b      	ldr	r3, [r3, #0]
   b7ba0:	9301      	str	r3, [sp, #4]
   b7ba2:	bd08      	pop	{r3, pc}
   b7ba4:	0003021c 	.word	0x0003021c

000b7ba8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7ba8:	b508      	push	{r3, lr}
   b7baa:	4b02      	ldr	r3, [pc, #8]	; (b7bb4 <free+0xc>)
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	685b      	ldr	r3, [r3, #4]
   b7bb0:	9301      	str	r3, [sp, #4]
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	0003021c 	.word	0x0003021c

000b7bb8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7bb8:	b508      	push	{r3, lr}
   b7bba:	4b02      	ldr	r3, [pc, #8]	; (b7bc4 <realloc+0xc>)
   b7bbc:	681b      	ldr	r3, [r3, #0]
   b7bbe:	689b      	ldr	r3, [r3, #8]
   b7bc0:	9301      	str	r3, [sp, #4]
   b7bc2:	bd08      	pop	{r3, pc}
   b7bc4:	0003021c 	.word	0x0003021c

000b7bc8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7bc8:	b508      	push	{r3, lr}
   b7bca:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <sprintf+0xc>)
   b7bcc:	681b      	ldr	r3, [r3, #0]
   b7bce:	68db      	ldr	r3, [r3, #12]
   b7bd0:	9301      	str	r3, [sp, #4]
   b7bd2:	bd08      	pop	{r3, pc}
   b7bd4:	0003021c 	.word	0x0003021c

000b7bd8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7bd8:	b508      	push	{r3, lr}
   b7bda:	4b02      	ldr	r3, [pc, #8]	; (b7be4 <snprintf+0xc>)
   b7bdc:	681b      	ldr	r3, [r3, #0]
   b7bde:	69db      	ldr	r3, [r3, #28]
   b7be0:	9301      	str	r3, [sp, #4]
   b7be2:	bd08      	pop	{r3, pc}
   b7be4:	0003021c 	.word	0x0003021c

000b7be8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7be8:	b508      	push	{r3, lr}
   b7bea:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <vsnprintf+0xc>)
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7bf0:	9301      	str	r3, [sp, #4]
   b7bf2:	bd08      	pop	{r3, pc}
   b7bf4:	0003021c 	.word	0x0003021c

000b7bf8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7bf8:	b508      	push	{r3, lr}
   b7bfa:	4b02      	ldr	r3, [pc, #8]	; (b7c04 <abort+0xc>)
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7c00:	9301      	str	r3, [sp, #4]
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	0003021c 	.word	0x0003021c

000b7c08 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <_malloc_r+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	0003021c 	.word	0x0003021c

000b7c18 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <__errno+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	0003021c 	.word	0x0003021c

000b7c28 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <__assert_func+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	0003021c 	.word	0x0003021c

000b7c38 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <newlib_impure_ptr_callback+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	0003021c 	.word	0x0003021c

000b7c48 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <localtime_r+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	0003021c 	.word	0x0003021c

000b7c58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7c58:	2200      	movs	r2, #0
   b7c5a:	6840      	ldr	r0, [r0, #4]
   b7c5c:	4611      	mov	r1, r2
   b7c5e:	f7ff bf43 	b.w	b7ae8 <network_listening>

000b7c62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7c62:	2200      	movs	r2, #0
   b7c64:	6840      	ldr	r0, [r0, #4]
   b7c66:	4611      	mov	r1, r2
   b7c68:	f7ff bf4e 	b.w	b7b08 <network_get_listen_timeout>

000b7c6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7c6c:	6840      	ldr	r0, [r0, #4]
   b7c6e:	2200      	movs	r2, #0
   b7c70:	f7ff bf42 	b.w	b7af8 <network_set_listen_timeout>

000b7c74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7c74:	6840      	ldr	r0, [r0, #4]
   b7c76:	2200      	movs	r2, #0
   b7c78:	f081 0101 	eor.w	r1, r1, #1
   b7c7c:	f7ff bf2c 	b.w	b7ad8 <network_listen>

000b7c80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7c80:	2300      	movs	r3, #0
   b7c82:	6840      	ldr	r0, [r0, #4]
   b7c84:	461a      	mov	r2, r3
   b7c86:	4619      	mov	r1, r3
   b7c88:	f7ff bf1e 	b.w	b7ac8 <network_off>

000b7c8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7c8c:	2300      	movs	r3, #0
   b7c8e:	6840      	ldr	r0, [r0, #4]
   b7c90:	461a      	mov	r2, r3
   b7c92:	4619      	mov	r1, r3
   b7c94:	f7ff bf10 	b.w	b7ab8 <network_on>

000b7c98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7c98:	2200      	movs	r2, #0
   b7c9a:	6840      	ldr	r0, [r0, #4]
   b7c9c:	4611      	mov	r1, r2
   b7c9e:	f7ff bf03 	b.w	b7aa8 <network_ready>

000b7ca2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ca2:	2200      	movs	r2, #0
   b7ca4:	6840      	ldr	r0, [r0, #4]
   b7ca6:	4611      	mov	r1, r2
   b7ca8:	f7ff beee 	b.w	b7a88 <network_connecting>

000b7cac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7cac:	6840      	ldr	r0, [r0, #4]
   b7cae:	2200      	movs	r2, #0
   b7cb0:	2102      	movs	r1, #2
   b7cb2:	f7ff bef1 	b.w	b7a98 <network_disconnect>

000b7cb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7cb6:	2300      	movs	r3, #0
   b7cb8:	6840      	ldr	r0, [r0, #4]
   b7cba:	461a      	mov	r2, r3
   b7cbc:	f7ff bedc 	b.w	b7a78 <network_connect>

000b7cc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7cc0:	4b02      	ldr	r3, [pc, #8]	; (b7ccc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7cc2:	2203      	movs	r2, #3
   b7cc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7cc6:	4a02      	ldr	r2, [pc, #8]	; (b7cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7cc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7cca:	4770      	bx	lr
   b7ccc:	2003e61c 	.word	0x2003e61c
   b7cd0:	000bed6c 	.word	0x000bed6c

000b7cd4 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b7cd4:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b7cd6:	460b      	mov	r3, r1
    s->update(ticks);
   b7cd8:	6892      	ldr	r2, [r2, #8]
   b7cda:	4601      	mov	r1, r0
   b7cdc:	4618      	mov	r0, r3
   b7cde:	4710      	bx	r2

000b7ce0 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b7ce0:	b570      	push	{r4, r5, r6, lr}
   b7ce2:	4c0e      	ldr	r4, [pc, #56]	; (b7d1c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b7ce4:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b7ce6:	2500      	movs	r5, #0
   b7ce8:	241c      	movs	r4, #28
   b7cea:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b7cee:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b7cf2:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b7cf6:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b7cf8:	f004 0403 	and.w	r4, r4, #3
   b7cfc:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b7d00:	b2e4      	uxtb	r4, r4
   b7d02:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b7d04:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b7d06:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b7d08:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b7d0a:	7c42      	ldrb	r2, [r0, #17]
   b7d0c:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b7d0e:	bf0a      	itet	eq
   b7d10:	4b03      	ldreq	r3, [pc, #12]	; (b7d20 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b7d12:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b7d14:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b7d18:	bd70      	pop	{r4, r5, r6, pc}
   b7d1a:	bf00      	nop
   b7d1c:	000bec68 	.word	0x000bec68
   b7d20:	000b7cd5 	.word	0x000b7cd5

000b7d24 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7d24:	2100      	movs	r1, #0
   b7d26:	f7ff bdd1 	b.w	b78cc <hal_spi_release>

000b7d2a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7d2a:	2100      	movs	r1, #0
   b7d2c:	f7ff bdc6 	b.w	b78bc <hal_spi_acquire>

000b7d30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7d30:	b510      	push	{r4, lr}
   b7d32:	4604      	mov	r4, r0
   b7d34:	4608      	mov	r0, r1
{
    _spi = spi;
   b7d36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7d38:	f7ff fd88 	bl	b784c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7d3c:	2300      	movs	r3, #0
   b7d3e:	6063      	str	r3, [r4, #4]
}
   b7d40:	4620      	mov	r0, r4
   b7d42:	bd10      	pop	{r4, pc}

000b7d44 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7d44:	b513      	push	{r0, r1, r4, lr}
   b7d46:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7d48:	7800      	ldrb	r0, [r0, #0]
   b7d4a:	f7ff ffee 	bl	b7d2a <_ZN8SPIClass4lockEv.isra.0>
   b7d4e:	b958      	cbnz	r0, b7d68 <_ZN8SPIClass5beginEv+0x24>
   b7d50:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7d52:	9001      	str	r0, [sp, #4]
   b7d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7d58:	f7ff fd60 	bl	b781c <hal_spi_begin>
        unlock();
   b7d5c:	9801      	ldr	r0, [sp, #4]
    }
}
   b7d5e:	b002      	add	sp, #8
   b7d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d64:	f7ff bfde 	b.w	b7d24 <_ZN8SPIClass6unlockEv.isra.0>
   b7d68:	b002      	add	sp, #8
   b7d6a:	bd10      	pop	{r4, pc}

000b7d6c <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
   b7d6c:	b513      	push	{r0, r1, r4, lr}
   b7d6e:	4604      	mov	r4, r0
    if (!lock())
   b7d70:	7800      	ldrb	r0, [r0, #0]
{
   b7d72:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
   b7d76:	f7ff ffd8 	bl	b7d2a <_ZN8SPIClass4lockEv.isra.0>
   b7d7a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b7d7e:	4603      	mov	r3, r0
   b7d80:	b948      	cbnz	r0, b7d96 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
   b7d82:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
   b7d84:	9000      	str	r0, [sp, #0]
   b7d86:	f7ff fd81 	bl	b788c <hal_spi_begin_ext>
        unlock();
   b7d8a:	9800      	ldr	r0, [sp, #0]
    }
}
   b7d8c:	b002      	add	sp, #8
   b7d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7d92:	f7ff bfc7 	b.w	b7d24 <_ZN8SPIClass6unlockEv.isra.0>
   b7d96:	b002      	add	sp, #8
   b7d98:	bd10      	pop	{r4, pc}

000b7d9a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7d9a:	7800      	ldrb	r0, [r0, #0]
   b7d9c:	f7ff bfc2 	b.w	b7d24 <_ZN8SPIClass6unlockEv.isra.0>

000b7da0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7da0:	0840      	lsrs	r0, r0, #1
{
   b7da2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7da4:	6018      	str	r0, [r3, #0]
   b7da6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7da8:	6818      	ldr	r0, [r3, #0]
   b7daa:	4288      	cmp	r0, r1
   b7dac:	b2e5      	uxtb	r5, r4
   b7dae:	d906      	bls.n	b7dbe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7db0:	3401      	adds	r4, #1
   b7db2:	2c08      	cmp	r4, #8
   b7db4:	d002      	beq.n	b7dbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7db6:	0840      	lsrs	r0, r0, #1
   b7db8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7dba:	e7f5      	b.n	b7da8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7dbc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7dbe:	4b02      	ldr	r3, [pc, #8]	; (b7dc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7dc0:	5d5b      	ldrb	r3, [r3, r5]
   b7dc2:	7013      	strb	r3, [r2, #0]
}
   b7dc4:	bd30      	pop	{r4, r5, pc}
   b7dc6:	bf00      	nop
   b7dc8:	000beda0 	.word	0x000beda0

000b7dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7dd0:	4606      	mov	r6, r0
   b7dd2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7dd4:	7800      	ldrb	r0, [r0, #0]
{
   b7dd6:	460c      	mov	r4, r1
    CHECK(lock());
   b7dd8:	f7ff ffa7 	bl	b7d2a <_ZN8SPIClass4lockEv.isra.0>
   b7ddc:	2800      	cmp	r0, #0
   b7dde:	db1b      	blt.n	b7e18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7de0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7de2:	2214      	movs	r2, #20
   b7de4:	2100      	movs	r1, #0
   b7de6:	a809      	add	r0, sp, #36	; 0x24
   b7de8:	f004 fc0e 	bl	bc608 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7dec:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7dee:	2200      	movs	r2, #0
   b7df0:	a909      	add	r1, sp, #36	; 0x24
   b7df2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7df4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7df8:	f7ff fd38 	bl	b786c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7dfc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7e00:	b113      	cbz	r3, b7e08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7e02:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7e06:	b155      	cbz	r5, b7e1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7e08:	2700      	movs	r7, #0
   b7e0a:	46b9      	mov	r9, r7
   b7e0c:	46b8      	mov	r8, r7
   b7e0e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7e10:	7923      	ldrb	r3, [r4, #4]
   b7e12:	b15d      	cbz	r5, b7e2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7e14:	b1c3      	cbz	r3, b7e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7e16:	2000      	movs	r0, #0
}
   b7e18:	b00f      	add	sp, #60	; 0x3c
   b7e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7e1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7e22:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7e26:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7e2a:	e7f1      	b.n	b7e10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7e2c:	2b00      	cmp	r3, #0
   b7e2e:	d135      	bne.n	b7e9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7e30:	68a3      	ldr	r3, [r4, #8]
   b7e32:	4543      	cmp	r3, r8
   b7e34:	d108      	bne.n	b7e48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7e36:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e3a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e42:	89a3      	ldrh	r3, [r4, #12]
   b7e44:	429a      	cmp	r2, r3
   b7e46:	d0e6      	beq.n	b7e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7e48:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e4a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7e4c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7e50:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7e52:	ab04      	add	r3, sp, #16
   b7e54:	f10d 020f 	add.w	r2, sp, #15
   b7e58:	f7ff ffa2 	bl	b7da0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7e5c:	7921      	ldrb	r1, [r4, #4]
   b7e5e:	b985      	cbnz	r5, b7e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7e60:	b989      	cbnz	r1, b7e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e62:	68a3      	ldr	r3, [r4, #8]
   b7e64:	4543      	cmp	r3, r8
   b7e66:	d30e      	bcc.n	b7e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7e68:	f88d 9020 	strb.w	r9, [sp, #32]
   b7e6c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7e70:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7e74:	89a3      	ldrh	r3, [r4, #12]
   b7e76:	429a      	cmp	r2, r3
   b7e78:	d105      	bne.n	b7e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7e7a:	9b04      	ldr	r3, [sp, #16]
   b7e7c:	4543      	cmp	r3, r8
   b7e7e:	d102      	bne.n	b7e86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7e80:	e7c9      	b.n	b7e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7e82:	2900      	cmp	r1, #0
   b7e84:	d1f9      	bne.n	b7e7a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7e86:	2300      	movs	r3, #0
   b7e88:	9301      	str	r3, [sp, #4]
   b7e8a:	7b63      	ldrb	r3, [r4, #13]
   b7e8c:	9300      	str	r3, [sp, #0]
   b7e8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7e92:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7e94:	7830      	ldrb	r0, [r6, #0]
   b7e96:	f7ff fd09 	bl	b78ac <hal_spi_set_settings>
   b7e9a:	e7bc      	b.n	b7e16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7e9c:	e9cd 5500 	strd	r5, r5, [sp]
   b7ea0:	462b      	mov	r3, r5
   b7ea2:	462a      	mov	r2, r5
   b7ea4:	2101      	movs	r1, #1
   b7ea6:	e7f5      	b.n	b7e94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7ea8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b7ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7eac:	b088      	sub	sp, #32
    unsigned clock = 0;
   b7eae:	2300      	movs	r3, #0
{
   b7eb0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b7eb2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b7eb4:	9302      	str	r3, [sp, #8]
{
   b7eb6:	460e      	mov	r6, r1
   b7eb8:	4617      	mov	r7, r2
    if (!lock())
   b7eba:	f7ff ff36 	bl	b7d2a <_ZN8SPIClass4lockEv.isra.0>
   b7ebe:	4605      	mov	r5, r0
   b7ec0:	bb00      	cbnz	r0, b7f04 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b7ec2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7ec6:	4601      	mov	r1, r0
   b7ec8:	2214      	movs	r2, #20
   b7eca:	a803      	add	r0, sp, #12
   b7ecc:	f004 fb9c 	bl	bc608 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ed0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7ed2:	462a      	mov	r2, r5
   b7ed4:	a903      	add	r1, sp, #12
   b7ed6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b7ed8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b7edc:	f7ff fcc6 	bl	b786c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7ee0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b7ee2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b7ee6:	ab02      	add	r3, sp, #8
   b7ee8:	f10d 0207 	add.w	r2, sp, #7
   b7eec:	fb07 f106 	mul.w	r1, r7, r6
   b7ef0:	f7ff ff56 	bl	b7da0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b7ef4:	7820      	ldrb	r0, [r4, #0]
   b7ef6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b7efa:	f7ff fc97 	bl	b782c <hal_spi_set_clock_divider>
        unlock();
   b7efe:	7820      	ldrb	r0, [r4, #0]
   b7f00:	f7ff ff10 	bl	b7d24 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b7f04:	9802      	ldr	r0, [sp, #8]
   b7f06:	b008      	add	sp, #32
   b7f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7f0c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b7f0c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7f0e:	7800      	ldrb	r0, [r0, #0]
   b7f10:	f7ff fc94 	bl	b783c <hal_spi_transfer>
}
   b7f14:	b2c0      	uxtb	r0, r0
   b7f16:	bd08      	pop	{r3, pc}

000b7f18 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b7f18:	b530      	push	{r4, r5, lr}
   b7f1a:	b087      	sub	sp, #28
   b7f1c:	4604      	mov	r4, r0
   b7f1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7f20:	9500      	str	r5, [sp, #0]
   b7f22:	7800      	ldrb	r0, [r0, #0]
   b7f24:	f7ff fcaa 	bl	b787c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b7f28:	b93d      	cbnz	r5, b7f3a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b7f2a:	7820      	ldrb	r0, [r4, #0]
   b7f2c:	a902      	add	r1, sp, #8
   b7f2e:	f7ff fcb5 	bl	b789c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b7f32:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7f36:	07db      	lsls	r3, r3, #31
   b7f38:	d4f7      	bmi.n	b7f2a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7f3a:	b007      	add	sp, #28
   b7f3c:	bd30      	pop	{r4, r5, pc}

000b7f3e <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   b7f3e:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   b7f42:	1c53      	adds	r3, r2, #1
   b7f44:	d00b      	beq.n	b7f5e <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   b7f46:	8843      	ldrh	r3, [r0, #2]
   b7f48:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b7f4a:	428b      	cmp	r3, r1
   b7f4c:	d803      	bhi.n	b7f56 <_ZN5Servo17writeMicrosecondsEt+0x18>
   b7f4e:	4288      	cmp	r0, r1
   b7f50:	4603      	mov	r3, r0
   b7f52:	bf28      	it	cs
   b7f54:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   b7f56:	4619      	mov	r1, r3
   b7f58:	b290      	uxth	r0, r2
   b7f5a:	f7ff bccf 	b.w	b78fc <HAL_Servo_Write_Pulse_Width>
}
   b7f5e:	4770      	bx	lr

000b7f60 <_ZN5Servo5writeEi>:
{
   b7f60:	b513      	push	{r0, r1, r4, lr}
   b7f62:	4604      	mov	r4, r0
   b7f64:	4608      	mov	r0, r1
   b7f66:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   b7f6a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   b7f6e:	4288      	cmp	r0, r1
   b7f70:	db10      	blt.n	b7f94 <_ZN5Servo5writeEi+0x34>
   b7f72:	4290      	cmp	r0, r2
   b7f74:	bfa8      	it	ge
   b7f76:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b7f78:	88a3      	ldrh	r3, [r4, #4]
   b7f7a:	9300      	str	r3, [sp, #0]
   b7f7c:	8863      	ldrh	r3, [r4, #2]
   b7f7e:	f002 fbff 	bl	ba780 <_Z3mapiiiii>
   b7f82:	68e1      	ldr	r1, [r4, #12]
   b7f84:	4401      	add	r1, r0
   b7f86:	b289      	uxth	r1, r1
   b7f88:	4620      	mov	r0, r4
}
   b7f8a:	b002      	add	sp, #8
   b7f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   b7f90:	f7ff bfd5 	b.w	b7f3e <_ZN5Servo17writeMicrosecondsEt>
   b7f94:	4608      	mov	r0, r1
   b7f96:	e7ef      	b.n	b7f78 <_ZN5Servo5writeEi+0x18>

000b7f98 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   b7f98:	4a04      	ldr	r2, [pc, #16]	; (b7fac <_ZN5Servo11resetFieldsEv+0x14>)
   b7f9a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   b7f9e:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   b7fa2:	23b4      	movs	r3, #180	; 0xb4
   b7fa4:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   b7fa6:	2300      	movs	r3, #0
   b7fa8:	60c3      	str	r3, [r0, #12]
}
   b7faa:	4770      	bx	lr
   b7fac:	0220ffff 	.word	0x0220ffff

000b7fb0 <_ZN5ServoC1Ev>:
Servo::Servo()
   b7fb0:	b508      	push	{r3, lr}
  this->resetFields();
   b7fb2:	f7ff fff1 	bl	b7f98 <_ZN5Servo11resetFieldsEv>
}
   b7fb6:	bd08      	pop	{r3, pc}

000b7fb8 <_ZN5Servo6detachEv>:
{
   b7fb8:	b510      	push	{r4, lr}
   b7fba:	4604      	mov	r4, r0
   b7fbc:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   b7fc0:	1c43      	adds	r3, r0, #1
   b7fc2:	d007      	beq.n	b7fd4 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   b7fc4:	b280      	uxth	r0, r0
   b7fc6:	f7ff fc91 	bl	b78ec <HAL_Servo_Detach>
  this->resetFields();
   b7fca:	4620      	mov	r0, r4
   b7fcc:	f7ff ffe4 	bl	b7f98 <_ZN5Servo11resetFieldsEv>
  return true;
   b7fd0:	2001      	movs	r0, #1
}
   b7fd2:	bd10      	pop	{r4, pc}
    return false;
   b7fd4:	2000      	movs	r0, #0
   b7fd6:	e7fc      	b.n	b7fd2 <_ZN5Servo6detachEv+0x1a>

000b7fd8 <_ZN5Servo6attachEtttss>:
{
   b7fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fdc:	460d      	mov	r5, r1
   b7fde:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b7fe0:	2102      	movs	r1, #2
   b7fe2:	4628      	mov	r0, r5
{
   b7fe4:	4690      	mov	r8, r2
   b7fe6:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   b7fe8:	f7ff fa26 	bl	b7438 <HAL_Validate_Pin_Function>
   b7fec:	2802      	cmp	r0, #2
   b7fee:	d003      	beq.n	b7ff8 <_ZN5Servo6attachEtttss+0x20>
    return false;
   b7ff0:	2600      	movs	r6, #0
}
   b7ff2:	4630      	mov	r0, r6
   b7ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   b7ff8:	4628      	mov	r0, r5
   b7ffa:	f003 fbd5 	bl	bb7a8 <pinAvailable>
   b7ffe:	4606      	mov	r6, r0
   b8000:	2800      	cmp	r0, #0
   b8002:	d0f5      	beq.n	b7ff0 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   b8004:	f9b4 3000 	ldrsh.w	r3, [r4]
   b8008:	3301      	adds	r3, #1
   b800a:	d002      	beq.n	b8012 <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   b800c:	4620      	mov	r0, r4
   b800e:	f7ff ffd3 	bl	b7fb8 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   b8012:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   b8016:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   b8018:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   b801c:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   b801e:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   b8022:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   b8024:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   b8026:	4628      	mov	r0, r5
   b8028:	f7ff fc58 	bl	b78dc <HAL_Servo_Attach>
  return true;
   b802c:	e7e1      	b.n	b7ff2 <_ZN5Servo6attachEtttss+0x1a>
	...

000b8030 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8030:	4b05      	ldr	r3, [pc, #20]	; (b8048 <_GLOBAL__sub_I_System+0x18>)
   b8032:	2202      	movs	r2, #2
   b8034:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8036:	4b05      	ldr	r3, [pc, #20]	; (b804c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8038:	4a05      	ldr	r2, [pc, #20]	; (b8050 <_GLOBAL__sub_I_System+0x20>)
   b803a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b803c:	2000      	movs	r0, #0
   b803e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8042:	f7ff bcd5 	b.w	b79f0 <set_system_mode>
   b8046:	bf00      	nop
   b8048:	2003e630 	.word	0x2003e630
   b804c:	2003e624 	.word	0x2003e624
   b8050:	ffff0000 	.word	0xffff0000

000b8054 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8054:	b510      	push	{r4, lr}
   b8056:	4604      	mov	r4, r0
{
	free(buffer);
   b8058:	6800      	ldr	r0, [r0, #0]
   b805a:	f7ff fda5 	bl	b7ba8 <free>
}
   b805e:	4620      	mov	r0, r4
   b8060:	bd10      	pop	{r4, pc}

000b8062 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8062:	b510      	push	{r4, lr}
   b8064:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8066:	6800      	ldr	r0, [r0, #0]
   b8068:	b108      	cbz	r0, b806e <_ZN6String10invalidateEv+0xc>
   b806a:	f7ff fd9d 	bl	b7ba8 <free>
	buffer = NULL;
   b806e:	2300      	movs	r3, #0
	capacity = len = 0;
   b8070:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8074:	6023      	str	r3, [r4, #0]
}
   b8076:	bd10      	pop	{r4, pc}

000b8078 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8078:	b538      	push	{r3, r4, r5, lr}
   b807a:	4604      	mov	r4, r0
   b807c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b807e:	6800      	ldr	r0, [r0, #0]
   b8080:	3101      	adds	r1, #1
   b8082:	f7ff fd99 	bl	b7bb8 <realloc>
	if (newbuffer) {
   b8086:	b110      	cbz	r0, b808e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8088:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b808c:	2001      	movs	r0, #1
	}
	return 0;
}
   b808e:	bd38      	pop	{r3, r4, r5, pc}

000b8090 <_ZN6String7reserveEj>:
{
   b8090:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8092:	6803      	ldr	r3, [r0, #0]
{
   b8094:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8096:	b123      	cbz	r3, b80a2 <_ZN6String7reserveEj+0x12>
   b8098:	6843      	ldr	r3, [r0, #4]
   b809a:	428b      	cmp	r3, r1
   b809c:	d301      	bcc.n	b80a2 <_ZN6String7reserveEj+0x12>
   b809e:	2001      	movs	r0, #1
}
   b80a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b80a2:	4620      	mov	r0, r4
   b80a4:	f7ff ffe8 	bl	b8078 <_ZN6String12changeBufferEj>
   b80a8:	2800      	cmp	r0, #0
   b80aa:	d0f9      	beq.n	b80a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b80ac:	68a3      	ldr	r3, [r4, #8]
   b80ae:	2b00      	cmp	r3, #0
   b80b0:	d1f5      	bne.n	b809e <_ZN6String7reserveEj+0xe>
   b80b2:	6822      	ldr	r2, [r4, #0]
   b80b4:	7013      	strb	r3, [r2, #0]
   b80b6:	e7f2      	b.n	b809e <_ZN6String7reserveEj+0xe>

000b80b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b80b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b80ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b80bc:	4611      	mov	r1, r2
   b80be:	9201      	str	r2, [sp, #4]
{
   b80c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b80c2:	f7ff ffe5 	bl	b8090 <_ZN6String7reserveEj>
   b80c6:	9a01      	ldr	r2, [sp, #4]
   b80c8:	b928      	cbnz	r0, b80d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b80ca:	4620      	mov	r0, r4
   b80cc:	f7ff ffc9 	bl	b8062 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b80d0:	4620      	mov	r0, r4
   b80d2:	b003      	add	sp, #12
   b80d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b80d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b80d8:	4629      	mov	r1, r5
   b80da:	6820      	ldr	r0, [r4, #0]
   b80dc:	f004 fa6c 	bl	bc5b8 <memcpy>
	buffer[len] = 0;
   b80e0:	6822      	ldr	r2, [r4, #0]
   b80e2:	68a3      	ldr	r3, [r4, #8]
   b80e4:	2100      	movs	r1, #0
   b80e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b80e8:	e7f2      	b.n	b80d0 <_ZN6String4copyEPKcj+0x18>

000b80ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b80ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b80ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b80ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b80f2:	4604      	mov	r4, r0
	len = 0;
   b80f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b80f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b80f8:	b141      	cbz	r1, b810c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b80fa:	4608      	mov	r0, r1
   b80fc:	9101      	str	r1, [sp, #4]
   b80fe:	f004 fb0e 	bl	bc71e <strlen>
   b8102:	9901      	ldr	r1, [sp, #4]
   b8104:	4602      	mov	r2, r0
   b8106:	4620      	mov	r0, r4
   b8108:	f7ff ffd6 	bl	b80b8 <_ZN6String4copyEPKcj>
}
   b810c:	4620      	mov	r0, r4
   b810e:	b002      	add	sp, #8
   b8110:	bd10      	pop	{r4, pc}

000b8112 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8112:	b538      	push	{r3, r4, r5, lr}
   b8114:	4605      	mov	r5, r0
	if (buffer) {
   b8116:	6800      	ldr	r0, [r0, #0]
{
   b8118:	460c      	mov	r4, r1
	if (buffer) {
   b811a:	b168      	cbz	r0, b8138 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b811c:	686a      	ldr	r2, [r5, #4]
   b811e:	688b      	ldr	r3, [r1, #8]
   b8120:	429a      	cmp	r2, r3
   b8122:	d307      	bcc.n	b8134 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8124:	6809      	ldr	r1, [r1, #0]
   b8126:	f004 fad5 	bl	bc6d4 <strcpy>
			len = rhs.len;
   b812a:	68a3      	ldr	r3, [r4, #8]
   b812c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b812e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8130:	60a3      	str	r3, [r4, #8]
}
   b8132:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8134:	f7ff fd38 	bl	b7ba8 <free>
	buffer = rhs.buffer;
   b8138:	6823      	ldr	r3, [r4, #0]
   b813a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b813c:	6863      	ldr	r3, [r4, #4]
   b813e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8140:	68a3      	ldr	r3, [r4, #8]
   b8142:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8144:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8146:	e9c4 3300 	strd	r3, r3, [r4]
   b814a:	e7f1      	b.n	b8130 <_ZN6String4moveERS_+0x1e>

000b814c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b814c:	b510      	push	{r4, lr}
	buffer = NULL;
   b814e:	2300      	movs	r3, #0
	capacity = 0;
   b8150:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8154:	4604      	mov	r4, r0
	len = 0;
   b8156:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8158:	7303      	strb	r3, [r0, #12]
	move(rval);
   b815a:	f7ff ffda 	bl	b8112 <_ZN6String4moveERS_>
}
   b815e:	4620      	mov	r0, r4
   b8160:	bd10      	pop	{r4, pc}

000b8162 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8162:	4288      	cmp	r0, r1
{
   b8164:	b510      	push	{r4, lr}
   b8166:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8168:	d005      	beq.n	b8176 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b816a:	680b      	ldr	r3, [r1, #0]
   b816c:	b12b      	cbz	r3, b817a <_ZN6StringaSERKS_+0x18>
   b816e:	688a      	ldr	r2, [r1, #8]
   b8170:	4619      	mov	r1, r3
   b8172:	f7ff ffa1 	bl	b80b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8176:	4620      	mov	r0, r4
   b8178:	bd10      	pop	{r4, pc}
	else invalidate();
   b817a:	f7ff ff72 	bl	b8062 <_ZN6String10invalidateEv>
   b817e:	e7fa      	b.n	b8176 <_ZN6StringaSERKS_+0x14>

000b8180 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8180:	b510      	push	{r4, lr}
	buffer = NULL;
   b8182:	2300      	movs	r3, #0
String::String(const String &value)
   b8184:	4604      	mov	r4, r0
	capacity = 0;
   b8186:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b818a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b818c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b818e:	f7ff ffe8 	bl	b8162 <_ZN6StringaSERKS_>
}
   b8192:	4620      	mov	r0, r4
   b8194:	bd10      	pop	{r4, pc}

000b8196 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8196:	b513      	push	{r0, r1, r4, lr}
   b8198:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b819a:	b159      	cbz	r1, b81b4 <_ZN6StringaSEPKc+0x1e>
   b819c:	4608      	mov	r0, r1
   b819e:	9101      	str	r1, [sp, #4]
   b81a0:	f004 fabd 	bl	bc71e <strlen>
   b81a4:	9901      	ldr	r1, [sp, #4]
   b81a6:	4602      	mov	r2, r0
   b81a8:	4620      	mov	r0, r4
   b81aa:	f7ff ff85 	bl	b80b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b81ae:	4620      	mov	r0, r4
   b81b0:	b002      	add	sp, #8
   b81b2:	bd10      	pop	{r4, pc}
	else invalidate();
   b81b4:	f7ff ff55 	bl	b8062 <_ZN6String10invalidateEv>
   b81b8:	e7f9      	b.n	b81ae <_ZN6StringaSEPKc+0x18>

000b81ba <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b81ba:	b570      	push	{r4, r5, r6, lr}
   b81bc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b81be:	460e      	mov	r6, r1
   b81c0:	b909      	cbnz	r1, b81c6 <_ZN6String6concatEPKcj+0xc>
   b81c2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b81c4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b81c6:	b16a      	cbz	r2, b81e4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b81c8:	6884      	ldr	r4, [r0, #8]
   b81ca:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b81cc:	4621      	mov	r1, r4
   b81ce:	f7ff ff5f 	bl	b8090 <_ZN6String7reserveEj>
   b81d2:	2800      	cmp	r0, #0
   b81d4:	d0f5      	beq.n	b81c2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b81d6:	6828      	ldr	r0, [r5, #0]
   b81d8:	68ab      	ldr	r3, [r5, #8]
   b81da:	4631      	mov	r1, r6
   b81dc:	4418      	add	r0, r3
   b81de:	f004 fa79 	bl	bc6d4 <strcpy>
	len = newlen;
   b81e2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b81e4:	2001      	movs	r0, #1
   b81e6:	e7ed      	b.n	b81c4 <_ZN6String6concatEPKcj+0xa>

000b81e8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b81e8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b81ea:	2300      	movs	r3, #0
	buf[0] = c;
   b81ec:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b81f0:	2201      	movs	r2, #1
   b81f2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b81f4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b81f8:	f7ff ffdf 	bl	b81ba <_ZN6String6concatEPKcj>
}
   b81fc:	b003      	add	sp, #12
   b81fe:	f85d fb04 	ldr.w	pc, [sp], #4

000b8202 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b8202:	6883      	ldr	r3, [r0, #8]
   b8204:	428b      	cmp	r3, r1
   b8206:	d903      	bls.n	b8210 <_ZNK6StringixEj+0xe>
   b8208:	6800      	ldr	r0, [r0, #0]
   b820a:	b110      	cbz	r0, b8212 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b820c:	5c40      	ldrb	r0, [r0, r1]
   b820e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b8210:	2000      	movs	r0, #0
}
   b8212:	4770      	bx	lr

000b8214 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b8214:	f7ff bff5 	b.w	b8202 <_ZNK6StringixEj>

000b8218 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8218:	4770      	bx	lr

000b821a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b821a:	4770      	bx	lr

000b821c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b821c:	4770      	bx	lr

000b821e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b821e:	4770      	bx	lr

000b8220 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8220:	4b06      	ldr	r3, [pc, #24]	; (b823c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8222:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8224:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b8226:	f100 040c 	add.w	r4, r0, #12
	    ||
   b822a:	d005      	beq.n	b8238 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b822c:	4608      	mov	r0, r1
   b822e:	f003 fba7 	bl	bb980 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8232:	2800      	cmp	r0, #0
   b8234:	bf08      	it	eq
   b8236:	2400      	moveq	r4, #0
      }
   b8238:	4620      	mov	r0, r4
   b823a:	bd10      	pop	{r4, pc}
   b823c:	000bef48 	.word	0x000bef48

000b8240 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8240:	4b06      	ldr	r3, [pc, #24]	; (b825c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8242:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8244:	b510      	push	{r4, lr}
   b8246:	f100 040c 	add.w	r4, r0, #12
	    ||
   b824a:	d005      	beq.n	b8258 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b824c:	4608      	mov	r0, r1
   b824e:	f003 fb97 	bl	bb980 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8252:	2800      	cmp	r0, #0
   b8254:	bf08      	it	eq
   b8256:	2400      	moveq	r4, #0
      }
   b8258:	4620      	mov	r0, r4
   b825a:	bd10      	pop	{r4, pc}
   b825c:	000bef48 	.word	0x000bef48

000b8260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8260:	4b06      	ldr	r3, [pc, #24]	; (b827c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8262:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8264:	b510      	push	{r4, lr}
   b8266:	f100 040c 	add.w	r4, r0, #12
	    ||
   b826a:	d005      	beq.n	b8278 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b826c:	4608      	mov	r0, r1
   b826e:	f003 fb87 	bl	bb980 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8272:	2800      	cmp	r0, #0
   b8274:	bf08      	it	eq
   b8276:	2400      	moveq	r4, #0
      }
   b8278:	4620      	mov	r0, r4
   b827a:	bd10      	pop	{r4, pc}
   b827c:	000bef48 	.word	0x000bef48

000b8280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8280:	b510      	push	{r4, lr}
   b8282:	2168      	movs	r1, #104	; 0x68
   b8284:	4604      	mov	r4, r0
   b8286:	f7fb ff0a 	bl	b409e <_ZdlPvj>
   b828a:	4620      	mov	r0, r4
   b828c:	bd10      	pop	{r4, pc}

000b828e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b828e:	b510      	push	{r4, lr}
   b8290:	2128      	movs	r1, #40	; 0x28
   b8292:	4604      	mov	r4, r0
   b8294:	f7fb ff03 	bl	b409e <_ZdlPvj>
   b8298:	4620      	mov	r0, r4
   b829a:	bd10      	pop	{r4, pc}

000b829c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b829c:	b510      	push	{r4, lr}
   b829e:	2130      	movs	r1, #48	; 0x30
   b82a0:	4604      	mov	r4, r0
   b82a2:	f7fb fefc 	bl	b409e <_ZdlPvj>
   b82a6:	4620      	mov	r0, r4
   b82a8:	bd10      	pop	{r4, pc}

000b82aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b82aa:	2168      	movs	r1, #104	; 0x68
   b82ac:	f7fb bef7 	b.w	b409e <_ZdlPvj>

000b82b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b82b0:	2128      	movs	r1, #40	; 0x28
   b82b2:	f7fb bef4 	b.w	b409e <_ZdlPvj>

000b82b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b82b6:	2130      	movs	r1, #48	; 0x30
   b82b8:	f7fb bef1 	b.w	b409e <_ZdlPvj>

000b82bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b82bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82be:	2500      	movs	r5, #0
   b82c0:	1cec      	adds	r4, r5, #3
   b82c2:	428c      	cmp	r4, r1
   b82c4:	d80d      	bhi.n	b82e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b82c6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b82c8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b82ca:	5d87      	ldrb	r7, [r0, r6]
   b82cc:	4297      	cmp	r7, r2
   b82ce:	d105      	bne.n	b82dc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b82d0:	4426      	add	r6, r4
   b82d2:	42b1      	cmp	r1, r6
   b82d4:	d305      	bcc.n	b82e2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b82d6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b82d8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b82da:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b82dc:	3401      	adds	r4, #1
   b82de:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b82e0:	e7ee      	b.n	b82c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b82e2:	2000      	movs	r0, #0
   b82e4:	e7f9      	b.n	b82da <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b82e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b82e8:	4a02      	ldr	r2, [pc, #8]	; (b82f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b82ea:	4903      	ldr	r1, [pc, #12]	; (b82f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b82ec:	200a      	movs	r0, #10
   b82ee:	f7ff bb4d 	b.w	b798c <panic_>
   b82f2:	bf00      	nop
   b82f4:	000b74a9 	.word	0x000b74a9
   b82f8:	000beda8 	.word	0x000beda8

000b82fc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b82fc:	b430      	push	{r4, r5}
   b82fe:	460d      	mov	r5, r1
   b8300:	4611      	mov	r1, r2
   b8302:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b8304:	6803      	ldr	r3, [r0, #0]
   b8306:	6809      	ldr	r1, [r1, #0]
   b8308:	6828      	ldr	r0, [r5, #0]
   b830a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b830e:	46a4      	mov	ip, r4
      }
   b8310:	bc30      	pop	{r4, r5}
   b8312:	4760      	bx	ip

000b8314 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b8314:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8316:	b538      	push	{r3, r4, r5, lr}
   b8318:	4604      	mov	r4, r0
	switch (__op)
   b831a:	d102      	bne.n	b8322 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b831c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b831e:	6023      	str	r3, [r4, #0]
	}
   b8320:	e003      	b.n	b832a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b8322:	2a02      	cmp	r2, #2
   b8324:	d003      	beq.n	b832e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b8326:	2a03      	cmp	r2, #3
   b8328:	d00d      	beq.n	b8346 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b832a:	2000      	movs	r0, #0
   b832c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b832e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b8330:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8332:	f7fb feb0 	bl	b4096 <_Znwj>
   b8336:	4603      	mov	r3, r0
   b8338:	2800      	cmp	r0, #0
   b833a:	d0f0      	beq.n	b831e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b833c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8340:	e883 0003 	stmia.w	r3, {r0, r1}
   b8344:	e7eb      	b.n	b831e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b8346:	6800      	ldr	r0, [r0, #0]
   b8348:	2800      	cmp	r0, #0
   b834a:	d0ee      	beq.n	b832a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b834c:	2108      	movs	r1, #8
   b834e:	f7fb fea6 	bl	b409e <_ZdlPvj>
   b8352:	e7ea      	b.n	b832a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b8354 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8354:	b510      	push	{r4, lr}
   b8356:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b8358:	3058      	adds	r0, #88	; 0x58
   b835a:	f7fc f809 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b835e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b8362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8366:	f7ff be75 	b.w	b8054 <_ZN6StringD1Ev>

000b836a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b836a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b836c:	6843      	ldr	r3, [r0, #4]
   b836e:	3b01      	subs	r3, #1
    {
   b8370:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8372:	6043      	str	r3, [r0, #4]
   b8374:	b963      	cbnz	r3, b8390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8376:	6803      	ldr	r3, [r0, #0]
   b8378:	689b      	ldr	r3, [r3, #8]
   b837a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b837c:	68a3      	ldr	r3, [r4, #8]
   b837e:	3b01      	subs	r3, #1
   b8380:	60a3      	str	r3, [r4, #8]
   b8382:	b92b      	cbnz	r3, b8390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8384:	6823      	ldr	r3, [r4, #0]
   b8386:	4620      	mov	r0, r4
   b8388:	68db      	ldr	r3, [r3, #12]
    }
   b838a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b838e:	4718      	bx	r3
    }
   b8390:	bd10      	pop	{r4, pc}

000b8392 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b8392:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8396:	b2da      	uxtb	r2, r3
   b8398:	2a09      	cmp	r2, #9
   b839a:	d801      	bhi.n	b83a0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b839c:	4618      	mov	r0, r3
   b839e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b83a0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b83a4:	2b05      	cmp	r3, #5
   b83a6:	d801      	bhi.n	b83ac <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b83a8:	3857      	subs	r0, #87	; 0x57
   b83aa:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b83ac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b83b0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b83b2:	bf94      	ite	ls
   b83b4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b83b6:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b83ba:	4770      	bx	lr

000b83bc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b83bc:	b510      	push	{r4, lr}
            locked_(false) {
   b83be:	2300      	movs	r3, #0
   b83c0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b83c2:	4b04      	ldr	r3, [pc, #16]	; (b83d4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b83c4:	4604      	mov	r4, r0
   b83c6:	6818      	ldr	r0, [r3, #0]
   b83c8:	f7ff f958 	bl	b767c <os_mutex_recursive_lock>
        locked_ = true;
   b83cc:	2301      	movs	r3, #1
   b83ce:	7023      	strb	r3, [r4, #0]
    }
   b83d0:	4620      	mov	r0, r4
   b83d2:	bd10      	pop	{r4, pc}
   b83d4:	2003e63c 	.word	0x2003e63c

000b83d8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b83d8:	b510      	push	{r4, lr}
        if (locked_) {
   b83da:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b83dc:	4604      	mov	r4, r0
        if (locked_) {
   b83de:	b11b      	cbz	r3, b83e8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b83e0:	4b02      	ldr	r3, [pc, #8]	; (b83ec <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b83e2:	6818      	ldr	r0, [r3, #0]
   b83e4:	f7ff f952 	bl	b768c <os_mutex_recursive_unlock>
    }
   b83e8:	4620      	mov	r0, r4
   b83ea:	bd10      	pop	{r4, pc}
   b83ec:	2003e63c 	.word	0x2003e63c

000b83f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b83f0:	b082      	sub	sp, #8
   b83f2:	4603      	mov	r3, r0
    address_ = addr;
   b83f4:	6808      	ldr	r0, [r1, #0]
   b83f6:	6849      	ldr	r1, [r1, #4]
   b83f8:	466a      	mov	r2, sp
   b83fa:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b83fc:	466a      	mov	r2, sp
   b83fe:	ca03      	ldmia	r2!, {r0, r1}
   b8400:	6018      	str	r0, [r3, #0]
}
   b8402:	4618      	mov	r0, r3
    address_ = addr.address_;
   b8404:	6059      	str	r1, [r3, #4]
}
   b8406:	b002      	add	sp, #8
   b8408:	4770      	bx	lr

000b840a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b840a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b840c:	7982      	ldrb	r2, [r0, #6]
   b840e:	798b      	ldrb	r3, [r1, #6]
   b8410:	429a      	cmp	r2, r3
   b8412:	d106      	bne.n	b8422 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b8414:	2206      	movs	r2, #6
   b8416:	f004 f8bf 	bl	bc598 <memcmp>
   b841a:	fab0 f080 	clz	r0, r0
   b841e:	0940      	lsrs	r0, r0, #5
}
   b8420:	bd08      	pop	{r3, pc}
    return false;
   b8422:	2000      	movs	r0, #0
   b8424:	e7fc      	b.n	b8420 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b8426 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b8426:	f04f 33ff 	mov.w	r3, #4294967295
   b842a:	6003      	str	r3, [r0, #0]
   b842c:	8083      	strh	r3, [r0, #4]
}
   b842e:	2000      	movs	r0, #0
   b8430:	4770      	bx	lr

000b8432 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b8432:	b508      	push	{r3, lr}
   b8434:	4602      	mov	r2, r0
        : address_{} {
   b8436:	2100      	movs	r1, #0
   b8438:	6001      	str	r1, [r0, #0]
   b843a:	6041      	str	r1, [r0, #4]
    clear();
   b843c:	f7ff fff3 	bl	b8426 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b8440:	7191      	strb	r1, [r2, #6]
}
   b8442:	4610      	mov	r0, r2
   b8444:	bd08      	pop	{r3, pc}
	...

000b8448 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b8448:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b844a:	2301      	movs	r3, #1
   b844c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b844e:	4b05      	ldr	r3, [pc, #20]	; (b8464 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b8450:	4602      	mov	r2, r0
   b8452:	f103 0110 	add.w	r1, r3, #16
   b8456:	f853 4b04 	ldr.w	r4, [r3], #4
   b845a:	f842 4b04 	str.w	r4, [r2], #4
   b845e:	428b      	cmp	r3, r1
   b8460:	d1f9      	bne.n	b8456 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b8462:	bd10      	pop	{r4, pc}
   b8464:	000bef56 	.word	0x000bef56

000b8468 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b8468:	b510      	push	{r4, lr}
    if (uuid128) {
   b846a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b846c:	4604      	mov	r4, r0
    if (uuid128) {
   b846e:	b1b1      	cbz	r1, b849e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b8470:	2a01      	cmp	r2, #1
   b8472:	f101 0210 	add.w	r2, r1, #16
   b8476:	d10a      	bne.n	b848e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b8478:	4601      	mov	r1, r0
   b847a:	f853 0b04 	ldr.w	r0, [r3], #4
   b847e:	f841 0b04 	str.w	r0, [r1], #4
   b8482:	4293      	cmp	r3, r2
   b8484:	d1f9      	bne.n	b847a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b8486:	2301      	movs	r3, #1
   b8488:	6123      	str	r3, [r4, #16]
}
   b848a:	4620      	mov	r0, r4
   b848c:	bd10      	pop	{r4, pc}
   b848e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b8490:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b8494:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b8498:	429a      	cmp	r2, r3
   b849a:	d1f9      	bne.n	b8490 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b849c:	e7f3      	b.n	b8486 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b849e:	2210      	movs	r2, #16
   b84a0:	f004 f8b2 	bl	bc608 <memset>
   b84a4:	e7f1      	b.n	b848a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b84a6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b84a6:	b538      	push	{r3, r4, r5, lr}
   b84a8:	4604      	mov	r4, r0
   b84aa:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b84ac:	461a      	mov	r2, r3
   b84ae:	f7ff ffdb 	bl	b8468 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b84b2:	81a5      	strh	r5, [r4, #12]
}
   b84b4:	4620      	mov	r0, r4
   b84b6:	bd38      	pop	{r3, r4, r5, pc}

000b84b8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b84b8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b84ba:	6902      	ldr	r2, [r0, #16]
   b84bc:	b922      	cbnz	r2, b84c8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b84be:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84c0:	3800      	subs	r0, #0
   b84c2:	bf18      	it	ne
   b84c4:	2001      	movne	r0, #1
}
   b84c6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b84c8:	4902      	ldr	r1, [pc, #8]	; (b84d4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b84ca:	2210      	movs	r2, #16
   b84cc:	f004 f864 	bl	bc598 <memcmp>
   b84d0:	e7f6      	b.n	b84c0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b84d2:	bf00      	nop
   b84d4:	000bef76 	.word	0x000bef76

000b84d8 <_ZNK8particle7BleUuid4typeEv>:
}
   b84d8:	6900      	ldr	r0, [r0, #16]
   b84da:	4770      	bx	lr

000b84dc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b84dc:	b538      	push	{r3, r4, r5, lr}
   b84de:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b84e0:	2214      	movs	r2, #20
   b84e2:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b84e4:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b84e6:	f004 f88f 	bl	bc608 <memset>
    if (type_ == BleUuidType::SHORT) {
   b84ea:	6923      	ldr	r3, [r4, #16]
   b84ec:	b91b      	cbnz	r3, b84f6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b84ee:	89a3      	ldrh	r3, [r4, #12]
   b84f0:	802b      	strh	r3, [r5, #0]
}
   b84f2:	4628      	mov	r0, r5
   b84f4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b84f6:	2301      	movs	r3, #1
   b84f8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b84fa:	4621      	mov	r1, r4
   b84fc:	462b      	mov	r3, r5
   b84fe:	f104 0210 	add.w	r2, r4, #16
   b8502:	f851 0b04 	ldr.w	r0, [r1], #4
   b8506:	f843 0b04 	str.w	r0, [r3], #4
   b850a:	4291      	cmp	r1, r2
   b850c:	d1f9      	bne.n	b8502 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b850e:	e7f0      	b.n	b84f2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b8510 <_ZNK8particle7BleUuid7shortedEv>:
}
   b8510:	8980      	ldrh	r0, [r0, #12]
   b8512:	4770      	bx	lr

000b8514 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b8514:	4770      	bx	lr

000b8516 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b8516:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b8518:	6902      	ldr	r2, [r0, #16]
   b851a:	690b      	ldr	r3, [r1, #16]
   b851c:	429a      	cmp	r2, r3
   b851e:	d106      	bne.n	b852e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b8520:	2210      	movs	r2, #16
   b8522:	f004 f839 	bl	bc598 <memcmp>
   b8526:	fab0 f080 	clz	r0, r0
   b852a:	0940      	lsrs	r0, r0, #5
}
   b852c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b852e:	2000      	movs	r0, #0
   b8530:	e7fc      	b.n	b852c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b8534 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b8534:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b8536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b853a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b853c:	4b34      	ldr	r3, [pc, #208]	; (b8610 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b853e:	460c      	mov	r4, r1
   b8540:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b8542:	4602      	mov	r2, r0
   b8544:	f103 0110 	add.w	r1, r3, #16
   b8548:	f853 0b04 	ldr.w	r0, [r3], #4
   b854c:	f842 0b04 	str.w	r0, [r2], #4
   b8550:	428b      	cmp	r3, r1
   b8552:	d1f9      	bne.n	b8548 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b8554:	b344      	cbz	r4, b85a8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b8556:	2124      	movs	r1, #36	; 0x24
   b8558:	4620      	mov	r0, r4
   b855a:	f004 f90f 	bl	bc77c <strnlen>
   b855e:	2804      	cmp	r0, #4
   b8560:	f04f 0500 	mov.w	r5, #0
   b8564:	d123      	bne.n	b85ae <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b8566:	f8ad 5004 	strh.w	r5, [sp, #4]
   b856a:	af01      	add	r7, sp, #4
   b856c:	1ca5      	adds	r5, r4, #2
   b856e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b8570:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b8574:	f7ff ff0d 	bl	b8392 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b8578:	f1b0 0800 	subs.w	r8, r0, #0
   b857c:	db12      	blt.n	b85a4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b857e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b8582:	f7ff ff06 	bl	b8392 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b8586:	2800      	cmp	r0, #0
   b8588:	db0c      	blt.n	b85a4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b858a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b858c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b8590:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b8592:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b8596:	d1eb      	bne.n	b8570 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b8598:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b859c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b859e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b85a2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b85a4:	2300      	movs	r3, #0
   b85a6:	6133      	str	r3, [r6, #16]
}
   b85a8:	b002      	add	sp, #8
   b85aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b85ae:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b85b2:	2124      	movs	r1, #36	; 0x24
   b85b4:	4620      	mov	r0, r4
   b85b6:	f004 f8e1 	bl	bc77c <strnlen>
   b85ba:	42a8      	cmp	r0, r5
   b85bc:	d807      	bhi.n	b85ce <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b85be:	4642      	mov	r2, r8
   b85c0:	2100      	movs	r1, #0
   b85c2:	4630      	mov	r0, r6
}
   b85c4:	b002      	add	sp, #8
   b85c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b85ca:	f004 b81d 	b.w	bc608 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b85ce:	f1b8 0f00 	cmp.w	r8, #0
   b85d2:	d0e9      	beq.n	b85a8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b85d4:	5d60      	ldrb	r0, [r4, r5]
   b85d6:	f7ff fedc 	bl	b8392 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b85da:	0603      	lsls	r3, r0, #24
   b85dc:	d415      	bmi.n	b860a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b85de:	0100      	lsls	r0, r0, #4
   b85e0:	f108 38ff 	add.w	r8, r8, #4294967295
   b85e4:	b2c7      	uxtb	r7, r0
   b85e6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b85ea:	2124      	movs	r1, #36	; 0x24
   b85ec:	4620      	mov	r0, r4
   b85ee:	f004 f8c5 	bl	bc77c <strnlen>
   b85f2:	3501      	adds	r5, #1
   b85f4:	42a8      	cmp	r0, r5
   b85f6:	d908      	bls.n	b860a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b85f8:	5d60      	ldrb	r0, [r4, r5]
   b85fa:	f7ff feca 	bl	b8392 <_ZN8particle11hexToNibbleEc>
   b85fe:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b8600:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b8602:	bfa4      	itt	ge
   b8604:	4338      	orrge	r0, r7
   b8606:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b860a:	3501      	adds	r5, #1
   b860c:	e7d1      	b.n	b85b2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b860e:	bf00      	nop
   b8610:	000bef56 	.word	0x000bef56

000b8614 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b8614:	b513      	push	{r0, r1, r4, lr}
   b8616:	4604      	mov	r4, r0
   b8618:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b861a:	f7ff ff15 	bl	b8448 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b861e:	4620      	mov	r0, r4
   b8620:	9901      	ldr	r1, [sp, #4]
   b8622:	f7ff ff87 	bl	b8534 <_ZN8particle7BleUuid9constructEPKc>
}
   b8626:	4620      	mov	r0, r4
   b8628:	b002      	add	sp, #8
   b862a:	bd10      	pop	{r4, pc}

000b862c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b862c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b862e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8632:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b8634:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b8636:	8043      	strh	r3, [r0, #2]
   b8638:	220e      	movs	r2, #14
   b863a:	4629      	mov	r1, r5
   b863c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b863e:	7105      	strb	r5, [r0, #4]
   b8640:	3006      	adds	r0, #6
   b8642:	f003 ffe1 	bl	bc608 <memset>
   b8646:	f104 0014 	add.w	r0, r4, #20
   b864a:	f7ff fefd 	bl	b8448 <_ZN8particle7BleUuidC1Ev>
   b864e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8652:	f7ff fef9 	bl	b8448 <_ZN8particle7BleUuidC1Ev>
   b8656:	4904      	ldr	r1, [pc, #16]	; (b8668 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b8658:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b865c:	f7ff fd45 	bl	b80ea <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b8660:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b8662:	4620      	mov	r0, r4
   b8664:	bd38      	pop	{r3, r4, r5, pc}
   b8666:	bf00      	nop
   b8668:	000befe0 	.word	0x000befe0

000b866c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b866c:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b866e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b8672:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b8676:	4293      	cmp	r3, r2
   b8678:	4618      	mov	r0, r3
   b867a:	d006      	beq.n	b868a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b867c:	6804      	ldr	r4, [r0, #0]
   b867e:	8824      	ldrh	r4, [r4, #0]
   b8680:	428c      	cmp	r4, r1
   b8682:	f103 0308 	add.w	r3, r3, #8
   b8686:	d1f6      	bne.n	b8676 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b8688:	bd10      	pop	{r4, pc}
        return nullptr;
   b868a:	2000      	movs	r0, #0
   b868c:	e7fc      	b.n	b8688 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b8690 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b8690:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8692:	4606      	mov	r6, r0
   b8694:	b085      	sub	sp, #20
   b8696:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b8698:	460d      	mov	r5, r1
   b869a:	2900      	cmp	r1, #0
   b869c:	d050      	beq.n	b8740 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b869e:	2a00      	cmp	r2, #0
   b86a0:	d04e      	beq.n	b8740 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b86a2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b86a4:	7823      	ldrb	r3, [r4, #0]
   b86a6:	2af4      	cmp	r2, #244	; 0xf4
   b86a8:	bf28      	it	cs
   b86aa:	22f4      	movcs	r2, #244	; 0xf4
   b86ac:	b343      	cbz	r3, b8700 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b86ae:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b86b0:	0798      	lsls	r0, r3, #30
   b86b2:	d509      	bpl.n	b86c8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b86b4:	89a0      	ldrh	r0, [r4, #12]
   b86b6:	9203      	str	r2, [sp, #12]
   b86b8:	2300      	movs	r3, #0
   b86ba:	f7fe ff59 	bl	b7570 <hal_ble_gatt_server_set_characteristic_value>
   b86be:	2800      	cmp	r0, #0
   b86c0:	9a03      	ldr	r2, [sp, #12]
   b86c2:	da03      	bge.n	b86cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b86c4:	b005      	add	sp, #20
   b86c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b86c8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b86cc:	6834      	ldr	r4, [r6, #0]
   b86ce:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b86d0:	06d9      	lsls	r1, r3, #27
   b86d2:	d509      	bpl.n	b86e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b86d4:	2f01      	cmp	r7, #1
   b86d6:	d007      	beq.n	b86e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86d8:	89a0      	ldrh	r0, [r4, #12]
   b86da:	2300      	movs	r3, #0
   b86dc:	4629      	mov	r1, r5
}
   b86de:	b005      	add	sp, #20
   b86e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86e4:	f7fe bf76 	b.w	b75d4 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b86e8:	069b      	lsls	r3, r3, #26
   b86ea:	d5eb      	bpl.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b86ec:	2f02      	cmp	r7, #2
   b86ee:	d0e9      	beq.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86f0:	89a0      	ldrh	r0, [r4, #12]
   b86f2:	2300      	movs	r3, #0
   b86f4:	4629      	mov	r1, r5
}
   b86f6:	b005      	add	sp, #20
   b86f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b86fc:	f7fe bf74 	b.w	b75e8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b8700:	8860      	ldrh	r0, [r4, #2]
   b8702:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8706:	4288      	cmp	r0, r1
   b8708:	d01c      	beq.n	b8744 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b870a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b870c:	074e      	lsls	r6, r1, #29
   b870e:	d501      	bpl.n	b8714 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b8710:	2f01      	cmp	r7, #1
   b8712:	d104      	bne.n	b871e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b8714:	070b      	lsls	r3, r1, #28
   b8716:	d409      	bmi.n	b872c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b8718:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b871c:	e7d2      	b.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b871e:	89a1      	ldrh	r1, [r4, #12]
   b8720:	9300      	str	r3, [sp, #0]
   b8722:	4613      	mov	r3, r2
   b8724:	462a      	mov	r2, r5
   b8726:	f7fe ff37 	bl	b7598 <hal_ble_gatt_client_write_without_response>
   b872a:	e7cb      	b.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b872c:	2f02      	cmp	r7, #2
   b872e:	d0f3      	beq.n	b8718 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b8730:	2300      	movs	r3, #0
   b8732:	89a1      	ldrh	r1, [r4, #12]
   b8734:	9300      	str	r3, [sp, #0]
   b8736:	4613      	mov	r3, r2
   b8738:	462a      	mov	r2, r5
   b873a:	f7fe ff23 	bl	b7584 <hal_ble_gatt_client_write_with_response>
   b873e:	e7c1      	b.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b8740:	4802      	ldr	r0, [pc, #8]	; (b874c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b8742:	e7bf      	b.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b8744:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b8748:	e7bc      	b.n	b86c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b874a:	bf00      	nop
   b874c:	fffffef2 	.word	0xfffffef2

000b8750 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b8750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8754:	2600      	movs	r6, #0
   b8756:	6006      	str	r6, [r0, #0]
   b8758:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b875a:	2028      	movs	r0, #40	; 0x28
   b875c:	460c      	mov	r4, r1
   b875e:	f7fb fc9a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b8762:	1e05      	subs	r5, r0, #0
   b8764:	f105 080c 	add.w	r8, r5, #12
   b8768:	d00f      	beq.n	b878a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b876a:	2301      	movs	r3, #1
   b876c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8770:	4b08      	ldr	r3, [pc, #32]	; (b8794 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b8772:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b8774:	4640      	mov	r0, r8
   b8776:	f7ff fe67 	bl	b8448 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b877a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b877c:	622e      	str	r6, [r5, #32]
   b877e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b8782:	4646      	mov	r6, r8
   b8784:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b8786:	6823      	ldr	r3, [r4, #0]
   b8788:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b878a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b878e:	4638      	mov	r0, r7
   b8790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8794:	000bef18 	.word	0x000bef18

000b8798 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b8798:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b879a:	2500      	movs	r5, #0
   b879c:	6005      	str	r5, [r0, #0]
   b879e:	4606      	mov	r6, r0
   b87a0:	2030      	movs	r0, #48	; 0x30
   b87a2:	f7fb fc78 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b87a6:	4604      	mov	r4, r0
   b87a8:	b188      	cbz	r0, b87ce <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b87aa:	2301      	movs	r3, #1
   b87ac:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b87b0:	4b09      	ldr	r3, [pc, #36]	; (b87d8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b87b2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b87b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b87b8:	8183      	strh	r3, [r0, #12]
   b87ba:	300e      	adds	r0, #14
   b87bc:	f7ff fe39 	bl	b8432 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b87c0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b87c4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b87c8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b87cc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b87ce:	6074      	str	r4, [r6, #4]
   b87d0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b87d2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b87d4:	4630      	mov	r0, r6
   b87d6:	bd70      	pop	{r4, r5, r6, pc}
   b87d8:	000bef34 	.word	0x000bef34

000b87dc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b87dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b87de:	460d      	mov	r5, r1
   b87e0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b87e2:	a801      	add	r0, sp, #4
   b87e4:	f7ff fdea 	bl	b83bc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b87e8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b87ea:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b87ee:	6023      	str	r3, [r4, #0]
   b87f0:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b87f4:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b87f6:	a801      	add	r0, sp, #4
   b87f8:	f7ff fdee 	bl	b83d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b87fc:	4620      	mov	r0, r4
   b87fe:	b003      	add	sp, #12
   b8800:	bd30      	pop	{r4, r5, pc}

000b8802 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b8802:	b530      	push	{r4, r5, lr}
   b8804:	4605      	mov	r5, r0
   b8806:	b087      	sub	sp, #28
   b8808:	460c      	mov	r4, r1
    WiringBleLock lk;
   b880a:	a801      	add	r0, sp, #4
   b880c:	f7ff fdd6 	bl	b83bc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b8810:	682a      	ldr	r2, [r5, #0]
   b8812:	6823      	ldr	r3, [r4, #0]
   b8814:	8812      	ldrh	r2, [r2, #0]
   b8816:	881b      	ldrh	r3, [r3, #0]
   b8818:	429a      	cmp	r2, r3
   b881a:	d10d      	bne.n	b8838 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b881c:	4629      	mov	r1, r5
   b881e:	a802      	add	r0, sp, #8
   b8820:	f7ff ffdc 	bl	b87dc <_ZNK8particle13BlePeerDevice7addressEv>
   b8824:	4621      	mov	r1, r4
   b8826:	a804      	add	r0, sp, #16
   b8828:	f7ff ffd8 	bl	b87dc <_ZNK8particle13BlePeerDevice7addressEv>
   b882c:	a904      	add	r1, sp, #16
   b882e:	a802      	add	r0, sp, #8
   b8830:	f7ff fdeb 	bl	b840a <_ZNK8particle10BleAddresseqERKS0_>
   b8834:	4604      	mov	r4, r0
   b8836:	b900      	cbnz	r0, b883a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b8838:	2400      	movs	r4, #0
    WiringBleLock lk;
   b883a:	a801      	add	r0, sp, #4
   b883c:	f7ff fdcc 	bl	b83d8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8840:	4620      	mov	r0, r4
   b8842:	b007      	add	sp, #28
   b8844:	bd30      	pop	{r4, r5, pc}
	...

000b8848 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b8848:	b510      	push	{r4, lr}
   b884a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b884c:	2064      	movs	r0, #100	; 0x64
   b884e:	f7fb fc22 	bl	b4096 <_Znwj>
   b8852:	b168      	cbz	r0, b8870 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b8854:	2300      	movs	r3, #0
   b8856:	e9c0 3300 	strd	r3, r3, [r0]
   b885a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b885e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8862:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b8866:	6203      	str	r3, [r0, #32]
   b8868:	62c3      	str	r3, [r0, #44]	; 0x2c
   b886a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b886c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b886e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b8870:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b8872:	b920      	cbnz	r0, b887e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b8874:	4a0a      	ldr	r2, [pc, #40]	; (b88a0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8876:	490b      	ldr	r1, [pc, #44]	; (b88a4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b8878:	200a      	movs	r0, #10
   b887a:	f7ff f887 	bl	b798c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b887e:	2000      	movs	r0, #0
   b8880:	f7fe fe3a 	bl	b74f8 <hal_ble_stack_init>
   b8884:	b120      	cbz	r0, b8890 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b8886:	4a06      	ldr	r2, [pc, #24]	; (b88a0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b8888:	4907      	ldr	r1, [pc, #28]	; (b88a8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b888a:	200a      	movs	r0, #10
   b888c:	f7ff f87e 	bl	b798c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b8890:	6821      	ldr	r1, [r4, #0]
   b8892:	4806      	ldr	r0, [pc, #24]	; (b88ac <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b8894:	2200      	movs	r2, #0
   b8896:	f7fe fe93 	bl	b75c0 <hal_ble_set_callback_on_periph_link_events>
}
   b889a:	4620      	mov	r0, r4
   b889c:	bd10      	pop	{r4, pc}
   b889e:	bf00      	nop
   b88a0:	000b74a9 	.word	0x000b74a9
   b88a4:	000beda8 	.word	0x000beda8
   b88a8:	000bede6 	.word	0x000bede6
   b88ac:	000b8e6d 	.word	0x000b8e6d

000b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b88b0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b88b2:	4c0a      	ldr	r4, [pc, #40]	; (b88dc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b88b4:	7823      	ldrb	r3, [r4, #0]
   b88b6:	f3bf 8f5b 	dmb	ish
   b88ba:	07db      	lsls	r3, r3, #31
   b88bc:	d40c      	bmi.n	b88d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b88be:	4620      	mov	r0, r4
   b88c0:	f7fb fbfc 	bl	b40bc <__cxa_guard_acquire>
   b88c4:	b140      	cbz	r0, b88d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b88c6:	4806      	ldr	r0, [pc, #24]	; (b88e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b88c8:	f7ff ffbe 	bl	b8848 <_ZN8particle14BleLocalDeviceC1Ev>
   b88cc:	4620      	mov	r0, r4
   b88ce:	f7fb fbfa 	bl	b40c6 <__cxa_guard_release>
   b88d2:	4804      	ldr	r0, [pc, #16]	; (b88e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b88d4:	f003 fe4a 	bl	bc56c <atexit>
    return instance;
}
   b88d8:	4801      	ldr	r0, [pc, #4]	; (b88e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b88da:	bd10      	pop	{r4, pc}
   b88dc:	2003e634 	.word	0x2003e634
   b88e0:	2003e640 	.word	0x2003e640
   b88e4:	000b8b25 	.word	0x000b8b25

000b88e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b88e8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b88ea:	6803      	ldr	r3, [r0, #0]
   b88ec:	3b09      	subs	r3, #9
   b88ee:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b88f0:	b08d      	sub	sp, #52	; 0x34
   b88f2:	4604      	mov	r4, r0
   b88f4:	460d      	mov	r5, r1
    switch (event->type) {
   b88f6:	d811      	bhi.n	b891c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b88f8:	f7ff ffda 	bl	b88b0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b88fc:	88a1      	ldrh	r1, [r4, #4]
   b88fe:	6800      	ldr	r0, [r0, #0]
   b8900:	f7ff feb4 	bl	b866c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b8904:	4603      	mov	r3, r0
   b8906:	b958      	cbnz	r0, b8920 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b8908:	2220      	movs	r2, #32
   b890a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b890e:	4a0b      	ldr	r2, [pc, #44]	; (b893c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b8910:	9200      	str	r2, [sp, #0]
   b8912:	490b      	ldr	r1, [pc, #44]	; (b8940 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b8914:	aa04      	add	r2, sp, #16
   b8916:	2032      	movs	r0, #50	; 0x32
   b8918:	f7ff f840 	bl	b799c <log_message>
}
   b891c:	b00d      	add	sp, #52	; 0x34
   b891e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b8920:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b8922:	2a00      	cmp	r2, #0
   b8924:	d0fa      	beq.n	b891c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b8926:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b892a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b892e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b8932:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b8934:	aa04      	add	r2, sp, #16
   b8936:	a903      	add	r1, sp, #12
   b8938:	47a0      	blx	r4
}
   b893a:	e7ef      	b.n	b891c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b893c:	000bee28 	.word	0x000bee28
   b8940:	000bedbf 	.word	0x000bedbf

000b8944 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b8944:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b8946:	2000      	movs	r0, #0
   b8948:	f7fe fdd6 	bl	b74f8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b894c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8950:	bd08      	pop	{r3, pc}

000b8952 <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   b8952:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   b8954:	2100      	movs	r1, #0
   b8956:	f7fe bdd7 	b.w	b7508 <hal_ble_gap_set_tx_power>

000b895a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b895a:	b919      	cbnz	r1, b8964 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b895c:	460a      	mov	r2, r1
   b895e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b8960:	f7fe bdda 	b.w	b7518 <hal_ble_gap_set_advertising_data>
   b8964:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8968:	2200      	movs	r2, #0
   b896a:	e7f9      	b.n	b8960 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b896c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b896c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b896e:	69d8      	ldr	r0, [r3, #28]
}
   b8970:	2800      	cmp	r0, #0
   b8972:	bfd4      	ite	le
   b8974:	2000      	movle	r0, #0
   b8976:	2001      	movgt	r0, #1
   b8978:	4770      	bx	lr

000b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b897a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b897c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8980:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8982:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8986:	42ae      	cmp	r6, r5
   b8988:	d004      	beq.n	b8994 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b898a:	4628      	mov	r0, r5
   b898c:	f7ff fb62 	bl	b8054 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8990:	3510      	adds	r5, #16
   b8992:	e7f8      	b.n	b8986 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8994:	6820      	ldr	r0, [r4, #0]
   b8996:	f7ff f907 	bl	b7ba8 <free>
}
   b899a:	4620      	mov	r0, r4
   b899c:	bd70      	pop	{r4, r5, r6, pc}

000b899e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b899e:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b89a0:	1e14      	subs	r4, r2, #0
   b89a2:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b89a4:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b89a6:	db02      	blt.n	b89ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b89a8:	1862      	adds	r2, r4, r1
   b89aa:	429a      	cmp	r2, r3
   b89ac:	dd00      	ble.n	b89b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b89ae:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b89b0:	682a      	ldr	r2, [r5, #0]
   b89b2:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b89b4:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b89b6:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b89b8:	1a52      	subs	r2, r2, r1
   b89ba:	f003 fe0b 	bl	bc5d4 <memmove>
    size_ -= n;
   b89be:	686a      	ldr	r2, [r5, #4]
   b89c0:	1b12      	subs	r2, r2, r4
   b89c2:	606a      	str	r2, [r5, #4]
}
   b89c4:	bd38      	pop	{r3, r4, r5, pc}

000b89c6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b89c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b89c8:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b89ca:	4604      	mov	r4, r0
   b89cc:	460d      	mov	r5, r1
   b89ce:	ab01      	add	r3, sp, #4
   b89d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b89d4:	f7ff fc72 	bl	b82bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b89d8:	4602      	mov	r2, r0
   b89da:	b138      	cbz	r0, b89ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b89dc:	9901      	ldr	r1, [sp, #4]
   b89de:	4620      	mov	r0, r4
   b89e0:	f7ff ffdd 	bl	b899e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b89e4:	4629      	mov	r1, r5
   b89e6:	4620      	mov	r0, r4
   b89e8:	f7ff ffed 	bl	b89c6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b89ec:	b003      	add	sp, #12
   b89ee:	bd30      	pop	{r4, r5, pc}

000b89f0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b89f0:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b89f2:	460c      	mov	r4, r1
   b89f4:	b929      	cbnz	r1, b8a02 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b89f6:	460a      	mov	r2, r1
   b89f8:	4608      	mov	r0, r1
}
   b89fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b89fe:	f7fe bd93 	b.w	b7528 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b8a02:	2101      	movs	r1, #1
   b8a04:	4620      	mov	r0, r4
   b8a06:	f7ff ffde 	bl	b89c6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b8a0a:	e9d4 0100 	ldrd	r0, r1, [r4]
   b8a0e:	2200      	movs	r2, #0
   b8a10:	e7f3      	b.n	b89fa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b8a12 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b8a12:	b538      	push	{r3, r4, r5, lr}
   b8a14:	4604      	mov	r4, r0
   b8a16:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b8a18:	f7ff ff9f 	bl	b895a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b8a1c:	2800      	cmp	r0, #0
   b8a1e:	db0a      	blt.n	b8a36 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b8a20:	4629      	mov	r1, r5
   b8a22:	4620      	mov	r0, r4
   b8a24:	f7ff ffe4 	bl	b89f0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b8a28:	2800      	cmp	r0, #0
   b8a2a:	db04      	blt.n	b8a36 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b8a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b8a30:	2000      	movs	r0, #0
   b8a32:	f7fe bd81 	b.w	b7538 <hal_ble_gap_start_advertising>
}
   b8a36:	bd38      	pop	{r3, r4, r5, pc}

000b8a38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8a38:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8a3a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b8a3c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b8a3e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a40:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8a42:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a44:	f7fb fb27 	bl	b4096 <_Znwj>
   b8a48:	b118      	cbz	r0, b8a52 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b8a4a:	682b      	ldr	r3, [r5, #0]
   b8a4c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8a4e:	686b      	ldr	r3, [r5, #4]
   b8a50:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8a52:	4b03      	ldr	r3, [pc, #12]	; (b8a60 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8a54:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8a56:	4b03      	ldr	r3, [pc, #12]	; (b8a64 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8a58:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8a5a:	60a3      	str	r3, [r4, #8]
      }
   b8a5c:	4620      	mov	r0, r4
   b8a5e:	bd38      	pop	{r3, r4, r5, pc}
   b8a60:	000b82fd 	.word	0x000b82fd
   b8a64:	000b8315 	.word	0x000b8315

000b8a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8a68:	680b      	ldr	r3, [r1, #0]
   b8a6a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b8a6c:	b113      	cbz	r3, b8a74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b8a6e:	685a      	ldr	r2, [r3, #4]
   b8a70:	3201      	adds	r2, #1
   b8a72:	605a      	str	r2, [r3, #4]
      }
   b8a74:	4770      	bx	lr

000b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8a76:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8a78:	f851 3b04 	ldr.w	r3, [r1], #4
   b8a7c:	4604      	mov	r4, r0
   b8a7e:	f840 3b04 	str.w	r3, [r0], #4
   b8a82:	f7ff fff1 	bl	b8a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8a86:	6823      	ldr	r3, [r4, #0]
   b8a88:	b90b      	cbnz	r3, b8a8e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b8a8a:	f7ff fc2d 	bl	b82e8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b8a8e:	4620      	mov	r0, r4
   b8a90:	bd10      	pop	{r4, pc}

000b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8a92:	b510      	push	{r4, lr}
   b8a94:	f851 3b04 	ldr.w	r3, [r1], #4
   b8a98:	4604      	mov	r4, r0
   b8a9a:	f840 3b04 	str.w	r3, [r0], #4
   b8a9e:	f7ff ffe3 	bl	b8a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8aa2:	4620      	mov	r0, r4
   b8aa4:	bd10      	pop	{r4, pc}

000b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8aa6:	b510      	push	{r4, lr}
   b8aa8:	f851 3b04 	ldr.w	r3, [r1], #4
   b8aac:	4604      	mov	r4, r0
   b8aae:	f840 3b04 	str.w	r3, [r0], #4
   b8ab2:	f7ff ffd9 	bl	b8a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	bd10      	pop	{r4, pc}

000b8aba <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b8aba:	b510      	push	{r4, lr}
   b8abc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8abe:	3004      	adds	r0, #4
   b8ac0:	f7fc fb14 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8ac4:	4620      	mov	r0, r4
   b8ac6:	bd10      	pop	{r4, pc}

000b8ac8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ac8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8aca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8ace:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8ad0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8ad4:	42ae      	cmp	r6, r5
   b8ad6:	d004      	beq.n	b8ae2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b8ad8:	1d28      	adds	r0, r5, #4
   b8ada:	f7fc fb07 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ade:	3508      	adds	r5, #8
   b8ae0:	e7f8      	b.n	b8ad4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8ae2:	6820      	ldr	r0, [r4, #0]
   b8ae4:	f7ff f860 	bl	b7ba8 <free>
}
   b8ae8:	4620      	mov	r0, r4
   b8aea:	bd70      	pop	{r4, r5, r6, pc}

000b8aec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8aec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8aee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8af2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8af4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8af8:	42ae      	cmp	r6, r5
   b8afa:	d004      	beq.n	b8b06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b8afc:	1d28      	adds	r0, r5, #4
   b8afe:	f7fc faf5 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8b02:	3508      	adds	r5, #8
   b8b04:	e7f8      	b.n	b8af8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8b06:	6820      	ldr	r0, [r4, #0]
   b8b08:	f7ff f84e 	bl	b7ba8 <free>
}
   b8b0c:	4620      	mov	r0, r4
   b8b0e:	bd70      	pop	{r4, r5, r6, pc}

000b8b10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8b10:	b510      	push	{r4, lr}
   b8b12:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8b14:	3024      	adds	r0, #36	; 0x24
   b8b16:	f7ff ffe9 	bl	b8aec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8b1a:	f104 0018 	add.w	r0, r4, #24
   b8b1e:	f7ff ffd3 	bl	b8ac8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8b22:	bd10      	pop	{r4, pc}

000b8b24 <__tcf_0>:
    static BleLocalDevice instance;
   b8b24:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8b26:	4b17      	ldr	r3, [pc, #92]	; (b8b84 <__tcf_0+0x60>)
   b8b28:	681c      	ldr	r4, [r3, #0]
   b8b2a:	b354      	cbz	r4, b8b82 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b8b2c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8b30:	f7fb fc1e 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b34:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8b38:	f7fb fc1a 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8b40:	f7fb fc16 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b8b44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8b48:	f7fb fc12 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b8b4c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8b50:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8b54:	42ae      	cmp	r6, r5
   b8b56:	d004      	beq.n	b8b62 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8b58:	1d28      	adds	r0, r5, #4
   b8b5a:	f7fc fac7 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8b5e:	3508      	adds	r5, #8
   b8b60:	e7f8      	b.n	b8b54 <__tcf_0+0x30>
    ::free(ptr);
   b8b62:	69a0      	ldr	r0, [r4, #24]
   b8b64:	f7ff f820 	bl	b7ba8 <free>
    ~BleLocalDeviceImpl() = default;
   b8b68:	f104 000c 	add.w	r0, r4, #12
   b8b6c:	f7ff ffbe 	bl	b8aec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8b70:	4620      	mov	r0, r4
   b8b72:	f7ff ffa9 	bl	b8ac8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8b76:	4620      	mov	r0, r4
   b8b78:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b8b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8b7e:	f7fb ba8e 	b.w	b409e <_ZdlPvj>
   b8b82:	bd70      	pop	{r4, r5, r6, pc}
   b8b84:	2003e640 	.word	0x2003e640

000b8b88 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b8b88:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b8b8a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8b8c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b8b90:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b8b94:	6803      	ldr	r3, [r0, #0]
   b8b96:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8b98:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8b9a:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b8b9c:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b8b9e:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b8ba0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b8ba2:	f7fc faa3 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b8ba6:	b002      	add	sp, #8
   b8ba8:	bd10      	pop	{r4, pc}

000b8baa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8baa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8bac:	b510      	push	{r4, lr}
      if (_M_empty())
   b8bae:	b90a      	cbnz	r2, b8bb4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b8bb0:	f002 fee2 	bl	bb978 <_ZSt25__throw_bad_function_callv>
    }
   b8bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8bb8:	68c3      	ldr	r3, [r0, #12]
   b8bba:	4718      	bx	r3

000b8bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b8bbc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8bbe:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8bc0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8bc2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8bc4:	dd03      	ble.n	b8bce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b8bc6:	f7fe fff7 	bl	b7bb8 <realloc>
            if (!d) {
   b8bca:	b918      	cbnz	r0, b8bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b8bcc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8bce:	f7fe ffeb 	bl	b7ba8 <free>
        T* d = nullptr;
   b8bd2:	2000      	movs	r0, #0
        data_ = d;
   b8bd4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8bd6:	60a5      	str	r5, [r4, #8]
        return true;
   b8bd8:	2001      	movs	r0, #1
   b8bda:	e7f7      	b.n	b8bcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b8bdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b8bdc:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b8bde:	6883      	ldr	r3, [r0, #8]
   b8be0:	428b      	cmp	r3, r1
   b8be2:	da02      	bge.n	b8bea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b8be4:	f7ff ffea 	bl	b8bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b8be8:	bd08      	pop	{r3, pc}
    return true;
   b8bea:	2001      	movs	r0, #1
   b8bec:	e7fc      	b.n	b8be8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b8bee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bf2:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bf4:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bf6:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8bf8:	4419      	add	r1, r3
   b8bfa:	6883      	ldr	r3, [r0, #8]
   b8bfc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8bfe:	4604      	mov	r4, r0
   b8c00:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c02:	dc12      	bgt.n	b8c2a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b8c04:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c06:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c08:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c0a:	1bd2      	subs	r2, r2, r7
   b8c0c:	4631      	mov	r1, r6
   b8c0e:	1970      	adds	r0, r6, r5
   b8c10:	f003 fce0 	bl	bc5d4 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8c14:	462a      	mov	r2, r5
   b8c16:	4641      	mov	r1, r8
   b8c18:	4630      	mov	r0, r6
   b8c1a:	f003 fccd 	bl	bc5b8 <memcpy>
    size_ += n;
   b8c1e:	6863      	ldr	r3, [r4, #4]
   b8c20:	442b      	add	r3, r5
   b8c22:	6063      	str	r3, [r4, #4]
    return true;
   b8c24:	2001      	movs	r0, #1
}
   b8c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c2a:	f7ff ffc7 	bl	b8bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8c2e:	2800      	cmp	r0, #0
   b8c30:	d1e8      	bne.n	b8c04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b8c32:	e7f8      	b.n	b8c26 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b8c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c36:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c38:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8c3c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c3e:	4604      	mov	r4, r0
   b8c40:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c42:	da0b      	bge.n	b8c5c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b8c44:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c46:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c48:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c4a:	1b52      	subs	r2, r2, r5
   b8c4c:	1c48      	adds	r0, r1, #1
   b8c4e:	f003 fcc1 	bl	bc5d4 <memmove>
    new(p) T(std::move(value));
   b8c52:	557e      	strb	r6, [r7, r5]
    ++size_;
   b8c54:	6863      	ldr	r3, [r4, #4]
   b8c56:	3301      	adds	r3, #1
   b8c58:	6063      	str	r3, [r4, #4]
}
   b8c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c5c:	3101      	adds	r1, #1
   b8c5e:	f7ff ffad 	bl	b8bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8c62:	2800      	cmp	r0, #0
   b8c64:	d1ee      	bne.n	b8c44 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b8c66:	e7f8      	b.n	b8c5a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8c68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8c68:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8c6a:	6841      	ldr	r1, [r0, #4]
   b8c6c:	f7ff bfe2 	b.w	b8c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8c70 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8c74:	4604      	mov	r4, r0
   b8c76:	461d      	mov	r5, r3
   b8c78:	460f      	mov	r7, r1
   b8c7a:	ab01      	add	r3, sp, #4
   b8c7c:	4690      	mov	r8, r2
   b8c7e:	460a      	mov	r2, r1
   b8c80:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8c84:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8c88:	f7ff fb18 	bl	b82bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8c8c:	1cae      	adds	r6, r5, #2
   b8c8e:	6863      	ldr	r3, [r4, #4]
   b8c90:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b8c92:	f1b9 0f00 	cmp.w	r9, #0
   b8c96:	d126      	bne.n	b8ce6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8c98:	b328      	cbz	r0, b8ce6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8c9a:	4433      	add	r3, r6
   b8c9c:	1a1b      	subs	r3, r3, r0
   b8c9e:	2bff      	cmp	r3, #255	; 0xff
   b8ca0:	d809      	bhi.n	b8cb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b8ca2:	9901      	ldr	r1, [sp, #4]
   b8ca4:	4620      	mov	r0, r4
   b8ca6:	f7ff fe7a 	bl	b899e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8caa:	6861      	ldr	r1, [r4, #4]
   b8cac:	4620      	mov	r0, r4
   b8cae:	4431      	add	r1, r6
   b8cb0:	f7ff ff94 	bl	b8bdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8cb4:	b918      	cbnz	r0, b8cbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b8cb6:	6860      	ldr	r0, [r4, #4]
}
   b8cb8:	b003      	add	sp, #12
   b8cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8cbe:	1c6a      	adds	r2, r5, #1
   b8cc0:	9901      	ldr	r1, [sp, #4]
   b8cc2:	b2d2      	uxtb	r2, r2
   b8cc4:	4620      	mov	r0, r4
   b8cc6:	f7ff ffb5 	bl	b8c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8cca:	9901      	ldr	r1, [sp, #4]
   b8ccc:	463a      	mov	r2, r7
   b8cce:	3101      	adds	r1, #1
   b8cd0:	4620      	mov	r0, r4
   b8cd2:	f7ff ffaf 	bl	b8c34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b8cd6:	9901      	ldr	r1, [sp, #4]
   b8cd8:	462b      	mov	r3, r5
   b8cda:	4642      	mov	r2, r8
   b8cdc:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b8cde:	4620      	mov	r0, r4
   b8ce0:	f7ff ff85 	bl	b8bee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b8ce4:	e7e7      	b.n	b8cb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8ce6:	18f1      	adds	r1, r6, r3
   b8ce8:	29ff      	cmp	r1, #255	; 0xff
   b8cea:	d8e4      	bhi.n	b8cb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8cec:	4620      	mov	r0, r4
   b8cee:	f7ff ff75 	bl	b8bdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b8cf2:	2800      	cmp	r0, #0
   b8cf4:	d0df      	beq.n	b8cb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b8cf6:	1c69      	adds	r1, r5, #1
   b8cf8:	b2c9      	uxtb	r1, r1
   b8cfa:	4620      	mov	r0, r4
   b8cfc:	f7ff ffb4 	bl	b8c68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b8d00:	4639      	mov	r1, r7
   b8d02:	4620      	mov	r0, r4
   b8d04:	f7ff ffb0 	bl	b8c68 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b8d08:	6861      	ldr	r1, [r4, #4]
   b8d0a:	462b      	mov	r3, r5
   b8d0c:	4642      	mov	r2, r8
   b8d0e:	e7e6      	b.n	b8cde <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b8d10 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8d10:	b430      	push	{r4, r5}
   b8d12:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b8d16:	b11a      	cbz	r2, b8d20 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b8d18:	9502      	str	r5, [sp, #8]
}
   b8d1a:	bc30      	pop	{r4, r5}
   b8d1c:	f7ff bfa8 	b.w	b8c70 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b8d20:	6840      	ldr	r0, [r0, #4]
}
   b8d22:	bc30      	pop	{r4, r5}
   b8d24:	4770      	bx	lr

000b8d26 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b8d26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b8d28:	2300      	movs	r3, #0
   b8d2a:	e9c0 3300 	strd	r3, r3, [r0]
   b8d2e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8d30:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d32:	9300      	str	r3, [sp, #0]
   b8d34:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b8d36:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d3a:	4619      	mov	r1, r3
   b8d3c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8d40:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8d42:	f7ff ffe5 	bl	b8d10 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8d46:	4620      	mov	r0, r4
   b8d48:	b004      	add	sp, #16
   b8d4a:	bd10      	pop	{r4, pc}

000b8d4c <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   b8d4c:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   b8d4e:	9300      	str	r3, [sp, #0]
   b8d50:	4613      	mov	r3, r2
   b8d52:	460a      	mov	r2, r1
   b8d54:	21ff      	movs	r1, #255	; 0xff
   b8d56:	f7ff ffdb 	bl	b8d10 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b8d5a:	b003      	add	sp, #12
   b8d5c:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8d60:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d64:	4604      	mov	r4, r0
   b8d66:	460d      	mov	r5, r1
   b8d68:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8d6a:	d914      	bls.n	b8d96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8d6c:	4290      	cmp	r0, r2
   b8d6e:	d213      	bcs.n	b8d98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8d70:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8d74:	1a75      	subs	r5, r6, r1
   b8d76:	f1a1 0708 	sub.w	r7, r1, #8
   b8d7a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8d7c:	42b7      	cmp	r7, r6
   b8d7e:	d018      	beq.n	b8db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8d80:	b11c      	cbz	r4, b8d8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8d82:	4631      	mov	r1, r6
   b8d84:	4620      	mov	r0, r4
   b8d86:	f7ff fe8e 	bl	b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b8d8a:	1d30      	adds	r0, r6, #4
   b8d8c:	f7fc f9ae 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8d90:	3e08      	subs	r6, #8
   b8d92:	3c08      	subs	r4, #8
   b8d94:	e7f2      	b.n	b8d7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8d96:	d00c      	beq.n	b8db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8d98:	42b5      	cmp	r5, r6
   b8d9a:	d00a      	beq.n	b8db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8d9c:	b11c      	cbz	r4, b8da6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8d9e:	4629      	mov	r1, r5
   b8da0:	4620      	mov	r0, r4
   b8da2:	f7ff fe80 	bl	b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8da6:	1d28      	adds	r0, r5, #4
   b8da8:	f7fc f9a0 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8dac:	3508      	adds	r5, #8
   b8dae:	3408      	adds	r4, #8
   b8db0:	e7f2      	b.n	b8d98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8db6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8db8:	6846      	ldr	r6, [r0, #4]
   b8dba:	4668      	mov	r0, sp
   b8dbc:	f7ff fe73 	bl	b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8dc0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8dc4:	429f      	cmp	r7, r3
   b8dc6:	db12      	blt.n	b8dee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b8dc8:	3701      	adds	r7, #1
        if (n > 0) {
   b8dca:	2f00      	cmp	r7, #0
   b8dcc:	dd29      	ble.n	b8e22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8dce:	00f8      	lsls	r0, r7, #3
   b8dd0:	f7fe fee2 	bl	b7b98 <malloc>
            if (!d) {
   b8dd4:	4605      	mov	r5, r0
   b8dd6:	b1f0      	cbz	r0, b8e16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b8dd8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8ddc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8de0:	f7ff ffbe 	bl	b8d60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8de4:	6820      	ldr	r0, [r4, #0]
   b8de6:	f7fe fedf 	bl	b7ba8 <free>
        data_ = d;
   b8dea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b8dec:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8dee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8df0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8df2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b8df6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8dfa:	4631      	mov	r1, r6
   b8dfc:	f106 0008 	add.w	r0, r6, #8
   b8e00:	f7ff ffae 	bl	b8d60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8e04:	b11e      	cbz	r6, b8e0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b8e06:	4669      	mov	r1, sp
   b8e08:	4630      	mov	r0, r6
   b8e0a:	f7ff fe4c 	bl	b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b8e0e:	6863      	ldr	r3, [r4, #4]
   b8e10:	3301      	adds	r3, #1
   b8e12:	6063      	str	r3, [r4, #4]
    return true;
   b8e14:	2501      	movs	r5, #1
   b8e16:	a801      	add	r0, sp, #4
   b8e18:	f7fc f968 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8e1c:	4628      	mov	r0, r5
   b8e1e:	b003      	add	sp, #12
   b8e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b8e22:	2500      	movs	r5, #0
   b8e24:	e7de      	b.n	b8de4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b8e26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b8e28:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8e2c:	4605      	mov	r5, r0
   b8e2e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b8e30:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b8e34:	42a6      	cmp	r6, r4
   b8e36:	d005      	beq.n	b8e44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b8e38:	4639      	mov	r1, r7
   b8e3a:	4620      	mov	r0, r4
   b8e3c:	f7ff fce1 	bl	b8802 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b8e40:	b108      	cbz	r0, b8e46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b8e42:	b914      	cbnz	r4, b8e4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b8e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b8e46:	3408      	adds	r4, #8
   b8e48:	e7f4      	b.n	b8e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b8e4a:	1d20      	adds	r0, r4, #4
   b8e4c:	f7fc f94e 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8e50:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8e54:	f104 0108 	add.w	r1, r4, #8
   b8e58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8e5c:	4620      	mov	r0, r4
   b8e5e:	f7ff ff7f 	bl	b8d60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8e62:	686b      	ldr	r3, [r5, #4]
   b8e64:	3b01      	subs	r3, #1
   b8e66:	606b      	str	r3, [r5, #4]
    return true;
   b8e68:	e7ec      	b.n	b8e44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8e6c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e70:	4605      	mov	r5, r0
   b8e72:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8e74:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8e76:	460c      	mov	r4, r1
        WiringBleLock lk;
   b8e78:	f7ff faa0 	bl	b83bc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8e7c:	682e      	ldr	r6, [r5, #0]
   b8e7e:	1ef3      	subs	r3, r6, #3
   b8e80:	2b0d      	cmp	r3, #13
   b8e82:	d83c      	bhi.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8e84:	e8df f013 	tbh	[pc, r3, lsl #1]
   b8e88:	0053000e 	.word	0x0053000e
   b8e8c:	00d1003b 	.word	0x00d1003b
   b8e90:	003b003b 	.word	0x003b003b
   b8e94:	003b003b 	.word	0x003b003b
   b8e98:	009b003b 	.word	0x009b003b
   b8e9c:	009b009b 	.word	0x009b009b
   b8ea0:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8ea4:	a804      	add	r0, sp, #16
   b8ea6:	f7ff fc77 	bl	b8798 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b8eaa:	9b04      	ldr	r3, [sp, #16]
   b8eac:	89aa      	ldrh	r2, [r5, #12]
   b8eae:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8eb0:	6869      	ldr	r1, [r5, #4]
   b8eb2:	9804      	ldr	r0, [sp, #16]
   b8eb4:	3108      	adds	r1, #8
   b8eb6:	3002      	adds	r0, #2
   b8eb8:	f7ff fa9a 	bl	b83f0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8ebc:	a904      	add	r1, sp, #16
   b8ebe:	a806      	add	r0, sp, #24
   b8ec0:	f7ff fdf1 	bl	b8aa6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8ec4:	a906      	add	r1, sp, #24
   b8ec6:	f104 0018 	add.w	r0, r4, #24
   b8eca:	f7ff ff73 	bl	b8db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8ece:	4605      	mov	r5, r0
   b8ed0:	a807      	add	r0, sp, #28
   b8ed2:	f7fc f90b 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8ed6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b8ed8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b8eda:	b9b5      	cbnz	r5, b8f0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8edc:	4b5d      	ldr	r3, [pc, #372]	; (b9054 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8ede:	495e      	ldr	r1, [pc, #376]	; (b9058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8ee0:	9300      	str	r3, [sp, #0]
   b8ee2:	2032      	movs	r0, #50	; 0x32
   b8ee4:	462b      	mov	r3, r5
   b8ee6:	aa06      	add	r2, sp, #24
   b8ee8:	9507      	str	r5, [sp, #28]
   b8eea:	f7fe fd57 	bl	b799c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b8eee:	9b04      	ldr	r3, [sp, #16]
   b8ef0:	4629      	mov	r1, r5
   b8ef2:	8818      	ldrh	r0, [r3, #0]
   b8ef4:	f7fe fb28 	bl	b7548 <hal_ble_gap_disconnect>
   b8ef8:	a805      	add	r0, sp, #20
   b8efa:	f7fc f8f7 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b8efe:	a803      	add	r0, sp, #12
   b8f00:	f7ff fa6a 	bl	b83d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b8f04:	b00e      	add	sp, #56	; 0x38
   b8f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b8f0a:	4a54      	ldr	r2, [pc, #336]	; (b905c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b8f0c:	9200      	str	r2, [sp, #0]
   b8f0e:	2300      	movs	r3, #0
   b8f10:	4951      	ldr	r1, [pc, #324]	; (b9058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8f12:	9307      	str	r3, [sp, #28]
   b8f14:	aa06      	add	r2, sp, #24
   b8f16:	2001      	movs	r0, #1
   b8f18:	f7fe fd40 	bl	b799c <log_message>
                if (impl->connectedCallback_) {
   b8f1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b8f1e:	2b00      	cmp	r3, #0
   b8f20:	d0ea      	beq.n	b8ef8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b8f22:	a904      	add	r1, sp, #16
   b8f24:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8f28:	f7ff fe3f 	bl	b8baa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b8f2c:	e7e4      	b.n	b8ef8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8f2e:	89a9      	ldrh	r1, [r5, #12]
   b8f30:	4620      	mov	r0, r4
   b8f32:	f7ff fb9b 	bl	b866c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8f36:	4606      	mov	r6, r0
   b8f38:	2800      	cmp	r0, #0
   b8f3a:	d0e0      	beq.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b8f3c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b8f3e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b8f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8f46:	8029      	strh	r1, [r5, #0]
   b8f48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8f4c:	429a      	cmp	r2, r3
   b8f4e:	d003      	beq.n	b8f58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8f50:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8f54:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8f56:	e7f9      	b.n	b8f4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8f58:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8f5c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8f60:	45b8      	cmp	r8, r7
   b8f62:	d004      	beq.n	b8f6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8f64:	1d38      	adds	r0, r7, #4
   b8f66:	f7fc f8c1 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f6a:	3708      	adds	r7, #8
   b8f6c:	e7f8      	b.n	b8f60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8f6e:	2300      	movs	r3, #0
   b8f70:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8f72:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8f76:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8f7a:	45b8      	cmp	r8, r7
   b8f7c:	d004      	beq.n	b8f88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8f7e:	1d38      	adds	r0, r7, #4
   b8f80:	f7fc f8b4 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f84:	3708      	adds	r7, #8
   b8f86:	e7f8      	b.n	b8f7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8f88:	2300      	movs	r3, #0
   b8f8a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8f8c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8f8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8f90:	b123      	cbz	r3, b8f9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8f92:	4631      	mov	r1, r6
   b8f94:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8f98:	f7ff fe07 	bl	b8baa <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8f9c:	2300      	movs	r3, #0
   b8f9e:	2220      	movs	r2, #32
   b8fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8fa4:	4a2e      	ldr	r2, [pc, #184]	; (b9060 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8fa6:	9200      	str	r2, [sp, #0]
   b8fa8:	492b      	ldr	r1, [pc, #172]	; (b9058 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8faa:	aa06      	add	r2, sp, #24
   b8fac:	2001      	movs	r0, #1
   b8fae:	f7fe fcf5 	bl	b799c <log_message>
                    impl->peers_.removeOne(*peer);
   b8fb2:	4631      	mov	r1, r6
   b8fb4:	f104 0018 	add.w	r0, r4, #24
   b8fb8:	f7ff ff35 	bl	b8e26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8fbc:	e79f      	b.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8fbe:	89a9      	ldrh	r1, [r5, #12]
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	f7ff fb53 	bl	b866c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8fc6:	2800      	cmp	r0, #0
   b8fc8:	d099      	beq.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8fca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8fcc:	2b00      	cmp	r3, #0
   b8fce:	d096      	beq.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8fd0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8fd2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8fd4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8fd8:	d001      	beq.n	b8fde <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8fda:	2e10      	cmp	r6, #16
   b8fdc:	d117      	bne.n	b900e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8fde:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8fe0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8fe2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8fe4:	2506      	movs	r5, #6
                        };
   b8fe6:	f88d 3015 	strb.w	r3, [sp, #21]
   b8fea:	9104      	str	r1, [sp, #16]
   b8fec:	f88d 2014 	strb.w	r2, [sp, #20]
   b8ff0:	9006      	str	r0, [sp, #24]
   b8ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8ff6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8ff8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8ffc:	9508      	str	r5, [sp, #32]
   b8ffe:	e883 0003 	stmia.w	r3, {r0, r1}
   b9002:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b9004:	a906      	add	r1, sp, #24
   b9006:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b900a:	4798      	blx	r3
   b900c:	e777      	b.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b900e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9010:	bf01      	itttt	eq
   b9012:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b9014:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b9016:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b901a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b901c:	bf0f      	iteee	eq
   b901e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b9022:	461a      	movne	r2, r3
   b9024:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b9026:	461d      	movne	r5, r3
   b9028:	e7dd      	b.n	b8fe6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b902a:	89a9      	ldrh	r1, [r5, #12]
   b902c:	4620      	mov	r0, r4
   b902e:	f7ff fb1d 	bl	b866c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b9032:	4601      	mov	r1, r0
   b9034:	2800      	cmp	r0, #0
   b9036:	f43f af62 	beq.w	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b903a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b903c:	2b00      	cmp	r3, #0
   b903e:	f43f af5e 	beq.w	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b9042:	686b      	ldr	r3, [r5, #4]
   b9044:	9306      	str	r3, [sp, #24]
   b9046:	aa06      	add	r2, sp, #24
   b9048:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b904a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b904e:	4798      	blx	r3
   b9050:	e755      	b.n	b8efe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b9052:	bf00      	nop
   b9054:	000bee40 	.word	0x000bee40
   b9058:	000bedbf 	.word	0x000bedbf
   b905c:	000bee66 	.word	0x000bee66
   b9060:	000bee83 	.word	0x000bee83

000b9064 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b9064:	b513      	push	{r0, r1, r4, lr}
   b9066:	460b      	mov	r3, r1
   b9068:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b906a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b906e:	466c      	mov	r4, sp
   b9070:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b9074:	e893 0003 	ldmia.w	r3, {r0, r1}
   b9078:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b907c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b9080:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b9084:	b002      	add	sp, #8
   b9086:	bd10      	pop	{r4, pc}

000b9088 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b9088:	b538      	push	{r3, r4, r5, lr}
   b908a:	4605      	mov	r5, r0
   b908c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b908e:	f7ff ffe9 	bl	b9064 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9092:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9094:	68a2      	ldr	r2, [r4, #8]
   b9096:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9098:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b909a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b909c:	68e2      	ldr	r2, [r4, #12]
   b909e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b90a0:	60e3      	str	r3, [r4, #12]
      }
   b90a2:	bd38      	pop	{r3, r4, r5, pc}

000b90a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b90a4:	b570      	push	{r4, r5, r6, lr}
   b90a6:	4604      	mov	r4, r0
   b90a8:	b08c      	sub	sp, #48	; 0x30
   b90aa:	460e      	mov	r6, r1
   b90ac:	9201      	str	r2, [sp, #4]
   b90ae:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b90b0:	f7ff fabc 	bl	b862c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b90b4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b90b6:	9901      	ldr	r1, [sp, #4]
   b90b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b90bc:	f7ff f86b 	bl	b8196 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b90c0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b90c4:	b1cd      	cbz	r5, b90fa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b90c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b90c8:	9502      	str	r5, [sp, #8]
   b90ca:	a902      	add	r1, sp, #8
   b90cc:	a804      	add	r0, sp, #16
   b90ce:	9303      	str	r3, [sp, #12]
   b90d0:	f7ff fcb2 	bl	b8a38 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b90d4:	2300      	movs	r3, #0
	__x.swap(*this);
   b90d6:	a908      	add	r1, sp, #32
   b90d8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b90da:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b90dc:	f7ff ffd4 	bl	b9088 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b90e0:	4631      	mov	r1, r6
   b90e2:	a808      	add	r0, sp, #32
   b90e4:	f7ff ffd0 	bl	b9088 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b90e8:	a808      	add	r0, sp, #32
   b90ea:	f7fb f941 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   b90ee:	a804      	add	r0, sp, #16
   b90f0:	f7fb f93e 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
    }
   b90f4:	4620      	mov	r0, r4
   b90f6:	b00c      	add	sp, #48	; 0x30
   b90f8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b90fa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b90fc:	e7ea      	b.n	b90d4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b9100 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b9100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9104:	b087      	sub	sp, #28
   b9106:	461d      	mov	r5, r3
   b9108:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b910c:	4680      	mov	r8, r0
   b910e:	468b      	mov	fp, r1
   b9110:	4692      	mov	sl, r2
   b9112:	9912      	ldr	r1, [sp, #72]	; 0x48
   b9114:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9116:	2200      	movs	r2, #0
   b9118:	2068      	movs	r0, #104	; 0x68
   b911a:	9102      	str	r1, [sp, #8]
   b911c:	9204      	str	r2, [sp, #16]
   b911e:	f7fa ffba 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9122:	1e06      	subs	r6, r0, #0
   b9124:	f106 090c 	add.w	r9, r6, #12
   b9128:	d018      	beq.n	b915c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b912a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b912c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b912e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b9132:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b9134:	4a15      	ldr	r2, [pc, #84]	; (b918c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b9136:	f847 2b20 	str.w	r2, [r7], #32
   b913a:	9b03      	ldr	r3, [sp, #12]
   b913c:	9100      	str	r1, [sp, #0]
   b913e:	465a      	mov	r2, fp
   b9140:	4651      	mov	r1, sl
   b9142:	4648      	mov	r0, r9
   b9144:	f7ff ffae 	bl	b90a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b9148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b914a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b914c:	682b      	ldr	r3, [r5, #0]
   b914e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b9150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9152:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b9156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9158:	6823      	ldr	r3, [r4, #0]
   b915a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b915c:	a904      	add	r1, sp, #16
   b915e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b9160:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b9164:	f7ff fd10 	bl	b8b88 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b9168:	a805      	add	r0, sp, #20
   b916a:	f7fb ffbf 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b916e:	f8d8 3000 	ldr.w	r3, [r8]
   b9172:	b93b      	cbnz	r3, b9184 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b9174:	4a06      	ldr	r2, [pc, #24]	; (b9190 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b9176:	4907      	ldr	r1, [pc, #28]	; (b9194 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b9178:	200a      	movs	r0, #10
}
   b917a:	b007      	add	sp, #28
   b917c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b9180:	f7fe bc04 	b.w	b798c <panic_>
}
   b9184:	b007      	add	sp, #28
   b9186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b918a:	bf00      	nop
   b918c:	000beefc 	.word	0x000beefc
   b9190:	000b74a9 	.word	0x000b74a9
   b9194:	000beda8 	.word	0x000beda8

000b9198 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9198:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b919a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b919c:	4604      	mov	r4, r0
   b919e:	460d      	mov	r5, r1
   b91a0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b91a2:	d914      	bls.n	b91ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b91a4:	4290      	cmp	r0, r2
   b91a6:	d213      	bcs.n	b91d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b91a8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b91ac:	1a75      	subs	r5, r6, r1
   b91ae:	f1a1 0708 	sub.w	r7, r1, #8
   b91b2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b91b4:	42b7      	cmp	r7, r6
   b91b6:	d018      	beq.n	b91ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b91b8:	b11c      	cbz	r4, b91c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b91ba:	4631      	mov	r1, r6
   b91bc:	4620      	mov	r0, r4
   b91be:	f7ff fc68 	bl	b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91c2:	1d30      	adds	r0, r6, #4
   b91c4:	f7fb ff92 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b91c8:	3e08      	subs	r6, #8
   b91ca:	3c08      	subs	r4, #8
   b91cc:	e7f2      	b.n	b91b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b91ce:	d00c      	beq.n	b91ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b91d0:	42b5      	cmp	r5, r6
   b91d2:	d00a      	beq.n	b91ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b91d4:	b11c      	cbz	r4, b91de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b91d6:	4629      	mov	r1, r5
   b91d8:	4620      	mov	r0, r4
   b91da:	f7ff fc5a 	bl	b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91de:	1d28      	adds	r0, r5, #4
   b91e0:	f7fb ff84 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b91e4:	3508      	adds	r5, #8
   b91e6:	3408      	adds	r4, #8
   b91e8:	e7f2      	b.n	b91d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b91ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b91ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b91ec:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b91ee:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b91f0:	4605      	mov	r5, r0
        if (n > 0) {
   b91f2:	dd11      	ble.n	b9218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b91f4:	00f0      	lsls	r0, r6, #3
   b91f6:	f7fe fccf 	bl	b7b98 <malloc>
            if (!d) {
   b91fa:	4604      	mov	r4, r0
   b91fc:	b158      	cbz	r0, b9216 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b91fe:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9202:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9206:	f7ff ffc7 	bl	b9198 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b920a:	6828      	ldr	r0, [r5, #0]
   b920c:	f7fe fccc 	bl	b7ba8 <free>
        data_ = d;
   b9210:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9212:	60ae      	str	r6, [r5, #8]
        return true;
   b9214:	2001      	movs	r0, #1
    }
   b9216:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9218:	2400      	movs	r4, #0
   b921a:	e7f6      	b.n	b920a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b921c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b921c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b921e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b9220:	6845      	ldr	r5, [r0, #4]
   b9222:	4668      	mov	r0, sp
   b9224:	f7ff fc35 	bl	b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9228:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b922c:	4299      	cmp	r1, r3
   b922e:	da10      	bge.n	b9252 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b9230:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9232:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9234:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9238:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b923c:	4629      	mov	r1, r5
   b923e:	f105 0008 	add.w	r0, r5, #8
   b9242:	f7ff ffa9 	bl	b9198 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9246:	b98d      	cbnz	r5, b926c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9248:	6863      	ldr	r3, [r4, #4]
   b924a:	3301      	adds	r3, #1
   b924c:	6063      	str	r3, [r4, #4]
    return true;
   b924e:	2601      	movs	r6, #1
   b9250:	e006      	b.n	b9260 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9252:	3101      	adds	r1, #1
   b9254:	4620      	mov	r0, r4
   b9256:	f7ff ffc9 	bl	b91ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b925a:	4606      	mov	r6, r0
   b925c:	2800      	cmp	r0, #0
   b925e:	d1e7      	bne.n	b9230 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b9260:	a801      	add	r0, sp, #4
   b9262:	f7fb ff43 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9266:	4630      	mov	r0, r6
   b9268:	b002      	add	sp, #8
   b926a:	bd70      	pop	{r4, r5, r6, pc}
   b926c:	4669      	mov	r1, sp
   b926e:	4628      	mov	r0, r5
   b9270:	f7ff fc0f 	bl	b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b9274:	e7e8      	b.n	b9248 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9276 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9276:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b927a:	4604      	mov	r4, r0
   b927c:	460d      	mov	r5, r1
   b927e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9280:	d914      	bls.n	b92ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9282:	4290      	cmp	r0, r2
   b9284:	d213      	bcs.n	b92ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9286:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b928a:	1a75      	subs	r5, r6, r1
   b928c:	f1a1 0708 	sub.w	r7, r1, #8
   b9290:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9292:	42b7      	cmp	r7, r6
   b9294:	d018      	beq.n	b92c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b9296:	b11c      	cbz	r4, b92a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b9298:	4631      	mov	r1, r6
   b929a:	4620      	mov	r0, r4
   b929c:	f7ff fbeb 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92a0:	1d30      	adds	r0, r6, #4
   b92a2:	f7fb ff23 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b92a6:	3e08      	subs	r6, #8
   b92a8:	3c08      	subs	r4, #8
   b92aa:	e7f2      	b.n	b9292 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b92ac:	d00c      	beq.n	b92c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b92ae:	42b5      	cmp	r5, r6
   b92b0:	d00a      	beq.n	b92c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b92b2:	b11c      	cbz	r4, b92bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b92b4:	4629      	mov	r1, r5
   b92b6:	4620      	mov	r0, r4
   b92b8:	f7ff fbdd 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92bc:	1d28      	adds	r0, r5, #4
   b92be:	f7fb ff15 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b92c2:	3508      	adds	r5, #8
   b92c4:	3408      	adds	r4, #8
   b92c6:	e7f2      	b.n	b92ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b92c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b92ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b92ca:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b92cc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b92ce:	4605      	mov	r5, r0
        if (n > 0) {
   b92d0:	dd11      	ble.n	b92f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b92d2:	00f0      	lsls	r0, r6, #3
   b92d4:	f7fe fc60 	bl	b7b98 <malloc>
            if (!d) {
   b92d8:	4604      	mov	r4, r0
   b92da:	b158      	cbz	r0, b92f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b92dc:	e9d5 1200 	ldrd	r1, r2, [r5]
   b92e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b92e4:	f7ff ffc7 	bl	b9276 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b92e8:	6828      	ldr	r0, [r5, #0]
   b92ea:	f7fe fc5d 	bl	b7ba8 <free>
        data_ = d;
   b92ee:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b92f0:	60ae      	str	r6, [r5, #8]
        return true;
   b92f2:	2001      	movs	r0, #1
    }
   b92f4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b92f6:	2400      	movs	r4, #0
   b92f8:	e7f6      	b.n	b92e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b92fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b92fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b92fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b92fe:	6845      	ldr	r5, [r0, #4]
   b9300:	4668      	mov	r0, sp
   b9302:	f7ff fbb8 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9306:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b930a:	4299      	cmp	r1, r3
   b930c:	da10      	bge.n	b9330 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b930e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9310:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9312:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b9316:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b931a:	4629      	mov	r1, r5
   b931c:	f105 0008 	add.w	r0, r5, #8
   b9320:	f7ff ffa9 	bl	b9276 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9324:	b98d      	cbnz	r5, b934a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b9326:	6863      	ldr	r3, [r4, #4]
   b9328:	3301      	adds	r3, #1
   b932a:	6063      	str	r3, [r4, #4]
    return true;
   b932c:	2601      	movs	r6, #1
   b932e:	e006      	b.n	b933e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9330:	3101      	adds	r1, #1
   b9332:	4620      	mov	r0, r4
   b9334:	f7ff ffc9 	bl	b92ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9338:	4606      	mov	r6, r0
   b933a:	2800      	cmp	r0, #0
   b933c:	d1e7      	bne.n	b930e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b933e:	a801      	add	r0, sp, #4
   b9340:	f7fb fed4 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9344:	4630      	mov	r0, r6
   b9346:	b002      	add	sp, #8
   b9348:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b934a:	4669      	mov	r1, sp
   b934c:	4628      	mov	r0, r5
   b934e:	f7ff fb92 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9352:	e7e8      	b.n	b9326 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b9354 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9358:	4617      	mov	r7, r2
   b935a:	b0a1      	sub	sp, #132	; 0x84
   b935c:	4680      	mov	r8, r0
    WiringBleLock lk;
   b935e:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b9360:	460e      	mov	r6, r1
    WiringBleLock lk;
   b9362:	f7ff f82b 	bl	b83bc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9366:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b9368:	7923      	ldrb	r3, [r4, #4]
   b936a:	b953      	cbnz	r3, b9382 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b936c:	4639      	mov	r1, r7
   b936e:	4640      	mov	r0, r8
   b9370:	f7ff fb81 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b9374:	a80a      	add	r0, sp, #40	; 0x28
   b9376:	f7ff f82f 	bl	b83d8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b937a:	4640      	mov	r0, r8
   b937c:	b021      	add	sp, #132	; 0x84
   b937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b9382:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b9384:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b9388:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b938c:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b938e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b9392:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b9396:	9b03      	ldr	r3, [sp, #12]
   b9398:	429d      	cmp	r5, r3
   b939a:	d021      	beq.n	b93e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b939c:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b93a0:	4658      	mov	r0, fp
   b93a2:	f109 0114 	add.w	r1, r9, #20
   b93a6:	f7ff f8b6 	bl	b8516 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b93aa:	b1b8      	cbz	r0, b93dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b93ac:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b93b0:	4650      	mov	r0, sl
   b93b2:	f7ff f8b0 	bl	b8516 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b93b6:	b188      	cbz	r0, b93dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b93b8:	6823      	ldr	r3, [r4, #0]
   b93ba:	f8d9 2000 	ldr.w	r2, [r9]
   b93be:	4053      	eors	r3, r2
   b93c0:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b93c4:	d10a      	bne.n	b93dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b93c6:	2220      	movs	r2, #32
   b93c8:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b93cc:	4a5e      	ldr	r2, [pc, #376]	; (b9548 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b93ce:	9200      	str	r2, [sp, #0]
   b93d0:	aa15      	add	r2, sp, #84	; 0x54
   b93d2:	495e      	ldr	r1, [pc, #376]	; (b954c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b93d4:	2032      	movs	r0, #50	; 0x32
   b93d6:	f7fe fae1 	bl	b799c <log_message>
   b93da:	e7c7      	b.n	b936c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b93dc:	3508      	adds	r5, #8
   b93de:	e7da      	b.n	b9396 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b93e0:	4650      	mov	r0, sl
   b93e2:	f7ff f869 	bl	b84b8 <_ZNK8particle7BleUuid7isValidEv>
   b93e6:	b960      	cbnz	r0, b9402 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b93e8:	4959      	ldr	r1, [pc, #356]	; (b9550 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b93ea:	2201      	movs	r2, #1
   b93ec:	a815      	add	r0, sp, #84	; 0x54
   b93ee:	ad15      	add	r5, sp, #84	; 0x54
   b93f0:	f7ff f83a 	bl	b8468 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b93f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b93f6:	46d4      	mov	ip, sl
   b93f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b93fc:	682b      	ldr	r3, [r5, #0]
   b93fe:	f8cc 3000 	str.w	r3, [ip]
   b9402:	6833      	ldr	r3, [r6, #0]
   b9404:	e9d3 5300 	ldrd	r5, r3, [r3]
   b9408:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b940c:	455d      	cmp	r5, fp
   b940e:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b9410:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b9412:	d06e      	beq.n	b94f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b9414:	f855 0b08 	ldr.w	r0, [r5], #8
   b9418:	f7ff f87d 	bl	b8516 <_ZNK8particle7BleUuideqERKS0_>
   b941c:	2800      	cmp	r0, #0
   b941e:	d0f5      	beq.n	b940c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b9420:	f104 0a14 	add.w	sl, r4, #20
   b9424:	4650      	mov	r0, sl
   b9426:	f7ff f847 	bl	b84b8 <_ZNK8particle7BleUuid7isValidEv>
   b942a:	b988      	cbnz	r0, b9450 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b942c:	4b49      	ldr	r3, [pc, #292]	; (b9554 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b942e:	4948      	ldr	r1, [pc, #288]	; (b9550 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b9430:	881a      	ldrh	r2, [r3, #0]
   b9432:	3201      	adds	r2, #1
   b9434:	b292      	uxth	r2, r2
   b9436:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b9438:	a815      	add	r0, sp, #84	; 0x54
   b943a:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b943c:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b943e:	f7ff f832 	bl	b84a6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b9442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9444:	46d4      	mov	ip, sl
   b9446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b944a:	682b      	ldr	r3, [r5, #0]
   b944c:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b9450:	4b41      	ldr	r3, [pc, #260]	; (b9558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b9452:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b9454:	2228      	movs	r2, #40	; 0x28
   b9456:	2100      	movs	r1, #0
   b9458:	a816      	add	r0, sp, #88	; 0x58
   b945a:	f003 f8d5 	bl	bc608 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b945e:	4651      	mov	r1, sl
   b9460:	a804      	add	r0, sp, #16
   b9462:	f7ff f83b 	bl	b84dc <_ZN8particle7BleUuid7halUUIDEv>
   b9466:	ab04      	add	r3, sp, #16
   b9468:	aa18      	add	r2, sp, #96	; 0x60
   b946a:	f10d 0c20 	add.w	ip, sp, #32
   b946e:	6818      	ldr	r0, [r3, #0]
   b9470:	6859      	ldr	r1, [r3, #4]
   b9472:	4615      	mov	r5, r2
   b9474:	c503      	stmia	r5!, {r0, r1}
   b9476:	3308      	adds	r3, #8
   b9478:	4563      	cmp	r3, ip
   b947a:	462a      	mov	r2, r5
   b947c:	d1f7      	bne.n	b946e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b947e:	6818      	ldr	r0, [r3, #0]
   b9480:	6028      	str	r0, [r5, #0]
    return value_;
   b9482:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b9484:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b9488:	f8d9 3000 	ldr.w	r3, [r9]
   b948c:	8a9b      	ldrh	r3, [r3, #20]
   b948e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b9492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b9494:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b9496:	4b31      	ldr	r3, [pc, #196]	; (b955c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b9498:	2200      	movs	r2, #0
   b949a:	1da1      	adds	r1, r4, #6
   b949c:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b949e:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b94a2:	f7fe f883 	bl	b75ac <hal_ble_gatt_server_add_characteristic>
   b94a6:	2800      	cmp	r0, #0
   b94a8:	f47f af60 	bne.w	b936c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b94ac:	2301      	movs	r3, #1
   b94ae:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b94b0:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b94b2:	4639      	mov	r1, r7
        return characteristics_;
   b94b4:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b94b6:	a80d      	add	r0, sp, #52	; 0x34
   b94b8:	f7ff fadd 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b94bc:	4620      	mov	r0, r4
   b94be:	a90d      	add	r1, sp, #52	; 0x34
   b94c0:	f7ff ff1b 	bl	b92fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b94c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b94c6:	a80e      	add	r0, sp, #56	; 0x38
   b94c8:	f7fb fe10 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94cc:	2c00      	cmp	r4, #0
   b94ce:	f47f af4d 	bne.w	b936c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b94d2:	2320      	movs	r3, #32
   b94d4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b94d8:	4b21      	ldr	r3, [pc, #132]	; (b9560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b94da:	9300      	str	r3, [sp, #0]
   b94dc:	aa0d      	add	r2, sp, #52	; 0x34
   b94de:	4623      	mov	r3, r4
   b94e0:	e777      	b.n	b93d2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b94e2:	4639      	mov	r1, r7
   b94e4:	4640      	mov	r0, r8
   b94e6:	f7ff fac6 	bl	b8a76 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b94ea:	a80c      	add	r0, sp, #48	; 0x30
   b94ec:	f7fb fdfe 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b94f0:	e740      	b.n	b9374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b94f2:	a80b      	add	r0, sp, #44	; 0x2c
   b94f4:	f7ff f92c 	bl	b8750 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b94f8:	4651      	mov	r1, sl
   b94fa:	a815      	add	r0, sp, #84	; 0x54
   b94fc:	f7fe ffee 	bl	b84dc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b9500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b9502:	2300      	movs	r3, #0
   b9504:	3214      	adds	r2, #20
   b9506:	a915      	add	r1, sp, #84	; 0x54
   b9508:	2001      	movs	r0, #1
   b950a:	f7fe f827 	bl	b755c <hal_ble_gatt_server_add_service>
   b950e:	2800      	cmp	r0, #0
   b9510:	d1e7      	bne.n	b94e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b9512:	6835      	ldr	r5, [r6, #0]
   b9514:	a90b      	add	r1, sp, #44	; 0x2c
   b9516:	a80d      	add	r0, sp, #52	; 0x34
   b9518:	f7ff fabb 	bl	b8a92 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b951c:	4628      	mov	r0, r5
   b951e:	a90d      	add	r1, sp, #52	; 0x34
   b9520:	f7ff fe7c 	bl	b921c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b9524:	4605      	mov	r5, r0
   b9526:	a80e      	add	r0, sp, #56	; 0x38
   b9528:	f7fb fde0 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b952c:	2d00      	cmp	r5, #0
   b952e:	d0d8      	beq.n	b94e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b9530:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b9532:	6853      	ldr	r3, [r2, #4]
   b9534:	6812      	ldr	r2, [r2, #0]
   b9536:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b953a:	3b01      	subs	r3, #1
   b953c:	a80c      	add	r0, sp, #48	; 0x30
   b953e:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b9542:	f7fb fdd3 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9546:	e76b      	b.n	b9420 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b9548:	000beea2 	.word	0x000beea2
   b954c:	000bedbf 	.word	0x000bedbf
   b9550:	000bef66 	.word	0x000bef66
   b9554:	2003e638 	.word	0x2003e638
   b9558:	002c0003 	.word	0x002c0003
   b955c:	000b88e9 	.word	0x000b88e9
   b9560:	000beecd 	.word	0x000beecd

000b9564 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9564:	4802      	ldr	r0, [pc, #8]	; (b9570 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9566:	2300      	movs	r3, #0
   b9568:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b956a:	f7fe b877 	b.w	b765c <os_mutex_recursive_create>
   b956e:	bf00      	nop
   b9570:	2003e63c 	.word	0x2003e63c

000b9574 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b9574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9576:	4606      	mov	r6, r0
   b9578:	460d      	mov	r5, r1
  size_t n = 0;
   b957a:	188f      	adds	r7, r1, r2
   b957c:	2400      	movs	r4, #0
  while (size--) {
   b957e:	42bd      	cmp	r5, r7
   b9580:	d00c      	beq.n	b959c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b9582:	6833      	ldr	r3, [r6, #0]
   b9584:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9588:	689b      	ldr	r3, [r3, #8]
   b958a:	4630      	mov	r0, r6
   b958c:	4798      	blx	r3
     if (chunk>=0)
   b958e:	1e03      	subs	r3, r0, #0
   b9590:	db01      	blt.n	b9596 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b9592:	441c      	add	r4, r3
  while (size--) {
   b9594:	e7f3      	b.n	b957e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b9596:	2c00      	cmp	r4, #0
   b9598:	bf08      	it	eq
   b959a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b959c:	4620      	mov	r0, r4
   b959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b95a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b95a0:	b508      	push	{r3, lr}
  return write(str);
   b95a2:	f7fd fa75 	bl	b6a90 <_ZN5Print5writeEPKc>
}
   b95a6:	bd08      	pop	{r3, pc}

000b95a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b95a8:	6803      	ldr	r3, [r0, #0]
   b95aa:	689b      	ldr	r3, [r3, #8]
   b95ac:	4718      	bx	r3

000b95ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b95ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b95b0:	210d      	movs	r1, #13
{
   b95b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b95b4:	f7ff fff8 	bl	b95a8 <_ZN5Print5printEc>
  n += print('\n');
   b95b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b95ba:	4604      	mov	r4, r0
  n += print('\n');
   b95bc:	4628      	mov	r0, r5
   b95be:	f7ff fff3 	bl	b95a8 <_ZN5Print5printEc>
  return n;
}
   b95c2:	4420      	add	r0, r4
   b95c4:	bd38      	pop	{r3, r4, r5, pc}

000b95c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b95c6:	b538      	push	{r3, r4, r5, lr}
   b95c8:	4605      	mov	r5, r0
  return write(str);
   b95ca:	f7fd fa61 	bl	b6a90 <_ZN5Print5writeEPKc>
   b95ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b95d0:	4628      	mov	r0, r5
   b95d2:	f7ff ffec 	bl	b95ae <_ZN5Print7printlnEv>
  return n;
}
   b95d6:	4420      	add	r0, r4
   b95d8:	bd38      	pop	{r3, r4, r5, pc}

000b95da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b95da:	b530      	push	{r4, r5, lr}
   b95dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b95de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b95e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b95e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b95e6:	bf98      	it	ls
   b95e8:	220a      	movls	r2, #10
   b95ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b95ec:	460d      	mov	r5, r1
   b95ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b95f2:	fb01 5312 	mls	r3, r1, r2, r5
   b95f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b95fa:	2b09      	cmp	r3, #9
   b95fc:	bf94      	ite	ls
   b95fe:	3330      	addls	r3, #48	; 0x30
   b9600:	3337      	addhi	r3, #55	; 0x37
   b9602:	b2db      	uxtb	r3, r3
  } while(n);
   b9604:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9606:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b960a:	d9ef      	bls.n	b95ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b960c:	4621      	mov	r1, r4
   b960e:	f7fd fa3f 	bl	b6a90 <_ZN5Print5writeEPKc>
}
   b9612:	b00b      	add	sp, #44	; 0x2c
   b9614:	bd30      	pop	{r4, r5, pc}

000b9616 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b9616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b961a:	b086      	sub	sp, #24
   b961c:	af00      	add	r7, sp, #0
   b961e:	4605      	mov	r5, r0
   b9620:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b9622:	1d38      	adds	r0, r7, #4
   b9624:	2114      	movs	r1, #20
{
   b9626:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9628:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b962a:	f7fe fadd 	bl	b7be8 <vsnprintf>

    if (n<bufsize)
   b962e:	2813      	cmp	r0, #19
   b9630:	d80e      	bhi.n	b9650 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b9632:	1d39      	adds	r1, r7, #4
   b9634:	4628      	mov	r0, r5
   b9636:	f7fd fa2b 	bl	b6a90 <_ZN5Print5writeEPKc>
   b963a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b963c:	b11e      	cbz	r6, b9646 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b963e:	4628      	mov	r0, r5
   b9640:	f7ff ffb5 	bl	b95ae <_ZN5Print7printlnEv>
   b9644:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b9646:	4620      	mov	r0, r4
   b9648:	3718      	adds	r7, #24
   b964a:	46bd      	mov	sp, r7
   b964c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b9650:	f100 0308 	add.w	r3, r0, #8
   b9654:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b9658:	46e8      	mov	r8, sp
        char bigger[n+1];
   b965a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b965e:	4622      	mov	r2, r4
   b9660:	1c41      	adds	r1, r0, #1
   b9662:	683b      	ldr	r3, [r7, #0]
   b9664:	4668      	mov	r0, sp
   b9666:	f7fe fabf 	bl	b7be8 <vsnprintf>
  return write(str);
   b966a:	4669      	mov	r1, sp
   b966c:	4628      	mov	r0, r5
   b966e:	f7fd fa0f 	bl	b6a90 <_ZN5Print5writeEPKc>
   b9672:	4604      	mov	r4, r0
   b9674:	46c5      	mov	sp, r8
   b9676:	e7e1      	b.n	b963c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b9678 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b9678:	b510      	push	{r4, lr}
   b967a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b967c:	f7fd ff24 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b9680:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b9682:	6823      	ldr	r3, [r4, #0]
   b9684:	4620      	mov	r0, r4
   b9686:	695b      	ldr	r3, [r3, #20]
   b9688:	4798      	blx	r3
    if (c >= 0) return c;
   b968a:	2800      	cmp	r0, #0
   b968c:	da08      	bge.n	b96a0 <_ZN6Stream9timedReadEv+0x28>
   b968e:	f7fd ff1b 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b9692:	68e3      	ldr	r3, [r4, #12]
   b9694:	1ac0      	subs	r0, r0, r3
   b9696:	68a3      	ldr	r3, [r4, #8]
   b9698:	4298      	cmp	r0, r3
   b969a:	d3f2      	bcc.n	b9682 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b969c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b96a0:	bd10      	pop	{r4, pc}

000b96a2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   b96a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b96a6:	4607      	mov	r7, r0
   b96a8:	4688      	mov	r8, r1
   b96aa:	4616      	mov	r6, r2
  if (length < 1) return 0;
   b96ac:	461d      	mov	r5, r3
   b96ae:	b173      	cbz	r3, b96ce <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   b96b0:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   b96b2:	4638      	mov	r0, r7
   b96b4:	f7ff ffe0 	bl	b9678 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   b96b8:	1e03      	subs	r3, r0, #0
   b96ba:	db05      	blt.n	b96c8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   b96bc:	4543      	cmp	r3, r8
   b96be:	d003      	beq.n	b96c8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   b96c0:	5533      	strb	r3, [r6, r4]
    index++;
   b96c2:	3401      	adds	r4, #1
  while (index < length) {
   b96c4:	42a5      	cmp	r5, r4
   b96c6:	d1f4      	bne.n	b96b2 <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   b96c8:	4620      	mov	r0, r4
   b96ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   b96ce:	461c      	mov	r4, r3
   b96d0:	e7fa      	b.n	b96c8 <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000b96d4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b96d4:	b570      	push	{r4, r5, r6, lr}
   b96d6:	460d      	mov	r5, r1
  String ret;
   b96d8:	4909      	ldr	r1, [pc, #36]	; (b9700 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b96da:	4604      	mov	r4, r0
   b96dc:	4616      	mov	r6, r2
  String ret;
   b96de:	f7fe fd04 	bl	b80ea <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b96e2:	4628      	mov	r0, r5
   b96e4:	f7ff ffc8 	bl	b9678 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b96e8:	2800      	cmp	r0, #0
   b96ea:	db06      	blt.n	b96fa <_ZN6Stream15readStringUntilEc+0x26>
   b96ec:	4286      	cmp	r6, r0
   b96ee:	d004      	beq.n	b96fa <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b96f0:	b2c1      	uxtb	r1, r0
   b96f2:	4620      	mov	r0, r4
   b96f4:	f7fe fd78 	bl	b81e8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b96f8:	e7f3      	b.n	b96e2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b96fa:	4620      	mov	r0, r4
   b96fc:	bd70      	pop	{r4, r5, r6, pc}
   b96fe:	bf00      	nop
   b9700:	000befe0 	.word	0x000befe0

000b9704 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9704:	6880      	ldr	r0, [r0, #8]
   b9706:	6803      	ldr	r3, [r0, #0]
   b9708:	68db      	ldr	r3, [r3, #12]
   b970a:	4718      	bx	r3

000b970c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b970c:	4770      	bx	lr

000b970e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b970e:	4608      	mov	r0, r1
   b9710:	b111      	cbz	r1, b9718 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9712:	680b      	ldr	r3, [r1, #0]
   b9714:	685b      	ldr	r3, [r3, #4]
   b9716:	4718      	bx	r3
}
   b9718:	4770      	bx	lr

000b971a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b971a:	4770      	bx	lr

000b971c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b971c:	4770      	bx	lr

000b971e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b971e:	4770      	bx	lr

000b9720 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9720:	4770      	bx	lr

000b9722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9722:	b538      	push	{r3, r4, r5, lr}
   b9724:	4604      	mov	r4, r0
   b9726:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9728:	6800      	ldr	r0, [r0, #0]
   b972a:	212e      	movs	r1, #46	; 0x2e
   b972c:	f002 ffbe 	bl	bc6ac <strchrnul>
    size = s - category;
   b9730:	6823      	ldr	r3, [r4, #0]
   b9732:	1ac3      	subs	r3, r0, r3
   b9734:	602b      	str	r3, [r5, #0]
    if (size) {
   b9736:	b123      	cbz	r3, b9742 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9738:	7803      	ldrb	r3, [r0, #0]
   b973a:	b103      	cbz	r3, b973e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b973c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b973e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9740:	6020      	str	r0, [r4, #0]
}
   b9742:	4618      	mov	r0, r3
   b9744:	bd38      	pop	{r3, r4, r5, pc}

000b9746 <_ZN5spark16JSONStreamWriterD0Ev>:
   b9746:	b510      	push	{r4, lr}
   b9748:	210c      	movs	r1, #12
   b974a:	4604      	mov	r4, r0
   b974c:	f7fa fca7 	bl	b409e <_ZdlPvj>
   b9750:	4620      	mov	r0, r4
   b9752:	bd10      	pop	{r4, pc}

000b9754 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9754:	b510      	push	{r4, lr}
   b9756:	2104      	movs	r1, #4
   b9758:	4604      	mov	r4, r0
   b975a:	f7fa fca0 	bl	b409e <_ZdlPvj>
   b975e:	4620      	mov	r0, r4
   b9760:	bd10      	pop	{r4, pc}

000b9762 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9762:	b510      	push	{r4, lr}
   b9764:	2104      	movs	r1, #4
   b9766:	4604      	mov	r4, r0
   b9768:	f7fa fc99 	bl	b409e <_ZdlPvj>
   b976c:	4620      	mov	r0, r4
   b976e:	bd10      	pop	{r4, pc}

000b9770 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b9770:	f7fd bf84 	b.w	b767c <os_mutex_recursive_lock>

000b9774 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9774:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9776:	f002 ffa3 	bl	bc6c0 <strcmp>
}
   b977a:	fab0 f080 	clz	r0, r0
   b977e:	0940      	lsrs	r0, r0, #5
   b9780:	bd08      	pop	{r3, pc}

000b9782 <__tcf_1>:
   b9782:	4770      	bx	lr

000b9784 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9784:	b510      	push	{r4, lr}
   b9786:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9788:	f001 fc1e 	bl	bafc8 <_Z16_fetch_usbserialv>
   b978c:	4284      	cmp	r4, r0
   b978e:	d010      	beq.n	b97b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9790:	f002 f88e 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b9794:	4284      	cmp	r4, r0
   b9796:	d105      	bne.n	b97a4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9798:	f002 f88a 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b97a0:	f001 bce1 	b.w	bb166 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b97a4:	b12c      	cbz	r4, b97b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b97a6:	6823      	ldr	r3, [r4, #0]
   b97a8:	4620      	mov	r0, r4
   b97aa:	685b      	ldr	r3, [r3, #4]
}
   b97ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b97b0:	4718      	bx	r3
   b97b2:	bd10      	pop	{r4, pc}

000b97b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b97b4:	680b      	ldr	r3, [r1, #0]
   b97b6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b97b8:	684b      	ldr	r3, [r1, #4]
   b97ba:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b97bc:	b113      	cbz	r3, b97c4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b97be:	685a      	ldr	r2, [r3, #4]
   b97c0:	3201      	adds	r2, #1
   b97c2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b97c4:	4770      	bx	lr

000b97c6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b97c6:	b513      	push	{r0, r1, r4, lr}
   b97c8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b97ca:	4608      	mov	r0, r1
   b97cc:	9101      	str	r1, [sp, #4]
   b97ce:	f002 ffa6 	bl	bc71e <strlen>
   b97d2:	9901      	ldr	r1, [sp, #4]
   b97d4:	4602      	mov	r2, r0
   b97d6:	4620      	mov	r0, r4
}
   b97d8:	b002      	add	sp, #8
   b97da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b97de:	f001 bfd3 	b.w	bb788 <_ZN5spark10JSONWriter5valueEPKcj>

000b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b97e2:	b513      	push	{r0, r1, r4, lr}
   b97e4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b97e6:	4608      	mov	r0, r1
   b97e8:	9101      	str	r1, [sp, #4]
   b97ea:	f002 ff98 	bl	bc71e <strlen>
   b97ee:	6823      	ldr	r3, [r4, #0]
   b97f0:	9901      	ldr	r1, [sp, #4]
   b97f2:	68db      	ldr	r3, [r3, #12]
   b97f4:	4602      	mov	r2, r0
   b97f6:	4620      	mov	r0, r4
}
   b97f8:	b002      	add	sp, #8
   b97fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b97fe:	4718      	bx	r3

000b9800 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9800:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9802:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9804:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9808:	68db      	ldr	r3, [r3, #12]
   b980a:	2201      	movs	r2, #1
   b980c:	f10d 0107 	add.w	r1, sp, #7
   b9810:	4798      	blx	r3
}
   b9812:	b003      	add	sp, #12
   b9814:	f85d fb04 	ldr.w	pc, [sp], #4

000b9818 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9818:	b40e      	push	{r1, r2, r3}
   b981a:	b503      	push	{r0, r1, lr}
   b981c:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b981e:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9820:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9824:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9826:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9828:	f7ff fef5 	bl	b9616 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b982c:	b002      	add	sp, #8
   b982e:	f85d eb04 	ldr.w	lr, [sp], #4
   b9832:	b003      	add	sp, #12
   b9834:	4770      	bx	lr

000b9836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9836:	680a      	ldr	r2, [r1, #0]
   b9838:	6002      	str	r2, [r0, #0]
   b983a:	684a      	ldr	r2, [r1, #4]
   b983c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b983e:	2200      	movs	r2, #0
   b9840:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9844:	b510      	push	{r4, lr}
   b9846:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9848:	688c      	ldr	r4, [r1, #8]
   b984a:	6084      	str	r4, [r0, #8]
   b984c:	68cc      	ldr	r4, [r1, #12]
   b984e:	60c4      	str	r4, [r0, #12]
   b9850:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9852:	608a      	str	r2, [r1, #8]
   b9854:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9856:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9858:	610a      	str	r2, [r1, #16]
   b985a:	bd10      	pop	{r4, pc}

000b985c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b985c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9860:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9864:	f04f 0a14 	mov.w	sl, #20
   b9868:	9300      	str	r3, [sp, #0]
   b986a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b986e:	4b18      	ldr	r3, [pc, #96]	; (b98d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9870:	10a4      	asrs	r4, r4, #2
   b9872:	4617      	mov	r7, r2
   b9874:	435c      	muls	r4, r3
   b9876:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9878:	2c00      	cmp	r4, #0
   b987a:	dd21      	ble.n	b98c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b987c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b987e:	fb0a f006 	mul.w	r0, sl, r6
   b9882:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9886:	463a      	mov	r2, r7
   b9888:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b988c:	5828      	ldr	r0, [r5, r0]
   b988e:	9101      	str	r1, [sp, #4]
   b9890:	455f      	cmp	r7, fp
   b9892:	bf28      	it	cs
   b9894:	465a      	movcs	r2, fp
   b9896:	f002 ff5d 	bl	bc754 <strncmp>
                if (cmp == 0) {
   b989a:	2800      	cmp	r0, #0
   b989c:	9901      	ldr	r1, [sp, #4]
   b989e:	f04f 0301 	mov.w	r3, #1
   b98a2:	d10b      	bne.n	b98bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b98a4:	455f      	cmp	r7, fp
   b98a6:	d103      	bne.n	b98b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b98a8:	9a00      	ldr	r2, [sp, #0]
   b98aa:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b98ac:	4634      	mov	r4, r6
   b98ae:	e7e3      	b.n	b9878 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b98b0:	d9fc      	bls.n	b98ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b98b2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b98b4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b98b8:	3e01      	subs	r6, #1
   b98ba:	e7f7      	b.n	b98ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b98bc:	dbf9      	blt.n	b98b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b98be:	e7f5      	b.n	b98ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b98c0:	eba5 0508 	sub.w	r5, r5, r8
}
   b98c4:	4802      	ldr	r0, [pc, #8]	; (b98d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b98c6:	10ad      	asrs	r5, r5, #2
   b98c8:	4368      	muls	r0, r5
   b98ca:	b003      	add	sp, #12
   b98cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b98d0:	cccccccd 	.word	0xcccccccd

000b98d4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b98d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b98d6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b98d8:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b98da:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b98dc:	b303      	cbz	r3, b9920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b98de:	b1f9      	cbz	r1, b9920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b98e0:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b98e2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b98e6:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b98e8:	a903      	add	r1, sp, #12
   b98ea:	a801      	add	r0, sp, #4
   b98ec:	f7ff ff19 	bl	b9722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b98f0:	4601      	mov	r1, r0
   b98f2:	b1a8      	cbz	r0, b9920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b98f4:	f10d 030b 	add.w	r3, sp, #11
   b98f8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b98fa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b98fe:	4620      	mov	r0, r4
   b9900:	f7ff ffac 	bl	b985c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9904:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9908:	b153      	cbz	r3, b9920 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b990a:	6823      	ldr	r3, [r4, #0]
   b990c:	2414      	movs	r4, #20
   b990e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9912:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9914:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9918:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b991a:	bfa8      	it	ge
   b991c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b991e:	e7e3      	b.n	b98e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9920:	4628      	mov	r0, r5
   b9922:	b004      	add	sp, #16
   b9924:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9928 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9928:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b992a:	4c09      	ldr	r4, [pc, #36]	; (b9950 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b992c:	7823      	ldrb	r3, [r4, #0]
   b992e:	f3bf 8f5b 	dmb	ish
   b9932:	07db      	lsls	r3, r3, #31
   b9934:	d409      	bmi.n	b994a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9936:	4620      	mov	r0, r4
   b9938:	f7fa fbc0 	bl	b40bc <__cxa_guard_acquire>
   b993c:	b128      	cbz	r0, b994a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b993e:	4620      	mov	r0, r4
   b9940:	f7fa fbc1 	bl	b40c6 <__cxa_guard_release>
   b9944:	4803      	ldr	r0, [pc, #12]	; (b9954 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9946:	f002 fe11 	bl	bc56c <atexit>
}
   b994a:	4803      	ldr	r0, [pc, #12]	; (b9958 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b994c:	bd10      	pop	{r4, pc}
   b994e:	bf00      	nop
   b9950:	2003e648 	.word	0x2003e648
   b9954:	000b971b 	.word	0x000b971b
   b9958:	2003dc1c 	.word	0x2003dc1c

000b995c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b995c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b995e:	4c09      	ldr	r4, [pc, #36]	; (b9984 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9960:	7823      	ldrb	r3, [r4, #0]
   b9962:	f3bf 8f5b 	dmb	ish
   b9966:	07db      	lsls	r3, r3, #31
   b9968:	d409      	bmi.n	b997e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b996a:	4620      	mov	r0, r4
   b996c:	f7fa fba6 	bl	b40bc <__cxa_guard_acquire>
   b9970:	b128      	cbz	r0, b997e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9972:	4620      	mov	r0, r4
   b9974:	f7fa fba7 	bl	b40c6 <__cxa_guard_release>
   b9978:	4803      	ldr	r0, [pc, #12]	; (b9988 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b997a:	f002 fdf7 	bl	bc56c <atexit>
    return &factory;
}
   b997e:	4803      	ldr	r0, [pc, #12]	; (b998c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9980:	bd10      	pop	{r4, pc}
   b9982:	bf00      	nop
   b9984:	2003e64c 	.word	0x2003e64c
   b9988:	000b9783 	.word	0x000b9783
   b998c:	2003dc20 	.word	0x2003dc20

000b9990 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9990:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9992:	2500      	movs	r5, #0
   b9994:	4604      	mov	r4, r0
   b9996:	e9c0 5500 	strd	r5, r5, [r0]
   b999a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b999e:	6085      	str	r5, [r0, #8]
   b99a0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b99a2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b99a6:	f7fd fe59 	bl	b765c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b99aa:	f7ff ffbd 	bl	b9928 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b99ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b99b0:	f7ff ffd4 	bl	b995c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b99b4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b99b6:	6220      	str	r0, [r4, #32]
}
   b99b8:	4620      	mov	r0, r4
   b99ba:	bd38      	pop	{r3, r4, r5, pc}

000b99bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b99bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b99be:	4c0a      	ldr	r4, [pc, #40]	; (b99e8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b99c0:	7823      	ldrb	r3, [r4, #0]
   b99c2:	f3bf 8f5b 	dmb	ish
   b99c6:	07db      	lsls	r3, r3, #31
   b99c8:	d40c      	bmi.n	b99e4 <_ZN5spark10LogManager8instanceEv+0x28>
   b99ca:	4620      	mov	r0, r4
   b99cc:	f7fa fb76 	bl	b40bc <__cxa_guard_acquire>
   b99d0:	b140      	cbz	r0, b99e4 <_ZN5spark10LogManager8instanceEv+0x28>
   b99d2:	4806      	ldr	r0, [pc, #24]	; (b99ec <_ZN5spark10LogManager8instanceEv+0x30>)
   b99d4:	f7ff ffdc 	bl	b9990 <_ZN5spark10LogManagerC1Ev>
   b99d8:	4620      	mov	r0, r4
   b99da:	f7fa fb74 	bl	b40c6 <__cxa_guard_release>
   b99de:	4804      	ldr	r0, [pc, #16]	; (b99f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   b99e0:	f002 fdc4 	bl	bc56c <atexit>
    return &mgr;
}
   b99e4:	4801      	ldr	r0, [pc, #4]	; (b99ec <_ZN5spark10LogManager8instanceEv+0x30>)
   b99e6:	bd10      	pop	{r4, pc}
   b99e8:	2003e644 	.word	0x2003e644
   b99ec:	2003e654 	.word	0x2003e654
   b99f0:	000b9f11 	.word	0x000b9f11

000b99f4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b99f4:	4a02      	ldr	r2, [pc, #8]	; (b9a00 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b99f6:	4903      	ldr	r1, [pc, #12]	; (b9a04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b99f8:	4803      	ldr	r0, [pc, #12]	; (b9a08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b99fa:	2300      	movs	r3, #0
   b99fc:	f7fd bfde 	b.w	b79bc <log_set_callbacks>
   b9a00:	000b9cf5 	.word	0x000b9cf5
   b9a04:	000b9c81 	.word	0x000b9c81
   b9a08:	000b9c01 	.word	0x000b9c01

000b9a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9a0c:	2300      	movs	r3, #0
   b9a0e:	461a      	mov	r2, r3
   b9a10:	4619      	mov	r1, r3
   b9a12:	4618      	mov	r0, r3
   b9a14:	f7fd bfd2 	b.w	b79bc <log_set_callbacks>

000b9a18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9a1a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9a1c:	4604      	mov	r4, r0
   b9a1e:	4668      	mov	r0, sp
   b9a20:	f7ff fec8 	bl	b97b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9a24:	466a      	mov	r2, sp
   b9a26:	4629      	mov	r1, r5
   b9a28:	4620      	mov	r0, r4
   b9a2a:	f001 fdcd 	bl	bb5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9a2e:	a801      	add	r0, sp, #4
   b9a30:	f7fb fb5c 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a34:	4620      	mov	r0, r4
   b9a36:	b003      	add	sp, #12
   b9a38:	bd30      	pop	{r4, r5, pc}

000b9a3a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9a3c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9a3e:	4604      	mov	r4, r0
   b9a40:	4668      	mov	r0, sp
   b9a42:	f7ff feb7 	bl	b97b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9a46:	466a      	mov	r2, sp
   b9a48:	4629      	mov	r1, r5
   b9a4a:	4620      	mov	r0, r4
   b9a4c:	f001 fd98 	bl	bb580 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9a50:	a801      	add	r0, sp, #4
   b9a52:	f7fb fb4b 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a56:	4620      	mov	r0, r4
   b9a58:	b003      	add	sp, #12
   b9a5a:	bd30      	pop	{r4, r5, pc}

000b9a5c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9a5e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9a60:	4604      	mov	r4, r0
   b9a62:	4668      	mov	r0, sp
   b9a64:	f7ff fea6 	bl	b97b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9a68:	466a      	mov	r2, sp
   b9a6a:	4629      	mov	r1, r5
   b9a6c:	4620      	mov	r0, r4
   b9a6e:	f001 fd30 	bl	bb4d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9a72:	a801      	add	r0, sp, #4
   b9a74:	f7fb fb3a 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9a78:	4620      	mov	r0, r4
   b9a7a:	b003      	add	sp, #12
   b9a7c:	bd30      	pop	{r4, r5, pc}
	...

000b9a80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9a80:	b570      	push	{r4, r5, r6, lr}
   b9a82:	b08a      	sub	sp, #40	; 0x28
   b9a84:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9a86:	4601      	mov	r1, r0
   b9a88:	a804      	add	r0, sp, #16
   b9a8a:	f7ff ffc5 	bl	b9a18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9a8e:	4e14      	ldr	r6, [pc, #80]	; (b9ae0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9a90:	a804      	add	r0, sp, #16
   b9a92:	f001 fdb1 	bl	bb5f8 <_ZN5spark18JSONObjectIterator4nextEv>
   b9a96:	b1e8      	cbz	r0, b9ad4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9a98:	a904      	add	r1, sp, #16
   b9a9a:	4668      	mov	r0, sp
   b9a9c:	f7ff ffcd 	bl	b9a3a <_ZNK5spark18JSONObjectIterator4nameEv>
   b9aa0:	9802      	ldr	r0, [sp, #8]
   b9aa2:	4631      	mov	r1, r6
   b9aa4:	f7ff fe66 	bl	b9774 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9aa8:	4604      	mov	r4, r0
   b9aaa:	b110      	cbz	r0, b9ab2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9aac:	1e2c      	subs	r4, r5, #0
   b9aae:	bf18      	it	ne
   b9ab0:	2401      	movne	r4, #1
   b9ab2:	a801      	add	r0, sp, #4
   b9ab4:	f7fb fb1a 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ab8:	2c00      	cmp	r4, #0
   b9aba:	d0e9      	beq.n	b9a90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9abc:	a904      	add	r1, sp, #16
   b9abe:	4668      	mov	r0, sp
   b9ac0:	f7ff ffcc 	bl	b9a5c <_ZNK5spark18JSONObjectIterator5valueEv>
   b9ac4:	4668      	mov	r0, sp
   b9ac6:	f001 fd3a 	bl	bb53e <_ZNK5spark9JSONValue5toIntEv>
   b9aca:	6028      	str	r0, [r5, #0]
   b9acc:	a801      	add	r0, sp, #4
   b9ace:	f7fb fb0d 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9ad2:	e7dd      	b.n	b9a90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9ad4:	a805      	add	r0, sp, #20
   b9ad6:	f7fb fb09 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9ada:	b00a      	add	sp, #40	; 0x28
   b9adc:	bd70      	pop	{r4, r5, r6, pc}
   b9ade:	bf00      	nop
   b9ae0:	000bef86 	.word	0x000bef86

000b9ae4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9ae6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9ae8:	4620      	mov	r0, r4
   b9aea:	4913      	ldr	r1, [pc, #76]	; (b9b38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9aec:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9aee:	f002 fde7 	bl	bc6c0 <strcmp>
   b9af2:	b950      	cbnz	r0, b9b0a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9af4:	f001 fa68 	bl	bafc8 <_Z16_fetch_usbserialv>
   b9af8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9afc:	f001 fa54 	bl	bafa8 <_ZN9USBSerial5beginEl>
}
   b9b00:	b003      	add	sp, #12
   b9b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9b06:	f001 ba5f 	b.w	bafc8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9b0a:	490c      	ldr	r1, [pc, #48]	; (b9b3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9b0c:	4620      	mov	r0, r4
   b9b0e:	f002 fdd7 	bl	bc6c0 <strcmp>
   b9b12:	b978      	cbnz	r0, b9b34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9b14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9b18:	a901      	add	r1, sp, #4
   b9b1a:	4628      	mov	r0, r5
        int baud = 9600;
   b9b1c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9b1e:	f7ff ffaf 	bl	b9a80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9b22:	f001 fec5 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   b9b26:	9901      	ldr	r1, [sp, #4]
   b9b28:	f001 fb1a 	bl	bb160 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9b2c:	f001 fec0 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
}
   b9b30:	b003      	add	sp, #12
   b9b32:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9b34:	2000      	movs	r0, #0
   b9b36:	e7fb      	b.n	b9b30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9b38:	000bef8b 	.word	0x000bef8b
   b9b3c:	000bef92 	.word	0x000bef92

000b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9b40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9b42:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9b46:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9b48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9b4a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b4e:	42ae      	cmp	r6, r5
   b9b50:	d005      	beq.n	b9b5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9b52:	f105 0008 	add.w	r0, r5, #8
   b9b56:	f7ff fff3 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9b5a:	3514      	adds	r5, #20
   b9b5c:	e7f7      	b.n	b9b4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9b5e:	6820      	ldr	r0, [r4, #0]
   b9b60:	f7fe f822 	bl	b7ba8 <free>
}
   b9b64:	4620      	mov	r0, r4
   b9b66:	bd70      	pop	{r4, r5, r6, pc}

000b9b68 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9b68:	b510      	push	{r4, lr}
   b9b6a:	4604      	mov	r4, r0
   b9b6c:	300c      	adds	r0, #12
   b9b6e:	f7ff ffe7 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9b72:	4620      	mov	r0, r4
   b9b74:	f7fe ff01 	bl	b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9b78:	4620      	mov	r0, r4
   b9b7a:	bd10      	pop	{r4, pc}

000b9b7c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9b7c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9b7e:	4b04      	ldr	r3, [pc, #16]	; (b9b90 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9b80:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9b82:	f840 3b04 	str.w	r3, [r0], #4
   b9b86:	f7ff ffef 	bl	b9b68 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	bd10      	pop	{r4, pc}
   b9b8e:	bf00      	nop
   b9b90:	000bec50 	.word	0x000bec50

000b9b94 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9b94:	b510      	push	{r4, lr}
   b9b96:	4604      	mov	r4, r0
   b9b98:	f7ff fff0 	bl	b9b7c <_ZN5spark16StreamLogHandlerD1Ev>
   b9b9c:	4620      	mov	r0, r4
   b9b9e:	2124      	movs	r1, #36	; 0x24
   b9ba0:	f7fa fa7d 	bl	b409e <_ZdlPvj>
   b9ba4:	4620      	mov	r0, r4
   b9ba6:	bd10      	pop	{r4, pc}

000b9ba8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9ba8:	b510      	push	{r4, lr}
   b9baa:	4b03      	ldr	r3, [pc, #12]	; (b9bb8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9bac:	6003      	str	r3, [r0, #0]
   b9bae:	4604      	mov	r4, r0
   b9bb0:	f7ff ffe4 	bl	b9b7c <_ZN5spark16StreamLogHandlerD1Ev>
   b9bb4:	4620      	mov	r0, r4
   b9bb6:	bd10      	pop	{r4, pc}
   b9bb8:	000bf030 	.word	0x000bf030

000b9bbc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9bbc:	b510      	push	{r4, lr}
   b9bbe:	4604      	mov	r4, r0
   b9bc0:	f7ff fff2 	bl	b9ba8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9bc4:	4620      	mov	r0, r4
   b9bc6:	2124      	movs	r1, #36	; 0x24
   b9bc8:	f7fa fa69 	bl	b409e <_ZdlPvj>
   b9bcc:	4620      	mov	r0, r4
   b9bce:	bd10      	pop	{r4, pc}

000b9bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9bd0:	2200      	movs	r2, #0
   b9bd2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9bd6:	b510      	push	{r4, lr}
        capacity_(0) {
   b9bd8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9bda:	680c      	ldr	r4, [r1, #0]
   b9bdc:	6004      	str	r4, [r0, #0]
   b9bde:	684c      	ldr	r4, [r1, #4]
   b9be0:	6044      	str	r4, [r0, #4]
   b9be2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9be4:	600a      	str	r2, [r1, #0]
   b9be6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9be8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9bea:	608a      	str	r2, [r1, #8]
}
   b9bec:	bd10      	pop	{r4, pc}

000b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9bee:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9bf0:	6803      	ldr	r3, [r0, #0]
   b9bf2:	4604      	mov	r4, r0
   b9bf4:	6818      	ldr	r0, [r3, #0]
   b9bf6:	f7fd fd49 	bl	b768c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9bfa:	4620      	mov	r0, r4
   b9bfc:	bd10      	pop	{r4, pc}
	...

000b9c00 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c04:	b087      	sub	sp, #28
   b9c06:	4680      	mov	r8, r0
   b9c08:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9c0a:	4b1c      	ldr	r3, [pc, #112]	; (b9c7c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9c0c:	685b      	ldr	r3, [r3, #4]
   b9c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9c12:	4689      	mov	r9, r1
   b9c14:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9c16:	b96b      	cbnz	r3, b9c34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9c18:	f7ff fed0 	bl	b99bc <_ZN5spark10LogManager8instanceEv>
   b9c1c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9c1e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9c22:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9c24:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9c26:	f7ff fda3 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9c2a:	7b23      	ldrb	r3, [r4, #12]
   b9c2c:	b12b      	cbz	r3, b9c3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9c2e:	a805      	add	r0, sp, #20
   b9c30:	f7ff ffdd 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9c34:	b007      	add	sp, #28
   b9c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9c3a:	2301      	movs	r3, #1
   b9c3c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9c3e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9c42:	fa5f f989 	uxtb.w	r9, r9
   b9c46:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9c4a:	45aa      	cmp	sl, r5
   b9c4c:	d012      	beq.n	b9c74 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9c4e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9c52:	4631      	mov	r1, r6
   b9c54:	1d38      	adds	r0, r7, #4
   b9c56:	f7ff fe3d 	bl	b98d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9c5a:	4581      	cmp	r9, r0
   b9c5c:	d3f5      	bcc.n	b9c4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9c5e:	683b      	ldr	r3, [r7, #0]
   b9c60:	9a03      	ldr	r2, [sp, #12]
   b9c62:	9200      	str	r2, [sp, #0]
   b9c64:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9c68:	464a      	mov	r2, r9
   b9c6a:	4633      	mov	r3, r6
   b9c6c:	4641      	mov	r1, r8
   b9c6e:	4638      	mov	r0, r7
   b9c70:	47d8      	blx	fp
   b9c72:	e7ea      	b.n	b9c4a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9c74:	2300      	movs	r3, #0
   b9c76:	7323      	strb	r3, [r4, #12]
   b9c78:	e7d9      	b.n	b9c2e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9c7a:	bf00      	nop
   b9c7c:	e000ed00 	.word	0xe000ed00

000b9c80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c84:	469b      	mov	fp, r3
   b9c86:	4b1a      	ldr	r3, [pc, #104]	; (b9cf0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9c88:	685b      	ldr	r3, [r3, #4]
   b9c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9c8e:	4680      	mov	r8, r0
   b9c90:	4689      	mov	r9, r1
   b9c92:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9c94:	b96b      	cbnz	r3, b9cb2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9c96:	f7ff fe91 	bl	b99bc <_ZN5spark10LogManager8instanceEv>
   b9c9a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9c9c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9ca0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ca2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ca4:	f7ff fd64 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9ca8:	7b23      	ldrb	r3, [r4, #12]
   b9caa:	b12b      	cbz	r3, b9cb8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9cac:	a801      	add	r0, sp, #4
   b9cae:	f7ff ff9e 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9cb2:	b003      	add	sp, #12
   b9cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9cb8:	2301      	movs	r3, #1
   b9cba:	7323      	strb	r3, [r4, #12]
   b9cbc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9cc0:	b2f6      	uxtb	r6, r6
   b9cc2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9cc6:	4555      	cmp	r5, sl
   b9cc8:	d00e      	beq.n	b9ce8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9cca:	f855 7b04 	ldr.w	r7, [r5], #4
   b9cce:	4659      	mov	r1, fp
   b9cd0:	1d38      	adds	r0, r7, #4
   b9cd2:	f7ff fdff 	bl	b98d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9cd6:	4286      	cmp	r6, r0
   b9cd8:	d3f5      	bcc.n	b9cc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9cda:	683b      	ldr	r3, [r7, #0]
   b9cdc:	464a      	mov	r2, r9
   b9cde:	68db      	ldr	r3, [r3, #12]
   b9ce0:	4641      	mov	r1, r8
   b9ce2:	4638      	mov	r0, r7
   b9ce4:	4798      	blx	r3
   b9ce6:	e7ee      	b.n	b9cc6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9ce8:	2300      	movs	r3, #0
   b9cea:	7323      	strb	r3, [r4, #12]
   b9cec:	e7de      	b.n	b9cac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9cee:	bf00      	nop
   b9cf0:	e000ed00 	.word	0xe000ed00

000b9cf4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9cf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9cf8:	4b16      	ldr	r3, [pc, #88]	; (b9d54 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9cfa:	685b      	ldr	r3, [r3, #4]
   b9cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9d00:	4605      	mov	r5, r0
   b9d02:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9d04:	bb1b      	cbnz	r3, b9d4e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9d06:	f7ff fe59 	bl	b99bc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9d0a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9d0e:	4604      	mov	r4, r0
   b9d10:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9d12:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9d14:	f7ff fd2c 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
   b9d18:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9d1c:	2446      	movs	r4, #70	; 0x46
   b9d1e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9d22:	45b0      	cmp	r8, r6
   b9d24:	d109      	bne.n	b9d3a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9d26:	a801      	add	r0, sp, #4
   b9d28:	f7ff ff61 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9d2c:	42a5      	cmp	r5, r4
   b9d2e:	bfb4      	ite	lt
   b9d30:	2000      	movlt	r0, #0
   b9d32:	2001      	movge	r0, #1
}
   b9d34:	b002      	add	sp, #8
   b9d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9d3a:	f856 0b04 	ldr.w	r0, [r6], #4
   b9d3e:	4639      	mov	r1, r7
   b9d40:	3004      	adds	r0, #4
   b9d42:	f7ff fdc7 	bl	b98d4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9d46:	4284      	cmp	r4, r0
   b9d48:	bfa8      	it	ge
   b9d4a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9d4c:	e7e9      	b.n	b9d22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9d4e:	2000      	movs	r0, #0
   b9d50:	e7f0      	b.n	b9d34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9d52:	bf00      	nop
   b9d54:	e000ed00 	.word	0xe000ed00

000b9d58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d5a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9d5e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9d60:	4604      	mov	r4, r0
   b9d62:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d64:	db0d      	blt.n	b9d82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9d66:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9d68:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9d6a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9d6c:	dd04      	ble.n	b9d78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9d6e:	00b9      	lsls	r1, r7, #2
   b9d70:	f7fd ff22 	bl	b7bb8 <realloc>
            if (!d) {
   b9d74:	b918      	cbnz	r0, b9d7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9d78:	f7fd ff16 	bl	b7ba8 <free>
        T* d = nullptr;
   b9d7c:	2000      	movs	r0, #0
        data_ = d;
   b9d7e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9d80:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9d82:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9d84:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9d86:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9d8a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9d8c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9d90:	1d08      	adds	r0, r1, #4
   b9d92:	f002 fc1f 	bl	bc5d4 <memmove>
    new(p) T(std::move(value));
   b9d96:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9d9a:	6863      	ldr	r3, [r4, #4]
   b9d9c:	3301      	adds	r3, #1
   b9d9e:	6063      	str	r3, [r4, #4]
    return true;
   b9da0:	2001      	movs	r0, #1
   b9da2:	e7e8      	b.n	b9d76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9da6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9daa:	4604      	mov	r4, r0
   b9dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9dae:	9301      	str	r3, [sp, #4]
   b9db0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9db2:	f7ff fcdd 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9db6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9dba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9dbe:	4293      	cmp	r3, r2
   b9dc0:	4619      	mov	r1, r3
   b9dc2:	d00b      	beq.n	b9ddc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9dc4:	6809      	ldr	r1, [r1, #0]
   b9dc6:	42a9      	cmp	r1, r5
   b9dc8:	f103 0304 	add.w	r3, r3, #4
   b9dcc:	d1f7      	bne.n	b9dbe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9dce:	a801      	add	r0, sp, #4
   b9dd0:	f7ff ff0d 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9dd4:	2500      	movs	r5, #0
}
   b9dd6:	4628      	mov	r0, r5
   b9dd8:	b003      	add	sp, #12
   b9dda:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9ddc:	4629      	mov	r1, r5
   b9dde:	4620      	mov	r0, r4
   b9de0:	f7ff ffba 	bl	b9d58 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9de4:	4605      	mov	r5, r0
   b9de6:	2800      	cmp	r0, #0
   b9de8:	d0f1      	beq.n	b9dce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9dea:	6863      	ldr	r3, [r4, #4]
   b9dec:	2b01      	cmp	r3, #1
   b9dee:	d101      	bne.n	b9df4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9df0:	f7ff fe00 	bl	b99f4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9df4:	a801      	add	r0, sp, #4
   b9df6:	f7ff fefa 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9dfa:	e7ec      	b.n	b9dd6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9dfc:	b570      	push	{r4, r5, r6, lr}
   b9dfe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9e00:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9e04:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9e06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9e0a:	4282      	cmp	r2, r0
   b9e0c:	d00f      	beq.n	b9e2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9e0e:	4601      	mov	r1, r0
            if (*p == value) {
   b9e10:	681d      	ldr	r5, [r3, #0]
   b9e12:	f851 6b04 	ldr.w	r6, [r1], #4
   b9e16:	42ae      	cmp	r6, r5
   b9e18:	d107      	bne.n	b9e2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9e1a:	1a52      	subs	r2, r2, r1
   b9e1c:	f002 fbda 	bl	bc5d4 <memmove>
    --size_;
   b9e20:	6863      	ldr	r3, [r4, #4]
   b9e22:	3b01      	subs	r3, #1
   b9e24:	6063      	str	r3, [r4, #4]
    return true;
   b9e26:	2001      	movs	r0, #1
}
   b9e28:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9e2a:	4608      	mov	r0, r1
   b9e2c:	e7ed      	b.n	b9e0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9e2e:	2000      	movs	r0, #0
   b9e30:	e7fa      	b.n	b9e28 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9e32 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9e32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9e34:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9e38:	4604      	mov	r4, r0
   b9e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9e3c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9e3e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9e40:	f7ff fc96 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9e44:	a901      	add	r1, sp, #4
   b9e46:	4620      	mov	r0, r4
   b9e48:	f7ff ffd8 	bl	b9dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9e4c:	b118      	cbz	r0, b9e56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9e4e:	6863      	ldr	r3, [r4, #4]
   b9e50:	b90b      	cbnz	r3, b9e56 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9e52:	f7ff fddb 	bl	b9a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9e56:	a803      	add	r0, sp, #12
   b9e58:	f7ff fec9 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9e5c:	b004      	add	sp, #16
   b9e5e:	bd10      	pop	{r4, pc}

000b9e60 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9e60:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9e62:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9e66:	2318      	movs	r3, #24
   b9e68:	4604      	mov	r4, r0
   b9e6a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9e6e:	42ae      	cmp	r6, r5
   b9e70:	d015      	beq.n	b9e9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9e72:	f105 0110 	add.w	r1, r5, #16
   b9e76:	4620      	mov	r0, r4
   b9e78:	f7ff ffc0 	bl	b9dfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9e7c:	6863      	ldr	r3, [r4, #4]
   b9e7e:	b90b      	cbnz	r3, b9e84 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9e80:	f7ff fdc4 	bl	b9a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9e84:	69e0      	ldr	r0, [r4, #28]
   b9e86:	6929      	ldr	r1, [r5, #16]
   b9e88:	6803      	ldr	r3, [r0, #0]
   b9e8a:	68db      	ldr	r3, [r3, #12]
   b9e8c:	4798      	blx	r3
        if (h.stream) {
   b9e8e:	6969      	ldr	r1, [r5, #20]
   b9e90:	b119      	cbz	r1, b9e9a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9e92:	6a20      	ldr	r0, [r4, #32]
   b9e94:	6803      	ldr	r3, [r0, #0]
   b9e96:	68db      	ldr	r3, [r3, #12]
   b9e98:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9e9a:	3518      	adds	r5, #24
   b9e9c:	e7e7      	b.n	b9e6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9e9e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9ea2:	2618      	movs	r6, #24
   b9ea4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9ea8:	42ae      	cmp	r6, r5
   b9eaa:	d004      	beq.n	b9eb6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9eac:	4628      	mov	r0, r5
   b9eae:	f7fe f8d1 	bl	b8054 <_ZN6StringD1Ev>
   b9eb2:	3518      	adds	r5, #24
   b9eb4:	e7f8      	b.n	b9ea8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9eb6:	2300      	movs	r3, #0
   b9eb8:	6163      	str	r3, [r4, #20]
}
   b9eba:	bd70      	pop	{r4, r5, r6, pc}

000b9ebc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9ebe:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9ec0:	f7ff fda4 	bl	b9a0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9ec4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9eca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ecc:	f7ff fc50 	bl	b9770 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9ed0:	4620      	mov	r0, r4
   b9ed2:	f7ff ffc5 	bl	b9e60 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9ed6:	a801      	add	r0, sp, #4
   b9ed8:	f7ff fe89 	bl	b9bee <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9edc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9ede:	b108      	cbz	r0, b9ee4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9ee0:	f7fd fbc4 	bl	b766c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9ee4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9ee8:	2618      	movs	r6, #24
   b9eea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9eee:	42ae      	cmp	r6, r5
   b9ef0:	d004      	beq.n	b9efc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9ef2:	4628      	mov	r0, r5
   b9ef4:	f7fe f8ae 	bl	b8054 <_ZN6StringD1Ev>
   b9ef8:	3518      	adds	r5, #24
   b9efa:	e7f8      	b.n	b9eee <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9efc:	6920      	ldr	r0, [r4, #16]
   b9efe:	f7fd fe53 	bl	b7ba8 <free>
   b9f02:	6820      	ldr	r0, [r4, #0]
   b9f04:	f7fd fe50 	bl	b7ba8 <free>
}
   b9f08:	4620      	mov	r0, r4
   b9f0a:	b002      	add	sp, #8
   b9f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9f10 <__tcf_2>:
    static LogManager mgr;
   b9f10:	4801      	ldr	r0, [pc, #4]	; (b9f18 <__tcf_2+0x8>)
   b9f12:	f7ff bfd3 	b.w	b9ebc <_ZN5spark10LogManagerD1Ev>
   b9f16:	bf00      	nop
   b9f18:	2003e654 	.word	0x2003e654

000b9f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9f1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f20:	4604      	mov	r4, r0
   b9f22:	460d      	mov	r5, r1
   b9f24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9f26:	d915      	bls.n	b9f54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9f28:	4290      	cmp	r0, r2
   b9f2a:	d214      	bcs.n	b9f56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9f2c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9f30:	1a75      	subs	r5, r6, r1
   b9f32:	f1a1 0714 	sub.w	r7, r1, #20
   b9f36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9f38:	42b7      	cmp	r7, r6
   b9f3a:	d01a      	beq.n	b9f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9f3c:	b11c      	cbz	r4, b9f46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9f3e:	4631      	mov	r1, r6
   b9f40:	4620      	mov	r0, r4
   b9f42:	f7ff fc78 	bl	b9836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9f46:	f106 0008 	add.w	r0, r6, #8
   b9f4a:	f7ff fdf9 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9f4e:	3e14      	subs	r6, #20
   b9f50:	3c14      	subs	r4, #20
   b9f52:	e7f1      	b.n	b9f38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9f54:	d00d      	beq.n	b9f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9f56:	42b5      	cmp	r5, r6
   b9f58:	d00b      	beq.n	b9f72 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9f5a:	b11c      	cbz	r4, b9f64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9f5c:	4629      	mov	r1, r5
   b9f5e:	4620      	mov	r0, r4
   b9f60:	f7ff fc69 	bl	b9836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9f64:	f105 0008 	add.w	r0, r5, #8
   b9f68:	f7ff fdea 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9f6c:	3514      	adds	r5, #20
   b9f6e:	3414      	adds	r4, #20
   b9f70:	e7f1      	b.n	b9f56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9f74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f78:	4604      	mov	r4, r0
   b9f7a:	460d      	mov	r5, r1
   b9f7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9f7e:	d914      	bls.n	b9faa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9f80:	4290      	cmp	r0, r2
   b9f82:	d213      	bcs.n	b9fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9f84:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9f88:	1a75      	subs	r5, r6, r1
   b9f8a:	f1a1 0710 	sub.w	r7, r1, #16
   b9f8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9f90:	42b7      	cmp	r7, r6
   b9f92:	d018      	beq.n	b9fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9f94:	b11c      	cbz	r4, b9f9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9f96:	4631      	mov	r1, r6
   b9f98:	4620      	mov	r0, r4
   b9f9a:	f7fe f8d7 	bl	b814c <_ZN6StringC1EOS_>
                end->~T();
   b9f9e:	4630      	mov	r0, r6
   b9fa0:	f7fe f858 	bl	b8054 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9fa4:	3e10      	subs	r6, #16
   b9fa6:	3c10      	subs	r4, #16
   b9fa8:	e7f2      	b.n	b9f90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9faa:	d00c      	beq.n	b9fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9fac:	42b5      	cmp	r5, r6
   b9fae:	d00a      	beq.n	b9fc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9fb0:	b11c      	cbz	r4, b9fba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9fb2:	4629      	mov	r1, r5
   b9fb4:	4620      	mov	r0, r4
   b9fb6:	f7fe f8c9 	bl	b814c <_ZN6StringC1EOS_>
                p->~T();
   b9fba:	4628      	mov	r0, r5
   b9fbc:	f7fe f84a 	bl	b8054 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9fc0:	3510      	adds	r5, #16
   b9fc2:	3410      	adds	r4, #16
   b9fc4:	e7f2      	b.n	b9fac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9fc8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9fca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9fcc:	4605      	mov	r5, r0
        if (n > 0) {
   b9fce:	dd11      	ble.n	b9ff4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9fd0:	0130      	lsls	r0, r6, #4
   b9fd2:	f7fd fde1 	bl	b7b98 <malloc>
            if (!d) {
   b9fd6:	4604      	mov	r4, r0
   b9fd8:	b158      	cbz	r0, b9ff2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9fda:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9fde:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9fe2:	f7ff ffc7 	bl	b9f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9fe6:	6828      	ldr	r0, [r5, #0]
   b9fe8:	f7fd fdde 	bl	b7ba8 <free>
        data_ = d;
   b9fec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9fee:	60ae      	str	r6, [r5, #8]
        return true;
   b9ff0:	2001      	movs	r0, #1
    }
   b9ff2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9ff4:	2400      	movs	r4, #0
   b9ff6:	e7f6      	b.n	b9fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ffc:	4690      	mov	r8, r2
   b9ffe:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba000:	2300      	movs	r3, #0
   ba002:	9103      	str	r1, [sp, #12]
    return size_;
   ba004:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba008:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba00a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba00c:	4299      	cmp	r1, r3
        capacity_(0) {
   ba00e:	e9c0 3300 	strd	r3, r3, [r0]
   ba012:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba016:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba01a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba01e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba020:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba022:	dc23      	bgt.n	ba06c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba024:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba028:	2314      	movs	r3, #20
   ba02a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba02e:	42af      	cmp	r7, r5
   ba030:	d03b      	beq.n	ba0aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba032:	4629      	mov	r1, r5
   ba034:	a80b      	add	r0, sp, #44	; 0x2c
   ba036:	f7fe f889 	bl	b814c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba03a:	a90b      	add	r1, sp, #44	; 0x2c
   ba03c:	a80f      	add	r0, sp, #60	; 0x3c
   ba03e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba040:	f7fe f884 	bl	b814c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba044:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba048:	4299      	cmp	r1, r3
   ba04a:	da1b      	bge.n	ba084 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba04c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba050:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba054:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba058:	4631      	mov	r1, r6
   ba05a:	f106 0010 	add.w	r0, r6, #16
   ba05e:	f7ff ff89 	bl	b9f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba062:	b9ee      	cbnz	r6, ba0a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba064:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba066:	3301      	adds	r3, #1
   ba068:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba06a:	e011      	b.n	ba090 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba06c:	a808      	add	r0, sp, #32
   ba06e:	f7ff ffab 	bl	b9fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba072:	2800      	cmp	r0, #0
   ba074:	d1d6      	bne.n	ba024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba076:	a808      	add	r0, sp, #32
   ba078:	f7fe fc7f 	bl	b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba07c:	4620      	mov	r0, r4
   ba07e:	b015      	add	sp, #84	; 0x54
   ba080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba084:	3101      	adds	r1, #1
   ba086:	a808      	add	r0, sp, #32
   ba088:	f7ff ff9e 	bl	b9fc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba08c:	2800      	cmp	r0, #0
   ba08e:	d1dd      	bne.n	ba04c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba090:	a80f      	add	r0, sp, #60	; 0x3c
   ba092:	f7fd ffdf 	bl	b8054 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba096:	a80b      	add	r0, sp, #44	; 0x2c
   ba098:	f7fd ffdc 	bl	b8054 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba09c:	3514      	adds	r5, #20
   ba09e:	e7c6      	b.n	ba02e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba0a0:	a90f      	add	r1, sp, #60	; 0x3c
   ba0a2:	4630      	mov	r0, r6
   ba0a4:	f7fe f852 	bl	b814c <_ZN6StringC1EOS_>
   ba0a8:	e7dc      	b.n	ba064 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba0aa:	2600      	movs	r6, #0
   ba0ac:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba0b0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba0b2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba0b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba0ba:	429e      	cmp	r6, r3
   ba0bc:	da7c      	bge.n	ba1b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba0be:	0133      	lsls	r3, r6, #4
   ba0c0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba0c2:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba0c4:	b90b      	cbnz	r3, ba0ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba0c6:	3601      	adds	r6, #1
   ba0c8:	e7f5      	b.n	ba0b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba0ca:	2300      	movs	r3, #0
   ba0cc:	9307      	str	r3, [sp, #28]
   ba0ce:	fb09 f306 	mul.w	r3, r9, r6
   ba0d2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba0d4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba0d6:	a907      	add	r1, sp, #28
   ba0d8:	a806      	add	r0, sp, #24
   ba0da:	f7ff fb22 	bl	b9722 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba0de:	4682      	mov	sl, r0
   ba0e0:	2800      	cmp	r0, #0
   ba0e2:	d0f0      	beq.n	ba0c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba0e4:	f04f 0300 	mov.w	r3, #0
   ba0e8:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0ec:	4601      	mov	r1, r0
   ba0ee:	9a07      	ldr	r2, [sp, #28]
   ba0f0:	f10d 0317 	add.w	r3, sp, #23
   ba0f4:	4628      	mov	r0, r5
   ba0f6:	f7ff fbb1 	bl	b985c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba0fa:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba0fe:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba100:	2f00      	cmp	r7, #0
   ba102:	d14a      	bne.n	ba19a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba104:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba108:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba10c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba110:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba114:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba118:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba11c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba11e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba122:	4293      	cmp	r3, r2
   ba124:	db17      	blt.n	ba156 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba126:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba12a:	f1ba 0f00 	cmp.w	sl, #0
   ba12e:	dd30      	ble.n	ba192 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba130:	fb09 f00a 	mul.w	r0, r9, sl
   ba134:	f7fd fd30 	bl	b7b98 <malloc>
            if (!d) {
   ba138:	4683      	mov	fp, r0
   ba13a:	b360      	cbz	r0, ba196 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba13c:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba140:	fb09 1202 	mla	r2, r9, r2, r1
   ba144:	f7ff feea 	bl	b9f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba148:	6828      	ldr	r0, [r5, #0]
   ba14a:	f7fd fd2d 	bl	b7ba8 <free>
        data_ = d;
   ba14e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba152:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba156:	682b      	ldr	r3, [r5, #0]
   ba158:	9a01      	ldr	r2, [sp, #4]
   ba15a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba15e:	686a      	ldr	r2, [r5, #4]
   ba160:	4651      	mov	r1, sl
   ba162:	fb09 3202 	mla	r2, r9, r2, r3
   ba166:	f10a 0014 	add.w	r0, sl, #20
   ba16a:	f7ff fed7 	bl	b9f1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba16e:	f1ba 0f00 	cmp.w	sl, #0
   ba172:	d003      	beq.n	ba17c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba174:	a90f      	add	r1, sp, #60	; 0x3c
   ba176:	4650      	mov	r0, sl
   ba178:	f7ff fb5d 	bl	b9836 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba17c:	686b      	ldr	r3, [r5, #4]
   ba17e:	3301      	adds	r3, #1
   ba180:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba182:	a811      	add	r0, sp, #68	; 0x44
   ba184:	f7ff fcdc 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba188:	b13f      	cbz	r7, ba19a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba18a:	a80b      	add	r0, sp, #44	; 0x2c
   ba18c:	f7ff fcd8 	bl	b9b40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba190:	e771      	b.n	ba076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba192:	46bb      	mov	fp, r7
   ba194:	e7d8      	b.n	ba148 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba196:	2701      	movs	r7, #1
   ba198:	e7f3      	b.n	ba182 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba19a:	9b01      	ldr	r3, [sp, #4]
   ba19c:	682d      	ldr	r5, [r5, #0]
   ba19e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba1a2:	9b06      	ldr	r3, [sp, #24]
   ba1a4:	781b      	ldrb	r3, [r3, #0]
   ba1a6:	b92b      	cbnz	r3, ba1b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba1a8:	f8d8 3000 	ldr.w	r3, [r8]
   ba1ac:	9a02      	ldr	r2, [sp, #8]
   ba1ae:	4413      	add	r3, r2
   ba1b0:	7c1b      	ldrb	r3, [r3, #16]
   ba1b2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba1b4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba1b6:	e78e      	b.n	ba0d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1b8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba1ba:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1bc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba1be:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1c0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba1c2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba1c6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1c8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba1ca:	60a2      	str	r2, [r4, #8]
   ba1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba1ce:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1d0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba1d2:	60e2      	str	r2, [r4, #12]
   ba1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba1d6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba1d8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba1da:	6122      	str	r2, [r4, #16]
   ba1dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba1de:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba1e0:	9b03      	ldr	r3, [sp, #12]
   ba1e2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba1e4:	6162      	str	r2, [r4, #20]
   ba1e6:	7623      	strb	r3, [r4, #24]
   ba1e8:	e7cf      	b.n	ba18a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba1ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba1ee:	4604      	mov	r4, r0
   ba1f0:	b087      	sub	sp, #28
   ba1f2:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba1f4:	4626      	mov	r6, r4
        stream_(&stream) {
   ba1f6:	4619      	mov	r1, r3
   ba1f8:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba1fa:	4617      	mov	r7, r2
        stream_(&stream) {
   ba1fc:	f7fb fb24 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba200:	4b0b      	ldr	r3, [pc, #44]	; (ba230 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba202:	f846 3b04 	str.w	r3, [r6], #4
   ba206:	4669      	mov	r1, sp
   ba208:	a803      	add	r0, sp, #12
   ba20a:	f7fb fb1d 	bl	b5848 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba20e:	aa03      	add	r2, sp, #12
   ba210:	4639      	mov	r1, r7
   ba212:	4630      	mov	r0, r6
   ba214:	f7ff fef0 	bl	b9ff8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba218:	a803      	add	r0, sp, #12
   ba21a:	f7fb f8cf 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba21e:	4668      	mov	r0, sp
   ba220:	f7fb f8cc 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba224:	4b03      	ldr	r3, [pc, #12]	; (ba234 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba226:	6023      	str	r3, [r4, #0]
}
   ba228:	4620      	mov	r0, r4
        stream_(&stream) {
   ba22a:	6225      	str	r5, [r4, #32]
}
   ba22c:	b007      	add	sp, #28
   ba22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba230:	000bec50 	.word	0x000bec50
   ba234:	000bf018 	.word	0x000bf018

000ba238 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba238:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba23a:	460f      	mov	r7, r1
   ba23c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba23e:	491d      	ldr	r1, [pc, #116]	; (ba2b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba240:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba242:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba244:	4616      	mov	r6, r2
   ba246:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba248:	f002 fa3a 	bl	bc6c0 <strcmp>
   ba24c:	b9c0      	cbnz	r0, ba280 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba24e:	b1a4      	cbz	r4, ba27a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba250:	4629      	mov	r1, r5
   ba252:	a801      	add	r0, sp, #4
   ba254:	f7ff fcbc 	bl	b9bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba258:	4917      	ldr	r1, [pc, #92]	; (ba2b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba25a:	2024      	movs	r0, #36	; 0x24
   ba25c:	f001 fb88 	bl	bb970 <_ZnwjRKSt9nothrow_t>
   ba260:	4605      	mov	r5, r0
   ba262:	b130      	cbz	r0, ba272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba264:	ab01      	add	r3, sp, #4
   ba266:	4632      	mov	r2, r6
   ba268:	4621      	mov	r1, r4
   ba26a:	f7ff ffbf 	bl	ba1ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba26e:	4b13      	ldr	r3, [pc, #76]	; (ba2bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba270:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba272:	a801      	add	r0, sp, #4
   ba274:	f7fb f8a2 	bl	b53bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba278:	462c      	mov	r4, r5
}
   ba27a:	4620      	mov	r0, r4
   ba27c:	b005      	add	sp, #20
   ba27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba280:	490f      	ldr	r1, [pc, #60]	; (ba2c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba282:	4638      	mov	r0, r7
   ba284:	f002 fa1c 	bl	bc6c0 <strcmp>
   ba288:	b990      	cbnz	r0, ba2b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba28a:	2c00      	cmp	r4, #0
   ba28c:	d0f5      	beq.n	ba27a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba28e:	4629      	mov	r1, r5
   ba290:	a801      	add	r0, sp, #4
   ba292:	f7ff fc9d 	bl	b9bd0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba296:	4908      	ldr	r1, [pc, #32]	; (ba2b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba298:	2024      	movs	r0, #36	; 0x24
   ba29a:	f001 fb69 	bl	bb970 <_ZnwjRKSt9nothrow_t>
   ba29e:	4605      	mov	r5, r0
   ba2a0:	2800      	cmp	r0, #0
   ba2a2:	d0e6      	beq.n	ba272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba2a4:	ab01      	add	r3, sp, #4
   ba2a6:	4632      	mov	r2, r6
   ba2a8:	4621      	mov	r1, r4
   ba2aa:	f7ff ff9f 	bl	ba1ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba2ae:	e7e0      	b.n	ba272 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba2b0:	2400      	movs	r4, #0
   ba2b2:	e7e2      	b.n	ba27a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba2b4:	000bef9a 	.word	0x000bef9a
   ba2b8:	000bf1c5 	.word	0x000bf1c5
   ba2bc:	000bf030 	.word	0x000bf030
   ba2c0:	000bef9e 	.word	0x000bef9e

000ba2c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba2c4:	4b01      	ldr	r3, [pc, #4]	; (ba2cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba2c6:	4a02      	ldr	r2, [pc, #8]	; (ba2d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba2c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba2ca:	4770      	bx	lr
   ba2cc:	2003e650 	.word	0x2003e650
   ba2d0:	000befaf 	.word	0x000befaf

000ba2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba2d8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba2da:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba2de:	4604      	mov	r4, r0
   ba2e0:	460e      	mov	r6, r1
   ba2e2:	4617      	mov	r7, r2
   ba2e4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba2e6:	f000 fe6f 	bl	bafc8 <_Z16_fetch_usbserialv>
   ba2ea:	4581      	cmp	r9, r0
   ba2ec:	d04c      	beq.n	ba388 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba2ee:	792b      	ldrb	r3, [r5, #4]
   ba2f0:	0719      	lsls	r1, r3, #28
   ba2f2:	d504      	bpl.n	ba2fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba2f4:	696a      	ldr	r2, [r5, #20]
   ba2f6:	4954      	ldr	r1, [pc, #336]	; (ba448 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba2f8:	4620      	mov	r0, r4
   ba2fa:	f7ff fa8d 	bl	b9818 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba2fe:	f1b8 0f00 	cmp.w	r8, #0
   ba302:	d00d      	beq.n	ba320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba304:	215b      	movs	r1, #91	; 0x5b
   ba306:	4620      	mov	r0, r4
   ba308:	f7ff fa7a 	bl	b9800 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba30c:	4641      	mov	r1, r8
   ba30e:	4620      	mov	r0, r4
   ba310:	f7ff fa67 	bl	b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba314:	6823      	ldr	r3, [r4, #0]
   ba316:	494d      	ldr	r1, [pc, #308]	; (ba44c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba318:	68db      	ldr	r3, [r3, #12]
   ba31a:	2202      	movs	r2, #2
   ba31c:	4620      	mov	r0, r4
   ba31e:	4798      	blx	r3
    if (attr.has_file) {
   ba320:	792b      	ldrb	r3, [r5, #4]
   ba322:	07da      	lsls	r2, r3, #31
   ba324:	d523      	bpl.n	ba36e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba326:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba32a:	212f      	movs	r1, #47	; 0x2f
   ba32c:	4640      	mov	r0, r8
   ba32e:	f002 fa31 	bl	bc794 <strrchr>
    if (s1) {
   ba332:	b108      	cbz	r0, ba338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba334:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba338:	4641      	mov	r1, r8
   ba33a:	4620      	mov	r0, r4
   ba33c:	f7ff fa51 	bl	b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba340:	792b      	ldrb	r3, [r5, #4]
   ba342:	079b      	lsls	r3, r3, #30
   ba344:	d508      	bpl.n	ba358 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba346:	213a      	movs	r1, #58	; 0x3a
   ba348:	4620      	mov	r0, r4
   ba34a:	f7ff fa59 	bl	b9800 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba34e:	68ea      	ldr	r2, [r5, #12]
   ba350:	493f      	ldr	r1, [pc, #252]	; (ba450 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba352:	4620      	mov	r0, r4
   ba354:	f7ff fa60 	bl	b9818 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba358:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba35a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba35c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba360:	68db      	ldr	r3, [r3, #12]
   ba362:	bf14      	ite	ne
   ba364:	493b      	ldrne	r1, [pc, #236]	; (ba454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba366:	493c      	ldreq	r1, [pc, #240]	; (ba458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba368:	2202      	movs	r2, #2
            write(": ", 2);
   ba36a:	4620      	mov	r0, r4
   ba36c:	4798      	blx	r3
    if (attr.has_function) {
   ba36e:	792b      	ldrb	r3, [r5, #4]
   ba370:	0758      	lsls	r0, r3, #29
   ba372:	d51d      	bpl.n	ba3b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba374:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba376:	460b      	mov	r3, r1
   ba378:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba37a:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba37e:	b160      	cbz	r0, ba39a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba380:	2820      	cmp	r0, #32
   ba382:	d108      	bne.n	ba396 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba384:	4619      	mov	r1, r3
   ba386:	e7f7      	b.n	ba378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba388:	4834      	ldr	r0, [pc, #208]	; (ba45c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba38a:	f000 ffb9 	bl	bb300 <_ZN5spark12NetworkClass9listeningEv>
   ba38e:	2800      	cmp	r0, #0
   ba390:	d0ad      	beq.n	ba2ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba396:	2828      	cmp	r0, #40	; 0x28
   ba398:	d1ee      	bne.n	ba378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba39a:	6823      	ldr	r3, [r4, #0]
   ba39c:	1a52      	subs	r2, r2, r1
   ba39e:	68db      	ldr	r3, [r3, #12]
   ba3a0:	4620      	mov	r0, r4
   ba3a2:	4798      	blx	r3
        write("(): ", 4);
   ba3a4:	6823      	ldr	r3, [r4, #0]
   ba3a6:	492e      	ldr	r1, [pc, #184]	; (ba460 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba3a8:	68db      	ldr	r3, [r3, #12]
   ba3aa:	2204      	movs	r2, #4
   ba3ac:	4620      	mov	r0, r4
   ba3ae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba3b0:	2100      	movs	r1, #0
   ba3b2:	4638      	mov	r0, r7
   ba3b4:	f7fd fafa 	bl	b79ac <log_level_name>
   ba3b8:	4601      	mov	r1, r0
    write(s);
   ba3ba:	4620      	mov	r0, r4
   ba3bc:	f7ff fa11 	bl	b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba3c0:	6823      	ldr	r3, [r4, #0]
   ba3c2:	4925      	ldr	r1, [pc, #148]	; (ba458 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba3c4:	68db      	ldr	r3, [r3, #12]
   ba3c6:	2202      	movs	r2, #2
   ba3c8:	4620      	mov	r0, r4
   ba3ca:	4798      	blx	r3
    if (msg) {
   ba3cc:	b11e      	cbz	r6, ba3d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba3ce:	4631      	mov	r1, r6
   ba3d0:	4620      	mov	r0, r4
   ba3d2:	f7ff fa06 	bl	b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba3d6:	792b      	ldrb	r3, [r5, #4]
   ba3d8:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba3dc:	d02c      	beq.n	ba438 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba3de:	6823      	ldr	r3, [r4, #0]
   ba3e0:	4920      	ldr	r1, [pc, #128]	; (ba464 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba3e2:	68db      	ldr	r3, [r3, #12]
   ba3e4:	2202      	movs	r2, #2
   ba3e6:	4620      	mov	r0, r4
   ba3e8:	4798      	blx	r3
        if (attr.has_code) {
   ba3ea:	792b      	ldrb	r3, [r5, #4]
   ba3ec:	06d9      	lsls	r1, r3, #27
   ba3ee:	d50a      	bpl.n	ba406 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba3f0:	6823      	ldr	r3, [r4, #0]
   ba3f2:	491d      	ldr	r1, [pc, #116]	; (ba468 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba3f4:	68db      	ldr	r3, [r3, #12]
   ba3f6:	2207      	movs	r2, #7
   ba3f8:	4620      	mov	r0, r4
   ba3fa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba3fc:	69aa      	ldr	r2, [r5, #24]
   ba3fe:	491b      	ldr	r1, [pc, #108]	; (ba46c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba400:	4620      	mov	r0, r4
   ba402:	f7ff fa09 	bl	b9818 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba406:	792b      	ldrb	r3, [r5, #4]
   ba408:	069a      	lsls	r2, r3, #26
   ba40a:	d511      	bpl.n	ba430 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba40c:	06db      	lsls	r3, r3, #27
   ba40e:	d505      	bpl.n	ba41c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba410:	6823      	ldr	r3, [r4, #0]
   ba412:	4910      	ldr	r1, [pc, #64]	; (ba454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba414:	68db      	ldr	r3, [r3, #12]
   ba416:	2202      	movs	r2, #2
   ba418:	4620      	mov	r0, r4
   ba41a:	4798      	blx	r3
            write("details = ", 10);
   ba41c:	6823      	ldr	r3, [r4, #0]
   ba41e:	4914      	ldr	r1, [pc, #80]	; (ba470 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba420:	68db      	ldr	r3, [r3, #12]
   ba422:	4620      	mov	r0, r4
   ba424:	220a      	movs	r2, #10
   ba426:	4798      	blx	r3
            write(attr.details);
   ba428:	69e9      	ldr	r1, [r5, #28]
   ba42a:	4620      	mov	r0, r4
   ba42c:	f7ff f9d9 	bl	b97e2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba430:	215d      	movs	r1, #93	; 0x5d
   ba432:	4620      	mov	r0, r4
   ba434:	f7ff f9e4 	bl	b9800 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba438:	6823      	ldr	r3, [r4, #0]
   ba43a:	490e      	ldr	r1, [pc, #56]	; (ba474 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba43c:	68db      	ldr	r3, [r3, #12]
   ba43e:	4620      	mov	r0, r4
   ba440:	2202      	movs	r2, #2
}
   ba442:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba446:	4718      	bx	r3
   ba448:	000befb3 	.word	0x000befb3
   ba44c:	000befba 	.word	0x000befba
   ba450:	000be88c 	.word	0x000be88c
   ba454:	000befbd 	.word	0x000befbd
   ba458:	000befc2 	.word	0x000befc2
   ba45c:	2003e720 	.word	0x2003e720
   ba460:	000befc0 	.word	0x000befc0
   ba464:	000befc5 	.word	0x000befc5
   ba468:	000befc8 	.word	0x000befc8
   ba46c:	000befd0 	.word	0x000befd0
   ba470:	000befd3 	.word	0x000befd3
   ba474:	000befde 	.word	0x000befde

000ba478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba47c:	b085      	sub	sp, #20
    return stream_;
   ba47e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba482:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba484:	4605      	mov	r5, r0
   ba486:	460f      	mov	r7, r1
   ba488:	4690      	mov	r8, r2
   ba48a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba48c:	f000 fd9c 	bl	bafc8 <_Z16_fetch_usbserialv>
   ba490:	4581      	cmp	r9, r0
   ba492:	d105      	bne.n	ba4a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba494:	4849      	ldr	r0, [pc, #292]	; (ba5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba496:	f000 ff33 	bl	bb300 <_ZN5spark12NetworkClass9listeningEv>
   ba49a:	2800      	cmp	r0, #0
   ba49c:	f040 808a 	bne.w	ba5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba4a0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba4a2:	4a47      	ldr	r2, [pc, #284]	; (ba5c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba4a4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba4a6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba4aa:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba4ac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba4ae:	f88d 9008 	strb.w	r9, [sp, #8]
   ba4b2:	f001 f8ca 	bl	bb64a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba4b6:	4649      	mov	r1, r9
   ba4b8:	4640      	mov	r0, r8
   ba4ba:	f7fd fa77 	bl	b79ac <log_level_name>
    json.name("l", 1).value(s);
   ba4be:	4941      	ldr	r1, [pc, #260]	; (ba5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba4c0:	4680      	mov	r8, r0
   ba4c2:	2201      	movs	r2, #1
   ba4c4:	a801      	add	r0, sp, #4
   ba4c6:	f001 f94f 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba4ca:	4641      	mov	r1, r8
   ba4cc:	f7ff f97b 	bl	b97c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba4d0:	b13f      	cbz	r7, ba4e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba4d2:	493d      	ldr	r1, [pc, #244]	; (ba5c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba4d4:	2201      	movs	r2, #1
   ba4d6:	a801      	add	r0, sp, #4
   ba4d8:	f001 f946 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba4dc:	4639      	mov	r1, r7
   ba4de:	f7ff f972 	bl	b97c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba4e2:	b13e      	cbz	r6, ba4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba4e4:	4939      	ldr	r1, [pc, #228]	; (ba5cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba4e6:	2201      	movs	r2, #1
   ba4e8:	a801      	add	r0, sp, #4
   ba4ea:	f001 f93d 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba4ee:	4631      	mov	r1, r6
   ba4f0:	f7ff f969 	bl	b97c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba4f4:	7923      	ldrb	r3, [r4, #4]
   ba4f6:	07df      	lsls	r7, r3, #31
   ba4f8:	d50e      	bpl.n	ba518 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba4fa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba4fc:	212f      	movs	r1, #47	; 0x2f
   ba4fe:	4630      	mov	r0, r6
   ba500:	f002 f948 	bl	bc794 <strrchr>
    if (s1) {
   ba504:	b100      	cbz	r0, ba508 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba506:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba508:	4931      	ldr	r1, [pc, #196]	; (ba5d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba50a:	2201      	movs	r2, #1
   ba50c:	a801      	add	r0, sp, #4
   ba50e:	f001 f92b 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba512:	4631      	mov	r1, r6
   ba514:	f7ff f957 	bl	b97c6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba518:	7923      	ldrb	r3, [r4, #4]
   ba51a:	079e      	lsls	r6, r3, #30
   ba51c:	d507      	bpl.n	ba52e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba51e:	492d      	ldr	r1, [pc, #180]	; (ba5d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba520:	2202      	movs	r2, #2
   ba522:	a801      	add	r0, sp, #4
   ba524:	f001 f920 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba528:	68e1      	ldr	r1, [r4, #12]
   ba52a:	f001 f89b 	bl	bb664 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba52e:	7923      	ldrb	r3, [r4, #4]
   ba530:	0758      	lsls	r0, r3, #29
   ba532:	d514      	bpl.n	ba55e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba534:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba536:	4633      	mov	r3, r6
   ba538:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba53a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba53e:	b12a      	cbz	r2, ba54c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba540:	2a20      	cmp	r2, #32
   ba542:	d101      	bne.n	ba548 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba544:	461e      	mov	r6, r3
   ba546:	e7f7      	b.n	ba538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba548:	2a28      	cmp	r2, #40	; 0x28
   ba54a:	d1f5      	bne.n	ba538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba54c:	4922      	ldr	r1, [pc, #136]	; (ba5d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba54e:	2202      	movs	r2, #2
   ba550:	a801      	add	r0, sp, #4
   ba552:	f001 f909 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba556:	1bba      	subs	r2, r7, r6
   ba558:	4631      	mov	r1, r6
   ba55a:	f001 f915 	bl	bb788 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba55e:	7923      	ldrb	r3, [r4, #4]
   ba560:	0719      	lsls	r1, r3, #28
   ba562:	d507      	bpl.n	ba574 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba564:	491d      	ldr	r1, [pc, #116]	; (ba5dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba566:	2201      	movs	r2, #1
   ba568:	a801      	add	r0, sp, #4
   ba56a:	f001 f8fd 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba56e:	6961      	ldr	r1, [r4, #20]
   ba570:	f001 f88a 	bl	bb688 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba574:	7923      	ldrb	r3, [r4, #4]
   ba576:	06da      	lsls	r2, r3, #27
   ba578:	d508      	bpl.n	ba58c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba57a:	2204      	movs	r2, #4
   ba57c:	4918      	ldr	r1, [pc, #96]	; (ba5e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba57e:	eb0d 0002 	add.w	r0, sp, r2
   ba582:	f001 f8f1 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba586:	69a1      	ldr	r1, [r4, #24]
   ba588:	f001 f86c 	bl	bb664 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba58c:	7923      	ldrb	r3, [r4, #4]
   ba58e:	069b      	lsls	r3, r3, #26
   ba590:	d507      	bpl.n	ba5a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba592:	4914      	ldr	r1, [pc, #80]	; (ba5e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba594:	2206      	movs	r2, #6
   ba596:	a801      	add	r0, sp, #4
   ba598:	f001 f8e6 	bl	bb768 <_ZN5spark10JSONWriter4nameEPKcj>
   ba59c:	69e1      	ldr	r1, [r4, #28]
   ba59e:	f7ff f912 	bl	b97c6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba5a2:	a801      	add	r0, sp, #4
   ba5a4:	f001 f83b 	bl	bb61e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba5a8:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba5aa:	490f      	ldr	r1, [pc, #60]	; (ba5e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba5ac:	6803      	ldr	r3, [r0, #0]
   ba5ae:	2202      	movs	r2, #2
   ba5b0:	68db      	ldr	r3, [r3, #12]
   ba5b2:	4798      	blx	r3
}
   ba5b4:	b005      	add	sp, #20
   ba5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba5ba:	bf00      	nop
   ba5bc:	2003e720 	.word	0x2003e720
   ba5c0:	000bf000 	.word	0x000bf000
   ba5c4:	000bef90 	.word	0x000bef90
   ba5c8:	000befe1 	.word	0x000befe1
   ba5cc:	000bf5d8 	.word	0x000bf5d8
   ba5d0:	000be9d0 	.word	0x000be9d0
   ba5d4:	000befe3 	.word	0x000befe3
   ba5d8:	000befe6 	.word	0x000befe6
   ba5dc:	000beb17 	.word	0x000beb17
   ba5e0:	000befe9 	.word	0x000befe9
   ba5e4:	000befee 	.word	0x000befee
   ba5e8:	000befde 	.word	0x000befde

000ba5ec <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba5f0:	4a15      	ldr	r2, [pc, #84]	; (ba648 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba5f2:	f8df 8060 	ldr.w	r8, [pc, #96]	; ba654 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba5f6:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba5fa:	1980      	adds	r0, r0, r6
   ba5fc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba600:	4b12      	ldr	r3, [pc, #72]	; (ba64c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba602:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba606:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba60a:	1986      	adds	r6, r0, r6
   ba60c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba610:	42bb      	cmp	r3, r7
   ba612:	bf08      	it	eq
   ba614:	42b2      	cmpeq	r2, r6
{
   ba616:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba618:	d013      	beq.n	ba642 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba61a:	a903      	add	r1, sp, #12
   ba61c:	4668      	mov	r0, sp
   ba61e:	e9cd 6700 	strd	r6, r7, [sp]
   ba622:	f7fd fb11 	bl	b7c48 <localtime_r>
	calendar_time.tm_year += 1900;
   ba626:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba628:	4d09      	ldr	r5, [pc, #36]	; (ba650 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba62a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba62e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba630:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba63a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba63e:	6823      	ldr	r3, [r4, #0]
   ba640:	602b      	str	r3, [r5, #0]
    }
}
   ba642:	b00c      	add	sp, #48	; 0x30
   ba644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba648:	2003e6b0 	.word	0x2003e6b0
   ba64c:	2003e6a8 	.word	0x2003e6a8
   ba650:	2003e680 	.word	0x2003e680
   ba654:	2003e6b8 	.word	0x2003e6b8

000ba658 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   ba658:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba65a:	2000      	movs	r0, #0
   ba65c:	f7fd fa8c 	bl	b7b78 <spark_sync_time_pending>
   ba660:	b128      	cbz	r0, ba66e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba662:	f7fd fa71 	bl	b7b48 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba666:	f080 0001 	eor.w	r0, r0, #1
   ba66a:	b2c0      	uxtb	r0, r0
    }
   ba66c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   ba66e:	2001      	movs	r0, #1
   ba670:	e7fc      	b.n	ba66c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000ba674 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   ba674:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   ba676:	f7ff ffb9 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   ba67a:	4b02      	ldr	r3, [pc, #8]	; (ba684 <_ZN9TimeClass5monthEx+0x10>)
   ba67c:	6918      	ldr	r0, [r3, #16]
}
   ba67e:	3001      	adds	r0, #1
   ba680:	bd08      	pop	{r3, pc}
   ba682:	bf00      	nop
   ba684:	2003e680 	.word	0x2003e680

000ba688 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   ba688:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   ba68a:	2000      	movs	r0, #0
   ba68c:	f7fc ff24 	bl	b74d8 <hal_rtc_time_is_valid>
    if (rtcstate)
   ba690:	4604      	mov	r4, r0
   ba692:	b9a0      	cbnz	r0, ba6be <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   ba694:	f7fd f9a4 	bl	b79e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   ba698:	2801      	cmp	r0, #1
   ba69a:	d110      	bne.n	ba6be <_ZN9TimeClass7isValidEv+0x36>
   ba69c:	4620      	mov	r0, r4
   ba69e:	f7fd f9c7 	bl	b7a30 <system_thread_get_state>
   ba6a2:	b960      	cbnz	r0, ba6be <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   ba6a4:	f7ff ffd8 	bl	ba658 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   ba6a8:	b910      	cbnz	r0, ba6b0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   ba6aa:	f7fd fa45 	bl	b7b38 <spark_process>
        while (_while() && !_condition()) {
   ba6ae:	e7f9      	b.n	ba6a4 <_ZN9TimeClass7isValidEv+0x1c>
   ba6b0:	f7ff ffd2 	bl	ba658 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   ba6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   ba6b8:	2000      	movs	r0, #0
   ba6ba:	f7fc bf0d 	b.w	b74d8 <hal_rtc_time_is_valid>
}
   ba6be:	4620      	mov	r0, r4
   ba6c0:	bd10      	pop	{r4, pc}

000ba6c2 <_ZN9TimeClass3nowEv>:
{
   ba6c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   ba6c4:	f7ff ffe0 	bl	ba688 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   ba6c8:	2210      	movs	r2, #16
   ba6ca:	2100      	movs	r1, #0
   ba6cc:	4668      	mov	r0, sp
   ba6ce:	f001 ff9b 	bl	bc608 <memset>
    hal_rtc_get_time(&tv, nullptr);
   ba6d2:	2100      	movs	r1, #0
   ba6d4:	4668      	mov	r0, sp
   ba6d6:	f7fc ff07 	bl	b74e8 <hal_rtc_get_time>
}
   ba6da:	9800      	ldr	r0, [sp, #0]
   ba6dc:	b005      	add	sp, #20
   ba6de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba6e4 <_ZN9TimeClass4hourEv>:
{
   ba6e4:	b508      	push	{r3, lr}
	return hour(now());
   ba6e6:	f7ff ffec 	bl	ba6c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba6ea:	17c1      	asrs	r1, r0, #31
   ba6ec:	f7ff ff7e 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
}
   ba6f0:	4b01      	ldr	r3, [pc, #4]	; (ba6f8 <_ZN9TimeClass4hourEv+0x14>)
   ba6f2:	6898      	ldr	r0, [r3, #8]
   ba6f4:	bd08      	pop	{r3, pc}
   ba6f6:	bf00      	nop
   ba6f8:	2003e680 	.word	0x2003e680

000ba6fc <_ZN9TimeClass6minuteEv>:
{
   ba6fc:	b508      	push	{r3, lr}
	return minute(now());
   ba6fe:	f7ff ffe0 	bl	ba6c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba702:	17c1      	asrs	r1, r0, #31
   ba704:	f7ff ff72 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
}
   ba708:	4b01      	ldr	r3, [pc, #4]	; (ba710 <_ZN9TimeClass6minuteEv+0x14>)
   ba70a:	6858      	ldr	r0, [r3, #4]
   ba70c:	bd08      	pop	{r3, pc}
   ba70e:	bf00      	nop
   ba710:	2003e680 	.word	0x2003e680

000ba714 <_ZN9TimeClass6secondEv>:
{
   ba714:	b508      	push	{r3, lr}
	return second(now());
   ba716:	f7ff ffd4 	bl	ba6c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba71a:	17c1      	asrs	r1, r0, #31
   ba71c:	f7ff ff66 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
}
   ba720:	4b01      	ldr	r3, [pc, #4]	; (ba728 <_ZN9TimeClass6secondEv+0x14>)
   ba722:	6818      	ldr	r0, [r3, #0]
   ba724:	bd08      	pop	{r3, pc}
   ba726:	bf00      	nop
   ba728:	2003e680 	.word	0x2003e680

000ba72c <_ZN9TimeClass3dayEv>:
{
   ba72c:	b508      	push	{r3, lr}
	return day(now());
   ba72e:	f7ff ffc8 	bl	ba6c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba732:	17c1      	asrs	r1, r0, #31
   ba734:	f7ff ff5a 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
}
   ba738:	4b01      	ldr	r3, [pc, #4]	; (ba740 <_ZN9TimeClass3dayEv+0x14>)
   ba73a:	68d8      	ldr	r0, [r3, #12]
   ba73c:	bd08      	pop	{r3, pc}
   ba73e:	bf00      	nop
   ba740:	2003e680 	.word	0x2003e680

000ba744 <_ZN9TimeClass5monthEv>:
{
   ba744:	b508      	push	{r3, lr}
	return month(now());
   ba746:	f7ff ffbc 	bl	ba6c2 <_ZN9TimeClass3nowEv>
}
   ba74a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   ba74e:	17c1      	asrs	r1, r0, #31
   ba750:	f7ff bf90 	b.w	ba674 <_ZN9TimeClass5monthEx>

000ba754 <_ZN9TimeClass4yearEv>:
{
   ba754:	b508      	push	{r3, lr}
	return year(now());
   ba756:	f7ff ffb4 	bl	ba6c2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   ba75a:	17c1      	asrs	r1, r0, #31
   ba75c:	f7ff ff46 	bl	ba5ec <_ZL22Refresh_UnixTime_Cachex>
}
   ba760:	4b01      	ldr	r3, [pc, #4]	; (ba768 <_ZN9TimeClass4yearEv+0x14>)
   ba762:	6958      	ldr	r0, [r3, #20]
   ba764:	bd08      	pop	{r3, pc}
   ba766:	bf00      	nop
   ba768:	2003e680 	.word	0x2003e680

000ba76c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba76c:	4b02      	ldr	r3, [pc, #8]	; (ba778 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba76e:	681a      	ldr	r2, [r3, #0]
   ba770:	4b02      	ldr	r3, [pc, #8]	; (ba77c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba772:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba774:	4770      	bx	lr
   ba776:	bf00      	nop
   ba778:	2003dc24 	.word	0x2003dc24
   ba77c:	2003e67c 	.word	0x2003e67c

000ba780 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   ba780:	428a      	cmp	r2, r1
{
   ba782:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   ba784:	d007      	beq.n	ba796 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   ba786:	1a44      	subs	r4, r0, r1
   ba788:	9802      	ldr	r0, [sp, #8]
   ba78a:	1ac0      	subs	r0, r0, r3
   ba78c:	4344      	muls	r4, r0
   ba78e:	1a50      	subs	r0, r2, r1
   ba790:	fb94 f0f0 	sdiv	r0, r4, r0
   ba794:	4418      	add	r0, r3
}
   ba796:	bd10      	pop	{r4, pc}

000ba798 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   ba798:	2100      	movs	r1, #0
   ba79a:	f7fd b931 	b.w	b7a00 <system_delay_ms>
	...

000ba7a0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba7a0:	4b01      	ldr	r3, [pc, #4]	; (ba7a8 <_GLOBAL__sub_I_RGB+0x8>)
   ba7a2:	2200      	movs	r2, #0
   ba7a4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba7a6:	4770      	bx	lr
   ba7a8:	2003e6c0 	.word	0x2003e6c0

000ba7ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba7ac:	4b01      	ldr	r3, [pc, #4]	; (ba7b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba7ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba7b0:	4770      	bx	lr
   ba7b2:	bf00      	nop
   ba7b4:	2003dc28 	.word	0x2003dc28

000ba7b8 <serialEventRun>:
{
   ba7b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba7ba:	4b0b      	ldr	r3, [pc, #44]	; (ba7e8 <serialEventRun+0x30>)
   ba7bc:	b143      	cbz	r3, ba7d0 <serialEventRun+0x18>
   ba7be:	f000 fc03 	bl	bafc8 <_Z16_fetch_usbserialv>
   ba7c2:	6803      	ldr	r3, [r0, #0]
   ba7c4:	691b      	ldr	r3, [r3, #16]
   ba7c6:	4798      	blx	r3
   ba7c8:	2800      	cmp	r0, #0
   ba7ca:	dd01      	ble.n	ba7d0 <serialEventRun+0x18>
        serialEvent();
   ba7cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba7d0:	4b06      	ldr	r3, [pc, #24]	; (ba7ec <serialEventRun+0x34>)
   ba7d2:	b143      	cbz	r3, ba7e6 <serialEventRun+0x2e>
   ba7d4:	f001 f86c 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   ba7d8:	6803      	ldr	r3, [r0, #0]
   ba7da:	691b      	ldr	r3, [r3, #16]
   ba7dc:	4798      	blx	r3
   ba7de:	2800      	cmp	r0, #0
   ba7e0:	dd01      	ble.n	ba7e6 <serialEventRun+0x2e>
        serialEvent1();
   ba7e2:	f3af 8000 	nop.w
}
   ba7e6:	bd08      	pop	{r3, pc}
	...

000ba7f0 <_post_loop>:
{
   ba7f0:	b508      	push	{r3, lr}
	serialEventRun();
   ba7f2:	f7ff ffe1 	bl	ba7b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba7f6:	f7fc fe67 	bl	b74c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba7fa:	4b01      	ldr	r3, [pc, #4]	; (ba800 <_post_loop+0x10>)
   ba7fc:	6018      	str	r0, [r3, #0]
}
   ba7fe:	bd08      	pop	{r3, pc}
   ba800:	2003e740 	.word	0x2003e740

000ba804 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba804:	4805      	ldr	r0, [pc, #20]	; (ba81c <_Z33system_initialize_user_backup_ramv+0x18>)
   ba806:	4a06      	ldr	r2, [pc, #24]	; (ba820 <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba808:	4906      	ldr	r1, [pc, #24]	; (ba824 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba80a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba80c:	1a12      	subs	r2, r2, r0
   ba80e:	f001 fed3 	bl	bc5b8 <memcpy>
    __backup_sram_signature = signature;
   ba812:	4b05      	ldr	r3, [pc, #20]	; (ba828 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba814:	4a05      	ldr	r2, [pc, #20]	; (ba82c <_Z33system_initialize_user_backup_ramv+0x28>)
   ba816:	601a      	str	r2, [r3, #0]
}
   ba818:	bd08      	pop	{r3, pc}
   ba81a:	bf00      	nop
   ba81c:	2003f400 	.word	0x2003f400
   ba820:	2003f404 	.word	0x2003f404
   ba824:	000bf724 	.word	0x000bf724
   ba828:	2003f400 	.word	0x2003f400
   ba82c:	9a271c1e 	.word	0x9a271c1e

000ba830 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba830:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba832:	2300      	movs	r3, #0
   ba834:	9300      	str	r3, [sp, #0]
   ba836:	461a      	mov	r2, r3
   ba838:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba83c:	f7fd f912 	bl	b7a64 <system_ctrl_set_result>
}
   ba840:	b003      	add	sp, #12
   ba842:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba848 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba848:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba84a:	8843      	ldrh	r3, [r0, #2]
   ba84c:	2b0a      	cmp	r3, #10
   ba84e:	d008      	beq.n	ba862 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba850:	2b50      	cmp	r3, #80	; 0x50
   ba852:	d10b      	bne.n	ba86c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba854:	4b09      	ldr	r3, [pc, #36]	; (ba87c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba856:	681b      	ldr	r3, [r3, #0]
   ba858:	b14b      	cbz	r3, ba86e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba85a:	b003      	add	sp, #12
   ba85c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba860:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba862:	f7ff ffe5 	bl	ba830 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba866:	b003      	add	sp, #12
   ba868:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba86c:	2300      	movs	r3, #0
   ba86e:	9300      	str	r3, [sp, #0]
   ba870:	461a      	mov	r2, r3
   ba872:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba876:	f7fd f8f5 	bl	b7a64 <system_ctrl_set_result>
}
   ba87a:	e7f4      	b.n	ba866 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba87c:	2003e6d4 	.word	0x2003e6d4

000ba880 <module_user_init_hook>:
{
   ba880:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba882:	4812      	ldr	r0, [pc, #72]	; (ba8cc <module_user_init_hook+0x4c>)
   ba884:	2100      	movs	r1, #0
   ba886:	f7fd f9d7 	bl	b7c38 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba88a:	4b11      	ldr	r3, [pc, #68]	; (ba8d0 <module_user_init_hook+0x50>)
   ba88c:	681a      	ldr	r2, [r3, #0]
   ba88e:	4b11      	ldr	r3, [pc, #68]	; (ba8d4 <module_user_init_hook+0x54>)
   ba890:	429a      	cmp	r2, r3
   ba892:	4b11      	ldr	r3, [pc, #68]	; (ba8d8 <module_user_init_hook+0x58>)
   ba894:	bf0c      	ite	eq
   ba896:	2201      	moveq	r2, #1
   ba898:	2200      	movne	r2, #0
   ba89a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba89c:	d001      	beq.n	ba8a2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba89e:	f7ff ffb1 	bl	ba804 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba8a2:	f7fc fdf9 	bl	b7498 <HAL_RNG_GetRandomNumber>
   ba8a6:	4604      	mov	r4, r0
    srand(seed);
   ba8a8:	f001 feb6 	bl	bc618 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba8ac:	4b0b      	ldr	r3, [pc, #44]	; (ba8dc <module_user_init_hook+0x5c>)
   ba8ae:	b113      	cbz	r3, ba8b6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba8b0:	4620      	mov	r0, r4
   ba8b2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba8b6:	2100      	movs	r1, #0
   ba8b8:	4808      	ldr	r0, [pc, #32]	; (ba8dc <module_user_init_hook+0x5c>)
   ba8ba:	f7fd f965 	bl	b7b88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba8c2:	4807      	ldr	r0, [pc, #28]	; (ba8e0 <module_user_init_hook+0x60>)
   ba8c4:	2100      	movs	r1, #0
   ba8c6:	f7fd b8c3 	b.w	b7a50 <system_ctrl_set_app_request_handler>
   ba8ca:	bf00      	nop
   ba8cc:	000ba7ad 	.word	0x000ba7ad
   ba8d0:	2003f400 	.word	0x2003f400
   ba8d4:	9a271c1e 	.word	0x9a271c1e
   ba8d8:	2003e6d0 	.word	0x2003e6d0
   ba8dc:	00000000 	.word	0x00000000
   ba8e0:	000ba849 	.word	0x000ba849

000ba8e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba8e4:	4770      	bx	lr

000ba8e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   ba8e6:	2000      	movs	r0, #0
   ba8e8:	4770      	bx	lr

000ba8ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   ba8ea:	b510      	push	{r4, lr}
   ba8ec:	2110      	movs	r1, #16
   ba8ee:	4604      	mov	r4, r0
   ba8f0:	f7f9 fbd5 	bl	b409e <_ZdlPvj>
   ba8f4:	4620      	mov	r0, r4
   ba8f6:	bd10      	pop	{r4, pc}

000ba8f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   ba8f8:	b508      	push	{r3, lr}
      { delete this; }
   ba8fa:	f7ff fff6 	bl	ba8ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   ba8fe:	bd08      	pop	{r3, pc}

000ba900 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   ba900:	b530      	push	{r4, r5, lr}
        type_(type) {
   ba902:	2200      	movs	r2, #0
   ba904:	f64f 749c 	movw	r4, #65436	; 0xff9c
   ba908:	6002      	str	r2, [r0, #0]
   ba90a:	8084      	strh	r4, [r0, #4]
   ba90c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   ba90e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba910:	680c      	ldr	r4, [r1, #0]
   ba912:	8085      	strh	r5, [r0, #4]
   ba914:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   ba916:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   ba918:	bd30      	pop	{r4, r5, pc}

000ba91a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   ba91a:	b510      	push	{r4, lr}
   ba91c:	4604      	mov	r4, r0
    free((void*)msg_);
   ba91e:	6800      	ldr	r0, [r0, #0]
   ba920:	f7fd f942 	bl	b7ba8 <free>
}
   ba924:	4620      	mov	r0, r4
   ba926:	bd10      	pop	{r4, pc}

000ba928 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba928:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   ba92a:	68c4      	ldr	r4, [r0, #12]
   ba92c:	b1f4      	cbz	r4, ba96c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   ba92e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   ba930:	2b02      	cmp	r3, #2
   ba932:	d103      	bne.n	ba93c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   ba934:	f104 000c 	add.w	r0, r4, #12
   ba938:	f7ff ffef 	bl	ba91a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   ba93c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   ba93e:	b135      	cbz	r5, ba94e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   ba940:	4628      	mov	r0, r5
   ba942:	f7f9 fd15 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   ba946:	2110      	movs	r1, #16
   ba948:	4628      	mov	r0, r5
   ba94a:	f7f9 fba8 	bl	b409e <_ZdlPvj>
   ba94e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   ba950:	b135      	cbz	r5, ba960 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   ba952:	4628      	mov	r0, r5
   ba954:	f7f9 fd0c 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
   ba958:	2110      	movs	r1, #16
   ba95a:	4628      	mov	r0, r5
   ba95c:	f7f9 fb9f 	bl	b409e <_ZdlPvj>
   ba960:	4620      	mov	r0, r4
   ba962:	2114      	movs	r1, #20
   ba964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba968:	f7f9 bb99 	b.w	b409e <_ZdlPvj>
   ba96c:	bd38      	pop	{r3, r4, r5, pc}

000ba96e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba96e:	680b      	ldr	r3, [r1, #0]
   ba970:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   ba972:	684b      	ldr	r3, [r1, #4]
   ba974:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   ba976:	b113      	cbz	r3, ba97e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   ba978:	685a      	ldr	r2, [r3, #4]
   ba97a:	3201      	adds	r2, #1
   ba97c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba97e:	4770      	bx	lr

000ba980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   ba980:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba982:	4604      	mov	r4, r0
   ba984:	4668      	mov	r0, sp
   ba986:	460d      	mov	r5, r1
   ba988:	f7ff fff1 	bl	ba96e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba98c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   ba98e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   ba990:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   ba992:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   ba994:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   ba996:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   ba998:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   ba99a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   ba99c:	f7fa fba6 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   ba9a0:	b135      	cbz	r5, ba9b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   ba9a2:	1d28      	adds	r0, r5, #4
   ba9a4:	f7fa fba2 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba9a8:	2108      	movs	r1, #8
   ba9aa:	4628      	mov	r0, r5
   ba9ac:	f7f9 fb77 	bl	b409e <_ZdlPvj>
        return p;
    }
   ba9b0:	4620      	mov	r0, r4
   ba9b2:	b003      	add	sp, #12
   ba9b4:	bd30      	pop	{r4, r5, pc}

000ba9b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   ba9b6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba9b8:	b510      	push	{r4, lr}
      if (_M_empty())
   ba9ba:	b90a      	cbnz	r2, ba9c0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   ba9bc:	f000 ffdc 	bl	bb978 <_ZSt25__throw_bad_function_callv>
    }
   ba9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba9c4:	68c3      	ldr	r3, [r0, #12]
   ba9c6:	4718      	bx	r3

000ba9c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba9c8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba9ca:	6800      	ldr	r0, [r0, #0]
   ba9cc:	f100 0110 	add.w	r1, r0, #16
   ba9d0:	f7ff fff1 	bl	ba9b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   ba9d4:	bd08      	pop	{r3, pc}

000ba9d6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   ba9d6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba9d8:	b510      	push	{r4, lr}
      if (_M_empty())
   ba9da:	b90a      	cbnz	r2, ba9e0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   ba9dc:	f000 ffcc 	bl	bb978 <_ZSt25__throw_bad_function_callv>
    }
   ba9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba9e4:	68c3      	ldr	r3, [r0, #12]
   ba9e6:	4718      	bx	r3

000ba9e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba9e8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   ba9ea:	6800      	ldr	r0, [r0, #0]
   ba9ec:	f100 0110 	add.w	r1, r0, #16
   ba9f0:	f7ff fff1 	bl	ba9d6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   ba9f4:	bd08      	pop	{r3, pc}
	...

000ba9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   ba9f8:	b538      	push	{r3, r4, r5, lr}
   ba9fa:	2300      	movs	r3, #0
   ba9fc:	4604      	mov	r4, r0
   ba9fe:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baa00:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   baa02:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baa04:	f7f9 fb47 	bl	b4096 <_Znwj>
   baa08:	b128      	cbz	r0, baa16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   baa0a:	2301      	movs	r3, #1
   baa0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   baa10:	4b02      	ldr	r3, [pc, #8]	; (baa1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   baa12:	6003      	str	r3, [r0, #0]
   baa14:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   baa16:	6020      	str	r0, [r4, #0]
	}
   baa18:	4620      	mov	r0, r4
   baa1a:	bd38      	pop	{r3, r4, r5, pc}
   baa1c:	000bf094 	.word	0x000bf094

000baa20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   baa20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   baa22:	2300      	movs	r3, #0
   baa24:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   baa26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   baa28:	4604      	mov	r4, r0
   baa2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   baa2c:	b12b      	cbz	r3, baa3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   baa2e:	2202      	movs	r2, #2
   baa30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   baa32:	68eb      	ldr	r3, [r5, #12]
   baa34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   baa36:	68ab      	ldr	r3, [r5, #8]
   baa38:	60a3      	str	r3, [r4, #8]
    }
   baa3a:	4620      	mov	r0, r4
   baa3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000baa40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   baa40:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa42:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   baa44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   baa46:	4668      	mov	r0, sp
   baa48:	f7ff ff5a 	bl	ba900 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   baa4c:	f04f 0302 	mov.w	r3, #2
   baa50:	e8d4 2f4f 	ldrexb	r2, [r4]
   baa54:	2a00      	cmp	r2, #0
   baa56:	d103      	bne.n	baa60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   baa58:	e8c4 3f41 	strexb	r1, r3, [r4]
   baa5c:	2900      	cmp	r1, #0
   baa5e:	d1f7      	bne.n	baa50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   baa60:	d125      	bne.n	baaae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   baa62:	f104 050c 	add.w	r5, r4, #12
   baa66:	4669      	mov	r1, sp
   baa68:	4628      	mov	r0, r5
   baa6a:	f7ff ff49 	bl	ba900 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   baa6e:	f3bf 8f5b 	dmb	ish
   baa72:	2301      	movs	r3, #1
   baa74:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   baa76:	2000      	movs	r0, #0
   baa78:	f104 0308 	add.w	r3, r4, #8
   baa7c:	f3bf 8f5b 	dmb	ish
   baa80:	e853 6f00 	ldrex	r6, [r3]
   baa84:	e843 0200 	strex	r2, r0, [r3]
   baa88:	2a00      	cmp	r2, #0
   baa8a:	d1f9      	bne.n	baa80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   baa8c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   baa90:	b16e      	cbz	r6, baaae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   baa92:	f7fc ffbd 	bl	b7a10 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   baa96:	b178      	cbz	r0, baab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   baa98:	4629      	mov	r1, r5
   baa9a:	4630      	mov	r0, r6
   baa9c:	f7ff ff8b 	bl	ba9b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   baaa0:	4630      	mov	r0, r6
   baaa2:	f7f9 fc65 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   baaa6:	2110      	movs	r1, #16
   baaa8:	4630      	mov	r0, r6
   baaaa:	f7f9 faf8 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   baaae:	4668      	mov	r0, sp
   baab0:	f7ff ff33 	bl	ba91a <_ZN8particle5ErrorD1Ev>
    }
   baab4:	b009      	add	sp, #36	; 0x24
   baab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   baab8:	4631      	mov	r1, r6
   baaba:	a802      	add	r0, sp, #8
   baabc:	f7ff ffb0 	bl	baa20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   baac0:	68e0      	ldr	r0, [r4, #12]
   baac2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   baac6:	b108      	cbz	r0, baacc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   baac8:	f001 fe0c 	bl	bc6e4 <strdup>
        type_(type) {
   baacc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   baace:	2010      	movs	r0, #16
   baad0:	f8ad 501c 	strh.w	r5, [sp, #28]
   baad4:	f7f9 fadf 	bl	b4096 <_Znwj>
   baad8:	4605      	mov	r5, r0
   baada:	b1e8      	cbz	r0, bab18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   baadc:	2700      	movs	r7, #0
   baade:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   baae0:	2018      	movs	r0, #24
   baae2:	f7f9 fad8 	bl	b4096 <_Znwj>
   baae6:	4604      	mov	r4, r0
   baae8:	b188      	cbz	r0, bab0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   baaea:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   baaec:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   baaee:	a802      	add	r0, sp, #8
   baaf0:	f7fe fab8 	bl	b9064 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baaf4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   baaf6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   baaf8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baafa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   baafc:	9204      	str	r2, [sp, #16]
   baafe:	a906      	add	r1, sp, #24
   bab00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bab02:	60e3      	str	r3, [r4, #12]
   bab04:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bab08:	9205      	str	r2, [sp, #20]
   bab0a:	f7ff fef9 	bl	ba900 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bab0e:	4b08      	ldr	r3, [pc, #32]	; (bab30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bab10:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bab12:	4b08      	ldr	r3, [pc, #32]	; (bab34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bab14:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bab16:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bab18:	a806      	add	r0, sp, #24
   bab1a:	f7ff fefe 	bl	ba91a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bab1e:	a802      	add	r0, sp, #8
   bab20:	f7f9 fc26 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bab24:	2200      	movs	r2, #0
   bab26:	4629      	mov	r1, r5
   bab28:	4803      	ldr	r0, [pc, #12]	; (bab38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bab2a:	f7fc ff79 	bl	b7a20 <application_thread_invoke>
   bab2e:	e7b7      	b.n	baaa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bab30:	000ba9c9 	.word	0x000ba9c9
   bab34:	000bac4d 	.word	0x000bac4d
   bab38:	000bb16d 	.word	0x000bb16d

000bab3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab40:	b08b      	sub	sp, #44	; 0x2c
   bab42:	4605      	mov	r5, r0
   bab44:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bab48:	460f      	mov	r7, r1
   bab4a:	4690      	mov	r8, r2
   bab4c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bab4e:	f7fc fffb 	bl	b7b48 <spark_cloud_flag_connected>
   bab52:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bab54:	4683      	mov	fp, r0
   bab56:	bb38      	cbnz	r0, baba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bab58:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bab5c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bab5e:	a905      	add	r1, sp, #20
   bab60:	4630      	mov	r0, r6
   bab62:	f8ad 3018 	strh.w	r3, [sp, #24]
   bab66:	f7ff fecb 	bl	ba900 <_ZN8particle5ErrorC1EOS0_>
   bab6a:	2014      	movs	r0, #20
   bab6c:	f7f9 fa93 	bl	b4096 <_Znwj>
   bab70:	4604      	mov	r4, r0
   bab72:	b148      	cbz	r0, bab88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bab74:	2302      	movs	r3, #2
   bab76:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bab78:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bab7a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bab7e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bab80:	4631      	mov	r1, r6
   bab82:	300c      	adds	r0, #12
   bab84:	f7ff febc 	bl	ba900 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bab88:	4628      	mov	r0, r5
	: __shared_count(__p)
   bab8a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bab8c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bab90:	f7ff ff32 	bl	ba9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bab94:	4630      	mov	r0, r6
   bab96:	f7ff fec0 	bl	ba91a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bab9a:	a805      	add	r0, sp, #20
   bab9c:	f7ff febd 	bl	ba91a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   baba0:	4628      	mov	r0, r5
   baba2:	b00b      	add	sp, #44	; 0x2c
   baba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   baba8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   babaa:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   babac:	2014      	movs	r0, #20
   babae:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   babb2:	9307      	str	r3, [sp, #28]
   babb4:	f7f9 fa6f 	bl	b4096 <_Znwj>
   babb8:	4601      	mov	r1, r0
   babba:	b118      	cbz	r0, babc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   babbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   babc0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   babc2:	7044      	strb	r4, [r0, #1]
   babc4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   babc6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   babc8:	f7ff ff16 	bl	ba9f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   babcc:	4b1e      	ldr	r3, [pc, #120]	; (bac48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   babce:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   babd0:	2008      	movs	r0, #8
   babd2:	f7f9 fa60 	bl	b4096 <_Znwj>
   babd6:	4604      	mov	r4, r0
   babd8:	b110      	cbz	r0, babe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   babda:	a903      	add	r1, sp, #12
   babdc:	f7ff fec7 	bl	ba96e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   babe0:	9600      	str	r6, [sp, #0]
   babe2:	fa5f f38a 	uxtb.w	r3, sl
   babe6:	464a      	mov	r2, r9
   babe8:	4641      	mov	r1, r8
   babea:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   babec:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   babee:	f7fc ffb3 	bl	b7b58 <spark_send_event>
   babf2:	b9b8      	cbnz	r0, bac24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   babf4:	9b03      	ldr	r3, [sp, #12]
   babf6:	785b      	ldrb	r3, [r3, #1]
   babf8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   babfc:	b993      	cbnz	r3, bac24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   babfe:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bac02:	a905      	add	r1, sp, #20
   bac04:	a803      	add	r0, sp, #12
   bac06:	9205      	str	r2, [sp, #20]
   bac08:	f8ad 3018 	strh.w	r3, [sp, #24]
   bac0c:	f7ff ff18 	bl	baa40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bac10:	a805      	add	r0, sp, #20
   bac12:	f7ff fe82 	bl	ba91a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bac16:	a805      	add	r0, sp, #20
   bac18:	9909      	ldr	r1, [sp, #36]	; 0x24
   bac1a:	f7ff feb1 	bl	ba980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bac1e:	a806      	add	r0, sp, #24
   bac20:	f7fa fa64 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac24:	a903      	add	r1, sp, #12
   bac26:	a805      	add	r0, sp, #20
   bac28:	f7ff fea1 	bl	ba96e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bac2c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bac2e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bac30:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bac32:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bac34:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bac36:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bac38:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bac3a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bac3c:	f7fa fa56 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bac40:	a804      	add	r0, sp, #16
   bac42:	f7fa fa53 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bac46:	e7ab      	b.n	baba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bac48:	000bacc9 	.word	0x000bacc9

000bac4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bac4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bac4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bac50:	4605      	mov	r5, r0
	switch (__op)
   bac52:	d103      	bne.n	bac5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bac54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bac56:	6003      	str	r3, [r0, #0]
      }
   bac58:	2000      	movs	r0, #0
   bac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bac5c:	2a02      	cmp	r2, #2
   bac5e:	d010      	beq.n	bac82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bac60:	2a03      	cmp	r2, #3
   bac62:	d1f9      	bne.n	bac58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bac64:	6804      	ldr	r4, [r0, #0]
   bac66:	2c00      	cmp	r4, #0
   bac68:	d0f6      	beq.n	bac58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bac6a:	f104 0010 	add.w	r0, r4, #16
   bac6e:	f7ff fe54 	bl	ba91a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bac72:	4620      	mov	r0, r4
   bac74:	f7f9 fb7c 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bac78:	2118      	movs	r1, #24
   bac7a:	4620      	mov	r0, r4
   bac7c:	f7f9 fa0f 	bl	b409e <_ZdlPvj>
   bac80:	e7ea      	b.n	bac58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bac82:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bac84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bac86:	f7f9 fa06 	bl	b4096 <_Znwj>
   bac8a:	4604      	mov	r4, r0
   bac8c:	b150      	cbz	r0, baca4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bac8e:	4631      	mov	r1, r6
   bac90:	f7ff fec6 	bl	baa20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bac94:	6930      	ldr	r0, [r6, #16]
   bac96:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bac9a:	b108      	cbz	r0, baca0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bac9c:	f001 fd22 	bl	bc6e4 <strdup>
        type_(type) {
   baca0:	6120      	str	r0, [r4, #16]
   baca2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   baca4:	602c      	str	r4, [r5, #0]
	}
   baca6:	e7d7      	b.n	bac58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000baca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   baca8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bacaa:	2300      	movs	r3, #0
   bacac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bacae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bacb0:	4604      	mov	r4, r0
   bacb2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bacb4:	b12b      	cbz	r3, bacc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bacb6:	2202      	movs	r2, #2
   bacb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bacba:	68eb      	ldr	r3, [r5, #12]
   bacbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bacbe:	68ab      	ldr	r3, [r5, #8]
   bacc0:	60a3      	str	r3, [r4, #8]
    }
   bacc2:	4620      	mov	r0, r4
   bacc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000bacc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bacc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bacca:	b089      	sub	sp, #36	; 0x24
   baccc:	4604      	mov	r4, r0
   bacce:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bacd0:	a801      	add	r0, sp, #4
   bacd2:	4611      	mov	r1, r2
   bacd4:	f7ff fe54 	bl	ba980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bacd8:	b1a4      	cbz	r4, bad04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bacda:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bacdc:	b11d      	cbz	r5, bace6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bacde:	4628      	mov	r0, r5
   bace0:	f001 fd00 	bl	bc6e4 <strdup>
   bace4:	4605      	mov	r5, r0
   bace6:	a801      	add	r0, sp, #4
   bace8:	a903      	add	r1, sp, #12
        type_(type) {
   bacea:	9503      	str	r5, [sp, #12]
   bacec:	f8ad 4010 	strh.w	r4, [sp, #16]
   bacf0:	f7ff fea6 	bl	baa40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bacf4:	a803      	add	r0, sp, #12
   bacf6:	f7ff fe10 	bl	ba91a <_ZN8particle5ErrorD1Ev>
   bacfa:	a802      	add	r0, sp, #8
   bacfc:	f7fa f9f6 	bl	b50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bad00:	b009      	add	sp, #36	; 0x24
   bad02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bad04:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bad06:	2301      	movs	r3, #1
   bad08:	e8d5 2f4f 	ldrexb	r2, [r5]
   bad0c:	2a00      	cmp	r2, #0
   bad0e:	d103      	bne.n	bad18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bad10:	e8c5 3f41 	strexb	r1, r3, [r5]
   bad14:	2900      	cmp	r1, #0
   bad16:	d1f7      	bne.n	bad08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bad18:	d1ef      	bne.n	bacfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bad1a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bad1c:	f3bf 8f5b 	dmb	ish
   bad20:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bad22:	1d2b      	adds	r3, r5, #4
   bad24:	f3bf 8f5b 	dmb	ish
   bad28:	e853 6f00 	ldrex	r6, [r3]
   bad2c:	e843 4200 	strex	r2, r4, [r3]
   bad30:	2a00      	cmp	r2, #0
   bad32:	d1f9      	bne.n	bad28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bad34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bad38:	2e00      	cmp	r6, #0
   bad3a:	d0de      	beq.n	bacfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bad3c:	4620      	mov	r0, r4
   bad3e:	f7fc fe67 	bl	b7a10 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bad42:	4607      	mov	r7, r0
   bad44:	b160      	cbz	r0, bad60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bad46:	f105 010c 	add.w	r1, r5, #12
   bad4a:	4630      	mov	r0, r6
   bad4c:	f7ff fe43 	bl	ba9d6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bad50:	4630      	mov	r0, r6
   bad52:	f7f9 fb0d 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bad56:	2110      	movs	r1, #16
   bad58:	4630      	mov	r0, r6
   bad5a:	f7f9 f9a0 	bl	b409e <_ZdlPvj>
   bad5e:	e7cc      	b.n	bacfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bad60:	4631      	mov	r1, r6
   bad62:	a803      	add	r0, sp, #12
   bad64:	f7ff ffa0 	bl	baca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bad68:	7b2b      	ldrb	r3, [r5, #12]
   bad6a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bad6e:	2010      	movs	r0, #16
   bad70:	f7f9 f991 	bl	b4096 <_Znwj>
   bad74:	4605      	mov	r5, r0
   bad76:	b1d0      	cbz	r0, badae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bad78:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bad7a:	2014      	movs	r0, #20
   bad7c:	f7f9 f98b 	bl	b4096 <_Znwj>
   bad80:	4604      	mov	r4, r0
   bad82:	b178      	cbz	r0, bada4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bad84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bad86:	4601      	mov	r1, r0
   bad88:	a803      	add	r0, sp, #12
   bad8a:	f7fe f96b 	bl	b9064 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad8e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bad90:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bad92:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bad94:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bad96:	9205      	str	r2, [sp, #20]
   bad98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bad9a:	60e3      	str	r3, [r4, #12]
   bad9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bada0:	9206      	str	r2, [sp, #24]
   bada2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bada4:	4b06      	ldr	r3, [pc, #24]	; (badc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bada6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bada8:	4b06      	ldr	r3, [pc, #24]	; (badc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   badaa:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   badac:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   badae:	a803      	add	r0, sp, #12
   badb0:	f7f9 fade 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   badb4:	2200      	movs	r2, #0
   badb6:	4629      	mov	r1, r5
   badb8:	4803      	ldr	r0, [pc, #12]	; (badc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   badba:	f7fc fe31 	bl	b7a20 <application_thread_invoke>
   badbe:	e7c7      	b.n	bad50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   badc0:	000ba9e9 	.word	0x000ba9e9
   badc4:	000badcd 	.word	0x000badcd
   badc8:	000bb16d 	.word	0x000bb16d

000badcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   badcc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   badce:	b570      	push	{r4, r5, r6, lr}
   badd0:	4604      	mov	r4, r0
	switch (__op)
   badd2:	d103      	bne.n	baddc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   badd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   badd6:	6003      	str	r3, [r0, #0]
      }
   badd8:	2000      	movs	r0, #0
   badda:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   baddc:	2a02      	cmp	r2, #2
   badde:	d00c      	beq.n	badfa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bade0:	2a03      	cmp	r2, #3
   bade2:	d1f9      	bne.n	badd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bade4:	6804      	ldr	r4, [r0, #0]
   bade6:	2c00      	cmp	r4, #0
   bade8:	d0f6      	beq.n	badd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   badea:	4620      	mov	r0, r4
   badec:	f7f9 fac0 	bl	b4370 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   badf0:	2114      	movs	r1, #20
   badf2:	4620      	mov	r0, r4
   badf4:	f7f9 f953 	bl	b409e <_ZdlPvj>
   badf8:	e7ee      	b.n	badd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   badfa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   badfc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   badfe:	f7f9 f94a 	bl	b4096 <_Znwj>
   bae02:	4605      	mov	r5, r0
   bae04:	b120      	cbz	r0, bae10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bae06:	4631      	mov	r1, r6
   bae08:	f7ff ff4e 	bl	baca8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bae0c:	7c33      	ldrb	r3, [r6, #16]
   bae0e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bae10:	6025      	str	r5, [r4, #0]
	}
   bae12:	e7e1      	b.n	badd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bae14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bae14:	4770      	bx	lr

000bae16 <_ZN9IPAddressD0Ev>:
   bae16:	b510      	push	{r4, lr}
   bae18:	2118      	movs	r1, #24
   bae1a:	4604      	mov	r4, r0
   bae1c:	f7f9 f93f 	bl	b409e <_ZdlPvj>
   bae20:	4620      	mov	r0, r4
   bae22:	bd10      	pop	{r4, pc}

000bae24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bae24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bae26:	7d03      	ldrb	r3, [r0, #20]
   bae28:	2b06      	cmp	r3, #6
{
   bae2a:	b08d      	sub	sp, #52	; 0x34
   bae2c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae2e:	f100 0704 	add.w	r7, r0, #4
   bae32:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bae36:	d012      	beq.n	bae5e <_ZNK9IPAddress7printToER5Print+0x3a>
   bae38:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bae3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bae40:	220a      	movs	r2, #10
   bae42:	4630      	mov	r0, r6
   bae44:	f7fe fbc9 	bl	b95da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bae48:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bae4a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bae4c:	d019      	beq.n	bae82 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bae4e:	2c00      	cmp	r4, #0
   bae50:	d0f4      	beq.n	bae3c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bae52:	212e      	movs	r1, #46	; 0x2e
   bae54:	4630      	mov	r0, r6
   bae56:	f7fe fba7 	bl	b95a8 <_ZN5Print5printEc>
   bae5a:	4404      	add	r4, r0
   bae5c:	e7ee      	b.n	bae3c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae5e:	232f      	movs	r3, #47	; 0x2f
   bae60:	466a      	mov	r2, sp
   bae62:	4639      	mov	r1, r7
   bae64:	200a      	movs	r0, #10
		buf[0] = 0;
   bae66:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bae6a:	f7fc fc1f 	bl	b76ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bae6e:	4668      	mov	r0, sp
   bae70:	f001 fc55 	bl	bc71e <strlen>
   bae74:	6833      	ldr	r3, [r6, #0]
   bae76:	4602      	mov	r2, r0
   bae78:	68db      	ldr	r3, [r3, #12]
   bae7a:	4669      	mov	r1, sp
   bae7c:	4630      	mov	r0, r6
   bae7e:	4798      	blx	r3
   bae80:	4604      	mov	r4, r0
    }
    return n;
}
   bae82:	4620      	mov	r0, r4
   bae84:	b00d      	add	sp, #52	; 0x34
   bae86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bae88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bae88:	b510      	push	{r4, lr}
   bae8a:	4b05      	ldr	r3, [pc, #20]	; (baea0 <_ZN9IPAddressC1Ev+0x18>)
   bae8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bae8e:	2211      	movs	r2, #17
   bae90:	f840 3b04 	str.w	r3, [r0], #4
   bae94:	2100      	movs	r1, #0
   bae96:	f001 fbb7 	bl	bc608 <memset>
}
   bae9a:	4620      	mov	r0, r4
   bae9c:	bd10      	pop	{r4, pc}
   bae9e:	bf00      	nop
   baea0:	000bf0b0 	.word	0x000bf0b0

000baea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   baea4:	4603      	mov	r3, r0
   baea6:	4a07      	ldr	r2, [pc, #28]	; (baec4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   baea8:	b510      	push	{r4, lr}
   baeaa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   baeae:	f101 0210 	add.w	r2, r1, #16
   baeb2:	f851 4b04 	ldr.w	r4, [r1], #4
   baeb6:	f843 4b04 	str.w	r4, [r3], #4
   baeba:	4291      	cmp	r1, r2
   baebc:	d1f9      	bne.n	baeb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   baebe:	780a      	ldrb	r2, [r1, #0]
   baec0:	701a      	strb	r2, [r3, #0]
}
   baec2:	bd10      	pop	{r4, pc}
   baec4:	000bf0b0 	.word	0x000bf0b0

000baec8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   baec8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   baeca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   baece:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   baed2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   baed6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   baeda:	2304      	movs	r3, #4
   baedc:	6041      	str	r1, [r0, #4]
   baede:	7503      	strb	r3, [r0, #20]
}
   baee0:	bd10      	pop	{r4, pc}
	...

000baee4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   baee4:	b507      	push	{r0, r1, r2, lr}
   baee6:	4b06      	ldr	r3, [pc, #24]	; (baf00 <_ZN9IPAddressC1EPKh+0x1c>)
   baee8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   baeea:	78cb      	ldrb	r3, [r1, #3]
   baeec:	9300      	str	r3, [sp, #0]
   baeee:	788b      	ldrb	r3, [r1, #2]
   baef0:	784a      	ldrb	r2, [r1, #1]
   baef2:	7809      	ldrb	r1, [r1, #0]
   baef4:	f7ff ffe8 	bl	baec8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   baef8:	b003      	add	sp, #12
   baefa:	f85d fb04 	ldr.w	pc, [sp], #4
   baefe:	bf00      	nop
   baf00:	000bf0b0 	.word	0x000bf0b0

000baf04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baf04:	7441      	strb	r1, [r0, #17]
}
   baf06:	4770      	bx	lr

000baf08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baf08:	4770      	bx	lr

000baf0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   baf0a:	4770      	bx	lr

000baf0c <_ZN9USBSerial4readEv>:
{
   baf0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   baf0e:	2100      	movs	r1, #0
   baf10:	7c00      	ldrb	r0, [r0, #16]
   baf12:	f7fc fd23 	bl	b795c <HAL_USB_USART_Receive_Data>
}
   baf16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baf1a:	bd08      	pop	{r3, pc}

000baf1c <_ZN9USBSerial4peekEv>:
{
   baf1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   baf1e:	2101      	movs	r1, #1
   baf20:	7c00      	ldrb	r0, [r0, #16]
   baf22:	f7fc fd1b 	bl	b795c <HAL_USB_USART_Receive_Data>
}
   baf26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baf2a:	bd08      	pop	{r3, pc}

000baf2c <_ZN9USBSerial17availableForWriteEv>:
{
   baf2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   baf2e:	7c00      	ldrb	r0, [r0, #16]
   baf30:	f7fc fd0c 	bl	b794c <HAL_USB_USART_Available_Data_For_Write>
}
   baf34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf38:	bd08      	pop	{r3, pc}

000baf3a <_ZN9USBSerial9availableEv>:
{
   baf3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   baf3c:	7c00      	ldrb	r0, [r0, #16]
   baf3e:	f7fc fcfd 	bl	b793c <HAL_USB_USART_Available_Data>
}
   baf42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf46:	bd08      	pop	{r3, pc}

000baf48 <_ZN9USBSerial5writeEh>:
{
   baf48:	b513      	push	{r0, r1, r4, lr}
   baf4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf4c:	7c00      	ldrb	r0, [r0, #16]
{
   baf4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf50:	f7fc fcfc 	bl	b794c <HAL_USB_USART_Available_Data_For_Write>
   baf54:	2800      	cmp	r0, #0
   baf56:	9901      	ldr	r1, [sp, #4]
   baf58:	dc01      	bgt.n	baf5e <_ZN9USBSerial5writeEh+0x16>
   baf5a:	7c60      	ldrb	r0, [r4, #17]
   baf5c:	b120      	cbz	r0, baf68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   baf5e:	7c20      	ldrb	r0, [r4, #16]
   baf60:	f7fc fd04 	bl	b796c <HAL_USB_USART_Send_Data>
   baf64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   baf68:	b002      	add	sp, #8
   baf6a:	bd10      	pop	{r4, pc}

000baf6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baf6c:	7c00      	ldrb	r0, [r0, #16]
   baf6e:	f7fc bd05 	b.w	b797c <HAL_USB_USART_Flush_Data>

000baf72 <_ZN9USBSerialD0Ev>:
   baf72:	b510      	push	{r4, lr}
   baf74:	2114      	movs	r1, #20
   baf76:	4604      	mov	r4, r0
   baf78:	f7f9 f891 	bl	b409e <_ZdlPvj>
   baf7c:	4620      	mov	r0, r4
   baf7e:	bd10      	pop	{r4, pc}

000baf80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   baf80:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   baf82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf86:	4604      	mov	r4, r0
   baf88:	4608      	mov	r0, r1
   baf8a:	2100      	movs	r1, #0
   baf8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baf90:	4b04      	ldr	r3, [pc, #16]	; (bafa4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baf92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf94:	2301      	movs	r3, #1
  _serial = serial;
   baf96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baf9a:	4611      	mov	r1, r2
   baf9c:	f7fc fcb6 	bl	b790c <HAL_USB_USART_Init>
}
   bafa0:	4620      	mov	r0, r4
   bafa2:	bd10      	pop	{r4, pc}
   bafa4:	000bf0c4 	.word	0x000bf0c4

000bafa8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bafa8:	7c00      	ldrb	r0, [r0, #16]
   bafaa:	2200      	movs	r2, #0
   bafac:	f7fc bcb6 	b.w	b791c <HAL_USB_USART_Begin>

000bafb0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bafb0:	7c00      	ldrb	r0, [r0, #16]
   bafb2:	f7fc bcbb 	b.w	b792c <HAL_USB_USART_End>

000bafb6 <_Z19acquireSerialBufferv>:
{
   bafb6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bafb8:	2214      	movs	r2, #20
{
   bafba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bafbc:	2100      	movs	r1, #0
   bafbe:	f001 fb23 	bl	bc608 <memset>
}
   bafc2:	4620      	mov	r0, r4
   bafc4:	bd10      	pop	{r4, pc}
	...

000bafc8 <_Z16_fetch_usbserialv>:
{
   bafc8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bafca:	4c0f      	ldr	r4, [pc, #60]	; (bb008 <_Z16_fetch_usbserialv+0x40>)
{
   bafcc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bafce:	a803      	add	r0, sp, #12
   bafd0:	f7ff fff1 	bl	bafb6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bafd4:	7821      	ldrb	r1, [r4, #0]
   bafd6:	f3bf 8f5b 	dmb	ish
   bafda:	f011 0101 	ands.w	r1, r1, #1
   bafde:	d10f      	bne.n	bb000 <_Z16_fetch_usbserialv+0x38>
   bafe0:	4620      	mov	r0, r4
   bafe2:	9101      	str	r1, [sp, #4]
   bafe4:	f7f9 f86a 	bl	b40bc <__cxa_guard_acquire>
   bafe8:	9901      	ldr	r1, [sp, #4]
   bafea:	b148      	cbz	r0, bb000 <_Z16_fetch_usbserialv+0x38>
   bafec:	aa03      	add	r2, sp, #12
   bafee:	4807      	ldr	r0, [pc, #28]	; (bb00c <_Z16_fetch_usbserialv+0x44>)
   baff0:	f7ff ffc6 	bl	baf80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   baff4:	4620      	mov	r0, r4
   baff6:	f7f9 f866 	bl	b40c6 <__cxa_guard_release>
   baffa:	4805      	ldr	r0, [pc, #20]	; (bb010 <_Z16_fetch_usbserialv+0x48>)
   baffc:	f001 fab6 	bl	bc56c <atexit>
	return _usbserial;
}
   bb000:	4802      	ldr	r0, [pc, #8]	; (bb00c <_Z16_fetch_usbserialv+0x44>)
   bb002:	b008      	add	sp, #32
   bb004:	bd10      	pop	{r4, pc}
   bb006:	bf00      	nop
   bb008:	2003e6d8 	.word	0x2003e6d8
   bb00c:	2003e6dc 	.word	0x2003e6dc
   bb010:	000baf09 	.word	0x000baf09

000bb014 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   bb014:	f7fc ba38 	b.w	b7488 <HAL_Interrupts_Disable_All>

000bb018 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   bb018:	f7fc ba2e 	b.w	b7478 <HAL_Interrupts_Enable_All>

000bb01c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bb01c:	2200      	movs	r2, #0
   bb01e:	6840      	ldr	r0, [r0, #4]
   bb020:	4611      	mov	r1, r2
   bb022:	f7fc bd41 	b.w	b7aa8 <network_ready>

000bb026 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bb026:	2200      	movs	r2, #0
   bb028:	6840      	ldr	r0, [r0, #4]
   bb02a:	4611      	mov	r1, r2
   bb02c:	f7fc bd5c 	b.w	b7ae8 <network_listening>

000bb030 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb030:	2200      	movs	r2, #0
   bb032:	6840      	ldr	r0, [r0, #4]
   bb034:	4611      	mov	r1, r2
   bb036:	f7fc bd67 	b.w	b7b08 <network_get_listen_timeout>

000bb03a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb03a:	6840      	ldr	r0, [r0, #4]
   bb03c:	2200      	movs	r2, #0
   bb03e:	f7fc bd5b 	b.w	b7af8 <network_set_listen_timeout>

000bb042 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb042:	6840      	ldr	r0, [r0, #4]
   bb044:	2200      	movs	r2, #0
   bb046:	f081 0101 	eor.w	r1, r1, #1
   bb04a:	f7fc bd45 	b.w	b7ad8 <network_listen>

000bb04e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb04e:	2300      	movs	r3, #0
   bb050:	6840      	ldr	r0, [r0, #4]
   bb052:	461a      	mov	r2, r3
   bb054:	4619      	mov	r1, r3
   bb056:	f7fc bd37 	b.w	b7ac8 <network_off>

000bb05a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb05a:	2300      	movs	r3, #0
   bb05c:	6840      	ldr	r0, [r0, #4]
   bb05e:	461a      	mov	r2, r3
   bb060:	4619      	mov	r1, r3
   bb062:	f7fc bd29 	b.w	b7ab8 <network_on>

000bb066 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb066:	2200      	movs	r2, #0
   bb068:	6840      	ldr	r0, [r0, #4]
   bb06a:	4611      	mov	r1, r2
   bb06c:	f7fc bd0c 	b.w	b7a88 <network_connecting>

000bb070 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb070:	6840      	ldr	r0, [r0, #4]
   bb072:	2200      	movs	r2, #0
   bb074:	2102      	movs	r1, #2
   bb076:	f7fc bd0f 	b.w	b7a98 <network_disconnect>

000bb07a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb07a:	2300      	movs	r3, #0
   bb07c:	6840      	ldr	r0, [r0, #4]
   bb07e:	461a      	mov	r2, r3
   bb080:	f7fc bcfa 	b.w	b7a78 <network_connect>

000bb084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bb084:	4b08      	ldr	r3, [pc, #32]	; (bb0a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bb086:	b510      	push	{r4, lr}
   bb088:	2428      	movs	r4, #40	; 0x28
   bb08a:	4622      	mov	r2, r4
   bb08c:	4618      	mov	r0, r3
   bb08e:	2100      	movs	r1, #0
   bb090:	f001 faba 	bl	bc608 <memset>
   bb094:	4b05      	ldr	r3, [pc, #20]	; (bb0ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bb096:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bb098:	f04f 32ff 	mov.w	r2, #4294967295
   bb09c:	6042      	str	r2, [r0, #4]
   bb09e:	2204      	movs	r2, #4
   bb0a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bb0a2:	4a03      	ldr	r2, [pc, #12]	; (bb0b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bb0a4:	601a      	str	r2, [r3, #0]
   bb0a6:	bd10      	pop	{r4, pc}
   bb0a8:	2003e6f8 	.word	0x2003e6f8
   bb0ac:	2003e6f0 	.word	0x2003e6f0
   bb0b0:	000bf0f4 	.word	0x000bf0f4

000bb0b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb0b4:	4770      	bx	lr

000bb0b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb0b6:	7441      	strb	r1, [r0, #17]
}
   bb0b8:	4770      	bx	lr

000bb0ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb0ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb0bc:	7c00      	ldrb	r0, [r0, #16]
   bb0be:	f7fc fb35 	bl	b772c <hal_usart_available_data_for_write>
}
   bb0c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0c6:	bd08      	pop	{r3, pc}

000bb0c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb0c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb0ca:	7c00      	ldrb	r0, [r0, #16]
   bb0cc:	f7fc fb06 	bl	b76dc <hal_usart_available>
}
   bb0d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0d4:	bd08      	pop	{r3, pc}

000bb0d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb0d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb0d8:	7c00      	ldrb	r0, [r0, #16]
   bb0da:	f7fc fb0f 	bl	b76fc <hal_usart_peek>
}
   bb0de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0e2:	bd08      	pop	{r3, pc}

000bb0e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb0e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb0e6:	7c00      	ldrb	r0, [r0, #16]
   bb0e8:	f7fc fb00 	bl	b76ec <hal_usart_read>
}
   bb0ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0f0:	bd08      	pop	{r3, pc}

000bb0f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb0f2:	7c00      	ldrb	r0, [r0, #16]
   bb0f4:	f7fc bb0a 	b.w	b770c <hal_usart_flush>

000bb0f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb0fa:	7c45      	ldrb	r5, [r0, #17]
{
   bb0fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb0fe:	b12d      	cbz	r5, bb10c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb100:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb102:	b003      	add	sp, #12
   bb104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb108:	f7fc bae0 	b.w	b76cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb10c:	7c00      	ldrb	r0, [r0, #16]
   bb10e:	9101      	str	r1, [sp, #4]
   bb110:	f7fc fb0c 	bl	b772c <hal_usart_available_data_for_write>
   bb114:	2800      	cmp	r0, #0
   bb116:	9901      	ldr	r1, [sp, #4]
   bb118:	dcf2      	bgt.n	bb100 <_ZN11USARTSerial5writeEh+0x8>
}
   bb11a:	4628      	mov	r0, r5
   bb11c:	b003      	add	sp, #12
   bb11e:	bd30      	pop	{r4, r5, pc}

000bb120 <_ZN11USARTSerialD0Ev>:
   bb120:	b510      	push	{r4, lr}
   bb122:	2114      	movs	r1, #20
   bb124:	4604      	mov	r4, r0
   bb126:	f7f8 ffba 	bl	b409e <_ZdlPvj>
   bb12a:	4620      	mov	r0, r4
   bb12c:	bd10      	pop	{r4, pc}
	...

000bb130 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb130:	b510      	push	{r4, lr}
   bb132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb136:	4604      	mov	r4, r0
   bb138:	4608      	mov	r0, r1
   bb13a:	4611      	mov	r1, r2
   bb13c:	2200      	movs	r2, #0
   bb13e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb142:	4b04      	ldr	r3, [pc, #16]	; (bb154 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb144:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb146:	2301      	movs	r3, #1
  _serial = serial;
   bb148:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb14a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb14c:	f7fc fafe 	bl	b774c <hal_usart_init_ex>
}
   bb150:	4620      	mov	r0, r4
   bb152:	bd10      	pop	{r4, pc}
   bb154:	000bf130 	.word	0x000bf130

000bb158 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb158:	7c00      	ldrb	r0, [r0, #16]
   bb15a:	2300      	movs	r3, #0
   bb15c:	f7fc baee 	b.w	b773c <hal_usart_begin_config>

000bb160 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb160:	2200      	movs	r2, #0
   bb162:	f7ff bff9 	b.w	bb158 <_ZN11USARTSerial5beginEmm>

000bb166 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb166:	7c00      	ldrb	r0, [r0, #16]
   bb168:	f7fc baa8 	b.w	b76bc <hal_usart_end>

000bb16c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bb16c:	b510      	push	{r4, lr}
      if (_M_empty())
   bb16e:	6883      	ldr	r3, [r0, #8]
   bb170:	4604      	mov	r4, r0
   bb172:	b90b      	cbnz	r3, bb178 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bb174:	f000 fc00 	bl	bb978 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb178:	68c3      	ldr	r3, [r0, #12]
   bb17a:	4798      	blx	r3
      if (_M_manager)
   bb17c:	68a3      	ldr	r3, [r4, #8]
   bb17e:	b11b      	cbz	r3, bb188 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bb180:	2203      	movs	r2, #3
   bb182:	4621      	mov	r1, r4
   bb184:	4620      	mov	r0, r4
   bb186:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bb188:	4620      	mov	r0, r4
   bb18a:	2110      	movs	r1, #16
}
   bb18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bb190:	f7f8 bf85 	b.w	b409e <_ZdlPvj>

000bb194 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb194:	4770      	bx	lr

000bb196 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb198:	4606      	mov	r6, r0
   bb19a:	4615      	mov	r5, r2
   bb19c:	460c      	mov	r4, r1
   bb19e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb1a0:	42bc      	cmp	r4, r7
   bb1a2:	d006      	beq.n	bb1b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb1a4:	6833      	ldr	r3, [r6, #0]
   bb1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb1aa:	689b      	ldr	r3, [r3, #8]
   bb1ac:	4630      	mov	r0, r6
   bb1ae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb1b0:	e7f6      	b.n	bb1a0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb1b2:	4628      	mov	r0, r5
   bb1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb1b6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb1b6:	7c00      	ldrb	r0, [r0, #16]
   bb1b8:	2200      	movs	r2, #0
   bb1ba:	f7fc baef 	b.w	b779c <hal_i2c_write>

000bb1be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb1be:	7c00      	ldrb	r0, [r0, #16]
   bb1c0:	2100      	movs	r1, #0
   bb1c2:	f7fc baf3 	b.w	b77ac <hal_i2c_available>

000bb1c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb1c6:	7c00      	ldrb	r0, [r0, #16]
   bb1c8:	2100      	movs	r1, #0
   bb1ca:	f7fc baf7 	b.w	b77bc <hal_i2c_read>

000bb1ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb1ce:	7c00      	ldrb	r0, [r0, #16]
   bb1d0:	2100      	movs	r1, #0
   bb1d2:	f7fc bafb 	b.w	b77cc <hal_i2c_peek>

000bb1d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb1d6:	7c00      	ldrb	r0, [r0, #16]
   bb1d8:	2100      	movs	r1, #0
   bb1da:	f7fc baff 	b.w	b77dc <hal_i2c_flush>

000bb1de <_ZN7TwoWireD0Ev>:
   bb1de:	b510      	push	{r4, lr}
   bb1e0:	2114      	movs	r1, #20
   bb1e2:	4604      	mov	r4, r0
   bb1e4:	f7f8 ff5b 	bl	b409e <_ZdlPvj>
   bb1e8:	4620      	mov	r0, r4
   bb1ea:	bd10      	pop	{r4, pc}

000bb1ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb1ec:	b510      	push	{r4, lr}
   bb1ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb1f2:	4604      	mov	r4, r0
   bb1f4:	4608      	mov	r0, r1
   bb1f6:	2100      	movs	r1, #0
   bb1f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb1fc:	4b03      	ldr	r3, [pc, #12]	; (bb20c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bb1fe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bb200:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bb202:	4611      	mov	r1, r2
   bb204:	f7fc fafa 	bl	b77fc <hal_i2c_init>
}
   bb208:	4620      	mov	r0, r4
   bb20a:	bd10      	pop	{r4, pc}
   bb20c:	000bf160 	.word	0x000bf160

000bb210 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bb210:	7c00      	ldrb	r0, [r0, #16]
   bb212:	2200      	movs	r2, #0
   bb214:	f7fc baa2 	b.w	b775c <hal_i2c_set_speed>

000bb218 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb218:	2300      	movs	r3, #0
   bb21a:	7c00      	ldrb	r0, [r0, #16]
   bb21c:	461a      	mov	r2, r3
   bb21e:	4619      	mov	r1, r3
   bb220:	f7fc baa4 	b.w	b776c <hal_i2c_begin>

000bb224 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bb224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bb226:	2200      	movs	r2, #0
   bb228:	2314      	movs	r3, #20
   bb22a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bb22e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bb232:	780b      	ldrb	r3, [r1, #0]
   bb234:	f88d 3008 	strb.w	r3, [sp, #8]
   bb238:	684b      	ldr	r3, [r1, #4]
   bb23a:	9303      	str	r3, [sp, #12]
   bb23c:	68cb      	ldr	r3, [r1, #12]
   bb23e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bb240:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bb242:	7a0b      	ldrb	r3, [r1, #8]
   bb244:	9305      	str	r3, [sp, #20]
   bb246:	a901      	add	r1, sp, #4
   bb248:	f7fc fae0 	bl	b780c <hal_i2c_request_ex>
}
   bb24c:	b007      	add	sp, #28
   bb24e:	f85d fb04 	ldr.w	pc, [sp], #4

000bb252 <_ZN7TwoWire11requestFromEhjh>:
{
   bb252:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bb254:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bb256:	f88d 1000 	strb.w	r1, [sp]
   bb25a:	f04f 0164 	mov.w	r1, #100	; 0x64
   bb25e:	9103      	str	r1, [sp, #12]
   bb260:	bf18      	it	ne
   bb262:	2301      	movne	r3, #1
   bb264:	4669      	mov	r1, sp
    size_ = size;
   bb266:	9201      	str	r2, [sp, #4]
   bb268:	f88d 3008 	strb.w	r3, [sp, #8]
   bb26c:	f7ff ffda 	bl	bb224 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bb270:	b005      	add	sp, #20
   bb272:	f85d fb04 	ldr.w	pc, [sp], #4

000bb276 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb276:	7c00      	ldrb	r0, [r0, #16]
   bb278:	2200      	movs	r2, #0
   bb27a:	f7fc ba7f 	b.w	b777c <hal_i2c_begin_transmission>

000bb27e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb27e:	b2c9      	uxtb	r1, r1
   bb280:	f7ff bff9 	b.w	bb276 <_ZN7TwoWire17beginTransmissionEh>

000bb284 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb284:	7c00      	ldrb	r0, [r0, #16]
   bb286:	2200      	movs	r2, #0
   bb288:	f7fc ba80 	b.w	b778c <hal_i2c_end_transmission>

000bb28c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb28c:	2101      	movs	r1, #1
   bb28e:	f7ff bff9 	b.w	bb284 <_ZN7TwoWire15endTransmissionEh>

000bb292 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb292:	2300      	movs	r3, #0
   bb294:	6840      	ldr	r0, [r0, #4]
   bb296:	461a      	mov	r2, r3
   bb298:	f7fc bbee 	b.w	b7a78 <network_connect>

000bb29c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb29c:	6840      	ldr	r0, [r0, #4]
   bb29e:	2200      	movs	r2, #0
   bb2a0:	2102      	movs	r1, #2
   bb2a2:	f7fc bbf9 	b.w	b7a98 <network_disconnect>

000bb2a6 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb2a6:	2200      	movs	r2, #0
   bb2a8:	6840      	ldr	r0, [r0, #4]
   bb2aa:	4611      	mov	r1, r2
   bb2ac:	f7fc bbec 	b.w	b7a88 <network_connecting>

000bb2b0 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb2b0:	2200      	movs	r2, #0
   bb2b2:	6840      	ldr	r0, [r0, #4]
   bb2b4:	4611      	mov	r1, r2
   bb2b6:	f7fc bbf7 	b.w	b7aa8 <network_ready>

000bb2ba <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb2ba:	2300      	movs	r3, #0
   bb2bc:	6840      	ldr	r0, [r0, #4]
   bb2be:	461a      	mov	r2, r3
   bb2c0:	4619      	mov	r1, r3
   bb2c2:	f7fc bbf9 	b.w	b7ab8 <network_on>

000bb2c6 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb2c6:	2300      	movs	r3, #0
   bb2c8:	6840      	ldr	r0, [r0, #4]
   bb2ca:	461a      	mov	r2, r3
   bb2cc:	4619      	mov	r1, r3
   bb2ce:	f7fc bbfb 	b.w	b7ac8 <network_off>

000bb2d2 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb2d2:	6840      	ldr	r0, [r0, #4]
   bb2d4:	2100      	movs	r1, #0
   bb2d6:	f7fc bc1f 	b.w	b7b18 <network_is_on>

000bb2da <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb2da:	6840      	ldr	r0, [r0, #4]
   bb2dc:	2100      	movs	r1, #0
   bb2de:	f7fc bc23 	b.w	b7b28 <network_is_off>

000bb2e2 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb2e2:	6840      	ldr	r0, [r0, #4]
   bb2e4:	2200      	movs	r2, #0
   bb2e6:	f081 0101 	eor.w	r1, r1, #1
   bb2ea:	f7fc bbf5 	b.w	b7ad8 <network_listen>

000bb2ee <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb2ee:	6840      	ldr	r0, [r0, #4]
   bb2f0:	2200      	movs	r2, #0
   bb2f2:	f7fc bc01 	b.w	b7af8 <network_set_listen_timeout>

000bb2f6 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb2f6:	2200      	movs	r2, #0
   bb2f8:	6840      	ldr	r0, [r0, #4]
   bb2fa:	4611      	mov	r1, r2
   bb2fc:	f7fc bc04 	b.w	b7b08 <network_get_listen_timeout>

000bb300 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb300:	2200      	movs	r2, #0
   bb302:	6840      	ldr	r0, [r0, #4]
   bb304:	4611      	mov	r1, r2
   bb306:	f7fc bbef 	b.w	b7ae8 <network_listening>

000bb30a <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb30a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb30e:	b095      	sub	sp, #84	; 0x54
   bb310:	4614      	mov	r4, r2
   bb312:	460d      	mov	r5, r1
   bb314:	4607      	mov	r7, r0
    IPAddress addr;
   bb316:	f7ff fdb7 	bl	bae88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb31a:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb31c:	221c      	movs	r2, #28
   bb31e:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb320:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb322:	f001 f971 	bl	bc608 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb326:	2340      	movs	r3, #64	; 0x40
   bb328:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb32a:	4620      	mov	r0, r4
   bb32c:	466b      	mov	r3, sp
   bb32e:	aa0c      	add	r2, sp, #48	; 0x30
   bb330:	2100      	movs	r1, #0
   bb332:	f7fc f879 	bl	b7428 <netdb_getaddrinfo>
    if (!r) {
   bb336:	4604      	mov	r4, r0
   bb338:	2800      	cmp	r0, #0
   bb33a:	d14b      	bne.n	bb3d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb33c:	4602      	mov	r2, r0
   bb33e:	2101      	movs	r1, #1
   bb340:	6868      	ldr	r0, [r5, #4]
   bb342:	f7fc fbb1 	bl	b7aa8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb346:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb348:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb34a:	4622      	mov	r2, r4
   bb34c:	6868      	ldr	r0, [r5, #4]
   bb34e:	f7fc fbab 	bl	b7aa8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb352:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb354:	4681      	mov	r9, r0
        bool ok = false;
   bb356:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb358:	2e00      	cmp	r6, #0
   bb35a:	d03b      	beq.n	bb3d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb35c:	2900      	cmp	r1, #0
   bb35e:	d139      	bne.n	bb3d4 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb360:	6873      	ldr	r3, [r6, #4]
   bb362:	2b02      	cmp	r3, #2
   bb364:	d003      	beq.n	bb36e <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb366:	2b0a      	cmp	r3, #10
   bb368:	d011      	beq.n	bb38e <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb36a:	69f6      	ldr	r6, [r6, #28]
   bb36c:	e7f4      	b.n	bb358 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb36e:	f1b8 0f00 	cmp.w	r8, #0
   bb372:	d0fa      	beq.n	bb36a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb374:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb376:	a806      	add	r0, sp, #24
   bb378:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb37a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb37c:	f7ff fdb2 	bl	baee4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb382:	1d3c      	adds	r4, r7, #4
   bb384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb386:	682b      	ldr	r3, [r5, #0]
   bb388:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb38a:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb38c:	e7ed      	b.n	bb36a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb38e:	f1b9 0f00 	cmp.w	r9, #0
   bb392:	d0ea      	beq.n	bb36a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb394:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb396:	2210      	movs	r2, #16
   bb398:	a801      	add	r0, sp, #4
   bb39a:	f001 f935 	bl	bc608 <memset>
                    a.v = 6;
   bb39e:	2306      	movs	r3, #6
   bb3a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb3a4:	ad01      	add	r5, sp, #4
   bb3a6:	f104 0308 	add.w	r3, r4, #8
   bb3aa:	3418      	adds	r4, #24
   bb3ac:	6818      	ldr	r0, [r3, #0]
   bb3ae:	6859      	ldr	r1, [r3, #4]
   bb3b0:	462a      	mov	r2, r5
   bb3b2:	c203      	stmia	r2!, {r0, r1}
   bb3b4:	3308      	adds	r3, #8
   bb3b6:	42a3      	cmp	r3, r4
   bb3b8:	4615      	mov	r5, r2
   bb3ba:	d1f7      	bne.n	bb3ac <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb3bc:	a901      	add	r1, sp, #4
   bb3be:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb3c0:	ad07      	add	r5, sp, #28
   bb3c2:	f7ff fd6f 	bl	baea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb3c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb3c8:	1d3c      	adds	r4, r7, #4
   bb3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb3cc:	682b      	ldr	r3, [r5, #0]
   bb3ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb3d0:	4649      	mov	r1, r9
   bb3d2:	e7ca      	b.n	bb36a <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb3d4:	9800      	ldr	r0, [sp, #0]
   bb3d6:	f7fc f81f 	bl	b7418 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb3da:	4638      	mov	r0, r7
   bb3dc:	b015      	add	sp, #84	; 0x54
   bb3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000bb3e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb3e4:	4b02      	ldr	r3, [pc, #8]	; (bb3f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb3e6:	4a03      	ldr	r2, [pc, #12]	; (bb3f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb3e8:	601a      	str	r2, [r3, #0]
   bb3ea:	2200      	movs	r2, #0
   bb3ec:	605a      	str	r2, [r3, #4]

} // spark
   bb3ee:	4770      	bx	lr
   bb3f0:	2003e720 	.word	0x2003e720
   bb3f4:	000bf188 	.word	0x000bf188

000bb3f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bb3f8:	f100 0310 	add.w	r3, r0, #16
   bb3fc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bb3fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bb402:	2901      	cmp	r1, #1
   bb404:	4618      	mov	r0, r3
   bb406:	d108      	bne.n	bb41a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bb408:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bb40c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bb410:	3a01      	subs	r2, #1
   bb412:	f103 0310 	add.w	r3, r3, #16
   bb416:	d1f2      	bne.n	bb3fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   bb418:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   bb41a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   bb41c:	bf04      	itt	eq
   bb41e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   bb422:	1852      	addeq	r2, r2, r1
   bb424:	e7f4      	b.n	bb410 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000bb426 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   bb426:	b40e      	push	{r1, r2, r3}
   bb428:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb42a:	b088      	sub	sp, #32
   bb42c:	af00      	add	r7, sp, #0
   bb42e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb432:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb434:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb438:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   bb43a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb43c:	462b      	mov	r3, r5
   bb43e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   bb440:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb442:	f7fc fbd1 	bl	b7be8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   bb446:	280f      	cmp	r0, #15
   bb448:	687a      	ldr	r2, [r7, #4]
   bb44a:	d91a      	bls.n	bb482 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   bb44c:	f100 0308 	add.w	r3, r0, #8
   bb450:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   bb454:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   bb456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb45a:	1c41      	adds	r1, r0, #1
   bb45c:	462b      	mov	r3, r5
   bb45e:	4668      	mov	r0, sp
        va_start(args, fmt);
   bb460:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   bb462:	f7fc fbc1 	bl	b7be8 <vsnprintf>
        if (n > 0) {
   bb466:	1e02      	subs	r2, r0, #0
   bb468:	dd04      	ble.n	bb474 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   bb46a:	6823      	ldr	r3, [r4, #0]
   bb46c:	4669      	mov	r1, sp
   bb46e:	689b      	ldr	r3, [r3, #8]
   bb470:	4620      	mov	r0, r4
   bb472:	4798      	blx	r3
   bb474:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   bb476:	3720      	adds	r7, #32
   bb478:	46bd      	mov	sp, r7
   bb47a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb47e:	b003      	add	sp, #12
   bb480:	4770      	bx	lr
    } else if (n > 0) {
   bb482:	2800      	cmp	r0, #0
   bb484:	d0f7      	beq.n	bb476 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   bb486:	6823      	ldr	r3, [r4, #0]
   bb488:	4602      	mov	r2, r0
   bb48a:	689b      	ldr	r3, [r3, #8]
   bb48c:	f107 0110 	add.w	r1, r7, #16
   bb490:	4620      	mov	r0, r4
   bb492:	4798      	blx	r3
}
   bb494:	e7ef      	b.n	bb476 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000bb496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb496:	b538      	push	{r3, r4, r5, lr}
   bb498:	680b      	ldr	r3, [r1, #0]
   bb49a:	6003      	str	r3, [r0, #0]
   bb49c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   bb49e:	6843      	ldr	r3, [r0, #4]
   bb4a0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb4a2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   bb4a4:	d008      	beq.n	bb4b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   bb4a6:	b115      	cbz	r5, bb4ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   bb4a8:	686b      	ldr	r3, [r5, #4]
   bb4aa:	3301      	adds	r3, #1
   bb4ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   bb4ae:	6860      	ldr	r0, [r4, #4]
   bb4b0:	b108      	cbz	r0, bb4b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   bb4b2:	f7fc ff5a 	bl	b836a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   bb4b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb4b8:	bd38      	pop	{r3, r4, r5, pc}

000bb4ba <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   bb4ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bb4bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   bb4be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bb4c2:	689b      	ldr	r3, [r3, #8]
   bb4c4:	2201      	movs	r2, #1
   bb4c6:	f10d 0107 	add.w	r1, sp, #7
   bb4ca:	4798      	blx	r3
}
   bb4cc:	b003      	add	sp, #12
   bb4ce:	f85d fb04 	ldr.w	pc, [sp], #4

000bb4d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb4d2:	460b      	mov	r3, r1
   bb4d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   bb4d6:	2200      	movs	r2, #0
   bb4d8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   bb4da:	e9c0 2200 	strd	r2, r2, [r0]
   bb4de:	4604      	mov	r4, r0
        t_ = t;
   bb4e0:	6083      	str	r3, [r0, #8]
    if (t) {
   bb4e2:	b90b      	cbnz	r3, bb4e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   bb4e4:	4620      	mov	r0, r4
   bb4e6:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   bb4e8:	f7ff ffd5 	bl	bb496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   bb4ec:	e7fa      	b.n	bb4e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000bb4ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   bb4ee:	6883      	ldr	r3, [r0, #8]
   bb4f0:	b1eb      	cbz	r3, bb52e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   bb4f2:	781a      	ldrb	r2, [r3, #0]
   bb4f4:	2a03      	cmp	r2, #3
   bb4f6:	d81a      	bhi.n	bb52e <_ZNK5spark9JSONValue4typeEv+0x40>
   bb4f8:	e8df f002 	tbb	[pc, r2]
   bb4fc:	1b021704 	.word	0x1b021704
   bb500:	2005      	movs	r0, #5
   bb502:	4770      	bx	lr
        const char c = d_->json[t_->start];
   bb504:	6802      	ldr	r2, [r0, #0]
   bb506:	685b      	ldr	r3, [r3, #4]
   bb508:	6852      	ldr	r2, [r2, #4]
   bb50a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   bb50c:	282d      	cmp	r0, #45	; 0x2d
   bb50e:	d012      	beq.n	bb536 <_ZNK5spark9JSONValue4typeEv+0x48>
   bb510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb514:	2b09      	cmp	r3, #9
   bb516:	d90e      	bls.n	bb536 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   bb518:	2874      	cmp	r0, #116	; 0x74
   bb51a:	d00e      	beq.n	bb53a <_ZNK5spark9JSONValue4typeEv+0x4c>
   bb51c:	2866      	cmp	r0, #102	; 0x66
   bb51e:	d00c      	beq.n	bb53a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   bb520:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   bb524:	4258      	negs	r0, r3
   bb526:	4158      	adcs	r0, r3
   bb528:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   bb52a:	2006      	movs	r0, #6
   bb52c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   bb52e:	2000      	movs	r0, #0
   bb530:	4770      	bx	lr
        return JSON_TYPE_STRING;
   bb532:	2004      	movs	r0, #4
   bb534:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   bb536:	2003      	movs	r0, #3
   bb538:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   bb53a:	2002      	movs	r0, #2
}
   bb53c:	4770      	bx	lr

000bb53e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   bb53e:	b510      	push	{r4, lr}
   bb540:	4604      	mov	r4, r0
    switch (type()) {
   bb542:	f7ff ffd4 	bl	bb4ee <_ZNK5spark9JSONValue4typeEv>
   bb546:	2802      	cmp	r0, #2
   bb548:	d00e      	beq.n	bb568 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   bb54a:	1ec3      	subs	r3, r0, #3
   bb54c:	b2db      	uxtb	r3, r3
   bb54e:	2b01      	cmp	r3, #1
   bb550:	d814      	bhi.n	bb57c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   bb552:	6822      	ldr	r2, [r4, #0]
   bb554:	68a3      	ldr	r3, [r4, #8]
   bb556:	6850      	ldr	r0, [r2, #4]
   bb558:	685b      	ldr	r3, [r3, #4]
}
   bb55a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   bb55e:	220a      	movs	r2, #10
   bb560:	2100      	movs	r1, #0
   bb562:	4418      	add	r0, r3
   bb564:	f001 bff0 	b.w	bd548 <strtol>
        const char* const s = d_->json + t_->start;
   bb568:	6822      	ldr	r2, [r4, #0]
   bb56a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   bb56c:	6852      	ldr	r2, [r2, #4]
   bb56e:	685b      	ldr	r3, [r3, #4]
   bb570:	5cd0      	ldrb	r0, [r2, r3]
   bb572:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   bb576:	4258      	negs	r0, r3
   bb578:	4158      	adcs	r0, r3
}
   bb57a:	bd10      	pop	{r4, pc}
    switch (type()) {
   bb57c:	2000      	movs	r0, #0
   bb57e:	e7fc      	b.n	bb57a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000bb580 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb580:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb582:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   bb584:	e9c0 3300 	strd	r3, r3, [r0]
   bb588:	4604      	mov	r4, r0
        n_(0) {
   bb58a:	480e      	ldr	r0, [pc, #56]	; (bb5c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   bb58c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   bb590:	b1a9      	cbz	r1, bb5be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   bb592:	780b      	ldrb	r3, [r1, #0]
   bb594:	2b03      	cmp	r3, #3
   bb596:	d006      	beq.n	bb5a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   bb598:	b98b      	cbnz	r3, bb5be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   bb59a:	6813      	ldr	r3, [r2, #0]
   bb59c:	6858      	ldr	r0, [r3, #4]
   bb59e:	684b      	ldr	r3, [r1, #4]
   bb5a0:	5cc3      	ldrb	r3, [r0, r3]
   bb5a2:	2b6e      	cmp	r3, #110	; 0x6e
   bb5a4:	d007      	beq.n	bb5b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   bb5a6:	6813      	ldr	r3, [r2, #0]
   bb5a8:	684d      	ldr	r5, [r1, #4]
   bb5aa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   bb5ac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   bb5ae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   bb5b0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   bb5b2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   bb5b4:	60e3      	str	r3, [r4, #12]
   bb5b6:	4611      	mov	r1, r2
   bb5b8:	4620      	mov	r0, r4
   bb5ba:	f7ff ff6c 	bl	bb496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb5be:	4620      	mov	r0, r4
   bb5c0:	bd38      	pop	{r3, r4, r5, pc}
   bb5c2:	bf00      	nop
   bb5c4:	000befe0 	.word	0x000befe0

000bb5c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   bb5c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   bb5ca:	2500      	movs	r5, #0
   bb5cc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   bb5ce:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   bb5d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   bb5d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   bb5da:	4604      	mov	r4, r0
   bb5dc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   bb5de:	b14b      	cbz	r3, bb5f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   bb5e0:	781a      	ldrb	r2, [r3, #0]
   bb5e2:	2a01      	cmp	r2, #1
   bb5e4:	d106      	bne.n	bb5f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   bb5e6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   bb5ea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   bb5ec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   bb5ee:	6143      	str	r3, [r0, #20]
   bb5f0:	f7ff ff51 	bl	bb496 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   bb5f4:	4620      	mov	r0, r4
   bb5f6:	bd38      	pop	{r3, r4, r5, pc}

000bb5f8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   bb5f8:	b510      	push	{r4, lr}
    if (!n_) {
   bb5fa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   bb5fc:	4604      	mov	r4, r0
    if (!n_) {
   bb5fe:	b163      	cbz	r3, bb61a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   bb600:	6880      	ldr	r0, [r0, #8]
   bb602:	60e0      	str	r0, [r4, #12]
    --n_;
   bb604:	3b01      	subs	r3, #1
    ++t_;
   bb606:	3010      	adds	r0, #16
   bb608:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   bb60a:	6120      	str	r0, [r4, #16]
    --n_;
   bb60c:	6163      	str	r3, [r4, #20]
    if (n_) {
   bb60e:	b113      	cbz	r3, bb616 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   bb610:	f7ff fef2 	bl	bb3f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   bb614:	60a0      	str	r0, [r4, #8]
    return true;
   bb616:	2001      	movs	r0, #1
   bb618:	e000      	b.n	bb61c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   bb61a:	4618      	mov	r0, r3
}
   bb61c:	bd10      	pop	{r4, pc}

000bb61e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb61e:	b510      	push	{r4, lr}
    write('}');
   bb620:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   bb622:	4604      	mov	r4, r0
    write('}');
   bb624:	f7ff ff49 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   bb628:	2301      	movs	r3, #1
   bb62a:	7123      	strb	r3, [r4, #4]
}
   bb62c:	4620      	mov	r0, r4
   bb62e:	bd10      	pop	{r4, pc}

000bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   bb630:	b508      	push	{r3, lr}
    switch (state_) {
   bb632:	7903      	ldrb	r3, [r0, #4]
   bb634:	2b01      	cmp	r3, #1
   bb636:	d002      	beq.n	bb63e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   bb638:	2b02      	cmp	r3, #2
   bb63a:	d004      	beq.n	bb646 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   bb63c:	bd08      	pop	{r3, pc}
        write(',');
   bb63e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   bb640:	f7ff ff3b 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
}
   bb644:	e7fa      	b.n	bb63c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   bb646:	213a      	movs	r1, #58	; 0x3a
   bb648:	e7fa      	b.n	bb640 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000bb64a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   bb64a:	b510      	push	{r4, lr}
   bb64c:	4604      	mov	r4, r0
    writeSeparator();
   bb64e:	f7ff ffef 	bl	bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   bb652:	4620      	mov	r0, r4
   bb654:	217b      	movs	r1, #123	; 0x7b
   bb656:	f7ff ff30 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   bb65a:	2300      	movs	r3, #0
   bb65c:	7123      	strb	r3, [r4, #4]
}
   bb65e:	4620      	mov	r0, r4
   bb660:	bd10      	pop	{r4, pc}
	...

000bb664 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   bb664:	b513      	push	{r0, r1, r4, lr}
   bb666:	4604      	mov	r4, r0
   bb668:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb66a:	f7ff ffe1 	bl	bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   bb66e:	6823      	ldr	r3, [r4, #0]
   bb670:	9a01      	ldr	r2, [sp, #4]
   bb672:	68db      	ldr	r3, [r3, #12]
   bb674:	4903      	ldr	r1, [pc, #12]	; (bb684 <_ZN5spark10JSONWriter5valueEi+0x20>)
   bb676:	4620      	mov	r0, r4
   bb678:	4798      	blx	r3
    state_ = NEXT;
   bb67a:	2301      	movs	r3, #1
}
   bb67c:	4620      	mov	r0, r4
    state_ = NEXT;
   bb67e:	7123      	strb	r3, [r4, #4]
}
   bb680:	b002      	add	sp, #8
   bb682:	bd10      	pop	{r4, pc}
   bb684:	000be88c 	.word	0x000be88c

000bb688 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   bb688:	b513      	push	{r0, r1, r4, lr}
   bb68a:	4604      	mov	r4, r0
   bb68c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   bb68e:	f7ff ffcf 	bl	bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   bb692:	6823      	ldr	r3, [r4, #0]
   bb694:	9a01      	ldr	r2, [sp, #4]
   bb696:	68db      	ldr	r3, [r3, #12]
   bb698:	4903      	ldr	r1, [pc, #12]	; (bb6a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   bb69a:	4620      	mov	r0, r4
   bb69c:	4798      	blx	r3
    state_ = NEXT;
   bb69e:	2301      	movs	r3, #1
}
   bb6a0:	4620      	mov	r0, r4
    state_ = NEXT;
   bb6a2:	7123      	strb	r3, [r4, #4]
}
   bb6a4:	b002      	add	sp, #8
   bb6a6:	bd10      	pop	{r4, pc}
   bb6a8:	000bf1bc 	.word	0x000bf1bc

000bb6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb6b0:	460d      	mov	r5, r1
    write('"');
   bb6b2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   bb6b4:	4690      	mov	r8, r2
   bb6b6:	4604      	mov	r4, r0
    write('"');
   bb6b8:	f7ff feff 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   bb6bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bb764 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   bb6c0:	44a8      	add	r8, r5
    const char *s = str;
   bb6c2:	462f      	mov	r7, r5
    while (s != end) {
   bb6c4:	4547      	cmp	r7, r8
   bb6c6:	46ba      	mov	sl, r7
   bb6c8:	d03d      	beq.n	bb746 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   bb6ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   bb6ce:	2e22      	cmp	r6, #34	; 0x22
   bb6d0:	d006      	beq.n	bb6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb6d2:	2e5c      	cmp	r6, #92	; 0x5c
   bb6d4:	d004      	beq.n	bb6e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   bb6d6:	4630      	mov	r0, r6
   bb6d8:	f000 ff56 	bl	bc588 <isprint>
   bb6dc:	2800      	cmp	r0, #0
   bb6de:	d1f1      	bne.n	bb6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   bb6e0:	6823      	ldr	r3, [r4, #0]
   bb6e2:	ebaa 0205 	sub.w	r2, sl, r5
   bb6e6:	689b      	ldr	r3, [r3, #8]
   bb6e8:	4629      	mov	r1, r5
   bb6ea:	4620      	mov	r0, r4
   bb6ec:	4798      	blx	r3
            write('\\');
   bb6ee:	215c      	movs	r1, #92	; 0x5c
   bb6f0:	4620      	mov	r0, r4
   bb6f2:	f7ff fee2 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   bb6f6:	2e0d      	cmp	r6, #13
   bb6f8:	d80a      	bhi.n	bb710 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   bb6fa:	2e07      	cmp	r6, #7
   bb6fc:	d91c      	bls.n	bb738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb6fe:	f1a6 0308 	sub.w	r3, r6, #8
   bb702:	2b05      	cmp	r3, #5
   bb704:	d818      	bhi.n	bb738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   bb706:	e8df f003 	tbb	[pc, r3]
   bb70a:	0f0d      	.short	0x0f0d
   bb70c:	15131711 	.word	0x15131711
   bb710:	2e22      	cmp	r6, #34	; 0x22
   bb712:	d001      	beq.n	bb718 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   bb714:	2e5c      	cmp	r6, #92	; 0x5c
   bb716:	d10f      	bne.n	bb738 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   bb718:	4631      	mov	r1, r6
                write('b');
   bb71a:	4620      	mov	r0, r4
   bb71c:	f7ff fecd 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   bb720:	463d      	mov	r5, r7
    while (s != end) {
   bb722:	e7cf      	b.n	bb6c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   bb724:	2162      	movs	r1, #98	; 0x62
   bb726:	e7f8      	b.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   bb728:	2174      	movs	r1, #116	; 0x74
   bb72a:	e7f6      	b.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   bb72c:	216e      	movs	r1, #110	; 0x6e
   bb72e:	e7f4      	b.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   bb730:	2166      	movs	r1, #102	; 0x66
   bb732:	e7f2      	b.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   bb734:	2172      	movs	r1, #114	; 0x72
   bb736:	e7f0      	b.n	bb71a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   bb738:	6823      	ldr	r3, [r4, #0]
   bb73a:	4632      	mov	r2, r6
   bb73c:	68db      	ldr	r3, [r3, #12]
   bb73e:	4649      	mov	r1, r9
   bb740:	4620      	mov	r0, r4
   bb742:	4798      	blx	r3
                break;
   bb744:	e7ec      	b.n	bb720 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   bb746:	42bd      	cmp	r5, r7
   bb748:	d005      	beq.n	bb756 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   bb74a:	6823      	ldr	r3, [r4, #0]
   bb74c:	1b7a      	subs	r2, r7, r5
   bb74e:	689b      	ldr	r3, [r3, #8]
   bb750:	4629      	mov	r1, r5
   bb752:	4620      	mov	r0, r4
   bb754:	4798      	blx	r3
    }
    write('"');
   bb756:	2122      	movs	r1, #34	; 0x22
   bb758:	4620      	mov	r0, r4
   bb75a:	f7ff feae 	bl	bb4ba <_ZN5spark10JSONWriter5writeEc>
}
   bb75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb762:	bf00      	nop
   bb764:	000bf1bf 	.word	0x000bf1bf

000bb768 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   bb768:	b513      	push	{r0, r1, r4, lr}
   bb76a:	4604      	mov	r4, r0
   bb76c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bb770:	f7ff ff5e 	bl	bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   bb774:	4620      	mov	r0, r4
   bb776:	e9dd 2100 	ldrd	r2, r1, [sp]
   bb77a:	f7ff ff97 	bl	bb6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   bb77e:	2302      	movs	r3, #2
}
   bb780:	4620      	mov	r0, r4
    state_ = VALUE;
   bb782:	7123      	strb	r3, [r4, #4]
}
   bb784:	b002      	add	sp, #8
   bb786:	bd10      	pop	{r4, pc}

000bb788 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   bb788:	b513      	push	{r0, r1, r4, lr}
   bb78a:	4604      	mov	r4, r0
   bb78c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   bb790:	f7ff ff4e 	bl	bb630 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   bb794:	4620      	mov	r0, r4
   bb796:	e9dd 2100 	ldrd	r2, r1, [sp]
   bb79a:	f7ff ff87 	bl	bb6ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   bb79e:	2301      	movs	r3, #1
}
   bb7a0:	4620      	mov	r0, r4
    state_ = NEXT;
   bb7a2:	7123      	strb	r3, [r4, #4]
}
   bb7a4:	b002      	add	sp, #8
   bb7a6:	bd10      	pop	{r4, pc}

000bb7a8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb7a8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb7aa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb7ac:	d902      	bls.n	bb7b4 <pinAvailable+0xc>
    return false;
   bb7ae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb7b0:	b002      	add	sp, #8
   bb7b2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb7b4:	f1a0 030b 	sub.w	r3, r0, #11
   bb7b8:	2b02      	cmp	r3, #2
   bb7ba:	d81a      	bhi.n	bb7f2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb7bc:	4c17      	ldr	r4, [pc, #92]	; (bb81c <pinAvailable+0x74>)
   bb7be:	7821      	ldrb	r1, [r4, #0]
   bb7c0:	f3bf 8f5b 	dmb	ish
   bb7c4:	f011 0101 	ands.w	r1, r1, #1
   bb7c8:	d10b      	bne.n	bb7e2 <pinAvailable+0x3a>
   bb7ca:	4620      	mov	r0, r4
   bb7cc:	9101      	str	r1, [sp, #4]
   bb7ce:	f7f8 fc75 	bl	b40bc <__cxa_guard_acquire>
   bb7d2:	9901      	ldr	r1, [sp, #4]
   bb7d4:	b128      	cbz	r0, bb7e2 <pinAvailable+0x3a>
   bb7d6:	4812      	ldr	r0, [pc, #72]	; (bb820 <pinAvailable+0x78>)
   bb7d8:	f7fc faaa 	bl	b7d30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb7dc:	4620      	mov	r0, r4
   bb7de:	f7f8 fc72 	bl	b40c6 <__cxa_guard_release>
   bb7e2:	4b0f      	ldr	r3, [pc, #60]	; (bb820 <pinAvailable+0x78>)
   bb7e4:	7818      	ldrb	r0, [r3, #0]
   bb7e6:	f7fc f839 	bl	b785c <hal_spi_is_enabled>
   bb7ea:	2800      	cmp	r0, #0
   bb7ec:	d1df      	bne.n	bb7ae <pinAvailable+0x6>
  return true; // 'pin' is available
   bb7ee:	2001      	movs	r0, #1
   bb7f0:	e7de      	b.n	bb7b0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb7f2:	2801      	cmp	r0, #1
   bb7f4:	d809      	bhi.n	bb80a <pinAvailable+0x62>
   bb7f6:	f000 f897 	bl	bb928 <_Z19__fetch_global_Wirev>
   bb7fa:	2100      	movs	r1, #0
   bb7fc:	7c00      	ldrb	r0, [r0, #16]
   bb7fe:	f7fb fff5 	bl	b77ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb802:	f080 0001 	eor.w	r0, r0, #1
   bb806:	b2c0      	uxtb	r0, r0
   bb808:	e7d2      	b.n	bb7b0 <pinAvailable+0x8>
   bb80a:	3809      	subs	r0, #9
   bb80c:	2801      	cmp	r0, #1
   bb80e:	d8ee      	bhi.n	bb7ee <pinAvailable+0x46>
   bb810:	f000 f84e 	bl	bb8b0 <_Z22__fetch_global_Serial1v>
   bb814:	7c00      	ldrb	r0, [r0, #16]
   bb816:	f7fb ff81 	bl	b771c <hal_usart_is_enabled>
   bb81a:	e7f2      	b.n	bb802 <pinAvailable+0x5a>
   bb81c:	2003de0c 	.word	0x2003de0c
   bb820:	2003de10 	.word	0x2003de10

000bb824 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb824:	2823      	cmp	r0, #35	; 0x23
{
   bb826:	b538      	push	{r3, r4, r5, lr}
   bb828:	4604      	mov	r4, r0
   bb82a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb82c:	d80a      	bhi.n	bb844 <pinMode+0x20>
   bb82e:	29ff      	cmp	r1, #255	; 0xff
   bb830:	d008      	beq.n	bb844 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb832:	f7ff ffb9 	bl	bb7a8 <pinAvailable>
   bb836:	b128      	cbz	r0, bb844 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb838:	4629      	mov	r1, r5
   bb83a:	4620      	mov	r0, r4
}
   bb83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb840:	f7fb be02 	b.w	b7448 <HAL_Pin_Mode>
}
   bb844:	bd38      	pop	{r3, r4, r5, pc}

000bb846 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb846:	b538      	push	{r3, r4, r5, lr}
   bb848:	4604      	mov	r4, r0
   bb84a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb84c:	f7fb fe04 	bl	b7458 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb850:	28ff      	cmp	r0, #255	; 0xff
   bb852:	d010      	beq.n	bb876 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb854:	2806      	cmp	r0, #6
   bb856:	d804      	bhi.n	bb862 <digitalWrite+0x1c>
   bb858:	234d      	movs	r3, #77	; 0x4d
   bb85a:	fa23 f000 	lsr.w	r0, r3, r0
   bb85e:	07c3      	lsls	r3, r0, #31
   bb860:	d409      	bmi.n	bb876 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb862:	4620      	mov	r0, r4
   bb864:	f7ff ffa0 	bl	bb7a8 <pinAvailable>
   bb868:	b128      	cbz	r0, bb876 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb86a:	4629      	mov	r1, r5
   bb86c:	4620      	mov	r0, r4
}
   bb86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb872:	f7fb bdf9 	b.w	b7468 <HAL_GPIO_Write>
}
   bb876:	bd38      	pop	{r3, r4, r5, pc}

000bb878 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb878:	4770      	bx	lr
	...

000bb87c <_Z20acquireSerial1Bufferv>:
{
   bb87c:	b538      	push	{r3, r4, r5, lr}
   bb87e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb880:	2514      	movs	r5, #20
   bb882:	462a      	mov	r2, r5
   bb884:	2100      	movs	r1, #0
   bb886:	f000 febf 	bl	bc608 <memset>
   bb88a:	8025      	strh	r5, [r4, #0]
   bb88c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb88e:	4907      	ldr	r1, [pc, #28]	; (bb8ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb890:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb892:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb894:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb896:	f000 f86d 	bl	bb974 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb89a:	4904      	ldr	r1, [pc, #16]	; (bb8ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb89c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb89e:	4628      	mov	r0, r5
   bb8a0:	f000 f868 	bl	bb974 <_ZnajRKSt9nothrow_t>
    };
   bb8a4:	60e0      	str	r0, [r4, #12]
}
   bb8a6:	4620      	mov	r0, r4
   bb8a8:	bd38      	pop	{r3, r4, r5, pc}
   bb8aa:	bf00      	nop
   bb8ac:	000bf1c5 	.word	0x000bf1c5

000bb8b0 <_Z22__fetch_global_Serial1v>:
{
   bb8b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb8b2:	4d0e      	ldr	r5, [pc, #56]	; (bb8ec <_Z22__fetch_global_Serial1v+0x3c>)
   bb8b4:	7829      	ldrb	r1, [r5, #0]
   bb8b6:	f3bf 8f5b 	dmb	ish
   bb8ba:	f011 0401 	ands.w	r4, r1, #1
{
   bb8be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb8c0:	d111      	bne.n	bb8e6 <_Z22__fetch_global_Serial1v+0x36>
   bb8c2:	4628      	mov	r0, r5
   bb8c4:	f7f8 fbfa 	bl	b40bc <__cxa_guard_acquire>
   bb8c8:	b168      	cbz	r0, bb8e6 <_Z22__fetch_global_Serial1v+0x36>
   bb8ca:	a801      	add	r0, sp, #4
   bb8cc:	f7ff ffd6 	bl	bb87c <_Z20acquireSerial1Bufferv>
   bb8d0:	aa01      	add	r2, sp, #4
   bb8d2:	4621      	mov	r1, r4
   bb8d4:	4806      	ldr	r0, [pc, #24]	; (bb8f0 <_Z22__fetch_global_Serial1v+0x40>)
   bb8d6:	f7ff fc2b 	bl	bb130 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb8da:	4628      	mov	r0, r5
   bb8dc:	f7f8 fbf3 	bl	b40c6 <__cxa_guard_release>
   bb8e0:	4804      	ldr	r0, [pc, #16]	; (bb8f4 <_Z22__fetch_global_Serial1v+0x44>)
   bb8e2:	f000 fe43 	bl	bc56c <atexit>
    return serial1;
}
   bb8e6:	4802      	ldr	r0, [pc, #8]	; (bb8f0 <_Z22__fetch_global_Serial1v+0x40>)
   bb8e8:	b007      	add	sp, #28
   bb8ea:	bd30      	pop	{r4, r5, pc}
   bb8ec:	2003e728 	.word	0x2003e728
   bb8f0:	2003e72c 	.word	0x2003e72c
   bb8f4:	000bb879 	.word	0x000bb879

000bb8f8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb8f8:	4770      	bx	lr
	...

000bb8fc <_Z17acquireWireBufferv>:
{
   bb8fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb8fe:	2520      	movs	r5, #32
   bb900:	2314      	movs	r3, #20
{
   bb902:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb904:	6003      	str	r3, [r0, #0]
   bb906:	6085      	str	r5, [r0, #8]
   bb908:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb90a:	4906      	ldr	r1, [pc, #24]	; (bb924 <_Z17acquireWireBufferv+0x28>)
   bb90c:	4628      	mov	r0, r5
   bb90e:	f000 f831 	bl	bb974 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb912:	4904      	ldr	r1, [pc, #16]	; (bb924 <_Z17acquireWireBufferv+0x28>)
	};
   bb914:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb916:	4628      	mov	r0, r5
   bb918:	f000 f82c 	bl	bb974 <_ZnajRKSt9nothrow_t>
	};
   bb91c:	60e0      	str	r0, [r4, #12]
}
   bb91e:	4620      	mov	r0, r4
   bb920:	bd38      	pop	{r3, r4, r5, pc}
   bb922:	bf00      	nop
   bb924:	000bf1c5 	.word	0x000bf1c5

000bb928 <_Z19__fetch_global_Wirev>:
{
   bb928:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb92a:	4d0e      	ldr	r5, [pc, #56]	; (bb964 <_Z19__fetch_global_Wirev+0x3c>)
   bb92c:	7829      	ldrb	r1, [r5, #0]
   bb92e:	f3bf 8f5b 	dmb	ish
   bb932:	f011 0401 	ands.w	r4, r1, #1
{
   bb936:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb938:	d111      	bne.n	bb95e <_Z19__fetch_global_Wirev+0x36>
   bb93a:	4628      	mov	r0, r5
   bb93c:	f7f8 fbbe 	bl	b40bc <__cxa_guard_acquire>
   bb940:	b168      	cbz	r0, bb95e <_Z19__fetch_global_Wirev+0x36>
   bb942:	a801      	add	r0, sp, #4
   bb944:	f7ff ffda 	bl	bb8fc <_Z17acquireWireBufferv>
   bb948:	aa01      	add	r2, sp, #4
   bb94a:	4621      	mov	r1, r4
   bb94c:	4806      	ldr	r0, [pc, #24]	; (bb968 <_Z19__fetch_global_Wirev+0x40>)
   bb94e:	f7ff fc4d 	bl	bb1ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb952:	4628      	mov	r0, r5
   bb954:	f7f8 fbb7 	bl	b40c6 <__cxa_guard_release>
   bb958:	4804      	ldr	r0, [pc, #16]	; (bb96c <_Z19__fetch_global_Wirev+0x44>)
   bb95a:	f000 fe07 	bl	bc56c <atexit>
	return wire;
}
   bb95e:	4802      	ldr	r0, [pc, #8]	; (bb968 <_Z19__fetch_global_Wirev+0x40>)
   bb960:	b007      	add	sp, #28
   bb962:	bd30      	pop	{r4, r5, pc}
   bb964:	2003e744 	.word	0x2003e744
   bb968:	2003e748 	.word	0x2003e748
   bb96c:	000bb8f9 	.word	0x000bb8f9

000bb970 <_ZnwjRKSt9nothrow_t>:
   bb970:	f7f8 bb91 	b.w	b4096 <_Znwj>

000bb974 <_ZnajRKSt9nothrow_t>:
   bb974:	f7f8 bb91 	b.w	b409a <_Znaj>

000bb978 <_ZSt25__throw_bad_function_callv>:
   bb978:	b508      	push	{r3, lr}
   bb97a:	f7fc f93d 	bl	b7bf8 <abort>
	...

000bb980 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb980:	4901      	ldr	r1, [pc, #4]	; (bb988 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb982:	f000 b8f9 	b.w	bbb78 <_ZNKSt9type_infoeqERKS_>
   bb986:	bf00      	nop
   bb988:	000bf1e0 	.word	0x000bf1e0

000bb98c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb98c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb98e:	2400      	movs	r4, #0
   bb990:	2310      	movs	r3, #16
   bb992:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb996:	6803      	ldr	r3, [r0, #0]
   bb998:	4615      	mov	r5, r2
   bb99a:	699e      	ldr	r6, [r3, #24]
   bb99c:	6812      	ldr	r2, [r2, #0]
   bb99e:	466b      	mov	r3, sp
   bb9a0:	e9cd 4400 	strd	r4, r4, [sp]
   bb9a4:	47b0      	blx	r6
   bb9a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb9aa:	f003 0306 	and.w	r3, r3, #6
   bb9ae:	2b06      	cmp	r3, #6
   bb9b0:	bf03      	ittte	eq
   bb9b2:	9b00      	ldreq	r3, [sp, #0]
   bb9b4:	602b      	streq	r3, [r5, #0]
   bb9b6:	2001      	moveq	r0, #1
   bb9b8:	4620      	movne	r0, r4
   bb9ba:	b004      	add	sp, #16
   bb9bc:	bd70      	pop	{r4, r5, r6, pc}

000bb9be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb9be:	9800      	ldr	r0, [sp, #0]
   bb9c0:	4290      	cmp	r0, r2
   bb9c2:	bf14      	ite	ne
   bb9c4:	2001      	movne	r0, #1
   bb9c6:	2006      	moveq	r0, #6
   bb9c8:	4770      	bx	lr
	...

000bb9cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb9cc:	b510      	push	{r4, lr}
   bb9ce:	4b03      	ldr	r3, [pc, #12]	; (bb9dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb9d0:	6003      	str	r3, [r0, #0]
   bb9d2:	4604      	mov	r4, r0
   bb9d4:	f000 f8cd 	bl	bbb72 <_ZNSt9type_infoD1Ev>
   bb9d8:	4620      	mov	r0, r4
   bb9da:	bd10      	pop	{r4, pc}
   bb9dc:	000bf220 	.word	0x000bf220

000bb9e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb9e0:	b510      	push	{r4, lr}
   bb9e2:	4604      	mov	r4, r0
   bb9e4:	f7ff fff2 	bl	bb9cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb9e8:	4620      	mov	r0, r4
   bb9ea:	2108      	movs	r1, #8
   bb9ec:	f7f8 fb57 	bl	b409e <_ZdlPvj>
   bb9f0:	4620      	mov	r0, r4
   bb9f2:	bd10      	pop	{r4, pc}

000bb9f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb9f8:	461f      	mov	r7, r3
   bb9fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb9fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bba02:	4598      	cmp	r8, r3
   bba04:	4606      	mov	r6, r0
   bba06:	4615      	mov	r5, r2
   bba08:	d107      	bne.n	bba1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bba0a:	9907      	ldr	r1, [sp, #28]
   bba0c:	f000 f8b4 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bba10:	b118      	cbz	r0, bba1a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bba12:	7165      	strb	r5, [r4, #5]
   bba14:	2000      	movs	r0, #0
   bba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bba1a:	4639      	mov	r1, r7
   bba1c:	4630      	mov	r0, r6
   bba1e:	f000 f8ab 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bba22:	2800      	cmp	r0, #0
   bba24:	d0f6      	beq.n	bba14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bba26:	2301      	movs	r3, #1
   bba28:	f8c4 8000 	str.w	r8, [r4]
   bba2c:	7125      	strb	r5, [r4, #4]
   bba2e:	71a3      	strb	r3, [r4, #6]
   bba30:	e7f0      	b.n	bba14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bba32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bba32:	b538      	push	{r3, r4, r5, lr}
   bba34:	4615      	mov	r5, r2
   bba36:	461c      	mov	r4, r3
   bba38:	f000 f89e 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bba3c:	b120      	cbz	r0, bba48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bba3e:	2308      	movs	r3, #8
   bba40:	60e3      	str	r3, [r4, #12]
   bba42:	2306      	movs	r3, #6
   bba44:	6025      	str	r5, [r4, #0]
   bba46:	7123      	strb	r3, [r4, #4]
   bba48:	bd38      	pop	{r3, r4, r5, pc}

000bba4a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bba4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bba4c:	4605      	mov	r5, r0
   bba4e:	460c      	mov	r4, r1
   bba50:	9201      	str	r2, [sp, #4]
   bba52:	461e      	mov	r6, r3
   bba54:	f000 f890 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bba58:	b950      	cbnz	r0, bba70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba5a:	2e03      	cmp	r6, #3
   bba5c:	d808      	bhi.n	bba70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bba5e:	6823      	ldr	r3, [r4, #0]
   bba60:	9a01      	ldr	r2, [sp, #4]
   bba62:	695b      	ldr	r3, [r3, #20]
   bba64:	4629      	mov	r1, r5
   bba66:	4620      	mov	r0, r4
   bba68:	b002      	add	sp, #8
   bba6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bba6e:	4718      	bx	r3
   bba70:	b002      	add	sp, #8
   bba72:	bd70      	pop	{r4, r5, r6, pc}

000bba74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bba74:	b510      	push	{r4, lr}
   bba76:	4b03      	ldr	r3, [pc, #12]	; (bba84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bba78:	6003      	str	r3, [r0, #0]
   bba7a:	4604      	mov	r4, r0
   bba7c:	f7ff ffa6 	bl	bb9cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bba80:	4620      	mov	r0, r4
   bba82:	bd10      	pop	{r4, pc}
   bba84:	000bf280 	.word	0x000bf280

000bba88 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bba88:	b510      	push	{r4, lr}
   bba8a:	4604      	mov	r4, r0
   bba8c:	f7ff fff2 	bl	bba74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bba90:	4620      	mov	r0, r4
   bba92:	210c      	movs	r1, #12
   bba94:	f7f8 fb03 	bl	b409e <_ZdlPvj>
   bba98:	4620      	mov	r0, r4
   bba9a:	bd10      	pop	{r4, pc}

000bba9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bba9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bba9e:	9f08      	ldr	r7, [sp, #32]
   bbaa0:	4297      	cmp	r7, r2
   bbaa2:	4605      	mov	r5, r0
   bbaa4:	460e      	mov	r6, r1
   bbaa6:	4614      	mov	r4, r2
   bbaa8:	d00a      	beq.n	bbac0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bbaaa:	68a8      	ldr	r0, [r5, #8]
   bbaac:	6802      	ldr	r2, [r0, #0]
   bbaae:	9708      	str	r7, [sp, #32]
   bbab0:	6a15      	ldr	r5, [r2, #32]
   bbab2:	4631      	mov	r1, r6
   bbab4:	4622      	mov	r2, r4
   bbab6:	46ac      	mov	ip, r5
   bbab8:	b003      	add	sp, #12
   bbaba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bbabe:	4760      	bx	ip
   bbac0:	4619      	mov	r1, r3
   bbac2:	9301      	str	r3, [sp, #4]
   bbac4:	f000 f858 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bbac8:	9b01      	ldr	r3, [sp, #4]
   bbaca:	2800      	cmp	r0, #0
   bbacc:	d0ed      	beq.n	bbaaa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bbace:	2006      	movs	r0, #6
   bbad0:	b003      	add	sp, #12
   bbad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bbad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bbad4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbad8:	460d      	mov	r5, r1
   bbada:	4619      	mov	r1, r3
   bbadc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bbae0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bbae4:	4681      	mov	r9, r0
   bbae6:	4617      	mov	r7, r2
   bbae8:	4698      	mov	r8, r3
   bbaea:	f000 f845 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bbaee:	b190      	cbz	r0, bbb16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bbaf0:	2d00      	cmp	r5, #0
   bbaf2:	6034      	str	r4, [r6, #0]
   bbaf4:	7137      	strb	r7, [r6, #4]
   bbaf6:	db09      	blt.n	bbb0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bbaf8:	1961      	adds	r1, r4, r5
   bbafa:	458a      	cmp	sl, r1
   bbafc:	bf0c      	ite	eq
   bbafe:	2106      	moveq	r1, #6
   bbb00:	2101      	movne	r1, #1
   bbb02:	71b1      	strb	r1, [r6, #6]
   bbb04:	2000      	movs	r0, #0
   bbb06:	b001      	add	sp, #4
   bbb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbb0c:	3502      	adds	r5, #2
   bbb0e:	d1f9      	bne.n	bbb04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbb10:	2301      	movs	r3, #1
   bbb12:	71b3      	strb	r3, [r6, #6]
   bbb14:	e7f6      	b.n	bbb04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbb16:	4554      	cmp	r4, sl
   bbb18:	d106      	bne.n	bbb28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbb1a:	4659      	mov	r1, fp
   bbb1c:	4648      	mov	r0, r9
   bbb1e:	f000 f82b 	bl	bbb78 <_ZNKSt9type_infoeqERKS_>
   bbb22:	b108      	cbz	r0, bbb28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bbb24:	7177      	strb	r7, [r6, #5]
   bbb26:	e7ed      	b.n	bbb04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bbb28:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bbb2c:	6803      	ldr	r3, [r0, #0]
   bbb2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bbb32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bbb36:	69dc      	ldr	r4, [r3, #28]
   bbb38:	463a      	mov	r2, r7
   bbb3a:	4643      	mov	r3, r8
   bbb3c:	4629      	mov	r1, r5
   bbb3e:	46a4      	mov	ip, r4
   bbb40:	b001      	add	sp, #4
   bbb42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbb46:	4760      	bx	ip

000bbb48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bbb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbb4c:	4607      	mov	r7, r0
   bbb4e:	460c      	mov	r4, r1
   bbb50:	4615      	mov	r5, r2
   bbb52:	461e      	mov	r6, r3
   bbb54:	f7ff ff6d 	bl	bba32 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bbb58:	b948      	cbnz	r0, bbb6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bbb5a:	68b8      	ldr	r0, [r7, #8]
   bbb5c:	6803      	ldr	r3, [r0, #0]
   bbb5e:	699f      	ldr	r7, [r3, #24]
   bbb60:	462a      	mov	r2, r5
   bbb62:	4633      	mov	r3, r6
   bbb64:	4621      	mov	r1, r4
   bbb66:	46bc      	mov	ip, r7
   bbb68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bbb6c:	4760      	bx	ip
   bbb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bbb72 <_ZNSt9type_infoD1Ev>:
   bbb72:	4770      	bx	lr

000bbb74 <_ZNKSt9type_info14__is_pointer_pEv>:
   bbb74:	2000      	movs	r0, #0
   bbb76:	4770      	bx	lr

000bbb78 <_ZNKSt9type_infoeqERKS_>:
   bbb78:	4281      	cmp	r1, r0
   bbb7a:	b508      	push	{r3, lr}
   bbb7c:	d00e      	beq.n	bbb9c <_ZNKSt9type_infoeqERKS_+0x24>
   bbb7e:	6840      	ldr	r0, [r0, #4]
   bbb80:	7803      	ldrb	r3, [r0, #0]
   bbb82:	2b2a      	cmp	r3, #42	; 0x2a
   bbb84:	d00c      	beq.n	bbba0 <_ZNKSt9type_infoeqERKS_+0x28>
   bbb86:	6849      	ldr	r1, [r1, #4]
   bbb88:	780b      	ldrb	r3, [r1, #0]
   bbb8a:	2b2a      	cmp	r3, #42	; 0x2a
   bbb8c:	bf08      	it	eq
   bbb8e:	3101      	addeq	r1, #1
   bbb90:	f000 fd96 	bl	bc6c0 <strcmp>
   bbb94:	fab0 f080 	clz	r0, r0
   bbb98:	0940      	lsrs	r0, r0, #5
   bbb9a:	bd08      	pop	{r3, pc}
   bbb9c:	2001      	movs	r0, #1
   bbb9e:	e7fc      	b.n	bbb9a <_ZNKSt9type_infoeqERKS_+0x22>
   bbba0:	2000      	movs	r0, #0
   bbba2:	e7fa      	b.n	bbb9a <_ZNKSt9type_infoeqERKS_+0x22>

000bbba4 <__aeabi_drsub>:
   bbba4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbba8:	e002      	b.n	bbbb0 <__adddf3>
   bbbaa:	bf00      	nop

000bbbac <__aeabi_dsub>:
   bbbac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbbb0 <__adddf3>:
   bbbb0:	b530      	push	{r4, r5, lr}
   bbbb2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbbb6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbbba:	ea94 0f05 	teq	r4, r5
   bbbbe:	bf08      	it	eq
   bbbc0:	ea90 0f02 	teqeq	r0, r2
   bbbc4:	bf1f      	itttt	ne
   bbbc6:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbbca:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbbce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbbd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbbd6:	f000 80e2 	beq.w	bbd9e <__adddf3+0x1ee>
   bbbda:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbbde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbbe2:	bfb8      	it	lt
   bbbe4:	426d      	neglt	r5, r5
   bbbe6:	dd0c      	ble.n	bbc02 <__adddf3+0x52>
   bbbe8:	442c      	add	r4, r5
   bbbea:	ea80 0202 	eor.w	r2, r0, r2
   bbbee:	ea81 0303 	eor.w	r3, r1, r3
   bbbf2:	ea82 0000 	eor.w	r0, r2, r0
   bbbf6:	ea83 0101 	eor.w	r1, r3, r1
   bbbfa:	ea80 0202 	eor.w	r2, r0, r2
   bbbfe:	ea81 0303 	eor.w	r3, r1, r3
   bbc02:	2d36      	cmp	r5, #54	; 0x36
   bbc04:	bf88      	it	hi
   bbc06:	bd30      	pophi	{r4, r5, pc}
   bbc08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbc0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbc10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bbc14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bbc18:	d002      	beq.n	bbc20 <__adddf3+0x70>
   bbc1a:	4240      	negs	r0, r0
   bbc1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbc20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bbc24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbc28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bbc2c:	d002      	beq.n	bbc34 <__adddf3+0x84>
   bbc2e:	4252      	negs	r2, r2
   bbc30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bbc34:	ea94 0f05 	teq	r4, r5
   bbc38:	f000 80a7 	beq.w	bbd8a <__adddf3+0x1da>
   bbc3c:	f1a4 0401 	sub.w	r4, r4, #1
   bbc40:	f1d5 0e20 	rsbs	lr, r5, #32
   bbc44:	db0d      	blt.n	bbc62 <__adddf3+0xb2>
   bbc46:	fa02 fc0e 	lsl.w	ip, r2, lr
   bbc4a:	fa22 f205 	lsr.w	r2, r2, r5
   bbc4e:	1880      	adds	r0, r0, r2
   bbc50:	f141 0100 	adc.w	r1, r1, #0
   bbc54:	fa03 f20e 	lsl.w	r2, r3, lr
   bbc58:	1880      	adds	r0, r0, r2
   bbc5a:	fa43 f305 	asr.w	r3, r3, r5
   bbc5e:	4159      	adcs	r1, r3
   bbc60:	e00e      	b.n	bbc80 <__adddf3+0xd0>
   bbc62:	f1a5 0520 	sub.w	r5, r5, #32
   bbc66:	f10e 0e20 	add.w	lr, lr, #32
   bbc6a:	2a01      	cmp	r2, #1
   bbc6c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bbc70:	bf28      	it	cs
   bbc72:	f04c 0c02 	orrcs.w	ip, ip, #2
   bbc76:	fa43 f305 	asr.w	r3, r3, r5
   bbc7a:	18c0      	adds	r0, r0, r3
   bbc7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bbc80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbc84:	d507      	bpl.n	bbc96 <__adddf3+0xe6>
   bbc86:	f04f 0e00 	mov.w	lr, #0
   bbc8a:	f1dc 0c00 	rsbs	ip, ip, #0
   bbc8e:	eb7e 0000 	sbcs.w	r0, lr, r0
   bbc92:	eb6e 0101 	sbc.w	r1, lr, r1
   bbc96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bbc9a:	d31b      	bcc.n	bbcd4 <__adddf3+0x124>
   bbc9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bbca0:	d30c      	bcc.n	bbcbc <__adddf3+0x10c>
   bbca2:	0849      	lsrs	r1, r1, #1
   bbca4:	ea5f 0030 	movs.w	r0, r0, rrx
   bbca8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bbcac:	f104 0401 	add.w	r4, r4, #1
   bbcb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bbcb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bbcb8:	f080 809a 	bcs.w	bbdf0 <__adddf3+0x240>
   bbcbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bbcc0:	bf08      	it	eq
   bbcc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbcc6:	f150 0000 	adcs.w	r0, r0, #0
   bbcca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbcce:	ea41 0105 	orr.w	r1, r1, r5
   bbcd2:	bd30      	pop	{r4, r5, pc}
   bbcd4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bbcd8:	4140      	adcs	r0, r0
   bbcda:	eb41 0101 	adc.w	r1, r1, r1
   bbcde:	3c01      	subs	r4, #1
   bbce0:	bf28      	it	cs
   bbce2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bbce6:	d2e9      	bcs.n	bbcbc <__adddf3+0x10c>
   bbce8:	f091 0f00 	teq	r1, #0
   bbcec:	bf04      	itt	eq
   bbcee:	4601      	moveq	r1, r0
   bbcf0:	2000      	moveq	r0, #0
   bbcf2:	fab1 f381 	clz	r3, r1
   bbcf6:	bf08      	it	eq
   bbcf8:	3320      	addeq	r3, #32
   bbcfa:	f1a3 030b 	sub.w	r3, r3, #11
   bbcfe:	f1b3 0220 	subs.w	r2, r3, #32
   bbd02:	da0c      	bge.n	bbd1e <__adddf3+0x16e>
   bbd04:	320c      	adds	r2, #12
   bbd06:	dd08      	ble.n	bbd1a <__adddf3+0x16a>
   bbd08:	f102 0c14 	add.w	ip, r2, #20
   bbd0c:	f1c2 020c 	rsb	r2, r2, #12
   bbd10:	fa01 f00c 	lsl.w	r0, r1, ip
   bbd14:	fa21 f102 	lsr.w	r1, r1, r2
   bbd18:	e00c      	b.n	bbd34 <__adddf3+0x184>
   bbd1a:	f102 0214 	add.w	r2, r2, #20
   bbd1e:	bfd8      	it	le
   bbd20:	f1c2 0c20 	rsble	ip, r2, #32
   bbd24:	fa01 f102 	lsl.w	r1, r1, r2
   bbd28:	fa20 fc0c 	lsr.w	ip, r0, ip
   bbd2c:	bfdc      	itt	le
   bbd2e:	ea41 010c 	orrle.w	r1, r1, ip
   bbd32:	4090      	lslle	r0, r2
   bbd34:	1ae4      	subs	r4, r4, r3
   bbd36:	bfa2      	ittt	ge
   bbd38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bbd3c:	4329      	orrge	r1, r5
   bbd3e:	bd30      	popge	{r4, r5, pc}
   bbd40:	ea6f 0404 	mvn.w	r4, r4
   bbd44:	3c1f      	subs	r4, #31
   bbd46:	da1c      	bge.n	bbd82 <__adddf3+0x1d2>
   bbd48:	340c      	adds	r4, #12
   bbd4a:	dc0e      	bgt.n	bbd6a <__adddf3+0x1ba>
   bbd4c:	f104 0414 	add.w	r4, r4, #20
   bbd50:	f1c4 0220 	rsb	r2, r4, #32
   bbd54:	fa20 f004 	lsr.w	r0, r0, r4
   bbd58:	fa01 f302 	lsl.w	r3, r1, r2
   bbd5c:	ea40 0003 	orr.w	r0, r0, r3
   bbd60:	fa21 f304 	lsr.w	r3, r1, r4
   bbd64:	ea45 0103 	orr.w	r1, r5, r3
   bbd68:	bd30      	pop	{r4, r5, pc}
   bbd6a:	f1c4 040c 	rsb	r4, r4, #12
   bbd6e:	f1c4 0220 	rsb	r2, r4, #32
   bbd72:	fa20 f002 	lsr.w	r0, r0, r2
   bbd76:	fa01 f304 	lsl.w	r3, r1, r4
   bbd7a:	ea40 0003 	orr.w	r0, r0, r3
   bbd7e:	4629      	mov	r1, r5
   bbd80:	bd30      	pop	{r4, r5, pc}
   bbd82:	fa21 f004 	lsr.w	r0, r1, r4
   bbd86:	4629      	mov	r1, r5
   bbd88:	bd30      	pop	{r4, r5, pc}
   bbd8a:	f094 0f00 	teq	r4, #0
   bbd8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bbd92:	bf06      	itte	eq
   bbd94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bbd98:	3401      	addeq	r4, #1
   bbd9a:	3d01      	subne	r5, #1
   bbd9c:	e74e      	b.n	bbc3c <__adddf3+0x8c>
   bbd9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbda2:	bf18      	it	ne
   bbda4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbda8:	d029      	beq.n	bbdfe <__adddf3+0x24e>
   bbdaa:	ea94 0f05 	teq	r4, r5
   bbdae:	bf08      	it	eq
   bbdb0:	ea90 0f02 	teqeq	r0, r2
   bbdb4:	d005      	beq.n	bbdc2 <__adddf3+0x212>
   bbdb6:	ea54 0c00 	orrs.w	ip, r4, r0
   bbdba:	bf04      	itt	eq
   bbdbc:	4619      	moveq	r1, r3
   bbdbe:	4610      	moveq	r0, r2
   bbdc0:	bd30      	pop	{r4, r5, pc}
   bbdc2:	ea91 0f03 	teq	r1, r3
   bbdc6:	bf1e      	ittt	ne
   bbdc8:	2100      	movne	r1, #0
   bbdca:	2000      	movne	r0, #0
   bbdcc:	bd30      	popne	{r4, r5, pc}
   bbdce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bbdd2:	d105      	bne.n	bbde0 <__adddf3+0x230>
   bbdd4:	0040      	lsls	r0, r0, #1
   bbdd6:	4149      	adcs	r1, r1
   bbdd8:	bf28      	it	cs
   bbdda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bbdde:	bd30      	pop	{r4, r5, pc}
   bbde0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bbde4:	bf3c      	itt	cc
   bbde6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bbdea:	bd30      	popcc	{r4, r5, pc}
   bbdec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbdf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bbdf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbdf8:	f04f 0000 	mov.w	r0, #0
   bbdfc:	bd30      	pop	{r4, r5, pc}
   bbdfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbe02:	bf1a      	itte	ne
   bbe04:	4619      	movne	r1, r3
   bbe06:	4610      	movne	r0, r2
   bbe08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bbe0c:	bf1c      	itt	ne
   bbe0e:	460b      	movne	r3, r1
   bbe10:	4602      	movne	r2, r0
   bbe12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbe16:	bf06      	itte	eq
   bbe18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bbe1c:	ea91 0f03 	teqeq	r1, r3
   bbe20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bbe24:	bd30      	pop	{r4, r5, pc}
   bbe26:	bf00      	nop

000bbe28 <__aeabi_ui2d>:
   bbe28:	f090 0f00 	teq	r0, #0
   bbe2c:	bf04      	itt	eq
   bbe2e:	2100      	moveq	r1, #0
   bbe30:	4770      	bxeq	lr
   bbe32:	b530      	push	{r4, r5, lr}
   bbe34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe3c:	f04f 0500 	mov.w	r5, #0
   bbe40:	f04f 0100 	mov.w	r1, #0
   bbe44:	e750      	b.n	bbce8 <__adddf3+0x138>
   bbe46:	bf00      	nop

000bbe48 <__aeabi_i2d>:
   bbe48:	f090 0f00 	teq	r0, #0
   bbe4c:	bf04      	itt	eq
   bbe4e:	2100      	moveq	r1, #0
   bbe50:	4770      	bxeq	lr
   bbe52:	b530      	push	{r4, r5, lr}
   bbe54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbe60:	bf48      	it	mi
   bbe62:	4240      	negmi	r0, r0
   bbe64:	f04f 0100 	mov.w	r1, #0
   bbe68:	e73e      	b.n	bbce8 <__adddf3+0x138>
   bbe6a:	bf00      	nop

000bbe6c <__aeabi_f2d>:
   bbe6c:	0042      	lsls	r2, r0, #1
   bbe6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbe72:	ea4f 0131 	mov.w	r1, r1, rrx
   bbe76:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbe7a:	bf1f      	itttt	ne
   bbe7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbe80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbe84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbe88:	4770      	bxne	lr
   bbe8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbe8e:	bf08      	it	eq
   bbe90:	4770      	bxeq	lr
   bbe92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbe96:	bf04      	itt	eq
   bbe98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbe9c:	4770      	bxeq	lr
   bbe9e:	b530      	push	{r4, r5, lr}
   bbea0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbeac:	e71c      	b.n	bbce8 <__adddf3+0x138>
   bbeae:	bf00      	nop

000bbeb0 <__aeabi_ul2d>:
   bbeb0:	ea50 0201 	orrs.w	r2, r0, r1
   bbeb4:	bf08      	it	eq
   bbeb6:	4770      	bxeq	lr
   bbeb8:	b530      	push	{r4, r5, lr}
   bbeba:	f04f 0500 	mov.w	r5, #0
   bbebe:	e00a      	b.n	bbed6 <__aeabi_l2d+0x16>

000bbec0 <__aeabi_l2d>:
   bbec0:	ea50 0201 	orrs.w	r2, r0, r1
   bbec4:	bf08      	it	eq
   bbec6:	4770      	bxeq	lr
   bbec8:	b530      	push	{r4, r5, lr}
   bbeca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbece:	d502      	bpl.n	bbed6 <__aeabi_l2d+0x16>
   bbed0:	4240      	negs	r0, r0
   bbed2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbed6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbeda:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbede:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbee2:	f43f aed8 	beq.w	bbc96 <__adddf3+0xe6>
   bbee6:	f04f 0203 	mov.w	r2, #3
   bbeea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbeee:	bf18      	it	ne
   bbef0:	3203      	addne	r2, #3
   bbef2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbef6:	bf18      	it	ne
   bbef8:	3203      	addne	r2, #3
   bbefa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbefe:	f1c2 0320 	rsb	r3, r2, #32
   bbf02:	fa00 fc03 	lsl.w	ip, r0, r3
   bbf06:	fa20 f002 	lsr.w	r0, r0, r2
   bbf0a:	fa01 fe03 	lsl.w	lr, r1, r3
   bbf0e:	ea40 000e 	orr.w	r0, r0, lr
   bbf12:	fa21 f102 	lsr.w	r1, r1, r2
   bbf16:	4414      	add	r4, r2
   bbf18:	e6bd      	b.n	bbc96 <__adddf3+0xe6>
   bbf1a:	bf00      	nop

000bbf1c <__aeabi_dmul>:
   bbf1c:	b570      	push	{r4, r5, r6, lr}
   bbf1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbf22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbf26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbf2a:	bf1d      	ittte	ne
   bbf2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbf30:	ea94 0f0c 	teqne	r4, ip
   bbf34:	ea95 0f0c 	teqne	r5, ip
   bbf38:	f000 f8de 	bleq	bc0f8 <__aeabi_dmul+0x1dc>
   bbf3c:	442c      	add	r4, r5
   bbf3e:	ea81 0603 	eor.w	r6, r1, r3
   bbf42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbf46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbf4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbf4e:	bf18      	it	ne
   bbf50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbf54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbf5c:	d038      	beq.n	bbfd0 <__aeabi_dmul+0xb4>
   bbf5e:	fba0 ce02 	umull	ip, lr, r0, r2
   bbf62:	f04f 0500 	mov.w	r5, #0
   bbf66:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbf6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbf6e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbf72:	f04f 0600 	mov.w	r6, #0
   bbf76:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbf7a:	f09c 0f00 	teq	ip, #0
   bbf7e:	bf18      	it	ne
   bbf80:	f04e 0e01 	orrne.w	lr, lr, #1
   bbf84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbf88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbf8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbf90:	d204      	bcs.n	bbf9c <__aeabi_dmul+0x80>
   bbf92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbf96:	416d      	adcs	r5, r5
   bbf98:	eb46 0606 	adc.w	r6, r6, r6
   bbf9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbfa0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbfa4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbfa8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbfac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbfb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbfb4:	bf88      	it	hi
   bbfb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbfba:	d81e      	bhi.n	bbffa <__aeabi_dmul+0xde>
   bbfbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbfc0:	bf08      	it	eq
   bbfc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbfc6:	f150 0000 	adcs.w	r0, r0, #0
   bbfca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbfce:	bd70      	pop	{r4, r5, r6, pc}
   bbfd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbfd4:	ea46 0101 	orr.w	r1, r6, r1
   bbfd8:	ea40 0002 	orr.w	r0, r0, r2
   bbfdc:	ea81 0103 	eor.w	r1, r1, r3
   bbfe0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbfe4:	bfc2      	ittt	gt
   bbfe6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbfea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbfee:	bd70      	popgt	{r4, r5, r6, pc}
   bbff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbff4:	f04f 0e00 	mov.w	lr, #0
   bbff8:	3c01      	subs	r4, #1
   bbffa:	f300 80ab 	bgt.w	bc154 <__aeabi_dmul+0x238>
   bbffe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bc002:	bfde      	ittt	le
   bc004:	2000      	movle	r0, #0
   bc006:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bc00a:	bd70      	pople	{r4, r5, r6, pc}
   bc00c:	f1c4 0400 	rsb	r4, r4, #0
   bc010:	3c20      	subs	r4, #32
   bc012:	da35      	bge.n	bc080 <__aeabi_dmul+0x164>
   bc014:	340c      	adds	r4, #12
   bc016:	dc1b      	bgt.n	bc050 <__aeabi_dmul+0x134>
   bc018:	f104 0414 	add.w	r4, r4, #20
   bc01c:	f1c4 0520 	rsb	r5, r4, #32
   bc020:	fa00 f305 	lsl.w	r3, r0, r5
   bc024:	fa20 f004 	lsr.w	r0, r0, r4
   bc028:	fa01 f205 	lsl.w	r2, r1, r5
   bc02c:	ea40 0002 	orr.w	r0, r0, r2
   bc030:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bc034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc038:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc03c:	fa21 f604 	lsr.w	r6, r1, r4
   bc040:	eb42 0106 	adc.w	r1, r2, r6
   bc044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc048:	bf08      	it	eq
   bc04a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc04e:	bd70      	pop	{r4, r5, r6, pc}
   bc050:	f1c4 040c 	rsb	r4, r4, #12
   bc054:	f1c4 0520 	rsb	r5, r4, #32
   bc058:	fa00 f304 	lsl.w	r3, r0, r4
   bc05c:	fa20 f005 	lsr.w	r0, r0, r5
   bc060:	fa01 f204 	lsl.w	r2, r1, r4
   bc064:	ea40 0002 	orr.w	r0, r0, r2
   bc068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc06c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bc070:	f141 0100 	adc.w	r1, r1, #0
   bc074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc078:	bf08      	it	eq
   bc07a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc07e:	bd70      	pop	{r4, r5, r6, pc}
   bc080:	f1c4 0520 	rsb	r5, r4, #32
   bc084:	fa00 f205 	lsl.w	r2, r0, r5
   bc088:	ea4e 0e02 	orr.w	lr, lr, r2
   bc08c:	fa20 f304 	lsr.w	r3, r0, r4
   bc090:	fa01 f205 	lsl.w	r2, r1, r5
   bc094:	ea43 0302 	orr.w	r3, r3, r2
   bc098:	fa21 f004 	lsr.w	r0, r1, r4
   bc09c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc0a0:	fa21 f204 	lsr.w	r2, r1, r4
   bc0a4:	ea20 0002 	bic.w	r0, r0, r2
   bc0a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bc0ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bc0b0:	bf08      	it	eq
   bc0b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc0b6:	bd70      	pop	{r4, r5, r6, pc}
   bc0b8:	f094 0f00 	teq	r4, #0
   bc0bc:	d10f      	bne.n	bc0de <__aeabi_dmul+0x1c2>
   bc0be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc0c2:	0040      	lsls	r0, r0, #1
   bc0c4:	eb41 0101 	adc.w	r1, r1, r1
   bc0c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc0cc:	bf08      	it	eq
   bc0ce:	3c01      	subeq	r4, #1
   bc0d0:	d0f7      	beq.n	bc0c2 <__aeabi_dmul+0x1a6>
   bc0d2:	ea41 0106 	orr.w	r1, r1, r6
   bc0d6:	f095 0f00 	teq	r5, #0
   bc0da:	bf18      	it	ne
   bc0dc:	4770      	bxne	lr
   bc0de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc0e2:	0052      	lsls	r2, r2, #1
   bc0e4:	eb43 0303 	adc.w	r3, r3, r3
   bc0e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc0ec:	bf08      	it	eq
   bc0ee:	3d01      	subeq	r5, #1
   bc0f0:	d0f7      	beq.n	bc0e2 <__aeabi_dmul+0x1c6>
   bc0f2:	ea43 0306 	orr.w	r3, r3, r6
   bc0f6:	4770      	bx	lr
   bc0f8:	ea94 0f0c 	teq	r4, ip
   bc0fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc100:	bf18      	it	ne
   bc102:	ea95 0f0c 	teqne	r5, ip
   bc106:	d00c      	beq.n	bc122 <__aeabi_dmul+0x206>
   bc108:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc10c:	bf18      	it	ne
   bc10e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc112:	d1d1      	bne.n	bc0b8 <__aeabi_dmul+0x19c>
   bc114:	ea81 0103 	eor.w	r1, r1, r3
   bc118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc11c:	f04f 0000 	mov.w	r0, #0
   bc120:	bd70      	pop	{r4, r5, r6, pc}
   bc122:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc126:	bf06      	itte	eq
   bc128:	4610      	moveq	r0, r2
   bc12a:	4619      	moveq	r1, r3
   bc12c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc130:	d019      	beq.n	bc166 <__aeabi_dmul+0x24a>
   bc132:	ea94 0f0c 	teq	r4, ip
   bc136:	d102      	bne.n	bc13e <__aeabi_dmul+0x222>
   bc138:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc13c:	d113      	bne.n	bc166 <__aeabi_dmul+0x24a>
   bc13e:	ea95 0f0c 	teq	r5, ip
   bc142:	d105      	bne.n	bc150 <__aeabi_dmul+0x234>
   bc144:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc148:	bf1c      	itt	ne
   bc14a:	4610      	movne	r0, r2
   bc14c:	4619      	movne	r1, r3
   bc14e:	d10a      	bne.n	bc166 <__aeabi_dmul+0x24a>
   bc150:	ea81 0103 	eor.w	r1, r1, r3
   bc154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc158:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc15c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc160:	f04f 0000 	mov.w	r0, #0
   bc164:	bd70      	pop	{r4, r5, r6, pc}
   bc166:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc16a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc16e:	bd70      	pop	{r4, r5, r6, pc}

000bc170 <__aeabi_ddiv>:
   bc170:	b570      	push	{r4, r5, r6, lr}
   bc172:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc17a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc17e:	bf1d      	ittte	ne
   bc180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc184:	ea94 0f0c 	teqne	r4, ip
   bc188:	ea95 0f0c 	teqne	r5, ip
   bc18c:	f000 f8a7 	bleq	bc2de <__aeabi_ddiv+0x16e>
   bc190:	eba4 0405 	sub.w	r4, r4, r5
   bc194:	ea81 0e03 	eor.w	lr, r1, r3
   bc198:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc19c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc1a0:	f000 8088 	beq.w	bc2b4 <__aeabi_ddiv+0x144>
   bc1a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc1a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc1ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc1b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc1b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc1b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc1bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc1c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc1c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc1c8:	429d      	cmp	r5, r3
   bc1ca:	bf08      	it	eq
   bc1cc:	4296      	cmpeq	r6, r2
   bc1ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc1d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc1d6:	d202      	bcs.n	bc1de <__aeabi_ddiv+0x6e>
   bc1d8:	085b      	lsrs	r3, r3, #1
   bc1da:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1de:	1ab6      	subs	r6, r6, r2
   bc1e0:	eb65 0503 	sbc.w	r5, r5, r3
   bc1e4:	085b      	lsrs	r3, r3, #1
   bc1e6:	ea4f 0232 	mov.w	r2, r2, rrx
   bc1ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc1ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc1f2:	ebb6 0e02 	subs.w	lr, r6, r2
   bc1f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc1fa:	bf22      	ittt	cs
   bc1fc:	1ab6      	subcs	r6, r6, r2
   bc1fe:	4675      	movcs	r5, lr
   bc200:	ea40 000c 	orrcs.w	r0, r0, ip
   bc204:	085b      	lsrs	r3, r3, #1
   bc206:	ea4f 0232 	mov.w	r2, r2, rrx
   bc20a:	ebb6 0e02 	subs.w	lr, r6, r2
   bc20e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc212:	bf22      	ittt	cs
   bc214:	1ab6      	subcs	r6, r6, r2
   bc216:	4675      	movcs	r5, lr
   bc218:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc21c:	085b      	lsrs	r3, r3, #1
   bc21e:	ea4f 0232 	mov.w	r2, r2, rrx
   bc222:	ebb6 0e02 	subs.w	lr, r6, r2
   bc226:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc22a:	bf22      	ittt	cs
   bc22c:	1ab6      	subcs	r6, r6, r2
   bc22e:	4675      	movcs	r5, lr
   bc230:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc234:	085b      	lsrs	r3, r3, #1
   bc236:	ea4f 0232 	mov.w	r2, r2, rrx
   bc23a:	ebb6 0e02 	subs.w	lr, r6, r2
   bc23e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc242:	bf22      	ittt	cs
   bc244:	1ab6      	subcs	r6, r6, r2
   bc246:	4675      	movcs	r5, lr
   bc248:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc24c:	ea55 0e06 	orrs.w	lr, r5, r6
   bc250:	d018      	beq.n	bc284 <__aeabi_ddiv+0x114>
   bc252:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc256:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc25a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc25e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc262:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc266:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc26a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc26e:	d1c0      	bne.n	bc1f2 <__aeabi_ddiv+0x82>
   bc270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc274:	d10b      	bne.n	bc28e <__aeabi_ddiv+0x11e>
   bc276:	ea41 0100 	orr.w	r1, r1, r0
   bc27a:	f04f 0000 	mov.w	r0, #0
   bc27e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc282:	e7b6      	b.n	bc1f2 <__aeabi_ddiv+0x82>
   bc284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc288:	bf04      	itt	eq
   bc28a:	4301      	orreq	r1, r0
   bc28c:	2000      	moveq	r0, #0
   bc28e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc292:	bf88      	it	hi
   bc294:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc298:	f63f aeaf 	bhi.w	bbffa <__aeabi_dmul+0xde>
   bc29c:	ebb5 0c03 	subs.w	ip, r5, r3
   bc2a0:	bf04      	itt	eq
   bc2a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc2a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc2aa:	f150 0000 	adcs.w	r0, r0, #0
   bc2ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc2b2:	bd70      	pop	{r4, r5, r6, pc}
   bc2b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc2b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc2bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc2c0:	bfc2      	ittt	gt
   bc2c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc2c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc2ca:	bd70      	popgt	{r4, r5, r6, pc}
   bc2cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc2d0:	f04f 0e00 	mov.w	lr, #0
   bc2d4:	3c01      	subs	r4, #1
   bc2d6:	e690      	b.n	bbffa <__aeabi_dmul+0xde>
   bc2d8:	ea45 0e06 	orr.w	lr, r5, r6
   bc2dc:	e68d      	b.n	bbffa <__aeabi_dmul+0xde>
   bc2de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc2e2:	ea94 0f0c 	teq	r4, ip
   bc2e6:	bf08      	it	eq
   bc2e8:	ea95 0f0c 	teqeq	r5, ip
   bc2ec:	f43f af3b 	beq.w	bc166 <__aeabi_dmul+0x24a>
   bc2f0:	ea94 0f0c 	teq	r4, ip
   bc2f4:	d10a      	bne.n	bc30c <__aeabi_ddiv+0x19c>
   bc2f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc2fa:	f47f af34 	bne.w	bc166 <__aeabi_dmul+0x24a>
   bc2fe:	ea95 0f0c 	teq	r5, ip
   bc302:	f47f af25 	bne.w	bc150 <__aeabi_dmul+0x234>
   bc306:	4610      	mov	r0, r2
   bc308:	4619      	mov	r1, r3
   bc30a:	e72c      	b.n	bc166 <__aeabi_dmul+0x24a>
   bc30c:	ea95 0f0c 	teq	r5, ip
   bc310:	d106      	bne.n	bc320 <__aeabi_ddiv+0x1b0>
   bc312:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc316:	f43f aefd 	beq.w	bc114 <__aeabi_dmul+0x1f8>
   bc31a:	4610      	mov	r0, r2
   bc31c:	4619      	mov	r1, r3
   bc31e:	e722      	b.n	bc166 <__aeabi_dmul+0x24a>
   bc320:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc324:	bf18      	it	ne
   bc326:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc32a:	f47f aec5 	bne.w	bc0b8 <__aeabi_dmul+0x19c>
   bc32e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc332:	f47f af0d 	bne.w	bc150 <__aeabi_dmul+0x234>
   bc336:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc33a:	f47f aeeb 	bne.w	bc114 <__aeabi_dmul+0x1f8>
   bc33e:	e712      	b.n	bc166 <__aeabi_dmul+0x24a>

000bc340 <__gedf2>:
   bc340:	f04f 3cff 	mov.w	ip, #4294967295
   bc344:	e006      	b.n	bc354 <__cmpdf2+0x4>
   bc346:	bf00      	nop

000bc348 <__ledf2>:
   bc348:	f04f 0c01 	mov.w	ip, #1
   bc34c:	e002      	b.n	bc354 <__cmpdf2+0x4>
   bc34e:	bf00      	nop

000bc350 <__cmpdf2>:
   bc350:	f04f 0c01 	mov.w	ip, #1
   bc354:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc35c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc364:	bf18      	it	ne
   bc366:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc36a:	d01b      	beq.n	bc3a4 <__cmpdf2+0x54>
   bc36c:	b001      	add	sp, #4
   bc36e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc372:	bf0c      	ite	eq
   bc374:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc378:	ea91 0f03 	teqne	r1, r3
   bc37c:	bf02      	ittt	eq
   bc37e:	ea90 0f02 	teqeq	r0, r2
   bc382:	2000      	moveq	r0, #0
   bc384:	4770      	bxeq	lr
   bc386:	f110 0f00 	cmn.w	r0, #0
   bc38a:	ea91 0f03 	teq	r1, r3
   bc38e:	bf58      	it	pl
   bc390:	4299      	cmppl	r1, r3
   bc392:	bf08      	it	eq
   bc394:	4290      	cmpeq	r0, r2
   bc396:	bf2c      	ite	cs
   bc398:	17d8      	asrcs	r0, r3, #31
   bc39a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc39e:	f040 0001 	orr.w	r0, r0, #1
   bc3a2:	4770      	bx	lr
   bc3a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc3a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc3ac:	d102      	bne.n	bc3b4 <__cmpdf2+0x64>
   bc3ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc3b2:	d107      	bne.n	bc3c4 <__cmpdf2+0x74>
   bc3b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc3b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc3bc:	d1d6      	bne.n	bc36c <__cmpdf2+0x1c>
   bc3be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc3c2:	d0d3      	beq.n	bc36c <__cmpdf2+0x1c>
   bc3c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc3c8:	4770      	bx	lr
   bc3ca:	bf00      	nop

000bc3cc <__aeabi_cdrcmple>:
   bc3cc:	4684      	mov	ip, r0
   bc3ce:	4610      	mov	r0, r2
   bc3d0:	4662      	mov	r2, ip
   bc3d2:	468c      	mov	ip, r1
   bc3d4:	4619      	mov	r1, r3
   bc3d6:	4663      	mov	r3, ip
   bc3d8:	e000      	b.n	bc3dc <__aeabi_cdcmpeq>
   bc3da:	bf00      	nop

000bc3dc <__aeabi_cdcmpeq>:
   bc3dc:	b501      	push	{r0, lr}
   bc3de:	f7ff ffb7 	bl	bc350 <__cmpdf2>
   bc3e2:	2800      	cmp	r0, #0
   bc3e4:	bf48      	it	mi
   bc3e6:	f110 0f00 	cmnmi.w	r0, #0
   bc3ea:	bd01      	pop	{r0, pc}

000bc3ec <__aeabi_dcmpeq>:
   bc3ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc3f0:	f7ff fff4 	bl	bc3dc <__aeabi_cdcmpeq>
   bc3f4:	bf0c      	ite	eq
   bc3f6:	2001      	moveq	r0, #1
   bc3f8:	2000      	movne	r0, #0
   bc3fa:	f85d fb08 	ldr.w	pc, [sp], #8
   bc3fe:	bf00      	nop

000bc400 <__aeabi_dcmplt>:
   bc400:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc404:	f7ff ffea 	bl	bc3dc <__aeabi_cdcmpeq>
   bc408:	bf34      	ite	cc
   bc40a:	2001      	movcc	r0, #1
   bc40c:	2000      	movcs	r0, #0
   bc40e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc412:	bf00      	nop

000bc414 <__aeabi_dcmple>:
   bc414:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc418:	f7ff ffe0 	bl	bc3dc <__aeabi_cdcmpeq>
   bc41c:	bf94      	ite	ls
   bc41e:	2001      	movls	r0, #1
   bc420:	2000      	movhi	r0, #0
   bc422:	f85d fb08 	ldr.w	pc, [sp], #8
   bc426:	bf00      	nop

000bc428 <__aeabi_dcmpge>:
   bc428:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc42c:	f7ff ffce 	bl	bc3cc <__aeabi_cdrcmple>
   bc430:	bf94      	ite	ls
   bc432:	2001      	movls	r0, #1
   bc434:	2000      	movhi	r0, #0
   bc436:	f85d fb08 	ldr.w	pc, [sp], #8
   bc43a:	bf00      	nop

000bc43c <__aeabi_dcmpgt>:
   bc43c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc440:	f7ff ffc4 	bl	bc3cc <__aeabi_cdrcmple>
   bc444:	bf34      	ite	cc
   bc446:	2001      	movcc	r0, #1
   bc448:	2000      	movcs	r0, #0
   bc44a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc44e:	bf00      	nop

000bc450 <__aeabi_d2uiz>:
   bc450:	004a      	lsls	r2, r1, #1
   bc452:	d211      	bcs.n	bc478 <__aeabi_d2uiz+0x28>
   bc454:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc458:	d211      	bcs.n	bc47e <__aeabi_d2uiz+0x2e>
   bc45a:	d50d      	bpl.n	bc478 <__aeabi_d2uiz+0x28>
   bc45c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc460:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc464:	d40e      	bmi.n	bc484 <__aeabi_d2uiz+0x34>
   bc466:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc46a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc46e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc472:	fa23 f002 	lsr.w	r0, r3, r2
   bc476:	4770      	bx	lr
   bc478:	f04f 0000 	mov.w	r0, #0
   bc47c:	4770      	bx	lr
   bc47e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc482:	d102      	bne.n	bc48a <__aeabi_d2uiz+0x3a>
   bc484:	f04f 30ff 	mov.w	r0, #4294967295
   bc488:	4770      	bx	lr
   bc48a:	f04f 0000 	mov.w	r0, #0
   bc48e:	4770      	bx	lr

000bc490 <__aeabi_d2f>:
   bc490:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc494:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bc498:	bf24      	itt	cs
   bc49a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bc49e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bc4a2:	d90d      	bls.n	bc4c0 <__aeabi_d2f+0x30>
   bc4a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bc4a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bc4ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bc4b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bc4b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bc4b8:	bf08      	it	eq
   bc4ba:	f020 0001 	biceq.w	r0, r0, #1
   bc4be:	4770      	bx	lr
   bc4c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bc4c4:	d121      	bne.n	bc50a <__aeabi_d2f+0x7a>
   bc4c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bc4ca:	bfbc      	itt	lt
   bc4cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bc4d0:	4770      	bxlt	lr
   bc4d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc4d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bc4da:	f1c2 0218 	rsb	r2, r2, #24
   bc4de:	f1c2 0c20 	rsb	ip, r2, #32
   bc4e2:	fa10 f30c 	lsls.w	r3, r0, ip
   bc4e6:	fa20 f002 	lsr.w	r0, r0, r2
   bc4ea:	bf18      	it	ne
   bc4ec:	f040 0001 	orrne.w	r0, r0, #1
   bc4f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc4f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bc4f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   bc4fc:	ea40 000c 	orr.w	r0, r0, ip
   bc500:	fa23 f302 	lsr.w	r3, r3, r2
   bc504:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bc508:	e7cc      	b.n	bc4a4 <__aeabi_d2f+0x14>
   bc50a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bc50e:	d107      	bne.n	bc520 <__aeabi_d2f+0x90>
   bc510:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bc514:	bf1e      	ittt	ne
   bc516:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bc51a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bc51e:	4770      	bxne	lr
   bc520:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bc524:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bc528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bc52c:	4770      	bx	lr
   bc52e:	bf00      	nop

000bc530 <__aeabi_d2ulz>:
   bc530:	b5d0      	push	{r4, r6, r7, lr}
   bc532:	4b0c      	ldr	r3, [pc, #48]	; (bc564 <__aeabi_d2ulz+0x34>)
   bc534:	2200      	movs	r2, #0
   bc536:	4606      	mov	r6, r0
   bc538:	460f      	mov	r7, r1
   bc53a:	f7ff fcef 	bl	bbf1c <__aeabi_dmul>
   bc53e:	f7ff ff87 	bl	bc450 <__aeabi_d2uiz>
   bc542:	4604      	mov	r4, r0
   bc544:	f7ff fc70 	bl	bbe28 <__aeabi_ui2d>
   bc548:	4b07      	ldr	r3, [pc, #28]	; (bc568 <__aeabi_d2ulz+0x38>)
   bc54a:	2200      	movs	r2, #0
   bc54c:	f7ff fce6 	bl	bbf1c <__aeabi_dmul>
   bc550:	4602      	mov	r2, r0
   bc552:	460b      	mov	r3, r1
   bc554:	4630      	mov	r0, r6
   bc556:	4639      	mov	r1, r7
   bc558:	f7ff fb28 	bl	bbbac <__aeabi_dsub>
   bc55c:	f7ff ff78 	bl	bc450 <__aeabi_d2uiz>
   bc560:	4621      	mov	r1, r4
   bc562:	bdd0      	pop	{r4, r6, r7, pc}
   bc564:	3df00000 	.word	0x3df00000
   bc568:	41f00000 	.word	0x41f00000

000bc56c <atexit>:
   bc56c:	2300      	movs	r3, #0
   bc56e:	4601      	mov	r1, r0
   bc570:	461a      	mov	r2, r3
   bc572:	4618      	mov	r0, r3
   bc574:	f000 bff2 	b.w	bd55c <__register_exitproc>

000bc578 <atof>:
   bc578:	2100      	movs	r1, #0
   bc57a:	f000 bf57 	b.w	bd42c <strtod>

000bc57e <atoi>:
   bc57e:	220a      	movs	r2, #10
   bc580:	2100      	movs	r1, #0
   bc582:	f000 bfe1 	b.w	bd548 <strtol>
	...

000bc588 <isprint>:
   bc588:	4b02      	ldr	r3, [pc, #8]	; (bc594 <isprint+0xc>)
   bc58a:	4418      	add	r0, r3
   bc58c:	7840      	ldrb	r0, [r0, #1]
   bc58e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc592:	4770      	bx	lr
   bc594:	000bf3b0 	.word	0x000bf3b0

000bc598 <memcmp>:
   bc598:	b510      	push	{r4, lr}
   bc59a:	3901      	subs	r1, #1
   bc59c:	4402      	add	r2, r0
   bc59e:	4290      	cmp	r0, r2
   bc5a0:	d101      	bne.n	bc5a6 <memcmp+0xe>
   bc5a2:	2000      	movs	r0, #0
   bc5a4:	e005      	b.n	bc5b2 <memcmp+0x1a>
   bc5a6:	7803      	ldrb	r3, [r0, #0]
   bc5a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc5ac:	42a3      	cmp	r3, r4
   bc5ae:	d001      	beq.n	bc5b4 <memcmp+0x1c>
   bc5b0:	1b18      	subs	r0, r3, r4
   bc5b2:	bd10      	pop	{r4, pc}
   bc5b4:	3001      	adds	r0, #1
   bc5b6:	e7f2      	b.n	bc59e <memcmp+0x6>

000bc5b8 <memcpy>:
   bc5b8:	440a      	add	r2, r1
   bc5ba:	4291      	cmp	r1, r2
   bc5bc:	f100 33ff 	add.w	r3, r0, #4294967295
   bc5c0:	d100      	bne.n	bc5c4 <memcpy+0xc>
   bc5c2:	4770      	bx	lr
   bc5c4:	b510      	push	{r4, lr}
   bc5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc5ce:	4291      	cmp	r1, r2
   bc5d0:	d1f9      	bne.n	bc5c6 <memcpy+0xe>
   bc5d2:	bd10      	pop	{r4, pc}

000bc5d4 <memmove>:
   bc5d4:	4288      	cmp	r0, r1
   bc5d6:	b510      	push	{r4, lr}
   bc5d8:	eb01 0402 	add.w	r4, r1, r2
   bc5dc:	d902      	bls.n	bc5e4 <memmove+0x10>
   bc5de:	4284      	cmp	r4, r0
   bc5e0:	4623      	mov	r3, r4
   bc5e2:	d807      	bhi.n	bc5f4 <memmove+0x20>
   bc5e4:	1e43      	subs	r3, r0, #1
   bc5e6:	42a1      	cmp	r1, r4
   bc5e8:	d008      	beq.n	bc5fc <memmove+0x28>
   bc5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc5f2:	e7f8      	b.n	bc5e6 <memmove+0x12>
   bc5f4:	4402      	add	r2, r0
   bc5f6:	4601      	mov	r1, r0
   bc5f8:	428a      	cmp	r2, r1
   bc5fa:	d100      	bne.n	bc5fe <memmove+0x2a>
   bc5fc:	bd10      	pop	{r4, pc}
   bc5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc602:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc606:	e7f7      	b.n	bc5f8 <memmove+0x24>

000bc608 <memset>:
   bc608:	4402      	add	r2, r0
   bc60a:	4603      	mov	r3, r0
   bc60c:	4293      	cmp	r3, r2
   bc60e:	d100      	bne.n	bc612 <memset+0xa>
   bc610:	4770      	bx	lr
   bc612:	f803 1b01 	strb.w	r1, [r3], #1
   bc616:	e7f9      	b.n	bc60c <memset+0x4>

000bc618 <srand>:
   bc618:	b538      	push	{r3, r4, r5, lr}
   bc61a:	4b10      	ldr	r3, [pc, #64]	; (bc65c <srand+0x44>)
   bc61c:	681d      	ldr	r5, [r3, #0]
   bc61e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc620:	4604      	mov	r4, r0
   bc622:	b9b3      	cbnz	r3, bc652 <srand+0x3a>
   bc624:	2018      	movs	r0, #24
   bc626:	f7fb fab7 	bl	b7b98 <malloc>
   bc62a:	4602      	mov	r2, r0
   bc62c:	63a8      	str	r0, [r5, #56]	; 0x38
   bc62e:	b920      	cbnz	r0, bc63a <srand+0x22>
   bc630:	4b0b      	ldr	r3, [pc, #44]	; (bc660 <srand+0x48>)
   bc632:	480c      	ldr	r0, [pc, #48]	; (bc664 <srand+0x4c>)
   bc634:	2142      	movs	r1, #66	; 0x42
   bc636:	f7fb faf7 	bl	b7c28 <__assert_func>
   bc63a:	490b      	ldr	r1, [pc, #44]	; (bc668 <srand+0x50>)
   bc63c:	4b0b      	ldr	r3, [pc, #44]	; (bc66c <srand+0x54>)
   bc63e:	e9c0 1300 	strd	r1, r3, [r0]
   bc642:	4b0b      	ldr	r3, [pc, #44]	; (bc670 <srand+0x58>)
   bc644:	6083      	str	r3, [r0, #8]
   bc646:	230b      	movs	r3, #11
   bc648:	8183      	strh	r3, [r0, #12]
   bc64a:	2100      	movs	r1, #0
   bc64c:	2001      	movs	r0, #1
   bc64e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc652:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc654:	2200      	movs	r2, #0
   bc656:	611c      	str	r4, [r3, #16]
   bc658:	615a      	str	r2, [r3, #20]
   bc65a:	bd38      	pop	{r3, r4, r5, pc}
   bc65c:	2003dc28 	.word	0x2003dc28
   bc660:	000bf2b9 	.word	0x000bf2b9
   bc664:	000bf2d0 	.word	0x000bf2d0
   bc668:	abcd330e 	.word	0xabcd330e
   bc66c:	e66d1234 	.word	0xe66d1234
   bc670:	0005deec 	.word	0x0005deec

000bc674 <strcat>:
   bc674:	b510      	push	{r4, lr}
   bc676:	4602      	mov	r2, r0
   bc678:	7814      	ldrb	r4, [r2, #0]
   bc67a:	4613      	mov	r3, r2
   bc67c:	3201      	adds	r2, #1
   bc67e:	2c00      	cmp	r4, #0
   bc680:	d1fa      	bne.n	bc678 <strcat+0x4>
   bc682:	3b01      	subs	r3, #1
   bc684:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc688:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc68c:	2a00      	cmp	r2, #0
   bc68e:	d1f9      	bne.n	bc684 <strcat+0x10>
   bc690:	bd10      	pop	{r4, pc}

000bc692 <strchr>:
   bc692:	b2c9      	uxtb	r1, r1
   bc694:	4603      	mov	r3, r0
   bc696:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc69a:	b11a      	cbz	r2, bc6a4 <strchr+0x12>
   bc69c:	428a      	cmp	r2, r1
   bc69e:	d1f9      	bne.n	bc694 <strchr+0x2>
   bc6a0:	4618      	mov	r0, r3
   bc6a2:	4770      	bx	lr
   bc6a4:	2900      	cmp	r1, #0
   bc6a6:	bf18      	it	ne
   bc6a8:	2300      	movne	r3, #0
   bc6aa:	e7f9      	b.n	bc6a0 <strchr+0xe>

000bc6ac <strchrnul>:
   bc6ac:	b510      	push	{r4, lr}
   bc6ae:	4604      	mov	r4, r0
   bc6b0:	f7ff ffef 	bl	bc692 <strchr>
   bc6b4:	b918      	cbnz	r0, bc6be <strchrnul+0x12>
   bc6b6:	4620      	mov	r0, r4
   bc6b8:	f000 f831 	bl	bc71e <strlen>
   bc6bc:	4420      	add	r0, r4
   bc6be:	bd10      	pop	{r4, pc}

000bc6c0 <strcmp>:
   bc6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc6c8:	2a01      	cmp	r2, #1
   bc6ca:	bf28      	it	cs
   bc6cc:	429a      	cmpcs	r2, r3
   bc6ce:	d0f7      	beq.n	bc6c0 <strcmp>
   bc6d0:	1ad0      	subs	r0, r2, r3
   bc6d2:	4770      	bx	lr

000bc6d4 <strcpy>:
   bc6d4:	4603      	mov	r3, r0
   bc6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc6da:	f803 2b01 	strb.w	r2, [r3], #1
   bc6de:	2a00      	cmp	r2, #0
   bc6e0:	d1f9      	bne.n	bc6d6 <strcpy+0x2>
   bc6e2:	4770      	bx	lr

000bc6e4 <strdup>:
   bc6e4:	4b02      	ldr	r3, [pc, #8]	; (bc6f0 <strdup+0xc>)
   bc6e6:	4601      	mov	r1, r0
   bc6e8:	6818      	ldr	r0, [r3, #0]
   bc6ea:	f000 b803 	b.w	bc6f4 <_strdup_r>
   bc6ee:	bf00      	nop
   bc6f0:	2003dc28 	.word	0x2003dc28

000bc6f4 <_strdup_r>:
   bc6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc6f6:	4604      	mov	r4, r0
   bc6f8:	4608      	mov	r0, r1
   bc6fa:	460d      	mov	r5, r1
   bc6fc:	f000 f80f 	bl	bc71e <strlen>
   bc700:	1c42      	adds	r2, r0, #1
   bc702:	4611      	mov	r1, r2
   bc704:	4620      	mov	r0, r4
   bc706:	9201      	str	r2, [sp, #4]
   bc708:	f7fb fa7e 	bl	b7c08 <_malloc_r>
   bc70c:	4604      	mov	r4, r0
   bc70e:	b118      	cbz	r0, bc718 <_strdup_r+0x24>
   bc710:	9a01      	ldr	r2, [sp, #4]
   bc712:	4629      	mov	r1, r5
   bc714:	f7ff ff50 	bl	bc5b8 <memcpy>
   bc718:	4620      	mov	r0, r4
   bc71a:	b003      	add	sp, #12
   bc71c:	bd30      	pop	{r4, r5, pc}

000bc71e <strlen>:
   bc71e:	4603      	mov	r3, r0
   bc720:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc724:	2a00      	cmp	r2, #0
   bc726:	d1fb      	bne.n	bc720 <strlen+0x2>
   bc728:	1a18      	subs	r0, r3, r0
   bc72a:	3801      	subs	r0, #1
   bc72c:	4770      	bx	lr
	...

000bc730 <strlwr>:
   bc730:	b510      	push	{r4, lr}
   bc732:	4c07      	ldr	r4, [pc, #28]	; (bc750 <strlwr+0x20>)
   bc734:	1e42      	subs	r2, r0, #1
   bc736:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   bc73a:	b903      	cbnz	r3, bc73e <strlwr+0xe>
   bc73c:	bd10      	pop	{r4, pc}
   bc73e:	5ce1      	ldrb	r1, [r4, r3]
   bc740:	f001 0103 	and.w	r1, r1, #3
   bc744:	2901      	cmp	r1, #1
   bc746:	bf08      	it	eq
   bc748:	3320      	addeq	r3, #32
   bc74a:	7013      	strb	r3, [r2, #0]
   bc74c:	e7f3      	b.n	bc736 <strlwr+0x6>
   bc74e:	bf00      	nop
   bc750:	000bf3b1 	.word	0x000bf3b1

000bc754 <strncmp>:
   bc754:	b510      	push	{r4, lr}
   bc756:	b17a      	cbz	r2, bc778 <strncmp+0x24>
   bc758:	4603      	mov	r3, r0
   bc75a:	3901      	subs	r1, #1
   bc75c:	1884      	adds	r4, r0, r2
   bc75e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc762:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc766:	4290      	cmp	r0, r2
   bc768:	d101      	bne.n	bc76e <strncmp+0x1a>
   bc76a:	42a3      	cmp	r3, r4
   bc76c:	d101      	bne.n	bc772 <strncmp+0x1e>
   bc76e:	1a80      	subs	r0, r0, r2
   bc770:	bd10      	pop	{r4, pc}
   bc772:	2800      	cmp	r0, #0
   bc774:	d1f3      	bne.n	bc75e <strncmp+0xa>
   bc776:	e7fa      	b.n	bc76e <strncmp+0x1a>
   bc778:	4610      	mov	r0, r2
   bc77a:	e7f9      	b.n	bc770 <strncmp+0x1c>

000bc77c <strnlen>:
   bc77c:	b510      	push	{r4, lr}
   bc77e:	4602      	mov	r2, r0
   bc780:	4401      	add	r1, r0
   bc782:	428a      	cmp	r2, r1
   bc784:	4613      	mov	r3, r2
   bc786:	d003      	beq.n	bc790 <strnlen+0x14>
   bc788:	781c      	ldrb	r4, [r3, #0]
   bc78a:	3201      	adds	r2, #1
   bc78c:	2c00      	cmp	r4, #0
   bc78e:	d1f8      	bne.n	bc782 <strnlen+0x6>
   bc790:	1a18      	subs	r0, r3, r0
   bc792:	bd10      	pop	{r4, pc}

000bc794 <strrchr>:
   bc794:	b538      	push	{r3, r4, r5, lr}
   bc796:	4603      	mov	r3, r0
   bc798:	460c      	mov	r4, r1
   bc79a:	b969      	cbnz	r1, bc7b8 <strrchr+0x24>
   bc79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc7a0:	f7ff bf77 	b.w	bc692 <strchr>
   bc7a4:	1c43      	adds	r3, r0, #1
   bc7a6:	4605      	mov	r5, r0
   bc7a8:	4621      	mov	r1, r4
   bc7aa:	4618      	mov	r0, r3
   bc7ac:	f7ff ff71 	bl	bc692 <strchr>
   bc7b0:	2800      	cmp	r0, #0
   bc7b2:	d1f7      	bne.n	bc7a4 <strrchr+0x10>
   bc7b4:	4628      	mov	r0, r5
   bc7b6:	bd38      	pop	{r3, r4, r5, pc}
   bc7b8:	2500      	movs	r5, #0
   bc7ba:	e7f5      	b.n	bc7a8 <strrchr+0x14>

000bc7bc <strstr>:
   bc7bc:	780a      	ldrb	r2, [r1, #0]
   bc7be:	b570      	push	{r4, r5, r6, lr}
   bc7c0:	b96a      	cbnz	r2, bc7de <strstr+0x22>
   bc7c2:	bd70      	pop	{r4, r5, r6, pc}
   bc7c4:	429a      	cmp	r2, r3
   bc7c6:	d109      	bne.n	bc7dc <strstr+0x20>
   bc7c8:	460c      	mov	r4, r1
   bc7ca:	4605      	mov	r5, r0
   bc7cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   bc7d0:	2b00      	cmp	r3, #0
   bc7d2:	d0f6      	beq.n	bc7c2 <strstr+0x6>
   bc7d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   bc7d8:	429e      	cmp	r6, r3
   bc7da:	d0f7      	beq.n	bc7cc <strstr+0x10>
   bc7dc:	3001      	adds	r0, #1
   bc7de:	7803      	ldrb	r3, [r0, #0]
   bc7e0:	2b00      	cmp	r3, #0
   bc7e2:	d1ef      	bne.n	bc7c4 <strstr+0x8>
   bc7e4:	4618      	mov	r0, r3
   bc7e6:	e7ec      	b.n	bc7c2 <strstr+0x6>

000bc7e8 <sulp>:
   bc7e8:	b570      	push	{r4, r5, r6, lr}
   bc7ea:	4604      	mov	r4, r0
   bc7ec:	460d      	mov	r5, r1
   bc7ee:	ec45 4b10 	vmov	d0, r4, r5
   bc7f2:	4616      	mov	r6, r2
   bc7f4:	f001 fe0c 	bl	be410 <__ulp>
   bc7f8:	ec51 0b10 	vmov	r0, r1, d0
   bc7fc:	b17e      	cbz	r6, bc81e <sulp+0x36>
   bc7fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bc802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc806:	2b00      	cmp	r3, #0
   bc808:	dd09      	ble.n	bc81e <sulp+0x36>
   bc80a:	051b      	lsls	r3, r3, #20
   bc80c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bc810:	2400      	movs	r4, #0
   bc812:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bc816:	4622      	mov	r2, r4
   bc818:	462b      	mov	r3, r5
   bc81a:	f7ff fb7f 	bl	bbf1c <__aeabi_dmul>
   bc81e:	bd70      	pop	{r4, r5, r6, pc}

000bc820 <_strtod_l>:
   bc820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc824:	ed2d 8b02 	vpush	{d8}
   bc828:	b09d      	sub	sp, #116	; 0x74
   bc82a:	461f      	mov	r7, r3
   bc82c:	2300      	movs	r3, #0
   bc82e:	9318      	str	r3, [sp, #96]	; 0x60
   bc830:	4ba2      	ldr	r3, [pc, #648]	; (bcabc <_strtod_l+0x29c>)
   bc832:	9213      	str	r2, [sp, #76]	; 0x4c
   bc834:	681b      	ldr	r3, [r3, #0]
   bc836:	9305      	str	r3, [sp, #20]
   bc838:	4604      	mov	r4, r0
   bc83a:	4618      	mov	r0, r3
   bc83c:	4688      	mov	r8, r1
   bc83e:	f7ff ff6e 	bl	bc71e <strlen>
   bc842:	f04f 0a00 	mov.w	sl, #0
   bc846:	4605      	mov	r5, r0
   bc848:	f04f 0b00 	mov.w	fp, #0
   bc84c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc852:	781a      	ldrb	r2, [r3, #0]
   bc854:	2a2b      	cmp	r2, #43	; 0x2b
   bc856:	d04e      	beq.n	bc8f6 <_strtod_l+0xd6>
   bc858:	d83b      	bhi.n	bc8d2 <_strtod_l+0xb2>
   bc85a:	2a0d      	cmp	r2, #13
   bc85c:	d834      	bhi.n	bc8c8 <_strtod_l+0xa8>
   bc85e:	2a08      	cmp	r2, #8
   bc860:	d834      	bhi.n	bc8cc <_strtod_l+0xac>
   bc862:	2a00      	cmp	r2, #0
   bc864:	d03e      	beq.n	bc8e4 <_strtod_l+0xc4>
   bc866:	2300      	movs	r3, #0
   bc868:	930a      	str	r3, [sp, #40]	; 0x28
   bc86a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bc86c:	7833      	ldrb	r3, [r6, #0]
   bc86e:	2b30      	cmp	r3, #48	; 0x30
   bc870:	f040 80b0 	bne.w	bc9d4 <_strtod_l+0x1b4>
   bc874:	7873      	ldrb	r3, [r6, #1]
   bc876:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bc87a:	2b58      	cmp	r3, #88	; 0x58
   bc87c:	d168      	bne.n	bc950 <_strtod_l+0x130>
   bc87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc880:	9301      	str	r3, [sp, #4]
   bc882:	ab18      	add	r3, sp, #96	; 0x60
   bc884:	9702      	str	r7, [sp, #8]
   bc886:	9300      	str	r3, [sp, #0]
   bc888:	4a8d      	ldr	r2, [pc, #564]	; (bcac0 <_strtod_l+0x2a0>)
   bc88a:	ab19      	add	r3, sp, #100	; 0x64
   bc88c:	a917      	add	r1, sp, #92	; 0x5c
   bc88e:	4620      	mov	r0, r4
   bc890:	f000 ff2e 	bl	bd6f0 <__gethex>
   bc894:	f010 0707 	ands.w	r7, r0, #7
   bc898:	4605      	mov	r5, r0
   bc89a:	d005      	beq.n	bc8a8 <_strtod_l+0x88>
   bc89c:	2f06      	cmp	r7, #6
   bc89e:	d12c      	bne.n	bc8fa <_strtod_l+0xda>
   bc8a0:	3601      	adds	r6, #1
   bc8a2:	2300      	movs	r3, #0
   bc8a4:	9617      	str	r6, [sp, #92]	; 0x5c
   bc8a6:	930a      	str	r3, [sp, #40]	; 0x28
   bc8a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc8aa:	2b00      	cmp	r3, #0
   bc8ac:	f040 8590 	bne.w	bd3d0 <_strtod_l+0xbb0>
   bc8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bc8b2:	b1eb      	cbz	r3, bc8f0 <_strtod_l+0xd0>
   bc8b4:	4652      	mov	r2, sl
   bc8b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bc8ba:	ec43 2b10 	vmov	d0, r2, r3
   bc8be:	b01d      	add	sp, #116	; 0x74
   bc8c0:	ecbd 8b02 	vpop	{d8}
   bc8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc8c8:	2a20      	cmp	r2, #32
   bc8ca:	d1cc      	bne.n	bc866 <_strtod_l+0x46>
   bc8cc:	3301      	adds	r3, #1
   bc8ce:	9317      	str	r3, [sp, #92]	; 0x5c
   bc8d0:	e7be      	b.n	bc850 <_strtod_l+0x30>
   bc8d2:	2a2d      	cmp	r2, #45	; 0x2d
   bc8d4:	d1c7      	bne.n	bc866 <_strtod_l+0x46>
   bc8d6:	2201      	movs	r2, #1
   bc8d8:	920a      	str	r2, [sp, #40]	; 0x28
   bc8da:	1c5a      	adds	r2, r3, #1
   bc8dc:	9217      	str	r2, [sp, #92]	; 0x5c
   bc8de:	785b      	ldrb	r3, [r3, #1]
   bc8e0:	2b00      	cmp	r3, #0
   bc8e2:	d1c2      	bne.n	bc86a <_strtod_l+0x4a>
   bc8e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bc8e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc8ea:	2b00      	cmp	r3, #0
   bc8ec:	f040 856e 	bne.w	bd3cc <_strtod_l+0xbac>
   bc8f0:	4652      	mov	r2, sl
   bc8f2:	465b      	mov	r3, fp
   bc8f4:	e7e1      	b.n	bc8ba <_strtod_l+0x9a>
   bc8f6:	2200      	movs	r2, #0
   bc8f8:	e7ee      	b.n	bc8d8 <_strtod_l+0xb8>
   bc8fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc8fc:	b13a      	cbz	r2, bc90e <_strtod_l+0xee>
   bc8fe:	2135      	movs	r1, #53	; 0x35
   bc900:	a81a      	add	r0, sp, #104	; 0x68
   bc902:	f001 fe90 	bl	be626 <__copybits>
   bc906:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc908:	4620      	mov	r0, r4
   bc90a:	f001 fa4f 	bl	bddac <_Bfree>
   bc90e:	3f01      	subs	r7, #1
   bc910:	2f04      	cmp	r7, #4
   bc912:	d806      	bhi.n	bc922 <_strtod_l+0x102>
   bc914:	e8df f007 	tbb	[pc, r7]
   bc918:	1714030a 	.word	0x1714030a
   bc91c:	0a          	.byte	0x0a
   bc91d:	00          	.byte	0x00
   bc91e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bc922:	0728      	lsls	r0, r5, #28
   bc924:	d5c0      	bpl.n	bc8a8 <_strtod_l+0x88>
   bc926:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bc92a:	e7bd      	b.n	bc8a8 <_strtod_l+0x88>
   bc92c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bc930:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bc932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bc936:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bc93a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bc93e:	e7f0      	b.n	bc922 <_strtod_l+0x102>
   bc940:	f8df b180 	ldr.w	fp, [pc, #384]	; bcac4 <_strtod_l+0x2a4>
   bc944:	e7ed      	b.n	bc922 <_strtod_l+0x102>
   bc946:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bc94a:	f04f 3aff 	mov.w	sl, #4294967295
   bc94e:	e7e8      	b.n	bc922 <_strtod_l+0x102>
   bc950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc952:	1c5a      	adds	r2, r3, #1
   bc954:	9217      	str	r2, [sp, #92]	; 0x5c
   bc956:	785b      	ldrb	r3, [r3, #1]
   bc958:	2b30      	cmp	r3, #48	; 0x30
   bc95a:	d0f9      	beq.n	bc950 <_strtod_l+0x130>
   bc95c:	2b00      	cmp	r3, #0
   bc95e:	d0a3      	beq.n	bc8a8 <_strtod_l+0x88>
   bc960:	2301      	movs	r3, #1
   bc962:	f04f 0900 	mov.w	r9, #0
   bc966:	9304      	str	r3, [sp, #16]
   bc968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc96a:	9308      	str	r3, [sp, #32]
   bc96c:	f8cd 901c 	str.w	r9, [sp, #28]
   bc970:	464f      	mov	r7, r9
   bc972:	220a      	movs	r2, #10
   bc974:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bc976:	7806      	ldrb	r6, [r0, #0]
   bc978:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bc97c:	b2d9      	uxtb	r1, r3
   bc97e:	2909      	cmp	r1, #9
   bc980:	d92a      	bls.n	bc9d8 <_strtod_l+0x1b8>
   bc982:	9905      	ldr	r1, [sp, #20]
   bc984:	462a      	mov	r2, r5
   bc986:	f7ff fee5 	bl	bc754 <strncmp>
   bc98a:	b398      	cbz	r0, bc9f4 <_strtod_l+0x1d4>
   bc98c:	2000      	movs	r0, #0
   bc98e:	4632      	mov	r2, r6
   bc990:	463d      	mov	r5, r7
   bc992:	9005      	str	r0, [sp, #20]
   bc994:	4603      	mov	r3, r0
   bc996:	2a65      	cmp	r2, #101	; 0x65
   bc998:	d001      	beq.n	bc99e <_strtod_l+0x17e>
   bc99a:	2a45      	cmp	r2, #69	; 0x45
   bc99c:	d118      	bne.n	bc9d0 <_strtod_l+0x1b0>
   bc99e:	b91d      	cbnz	r5, bc9a8 <_strtod_l+0x188>
   bc9a0:	9a04      	ldr	r2, [sp, #16]
   bc9a2:	4302      	orrs	r2, r0
   bc9a4:	d09e      	beq.n	bc8e4 <_strtod_l+0xc4>
   bc9a6:	2500      	movs	r5, #0
   bc9a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bc9ac:	f108 0201 	add.w	r2, r8, #1
   bc9b0:	9217      	str	r2, [sp, #92]	; 0x5c
   bc9b2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bc9b6:	2a2b      	cmp	r2, #43	; 0x2b
   bc9b8:	d075      	beq.n	bcaa6 <_strtod_l+0x286>
   bc9ba:	2a2d      	cmp	r2, #45	; 0x2d
   bc9bc:	d07b      	beq.n	bcab6 <_strtod_l+0x296>
   bc9be:	f04f 0c00 	mov.w	ip, #0
   bc9c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bc9c6:	2909      	cmp	r1, #9
   bc9c8:	f240 8082 	bls.w	bcad0 <_strtod_l+0x2b0>
   bc9cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc9d0:	2600      	movs	r6, #0
   bc9d2:	e09d      	b.n	bcb10 <_strtod_l+0x2f0>
   bc9d4:	2300      	movs	r3, #0
   bc9d6:	e7c4      	b.n	bc962 <_strtod_l+0x142>
   bc9d8:	2f08      	cmp	r7, #8
   bc9da:	bfd8      	it	le
   bc9dc:	9907      	ldrle	r1, [sp, #28]
   bc9de:	f100 0001 	add.w	r0, r0, #1
   bc9e2:	bfda      	itte	le
   bc9e4:	fb02 3301 	mlale	r3, r2, r1, r3
   bc9e8:	9307      	strle	r3, [sp, #28]
   bc9ea:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc9ee:	3701      	adds	r7, #1
   bc9f0:	9017      	str	r0, [sp, #92]	; 0x5c
   bc9f2:	e7bf      	b.n	bc974 <_strtod_l+0x154>
   bc9f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc9f6:	195a      	adds	r2, r3, r5
   bc9f8:	9217      	str	r2, [sp, #92]	; 0x5c
   bc9fa:	5d5a      	ldrb	r2, [r3, r5]
   bc9fc:	2f00      	cmp	r7, #0
   bc9fe:	d037      	beq.n	bca70 <_strtod_l+0x250>
   bca00:	9005      	str	r0, [sp, #20]
   bca02:	463d      	mov	r5, r7
   bca04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bca08:	2b09      	cmp	r3, #9
   bca0a:	d912      	bls.n	bca32 <_strtod_l+0x212>
   bca0c:	2301      	movs	r3, #1
   bca0e:	e7c2      	b.n	bc996 <_strtod_l+0x176>
   bca10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca12:	1c5a      	adds	r2, r3, #1
   bca14:	9217      	str	r2, [sp, #92]	; 0x5c
   bca16:	785a      	ldrb	r2, [r3, #1]
   bca18:	3001      	adds	r0, #1
   bca1a:	2a30      	cmp	r2, #48	; 0x30
   bca1c:	d0f8      	beq.n	bca10 <_strtod_l+0x1f0>
   bca1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bca22:	2b08      	cmp	r3, #8
   bca24:	f200 84d9 	bhi.w	bd3da <_strtod_l+0xbba>
   bca28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca2a:	9005      	str	r0, [sp, #20]
   bca2c:	2000      	movs	r0, #0
   bca2e:	9308      	str	r3, [sp, #32]
   bca30:	4605      	mov	r5, r0
   bca32:	3a30      	subs	r2, #48	; 0x30
   bca34:	f100 0301 	add.w	r3, r0, #1
   bca38:	d014      	beq.n	bca64 <_strtod_l+0x244>
   bca3a:	9905      	ldr	r1, [sp, #20]
   bca3c:	4419      	add	r1, r3
   bca3e:	9105      	str	r1, [sp, #20]
   bca40:	462b      	mov	r3, r5
   bca42:	eb00 0e05 	add.w	lr, r0, r5
   bca46:	210a      	movs	r1, #10
   bca48:	4573      	cmp	r3, lr
   bca4a:	d113      	bne.n	bca74 <_strtod_l+0x254>
   bca4c:	182b      	adds	r3, r5, r0
   bca4e:	2b08      	cmp	r3, #8
   bca50:	f105 0501 	add.w	r5, r5, #1
   bca54:	4405      	add	r5, r0
   bca56:	dc1c      	bgt.n	bca92 <_strtod_l+0x272>
   bca58:	9907      	ldr	r1, [sp, #28]
   bca5a:	230a      	movs	r3, #10
   bca5c:	fb03 2301 	mla	r3, r3, r1, r2
   bca60:	9307      	str	r3, [sp, #28]
   bca62:	2300      	movs	r3, #0
   bca64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bca66:	1c51      	adds	r1, r2, #1
   bca68:	9117      	str	r1, [sp, #92]	; 0x5c
   bca6a:	7852      	ldrb	r2, [r2, #1]
   bca6c:	4618      	mov	r0, r3
   bca6e:	e7c9      	b.n	bca04 <_strtod_l+0x1e4>
   bca70:	4638      	mov	r0, r7
   bca72:	e7d2      	b.n	bca1a <_strtod_l+0x1fa>
   bca74:	2b08      	cmp	r3, #8
   bca76:	dc04      	bgt.n	bca82 <_strtod_l+0x262>
   bca78:	9e07      	ldr	r6, [sp, #28]
   bca7a:	434e      	muls	r6, r1
   bca7c:	9607      	str	r6, [sp, #28]
   bca7e:	3301      	adds	r3, #1
   bca80:	e7e2      	b.n	bca48 <_strtod_l+0x228>
   bca82:	f103 0c01 	add.w	ip, r3, #1
   bca86:	f1bc 0f10 	cmp.w	ip, #16
   bca8a:	bfd8      	it	le
   bca8c:	fb01 f909 	mulle.w	r9, r1, r9
   bca90:	e7f5      	b.n	bca7e <_strtod_l+0x25e>
   bca92:	2d10      	cmp	r5, #16
   bca94:	bfdc      	itt	le
   bca96:	230a      	movle	r3, #10
   bca98:	fb03 2909 	mlale	r9, r3, r9, r2
   bca9c:	e7e1      	b.n	bca62 <_strtod_l+0x242>
   bca9e:	2300      	movs	r3, #0
   bcaa0:	9305      	str	r3, [sp, #20]
   bcaa2:	2301      	movs	r3, #1
   bcaa4:	e77c      	b.n	bc9a0 <_strtod_l+0x180>
   bcaa6:	f04f 0c00 	mov.w	ip, #0
   bcaaa:	f108 0202 	add.w	r2, r8, #2
   bcaae:	9217      	str	r2, [sp, #92]	; 0x5c
   bcab0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bcab4:	e785      	b.n	bc9c2 <_strtod_l+0x1a2>
   bcab6:	f04f 0c01 	mov.w	ip, #1
   bcaba:	e7f6      	b.n	bcaaa <_strtod_l+0x28a>
   bcabc:	000bf548 	.word	0x000bf548
   bcac0:	000bf35c 	.word	0x000bf35c
   bcac4:	7ff00000 	.word	0x7ff00000
   bcac8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcaca:	1c51      	adds	r1, r2, #1
   bcacc:	9117      	str	r1, [sp, #92]	; 0x5c
   bcace:	7852      	ldrb	r2, [r2, #1]
   bcad0:	2a30      	cmp	r2, #48	; 0x30
   bcad2:	d0f9      	beq.n	bcac8 <_strtod_l+0x2a8>
   bcad4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bcad8:	2908      	cmp	r1, #8
   bcada:	f63f af79 	bhi.w	bc9d0 <_strtod_l+0x1b0>
   bcade:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bcae2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcae4:	9206      	str	r2, [sp, #24]
   bcae6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bcae8:	1c51      	adds	r1, r2, #1
   bcaea:	9117      	str	r1, [sp, #92]	; 0x5c
   bcaec:	7852      	ldrb	r2, [r2, #1]
   bcaee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bcaf2:	2e09      	cmp	r6, #9
   bcaf4:	d937      	bls.n	bcb66 <_strtod_l+0x346>
   bcaf6:	9e06      	ldr	r6, [sp, #24]
   bcaf8:	1b89      	subs	r1, r1, r6
   bcafa:	2908      	cmp	r1, #8
   bcafc:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bcb00:	dc02      	bgt.n	bcb08 <_strtod_l+0x2e8>
   bcb02:	4576      	cmp	r6, lr
   bcb04:	bfa8      	it	ge
   bcb06:	4676      	movge	r6, lr
   bcb08:	f1bc 0f00 	cmp.w	ip, #0
   bcb0c:	d000      	beq.n	bcb10 <_strtod_l+0x2f0>
   bcb0e:	4276      	negs	r6, r6
   bcb10:	2d00      	cmp	r5, #0
   bcb12:	d14d      	bne.n	bcbb0 <_strtod_l+0x390>
   bcb14:	9904      	ldr	r1, [sp, #16]
   bcb16:	4301      	orrs	r1, r0
   bcb18:	f47f aec6 	bne.w	bc8a8 <_strtod_l+0x88>
   bcb1c:	2b00      	cmp	r3, #0
   bcb1e:	f47f aee1 	bne.w	bc8e4 <_strtod_l+0xc4>
   bcb22:	2a69      	cmp	r2, #105	; 0x69
   bcb24:	d027      	beq.n	bcb76 <_strtod_l+0x356>
   bcb26:	dc24      	bgt.n	bcb72 <_strtod_l+0x352>
   bcb28:	2a49      	cmp	r2, #73	; 0x49
   bcb2a:	d024      	beq.n	bcb76 <_strtod_l+0x356>
   bcb2c:	2a4e      	cmp	r2, #78	; 0x4e
   bcb2e:	f47f aed9 	bne.w	bc8e4 <_strtod_l+0xc4>
   bcb32:	499f      	ldr	r1, [pc, #636]	; (bcdb0 <_strtod_l+0x590>)
   bcb34:	a817      	add	r0, sp, #92	; 0x5c
   bcb36:	f001 f833 	bl	bdba0 <__match>
   bcb3a:	2800      	cmp	r0, #0
   bcb3c:	f43f aed2 	beq.w	bc8e4 <_strtod_l+0xc4>
   bcb40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb42:	781b      	ldrb	r3, [r3, #0]
   bcb44:	2b28      	cmp	r3, #40	; 0x28
   bcb46:	d12d      	bne.n	bcba4 <_strtod_l+0x384>
   bcb48:	499a      	ldr	r1, [pc, #616]	; (bcdb4 <_strtod_l+0x594>)
   bcb4a:	aa1a      	add	r2, sp, #104	; 0x68
   bcb4c:	a817      	add	r0, sp, #92	; 0x5c
   bcb4e:	f001 f83b 	bl	bdbc8 <__hexnan>
   bcb52:	2805      	cmp	r0, #5
   bcb54:	d126      	bne.n	bcba4 <_strtod_l+0x384>
   bcb56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bcb58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bcb5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bcb60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bcb64:	e6a0      	b.n	bc8a8 <_strtod_l+0x88>
   bcb66:	210a      	movs	r1, #10
   bcb68:	fb01 2e0e 	mla	lr, r1, lr, r2
   bcb6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bcb70:	e7b9      	b.n	bcae6 <_strtod_l+0x2c6>
   bcb72:	2a6e      	cmp	r2, #110	; 0x6e
   bcb74:	e7db      	b.n	bcb2e <_strtod_l+0x30e>
   bcb76:	4990      	ldr	r1, [pc, #576]	; (bcdb8 <_strtod_l+0x598>)
   bcb78:	a817      	add	r0, sp, #92	; 0x5c
   bcb7a:	f001 f811 	bl	bdba0 <__match>
   bcb7e:	2800      	cmp	r0, #0
   bcb80:	f43f aeb0 	beq.w	bc8e4 <_strtod_l+0xc4>
   bcb84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb86:	498d      	ldr	r1, [pc, #564]	; (bcdbc <_strtod_l+0x59c>)
   bcb88:	3b01      	subs	r3, #1
   bcb8a:	a817      	add	r0, sp, #92	; 0x5c
   bcb8c:	9317      	str	r3, [sp, #92]	; 0x5c
   bcb8e:	f001 f807 	bl	bdba0 <__match>
   bcb92:	b910      	cbnz	r0, bcb9a <_strtod_l+0x37a>
   bcb94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bcb96:	3301      	adds	r3, #1
   bcb98:	9317      	str	r3, [sp, #92]	; 0x5c
   bcb9a:	f8df b230 	ldr.w	fp, [pc, #560]	; bcdcc <_strtod_l+0x5ac>
   bcb9e:	f04f 0a00 	mov.w	sl, #0
   bcba2:	e681      	b.n	bc8a8 <_strtod_l+0x88>
   bcba4:	4886      	ldr	r0, [pc, #536]	; (bcdc0 <_strtod_l+0x5a0>)
   bcba6:	f001 fd93 	bl	be6d0 <nan>
   bcbaa:	ec5b ab10 	vmov	sl, fp, d0
   bcbae:	e67b      	b.n	bc8a8 <_strtod_l+0x88>
   bcbb0:	9b05      	ldr	r3, [sp, #20]
   bcbb2:	9807      	ldr	r0, [sp, #28]
   bcbb4:	1af3      	subs	r3, r6, r3
   bcbb6:	2f00      	cmp	r7, #0
   bcbb8:	bf08      	it	eq
   bcbba:	462f      	moveq	r7, r5
   bcbbc:	2d10      	cmp	r5, #16
   bcbbe:	9306      	str	r3, [sp, #24]
   bcbc0:	46a8      	mov	r8, r5
   bcbc2:	bfa8      	it	ge
   bcbc4:	f04f 0810 	movge.w	r8, #16
   bcbc8:	f7ff f92e 	bl	bbe28 <__aeabi_ui2d>
   bcbcc:	2d09      	cmp	r5, #9
   bcbce:	4682      	mov	sl, r0
   bcbd0:	468b      	mov	fp, r1
   bcbd2:	dd13      	ble.n	bcbfc <_strtod_l+0x3dc>
   bcbd4:	4b7b      	ldr	r3, [pc, #492]	; (bcdc4 <_strtod_l+0x5a4>)
   bcbd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bcbda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bcbde:	f7ff f99d 	bl	bbf1c <__aeabi_dmul>
   bcbe2:	4682      	mov	sl, r0
   bcbe4:	4648      	mov	r0, r9
   bcbe6:	468b      	mov	fp, r1
   bcbe8:	f7ff f91e 	bl	bbe28 <__aeabi_ui2d>
   bcbec:	4602      	mov	r2, r0
   bcbee:	460b      	mov	r3, r1
   bcbf0:	4650      	mov	r0, sl
   bcbf2:	4659      	mov	r1, fp
   bcbf4:	f7fe ffdc 	bl	bbbb0 <__adddf3>
   bcbf8:	4682      	mov	sl, r0
   bcbfa:	468b      	mov	fp, r1
   bcbfc:	2d0f      	cmp	r5, #15
   bcbfe:	dc38      	bgt.n	bcc72 <_strtod_l+0x452>
   bcc00:	9b06      	ldr	r3, [sp, #24]
   bcc02:	2b00      	cmp	r3, #0
   bcc04:	f43f ae50 	beq.w	bc8a8 <_strtod_l+0x88>
   bcc08:	dd24      	ble.n	bcc54 <_strtod_l+0x434>
   bcc0a:	2b16      	cmp	r3, #22
   bcc0c:	dc0b      	bgt.n	bcc26 <_strtod_l+0x406>
   bcc0e:	496d      	ldr	r1, [pc, #436]	; (bcdc4 <_strtod_l+0x5a4>)
   bcc10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcc14:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc18:	4652      	mov	r2, sl
   bcc1a:	465b      	mov	r3, fp
   bcc1c:	f7ff f97e 	bl	bbf1c <__aeabi_dmul>
   bcc20:	4682      	mov	sl, r0
   bcc22:	468b      	mov	fp, r1
   bcc24:	e640      	b.n	bc8a8 <_strtod_l+0x88>
   bcc26:	9a06      	ldr	r2, [sp, #24]
   bcc28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bcc2c:	4293      	cmp	r3, r2
   bcc2e:	db20      	blt.n	bcc72 <_strtod_l+0x452>
   bcc30:	4c64      	ldr	r4, [pc, #400]	; (bcdc4 <_strtod_l+0x5a4>)
   bcc32:	f1c5 050f 	rsb	r5, r5, #15
   bcc36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bcc3a:	4652      	mov	r2, sl
   bcc3c:	465b      	mov	r3, fp
   bcc3e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc42:	f7ff f96b 	bl	bbf1c <__aeabi_dmul>
   bcc46:	9b06      	ldr	r3, [sp, #24]
   bcc48:	1b5d      	subs	r5, r3, r5
   bcc4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bcc4e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bcc52:	e7e3      	b.n	bcc1c <_strtod_l+0x3fc>
   bcc54:	9b06      	ldr	r3, [sp, #24]
   bcc56:	3316      	adds	r3, #22
   bcc58:	db0b      	blt.n	bcc72 <_strtod_l+0x452>
   bcc5a:	9b05      	ldr	r3, [sp, #20]
   bcc5c:	1b9e      	subs	r6, r3, r6
   bcc5e:	4b59      	ldr	r3, [pc, #356]	; (bcdc4 <_strtod_l+0x5a4>)
   bcc60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bcc64:	e9d6 2300 	ldrd	r2, r3, [r6]
   bcc68:	4650      	mov	r0, sl
   bcc6a:	4659      	mov	r1, fp
   bcc6c:	f7ff fa80 	bl	bc170 <__aeabi_ddiv>
   bcc70:	e7d6      	b.n	bcc20 <_strtod_l+0x400>
   bcc72:	9b06      	ldr	r3, [sp, #24]
   bcc74:	eba5 0808 	sub.w	r8, r5, r8
   bcc78:	4498      	add	r8, r3
   bcc7a:	f1b8 0f00 	cmp.w	r8, #0
   bcc7e:	dd74      	ble.n	bcd6a <_strtod_l+0x54a>
   bcc80:	f018 030f 	ands.w	r3, r8, #15
   bcc84:	d00a      	beq.n	bcc9c <_strtod_l+0x47c>
   bcc86:	494f      	ldr	r1, [pc, #316]	; (bcdc4 <_strtod_l+0x5a4>)
   bcc88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bcc8c:	4652      	mov	r2, sl
   bcc8e:	465b      	mov	r3, fp
   bcc90:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc94:	f7ff f942 	bl	bbf1c <__aeabi_dmul>
   bcc98:	4682      	mov	sl, r0
   bcc9a:	468b      	mov	fp, r1
   bcc9c:	f038 080f 	bics.w	r8, r8, #15
   bcca0:	d04f      	beq.n	bcd42 <_strtod_l+0x522>
   bcca2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bcca6:	dd22      	ble.n	bccee <_strtod_l+0x4ce>
   bcca8:	2500      	movs	r5, #0
   bccaa:	462e      	mov	r6, r5
   bccac:	9507      	str	r5, [sp, #28]
   bccae:	9505      	str	r5, [sp, #20]
   bccb0:	2322      	movs	r3, #34	; 0x22
   bccb2:	f8df b118 	ldr.w	fp, [pc, #280]	; bcdcc <_strtod_l+0x5ac>
   bccb6:	6023      	str	r3, [r4, #0]
   bccb8:	f04f 0a00 	mov.w	sl, #0
   bccbc:	9b07      	ldr	r3, [sp, #28]
   bccbe:	2b00      	cmp	r3, #0
   bccc0:	f43f adf2 	beq.w	bc8a8 <_strtod_l+0x88>
   bccc4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bccc6:	4620      	mov	r0, r4
   bccc8:	f001 f870 	bl	bddac <_Bfree>
   bcccc:	9905      	ldr	r1, [sp, #20]
   bccce:	4620      	mov	r0, r4
   bccd0:	f001 f86c 	bl	bddac <_Bfree>
   bccd4:	4631      	mov	r1, r6
   bccd6:	4620      	mov	r0, r4
   bccd8:	f001 f868 	bl	bddac <_Bfree>
   bccdc:	9907      	ldr	r1, [sp, #28]
   bccde:	4620      	mov	r0, r4
   bcce0:	f001 f864 	bl	bddac <_Bfree>
   bcce4:	4629      	mov	r1, r5
   bcce6:	4620      	mov	r0, r4
   bcce8:	f001 f860 	bl	bddac <_Bfree>
   bccec:	e5dc      	b.n	bc8a8 <_strtod_l+0x88>
   bccee:	4b36      	ldr	r3, [pc, #216]	; (bcdc8 <_strtod_l+0x5a8>)
   bccf0:	9304      	str	r3, [sp, #16]
   bccf2:	2300      	movs	r3, #0
   bccf4:	ea4f 1828 	mov.w	r8, r8, asr #4
   bccf8:	4650      	mov	r0, sl
   bccfa:	4659      	mov	r1, fp
   bccfc:	4699      	mov	r9, r3
   bccfe:	f1b8 0f01 	cmp.w	r8, #1
   bcd02:	dc21      	bgt.n	bcd48 <_strtod_l+0x528>
   bcd04:	b10b      	cbz	r3, bcd0a <_strtod_l+0x4ea>
   bcd06:	4682      	mov	sl, r0
   bcd08:	468b      	mov	fp, r1
   bcd0a:	4b2f      	ldr	r3, [pc, #188]	; (bcdc8 <_strtod_l+0x5a8>)
   bcd0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bcd10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bcd14:	4652      	mov	r2, sl
   bcd16:	465b      	mov	r3, fp
   bcd18:	e9d9 0100 	ldrd	r0, r1, [r9]
   bcd1c:	f7ff f8fe 	bl	bbf1c <__aeabi_dmul>
   bcd20:	4b2a      	ldr	r3, [pc, #168]	; (bcdcc <_strtod_l+0x5ac>)
   bcd22:	460a      	mov	r2, r1
   bcd24:	400b      	ands	r3, r1
   bcd26:	492a      	ldr	r1, [pc, #168]	; (bcdd0 <_strtod_l+0x5b0>)
   bcd28:	428b      	cmp	r3, r1
   bcd2a:	4682      	mov	sl, r0
   bcd2c:	d8bc      	bhi.n	bcca8 <_strtod_l+0x488>
   bcd2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bcd32:	428b      	cmp	r3, r1
   bcd34:	bf86      	itte	hi
   bcd36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bcdd4 <_strtod_l+0x5b4>
   bcd3a:	f04f 3aff 	movhi.w	sl, #4294967295
   bcd3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bcd42:	2300      	movs	r3, #0
   bcd44:	9304      	str	r3, [sp, #16]
   bcd46:	e084      	b.n	bce52 <_strtod_l+0x632>
   bcd48:	f018 0f01 	tst.w	r8, #1
   bcd4c:	d005      	beq.n	bcd5a <_strtod_l+0x53a>
   bcd4e:	9b04      	ldr	r3, [sp, #16]
   bcd50:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd54:	f7ff f8e2 	bl	bbf1c <__aeabi_dmul>
   bcd58:	2301      	movs	r3, #1
   bcd5a:	9a04      	ldr	r2, [sp, #16]
   bcd5c:	3208      	adds	r2, #8
   bcd5e:	f109 0901 	add.w	r9, r9, #1
   bcd62:	ea4f 0868 	mov.w	r8, r8, asr #1
   bcd66:	9204      	str	r2, [sp, #16]
   bcd68:	e7c9      	b.n	bccfe <_strtod_l+0x4de>
   bcd6a:	d0ea      	beq.n	bcd42 <_strtod_l+0x522>
   bcd6c:	f1c8 0800 	rsb	r8, r8, #0
   bcd70:	f018 020f 	ands.w	r2, r8, #15
   bcd74:	d00a      	beq.n	bcd8c <_strtod_l+0x56c>
   bcd76:	4b13      	ldr	r3, [pc, #76]	; (bcdc4 <_strtod_l+0x5a4>)
   bcd78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bcd7c:	4650      	mov	r0, sl
   bcd7e:	4659      	mov	r1, fp
   bcd80:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcd84:	f7ff f9f4 	bl	bc170 <__aeabi_ddiv>
   bcd88:	4682      	mov	sl, r0
   bcd8a:	468b      	mov	fp, r1
   bcd8c:	ea5f 1828 	movs.w	r8, r8, asr #4
   bcd90:	d0d7      	beq.n	bcd42 <_strtod_l+0x522>
   bcd92:	f1b8 0f1f 	cmp.w	r8, #31
   bcd96:	dd1f      	ble.n	bcdd8 <_strtod_l+0x5b8>
   bcd98:	2500      	movs	r5, #0
   bcd9a:	462e      	mov	r6, r5
   bcd9c:	9507      	str	r5, [sp, #28]
   bcd9e:	9505      	str	r5, [sp, #20]
   bcda0:	2322      	movs	r3, #34	; 0x22
   bcda2:	f04f 0a00 	mov.w	sl, #0
   bcda6:	f04f 0b00 	mov.w	fp, #0
   bcdaa:	6023      	str	r3, [r4, #0]
   bcdac:	e786      	b.n	bccbc <_strtod_l+0x49c>
   bcdae:	bf00      	nop
   bcdb0:	000bf356 	.word	0x000bf356
   bcdb4:	000bf370 	.word	0x000bf370
   bcdb8:	000bf34d 	.word	0x000bf34d
   bcdbc:	000bf350 	.word	0x000bf350
   bcdc0:	000befe0 	.word	0x000befe0
   bcdc4:	000bf608 	.word	0x000bf608
   bcdc8:	000bf5e0 	.word	0x000bf5e0
   bcdcc:	7ff00000 	.word	0x7ff00000
   bcdd0:	7ca00000 	.word	0x7ca00000
   bcdd4:	7fefffff 	.word	0x7fefffff
   bcdd8:	f018 0310 	ands.w	r3, r8, #16
   bcddc:	bf18      	it	ne
   bcdde:	236a      	movne	r3, #106	; 0x6a
   bcde0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bd190 <_strtod_l+0x970>
   bcde4:	9304      	str	r3, [sp, #16]
   bcde6:	4650      	mov	r0, sl
   bcde8:	4659      	mov	r1, fp
   bcdea:	2300      	movs	r3, #0
   bcdec:	f018 0f01 	tst.w	r8, #1
   bcdf0:	d004      	beq.n	bcdfc <_strtod_l+0x5dc>
   bcdf2:	e9d9 2300 	ldrd	r2, r3, [r9]
   bcdf6:	f7ff f891 	bl	bbf1c <__aeabi_dmul>
   bcdfa:	2301      	movs	r3, #1
   bcdfc:	ea5f 0868 	movs.w	r8, r8, asr #1
   bce00:	f109 0908 	add.w	r9, r9, #8
   bce04:	d1f2      	bne.n	bcdec <_strtod_l+0x5cc>
   bce06:	b10b      	cbz	r3, bce0c <_strtod_l+0x5ec>
   bce08:	4682      	mov	sl, r0
   bce0a:	468b      	mov	fp, r1
   bce0c:	9b04      	ldr	r3, [sp, #16]
   bce0e:	b1c3      	cbz	r3, bce42 <_strtod_l+0x622>
   bce10:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bce14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bce18:	2b00      	cmp	r3, #0
   bce1a:	4659      	mov	r1, fp
   bce1c:	dd11      	ble.n	bce42 <_strtod_l+0x622>
   bce1e:	2b1f      	cmp	r3, #31
   bce20:	f340 8124 	ble.w	bd06c <_strtod_l+0x84c>
   bce24:	2b34      	cmp	r3, #52	; 0x34
   bce26:	bfde      	ittt	le
   bce28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bce2c:	f04f 33ff 	movle.w	r3, #4294967295
   bce30:	fa03 f202 	lslle.w	r2, r3, r2
   bce34:	f04f 0a00 	mov.w	sl, #0
   bce38:	bfcc      	ite	gt
   bce3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bce3e:	ea02 0b01 	andle.w	fp, r2, r1
   bce42:	2200      	movs	r2, #0
   bce44:	2300      	movs	r3, #0
   bce46:	4650      	mov	r0, sl
   bce48:	4659      	mov	r1, fp
   bce4a:	f7ff facf 	bl	bc3ec <__aeabi_dcmpeq>
   bce4e:	2800      	cmp	r0, #0
   bce50:	d1a2      	bne.n	bcd98 <_strtod_l+0x578>
   bce52:	9b07      	ldr	r3, [sp, #28]
   bce54:	9300      	str	r3, [sp, #0]
   bce56:	9908      	ldr	r1, [sp, #32]
   bce58:	462b      	mov	r3, r5
   bce5a:	463a      	mov	r2, r7
   bce5c:	4620      	mov	r0, r4
   bce5e:	f001 f80d 	bl	bde7c <__s2b>
   bce62:	9007      	str	r0, [sp, #28]
   bce64:	2800      	cmp	r0, #0
   bce66:	f43f af1f 	beq.w	bcca8 <_strtod_l+0x488>
   bce6a:	9b05      	ldr	r3, [sp, #20]
   bce6c:	1b9e      	subs	r6, r3, r6
   bce6e:	9b06      	ldr	r3, [sp, #24]
   bce70:	2b00      	cmp	r3, #0
   bce72:	bfb4      	ite	lt
   bce74:	4633      	movlt	r3, r6
   bce76:	2300      	movge	r3, #0
   bce78:	930c      	str	r3, [sp, #48]	; 0x30
   bce7a:	9b06      	ldr	r3, [sp, #24]
   bce7c:	2500      	movs	r5, #0
   bce7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bce82:	9312      	str	r3, [sp, #72]	; 0x48
   bce84:	462e      	mov	r6, r5
   bce86:	9b07      	ldr	r3, [sp, #28]
   bce88:	4620      	mov	r0, r4
   bce8a:	6859      	ldr	r1, [r3, #4]
   bce8c:	f000 ff4e 	bl	bdd2c <_Balloc>
   bce90:	9005      	str	r0, [sp, #20]
   bce92:	2800      	cmp	r0, #0
   bce94:	f43f af0c 	beq.w	bccb0 <_strtod_l+0x490>
   bce98:	9b07      	ldr	r3, [sp, #28]
   bce9a:	691a      	ldr	r2, [r3, #16]
   bce9c:	3202      	adds	r2, #2
   bce9e:	f103 010c 	add.w	r1, r3, #12
   bcea2:	0092      	lsls	r2, r2, #2
   bcea4:	300c      	adds	r0, #12
   bcea6:	f7ff fb87 	bl	bc5b8 <memcpy>
   bceaa:	ec4b ab10 	vmov	d0, sl, fp
   bceae:	aa1a      	add	r2, sp, #104	; 0x68
   bceb0:	a919      	add	r1, sp, #100	; 0x64
   bceb2:	4620      	mov	r0, r4
   bceb4:	f001 fb28 	bl	be508 <__d2b>
   bceb8:	ec4b ab18 	vmov	d8, sl, fp
   bcebc:	9018      	str	r0, [sp, #96]	; 0x60
   bcebe:	2800      	cmp	r0, #0
   bcec0:	f43f aef6 	beq.w	bccb0 <_strtod_l+0x490>
   bcec4:	2101      	movs	r1, #1
   bcec6:	4620      	mov	r0, r4
   bcec8:	f001 f872 	bl	bdfb0 <__i2b>
   bcecc:	4606      	mov	r6, r0
   bcece:	2800      	cmp	r0, #0
   bced0:	f43f aeee 	beq.w	bccb0 <_strtod_l+0x490>
   bced4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bced6:	9904      	ldr	r1, [sp, #16]
   bced8:	2b00      	cmp	r3, #0
   bceda:	bfab      	itete	ge
   bcedc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bcede:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bcee0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bcee2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bcee6:	bfac      	ite	ge
   bcee8:	eb03 0902 	addge.w	r9, r3, r2
   bceec:	1ad7      	sublt	r7, r2, r3
   bceee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bcef0:	eba3 0801 	sub.w	r8, r3, r1
   bcef4:	4490      	add	r8, r2
   bcef6:	4ba1      	ldr	r3, [pc, #644]	; (bd17c <_strtod_l+0x95c>)
   bcef8:	f108 38ff 	add.w	r8, r8, #4294967295
   bcefc:	4598      	cmp	r8, r3
   bcefe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bcf02:	f280 80c7 	bge.w	bd094 <_strtod_l+0x874>
   bcf06:	eba3 0308 	sub.w	r3, r3, r8
   bcf0a:	2b1f      	cmp	r3, #31
   bcf0c:	eba2 0203 	sub.w	r2, r2, r3
   bcf10:	f04f 0101 	mov.w	r1, #1
   bcf14:	f300 80b1 	bgt.w	bd07a <_strtod_l+0x85a>
   bcf18:	fa01 f303 	lsl.w	r3, r1, r3
   bcf1c:	930d      	str	r3, [sp, #52]	; 0x34
   bcf1e:	2300      	movs	r3, #0
   bcf20:	9308      	str	r3, [sp, #32]
   bcf22:	eb09 0802 	add.w	r8, r9, r2
   bcf26:	9b04      	ldr	r3, [sp, #16]
   bcf28:	45c1      	cmp	r9, r8
   bcf2a:	4417      	add	r7, r2
   bcf2c:	441f      	add	r7, r3
   bcf2e:	464b      	mov	r3, r9
   bcf30:	bfa8      	it	ge
   bcf32:	4643      	movge	r3, r8
   bcf34:	42bb      	cmp	r3, r7
   bcf36:	bfa8      	it	ge
   bcf38:	463b      	movge	r3, r7
   bcf3a:	2b00      	cmp	r3, #0
   bcf3c:	bfc2      	ittt	gt
   bcf3e:	eba8 0803 	subgt.w	r8, r8, r3
   bcf42:	1aff      	subgt	r7, r7, r3
   bcf44:	eba9 0903 	subgt.w	r9, r9, r3
   bcf48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bcf4a:	2b00      	cmp	r3, #0
   bcf4c:	dd17      	ble.n	bcf7e <_strtod_l+0x75e>
   bcf4e:	4631      	mov	r1, r6
   bcf50:	461a      	mov	r2, r3
   bcf52:	4620      	mov	r0, r4
   bcf54:	f001 f8ec 	bl	be130 <__pow5mult>
   bcf58:	4606      	mov	r6, r0
   bcf5a:	2800      	cmp	r0, #0
   bcf5c:	f43f aea8 	beq.w	bccb0 <_strtod_l+0x490>
   bcf60:	4601      	mov	r1, r0
   bcf62:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bcf64:	4620      	mov	r0, r4
   bcf66:	f001 f839 	bl	bdfdc <__multiply>
   bcf6a:	900b      	str	r0, [sp, #44]	; 0x2c
   bcf6c:	2800      	cmp	r0, #0
   bcf6e:	f43f ae9f 	beq.w	bccb0 <_strtod_l+0x490>
   bcf72:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcf74:	4620      	mov	r0, r4
   bcf76:	f000 ff19 	bl	bddac <_Bfree>
   bcf7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcf7c:	9318      	str	r3, [sp, #96]	; 0x60
   bcf7e:	f1b8 0f00 	cmp.w	r8, #0
   bcf82:	f300 808c 	bgt.w	bd09e <_strtod_l+0x87e>
   bcf86:	9b06      	ldr	r3, [sp, #24]
   bcf88:	2b00      	cmp	r3, #0
   bcf8a:	dd08      	ble.n	bcf9e <_strtod_l+0x77e>
   bcf8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bcf8e:	9905      	ldr	r1, [sp, #20]
   bcf90:	4620      	mov	r0, r4
   bcf92:	f001 f8cd 	bl	be130 <__pow5mult>
   bcf96:	9005      	str	r0, [sp, #20]
   bcf98:	2800      	cmp	r0, #0
   bcf9a:	f43f ae89 	beq.w	bccb0 <_strtod_l+0x490>
   bcf9e:	2f00      	cmp	r7, #0
   bcfa0:	dd08      	ble.n	bcfb4 <_strtod_l+0x794>
   bcfa2:	9905      	ldr	r1, [sp, #20]
   bcfa4:	463a      	mov	r2, r7
   bcfa6:	4620      	mov	r0, r4
   bcfa8:	f001 f91c 	bl	be1e4 <__lshift>
   bcfac:	9005      	str	r0, [sp, #20]
   bcfae:	2800      	cmp	r0, #0
   bcfb0:	f43f ae7e 	beq.w	bccb0 <_strtod_l+0x490>
   bcfb4:	f1b9 0f00 	cmp.w	r9, #0
   bcfb8:	dd08      	ble.n	bcfcc <_strtod_l+0x7ac>
   bcfba:	4631      	mov	r1, r6
   bcfbc:	464a      	mov	r2, r9
   bcfbe:	4620      	mov	r0, r4
   bcfc0:	f001 f910 	bl	be1e4 <__lshift>
   bcfc4:	4606      	mov	r6, r0
   bcfc6:	2800      	cmp	r0, #0
   bcfc8:	f43f ae72 	beq.w	bccb0 <_strtod_l+0x490>
   bcfcc:	9a05      	ldr	r2, [sp, #20]
   bcfce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bcfd0:	4620      	mov	r0, r4
   bcfd2:	f001 f993 	bl	be2fc <__mdiff>
   bcfd6:	4605      	mov	r5, r0
   bcfd8:	2800      	cmp	r0, #0
   bcfda:	f43f ae69 	beq.w	bccb0 <_strtod_l+0x490>
   bcfde:	68c3      	ldr	r3, [r0, #12]
   bcfe0:	930b      	str	r3, [sp, #44]	; 0x2c
   bcfe2:	2300      	movs	r3, #0
   bcfe4:	60c3      	str	r3, [r0, #12]
   bcfe6:	4631      	mov	r1, r6
   bcfe8:	f001 f96c 	bl	be2c4 <__mcmp>
   bcfec:	2800      	cmp	r0, #0
   bcfee:	da60      	bge.n	bd0b2 <_strtod_l+0x892>
   bcff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bcff2:	ea53 030a 	orrs.w	r3, r3, sl
   bcff6:	f040 8082 	bne.w	bd0fe <_strtod_l+0x8de>
   bcffa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bcffe:	2b00      	cmp	r3, #0
   bd000:	d17d      	bne.n	bd0fe <_strtod_l+0x8de>
   bd002:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd006:	0d1b      	lsrs	r3, r3, #20
   bd008:	051b      	lsls	r3, r3, #20
   bd00a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bd00e:	d976      	bls.n	bd0fe <_strtod_l+0x8de>
   bd010:	696b      	ldr	r3, [r5, #20]
   bd012:	b913      	cbnz	r3, bd01a <_strtod_l+0x7fa>
   bd014:	692b      	ldr	r3, [r5, #16]
   bd016:	2b01      	cmp	r3, #1
   bd018:	dd71      	ble.n	bd0fe <_strtod_l+0x8de>
   bd01a:	4629      	mov	r1, r5
   bd01c:	2201      	movs	r2, #1
   bd01e:	4620      	mov	r0, r4
   bd020:	f001 f8e0 	bl	be1e4 <__lshift>
   bd024:	4631      	mov	r1, r6
   bd026:	4605      	mov	r5, r0
   bd028:	f001 f94c 	bl	be2c4 <__mcmp>
   bd02c:	2800      	cmp	r0, #0
   bd02e:	dd66      	ble.n	bd0fe <_strtod_l+0x8de>
   bd030:	9904      	ldr	r1, [sp, #16]
   bd032:	4a53      	ldr	r2, [pc, #332]	; (bd180 <_strtod_l+0x960>)
   bd034:	465b      	mov	r3, fp
   bd036:	2900      	cmp	r1, #0
   bd038:	f000 8081 	beq.w	bd13e <_strtod_l+0x91e>
   bd03c:	ea02 010b 	and.w	r1, r2, fp
   bd040:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bd044:	dc7b      	bgt.n	bd13e <_strtod_l+0x91e>
   bd046:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bd04a:	f77f aea9 	ble.w	bcda0 <_strtod_l+0x580>
   bd04e:	4b4d      	ldr	r3, [pc, #308]	; (bd184 <_strtod_l+0x964>)
   bd050:	4650      	mov	r0, sl
   bd052:	4659      	mov	r1, fp
   bd054:	2200      	movs	r2, #0
   bd056:	f7fe ff61 	bl	bbf1c <__aeabi_dmul>
   bd05a:	460b      	mov	r3, r1
   bd05c:	4303      	orrs	r3, r0
   bd05e:	bf08      	it	eq
   bd060:	2322      	moveq	r3, #34	; 0x22
   bd062:	4682      	mov	sl, r0
   bd064:	468b      	mov	fp, r1
   bd066:	bf08      	it	eq
   bd068:	6023      	streq	r3, [r4, #0]
   bd06a:	e62b      	b.n	bccc4 <_strtod_l+0x4a4>
   bd06c:	f04f 32ff 	mov.w	r2, #4294967295
   bd070:	fa02 f303 	lsl.w	r3, r2, r3
   bd074:	ea03 0a0a 	and.w	sl, r3, sl
   bd078:	e6e3      	b.n	bce42 <_strtod_l+0x622>
   bd07a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bd07e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bd082:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bd086:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bd08a:	fa01 f308 	lsl.w	r3, r1, r8
   bd08e:	9308      	str	r3, [sp, #32]
   bd090:	910d      	str	r1, [sp, #52]	; 0x34
   bd092:	e746      	b.n	bcf22 <_strtod_l+0x702>
   bd094:	2300      	movs	r3, #0
   bd096:	9308      	str	r3, [sp, #32]
   bd098:	2301      	movs	r3, #1
   bd09a:	930d      	str	r3, [sp, #52]	; 0x34
   bd09c:	e741      	b.n	bcf22 <_strtod_l+0x702>
   bd09e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd0a0:	4642      	mov	r2, r8
   bd0a2:	4620      	mov	r0, r4
   bd0a4:	f001 f89e 	bl	be1e4 <__lshift>
   bd0a8:	9018      	str	r0, [sp, #96]	; 0x60
   bd0aa:	2800      	cmp	r0, #0
   bd0ac:	f47f af6b 	bne.w	bcf86 <_strtod_l+0x766>
   bd0b0:	e5fe      	b.n	bccb0 <_strtod_l+0x490>
   bd0b2:	465f      	mov	r7, fp
   bd0b4:	d16e      	bne.n	bd194 <_strtod_l+0x974>
   bd0b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd0b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd0bc:	b342      	cbz	r2, bd110 <_strtod_l+0x8f0>
   bd0be:	4a32      	ldr	r2, [pc, #200]	; (bd188 <_strtod_l+0x968>)
   bd0c0:	4293      	cmp	r3, r2
   bd0c2:	d128      	bne.n	bd116 <_strtod_l+0x8f6>
   bd0c4:	9b04      	ldr	r3, [sp, #16]
   bd0c6:	4651      	mov	r1, sl
   bd0c8:	b1eb      	cbz	r3, bd106 <_strtod_l+0x8e6>
   bd0ca:	4b2d      	ldr	r3, [pc, #180]	; (bd180 <_strtod_l+0x960>)
   bd0cc:	403b      	ands	r3, r7
   bd0ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd0d2:	f04f 32ff 	mov.w	r2, #4294967295
   bd0d6:	d819      	bhi.n	bd10c <_strtod_l+0x8ec>
   bd0d8:	0d1b      	lsrs	r3, r3, #20
   bd0da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bd0de:	fa02 f303 	lsl.w	r3, r2, r3
   bd0e2:	4299      	cmp	r1, r3
   bd0e4:	d117      	bne.n	bd116 <_strtod_l+0x8f6>
   bd0e6:	4b29      	ldr	r3, [pc, #164]	; (bd18c <_strtod_l+0x96c>)
   bd0e8:	429f      	cmp	r7, r3
   bd0ea:	d102      	bne.n	bd0f2 <_strtod_l+0x8d2>
   bd0ec:	3101      	adds	r1, #1
   bd0ee:	f43f addf 	beq.w	bccb0 <_strtod_l+0x490>
   bd0f2:	4b23      	ldr	r3, [pc, #140]	; (bd180 <_strtod_l+0x960>)
   bd0f4:	403b      	ands	r3, r7
   bd0f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bd0fa:	f04f 0a00 	mov.w	sl, #0
   bd0fe:	9b04      	ldr	r3, [sp, #16]
   bd100:	2b00      	cmp	r3, #0
   bd102:	d1a4      	bne.n	bd04e <_strtod_l+0x82e>
   bd104:	e5de      	b.n	bccc4 <_strtod_l+0x4a4>
   bd106:	f04f 33ff 	mov.w	r3, #4294967295
   bd10a:	e7ea      	b.n	bd0e2 <_strtod_l+0x8c2>
   bd10c:	4613      	mov	r3, r2
   bd10e:	e7e8      	b.n	bd0e2 <_strtod_l+0x8c2>
   bd110:	ea53 030a 	orrs.w	r3, r3, sl
   bd114:	d08c      	beq.n	bd030 <_strtod_l+0x810>
   bd116:	9b08      	ldr	r3, [sp, #32]
   bd118:	b1db      	cbz	r3, bd152 <_strtod_l+0x932>
   bd11a:	423b      	tst	r3, r7
   bd11c:	d0ef      	beq.n	bd0fe <_strtod_l+0x8de>
   bd11e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd120:	9a04      	ldr	r2, [sp, #16]
   bd122:	4650      	mov	r0, sl
   bd124:	4659      	mov	r1, fp
   bd126:	b1c3      	cbz	r3, bd15a <_strtod_l+0x93a>
   bd128:	f7ff fb5e 	bl	bc7e8 <sulp>
   bd12c:	4602      	mov	r2, r0
   bd12e:	460b      	mov	r3, r1
   bd130:	ec51 0b18 	vmov	r0, r1, d8
   bd134:	f7fe fd3c 	bl	bbbb0 <__adddf3>
   bd138:	4682      	mov	sl, r0
   bd13a:	468b      	mov	fp, r1
   bd13c:	e7df      	b.n	bd0fe <_strtod_l+0x8de>
   bd13e:	4013      	ands	r3, r2
   bd140:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bd144:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bd148:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bd14c:	f04f 3aff 	mov.w	sl, #4294967295
   bd150:	e7d5      	b.n	bd0fe <_strtod_l+0x8de>
   bd152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd154:	ea13 0f0a 	tst.w	r3, sl
   bd158:	e7e0      	b.n	bd11c <_strtod_l+0x8fc>
   bd15a:	f7ff fb45 	bl	bc7e8 <sulp>
   bd15e:	4602      	mov	r2, r0
   bd160:	460b      	mov	r3, r1
   bd162:	ec51 0b18 	vmov	r0, r1, d8
   bd166:	f7fe fd21 	bl	bbbac <__aeabi_dsub>
   bd16a:	2200      	movs	r2, #0
   bd16c:	2300      	movs	r3, #0
   bd16e:	4682      	mov	sl, r0
   bd170:	468b      	mov	fp, r1
   bd172:	f7ff f93b 	bl	bc3ec <__aeabi_dcmpeq>
   bd176:	2800      	cmp	r0, #0
   bd178:	d0c1      	beq.n	bd0fe <_strtod_l+0x8de>
   bd17a:	e611      	b.n	bcda0 <_strtod_l+0x580>
   bd17c:	fffffc02 	.word	0xfffffc02
   bd180:	7ff00000 	.word	0x7ff00000
   bd184:	39500000 	.word	0x39500000
   bd188:	000fffff 	.word	0x000fffff
   bd18c:	7fefffff 	.word	0x7fefffff
   bd190:	000bf388 	.word	0x000bf388
   bd194:	4631      	mov	r1, r6
   bd196:	4628      	mov	r0, r5
   bd198:	f001 fa12 	bl	be5c0 <__ratio>
   bd19c:	ec59 8b10 	vmov	r8, r9, d0
   bd1a0:	ee10 0a10 	vmov	r0, s0
   bd1a4:	2200      	movs	r2, #0
   bd1a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bd1aa:	4649      	mov	r1, r9
   bd1ac:	f7ff f932 	bl	bc414 <__aeabi_dcmple>
   bd1b0:	2800      	cmp	r0, #0
   bd1b2:	d07a      	beq.n	bd2aa <_strtod_l+0xa8a>
   bd1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd1b6:	2b00      	cmp	r3, #0
   bd1b8:	d04a      	beq.n	bd250 <_strtod_l+0xa30>
   bd1ba:	4b95      	ldr	r3, [pc, #596]	; (bd410 <_strtod_l+0xbf0>)
   bd1bc:	2200      	movs	r2, #0
   bd1be:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd1c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bd410 <_strtod_l+0xbf0>
   bd1c6:	f04f 0800 	mov.w	r8, #0
   bd1ca:	4b92      	ldr	r3, [pc, #584]	; (bd414 <_strtod_l+0xbf4>)
   bd1cc:	403b      	ands	r3, r7
   bd1ce:	930d      	str	r3, [sp, #52]	; 0x34
   bd1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd1d2:	4b91      	ldr	r3, [pc, #580]	; (bd418 <_strtod_l+0xbf8>)
   bd1d4:	429a      	cmp	r2, r3
   bd1d6:	f040 80b0 	bne.w	bd33a <_strtod_l+0xb1a>
   bd1da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd1de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bd1e2:	ec4b ab10 	vmov	d0, sl, fp
   bd1e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd1ea:	f001 f911 	bl	be410 <__ulp>
   bd1ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd1f2:	ec53 2b10 	vmov	r2, r3, d0
   bd1f6:	f7fe fe91 	bl	bbf1c <__aeabi_dmul>
   bd1fa:	4652      	mov	r2, sl
   bd1fc:	465b      	mov	r3, fp
   bd1fe:	f7fe fcd7 	bl	bbbb0 <__adddf3>
   bd202:	460b      	mov	r3, r1
   bd204:	4983      	ldr	r1, [pc, #524]	; (bd414 <_strtod_l+0xbf4>)
   bd206:	4a85      	ldr	r2, [pc, #532]	; (bd41c <_strtod_l+0xbfc>)
   bd208:	4019      	ands	r1, r3
   bd20a:	4291      	cmp	r1, r2
   bd20c:	4682      	mov	sl, r0
   bd20e:	d960      	bls.n	bd2d2 <_strtod_l+0xab2>
   bd210:	ee18 3a90 	vmov	r3, s17
   bd214:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bd218:	4293      	cmp	r3, r2
   bd21a:	d104      	bne.n	bd226 <_strtod_l+0xa06>
   bd21c:	ee18 3a10 	vmov	r3, s16
   bd220:	3301      	adds	r3, #1
   bd222:	f43f ad45 	beq.w	bccb0 <_strtod_l+0x490>
   bd226:	f8df b200 	ldr.w	fp, [pc, #512]	; bd428 <_strtod_l+0xc08>
   bd22a:	f04f 3aff 	mov.w	sl, #4294967295
   bd22e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bd230:	4620      	mov	r0, r4
   bd232:	f000 fdbb 	bl	bddac <_Bfree>
   bd236:	9905      	ldr	r1, [sp, #20]
   bd238:	4620      	mov	r0, r4
   bd23a:	f000 fdb7 	bl	bddac <_Bfree>
   bd23e:	4631      	mov	r1, r6
   bd240:	4620      	mov	r0, r4
   bd242:	f000 fdb3 	bl	bddac <_Bfree>
   bd246:	4629      	mov	r1, r5
   bd248:	4620      	mov	r0, r4
   bd24a:	f000 fdaf 	bl	bddac <_Bfree>
   bd24e:	e61a      	b.n	bce86 <_strtod_l+0x666>
   bd250:	f1ba 0f00 	cmp.w	sl, #0
   bd254:	d11b      	bne.n	bd28e <_strtod_l+0xa6e>
   bd256:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd25a:	b9f3      	cbnz	r3, bd29a <_strtod_l+0xa7a>
   bd25c:	4b6c      	ldr	r3, [pc, #432]	; (bd410 <_strtod_l+0xbf0>)
   bd25e:	2200      	movs	r2, #0
   bd260:	4640      	mov	r0, r8
   bd262:	4649      	mov	r1, r9
   bd264:	f7ff f8cc 	bl	bc400 <__aeabi_dcmplt>
   bd268:	b9d0      	cbnz	r0, bd2a0 <_strtod_l+0xa80>
   bd26a:	4640      	mov	r0, r8
   bd26c:	4649      	mov	r1, r9
   bd26e:	4b6c      	ldr	r3, [pc, #432]	; (bd420 <_strtod_l+0xc00>)
   bd270:	2200      	movs	r2, #0
   bd272:	f7fe fe53 	bl	bbf1c <__aeabi_dmul>
   bd276:	4680      	mov	r8, r0
   bd278:	4689      	mov	r9, r1
   bd27a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bd27e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bd282:	9315      	str	r3, [sp, #84]	; 0x54
   bd284:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bd288:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd28c:	e79d      	b.n	bd1ca <_strtod_l+0x9aa>
   bd28e:	f1ba 0f01 	cmp.w	sl, #1
   bd292:	d102      	bne.n	bd29a <_strtod_l+0xa7a>
   bd294:	2f00      	cmp	r7, #0
   bd296:	f43f ad83 	beq.w	bcda0 <_strtod_l+0x580>
   bd29a:	4b62      	ldr	r3, [pc, #392]	; (bd424 <_strtod_l+0xc04>)
   bd29c:	2200      	movs	r2, #0
   bd29e:	e78e      	b.n	bd1be <_strtod_l+0x99e>
   bd2a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bd420 <_strtod_l+0xc00>
   bd2a4:	f04f 0800 	mov.w	r8, #0
   bd2a8:	e7e7      	b.n	bd27a <_strtod_l+0xa5a>
   bd2aa:	4b5d      	ldr	r3, [pc, #372]	; (bd420 <_strtod_l+0xc00>)
   bd2ac:	4640      	mov	r0, r8
   bd2ae:	4649      	mov	r1, r9
   bd2b0:	2200      	movs	r2, #0
   bd2b2:	f7fe fe33 	bl	bbf1c <__aeabi_dmul>
   bd2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd2b8:	4680      	mov	r8, r0
   bd2ba:	4689      	mov	r9, r1
   bd2bc:	b933      	cbnz	r3, bd2cc <_strtod_l+0xaac>
   bd2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd2c2:	900e      	str	r0, [sp, #56]	; 0x38
   bd2c4:	930f      	str	r3, [sp, #60]	; 0x3c
   bd2c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bd2ca:	e7dd      	b.n	bd288 <_strtod_l+0xa68>
   bd2cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bd2d0:	e7f9      	b.n	bd2c6 <_strtod_l+0xaa6>
   bd2d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bd2d6:	9b04      	ldr	r3, [sp, #16]
   bd2d8:	2b00      	cmp	r3, #0
   bd2da:	d1a8      	bne.n	bd22e <_strtod_l+0xa0e>
   bd2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bd2e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd2e2:	0d1b      	lsrs	r3, r3, #20
   bd2e4:	051b      	lsls	r3, r3, #20
   bd2e6:	429a      	cmp	r2, r3
   bd2e8:	d1a1      	bne.n	bd22e <_strtod_l+0xa0e>
   bd2ea:	4640      	mov	r0, r8
   bd2ec:	4649      	mov	r1, r9
   bd2ee:	f001 fa05 	bl	be6fc <__aeabi_d2lz>
   bd2f2:	f7fe fde5 	bl	bbec0 <__aeabi_l2d>
   bd2f6:	4602      	mov	r2, r0
   bd2f8:	460b      	mov	r3, r1
   bd2fa:	4640      	mov	r0, r8
   bd2fc:	4649      	mov	r1, r9
   bd2fe:	f7fe fc55 	bl	bbbac <__aeabi_dsub>
   bd302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bd304:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bd308:	ea43 030a 	orr.w	r3, r3, sl
   bd30c:	4313      	orrs	r3, r2
   bd30e:	4680      	mov	r8, r0
   bd310:	4689      	mov	r9, r1
   bd312:	d055      	beq.n	bd3c0 <_strtod_l+0xba0>
   bd314:	a336      	add	r3, pc, #216	; (adr r3, bd3f0 <_strtod_l+0xbd0>)
   bd316:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd31a:	f7ff f871 	bl	bc400 <__aeabi_dcmplt>
   bd31e:	2800      	cmp	r0, #0
   bd320:	f47f acd0 	bne.w	bccc4 <_strtod_l+0x4a4>
   bd324:	a334      	add	r3, pc, #208	; (adr r3, bd3f8 <_strtod_l+0xbd8>)
   bd326:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd32a:	4640      	mov	r0, r8
   bd32c:	4649      	mov	r1, r9
   bd32e:	f7ff f885 	bl	bc43c <__aeabi_dcmpgt>
   bd332:	2800      	cmp	r0, #0
   bd334:	f43f af7b 	beq.w	bd22e <_strtod_l+0xa0e>
   bd338:	e4c4      	b.n	bccc4 <_strtod_l+0x4a4>
   bd33a:	9b04      	ldr	r3, [sp, #16]
   bd33c:	b333      	cbz	r3, bd38c <_strtod_l+0xb6c>
   bd33e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bd340:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bd344:	d822      	bhi.n	bd38c <_strtod_l+0xb6c>
   bd346:	a32e      	add	r3, pc, #184	; (adr r3, bd400 <_strtod_l+0xbe0>)
   bd348:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd34c:	4640      	mov	r0, r8
   bd34e:	4649      	mov	r1, r9
   bd350:	f7ff f860 	bl	bc414 <__aeabi_dcmple>
   bd354:	b1a0      	cbz	r0, bd380 <_strtod_l+0xb60>
   bd356:	4649      	mov	r1, r9
   bd358:	4640      	mov	r0, r8
   bd35a:	f7ff f879 	bl	bc450 <__aeabi_d2uiz>
   bd35e:	2801      	cmp	r0, #1
   bd360:	bf38      	it	cc
   bd362:	2001      	movcc	r0, #1
   bd364:	f7fe fd60 	bl	bbe28 <__aeabi_ui2d>
   bd368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bd36a:	4680      	mov	r8, r0
   bd36c:	4689      	mov	r9, r1
   bd36e:	bb23      	cbnz	r3, bd3ba <_strtod_l+0xb9a>
   bd370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bd374:	9010      	str	r0, [sp, #64]	; 0x40
   bd376:	9311      	str	r3, [sp, #68]	; 0x44
   bd378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bd37c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bd380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd382:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bd384:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bd388:	1a9b      	subs	r3, r3, r2
   bd38a:	9309      	str	r3, [sp, #36]	; 0x24
   bd38c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd390:	eeb0 0a48 	vmov.f32	s0, s16
   bd394:	eef0 0a68 	vmov.f32	s1, s17
   bd398:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bd39c:	f001 f838 	bl	be410 <__ulp>
   bd3a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bd3a4:	ec53 2b10 	vmov	r2, r3, d0
   bd3a8:	f7fe fdb8 	bl	bbf1c <__aeabi_dmul>
   bd3ac:	ec53 2b18 	vmov	r2, r3, d8
   bd3b0:	f7fe fbfe 	bl	bbbb0 <__adddf3>
   bd3b4:	4682      	mov	sl, r0
   bd3b6:	468b      	mov	fp, r1
   bd3b8:	e78d      	b.n	bd2d6 <_strtod_l+0xab6>
   bd3ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bd3be:	e7db      	b.n	bd378 <_strtod_l+0xb58>
   bd3c0:	a311      	add	r3, pc, #68	; (adr r3, bd408 <_strtod_l+0xbe8>)
   bd3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bd3c6:	f7ff f81b 	bl	bc400 <__aeabi_dcmplt>
   bd3ca:	e7b2      	b.n	bd332 <_strtod_l+0xb12>
   bd3cc:	2300      	movs	r3, #0
   bd3ce:	930a      	str	r3, [sp, #40]	; 0x28
   bd3d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bd3d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bd3d4:	6013      	str	r3, [r2, #0]
   bd3d6:	f7ff ba6b 	b.w	bc8b0 <_strtod_l+0x90>
   bd3da:	2a65      	cmp	r2, #101	; 0x65
   bd3dc:	f43f ab5f 	beq.w	bca9e <_strtod_l+0x27e>
   bd3e0:	2a45      	cmp	r2, #69	; 0x45
   bd3e2:	f43f ab5c 	beq.w	bca9e <_strtod_l+0x27e>
   bd3e6:	2301      	movs	r3, #1
   bd3e8:	f7ff bb94 	b.w	bcb14 <_strtod_l+0x2f4>
   bd3ec:	f3af 8000 	nop.w
   bd3f0:	94a03595 	.word	0x94a03595
   bd3f4:	3fdfffff 	.word	0x3fdfffff
   bd3f8:	35afe535 	.word	0x35afe535
   bd3fc:	3fe00000 	.word	0x3fe00000
   bd400:	ffc00000 	.word	0xffc00000
   bd404:	41dfffff 	.word	0x41dfffff
   bd408:	94a03595 	.word	0x94a03595
   bd40c:	3fcfffff 	.word	0x3fcfffff
   bd410:	3ff00000 	.word	0x3ff00000
   bd414:	7ff00000 	.word	0x7ff00000
   bd418:	7fe00000 	.word	0x7fe00000
   bd41c:	7c9fffff 	.word	0x7c9fffff
   bd420:	3fe00000 	.word	0x3fe00000
   bd424:	bff00000 	.word	0xbff00000
   bd428:	7fefffff 	.word	0x7fefffff

000bd42c <strtod>:
   bd42c:	460a      	mov	r2, r1
   bd42e:	4601      	mov	r1, r0
   bd430:	4802      	ldr	r0, [pc, #8]	; (bd43c <strtod+0x10>)
   bd432:	4b03      	ldr	r3, [pc, #12]	; (bd440 <strtod+0x14>)
   bd434:	6800      	ldr	r0, [r0, #0]
   bd436:	f7ff b9f3 	b.w	bc820 <_strtod_l>
   bd43a:	bf00      	nop
   bd43c:	2003dc28 	.word	0x2003dc28
   bd440:	2003dc94 	.word	0x2003dc94

000bd444 <_strtol_l.constprop.0>:
   bd444:	2b01      	cmp	r3, #1
   bd446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd44a:	d001      	beq.n	bd450 <_strtol_l.constprop.0+0xc>
   bd44c:	2b24      	cmp	r3, #36	; 0x24
   bd44e:	d906      	bls.n	bd45e <_strtol_l.constprop.0+0x1a>
   bd450:	f7fa fbe2 	bl	b7c18 <__errno>
   bd454:	2316      	movs	r3, #22
   bd456:	6003      	str	r3, [r0, #0]
   bd458:	2000      	movs	r0, #0
   bd45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd45e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd544 <_strtol_l.constprop.0+0x100>
   bd462:	460d      	mov	r5, r1
   bd464:	462e      	mov	r6, r5
   bd466:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd46a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd46e:	f017 0708 	ands.w	r7, r7, #8
   bd472:	d1f7      	bne.n	bd464 <_strtol_l.constprop.0+0x20>
   bd474:	2c2d      	cmp	r4, #45	; 0x2d
   bd476:	d132      	bne.n	bd4de <_strtol_l.constprop.0+0x9a>
   bd478:	782c      	ldrb	r4, [r5, #0]
   bd47a:	2701      	movs	r7, #1
   bd47c:	1cb5      	adds	r5, r6, #2
   bd47e:	2b00      	cmp	r3, #0
   bd480:	d05b      	beq.n	bd53a <_strtol_l.constprop.0+0xf6>
   bd482:	2b10      	cmp	r3, #16
   bd484:	d109      	bne.n	bd49a <_strtol_l.constprop.0+0x56>
   bd486:	2c30      	cmp	r4, #48	; 0x30
   bd488:	d107      	bne.n	bd49a <_strtol_l.constprop.0+0x56>
   bd48a:	782c      	ldrb	r4, [r5, #0]
   bd48c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd490:	2c58      	cmp	r4, #88	; 0x58
   bd492:	d14d      	bne.n	bd530 <_strtol_l.constprop.0+0xec>
   bd494:	786c      	ldrb	r4, [r5, #1]
   bd496:	2310      	movs	r3, #16
   bd498:	3502      	adds	r5, #2
   bd49a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd49e:	f108 38ff 	add.w	r8, r8, #4294967295
   bd4a2:	f04f 0c00 	mov.w	ip, #0
   bd4a6:	fbb8 f9f3 	udiv	r9, r8, r3
   bd4aa:	4666      	mov	r6, ip
   bd4ac:	fb03 8a19 	mls	sl, r3, r9, r8
   bd4b0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd4b4:	f1be 0f09 	cmp.w	lr, #9
   bd4b8:	d816      	bhi.n	bd4e8 <_strtol_l.constprop.0+0xa4>
   bd4ba:	4674      	mov	r4, lr
   bd4bc:	42a3      	cmp	r3, r4
   bd4be:	dd24      	ble.n	bd50a <_strtol_l.constprop.0+0xc6>
   bd4c0:	f1bc 0f00 	cmp.w	ip, #0
   bd4c4:	db1e      	blt.n	bd504 <_strtol_l.constprop.0+0xc0>
   bd4c6:	45b1      	cmp	r9, r6
   bd4c8:	d31c      	bcc.n	bd504 <_strtol_l.constprop.0+0xc0>
   bd4ca:	d101      	bne.n	bd4d0 <_strtol_l.constprop.0+0x8c>
   bd4cc:	45a2      	cmp	sl, r4
   bd4ce:	db19      	blt.n	bd504 <_strtol_l.constprop.0+0xc0>
   bd4d0:	fb06 4603 	mla	r6, r6, r3, r4
   bd4d4:	f04f 0c01 	mov.w	ip, #1
   bd4d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd4dc:	e7e8      	b.n	bd4b0 <_strtol_l.constprop.0+0x6c>
   bd4de:	2c2b      	cmp	r4, #43	; 0x2b
   bd4e0:	bf04      	itt	eq
   bd4e2:	782c      	ldrbeq	r4, [r5, #0]
   bd4e4:	1cb5      	addeq	r5, r6, #2
   bd4e6:	e7ca      	b.n	bd47e <_strtol_l.constprop.0+0x3a>
   bd4e8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd4ec:	f1be 0f19 	cmp.w	lr, #25
   bd4f0:	d801      	bhi.n	bd4f6 <_strtol_l.constprop.0+0xb2>
   bd4f2:	3c37      	subs	r4, #55	; 0x37
   bd4f4:	e7e2      	b.n	bd4bc <_strtol_l.constprop.0+0x78>
   bd4f6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd4fa:	f1be 0f19 	cmp.w	lr, #25
   bd4fe:	d804      	bhi.n	bd50a <_strtol_l.constprop.0+0xc6>
   bd500:	3c57      	subs	r4, #87	; 0x57
   bd502:	e7db      	b.n	bd4bc <_strtol_l.constprop.0+0x78>
   bd504:	f04f 3cff 	mov.w	ip, #4294967295
   bd508:	e7e6      	b.n	bd4d8 <_strtol_l.constprop.0+0x94>
   bd50a:	f1bc 0f00 	cmp.w	ip, #0
   bd50e:	da05      	bge.n	bd51c <_strtol_l.constprop.0+0xd8>
   bd510:	2322      	movs	r3, #34	; 0x22
   bd512:	6003      	str	r3, [r0, #0]
   bd514:	4646      	mov	r6, r8
   bd516:	b942      	cbnz	r2, bd52a <_strtol_l.constprop.0+0xe6>
   bd518:	4630      	mov	r0, r6
   bd51a:	e79e      	b.n	bd45a <_strtol_l.constprop.0+0x16>
   bd51c:	b107      	cbz	r7, bd520 <_strtol_l.constprop.0+0xdc>
   bd51e:	4276      	negs	r6, r6
   bd520:	2a00      	cmp	r2, #0
   bd522:	d0f9      	beq.n	bd518 <_strtol_l.constprop.0+0xd4>
   bd524:	f1bc 0f00 	cmp.w	ip, #0
   bd528:	d000      	beq.n	bd52c <_strtol_l.constprop.0+0xe8>
   bd52a:	1e69      	subs	r1, r5, #1
   bd52c:	6011      	str	r1, [r2, #0]
   bd52e:	e7f3      	b.n	bd518 <_strtol_l.constprop.0+0xd4>
   bd530:	2430      	movs	r4, #48	; 0x30
   bd532:	2b00      	cmp	r3, #0
   bd534:	d1b1      	bne.n	bd49a <_strtol_l.constprop.0+0x56>
   bd536:	2308      	movs	r3, #8
   bd538:	e7af      	b.n	bd49a <_strtol_l.constprop.0+0x56>
   bd53a:	2c30      	cmp	r4, #48	; 0x30
   bd53c:	d0a5      	beq.n	bd48a <_strtol_l.constprop.0+0x46>
   bd53e:	230a      	movs	r3, #10
   bd540:	e7ab      	b.n	bd49a <_strtol_l.constprop.0+0x56>
   bd542:	bf00      	nop
   bd544:	000bf3b1 	.word	0x000bf3b1

000bd548 <strtol>:
   bd548:	4613      	mov	r3, r2
   bd54a:	460a      	mov	r2, r1
   bd54c:	4601      	mov	r1, r0
   bd54e:	4802      	ldr	r0, [pc, #8]	; (bd558 <strtol+0x10>)
   bd550:	6800      	ldr	r0, [r0, #0]
   bd552:	f7ff bf77 	b.w	bd444 <_strtol_l.constprop.0>
   bd556:	bf00      	nop
   bd558:	2003dc28 	.word	0x2003dc28

000bd55c <__register_exitproc>:
   bd55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd560:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd61c <__register_exitproc+0xc0>
   bd564:	4606      	mov	r6, r0
   bd566:	f8d8 0000 	ldr.w	r0, [r8]
   bd56a:	461f      	mov	r7, r3
   bd56c:	460d      	mov	r5, r1
   bd56e:	4691      	mov	r9, r2
   bd570:	f000 fbc6 	bl	bdd00 <__retarget_lock_acquire_recursive>
   bd574:	4b25      	ldr	r3, [pc, #148]	; (bd60c <__register_exitproc+0xb0>)
   bd576:	681c      	ldr	r4, [r3, #0]
   bd578:	b934      	cbnz	r4, bd588 <__register_exitproc+0x2c>
   bd57a:	4c25      	ldr	r4, [pc, #148]	; (bd610 <__register_exitproc+0xb4>)
   bd57c:	601c      	str	r4, [r3, #0]
   bd57e:	4b25      	ldr	r3, [pc, #148]	; (bd614 <__register_exitproc+0xb8>)
   bd580:	b113      	cbz	r3, bd588 <__register_exitproc+0x2c>
   bd582:	681b      	ldr	r3, [r3, #0]
   bd584:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd588:	6863      	ldr	r3, [r4, #4]
   bd58a:	2b1f      	cmp	r3, #31
   bd58c:	dd07      	ble.n	bd59e <__register_exitproc+0x42>
   bd58e:	f8d8 0000 	ldr.w	r0, [r8]
   bd592:	f000 fbb7 	bl	bdd04 <__retarget_lock_release_recursive>
   bd596:	f04f 30ff 	mov.w	r0, #4294967295
   bd59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd59e:	b34e      	cbz	r6, bd5f4 <__register_exitproc+0x98>
   bd5a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd5a4:	b988      	cbnz	r0, bd5ca <__register_exitproc+0x6e>
   bd5a6:	4b1c      	ldr	r3, [pc, #112]	; (bd618 <__register_exitproc+0xbc>)
   bd5a8:	b923      	cbnz	r3, bd5b4 <__register_exitproc+0x58>
   bd5aa:	f8d8 0000 	ldr.w	r0, [r8]
   bd5ae:	f000 fba8 	bl	bdd02 <__retarget_lock_release>
   bd5b2:	e7f0      	b.n	bd596 <__register_exitproc+0x3a>
   bd5b4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd5b8:	f7fa faee 	bl	b7b98 <malloc>
   bd5bc:	2800      	cmp	r0, #0
   bd5be:	d0f4      	beq.n	bd5aa <__register_exitproc+0x4e>
   bd5c0:	2300      	movs	r3, #0
   bd5c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd5c6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd5ca:	6863      	ldr	r3, [r4, #4]
   bd5cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd5d0:	2201      	movs	r2, #1
   bd5d2:	409a      	lsls	r2, r3
   bd5d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd5d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd5dc:	4313      	orrs	r3, r2
   bd5de:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd5e2:	2e02      	cmp	r6, #2
   bd5e4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd5e8:	bf02      	ittt	eq
   bd5ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd5ee:	4313      	orreq	r3, r2
   bd5f0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd5f4:	6863      	ldr	r3, [r4, #4]
   bd5f6:	f8d8 0000 	ldr.w	r0, [r8]
   bd5fa:	1c5a      	adds	r2, r3, #1
   bd5fc:	3302      	adds	r3, #2
   bd5fe:	6062      	str	r2, [r4, #4]
   bd600:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd604:	f000 fb7e 	bl	bdd04 <__retarget_lock_release_recursive>
   bd608:	2000      	movs	r0, #0
   bd60a:	e7c6      	b.n	bd59a <__register_exitproc+0x3e>
   bd60c:	2003e7e8 	.word	0x2003e7e8
   bd610:	2003e75c 	.word	0x2003e75c
   bd614:	00000000 	.word	0x00000000
   bd618:	000b7b99 	.word	0x000b7b99
   bd61c:	2003dc8c 	.word	0x2003dc8c

000bd620 <rshift>:
   bd620:	6903      	ldr	r3, [r0, #16]
   bd622:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bd626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bd62a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bd62e:	f100 0414 	add.w	r4, r0, #20
   bd632:	dd45      	ble.n	bd6c0 <rshift+0xa0>
   bd634:	f011 011f 	ands.w	r1, r1, #31
   bd638:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bd63c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bd640:	d10c      	bne.n	bd65c <rshift+0x3c>
   bd642:	f100 0710 	add.w	r7, r0, #16
   bd646:	4629      	mov	r1, r5
   bd648:	42b1      	cmp	r1, r6
   bd64a:	d334      	bcc.n	bd6b6 <rshift+0x96>
   bd64c:	1a9b      	subs	r3, r3, r2
   bd64e:	009b      	lsls	r3, r3, #2
   bd650:	1eea      	subs	r2, r5, #3
   bd652:	4296      	cmp	r6, r2
   bd654:	bf38      	it	cc
   bd656:	2300      	movcc	r3, #0
   bd658:	4423      	add	r3, r4
   bd65a:	e015      	b.n	bd688 <rshift+0x68>
   bd65c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bd660:	f1c1 0820 	rsb	r8, r1, #32
   bd664:	40cf      	lsrs	r7, r1
   bd666:	f105 0e04 	add.w	lr, r5, #4
   bd66a:	46a1      	mov	r9, r4
   bd66c:	4576      	cmp	r6, lr
   bd66e:	46f4      	mov	ip, lr
   bd670:	d815      	bhi.n	bd69e <rshift+0x7e>
   bd672:	1a9a      	subs	r2, r3, r2
   bd674:	0092      	lsls	r2, r2, #2
   bd676:	3a04      	subs	r2, #4
   bd678:	3501      	adds	r5, #1
   bd67a:	42ae      	cmp	r6, r5
   bd67c:	bf38      	it	cc
   bd67e:	2200      	movcc	r2, #0
   bd680:	18a3      	adds	r3, r4, r2
   bd682:	50a7      	str	r7, [r4, r2]
   bd684:	b107      	cbz	r7, bd688 <rshift+0x68>
   bd686:	3304      	adds	r3, #4
   bd688:	1b1a      	subs	r2, r3, r4
   bd68a:	42a3      	cmp	r3, r4
   bd68c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bd690:	bf08      	it	eq
   bd692:	2300      	moveq	r3, #0
   bd694:	6102      	str	r2, [r0, #16]
   bd696:	bf08      	it	eq
   bd698:	6143      	streq	r3, [r0, #20]
   bd69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bd69e:	f8dc c000 	ldr.w	ip, [ip]
   bd6a2:	fa0c fc08 	lsl.w	ip, ip, r8
   bd6a6:	ea4c 0707 	orr.w	r7, ip, r7
   bd6aa:	f849 7b04 	str.w	r7, [r9], #4
   bd6ae:	f85e 7b04 	ldr.w	r7, [lr], #4
   bd6b2:	40cf      	lsrs	r7, r1
   bd6b4:	e7da      	b.n	bd66c <rshift+0x4c>
   bd6b6:	f851 cb04 	ldr.w	ip, [r1], #4
   bd6ba:	f847 cf04 	str.w	ip, [r7, #4]!
   bd6be:	e7c3      	b.n	bd648 <rshift+0x28>
   bd6c0:	4623      	mov	r3, r4
   bd6c2:	e7e1      	b.n	bd688 <rshift+0x68>

000bd6c4 <__hexdig_fun>:
   bd6c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bd6c8:	2b09      	cmp	r3, #9
   bd6ca:	d802      	bhi.n	bd6d2 <__hexdig_fun+0xe>
   bd6cc:	3820      	subs	r0, #32
   bd6ce:	b2c0      	uxtb	r0, r0
   bd6d0:	4770      	bx	lr
   bd6d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bd6d6:	2b05      	cmp	r3, #5
   bd6d8:	d801      	bhi.n	bd6de <__hexdig_fun+0x1a>
   bd6da:	3847      	subs	r0, #71	; 0x47
   bd6dc:	e7f7      	b.n	bd6ce <__hexdig_fun+0xa>
   bd6de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bd6e2:	2b05      	cmp	r3, #5
   bd6e4:	d801      	bhi.n	bd6ea <__hexdig_fun+0x26>
   bd6e6:	3827      	subs	r0, #39	; 0x27
   bd6e8:	e7f1      	b.n	bd6ce <__hexdig_fun+0xa>
   bd6ea:	2000      	movs	r0, #0
   bd6ec:	4770      	bx	lr
	...

000bd6f0 <__gethex>:
   bd6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd6f4:	ed2d 8b02 	vpush	{d8}
   bd6f8:	b089      	sub	sp, #36	; 0x24
   bd6fa:	ee08 0a10 	vmov	s16, r0
   bd6fe:	9304      	str	r3, [sp, #16]
   bd700:	4bb4      	ldr	r3, [pc, #720]	; (bd9d4 <__gethex+0x2e4>)
   bd702:	681b      	ldr	r3, [r3, #0]
   bd704:	9301      	str	r3, [sp, #4]
   bd706:	4618      	mov	r0, r3
   bd708:	468b      	mov	fp, r1
   bd70a:	4690      	mov	r8, r2
   bd70c:	f7ff f807 	bl	bc71e <strlen>
   bd710:	9b01      	ldr	r3, [sp, #4]
   bd712:	f8db 2000 	ldr.w	r2, [fp]
   bd716:	4403      	add	r3, r0
   bd718:	4682      	mov	sl, r0
   bd71a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bd71e:	9305      	str	r3, [sp, #20]
   bd720:	1c93      	adds	r3, r2, #2
   bd722:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bd726:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bd72a:	32fe      	adds	r2, #254	; 0xfe
   bd72c:	18d1      	adds	r1, r2, r3
   bd72e:	461f      	mov	r7, r3
   bd730:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd734:	9100      	str	r1, [sp, #0]
   bd736:	2830      	cmp	r0, #48	; 0x30
   bd738:	d0f8      	beq.n	bd72c <__gethex+0x3c>
   bd73a:	f7ff ffc3 	bl	bd6c4 <__hexdig_fun>
   bd73e:	4604      	mov	r4, r0
   bd740:	2800      	cmp	r0, #0
   bd742:	d13a      	bne.n	bd7ba <__gethex+0xca>
   bd744:	9901      	ldr	r1, [sp, #4]
   bd746:	4652      	mov	r2, sl
   bd748:	4638      	mov	r0, r7
   bd74a:	f7ff f803 	bl	bc754 <strncmp>
   bd74e:	4605      	mov	r5, r0
   bd750:	2800      	cmp	r0, #0
   bd752:	d168      	bne.n	bd826 <__gethex+0x136>
   bd754:	f817 000a 	ldrb.w	r0, [r7, sl]
   bd758:	eb07 060a 	add.w	r6, r7, sl
   bd75c:	f7ff ffb2 	bl	bd6c4 <__hexdig_fun>
   bd760:	2800      	cmp	r0, #0
   bd762:	d062      	beq.n	bd82a <__gethex+0x13a>
   bd764:	4633      	mov	r3, r6
   bd766:	7818      	ldrb	r0, [r3, #0]
   bd768:	2830      	cmp	r0, #48	; 0x30
   bd76a:	461f      	mov	r7, r3
   bd76c:	f103 0301 	add.w	r3, r3, #1
   bd770:	d0f9      	beq.n	bd766 <__gethex+0x76>
   bd772:	f7ff ffa7 	bl	bd6c4 <__hexdig_fun>
   bd776:	2301      	movs	r3, #1
   bd778:	fab0 f480 	clz	r4, r0
   bd77c:	0964      	lsrs	r4, r4, #5
   bd77e:	4635      	mov	r5, r6
   bd780:	9300      	str	r3, [sp, #0]
   bd782:	463a      	mov	r2, r7
   bd784:	4616      	mov	r6, r2
   bd786:	3201      	adds	r2, #1
   bd788:	7830      	ldrb	r0, [r6, #0]
   bd78a:	f7ff ff9b 	bl	bd6c4 <__hexdig_fun>
   bd78e:	2800      	cmp	r0, #0
   bd790:	d1f8      	bne.n	bd784 <__gethex+0x94>
   bd792:	9901      	ldr	r1, [sp, #4]
   bd794:	4652      	mov	r2, sl
   bd796:	4630      	mov	r0, r6
   bd798:	f7fe ffdc 	bl	bc754 <strncmp>
   bd79c:	b980      	cbnz	r0, bd7c0 <__gethex+0xd0>
   bd79e:	b94d      	cbnz	r5, bd7b4 <__gethex+0xc4>
   bd7a0:	eb06 050a 	add.w	r5, r6, sl
   bd7a4:	462a      	mov	r2, r5
   bd7a6:	4616      	mov	r6, r2
   bd7a8:	3201      	adds	r2, #1
   bd7aa:	7830      	ldrb	r0, [r6, #0]
   bd7ac:	f7ff ff8a 	bl	bd6c4 <__hexdig_fun>
   bd7b0:	2800      	cmp	r0, #0
   bd7b2:	d1f8      	bne.n	bd7a6 <__gethex+0xb6>
   bd7b4:	1bad      	subs	r5, r5, r6
   bd7b6:	00ad      	lsls	r5, r5, #2
   bd7b8:	e004      	b.n	bd7c4 <__gethex+0xd4>
   bd7ba:	2400      	movs	r4, #0
   bd7bc:	4625      	mov	r5, r4
   bd7be:	e7e0      	b.n	bd782 <__gethex+0x92>
   bd7c0:	2d00      	cmp	r5, #0
   bd7c2:	d1f7      	bne.n	bd7b4 <__gethex+0xc4>
   bd7c4:	7833      	ldrb	r3, [r6, #0]
   bd7c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bd7ca:	2b50      	cmp	r3, #80	; 0x50
   bd7cc:	d13b      	bne.n	bd846 <__gethex+0x156>
   bd7ce:	7873      	ldrb	r3, [r6, #1]
   bd7d0:	2b2b      	cmp	r3, #43	; 0x2b
   bd7d2:	d02c      	beq.n	bd82e <__gethex+0x13e>
   bd7d4:	2b2d      	cmp	r3, #45	; 0x2d
   bd7d6:	d02e      	beq.n	bd836 <__gethex+0x146>
   bd7d8:	1c71      	adds	r1, r6, #1
   bd7da:	f04f 0900 	mov.w	r9, #0
   bd7de:	7808      	ldrb	r0, [r1, #0]
   bd7e0:	f7ff ff70 	bl	bd6c4 <__hexdig_fun>
   bd7e4:	1e43      	subs	r3, r0, #1
   bd7e6:	b2db      	uxtb	r3, r3
   bd7e8:	2b18      	cmp	r3, #24
   bd7ea:	d82c      	bhi.n	bd846 <__gethex+0x156>
   bd7ec:	f1a0 0210 	sub.w	r2, r0, #16
   bd7f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bd7f4:	f7ff ff66 	bl	bd6c4 <__hexdig_fun>
   bd7f8:	1e43      	subs	r3, r0, #1
   bd7fa:	b2db      	uxtb	r3, r3
   bd7fc:	2b18      	cmp	r3, #24
   bd7fe:	d91d      	bls.n	bd83c <__gethex+0x14c>
   bd800:	f1b9 0f00 	cmp.w	r9, #0
   bd804:	d000      	beq.n	bd808 <__gethex+0x118>
   bd806:	4252      	negs	r2, r2
   bd808:	4415      	add	r5, r2
   bd80a:	f8cb 1000 	str.w	r1, [fp]
   bd80e:	b1e4      	cbz	r4, bd84a <__gethex+0x15a>
   bd810:	9b00      	ldr	r3, [sp, #0]
   bd812:	2b00      	cmp	r3, #0
   bd814:	bf14      	ite	ne
   bd816:	2700      	movne	r7, #0
   bd818:	2706      	moveq	r7, #6
   bd81a:	4638      	mov	r0, r7
   bd81c:	b009      	add	sp, #36	; 0x24
   bd81e:	ecbd 8b02 	vpop	{d8}
   bd822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd826:	463e      	mov	r6, r7
   bd828:	4625      	mov	r5, r4
   bd82a:	2401      	movs	r4, #1
   bd82c:	e7ca      	b.n	bd7c4 <__gethex+0xd4>
   bd82e:	f04f 0900 	mov.w	r9, #0
   bd832:	1cb1      	adds	r1, r6, #2
   bd834:	e7d3      	b.n	bd7de <__gethex+0xee>
   bd836:	f04f 0901 	mov.w	r9, #1
   bd83a:	e7fa      	b.n	bd832 <__gethex+0x142>
   bd83c:	230a      	movs	r3, #10
   bd83e:	fb03 0202 	mla	r2, r3, r2, r0
   bd842:	3a10      	subs	r2, #16
   bd844:	e7d4      	b.n	bd7f0 <__gethex+0x100>
   bd846:	4631      	mov	r1, r6
   bd848:	e7df      	b.n	bd80a <__gethex+0x11a>
   bd84a:	1bf3      	subs	r3, r6, r7
   bd84c:	3b01      	subs	r3, #1
   bd84e:	4621      	mov	r1, r4
   bd850:	2b07      	cmp	r3, #7
   bd852:	dc0b      	bgt.n	bd86c <__gethex+0x17c>
   bd854:	ee18 0a10 	vmov	r0, s16
   bd858:	f000 fa68 	bl	bdd2c <_Balloc>
   bd85c:	4604      	mov	r4, r0
   bd85e:	b940      	cbnz	r0, bd872 <__gethex+0x182>
   bd860:	4b5d      	ldr	r3, [pc, #372]	; (bd9d8 <__gethex+0x2e8>)
   bd862:	4602      	mov	r2, r0
   bd864:	21de      	movs	r1, #222	; 0xde
   bd866:	485d      	ldr	r0, [pc, #372]	; (bd9dc <__gethex+0x2ec>)
   bd868:	f7fa f9de 	bl	b7c28 <__assert_func>
   bd86c:	3101      	adds	r1, #1
   bd86e:	105b      	asrs	r3, r3, #1
   bd870:	e7ee      	b.n	bd850 <__gethex+0x160>
   bd872:	f100 0914 	add.w	r9, r0, #20
   bd876:	f04f 0b00 	mov.w	fp, #0
   bd87a:	f1ca 0301 	rsb	r3, sl, #1
   bd87e:	f8cd 9008 	str.w	r9, [sp, #8]
   bd882:	f8cd b000 	str.w	fp, [sp]
   bd886:	9306      	str	r3, [sp, #24]
   bd888:	42b7      	cmp	r7, r6
   bd88a:	d340      	bcc.n	bd90e <__gethex+0x21e>
   bd88c:	9802      	ldr	r0, [sp, #8]
   bd88e:	9b00      	ldr	r3, [sp, #0]
   bd890:	f840 3b04 	str.w	r3, [r0], #4
   bd894:	eba0 0009 	sub.w	r0, r0, r9
   bd898:	1080      	asrs	r0, r0, #2
   bd89a:	0146      	lsls	r6, r0, #5
   bd89c:	6120      	str	r0, [r4, #16]
   bd89e:	4618      	mov	r0, r3
   bd8a0:	f000 fb36 	bl	bdf10 <__hi0bits>
   bd8a4:	1a30      	subs	r0, r6, r0
   bd8a6:	f8d8 6000 	ldr.w	r6, [r8]
   bd8aa:	42b0      	cmp	r0, r6
   bd8ac:	dd63      	ble.n	bd976 <__gethex+0x286>
   bd8ae:	1b87      	subs	r7, r0, r6
   bd8b0:	4639      	mov	r1, r7
   bd8b2:	4620      	mov	r0, r4
   bd8b4:	f000 feda 	bl	be66c <__any_on>
   bd8b8:	4682      	mov	sl, r0
   bd8ba:	b1a8      	cbz	r0, bd8e8 <__gethex+0x1f8>
   bd8bc:	1e7b      	subs	r3, r7, #1
   bd8be:	1159      	asrs	r1, r3, #5
   bd8c0:	f003 021f 	and.w	r2, r3, #31
   bd8c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bd8c8:	f04f 0a01 	mov.w	sl, #1
   bd8cc:	fa0a f202 	lsl.w	r2, sl, r2
   bd8d0:	420a      	tst	r2, r1
   bd8d2:	d009      	beq.n	bd8e8 <__gethex+0x1f8>
   bd8d4:	4553      	cmp	r3, sl
   bd8d6:	dd05      	ble.n	bd8e4 <__gethex+0x1f4>
   bd8d8:	1eb9      	subs	r1, r7, #2
   bd8da:	4620      	mov	r0, r4
   bd8dc:	f000 fec6 	bl	be66c <__any_on>
   bd8e0:	2800      	cmp	r0, #0
   bd8e2:	d145      	bne.n	bd970 <__gethex+0x280>
   bd8e4:	f04f 0a02 	mov.w	sl, #2
   bd8e8:	4639      	mov	r1, r7
   bd8ea:	4620      	mov	r0, r4
   bd8ec:	f7ff fe98 	bl	bd620 <rshift>
   bd8f0:	443d      	add	r5, r7
   bd8f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd8f6:	42ab      	cmp	r3, r5
   bd8f8:	da4c      	bge.n	bd994 <__gethex+0x2a4>
   bd8fa:	ee18 0a10 	vmov	r0, s16
   bd8fe:	4621      	mov	r1, r4
   bd900:	f000 fa54 	bl	bddac <_Bfree>
   bd904:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd906:	2300      	movs	r3, #0
   bd908:	6013      	str	r3, [r2, #0]
   bd90a:	27a3      	movs	r7, #163	; 0xa3
   bd90c:	e785      	b.n	bd81a <__gethex+0x12a>
   bd90e:	1e73      	subs	r3, r6, #1
   bd910:	9a05      	ldr	r2, [sp, #20]
   bd912:	9303      	str	r3, [sp, #12]
   bd914:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bd918:	4293      	cmp	r3, r2
   bd91a:	d019      	beq.n	bd950 <__gethex+0x260>
   bd91c:	f1bb 0f20 	cmp.w	fp, #32
   bd920:	d107      	bne.n	bd932 <__gethex+0x242>
   bd922:	9b02      	ldr	r3, [sp, #8]
   bd924:	9a00      	ldr	r2, [sp, #0]
   bd926:	f843 2b04 	str.w	r2, [r3], #4
   bd92a:	9302      	str	r3, [sp, #8]
   bd92c:	2300      	movs	r3, #0
   bd92e:	9300      	str	r3, [sp, #0]
   bd930:	469b      	mov	fp, r3
   bd932:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bd936:	f7ff fec5 	bl	bd6c4 <__hexdig_fun>
   bd93a:	9b00      	ldr	r3, [sp, #0]
   bd93c:	f000 000f 	and.w	r0, r0, #15
   bd940:	fa00 f00b 	lsl.w	r0, r0, fp
   bd944:	4303      	orrs	r3, r0
   bd946:	9300      	str	r3, [sp, #0]
   bd948:	f10b 0b04 	add.w	fp, fp, #4
   bd94c:	9b03      	ldr	r3, [sp, #12]
   bd94e:	e00d      	b.n	bd96c <__gethex+0x27c>
   bd950:	9b03      	ldr	r3, [sp, #12]
   bd952:	9a06      	ldr	r2, [sp, #24]
   bd954:	4413      	add	r3, r2
   bd956:	42bb      	cmp	r3, r7
   bd958:	d3e0      	bcc.n	bd91c <__gethex+0x22c>
   bd95a:	4618      	mov	r0, r3
   bd95c:	9901      	ldr	r1, [sp, #4]
   bd95e:	9307      	str	r3, [sp, #28]
   bd960:	4652      	mov	r2, sl
   bd962:	f7fe fef7 	bl	bc754 <strncmp>
   bd966:	9b07      	ldr	r3, [sp, #28]
   bd968:	2800      	cmp	r0, #0
   bd96a:	d1d7      	bne.n	bd91c <__gethex+0x22c>
   bd96c:	461e      	mov	r6, r3
   bd96e:	e78b      	b.n	bd888 <__gethex+0x198>
   bd970:	f04f 0a03 	mov.w	sl, #3
   bd974:	e7b8      	b.n	bd8e8 <__gethex+0x1f8>
   bd976:	da0a      	bge.n	bd98e <__gethex+0x29e>
   bd978:	1a37      	subs	r7, r6, r0
   bd97a:	4621      	mov	r1, r4
   bd97c:	ee18 0a10 	vmov	r0, s16
   bd980:	463a      	mov	r2, r7
   bd982:	f000 fc2f 	bl	be1e4 <__lshift>
   bd986:	1bed      	subs	r5, r5, r7
   bd988:	4604      	mov	r4, r0
   bd98a:	f100 0914 	add.w	r9, r0, #20
   bd98e:	f04f 0a00 	mov.w	sl, #0
   bd992:	e7ae      	b.n	bd8f2 <__gethex+0x202>
   bd994:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bd998:	42a8      	cmp	r0, r5
   bd99a:	dd72      	ble.n	bda82 <__gethex+0x392>
   bd99c:	1b45      	subs	r5, r0, r5
   bd99e:	42ae      	cmp	r6, r5
   bd9a0:	dc36      	bgt.n	bda10 <__gethex+0x320>
   bd9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd9a6:	2b02      	cmp	r3, #2
   bd9a8:	d02a      	beq.n	bda00 <__gethex+0x310>
   bd9aa:	2b03      	cmp	r3, #3
   bd9ac:	d02c      	beq.n	bda08 <__gethex+0x318>
   bd9ae:	2b01      	cmp	r3, #1
   bd9b0:	d11c      	bne.n	bd9ec <__gethex+0x2fc>
   bd9b2:	42ae      	cmp	r6, r5
   bd9b4:	d11a      	bne.n	bd9ec <__gethex+0x2fc>
   bd9b6:	2e01      	cmp	r6, #1
   bd9b8:	d112      	bne.n	bd9e0 <__gethex+0x2f0>
   bd9ba:	9a04      	ldr	r2, [sp, #16]
   bd9bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bd9c0:	6013      	str	r3, [r2, #0]
   bd9c2:	2301      	movs	r3, #1
   bd9c4:	6123      	str	r3, [r4, #16]
   bd9c6:	f8c9 3000 	str.w	r3, [r9]
   bd9ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd9cc:	2762      	movs	r7, #98	; 0x62
   bd9ce:	601c      	str	r4, [r3, #0]
   bd9d0:	e723      	b.n	bd81a <__gethex+0x12a>
   bd9d2:	bf00      	nop
   bd9d4:	000bf548 	.word	0x000bf548
   bd9d8:	000bf4b1 	.word	0x000bf4b1
   bd9dc:	000bf4c2 	.word	0x000bf4c2
   bd9e0:	1e71      	subs	r1, r6, #1
   bd9e2:	4620      	mov	r0, r4
   bd9e4:	f000 fe42 	bl	be66c <__any_on>
   bd9e8:	2800      	cmp	r0, #0
   bd9ea:	d1e6      	bne.n	bd9ba <__gethex+0x2ca>
   bd9ec:	ee18 0a10 	vmov	r0, s16
   bd9f0:	4621      	mov	r1, r4
   bd9f2:	f000 f9db 	bl	bddac <_Bfree>
   bd9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd9f8:	2300      	movs	r3, #0
   bd9fa:	6013      	str	r3, [r2, #0]
   bd9fc:	2750      	movs	r7, #80	; 0x50
   bd9fe:	e70c      	b.n	bd81a <__gethex+0x12a>
   bda00:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda02:	2b00      	cmp	r3, #0
   bda04:	d1f2      	bne.n	bd9ec <__gethex+0x2fc>
   bda06:	e7d8      	b.n	bd9ba <__gethex+0x2ca>
   bda08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda0a:	2b00      	cmp	r3, #0
   bda0c:	d1d5      	bne.n	bd9ba <__gethex+0x2ca>
   bda0e:	e7ed      	b.n	bd9ec <__gethex+0x2fc>
   bda10:	1e6f      	subs	r7, r5, #1
   bda12:	f1ba 0f00 	cmp.w	sl, #0
   bda16:	d131      	bne.n	bda7c <__gethex+0x38c>
   bda18:	b127      	cbz	r7, bda24 <__gethex+0x334>
   bda1a:	4639      	mov	r1, r7
   bda1c:	4620      	mov	r0, r4
   bda1e:	f000 fe25 	bl	be66c <__any_on>
   bda22:	4682      	mov	sl, r0
   bda24:	117b      	asrs	r3, r7, #5
   bda26:	2101      	movs	r1, #1
   bda28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bda2c:	f007 071f 	and.w	r7, r7, #31
   bda30:	fa01 f707 	lsl.w	r7, r1, r7
   bda34:	421f      	tst	r7, r3
   bda36:	4629      	mov	r1, r5
   bda38:	4620      	mov	r0, r4
   bda3a:	bf18      	it	ne
   bda3c:	f04a 0a02 	orrne.w	sl, sl, #2
   bda40:	1b76      	subs	r6, r6, r5
   bda42:	f7ff fded 	bl	bd620 <rshift>
   bda46:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bda4a:	2702      	movs	r7, #2
   bda4c:	f1ba 0f00 	cmp.w	sl, #0
   bda50:	d048      	beq.n	bdae4 <__gethex+0x3f4>
   bda52:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bda56:	2b02      	cmp	r3, #2
   bda58:	d015      	beq.n	bda86 <__gethex+0x396>
   bda5a:	2b03      	cmp	r3, #3
   bda5c:	d017      	beq.n	bda8e <__gethex+0x39e>
   bda5e:	2b01      	cmp	r3, #1
   bda60:	d109      	bne.n	bda76 <__gethex+0x386>
   bda62:	f01a 0f02 	tst.w	sl, #2
   bda66:	d006      	beq.n	bda76 <__gethex+0x386>
   bda68:	f8d9 0000 	ldr.w	r0, [r9]
   bda6c:	ea4a 0a00 	orr.w	sl, sl, r0
   bda70:	f01a 0f01 	tst.w	sl, #1
   bda74:	d10e      	bne.n	bda94 <__gethex+0x3a4>
   bda76:	f047 0710 	orr.w	r7, r7, #16
   bda7a:	e033      	b.n	bdae4 <__gethex+0x3f4>
   bda7c:	f04f 0a01 	mov.w	sl, #1
   bda80:	e7d0      	b.n	bda24 <__gethex+0x334>
   bda82:	2701      	movs	r7, #1
   bda84:	e7e2      	b.n	bda4c <__gethex+0x35c>
   bda86:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda88:	f1c3 0301 	rsb	r3, r3, #1
   bda8c:	9315      	str	r3, [sp, #84]	; 0x54
   bda8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bda90:	2b00      	cmp	r3, #0
   bda92:	d0f0      	beq.n	bda76 <__gethex+0x386>
   bda94:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bda98:	f104 0314 	add.w	r3, r4, #20
   bda9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bdaa0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bdaa4:	f04f 0c00 	mov.w	ip, #0
   bdaa8:	4618      	mov	r0, r3
   bdaaa:	f853 2b04 	ldr.w	r2, [r3], #4
   bdaae:	f1b2 3fff 	cmp.w	r2, #4294967295
   bdab2:	d01c      	beq.n	bdaee <__gethex+0x3fe>
   bdab4:	3201      	adds	r2, #1
   bdab6:	6002      	str	r2, [r0, #0]
   bdab8:	2f02      	cmp	r7, #2
   bdaba:	f104 0314 	add.w	r3, r4, #20
   bdabe:	d13f      	bne.n	bdb40 <__gethex+0x450>
   bdac0:	f8d8 2000 	ldr.w	r2, [r8]
   bdac4:	3a01      	subs	r2, #1
   bdac6:	42b2      	cmp	r2, r6
   bdac8:	d10a      	bne.n	bdae0 <__gethex+0x3f0>
   bdaca:	1171      	asrs	r1, r6, #5
   bdacc:	2201      	movs	r2, #1
   bdace:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bdad2:	f006 061f 	and.w	r6, r6, #31
   bdad6:	fa02 f606 	lsl.w	r6, r2, r6
   bdada:	421e      	tst	r6, r3
   bdadc:	bf18      	it	ne
   bdade:	4617      	movne	r7, r2
   bdae0:	f047 0720 	orr.w	r7, r7, #32
   bdae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bdae6:	601c      	str	r4, [r3, #0]
   bdae8:	9b04      	ldr	r3, [sp, #16]
   bdaea:	601d      	str	r5, [r3, #0]
   bdaec:	e695      	b.n	bd81a <__gethex+0x12a>
   bdaee:	4299      	cmp	r1, r3
   bdaf0:	f843 cc04 	str.w	ip, [r3, #-4]
   bdaf4:	d8d8      	bhi.n	bdaa8 <__gethex+0x3b8>
   bdaf6:	68a3      	ldr	r3, [r4, #8]
   bdaf8:	459b      	cmp	fp, r3
   bdafa:	db19      	blt.n	bdb30 <__gethex+0x440>
   bdafc:	6861      	ldr	r1, [r4, #4]
   bdafe:	ee18 0a10 	vmov	r0, s16
   bdb02:	3101      	adds	r1, #1
   bdb04:	f000 f912 	bl	bdd2c <_Balloc>
   bdb08:	4681      	mov	r9, r0
   bdb0a:	b918      	cbnz	r0, bdb14 <__gethex+0x424>
   bdb0c:	4b1a      	ldr	r3, [pc, #104]	; (bdb78 <__gethex+0x488>)
   bdb0e:	4602      	mov	r2, r0
   bdb10:	2184      	movs	r1, #132	; 0x84
   bdb12:	e6a8      	b.n	bd866 <__gethex+0x176>
   bdb14:	6922      	ldr	r2, [r4, #16]
   bdb16:	3202      	adds	r2, #2
   bdb18:	f104 010c 	add.w	r1, r4, #12
   bdb1c:	0092      	lsls	r2, r2, #2
   bdb1e:	300c      	adds	r0, #12
   bdb20:	f7fe fd4a 	bl	bc5b8 <memcpy>
   bdb24:	4621      	mov	r1, r4
   bdb26:	ee18 0a10 	vmov	r0, s16
   bdb2a:	f000 f93f 	bl	bddac <_Bfree>
   bdb2e:	464c      	mov	r4, r9
   bdb30:	6923      	ldr	r3, [r4, #16]
   bdb32:	1c5a      	adds	r2, r3, #1
   bdb34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bdb38:	6122      	str	r2, [r4, #16]
   bdb3a:	2201      	movs	r2, #1
   bdb3c:	615a      	str	r2, [r3, #20]
   bdb3e:	e7bb      	b.n	bdab8 <__gethex+0x3c8>
   bdb40:	6922      	ldr	r2, [r4, #16]
   bdb42:	455a      	cmp	r2, fp
   bdb44:	dd0b      	ble.n	bdb5e <__gethex+0x46e>
   bdb46:	2101      	movs	r1, #1
   bdb48:	4620      	mov	r0, r4
   bdb4a:	f7ff fd69 	bl	bd620 <rshift>
   bdb4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bdb52:	3501      	adds	r5, #1
   bdb54:	42ab      	cmp	r3, r5
   bdb56:	f6ff aed0 	blt.w	bd8fa <__gethex+0x20a>
   bdb5a:	2701      	movs	r7, #1
   bdb5c:	e7c0      	b.n	bdae0 <__gethex+0x3f0>
   bdb5e:	f016 061f 	ands.w	r6, r6, #31
   bdb62:	d0fa      	beq.n	bdb5a <__gethex+0x46a>
   bdb64:	4453      	add	r3, sl
   bdb66:	f1c6 0620 	rsb	r6, r6, #32
   bdb6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bdb6e:	f000 f9cf 	bl	bdf10 <__hi0bits>
   bdb72:	42b0      	cmp	r0, r6
   bdb74:	dbe7      	blt.n	bdb46 <__gethex+0x456>
   bdb76:	e7f0      	b.n	bdb5a <__gethex+0x46a>
   bdb78:	000bf4b1 	.word	0x000bf4b1

000bdb7c <L_shift>:
   bdb7c:	f1c2 0208 	rsb	r2, r2, #8
   bdb80:	0092      	lsls	r2, r2, #2
   bdb82:	b570      	push	{r4, r5, r6, lr}
   bdb84:	f1c2 0620 	rsb	r6, r2, #32
   bdb88:	6843      	ldr	r3, [r0, #4]
   bdb8a:	6804      	ldr	r4, [r0, #0]
   bdb8c:	fa03 f506 	lsl.w	r5, r3, r6
   bdb90:	432c      	orrs	r4, r5
   bdb92:	40d3      	lsrs	r3, r2
   bdb94:	6004      	str	r4, [r0, #0]
   bdb96:	f840 3f04 	str.w	r3, [r0, #4]!
   bdb9a:	4288      	cmp	r0, r1
   bdb9c:	d3f4      	bcc.n	bdb88 <L_shift+0xc>
   bdb9e:	bd70      	pop	{r4, r5, r6, pc}

000bdba0 <__match>:
   bdba0:	b530      	push	{r4, r5, lr}
   bdba2:	6803      	ldr	r3, [r0, #0]
   bdba4:	3301      	adds	r3, #1
   bdba6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bdbaa:	b914      	cbnz	r4, bdbb2 <__match+0x12>
   bdbac:	6003      	str	r3, [r0, #0]
   bdbae:	2001      	movs	r0, #1
   bdbb0:	bd30      	pop	{r4, r5, pc}
   bdbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdbb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bdbba:	2d19      	cmp	r5, #25
   bdbbc:	bf98      	it	ls
   bdbbe:	3220      	addls	r2, #32
   bdbc0:	42a2      	cmp	r2, r4
   bdbc2:	d0f0      	beq.n	bdba6 <__match+0x6>
   bdbc4:	2000      	movs	r0, #0
   bdbc6:	e7f3      	b.n	bdbb0 <__match+0x10>

000bdbc8 <__hexnan>:
   bdbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdbcc:	680b      	ldr	r3, [r1, #0]
   bdbce:	115e      	asrs	r6, r3, #5
   bdbd0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bdbd4:	f013 031f 	ands.w	r3, r3, #31
   bdbd8:	b087      	sub	sp, #28
   bdbda:	bf18      	it	ne
   bdbdc:	3604      	addne	r6, #4
   bdbde:	2500      	movs	r5, #0
   bdbe0:	1f37      	subs	r7, r6, #4
   bdbe2:	4690      	mov	r8, r2
   bdbe4:	6802      	ldr	r2, [r0, #0]
   bdbe6:	9301      	str	r3, [sp, #4]
   bdbe8:	4682      	mov	sl, r0
   bdbea:	f846 5c04 	str.w	r5, [r6, #-4]
   bdbee:	46b9      	mov	r9, r7
   bdbf0:	463c      	mov	r4, r7
   bdbf2:	9502      	str	r5, [sp, #8]
   bdbf4:	46ab      	mov	fp, r5
   bdbf6:	7851      	ldrb	r1, [r2, #1]
   bdbf8:	1c53      	adds	r3, r2, #1
   bdbfa:	9303      	str	r3, [sp, #12]
   bdbfc:	b341      	cbz	r1, bdc50 <__hexnan+0x88>
   bdbfe:	4608      	mov	r0, r1
   bdc00:	9205      	str	r2, [sp, #20]
   bdc02:	9104      	str	r1, [sp, #16]
   bdc04:	f7ff fd5e 	bl	bd6c4 <__hexdig_fun>
   bdc08:	2800      	cmp	r0, #0
   bdc0a:	d14f      	bne.n	bdcac <__hexnan+0xe4>
   bdc0c:	9904      	ldr	r1, [sp, #16]
   bdc0e:	9a05      	ldr	r2, [sp, #20]
   bdc10:	2920      	cmp	r1, #32
   bdc12:	d818      	bhi.n	bdc46 <__hexnan+0x7e>
   bdc14:	9b02      	ldr	r3, [sp, #8]
   bdc16:	459b      	cmp	fp, r3
   bdc18:	dd13      	ble.n	bdc42 <__hexnan+0x7a>
   bdc1a:	454c      	cmp	r4, r9
   bdc1c:	d206      	bcs.n	bdc2c <__hexnan+0x64>
   bdc1e:	2d07      	cmp	r5, #7
   bdc20:	dc04      	bgt.n	bdc2c <__hexnan+0x64>
   bdc22:	462a      	mov	r2, r5
   bdc24:	4649      	mov	r1, r9
   bdc26:	4620      	mov	r0, r4
   bdc28:	f7ff ffa8 	bl	bdb7c <L_shift>
   bdc2c:	4544      	cmp	r4, r8
   bdc2e:	d950      	bls.n	bdcd2 <__hexnan+0x10a>
   bdc30:	2300      	movs	r3, #0
   bdc32:	f1a4 0904 	sub.w	r9, r4, #4
   bdc36:	f844 3c04 	str.w	r3, [r4, #-4]
   bdc3a:	f8cd b008 	str.w	fp, [sp, #8]
   bdc3e:	464c      	mov	r4, r9
   bdc40:	461d      	mov	r5, r3
   bdc42:	9a03      	ldr	r2, [sp, #12]
   bdc44:	e7d7      	b.n	bdbf6 <__hexnan+0x2e>
   bdc46:	2929      	cmp	r1, #41	; 0x29
   bdc48:	d156      	bne.n	bdcf8 <__hexnan+0x130>
   bdc4a:	3202      	adds	r2, #2
   bdc4c:	f8ca 2000 	str.w	r2, [sl]
   bdc50:	f1bb 0f00 	cmp.w	fp, #0
   bdc54:	d050      	beq.n	bdcf8 <__hexnan+0x130>
   bdc56:	454c      	cmp	r4, r9
   bdc58:	d206      	bcs.n	bdc68 <__hexnan+0xa0>
   bdc5a:	2d07      	cmp	r5, #7
   bdc5c:	dc04      	bgt.n	bdc68 <__hexnan+0xa0>
   bdc5e:	462a      	mov	r2, r5
   bdc60:	4649      	mov	r1, r9
   bdc62:	4620      	mov	r0, r4
   bdc64:	f7ff ff8a 	bl	bdb7c <L_shift>
   bdc68:	4544      	cmp	r4, r8
   bdc6a:	d934      	bls.n	bdcd6 <__hexnan+0x10e>
   bdc6c:	f1a8 0204 	sub.w	r2, r8, #4
   bdc70:	4623      	mov	r3, r4
   bdc72:	f853 1b04 	ldr.w	r1, [r3], #4
   bdc76:	f842 1f04 	str.w	r1, [r2, #4]!
   bdc7a:	429f      	cmp	r7, r3
   bdc7c:	d2f9      	bcs.n	bdc72 <__hexnan+0xaa>
   bdc7e:	1b3b      	subs	r3, r7, r4
   bdc80:	f023 0303 	bic.w	r3, r3, #3
   bdc84:	3304      	adds	r3, #4
   bdc86:	3401      	adds	r4, #1
   bdc88:	3e03      	subs	r6, #3
   bdc8a:	42b4      	cmp	r4, r6
   bdc8c:	bf88      	it	hi
   bdc8e:	2304      	movhi	r3, #4
   bdc90:	4443      	add	r3, r8
   bdc92:	2200      	movs	r2, #0
   bdc94:	f843 2b04 	str.w	r2, [r3], #4
   bdc98:	429f      	cmp	r7, r3
   bdc9a:	d2fb      	bcs.n	bdc94 <__hexnan+0xcc>
   bdc9c:	683b      	ldr	r3, [r7, #0]
   bdc9e:	b91b      	cbnz	r3, bdca8 <__hexnan+0xe0>
   bdca0:	4547      	cmp	r7, r8
   bdca2:	d127      	bne.n	bdcf4 <__hexnan+0x12c>
   bdca4:	2301      	movs	r3, #1
   bdca6:	603b      	str	r3, [r7, #0]
   bdca8:	2005      	movs	r0, #5
   bdcaa:	e026      	b.n	bdcfa <__hexnan+0x132>
   bdcac:	3501      	adds	r5, #1
   bdcae:	2d08      	cmp	r5, #8
   bdcb0:	f10b 0b01 	add.w	fp, fp, #1
   bdcb4:	dd06      	ble.n	bdcc4 <__hexnan+0xfc>
   bdcb6:	4544      	cmp	r4, r8
   bdcb8:	d9c3      	bls.n	bdc42 <__hexnan+0x7a>
   bdcba:	2300      	movs	r3, #0
   bdcbc:	f844 3c04 	str.w	r3, [r4, #-4]
   bdcc0:	2501      	movs	r5, #1
   bdcc2:	3c04      	subs	r4, #4
   bdcc4:	6822      	ldr	r2, [r4, #0]
   bdcc6:	f000 000f 	and.w	r0, r0, #15
   bdcca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bdcce:	6022      	str	r2, [r4, #0]
   bdcd0:	e7b7      	b.n	bdc42 <__hexnan+0x7a>
   bdcd2:	2508      	movs	r5, #8
   bdcd4:	e7b5      	b.n	bdc42 <__hexnan+0x7a>
   bdcd6:	9b01      	ldr	r3, [sp, #4]
   bdcd8:	2b00      	cmp	r3, #0
   bdcda:	d0df      	beq.n	bdc9c <__hexnan+0xd4>
   bdcdc:	f04f 32ff 	mov.w	r2, #4294967295
   bdce0:	f1c3 0320 	rsb	r3, r3, #32
   bdce4:	fa22 f303 	lsr.w	r3, r2, r3
   bdce8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bdcec:	401a      	ands	r2, r3
   bdcee:	f846 2c04 	str.w	r2, [r6, #-4]
   bdcf2:	e7d3      	b.n	bdc9c <__hexnan+0xd4>
   bdcf4:	3f04      	subs	r7, #4
   bdcf6:	e7d1      	b.n	bdc9c <__hexnan+0xd4>
   bdcf8:	2004      	movs	r0, #4
   bdcfa:	b007      	add	sp, #28
   bdcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdd00 <__retarget_lock_acquire_recursive>:
   bdd00:	4770      	bx	lr

000bdd02 <__retarget_lock_release>:
   bdd02:	4770      	bx	lr

000bdd04 <__retarget_lock_release_recursive>:
   bdd04:	4770      	bx	lr

000bdd06 <__ascii_mbtowc>:
   bdd06:	b082      	sub	sp, #8
   bdd08:	b901      	cbnz	r1, bdd0c <__ascii_mbtowc+0x6>
   bdd0a:	a901      	add	r1, sp, #4
   bdd0c:	b142      	cbz	r2, bdd20 <__ascii_mbtowc+0x1a>
   bdd0e:	b14b      	cbz	r3, bdd24 <__ascii_mbtowc+0x1e>
   bdd10:	7813      	ldrb	r3, [r2, #0]
   bdd12:	600b      	str	r3, [r1, #0]
   bdd14:	7812      	ldrb	r2, [r2, #0]
   bdd16:	1e10      	subs	r0, r2, #0
   bdd18:	bf18      	it	ne
   bdd1a:	2001      	movne	r0, #1
   bdd1c:	b002      	add	sp, #8
   bdd1e:	4770      	bx	lr
   bdd20:	4610      	mov	r0, r2
   bdd22:	e7fb      	b.n	bdd1c <__ascii_mbtowc+0x16>
   bdd24:	f06f 0001 	mvn.w	r0, #1
   bdd28:	e7f8      	b.n	bdd1c <__ascii_mbtowc+0x16>
	...

000bdd2c <_Balloc>:
   bdd2c:	b570      	push	{r4, r5, r6, lr}
   bdd2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bdd30:	4604      	mov	r4, r0
   bdd32:	460d      	mov	r5, r1
   bdd34:	b976      	cbnz	r6, bdd54 <_Balloc+0x28>
   bdd36:	2010      	movs	r0, #16
   bdd38:	f7f9 ff2e 	bl	b7b98 <malloc>
   bdd3c:	4602      	mov	r2, r0
   bdd3e:	6260      	str	r0, [r4, #36]	; 0x24
   bdd40:	b920      	cbnz	r0, bdd4c <_Balloc+0x20>
   bdd42:	4b18      	ldr	r3, [pc, #96]	; (bdda4 <_Balloc+0x78>)
   bdd44:	4818      	ldr	r0, [pc, #96]	; (bdda8 <_Balloc+0x7c>)
   bdd46:	2166      	movs	r1, #102	; 0x66
   bdd48:	f7f9 ff6e 	bl	b7c28 <__assert_func>
   bdd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bdd50:	6006      	str	r6, [r0, #0]
   bdd52:	60c6      	str	r6, [r0, #12]
   bdd54:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bdd56:	68f3      	ldr	r3, [r6, #12]
   bdd58:	b183      	cbz	r3, bdd7c <_Balloc+0x50>
   bdd5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdd5c:	68db      	ldr	r3, [r3, #12]
   bdd5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bdd62:	b9b8      	cbnz	r0, bdd94 <_Balloc+0x68>
   bdd64:	2101      	movs	r1, #1
   bdd66:	fa01 f605 	lsl.w	r6, r1, r5
   bdd6a:	1d72      	adds	r2, r6, #5
   bdd6c:	0092      	lsls	r2, r2, #2
   bdd6e:	4620      	mov	r0, r4
   bdd70:	f000 fc9d 	bl	be6ae <_calloc_r>
   bdd74:	b160      	cbz	r0, bdd90 <_Balloc+0x64>
   bdd76:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bdd7a:	e00e      	b.n	bdd9a <_Balloc+0x6e>
   bdd7c:	2221      	movs	r2, #33	; 0x21
   bdd7e:	2104      	movs	r1, #4
   bdd80:	4620      	mov	r0, r4
   bdd82:	f000 fc94 	bl	be6ae <_calloc_r>
   bdd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bdd88:	60f0      	str	r0, [r6, #12]
   bdd8a:	68db      	ldr	r3, [r3, #12]
   bdd8c:	2b00      	cmp	r3, #0
   bdd8e:	d1e4      	bne.n	bdd5a <_Balloc+0x2e>
   bdd90:	2000      	movs	r0, #0
   bdd92:	bd70      	pop	{r4, r5, r6, pc}
   bdd94:	6802      	ldr	r2, [r0, #0]
   bdd96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bdd9a:	2300      	movs	r3, #0
   bdd9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bdda0:	e7f7      	b.n	bdd92 <_Balloc+0x66>
   bdda2:	bf00      	nop
   bdda4:	000bf2b9 	.word	0x000bf2b9
   bdda8:	000bf55c 	.word	0x000bf55c

000bddac <_Bfree>:
   bddac:	b570      	push	{r4, r5, r6, lr}
   bddae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bddb0:	4605      	mov	r5, r0
   bddb2:	460c      	mov	r4, r1
   bddb4:	b976      	cbnz	r6, bddd4 <_Bfree+0x28>
   bddb6:	2010      	movs	r0, #16
   bddb8:	f7f9 feee 	bl	b7b98 <malloc>
   bddbc:	4602      	mov	r2, r0
   bddbe:	6268      	str	r0, [r5, #36]	; 0x24
   bddc0:	b920      	cbnz	r0, bddcc <_Bfree+0x20>
   bddc2:	4b09      	ldr	r3, [pc, #36]	; (bdde8 <_Bfree+0x3c>)
   bddc4:	4809      	ldr	r0, [pc, #36]	; (bddec <_Bfree+0x40>)
   bddc6:	218a      	movs	r1, #138	; 0x8a
   bddc8:	f7f9 ff2e 	bl	b7c28 <__assert_func>
   bddcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bddd0:	6006      	str	r6, [r0, #0]
   bddd2:	60c6      	str	r6, [r0, #12]
   bddd4:	b13c      	cbz	r4, bdde6 <_Bfree+0x3a>
   bddd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bddd8:	6862      	ldr	r2, [r4, #4]
   bddda:	68db      	ldr	r3, [r3, #12]
   bdddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bdde0:	6021      	str	r1, [r4, #0]
   bdde2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bdde6:	bd70      	pop	{r4, r5, r6, pc}
   bdde8:	000bf2b9 	.word	0x000bf2b9
   bddec:	000bf55c 	.word	0x000bf55c

000bddf0 <__multadd>:
   bddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bddf4:	690d      	ldr	r5, [r1, #16]
   bddf6:	4607      	mov	r7, r0
   bddf8:	460c      	mov	r4, r1
   bddfa:	461e      	mov	r6, r3
   bddfc:	f101 0c14 	add.w	ip, r1, #20
   bde00:	2000      	movs	r0, #0
   bde02:	f8dc 3000 	ldr.w	r3, [ip]
   bde06:	b299      	uxth	r1, r3
   bde08:	fb02 6101 	mla	r1, r2, r1, r6
   bde0c:	0c1e      	lsrs	r6, r3, #16
   bde0e:	0c0b      	lsrs	r3, r1, #16
   bde10:	fb02 3306 	mla	r3, r2, r6, r3
   bde14:	b289      	uxth	r1, r1
   bde16:	3001      	adds	r0, #1
   bde18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bde1c:	4285      	cmp	r5, r0
   bde1e:	f84c 1b04 	str.w	r1, [ip], #4
   bde22:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bde26:	dcec      	bgt.n	bde02 <__multadd+0x12>
   bde28:	b30e      	cbz	r6, bde6e <__multadd+0x7e>
   bde2a:	68a3      	ldr	r3, [r4, #8]
   bde2c:	42ab      	cmp	r3, r5
   bde2e:	dc19      	bgt.n	bde64 <__multadd+0x74>
   bde30:	6861      	ldr	r1, [r4, #4]
   bde32:	4638      	mov	r0, r7
   bde34:	3101      	adds	r1, #1
   bde36:	f7ff ff79 	bl	bdd2c <_Balloc>
   bde3a:	4680      	mov	r8, r0
   bde3c:	b928      	cbnz	r0, bde4a <__multadd+0x5a>
   bde3e:	4602      	mov	r2, r0
   bde40:	4b0c      	ldr	r3, [pc, #48]	; (bde74 <__multadd+0x84>)
   bde42:	480d      	ldr	r0, [pc, #52]	; (bde78 <__multadd+0x88>)
   bde44:	21b5      	movs	r1, #181	; 0xb5
   bde46:	f7f9 feef 	bl	b7c28 <__assert_func>
   bde4a:	6922      	ldr	r2, [r4, #16]
   bde4c:	3202      	adds	r2, #2
   bde4e:	f104 010c 	add.w	r1, r4, #12
   bde52:	0092      	lsls	r2, r2, #2
   bde54:	300c      	adds	r0, #12
   bde56:	f7fe fbaf 	bl	bc5b8 <memcpy>
   bde5a:	4621      	mov	r1, r4
   bde5c:	4638      	mov	r0, r7
   bde5e:	f7ff ffa5 	bl	bddac <_Bfree>
   bde62:	4644      	mov	r4, r8
   bde64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bde68:	3501      	adds	r5, #1
   bde6a:	615e      	str	r6, [r3, #20]
   bde6c:	6125      	str	r5, [r4, #16]
   bde6e:	4620      	mov	r0, r4
   bde70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bde74:	000bf4b1 	.word	0x000bf4b1
   bde78:	000bf55c 	.word	0x000bf55c

000bde7c <__s2b>:
   bde7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bde80:	460c      	mov	r4, r1
   bde82:	4615      	mov	r5, r2
   bde84:	461f      	mov	r7, r3
   bde86:	2209      	movs	r2, #9
   bde88:	3308      	adds	r3, #8
   bde8a:	4606      	mov	r6, r0
   bde8c:	fb93 f3f2 	sdiv	r3, r3, r2
   bde90:	2100      	movs	r1, #0
   bde92:	2201      	movs	r2, #1
   bde94:	429a      	cmp	r2, r3
   bde96:	db09      	blt.n	bdeac <__s2b+0x30>
   bde98:	4630      	mov	r0, r6
   bde9a:	f7ff ff47 	bl	bdd2c <_Balloc>
   bde9e:	b940      	cbnz	r0, bdeb2 <__s2b+0x36>
   bdea0:	4602      	mov	r2, r0
   bdea2:	4b19      	ldr	r3, [pc, #100]	; (bdf08 <__s2b+0x8c>)
   bdea4:	4819      	ldr	r0, [pc, #100]	; (bdf0c <__s2b+0x90>)
   bdea6:	21ce      	movs	r1, #206	; 0xce
   bdea8:	f7f9 febe 	bl	b7c28 <__assert_func>
   bdeac:	0052      	lsls	r2, r2, #1
   bdeae:	3101      	adds	r1, #1
   bdeb0:	e7f0      	b.n	bde94 <__s2b+0x18>
   bdeb2:	9b08      	ldr	r3, [sp, #32]
   bdeb4:	6143      	str	r3, [r0, #20]
   bdeb6:	2d09      	cmp	r5, #9
   bdeb8:	f04f 0301 	mov.w	r3, #1
   bdebc:	6103      	str	r3, [r0, #16]
   bdebe:	dd16      	ble.n	bdeee <__s2b+0x72>
   bdec0:	f104 0909 	add.w	r9, r4, #9
   bdec4:	46c8      	mov	r8, r9
   bdec6:	442c      	add	r4, r5
   bdec8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bdecc:	4601      	mov	r1, r0
   bdece:	3b30      	subs	r3, #48	; 0x30
   bded0:	220a      	movs	r2, #10
   bded2:	4630      	mov	r0, r6
   bded4:	f7ff ff8c 	bl	bddf0 <__multadd>
   bded8:	45a0      	cmp	r8, r4
   bdeda:	d1f5      	bne.n	bdec8 <__s2b+0x4c>
   bdedc:	f1a5 0408 	sub.w	r4, r5, #8
   bdee0:	444c      	add	r4, r9
   bdee2:	1b2d      	subs	r5, r5, r4
   bdee4:	1963      	adds	r3, r4, r5
   bdee6:	42bb      	cmp	r3, r7
   bdee8:	db04      	blt.n	bdef4 <__s2b+0x78>
   bdeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdeee:	340a      	adds	r4, #10
   bdef0:	2509      	movs	r5, #9
   bdef2:	e7f6      	b.n	bdee2 <__s2b+0x66>
   bdef4:	f814 3b01 	ldrb.w	r3, [r4], #1
   bdef8:	4601      	mov	r1, r0
   bdefa:	3b30      	subs	r3, #48	; 0x30
   bdefc:	220a      	movs	r2, #10
   bdefe:	4630      	mov	r0, r6
   bdf00:	f7ff ff76 	bl	bddf0 <__multadd>
   bdf04:	e7ee      	b.n	bdee4 <__s2b+0x68>
   bdf06:	bf00      	nop
   bdf08:	000bf4b1 	.word	0x000bf4b1
   bdf0c:	000bf55c 	.word	0x000bf55c

000bdf10 <__hi0bits>:
   bdf10:	0c03      	lsrs	r3, r0, #16
   bdf12:	041b      	lsls	r3, r3, #16
   bdf14:	b9d3      	cbnz	r3, bdf4c <__hi0bits+0x3c>
   bdf16:	0400      	lsls	r0, r0, #16
   bdf18:	2310      	movs	r3, #16
   bdf1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bdf1e:	bf04      	itt	eq
   bdf20:	0200      	lsleq	r0, r0, #8
   bdf22:	3308      	addeq	r3, #8
   bdf24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bdf28:	bf04      	itt	eq
   bdf2a:	0100      	lsleq	r0, r0, #4
   bdf2c:	3304      	addeq	r3, #4
   bdf2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bdf32:	bf04      	itt	eq
   bdf34:	0080      	lsleq	r0, r0, #2
   bdf36:	3302      	addeq	r3, #2
   bdf38:	2800      	cmp	r0, #0
   bdf3a:	db05      	blt.n	bdf48 <__hi0bits+0x38>
   bdf3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bdf40:	f103 0301 	add.w	r3, r3, #1
   bdf44:	bf08      	it	eq
   bdf46:	2320      	moveq	r3, #32
   bdf48:	4618      	mov	r0, r3
   bdf4a:	4770      	bx	lr
   bdf4c:	2300      	movs	r3, #0
   bdf4e:	e7e4      	b.n	bdf1a <__hi0bits+0xa>

000bdf50 <__lo0bits>:
   bdf50:	6803      	ldr	r3, [r0, #0]
   bdf52:	f013 0207 	ands.w	r2, r3, #7
   bdf56:	4601      	mov	r1, r0
   bdf58:	d00b      	beq.n	bdf72 <__lo0bits+0x22>
   bdf5a:	07da      	lsls	r2, r3, #31
   bdf5c:	d423      	bmi.n	bdfa6 <__lo0bits+0x56>
   bdf5e:	0798      	lsls	r0, r3, #30
   bdf60:	bf49      	itett	mi
   bdf62:	085b      	lsrmi	r3, r3, #1
   bdf64:	089b      	lsrpl	r3, r3, #2
   bdf66:	2001      	movmi	r0, #1
   bdf68:	600b      	strmi	r3, [r1, #0]
   bdf6a:	bf5c      	itt	pl
   bdf6c:	600b      	strpl	r3, [r1, #0]
   bdf6e:	2002      	movpl	r0, #2
   bdf70:	4770      	bx	lr
   bdf72:	b298      	uxth	r0, r3
   bdf74:	b9a8      	cbnz	r0, bdfa2 <__lo0bits+0x52>
   bdf76:	0c1b      	lsrs	r3, r3, #16
   bdf78:	2010      	movs	r0, #16
   bdf7a:	b2da      	uxtb	r2, r3
   bdf7c:	b90a      	cbnz	r2, bdf82 <__lo0bits+0x32>
   bdf7e:	3008      	adds	r0, #8
   bdf80:	0a1b      	lsrs	r3, r3, #8
   bdf82:	071a      	lsls	r2, r3, #28
   bdf84:	bf04      	itt	eq
   bdf86:	091b      	lsreq	r3, r3, #4
   bdf88:	3004      	addeq	r0, #4
   bdf8a:	079a      	lsls	r2, r3, #30
   bdf8c:	bf04      	itt	eq
   bdf8e:	089b      	lsreq	r3, r3, #2
   bdf90:	3002      	addeq	r0, #2
   bdf92:	07da      	lsls	r2, r3, #31
   bdf94:	d403      	bmi.n	bdf9e <__lo0bits+0x4e>
   bdf96:	085b      	lsrs	r3, r3, #1
   bdf98:	f100 0001 	add.w	r0, r0, #1
   bdf9c:	d005      	beq.n	bdfaa <__lo0bits+0x5a>
   bdf9e:	600b      	str	r3, [r1, #0]
   bdfa0:	4770      	bx	lr
   bdfa2:	4610      	mov	r0, r2
   bdfa4:	e7e9      	b.n	bdf7a <__lo0bits+0x2a>
   bdfa6:	2000      	movs	r0, #0
   bdfa8:	4770      	bx	lr
   bdfaa:	2020      	movs	r0, #32
   bdfac:	4770      	bx	lr
	...

000bdfb0 <__i2b>:
   bdfb0:	b510      	push	{r4, lr}
   bdfb2:	460c      	mov	r4, r1
   bdfb4:	2101      	movs	r1, #1
   bdfb6:	f7ff feb9 	bl	bdd2c <_Balloc>
   bdfba:	4602      	mov	r2, r0
   bdfbc:	b928      	cbnz	r0, bdfca <__i2b+0x1a>
   bdfbe:	4b05      	ldr	r3, [pc, #20]	; (bdfd4 <__i2b+0x24>)
   bdfc0:	4805      	ldr	r0, [pc, #20]	; (bdfd8 <__i2b+0x28>)
   bdfc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bdfc6:	f7f9 fe2f 	bl	b7c28 <__assert_func>
   bdfca:	2301      	movs	r3, #1
   bdfcc:	6144      	str	r4, [r0, #20]
   bdfce:	6103      	str	r3, [r0, #16]
   bdfd0:	bd10      	pop	{r4, pc}
   bdfd2:	bf00      	nop
   bdfd4:	000bf4b1 	.word	0x000bf4b1
   bdfd8:	000bf55c 	.word	0x000bf55c

000bdfdc <__multiply>:
   bdfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdfe0:	4691      	mov	r9, r2
   bdfe2:	690a      	ldr	r2, [r1, #16]
   bdfe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdfe8:	429a      	cmp	r2, r3
   bdfea:	bfb8      	it	lt
   bdfec:	460b      	movlt	r3, r1
   bdfee:	460c      	mov	r4, r1
   bdff0:	bfbc      	itt	lt
   bdff2:	464c      	movlt	r4, r9
   bdff4:	4699      	movlt	r9, r3
   bdff6:	6927      	ldr	r7, [r4, #16]
   bdff8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bdffc:	68a3      	ldr	r3, [r4, #8]
   bdffe:	6861      	ldr	r1, [r4, #4]
   be000:	eb07 060a 	add.w	r6, r7, sl
   be004:	42b3      	cmp	r3, r6
   be006:	b085      	sub	sp, #20
   be008:	bfb8      	it	lt
   be00a:	3101      	addlt	r1, #1
   be00c:	f7ff fe8e 	bl	bdd2c <_Balloc>
   be010:	b930      	cbnz	r0, be020 <__multiply+0x44>
   be012:	4602      	mov	r2, r0
   be014:	4b44      	ldr	r3, [pc, #272]	; (be128 <__multiply+0x14c>)
   be016:	4845      	ldr	r0, [pc, #276]	; (be12c <__multiply+0x150>)
   be018:	f240 115d 	movw	r1, #349	; 0x15d
   be01c:	f7f9 fe04 	bl	b7c28 <__assert_func>
   be020:	f100 0514 	add.w	r5, r0, #20
   be024:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   be028:	462b      	mov	r3, r5
   be02a:	2200      	movs	r2, #0
   be02c:	4543      	cmp	r3, r8
   be02e:	d321      	bcc.n	be074 <__multiply+0x98>
   be030:	f104 0314 	add.w	r3, r4, #20
   be034:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   be038:	f109 0314 	add.w	r3, r9, #20
   be03c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   be040:	9202      	str	r2, [sp, #8]
   be042:	1b3a      	subs	r2, r7, r4
   be044:	3a15      	subs	r2, #21
   be046:	f022 0203 	bic.w	r2, r2, #3
   be04a:	3204      	adds	r2, #4
   be04c:	f104 0115 	add.w	r1, r4, #21
   be050:	428f      	cmp	r7, r1
   be052:	bf38      	it	cc
   be054:	2204      	movcc	r2, #4
   be056:	9201      	str	r2, [sp, #4]
   be058:	9a02      	ldr	r2, [sp, #8]
   be05a:	9303      	str	r3, [sp, #12]
   be05c:	429a      	cmp	r2, r3
   be05e:	d80c      	bhi.n	be07a <__multiply+0x9e>
   be060:	2e00      	cmp	r6, #0
   be062:	dd03      	ble.n	be06c <__multiply+0x90>
   be064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   be068:	2b00      	cmp	r3, #0
   be06a:	d05a      	beq.n	be122 <__multiply+0x146>
   be06c:	6106      	str	r6, [r0, #16]
   be06e:	b005      	add	sp, #20
   be070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be074:	f843 2b04 	str.w	r2, [r3], #4
   be078:	e7d8      	b.n	be02c <__multiply+0x50>
   be07a:	f8b3 a000 	ldrh.w	sl, [r3]
   be07e:	f1ba 0f00 	cmp.w	sl, #0
   be082:	d024      	beq.n	be0ce <__multiply+0xf2>
   be084:	f104 0e14 	add.w	lr, r4, #20
   be088:	46a9      	mov	r9, r5
   be08a:	f04f 0c00 	mov.w	ip, #0
   be08e:	f85e 2b04 	ldr.w	r2, [lr], #4
   be092:	f8d9 1000 	ldr.w	r1, [r9]
   be096:	fa1f fb82 	uxth.w	fp, r2
   be09a:	b289      	uxth	r1, r1
   be09c:	fb0a 110b 	mla	r1, sl, fp, r1
   be0a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   be0a4:	f8d9 2000 	ldr.w	r2, [r9]
   be0a8:	4461      	add	r1, ip
   be0aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be0ae:	fb0a c20b 	mla	r2, sl, fp, ip
   be0b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   be0b6:	b289      	uxth	r1, r1
   be0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   be0bc:	4577      	cmp	r7, lr
   be0be:	f849 1b04 	str.w	r1, [r9], #4
   be0c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   be0c6:	d8e2      	bhi.n	be08e <__multiply+0xb2>
   be0c8:	9a01      	ldr	r2, [sp, #4]
   be0ca:	f845 c002 	str.w	ip, [r5, r2]
   be0ce:	9a03      	ldr	r2, [sp, #12]
   be0d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   be0d4:	3304      	adds	r3, #4
   be0d6:	f1b9 0f00 	cmp.w	r9, #0
   be0da:	d020      	beq.n	be11e <__multiply+0x142>
   be0dc:	6829      	ldr	r1, [r5, #0]
   be0de:	f104 0c14 	add.w	ip, r4, #20
   be0e2:	46ae      	mov	lr, r5
   be0e4:	f04f 0a00 	mov.w	sl, #0
   be0e8:	f8bc b000 	ldrh.w	fp, [ip]
   be0ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
   be0f0:	fb09 220b 	mla	r2, r9, fp, r2
   be0f4:	4492      	add	sl, r2
   be0f6:	b289      	uxth	r1, r1
   be0f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   be0fc:	f84e 1b04 	str.w	r1, [lr], #4
   be100:	f85c 2b04 	ldr.w	r2, [ip], #4
   be104:	f8be 1000 	ldrh.w	r1, [lr]
   be108:	0c12      	lsrs	r2, r2, #16
   be10a:	fb09 1102 	mla	r1, r9, r2, r1
   be10e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   be112:	4567      	cmp	r7, ip
   be114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   be118:	d8e6      	bhi.n	be0e8 <__multiply+0x10c>
   be11a:	9a01      	ldr	r2, [sp, #4]
   be11c:	50a9      	str	r1, [r5, r2]
   be11e:	3504      	adds	r5, #4
   be120:	e79a      	b.n	be058 <__multiply+0x7c>
   be122:	3e01      	subs	r6, #1
   be124:	e79c      	b.n	be060 <__multiply+0x84>
   be126:	bf00      	nop
   be128:	000bf4b1 	.word	0x000bf4b1
   be12c:	000bf55c 	.word	0x000bf55c

000be130 <__pow5mult>:
   be130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be134:	4615      	mov	r5, r2
   be136:	f012 0203 	ands.w	r2, r2, #3
   be13a:	4606      	mov	r6, r0
   be13c:	460f      	mov	r7, r1
   be13e:	d007      	beq.n	be150 <__pow5mult+0x20>
   be140:	4c25      	ldr	r4, [pc, #148]	; (be1d8 <__pow5mult+0xa8>)
   be142:	3a01      	subs	r2, #1
   be144:	2300      	movs	r3, #0
   be146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   be14a:	f7ff fe51 	bl	bddf0 <__multadd>
   be14e:	4607      	mov	r7, r0
   be150:	10ad      	asrs	r5, r5, #2
   be152:	d03d      	beq.n	be1d0 <__pow5mult+0xa0>
   be154:	6a74      	ldr	r4, [r6, #36]	; 0x24
   be156:	b97c      	cbnz	r4, be178 <__pow5mult+0x48>
   be158:	2010      	movs	r0, #16
   be15a:	f7f9 fd1d 	bl	b7b98 <malloc>
   be15e:	4602      	mov	r2, r0
   be160:	6270      	str	r0, [r6, #36]	; 0x24
   be162:	b928      	cbnz	r0, be170 <__pow5mult+0x40>
   be164:	4b1d      	ldr	r3, [pc, #116]	; (be1dc <__pow5mult+0xac>)
   be166:	481e      	ldr	r0, [pc, #120]	; (be1e0 <__pow5mult+0xb0>)
   be168:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   be16c:	f7f9 fd5c 	bl	b7c28 <__assert_func>
   be170:	e9c0 4401 	strd	r4, r4, [r0, #4]
   be174:	6004      	str	r4, [r0, #0]
   be176:	60c4      	str	r4, [r0, #12]
   be178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   be17c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   be180:	b94c      	cbnz	r4, be196 <__pow5mult+0x66>
   be182:	f240 2171 	movw	r1, #625	; 0x271
   be186:	4630      	mov	r0, r6
   be188:	f7ff ff12 	bl	bdfb0 <__i2b>
   be18c:	2300      	movs	r3, #0
   be18e:	f8c8 0008 	str.w	r0, [r8, #8]
   be192:	4604      	mov	r4, r0
   be194:	6003      	str	r3, [r0, #0]
   be196:	f04f 0900 	mov.w	r9, #0
   be19a:	07eb      	lsls	r3, r5, #31
   be19c:	d50a      	bpl.n	be1b4 <__pow5mult+0x84>
   be19e:	4639      	mov	r1, r7
   be1a0:	4622      	mov	r2, r4
   be1a2:	4630      	mov	r0, r6
   be1a4:	f7ff ff1a 	bl	bdfdc <__multiply>
   be1a8:	4639      	mov	r1, r7
   be1aa:	4680      	mov	r8, r0
   be1ac:	4630      	mov	r0, r6
   be1ae:	f7ff fdfd 	bl	bddac <_Bfree>
   be1b2:	4647      	mov	r7, r8
   be1b4:	106d      	asrs	r5, r5, #1
   be1b6:	d00b      	beq.n	be1d0 <__pow5mult+0xa0>
   be1b8:	6820      	ldr	r0, [r4, #0]
   be1ba:	b938      	cbnz	r0, be1cc <__pow5mult+0x9c>
   be1bc:	4622      	mov	r2, r4
   be1be:	4621      	mov	r1, r4
   be1c0:	4630      	mov	r0, r6
   be1c2:	f7ff ff0b 	bl	bdfdc <__multiply>
   be1c6:	6020      	str	r0, [r4, #0]
   be1c8:	f8c0 9000 	str.w	r9, [r0]
   be1cc:	4604      	mov	r4, r0
   be1ce:	e7e4      	b.n	be19a <__pow5mult+0x6a>
   be1d0:	4638      	mov	r0, r7
   be1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be1d6:	bf00      	nop
   be1d8:	000bf6d0 	.word	0x000bf6d0
   be1dc:	000bf2b9 	.word	0x000bf2b9
   be1e0:	000bf55c 	.word	0x000bf55c

000be1e4 <__lshift>:
   be1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be1e8:	460c      	mov	r4, r1
   be1ea:	6849      	ldr	r1, [r1, #4]
   be1ec:	6923      	ldr	r3, [r4, #16]
   be1ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
   be1f2:	68a3      	ldr	r3, [r4, #8]
   be1f4:	4607      	mov	r7, r0
   be1f6:	4691      	mov	r9, r2
   be1f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   be1fc:	f108 0601 	add.w	r6, r8, #1
   be200:	42b3      	cmp	r3, r6
   be202:	db0b      	blt.n	be21c <__lshift+0x38>
   be204:	4638      	mov	r0, r7
   be206:	f7ff fd91 	bl	bdd2c <_Balloc>
   be20a:	4605      	mov	r5, r0
   be20c:	b948      	cbnz	r0, be222 <__lshift+0x3e>
   be20e:	4602      	mov	r2, r0
   be210:	4b2a      	ldr	r3, [pc, #168]	; (be2bc <__lshift+0xd8>)
   be212:	482b      	ldr	r0, [pc, #172]	; (be2c0 <__lshift+0xdc>)
   be214:	f240 11d9 	movw	r1, #473	; 0x1d9
   be218:	f7f9 fd06 	bl	b7c28 <__assert_func>
   be21c:	3101      	adds	r1, #1
   be21e:	005b      	lsls	r3, r3, #1
   be220:	e7ee      	b.n	be200 <__lshift+0x1c>
   be222:	2300      	movs	r3, #0
   be224:	f100 0114 	add.w	r1, r0, #20
   be228:	f100 0210 	add.w	r2, r0, #16
   be22c:	4618      	mov	r0, r3
   be22e:	4553      	cmp	r3, sl
   be230:	db37      	blt.n	be2a2 <__lshift+0xbe>
   be232:	6920      	ldr	r0, [r4, #16]
   be234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   be238:	f104 0314 	add.w	r3, r4, #20
   be23c:	f019 091f 	ands.w	r9, r9, #31
   be240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   be244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   be248:	d02f      	beq.n	be2aa <__lshift+0xc6>
   be24a:	f1c9 0e20 	rsb	lr, r9, #32
   be24e:	468a      	mov	sl, r1
   be250:	f04f 0c00 	mov.w	ip, #0
   be254:	681a      	ldr	r2, [r3, #0]
   be256:	fa02 f209 	lsl.w	r2, r2, r9
   be25a:	ea42 020c 	orr.w	r2, r2, ip
   be25e:	f84a 2b04 	str.w	r2, [sl], #4
   be262:	f853 2b04 	ldr.w	r2, [r3], #4
   be266:	4298      	cmp	r0, r3
   be268:	fa22 fc0e 	lsr.w	ip, r2, lr
   be26c:	d8f2      	bhi.n	be254 <__lshift+0x70>
   be26e:	1b03      	subs	r3, r0, r4
   be270:	3b15      	subs	r3, #21
   be272:	f023 0303 	bic.w	r3, r3, #3
   be276:	3304      	adds	r3, #4
   be278:	f104 0215 	add.w	r2, r4, #21
   be27c:	4290      	cmp	r0, r2
   be27e:	bf38      	it	cc
   be280:	2304      	movcc	r3, #4
   be282:	f841 c003 	str.w	ip, [r1, r3]
   be286:	f1bc 0f00 	cmp.w	ip, #0
   be28a:	d001      	beq.n	be290 <__lshift+0xac>
   be28c:	f108 0602 	add.w	r6, r8, #2
   be290:	3e01      	subs	r6, #1
   be292:	4638      	mov	r0, r7
   be294:	612e      	str	r6, [r5, #16]
   be296:	4621      	mov	r1, r4
   be298:	f7ff fd88 	bl	bddac <_Bfree>
   be29c:	4628      	mov	r0, r5
   be29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be2a2:	f842 0f04 	str.w	r0, [r2, #4]!
   be2a6:	3301      	adds	r3, #1
   be2a8:	e7c1      	b.n	be22e <__lshift+0x4a>
   be2aa:	3904      	subs	r1, #4
   be2ac:	f853 2b04 	ldr.w	r2, [r3], #4
   be2b0:	f841 2f04 	str.w	r2, [r1, #4]!
   be2b4:	4298      	cmp	r0, r3
   be2b6:	d8f9      	bhi.n	be2ac <__lshift+0xc8>
   be2b8:	e7ea      	b.n	be290 <__lshift+0xac>
   be2ba:	bf00      	nop
   be2bc:	000bf4b1 	.word	0x000bf4b1
   be2c0:	000bf55c 	.word	0x000bf55c

000be2c4 <__mcmp>:
   be2c4:	b530      	push	{r4, r5, lr}
   be2c6:	6902      	ldr	r2, [r0, #16]
   be2c8:	690c      	ldr	r4, [r1, #16]
   be2ca:	1b12      	subs	r2, r2, r4
   be2cc:	d10e      	bne.n	be2ec <__mcmp+0x28>
   be2ce:	f100 0314 	add.w	r3, r0, #20
   be2d2:	3114      	adds	r1, #20
   be2d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   be2d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   be2dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   be2e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   be2e4:	42a5      	cmp	r5, r4
   be2e6:	d003      	beq.n	be2f0 <__mcmp+0x2c>
   be2e8:	d305      	bcc.n	be2f6 <__mcmp+0x32>
   be2ea:	2201      	movs	r2, #1
   be2ec:	4610      	mov	r0, r2
   be2ee:	bd30      	pop	{r4, r5, pc}
   be2f0:	4283      	cmp	r3, r0
   be2f2:	d3f3      	bcc.n	be2dc <__mcmp+0x18>
   be2f4:	e7fa      	b.n	be2ec <__mcmp+0x28>
   be2f6:	f04f 32ff 	mov.w	r2, #4294967295
   be2fa:	e7f7      	b.n	be2ec <__mcmp+0x28>

000be2fc <__mdiff>:
   be2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be300:	460c      	mov	r4, r1
   be302:	4606      	mov	r6, r0
   be304:	4611      	mov	r1, r2
   be306:	4620      	mov	r0, r4
   be308:	4690      	mov	r8, r2
   be30a:	f7ff ffdb 	bl	be2c4 <__mcmp>
   be30e:	1e05      	subs	r5, r0, #0
   be310:	d110      	bne.n	be334 <__mdiff+0x38>
   be312:	4629      	mov	r1, r5
   be314:	4630      	mov	r0, r6
   be316:	f7ff fd09 	bl	bdd2c <_Balloc>
   be31a:	b930      	cbnz	r0, be32a <__mdiff+0x2e>
   be31c:	4b3a      	ldr	r3, [pc, #232]	; (be408 <__mdiff+0x10c>)
   be31e:	4602      	mov	r2, r0
   be320:	f240 2132 	movw	r1, #562	; 0x232
   be324:	4839      	ldr	r0, [pc, #228]	; (be40c <__mdiff+0x110>)
   be326:	f7f9 fc7f 	bl	b7c28 <__assert_func>
   be32a:	2301      	movs	r3, #1
   be32c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   be330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be334:	bfa4      	itt	ge
   be336:	4643      	movge	r3, r8
   be338:	46a0      	movge	r8, r4
   be33a:	4630      	mov	r0, r6
   be33c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   be340:	bfa6      	itte	ge
   be342:	461c      	movge	r4, r3
   be344:	2500      	movge	r5, #0
   be346:	2501      	movlt	r5, #1
   be348:	f7ff fcf0 	bl	bdd2c <_Balloc>
   be34c:	b920      	cbnz	r0, be358 <__mdiff+0x5c>
   be34e:	4b2e      	ldr	r3, [pc, #184]	; (be408 <__mdiff+0x10c>)
   be350:	4602      	mov	r2, r0
   be352:	f44f 7110 	mov.w	r1, #576	; 0x240
   be356:	e7e5      	b.n	be324 <__mdiff+0x28>
   be358:	f8d8 7010 	ldr.w	r7, [r8, #16]
   be35c:	6926      	ldr	r6, [r4, #16]
   be35e:	60c5      	str	r5, [r0, #12]
   be360:	f104 0914 	add.w	r9, r4, #20
   be364:	f108 0514 	add.w	r5, r8, #20
   be368:	f100 0e14 	add.w	lr, r0, #20
   be36c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   be370:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   be374:	f108 0210 	add.w	r2, r8, #16
   be378:	46f2      	mov	sl, lr
   be37a:	2100      	movs	r1, #0
   be37c:	f859 3b04 	ldr.w	r3, [r9], #4
   be380:	f852 bf04 	ldr.w	fp, [r2, #4]!
   be384:	fa1f f883 	uxth.w	r8, r3
   be388:	fa11 f18b 	uxtah	r1, r1, fp
   be38c:	0c1b      	lsrs	r3, r3, #16
   be38e:	eba1 0808 	sub.w	r8, r1, r8
   be392:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   be396:	eb03 4328 	add.w	r3, r3, r8, asr #16
   be39a:	fa1f f888 	uxth.w	r8, r8
   be39e:	1419      	asrs	r1, r3, #16
   be3a0:	454e      	cmp	r6, r9
   be3a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   be3a6:	f84a 3b04 	str.w	r3, [sl], #4
   be3aa:	d8e7      	bhi.n	be37c <__mdiff+0x80>
   be3ac:	1b33      	subs	r3, r6, r4
   be3ae:	3b15      	subs	r3, #21
   be3b0:	f023 0303 	bic.w	r3, r3, #3
   be3b4:	3304      	adds	r3, #4
   be3b6:	3415      	adds	r4, #21
   be3b8:	42a6      	cmp	r6, r4
   be3ba:	bf38      	it	cc
   be3bc:	2304      	movcc	r3, #4
   be3be:	441d      	add	r5, r3
   be3c0:	4473      	add	r3, lr
   be3c2:	469e      	mov	lr, r3
   be3c4:	462e      	mov	r6, r5
   be3c6:	4566      	cmp	r6, ip
   be3c8:	d30e      	bcc.n	be3e8 <__mdiff+0xec>
   be3ca:	f10c 0203 	add.w	r2, ip, #3
   be3ce:	1b52      	subs	r2, r2, r5
   be3d0:	f022 0203 	bic.w	r2, r2, #3
   be3d4:	3d03      	subs	r5, #3
   be3d6:	45ac      	cmp	ip, r5
   be3d8:	bf38      	it	cc
   be3da:	2200      	movcc	r2, #0
   be3dc:	441a      	add	r2, r3
   be3de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   be3e2:	b17b      	cbz	r3, be404 <__mdiff+0x108>
   be3e4:	6107      	str	r7, [r0, #16]
   be3e6:	e7a3      	b.n	be330 <__mdiff+0x34>
   be3e8:	f856 8b04 	ldr.w	r8, [r6], #4
   be3ec:	fa11 f288 	uxtah	r2, r1, r8
   be3f0:	1414      	asrs	r4, r2, #16
   be3f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   be3f6:	b292      	uxth	r2, r2
   be3f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   be3fc:	f84e 2b04 	str.w	r2, [lr], #4
   be400:	1421      	asrs	r1, r4, #16
   be402:	e7e0      	b.n	be3c6 <__mdiff+0xca>
   be404:	3f01      	subs	r7, #1
   be406:	e7ea      	b.n	be3de <__mdiff+0xe2>
   be408:	000bf4b1 	.word	0x000bf4b1
   be40c:	000bf55c 	.word	0x000bf55c

000be410 <__ulp>:
   be410:	b082      	sub	sp, #8
   be412:	ed8d 0b00 	vstr	d0, [sp]
   be416:	9b01      	ldr	r3, [sp, #4]
   be418:	4912      	ldr	r1, [pc, #72]	; (be464 <__ulp+0x54>)
   be41a:	4019      	ands	r1, r3
   be41c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   be420:	2900      	cmp	r1, #0
   be422:	dd05      	ble.n	be430 <__ulp+0x20>
   be424:	2200      	movs	r2, #0
   be426:	460b      	mov	r3, r1
   be428:	ec43 2b10 	vmov	d0, r2, r3
   be42c:	b002      	add	sp, #8
   be42e:	4770      	bx	lr
   be430:	4249      	negs	r1, r1
   be432:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   be436:	ea4f 5021 	mov.w	r0, r1, asr #20
   be43a:	f04f 0200 	mov.w	r2, #0
   be43e:	f04f 0300 	mov.w	r3, #0
   be442:	da04      	bge.n	be44e <__ulp+0x3e>
   be444:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   be448:	fa41 f300 	asr.w	r3, r1, r0
   be44c:	e7ec      	b.n	be428 <__ulp+0x18>
   be44e:	f1a0 0114 	sub.w	r1, r0, #20
   be452:	291e      	cmp	r1, #30
   be454:	bfda      	itte	le
   be456:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   be45a:	fa20 f101 	lsrle.w	r1, r0, r1
   be45e:	2101      	movgt	r1, #1
   be460:	460a      	mov	r2, r1
   be462:	e7e1      	b.n	be428 <__ulp+0x18>
   be464:	7ff00000 	.word	0x7ff00000

000be468 <__b2d>:
   be468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   be46a:	6905      	ldr	r5, [r0, #16]
   be46c:	f100 0714 	add.w	r7, r0, #20
   be470:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   be474:	1f2e      	subs	r6, r5, #4
   be476:	f855 4c04 	ldr.w	r4, [r5, #-4]
   be47a:	4620      	mov	r0, r4
   be47c:	f7ff fd48 	bl	bdf10 <__hi0bits>
   be480:	f1c0 0320 	rsb	r3, r0, #32
   be484:	280a      	cmp	r0, #10
   be486:	f8df c07c 	ldr.w	ip, [pc, #124]	; be504 <__b2d+0x9c>
   be48a:	600b      	str	r3, [r1, #0]
   be48c:	dc14      	bgt.n	be4b8 <__b2d+0x50>
   be48e:	f1c0 0e0b 	rsb	lr, r0, #11
   be492:	fa24 f10e 	lsr.w	r1, r4, lr
   be496:	42b7      	cmp	r7, r6
   be498:	ea41 030c 	orr.w	r3, r1, ip
   be49c:	bf34      	ite	cc
   be49e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be4a2:	2100      	movcs	r1, #0
   be4a4:	3015      	adds	r0, #21
   be4a6:	fa04 f000 	lsl.w	r0, r4, r0
   be4aa:	fa21 f10e 	lsr.w	r1, r1, lr
   be4ae:	ea40 0201 	orr.w	r2, r0, r1
   be4b2:	ec43 2b10 	vmov	d0, r2, r3
   be4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   be4b8:	42b7      	cmp	r7, r6
   be4ba:	bf3a      	itte	cc
   be4bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   be4c0:	f1a5 0608 	subcc.w	r6, r5, #8
   be4c4:	2100      	movcs	r1, #0
   be4c6:	380b      	subs	r0, #11
   be4c8:	d017      	beq.n	be4fa <__b2d+0x92>
   be4ca:	f1c0 0c20 	rsb	ip, r0, #32
   be4ce:	fa04 f500 	lsl.w	r5, r4, r0
   be4d2:	42be      	cmp	r6, r7
   be4d4:	fa21 f40c 	lsr.w	r4, r1, ip
   be4d8:	ea45 0504 	orr.w	r5, r5, r4
   be4dc:	bf8c      	ite	hi
   be4de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   be4e2:	2400      	movls	r4, #0
   be4e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   be4e8:	fa01 f000 	lsl.w	r0, r1, r0
   be4ec:	fa24 f40c 	lsr.w	r4, r4, ip
   be4f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   be4f4:	ea40 0204 	orr.w	r2, r0, r4
   be4f8:	e7db      	b.n	be4b2 <__b2d+0x4a>
   be4fa:	ea44 030c 	orr.w	r3, r4, ip
   be4fe:	460a      	mov	r2, r1
   be500:	e7d7      	b.n	be4b2 <__b2d+0x4a>
   be502:	bf00      	nop
   be504:	3ff00000 	.word	0x3ff00000

000be508 <__d2b>:
   be508:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   be50c:	4689      	mov	r9, r1
   be50e:	2101      	movs	r1, #1
   be510:	ec57 6b10 	vmov	r6, r7, d0
   be514:	4690      	mov	r8, r2
   be516:	f7ff fc09 	bl	bdd2c <_Balloc>
   be51a:	4604      	mov	r4, r0
   be51c:	b930      	cbnz	r0, be52c <__d2b+0x24>
   be51e:	4602      	mov	r2, r0
   be520:	4b25      	ldr	r3, [pc, #148]	; (be5b8 <__d2b+0xb0>)
   be522:	4826      	ldr	r0, [pc, #152]	; (be5bc <__d2b+0xb4>)
   be524:	f240 310a 	movw	r1, #778	; 0x30a
   be528:	f7f9 fb7e 	bl	b7c28 <__assert_func>
   be52c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   be530:	f3c7 0313 	ubfx	r3, r7, #0, #20
   be534:	bb35      	cbnz	r5, be584 <__d2b+0x7c>
   be536:	2e00      	cmp	r6, #0
   be538:	9301      	str	r3, [sp, #4]
   be53a:	d028      	beq.n	be58e <__d2b+0x86>
   be53c:	4668      	mov	r0, sp
   be53e:	9600      	str	r6, [sp, #0]
   be540:	f7ff fd06 	bl	bdf50 <__lo0bits>
   be544:	9900      	ldr	r1, [sp, #0]
   be546:	b300      	cbz	r0, be58a <__d2b+0x82>
   be548:	9a01      	ldr	r2, [sp, #4]
   be54a:	f1c0 0320 	rsb	r3, r0, #32
   be54e:	fa02 f303 	lsl.w	r3, r2, r3
   be552:	430b      	orrs	r3, r1
   be554:	40c2      	lsrs	r2, r0
   be556:	6163      	str	r3, [r4, #20]
   be558:	9201      	str	r2, [sp, #4]
   be55a:	9b01      	ldr	r3, [sp, #4]
   be55c:	61a3      	str	r3, [r4, #24]
   be55e:	2b00      	cmp	r3, #0
   be560:	bf14      	ite	ne
   be562:	2202      	movne	r2, #2
   be564:	2201      	moveq	r2, #1
   be566:	6122      	str	r2, [r4, #16]
   be568:	b1d5      	cbz	r5, be5a0 <__d2b+0x98>
   be56a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   be56e:	4405      	add	r5, r0
   be570:	f8c9 5000 	str.w	r5, [r9]
   be574:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   be578:	f8c8 0000 	str.w	r0, [r8]
   be57c:	4620      	mov	r0, r4
   be57e:	b003      	add	sp, #12
   be580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   be588:	e7d5      	b.n	be536 <__d2b+0x2e>
   be58a:	6161      	str	r1, [r4, #20]
   be58c:	e7e5      	b.n	be55a <__d2b+0x52>
   be58e:	a801      	add	r0, sp, #4
   be590:	f7ff fcde 	bl	bdf50 <__lo0bits>
   be594:	9b01      	ldr	r3, [sp, #4]
   be596:	6163      	str	r3, [r4, #20]
   be598:	2201      	movs	r2, #1
   be59a:	6122      	str	r2, [r4, #16]
   be59c:	3020      	adds	r0, #32
   be59e:	e7e3      	b.n	be568 <__d2b+0x60>
   be5a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   be5a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   be5a8:	f8c9 0000 	str.w	r0, [r9]
   be5ac:	6918      	ldr	r0, [r3, #16]
   be5ae:	f7ff fcaf 	bl	bdf10 <__hi0bits>
   be5b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   be5b6:	e7df      	b.n	be578 <__d2b+0x70>
   be5b8:	000bf4b1 	.word	0x000bf4b1
   be5bc:	000bf55c 	.word	0x000bf55c

000be5c0 <__ratio>:
   be5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be5c4:	4688      	mov	r8, r1
   be5c6:	4669      	mov	r1, sp
   be5c8:	4681      	mov	r9, r0
   be5ca:	f7ff ff4d 	bl	be468 <__b2d>
   be5ce:	a901      	add	r1, sp, #4
   be5d0:	4640      	mov	r0, r8
   be5d2:	ec55 4b10 	vmov	r4, r5, d0
   be5d6:	f7ff ff47 	bl	be468 <__b2d>
   be5da:	f8d9 3010 	ldr.w	r3, [r9, #16]
   be5de:	f8d8 2010 	ldr.w	r2, [r8, #16]
   be5e2:	eba3 0c02 	sub.w	ip, r3, r2
   be5e6:	e9dd 3200 	ldrd	r3, r2, [sp]
   be5ea:	1a9b      	subs	r3, r3, r2
   be5ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   be5f0:	ec51 0b10 	vmov	r0, r1, d0
   be5f4:	2b00      	cmp	r3, #0
   be5f6:	bfd6      	itet	le
   be5f8:	460a      	movle	r2, r1
   be5fa:	462a      	movgt	r2, r5
   be5fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   be600:	468b      	mov	fp, r1
   be602:	462f      	mov	r7, r5
   be604:	bfd4      	ite	le
   be606:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   be60a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   be60e:	4620      	mov	r0, r4
   be610:	ee10 2a10 	vmov	r2, s0
   be614:	465b      	mov	r3, fp
   be616:	4639      	mov	r1, r7
   be618:	f7fd fdaa 	bl	bc170 <__aeabi_ddiv>
   be61c:	ec41 0b10 	vmov	d0, r0, r1
   be620:	b003      	add	sp, #12
   be622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000be626 <__copybits>:
   be626:	3901      	subs	r1, #1
   be628:	b570      	push	{r4, r5, r6, lr}
   be62a:	1149      	asrs	r1, r1, #5
   be62c:	6914      	ldr	r4, [r2, #16]
   be62e:	3101      	adds	r1, #1
   be630:	f102 0314 	add.w	r3, r2, #20
   be634:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   be638:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   be63c:	1f05      	subs	r5, r0, #4
   be63e:	42a3      	cmp	r3, r4
   be640:	d30c      	bcc.n	be65c <__copybits+0x36>
   be642:	1aa3      	subs	r3, r4, r2
   be644:	3b11      	subs	r3, #17
   be646:	f023 0303 	bic.w	r3, r3, #3
   be64a:	3211      	adds	r2, #17
   be64c:	42a2      	cmp	r2, r4
   be64e:	bf88      	it	hi
   be650:	2300      	movhi	r3, #0
   be652:	4418      	add	r0, r3
   be654:	2300      	movs	r3, #0
   be656:	4288      	cmp	r0, r1
   be658:	d305      	bcc.n	be666 <__copybits+0x40>
   be65a:	bd70      	pop	{r4, r5, r6, pc}
   be65c:	f853 6b04 	ldr.w	r6, [r3], #4
   be660:	f845 6f04 	str.w	r6, [r5, #4]!
   be664:	e7eb      	b.n	be63e <__copybits+0x18>
   be666:	f840 3b04 	str.w	r3, [r0], #4
   be66a:	e7f4      	b.n	be656 <__copybits+0x30>

000be66c <__any_on>:
   be66c:	f100 0214 	add.w	r2, r0, #20
   be670:	6900      	ldr	r0, [r0, #16]
   be672:	114b      	asrs	r3, r1, #5
   be674:	4298      	cmp	r0, r3
   be676:	b510      	push	{r4, lr}
   be678:	db11      	blt.n	be69e <__any_on+0x32>
   be67a:	dd0a      	ble.n	be692 <__any_on+0x26>
   be67c:	f011 011f 	ands.w	r1, r1, #31
   be680:	d007      	beq.n	be692 <__any_on+0x26>
   be682:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   be686:	fa24 f001 	lsr.w	r0, r4, r1
   be68a:	fa00 f101 	lsl.w	r1, r0, r1
   be68e:	428c      	cmp	r4, r1
   be690:	d10b      	bne.n	be6aa <__any_on+0x3e>
   be692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   be696:	4293      	cmp	r3, r2
   be698:	d803      	bhi.n	be6a2 <__any_on+0x36>
   be69a:	2000      	movs	r0, #0
   be69c:	bd10      	pop	{r4, pc}
   be69e:	4603      	mov	r3, r0
   be6a0:	e7f7      	b.n	be692 <__any_on+0x26>
   be6a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   be6a6:	2900      	cmp	r1, #0
   be6a8:	d0f5      	beq.n	be696 <__any_on+0x2a>
   be6aa:	2001      	movs	r0, #1
   be6ac:	e7f6      	b.n	be69c <__any_on+0x30>

000be6ae <_calloc_r>:
   be6ae:	b513      	push	{r0, r1, r4, lr}
   be6b0:	434a      	muls	r2, r1
   be6b2:	4611      	mov	r1, r2
   be6b4:	9201      	str	r2, [sp, #4]
   be6b6:	f7f9 faa7 	bl	b7c08 <_malloc_r>
   be6ba:	4604      	mov	r4, r0
   be6bc:	b118      	cbz	r0, be6c6 <_calloc_r+0x18>
   be6be:	9a01      	ldr	r2, [sp, #4]
   be6c0:	2100      	movs	r1, #0
   be6c2:	f7fd ffa1 	bl	bc608 <memset>
   be6c6:	4620      	mov	r0, r4
   be6c8:	b002      	add	sp, #8
   be6ca:	bd10      	pop	{r4, pc}
   be6cc:	0000      	movs	r0, r0
	...

000be6d0 <nan>:
   be6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; be6d8 <nan+0x8>
   be6d4:	4770      	bx	lr
   be6d6:	bf00      	nop
   be6d8:	00000000 	.word	0x00000000
   be6dc:	7ff80000 	.word	0x7ff80000

000be6e0 <__ascii_wctomb>:
   be6e0:	b149      	cbz	r1, be6f6 <__ascii_wctomb+0x16>
   be6e2:	2aff      	cmp	r2, #255	; 0xff
   be6e4:	bf85      	ittet	hi
   be6e6:	238a      	movhi	r3, #138	; 0x8a
   be6e8:	6003      	strhi	r3, [r0, #0]
   be6ea:	700a      	strbls	r2, [r1, #0]
   be6ec:	f04f 30ff 	movhi.w	r0, #4294967295
   be6f0:	bf98      	it	ls
   be6f2:	2001      	movls	r0, #1
   be6f4:	4770      	bx	lr
   be6f6:	4608      	mov	r0, r1
   be6f8:	4770      	bx	lr
	...

000be6fc <__aeabi_d2lz>:
   be6fc:	b538      	push	{r3, r4, r5, lr}
   be6fe:	2200      	movs	r2, #0
   be700:	2300      	movs	r3, #0
   be702:	4604      	mov	r4, r0
   be704:	460d      	mov	r5, r1
   be706:	f7fd fe7b 	bl	bc400 <__aeabi_dcmplt>
   be70a:	b928      	cbnz	r0, be718 <__aeabi_d2lz+0x1c>
   be70c:	4620      	mov	r0, r4
   be70e:	4629      	mov	r1, r5
   be710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   be714:	f7fd bf0c 	b.w	bc530 <__aeabi_d2ulz>
   be718:	4620      	mov	r0, r4
   be71a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   be71e:	f7fd ff07 	bl	bc530 <__aeabi_d2ulz>
   be722:	4240      	negs	r0, r0
   be724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   be728:	bd38      	pop	{r3, r4, r5, pc}
   be72a:	bf00      	nop

000be72c <dynalib_user>:
   be72c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   be73c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   be74c:	7620 7269 7574 6c61 5300 6e65 6964 676e      virtual.Sending
   be75c:	6120 7320 6174 7574 2073 7075 6164 6574      a status update
   be76c:	0021 6564 6166 6c75 2074 4d00 4253 4c00     !.default .MSB.L
   be77c:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   be78c:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   be79c:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   be7ac:	4544 7525 003e 7453 7461 7375 203a 6425     DE%u>.Status: %d
   be7bc:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   be7cc:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   be7dc:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   be7ec:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   be7fc:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   be80c:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   be81c:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   be82c:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   be83c:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   be84c:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   be85c:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   be86c:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   be87c:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   be88c:	6425 5b00 4157 4e52 205d 654d 7373 6761     %d.[WARN] Messag
   be89c:	2065 6843 6365 736b 6d75 4420 656f 2073     e Checksum Does 
   be8ac:	6f4e 2074 614d 6374 2168 203a 7325 5700     Not Match!: %s.W
   be8bc:	7261 696e 676e 202c 6863 6365 736b 6d75     arning, checksum
   be8cc:	6420 656f 2073 6f6e 2074 616d 6374 0068      does not match.
   be8dc:	6361 006b 746d 0072 6552 6563 7669 6465     ack.mtr.Received
   be8ec:	4d20 746f 726f 4320 6d6f 616d 646e 203a      Motor Command: 
   be8fc:	534c 6570 6465 253d 2c64 5352 6570 6465     LSpeed=%d,RSpeed
   be90c:	253d 0064 6572 0071 7470 0073 505b 5455     =%d.req.pts.[PUT
   be91c:	5d53 5220 6365 6965 6576 2064 7453 6972     S] Received Stri
   be92c:	676e 4320 6d6f 616d 646e 203a 7325 7300     ng Command: %s.s
   be93c:	6370 6800 6177 6100 7475 6400 706d 5b00     pc.hwa.aut.dmp.[
   be94c:	4e49 4f46 205d 6552 6563 7669 6465 4c20     INFO] Received L
   be95c:	4554 4d20 7365 6173 6567 203a 7325 4e00     TE Message: %s.N
   be96c:	7765 4220 2054 6f43 6d6d 6e61 3a64 5b00     ew BT Command:.[
   be97c:	4e49 4f46 205d 6552 6563 7669 6465 4220     INFO] Received B
   be98c:	454c 4d20 7365 6173 6567 203a 7325 4300     LE Message: %s.C
   be99c:	4843 6275 2500 3230 2564 3230 2564 3430     CHub.%02d%02d%04
   be9ac:	2564 3230 2564 3230 2564 3230 0064 7325     d%02d%02d%02d.%s
   be9bc:	252c 2c66 6625 252c 2c66 6625 252c 2c66     ,%f,%f,%f,%f,%f,
   be9cc:	6625 252c 0066 654e 2077 4258 6565 4320     %f,%f.New XBee C
   be9dc:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   be9ec:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   be9fc:	6173 6567 203a 7325 4500 746e 7265 6e69     sage: %s.Enterin
   bea0c:	2067 6144 6174 4f20 6666 6f6c 6461 7265     g Data Offloader
   bea1c:	4d20 646f 0065 002f 7245 6f72 2c72 6320      Mode./.Error, c
   bea2c:	756f 646c 6e20 746f 6f20 6570 206e 6f72     ould not open ro
   bea3c:	746f 5320 2044 6163 6472 6420 7269 6365     ot SD card direc
   bea4c:	6f74 7972 5700 6961 6974 676e 6620 726f     tory.Waiting for
   bea5c:	4320 4843 6275 6320 6e6f 656e 7463 6f69      CCHub connectio
   bea6c:	2e6e 2e2e 5300 6174 7472 6e69 2067 7274     n....Starting tr
   bea7c:	6e61 6673 7265 2e2e 002e 6843 6365 696b     ansfer....Checki
   bea8c:	676e 6920 2066 6966 656c 2520 2073 7369     ng if file %s is
   bea9c:	6120 2e20 7363 2076 726f 2e20 7874 2e74      a .csv or .txt.
   beaac:	2e2e 2e00 7363 0076 6966 656c 6f64 656e     ....csv.filedone
   beabc:	6600 6c69 6e65 6d61 0065 6553 646e 6e69     .filename.Sendin
   beacc:	2067 6f63 6d6d 6e61 2064 7325 4600 6c69     g command %s.Fil
   beadc:	2065 7325 6920 2073 2061 632e 7673 6f20     e %s is a .csv o
   beaec:	2072 742e 7478 7020 6972 746e 6e69 2067     r .txt printing 
   beafc:	6164 6174 6600 6c69 6365 6d6f 0070 7325     data.filecomp.%s
   beb0c:	3025 7832 4200 746f 6431 7461 4200 6425     %02x.Bot1dat.B%d
   beb1c:	4343 6e73 2573 2e30 6636 2520 2e30 6636     CCsns%0.6f %0.6f
   beb2c:	2520 2064 6425 2520 2064 6425 2520 2064      %d %d %d %d %d 
   beb3c:	4200 6425 4241 7573 2570 2064 6425 2520     .B%dABsup%d %d %
   beb4c:	362e 2066 2e25 6636 0020 3142 4343 7470     .6f %.6f .B1CCpt
   beb5c:	6273 6769 6f62 0074 6157 6574 4272 746f     sbigbot.WaterBot
   beb6c:	5f00 4f4c 2e47 7874 0074 7245 6f72 3a72     ._LOG.txt.Error:
   beb7c:	6320 756f 646c 6e20 746f 6320 6e6f 656e      could not conne
   beb8c:	7463 7420 206f 4453 6320 7261 2164 5400     ct to SD card!.T
   beb9c:	6d69 2c65 614c 6974 7574 6564 4c2c 6e6f     ime,Latitude,Lon
   bebac:	6967 7574 6564 542c 6d65 6570 6172 7574     gitude,Temperatu
   bebbc:	6572 702c 2c48 6944 7373 6c6f 6576 2064     re,pH,Dissolved 
   bebcc:	324f 432c 6e6f 7564 7463 7669 7469 2079     O2,Conductivity 
   bebdc:	2e30 4b31 432c 6e6f 7564 7463 7669 7469     0.1K,Conductivit
   bebec:	2079 4b31 5b00 4e49 4f46 205d 6157 6574     y 1K.[INFO] Wate
   bebfc:	4272 746f 2520 3a64 5320 6174 7472 6465     rBot %d: Started
   bec0c:	4c20 676f 6967 676e 0021 7874 7200 0078      Logging!.tx.rx.
   bec1c:	666f 0066                                   off.

000bec20 <_ZTVN8particle11SPISettingsE>:
	...
   bec28:	4301 000b 40cd 000b 4171 000b               .C...@..qA..

000bec34 <_ZTV5Timer>:
	...
   bec3c:	4385 000b 43d9 000b 41d7 000b               .C...C...A..

000bec48 <_ZTVN5spark10LogHandlerE>:
	...
   bec58:	40a5 000b 40cf 000b                         .@...@..

000bec60 <_ZTVN8particle9LEDStatusE>:
	...
   bec68:	426d 000b 4289 000b 40d9 000b               mB...B...@..

000bec74 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bec7c:	429d 000b 42d1 000b a2d5 000b 40d1 000b     .B...B.......@..

000bec8c <_ZTV4File>:
	...
   bec94:	40f5 000b 417f 000b 4193 000b 418d 000b     .@...A...A...A..
   beca4:	40db 000b 41b7 000b 41b1 000b 41ab 000b     .@...A...A...A..
   becb4:	3462 3032 3936 3431 642d 3463 2d62 3735     b4206914-dc4b-57
   becc4:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   becd4:	3238 3062 6200 3234 3630 3139 2d33 6364     82b0.b4206913-dc
   bece4:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   becf4:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   bed04:	3231 642d 3463 2d62 3735 3334 632d 6238     12-dc4b-5743-c8b
   bed14:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   bed24:	3234 3630 3139 2d30 6364 6234 352d 3437     4206910-dc4b-574
   bed34:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   bed44:	6232 0030                                   2b0.

000bed48 <CSWTCH.263>:
   bed48:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   bed58:	ffff 00ff ff00 00ff ffff 0000               ............

000bed64 <_ZTVN5spark13EthernetClassE>:
	...
   bed6c:	7cb7 000b 7cad 000b 7ca3 000b 7c99 000b     .|...|...|...|..
   bed7c:	7c8d 000b 7c81 000b b2d3 000b b2db 000b     .|...|..........
   bed8c:	7c75 000b 7c6d 000b 7c63 000b 7c59 000b     u|..m|..c|..Y|..
   bed9c:	b30b 000b                                   ....

000beda0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   beda0:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   bedb0:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   bedc0:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   bedd0:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   bede0:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   bedf0:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   bee00:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   bee10:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   bee20:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   bee30:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   bee40:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   bee50:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   bee60:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   bee70:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   bee80:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   bee90:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   beea0:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   beeb0:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   beec0:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   beed0:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   beee0:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   beef0:	6369 002e                                   ic..

000beef4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   beefc:	821f 000b 8281 000b 8355 000b 82ab 000b     ........U.......
   bef0c:	8221 000b                                   !...

000bef10 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bef18:	821b 000b 828f 000b 821d 000b 82b1 000b     ................
   bef28:	8241 000b                                   A...

000bef2c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bef34:	8219 000b 829d 000b 8b11 000b 82b7 000b     ................
   bef44:	8261 000b                                   a...

000bef48 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   bef54:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000bef66 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   bef66:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000bef76 <_ZN8particle7BleUuid9BASE_UUIDE>:
   bef76:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   bef86:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   bef96:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   befa6:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   befb6:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   befc6:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   befd6:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   befe6:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000beff8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bf000:	9721 000b 9747 000b 9705 000b b427 000b     !...G.......'...

000bf010 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bf018:	9b7d 000b 9b95 000b a2d5 000b 40d1 000b     }............@..

000bf028 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bf030:	9ba9 000b 9bbd 000b a479 000b 970d 000b     ........y.......

000bf040 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bf048:	971f 000b 9755 000b a239 000b 970f 000b     ....U...9.......

000bf058 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bf060:	971d 000b 9763 000b 9ae5 000b 9785 000b     ....c...........
   bf070:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   bf080:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000bf08c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bf094:	a8e5 000b a8eb 000b a929 000b a8f9 000b     ........).......
   bf0a4:	a8e7 000b                                   ....

000bf0a8 <_ZTV9IPAddress>:
	...
   bf0b0:	ae25 000b ae15 000b ae17 000b               %...........

000bf0bc <_ZTV9USBSerial>:
	...
   bf0c4:	af0b 000b af73 000b af49 000b 9575 000b     ....s...I...u...
   bf0d4:	af3b 000b af0d 000b af1d 000b af6d 000b     ;...........m...
   bf0e4:	af2d 000b af05 000b                         -.......

000bf0ec <_ZTVN5spark13CellularClassE>:
	...
   bf0f4:	b07b 000b b071 000b b067 000b b01d 000b     {...q...g.......
   bf104:	b05b 000b b04f 000b b2d3 000b b2db 000b     [...O...........
   bf114:	b043 000b b03b 000b b031 000b b027 000b     C...;...1...'...
   bf124:	b30b 000b                                   ....

000bf128 <_ZTV11USARTSerial>:
	...
   bf130:	b0b5 000b b121 000b b0f9 000b 9575 000b     ....!.......u...
   bf140:	b0c9 000b b0e5 000b b0d7 000b b0f3 000b     ................
   bf150:	b0b7 000b b0bb 000b                         ........

000bf158 <_ZTV7TwoWire>:
	...
   bf160:	b195 000b b1df 000b b1b7 000b b197 000b     ................
   bf170:	b1bf 000b b1c7 000b b1cf 000b b1d7 000b     ................

000bf180 <_ZTVN5spark12NetworkClassE>:
	...
   bf188:	b293 000b b29d 000b b2a7 000b b2b1 000b     ................
   bf198:	b2bb 000b b2c7 000b b2d3 000b b2db 000b     ................
   bf1a8:	b2e3 000b b2ef 000b b2f7 000b b301 000b     ................
   bf1b8:	b30b 000b 7525 7500 3025 7834                ....%u.u%04x.

000bf1c5 <_ZSt7nothrow>:
	...

000bf1c6 <_ZTSSt19_Sp_make_shared_tag>:
   bf1c6:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   bf1d6:	6572 5f64 6174 0067 0000                    red_tag...

000bf1e0 <_ZTISt19_Sp_make_shared_tag>:
   bf1e0:	f220 000b f1c6 000b                          .......

000bf1e8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bf1e8:	f280 000b f1f4 000b f2a4 000b               ............

000bf1f4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   bf1f4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   bf204:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bf214:	0045 0000                                   E...

000bf218 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bf218:	0000 0000 f1e8 000b b9cd 000b b9e1 000b     ................
   bf228:	bb75 000b bb75 000b ba4b 000b b98d 000b     u...u...K.......
   bf238:	ba33 000b b9f5 000b b9bf 000b               3...........

000bf244 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bf244:	f280 000b f250 000b f1e8 000b               ....P.......

000bf250 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bf250:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bf260:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bf270:	666e 456f 0000 0000                         nfoE....

000bf278 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bf278:	0000 0000 f244 000b ba75 000b ba89 000b     ....D...u.......
   bf288:	bb75 000b bb75 000b ba4b 000b b98d 000b     u...u...K.......
   bf298:	bb49 000b bad5 000b ba9d 000b               I...........

000bf2a4 <_ZTISt9type_info>:
   bf2a4:	f220 000b f2ac 000b                          .......

000bf2ac <_ZTSSt9type_info>:
   bf2ac:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bf2bc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bf2cc:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   bf2dc:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bf2ec:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bf2fc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bf30c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bf31c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bf32c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bf33c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bf34c:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000bf35c <fpi.1>:
   bf35c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   bf36c:	0000 0000                                   ....

000bf370 <fpinan.0>:
   bf370:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000bf388 <tinytens>:
   bf388:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   bf398:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   bf3a8:	6f43 64ac 0628 1168                         Co.d(.h.

000bf3b0 <_ctype_>:
   bf3b0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf3c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf3d0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf3e0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf3f0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf400:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf410:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf420:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf430:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bf4b0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bf4c0:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   bf4d0:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   bf4e0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   bf4f0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   bf500:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   bf510:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   bf520:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   bf530:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   bf540:	6874 7865 632e 0000                         thex.c..

000bf548 <_C_numeric_locale>:
   bf548:	ea6f 000b efe0 000b dc90 2003 0043 4f50     o.......... C.PO
   bf558:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   bf568:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   bf578:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   bf588:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bf598:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bf5a8:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   bf5b8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bf5c8:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   bf5d8:	0063 0000 0000 0000                         c.......

000bf5e0 <__mprec_bigtens>:
   bf5e0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   bf5f0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   bf600:	bf3c 7f73 4fdd 7515                         <.s..O.u

000bf608 <__mprec_tens>:
   bf608:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   bf618:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   bf628:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   bf638:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bf648:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bf658:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bf668:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bf678:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bf688:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bf698:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bf6a8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bf6b8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bf6c8:	9db4 79d9 7843 44ea                         ...yCx.D

000bf6d0 <p05.0>:
   bf6d0:	0005 0000 0019 0000 007d 0000               ........}...

000bf6dc <link_const_variable_data_end>:
   bf6dc:	000b58ad 	.word	0x000b58ad
   bf6e0:	000b7cc1 	.word	0x000b7cc1
   bf6e4:	000b8031 	.word	0x000b8031
   bf6e8:	000b9565 	.word	0x000b9565
   bf6ec:	000ba2c5 	.word	0x000ba2c5
   bf6f0:	000ba76d 	.word	0x000ba76d
   bf6f4:	000ba7a1 	.word	0x000ba7a1
   bf6f8:	000bb085 	.word	0x000bb085
   bf6fc:	000bb3e5 	.word	0x000bb3e5
