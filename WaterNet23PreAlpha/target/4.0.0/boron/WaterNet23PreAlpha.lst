
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23PreAlpha/target/4.0.0/boron/WaterNet23PreAlpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014a00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c8a20  000c8a20  00018a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c8a44  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  2003db28  000c8a48  0002db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ac8  2003dd28  2003dd28  0003dd28  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c8c48  000c8c48  00038c48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c8c70  000c8c70  00038c70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0022dfb8  00000000  00000000  00038c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00020f79  00000000  00000000  00266c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00071292  00000000  00000000  00287ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004f88  00000000  00000000  002f8e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00011560  00000000  00000000  002fddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004f626  00000000  00000000  0030f31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00086c71  00000000  00000000  0035e945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c15c  00000000  00000000  003e55b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000fd9c  00000000  00000000  00541714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f010 fa79 	bl	c4528 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f010 fa9b 	bl	c4578 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db28 	.word	0x2003db28
   b404c:	000c8a48 	.word	0x000c8a48
   b4050:	2003dd28 	.word	0x2003dd28
   b4054:	2003dd28 	.word	0x2003dd28
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c ff69 	bl	c0f38 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c89fc 	.word	0x000c89fc
   b4080:	000c8a20 	.word	0x000c8a20

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bea6 	b.w	b4dd4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f002 fac7 	bl	b661c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c bf09 	b.w	c0ea8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f00a b8f5 	b.w	be284 <malloc>

000b409a <_Znaj>:
   b409a:	f00a b8f3 	b.w	be284 <malloc>

000b409e <_ZdaPv>:
   b409e:	f00a b8f9 	b.w	be294 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f00a b8f7 	b.w	be294 <free>
	...

000b40a8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40aa:	4a03      	ldr	r2, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x10>)
   b40ac:	4903      	ldr	r1, [pc, #12]	; (b40bc <__cxa_pure_virtual+0x14>)
   b40ae:	200c      	movs	r0, #12
   b40b0:	f009 ffda 	bl	be068 <panic_>
  while (1);
   b40b4:	e7fe      	b.n	b40b4 <__cxa_pure_virtual+0xc>
   b40b6:	bf00      	nop
   b40b8:	000bdba5 	.word	0x000bdba5
   b40bc:	000c66d8 	.word	0x000c66d8

000b40c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c0:	7800      	ldrb	r0, [r0, #0]
   b40c2:	fab0 f080 	clz	r0, r0
   b40c6:	0940      	lsrs	r0, r0, #5
   b40c8:	4770      	bx	lr

000b40ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ca:	2301      	movs	r3, #1
   b40cc:	7003      	strb	r3, [r0, #0]
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40d0:	4770      	bx	lr

000b40d2 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40d2:	4770      	bx	lr

000b40d4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40d4:	6a00      	ldr	r0, [r0, #32]
   b40d6:	6803      	ldr	r3, [r0, #0]
   b40d8:	68db      	ldr	r3, [r3, #12]
   b40da:	4718      	bx	r3

000b40dc <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40dc:	4770      	bx	lr

000b40de <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40de:	7c03      	ldrb	r3, [r0, #16]
   b40e0:	f013 0308 	ands.w	r3, r3, #8
   b40e4:	bf1e      	ittt	ne
   b40e6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40e8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40ea:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40ec:	2b00      	cmp	r3, #0
  }
   b40ee:	bfac      	ite	ge
   b40f0:	4618      	movge	r0, r3
   b40f2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40f6:	4770      	bx	lr

000b40f8 <_Z13StatusHandlerv>:

//ISR Function to calculate bitmasked status number and signal to the main loop that the status is ready
void StatusHandler(){
    statusFlags = 0;                    //Reset status flags to 0, then add up the individual flags
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b40f8:	4b15      	ldr	r3, [pc, #84]	; (b4150 <_Z13StatusHandlerv+0x58>)
   b40fa:	781a      	ldrb	r2, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b40fc:	4b15      	ldr	r3, [pc, #84]	; (b4154 <_Z13StatusHandlerv+0x5c>)
   b40fe:	781b      	ldrb	r3, [r3, #0]
   b4100:	009b      	lsls	r3, r3, #2
   b4102:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    statusFlags = LTEAvail;             //Bit 0 indicates LTE is available
   b4106:	4b14      	ldr	r3, [pc, #80]	; (b4158 <_Z13StatusHandlerv+0x60>)
    statusFlags |= XBeeAvail << 1;      //Bit 1 indicates XBee is available
   b4108:	781b      	ldrb	r3, [r3, #0]
    statusFlags |= BLEAvail << 2;       //Bit 2 indicates BLE is available
   b410a:	4313      	orrs	r3, r2
    statusFlags |= offloadMode << 3;    //Bit 3 indicates bot is currently offloading
   b410c:	4a13      	ldr	r2, [pc, #76]	; (b415c <_Z13StatusHandlerv+0x64>)
   b410e:	7812      	ldrb	r2, [r2, #0]
   b4110:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    statusFlags |= driveMode << 4;      //Bit 4 indicates the current drive mode
   b4114:	4a12      	ldr	r2, [pc, #72]	; (b4160 <_Z13StatusHandlerv+0x68>)
   b4116:	7812      	ldrb	r2, [r2, #0]
   b4118:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    statusFlags |= lowBattery << 6;     //Bit 6 indicates that the battery is low
   b411c:	4a11      	ldr	r2, [pc, #68]	; (b4164 <_Z13StatusHandlerv+0x6c>)
   b411e:	7812      	ldrb	r2, [r2, #0]
   b4120:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    statusFlags |= logSensors << 7;     //Bit 7 indicates that the Atlas sensors are being logged to the SD card
   b4124:	4a10      	ldr	r2, [pc, #64]	; (b4168 <_Z13StatusHandlerv+0x70>)
   b4126:	7812      	ldrb	r2, [r2, #0]
   b4128:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    statusFlags |= GPSAvail << 8;       //Bit 8 indicates neo-m8u GPS is available and receiving non-null data
   b412c:	4a0f      	ldr	r2, [pc, #60]	; (b416c <_Z13StatusHandlerv+0x74>)
   b412e:	7812      	ldrb	r2, [r2, #0]
   b4130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    statusFlags |= CompassAvail << 9;   //Bit 9 indicates the LIS3MDL compass is connected and providing dat
   b4134:	4a0e      	ldr	r2, [pc, #56]	; (b4170 <_Z13StatusHandlerv+0x78>)
   b4136:	7812      	ldrb	r2, [r2, #0]
   b4138:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    statusFlags |= SDAvail << 10;       //Bit 10 indicates the SD card is functional and can record data
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z13StatusHandlerv+0x7c>)
   b413e:	7812      	ldrb	r2, [r2, #0]
   b4140:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   b4144:	4a0c      	ldr	r2, [pc, #48]	; (b4178 <_Z13StatusHandlerv+0x80>)
   b4146:	8013      	strh	r3, [r2, #0]
    statusReady = true;                 //Set flag true, so the main loop will transmit out status to CChub
   b4148:	4b0c      	ldr	r3, [pc, #48]	; (b417c <_Z13StatusHandlerv+0x84>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
    //Serial.println("Sending a status update!");
}
   b414e:	4770      	bx	lr
   b4150:	2003dd7c 	.word	0x2003dd7c
   b4154:	2003dd34 	.word	0x2003dd34
   b4158:	2003dd69 	.word	0x2003dd69
   b415c:	2003e0b0 	.word	0x2003e0b0
   b4160:	2003ddb1 	.word	0x2003ddb1
   b4164:	2003dedc 	.word	0x2003dedc
   b4168:	2003ded5 	.word	0x2003ded5
   b416c:	2003dd68 	.word	0x2003dd68
   b4170:	2003dd44 	.word	0x2003dd44
   b4174:	2003dd6c 	.word	0x2003dd6c
   b4178:	2003e5a8 	.word	0x2003e5a8
   b417c:	2003e5c8 	.word	0x2003e5c8

000b4180 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b4180:	4770      	bx	lr

000b4182 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4182:	b510      	push	{r4, lr}
  }
   b4184:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4186:	4604      	mov	r4, r0
  }
   b4188:	f7ff ff8b 	bl	b40a2 <_ZdlPvj>
   b418c:	4620      	mov	r0, r4
   b418e:	bd10      	pop	{r4, pc}

000b4190 <_ZN4FileD0Ev>:
   b4190:	b510      	push	{r4, lr}
   b4192:	2134      	movs	r1, #52	; 0x34
   b4194:	4604      	mov	r4, r0
   b4196:	f7ff ff84 	bl	b40a2 <_ZdlPvj>
   b419a:	4620      	mov	r0, r4
   b419c:	bd10      	pop	{r4, pc}

000b419e <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b419e:	6943      	ldr	r3, [r0, #20]
   b41a0:	b113      	cbz	r3, b41a8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41a2:	6983      	ldr	r3, [r0, #24]
   b41a4:	300c      	adds	r0, #12
   b41a6:	4718      	bx	r3
            callback();
        }
    }
   b41a8:	4770      	bx	lr

000b41aa <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41aa:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41ac:	2100      	movs	r1, #0
   b41ae:	4604      	mov	r4, r0
   b41b0:	4608      	mov	r0, r1
   b41b2:	f009 fda9 	bl	bdd08 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41b6:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b41b8:	4620      	mov	r0, r4
   b41ba:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b41bc:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b41be:	f009 fdbb 	bl	bdd38 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b41c2:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b41c4:	b10c      	cbz	r4, b41ca <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b41c6:	2301      	movs	r3, #1
   b41c8:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b41ca:	2100      	movs	r1, #0
   b41cc:	2001      	movs	r0, #1
   b41ce:	f009 fd9b 	bl	bdd08 <os_thread_scheduling>
            }
        }
        if (t) {
   b41d2:	b12c      	cbz	r4, b41e0 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b41d4:	6823      	ldr	r3, [r4, #0]
   b41d6:	4620      	mov	r0, r4
   b41d8:	689b      	ldr	r3, [r3, #8]
   b41da:	4798      	blx	r3
            t->running = false;
   b41dc:	2300      	movs	r3, #0
   b41de:	7123      	strb	r3, [r4, #4]
        }
    }
   b41e0:	b002      	add	sp, #8
   b41e2:	bd10      	pop	{r4, pc}

000b41e4 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b41e4:	3010      	adds	r0, #16
   b41e6:	f003 ba69 	b.w	b76bc <_ZN7FatFile4syncEv>

000b41ea <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41ea:	3010      	adds	r0, #16
   b41ec:	f003 b94a 	b.w	b7484 <_ZN7FatFile4peekEv>

000b41f0 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41f0:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41f2:	2201      	movs	r2, #1
   b41f4:	f10d 0107 	add.w	r1, sp, #7
   b41f8:	3010      	adds	r0, #16
   b41fa:	f003 f895 	bl	b7328 <_ZN7FatFile4readEPvj>
   b41fe:	2801      	cmp	r0, #1
   b4200:	bf0c      	ite	eq
   b4202:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b4206:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b420a:	b003      	add	sp, #12
   b420c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4210 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4210:	3010      	adds	r0, #16
   b4212:	f003 badd 	b.w	b77d0 <_ZN7FatFile5writeEPKvj>

000b4216 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b4216:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4218:	2201      	movs	r2, #1
   b421a:	f88d 1007 	strb.w	r1, [sp, #7]
   b421e:	3010      	adds	r0, #16
   b4220:	f10d 0107 	add.w	r1, sp, #7
   b4224:	f003 fad4 	bl	b77d0 <_ZN7FatFile5writeEPKvj>
  }
   b4228:	b003      	add	sp, #12
   b422a:	f85d fb04 	ldr.w	pc, [sp], #4

000b422e <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b422e:	2a01      	cmp	r2, #1
   b4230:	d102      	bne.n	b4238 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4232:	6001      	str	r1, [r0, #0]
      }
   b4234:	2000      	movs	r0, #0
   b4236:	4770      	bx	lr
	  switch (__op)
   b4238:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b423a:	bf04      	itt	eq
   b423c:	680b      	ldreq	r3, [r1, #0]
   b423e:	6003      	streq	r3, [r0, #0]
	      break;
   b4240:	e7f8      	b.n	b4234 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4242 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4242:	6803      	ldr	r3, [r0, #0]
   b4244:	4718      	bx	r3

000b4246 <_ZN5Timer5_stopEjb.isra.0>:
    bool _stop(unsigned block, bool fromISR=false)
   b4246:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4248:	6880      	ldr	r0, [r0, #8]
   b424a:	b128      	cbz	r0, b4258 <_ZN5Timer5_stopEjb.isra.0+0x12>
   b424c:	2300      	movs	r3, #0
   b424e:	e9cd 1300 	strd	r1, r3, [sp]
   b4252:	2102      	movs	r1, #2
   b4254:	f009 fd78 	bl	bdd48 <os_timer_change>
    }
   b4258:	b003      	add	sp, #12
   b425a:	f85d fb04 	ldr.w	pc, [sp], #4

000b425e <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	b2c9      	uxtb	r1, r1
   b4262:	689b      	ldr	r3, [r3, #8]
   b4264:	4718      	bx	r3
	...

000b4268 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4268:	b510      	push	{r4, lr}
   b426a:	4b05      	ldr	r3, [pc, #20]	; (b4280 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b426c:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b426e:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4270:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4272:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4276:	f009 ff17 	bl	be0a8 <led_set_status_active>
}
   b427a:	4620      	mov	r0, r4
   b427c:	bd10      	pop	{r4, pc}
   b427e:	bf00      	nop
   b4280:	000c6d7c 	.word	0x000c6d7c

000b4284 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4284:	b510      	push	{r4, lr}
   b4286:	4604      	mov	r4, r0
}
   b4288:	f7ff ffee 	bl	b4268 <_ZN8particle9LEDStatusD1Ev>
   b428c:	4620      	mov	r0, r4
   b428e:	2120      	movs	r1, #32
   b4290:	f7ff ff07 	bl	b40a2 <_ZdlPvj>
   b4294:	4620      	mov	r0, r4
   b4296:	bd10      	pop	{r4, pc}

000b4298 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4298:	4b0a      	ldr	r3, [pc, #40]	; (b42c4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b429a:	b510      	push	{r4, lr}
   b429c:	4604      	mov	r4, r0
   b429e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b42a0:	f00b fee8 	bl	c0074 <_ZN5spark10LogManager8instanceEv>
   b42a4:	4621      	mov	r1, r4
   b42a6:	f00c f920 	bl	c04ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b42aa:	f00d fa0f 	bl	c16cc <_Z16_fetch_usbserialv>
   b42ae:	f00d fa01 	bl	c16b4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b42b2:	4620      	mov	r0, r4
   b42b4:	4b04      	ldr	r3, [pc, #16]	; (b42c8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b42b6:	f840 3b04 	str.w	r3, [r0], #4
   b42ba:	f00b ffb1 	bl	c0220 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b42be:	4620      	mov	r0, r4
   b42c0:	bd10      	pop	{r4, pc}
   b42c2:	bf00      	nop
   b42c4:	000c6d90 	.word	0x000c6d90
   b42c8:	000c6d64 	.word	0x000c6d64

000b42cc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b42cc:	b510      	push	{r4, lr}
   b42ce:	4604      	mov	r4, r0
    }
   b42d0:	f7ff ffe2 	bl	b4298 <_ZN5spark16SerialLogHandlerD1Ev>
   b42d4:	4620      	mov	r0, r4
   b42d6:	2124      	movs	r1, #36	; 0x24
   b42d8:	f7ff fee3 	bl	b40a2 <_ZdlPvj>
   b42dc:	4620      	mov	r0, r4
   b42de:	bd10      	pop	{r4, pc}

000b42e0 <_Z11buttonTimerv>:
    bool stopFromISR() { return _stop(0, true); }
   b42e0:	4802      	ldr	r0, [pc, #8]	; (b42ec <_Z11buttonTimerv+0xc>)
   b42e2:	2201      	movs	r2, #1
   b42e4:	2100      	movs	r1, #0
   b42e6:	f7ff bfae 	b.w	b4246 <_ZN5Timer5_stopEjb.isra.0>
   b42ea:	bf00      	nop
   b42ec:	2003e564 	.word	0x2003e564

000b42f0 <_ZN5Timer6_startEjb.isra.0>:
    bool _start(unsigned block, bool fromISR=false)
   b42f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42f2:	4606      	mov	r6, r0
   b42f4:	4614      	mov	r4, r2
   b42f6:	460d      	mov	r5, r1
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b42f8:	2200      	movs	r2, #0
   b42fa:	4621      	mov	r1, r4
   b42fc:	f7ff ffa3 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4300:	68b0      	ldr	r0, [r6, #8]
   b4302:	b130      	cbz	r0, b4312 <_ZN5Timer6_startEjb.isra.0+0x22>
   b4304:	2300      	movs	r3, #0
   b4306:	e9cd 5300 	strd	r5, r3, [sp]
   b430a:	4622      	mov	r2, r4
   b430c:	4619      	mov	r1, r3
   b430e:	f009 fd1b 	bl	bdd48 <os_timer_change>
    }
   b4312:	b002      	add	sp, #8
   b4314:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4318 <_Z13buttonHandlerv>:
    #endif
    shutdownTimer.stopFromISR();
}

//ISR triggered when button is pressed or released
void buttonHandler(){
   b4318:	b538      	push	{r3, r4, r5, lr}
    if(digitalRead(PWR_BUT)){               //If the interrupt was triggered by the button being pressed
   b431a:	2012      	movs	r0, #18
   b431c:	f00d fe5c 	bl	c1fd8 <digitalRead>
   b4320:	4d08      	ldr	r5, [pc, #32]	; (b4344 <_Z13buttonHandlerv+0x2c>)
   b4322:	4604      	mov	r4, r0
    bool startFromISR() { return _start(0, true); }
   b4324:	2201      	movs	r2, #1
   b4326:	b130      	cbz	r0, b4336 <_Z13buttonHandlerv+0x1e>
   b4328:	4807      	ldr	r0, [pc, #28]	; (b4348 <_Z13buttonHandlerv+0x30>)
   b432a:	2100      	movs	r1, #0
   b432c:	f7ff ffe0 	bl	b42f0 <_ZN5Timer6_startEjb.isra.0>
        shutdownTimer.startFromISR();       //Start the shutdown timer, which will check if the button has been held for long enough
        shutdownActive = true;              //Set flag to true to make LED flash and indicate shutdown initiate
   b4330:	2301      	movs	r3, #1
   b4332:	702b      	strb	r3, [r5, #0]
    }
    else{                                   //If the interrupt was triggered by the button being released
        shutdownTimer.stopFromISR();        //Stop the ISR which will shut off the bot
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
    }
}
   b4334:	bd38      	pop	{r3, r4, r5, pc}
    bool stopFromISR() { return _stop(0, true); }
   b4336:	4601      	mov	r1, r0
   b4338:	4803      	ldr	r0, [pc, #12]	; (b4348 <_Z13buttonHandlerv+0x30>)
   b433a:	f7ff ff84 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
        shutdownActive = false;             //Clear shutdown flag to make LED stop blinking
   b433e:	702c      	strb	r4, [r5, #0]
}
   b4340:	e7f8      	b.n	b4334 <_Z13buttonHandlerv+0x1c>
   b4342:	bf00      	nop
   b4344:	2003e562 	.word	0x2003e562
   b4348:	2003e564 	.word	0x2003e564

000b434c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b434c:	b40e      	push	{r1, r2, r3}
   b434e:	b503      	push	{r0, r1, lr}
   b4350:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4352:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4354:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4358:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b435a:	f00b fcb8 	bl	bfcce <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b435e:	b002      	add	sp, #8
   b4360:	f85d eb04 	ldr.w	lr, [sp], #4
   b4364:	b003      	add	sp, #12
   b4366:	4770      	bx	lr

000b4368 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4368:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b436a:	4604      	mov	r4, r0
   b436c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b436e:	7922      	ldrb	r2, [r4, #4]
   b4370:	68a3      	ldr	r3, [r4, #8]
   b4372:	b132      	cbz	r2, b4382 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4374:	b9a3      	cbnz	r3, b43a0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4376:	490b      	ldr	r1, [pc, #44]	; (b43a4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4378:	b002      	add	sp, #8
   b437a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b437e:	f00b bc65 	b.w	bfc4c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4382:	4a09      	ldr	r2, [pc, #36]	; (b43a8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4384:	7b26      	ldrb	r6, [r4, #12]
   b4386:	4d09      	ldr	r5, [pc, #36]	; (b43ac <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4388:	4909      	ldr	r1, [pc, #36]	; (b43b0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b438a:	7b64      	ldrb	r4, [r4, #13]
   b438c:	2e01      	cmp	r6, #1
   b438e:	bf18      	it	ne
   b4390:	4629      	movne	r1, r5
   b4392:	e9cd 1400 	strd	r1, r4, [sp]
   b4396:	4907      	ldr	r1, [pc, #28]	; (b43b4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4398:	f7ff ffd8 	bl	b434c <_ZN5Print6printfEPKcz>
  }
   b439c:	b002      	add	sp, #8
   b439e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b43a0:	4a05      	ldr	r2, [pc, #20]	; (b43b8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b43a2:	e7ef      	b.n	b4384 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b43a4:	000c66fe 	.word	0x000c66fe
   b43a8:	000c7e94 	.word	0x000c7e94
   b43ac:	000c66fa 	.word	0x000c66fa
   b43b0:	000c66f6 	.word	0x000c66f6
   b43b4:	000c6714 	.word	0x000c6714
   b43b8:	000c66ed 	.word	0x000c66ed

000b43bc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43bc:	b40e      	push	{r1, r2, r3}
   b43be:	b503      	push	{r0, r1, lr}
   b43c0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43c2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43c4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43c8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43ca:	f00b fc80 	bl	bfcce <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43ce:	b002      	add	sp, #8
   b43d0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43d4:	b003      	add	sp, #12
   b43d6:	4770      	bx	lr

000b43d8 <_Z13motionHandlerv>:
void motionHandler(){
   b43d8:	b570      	push	{r4, r5, r6, lr}
    if(driveMode == 0 && setLSpeed != 90 && setRSpeed != 90 && millis() - lastMtrTime > MTR_TIMEOUT){
   b43da:	4d2b      	ldr	r5, [pc, #172]	; (b4488 <_Z13motionHandlerv+0xb0>)
   b43dc:	782b      	ldrb	r3, [r5, #0]
   b43de:	bb3b      	cbnz	r3, b4430 <_Z13motionHandlerv+0x58>
   b43e0:	4e2a      	ldr	r6, [pc, #168]	; (b448c <_Z13motionHandlerv+0xb4>)
   b43e2:	7833      	ldrb	r3, [r6, #0]
   b43e4:	2b5a      	cmp	r3, #90	; 0x5a
   b43e6:	d023      	beq.n	b4430 <_Z13motionHandlerv+0x58>
   b43e8:	4c29      	ldr	r4, [pc, #164]	; (b4490 <_Z13motionHandlerv+0xb8>)
   b43ea:	7823      	ldrb	r3, [r4, #0]
   b43ec:	2b5a      	cmp	r3, #90	; 0x5a
   b43ee:	d01f      	beq.n	b4430 <_Z13motionHandlerv+0x58>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43f0:	f009 fbe8 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b43f4:	4b27      	ldr	r3, [pc, #156]	; (b4494 <_Z13motionHandlerv+0xbc>)
   b43f6:	681b      	ldr	r3, [r3, #0]
   b43f8:	1ac0      	subs	r0, r0, r3
   b43fa:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b43fe:	d917      	bls.n	b4430 <_Z13motionHandlerv+0x58>
        leftMotorSpeed = 90;
   b4400:	4b25      	ldr	r3, [pc, #148]	; (b4498 <_Z13motionHandlerv+0xc0>)
        ESCL.write(setLSpeed);
   b4402:	4826      	ldr	r0, [pc, #152]	; (b449c <_Z13motionHandlerv+0xc4>)
        setLSpeed = 90;
   b4404:	215a      	movs	r1, #90	; 0x5a
        leftMotorSpeed = 90;
   b4406:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b4408:	4b25      	ldr	r3, [pc, #148]	; (b44a0 <_Z13motionHandlerv+0xc8>)
        setLSpeed = 90;
   b440a:	7031      	strb	r1, [r6, #0]
        rightMotorSpeed = 90;
   b440c:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b440e:	4b25      	ldr	r3, [pc, #148]	; (b44a4 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4410:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4412:	2201      	movs	r2, #1
   b4414:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b4416:	f00a f8d9 	bl	be5cc <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b441a:	7821      	ldrb	r1, [r4, #0]
   b441c:	4822      	ldr	r0, [pc, #136]	; (b44a8 <_Z13motionHandlerv+0xd0>)
   b441e:	f00a f8d5 	bl	be5cc <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, motor command has not been received in over %dms, cutting motors", MTR_TIMEOUT);
   b4422:	f00d f953 	bl	c16cc <_Z16_fetch_usbserialv>
   b4426:	4921      	ldr	r1, [pc, #132]	; (b44ac <_Z13motionHandlerv+0xd4>)
   b4428:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b442c:	f7ff ffc6 	bl	b43bc <_ZN5Print8printlnfEPKcz>
    if(!telemetryAvail && driveMode != 0 && millis() - lastTelemTime > MTR_TIMEOUT){
   b4430:	4e1f      	ldr	r6, [pc, #124]	; (b44b0 <_Z13motionHandlerv+0xd8>)
   b4432:	7834      	ldrb	r4, [r6, #0]
   b4434:	bb3c      	cbnz	r4, b4486 <_Z13motionHandlerv+0xae>
   b4436:	782b      	ldrb	r3, [r5, #0]
   b4438:	b32b      	cbz	r3, b4486 <_Z13motionHandlerv+0xae>
   b443a:	f009 fbc3 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b443e:	4b1d      	ldr	r3, [pc, #116]	; (b44b4 <_Z13motionHandlerv+0xdc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	1ac0      	subs	r0, r0, r3
   b4444:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
   b4448:	d91d      	bls.n	b4486 <_Z13motionHandlerv+0xae>
        pointArrived = false;
   b444a:	4b1b      	ldr	r3, [pc, #108]	; (b44b8 <_Z13motionHandlerv+0xe0>)
        driveMode = 0;
   b444c:	702c      	strb	r4, [r5, #0]
        pointArrived = false;
   b444e:	701c      	strb	r4, [r3, #0]
        setLSpeed = 90;
   b4450:	4b0e      	ldr	r3, [pc, #56]	; (b448c <_Z13motionHandlerv+0xb4>)
        telemetryAvail = false;
   b4452:	7034      	strb	r4, [r6, #0]
        setLSpeed = 90;
   b4454:	215a      	movs	r1, #90	; 0x5a
   b4456:	7019      	strb	r1, [r3, #0]
        leftMotorSpeed = 90;
   b4458:	4b0f      	ldr	r3, [pc, #60]	; (b4498 <_Z13motionHandlerv+0xc0>)
        setRSpeed = 90;
   b445a:	4c0d      	ldr	r4, [pc, #52]	; (b4490 <_Z13motionHandlerv+0xb8>)
        leftMotorSpeed = 90;
   b445c:	7019      	strb	r1, [r3, #0]
        rightMotorSpeed = 90;
   b445e:	4b10      	ldr	r3, [pc, #64]	; (b44a0 <_Z13motionHandlerv+0xc8>)
        ESCL.write(setLSpeed);
   b4460:	480e      	ldr	r0, [pc, #56]	; (b449c <_Z13motionHandlerv+0xc4>)
        rightMotorSpeed = 90;
   b4462:	7019      	strb	r1, [r3, #0]
        updateMotorControl = true;
   b4464:	4b0f      	ldr	r3, [pc, #60]	; (b44a4 <_Z13motionHandlerv+0xcc>)
        setRSpeed = 90;
   b4466:	7021      	strb	r1, [r4, #0]
        updateMotorControl = true;
   b4468:	2201      	movs	r2, #1
   b446a:	701a      	strb	r2, [r3, #0]
        ESCL.write(setLSpeed);
   b446c:	f00a f8ae 	bl	be5cc <_ZN5Servo5writeEi>
        ESCR.write(setRSpeed);
   b4470:	7821      	ldrb	r1, [r4, #0]
   b4472:	480d      	ldr	r0, [pc, #52]	; (b44a8 <_Z13motionHandlerv+0xd0>)
   b4474:	f00a f8aa 	bl	be5cc <_ZN5Servo5writeEi>
        Serial.printlnf("Warning, GPS or Compass data not available for greater than %dms, exiting autonomous mode", MTR_TIMEOUT);
   b4478:	f00d f928 	bl	c16cc <_Z16_fetch_usbserialv>
   b447c:	490f      	ldr	r1, [pc, #60]	; (b44bc <_Z13motionHandlerv+0xe4>)
   b447e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   b4482:	f7ff ff9b 	bl	b43bc <_ZN5Print8printlnfEPKcz>
}
   b4486:	bd70      	pop	{r4, r5, r6, pc}
   b4488:	2003ddb1 	.word	0x2003ddb1
   b448c:	2003e560 	.word	0x2003e560
   b4490:	2003e561 	.word	0x2003e561
   b4494:	2003ddf0 	.word	0x2003ddf0
   b4498:	2003de1c 	.word	0x2003de1c
   b449c:	2003dd48 	.word	0x2003dd48
   b44a0:	2003e0b9 	.word	0x2003e0b9
   b44a4:	2003e5ec 	.word	0x2003e5ec
   b44a8:	2003dd58 	.word	0x2003dd58
   b44ac:	000c6731 	.word	0x000c6731
   b44b0:	2003e5d8 	.word	0x2003e5d8
   b44b4:	2003ddf8 	.word	0x2003ddf8
   b44b8:	2003e0b1 	.word	0x2003e0b1
   b44bc:	000c677b 	.word	0x000c677b

000b44c0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b44c0:	b510      	push	{r4, lr}
      if (_M_manager)
   b44c2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b44c4:	4604      	mov	r4, r0
      if (_M_manager)
   b44c6:	b113      	cbz	r3, b44ce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b44c8:	2203      	movs	r2, #3
   b44ca:	4601      	mov	r1, r0
   b44cc:	4798      	blx	r3
    }
   b44ce:	4620      	mov	r0, r4
   b44d0:	bd10      	pop	{r4, pc}
	...

000b44d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b44d4:	b538      	push	{r3, r4, r5, lr}
   b44d6:	4b10      	ldr	r3, [pc, #64]	; (b4518 <_ZN5TimerD1Ev+0x44>)
   b44d8:	6003      	str	r3, [r0, #0]
        if (handle) {
   b44da:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b44dc:	4604      	mov	r4, r0
        if (handle) {
   b44de:	b1a3      	cbz	r3, b450a <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b44e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b44e4:	2200      	movs	r2, #0
   b44e6:	f7ff feae 	bl	b4246 <_ZN5Timer5_stopEjb.isra.0>
            os_timer_set_id(handle, nullptr);
   b44ea:	68a0      	ldr	r0, [r4, #8]
   b44ec:	2100      	movs	r1, #0
   b44ee:	f009 fc53 	bl	bdd98 <os_timer_set_id>
            while (running) {
   b44f2:	7923      	ldrb	r3, [r4, #4]
   b44f4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b44f8:	b113      	cbz	r3, b4500 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   b44fa:	f009 fbfd 	bl	bdcf8 <os_thread_yield>
            while (running) {
   b44fe:	e7f8      	b.n	b44f2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   b4500:	68a0      	ldr	r0, [r4, #8]
   b4502:	4629      	mov	r1, r5
   b4504:	f009 fc10 	bl	bdd28 <os_timer_destroy>
            handle = nullptr;
   b4508:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b450a:	f104 000c 	add.w	r0, r4, #12
   b450e:	f7ff ffd7 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
    }
   b4512:	4620      	mov	r0, r4
   b4514:	bd38      	pop	{r3, r4, r5, pc}
   b4516:	bf00      	nop
   b4518:	000c6d50 	.word	0x000c6d50

000b451c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b451c:	b510      	push	{r4, lr}
   b451e:	4604      	mov	r4, r0
    }
   b4520:	f7ff ffd8 	bl	b44d4 <_ZN5TimerD1Ev>
   b4524:	4620      	mov	r0, r4
   b4526:	211c      	movs	r1, #28
   b4528:	f7ff fdbb 	bl	b40a2 <_ZdlPvj>
   b452c:	4620      	mov	r0, r4
   b452e:	bd10      	pop	{r4, pc}

000b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4530:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4532:	468c      	mov	ip, r1
   b4534:	2500      	movs	r5, #0
   b4536:	4914      	ldr	r1, [pc, #80]	; (b4588 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4538:	7105      	strb	r5, [r0, #4]
   b453a:	4604      	mov	r4, r0
   b453c:	6085      	str	r5, [r0, #8]
   b453e:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4540:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4544:	b085      	sub	sp, #20
   b4546:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4548:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b454c:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4550:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4554:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4558:	e897 0003 	ldmia.w	r7, {r0, r1}
   b455c:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4560:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4562:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4564:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4566:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4568:	6095      	str	r5, [r2, #8]
   b456a:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b456c:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b456e:	e9cd 3500 	strd	r3, r5, [sp]
   b4572:	4a06      	ldr	r2, [pc, #24]	; (b458c <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4574:	4623      	mov	r3, r4
   b4576:	4661      	mov	r1, ip
   b4578:	f104 0008 	add.w	r0, r4, #8
   b457c:	f009 fbcc 	bl	bdd18 <os_timer_create>
    }
   b4580:	4620      	mov	r0, r4
   b4582:	b005      	add	sp, #20
   b4584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4586:	bf00      	nop
   b4588:	000c6d50 	.word	0x000c6d50
   b458c:	000b41ab 	.word	0x000b41ab

000b4590 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>:
inline void particle::LEDStatus::setSpeed(LEDSpeed speed) {
   b4590:	b510      	push	{r4, lr}
   b4592:	4604      	mov	r4, r0
    setPeriod(led_pattern_period(d_.pattern, speed, nullptr));
   b4594:	2200      	movs	r2, #0
   b4596:	7c40      	ldrb	r0, [r0, #17]
   b4598:	f009 fdc0 	bl	be11c <led_pattern_period>
    if (d_.pattern != LED_PATTERN_CUSTOM) {
   b459c:	7c63      	ldrb	r3, [r4, #17]
   b459e:	2b0f      	cmp	r3, #15
        d_.period = period;
   b45a0:	bf18      	it	ne
   b45a2:	8320      	strhne	r0, [r4, #24]
}
   b45a4:	bd10      	pop	{r4, pc}
	...

000b45a8 <_Z10LEDHandlerv>:

//ISR timer to update the color and pattern of the LED based on the status of the system
void LEDHandler(){
   b45a8:	b510      	push	{r4, lr}
    uint32_t SetColor;
    LEDPattern SetPattern;
    LEDSpeed SetSpeed;
    uint8_t statusMode;
    //Special LED Modes
    if(shutdownActive){     //The user is holding down the power off button
   b45aa:	4b2e      	ldr	r3, [pc, #184]	; (b4664 <_Z10LEDHandlerv+0xbc>)
   b45ac:	781a      	ldrb	r2, [r3, #0]
   b45ae:	4b2e      	ldr	r3, [pc, #184]	; (b4668 <_Z10LEDHandlerv+0xc0>)
   b45b0:	b162      	cbz	r2, b45cc <_Z10LEDHandlerv+0x24>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45b2:	7c5a      	ldrb	r2, [r3, #17]
   b45b4:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45b6:	bf1c      	itt	ne
   b45b8:	2202      	movne	r2, #2
   b45ba:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45bc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b45c0:	615a      	str	r2, [r3, #20]
        return;                
    }
    if(signalLED){          //The user has enabled the "Signal" menu item
        status.setPattern(LED_PATTERN_BLINK);
        status.setColor(RGB_COLOR_ORANGE);
        status.setSpeed(LED_SPEED_FAST);
   b45c2:	211e      	movs	r1, #30
    default:
        break;
    }
    status.setPattern(SetPattern);
    status.setColor(SetColor);
    status.setSpeed(SetSpeed);    
   b45c4:	4828      	ldr	r0, [pc, #160]	; (b4668 <_Z10LEDHandlerv+0xc0>)
   b45c6:	f7ff ffe3 	bl	b4590 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
}
   b45ca:	bd10      	pop	{r4, pc}
    if(stopActive){         //The user has pressed the stop button on the CChub
   b45cc:	4a27      	ldr	r2, [pc, #156]	; (b466c <_Z10LEDHandlerv+0xc4>)
   b45ce:	7812      	ldrb	r2, [r2, #0]
   b45d0:	b132      	cbz	r2, b45e0 <_Z10LEDHandlerv+0x38>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45d2:	7c5a      	ldrb	r2, [r3, #17]
   b45d4:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45d6:	bf1c      	itt	ne
   b45d8:	2202      	movne	r2, #2
   b45da:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45dc:	4a24      	ldr	r2, [pc, #144]	; (b4670 <_Z10LEDHandlerv+0xc8>)
   b45de:	e7ef      	b.n	b45c0 <_Z10LEDHandlerv+0x18>
    if(offloadMode){        //The CChub is offloading data over BLE
   b45e0:	4a24      	ldr	r2, [pc, #144]	; (b4674 <_Z10LEDHandlerv+0xcc>)
   b45e2:	7812      	ldrb	r2, [r2, #0]
   b45e4:	b132      	cbz	r2, b45f4 <_Z10LEDHandlerv+0x4c>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45e6:	7c5a      	ldrb	r2, [r3, #17]
   b45e8:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45ea:	bf1c      	itt	ne
   b45ec:	2202      	movne	r2, #2
   b45ee:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b45f0:	22ff      	movs	r2, #255	; 0xff
   b45f2:	e7e5      	b.n	b45c0 <_Z10LEDHandlerv+0x18>
    if(signalLED){          //The user has enabled the "Signal" menu item
   b45f4:	4a20      	ldr	r2, [pc, #128]	; (b4678 <_Z10LEDHandlerv+0xd0>)
   b45f6:	7812      	ldrb	r2, [r2, #0]
   b45f8:	b132      	cbz	r2, b4608 <_Z10LEDHandlerv+0x60>
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b45fa:	7c5a      	ldrb	r2, [r3, #17]
   b45fc:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b45fe:	bf1c      	itt	ne
   b4600:	2202      	movne	r2, #2
   b4602:	745a      	strbne	r2, [r3, #17]
    d_.color = color;
   b4604:	4a1d      	ldr	r2, [pc, #116]	; (b467c <_Z10LEDHandlerv+0xd4>)
   b4606:	e7db      	b.n	b45c0 <_Z10LEDHandlerv+0x18>
    if(lowBattery){     //Flash the status color quickly if the battery is low
   b4608:	4a1d      	ldr	r2, [pc, #116]	; (b4680 <_Z10LEDHandlerv+0xd8>)
   b460a:	7812      	ldrb	r2, [r2, #0]
   b460c:	bb1a      	cbnz	r2, b4656 <_Z10LEDHandlerv+0xae>
    else if(driveMode == 2){    //If we're in autonomous mode, do a fade pattern
   b460e:	4a1d      	ldr	r2, [pc, #116]	; (b4684 <_Z10LEDHandlerv+0xdc>)
   b4610:	7812      	ldrb	r2, [r2, #0]
   b4612:	2a02      	cmp	r2, #2
   b4614:	d022      	beq.n	b465c <_Z10LEDHandlerv+0xb4>
        SetSpeed = LED_SPEED_NORMAL;
   b4616:	2a01      	cmp	r2, #1
   b4618:	bf0b      	itete	eq
   b461a:	210a      	moveq	r1, #10
   b461c:	2114      	movne	r1, #20
   b461e:	2002      	moveq	r0, #2
   b4620:	2001      	movne	r0, #1
    statusMode |= XBeeAvail << 1;
   b4622:	4a19      	ldr	r2, [pc, #100]	; (b4688 <_Z10LEDHandlerv+0xe0>)
   b4624:	7814      	ldrb	r4, [r2, #0]
    statusMode |= BLEAvail << 2;
   b4626:	4a19      	ldr	r2, [pc, #100]	; (b468c <_Z10LEDHandlerv+0xe4>)
   b4628:	7812      	ldrb	r2, [r2, #0]
   b462a:	0092      	lsls	r2, r2, #2
   b462c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    statusMode = LTEAvail;          //Create bit mask with each of the available mode shifted into different bits
   b4630:	4c17      	ldr	r4, [pc, #92]	; (b4690 <_Z10LEDHandlerv+0xe8>)
    statusMode |= BLEAvail << 2;
   b4632:	7824      	ldrb	r4, [r4, #0]
   b4634:	4322      	orrs	r2, r4
   b4636:	3a01      	subs	r2, #1
   b4638:	b2d2      	uxtb	r2, r2
   b463a:	2a06      	cmp	r2, #6
   b463c:	bf9c      	itt	ls
   b463e:	4c15      	ldrls	r4, [pc, #84]	; (b4694 <_Z10LEDHandlerv+0xec>)
   b4640:	f854 2022 	ldrls.w	r2, [r4, r2, lsl #2]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4644:	7c5c      	ldrb	r4, [r3, #17]
    switch (statusMode){
   b4646:	bf88      	it	hi
   b4648:	f44f 027f 	movhi.w	r2, #16711680	; 0xff0000
   b464c:	2c0f      	cmp	r4, #15
        d_.pattern = pattern;
   b464e:	bf18      	it	ne
   b4650:	7458      	strbne	r0, [r3, #17]
    d_.color = color;
   b4652:	615a      	str	r2, [r3, #20]
   b4654:	e7b6      	b.n	b45c4 <_Z10LEDHandlerv+0x1c>
        SetSpeed = LED_SPEED_NORMAL;
   b4656:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_BLINK;
   b4658:	2002      	movs	r0, #2
   b465a:	e7e2      	b.n	b4622 <_Z10LEDHandlerv+0x7a>
        SetSpeed = LED_SPEED_NORMAL;
   b465c:	2114      	movs	r1, #20
        SetPattern = LED_PATTERN_FADE;
   b465e:	2003      	movs	r0, #3
   b4660:	e7df      	b.n	b4622 <_Z10LEDHandlerv+0x7a>
   b4662:	bf00      	nop
   b4664:	2003e562 	.word	0x2003e562
   b4668:	2003e588 	.word	0x2003e588
   b466c:	2003e5c9 	.word	0x2003e5c9
   b4670:	00ffff00 	.word	0x00ffff00
   b4674:	2003e0b0 	.word	0x2003e0b0
   b4678:	2003e580 	.word	0x2003e580
   b467c:	00ff6000 	.word	0x00ff6000
   b4680:	2003dedc 	.word	0x2003dedc
   b4684:	2003ddb1 	.word	0x2003ddb1
   b4688:	2003dd7c 	.word	0x2003dd7c
   b468c:	2003dd34 	.word	0x2003dd34
   b4690:	2003dd69 	.word	0x2003dd69
   b4694:	000c6e84 	.word	0x000c6e84

000b4698 <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b4698:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b469a:	460a      	mov	r2, r1
   b469c:	4901      	ldr	r1, [pc, #4]	; (b46a4 <_ZN7FatFile4openEPKci+0xc>)
   b469e:	6809      	ldr	r1, [r1, #0]
   b46a0:	f003 b849 	b.w	b7736 <_ZN7FatFile4openEPS_PKci>
   b46a4:	2003e610 	.word	0x2003e610

000b46a8 <_Z11wdogHandlerv>:
void wdogHandler(){
   b46a8:	b510      	push	{r4, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b46aa:	f009 fdc3 	bl	be234 <spark_cloud_flag_connected>
   b46ae:	4c2e      	ldr	r4, [pc, #184]	; (b4768 <_Z11wdogHandlerv+0xc0>)
    if(Particle.connected()) LTEAvail = true;   //If particle cloud is connected, assume that LTE is available
   b46b0:	b308      	cbz	r0, b46f6 <_Z11wdogHandlerv+0x4e>
   b46b2:	2301      	movs	r3, #1
        LTEAvail = false;
   b46b4:	7023      	strb	r3, [r4, #0]
   b46b6:	f009 fa85 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-XBeeRxTime > XBEE_WDOG_AVAIL || !XBeeRxTime){   //If the time since the last XBee message is too long, print warning and set status flag to false
   b46ba:	4b2c      	ldr	r3, [pc, #176]	; (b476c <_Z11wdogHandlerv+0xc4>)
   b46bc:	4c2c      	ldr	r4, [pc, #176]	; (b4770 <_Z11wdogHandlerv+0xc8>)
   b46be:	681b      	ldr	r3, [r3, #0]
   b46c0:	f247 5230 	movw	r2, #30000	; 0x7530
   b46c4:	1ac0      	subs	r0, r0, r3
   b46c6:	4290      	cmp	r0, r2
   b46c8:	d828      	bhi.n	b471c <_Z11wdogHandlerv+0x74>
   b46ca:	b33b      	cbz	r3, b471c <_Z11wdogHandlerv+0x74>
    else XBeeAvail = true;
   b46cc:	2301      	movs	r3, #1
        XBeeAvail = false;
   b46ce:	7023      	strb	r3, [r4, #0]
   b46d0:	f009 fa78 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis()-BLERxTime > BLE_WDOG_AVAIL || !BLERxTime){      //If the time since the last BLE message is too long, print warning and set status flag to false
   b46d4:	4b27      	ldr	r3, [pc, #156]	; (b4774 <_Z11wdogHandlerv+0xcc>)
   b46d6:	4c28      	ldr	r4, [pc, #160]	; (b4778 <_Z11wdogHandlerv+0xd0>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	f247 5230 	movw	r2, #30000	; 0x7530
   b46de:	1ac0      	subs	r0, r0, r3
   b46e0:	4290      	cmp	r0, r2
   b46e2:	d82d      	bhi.n	b4740 <_Z11wdogHandlerv+0x98>
   b46e4:	b363      	cbz	r3, b4740 <_Z11wdogHandlerv+0x98>
    else BLEAvail = true;
   b46e6:	2301      	movs	r3, #1
        BLEAvail = false;
   b46e8:	7023      	strb	r3, [r4, #0]
    if(stopActive) stopActive = false;                          //Set stop to false in case the CChub somehow crashed (though we have already entered a "float" mode where drivemode = 0)
   b46ea:	4b24      	ldr	r3, [pc, #144]	; (b477c <_Z11wdogHandlerv+0xd4>)
   b46ec:	781a      	ldrb	r2, [r3, #0]
   b46ee:	b10a      	cbz	r2, b46f4 <_Z11wdogHandlerv+0x4c>
   b46f0:	2200      	movs	r2, #0
   b46f2:	701a      	strb	r2, [r3, #0]
}
   b46f4:	bd10      	pop	{r4, pc}
    else if(LTEAvail){
   b46f6:	7823      	ldrb	r3, [r4, #0]
   b46f8:	2b00      	cmp	r3, #0
   b46fa:	d0dc      	beq.n	b46b6 <_Z11wdogHandlerv+0xe>
    return m_attr;
   b46fc:	4820      	ldr	r0, [pc, #128]	; (b4780 <_Z11wdogHandlerv+0xd8>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b46fe:	7c03      	ldrb	r3, [r0, #16]
   b4700:	b92b      	cbnz	r3, b470e <_Z11wdogHandlerv+0x66>
   b4702:	4920      	ldr	r1, [pc, #128]	; (b4784 <_Z11wdogHandlerv+0xdc>)
   b4704:	f244 2202 	movw	r2, #16898	; 0x4202
   b4708:	3010      	adds	r0, #16
   b470a:	f7ff ffc5 	bl	b4698 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[WARN] LTE Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b470e:	491e      	ldr	r1, [pc, #120]	; (b4788 <_Z11wdogHandlerv+0xe0>)
   b4710:	481b      	ldr	r0, [pc, #108]	; (b4780 <_Z11wdogHandlerv+0xd8>)
   b4712:	221e      	movs	r2, #30
   b4714:	f7ff fe52 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        LTEAvail = false;
   b4718:	2300      	movs	r3, #0
   b471a:	e7cb      	b.n	b46b4 <_Z11wdogHandlerv+0xc>
        if(XBeeAvail){
   b471c:	7823      	ldrb	r3, [r4, #0]
   b471e:	b16b      	cbz	r3, b473c <_Z11wdogHandlerv+0x94>
   b4720:	4817      	ldr	r0, [pc, #92]	; (b4780 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4722:	7c03      	ldrb	r3, [r0, #16]
   b4724:	b92b      	cbnz	r3, b4732 <_Z11wdogHandlerv+0x8a>
   b4726:	4917      	ldr	r1, [pc, #92]	; (b4784 <_Z11wdogHandlerv+0xdc>)
   b4728:	f244 2202 	movw	r2, #16898	; 0x4202
   b472c:	3010      	adds	r0, #16
   b472e:	f7ff ffb3 	bl	b4698 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] XBee Messages have not been received in %ds, assuming XBee is unavailable",(XBEE_WDOG_AVAIL/1000));
   b4732:	4916      	ldr	r1, [pc, #88]	; (b478c <_Z11wdogHandlerv+0xe4>)
   b4734:	4812      	ldr	r0, [pc, #72]	; (b4780 <_Z11wdogHandlerv+0xd8>)
   b4736:	221e      	movs	r2, #30
   b4738:	f7ff fe40 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        XBeeAvail = false;
   b473c:	2300      	movs	r3, #0
   b473e:	e7c6      	b.n	b46ce <_Z11wdogHandlerv+0x26>
        if(BLEAvail && BLERxTime){
   b4740:	7822      	ldrb	r2, [r4, #0]
   b4742:	b172      	cbz	r2, b4762 <_Z11wdogHandlerv+0xba>
   b4744:	b16b      	cbz	r3, b4762 <_Z11wdogHandlerv+0xba>
   b4746:	480e      	ldr	r0, [pc, #56]	; (b4780 <_Z11wdogHandlerv+0xd8>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4748:	7c03      	ldrb	r3, [r0, #16]
   b474a:	b92b      	cbnz	r3, b4758 <_Z11wdogHandlerv+0xb0>
   b474c:	490d      	ldr	r1, [pc, #52]	; (b4784 <_Z11wdogHandlerv+0xdc>)
   b474e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4752:	3010      	adds	r0, #16
   b4754:	f7ff ffa0 	bl	b4698 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[WARN] BLE Messages have not been received in %ds, assuming BLE is unavailable",(BLE_WDOG_AVAIL/1000));
   b4758:	490d      	ldr	r1, [pc, #52]	; (b4790 <_Z11wdogHandlerv+0xe8>)
   b475a:	4809      	ldr	r0, [pc, #36]	; (b4780 <_Z11wdogHandlerv+0xd8>)
   b475c:	221e      	movs	r2, #30
   b475e:	f7ff fe2d 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        BLEAvail = false;
   b4762:	2300      	movs	r3, #0
   b4764:	e7c0      	b.n	b46e8 <_Z11wdogHandlerv+0x40>
   b4766:	bf00      	nop
   b4768:	2003dd69 	.word	0x2003dd69
   b476c:	2003dd80 	.word	0x2003dd80
   b4770:	2003dd7c 	.word	0x2003dd7c
   b4774:	2003dd40 	.word	0x2003dd40
   b4778:	2003dd34 	.word	0x2003dd34
   b477c:	2003e5c9 	.word	0x2003e5c9
   b4780:	2003de7c 	.word	0x2003de7c
   b4784:	2003ddd0 	.word	0x2003ddd0
   b4788:	000c67d5 	.word	0x000c67d5
   b478c:	000c6825 	.word	0x000c6825
   b4790:	000c6876 	.word	0x000c6876

000b4794 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4794:	b530      	push	{r4, r5, lr}
   b4796:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4798:	4b1b      	ldr	r3, [pc, #108]	; (b4808 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b479a:	9300      	str	r3, [sp, #0]
   b479c:	7913      	ldrb	r3, [r2, #4]
   b479e:	f88d 3004 	strb.w	r3, [sp, #4]
   b47a2:	6893      	ldr	r3, [r2, #8]
   b47a4:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47a6:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b47aa:	8993      	ldrh	r3, [r2, #12]
   b47ac:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b47b0:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b47b2:	460a      	mov	r2, r1
   b47b4:	466b      	mov	r3, sp
   b47b6:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b47ba:	4628      	mov	r0, r5
   b47bc:	f003 fb44 	bl	b7e48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b47c0:	b910      	cbnz	r0, b47c8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b47c2:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b47c4:	b005      	add	sp, #20
   b47c6:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   b47c8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b47ca:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b47ce:	4628      	mov	r0, r5
   b47d0:	f002 ffaa 	bl	b7728 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b47d4:	2101      	movs	r1, #1
   b47d6:	4620      	mov	r0, r4
   b47d8:	f003 f9e0 	bl	b7b9c <_ZN9FatVolume4initEh>
   b47dc:	4601      	mov	r1, r0
   b47de:	b168      	cbz	r0, b47fc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b47e0:	4621      	mov	r1, r4
   b47e2:	4628      	mov	r0, r5
   b47e4:	f002 fd9a 	bl	b731c <_ZN7FatFile8openRootEP9FatVolume>
   b47e8:	2800      	cmp	r0, #0
   b47ea:	d0ea      	beq.n	b47c2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b47ec:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b47f0:	f013 0f70 	tst.w	r3, #112	; 0x70
   b47f4:	d0e5      	beq.n	b47c2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b47f6:	4b05      	ldr	r3, [pc, #20]	; (b480c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b47f8:	601d      	str	r5, [r3, #0]
    return true;
   b47fa:	e7e3      	b.n	b47c4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b47fc:	4620      	mov	r0, r4
   b47fe:	f003 f9cd 	bl	b7b9c <_ZN9FatVolume4initEh>
   b4802:	2800      	cmp	r0, #0
   b4804:	d1ec      	bne.n	b47e0 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b4806:	e7dc      	b.n	b47c2 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b4808:	000c6d3c 	.word	0x000c6d3c
   b480c:	2003e610 	.word	0x2003e610

000b4810 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4814:	b08e      	sub	sp, #56	; 0x38
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b4816:	7883      	ldrb	r3, [r0, #2]
   b4818:	2b42      	cmp	r3, #66	; 0x42
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b481a:	af04      	add	r7, sp, #16
   b481c:	4604      	mov	r4, r0
   b481e:	468a      	mov	sl, r1
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b4820:	d14e      	bne.n	b48c0 <_Z14processCommandPKchb+0xb0>
   b4822:	78c3      	ldrb	r3, [r0, #3]
   b4824:	2b32      	cmp	r3, #50	; 0x32
   b4826:	f040 80ef 	bne.w	b4a08 <_Z14processCommandPKchb+0x1f8>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b482a:	4620      	mov	r0, r4
   b482c:	f00f ff2f 	bl	c468e <strlen>
   b4830:	3801      	subs	r0, #1
   b4832:	f020 0007 	bic.w	r0, r0, #7
        }
   b4836:	46e9      	mov	r9, sp
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4838:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b483c:	4620      	mov	r0, r4
   b483e:	f00f ff26 	bl	c468e <strlen>
        char dataStr[strlen(command)-8];    //String to hold the data section of the message, cuts off the address, command, and checksum characters
   b4842:	ad04      	add	r5, sp, #16
        dataStr[strlen(command)-9] = '\0';  //Put null terminator at end of data string, otherwise string operators will flow into surrounding memory (a bug that cost many hours in debugging)
   b4844:	4428      	add	r0, r5
   b4846:	2600      	movs	r6, #0
   b4848:	f800 6c09 	strb.w	r6, [r0, #-9]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b484c:	4620      	mov	r0, r4
        cmdStr[3] = '\0';                   //Set null at end of command string
   b484e:	73fe      	strb	r6, [r7, #15]
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b4850:	813e      	strh	r6, [r7, #8]
   b4852:	72be      	strb	r6, [r7, #10]
   b4854:	f00f ff1b 	bl	c468e <strlen>
   b4858:	4420      	add	r0, r4
   b485a:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b485e:	723b      	strb	r3, [r7, #8]
   b4860:	4620      	mov	r0, r4
   b4862:	f00f ff14 	bl	c468e <strlen>
   b4866:	4420      	add	r0, r4
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b4868:	4631      	mov	r1, r6
        char checkStr[3] = {command[strlen(command)-2], command[strlen(command)-1], '\0'};  //Get checksum string from last two characters
   b486a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b486e:	727b      	strb	r3, [r7, #9]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       //Convert string to number, with base 16 (hex) from string
   b4870:	2210      	movs	r2, #16
   b4872:	f107 0008 	add.w	r0, r7, #8
   b4876:	f010 fe33 	bl	c54e0 <strtol>
   b487a:	4680      	mov	r8, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b487c:	fa5f f888 	uxtb.w	r8, r8
   b4880:	f00c ff24 	bl	c16cc <_Z16_fetch_usbserialv>
   b4884:	49ae      	ldr	r1, [pc, #696]	; (b4b40 <_Z14processCommandPKchb+0x330>)
   b4886:	4643      	mov	r3, r8
   b4888:	4642      	mov	r2, r8
   b488a:	f7ff fd97 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b488e:	2604      	movs	r6, #4
   b4890:	4620      	mov	r0, r4
   b4892:	f00f fefc 	bl	c468e <strlen>
   b4896:	3802      	subs	r0, #2
   b4898:	4286      	cmp	r6, r0
   b489a:	d217      	bcs.n	b48cc <_Z14processCommandPKchb+0xbc>
            if(i < 7) cmdStr[i-4] = command[i];
   b489c:	2e06      	cmp	r6, #6
   b489e:	bf9b      	ittet	ls
   b48a0:	f107 0328 	addls.w	r3, r7, #40	; 0x28
   b48a4:	199b      	addls	r3, r3, r6
            else dataStr[i-7] = command[i];
   b48a6:	19ab      	addhi	r3, r5, r6
            if(i < 7) cmdStr[i-4] = command[i];
   b48a8:	5da2      	ldrbls	r2, [r4, r6]
            else dataStr[i-7] = command[i];
   b48aa:	bf8c      	ite	hi
   b48ac:	5da2      	ldrbhi	r2, [r4, r6]
            if(i < 7) cmdStr[i-4] = command[i];
   b48ae:	f803 2c20 	strbls.w	r2, [r3, #-32]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48b2:	f106 0601 	add.w	r6, r6, #1
            else dataStr[i-7] = command[i];
   b48b6:	bf88      	it	hi
   b48b8:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){      //Copy in data characters from overall string
   b48bc:	b2f6      	uxtb	r6, r6
   b48be:	e7e7      	b.n	b4890 <_Z14processCommandPKchb+0x80>
    if((command[2] == 'B' && command[3] == BOTNUM+48) || (command[2] == 'A' && command[3] == 'B')){     //Check if the message was addressed to this bot, otherwise do nothing with it
   b48c0:	2b41      	cmp	r3, #65	; 0x41
   b48c2:	f040 80a1 	bne.w	b4a08 <_Z14processCommandPKchb+0x1f8>
   b48c6:	78c3      	ldrb	r3, [r0, #3]
   b48c8:	2b42      	cmp	r3, #66	; 0x42
   b48ca:	e7ac      	b.n	b4826 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){      //Check if the received checksum matches the length of the string received
   b48cc:	4540      	cmp	r0, r8
   b48ce:	d02a      	beq.n	b4926 <_Z14processCommandPKchb+0x116>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum); //Print to console
   b48d0:	f00c fefc 	bl	c16cc <_Z16_fetch_usbserialv>
   b48d4:	4605      	mov	r5, r0
   b48d6:	4620      	mov	r0, r4
   b48d8:	f00f fed9 	bl	c468e <strlen>
   b48dc:	4643      	mov	r3, r8
   b48de:	1e82      	subs	r2, r0, #2
   b48e0:	4998      	ldr	r1, [pc, #608]	; (b4b44 <_Z14processCommandPKchb+0x334>)
   b48e2:	4628      	mov	r0, r5
    return m_attr;
   b48e4:	4d98      	ldr	r5, [pc, #608]	; (b4b48 <_Z14processCommandPKchb+0x338>)
   b48e6:	f7ff fd69 	bl	b43bc <_ZN5Print8printlnfEPKcz>
            Serial.println("Warning, checksum does not match");
   b48ea:	f00c feef 	bl	c16cc <_Z16_fetch_usbserialv>
   b48ee:	4997      	ldr	r1, [pc, #604]	; (b4b4c <_Z14processCommandPKchb+0x33c>)
   b48f0:	f00b f9c3 	bl	bfc7a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){  //Print to SD Card
   b48f4:	7c2b      	ldrb	r3, [r5, #16]
   b48f6:	b983      	cbnz	r3, b491a <_Z14processCommandPKchb+0x10a>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b48f8:	4995      	ldr	r1, [pc, #596]	; (b4b50 <_Z14processCommandPKchb+0x340>)
   b48fa:	f244 2202 	movw	r2, #16898	; 0x4202
   b48fe:	f105 0010 	add.w	r0, r5, #16
   b4902:	f7ff fec9 	bl	b4698 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4906:	4993      	ldr	r1, [pc, #588]	; (b4b54 <_Z14processCommandPKchb+0x344>)
   b4908:	4622      	mov	r2, r4
   b490a:	4628      	mov	r0, r5
   b490c:	f7ff fd56 	bl	b43bc <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4910:	f105 0010 	add.w	r0, r5, #16
                logFile.close();
   b4914:	f002 ff08 	bl	b7728 <_ZN7FatFile5closeEv>
   b4918:	e075      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b491a:	498e      	ldr	r1, [pc, #568]	; (b4b54 <_Z14processCommandPKchb+0x344>)
   b491c:	4622      	mov	r2, r4
   b491e:	4628      	mov	r0, r5
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4920:	f7ff fd4c 	bl	b43bc <_ZN5Print8printlnfEPKcz>
   b4924:	e06f      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        if(!strcmp(cmdStr,"ctl")){      //Control command from CC that contains data about the drive mode, target latitude and longitude, and offloading
   b4926:	498c      	ldr	r1, [pc, #560]	; (b4b58 <_Z14processCommandPKchb+0x348>)
   b4928:	f107 000c 	add.w	r0, r7, #12
   b492c:	f00f fe80 	bl	c4630 <strcmp>
   b4930:	2800      	cmp	r0, #0
   b4932:	d139      	bne.n	b49a8 <_Z14processCommandPKchb+0x198>
            sscanf(dataStr,"%s %s %d %d %d",tLat,tLon,&driveMode,&logSensors,&signalLED);    //Target lat, target lon, drive mode, dataRecord, signal
   b4934:	4b89      	ldr	r3, [pc, #548]	; (b4b5c <_Z14processCommandPKchb+0x34c>)
   b4936:	9302      	str	r3, [sp, #8]
   b4938:	4b89      	ldr	r3, [pc, #548]	; (b4b60 <_Z14processCommandPKchb+0x350>)
   b493a:	9301      	str	r3, [sp, #4]
   b493c:	4b89      	ldr	r3, [pc, #548]	; (b4b64 <_Z14processCommandPKchb+0x354>)
   b493e:	498a      	ldr	r1, [pc, #552]	; (b4b68 <_Z14processCommandPKchb+0x358>)
   b4940:	9300      	str	r3, [sp, #0]
   b4942:	f107 0210 	add.w	r2, r7, #16
   b4946:	f107 031c 	add.w	r3, r7, #28
   b494a:	4628      	mov	r0, r5
   b494c:	f009 fcba 	bl	be2c4 <sscanf>
            targetLat = atof(tLat);     //Convert latitude string to float
   b4950:	f107 0010 	add.w	r0, r7, #16
   b4954:	f00f fdc8 	bl	c44e8 <atof>
   b4958:	ec51 0b10 	vmov	r0, r1, d0
   b495c:	f00f fd50 	bl	c4400 <__aeabi_d2f>
   b4960:	f8df 827c 	ldr.w	r8, [pc, #636]	; b4be0 <_Z14processCommandPKchb+0x3d0>
            targetLon = atof(tLon);     //Convert longitude string to float
   b4964:	4e81      	ldr	r6, [pc, #516]	; (b4b6c <_Z14processCommandPKchb+0x35c>)
            targetLat = atof(tLat);     //Convert latitude string to float
   b4966:	f8c8 0000 	str.w	r0, [r8]
            targetLon = atof(tLon);     //Convert longitude string to float
   b496a:	f107 001c 	add.w	r0, r7, #28
   b496e:	f00f fdbb 	bl	c44e8 <atof>
   b4972:	ec51 0b10 	vmov	r0, r1, d0
   b4976:	f00f fd43 	bl	c4400 <__aeabi_d2f>
   b497a:	6030      	str	r0, [r6, #0]
            Serial.printlnf("New target GPS, Lat: %f Lon: %f", targetLat, targetLon);
   b497c:	f00c fea6 	bl	c16cc <_Z16_fetch_usbserialv>
   b4980:	4604      	mov	r4, r0
   b4982:	f8d8 0000 	ldr.w	r0, [r8]
   b4986:	f00f f9eb 	bl	c3d60 <__aeabi_f2d>
   b498a:	4602      	mov	r2, r0
   b498c:	460b      	mov	r3, r1
   b498e:	6830      	ldr	r0, [r6, #0]
   b4990:	e9c7 2300 	strd	r2, r3, [r7]
   b4994:	f00f f9e4 	bl	c3d60 <__aeabi_f2d>
   b4998:	e9cd 0100 	strd	r0, r1, [sp]
   b499c:	e9d7 2300 	ldrd	r2, r3, [r7]
   b49a0:	4973      	ldr	r1, [pc, #460]	; (b4b70 <_Z14processCommandPKchb+0x360>)
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff fd0a 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        if(!strcmp(cmdStr,"mtr")){  //Motor Speed Control
   b49a8:	4972      	ldr	r1, [pc, #456]	; (b4b74 <_Z14processCommandPKchb+0x364>)
   b49aa:	f107 000c 	add.w	r0, r7, #12
   b49ae:	f00f fe3f 	bl	c4630 <strcmp>
   b49b2:	4604      	mov	r4, r0
   b49b4:	bb60      	cbnz	r0, b4a10 <_Z14processCommandPKchb+0x200>
            char lSpd[3] = {dataStr[0],dataStr[1],dataStr[2]};  //Get the first three characters of the data for the left target speed
   b49b6:	782b      	ldrb	r3, [r5, #0]
   b49b8:	743b      	strb	r3, [r7, #16]
   b49ba:	786b      	ldrb	r3, [r5, #1]
   b49bc:	747b      	strb	r3, [r7, #17]
   b49be:	78ab      	ldrb	r3, [r5, #2]
   b49c0:	74bb      	strb	r3, [r7, #18]
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49c2:	78eb      	ldrb	r3, [r5, #3]
   b49c4:	773b      	strb	r3, [r7, #28]
   b49c6:	792b      	ldrb	r3, [r5, #4]
   b49c8:	777b      	strb	r3, [r7, #29]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49ca:	f107 0010 	add.w	r0, r7, #16
            char rSpd[3] = {dataStr[3],dataStr[4],dataStr[5]};  //Get the second three characters of the data for the right target speed
   b49ce:	796b      	ldrb	r3, [r5, #5]
   b49d0:	77bb      	strb	r3, [r7, #30]
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49d2:	f00f fd8c 	bl	c44ee <atoi>
   b49d6:	4d68      	ldr	r5, [pc, #416]	; (b4b78 <_Z14processCommandPKchb+0x368>)
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49d8:	4e68      	ldr	r6, [pc, #416]	; (b4b7c <_Z14processCommandPKchb+0x36c>)
            setLSpeed = atoi(lSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49da:	7028      	strb	r0, [r5, #0]
            setRSpeed = atoi(rSpd);                             //Convert string to integer in global target speed, motor speed is ramped to new target by updateMotors
   b49dc:	f107 001c 	add.w	r0, r7, #28
   b49e0:	f00f fd85 	bl	c44ee <atoi>
   b49e4:	7030      	strb	r0, [r6, #0]
            Serial.printlnf("Received Motor Command: LSpeed=%d,RSpeed=%d",setLSpeed,setRSpeed);
   b49e6:	f00c fe71 	bl	c16cc <_Z16_fetch_usbserialv>
   b49ea:	7833      	ldrb	r3, [r6, #0]
   b49ec:	782a      	ldrb	r2, [r5, #0]
   b49ee:	4964      	ldr	r1, [pc, #400]	; (b4b80 <_Z14processCommandPKchb+0x370>)
   b49f0:	f7ff fce4 	bl	b43bc <_ZN5Print8printlnfEPKcz>
            updateMotorControl = true;      //Set flag to indicate to updateMotors that a new speed has been received
   b49f4:	4b63      	ldr	r3, [pc, #396]	; (b4b84 <_Z14processCommandPKchb+0x374>)
   b49f6:	2201      	movs	r2, #1
   b49f8:	701a      	strb	r2, [r3, #0]
   b49fa:	f009 f8e3 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
            lastMtrTime = millis();         //Update timer for the watchdog that a motor speed was received from CC hub
   b49fe:	4b62      	ldr	r3, [pc, #392]	; (b4b88 <_Z14processCommandPKchb+0x378>)
   b4a00:	6018      	str	r0, [r3, #0]
            driveMode = 0;                  //In case we missed the switch from an autonomous to manual mode, switch to manual mode
   b4a02:	4b58      	ldr	r3, [pc, #352]	; (b4b64 <_Z14processCommandPKchb+0x354>)
   b4a04:	701c      	strb	r4, [r3, #0]
   b4a06:	46cd      	mov	sp, r9
}
   b4a08:	3728      	adds	r7, #40	; 0x28
   b4a0a:	46bd      	mov	sp, r7
   b4a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(!strcmp(cmdStr,"req")){     //Data Request from CChub to get the bundle of sensor data and transmit it out
   b4a10:	495e      	ldr	r1, [pc, #376]	; (b4b8c <_Z14processCommandPKchb+0x37c>)
   b4a12:	f107 000c 	add.w	r0, r7, #12
   b4a16:	f00f fe0b 	bl	c4630 <strcmp>
   b4a1a:	b918      	cbnz	r0, b4a24 <_Z14processCommandPKchb+0x214>
            requestActive = mode;           //Set flag, as it's not possible to use 2/3 communication modes in an interrupt handler (which is where processCommand is called from)
   b4a1c:	4b5c      	ldr	r3, [pc, #368]	; (b4b90 <_Z14processCommandPKchb+0x380>)
   b4a1e:	f883 a000 	strb.w	sl, [r3]
   b4a22:	e7f0      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"pts")){     //Command used for debugging, which allows the CChub (or any bluetooth device) to print a string to the console and to the SD card
   b4a24:	495b      	ldr	r1, [pc, #364]	; (b4b94 <_Z14processCommandPKchb+0x384>)
   b4a26:	f107 000c 	add.w	r0, r7, #12
   b4a2a:	f00f fe01 	bl	c4630 <strcmp>
   b4a2e:	b9d0      	cbnz	r0, b4a66 <_Z14processCommandPKchb+0x256>
   b4a30:	4c45      	ldr	r4, [pc, #276]	; (b4b48 <_Z14processCommandPKchb+0x338>)
            Serial.println(dataStr);        //Print to console
   b4a32:	f00c fe4b 	bl	c16cc <_Z16_fetch_usbserialv>
   b4a36:	4629      	mov	r1, r5
   b4a38:	f00b f91f 	bl	bfc7a <_ZN5Print7printlnEPKc>
            if(!logFile.isOpen()){          //Print to SD card
   b4a3c:	7c23      	ldrb	r3, [r4, #16]
   b4a3e:	b973      	cbnz	r3, b4a5e <_Z14processCommandPKchb+0x24e>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a40:	4943      	ldr	r1, [pc, #268]	; (b4b50 <_Z14processCommandPKchb+0x340>)
   b4a42:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a46:	f104 0010 	add.w	r0, r4, #16
   b4a4a:	f7ff fe25 	bl	b4698 <_ZN7FatFile4openEPKci>
                logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a4e:	4952      	ldr	r1, [pc, #328]	; (b4b98 <_Z14processCommandPKchb+0x388>)
   b4a50:	462a      	mov	r2, r5
   b4a52:	4620      	mov	r0, r4
   b4a54:	f7ff fcb2 	bl	b43bc <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a58:	f104 0010 	add.w	r0, r4, #16
   b4a5c:	e75a      	b.n	b4914 <_Z14processCommandPKchb+0x104>
            else logFile.printlnf("[PUTS] Received String Command: %s",dataStr);
   b4a5e:	494e      	ldr	r1, [pc, #312]	; (b4b98 <_Z14processCommandPKchb+0x388>)
   b4a60:	462a      	mov	r2, r5
   b4a62:	4620      	mov	r0, r4
   b4a64:	e75c      	b.n	b4920 <_Z14processCommandPKchb+0x110>
        else if(!strcmp(cmdStr,"spc")){         //Incoming communication status from CChub, this data is used in addition to control strings to determine which communication methods are available between this bot and CChub
   b4a66:	494d      	ldr	r1, [pc, #308]	; (b4b9c <_Z14processCommandPKchb+0x38c>)
   b4a68:	f107 000c 	add.w	r0, r7, #12
   b4a6c:	f00f fde0 	bl	c4630 <strcmp>
   b4a70:	b920      	cbnz	r0, b4a7c <_Z14processCommandPKchb+0x26c>
   b4a72:	f009 f8a7 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
            lastStatusTime = millis();          //Update timer with the current time, and the watchdog will automatically set the flags based on this timer and the current time
   b4a76:	4b4a      	ldr	r3, [pc, #296]	; (b4ba0 <_Z14processCommandPKchb+0x390>)
   b4a78:	6018      	str	r0, [r3, #0]
   b4a7a:	e7c4      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"hwa")){         //Hello-world acknowledge command from the CCHub, which will bring this bot out of pairing mode on startup
   b4a7c:	4949      	ldr	r1, [pc, #292]	; (b4ba4 <_Z14processCommandPKchb+0x394>)
   b4a7e:	f107 000c 	add.w	r0, r7, #12
   b4a82:	f00f fdd5 	bl	c4630 <strcmp>
   b4a86:	b910      	cbnz	r0, b4a8e <_Z14processCommandPKchb+0x27e>
            waitForConnection = false;          //Setup loop waits for this to be set true before moving into main loop
   b4a88:	4b47      	ldr	r3, [pc, #284]	; (b4ba8 <_Z14processCommandPKchb+0x398>)
   b4a8a:	7018      	strb	r0, [r3, #0]
   b4a8c:	e7bb      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"dmp")){         //Enter SD Card "Dump Mode" for Bluetooth offloading
   b4a8e:	4947      	ldr	r1, [pc, #284]	; (b4bac <_Z14processCommandPKchb+0x39c>)
   b4a90:	f107 000c 	add.w	r0, r7, #12
   b4a94:	f00f fdcc 	bl	c4630 <strcmp>
   b4a98:	b978      	cbnz	r0, b4aba <_Z14processCommandPKchb+0x2aa>
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4a9a:	4b45      	ldr	r3, [pc, #276]	; (b4bb0 <_Z14processCommandPKchb+0x3a0>)
            status.setSpeed(LED_SPEED_FAST);
   b4a9c:	4845      	ldr	r0, [pc, #276]	; (b4bb4 <_Z14processCommandPKchb+0x3a4>)
            offloadMode = true;                 //Set flag for offloading mode, which is checked by the main loop
   b4a9e:	2201      	movs	r2, #1
   b4aa0:	701a      	strb	r2, [r3, #0]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4aa2:	4b44      	ldr	r3, [pc, #272]	; (b4bb4 <_Z14processCommandPKchb+0x3a4>)
   b4aa4:	7c5a      	ldrb	r2, [r3, #17]
   b4aa6:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4aa8:	bf1c      	itt	ne
   b4aaa:	2202      	movne	r2, #2
   b4aac:	745a      	strbne	r2, [r3, #17]
            status.setSpeed(LED_SPEED_FAST);
   b4aae:	211e      	movs	r1, #30
    d_.color = color;
   b4ab0:	22ff      	movs	r2, #255	; 0xff
   b4ab2:	615a      	str	r2, [r3, #20]
   b4ab4:	f7ff fd6c 	bl	b4590 <_ZN8particle9LEDStatus8setSpeedE8LEDSpeed>
   b4ab8:	e7a5      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"egp")){         //Emulated GPS point for testing purposes. Set the target latitude and longitude which allows testing of the distance and bearing functions for the GPS and compass
   b4aba:	493f      	ldr	r1, [pc, #252]	; (b4bb8 <_Z14processCommandPKchb+0x3a8>)
   b4abc:	f107 000c 	add.w	r0, r7, #12
   b4ac0:	f00f fdb6 	bl	c4630 <strcmp>
   b4ac4:	b9e0      	cbnz	r0, b4b00 <_Z14processCommandPKchb+0x2f0>
            sscanf(dataStr,"%s %s",tLat,tLon);      //Scan in the target latitude and longitude from the data string
   b4ac6:	f107 0210 	add.w	r2, r7, #16
   b4aca:	f107 031c 	add.w	r3, r7, #28
   b4ace:	493b      	ldr	r1, [pc, #236]	; (b4bbc <_Z14processCommandPKchb+0x3ac>)
   b4ad0:	4628      	mov	r0, r5
   b4ad2:	f009 fbf7 	bl	be2c4 <sscanf>
            latitude = atof(tLat);              //Convert strings with latitude and longitude to a float variable
   b4ad6:	f107 0010 	add.w	r0, r7, #16
   b4ada:	f00f fd05 	bl	c44e8 <atof>
   b4ade:	ec51 0b10 	vmov	r0, r1, d0
   b4ae2:	f00f fc8d 	bl	c4400 <__aeabi_d2f>
   b4ae6:	4b36      	ldr	r3, [pc, #216]	; (b4bc0 <_Z14processCommandPKchb+0x3b0>)
   b4ae8:	6018      	str	r0, [r3, #0]
            longitude = atof(tLon);
   b4aea:	f107 001c 	add.w	r0, r7, #28
   b4aee:	f00f fcfb 	bl	c44e8 <atof>
   b4af2:	ec51 0b10 	vmov	r0, r1, d0
   b4af6:	f00f fc83 	bl	c4400 <__aeabi_d2f>
   b4afa:	4b32      	ldr	r3, [pc, #200]	; (b4bc4 <_Z14processCommandPKchb+0x3b4>)
   b4afc:	6018      	str	r0, [r3, #0]
   b4afe:	e782      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
        else if(!strcmp(cmdStr,"stp")){         //Stop Command (Emergency stop for motors)
   b4b00:	4931      	ldr	r1, [pc, #196]	; (b4bc8 <_Z14processCommandPKchb+0x3b8>)
   b4b02:	f107 000c 	add.w	r0, r7, #12
   b4b06:	f00f fd93 	bl	c4630 <strcmp>
   b4b0a:	2800      	cmp	r0, #0
   b4b0c:	f47f af7b 	bne.w	b4a06 <_Z14processCommandPKchb+0x1f6>
            driveMode = 0;                      //Set drive mode back to manual mode
   b4b10:	4b14      	ldr	r3, [pc, #80]	; (b4b64 <_Z14processCommandPKchb+0x354>)
   b4b12:	7018      	strb	r0, [r3, #0]
            setLSpeed = 90;                     //Stop motors
   b4b14:	4b18      	ldr	r3, [pc, #96]	; (b4b78 <_Z14processCommandPKchb+0x368>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b16:	482d      	ldr	r0, [pc, #180]	; (b4bcc <_Z14processCommandPKchb+0x3bc>)
            setLSpeed = 90;                     //Stop motors
   b4b18:	245a      	movs	r4, #90	; 0x5a
   b4b1a:	701c      	strb	r4, [r3, #0]
            setRSpeed = 90;                 
   b4b1c:	4b17      	ldr	r3, [pc, #92]	; (b4b7c <_Z14processCommandPKchb+0x36c>)
   b4b1e:	701c      	strb	r4, [r3, #0]
            leftMotorSpeed = 90;                //Immediately stop motors (no ramp)
   b4b20:	4b2b      	ldr	r3, [pc, #172]	; (b4bd0 <_Z14processCommandPKchb+0x3c0>)
   b4b22:	701c      	strb	r4, [r3, #0]
            rightMotorSpeed = 90;
   b4b24:	4b2b      	ldr	r3, [pc, #172]	; (b4bd4 <_Z14processCommandPKchb+0x3c4>)
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b26:	4621      	mov	r1, r4
            rightMotorSpeed = 90;
   b4b28:	701c      	strb	r4, [r3, #0]
            ESCL.write(90);                     //Immediately write to the ESC a stopped state
   b4b2a:	f009 fd4f 	bl	be5cc <_ZN5Servo5writeEi>
            ESCR.write(90);
   b4b2e:	482a      	ldr	r0, [pc, #168]	; (b4bd8 <_Z14processCommandPKchb+0x3c8>)
   b4b30:	4621      	mov	r1, r4
   b4b32:	f009 fd4b 	bl	be5cc <_ZN5Servo5writeEi>
            stopActive = true;                  //Set flag to indicate that stop was hit
   b4b36:	4b29      	ldr	r3, [pc, #164]	; (b4bdc <_Z14processCommandPKchb+0x3cc>)
   b4b38:	2201      	movs	r2, #1
   b4b3a:	701a      	strb	r2, [r3, #0]
   b4b3c:	e763      	b.n	b4a06 <_Z14processCommandPKchb+0x1f6>
   b4b3e:	bf00      	nop
   b4b40:	000c68c5 	.word	0x000c68c5
   b4b44:	000c68da 	.word	0x000c68da
   b4b48:	2003de7c 	.word	0x2003de7c
   b4b4c:	000c68f7 	.word	0x000c68f7
   b4b50:	2003ddd0 	.word	0x2003ddd0
   b4b54:	000c6918 	.word	0x000c6918
   b4b58:	000c6944 	.word	0x000c6944
   b4b5c:	2003e580 	.word	0x2003e580
   b4b60:	2003ded5 	.word	0x2003ded5
   b4b64:	2003ddb1 	.word	0x2003ddb1
   b4b68:	000c6948 	.word	0x000c6948
   b4b6c:	2003e5d4 	.word	0x2003e5d4
   b4b70:	000c6957 	.word	0x000c6957
   b4b74:	000c6977 	.word	0x000c6977
   b4b78:	2003e560 	.word	0x2003e560
   b4b7c:	2003e561 	.word	0x2003e561
   b4b80:	000c697b 	.word	0x000c697b
   b4b84:	2003e5ec 	.word	0x2003e5ec
   b4b88:	2003ddf0 	.word	0x2003ddf0
   b4b8c:	000c69a7 	.word	0x000c69a7
   b4b90:	2003e0b8 	.word	0x2003e0b8
   b4b94:	000c69ab 	.word	0x000c69ab
   b4b98:	000c69af 	.word	0x000c69af
   b4b9c:	000c69d2 	.word	0x000c69d2
   b4ba0:	2003ddf4 	.word	0x2003ddf4
   b4ba4:	000c69d6 	.word	0x000c69d6
   b4ba8:	2003e5ed 	.word	0x2003e5ed
   b4bac:	000c69da 	.word	0x000c69da
   b4bb0:	2003e0b0 	.word	0x2003e0b0
   b4bb4:	2003e588 	.word	0x2003e588
   b4bb8:	000c69de 	.word	0x000c69de
   b4bbc:	000c69e2 	.word	0x000c69e2
   b4bc0:	2003ddfc 	.word	0x2003ddfc
   b4bc4:	2003ded8 	.word	0x2003ded8
   b4bc8:	000c69e8 	.word	0x000c69e8
   b4bcc:	2003dd48 	.word	0x2003dd48
   b4bd0:	2003de1c 	.word	0x2003de1c
   b4bd4:	2003e0b9 	.word	0x2003e0b9
   b4bd8:	2003dd58 	.word	0x2003dd58
   b4bdc:	2003e5c9 	.word	0x2003e5c9
   b4be0:	2003e5d0 	.word	0x2003e5d0

000b4be4 <_Z13cmdLTEHandlerPKcS0_>:
void cmdLTEHandler(const char *event, const char *data){
   b4be4:	b510      	push	{r4, lr}
   b4be6:	460c      	mov	r4, r1
    processCommand(data, 4,false);      //Pass received string directly to the processCommand directory
   b4be8:	2200      	movs	r2, #0
   b4bea:	2104      	movs	r1, #4
   b4bec:	4620      	mov	r0, r4
   b4bee:	f7ff fe0f 	bl	b4810 <_Z14processCommandPKchb>
    if(logMessages){                    //Log message to the SD card for later debugging
   b4bf2:	4b0b      	ldr	r3, [pc, #44]	; (b4c20 <_Z13cmdLTEHandlerPKcS0_+0x3c>)
   b4bf4:	781b      	ldrb	r3, [r3, #0]
   b4bf6:	b193      	cbz	r3, b4c1e <_Z13cmdLTEHandlerPKcS0_+0x3a>
   b4bf8:	480a      	ldr	r0, [pc, #40]	; (b4c24 <_Z13cmdLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bfa:	7c03      	ldrb	r3, [r0, #16]
   b4bfc:	b92b      	cbnz	r3, b4c0a <_Z13cmdLTEHandlerPKcS0_+0x26>
   b4bfe:	490a      	ldr	r1, [pc, #40]	; (b4c28 <_Z13cmdLTEHandlerPKcS0_+0x44>)
   b4c00:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c04:	3010      	adds	r0, #16
   b4c06:	f7ff fd47 	bl	b4698 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4c0a:	4622      	mov	r2, r4
   b4c0c:	4907      	ldr	r1, [pc, #28]	; (b4c2c <_Z13cmdLTEHandlerPKcS0_+0x48>)
   b4c0e:	4805      	ldr	r0, [pc, #20]	; (b4c24 <_Z13cmdLTEHandlerPKcS0_+0x40>)
   b4c10:	f7ff fbd4 	bl	b43bc <_ZN5Print8printlnfEPKcz>
}
   b4c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4c18:	4805      	ldr	r0, [pc, #20]	; (b4c30 <_Z13cmdLTEHandlerPKcS0_+0x4c>)
   b4c1a:	f002 bd85 	b.w	b7728 <_ZN7FatFile5closeEv>
}
   b4c1e:	bd10      	pop	{r4, pc}
   b4c20:	2003ded4 	.word	0x2003ded4
   b4c24:	2003de7c 	.word	0x2003de7c
   b4c28:	2003ddd0 	.word	0x2003ddd0
   b4c2c:	000c69ec 	.word	0x000c69ec
   b4c30:	2003de8c 	.word	0x2003de8c

000b4c34 <_Z15LTEInputCommand6String>:
    }
    else logFile.println(message);
}

//Particle function for processing a debug string, for testing things like an emulated GPS point
int LTEInputCommand(String cmd){
   b4c34:	b500      	push	{lr}
   b4c36:	b09b      	sub	sp, #108	; 0x6c
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4c38:	2300      	movs	r3, #0
   b4c3a:	2264      	movs	r2, #100	; 0x64
   b4c3c:	a901      	add	r1, sp, #4
   b4c3e:	f009 fe21 	bl	be884 <_ZNK6String8getBytesEPhjj>
    char cmdBuf[100];
    cmd.toCharArray(cmdBuf, 100);
    processCommand(cmdBuf, 4,false);
   b4c42:	2104      	movs	r1, #4
   b4c44:	2200      	movs	r2, #0
   b4c46:	eb0d 0001 	add.w	r0, sp, r1
   b4c4a:	f7ff fde1 	bl	b4810 <_Z14processCommandPKchb>
    if(logMessages){
   b4c4e:	4b0c      	ldr	r3, [pc, #48]	; (b4c80 <_Z15LTEInputCommand6String+0x4c>)
   b4c50:	781b      	ldrb	r3, [r3, #0]
   b4c52:	b183      	cbz	r3, b4c76 <_Z15LTEInputCommand6String+0x42>
   b4c54:	480b      	ldr	r0, [pc, #44]	; (b4c84 <_Z15LTEInputCommand6String+0x50>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c56:	7c03      	ldrb	r3, [r0, #16]
   b4c58:	b92b      	cbnz	r3, b4c66 <_Z15LTEInputCommand6String+0x32>
   b4c5a:	490b      	ldr	r1, [pc, #44]	; (b4c88 <_Z15LTEInputCommand6String+0x54>)
   b4c5c:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c60:	3010      	adds	r0, #16
   b4c62:	f7ff fd19 	bl	b4698 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",cmdBuf);
   b4c66:	4909      	ldr	r1, [pc, #36]	; (b4c8c <_Z15LTEInputCommand6String+0x58>)
   b4c68:	4806      	ldr	r0, [pc, #24]	; (b4c84 <_Z15LTEInputCommand6String+0x50>)
   b4c6a:	aa01      	add	r2, sp, #4
   b4c6c:	f7ff fba6 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c70:	4807      	ldr	r0, [pc, #28]	; (b4c90 <_Z15LTEInputCommand6String+0x5c>)
   b4c72:	f002 fd59 	bl	b7728 <_ZN7FatFile5closeEv>
    }
    return 1;
   b4c76:	2001      	movs	r0, #1
   b4c78:	b01b      	add	sp, #108	; 0x6c
   b4c7a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c7e:	bf00      	nop
   b4c80:	2003ded4 	.word	0x2003ded4
   b4c84:	2003de7c 	.word	0x2003de7c
   b4c88:	2003ddd0 	.word	0x2003ddd0
   b4c8c:	000c69ec 	.word	0x000c69ec
   b4c90:	2003de8c 	.word	0x2003de8c

000b4c94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4c94:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];                                              //Create character array for the received command
   b4c96:	f101 0308 	add.w	r3, r1, #8
   b4c9a:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4c9e:	af00      	add	r7, sp, #0
    char btBuf[len+1];                                              //Create character array for the received command
   b4ca0:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   b4ca4:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];       //Convert byte array into character array
   b4ca6:	460a      	mov	r2, r1
   b4ca8:	4601      	mov	r1, r0
   b4caa:	4668      	mov	r0, sp
   b4cac:	f00f fc3c 	bl	c4528 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cb0:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];                                              //Create character array for the received command
   b4cb4:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';                     //Make sure there is a null character at the end (another bug that cost many hours and seeing random data from surrounding memory)
   b4cb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4cba:	b113      	cbz	r3, b4cc2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4cbc:	2300      	movs	r3, #0
   b4cbe:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.println("New BT Command:");
   b4cc2:	f00c fd03 	bl	c16cc <_Z16_fetch_usbserialv>
   b4cc6:	4916      	ldr	r1, [pc, #88]	; (b4d20 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4cc8:	f00a ffd7 	bl	bfc7a <_ZN5Print7printlnEPKc>
    Serial.println(btBuf);                                          //Print out command for debugging purposes
   b4ccc:	f00c fcfe 	bl	c16cc <_Z16_fetch_usbserialv>
   b4cd0:	4629      	mov	r1, r5
   b4cd2:	f00a ffd2 	bl	bfc7a <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);                                   //Process the command received over BLE using the dictionary
   b4cd6:	2201      	movs	r2, #1
   b4cd8:	4611      	mov	r1, r2
   b4cda:	4628      	mov	r0, r5
   b4cdc:	f7ff fd98 	bl	b4810 <_Z14processCommandPKchb>
    if(btBuf[0] == 'A' || btBuf[0] == 'C') BLERxTime = millis();    //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b4ce0:	782b      	ldrb	r3, [r5, #0]
   b4ce2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   b4ce6:	2b41      	cmp	r3, #65	; 0x41
   b4ce8:	d103      	bne.n	b4cf2 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5e>
   b4cea:	f008 ff6b 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b4cee:	4b0d      	ldr	r3, [pc, #52]	; (b4d24 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   b4cf0:	6018      	str	r0, [r3, #0]
    if(logMessages){
   b4cf2:	4b0d      	ldr	r3, [pc, #52]	; (b4d28 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   b4cf4:	781b      	ldrb	r3, [r3, #0]
   b4cf6:	b183      	cbz	r3, b4d1a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x86>
   b4cf8:	480c      	ldr	r0, [pc, #48]	; (b4d2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4cfa:	7c03      	ldrb	r3, [r0, #16]
   b4cfc:	b92b      	cbnz	r3, b4d0a <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x76>
   b4cfe:	490c      	ldr	r1, [pc, #48]	; (b4d30 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x9c>)
   b4d00:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d04:	3010      	adds	r0, #16
   b4d06:	f7ff fcc7 	bl	b4698 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4d0a:	490a      	ldr	r1, [pc, #40]	; (b4d34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>)
   b4d0c:	4807      	ldr	r0, [pc, #28]	; (b4d2c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   b4d0e:	462a      	mov	r2, r5
   b4d10:	f7ff fb54 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4d14:	4808      	ldr	r0, [pc, #32]	; (b4d38 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa4>)
   b4d16:	f002 fd07 	bl	b7728 <_ZN7FatFile5closeEv>
}
   b4d1a:	46bd      	mov	sp, r7
   b4d1c:	bdb0      	pop	{r4, r5, r7, pc}
   b4d1e:	bf00      	nop
   b4d20:	000c6a0c 	.word	0x000c6a0c
   b4d24:	2003dd40 	.word	0x2003dd40
   b4d28:	2003ded4 	.word	0x2003ded4
   b4d2c:	2003de7c 	.word	0x2003de7c
   b4d30:	2003ddd0 	.word	0x2003ddd0
   b4d34:	000c6a1c 	.word	0x000c6a1c
   b4d38:	2003de8c 	.word	0x2003de8c

000b4d3c <_Z9setupXBeev>:
void setupXBee(){
   b4d3c:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b4d3e:	f00d f991 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b4d42:	4908      	ldr	r1, [pc, #32]	; (b4d64 <_Z9setupXBeev+0x28>)
   b4d44:	f7ff fb02 	bl	b434c <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b4d48:	2014      	movs	r0, #20
   b4d4a:	f00c f881 	bl	c0e50 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b4d4e:	f00d f989 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b4d52:	4905      	ldr	r1, [pc, #20]	; (b4d68 <_Z9setupXBeev+0x2c>)
   b4d54:	f7ff fafa 	bl	b434c <_ZN5Print6printfEPKcz>
}
   b4d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b4d5c:	2014      	movs	r0, #20
   b4d5e:	f00c b877 	b.w	c0e50 <delay>
   b4d62:	bf00      	nop
   b4d64:	000c7e93 	.word	0x000c7e93
   b4d68:	000c66fc 	.word	0x000c66fc

000b4d6c <_Z8setupGPSv>:
void setupGPS(){
   b4d6c:	b513      	push	{r0, r1, r4, lr}
    GPSAvail = true;
   b4d6e:	4c15      	ldr	r4, [pc, #84]	; (b4dc4 <_Z8setupGPSv+0x58>)
   b4d70:	2301      	movs	r3, #1
   b4d72:	7023      	strb	r3, [r4, #0]
    if(myGPS.begin() == false){
   b4d74:	f00d f9b2 	bl	c20dc <_Z19__fetch_global_Wirev>
   b4d78:	2300      	movs	r3, #0
   b4d7a:	4601      	mov	r1, r0
   b4d7c:	9300      	str	r3, [sp, #0]
   b4d7e:	4812      	ldr	r0, [pc, #72]	; (b4dc8 <_Z8setupGPSv+0x5c>)
   b4d80:	f240 434c 	movw	r3, #1100	; 0x44c
   b4d84:	2242      	movs	r2, #66	; 0x42
   b4d86:	f008 fb31 	bl	bd3ec <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>
   b4d8a:	b928      	cbnz	r0, b4d98 <_Z8setupGPSv+0x2c>
        GPSAvail = false;
   b4d8c:	7020      	strb	r0, [r4, #0]
        Serial.println("Error, Could not initialize GPS");
   b4d8e:	f00c fc9d 	bl	c16cc <_Z16_fetch_usbserialv>
   b4d92:	490e      	ldr	r1, [pc, #56]	; (b4dcc <_Z8setupGPSv+0x60>)
   b4d94:	f00a ff71 	bl	bfc7a <_ZN5Print7printlnEPKc>
    myGPS.setI2COutput(COM_TYPE_UBX);
   b4d98:	f240 424c 	movw	r2, #1100	; 0x44c
   b4d9c:	2101      	movs	r1, #1
   b4d9e:	480a      	ldr	r0, [pc, #40]	; (b4dc8 <_Z8setupGPSv+0x5c>)
   b4da0:	f008 fa58 	bl	bd254 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>
    myGPS.setPortInput(COM_PORT_I2C, COM_TYPE_UBX);
   b4da4:	f240 434c 	movw	r3, #1100	; 0x44c
   b4da8:	2201      	movs	r2, #1
   b4daa:	2100      	movs	r1, #0
   b4dac:	4806      	ldr	r0, [pc, #24]	; (b4dc8 <_Z8setupGPSv+0x5c>)
   b4dae:	f008 fa31 	bl	bd214 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>
    Wire.setClock(400000); //Increase I2C clock speed to 400kHz
   b4db2:	f00d f993 	bl	c20dc <_Z19__fetch_global_Wirev>
	  setSpeed(speed);
   b4db6:	4906      	ldr	r1, [pc, #24]	; (b4dd0 <_Z8setupGPSv+0x64>)
}
   b4db8:	b002      	add	sp, #8
   b4dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4dbe:	f00c bdd5 	b.w	c196c <_ZN7TwoWire8setSpeedEm>
   b4dc2:	bf00      	nop
   b4dc4:	2003dd68 	.word	0x2003dd68
   b4dc8:	2003df30 	.word	0x2003df30
   b4dcc:	000c6a3c 	.word	0x000c6a3c
   b4dd0:	00061a80 	.word	0x00061a80

000b4dd4 <setup>:
void setup(){
   b4dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4dd8:	4bc6      	ldr	r3, [pc, #792]	; (b50f4 <setup+0x320>)
    led_set_status_active(&d_, active, nullptr);
   b4dda:	48c7      	ldr	r0, [pc, #796]	; (b50f8 <setup+0x324>)
    d_.priority = (d_.priority & 0x03) | ((uint8_t)priority << 2);
   b4ddc:	7c1a      	ldrb	r2, [r3, #16]
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4dde:	4fc7      	ldr	r7, [pc, #796]	; (b50fc <setup+0x328>)
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4de0:	4ec7      	ldr	r6, [pc, #796]	; (b5100 <setup+0x32c>)
   b4de2:	f002 0203 	and.w	r2, r2, #3
   b4de6:	f042 0278 	orr.w	r2, r2, #120	; 0x78
   b4dea:	741a      	strb	r2, [r3, #16]
    d_.color = color;
   b4dec:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b4df0:	615a      	str	r2, [r3, #20]
    if (pattern != LED_PATTERN_CUSTOM && d_.pattern != LED_PATTERN_CUSTOM) {
   b4df2:	7c5a      	ldrb	r2, [r3, #17]
   b4df4:	2a0f      	cmp	r2, #15
        d_.pattern = pattern;
   b4df6:	bf18      	it	ne
   b4df8:	2201      	movne	r2, #1
void setup(){
   b4dfa:	b095      	sub	sp, #84	; 0x54
   b4dfc:	bf18      	it	ne
   b4dfe:	745a      	strbne	r2, [r3, #17]
    led_set_status_active(&d_, active, nullptr);
   b4e00:	2101      	movs	r1, #1
   b4e02:	2200      	movs	r2, #0
   b4e04:	f009 f950 	bl	be0a8 <led_set_status_active>
    pinMode(SENSE_EN, OUTPUT);                          //Configure the pin for the Atlas sensors as an output and pull low to enable power to the Atlas sensors
   b4e08:	2101      	movs	r1, #1
   b4e0a:	2002      	movs	r0, #2
   b4e0c:	f00d f8ba 	bl	c1f84 <pinMode>
    digitalWrite(SENSE_EN,LOW);                     
   b4e10:	2100      	movs	r1, #0
   b4e12:	2002      	movs	r0, #2
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e14:	2400      	movs	r4, #0
    digitalWrite(SENSE_EN,LOW);                     
   b4e16:	f00d f8c6 	bl	c1fa6 <digitalWrite>
    pinMode(PWR_BUT, INPUT);                            //Configure power button input as an input, no pull as the resistor divider will handle pin floating
   b4e1a:	2100      	movs	r1, #0
   b4e1c:	2012      	movs	r0, #18
   b4e1e:	f00d f8b1 	bl	c1f84 <pinMode>
    attachInterrupt(PWR_BUT, buttonHandler, CHANGE);    //Attach the buttonHandler function to trigger whenever the button is pressed or released
   b4e22:	f04f 33ff 	mov.w	r3, #4294967295
   b4e26:	4622      	mov	r2, r4
   b4e28:	49b6      	ldr	r1, [pc, #728]	; (b5104 <setup+0x330>)
   b4e2a:	9400      	str	r4, [sp, #0]
   b4e2c:	2012      	movs	r0, #18
   b4e2e:	f00c fc75 	bl	c171c <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(BAT_LEAK_DET,INPUT);                        //Configure the battery leak detect output of the PCB to be an input with no pull. External pull on PCB
   b4e32:	4621      	mov	r1, r4
   b4e34:	200f      	movs	r0, #15
   b4e36:	f00d f8a5 	bl	c1f84 <pinMode>
   b4e3a:	f008 fec3 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e3e:	4ab2      	ldr	r2, [pc, #712]	; (b5108 <setup+0x334>)
   b4e40:	235a      	movs	r3, #90	; 0x5a
   b4e42:	7013      	strb	r3, [r2, #0]
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e44:	4ab1      	ldr	r2, [pc, #708]	; (b510c <setup+0x338>)
    leftMotorSpeed = setLSpeed = 90;            //Set the initial left motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e46:	703b      	strb	r3, [r7, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e48:	f04f 08b4 	mov.w	r8, #180	; 0xb4
    rightMotorSpeed = setRSpeed = 90;           //Set the initial right motor speed of 90, which is stopped. The controller must be held here for 2 seconds to arm the ESC
   b4e4c:	7033      	strb	r3, [r6, #0]
   b4e4e:	7013      	strb	r3, [r2, #0]
    ESCL.attach(ESC_PWM_L,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e50:	2106      	movs	r1, #6
   b4e52:	e9cd 4800 	strd	r4, r8, [sp]
   b4e56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e5e:	4605      	mov	r5, r0
   b4e60:	48ab      	ldr	r0, [pc, #684]	; (b5110 <setup+0x33c>)
   b4e62:	f009 fbef 	bl	be644 <_ZN5Servo6attachEtttss>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b4e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4e6e:	e9cd 4800 	strd	r4, r8, [sp]
   b4e72:	2105      	movs	r1, #5
   b4e74:	48a7      	ldr	r0, [pc, #668]	; (b5114 <setup+0x340>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4e76:	f8df 834c 	ldr.w	r8, [pc, #844]	; b51c4 <setup+0x3f0>
    ESCR.attach(ESC_PWM_R,1000,2000);           //Start PWM-based ESC, with 1ms min pulse width and 2ms max pulse width
   b4e7a:	f009 fbe3 	bl	be644 <_ZN5Servo6attachEtttss>
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4e7e:	7839      	ldrb	r1, [r7, #0]
   b4e80:	48a3      	ldr	r0, [pc, #652]	; (b5110 <setup+0x33c>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4e82:	4fa5      	ldr	r7, [pc, #660]	; (b5118 <setup+0x344>)
    ESCL.write(setLSpeed);                      //Set the initial speed of the left motor
   b4e84:	f009 fba2 	bl	be5cc <_ZN5Servo5writeEi>
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4e88:	7831      	ldrb	r1, [r6, #0]
   b4e8a:	48a2      	ldr	r0, [pc, #648]	; (b5114 <setup+0x340>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4e8c:	4ea3      	ldr	r6, [pc, #652]	; (b511c <setup+0x348>)
    ESCR.write(setRSpeed);                      //Set the initial speed of the right motor
   b4e8e:	f009 fb9d 	bl	be5cc <_ZN5Servo5writeEi>
    if(!STARTUP_WAIT_PAIR) delay(2000);         //Delay for 2 seconds to allow motor controllers to arm
   b4e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4e96:	f00b ffdb 	bl	c0e50 <delay>
    BLE.on();                                   //Turn on Bluetooth
   b4e9a:	f00a f857 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e9e:	f00a f89f 	bl	befe0 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setTxPower(8);                          //Max transmitting power
   b4ea2:	f00a f853 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ea6:	2108      	movs	r1, #8
   b4ea8:	f00a f8a1 	bl	befee <_ZNK8particle14BleLocalDevice10setTxPowerEa>
    Serial.begin(115200);
   b4eac:	f00c fc0e 	bl	c16cc <_Z16_fetch_usbserialv>
   b4eb0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4eb4:	f00c fbfa 	bl	c16ac <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b4eb8:	f00d f8d4 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b4ebc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4ec0:	f00c fcfc 	bl	c18bc <_ZN11USARTSerial5beginEm>
    setupXBee();                                //Setup XBee module
   b4ec4:	f7ff ff3a 	bl	b4d3c <_Z9setupXBeev>
    setupGPS();                                 //Setup GPS module
   b4ec8:	f7ff ff50 	bl	b4d6c <_Z8setupGPSv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4ecc:	2301      	movs	r3, #1
   b4ece:	4994      	ldr	r1, [pc, #592]	; (b5120 <setup+0x34c>)
   b4ed0:	4894      	ldr	r0, [pc, #592]	; (b5124 <setup+0x350>)
   b4ed2:	4622      	mov	r2, r4
   b4ed4:	e9cd 4400 	strd	r4, r4, [sp]
   b4ed8:	f009 f9bc 	bl	be254 <spark_subscribe>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b4edc:	4992      	ldr	r1, [pc, #584]	; (b5128 <setup+0x354>)
   b4ede:	4a93      	ldr	r2, [pc, #588]	; (b512c <setup+0x358>)
   b4ee0:	4893      	ldr	r0, [pc, #588]	; (b5130 <setup+0x35c>)
   b4ee2:	f00c f8b6 	bl	c1052 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4ee6:	4b93      	ldr	r3, [pc, #588]	; (b5134 <setup+0x360>)
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4ee8:	f04f 0901 	mov.w	r9, #1
    LTEAvail = false;                           //Initialize LTE status indicator to false until we receive a message from CC
   b4eec:	701c      	strb	r4, [r3, #0]
    SDAvail = true;                             //SD initialized to true, but is set false when the SD is initialized unsucessfully
   b4eee:	f886 9000 	strb.w	r9, [r6]
   b4ef2:	f008 fe67 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4ef6:	4b90      	ldr	r3, [pc, #576]	; (b5138 <setup+0x364>)
    logSensors = true;                          //By default, log sensor data to SD card, if SD card is inserted
   b4ef8:	f888 9000 	strb.w	r9, [r8]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4efc:	6018      	str	r0, [r3, #0]
   b4efe:	4b8f      	ldr	r3, [pc, #572]	; (b513c <setup+0x368>)
    logMessages = true;                         //By default, log debug messages to SD card, if SD card is inserted
   b4f00:	f887 9000 	strb.w	r9, [r7]
    positionTimer = lastTelemTime = lastStatusTime = dataTimer = senseTimer = millis();     //Initialize most software timers here to current time
   b4f04:	6018      	str	r0, [r3, #0]
   b4f06:	4b8e      	ldr	r3, [pc, #568]	; (b5140 <setup+0x36c>)
   b4f08:	6018      	str	r0, [r3, #0]
   b4f0a:	4b8e      	ldr	r3, [pc, #568]	; (b5144 <setup+0x370>)
   b4f0c:	6018      	str	r0, [r3, #0]
   b4f0e:	4b8e      	ldr	r3, [pc, #568]	; (b5148 <setup+0x374>)
   b4f10:	6018      	str	r0, [r3, #0]
    XBeeRxTime = 0;                             //Initialize timer for checking that XBee is available
   b4f12:	4b8e      	ldr	r3, [pc, #568]	; (b514c <setup+0x378>)
   b4f14:	601c      	str	r4, [r3, #0]
    BLERxTime = 0;                              //Initialize timer for checking that BLE is available
   b4f16:	4b8e      	ldr	r3, [pc, #568]	; (b5150 <setup+0x37c>)
   b4f18:	601c      	str	r4, [r3, #0]
    dataWait = false;                           //Set false initially to first request data to sensors before attempting to read data
   b4f1a:	4b8e      	ldr	r3, [pc, #568]	; (b5154 <setup+0x380>)
   b4f1c:	701c      	strb	r4, [r3, #0]
    offloadMode = false;                        //Set offload to false, otherwise could try to offload with no CC connected
   b4f1e:	4b8e      	ldr	r3, [pc, #568]	; (b5158 <setup+0x384>)
   b4f20:	701c      	strb	r4, [r3, #0]
    requestActive = false;                      //Set request to false, otherwise we are trying to send sensor data with no CC connected
   b4f22:	4b8e      	ldr	r3, [pc, #568]	; (b515c <setup+0x388>)
   b4f24:	701c      	strb	r4, [r3, #0]
    LTEStatusCount = LTE_MAX_STATUS;            //Initialize counter for LTE backup messages. This counter limits the number of LTE messages being sent so we don't burn through the data limit
   b4f26:	4b8e      	ldr	r3, [pc, #568]	; (b5160 <setup+0x38c>)
   b4f28:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   b4f2c:	801a      	strh	r2, [r3, #0]
    telemetryAvail = false;                     //Initially assume GPS and compass are not available until we receive the first point from each
   b4f2e:	4b8d      	ldr	r3, [pc, #564]	; (b5164 <setup+0x390>)
   b4f30:	701c      	strb	r4, [r3, #0]
    shutdownActive = false;                     //Initially set the shutdown state to false until the button is pressed and held for 3 seconds, then shut off
   b4f32:	4b8d      	ldr	r3, [pc, #564]	; (b5168 <setup+0x394>)
   b4f34:	701c      	strb	r4, [r3, #0]
    stopActive = false;                         //Initially disable stop, otherwise user might not know that the stop button must be pressed
   b4f36:	4b8d      	ldr	r3, [pc, #564]	; (b516c <setup+0x398>)
   b4f38:	701c      	strb	r4, [r3, #0]
    warnedBattLeak = false;                     //Initially set false so at least one leak message will be sent in the case of a leak
   b4f3a:	4b8d      	ldr	r3, [pc, #564]	; (b5170 <setup+0x39c>)
   b4f3c:	701c      	strb	r4, [r3, #0]
    warnedLeak = false;                         //Initially set false so at least one leak message will be sent in the case of a leak
   b4f3e:	4b8d      	ldr	r3, [pc, #564]	; (b5174 <setup+0x3a0>)
   b4f40:	701c      	strb	r4, [r3, #0]
    battPercent = 50;                           //Initially set battery reading to 50% until we read the actual voltage so the LED states are not affected 
   b4f42:	4b8d      	ldr	r3, [pc, #564]	; (b5178 <setup+0x3a4>)
   b4f44:	2232      	movs	r2, #50	; 0x32
   b4f46:	701a      	strb	r2, [r3, #0]
    BLE.addCharacteristic(txCharacteristic);    //Add characteristic for the stream of transmitting out data over BLE
   b4f48:	f00a f800 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f4c:	4a8b      	ldr	r2, [pc, #556]	; (b517c <setup+0x3a8>)
   b4f4e:	4601      	mov	r1, r0
   b4f50:	a80f      	add	r0, sp, #60	; 0x3c
   b4f52:	f00a fd55 	bl	bfa00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f56:	a80f      	add	r0, sp, #60	; 0x3c
   b4f58:	f00a f905 	bl	bf166 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);    //Add characteristic for the stream of receiving data from BLE
   b4f5c:	f009 fff6 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f60:	4a87      	ldr	r2, [pc, #540]	; (b5180 <setup+0x3ac>)
   b4f62:	4601      	mov	r1, r0
   b4f64:	a80f      	add	r0, sp, #60	; 0x3c
   b4f66:	f00a fd4b 	bl	bfa00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f6a:	a80f      	add	r0, sp, #60	; 0x3c
   b4f6c:	f00a f8fb 	bl	bf166 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(offloadCharacteristic);   //Add characteristic for offloading stream for BLE
   b4f70:	f009 ffec 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f74:	4a83      	ldr	r2, [pc, #524]	; (b5184 <setup+0x3b0>)
   b4f76:	4601      	mov	r1, r0
   b4f78:	a80f      	add	r0, sp, #60	; 0x3c
   b4f7a:	f00a fd41 	bl	bfa00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f7e:	a80f      	add	r0, sp, #60	; 0x3c
   b4f80:	f00a f8f1 	bl	bf166 <_ZN8particle17BleCharacteristicD1Ev>
        BLE.addCharacteristic(bledbgCharacteristic);    //Add BLE Characteristics for BLE serial debug stream
   b4f84:	f009 ffe2 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4f88:	4a7f      	ldr	r2, [pc, #508]	; (b5188 <setup+0x3b4>)
   b4f8a:	4601      	mov	r1, r0
   b4f8c:	a80f      	add	r0, sp, #60	; 0x3c
   b4f8e:	f00a fd37 	bl	bfa00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4f92:	a80f      	add	r0, sp, #60	; 0x3c
   b4f94:	f00a f8e7 	bl	bf166 <_ZN8particle17BleCharacteristicD1Ev>
    BLECustomData[0] = BOTNUM;                  //Put this bot's bot number in the advertising data so other bots can see it's ID without connecting to it
   b4f98:	4b7c      	ldr	r3, [pc, #496]	; (b518c <setup+0x3b8>)
   b4f9a:	f04f 0a02 	mov.w	sl, #2
   b4f9e:	f883 a000 	strb.w	sl, [r3]
    advData.appendServiceUUID(WaterNetService); // Add the app service
   b4fa2:	4b7b      	ldr	r3, [pc, #492]	; (b5190 <setup+0x3bc>)
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4fa4:	a80f      	add	r0, sp, #60	; 0x3c
   b4fa6:	6819      	ldr	r1, [r3, #0]
   b4fa8:	f009 fe82 	bl	becb0 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fac:	a80f      	add	r0, sp, #60	; 0x3c
   b4fae:	f009 fde1 	bl	beb74 <_ZNK8particle7BleUuid4typeEv>
   b4fb2:	4681      	mov	r9, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4fb4:	a80f      	add	r0, sp, #60	; 0x3c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4fb6:	f1b9 0f00 	cmp.w	r9, #0
   b4fba:	f040 8132 	bne.w	b5222 <setup+0x44e>
            uint16_t uuid16 = tempUUID.shorted();
   b4fbe:	f009 fdf5 	bl	bebac <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4fc2:	f8cd 9000 	str.w	r9, [sp]
            uint16_t uuid16 = tempUUID.shorted();
   b4fc6:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4fca:	4653      	mov	r3, sl
   b4fcc:	aa0b      	add	r2, sp, #44	; 0x2c
   b4fce:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4fd0:	4870      	ldr	r0, [pc, #448]	; (b5194 <setup+0x3c0>)
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b4fd2:	4c71      	ldr	r4, [pc, #452]	; (b5198 <setup+0x3c4>)
   b4fd4:	f00a f9f2 	bl	bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendCustomData(BLECustomData,CUSTOM_DATA_LEN);
   b4fd8:	2300      	movs	r3, #0
   b4fda:	496c      	ldr	r1, [pc, #432]	; (b518c <setup+0x3b8>)
   b4fdc:	486d      	ldr	r0, [pc, #436]	; (b5194 <setup+0x3c0>)
   b4fde:	2208      	movs	r2, #8
   b4fe0:	f00a fa0a 	bl	bf3f8 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>
    BLE.advertise(&advData);                    //Start advertising the characteristics
   b4fe4:	f009 ffb2 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4fe8:	2200      	movs	r2, #0
   b4fea:	496a      	ldr	r1, [pc, #424]	; (b5194 <setup+0x3c0>)
   b4fec:	f00a f85f 	bl	bf0ae <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    Wire.begin();
   b4ff0:	f00d f874 	bl	c20dc <_Z19__fetch_global_Wirev>
   b4ff4:	f00c fcbe 	bl	c1974 <_ZN7TwoWire5beginEv>
    Wire.setClock(CLOCK_SPEED_400KHZ);
   b4ff8:	f00d f870 	bl	c20dc <_Z19__fetch_global_Wirev>
   b4ffc:	4967      	ldr	r1, [pc, #412]	; (b519c <setup+0x3c8>)
   b4ffe:	f00c fcb5 	bl	c196c <_ZN7TwoWire8setSpeedEm>
    CompassAvail = true;                        //Assume compass is available, unless we can't connect to it over I2C
   b5002:	2301      	movs	r3, #1
   b5004:	7023      	strb	r3, [r4, #0]
    if (! lis3mdl.begin_I2C()) {                // hardware I2C mode, can pass in address & alt Wire
   b5006:	f00d f869 	bl	c20dc <_Z19__fetch_global_Wirev>
   b500a:	211c      	movs	r1, #28
   b500c:	4602      	mov	r2, r0
   b500e:	4864      	ldr	r0, [pc, #400]	; (b51a0 <setup+0x3cc>)
   b5010:	f003 fadd 	bl	b85ce <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>
   b5014:	2800      	cmp	r0, #0
   b5016:	f040 810b 	bne.w	b5230 <setup+0x45c>
        CompassAvail = false;                   //Couldn't connect over I2C, so assume the compass is unavailable. Flag disables Autonomous/Sentry mode
   b501a:	7020      	strb	r0, [r4, #0]
        Serial.println("Failed to find LIS3MDL chip");
   b501c:	f00c fb56 	bl	c16cc <_Z16_fetch_usbserialv>
   b5020:	4960      	ldr	r1, [pc, #384]	; (b51a4 <setup+0x3d0>)
    else Serial.println("LIS3MDL Found!");
   b5022:	f00a fe2a 	bl	bfc7a <_ZN5Print7printlnEPKc>
    lis3mdl.setPerformanceMode(LIS3MDL_HIGHMODE);
   b5026:	485e      	ldr	r0, [pc, #376]	; (b51a0 <setup+0x3cc>)
   b5028:	2102      	movs	r1, #2
   b502a:	f003 f9c9 	bl	b83c0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
    lis3mdl.setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b502e:	485c      	ldr	r0, [pc, #368]	; (b51a0 <setup+0x3cc>)
   b5030:	2100      	movs	r1, #0
   b5032:	f003 fa29 	bl	b8488 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
    lis3mdl.setDataRate(LIS3MDL_DATARATE_155_HZ);
   b5036:	485a      	ldr	r0, [pc, #360]	; (b51a0 <setup+0x3cc>)
   b5038:	2101      	movs	r1, #1
   b503a:	f003 f9f3 	bl	b8424 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b503e:	4858      	ldr	r0, [pc, #352]	; (b51a0 <setup+0x3cc>)
   b5040:	2101      	movs	r1, #1
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5042:	2400      	movs	r4, #0
    lis3mdl.setRange(LIS3MDL_RANGE_8_GAUSS);
   b5044:	f003 fa3b 	bl	b84be <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5048:	f04f 0901 	mov.w	r9, #1
    lis3mdl.setIntThreshold(500);
   b504c:	4854      	ldr	r0, [pc, #336]	; (b51a0 <setup+0x3cc>)
   b504e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5052:	f003 fadb 	bl	b860c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>
    lis3mdl.configInterrupt(false, false, true, // enable z axis
   b5056:	4622      	mov	r2, r4
   b5058:	4621      	mov	r1, r4
   b505a:	464b      	mov	r3, r9
   b505c:	e9cd 4901 	strd	r4, r9, [sp, #4]
   b5060:	484f      	ldr	r0, [pc, #316]	; (b51a0 <setup+0x3cc>)
   b5062:	f8cd 9000 	str.w	r9, [sp]
   b5066:	f003 fae9 	bl	b863c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b506a:	f00b fec7 	bl	c0dfc <_ZN9TimeClass5monthEv>
   b506e:	9009      	str	r0, [sp, #36]	; 0x24
   b5070:	f00b feb8 	bl	c0de4 <_ZN9TimeClass3dayEv>
   b5074:	4682      	mov	sl, r0
   b5076:	f00b fec9 	bl	c0e0c <_ZN9TimeClass4yearEv>
   b507a:	4683      	mov	fp, r0
   b507c:	f00b fe8e 	bl	c0d9c <_ZN9TimeClass4hourEv>
   b5080:	9008      	str	r0, [sp, #32]
   b5082:	f00b fe97 	bl	c0db4 <_ZN9TimeClass6minuteEv>
   b5086:	9007      	str	r0, [sp, #28]
   b5088:	f00b fea0 	bl	c0dcc <_ZN9TimeClass6secondEv>
   b508c:	9a08      	ldr	r2, [sp, #32]
   b508e:	9907      	ldr	r1, [sp, #28]
   b5090:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5092:	9004      	str	r0, [sp, #16]
   b5094:	e9cd b201 	strd	fp, r2, [sp, #4]
   b5098:	9103      	str	r1, [sp, #12]
   b509a:	4a43      	ldr	r2, [pc, #268]	; (b51a8 <setup+0x3d4>)
   b509c:	f8cd a000 	str.w	sl, [sp]
   b50a0:	2110      	movs	r1, #16
   b50a2:	a80b      	add	r0, sp, #44	; 0x2c
   b50a4:	f009 f916 	bl	be2d4 <snprintf>
    strcpy(filename,DEF_FILENAME);              //Copy in all of the necessary elements of the file name
   b50a8:	4940      	ldr	r1, [pc, #256]	; (b51ac <setup+0x3d8>)
   b50aa:	4841      	ldr	r0, [pc, #260]	; (b51b0 <setup+0x3dc>)
   b50ac:	f00f faca 	bl	c4644 <strcpy>
    strcat(filename,timestamp);
   b50b0:	a90b      	add	r1, sp, #44	; 0x2c
   b50b2:	483f      	ldr	r0, [pc, #252]	; (b51b0 <setup+0x3dc>)
   b50b4:	f00f fa96 	bl	c45e4 <strcat>
    strcpy(filenameMessages,filename);
   b50b8:	493d      	ldr	r1, [pc, #244]	; (b51b0 <setup+0x3dc>)
   b50ba:	483e      	ldr	r0, [pc, #248]	; (b51b4 <setup+0x3e0>)
   b50bc:	f00f fac2 	bl	c4644 <strcpy>
    strcat(filename,".csv");
   b50c0:	493d      	ldr	r1, [pc, #244]	; (b51b8 <setup+0x3e4>)
   b50c2:	483b      	ldr	r0, [pc, #236]	; (b51b0 <setup+0x3dc>)
   b50c4:	f00f fa8e 	bl	c45e4 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b50c8:	493c      	ldr	r1, [pc, #240]	; (b51bc <setup+0x3e8>)
   b50ca:	483a      	ldr	r0, [pc, #232]	; (b51b4 <setup+0x3e0>)
   b50cc:	f00f fa8a 	bl	c45e4 <strcat>
    Serial.println(filename);                   //Print the filenames to the console for debugging
   b50d0:	f00c fafc 	bl	c16cc <_Z16_fetch_usbserialv>
   b50d4:	4936      	ldr	r1, [pc, #216]	; (b51b0 <setup+0x3dc>)
   b50d6:	f00a fdd0 	bl	bfc7a <_ZN5Print7printlnEPKc>
    Serial.println(filenameMessages);
   b50da:	f00c faf7 	bl	c16cc <_Z16_fetch_usbserialv>
   b50de:	4935      	ldr	r1, [pc, #212]	; (b51b4 <setup+0x3e0>)
   b50e0:	f00a fdcb 	bl	bfc7a <_ZN5Print7printlnEPKc>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b50e4:	4622      	mov	r2, r4
   b50e6:	4836      	ldr	r0, [pc, #216]	; (b51c0 <setup+0x3ec>)
   b50e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b50ec:	f7ff f900 	bl	b42f0 <_ZN5Timer6_startEjb.isra.0>
   b50f0:	4622      	mov	r2, r4
   b50f2:	e069      	b.n	b51c8 <setup+0x3f4>
   b50f4:	2003e588 	.word	0x2003e588
   b50f8:	2003e58c 	.word	0x2003e58c
   b50fc:	2003e560 	.word	0x2003e560
   b5100:	2003e561 	.word	0x2003e561
   b5104:	000b4319 	.word	0x000b4319
   b5108:	2003de1c 	.word	0x2003de1c
   b510c:	2003e0b9 	.word	0x2003e0b9
   b5110:	2003dd48 	.word	0x2003dd48
   b5114:	2003dd58 	.word	0x2003dd58
   b5118:	2003ded4 	.word	0x2003ded4
   b511c:	2003dd6c 	.word	0x2003dd6c
   b5120:	000b4be5 	.word	0x000b4be5
   b5124:	000c6a5c 	.word	0x000c6a5c
   b5128:	000b4c35 	.word	0x000b4c35
   b512c:	000c6a62 	.word	0x000c6a62
   b5130:	000c1027 	.word	0x000c1027
   b5134:	2003dd69 	.word	0x2003dd69
   b5138:	2003e55c 	.word	0x2003e55c
   b513c:	2003ddac 	.word	0x2003ddac
   b5140:	2003ddf4 	.word	0x2003ddf4
   b5144:	2003ddf8 	.word	0x2003ddf8
   b5148:	2003e0b4 	.word	0x2003e0b4
   b514c:	2003dd80 	.word	0x2003dd80
   b5150:	2003dd40 	.word	0x2003dd40
   b5154:	2003ddb0 	.word	0x2003ddb0
   b5158:	2003e0b0 	.word	0x2003e0b0
   b515c:	2003e0b8 	.word	0x2003e0b8
   b5160:	2003dd6a 	.word	0x2003dd6a
   b5164:	2003e5d8 	.word	0x2003e5d8
   b5168:	2003e562 	.word	0x2003e562
   b516c:	2003e5c9 	.word	0x2003e5c9
   b5170:	2003e5ee 	.word	0x2003e5ee
   b5174:	2003e5ef 	.word	0x2003e5ef
   b5178:	2003dd98 	.word	0x2003dd98
   b517c:	2003e5e4 	.word	0x2003e5e4
   b5180:	2003e0bc 	.word	0x2003e0bc
   b5184:	2003e0a8 	.word	0x2003e0a8
   b5188:	2003dda0 	.word	0x2003dda0
   b518c:	2003dd35 	.word	0x2003dd35
   b5190:	2003db28 	.word	0x2003db28
   b5194:	2003dd88 	.word	0x2003dd88
   b5198:	2003dd44 	.word	0x2003dd44
   b519c:	00061a80 	.word	0x00061a80
   b51a0:	2003de20 	.word	0x2003de20
   b51a4:	000c6a70 	.word	0x000c6a70
   b51a8:	000c6a9b 	.word	0x000c6a9b
   b51ac:	000c6ab4 	.word	0x000c6ab4
   b51b0:	2003ddb2 	.word	0x2003ddb2
   b51b4:	2003ddd0 	.word	0x2003ddd0
   b51b8:	000c6abd 	.word	0x000c6abd
   b51bc:	000c6ac2 	.word	0x000c6ac2
   b51c0:	2003e5f0 	.word	0x2003e5f0
   b51c4:	2003ded5 	.word	0x2003ded5
   b51c8:	482f      	ldr	r0, [pc, #188]	; (b5288 <setup+0x4b4>)
   b51ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51ce:	f7ff f88f 	bl	b42f0 <_ZN5Timer6_startEjb.isra.0>
   b51d2:	4622      	mov	r2, r4
   b51d4:	482d      	ldr	r0, [pc, #180]	; (b528c <setup+0x4b8>)
   b51d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51da:	f7ff f889 	bl	b42f0 <_ZN5Timer6_startEjb.isra.0>
      dataMode_{dataMode}
   b51de:	4b2c      	ldr	r3, [pc, #176]	; (b5290 <setup+0x4bc>)
   b51e0:	930f      	str	r3, [sp, #60]	; 0x3c
    if (!sd.begin(chipSelect, SD_SCK_MHZ(8))) {     //Try to connect to the SD card
   b51e2:	482c      	ldr	r0, [pc, #176]	; (b5294 <setup+0x4c0>)
   b51e4:	4b2c      	ldr	r3, [pc, #176]	; (b5298 <setup+0x4c4>)
   b51e6:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
   b51ea:	aa0f      	add	r2, sp, #60	; 0x3c
   b51ec:	2108      	movs	r1, #8
   b51ee:	9311      	str	r3, [sp, #68]	; 0x44
   b51f0:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
   b51f4:	f7ff face 	bl	b4794 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b51f8:	4604      	mov	r4, r0
   b51fa:	b9e8      	cbnz	r0, b5238 <setup+0x464>
        Serial.println("Error: could not connect to SD card!");     //If not, warn the user in the console
   b51fc:	f00c fa66 	bl	c16cc <_Z16_fetch_usbserialv>
   b5200:	4926      	ldr	r1, [pc, #152]	; (b529c <setup+0x4c8>)
   b5202:	f00a fd3a 	bl	bfc7a <_ZN5Print7printlnEPKc>
        logSensors = false;                         //Set flags that the SD card is not available which will warn the user on the CChub
   b5206:	f888 4000 	strb.w	r4, [r8]
        logMessages = false;
   b520a:	703c      	strb	r4, [r7, #0]
        SDAvail = false;
   b520c:	7034      	strb	r4, [r6, #0]
   b520e:	f008 fcd9 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    while(millis() - mtrArmTime < MTR_IDLE_ARM) delay(5);   //Check that the we've been in this setup function for at least two seconds so the ESC's will arm and allow movement
   b5212:	1b40      	subs	r0, r0, r5
   b5214:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5218:	d233      	bcs.n	b5282 <setup+0x4ae>
   b521a:	2005      	movs	r0, #5
   b521c:	f00b fe18 	bl	c0e50 <delay>
   b5220:	e7f5      	b.n	b520e <setup+0x43a>
   b5222:	f009 fcc5 	bl	bebb0 <_ZNK8particle7BleUuid8rawBytesEv>
   b5226:	9400      	str	r4, [sp, #0]
   b5228:	4602      	mov	r2, r0
   b522a:	2310      	movs	r3, #16
   b522c:	2107      	movs	r1, #7
   b522e:	e6cf      	b.n	b4fd0 <setup+0x1fc>
    else Serial.println("LIS3MDL Found!");
   b5230:	f00c fa4c 	bl	c16cc <_Z16_fetch_usbserialv>
   b5234:	491a      	ldr	r1, [pc, #104]	; (b52a0 <setup+0x4cc>)
   b5236:	e6f4      	b.n	b5022 <setup+0x24e>
    if(logSensors){                                 //Logsensors enables logging of sensor data, if enabled, then create the file on the SD card
   b5238:	f898 3000 	ldrb.w	r3, [r8]
   b523c:	b163      	cbz	r3, b5258 <setup+0x484>
        myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b523e:	4919      	ldr	r1, [pc, #100]	; (b52a4 <setup+0x4d0>)
   b5240:	4819      	ldr	r0, [pc, #100]	; (b52a8 <setup+0x4d4>)
   b5242:	f244 2202 	movw	r2, #16898	; 0x4202
   b5246:	f7ff fa27 	bl	b4698 <_ZN7FatFile4openEPKci>
        myFile.println(FILE_LABELS);
   b524a:	4918      	ldr	r1, [pc, #96]	; (b52ac <setup+0x4d8>)
   b524c:	4818      	ldr	r0, [pc, #96]	; (b52b0 <setup+0x4dc>)
   b524e:	f00a fd14 	bl	bfc7a <_ZN5Print7printlnEPKc>
        myFile.close();
   b5252:	4815      	ldr	r0, [pc, #84]	; (b52a8 <setup+0x4d4>)
   b5254:	f002 fa68 	bl	b7728 <_ZN7FatFile5closeEv>
    if(logMessages){                                //Logsensors enables logging of messages, if enabled, then create the file on the SD card
   b5258:	783b      	ldrb	r3, [r7, #0]
   b525a:	2b00      	cmp	r3, #0
   b525c:	d0d7      	beq.n	b520e <setup+0x43a>
   b525e:	4815      	ldr	r0, [pc, #84]	; (b52b4 <setup+0x4e0>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b5260:	7c03      	ldrb	r3, [r0, #16]
   b5262:	b92b      	cbnz	r3, b5270 <setup+0x49c>
   b5264:	4914      	ldr	r1, [pc, #80]	; (b52b8 <setup+0x4e4>)
   b5266:	f244 2202 	movw	r2, #16898	; 0x4202
   b526a:	3010      	adds	r0, #16
   b526c:	f7ff fa14 	bl	b4698 <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] WaterBot %d: Started Logging!",BOTNUM);
   b5270:	4912      	ldr	r1, [pc, #72]	; (b52bc <setup+0x4e8>)
   b5272:	4810      	ldr	r0, [pc, #64]	; (b52b4 <setup+0x4e0>)
   b5274:	2202      	movs	r2, #2
   b5276:	f7ff f8a1 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b527a:	4811      	ldr	r0, [pc, #68]	; (b52c0 <setup+0x4ec>)
   b527c:	f002 fa54 	bl	b7728 <_ZN7FatFile5closeEv>
   b5280:	e7c5      	b.n	b520e <setup+0x43a>
}
   b5282:	b015      	add	sp, #84	; 0x54
   b5284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5288:	2003de00 	.word	0x2003de00
   b528c:	2003e5ac 	.word	0x2003e5ac
   b5290:	000c6d3c 	.word	0x000c6d3c
   b5294:	2003e0c4 	.word	0x2003e0c4
   b5298:	007a1200 	.word	0x007a1200
   b529c:	000c6acb 	.word	0x000c6acb
   b52a0:	000c6a8c 	.word	0x000c6a8c
   b52a4:	2003ddb2 	.word	0x2003ddb2
   b52a8:	2003df0c 	.word	0x2003df0c
   b52ac:	000c6af0 	.word	0x000c6af0
   b52b0:	2003defc 	.word	0x2003defc
   b52b4:	2003de7c 	.word	0x2003de7c
   b52b8:	2003ddd0 	.word	0x2003ddd0
   b52bc:	000c6b46 	.word	0x000c6b46
   b52c0:	2003de8c 	.word	0x2003de8c
   b52c4:	00000000 	.word	0x00000000

000b52c8 <_Z12readPowerSysv>:
uint8_t readPowerSys(){
   b52c8:	b510      	push	{r4, lr}
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   b52ca:	4b31      	ldr	r3, [pc, #196]	; (b5390 <_Z12readPowerSysv+0xc8>)
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b52cc:	4c31      	ldr	r4, [pc, #196]	; (b5394 <_Z12readPowerSysv+0xcc>)
    int rawPCT = (int)(100 * (battVoltage - BAT_MIN)/(BAT_MAX - BAT_MIN));  //Get raw percentage from voltage divider
   b52ce:	6818      	ldr	r0, [r3, #0]
   b52d0:	f00e fd46 	bl	c3d60 <__aeabi_f2d>
   b52d4:	a328      	add	r3, pc, #160	; (adr r3, b5378 <_Z12readPowerSysv+0xb0>)
   b52d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52da:	f00e fbe1 	bl	c3aa0 <__aeabi_dsub>
   b52de:	4b2e      	ldr	r3, [pc, #184]	; (b5398 <_Z12readPowerSysv+0xd0>)
   b52e0:	2200      	movs	r2, #0
   b52e2:	f00e fd95 	bl	c3e10 <__aeabi_dmul>
   b52e6:	a326      	add	r3, pc, #152	; (adr r3, b5380 <_Z12readPowerSysv+0xb8>)
   b52e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b52ec:	f00e feba 	bl	c4064 <__aeabi_ddiv>
   b52f0:	f00f f83e 	bl	c4370 <__aeabi_d2iz>
    if(rawPCT < 0) rawPCT = 0;                                              //Max/min percentage so there is a slight deadzone at either end
   b52f4:	2864      	cmp	r0, #100	; 0x64
   b52f6:	4603      	mov	r3, r0
   b52f8:	bfa8      	it	ge
   b52fa:	2364      	movge	r3, #100	; 0x64
    battPercent = (uint8_t) rawPCT;                                         //Copy raw percentage into global variable
   b52fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b5300:	2814      	cmp	r0, #20
   b5302:	7023      	strb	r3, [r4, #0]
    if(battPercent <= LOW_BATT_PCT) lowBattery = true;                      //Check if battery percentage is low, if low then set flag so the LED flashes and the CChub pops up an alert
   b5304:	4b25      	ldr	r3, [pc, #148]	; (b539c <_Z12readPowerSysv+0xd4>)
   b5306:	bfcc      	ite	gt
   b5308:	2000      	movgt	r0, #0
   b530a:	2001      	movle	r0, #1
   b530c:	7018      	strb	r0, [r3, #0]
    battCurrent = (float) analogRead(BATT_ISENSE) * BAT_ISENSE_MULT / 4095; //Read the amplified input from the shunt from the batter and solar array and calculate the multiplier based on the resistor value and datasheet
   b530e:	2010      	movs	r0, #16
   b5310:	f00c fe75 	bl	c1ffe <analogRead>
   b5314:	ee07 0a90 	vmov	s15, r0
   b5318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b531c:	ee17 0a90 	vmov	r0, s15
   b5320:	f00e fd1e 	bl	c3d60 <__aeabi_f2d>
   b5324:	4b1e      	ldr	r3, [pc, #120]	; (b53a0 <_Z12readPowerSysv+0xd8>)
   b5326:	2200      	movs	r2, #0
   b5328:	f00e fd72 	bl	c3e10 <__aeabi_dmul>
   b532c:	a316      	add	r3, pc, #88	; (adr r3, b5388 <_Z12readPowerSysv+0xc0>)
   b532e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5332:	f00e fe97 	bl	c4064 <__aeabi_ddiv>
   b5336:	f00f f863 	bl	c4400 <__aeabi_d2f>
   b533a:	4b1a      	ldr	r3, [pc, #104]	; (b53a4 <_Z12readPowerSysv+0xdc>)
   b533c:	6018      	str	r0, [r3, #0]
    solarCurrent = (float) analogRead(SOL_ISENSE) * SLR_ISENSE_MULT / 4095;
   b533e:	2011      	movs	r0, #17
   b5340:	f00c fe5d 	bl	c1ffe <analogRead>
   b5344:	ee07 0a90 	vmov	s15, r0
   b5348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b534c:	ee17 0a90 	vmov	r0, s15
   b5350:	f00e fd06 	bl	c3d60 <__aeabi_f2d>
   b5354:	4b14      	ldr	r3, [pc, #80]	; (b53a8 <_Z12readPowerSysv+0xe0>)
   b5356:	2200      	movs	r2, #0
   b5358:	f00e fd5a 	bl	c3e10 <__aeabi_dmul>
   b535c:	a30a      	add	r3, pc, #40	; (adr r3, b5388 <_Z12readPowerSysv+0xc0>)
   b535e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5362:	f00e fe7f 	bl	c4064 <__aeabi_ddiv>
   b5366:	f00f f84b 	bl	c4400 <__aeabi_d2f>
   b536a:	4b10      	ldr	r3, [pc, #64]	; (b53ac <_Z12readPowerSysv+0xe4>)
   b536c:	6018      	str	r0, [r3, #0]
}
   b536e:	7820      	ldrb	r0, [r4, #0]
   b5370:	bd10      	pop	{r4, pc}
   b5372:	bf00      	nop
   b5374:	f3af 8000 	nop.w
   b5378:	66666666 	.word	0x66666666
   b537c:	40246666 	.word	0x40246666
   b5380:	cccccccc 	.word	0xcccccccc
   b5384:	4018cccc 	.word	0x4018cccc
   b5388:	00000000 	.word	0x00000000
   b538c:	40affe00 	.word	0x40affe00
   b5390:	2003dd9c 	.word	0x2003dd9c
   b5394:	2003dd98 	.word	0x2003dd98
   b5398:	40590000 	.word	0x40590000
   b539c:	2003dedc 	.word	0x2003dedc
   b53a0:	40408000 	.word	0x40408000
   b53a4:	2003dd94 	.word	0x2003dd94
   b53a8:	40308000 	.word	0x40308000
   b53ac:	2003e584 	.word	0x2003e584

000b53b0 <_Z18readCompassHeadingff>:
float readCompassHeading(float x_accel, float y_accel){
   b53b0:	b538      	push	{r3, r4, r5, lr}
   b53b2:	eef0 7a60 	vmov.f32	s15, s1
   b53b6:	ed2d 8b04 	vpush	{d8-d9}
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
   b53ba:	eef0 0a40 	vmov.f32	s1, s0
   b53be:	eeb0 0a67 	vmov.f32	s0, s15
   b53c2:	f00d f877 	bl	c24b4 <atan2f>
   b53c6:	ee10 0a10 	vmov	r0, s0
    float rawHeading = atan2(y_accel, x_accel) * 180.0 / M_PI;  //Convert x and y compass acceleration to a heading
   b53ca:	f00e fcc9 	bl	c3d60 <__aeabi_f2d>
   b53ce:	4b8e      	ldr	r3, [pc, #568]	; (b5608 <_Z18readCompassHeadingff+0x258>)
   b53d0:	2200      	movs	r2, #0
   b53d2:	f00e fd1d 	bl	c3e10 <__aeabi_dmul>
   b53d6:	a384      	add	r3, pc, #528	; (adr r3, b55e8 <_Z18readCompassHeadingff+0x238>)
   b53d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b53dc:	f00e fe42 	bl	c4064 <__aeabi_ddiv>
   b53e0:	f00f f80e 	bl	c4400 <__aeabi_d2f>
   b53e4:	ee08 0a10 	vmov	s16, r0
    if(rawHeading >= N_BEARING && rawHeading < NE_BEARING){
   b53e8:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   b53ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b53f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b53f4:	eeb3 9a0f 	vmov.f32	s18, #63	; 0x41f80000  31.0
   b53f8:	db13      	blt.n	b5422 <_Z18readCompassHeadingff+0x72>
   b53fa:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b53fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5402:	d50e      	bpl.n	b5422 <_Z18readCompassHeadingff+0x72>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b5404:	f00e fcac 	bl	c3d60 <__aeabi_f2d>
   b5408:	4b80      	ldr	r3, [pc, #512]	; (b560c <_Z18readCompassHeadingff+0x25c>)
   b540a:	2200      	movs	r2, #0
   b540c:	f00e fb48 	bl	c3aa0 <__aeabi_dsub>
   b5410:	4b7f      	ldr	r3, [pc, #508]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b5412:	2200      	movs	r2, #0
   b5414:	f00e fcfc 	bl	c3e10 <__aeabi_dmul>
   b5418:	4b7e      	ldr	r3, [pc, #504]	; (b5614 <_Z18readCompassHeadingff+0x264>)
   b541a:	2200      	movs	r2, #0
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b541c:	f00e fe22 	bl	c4064 <__aeabi_ddiv>
   b5420:	e021      	b.n	b5466 <_Z18readCompassHeadingff+0xb6>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b5422:	ee18 0a10 	vmov	r0, s16
   b5426:	f00e fc9b 	bl	c3d60 <__aeabi_f2d>
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b542a:	eeb4 8ac9 	vcmpe.f32	s16, s18
   b542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5432:	eddf 7a79 	vldr	s15, [pc, #484]	; b5618 <_Z18readCompassHeadingff+0x268>
        return (45.0 * (rawHeading-N_BEARING)/diff);
   b5436:	4604      	mov	r4, r0
   b5438:	460d      	mov	r5, r1
    else if(rawHeading >= NE_BEARING && rawHeading < E_BEARING){
   b543a:	db1b      	blt.n	b5474 <_Z18readCompassHeadingff+0xc4>
   b543c:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5444:	d516      	bpl.n	b5474 <_Z18readCompassHeadingff+0xc4>
        return (45.0 * (rawHeading-NE_BEARING)/diff) + 45.0;
   b5446:	4b75      	ldr	r3, [pc, #468]	; (b561c <_Z18readCompassHeadingff+0x26c>)
   b5448:	2200      	movs	r2, #0
   b544a:	f00e fb29 	bl	c3aa0 <__aeabi_dsub>
   b544e:	4b70      	ldr	r3, [pc, #448]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b5450:	2200      	movs	r2, #0
   b5452:	f00e fcdd 	bl	c3e10 <__aeabi_dmul>
   b5456:	4b72      	ldr	r3, [pc, #456]	; (b5620 <_Z18readCompassHeadingff+0x270>)
   b5458:	2200      	movs	r2, #0
   b545a:	f00e fe03 	bl	c4064 <__aeabi_ddiv>
   b545e:	4b6c      	ldr	r3, [pc, #432]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b5460:	2200      	movs	r2, #0
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b5462:	f00e fb1f 	bl	c3aa4 <__adddf3>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b5466:	f00e ffcb 	bl	c4400 <__aeabi_d2f>
}
   b546a:	ecbd 8b04 	vpop	{d8-d9}
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b546e:	ee00 0a10 	vmov	s0, r0
}
   b5472:	bd38      	pop	{r3, r4, r5, pc}
    else if(rawHeading >= E_BEARING && rawHeading < SE_BEARING){
   b5474:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b547c:	eddf 7a69 	vldr	s15, [pc, #420]	; b5624 <_Z18readCompassHeadingff+0x274>
   b5480:	db15      	blt.n	b54ae <_Z18readCompassHeadingff+0xfe>
   b5482:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b548a:	d510      	bpl.n	b54ae <_Z18readCompassHeadingff+0xfe>
        return (45.0 * (rawHeading-E_BEARING)/diff) + 90.0;
   b548c:	4b66      	ldr	r3, [pc, #408]	; (b5628 <_Z18readCompassHeadingff+0x278>)
   b548e:	2200      	movs	r2, #0
   b5490:	4620      	mov	r0, r4
   b5492:	4629      	mov	r1, r5
   b5494:	f00e fb04 	bl	c3aa0 <__aeabi_dsub>
   b5498:	4b5d      	ldr	r3, [pc, #372]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b549a:	2200      	movs	r2, #0
   b549c:	f00e fcb8 	bl	c3e10 <__aeabi_dmul>
   b54a0:	4b62      	ldr	r3, [pc, #392]	; (b562c <_Z18readCompassHeadingff+0x27c>)
   b54a2:	2200      	movs	r2, #0
   b54a4:	f00e fdde 	bl	c4064 <__aeabi_ddiv>
   b54a8:	4b61      	ldr	r3, [pc, #388]	; (b5630 <_Z18readCompassHeadingff+0x280>)
   b54aa:	2200      	movs	r2, #0
   b54ac:	e7d9      	b.n	b5462 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= SE_BEARING && rawHeading < S_BEARING){
   b54ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b54b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54b6:	db18      	blt.n	b54ea <_Z18readCompassHeadingff+0x13a>
   b54b8:	eddf 7a5e 	vldr	s15, [pc, #376]	; b5634 <_Z18readCompassHeadingff+0x284>
   b54bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b54c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54c4:	d511      	bpl.n	b54ea <_Z18readCompassHeadingff+0x13a>
        return (45.0 * (rawHeading-SE_BEARING)/diff) + 135.0;
   b54c6:	4b5c      	ldr	r3, [pc, #368]	; (b5638 <_Z18readCompassHeadingff+0x288>)
   b54c8:	2200      	movs	r2, #0
   b54ca:	4620      	mov	r0, r4
   b54cc:	4629      	mov	r1, r5
   b54ce:	f00e fae7 	bl	c3aa0 <__aeabi_dsub>
   b54d2:	4b4f      	ldr	r3, [pc, #316]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b54d4:	2200      	movs	r2, #0
   b54d6:	f00e fc9b 	bl	c3e10 <__aeabi_dmul>
   b54da:	4b58      	ldr	r3, [pc, #352]	; (b563c <_Z18readCompassHeadingff+0x28c>)
   b54dc:	2200      	movs	r2, #0
   b54de:	f00e fdc1 	bl	c4064 <__aeabi_ddiv>
   b54e2:	a343      	add	r3, pc, #268	; (adr r3, b55f0 <_Z18readCompassHeadingff+0x240>)
   b54e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b54e8:	e7bb      	b.n	b5462 <_Z18readCompassHeadingff+0xb2>
    else if(rawHeading >= NW_BEARING && rawHeading < N_BEARING){
   b54ea:	eebb 7a02 	vmov.f32	s14, #178	; 0xc1900000 -18.0
   b54ee:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b54f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b54f6:	db11      	blt.n	b551c <_Z18readCompassHeadingff+0x16c>
   b54f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
   b54fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5500:	d50c      	bpl.n	b551c <_Z18readCompassHeadingff+0x16c>
        return (-45.0 * (rawHeading-N_BEARING)/diff);
   b5502:	4b42      	ldr	r3, [pc, #264]	; (b560c <_Z18readCompassHeadingff+0x25c>)
   b5504:	2200      	movs	r2, #0
   b5506:	4620      	mov	r0, r4
   b5508:	4629      	mov	r1, r5
   b550a:	f00e fac9 	bl	c3aa0 <__aeabi_dsub>
   b550e:	4b4c      	ldr	r3, [pc, #304]	; (b5640 <_Z18readCompassHeadingff+0x290>)
   b5510:	2200      	movs	r2, #0
   b5512:	f00e fc7d 	bl	c3e10 <__aeabi_dmul>
   b5516:	4b4b      	ldr	r3, [pc, #300]	; (b5644 <_Z18readCompassHeadingff+0x294>)
   b5518:	2200      	movs	r2, #0
   b551a:	e77f      	b.n	b541c <_Z18readCompassHeadingff+0x6c>
    else if(rawHeading >= W_BEARING && rawHeading < NW_BEARING){
   b551c:	eddf 7a4a 	vldr	s15, [pc, #296]	; b5648 <_Z18readCompassHeadingff+0x298>
   b5520:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5528:	db17      	blt.n	b555a <_Z18readCompassHeadingff+0x1aa>
   b552a:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b552e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5532:	d512      	bpl.n	b555a <_Z18readCompassHeadingff+0x1aa>
        return (-45.0 * (rawHeading-NW_BEARING)/diff) - 45.0;
   b5534:	4b45      	ldr	r3, [pc, #276]	; (b564c <_Z18readCompassHeadingff+0x29c>)
   b5536:	2200      	movs	r2, #0
   b5538:	4620      	mov	r0, r4
   b553a:	4629      	mov	r1, r5
   b553c:	f00e fab2 	bl	c3aa4 <__adddf3>
   b5540:	4b3f      	ldr	r3, [pc, #252]	; (b5640 <_Z18readCompassHeadingff+0x290>)
   b5542:	2200      	movs	r2, #0
   b5544:	f00e fc64 	bl	c3e10 <__aeabi_dmul>
   b5548:	4b41      	ldr	r3, [pc, #260]	; (b5650 <_Z18readCompassHeadingff+0x2a0>)
   b554a:	2200      	movs	r2, #0
   b554c:	f00e fd8a 	bl	c4064 <__aeabi_ddiv>
   b5550:	4b2f      	ldr	r3, [pc, #188]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b5552:	2200      	movs	r2, #0
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b5554:	f00e faa4 	bl	c3aa0 <__aeabi_dsub>
   b5558:	e785      	b.n	b5466 <_Z18readCompassHeadingff+0xb6>
    else if(rawHeading >=SW_BEARING && rawHeading < W_BEARING){
   b555a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; b5654 <_Z18readCompassHeadingff+0x2a4>
   b555e:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b5562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5566:	db15      	blt.n	b5594 <_Z18readCompassHeadingff+0x1e4>
   b5568:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5570:	d510      	bpl.n	b5594 <_Z18readCompassHeadingff+0x1e4>
        return (-45.0 * (rawHeading-W_BEARING)/diff) - 90.0;
   b5572:	4b39      	ldr	r3, [pc, #228]	; (b5658 <_Z18readCompassHeadingff+0x2a8>)
   b5574:	2200      	movs	r2, #0
   b5576:	4620      	mov	r0, r4
   b5578:	4629      	mov	r1, r5
   b557a:	f00e fa93 	bl	c3aa4 <__adddf3>
   b557e:	4b30      	ldr	r3, [pc, #192]	; (b5640 <_Z18readCompassHeadingff+0x290>)
   b5580:	2200      	movs	r2, #0
   b5582:	f00e fc45 	bl	c3e10 <__aeabi_dmul>
   b5586:	4b35      	ldr	r3, [pc, #212]	; (b565c <_Z18readCompassHeadingff+0x2ac>)
   b5588:	2200      	movs	r2, #0
   b558a:	f00e fd6b 	bl	c4064 <__aeabi_ddiv>
   b558e:	4b28      	ldr	r3, [pc, #160]	; (b5630 <_Z18readCompassHeadingff+0x280>)
   b5590:	2200      	movs	r2, #0
   b5592:	e7df      	b.n	b5554 <_Z18readCompassHeadingff+0x1a4>
        if(rawHeading > 0){
   b5594:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b5598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b559c:	f04f 0200 	mov.w	r2, #0
        if(rawHeading > 0){
   b55a0:	dd10      	ble.n	b55c4 <_Z18readCompassHeadingff+0x214>
            return -180.0 + (45.0 * (rawHeading - S_BEARING)/maindiff) ;
   b55a2:	4b2f      	ldr	r3, [pc, #188]	; (b5660 <_Z18readCompassHeadingff+0x2b0>)
   b55a4:	4620      	mov	r0, r4
   b55a6:	4629      	mov	r1, r5
   b55a8:	f00e fa7a 	bl	c3aa0 <__aeabi_dsub>
   b55ac:	4b18      	ldr	r3, [pc, #96]	; (b5610 <_Z18readCompassHeadingff+0x260>)
   b55ae:	2200      	movs	r2, #0
   b55b0:	f00e fc2e 	bl	c3e10 <__aeabi_dmul>
   b55b4:	a310      	add	r3, pc, #64	; (adr r3, b55f8 <_Z18readCompassHeadingff+0x248>)
   b55b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55ba:	f00e fd53 	bl	c4064 <__aeabi_ddiv>
   b55be:	4b12      	ldr	r3, [pc, #72]	; (b5608 <_Z18readCompassHeadingff+0x258>)
   b55c0:	2200      	movs	r2, #0
   b55c2:	e7c7      	b.n	b5554 <_Z18readCompassHeadingff+0x1a4>
            return (45.0 * (diff/maindiff) * (rawHeading - SW_BEARING)/diff) - 135.0;
   b55c4:	4b27      	ldr	r3, [pc, #156]	; (b5664 <_Z18readCompassHeadingff+0x2b4>)
   b55c6:	4620      	mov	r0, r4
   b55c8:	4629      	mov	r1, r5
   b55ca:	f00e fa6b 	bl	c3aa4 <__adddf3>
   b55ce:	a30c      	add	r3, pc, #48	; (adr r3, b5600 <_Z18readCompassHeadingff+0x250>)
   b55d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55d4:	f00e fc1c 	bl	c3e10 <__aeabi_dmul>
   b55d8:	4b23      	ldr	r3, [pc, #140]	; (b5668 <_Z18readCompassHeadingff+0x2b8>)
   b55da:	2200      	movs	r2, #0
   b55dc:	f00e fd42 	bl	c4064 <__aeabi_ddiv>
   b55e0:	a303      	add	r3, pc, #12	; (adr r3, b55f0 <_Z18readCompassHeadingff+0x240>)
   b55e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b55e6:	e7b5      	b.n	b5554 <_Z18readCompassHeadingff+0x1a4>
   b55e8:	54442d18 	.word	0x54442d18
   b55ec:	400921fb 	.word	0x400921fb
   b55f0:	00000000 	.word	0x00000000
   b55f4:	4060e000 	.word	0x4060e000
   b55f8:	00000000 	.word	0x00000000
   b55fc:	4063a000 	.word	0x4063a000
   b5600:	bb000000 	.word	0xbb000000
   b5604:	403d3c54 	.word	0x403d3c54
   b5608:	40668000 	.word	0x40668000
   b560c:	40180000 	.word	0x40180000
   b5610:	40468000 	.word	0x40468000
   b5614:	40390000 	.word	0x40390000
   b5618:	42680000 	.word	0x42680000
   b561c:	403f0000 	.word	0x403f0000
   b5620:	403b0000 	.word	0x403b0000
   b5624:	42ac0000 	.word	0x42ac0000
   b5628:	404d0000 	.word	0x404d0000
   b562c:	403c0000 	.word	0x403c0000
   b5630:	40568000 	.word	0x40568000
   b5634:	42fa0000 	.word	0x42fa0000
   b5638:	40558000 	.word	0x40558000
   b563c:	40438000 	.word	0x40438000
   b5640:	c0468000 	.word	0xc0468000
   b5644:	c0380000 	.word	0xc0380000
   b5648:	c2200000 	.word	0xc2200000
   b564c:	40320000 	.word	0x40320000
   b5650:	c0360000 	.word	0xc0360000
   b5654:	c29c0000 	.word	0xc29c0000
   b5658:	40440000 	.word	0x40440000
   b565c:	c0430000 	.word	0xc0430000
   b5660:	405f4000 	.word	0x405f4000
   b5664:	40538000 	.word	0x40538000
   b5668:	40598000 	.word	0x40598000
   b566c:	00000000 	.word	0x00000000

000b5670 <_Z12calcDistanceffff>:
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5670:	b510      	push	{r4, lr}
   b5672:	ed2d 8b08 	vpush	{d8-d11}
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5676:	ee70 7a60 	vsub.f32	s15, s0, s1
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b567a:	b082      	sub	sp, #8
  return deg * (3.14159/180);   //Multiply by Pi/180
   b567c:	ee17 0a90 	vmov	r0, s15
float calcDistance(float lat1, float lat2, float lon1, float lon2){
   b5680:	eef0 aa41 	vmov.f32	s21, s2
   b5684:	eeb0 aa61 	vmov.f32	s20, s3
   b5688:	eef0 8a60 	vmov.f32	s17, s1
   b568c:	eeb0 8a40 	vmov.f32	s16, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b5690:	f00e fb66 	bl	c3d60 <__aeabi_f2d>
   b5694:	a342      	add	r3, pc, #264	; (adr r3, b57a0 <_Z12calcDistanceffff+0x130>)
   b5696:	e9d3 2300 	ldrd	r2, r3, [r3]
   b569a:	f00e fbb9 	bl	c3e10 <__aeabi_dmul>
   b569e:	f00e feaf 	bl	c4400 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56a2:	ee07 0a90 	vmov	s15, r0
   b56a6:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
   b56aa:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b56ae:	f00c fe8b 	bl	c23c8 <sinf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56b2:	ee18 0a90 	vmov	r0, s17
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56b6:	eeb0 9a40 	vmov.f32	s18, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56ba:	f00e fb51 	bl	c3d60 <__aeabi_f2d>
   b56be:	a338      	add	r3, pc, #224	; (adr r3, b57a0 <_Z12calcDistanceffff+0x130>)
   b56c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56c4:	f00e fba4 	bl	c3e10 <__aeabi_dmul>
   b56c8:	f00e fe9a 	bl	c4400 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56cc:	ee00 0a10 	vmov	s0, r0
   b56d0:	f00c fe42 	bl	c2358 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56d4:	ee18 0a10 	vmov	r0, s16
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56d8:	eef0 8a40 	vmov.f32	s17, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56dc:	f00e fb40 	bl	c3d60 <__aeabi_f2d>
   b56e0:	a32f      	add	r3, pc, #188	; (adr r3, b57a0 <_Z12calcDistanceffff+0x130>)
   b56e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b56e6:	f00e fb93 	bl	c3e10 <__aeabi_dmul>
   b56ea:	f00e fe89 	bl	c4400 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56ee:	ee00 0a10 	vmov	s0, r0
   b56f2:	f00c fe31 	bl	c2358 <cosf>
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56f6:	ee7a 7aca 	vsub.f32	s15, s21, s20
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b56fa:	eef0 9a40 	vmov.f32	s19, s0
  return deg * (3.14159/180);   //Multiply by Pi/180
   b56fe:	ee17 0a90 	vmov	r0, s15
   b5702:	f00e fb2d 	bl	c3d60 <__aeabi_f2d>
   b5706:	a326      	add	r3, pc, #152	; (adr r3, b57a0 <_Z12calcDistanceffff+0x130>)
   b5708:	e9d3 2300 	ldrd	r2, r3, [r3]
   b570c:	f00e fb80 	bl	c3e10 <__aeabi_dmul>
   b5710:	f00e fe76 	bl	c4400 <__aeabi_d2f>
    float a = sinf(dLat/2) * sinf(dLat/2) + cosf(deg2rad(lat2)) * cosf(deg2rad(lat1)) * sinf(dLon/2) * sinf(dLon/2);    //Formula from a stackexchange post
   b5714:	ee07 0a90 	vmov	s15, r0
   b5718:	ee27 0a8b 	vmul.f32	s0, s15, s22
   b571c:	f00c fe54 	bl	c23c8 <sinf>
   b5720:	ee68 8aa9 	vmul.f32	s17, s17, s19
   b5724:	ee68 8a80 	vmul.f32	s17, s17, s0
   b5728:	ee28 8a80 	vmul.f32	s16, s17, s0
   b572c:	eea9 8a09 	vfma.f32	s16, s18, s18
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   b5730:	eeb0 0a48 	vmov.f32	s0, s16
   b5734:	f00c fec0 	bl	c24b8 <sqrtf>
    float c = 2 * atan2(sqrt(a), sqrt(1.0-a)); 
   b5738:	ee18 0a10 	vmov	r0, s16
   b573c:	ee10 4a10 	vmov	r4, s0
   b5740:	f00e fb0e 	bl	c3d60 <__aeabi_f2d>
   b5744:	4602      	mov	r2, r0
   b5746:	460b      	mov	r3, r1
   b5748:	2000      	movs	r0, #0
   b574a:	4913      	ldr	r1, [pc, #76]	; (b5798 <_Z12calcDistanceffff+0x128>)
   b574c:	f00e f9a8 	bl	c3aa0 <__aeabi_dsub>
   b5750:	ec41 0b10 	vmov	d0, r0, r1
   b5754:	f00c fe74 	bl	c2440 <sqrt>
      return atan2(__type(__y), __type(__x));
   b5758:	4620      	mov	r0, r4
   b575a:	ed8d 0b00 	vstr	d0, [sp]
   b575e:	f00e faff 	bl	c3d60 <__aeabi_f2d>
   b5762:	ed9d 1b00 	vldr	d1, [sp]
   b5766:	ec41 0b10 	vmov	d0, r0, r1
   b576a:	f00c fe67 	bl	c243c <atan2>
   b576e:	ec53 2b10 	vmov	r2, r3, d0
   b5772:	ee10 0a10 	vmov	r0, s0
   b5776:	4619      	mov	r1, r3
   b5778:	f00e f994 	bl	c3aa4 <__adddf3>
   b577c:	f00e fe40 	bl	c4400 <__aeabi_d2f>
}
   b5780:	ed9f 0a06 	vldr	s0, [pc, #24]	; b579c <_Z12calcDistanceffff+0x12c>
   b5784:	ee07 0a90 	vmov	s15, r0
   b5788:	ee27 0a80 	vmul.f32	s0, s15, s0
   b578c:	b002      	add	sp, #8
   b578e:	ecbd 8b08 	vpop	{d8-d11}
   b5792:	bd10      	pop	{r4, pc}
   b5794:	f3af 8000 	nop.w
   b5798:	3ff00000 	.word	0x3ff00000
   b579c:	4ac26d70 	.word	0x4ac26d70
   b57a0:	a50de270 	.word	0xa50de270
   b57a4:	3f91df45 	.word	0x3f91df45

000b57a8 <_Z9calcDeltaff>:
float calcDelta(float compassHead, float targetHead){
   b57a8:	b538      	push	{r3, r4, r5, lr}
    if(targetHead > 0){ 
   b57aa:	eef5 0ac0 	vcmpe.f32	s1, #0.0
   b57ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float calcDelta(float compassHead, float targetHead){
   b57b2:	ed2d 8b02 	vpush	{d8}
        if(compassHead > 0){
   b57b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
float calcDelta(float compassHead, float targetHead){
   b57ba:	eeb0 8a60 	vmov.f32	s16, s1
    if(targetHead > 0){ 
   b57be:	dd37      	ble.n	b5830 <_Z9calcDeltaff+0x88>
        if(compassHead > 0){
   b57c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b57c4:	dd04      	ble.n	b57d0 <_Z9calcDeltaff+0x28>
            return targetHead - compassHead;
   b57c6:	ee38 0a40 	vsub.f32	s0, s16, s0
}
   b57ca:	ecbd 8b02 	vpop	{d8}
   b57ce:	bd38      	pop	{r3, r4, r5, pc}
            float diff = -(180.0 - targetHead);
   b57d0:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5880 <_Z9calcDeltaff+0xd8>
   b57d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
   b57d8:	eef1 7a67 	vneg.f32	s15, s15
            if(diff < compassHead) return targetHead - compassHead;
   b57dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b57e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b57e4:	dcef      	bgt.n	b57c6 <_Z9calcDeltaff+0x1e>
            else return 0 - (180.0 + compassHead) - (180.0 - targetHead);
   b57e6:	ee10 0a10 	vmov	r0, s0
   b57ea:	f00e fab9 	bl	c3d60 <__aeabi_f2d>
   b57ee:	4b25      	ldr	r3, [pc, #148]	; (b5884 <_Z9calcDeltaff+0xdc>)
   b57f0:	2200      	movs	r2, #0
   b57f2:	f00e f957 	bl	c3aa4 <__adddf3>
   b57f6:	4602      	mov	r2, r0
   b57f8:	460b      	mov	r3, r1
   b57fa:	2000      	movs	r0, #0
   b57fc:	2100      	movs	r1, #0
   b57fe:	f00e f94f 	bl	c3aa0 <__aeabi_dsub>
   b5802:	4604      	mov	r4, r0
   b5804:	ee18 0a10 	vmov	r0, s16
   b5808:	460d      	mov	r5, r1
   b580a:	f00e faa9 	bl	c3d60 <__aeabi_f2d>
   b580e:	4602      	mov	r2, r0
   b5810:	460b      	mov	r3, r1
   b5812:	2000      	movs	r0, #0
   b5814:	491b      	ldr	r1, [pc, #108]	; (b5884 <_Z9calcDeltaff+0xdc>)
   b5816:	f00e f943 	bl	c3aa0 <__aeabi_dsub>
   b581a:	4602      	mov	r2, r0
   b581c:	460b      	mov	r3, r1
   b581e:	4620      	mov	r0, r4
   b5820:	4629      	mov	r1, r5
   b5822:	f00e f93d 	bl	c3aa0 <__aeabi_dsub>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b5826:	f00e fdeb 	bl	c4400 <__aeabi_d2f>
   b582a:	ee00 0a10 	vmov	s0, r0
   b582e:	e7cc      	b.n	b57ca <_Z9calcDeltaff+0x22>
        if(compassHead > 0){
   b5830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5834:	ddc7      	ble.n	b57c6 <_Z9calcDeltaff+0x1e>
            float diff = 180.0 + targetHead;
   b5836:	eddf 7a12 	vldr	s15, [pc, #72]	; b5880 <_Z9calcDeltaff+0xd8>
   b583a:	ee70 7aa7 	vadd.f32	s15, s1, s15
            if(diff > compassHead) return targetHead - compassHead;
   b583e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b5842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5846:	d4be      	bmi.n	b57c6 <_Z9calcDeltaff+0x1e>
            else return (180.0 - compassHead) + (180.0 + targetHead);
   b5848:	ee10 0a10 	vmov	r0, s0
   b584c:	f00e fa88 	bl	c3d60 <__aeabi_f2d>
   b5850:	4602      	mov	r2, r0
   b5852:	460b      	mov	r3, r1
   b5854:	2000      	movs	r0, #0
   b5856:	490b      	ldr	r1, [pc, #44]	; (b5884 <_Z9calcDeltaff+0xdc>)
   b5858:	f00e f922 	bl	c3aa0 <__aeabi_dsub>
   b585c:	4604      	mov	r4, r0
   b585e:	ee18 0a10 	vmov	r0, s16
   b5862:	460d      	mov	r5, r1
   b5864:	f00e fa7c 	bl	c3d60 <__aeabi_f2d>
   b5868:	4b06      	ldr	r3, [pc, #24]	; (b5884 <_Z9calcDeltaff+0xdc>)
   b586a:	2200      	movs	r2, #0
   b586c:	f00e f91a 	bl	c3aa4 <__adddf3>
   b5870:	4602      	mov	r2, r0
   b5872:	460b      	mov	r3, r1
   b5874:	4620      	mov	r0, r4
   b5876:	4629      	mov	r1, r5
   b5878:	f00e f914 	bl	c3aa4 <__adddf3>
   b587c:	e7d3      	b.n	b5826 <_Z9calcDeltaff+0x7e>
   b587e:	bf00      	nop
   b5880:	43340000 	.word	0x43340000
   b5884:	40668000 	.word	0x40668000

000b5888 <_Z15getPositionDatav>:
void getPositionData(){
   b5888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b588c:	ed2d 8b02 	vpush	{d8}
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b5890:	4c59      	ldr	r4, [pc, #356]	; (b59f8 <_Z15getPositionDatav+0x170>)
void getPositionData(){
   b5892:	b08b      	sub	sp, #44	; 0x2c
   b5894:	f008 f996 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    if(millis() - positionTimer > POS_POLL_TIME){       //Use a timer to slow the poll rate on GPS and Compass, as they do not same that quickly
   b5898:	6823      	ldr	r3, [r4, #0]
   b589a:	1ac0      	subs	r0, r0, r3
   b589c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b58a0:	f240 809c 	bls.w	b59dc <_Z15getPositionDatav+0x154>
   b58a4:	f008 f98e 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b58a8:	4b54      	ldr	r3, [pc, #336]	; (b59fc <_Z15getPositionDatav+0x174>)
        positionTimer = millis();                       //Reset timer
   b58aa:	6020      	str	r0, [r4, #0]
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b58ac:	2501      	movs	r5, #1
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b58ae:	4854      	ldr	r0, [pc, #336]	; (b5a00 <_Z15getPositionDatav+0x178>)
        updateMotorControl = true;                      //Indicate to motor control function that new position data is available
   b58b0:	701d      	strb	r5, [r3, #0]
        if(myGPS.isConnected()){                        //Only read from GPS if it is connected
   b58b2:	f240 414c 	movw	r1, #1100	; 0x44c
   b58b6:	f007 fd75 	bl	bd3a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
   b58ba:	4c52      	ldr	r4, [pc, #328]	; (b5a04 <_Z15getPositionDatav+0x17c>)
   b58bc:	2800      	cmp	r0, #0
   b58be:	f000 8092 	beq.w	b59e6 <_Z15getPositionDatav+0x15e>
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b58c2:	f240 414c 	movw	r1, #1100	; 0x44c
   b58c6:	484e      	ldr	r0, [pc, #312]	; (b5a00 <_Z15getPositionDatav+0x178>)
   b58c8:	ed9f 8a4f 	vldr	s16, [pc, #316]	; b5a08 <_Z15getPositionDatav+0x180>
   b58cc:	f007 fe0d 	bl	bd4ea <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>
   b58d0:	ee07 0a90 	vmov	s15, r0
   b58d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b58d8:	4b4c      	ldr	r3, [pc, #304]	; (b5a0c <_Z15getPositionDatav+0x184>)
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b58da:	4849      	ldr	r0, [pc, #292]	; (b5a00 <_Z15getPositionDatav+0x178>)
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b58dc:	ee87 7a88 	vdiv.f32	s14, s15, s16
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b58e0:	f240 414c 	movw	r1, #1100	; 0x44c
            latitude = ((float)myGPS.getLatitude())/1000000.0;      //Get latitude and divide by 1000000 to get in degrees
   b58e4:	ed83 7a00 	vstr	s14, [r3]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b58e8:	f007 fddc 	bl	bd4a4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>
   b58ec:	ee07 0a90 	vmov	s15, r0
   b58f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b58f4:	4b46      	ldr	r3, [pc, #280]	; (b5a10 <_Z15getPositionDatav+0x188>)
            GPSAvail = true;
   b58f6:	7025      	strb	r5, [r4, #0]
            longitude = ((float)myGPS.getLongitude())/1000000.0;    //Get longitude and divide by 1000000 to get in degrees
   b58f8:	ee87 7a88 	vdiv.f32	s14, s15, s16
   b58fc:	ed83 7a00 	vstr	s14, [r3]
        lis3mdl.read();                                 // get X Y and Z data at once
   b5900:	4844      	ldr	r0, [pc, #272]	; (b5a14 <_Z15getPositionDatav+0x18c>)
   b5902:	f002 fceb 	bl	b82dc <_ZN16Adafruit_LIS3MDL4readEv>
        bool CompassAvail = lis3mdl.getEvent(&event);   //Get event data over I2C from compass
   b5906:	4843      	ldr	r0, [pc, #268]	; (b5a14 <_Z15getPositionDatav+0x18c>)
   b5908:	a901      	add	r1, sp, #4
   b590a:	f002 fd2d 	bl	b8368 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>
        if(CompassAvail) compassHeading = readCompassHeading(event.magnetic.x,event.magnetic.y);
   b590e:	4604      	mov	r4, r0
   b5910:	b140      	cbz	r0, b5924 <_Z15getPositionDatav+0x9c>
   b5912:	eddd 0a07 	vldr	s1, [sp, #28]
   b5916:	ed9d 0a06 	vldr	s0, [sp, #24]
   b591a:	f7ff fd49 	bl	b53b0 <_Z18readCompassHeadingff>
   b591e:	4b3e      	ldr	r3, [pc, #248]	; (b5a18 <_Z15getPositionDatav+0x190>)
   b5920:	ed83 0a00 	vstr	s0, [r3]
        if(targetLat >= -90 && targetLat <= 90 && targetLon >= -90 && targetLon <= 90){         //Check that the target latitude and longitude are valid
   b5924:	4e3d      	ldr	r6, [pc, #244]	; (b5a1c <_Z15getPositionDatav+0x194>)
   b5926:	ed9f 6a3e 	vldr	s12, [pc, #248]	; b5a20 <_Z15getPositionDatav+0x198>
   b592a:	ed96 7a00 	vldr	s14, [r6]
   b592e:	eeb4 7ac6 	vcmpe.f32	s14, s12
   b5932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5936:	db51      	blt.n	b59dc <_Z15getPositionDatav+0x154>
   b5938:	eddf 6a3a 	vldr	s13, [pc, #232]	; b5a24 <_Z15getPositionDatav+0x19c>
   b593c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   b5940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5944:	d84a      	bhi.n	b59dc <_Z15getPositionDatav+0x154>
   b5946:	f8df 80f8 	ldr.w	r8, [pc, #248]	; b5a40 <_Z15getPositionDatav+0x1b8>
   b594a:	edd8 7a00 	vldr	s15, [r8]
   b594e:	eef4 7ac6 	vcmpe.f32	s15, s12
   b5952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5956:	db41      	blt.n	b59dc <_Z15getPositionDatav+0x154>
   b5958:	eef4 7ae6 	vcmpe.f32	s15, s13
   b595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5960:	d83c      	bhi.n	b59dc <_Z15getPositionDatav+0x154>
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b5962:	4f2a      	ldr	r7, [pc, #168]	; (b5a0c <_Z15getPositionDatav+0x184>)
   b5964:	f8df 90a8 	ldr.w	r9, [pc, #168]	; b5a10 <_Z15getPositionDatav+0x188>
   b5968:	edd7 0a00 	vldr	s1, [r7]
   b596c:	ed99 0a00 	vldr	s0, [r9]
   b5970:	4d2d      	ldr	r5, [pc, #180]	; (b5a28 <_Z15getPositionDatav+0x1a0>)
  { return __builtin_atan2f(__y, __x); }
   b5972:	ee77 0a60 	vsub.f32	s1, s14, s1
   b5976:	ee37 0ac0 	vsub.f32	s0, s15, s0
   b597a:	f00c fd9b 	bl	c24b4 <atan2f>
   b597e:	eddf 7a2b 	vldr	s15, [pc, #172]	; b5a2c <_Z15getPositionDatav+0x1a4>
   b5982:	ee60 7a27 	vmul.f32	s15, s0, s15
   b5986:	ee17 0a90 	vmov	r0, s15
   b598a:	f00e f9e9 	bl	c3d60 <__aeabi_f2d>
   b598e:	a318      	add	r3, pc, #96	; (adr r3, b59f0 <_Z15getPositionDatav+0x168>)
   b5990:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5994:	f00e fb66 	bl	c4064 <__aeabi_ddiv>
   b5998:	f00e fd32 	bl	c4400 <__aeabi_d2f>
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b599c:	edd9 1a00 	vldr	s3, [r9]
   b59a0:	ed98 1a00 	vldr	s2, [r8]
   b59a4:	edd7 0a00 	vldr	s1, [r7]
   b59a8:	ed96 0a00 	vldr	s0, [r6]
            travelHeading = (atan2(targetLon-longitude, targetLat-latitude) * 180 / M_PI);      //Calculate the heading between the current and target location
   b59ac:	6028      	str	r0, [r5, #0]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b59ae:	f7ff fe5f 	bl	b5670 <_Z12calcDistanceffff>
   b59b2:	4b1f      	ldr	r3, [pc, #124]	; (b5a30 <_Z15getPositionDatav+0x1a8>)
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b59b4:	edd5 0a00 	vldr	s1, [r5]
            travelDistance = calcDistance(targetLat,latitude,targetLon,longitude);              //Calculate the distance between the current and target location
   b59b8:	ed83 0a00 	vstr	s0, [r3]
            targetDelta = calcDelta(compassHeading, travelHeading);                             //Calculate delta to control angle of the bot
   b59bc:	4b16      	ldr	r3, [pc, #88]	; (b5a18 <_Z15getPositionDatav+0x190>)
   b59be:	ed93 0a00 	vldr	s0, [r3]
   b59c2:	f7ff fef1 	bl	b57a8 <_Z9calcDeltaff>
   b59c6:	4b1b      	ldr	r3, [pc, #108]	; (b5a34 <_Z15getPositionDatav+0x1ac>)
   b59c8:	ed83 0a00 	vstr	s0, [r3]
   b59cc:	f008 f8fa 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
            lastTelemTime = millis();                                                           //Update telemetry time
   b59d0:	4b19      	ldr	r3, [pc, #100]	; (b5a38 <_Z15getPositionDatav+0x1b0>)
   b59d2:	6018      	str	r0, [r3, #0]
            if(CompassAvail) telemetryAvail = true;                                             //If compass and GPS are available, set flag to true
   b59d4:	b114      	cbz	r4, b59dc <_Z15getPositionDatav+0x154>
   b59d6:	4b19      	ldr	r3, [pc, #100]	; (b5a3c <_Z15getPositionDatav+0x1b4>)
   b59d8:	2201      	movs	r2, #1
   b59da:	701a      	strb	r2, [r3, #0]
}
   b59dc:	b00b      	add	sp, #44	; 0x2c
   b59de:	ecbd 8b02 	vpop	{d8}
   b59e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else GPSAvail = false;                          //Set flag to indicate GPS unavailable if not connected
   b59e6:	7020      	strb	r0, [r4, #0]
   b59e8:	e78a      	b.n	b5900 <_Z15getPositionDatav+0x78>
   b59ea:	bf00      	nop
   b59ec:	f3af 8000 	nop.w
   b59f0:	54442d18 	.word	0x54442d18
   b59f4:	400921fb 	.word	0x400921fb
   b59f8:	2003e0b4 	.word	0x2003e0b4
   b59fc:	2003e5ec 	.word	0x2003e5ec
   b5a00:	2003df30 	.word	0x2003df30
   b5a04:	2003dd68 	.word	0x2003dd68
   b5a08:	49742400 	.word	0x49742400
   b5a0c:	2003ddfc 	.word	0x2003ddfc
   b5a10:	2003ded8 	.word	0x2003ded8
   b5a14:	2003de20 	.word	0x2003de20
   b5a18:	2003dda8 	.word	0x2003dda8
   b5a1c:	2003e5d0 	.word	0x2003e5d0
   b5a20:	c2b40000 	.word	0xc2b40000
   b5a24:	42b40000 	.word	0x42b40000
   b5a28:	2003e5e0 	.word	0x2003e5e0
   b5a2c:	43340000 	.word	0x43340000
   b5a30:	2003e5dc 	.word	0x2003e5dc
   b5a34:	2003e5cc 	.word	0x2003e5cc
   b5a38:	2003ddf8 	.word	0x2003ddf8
   b5a3c:	2003e5d8 	.word	0x2003e5d8
   b5a40:	2003e5d4 	.word	0x2003e5d4

000b5a44 <_Z12updateMotorsv>:
void updateMotors(){
   b5a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5a48:	f8df a254 	ldr.w	sl, [pc, #596]	; b5ca0 <_Z12updateMotorsv+0x25c>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5a4c:	4b85      	ldr	r3, [pc, #532]	; (b5c64 <_Z12updateMotorsv+0x220>)
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5a4e:	f89a 2000 	ldrb.w	r2, [sl]
void updateMotors(){
   b5a52:	ed2d 8b04 	vpush	{d8-d9}
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5a56:	781b      	ldrb	r3, [r3, #0]
void updateMotors(){
   b5a58:	b083      	sub	sp, #12
    if(updateMotorControl){                                 //Flag to initialize a motor update, such that the motor speed is ramped to the target oover time
   b5a5a:	2a00      	cmp	r2, #0
   b5a5c:	f000 80f0 	beq.w	b5c40 <_Z12updateMotorsv+0x1fc>
        if(driveMode == 1 || driveMode == 2){               //Change the value of setLSpeed and setRSpeed here for the autonomous algorithm
   b5a60:	3b01      	subs	r3, #1
   b5a62:	2b01      	cmp	r3, #1
   b5a64:	4c80      	ldr	r4, [pc, #512]	; (b5c68 <_Z12updateMotorsv+0x224>)
   b5a66:	4f81      	ldr	r7, [pc, #516]	; (b5c6c <_Z12updateMotorsv+0x228>)
   b5a68:	4d81      	ldr	r5, [pc, #516]	; (b5c70 <_Z12updateMotorsv+0x22c>)
   b5a6a:	4e82      	ldr	r6, [pc, #520]	; (b5c74 <_Z12updateMotorsv+0x230>)
   b5a6c:	f200 8099 	bhi.w	b5ba2 <_Z12updateMotorsv+0x15e>
            if(travelDistance < MTR_CUTOFF_RAD){            //If the bot is close enough to the center when in autonomous and sentry, then disable motors and float there
   b5a70:	4b81      	ldr	r3, [pc, #516]	; (b5c78 <_Z12updateMotorsv+0x234>)
   b5a72:	edd3 7a00 	vldr	s15, [r3]
   b5a76:	4b81      	ldr	r3, [pc, #516]	; (b5c7c <_Z12updateMotorsv+0x238>)
   b5a78:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   b5a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5a84:	d53d      	bpl.n	b5b02 <_Z12updateMotorsv+0xbe>
                pointArrived = true;                        //Indicate that the bot has arrived at the target point, which acts as a disable until it drifts out of the larger radius
   b5a86:	2201      	movs	r2, #1
   b5a88:	701a      	strb	r2, [r3, #0]
                leftMotorSpeed = setLSpeed = 90;            //Set left and right motor speeds to off
   b5a8a:	235a      	movs	r3, #90	; 0x5a
   b5a8c:	7023      	strb	r3, [r4, #0]
   b5a8e:	703b      	strb	r3, [r7, #0]
                rightMotorSpeed = setRSpeed = 90;
   b5a90:	702b      	strb	r3, [r5, #0]
   b5a92:	7033      	strb	r3, [r6, #0]
        if(setLSpeed < 90 && setLSpeed >=67) setLSpeed = 67;
   b5a94:	7823      	ldrb	r3, [r4, #0]
   b5a96:	3b43      	subs	r3, #67	; 0x43
   b5a98:	2b16      	cmp	r3, #22
   b5a9a:	bf9c      	itt	ls
   b5a9c:	2343      	movls	r3, #67	; 0x43
   b5a9e:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b5aa0:	782b      	ldrb	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5aa2:	7822      	ldrb	r2, [r4, #0]
        if(setRSpeed < 90 && setRSpeed >=67) setRSpeed = 67;
   b5aa4:	3b43      	subs	r3, #67	; 0x43
   b5aa6:	2b16      	cmp	r3, #22
   b5aa8:	bf9c      	itt	ls
   b5aaa:	2343      	movls	r3, #67	; 0x43
   b5aac:	702b      	strbls	r3, [r5, #0]
        if(leftMotorSpeed < setLSpeed){                                                     //If the acutal motor (leftMotorSpeed) speed is less than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5aae:	783b      	ldrb	r3, [r7, #0]
   b5ab0:	4293      	cmp	r3, r2
   b5ab2:	f080 80b3 	bcs.w	b5c1c <_Z12updateMotorsv+0x1d8>
            if(setLSpeed - leftMotorSpeed > MTR_RAMP_SPD) leftMotorSpeed += MTR_RAMP_SPD;   //If we're off by more than one step size, then increment by one step
   b5ab6:	1ad1      	subs	r1, r2, r3
   b5ab8:	2903      	cmp	r1, #3
   b5aba:	f340 80b6 	ble.w	b5c2a <_Z12updateMotorsv+0x1e6>
   b5abe:	3303      	adds	r3, #3
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5ac0:	703b      	strb	r3, [r7, #0]
        if(rightMotorSpeed < setRSpeed){                                                    //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5ac2:	7833      	ldrb	r3, [r6, #0]
   b5ac4:	782a      	ldrb	r2, [r5, #0]
   b5ac6:	4293      	cmp	r3, r2
   b5ac8:	f080 80b1 	bcs.w	b5c2e <_Z12updateMotorsv+0x1ea>
            if(setRSpeed - rightMotorSpeed > MTR_RAMP_SPD) rightMotorSpeed += MTR_RAMP_SPD; //If we're off by more than one step size, then increment by one step
   b5acc:	1ad1      	subs	r1, r2, r3
   b5ace:	2903      	cmp	r1, #3
   b5ad0:	f340 80b4 	ble.w	b5c3c <_Z12updateMotorsv+0x1f8>
   b5ad4:	3303      	adds	r3, #3
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5ad6:	7033      	strb	r3, [r6, #0]
        if(!stopActive){                    //If there has not been a stop command, then update the ESC
   b5ad8:	4b69      	ldr	r3, [pc, #420]	; (b5c80 <_Z12updateMotorsv+0x23c>)
   b5ada:	781b      	ldrb	r3, [r3, #0]
   b5adc:	b94b      	cbnz	r3, b5af2 <_Z12updateMotorsv+0xae>
            ESCL.write(leftMotorSpeed);
   b5ade:	7839      	ldrb	r1, [r7, #0]
   b5ae0:	4868      	ldr	r0, [pc, #416]	; (b5c84 <_Z12updateMotorsv+0x240>)
   b5ae2:	f008 fd73 	bl	be5cc <_ZN5Servo5writeEi>
            ESCR.write(180-rightMotorSpeed);
   b5ae6:	7831      	ldrb	r1, [r6, #0]
   b5ae8:	4867      	ldr	r0, [pc, #412]	; (b5c88 <_Z12updateMotorsv+0x244>)
   b5aea:	f1c1 01b4 	rsb	r1, r1, #180	; 0xb4
   b5aee:	f008 fd6d 	bl	be5cc <_ZN5Servo5writeEi>
        updateMotorControl = false;        //Set the flag to false
   b5af2:	2300      	movs	r3, #0
   b5af4:	f88a 3000 	strb.w	r3, [sl]
}
   b5af8:	b003      	add	sp, #12
   b5afa:	ecbd 8b04 	vpop	{d8-d9}
   b5afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            else if(travelDistance < SENTRY_IDLE_RAD){      //Check if the bot is inside of the larger radius of approaching the target point, start slowing motors here
   b5b02:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
   b5b06:	eef4 7ac7 	vcmpe.f32	s15, s14
   b5b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b5b0e:	d55e      	bpl.n	b5bce <_Z12updateMotorsv+0x18a>
                if(pointArrived){                           //If we had already arrived at the target point, then use this larger radius as a deadzone so we don't have rapid on/off on the small radius border
   b5b10:	781b      	ldrb	r3, [r3, #0]
   b5b12:	9301      	str	r3, [sp, #4]
   b5b14:	b11b      	cbz	r3, b5b1e <_Z12updateMotorsv+0xda>
                    setLSpeed = 90;                         //Keep motors off here
   b5b16:	235a      	movs	r3, #90	; 0x5a
   b5b18:	7023      	strb	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5b1a:	702b      	strb	r3, [r5, #0]
   b5b1c:	e7ba      	b.n	b5a94 <_Z12updateMotorsv+0x50>
                    int Lset = (90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate)) * (travelDistance/SENTRY_IDLE_RAD);    //Take the base 90 (stopped speed), add the delta for how much the heading is off, and slow with distance
   b5b1e:	4b5b      	ldr	r3, [pc, #364]	; (b5c8c <_Z12updateMotorsv+0x248>)
   b5b20:	eddf 8a5b 	vldr	s17, [pc, #364]	; b5c90 <_Z12updateMotorsv+0x24c>
   b5b24:	ed93 8a00 	vldr	s16, [r3]
   b5b28:	4b5a      	ldr	r3, [pc, #360]	; (b5c94 <_Z12updateMotorsv+0x250>)
   b5b2a:	eee8 8a28 	vfma.f32	s17, s16, s17
   b5b2e:	ed93 7a00 	vldr	s14, [r3]
   b5b32:	ee17 0a90 	vmov	r0, s15
   b5b36:	ee28 8a07 	vmul.f32	s16, s16, s14
   b5b3a:	f00e f911 	bl	c3d60 <__aeabi_f2d>
   b5b3e:	4b56      	ldr	r3, [pc, #344]	; (b5c98 <_Z12updateMotorsv+0x254>)
   b5b40:	2200      	movs	r2, #0
   b5b42:	f00e f965 	bl	c3e10 <__aeabi_dmul>
   b5b46:	ee78 7a88 	vadd.f32	s15, s17, s16
   b5b4a:	4680      	mov	r8, r0
   b5b4c:	4689      	mov	r9, r1
   b5b4e:	ee17 0a90 	vmov	r0, s15
   b5b52:	f00e f905 	bl	c3d60 <__aeabi_f2d>
   b5b56:	4642      	mov	r2, r8
   b5b58:	464b      	mov	r3, r9
   b5b5a:	f00e f959 	bl	c3e10 <__aeabi_dmul>
   b5b5e:	f00e fc07 	bl	c4370 <__aeabi_d2iz>
   b5b62:	4683      	mov	fp, r0
                    int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate) * (travelDistance/SENTRY_IDLE_RAD);
   b5b64:	ee18 0a90 	vmov	r0, s17
   b5b68:	f00e f8fa 	bl	c3d60 <__aeabi_f2d>
   b5b6c:	ec41 0b19 	vmov	d9, r0, r1
   b5b70:	ee18 0a10 	vmov	r0, s16
   b5b74:	f00e f8f4 	bl	c3d60 <__aeabi_f2d>
   b5b78:	4642      	mov	r2, r8
   b5b7a:	464b      	mov	r3, r9
   b5b7c:	f00e f948 	bl	c3e10 <__aeabi_dmul>
   b5b80:	4602      	mov	r2, r0
   b5b82:	460b      	mov	r3, r1
   b5b84:	ec51 0b19 	vmov	r0, r1, d9
   b5b88:	f00d ff8a 	bl	c3aa0 <__aeabi_dsub>
   b5b8c:	f00e fbf0 	bl	c4370 <__aeabi_d2iz>
                    if(Lset < 0) setLSpeed = 0;             //Cap the speed between 0 and 180
   b5b90:	f1bb 0f00 	cmp.w	fp, #0
   b5b94:	da12      	bge.n	b5bbc <_Z12updateMotorsv+0x178>
   b5b96:	9b01      	ldr	r3, [sp, #4]
                    else if(Lset > 180) setLSpeed = 180;
   b5b98:	7023      	strb	r3, [r4, #0]
                    if(Rset < 0) setRSpeed = 0;
   b5b9a:	2800      	cmp	r0, #0
   b5b9c:	da13      	bge.n	b5bc6 <_Z12updateMotorsv+0x182>
   b5b9e:	2300      	movs	r3, #0
                else setRSpeed = Rset;
   b5ba0:	702b      	strb	r3, [r5, #0]
        if(setLSpeed > 90 && setLSpeed <=123) setLSpeed = 123; //Push motor speed out of deadzone to make sure the motors actually respond to non-90 inputs
   b5ba2:	7823      	ldrb	r3, [r4, #0]
   b5ba4:	3b5b      	subs	r3, #91	; 0x5b
   b5ba6:	2b20      	cmp	r3, #32
   b5ba8:	bf9c      	itt	ls
   b5baa:	237b      	movls	r3, #123	; 0x7b
   b5bac:	7023      	strbls	r3, [r4, #0]
        if(setRSpeed > 90 && setRSpeed <=123) setRSpeed = 123;
   b5bae:	782b      	ldrb	r3, [r5, #0]
   b5bb0:	3b5b      	subs	r3, #91	; 0x5b
   b5bb2:	2b20      	cmp	r3, #32
   b5bb4:	f63f af6e 	bhi.w	b5a94 <_Z12updateMotorsv+0x50>
   b5bb8:	237b      	movs	r3, #123	; 0x7b
   b5bba:	e7ae      	b.n	b5b1a <_Z12updateMotorsv+0xd6>
                    else if(Lset > 180) setLSpeed = 180;
   b5bbc:	f1bb 0fb4 	cmp.w	fp, #180	; 0xb4
   b5bc0:	ddeb      	ble.n	b5b9a <_Z12updateMotorsv+0x156>
   b5bc2:	23b4      	movs	r3, #180	; 0xb4
   b5bc4:	e7e8      	b.n	b5b98 <_Z12updateMotorsv+0x154>
                    else if(Rset > 180) setRSpeed = 180;
   b5bc6:	28b4      	cmp	r0, #180	; 0xb4
   b5bc8:	ddeb      	ble.n	b5ba2 <_Z12updateMotorsv+0x15e>
   b5bca:	23b4      	movs	r3, #180	; 0xb4
   b5bcc:	e7e8      	b.n	b5ba0 <_Z12updateMotorsv+0x15c>
                pointArrived = false;                       //Set flag back to false so we have to travel to the inner circle, also happens usually when a new point is specified
   b5bce:	2100      	movs	r1, #0
   b5bd0:	7019      	strb	r1, [r3, #0]
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5bd2:	4b2e      	ldr	r3, [pc, #184]	; (b5c8c <_Z12updateMotorsv+0x248>)
   b5bd4:	eddf 7a2e 	vldr	s15, [pc, #184]	; b5c90 <_Z12updateMotorsv+0x24c>
   b5bd8:	edd3 6a00 	vldr	s13, [r3]
   b5bdc:	4b2d      	ldr	r3, [pc, #180]	; (b5c94 <_Z12updateMotorsv+0x250>)
   b5bde:	eee6 7aa7 	vfma.f32	s15, s13, s15
   b5be2:	ed93 6a00 	vldr	s12, [r3]
   b5be6:	eeb0 7a67 	vmov.f32	s14, s15
   b5bea:	eea6 7a86 	vfma.f32	s14, s13, s12
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5bee:	eee6 7ac6 	vfms.f32	s15, s13, s12
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5bf2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                int Lset = 90 + (90 * autoMoveRate) + (targetDelta * autoMoveRate); //Take the base 90 (stopped speed), add the delta for how much the heading is off, and the base move rate multiplier
   b5bfa:	ee17 2a10 	vmov	r2, s14
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5bfe:	428a      	cmp	r2, r1
                int Rset = 90 + (90 * autoMoveRate) - (targetDelta * autoMoveRate); 
   b5c00:	ee17 3a90 	vmov	r3, s15
                if(Lset < 0) setLSpeed = 0;                 //Cap speed between 0 and 180
   b5c04:	da05      	bge.n	b5c12 <_Z12updateMotorsv+0x1ce>
   b5c06:	7021      	strb	r1, [r4, #0]
                if(Rset < 0) setRSpeed = 0;
   b5c08:	2b00      	cmp	r3, #0
   b5c0a:	dbc8      	blt.n	b5b9e <_Z12updateMotorsv+0x15a>
                else if(Rset > 180) setRSpeed = 180;
   b5c0c:	2bb4      	cmp	r3, #180	; 0xb4
   b5c0e:	dcdc      	bgt.n	b5bca <_Z12updateMotorsv+0x186>
   b5c10:	e7c6      	b.n	b5ba0 <_Z12updateMotorsv+0x15c>
                else if(Lset > 180) setLSpeed = 180;
   b5c12:	2ab4      	cmp	r2, #180	; 0xb4
   b5c14:	bfc8      	it	gt
   b5c16:	22b4      	movgt	r2, #180	; 0xb4
                else setLSpeed = Lset;
   b5c18:	7022      	strb	r2, [r4, #0]
   b5c1a:	e7f5      	b.n	b5c08 <_Z12updateMotorsv+0x1c4>
        else if(leftMotorSpeed > setLSpeed){                                                //If the acutal motor (leftMotorSpeed) speed is greater than the target motor speed (setLSpeed), then ramp the acutal motor speed to reach target
   b5c1c:	f67f af51 	bls.w	b5ac2 <_Z12updateMotorsv+0x7e>
            if(leftMotorSpeed - setLSpeed > MTR_RAMP_SPD) leftMotorSpeed -= MTR_RAMP_SPD;   //If we're off by more than one step size, then decrement by one step
   b5c20:	1a99      	subs	r1, r3, r2
   b5c22:	2903      	cmp	r1, #3
   b5c24:	dd01      	ble.n	b5c2a <_Z12updateMotorsv+0x1e6>
   b5c26:	3b03      	subs	r3, #3
   b5c28:	e74a      	b.n	b5ac0 <_Z12updateMotorsv+0x7c>
            else leftMotorSpeed = setLSpeed;                                                //Otherwise, we're less than one step, so finish step function
   b5c2a:	703a      	strb	r2, [r7, #0]
   b5c2c:	e749      	b.n	b5ac2 <_Z12updateMotorsv+0x7e>
        else if(rightMotorSpeed > setRSpeed){                                               //If the acutal motor (rightMotorSpeed) speed is greater than the target motor speed (setRSpeed), then ramp the acutal motor speed to reach target
   b5c2e:	f67f af53 	bls.w	b5ad8 <_Z12updateMotorsv+0x94>
            if(rightMotorSpeed - setRSpeed > MTR_RAMP_SPD) rightMotorSpeed -= MTR_RAMP_SPD; //If we're off by more than one step size, then decrement by one step
   b5c32:	1a99      	subs	r1, r3, r2
   b5c34:	2903      	cmp	r1, #3
   b5c36:	dd01      	ble.n	b5c3c <_Z12updateMotorsv+0x1f8>
   b5c38:	3b03      	subs	r3, #3
   b5c3a:	e74c      	b.n	b5ad6 <_Z12updateMotorsv+0x92>
            else rightMotorSpeed = setRSpeed;                                               //Otherwise, we're less than one step, so finish step function
   b5c3c:	7032      	strb	r2, [r6, #0]
   b5c3e:	e74b      	b.n	b5ad8 <_Z12updateMotorsv+0x94>
    else if(driveMode == 0 && millis() - positionTimer > MANUAL_RAMP_PD){   //If in manual movement mode, there isn't a trigger for updating the motor speed, so trigger with time periodically
   b5c40:	2b00      	cmp	r3, #0
   b5c42:	f47f af59 	bne.w	b5af8 <_Z12updateMotorsv+0xb4>
   b5c46:	4c15      	ldr	r4, [pc, #84]	; (b5c9c <_Z12updateMotorsv+0x258>)
   b5c48:	f007 ffbc 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b5c4c:	6823      	ldr	r3, [r4, #0]
   b5c4e:	1ac0      	subs	r0, r0, r3
   b5c50:	2864      	cmp	r0, #100	; 0x64
   b5c52:	f67f af51 	bls.w	b5af8 <_Z12updateMotorsv+0xb4>
        updateMotorControl = true;
   b5c56:	2301      	movs	r3, #1
   b5c58:	f88a 3000 	strb.w	r3, [sl]
   b5c5c:	f007 ffb2 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
        positionTimer = millis();
   b5c60:	6020      	str	r0, [r4, #0]
}
   b5c62:	e749      	b.n	b5af8 <_Z12updateMotorsv+0xb4>
   b5c64:	2003ddb1 	.word	0x2003ddb1
   b5c68:	2003e560 	.word	0x2003e560
   b5c6c:	2003de1c 	.word	0x2003de1c
   b5c70:	2003e561 	.word	0x2003e561
   b5c74:	2003e0b9 	.word	0x2003e0b9
   b5c78:	2003e5dc 	.word	0x2003e5dc
   b5c7c:	2003e0b1 	.word	0x2003e0b1
   b5c80:	2003e5c9 	.word	0x2003e5c9
   b5c84:	2003dd48 	.word	0x2003dd48
   b5c88:	2003dd58 	.word	0x2003dd58
   b5c8c:	2003db2c 	.word	0x2003db2c
   b5c90:	42b40000 	.word	0x42b40000
   b5c94:	2003e5cc 	.word	0x2003e5cc
   b5c98:	3fd00000 	.word	0x3fd00000
   b5c9c:	2003e0b4 	.word	0x2003e0b4
   b5ca0:	2003e5ec 	.word	0x2003e5ec

000b5ca4 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5ca8:	b084      	sub	sp, #16
   b5caa:	af02      	add	r7, sp, #8
   b5cac:	4604      	mov	r4, r0
   b5cae:	460e      	mov	r6, r1
   b5cb0:	4691      	mov	r9, r2
   b5cb2:	4698      	mov	r8, r3
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5cb4:	f00e fceb 	bl	c468e <strlen>
   b5cb8:	3009      	adds	r0, #9
   b5cba:	f020 0307 	bic.w	r3, r0, #7
   b5cbe:	ebad 0d03 	sub.w	sp, sp, r3
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5cc2:	4620      	mov	r0, r4
   b5cc4:	f00e fce3 	bl	c468e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b5cc8:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5ccc:	492e      	ldr	r1, [pc, #184]	; (b5d88 <_Z8sendDataPKchbbb+0xe4>)
    char outStr[strlen(dataOut)+2];                             //Make a temporary string to hold the inputted strigng and also the checksum
   b5cce:	ad02      	add	r5, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));           //Copy in the inputted string and concatenate the checksum on the end, which is just the string length of the inputted string
   b5cd0:	4603      	mov	r3, r0
   b5cd2:	4622      	mov	r2, r4
   b5cd4:	4628      	mov	r0, r5
   b5cd6:	f008 faed 	bl	be2b4 <sprintf>
    if(sendLTE || sendMode == 4){                               //If sending over LTE, just use the particle event
   b5cda:	f1ba 0f00 	cmp.w	sl, #0
   b5cde:	d101      	bne.n	b5ce4 <_Z8sendDataPKchbbb+0x40>
   b5ce0:	2e04      	cmp	r6, #4
   b5ce2:	d11b      	bne.n	b5d1c <_Z8sendDataPKchbbb+0x78>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5ce4:	4b29      	ldr	r3, [pc, #164]	; (b5d8c <_Z8sendDataPKchbbb+0xe8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5ce6:	492a      	ldr	r1, [pc, #168]	; (b5d90 <_Z8sendDataPKchbbb+0xec>)
   b5ce8:	781b      	ldrb	r3, [r3, #0]
   b5cea:	f88d 3000 	strb.w	r3, [sp]
   b5cee:	462a      	mov	r2, r5
   b5cf0:	233c      	movs	r3, #60	; 0x3c
   b5cf2:	4638      	mov	r0, r7
   b5cf4:	f00b faa4 	bl	c1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5cf8:	687c      	ldr	r4, [r7, #4]
   b5cfa:	b17c      	cbz	r4, b5d1c <_Z8sendDataPKchbbb+0x78>
      if (--_M_use_count == 0)
   b5cfc:	6863      	ldr	r3, [r4, #4]
   b5cfe:	3b01      	subs	r3, #1
   b5d00:	6063      	str	r3, [r4, #4]
   b5d02:	b95b      	cbnz	r3, b5d1c <_Z8sendDataPKchbbb+0x78>
          _M_dispose();
   b5d04:	6823      	ldr	r3, [r4, #0]
   b5d06:	4620      	mov	r0, r4
   b5d08:	689b      	ldr	r3, [r3, #8]
   b5d0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d0c:	68a3      	ldr	r3, [r4, #8]
   b5d0e:	3b01      	subs	r3, #1
   b5d10:	60a3      	str	r3, [r4, #8]
   b5d12:	b91b      	cbnz	r3, b5d1c <_Z8sendDataPKchbbb+0x78>
            _M_destroy();
   b5d14:	6823      	ldr	r3, [r4, #0]
   b5d16:	4620      	mov	r0, r4
   b5d18:	68db      	ldr	r3, [r3, #12]
   b5d1a:	4798      	blx	r3
    if((sendBLE || sendMode == 1) && BLE.connected()){          //Check that BLE is connected before trying to transmit here
   b5d1c:	f1b9 0f00 	cmp.w	r9, #0
   b5d20:	d101      	bne.n	b5d26 <_Z8sendDataPKchbbb+0x82>
   b5d22:	2e01      	cmp	r6, #1
   b5d24:	d121      	bne.n	b5d6a <_Z8sendDataPKchbbb+0xc6>
   b5d26:	f009 f911 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d2a:	f009 f96d 	bl	bf008 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5d2e:	b1e0      	cbz	r0, b5d6a <_Z8sendDataPKchbbb+0xc6>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5d30:	4628      	mov	r0, r5
   b5d32:	f00e fcac 	bl	c468e <strlen>
   b5d36:	3007      	adds	r0, #7
   b5d38:	f020 0007 	bic.w	r0, r0, #7
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5d3c:	466c      	mov	r4, sp
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5d3e:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5d42:	4628      	mov	r0, r5
   b5d44:	f00e fca3 	bl	c468e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];                      //Create an array of uint8_t, which is needed for the BLE characteristic.
   b5d48:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));                //Convert the char array to a byte array
   b5d4c:	4602      	mov	r2, r0
   b5d4e:	4629      	mov	r1, r5
   b5d50:	4648      	mov	r0, r9
   b5d52:	f00e fbe9 	bl	c4528 <memcpy>
        txCharacteristic.setValue(txBuf_tmp, strlen(outStr));   //Transmit out the byte array
   b5d56:	4628      	mov	r0, r5
   b5d58:	f00e fc99 	bl	c468e <strlen>
   b5d5c:	2300      	movs	r3, #0
   b5d5e:	4602      	mov	r2, r0
   b5d60:	4649      	mov	r1, r9
   b5d62:	480c      	ldr	r0, [pc, #48]	; (b5d94 <_Z8sendDataPKchbbb+0xf0>)
   b5d64:	f008 ffe2 	bl	bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b5d68:	46a5      	mov	sp, r4
    if(sendXBee || sendMode == 2){                              //Send out over the harware serial to go through XBee
   b5d6a:	f1b8 0f00 	cmp.w	r8, #0
   b5d6e:	d101      	bne.n	b5d74 <_Z8sendDataPKchbbb+0xd0>
   b5d70:	2e02      	cmp	r6, #2
   b5d72:	d104      	bne.n	b5d7e <_Z8sendDataPKchbbb+0xda>
        Serial1.println(outStr);
   b5d74:	f00c f976 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b5d78:	4629      	mov	r1, r5
   b5d7a:	f009 ff7e 	bl	bfc7a <_ZN5Print7printlnEPKc>
}
   b5d7e:	3708      	adds	r7, #8
   b5d80:	46bd      	mov	sp, r7
   b5d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5d86:	bf00      	nop
   b5d88:	000c6b6b 	.word	0x000c6b6b
   b5d8c:	2003dd84 	.word	0x2003dd84
   b5d90:	000c6b72 	.word	0x000c6b72
   b5d94:	2003e5e4 	.word	0x2003e5e4

000b5d98 <_Z16sendResponseDatav>:
void sendResponseData(){
   b5d98:	b530      	push	{r4, r5, lr}
    if(requestActive){              //If the CC has requested data using the req command
   b5d9a:	4d2a      	ldr	r5, [pc, #168]	; (b5e44 <_Z16sendResponseDatav+0xac>)
   b5d9c:	782b      	ldrb	r3, [r5, #0]
void sendResponseData(){
   b5d9e:	b09d      	sub	sp, #116	; 0x74
    if(requestActive){              //If the CC has requested data using the req command
   b5da0:	2b00      	cmp	r3, #0
   b5da2:	d04d      	beq.n	b5e40 <_Z16sendResponseDatav+0xa8>
        memset(responseStr,0,65);   //Empty the string if it had something
   b5da4:	2241      	movs	r2, #65	; 0x41
   b5da6:	2100      	movs	r1, #0
   b5da8:	a80b      	add	r0, sp, #44	; 0x2c
   b5daa:	f00e fbe5 	bl	c4578 <memset>
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5dae:	4b26      	ldr	r3, [pc, #152]	; (b5e48 <_Z16sendResponseDatav+0xb0>)
   b5db0:	ed9f 7a26 	vldr	s14, [pc, #152]	; b5e4c <_Z16sendResponseDatav+0xb4>
   b5db4:	edd3 7a00 	vldr	s15, [r3]
   b5db8:	4b25      	ldr	r3, [pc, #148]	; (b5e50 <_Z16sendResponseDatav+0xb8>)
   b5dba:	ee67 7a87 	vmul.f32	s15, s15, s14
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5dbe:	2400      	movs	r4, #0
        sprintf(responseStr,"B%dCCsns%0.6f %0.6f %d %d %d %d %d ",BOTNUM,latitude,longitude,(int)(senseDO*1000),(int)(sensePH*1000),(int)(senseCond*1000),(int)(senseMCond*1000),(int)(senseTemp*1000));
   b5dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5dc4:	edcd 7a08 	vstr	s15, [sp, #32]
   b5dc8:	edd3 7a00 	vldr	s15, [r3]
   b5dcc:	4b21      	ldr	r3, [pc, #132]	; (b5e54 <_Z16sendResponseDatav+0xbc>)
   b5dce:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5dd6:	edcd 7a07 	vstr	s15, [sp, #28]
   b5dda:	edd3 7a00 	vldr	s15, [r3]
   b5dde:	4b1e      	ldr	r3, [pc, #120]	; (b5e58 <_Z16sendResponseDatav+0xc0>)
   b5de0:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5de8:	edcd 7a06 	vstr	s15, [sp, #24]
   b5dec:	edd3 7a00 	vldr	s15, [r3]
   b5df0:	4b1a      	ldr	r3, [pc, #104]	; (b5e5c <_Z16sendResponseDatav+0xc4>)
   b5df2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5dfa:	edcd 7a05 	vstr	s15, [sp, #20]
   b5dfe:	edd3 7a00 	vldr	s15, [r3]
   b5e02:	4b17      	ldr	r3, [pc, #92]	; (b5e60 <_Z16sendResponseDatav+0xc8>)
   b5e04:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5e0c:	edcd 7a04 	vstr	s15, [sp, #16]
   b5e10:	6818      	ldr	r0, [r3, #0]
   b5e12:	f00d ffa5 	bl	c3d60 <__aeabi_f2d>
   b5e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5e1a:	4b12      	ldr	r3, [pc, #72]	; (b5e64 <_Z16sendResponseDatav+0xcc>)
   b5e1c:	6818      	ldr	r0, [r3, #0]
   b5e1e:	f00d ff9f 	bl	c3d60 <__aeabi_f2d>
   b5e22:	2202      	movs	r2, #2
   b5e24:	e9cd 0100 	strd	r0, r1, [sp]
   b5e28:	490f      	ldr	r1, [pc, #60]	; (b5e68 <_Z16sendResponseDatav+0xd0>)
   b5e2a:	a80b      	add	r0, sp, #44	; 0x2c
   b5e2c:	f008 fa42 	bl	be2b4 <sprintf>
        sendData(responseStr,requestActive,false,false,false);  //transmit out data over the same mode the request was recived over
   b5e30:	7829      	ldrb	r1, [r5, #0]
   b5e32:	9400      	str	r4, [sp, #0]
   b5e34:	4623      	mov	r3, r4
   b5e36:	4622      	mov	r2, r4
   b5e38:	a80b      	add	r0, sp, #44	; 0x2c
   b5e3a:	f7ff ff33 	bl	b5ca4 <_Z8sendDataPKchbbb>
        requestActive = 0;          //Set flag back to 0
   b5e3e:	702c      	strb	r4, [r5, #0]
}
   b5e40:	b01d      	add	sp, #116	; 0x74
   b5e42:	bd30      	pop	{r4, r5, pc}
   b5e44:	2003e0b8 	.word	0x2003e0b8
   b5e48:	2003e558 	.word	0x2003e558
   b5e4c:	447a0000 	.word	0x447a0000
   b5e50:	2003e550 	.word	0x2003e550
   b5e54:	2003e548 	.word	0x2003e548
   b5e58:	2003e554 	.word	0x2003e554
   b5e5c:	2003e54c 	.word	0x2003e54c
   b5e60:	2003ded8 	.word	0x2003ded8
   b5e64:	2003ddfc 	.word	0x2003ddfc
   b5e68:	000c6b7a 	.word	0x000c6b7a

000b5e6c <_Z12statusUpdatev>:
void statusUpdate(){
   b5e6c:	b530      	push	{r4, r5, lr}
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5e6e:	4d2d      	ldr	r5, [pc, #180]	; (b5f24 <_Z12statusUpdatev+0xb8>)
   b5e70:	782b      	ldrb	r3, [r5, #0]
void statusUpdate(){
   b5e72:	b099      	sub	sp, #100	; 0x64
    if(statusReady){        //Check if status flag has been set by timer that calculates system status flags
   b5e74:	2b00      	cmp	r3, #0
   b5e76:	d04a      	beq.n	b5f0e <_Z12statusUpdatev+0xa2>
        Serial.println("Sending a status update!");     //Log to console (for debug purposes)
   b5e78:	f00b fc28 	bl	c16cc <_Z16_fetch_usbserialv>
   b5e7c:	492a      	ldr	r1, [pc, #168]	; (b5f28 <_Z12statusUpdatev+0xbc>)
   b5e7e:	4c2b      	ldr	r4, [pc, #172]	; (b5f2c <_Z12statusUpdatev+0xc0>)
   b5e80:	f009 fefb 	bl	bfc7a <_ZN5Print7printlnEPKc>
        sprintf(updateStr,"B%dABsup%d %d %0.6f %0.6f %d %d ",BOTNUM,battPercent,statusFlags,latitude,longitude,(int)(battVoltage * battCurrent),(int)(battVoltage * solarCurrent));  //Print status flags, battery, latitude and logitude
   b5e84:	4b2a      	ldr	r3, [pc, #168]	; (b5f30 <_Z12statusUpdatev+0xc4>)
   b5e86:	4a2b      	ldr	r2, [pc, #172]	; (b5f34 <_Z12statusUpdatev+0xc8>)
   b5e88:	edd3 7a00 	vldr	s15, [r3]
   b5e8c:	ed92 7a00 	vldr	s14, [r2]
   b5e90:	4b29      	ldr	r3, [pc, #164]	; (b5f38 <_Z12statusUpdatev+0xcc>)
   b5e92:	4a2a      	ldr	r2, [pc, #168]	; (b5f3c <_Z12statusUpdatev+0xd0>)
   b5e94:	781b      	ldrb	r3, [r3, #0]
   b5e96:	9309      	str	r3, [sp, #36]	; 0x24
   b5e98:	ee27 7a87 	vmul.f32	s14, s15, s14
   b5e9c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   b5ea0:	ed8d 7a07 	vstr	s14, [sp, #28]
   b5ea4:	ed92 7a00 	vldr	s14, [r2]
   b5ea8:	4a25      	ldr	r2, [pc, #148]	; (b5f40 <_Z12statusUpdatev+0xd4>)
   b5eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5eb2:	edcd 7a06 	vstr	s15, [sp, #24]
   b5eb6:	6810      	ldr	r0, [r2, #0]
   b5eb8:	f00d ff52 	bl	c3d60 <__aeabi_f2d>
   b5ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b5ec0:	4a20      	ldr	r2, [pc, #128]	; (b5f44 <_Z12statusUpdatev+0xd8>)
   b5ec2:	6810      	ldr	r0, [r2, #0]
   b5ec4:	f00d ff4c 	bl	c3d60 <__aeabi_f2d>
   b5ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5ecc:	4a1e      	ldr	r2, [pc, #120]	; (b5f48 <_Z12statusUpdatev+0xdc>)
   b5ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5ed0:	8812      	ldrh	r2, [r2, #0]
   b5ed2:	9200      	str	r2, [sp, #0]
   b5ed4:	491d      	ldr	r1, [pc, #116]	; (b5f4c <_Z12statusUpdatev+0xe0>)
   b5ed6:	2202      	movs	r2, #2
   b5ed8:	a80a      	add	r0, sp, #40	; 0x28
   b5eda:	f008 f9eb 	bl	be2b4 <sprintf>
        if(!BLEAvail && !XBeeAvail && LTEStatusCount && (LTEStatusCount%LTE_STAT_PD == 0)){     //If BLE and XBee are not available, send status over LTE, but only 1 in LTE_STAT_PD updates (to not suck up data)
   b5ede:	4b1c      	ldr	r3, [pc, #112]	; (b5f50 <_Z12statusUpdatev+0xe4>)
   b5ee0:	781b      	ldrb	r3, [r3, #0]
   b5ee2:	b9b3      	cbnz	r3, b5f12 <_Z12statusUpdatev+0xa6>
   b5ee4:	4b1b      	ldr	r3, [pc, #108]	; (b5f54 <_Z12statusUpdatev+0xe8>)
   b5ee6:	781b      	ldrb	r3, [r3, #0]
   b5ee8:	b99b      	cbnz	r3, b5f12 <_Z12statusUpdatev+0xa6>
   b5eea:	8823      	ldrh	r3, [r4, #0]
   b5eec:	b1a3      	cbz	r3, b5f18 <_Z12statusUpdatev+0xac>
   b5eee:	f013 0303 	ands.w	r3, r3, #3
   b5ef2:	d111      	bne.n	b5f18 <_Z12statusUpdatev+0xac>
            sendData(updateStr,0,false,false,true);     //Only send out over LTE
   b5ef4:	2201      	movs	r2, #1
   b5ef6:	9200      	str	r2, [sp, #0]
   b5ef8:	4619      	mov	r1, r3
   b5efa:	461a      	mov	r2, r3
            sendData(updateStr,0,true,true,false);
   b5efc:	a80a      	add	r0, sp, #40	; 0x28
   b5efe:	f7ff fed1 	bl	b5ca4 <_Z8sendDataPKchbbb>
        if(LTEStatusCount) LTEStatusCount--;            //Decrement a large coounter for the LTE status. This stops sending the status over LTE after a while to not burn up monthly quota. Should be recovering bots if on cell only
   b5f02:	8823      	ldrh	r3, [r4, #0]
   b5f04:	b10b      	cbz	r3, b5f0a <_Z12statusUpdatev+0x9e>
   b5f06:	3b01      	subs	r3, #1
   b5f08:	8023      	strh	r3, [r4, #0]
        statusReady = false;                            //Clear ready flag
   b5f0a:	2300      	movs	r3, #0
   b5f0c:	702b      	strb	r3, [r5, #0]
}
   b5f0e:	b019      	add	sp, #100	; 0x64
   b5f10:	bd30      	pop	{r4, r5, pc}
            if(XBeeAvail || BLEAvail) LTEStatusCount = LTE_MAX_STATUS;  //Otherwise, we're sending updates over BLE or XBee, reset counter for cellular
   b5f12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   b5f16:	8023      	strh	r3, [r4, #0]
            sendData(updateStr,0,true,true,false);
   b5f18:	2100      	movs	r1, #0
   b5f1a:	2301      	movs	r3, #1
   b5f1c:	9100      	str	r1, [sp, #0]
   b5f1e:	461a      	mov	r2, r3
   b5f20:	e7ec      	b.n	b5efc <_Z12statusUpdatev+0x90>
   b5f22:	bf00      	nop
   b5f24:	2003e5c8 	.word	0x2003e5c8
   b5f28:	000c6b9e 	.word	0x000c6b9e
   b5f2c:	2003dd6a 	.word	0x2003dd6a
   b5f30:	2003dd9c 	.word	0x2003dd9c
   b5f34:	2003e584 	.word	0x2003e584
   b5f38:	2003dd98 	.word	0x2003dd98
   b5f3c:	2003dd94 	.word	0x2003dd94
   b5f40:	2003ded8 	.word	0x2003ded8
   b5f44:	2003ddfc 	.word	0x2003ddfc
   b5f48:	2003e5a8 	.word	0x2003e5a8
   b5f4c:	000c6bb7 	.word	0x000c6bb7
   b5f50:	2003dd34 	.word	0x2003dd34
   b5f54:	2003dd7c 	.word	0x2003dd7c

000b5f58 <_Z13sensorHandlerv>:
void sensorHandler(){
   b5f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b5f5c:	4d60      	ldr	r5, [pc, #384]	; (b60e0 <_Z13sensorHandlerv+0x188>)
void sensorHandler(){
   b5f5e:	b097      	sub	sp, #92	; 0x5c
   b5f60:	f007 fe30 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
    if(dataTimer < millis() && dataWait){       //Check if the timer for waiting after a data request has expired
   b5f64:	682b      	ldr	r3, [r5, #0]
   b5f66:	4283      	cmp	r3, r0
   b5f68:	f080 8139 	bcs.w	b61de <_Z13sensorHandlerv+0x286>
   b5f6c:	4e5d      	ldr	r6, [pc, #372]	; (b60e4 <_Z13sensorHandlerv+0x18c>)
   b5f6e:	7833      	ldrb	r3, [r6, #0]
   b5f70:	2b00      	cmp	r3, #0
   b5f72:	f000 8134 	beq.w	b61de <_Z13sensorHandlerv+0x286>
        if(Wire.requestFrom(PHADDR, 20, 1)){    //Request 20 bytes from the PH sensor
   b5f76:	f00c f8b1 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5f7a:	2301      	movs	r3, #1
   b5f7c:	2214      	movs	r2, #20
   b5f7e:	2163      	movs	r1, #99	; 0x63
   b5f80:	f00b fd15 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
   b5f84:	b1e8      	cbz	r0, b5fc2 <_Z13sensorHandlerv+0x6a>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b5f86:	f00c f8a9 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5f8a:	6803      	ldr	r3, [r0, #0]
   b5f8c:	695b      	ldr	r3, [r3, #20]
   b5f8e:	4798      	blx	r3
            int c = 0;                          //Index variable for the temporary string
   b5f90:	ac11      	add	r4, sp, #68	; 0x44
   b5f92:	4627      	mov	r7, r4
            while(Wire.available()){            // slave may send less than requested
   b5f94:	f00c f8a2 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5f98:	6803      	ldr	r3, [r0, #0]
   b5f9a:	691b      	ldr	r3, [r3, #16]
   b5f9c:	4798      	blx	r3
   b5f9e:	b138      	cbz	r0, b5fb0 <_Z13sensorHandlerv+0x58>
                tempSense[c++] = Wire.read();   //Read each of the bytes returned by the sensor into a string
   b5fa0:	f00c f89c 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5fa4:	6803      	ldr	r3, [r0, #0]
   b5fa6:	695b      	ldr	r3, [r3, #20]
   b5fa8:	4798      	blx	r3
   b5faa:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){            // slave may send less than requested
   b5fae:	e7f1      	b.n	b5f94 <_Z13sensorHandlerv+0x3c>
            sensePH = atof(tempSense);          //Convert the string to a float and store it in the global pH variable
   b5fb0:	4638      	mov	r0, r7
   b5fb2:	f00e fa99 	bl	c44e8 <atof>
   b5fb6:	ec51 0b10 	vmov	r0, r1, d0
   b5fba:	f00e fa21 	bl	c4400 <__aeabi_d2f>
   b5fbe:	4b4a      	ldr	r3, [pc, #296]	; (b60e8 <_Z13sensorHandlerv+0x190>)
   b5fc0:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(MCOND, 20, 1)){
   b5fc2:	f00c f88b 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5fc6:	2301      	movs	r3, #1
   b5fc8:	2214      	movs	r2, #20
   b5fca:	2164      	movs	r1, #100	; 0x64
   b5fcc:	f00b fcef 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
   b5fd0:	b1e8      	cbz	r0, b600e <_Z13sensorHandlerv+0xb6>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b5fd2:	f00c f883 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5fd6:	6803      	ldr	r3, [r0, #0]
   b5fd8:	695b      	ldr	r3, [r3, #20]
   b5fda:	4798      	blx	r3
            int c = 0;
   b5fdc:	ac11      	add	r4, sp, #68	; 0x44
   b5fde:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b5fe0:	f00c f87c 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5fe4:	6803      	ldr	r3, [r0, #0]
   b5fe6:	691b      	ldr	r3, [r3, #16]
   b5fe8:	4798      	blx	r3
   b5fea:	b138      	cbz	r0, b5ffc <_Z13sensorHandlerv+0xa4>
                mcondSense[c++] = Wire.read();
   b5fec:	f00c f876 	bl	c20dc <_Z19__fetch_global_Wirev>
   b5ff0:	6803      	ldr	r3, [r0, #0]
   b5ff2:	695b      	ldr	r3, [r3, #20]
   b5ff4:	4798      	blx	r3
   b5ff6:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b5ffa:	e7f1      	b.n	b5fe0 <_Z13sensorHandlerv+0x88>
            senseMCond = atof(mcondSense);
   b5ffc:	4638      	mov	r0, r7
   b5ffe:	f00e fa73 	bl	c44e8 <atof>
   b6002:	ec51 0b10 	vmov	r0, r1, d0
   b6006:	f00e f9fb 	bl	c4400 <__aeabi_d2f>
   b600a:	4b38      	ldr	r3, [pc, #224]	; (b60ec <_Z13sensorHandlerv+0x194>)
   b600c:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(COND, 20, 1)){
   b600e:	f00c f865 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6012:	2301      	movs	r3, #1
   b6014:	2214      	movs	r2, #20
   b6016:	2165      	movs	r1, #101	; 0x65
   b6018:	f00b fcc9 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
   b601c:	b1e8      	cbz	r0, b605a <_Z13sensorHandlerv+0x102>
            byte code = Wire.read();            //the first byte is the response code, we read this separately.
   b601e:	f00c f85d 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6022:	6803      	ldr	r3, [r0, #0]
   b6024:	695b      	ldr	r3, [r3, #20]
   b6026:	4798      	blx	r3
            int c = 0;
   b6028:	ac11      	add	r4, sp, #68	; 0x44
   b602a:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b602c:	f00c f856 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6030:	6803      	ldr	r3, [r0, #0]
   b6032:	691b      	ldr	r3, [r3, #16]
   b6034:	4798      	blx	r3
   b6036:	b138      	cbz	r0, b6048 <_Z13sensorHandlerv+0xf0>
                condSense[c++] = Wire.read();
   b6038:	f00c f850 	bl	c20dc <_Z19__fetch_global_Wirev>
   b603c:	6803      	ldr	r3, [r0, #0]
   b603e:	695b      	ldr	r3, [r3, #20]
   b6040:	4798      	blx	r3
   b6042:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b6046:	e7f1      	b.n	b602c <_Z13sensorHandlerv+0xd4>
            senseCond = atof(condSense);
   b6048:	4638      	mov	r0, r7
   b604a:	f00e fa4d 	bl	c44e8 <atof>
   b604e:	ec51 0b10 	vmov	r0, r1, d0
   b6052:	f00e f9d5 	bl	c4400 <__aeabi_d2f>
   b6056:	4b26      	ldr	r3, [pc, #152]	; (b60f0 <_Z13sensorHandlerv+0x198>)
   b6058:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(TEMPADDR, 20, 1)){
   b605a:	f00c f83f 	bl	c20dc <_Z19__fetch_global_Wirev>
   b605e:	2301      	movs	r3, #1
   b6060:	2214      	movs	r2, #20
   b6062:	2166      	movs	r1, #102	; 0x66
   b6064:	f00b fca3 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
   b6068:	b1e8      	cbz	r0, b60a6 <_Z13sensorHandlerv+0x14e>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b606a:	f00c f837 	bl	c20dc <_Z19__fetch_global_Wirev>
   b606e:	6803      	ldr	r3, [r0, #0]
   b6070:	695b      	ldr	r3, [r3, #20]
   b6072:	4798      	blx	r3
            int c = 0;
   b6074:	ac11      	add	r4, sp, #68	; 0x44
   b6076:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b6078:	f00c f830 	bl	c20dc <_Z19__fetch_global_Wirev>
   b607c:	6803      	ldr	r3, [r0, #0]
   b607e:	691b      	ldr	r3, [r3, #16]
   b6080:	4798      	blx	r3
   b6082:	b138      	cbz	r0, b6094 <_Z13sensorHandlerv+0x13c>
                addrSense[c++] = Wire.read();
   b6084:	f00c f82a 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6088:	6803      	ldr	r3, [r0, #0]
   b608a:	695b      	ldr	r3, [r3, #20]
   b608c:	4798      	blx	r3
   b608e:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b6092:	e7f1      	b.n	b6078 <_Z13sensorHandlerv+0x120>
            senseTemp = atof(addrSense);
   b6094:	4638      	mov	r0, r7
   b6096:	f00e fa27 	bl	c44e8 <atof>
   b609a:	ec51 0b10 	vmov	r0, r1, d0
   b609e:	f00e f9af 	bl	c4400 <__aeabi_d2f>
   b60a2:	4b14      	ldr	r3, [pc, #80]	; (b60f4 <_Z13sensorHandlerv+0x19c>)
   b60a4:	6018      	str	r0, [r3, #0]
        if(Wire.requestFrom(DOADDR, 20, 1)){
   b60a6:	f00c f819 	bl	c20dc <_Z19__fetch_global_Wirev>
   b60aa:	2301      	movs	r3, #1
   b60ac:	2214      	movs	r2, #20
   b60ae:	2161      	movs	r1, #97	; 0x61
   b60b0:	f00b fc7d 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
   b60b4:	b348      	cbz	r0, b610a <_Z13sensorHandlerv+0x1b2>
            byte code = Wire.read();             //the first byte is the response code, we read this separately.
   b60b6:	f00c f811 	bl	c20dc <_Z19__fetch_global_Wirev>
   b60ba:	6803      	ldr	r3, [r0, #0]
   b60bc:	695b      	ldr	r3, [r3, #20]
   b60be:	4798      	blx	r3
            int c = 0;
   b60c0:	ac11      	add	r4, sp, #68	; 0x44
   b60c2:	4627      	mov	r7, r4
            while(Wire.available()){   // slave may send less than requested
   b60c4:	f00c f80a 	bl	c20dc <_Z19__fetch_global_Wirev>
   b60c8:	6803      	ldr	r3, [r0, #0]
   b60ca:	691b      	ldr	r3, [r3, #16]
   b60cc:	4798      	blx	r3
   b60ce:	b198      	cbz	r0, b60f8 <_Z13sensorHandlerv+0x1a0>
                addrSense[c++] = Wire.read();
   b60d0:	f00c f804 	bl	c20dc <_Z19__fetch_global_Wirev>
   b60d4:	6803      	ldr	r3, [r0, #0]
   b60d6:	695b      	ldr	r3, [r3, #20]
   b60d8:	4798      	blx	r3
   b60da:	f804 0b01 	strb.w	r0, [r4], #1
            while(Wire.available()){   // slave may send less than requested
   b60de:	e7f1      	b.n	b60c4 <_Z13sensorHandlerv+0x16c>
   b60e0:	2003ddac 	.word	0x2003ddac
   b60e4:	2003ddb0 	.word	0x2003ddb0
   b60e8:	2003e554 	.word	0x2003e554
   b60ec:	2003e550 	.word	0x2003e550
   b60f0:	2003e548 	.word	0x2003e548
   b60f4:	2003e558 	.word	0x2003e558
            senseDO = atof(addrSense);
   b60f8:	4638      	mov	r0, r7
   b60fa:	f00e f9f5 	bl	c44e8 <atof>
   b60fe:	ec51 0b10 	vmov	r0, r1, d0
   b6102:	f00e f97d 	bl	c4400 <__aeabi_d2f>
   b6106:	4b7a      	ldr	r3, [pc, #488]	; (b62f0 <_Z13sensorHandlerv+0x398>)
   b6108:	6018      	str	r0, [r3, #0]
        dataWait = false;                       //Set flag false until next data request has been made
   b610a:	2300      	movs	r3, #0
   b610c:	7033      	strb	r3, [r6, #0]
        if(logSensors){                         //Log sensors to SD card if enabled
   b610e:	4b79      	ldr	r3, [pc, #484]	; (b62f4 <_Z13sensorHandlerv+0x39c>)
   b6110:	781b      	ldrb	r3, [r3, #0]
   b6112:	2b00      	cmp	r3, #0
   b6114:	d063      	beq.n	b61de <_Z13sensorHandlerv+0x286>
            snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b6116:	f00a fe71 	bl	c0dfc <_ZN9TimeClass5monthEv>
   b611a:	900f      	str	r0, [sp, #60]	; 0x3c
   b611c:	f00a fe62 	bl	c0de4 <_ZN9TimeClass3dayEv>
   b6120:	4604      	mov	r4, r0
   b6122:	f00a fe73 	bl	c0e0c <_ZN9TimeClass4yearEv>
   b6126:	4606      	mov	r6, r0
   b6128:	f00a fe38 	bl	c0d9c <_ZN9TimeClass4hourEv>
   b612c:	4607      	mov	r7, r0
   b612e:	f00a fe41 	bl	c0db4 <_ZN9TimeClass6minuteEv>
   b6132:	4680      	mov	r8, r0
   b6134:	f00a fe4a 	bl	c0dcc <_ZN9TimeClass6secondEv>
   b6138:	9400      	str	r4, [sp, #0]
   b613a:	4c6f      	ldr	r4, [pc, #444]	; (b62f8 <_Z13sensorHandlerv+0x3a0>)
   b613c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b613e:	4a6f      	ldr	r2, [pc, #444]	; (b62fc <_Z13sensorHandlerv+0x3a4>)
   b6140:	f8df 91d8 	ldr.w	r9, [pc, #472]	; b631c <_Z13sensorHandlerv+0x3c4>
   b6144:	f8df b1d8 	ldr.w	fp, [pc, #472]	; b6320 <_Z13sensorHandlerv+0x3c8>
   b6148:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b62f0 <_Z13sensorHandlerv+0x398>
   b614c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b6150:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b6154:	2110      	movs	r1, #16
   b6156:	a811      	add	r0, sp, #68	; 0x44
   b6158:	f008 f8bc 	bl	be2d4 <snprintf>
            if(!myFile.isOpen()){               //Print out each of the global sensor values
   b615c:	7c22      	ldrb	r2, [r4, #16]
   b615e:	4b68      	ldr	r3, [pc, #416]	; (b6300 <_Z13sensorHandlerv+0x3a8>)
   b6160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; b6324 <_Z13sensorHandlerv+0x3cc>
   b6164:	4f67      	ldr	r7, [pc, #412]	; (b6304 <_Z13sensorHandlerv+0x3ac>)
   b6166:	4e68      	ldr	r6, [pc, #416]	; (b6308 <_Z13sensorHandlerv+0x3b0>)
   b6168:	2a00      	cmp	r2, #0
   b616a:	f040 8094 	bne.w	b6296 <_Z13sensorHandlerv+0x33e>
                myFile.open(filename, O_RDWR | O_CREAT | O_AT_END);
   b616e:	f244 2202 	movw	r2, #16898	; 0x4202
   b6172:	4966      	ldr	r1, [pc, #408]	; (b630c <_Z13sensorHandlerv+0x3b4>)
   b6174:	f104 0010 	add.w	r0, r4, #16
   b6178:	f7fe fa8e 	bl	b4698 <_ZN7FatFile4openEPKci>
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b617c:	4b60      	ldr	r3, [pc, #384]	; (b6300 <_Z13sensorHandlerv+0x3a8>)
   b617e:	6818      	ldr	r0, [r3, #0]
   b6180:	f00d fdee 	bl	c3d60 <__aeabi_f2d>
   b6184:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b6188:	f8db 0000 	ldr.w	r0, [fp]
   b618c:	f00d fde8 	bl	c3d60 <__aeabi_f2d>
   b6190:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b6194:	f8da 0000 	ldr.w	r0, [sl]
   b6198:	f00d fde2 	bl	c3d60 <__aeabi_f2d>
   b619c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b61a0:	f8d9 0000 	ldr.w	r0, [r9]
   b61a4:	f00d fddc 	bl	c3d60 <__aeabi_f2d>
   b61a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b61ac:	f8d8 0000 	ldr.w	r0, [r8]
   b61b0:	f00d fdd6 	bl	c3d60 <__aeabi_f2d>
   b61b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b61b8:	6838      	ldr	r0, [r7, #0]
   b61ba:	f00d fdd1 	bl	c3d60 <__aeabi_f2d>
   b61be:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b61c2:	6830      	ldr	r0, [r6, #0]
   b61c4:	f00d fdcc 	bl	c3d60 <__aeabi_f2d>
   b61c8:	aa11      	add	r2, sp, #68	; 0x44
   b61ca:	e9cd 0100 	strd	r0, r1, [sp]
   b61ce:	4950      	ldr	r1, [pc, #320]	; (b6310 <_Z13sensorHandlerv+0x3b8>)
   b61d0:	4620      	mov	r0, r4
   b61d2:	f7fe f8f3 	bl	b43bc <_ZN5Print8printlnfEPKcz>
                myFile.close();
   b61d6:	f104 0010 	add.w	r0, r4, #16
   b61da:	f001 faa5 	bl	b7728 <_ZN7FatFile5closeEv>
    if(senseTimer < millis()){                  //Check time to see if we should request more data
   b61de:	4c4d      	ldr	r4, [pc, #308]	; (b6314 <_Z13sensorHandlerv+0x3bc>)
   b61e0:	f007 fcf0 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b61e4:	6823      	ldr	r3, [r4, #0]
   b61e6:	4283      	cmp	r3, r0
   b61e8:	d252      	bcs.n	b6290 <_Z13sensorHandlerv+0x338>
   b61ea:	f007 fceb 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
        senseTimer = millis() + SENS_POLL_RT;   //Calculate next time to request data from the sensors
   b61ee:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
   b61f2:	6020      	str	r0, [r4, #0]
   b61f4:	f007 fce6 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
        dataTimer = millis() + SENS_DATA_DLY;   //Calculate the time to read the data that has just been requested
   b61f8:	f200 3039 	addw	r0, r0, #825	; 0x339
   b61fc:	6028      	str	r0, [r5, #0]
        Wire.beginTransmission(PHADDR);         //call the circuit by its ID number.
   b61fe:	f00b ff6d 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6202:	2163      	movs	r1, #99	; 0x63
   b6204:	f00b fbec 	bl	c19e0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6208:	f00b ff68 	bl	c20dc <_Z19__fetch_global_Wirev>
   b620c:	2172      	movs	r1, #114	; 0x72
   b620e:	f7fe f826 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b6212:	f00b ff63 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6216:	f00b fbea 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(MCOND);          //call the circuit by its ID number.
   b621a:	f00b ff5f 	bl	c20dc <_Z19__fetch_global_Wirev>
   b621e:	2164      	movs	r1, #100	; 0x64
   b6220:	f00b fbde 	bl	c19e0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6224:	f00b ff5a 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6228:	2172      	movs	r1, #114	; 0x72
   b622a:	f7fe f818 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b622e:	f00b ff55 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6232:	f00b fbdc 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(COND);           //call the circuit by its ID number.
   b6236:	f00b ff51 	bl	c20dc <_Z19__fetch_global_Wirev>
   b623a:	2165      	movs	r1, #101	; 0x65
   b623c:	f00b fbd0 	bl	c19e0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6240:	f00b ff4c 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6244:	2172      	movs	r1, #114	; 0x72
   b6246:	f7fe f80a 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b624a:	f00b ff47 	bl	c20dc <_Z19__fetch_global_Wirev>
   b624e:	f00b fbce 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(TEMPADDR);       //call the circuit by its ID number.
   b6252:	f00b ff43 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6256:	2166      	movs	r1, #102	; 0x66
   b6258:	f00b fbc2 	bl	c19e0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b625c:	f00b ff3e 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6260:	2172      	movs	r1, #114	; 0x72
   b6262:	f7fd fffc 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();                 //end the I2C data transmission.
   b6266:	f00b ff39 	bl	c20dc <_Z19__fetch_global_Wirev>
   b626a:	f00b fbc0 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
        Wire.beginTransmission(DOADDR);         //call the circuit by its ID number.
   b626e:	f00b ff35 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6272:	2161      	movs	r1, #97	; 0x61
   b6274:	f00b fbb4 	bl	c19e0 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write('r');                        //transmit the command that was sent through the serial port.
   b6278:	f00b ff30 	bl	c20dc <_Z19__fetch_global_Wirev>
   b627c:	2172      	movs	r1, #114	; 0x72
   b627e:	f7fd ffee 	bl	b425e <_ZN7TwoWire5writeEi.isra.0>
        Wire.endTransmission();      
   b6282:	f00b ff2b 	bl	c20dc <_Z19__fetch_global_Wirev>
   b6286:	f00b fbb2 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
        dataWait = true;
   b628a:	4b23      	ldr	r3, [pc, #140]	; (b6318 <_Z13sensorHandlerv+0x3c0>)
   b628c:	2201      	movs	r2, #1
   b628e:	701a      	strb	r2, [r3, #0]
}
   b6290:	b017      	add	sp, #92	; 0x5c
   b6292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                myFile.printlnf("%s,%f,%f,%f,%f,%f,%f,%f",timestamp,latitude,longitude,senseTemp,sensePH,senseDO,senseMCond,senseCond);
   b6296:	6818      	ldr	r0, [r3, #0]
   b6298:	f00d fd62 	bl	c3d60 <__aeabi_f2d>
   b629c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   b62a0:	f8db 0000 	ldr.w	r0, [fp]
   b62a4:	f00d fd5c 	bl	c3d60 <__aeabi_f2d>
   b62a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   b62ac:	f8da 0000 	ldr.w	r0, [sl]
   b62b0:	f00d fd56 	bl	c3d60 <__aeabi_f2d>
   b62b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b62b8:	f8d9 0000 	ldr.w	r0, [r9]
   b62bc:	f00d fd50 	bl	c3d60 <__aeabi_f2d>
   b62c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   b62c4:	f8d8 0000 	ldr.w	r0, [r8]
   b62c8:	f00d fd4a 	bl	c3d60 <__aeabi_f2d>
   b62cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b62d0:	6838      	ldr	r0, [r7, #0]
   b62d2:	f00d fd45 	bl	c3d60 <__aeabi_f2d>
   b62d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b62da:	6830      	ldr	r0, [r6, #0]
   b62dc:	f00d fd40 	bl	c3d60 <__aeabi_f2d>
   b62e0:	aa11      	add	r2, sp, #68	; 0x44
   b62e2:	e9cd 0100 	strd	r0, r1, [sp]
   b62e6:	490a      	ldr	r1, [pc, #40]	; (b6310 <_Z13sensorHandlerv+0x3b8>)
   b62e8:	4620      	mov	r0, r4
   b62ea:	f7fe f867 	bl	b43bc <_ZN5Print8printlnfEPKcz>
   b62ee:	e776      	b.n	b61de <_Z13sensorHandlerv+0x286>
   b62f0:	2003e54c 	.word	0x2003e54c
   b62f4:	2003ded5 	.word	0x2003ded5
   b62f8:	2003defc 	.word	0x2003defc
   b62fc:	000c6a9b 	.word	0x000c6a9b
   b6300:	2003e548 	.word	0x2003e548
   b6304:	2003ded8 	.word	0x2003ded8
   b6308:	2003ddfc 	.word	0x2003ddfc
   b630c:	2003ddb2 	.word	0x2003ddb2
   b6310:	000c6bd8 	.word	0x000c6bd8
   b6314:	2003e55c 	.word	0x2003e55c
   b6318:	2003ddb0 	.word	0x2003ddb0
   b631c:	2003e554 	.word	0x2003e554
   b6320:	2003e550 	.word	0x2003e550
   b6324:	2003e558 	.word	0x2003e558

000b6328 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b6328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b632c:	4e3c      	ldr	r6, [pc, #240]	; (b6420 <_Z11XBeeHandlerv+0xf8>)
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b632e:	f8df 8104 	ldr.w	r8, [pc, #260]	; b6434 <_Z11XBeeHandlerv+0x10c>
        if(logMessages){
   b6332:	f8df 9104 	ldr.w	r9, [pc, #260]	; b6438 <_Z11XBeeHandlerv+0x110>
void XBeeHandler(){  
   b6336:	b089      	sub	sp, #36	; 0x24
   b6338:	af00      	add	r7, sp, #0
    while(Serial1.available()){                         //Read data from the XBee buffer
   b633a:	f00b fe93 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b633e:	6803      	ldr	r3, [r0, #0]
   b6340:	691b      	ldr	r3, [r3, #16]
   b6342:	4798      	blx	r3
   b6344:	2800      	cmp	r0, #0
   b6346:	d066      	beq.n	b6416 <_Z11XBeeHandlerv+0xee>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b6348:	f00b fe8c 	bl	c2064 <_Z22__fetch_global_Serial1v>
   b634c:	220a      	movs	r2, #10
   b634e:	4601      	mov	r1, r0
   b6350:	4638      	mov	r0, r7
   b6352:	f009 fd1b 	bl	bfd8c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b6356:	68bb      	ldr	r3, [r7, #8]
   b6358:	3307      	adds	r3, #7
   b635a:	f023 0307 	bic.w	r3, r3, #7
    }
   b635e:	466d      	mov	r5, sp
        char buffer[data.length()];                     //Create a buffer to take the received string object and make a character array to pass to processCommand
   b6360:	ebad 0d03 	sub.w	sp, sp, r3
   b6364:	46ea      	mov	sl, sp
   b6366:	2300      	movs	r3, #0
	inline unsigned int length(void) const {return len;}
   b6368:	68b9      	ldr	r1, [r7, #8]
   b636a:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);    //Loop over characters and copy them into char array
   b636e:	458b      	cmp	fp, r1
   b6370:	f103 0401 	add.w	r4, r3, #1
   b6374:	d207      	bcs.n	b6386 <_Z11XBeeHandlerv+0x5e>
   b6376:	4659      	mov	r1, fp
   b6378:	4638      	mov	r0, r7
   b637a:	f008 fa81 	bl	be880 <_ZNK6String6charAtEj>
   b637e:	4623      	mov	r3, r4
   b6380:	f80a 000b 	strb.w	r0, [sl, fp]
   b6384:	e7f0      	b.n	b6368 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;      //If there was a carriage return, then get rid of it and set to terminate character
   b6386:	2901      	cmp	r1, #1
   b6388:	d90a      	bls.n	b63a0 <_Z11XBeeHandlerv+0x78>
   b638a:	3901      	subs	r1, #1
   b638c:	4638      	mov	r0, r7
   b638e:	f008 fa77 	bl	be880 <_ZNK6String6charAtEj>
   b6392:	280d      	cmp	r0, #13
   b6394:	bf01      	itttt	eq
   b6396:	68bb      	ldreq	r3, [r7, #8]
   b6398:	4453      	addeq	r3, sl
   b639a:	2200      	moveq	r2, #0
   b639c:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        Serial.println("New XBee Command:");
   b63a0:	f00b f994 	bl	c16cc <_Z16_fetch_usbserialv>
   b63a4:	4631      	mov	r1, r6
   b63a6:	f009 fc68 	bl	bfc7a <_ZN5Print7printlnEPKc>
        Serial.println(data);                           //Print out command for debugging
   b63aa:	f00b f98f 	bl	c16cc <_Z16_fetch_usbserialv>
   b63ae:	6839      	ldr	r1, [r7, #0]
   b63b0:	f009 fc63 	bl	bfc7a <_ZN5Print7printlnEPKc>
        processCommand(buffer,2,true);                  //Process the command received over Xbee using the dictionary
   b63b4:	2201      	movs	r2, #1
   b63b6:	2102      	movs	r1, #2
   b63b8:	4650      	mov	r0, sl
   b63ba:	f7fe fa29 	bl	b4810 <_Z14processCommandPKchb>
        if(buffer[0] == 'B' || buffer[0] == 'C') XBeeRxTime = millis(); //If the first characters were from another bot or from the CC, then assume Xbee is working, so update it's watchdog counter
   b63be:	f89a 3000 	ldrb.w	r3, [sl]
   b63c2:	3b42      	subs	r3, #66	; 0x42
   b63c4:	2b01      	cmp	r3, #1
   b63c6:	d803      	bhi.n	b63d0 <_Z11XBeeHandlerv+0xa8>
   b63c8:	f007 fbfc 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b63cc:	f8c8 0000 	str.w	r0, [r8]
        if(logMessages){
   b63d0:	f899 3000 	ldrb.w	r3, [r9]
   b63d4:	b1d3      	cbz	r3, b640c <_Z11XBeeHandlerv+0xe4>
   b63d6:	4813      	ldr	r0, [pc, #76]	; (b6424 <_Z11XBeeHandlerv+0xfc>)
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b63d8:	7c03      	ldrb	r3, [r0, #16]
   b63da:	b92b      	cbnz	r3, b63e8 <_Z11XBeeHandlerv+0xc0>
   b63dc:	4912      	ldr	r1, [pc, #72]	; (b6428 <_Z11XBeeHandlerv+0x100>)
   b63de:	f244 2202 	movw	r2, #16898	; 0x4202
   b63e2:	3010      	adds	r0, #16
   b63e4:	f7fe f958 	bl	b4698 <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b63e8:	4639      	mov	r1, r7
   b63ea:	f107 0010 	add.w	r0, r7, #16
   b63ee:	f008 f9fd 	bl	be7ec <_ZN6StringC1ERKS_>
   b63f2:	490e      	ldr	r1, [pc, #56]	; (b642c <_Z11XBeeHandlerv+0x104>)
   b63f4:	480b      	ldr	r0, [pc, #44]	; (b6424 <_Z11XBeeHandlerv+0xfc>)
   b63f6:	f107 0210 	add.w	r2, r7, #16
   b63fa:	f7fd ffdf 	bl	b43bc <_ZN5Print8printlnfEPKcz>
   b63fe:	f107 0010 	add.w	r0, r7, #16
   b6402:	f008 f95d 	bl	be6c0 <_ZN6StringD1Ev>
            logFile.close();
   b6406:	480a      	ldr	r0, [pc, #40]	; (b6430 <_Z11XBeeHandlerv+0x108>)
   b6408:	f001 f98e 	bl	b7728 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');    //Each command is terminated by a null character, so use this to separate multiple commands if multiple in the buffer
   b640c:	4638      	mov	r0, r7
   b640e:	f008 f957 	bl	be6c0 <_ZN6StringD1Ev>
   b6412:	46ad      	mov	sp, r5
    while(Serial1.available()){                         //Read data from the XBee buffer
   b6414:	e791      	b.n	b633a <_Z11XBeeHandlerv+0x12>
}
   b6416:	3724      	adds	r7, #36	; 0x24
   b6418:	46bd      	mov	sp, r7
   b641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b641e:	bf00      	nop
   b6420:	000c6bf0 	.word	0x000c6bf0
   b6424:	2003de7c 	.word	0x2003de7c
   b6428:	2003ddd0 	.word	0x2003ddd0
   b642c:	000c6c02 	.word	0x000c6c02
   b6430:	2003de8c 	.word	0x2003de8c
   b6434:	2003dd80 	.word	0x2003dd80
   b6438:	2003ded4 	.word	0x2003ded4

000b643c <_Z13dataOffloaderv>:
void dataOffloader(){
   b643c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6440:	b0ad      	sub	sp, #180	; 0xb4
    Serial.println("Entering Data Offloader Mode");
   b6442:	f00b f943 	bl	c16cc <_Z16_fetch_usbserialv>
   b6446:	4963      	ldr	r1, [pc, #396]	; (b65d4 <_Z13dataOffloaderv+0x198>)
   b6448:	f009 fc17 	bl	bfc7a <_ZN5Print7printlnEPKc>
    myFile.close();
   b644c:	4862      	ldr	r0, [pc, #392]	; (b65d8 <_Z13dataOffloaderv+0x19c>)
   b644e:	f001 f96b 	bl	b7728 <_ZN7FatFile5closeEv>
    if (!logDir.open("/")) {
   b6452:	4962      	ldr	r1, [pc, #392]	; (b65dc <_Z13dataOffloaderv+0x1a0>)
   b6454:	4862      	ldr	r0, [pc, #392]	; (b65e0 <_Z13dataOffloaderv+0x1a4>)
   b6456:	2200      	movs	r2, #0
   b6458:	f7fe f91e 	bl	b4698 <_ZN7FatFile4openEPKci>
   b645c:	b948      	cbnz	r0, b6472 <_Z13dataOffloaderv+0x36>
        offloadMode = false;
   b645e:	4b61      	ldr	r3, [pc, #388]	; (b65e4 <_Z13dataOffloaderv+0x1a8>)
   b6460:	7018      	strb	r0, [r3, #0]
        Serial.println("Error, could not open root SD card directory");
   b6462:	f00b f933 	bl	c16cc <_Z16_fetch_usbserialv>
   b6466:	4960      	ldr	r1, [pc, #384]	; (b65e8 <_Z13dataOffloaderv+0x1ac>)
}
   b6468:	b02d      	add	sp, #180	; 0xb4
   b646a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Error, could not open root SD card directory");
   b646e:	f009 bc04 	b.w	bfc7a <_ZN5Print7printlnEPKc>
    Serial.println("Waiting for CCHub connection...");
   b6472:	f00b f92b 	bl	c16cc <_Z16_fetch_usbserialv>
   b6476:	495d      	ldr	r1, [pc, #372]	; (b65ec <_Z13dataOffloaderv+0x1b0>)
        BLE.advertise(&advData);;
   b6478:	4d5d      	ldr	r5, [pc, #372]	; (b65f0 <_Z13dataOffloaderv+0x1b4>)
    Serial.println("Waiting for CCHub connection...");
   b647a:	f009 fbfe 	bl	bfc7a <_ZN5Print7printlnEPKc>
    while(!BLE.connected()){
   b647e:	f008 fd65 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6482:	f008 fdc1 	bl	bf008 <_ZNK8particle14BleLocalDevice9connectedEv>
   b6486:	4604      	mov	r4, r0
   b6488:	b948      	cbnz	r0, b649e <_Z13dataOffloaderv+0x62>
        BLE.advertise(&advData);;
   b648a:	f008 fd5f 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b648e:	4622      	mov	r2, r4
   b6490:	4629      	mov	r1, r5
   b6492:	f008 fe0c 	bl	bf0ae <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
        delay(10);
   b6496:	200a      	movs	r0, #10
   b6498:	f00a fcda 	bl	c0e50 <delay>
    while(!BLE.connected()){
   b649c:	e7ef      	b.n	b647e <_Z13dataOffloaderv+0x42>
    Serial.println("Starting transfer...");
   b649e:	f00b f915 	bl	c16cc <_Z16_fetch_usbserialv>
   b64a2:	4954      	ldr	r1, [pc, #336]	; (b65f4 <_Z13dataOffloaderv+0x1b8>)
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b64a4:	4f4e      	ldr	r7, [pc, #312]	; (b65e0 <_Z13dataOffloaderv+0x1a4>)
   b64a6:	4d4c      	ldr	r5, [pc, #304]	; (b65d8 <_Z13dataOffloaderv+0x19c>)
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b64a8:	f8df 816c 	ldr.w	r8, [pc, #364]	; b6618 <_Z13dataOffloaderv+0x1dc>
    Serial.println("Starting transfer...");
   b64ac:	f009 fbe5 	bl	bfc7a <_ZN5Print7printlnEPKc>
    while (myFile.openNext(&logDir, O_RDONLY) && BLE.connected()) {
   b64b0:	2200      	movs	r2, #0
   b64b2:	4639      	mov	r1, r7
   b64b4:	4628      	mov	r0, r5
   b64b6:	f001 f8c4 	bl	b7642 <_ZN7FatFile8openNextEPS_i>
   b64ba:	b1f8      	cbz	r0, b64fc <_Z13dataOffloaderv+0xc0>
   b64bc:	f008 fd46 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b64c0:	f008 fda2 	bl	bf008 <_ZNK8particle14BleLocalDevice9connectedEv>
   b64c4:	b1d0      	cbz	r0, b64fc <_Z13dataOffloaderv+0xc0>
        myFile.getName(namebuf,MAX_FILENAME_LEN);
   b64c6:	221e      	movs	r2, #30
   b64c8:	a901      	add	r1, sp, #4
   b64ca:	4628      	mov	r0, r5
   b64cc:	f000 fb1d 	bl	b6b0a <_ZN7FatFile7getNameEPcj>
        Serial.printlnf("Checking if file %s is a .csv or .txt...", namebuf);
   b64d0:	f00b f8fc 	bl	c16cc <_Z16_fetch_usbserialv>
   b64d4:	4641      	mov	r1, r8
   b64d6:	aa01      	add	r2, sp, #4
   b64d8:	f7fd ff70 	bl	b43bc <_ZN5Print8printlnfEPKcz>
        if(!strstr(strlwr(namebuf + (strlen(namebuf) - 4)), ".csv")){
   b64dc:	a801      	add	r0, sp, #4
   b64de:	f00e f8d6 	bl	c468e <strlen>
   b64e2:	ab01      	add	r3, sp, #4
   b64e4:	3804      	subs	r0, #4
   b64e6:	4418      	add	r0, r3
   b64e8:	f00e f8da 	bl	c46a0 <strlwr>
   b64ec:	4942      	ldr	r1, [pc, #264]	; (b65f8 <_Z13dataOffloaderv+0x1bc>)
   b64ee:	f00e f930 	bl	c4752 <strstr>
   b64f2:	b9d8      	cbnz	r0, b652c <_Z13dataOffloaderv+0xf0>
            myFile.close();
   b64f4:	4628      	mov	r0, r5
   b64f6:	f001 f917 	bl	b7728 <_ZN7FatFile5closeEv>
   b64fa:	e7d9      	b.n	b64b0 <_Z13dataOffloaderv+0x74>
    logDir.close();
   b64fc:	4838      	ldr	r0, [pc, #224]	; (b65e0 <_Z13dataOffloaderv+0x1a4>)
   b64fe:	f001 f913 	bl	b7728 <_ZN7FatFile5closeEv>
    memset(fileCode,0,8+MAX_FILENAME_LEN);
   b6502:	2226      	movs	r2, #38	; 0x26
   b6504:	2100      	movs	r1, #0
   b6506:	a809      	add	r0, sp, #36	; 0x24
   b6508:	f00e f836 	bl	c4578 <memset>
    strcpy(fileCode,"filedone");
   b650c:	493b      	ldr	r1, [pc, #236]	; (b65fc <_Z13dataOffloaderv+0x1c0>)
   b650e:	a809      	add	r0, sp, #36	; 0x24
   b6510:	f00e f898 	bl	c4644 <strcpy>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b6514:	2300      	movs	r3, #0
   b6516:	2226      	movs	r2, #38	; 0x26
   b6518:	a909      	add	r1, sp, #36	; 0x24
   b651a:	4839      	ldr	r0, [pc, #228]	; (b6600 <_Z13dataOffloaderv+0x1c4>)
   b651c:	f008 fc06 	bl	bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    offloadMode = false;
   b6520:	4b30      	ldr	r3, [pc, #192]	; (b65e4 <_Z13dataOffloaderv+0x1a8>)
   b6522:	2200      	movs	r2, #0
   b6524:	701a      	strb	r2, [r3, #0]
}
   b6526:	b02d      	add	sp, #180	; 0xb4
   b6528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b652c:	2226      	movs	r2, #38	; 0x26
   b652e:	2100      	movs	r1, #0
   b6530:	a809      	add	r0, sp, #36	; 0x24
   b6532:	f00e f821 	bl	c4578 <memset>
            strcpy(fileCode,"filename");
   b6536:	4933      	ldr	r1, [pc, #204]	; (b6604 <_Z13dataOffloaderv+0x1c8>)
            while(myFile.available()){
   b6538:	4e33      	ldr	r6, [pc, #204]	; (b6608 <_Z13dataOffloaderv+0x1cc>)
   b653a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b6600 <_Z13dataOffloaderv+0x1c4>
            strcpy(fileCode,"filename");
   b653e:	a809      	add	r0, sp, #36	; 0x24
   b6540:	f00e f880 	bl	c4644 <strcpy>
            strcat(fileCode,namebuf);
   b6544:	a901      	add	r1, sp, #4
   b6546:	a809      	add	r0, sp, #36	; 0x24
   b6548:	f00e f84c 	bl	c45e4 <strcat>
            Serial.printlnf("Sending command %s",fileCode);
   b654c:	f00b f8be 	bl	c16cc <_Z16_fetch_usbserialv>
   b6550:	492e      	ldr	r1, [pc, #184]	; (b660c <_Z13dataOffloaderv+0x1d0>)
   b6552:	aa09      	add	r2, sp, #36	; 0x24
   b6554:	f7fd ff32 	bl	b43bc <_ZN5Print8printlnfEPKcz>
   b6558:	2300      	movs	r3, #0
   b655a:	2226      	movs	r2, #38	; 0x26
   b655c:	a909      	add	r1, sp, #36	; 0x24
   b655e:	4828      	ldr	r0, [pc, #160]	; (b6600 <_Z13dataOffloaderv+0x1c4>)
   b6560:	f008 fbe4 	bl	bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            Serial.printlnf("File %s is a .csv or .txt printing data", namebuf);
   b6564:	f00b f8b2 	bl	c16cc <_Z16_fetch_usbserialv>
   b6568:	4929      	ldr	r1, [pc, #164]	; (b6610 <_Z13dataOffloaderv+0x1d4>)
   b656a:	aa01      	add	r2, sp, #4
   b656c:	f7fd ff26 	bl	b43bc <_ZN5Print8printlnfEPKcz>
            delay(150);
   b6570:	2096      	movs	r0, #150	; 0x96
   b6572:	f00a fc6d 	bl	c0e50 <delay>
            noInterrupts();
   b6576:	f00b f8fb 	bl	c1770 <_Z12noInterruptsv>
            while(myFile.available()){
   b657a:	4630      	mov	r0, r6
   b657c:	f7fd fdaf 	bl	b40de <_ZN4File9availableEv>
   b6580:	4604      	mov	r4, r0
   b6582:	b188      	cbz	r0, b65a8 <_Z13dataOffloaderv+0x16c>
                memset(lineBuffer,0,BLE_OFFLD_BUF);
   b6584:	2264      	movs	r2, #100	; 0x64
   b6586:	2100      	movs	r1, #0
   b6588:	a813      	add	r0, sp, #76	; 0x4c
   b658a:	f00d fff5 	bl	c4578 <memset>
                myFile.readBytesUntil('\r',lineBuffer,BLE_OFFLD_BUF);
   b658e:	aa13      	add	r2, sp, #76	; 0x4c
   b6590:	2364      	movs	r3, #100	; 0x64
   b6592:	210d      	movs	r1, #13
   b6594:	4630      	mov	r0, r6
   b6596:	f009 fbe0 	bl	bfd5a <_ZN6Stream14readBytesUntilEcPcj>
   b659a:	2300      	movs	r3, #0
   b659c:	2264      	movs	r2, #100	; 0x64
   b659e:	a913      	add	r1, sp, #76	; 0x4c
   b65a0:	4648      	mov	r0, r9
   b65a2:	f008 fbc3 	bl	bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            while(myFile.available()){
   b65a6:	e7e8      	b.n	b657a <_Z13dataOffloaderv+0x13e>
            interrupts();
   b65a8:	f00b f8e4 	bl	c1774 <_Z10interruptsv>
            memset(fileCode,0,8+MAX_FILENAME_LEN);
   b65ac:	2226      	movs	r2, #38	; 0x26
   b65ae:	4621      	mov	r1, r4
   b65b0:	a809      	add	r0, sp, #36	; 0x24
   b65b2:	f00d ffe1 	bl	c4578 <memset>
            strcpy(fileCode,"filecomp");
   b65b6:	4917      	ldr	r1, [pc, #92]	; (b6614 <_Z13dataOffloaderv+0x1d8>)
   b65b8:	a809      	add	r0, sp, #36	; 0x24
   b65ba:	f00e f843 	bl	c4644 <strcpy>
   b65be:	4623      	mov	r3, r4
   b65c0:	2226      	movs	r2, #38	; 0x26
   b65c2:	a909      	add	r1, sp, #36	; 0x24
   b65c4:	480e      	ldr	r0, [pc, #56]	; (b6600 <_Z13dataOffloaderv+0x1c4>)
   b65c6:	f008 fbb1 	bl	bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            delay(150);
   b65ca:	2096      	movs	r0, #150	; 0x96
   b65cc:	f00a fc40 	bl	c0e50 <delay>
   b65d0:	e790      	b.n	b64f4 <_Z13dataOffloaderv+0xb8>
   b65d2:	bf00      	nop
   b65d4:	000c6c23 	.word	0x000c6c23
   b65d8:	2003df0c 	.word	0x2003df0c
   b65dc:	000c6c40 	.word	0x000c6c40
   b65e0:	2003de58 	.word	0x2003de58
   b65e4:	2003e0b0 	.word	0x2003e0b0
   b65e8:	000c6c42 	.word	0x000c6c42
   b65ec:	000c6c6f 	.word	0x000c6c6f
   b65f0:	2003dd88 	.word	0x2003dd88
   b65f4:	000c6c8f 	.word	0x000c6c8f
   b65f8:	000c6abd 	.word	0x000c6abd
   b65fc:	000c6ccd 	.word	0x000c6ccd
   b6600:	2003e0a8 	.word	0x2003e0a8
   b6604:	000c6cd6 	.word	0x000c6cd6
   b6608:	2003defc 	.word	0x2003defc
   b660c:	000c6cdf 	.word	0x000c6cdf
   b6610:	000c6cf2 	.word	0x000c6cf2
   b6614:	000c6d1a 	.word	0x000c6d1a
   b6618:	000c6ca4 	.word	0x000c6ca4

000b661c <loop>:
void loop(){
   b661c:	b508      	push	{r3, lr}
    getPositionData();      //Grab position data from GPS and Compass
   b661e:	f7ff f933 	bl	b5888 <_Z15getPositionDatav>
    readPowerSys();         //Read power from battery and solar panel
   b6622:	f7fe fe51 	bl	b52c8 <_Z12readPowerSysv>
    sensorHandler();        //Read and request data from Atlas sensor
   b6626:	f7ff fc97 	bl	b5f58 <_Z13sensorHandlerv>
    XBeeHandler();          //Check if a string has come in from XBee
   b662a:	f7ff fe7d 	bl	b6328 <_Z11XBeeHandlerv>
    statusUpdate();         //Check if a status update has to be sent out
   b662e:	f7ff fc1d 	bl	b5e6c <_Z12statusUpdatev>
    updateMotors();         //Update the motor speeds dependent on the mode
   b6632:	f7ff fa07 	bl	b5a44 <_Z12updateMotorsv>
    if(offloadMode) dataOffloader();    //Check if a signal to offload has been received
   b6636:	4b06      	ldr	r3, [pc, #24]	; (b6650 <loop+0x34>)
   b6638:	781b      	ldrb	r3, [r3, #0]
   b663a:	b10b      	cbz	r3, b6640 <loop+0x24>
   b663c:	f7ff fefe 	bl	b643c <_Z13dataOffloaderv>
    sendResponseData();     //Send sensor data if requested from the CC
   b6640:	f7ff fbaa 	bl	b5d98 <_Z16sendResponseDatav>
}
   b6644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(10);              //Slow down the program a little bit, 10ms per loop
   b6648:	200a      	movs	r0, #10
   b664a:	f00a bc01 	b.w	c0e50 <delay>
   b664e:	bf00      	nop
   b6650:	2003e0b0 	.word	0x2003e0b0

000b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6654:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6656:	e9d0 5300 	ldrd	r5, r3, [r0]
   b665a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b665c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b665e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6662:	42ae      	cmp	r6, r5
   b6664:	d004      	beq.n	b6670 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b6666:	4628      	mov	r0, r5
   b6668:	f008 f82a 	bl	be6c0 <_ZN6StringD1Ev>
   b666c:	3514      	adds	r5, #20
   b666e:	e7f8      	b.n	b6662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6670:	6820      	ldr	r0, [r4, #0]
   b6672:	f007 fe0f 	bl	be294 <free>
    AllocatorT::free(data_);
}
   b6676:	4620      	mov	r0, r4
   b6678:	bd70      	pop	{r4, r5, r6, pc}

000b667a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b667a:	b5f0      	push	{r4, r5, r6, r7, lr}
   b667c:	4616      	mov	r6, r2
   b667e:	b08f      	sub	sp, #60	; 0x3c
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b6680:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6682:	e9c0 2200 	strd	r2, r2, [r0]
   b6686:	4604      	mov	r4, r0
   b6688:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b668a:	af09      	add	r7, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b668c:	4619      	mov	r1, r3
   b668e:	a804      	add	r0, sp, #16
   b6690:	f008 fb0e 	bl	becb0 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   b6694:	9914      	ldr	r1, [sp, #80]	; 0x50
   b6696:	4638      	mov	r0, r7
   b6698:	f008 fb0a 	bl	becb0 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   b669c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b669e:	9302      	str	r3, [sp, #8]
   b66a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b66a2:	4620      	mov	r0, r4
   b66a4:	e9cd 7300 	strd	r7, r3, [sp]
   b66a8:	4632      	mov	r2, r6
   b66aa:	ab04      	add	r3, sp, #16
   b66ac:	4629      	mov	r1, r5
   b66ae:	f009 f87d 	bl	bf7ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b66b2:	4620      	mov	r0, r4
   b66b4:	b00f      	add	sp, #60	; 0x3c
   b66b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b66b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b66b8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b66ba:	4c0b      	ldr	r4, [pc, #44]	; (b66e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b66bc:	7821      	ldrb	r1, [r4, #0]
   b66be:	f3bf 8f5b 	dmb	ish
   b66c2:	f011 0101 	ands.w	r1, r1, #1
   b66c6:	d10b      	bne.n	b66e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b66c8:	4620      	mov	r0, r4
   b66ca:	9101      	str	r1, [sp, #4]
   b66cc:	f7fd fcf8 	bl	b40c0 <__cxa_guard_acquire>
   b66d0:	9901      	ldr	r1, [sp, #4]
   b66d2:	b128      	cbz	r0, b66e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b66d4:	4805      	ldr	r0, [pc, #20]	; (b66ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b66d6:	f007 fea9 	bl	be42c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b66da:	4620      	mov	r0, r4
   b66dc:	f7fd fcf5 	bl	b40ca <__cxa_guard_release>
        return instance;
    }
   b66e0:	4802      	ldr	r0, [pc, #8]	; (b66ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b66e2:	b002      	add	sp, #8
   b66e4:	bd10      	pop	{r4, pc}
   b66e6:	bf00      	nop
   b66e8:	2003dd28 	.word	0x2003dd28
   b66ec:	2003dd2c 	.word	0x2003dd2c

000b66f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b66f0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b66f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66f4:	4604      	mov	r4, r0
   b66f6:	460d      	mov	r5, r1
   b66f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b66fa:	d916      	bls.n	b672a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b66fc:	4290      	cmp	r0, r2
   b66fe:	d215      	bcs.n	b672c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b6700:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6704:	1a75      	subs	r5, r6, r1
   b6706:	f1a1 0714 	sub.w	r7, r1, #20
   b670a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b670c:	42b7      	cmp	r7, r6
   b670e:	d01c      	beq.n	b674a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b6710:	b12c      	cbz	r4, b671e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b6712:	4631      	mov	r1, r6
   b6714:	4620      	mov	r0, r4
   b6716:	f008 f84f 	bl	be7b8 <_ZN6StringC1EOS_>
   b671a:	7c33      	ldrb	r3, [r6, #16]
   b671c:	7423      	strb	r3, [r4, #16]
   b671e:	4630      	mov	r0, r6
   b6720:	f007 ffce 	bl	be6c0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6724:	3e14      	subs	r6, #20
   b6726:	3c14      	subs	r4, #20
   b6728:	e7f0      	b.n	b670c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b672a:	d00e      	beq.n	b674a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b672c:	42b5      	cmp	r5, r6
   b672e:	d00c      	beq.n	b674a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b6730:	b12c      	cbz	r4, b673e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b6732:	4629      	mov	r1, r5
   b6734:	4620      	mov	r0, r4
   b6736:	f008 f83f 	bl	be7b8 <_ZN6StringC1EOS_>
   b673a:	7c2b      	ldrb	r3, [r5, #16]
   b673c:	7423      	strb	r3, [r4, #16]
   b673e:	4628      	mov	r0, r5
   b6740:	f007 ffbe 	bl	be6c0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6744:	3514      	adds	r5, #20
   b6746:	3414      	adds	r4, #20
   b6748:	e7f0      	b.n	b672c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6750:	2300      	movs	r3, #0
   b6752:	e9c0 3300 	strd	r3, r3, [r0]
   b6756:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6758:	684f      	ldr	r7, [r1, #4]
   b675a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b675c:	4604      	mov	r4, r0
   b675e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6760:	dd23      	ble.n	b67aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6762:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b6766:	fb08 f007 	mul.w	r0, r8, r7
   b676a:	f007 fd8b 	bl	be284 <malloc>
            if (!d) {
   b676e:	4605      	mov	r5, r0
   b6770:	b1d8      	cbz	r0, b67aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b6772:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6776:	fb08 1202 	mla	r2, r8, r2, r1
   b677a:	f7ff ffb9 	bl	b66f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b677e:	6820      	ldr	r0, [r4, #0]
   b6780:	f007 fd88 	bl	be294 <free>
        data_ = d;
   b6784:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6786:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6788:	e9d6 7300 	ldrd	r7, r3, [r6]
   b678c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b6790:	45b8      	cmp	r8, r7
   b6792:	d008      	beq.n	b67a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b6794:	4639      	mov	r1, r7
   b6796:	4628      	mov	r0, r5
   b6798:	f008 f828 	bl	be7ec <_ZN6StringC1ERKS_>
   b679c:	7c3b      	ldrb	r3, [r7, #16]
   b679e:	742b      	strb	r3, [r5, #16]
   b67a0:	3714      	adds	r7, #20
   b67a2:	3514      	adds	r5, #20
   b67a4:	e7f4      	b.n	b6790 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b67a6:	6873      	ldr	r3, [r6, #4]
   b67a8:	6063      	str	r3, [r4, #4]
}
   b67aa:	4620      	mov	r0, r4
   b67ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b67b0 <_GLOBAL__sub_I_SystemMode>:
   b67b0:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   b67b2:	4b85      	ldr	r3, [pc, #532]	; (b69c8 <_GLOBAL__sub_I_SystemMode+0x218>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b67b4:	4a85      	ldr	r2, [pc, #532]	; (b69cc <_GLOBAL__sub_I_SystemMode+0x21c>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b67b6:	4d86      	ldr	r5, [pc, #536]	; (b69d0 <_GLOBAL__sub_I_SystemMode+0x220>)
	    _M_invoker = &_My_handler::_M_invoke;
   b67b8:	4f86      	ldr	r7, [pc, #536]	; (b69d4 <_GLOBAL__sub_I_SystemMode+0x224>)
   b67ba:	2601      	movs	r6, #1
   b67bc:	701e      	strb	r6, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b67be:	4b86      	ldr	r3, [pc, #536]	; (b69d8 <_GLOBAL__sub_I_SystemMode+0x228>)
   b67c0:	2400      	movs	r4, #0
   b67c2:	b093      	sub	sp, #76	; 0x4c
    SleepResult() {}
   b67c4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b67c6:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b67ca:	2003      	movs	r0, #3
   b67cc:	f007 fc7e 	bl	be0cc <set_system_mode>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, WaterNetService);
   b67d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b67d4:	682b      	ldr	r3, [r5, #0]
   b67d6:	9300      	str	r3, [sp, #0]
   b67d8:	4b80      	ldr	r3, [pc, #512]	; (b69dc <_GLOBAL__sub_I_SystemMode+0x22c>)
   b67da:	4981      	ldr	r1, [pc, #516]	; (b69e0 <_GLOBAL__sub_I_SystemMode+0x230>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	4881      	ldr	r0, [pc, #516]	; (b69e4 <_GLOBAL__sub_I_SystemMode+0x234>)
   b67e0:	f04f 0210 	mov.w	r2, #16
   b67e4:	f7ff ff49 	bl	b667a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, WaterNetService, BLEDataReceived, NULL);
   b67e8:	4b7f      	ldr	r3, [pc, #508]	; (b69e8 <_GLOBAL__sub_I_SystemMode+0x238>)
   b67ea:	9402      	str	r4, [sp, #8]
   b67ec:	9301      	str	r3, [sp, #4]
   b67ee:	682b      	ldr	r3, [r5, #0]
   b67f0:	9300      	str	r3, [sp, #0]
   b67f2:	4b7e      	ldr	r3, [pc, #504]	; (b69ec <_GLOBAL__sub_I_SystemMode+0x23c>)
   b67f4:	497e      	ldr	r1, [pc, #504]	; (b69f0 <_GLOBAL__sub_I_SystemMode+0x240>)
   b67f6:	681b      	ldr	r3, [r3, #0]
   b67f8:	487e      	ldr	r0, [pc, #504]	; (b69f4 <_GLOBAL__sub_I_SystemMode+0x244>)
   b67fa:	f04f 0204 	mov.w	r2, #4
   b67fe:	f7ff ff3c 	bl	b667a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleCharacteristic offloadCharacteristic("off", BleCharacteristicProperty::NOTIFY, offldUuid, WaterNetService);
   b6802:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b6806:	682b      	ldr	r3, [r5, #0]
   b6808:	9300      	str	r3, [sp, #0]
   b680a:	4b7b      	ldr	r3, [pc, #492]	; (b69f8 <_GLOBAL__sub_I_SystemMode+0x248>)
   b680c:	497b      	ldr	r1, [pc, #492]	; (b69fc <_GLOBAL__sub_I_SystemMode+0x24c>)
   b680e:	681b      	ldr	r3, [r3, #0]
   b6810:	487b      	ldr	r0, [pc, #492]	; (b6a00 <_GLOBAL__sub_I_SystemMode+0x250>)
   b6812:	f04f 0210 	mov.w	r2, #16
   b6816:	f7ff ff30 	bl	b667a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
    BleCharacteristic bledbgCharacteristic("dbg", BleCharacteristicProperty::NOTIFY, bledbgUuid, WaterNetService);
   b681a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b681e:	682b      	ldr	r3, [r5, #0]
   b6820:	9300      	str	r3, [sp, #0]
   b6822:	4b78      	ldr	r3, [pc, #480]	; (b6a04 <_GLOBAL__sub_I_SystemMode+0x254>)
   b6824:	4978      	ldr	r1, [pc, #480]	; (b6a08 <_GLOBAL__sub_I_SystemMode+0x258>)
   b6826:	681b      	ldr	r3, [r3, #0]
   b6828:	4878      	ldr	r0, [pc, #480]	; (b6a0c <_GLOBAL__sub_I_SystemMode+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   b682a:	4d79      	ldr	r5, [pc, #484]	; (b6a10 <_GLOBAL__sub_I_SystemMode+0x260>)
   b682c:	f04f 0210 	mov.w	r2, #16
   b6830:	f7ff ff23 	bl	b667a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
BleAdvertisingData advData;                         //Advertising data
   b6834:	4877      	ldr	r0, [pc, #476]	; (b6a14 <_GLOBAL__sub_I_SystemMode+0x264>)
   b6836:	f008 fdcc 	bl	bf3d2 <_ZN8particle18BleAdvertisingDataC1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b683a:	4b77      	ldr	r3, [pc, #476]	; (b6a18 <_GLOBAL__sub_I_SystemMode+0x268>)
   b683c:	930e      	str	r3, [sp, #56]	; 0x38
Timer watchdog(WATCHDOG_PD, wdogHandler);           //Create timer for watchdog, which checks if certain methods of communication are available
   b683e:	aa0e      	add	r2, sp, #56	; 0x38
   b6840:	4623      	mov	r3, r4
   b6842:	f643 2198 	movw	r1, #15000	; 0x3a98
   b6846:	4875      	ldr	r0, [pc, #468]	; (b6a1c <_GLOBAL__sub_I_SystemMode+0x26c>)
	    _M_manager = &_My_handler::_M_manager;
   b6848:	9510      	str	r5, [sp, #64]	; 0x40
	    _M_invoker = &_My_handler::_M_invoke;
   b684a:	9711      	str	r7, [sp, #68]	; 0x44
   b684c:	f7fd fe70 	bl	b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6850:	a80e      	add	r0, sp, #56	; 0x38
   b6852:	f7fd fe35 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6856:	4b72      	ldr	r3, [pc, #456]	; (b6a20 <_GLOBAL__sub_I_SystemMode+0x270>)
   b6858:	930e      	str	r3, [sp, #56]	; 0x38
Timer ledTimer(300,LEDHandler);                     //Create timer for LED, which updates the color of the LED based on what communication/hardware modes are available
   b685a:	aa0e      	add	r2, sp, #56	; 0x38
   b685c:	4623      	mov	r3, r4
   b685e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6862:	4870      	ldr	r0, [pc, #448]	; (b6a24 <_GLOBAL__sub_I_SystemMode+0x274>)
	    _M_manager = &_My_handler::_M_manager;
   b6864:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6868:	f7fd fe62 	bl	b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b686c:	a80e      	add	r0, sp, #56	; 0x38
   b686e:	f7fd fe27 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6872:	4b6d      	ldr	r3, [pc, #436]	; (b6a28 <_GLOBAL__sub_I_SystemMode+0x278>)
   b6874:	930e      	str	r3, [sp, #56]	; 0x38
Timer motionTimer(2500, motionHandler);             //Create timer for motor watchdog, which cuts off motors if messages from CC have not been received recently enough
   b6876:	aa0e      	add	r2, sp, #56	; 0x38
   b6878:	4623      	mov	r3, r4
   b687a:	f640 11c4 	movw	r1, #2500	; 0x9c4
   b687e:	486b      	ldr	r0, [pc, #428]	; (b6a2c <_GLOBAL__sub_I_SystemMode+0x27c>)
	    _M_manager = &_My_handler::_M_manager;
   b6880:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b6884:	f7fd fe54 	bl	b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b6888:	a80e      	add	r0, sp, #56	; 0x38
   b688a:	f7fd fe19 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b688e:	4b68      	ldr	r3, [pc, #416]	; (b6a30 <_GLOBAL__sub_I_SystemMode+0x280>)
   b6890:	930e      	str	r3, [sp, #56]	; 0x38
Timer statusPD(STATUS_PD,StatusHandler);            //Create timer for status, which calculates the status values that will be transmitted to CC and sets a flag for transmitting out the status
   b6892:	aa0e      	add	r2, sp, #56	; 0x38
   b6894:	4623      	mov	r3, r4
   b6896:	f242 7110 	movw	r1, #10000	; 0x2710
   b689a:	4866      	ldr	r0, [pc, #408]	; (b6a34 <_GLOBAL__sub_I_SystemMode+0x284>)
	    _M_manager = &_My_handler::_M_manager;
   b689c:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b68a0:	f7fd fe46 	bl	b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b68a4:	a80e      	add	r0, sp, #56	; 0x38
   b68a6:	f7fd fe0b 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b68aa:	4b63      	ldr	r3, [pc, #396]	; (b6a38 <_GLOBAL__sub_I_SystemMode+0x288>)
   b68ac:	930e      	str	r3, [sp, #56]	; 0x38
Timer shutdownTimer(SHUTDOWN_HOLD, buttonTimer);    //Create timer for shutdown, which runs when the button is pressed to calculate if the button has been held for SHUTDOWN_HOLD seconds 
   b68ae:	aa0e      	add	r2, sp, #56	; 0x38
   b68b0:	4623      	mov	r3, r4
   b68b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
   b68b6:	4861      	ldr	r0, [pc, #388]	; (b6a3c <_GLOBAL__sub_I_SystemMode+0x28c>)
	    _M_manager = &_My_handler::_M_manager;
   b68b8:	e9cd 5710 	strd	r5, r7, [sp, #64]	; 0x40
   b68bc:	f7fd fe38 	bl	b4530 <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b68c0:	a80e      	add	r0, sp, #56	; 0x38
   b68c2:	f7fd fdfd 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
SFE_UBLOX_GNSS myGPS;                           //GPS Buffer and Objects
   b68c6:	485e      	ldr	r0, [pc, #376]	; (b6a40 <_GLOBAL__sub_I_SystemMode+0x290>)
  explicit SdFat(SPIClass* spiPort) {
   b68c8:	4d5e      	ldr	r5, [pc, #376]	; (b6a44 <_GLOBAL__sub_I_SystemMode+0x294>)
   b68ca:	f001 ff13 	bl	b86f4 <_ZN14SFE_UBLOX_GNSSC1Ev>
Adafruit_LIS3MDL lis3mdl;                       //Compass object
   b68ce:	485e      	ldr	r0, [pc, #376]	; (b6a48 <_GLOBAL__sub_I_SystemMode+0x298>)
   b68d0:	f001 fcfa 	bl	b82c8 <_ZN16Adafruit_LIS3MDLC1Ev>
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b68d4:	4622      	mov	r2, r4
   b68d6:	2114      	movs	r1, #20
   b68d8:	4630      	mov	r0, r6
   b68da:	f007 fc1f 	bl	be11c <led_pattern_period>
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b68de:	2214      	movs	r2, #20
        LEDStatus(pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b68e0:	4603      	mov	r3, r0
        LEDStatus(RGB_COLOR_WHITE, pattern, period, priority, source) { // Use white color by default
   b68e2:	9200      	str	r2, [sp, #0]
   b68e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b68e8:	4632      	mov	r2, r6
   b68ea:	4858      	ldr	r0, [pc, #352]	; (b6a4c <_GLOBAL__sub_I_SystemMode+0x29c>)
   b68ec:	9601      	str	r6, [sp, #4]
   b68ee:	f007 fd75 	bl	be3dc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
    operator SPIClass&() {
        return instance();
    }

    SPIClass* operator&() {
        return &instance();
   b68f2:	f7ff fee1 	bl	b66b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b68f6:	2364      	movs	r3, #100	; 0x64
   b68f8:	f8c5 3460 	str.w	r3, [r5, #1120]	; 0x460
  {
   b68fc:	4b54      	ldr	r3, [pc, #336]	; (b6a50 <_GLOBAL__sub_I_SystemMode+0x2a0>)
   b68fe:	606c      	str	r4, [r5, #4]
   b6900:	f8c5 443c 	str.w	r4, [r5, #1084]	; 0x43c
   b6904:	f8c5 4468 	str.w	r4, [r5, #1128]	; 0x468
   b6908:	f8c5 3470 	str.w	r3, [r5, #1136]	; 0x470
   b690c:	f885 6474 	strb.w	r6, [r5, #1140]	; 0x474
   b6910:	f8c5 4478 	str.w	r4, [r5, #1144]	; 0x478
   b6914:	f8a5 447c 	strh.w	r4, [r5, #1148]	; 0x47c
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b6918:	b908      	cbnz	r0, b691e <_GLOBAL__sub_I_SystemMode+0x16e>
   b691a:	f7ff fecd 	bl	b66b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    Print() : write_error(0) {}
   b691e:	4a4d      	ldr	r2, [pc, #308]	; (b6a54 <_GLOBAL__sub_I_SystemMode+0x2a4>)
  File() {}
   b6920:	494d      	ldr	r1, [pc, #308]	; (b6a58 <_GLOBAL__sub_I_SystemMode+0x2a8>)
   b6922:	f8c5 046c 	str.w	r0, [r5, #1132]	; 0x46c
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6926:	2300      	movs	r3, #0
   b6928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b692c:	e9c2 3001 	strd	r3, r0, [r2, #4]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6930:	6113      	str	r3, [r2, #16]
   b6932:	6011      	str	r1, [r2, #0]
   b6934:	4a49      	ldr	r2, [pc, #292]	; (b6a5c <_GLOBAL__sub_I_SystemMode+0x2ac>)
        capacity_(0) {
   b6936:	9307      	str	r3, [sp, #28]
   b6938:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b693c:	6113      	str	r3, [r2, #16]
   b693e:	6011      	str	r1, [r2, #0]
   b6940:	4a47      	ldr	r2, [pc, #284]	; (b6a60 <_GLOBAL__sub_I_SystemMode+0x2b0>)
        filter_(level, filters) {
   b6942:	4c48      	ldr	r4, [pc, #288]	; (b6a64 <_GLOBAL__sub_I_SystemMode+0x2b4>)
   b6944:	6113      	str	r3, [r2, #16]
   b6946:	e9c2 3001 	strd	r3, r0, [r2, #4]
   b694a:	6011      	str	r1, [r2, #0]
   b694c:	e9cd 3305 	strd	r3, r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   b6950:	f00a febc 	bl	c16cc <_Z16_fetch_usbserialv>
   b6954:	a905      	add	r1, sp, #20
   b6956:	4605      	mov	r5, r0
   b6958:	a808      	add	r0, sp, #32
   b695a:	f7ff fef7 	bl	b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b695e:	a908      	add	r1, sp, #32
   b6960:	a80b      	add	r0, sp, #44	; 0x2c
   b6962:	f7ff fef3 	bl	b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6966:	4b40      	ldr	r3, [pc, #256]	; (b6a68 <_GLOBAL__sub_I_SystemMode+0x2b8>)
   b6968:	6023      	str	r3, [r4, #0]
   b696a:	a90b      	add	r1, sp, #44	; 0x2c
   b696c:	a80e      	add	r0, sp, #56	; 0x38
   b696e:	f7ff feed 	bl	b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6972:	aa0e      	add	r2, sp, #56	; 0x38
   b6974:	211e      	movs	r1, #30
   b6976:	1d20      	adds	r0, r4, #4
   b6978:	f009 fe9a 	bl	c06b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b697c:	a80e      	add	r0, sp, #56	; 0x38
   b697e:	f7ff fe69 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6982:	a80b      	add	r0, sp, #44	; 0x2c
   b6984:	f7ff fe66 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6988:	4b38      	ldr	r3, [pc, #224]	; (b6a6c <_GLOBAL__sub_I_SystemMode+0x2bc>)
   b698a:	6023      	str	r3, [r4, #0]
   b698c:	6225      	str	r5, [r4, #32]
   b698e:	a808      	add	r0, sp, #32
   b6990:	f7ff fe60 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6994:	4b36      	ldr	r3, [pc, #216]	; (b6a70 <_GLOBAL__sub_I_SystemMode+0x2c0>)
   b6996:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b6998:	f00a fe98 	bl	c16cc <_Z16_fetch_usbserialv>
   b699c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b69a0:	f00a fe84 	bl	c16ac <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b69a4:	f009 fb66 	bl	c0074 <_ZN5spark10LogManager8instanceEv>
   b69a8:	4621      	mov	r1, r4
   b69aa:	f009 fd57 	bl	c045c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);    //Log Configuration
   b69ae:	a805      	add	r0, sp, #20
   b69b0:	f7ff fe50 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Servo ESCL;                                     //Object for servo esc of left motor 
   b69b4:	482f      	ldr	r0, [pc, #188]	; (b6a74 <_GLOBAL__sub_I_SystemMode+0x2c4>)
   b69b6:	f007 fe31 	bl	be61c <_ZN5ServoC1Ev>
Servo ESCR;                                     //Object for servo esc of right motor
   b69ba:	482f      	ldr	r0, [pc, #188]	; (b6a78 <_GLOBAL__sub_I_SystemMode+0x2c8>)
   b69bc:	b013      	add	sp, #76	; 0x4c
   b69be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
Servo ESCR;                                     //Object for servo esc of right motor
   b69c2:	f007 be2b 	b.w	be61c <_ZN5ServoC1Ev>
   b69c6:	bf00      	nop
   b69c8:	2003dd84 	.word	0x2003dd84
   b69cc:	ffff0000 	.word	0xffff0000
   b69d0:	2003db28 	.word	0x2003db28
   b69d4:	000b4243 	.word	0x000b4243
   b69d8:	2003dd70 	.word	0x2003dd70
   b69dc:	2003db3c 	.word	0x2003db3c
   b69e0:	000c6d23 	.word	0x000c6d23
   b69e4:	2003e5e4 	.word	0x2003e5e4
   b69e8:	000b4c95 	.word	0x000b4c95
   b69ec:	2003db38 	.word	0x2003db38
   b69f0:	000c6d26 	.word	0x000c6d26
   b69f4:	2003e0bc 	.word	0x2003e0bc
   b69f8:	2003db34 	.word	0x2003db34
   b69fc:	000c6d29 	.word	0x000c6d29
   b6a00:	2003e0a8 	.word	0x2003e0a8
   b6a04:	2003db30 	.word	0x2003db30
   b6a08:	000c6d2d 	.word	0x000c6d2d
   b6a0c:	2003dda0 	.word	0x2003dda0
   b6a10:	000b422f 	.word	0x000b422f
   b6a14:	2003dd88 	.word	0x2003dd88
   b6a18:	000b46a9 	.word	0x000b46a9
   b6a1c:	2003e5f0 	.word	0x2003e5f0
   b6a20:	000b45a9 	.word	0x000b45a9
   b6a24:	2003de00 	.word	0x2003de00
   b6a28:	000b43d9 	.word	0x000b43d9
   b6a2c:	2003dee0 	.word	0x2003dee0
   b6a30:	000b40f9 	.word	0x000b40f9
   b6a34:	2003e5ac 	.word	0x2003e5ac
   b6a38:	000b42e1 	.word	0x000b42e1
   b6a3c:	2003e564 	.word	0x2003e564
   b6a40:	2003df30 	.word	0x2003df30
   b6a44:	2003e0c4 	.word	0x2003e0c4
   b6a48:	2003de20 	.word	0x2003de20
   b6a4c:	2003e588 	.word	0x2003e588
   b6a50:	000c6d3c 	.word	0x000c6d3c
   b6a54:	2003defc 	.word	0x2003defc
   b6a58:	000c6da8 	.word	0x000c6da8
   b6a5c:	2003de7c 	.word	0x2003de7c
   b6a60:	2003de48 	.word	0x2003de48
   b6a64:	2003deb0 	.word	0x2003deb0
   b6a68:	000c6d64 	.word	0x000c6d64
   b6a6c:	000c7ecc 	.word	0x000c7ecc
   b6a70:	000c6d90 	.word	0x000c6d90
   b6a74:	2003dd48 	.word	0x2003dd48
   b6a78:	2003dd58 	.word	0x2003dd58

000b6a7c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6a7c:	2904      	cmp	r1, #4
   b6a7e:	d804      	bhi.n	b6a8a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6a80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6a84:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6a88:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6a8a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6a8c:	bf9b      	ittet	ls
   b6a8e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b6a92:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6a96:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6a98:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6a9a:	bf84      	itt	hi
   b6a9c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6aa0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6aa2:	4770      	bx	lr

000b6aa4 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6aa4:	b510      	push	{r4, lr}
   b6aa6:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6aa8:	3024      	adds	r0, #36	; 0x24
   b6aaa:	f000 ff69 	bl	b7980 <_ZN8FatCache4syncEv>
   b6aae:	b128      	cbz	r0, b6abc <_ZN9FatVolume9cacheSyncEv+0x18>
   b6ab0:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6ab8:	f000 bf62 	b.w	b7980 <_ZN8FatCache4syncEv>
  }
   b6abc:	bd10      	pop	{r4, pc}

000b6abe <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b6abe:	1e41      	subs	r1, r0, #1
   b6ac0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6ac4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6ac6:	0842      	lsrs	r2, r0, #1
   b6ac8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b6acc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6ad0:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6ad4:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6ad6:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6ad8:	d1f5      	bne.n	b6ac6 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6ada:	4770      	bx	lr

000b6adc <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b6adc:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b6ade:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6ae0:	4604      	mov	r4, r0
   b6ae2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6ae4:	b923      	cbnz	r3, b6af0 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b6aea:	6889      	ldr	r1, [r1, #8]
   b6aec:	f000 bc16 	b.w	b731c <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6af0:	2224      	movs	r2, #36	; 0x24
   b6af2:	2100      	movs	r1, #0
   b6af4:	f00d fd40 	bl	c4578 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6af8:	2310      	movs	r3, #16
  m_flags = F_READ;
   b6afa:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b6afc:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6afe:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6b00:	68ab      	ldr	r3, [r5, #8]
   b6b02:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6b04:	68eb      	ldr	r3, [r5, #12]
   b6b06:	6223      	str	r3, [r4, #32]
}
   b6b08:	bd38      	pop	{r3, r4, r5, pc}

000b6b0a <_ZN7FatFile7getNameEPcj>:
bool FatFile::getName(char* name, size_t size) {
   b6b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b0e:	b08d      	sub	sp, #52	; 0x34
  if (!isOpen() || size < 13) {
   b6b10:	7803      	ldrb	r3, [r0, #0]
   b6b12:	f04f 0900 	mov.w	r9, #0
bool FatFile::getName(char* name, size_t size) {
   b6b16:	4606      	mov	r6, r0
   b6b18:	460f      	mov	r7, r1
   b6b1a:	4690      	mov	r8, r2
   b6b1c:	f8cd 900c 	str.w	r9, [sp, #12]
  if (!isOpen() || size < 13) {
   b6b20:	2b00      	cmp	r3, #0
   b6b22:	d05d      	beq.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
   b6b24:	2a0c      	cmp	r2, #12
   b6b26:	d95b      	bls.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
  if (!isLFN()) {
   b6b28:	78c3      	ldrb	r3, [r0, #3]
   b6b2a:	b933      	cbnz	r3, b6b3a <_ZN7FatFile7getNameEPcj+0x30>
    return getSFN(name);
   b6b2c:	f000 fb46 	bl	b71bc <_ZN7FatFile6getSFNEPc>
   b6b30:	4604      	mov	r4, r0
}
   b6b32:	4620      	mov	r0, r4
   b6b34:	b00d      	add	sp, #52	; 0x34
   b6b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile.openCluster(this)) {
   b6b3a:	4601      	mov	r1, r0
   b6b3c:	a803      	add	r0, sp, #12
   b6b3e:	f7ff ffcd 	bl	b6adc <_ZN7FatFile11openClusterEPS_>
   b6b42:	2800      	cmp	r0, #0
   b6b44:	d04c      	beq.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
  name[n - 1] = 0;
   b6b46:	eb07 0308 	add.w	r3, r7, r8
   b6b4a:	f04f 0b01 	mov.w	fp, #1
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6b4e:	f04f 0a0d 	mov.w	sl, #13
  name[n - 1] = 0;
   b6b52:	9300      	str	r3, [sp, #0]
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
   b6b54:	78f3      	ldrb	r3, [r6, #3]
   b6b56:	fa5f f58b 	uxtb.w	r5, fp
   b6b5a:	42ab      	cmp	r3, r5
   b6b5c:	d340      	bcc.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6b5e:	88b1      	ldrh	r1, [r6, #4]
   b6b60:	eba1 010b 	sub.w	r1, r1, fp
   b6b64:	0149      	lsls	r1, r1, #5
   b6b66:	a803      	add	r0, sp, #12
   b6b68:	f000 fcbe 	bl	b74e8 <_ZN7FatFile7seekSetEm>
   b6b6c:	4604      	mov	r4, r0
   b6b6e:	2800      	cmp	r0, #0
   b6b70:	d036      	beq.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6b72:	2100      	movs	r1, #0
   b6b74:	a803      	add	r0, sp, #12
   b6b76:	f000 fc98 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6b7a:	4603      	mov	r3, r0
   b6b7c:	b380      	cbz	r0, b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ldir->attr != DIR_ATT_LONG_NAME) {
   b6b7e:	7ac2      	ldrb	r2, [r0, #11]
   b6b80:	2a0f      	cmp	r2, #15
   b6b82:	d12d      	bne.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
    if (ord != (ldir->ord & 0X1F)) {
   b6b84:	7802      	ldrb	r2, [r0, #0]
   b6b86:	f002 021f 	and.w	r2, r2, #31
   b6b8a:	42aa      	cmp	r2, r5
   b6b8c:	d128      	bne.n	b6be0 <_ZN7FatFile7getNameEPcj+0xd6>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6b8e:	f10b 35ff 	add.w	r5, fp, #4294967295
   b6b92:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < 13; i++) {
   b6b96:	197a      	adds	r2, r7, r5
   b6b98:	2100      	movs	r1, #0
    uint16_t c = lfnGetChar(ldir, i);
   b6b9a:	4618      	mov	r0, r3
   b6b9c:	9101      	str	r1, [sp, #4]
   b6b9e:	f7ff ff6d 	bl	b6a7c <_ZL10lfnGetCharP18longDirectoryEntryh>
    if (c == 0 || k >= n) {
   b6ba2:	b168      	cbz	r0, b6bc0 <_ZN7FatFile7getNameEPcj+0xb6>
   b6ba4:	45a8      	cmp	r8, r5
   b6ba6:	d912      	bls.n	b6bce <_ZN7FatFile7getNameEPcj+0xc4>
  for (i = 0; i < 13; i++) {
   b6ba8:	9901      	ldr	r1, [sp, #4]
   b6baa:	3101      	adds	r1, #1
   b6bac:	287f      	cmp	r0, #127	; 0x7f
   b6bae:	b2c9      	uxtb	r1, r1
   b6bb0:	bf28      	it	cs
   b6bb2:	203f      	movcs	r0, #63	; 0x3f
   b6bb4:	290d      	cmp	r1, #13
    name[k++] = c >= 0X7F ? '?' : c;
   b6bb6:	f802 0b01 	strb.w	r0, [r2], #1
   b6bba:	f105 0501 	add.w	r5, r5, #1
  for (i = 0; i < 13; i++) {
   b6bbe:	d1ec      	bne.n	b6b9a <_ZN7FatFile7getNameEPcj+0x90>
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
   b6bc0:	45a8      	cmp	r8, r5
   b6bc2:	d904      	bls.n	b6bce <_ZN7FatFile7getNameEPcj+0xc4>
   b6bc4:	781a      	ldrb	r2, [r3, #0]
   b6bc6:	0652      	lsls	r2, r2, #25
    name[k] = 0;
   b6bc8:	bf48      	it	mi
   b6bca:	f807 9005 	strbmi.w	r9, [r7, r5]
  name[n - 1] = 0;
   b6bce:	9a00      	ldr	r2, [sp, #0]
   b6bd0:	f802 9c01 	strb.w	r9, [r2, #-1]
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b6bd4:	781b      	ldrb	r3, [r3, #0]
   b6bd6:	065b      	lsls	r3, r3, #25
   b6bd8:	f10b 0b01 	add.w	fp, fp, #1
   b6bdc:	d5ba      	bpl.n	b6b54 <_ZN7FatFile7getNameEPcj+0x4a>
   b6bde:	e7a8      	b.n	b6b32 <_ZN7FatFile7getNameEPcj+0x28>
  name[0] = 0;
   b6be0:	2400      	movs	r4, #0
   b6be2:	703c      	strb	r4, [r7, #0]
  return false;
   b6be4:	e7a5      	b.n	b6b32 <_ZN7FatFile7getNameEPcj+0x28>
	...

000b6be8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b6be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6bec:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6bee:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6bf2:	2b20      	cmp	r3, #32
   b6bf4:	d0fa      	beq.n	b6bec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6bf6:	4d6a      	ldr	r5, [pc, #424]	; (b6da0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b6bf8:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b6bfa:	2400      	movs	r4, #0
    c = path[len];
   b6bfc:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6bfe:	b1c3      	cbz	r3, b6c32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6c00:	2b2f      	cmp	r3, #47	; 0x2f
   b6c02:	d016      	beq.n	b6c32 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6c04:	2b5c      	cmp	r3, #92	; 0x5c
   b6c06:	d102      	bne.n	b6c0e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b6c08:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b6c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6c0e:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6c12:	b2c0      	uxtb	r0, r0
   b6c14:	281d      	cmp	r0, #29
   b6c16:	d803      	bhi.n	b6c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b6c18:	fa25 f000 	lsr.w	r0, r5, r0
   b6c1c:	07c0      	lsls	r0, r0, #31
   b6c1e:	d4f3      	bmi.n	b6c08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6c20:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6c24:	283c      	cmp	r0, #60	; 0x3c
   b6c26:	d0ef      	beq.n	b6c08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b6c28:	3b20      	subs	r3, #32
   b6c2a:	2b5e      	cmp	r3, #94	; 0x5e
   b6c2c:	d8ec      	bhi.n	b6c08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6c2e:	3401      	adds	r4, #1
    c = path[len];
   b6c30:	e7e4      	b.n	b6bfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6c32:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6c34:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b6c36:	4607      	mov	r7, r0
   b6c38:	f810 5b01 	ldrb.w	r5, [r0], #1
   b6c3c:	2d20      	cmp	r5, #32
   b6c3e:	d0fa      	beq.n	b6c36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b6c40:	2d2f      	cmp	r5, #47	; 0x2f
   b6c42:	d0f8      	beq.n	b6c36 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b6c44:	6017      	str	r7, [r2, #0]
  while (len) {
   b6c46:	b14c      	cbz	r4, b6c5c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b6c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6c4c:	2a2e      	cmp	r2, #46	; 0x2e
   b6c4e:	d001      	beq.n	b6c54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6c50:	2a20      	cmp	r2, #32
   b6c52:	d101      	bne.n	b6c58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6c54:	3c01      	subs	r4, #1
  while (len) {
   b6c56:	e7f6      	b.n	b6c46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b6c58:	2cff      	cmp	r4, #255	; 0xff
   b6c5a:	dcd5      	bgt.n	b6c08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6c5c:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6c60:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6c64:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b6c66:	f8c1 300d 	str.w	r3, [r1, #13]
   b6c6a:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6c6c:	f04f 0800 	mov.w	r8, #0
   b6c70:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6c74:	2b2e      	cmp	r3, #46	; 0x2e
   b6c76:	d001      	beq.n	b6c7c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b6c78:	2b20      	cmp	r3, #32
   b6c7a:	d102      	bne.n	b6c82 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6c7c:	f108 0801 	add.w	r8, r8, #1
   b6c80:	e7f6      	b.n	b6c70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6c82:	fab8 f088 	clz	r0, r8
   b6c86:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6c88:	1e65      	subs	r5, r4, #1
   b6c8a:	1c6b      	adds	r3, r5, #1
   b6c8c:	d002      	beq.n	b6c94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6c8e:	5d73      	ldrb	r3, [r6, r5]
   b6c90:	2b2e      	cmp	r3, #46	; 0x2e
   b6c92:	d114      	bne.n	b6cbe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6c94:	f04f 0900 	mov.w	r9, #0
   b6c98:	2707      	movs	r7, #7
   b6c9a:	464a      	mov	r2, r9
   b6c9c:	46ca      	mov	sl, r9
   b6c9e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6ca2:	45a0      	cmp	r8, r4
   b6ca4:	da68      	bge.n	b6d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b6ca6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b6caa:	2b20      	cmp	r3, #32
   b6cac:	d003      	beq.n	b6cb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6cae:	2b2e      	cmp	r3, #46	; 0x2e
   b6cb0:	d107      	bne.n	b6cc2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6cb2:	45a8      	cmp	r8, r5
   b6cb4:	d012      	beq.n	b6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b6cb6:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b6cb8:	f108 0801 	add.w	r8, r8, #1
   b6cbc:	e7f1      	b.n	b6ca2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6cbe:	3d01      	subs	r5, #1
   b6cc0:	e7e3      	b.n	b6c8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6cc2:	2b22      	cmp	r3, #34	; 0x22
   b6cc4:	d008      	beq.n	b6cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b6cc6:	2b7c      	cmp	r3, #124	; 0x7c
   b6cc8:	d006      	beq.n	b6cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b6cca:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6cce:	f1bc 0f05 	cmp.w	ip, #5
   b6cd2:	d80a      	bhi.n	b6cea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6cd4:	2b2d      	cmp	r3, #45	; 0x2d
   b6cd6:	d012      	beq.n	b6cfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b6cd8:	45a8      	cmp	r8, r5
   b6cda:	d15b      	bne.n	b6d94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6cdc:	2f0a      	cmp	r7, #10
   b6cde:	d04a      	beq.n	b6d76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6ce0:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6ce2:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6ce4:	f04f 0e10 	mov.w	lr, #16
   b6ce8:	e7e6      	b.n	b6cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b6cea:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6cee:	f1bc 0f05 	cmp.w	ip, #5
   b6cf2:	d9f1      	bls.n	b6cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6cf4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b6cf8:	f1bc 0f02 	cmp.w	ip, #2
   b6cfc:	d9ec      	bls.n	b6cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6cfe:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6d02:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b6d06:	d8e7      	bhi.n	b6cd8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b6d08:	45a8      	cmp	r8, r5
   b6d0a:	d0e7      	beq.n	b6cdc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6d0c:	42ba      	cmp	r2, r7
   b6d0e:	d830      	bhi.n	b6d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6d10:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6d14:	f1bc 0f19 	cmp.w	ip, #25
   b6d18:	d81a      	bhi.n	b6d50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b6d1a:	3b20      	subs	r3, #32
        lc |= bit;
   b6d1c:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6d20:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6d22:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b6d26:	f102 0c01 	add.w	ip, r2, #1
   b6d2a:	fa5f fc8c 	uxtb.w	ip, ip
   b6d2e:	440a      	add	r2, r1
      if (i < 7) {
   b6d30:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6d34:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b6d36:	d801      	bhi.n	b6d3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b6d38:	f881 c00c 	strb.w	ip, [r1, #12]
   b6d3c:	4662      	mov	r2, ip
   b6d3e:	e7bb      	b.n	b6cb8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b6d40:	45a8      	cmp	r8, r5
   b6d42:	dc18      	bgt.n	b6d76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b6d44:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b6d46:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6d48:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6d4a:	f04f 0e10 	mov.w	lr, #16
   b6d4e:	e7b2      	b.n	b6cb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6d50:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6d54:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6d58:	bf98      	it	ls
   b6d5a:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6d5e:	e7e2      	b.n	b6d26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6d60:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6d62:	2001      	movs	r0, #1
   b6d64:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6d66:	4419      	add	r1, r3
   b6d68:	237e      	movs	r3, #126	; 0x7e
   b6d6a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6d6c:	2331      	movs	r3, #49	; 0x31
   b6d6e:	738b      	strb	r3, [r1, #14]
   b6d70:	e74b      	b.n	b6c0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6d72:	2f0a      	cmp	r7, #10
   b6d74:	d1e4      	bne.n	b6d40 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6d76:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6d78:	7b4b      	ldrb	r3, [r1, #13]
   b6d7a:	2b20      	cmp	r3, #32
   b6d7c:	f43f af44 	beq.w	b6c08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6d80:	2800      	cmp	r0, #0
   b6d82:	d0ed      	beq.n	b6d60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6d84:	ea1a 0f09 	tst.w	sl, r9
   b6d88:	bf18      	it	ne
   b6d8a:	f04f 0902 	movne.w	r9, #2
   b6d8e:	f881 9000 	strb.w	r9, [r1]
   b6d92:	e73a      	b.n	b6c0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6d94:	42ba      	cmp	r2, r7
   b6d96:	d8ec      	bhi.n	b6d72 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6d98:	2000      	movs	r0, #0
      c = '_';
   b6d9a:	235f      	movs	r3, #95	; 0x5f
   b6d9c:	e7c3      	b.n	b6d26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6d9e:	bf00      	nop
   b6da0:	31000101 	.word	0x31000101

000b6da4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6da8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6dac:	4606      	mov	r6, r0
   b6dae:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6db0:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6db2:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6db4:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6db8:	6861      	ldr	r1, [r4, #4]
   b6dba:	68a2      	ldr	r2, [r4, #8]
   b6dbc:	186b      	adds	r3, r5, r1
   b6dbe:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6dc0:	4411      	add	r1, r2
   b6dc2:	4291      	cmp	r1, r2
   b6dc4:	d006      	beq.n	b6dd4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6dc6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6dca:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6dce:	4043      	eors	r3, r0
   b6dd0:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6dd2:	e7f6      	b.n	b6dc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6dd4:	f1b9 0f03 	cmp.w	r9, #3
   b6dd8:	bf28      	it	cs
   b6dda:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6dde:	f109 0204 	add.w	r2, r9, #4
   b6de2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6de4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6de8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6dea:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6dec:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6dee:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6df0:	bf94      	ite	ls
   b6df2:	3130      	addls	r1, #48	; 0x30
   b6df4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6df6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6df8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6dfa:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6dfe:	d1f1      	bne.n	b6de4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6e00:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6e04:	2100      	movs	r1, #0
   b6e06:	735f      	strb	r7, [r3, #13]
   b6e08:	4630      	mov	r0, r6
   b6e0a:	f000 fb6d 	bl	b74e8 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6e0e:	2101      	movs	r1, #1
   b6e10:	4630      	mov	r0, r6
   b6e12:	f000 fb4a 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6e16:	4601      	mov	r1, r0
   b6e18:	b928      	cbnz	r0, b6e26 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6e1a:	7870      	ldrb	r0, [r6, #1]
   b6e1c:	fab0 f080 	clz	r0, r0
   b6e20:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6e26:	7803      	ldrb	r3, [r0, #0]
   b6e28:	b16b      	cbz	r3, b6e46 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6e2a:	7ac3      	ldrb	r3, [r0, #11]
   b6e2c:	071b      	lsls	r3, r3, #28
   b6e2e:	d4ee      	bmi.n	b6e0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6e30:	220b      	movs	r2, #11
   b6e32:	4640      	mov	r0, r8
   b6e34:	f00d fb68 	bl	c4508 <memcmp>
   b6e38:	2800      	cmp	r0, #0
   b6e3a:	d1e8      	bne.n	b6e0e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6e3c:	3501      	adds	r5, #1
   b6e3e:	b2ad      	uxth	r5, r5
   b6e40:	2d64      	cmp	r5, #100	; 0x64
   b6e42:	d1b9      	bne.n	b6db8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6e44:	e7ed      	b.n	b6e22 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6e46:	2001      	movs	r0, #1
   b6e48:	e7eb      	b.n	b6e22 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6e4c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e50:	ed2d 8b02 	vpush	{d8}
   b6e54:	b08b      	sub	sp, #44	; 0x2c
   b6e56:	460d      	mov	r5, r1
   b6e58:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6e5a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6e5c:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6e5e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6e62:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6e64:	d105      	bne.n	b6e72 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6e66:	2000      	movs	r0, #0
}
   b6e68:	b00b      	add	sp, #44	; 0x2c
   b6e6a:	ecbd 8b02 	vpop	{d8}
   b6e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6e72:	9b07      	ldr	r3, [sp, #28]
   b6e74:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6e76:	2b00      	cmp	r3, #0
   b6e78:	d1f5      	bne.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6e7a:	6853      	ldr	r3, [r2, #4]
   b6e7c:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6e7e:	7813      	ldrb	r3, [r2, #0]
   b6e80:	079c      	lsls	r4, r3, #30
   b6e82:	bf1f      	itttt	ne
   b6e84:	9b05      	ldrne	r3, [sp, #20]
   b6e86:	330c      	addne	r3, #12
   b6e88:	220d      	movne	r2, #13
   b6e8a:	fbb3 f3f2 	udivne	r3, r3, r2
   b6e8e:	bf1a      	itte	ne
   b6e90:	3301      	addne	r3, #1
   b6e92:	b2db      	uxtbne	r3, r3
   b6e94:	2301      	moveq	r3, #1
    seekSet(0);
   b6e96:	2100      	movs	r1, #0
   b6e98:	4628      	mov	r0, r5
   b6e9a:	9303      	str	r3, [sp, #12]
   b6e9c:	f000 fb24 	bl	b74e8 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6ea0:	f107 030d 	add.w	r3, r7, #13
  }
   b6ea4:	f04f 0b00 	mov.w	fp, #0
   b6ea8:	ee08 3a10 	vmov	s16, r3
   b6eac:	46da      	mov	sl, fp
   b6eae:	465c      	mov	r4, fp
   b6eb0:	465e      	mov	r6, fp
   b6eb2:	f8cd b010 	str.w	fp, [sp, #16]
   b6eb6:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6eb8:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6eba:	2101      	movs	r1, #1
   b6ebc:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6ebe:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6ec2:	f000 faf2 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6ec6:	4603      	mov	r3, r0
   b6ec8:	2800      	cmp	r0, #0
   b6eca:	d171      	bne.n	b6fb0 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6ecc:	786b      	ldrb	r3, [r5, #1]
   b6ece:	2b00      	cmp	r3, #0
   b6ed0:	d1c9      	bne.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6ed2:	9b06      	ldr	r3, [sp, #24]
   b6ed4:	059a      	lsls	r2, r3, #22
   b6ed6:	d5c6      	bpl.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6ed8:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6edc:	3b01      	subs	r3, #1
   b6ede:	2b01      	cmp	r3, #1
   b6ee0:	d8c1      	bhi.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6ee2:	9b04      	ldr	r3, [sp, #16]
   b6ee4:	2c00      	cmp	r4, #0
   b6ee6:	bf08      	it	eq
   b6ee8:	4643      	moveq	r3, r8
   b6eea:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6eec:	9b03      	ldr	r3, [sp, #12]
   b6eee:	429c      	cmp	r4, r3
   b6ef0:	f0c0 80f1 	bcc.w	b70d6 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6ef4:	f1b9 0f00 	cmp.w	r9, #0
   b6ef8:	f040 810a 	bne.w	b7110 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6efc:	9b04      	ldr	r3, [sp, #16]
   b6efe:	4628      	mov	r0, r5
   b6f00:	0159      	lsls	r1, r3, #5
   b6f02:	f000 faf1 	bl	b74e8 <_ZN7FatFile7seekSetEm>
   b6f06:	2800      	cmp	r0, #0
   b6f08:	d0ad      	beq.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6f0a:	9b03      	ldr	r3, [sp, #12]
   b6f0c:	f103 39ff 	add.w	r9, r3, #4294967295
   b6f10:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6f14:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6f16:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6f1a:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6f1e:	2e00      	cmp	r6, #0
   b6f20:	f000 810d 	beq.w	b713e <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6f24:	2100      	movs	r1, #0
   b6f26:	4628      	mov	r0, r5
   b6f28:	f000 fabf 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6f2c:	4604      	mov	r4, r0
   b6f2e:	2800      	cmp	r0, #0
   b6f30:	d099      	beq.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6f32:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6f34:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6f38:	454e      	cmp	r6, r9
   b6f3a:	f043 0301 	orr.w	r3, r3, #1
   b6f3e:	bf0c      	ite	eq
   b6f40:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6f44:	46b3      	movne	fp, r6
   b6f46:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6f4a:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6f4e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6f52:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6f56:	f107 000d 	add.w	r0, r7, #13
   b6f5a:	f7ff fdb0 	bl	b6abe <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6f5e:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6f62:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6f64:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6f68:	f00b 031f 	and.w	r3, fp, #31
   b6f6c:	220d      	movs	r2, #13
   b6f6e:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6f70:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6f74:	4353      	muls	r3, r2
   b6f76:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6f78:	9905      	ldr	r1, [sp, #20]
   b6f7a:	4299      	cmp	r1, r3
   b6f7c:	f240 80d0 	bls.w	b7120 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6f80:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6f84:	2a04      	cmp	r2, #4
   b6f86:	fa5f fe82 	uxtb.w	lr, r2
   b6f8a:	f102 0001 	add.w	r0, r2, #1
   b6f8e:	f200 80cd 	bhi.w	b712c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6f92:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6f96:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6f9a:	280d      	cmp	r0, #13
   b6f9c:	f103 0301 	add.w	r3, r3, #1
   b6fa0:	4602      	mov	r2, r0
   b6fa2:	d1e9      	bne.n	b6f78 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6fa4:	3e01      	subs	r6, #1
   b6fa6:	b2f6      	uxtb	r6, r6
   b6fa8:	e7b9      	b.n	b6f1e <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6faa:	f04f 0901 	mov.w	r9, #1
   b6fae:	e783      	b.n	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6fb0:	7802      	ldrb	r2, [r0, #0]
   b6fb2:	2ae5      	cmp	r2, #229	; 0xe5
   b6fb4:	d000      	beq.n	b6fb8 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6fb6:	b97a      	cbnz	r2, b6fd8 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6fb8:	9904      	ldr	r1, [sp, #16]
   b6fba:	2c00      	cmp	r4, #0
   b6fbc:	bf08      	it	eq
   b6fbe:	4641      	moveq	r1, r8
   b6fc0:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6fc2:	9903      	ldr	r1, [sp, #12]
   b6fc4:	428c      	cmp	r4, r1
        freeFound++;
   b6fc6:	bf3c      	itt	cc
   b6fc8:	3401      	addcc	r4, #1
   b6fca:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6fcc:	2a00      	cmp	r2, #0
   b6fce:	d080      	beq.n	b6ed2 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6fd0:	2ae5      	cmp	r2, #229	; 0xe5
   b6fd2:	d105      	bne.n	b6fe0 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6fd4:	2600      	movs	r6, #0
   b6fd6:	e76f      	b.n	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6fd8:	9903      	ldr	r1, [sp, #12]
   b6fda:	428c      	cmp	r4, r1
   b6fdc:	bf38      	it	cc
   b6fde:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6fe0:	2a2e      	cmp	r2, #46	; 0x2e
   b6fe2:	d0f7      	beq.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6fe4:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6fe6:	290f      	cmp	r1, #15
   b6fe8:	d14a      	bne.n	b7080 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6fea:	bb16      	cbnz	r6, b7032 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6fec:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6ff0:	f43f af62 	beq.w	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6ff4:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6ff8:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6ffc:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6ffe:	220d      	movs	r2, #13
   b7000:	f10a 38ff 	add.w	r8, sl, #4294967295
   b7004:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b7008:	9a05      	ldr	r2, [sp, #20]
   b700a:	4542      	cmp	r2, r8
   b700c:	d9e2      	bls.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b700e:	eba2 0208 	sub.w	r2, r2, r8
   b7012:	9208      	str	r2, [sp, #32]
   b7014:	2200      	movs	r2, #0
   b7016:	eb02 0108 	add.w	r1, r2, r8
   b701a:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b701c:	4618      	mov	r0, r3
   b701e:	b2d1      	uxtb	r1, r2
   b7020:	f7ff fd2c 	bl	b6a7c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b7024:	9908      	ldr	r1, [sp, #32]
   b7026:	428a      	cmp	r2, r1
   b7028:	d10d      	bne.n	b7046 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b702a:	2800      	cmp	r0, #0
   b702c:	bf18      	it	ne
   b702e:	2600      	movne	r6, #0
   b7030:	e742      	b.n	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b7032:	f10a 3aff 	add.w	sl, sl, #4294967295
   b7036:	fa5f fa8a 	uxtb.w	sl, sl
   b703a:	4552      	cmp	r2, sl
   b703c:	d1ca      	bne.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b703e:	7b5a      	ldrb	r2, [r3, #13]
   b7040:	455a      	cmp	r2, fp
   b7042:	d0dc      	beq.n	b6ffe <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b7044:	e7c6      	b.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7046:	28ff      	cmp	r0, #255	; 0xff
   b7048:	d8c4      	bhi.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b704a:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b704e:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b7052:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7054:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7056:	bf9c      	itt	ls
   b7058:	f10e 0020 	addls.w	r0, lr, #32
   b705c:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7060:	4608      	mov	r0, r1
   b7062:	9909      	ldr	r1, [sp, #36]	; 0x24
   b7064:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b7066:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b706a:	f1bc 0f19 	cmp.w	ip, #25
   b706e:	bf9c      	itt	ls
   b7070:	3120      	addls	r1, #32
   b7072:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b7074:	4571      	cmp	r1, lr
   b7076:	d1ad      	bne.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b7078:	3201      	adds	r2, #1
   b707a:	2a0d      	cmp	r2, #13
   b707c:	d1cb      	bne.n	b7016 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b707e:	e71b      	b.n	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7080:	0708      	lsls	r0, r1, #28
   b7082:	d4a7      	bmi.n	b6fd4 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b7084:	b15e      	cbz	r6, b709e <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b7086:	f1ba 0f01 	cmp.w	sl, #1
   b708a:	f47f aeec 	bne.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b708e:	4618      	mov	r0, r3
   b7090:	f7ff fd15 	bl	b6abe <_ZN7FatFile11lfnChecksumEPh>
   b7094:	4558      	cmp	r0, fp
   b7096:	f47f aee6 	bne.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b709a:	46b1      	mov	r9, r6
   b709c:	e00e      	b.n	b70bc <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b709e:	ee18 1a10 	vmov	r1, s16
   b70a2:	220b      	movs	r2, #11
   b70a4:	4618      	mov	r0, r3
   b70a6:	f00d fa2f 	bl	c4508 <memcmp>
   b70aa:	2800      	cmp	r0, #0
   b70ac:	f47f af04 	bne.w	b6eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b70b0:	f897 9000 	ldrb.w	r9, [r7]
   b70b4:	f019 0901 	ands.w	r9, r9, #1
   b70b8:	f47f af77 	bne.w	b6faa <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b70bc:	9b06      	ldr	r3, [sp, #24]
   b70be:	0519      	lsls	r1, r3, #20
   b70c0:	f53f aed1 	bmi.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b70c4:	9b06      	ldr	r3, [sp, #24]
   b70c6:	9807      	ldr	r0, [sp, #28]
   b70c8:	f8cd 9000 	str.w	r9, [sp]
   b70cc:	4642      	mov	r2, r8
   b70ce:	4629      	mov	r1, r5
   b70d0:	f000 fa4d 	bl	b756e <_ZN7FatFile15openCachedEntryEPS_tih>
   b70d4:	e6c8      	b.n	b6e68 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b70d6:	2100      	movs	r1, #0
   b70d8:	4628      	mov	r0, r5
   b70da:	f000 f9e6 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b70de:	b9a0      	cbnz	r0, b710a <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b70e0:	786b      	ldrb	r3, [r5, #1]
   b70e2:	2b00      	cmp	r3, #0
   b70e4:	f47f aebf 	bne.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b70e8:	4628      	mov	r0, r5
   b70ea:	f000 f89f 	bl	b722c <_ZN7FatFile13addDirClusterEv>
   b70ee:	2800      	cmp	r0, #0
   b70f0:	f43f aeb9 	beq.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b70f4:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b70f6:	791b      	ldrb	r3, [r3, #4]
   b70f8:	2b01      	cmp	r3, #1
   b70fa:	f63f aefb 	bhi.w	b6ef4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b70fe:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b7100:	3410      	adds	r4, #16
   b7102:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b7104:	42a3      	cmp	r3, r4
   b7106:	d8ef      	bhi.n	b70e8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b7108:	e6f4      	b.n	b6ef4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b710a:	3401      	adds	r4, #1
   b710c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b710e:	e6ed      	b.n	b6eec <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b7110:	4639      	mov	r1, r7
   b7112:	4628      	mov	r0, r5
   b7114:	f7ff fe46 	bl	b6da4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b7118:	2800      	cmp	r0, #0
   b711a:	f47f aeef 	bne.w	b6efc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b711e:	e6a2      	b.n	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b7120:	bf14      	ite	ne
   b7122:	f04f 31ff 	movne.w	r1, #4294967295
   b7126:	2100      	moveq	r1, #0
   b7128:	b289      	uxth	r1, r1
   b712a:	e72b      	b.n	b6f84 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b712c:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b7130:	bf94      	ite	ls
   b7132:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b7136:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b713a:	8091      	strh	r1, [r2, #4]
   b713c:	e72d      	b.n	b6f9a <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b713e:	4631      	mov	r1, r6
   b7140:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b7142:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b7146:	f000 f9b0 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b714a:	4604      	mov	r4, r0
   b714c:	2800      	cmp	r0, #0
   b714e:	f43f ae8a 	beq.w	b6e66 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b7152:	2220      	movs	r2, #32
   b7154:	4631      	mov	r1, r6
   b7156:	f00d fa0f 	bl	c4578 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b715a:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b715e:	6023      	str	r3, [r4, #0]
   b7160:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b7164:	6063      	str	r3, [r4, #4]
   b7166:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b716a:	8123      	strh	r3, [r4, #8]
   b716c:	7dfb      	ldrb	r3, [r7, #23]
   b716e:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b7170:	783b      	ldrb	r3, [r7, #0]
   b7172:	f003 0318 	and.w	r3, r3, #24
   b7176:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b7178:	4b0f      	ldr	r3, [pc, #60]	; (b71b8 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b717a:	681b      	ldr	r3, [r3, #0]
   b717c:	b19b      	cbz	r3, b71a6 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b717e:	f104 010e 	add.w	r1, r4, #14
   b7182:	f104 0010 	add.w	r0, r4, #16
   b7186:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b7188:	8a23      	ldrh	r3, [r4, #16]
   b718a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b718c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b718e:	89e3      	ldrh	r3, [r4, #14]
   b7190:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b7192:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b7194:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b7198:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b719c:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b71a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b71a4:	e78e      	b.n	b70c4 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b71a6:	2321      	movs	r3, #33	; 0x21
   b71a8:	7423      	strb	r3, [r4, #16]
   b71aa:	2328      	movs	r3, #40	; 0x28
   b71ac:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b71ae:	2308      	movs	r3, #8
   b71b0:	73a6      	strb	r6, [r4, #14]
   b71b2:	73e3      	strb	r3, [r4, #15]
   b71b4:	e7e8      	b.n	b7188 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b71b6:	bf00      	nop
   b71b8:	2003e60c 	.word	0x2003e60c

000b71bc <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
   b71bc:	b510      	push	{r4, lr}
   b71be:	460c      	mov	r4, r1
    return m_attr;
   b71c0:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
   b71c2:	b909      	cbnz	r1, b71c8 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
   b71c4:	2000      	movs	r0, #0
}
   b71c6:	bd10      	pop	{r4, pc}
  if (isRoot()) {
   b71c8:	f011 0160 	ands.w	r1, r1, #96	; 0x60
   b71cc:	d005      	beq.n	b71da <_ZN7FatFile6getSFNEPc+0x1e>
    name[0] = '/';
   b71ce:	232f      	movs	r3, #47	; 0x2f
   b71d0:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
   b71d2:	2300      	movs	r3, #0
   b71d4:	7063      	strb	r3, [r4, #1]
  return true;
   b71d6:	2001      	movs	r0, #1
   b71d8:	e7f5      	b.n	b71c6 <_ZN7FatFile6getSFNEPc+0xa>
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   b71da:	f000 f865 	bl	b72a8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b71de:	2800      	cmp	r0, #0
   b71e0:	d0f0      	beq.n	b71c4 <_ZN7FatFile6getSFNEPc+0x8>
  dirName(dir, name);
   b71e2:	4621      	mov	r1, r4
   b71e4:	f000 f86f 	bl	b72c6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
   b71e8:	e7f5      	b.n	b71d6 <_ZN7FatFile6getSFNEPc+0x1a>

000b71ea <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b71ea:	b538      	push	{r3, r4, r5, lr}
   b71ec:	4604      	mov	r4, r0
   b71ee:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b71f0:	2224      	movs	r2, #36	; 0x24
   b71f2:	2100      	movs	r1, #0
   b71f4:	f00d f9c0 	bl	c4578 <memset>

  m_vol = vol;
   b71f8:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b71fa:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b71fc:	2b10      	cmp	r3, #16
   b71fe:	d003      	beq.n	b7208 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b7200:	2b20      	cmp	r3, #32
   b7202:	d006      	beq.n	b7212 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b7204:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b7206:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b7208:	2320      	movs	r3, #32
  m_flags = F_READ;
   b720a:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b720c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b720e:	70a0      	strb	r0, [r4, #2]
  return true;
   b7210:	e7f9      	b.n	b7206 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b7212:	2340      	movs	r3, #64	; 0x40
   b7214:	e7f9      	b.n	b720a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b7216 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b7216:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7218:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b721a:	f043 0304 	orr.w	r3, r3, #4
   b721e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b7220:	f100 0210 	add.w	r2, r0, #16
   b7224:	6880      	ldr	r0, [r0, #8]
   b7226:	f000 bc61 	b.w	b7aec <_ZN9FatVolume15allocateClusterEmPm>
	...

000b722c <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b7230:	7801      	ldrb	r1, [r0, #0]
   b7232:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b7236:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b7238:	d003      	beq.n	b7242 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b723a:	2600      	movs	r6, #0
}
   b723c:	4630      	mov	r0, r6
   b723e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b7242:	6942      	ldr	r2, [r0, #20]
   b7244:	4b17      	ldr	r3, [pc, #92]	; (b72a4 <_ZN7FatFile13addDirClusterEv+0x78>)
   b7246:	429a      	cmp	r2, r3
   b7248:	d2f7      	bcs.n	b723a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b724a:	f7ff ffe4 	bl	b7216 <_ZN7FatFile10addClusterEv>
   b724e:	4606      	mov	r6, r0
   b7250:	2800      	cmp	r0, #0
   b7252:	d0f2      	beq.n	b723a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b7254:	6921      	ldr	r1, [r4, #16]
   b7256:	68a0      	ldr	r0, [r4, #8]
   b7258:	f000 fbdd 	bl	b7a16 <_ZNK9FatVolume17clusterFirstBlockEm>
   b725c:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b725e:	68a0      	ldr	r0, [r4, #8]
   b7260:	2205      	movs	r2, #5
   b7262:	4639      	mov	r1, r7
   b7264:	3024      	adds	r0, #36	; 0x24
   b7266:	f000 fbb3 	bl	b79d0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b726a:	4680      	mov	r8, r0
   b726c:	2800      	cmp	r0, #0
   b726e:	d0e4      	beq.n	b723a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b7270:	4629      	mov	r1, r5
   b7272:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7276:	f00d f97f 	bl	c4578 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b727a:	2501      	movs	r5, #1
   b727c:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b727e:	791a      	ldrb	r2, [r3, #4]
   b7280:	42aa      	cmp	r2, r5
   b7282:	d909      	bls.n	b7298 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b7284:	6818      	ldr	r0, [r3, #0]
   b7286:	4642      	mov	r2, r8
   b7288:	19e9      	adds	r1, r5, r7
   b728a:	f000 ff0e 	bl	b80aa <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b728e:	2800      	cmp	r0, #0
   b7290:	d0d3      	beq.n	b723a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b7292:	3501      	adds	r5, #1
   b7294:	b2ed      	uxtb	r5, r5
   b7296:	e7f1      	b.n	b727c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b7298:	6963      	ldr	r3, [r4, #20]
   b729a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b729e:	6163      	str	r3, [r4, #20]
  return true;
   b72a0:	e7cc      	b.n	b723c <_ZN7FatFile13addDirClusterEv+0x10>
   b72a2:	bf00      	nop
   b72a4:	001ffe00 	.word	0x001ffe00

000b72a8 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b72a8:	b510      	push	{r4, lr}
   b72aa:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b72ac:	6880      	ldr	r0, [r0, #8]
   b72ae:	460a      	mov	r2, r1
   b72b0:	3024      	adds	r0, #36	; 0x24
   b72b2:	69a1      	ldr	r1, [r4, #24]
   b72b4:	f000 fb8c 	bl	b79d0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b72b8:	b120      	cbz	r0, b72c4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b72ba:	88a3      	ldrh	r3, [r4, #4]
   b72bc:	f003 030f 	and.w	r3, r3, #15
   b72c0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b72c4:	bd10      	pop	{r4, pc}

000b72c6 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:
  for (uint8_t i = 0; i < 11; i++) {
   b72c6:	2300      	movs	r3, #0
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
   b72c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72ca:	4604      	mov	r4, r0
   b72cc:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
   b72ce:	2608      	movs	r6, #8
  uint8_t j = 0;
   b72d0:	4618      	mov	r0, r3
      name[j++] = '.';
   b72d2:	272e      	movs	r7, #46	; 0x2e
    if (dir->name[i] == ' ') {
   b72d4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   b72d8:	2a20      	cmp	r2, #32
   b72da:	d018      	beq.n	b730e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x48>
    if (i == 8) {
   b72dc:	2b08      	cmp	r3, #8
      name[j++] = '.';
   b72de:	bf02      	ittt	eq
   b72e0:	540f      	strbeq	r7, [r1, r0]
   b72e2:	1c42      	addeq	r2, r0, #1
   b72e4:	b2d0      	uxtbeq	r0, r2
    char c = dir->name[i];
   b72e6:	782a      	ldrb	r2, [r5, #0]
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b72e8:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
      lcBit = DIR_NT_LC_EXT;
   b72ec:	bf08      	it	eq
   b72ee:	2610      	moveq	r6, #16
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
   b72f0:	f1bc 0f19 	cmp.w	ip, #25
   b72f4:	d806      	bhi.n	b7304 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3e>
   b72f6:	f894 c00c 	ldrb.w	ip, [r4, #12]
   b72fa:	ea16 0f0c 	tst.w	r6, ip
      c += 'a' - 'A';
   b72fe:	bf1c      	itt	ne
   b7300:	3220      	addne	r2, #32
   b7302:	b2d2      	uxtbne	r2, r2
    name[j++] = c;
   b7304:	f100 0c01 	add.w	ip, r0, #1
   b7308:	540a      	strb	r2, [r1, r0]
   b730a:	fa5f f08c 	uxtb.w	r0, ip
  for (uint8_t i = 0; i < 11; i++) {
   b730e:	3301      	adds	r3, #1
   b7310:	b2db      	uxtb	r3, r3
   b7312:	2b0b      	cmp	r3, #11
   b7314:	d1de      	bne.n	b72d4 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xe>
  name[j] = 0;
   b7316:	2300      	movs	r3, #0
   b7318:	540b      	strb	r3, [r1, r0]
}
   b731a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b731c <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b731c:	7803      	ldrb	r3, [r0, #0]
   b731e:	b90b      	cbnz	r3, b7324 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b7320:	f7ff bf63 	b.w	b71ea <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b7324:	2000      	movs	r0, #0
   b7326:	4770      	bx	lr

000b7328 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b7328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b732c:	7803      	ldrb	r3, [r0, #0]
   b732e:	4604      	mov	r4, r0
   b7330:	4688      	mov	r8, r1
   b7332:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b7334:	2b00      	cmp	r3, #0
   b7336:	d05d      	beq.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
   b7338:	7882      	ldrb	r2, [r0, #2]
   b733a:	07d1      	lsls	r1, r2, #31
   b733c:	d55a      	bpl.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b733e:	071a      	lsls	r2, r3, #28
   b7340:	d52d      	bpl.n	b739e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b7342:	69c3      	ldr	r3, [r0, #28]
   b7344:	6942      	ldr	r2, [r0, #20]
   b7346:	1a9b      	subs	r3, r3, r2
   b7348:	429d      	cmp	r5, r3
   b734a:	bf28      	it	cs
   b734c:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b734e:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b7350:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7354:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b7358:	2e00      	cmp	r6, #0
   b735a:	f000 808f 	beq.w	b747c <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b735e:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b7360:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7362:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b7364:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7366:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b736a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b736e:	d51f      	bpl.n	b73b0 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7370:	6a00      	ldr	r0, [r0, #32]
   b7372:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b7374:	68a0      	ldr	r0, [r4, #8]
   b7376:	f1ba 0f00 	cmp.w	sl, #0
   b737a:	d142      	bne.n	b7402 <_ZN7FatFile4readEPvj+0xda>
   b737c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7380:	d33f      	bcc.n	b7402 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b7382:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7384:	4299      	cmp	r1, r3
   b7386:	d03c      	beq.n	b7402 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b7388:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b738c:	d252      	bcs.n	b7434 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b738e:	6800      	ldr	r0, [r0, #0]
   b7390:	4642      	mov	r2, r8
   b7392:	f000 fe01 	bl	b7f98 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7396:	b368      	cbz	r0, b73f4 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b7398:	f44f 7700 	mov.w	r7, #512	; 0x200
   b739c:	e044      	b.n	b7428 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b739e:	069b      	lsls	r3, r3, #26
   b73a0:	d5d5      	bpl.n	b734e <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b73a2:	6883      	ldr	r3, [r0, #8]
   b73a4:	891a      	ldrh	r2, [r3, #8]
   b73a6:	6943      	ldr	r3, [r0, #20]
   b73a8:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b73ac:	b29b      	uxth	r3, r3
   b73ae:	e7cb      	b.n	b7348 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b73b0:	f890 9005 	ldrb.w	r9, [r0, #5]
   b73b4:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b73b8:	f1ba 0f00 	cmp.w	sl, #0
   b73bc:	d108      	bne.n	b73d0 <_ZN7FatFile4readEPvj+0xa8>
   b73be:	f1b9 0f00 	cmp.w	r9, #0
   b73c2:	d105      	bne.n	b73d0 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b73c4:	b95b      	cbnz	r3, b73de <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b73c6:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b73c8:	bf4c      	ite	mi
   b73ca:	6a03      	ldrmi	r3, [r0, #32]
   b73cc:	6a23      	ldrpl	r3, [r4, #32]
   b73ce:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b73d0:	6921      	ldr	r1, [r4, #16]
   b73d2:	68a0      	ldr	r0, [r4, #8]
   b73d4:	f000 fb1f 	bl	b7a16 <_ZNK9FatVolume17clusterFirstBlockEm>
   b73d8:	eb09 0100 	add.w	r1, r9, r0
   b73dc:	e7ca      	b.n	b7374 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b73de:	6921      	ldr	r1, [r4, #16]
   b73e0:	465a      	mov	r2, fp
   b73e2:	f000 fb1e 	bl	b7a22 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b73e6:	2800      	cmp	r0, #0
   b73e8:	db04      	blt.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b73ea:	d1f1      	bne.n	b73d0 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b73ec:	7823      	ldrb	r3, [r4, #0]
   b73ee:	f013 0f70 	tst.w	r3, #112	; 0x70
   b73f2:	d143      	bne.n	b747c <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b73f4:	7863      	ldrb	r3, [r4, #1]
   b73f6:	f043 0302 	orr.w	r3, r3, #2
   b73fa:	7063      	strb	r3, [r4, #1]
  return -1;
   b73fc:	f04f 30ff 	mov.w	r0, #4294967295
   b7400:	e03d      	b.n	b747e <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b7402:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b7406:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b7408:	f04f 0200 	mov.w	r2, #0
   b740c:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b7410:	bf28      	it	cs
   b7412:	4637      	movcs	r7, r6
   b7414:	f000 fadc 	bl	b79d0 <_ZN8FatCache4readEmh>
      if (!pc) {
   b7418:	2800      	cmp	r0, #0
   b741a:	d0eb      	beq.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b741c:	eb00 010a 	add.w	r1, r0, sl
   b7420:	463a      	mov	r2, r7
   b7422:	4640      	mov	r0, r8
   b7424:	f00d f880 	bl	c4528 <memcpy>
    m_curPosition += n;
   b7428:	6963      	ldr	r3, [r4, #20]
   b742a:	443b      	add	r3, r7
    dst += n;
   b742c:	44b8      	add	r8, r7
    m_curPosition += n;
   b742e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b7430:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b7432:	e791      	b.n	b7358 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b7434:	7822      	ldrb	r2, [r4, #0]
   b7436:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b7438:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b743c:	d406      	bmi.n	b744c <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b743e:	7902      	ldrb	r2, [r0, #4]
   b7440:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b7444:	b2d2      	uxtb	r2, r2
   b7446:	4592      	cmp	sl, r2
   b7448:	bf28      	it	cs
   b744a:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b744c:	4299      	cmp	r1, r3
      n = 512*nb;
   b744e:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7452:	d208      	bcs.n	b7466 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b7454:	68a0      	ldr	r0, [r4, #8]
   b7456:	4653      	mov	r3, sl
   b7458:	6800      	ldr	r0, [r0, #0]
   b745a:	4642      	mov	r2, r8
   b745c:	f000 fde4 	bl	b8028 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b7460:	2800      	cmp	r0, #0
   b7462:	d1e1      	bne.n	b7428 <_ZN7FatFile4readEPvj+0x100>
   b7464:	e7c6      	b.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7466:	4453      	add	r3, sl
   b7468:	428b      	cmp	r3, r1
   b746a:	d9f3      	bls.n	b7454 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b746c:	3024      	adds	r0, #36	; 0x24
   b746e:	9101      	str	r1, [sp, #4]
   b7470:	f000 fa86 	bl	b7980 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7474:	9901      	ldr	r1, [sp, #4]
   b7476:	2800      	cmp	r0, #0
   b7478:	d1ec      	bne.n	b7454 <_ZN7FatFile4readEPvj+0x12c>
   b747a:	e7bb      	b.n	b73f4 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b747c:	1ba8      	subs	r0, r5, r6
}
   b747e:	b003      	add	sp, #12
   b7480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7484 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b7484:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7486:	2201      	movs	r2, #1
   b7488:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b748c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b7490:	4604      	mov	r4, r0
   b7492:	f7ff ff49 	bl	b7328 <_ZN7FatFile4readEPvj>
   b7496:	2801      	cmp	r0, #1
   b7498:	bf0a      	itet	eq
   b749a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b749e:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b74a2:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b74a6:	b002      	add	sp, #8
   b74a8:	bd70      	pop	{r4, r5, r6, pc}

000b74aa <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b74aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b74ac:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b74ae:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b74b2:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b74b4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b74b8:	d000      	beq.n	b74bc <_ZN7FatFile12readDirCacheEb+0x12>
   b74ba:	b999      	cbnz	r1, b74e4 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b74bc:	2201      	movs	r2, #1
   b74be:	f10d 0107 	add.w	r1, sp, #7
   b74c2:	4620      	mov	r0, r4
   b74c4:	f7ff ff30 	bl	b7328 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b74c8:	b240      	sxtb	r0, r0
   b74ca:	2801      	cmp	r0, #1
   b74cc:	d002      	beq.n	b74d4 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b74ce:	2000      	movs	r0, #0
}
   b74d0:	b003      	add	sp, #12
   b74d2:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b74d4:	6963      	ldr	r3, [r4, #20]
   b74d6:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b74d8:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b74da:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b74dc:	3030      	adds	r0, #48	; 0x30
   b74de:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b74e2:	e7f5      	b.n	b74d0 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b74e4:	3320      	adds	r3, #32
   b74e6:	e7f7      	b.n	b74d8 <_ZN7FatFile12readDirCacheEb+0x2e>

000b74e8 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b74e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b74ec:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b74ee:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b74f0:	4604      	mov	r4, r0
   b74f2:	460d      	mov	r5, r1
  if (!isOpen()) {
   b74f4:	b162      	cbz	r2, b7510 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b74f6:	6940      	ldr	r0, [r0, #20]
   b74f8:	4288      	cmp	r0, r1
   b74fa:	d002      	beq.n	b7502 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b74fc:	b919      	cbnz	r1, b7506 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b74fe:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b7500:	6165      	str	r5, [r4, #20]
    return true;
   b7502:	2001      	movs	r0, #1
   b7504:	e006      	b.n	b7514 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b7506:	0716      	lsls	r6, r2, #28
   b7508:	d506      	bpl.n	b7518 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b750a:	69e3      	ldr	r3, [r4, #28]
   b750c:	428b      	cmp	r3, r1
   b750e:	d20b      	bcs.n	b7528 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b7510:	6127      	str	r7, [r4, #16]
  return false;
   b7512:	2000      	movs	r0, #0
}
   b7514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b7518:	0691      	lsls	r1, r2, #26
   b751a:	d505      	bpl.n	b7528 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b751c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b751e:	891b      	ldrh	r3, [r3, #8]
   b7520:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7524:	d9ec      	bls.n	b7500 <_ZN7FatFile7seekSetEm+0x18>
   b7526:	e7f3      	b.n	b7510 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7528:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b752c:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b7530:	1e43      	subs	r3, r0, #1
   b7532:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7536:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b7538:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b753a:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b753c:	42b3      	cmp	r3, r6
   b753e:	d800      	bhi.n	b7542 <_ZN7FatFile7seekSetEm+0x5a>
   b7540:	b998      	cbnz	r0, b756a <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7542:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b7544:	bf4c      	ite	mi
   b7546:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b754a:	6a23      	ldrpl	r3, [r4, #32]
   b754c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b754e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b7552:	2e00      	cmp	r6, #0
   b7554:	d0d4      	beq.n	b7500 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7556:	6921      	ldr	r1, [r4, #16]
   b7558:	68a0      	ldr	r0, [r4, #8]
   b755a:	4642      	mov	r2, r8
   b755c:	f000 fa61 	bl	b7a22 <_ZN9FatVolume6fatGetEmPm>
   b7560:	2800      	cmp	r0, #0
   b7562:	f106 36ff 	add.w	r6, r6, #4294967295
   b7566:	dcf4      	bgt.n	b7552 <_ZN7FatFile7seekSetEm+0x6a>
   b7568:	e7d2      	b.n	b7510 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b756a:	1af6      	subs	r6, r6, r3
   b756c:	e7ef      	b.n	b754e <_ZN7FatFile7seekSetEm+0x66>

000b756e <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b756e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7570:	460f      	mov	r7, r1
   b7572:	4604      	mov	r4, r0
   b7574:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7576:	2100      	movs	r1, #0
   b7578:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b757a:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b757c:	f00c fffc 	bl	c4578 <memset>
  m_vol = dirFile->m_vol;
   b7580:	68b8      	ldr	r0, [r7, #8]
   b7582:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b7584:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7586:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b758a:	6a3b      	ldr	r3, [r7, #32]
   b758c:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b758e:	016a      	lsls	r2, r5, #5
   b7590:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7594:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b7598:	071f      	lsls	r7, r3, #28
   b759a:	d444      	bmi.n	b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b759c:	f003 0317 	and.w	r3, r3, #23
   b75a0:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b75a2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b75a6:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b75aa:	bf04      	itt	eq
   b75ac:	f043 0308 	orreq.w	r3, r3, #8
   b75b0:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b75b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b75b6:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b75b8:	f006 0303 	and.w	r3, r6, #3
   b75bc:	2b01      	cmp	r3, #1
   b75be:	d02c      	beq.n	b761a <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b75c0:	2b02      	cmp	r3, #2
   b75c2:	d028      	beq.n	b7616 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b75c4:	bb7b      	cbnz	r3, b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b75c6:	0571      	lsls	r1, r6, #21
   b75c8:	d42d      	bmi.n	b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b75ca:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b75cc:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b75ce:	78a1      	ldrb	r1, [r4, #2]
   b75d0:	078b      	lsls	r3, r1, #30
   b75d2:	d504      	bpl.n	b75de <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b75d4:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b75d6:	06df      	lsls	r7, r3, #27
   b75d8:	d425      	bmi.n	b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b75da:	07dd      	lsls	r5, r3, #31
   b75dc:	d423      	bmi.n	b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b75de:	11b3      	asrs	r3, r6, #6
   b75e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b75e4:	f006 0508 	and.w	r5, r6, #8
   b75e8:	432b      	orrs	r3, r5
   b75ea:	430b      	orrs	r3, r1
   b75ec:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b75ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b75f0:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b75f2:	1883      	adds	r3, r0, r2
   b75f4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b75f8:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b75fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b7600:	0572      	lsls	r2, r6, #21
   b7602:	d513      	bpl.n	b762c <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7604:	b959      	cbnz	r1, b761e <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b7606:	78a3      	ldrb	r3, [r4, #2]
   b7608:	f043 0304 	orr.w	r3, r3, #4
   b760c:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b760e:	0473      	lsls	r3, r6, #17
   b7610:	d410      	bmi.n	b7634 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7612:	2001      	movs	r0, #1
}
   b7614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7616:	2303      	movs	r3, #3
   b7618:	e7d8      	b.n	b75cc <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b761a:	2302      	movs	r3, #2
   b761c:	e7d6      	b.n	b75cc <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b761e:	f000 faa0 	bl	b7b62 <_ZN9FatVolume9freeChainEm>
   b7622:	2800      	cmp	r0, #0
   b7624:	d1ef      	bne.n	b7606 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7626:	2000      	movs	r0, #0
   b7628:	7020      	strb	r0, [r4, #0]
  return false;
   b762a:	e7f3      	b.n	b7614 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b762c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b762e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7630:	61e3      	str	r3, [r4, #28]
   b7632:	e7ec      	b.n	b760e <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7634:	69e1      	ldr	r1, [r4, #28]
   b7636:	4620      	mov	r0, r4
   b7638:	f7ff ff56 	bl	b74e8 <_ZN7FatFile7seekSetEm>
   b763c:	2800      	cmp	r0, #0
   b763e:	d1e8      	bne.n	b7612 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7640:	e7f1      	b.n	b7626 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7642 <_ZN7FatFile8openNextEPS_i>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   b7642:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return m_attr;
   b7646:	7803      	ldrb	r3, [r0, #0]
   b7648:	4607      	mov	r7, r0
   b764a:	460d      	mov	r5, r1
   b764c:	4692      	mov	sl, r2
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   b764e:	bb53      	cbnz	r3, b76a6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7650:	780b      	ldrb	r3, [r1, #0]
   b7652:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7656:	d026      	beq.n	b76a6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7658:	694c      	ldr	r4, [r1, #20]
   b765a:	f014 041f 	ands.w	r4, r4, #31
   b765e:	d122      	bne.n	b76a6 <_ZN7FatFile8openNextEPS_i+0x64>
   b7660:	46a0      	mov	r8, r4
    dir_t* dir = dirFile->readDirCache();
   b7662:	2100      	movs	r1, #0
   b7664:	4628      	mov	r0, r5
    return m_curPosition;
   b7666:	f8d5 9014 	ldr.w	r9, [r5, #20]
   b766a:	f7ff ff1e 	bl	b74aa <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b766e:	b1d0      	cbz	r0, b76a6 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == DIR_NAME_FREE) {
   b7670:	7806      	ldrb	r6, [r0, #0]
   b7672:	b1c6      	cbz	r6, b76a6 <_ZN7FatFile8openNextEPS_i+0x64>
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
   b7674:	2e2e      	cmp	r6, #46	; 0x2e
   b7676:	d010      	beq.n	b769a <_ZN7FatFile8openNextEPS_i+0x58>
   b7678:	2ee5      	cmp	r6, #229	; 0xe5
   b767a:	d00e      	beq.n	b769a <_ZN7FatFile8openNextEPS_i+0x58>
   b767c:	7ac3      	ldrb	r3, [r0, #11]
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b767e:	071a      	lsls	r2, r3, #28
   b7680:	d413      	bmi.n	b76aa <_ZN7FatFile8openNextEPS_i+0x68>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b7682:	b964      	cbnz	r4, b769e <_ZN7FatFile8openNextEPS_i+0x5c>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   b7684:	9400      	str	r4, [sp, #0]
   b7686:	4653      	mov	r3, sl
   b7688:	f3c9 124f 	ubfx	r2, r9, #5, #16
   b768c:	4629      	mov	r1, r5
   b768e:	4638      	mov	r0, r7
   b7690:	f7ff ff6d 	bl	b756e <_ZN7FatFile15openCachedEntryEPS_tih>
}
   b7694:	b002      	add	sp, #8
   b7696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   b769a:	2400      	movs	r4, #0
   b769c:	e7e1      	b.n	b7662 <_ZN7FatFile8openNextEPS_i+0x20>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
   b769e:	f7ff fa0e 	bl	b6abe <_ZN7FatFile11lfnChecksumEPh>
   b76a2:	4540      	cmp	r0, r8
   b76a4:	d0ee      	beq.n	b7684 <_ZN7FatFile8openNextEPS_i+0x42>
  return false;
   b76a6:	2000      	movs	r0, #0
   b76a8:	e7f4      	b.n	b7694 <_ZN7FatFile8openNextEPS_i+0x52>
    } else if (DIR_IS_LONG_NAME(dir)) {
   b76aa:	2b0f      	cmp	r3, #15
   b76ac:	d1f5      	bne.n	b769a <_ZN7FatFile8openNextEPS_i+0x58>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
   b76ae:	0673      	lsls	r3, r6, #25
   b76b0:	d5d7      	bpl.n	b7662 <_ZN7FatFile8openNextEPS_i+0x20>
        chksum = ldir->chksum;
   b76b2:	f890 800d 	ldrb.w	r8, [r0, #13]
        lfnOrd = ldir->ord & 0X1F;
   b76b6:	f006 041f 	and.w	r4, r6, #31
        chksum = ldir->chksum;
   b76ba:	e7d2      	b.n	b7662 <_ZN7FatFile8openNextEPS_i+0x20>

000b76bc <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b76bc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b76be:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b76c0:	4604      	mov	r4, r0
  if (!isOpen()) {
   b76c2:	b90b      	cbnz	r3, b76c8 <_ZN7FatFile4syncEv+0xc>
    return true;
   b76c4:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b76c6:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b76c8:	7883      	ldrb	r3, [r0, #2]
   b76ca:	075a      	lsls	r2, r3, #29
   b76cc:	d523      	bpl.n	b7716 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b76ce:	2101      	movs	r1, #1
   b76d0:	f7ff fdea 	bl	b72a8 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b76d4:	4605      	mov	r5, r0
   b76d6:	b928      	cbnz	r0, b76e4 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b76d8:	7863      	ldrb	r3, [r4, #1]
   b76da:	f043 0301 	orr.w	r3, r3, #1
   b76de:	7063      	strb	r3, [r4, #1]
  return false;
   b76e0:	2000      	movs	r0, #0
   b76e2:	e7f0      	b.n	b76c6 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b76e4:	7803      	ldrb	r3, [r0, #0]
   b76e6:	2be5      	cmp	r3, #229	; 0xe5
   b76e8:	d0f6      	beq.n	b76d8 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b76ea:	7823      	ldrb	r3, [r4, #0]
   b76ec:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b76ee:	bf44      	itt	mi
   b76f0:	69e3      	ldrmi	r3, [r4, #28]
   b76f2:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b76f4:	6a23      	ldr	r3, [r4, #32]
   b76f6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b76f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b76fa:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b76fc:	4b09      	ldr	r3, [pc, #36]	; (b7724 <_ZN7FatFile4syncEv+0x68>)
   b76fe:	681b      	ldr	r3, [r3, #0]
   b7700:	b12b      	cbz	r3, b770e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b7702:	f100 0116 	add.w	r1, r0, #22
   b7706:	3018      	adds	r0, #24
   b7708:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b770a:	8b2b      	ldrh	r3, [r5, #24]
   b770c:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b770e:	78a3      	ldrb	r3, [r4, #2]
   b7710:	f023 0304 	bic.w	r3, r3, #4
   b7714:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b7716:	68a0      	ldr	r0, [r4, #8]
   b7718:	f7ff f9c4 	bl	b6aa4 <_ZN9FatVolume9cacheSyncEv>
   b771c:	2800      	cmp	r0, #0
   b771e:	d0db      	beq.n	b76d8 <_ZN7FatFile4syncEv+0x1c>
   b7720:	e7d0      	b.n	b76c4 <_ZN7FatFile4syncEv+0x8>
   b7722:	bf00      	nop
   b7724:	2003e60c 	.word	0x2003e60c

000b7728 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b7728:	b510      	push	{r4, lr}
   b772a:	4604      	mov	r4, r0
  bool rtn = sync();
   b772c:	f7ff ffc6 	bl	b76bc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b7730:	2300      	movs	r3, #0
   b7732:	7023      	strb	r3, [r4, #0]
}
   b7734:	bd10      	pop	{r4, pc}

000b7736 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7736:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7738:	b093      	sub	sp, #76	; 0x4c
   b773a:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b773c:	2300      	movs	r3, #0
   b773e:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b7740:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b7742:	9201      	str	r2, [sp, #4]
   b7744:	4606      	mov	r6, r0
   b7746:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b7748:	b113      	cbz	r3, b7750 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b774a:	2000      	movs	r0, #0
}
   b774c:	b013      	add	sp, #76	; 0x4c
   b774e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b7750:	780b      	ldrb	r3, [r1, #0]
   b7752:	f013 0f70 	tst.w	r3, #112	; 0x70
   b7756:	d0f8      	beq.n	b774a <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b7758:	7813      	ldrb	r3, [r2, #0]
   b775a:	2b2f      	cmp	r3, #47	; 0x2f
   b775c:	d112      	bne.n	b7784 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b775e:	9a01      	ldr	r2, [sp, #4]
   b7760:	7813      	ldrb	r3, [r2, #0]
   b7762:	2b2f      	cmp	r3, #47	; 0x2f
   b7764:	d102      	bne.n	b776c <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b7766:	3201      	adds	r2, #1
   b7768:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b776a:	e7f8      	b.n	b775e <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b776c:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b776e:	b91b      	cbnz	r3, b7778 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b7770:	4630      	mov	r0, r6
   b7772:	f7ff fdd3 	bl	b731c <_ZN7FatFile8openRootEP9FatVolume>
   b7776:	e7e9      	b.n	b774c <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b7778:	a809      	add	r0, sp, #36	; 0x24
   b777a:	f7ff fd36 	bl	b71ea <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b777e:	2800      	cmp	r0, #0
   b7780:	d0e3      	beq.n	b774a <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b7782:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b7784:	9801      	ldr	r0, [sp, #4]
   b7786:	aa01      	add	r2, sp, #4
   b7788:	a903      	add	r1, sp, #12
   b778a:	f7ff fa2d 	bl	b6be8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b778e:	2800      	cmp	r0, #0
   b7790:	d0db      	beq.n	b774a <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b7792:	9b01      	ldr	r3, [sp, #4]
   b7794:	781b      	ldrb	r3, [r3, #0]
   b7796:	b19b      	cbz	r3, b77c0 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7798:	2300      	movs	r3, #0
   b779a:	aa03      	add	r2, sp, #12
   b779c:	4621      	mov	r1, r4
   b779e:	4630      	mov	r0, r6
   b77a0:	f7ff fb54 	bl	b6e4c <_ZN7FatFile4openEPS_P7fname_ti>
   b77a4:	2800      	cmp	r0, #0
   b77a6:	d0d0      	beq.n	b774a <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b77a8:	4635      	mov	r5, r6
   b77aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77ac:	ac09      	add	r4, sp, #36	; 0x24
   b77ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77b4:	682b      	ldr	r3, [r5, #0]
   b77b6:	6023      	str	r3, [r4, #0]
    close();
   b77b8:	4630      	mov	r0, r6
   b77ba:	f7ff ffb5 	bl	b7728 <_ZN7FatFile5closeEv>
  while (1) {
   b77be:	e7e0      	b.n	b7782 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b77c0:	463b      	mov	r3, r7
   b77c2:	aa03      	add	r2, sp, #12
   b77c4:	4621      	mov	r1, r4
   b77c6:	4630      	mov	r0, r6
   b77c8:	f7ff fb40 	bl	b6e4c <_ZN7FatFile4openEPS_P7fname_ti>
   b77cc:	e7be      	b.n	b774c <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b77d0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b77d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b77d4:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b77d6:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b77d8:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b77da:	4604      	mov	r4, r0
   b77dc:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b77de:	d55b      	bpl.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
   b77e0:	7883      	ldrb	r3, [r0, #2]
   b77e2:	079a      	lsls	r2, r3, #30
   b77e4:	d558      	bpl.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b77e6:	071b      	lsls	r3, r3, #28
   b77e8:	d451      	bmi.n	b788e <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b77ea:	6963      	ldr	r3, [r4, #20]
   b77ec:	43db      	mvns	r3, r3
   b77ee:	42bb      	cmp	r3, r7
   b77f0:	d352      	bcc.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
   b77f2:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b77f4:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b77f8:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b77fa:	f1b8 0f00 	cmp.w	r8, #0
   b77fe:	f000 8091 	beq.w	b7924 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7802:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b7804:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b7806:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b780a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b780e:	d10e      	bne.n	b782e <_ZN7FatFile5writeEPKvj+0x5e>
   b7810:	b96d      	cbnz	r5, b782e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b7812:	6921      	ldr	r1, [r4, #16]
   b7814:	2900      	cmp	r1, #0
   b7816:	d046      	beq.n	b78a6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7818:	4652      	mov	r2, sl
   b781a:	f000 f902 	bl	b7a22 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b781e:	2800      	cmp	r0, #0
   b7820:	db3a      	blt.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b7822:	d104      	bne.n	b782e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b7824:	4620      	mov	r0, r4
   b7826:	f7ff fcf6 	bl	b7216 <_ZN7FatFile10addClusterEv>
   b782a:	2800      	cmp	r0, #0
   b782c:	d034      	beq.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b782e:	6921      	ldr	r1, [r4, #16]
   b7830:	68a0      	ldr	r0, [r4, #8]
   b7832:	f000 f8f0 	bl	b7a16 <_ZNK9FatVolume17clusterFirstBlockEm>
   b7836:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b7838:	68a0      	ldr	r0, [r4, #8]
   b783a:	b915      	cbnz	r5, b7842 <_ZN7FatFile5writeEPKvj+0x72>
   b783c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b7840:	d23f      	bcs.n	b78c2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b7842:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b7846:	4546      	cmp	r6, r8
   b7848:	bf28      	it	cs
   b784a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b784c:	2d00      	cmp	r5, #0
   b784e:	d136      	bne.n	b78be <_ZN7FatFile5writeEPKvj+0xee>
   b7850:	6962      	ldr	r2, [r4, #20]
   b7852:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b7854:	429a      	cmp	r2, r3
   b7856:	bf34      	ite	cc
   b7858:	2201      	movcc	r2, #1
   b785a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b785c:	3024      	adds	r0, #36	; 0x24
   b785e:	f000 f8b7 	bl	b79d0 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b7862:	b1c8      	cbz	r0, b7898 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b7864:	4428      	add	r0, r5
   b7866:	4632      	mov	r2, r6
   b7868:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b786a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b786c:	f00c fe5c 	bl	c4528 <memcpy>
      if (512 == (n + blockOffset)) {
   b7870:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b7874:	d104      	bne.n	b7880 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b7876:	68a0      	ldr	r0, [r4, #8]
   b7878:	3024      	adds	r0, #36	; 0x24
   b787a:	f000 f881 	bl	b7980 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b787e:	b158      	cbz	r0, b7898 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7880:	6963      	ldr	r3, [r4, #20]
   b7882:	4433      	add	r3, r6
   b7884:	6163      	str	r3, [r4, #20]
    src += n;
   b7886:	44b1      	add	r9, r6
    nToWrite -= n;
   b7888:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b788c:	e7b4      	b.n	b77f8 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b788e:	69c1      	ldr	r1, [r0, #28]
   b7890:	f7ff fe2a 	bl	b74e8 <_ZN7FatFile7seekSetEm>
   b7894:	2800      	cmp	r0, #0
   b7896:	d1a8      	bne.n	b77ea <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7898:	7863      	ldrb	r3, [r4, #1]
   b789a:	f043 0301 	orr.w	r3, r3, #1
   b789e:	7063      	strb	r3, [r4, #1]
  return -1;
   b78a0:	f04f 30ff 	mov.w	r0, #4294967295
   b78a4:	e050      	b.n	b7948 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b78a6:	6a23      	ldr	r3, [r4, #32]
   b78a8:	b93b      	cbnz	r3, b78ba <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b78aa:	4620      	mov	r0, r4
   b78ac:	f7ff fcb3 	bl	b7216 <_ZN7FatFile10addClusterEv>
   b78b0:	2800      	cmp	r0, #0
   b78b2:	d0f1      	beq.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b78b4:	6923      	ldr	r3, [r4, #16]
   b78b6:	6223      	str	r3, [r4, #32]
   b78b8:	e7b9      	b.n	b782e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b78ba:	6123      	str	r3, [r4, #16]
   b78bc:	e7b7      	b.n	b782e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b78be:	2201      	movs	r2, #1
   b78c0:	e7cc      	b.n	b785c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b78c2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b78c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b78c8:	d31b      	bcc.n	b7902 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b78ca:	f890 c004 	ldrb.w	ip, [r0, #4]
   b78ce:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b78d2:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b78d4:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b78d8:	4573      	cmp	r3, lr
   b78da:	bf28      	it	cs
   b78dc:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b78de:	4291      	cmp	r1, r2
      n = 512*nb;
   b78e0:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b78e4:	d307      	bcc.n	b78f6 <_ZN7FatFile5writeEPKvj+0x126>
   b78e6:	441a      	add	r2, r3
   b78e8:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b78ea:	bf82      	ittt	hi
   b78ec:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b78f0:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b78f4:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b78f6:	68a5      	ldr	r5, [r4, #8]
   b78f8:	464a      	mov	r2, r9
   b78fa:	6828      	ldr	r0, [r5, #0]
   b78fc:	f000 fc4b 	bl	b8196 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7900:	e7bd      	b.n	b787e <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b7902:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b7904:	bf02      	ittt	eq
   b7906:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b790a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b790e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b7910:	68a3      	ldr	r3, [r4, #8]
   b7912:	464a      	mov	r2, r9
   b7914:	6818      	ldr	r0, [r3, #0]
   b7916:	f000 fbc8 	bl	b80aa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b791a:	2800      	cmp	r0, #0
   b791c:	d0bc      	beq.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b791e:	f44f 7600 	mov.w	r6, #512	; 0x200
   b7922:	e7ad      	b.n	b7880 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b7924:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b7926:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b7928:	42b2      	cmp	r2, r6
   b792a:	d204      	bcs.n	b7936 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b792c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b792e:	f043 0304 	orr.w	r3, r3, #4
   b7932:	70a3      	strb	r3, [r4, #2]
   b7934:	e003      	b.n	b793e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b7936:	4a08      	ldr	r2, [pc, #32]	; (b7958 <_ZN7FatFile5writeEPKvj+0x188>)
   b7938:	6812      	ldr	r2, [r2, #0]
   b793a:	2a00      	cmp	r2, #0
   b793c:	d1f7      	bne.n	b792e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b793e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b7942:	2b00      	cmp	r3, #0
   b7944:	db02      	blt.n	b794c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b7946:	4638      	mov	r0, r7
}
   b7948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b794c:	4620      	mov	r0, r4
   b794e:	f7ff feb5 	bl	b76bc <_ZN7FatFile4syncEv>
   b7952:	2800      	cmp	r0, #0
   b7954:	d1f7      	bne.n	b7946 <_ZN7FatFile5writeEPKvj+0x176>
   b7956:	e79f      	b.n	b7898 <_ZN7FatFile5writeEPKvj+0xc8>
   b7958:	2003e60c 	.word	0x2003e60c

000b795c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b795c:	b513      	push	{r0, r1, r4, lr}
   b795e:	4604      	mov	r4, r0
    }
   b7960:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7962:	b159      	cbz	r1, b797c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7964:	9101      	str	r1, [sp, #4]
   b7966:	f00c fe92 	bl	c468e <strlen>
   b796a:	6823      	ldr	r3, [r4, #0]
   b796c:	9901      	ldr	r1, [sp, #4]
   b796e:	68db      	ldr	r3, [r3, #12]
   b7970:	4602      	mov	r2, r0
   b7972:	4620      	mov	r0, r4
    }
   b7974:	b002      	add	sp, #8
   b7976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b797a:	4718      	bx	r3
    }
   b797c:	b002      	add	sp, #8
   b797e:	bd10      	pop	{r4, pc}

000b7980 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7980:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b7982:	7803      	ldrb	r3, [r0, #0]
   b7984:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b7986:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7988:	d520      	bpl.n	b79cc <_ZN8FatCache4syncEv+0x4c>
   b798a:	6843      	ldr	r3, [r0, #4]
   b798c:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b798e:	f100 020c 	add.w	r2, r0, #12
   b7992:	6818      	ldr	r0, [r3, #0]
   b7994:	9201      	str	r2, [sp, #4]
   b7996:	f000 fb88 	bl	b80aa <_ZN9SdSpiCard10writeBlockEmPKh>
   b799a:	9a01      	ldr	r2, [sp, #4]
   b799c:	4605      	mov	r5, r0
   b799e:	b918      	cbnz	r0, b79a8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b79a0:	2500      	movs	r5, #0
}
   b79a2:	4628      	mov	r0, r5
   b79a4:	b003      	add	sp, #12
   b79a6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b79a8:	7823      	ldrb	r3, [r4, #0]
   b79aa:	079b      	lsls	r3, r3, #30
   b79ac:	d404      	bmi.n	b79b8 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b79ae:	7823      	ldrb	r3, [r4, #0]
   b79b0:	f023 0301 	bic.w	r3, r3, #1
   b79b4:	7023      	strb	r3, [r4, #0]
   b79b6:	e7f4      	b.n	b79a2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b79b8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b79bc:	6919      	ldr	r1, [r3, #16]
   b79be:	4401      	add	r1, r0
   b79c0:	6818      	ldr	r0, [r3, #0]
   b79c2:	f000 fb72 	bl	b80aa <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b79c6:	2800      	cmp	r0, #0
   b79c8:	d1f1      	bne.n	b79ae <_ZN8FatCache4syncEv+0x2e>
   b79ca:	e7e9      	b.n	b79a0 <_ZN8FatCache4syncEv+0x20>
  return true;
   b79cc:	2501      	movs	r5, #1
   b79ce:	e7e8      	b.n	b79a2 <_ZN8FatCache4syncEv+0x22>

000b79d0 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b79d0:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b79d2:	6883      	ldr	r3, [r0, #8]
   b79d4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b79d6:	4604      	mov	r4, r0
   b79d8:	460e      	mov	r6, r1
   b79da:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b79dc:	d009      	beq.n	b79f2 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b79de:	f7ff ffcf 	bl	b7980 <_ZN8FatCache4syncEv>
   b79e2:	b908      	cbnz	r0, b79e8 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b79e4:	2000      	movs	r0, #0
}
   b79e6:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b79e8:	076b      	lsls	r3, r5, #29
   b79ea:	d50a      	bpl.n	b7a02 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b79ec:	2300      	movs	r3, #0
   b79ee:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b79f0:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b79f2:	7822      	ldrb	r2, [r4, #0]
   b79f4:	f005 0503 	and.w	r5, r5, #3
   b79f8:	4620      	mov	r0, r4
   b79fa:	4315      	orrs	r5, r2
   b79fc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7a00:	e7f1      	b.n	b79e6 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b7a02:	6863      	ldr	r3, [r4, #4]
   b7a04:	f104 020c 	add.w	r2, r4, #12
   b7a08:	6818      	ldr	r0, [r3, #0]
   b7a0a:	4631      	mov	r1, r6
   b7a0c:	f000 fac4 	bl	b7f98 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b7a10:	2800      	cmp	r0, #0
   b7a12:	d1eb      	bne.n	b79ec <_ZN8FatCache4readEmh+0x1c>
   b7a14:	e7e6      	b.n	b79e4 <_ZN8FatCache4readEmh+0x14>

000b7a16 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b7a16:	7983      	ldrb	r3, [r0, #6]
   b7a18:	6940      	ldr	r0, [r0, #20]
   b7a1a:	3902      	subs	r1, #2
   b7a1c:	4099      	lsls	r1, r3
}
   b7a1e:	4408      	add	r0, r1
   b7a20:	4770      	bx	lr

000b7a22 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a22:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b7a24:	b570      	push	{r4, r5, r6, lr}
   b7a26:	4605      	mov	r5, r0
   b7a28:	460c      	mov	r4, r1
   b7a2a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a2c:	d802      	bhi.n	b7a34 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b7a2e:	f04f 30ff 	mov.w	r0, #4294967295
}
   b7a32:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a34:	69c3      	ldr	r3, [r0, #28]
   b7a36:	428b      	cmp	r3, r1
   b7a38:	d3f9      	bcc.n	b7a2e <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b7a3a:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7a3c:	2b20      	cmp	r3, #32
   b7a3e:	d116      	bne.n	b7a6e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b7a40:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7a42:	2202      	movs	r2, #2
   b7a44:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7a48:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7a4c:	f7ff ffc0 	bl	b79d0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7a50:	2800      	cmp	r0, #0
   b7a52:	d0ec      	beq.n	b7a2e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b7a54:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7a58:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b7a5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b7a60:	69ea      	ldr	r2, [r5, #28]
   b7a62:	429a      	cmp	r2, r3
  *value = next;
   b7a64:	bf26      	itte	cs
   b7a66:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7a68:	2001      	movcs	r0, #1
    return 0;
   b7a6a:	2000      	movcc	r0, #0
   b7a6c:	e7e1      	b.n	b7a32 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7a6e:	2b10      	cmp	r3, #16
   b7a70:	d1dd      	bne.n	b7a2e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7a72:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7a76:	6981      	ldr	r1, [r0, #24]
   b7a78:	2202      	movs	r2, #2
   b7a7a:	4419      	add	r1, r3
   b7a7c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7a80:	f7ff ffa6 	bl	b79d0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7a84:	2800      	cmp	r0, #0
   b7a86:	d0d2      	beq.n	b7a2e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7a88:	b2e4      	uxtb	r4, r4
   b7a8a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7a8e:	e7e7      	b.n	b7a60 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7a90 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a90:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b7a92:	b538      	push	{r3, r4, r5, lr}
   b7a94:	460c      	mov	r4, r1
   b7a96:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a98:	d801      	bhi.n	b7a9e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7a9a:	2000      	movs	r0, #0
}
   b7a9c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7a9e:	69c3      	ldr	r3, [r0, #28]
   b7aa0:	428b      	cmp	r3, r1
   b7aa2:	d3fa      	bcc.n	b7a9a <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b7aa4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b7aa6:	2b20      	cmp	r3, #32
   b7aa8:	d10f      	bne.n	b7aca <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7aaa:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7aac:	2203      	movs	r2, #3
   b7aae:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b7ab2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7ab6:	f7ff ff8b 	bl	b79d0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7aba:	2800      	cmp	r0, #0
   b7abc:	d0ed      	beq.n	b7a9a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7abe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b7ac2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b7ac6:	2001      	movs	r0, #1
   b7ac8:	e7e8      	b.n	b7a9c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7aca:	2b10      	cmp	r3, #16
   b7acc:	d1e5      	bne.n	b7a9a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7ace:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b7ad2:	6981      	ldr	r1, [r0, #24]
   b7ad4:	2203      	movs	r2, #3
   b7ad6:	4419      	add	r1, r3
   b7ad8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7adc:	f7ff ff78 	bl	b79d0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7ae0:	2800      	cmp	r0, #0
   b7ae2:	d0da      	beq.n	b7a9a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b7ae4:	b2e4      	uxtb	r4, r4
   b7ae6:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7aea:	e7ec      	b.n	b7ac6 <_ZN9FatVolume6fatPutEmm+0x36>

000b7aec <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7af0:	68c4      	ldr	r4, [r0, #12]
   b7af2:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7af4:	4605      	mov	r5, r0
   b7af6:	460e      	mov	r6, r1
   b7af8:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7afa:	d301      	bcc.n	b7b00 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7afc:	2701      	movs	r7, #1
   b7afe:	e001      	b.n	b7b04 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7b00:	460c      	mov	r4, r1
    setStart = false;
   b7b02:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b7b04:	69eb      	ldr	r3, [r5, #28]
    find++;
   b7b06:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b7b08:	42a3      	cmp	r3, r4
   b7b0a:	d202      	bcs.n	b7b12 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b7b0c:	b9c7      	cbnz	r7, b7b40 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b7b0e:	68ec      	ldr	r4, [r5, #12]
   b7b10:	e7f4      	b.n	b7afc <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b7b12:	42a6      	cmp	r6, r4
   b7b14:	d014      	beq.n	b7b40 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b7b16:	aa01      	add	r2, sp, #4
   b7b18:	4621      	mov	r1, r4
   b7b1a:	4628      	mov	r0, r5
   b7b1c:	f7ff ff81 	bl	b7a22 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7b20:	2800      	cmp	r0, #0
   b7b22:	db0d      	blt.n	b7b40 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b7b24:	d0ee      	beq.n	b7b04 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7b26:	9b01      	ldr	r3, [sp, #4]
   b7b28:	2b00      	cmp	r3, #0
   b7b2a:	d1eb      	bne.n	b7b04 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b7b2c:	b107      	cbz	r7, b7b30 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b7b2e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b7b30:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b7b34:	4621      	mov	r1, r4
   b7b36:	4628      	mov	r0, r5
   b7b38:	f7ff ffaa 	bl	b7a90 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b7b3c:	4607      	mov	r7, r0
   b7b3e:	b920      	cbnz	r0, b7b4a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b7b40:	2700      	movs	r7, #0
}
   b7b42:	4638      	mov	r0, r7
   b7b44:	b002      	add	sp, #8
   b7b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b7b4a:	b916      	cbnz	r6, b7b52 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b7b4c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b7b50:	e7f7      	b.n	b7b42 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b7b52:	4622      	mov	r2, r4
   b7b54:	4631      	mov	r1, r6
   b7b56:	4628      	mov	r0, r5
   b7b58:	f7ff ff9a 	bl	b7a90 <_ZN9FatVolume6fatPutEmm>
   b7b5c:	2800      	cmp	r0, #0
   b7b5e:	d1f5      	bne.n	b7b4c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b7b60:	e7ee      	b.n	b7b40 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b7b62 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b7b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b64:	4605      	mov	r5, r0
   b7b66:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7b68:	aa01      	add	r2, sp, #4
   b7b6a:	4621      	mov	r1, r4
   b7b6c:	4628      	mov	r0, r5
   b7b6e:	f7ff ff58 	bl	b7a22 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b7b72:	1e06      	subs	r6, r0, #0
   b7b74:	db10      	blt.n	b7b98 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b7b76:	2200      	movs	r2, #0
   b7b78:	4621      	mov	r1, r4
   b7b7a:	4628      	mov	r0, r5
   b7b7c:	f7ff ff88 	bl	b7a90 <_ZN9FatVolume6fatPutEmm>
   b7b80:	b150      	cbz	r0, b7b98 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b7b82:	68eb      	ldr	r3, [r5, #12]
   b7b84:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b7b86:	bf24      	itt	cs
   b7b88:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7b8c:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7b8e:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7b90:	2e00      	cmp	r6, #0
   b7b92:	d1e9      	bne.n	b7b68 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b7b94:	b002      	add	sp, #8
   b7b96:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7b98:	2000      	movs	r0, #0
   b7b9a:	e7fb      	b.n	b7b94 <_ZN9FatVolume9freeChainEm+0x32>

000b7b9c <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7b9c:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7b9e:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7ba0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b7ba2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b7ba4:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7ba8:	4604      	mov	r4, r0
  m_fatType = 0;
   b7baa:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7bac:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7bb0:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b7bb2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b7bb6:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7bb8:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7bbc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7bc0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b7bc4:	460d      	mov	r5, r1
   b7bc6:	b1b9      	cbz	r1, b7bf8 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7bc8:	2904      	cmp	r1, #4
   b7bca:	d901      	bls.n	b7bd0 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7bcc:	2000      	movs	r0, #0
}
   b7bce:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7bd0:	4611      	mov	r1, r2
   b7bd2:	4630      	mov	r0, r6
   b7bd4:	f7ff fefc 	bl	b79d0 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7bd8:	2800      	cmp	r0, #0
   b7bda:	d0f7      	beq.n	b7bcc <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7bdc:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7be0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b7be4:	065b      	lsls	r3, r3, #25
   b7be6:	d1f1      	bne.n	b7bcc <_ZN9FatVolume4initEh+0x30>
   b7be8:	f105 011b 	add.w	r1, r5, #27
   b7bec:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7bf0:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b7bf4:	2d00      	cmp	r5, #0
   b7bf6:	d0e9      	beq.n	b7bcc <_ZN9FatVolume4initEh+0x30>
   b7bf8:	2200      	movs	r2, #0
   b7bfa:	4629      	mov	r1, r5
   b7bfc:	4630      	mov	r0, r6
   b7bfe:	f7ff fee7 	bl	b79d0 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7c02:	2800      	cmp	r0, #0
   b7c04:	d0e2      	beq.n	b7bcc <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b7c06:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b7c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b7c0e:	d1dd      	bne.n	b7bcc <_ZN9FatVolume4initEh+0x30>
   b7c10:	7c03      	ldrb	r3, [r0, #16]
   b7c12:	2b02      	cmp	r3, #2
   b7c14:	d1da      	bne.n	b7bcc <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b7c16:	89c3      	ldrh	r3, [r0, #14]
   b7c18:	2b00      	cmp	r3, #0
   b7c1a:	d0d7      	beq.n	b7bcc <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b7c1c:	7b41      	ldrb	r1, [r0, #13]
   b7c1e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b7c20:	1e4b      	subs	r3, r1, #1
   b7c22:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b7c24:	2300      	movs	r3, #0
   b7c26:	71a3      	strb	r3, [r4, #6]
   b7c28:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7c2a:	2301      	movs	r3, #1
   b7c2c:	4299      	cmp	r1, r3
   b7c2e:	d007      	beq.n	b7c40 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b7c30:	3e01      	subs	r6, #1
   b7c32:	d0cb      	beq.n	b7bcc <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b7c34:	79a2      	ldrb	r2, [r4, #6]
   b7c36:	005b      	lsls	r3, r3, #1
   b7c38:	3201      	adds	r2, #1
   b7c3a:	b2db      	uxtb	r3, r3
   b7c3c:	71a2      	strb	r2, [r4, #6]
   b7c3e:	e7f5      	b.n	b7c2c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b7c40:	8ac1      	ldrh	r1, [r0, #22]
   b7c42:	b901      	cbnz	r1, b7c46 <_ZN9FatVolume4initEh+0xaa>
   b7c44:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b7c46:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b7c48:	89c3      	ldrh	r3, [r0, #14]
   b7c4a:	442b      	add	r3, r5
   b7c4c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b7c4e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b7c52:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b7c54:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b7c58:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b7c5a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b7c5e:	0149      	lsls	r1, r1, #5
   b7c60:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b7c64:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7c68:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7c6a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7c6e:	b902      	cbnz	r2, b7c72 <_ZN9FatVolume4initEh+0xd6>
   b7c70:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7c72:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b7c74:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b7c76:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7c78:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7c7a:	1c4b      	adds	r3, r1, #1
   b7c7c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7c7e:	f640 73f4 	movw	r3, #4084	; 0xff4
   b7c82:	4299      	cmp	r1, r3
   b7c84:	d802      	bhi.n	b7c8c <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b7c86:	230c      	movs	r3, #12
   b7c88:	71e3      	strb	r3, [r4, #7]
   b7c8a:	e79f      	b.n	b7bcc <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7c8c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7c90:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b7c92:	bf85      	ittet	hi
   b7c94:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b7c96:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7c98:	2310      	movls	r3, #16
    m_fatType = 32;
   b7c9a:	2320      	movhi	r3, #32
   b7c9c:	71e3      	strb	r3, [r4, #7]
  return true;
   b7c9e:	2001      	movs	r0, #1
   b7ca0:	e795      	b.n	b7bce <_ZN9FatVolume4initEh+0x32>

000b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b7ca2:	f000 bacb 	b.w	b823c <_ZN14SdSpiAltDriver4sendEh>

000b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b7ca6:	f000 baae 	b.w	b8206 <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7cac <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7cac:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7cae:	4e0e      	ldr	r6, [pc, #56]	; (b7ce8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7cb0:	460d      	mov	r5, r1
   b7cb2:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b7cb4:	f005 ff7e 	bl	bdbb4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7cb8:	6833      	ldr	r3, [r6, #0]
   b7cba:	1ac0      	subs	r0, r0, r3
   b7cbc:	4b0b      	ldr	r3, [pc, #44]	; (b7cec <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7cbe:	4298      	cmp	r0, r3
   b7cc0:	d908      	bls.n	b7cd4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7cc2:	f005 ff7f 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7cc6:	4b0a      	ldr	r3, [pc, #40]	; (b7cf0 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7cc8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7cca:	f006 faab 	bl	be224 <spark_process>
   b7cce:	f005 ff71 	bl	bdbb4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b7cd2:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7cd4:	f005 ff76 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7cd8:	b280      	uxth	r0, r0
   b7cda:	1b40      	subs	r0, r0, r5
}
   b7cdc:	42a0      	cmp	r0, r4
   b7cde:	bfd4      	ite	le
   b7ce0:	2000      	movle	r0, #0
   b7ce2:	2001      	movgt	r0, #1
   b7ce4:	bd70      	pop	{r4, r5, r6, pc}
   b7ce6:	bf00      	nop
   b7ce8:	2003e614 	.word	0x2003e614
   b7cec:	000186a0 	.word	0x000186a0
   b7cf0:	2003e740 	.word	0x2003e740

000b7cf4 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b7cf4:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b7cf6:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7cf8:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7cfa:	b94d      	cbnz	r5, b7d10 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7cfc:	6840      	ldr	r0, [r0, #4]
   b7cfe:	f000 fa6b 	bl	b81d8 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b7d02:	6863      	ldr	r3, [r4, #4]
   b7d04:	4629      	mov	r1, r5
   b7d06:	7d18      	ldrb	r0, [r3, #20]
   b7d08:	f00a f94d 	bl	c1fa6 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b7d0c:	2301      	movs	r3, #1
   b7d0e:	7223      	strb	r3, [r4, #8]
  }
}
   b7d10:	bd38      	pop	{r3, r4, r5, pc}

000b7d12 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b7d12:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b7d14:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b7d16:	4604      	mov	r4, r0
  if (m_spiActive) {
   b7d18:	b16b      	cbz	r3, b7d36 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b7d1a:	6843      	ldr	r3, [r0, #4]
   b7d1c:	2101      	movs	r1, #1
   b7d1e:	7d18      	ldrb	r0, [r3, #20]
   b7d20:	f00a f941 	bl	c1fa6 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b7d24:	6860      	ldr	r0, [r4, #4]
   b7d26:	21ff      	movs	r1, #255	; 0xff
   b7d28:	f7ff ffbb 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b7d2c:	6860      	ldr	r0, [r4, #4]
   b7d2e:	f000 fa67 	bl	b8200 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b7d32:	2300      	movs	r3, #0
   b7d34:	7223      	strb	r3, [r4, #8]
  }
}
   b7d36:	bd10      	pop	{r4, pc}

000b7d38 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b7d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d3a:	4604      	mov	r4, r0
   b7d3c:	460d      	mov	r5, r1
   b7d3e:	4616      	mov	r6, r2
   b7d40:	f005 ff40 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b7d44:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b7d46:	6860      	ldr	r0, [r4, #4]
   b7d48:	f7ff ffad 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7d4c:	28ff      	cmp	r0, #255	; 0xff
   b7d4e:	7260      	strb	r0, [r4, #9]
   b7d50:	d10e      	bne.n	b7d70 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b7d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7d56:	4639      	mov	r1, r7
   b7d58:	4620      	mov	r0, r4
   b7d5a:	f7ff ffa7 	bl	b7cac <_ZN9SdSpiCard10isTimedOutEtt>
   b7d5e:	2800      	cmp	r0, #0
   b7d60:	d0f1      	beq.n	b7d46 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b7d62:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b7d64:	4620      	mov	r0, r4
   b7d66:	7023      	strb	r3, [r4, #0]
   b7d68:	f7ff ffd3 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d6c:	2000      	movs	r0, #0
}
   b7d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7d70:	28fe      	cmp	r0, #254	; 0xfe
   b7d72:	d001      	beq.n	b7d78 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7d74:	2350      	movs	r3, #80	; 0x50
   b7d76:	e7f5      	b.n	b7d64 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7d78:	6860      	ldr	r0, [r4, #4]
   b7d7a:	4632      	mov	r2, r6
   b7d7c:	4629      	mov	r1, r5
   b7d7e:	f000 fa47 	bl	b8210 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7d82:	7260      	strb	r0, [r4, #9]
   b7d84:	b108      	cbz	r0, b7d8a <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7d86:	2360      	movs	r3, #96	; 0x60
   b7d88:	e7ec      	b.n	b7d64 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7d8a:	6860      	ldr	r0, [r4, #4]
   b7d8c:	f7ff ff8b 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7d90:	6860      	ldr	r0, [r4, #4]
   b7d92:	f7ff ff88 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7d96:	2001      	movs	r0, #1
   b7d98:	e7e9      	b.n	b7d6e <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7d9a <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7d9a:	b570      	push	{r4, r5, r6, lr}
   b7d9c:	4604      	mov	r4, r0
   b7d9e:	460e      	mov	r6, r1
   b7da0:	f005 ff10 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   b7da4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7da6:	4632      	mov	r2, r6
   b7da8:	4629      	mov	r1, r5
   b7daa:	4620      	mov	r0, r4
   b7dac:	f7ff ff7e 	bl	b7cac <_ZN9SdSpiCard10isTimedOutEtt>
   b7db0:	b930      	cbnz	r0, b7dc0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7db2:	6860      	ldr	r0, [r4, #4]
   b7db4:	f7ff ff77 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7db8:	28ff      	cmp	r0, #255	; 0xff
   b7dba:	d1f4      	bne.n	b7da6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7dbc:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7dbe:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7dc0:	2000      	movs	r0, #0
   b7dc2:	e7fc      	b.n	b7dbe <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7dc4 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7dc6:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7dc8:	9201      	str	r2, [sp, #4]
   b7dca:	4604      	mov	r4, r0
   b7dcc:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7dce:	b90b      	cbnz	r3, b7dd4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7dd0:	f7ff ff90 	bl	b7cf4 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7dd4:	b125      	cbz	r5, b7de0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7dd6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7dda:	4620      	mov	r0, r4
   b7ddc:	f7ff ffdd 	bl	b7d9a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7de0:	6860      	ldr	r0, [r4, #4]
   b7de2:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7de6:	f7ff ff5c 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7dea:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7dec:	af01      	add	r7, sp, #4
   b7dee:	5db9      	ldrb	r1, [r7, r6]
   b7df0:	6860      	ldr	r0, [r4, #4]
   b7df2:	f7ff ff56 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7df6:	3e01      	subs	r6, #1
   b7df8:	d2f9      	bcs.n	b7dee <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7dfa:	2d00      	cmp	r5, #0
   b7dfc:	6860      	ldr	r0, [r4, #4]
   b7dfe:	bf0c      	ite	eq
   b7e00:	2195      	moveq	r1, #149	; 0x95
   b7e02:	2187      	movne	r1, #135	; 0x87
   b7e04:	f7ff ff4d 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7e08:	6860      	ldr	r0, [r4, #4]
   b7e0a:	f7ff ff4c 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e0e:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7e10:	6860      	ldr	r0, [r4, #4]
   b7e12:	f7ff ff48 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7e16:	0603      	lsls	r3, r0, #24
   b7e18:	7260      	strb	r0, [r4, #9]
   b7e1a:	d503      	bpl.n	b7e24 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7e1c:	3d01      	subs	r5, #1
   b7e1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7e22:	d1f5      	bne.n	b7e10 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7e24:	b003      	add	sp, #12
   b7e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e28 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7e28:	b570      	push	{r4, r5, r6, lr}
   b7e2a:	4604      	mov	r4, r0
   b7e2c:	460d      	mov	r5, r1
   b7e2e:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7e30:	2137      	movs	r1, #55	; 0x37
   b7e32:	2200      	movs	r2, #0
   b7e34:	f7ff ffc6 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7e38:	4632      	mov	r2, r6
   b7e3a:	4629      	mov	r1, r5
   b7e3c:	4620      	mov	r0, r4
  }
   b7e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7e42:	f7ff bfbf 	b.w	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7e48 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7e4c:	2500      	movs	r5, #0
   b7e4e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7e50:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7e52:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7e54:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7e56:	4604      	mov	r4, r0
   b7e58:	4690      	mov	r8, r2
   b7e5a:	461e      	mov	r6, r3
   b7e5c:	f005 feb2 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7e60:	4641      	mov	r1, r8
   b7e62:	4607      	mov	r7, r0
   b7e64:	6860      	ldr	r0, [r4, #4]
   b7e66:	f000 f9bb 	bl	b81e0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7e6a:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7e6c:	4a49      	ldr	r2, [pc, #292]	; (b7f94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7e6e:	721d      	strb	r5, [r3, #8]
   b7e70:	2501      	movs	r5, #1
   b7e72:	60da      	str	r2, [r3, #12]
   b7e74:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7e76:	4620      	mov	r0, r4
   b7e78:	f7ff ff3c 	bl	b7cf4 <_ZN9SdSpiCard8spiStartEv>
   b7e7c:	6863      	ldr	r3, [r4, #4]
   b7e7e:	4629      	mov	r1, r5
   b7e80:	7d18      	ldrb	r0, [r3, #20]
   b7e82:	f00a f890 	bl	c1fa6 <digitalWrite>
   b7e86:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7e88:	6860      	ldr	r0, [r4, #4]
   b7e8a:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7e8c:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7e8e:	f7ff ff08 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7e92:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7e96:	d1f7      	bne.n	b7e88 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7e98:	6863      	ldr	r3, [r4, #4]
   b7e9a:	4629      	mov	r1, r5
   b7e9c:	7d18      	ldrb	r0, [r3, #20]
   b7e9e:	f00a f882 	bl	c1fa6 <digitalWrite>
  }
   b7ea2:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7ea4:	2200      	movs	r2, #0
   b7ea6:	4611      	mov	r1, r2
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	f7ff ff8b 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b7eae:	2801      	cmp	r0, #1
   b7eb0:	4680      	mov	r8, r0
   b7eb2:	d018      	beq.n	b7ee6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7eb4:	3d01      	subs	r5, #1
   b7eb6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7eba:	d107      	bne.n	b7ecc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7ebc:	2320      	movs	r3, #32
  spiStop();
   b7ebe:	4620      	mov	r0, r4
   b7ec0:	7023      	strb	r3, [r4, #0]
   b7ec2:	f7ff ff26 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ec6:	2000      	movs	r0, #0
}
   b7ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7ecc:	6860      	ldr	r0, [r4, #4]
   b7ece:	21fd      	movs	r1, #253	; 0xfd
   b7ed0:	f7ff fee7 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7ed4:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7ed8:	6860      	ldr	r0, [r4, #4]
   b7eda:	f7ff fee4 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7ede:	f1b8 0801 	subs.w	r8, r8, #1
   b7ee2:	d1f9      	bne.n	b7ed8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7ee4:	e7de      	b.n	b7ea4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7ee6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7eea:	2108      	movs	r1, #8
   b7eec:	4620      	mov	r0, r4
   b7eee:	f7ff ff69 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b7ef2:	2805      	cmp	r0, #5
   b7ef4:	d114      	bne.n	b7f20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7ef6:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7efa:	2500      	movs	r5, #0
   b7efc:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7efe:	462a      	mov	r2, r5
   b7f00:	2129      	movs	r1, #41	; 0x29
   b7f02:	4620      	mov	r0, r4
   b7f04:	f7ff ff90 	bl	b7e28 <_ZN9SdSpiCard8cardAcmdEhm>
   b7f08:	4602      	mov	r2, r0
   b7f0a:	b1d8      	cbz	r0, b7f44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7f0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7f10:	4639      	mov	r1, r7
   b7f12:	4620      	mov	r0, r4
   b7f14:	f7ff feca 	bl	b7cac <_ZN9SdSpiCard10isTimedOutEtt>
   b7f18:	2800      	cmp	r0, #0
   b7f1a:	d0f0      	beq.n	b7efe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7f1c:	2343      	movs	r3, #67	; 0x43
   b7f1e:	e7ce      	b.n	b7ebe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7f20:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7f22:	6860      	ldr	r0, [r4, #4]
   b7f24:	f7ff febf 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7f28:	3d01      	subs	r5, #1
   b7f2a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7f2e:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7f30:	d1f7      	bne.n	b7f22 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7f32:	28aa      	cmp	r0, #170	; 0xaa
   b7f34:	d104      	bne.n	b7f40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7f36:	2302      	movs	r3, #2
   b7f38:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7f3a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7f3e:	e7dd      	b.n	b7efc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7f40:	2325      	movs	r3, #37	; 0x25
   b7f42:	e7bc      	b.n	b7ebe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7f44:	7aa3      	ldrb	r3, [r4, #10]
   b7f46:	2b02      	cmp	r3, #2
   b7f48:	d118      	bne.n	b7f7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7f4a:	213a      	movs	r1, #58	; 0x3a
   b7f4c:	4620      	mov	r0, r4
   b7f4e:	f7ff ff39 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b7f52:	b108      	cbz	r0, b7f58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7f54:	2337      	movs	r3, #55	; 0x37
   b7f56:	e7b2      	b.n	b7ebe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7f58:	6860      	ldr	r0, [r4, #4]
   b7f5a:	f7ff fea4 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f5e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7f62:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7f64:	bf04      	itt	eq
   b7f66:	2303      	moveq	r3, #3
   b7f68:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7f6a:	6860      	ldr	r0, [r4, #4]
   b7f6c:	f7ff fe9b 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f70:	6860      	ldr	r0, [r4, #4]
   b7f72:	f7ff fe98 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7f76:	6860      	ldr	r0, [r4, #4]
   b7f78:	f7ff fe95 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7f7c:	4620      	mov	r0, r4
   b7f7e:	f7ff fec8 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7f82:	6863      	ldr	r3, [r4, #4]
   b7f84:	7930      	ldrb	r0, [r6, #4]
   b7f86:	68b1      	ldr	r1, [r6, #8]
   b7f88:	89b2      	ldrh	r2, [r6, #12]
   b7f8a:	821a      	strh	r2, [r3, #16]
   b7f8c:	7218      	strb	r0, [r3, #8]
   b7f8e:	60d9      	str	r1, [r3, #12]
  return true;
   b7f90:	2001      	movs	r0, #1
   b7f92:	e799      	b.n	b7ec8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7f94:	0003d090 	.word	0x0003d090

000b7f98 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7f98:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7f9a:	7a83      	ldrb	r3, [r0, #10]
   b7f9c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7f9e:	bf18      	it	ne
   b7fa0:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7fa2:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7fa4:	460a      	mov	r2, r1
   b7fa6:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7fa8:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7faa:	f7ff ff0b 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b7fae:	b130      	cbz	r0, b7fbe <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7fb0:	2330      	movs	r3, #48	; 0x30
   b7fb2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	f7ff feac 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7fba:	2500      	movs	r5, #0
   b7fbc:	e00b      	b.n	b7fd6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7fbe:	4629      	mov	r1, r5
   b7fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7fc4:	4620      	mov	r0, r4
   b7fc6:	f7ff feb7 	bl	b7d38 <_ZN9SdSpiCard8readDataEPhj>
   b7fca:	4605      	mov	r5, r0
   b7fcc:	2800      	cmp	r0, #0
   b7fce:	d0f1      	beq.n	b7fb4 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	f7ff fe9e 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
}
   b7fd6:	4628      	mov	r0, r5
   b7fd8:	bd38      	pop	{r3, r4, r5, pc}

000b7fda <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7fda:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7fdc:	7a83      	ldrb	r3, [r0, #10]
   b7fde:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7fe0:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7fe2:	bf18      	it	ne
   b7fe4:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7fe6:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7fe8:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7fea:	f7ff feeb 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b7fee:	b130      	cbz	r0, b7ffe <_ZN9SdSpiCard9readStartEm+0x24>
   b7ff0:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7ff2:	4620      	mov	r0, r4
   b7ff4:	7023      	strb	r3, [r4, #0]
   b7ff6:	f7ff fe8c 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7ffa:	2000      	movs	r0, #0
}
   b7ffc:	bd10      	pop	{r4, pc}
  return true;
   b7ffe:	2001      	movs	r0, #1
   b8000:	e7fc      	b.n	b7ffc <_ZN9SdSpiCard9readStartEm+0x22>

000b8002 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b8002:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b8004:	2200      	movs	r2, #0
   b8006:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b8008:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b800a:	f7ff fedb 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b800e:	b130      	cbz	r0, b801e <_ZN9SdSpiCard8readStopEv+0x1c>
   b8010:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b8012:	4620      	mov	r0, r4
   b8014:	7023      	strb	r3, [r4, #0]
   b8016:	f7ff fe7c 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b801a:	2000      	movs	r0, #0
}
   b801c:	bd10      	pop	{r4, pc}
  spiStop();
   b801e:	4620      	mov	r0, r4
   b8020:	f7ff fe77 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b8024:	2001      	movs	r0, #1
   b8026:	e7f9      	b.n	b801c <_ZN9SdSpiCard8readStopEv+0x1a>

000b8028 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b8028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b802a:	4604      	mov	r4, r0
   b802c:	4616      	mov	r6, r2
   b802e:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b8030:	f7ff ffd3 	bl	b7fda <_ZN9SdSpiCard9readStartEm>
   b8034:	b168      	cbz	r0, b8052 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b8036:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b8038:	b2ab      	uxth	r3, r5
   b803a:	429f      	cmp	r7, r3
   b803c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b8040:	d909      	bls.n	b8056 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b8042:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8046:	4620      	mov	r0, r4
   b8048:	f7ff fe76 	bl	b7d38 <_ZN9SdSpiCard8readDataEPhj>
   b804c:	3501      	adds	r5, #1
   b804e:	2800      	cmp	r0, #0
   b8050:	d1f2      	bne.n	b8038 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b8052:	2000      	movs	r0, #0
   b8054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b8056:	4620      	mov	r0, r4
}
   b8058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b805c:	f7ff bfd1 	b.w	b8002 <_ZN9SdSpiCard8readStopEv>

000b8060 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b8060:	b538      	push	{r3, r4, r5, lr}
   b8062:	4604      	mov	r4, r0
   b8064:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b8066:	6840      	ldr	r0, [r0, #4]
   b8068:	f7ff fe1b 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b806c:	f44f 7200 	mov.w	r2, #512	; 0x200
   b8070:	6860      	ldr	r0, [r4, #4]
   b8072:	4629      	mov	r1, r5
   b8074:	f000 f8e6 	bl	b8244 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b8078:	6860      	ldr	r0, [r4, #4]
   b807a:	21ff      	movs	r1, #255	; 0xff
   b807c:	f7ff fe11 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b8080:	6860      	ldr	r0, [r4, #4]
   b8082:	21ff      	movs	r1, #255	; 0xff
   b8084:	f7ff fe0d 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b8088:	6860      	ldr	r0, [r4, #4]
   b808a:	f7ff fe0c 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b808e:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b8090:	f000 001f 	and.w	r0, r0, #31
   b8094:	2805      	cmp	r0, #5
   b8096:	d006      	beq.n	b80a6 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b8098:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b809a:	4620      	mov	r0, r4
   b809c:	7023      	strb	r3, [r4, #0]
   b809e:	f7ff fe38 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b80a2:	2000      	movs	r0, #0
}
   b80a4:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b80a6:	2001      	movs	r0, #1
   b80a8:	e7fc      	b.n	b80a4 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b80aa <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b80aa:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b80ac:	7a83      	ldrb	r3, [r0, #10]
   b80ae:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b80b0:	bf18      	it	ne
   b80b2:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b80b4:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b80b6:	460a      	mov	r2, r1
   b80b8:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b80ba:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b80bc:	f7ff fe82 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b80c0:	4606      	mov	r6, r0
   b80c2:	b130      	cbz	r0, b80d2 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b80c4:	2332      	movs	r3, #50	; 0x32
   b80c6:	7023      	strb	r3, [r4, #0]
  spiStop();
   b80c8:	4620      	mov	r0, r4
   b80ca:	f7ff fe22 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b80ce:	2500      	movs	r5, #0
   b80d0:	e01f      	b.n	b8112 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b80d2:	462a      	mov	r2, r5
   b80d4:	21fe      	movs	r1, #254	; 0xfe
   b80d6:	4620      	mov	r0, r4
   b80d8:	f7ff ffc2 	bl	b8060 <_ZN9SdSpiCard9writeDataEhPKh>
   b80dc:	2800      	cmp	r0, #0
   b80de:	d0f3      	beq.n	b80c8 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b80e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b80e4:	4620      	mov	r0, r4
   b80e6:	f7ff fe58 	bl	b7d9a <_ZN9SdSpiCard11waitNotBusyEt>
   b80ea:	4605      	mov	r5, r0
   b80ec:	b908      	cbnz	r0, b80f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b80ee:	235a      	movs	r3, #90	; 0x5a
   b80f0:	e7e9      	b.n	b80c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b80f2:	4632      	mov	r2, r6
   b80f4:	210d      	movs	r1, #13
   b80f6:	4620      	mov	r0, r4
   b80f8:	f7ff fe64 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b80fc:	b108      	cbz	r0, b8102 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b80fe:	2329      	movs	r3, #41	; 0x29
   b8100:	e7e1      	b.n	b80c6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b8102:	6860      	ldr	r0, [r4, #4]
   b8104:	f7ff fdcf 	bl	b7ca6 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b8108:	2800      	cmp	r0, #0
   b810a:	d1f8      	bne.n	b80fe <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b810c:	4620      	mov	r0, r4
   b810e:	f7ff fe00 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
}
   b8112:	4628      	mov	r0, r5
   b8114:	bd70      	pop	{r4, r5, r6, pc}

000b8116 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b8116:	b513      	push	{r0, r1, r4, lr}
   b8118:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b811a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b811e:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8120:	f7ff fe3b 	bl	b7d9a <_ZN9SdSpiCard11waitNotBusyEt>
   b8124:	9a01      	ldr	r2, [sp, #4]
   b8126:	b930      	cbnz	r0, b8136 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b8128:	235b      	movs	r3, #91	; 0x5b
   b812a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b812c:	4620      	mov	r0, r4
   b812e:	f7ff fdf0 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8132:	2000      	movs	r0, #0
   b8134:	e005      	b.n	b8142 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b8136:	21fc      	movs	r1, #252	; 0xfc
   b8138:	4620      	mov	r0, r4
   b813a:	f7ff ff91 	bl	b8060 <_ZN9SdSpiCard9writeDataEhPKh>
   b813e:	2800      	cmp	r0, #0
   b8140:	d0f4      	beq.n	b812c <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b8142:	b002      	add	sp, #8
   b8144:	bd10      	pop	{r4, pc}

000b8146 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8146:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b8148:	7a83      	ldrb	r3, [r0, #10]
   b814a:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b814c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b814e:	bf18      	it	ne
   b8150:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b8152:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b8154:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b8156:	f7ff fe35 	bl	b7dc4 <_ZN9SdSpiCard11cardCommandEhm>
   b815a:	b130      	cbz	r0, b816a <_ZN9SdSpiCard10writeStartEm+0x24>
   b815c:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b815e:	4620      	mov	r0, r4
   b8160:	7023      	strb	r3, [r4, #0]
   b8162:	f7ff fdd6 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b8166:	2000      	movs	r0, #0
}
   b8168:	bd10      	pop	{r4, pc}
  return true;
   b816a:	2001      	movs	r0, #1
   b816c:	e7fc      	b.n	b8168 <_ZN9SdSpiCard10writeStartEm+0x22>

000b816e <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b816e:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8170:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b8174:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b8176:	f7ff fe10 	bl	b7d9a <_ZN9SdSpiCard11waitNotBusyEt>
   b817a:	4605      	mov	r5, r0
   b817c:	b930      	cbnz	r0, b818c <_ZN9SdSpiCard9writeStopEv+0x1e>
   b817e:	2356      	movs	r3, #86	; 0x56
   b8180:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b8182:	4620      	mov	r0, r4
   b8184:	f7ff fdc5 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b8188:	4628      	mov	r0, r5
   b818a:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b818c:	6860      	ldr	r0, [r4, #4]
   b818e:	21fd      	movs	r1, #253	; 0xfd
   b8190:	f7ff fd87 	bl	b7ca2 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b8194:	e7f5      	b.n	b8182 <_ZN9SdSpiCard9writeStopEv+0x14>

000b8196 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b8196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8198:	4604      	mov	r4, r0
   b819a:	4616      	mov	r6, r2
   b819c:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b819e:	f7ff ffd2 	bl	b8146 <_ZN9SdSpiCard10writeStartEm>
   b81a2:	b170      	cbz	r0, b81c2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b81a4:	2500      	movs	r5, #0
   b81a6:	42bd      	cmp	r5, r7
   b81a8:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b81ac:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b81ae:	d004      	beq.n	b81ba <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b81b0:	f7ff ffb1 	bl	b8116 <_ZN9SdSpiCard9writeDataEPKh>
   b81b4:	b128      	cbz	r0, b81c2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b81b6:	3501      	adds	r5, #1
   b81b8:	e7f5      	b.n	b81a6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b81ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b81be:	f7ff bfd6 	b.w	b816e <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b81c2:	4620      	mov	r0, r4
   b81c4:	f7ff fda5 	bl	b7d12 <_ZN9SdSpiCard7spiStopEv>
}
   b81c8:	2000      	movs	r0, #0
   b81ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b81cc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b81cc:	4b01      	ldr	r3, [pc, #4]	; (b81d4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b81ce:	2201      	movs	r2, #1
   b81d0:	701a      	strb	r2, [r3, #0]
}
   b81d2:	4770      	bx	lr
   b81d4:	2003e618 	.word	0x2003e618

000b81d8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b81d8:	1d01      	adds	r1, r0, #4
   b81da:	6800      	ldr	r0, [r0, #0]
   b81dc:	f006 b95e 	b.w	be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b81e0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b81e0:	b510      	push	{r4, lr}
   b81e2:	4604      	mov	r4, r0
  m_csPin = csPin;
   b81e4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b81e6:	6800      	ldr	r0, [r0, #0]
   b81e8:	f006 f92a 	bl	be440 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b81ec:	7d20      	ldrb	r0, [r4, #20]
   b81ee:	2101      	movs	r1, #1
   b81f0:	f009 fec8 	bl	c1f84 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b81f4:	7d20      	ldrb	r0, [r4, #20]
   b81f6:	2101      	movs	r1, #1
}
   b81f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b81fc:	f009 bed3 	b.w	c1fa6 <digitalWrite>

000b8200 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b8200:	6800      	ldr	r0, [r0, #0]
   b8202:	f006 b931 	b.w	be468 <_ZN8SPIClass14endTransactionEv>

000b8206 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b8206:	6800      	ldr	r0, [r0, #0]
   b8208:	21ff      	movs	r1, #255	; 0xff
   b820a:	f006 b9b5 	b.w	be578 <_ZN8SPIClass8transferEh>
	...

000b8210 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b8210:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8212:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8214:	4a07      	ldr	r2, [pc, #28]	; (b8234 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b8216:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b8218:	2500      	movs	r5, #0
   b821a:	4c07      	ldr	r4, [pc, #28]	; (b8238 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b821c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b821e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b8220:	460a      	mov	r2, r1
   b8222:	4629      	mov	r1, r5
   b8224:	f006 f9ae 	bl	be584 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b8228:	7823      	ldrb	r3, [r4, #0]
   b822a:	2b00      	cmp	r3, #0
   b822c:	d0fc      	beq.n	b8228 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b822e:	2000      	movs	r0, #0
   b8230:	b003      	add	sp, #12
   b8232:	bd30      	pop	{r4, r5, pc}
   b8234:	000b81cd 	.word	0x000b81cd
   b8238:	2003e618 	.word	0x2003e618

000b823c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b823c:	6800      	ldr	r0, [r0, #0]
   b823e:	f006 b99b 	b.w	be578 <_ZN8SPIClass8transferEh>
	...

000b8244 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b8244:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8246:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8248:	4a06      	ldr	r2, [pc, #24]	; (b8264 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b824a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b824c:	2500      	movs	r5, #0
   b824e:	4c06      	ldr	r4, [pc, #24]	; (b8268 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8250:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b8252:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b8254:	462a      	mov	r2, r5
   b8256:	f006 f995 	bl	be584 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b825a:	7823      	ldrb	r3, [r4, #0]
   b825c:	2b00      	cmp	r3, #0
   b825e:	d0fc      	beq.n	b825a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b8260:	b003      	add	sp, #12
   b8262:	bd30      	pop	{r4, r5, pc}
   b8264:	000b81cd 	.word	0x000b81cd
   b8268:	2003e618 	.word	0x2003e618

000b826c <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   b826c:	4770      	bx	lr

000b826e <_ZN16Adafruit_LIS3MDLD1Ev>:
  LIS3MDL_SINGLEMODE = 0b01,     ///< Single-shot conversion
  LIS3MDL_POWERDOWNMODE = 0b11,  ///< Powered-down mode
} lis3mdl_operationmode_t;

/** Class for hardware interfacing with an LIS3MDL magnetometer */
class Adafruit_LIS3MDL : public Adafruit_Sensor {
   b826e:	4770      	bx	lr

000b8270 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t>:
    @brief  Gets the sensor_t device data, Adafruit Unified Sensor format
    @param  sensor Pointer to an Adafruit Unified sensor_t object that we'll
   fill in
*/
/**************************************************************************/
void Adafruit_LIS3MDL::getSensor(sensor_t *sensor) {
   b8270:	b538      	push	{r3, r4, r5, lr}
   b8272:	460c      	mov	r4, r1
   b8274:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   b8276:	2220      	movs	r2, #32
   b8278:	2100      	movs	r1, #0
   b827a:	f104 0008 	add.w	r0, r4, #8
   b827e:	f00c f97b 	bl	c4578 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "LIS3MDL", sizeof(sensor->name) - 1);
   b8282:	4909      	ldr	r1, [pc, #36]	; (b82a8 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x38>)
   b8284:	220b      	movs	r2, #11
   b8286:	4620      	mov	r0, r4
   b8288:	f00c fa30 	bl	c46ec <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   b828c:	2301      	movs	r3, #1
   b828e:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   b8290:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b8292:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b8294:	2302      	movs	r3, #2
   b8296:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -1600;  // -16 gauss in uTesla
   b8298:	4b04      	ldr	r3, [pc, #16]	; (b82ac <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x3c>)
   b829a:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1600;   // +16 gauss in uTesla
   b829c:	4b04      	ldr	r3, [pc, #16]	; (b82b0 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x40>)
   b829e:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.015; // 100/6842 uTesla per LSB at +-4 gauss range
   b82a0:	4b04      	ldr	r3, [pc, #16]	; (b82b4 <_ZN16Adafruit_LIS3MDL9getSensorEP8sensor_t+0x44>)
   b82a2:	6223      	str	r3, [r4, #32]
}
   b82a4:	bd38      	pop	{r3, r4, r5, pc}
   b82a6:	bf00      	nop
   b82a8:	000c6ea0 	.word	0x000c6ea0
   b82ac:	c4c80000 	.word	0xc4c80000
   b82b0:	44c80000 	.word	0x44c80000
   b82b4:	3c75c28f 	.word	0x3c75c28f

000b82b8 <_ZN16Adafruit_LIS3MDLD0Ev>:
   b82b8:	b510      	push	{r4, lr}
   b82ba:	2128      	movs	r1, #40	; 0x28
   b82bc:	4604      	mov	r4, r0
   b82be:	f7fb fef0 	bl	b40a2 <_ZdlPvj>
   b82c2:	4620      	mov	r0, r4
   b82c4:	bd10      	pop	{r4, pc}
	...

000b82c8 <_ZN16Adafruit_LIS3MDLC1Ev>:
Adafruit_LIS3MDL::Adafruit_LIS3MDL() {}
   b82c8:	4a03      	ldr	r2, [pc, #12]	; (b82d8 <_ZN16Adafruit_LIS3MDLC1Ev+0x10>)
   b82ca:	6002      	str	r2, [r0, #0]
   b82cc:	2200      	movs	r2, #0
   b82ce:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b82d2:	7602      	strb	r2, [r0, #24]
   b82d4:	4770      	bx	lr
   b82d6:	bf00      	nop
   b82d8:	000c6ec0 	.word	0x000c6ec0

000b82dc <_ZN16Adafruit_LIS3MDL4readEv>:
void Adafruit_LIS3MDL::read(void) {
   b82dc:	b530      	push	{r4, r5, lr}
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b82de:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::read(void) {
   b82e0:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b82e2:	2200      	movs	r2, #0
   b82e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b82e8:	2506      	movs	r5, #6
   b82ea:	2228      	movs	r2, #40	; 0x28
   b82ec:	e9cd 2500 	strd	r2, r5, [sp]
void Adafruit_LIS3MDL::read(void) {
   b82f0:	4604      	mov	r4, r0
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_OUT_X_L, 6);
   b82f2:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b82f6:	a806      	add	r0, sp, #24
   b82f8:	f005 f91a 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  XYZDataReg.read(buffer, 6);
   b82fc:	462a      	mov	r2, r5
   b82fe:	a904      	add	r1, sp, #16
   b8300:	a806      	add	r0, sp, #24
   b8302:	f005 f993 	bl	bd62c <_ZN23Adafruit_BusIO_Register4readEPhh>
  switch (rangeBuffered) {
   b8306:	7e25      	ldrb	r5, [r4, #24]
  x |= buffer[1] << 8;
   b8308:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
  y |= buffer[3] << 8;
   b830c:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  z |= buffer[5] << 8;
   b8310:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  x |= buffer[1] << 8;
   b8314:	80e1      	strh	r1, [r4, #6]
  y |= buffer[3] << 8;
   b8316:	2d03      	cmp	r5, #3
   b8318:	bf98      	it	ls
   b831a:	4812      	ldrls	r0, [pc, #72]	; (b8364 <_ZN16Adafruit_LIS3MDL4readEv+0x88>)
   b831c:	8122      	strh	r2, [r4, #8]
  x_gauss = (float)x / scale;
   b831e:	ee07 1a10 	vmov	s14, r1
   b8322:	bf9c      	itt	ls
   b8324:	eb00 0085 	addls.w	r0, r0, r5, lsl #2
   b8328:	edd0 7a00 	vldrls	s15, [r0]
  z |= buffer[5] << 8;
   b832c:	8163      	strh	r3, [r4, #10]
  x_gauss = (float)x / scale;
   b832e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  switch (rangeBuffered) {
   b8332:	bf88      	it	hi
   b8334:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
  x_gauss = (float)x / scale;
   b8338:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_gauss = (float)y / scale;
   b833c:	ee07 2a10 	vmov	s14, r2
   b8340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_gauss = (float)x / scale;
   b8344:	edc4 6a03 	vstr	s13, [r4, #12]
  y_gauss = (float)y / scale;
   b8348:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_gauss = (float)z / scale;
   b834c:	ee07 3a10 	vmov	s14, r3
   b8350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_gauss = (float)y / scale;
   b8354:	edc4 6a04 	vstr	s13, [r4, #16]
  z_gauss = (float)z / scale;
   b8358:	eec7 6a27 	vdiv.f32	s13, s14, s15
   b835c:	edc4 6a05 	vstr	s13, [r4, #20]
}
   b8360:	b00d      	add	sp, #52	; 0x34
   b8362:	bd30      	pop	{r4, r5, pc}
   b8364:	000c6ea8 	.word	0x000c6ea8

000b8368 <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t>:
bool Adafruit_LIS3MDL::getEvent(sensors_event_t *event) {
   b8368:	b538      	push	{r3, r4, r5, lr}
   b836a:	460c      	mov	r4, r1
   b836c:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   b836e:	2220      	movs	r2, #32
   b8370:	2100      	movs	r1, #0
   b8372:	1d20      	adds	r0, r4, #4
   b8374:	f00c f900 	bl	c4578 <memset>
  event->version = sizeof(sensors_event_t);
   b8378:	2324      	movs	r3, #36	; 0x24
   b837a:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   b837c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b837e:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   b8380:	2302      	movs	r3, #2
   b8382:	60a3      	str	r3, [r4, #8]
   b8384:	f005 fc1e 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   b8388:	6120      	str	r0, [r4, #16]
  read();
   b838a:	4628      	mov	r0, r5
   b838c:	f7ff ffa6 	bl	b82dc <_ZN16Adafruit_LIS3MDL4readEv>
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b8390:	edd5 7a03 	vldr	s15, [r5, #12]
   b8394:	ed9f 7a09 	vldr	s14, [pc, #36]	; b83bc <_ZN16Adafruit_LIS3MDL8getEventEP15sensors_event_t+0x54>
   b8398:	ee67 7a87 	vmul.f32	s15, s15, s14
}
   b839c:	2001      	movs	r0, #1
  event->magnetic.x = x_gauss * 100; // microTesla per gauss
   b839e:	edc4 7a05 	vstr	s15, [r4, #20]
  event->magnetic.y = y_gauss * 100; // microTesla per gauss
   b83a2:	edd5 7a04 	vldr	s15, [r5, #16]
   b83a6:	ee67 7a87 	vmul.f32	s15, s15, s14
   b83aa:	edc4 7a06 	vstr	s15, [r4, #24]
  event->magnetic.z = z_gauss * 100; // microTesla per gauss
   b83ae:	edd5 7a05 	vldr	s15, [r5, #20]
   b83b2:	ee67 7a87 	vmul.f32	s15, s15, s14
   b83b6:	edc4 7a07 	vstr	s15, [r4, #28]
}
   b83ba:	bd38      	pop	{r3, r4, r5, pc}
   b83bc:	42c80000 	.word	0x42c80000

000b83c0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>:
    @brief Set the performance mode, LIS3MDL_LOWPOWERMODE, LIS3MDL_MEDIUMMODE,
    LIS3MDL_HIGHMODE or LIS3MDL_ULTRAHIGHMODE
    @param mode Enumerated lis3mdl_performancemode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b83c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // write xy
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b83c2:	2501      	movs	r5, #1
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b83c4:	b095      	sub	sp, #84	; 0x54
                              LIS3MDL_REG_CTRL_REG1, 1);
   b83c6:	2700      	movs	r7, #0
   b83c8:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b83cc:	2320      	movs	r3, #32
   b83ce:	9300      	str	r3, [sp, #0]
   b83d0:	9501      	str	r5, [sp, #4]
void Adafruit_LIS3MDL::setPerformanceMode(lis3mdl_performancemode_t mode) {
   b83d2:	460e      	mov	r6, r1
   b83d4:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG1, 1);
   b83d6:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b83da:	462b      	mov	r3, r5
   b83dc:	a808      	add	r0, sp, #32
   b83de:	f005 f8a7 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 2, 5);
   b83e2:	2305      	movs	r3, #5
   b83e4:	2202      	movs	r2, #2
   b83e6:	a908      	add	r1, sp, #32
   b83e8:	a804      	add	r0, sp, #16
   b83ea:	f005 f97d 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodebits.write((uint8_t)mode);
   b83ee:	4631      	mov	r1, r6
   b83f0:	a804      	add	r0, sp, #16
   b83f2:	f005 f98b 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // write z
  Adafruit_BusIO_Register CTRL_REG4 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG4, 1);
   b83f6:	2323      	movs	r3, #35	; 0x23
   b83f8:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   b83fc:	9300      	str	r3, [sp, #0]
   b83fe:	e9cd 7502 	strd	r7, r5, [sp, #8]
   b8402:	462b      	mov	r3, r5
   b8404:	9501      	str	r5, [sp, #4]
   b8406:	a80e      	add	r0, sp, #56	; 0x38
   b8408:	f005 f892 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits performancemodezbits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG4, 2, 2);
   b840c:	2302      	movs	r3, #2
   b840e:	461a      	mov	r2, r3
   b8410:	a90e      	add	r1, sp, #56	; 0x38
   b8412:	a806      	add	r0, sp, #24
   b8414:	f005 f968 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  performancemodezbits.write((uint8_t)mode);
   b8418:	4631      	mov	r1, r6
   b841a:	a806      	add	r0, sp, #24
   b841c:	f005 f976 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8420:	b015      	add	sp, #84	; 0x54
   b8422:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8424 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>:
    @brief  Sets the data rate for the LIS3MDL (controls power consumption)
    from 0.625 Hz to 80Hz
    @param dataRate Enumerated lis3mdl_dataRate_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8424:	b570      	push	{r4, r5, r6, lr}
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b8426:	2901      	cmp	r1, #1
void Adafruit_LIS3MDL::setDataRate(lis3mdl_dataRate_t dataRate) {
   b8428:	b08c      	sub	sp, #48	; 0x30
   b842a:	4606      	mov	r6, r0
   b842c:	460c      	mov	r4, r1
  if (dataRate == LIS3MDL_DATARATE_155_HZ) {
   b842e:	d103      	bne.n	b8438 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x14>
    // set OP to UHP
    setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b8430:	2103      	movs	r1, #3
    // set OP to MP
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
  }
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
    // set OP to LP
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8432:	f7ff ffc5 	bl	b83c0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
   b8436:	e009      	b.n	b844c <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x28>
  if (dataRate == LIS3MDL_DATARATE_300_HZ) {
   b8438:	2903      	cmp	r1, #3
   b843a:	d003      	beq.n	b8444 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x20>
  if (dataRate == LIS3MDL_DATARATE_560_HZ) {
   b843c:	2905      	cmp	r1, #5
   b843e:	d103      	bne.n	b8448 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x24>
    setPerformanceMode(LIS3MDL_MEDIUMMODE);
   b8440:	2101      	movs	r1, #1
   b8442:	e7f6      	b.n	b8432 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
    setPerformanceMode(LIS3MDL_HIGHMODE);
   b8444:	2102      	movs	r1, #2
   b8446:	e7f4      	b.n	b8432 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>
  if (dataRate == LIS3MDL_DATARATE_1000_HZ) {
   b8448:	2907      	cmp	r1, #7
   b844a:	d01b      	beq.n	b8484 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0x60>
  }
  delay(10);
   b844c:	200a      	movs	r0, #10
   b844e:	f008 fcff 	bl	c0e50 <delay>
  Adafruit_BusIO_Register CTRL_REG1 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG1, 1);
   b8452:	2501      	movs	r5, #1
   b8454:	2300      	movs	r3, #0
   b8456:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b845a:	2320      	movs	r3, #32
   b845c:	e9d6 1207 	ldrd	r1, r2, [r6, #28]
   b8460:	9300      	str	r3, [sp, #0]
   b8462:	9501      	str	r5, [sp, #4]
   b8464:	462b      	mov	r3, r5
   b8466:	a806      	add	r0, sp, #24
   b8468:	f005 f862 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits dataratebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG1, 4, 1); // includes FAST_ODR
   b846c:	462b      	mov	r3, r5
   b846e:	2204      	movs	r2, #4
   b8470:	a906      	add	r1, sp, #24
   b8472:	a804      	add	r0, sp, #16
   b8474:	f005 f938 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  dataratebits.write((uint8_t)dataRate);
   b8478:	4621      	mov	r1, r4
   b847a:	a804      	add	r0, sp, #16
   b847c:	f005 f946 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b8480:	b00c      	add	sp, #48	; 0x30
   b8482:	bd70      	pop	{r4, r5, r6, pc}
    setPerformanceMode(LIS3MDL_LOWPOWERMODE);
   b8484:	2100      	movs	r1, #0
   b8486:	e7d4      	b.n	b8432 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t+0xe>

000b8488 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>:
    @brief Set the operation mode, LIS3MDL_CONTINUOUSMODE,
    LIS3MDL_SINGLEMODE or LIS3MDL_POWERDOWNMODE
    @param mode Enumerated lis3mdl_operationmode_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b8488:	b530      	push	{r4, r5, lr}
  // write x and y
  Adafruit_BusIO_Register CTRL_REG3 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG3, 1);
   b848a:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b848c:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG3, 1);
   b848e:	2500      	movs	r5, #0
   b8490:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b8494:	2222      	movs	r2, #34	; 0x22
   b8496:	9301      	str	r3, [sp, #4]
   b8498:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setOperationMode(lis3mdl_operationmode_t mode) {
   b849a:	460c      	mov	r4, r1
                              LIS3MDL_REG_CTRL_REG3, 1);
   b849c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b84a0:	a806      	add	r0, sp, #24
   b84a2:	f005 f845 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits opmodebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG3, 2, 0);
   b84a6:	462b      	mov	r3, r5
   b84a8:	2202      	movs	r2, #2
   b84aa:	a906      	add	r1, sp, #24
   b84ac:	a804      	add	r0, sp, #16
   b84ae:	f005 f91b 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  opmodebits.write((uint8_t)mode);
   b84b2:	4621      	mov	r1, r4
   b84b4:	a804      	add	r0, sp, #16
   b84b6:	f005 f929 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b84ba:	b00d      	add	sp, #52	; 0x34
   b84bc:	bd30      	pop	{r4, r5, pc}

000b84be <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>:
/*!
    @brief Set the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @param range Enumerated lis3mdl_range_t
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b84be:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b84c0:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b84c2:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b84c4:	2200      	movs	r2, #0
   b84c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b84ca:	2221      	movs	r2, #33	; 0x21
   b84cc:	9301      	str	r3, [sp, #4]
   b84ce:	9200      	str	r2, [sp, #0]
void Adafruit_LIS3MDL::setRange(lis3mdl_range_t range) {
   b84d0:	460d      	mov	r5, r1
   b84d2:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b84d4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b84d8:	a806      	add	r0, sp, #24
   b84da:	f005 f829 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b84de:	2305      	movs	r3, #5
   b84e0:	2202      	movs	r2, #2
   b84e2:	a906      	add	r1, sp, #24
   b84e4:	a804      	add	r0, sp, #16
   b84e6:	f005 f8ff 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  rangebits.write((uint8_t)range);
   b84ea:	4629      	mov	r1, r5
   b84ec:	a804      	add	r0, sp, #16
   b84ee:	f005 f90d 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  rangeBuffered = range;
   b84f2:	7625      	strb	r5, [r4, #24]
}
   b84f4:	b00d      	add	sp, #52	; 0x34
   b84f6:	bd30      	pop	{r4, r5, pc}

000b84f8 <_ZN16Adafruit_LIS3MDL8getRangeEv>:
/*!
    @brief Read the resolution range: +-4 gauss, 8 gauss, 12 gauss, or 16 gauss.
    @returns Enumerated lis3mdl_range_t
*/
/**************************************************************************/
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b84f8:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register CTRL_REG2 =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_CTRL_REG2, 1);
   b84fa:	2301      	movs	r3, #1
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b84fc:	b08c      	sub	sp, #48	; 0x30
                              LIS3MDL_REG_CTRL_REG2, 1);
   b84fe:	2200      	movs	r2, #0
   b8500:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b8504:	2221      	movs	r2, #33	; 0x21
   b8506:	9301      	str	r3, [sp, #4]
   b8508:	9200      	str	r2, [sp, #0]
   b850a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
lis3mdl_range_t Adafruit_LIS3MDL::getRange(void) {
   b850e:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8510:	a806      	add	r0, sp, #24
   b8512:	f005 f80d 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Adafruit_BusIO_RegisterBits rangebits =
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 2, 5);
   b8516:	2305      	movs	r3, #5
   b8518:	2202      	movs	r2, #2
   b851a:	a906      	add	r1, sp, #24
   b851c:	a804      	add	r0, sp, #16
   b851e:	f005 f8e3 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  rangeBuffered = (lis3mdl_range_t)rangebits.read();
   b8522:	a804      	add	r0, sp, #16
   b8524:	f005 f8e5 	bl	bd6f2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b8528:	b2c0      	uxtb	r0, r0
   b852a:	7620      	strb	r0, [r4, #24]

  return rangeBuffered;
}
   b852c:	b00c      	add	sp, #48	; 0x30
   b852e:	bd10      	pop	{r4, pc}

000b8530 <_ZN16Adafruit_LIS3MDL5resetEv>:
void Adafruit_LIS3MDL::reset(void) {
   b8530:	b530      	push	{r4, r5, lr}
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8532:	2300      	movs	r3, #0
void Adafruit_LIS3MDL::reset(void) {
   b8534:	b08d      	sub	sp, #52	; 0x34
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8536:	2501      	movs	r5, #1
   b8538:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b853c:	2321      	movs	r3, #33	; 0x21
   b853e:	9300      	str	r3, [sp, #0]
   b8540:	9501      	str	r5, [sp, #4]
   b8542:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
void Adafruit_LIS3MDL::reset(void) {
   b8546:	4604      	mov	r4, r0
                              LIS3MDL_REG_CTRL_REG2, 1);
   b8548:	462b      	mov	r3, r5
   b854a:	a806      	add	r0, sp, #24
   b854c:	f004 fff0 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
      Adafruit_BusIO_RegisterBits(&CTRL_REG2, 1, 2);
   b8550:	2302      	movs	r3, #2
   b8552:	462a      	mov	r2, r5
   b8554:	a906      	add	r1, sp, #24
   b8556:	a804      	add	r0, sp, #16
   b8558:	f005 f8c6 	bl	bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  resetbits.write(0x1);
   b855c:	4629      	mov	r1, r5
   b855e:	a804      	add	r0, sp, #16
   b8560:	f005 f8d4 	bl	bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(10);
   b8564:	200a      	movs	r0, #10
   b8566:	f008 fc73 	bl	c0e50 <delay>
  getRange();
   b856a:	4620      	mov	r0, r4
   b856c:	f7ff ffc4 	bl	b84f8 <_ZN16Adafruit_LIS3MDL8getRangeEv>
}
   b8570:	b00d      	add	sp, #52	; 0x34
   b8572:	bd30      	pop	{r4, r5, pc}

000b8574 <_ZN16Adafruit_LIS3MDL5_initEv>:
bool Adafruit_LIS3MDL::_init(void) {
   b8574:	b570      	push	{r4, r5, r6, lr}
                              LIS3MDL_REG_WHO_AM_I, 1);
   b8576:	2601      	movs	r6, #1
bool Adafruit_LIS3MDL::_init(void) {
   b8578:	b08a      	sub	sp, #40	; 0x28
                              LIS3MDL_REG_WHO_AM_I, 1);
   b857a:	2500      	movs	r5, #0
   b857c:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b8580:	230f      	movs	r3, #15
   b8582:	9300      	str	r3, [sp, #0]
   b8584:	9601      	str	r6, [sp, #4]
   b8586:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b858a:	4633      	mov	r3, r6
bool Adafruit_LIS3MDL::_init(void) {
   b858c:	4604      	mov	r4, r0
                              LIS3MDL_REG_WHO_AM_I, 1);
   b858e:	a804      	add	r0, sp, #16
   b8590:	f004 ffce 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0x3D) {
   b8594:	a804      	add	r0, sp, #16
   b8596:	f005 f88b 	bl	bd6b0 <_ZN23Adafruit_BusIO_Register4readEv>
   b859a:	283d      	cmp	r0, #61	; 0x3d
   b859c:	d115      	bne.n	b85ca <_ZN16Adafruit_LIS3MDL5_initEv+0x56>
  reset();
   b859e:	4620      	mov	r0, r4
   b85a0:	f7ff ffc6 	bl	b8530 <_ZN16Adafruit_LIS3MDL5resetEv>
  setPerformanceMode(LIS3MDL_ULTRAHIGHMODE);
   b85a4:	2103      	movs	r1, #3
   b85a6:	4620      	mov	r0, r4
   b85a8:	f7ff ff0a 	bl	b83c0 <_ZN16Adafruit_LIS3MDL18setPerformanceModeE25lis3mdl_performancemode_t>
  setDataRate(LIS3MDL_DATARATE_155_HZ);
   b85ac:	4631      	mov	r1, r6
   b85ae:	4620      	mov	r0, r4
   b85b0:	f7ff ff38 	bl	b8424 <_ZN16Adafruit_LIS3MDL11setDataRateE18lis3mdl_dataRate_t>
  setRange(LIS3MDL_RANGE_4_GAUSS);
   b85b4:	4629      	mov	r1, r5
   b85b6:	4620      	mov	r0, r4
   b85b8:	f7ff ff81 	bl	b84be <_ZN16Adafruit_LIS3MDL8setRangeE15lis3mdl_range_t>
  setOperationMode(LIS3MDL_CONTINUOUSMODE);
   b85bc:	4620      	mov	r0, r4
   b85be:	4629      	mov	r1, r5
   b85c0:	f7ff ff62 	bl	b8488 <_ZN16Adafruit_LIS3MDL16setOperationModeE23lis3mdl_operationmode_t>
   b85c4:	4630      	mov	r0, r6
}
   b85c6:	b00a      	add	sp, #40	; 0x28
   b85c8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b85ca:	4628      	mov	r0, r5
   b85cc:	e7fb      	b.n	b85c6 <_ZN16Adafruit_LIS3MDL5_initEv+0x52>

000b85ce <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire>:
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b85ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   b85d0:	69c3      	ldr	r3, [r0, #28]
bool Adafruit_LIS3MDL::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   b85d2:	4604      	mov	r4, r0
  if (!i2c_dev) {
   b85d4:	b95b      	cbnz	r3, b85ee <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x20>
    i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b85d6:	2010      	movs	r0, #16
   b85d8:	e9cd 1200 	strd	r1, r2, [sp]
   b85dc:	f7fb fd5b 	bl	b4096 <_Znwj>
   b85e0:	4605      	mov	r5, r0
   b85e2:	b118      	cbz	r0, b85ec <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x1e>
   b85e4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b85e8:	f005 f9c3 	bl	bd972 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b85ec:	61e5      	str	r5, [r4, #28]
  spi_dev = NULL;
   b85ee:	2300      	movs	r3, #0
  if (!i2c_dev->begin()) {
   b85f0:	69e0      	ldr	r0, [r4, #28]
  spi_dev = NULL;
   b85f2:	6223      	str	r3, [r4, #32]
  if (!i2c_dev->begin()) {
   b85f4:	2101      	movs	r1, #1
   b85f6:	f005 f9d8 	bl	bd9aa <_ZN18Adafruit_I2CDevice5beginEb>
   b85fa:	b128      	cbz	r0, b8608 <_ZN16Adafruit_LIS3MDL9begin_I2CEhP7TwoWire+0x3a>
  return _init();
   b85fc:	4620      	mov	r0, r4
}
   b85fe:	b003      	add	sp, #12
   b8600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   b8604:	f7ff bfb6 	b.w	b8574 <_ZN16Adafruit_LIS3MDL5_initEv>
}
   b8608:	b003      	add	sp, #12
   b860a:	bd30      	pop	{r4, r5, pc}

000b860c <_ZN16Adafruit_LIS3MDL15setIntThresholdEt>:
/*!
    @brief Set the interrupt threshold value
    @param value 16-bit unsigned raw value
*/
/**************************************************************************/
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b860c:	b530      	push	{r4, r5, lr}
  value &= 0x7FFF; // high bit must be 0!
  Adafruit_BusIO_Register INT_THS =
      Adafruit_BusIO_Register(i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC,
                              LIS3MDL_REG_INT_THS_L, 2);
   b860e:	2301      	movs	r3, #1
void Adafruit_LIS3MDL::setIntThreshold(uint16_t value) {
   b8610:	b08b      	sub	sp, #44	; 0x2c
   b8612:	460c      	mov	r4, r1
                              LIS3MDL_REG_INT_THS_L, 2);
   b8614:	2500      	movs	r5, #0
   b8616:	2232      	movs	r2, #50	; 0x32
   b8618:	2102      	movs	r1, #2
   b861a:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b861e:	e9cd 2100 	strd	r2, r1, [sp]
   b8622:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8626:	a804      	add	r0, sp, #16
   b8628:	f004 ff82 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_THS.write(value);
   b862c:	462a      	mov	r2, r5
   b862e:	f3c4 010e 	ubfx	r1, r4, #0, #15
   b8632:	a804      	add	r0, sp, #16
   b8634:	f004 ffdc 	bl	bd5f0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8638:	b00b      	add	sp, #44	; 0x2c
   b863a:	bd30      	pop	{r4, r5, pc}

000b863c <_ZN16Adafruit_LIS3MDL15configInterruptEbbbbbb>:
    @param enableInt Interrupt enable on INT pin
*/
/**************************************************************************/
void Adafruit_LIS3MDL::configInterrupt(bool enableX, bool enableY, bool enableZ,
                                       bool polarity, bool latch,
                                       bool enableInt) {
   b863c:	b530      	push	{r4, r5, lr}
   b863e:	b08b      	sub	sp, #44	; 0x2c
  value |= polarity << 2;
  value |= latch << 1;
  value |= enableInt;

  Adafruit_BusIO_Register INT_CFG = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8640:	2500      	movs	r5, #0
  value |= latch << 1;
   b8642:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   b8646:	0064      	lsls	r4, r4, #1
   b8648:	ea44 11c1 	orr.w	r1, r4, r1, lsl #7
   b864c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   b8650:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
   b8654:	ea41 1343 	orr.w	r3, r1, r3, lsl #5
   b8658:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
  value |= enableInt;
   b865c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8660:	2301      	movs	r3, #1
  value |= latch << 1;
   b8662:	f042 0208 	orr.w	r2, r2, #8
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b8666:	e9cd 5302 	strd	r5, r3, [sp, #8]
  value |= latch << 1;
   b866a:	b2d2      	uxtb	r2, r2
  value |= enableInt;
   b866c:	4314      	orrs	r4, r2
      i2c_dev, spi_dev, AD8_HIGH_TOREAD_AD7_HIGH_TOINC, LIS3MDL_REG_INT_CFG, 1);
   b866e:	2230      	movs	r2, #48	; 0x30
   b8670:	9301      	str	r3, [sp, #4]
   b8672:	9200      	str	r2, [sp, #0]
   b8674:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   b8678:	a804      	add	r0, sp, #16
   b867a:	f004 ff59 	bl	bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  INT_CFG.write(value);
   b867e:	462a      	mov	r2, r5
   b8680:	4621      	mov	r1, r4
   b8682:	a804      	add	r0, sp, #16
   b8684:	f004 ffb4 	bl	bd5f0 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b8688:	b00b      	add	sp, #44	; 0x2c
   b868a:	bd30      	pop	{r4, r5, pc}

000b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>:
  val |= (uint64_t)msg->payload[spotToStart + 7] << 8 * 7;
  return (val);
}

// Given a spot in the payload array, extract four bytes and build a long
uint32_t SFE_UBLOX_GNSS::extractLong(ubxPacket *msg, uint16_t spotToStart)
   b868c:	b510      	push	{r4, lr}
{
  uint32_t val = 0;
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b868e:	1842      	adds	r2, r0, r1
  val |= (uint32_t)msg->payload[spotToStart + 0] << 8 * 0;
   b8690:	5c40      	ldrb	r0, [r0, r1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8692:	7893      	ldrb	r3, [r2, #2]
  val |= (uint32_t)msg->payload[spotToStart + 1] << 8 * 1;
   b8694:	7854      	ldrb	r4, [r2, #1]
  val |= (uint32_t)msg->payload[spotToStart + 2] << 8 * 2;
   b8696:	041b      	lsls	r3, r3, #16
   b8698:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   b869c:	4303      	orrs	r3, r0
  val |= (uint32_t)msg->payload[spotToStart + 3] << 8 * 3;
   b869e:	78d0      	ldrb	r0, [r2, #3]
  return (val);
}
   b86a0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   b86a4:	bd10      	pop	{r4, pc}

000b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>:
// Given a spot in the payload array, extract two bytes and build an int
uint16_t SFE_UBLOX_GNSS::extractInt(ubxPacket *msg, uint16_t spotToStart)
{
  uint16_t val = 0;
  val |= (uint16_t)msg->payload[spotToStart + 0] << 8 * 0;
  val |= (uint16_t)msg->payload[spotToStart + 1] << 8 * 1;
   b86a6:	1843      	adds	r3, r0, r1
   b86a8:	5c40      	ldrb	r0, [r0, r1]
   b86aa:	785a      	ldrb	r2, [r3, #1]
  return (val);
}
   b86ac:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b86b0:	4770      	bx	lr

000b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b86b2:	b410      	push	{r4}
{
    if (base == 0) {
   b86b4:	b92a      	cbnz	r2, b86c2 <_ZN5Print5printImLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b86b6:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b86b8:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b86bc:	6892      	ldr	r2, [r2, #8]
   b86be:	b2c9      	uxtb	r1, r1
   b86c0:	4710      	bx	r2
}
   b86c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b86c6:	b2d2      	uxtb	r2, r2
   b86c8:	f007 bae3 	b.w	bfc92 <_ZN5Print11printNumberEmh>

000b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>:
    if (base == 0) {
   b86cc:	b912      	cbnz	r2, b86d4 <_ZN5Print5printIhLi0EEEjT_i.isra.0+0x8>
        return write(n);
   b86ce:	6803      	ldr	r3, [r0, #0]
   b86d0:	689b      	ldr	r3, [r3, #8]
   b86d2:	4718      	bx	r3
        return printNumber(val, base) + t;
   b86d4:	b2d2      	uxtb	r2, r2
   b86d6:	f007 badc 	b.w	bfc92 <_ZN5Print11printNumberEmh>

000b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b86da:	b510      	push	{r4, lr}
   b86dc:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b86de:	f7ff fff5 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        n += println();
   b86e2:	4620      	mov	r0, r4
    }
   b86e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b86e8:	f007 babb 	b.w	bfc62 <_ZN5Print7printlnEv>

000b86ec <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   b86ec:	6803      	ldr	r3, [r0, #0]
   b86ee:	b2c9      	uxtb	r1, r1
   b86f0:	689b      	ldr	r3, [r3, #8]
   b86f2:	4718      	bx	r3

000b86f4 <_ZN14SFE_UBLOX_GNSSC1Ev>:
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b86f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b86f8:	8002      	strh	r2, [r0, #0]
   b86fa:	2142      	movs	r1, #66	; 0x42
   b86fc:	2200      	movs	r2, #0
   b86fe:	b510      	push	{r4, lr}
   b8700:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b8704:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b8708:	e9c0 2205 	strd	r2, r2, [r0, #20]
   b870c:	e9c0 2207 	strd	r2, r2, [r0, #28]
   b8710:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
   b8714:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   b8718:	e9c0 220d 	strd	r2, r2, [r0, #52]	; 0x34
   b871c:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
   b8720:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
   b8724:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
   b8728:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
   b872c:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
   b8730:	e9c0 2219 	strd	r2, r2, [r0, #100]	; 0x64
   b8734:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b8738:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
   b873c:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c
   b8740:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
   b8744:	2180      	movs	r1, #128	; 0x80
   b8746:	f880 1109 	strb.w	r1, [r0, #265]	; 0x109
   b874a:	f100 01f4 	add.w	r1, r0, #244	; 0xf4
   b874e:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   b8752:	4925      	ldr	r1, [pc, #148]	; (b87e8 <_ZN14SFE_UBLOX_GNSSC1Ev+0xf4>)
   b8754:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   b8758:	f100 04f6 	add.w	r4, r0, #246	; 0xf6
   b875c:	e9c0 1246 	strd	r1, r2, [r0, #280]	; 0x118
   b8760:	e9c0 2221 	strd	r2, r2, [r0, #132]	; 0x84
   b8764:	e9c0 2223 	strd	r2, r2, [r0, #140]	; 0x8c
   b8768:	e9c0 2225 	strd	r2, r2, [r0, #148]	; 0x94
   b876c:	e9c0 2227 	strd	r2, r2, [r0, #156]	; 0x9c
   b8770:	e9c0 2229 	strd	r2, r2, [r0, #164]	; 0xa4
   b8774:	e9c0 222b 	strd	r2, r2, [r0, #172]	; 0xac
   b8778:	e9c0 222d 	strd	r2, r2, [r0, #180]	; 0xb4
   b877c:	e9c0 222f 	strd	r2, r2, [r0, #188]	; 0xbc
   b8780:	e9c0 223e 	strd	r2, r2, [r0, #248]	; 0xf8
   b8784:	e9c0 2240 	strd	r2, r2, [r0, #256]	; 0x100
   b8788:	e9c0 2243 	strd	r2, r2, [r0, #268]	; 0x10c
   b878c:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   b8790:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
   b8794:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
   b8798:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
   b879c:	e9c0 4149 	strd	r4, r1, [r0, #292]	; 0x124
   b87a0:	e9c0 214d 	strd	r2, r1, [r0, #308]	; 0x134
   b87a4:	e9c0 2151 	strd	r2, r1, [r0, #324]	; 0x144
   b87a8:	4910      	ldr	r1, [pc, #64]	; (b87ec <_ZN14SFE_UBLOX_GNSSC1Ev+0xf8>)
   b87aa:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   b87ae:	f640 1164 	movw	r1, #2404	; 0x964
   b87b2:	f8a0 1150 	strh.w	r1, [r0, #336]	; 0x150
   b87b6:	2158      	movs	r1, #88	; 0x58
   b87b8:	f880 115d 	strb.w	r1, [r0, #349]	; 0x15d
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b87bc:	2101      	movs	r1, #1
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b87be:	e9c0 224b 	strd	r2, r2, [r0, #300]	; 0x12c
   b87c2:	e9c0 224f 	strd	r2, r2, [r0, #316]	; 0x13c
   b87c6:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
   b87ca:	f880 2164 	strb.w	r2, [r0, #356]	; 0x164
   b87ce:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
   b87d2:	f8a0 216c 	strh.w	r2, [r0, #364]	; 0x16c
  _logNMEA.all = 0;                             // Default to passing no NMEA messages to the file buffer
   b87d6:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  _processNMEA.all = SFE_UBLOX_FILTER_NMEA_ALL; // Default to passing all NMEA messages to processNMEA
   b87da:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
SFE_UBLOX_GNSS::SFE_UBLOX_GNSS(void)
   b87de:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
  _i2cStopRestart = false; // Use a restart where needed
   b87e2:	f8a0 2174 	strh.w	r2, [r0, #372]	; 0x174
}
   b87e6:	bd10      	pop	{r4, pc}
   b87e8:	02020000 	.word	0x02020000
   b87ec:	64640200 	.word	0x64640200

000b87f0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>:
{
   b87f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b87f2:	4604      	mov	r4, r0
  if ((payloadSize == 0) && (payloadCfg != NULL))
   b87f4:	460d      	mov	r5, r1
   b87f6:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   b87fa:	b9a9      	cbnz	r1, b8828 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x38>
   b87fc:	b1a8      	cbz	r0, b882a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x3a>
    delete[] payloadCfg; // Created with new[]
   b87fe:	f7fb fc4e 	bl	b409e <_ZdaPv>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8802:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    payloadCfg = NULL;   // Redundant?
   b8806:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b880a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    packetCfgPayloadSize = payloadSize;
   b880e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8812:	b913      	cbnz	r3, b881a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x2a>
   b8814:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8818:	b123      	cbz	r3, b8824 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
      _debugSerial->println(F("setPacketCfgPayloadSize: Zero payloadSize!"));
   b881a:	4920      	ldr	r1, [pc, #128]	; (b889c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xac>)
   b881c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8820:	f007 fa35 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
  bool success = true;
   b8824:	2001      	movs	r0, #1
   b8826:	e011      	b.n	b884c <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5c>
  else if (payloadCfg == NULL) // Memory has not yet been allocated - so use new
   b8828:	b9b8      	cbnz	r0, b885a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x6a>
    payloadCfg = new uint8_t[payloadSize];
   b882a:	4628      	mov	r0, r5
   b882c:	f7fb fc35 	bl	b409a <_Znaj>
   b8830:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    packetCfg.payload = payloadCfg;
   b8834:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    if (payloadCfg == NULL)
   b8838:	bb60      	cbnz	r0, b8894 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xa4>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b883a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
      packetCfgPayloadSize = 0;
   b883e:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8842:	b923      	cbnz	r3, b884e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
   b8844:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b8848:	b90b      	cbnz	r3, b884e <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5e>
      success = false;                                           // Report failure. Don't change payloadCfg, packetCfg.payload or packetCfgPayloadSize
   b884a:	2000      	movs	r0, #0
}
   b884c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM alloc failed!"));
   b884e:	4914      	ldr	r1, [pc, #80]	; (b88a0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb0>)
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b8850:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b8854:	f007 fa1b 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   b8858:	e7f7      	b.n	b884a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
    uint8_t *newPayload = new uint8_t[payloadSize];
   b885a:	4608      	mov	r0, r1
   b885c:	f7fb fc1d 	bl	b409a <_Znaj>
    if (newPayload == NULL) // Check if the alloc was successful
   b8860:	4606      	mov	r6, r0
   b8862:	b940      	cbnz	r0, b8876 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x86>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b8864:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b8868:	b91b      	cbnz	r3, b8872 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x82>
   b886a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   b886e:	2b00      	cmp	r3, #0
   b8870:	d0eb      	beq.n	b884a <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x5a>
        _debugSerial->println(F("setPacketCfgPayloadSize: RAM resize failed!"));
   b8872:	490c      	ldr	r1, [pc, #48]	; (b88a4 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0xb4>)
   b8874:	e7ec      	b.n	b8850 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x60>
      memcpy(newPayload, payloadCfg, payloadSize <= packetCfgPayloadSize ? payloadSize : packetCfgPayloadSize); // Copy as much existing data as we can
   b8876:	e9d4 273e 	ldrd	r2, r7, [r4, #248]	; 0xf8
   b887a:	42aa      	cmp	r2, r5
   b887c:	bf28      	it	cs
   b887e:	462a      	movcs	r2, r5
   b8880:	4639      	mov	r1, r7
   b8882:	f00b fe51 	bl	c4528 <memcpy>
      delete[] payloadCfg;                                                                                      // Free payloadCfg. Created with new[]
   b8886:	4638      	mov	r0, r7
   b8888:	f7fb fc09 	bl	b409e <_ZdaPv>
      payloadCfg = newPayload;                                                                                  // Point to the newPayload
   b888c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
      packetCfg.payload = payloadCfg;                                                                           // Update the packet pointer
   b8890:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      packetCfgPayloadSize = payloadSize;                                                                       // Update the packet payload size
   b8894:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
   b8898:	e7c4      	b.n	b8824 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj+0x34>
   b889a:	bf00      	nop
   b889c:	000c6ed4 	.word	0x000c6ed4
   b88a0:	000c6eff 	.word	0x000c6eff
   b88a4:	000c6f2a 	.word	0x000c6f2a

000b88a8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>:
  switch (Class)
   b88a8:	290d      	cmp	r1, #13
   b88aa:	f000 80cd 	beq.w	b8a48 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1a0>
   b88ae:	d809      	bhi.n	b88c4 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c>
   b88b0:	2902      	cmp	r1, #2
   b88b2:	f000 80a7 	beq.w	b8a04 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x15c>
   b88b6:	2906      	cmp	r1, #6
   b88b8:	f000 80be 	beq.w	b8a38 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x190>
   b88bc:	2901      	cmp	r1, #1
   b88be:	d016      	beq.n	b88ee <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x46>
   b88c0:	2000      	movs	r0, #0
}
   b88c2:	4770      	bx	lr
  switch (Class)
   b88c4:	2913      	cmp	r1, #19
   b88c6:	f000 80d4 	beq.w	b8a72 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ca>
   b88ca:	2928      	cmp	r1, #40	; 0x28
   b88cc:	f000 80dc 	beq.w	b8a88 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1e0>
   b88d0:	2910      	cmp	r1, #16
   b88d2:	d1f5      	bne.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
    switch (ID)
   b88d4:	2a10      	cmp	r2, #16
   b88d6:	f000 80c9 	beq.w	b8a6c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1c4>
   b88da:	f200 80ba 	bhi.w	b8a52 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1aa>
   b88de:	2a02      	cmp	r2, #2
   b88e0:	f000 80c1 	beq.w	b8a66 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1be>
   b88e4:	2a03      	cmp	r2, #3
   b88e6:	d1eb      	bne.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFRAW != NULL)
   b88e8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   b88ec:	e066      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b88ee:	2a26      	cmp	r2, #38	; 0x26
   b88f0:	d854      	bhi.n	b899c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0xf4>
   b88f2:	2a00      	cmp	r2, #0
   b88f4:	d0e4      	beq.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b88f6:	3a01      	subs	r2, #1
   b88f8:	2a25      	cmp	r2, #37	; 0x25
   b88fa:	d8e1      	bhi.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
   b88fc:	a301      	add	r3, pc, #4	; (adr r3, b8904 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x5c>)
   b88fe:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   b8902:	bf00      	nop
   b8904:	000b89bb 	.word	0x000b89bb
   b8908:	000b88c1 	.word	0x000b88c1
   b890c:	000b89c5 	.word	0x000b89c5
   b8910:	000b89c9 	.word	0x000b89c9
   b8914:	000b89cd 	.word	0x000b89cd
   b8918:	000b88c1 	.word	0x000b88c1
   b891c:	000b89d1 	.word	0x000b89d1
   b8920:	000b88c1 	.word	0x000b88c1
   b8924:	000b89d5 	.word	0x000b89d5
   b8928:	000b88c1 	.word	0x000b88c1
   b892c:	000b88c1 	.word	0x000b88c1
   b8930:	000b88c1 	.word	0x000b88c1
   b8934:	000b88c1 	.word	0x000b88c1
   b8938:	000b88c1 	.word	0x000b88c1
   b893c:	000b88c1 	.word	0x000b88c1
   b8940:	000b88c1 	.word	0x000b88c1
   b8944:	000b89d9 	.word	0x000b89d9
   b8948:	000b89dd 	.word	0x000b89dd
   b894c:	000b89e1 	.word	0x000b89e1
   b8950:	000b89e5 	.word	0x000b89e5
   b8954:	000b88c1 	.word	0x000b88c1
   b8958:	000b88c1 	.word	0x000b88c1
   b895c:	000b89e9 	.word	0x000b89e9
   b8960:	000b88c1 	.word	0x000b88c1
   b8964:	000b88c1 	.word	0x000b88c1
   b8968:	000b88c1 	.word	0x000b88c1
   b896c:	000b88c1 	.word	0x000b88c1
   b8970:	000b88c1 	.word	0x000b88c1
   b8974:	000b88c1 	.word	0x000b88c1
   b8978:	000b88c1 	.word	0x000b88c1
   b897c:	000b88c1 	.word	0x000b88c1
   b8980:	000b88c1 	.word	0x000b88c1
   b8984:	000b89ed 	.word	0x000b89ed
   b8988:	000b89f1 	.word	0x000b89f1
   b898c:	000b88c1 	.word	0x000b88c1
   b8990:	000b88c1 	.word	0x000b88c1
   b8994:	000b88c1 	.word	0x000b88c1
   b8998:	000b89f5 	.word	0x000b89f5
   b899c:	2a3c      	cmp	r2, #60	; 0x3c
   b899e:	d02d      	beq.n	b89fc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x154>
   b89a0:	d805      	bhi.n	b89ae <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x106>
   b89a2:	2a35      	cmp	r2, #53	; 0x35
   b89a4:	d028      	beq.n	b89f8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x150>
   b89a6:	2a3b      	cmp	r2, #59	; 0x3b
   b89a8:	d18a      	bne.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVSVIN != NULL)
   b89aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
   b89ac:	e006      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b89ae:	2a60      	cmp	r2, #96	; 0x60
   b89b0:	d026      	beq.n	b8a00 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x158>
   b89b2:	2a61      	cmp	r2, #97	; 0x61
   b89b4:	d184      	bne.n	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXNAVEOE != NULL)
   b89b6:	6980      	ldr	r0, [r0, #24]
   b89b8:	e000      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPOSECEF != NULL)
   b89ba:	68c0      	ldr	r0, [r0, #12]
      if (packetUBXHNRINS != NULL)
   b89bc:	3800      	subs	r0, #0
   b89be:	bf18      	it	ne
   b89c0:	2001      	movne	r0, #1
   b89c2:	4770      	bx	lr
      if (packetUBXNAVSTATUS != NULL)
   b89c4:	6900      	ldr	r0, [r0, #16]
   b89c6:	e7f9      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVDOP != NULL)
   b89c8:	6940      	ldr	r0, [r0, #20]
   b89ca:	e7f7      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVATT != NULL)
   b89cc:	69c0      	ldr	r0, [r0, #28]
   b89ce:	e7f5      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVT != NULL)
   b89d0:	6a00      	ldr	r0, [r0, #32]
   b89d2:	e7f3      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVODO != NULL)
   b89d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b89d6:	e7f1      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELECEF != NULL)
   b89d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b89da:	e7ef      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVVELNED != NULL)
   b89dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
   b89de:	e7ed      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSECEF != NULL)
   b89e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
   b89e2:	e7eb      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVHPPOSLLH != NULL)
   b89e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   b89e6:	e7e9      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVPVAT != NULL)
   b89e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   b89ea:	e7e7      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMEUTC != NULL)
   b89ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b89ee:	e7e5      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVCLOCK != NULL)
   b89f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
   b89f2:	e7e3      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVTIMELS != NULL)
   b89f4:	6c40      	ldr	r0, [r0, #68]	; 0x44
   b89f6:	e7e1      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVSAT != NULL)
   b89f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   b89fa:	e7df      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVRELPOSNED != NULL)
   b89fc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b89fe:	e7dd      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXNAVAOPSTATUS != NULL)
   b8a00:	6d40      	ldr	r0, [r0, #84]	; 0x54
   b8a02:	e7db      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a04:	2a34      	cmp	r2, #52	; 0x34
   b8a06:	d015      	beq.n	b8a34 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18c>
   b8a08:	d806      	bhi.n	b8a18 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x170>
   b8a0a:	2a13      	cmp	r2, #19
   b8a0c:	d00b      	beq.n	b8a26 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x17e>
   b8a0e:	2a15      	cmp	r2, #21
   b8a10:	f47f af56 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMRAWX != NULL)
   b8a14:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   b8a16:	e7d1      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8a18:	2a72      	cmp	r2, #114	; 0x72
   b8a1a:	d006      	beq.n	b8a2a <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x182>
   b8a1c:	2a73      	cmp	r2, #115	; 0x73
   b8a1e:	f47f af4f 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXRXMQZSSL6message != NULL)
   b8a22:	6e00      	ldr	r0, [r0, #96]	; 0x60
   b8a24:	e7ca      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMSFRBX != NULL)
   b8a26:	6e80      	ldr	r0, [r0, #104]	; 0x68
   b8a28:	e7c8      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if ((packetUBXRXMPMP != NULL) || (packetUBXRXMPMPmessage != NULL))
   b8a2a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   b8a2c:	2b00      	cmp	r3, #0
   b8a2e:	d13b      	bne.n	b8aa8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x200>
   b8a30:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b8a32:	e7c3      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXRXMCOR != NULL)
   b8a34:	6e40      	ldr	r0, [r0, #100]	; 0x64
   b8a36:	e7c1      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a38:	b122      	cbz	r2, b8a44 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x19c>
   b8a3a:	2a08      	cmp	r2, #8
   b8a3c:	f47f af40 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXCFGRATE != NULL)
   b8a40:	6f40      	ldr	r0, [r0, #116]	; 0x74
   b8a42:	e7bb      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXCFGPRT != NULL)
   b8a44:	6f00      	ldr	r0, [r0, #112]	; 0x70
   b8a46:	e7b9      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a48:	2a03      	cmp	r2, #3
   b8a4a:	f47f af39 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXTIMTM2 != NULL)
   b8a4e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   b8a50:	e7b4      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
   b8a52:	2a14      	cmp	r2, #20
   b8a54:	d005      	beq.n	b8a62 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1ba>
   b8a56:	2a15      	cmp	r2, #21
   b8a58:	f47f af32 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXESFINS != NULL)
   b8a5c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   b8a60:	e7ac      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFALG != NULL)
   b8a62:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   b8a64:	e7aa      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFMEAS != NULL)
   b8a66:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   b8a6a:	e7a7      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXESFSTATUS != NULL)
   b8a6c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   b8a70:	e7a4      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a72:	2a60      	cmp	r2, #96	; 0x60
   b8a74:	d005      	beq.n	b8a82 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1da>
   b8a76:	2a80      	cmp	r2, #128	; 0x80
   b8a78:	f47f af22 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXMGADBD != NULL)
   b8a7c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   b8a80:	e79c      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXMGAACK != NULL)
   b8a82:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
   b8a86:	e799      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
    switch (ID)
   b8a88:	2a01      	cmp	r2, #1
   b8a8a:	d007      	beq.n	b8a9c <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1f4>
   b8a8c:	2a02      	cmp	r2, #2
   b8a8e:	d008      	beq.n	b8aa2 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x1fa>
   b8a90:	2a00      	cmp	r2, #0
   b8a92:	f47f af15 	bne.w	b88c0 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x18>
      if (packetUBXHNRPVT != NULL)
   b8a96:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   b8a9a:	e78f      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRATT != NULL)
   b8a9c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   b8aa0:	e78c      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
      if (packetUBXHNRINS != NULL)
   b8aa2:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
   b8aa6:	e789      	b.n	b89bc <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh+0x114>
        result = true;
   b8aa8:	2001      	movs	r0, #1
   b8aaa:	4770      	bx	lr

000b8aac <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>:
  switch (Class)
   b8aac:	290d      	cmp	r1, #13
   b8aae:	d035      	beq.n	b8b1c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x70>
   b8ab0:	d807      	bhi.n	b8ac2 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x16>
   b8ab2:	2902      	cmp	r1, #2
   b8ab4:	d019      	beq.n	b8aea <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x3e>
   b8ab6:	2906      	cmp	r1, #6
   b8ab8:	d02a      	beq.n	b8b10 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x64>
   b8aba:	2901      	cmp	r1, #1
   b8abc:	d00d      	beq.n	b8ada <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x2e>
   b8abe:	2000      	movs	r0, #0
}
   b8ac0:	4770      	bx	lr
  switch (Class)
   b8ac2:	2913      	cmp	r1, #19
   b8ac4:	d02f      	beq.n	b8b26 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x7a>
   b8ac6:	2928      	cmp	r1, #40	; 0x28
   b8ac8:	d034      	beq.n	b8b34 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x88>
   b8aca:	2910      	cmp	r1, #16
   b8acc:	d1f7      	bne.n	b8abe <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
    switch (ID)
   b8ace:	3a02      	subs	r2, #2
   b8ad0:	b2d2      	uxtb	r2, r2
   b8ad2:	2a13      	cmp	r2, #19
   b8ad4:	d8f3      	bhi.n	b8abe <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8ad6:	4b1f      	ldr	r3, [pc, #124]	; (b8b54 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa8>)
   b8ad8:	e004      	b.n	b8ae4 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x38>
    switch (ID)
   b8ada:	3a01      	subs	r2, #1
   b8adc:	b2d2      	uxtb	r2, r2
   b8ade:	2a60      	cmp	r2, #96	; 0x60
   b8ae0:	d8ed      	bhi.n	b8abe <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8ae2:	4b1d      	ldr	r3, [pc, #116]	; (b8b58 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xac>)
   b8ae4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   b8ae8:	4770      	bx	lr
    switch (ID)
   b8aea:	2a34      	cmp	r2, #52	; 0x34
   b8aec:	d027      	beq.n	b8b3e <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x92>
   b8aee:	d807      	bhi.n	b8b00 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x54>
   b8af0:	2a13      	cmp	r2, #19
   b8af2:	d026      	beq.n	b8b42 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x96>
      maxSize = UBX_RXM_RAWX_MAX_LEN;
   b8af4:	2a15      	cmp	r2, #21
   b8af6:	bf14      	ite	ne
   b8af8:	2000      	movne	r0, #0
   b8afa:	f44f 6039 	moveq.w	r0, #2960	; 0xb90
   b8afe:	4770      	bx	lr
   b8b00:	2a72      	cmp	r2, #114	; 0x72
   b8b02:	d020      	beq.n	b8b46 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x9a>
      maxSize = UBX_RXM_QZSSL6_MAX_LEN;
   b8b04:	2a73      	cmp	r2, #115	; 0x73
   b8b06:	bf14      	ite	ne
   b8b08:	2000      	movne	r0, #0
   b8b0a:	f44f 7084 	moveq.w	r0, #264	; 0x108
   b8b0e:	4770      	bx	lr
    switch (ID)
   b8b10:	b1e2      	cbz	r2, b8b4c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa0>
      maxSize = UBX_CFG_RATE_LEN;
   b8b12:	2a08      	cmp	r2, #8
   b8b14:	bf14      	ite	ne
   b8b16:	2000      	movne	r0, #0
   b8b18:	2006      	moveq	r0, #6
   b8b1a:	4770      	bx	lr
      maxSize = UBX_TIM_TM2_LEN;
   b8b1c:	2a03      	cmp	r2, #3
   b8b1e:	bf14      	ite	ne
   b8b20:	2000      	movne	r0, #0
   b8b22:	201c      	moveq	r0, #28
   b8b24:	4770      	bx	lr
    switch (ID)
   b8b26:	2a60      	cmp	r2, #96	; 0x60
   b8b28:	d012      	beq.n	b8b50 <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xa4>
      maxSize = UBX_MGA_DBD_LEN; // UBX_MGA_DBD_LEN is actually a maximum length. The packets could be shorter than this.
   b8b2a:	2a80      	cmp	r2, #128	; 0x80
   b8b2c:	bf14      	ite	ne
   b8b2e:	2000      	movne	r0, #0
   b8b30:	20a4      	moveq	r0, #164	; 0xa4
   b8b32:	4770      	bx	lr
    switch (ID)
   b8b34:	2a02      	cmp	r2, #2
   b8b36:	d8c2      	bhi.n	b8abe <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0x12>
   b8b38:	4b08      	ldr	r3, [pc, #32]	; (b8b5c <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh+0xb0>)
   b8b3a:	5c98      	ldrb	r0, [r3, r2]
   b8b3c:	4770      	bx	lr
      maxSize = UBX_RXM_COR_LEN;
   b8b3e:	200c      	movs	r0, #12
   b8b40:	4770      	bx	lr
   b8b42:	2048      	movs	r0, #72	; 0x48
   b8b44:	4770      	bx	lr
      maxSize = UBX_RXM_PMP_MAX_LEN;
   b8b46:	f44f 7004 	mov.w	r0, #528	; 0x210
   b8b4a:	4770      	bx	lr
   b8b4c:	2014      	movs	r0, #20
   b8b4e:	4770      	bx	lr
   b8b50:	2008      	movs	r0, #8
   b8b52:	4770      	bx	lr
   b8b54:	000c7bea 	.word	0x000c7bea
   b8b58:	000c7b28 	.word	0x000c7b28
   b8b5c:	000c7c12 	.word	0x000c7c12

000b8b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>:
{
   b8b60:	b510      	push	{r4, lr}
  if (_logNMEA.bits.all == 1)
   b8b62:	f890 10ec 	ldrb.w	r1, [r0, #236]	; 0xec
   b8b66:	07ca      	lsls	r2, r1, #31
   b8b68:	d415      	bmi.n	b8b96 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_DTM == 1))
   b8b6a:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8b6e:	4b59      	ldr	r3, [pc, #356]	; (b8cd4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x174>)
   b8b70:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8b74:	429a      	cmp	r2, r3
   b8b76:	d101      	bne.n	b8b7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x1c>
   b8b78:	078b      	lsls	r3, r1, #30
   b8b7a:	d40c      	bmi.n	b8b96 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8b7c:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8b80:	2b47      	cmp	r3, #71	; 0x47
   b8b82:	d174      	bne.n	b8c6e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GAQ == 1))
   b8b84:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8b88:	f245 1441 	movw	r4, #20801	; 0x5141
   b8b8c:	42a3      	cmp	r3, r4
   b8b8e:	d104      	bne.n	b8b9a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x3a>
   b8b90:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8b94:	d06b      	beq.n	b8c6e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
    return (true);
   b8b96:	2001      	movs	r0, #1
   b8b98:	e070      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GBQ == 1))
   b8b9a:	f245 1442 	movw	r4, #20802	; 0x5142
   b8b9e:	42a3      	cmp	r3, r4
   b8ba0:	d102      	bne.n	b8ba8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x48>
   b8ba2:	f011 0f08 	tst.w	r1, #8
   b8ba6:	e7f5      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GBS == 1))
   b8ba8:	f245 3442 	movw	r4, #21314	; 0x5342
   b8bac:	42a3      	cmp	r3, r4
   b8bae:	d102      	bne.n	b8bb6 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x56>
   b8bb0:	f011 0f10 	tst.w	r1, #16
   b8bb4:	e7ee      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GGA == 1))
   b8bb6:	f244 1447 	movw	r4, #16711	; 0x4147
   b8bba:	42a3      	cmp	r3, r4
   b8bbc:	d102      	bne.n	b8bc4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x64>
   b8bbe:	f011 0f20 	tst.w	r1, #32
   b8bc2:	e7e7      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_logNMEA.bits.UBX_NMEA_GLL == 1))
   b8bc4:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8bc8:	42a3      	cmp	r3, r4
   b8bca:	d102      	bne.n	b8bd2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x72>
   b8bcc:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8bd0:	e7e0      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GLQ == 1))
   b8bd2:	f245 144c 	movw	r4, #20812	; 0x514c
   b8bd6:	42a3      	cmp	r3, r4
   b8bd8:	d102      	bne.n	b8be0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x80>
   b8bda:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8bde:	e7d9      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GNQ == 1))
   b8be0:	f245 114e 	movw	r1, #20814	; 0x514e
   b8be4:	428b      	cmp	r3, r1
   b8be6:	d104      	bne.n	b8bf2 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x92>
   b8be8:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8bec:	f013 0f01 	tst.w	r3, #1
   b8bf0:	e7d0      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GNS == 1))
   b8bf2:	f245 314e 	movw	r1, #21326	; 0x534e
   b8bf6:	428b      	cmp	r3, r1
   b8bf8:	d104      	bne.n	b8c04 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xa4>
   b8bfa:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8bfe:	f013 0f02 	tst.w	r3, #2
   b8c02:	e7c7      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GPQ == 1))
   b8c04:	f245 1150 	movw	r1, #20816	; 0x5150
   b8c08:	428b      	cmp	r3, r1
   b8c0a:	d104      	bne.n	b8c16 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xb6>
   b8c0c:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c10:	f013 0f04 	tst.w	r3, #4
   b8c14:	e7be      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_logNMEA.bits.UBX_NMEA_GQQ == 1))
   b8c16:	f245 1151 	movw	r1, #20817	; 0x5151
   b8c1a:	428b      	cmp	r3, r1
   b8c1c:	d104      	bne.n	b8c28 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xc8>
   b8c1e:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c22:	f013 0f08 	tst.w	r3, #8
   b8c26:	e7b5      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_logNMEA.bits.UBX_NMEA_GRS == 1))
   b8c28:	f245 3152 	movw	r1, #21330	; 0x5352
   b8c2c:	428b      	cmp	r3, r1
   b8c2e:	d104      	bne.n	b8c3a <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xda>
   b8c30:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c34:	f013 0f10 	tst.w	r3, #16
   b8c38:	e7ac      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_GSA == 1))
   b8c3a:	f244 1153 	movw	r1, #16723	; 0x4153
   b8c3e:	428b      	cmp	r3, r1
   b8c40:	d104      	bne.n	b8c4c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xec>
   b8c42:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c46:	f013 0f20 	tst.w	r3, #32
   b8c4a:	e7a3      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_GST == 1))
   b8c4c:	f245 4153 	movw	r1, #21587	; 0x5453
   b8c50:	428b      	cmp	r3, r1
   b8c52:	d104      	bne.n	b8c5e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0xfe>
   b8c54:	f890 30ed 	ldrb.w	r3, [r0, #237]	; 0xed
   b8c58:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8c5c:	e79a      	b.n	b8b94 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_logNMEA.bits.UBX_NMEA_GSV == 1))
   b8c5e:	f245 6153 	movw	r1, #22099	; 0x5653
   b8c62:	428b      	cmp	r3, r1
   b8c64:	d103      	bne.n	b8c6e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x10e>
   b8c66:	f990 30ed 	ldrsb.w	r3, [r0, #237]	; 0xed
   b8c6a:	2b00      	cmp	r3, #0
   b8c6c:	db93      	blt.n	b8b96 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_logNMEA.bits.UBX_NMEA_RLM == 1))
   b8c6e:	4b1a      	ldr	r3, [pc, #104]	; (b8cd8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x178>)
   b8c70:	429a      	cmp	r2, r3
   b8c72:	d104      	bne.n	b8c7e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11e>
   b8c74:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8c78:	f000 0001 	and.w	r0, r0, #1
}
   b8c7c:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_logNMEA.bits.UBX_NMEA_RMC == 1))
   b8c7e:	4b17      	ldr	r3, [pc, #92]	; (b8cdc <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x17c>)
   b8c80:	429a      	cmp	r2, r3
   b8c82:	d104      	bne.n	b8c8e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x12e>
   b8c84:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8c88:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8c8c:	e7f6      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_logNMEA.bits.UBX_NMEA_TXT == 1))
   b8c8e:	4b14      	ldr	r3, [pc, #80]	; (b8ce0 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x180>)
   b8c90:	429a      	cmp	r2, r3
   b8c92:	d104      	bne.n	b8c9e <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x13e>
   b8c94:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8c98:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8c9c:	e7ee      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_logNMEA.bits.UBX_NMEA_VLW == 1))
   b8c9e:	4b11      	ldr	r3, [pc, #68]	; (b8ce4 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x184>)
   b8ca0:	429a      	cmp	r2, r3
   b8ca2:	d104      	bne.n	b8cae <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x14e>
   b8ca4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8ca8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8cac:	e7e6      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_logNMEA.bits.UBX_NMEA_VTG == 1))
   b8cae:	4b0e      	ldr	r3, [pc, #56]	; (b8ce8 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x188>)
   b8cb0:	429a      	cmp	r2, r3
   b8cb2:	d104      	bne.n	b8cbe <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x15e>
   b8cb4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8cb8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8cbc:	e7de      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_logNMEA.bits.UBX_NMEA_ZDA == 1))
   b8cbe:	4b0b      	ldr	r3, [pc, #44]	; (b8cec <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x18c>)
   b8cc0:	429a      	cmp	r2, r3
   b8cc2:	d104      	bne.n	b8cce <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x16e>
   b8cc4:	f890 00ee 	ldrb.w	r0, [r0, #238]	; 0xee
   b8cc8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8ccc:	e7d6      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
  return (false);
   b8cce:	2000      	movs	r0, #0
   b8cd0:	e7d4      	b.n	b8c7c <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv+0x11c>
   b8cd2:	bf00      	nop
   b8cd4:	4d544400 	.word	0x4d544400
   b8cd8:	4d4c5200 	.word	0x4d4c5200
   b8cdc:	434d5200 	.word	0x434d5200
   b8ce0:	54585400 	.word	0x54585400
   b8ce4:	574c5600 	.word	0x574c5600
   b8ce8:	47545600 	.word	0x47545600
   b8cec:	41445a00 	.word	0x41445a00

000b8cf0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>:
  if (nmeaAddressField[0] != '*')
   b8cf0:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   b8cf4:	2b2a      	cmp	r3, #42	; 0x2a
   b8cf6:	d157      	bne.n	b8da8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if (nmeaAddressField[1] != 'G')
   b8cf8:	f890 315f 	ldrb.w	r3, [r0, #351]	; 0x15f
   b8cfc:	2b47      	cmp	r3, #71	; 0x47
   b8cfe:	d153      	bne.n	b8da8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xb8>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M'))
   b8d00:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
   b8d04:	4a29      	ldr	r2, [pc, #164]	; (b8dac <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xbc>)
   b8d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   b8d0a:	4293      	cmp	r3, r2
   b8d0c:	d011      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if (nmeaAddressField[3] == 'G')
   b8d0e:	f890 2161 	ldrb.w	r2, [r0, #353]	; 0x161
   b8d12:	2a47      	cmp	r2, #71	; 0x47
   b8d14:	d11a      	bne.n	b8d4c <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x5c>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8d16:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
   b8d1a:	f5a2 41a2 	sub.w	r1, r2, #20736	; 0x5100
   b8d1e:	3941      	subs	r1, #65	; 0x41
   b8d20:	b289      	uxth	r1, r1
   b8d22:	2910      	cmp	r1, #16
   b8d24:	d907      	bls.n	b8d36 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x46>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S'))
   b8d26:	f022 0110 	bic.w	r1, r2, #16
   b8d2a:	f245 3042 	movw	r0, #21314	; 0x5342
   b8d2e:	4281      	cmp	r1, r0
   b8d30:	d129      	bne.n	b8d86 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x96>
    return (true);
   b8d32:	2001      	movs	r0, #1
}
   b8d34:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q'))
   b8d36:	481e      	ldr	r0, [pc, #120]	; (b8db0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc0>)
   b8d38:	fa20 f101 	lsr.w	r1, r0, r1
   b8d3c:	07c9      	lsls	r1, r1, #31
   b8d3e:	d4f8      	bmi.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T'))
   b8d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   b8d44:	f245 4153 	movw	r1, #21587	; 0x5453
   b8d48:	428a      	cmp	r2, r1
   b8d4a:	d0f2      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M'))
   b8d4c:	4a19      	ldr	r2, [pc, #100]	; (b8db4 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc4>)
   b8d4e:	4293      	cmp	r3, r2
   b8d50:	d0ef      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C'))
   b8d52:	f102 4276 	add.w	r2, r2, #4127195136	; 0xf6000000
   b8d56:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   b8d5a:	4293      	cmp	r3, r2
   b8d5c:	d0e9      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T'))
   b8d5e:	4a16      	ldr	r2, [pc, #88]	; (b8db8 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xc8>)
   b8d60:	4293      	cmp	r3, r2
   b8d62:	d0e6      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W'))
   b8d64:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   b8d68:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   b8d6c:	4293      	cmp	r3, r2
   b8d6e:	d0e0      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G'))
   b8d70:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
   b8d74:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
   b8d78:	4293      	cmp	r3, r2
   b8d7a:	d0da      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A'))
   b8d7c:	480f      	ldr	r0, [pc, #60]	; (b8dbc <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0xcc>)
   b8d7e:	1a1b      	subs	r3, r3, r0
   b8d80:	4258      	negs	r0, r3
   b8d82:	4158      	adcs	r0, r3
   b8d84:	4770      	bx	lr
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A'))
   b8d86:	f244 1147 	movw	r1, #16711	; 0x4147
   b8d8a:	428a      	cmp	r2, r1
   b8d8c:	d0d1      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L'))
   b8d8e:	f644 414c 	movw	r1, #19532	; 0x4c4c
   b8d92:	428a      	cmp	r2, r1
   b8d94:	d0cd      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S'))
   b8d96:	f245 314e 	movw	r1, #21326	; 0x534e
   b8d9a:	428a      	cmp	r2, r1
   b8d9c:	d0c9      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A'))
   b8d9e:	f244 1153 	movw	r1, #16723	; 0x4153
   b8da2:	428a      	cmp	r2, r1
   b8da4:	d0c5      	beq.n	b8d32 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x42>
   b8da6:	e7cb      	b.n	b8d40 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv+0x50>
    return (false);
   b8da8:	2000      	movs	r0, #0
   b8daa:	4770      	bx	lr
   b8dac:	4d544400 	.word	0x4d544400
   b8db0:	0001a803 	.word	0x0001a803
   b8db4:	4d4c5200 	.word	0x4d4c5200
   b8db8:	54585400 	.word	0x54585400
   b8dbc:	41445a00 	.word	0x41445a00

000b8dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>:
{
   b8dc0:	b510      	push	{r4, lr}
  if (_processNMEA.bits.all == 1)
   b8dc2:	f890 10f0 	ldrb.w	r1, [r0, #240]	; 0xf0
   b8dc6:	07ca      	lsls	r2, r1, #31
   b8dc8:	d415      	bmi.n	b8df6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'D') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_DTM == 1))
   b8dca:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
   b8dce:	4b59      	ldr	r3, [pc, #356]	; (b8f34 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x174>)
   b8dd0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   b8dd4:	429a      	cmp	r2, r3
   b8dd6:	d101      	bne.n	b8ddc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x1c>
   b8dd8:	078b      	lsls	r3, r1, #30
   b8dda:	d40c      	bmi.n	b8df6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if (nmeaAddressField[3] == 'G')
   b8ddc:	f890 3161 	ldrb.w	r3, [r0, #353]	; 0x161
   b8de0:	2b47      	cmp	r3, #71	; 0x47
   b8de2:	d174      	bne.n	b8ece <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    if ((nmeaAddressField[4] == 'A') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GAQ == 1))
   b8de4:	f8b0 3162 	ldrh.w	r3, [r0, #354]	; 0x162
   b8de8:	f245 1441 	movw	r4, #20801	; 0x5141
   b8dec:	42a3      	cmp	r3, r4
   b8dee:	d104      	bne.n	b8dfa <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x3a>
   b8df0:	f011 0f04 	tst.w	r1, #4
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8df4:	d06b      	beq.n	b8ece <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
    return (true);
   b8df6:	2001      	movs	r0, #1
   b8df8:	e070      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GBQ == 1))
   b8dfa:	f245 1442 	movw	r4, #20802	; 0x5142
   b8dfe:	42a3      	cmp	r3, r4
   b8e00:	d102      	bne.n	b8e08 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x48>
   b8e02:	f011 0f08 	tst.w	r1, #8
   b8e06:	e7f5      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'B') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GBS == 1))
   b8e08:	f245 3442 	movw	r4, #21314	; 0x5342
   b8e0c:	42a3      	cmp	r3, r4
   b8e0e:	d102      	bne.n	b8e16 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x56>
   b8e10:	f011 0f10 	tst.w	r1, #16
   b8e14:	e7ee      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'G') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GGA == 1))
   b8e16:	f244 1447 	movw	r4, #16711	; 0x4147
   b8e1a:	42a3      	cmp	r3, r4
   b8e1c:	d102      	bne.n	b8e24 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x64>
   b8e1e:	f011 0f20 	tst.w	r1, #32
   b8e22:	e7e7      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'L') && (_processNMEA.bits.UBX_NMEA_GLL == 1))
   b8e24:	f644 444c 	movw	r4, #19532	; 0x4c4c
   b8e28:	42a3      	cmp	r3, r4
   b8e2a:	d102      	bne.n	b8e32 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x72>
   b8e2c:	f011 0f40 	tst.w	r1, #64	; 0x40
   b8e30:	e7e0      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GLQ == 1))
   b8e32:	f245 144c 	movw	r4, #20812	; 0x514c
   b8e36:	42a3      	cmp	r3, r4
   b8e38:	d102      	bne.n	b8e40 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x80>
   b8e3a:	f011 0f80 	tst.w	r1, #128	; 0x80
   b8e3e:	e7d9      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GNQ == 1))
   b8e40:	f245 114e 	movw	r1, #20814	; 0x514e
   b8e44:	428b      	cmp	r3, r1
   b8e46:	d104      	bne.n	b8e52 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x92>
   b8e48:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8e4c:	f013 0f01 	tst.w	r3, #1
   b8e50:	e7d0      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'N') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GNS == 1))
   b8e52:	f245 314e 	movw	r1, #21326	; 0x534e
   b8e56:	428b      	cmp	r3, r1
   b8e58:	d104      	bne.n	b8e64 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xa4>
   b8e5a:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8e5e:	f013 0f02 	tst.w	r3, #2
   b8e62:	e7c7      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'P') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GPQ == 1))
   b8e64:	f245 1150 	movw	r1, #20816	; 0x5150
   b8e68:	428b      	cmp	r3, r1
   b8e6a:	d104      	bne.n	b8e76 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xb6>
   b8e6c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8e70:	f013 0f04 	tst.w	r3, #4
   b8e74:	e7be      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'Q') && (nmeaAddressField[5] == 'Q') && (_processNMEA.bits.UBX_NMEA_GQQ == 1))
   b8e76:	f245 1151 	movw	r1, #20817	; 0x5151
   b8e7a:	428b      	cmp	r3, r1
   b8e7c:	d104      	bne.n	b8e88 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xc8>
   b8e7e:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8e82:	f013 0f08 	tst.w	r3, #8
   b8e86:	e7b5      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'R') && (nmeaAddressField[5] == 'S') && (_processNMEA.bits.UBX_NMEA_GRS == 1))
   b8e88:	f245 3152 	movw	r1, #21330	; 0x5352
   b8e8c:	428b      	cmp	r3, r1
   b8e8e:	d104      	bne.n	b8e9a <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xda>
   b8e90:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8e94:	f013 0f10 	tst.w	r3, #16
   b8e98:	e7ac      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_GSA == 1))
   b8e9a:	f244 1153 	movw	r1, #16723	; 0x4153
   b8e9e:	428b      	cmp	r3, r1
   b8ea0:	d104      	bne.n	b8eac <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xec>
   b8ea2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8ea6:	f013 0f20 	tst.w	r3, #32
   b8eaa:	e7a3      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_GST == 1))
   b8eac:	f245 4153 	movw	r1, #21587	; 0x5453
   b8eb0:	428b      	cmp	r3, r1
   b8eb2:	d104      	bne.n	b8ebe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0xfe>
   b8eb4:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   b8eb8:	f013 0f40 	tst.w	r3, #64	; 0x40
   b8ebc:	e79a      	b.n	b8df4 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x34>
    if ((nmeaAddressField[4] == 'S') && (nmeaAddressField[5] == 'V') && (_processNMEA.bits.UBX_NMEA_GSV == 1))
   b8ebe:	f245 6153 	movw	r1, #22099	; 0x5653
   b8ec2:	428b      	cmp	r3, r1
   b8ec4:	d103      	bne.n	b8ece <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x10e>
   b8ec6:	f990 30f1 	ldrsb.w	r3, [r0, #241]	; 0xf1
   b8eca:	2b00      	cmp	r3, #0
   b8ecc:	db93      	blt.n	b8df6 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x36>
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'M') && (_processNMEA.bits.UBX_NMEA_RLM == 1))
   b8ece:	4b1a      	ldr	r3, [pc, #104]	; (b8f38 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x178>)
   b8ed0:	429a      	cmp	r2, r3
   b8ed2:	d104      	bne.n	b8ede <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11e>
   b8ed4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8ed8:	f000 0001 	and.w	r0, r0, #1
}
   b8edc:	bd10      	pop	{r4, pc}
  if ((nmeaAddressField[3] == 'R') && (nmeaAddressField[4] == 'M') && (nmeaAddressField[5] == 'C') && (_processNMEA.bits.UBX_NMEA_RMC == 1))
   b8ede:	4b17      	ldr	r3, [pc, #92]	; (b8f3c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x17c>)
   b8ee0:	429a      	cmp	r2, r3
   b8ee2:	d104      	bne.n	b8eee <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x12e>
   b8ee4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8ee8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   b8eec:	e7f6      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'T') && (nmeaAddressField[4] == 'X') && (nmeaAddressField[5] == 'T') && (_processNMEA.bits.UBX_NMEA_TXT == 1))
   b8eee:	4b14      	ldr	r3, [pc, #80]	; (b8f40 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x180>)
   b8ef0:	429a      	cmp	r2, r3
   b8ef2:	d104      	bne.n	b8efe <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x13e>
   b8ef4:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8ef8:	f3c0 0080 	ubfx	r0, r0, #2, #1
   b8efc:	e7ee      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'L') && (nmeaAddressField[5] == 'W') && (_processNMEA.bits.UBX_NMEA_VLW == 1))
   b8efe:	4b11      	ldr	r3, [pc, #68]	; (b8f44 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x184>)
   b8f00:	429a      	cmp	r2, r3
   b8f02:	d104      	bne.n	b8f0e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x14e>
   b8f04:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f08:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b8f0c:	e7e6      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'V') && (nmeaAddressField[4] == 'T') && (nmeaAddressField[5] == 'G') && (_processNMEA.bits.UBX_NMEA_VTG == 1))
   b8f0e:	4b0e      	ldr	r3, [pc, #56]	; (b8f48 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x188>)
   b8f10:	429a      	cmp	r2, r3
   b8f12:	d104      	bne.n	b8f1e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x15e>
   b8f14:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f18:	f3c0 1000 	ubfx	r0, r0, #4, #1
   b8f1c:	e7de      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  if ((nmeaAddressField[3] == 'Z') && (nmeaAddressField[4] == 'D') && (nmeaAddressField[5] == 'A') && (_processNMEA.bits.UBX_NMEA_ZDA == 1))
   b8f1e:	4b0b      	ldr	r3, [pc, #44]	; (b8f4c <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x18c>)
   b8f20:	429a      	cmp	r2, r3
   b8f22:	d104      	bne.n	b8f2e <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x16e>
   b8f24:	f890 00f2 	ldrb.w	r0, [r0, #242]	; 0xf2
   b8f28:	f3c0 1040 	ubfx	r0, r0, #5, #1
   b8f2c:	e7d6      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
  return (false);
   b8f2e:	2000      	movs	r0, #0
   b8f30:	e7d4      	b.n	b8edc <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv+0x11c>
   b8f32:	bf00      	nop
   b8f34:	4d544400 	.word	0x4d544400
   b8f38:	4d4c5200 	.word	0x4d4c5200
   b8f3c:	434d5200 	.word	0x434d5200
   b8f40:	54585400 	.word	0x54585400
   b8f44:	574c5600 	.word	0x574c5600
   b8f48:	47545600 	.word	0x47545600
   b8f4c:	41445a00 	.word	0x41445a00

000b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>:
  if (_nmeaOutputPort != NULL)
   b8f50:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b8f54:	b110      	cbz	r0, b8f5c <_ZN14SFE_UBLOX_GNSS11processNMEAEc+0xc>
    _nmeaOutputPort->write(incoming); // Echo this byte to the serial port
   b8f56:	6803      	ldr	r3, [r0, #0]
   b8f58:	689b      	ldr	r3, [r3, #8]
   b8f5a:	4718      	bx	r3
}
   b8f5c:	4770      	bx	lr
	...

000b8f60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>:
{
   b8f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b8f62:	4b3d      	ldr	r3, [pc, #244]	; (b9058 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf8>)
{
   b8f64:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f66:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b8f6a:	6818      	ldr	r0, [r3, #0]
   b8f6c:	9000      	str	r0, [sp, #0]
   b8f6e:	889b      	ldrh	r3, [r3, #4]
   b8f70:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f74:	2205      	movs	r2, #5
   b8f76:	4629      	mov	r1, r5
   b8f78:	4668      	mov	r0, sp
   b8f7a:	f00b fac5 	bl	c4508 <memcmp>
   b8f7e:	b928      	cbnz	r0, b8f8c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
    if (storageNMEAGPGGA != NULL)
   b8f80:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b8f84:	b113      	cbz	r3, b8f8c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x2c>
      return true;
   b8f86:	2001      	movs	r0, #1
}
   b8f88:	b003      	add	sp, #12
   b8f8a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b8f8c:	4933      	ldr	r1, [pc, #204]	; (b905c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xfc>)
   b8f8e:	4668      	mov	r0, sp
   b8f90:	f00b fb58 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8f94:	2205      	movs	r2, #5
   b8f96:	4629      	mov	r1, r5
   b8f98:	4668      	mov	r0, sp
   b8f9a:	f00b fab5 	bl	c4508 <memcmp>
   b8f9e:	b918      	cbnz	r0, b8fa8 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x48>
    if (storageNMEAGNGGA != NULL)
   b8fa0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b8fa4:	2b00      	cmp	r3, #0
   b8fa6:	d1ee      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPVTG");
   b8fa8:	492d      	ldr	r1, [pc, #180]	; (b9060 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x100>)
   b8faa:	4668      	mov	r0, sp
   b8fac:	f00b fb4a 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fb0:	2205      	movs	r2, #5
   b8fb2:	4629      	mov	r1, r5
   b8fb4:	4668      	mov	r0, sp
   b8fb6:	f00b faa7 	bl	c4508 <memcmp>
   b8fba:	b918      	cbnz	r0, b8fc4 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x64>
    if (storageNMEAGPVTG != NULL)
   b8fbc:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b8fc0:	2b00      	cmp	r3, #0
   b8fc2:	d1e0      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNVTG");
   b8fc4:	4927      	ldr	r1, [pc, #156]	; (b9064 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x104>)
   b8fc6:	4668      	mov	r0, sp
   b8fc8:	f00b fb3c 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fcc:	2205      	movs	r2, #5
   b8fce:	4629      	mov	r1, r5
   b8fd0:	4668      	mov	r0, sp
   b8fd2:	f00b fa99 	bl	c4508 <memcmp>
   b8fd6:	b918      	cbnz	r0, b8fe0 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x80>
    if (storageNMEAGNVTG != NULL)
   b8fd8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b8fdc:	2b00      	cmp	r3, #0
   b8fde:	d1d2      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPRMC");
   b8fe0:	4921      	ldr	r1, [pc, #132]	; (b9068 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x108>)
   b8fe2:	4668      	mov	r0, sp
   b8fe4:	f00b fb2e 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b8fe8:	2205      	movs	r2, #5
   b8fea:	4629      	mov	r1, r5
   b8fec:	4668      	mov	r0, sp
   b8fee:	f00b fa8b 	bl	c4508 <memcmp>
   b8ff2:	b918      	cbnz	r0, b8ffc <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x9c>
    if (storageNMEAGPRMC != NULL)
   b8ff4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b8ff8:	2b00      	cmp	r3, #0
   b8ffa:	d1c4      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNRMC");
   b8ffc:	491b      	ldr	r1, [pc, #108]	; (b906c <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x10c>)
   b8ffe:	4668      	mov	r0, sp
   b9000:	f00b fb20 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9004:	2205      	movs	r2, #5
   b9006:	4629      	mov	r1, r5
   b9008:	4668      	mov	r0, sp
   b900a:	f00b fa7d 	bl	c4508 <memcmp>
   b900e:	b918      	cbnz	r0, b9018 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xb8>
    if (storageNMEAGNRMC != NULL)
   b9010:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9014:	2b00      	cmp	r3, #0
   b9016:	d1b6      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GPZDA");
   b9018:	4915      	ldr	r1, [pc, #84]	; (b9070 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x110>)
   b901a:	4668      	mov	r0, sp
   b901c:	f00b fb12 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9020:	2205      	movs	r2, #5
   b9022:	4629      	mov	r1, r5
   b9024:	4668      	mov	r0, sp
   b9026:	f00b fa6f 	bl	c4508 <memcmp>
   b902a:	b918      	cbnz	r0, b9034 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xd4>
    if (storageNMEAGPZDA != NULL)
   b902c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b9030:	2b00      	cmp	r3, #0
   b9032:	d1a8      	bne.n	b8f86 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b9034:	490f      	ldr	r1, [pc, #60]	; (b9074 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x114>)
   b9036:	4668      	mov	r0, sp
   b9038:	f00b fb04 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b903c:	2205      	movs	r2, #5
   b903e:	4629      	mov	r1, r5
   b9040:	4668      	mov	r0, sp
   b9042:	f00b fa61 	bl	c4508 <memcmp>
   b9046:	b928      	cbnz	r0, b9054 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0xf4>
    if (storageNMEAGNZDA != NULL)
   b9048:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b904c:	3800      	subs	r0, #0
   b904e:	bf18      	it	ne
   b9050:	2001      	movne	r0, #1
   b9052:	e799      	b.n	b8f88 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
  return false;
   b9054:	2000      	movs	r0, #0
   b9056:	e797      	b.n	b8f88 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv+0x28>
   b9058:	000c6f80 	.word	0x000c6f80
   b905c:	000c6f56 	.word	0x000c6f56
   b9060:	000c6f5c 	.word	0x000c6f5c
   b9064:	000c6f62 	.word	0x000c6f62
   b9068:	000c6f68 	.word	0x000c6f68
   b906c:	000c6f6e 	.word	0x000c6f6e
   b9070:	000c6f74 	.word	0x000c6f74
   b9074:	000c6f7a 	.word	0x000c6f7a

000b9078 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>:
{
   b9078:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b907a:	4b62      	ldr	r3, [pc, #392]	; (b9204 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x18c>)
{
   b907c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b907e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9082:	6818      	ldr	r0, [r3, #0]
   b9084:	9000      	str	r0, [sp, #0]
   b9086:	889b      	ldrh	r3, [r3, #4]
   b9088:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b908c:	2205      	movs	r2, #5
   b908e:	4629      	mov	r1, r5
   b9090:	4668      	mov	r0, sp
   b9092:	f00b fa39 	bl	c4508 <memcmp>
   b9096:	b978      	cbnz	r0, b90b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
    if (storageNMEAGPGGA != NULL)
   b9098:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   b909c:	b163      	cbz	r3, b90b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
      if (storageNMEAGPGGA->callbackCopy != NULL)
   b909e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b90a2:	b14a      	cbz	r2, b90b8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x40>
        if ((storageNMEAGPGGA->callbackPointer != NULL) || (storageNMEAGPGGA->callbackPointerPtr != NULL))
   b90a4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b90a8:	2a00      	cmp	r2, #0
   b90aa:	f040 80a3 	bne.w	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b90ae:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b90b2:	2b00      	cmp	r3, #0
   b90b4:	f040 809e 	bne.w	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNGGA");
   b90b8:	4953      	ldr	r1, [pc, #332]	; (b9208 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x190>)
   b90ba:	4668      	mov	r0, sp
   b90bc:	f00b fac2 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90c0:	2205      	movs	r2, #5
   b90c2:	4629      	mov	r1, r5
   b90c4:	4668      	mov	r0, sp
   b90c6:	f00b fa1f 	bl	c4508 <memcmp>
   b90ca:	b978      	cbnz	r0, b90ec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
    if (storageNMEAGNGGA != NULL)
   b90cc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b90d0:	b163      	cbz	r3, b90ec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
      if (storageNMEAGNGGA->callbackCopy != NULL)
   b90d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b90d6:	b14a      	cbz	r2, b90ec <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x74>
        if ((storageNMEAGNGGA->callbackPointer != NULL) || (storageNMEAGNGGA->callbackPointerPtr != NULL))
   b90d8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b90dc:	2a00      	cmp	r2, #0
   b90de:	f040 8089 	bne.w	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b90e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b90e6:	2b00      	cmp	r3, #0
   b90e8:	f040 8084 	bne.w	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPVTG");
   b90ec:	4947      	ldr	r1, [pc, #284]	; (b920c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x194>)
   b90ee:	4668      	mov	r0, sp
   b90f0:	f00b faa8 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b90f4:	2205      	movs	r2, #5
   b90f6:	4629      	mov	r1, r5
   b90f8:	4668      	mov	r0, sp
   b90fa:	f00b fa05 	bl	c4508 <memcmp>
   b90fe:	b968      	cbnz	r0, b911c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
    if (storageNMEAGPVTG != NULL)
   b9100:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b9104:	b153      	cbz	r3, b911c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
      if (storageNMEAGPVTG->callbackCopy != NULL)
   b9106:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b910a:	b13a      	cbz	r2, b911c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xa4>
        if ((storageNMEAGPVTG->callbackPointer != NULL) || (storageNMEAGPVTG->callbackPointerPtr != NULL))
   b910c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b9110:	2a00      	cmp	r2, #0
   b9112:	d16f      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9114:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9118:	2b00      	cmp	r3, #0
   b911a:	d16b      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNVTG");
   b911c:	493c      	ldr	r1, [pc, #240]	; (b9210 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x198>)
   b911e:	4668      	mov	r0, sp
   b9120:	f00b fa90 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9124:	2205      	movs	r2, #5
   b9126:	4629      	mov	r1, r5
   b9128:	4668      	mov	r0, sp
   b912a:	f00b f9ed 	bl	c4508 <memcmp>
   b912e:	b968      	cbnz	r0, b914c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
    if (storageNMEAGNVTG != NULL)
   b9130:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b9134:	b153      	cbz	r3, b914c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
      if (storageNMEAGNVTG->callbackCopy != NULL)
   b9136:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b913a:	b13a      	cbz	r2, b914c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0xd4>
        if ((storageNMEAGNVTG->callbackPointer != NULL) || (storageNMEAGNVTG->callbackPointerPtr != NULL))
   b913c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b9140:	2a00      	cmp	r2, #0
   b9142:	d157      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9144:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9148:	2b00      	cmp	r3, #0
   b914a:	d153      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPRMC");
   b914c:	4931      	ldr	r1, [pc, #196]	; (b9214 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x19c>)
   b914e:	4668      	mov	r0, sp
   b9150:	f00b fa78 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9154:	2205      	movs	r2, #5
   b9156:	4629      	mov	r1, r5
   b9158:	4668      	mov	r0, sp
   b915a:	f00b f9d5 	bl	c4508 <memcmp>
   b915e:	b968      	cbnz	r0, b917c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
    if (storageNMEAGPRMC != NULL)
   b9160:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b9164:	b153      	cbz	r3, b917c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
      if (storageNMEAGPRMC->callbackCopy != NULL)
   b9166:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b916a:	b13a      	cbz	r2, b917c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x104>
        if ((storageNMEAGPRMC->callbackPointer != NULL) || (storageNMEAGPRMC->callbackPointerPtr != NULL))
   b916c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b9170:	2a00      	cmp	r2, #0
   b9172:	d13f      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b9174:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b9178:	2b00      	cmp	r3, #0
   b917a:	d13b      	bne.n	b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNRMC");
   b917c:	4926      	ldr	r1, [pc, #152]	; (b9218 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a0>)
   b917e:	4668      	mov	r0, sp
   b9180:	f00b fa60 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9184:	2205      	movs	r2, #5
   b9186:	4629      	mov	r1, r5
   b9188:	4668      	mov	r0, sp
   b918a:	f00b f9bd 	bl	c4508 <memcmp>
   b918e:	b958      	cbnz	r0, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
    if (storageNMEAGNRMC != NULL)
   b9190:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b9194:	b143      	cbz	r3, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
      if (storageNMEAGNRMC->callbackCopy != NULL)
   b9196:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   b919a:	b12a      	cbz	r2, b91a8 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x130>
        if ((storageNMEAGNRMC->callbackPointer != NULL) || (storageNMEAGNRMC->callbackPointerPtr != NULL))
   b919c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   b91a0:	bb42      	cbnz	r2, b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   b91a6:	bb2b      	cbnz	r3, b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GPZDA");
   b91a8:	491c      	ldr	r1, [pc, #112]	; (b921c <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a4>)
   b91aa:	4668      	mov	r0, sp
   b91ac:	f00b fa4a 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91b0:	2205      	movs	r2, #5
   b91b2:	4629      	mov	r1, r5
   b91b4:	4668      	mov	r0, sp
   b91b6:	f00b f9a7 	bl	c4508 <memcmp>
   b91ba:	b940      	cbnz	r0, b91ce <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
    if (storageNMEAGPZDA != NULL)
   b91bc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   b91c0:	b12b      	cbz	r3, b91ce <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
      if (storageNMEAGPZDA->callbackCopy != NULL)
   b91c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   b91c4:	b11a      	cbz	r2, b91ce <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x156>
        if ((storageNMEAGPZDA->callbackPointer != NULL) || (storageNMEAGPZDA->callbackPointerPtr != NULL))
   b91c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b91c8:	b9a2      	cbnz	r2, b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b91cc:	b993      	cbnz	r3, b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
  strcpy(thisNMEA, "GNZDA");
   b91ce:	4914      	ldr	r1, [pc, #80]	; (b9220 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x1a8>)
   b91d0:	4668      	mov	r0, sp
   b91d2:	f00b fa37 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b91d6:	2205      	movs	r2, #5
   b91d8:	4629      	mov	r1, r5
   b91da:	4668      	mov	r0, sp
   b91dc:	f00b f994 	bl	c4508 <memcmp>
   b91e0:	b958      	cbnz	r0, b91fa <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x182>
    if (storageNMEAGNZDA != NULL)
   b91e2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b91e6:	b153      	cbz	r3, b91fe <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x186>
      if (storageNMEAGNZDA->callbackCopy != NULL)
   b91e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b91ea:	b120      	cbz	r0, b91f6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
        if ((storageNMEAGNZDA->callbackPointer != NULL) || (storageNMEAGNZDA->callbackPointerPtr != NULL))
   b91ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   b91ee:	b90a      	cbnz	r2, b91f4 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17c>
   b91f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   b91f2:	b100      	cbz	r0, b91f6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
          return true;
   b91f4:	2001      	movs	r0, #1
}
   b91f6:	b003      	add	sp, #12
   b91f8:	bd30      	pop	{r4, r5, pc}
  return false;
   b91fa:	2000      	movs	r0, #0
   b91fc:	e7fb      	b.n	b91f6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b91fe:	4618      	mov	r0, r3
   b9200:	e7f9      	b.n	b91f6 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv+0x17e>
   b9202:	bf00      	nop
   b9204:	000c6f80 	.word	0x000c6f80
   b9208:	000c6f56 	.word	0x000c6f56
   b920c:	000c6f5c 	.word	0x000c6f5c
   b9210:	000c6f62 	.word	0x000c6f62
   b9214:	000c6f68 	.word	0x000c6f68
   b9218:	000c6f6e 	.word	0x000c6f6e
   b921c:	000c6f74 	.word	0x000c6f74
   b9220:	000c6f7a 	.word	0x000c6f7a

000b9224 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>:
{
   b9224:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9226:	4b38      	ldr	r3, [pc, #224]	; (b9308 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe4>)
{
   b9228:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b922a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b922e:	6818      	ldr	r0, [r3, #0]
   b9230:	9000      	str	r0, [sp, #0]
   b9232:	889b      	ldrh	r3, [r3, #4]
   b9234:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9238:	2205      	movs	r2, #5
   b923a:	4629      	mov	r1, r5
   b923c:	4668      	mov	r0, sp
   b923e:	f00b f963 	bl	c4508 <memcmp>
   b9242:	b920      	cbnz	r0, b924e <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.length;
   b9244:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.length;
   b9248:	3001      	adds	r0, #1
}
   b924a:	b003      	add	sp, #12
   b924c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b924e:	492f      	ldr	r1, [pc, #188]	; (b930c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe8>)
   b9250:	4668      	mov	r0, sp
   b9252:	f00b f9f7 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9256:	2205      	movs	r2, #5
   b9258:	4629      	mov	r1, r5
   b925a:	4668      	mov	r0, sp
   b925c:	f00b f954 	bl	c4508 <memcmp>
   b9260:	b910      	cbnz	r0, b9268 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.length;
   b9262:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9266:	e7ef      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9268:	4929      	ldr	r1, [pc, #164]	; (b9310 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xec>)
   b926a:	4668      	mov	r0, sp
   b926c:	f00b f9ea 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9270:	2205      	movs	r2, #5
   b9272:	4629      	mov	r1, r5
   b9274:	4668      	mov	r0, sp
   b9276:	f00b f947 	bl	c4508 <memcmp>
   b927a:	b910      	cbnz	r0, b9282 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.length;
   b927c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9280:	e7e2      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9282:	4924      	ldr	r1, [pc, #144]	; (b9314 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf0>)
   b9284:	4668      	mov	r0, sp
   b9286:	f00b f9dd 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b928a:	2205      	movs	r2, #5
   b928c:	4629      	mov	r1, r5
   b928e:	4668      	mov	r0, sp
   b9290:	f00b f93a 	bl	c4508 <memcmp>
   b9294:	b910      	cbnz	r0, b929c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.length;
   b9296:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b929a:	e7d5      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b929c:	491e      	ldr	r1, [pc, #120]	; (b9318 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf4>)
   b929e:	4668      	mov	r0, sp
   b92a0:	f00b f9d0 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92a4:	2205      	movs	r2, #5
   b92a6:	4629      	mov	r1, r5
   b92a8:	4668      	mov	r0, sp
   b92aa:	f00b f92d 	bl	c4508 <memcmp>
   b92ae:	b910      	cbnz	r0, b92b6 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.length;
   b92b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b92b4:	e7c8      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b92b6:	4919      	ldr	r1, [pc, #100]	; (b931c <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xf8>)
   b92b8:	4668      	mov	r0, sp
   b92ba:	f00b f9c3 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92be:	2205      	movs	r2, #5
   b92c0:	4629      	mov	r1, r5
   b92c2:	4668      	mov	r0, sp
   b92c4:	f00b f920 	bl	c4508 <memcmp>
   b92c8:	b910      	cbnz	r0, b92d0 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.length;
   b92ca:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b92ce:	e7bb      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b92d0:	4913      	ldr	r1, [pc, #76]	; (b9320 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xfc>)
   b92d2:	4668      	mov	r0, sp
   b92d4:	f00b f9b6 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92d8:	2205      	movs	r2, #5
   b92da:	4629      	mov	r1, r5
   b92dc:	4668      	mov	r0, sp
   b92de:	f00b f913 	bl	c4508 <memcmp>
   b92e2:	b910      	cbnz	r0, b92ea <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.length;
   b92e4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b92e8:	e7ae      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b92ea:	490e      	ldr	r1, [pc, #56]	; (b9324 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x100>)
   b92ec:	4668      	mov	r0, sp
   b92ee:	f00b f9a9 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b92f2:	2205      	movs	r2, #5
   b92f4:	4629      	mov	r1, r5
   b92f6:	4668      	mov	r0, sp
   b92f8:	f00b f906 	bl	c4508 <memcmp>
   b92fc:	b910      	cbnz	r0, b9304 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.length;
   b92fe:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9302:	e7a1      	b.n	b9248 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x24>
  return NULL;
   b9304:	2000      	movs	r0, #0
   b9306:	e7a0      	b.n	b924a <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv+0x26>
   b9308:	000c6f80 	.word	0x000c6f80
   b930c:	000c6f56 	.word	0x000c6f56
   b9310:	000c6f5c 	.word	0x000c6f5c
   b9314:	000c6f62 	.word	0x000c6f62
   b9318:	000c6f68 	.word	0x000c6f68
   b931c:	000c6f6e 	.word	0x000c6f6e
   b9320:	000c6f74 	.word	0x000c6f74
   b9324:	000c6f7a 	.word	0x000c6f7a

000b9328 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>:
{
   b9328:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b932a:	4b38      	ldr	r3, [pc, #224]	; (b940c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe4>)
{
   b932c:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b932e:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9332:	6818      	ldr	r0, [r3, #0]
   b9334:	9000      	str	r0, [sp, #0]
   b9336:	889b      	ldrh	r3, [r3, #4]
   b9338:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b933c:	2205      	movs	r2, #5
   b933e:	4629      	mov	r1, r5
   b9340:	4668      	mov	r0, sp
   b9342:	f00b f8e1 	bl	c4508 <memcmp>
   b9346:	b920      	cbnz	r0, b9352 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->workingCopy.nmea[0];
   b9348:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b934c:	3002      	adds	r0, #2
}
   b934e:	b003      	add	sp, #12
   b9350:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9352:	492f      	ldr	r1, [pc, #188]	; (b9410 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe8>)
   b9354:	4668      	mov	r0, sp
   b9356:	f00b f975 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b935a:	2205      	movs	r2, #5
   b935c:	4629      	mov	r1, r5
   b935e:	4668      	mov	r0, sp
   b9360:	f00b f8d2 	bl	c4508 <memcmp>
   b9364:	b910      	cbnz	r0, b936c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->workingCopy.nmea[0];
   b9366:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b936a:	e7ef      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b936c:	4929      	ldr	r1, [pc, #164]	; (b9414 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xec>)
   b936e:	4668      	mov	r0, sp
   b9370:	f00b f968 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9374:	2205      	movs	r2, #5
   b9376:	4629      	mov	r1, r5
   b9378:	4668      	mov	r0, sp
   b937a:	f00b f8c5 	bl	c4508 <memcmp>
   b937e:	b910      	cbnz	r0, b9386 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->workingCopy.nmea[0];
   b9380:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9384:	e7e2      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9386:	4924      	ldr	r1, [pc, #144]	; (b9418 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf0>)
   b9388:	4668      	mov	r0, sp
   b938a:	f00b f95b 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b938e:	2205      	movs	r2, #5
   b9390:	4629      	mov	r1, r5
   b9392:	4668      	mov	r0, sp
   b9394:	f00b f8b8 	bl	c4508 <memcmp>
   b9398:	b910      	cbnz	r0, b93a0 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->workingCopy.nmea[0];
   b939a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b939e:	e7d5      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b93a0:	491e      	ldr	r1, [pc, #120]	; (b941c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf4>)
   b93a2:	4668      	mov	r0, sp
   b93a4:	f00b f94e 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93a8:	2205      	movs	r2, #5
   b93aa:	4629      	mov	r1, r5
   b93ac:	4668      	mov	r0, sp
   b93ae:	f00b f8ab 	bl	c4508 <memcmp>
   b93b2:	b910      	cbnz	r0, b93ba <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->workingCopy.nmea[0];
   b93b4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b93b8:	e7c8      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b93ba:	4919      	ldr	r1, [pc, #100]	; (b9420 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xf8>)
   b93bc:	4668      	mov	r0, sp
   b93be:	f00b f941 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93c2:	2205      	movs	r2, #5
   b93c4:	4629      	mov	r1, r5
   b93c6:	4668      	mov	r0, sp
   b93c8:	f00b f89e 	bl	c4508 <memcmp>
   b93cc:	b910      	cbnz	r0, b93d4 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->workingCopy.nmea[0];
   b93ce:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b93d2:	e7bb      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b93d4:	4913      	ldr	r1, [pc, #76]	; (b9424 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xfc>)
   b93d6:	4668      	mov	r0, sp
   b93d8:	f00b f934 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93dc:	2205      	movs	r2, #5
   b93de:	4629      	mov	r1, r5
   b93e0:	4668      	mov	r0, sp
   b93e2:	f00b f891 	bl	c4508 <memcmp>
   b93e6:	b910      	cbnz	r0, b93ee <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xc6>
    return &storageNMEAGPZDA->workingCopy.nmea[0];
   b93e8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b93ec:	e7ae      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b93ee:	490e      	ldr	r1, [pc, #56]	; (b9428 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x100>)
   b93f0:	4668      	mov	r0, sp
   b93f2:	f00b f927 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b93f6:	2205      	movs	r2, #5
   b93f8:	4629      	mov	r1, r5
   b93fa:	4668      	mov	r0, sp
   b93fc:	f00b f884 	bl	c4508 <memcmp>
   b9400:	b910      	cbnz	r0, b9408 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0xe0>
    return &storageNMEAGNZDA->workingCopy.nmea[0];
   b9402:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9406:	e7a1      	b.n	b934c <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x24>
  return NULL;
   b9408:	2000      	movs	r0, #0
   b940a:	e7a0      	b.n	b934e <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv+0x26>
   b940c:	000c6f80 	.word	0x000c6f80
   b9410:	000c6f56 	.word	0x000c6f56
   b9414:	000c6f5c 	.word	0x000c6f5c
   b9418:	000c6f62 	.word	0x000c6f62
   b941c:	000c6f68 	.word	0x000c6f68
   b9420:	000c6f6e 	.word	0x000c6f6e
   b9424:	000c6f74 	.word	0x000c6f74
   b9428:	000c6f7a 	.word	0x000c6f7a

000b942c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>:
{
   b942c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b942e:	4b39      	ldr	r3, [pc, #228]	; (b9514 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe8>)
{
   b9430:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9432:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9436:	6818      	ldr	r0, [r3, #0]
   b9438:	9000      	str	r0, [sp, #0]
   b943a:	889b      	ldrh	r3, [r3, #4]
   b943c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9440:	2205      	movs	r2, #5
   b9442:	4629      	mov	r1, r5
   b9444:	4668      	mov	r0, sp
   b9446:	f00b f85f 	bl	c4508 <memcmp>
   b944a:	b920      	cbnz	r0, b9456 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.length;
   b944c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.length;
   b9450:	3066      	adds	r0, #102	; 0x66
}
   b9452:	b003      	add	sp, #12
   b9454:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9456:	4930      	ldr	r1, [pc, #192]	; (b9518 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xec>)
   b9458:	4668      	mov	r0, sp
   b945a:	f00b f8f3 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b945e:	2205      	movs	r2, #5
   b9460:	4629      	mov	r1, r5
   b9462:	4668      	mov	r0, sp
   b9464:	f00b f850 	bl	c4508 <memcmp>
   b9468:	b910      	cbnz	r0, b9470 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.length;
   b946a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b946e:	e7ef      	b.n	b9450 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9470:	492a      	ldr	r1, [pc, #168]	; (b951c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf0>)
   b9472:	4668      	mov	r0, sp
   b9474:	f00b f8e6 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9478:	2205      	movs	r2, #5
   b947a:	4629      	mov	r1, r5
   b947c:	4668      	mov	r0, sp
   b947e:	f00b f843 	bl	c4508 <memcmp>
   b9482:	b910      	cbnz	r0, b948a <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.length;
   b9484:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9488:	e7e2      	b.n	b9450 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b948a:	4925      	ldr	r1, [pc, #148]	; (b9520 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf4>)
   b948c:	4668      	mov	r0, sp
   b948e:	f00b f8d9 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9492:	2205      	movs	r2, #5
   b9494:	4629      	mov	r1, r5
   b9496:	4668      	mov	r0, sp
   b9498:	f00b f836 	bl	c4508 <memcmp>
   b949c:	b910      	cbnz	r0, b94a4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.length;
   b949e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b94a2:	e7d5      	b.n	b9450 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b94a4:	491f      	ldr	r1, [pc, #124]	; (b9524 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xf8>)
   b94a6:	4668      	mov	r0, sp
   b94a8:	f00b f8cc 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94ac:	2205      	movs	r2, #5
   b94ae:	4629      	mov	r1, r5
   b94b0:	4668      	mov	r0, sp
   b94b2:	f00b f829 	bl	c4508 <memcmp>
   b94b6:	b910      	cbnz	r0, b94be <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.length;
   b94b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b94bc:	e7c8      	b.n	b9450 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b94be:	491a      	ldr	r1, [pc, #104]	; (b9528 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xfc>)
   b94c0:	4668      	mov	r0, sp
   b94c2:	f00b f8bf 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94c6:	2205      	movs	r2, #5
   b94c8:	4629      	mov	r1, r5
   b94ca:	4668      	mov	r0, sp
   b94cc:	f00b f81c 	bl	c4508 <memcmp>
   b94d0:	b910      	cbnz	r0, b94d8 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.length;
   b94d2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b94d6:	e7bb      	b.n	b9450 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b94d8:	4914      	ldr	r1, [pc, #80]	; (b952c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x100>)
   b94da:	4668      	mov	r0, sp
   b94dc:	f00b f8b2 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94e0:	2205      	movs	r2, #5
   b94e2:	4629      	mov	r1, r5
   b94e4:	4668      	mov	r0, sp
   b94e6:	f00b f80f 	bl	c4508 <memcmp>
   b94ea:	b918      	cbnz	r0, b94f4 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.length;
   b94ec:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.length;
   b94f0:	3034      	adds	r0, #52	; 0x34
   b94f2:	e7ae      	b.n	b9452 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b94f4:	490e      	ldr	r1, [pc, #56]	; (b9530 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x104>)
   b94f6:	4668      	mov	r0, sp
   b94f8:	f00b f8a4 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b94fc:	2205      	movs	r2, #5
   b94fe:	4629      	mov	r1, r5
   b9500:	4668      	mov	r0, sp
   b9502:	f00b f801 	bl	c4508 <memcmp>
   b9506:	b910      	cbnz	r0, b950e <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.length;
   b9508:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b950c:	e7f0      	b.n	b94f0 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0xc4>
  return NULL;
   b950e:	2000      	movs	r0, #0
   b9510:	e79f      	b.n	b9452 <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv+0x26>
   b9512:	bf00      	nop
   b9514:	000c6f80 	.word	0x000c6f80
   b9518:	000c6f56 	.word	0x000c6f56
   b951c:	000c6f5c 	.word	0x000c6f5c
   b9520:	000c6f62 	.word	0x000c6f62
   b9524:	000c6f68 	.word	0x000c6f68
   b9528:	000c6f6e 	.word	0x000c6f6e
   b952c:	000c6f74 	.word	0x000c6f74
   b9530:	000c6f7a 	.word	0x000c6f7a

000b9534 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>:
{
   b9534:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9536:	4b39      	ldr	r3, [pc, #228]	; (b961c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe8>)
{
   b9538:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b953a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b953e:	6818      	ldr	r0, [r3, #0]
   b9540:	9000      	str	r0, [sp, #0]
   b9542:	889b      	ldrh	r3, [r3, #4]
   b9544:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9548:	2205      	movs	r2, #5
   b954a:	4629      	mov	r1, r5
   b954c:	4668      	mov	r0, sp
   b954e:	f00a ffdb 	bl	c4508 <memcmp>
   b9552:	b920      	cbnz	r0, b955e <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x2a>
    return &storageNMEAGPGGA->completeCopy.nmea[0];
   b9554:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9558:	3067      	adds	r0, #103	; 0x67
}
   b955a:	b003      	add	sp, #12
   b955c:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b955e:	4930      	ldr	r1, [pc, #192]	; (b9620 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xec>)
   b9560:	4668      	mov	r0, sp
   b9562:	f00b f86f 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9566:	2205      	movs	r2, #5
   b9568:	4629      	mov	r1, r5
   b956a:	4668      	mov	r0, sp
   b956c:	f00a ffcc 	bl	c4508 <memcmp>
   b9570:	b910      	cbnz	r0, b9578 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x44>
    return &storageNMEAGNGGA->completeCopy.nmea[0];
   b9572:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9576:	e7ef      	b.n	b9558 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9578:	492a      	ldr	r1, [pc, #168]	; (b9624 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf0>)
   b957a:	4668      	mov	r0, sp
   b957c:	f00b f862 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9580:	2205      	movs	r2, #5
   b9582:	4629      	mov	r1, r5
   b9584:	4668      	mov	r0, sp
   b9586:	f00a ffbf 	bl	c4508 <memcmp>
   b958a:	b910      	cbnz	r0, b9592 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x5e>
    return &storageNMEAGPVTG->completeCopy.nmea[0];
   b958c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b9590:	e7e2      	b.n	b9558 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9592:	4925      	ldr	r1, [pc, #148]	; (b9628 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf4>)
   b9594:	4668      	mov	r0, sp
   b9596:	f00b f855 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b959a:	2205      	movs	r2, #5
   b959c:	4629      	mov	r1, r5
   b959e:	4668      	mov	r0, sp
   b95a0:	f00a ffb2 	bl	c4508 <memcmp>
   b95a4:	b910      	cbnz	r0, b95ac <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x78>
    return &storageNMEAGNVTG->completeCopy.nmea[0];
   b95a6:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b95aa:	e7d5      	b.n	b9558 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b95ac:	491f      	ldr	r1, [pc, #124]	; (b962c <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xf8>)
   b95ae:	4668      	mov	r0, sp
   b95b0:	f00b f848 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95b4:	2205      	movs	r2, #5
   b95b6:	4629      	mov	r1, r5
   b95b8:	4668      	mov	r0, sp
   b95ba:	f00a ffa5 	bl	c4508 <memcmp>
   b95be:	b910      	cbnz	r0, b95c6 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x92>
    return &storageNMEAGPRMC->completeCopy.nmea[0];
   b95c0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b95c4:	e7c8      	b.n	b9558 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b95c6:	491a      	ldr	r1, [pc, #104]	; (b9630 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xfc>)
   b95c8:	4668      	mov	r0, sp
   b95ca:	f00b f83b 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95ce:	2205      	movs	r2, #5
   b95d0:	4629      	mov	r1, r5
   b95d2:	4668      	mov	r0, sp
   b95d4:	f00a ff98 	bl	c4508 <memcmp>
   b95d8:	b910      	cbnz	r0, b95e0 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xac>
    return &storageNMEAGNRMC->completeCopy.nmea[0];
   b95da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b95de:	e7bb      	b.n	b9558 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b95e0:	4914      	ldr	r1, [pc, #80]	; (b9634 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x100>)
   b95e2:	4668      	mov	r0, sp
   b95e4:	f00b f82e 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b95e8:	2205      	movs	r2, #5
   b95ea:	4629      	mov	r1, r5
   b95ec:	4668      	mov	r0, sp
   b95ee:	f00a ff8b 	bl	c4508 <memcmp>
   b95f2:	b918      	cbnz	r0, b95fc <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc8>
    return &storageNMEAGPZDA->completeCopy.nmea[0];
   b95f4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b95f8:	3035      	adds	r0, #53	; 0x35
   b95fa:	e7ae      	b.n	b955a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
  strcpy(thisNMEA, "GNZDA");
   b95fc:	490e      	ldr	r1, [pc, #56]	; (b9638 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x104>)
   b95fe:	4668      	mov	r0, sp
   b9600:	f00b f820 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9604:	2205      	movs	r2, #5
   b9606:	4629      	mov	r1, r5
   b9608:	4668      	mov	r0, sp
   b960a:	f00a ff7d 	bl	c4508 <memcmp>
   b960e:	b910      	cbnz	r0, b9616 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xe2>
    return &storageNMEAGNZDA->completeCopy.nmea[0];
   b9610:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9614:	e7f0      	b.n	b95f8 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0xc4>
  return NULL;
   b9616:	2000      	movs	r0, #0
   b9618:	e79f      	b.n	b955a <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv+0x26>
   b961a:	bf00      	nop
   b961c:	000c6f80 	.word	0x000c6f80
   b9620:	000c6f56 	.word	0x000c6f56
   b9624:	000c6f5c 	.word	0x000c6f5c
   b9628:	000c6f62 	.word	0x000c6f62
   b962c:	000c6f68 	.word	0x000c6f68
   b9630:	000c6f6e 	.word	0x000c6f6e
   b9634:	000c6f74 	.word	0x000c6f74
   b9638:	000c6f7a 	.word	0x000c6f7a

000b963c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>:
{
   b963c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b963e:	4b39      	ldr	r3, [pc, #228]	; (b9724 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe8>)
{
   b9640:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9642:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b9646:	6818      	ldr	r0, [r3, #0]
   b9648:	9000      	str	r0, [sp, #0]
   b964a:	889b      	ldrh	r3, [r3, #4]
   b964c:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9650:	2205      	movs	r2, #5
   b9652:	4629      	mov	r1, r5
   b9654:	4668      	mov	r0, sp
   b9656:	f00a ff57 	bl	c4508 <memcmp>
   b965a:	b928      	cbnz	r0, b9668 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x2c>
    return &storageNMEAGPGGA->callbackCopy->length;
   b965c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNGGA->callbackCopy->length;
   b9660:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
   b9664:	b003      	add	sp, #12
   b9666:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9668:	492f      	ldr	r1, [pc, #188]	; (b9728 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xec>)
   b966a:	4668      	mov	r0, sp
   b966c:	f00a ffea 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9670:	2205      	movs	r2, #5
   b9672:	4629      	mov	r1, r5
   b9674:	4668      	mov	r0, sp
   b9676:	f00a ff47 	bl	c4508 <memcmp>
   b967a:	b910      	cbnz	r0, b9682 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x46>
    return &storageNMEAGNGGA->callbackCopy->length;
   b967c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b9680:	e7ee      	b.n	b9660 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9682:	492a      	ldr	r1, [pc, #168]	; (b972c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf0>)
   b9684:	4668      	mov	r0, sp
   b9686:	f00a ffdd 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b968a:	2205      	movs	r2, #5
   b968c:	4629      	mov	r1, r5
   b968e:	4668      	mov	r0, sp
   b9690:	f00a ff3a 	bl	c4508 <memcmp>
   b9694:	b910      	cbnz	r0, b969c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x60>
    return &storageNMEAGPVTG->callbackCopy->length;
   b9696:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b969a:	e7e1      	b.n	b9660 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b969c:	4924      	ldr	r1, [pc, #144]	; (b9730 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf4>)
   b969e:	4668      	mov	r0, sp
   b96a0:	f00a ffd0 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96a4:	2205      	movs	r2, #5
   b96a6:	4629      	mov	r1, r5
   b96a8:	4668      	mov	r0, sp
   b96aa:	f00a ff2d 	bl	c4508 <memcmp>
   b96ae:	b910      	cbnz	r0, b96b6 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x7a>
    return &storageNMEAGNVTG->callbackCopy->length;
   b96b0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b96b4:	e7d4      	b.n	b9660 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b96b6:	491f      	ldr	r1, [pc, #124]	; (b9734 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xf8>)
   b96b8:	4668      	mov	r0, sp
   b96ba:	f00a ffc3 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96be:	2205      	movs	r2, #5
   b96c0:	4629      	mov	r1, r5
   b96c2:	4668      	mov	r0, sp
   b96c4:	f00a ff20 	bl	c4508 <memcmp>
   b96c8:	b910      	cbnz	r0, b96d0 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x94>
    return &storageNMEAGPRMC->callbackCopy->length;
   b96ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b96ce:	e7c7      	b.n	b9660 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b96d0:	4919      	ldr	r1, [pc, #100]	; (b9738 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xfc>)
   b96d2:	4668      	mov	r0, sp
   b96d4:	f00a ffb6 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96d8:	2205      	movs	r2, #5
   b96da:	4629      	mov	r1, r5
   b96dc:	4668      	mov	r0, sp
   b96de:	f00a ff13 	bl	c4508 <memcmp>
   b96e2:	b910      	cbnz	r0, b96ea <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xae>
    return &storageNMEAGNRMC->callbackCopy->length;
   b96e4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b96e8:	e7ba      	b.n	b9660 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b96ea:	4914      	ldr	r1, [pc, #80]	; (b973c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x100>)
   b96ec:	4668      	mov	r0, sp
   b96ee:	f00a ffa9 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b96f2:	2205      	movs	r2, #5
   b96f4:	4629      	mov	r1, r5
   b96f6:	4668      	mov	r0, sp
   b96f8:	f00a ff06 	bl	c4508 <memcmp>
   b96fc:	b918      	cbnz	r0, b9706 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xca>
    return &storageNMEAGPZDA->callbackCopy->length;
   b96fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->length;
   b9702:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b9704:	e7ae      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9706:	490e      	ldr	r1, [pc, #56]	; (b9740 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x104>)
   b9708:	4668      	mov	r0, sp
   b970a:	f00a ff9b 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b970e:	2205      	movs	r2, #5
   b9710:	4629      	mov	r1, r5
   b9712:	4668      	mov	r0, sp
   b9714:	f00a fef8 	bl	c4508 <memcmp>
   b9718:	b910      	cbnz	r0, b9720 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xe4>
    return &storageNMEAGNZDA->callbackCopy->length;
   b971a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b971e:	e7f0      	b.n	b9702 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0xc6>
  return NULL;
   b9720:	2000      	movs	r0, #0
   b9722:	e79f      	b.n	b9664 <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv+0x28>
   b9724:	000c6f80 	.word	0x000c6f80
   b9728:	000c6f56 	.word	0x000c6f56
   b972c:	000c6f5c 	.word	0x000c6f5c
   b9730:	000c6f62 	.word	0x000c6f62
   b9734:	000c6f68 	.word	0x000c6f68
   b9738:	000c6f6e 	.word	0x000c6f6e
   b973c:	000c6f74 	.word	0x000c6f74
   b9740:	000c6f7a 	.word	0x000c6f7a

000b9744 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>:
{
   b9744:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9746:	4b3a      	ldr	r3, [pc, #232]	; (b9830 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xec>)
{
   b9748:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b974a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b974e:	6818      	ldr	r0, [r3, #0]
   b9750:	9000      	str	r0, [sp, #0]
   b9752:	889b      	ldrh	r3, [r3, #4]
   b9754:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9758:	2205      	movs	r2, #5
   b975a:	4629      	mov	r1, r5
   b975c:	4668      	mov	r0, sp
   b975e:	f00a fed3 	bl	c4508 <memcmp>
   b9762:	b930      	cbnz	r0, b9772 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2e>
    return &storageNMEAGPGGA->callbackCopy->nmea[0];
   b9764:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b9768:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b976c:	3001      	adds	r0, #1
}
   b976e:	b003      	add	sp, #12
   b9770:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b9772:	4930      	ldr	r1, [pc, #192]	; (b9834 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf0>)
   b9774:	4668      	mov	r0, sp
   b9776:	f00a ff65 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b977a:	2205      	movs	r2, #5
   b977c:	4629      	mov	r1, r5
   b977e:	4668      	mov	r0, sp
   b9780:	f00a fec2 	bl	c4508 <memcmp>
   b9784:	b910      	cbnz	r0, b978c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x48>
    return &storageNMEAGNGGA->callbackCopy->nmea[0];
   b9786:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   b978a:	e7ed      	b.n	b9768 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b978c:	492a      	ldr	r1, [pc, #168]	; (b9838 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf4>)
   b978e:	4668      	mov	r0, sp
   b9790:	f00a ff58 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9794:	2205      	movs	r2, #5
   b9796:	4629      	mov	r1, r5
   b9798:	4668      	mov	r0, sp
   b979a:	f00a feb5 	bl	c4508 <memcmp>
   b979e:	b910      	cbnz	r0, b97a6 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x62>
    return &storageNMEAGPVTG->callbackCopy->nmea[0];
   b97a0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   b97a4:	e7e0      	b.n	b9768 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b97a6:	4925      	ldr	r1, [pc, #148]	; (b983c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xf8>)
   b97a8:	4668      	mov	r0, sp
   b97aa:	f00a ff4b 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97ae:	2205      	movs	r2, #5
   b97b0:	4629      	mov	r1, r5
   b97b2:	4668      	mov	r0, sp
   b97b4:	f00a fea8 	bl	c4508 <memcmp>
   b97b8:	b910      	cbnz	r0, b97c0 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x7c>
    return &storageNMEAGNVTG->callbackCopy->nmea[0];
   b97ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   b97be:	e7d3      	b.n	b9768 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b97c0:	491f      	ldr	r1, [pc, #124]	; (b9840 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xfc>)
   b97c2:	4668      	mov	r0, sp
   b97c4:	f00a ff3e 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97c8:	2205      	movs	r2, #5
   b97ca:	4629      	mov	r1, r5
   b97cc:	4668      	mov	r0, sp
   b97ce:	f00a fe9b 	bl	c4508 <memcmp>
   b97d2:	b910      	cbnz	r0, b97da <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x96>
    return &storageNMEAGPRMC->callbackCopy->nmea[0];
   b97d4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   b97d8:	e7c6      	b.n	b9768 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b97da:	491a      	ldr	r1, [pc, #104]	; (b9844 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x100>)
   b97dc:	4668      	mov	r0, sp
   b97de:	f00a ff31 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97e2:	2205      	movs	r2, #5
   b97e4:	4629      	mov	r1, r5
   b97e6:	4668      	mov	r0, sp
   b97e8:	f00a fe8e 	bl	c4508 <memcmp>
   b97ec:	b910      	cbnz	r0, b97f4 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xb0>
    return &storageNMEAGNRMC->callbackCopy->nmea[0];
   b97ee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   b97f2:	e7b9      	b.n	b9768 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b97f4:	4914      	ldr	r1, [pc, #80]	; (b9848 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x104>)
   b97f6:	4668      	mov	r0, sp
   b97f8:	f00a ff24 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b97fc:	2205      	movs	r2, #5
   b97fe:	4629      	mov	r1, r5
   b9800:	4668      	mov	r0, sp
   b9802:	f00a fe81 	bl	c4508 <memcmp>
   b9806:	b918      	cbnz	r0, b9810 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xcc>
    return &storageNMEAGPZDA->callbackCopy->nmea[0];
   b9808:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b980c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   b980e:	e7ad      	b.n	b976c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x28>
  strcpy(thisNMEA, "GNZDA");
   b9810:	490e      	ldr	r1, [pc, #56]	; (b984c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x108>)
   b9812:	4668      	mov	r0, sp
   b9814:	f00a ff16 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9818:	2205      	movs	r2, #5
   b981a:	4629      	mov	r1, r5
   b981c:	4668      	mov	r0, sp
   b981e:	f00a fe73 	bl	c4508 <memcmp>
   b9822:	b910      	cbnz	r0, b982a <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xe6>
    return &storageNMEAGNZDA->callbackCopy->nmea[0];
   b9824:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   b9828:	e7f0      	b.n	b980c <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0xc8>
  return NULL;
   b982a:	2000      	movs	r0, #0
   b982c:	e79f      	b.n	b976e <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv+0x2a>
   b982e:	bf00      	nop
   b9830:	000c6f80 	.word	0x000c6f80
   b9834:	000c6f56 	.word	0x000c6f56
   b9838:	000c6f5c 	.word	0x000c6f5c
   b983c:	000c6f62 	.word	0x000c6f62
   b9840:	000c6f68 	.word	0x000c6f68
   b9844:	000c6f6e 	.word	0x000c6f6e
   b9848:	000c6f74 	.word	0x000c6f74
   b984c:	000c6f7a 	.word	0x000c6f7a

000b9850 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>:
{
   b9850:	b513      	push	{r0, r1, r4, lr}
  char thisNMEA[] = "GPGGA";
   b9852:	4b30      	ldr	r3, [pc, #192]	; (b9914 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc4>)
{
   b9854:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9856:	f204 145f 	addw	r4, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b985a:	6818      	ldr	r0, [r3, #0]
   b985c:	9000      	str	r0, [sp, #0]
   b985e:	889b      	ldrh	r3, [r3, #4]
   b9860:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9864:	2205      	movs	r2, #5
   b9866:	4621      	mov	r1, r4
   b9868:	4668      	mov	r0, sp
   b986a:	f00a fe4d 	bl	c4508 <memcmp>
   b986e:	b910      	cbnz	r0, b9876 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x26>
    return NMEA_GGA_MAX_LENGTH;
   b9870:	2064      	movs	r0, #100	; 0x64
}
   b9872:	b002      	add	sp, #8
   b9874:	bd10      	pop	{r4, pc}
  strcpy(thisNMEA, "GNGGA");
   b9876:	4928      	ldr	r1, [pc, #160]	; (b9918 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc8>)
   b9878:	4668      	mov	r0, sp
   b987a:	f00a fee3 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b987e:	2205      	movs	r2, #5
   b9880:	4621      	mov	r1, r4
   b9882:	4668      	mov	r0, sp
   b9884:	f00a fe40 	bl	c4508 <memcmp>
   b9888:	2800      	cmp	r0, #0
   b988a:	d0f1      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPVTG");
   b988c:	4923      	ldr	r1, [pc, #140]	; (b991c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xcc>)
   b988e:	4668      	mov	r0, sp
   b9890:	f00a fed8 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9894:	2205      	movs	r2, #5
   b9896:	4621      	mov	r1, r4
   b9898:	4668      	mov	r0, sp
   b989a:	f00a fe35 	bl	c4508 <memcmp>
   b989e:	2800      	cmp	r0, #0
   b98a0:	d0e6      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNVTG");
   b98a2:	491f      	ldr	r1, [pc, #124]	; (b9920 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd0>)
   b98a4:	4668      	mov	r0, sp
   b98a6:	f00a fecd 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98aa:	2205      	movs	r2, #5
   b98ac:	4621      	mov	r1, r4
   b98ae:	4668      	mov	r0, sp
   b98b0:	f00a fe2a 	bl	c4508 <memcmp>
   b98b4:	2800      	cmp	r0, #0
   b98b6:	d0db      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPRMC");
   b98b8:	491a      	ldr	r1, [pc, #104]	; (b9924 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd4>)
   b98ba:	4668      	mov	r0, sp
   b98bc:	f00a fec2 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98c0:	2205      	movs	r2, #5
   b98c2:	4621      	mov	r1, r4
   b98c4:	4668      	mov	r0, sp
   b98c6:	f00a fe1f 	bl	c4508 <memcmp>
   b98ca:	2800      	cmp	r0, #0
   b98cc:	d0d0      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GNRMC");
   b98ce:	4916      	ldr	r1, [pc, #88]	; (b9928 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xd8>)
   b98d0:	4668      	mov	r0, sp
   b98d2:	f00a feb7 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98d6:	2205      	movs	r2, #5
   b98d8:	4621      	mov	r1, r4
   b98da:	4668      	mov	r0, sp
   b98dc:	f00a fe14 	bl	c4508 <memcmp>
   b98e0:	2800      	cmp	r0, #0
   b98e2:	d0c5      	beq.n	b9870 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x20>
  strcpy(thisNMEA, "GPZDA");
   b98e4:	4911      	ldr	r1, [pc, #68]	; (b992c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xdc>)
   b98e6:	4668      	mov	r0, sp
   b98e8:	f00a feac 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b98ec:	2205      	movs	r2, #5
   b98ee:	4621      	mov	r1, r4
   b98f0:	4668      	mov	r0, sp
   b98f2:	f00a fe09 	bl	c4508 <memcmp>
   b98f6:	b148      	cbz	r0, b990c <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xbc>
  strcpy(thisNMEA, "GNZDA");
   b98f8:	490d      	ldr	r1, [pc, #52]	; (b9930 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xe0>)
   b98fa:	4668      	mov	r0, sp
   b98fc:	f00a fea2 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9900:	2205      	movs	r2, #5
   b9902:	4621      	mov	r1, r4
   b9904:	4668      	mov	r0, sp
   b9906:	f00a fdff 	bl	c4508 <memcmp>
   b990a:	b908      	cbnz	r0, b9910 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0xc0>
    return NMEA_ZDA_MAX_LENGTH;
   b990c:	2032      	movs	r0, #50	; 0x32
   b990e:	e7b0      	b.n	b9872 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
  return 0;
   b9910:	2000      	movs	r0, #0
   b9912:	e7ae      	b.n	b9872 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv+0x22>
   b9914:	000c6f80 	.word	0x000c6f80
   b9918:	000c6f56 	.word	0x000c6f56
   b991c:	000c6f5c 	.word	0x000c6f5c
   b9920:	000c6f62 	.word	0x000c6f62
   b9924:	000c6f68 	.word	0x000c6f68
   b9928:	000c6f6e 	.word	0x000c6f6e
   b992c:	000c6f74 	.word	0x000c6f74
   b9930:	000c6f7a 	.word	0x000c6f7a

000b9934 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>:
{
   b9934:	b537      	push	{r0, r1, r2, r4, r5, lr}
  char thisNMEA[] = "GPGGA";
   b9936:	4b38      	ldr	r3, [pc, #224]	; (b9a18 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe4>)
{
   b9938:	4604      	mov	r4, r0
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b993a:	f204 155f 	addw	r5, r4, #351	; 0x15f
  char thisNMEA[] = "GPGGA";
   b993e:	6818      	ldr	r0, [r3, #0]
   b9940:	9000      	str	r0, [sp, #0]
   b9942:	889b      	ldrh	r3, [r3, #4]
   b9944:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9948:	2205      	movs	r2, #5
   b994a:	4629      	mov	r1, r5
   b994c:	4668      	mov	r0, sp
   b994e:	f00a fddb 	bl	c4508 <memcmp>
   b9952:	b918      	cbnz	r0, b995c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x28>
    return &storageNMEAGPGGA->automaticFlags;
   b9954:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
   b9958:	b003      	add	sp, #12
   b995a:	bd30      	pop	{r4, r5, pc}
  strcpy(thisNMEA, "GNGGA");
   b995c:	492f      	ldr	r1, [pc, #188]	; (b9a1c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xe8>)
   b995e:	4668      	mov	r0, sp
   b9960:	f00a fe70 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9964:	2205      	movs	r2, #5
   b9966:	4629      	mov	r1, r5
   b9968:	4668      	mov	r0, sp
   b996a:	f00a fdcd 	bl	c4508 <memcmp>
   b996e:	b910      	cbnz	r0, b9976 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x42>
    return &storageNMEAGNGGA->automaticFlags;
   b9970:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   b9974:	e7f0      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPVTG");
   b9976:	492a      	ldr	r1, [pc, #168]	; (b9a20 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xec>)
   b9978:	4668      	mov	r0, sp
   b997a:	f00a fe63 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b997e:	2205      	movs	r2, #5
   b9980:	4629      	mov	r1, r5
   b9982:	4668      	mov	r0, sp
   b9984:	f00a fdc0 	bl	c4508 <memcmp>
   b9988:	b910      	cbnz	r0, b9990 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x5c>
    return &storageNMEAGPVTG->automaticFlags;
   b998a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   b998e:	e7e3      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNVTG");
   b9990:	4924      	ldr	r1, [pc, #144]	; (b9a24 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf0>)
   b9992:	4668      	mov	r0, sp
   b9994:	f00a fe56 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9998:	2205      	movs	r2, #5
   b999a:	4629      	mov	r1, r5
   b999c:	4668      	mov	r0, sp
   b999e:	f00a fdb3 	bl	c4508 <memcmp>
   b99a2:	b910      	cbnz	r0, b99aa <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x76>
    return &storageNMEAGNVTG->automaticFlags;
   b99a4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
   b99a8:	e7d6      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPRMC");
   b99aa:	491f      	ldr	r1, [pc, #124]	; (b9a28 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf4>)
   b99ac:	4668      	mov	r0, sp
   b99ae:	f00a fe49 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99b2:	2205      	movs	r2, #5
   b99b4:	4629      	mov	r1, r5
   b99b6:	4668      	mov	r0, sp
   b99b8:	f00a fda6 	bl	c4508 <memcmp>
   b99bc:	b910      	cbnz	r0, b99c4 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x90>
    return &storageNMEAGPRMC->automaticFlags;
   b99be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   b99c2:	e7c9      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNRMC");
   b99c4:	4919      	ldr	r1, [pc, #100]	; (b9a2c <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xf8>)
   b99c6:	4668      	mov	r0, sp
   b99c8:	f00a fe3c 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99cc:	2205      	movs	r2, #5
   b99ce:	4629      	mov	r1, r5
   b99d0:	4668      	mov	r0, sp
   b99d2:	f00a fd99 	bl	c4508 <memcmp>
   b99d6:	b910      	cbnz	r0, b99de <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xaa>
    return &storageNMEAGNRMC->automaticFlags;
   b99d8:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   b99dc:	e7bc      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GPZDA");
   b99de:	4914      	ldr	r1, [pc, #80]	; (b9a30 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xfc>)
   b99e0:	4668      	mov	r0, sp
   b99e2:	f00a fe2f 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b99e6:	2205      	movs	r2, #5
   b99e8:	4629      	mov	r1, r5
   b99ea:	4668      	mov	r0, sp
   b99ec:	f00a fd8c 	bl	c4508 <memcmp>
   b99f0:	b910      	cbnz	r0, b99f8 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xc4>
    return &storageNMEAGPZDA->automaticFlags;
   b99f2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   b99f6:	e7af      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  strcpy(thisNMEA, "GNZDA");
   b99f8:	490e      	ldr	r1, [pc, #56]	; (b9a34 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x100>)
   b99fa:	4668      	mov	r0, sp
   b99fc:	f00a fe22 	bl	c4644 <strcpy>
  if (memcmp(thisNMEA, &nmeaAddressField[1], 5) == 0)
   b9a00:	2205      	movs	r2, #5
   b9a02:	4629      	mov	r1, r5
   b9a04:	4668      	mov	r0, sp
   b9a06:	f00a fd7f 	bl	c4508 <memcmp>
   b9a0a:	b910      	cbnz	r0, b9a12 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0xde>
    return &storageNMEAGNZDA->automaticFlags;
   b9a0c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   b9a10:	e7a2      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
  return NULL;
   b9a12:	2000      	movs	r0, #0
   b9a14:	e7a0      	b.n	b9958 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv+0x24>
   b9a16:	bf00      	nop
   b9a18:	000c6f80 	.word	0x000c6f80
   b9a1c:	000c6f56 	.word	0x000c6f56
   b9a20:	000c6f5c 	.word	0x000c6f5c
   b9a24:	000c6f62 	.word	0x000c6f62
   b9a28:	000c6f68 	.word	0x000c6f68
   b9a2c:	000c6f6e 	.word	0x000c6f6e
   b9a30:	000c6f74 	.word	0x000c6f74
   b9a34:	000c6f7a 	.word	0x000c6f7a

000b9a38 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>:
}
   b9a38:	4770      	bx	lr
	...

000b9a3c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>:
{
   b9a3c:	b538      	push	{r3, r4, r5, lr}
  if (*rtcmFrameCounter == 1)
   b9a3e:	8813      	ldrh	r3, [r2, #0]
   b9a40:	4d0c      	ldr	r5, [pc, #48]	; (b9a74 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x38>)
   b9a42:	2b01      	cmp	r3, #1
{
   b9a44:	4614      	mov	r4, r2
  if (*rtcmFrameCounter == 1)
   b9a46:	d10e      	bne.n	b9a66 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x2a>
    rtcmLen = (incoming & 0x03) << 8; // Get the last two bits of this byte. Bits 8&9 of 10-bit length
   b9a48:	020a      	lsls	r2, r1, #8
   b9a4a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9a4e:	802a      	strh	r2, [r5, #0]
  *rtcmFrameCounter = *rtcmFrameCounter + 1;
   b9a50:	3301      	adds	r3, #1
   b9a52:	8023      	strh	r3, [r4, #0]
  processRTCM(incoming); // Here is where we expose this byte to the user
   b9a54:	f7ff fff0 	bl	b9a38 <_ZN14SFE_UBLOX_GNSS11processRTCMEh>
  return (*rtcmFrameCounter == rtcmLen) ? SFE_UBLOX_SENTENCE_TYPE_NONE : SFE_UBLOX_SENTENCE_TYPE_RTCM;
   b9a58:	8820      	ldrh	r0, [r4, #0]
   b9a5a:	882b      	ldrh	r3, [r5, #0]
}
   b9a5c:	4298      	cmp	r0, r3
   b9a5e:	bf14      	ite	ne
   b9a60:	2003      	movne	r0, #3
   b9a62:	2000      	moveq	r0, #0
   b9a64:	bd38      	pop	{r3, r4, r5, pc}
  else if (*rtcmFrameCounter == 2)
   b9a66:	2b02      	cmp	r3, #2
   b9a68:	d1f2      	bne.n	b9a50 <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x14>
    rtcmLen |= incoming; // Bits 0-7 of packet length
   b9a6a:	882a      	ldrh	r2, [r5, #0]
   b9a6c:	430a      	orrs	r2, r1
    rtcmLen += 6;        // There are 6 additional bytes of what we presume is header, msgType, CRC, and stuff
   b9a6e:	3206      	adds	r2, #6
   b9a70:	e7ed      	b.n	b9a4e <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt+0x12>
   b9a72:	bf00      	nop
   b9a74:	2003e61a 	.word	0x2003e61a

000b9a78 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>:
{
   b9a78:	b530      	push	{r4, r5, lr}
  msg->checksumA += msg->id;
   b9a7a:	784a      	ldrb	r2, [r1, #1]
  msg->checksumA += msg->cls;
   b9a7c:	780d      	ldrb	r5, [r1, #0]
  msg->checksumA += (msg->len & 0xFF);
   b9a7e:	884c      	ldrh	r4, [r1, #2]
  msg->checksumA += msg->id;
   b9a80:	442a      	add	r2, r5
  msg->checksumA += (msg->len & 0xFF);
   b9a82:	fa54 f082 	uxtab	r0, r4, r2
  msg->checksumA += (msg->len >> 8);
   b9a86:	eb00 2314 	add.w	r3, r0, r4, lsr #8
  msg->checksumB += msg->checksumA;
   b9a8a:	fa55 f282 	uxtab	r2, r5, r2
  msg->checksumA += (msg->len >> 8);
   b9a8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  msg->checksumB += msg->checksumA;
   b9a92:	fa52 f280 	uxtab	r2, r2, r0
  msg->checksumA += (msg->len >> 8);
   b9a96:	730b      	strb	r3, [r1, #12]
  msg->checksumB += msg->checksumA;
   b9a98:	4413      	add	r3, r2
   b9a9a:	734b      	strb	r3, [r1, #13]
   b9a9c:	2200      	movs	r2, #0
  for (uint16_t i = 0; i < msg->len; i++)
   b9a9e:	b293      	uxth	r3, r2
   b9aa0:	429c      	cmp	r4, r3
   b9aa2:	d90a      	bls.n	b9aba <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x42>
    msg->checksumA += msg->payload[i];
   b9aa4:	688b      	ldr	r3, [r1, #8]
   b9aa6:	7b08      	ldrb	r0, [r1, #12]
   b9aa8:	5c9b      	ldrb	r3, [r3, r2]
   b9aaa:	4403      	add	r3, r0
    msg->checksumB += msg->checksumA;
   b9aac:	7b48      	ldrb	r0, [r1, #13]
    msg->checksumA += msg->payload[i];
   b9aae:	b2db      	uxtb	r3, r3
   b9ab0:	730b      	strb	r3, [r1, #12]
    msg->checksumB += msg->checksumA;
   b9ab2:	4403      	add	r3, r0
   b9ab4:	734b      	strb	r3, [r1, #13]
  for (uint16_t i = 0; i < msg->len; i++)
   b9ab6:	3201      	adds	r2, #1
   b9ab8:	e7f1      	b.n	b9a9e <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket+0x26>
}
   b9aba:	bd30      	pop	{r4, r5, pc}

000b9abc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>:
  rollingChecksumA += incoming;
   b9abc:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
   b9ac0:	4419      	add	r1, r3
  rollingChecksumB += rollingChecksumA;
   b9ac2:	f890 315b 	ldrb.w	r3, [r0, #347]	; 0x15b
  rollingChecksumA += incoming;
   b9ac6:	b2c9      	uxtb	r1, r1
   b9ac8:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
  rollingChecksumB += rollingChecksumA;
   b9acc:	4419      	add	r1, r3
   b9ace:	f880 115b 	strb.w	r1, [r0, #347]	; 0x15b
}
   b9ad2:	4770      	bx	lr

000b9ad4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>:
{
   b9ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t bytesToSend = outgoingUBX->len + 8; // How many bytes need to be sent
   b9ad8:	f8b1 b002 	ldrh.w	fp, [r1, #2]
   b9adc:	f10b 0b08 	add.w	fp, fp, #8
   b9ae0:	fa1f fb8b 	uxth.w	fp, fp
  uint16_t startSpot = 0;                      // Payload pointer
   b9ae4:	f04f 0800 	mov.w	r8, #0
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9ae8:	f1ab 0302 	sub.w	r3, fp, #2
{
   b9aec:	4604      	mov	r4, r0
   b9aee:	460d      	mov	r5, r1
  uint16_t bytesLeftToSend = bytesToSend;      // How many bytes remain to be sent
   b9af0:	46da      	mov	sl, fp
  uint16_t bytesSent = 0;                      // How many bytes have been sent
   b9af2:	46c1      	mov	r9, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9af4:	9300      	str	r3, [sp, #0]
  while (bytesLeftToSend > 0)
   b9af6:	f1ba 0f00 	cmp.w	sl, #0
   b9afa:	f000 80a6 	beq.w	b9c4a <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x176>
    if (len > i2cTransactionSize)   // Limit len to i2cTransactionSize
   b9afe:	7866      	ldrb	r6, [r4, #1]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9b00:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   b9b04:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b08:	4556      	cmp	r6, sl
   b9b0a:	bf28      	it	cs
   b9b0c:	4656      	movcs	r6, sl
    bytesLeftToSend -= len; // Calculate how many bytes will be left after we do this write
   b9b0e:	ebaa 0a06 	sub.w	sl, sl, r6
   b9b12:	fa1f fa8a 	uxth.w	sl, sl
    if (bytesLeftToSend == 1)
   b9b16:	f1ba 0f01 	cmp.w	sl, #1
      len -= 1;             // Decrement len by 1
   b9b1a:	bf02      	ittt	eq
   b9b1c:	f106 36ff 	addeq.w	r6, r6, #4294967295
   b9b20:	b2b6      	uxtheq	r6, r6
      bytesLeftToSend += 1; // Increment bytesLeftToSend by 1
   b9b22:	f04f 0a02 	moveq.w	sl, #2
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress); // Start the transmission
   b9b26:	f007 ff57 	bl	c19d8 <_ZN7TwoWire17beginTransmissionEh>
    if (bytesSent == 0) // Is this the first write? If it is, write the header bytes
   b9b2a:	f1b9 0f00 	cmp.w	r9, #0
   b9b2e:	d15c      	bne.n	b9bea <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x116>
      _i2cPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9b30:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b34:	6803      	ldr	r3, [r0, #0]
   b9b36:	21b5      	movs	r1, #181	; 0xb5
   b9b38:	689b      	ldr	r3, [r3, #8]
   b9b3a:	4798      	blx	r3
      _i2cPort->write(UBX_SYNCH_2); // b
   b9b3c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b40:	6803      	ldr	r3, [r0, #0]
   b9b42:	2162      	movs	r1, #98	; 0x62
   b9b44:	689b      	ldr	r3, [r3, #8]
   b9b46:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->cls);
   b9b48:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b4c:	7829      	ldrb	r1, [r5, #0]
   b9b4e:	6803      	ldr	r3, [r0, #0]
   b9b50:	689b      	ldr	r3, [r3, #8]
   b9b52:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->id);
   b9b54:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b58:	7869      	ldrb	r1, [r5, #1]
   b9b5a:	6803      	ldr	r3, [r0, #0]
   b9b5c:	689b      	ldr	r3, [r3, #8]
   b9b5e:	4798      	blx	r3
      _i2cPort->write(outgoingUBX->len & 0xFF); // LSB
   b9b60:	78a9      	ldrb	r1, [r5, #2]
   b9b62:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b66:	f7fe fdc1 	bl	b86ec <_ZN7TwoWire5writeEi.isra.0>
      _i2cPort->write(outgoingUBX->len >> 8);   // MSB
   b9b6a:	8869      	ldrh	r1, [r5, #2]
   b9b6c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b70:	0a09      	lsrs	r1, r1, #8
   b9b72:	f7fe fdbb 	bl	b86ec <_ZN7TwoWire5writeEi.isra.0>
   b9b76:	464b      	mov	r3, r9
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9b78:	886a      	ldrh	r2, [r5, #2]
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9b7a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9b7e:	fa1f f983 	uxth.w	r9, r3
   b9b82:	f109 0706 	add.w	r7, r9, #6
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9b86:	454a      	cmp	r2, r9
   b9b88:	b2bf      	uxth	r7, r7
   b9b8a:	d90d      	bls.n	b9ba8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
   b9b8c:	42be      	cmp	r6, r7
   b9b8e:	d90b      	bls.n	b9ba8 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd4>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9b90:	68aa      	ldr	r2, [r5, #8]
   b9b92:	6801      	ldr	r1, [r0, #0]
   b9b94:	9301      	str	r3, [sp, #4]
   b9b96:	4442      	add	r2, r8
   b9b98:	688f      	ldr	r7, [r1, #8]
   b9b9a:	5cd1      	ldrb	r1, [r2, r3]
   b9b9c:	47b8      	blx	r7
      for (; (x < outgoingUBX->len) && (bytesSent < len); x++)
   b9b9e:	9b01      	ldr	r3, [sp, #4]
   b9ba0:	3301      	adds	r3, #1
   b9ba2:	e7e9      	b.n	b9b78 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xa4>
{
   b9ba4:	46b9      	mov	r9, r7
   b9ba6:	e7a6      	b.n	b9af6 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x22>
      if (bytesSent == (len - 2))
   b9ba8:	3e02      	subs	r6, #2
      startSpot += x;
   b9baa:	44c8      	add	r8, r9
      if (bytesSent == (len - 2))
   b9bac:	42b7      	cmp	r7, r6
      startSpot += x;
   b9bae:	fa1f f888 	uxth.w	r8, r8
      if (bytesSent == (len - 2))
   b9bb2:	d10c      	bne.n	b9bce <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9bb4:	6803      	ldr	r3, [r0, #0]
   b9bb6:	7b29      	ldrb	r1, [r5, #12]
   b9bb8:	689b      	ldr	r3, [r3, #8]
   b9bba:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9bbc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bc0:	7b69      	ldrb	r1, [r5, #13]
   b9bc2:	6803      	ldr	r3, [r0, #0]
   b9bc4:	689b      	ldr	r3, [r3, #8]
   b9bc6:	4798      	blx	r3
        bytesSent += 2;
   b9bc8:	f109 0708 	add.w	r7, r9, #8
   b9bcc:	b2bf      	uxth	r7, r7
    if (bytesSent < bytesToSend) // Do we need to go round the loop again?
   b9bce:	455f      	cmp	r7, fp
   b9bd0:	d2e8      	bcs.n	b9ba4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
      if (_i2cPort->endTransmission(_i2cStopRestart) != 0) // Don't release bus unless we have to
   b9bd2:	f894 1174 	ldrb.w	r1, [r4, #372]	; 0x174
   b9bd6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bda:	f007 ff04 	bl	c19e6 <_ZN7TwoWire15endTransmissionEh>
   b9bde:	2800      	cmp	r0, #0
   b9be0:	d0e0      	beq.n	b9ba4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xd0>
        return (SFE_UBLOX_STATUS_I2C_COMM_FAILURE);        // Sensor did not ACK
   b9be2:	200c      	movs	r0, #12
}
   b9be4:	b003      	add	sp, #12
   b9be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9bea:	2200      	movs	r2, #0
   b9bec:	b291      	uxth	r1, r2
   b9bee:	fa19 f782 	uxtah	r7, r9, r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9bf2:	428e      	cmp	r6, r1
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9bf4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9bf8:	b2bf      	uxth	r7, r7
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9bfa:	d910      	bls.n	b9c1e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
   b9bfc:	f8b5 e002 	ldrh.w	lr, [r5, #2]
   b9c00:	eb08 0c02 	add.w	ip, r8, r2
   b9c04:	1c53      	adds	r3, r2, #1
   b9c06:	45f4      	cmp	ip, lr
   b9c08:	9301      	str	r3, [sp, #4]
   b9c0a:	da08      	bge.n	b9c1e <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x14a>
        _i2cPort->write(outgoingUBX->payload[startSpot + x]);
   b9c0c:	68a9      	ldr	r1, [r5, #8]
   b9c0e:	6802      	ldr	r2, [r0, #0]
   b9c10:	f811 100c 	ldrb.w	r1, [r1, ip]
   b9c14:	6892      	ldr	r2, [r2, #8]
   b9c16:	4790      	blx	r2
      for (; (x < len) && ((startSpot + x) < (outgoingUBX->len)); x++)
   b9c18:	9b01      	ldr	r3, [sp, #4]
   b9c1a:	461a      	mov	r2, r3
   b9c1c:	e7e6      	b.n	b9bec <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x118>
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9c1e:	9b00      	ldr	r3, [sp, #0]
      startSpot += x;
   b9c20:	4488      	add	r8, r1
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9c22:	429f      	cmp	r7, r3
      startSpot += x;
   b9c24:	fa1f f888 	uxth.w	r8, r8
      if ((bytesSent == (bytesToSend - 2)) && (x == (len - 2)))
   b9c28:	d1d1      	bne.n	b9bce <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
   b9c2a:	3e02      	subs	r6, #2
   b9c2c:	42b2      	cmp	r2, r6
   b9c2e:	d1ce      	bne.n	b9bce <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
        _i2cPort->write(outgoingUBX->checksumA);
   b9c30:	6803      	ldr	r3, [r0, #0]
   b9c32:	7b29      	ldrb	r1, [r5, #12]
   b9c34:	689b      	ldr	r3, [r3, #8]
   b9c36:	4798      	blx	r3
        _i2cPort->write(outgoingUBX->checksumB);
   b9c38:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c3c:	7b69      	ldrb	r1, [r5, #13]
   b9c3e:	6803      	ldr	r3, [r0, #0]
   b9c40:	689b      	ldr	r3, [r3, #8]
   b9c42:	4798      	blx	r3
        bytesSent += 2;
   b9c44:	fa1f f78b 	uxth.w	r7, fp
   b9c48:	e7c1      	b.n	b9bce <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0xfa>
  if (_i2cPort->endTransmission() != 0)
   b9c4a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   b9c4e:	f007 fece 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
   b9c52:	2800      	cmp	r0, #0
   b9c54:	d0c6      	beq.n	b9be4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x110>
   b9c56:	e7c4      	b.n	b9be2 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett+0x10e>

000b9c58 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>:
{
   b9c58:	b570      	push	{r4, r5, r6, lr}
   b9c5a:	4605      	mov	r5, r0
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9c5c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
   b9c60:	6803      	ldr	r3, [r0, #0]
{
   b9c62:	460c      	mov	r4, r1
  _serialPort->write(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9c64:	689b      	ldr	r3, [r3, #8]
   b9c66:	21b5      	movs	r1, #181	; 0xb5
   b9c68:	4798      	blx	r3
  _serialPort->write(UBX_SYNCH_2); // b
   b9c6a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9c6e:	6803      	ldr	r3, [r0, #0]
   b9c70:	2162      	movs	r1, #98	; 0x62
   b9c72:	689b      	ldr	r3, [r3, #8]
   b9c74:	4798      	blx	r3
  _serialPort->write(outgoingUBX->cls);
   b9c76:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9c7a:	7821      	ldrb	r1, [r4, #0]
   b9c7c:	6803      	ldr	r3, [r0, #0]
   b9c7e:	689b      	ldr	r3, [r3, #8]
   b9c80:	4798      	blx	r3
  _serialPort->write(outgoingUBX->id);
   b9c82:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9c86:	7861      	ldrb	r1, [r4, #1]
   b9c88:	6803      	ldr	r3, [r0, #0]
   b9c8a:	689b      	ldr	r3, [r3, #8]
   b9c8c:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len & 0xFF); // LSB
   b9c8e:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9c92:	78a1      	ldrb	r1, [r4, #2]
   b9c94:	6803      	ldr	r3, [r0, #0]
   b9c96:	689b      	ldr	r3, [r3, #8]
   b9c98:	4798      	blx	r3
  _serialPort->write(outgoingUBX->len >> 8);   // MSB
   b9c9a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9c9e:	8861      	ldrh	r1, [r4, #2]
   b9ca0:	6803      	ldr	r3, [r0, #0]
   b9ca2:	0a09      	lsrs	r1, r1, #8
   b9ca4:	689b      	ldr	r3, [r3, #8]
   b9ca6:	4798      	blx	r3
   b9ca8:	2600      	movs	r6, #0
    _serialPort->write(outgoingUBX->payload[i]);
   b9caa:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9cae:	8861      	ldrh	r1, [r4, #2]
    _serialPort->write(outgoingUBX->payload[i]);
   b9cb0:	6803      	ldr	r3, [r0, #0]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9cb2:	b2b2      	uxth	r2, r6
   b9cb4:	4291      	cmp	r1, r2
    _serialPort->write(outgoingUBX->payload[i]);
   b9cb6:	689b      	ldr	r3, [r3, #8]
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9cb8:	d904      	bls.n	b9cc4 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x6c>
    _serialPort->write(outgoingUBX->payload[i]);
   b9cba:	68a1      	ldr	r1, [r4, #8]
   b9cbc:	5c89      	ldrb	r1, [r1, r2]
   b9cbe:	4798      	blx	r3
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9cc0:	3601      	adds	r6, #1
   b9cc2:	e7f2      	b.n	b9caa <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket+0x52>
  _serialPort->write(outgoingUBX->checksumA);
   b9cc4:	7b21      	ldrb	r1, [r4, #12]
   b9cc6:	4798      	blx	r3
  _serialPort->write(outgoingUBX->checksumB);
   b9cc8:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
   b9ccc:	7b61      	ldrb	r1, [r4, #13]
   b9cce:	6803      	ldr	r3, [r0, #0]
}
   b9cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _serialPort->write(outgoingUBX->checksumB);
   b9cd4:	689b      	ldr	r3, [r3, #8]
   b9cd6:	4718      	bx	r3

000b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>:
{
   b9cd8:	b510      	push	{r4, lr}
   b9cda:	4604      	mov	r4, r0
  uint8_t returnedByte = _spiPort->transfer(byteToTransfer);
   b9cdc:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9ce0:	f004 fc4a 	bl	be578 <_ZN8SPIClass8transferEh>
  if ((spiBufferIndex < getSpiTransactionSize()) && (returnedByte != 0xFF || currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   b9ce4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9ce8:	f894 2109 	ldrb.w	r2, [r4, #265]	; 0x109
   b9cec:	429a      	cmp	r2, r3
   b9cee:	d90b      	bls.n	b9d08 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
   b9cf0:	28ff      	cmp	r0, #255	; 0xff
   b9cf2:	d101      	bne.n	b9cf8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x20>
   b9cf4:	7822      	ldrb	r2, [r4, #0]
   b9cf6:	b13a      	cbz	r2, b9d08 <_ZN14SFE_UBLOX_GNSS11spiTransferEh+0x30>
    spiBuffer[spiBufferIndex] = returnedByte;
   b9cf8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   b9cfc:	54d0      	strb	r0, [r2, r3]
    spiBufferIndex++;
   b9cfe:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   b9d02:	3301      	adds	r3, #1
   b9d04:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
}
   b9d08:	bd10      	pop	{r4, pc}
	...

000b9d0c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>:
{
   b9d0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (spiBuffer == NULL)
   b9d10:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
   b9d14:	4604      	mov	r4, r0
   b9d16:	460d      	mov	r5, r1
  if (spiBuffer == NULL)
   b9d18:	b97b      	cbnz	r3, b9d3a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x2e>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   b9d1a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   b9d1e:	b923      	cbnz	r3, b9d2a <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1e>
   b9d20:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   b9d24:	2b00      	cmp	r3, #0
   b9d26:	f000 80ca 	beq.w	b9ebe <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9d2a:	4966      	ldr	r1, [pc, #408]	; (b9ec4 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b8>)
   b9d2c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9d30:	b004      	add	sp, #16
   b9d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _debugSerial->print(F("sendSpiCommand: no memory allocation for SPI Buffer!"));
   b9d36:	f005 bf90 	b.w	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9d3a:	f8d0 30e4 	ldr.w	r3, [r0, #228]	; 0xe4
      dataMode_{dataMode}
   b9d3e:	4a62      	ldr	r2, [pc, #392]	; (b9ec8 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1bc>)
   b9d40:	9302      	str	r3, [sp, #8]
  spiBufferIndex = 0;
   b9d42:	2600      	movs	r6, #0
   b9d44:	2301      	movs	r3, #1
   b9d46:	f880 6108 	strb.w	r6, [r0, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   b9d4a:	4669      	mov	r1, sp
   b9d4c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   b9d50:	f8ad 300c 	strh.w	r3, [sp, #12]
   b9d54:	9200      	str	r2, [sp, #0]
   b9d56:	f88d 6004 	strb.w	r6, [sp, #4]
   b9d5a:	f004 fb9f 	bl	be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   b9d5e:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9d62:	4631      	mov	r1, r6
   b9d64:	f008 f91f 	bl	c1fa6 <digitalWrite>
  spiTransfer(UBX_SYNCH_1); //μ - oh ublox, you're funny. I will call you micro-blox from now on.
   b9d68:	21b5      	movs	r1, #181	; 0xb5
   b9d6a:	4620      	mov	r0, r4
   b9d6c:	f7ff ffb4 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(UBX_SYNCH_2); // b
   b9d70:	2162      	movs	r1, #98	; 0x62
   b9d72:	4620      	mov	r0, r4
   b9d74:	f7ff ffb0 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->cls);
   b9d78:	7829      	ldrb	r1, [r5, #0]
   b9d7a:	4620      	mov	r0, r4
   b9d7c:	f7ff ffac 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->id);
   b9d80:	7869      	ldrb	r1, [r5, #1]
   b9d82:	4620      	mov	r0, r4
   b9d84:	f7ff ffa8 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len & 0xFF); // LSB
   b9d88:	78a9      	ldrb	r1, [r5, #2]
   b9d8a:	4620      	mov	r0, r4
   b9d8c:	f7ff ffa4 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->len >> 8);
   b9d90:	8869      	ldrh	r1, [r5, #2]
   b9d92:	4620      	mov	r0, r4
   b9d94:	0a09      	lsrs	r1, r1, #8
   b9d96:	f7ff ff9f 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  if (_printDebug)
   b9d9a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9d9e:	2b00      	cmp	r3, #0
   b9da0:	d042      	beq.n	b9e28 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x11c>
    _debugSerial->print(F("sendSpiCommand: "));
   b9da2:	494a      	ldr	r1, [pc, #296]	; (b9ecc <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c0>)
   b9da4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9da8:	f005 ff57 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_1, HEX);
   b9dac:	2210      	movs	r2, #16
   b9dae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9db2:	21b5      	movs	r1, #181	; 0xb5
   b9db4:	f7fe fc8a 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9db8:	4945      	ldr	r1, [pc, #276]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9dba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9dbe:	f005 ff4c 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(UBX_SYNCH_2, HEX);
   b9dc2:	2210      	movs	r2, #16
   b9dc4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9dc8:	2162      	movs	r1, #98	; 0x62
   b9dca:	f7fe fc7f 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9dce:	4940      	ldr	r1, [pc, #256]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9dd0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9dd4:	f005 ff41 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->cls, HEX);
   b9dd8:	2210      	movs	r2, #16
   b9dda:	7829      	ldrb	r1, [r5, #0]
   b9ddc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9de0:	f7fe fc74 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9de4:	493a      	ldr	r1, [pc, #232]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9de6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9dea:	f005 ff36 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->id, HEX);
   b9dee:	2210      	movs	r2, #16
   b9df0:	7869      	ldrb	r1, [r5, #1]
   b9df2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9df6:	f7fe fc69 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9dfa:	4935      	ldr	r1, [pc, #212]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9dfc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e00:	f005 ff2b 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   b9e04:	2210      	movs	r2, #16
   b9e06:	78a9      	ldrb	r1, [r5, #2]
   b9e08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e0c:	f005 ff41 	bl	bfc92 <_ZN5Print11printNumberEmh>
    _debugSerial->print(F(" "));
   b9e10:	492f      	ldr	r1, [pc, #188]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e12:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e16:	f005 ff20 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->len >> 8, HEX);
   b9e1a:	8869      	ldrh	r1, [r5, #2]
   b9e1c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e20:	2210      	movs	r2, #16
   b9e22:	0a09      	lsrs	r1, r1, #8
   b9e24:	f005 ff35 	bl	bfc92 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" "));
   b9e28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>
{
   b9e2c:	2600      	movs	r6, #0
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9e2e:	886a      	ldrh	r2, [r5, #2]
   b9e30:	b2b3      	uxth	r3, r6
   b9e32:	429a      	cmp	r2, r3
   b9e34:	d916      	bls.n	b9e64 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x158>
    spiTransfer(outgoingUBX->payload[i]);
   b9e36:	461f      	mov	r7, r3
   b9e38:	68ab      	ldr	r3, [r5, #8]
   b9e3a:	4620      	mov	r0, r4
   b9e3c:	5dd9      	ldrb	r1, [r3, r7]
   b9e3e:	f7ff ff4b 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
    if (_printDebug)
   b9e42:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9e46:	b15b      	cbz	r3, b9e60 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x154>
      _debugSerial->print(F(" "));
   b9e48:	4641      	mov	r1, r8
   b9e4a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e4e:	f005 ff04 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(outgoingUBX->payload[i], HEX);
   b9e52:	68ab      	ldr	r3, [r5, #8]
   b9e54:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e58:	5dd9      	ldrb	r1, [r3, r7]
   b9e5a:	2210      	movs	r2, #16
   b9e5c:	f7fe fc36 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
  for (uint16_t i = 0; i < outgoingUBX->len; i++)
   b9e60:	3601      	adds	r6, #1
   b9e62:	e7e4      	b.n	b9e2e <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x122>
  spiTransfer(outgoingUBX->checksumA);
   b9e64:	7b29      	ldrb	r1, [r5, #12]
   b9e66:	4620      	mov	r0, r4
   b9e68:	f7ff ff36 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  spiTransfer(outgoingUBX->checksumB);
   b9e6c:	7b69      	ldrb	r1, [r5, #13]
   b9e6e:	4620      	mov	r0, r4
   b9e70:	f7ff ff32 	bl	b9cd8 <_ZN14SFE_UBLOX_GNSS11spiTransferEh>
  digitalWrite(_csPin, HIGH);
   b9e74:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   b9e78:	2101      	movs	r1, #1
   b9e7a:	f008 f894 	bl	c1fa6 <digitalWrite>
  _spiPort->endTransaction();
   b9e7e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   b9e82:	f004 faf1 	bl	be468 <_ZN8SPIClass14endTransactionEv>
  if (_printDebug)
   b9e86:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   b9e8a:	b1c3      	cbz	r3, b9ebe <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1b2>
    _debugSerial->print(F(" "));
   b9e8c:	4910      	ldr	r1, [pc, #64]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9e8e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e92:	f005 fee2 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(outgoingUBX->checksumA, HEX);
   b9e96:	7b29      	ldrb	r1, [r5, #12]
   b9e98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9e9c:	2210      	movs	r2, #16
   b9e9e:	f7fe fc15 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
    _debugSerial->print(F(" "));
   b9ea2:	490b      	ldr	r1, [pc, #44]	; (b9ed0 <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket+0x1c4>)
   b9ea4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9ea8:	f005 fed7 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9eac:	7b69      	ldrb	r1, [r5, #13]
   b9eae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9eb2:	2210      	movs	r2, #16
}
   b9eb4:	b004      	add	sp, #16
   b9eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _debugSerial->println(outgoingUBX->checksumB, HEX);
   b9eba:	f7fe bc0e 	b.w	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
}
   b9ebe:	b004      	add	sp, #16
   b9ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9ec4:	000c6f86 	.word	0x000c6f86
   b9ec8:	000c6d3c 	.word	0x000c6d3c
   b9ecc:	000c6fbb 	.word	0x000c6fbb
   b9ed0:	000c7e72 	.word	0x000c7e72

000b9ed4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>:
{
   b9ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (_printDebug == true)
   b9ed6:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
{
   b9eda:	4604      	mov	r4, r0
   b9edc:	460d      	mov	r5, r1
   b9ede:	4616      	mov	r6, r2
  if (_printDebug == true)
   b9ee0:	2b00      	cmp	r3, #0
   b9ee2:	f000 8082 	beq.w	b9fea <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x116>
  bool printPayload = (ignoreThisPayload == false);
   b9ee6:	f890 714c 	ldrb.w	r7, [r0, #332]	; 0x14c
    _debugSerial->print(F("CLS:"));
   b9eea:	4940      	ldr	r1, [pc, #256]	; (b9fec <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x118>)
   b9eec:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
   b9ef0:	f005 feb3 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV) // 1
   b9ef4:	782b      	ldrb	r3, [r5, #0]
   b9ef6:	2b01      	cmp	r3, #1
   b9ef8:	d13c      	bne.n	b9f74 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xa0>
      _debugSerial->print(F("NAV"));
   b9efa:	493d      	ldr	r1, [pc, #244]	; (b9ff0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x11c>)
   b9efc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("ACK"));
   b9f00:	f005 feab 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" ID:"));
   b9f04:	493b      	ldr	r1, [pc, #236]	; (b9ff4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x120>)
   b9f06:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f0a:	f005 fea6 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    if (packet->cls == UBX_CLASS_NAV && packet->id == UBX_NAV_PVT)
   b9f0e:	882b      	ldrh	r3, [r5, #0]
   b9f10:	f240 7201 	movw	r2, #1793	; 0x701
   b9f14:	4293      	cmp	r3, r2
   b9f16:	d145      	bne.n	b9fa4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xd0>
      _debugSerial->print(F("PVT"));
   b9f18:	4937      	ldr	r1, [pc, #220]	; (b9ff8 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x124>)
   b9f1a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      _debugSerial->print(F("RATE"));
   b9f1e:	f005 fe9c 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(F(" Len: 0x"));
   b9f22:	4936      	ldr	r1, [pc, #216]	; (b9ffc <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x128>)
   b9f24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f28:	f005 fe97 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
   b9f2c:	8869      	ldrh	r1, [r5, #2]
   b9f2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f32:	2210      	movs	r2, #16
   b9f34:	f005 fead 	bl	bfc92 <_ZN5Print11printNumberEmh>
    if (printPayload)
   b9f38:	2f01      	cmp	r7, #1
   b9f3a:	d101      	bne.n	b9f40 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x6c>
   b9f3c:	2e00      	cmp	r6, #0
   b9f3e:	d049      	beq.n	b9fd4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x100>
      _debugSerial->print(F(" Payload:"));
   b9f40:	492f      	ldr	r1, [pc, #188]	; (ba000 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x12c>)
   b9f42:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
        _debugSerial->print(F(" "));
   b9f46:	4f2f      	ldr	r7, [pc, #188]	; (ba004 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x130>)
      _debugSerial->print(F(" Payload:"));
   b9f48:	f005 fe87 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
   b9f4c:	2600      	movs	r6, #0
      for (uint16_t x = 0; x < packet->len; x++)
   b9f4e:	886a      	ldrh	r2, [r5, #2]
        _debugSerial->print(F(" "));
   b9f50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      for (uint16_t x = 0; x < packet->len; x++)
   b9f54:	b2b3      	uxth	r3, r6
   b9f56:	429a      	cmp	r2, r3
   b9f58:	d941      	bls.n	b9fde <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x10a>
        _debugSerial->print(F(" "));
   b9f5a:	4639      	mov	r1, r7
   b9f5c:	f005 fe7d 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(packet->payload[x], HEX);
   b9f60:	b2b3      	uxth	r3, r6
   b9f62:	68a9      	ldr	r1, [r5, #8]
   b9f64:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f68:	5cc9      	ldrb	r1, [r1, r3]
   b9f6a:	2210      	movs	r2, #16
   b9f6c:	f7fe fbae 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
      for (uint16_t x = 0; x < packet->len; x++)
   b9f70:	3601      	adds	r6, #1
   b9f72:	e7ec      	b.n	b9f4e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x7a>
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9f74:	2b05      	cmp	r3, #5
      _debugSerial->print(F("NAV"));
   b9f76:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_ACK) // 5
   b9f7a:	d101      	bne.n	b9f80 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xac>
      _debugSerial->print(F("ACK"));
   b9f7c:	4922      	ldr	r1, [pc, #136]	; (ba008 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x134>)
   b9f7e:	e7bf      	b.n	b9f00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_CFG) // 6
   b9f80:	2b06      	cmp	r3, #6
   b9f82:	d101      	bne.n	b9f88 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xb4>
      _debugSerial->print(F("CFG"));
   b9f84:	4921      	ldr	r1, [pc, #132]	; (ba00c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x138>)
   b9f86:	e7bb      	b.n	b9f00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
    else if (packet->cls == UBX_CLASS_MON) // 0x0A
   b9f88:	2b0a      	cmp	r3, #10
   b9f8a:	d101      	bne.n	b9f90 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xbc>
      _debugSerial->print(F("MON"));
   b9f8c:	4920      	ldr	r1, [pc, #128]	; (ba010 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x13c>)
   b9f8e:	e7b7      	b.n	b9f00 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x2c>
      _debugSerial->print(F("0x"));
   b9f90:	4920      	ldr	r1, [pc, #128]	; (ba014 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9f92:	f005 fe62 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->cls, HEX);
   b9f96:	7829      	ldrb	r1, [r5, #0]
   b9f98:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9f9c:	2210      	movs	r2, #16
   b9f9e:	f7fe fb95 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9fa2:	e7af      	b.n	b9f04 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x30>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9fa4:	f640 0206 	movw	r2, #2054	; 0x806
   b9fa8:	4293      	cmp	r3, r2
      _debugSerial->print(F("PVT"));
   b9faa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_RATE)
   b9fae:	d101      	bne.n	b9fb4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xe0>
      _debugSerial->print(F("RATE"));
   b9fb0:	4919      	ldr	r1, [pc, #100]	; (ba018 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x144>)
   b9fb2:	e7b4      	b.n	b9f1e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
    else if (packet->cls == UBX_CLASS_CFG && packet->id == UBX_CFG_CFG)
   b9fb4:	f640 1206 	movw	r2, #2310	; 0x906
   b9fb8:	4293      	cmp	r3, r2
   b9fba:	d101      	bne.n	b9fc0 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0xec>
      _debugSerial->print(F("SAVE"));
   b9fbc:	4917      	ldr	r1, [pc, #92]	; (ba01c <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x148>)
   b9fbe:	e7ae      	b.n	b9f1e <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4a>
      _debugSerial->print(F("0x"));
   b9fc0:	4914      	ldr	r1, [pc, #80]	; (ba014 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x140>)
   b9fc2:	f005 fe4a 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(packet->id, HEX);
   b9fc6:	7869      	ldrb	r1, [r5, #1]
   b9fc8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fcc:	2210      	movs	r2, #16
   b9fce:	f7fe fb7d 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
   b9fd2:	e7a6      	b.n	b9f22 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x4e>
      _debugSerial->print(F(" Payload: IGNORED"));
   b9fd4:	4912      	ldr	r1, [pc, #72]	; (ba020 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb+0x14c>)
   b9fd6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   b9fda:	f005 fe3e 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println();
   b9fde:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   b9fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _debugSerial->println();
   b9fe6:	f005 be3c 	b.w	bfc62 <_ZN5Print7printlnEv>
}
   b9fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9fec:	000c6fcc 	.word	0x000c6fcc
   b9ff0:	000c6fd1 	.word	0x000c6fd1
   b9ff4:	000c6fe1 	.word	0x000c6fe1
   b9ff8:	000c6fe6 	.word	0x000c6fe6
   b9ffc:	000c6ff4 	.word	0x000c6ff4
   ba000:	000c6ffd 	.word	0x000c6ffd
   ba004:	000c7e72 	.word	0x000c7e72
   ba008:	000c6fd5 	.word	0x000c6fd5
   ba00c:	000c6fd9 	.word	0x000c6fd9
   ba010:	000c6fdd 	.word	0x000c6fdd
   ba014:	000c7252 	.word	0x000c7252
   ba018:	000c6fea 	.word	0x000c6fea
   ba01c:	000c6fef 	.word	0x000c6fef
   ba020:	000c7007 	.word	0x000c7007

000ba024 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>:
{
   ba024:	b538      	push	{r3, r4, r5, lr}
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba026:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
{
   ba02a:	4604      	mov	r4, r0
  if (fileBufferSize == 0) // Bail if the user has not called setFileBufferSize
   ba02c:	b955      	cbnz	r5, ba044 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x20>
    if (_printDebug == true)
   ba02e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba032:	b90b      	cbnz	r3, ba038 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x14>
    return (false);
   ba034:	2000      	movs	r0, #0
}
   ba036:	bd38      	pop	{r3, r4, r5, pc}
      _debugSerial->println(F("createFileBuffer: Warning. fileBufferSize is zero. Data logging is not possible."));
   ba038:	491a      	ldr	r1, [pc, #104]	; (ba0a4 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x80>)
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba03a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba03e:	f005 fe26 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   ba042:	e7f7      	b.n	ba034 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
  if (ubxFileBuffer != NULL) // Bail if RAM has already been allocated for the file buffer
   ba044:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
   ba048:	b12b      	cbz	r3, ba056 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x32>
    if (_printDebug == true)
   ba04a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   ba04e:	2b00      	cmp	r3, #0
   ba050:	d0f0      	beq.n	ba034 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: Warning. File buffer already exists. Skipping..."));
   ba052:	4915      	ldr	r1, [pc, #84]	; (ba0a8 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x84>)
   ba054:	e7f1      	b.n	ba03a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  ubxFileBuffer = new uint8_t[fileBufferSize]; // Allocate RAM for the buffer
   ba056:	4628      	mov	r0, r5
   ba058:	f7fa f81f 	bl	b409a <_Znaj>
   ba05c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba060:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
  if (ubxFileBuffer == NULL) // Check if the new (alloc) was successful
   ba064:	b930      	cbnz	r0, ba074 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x50>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba066:	b91b      	cbnz	r3, ba070 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x4c>
   ba068:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   ba06c:	2b00      	cmp	r3, #0
   ba06e:	d0e1      	beq.n	ba034 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x10>
      _debugSerial->println(F("createFileBuffer: RAM alloc failed!"));
   ba070:	490e      	ldr	r1, [pc, #56]	; (ba0ac <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x88>)
   ba072:	e7e2      	b.n	ba03a <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x16>
  if (_printDebug == true)
   ba074:	b17b      	cbz	r3, ba096 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x72>
    _debugSerial->print(F("createFileBuffer: fileBufferSize is: "));
   ba076:	490e      	ldr	r1, [pc, #56]	; (ba0b0 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x8c>)
   ba078:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba07c:	f005 fded 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->println(fileBufferSize);
   ba080:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   ba084:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
   ba088:	220a      	movs	r2, #10
   ba08a:	4628      	mov	r0, r5
   ba08c:	f005 fe01 	bl	bfc92 <_ZN5Print11printNumberEmh>
        n += println();
   ba090:	4628      	mov	r0, r5
   ba092:	f005 fde6 	bl	bfc62 <_ZN5Print7printlnEv>
  fileBufferHead = 0; // Initialize head and tail
   ba096:	2300      	movs	r3, #0
   ba098:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
  fileBufferTail = 0;
   ba09c:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
  return (true);
   ba0a0:	2001      	movs	r0, #1
   ba0a2:	e7c8      	b.n	ba036 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv+0x12>
   ba0a4:	000c7019 	.word	0x000c7019
   ba0a8:	000c706a 	.word	0x000c706a
   ba0ac:	000c70ad 	.word	0x000c70ad
   ba0b0:	000c70d1 	.word	0x000c70d1

000ba0b4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>:
  if (fileBufferHead >= fileBufferTail) // Check if wrap-around has occurred
   ba0b4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba0b8:	f8b0 2170 	ldrh.w	r2, [r0, #368]	; 0x170
   ba0bc:	4293      	cmp	r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba0be:	bf3b      	ittet	cc
   ba0c0:	f8b0 016c 	ldrhcc.w	r0, [r0, #364]	; 0x16c
   ba0c4:	18c0      	addcc	r0, r0, r3
    return (fileBufferHead - fileBufferTail);
   ba0c6:	1a98      	subcs	r0, r3, r2
    return ((uint16_t)(((uint32_t)fileBufferHead + (uint32_t)fileBufferSize) - (uint32_t)fileBufferTail));
   ba0c8:	1a80      	subcc	r0, r0, r2
   ba0ca:	b280      	uxth	r0, r0
}
   ba0cc:	4770      	bx	lr

000ba0ce <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>:
{
   ba0ce:	b508      	push	{r3, lr}
   ba0d0:	4601      	mov	r1, r0
  return (fileBufferSize - fileBufferSpaceUsed());
   ba0d2:	f7ff ffef 	bl	ba0b4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
   ba0d6:	f8b1 316c 	ldrh.w	r3, [r1, #364]	; 0x16c
   ba0da:	1a18      	subs	r0, r3, r0
}
   ba0dc:	b280      	uxth	r0, r0
   ba0de:	bd08      	pop	{r3, pc}

000ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>:
{
   ba0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t bytesBeforeWrapAround = fileBufferSize - fileBufferHead; // How much space is available 'above' Head?
   ba0e4:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   ba0e8:	f8b0 516c 	ldrh.w	r5, [r0, #364]	; 0x16c
   ba0ec:	1aed      	subs	r5, r5, r3
   ba0ee:	b2ad      	uxth	r5, r5
  if (bytesBeforeWrapAround > numBytes)                             // Is there enough room for all the data?
   ba0f0:	4295      	cmp	r5, r2
   ba0f2:	bf28      	it	cs
   ba0f4:	4615      	movcs	r5, r2
{
   ba0f6:	4616      	mov	r6, r2
   ba0f8:	4604      	mov	r4, r0
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba0fa:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba0fe:	1b77      	subs	r7, r6, r5
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba100:	462a      	mov	r2, r5
   ba102:	4418      	add	r0, r3
  uint16_t bytesLeftToCopy = numBytes - bytesBeforeWrapAround; // Calculate if there are any bytes left to copy
   ba104:	b2bf      	uxth	r7, r7
{
   ba106:	4688      	mov	r8, r1
  memcpy(&ubxFileBuffer[fileBufferHead], theBytes, bytesBeforeWrapAround); // Copy the data into the buffer
   ba108:	f00a fa0e 	bl	c4528 <memcpy>
  if (bytesLeftToCopy > 0)                                     // If there are bytes left to copy
   ba10c:	b19f      	cbz	r7, ba136 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x56>
    memcpy(&ubxFileBuffer[0], &theBytes[bytesBeforeWrapAround], bytesLeftToCopy); // Copy the remaining data into the buffer
   ba10e:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
   ba112:	463a      	mov	r2, r7
   ba114:	eb08 0105 	add.w	r1, r8, r5
   ba118:	f00a fa06 	bl	c4528 <memcpy>
    fileBufferHead = bytesLeftToCopy;                                             // Update Head. The next byte written will be written here.
   ba11c:	f8a4 716e 	strh.w	r7, [r4, #366]	; 0x16e
  uint16_t bytesInBuffer = fileBufferSpaceUsed();
   ba120:	4620      	mov	r0, r4
   ba122:	f7ff ffc7 	bl	ba0b4 <_ZN14SFE_UBLOX_GNSS19fileBufferSpaceUsedEv>
  if (bytesInBuffer > fileBufferMaxAvail)
   ba126:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   ba12a:	4283      	cmp	r3, r0
    fileBufferMaxAvail = bytesInBuffer;
   ba12c:	bf38      	it	cc
   ba12e:	f8a4 0172 	strhcc.w	r0, [r4, #370]	; 0x172
}
   ba132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fileBufferHead += numBytes; // Only update Head. The next byte written will be written here.
   ba136:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
   ba13a:	4416      	add	r6, r2
   ba13c:	f8a4 616e 	strh.w	r6, [r4, #366]	; 0x16e
   ba140:	e7ee      	b.n	ba120 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht+0x40>
	...

000ba144 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>:
{
   ba144:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba146:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   ba14a:	4604      	mov	r4, r0
   ba14c:	460d      	mov	r5, r1
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   ba14e:	b113      	cbz	r3, ba156 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x12>
   ba150:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   ba154:	b953      	cbnz	r3, ba16c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x28>
    if (_printDebug == true)
   ba156:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   ba15a:	b128      	cbz	r0, ba168 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: file buffer not available!"));
   ba15c:	4924      	ldr	r1, [pc, #144]	; (ba1f0 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xac>)
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba15e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   ba162:	f005 fd94 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   ba166:	2000      	movs	r0, #0
}
   ba168:	b003      	add	sp, #12
   ba16a:	bd30      	pop	{r4, r5, pc}
  if (totalLength > fileBufferSpaceAvailable())
   ba16c:	f7ff ffaf 	bl	ba0ce <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
  uint16_t totalLength = msg->len + 8; // Total length. Include sync chars, class, id, length and checksum bytes
   ba170:	886b      	ldrh	r3, [r5, #2]
   ba172:	3308      	adds	r3, #8
  if (totalLength > fileBufferSpaceAvailable())
   ba174:	b29b      	uxth	r3, r3
   ba176:	4283      	cmp	r3, r0
   ba178:	d908      	bls.n	ba18c <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x48>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   ba17a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   ba17e:	b91b      	cbnz	r3, ba188 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x44>
   ba180:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   ba184:	2800      	cmp	r0, #0
   ba186:	d0ef      	beq.n	ba168 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
      _debugSerial->println(F("storePacket: insufficient space available! Data will be lost!"));
   ba188:	491a      	ldr	r1, [pc, #104]	; (ba1f4 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0xb0>)
   ba18a:	e7e8      	b.n	ba15e <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x1a>
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba18c:	f246 23b5 	movw	r3, #25269	; 0x62b5
  writeToFileBuffer(sync_chars, 2);
   ba190:	2202      	movs	r2, #2
   ba192:	4669      	mov	r1, sp
   ba194:	4620      	mov	r0, r4
  uint8_t sync_chars[] = {UBX_SYNCH_1, UBX_SYNCH_2};
   ba196:	f8ad 3000 	strh.w	r3, [sp]
  writeToFileBuffer(sync_chars, 2);
   ba19a:	f7ff ffa1 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->cls, 1);
   ba19e:	2201      	movs	r2, #1
   ba1a0:	4629      	mov	r1, r5
   ba1a2:	4620      	mov	r0, r4
   ba1a4:	f7ff ff9c 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->id, 1);
   ba1a8:	2201      	movs	r2, #1
   ba1aa:	18a9      	adds	r1, r5, r2
   ba1ac:	4620      	mov	r0, r4
   ba1ae:	f7ff ff97 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  msg_length[0] = msg->len & 0xFF;
   ba1b2:	886b      	ldrh	r3, [r5, #2]
   ba1b4:	f88d 3004 	strb.w	r3, [sp, #4]
  writeToFileBuffer(msg_length, 2);
   ba1b8:	2202      	movs	r2, #2
  msg_length[1] = msg->len >> 8;
   ba1ba:	0a1b      	lsrs	r3, r3, #8
  writeToFileBuffer(msg_length, 2);
   ba1bc:	a901      	add	r1, sp, #4
   ba1be:	4620      	mov	r0, r4
  msg_length[1] = msg->len >> 8;
   ba1c0:	f88d 3005 	strb.w	r3, [sp, #5]
  writeToFileBuffer(msg_length, 2);
   ba1c4:	f7ff ff8c 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(msg->payload, msg->len);
   ba1c8:	886a      	ldrh	r2, [r5, #2]
   ba1ca:	68a9      	ldr	r1, [r5, #8]
   ba1cc:	4620      	mov	r0, r4
   ba1ce:	f7ff ff87 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumA, 1);
   ba1d2:	2201      	movs	r2, #1
   ba1d4:	f105 010c 	add.w	r1, r5, #12
   ba1d8:	4620      	mov	r0, r4
   ba1da:	f7ff ff81 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  writeToFileBuffer(&msg->checksumB, 1);
   ba1de:	4620      	mov	r0, r4
   ba1e0:	2201      	movs	r2, #1
   ba1e2:	f105 010d 	add.w	r1, r5, #13
   ba1e6:	f7ff ff7b 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   ba1ea:	2001      	movs	r0, #1
   ba1ec:	e7bc      	b.n	ba168 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket+0x24>
   ba1ee:	bf00      	nop
   ba1f0:	000c70f7 	.word	0x000c70f7
   ba1f4:	000c711f 	.word	0x000c711f

000ba1f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>:
{
   ba1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (msg->cls)
   ba1fc:	780e      	ldrb	r6, [r1, #0]
   ba1fe:	2e0d      	cmp	r6, #13
{
   ba200:	4604      	mov	r4, r0
   ba202:	460d      	mov	r5, r1
  switch (msg->cls)
   ba204:	f001 8228 	beq.w	bb658 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1460>
   ba208:	d809      	bhi.n	ba21e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26>
   ba20a:	2e02      	cmp	r6, #2
   ba20c:	f000 879a 	beq.w	bb144 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf4c>
   ba210:	2e06      	cmp	r6, #6
   ba212:	f001 81cc 	beq.w	bb5ae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13b6>
   ba216:	2e01      	cmp	r6, #1
   ba218:	d04f      	beq.n	ba2ba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc2>
}
   ba21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (msg->cls)
   ba21e:	2e13      	cmp	r6, #19
   ba220:	f001 83eb 	beq.w	bb9fa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1802>
   ba224:	2e28      	cmp	r6, #40	; 0x28
   ba226:	f001 84ca 	beq.w	bbbbe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c6>
   ba22a:	2e10      	cmp	r6, #16
   ba22c:	d1f5      	bne.n	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_ESF_ALG && msg->len == UBX_ESF_ALG_LEN)
   ba22e:	680b      	ldr	r3, [r1, #0]
   ba230:	4a8e      	ldr	r2, [pc, #568]	; (ba46c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x274>)
   ba232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba236:	4293      	cmp	r3, r2
   ba238:	f041 826a 	bne.w	bb710 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1518>
      if (packetUBXESFALG != NULL)
   ba23c:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
   ba23e:	2e00      	cmp	r6, #0
   ba240:	d0eb      	beq.n	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFALG->data.iTOW = extractLong(msg, 0);
   ba242:	68a8      	ldr	r0, [r5, #8]
   ba244:	2100      	movs	r1, #0
   ba246:	f7fe fa21 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba24a:	6070      	str	r0, [r6, #4]
}

// Given a spot, extract a byte from the payload
uint8_t SFE_UBLOX_GNSS::extractByte(ubxPacket *msg, uint16_t spotToStart)
{
  return (msg->payload[spotToStart]);
   ba24c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba24e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba250:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFALG->data.version = extractByte(msg, 4);
   ba252:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba254:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba256:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba258:	7952      	ldrb	r2, [r2, #5]
        packetUBXESFALG->data.flags.all = extractByte(msg, 5);
   ba25a:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba25c:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba25e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  return (msg->payload[spotToStart]);
   ba260:	7992      	ldrb	r2, [r2, #6]
        packetUBXESFALG->data.error.all = extractByte(msg, 6);
   ba262:	729a      	strb	r2, [r3, #10]
        packetUBXESFALG->data.yaw = extractLong(msg, 8);
   ba264:	68a8      	ldr	r0, [r5, #8]
   ba266:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   ba268:	2108      	movs	r1, #8
   ba26a:	f7fe fa0f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba26e:	60f0      	str	r0, [r6, #12]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba270:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba272:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba274:	210c      	movs	r1, #12
   ba276:	f7fe fa16 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.pitch = extractSignedInt(msg, 12);
   ba27a:	8230      	strh	r0, [r6, #16]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba27c:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba27e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba280:	210e      	movs	r1, #14
   ba282:	f7fe fa10 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFALG->data.roll = extractSignedInt(msg, 14);
   ba286:	8270      	strh	r0, [r6, #18]
        packetUBXESFALG->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba288:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba28a:	f04f 32ff 	mov.w	r2, #4294967295
   ba28e:	615a      	str	r2, [r3, #20]
        if ((packetUBXESFALG->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba290:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba292:	6a1a      	ldr	r2, [r3, #32]
   ba294:	b17a      	cbz	r2, ba2b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
            && (packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba296:	7819      	ldrb	r1, [r3, #0]
   ba298:	0708      	lsls	r0, r1, #28
   ba29a:	d40c      	bmi.n	ba2b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xbe>
          memcpy(&packetUBXESFALG->callbackData->iTOW, &packetUBXESFALG->data.iTOW, sizeof(UBX_ESF_ALG_data_t));
   ba29c:	1d19      	adds	r1, r3, #4
   ba29e:	3314      	adds	r3, #20
   ba2a0:	f851 0b04 	ldr.w	r0, [r1], #4
   ba2a4:	f842 0b04 	str.w	r0, [r2], #4
   ba2a8:	4299      	cmp	r1, r3
   ba2aa:	d1f9      	bne.n	ba2a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa8>
          packetUBXESFALG->automaticFlags.flags.bits.callbackCopyValid = true;
   ba2ac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   ba2ae:	7813      	ldrb	r3, [r2, #0]
   ba2b0:	f043 0308 	orr.w	r3, r3, #8
   ba2b4:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFALG->automaticFlags.flags.bits.addToFileBuffer)
   ba2b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba2b8:	e03d      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_NAV_POSECEF && msg->len == UBX_NAV_POSECEF_LEN)
   ba2ba:	680b      	ldr	r3, [r1, #0]
   ba2bc:	4a6c      	ldr	r2, [pc, #432]	; (ba470 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x278>)
   ba2be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   ba2c2:	4293      	cmp	r3, r2
   ba2c4:	d141      	bne.n	ba34a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x152>
      if (packetUBXNAVPOSECEF != NULL)
   ba2c6:	68c6      	ldr	r6, [r0, #12]
   ba2c8:	2e00      	cmp	r6, #0
   ba2ca:	d0a6      	beq.n	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPOSECEF->data.iTOW = extractLong(msg, 0);
   ba2cc:	68a8      	ldr	r0, [r5, #8]
   ba2ce:	2100      	movs	r1, #0
   ba2d0:	f7fe f9dc 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba2d4:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2d6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba2d8:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2da:	2104      	movs	r1, #4
   ba2dc:	f7fe f9d6 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefX = extractSignedLong(msg, 4);
   ba2e0:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2e2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba2e4:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2e6:	2108      	movs	r1, #8
   ba2e8:	f7fe f9d0 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefY = extractSignedLong(msg, 8);
   ba2ec:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2ee:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba2f0:	68e6      	ldr	r6, [r4, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba2f2:	210c      	movs	r1, #12
   ba2f4:	f7fe f9ca 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPOSECEF->data.ecefZ = extractSignedLong(msg, 12);
   ba2f8:	6130      	str	r0, [r6, #16]
        packetUBXNAVPOSECEF->data.pAcc = extractLong(msg, 16);
   ba2fa:	68a8      	ldr	r0, [r5, #8]
   ba2fc:	68e6      	ldr	r6, [r4, #12]
   ba2fe:	2110      	movs	r1, #16
   ba300:	f7fe f9c4 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba304:	6170      	str	r0, [r6, #20]
        packetUBXNAVPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba306:	68e3      	ldr	r3, [r4, #12]
   ba308:	f04f 32ff 	mov.w	r2, #4294967295
   ba30c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba30e:	68e3      	ldr	r3, [r4, #12]
   ba310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba312:	b17a      	cbz	r2, ba334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
            && (packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba314:	7819      	ldrb	r1, [r3, #0]
   ba316:	0709      	lsls	r1, r1, #28
   ba318:	d40c      	bmi.n	ba334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13c>
          memcpy(&packetUBXNAVPOSECEF->callbackData->iTOW, &packetUBXNAVPOSECEF->data.iTOW, sizeof(UBX_NAV_POSECEF_data_t));
   ba31a:	1d19      	adds	r1, r3, #4
   ba31c:	3318      	adds	r3, #24
   ba31e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba322:	f842 0b04 	str.w	r0, [r2], #4
   ba326:	4299      	cmp	r1, r3
   ba328:	d1f9      	bne.n	ba31e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x126>
          packetUBXNAVPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba32a:	68e2      	ldr	r2, [r4, #12]
   ba32c:	7813      	ldrb	r3, [r2, #0]
   ba32e:	f043 0308 	orr.w	r3, r3, #8
   ba332:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba334:	68e3      	ldr	r3, [r4, #12]
   ba336:	781b      	ldrb	r3, [r3, #0]
   ba338:	075f      	lsls	r7, r3, #29
   ba33a:	f57f af6e 	bpl.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          storePacket(msg);
   ba33e:	4629      	mov	r1, r5
   ba340:	4620      	mov	r0, r4
}
   ba342:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
          storePacket(msg);
   ba346:	f7ff befd 	b.w	ba144 <_ZN14SFE_UBLOX_GNSS11storePacketEP9ubxPacket>
    else if (msg->id == UBX_NAV_STATUS && msg->len == UBX_NAV_STATUS_LEN)
   ba34a:	4a4a      	ldr	r2, [pc, #296]	; (ba474 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x27c>)
   ba34c:	4293      	cmp	r3, r2
   ba34e:	d13d      	bne.n	ba3cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d4>
      if (packetUBXNAVSTATUS != NULL)
   ba350:	6906      	ldr	r6, [r0, #16]
   ba352:	2e00      	cmp	r6, #0
   ba354:	f43f af61 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSTATUS->data.iTOW = extractLong(msg, 0);
   ba358:	68a8      	ldr	r0, [r5, #8]
   ba35a:	2100      	movs	r1, #0
   ba35c:	f7fe f996 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba360:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba362:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba364:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba366:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSTATUS->data.gpsFix = extractByte(msg, 4);
   ba368:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba36a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba36c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba36e:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSTATUS->data.flags.all = extractByte(msg, 5);
   ba370:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   ba372:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba374:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba376:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVSTATUS->data.fixStat.all = extractByte(msg, 6);
   ba378:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba37a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba37c:	6923      	ldr	r3, [r4, #16]
  return (msg->payload[spotToStart]);
   ba37e:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVSTATUS->data.flags2.all = extractByte(msg, 7);
   ba380:	72da      	strb	r2, [r3, #11]
        packetUBXNAVSTATUS->data.ttff = extractLong(msg, 8);
   ba382:	68a8      	ldr	r0, [r5, #8]
   ba384:	6926      	ldr	r6, [r4, #16]
   ba386:	2108      	movs	r1, #8
   ba388:	f7fe f980 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba38c:	60f0      	str	r0, [r6, #12]
        packetUBXNAVSTATUS->data.msss = extractLong(msg, 12);
   ba38e:	68a8      	ldr	r0, [r5, #8]
   ba390:	6926      	ldr	r6, [r4, #16]
   ba392:	210c      	movs	r1, #12
   ba394:	f7fe f97a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba398:	6130      	str	r0, [r6, #16]
        packetUBXNAVSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba39a:	6923      	ldr	r3, [r4, #16]
   ba39c:	f04f 32ff 	mov.w	r2, #4294967295
   ba3a0:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba3a2:	6923      	ldr	r3, [r4, #16]
   ba3a4:	6a1a      	ldr	r2, [r3, #32]
   ba3a6:	b17a      	cbz	r2, ba3c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
            && (packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba3a8:	7819      	ldrb	r1, [r3, #0]
   ba3aa:	070e      	lsls	r6, r1, #28
   ba3ac:	d40c      	bmi.n	ba3c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1d0>
          memcpy(&packetUBXNAVSTATUS->callbackData->iTOW, &packetUBXNAVSTATUS->data.iTOW, sizeof(UBX_NAV_STATUS_data_t));
   ba3ae:	1d19      	adds	r1, r3, #4
   ba3b0:	3314      	adds	r3, #20
   ba3b2:	f851 0b04 	ldr.w	r0, [r1], #4
   ba3b6:	f842 0b04 	str.w	r0, [r2], #4
   ba3ba:	4299      	cmp	r1, r3
   ba3bc:	d1f9      	bne.n	ba3b2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ba>
          packetUBXNAVSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   ba3be:	6922      	ldr	r2, [r4, #16]
   ba3c0:	7813      	ldrb	r3, [r2, #0]
   ba3c2:	f043 0308 	orr.w	r3, r3, #8
   ba3c6:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   ba3c8:	6923      	ldr	r3, [r4, #16]
   ba3ca:	e7b4      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_DOP && msg->len == UBX_NAV_DOP_LEN)
   ba3cc:	4a2a      	ldr	r2, [pc, #168]	; (ba478 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x280>)
   ba3ce:	4293      	cmp	r3, r2
   ba3d0:	d154      	bne.n	ba47c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x284>
      if (packetUBXNAVDOP != NULL)
   ba3d2:	6946      	ldr	r6, [r0, #20]
   ba3d4:	2e00      	cmp	r6, #0
   ba3d6:	f43f af20 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVDOP->data.iTOW = extractLong(msg, 0);
   ba3da:	68a8      	ldr	r0, [r5, #8]
   ba3dc:	2100      	movs	r1, #0
   ba3de:	f7fe f955 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba3e2:	6070      	str	r0, [r6, #4]
        packetUBXNAVDOP->data.gDOP = extractInt(msg, 4);
   ba3e4:	68a8      	ldr	r0, [r5, #8]
   ba3e6:	6966      	ldr	r6, [r4, #20]
   ba3e8:	2104      	movs	r1, #4
   ba3ea:	f7fe f95c 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3ee:	8130      	strh	r0, [r6, #8]
        packetUBXNAVDOP->data.pDOP = extractInt(msg, 6);
   ba3f0:	68a8      	ldr	r0, [r5, #8]
   ba3f2:	6966      	ldr	r6, [r4, #20]
   ba3f4:	2106      	movs	r1, #6
   ba3f6:	f7fe f956 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba3fa:	8170      	strh	r0, [r6, #10]
        packetUBXNAVDOP->data.tDOP = extractInt(msg, 8);
   ba3fc:	68a8      	ldr	r0, [r5, #8]
   ba3fe:	6966      	ldr	r6, [r4, #20]
   ba400:	2108      	movs	r1, #8
   ba402:	f7fe f950 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba406:	81b0      	strh	r0, [r6, #12]
        packetUBXNAVDOP->data.vDOP = extractInt(msg, 10);
   ba408:	68a8      	ldr	r0, [r5, #8]
   ba40a:	6966      	ldr	r6, [r4, #20]
   ba40c:	210a      	movs	r1, #10
   ba40e:	f7fe f94a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba412:	81f0      	strh	r0, [r6, #14]
        packetUBXNAVDOP->data.hDOP = extractInt(msg, 12);
   ba414:	68a8      	ldr	r0, [r5, #8]
   ba416:	6966      	ldr	r6, [r4, #20]
   ba418:	210c      	movs	r1, #12
   ba41a:	f7fe f944 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba41e:	8230      	strh	r0, [r6, #16]
        packetUBXNAVDOP->data.nDOP = extractInt(msg, 14);
   ba420:	68a8      	ldr	r0, [r5, #8]
   ba422:	6966      	ldr	r6, [r4, #20]
   ba424:	210e      	movs	r1, #14
   ba426:	f7fe f93e 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba42a:	8270      	strh	r0, [r6, #18]
        packetUBXNAVDOP->data.eDOP = extractInt(msg, 16);
   ba42c:	68a8      	ldr	r0, [r5, #8]
   ba42e:	6966      	ldr	r6, [r4, #20]
   ba430:	2110      	movs	r1, #16
   ba432:	f7fe f938 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba436:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVDOP->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba438:	6963      	ldr	r3, [r4, #20]
   ba43a:	f04f 32ff 	mov.w	r2, #4294967295
   ba43e:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVDOP->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba440:	6963      	ldr	r3, [r4, #20]
   ba442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba444:	b17a      	cbz	r2, ba466 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
            && (packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba446:	7819      	ldrb	r1, [r3, #0]
   ba448:	0708      	lsls	r0, r1, #28
   ba44a:	d40c      	bmi.n	ba466 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x26e>
          memcpy(&packetUBXNAVDOP->callbackData->iTOW, &packetUBXNAVDOP->data.iTOW, sizeof(UBX_NAV_DOP_data_t));
   ba44c:	1d19      	adds	r1, r3, #4
   ba44e:	3318      	adds	r3, #24
   ba450:	f851 0b04 	ldr.w	r0, [r1], #4
   ba454:	f842 0b04 	str.w	r0, [r2], #4
   ba458:	4299      	cmp	r1, r3
   ba45a:	d1f9      	bne.n	ba450 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x258>
          packetUBXNAVDOP->automaticFlags.flags.bits.callbackCopyValid = true;
   ba45c:	6962      	ldr	r2, [r4, #20]
   ba45e:	7813      	ldrb	r3, [r2, #0]
   ba460:	f043 0308 	orr.w	r3, r3, #8
   ba464:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVDOP->automaticFlags.flags.bits.addToFileBuffer)
   ba466:	6963      	ldr	r3, [r4, #20]
   ba468:	e765      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba46a:	bf00      	nop
   ba46c:	00101400 	.word	0x00101400
   ba470:	00140100 	.word	0x00140100
   ba474:	00100300 	.word	0x00100300
   ba478:	00120400 	.word	0x00120400
    else if (msg->id == UBX_NAV_ATT && msg->len == UBX_NAV_ATT_LEN)
   ba47c:	4a8c      	ldr	r2, [pc, #560]	; (ba6b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b8>)
   ba47e:	4293      	cmp	r3, r2
   ba480:	d149      	bne.n	ba516 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31e>
      if (packetUBXNAVATT != NULL)
   ba482:	69c6      	ldr	r6, [r0, #28]
   ba484:	2e00      	cmp	r6, #0
   ba486:	f43f aec8 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVATT->data.iTOW = extractLong(msg, 0);
   ba48a:	68a8      	ldr	r0, [r5, #8]
   ba48c:	2100      	movs	r1, #0
   ba48e:	f7fe f8fd 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba492:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba494:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba496:	69e3      	ldr	r3, [r4, #28]
  return (msg->payload[spotToStart]);
   ba498:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVATT->data.version = extractByte(msg, 4);
   ba49a:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba49c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba49e:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4a0:	2108      	movs	r1, #8
   ba4a2:	f7fe f8f3 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.roll = extractSignedLong(msg, 8);
   ba4a6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4a8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba4aa:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4ac:	210c      	movs	r1, #12
   ba4ae:	f7fe f8ed 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.pitch = extractSignedLong(msg, 12);
   ba4b2:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba4b6:	69e6      	ldr	r6, [r4, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba4b8:	2110      	movs	r1, #16
   ba4ba:	f7fe f8e7 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVATT->data.heading = extractSignedLong(msg, 16);
   ba4be:	6170      	str	r0, [r6, #20]
        packetUBXNAVATT->data.accRoll = extractLong(msg, 20);
   ba4c0:	68a8      	ldr	r0, [r5, #8]
   ba4c2:	69e6      	ldr	r6, [r4, #28]
   ba4c4:	2114      	movs	r1, #20
   ba4c6:	f7fe f8e1 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4ca:	61b0      	str	r0, [r6, #24]
        packetUBXNAVATT->data.accPitch = extractLong(msg, 24);
   ba4cc:	68a8      	ldr	r0, [r5, #8]
   ba4ce:	69e6      	ldr	r6, [r4, #28]
   ba4d0:	2118      	movs	r1, #24
   ba4d2:	f7fe f8db 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4d6:	61f0      	str	r0, [r6, #28]
        packetUBXNAVATT->data.accHeading = extractLong(msg, 28);
   ba4d8:	68a8      	ldr	r0, [r5, #8]
   ba4da:	69e6      	ldr	r6, [r4, #28]
   ba4dc:	211c      	movs	r1, #28
   ba4de:	f7fe f8d5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba4e2:	6230      	str	r0, [r6, #32]
        packetUBXNAVATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba4e4:	69e3      	ldr	r3, [r4, #28]
   ba4e6:	f04f 32ff 	mov.w	r2, #4294967295
   ba4ea:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXNAVATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba4ec:	69e3      	ldr	r3, [r4, #28]
   ba4ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   ba4f0:	b17a      	cbz	r2, ba512 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
            && (packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba4f2:	7819      	ldrb	r1, [r3, #0]
   ba4f4:	0709      	lsls	r1, r1, #28
   ba4f6:	d40c      	bmi.n	ba512 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x31a>
          memcpy(&packetUBXNAVATT->callbackData->iTOW, &packetUBXNAVATT->data.iTOW, sizeof(UBX_NAV_ATT_data_t));
   ba4f8:	1d19      	adds	r1, r3, #4
   ba4fa:	3324      	adds	r3, #36	; 0x24
   ba4fc:	f851 0b04 	ldr.w	r0, [r1], #4
   ba500:	f842 0b04 	str.w	r0, [r2], #4
   ba504:	4299      	cmp	r1, r3
   ba506:	d1f9      	bne.n	ba4fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x304>
          packetUBXNAVATT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba508:	69e2      	ldr	r2, [r4, #28]
   ba50a:	7813      	ldrb	r3, [r2, #0]
   ba50c:	f043 0308 	orr.w	r3, r3, #8
   ba510:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVATT->automaticFlags.flags.bits.addToFileBuffer)
   ba512:	69e3      	ldr	r3, [r4, #28]
   ba514:	e70f      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_PVT && msg->len == UBX_NAV_PVT_LEN)
   ba516:	4a67      	ldr	r2, [pc, #412]	; (ba6b4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4bc>)
   ba518:	4293      	cmp	r3, r2
   ba51a:	f040 80cd 	bne.w	ba6b8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4c0>
      if (packetUBXNAVPVT != NULL)
   ba51e:	6a06      	ldr	r6, [r0, #32]
   ba520:	2e00      	cmp	r6, #0
   ba522:	f43f ae7a 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVT->data.iTOW = extractLong(msg, 0);
   ba526:	68a8      	ldr	r0, [r5, #8]
   ba528:	2100      	movs	r1, #0
   ba52a:	f7fe f8af 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba52e:	6070      	str	r0, [r6, #4]
        packetUBXNAVPVT->data.year = extractInt(msg, 4);
   ba530:	68a8      	ldr	r0, [r5, #8]
   ba532:	6a26      	ldr	r6, [r4, #32]
   ba534:	2104      	movs	r1, #4
   ba536:	f7fe f8b6 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba53a:	8130      	strh	r0, [r6, #8]
  return (msg->payload[spotToStart]);
   ba53c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba53e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba540:	7992      	ldrb	r2, [r2, #6]
        packetUBXNAVPVT->data.month = extractByte(msg, 6);
   ba542:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   ba544:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba546:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba548:	79d2      	ldrb	r2, [r2, #7]
        packetUBXNAVPVT->data.day = extractByte(msg, 7);
   ba54a:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   ba54c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba54e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba550:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVT->data.hour = extractByte(msg, 8);
   ba552:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   ba554:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba556:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba558:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVT->data.min = extractByte(msg, 9);
   ba55a:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   ba55c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba55e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba560:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVT->data.sec = extractByte(msg, 10);
   ba562:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   ba564:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba566:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba568:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVT->data.valid.all = extractByte(msg, 11);
   ba56a:	73da      	strb	r2, [r3, #15]
        packetUBXNAVPVT->data.tAcc = extractLong(msg, 12);
   ba56c:	210c      	movs	r1, #12
   ba56e:	68a8      	ldr	r0, [r5, #8]
   ba570:	6a26      	ldr	r6, [r4, #32]
   ba572:	f7fe f88b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba576:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba578:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba57a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba57c:	2110      	movs	r1, #16
   ba57e:	f7fe f885 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.nano = extractSignedLong(msg, 16); // Includes milliseconds
   ba582:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba584:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba586:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba588:	7d12      	ldrb	r2, [r2, #20]
        packetUBXNAVPVT->data.fixType = extractByte(msg, 20);
   ba58a:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba58c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba58e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba590:	7d52      	ldrb	r2, [r2, #21]
        packetUBXNAVPVT->data.flags.all = extractByte(msg, 21);
   ba592:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba594:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba596:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba598:	7d92      	ldrb	r2, [r2, #22]
        packetUBXNAVPVT->data.flags2.all = extractByte(msg, 22);
   ba59a:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba59c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba59e:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba5a0:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVPVT->data.numSV = extractByte(msg, 23);
   ba5a2:	76da      	strb	r2, [r3, #27]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5a4:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba5a6:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5a8:	2118      	movs	r1, #24
   ba5aa:	f7fe f86f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lon = extractSignedLong(msg, 24);
   ba5ae:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba5b2:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5b4:	211c      	movs	r1, #28
   ba5b6:	f7fe f869 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.lat = extractSignedLong(msg, 28);
   ba5ba:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5bc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba5be:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c0:	2120      	movs	r1, #32
   ba5c2:	f7fe f863 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.height = extractSignedLong(msg, 32);
   ba5c6:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5c8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba5ca:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5cc:	2124      	movs	r1, #36	; 0x24
   ba5ce:	f7fe f85d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.hMSL = extractSignedLong(msg, 36);
   ba5d2:	62b0      	str	r0, [r6, #40]	; 0x28
        packetUBXNAVPVT->data.hAcc = extractLong(msg, 40);
   ba5d4:	68a8      	ldr	r0, [r5, #8]
   ba5d6:	6a26      	ldr	r6, [r4, #32]
   ba5d8:	2128      	movs	r1, #40	; 0x28
   ba5da:	f7fe f857 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5de:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVT->data.vAcc = extractLong(msg, 44);
   ba5e0:	6a26      	ldr	r6, [r4, #32]
   ba5e2:	68a8      	ldr	r0, [r5, #8]
   ba5e4:	212c      	movs	r1, #44	; 0x2c
   ba5e6:	f7fe f851 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba5ea:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5ec:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba5ee:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5f0:	2130      	movs	r1, #48	; 0x30
   ba5f2:	f7fe f84b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velN = extractSignedLong(msg, 48);
   ba5f6:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5f8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba5fa:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba5fc:	2134      	movs	r1, #52	; 0x34
   ba5fe:	f7fe f845 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velE = extractSignedLong(msg, 52);
   ba602:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba604:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba606:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba608:	2138      	movs	r1, #56	; 0x38
   ba60a:	f7fe f83f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.velD = extractSignedLong(msg, 56);
   ba60e:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba610:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba612:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba614:	213c      	movs	r1, #60	; 0x3c
   ba616:	f7fe f839 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.gSpeed = extractSignedLong(msg, 60);
   ba61a:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba61c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba61e:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba620:	2140      	movs	r1, #64	; 0x40
   ba622:	f7fe f833 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headMot = extractSignedLong(msg, 64);
   ba626:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVT->data.sAcc = extractLong(msg, 68);
   ba628:	68a8      	ldr	r0, [r5, #8]
   ba62a:	6a26      	ldr	r6, [r4, #32]
   ba62c:	2144      	movs	r1, #68	; 0x44
   ba62e:	f7fe f82d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba632:	64b0      	str	r0, [r6, #72]	; 0x48
        packetUBXNAVPVT->data.headAcc = extractLong(msg, 72);
   ba634:	68a8      	ldr	r0, [r5, #8]
   ba636:	6a26      	ldr	r6, [r4, #32]
   ba638:	2148      	movs	r1, #72	; 0x48
   ba63a:	f7fe f827 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba63e:	64f0      	str	r0, [r6, #76]	; 0x4c
        packetUBXNAVPVT->data.pDOP = extractInt(msg, 76);
   ba640:	68a8      	ldr	r0, [r5, #8]
   ba642:	6a26      	ldr	r6, [r4, #32]
   ba644:	214c      	movs	r1, #76	; 0x4c
   ba646:	f7fe f82e 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba64a:	f8a6 0050 	strh.w	r0, [r6, #80]	; 0x50
  return (msg->payload[spotToStart]);
   ba64e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba650:	6a23      	ldr	r3, [r4, #32]
  return (msg->payload[spotToStart]);
   ba652:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
        packetUBXNAVPVT->data.flags3.all = extractByte(msg, 78);
   ba656:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba65a:	6a26      	ldr	r6, [r4, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba65c:	68a8      	ldr	r0, [r5, #8]
   ba65e:	2154      	movs	r1, #84	; 0x54
   ba660:	f7fe f814 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.headVeh = extractSignedLong(msg, 84);
   ba664:	65b0      	str	r0, [r6, #88]	; 0x58
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba666:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba668:	6a26      	ldr	r6, [r4, #32]
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   ba66a:	2158      	movs	r1, #88	; 0x58
   ba66c:	f7fe f81b 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVT->data.magDec = extractSignedInt(msg, 88);
   ba670:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVT->data.magAcc = extractInt(msg, 90);
   ba674:	68a8      	ldr	r0, [r5, #8]
   ba676:	6a26      	ldr	r6, [r4, #32]
   ba678:	215a      	movs	r1, #90	; 0x5a
   ba67a:	f7fe f814 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   ba67e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   ba682:	6a22      	ldr	r2, [r4, #32]
   ba684:	f04f 33ff 	mov.w	r3, #4294967295
   ba688:	6613      	str	r3, [r2, #96]	; 0x60
        packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   ba68a:	6a22      	ldr	r2, [r4, #32]
   ba68c:	6653      	str	r3, [r2, #100]	; 0x64
        if ((packetUBXNAVPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba68e:	6a21      	ldr	r1, [r4, #32]
   ba690:	6f08      	ldr	r0, [r1, #112]	; 0x70
   ba692:	b158      	cbz	r0, ba6ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
            && (packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba694:	780b      	ldrb	r3, [r1, #0]
   ba696:	071b      	lsls	r3, r3, #28
   ba698:	d408      	bmi.n	ba6ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x4b4>
          memcpy(&packetUBXNAVPVT->callbackData->iTOW, &packetUBXNAVPVT->data.iTOW, sizeof(UBX_NAV_PVT_data_t));
   ba69a:	225c      	movs	r2, #92	; 0x5c
   ba69c:	3104      	adds	r1, #4
   ba69e:	f009 ff43 	bl	c4528 <memcpy>
          packetUBXNAVPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   ba6a2:	6a22      	ldr	r2, [r4, #32]
   ba6a4:	7813      	ldrb	r3, [r2, #0]
   ba6a6:	f043 0308 	orr.w	r3, r3, #8
   ba6aa:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVT->automaticFlags.flags.bits.addToFileBuffer)
   ba6ac:	6a23      	ldr	r3, [r4, #32]
   ba6ae:	e642      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba6b0:	00200500 	.word	0x00200500
   ba6b4:	005c0700 	.word	0x005c0700
    else if (msg->id == UBX_NAV_ODO && msg->len == UBX_NAV_ODO_LEN)
   ba6b8:	4a8e      	ldr	r2, [pc, #568]	; (ba8f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6fc>)
   ba6ba:	4293      	cmp	r3, r2
   ba6bc:	d137      	bne.n	ba72e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x536>
      if (packetUBXNAVODO != NULL)
   ba6be:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba6c0:	2b00      	cmp	r3, #0
   ba6c2:	f43f adaa 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba6c6:	688a      	ldr	r2, [r1, #8]
   ba6c8:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVODO->data.version = extractByte(msg, 0);
   ba6ca:	711a      	strb	r2, [r3, #4]
        packetUBXNAVODO->data.iTOW = extractLong(msg, 4);
   ba6cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ba6ce:	68a8      	ldr	r0, [r5, #8]
   ba6d0:	2104      	movs	r1, #4
   ba6d2:	f7fd ffdb 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6d6:	60b0      	str	r0, [r6, #8]
        packetUBXNAVODO->data.distance = extractLong(msg, 8);
   ba6d8:	68a8      	ldr	r0, [r5, #8]
   ba6da:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba6dc:	2108      	movs	r1, #8
   ba6de:	f7fd ffd5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6e2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVODO->data.totalDistance = extractLong(msg, 12);
   ba6e4:	68a8      	ldr	r0, [r5, #8]
   ba6e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba6e8:	210c      	movs	r1, #12
   ba6ea:	f7fd ffcf 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6ee:	6130      	str	r0, [r6, #16]
        packetUBXNAVODO->data.distanceStd = extractLong(msg, 16);
   ba6f0:	68a8      	ldr	r0, [r5, #8]
   ba6f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ba6f4:	2110      	movs	r1, #16
   ba6f6:	f7fd ffc9 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba6fa:	6170      	str	r0, [r6, #20]
        packetUBXNAVODO->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba6fe:	f04f 32ff 	mov.w	r2, #4294967295
   ba702:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVODO->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba704:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba708:	b17a      	cbz	r2, ba72a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
            && (packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba70a:	7819      	ldrb	r1, [r3, #0]
   ba70c:	070f      	lsls	r7, r1, #28
   ba70e:	d40c      	bmi.n	ba72a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x532>
          memcpy(&packetUBXNAVODO->callbackData->version, &packetUBXNAVODO->data.version, sizeof(UBX_NAV_ODO_data_t));
   ba710:	1d19      	adds	r1, r3, #4
   ba712:	3318      	adds	r3, #24
   ba714:	f851 0b04 	ldr.w	r0, [r1], #4
   ba718:	f842 0b04 	str.w	r0, [r2], #4
   ba71c:	4299      	cmp	r1, r3
   ba71e:	d1f9      	bne.n	ba714 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x51c>
          packetUBXNAVODO->automaticFlags.flags.bits.callbackCopyValid = true;
   ba720:	6a62      	ldr	r2, [r4, #36]	; 0x24
   ba722:	7813      	ldrb	r3, [r2, #0]
   ba724:	f043 0308 	orr.w	r3, r3, #8
   ba728:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVODO->automaticFlags.flags.bits.addToFileBuffer)
   ba72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ba72c:	e603      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELECEF && msg->len == UBX_NAV_VELECEF_LEN)
   ba72e:	4a72      	ldr	r2, [pc, #456]	; (ba8f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x700>)
   ba730:	4293      	cmp	r3, r2
   ba732:	d139      	bne.n	ba7a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5b0>
      if (packetUBXNAVVELECEF != NULL)
   ba734:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   ba736:	2e00      	cmp	r6, #0
   ba738:	f43f ad6f 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELECEF->data.iTOW = extractLong(msg, 0);
   ba73c:	68a8      	ldr	r0, [r5, #8]
   ba73e:	2100      	movs	r1, #0
   ba740:	f7fd ffa4 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba744:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba746:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba74a:	2104      	movs	r1, #4
   ba74c:	f7fd ff9e 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVX = extractSignedLong(msg, 4);
   ba750:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba752:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba756:	2108      	movs	r1, #8
   ba758:	f7fd ff98 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVY = extractSignedLong(msg, 8);
   ba75c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba75e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba762:	210c      	movs	r1, #12
   ba764:	f7fd ff92 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELECEF->data.ecefVZ = extractSignedLong(msg, 12);
   ba768:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELECEF->data.sAcc = extractLong(msg, 16);
   ba76a:	68a8      	ldr	r0, [r5, #8]
   ba76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   ba76e:	2110      	movs	r1, #16
   ba770:	f7fd ff8c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba774:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba778:	f04f 32ff 	mov.w	r2, #4294967295
   ba77c:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVVELECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba77e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   ba782:	b17a      	cbz	r2, ba7a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
            && (packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba784:	7819      	ldrb	r1, [r3, #0]
   ba786:	070e      	lsls	r6, r1, #28
   ba788:	d40c      	bmi.n	ba7a4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x5ac>
          memcpy(&packetUBXNAVVELECEF->callbackData->iTOW, &packetUBXNAVVELECEF->data.iTOW, sizeof(UBX_NAV_VELECEF_data_t));
   ba78a:	1d19      	adds	r1, r3, #4
   ba78c:	3318      	adds	r3, #24
   ba78e:	f851 0b04 	ldr.w	r0, [r1], #4
   ba792:	f842 0b04 	str.w	r0, [r2], #4
   ba796:	4299      	cmp	r1, r3
   ba798:	d1f9      	bne.n	ba78e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x596>
          packetUBXNAVVELECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba79a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ba79c:	7813      	ldrb	r3, [r2, #0]
   ba79e:	f043 0308 	orr.w	r3, r3, #8
   ba7a2:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba7a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba7a6:	e5c6      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_VELNED && msg->len == UBX_NAV_VELNED_LEN)
   ba7a8:	4a54      	ldr	r2, [pc, #336]	; (ba8fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x704>)
   ba7aa:	4293      	cmp	r3, r2
   ba7ac:	d151      	bne.n	ba852 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x65a>
      if (packetUBXNAVVELNED != NULL)
   ba7ae:	6b06      	ldr	r6, [r0, #48]	; 0x30
   ba7b0:	2e00      	cmp	r6, #0
   ba7b2:	f43f ad32 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVVELNED->data.iTOW = extractLong(msg, 0);
   ba7b6:	68a8      	ldr	r0, [r5, #8]
   ba7b8:	2100      	movs	r1, #0
   ba7ba:	f7fd ff67 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7be:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7c0:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba7c2:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7c4:	2104      	movs	r1, #4
   ba7c6:	f7fd ff61 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velN = extractSignedLong(msg, 4);
   ba7ca:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7cc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba7ce:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d0:	2108      	movs	r1, #8
   ba7d2:	f7fd ff5b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velE = extractSignedLong(msg, 8);
   ba7d6:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7d8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba7da:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7dc:	210c      	movs	r1, #12
   ba7de:	f7fd ff55 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.velD = extractSignedLong(msg, 12);
   ba7e2:	6130      	str	r0, [r6, #16]
        packetUBXNAVVELNED->data.speed = extractLong(msg, 16);
   ba7e4:	68a8      	ldr	r0, [r5, #8]
   ba7e6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba7e8:	2110      	movs	r1, #16
   ba7ea:	f7fd ff4f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7ee:	6170      	str	r0, [r6, #20]
        packetUBXNAVVELNED->data.gSpeed = extractLong(msg, 20);
   ba7f0:	68a8      	ldr	r0, [r5, #8]
   ba7f2:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba7f4:	2114      	movs	r1, #20
   ba7f6:	f7fd ff49 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba7fa:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba7fc:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba7fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba800:	2118      	movs	r1, #24
   ba802:	f7fd ff43 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVVELNED->data.heading = extractSignedLong(msg, 24);
   ba806:	61f0      	str	r0, [r6, #28]
        packetUBXNAVVELNED->data.sAcc = extractLong(msg, 28);
   ba808:	68a8      	ldr	r0, [r5, #8]
   ba80a:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba80c:	211c      	movs	r1, #28
   ba80e:	f7fd ff3d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba812:	6230      	str	r0, [r6, #32]
        packetUBXNAVVELNED->data.cAcc = extractLong(msg, 32);
   ba814:	68a8      	ldr	r0, [r5, #8]
   ba816:	6b26      	ldr	r6, [r4, #48]	; 0x30
   ba818:	2120      	movs	r1, #32
   ba81a:	f7fd ff37 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba81e:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVVELNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba820:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba822:	f04f 32ff 	mov.w	r2, #4294967295
   ba826:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVVELNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba828:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba82a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba82c:	b17a      	cbz	r2, ba84e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
            && (packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba82e:	7819      	ldrb	r1, [r3, #0]
   ba830:	0708      	lsls	r0, r1, #28
   ba832:	d40c      	bmi.n	ba84e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x656>
          memcpy(&packetUBXNAVVELNED->callbackData->iTOW, &packetUBXNAVVELNED->data.iTOW, sizeof(UBX_NAV_VELNED_data_t));
   ba834:	1d19      	adds	r1, r3, #4
   ba836:	3328      	adds	r3, #40	; 0x28
   ba838:	f851 0b04 	ldr.w	r0, [r1], #4
   ba83c:	f842 0b04 	str.w	r0, [r2], #4
   ba840:	4299      	cmp	r1, r3
   ba842:	d1f9      	bne.n	ba838 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x640>
          packetUBXNAVVELNED->automaticFlags.flags.bits.callbackCopyValid = true;
   ba844:	6b22      	ldr	r2, [r4, #48]	; 0x30
   ba846:	7813      	ldrb	r3, [r2, #0]
   ba848:	f043 0308 	orr.w	r3, r3, #8
   ba84c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVVELNED->automaticFlags.flags.bits.addToFileBuffer)
   ba84e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   ba850:	e571      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_HPPOSECEF && msg->len == UBX_NAV_HPPOSECEF_LEN)
   ba852:	4a2b      	ldr	r2, [pc, #172]	; (ba900 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x708>)
   ba854:	4293      	cmp	r3, r2
   ba856:	d155      	bne.n	ba904 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x70c>
      if (packetUBXNAVHPPOSECEF != NULL)
   ba858:	6b43      	ldr	r3, [r0, #52]	; 0x34
   ba85a:	2b00      	cmp	r3, #0
   ba85c:	f43f acdd 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba860:	688a      	ldr	r2, [r1, #8]
   ba862:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSECEF->data.version = extractByte(msg, 0);
   ba864:	711a      	strb	r2, [r3, #4]
        packetUBXNAVHPPOSECEF->data.iTOW = extractLong(msg, 4);
   ba866:	6b46      	ldr	r6, [r0, #52]	; 0x34
   ba868:	68a8      	ldr	r0, [r5, #8]
   ba86a:	2104      	movs	r1, #4
   ba86c:	f7fd ff0e 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba870:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba872:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba874:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba876:	2108      	movs	r1, #8
   ba878:	f7fd ff08 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefX = extractSignedLong(msg, 8);
   ba87c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba87e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba880:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba882:	210c      	movs	r1, #12
   ba884:	f7fd ff02 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefY = extractSignedLong(msg, 12);
   ba888:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba88a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba88c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba88e:	2110      	movs	r1, #16
   ba890:	f7fd fefc 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSECEF->data.ecefZ = extractSignedLong(msg, 16);
   ba894:	6170      	str	r0, [r6, #20]
  return (msg->payload[spotToStart]);
   ba896:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefXHp = extractSignedChar(msg, 20);
   ba898:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba89a:	7d12      	ldrb	r2, [r2, #20]
   ba89c:	761a      	strb	r2, [r3, #24]
  return (msg->payload[spotToStart]);
   ba89e:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefYHp = extractSignedChar(msg, 21);
   ba8a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba8a2:	7d52      	ldrb	r2, [r2, #21]
   ba8a4:	765a      	strb	r2, [r3, #25]
  return (msg->payload[spotToStart]);
   ba8a6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.ecefZHp = extractSignedChar(msg, 22);
   ba8a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba8aa:	7d92      	ldrb	r2, [r2, #22]
   ba8ac:	769a      	strb	r2, [r3, #26]
  return (msg->payload[spotToStart]);
   ba8ae:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba8b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return (msg->payload[spotToStart]);
   ba8b2:	7dd2      	ldrb	r2, [r2, #23]
        packetUBXNAVHPPOSECEF->data.flags.all = extractByte(msg, 23);
   ba8b4:	76da      	strb	r2, [r3, #27]
        packetUBXNAVHPPOSECEF->data.pAcc = extractLong(msg, 24);
   ba8b6:	6b66      	ldr	r6, [r4, #52]	; 0x34
   ba8b8:	68a8      	ldr	r0, [r5, #8]
   ba8ba:	2118      	movs	r1, #24
   ba8bc:	f7fd fee6 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba8c0:	61f0      	str	r0, [r6, #28]
        packetUBXNAVHPPOSECEF->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba8c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba8c4:	f04f 32ff 	mov.w	r2, #4294967295
   ba8c8:	621a      	str	r2, [r3, #32]
        if ((packetUBXNAVHPPOSECEF->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba8ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   ba8ce:	b17a      	cbz	r2, ba8f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
            && (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba8d0:	7819      	ldrb	r1, [r3, #0]
   ba8d2:	0709      	lsls	r1, r1, #28
   ba8d4:	d40c      	bmi.n	ba8f0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6f8>
          memcpy(&packetUBXNAVHPPOSECEF->callbackData->version, &packetUBXNAVHPPOSECEF->data.version, sizeof(UBX_NAV_HPPOSECEF_data_t));
   ba8d6:	1d19      	adds	r1, r3, #4
   ba8d8:	3320      	adds	r3, #32
   ba8da:	f851 0b04 	ldr.w	r0, [r1], #4
   ba8de:	f842 0b04 	str.w	r0, [r2], #4
   ba8e2:	4299      	cmp	r1, r3
   ba8e4:	d1f9      	bne.n	ba8da <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x6e2>
          packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.callbackCopyValid = true;
   ba8e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   ba8e8:	7813      	ldrb	r3, [r2, #0]
   ba8ea:	f043 0308 	orr.w	r3, r3, #8
   ba8ee:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSECEF->automaticFlags.flags.bits.addToFileBuffer)
   ba8f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   ba8f2:	e520      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba8f4:	00140900 	.word	0x00140900
   ba8f8:	00141100 	.word	0x00141100
   ba8fc:	00241200 	.word	0x00241200
   ba900:	001c1300 	.word	0x001c1300
    else if (msg->id == UBX_NAV_HPPOSLLH && msg->len == UBX_NAV_HPPOSLLH_LEN)
   ba904:	4a30      	ldr	r2, [pc, #192]	; (ba9c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d0>)
   ba906:	4293      	cmp	r3, r2
   ba908:	d160      	bne.n	ba9cc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7d4>
      if (packetUBXNAVHPPOSLLH != NULL)
   ba90a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   ba90c:	2b00      	cmp	r3, #0
   ba90e:	f43f ac84 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   ba912:	688a      	ldr	r2, [r1, #8]
   ba914:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVHPPOSLLH->data.version = extractByte(msg, 0);
   ba916:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   ba918:	688a      	ldr	r2, [r1, #8]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba91a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  return (msg->payload[spotToStart]);
   ba91c:	78d2      	ldrb	r2, [r2, #3]
        packetUBXNAVHPPOSLLH->data.flags.all = extractByte(msg, 3);
   ba91e:	71da      	strb	r2, [r3, #7]
        packetUBXNAVHPPOSLLH->data.iTOW = extractLong(msg, 4);
   ba920:	6b86      	ldr	r6, [r0, #56]	; 0x38
   ba922:	68a8      	ldr	r0, [r5, #8]
   ba924:	2104      	movs	r1, #4
   ba926:	f7fd feb1 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba92a:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba92c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba92e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba930:	2108      	movs	r1, #8
   ba932:	f7fd feab 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lon = extractSignedLong(msg, 8);
   ba936:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba938:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba93a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba93c:	210c      	movs	r1, #12
   ba93e:	f7fd fea5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.lat = extractSignedLong(msg, 12);
   ba942:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba944:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba946:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba948:	2110      	movs	r1, #16
   ba94a:	f7fd fe9f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.height = extractSignedLong(msg, 16);
   ba94e:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba950:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba952:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   ba954:	2114      	movs	r1, #20
   ba956:	f7fd fe99 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVHPPOSLLH->data.hMSL = extractSignedLong(msg, 20);
   ba95a:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   ba95c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.lonHp = extractSignedChar(msg, 24);
   ba95e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba960:	7e12      	ldrb	r2, [r2, #24]
   ba962:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   ba964:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.latHp = extractSignedChar(msg, 25);
   ba966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba968:	7e52      	ldrb	r2, [r2, #25]
   ba96a:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   ba96c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.heightHp = extractSignedChar(msg, 26);
   ba96e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba970:	7e92      	ldrb	r2, [r2, #26]
   ba972:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   ba974:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVHPPOSLLH->data.hMSLHp = extractSignedChar(msg, 27);
   ba976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba978:	7ed2      	ldrb	r2, [r2, #27]
   ba97a:	77da      	strb	r2, [r3, #31]
        packetUBXNAVHPPOSLLH->data.hAcc = extractLong(msg, 28);
   ba97c:	68a8      	ldr	r0, [r5, #8]
   ba97e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba980:	211c      	movs	r1, #28
   ba982:	f7fd fe83 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba986:	6230      	str	r0, [r6, #32]
        packetUBXNAVHPPOSLLH->data.vAcc = extractLong(msg, 32);
   ba988:	68a8      	ldr	r0, [r5, #8]
   ba98a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   ba98c:	2120      	movs	r1, #32
   ba98e:	f7fd fe7d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba992:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXNAVHPPOSLLH->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   ba994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba996:	f04f 32ff 	mov.w	r2, #4294967295
   ba99a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXNAVHPPOSLLH->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   ba99c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba99e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   ba9a0:	b17a      	cbz	r2, ba9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
            && (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   ba9a2:	7819      	ldrb	r1, [r3, #0]
   ba9a4:	070f      	lsls	r7, r1, #28
   ba9a6:	d40c      	bmi.n	ba9c2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7ca>
          memcpy(&packetUBXNAVHPPOSLLH->callbackData->version, &packetUBXNAVHPPOSLLH->data.version, sizeof(UBX_NAV_HPPOSLLH_data_t));
   ba9a8:	1d19      	adds	r1, r3, #4
   ba9aa:	3328      	adds	r3, #40	; 0x28
   ba9ac:	f851 0b04 	ldr.w	r0, [r1], #4
   ba9b0:	f842 0b04 	str.w	r0, [r2], #4
   ba9b4:	4299      	cmp	r1, r3
   ba9b6:	d1f9      	bne.n	ba9ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x7b4>
          packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.callbackCopyValid = true;
   ba9b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   ba9ba:	7813      	ldrb	r3, [r2, #0]
   ba9bc:	f043 0308 	orr.w	r3, r3, #8
   ba9c0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVHPPOSLLH->automaticFlags.flags.bits.addToFileBuffer)
   ba9c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ba9c4:	e4b7      	b.n	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   ba9c6:	bf00      	nop
   ba9c8:	00241400 	.word	0x00241400
    else if (msg->id == UBX_NAV_PVAT && msg->len == UBX_NAV_PVAT_LEN)
   ba9cc:	4aa1      	ldr	r2, [pc, #644]	; (bac54 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa5c>)
   ba9ce:	4293      	cmp	r3, r2
   ba9d0:	f040 80f0 	bne.w	babb4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9bc>
      if (packetUBXNAVPVAT != NULL)
   ba9d4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   ba9d6:	2e00      	cmp	r6, #0
   ba9d8:	f43f ac1f 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVPVAT->data.iTOW = extractLong(msg, 0);
   ba9dc:	68a8      	ldr	r0, [r5, #8]
   ba9de:	2100      	movs	r1, #0
   ba9e0:	f7fd fe54 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   ba9e4:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   ba9e6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba9e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba9ea:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVPVAT->data.version = extractByte(msg, 4);
   ba9ec:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   ba9ee:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba9f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   ba9f2:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVPVAT->data.valid.all = extractByte(msg, 5);
   ba9f4:	725a      	strb	r2, [r3, #9]
        packetUBXNAVPVAT->data.year = extractInt(msg, 6);
   ba9f6:	68a8      	ldr	r0, [r5, #8]
   ba9f8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   ba9fa:	2106      	movs	r1, #6
   ba9fc:	f7fd fe53 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baa00:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   baa02:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   baa04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa06:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVPVAT->data.month = extractByte(msg, 8);
   baa08:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   baa0a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   baa0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa0e:	7a52      	ldrb	r2, [r2, #9]
        packetUBXNAVPVAT->data.day = extractByte(msg, 9);
   baa10:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   baa12:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   baa14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa16:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVPVAT->data.hour = extractByte(msg, 10);
   baa18:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baa1a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   baa1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa1e:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXNAVPVAT->data.min = extractByte(msg, 11);
   baa20:	73da      	strb	r2, [r3, #15]
  return (msg->payload[spotToStart]);
   baa22:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   baa24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa26:	7b12      	ldrb	r2, [r2, #12]
        packetUBXNAVPVAT->data.sec = extractByte(msg, 12);
   baa28:	741a      	strb	r2, [r3, #16]
        packetUBXNAVPVAT->data.tAcc = extractLong(msg, 16);
   baa2a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baa2c:	68a8      	ldr	r0, [r5, #8]
   baa2e:	2110      	movs	r1, #16
   baa30:	f7fd fe2c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa34:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa36:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   baa38:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa3a:	2114      	movs	r1, #20
   baa3c:	f7fd fe26 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.nano = extractSignedLong(msg, 20); // Includes milliseconds
   baa40:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   baa42:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   baa44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa46:	7e12      	ldrb	r2, [r2, #24]
        packetUBXNAVPVAT->data.fixType = extractByte(msg, 24);
   baa48:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   baa4a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   baa4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa4e:	7e52      	ldrb	r2, [r2, #25]
        packetUBXNAVPVAT->data.flags.all = extractByte(msg, 25);
   baa50:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   baa52:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   baa54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa56:	7e92      	ldrb	r2, [r2, #26]
        packetUBXNAVPVAT->data.flags2.all = extractByte(msg, 26);
   baa58:	779a      	strb	r2, [r3, #30]
  return (msg->payload[spotToStart]);
   baa5a:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   baa5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  return (msg->payload[spotToStart]);
   baa5e:	7ed2      	ldrb	r2, [r2, #27]
        packetUBXNAVPVAT->data.numSV = extractByte(msg, 27);
   baa60:	77da      	strb	r2, [r3, #31]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa62:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   baa64:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa66:	211c      	movs	r1, #28
   baa68:	f7fd fe10 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lon = extractSignedLong(msg, 28);
   baa6c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa6e:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   baa70:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa72:	2120      	movs	r1, #32
   baa74:	f7fd fe0a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.lat = extractSignedLong(msg, 32);
   baa78:	6270      	str	r0, [r6, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa7a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   baa7c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa7e:	2124      	movs	r1, #36	; 0x24
   baa80:	f7fd fe04 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.height = extractSignedLong(msg, 36);
   baa84:	62b0      	str	r0, [r6, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa86:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   baa88:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baa8a:	2128      	movs	r1, #40	; 0x28
   baa8c:	f7fd fdfe 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.hMSL = extractSignedLong(msg, 40);
   baa90:	62f0      	str	r0, [r6, #44]	; 0x2c
        packetUBXNAVPVAT->data.hAcc = extractLong(msg, 44);
   baa92:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baa94:	68a8      	ldr	r0, [r5, #8]
   baa96:	212c      	movs	r1, #44	; 0x2c
   baa98:	f7fd fdf8 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baa9c:	6330      	str	r0, [r6, #48]	; 0x30
        packetUBXNAVPVAT->data.vAcc = extractLong(msg, 48);
   baa9e:	68a8      	ldr	r0, [r5, #8]
   baaa0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baaa2:	2130      	movs	r1, #48	; 0x30
   baaa4:	f7fd fdf2 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baaa8:	6370      	str	r0, [r6, #52]	; 0x34
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaaa:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   baaac:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaae:	2134      	movs	r1, #52	; 0x34
   baab0:	f7fd fdec 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velN = extractSignedLong(msg, 52);
   baab4:	63b0      	str	r0, [r6, #56]	; 0x38
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baab6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   baab8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaba:	2138      	movs	r1, #56	; 0x38
   baabc:	f7fd fde6 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velE = extractSignedLong(msg, 56);
   baac0:	63f0      	str	r0, [r6, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baac2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   baac4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baac6:	213c      	movs	r1, #60	; 0x3c
   baac8:	f7fd fde0 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.velD = extractSignedLong(msg, 60);
   baacc:	6430      	str	r0, [r6, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baace:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   baad0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baad2:	2140      	movs	r1, #64	; 0x40
   baad4:	f7fd fdda 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.gSpeed = extractSignedLong(msg, 64);
   baad8:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXNAVPVAT->data.sAcc = extractLong(msg, 68);
   baada:	68a8      	ldr	r0, [r5, #8]
   baadc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   baade:	2144      	movs	r1, #68	; 0x44
   baae0:	f7fd fdd4 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baae4:	64b0      	str	r0, [r6, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baae6:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   baae8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaea:	2148      	movs	r1, #72	; 0x48
   baaec:	f7fd fdce 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehRoll = extractSignedLong(msg, 72);
   baaf0:	64f0      	str	r0, [r6, #76]	; 0x4c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaf2:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   baaf4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baaf6:	214c      	movs	r1, #76	; 0x4c
   baaf8:	f7fd fdc8 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehPitch = extractSignedLong(msg, 76);
   baafc:	6530      	str	r0, [r6, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baafe:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bab00:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab02:	2150      	movs	r1, #80	; 0x50
   bab04:	f7fd fdc2 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.vehHeading = extractSignedLong(msg, 80);
   bab08:	6570      	str	r0, [r6, #84]	; 0x54
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab0a:	2154      	movs	r1, #84	; 0x54
   bab0c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   bab0e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bab10:	f7fd fdbc 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.motHeading = extractSignedLong(msg, 84);
   bab14:	65b0      	str	r0, [r6, #88]	; 0x58
        packetUBXNAVPVAT->data.accRoll = extractInt(msg, 88);
   bab16:	68a8      	ldr	r0, [r5, #8]
   bab18:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab1a:	2158      	movs	r1, #88	; 0x58
   bab1c:	f7fd fdc3 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab20:	f8a6 005c 	strh.w	r0, [r6, #92]	; 0x5c
        packetUBXNAVPVAT->data.accPitch = extractInt(msg, 90);
   bab24:	68a8      	ldr	r0, [r5, #8]
   bab26:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab28:	215a      	movs	r1, #90	; 0x5a
   bab2a:	f7fd fdbc 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab2e:	f8a6 005e 	strh.w	r0, [r6, #94]	; 0x5e
        packetUBXNAVPVAT->data.accHeading = extractInt(msg, 92);
   bab32:	68a8      	ldr	r0, [r5, #8]
   bab34:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab36:	215c      	movs	r1, #92	; 0x5c
   bab38:	f7fd fdb5 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab3c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab40:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   bab42:	6be6      	ldr	r6, [r4, #60]	; 0x3c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   bab44:	215e      	movs	r1, #94	; 0x5e
   bab46:	f7fd fdae 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVPVAT->data.magDec = extractSignedInt(msg, 94);
   bab4a:	f8a6 0062 	strh.w	r0, [r6, #98]	; 0x62
        packetUBXNAVPVAT->data.magAcc = extractInt(msg, 96);
   bab4e:	68a8      	ldr	r0, [r5, #8]
   bab50:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab52:	2160      	movs	r1, #96	; 0x60
   bab54:	f7fd fda7 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab58:	f8a6 0064 	strh.w	r0, [r6, #100]	; 0x64
        packetUBXNAVPVAT->data.errEllipseOrient = extractInt(msg, 98);
   bab5c:	68a8      	ldr	r0, [r5, #8]
   bab5e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab60:	2162      	movs	r1, #98	; 0x62
   bab62:	f7fd fda0 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bab66:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
        packetUBXNAVPVAT->data.errEllipseMajor = extractLong(msg, 100);
   bab6a:	68a8      	ldr	r0, [r5, #8]
   bab6c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab6e:	2164      	movs	r1, #100	; 0x64
   bab70:	f7fd fd8c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab74:	66b0      	str	r0, [r6, #104]	; 0x68
        packetUBXNAVPVAT->data.errEllipseMinor = extractLong(msg, 104);
   bab76:	68a8      	ldr	r0, [r5, #8]
   bab78:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   bab7a:	2168      	movs	r1, #104	; 0x68
   bab7c:	f7fd fd86 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bab80:	66f0      	str	r0, [r6, #108]	; 0x6c
        packetUBXNAVPVAT->moduleQueried.moduleQueried1.all = 0xFFFFFFFF;
   bab82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bab84:	f04f 33ff 	mov.w	r3, #4294967295
   bab88:	6793      	str	r3, [r2, #120]	; 0x78
        packetUBXNAVPVAT->moduleQueried.moduleQueried2.all = 0xFFFFFFFF;
   bab8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   bab8c:	67d3      	str	r3, [r2, #124]	; 0x7c
        if ((packetUBXNAVPVAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bab8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   bab90:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
   bab94:	b158      	cbz	r0, babae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
            && (packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bab96:	780b      	ldrb	r3, [r1, #0]
   bab98:	071e      	lsls	r6, r3, #28
   bab9a:	d408      	bmi.n	babae <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x9b6>
          memcpy(&packetUBXNAVPVAT->callbackData->iTOW, &packetUBXNAVPVAT->data.iTOW, sizeof(UBX_NAV_PVAT_data_t));
   bab9c:	2274      	movs	r2, #116	; 0x74
   bab9e:	3104      	adds	r1, #4
   baba0:	f009 fcc2 	bl	c4528 <memcpy>
          packetUBXNAVPVAT->automaticFlags.flags.bits.callbackCopyValid = true;
   baba4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   baba6:	7813      	ldrb	r3, [r2, #0]
   baba8:	f043 0308 	orr.w	r3, r3, #8
   babac:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVPVAT->automaticFlags.flags.bits.addToFileBuffer)
   babae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   babb0:	f7ff bbc1 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMEUTC && msg->len == UBX_NAV_TIMEUTC_LEN)
   babb4:	4a28      	ldr	r2, [pc, #160]	; (bac58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa60>)
   babb6:	4293      	cmp	r3, r2
   babb8:	d150      	bne.n	bac5c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa64>
      if (packetUBXNAVTIMEUTC != NULL)
   babba:	6a86      	ldr	r6, [r0, #40]	; 0x28
   babbc:	2e00      	cmp	r6, #0
   babbe:	f43f ab2c 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMEUTC->data.iTOW = extractLong(msg, 0);
   babc2:	68a8      	ldr	r0, [r5, #8]
   babc4:	2100      	movs	r1, #0
   babc6:	f7fd fd61 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babca:	6070      	str	r0, [r6, #4]
        packetUBXNAVTIMEUTC->data.tAcc = extractLong(msg, 4);
   babcc:	68a8      	ldr	r0, [r5, #8]
   babce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   babd0:	2104      	movs	r1, #4
   babd2:	f7fd fd5b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   babd6:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babd8:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   babda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   babdc:	2108      	movs	r1, #8
   babde:	f7fd fd55 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMEUTC->data.nano = extractSignedLong(msg, 8);
   babe2:	60f0      	str	r0, [r6, #12]
        packetUBXNAVTIMEUTC->data.year = extractInt(msg, 12);
   babe4:	68a8      	ldr	r0, [r5, #8]
   babe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   babe8:	210c      	movs	r1, #12
   babea:	f7fd fd5c 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   babee:	8230      	strh	r0, [r6, #16]
  return (msg->payload[spotToStart]);
   babf0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   babf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   babf4:	7b92      	ldrb	r2, [r2, #14]
        packetUBXNAVTIMEUTC->data.month = extractByte(msg, 14);
   babf6:	749a      	strb	r2, [r3, #18]
  return (msg->payload[spotToStart]);
   babf8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   babfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   babfc:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXNAVTIMEUTC->data.day = extractByte(msg, 15);
   babfe:	74da      	strb	r2, [r3, #19]
  return (msg->payload[spotToStart]);
   bac00:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bac02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac04:	7c12      	ldrb	r2, [r2, #16]
        packetUBXNAVTIMEUTC->data.hour = extractByte(msg, 16);
   bac06:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bac08:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bac0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac0c:	7c52      	ldrb	r2, [r2, #17]
        packetUBXNAVTIMEUTC->data.min = extractByte(msg, 17);
   bac0e:	755a      	strb	r2, [r3, #21]
  return (msg->payload[spotToStart]);
   bac10:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   bac12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac14:	7c92      	ldrb	r2, [r2, #18]
        packetUBXNAVTIMEUTC->data.sec = extractByte(msg, 18);
   bac16:	759a      	strb	r2, [r3, #22]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   bac18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return (msg->payload[spotToStart]);
   bac1a:	68aa      	ldr	r2, [r5, #8]
   bac1c:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXNAVTIMEUTC->data.valid.all = extractByte(msg, 19);
   bac1e:	75da      	strb	r2, [r3, #23]
        packetUBXNAVTIMEUTC->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bac20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bac22:	f04f 32ff 	mov.w	r2, #4294967295
   bac26:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVTIMEUTC->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bac28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bac2a:	6a1a      	ldr	r2, [r3, #32]
   bac2c:	b17a      	cbz	r2, bac4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
            && (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bac2e:	7819      	ldrb	r1, [r3, #0]
   bac30:	0708      	lsls	r0, r1, #28
   bac32:	d40c      	bmi.n	bac4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa56>
          memcpy(&packetUBXNAVTIMEUTC->callbackData->iTOW, &packetUBXNAVTIMEUTC->data.iTOW, sizeof(UBX_NAV_TIMEUTC_data_t));
   bac34:	1d19      	adds	r1, r3, #4
   bac36:	3318      	adds	r3, #24
   bac38:	f851 0b04 	ldr.w	r0, [r1], #4
   bac3c:	f842 0b04 	str.w	r0, [r2], #4
   bac40:	4299      	cmp	r1, r3
   bac42:	d1f9      	bne.n	bac38 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xa40>
          packetUBXNAVTIMEUTC->automaticFlags.flags.bits.callbackCopyValid = true;
   bac44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   bac46:	7813      	ldrb	r3, [r2, #0]
   bac48:	f043 0308 	orr.w	r3, r3, #8
   bac4c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVTIMEUTC->automaticFlags.flags.bits.addToFileBuffer)
   bac4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bac50:	f7ff bb71 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bac54:	00741700 	.word	0x00741700
   bac58:	00142100 	.word	0x00142100
    else if (msg->id == UBX_NAV_CLOCK && msg->len == UBX_NAV_CLOCK_LEN)
   bac5c:	4a84      	ldr	r2, [pc, #528]	; (bae70 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc78>)
   bac5e:	4293      	cmp	r3, r2
   bac60:	d13a      	bne.n	bacd8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xae0>
      if (packetUBXNAVCLOCK != NULL)
   bac62:	6c06      	ldr	r6, [r0, #64]	; 0x40
   bac64:	2e00      	cmp	r6, #0
   bac66:	f43f aad8 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVCLOCK->data.iTOW = extractLong(msg, 0);
   bac6a:	68a8      	ldr	r0, [r5, #8]
   bac6c:	2100      	movs	r1, #0
   bac6e:	f7fd fd0d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac72:	6070      	str	r0, [r6, #4]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac74:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bac76:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac78:	2104      	movs	r1, #4
   bac7a:	f7fd fd07 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkB = extractSignedLong(msg, 4);
   bac7e:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac80:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bac82:	6c26      	ldr	r6, [r4, #64]	; 0x40
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bac84:	2108      	movs	r1, #8
   bac86:	f7fd fd01 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVCLOCK->data.clkD = extractSignedLong(msg, 8);
   bac8a:	60f0      	str	r0, [r6, #12]
        packetUBXNAVCLOCK->data.tAcc = extractLong(msg, 12);
   bac8c:	68a8      	ldr	r0, [r5, #8]
   bac8e:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bac90:	210c      	movs	r1, #12
   bac92:	f7fd fcfb 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bac96:	6130      	str	r0, [r6, #16]
        packetUBXNAVCLOCK->data.fAcc = extractLong(msg, 16);
   bac98:	68a8      	ldr	r0, [r5, #8]
   bac9a:	6c26      	ldr	r6, [r4, #64]	; 0x40
   bac9c:	2110      	movs	r1, #16
   bac9e:	f7fd fcf5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baca2:	6170      	str	r0, [r6, #20]
        packetUBXNAVCLOCK->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   baca4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   baca6:	f04f 32ff 	mov.w	r2, #4294967295
   bacaa:	619a      	str	r2, [r3, #24]
        if ((packetUBXNAVCLOCK->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bacac:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bacae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   bacb0:	b17a      	cbz	r2, bacd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
            && (packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bacb2:	7819      	ldrb	r1, [r3, #0]
   bacb4:	0709      	lsls	r1, r1, #28
   bacb6:	d40c      	bmi.n	bacd2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xada>
          memcpy(&packetUBXNAVCLOCK->callbackData->iTOW, &packetUBXNAVCLOCK->data.iTOW, sizeof(UBX_NAV_CLOCK_data_t));
   bacb8:	1d19      	adds	r1, r3, #4
   bacba:	3318      	adds	r3, #24
   bacbc:	f851 0b04 	ldr.w	r0, [r1], #4
   bacc0:	f842 0b04 	str.w	r0, [r2], #4
   bacc4:	4299      	cmp	r1, r3
   bacc6:	d1f9      	bne.n	bacbc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xac4>
          packetUBXNAVCLOCK->automaticFlags.flags.bits.callbackCopyValid = true;
   bacc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   bacca:	7813      	ldrb	r3, [r2, #0]
   baccc:	f043 0308 	orr.w	r3, r3, #8
   bacd0:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVCLOCK->automaticFlags.flags.bits.addToFileBuffer)
   bacd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   bacd4:	f7ff bb2f 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_TIMELS && msg->len == UBX_NAV_TIMELS_LEN)
   bacd8:	4a66      	ldr	r2, [pc, #408]	; (bae74 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc7c>)
   bacda:	4293      	cmp	r3, r2
   bacdc:	d138      	bne.n	bad50 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xb58>
      if (packetUBXNAVTIMELS != NULL)
   bacde:	6c46      	ldr	r6, [r0, #68]	; 0x44
   bace0:	2e00      	cmp	r6, #0
   bace2:	f43f aa9a 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVTIMELS->data.iTOW = extractLong(msg, 0);
   bace6:	68a8      	ldr	r0, [r5, #8]
   bace8:	2100      	movs	r1, #0
   bacea:	f7fd fccf 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bacee:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bacf0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bacf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bacf4:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVTIMELS->data.version = extractByte(msg, 4);
   bacf6:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bacf8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bacfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bacfc:	7a12      	ldrb	r2, [r2, #8]
        packetUBXNAVTIMELS->data.srcOfCurrLs = extractByte(msg, 8);
   bacfe:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bad00:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.currLs = extractSignedChar(msg, 9);
   bad02:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bad04:	7a52      	ldrb	r2, [r2, #9]
   bad06:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bad08:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bad0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return (msg->payload[spotToStart]);
   bad0c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXNAVTIMELS->data.srcOfLsChange = extractByte(msg, 10);
   bad0e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bad10:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVTIMELS->data.lsChange = extractSignedChar(msg, 11);
   bad12:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bad14:	7ad2      	ldrb	r2, [r2, #11]
   bad16:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad18:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bad1a:	6c66      	ldr	r6, [r4, #68]	; 0x44
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad1c:	210c      	movs	r1, #12
   bad1e:	f7fd fcb5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVTIMELS->data.timeToLsEvent = extractSignedLong(msg, 12);
   bad22:	6130      	str	r0, [r6, #16]
        packetUBXNAVTIMELS->data.dateOfLsGpsWn = extractInt(msg, 16);
   bad24:	68a8      	ldr	r0, [r5, #8]
   bad26:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bad28:	2110      	movs	r1, #16
   bad2a:	f7fd fcbc 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bad2e:	82b0      	strh	r0, [r6, #20]
        packetUBXNAVTIMELS->data.dateOfLsGpsDn = extractInt(msg, 18);
   bad30:	68a8      	ldr	r0, [r5, #8]
   bad32:	6c66      	ldr	r6, [r4, #68]	; 0x44
   bad34:	2112      	movs	r1, #18
   bad36:	f7fd fcb6 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bad3a:	82f0      	strh	r0, [r6, #22]
  return (msg->payload[spotToStart]);
   bad3c:	68ab      	ldr	r3, [r5, #8]
   bad3e:	7dda      	ldrb	r2, [r3, #23]
        packetUBXNAVTIMELS->data.valid.all = extractSignedChar(msg, 23);
   bad40:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bad42:	76da      	strb	r2, [r3, #27]
        packetUBXNAVTIMELS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bad44:	6c63      	ldr	r3, [r4, #68]	; 0x44
   bad46:	f04f 32ff 	mov.w	r2, #4294967295
   bad4a:	61da      	str	r2, [r3, #28]
   bad4c:	f7ff ba65 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_NAV_SVIN && msg->len == UBX_NAV_SVIN_LEN)
   bad50:	4a49      	ldr	r2, [pc, #292]	; (bae78 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc80>)
   bad52:	4293      	cmp	r3, r2
   bad54:	d162      	bne.n	bae1c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc24>
      if (packetUBXNAVSVIN != NULL)
   bad56:	6c83      	ldr	r3, [r0, #72]	; 0x48
   bad58:	2b00      	cmp	r3, #0
   bad5a:	f43f aa5e 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bad5e:	688a      	ldr	r2, [r1, #8]
   bad60:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVSVIN->data.version = extractByte(msg, 0);
   bad62:	711a      	strb	r2, [r3, #4]
        packetUBXNAVSVIN->data.iTOW = extractLong(msg, 4);
   bad64:	6c86      	ldr	r6, [r0, #72]	; 0x48
   bad66:	68a8      	ldr	r0, [r5, #8]
   bad68:	2104      	movs	r1, #4
   bad6a:	f7fd fc8f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad6e:	60b0      	str	r0, [r6, #8]
        packetUBXNAVSVIN->data.dur = extractLong(msg, 8);
   bad70:	68a8      	ldr	r0, [r5, #8]
   bad72:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   bad74:	2108      	movs	r1, #8
   bad76:	f7fd fc89 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bad7a:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad7c:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bad7e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad80:	210c      	movs	r1, #12
   bad82:	f7fd fc83 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanX = extractSignedLong(msg, 12);
   bad86:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad88:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bad8a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad8c:	2110      	movs	r1, #16
   bad8e:	f7fd fc7d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanY = extractSignedLong(msg, 16);
   bad92:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad94:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   bad96:	6ca6      	ldr	r6, [r4, #72]	; 0x48
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bad98:	2114      	movs	r1, #20
   bad9a:	f7fd fc77 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVSVIN->data.meanZ = extractSignedLong(msg, 20);
   bad9e:	61b0      	str	r0, [r6, #24]
  return (msg->payload[spotToStart]);
   bada0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanXHP = extractSignedChar(msg, 24);
   bada2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bada4:	7e12      	ldrb	r2, [r2, #24]
   bada6:	771a      	strb	r2, [r3, #28]
  return (msg->payload[spotToStart]);
   bada8:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanYHP = extractSignedChar(msg, 25);
   badaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   badac:	7e52      	ldrb	r2, [r2, #25]
   badae:	775a      	strb	r2, [r3, #29]
  return (msg->payload[spotToStart]);
   badb0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.meanZHP = extractSignedChar(msg, 26);
   badb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   badb4:	7e92      	ldrb	r2, [r2, #26]
   badb6:	779a      	strb	r2, [r3, #30]
        packetUBXNAVSVIN->data.meanAcc = extractLong(msg, 28);
   badb8:	211c      	movs	r1, #28
   badba:	68a8      	ldr	r0, [r5, #8]
   badbc:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   badbe:	f7fd fc65 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badc2:	6230      	str	r0, [r6, #32]
        packetUBXNAVSVIN->data.obs = extractLong(msg, 32);
   badc4:	68a8      	ldr	r0, [r5, #8]
   badc6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   badc8:	2120      	movs	r1, #32
   badca:	f7fd fc5f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   badce:	6270      	str	r0, [r6, #36]	; 0x24
  return (msg->payload[spotToStart]);
   badd0:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.valid = extractSignedChar(msg, 36);
   badd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   badd4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   badd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return (msg->payload[spotToStart]);
   baddc:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSVIN->data.active = extractSignedChar(msg, 37);
   badde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bade0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   bade4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        packetUBXNAVSVIN->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bade8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   badea:	f04f 32ff 	mov.w	r2, #4294967295
   badee:	62da      	str	r2, [r3, #44]	; 0x2c
        if ((packetUBXNAVSVIN->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   badf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   badf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   badf4:	b17a      	cbz	r2, bae16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
            && (packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   badf6:	7819      	ldrb	r1, [r3, #0]
   badf8:	070f      	lsls	r7, r1, #28
   badfa:	d40c      	bmi.n	bae16 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc1e>
          memcpy(&packetUBXNAVSVIN->callbackData->version, &packetUBXNAVSVIN->data.version, sizeof(UBX_NAV_SVIN_data_t));
   badfc:	1d19      	adds	r1, r3, #4
   badfe:	332c      	adds	r3, #44	; 0x2c
   bae00:	f851 0b04 	ldr.w	r0, [r1], #4
   bae04:	f842 0b04 	str.w	r0, [r2], #4
   bae08:	4299      	cmp	r1, r3
   bae0a:	d1f9      	bne.n	bae00 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc08>
          packetUBXNAVSVIN->automaticFlags.flags.bits.callbackCopyValid = true;
   bae0c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   bae0e:	7813      	ldrb	r3, [r2, #0]
   bae10:	f043 0308 	orr.w	r3, r3, #8
   bae14:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVSVIN->automaticFlags.flags.bits.addToFileBuffer)
   bae16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   bae18:	f7ff ba8d 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_SAT) // Note: length is variable
   bae1c:	784a      	ldrb	r2, [r1, #1]
   bae1e:	2a35      	cmp	r2, #53	; 0x35
   bae20:	d17f      	bne.n	baf22 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd2a>
      if (packetUBXNAVSAT != NULL)
   bae22:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   bae24:	2e00      	cmp	r6, #0
   bae26:	f43f a9f8 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVSAT->data.header.iTOW = extractLong(msg, 0);
   bae2a:	68a8      	ldr	r0, [r5, #8]
   bae2c:	2100      	movs	r1, #0
   bae2e:	f7fd fc2d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bae32:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bae34:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bae36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bae38:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVSAT->data.header.version = extractByte(msg, 4);
   bae3a:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bae3c:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bae3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bae40:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVSAT->data.header.numSvs = extractByte(msg, 5);
   bae42:	725a      	strb	r2, [r3, #9]
   bae44:	f04f 0808 	mov.w	r8, #8
   bae48:	460f      	mov	r7, r1
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bae4a:	f04f 0a0c 	mov.w	sl, #12
   bae4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bae50:	7a59      	ldrb	r1, [r3, #9]
   bae52:	b2ba      	uxth	r2, r7
   bae54:	4291      	cmp	r1, r2
   bae56:	d811      	bhi.n	bae7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc84>
        packetUBXNAVSAT->moduleQueried = true;
   bae58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bae5a:	2201      	movs	r2, #1
   bae5c:	f883 2c00 	strb.w	r2, [r3, #3072]	; 0xc00
        if ((packetUBXNAVSAT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bae60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   bae62:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   bae66:	2800      	cmp	r0, #0
   bae68:	d14d      	bne.n	baf06 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd0e>
        if (packetUBXNAVSAT->automaticFlags.flags.bits.addToFileBuffer)
   bae6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bae6c:	f7ff ba63 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bae70:	00142200 	.word	0x00142200
   bae74:	00182600 	.word	0x00182600
   bae78:	00283b00 	.word	0x00283b00
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   bae7c:	886a      	ldrh	r2, [r5, #2]
   bae7e:	fb0a f607 	mul.w	r6, sl, r7
   bae82:	3a08      	subs	r2, #8
   bae84:	42b2      	cmp	r2, r6
   bae86:	dde7      	ble.n	bae58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
  return (msg->payload[spotToStart]);
   bae88:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bae8a:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bae8c:	f812 2008 	ldrb.w	r2, [r2, r8]
          packetUBXNAVSAT->data.blocks[i].gnssId = extractByte(msg, offset + 0);
   bae90:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bae92:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bae94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   bae96:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bae98:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   bae9a:	7852      	ldrb	r2, [r2, #1]
          packetUBXNAVSAT->data.blocks[i].svId = extractByte(msg, offset + 1);
   bae9c:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bae9e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baea0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baea2:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baea4:	4433      	add	r3, r6
  return (msg->payload[spotToStart]);
   baea6:	7892      	ldrb	r2, [r2, #2]
          packetUBXNAVSAT->data.blocks[i].cno = extractByte(msg, offset + 2);
   baea8:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   baeaa:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   baeac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  return (msg->payload[spotToStart]);
   baeae:	4442      	add	r2, r8
          packetUBXNAVSAT->data.blocks[i].elev = extractSignedChar(msg, offset + 3);
   baeb0:	4433      	add	r3, r6
   baeb2:	78d2      	ldrb	r2, [r2, #3]
   baeb4:	73da      	strb	r2, [r3, #15]
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baeb6:	fa1f f988 	uxth.w	r9, r8
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baeba:	f109 0104 	add.w	r1, r9, #4
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baebe:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baec2:	68a8      	ldr	r0, [r5, #8]
   baec4:	b289      	uxth	r1, r1
   baec6:	f7fd fbee 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baeca:	44b3      	add	fp, r6
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baecc:	f109 0106 	add.w	r1, r9, #6
          packetUBXNAVSAT->data.blocks[i].azim = extractSignedInt(msg, offset + 4);
   baed0:	f8ab 0010 	strh.w	r0, [fp, #16]
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baed4:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
  stSignedInt.unsignedInt = extractInt(msg, spotToStart);
   baed8:	68a8      	ldr	r0, [r5, #8]
   baeda:	b289      	uxth	r1, r1
   baedc:	f7fd fbe3 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baee0:	44b3      	add	fp, r6
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baee2:	f109 0108 	add.w	r1, r9, #8
          packetUBXNAVSAT->data.blocks[i].prRes = extractSignedInt(msg, offset + 6);
   baee6:	f8ab 0012 	strh.w	r0, [fp, #18]
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baeea:	f8d4 b04c 	ldr.w	fp, [r4, #76]	; 0x4c
   baeee:	68a8      	ldr	r0, [r5, #8]
   baef0:	b289      	uxth	r1, r1
   baef2:	f7fd fbcb 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baef6:	445e      	add	r6, fp
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baef8:	3701      	adds	r7, #1
   baefa:	2fff      	cmp	r7, #255	; 0xff
          packetUBXNAVSAT->data.blocks[i].flags.all = extractLong(msg, offset + 8);
   baefc:	6170      	str	r0, [r6, #20]
        for (uint16_t i = 0; (i < UBX_NAV_SAT_MAX_BLOCKS) && (i < ((uint16_t)packetUBXNAVSAT->data.header.numSvs)) && ((i * 12) < (msg->len - 8)); i++)
   baefe:	f108 080c 	add.w	r8, r8, #12
   baf02:	d1a4      	bne.n	bae4e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc56>
   baf04:	e7a8      	b.n	bae58 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc60>
            && (packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baf06:	780b      	ldrb	r3, [r1, #0]
   baf08:	071e      	lsls	r6, r3, #28
   baf0a:	d4ae      	bmi.n	bae6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
          memcpy(&packetUBXNAVSAT->callbackData->header.iTOW, &packetUBXNAVSAT->data.header.iTOW, sizeof(UBX_NAV_SAT_data_t));
   baf0c:	f640 32fc 	movw	r2, #3068	; 0xbfc
   baf10:	3104      	adds	r1, #4
   baf12:	f009 fb09 	bl	c4528 <memcpy>
          packetUBXNAVSAT->automaticFlags.flags.bits.callbackCopyValid = true;
   baf16:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   baf18:	7813      	ldrb	r3, [r2, #0]
   baf1a:	f043 0308 	orr.w	r3, r3, #8
   baf1e:	7013      	strb	r3, [r2, #0]
   baf20:	e7a3      	b.n	bae6a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xc72>
    else if (msg->id == UBX_NAV_RELPOSNED && ((msg->len == UBX_NAV_RELPOSNED_LEN) || (msg->len == UBX_NAV_RELPOSNED_LEN_F9)))
   baf22:	2a3c      	cmp	r2, #60	; 0x3c
   baf24:	f040 80bf 	bne.w	bb0a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
   baf28:	884a      	ldrh	r2, [r1, #2]
   baf2a:	2a28      	cmp	r2, #40	; 0x28
   baf2c:	d002      	beq.n	baf34 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xd3c>
   baf2e:	2a40      	cmp	r2, #64	; 0x40
   baf30:	f040 80b9 	bne.w	bb0a6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeae>
      if (packetUBXNAVRELPOSNED != NULL)
   baf34:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baf36:	2b00      	cmp	r3, #0
   baf38:	f43f a96f 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   baf3c:	68aa      	ldr	r2, [r5, #8]
   baf3e:	7812      	ldrb	r2, [r2, #0]
        packetUBXNAVRELPOSNED->data.version = extractByte(msg, 0);
   baf40:	711a      	strb	r2, [r3, #4]
        packetUBXNAVRELPOSNED->data.refStationId = extractInt(msg, 2);
   baf42:	68a8      	ldr	r0, [r5, #8]
   baf44:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baf46:	2102      	movs	r1, #2
   baf48:	f7fd fbad 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   baf4c:	80f0      	strh	r0, [r6, #6]
        packetUBXNAVRELPOSNED->data.iTOW = extractLong(msg, 4);
   baf4e:	68a8      	ldr	r0, [r5, #8]
   baf50:	6d26      	ldr	r6, [r4, #80]	; 0x50
   baf52:	2104      	movs	r1, #4
   baf54:	f7fd fb9a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   baf58:	60b0      	str	r0, [r6, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   baf5c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf5e:	2108      	movs	r1, #8
   baf60:	f7fd fb94 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosN = extractSignedLong(msg, 8);
   baf64:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf66:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baf68:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf6a:	210c      	movs	r1, #12
   baf6c:	f7fd fb8e 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosE = extractSignedLong(msg, 12);
   baf70:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf72:	68a8      	ldr	r0, [r5, #8]
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   baf74:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   baf76:	2110      	movs	r1, #16
   baf78:	f7fd fb88 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXNAVRELPOSNED->data.relPosD = extractSignedLong(msg, 16);
   baf7c:	6170      	str	r0, [r6, #20]
        if (msg->len == UBX_NAV_RELPOSNED_LEN)
   baf7e:	886b      	ldrh	r3, [r5, #2]
   baf80:	6d27      	ldr	r7, [r4, #80]	; 0x50
   baf82:	2b28      	cmp	r3, #40	; 0x28
   baf84:	d14b      	bne.n	bb01e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe26>
          packetUBXNAVRELPOSNED->data.relPosLength = 0;
   baf86:	2600      	movs	r6, #0
   baf88:	61be      	str	r6, [r7, #24]
          packetUBXNAVRELPOSNED->data.relPosHeading = 0;
   baf8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baf8c:	61de      	str	r6, [r3, #28]
  return (msg->payload[spotToStart]);
   baf8e:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 20);
   baf90:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baf92:	7d12      	ldrb	r2, [r2, #20]
   baf94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   baf98:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 21);
   baf9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baf9c:	7d52      	ldrb	r2, [r2, #21]
   baf9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bafa2:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 22);
   bafa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafa6:	7d92      	ldrb	r2, [r2, #22]
   bafa8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
          packetUBXNAVRELPOSNED->data.relPosHPLength = 0; // The M8 version does not contain relPosHPLength
   bafac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafae:	f883 6027 	strb.w	r6, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 24);
   bafb2:	68a8      	ldr	r0, [r5, #8]
   bafb4:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bafb6:	2118      	movs	r1, #24
   bafb8:	f7fd fb68 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafbc:	62b8      	str	r0, [r7, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 28);
   bafbe:	68a8      	ldr	r0, [r5, #8]
   bafc0:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bafc2:	211c      	movs	r1, #28
   bafc4:	f7fd fb62 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafc8:	62f8      	str	r0, [r7, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 32);
   bafca:	68a8      	ldr	r0, [r5, #8]
   bafcc:	6d27      	ldr	r7, [r4, #80]	; 0x50
   bafce:	2120      	movs	r1, #32
   bafd0:	f7fd fb5c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafd4:	6338      	str	r0, [r7, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = 0;
   bafd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafd8:	635e      	str	r6, [r3, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = 0;
   bafda:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafdc:	639e      	str	r6, [r3, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 36);
   bafde:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bafe0:	2124      	movs	r1, #36	; 0x24
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bafe2:	68a8      	ldr	r0, [r5, #8]
   bafe4:	f7fd fb52 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bafe8:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXNAVRELPOSNED->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bafea:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bafec:	f04f 32ff 	mov.w	r2, #4294967295
   baff0:	645a      	str	r2, [r3, #68]	; 0x44
        if ((packetUBXNAVRELPOSNED->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   baff2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   baff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   baff6:	b17a      	cbz	r2, bb018 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
            && (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   baff8:	7819      	ldrb	r1, [r3, #0]
   baffa:	0708      	lsls	r0, r1, #28
   baffc:	d40c      	bmi.n	bb018 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe20>
          memcpy(&packetUBXNAVRELPOSNED->callbackData->version, &packetUBXNAVRELPOSNED->data.version, sizeof(UBX_NAV_RELPOSNED_data_t));
   baffe:	1d19      	adds	r1, r3, #4
   bb000:	3344      	adds	r3, #68	; 0x44
   bb002:	f851 0b04 	ldr.w	r0, [r1], #4
   bb006:	f842 0b04 	str.w	r0, [r2], #4
   bb00a:	4299      	cmp	r1, r3
   bb00c:	d1f9      	bne.n	bb002 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xe0a>
          packetUBXNAVRELPOSNED->automaticFlags.flags.bits.callbackCopyValid = true;
   bb00e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   bb010:	7813      	ldrb	r3, [r2, #0]
   bb012:	f043 0308 	orr.w	r3, r3, #8
   bb016:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVRELPOSNED->automaticFlags.flags.bits.addToFileBuffer)
   bb018:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb01a:	f7ff b98c 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb01e:	68a8      	ldr	r0, [r5, #8]
   bb020:	2114      	movs	r1, #20
   bb022:	f7fd fb33 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosLength = extractSignedLong(msg, 20);
   bb026:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb028:	68a8      	ldr	r0, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb02a:	6d26      	ldr	r6, [r4, #80]	; 0x50
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb02c:	2118      	movs	r1, #24
   bb02e:	f7fd fb2d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXNAVRELPOSNED->data.relPosHeading = extractSignedLong(msg, 24);
   bb032:	61f0      	str	r0, [r6, #28]
  return (msg->payload[spotToStart]);
   bb034:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPN = extractSignedChar(msg, 32);
   bb036:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb038:	f892 2020 	ldrb.w	r2, [r2, #32]
   bb03c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return (msg->payload[spotToStart]);
   bb040:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPE = extractSignedChar(msg, 33);
   bb042:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb044:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
   bb048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return (msg->payload[spotToStart]);
   bb04c:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPD = extractSignedChar(msg, 34);
   bb04e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb050:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
   bb054:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  return (msg->payload[spotToStart]);
   bb058:	68aa      	ldr	r2, [r5, #8]
          packetUBXNAVRELPOSNED->data.relPosHPLength = extractSignedChar(msg, 35);
   bb05a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bb05c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
   bb060:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
          packetUBXNAVRELPOSNED->data.accN = extractLong(msg, 36);
   bb064:	68a8      	ldr	r0, [r5, #8]
   bb066:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb068:	2124      	movs	r1, #36	; 0x24
   bb06a:	f7fd fb0f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb06e:	62b0      	str	r0, [r6, #40]	; 0x28
          packetUBXNAVRELPOSNED->data.accE = extractLong(msg, 40);
   bb070:	68a8      	ldr	r0, [r5, #8]
   bb072:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb074:	2128      	movs	r1, #40	; 0x28
   bb076:	f7fd fb09 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb07a:	62f0      	str	r0, [r6, #44]	; 0x2c
          packetUBXNAVRELPOSNED->data.accD = extractLong(msg, 44);
   bb07c:	68a8      	ldr	r0, [r5, #8]
   bb07e:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb080:	212c      	movs	r1, #44	; 0x2c
   bb082:	f7fd fb03 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb086:	6330      	str	r0, [r6, #48]	; 0x30
          packetUBXNAVRELPOSNED->data.accLength = extractLong(msg, 48);
   bb088:	68a8      	ldr	r0, [r5, #8]
   bb08a:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb08c:	2130      	movs	r1, #48	; 0x30
   bb08e:	f7fd fafd 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb092:	6370      	str	r0, [r6, #52]	; 0x34
          packetUBXNAVRELPOSNED->data.accHeading = extractLong(msg, 52);
   bb094:	2134      	movs	r1, #52	; 0x34
   bb096:	68a8      	ldr	r0, [r5, #8]
   bb098:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb09a:	f7fd faf7 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb09e:	63b0      	str	r0, [r6, #56]	; 0x38
          packetUBXNAVRELPOSNED->data.flags.all = extractLong(msg, 60);
   bb0a0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   bb0a2:	213c      	movs	r1, #60	; 0x3c
   bb0a4:	e79d      	b.n	bafe2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xdea>
    else if (msg->id == UBX_NAV_AOPSTATUS && msg->len == UBX_NAV_AOPSTATUS_LEN)
   bb0a6:	f5b3 1f83 	cmp.w	r3, #1073152	; 0x106000
   bb0aa:	d12a      	bne.n	bb102 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf0a>
      if (packetUBXNAVAOPSTATUS != NULL)
   bb0ac:	6d66      	ldr	r6, [r4, #84]	; 0x54
   bb0ae:	2e00      	cmp	r6, #0
   bb0b0:	f43f a8b3 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVAOPSTATUS->data.iTOW = extractLong(msg, 0);
   bb0b4:	68a8      	ldr	r0, [r5, #8]
   bb0b6:	2100      	movs	r1, #0
   bb0b8:	f7fd fae8 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb0bc:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb0be:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb0c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb0c2:	7912      	ldrb	r2, [r2, #4]
        packetUBXNAVAOPSTATUS->data.aopCfg.all = extractByte(msg, 4);
   bb0c4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb0c6:	68aa      	ldr	r2, [r5, #8]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb0c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (msg->payload[spotToStart]);
   bb0ca:	7952      	ldrb	r2, [r2, #5]
        packetUBXNAVAOPSTATUS->data.status = extractByte(msg, 5);
   bb0cc:	725a      	strb	r2, [r3, #9]
        packetUBXNAVAOPSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb0ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb0d0:	f04f 32ff 	mov.w	r2, #4294967295
   bb0d4:	615a      	str	r2, [r3, #20]
        if ((packetUBXNAVAOPSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb0d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb0d8:	6a1a      	ldr	r2, [r3, #32]
   bb0da:	b17a      	cbz	r2, bb0fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
            && (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb0dc:	7819      	ldrb	r1, [r3, #0]
   bb0de:	0709      	lsls	r1, r1, #28
   bb0e0:	d40c      	bmi.n	bb0fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf04>
          memcpy(&packetUBXNAVAOPSTATUS->callbackData->iTOW, &packetUBXNAVAOPSTATUS->data.iTOW, sizeof(UBX_NAV_AOPSTATUS_data_t));
   bb0e2:	1d19      	adds	r1, r3, #4
   bb0e4:	3314      	adds	r3, #20
   bb0e6:	f851 0b04 	ldr.w	r0, [r1], #4
   bb0ea:	f842 0b04 	str.w	r0, [r2], #4
   bb0ee:	4299      	cmp	r1, r3
   bb0f0:	d1f9      	bne.n	bb0e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xeee>
          packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb0f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
   bb0f4:	7813      	ldrb	r3, [r2, #0]
   bb0f6:	f043 0308 	orr.w	r3, r3, #8
   bb0fa:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVAOPSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb0fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bb0fe:	f7ff b91a 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_NAV_EOE && msg->len == UBX_NAV_EOE_LEN)
   bb102:	4aa1      	ldr	r2, [pc, #644]	; (bb388 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1190>)
   bb104:	4293      	cmp	r3, r2
   bb106:	f47f a888 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXNAVEOE != NULL)
   bb10a:	69a6      	ldr	r6, [r4, #24]
   bb10c:	2e00      	cmp	r6, #0
   bb10e:	f43f a884 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXNAVEOE->data.iTOW = extractLong(msg, 0);
   bb112:	68a8      	ldr	r0, [r5, #8]
   bb114:	2100      	movs	r1, #0
   bb116:	f7fd fab9 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb11a:	6070      	str	r0, [r6, #4]
        packetUBXNAVEOE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb11c:	69a3      	ldr	r3, [r4, #24]
   bb11e:	f04f 32ff 	mov.w	r2, #4294967295
   bb122:	609a      	str	r2, [r3, #8]
        if ((packetUBXNAVEOE->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb124:	69a3      	ldr	r3, [r4, #24]
   bb126:	691a      	ldr	r2, [r3, #16]
   bb128:	b14a      	cbz	r2, bb13e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
            && (packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb12a:	7819      	ldrb	r1, [r3, #0]
   bb12c:	070f      	lsls	r7, r1, #28
   bb12e:	d406      	bmi.n	bb13e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xf46>
          memcpy(&packetUBXNAVEOE->callbackData->iTOW, &packetUBXNAVEOE->data.iTOW, sizeof(UBX_NAV_EOE_data_t));
   bb130:	685b      	ldr	r3, [r3, #4]
   bb132:	6013      	str	r3, [r2, #0]
          packetUBXNAVEOE->automaticFlags.flags.bits.callbackCopyValid = true;
   bb134:	69a2      	ldr	r2, [r4, #24]
   bb136:	7813      	ldrb	r3, [r2, #0]
   bb138:	f043 0308 	orr.w	r3, r3, #8
   bb13c:	7013      	strb	r3, [r2, #0]
        if (packetUBXNAVEOE->automaticFlags.flags.bits.addToFileBuffer)
   bb13e:	69a3      	ldr	r3, [r4, #24]
   bb140:	f7ff b8f9 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    if (msg->id == UBX_RXM_PMP)
   bb144:	784b      	ldrb	r3, [r1, #1]
   bb146:	2b72      	cmp	r3, #114	; 0x72
   bb148:	f040 80a4 	bne.w	bb294 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x109c>
      if ((packetUBXRXMPMP != NULL) && (packetUBXRXMPMP->callbackData != NULL)
   bb14c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb14e:	2b00      	cmp	r3, #0
   bb150:	d069      	beq.n	bb226 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
   bb152:	689b      	ldr	r3, [r3, #8]
   bb154:	2b00      	cmp	r3, #0
   bb156:	d066      	beq.n	bb226 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x102e>
  return (msg->payload[spotToStart]);
   bb158:	688a      	ldr	r2, [r1, #8]
   bb15a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMPMP->callbackData->version = extractByte(msg, 0);
   bb15c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMP->callbackData->numBytesUserData = extractInt(msg, 2);
   bb15e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   bb160:	68a8      	ldr	r0, [r5, #8]
   bb162:	689f      	ldr	r7, [r3, #8]
   bb164:	4631      	mov	r1, r6
   bb166:	f7fd fa9e 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb16a:	8078      	strh	r0, [r7, #2]
        packetUBXRXMPMP->callbackData->timeTag = extractLong(msg, 4);
   bb16c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb16e:	68a8      	ldr	r0, [r5, #8]
   bb170:	689e      	ldr	r6, [r3, #8]
   bb172:	2104      	movs	r1, #4
   bb174:	f7fd fa8a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb178:	6070      	str	r0, [r6, #4]
        packetUBXRXMPMP->callbackData->uniqueWord[0] = extractLong(msg, 8);
   bb17a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb17c:	68a8      	ldr	r0, [r5, #8]
   bb17e:	689e      	ldr	r6, [r3, #8]
   bb180:	2108      	movs	r1, #8
   bb182:	f7fd fa83 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb186:	60b0      	str	r0, [r6, #8]
        packetUBXRXMPMP->callbackData->uniqueWord[1] = extractLong(msg, 12);
   bb188:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb18a:	68a8      	ldr	r0, [r5, #8]
   bb18c:	689e      	ldr	r6, [r3, #8]
   bb18e:	210c      	movs	r1, #12
   bb190:	f7fd fa7c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb194:	60f0      	str	r0, [r6, #12]
        packetUBXRXMPMP->callbackData->serviceIdentifier = extractInt(msg, 16);
   bb196:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb198:	68a8      	ldr	r0, [r5, #8]
   bb19a:	689e      	ldr	r6, [r3, #8]
   bb19c:	2110      	movs	r1, #16
   bb19e:	f7fd fa82 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1a2:	8230      	strh	r0, [r6, #16]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb1a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb1a6:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb1a8:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1aa:	7c92      	ldrb	r2, [r2, #18]
        packetUBXRXMPMP->callbackData->spare = extractByte(msg, 18);
   bb1ac:	749a      	strb	r2, [r3, #18]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb1ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb1b0:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb1b2:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1b4:	7cd2      	ldrb	r2, [r2, #19]
        packetUBXRXMPMP->callbackData->uniqueWordBitErrors = extractByte(msg, 19);
   bb1b6:	74da      	strb	r2, [r3, #19]
        if (packetUBXRXMPMP->callbackData->version == 0x00)
   bb1b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb1ba:	689e      	ldr	r6, [r3, #8]
   bb1bc:	7833      	ldrb	r3, [r6, #0]
   bb1be:	bb23      	cbnz	r3, bb20a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1012>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 524);
   bb1c0:	68a8      	ldr	r0, [r5, #8]
   bb1c2:	f44f 7103 	mov.w	r1, #524	; 0x20c
   bb1c6:	f7fd fa6e 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb1ca:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb1cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb1ce:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 526);
   bb1d0:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb1d2:	f892 220e 	ldrb.w	r2, [r2, #526]	; 0x20e
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb1d6:	759a      	strb	r2, [r3, #22]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bb1d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   bb1da:	689b      	ldr	r3, [r3, #8]
   bb1dc:	781a      	ldrb	r2, [r3, #0]
   bb1de:	2a00      	cmp	r2, #0
   bb1e0:	f040 865d 	bne.w	bbe9e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1ca6>
   bb1e4:	2014      	movs	r0, #20
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bb1e6:	f44f 76fc 	mov.w	r6, #504	; 0x1f8
   bb1ea:	2300      	movs	r3, #0
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb1ec:	b299      	uxth	r1, r3
   bb1ee:	428e      	cmp	r6, r1
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb1f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb1f2:	d914      	bls.n	bb21e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
   bb1f4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
   bb1f8:	d011      	beq.n	bb21e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1026>
  return (msg->payload[spotToStart]);
   bb1fa:	68a9      	ldr	r1, [r5, #8]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb1fc:	6892      	ldr	r2, [r2, #8]
  return (msg->payload[spotToStart]);
   bb1fe:	4419      	add	r1, r3
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb200:	441a      	add	r2, r3
  return (msg->payload[spotToStart]);
   bb202:	5c09      	ldrb	r1, [r1, r0]
          packetUBXRXMPMP->callbackData->userData[i] = extractByte(msg, i + userDataStart);
   bb204:	7611      	strb	r1, [r2, #24]
        for (uint16_t i = 0; (i < userDataLength) && (i < 504); i++)
   bb206:	3301      	adds	r3, #1
   bb208:	e7f0      	b.n	bb1ec <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff4>
          packetUBXRXMPMP->callbackData->fecBits = extractInt(msg, 20);
   bb20a:	68a8      	ldr	r0, [r5, #8]
   bb20c:	2114      	movs	r1, #20
   bb20e:	f7fd fa4a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb212:	82b0      	strh	r0, [r6, #20]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb214:	6da3      	ldr	r3, [r4, #88]	; 0x58
  return (msg->payload[spotToStart]);
   bb216:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMPMP->callbackData->ebno = extractByte(msg, 22);
   bb218:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb21a:	7d92      	ldrb	r2, [r2, #22]
   bb21c:	e7db      	b.n	bb1d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xfde>
        packetUBXRXMPMP->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb21e:	7813      	ldrb	r3, [r2, #0]
   bb220:	f043 0308 	orr.w	r3, r3, #8
   bb224:	7013      	strb	r3, [r2, #0]
      if ((packetUBXRXMPMPmessage != NULL) && (packetUBXRXMPMPmessage->callbackData != NULL)
   bb226:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb228:	2b00      	cmp	r3, #0
   bb22a:	f43e aff6 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb22e:	689b      	ldr	r3, [r3, #8]
   bb230:	2b00      	cmp	r3, #0
   bb232:	f43e aff2 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXRXMPMPmessage->callbackData->sync1 = UBX_SYNCH_1;
   bb236:	22b5      	movs	r2, #181	; 0xb5
   bb238:	701a      	strb	r2, [r3, #0]
        packetUBXRXMPMPmessage->callbackData->sync2 = UBX_SYNCH_2;
   bb23a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb23c:	689b      	ldr	r3, [r3, #8]
   bb23e:	2262      	movs	r2, #98	; 0x62
   bb240:	705a      	strb	r2, [r3, #1]
        packetUBXRXMPMPmessage->callbackData->cls = UBX_CLASS_RXM;
   bb242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb244:	689b      	ldr	r3, [r3, #8]
   bb246:	2202      	movs	r2, #2
   bb248:	709a      	strb	r2, [r3, #2]
        packetUBXRXMPMPmessage->callbackData->ID = UBX_RXM_PMP;
   bb24a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb24c:	689b      	ldr	r3, [r3, #8]
   bb24e:	2272      	movs	r2, #114	; 0x72
   bb250:	70da      	strb	r2, [r3, #3]
        packetUBXRXMPMPmessage->callbackData->lengthLSB = msg->len & 0xFF;
   bb252:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb254:	886a      	ldrh	r2, [r5, #2]
   bb256:	689b      	ldr	r3, [r3, #8]
   bb258:	711a      	strb	r2, [r3, #4]
        packetUBXRXMPMPmessage->callbackData->lengthMSB = msg->len >> 8;
   bb25a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb25c:	689a      	ldr	r2, [r3, #8]
   bb25e:	886b      	ldrh	r3, [r5, #2]
   bb260:	0a1b      	lsrs	r3, r3, #8
   bb262:	7153      	strb	r3, [r2, #5]
        memcpy(packetUBXRXMPMPmessage->callbackData->payload, msg->payload, msg->len);
   bb264:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb266:	886a      	ldrh	r2, [r5, #2]
   bb268:	6898      	ldr	r0, [r3, #8]
   bb26a:	68a9      	ldr	r1, [r5, #8]
   bb26c:	3006      	adds	r0, #6
   bb26e:	f009 f95b 	bl	c4528 <memcpy>
        packetUBXRXMPMPmessage->callbackData->checksumA = msg->checksumA;
   bb272:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb274:	7b2a      	ldrb	r2, [r5, #12]
   bb276:	689b      	ldr	r3, [r3, #8]
   bb278:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
        packetUBXRXMPMPmessage->callbackData->checksumB = msg->checksumB;
   bb27c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bb27e:	7b6a      	ldrb	r2, [r5, #13]
   bb280:	689b      	ldr	r3, [r3, #8]
   bb282:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
        packetUBXRXMPMPmessage->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb288:	7813      	ldrb	r3, [r2, #0]
   bb28a:	f043 0308 	orr.w	r3, r3, #8
   bb28e:	7013      	strb	r3, [r2, #0]
   bb290:	f7fe bfc3 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_RXM_QZSSL6)
   bb294:	2b73      	cmp	r3, #115	; 0x73
   bb296:	d14d      	bne.n	bb334 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x113c>
        if (0 == (packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid & (1 << ch)))
   bb298:	6e01      	ldr	r1, [r0, #96]	; 0x60
   bb29a:	780b      	ldrb	r3, [r1, #0]
   bb29c:	071e      	lsls	r6, r3, #28
   bb29e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb2a2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   bb2a6:	d543      	bpl.n	bb330 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1138>
   bb2a8:	0843      	lsrs	r3, r0, #1
   bb2aa:	f47e afb6 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb2ae:	2701      	movs	r7, #1
          packetUBXRXMQZSSL6message->callbackData[ch].sync1 = UBX_SYNCH_1;
   bb2b0:	f44f 7688 	mov.w	r6, #272	; 0x110
   bb2b4:	688b      	ldr	r3, [r1, #8]
   bb2b6:	437e      	muls	r6, r7
   bb2b8:	22b5      	movs	r2, #181	; 0xb5
   bb2ba:	559a      	strb	r2, [r3, r6]
          packetUBXRXMQZSSL6message->callbackData[ch].sync2 = UBX_SYNCH_2;
   bb2bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2be:	689b      	ldr	r3, [r3, #8]
   bb2c0:	4433      	add	r3, r6
   bb2c2:	2262      	movs	r2, #98	; 0x62
   bb2c4:	705a      	strb	r2, [r3, #1]
          packetUBXRXMQZSSL6message->callbackData[ch].cls = UBX_CLASS_RXM;
   bb2c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2c8:	689b      	ldr	r3, [r3, #8]
   bb2ca:	4433      	add	r3, r6
   bb2cc:	2202      	movs	r2, #2
   bb2ce:	709a      	strb	r2, [r3, #2]
          packetUBXRXMQZSSL6message->callbackData[ch].ID = UBX_RXM_QZSSL6;
   bb2d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2d2:	689b      	ldr	r3, [r3, #8]
   bb2d4:	4433      	add	r3, r6
   bb2d6:	2273      	movs	r2, #115	; 0x73
   bb2d8:	70da      	strb	r2, [r3, #3]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthLSB = msg->len & 0xFF;
   bb2da:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2dc:	886a      	ldrh	r2, [r5, #2]
   bb2de:	689b      	ldr	r3, [r3, #8]
   bb2e0:	4433      	add	r3, r6
   bb2e2:	711a      	strb	r2, [r3, #4]
          packetUBXRXMQZSSL6message->callbackData[ch].lengthMSB = msg->len >> 8;
   bb2e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2e6:	886a      	ldrh	r2, [r5, #2]
   bb2e8:	689b      	ldr	r3, [r3, #8]
   bb2ea:	4433      	add	r3, r6
   bb2ec:	0a12      	lsrs	r2, r2, #8
   bb2ee:	715a      	strb	r2, [r3, #5]
          memcpy(packetUBXRXMQZSSL6message->callbackData[ch].payload, msg->payload, msg->len);
   bb2f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb2f2:	886a      	ldrh	r2, [r5, #2]
   bb2f4:	6898      	ldr	r0, [r3, #8]
   bb2f6:	68a9      	ldr	r1, [r5, #8]
   bb2f8:	4430      	add	r0, r6
   bb2fa:	3006      	adds	r0, #6
   bb2fc:	f009 f914 	bl	c4528 <memcpy>
          packetUBXRXMQZSSL6message->callbackData[ch].checksumA = msg->checksumA;
   bb300:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb302:	7b2a      	ldrb	r2, [r5, #12]
   bb304:	689b      	ldr	r3, [r3, #8]
   bb306:	4433      	add	r3, r6
   bb308:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
          packetUBXRXMQZSSL6message->callbackData[ch].checksumB = msg->checksumB;
   bb30c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bb30e:	7b6a      	ldrb	r2, [r5, #13]
   bb310:	689b      	ldr	r3, [r3, #8]
   bb312:	441e      	add	r6, r3
   bb314:	f886 210f 	strb.w	r2, [r6, #271]	; 0x10f
          packetUBXRXMQZSSL6message->automaticFlags.flags.bits.callbackCopyValid |= (1 << ch);
   bb318:	6e21      	ldr	r1, [r4, #96]	; 0x60
   bb31a:	780b      	ldrb	r3, [r1, #0]
   bb31c:	2201      	movs	r2, #1
   bb31e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
   bb322:	40ba      	lsls	r2, r7
   bb324:	4302      	orrs	r2, r0
   bb326:	f362 03c4 	bfi	r3, r2, #3, #2
   bb32a:	700b      	strb	r3, [r1, #0]
          break; // abort when added
   bb32c:	f7fe bf75 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      for (int ch = 0; ch < UBX_RXM_QZSSL6_NUM_CHANNELS; ch++)
   bb330:	4617      	mov	r7, r2
   bb332:	e7bd      	b.n	bb2b0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x10b8>
    else if (msg->id == UBX_RXM_COR)
   bb334:	2b34      	cmp	r3, #52	; 0x34
   bb336:	d129      	bne.n	bb38c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1194>
      if ((packetUBXRXMCOR != NULL) && (packetUBXRXMCOR->callbackData != NULL)
   bb338:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb33a:	2b00      	cmp	r3, #0
   bb33c:	f43e af6d 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb340:	689b      	ldr	r3, [r3, #8]
   bb342:	2b00      	cmp	r3, #0
   bb344:	f43e af69 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb348:	688a      	ldr	r2, [r1, #8]
   bb34a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMCOR->callbackData->version = extractByte(msg, 0);
   bb34c:	701a      	strb	r2, [r3, #0]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb34e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  return (msg->payload[spotToStart]);
   bb350:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb352:	689b      	ldr	r3, [r3, #8]
  return (msg->payload[spotToStart]);
   bb354:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMCOR->callbackData->ebno = extractByte(msg, 1);
   bb356:	705a      	strb	r2, [r3, #1]
        packetUBXRXMCOR->callbackData->statusInfo.all = extractLong(msg, 4);
   bb358:	6e43      	ldr	r3, [r0, #100]	; 0x64
   bb35a:	68a8      	ldr	r0, [r5, #8]
   bb35c:	689e      	ldr	r6, [r3, #8]
   bb35e:	2104      	movs	r1, #4
   bb360:	f7fd f994 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb364:	6070      	str	r0, [r6, #4]
        packetUBXRXMCOR->callbackData->msgType = extractInt(msg, 8);
   bb366:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb368:	68a8      	ldr	r0, [r5, #8]
   bb36a:	689e      	ldr	r6, [r3, #8]
   bb36c:	2108      	movs	r1, #8
   bb36e:	f7fd f99a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb372:	8130      	strh	r0, [r6, #8]
        packetUBXRXMCOR->callbackData->msgSubType = extractInt(msg, 10);
   bb374:	6e63      	ldr	r3, [r4, #100]	; 0x64
   bb376:	68a8      	ldr	r0, [r5, #8]
   bb378:	689e      	ldr	r6, [r3, #8]
   bb37a:	210a      	movs	r1, #10
   bb37c:	f7fd f993 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb380:	8170      	strh	r0, [r6, #10]
        packetUBXRXMCOR->automaticFlags.flags.bits.callbackCopyValid = true; // Mark the data as valid
   bb382:	6e62      	ldr	r2, [r4, #100]	; 0x64
   bb384:	e780      	b.n	bb288 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1090>
   bb386:	bf00      	nop
   bb388:	00046100 	.word	0x00046100
    else if (msg->id == UBX_RXM_SFRBX)
   bb38c:	2b13      	cmp	r3, #19
   bb38e:	d14a      	bne.n	bb426 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x122e>
      if (packetUBXRXMSFRBX != NULL)
   bb390:	6e83      	ldr	r3, [r0, #104]	; 0x68
   bb392:	2b00      	cmp	r3, #0
   bb394:	f43e af41 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb398:	688a      	ldr	r2, [r1, #8]
   bb39a:	7812      	ldrb	r2, [r2, #0]
        packetUBXRXMSFRBX->data.gnssId = extractByte(msg, 0);
   bb39c:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb39e:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb3a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb3a2:	7852      	ldrb	r2, [r2, #1]
        packetUBXRXMSFRBX->data.svId = extractByte(msg, 1);
   bb3a4:	715a      	strb	r2, [r3, #5]
  return (msg->payload[spotToStart]);
   bb3a6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb3a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb3aa:	78d2      	ldrb	r2, [r2, #3]
        packetUBXRXMSFRBX->data.freqId = extractByte(msg, 3);
   bb3ac:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb3ae:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb3b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb3b2:	7912      	ldrb	r2, [r2, #4]
        packetUBXRXMSFRBX->data.numWords = extractByte(msg, 4);
   bb3b4:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb3b6:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb3b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb3ba:	7952      	ldrb	r2, [r2, #5]
        packetUBXRXMSFRBX->data.chn = extractByte(msg, 5);
   bb3bc:	725a      	strb	r2, [r3, #9]
  return (msg->payload[spotToStart]);
   bb3be:	688a      	ldr	r2, [r1, #8]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb3c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
  return (msg->payload[spotToStart]);
   bb3c2:	7992      	ldrb	r2, [r2, #6]
        packetUBXRXMSFRBX->data.version = extractByte(msg, 6);
   bb3c4:	729a      	strb	r2, [r3, #10]
   bb3c6:	2600      	movs	r6, #0
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb3c8:	6ea7      	ldr	r7, [r4, #104]	; 0x68
   bb3ca:	7a3a      	ldrb	r2, [r7, #8]
   bb3cc:	b2f3      	uxtb	r3, r6
   bb3ce:	429a      	cmp	r2, r3
   bb3d0:	d809      	bhi.n	bb3e6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11ee>
        packetUBXRXMSFRBX->moduleQueried = true;
   bb3d2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb3d4:	2201      	movs	r2, #1
   bb3d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if ((packetUBXRXMSFRBX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb3da:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   bb3dc:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bb3de:	b9a8      	cbnz	r0, bb40c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1214>
        if (packetUBXRXMSFRBX->automaticFlags.flags.bits.addToFileBuffer)
   bb3e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   bb3e2:	f7fe bfa8 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb3e6:	886b      	ldrh	r3, [r5, #2]
   bb3e8:	3b08      	subs	r3, #8
   bb3ea:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb3ee:	ea4f 0186 	mov.w	r1, r6, lsl #2
   bb3f2:	ddee      	ble.n	bb3d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb3f4:	3108      	adds	r1, #8
   bb3f6:	68a8      	ldr	r0, [r5, #8]
   bb3f8:	b289      	uxth	r1, r1
   bb3fa:	f7fd f947 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb3fe:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb402:	3601      	adds	r6, #1
   bb404:	2e10      	cmp	r6, #16
          packetUBXRXMSFRBX->data.dwrd[i] = extractLong(msg, 8 + (i * 4));
   bb406:	60f8      	str	r0, [r7, #12]
        for (uint8_t i = 0; (i < UBX_RXM_SFRBX_MAX_WORDS) && (i < packetUBXRXMSFRBX->data.numWords) && ((i * 4) < (msg->len - 8)); i++)
   bb408:	d1de      	bne.n	bb3c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11d0>
   bb40a:	e7e2      	b.n	bb3d2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11da>
            && (packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb40c:	780b      	ldrb	r3, [r1, #0]
   bb40e:	071b      	lsls	r3, r3, #28
   bb410:	d4e6      	bmi.n	bb3e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
          memcpy(&packetUBXRXMSFRBX->callbackData->gnssId, &packetUBXRXMSFRBX->data.gnssId, sizeof(UBX_RXM_SFRBX_data_t));
   bb412:	2248      	movs	r2, #72	; 0x48
   bb414:	3104      	adds	r1, #4
   bb416:	f009 f887 	bl	c4528 <memcpy>
          packetUBXRXMSFRBX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb41a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   bb41c:	7813      	ldrb	r3, [r2, #0]
   bb41e:	f043 0308 	orr.w	r3, r3, #8
   bb422:	7013      	strb	r3, [r2, #0]
   bb424:	e7dc      	b.n	bb3e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x11e8>
    else if (msg->id == UBX_RXM_RAWX)
   bb426:	2b15      	cmp	r3, #21
   bb428:	f47e aef7 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXRXMRAWX != NULL)
   bb42c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   bb42e:	2b00      	cmp	r3, #0
   bb430:	f43e aef3 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bb434:	2100      	movs	r1, #0
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb436:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb438:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb43a:	440b      	add	r3, r1
  return (msg->payload[spotToStart]);
   bb43c:	5c52      	ldrb	r2, [r2, r1]
          packetUBXRXMRAWX->data.header.rcvTow[i] = extractByte(msg, i);
   bb43e:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < 8; i++)
   bb440:	3101      	adds	r1, #1
   bb442:	2908      	cmp	r1, #8
   bb444:	d1f7      	bne.n	bb436 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x123e>
        packetUBXRXMRAWX->data.header.week = extractInt(msg, 8);
   bb446:	68a8      	ldr	r0, [r5, #8]
   bb448:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
   bb44a:	f7fd f92c 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb44e:	8170      	strh	r0, [r6, #10]
  return (msg->payload[spotToStart]);
   bb450:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.leapS = extractSignedChar(msg, 10);
   bb452:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb454:	7a92      	ldrb	r2, [r2, #10]
   bb456:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bb458:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb45a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb45c:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXRXMRAWX->data.header.numMeas = extractByte(msg, 11);
   bb45e:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bb460:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb462:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb464:	7b12      	ldrb	r2, [r2, #12]
        packetUBXRXMRAWX->data.header.recStat.all = extractByte(msg, 12);
   bb466:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bb468:	68aa      	ldr	r2, [r5, #8]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb46a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb46c:	7b52      	ldrb	r2, [r2, #13]
        packetUBXRXMRAWX->data.header.version = extractByte(msg, 13);
   bb46e:	73da      	strb	r2, [r3, #15]
   bb470:	2610      	movs	r6, #16
   bb472:	2300      	movs	r3, #0
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb474:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb476:	7b51      	ldrb	r1, [r2, #13]
   bb478:	b2da      	uxtb	r2, r3
   bb47a:	4291      	cmp	r1, r2
   bb47c:	d80b      	bhi.n	bb496 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x129e>
        packetUBXRXMRAWX->moduleQueried = true;
   bb47e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb480:	2201      	movs	r2, #1
   bb482:	f883 2b92 	strb.w	r2, [r3, #2962]	; 0xb92
        if ((packetUBXRXMRAWX->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb486:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   bb488:	f8d1 0b9c 	ldr.w	r0, [r1, #2972]	; 0xb9c
   bb48c:	2800      	cmp	r0, #0
   bb48e:	d17f      	bne.n	bb590 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1398>
        if (packetUBXRXMRAWX->automaticFlags.flags.bits.addToFileBuffer)
   bb490:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   bb492:	f7fe bf50 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb496:	886a      	ldrh	r2, [r5, #2]
   bb498:	3a10      	subs	r2, #16
   bb49a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
   bb49e:	ea4f 1843 	mov.w	r8, r3, lsl #5
   bb4a2:	ddec      	ble.n	bb47e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
          uint16_t offset = (((uint16_t)i) * 32) + 16;
   bb4a4:	b2b1      	uxth	r1, r6
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb4a6:	46b4      	mov	ip, r6
   bb4a8:	2200      	movs	r2, #0
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb4aa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4ac:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb4ae:	4440      	add	r0, r8
   bb4b0:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb4b2:	f817 700c 	ldrb.w	r7, [r7, ip]
            packetUBXRXMRAWX->data.blocks[i].prMes[j] = extractByte(msg, offset + j);
   bb4b6:	7487      	strb	r7, [r0, #18]
  return (msg->payload[spotToStart]);
   bb4b8:	68af      	ldr	r7, [r5, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb4ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4bc:	4437      	add	r7, r6
   bb4be:	4417      	add	r7, r2
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb4c0:	4440      	add	r0, r8
   bb4c2:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb4c4:	7a3f      	ldrb	r7, [r7, #8]
            packetUBXRXMRAWX->data.blocks[i].cpMes[j] = extractByte(msg, offset + 8 + j);
   bb4c6:	7687      	strb	r7, [r0, #26]
            if (j < 4)
   bb4c8:	2a03      	cmp	r2, #3
   bb4ca:	d80b      	bhi.n	bb4e4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12ec>
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb4cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb4ce:	68af      	ldr	r7, [r5, #8]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb4d0:	f10c 0e10 	add.w	lr, ip, #16
  return (msg->payload[spotToStart]);
   bb4d4:	fa1f fe8e 	uxth.w	lr, lr
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb4d8:	4440      	add	r0, r8
   bb4da:	4410      	add	r0, r2
  return (msg->payload[spotToStart]);
   bb4dc:	f817 700e 	ldrb.w	r7, [r7, lr]
              packetUBXRXMRAWX->data.blocks[i].doMes[j] = extractByte(msg, offset + 16 + j);
   bb4e0:	f880 7022 	strb.w	r7, [r0, #34]	; 0x22
          for (uint8_t j = 0; j < 8; j++)
   bb4e4:	3201      	adds	r2, #1
   bb4e6:	2a08      	cmp	r2, #8
   bb4e8:	f10c 0c01 	add.w	ip, ip, #1
   bb4ec:	d1dd      	bne.n	bb4aa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x12b2>
  return (msg->payload[spotToStart]);
   bb4ee:	68a8      	ldr	r0, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb4f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb4f2:	1c5f      	adds	r7, r3, #1
  return (msg->payload[spotToStart]);
   bb4f4:	4430      	add	r0, r6
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb4f6:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb4fa:	7d00      	ldrb	r0, [r0, #20]
          packetUBXRXMRAWX->data.blocks[i].gnssId = extractByte(msg, offset + 20);
   bb4fc:	7190      	strb	r0, [r2, #6]
  return (msg->payload[spotToStart]);
   bb4fe:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb500:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb502:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb504:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb508:	7d52      	ldrb	r2, [r2, #21]
          packetUBXRXMRAWX->data.blocks[i].svId = extractByte(msg, offset + 21);
   bb50a:	71da      	strb	r2, [r3, #7]
  return (msg->payload[spotToStart]);
   bb50c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb50e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb510:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb512:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb516:	7d92      	ldrb	r2, [r2, #22]
          packetUBXRXMRAWX->data.blocks[i].sigId = extractByte(msg, offset + 22);
   bb518:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb51a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb51c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb51e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb520:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  return (msg->payload[spotToStart]);
   bb524:	7dd2      	ldrb	r2, [r2, #23]
          packetUBXRXMRAWX->data.blocks[i].freqId = extractByte(msg, offset + 23);
   bb526:	725a      	strb	r2, [r3, #9]
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb528:	3118      	adds	r1, #24
   bb52a:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
   bb52e:	68a8      	ldr	r0, [r5, #8]
   bb530:	b289      	uxth	r1, r1
   bb532:	f7fd f8b8 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb536:	44c1      	add	r9, r8
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb538:	2f5c      	cmp	r7, #92	; 0x5c
          packetUBXRXMRAWX->data.blocks[i].lockTime = extractInt(msg, offset + 24);
   bb53a:	f8a9 002a 	strh.w	r0, [r9, #42]	; 0x2a
  return (msg->payload[spotToStart]);
   bb53e:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb540:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb542:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb544:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb546:	7e92      	ldrb	r2, [r2, #26]
          packetUBXRXMRAWX->data.blocks[i].cno = extractByte(msg, offset + 26);
   bb548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return (msg->payload[spotToStart]);
   bb54c:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb54e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb550:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb552:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb554:	7ed2      	ldrb	r2, [r2, #27]
          packetUBXRXMRAWX->data.blocks[i].prStdev = extractByte(msg, offset + 27);
   bb556:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return (msg->payload[spotToStart]);
   bb55a:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb55c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb55e:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb560:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb562:	7f12      	ldrb	r2, [r2, #28]
          packetUBXRXMRAWX->data.blocks[i].cpStdev = extractByte(msg, offset + 28);
   bb564:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  return (msg->payload[spotToStart]);
   bb568:	68aa      	ldr	r2, [r5, #8]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb56a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb56c:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb56e:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb570:	7f52      	ldrb	r2, [r2, #29]
          packetUBXRXMRAWX->data.blocks[i].doStdev = extractByte(msg, offset + 29);
   bb572:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  return (msg->payload[spotToStart]);
   bb578:	68aa      	ldr	r2, [r5, #8]
   bb57a:	4432      	add	r2, r6
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb57c:	4443      	add	r3, r8
  return (msg->payload[spotToStart]);
   bb57e:	7f92      	ldrb	r2, [r2, #30]
          packetUBXRXMRAWX->data.blocks[i].trkStat.all = extractByte(msg, offset + 30);
   bb580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        for (uint8_t i = 0; (i < UBX_RXM_RAWX_MAX_BLOCKS) && (i < packetUBXRXMRAWX->data.header.numMeas) && ((((uint16_t)i) * 32) < (msg->len - 16)); i++)
   bb584:	f106 0620 	add.w	r6, r6, #32
   bb588:	463b      	mov	r3, r7
   bb58a:	f47f af73 	bne.w	bb474 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x127c>
   bb58e:	e776      	b.n	bb47e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1286>
            && (packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb590:	780b      	ldrb	r3, [r1, #0]
   bb592:	071f      	lsls	r7, r3, #28
   bb594:	f53f af7c 	bmi.w	bb490 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
          memcpy(&packetUBXRXMRAWX->callbackData->header.rcvTow[0], &packetUBXRXMRAWX->data.header.rcvTow[0], sizeof(UBX_RXM_RAWX_data_t));
   bb598:	f44f 6239 	mov.w	r2, #2960	; 0xb90
   bb59c:	3102      	adds	r1, #2
   bb59e:	f008 ffc3 	bl	c4528 <memcpy>
          packetUBXRXMRAWX->automaticFlags.flags.bits.callbackCopyValid = true;
   bb5a2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   bb5a4:	7813      	ldrb	r3, [r2, #0]
   bb5a6:	f043 0308 	orr.w	r3, r3, #8
   bb5aa:	7013      	strb	r3, [r2, #0]
   bb5ac:	e770      	b.n	bb490 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1298>
    if (msg->id == UBX_CFG_PRT && msg->len == UBX_CFG_PRT_LEN)
   bb5ae:	680b      	ldr	r3, [r1, #0]
   bb5b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb5b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
   bb5b8:	d12f      	bne.n	bb61a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1422>
      if (packetUBXCFGPRT != NULL)
   bb5ba:	6f03      	ldr	r3, [r0, #112]	; 0x70
   bb5bc:	2b00      	cmp	r3, #0
   bb5be:	f43e ae2c 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb5c2:	688a      	ldr	r2, [r1, #8]
   bb5c4:	7812      	ldrb	r2, [r2, #0]
        packetUBXCFGPRT->data.portID = extractByte(msg, 0);
   bb5c6:	701a      	strb	r2, [r3, #0]
        packetUBXCFGPRT->data.txReady.all = extractInt(msg, 2);
   bb5c8:	6f06      	ldr	r6, [r0, #112]	; 0x70
   bb5ca:	68a8      	ldr	r0, [r5, #8]
   bb5cc:	2102      	movs	r1, #2
   bb5ce:	f7fd f86a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb5d2:	8070      	strh	r0, [r6, #2]
        packetUBXCFGPRT->data.mode = extractLong(msg, 4);
   bb5d4:	68a8      	ldr	r0, [r5, #8]
   bb5d6:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb5d8:	2104      	movs	r1, #4
   bb5da:	f7fd f857 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb5de:	6070      	str	r0, [r6, #4]
        packetUBXCFGPRT->data.baudRate = extractLong(msg, 8);
   bb5e0:	68a8      	ldr	r0, [r5, #8]
   bb5e2:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb5e4:	2108      	movs	r1, #8
   bb5e6:	f7fd f851 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb5ea:	60b0      	str	r0, [r6, #8]
        packetUBXCFGPRT->data.inProtoMask.all = extractInt(msg, 12);
   bb5ec:	68a8      	ldr	r0, [r5, #8]
   bb5ee:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb5f0:	210c      	movs	r1, #12
   bb5f2:	f7fd f858 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb5f6:	81b0      	strh	r0, [r6, #12]
        packetUBXCFGPRT->data.outProtoMask.all = extractInt(msg, 14);
   bb5f8:	68a8      	ldr	r0, [r5, #8]
   bb5fa:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb5fc:	210e      	movs	r1, #14
   bb5fe:	f7fd f852 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb602:	81f0      	strh	r0, [r6, #14]
        packetUBXCFGPRT->data.flags = extractInt(msg, 16);
   bb604:	68a8      	ldr	r0, [r5, #8]
   bb606:	6f26      	ldr	r6, [r4, #112]	; 0x70
   bb608:	2110      	movs	r1, #16
   bb60a:	f7fd f84c 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb60e:	8230      	strh	r0, [r6, #16]
        packetUBXCFGPRT->dataValid = true;
   bb610:	6f23      	ldr	r3, [r4, #112]	; 0x70
   bb612:	2201      	movs	r2, #1
   bb614:	751a      	strb	r2, [r3, #20]
   bb616:	f7fe be00 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    else if (msg->id == UBX_CFG_RATE && msg->len == UBX_CFG_RATE_LEN)
   bb61a:	f5b3 2fc1 	cmp.w	r3, #395264	; 0x60800
   bb61e:	f47e adfc 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXCFGRATE != NULL)
   bb622:	6f46      	ldr	r6, [r0, #116]	; 0x74
   bb624:	2e00      	cmp	r6, #0
   bb626:	f43e adf8 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXCFGRATE->data.measRate = extractInt(msg, 0);
   bb62a:	68a8      	ldr	r0, [r5, #8]
   bb62c:	2100      	movs	r1, #0
   bb62e:	f7fd f83a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb632:	8070      	strh	r0, [r6, #2]
        packetUBXCFGRATE->data.navRate = extractInt(msg, 2);
   bb634:	68a8      	ldr	r0, [r5, #8]
   bb636:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb638:	2102      	movs	r1, #2
   bb63a:	f7fd f834 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb63e:	80b0      	strh	r0, [r6, #4]
        packetUBXCFGRATE->data.timeRef = extractInt(msg, 4);
   bb640:	68a8      	ldr	r0, [r5, #8]
   bb642:	6f66      	ldr	r6, [r4, #116]	; 0x74
   bb644:	2104      	movs	r1, #4
   bb646:	f7fd f82e 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb64a:	80f0      	strh	r0, [r6, #6]
        packetUBXCFGRATE->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb64c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   bb64e:	f04f 32ff 	mov.w	r2, #4294967295
   bb652:	609a      	str	r2, [r3, #8]
   bb654:	f7fe bde1 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
    if (msg->id == UBX_TIM_TM2 && msg->len == UBX_TIM_TM2_LEN)
   bb658:	680b      	ldr	r3, [r1, #0]
   bb65a:	4ab0      	ldr	r2, [pc, #704]	; (bb91c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1724>)
   bb65c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bb660:	4293      	cmp	r3, r2
   bb662:	f47e adda 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXTIMTM2 != NULL)
   bb666:	6f83      	ldr	r3, [r0, #120]	; 0x78
   bb668:	2b00      	cmp	r3, #0
   bb66a:	f43e add6 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
  return (msg->payload[spotToStart]);
   bb66e:	688a      	ldr	r2, [r1, #8]
   bb670:	7812      	ldrb	r2, [r2, #0]
        packetUBXTIMTM2->data.ch = extractByte(msg, 0);
   bb672:	711a      	strb	r2, [r3, #4]
  return (msg->payload[spotToStart]);
   bb674:	688a      	ldr	r2, [r1, #8]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb676:	6f83      	ldr	r3, [r0, #120]	; 0x78
  return (msg->payload[spotToStart]);
   bb678:	7852      	ldrb	r2, [r2, #1]
        packetUBXTIMTM2->data.flags.all = extractByte(msg, 1);
   bb67a:	715a      	strb	r2, [r3, #5]
        packetUBXTIMTM2->data.count = extractInt(msg, 2);
   bb67c:	6f86      	ldr	r6, [r0, #120]	; 0x78
   bb67e:	68a8      	ldr	r0, [r5, #8]
   bb680:	2102      	movs	r1, #2
   bb682:	f7fd f810 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb686:	80f0      	strh	r0, [r6, #6]
        packetUBXTIMTM2->data.wnR = extractInt(msg, 4);
   bb688:	68a8      	ldr	r0, [r5, #8]
   bb68a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb68c:	2104      	movs	r1, #4
   bb68e:	f7fd f80a 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb692:	8130      	strh	r0, [r6, #8]
        packetUBXTIMTM2->data.wnF = extractInt(msg, 6);
   bb694:	68a8      	ldr	r0, [r5, #8]
   bb696:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb698:	2106      	movs	r1, #6
   bb69a:	f7fd f804 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb69e:	8170      	strh	r0, [r6, #10]
        packetUBXTIMTM2->data.towMsR = extractLong(msg, 8);
   bb6a0:	68a8      	ldr	r0, [r5, #8]
   bb6a2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb6a4:	2108      	movs	r1, #8
   bb6a6:	f7fc fff1 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6aa:	60f0      	str	r0, [r6, #12]
        packetUBXTIMTM2->data.towSubMsR = extractLong(msg, 12);
   bb6ac:	68a8      	ldr	r0, [r5, #8]
   bb6ae:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb6b0:	210c      	movs	r1, #12
   bb6b2:	f7fc ffeb 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6b6:	6130      	str	r0, [r6, #16]
        packetUBXTIMTM2->data.towMsF = extractLong(msg, 16);
   bb6b8:	68a8      	ldr	r0, [r5, #8]
   bb6ba:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb6bc:	2110      	movs	r1, #16
   bb6be:	f7fc ffe5 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6c2:	6170      	str	r0, [r6, #20]
        packetUBXTIMTM2->data.towSubMsF = extractLong(msg, 20);
   bb6c4:	68a8      	ldr	r0, [r5, #8]
   bb6c6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb6c8:	2114      	movs	r1, #20
   bb6ca:	f7fc ffdf 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6ce:	61b0      	str	r0, [r6, #24]
        packetUBXTIMTM2->data.accEst = extractLong(msg, 24);
   bb6d0:	68a8      	ldr	r0, [r5, #8]
   bb6d2:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   bb6d4:	2118      	movs	r1, #24
   bb6d6:	f7fc ffd9 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb6da:	61f0      	str	r0, [r6, #28]
        packetUBXTIMTM2->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb6dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb6de:	f04f 32ff 	mov.w	r2, #4294967295
   bb6e2:	621a      	str	r2, [r3, #32]
        if ((packetUBXTIMTM2->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb6e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   bb6e8:	b17a      	cbz	r2, bb70a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
            && (packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb6ea:	7819      	ldrb	r1, [r3, #0]
   bb6ec:	070e      	lsls	r6, r1, #28
   bb6ee:	d40c      	bmi.n	bb70a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1512>
          memcpy(&packetUBXTIMTM2->callbackData->ch, &packetUBXTIMTM2->data.ch, sizeof(UBX_TIM_TM2_data_t));
   bb6f0:	1d19      	adds	r1, r3, #4
   bb6f2:	3320      	adds	r3, #32
   bb6f4:	f851 0b04 	ldr.w	r0, [r1], #4
   bb6f8:	f842 0b04 	str.w	r0, [r2], #4
   bb6fc:	4299      	cmp	r1, r3
   bb6fe:	d1f9      	bne.n	bb6f4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x14fc>
          packetUBXTIMTM2->automaticFlags.flags.bits.callbackCopyValid = true;
   bb700:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   bb702:	7813      	ldrb	r3, [r2, #0]
   bb704:	f043 0308 	orr.w	r3, r3, #8
   bb708:	7013      	strb	r3, [r2, #0]
        if (packetUBXTIMTM2->automaticFlags.flags.bits.addToFileBuffer)
   bb70a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bb70c:	f7fe be13 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_INS && msg->len == UBX_ESF_INS_LEN)
   bb710:	4a83      	ldr	r2, [pc, #524]	; (bb920 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1728>)
   bb712:	4293      	cmp	r3, r2
   bb714:	d158      	bne.n	bb7c8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15d0>
      if (packetUBXESFINS != NULL)
   bb716:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
   bb71a:	2f00      	cmp	r7, #0
   bb71c:	f43e ad7d 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFINS->data.bitfield0.all = extractLong(msg, 0);
   bb720:	68a8      	ldr	r0, [r5, #8]
   bb722:	2100      	movs	r1, #0
   bb724:	f7fc ffb2 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb728:	6078      	str	r0, [r7, #4]
        packetUBXESFINS->data.iTOW = extractLong(msg, 8);
   bb72a:	68a8      	ldr	r0, [r5, #8]
   bb72c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
   bb730:	2108      	movs	r1, #8
   bb732:	f7fc ffab 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb736:	60f8      	str	r0, [r7, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb738:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb73a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb73e:	210c      	movs	r1, #12
   bb740:	f7fc ffa4 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAngRate = extractSignedLong(msg, 12);
   bb744:	6138      	str	r0, [r7, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb746:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb748:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb74c:	4631      	mov	r1, r6
   bb74e:	f7fc ff9d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAngRate = extractSignedLong(msg, 16);
   bb752:	6178      	str	r0, [r7, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb754:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb756:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb75a:	2114      	movs	r1, #20
   bb75c:	f7fc ff96 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAngRate = extractSignedLong(msg, 20);
   bb760:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb762:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb764:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb768:	2118      	movs	r1, #24
   bb76a:	f7fc ff8f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.xAccel = extractSignedLong(msg, 24);
   bb76e:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb770:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb772:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb776:	211c      	movs	r1, #28
   bb778:	f7fc ff88 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.yAccel = extractSignedLong(msg, 28);
   bb77c:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb77e:	68a8      	ldr	r0, [r5, #8]
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb780:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bb784:	2120      	movs	r1, #32
   bb786:	f7fc ff81 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXESFINS->data.zAccel = extractSignedLong(msg, 32);
   bb78a:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXESFINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb78c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb790:	f04f 32ff 	mov.w	r2, #4294967295
   bb794:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXESFINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb796:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb79a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bb79c:	b182      	cbz	r2, bb7c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
            && (packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb79e:	7819      	ldrb	r1, [r3, #0]
   bb7a0:	0709      	lsls	r1, r1, #28
   bb7a2:	d40d      	bmi.n	bb7c0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15c8>
          memcpy(&packetUBXESFINS->callbackData->bitfield0.all, &packetUBXESFINS->data.bitfield0.all, sizeof(UBX_ESF_INS_data_t));
   bb7a4:	1d19      	adds	r1, r3, #4
   bb7a6:	3328      	adds	r3, #40	; 0x28
   bb7a8:	f851 0b04 	ldr.w	r0, [r1], #4
   bb7ac:	f842 0b04 	str.w	r0, [r2], #4
   bb7b0:	4299      	cmp	r1, r3
   bb7b2:	d1f9      	bne.n	bb7a8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x15b0>
          packetUBXESFINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb7b4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   bb7b8:	7813      	ldrb	r3, [r2, #0]
   bb7ba:	f043 0308 	orr.w	r3, r3, #8
   bb7be:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFINS->automaticFlags.flags.bits.addToFileBuffer)
   bb7c0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   bb7c4:	f7fe bdb7 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_ESF_MEAS)
   bb7c8:	784b      	ldrb	r3, [r1, #1]
   bb7ca:	2b02      	cmp	r3, #2
   bb7cc:	d158      	bne.n	bb880 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1688>
      if (packetUBXESFMEAS != NULL)
   bb7ce:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
   bb7d2:	2e00      	cmp	r6, #0
   bb7d4:	f43e ad21 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFMEAS->data.timeTag = extractLong(msg, 0);
   bb7d8:	68a8      	ldr	r0, [r5, #8]
   bb7da:	2100      	movs	r1, #0
   bb7dc:	f7fc ff56 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb7e0:	6070      	str	r0, [r6, #4]
        packetUBXESFMEAS->data.flags.all = extractInt(msg, 4);
   bb7e2:	68a8      	ldr	r0, [r5, #8]
   bb7e4:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb7e8:	2104      	movs	r1, #4
   bb7ea:	f7fc ff5c 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb7ee:	8130      	strh	r0, [r6, #8]
        packetUBXESFMEAS->data.id = extractInt(msg, 6);
   bb7f0:	68a8      	ldr	r0, [r5, #8]
   bb7f2:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb7f6:	2106      	movs	r1, #6
   bb7f8:	f7fc ff55 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bb7fc:	8170      	strh	r0, [r6, #10]
   bb7fe:	2600      	movs	r6, #0
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb800:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
   bb804:	886b      	ldrh	r3, [r5, #2]
   bb806:	7a7a      	ldrb	r2, [r7, #9]
   bb808:	b2b1      	uxth	r1, r6
   bb80a:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
   bb80e:	d320      	bcc.n	bb852 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x165a>
        if ((uint16_t)msg->len > (uint16_t)(8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4)))
   bb810:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
   bb814:	886a      	ldrh	r2, [r5, #2]
   bb816:	7a73      	ldrb	r3, [r6, #9]
   bb818:	08db      	lsrs	r3, r3, #3
   bb81a:	3302      	adds	r3, #2
   bb81c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   bb820:	ea4f 0183 	mov.w	r1, r3, lsl #2
   bb824:	d826      	bhi.n	bb874 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x167c>
        if ((packetUBXESFMEAS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb826:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   bb82a:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   bb82e:	b160      	cbz	r0, bb84a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
            && (packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb830:	780b      	ldrb	r3, [r1, #0]
   bb832:	071a      	lsls	r2, r3, #28
   bb834:	d409      	bmi.n	bb84a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1652>
          memcpy(&packetUBXESFMEAS->callbackData->timeTag, &packetUBXESFMEAS->data.timeTag, sizeof(UBX_ESF_MEAS_data_t));
   bb836:	2288      	movs	r2, #136	; 0x88
   bb838:	3104      	adds	r1, #4
   bb83a:	f008 fe75 	bl	c4528 <memcpy>
          packetUBXESFMEAS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb83e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   bb842:	7813      	ldrb	r3, [r2, #0]
   bb844:	f043 0308 	orr.w	r3, r3, #8
   bb848:	7013      	strb	r3, [r2, #0]
        if (packetUBXESFMEAS->automaticFlags.flags.bits.addToFileBuffer)
   bb84a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   bb84e:	f7fe bd72 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb852:	3b08      	subs	r3, #8
   bb854:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
   bb858:	ddda      	ble.n	bb810 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb85a:	0089      	lsls	r1, r1, #2
   bb85c:	3108      	adds	r1, #8
   bb85e:	68a8      	ldr	r0, [r5, #8]
   bb860:	b289      	uxth	r1, r1
   bb862:	f7fc ff13 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb866:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb86a:	3601      	adds	r6, #1
   bb86c:	2e1f      	cmp	r6, #31
          packetUBXESFMEAS->data.data[i].data.all = extractLong(msg, 8 + (i * 4));
   bb86e:	60f8      	str	r0, [r7, #12]
        for (uint16_t i = 0; (i < DEF_MAX_NUM_ESF_MEAS) && (i < packetUBXESFMEAS->data.flags.bits.numMeas) && ((i * 4) < (msg->len - 8)); i++)
   bb870:	d1c6      	bne.n	bb800 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1608>
   bb872:	e7cd      	b.n	bb810 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1618>
          packetUBXESFMEAS->data.calibTtag = extractLong(msg, 8 + (packetUBXESFMEAS->data.flags.bits.numMeas * 4));
   bb874:	68a8      	ldr	r0, [r5, #8]
   bb876:	f7fc ff09 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb87a:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
   bb87e:	e7d2      	b.n	bb826 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x162e>
    else if (msg->id == UBX_ESF_RAW)
   bb880:	2b03      	cmp	r3, #3
   bb882:	d14f      	bne.n	bb924 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x172c>
      if (packetUBXESFRAW != NULL)
   bb884:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
   bb888:	2900      	cmp	r1, #0
   bb88a:	f43e acc6 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFRAW->data.numEsfRawBlocks = (msg->len - 4) / 8; // Record how many blocks were received. Could be 7 or 70 (ZED-F9R vs. NEO-M8U)
   bb88e:	886a      	ldrh	r2, [r5, #2]
   bb890:	1f13      	subs	r3, r2, #4
   bb892:	bf48      	it	mi
   bb894:	1cd3      	addmi	r3, r2, #3
   bb896:	10db      	asrs	r3, r3, #3
   bb898:	2700      	movs	r7, #0
   bb89a:	f881 3238 	strb.w	r3, [r1, #568]	; 0x238
   bb89e:	463e      	mov	r6, r7
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb8a0:	886b      	ldrh	r3, [r5, #2]
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb8a2:	f8d4 a088 	ldr.w	sl, [r4, #136]	; 0x88
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb8a6:	3b04      	subs	r3, #4
   bb8a8:	42bb      	cmp	r3, r7
   bb8aa:	dc08      	bgt.n	bb8be <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16c6>
        if ((packetUBXESFRAW->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb8ac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   bb8b0:	f8d1 0244 	ldr.w	r0, [r1, #580]	; 0x244
   bb8b4:	bb10      	cbnz	r0, bb8fc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1704>
        if (packetUBXESFRAW->automaticFlags.flags.bits.addToFileBuffer)
   bb8b6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   bb8ba:	f7fe bd3c 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb8be:	fa1f f887 	uxth.w	r8, r7
   bb8c2:	f108 0104 	add.w	r1, r8, #4
   bb8c6:	68a8      	ldr	r0, [r5, #8]
   bb8c8:	b289      	uxth	r1, r1
   bb8ca:	f7fc fedf 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb8ce:	eb0a 0ac6 	add.w	sl, sl, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb8d2:	f108 0108 	add.w	r1, r8, #8
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb8d6:	f8ca 0008 	str.w	r0, [sl, #8]
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb8da:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
   bb8de:	68a8      	ldr	r0, [r5, #8]
   bb8e0:	b289      	uxth	r1, r1
   bb8e2:	f7fc fed3 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
          packetUBXESFRAW->data.data[i].data.all = extractLong(msg, 4 + (i * 8));
   bb8e6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb8ea:	44d9      	add	r9, fp
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb8ec:	3601      	adds	r6, #1
   bb8ee:	2e46      	cmp	r6, #70	; 0x46
          packetUBXESFRAW->data.data[i].sTag = extractLong(msg, 8 + (i * 8));
   bb8f0:	f8c9 000c 	str.w	r0, [r9, #12]
        for (uint16_t i = 0; (i < (DEF_NUM_SENS * DEF_MAX_NUM_ESF_RAW_REPEATS)) && ((i * 8) < (msg->len - 4)); i++)
   bb8f4:	f107 0708 	add.w	r7, r7, #8
   bb8f8:	d1d2      	bne.n	bb8a0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16a8>
   bb8fa:	e7d7      	b.n	bb8ac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16b4>
            && (packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb8fc:	780b      	ldrb	r3, [r1, #0]
   bb8fe:	071b      	lsls	r3, r3, #28
   bb900:	d4d9      	bmi.n	bb8b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
          memcpy(&packetUBXESFRAW->callbackData->data[0].data.all, &packetUBXESFRAW->data.data[0].data.all, sizeof(UBX_ESF_RAW_data_t));
   bb902:	f44f 720e 	mov.w	r2, #568	; 0x238
   bb906:	3108      	adds	r1, #8
   bb908:	3004      	adds	r0, #4
   bb90a:	f008 fe0d 	bl	c4528 <memcpy>
          packetUBXESFRAW->automaticFlags.flags.bits.callbackCopyValid = true;
   bb90e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   bb912:	7813      	ldrb	r3, [r2, #0]
   bb914:	f043 0308 	orr.w	r3, r3, #8
   bb918:	7013      	strb	r3, [r2, #0]
   bb91a:	e7cc      	b.n	bb8b6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x16be>
   bb91c:	001c0300 	.word	0x001c0300
   bb920:	00241500 	.word	0x00241500
    else if (msg->id == UBX_ESF_STATUS)
   bb924:	2b10      	cmp	r3, #16
   bb926:	f47e ac78 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXESFSTATUS != NULL)
   bb92a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
   bb92e:	2e00      	cmp	r6, #0
   bb930:	f43e ac73 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXESFSTATUS->data.iTOW = extractLong(msg, 0);
   bb934:	68a8      	ldr	r0, [r5, #8]
   bb936:	2100      	movs	r1, #0
   bb938:	f7fc fea8 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bb93c:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bb93e:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb940:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb944:	7912      	ldrb	r2, [r2, #4]
        packetUBXESFSTATUS->data.version = extractByte(msg, 4);
   bb946:	721a      	strb	r2, [r3, #8]
  return (msg->payload[spotToStart]);
   bb948:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb94a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb94e:	7b12      	ldrb	r2, [r2, #12]
        packetUBXESFSTATUS->data.fusionMode = extractByte(msg, 12);
   bb950:	741a      	strb	r2, [r3, #16]
  return (msg->payload[spotToStart]);
   bb952:	68aa      	ldr	r2, [r5, #8]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb954:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb958:	7bd2      	ldrb	r2, [r2, #15]
        packetUBXESFSTATUS->data.numSens = extractByte(msg, 15);
   bb95a:	74da      	strb	r2, [r3, #19]
   bb95c:	2310      	movs	r3, #16
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb95e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   bb962:	7cc6      	ldrb	r6, [r0, #19]
   bb964:	b28a      	uxth	r2, r1
   bb966:	4296      	cmp	r6, r2
   bb968:	d80c      	bhi.n	bb984 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x178c>
        packetUBXESFSTATUS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bb96a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb96e:	f04f 32ff 	mov.w	r2, #4294967295
   bb972:	631a      	str	r2, [r3, #48]	; 0x30
        if ((packetUBXESFSTATUS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bb974:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   bb97a:	bb62      	cbnz	r2, bb9d6 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17de>
        if (packetUBXESFSTATUS->automaticFlags.flags.bits.addToFileBuffer)
   bb97c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bb980:	f7fe bcd9 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb984:	886a      	ldrh	r2, [r5, #2]
   bb986:	3a10      	subs	r2, #16
   bb988:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   bb98c:	dded      	ble.n	bb96a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
  return (msg->payload[spotToStart]);
   bb98e:	68aa      	ldr	r2, [r5, #8]
   bb990:	5cd6      	ldrb	r6, [r2, r3]
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb992:	1d0a      	adds	r2, r1, #4
   bb994:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb998:	3101      	adds	r1, #1
          packetUBXESFSTATUS->data.status[i].sensStatus1.all = extractByte(msg, 16 + (i * 4) + 0);
   bb99a:	7106      	strb	r6, [r0, #4]
  return (msg->payload[spotToStart]);
   bb99c:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb99e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9a2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb9a4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb9a8:	7876      	ldrb	r6, [r6, #1]
          packetUBXESFSTATUS->data.status[i].sensStatus2.all = extractByte(msg, 16 + (i * 4) + 1);
   bb9aa:	7146      	strb	r6, [r0, #5]
  return (msg->payload[spotToStart]);
   bb9ac:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb9ae:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9b2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb9b4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb9b8:	78b6      	ldrb	r6, [r6, #2]
          packetUBXESFSTATUS->data.status[i].freq = extractByte(msg, 16 + (i * 4) + 2);
   bb9ba:	7186      	strb	r6, [r0, #6]
  return (msg->payload[spotToStart]);
   bb9bc:	68ae      	ldr	r6, [r5, #8]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb9be:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
  return (msg->payload[spotToStart]);
   bb9c2:	441e      	add	r6, r3
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb9c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  return (msg->payload[spotToStart]);
   bb9c8:	78f6      	ldrb	r6, [r6, #3]
          packetUBXESFSTATUS->data.status[i].faults.all = extractByte(msg, 16 + (i * 4) + 3);
   bb9ca:	71d6      	strb	r6, [r2, #7]
        for (uint16_t i = 0; (i < DEF_NUM_SENS) && (i < packetUBXESFSTATUS->data.numSens) && ((i * 4) < (msg->len - 16)); i++)
   bb9cc:	2907      	cmp	r1, #7
   bb9ce:	f103 0304 	add.w	r3, r3, #4
   bb9d2:	d1c4      	bne.n	bb95e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1766>
   bb9d4:	e7c9      	b.n	bb96a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1772>
            && (packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bb9d6:	7819      	ldrb	r1, [r3, #0]
   bb9d8:	070f      	lsls	r7, r1, #28
   bb9da:	d4cf      	bmi.n	bb97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
          memcpy(&packetUBXESFSTATUS->callbackData->iTOW, &packetUBXESFSTATUS->data.iTOW, sizeof(UBX_ESF_STATUS_data_t));
   bb9dc:	1d19      	adds	r1, r3, #4
   bb9de:	3330      	adds	r3, #48	; 0x30
   bb9e0:	f851 0b04 	ldr.w	r0, [r1], #4
   bb9e4:	f842 0b04 	str.w	r0, [r2], #4
   bb9e8:	4299      	cmp	r1, r3
   bb9ea:	d1f9      	bne.n	bb9e0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x17e8>
          packetUBXESFSTATUS->automaticFlags.flags.bits.callbackCopyValid = true;
   bb9ec:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bb9f0:	7813      	ldrb	r3, [r2, #0]
   bb9f2:	f043 0308 	orr.w	r3, r3, #8
   bb9f6:	7013      	strb	r3, [r2, #0]
   bb9f8:	e7c0      	b.n	bb97c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1784>
    if (msg->id == UBX_MGA_ACK_DATA0 && msg->len == UBX_MGA_ACK_DATA0_LEN)
   bb9fa:	680b      	ldr	r3, [r1, #0]
   bb9fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bba00:	f5b3 2f06 	cmp.w	r3, #548864	; 0x86000
   bba04:	d16a      	bne.n	bbadc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18e4>
      if (packetUBXMGAACK != NULL)
   bba06:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   bba0a:	2b00      	cmp	r3, #0
   bba0c:	f43e ac05 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGAACK->head >= packetUBXMGAACK->tail) // Check if wrap-around has occurred
   bba10:	7818      	ldrb	r0, [r3, #0]
   bba12:	7859      	ldrb	r1, [r3, #1]
   bba14:	4288      	cmp	r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bba16:	bf36      	itet	cc
   bba18:	f100 0210 	addcc.w	r2, r0, #16
          ackBufferContains = packetUBXMGAACK->head - packetUBXMGAACK->tail;
   bba1c:	1a42      	subcs	r2, r0, r1
          ackBufferContains = ((uint8_t)(((uint16_t)packetUBXMGAACK->head + (uint16_t)UBX_MGA_ACK_DATA0_RINGBUFFER_LEN) - (uint16_t)packetUBXMGAACK->tail));
   bba1e:	1a52      	subcc	r2, r2, r1
   bba20:	b2d2      	uxtb	r2, r2
        if (ackBufferContains < (UBX_MGA_ACK_DATA0_RINGBUFFER_LEN - 1))
   bba22:	2a0e      	cmp	r2, #14
   bba24:	d84b      	bhi.n	bbabe <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18c6>
  return (msg->payload[spotToStart]);
   bba26:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bba28:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  return (msg->payload[spotToStart]);
   bba2c:	7812      	ldrb	r2, [r2, #0]
          packetUBXMGAACK->data[packetUBXMGAACK->head].type = extractByte(msg, 0);
   bba2e:	709a      	strb	r2, [r3, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bba30:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba34:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bba36:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba38:	7852      	ldrb	r2, [r2, #1]
          packetUBXMGAACK->data[packetUBXMGAACK->head].version = extractByte(msg, 1);
   bba3a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba3e:	70da      	strb	r2, [r3, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bba40:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba44:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bba46:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba48:	7892      	ldrb	r2, [r2, #2]
          packetUBXMGAACK->data[packetUBXMGAACK->head].infoCode = extractByte(msg, 2);
   bba4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba4e:	711a      	strb	r2, [r3, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bba50:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba54:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bba56:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba58:	78d2      	ldrb	r2, [r2, #3]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgId = extractByte(msg, 3);
   bba5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba5e:	715a      	strb	r2, [r3, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bba60:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba64:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bba66:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba68:	7912      	ldrb	r2, [r2, #4]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[0] = extractByte(msg, 4);
   bba6a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba6e:	719a      	strb	r2, [r3, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bba70:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba74:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bba76:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba78:	7952      	ldrb	r2, [r2, #5]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[1] = extractByte(msg, 5);
   bba7a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba7e:	71da      	strb	r2, [r3, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bba80:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba84:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bba86:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba88:	7992      	ldrb	r2, [r2, #6]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[2] = extractByte(msg, 6);
   bba8a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba8e:	721a      	strb	r2, [r3, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bba90:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  return (msg->payload[spotToStart]);
   bba94:	68aa      	ldr	r2, [r5, #8]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bba96:	7819      	ldrb	r1, [r3, #0]
  return (msg->payload[spotToStart]);
   bba98:	79d2      	ldrb	r2, [r2, #7]
          packetUBXMGAACK->data[packetUBXMGAACK->head].msgPayloadStart[3] = extractByte(msg, 7);
   bba9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   bba9e:	725a      	strb	r2, [r3, #9]
          packetUBXMGAACK->head++;
   bbaa0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   bbaa4:	7813      	ldrb	r3, [r2, #0]
   bbaa6:	3301      	adds	r3, #1
   bbaa8:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGAACK->head == UBX_MGA_ACK_DATA0_RINGBUFFER_LEN)
   bbaaa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   bbaae:	781a      	ldrb	r2, [r3, #0]
   bbab0:	2a10      	cmp	r2, #16
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbab2:	f47e abb2 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            packetUBXMGADBD->head = 0;
   bbab6:	2200      	movs	r2, #0
   bbab8:	701a      	strb	r2, [r3, #0]
   bbaba:	f7fe bbae 	b.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbabe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbac2:	b923      	cbnz	r3, bbace <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d6>
   bbac4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbac8:	2b00      	cmp	r3, #0
   bbaca:	f43e aba6 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGAACK is full. ACK will be lost!"));
   bbace:	4996      	ldr	r1, [pc, #600]	; (bbd28 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b30>)
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbad0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
}
   bbad4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbad8:	f004 b8d9 	b.w	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    else if (msg->id == UBX_MGA_DBD && msg->len <= UBX_MGA_DBD_LEN) // Message length may be less than UBX_MGA_DBD_LEN. UBX_MGA_DBD_LEN is the maximum it will be.
   bbadc:	784b      	ldrb	r3, [r1, #1]
   bbade:	2b80      	cmp	r3, #128	; 0x80
   bbae0:	f47e ab9b 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
   bbae4:	884b      	ldrh	r3, [r1, #2]
   bbae6:	2ba4      	cmp	r3, #164	; 0xa4
   bbae8:	f63e ab97 	bhi.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXMGADBD != NULL)
   bbaec:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   bbaf0:	2a00      	cmp	r2, #0
   bbaf2:	f43e ab92 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        if (packetUBXMGADBD->head >= packetUBXMGADBD->tail) // Check if wrap-around has occurred
   bbaf6:	7810      	ldrb	r0, [r2, #0]
   bbaf8:	7851      	ldrb	r1, [r2, #1]
   bbafa:	4288      	cmp	r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbafc:	bf36      	itet	cc
   bbafe:	1f83      	subcc	r3, r0, #6
          dbdBufferContains = packetUBXMGADBD->head - packetUBXMGADBD->tail;
   bbb00:	1a43      	subcs	r3, r0, r1
          dbdBufferContains = ((uint8_t)(((uint16_t)packetUBXMGADBD->head + (uint16_t)UBX_MGA_DBD_RINGBUFFER_LEN) - (uint16_t)packetUBXMGADBD->tail));
   bbb02:	1a5b      	subcc	r3, r3, r1
   bbb04:	b2db      	uxtb	r3, r3
        if (dbdBufferContains < (UBX_MGA_DBD_RINGBUFFER_LEN - 1))
   bbb06:	2bf8      	cmp	r3, #248	; 0xf8
   bbb08:	d84f      	bhi.n	bbbaa <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19b2>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader1 = UBX_SYNCH_1;
   bbb0a:	23ac      	movs	r3, #172	; 0xac
   bbb0c:	fb03 2200 	mla	r2, r3, r0, r2
   bbb10:	21b5      	movs	r1, #181	; 0xb5
   bbb12:	7091      	strb	r1, [r2, #2]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryHeader2 = UBX_SYNCH_2;
   bbb14:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb18:	7811      	ldrb	r1, [r2, #0]
   bbb1a:	fb03 2201 	mla	r2, r3, r1, r2
   bbb1e:	2162      	movs	r1, #98	; 0x62
   bbb20:	70d1      	strb	r1, [r2, #3]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryClass = UBX_CLASS_MGA;
   bbb22:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb26:	7811      	ldrb	r1, [r2, #0]
   bbb28:	fb03 2201 	mla	r2, r3, r1, r2
   bbb2c:	2113      	movs	r1, #19
   bbb2e:	7111      	strb	r1, [r2, #4]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryID = UBX_MGA_DBD;
   bbb30:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb34:	7811      	ldrb	r1, [r2, #0]
   bbb36:	fb03 2201 	mla	r2, r3, r1, r2
   bbb3a:	2180      	movs	r1, #128	; 0x80
   bbb3c:	7151      	strb	r1, [r2, #5]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenLSB = (uint8_t)(msg->len & 0xFF); // We need to store the length of the DBD entry. The entry itself does not contain a length...
   bbb3e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb42:	7811      	ldrb	r1, [r2, #0]
   bbb44:	fb03 2201 	mla	r2, r3, r1, r2
   bbb48:	8869      	ldrh	r1, [r5, #2]
   bbb4a:	7191      	strb	r1, [r2, #6]
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryLenMSB = (uint8_t)((msg->len >> 8) & 0xFF);
   bbb4c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb50:	7811      	ldrb	r1, [r2, #0]
   bbb52:	fb03 2201 	mla	r2, r3, r1, r2
   bbb56:	8869      	ldrh	r1, [r5, #2]
   bbb58:	0a09      	lsrs	r1, r1, #8
   bbb5a:	71d1      	strb	r1, [r2, #7]
   bbb5c:	2100      	movs	r1, #0
          for (uint16_t i = 0; i < msg->len; i++)
   bbb5e:	886f      	ldrh	r7, [r5, #2]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbb60:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          for (uint16_t i = 0; i < msg->len; i++)
   bbb64:	b28e      	uxth	r6, r1
   bbb66:	42b7      	cmp	r7, r6
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbb68:	7810      	ldrb	r0, [r2, #0]
          for (uint16_t i = 0; i < msg->len; i++)
   bbb6a:	d907      	bls.n	bbb7c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1984>
  return (msg->payload[spotToStart]);
   bbb6c:	68af      	ldr	r7, [r5, #8]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbb6e:	fb03 2200 	mla	r2, r3, r0, r2
   bbb72:	4432      	add	r2, r6
  return (msg->payload[spotToStart]);
   bbb74:	5dbf      	ldrb	r7, [r7, r6]
            packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntry[i] = extractByte(msg, i);
   bbb76:	7217      	strb	r7, [r2, #8]
          for (uint16_t i = 0; i < msg->len; i++)
   bbb78:	3101      	adds	r1, #1
   bbb7a:	e7f0      	b.n	bbb5e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1966>
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumA = msg->checksumA;
   bbb7c:	fb03 2200 	mla	r2, r3, r0, r2
   bbb80:	7b29      	ldrb	r1, [r5, #12]
   bbb82:	f882 10ac 	strb.w	r1, [r2, #172]	; 0xac
          packetUBXMGADBD->data[packetUBXMGADBD->head].dbdEntryChecksumB = msg->checksumB;
   bbb86:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb8a:	7b69      	ldrb	r1, [r5, #13]
   bbb8c:	7810      	ldrb	r0, [r2, #0]
   bbb8e:	fb03 2300 	mla	r3, r3, r0, r2
   bbb92:	f883 10ad 	strb.w	r1, [r3, #173]	; 0xad
          packetUBXMGADBD->head++;
   bbb96:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bbb9a:	7813      	ldrb	r3, [r2, #0]
   bbb9c:	3301      	adds	r3, #1
   bbb9e:	7013      	strb	r3, [r2, #0]
          if (packetUBXMGADBD->head == UBX_MGA_DBD_RINGBUFFER_LEN)
   bbba0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   bbba4:	781a      	ldrb	r2, [r3, #0]
   bbba6:	2afa      	cmp	r2, #250	; 0xfa
   bbba8:	e783      	b.n	bbab2 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18ba>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbbaa:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbbae:	b923      	cbnz	r3, bbbba <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x19c2>
   bbbb0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbbb4:	2b00      	cmp	r3, #0
   bbbb6:	f43e ab30 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
            _debugSerial->println(F("processUBXpacket: packetUBXMGADBD is full. DBD data will be lost!"));
   bbbba:	495c      	ldr	r1, [pc, #368]	; (bbd2c <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b34>)
   bbbbc:	e788      	b.n	bbad0 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x18d8>
    if (msg->id == UBX_HNR_PVT && msg->len == UBX_HNR_PVT_LEN)
   bbbbe:	680b      	ldr	r3, [r1, #0]
   bbbc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   bbbc4:	f5b3 0f90 	cmp.w	r3, #4718592	; 0x480000
   bbbc8:	f040 80b2 	bne.w	bbd30 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b38>
      if (packetUBXHNRPVT != NULL)
   bbbcc:	f8d0 7090 	ldr.w	r7, [r0, #144]	; 0x90
   bbbd0:	2f00      	cmp	r7, #0
   bbbd2:	f43e ab22 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRPVT->data.iTOW = extractLong(msg, 0);
   bbbd6:	68a8      	ldr	r0, [r5, #8]
   bbbd8:	2100      	movs	r1, #0
   bbbda:	f7fc fd57 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbbde:	6078      	str	r0, [r7, #4]
        packetUBXHNRPVT->data.year = extractInt(msg, 4);
   bbbe0:	68a8      	ldr	r0, [r5, #8]
   bbbe2:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   bbbe6:	2104      	movs	r1, #4
   bbbe8:	f7fc fd5d 	bl	b86a6 <_ZN14SFE_UBLOX_GNSS10extractIntEP9ubxPackett.constprop.0.isra.0>
   bbbec:	8138      	strh	r0, [r7, #8]
  return (msg->payload[spotToStart]);
   bbbee:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbbf0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbbf4:	7992      	ldrb	r2, [r2, #6]
        packetUBXHNRPVT->data.month = extractByte(msg, 6);
   bbbf6:	729a      	strb	r2, [r3, #10]
  return (msg->payload[spotToStart]);
   bbbf8:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbbfa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbbfe:	79d2      	ldrb	r2, [r2, #7]
        packetUBXHNRPVT->data.day = extractByte(msg, 7);
   bbc00:	72da      	strb	r2, [r3, #11]
  return (msg->payload[spotToStart]);
   bbc02:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbc04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc08:	7a12      	ldrb	r2, [r2, #8]
        packetUBXHNRPVT->data.hour = extractByte(msg, 8);
   bbc0a:	731a      	strb	r2, [r3, #12]
  return (msg->payload[spotToStart]);
   bbc0c:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbc0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc12:	7a52      	ldrb	r2, [r2, #9]
        packetUBXHNRPVT->data.min = extractByte(msg, 9);
   bbc14:	735a      	strb	r2, [r3, #13]
  return (msg->payload[spotToStart]);
   bbc16:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbc18:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc1c:	7a92      	ldrb	r2, [r2, #10]
        packetUBXHNRPVT->data.sec = extractByte(msg, 10);
   bbc1e:	739a      	strb	r2, [r3, #14]
  return (msg->payload[spotToStart]);
   bbc20:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbc22:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc26:	7ad2      	ldrb	r2, [r2, #11]
        packetUBXHNRPVT->data.valid.all = extractByte(msg, 11);
   bbc28:	73da      	strb	r2, [r3, #15]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc2a:	210c      	movs	r1, #12
   bbc2c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbc2e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc32:	f7fc fd2b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.nano = extractSignedLong(msg, 12);
   bbc36:	6138      	str	r0, [r7, #16]
  return (msg->payload[spotToStart]);
   bbc38:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbc3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc3e:	7c12      	ldrb	r2, [r2, #16]
        packetUBXHNRPVT->data.gpsFix = extractByte(msg, 16);
   bbc40:	751a      	strb	r2, [r3, #20]
  return (msg->payload[spotToStart]);
   bbc42:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbc44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  return (msg->payload[spotToStart]);
   bbc48:	7c52      	ldrb	r2, [r2, #17]
        packetUBXHNRPVT->data.flags.all = extractByte(msg, 17);
   bbc4a:	755a      	strb	r2, [r3, #21]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc4c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbc4e:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc52:	2114      	movs	r1, #20
   bbc54:	f7fc fd1a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lon = extractSignedLong(msg, 20);
   bbc58:	61b8      	str	r0, [r7, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc5a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbc5c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc60:	2118      	movs	r1, #24
   bbc62:	f7fc fd13 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.lat = extractSignedLong(msg, 24);
   bbc66:	61f8      	str	r0, [r7, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc68:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbc6a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc6e:	211c      	movs	r1, #28
   bbc70:	f7fc fd0c 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.height = extractSignedLong(msg, 28);
   bbc74:	6238      	str	r0, [r7, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc76:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbc78:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc7c:	2120      	movs	r1, #32
   bbc7e:	f7fc fd05 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.hMSL = extractSignedLong(msg, 32);
   bbc82:	6278      	str	r0, [r7, #36]	; 0x24
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc84:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbc86:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc8a:	2124      	movs	r1, #36	; 0x24
   bbc8c:	f7fc fcfe 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.gSpeed = extractSignedLong(msg, 36);
   bbc90:	62b8      	str	r0, [r7, #40]	; 0x28
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc92:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbc94:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbc98:	4631      	mov	r1, r6
   bbc9a:	f7fc fcf7 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.speed = extractSignedLong(msg, 40);
   bbc9e:	62f8      	str	r0, [r7, #44]	; 0x2c
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbca0:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbca2:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbca6:	212c      	movs	r1, #44	; 0x2c
   bbca8:	f7fc fcf0 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headMot = extractSignedLong(msg, 44);
   bbcac:	6330      	str	r0, [r6, #48]	; 0x30
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcae:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbcb0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbcb4:	2130      	movs	r1, #48	; 0x30
   bbcb6:	f7fc fce9 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRPVT->data.headVeh = extractSignedLong(msg, 48);
   bbcba:	6370      	str	r0, [r6, #52]	; 0x34
        packetUBXHNRPVT->data.hAcc = extractLong(msg, 52);
   bbcbc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbcc0:	68a8      	ldr	r0, [r5, #8]
   bbcc2:	2134      	movs	r1, #52	; 0x34
   bbcc4:	f7fc fce2 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbcc8:	63b0      	str	r0, [r6, #56]	; 0x38
        packetUBXHNRPVT->data.vAcc = extractLong(msg, 56);
   bbcca:	68a8      	ldr	r0, [r5, #8]
   bbccc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbcd0:	2138      	movs	r1, #56	; 0x38
   bbcd2:	f7fc fcdb 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbcd6:	63f0      	str	r0, [r6, #60]	; 0x3c
        packetUBXHNRPVT->data.sAcc = extractLong(msg, 60);
   bbcd8:	68a8      	ldr	r0, [r5, #8]
   bbcda:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbcde:	213c      	movs	r1, #60	; 0x3c
   bbce0:	f7fc fcd4 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbce4:	6430      	str	r0, [r6, #64]	; 0x40
        packetUBXHNRPVT->data.headAcc = extractLong(msg, 64);
   bbce6:	68a8      	ldr	r0, [r5, #8]
   bbce8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
   bbcec:	2140      	movs	r1, #64	; 0x40
   bbcee:	f7fc fccd 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbcf2:	6470      	str	r0, [r6, #68]	; 0x44
        packetUBXHNRPVT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbcf4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbcf8:	f04f 32ff 	mov.w	r2, #4294967295
   bbcfc:	64da      	str	r2, [r3, #76]	; 0x4c
        if ((packetUBXHNRPVT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbcfe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   bbd02:	6d88      	ldr	r0, [r1, #88]	; 0x58
   bbd04:	b160      	cbz	r0, bbd20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
            && (packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbd06:	780b      	ldrb	r3, [r1, #0]
   bbd08:	071e      	lsls	r6, r3, #28
   bbd0a:	d409      	bmi.n	bbd20 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1b28>
          memcpy(&packetUBXHNRPVT->callbackData->iTOW, &packetUBXHNRPVT->data.iTOW, sizeof(UBX_HNR_PVT_data_t));
   bbd0c:	2248      	movs	r2, #72	; 0x48
   bbd0e:	3104      	adds	r1, #4
   bbd10:	f008 fc0a 	bl	c4528 <memcpy>
          packetUBXHNRPVT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbd14:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   bbd18:	7813      	ldrb	r3, [r2, #0]
   bbd1a:	f043 0308 	orr.w	r3, r3, #8
   bbd1e:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRPVT->automaticFlags.flags.bits.addToFileBuffer)
   bbd20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   bbd24:	f7fe bb07 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
   bbd28:	000c715d 	.word	0x000c715d
   bbd2c:	000c719a 	.word	0x000c719a
    else if (msg->id == UBX_HNR_ATT && msg->len == UBX_HNR_ATT_LEN)
   bbd30:	4a5d      	ldr	r2, [pc, #372]	; (bbea8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb0>)
   bbd32:	4293      	cmp	r3, r2
   bbd34:	d156      	bne.n	bbde4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bec>
      if (packetUBXHNRATT != NULL)
   bbd36:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
   bbd3a:	2e00      	cmp	r6, #0
   bbd3c:	f43e aa6d 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRATT->data.iTOW = extractLong(msg, 0);
   bbd40:	68a8      	ldr	r0, [r5, #8]
   bbd42:	2100      	movs	r1, #0
   bbd44:	f7fc fca2 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd48:	6070      	str	r0, [r6, #4]
  return (msg->payload[spotToStart]);
   bbd4a:	68aa      	ldr	r2, [r5, #8]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbd4c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  return (msg->payload[spotToStart]);
   bbd50:	7912      	ldrb	r2, [r2, #4]
        packetUBXHNRATT->data.version = extractByte(msg, 4);
   bbd52:	721a      	strb	r2, [r3, #8]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd54:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbd56:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd5a:	2108      	movs	r1, #8
   bbd5c:	f7fc fc96 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.roll = extractSignedLong(msg, 8);
   bbd60:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd62:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbd64:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd68:	210c      	movs	r1, #12
   bbd6a:	f7fc fc8f 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.pitch = extractSignedLong(msg, 12);
   bbd6e:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd70:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbd72:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbd76:	2110      	movs	r1, #16
   bbd78:	f7fc fc88 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRATT->data.heading = extractSignedLong(msg, 16);
   bbd7c:	6170      	str	r0, [r6, #20]
        packetUBXHNRATT->data.accRoll = extractLong(msg, 20);
   bbd7e:	68a8      	ldr	r0, [r5, #8]
   bbd80:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbd84:	2114      	movs	r1, #20
   bbd86:	f7fc fc81 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd8a:	61b0      	str	r0, [r6, #24]
        packetUBXHNRATT->data.accPitch = extractLong(msg, 24);
   bbd8c:	68a8      	ldr	r0, [r5, #8]
   bbd8e:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbd92:	2118      	movs	r1, #24
   bbd94:	f7fc fc7a 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbd98:	61f0      	str	r0, [r6, #28]
        packetUBXHNRATT->data.accHeading = extractLong(msg, 28);
   bbd9a:	68a8      	ldr	r0, [r5, #8]
   bbd9c:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
   bbda0:	211c      	movs	r1, #28
   bbda2:	f7fc fc73 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbda6:	6230      	str	r0, [r6, #32]
        packetUBXHNRATT->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbda8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbdac:	f04f 32ff 	mov.w	r2, #4294967295
   bbdb0:	625a      	str	r2, [r3, #36]	; 0x24
        if ((packetUBXHNRATT->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbdb2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbdb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   bbdb8:	b182      	cbz	r2, bbddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
            && (packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbdba:	7819      	ldrb	r1, [r3, #0]
   bbdbc:	0708      	lsls	r0, r1, #28
   bbdbe:	d40d      	bmi.n	bbddc <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1be4>
          memcpy(&packetUBXHNRATT->callbackData->iTOW, &packetUBXHNRATT->data.iTOW, sizeof(UBX_HNR_ATT_data_t));
   bbdc0:	1d19      	adds	r1, r3, #4
   bbdc2:	3324      	adds	r3, #36	; 0x24
   bbdc4:	f851 0b04 	ldr.w	r0, [r1], #4
   bbdc8:	f842 0b04 	str.w	r0, [r2], #4
   bbdcc:	4299      	cmp	r1, r3
   bbdce:	d1f9      	bne.n	bbdc4 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1bcc>
          packetUBXHNRATT->automaticFlags.flags.bits.callbackCopyValid = true;
   bbdd0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   bbdd4:	7813      	ldrb	r3, [r2, #0]
   bbdd6:	f043 0308 	orr.w	r3, r3, #8
   bbdda:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRATT->automaticFlags.flags.bits.addToFileBuffer)
   bbddc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   bbde0:	f7fe baa9 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
    else if (msg->id == UBX_HNR_INS && msg->len == UBX_HNR_INS_LEN)
   bbde4:	4a31      	ldr	r2, [pc, #196]	; (bbeac <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1cb4>)
   bbde6:	4293      	cmp	r3, r2
   bbde8:	f47e aa17 	bne.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
      if (packetUBXHNRINS != NULL)
   bbdec:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
   bbdf0:	2e00      	cmp	r6, #0
   bbdf2:	f43e aa12 	beq.w	ba21a <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x22>
        packetUBXHNRINS->data.bitfield0.all = extractLong(msg, 0);
   bbdf6:	68a8      	ldr	r0, [r5, #8]
   bbdf8:	2100      	movs	r1, #0
   bbdfa:	f7fc fc47 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbdfe:	6070      	str	r0, [r6, #4]
        packetUBXHNRINS->data.iTOW = extractLong(msg, 8);
   bbe00:	68a8      	ldr	r0, [r5, #8]
   bbe02:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   bbe06:	2108      	movs	r1, #8
   bbe08:	f7fc fc40 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
   bbe0c:	60f0      	str	r0, [r6, #12]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe0e:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbe10:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe14:	210c      	movs	r1, #12
   bbe16:	f7fc fc39 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAngRate = extractSignedLong(msg, 12);
   bbe1a:	6130      	str	r0, [r6, #16]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe1c:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbe1e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe22:	2110      	movs	r1, #16
   bbe24:	f7fc fc32 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAngRate = extractSignedLong(msg, 16);
   bbe28:	6170      	str	r0, [r6, #20]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe2a:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbe2c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe30:	2114      	movs	r1, #20
   bbe32:	f7fc fc2b 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAngRate = extractSignedLong(msg, 20);
   bbe36:	61b0      	str	r0, [r6, #24]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe38:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbe3a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe3e:	2118      	movs	r1, #24
   bbe40:	f7fc fc24 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.xAccel = extractSignedLong(msg, 24);
   bbe44:	61f0      	str	r0, [r6, #28]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe46:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbe48:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe4c:	211c      	movs	r1, #28
   bbe4e:	f7fc fc1d 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.yAccel = extractSignedLong(msg, 28);
   bbe52:	6230      	str	r0, [r6, #32]
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe54:	68a8      	ldr	r0, [r5, #8]
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbe56:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  unsignedSigned.unsignedLong = extractLong(msg, spotToStart);
   bbe5a:	2120      	movs	r1, #32
   bbe5c:	f7fc fc16 	bl	b868c <_ZN14SFE_UBLOX_GNSS11extractLongEP9ubxPackett.constprop.0.isra.0>
        packetUBXHNRINS->data.zAccel = extractSignedLong(msg, 32);
   bbe60:	6270      	str	r0, [r6, #36]	; 0x24
        packetUBXHNRINS->moduleQueried.moduleQueried.all = 0xFFFFFFFF;
   bbe62:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbe66:	f04f 32ff 	mov.w	r2, #4294967295
   bbe6a:	629a      	str	r2, [r3, #40]	; 0x28
        if ((packetUBXHNRINS->callbackData != NULL)                                     // If RAM has been allocated for the copy of the data
   bbe6c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbe70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   bbe72:	b182      	cbz	r2, bbe96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
            && (packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid == false)) // AND the data is stale
   bbe74:	7819      	ldrb	r1, [r3, #0]
   bbe76:	0709      	lsls	r1, r1, #28
   bbe78:	d40d      	bmi.n	bbe96 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c9e>
          memcpy(&packetUBXHNRINS->callbackData->bitfield0.all, &packetUBXHNRINS->data.bitfield0.all, sizeof(UBX_HNR_INS_data_t));
   bbe7a:	1d19      	adds	r1, r3, #4
   bbe7c:	3328      	adds	r3, #40	; 0x28
   bbe7e:	f851 0b04 	ldr.w	r0, [r1], #4
   bbe82:	f842 0b04 	str.w	r0, [r2], #4
   bbe86:	4299      	cmp	r1, r3
   bbe88:	d1f9      	bne.n	bbe7e <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x1c86>
          packetUBXHNRINS->automaticFlags.flags.bits.callbackCopyValid = true;
   bbe8a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   bbe8e:	7813      	ldrb	r3, [r2, #0]
   bbe90:	f043 0308 	orr.w	r3, r3, #8
   bbe94:	7013      	strb	r3, [r2, #0]
        if (packetUBXHNRINS->automaticFlags.flags.bits.addToFileBuffer)
   bbe96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   bbe9a:	f7fe ba4c 	b.w	ba336 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0x13e>
        uint16_t userDataLength = (packetUBXRXMPMP->callbackData->version == 0x00) ? 504 : (packetUBXRXMPMP->callbackData->numBytesUserData);
   bbe9e:	885e      	ldrh	r6, [r3, #2]
        uint16_t userDataStart = (packetUBXRXMPMP->callbackData->version == 0x00) ? 20 : 24;
   bbea0:	2018      	movs	r0, #24
   bbea2:	f7ff b9a2 	b.w	bb1ea <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket+0xff2>
   bbea6:	bf00      	nop
   bbea8:	00200100 	.word	0x00200100
   bbeac:	00240200 	.word	0x00240200

000bbeb0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>:
{
   bbeb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bbeb4:	4699      	mov	r9, r3
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbeb6:	f890 314d 	ldrb.w	r3, [r0, #333]	; 0x14d
{
   bbeba:	f89d a020 	ldrb.w	sl, [sp, #32]
   bbebe:	4604      	mov	r4, r0
   bbec0:	460f      	mov	r7, r1
   bbec2:	4615      	mov	r5, r2
  if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bbec4:	b993      	cbnz	r3, bbeec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c>
    maximum_payload_size = packetCfgPayloadSize;
   bbec6:	f8b0 80f8 	ldrh.w	r8, [r0, #248]	; 0xf8
  if (incomingUBX->counter < incomingUBX->len + 4)
   bbeca:	886b      	ldrh	r3, [r5, #2]
   bbecc:	88aa      	ldrh	r2, [r5, #4]
   bbece:	3303      	adds	r3, #3
   bbed0:	4293      	cmp	r3, r2
   bbed2:	db03      	blt.n	bbedc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2c>
    addToChecksum(incoming);
   bbed4:	4639      	mov	r1, r7
   bbed6:	4620      	mov	r0, r4
   bbed8:	f7fd fdf0 	bl	b9abc <_ZN14SFE_UBLOX_GNSS13addToChecksumEh>
  if (incomingUBX->counter == 0)
   bbedc:	88ae      	ldrh	r6, [r5, #4]
   bbede:	bb7e      	cbnz	r6, bbf40 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x90>
    incomingUBX->cls = incoming;
   bbee0:	702f      	strb	r7, [r5, #0]
  incomingUBX->counter++;
   bbee2:	88ab      	ldrh	r3, [r5, #4]
   bbee4:	3301      	adds	r3, #1
   bbee6:	80ab      	strh	r3, [r5, #4]
}
   bbee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bbeec:	2b03      	cmp	r3, #3
   bbeee:	d124      	bne.n	bbf3a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x8a>
    maximum_payload_size = getMaxPayloadSize(incomingUBX->cls, incomingUBX->id);
   bbef0:	7852      	ldrb	r2, [r2, #1]
   bbef2:	7829      	ldrb	r1, [r5, #0]
   bbef4:	f7fc fdda 	bl	b8aac <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
    if (maximum_payload_size == 0)
   bbef8:	4680      	mov	r8, r0
   bbefa:	2800      	cmp	r0, #0
   bbefc:	d1e5      	bne.n	bbeca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbefe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bbf02:	b91b      	cbnz	r3, bbf0c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x5c>
   bbf04:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bbf08:	2b00      	cmp	r3, #0
   bbf0a:	d0de      	beq.n	bbeca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
        _debugSerial->print(F("processUBX: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bbf0c:	49b7      	ldr	r1, [pc, #732]	; (bc1ec <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x33c>)
   bbf0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf12:	f003 fea2 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->cls);
   bbf16:	7829      	ldrb	r1, [r5, #0]
   bbf18:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf1c:	220a      	movs	r2, #10
   bbf1e:	f7fc fbd5 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" ID: 0x"));
   bbf22:	49b3      	ldr	r1, [pc, #716]	; (bc1f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bbf24:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf28:	f003 fe97 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(incomingUBX->id);
   bbf2c:	7869      	ldrb	r1, [r5, #1]
   bbf2e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbf32:	220a      	movs	r2, #10
   bbf34:	f7fc fbd1 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bbf38:	e7c7      	b.n	bbeca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
    maximum_payload_size = 2;
   bbf3a:	f04f 0802 	mov.w	r8, #2
   bbf3e:	e7c4      	b.n	bbeca <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a>
  else if (incomingUBX->counter == 1)
   bbf40:	2e01      	cmp	r6, #1
   bbf42:	d101      	bne.n	bbf48 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x98>
    incomingUBX->id = incoming;
   bbf44:	706f      	strb	r7, [r5, #1]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf46:	e7cc      	b.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 2) // Len LSB
   bbf48:	2e02      	cmp	r6, #2
   bbf4a:	d101      	bne.n	bbf50 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xa0>
    incomingUBX->len = incoming;
   bbf4c:	806f      	strh	r7, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf4e:	e7c8      	b.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == 3) // Len MSB
   bbf50:	2e03      	cmp	r6, #3
    incomingUBX->len |= incoming << 8;
   bbf52:	8869      	ldrh	r1, [r5, #2]
  else if (incomingUBX->counter == 3) // Len MSB
   bbf54:	d103      	bne.n	bbf5e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xae>
    incomingUBX->len |= incoming << 8;
   bbf56:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
   bbf5a:	8069      	strh	r1, [r5, #2]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf5c:	e7c1      	b.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 4) // ChecksumA
   bbf5e:	1d0b      	adds	r3, r1, #4
   bbf60:	429e      	cmp	r6, r3
   bbf62:	d136      	bne.n	bbfd2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x122>
    incomingUBX->checksumA = incoming;
   bbf64:	732f      	strb	r7, [r5, #12]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bbf66:	88aa      	ldrh	r2, [r5, #4]
   bbf68:	f108 0306 	add.w	r3, r8, #6
   bbf6c:	429a      	cmp	r2, r3
   bbf6e:	d1b8      	bne.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
   bbf70:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bbf74:	2b00      	cmp	r3, #0
   bbf76:	d1b4      	bne.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Reset the sentence to being looking for a new start char
   bbf78:	2200      	movs	r2, #0
   bbf7a:	7022      	strb	r2, [r4, #0]
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bbf7c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   bbf80:	b91a      	cbnz	r2, bbf8a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xda>
   bbf82:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   bbf86:	2a00      	cmp	r2, #0
   bbf88:	d0ab      	beq.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbf8a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
      if (overrun)
   bbf8e:	2b00      	cmp	r3, #0
   bbf90:	f000 8170 	beq.w	bc274 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c4>
        _debugSerial->print(F("processUBX: buffer overrun detected!"));
   bbf94:	4997      	ldr	r1, [pc, #604]	; (bc1f4 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x344>)
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bbf96:	f003 fe60 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(F(" activePacketBuffer: "));
   bbf9a:	4997      	ldr	r1, [pc, #604]	; (bc1f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x348>)
   bbf9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfa0:	f003 fe5b 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bbfa4:	f894 114d 	ldrb.w	r1, [r4, #333]	; 0x14d
   bbfa8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfac:	220a      	movs	r2, #10
   bbfae:	f003 fe70 	bl	bfc92 <_ZN5Print11printNumberEmh>
      _debugSerial->print(F(" maximum_payload_size: "));
   bbfb2:	4992      	ldr	r1, [pc, #584]	; (bc1fc <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x34c>)
   bbfb4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bbfb8:	f003 fe4f 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->println(maximum_payload_size);
   bbfbc:	f8d4 40d4 	ldr.w	r4, [r4, #212]	; 0xd4
   bbfc0:	220a      	movs	r2, #10
   bbfc2:	4641      	mov	r1, r8
   bbfc4:	4620      	mov	r0, r4
   bbfc6:	f003 fe64 	bl	bfc92 <_ZN5Print11printNumberEmh>
        n += println();
   bbfca:	4620      	mov	r0, r4
   bbfcc:	f003 fe49 	bl	bfc62 <_ZN5Print7printlnEv>
        return n;
   bbfd0:	e787      	b.n	bbee2 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x32>
  else if (incomingUBX->counter == incomingUBX->len + 5) // ChecksumB
   bbfd2:	3105      	adds	r1, #5
   bbfd4:	428e      	cmp	r6, r1
   bbfd6:	f040 812f 	bne.w	bc238 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x388>
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbfda:	2300      	movs	r3, #0
    incomingUBX->checksumB = incoming;
   bbfdc:	736f      	strb	r7, [r5, #13]
    currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // We're done! Reset the sentence to being looking for a new start char
   bbfde:	7023      	strb	r3, [r4, #0]
    if ((incomingUBX->checksumA == rollingChecksumA) && (incomingUBX->checksumB == rollingChecksumB))
   bbfe0:	89a9      	ldrh	r1, [r5, #12]
   bbfe2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
   bbfe6:	4291      	cmp	r1, r2
   bbfe8:	f040 80ae 	bne.w	bc148 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x298>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_VALID; // Flag the packet as valid
   bbfec:	2301      	movs	r3, #1
   bbfee:	73ab      	strb	r3, [r5, #14]
      _signsOfLife = true;                                  // The checksum is valid, so set the _signsOfLife flag
   bbff0:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bbff4:	7829      	ldrb	r1, [r5, #0]
   bbff6:	4549      	cmp	r1, r9
   bbff8:	d155      	bne.n	bc0a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
   bbffa:	786b      	ldrb	r3, [r5, #1]
   bbffc:	4553      	cmp	r3, sl
   bbffe:	d152      	bne.n	bc0a6 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1f6>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_VALID; // If we have a match, set the classAndIDmatch flag to valid
   bc000:	2301      	movs	r3, #1
   bc002:	73eb      	strb	r3, [r5, #15]
      if (_printDebug == true)
   bc004:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc008:	b3b3      	cbz	r3, bc078 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
        _debugSerial->print(F("Incoming: Size: "));
   bc00a:	497d      	ldr	r1, [pc, #500]	; (bc200 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x350>)
   bc00c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc010:	f003 fe23 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bc014:	220a      	movs	r2, #10
   bc016:	8869      	ldrh	r1, [r5, #2]
   bc018:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc01c:	f003 fe39 	bl	bfc92 <_ZN5Print11printNumberEmh>
        _debugSerial->print(F(" Received: "));
   bc020:	4978      	ldr	r1, [pc, #480]	; (bc204 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x354>)
   bc022:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc026:	f003 fe18 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        printPacket(incomingUBX);
   bc02a:	2200      	movs	r2, #0
   bc02c:	4629      	mov	r1, r5
   bc02e:	4620      	mov	r0, r4
   bc030:	f7fd ff50 	bl	b9ed4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
        if (incomingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc034:	7bab      	ldrb	r3, [r5, #14]
   bc036:	2b01      	cmp	r3, #1
   bc038:	d104      	bne.n	bc044 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x194>
          _debugSerial->println(F("packetCfg now valid"));
   bc03a:	4973      	ldr	r1, [pc, #460]	; (bc208 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x358>)
   bc03c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc040:	f003 fe25 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.valid == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc044:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   bc048:	2b01      	cmp	r3, #1
   bc04a:	d104      	bne.n	bc056 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1a6>
          _debugSerial->println(F("packetAck now valid"));
   bc04c:	496f      	ldr	r1, [pc, #444]	; (bc20c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x35c>)
   bc04e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc052:	f003 fe1c 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (incomingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc056:	7beb      	ldrb	r3, [r5, #15]
   bc058:	2b01      	cmp	r3, #1
   bc05a:	d104      	bne.n	bc066 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1b6>
          _debugSerial->println(F("packetCfg classAndIDmatch"));
   bc05c:	496c      	ldr	r1, [pc, #432]	; (bc210 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x360>)
   bc05e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc062:	f003 fe14 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID)
   bc066:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   bc06a:	2b01      	cmp	r3, #1
   bc06c:	d104      	bne.n	bc078 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->println(F("packetAck classAndIDmatch"));
   bc06e:	4969      	ldr	r1, [pc, #420]	; (bc214 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x364>)
   bc070:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc074:	f003 fe0b 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (ignoreThisPayload == false)
   bc078:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
   bc07c:	b91b      	cbnz	r3, bc086 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        processUBXpacket(incomingUBX);
   bc07e:	4629      	mov	r1, r5
   bc080:	4620      	mov	r0, r4
   bc082:	f7fe f8b9 	bl	ba1f8 <_ZN14SFE_UBLOX_GNSS16processUBXpacketEP9ubxPacket>
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETAUTO)
   bc086:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc08a:	2b03      	cmp	r3, #3
   bc08c:	f47f af6b 	bne.w	bbf66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      delete[] payloadAuto; // Created with new[]
   bc090:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc094:	b108      	cbz	r0, bc09a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1ea>
   bc096:	f7f8 f802 	bl	b409e <_ZdaPv>
      payloadAuto = NULL;   // Redundant?
   bc09a:	2300      	movs	r3, #0
   bc09c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
      packetAuto.payload = payloadAuto;
   bc0a0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc0a4:	e75f      	b.n	bbf66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc0a6:	882b      	ldrh	r3, [r5, #0]
   bc0a8:	f240 1205 	movw	r2, #261	; 0x105
   bc0ac:	4293      	cmp	r3, r2
   bc0ae:	d123      	bne.n	bc0f8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x248>
   bc0b0:	68ab      	ldr	r3, [r5, #8]
   bc0b2:	781a      	ldrb	r2, [r3, #0]
   bc0b4:	454a      	cmp	r2, r9
   bc0b6:	d102      	bne.n	bc0be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc0b8:	785b      	ldrb	r3, [r3, #1]
   bc0ba:	4553      	cmp	r3, sl
   bc0bc:	d0a0      	beq.n	bc000 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x150>
      else if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc0be:	786a      	ldrb	r2, [r5, #1]
   bc0c0:	4620      	mov	r0, r4
   bc0c2:	f7fc fbf1 	bl	b88a8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc0c6:	2800      	cmp	r0, #0
   bc0c8:	d09c      	beq.n	bc004 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
        if (_printDebug == true)
   bc0ca:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc0ce:	2b00      	cmp	r3, #0
   bc0d0:	d0d2      	beq.n	bc078 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: incoming \"automatic\" message: Class: 0x"));
   bc0d2:	4951      	ldr	r1, [pc, #324]	; (bc218 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x368>)
   bc0d4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0d8:	f003 fdbf 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->cls, HEX);
   bc0dc:	2210      	movs	r2, #16
   bc0de:	7829      	ldrb	r1, [r5, #0]
   bc0e0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0e4:	f7fc faf2 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc0e8:	4941      	ldr	r1, [pc, #260]	; (bc1f0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x340>)
   bc0ea:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc0ee:	f003 fdb4 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->id, HEX);
   bc0f2:	7869      	ldrb	r1, [r5, #1]
   bc0f4:	2210      	movs	r2, #16
   bc0f6:	e022      	b.n	bc13e <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x28e>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->id == UBX_ACK_NACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc0f8:	2b05      	cmp	r3, #5
   bc0fa:	d1e0      	bne.n	bc0be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc0fc:	68ab      	ldr	r3, [r5, #8]
   bc0fe:	781a      	ldrb	r2, [r3, #0]
   bc100:	454a      	cmp	r2, r9
   bc102:	d1dc      	bne.n	bc0be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
   bc104:	785b      	ldrb	r3, [r3, #1]
   bc106:	4553      	cmp	r3, sl
   bc108:	d1d9      	bne.n	bc0be <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x20e>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_NOTACKNOWLEDGED; // If we have a match, set the classAndIDmatch flag to NOTACKNOWLEDGED
   bc10a:	2303      	movs	r3, #3
   bc10c:	73eb      	strb	r3, [r5, #15]
        if (_printDebug == true)
   bc10e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc112:	2b00      	cmp	r3, #0
   bc114:	d0b0      	beq.n	bc078 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1c8>
          _debugSerial->print(F("processUBX: NACK received: Requested Class: 0x"));
   bc116:	4941      	ldr	r1, [pc, #260]	; (bc21c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x36c>)
   bc118:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc11c:	f003 fd9d 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(incomingUBX->payload[0], HEX);
   bc120:	68ab      	ldr	r3, [r5, #8]
   bc122:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc126:	7819      	ldrb	r1, [r3, #0]
   bc128:	2210      	movs	r2, #16
   bc12a:	f7fc facf 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" Requested ID: 0x"));
   bc12e:	493c      	ldr	r1, [pc, #240]	; (bc220 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x370>)
   bc130:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc134:	f003 fd91 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(incomingUBX->payload[1], HEX);
   bc138:	68ab      	ldr	r3, [r5, #8]
   bc13a:	7859      	ldrb	r1, [r3, #1]
   bc13c:	2210      	movs	r2, #16
          _debugSerial->println(incomingUBX->id, HEX);
   bc13e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc142:	f7fc faca 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc146:	e75d      	b.n	bc004 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x154>
      incomingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID;
   bc148:	73ab      	strb	r3, [r5, #14]
      if ((incomingUBX->cls == requestedClass) && (incomingUBX->id == requestedID))
   bc14a:	782b      	ldrb	r3, [r5, #0]
   bc14c:	454b      	cmp	r3, r9
   bc14e:	d143      	bne.n	bc1d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
   bc150:	786a      	ldrb	r2, [r5, #1]
   bc152:	4552      	cmp	r2, sl
   bc154:	d140      	bne.n	bc1d8 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x328>
        incomingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_VALID; // If we have a match, set the classAndIDmatch flag to not valid
   bc156:	2300      	movs	r3, #0
   bc158:	73eb      	strb	r3, [r5, #15]
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc15a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc15e:	b91b      	cbnz	r3, bc168 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2b8>
   bc160:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc164:	2b00      	cmp	r3, #0
   bc166:	d08e      	beq.n	bc086 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
        _debugSerial->print(F("Checksum failed:"));
   bc168:	492e      	ldr	r1, [pc, #184]	; (bc224 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x374>)
   bc16a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc16e:	f003 fd74 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(F(" checksumA: "));
   bc172:	492d      	ldr	r1, [pc, #180]	; (bc228 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x378>)
   bc174:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc178:	f003 fd6f 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumA);
   bc17c:	7b29      	ldrb	r1, [r5, #12]
   bc17e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc182:	220a      	movs	r2, #10
   bc184:	f7fc faa2 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" checksumB: "));
   bc188:	4928      	ldr	r1, [pc, #160]	; (bc22c <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x37c>)
   bc18a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc18e:	f003 fd64 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(incomingUBX->checksumB);
   bc192:	7b69      	ldrb	r1, [r5, #13]
   bc194:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc198:	220a      	movs	r2, #10
   bc19a:	f7fc fa97 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumA: "));
   bc19e:	4924      	ldr	r1, [pc, #144]	; (bc230 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x380>)
   bc1a0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1a4:	f003 fd59 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumA);
   bc1a8:	f894 115a 	ldrb.w	r1, [r4, #346]	; 0x15a
   bc1ac:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1b0:	220a      	movs	r2, #10
   bc1b2:	f7fc fa8b 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->print(F(" rollingChecksumB: "));
   bc1b6:	491f      	ldr	r1, [pc, #124]	; (bc234 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x384>)
   bc1b8:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1bc:	f003 fd4d 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->print(rollingChecksumB);
   bc1c0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1c4:	f894 115b 	ldrb.w	r1, [r4, #347]	; 0x15b
   bc1c8:	220a      	movs	r2, #10
   bc1ca:	f7fc fa7f 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
        _debugSerial->println();
   bc1ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc1d2:	f003 fd46 	bl	bfc62 <_ZN5Print7printlnEv>
   bc1d6:	e756      	b.n	bc086 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x1d6>
      else if ((incomingUBX->cls == UBX_CLASS_ACK) && (incomingUBX->payload[0] == requestedClass) && (incomingUBX->payload[1] == requestedID))
   bc1d8:	2b05      	cmp	r3, #5
   bc1da:	d1be      	bne.n	bc15a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc1dc:	68ab      	ldr	r3, [r5, #8]
   bc1de:	781a      	ldrb	r2, [r3, #0]
   bc1e0:	454a      	cmp	r2, r9
   bc1e2:	d1ba      	bne.n	bc15a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc1e4:	785b      	ldrb	r3, [r3, #1]
   bc1e6:	4553      	cmp	r3, sl
   bc1e8:	d1b7      	bne.n	bc15a <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2aa>
   bc1ea:	e7b4      	b.n	bc156 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x2a6>
   bc1ec:	000c71dc 	.word	0x000c71dc
   bc1f0:	000c724d 	.word	0x000c724d
   bc1f4:	000c7355 	.word	0x000c7355
   bc1f8:	000c73ac 	.word	0x000c73ac
   bc1fc:	000c73c2 	.word	0x000c73c2
   bc200:	000c7289 	.word	0x000c7289
   bc204:	000c729a 	.word	0x000c729a
   bc208:	000c72a6 	.word	0x000c72a6
   bc20c:	000c72ba 	.word	0x000c72ba
   bc210:	000c72ce 	.word	0x000c72ce
   bc214:	000c72e8 	.word	0x000c72e8
   bc218:	000c7255 	.word	0x000c7255
   bc21c:	000c7214 	.word	0x000c7214
   bc220:	000c7243 	.word	0x000c7243
   bc224:	000c7302 	.word	0x000c7302
   bc228:	000c7313 	.word	0x000c7313
   bc22c:	000c7320 	.word	0x000c7320
   bc230:	000c732d 	.word	0x000c732d
   bc234:	000c7341 	.word	0x000c7341
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc238:	786a      	ldrb	r2, [r5, #1]
   bc23a:	7829      	ldrb	r1, [r5, #0]
    uint16_t startingSpot = incomingUBX->startingSpot;
   bc23c:	f8b5 9006 	ldrh.w	r9, [r5, #6]
    if (checkAutomatic(incomingUBX->cls, incomingUBX->id))
   bc240:	4620      	mov	r0, r4
   bc242:	f7fc fb31 	bl	b88a8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
    if (ignoreThisPayload == false)
   bc246:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
      startingSpot = 0;
   bc24a:	2800      	cmp	r0, #0
   bc24c:	bf18      	it	ne
   bc24e:	f04f 0900 	movne.w	r9, #0
    if (ignoreThisPayload == false)
   bc252:	2b00      	cmp	r3, #0
   bc254:	f47f ae87 	bne.w	bbf66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
      if ((incomingUBX->counter - 4) >= startingSpot)
   bc258:	1ef3      	subs	r3, r6, #3
   bc25a:	454b      	cmp	r3, r9
   bc25c:	f77f ae83 	ble.w	bbf66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
        if (((incomingUBX->counter - 4) - startingSpot) < maximum_payload_size) // If counter = 208, starting spot = 200, we're good to record.
   bc260:	3e04      	subs	r6, #4
   bc262:	eba6 0609 	sub.w	r6, r6, r9
   bc266:	4546      	cmp	r6, r8
   bc268:	da02      	bge.n	bc270 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c0>
          incomingUBX->payload[(incomingUBX->counter - 4) - startingSpot] = incoming; // Store this byte into payload array
   bc26a:	68ab      	ldr	r3, [r5, #8]
   bc26c:	559f      	strb	r7, [r3, r6]
  if (overrun || ((incomingUBX->counter == maximum_payload_size + 6) && (ignoreThisPayload == false)))
   bc26e:	e67a      	b.n	bbf66 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xb6>
          overrun = true;
   bc270:	2301      	movs	r3, #1
   bc272:	e681      	b.n	bbf78 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xc8>
        _debugSerial->print(F("processUBX: counter hit maximum_payload_size + 6!"));
   bc274:	4900      	ldr	r1, [pc, #0]	; (bc278 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0x3c8>)
   bc276:	e68e      	b.n	bbf96 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh+0xe6>
   bc278:	000c737a 	.word	0x000c737a

000bc27c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>:
{
   bc27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc27e:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
{
   bc282:	4604      	mov	r4, r0
   bc284:	4615      	mov	r5, r2
  if ((ubxFileBuffer == NULL) || (fileBufferSize == 0))
   bc286:	b113      	cbz	r3, bc28e <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x12>
   bc288:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   bc28c:	b953      	cbnz	r3, bc2a4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x28>
    if (_printDebug == true)
   bc28e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   bc292:	b128      	cbz	r0, bc2a0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: file buffer not available!"));
   bc294:	490e      	ldr	r1, [pc, #56]	; (bc2d0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x54>)
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc296:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc29a:	f003 fcf8 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    return (false);
   bc29e:	2000      	movs	r0, #0
}
   bc2a0:	b003      	add	sp, #12
   bc2a2:	bd30      	pop	{r4, r5, pc}
   bc2a4:	9101      	str	r1, [sp, #4]
  if (numBytes > fileBufferSpaceAvailable())
   bc2a6:	f7fd ff12 	bl	ba0ce <_ZN14SFE_UBLOX_GNSS24fileBufferSpaceAvailableEv>
   bc2aa:	4285      	cmp	r5, r0
   bc2ac:	9901      	ldr	r1, [sp, #4]
   bc2ae:	d908      	bls.n	bc2c2 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x46>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc2b0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc2b4:	b91b      	cbnz	r3, bc2be <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x42>
   bc2b6:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bc2ba:	2800      	cmp	r0, #0
   bc2bc:	d0f0      	beq.n	bc2a0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
      _debugSerial->println(F("storeFileBytes: insufficient space available! Data will be lost!"));
   bc2be:	4905      	ldr	r1, [pc, #20]	; (bc2d4 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x58>)
   bc2c0:	e7e9      	b.n	bc296 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x1a>
  writeToFileBuffer(theBytes, numBytes);
   bc2c2:	4620      	mov	r0, r4
   bc2c4:	462a      	mov	r2, r5
   bc2c6:	f7fd ff0b 	bl	ba0e0 <_ZN14SFE_UBLOX_GNSS17writeToFileBufferEPht>
  return (true);
   bc2ca:	2001      	movs	r0, #1
   bc2cc:	e7e8      	b.n	bc2a0 <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht+0x24>
   bc2ce:	bf00      	nop
   bc2d0:	000c73da 	.word	0x000c73da
   bc2d4:	000c7405 	.word	0x000c7405

000bc2d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>:
{
   bc2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc2dc:	4604      	mov	r4, r0
   bc2de:	b085      	sub	sp, #20
  if (_outputPort != NULL)
   bc2e0:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
{
   bc2e4:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   bc2e8:	f88d 100f 	strb.w	r1, [sp, #15]
   bc2ec:	4615      	mov	r5, r2
   bc2ee:	461f      	mov	r7, r3
  if (_outputPort != NULL)
   bc2f0:	b118      	cbz	r0, bc2fa <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x22>
    _outputPort->write(incoming); // Echo this byte to the serial port
   bc2f2:	6803      	ldr	r3, [r0, #0]
   bc2f4:	b2c9      	uxtb	r1, r1
   bc2f6:	689b      	ldr	r3, [r3, #8]
   bc2f8:	4798      	blx	r3
  if ((currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE) || (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA))
   bc2fa:	7823      	ldrb	r3, [r4, #0]
   bc2fc:	2b01      	cmp	r3, #1
   bc2fe:	d80e      	bhi.n	bc31e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc300:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc304:	2bb5      	cmp	r3, #181	; 0xb5
   bc306:	d12e      	bne.n	bc366 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x8e>
      ubxFrameCounter = 0;
   bc308:	2300      	movs	r3, #0
   bc30a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc30e:	2202      	movs	r2, #2
      packetBuf.counter = 0;
   bc310:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc314:	f44f 7300 	mov.w	r3, #512	; 0x200
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_UBX;
   bc318:	7022      	strb	r2, [r4, #0]
      ignoreThisPayload = false; // We should not ignore this payload - yet
   bc31a:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
  if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_UBX)
   bc31e:	7826      	ldrb	r6, [r4, #0]
   bc320:	2e02      	cmp	r6, #2
   bc322:	f040 81d5 	bne.w	bc6d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f8>
    if ((ubxFrameCounter == 0) && (incoming != UBX_SYNCH_1))      // ISO 'μ'
   bc326:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc32a:	bb5b      	cbnz	r3, bc384 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xac>
   bc32c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc330:	2bb5      	cmp	r3, #181	; 0xb5
   bc332:	d001      	beq.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE;             // Something went wrong. Reset.
   bc334:	2300      	movs	r3, #0
   bc336:	7023      	strb	r3, [r4, #0]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc338:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc33c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc340:	f8cd 8000 	str.w	r8, [sp]
    if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETACK)
   bc344:	2b01      	cmp	r3, #1
   bc346:	f040 81a3 	bne.w	bc690 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3b8>
      processUBX(incoming, &packetAck, requestedClass, requestedID);
   bc34a:	463b      	mov	r3, r7
   bc34c:	f504 7286 	add.w	r2, r4, #268	; 0x10c
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc350:	4620      	mov	r0, r4
   bc352:	f7ff fdad 	bl	bbeb0 <_ZN14SFE_UBLOX_GNSS10processUBXEhP9ubxPackethh>
    ubxFrameCounter++;
   bc356:	f8b4 3158 	ldrh.w	r3, [r4, #344]	; 0x158
   bc35a:	3301      	adds	r3, #1
   bc35c:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
}
   bc360:	b005      	add	sp, #20
   bc362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (incoming == '$')
   bc366:	2b24      	cmp	r3, #36	; 0x24
   bc368:	d105      	bne.n	bc376 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9e>
      nmeaByteCounter = 0; // Reset the NMEA byte counter
   bc36a:	2300      	movs	r3, #0
   bc36c:	f884 315c 	strb.w	r3, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NMEA;
   bc370:	2301      	movs	r3, #1
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc372:	7023      	strb	r3, [r4, #0]
   bc374:	e7d3      	b.n	bc31e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
    else if (incoming == 0xD3) // RTCM frames start with 0xD3
   bc376:	2bd3      	cmp	r3, #211	; 0xd3
   bc378:	d1d1      	bne.n	bc31e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46>
      rtcmFrameCounter = 0;
   bc37a:	2300      	movs	r3, #0
   bc37c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_RTCM;
   bc380:	2303      	movs	r3, #3
   bc382:	e7f6      	b.n	bc372 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x9a>
    else if ((ubxFrameCounter == 1) && (incoming != UBX_SYNCH_2)) // ASCII 'b'
   bc384:	2b01      	cmp	r3, #1
   bc386:	d103      	bne.n	bc390 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xb8>
   bc388:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc38c:	2b62      	cmp	r3, #98	; 0x62
   bc38e:	e7d0      	b.n	bc332 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5a>
    else if (ubxFrameCounter == 2) // Class
   bc390:	2b02      	cmp	r3, #2
   bc392:	d10e      	bne.n	bc3b2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0xda>
      packetBuf.cls = incoming; // (Duplication)
   bc394:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc398:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
      rollingChecksumA = 0;     // Reset our rolling checksums here (not when we receive the 0xB5)
   bc39c:	2200      	movs	r2, #0
   bc39e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
      packetBuf.counter = 0;                                   // Reset the packetBuf.counter (again)
   bc3a2:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
      packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // Reset the packet validity (redundant?)
   bc3a6:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
      packetBuf.startingSpot = incomingUBX->startingSpot;      // Copy the startingSpot
   bc3aa:	88eb      	ldrh	r3, [r5, #6]
   bc3ac:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
   bc3b0:	e7c2      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 3) // ID
   bc3b2:	2b03      	cmp	r3, #3
   bc3b4:	f040 80b7 	bne.w	bc526 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x24e>
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc3b8:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
      packetBuf.id = incoming; // (Duplication)
   bc3bc:	f89d 600f 	ldrb.w	r6, [sp, #15]
   bc3c0:	f884 611d 	strb.w	r6, [r4, #285]	; 0x11d
      if (packetBuf.cls != UBX_CLASS_ACK)
   bc3c4:	2905      	cmp	r1, #5
   bc3c6:	d0b7      	beq.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if ((packetBuf.cls == requestedClass) && (packetBuf.id == requestedID))
   bc3c8:	42b9      	cmp	r1, r7
   bc3ca:	d10c      	bne.n	bc3e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
   bc3cc:	4546      	cmp	r6, r8
   bc3ce:	d10a      	bne.n	bc3e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x10e>
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc3d0:	2300      	movs	r3, #0
   bc3d2:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
          incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc3d6:	702f      	strb	r7, [r5, #0]
            incomingUBX->id = packetBuf.id;
   bc3d8:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
   bc3dc:	706b      	strb	r3, [r5, #1]
            incomingUBX->counter = packetBuf.counter; // Copy over the .counter too
   bc3de:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   bc3e2:	80ab      	strh	r3, [r5, #4]
   bc3e4:	e7a8      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        else if (checkAutomatic(packetBuf.cls, packetBuf.id))
   bc3e6:	4632      	mov	r2, r6
   bc3e8:	4620      	mov	r0, r4
   bc3ea:	f7fc fa5d 	bl	b88a8 <_ZN14SFE_UBLOX_GNSS14checkAutomaticEhh>
   bc3ee:	2800      	cmp	r0, #0
   bc3f0:	f000 8095 	beq.w	bc51e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x246>
          uint16_t maxPayload = getMaxPayloadSize(packetBuf.cls, packetBuf.id); // Calculate how much RAM we need
   bc3f4:	4632      	mov	r2, r6
   bc3f6:	4620      	mov	r0, r4
   bc3f8:	f7fc fb58 	bl	b8aac <_ZN14SFE_UBLOX_GNSS17getMaxPayloadSizeEhh>
          if (maxPayload == 0)
   bc3fc:	4606      	mov	r6, r0
   bc3fe:	b9e8      	cbnz	r0, bc43c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc400:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc404:	b913      	cbnz	r3, bc40c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x134>
   bc406:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc40a:	b1bb      	cbz	r3, bc43c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x164>
              _debugSerial->print(F("process: getMaxPayloadSize returned ZERO!! Class: 0x"));
   bc40c:	49a7      	ldr	r1, [pc, #668]	; (bc6ac <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d4>)
   bc40e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc412:	f003 fc22 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls);
   bc416:	220a      	movs	r2, #10
   bc418:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc41c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc420:	f7fc f954 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc424:	49a2      	ldr	r1, [pc, #648]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc426:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc42a:	f003 fc16 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id);
   bc42e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc432:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc436:	220a      	movs	r2, #10
   bc438:	f7fc f94f 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
          if (payloadAuto != NULL) // Check if memory is already allocated - this should be impossible!
   bc43c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   bc440:	b1a3      	cbz	r3, bc46c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x194>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc442:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc446:	b913      	cbnz	r3, bc44e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x176>
   bc448:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc44c:	b123      	cbz	r3, bc458 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x180>
              _debugSerial->println(F("process: memory is already allocated for payloadAuto! Deleting..."));
   bc44e:	4999      	ldr	r1, [pc, #612]	; (bc6b4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3dc>)
   bc450:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc454:	f003 fc1b 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
            delete[] payloadAuto; // Created with new[]
   bc458:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   bc45c:	b108      	cbz	r0, bc462 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x18a>
   bc45e:	f7f7 fe1e 	bl	b409e <_ZdaPv>
            payloadAuto = NULL;   // Redundant?
   bc462:	2300      	movs	r3, #0
   bc464:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
            packetAuto.payload = payloadAuto;
   bc468:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          payloadAuto = new uint8_t[maxPayload]; // Allocate RAM for payloadAuto
   bc46c:	4630      	mov	r0, r6
   bc46e:	f7f7 fe14 	bl	b409a <_Znaj>
   bc472:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc476:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
          packetAuto.payload = payloadAuto;
   bc47a:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
          if (payloadAuto == NULL) // Check if the alloc failed
   bc47e:	bb38      	cbnz	r0, bc4d0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1f8>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc480:	b913      	cbnz	r3, bc488 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1b0>
   bc482:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc486:	b1e3      	cbz	r3, bc4c2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x1ea>
              _debugSerial->print(F("process: memory allocation failed for \"automatic\" message: Class: 0x"));
   bc488:	498b      	ldr	r1, [pc, #556]	; (bc6b8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e0>)
   bc48a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc48e:	f003 fbe4 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc492:	2210      	movs	r2, #16
   bc494:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc498:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc49c:	f7fc f916 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc4a0:	4983      	ldr	r1, [pc, #524]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc4a2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4a6:	f003 fbd8 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc4aa:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc4ae:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4b2:	2210      	movs	r2, #16
   bc4b4:	f7fc f911 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
              _debugSerial->println(F("process: \"automatic\" message could overwrite data"));
   bc4b8:	4980      	ldr	r1, [pc, #512]	; (bc6bc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e4>)
   bc4ba:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4be:	f003 fbe6 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETCFG;
   bc4c2:	2300      	movs	r3, #0
   bc4c4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
            incomingUBX->cls = packetBuf.cls; // Copy the class and ID into incomingUBX (usually packetCfg)
   bc4c8:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   bc4cc:	702b      	strb	r3, [r5, #0]
   bc4ce:	e783      	b.n	bc3d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x100>
            activePacketBuffer = SFE_UBLOX_PACKET_PACKETAUTO;
   bc4d0:	2203      	movs	r2, #3
   bc4d2:	f884 214d 	strb.w	r2, [r4, #333]	; 0x14d
            packetAuto.cls = packetBuf.cls; // Copy the class and ID into packetAuto
   bc4d6:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
   bc4da:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
            packetAuto.counter = packetBuf.counter;           // Copy over the .counter too
   bc4de:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   bc4e2:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
            if (_printDebug == true)
   bc4e6:	2b00      	cmp	r3, #0
   bc4e8:	f43f af26 	beq.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
              _debugSerial->print(F("process: incoming \"automatic\" message: Class: 0x"));
   bc4ec:	4974      	ldr	r1, [pc, #464]	; (bc6c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3e8>)
   bc4ee:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4f2:	f003 fbb2 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->print(packetBuf.cls, HEX);
   bc4f6:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc4fa:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc4fe:	2210      	movs	r2, #16
   bc500:	f7fc f8e4 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
              _debugSerial->print(F(" ID: 0x"));
   bc504:	496a      	ldr	r1, [pc, #424]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc506:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc50a:	f003 fba6 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->println(packetBuf.id, HEX);
   bc50e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc512:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc516:	2210      	movs	r2, #16
   bc518:	f7fc f8df 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bc51c:	e70c      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          ignoreThisPayload = true;
   bc51e:	2301      	movs	r3, #1
   bc520:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
   bc524:	e708      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 4) // Length LSB
   bc526:	2b04      	cmp	r3, #4
   bc528:	d104      	bne.n	bc534 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x25c>
      packetBuf.len = incoming; // (Duplication)
   bc52a:	f89d 300f 	ldrb.w	r3, [sp, #15]
      packetBuf.len |= incoming << 8; // (Duplication)
   bc52e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
   bc532:	e701      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 5) // Length MSB
   bc534:	2b05      	cmp	r3, #5
   bc536:	d106      	bne.n	bc546 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x26e>
      packetBuf.len |= incoming << 8; // (Duplication)
   bc538:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc53c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   bc544:	e7f3      	b.n	bc52e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x256>
    else if (ubxFrameCounter == 6) // This should be the first byte of the payload unless .len is zero
   bc546:	2b06      	cmp	r3, #6
   bc548:	d12b      	bne.n	bc5a2 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2ca>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc54a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc54e:	bb13      	cbnz	r3, bc596 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2be>
        if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc550:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc554:	b913      	cbnz	r3, bc55c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x284>
   bc556:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc55a:	b1bb      	cbz	r3, bc58c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2b4>
          _debugSerial->print(F("process: ZERO LENGTH packet received: Class: 0x"));
   bc55c:	4959      	ldr	r1, [pc, #356]	; (bc6c4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3ec>)
   bc55e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc562:	f003 fb7a 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(packetBuf.cls, HEX);
   bc566:	2210      	movs	r2, #16
   bc568:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc56c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc570:	f7fc f8ac 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
          _debugSerial->print(F(" ID: 0x"));
   bc574:	494e      	ldr	r1, [pc, #312]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc576:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc57a:	f003 fb6e 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->println(packetBuf.id, HEX);
   bc57e:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
   bc582:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc586:	2210      	movs	r2, #16
   bc588:	f7fc f8a7 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
        packetBuf.checksumA = incoming;
   bc58c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc590:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bc594:	e6d0      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        packetBuf.payload[0] = incoming;
   bc596:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc59a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc59e:	701a      	strb	r2, [r3, #0]
   bc5a0:	e6ca      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc5a2:	2b07      	cmp	r3, #7
    if (incoming == UBX_SYNCH_1) // UBX binary frames start with 0xB5, aka μ
   bc5a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    else if (ubxFrameCounter == 7) // This should be the second byte of the payload unless .len is zero or one
   bc5a8:	f47f aec6 	bne.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      if (packetBuf.len == 0) // Check if length is zero (hopefully this is impossible!)
   bc5ac:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   bc5b0:	bb9b      	cbnz	r3, bc61a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x342>
        packetBuf.checksumB = incoming;
   bc5b2:	f884 2129 	strb.w	r2, [r4, #297]	; 0x129
      if ((activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF) // If we are not already processing a data packet
   bc5b6:	f894 314d 	ldrb.w	r3, [r4, #333]	; 0x14d
   bc5ba:	2b02      	cmp	r3, #2
   bc5bc:	f47f aebc 	bne.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.cls == UBX_CLASS_ACK)                // and if this is an ACK/NACK
   bc5c0:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
   bc5c4:	2905      	cmp	r1, #5
   bc5c6:	f47f aeb7 	bne.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[0] == requestedClass)        // and if the class matches
   bc5ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc5ce:	781a      	ldrb	r2, [r3, #0]
   bc5d0:	42ba      	cmp	r2, r7
   bc5d2:	f47f aeb1 	bne.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
          && (packetBuf.payload[1] == requestedID))          // and if the ID matches
   bc5d6:	785a      	ldrb	r2, [r3, #1]
   bc5d8:	4542      	cmp	r2, r8
   bc5da:	f47f aead 	bne.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
        if (packetBuf.len == 2) // Check if .len is 2
   bc5de:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   bc5e2:	2a02      	cmp	r2, #2
   bc5e4:	d121      	bne.n	bc62a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x352>
          packetAck.cls = packetBuf.cls;
   bc5e6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
          packetAck.len = packetBuf.len;
   bc5ea:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
          packetAck.id = packetBuf.id;
   bc5ee:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
          packetAck.counter = packetBuf.counter;
   bc5f2:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
   bc5f6:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
          activePacketBuffer = SFE_UBLOX_PACKET_PACKETACK;
   bc5fa:	2001      	movs	r0, #1
   bc5fc:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
          packetAck.id = packetBuf.id;
   bc600:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
          packetAck.payload[0] = packetBuf.payload[0];
   bc604:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   bc608:	781b      	ldrb	r3, [r3, #0]
   bc60a:	7013      	strb	r3, [r2, #0]
          packetAck.payload[1] = packetBuf.payload[1];
   bc60c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   bc610:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   bc614:	7852      	ldrb	r2, [r2, #1]
   bc616:	705a      	strb	r2, [r3, #1]
   bc618:	e68e      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
      else if (packetBuf.len == 1) // Check if length is one
   bc61a:	2b01      	cmp	r3, #1
        packetBuf.payload[1] = incoming;
   bc61c:	bf16      	itet	ne
   bc61e:	f8d4 3124 	ldrne.w	r3, [r4, #292]	; 0x124
        packetBuf.checksumA = incoming;
   bc622:	f884 2128 	strbeq.w	r2, [r4, #296]	; 0x128
        packetBuf.payload[1] = incoming;
   bc626:	705a      	strbne	r2, [r3, #1]
   bc628:	e7c5      	b.n	bc5b6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x2de>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc62a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc62e:	b923      	cbnz	r3, bc63a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x362>
   bc630:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc634:	2b00      	cmp	r3, #0
   bc636:	f43f ae7f 	beq.w	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
            _debugSerial->print(F("process: ACK received with .len != 2: Class: 0x"));
   bc63a:	4923      	ldr	r1, [pc, #140]	; (bc6c8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f0>)
   bc63c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc640:	f003 fb0b 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[0], HEX);
   bc644:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc648:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc64c:	7819      	ldrb	r1, [r3, #0]
   bc64e:	2210      	movs	r2, #16
   bc650:	f7fc f83c 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" ID: 0x"));
   bc654:	4916      	ldr	r1, [pc, #88]	; (bc6b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3d8>)
   bc656:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc65a:	f003 fafe 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->print(packetBuf.payload[1], HEX);
   bc65e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   bc662:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc666:	7859      	ldrb	r1, [r3, #1]
   bc668:	2210      	movs	r2, #16
   bc66a:	f7fc f82f 	bl	b86cc <_ZN5Print5printIhLi0EEEjT_i.isra.0>
            _debugSerial->print(F(" len: "));
   bc66e:	4917      	ldr	r1, [pc, #92]	; (bc6cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3f4>)
   bc670:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc674:	f003 faf1 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
            _debugSerial->println(packetBuf.len);
   bc678:	f8d4 60d4 	ldr.w	r6, [r4, #212]	; 0xd4
   bc67c:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
   bc680:	220a      	movs	r2, #10
   bc682:	4630      	mov	r0, r6
   bc684:	f003 fb05 	bl	bfc92 <_ZN5Print11printNumberEmh>
        n += println();
   bc688:	4630      	mov	r0, r6
   bc68a:	f003 faea 	bl	bfc62 <_ZN5Print7printlnEv>
        return n;
   bc68e:	e653      	b.n	bc338 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x60>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETCFG)
   bc690:	b913      	cbnz	r3, bc698 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x3c0>
      processUBX(incoming, incomingUBX, requestedClass, requestedID);
   bc692:	463b      	mov	r3, r7
   bc694:	462a      	mov	r2, r5
   bc696:	e65b      	b.n	bc350 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
    else if (activePacketBuffer == SFE_UBLOX_PACKET_PACKETBUF)
   bc698:	2b02      	cmp	r3, #2
      processUBX(incoming, &packetBuf, requestedClass, requestedID);
   bc69a:	bf08      	it	eq
   bc69c:	f504 728e 	addeq.w	r2, r4, #284	; 0x11c
   bc6a0:	463b      	mov	r3, r7
      processUBX(incoming, &packetAuto, requestedClass, requestedID);
   bc6a2:	bf18      	it	ne
   bc6a4:	f504 729e 	addne.w	r2, r4, #316	; 0x13c
   bc6a8:	e652      	b.n	bc350 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x78>
   bc6aa:	bf00      	nop
   bc6ac:	000c7446 	.word	0x000c7446
   bc6b0:	000c724d 	.word	0x000c724d
   bc6b4:	000c747b 	.word	0x000c747b
   bc6b8:	000c74bd 	.word	0x000c74bd
   bc6bc:	000c7502 	.word	0x000c7502
   bc6c0:	000c7534 	.word	0x000c7534
   bc6c4:	000c7565 	.word	0x000c7565
   bc6c8:	000c7595 	.word	0x000c7595
   bc6cc:	000c75c5 	.word	0x000c75c5
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NMEA) // Process incoming NMEA mesages. Selectively log if desired.
   bc6d0:	2e01      	cmp	r6, #1
   bc6d2:	f040 8188 	bne.w	bc9e6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x70e>
    if ((nmeaByteCounter == 0) && (incoming != '$'))
   bc6d6:	f994 315c 	ldrsb.w	r3, [r4, #348]	; 0x15c
   bc6da:	2b00      	cmp	r3, #0
   bc6dc:	d146      	bne.n	bc76c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x494>
   bc6de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc6e2:	2a24      	cmp	r2, #36	; 0x24
   bc6e4:	f000 8086 	beq.w	bc7f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset. (Almost certainly redundant!)
   bc6e8:	2300      	movs	r3, #0
   bc6ea:	7023      	strb	r3, [r4, #0]
    if (incoming == '*')
   bc6ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
   bc6f0:	2b2a      	cmp	r3, #42	; 0x2a
      nmeaByteCounter = -5; // We are expecting * plus two checksum bytes plus CR and LF
   bc6f2:	bf04      	itt	eq
   bc6f4:	23fb      	moveq	r3, #251	; 0xfb
   bc6f6:	f884 315c 	strbeq.w	r3, [r4, #348]	; 0x15c
    nmeaByteCounter++; // Increment the byte counter
   bc6fa:	f894 515c 	ldrb.w	r5, [r4, #348]	; 0x15c
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc6fe:	f994 315d 	ldrsb.w	r3, [r4, #349]	; 0x15d
    nmeaByteCounter++; // Increment the byte counter
   bc702:	3501      	adds	r5, #1
   bc704:	b26d      	sxtb	r5, r5
    if (nmeaByteCounter == maxNMEAByteCount)          // Check if we have processed too many bytes
   bc706:	42ab      	cmp	r3, r5
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc708:	bf08      	it	eq
   bc70a:	2300      	moveq	r3, #0
    nmeaByteCounter++; // Increment the byte counter
   bc70c:	f884 515c 	strb.w	r5, [r4, #348]	; 0x15c
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // Something went wrong. Reset.
   bc710:	bf08      	it	eq
   bc712:	7023      	strbeq	r3, [r4, #0]
    if (nmeaByteCounter == 0) // Check if we are done
   bc714:	2d00      	cmp	r5, #0
   bc716:	f47f ae23 	bne.w	bc360 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
      if (isThisNMEAauto())
   bc71a:	4620      	mov	r0, r4
   bc71c:	f7fc fc20 	bl	b8f60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc720:	2800      	cmp	r0, #0
   bc722:	f000 8120 	beq.w	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
        uint8_t *workingLengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc726:	4620      	mov	r0, r4
   bc728:	f7fc fd7c 	bl	b9224 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc72c:	4607      	mov	r7, r0
        uint8_t *workingNMEAPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc72e:	4620      	mov	r0, r4
   bc730:	f7fc fdfa 	bl	b9328 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc734:	4680      	mov	r8, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc736:	4620      	mov	r0, r4
   bc738:	f7fd f88a 	bl	b9850 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        uint8_t nmeaChecksum = 0;
   bc73c:	462b      	mov	r3, r5
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc73e:	4681      	mov	r9, r0
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc740:	1e41      	subs	r1, r0, #1
   bc742:	428e      	cmp	r6, r1
   bc744:	f280 80b4 	bge.w	bc8b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc748:	783a      	ldrb	r2, [r7, #0]
   bc74a:	3a04      	subs	r2, #4
   bc74c:	4296      	cmp	r6, r2
   bc74e:	f280 80af 	bge.w	bc8b0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5d8>
   bc752:	2d2a      	cmp	r5, #42	; 0x2a
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc754:	f818 2006 	ldrb.w	r2, [r8, r6]
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc758:	f000 80ad 	beq.w	bc8b6 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5de>
          if (thisChar != '*')                         // Ex-or the char into the checksum - but not if it is the '*'
   bc75c:	2a2a      	cmp	r2, #42	; 0x2a
          charsChecked++; // Increment the counter
   bc75e:	f106 0601 	add.w	r6, r6, #1
            nmeaChecksum ^= thisChar;
   bc762:	bf18      	it	ne
   bc764:	4053      	eorne	r3, r2
          charsChecked++; // Increment the counter
   bc766:	b2f6      	uxtb	r6, r6
          thisChar = *(workingNMEAPtr + charsChecked); // Get a char from the working copy
   bc768:	4615      	mov	r5, r2
        while ((charsChecked < (nmeaMaxLength - 1)) && (charsChecked < ((*workingLengthPtr) - 4)) && (thisChar != '*'))
   bc76a:	e7ea      	b.n	bc742 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x46a>
    else if ((nmeaByteCounter == 1) && (incoming != 'G'))
   bc76c:	2b01      	cmp	r3, #1
   bc76e:	d103      	bne.n	bc778 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a0>
   bc770:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc774:	2a47      	cmp	r2, #71	; 0x47
   bc776:	e7b5      	b.n	bc6e4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x40c>
    else if ((nmeaByteCounter >= 0) && (nmeaByteCounter <= 5))
   bc778:	b2da      	uxtb	r2, r3
   bc77a:	2a05      	cmp	r2, #5
   bc77c:	d93a      	bls.n	bc7f4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x51c>
      if (isThisNMEAauto())
   bc77e:	4620      	mov	r0, r4
   bc780:	f7fc fbee 	bl	b8f60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc784:	b308      	cbz	r0, bc7ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc786:	4620      	mov	r0, r4
   bc788:	f7fc fd4c 	bl	b9224 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc78c:	4605      	mov	r5, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc78e:	4620      	mov	r0, r4
   bc790:	f7fc fdca 	bl	b9328 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc794:	4607      	mov	r7, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc796:	4620      	mov	r0, r4
   bc798:	f7fd f85a 	bl	b9850 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        if (*lengthPtr < nmeaMaxLength)
   bc79c:	782b      	ldrb	r3, [r5, #0]
   bc79e:	4283      	cmp	r3, r0
   bc7a0:	d213      	bcs.n	bc7ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
          *(nmeaPtr + *lengthPtr) = incoming; // Store the character
   bc7a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bc7a6:	54fa      	strb	r2, [r7, r3]
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc7a8:	782b      	ldrb	r3, [r5, #0]
   bc7aa:	3301      	adds	r3, #1
   bc7ac:	b2db      	uxtb	r3, r3
          if (*lengthPtr == nmeaMaxLength)
   bc7ae:	4283      	cmp	r3, r0
          *lengthPtr = *lengthPtr + 1;        // Increment the length
   bc7b0:	702b      	strb	r3, [r5, #0]
          if (*lengthPtr == nmeaMaxLength)
   bc7b2:	d10a      	bne.n	bc7ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc7b4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc7b8:	b913      	cbnz	r3, bc7c0 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4e8>
   bc7ba:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc7be:	b123      	cbz	r3, bc7ca <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4f2>
              _debugSerial->println(F("process: NMEA buffer is full!"));
   bc7c0:	498f      	ldr	r1, [pc, #572]	; (bca00 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x728>)
   bc7c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc7c6:	f003 fa62 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (logThisNMEA())
   bc7ca:	4620      	mov	r0, r4
   bc7cc:	f7fc f9c8 	bl	b8b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc7d0:	b128      	cbz	r0, bc7de <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x506>
        storeFileBytes(&incoming, 1); // Add incoming to the file buffer
   bc7d2:	2201      	movs	r2, #1
   bc7d4:	f10d 010f 	add.w	r1, sp, #15
   bc7d8:	4620      	mov	r0, r4
   bc7da:	f7ff fd4f 	bl	bc27c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc7de:	4620      	mov	r0, r4
   bc7e0:	f7fc faee 	bl	b8dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc7e4:	2800      	cmp	r0, #0
   bc7e6:	d081      	beq.n	bc6ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
        processNMEA(incoming); // Pass incoming to processNMEA
   bc7e8:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc7ec:	4620      	mov	r0, r4
   bc7ee:	f7fc fbaf 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
   bc7f2:	e77b      	b.n	bc6ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      nmeaAddressField[nmeaByteCounter] = incoming; // Store the start character and NMEA address field
   bc7f4:	18e2      	adds	r2, r4, r3
   bc7f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc7fa:	f882 115e 	strb.w	r1, [r2, #350]	; 0x15e
    if (nmeaByteCounter == 5)
   bc7fe:	2b05      	cmp	r3, #5
   bc800:	f47f af74 	bne.w	bc6ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
      if (!_signsOfLife) // If _signsOfLife is not already true, set _signsOfLife to true if the NMEA header is valid
   bc804:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   bc808:	b923      	cbnz	r3, bc814 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x53c>
        _signsOfLife = isNMEAHeaderValid();
   bc80a:	4620      	mov	r0, r4
   bc80c:	f7fc fa70 	bl	b8cf0 <_ZN14SFE_UBLOX_GNSS17isNMEAHeaderValidEv>
   bc810:	f884 0177 	strb.w	r0, [r4, #375]	; 0x177
      if (isThisNMEAauto())
   bc814:	4620      	mov	r0, r4
   bc816:	f7fc fba3 	bl	b8f60 <_ZN14SFE_UBLOX_GNSS14isThisNMEAautoEv>
   bc81a:	b1b8      	cbz	r0, bc84c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x574>
        uint8_t *lengthPtr = getNMEAWorkingLengthPtr(); // Get a pointer to the working copy length
   bc81c:	4620      	mov	r0, r4
   bc81e:	f7fc fd01 	bl	b9224 <_ZN14SFE_UBLOX_GNSS23getNMEAWorkingLengthPtrEv>
   bc822:	4607      	mov	r7, r0
        uint8_t *nmeaPtr = getNMEAWorkingNMEAPtr();     // Get a pointer to the working copy NMEA data
   bc824:	4620      	mov	r0, r4
   bc826:	f7fc fd7f 	bl	b9328 <_ZN14SFE_UBLOX_GNSS21getNMEAWorkingNMEAPtrEv>
   bc82a:	4605      	mov	r5, r0
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc82c:	4620      	mov	r0, r4
   bc82e:	f7fd f80f 	bl	b9850 <_ZN14SFE_UBLOX_GNSS16getNMEAMaxLengthEv>
        *lengthPtr = 6;                           // Set the working copy length
   bc832:	2306      	movs	r3, #6
        uint8_t nmeaMaxLength = getNMEAMaxLength();
   bc834:	4602      	mov	r2, r0
        *lengthPtr = 6;                           // Set the working copy length
   bc836:	703b      	strb	r3, [r7, #0]
        memset(nmeaPtr, 0, nmeaMaxLength);        // Clear the working copy
   bc838:	2100      	movs	r1, #0
   bc83a:	4628      	mov	r0, r5
   bc83c:	f007 fe9c 	bl	c4578 <memset>
        memcpy(nmeaPtr, &nmeaAddressField[0], 6); // Copy the start character and address field into the working copy
   bc840:	f8d4 315e 	ldr.w	r3, [r4, #350]	; 0x15e
   bc844:	602b      	str	r3, [r5, #0]
   bc846:	f8b4 3162 	ldrh.w	r3, [r4, #354]	; 0x162
   bc84a:	80ab      	strh	r3, [r5, #4]
      if (logThisNMEA())
   bc84c:	4620      	mov	r0, r4
   bc84e:	f7fc f987 	bl	b8b60 <_ZN14SFE_UBLOX_GNSS11logThisNMEAEv>
   bc852:	b128      	cbz	r0, bc860 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x588>
        storeFileBytes(&nmeaAddressField[0], 6); // Add start character and address field to the file buffer
   bc854:	2206      	movs	r2, #6
   bc856:	f504 71af 	add.w	r1, r4, #350	; 0x15e
   bc85a:	4620      	mov	r0, r4
   bc85c:	f7ff fd0e 	bl	bc27c <_ZN14SFE_UBLOX_GNSS14storeFileBytesEPht>
      if (processThisNMEA())
   bc860:	4620      	mov	r0, r4
   bc862:	f7fc faad 	bl	b8dc0 <_ZN14SFE_UBLOX_GNSS15processThisNMEAEv>
   bc866:	b1e8      	cbz	r0, bc8a4 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x5cc>
        processNMEA(nmeaAddressField[0]); // Process the start character and address field
   bc868:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
   bc86c:	4620      	mov	r0, r4
   bc86e:	f7fc fb6f 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[1]);
   bc872:	f894 115f 	ldrb.w	r1, [r4, #351]	; 0x15f
   bc876:	4620      	mov	r0, r4
   bc878:	f7fc fb6a 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[2]);
   bc87c:	f894 1160 	ldrb.w	r1, [r4, #352]	; 0x160
   bc880:	4620      	mov	r0, r4
   bc882:	f7fc fb65 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[3]);
   bc886:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
   bc88a:	4620      	mov	r0, r4
   bc88c:	f7fc fb60 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[4]);
   bc890:	f894 1162 	ldrb.w	r1, [r4, #354]	; 0x162
   bc894:	4620      	mov	r0, r4
   bc896:	f7fc fb5b 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
        processNMEA(nmeaAddressField[5]);
   bc89a:	f894 1163 	ldrb.w	r1, [r4, #355]	; 0x163
   bc89e:	4620      	mov	r0, r4
   bc8a0:	f7fc fb56 	bl	b8f50 <_ZN14SFE_UBLOX_GNSS11processNMEAEc>
    if ((nmeaByteCounter > 5) || (nmeaByteCounter < 0)) // Should we add incoming to the file buffer and/or pass it to processNMEA?
   bc8a4:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
   bc8a8:	2b05      	cmp	r3, #5
   bc8aa:	f67f af1f 	bls.w	bc6ec <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x414>
   bc8ae:	e766      	b.n	bc77e <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x4a6>
        if (thisChar == '*') // Make sure we found the *
   bc8b0:	2d2a      	cmp	r5, #42	; 0x2a
   bc8b2:	f040 808b 	bne.w	bc9cc <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6f4>
          uint8_t expectedChecksum1 = (nmeaChecksum >> 4) + '0';
   bc8b6:	091a      	lsrs	r2, r3, #4
   bc8b8:	f102 0530 	add.w	r5, r2, #48	; 0x30
   bc8bc:	b2ed      	uxtb	r5, r5
          if (expectedChecksum1 >= ':') // Handle Hex correctly
   bc8be:	2d39      	cmp	r5, #57	; 0x39
          uint8_t expectedChecksum2 = (nmeaChecksum & 0x0F) + '0';
   bc8c0:	f003 030f 	and.w	r3, r3, #15
   bc8c4:	f103 0a30 	add.w	sl, r3, #48	; 0x30
            expectedChecksum1 += 'A' - ':';
   bc8c8:	bf84      	itt	hi
   bc8ca:	3237      	addhi	r2, #55	; 0x37
   bc8cc:	b2d5      	uxtbhi	r5, r2
          if (expectedChecksum2 >= ':') // Handle Hex correctly
   bc8ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
            expectedChecksum2 += 'A' - ':';
   bc8d2:	bf88      	it	hi
   bc8d4:	f103 0a37 	addhi.w	sl, r3, #55	; 0x37
          if ((expectedChecksum1 == *(workingNMEAPtr + charsChecked)) && (expectedChecksum2 == *(workingNMEAPtr + charsChecked + 1)))
   bc8d8:	f818 3006 	ldrb.w	r3, [r8, r6]
   bc8dc:	42ab      	cmp	r3, r5
   bc8de:	eb08 0b06 	add.w	fp, r8, r6
   bc8e2:	d143      	bne.n	bc96c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
   bc8e4:	f89b 3001 	ldrb.w	r3, [fp, #1]
   bc8e8:	4553      	cmp	r3, sl
   bc8ea:	d13f      	bne.n	bc96c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x694>
            uint8_t *completeLengthPtr = getNMEACompleteLengthPtr();    // Get a pointer to the complete copy length
   bc8ec:	4620      	mov	r0, r4
   bc8ee:	f7fc fd9d 	bl	b942c <_ZN14SFE_UBLOX_GNSS24getNMEACompleteLengthPtrEv>
   bc8f2:	4605      	mov	r5, r0
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc8f4:	4620      	mov	r0, r4
   bc8f6:	f7fc fe1d 	bl	b9534 <_ZN14SFE_UBLOX_GNSS22getNMEACompleteNMEAPtrEv>
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc8fa:	464a      	mov	r2, r9
            uint8_t *completeNMEAPtr = getNMEACompleteNMEAPtr();        // Get a pointer to the complete copy NMEA data
   bc8fc:	4606      	mov	r6, r0
            memset(completeNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous complete copy
   bc8fe:	2100      	movs	r1, #0
   bc900:	f007 fe3a 	bl	c4578 <memset>
            memcpy(completeNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the complete copy
   bc904:	783a      	ldrb	r2, [r7, #0]
   bc906:	4641      	mov	r1, r8
   bc908:	4630      	mov	r0, r6
   bc90a:	f007 fe0d 	bl	c4528 <memcpy>
            *completeLengthPtr = *workingLengthPtr;                     // Update the length
   bc90e:	783b      	ldrb	r3, [r7, #0]
   bc910:	702b      	strb	r3, [r5, #0]
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc912:	4620      	mov	r0, r4
   bc914:	f7fd f80e 	bl	b9934 <_ZN14SFE_UBLOX_GNSS15getNMEAFlagsPtrEv>
            nmeaAutomaticFlags flagsCopy = *flagsPtr;
   bc918:	7805      	ldrb	r5, [r0, #0]
            *flagsPtr = flagsCopy;                      // Update the flags
   bc91a:	f025 0503 	bic.w	r5, r5, #3
   bc91e:	f045 0a01 	orr.w	sl, r5, #1
            nmeaAutomaticFlags *flagsPtr = getNMEAFlagsPtr();           // Get a pointer to the flags
   bc922:	4606      	mov	r6, r0
            *flagsPtr = flagsCopy;                      // Update the flags
   bc924:	f880 a000 	strb.w	sl, [r0]
            if (doesThisNMEAHaveCallback()) // Do we need to copy the data into the callback copy?
   bc928:	4620      	mov	r0, r4
   bc92a:	f7fc fba5 	bl	b9078 <_ZN14SFE_UBLOX_GNSS24doesThisNMEAHaveCallbackEv>
   bc92e:	b1d0      	cbz	r0, bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              if (flagsCopy.flags.bits.callbackCopyValid == 0) // Has the callback copy valid flag been cleared (by checkCallbacks)
   bc930:	f01a 0104 	ands.w	r1, sl, #4
   bc934:	d117      	bne.n	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
                uint8_t *callbackLengthPtr = getNMEACallbackLengthPtr();    // Get a pointer to the callback copy length
   bc936:	4620      	mov	r0, r4
   bc938:	9102      	str	r1, [sp, #8]
   bc93a:	f7fc fe7f 	bl	b963c <_ZN14SFE_UBLOX_GNSS24getNMEACallbackLengthPtrEv>
   bc93e:	4683      	mov	fp, r0
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc940:	4620      	mov	r0, r4
   bc942:	f7fc feff 	bl	b9744 <_ZN14SFE_UBLOX_GNSS22getNMEACallbackNMEAPtrEv>
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc946:	9902      	ldr	r1, [sp, #8]
                uint8_t *callbackNMEAPtr = getNMEACallbackNMEAPtr();        // Get a pointer to the callback copy NMEA data
   bc948:	4682      	mov	sl, r0
                memset(callbackNMEAPtr, 0, nmeaMaxLength);                  // Clear the previous callback copy
   bc94a:	464a      	mov	r2, r9
   bc94c:	f007 fe14 	bl	c4578 <memset>
                memcpy(callbackNMEAPtr, workingNMEAPtr, *workingLengthPtr); // Copy the working copy into the callback copy
   bc950:	783a      	ldrb	r2, [r7, #0]
   bc952:	4641      	mov	r1, r8
   bc954:	4650      	mov	r0, sl
   bc956:	f007 fde7 	bl	c4528 <memcpy>
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc95a:	f045 0505 	orr.w	r5, r5, #5
                *callbackLengthPtr = *workingLengthPtr;                     // Update the length
   bc95e:	783b      	ldrb	r3, [r7, #0]
   bc960:	f88b 3000 	strb.w	r3, [fp]
                *flagsPtr = flagsCopy;                                      // Update the flags
   bc964:	7035      	strb	r5, [r6, #0]
      currentSentence = SFE_UBLOX_SENTENCE_TYPE_NONE; // All done!
   bc966:	2300      	movs	r3, #0
   bc968:	7023      	strb	r3, [r4, #0]
   bc96a:	e4f9      	b.n	bc360 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
            if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc96c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc970:	b91b      	cbnz	r3, bc97a <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x6a2>
   bc972:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc976:	2b00      	cmp	r3, #0
   bc978:	d0f5      	beq.n	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
              _debugSerial->print(F("process: NMEA checksum fail (2)! Expected "));
   bc97a:	4922      	ldr	r1, [pc, #136]	; (bca04 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x72c>)
   bc97c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc980:	f003 f96b 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(expectedChecksum1);
   bc984:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc988:	6803      	ldr	r3, [r0, #0]
   bc98a:	4629      	mov	r1, r5
   bc98c:	689b      	ldr	r3, [r3, #8]
   bc98e:	4798      	blx	r3
              _debugSerial->write(expectedChecksum2);
   bc990:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc994:	6803      	ldr	r3, [r0, #0]
   bc996:	4651      	mov	r1, sl
   bc998:	689b      	ldr	r3, [r3, #8]
   bc99a:	4798      	blx	r3
              _debugSerial->print(F(" Got "));
   bc99c:	491a      	ldr	r1, [pc, #104]	; (bca08 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x730>)
   bc99e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9a2:	f003 f95a 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
              _debugSerial->write(*(workingNMEAPtr + charsChecked));
   bc9a6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9aa:	f89b 1000 	ldrb.w	r1, [fp]
   bc9ae:	6803      	ldr	r3, [r0, #0]
   bc9b0:	689b      	ldr	r3, [r3, #8]
   bc9b2:	4798      	blx	r3
              _debugSerial->write(*(workingNMEAPtr + charsChecked + 1));
   bc9b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9b8:	f89b 1001 	ldrb.w	r1, [fp, #1]
   bc9bc:	6803      	ldr	r3, [r0, #0]
   bc9be:	689b      	ldr	r3, [r3, #8]
   bc9c0:	4798      	blx	r3
              _debugSerial->println();
   bc9c2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9c6:	f003 f94c 	bl	bfc62 <_ZN5Print7printlnEv>
   bc9ca:	e7cc      	b.n	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
          if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bc9cc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bc9d0:	b91b      	cbnz	r3, bc9da <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x702>
   bc9d2:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bc9d6:	2b00      	cmp	r3, #0
   bc9d8:	d0c5      	beq.n	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
            _debugSerial->println(F("process: NMEA checksum fail (1)!"));
   bc9da:	490c      	ldr	r1, [pc, #48]	; (bca0c <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x734>)
   bc9dc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bc9e0:	f003 f955 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bc9e4:	e7bf      	b.n	bc966 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x68e>
  else if (currentSentence == SFE_UBLOX_SENTENCE_TYPE_RTCM)
   bc9e6:	2e03      	cmp	r6, #3
   bc9e8:	f47f acba 	bne.w	bc360 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
    currentSentence = processRTCMframe(incoming, &rtcmFrameCounter); // Deal with RTCM bytes
   bc9ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
   bc9f0:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   bc9f4:	4620      	mov	r0, r4
   bc9f6:	f7fd f821 	bl	b9a3c <_ZN14SFE_UBLOX_GNSS16processRTCMframeEhPt>
   bc9fa:	7020      	strb	r0, [r4, #0]
}
   bc9fc:	e4b0      	b.n	bc360 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh+0x88>
   bc9fe:	bf00      	nop
   bca00:	000c75cc 	.word	0x000c75cc
   bca04:	000c75ea 	.word	0x000c75ea
   bca08:	000c7615 	.word	0x000c7615
   bca0c:	000c761b 	.word	0x000c761b

000bca10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>:
{
   bca10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bca14:	4604      	mov	r4, r0
   bca16:	4699      	mov	r9, r3
   bca18:	460f      	mov	r7, r1
   bca1a:	4690      	mov	r8, r2
   bca1c:	f001 f8d2 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastCheck >= i2cPollingWait)
   bca20:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   bca24:	1ac0      	subs	r0, r0, r3
   bca26:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
   bca2a:	4298      	cmp	r0, r3
   bca2c:	f0c0 80a8 	bcc.w	bcb80 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
    _i2cPort->beginTransmission(_gpsI2Caddress);
   bca30:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bca34:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bca38:	f004 ffce 	bl	c19d8 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(0xFD);                               // 0xFD (MSB) and 0xFE (LSB) are the registers that contain number of bytes available
   bca3c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bca40:	21fd      	movs	r1, #253	; 0xfd
   bca42:	f7fb fe53 	bl	b86ec <_ZN7TwoWire5writeEi.isra.0>
    uint8_t i2cError = _i2cPort->endTransmission(false); // Always send a restart command. Do not release the bus. ESP32 supports this.
   bca46:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bca4a:	2100      	movs	r1, #0
   bca4c:	f004 ffcb 	bl	c19e6 <_ZN7TwoWire15endTransmissionEh>
    if (i2cError != 0)
   bca50:	4605      	mov	r5, r0
   bca52:	b1a8      	cbz	r0, bca80 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x70>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca54:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca58:	b933      	cbnz	r3, bca68 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
   bca5a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca5e:	b91b      	cbnz	r3, bca68 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x58>
      return (false); // Sensor did not return 2 bytes
   bca60:	2000      	movs	r0, #0
} // end checkUbloxI2C()
   bca62:	b002      	add	sp, #8
   bca64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _debugSerial->print(F("checkUbloxI2C: I2C error: endTransmission returned "));
   bca68:	4946      	ldr	r1, [pc, #280]	; (bcb84 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x174>)
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bca6a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca6e:	f003 f8f4 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        _debugSerial->println(bytesReturned);
   bca72:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bca76:	220a      	movs	r2, #10
   bca78:	4629      	mov	r1, r5
   bca7a:	f7fb fe2e 	bl	b86da <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
   bca7e:	e7ef      	b.n	bca60 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, static_cast<uint8_t>(2));
   bca80:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bca84:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bca88:	2202      	movs	r2, #2
   bca8a:	f004 ffa2 	bl	c19d2 <_ZN7TwoWire11requestFromEhj>
   bca8e:	b2c5      	uxtb	r5, r0
    if (bytesReturned != 2)
   bca90:	2d02      	cmp	r5, #2
   bca92:	d008      	beq.n	bcaa6 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x96>
      if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bca94:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bca98:	b91b      	cbnz	r3, bcaa2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x92>
   bca9a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bca9e:	2b00      	cmp	r3, #0
   bcaa0:	d0de      	beq.n	bca60 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
        _debugSerial->print(F("checkUbloxI2C: I2C error: requestFrom 0xFD returned "));
   bcaa2:	4939      	ldr	r1, [pc, #228]	; (bcb88 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x178>)
   bcaa4:	e7e1      	b.n	bca6a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x5a>
      uint8_t msb = _i2cPort->read();
   bcaa6:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcaaa:	6803      	ldr	r3, [r0, #0]
   bcaac:	695b      	ldr	r3, [r3, #20]
   bcaae:	4798      	blx	r3
   bcab0:	4605      	mov	r5, r0
      uint8_t lsb = _i2cPort->read();
   bcab2:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcab6:	6803      	ldr	r3, [r0, #0]
   bcab8:	695b      	ldr	r3, [r3, #20]
   bcaba:	4798      	blx	r3
      bytesAvailable = (uint16_t)msb << 8 | lsb;
   bcabc:	b2c6      	uxtb	r6, r0
   bcabe:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   bcac2:	b22a      	sxth	r2, r5
   bcac4:	b2ad      	uxth	r5, r5
    if (bytesAvailable == 0)
   bcac6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcaca:	b955      	cbnz	r5, bcae2 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xd2>
      if (_printDebug == true)
   bcacc:	b123      	cbz	r3, bcad8 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xc8>
        _debugSerial->println(F("checkUbloxI2C: OK, zero bytes available"));
   bcace:	492f      	ldr	r1, [pc, #188]	; (bcb8c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x17c>)
   bcad0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcad4:	f003 f8db 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcad8:	f001 f874 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
      lastCheck = millis(); // Put off checking to avoid I2C bus traffic
   bcadc:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
      return (false);
   bcae0:	e7be      	b.n	bca60 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
    if (bytesAvailable & ((uint16_t)1 << 15))
   bcae2:	2a00      	cmp	r2, #0
      bytesAvailable &= ~((uint16_t)1 << 15);
   bcae4:	bfb8      	it	lt
   bcae6:	f3c5 050e 	ubfxlt	r5, r5, #0, #15
    if (bytesAvailable > 100)
   bcaea:	2d64      	cmp	r5, #100	; 0x64
   bcaec:	d936      	bls.n	bcb5c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x14c>
      if (_printDebug == true)
   bcaee:	b17b      	cbz	r3, bcb10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Large packet of "));
   bcaf0:	4927      	ldr	r1, [pc, #156]	; (bcb90 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x180>)
   bcaf2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcaf6:	f003 f8b0 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
   bcafa:	4629      	mov	r1, r5
   bcafc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb00:	220a      	movs	r2, #10
   bcb02:	f003 f8c6 	bl	bfc92 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes received"));
   bcb06:	4923      	ldr	r1, [pc, #140]	; (bcb94 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x184>)
        _debugSerial->println(F(" bytes"));
   bcb08:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb0c:	f003 f8bf 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (bytesAvailable)
   bcb10:	2d00      	cmp	r5, #0
   bcb12:	d035      	beq.n	bcb80 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x170>
      if (bytesToRead > i2cTransactionSize)  // Limit for i2cTransactionSize is 8-bit
   bcb14:	7866      	ldrb	r6, [r4, #1]
      uint8_t bytesReturned = _i2cPort->requestFrom((uint8_t)_gpsI2Caddress, (uint8_t)bytesToRead);
   bcb16:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   bcb1a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb1e:	42ae      	cmp	r6, r5
   bcb20:	bf28      	it	cs
   bcb22:	462e      	movcs	r6, r5
   bcb24:	4632      	mov	r2, r6
   bcb26:	f004 ff54 	bl	c19d2 <_ZN7TwoWire11requestFromEhj>
      if ((uint16_t)bytesReturned == bytesToRead)
   bcb2a:	b2c0      	uxtb	r0, r0
   bcb2c:	4286      	cmp	r6, r0
   bcb2e:	d197      	bne.n	bca60 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x50>
   bcb30:	f04f 0a00 	mov.w	sl, #0
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcb34:	fa1f f38a 	uxth.w	r3, sl
   bcb38:	429e      	cmp	r6, r3
   bcb3a:	d91e      	bls.n	bcb7a <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x16a>
          uint8_t incoming = _i2cPort->read(); // Grab the actual character
   bcb3c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bcb40:	6803      	ldr	r3, [r0, #0]
   bcb42:	695b      	ldr	r3, [r3, #20]
   bcb44:	4798      	blx	r3
          process(incoming, incomingUBX, requestedClass, requestedID); // Process this valid character
   bcb46:	f8cd 9000 	str.w	r9, [sp]
   bcb4a:	b2c1      	uxtb	r1, r0
   bcb4c:	4643      	mov	r3, r8
   bcb4e:	463a      	mov	r2, r7
   bcb50:	4620      	mov	r0, r4
   bcb52:	f7ff fbc1 	bl	bc2d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
        for (uint16_t x = 0; x < bytesToRead; x++)
   bcb56:	f10a 0a01 	add.w	sl, sl, #1
   bcb5a:	e7eb      	b.n	bcb34 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x124>
      if (_printDebug == true)
   bcb5c:	2b00      	cmp	r3, #0
   bcb5e:	d0d7      	beq.n	bcb10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
        _debugSerial->print(F("checkUbloxI2C: Reading "));
   bcb60:	490d      	ldr	r1, [pc, #52]	; (bcb98 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x188>)
   bcb62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb66:	f003 f878 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
   bcb6a:	4629      	mov	r1, r5
   bcb6c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcb70:	220a      	movs	r2, #10
   bcb72:	f003 f88e 	bl	bfc92 <_ZN5Print11printNumberEmh>
        _debugSerial->println(F(" bytes"));
   bcb76:	4909      	ldr	r1, [pc, #36]	; (bcb9c <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x18c>)
   bcb78:	e7c6      	b.n	bcb08 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0xf8>
      bytesAvailable -= bytesToRead;
   bcb7a:	1bad      	subs	r5, r5, r6
   bcb7c:	b2ad      	uxth	r5, r5
    while (bytesAvailable)
   bcb7e:	e7c7      	b.n	bcb10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x100>
  return (true);
   bcb80:	2001      	movs	r0, #1
   bcb82:	e76e      	b.n	bca62 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh+0x52>
   bcb84:	000c763c 	.word	0x000c763c
   bcb88:	000c7670 	.word	0x000c7670
   bcb8c:	000c76a5 	.word	0x000c76a5
   bcb90:	000c76cd 	.word	0x000c76cd
   bcb94:	000c76ed 	.word	0x000c76ed
   bcb98:	000c76fd 	.word	0x000c76fd
   bcb9c:	000c7715 	.word	0x000c7715

000bcba0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>:
{
   bcba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bcba2:	4604      	mov	r4, r0
   bcba4:	460d      	mov	r5, r1
   bcba6:	4616      	mov	r6, r2
   bcba8:	461f      	mov	r7, r3
  while (_serialPort->available())
   bcbaa:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bcbae:	6803      	ldr	r3, [r0, #0]
   bcbb0:	691b      	ldr	r3, [r3, #16]
   bcbb2:	4798      	blx	r3
   bcbb4:	b160      	cbz	r0, bcbd0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0x30>
    process(_serialPort->read(), incomingUBX, requestedClass, requestedID);
   bcbb6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   bcbba:	6803      	ldr	r3, [r0, #0]
   bcbbc:	695b      	ldr	r3, [r3, #20]
   bcbbe:	4798      	blx	r3
   bcbc0:	9700      	str	r7, [sp, #0]
   bcbc2:	b2c1      	uxtb	r1, r0
   bcbc4:	4633      	mov	r3, r6
   bcbc6:	462a      	mov	r2, r5
   bcbc8:	4620      	mov	r0, r4
   bcbca:	f7ff fb85 	bl	bc2d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  while (_serialPort->available())
   bcbce:	e7ec      	b.n	bcbaa <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh+0xa>
} // end checkUbloxSerial()
   bcbd0:	2001      	movs	r0, #1
   bcbd2:	b003      	add	sp, #12
   bcbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bcbd8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>:
{
   bcbd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcbdc:	4604      	mov	r4, r0
   bcbde:	b087      	sub	sp, #28
   bcbe0:	460d      	mov	r5, r1
   bcbe2:	4616      	mov	r6, r2
   bcbe4:	461f      	mov	r7, r3
   bcbe6:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bcbea:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   bcbee:	fa5f f388 	uxtb.w	r3, r8
   bcbf2:	429a      	cmp	r2, r3
   bcbf4:	d90b      	bls.n	bcc0e <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x36>
    process(spiBuffer[i], incomingUBX, requestedClass, requestedID);
   bcbf6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   bcbfa:	4620      	mov	r0, r4
   bcbfc:	5cd1      	ldrb	r1, [r2, r3]
   bcbfe:	9700      	str	r7, [sp, #0]
   bcc00:	4633      	mov	r3, r6
   bcc02:	462a      	mov	r2, r5
   bcc04:	f7ff fb68 	bl	bc2d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
  for (uint8_t i = 0; i < spiBufferIndex; i++)
   bcc08:	f108 0801 	add.w	r8, r8, #1
   bcc0c:	e7ed      	b.n	bcbea <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x12>
  spiBufferIndex = 0;
   bcc0e:	f04f 0800 	mov.w	r8, #0
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bcc12:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   bcc16:	4a25      	ldr	r2, [pc, #148]	; (bccac <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xd4>)
   bcc18:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  spiBufferIndex = 0;
   bcc1c:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
  _spiPort->beginTransaction(SPISettings(_spiSpeed, MSBFIRST, SPI_MODE0));
   bcc20:	a902      	add	r1, sp, #8
   bcc22:	f04f 0901 	mov.w	r9, #1
   bcc26:	9202      	str	r2, [sp, #8]
   bcc28:	9304      	str	r3, [sp, #16]
   bcc2a:	f88d 800c 	strb.w	r8, [sp, #12]
   bcc2e:	f8ad 9014 	strh.w	r9, [sp, #20]
   bcc32:	f001 fc33 	bl	be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  digitalWrite(_csPin, LOW);
   bcc36:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcc3a:	4641      	mov	r1, r8
   bcc3c:	f005 f9b3 	bl	c1fa6 <digitalWrite>
  uint8_t byteReturned = _spiPort->transfer(0xFF);
   bcc40:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcc44:	21ff      	movs	r1, #255	; 0xff
   bcc46:	f001 fc97 	bl	be578 <_ZN8SPIClass8transferEh>
  if ((byteReturned == 0xFF) && (currentSentence == SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcc4a:	28ff      	cmp	r0, #255	; 0xff
   bcc4c:	d116      	bne.n	bcc7c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcc4e:	7823      	ldrb	r3, [r4, #0]
   bcc50:	b983      	cbnz	r3, bcc74 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
    digitalWrite(_csPin, HIGH);
   bcc52:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcc56:	4649      	mov	r1, r9
   bcc58:	f005 f9a5 	bl	c1fa6 <digitalWrite>
    _spiPort->endTransaction();
   bcc5c:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcc60:	f001 fc02 	bl	be468 <_ZN8SPIClass14endTransactionEv>
    delay(spiPollingWait);
   bcc64:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   bcc68:	f004 f8f2 	bl	c0e50 <delay>
} // end checkUbloxSpi()
   bcc6c:	2001      	movs	r0, #1
   bcc6e:	b007      	add	sp, #28
   bcc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcc74:	28ff      	cmp	r0, #255	; 0xff
   bcc76:	d101      	bne.n	bcc7c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xa4>
   bcc78:	7823      	ldrb	r3, [r4, #0]
   bcc7a:	b163      	cbz	r3, bcc96 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0xbe>
    process(byteReturned, incomingUBX, requestedClass, requestedID);
   bcc7c:	4601      	mov	r1, r0
   bcc7e:	9700      	str	r7, [sp, #0]
   bcc80:	4620      	mov	r0, r4
   bcc82:	4633      	mov	r3, r6
   bcc84:	462a      	mov	r2, r5
   bcc86:	f7ff fb27 	bl	bc2d8 <_ZN14SFE_UBLOX_GNSS7processEhP9ubxPackethh>
    byteReturned = _spiPort->transfer(0xFF);
   bcc8a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcc8e:	21ff      	movs	r1, #255	; 0xff
   bcc90:	f001 fc72 	bl	be578 <_ZN8SPIClass8transferEh>
  while ((byteReturned != 0xFF) || (currentSentence != SFE_UBLOX_SENTENCE_TYPE_NONE))
   bcc94:	e7ee      	b.n	bcc74 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x9c>
  digitalWrite(_csPin, HIGH);
   bcc96:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
   bcc9a:	2101      	movs	r1, #1
   bcc9c:	f005 f983 	bl	c1fa6 <digitalWrite>
  _spiPort->endTransaction();
   bcca0:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   bcca4:	f001 fbe0 	bl	be468 <_ZN8SPIClass14endTransactionEv>
  return (true);
   bcca8:	e7e0      	b.n	bcc6c <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh+0x94>
   bccaa:	bf00      	nop
   bccac:	000c6d3c 	.word	0x000c6d3c

000bccb0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>:
{
   bccb0:	b410      	push	{r4}
  if (commType == COMM_TYPE_I2C)
   bccb2:	f890 40c7 	ldrb.w	r4, [r0, #199]	; 0xc7
   bccb6:	b91c      	cbnz	r4, bccc0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x10>
}
   bccb8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxI2C(incomingUBX, requestedClass, requestedID));
   bccbc:	f7ff bea8 	b.w	bca10 <_ZN14SFE_UBLOX_GNSS13checkUbloxI2CEP9ubxPackethh>
  else if (commType == COMM_TYPE_SERIAL)
   bccc0:	2c01      	cmp	r4, #1
   bccc2:	d103      	bne.n	bcccc <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x1c>
}
   bccc4:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSerial(incomingUBX, requestedClass, requestedID));
   bccc8:	f7ff bf6a 	b.w	bcba0 <_ZN14SFE_UBLOX_GNSS16checkUbloxSerialEP9ubxPackethh>
  else if (commType == COMM_TYPE_SPI)
   bcccc:	2c02      	cmp	r4, #2
   bccce:	d103      	bne.n	bccd8 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh+0x28>
}
   bccd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (checkUbloxSpi(incomingUBX, requestedClass, requestedID));
   bccd4:	f7ff bf80 	b.w	bcbd8 <_ZN14SFE_UBLOX_GNSS13checkUbloxSpiEP9ubxPackethh>
}
   bccd8:	2000      	movs	r0, #0
   bccda:	f85d 4b04 	ldr.w	r4, [sp], #4
   bccde:	4770      	bx	lr

000bcce0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>:
{
   bcce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcce4:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcce6:	2102      	movs	r1, #2
   bcce8:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bccea:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bccee:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bccf2:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bccf6:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bccf8:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bccfc:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcd00:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcd04:	4604      	mov	r4, r0
   bcd06:	4617      	mov	r7, r2
   bcd08:	4698      	mov	r8, r3
   bcd0a:	f000 ff5b 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() < (startTime + (unsigned long)maxTime))
   bcd0e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   bcd12:	4606      	mov	r6, r0
   bcd14:	4481      	add	r9, r0
   bcd16:	f000 ff55 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcd1a:	4581      	cmp	r9, r0
   bcd1c:	f240 80a8 	bls.w	bce70 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x190>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcd20:	4643      	mov	r3, r8
   bcd22:	463a      	mov	r2, r7
   bcd24:	4629      	mov	r1, r5
   bcd26:	4620      	mov	r0, r4
   bcd28:	f7ff ffc2 	bl	bccb0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcd2c:	2800      	cmp	r0, #0
   bcd2e:	f000 809b 	beq.w	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcd32:	7beb      	ldrb	r3, [r5, #15]
   bcd34:	f894 111b 	ldrb.w	r1, [r4, #283]	; 0x11b
   bcd38:	2b01      	cmp	r3, #1
   bcd3a:	d125      	bne.n	bcd88 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xa8>
   bcd3c:	2901      	cmp	r1, #1
   bcd3e:	f040 80ec 	bne.w	bcf1a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x23a>
   bcd42:	7bab      	ldrb	r3, [r5, #14]
   bcd44:	2b01      	cmp	r3, #1
   bcd46:	782b      	ldrb	r3, [r5, #0]
   bcd48:	d13b      	bne.n	bcdc2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
   bcd4a:	42bb      	cmp	r3, r7
   bcd4c:	d13e      	bne.n	bcdcc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcd4e:	786a      	ldrb	r2, [r5, #1]
   bcd50:	4542      	cmp	r2, r8
   bcd52:	d136      	bne.n	bcdc2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xe2>
        if (_printDebug == true)
   bcd54:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd58:	b913      	cbnz	r3, bcd60 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x80>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data and a correct ACK!
   bcd5a:	200b      	movs	r0, #11
}
   bcd5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          _debugSerial->print(F("waitForACKResponse: valid data and valid ACK received after "));
   bcd60:	4978      	ldr	r1, [pc, #480]	; (bcf44 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x264>)
   bcd62:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd66:	f002 ff78 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcd6a:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcd6e:	f000 ff29 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcd72:	220a      	movs	r2, #10
   bcd74:	1b81      	subs	r1, r0, r6
   bcd76:	4628      	mov	r0, r5
   bcd78:	f7fb fc9b 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcd7c:	4972      	ldr	r1, [pc, #456]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcd7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd82:	f002 ff84 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bcd86:	e7e8      	b.n	bcd5a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcd88:	2b02      	cmp	r3, #2
   bcd8a:	d137      	bne.n	bcdfc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x11c>
   bcd8c:	2901      	cmp	r1, #1
   bcd8e:	f040 80aa 	bne.w	bcee6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
        if (_printDebug == true)
   bcd92:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcd96:	b193      	cbz	r3, bcdbe <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xde>
          _debugSerial->print(F("waitForACKResponse: no data and valid ACK after "));
   bcd98:	496c      	ldr	r1, [pc, #432]	; (bcf4c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x26c>)
   bcd9a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcd9e:	f002 ff5c 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcda2:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcda6:	f000 ff0d 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcdaa:	220a      	movs	r2, #10
   bcdac:	1b81      	subs	r1, r0, r6
   bcdae:	4628      	mov	r0, r5
   bcdb0:	f7fb fc7f 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcdb4:	4964      	ldr	r1, [pc, #400]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcdb6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdba:	f002 ff68 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_SENT); // We got an ACK but no data...
   bcdbe:	200a      	movs	r0, #10
   bcdc0:	e7cc      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bcdc2:	42bb      	cmp	r3, r7
   bcdc4:	d102      	bne.n	bcdcc <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0xec>
   bcdc6:	786b      	ldrb	r3, [r5, #1]
   bcdc8:	4543      	cmp	r3, r8
   bcdca:	d019      	beq.n	bce00 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x120>
        if (_printDebug == true)
   bcdcc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcdd0:	b193      	cbz	r3, bcdf8 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x118>
          _debugSerial->print(F("waitForACKResponse: data being OVERWRITTEN after "));
   bcdd2:	495f      	ldr	r1, [pc, #380]	; (bcf50 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x270>)
   bcdd4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdd8:	f002 ff3f 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcddc:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcde0:	f000 fef0 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcde4:	220a      	movs	r2, #10
   bcde6:	1b81      	subs	r1, r0, r6
   bcde8:	4628      	mov	r0, r5
   bcdea:	f7fb fc62 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcdee:	4956      	ldr	r1, [pc, #344]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcdf0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcdf4:	f002 ff4b 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bcdf8:	200d      	movs	r0, #13
   bcdfa:	e7af      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bcdfc:	2901      	cmp	r1, #1
   bcdfe:	d172      	bne.n	bcee6 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x206>
   bce00:	89eb      	ldrh	r3, [r5, #14]
   bce02:	bb8b      	cbnz	r3, bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bce04:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce08:	b193      	cbz	r3, bce30 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x150>
          _debugSerial->print(F("waitForACKResponse: CRC failed after "));
   bce0a:	4952      	ldr	r1, [pc, #328]	; (bcf54 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x274>)
   bce0c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce10:	f002 ff23 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce14:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce18:	f000 fed4 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bce1c:	220a      	movs	r2, #10
   bce1e:	1b81      	subs	r1, r0, r6
   bce20:	4628      	mov	r0, r5
   bce22:	f7fb fc46 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce26:	4948      	ldr	r1, [pc, #288]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce28:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce2c:	f002 ff2f 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // Checksum fail
   bce30:	2002      	movs	r0, #2
   bce32:	e793      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID))
   bce34:	430b      	orrs	r3, r1
   bce36:	d117      	bne.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bce38:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bce3c:	b193      	cbz	r3, bce64 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x184>
          _debugSerial->print(F("waitForACKResponse: INVALID data and INVALID ACK received after "));
   bce3e:	4946      	ldr	r1, [pc, #280]	; (bcf58 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x278>)
   bce40:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce44:	f002 ff09 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bce48:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bce4c:	f000 feba 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bce50:	220a      	movs	r2, #10
   bce52:	1b81      	subs	r1, r0, r6
   bce54:	4628      	mov	r0, r5
   bce56:	f7fb fc2c 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bce5a:	493b      	ldr	r1, [pc, #236]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bce5c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bce60:	f002 ff15 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_FAIL); // We received invalid data and an invalid ACK!
   bce64:	2001      	movs	r0, #1
   bce66:	e779      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bce68:	2001      	movs	r0, #1
   bce6a:	f003 fff1 	bl	c0e50 <delay>
  while (millis() < (startTime + (unsigned long)maxTime))
   bce6e:	e752      	b.n	bcd16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x36>
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bce70:	7bea      	ldrb	r2, [r5, #15]
    if (_printDebug == true)
   bce72:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
  if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bce76:	2a01      	cmp	r2, #1
   bce78:	d11f      	bne.n	bceba <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bce7a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
   bce7e:	2a02      	cmp	r2, #2
   bce80:	d11b      	bne.n	bceba <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bce82:	7baa      	ldrb	r2, [r5, #14]
   bce84:	2a01      	cmp	r2, #1
   bce86:	d118      	bne.n	bceba <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bce88:	782a      	ldrb	r2, [r5, #0]
   bce8a:	42ba      	cmp	r2, r7
   bce8c:	d115      	bne.n	bceba <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
   bce8e:	786a      	ldrb	r2, [r5, #1]
   bce90:	4542      	cmp	r2, r8
   bce92:	d112      	bne.n	bceba <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x1da>
    if (_printDebug == true)
   bce94:	2b00      	cmp	r3, #0
   bce96:	f43f af60 	beq.w	bcd5a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
      _debugSerial->print(F("waitForACKResponse: TIMEOUT with valid data after "));
   bce9a:	4930      	ldr	r1, [pc, #192]	; (bcf5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x27c>)
   bce9c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcea0:	f002 fedb 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
      _debugSerial->print(millis() - startTime);
   bcea4:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcea8:	f000 fe8c 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bceac:	220a      	movs	r2, #10
   bceae:	1b81      	subs	r1, r0, r6
   bceb0:	4628      	mov	r0, r5
   bceb2:	f7fb fbfe 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
      _debugSerial->println(F(" msec. "));
   bceb6:	492a      	ldr	r1, [pc, #168]	; (bcf60 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x280>)
   bceb8:	e761      	b.n	bcd7e <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x9e>
  if (_printDebug == true)
   bceba:	b193      	cbz	r3, bcee2 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x202>
    _debugSerial->print(F("waitForACKResponse: TIMEOUT after "));
   bcebc:	4929      	ldr	r1, [pc, #164]	; (bcf64 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x284>)
   bcebe:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcec2:	f002 feca 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bcec6:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bceca:	f000 fe7b 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcece:	220a      	movs	r2, #10
   bced0:	1b81      	subs	r1, r0, r6
   bced2:	4628      	mov	r0, r5
   bced4:	f7fb fbed 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec."));
   bced8:	4923      	ldr	r1, [pc, #140]	; (bcf68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x288>)
   bceda:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcede:	f002 fed6 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bcee2:	2003      	movs	r0, #3
   bcee4:	e73a      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcee6:	2903      	cmp	r1, #3
   bcee8:	d1a4      	bne.n	bce34 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x154>
        if (_printDebug == true)
   bceea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bceee:	b193      	cbz	r3, bcf16 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x236>
          _debugSerial->print(F("waitForACKResponse: data was NOTACKNOWLEDGED (NACK) after "));
   bcef0:	491e      	ldr	r1, [pc, #120]	; (bcf6c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x28c>)
   bcef2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcef6:	f002 feb0 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcefa:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcefe:	f000 fe61 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcf02:	220a      	movs	r2, #10
   bcf04:	1b81      	subs	r1, r0, r6
   bcf06:	4628      	mov	r0, r5
   bcf08:	f7fb fbd3 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcf0c:	490e      	ldr	r1, [pc, #56]	; (bcf48 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x268>)
   bcf0e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcf12:	f002 febc 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_COMMAND_NACK); // We received a NACK!
   bcf16:	2004      	movs	r0, #4
   bcf18:	e720      	b.n	bcd5c <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7c>
      else if (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_NOTACKNOWLEDGED)
   bcf1a:	2903      	cmp	r1, #3
   bcf1c:	d0e5      	beq.n	bceea <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x20a>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (packetAck.classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcf1e:	2900      	cmp	r1, #0
   bcf20:	d1a2      	bne.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcf22:	7bab      	ldrb	r3, [r5, #14]
   bcf24:	2b01      	cmp	r3, #1
   bcf26:	d19f      	bne.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcf28:	782b      	ldrb	r3, [r5, #0]
   bcf2a:	42bb      	cmp	r3, r7
   bcf2c:	d19c      	bne.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
   bcf2e:	786b      	ldrb	r3, [r5, #1]
   bcf30:	4543      	cmp	r3, r8
   bcf32:	d199      	bne.n	bce68 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x188>
        if (_printDebug == true)
   bcf34:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcf38:	2b00      	cmp	r3, #0
   bcf3a:	f43f af0e 	beq.w	bcd5a <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x7a>
          _debugSerial->print(F("waitForACKResponse: VALID data and INVALID ACK received after "));
   bcf3e:	490c      	ldr	r1, [pc, #48]	; (bcf70 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x290>)
   bcf40:	e70f      	b.n	bcd62 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht+0x82>
   bcf42:	bf00      	nop
   bcf44:	000c771c 	.word	0x000c771c
   bcf48:	000c7759 	.word	0x000c7759
   bcf4c:	000c775f 	.word	0x000c775f
   bcf50:	000c7790 	.word	0x000c7790
   bcf54:	000c77c2 	.word	0x000c77c2
   bcf58:	000c7862 	.word	0x000c7862
   bcf5c:	000c78a3 	.word	0x000c78a3
   bcf60:	000c78d6 	.word	0x000c78d6
   bcf64:	000c78de 	.word	0x000c78de
   bcf68:	000c7901 	.word	0x000c7901
   bcf6c:	000c77e8 	.word	0x000c77e8
   bcf70:	000c7823 	.word	0x000c7823

000bcf74 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>:
{
   bcf74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf78:	460d      	mov	r5, r1
  outgoingUBX->valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a response to the packet we sent
   bcf7a:	2102      	movs	r1, #2
   bcf7c:	73a9      	strb	r1, [r5, #14]
  packetAck.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf7e:	f880 111a 	strb.w	r1, [r0, #282]	; 0x11a
  packetBuf.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf82:	f880 112a 	strb.w	r1, [r0, #298]	; 0x12a
  packetAuto.valid = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf86:	f880 114a 	strb.w	r1, [r0, #330]	; 0x14a
  outgoingUBX->classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED; // This will go VALID (or NOT_VALID) when we receive a packet that matches the requested class and ID
   bcf8a:	73e9      	strb	r1, [r5, #15]
  packetAck.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf8c:	f880 111b 	strb.w	r1, [r0, #283]	; 0x11b
  packetBuf.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf90:	f880 112b 	strb.w	r1, [r0, #299]	; 0x12b
  packetAuto.classAndIDmatch = SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED;
   bcf94:	f880 114b 	strb.w	r1, [r0, #331]	; 0x14b
{
   bcf98:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   bcf9c:	4604      	mov	r4, r0
   bcf9e:	4617      	mov	r7, r2
   bcfa0:	4698      	mov	r8, r3
   bcfa2:	f000 fe0f 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcfa6:	f240 1a01 	movw	sl, #257	; 0x101
   bcfaa:	4606      	mov	r6, r0
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bcfac:	f240 2b01 	movw	fp, #513	; 0x201
   bcfb0:	f000 fe08 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < maxTime)
   bcfb4:	1b80      	subs	r0, r0, r6
   bcfb6:	4548      	cmp	r0, r9
   bcfb8:	d269      	bcs.n	bd08e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x11a>
    if (checkUbloxInternal(outgoingUBX, requestedClass, requestedID) == true) // See if new data is available. Process bytes as they come in.
   bcfba:	4643      	mov	r3, r8
   bcfbc:	463a      	mov	r2, r7
   bcfbe:	4629      	mov	r1, r5
   bcfc0:	4620      	mov	r0, r4
   bcfc2:	f7ff fe75 	bl	bccb0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
   bcfc6:	2800      	cmp	r0, #0
   bcfc8:	d05d      	beq.n	bd086 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID) && (outgoingUBX->cls == requestedClass) && (outgoingUBX->id == requestedID))
   bcfca:	89ea      	ldrh	r2, [r5, #14]
   bcfcc:	4552      	cmp	r2, sl
   bcfce:	d11e      	bne.n	bd00e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bcfd0:	782b      	ldrb	r3, [r5, #0]
   bcfd2:	42bb      	cmp	r3, r7
   bcfd4:	d11b      	bne.n	bd00e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
   bcfd6:	786b      	ldrb	r3, [r5, #1]
   bcfd8:	4543      	cmp	r3, r8
   bcfda:	d118      	bne.n	bd00e <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x9a>
        if (_printDebug == true)
   bcfdc:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bcfe0:	b193      	cbz	r3, bd008 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x94>
          _debugSerial->print(F("waitForNoACKResponse: valid data with CLS/ID match after "));
   bcfe2:	4937      	ldr	r1, [pc, #220]	; (bd0c0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x14c>)
   bcfe4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bcfe8:	f002 fe37 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bcfec:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bcff0:	f000 fde8 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bcff4:	220a      	movs	r2, #10
   bcff6:	1b81      	subs	r1, r0, r6
   bcff8:	4628      	mov	r0, r5
   bcffa:	f7fb fb5a 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bcffe:	4931      	ldr	r1, [pc, #196]	; (bd0c4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd000:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd004:	f002 fe43 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_RECEIVED); // We received valid data!
   bd008:	200b      	movs	r0, #11
}
   bd00a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_VALID) && ((outgoingUBX->cls != requestedClass) || (outgoingUBX->id != requestedID)))
   bd00e:	7beb      	ldrb	r3, [r5, #15]
   bd010:	2b01      	cmp	r3, #1
   bd012:	d11d      	bne.n	bd050 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xdc>
   bd014:	782b      	ldrb	r3, [r5, #0]
   bd016:	42bb      	cmp	r3, r7
   bd018:	d102      	bne.n	bd020 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xac>
   bd01a:	786b      	ldrb	r3, [r5, #1]
   bd01c:	4543      	cmp	r3, r8
   bd01e:	d032      	beq.n	bd086 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd020:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd024:	b193      	cbz	r3, bd04c <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0xd8>
          _debugSerial->print(F("waitForNoACKResponse: data being OVERWRITTEN after "));
   bd026:	4928      	ldr	r1, [pc, #160]	; (bd0c8 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x154>)
   bd028:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd02c:	f002 fe15 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd030:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd034:	f000 fdc6 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bd038:	220a      	movs	r2, #10
   bd03a:	1b81      	subs	r1, r0, r6
   bd03c:	4628      	mov	r0, r5
   bd03e:	f7fb fb38 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd042:	4920      	ldr	r1, [pc, #128]	; (bd0c4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd044:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd048:	f002 fe21 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_DATA_OVERWRITTEN); // Data was valid but has been or is being overwritten
   bd04c:	200d      	movs	r0, #13
   bd04e:	e7dc      	b.n	bd00a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
      else if ((outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_DEFINED) && (outgoingUBX->valid == SFE_UBLOX_PACKET_VALIDITY_VALID))
   bd050:	455a      	cmp	r2, fp
   bd052:	d018      	beq.n	bd086 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
      else if (outgoingUBX->classAndIDmatch == SFE_UBLOX_PACKET_VALIDITY_NOT_VALID)
   bd054:	b9bb      	cbnz	r3, bd086 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x112>
        if (_printDebug == true)
   bd056:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd05a:	b193      	cbz	r3, bd082 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x10e>
          _debugSerial->print(F("waitForNoACKResponse: CLS/ID match but failed CRC after "));
   bd05c:	491b      	ldr	r1, [pc, #108]	; (bd0cc <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x158>)
   bd05e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd062:	f002 fdfa 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
          _debugSerial->print(millis() - startTime);
   bd066:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd06a:	f000 fdab 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bd06e:	220a      	movs	r2, #10
   bd070:	1b81      	subs	r1, r0, r6
   bd072:	4628      	mov	r0, r5
   bd074:	f7fb fb1d 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
          _debugSerial->println(F(" msec"));
   bd078:	4912      	ldr	r1, [pc, #72]	; (bd0c4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x150>)
   bd07a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd07e:	f002 fe06 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
        return (SFE_UBLOX_STATUS_CRC_FAIL); // We received invalid data
   bd082:	2002      	movs	r0, #2
   bd084:	e7c1      	b.n	bd00a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
    delay(1); // Allow an RTOS to get an elbow in (#11)
   bd086:	2001      	movs	r0, #1
   bd088:	f003 fee2 	bl	c0e50 <delay>
  while (millis() - startTime < maxTime)
   bd08c:	e790      	b.n	bcfb0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x3c>
  if (_printDebug == true)
   bd08e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd092:	b193      	cbz	r3, bd0ba <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x146>
    _debugSerial->print(F("waitForNoACKResponse: TIMEOUT after "));
   bd094:	490e      	ldr	r1, [pc, #56]	; (bd0d0 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x15c>)
   bd096:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd09a:	f002 fdde 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    _debugSerial->print(millis() - startTime);
   bd09e:	f8d4 50d4 	ldr.w	r5, [r4, #212]	; 0xd4
   bd0a2:	f000 fd8f 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
   bd0a6:	220a      	movs	r2, #10
   bd0a8:	1b81      	subs	r1, r0, r6
   bd0aa:	4628      	mov	r0, r5
   bd0ac:	f7fb fb01 	bl	b86b2 <_ZN5Print5printImLi0EEEjT_i.isra.0>
    _debugSerial->println(F(" msec. No packet received."));
   bd0b0:	4908      	ldr	r1, [pc, #32]	; (bd0d4 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x160>)
   bd0b2:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0b6:	f002 fdea 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
  return (SFE_UBLOX_STATUS_TIMEOUT);
   bd0ba:	2003      	movs	r0, #3
   bd0bc:	e7a5      	b.n	bd00a <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht+0x96>
   bd0be:	bf00      	nop
   bd0c0:	000c7908 	.word	0x000c7908
   bd0c4:	000c7759 	.word	0x000c7759
   bd0c8:	000c7942 	.word	0x000c7942
   bd0cc:	000c7976 	.word	0x000c7976
   bd0d0:	000c79af 	.word	0x000c79af
   bd0d4:	000c79d4 	.word	0x000c79d4

000bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>:
{
   bd0d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bd0dc:	4604      	mov	r4, r0
   bd0de:	4698      	mov	r8, r3
   bd0e0:	4617      	mov	r7, r2
  calcChecksum(outgoingUBX); // Sets checksum A and B bytes of the packet
   bd0e2:	f7fc fcc9 	bl	b9a78 <_ZN14SFE_UBLOX_GNSS12calcChecksumEP9ubxPacket>
  if (_printDebug == true)
   bd0e6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
   bd0ea:	460d      	mov	r5, r1
  if (_printDebug == true)
   bd0ec:	b14b      	cbz	r3, bd102 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x2a>
    _debugSerial->print(F("\nSending: "));
   bd0ee:	492a      	ldr	r1, [pc, #168]	; (bd198 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc0>)
   bd0f0:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd0f4:	f002 fdb1 	bl	bfc5a <_ZN5Print5printEPK19__FlashStringHelper>
    printPacket(outgoingUBX, true); // Always print payload
   bd0f8:	2201      	movs	r2, #1
   bd0fa:	4629      	mov	r1, r5
   bd0fc:	4620      	mov	r0, r4
   bd0fe:	f7fc fee9 	bl	b9ed4 <_ZN14SFE_UBLOX_GNSS11printPacketEP9ubxPacketb>
  if (commType == COMM_TYPE_I2C)
   bd102:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
   bd106:	b993      	cbnz	r3, bd12e <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x56>
    retVal = sendI2cCommand(outgoingUBX, maxWait);
   bd108:	463a      	mov	r2, r7
   bd10a:	4629      	mov	r1, r5
   bd10c:	4620      	mov	r0, r4
   bd10e:	f7fc fce1 	bl	b9ad4 <_ZN14SFE_UBLOX_GNSS14sendI2cCommandEP9ubxPackett>
    if (retVal != SFE_UBLOX_STATUS_SUCCESS)
   bd112:	4606      	mov	r6, r0
   bd114:	b188      	cbz	r0, bd13a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd116:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd11a:	b123      	cbz	r3, bd126 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
        _debugSerial->println(F("Send I2C Command failed"));
   bd11c:	491f      	ldr	r1, [pc, #124]	; (bd19c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc4>)
   bd11e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd122:	f002 fdb4 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   bd126:	4630      	mov	r0, r6
   bd128:	b002      	add	sp, #8
   bd12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd12e:	2b01      	cmp	r3, #1
   bd130:	d11b      	bne.n	bd16a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x92>
    sendSerialCommand(outgoingUBX);
   bd132:	4629      	mov	r1, r5
   bd134:	4620      	mov	r0, r4
   bd136:	f7fc fd8f 	bl	b9c58 <_ZN14SFE_UBLOX_GNSS17sendSerialCommandEP9ubxPacket>
  if (maxWait > 0)
   bd13a:	b35f      	cbz	r7, bd194 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xbc>
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd13c:	782a      	ldrb	r2, [r5, #0]
      if (_printDebug == true)
   bd13e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    if ((outgoingUBX->cls == UBX_CLASS_CFG) || (expectACKonly == true))
   bd142:	2a06      	cmp	r2, #6
   bd144:	d002      	beq.n	bd14c <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x74>
   bd146:	f1b8 0f00 	cmp.w	r8, #0
   bd14a:	d015      	beq.n	bd178 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xa0>
      if (_printDebug == true)
   bd14c:	b123      	cbz	r3, bd158 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x80>
        _debugSerial->println(F("sendCommand: Waiting for ACK response"));
   bd14e:	4914      	ldr	r1, [pc, #80]	; (bd1a0 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xc8>)
   bd150:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd154:	f002 fd9b 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd158:	786b      	ldrb	r3, [r5, #1]
   bd15a:	782a      	ldrb	r2, [r5, #0]
   bd15c:	9700      	str	r7, [sp, #0]
   bd15e:	4629      	mov	r1, r5
   bd160:	4620      	mov	r0, r4
   bd162:	f7ff fdbd 	bl	bcce0 <_ZN14SFE_UBLOX_GNSS18waitForACKResponseEP9ubxPackethht>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd166:	4606      	mov	r6, r0
   bd168:	e7dd      	b.n	bd126 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
  else if (commType == COMM_TYPE_SPI)
   bd16a:	2b02      	cmp	r3, #2
   bd16c:	d1e5      	bne.n	bd13a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
    sendSpiCommand(outgoingUBX);
   bd16e:	4629      	mov	r1, r5
   bd170:	4620      	mov	r0, r4
   bd172:	f7fc fdcb 	bl	b9d0c <_ZN14SFE_UBLOX_GNSS14sendSpiCommandEP9ubxPacket>
   bd176:	e7e0      	b.n	bd13a <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x62>
      if (_printDebug == true)
   bd178:	b123      	cbz	r3, bd184 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xac>
        _debugSerial->println(F("sendCommand: Waiting for No ACK response"));
   bd17a:	490a      	ldr	r1, [pc, #40]	; (bd1a4 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0xcc>)
   bd17c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd180:	f002 fd85 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
      retVal = waitForNoACKResponse(outgoingUBX, outgoingUBX->cls, outgoingUBX->id, maxWait); // Wait for Ack response
   bd184:	786b      	ldrb	r3, [r5, #1]
   bd186:	782a      	ldrb	r2, [r5, #0]
   bd188:	9700      	str	r7, [sp, #0]
   bd18a:	4629      	mov	r1, r5
   bd18c:	4620      	mov	r0, r4
   bd18e:	f7ff fef1 	bl	bcf74 <_ZN14SFE_UBLOX_GNSS20waitForNoACKResponseEP9ubxPackethht>
   bd192:	e7e8      	b.n	bd166 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x8e>
   bd194:	463e      	mov	r6, r7
   bd196:	e7c6      	b.n	bd126 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb+0x4e>
   bd198:	000c79ef 	.word	0x000c79ef
   bd19c:	000c79fa 	.word	0x000c79fa
   bd1a0:	000c7a12 	.word	0x000c7a12
   bd1a4:	000c7a38 	.word	0x000c7a38

000bd1a8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>:
{
   bd1a8:	b538      	push	{r3, r4, r5, lr}
  packetCfg.cls = UBX_CLASS_CFG;
   bd1aa:	4b09      	ldr	r3, [pc, #36]	; (bd1d0 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht+0x28>)
  payloadCfg[0] = portID;
   bd1ac:	f8d0 50fc 	ldr.w	r5, [r0, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd1b0:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd1b4:	2300      	movs	r3, #0
   bd1b6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
  payloadCfg[0] = portID;
   bd1ba:	7029      	strb	r1, [r5, #0]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_RECEIVED); // We are expecting data and an ACK
   bd1bc:	f500 7196 	add.w	r1, r0, #300	; 0x12c
   bd1c0:	f7ff ff8a 	bl	bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
}
   bd1c4:	f1a0 030b 	sub.w	r3, r0, #11
   bd1c8:	4258      	negs	r0, r3
   bd1ca:	4158      	adcs	r0, r3
   bd1cc:	bd38      	pop	{r3, r4, r5, pc}
   bd1ce:	bf00      	nop
   bd1d0:	00010006 	.word	0x00010006

000bd1d4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>:
{
   bd1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd1d6:	4615      	mov	r5, r2
   bd1d8:	461a      	mov	r2, r3
   bd1da:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd1dc:	9301      	str	r3, [sp, #4]
   bd1de:	f7ff ffe3 	bl	bd1a8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd1e2:	b190      	cbz	r0, bd20a <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x36>
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd1e4:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd1e8:	4b09      	ldr	r3, [pc, #36]	; (bd210 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht+0x3c>)
   bd1ea:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd1ee:	2300      	movs	r3, #0
   bd1f0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd1f4:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[14] = outStreamSettings; // OutProtocolMask LSB - Set outStream bits
   bd1f6:	738d      	strb	r5, [r1, #14]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd1f8:	4620      	mov	r0, r4
   bd1fa:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd1fe:	f7ff ff6b 	bl	bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd202:	f1a0 030a 	sub.w	r3, r0, #10
   bd206:	4258      	negs	r0, r3
   bd208:	4158      	adcs	r0, r3
}
   bd20a:	b003      	add	sp, #12
   bd20c:	bd30      	pop	{r4, r5, pc}
   bd20e:	bf00      	nop
   bd210:	00140006 	.word	0x00140006

000bd214 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht>:
{
   bd214:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd216:	4615      	mov	r5, r2
   bd218:	461a      	mov	r2, r3
   bd21a:	4604      	mov	r4, r0
  if (getPortSettings(portID, maxWait) == false)
   bd21c:	9301      	str	r3, [sp, #4]
   bd21e:	f7ff ffc3 	bl	bd1a8 <_ZN14SFE_UBLOX_GNSS15getPortSettingsEht>
   bd222:	b190      	cbz	r0, bd24a <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x36>
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd224:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd228:	4b09      	ldr	r3, [pc, #36]	; (bd250 <_ZN14SFE_UBLOX_GNSS12setPortInputEhht+0x3c>)
   bd22a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd22e:	2300      	movs	r3, #0
   bd230:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd234:	9a01      	ldr	r2, [sp, #4]
  payloadCfg[12] = inStreamSettings; // InProtocolMask LSB - Set inStream bits
   bd236:	730d      	strb	r5, [r1, #12]
  return ((sendCommand(&packetCfg, maxWait)) == SFE_UBLOX_STATUS_DATA_SENT); // We are only expecting an ACK
   bd238:	4620      	mov	r0, r4
   bd23a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd23e:	f7ff ff4b 	bl	bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
   bd242:	f1a0 030a 	sub.w	r3, r0, #10
   bd246:	4258      	negs	r0, r3
   bd248:	4158      	adcs	r0, r3
}
   bd24a:	b003      	add	sp, #12
   bd24c:	bd30      	pop	{r4, r5, pc}
   bd24e:	bf00      	nop
   bd250:	00140006 	.word	0x00140006

000bd254 <_ZN14SFE_UBLOX_GNSS12setI2COutputEht>:
{
   bd254:	4613      	mov	r3, r2
  return (setPortOutput(COM_PORT_I2C, comSettings, maxWait));
   bd256:	460a      	mov	r2, r1
   bd258:	2100      	movs	r1, #0
   bd25a:	f7ff bfbb 	b.w	bd1d4 <_ZN14SFE_UBLOX_GNSS13setPortOutputEhht>
	...

000bd260 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>:
{
   bd260:	b510      	push	{r4, lr}
   bd262:	4604      	mov	r4, r0
  packetUBXNAVPVT = new UBX_NAV_PVT_t; // Allocate RAM for the main struct
   bd264:	2074      	movs	r0, #116	; 0x74
   bd266:	f7f6 ff16 	bl	b4096 <_Znwj>
   bd26a:	6220      	str	r0, [r4, #32]
  if (packetUBXNAVPVT == NULL)
   bd26c:	b960      	cbnz	r0, bd288 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd26e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd272:	b913      	cbnz	r3, bd27a <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x1a>
   bd274:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd278:	b128      	cbz	r0, bd286 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
      _debugSerial->println(F("initPacketUBXNAVPVT: RAM alloc failed!"));
   bd27a:	4908      	ldr	r1, [pc, #32]	; (bd29c <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x3c>)
   bd27c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd280:	f002 fd05 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd284:	2000      	movs	r0, #0
}
   bd286:	bd10      	pop	{r4, pc}
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd288:	2300      	movs	r3, #0
  packetUBXNAVPVT->callbackPointerPtr = NULL;
   bd28a:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  packetUBXNAVPVT->moduleQueried.moduleQueried2.all = 0;
   bd28e:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
  packetUBXNAVPVT->automaticFlags.flags.all = 0;
   bd292:	7003      	strb	r3, [r0, #0]
  packetUBXNAVPVT->callbackData = NULL;
   bd294:	6703      	str	r3, [r0, #112]	; 0x70
  return (true);
   bd296:	2001      	movs	r0, #1
   bd298:	e7f5      	b.n	bd286 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv+0x26>
   bd29a:	bf00      	nop
   bd29c:	000c7a61 	.word	0x000c7a61

000bd2a0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>:
{
   bd2a0:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd2a2:	6a03      	ldr	r3, [r0, #32]
{
   bd2a4:	4604      	mov	r4, r0
   bd2a6:	460a      	mov	r2, r1
  if (packetUBXNAVPVT == NULL)
   bd2a8:	b91b      	cbnz	r3, bd2b2 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x12>
   bd2aa:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd2ac:	f7ff ffd8 	bl	bd260 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd2b0:	9a01      	ldr	r2, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd2b2:	6a20      	ldr	r0, [r4, #32]
   bd2b4:	b180      	cbz	r0, bd2d8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
  if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd2b6:	7803      	ldrb	r3, [r0, #0]
   bd2b8:	f003 0303 	and.w	r3, r3, #3
   bd2bc:	2b03      	cmp	r3, #3
   bd2be:	d10d      	bne.n	bd2dc <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x3c>
    checkUbloxInternal(&packetCfg, UBX_CLASS_NAV, UBX_NAV_PVT);
   bd2c0:	2307      	movs	r3, #7
   bd2c2:	2201      	movs	r2, #1
   bd2c4:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd2c8:	4620      	mov	r0, r4
   bd2ca:	f7ff fcf1 	bl	bccb0 <_ZN14SFE_UBLOX_GNSS18checkUbloxInternalEP9ubxPackethh>
    return packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all;
   bd2ce:	6a23      	ldr	r3, [r4, #32]
   bd2d0:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
   bd2d4:	f000 0001 	and.w	r0, r0, #1
}
   bd2d8:	b002      	add	sp, #8
   bd2da:	bd10      	pop	{r4, pc}
  else if (packetUBXNAVPVT->automaticFlags.flags.bits.automatic && !packetUBXNAVPVT->automaticFlags.flags.bits.implicitUpdate)
   bd2dc:	2b01      	cmp	r3, #1
   bd2de:	f04f 0300 	mov.w	r3, #0
   bd2e2:	d011      	beq.n	bd308 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x68>
    packetCfg.cls = UBX_CLASS_NAV;
   bd2e4:	f240 7101 	movw	r1, #1793	; 0x701
   bd2e8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
    packetCfg.startingSpot = 0;
   bd2ec:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
    sfe_ublox_status_e retVal = sendCommand(&packetCfg, maxWait);
   bd2f0:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   bd2f4:	4620      	mov	r0, r4
   bd2f6:	f7ff feef 	bl	bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
    if (retVal == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd2fa:	280b      	cmp	r0, #11
   bd2fc:	d006      	beq.n	bd30c <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x6c>
    if (retVal == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd2fe:	f1a0 030d 	sub.w	r3, r0, #13
   bd302:	4258      	negs	r0, r3
   bd304:	4158      	adcs	r0, r3
   bd306:	e7e7      	b.n	bd2d8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
    return (false);
   bd308:	4618      	mov	r0, r3
   bd30a:	e7e5      	b.n	bd2d8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>
      return (true);
   bd30c:	2001      	movs	r0, #1
   bd30e:	e7e3      	b.n	bd2d8 <_ZN14SFE_UBLOX_GNSS6getPVTEt+0x38>

000bd310 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>:
{
   bd310:	b510      	push	{r4, lr}
   bd312:	4604      	mov	r4, r0
  packetUBXCFGPRT = new UBX_CFG_PRT_t; // Allocate RAM for the main struct
   bd314:	2018      	movs	r0, #24
   bd316:	f7f6 febe 	bl	b4096 <_Znwj>
   bd31a:	6720      	str	r0, [r4, #112]	; 0x70
  if (packetUBXCFGPRT == NULL)
   bd31c:	b960      	cbnz	r0, bd338 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x28>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd31e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd322:	b913      	cbnz	r3, bd32a <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x1a>
   bd324:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   bd328:	b128      	cbz	r0, bd336 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
      _debugSerial->println(F("initPacketUBXCFGPRT: RAM alloc failed!"));
   bd32a:	4905      	ldr	r1, [pc, #20]	; (bd340 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x30>)
   bd32c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd330:	f002 fcad 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd334:	2000      	movs	r0, #0
}
   bd336:	bd10      	pop	{r4, pc}
  packetUBXCFGPRT->dataValid = false;
   bd338:	2300      	movs	r3, #0
   bd33a:	7503      	strb	r3, [r0, #20]
  return (true);
   bd33c:	2001      	movs	r0, #1
   bd33e:	e7fa      	b.n	bd336 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv+0x26>
   bd340:	000c7a88 	.word	0x000c7a88

000bd344 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>:
{
   bd344:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (packetUBXCFGPRT == NULL)
   bd346:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
   bd348:	4605      	mov	r5, r0
   bd34a:	460e      	mov	r6, r1
  if (packetUBXCFGPRT == NULL)
   bd34c:	b18b      	cbz	r3, bd372 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x2e>
  payloadCfg[0] = portID;
   bd34e:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
  packetCfg.cls = UBX_CLASS_CFG;
   bd352:	4b13      	ldr	r3, [pc, #76]	; (bd3a0 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x5c>)
   bd354:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  packetCfg.startingSpot = 0;
   bd358:	2300      	movs	r3, #0
   bd35a:	f8a5 3132 	strh.w	r3, [r5, #306]	; 0x132
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd35e:	4628      	mov	r0, r5
  payloadCfg[0] = portID;
   bd360:	700e      	strb	r6, [r1, #0]
  sfe_ublox_status_e result = sendCommand(&packetCfg, maxWait);
   bd362:	f505 7196 	add.w	r1, r5, #300	; 0x12c
   bd366:	f7ff feb7 	bl	bd0d8 <_ZN14SFE_UBLOX_GNSS11sendCommandEP9ubxPackettb>
  if (result == SFE_UBLOX_STATUS_DATA_RECEIVED)
   bd36a:	280b      	cmp	r0, #11
   bd36c:	d10b      	bne.n	bd386 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x42>
    retVal = true;
   bd36e:	2401      	movs	r4, #1
   bd370:	e00d      	b.n	bd38e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x4a>
   bd372:	9201      	str	r2, [sp, #4]
    initPacketUBXCFGPRT();     // Check that RAM has been allocated for the data
   bd374:	f7ff ffcc 	bl	bd310 <_ZN14SFE_UBLOX_GNSS19initPacketUBXCFGPRTEv>
  if (packetUBXCFGPRT == NULL) // Bail if the RAM allocation failed
   bd378:	6f2c      	ldr	r4, [r5, #112]	; 0x70
   bd37a:	9a01      	ldr	r2, [sp, #4]
   bd37c:	2c00      	cmp	r4, #0
   bd37e:	d1e6      	bne.n	bd34e <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0xa>
}
   bd380:	4620      	mov	r0, r4
   bd382:	b002      	add	sp, #8
   bd384:	bd70      	pop	{r4, r5, r6, pc}
  if (result == SFE_UBLOX_STATUS_DATA_OVERWRITTEN)
   bd386:	f1a0 030d 	sub.w	r3, r0, #13
   bd38a:	425c      	negs	r4, r3
   bd38c:	415c      	adcs	r4, r3
  delete packetUBXCFGPRT;
   bd38e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   bd390:	b110      	cbz	r0, bd398 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x54>
   bd392:	2118      	movs	r1, #24
   bd394:	f7f6 fe85 	bl	b40a2 <_ZdlPvj>
  packetUBXCFGPRT = NULL;
   bd398:	2300      	movs	r3, #0
   bd39a:	672b      	str	r3, [r5, #112]	; 0x70
  return (retVal);
   bd39c:	e7f0      	b.n	bd380 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht+0x3c>
   bd39e:	bf00      	nop
   bd3a0:	00010006 	.word	0x00010006

000bd3a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>:
{
   bd3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (commType == COMM_TYPE_I2C)
   bd3a6:	f890 50c7 	ldrb.w	r5, [r0, #199]	; 0xc7
{
   bd3aa:	4604      	mov	r4, r0
   bd3ac:	460a      	mov	r2, r1
  if (commType == COMM_TYPE_I2C)
   bd3ae:	b145      	cbz	r5, bd3c2 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x1e>
  if (commType == COMM_TYPE_I2C)
   bd3b0:	f894 10c7 	ldrb.w	r1, [r4, #199]	; 0xc7
   bd3b4:	b9b1      	cbnz	r1, bd3e4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x40>
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd3b6:	4620      	mov	r0, r4
}
   bd3b8:	b003      	add	sp, #12
   bd3ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd3be:	f7ff bfc1 	b.w	bd344 <_ZN14SFE_UBLOX_GNSS23getPortSettingsInternalEht>
   bd3c2:	9101      	str	r1, [sp, #4]
    _i2cPort->beginTransmission((uint8_t)_gpsI2Caddress);
   bd3c4:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   bd3c8:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
   bd3cc:	f004 fb04 	bl	c19d8 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
   bd3d0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
   bd3d4:	f004 fb0b 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
   bd3d8:	9a01      	ldr	r2, [sp, #4]
   bd3da:	2800      	cmp	r0, #0
   bd3dc:	d0e8      	beq.n	bd3b0 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0xc>
}
   bd3de:	4628      	mov	r0, r5
   bd3e0:	b003      	add	sp, #12
   bd3e2:	bd30      	pop	{r4, r5, pc}
  else if (commType == COMM_TYPE_SERIAL)
   bd3e4:	2901      	cmp	r1, #1
    return (getPortSettingsInternal(COM_PORT_SPI, maxWait));
   bd3e6:	bf18      	it	ne
   bd3e8:	2104      	movne	r1, #4
   bd3ea:	e7e4      	b.n	bd3b6 <_ZN14SFE_UBLOX_GNSS11isConnectedEt+0x12>

000bd3ec <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb>:
{
   bd3ec:	b570      	push	{r4, r5, r6, lr}
   bd3ee:	461e      	mov	r6, r3
  commType = COMM_TYPE_I2C;
   bd3f0:	2300      	movs	r3, #0
   bd3f2:	f880 30c7 	strb.w	r3, [r0, #199]	; 0xc7
  _signsOfLife = false; // Clear the _signsOfLife flag. It will be set true if valid traffic is seen.
   bd3f6:	f880 3177 	strb.w	r3, [r0, #375]	; 0x177
  if (packetCfgPayloadSize == 0)
   bd3fa:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   bd3fe:	f89d 5010 	ldrb.w	r5, [sp, #16]
  _i2cPort = &wirePort; // Grab which port the user wants us to use
   bd402:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
{
   bd406:	4604      	mov	r4, r0
  _gpsI2Caddress = deviceAddress; // Store the I2C address from user
   bd408:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
  if (packetCfgPayloadSize == 0)
   bd40c:	b91b      	cbnz	r3, bd416 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x2a>
    setPacketCfgPayloadSize(MAX_PAYLOAD_SIZE);
   bd40e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bd412:	f7fb f9ed 	bl	b87f0 <_ZN14SFE_UBLOX_GNSS23setPacketCfgPayloadSizeEj>
  createFileBuffer();
   bd416:	4620      	mov	r0, r4
   bd418:	f7fc fe04 	bl	ba024 <_ZN14SFE_UBLOX_GNSS16createFileBufferEv>
  bool connected = isConnected(maxWait);
   bd41c:	4631      	mov	r1, r6
   bd41e:	4620      	mov	r0, r4
   bd420:	f7ff ffc0 	bl	bd3a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd424:	b110      	cbz	r0, bd42c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x40>
{
   bd426:	2501      	movs	r5, #1
}
   bd428:	4628      	mov	r0, r5
   bd42a:	bd70      	pop	{r4, r5, r6, pc}
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd42c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd430:	b913      	cbnz	r3, bd438 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x4c>
   bd432:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd436:	b123      	cbz	r3, bd442 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x56>
      _debugSerial->println(F("begin: isConnected - second attempt"));
   bd438:	4917      	ldr	r1, [pc, #92]	; (bd498 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xac>)
   bd43a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd43e:	f002 fc26 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd442:	4631      	mov	r1, r6
   bd444:	4620      	mov	r0, r4
   bd446:	f7ff ffad 	bl	bd3a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if (!connected)
   bd44a:	2800      	cmp	r0, #0
   bd44c:	d1eb      	bne.n	bd426 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd44e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd452:	b913      	cbnz	r3, bd45a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x6e>
   bd454:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd458:	b123      	cbz	r3, bd464 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x78>
      _debugSerial->println(F("begin: isConnected - third attempt"));
   bd45a:	4910      	ldr	r1, [pc, #64]	; (bd49c <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb0>)
   bd45c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd460:	f002 fc15 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
    connected = isConnected(maxWait);
   bd464:	4631      	mov	r1, r6
   bd466:	4620      	mov	r0, r4
   bd468:	f7ff ff9c 	bl	bd3a4 <_ZN14SFE_UBLOX_GNSS11isConnectedEt>
  if ((!connected) && assumeSuccess && _signsOfLife) // Advanced users can assume success if required. Useful if the port is outputting messages at high navigation rate.
   bd46c:	2800      	cmp	r0, #0
   bd46e:	d1da      	bne.n	bd426 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
   bd470:	2d00      	cmp	r5, #0
   bd472:	d0d9      	beq.n	bd428 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd474:	f894 5177 	ldrb.w	r5, [r4, #375]	; 0x177
   bd478:	2d00      	cmp	r5, #0
   bd47a:	d0d5      	beq.n	bd428 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
    if ((_printDebug == true) || (_printLimitedDebug == true)) // This is important. Print this if doing limited debugging
   bd47c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   bd480:	b91b      	cbnz	r3, bd48a <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x9e>
   bd482:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   bd486:	2b00      	cmp	r3, #0
   bd488:	d0cd      	beq.n	bd426 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3a>
      _debugSerial->println(F("begin: third attempt failed. Assuming success..."));
   bd48a:	4905      	ldr	r1, [pc, #20]	; (bd4a0 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0xb4>)
   bd48c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   bd490:	f002 fbfd 	bl	bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>
   bd494:	e7c8      	b.n	bd428 <_ZN14SFE_UBLOX_GNSS5beginER7TwoWirehtb+0x3c>
   bd496:	bf00      	nop
   bd498:	000c7aaf 	.word	0x000c7aaf
   bd49c:	000c7ad3 	.word	0x000c7ad3
   bd4a0:	000c7af6 	.word	0x000c7af6

000bd4a4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt>:
{
   bd4a4:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd4a6:	6a03      	ldr	r3, [r0, #32]
{
   bd4a8:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd4aa:	b91b      	cbnz	r3, bd4b4 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x10>
   bd4ac:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd4ae:	f7ff fed7 	bl	bd260 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd4b2:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd4b4:	6a20      	ldr	r0, [r4, #32]
   bd4b6:	b1b0      	cbz	r0, bd4e6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon == false)
   bd4b8:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd4bc:	07db      	lsls	r3, r3, #31
   bd4be:	d402      	bmi.n	bd4c6 <_ZN14SFE_UBLOX_GNSS12getLongitudeEt+0x22>
    getPVT(maxWait);
   bd4c0:	4620      	mov	r0, r4
   bd4c2:	f7ff feed 	bl	bd2a0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lon = false; // Since we are about to give this to user, mark this data as stale
   bd4c6:	6a23      	ldr	r3, [r4, #32]
   bd4c8:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd4cc:	f36f 0200 	bfc	r2, #0, #1
   bd4d0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd4d4:	6a23      	ldr	r3, [r4, #32]
   bd4d6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd4da:	f36f 0200 	bfc	r2, #0, #1
   bd4de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lon);
   bd4e2:	6a23      	ldr	r3, [r4, #32]
   bd4e4:	69d8      	ldr	r0, [r3, #28]
}
   bd4e6:	b002      	add	sp, #8
   bd4e8:	bd10      	pop	{r4, pc}

000bd4ea <_ZN14SFE_UBLOX_GNSS11getLatitudeEt>:
{
   bd4ea:	b513      	push	{r0, r1, r4, lr}
  if (packetUBXNAVPVT == NULL)
   bd4ec:	6a03      	ldr	r3, [r0, #32]
{
   bd4ee:	4604      	mov	r4, r0
  if (packetUBXNAVPVT == NULL)
   bd4f0:	b91b      	cbnz	r3, bd4fa <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x10>
   bd4f2:	9101      	str	r1, [sp, #4]
    initPacketUBXNAVPVT();     // Check that RAM has been allocated for the PVT data
   bd4f4:	f7ff feb4 	bl	bd260 <_ZN14SFE_UBLOX_GNSS19initPacketUBXNAVPVTEv>
   bd4f8:	9901      	ldr	r1, [sp, #4]
  if (packetUBXNAVPVT == NULL) // Bail if the RAM allocation failed
   bd4fa:	6a20      	ldr	r0, [r4, #32]
   bd4fc:	b1b0      	cbz	r0, bd52c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x42>
  if (packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat == false)
   bd4fe:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
   bd502:	079b      	lsls	r3, r3, #30
   bd504:	d402      	bmi.n	bd50c <_ZN14SFE_UBLOX_GNSS11getLatitudeEt+0x22>
    getPVT(maxWait);
   bd506:	4620      	mov	r0, r4
   bd508:	f7ff feca 	bl	bd2a0 <_ZN14SFE_UBLOX_GNSS6getPVTEt>
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.lat = false; // Since we are about to give this to user, mark this data as stale
   bd50c:	6a23      	ldr	r3, [r4, #32]
   bd50e:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
   bd512:	f36f 0241 	bfc	r2, #1, #1
   bd516:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  packetUBXNAVPVT->moduleQueried.moduleQueried1.bits.all = false;
   bd51a:	6a23      	ldr	r3, [r4, #32]
   bd51c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   bd520:	f36f 0200 	bfc	r2, #0, #1
   bd524:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  return (packetUBXNAVPVT->data.lat);
   bd528:	6a23      	ldr	r3, [r4, #32]
   bd52a:	6a18      	ldr	r0, [r3, #32]
}
   bd52c:	b002      	add	sp, #8
   bd52e:	bd10      	pop	{r4, pc}

000bd530 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bd530:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bd532:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bd534:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bd538:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bd53a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bd53e:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bd540:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bd544:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bd546:	2500      	movs	r5, #0
  _width = width;
   bd548:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bd54c:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bd54e:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bd552:	7303      	strb	r3, [r0, #12]
}
   bd554:	bd30      	pop	{r4, r5, pc}

000bd556 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd556:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd558:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd55a:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd55c:	b085      	sub	sp, #20
   bd55e:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bd560:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd562:	f88d 400c 	strb.w	r4, [sp, #12]
   bd566:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bd568:	460e      	mov	r6, r1
   bd56a:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bd56c:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bd570:	b140      	cbz	r0, bd584 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd572:	7b5b      	ldrb	r3, [r3, #13]
   bd574:	9301      	str	r3, [sp, #4]
   bd576:	ab03      	add	r3, sp, #12
   bd578:	9300      	str	r3, [sp, #0]
   bd57a:	2301      	movs	r3, #1
   bd57c:	f000 fa24 	bl	bd9c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bd580:	b005      	add	sp, #20
   bd582:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bd584:	6858      	ldr	r0, [r3, #4]
   bd586:	2800      	cmp	r0, #0
   bd588:	d0fa      	beq.n	bd580 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd58a:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bd58e:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd592:	f1be 0f03 	cmp.w	lr, #3
   bd596:	d10c      	bne.n	bd5b2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd598:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bd59c:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd5a0:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bd5a2:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd5a6:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bd5aa:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd5ac:	f000 f97b 	bl	bd8a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bd5b0:	e7e6      	b.n	bd580 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd5b2:	f1be 0f00 	cmp.w	lr, #0
   bd5b6:	d109      	bne.n	bd5cc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bd5b8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bd5bc:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bd5c0:	f8cd c000 	str.w	ip, [sp]
   bd5c4:	ab03      	add	r3, sp, #12
   bd5c6:	463a      	mov	r2, r7
   bd5c8:	4631      	mov	r1, r6
   bd5ca:	e7ef      	b.n	bd5ac <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd5cc:	f1be 0f02 	cmp.w	lr, #2
   bd5d0:	d102      	bne.n	bd5d8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bd5d2:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bd5d6:	e7f1      	b.n	bd5bc <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd5d8:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bd5dc:	bf01      	itttt	eq
   bd5de:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bd5e2:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bd5e6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bd5ea:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bd5ee:	e7e7      	b.n	bd5c0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bd5f0 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bd5f0:	b4f0      	push	{r4, r5, r6, r7}
   bd5f2:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bd5f4:	b902      	cbnz	r2, bd5f8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bd5f6:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bd5f8:	2a04      	cmp	r2, #4
   bd5fa:	d814      	bhi.n	bd626 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bd5fc:	f100 050f 	add.w	r5, r0, #15
   bd600:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bd602:	1884      	adds	r4, r0, r2
   bd604:	4629      	mov	r1, r5
   bd606:	4284      	cmp	r4, r0
   bd608:	d009      	beq.n	bd61e <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bd60a:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bd60c:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bd60e:	b927      	cbnz	r7, bd61a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bd610:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bd612:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bd614:	3501      	adds	r5, #1
   bd616:	3c01      	subs	r4, #1
   bd618:	e7f5      	b.n	bd606 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bd61a:	73a6      	strb	r6, [r4, #14]
   bd61c:	e7f9      	b.n	bd612 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bd61e:	4620      	mov	r0, r4
}
   bd620:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bd622:	f7ff bf98 	b.w	bd556 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bd626:	2000      	movs	r0, #0
   bd628:	bcf0      	pop	{r4, r5, r6, r7}
   bd62a:	4770      	bx	lr

000bd62c <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd62c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bd62e:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bd630:	7a85      	ldrb	r5, [r0, #10]
   bd632:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd636:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bd638:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bd63a:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bd63c:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bd63e:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bd642:	b140      	cbz	r0, bd656 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd644:	2100      	movs	r1, #0
   bd646:	e9cd 2100 	strd	r2, r1, [sp]
   bd64a:	a903      	add	r1, sp, #12
   bd64c:	7b62      	ldrb	r2, [r4, #13]
   bd64e:	f000 fa29 	bl	bdaa4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bd652:	b004      	add	sp, #16
   bd654:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bd656:	6860      	ldr	r0, [r4, #4]
   bd658:	2800      	cmp	r0, #0
   bd65a:	d0fa      	beq.n	bd652 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd65c:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd65e:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bd660:	2903      	cmp	r1, #3
   bd662:	d10d      	bne.n	bd680 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bd664:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd668:	21ff      	movs	r1, #255	; 0xff
   bd66a:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bd66e:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bd672:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bd676:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd678:	a903      	add	r1, sp, #12
   bd67a:	f000 f946 	bl	bd90a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bd67e:	e7e8      	b.n	bd652 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bd680:	b941      	cbnz	r1, bd694 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bd682:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bd686:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bd68a:	21ff      	movs	r1, #255	; 0xff
   bd68c:	e9cd 2100 	strd	r2, r1, [sp]
   bd690:	4622      	mov	r2, r4
   bd692:	e7f1      	b.n	bd678 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bd694:	2902      	cmp	r1, #2
   bd696:	d102      	bne.n	bd69e <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bd698:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bd69c:	e7f3      	b.n	bd686 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bd69e:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bd6a0:	bf02      	ittt	eq
   bd6a2:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bd6a6:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bd6aa:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bd6ae:	e7ec      	b.n	bd68a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bd6b0 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bd6b0:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bd6b2:	f100 050f 	add.w	r5, r0, #15
   bd6b6:	7b02      	ldrb	r2, [r0, #12]
   bd6b8:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bd6ba:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bd6bc:	f7ff ffb6 	bl	bd62c <_ZN23Adafruit_BusIO_Register4readEPhh>
   bd6c0:	b178      	cbz	r0, bd6e2 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bd6c2:	7b22      	ldrb	r2, [r4, #12]
   bd6c4:	4629      	mov	r1, r5
   bd6c6:	4422      	add	r2, r4
  uint32_t value = 0;
   bd6c8:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bd6ca:	42a2      	cmp	r2, r4
   bd6cc:	d00b      	beq.n	bd6e6 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bd6ce:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bd6d0:	7ba0      	ldrb	r0, [r4, #14]
   bd6d2:	b920      	cbnz	r0, bd6de <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bd6d4:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bd6d6:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bd6d8:	3a01      	subs	r2, #1
   bd6da:	3101      	adds	r1, #1
   bd6dc:	e7f5      	b.n	bd6ca <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bd6de:	7808      	ldrb	r0, [r1, #0]
   bd6e0:	e7f9      	b.n	bd6d6 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bd6e2:	f04f 30ff 	mov.w	r0, #4294967295
}
   bd6e6:	bd38      	pop	{r3, r4, r5, pc}

000bd6e8 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bd6e8:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bd6ea:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bd6ec:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bd6ee:	7143      	strb	r3, [r0, #5]
}
   bd6f0:	bd10      	pop	{r4, pc}

000bd6f2 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bd6f2:	b510      	push	{r4, lr}
   bd6f4:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd6f6:	6800      	ldr	r0, [r0, #0]
   bd6f8:	f7ff ffda 	bl	bd6b0 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bd6fc:	7922      	ldrb	r2, [r4, #4]
   bd6fe:	2301      	movs	r3, #1
   bd700:	4093      	lsls	r3, r2
  val >>= _shift;
   bd702:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bd704:	3b01      	subs	r3, #1
  val >>= _shift;
   bd706:	40d0      	lsrs	r0, r2
}
   bd708:	4018      	ands	r0, r3
   bd70a:	bd10      	pop	{r4, pc}

000bd70c <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd70c:	b570      	push	{r4, r5, r6, lr}
   bd70e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bd710:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bd712:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bd714:	f7ff ffcc 	bl	bd6b0 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bd718:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bd71a:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bd71c:	2201      	movs	r2, #1
   bd71e:	409a      	lsls	r2, r3
   bd720:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bd722:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bd726:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bd72a:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bd72c:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bd72e:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bd732:	4329      	orrs	r1, r5
   bd734:	7b02      	ldrb	r2, [r0, #12]
}
   bd736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bd73a:	f7ff bf59 	b.w	bd5f0 <_ZN23Adafruit_BusIO_Register5writeEmh>
	...

000bd740 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd744:	4604      	mov	r4, r0
  if (_spi) {
   bd746:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bd748:	b085      	sub	sp, #20
   bd74a:	460d      	mov	r5, r1
  if (_spi) {
   bd74c:	b140      	cbz	r0, bd760 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bd74e:	2300      	movs	r3, #0
   bd750:	9300      	str	r3, [sp, #0]
   bd752:	4613      	mov	r3, r2
   bd754:	460a      	mov	r2, r1
   bd756:	f000 ff15 	bl	be584 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bd75a:	b005      	add	sp, #20
   bd75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bd760:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd762:	68a0      	ldr	r0, [r4, #8]
   bd764:	4f48      	ldr	r7, [pc, #288]	; (bd888 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bd766:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bd76a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd76c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bd76e:	bf0c      	ite	eq
   bd770:	f04f 0b01 	moveq.w	fp, #1
   bd774:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bd778:	ea1b 0f03 	tst.w	fp, r3
   bd77c:	eb01 0302 	add.w	r3, r1, r2
   bd780:	bf0c      	ite	eq
   bd782:	f04f 0901 	moveq.w	r9, #1
   bd786:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bd78a:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bd78c:	9303      	str	r3, [sp, #12]
   bd78e:	9b03      	ldr	r3, [sp, #12]
   bd790:	42ab      	cmp	r3, r5
   bd792:	d0e2      	beq.n	bd75a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bd794:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bd798:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bd79a:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bd79e:	b117      	cbz	r7, bd7a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bd7a0:	4638      	mov	r0, r7
   bd7a2:	f000 f9ff 	bl	bdba4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bd7a6:	7b63      	ldrb	r3, [r4, #13]
   bd7a8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bd7ac:	d141      	bne.n	bd832 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd7ae:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd7b2:	1c5a      	adds	r2, r3, #1
   bd7b4:	d00f      	beq.n	bd7d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bd7b6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bd7ba:	bf14      	ite	ne
   bd7bc:	2301      	movne	r3, #1
   bd7be:	2300      	moveq	r3, #0
   bd7c0:	454b      	cmp	r3, r9
   bd7c2:	d008      	beq.n	bd7d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bd7c4:	6963      	ldr	r3, [r4, #20]
   bd7c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bd7c8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bd7ca:	2900      	cmp	r1, #0
   bd7cc:	d02c      	beq.n	bd828 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bd7ce:	4302      	orrs	r2, r0
   bd7d0:	601a      	str	r2, [r3, #0]
   bd7d2:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bd7d6:	69a1      	ldr	r1, [r4, #24]
   bd7d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd7da:	680a      	ldr	r2, [r1, #0]
   bd7dc:	4313      	orrs	r3, r2
   bd7de:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd7e0:	b117      	cbz	r7, bd7e8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bd7e2:	4638      	mov	r0, r7
   bd7e4:	f000 f9de 	bl	bdba4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bd7e8:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd7ec:	3301      	adds	r3, #1
   bd7ee:	d006      	beq.n	bd7fe <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bd7f0:	69e3      	ldr	r3, [r4, #28]
   bd7f2:	681a      	ldr	r2, [r3, #0]
   bd7f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd7f6:	421a      	tst	r2, r3
            reply |= b;
   bd7f8:	bf18      	it	ne
   bd7fa:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bd7fe:	69a1      	ldr	r1, [r4, #24]
   bd800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd802:	680a      	ldr	r2, [r1, #0]
   bd804:	ea22 0303 	bic.w	r3, r2, r3
   bd808:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bd80a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd80e:	3301      	adds	r3, #1
        buffer[i] = reply;
   bd810:	bf18      	it	ne
   bd812:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bd816:	7b23      	ldrb	r3, [r4, #12]
   bd818:	2b00      	cmp	r3, #0
   bd81a:	d132      	bne.n	bd882 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bd81c:	0076      	lsls	r6, r6, #1
   bd81e:	b2f6      	uxtb	r6, r6
   bd820:	2e00      	cmp	r6, #0
   bd822:	d1bc      	bne.n	bd79e <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bd824:	3501      	adds	r5, #1
   bd826:	e7b2      	b.n	bd78e <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bd828:	ea22 0200 	bic.w	r2, r2, r0
   bd82c:	601a      	str	r2, [r3, #0]
   bd82e:	4689      	mov	r9, r1
   bd830:	e7d1      	b.n	bd7d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bd832:	69a1      	ldr	r1, [r4, #24]
   bd834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd836:	680a      	ldr	r2, [r1, #0]
   bd838:	4313      	orrs	r3, r2
   bd83a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bd83c:	b117      	cbz	r7, bd844 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bd83e:	4638      	mov	r0, r7
   bd840:	f000 f9b0 	bl	bdba4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bd844:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bd848:	3301      	adds	r3, #1
   bd84a:	d008      	beq.n	bd85e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bd84c:	6963      	ldr	r3, [r4, #20]
   bd84e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bd850:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bd852:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bd856:	bf14      	ite	ne
   bd858:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bd85a:	438a      	biceq	r2, r1
   bd85c:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bd85e:	69a1      	ldr	r1, [r4, #24]
   bd860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bd862:	680a      	ldr	r2, [r1, #0]
   bd864:	ea22 0303 	bic.w	r3, r2, r3
   bd868:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bd86a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bd86e:	3301      	adds	r3, #1
   bd870:	d0cb      	beq.n	bd80a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bd872:	69e3      	ldr	r3, [r4, #28]
   bd874:	681a      	ldr	r2, [r3, #0]
   bd876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bd878:	421a      	tst	r2, r3
            reply |= b;
   bd87a:	bf18      	it	ne
   bd87c:	ea46 0808 	orrne.w	r8, r6, r8
   bd880:	e7c3      	b.n	bd80a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bd882:	0876      	lsrs	r6, r6, #1
   bd884:	e7cc      	b.n	bd820 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bd886:	bf00      	nop
   bd888:	0007a120 	.word	0x0007a120

000bd88c <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bd88c:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bd88e:	2201      	movs	r2, #1
  uint8_t data = send;
   bd890:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bd894:	f10d 0107 	add.w	r1, sp, #7
   bd898:	f7ff ff52 	bl	bd740 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bd89c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bd8a0:	b003      	add	sp, #12
   bd8a2:	f85d fb04 	ldr.w	pc, [sp], #4

000bd8a6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd8aa:	4604      	mov	r4, r0
  if (_spi) {
   bd8ac:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bd8ae:	460e      	mov	r6, r1
   bd8b0:	4617      	mov	r7, r2
   bd8b2:	461d      	mov	r5, r3
  if (_spi) {
   bd8b4:	b110      	cbz	r0, bd8bc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bd8b6:	6861      	ldr	r1, [r4, #4]
   bd8b8:	f000 fdf0 	bl	be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd8bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd8c0:	2100      	movs	r1, #0
   bd8c2:	b280      	uxth	r0, r0
   bd8c4:	f004 fb6f 	bl	c1fa6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bd8c8:	9b06      	ldr	r3, [sp, #24]
   bd8ca:	eb05 0803 	add.w	r8, r5, r3
   bd8ce:	4545      	cmp	r5, r8
   bd8d0:	d108      	bne.n	bd8e4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bd8d2:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bd8d4:	42b7      	cmp	r7, r6
   bd8d6:	d00b      	beq.n	bd8f0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bd8d8:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd8dc:	4620      	mov	r0, r4
   bd8de:	f7ff ffd5 	bl	bd88c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bd8e2:	e7f7      	b.n	bd8d4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bd8e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   bd8e8:	4620      	mov	r0, r4
   bd8ea:	f7ff ffcf 	bl	bd88c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bd8ee:	e7ee      	b.n	bd8ce <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bd8f0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd8f4:	2101      	movs	r1, #1
   bd8f6:	b280      	uxth	r0, r0
   bd8f8:	f004 fb55 	bl	c1fa6 <digitalWrite>

  if (_spi) {
   bd8fc:	6820      	ldr	r0, [r4, #0]
   bd8fe:	b108      	cbz	r0, bd904 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bd900:	f000 fdb2 	bl	be468 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bd904:	2001      	movs	r0, #1
   bd906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd90a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bd90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd90e:	4604      	mov	r4, r0
  if (_spi) {
   bd910:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bd912:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bd916:	460e      	mov	r6, r1
   bd918:	4617      	mov	r7, r2
   bd91a:	461d      	mov	r5, r3
  if (_spi) {
   bd91c:	b110      	cbz	r0, bd924 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bd91e:	6861      	ldr	r1, [r4, #4]
   bd920:	f000 fdbc 	bl	be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bd924:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd928:	2100      	movs	r1, #0
   bd92a:	b280      	uxth	r0, r0
   bd92c:	f004 fb3b 	bl	c1fa6 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   bd930:	4437      	add	r7, r6
   bd932:	42be      	cmp	r6, r7
   bd934:	d10a      	bne.n	bd94c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   bd936:	9b06      	ldr	r3, [sp, #24]
   bd938:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   bd93a:	42ae      	cmp	r6, r5
   bd93c:	d00c      	beq.n	bd958 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   bd93e:	4641      	mov	r1, r8
   bd940:	4620      	mov	r0, r4
   bd942:	f7ff ffa3 	bl	bd88c <_ZN18Adafruit_SPIDevice8transferEh>
   bd946:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   bd94a:	e7f6      	b.n	bd93a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   bd94c:	f816 1b01 	ldrb.w	r1, [r6], #1
   bd950:	4620      	mov	r0, r4
   bd952:	f7ff ff9b 	bl	bd88c <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   bd956:	e7ec      	b.n	bd932 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   bd958:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bd95c:	2101      	movs	r1, #1
   bd95e:	b280      	uxth	r0, r0
   bd960:	f004 fb21 	bl	c1fa6 <digitalWrite>

  if (_spi) {
   bd964:	6820      	ldr	r0, [r4, #0]
   bd966:	b108      	cbz	r0, bd96c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   bd968:	f000 fd7e 	bl	be468 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   bd96c:	2001      	movs	r0, #1
   bd96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bd972 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bd972:	6042      	str	r2, [r0, #4]
  _begun = false;
   bd974:	2200      	movs	r2, #0
   bd976:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bd978:	2220      	movs	r2, #32
  _addr = addr;
   bd97a:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bd97c:	60c2      	str	r2, [r0, #12]
#endif
}
   bd97e:	4770      	bx	lr

000bd980 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bd980:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bd982:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bd984:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bd986:	b153      	cbz	r3, bd99e <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bd988:	7821      	ldrb	r1, [r4, #0]
   bd98a:	6860      	ldr	r0, [r4, #4]
   bd98c:	f004 f824 	bl	c19d8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bd990:	6860      	ldr	r0, [r4, #4]
   bd992:	f004 f82c 	bl	c19ee <_ZN7TwoWire15endTransmissionEv>
   bd996:	fab0 f080 	clz	r0, r0
   bd99a:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bd99c:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bd99e:	2101      	movs	r1, #1
   bd9a0:	f000 f803 	bl	bd9aa <_ZN18Adafruit_I2CDevice5beginEb>
   bd9a4:	2800      	cmp	r0, #0
   bd9a6:	d1ef      	bne.n	bd988 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bd9a8:	e7f8      	b.n	bd99c <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bd9aa <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd9aa:	b538      	push	{r3, r4, r5, lr}
   bd9ac:	4604      	mov	r4, r0
  _wire->begin();
   bd9ae:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bd9b0:	460d      	mov	r5, r1
  _wire->begin();
   bd9b2:	f003 ffdf 	bl	c1974 <_ZN7TwoWire5beginEv>
  _begun = true;
   bd9b6:	2001      	movs	r0, #1
   bd9b8:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bd9ba:	b125      	cbz	r5, bd9c6 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bd9bc:	4620      	mov	r0, r4
}
   bd9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bd9c2:	f7ff bfdd 	b.w	bd980 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bd9c6:	bd38      	pop	{r3, r4, r5, pc}

000bd9c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bd9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd9cc:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bd9d0:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bd9d2:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bd9d4:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bd9d6:	4432      	add	r2, r6
   bd9d8:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bd9da:	4604      	mov	r4, r0
   bd9dc:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bd9de:	d902      	bls.n	bd9e6 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bd9e0:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   bd9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bd9e6:	7801      	ldrb	r1, [r0, #0]
   bd9e8:	6840      	ldr	r0, [r0, #4]
   bd9ea:	f003 fff5 	bl	c19d8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bd9ee:	b97e      	cbnz	r6, bda10 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bd9f0:	6860      	ldr	r0, [r4, #4]
   bd9f2:	6803      	ldr	r3, [r0, #0]
   bd9f4:	462a      	mov	r2, r5
   bd9f6:	68db      	ldr	r3, [r3, #12]
   bd9f8:	4641      	mov	r1, r8
   bd9fa:	4798      	blx	r3
   bd9fc:	4285      	cmp	r5, r0
   bd9fe:	d1ef      	bne.n	bd9e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bda00:	6860      	ldr	r0, [r4, #4]
   bda02:	4639      	mov	r1, r7
   bda04:	f003 ffef 	bl	c19e6 <_ZN7TwoWire15endTransmissionEh>
   bda08:	fab0 f080 	clz	r0, r0
   bda0c:	0940      	lsrs	r0, r0, #5
   bda0e:	e7e8      	b.n	bd9e2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bda10:	f1b9 0f00 	cmp.w	r9, #0
   bda14:	d0ec      	beq.n	bd9f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bda16:	6860      	ldr	r0, [r4, #4]
   bda18:	6803      	ldr	r3, [r0, #0]
   bda1a:	4632      	mov	r2, r6
   bda1c:	68db      	ldr	r3, [r3, #12]
   bda1e:	4649      	mov	r1, r9
   bda20:	4798      	blx	r3
   bda22:	4286      	cmp	r6, r0
   bda24:	d1dc      	bne.n	bd9e0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bda26:	e7e3      	b.n	bd9f0 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bda28 <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   bda28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda2c:	4615      	mov	r5, r2
   bda2e:	4604      	mov	r4, r0
   bda30:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bda32:	b2d2      	uxtb	r2, r2
   bda34:	7801      	ldrb	r1, [r0, #0]
   bda36:	6840      	ldr	r0, [r0, #4]
   bda38:	f003 ffb9 	bl	c19ae <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bda3c:	4285      	cmp	r5, r0
   bda3e:	d10d      	bne.n	bda5c <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   bda40:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bda42:	fa1f f887 	uxth.w	r8, r7
   bda46:	45a8      	cmp	r8, r5
   bda48:	f107 0701 	add.w	r7, r7, #1
   bda4c:	d209      	bcs.n	bda62 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   bda4e:	6860      	ldr	r0, [r4, #4]
   bda50:	6803      	ldr	r3, [r0, #0]
   bda52:	695b      	ldr	r3, [r3, #20]
   bda54:	4798      	blx	r3
   bda56:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bda5a:	e7f2      	b.n	bda42 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   bda5c:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bda5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bda62:	2001      	movs	r0, #1
   bda64:	e7fb      	b.n	bda5e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000bda66 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bda66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bda6a:	4607      	mov	r7, r0
   bda6c:	4688      	mov	r8, r1
   bda6e:	4616      	mov	r6, r2
   bda70:	4699      	mov	r9, r3
  size_t pos = 0;
   bda72:	2500      	movs	r5, #0
  while (pos < len) {
   bda74:	42b5      	cmp	r5, r6
   bda76:	d212      	bcs.n	bda9e <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   bda78:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   bda7a:	1b74      	subs	r4, r6, r5
   bda7c:	4294      	cmp	r4, r2
   bda7e:	bf28      	it	cs
   bda80:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   bda82:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   bda84:	42ab      	cmp	r3, r5
   bda86:	bf94      	ite	ls
   bda88:	464b      	movls	r3, r9
   bda8a:	2300      	movhi	r3, #0
   bda8c:	4622      	mov	r2, r4
   bda8e:	eb08 0105 	add.w	r1, r8, r5
   bda92:	4638      	mov	r0, r7
   bda94:	f7ff ffc8 	bl	bda28 <_ZN18Adafruit_I2CDevice5_readEPhjb>
   bda98:	b110      	cbz	r0, bdaa0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   bda9a:	4425      	add	r5, r4
  while (pos < len) {
   bda9c:	e7ea      	b.n	bda74 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   bda9e:	2001      	movs	r0, #1
}
   bdaa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bdaa4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bdaa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bdaa6:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bdaa8:	2300      	movs	r3, #0
   bdaaa:	e9cd 3300 	strd	r3, r3, [sp]
   bdaae:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bdab2:	9e06      	ldr	r6, [sp, #24]
   bdab4:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bdab6:	f7ff ff87 	bl	bd9c8 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bdaba:	b140      	cbz	r0, bdace <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bdabc:	2301      	movs	r3, #1
   bdabe:	4632      	mov	r2, r6
   bdac0:	4629      	mov	r1, r5
   bdac2:	4620      	mov	r0, r4
}
   bdac4:	b002      	add	sp, #8
   bdac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bdaca:	f7ff bfcc 	b.w	bda66 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bdace:	b002      	add	sp, #8
   bdad0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bdad4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bdad4:	b508      	push	{r3, lr}
   bdad6:	4b02      	ldr	r3, [pc, #8]	; (bdae0 <netdb_freeaddrinfo+0xc>)
   bdad8:	681b      	ldr	r3, [r3, #0]
   bdada:	689b      	ldr	r3, [r3, #8]
   bdadc:	9301      	str	r3, [sp, #4]
   bdade:	bd08      	pop	{r3, pc}
   bdae0:	00030268 	.word	0x00030268

000bdae4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bdae4:	b508      	push	{r3, lr}
   bdae6:	4b02      	ldr	r3, [pc, #8]	; (bdaf0 <netdb_getaddrinfo+0xc>)
   bdae8:	681b      	ldr	r3, [r3, #0]
   bdaea:	68db      	ldr	r3, [r3, #12]
   bdaec:	9301      	str	r3, [sp, #4]
   bdaee:	bd08      	pop	{r3, pc}
   bdaf0:	00030268 	.word	0x00030268

000bdaf4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bdaf4:	b508      	push	{r3, lr}
   bdaf6:	4b02      	ldr	r3, [pc, #8]	; (bdb00 <HAL_Validate_Pin_Function+0xc>)
   bdaf8:	681b      	ldr	r3, [r3, #0]
   bdafa:	685b      	ldr	r3, [r3, #4]
   bdafc:	9301      	str	r3, [sp, #4]
   bdafe:	bd08      	pop	{r3, pc}
   bdb00:	0003022c 	.word	0x0003022c

000bdb04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bdb04:	b508      	push	{r3, lr}
   bdb06:	4b02      	ldr	r3, [pc, #8]	; (bdb10 <HAL_Pin_Mode+0xc>)
   bdb08:	681b      	ldr	r3, [r3, #0]
   bdb0a:	689b      	ldr	r3, [r3, #8]
   bdb0c:	9301      	str	r3, [sp, #4]
   bdb0e:	bd08      	pop	{r3, pc}
   bdb10:	0003022c 	.word	0x0003022c

000bdb14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bdb14:	b508      	push	{r3, lr}
   bdb16:	4b02      	ldr	r3, [pc, #8]	; (bdb20 <HAL_Get_Pin_Mode+0xc>)
   bdb18:	681b      	ldr	r3, [r3, #0]
   bdb1a:	68db      	ldr	r3, [r3, #12]
   bdb1c:	9301      	str	r3, [sp, #4]
   bdb1e:	bd08      	pop	{r3, pc}
   bdb20:	0003022c 	.word	0x0003022c

000bdb24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bdb24:	b508      	push	{r3, lr}
   bdb26:	4b02      	ldr	r3, [pc, #8]	; (bdb30 <HAL_GPIO_Write+0xc>)
   bdb28:	681b      	ldr	r3, [r3, #0]
   bdb2a:	691b      	ldr	r3, [r3, #16]
   bdb2c:	9301      	str	r3, [sp, #4]
   bdb2e:	bd08      	pop	{r3, pc}
   bdb30:	0003022c 	.word	0x0003022c

000bdb34 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bdb34:	b508      	push	{r3, lr}
   bdb36:	4b02      	ldr	r3, [pc, #8]	; (bdb40 <HAL_GPIO_Read+0xc>)
   bdb38:	681b      	ldr	r3, [r3, #0]
   bdb3a:	695b      	ldr	r3, [r3, #20]
   bdb3c:	9301      	str	r3, [sp, #4]
   bdb3e:	bd08      	pop	{r3, pc}
   bdb40:	0003022c 	.word	0x0003022c

000bdb44 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bdb44:	b508      	push	{r3, lr}
   bdb46:	4b02      	ldr	r3, [pc, #8]	; (bdb50 <HAL_Interrupts_Attach+0xc>)
   bdb48:	681b      	ldr	r3, [r3, #0]
   bdb4a:	699b      	ldr	r3, [r3, #24]
   bdb4c:	9301      	str	r3, [sp, #4]
   bdb4e:	bd08      	pop	{r3, pc}
   bdb50:	0003022c 	.word	0x0003022c

000bdb54 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bdb54:	b508      	push	{r3, lr}
   bdb56:	4b02      	ldr	r3, [pc, #8]	; (bdb60 <HAL_Interrupts_Detach+0xc>)
   bdb58:	681b      	ldr	r3, [r3, #0]
   bdb5a:	69db      	ldr	r3, [r3, #28]
   bdb5c:	9301      	str	r3, [sp, #4]
   bdb5e:	bd08      	pop	{r3, pc}
   bdb60:	0003022c 	.word	0x0003022c

000bdb64 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   bdb64:	b508      	push	{r3, lr}
   bdb66:	4b02      	ldr	r3, [pc, #8]	; (bdb70 <HAL_Interrupts_Enable_All+0xc>)
   bdb68:	681b      	ldr	r3, [r3, #0]
   bdb6a:	6a1b      	ldr	r3, [r3, #32]
   bdb6c:	9301      	str	r3, [sp, #4]
   bdb6e:	bd08      	pop	{r3, pc}
   bdb70:	0003022c 	.word	0x0003022c

000bdb74 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   bdb74:	b508      	push	{r3, lr}
   bdb76:	4b02      	ldr	r3, [pc, #8]	; (bdb80 <HAL_Interrupts_Disable_All+0xc>)
   bdb78:	681b      	ldr	r3, [r3, #0]
   bdb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdb7c:	9301      	str	r3, [sp, #4]
   bdb7e:	bd08      	pop	{r3, pc}
   bdb80:	0003022c 	.word	0x0003022c

000bdb84 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bdb84:	b508      	push	{r3, lr}
   bdb86:	4b02      	ldr	r3, [pc, #8]	; (bdb90 <hal_adc_read+0xc>)
   bdb88:	681b      	ldr	r3, [r3, #0]
   bdb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdb8c:	9301      	str	r3, [sp, #4]
   bdb8e:	bd08      	pop	{r3, pc}
   bdb90:	0003022c 	.word	0x0003022c

000bdb94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bdb94:	b508      	push	{r3, lr}
   bdb96:	4b02      	ldr	r3, [pc, #8]	; (bdba0 <HAL_RNG_GetRandomNumber+0xc>)
   bdb98:	681b      	ldr	r3, [r3, #0]
   bdb9a:	685b      	ldr	r3, [r3, #4]
   bdb9c:	9301      	str	r3, [sp, #4]
   bdb9e:	bd08      	pop	{r3, pc}
   bdba0:	00030218 	.word	0x00030218

000bdba4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bdba4:	b508      	push	{r3, lr}
   bdba6:	4b02      	ldr	r3, [pc, #8]	; (bdbb0 <HAL_Delay_Microseconds+0xc>)
   bdba8:	681b      	ldr	r3, [r3, #0]
   bdbaa:	68db      	ldr	r3, [r3, #12]
   bdbac:	9301      	str	r3, [sp, #4]
   bdbae:	bd08      	pop	{r3, pc}
   bdbb0:	00030218 	.word	0x00030218

000bdbb4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   bdbb4:	b508      	push	{r3, lr}
   bdbb6:	4b02      	ldr	r3, [pc, #8]	; (bdbc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   bdbb8:	681b      	ldr	r3, [r3, #0]
   bdbba:	691b      	ldr	r3, [r3, #16]
   bdbbc:	9301      	str	r3, [sp, #4]
   bdbbe:	bd08      	pop	{r3, pc}
   bdbc0:	00030218 	.word	0x00030218

000bdbc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bdbc4:	b508      	push	{r3, lr}
   bdbc6:	4b02      	ldr	r3, [pc, #8]	; (bdbd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bdbc8:	681b      	ldr	r3, [r3, #0]
   bdbca:	695b      	ldr	r3, [r3, #20]
   bdbcc:	9301      	str	r3, [sp, #4]
   bdbce:	bd08      	pop	{r3, pc}
   bdbd0:	00030218 	.word	0x00030218

000bdbd4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bdbd4:	b508      	push	{r3, lr}
   bdbd6:	4b02      	ldr	r3, [pc, #8]	; (bdbe0 <hal_rtc_time_is_valid+0xc>)
   bdbd8:	681b      	ldr	r3, [r3, #0]
   bdbda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdbdc:	9301      	str	r3, [sp, #4]
   bdbde:	bd08      	pop	{r3, pc}
   bdbe0:	00030218 	.word	0x00030218

000bdbe4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bdbe4:	b508      	push	{r3, lr}
   bdbe6:	4b02      	ldr	r3, [pc, #8]	; (bdbf0 <hal_rtc_get_time+0xc>)
   bdbe8:	681b      	ldr	r3, [r3, #0]
   bdbea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bdbec:	9301      	str	r3, [sp, #4]
   bdbee:	bd08      	pop	{r3, pc}
   bdbf0:	00030218 	.word	0x00030218

000bdbf4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   bdbf4:	b508      	push	{r3, lr}
   bdbf6:	4b02      	ldr	r3, [pc, #8]	; (bdc00 <hal_ble_stack_init+0xc>)
   bdbf8:	681b      	ldr	r3, [r3, #0]
   bdbfa:	689b      	ldr	r3, [r3, #8]
   bdbfc:	9301      	str	r3, [sp, #4]
   bdbfe:	bd08      	pop	{r3, pc}
   bdc00:	00030278 	.word	0x00030278

000bdc04 <hal_ble_gap_set_tx_power>:
DYNALIB_FN(11, hal_ble, hal_ble_gap_get_appearance, int(ble_sig_appearance_t*, void*))
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
   bdc04:	b508      	push	{r3, lr}
   bdc06:	4b02      	ldr	r3, [pc, #8]	; (bdc10 <hal_ble_gap_set_tx_power+0xc>)
   bdc08:	681b      	ldr	r3, [r3, #0]
   bdc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdc0c:	9301      	str	r3, [sp, #4]
   bdc0e:	bd08      	pop	{r3, pc}
   bdc10:	00030278 	.word	0x00030278

000bdc14 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   bdc14:	b508      	push	{r3, lr}
   bdc16:	4b02      	ldr	r3, [pc, #8]	; (bdc20 <hal_ble_gap_set_advertising_data+0xc>)
   bdc18:	681b      	ldr	r3, [r3, #0]
   bdc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdc1c:	9301      	str	r3, [sp, #4]
   bdc1e:	bd08      	pop	{r3, pc}
   bdc20:	00030278 	.word	0x00030278

000bdc24 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   bdc24:	b508      	push	{r3, lr}
   bdc26:	4b02      	ldr	r3, [pc, #8]	; (bdc30 <hal_ble_gap_set_scan_response_data+0xc>)
   bdc28:	681b      	ldr	r3, [r3, #0]
   bdc2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bdc2c:	9301      	str	r3, [sp, #4]
   bdc2e:	bd08      	pop	{r3, pc}
   bdc30:	00030278 	.word	0x00030278

000bdc34 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   bdc34:	b508      	push	{r3, lr}
   bdc36:	4b02      	ldr	r3, [pc, #8]	; (bdc40 <hal_ble_gap_start_advertising+0xc>)
   bdc38:	681b      	ldr	r3, [r3, #0]
   bdc3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   bdc3c:	9301      	str	r3, [sp, #4]
   bdc3e:	bd08      	pop	{r3, pc}
   bdc40:	00030278 	.word	0x00030278

000bdc44 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   bdc44:	b508      	push	{r3, lr}
   bdc46:	4b03      	ldr	r3, [pc, #12]	; (bdc54 <hal_ble_gap_disconnect+0x10>)
   bdc48:	681b      	ldr	r3, [r3, #0]
   bdc4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bdc4e:	9301      	str	r3, [sp, #4]
   bdc50:	bd08      	pop	{r3, pc}
   bdc52:	0000      	.short	0x0000
   bdc54:	00030278 	.word	0x00030278

000bdc58 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   bdc58:	b508      	push	{r3, lr}
   bdc5a:	4b03      	ldr	r3, [pc, #12]	; (bdc68 <hal_ble_gatt_server_add_service+0x10>)
   bdc5c:	681b      	ldr	r3, [r3, #0]
   bdc5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bdc62:	9301      	str	r3, [sp, #4]
   bdc64:	bd08      	pop	{r3, pc}
   bdc66:	0000      	.short	0x0000
   bdc68:	00030278 	.word	0x00030278

000bdc6c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc6c:	b508      	push	{r3, lr}
   bdc6e:	4b03      	ldr	r3, [pc, #12]	; (bdc7c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   bdc70:	681b      	ldr	r3, [r3, #0]
   bdc72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   bdc76:	9301      	str	r3, [sp, #4]
   bdc78:	bd08      	pop	{r3, pc}
   bdc7a:	0000      	.short	0x0000
   bdc7c:	00030278 	.word	0x00030278

000bdc80 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc80:	b508      	push	{r3, lr}
   bdc82:	4b03      	ldr	r3, [pc, #12]	; (bdc90 <hal_ble_gatt_client_write_with_response+0x10>)
   bdc84:	681b      	ldr	r3, [r3, #0]
   bdc86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   bdc8a:	9301      	str	r3, [sp, #4]
   bdc8c:	bd08      	pop	{r3, pc}
   bdc8e:	0000      	.short	0x0000
   bdc90:	00030278 	.word	0x00030278

000bdc94 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdc94:	b508      	push	{r3, lr}
   bdc96:	4b03      	ldr	r3, [pc, #12]	; (bdca4 <hal_ble_gatt_client_write_without_response+0x10>)
   bdc98:	681b      	ldr	r3, [r3, #0]
   bdc9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   bdc9e:	9301      	str	r3, [sp, #4]
   bdca0:	bd08      	pop	{r3, pc}
   bdca2:	0000      	.short	0x0000
   bdca4:	00030278 	.word	0x00030278

000bdca8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   bdca8:	b508      	push	{r3, lr}
   bdcaa:	4b03      	ldr	r3, [pc, #12]	; (bdcb8 <hal_ble_gatt_server_add_characteristic+0x10>)
   bdcac:	681b      	ldr	r3, [r3, #0]
   bdcae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   bdcb2:	9301      	str	r3, [sp, #4]
   bdcb4:	bd08      	pop	{r3, pc}
   bdcb6:	0000      	.short	0x0000
   bdcb8:	00030278 	.word	0x00030278

000bdcbc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   bdcbc:	b508      	push	{r3, lr}
   bdcbe:	4b03      	ldr	r3, [pc, #12]	; (bdccc <hal_ble_set_callback_on_periph_link_events+0x10>)
   bdcc0:	681b      	ldr	r3, [r3, #0]
   bdcc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   bdcc6:	9301      	str	r3, [sp, #4]
   bdcc8:	bd08      	pop	{r3, pc}
   bdcca:	0000      	.short	0x0000
   bdccc:	00030278 	.word	0x00030278

000bdcd0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdcd0:	b508      	push	{r3, lr}
   bdcd2:	4b03      	ldr	r3, [pc, #12]	; (bdce0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   bdcd4:	681b      	ldr	r3, [r3, #0]
   bdcd6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   bdcda:	9301      	str	r3, [sp, #4]
   bdcdc:	bd08      	pop	{r3, pc}
   bdcde:	0000      	.short	0x0000
   bdce0:	00030278 	.word	0x00030278

000bdce4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   bdce4:	b508      	push	{r3, lr}
   bdce6:	4b03      	ldr	r3, [pc, #12]	; (bdcf4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   bdce8:	681b      	ldr	r3, [r3, #0]
   bdcea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   bdcee:	9301      	str	r3, [sp, #4]
   bdcf0:	bd08      	pop	{r3, pc}
   bdcf2:	0000      	.short	0x0000
   bdcf4:	00030278 	.word	0x00030278

000bdcf8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   bdcf8:	b508      	push	{r3, lr}
   bdcfa:	4b02      	ldr	r3, [pc, #8]	; (bdd04 <os_thread_yield+0xc>)
   bdcfc:	681b      	ldr	r3, [r3, #0]
   bdcfe:	68db      	ldr	r3, [r3, #12]
   bdd00:	9301      	str	r3, [sp, #4]
   bdd02:	bd08      	pop	{r3, pc}
   bdd04:	00030248 	.word	0x00030248

000bdd08 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   bdd08:	b508      	push	{r3, lr}
   bdd0a:	4b02      	ldr	r3, [pc, #8]	; (bdd14 <os_thread_scheduling+0xc>)
   bdd0c:	681b      	ldr	r3, [r3, #0]
   bdd0e:	69db      	ldr	r3, [r3, #28]
   bdd10:	9301      	str	r3, [sp, #4]
   bdd12:	bd08      	pop	{r3, pc}
   bdd14:	00030248 	.word	0x00030248

000bdd18 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   bdd18:	b508      	push	{r3, lr}
   bdd1a:	4b02      	ldr	r3, [pc, #8]	; (bdd24 <os_timer_create+0xc>)
   bdd1c:	681b      	ldr	r3, [r3, #0]
   bdd1e:	6a1b      	ldr	r3, [r3, #32]
   bdd20:	9301      	str	r3, [sp, #4]
   bdd22:	bd08      	pop	{r3, pc}
   bdd24:	00030248 	.word	0x00030248

000bdd28 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   bdd28:	b508      	push	{r3, lr}
   bdd2a:	4b02      	ldr	r3, [pc, #8]	; (bdd34 <os_timer_destroy+0xc>)
   bdd2c:	681b      	ldr	r3, [r3, #0]
   bdd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdd30:	9301      	str	r3, [sp, #4]
   bdd32:	bd08      	pop	{r3, pc}
   bdd34:	00030248 	.word	0x00030248

000bdd38 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   bdd38:	b508      	push	{r3, lr}
   bdd3a:	4b02      	ldr	r3, [pc, #8]	; (bdd44 <os_timer_get_id+0xc>)
   bdd3c:	681b      	ldr	r3, [r3, #0]
   bdd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdd40:	9301      	str	r3, [sp, #4]
   bdd42:	bd08      	pop	{r3, pc}
   bdd44:	00030248 	.word	0x00030248

000bdd48 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   bdd48:	b508      	push	{r3, lr}
   bdd4a:	4b02      	ldr	r3, [pc, #8]	; (bdd54 <os_timer_change+0xc>)
   bdd4c:	681b      	ldr	r3, [r3, #0]
   bdd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bdd50:	9301      	str	r3, [sp, #4]
   bdd52:	bd08      	pop	{r3, pc}
   bdd54:	00030248 	.word	0x00030248

000bdd58 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bdd58:	b508      	push	{r3, lr}
   bdd5a:	4b02      	ldr	r3, [pc, #8]	; (bdd64 <os_mutex_recursive_create+0xc>)
   bdd5c:	681b      	ldr	r3, [r3, #0]
   bdd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdd60:	9301      	str	r3, [sp, #4]
   bdd62:	bd08      	pop	{r3, pc}
   bdd64:	00030248 	.word	0x00030248

000bdd68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bdd68:	b508      	push	{r3, lr}
   bdd6a:	4b02      	ldr	r3, [pc, #8]	; (bdd74 <os_mutex_recursive_destroy+0xc>)
   bdd6c:	681b      	ldr	r3, [r3, #0]
   bdd6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bdd70:	9301      	str	r3, [sp, #4]
   bdd72:	bd08      	pop	{r3, pc}
   bdd74:	00030248 	.word	0x00030248

000bdd78 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bdd78:	b508      	push	{r3, lr}
   bdd7a:	4b02      	ldr	r3, [pc, #8]	; (bdd84 <os_mutex_recursive_lock+0xc>)
   bdd7c:	681b      	ldr	r3, [r3, #0]
   bdd7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bdd80:	9301      	str	r3, [sp, #4]
   bdd82:	bd08      	pop	{r3, pc}
   bdd84:	00030248 	.word	0x00030248

000bdd88 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bdd88:	b508      	push	{r3, lr}
   bdd8a:	4b02      	ldr	r3, [pc, #8]	; (bdd94 <os_mutex_recursive_unlock+0xc>)
   bdd8c:	681b      	ldr	r3, [r3, #0]
   bdd8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bdd90:	9301      	str	r3, [sp, #4]
   bdd92:	bd08      	pop	{r3, pc}
   bdd94:	00030248 	.word	0x00030248

000bdd98 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   bdd98:	b508      	push	{r3, lr}
   bdd9a:	4b02      	ldr	r3, [pc, #8]	; (bdda4 <os_timer_set_id+0xc>)
   bdd9c:	681b      	ldr	r3, [r3, #0]
   bdd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bdda0:	9301      	str	r3, [sp, #4]
   bdda2:	bd08      	pop	{r3, pc}
   bdda4:	00030248 	.word	0x00030248

000bdda8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bdda8:	b508      	push	{r3, lr}
   bddaa:	4b02      	ldr	r3, [pc, #8]	; (bddb4 <inet_inet_ntop+0xc>)
   bddac:	681b      	ldr	r3, [r3, #0]
   bddae:	695b      	ldr	r3, [r3, #20]
   bddb0:	9301      	str	r3, [sp, #4]
   bddb2:	bd08      	pop	{r3, pc}
   bddb4:	00030264 	.word	0x00030264

000bddb8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bddb8:	b508      	push	{r3, lr}
   bddba:	4b02      	ldr	r3, [pc, #8]	; (bddc4 <hal_usart_end+0xc>)
   bddbc:	681b      	ldr	r3, [r3, #0]
   bddbe:	689b      	ldr	r3, [r3, #8]
   bddc0:	9301      	str	r3, [sp, #4]
   bddc2:	bd08      	pop	{r3, pc}
   bddc4:	0003023c 	.word	0x0003023c

000bddc8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bddc8:	b508      	push	{r3, lr}
   bddca:	4b02      	ldr	r3, [pc, #8]	; (bddd4 <hal_usart_write+0xc>)
   bddcc:	681b      	ldr	r3, [r3, #0]
   bddce:	68db      	ldr	r3, [r3, #12]
   bddd0:	9301      	str	r3, [sp, #4]
   bddd2:	bd08      	pop	{r3, pc}
   bddd4:	0003023c 	.word	0x0003023c

000bddd8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bddd8:	b508      	push	{r3, lr}
   bddda:	4b02      	ldr	r3, [pc, #8]	; (bdde4 <hal_usart_available+0xc>)
   bdddc:	681b      	ldr	r3, [r3, #0]
   bddde:	691b      	ldr	r3, [r3, #16]
   bdde0:	9301      	str	r3, [sp, #4]
   bdde2:	bd08      	pop	{r3, pc}
   bdde4:	0003023c 	.word	0x0003023c

000bdde8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bdde8:	b508      	push	{r3, lr}
   bddea:	4b02      	ldr	r3, [pc, #8]	; (bddf4 <hal_usart_read+0xc>)
   bddec:	681b      	ldr	r3, [r3, #0]
   bddee:	695b      	ldr	r3, [r3, #20]
   bddf0:	9301      	str	r3, [sp, #4]
   bddf2:	bd08      	pop	{r3, pc}
   bddf4:	0003023c 	.word	0x0003023c

000bddf8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bddf8:	b508      	push	{r3, lr}
   bddfa:	4b02      	ldr	r3, [pc, #8]	; (bde04 <hal_usart_peek+0xc>)
   bddfc:	681b      	ldr	r3, [r3, #0]
   bddfe:	699b      	ldr	r3, [r3, #24]
   bde00:	9301      	str	r3, [sp, #4]
   bde02:	bd08      	pop	{r3, pc}
   bde04:	0003023c 	.word	0x0003023c

000bde08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bde08:	b508      	push	{r3, lr}
   bde0a:	4b02      	ldr	r3, [pc, #8]	; (bde14 <hal_usart_flush+0xc>)
   bde0c:	681b      	ldr	r3, [r3, #0]
   bde0e:	69db      	ldr	r3, [r3, #28]
   bde10:	9301      	str	r3, [sp, #4]
   bde12:	bd08      	pop	{r3, pc}
   bde14:	0003023c 	.word	0x0003023c

000bde18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bde18:	b508      	push	{r3, lr}
   bde1a:	4b02      	ldr	r3, [pc, #8]	; (bde24 <hal_usart_is_enabled+0xc>)
   bde1c:	681b      	ldr	r3, [r3, #0]
   bde1e:	6a1b      	ldr	r3, [r3, #32]
   bde20:	9301      	str	r3, [sp, #4]
   bde22:	bd08      	pop	{r3, pc}
   bde24:	0003023c 	.word	0x0003023c

000bde28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bde28:	b508      	push	{r3, lr}
   bde2a:	4b02      	ldr	r3, [pc, #8]	; (bde34 <hal_usart_available_data_for_write+0xc>)
   bde2c:	681b      	ldr	r3, [r3, #0]
   bde2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bde30:	9301      	str	r3, [sp, #4]
   bde32:	bd08      	pop	{r3, pc}
   bde34:	0003023c 	.word	0x0003023c

000bde38 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bde38:	b508      	push	{r3, lr}
   bde3a:	4b02      	ldr	r3, [pc, #8]	; (bde44 <hal_usart_begin_config+0xc>)
   bde3c:	681b      	ldr	r3, [r3, #0]
   bde3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bde40:	9301      	str	r3, [sp, #4]
   bde42:	bd08      	pop	{r3, pc}
   bde44:	0003023c 	.word	0x0003023c

000bde48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bde48:	b508      	push	{r3, lr}
   bde4a:	4b02      	ldr	r3, [pc, #8]	; (bde54 <hal_usart_init_ex+0xc>)
   bde4c:	681b      	ldr	r3, [r3, #0]
   bde4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bde50:	9301      	str	r3, [sp, #4]
   bde52:	bd08      	pop	{r3, pc}
   bde54:	0003023c 	.word	0x0003023c

000bde58 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   bde58:	b508      	push	{r3, lr}
   bde5a:	4b02      	ldr	r3, [pc, #8]	; (bde64 <hal_i2c_set_speed+0xc>)
   bde5c:	681b      	ldr	r3, [r3, #0]
   bde5e:	681b      	ldr	r3, [r3, #0]
   bde60:	9301      	str	r3, [sp, #4]
   bde62:	bd08      	pop	{r3, pc}
   bde64:	00030228 	.word	0x00030228

000bde68 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bde68:	b508      	push	{r3, lr}
   bde6a:	4b02      	ldr	r3, [pc, #8]	; (bde74 <hal_i2c_begin+0xc>)
   bde6c:	681b      	ldr	r3, [r3, #0]
   bde6e:	68db      	ldr	r3, [r3, #12]
   bde70:	9301      	str	r3, [sp, #4]
   bde72:	bd08      	pop	{r3, pc}
   bde74:	00030228 	.word	0x00030228

000bde78 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bde78:	b508      	push	{r3, lr}
   bde7a:	4b02      	ldr	r3, [pc, #8]	; (bde84 <hal_i2c_begin_transmission+0xc>)
   bde7c:	681b      	ldr	r3, [r3, #0]
   bde7e:	699b      	ldr	r3, [r3, #24]
   bde80:	9301      	str	r3, [sp, #4]
   bde82:	bd08      	pop	{r3, pc}
   bde84:	00030228 	.word	0x00030228

000bde88 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bde88:	b508      	push	{r3, lr}
   bde8a:	4b02      	ldr	r3, [pc, #8]	; (bde94 <hal_i2c_end_transmission+0xc>)
   bde8c:	681b      	ldr	r3, [r3, #0]
   bde8e:	69db      	ldr	r3, [r3, #28]
   bde90:	9301      	str	r3, [sp, #4]
   bde92:	bd08      	pop	{r3, pc}
   bde94:	00030228 	.word	0x00030228

000bde98 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bde98:	b508      	push	{r3, lr}
   bde9a:	4b02      	ldr	r3, [pc, #8]	; (bdea4 <hal_i2c_write+0xc>)
   bde9c:	681b      	ldr	r3, [r3, #0]
   bde9e:	6a1b      	ldr	r3, [r3, #32]
   bdea0:	9301      	str	r3, [sp, #4]
   bdea2:	bd08      	pop	{r3, pc}
   bdea4:	00030228 	.word	0x00030228

000bdea8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bdea8:	b508      	push	{r3, lr}
   bdeaa:	4b02      	ldr	r3, [pc, #8]	; (bdeb4 <hal_i2c_available+0xc>)
   bdeac:	681b      	ldr	r3, [r3, #0]
   bdeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdeb0:	9301      	str	r3, [sp, #4]
   bdeb2:	bd08      	pop	{r3, pc}
   bdeb4:	00030228 	.word	0x00030228

000bdeb8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bdeb8:	b508      	push	{r3, lr}
   bdeba:	4b02      	ldr	r3, [pc, #8]	; (bdec4 <hal_i2c_read+0xc>)
   bdebc:	681b      	ldr	r3, [r3, #0]
   bdebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdec0:	9301      	str	r3, [sp, #4]
   bdec2:	bd08      	pop	{r3, pc}
   bdec4:	00030228 	.word	0x00030228

000bdec8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bdec8:	b508      	push	{r3, lr}
   bdeca:	4b02      	ldr	r3, [pc, #8]	; (bded4 <hal_i2c_peek+0xc>)
   bdecc:	681b      	ldr	r3, [r3, #0]
   bdece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bded0:	9301      	str	r3, [sp, #4]
   bded2:	bd08      	pop	{r3, pc}
   bded4:	00030228 	.word	0x00030228

000bded8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bded8:	b508      	push	{r3, lr}
   bdeda:	4b02      	ldr	r3, [pc, #8]	; (bdee4 <hal_i2c_flush+0xc>)
   bdedc:	681b      	ldr	r3, [r3, #0]
   bdede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bdee0:	9301      	str	r3, [sp, #4]
   bdee2:	bd08      	pop	{r3, pc}
   bdee4:	00030228 	.word	0x00030228

000bdee8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bdee8:	b508      	push	{r3, lr}
   bdeea:	4b02      	ldr	r3, [pc, #8]	; (bdef4 <hal_i2c_is_enabled+0xc>)
   bdeec:	681b      	ldr	r3, [r3, #0]
   bdeee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bdef0:	9301      	str	r3, [sp, #4]
   bdef2:	bd08      	pop	{r3, pc}
   bdef4:	00030228 	.word	0x00030228

000bdef8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bdef8:	b508      	push	{r3, lr}
   bdefa:	4b02      	ldr	r3, [pc, #8]	; (bdf04 <hal_i2c_init+0xc>)
   bdefc:	681b      	ldr	r3, [r3, #0]
   bdefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdf00:	9301      	str	r3, [sp, #4]
   bdf02:	bd08      	pop	{r3, pc}
   bdf04:	00030228 	.word	0x00030228

000bdf08 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bdf08:	b508      	push	{r3, lr}
   bdf0a:	4b02      	ldr	r3, [pc, #8]	; (bdf14 <hal_i2c_request_ex+0xc>)
   bdf0c:	681b      	ldr	r3, [r3, #0]
   bdf0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bdf10:	9301      	str	r3, [sp, #4]
   bdf12:	bd08      	pop	{r3, pc}
   bdf14:	00030228 	.word	0x00030228

000bdf18 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bdf18:	b508      	push	{r3, lr}
   bdf1a:	4b02      	ldr	r3, [pc, #8]	; (bdf24 <hal_spi_begin+0xc>)
   bdf1c:	681b      	ldr	r3, [r3, #0]
   bdf1e:	681b      	ldr	r3, [r3, #0]
   bdf20:	9301      	str	r3, [sp, #4]
   bdf22:	bd08      	pop	{r3, pc}
   bdf24:	00030230 	.word	0x00030230

000bdf28 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bdf28:	b508      	push	{r3, lr}
   bdf2a:	4b02      	ldr	r3, [pc, #8]	; (bdf34 <hal_spi_transfer+0xc>)
   bdf2c:	681b      	ldr	r3, [r3, #0]
   bdf2e:	695b      	ldr	r3, [r3, #20]
   bdf30:	9301      	str	r3, [sp, #4]
   bdf32:	bd08      	pop	{r3, pc}
   bdf34:	00030230 	.word	0x00030230

000bdf38 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bdf38:	b508      	push	{r3, lr}
   bdf3a:	4b02      	ldr	r3, [pc, #8]	; (bdf44 <hal_spi_init+0xc>)
   bdf3c:	681b      	ldr	r3, [r3, #0]
   bdf3e:	69db      	ldr	r3, [r3, #28]
   bdf40:	9301      	str	r3, [sp, #4]
   bdf42:	bd08      	pop	{r3, pc}
   bdf44:	00030230 	.word	0x00030230

000bdf48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bdf48:	b508      	push	{r3, lr}
   bdf4a:	4b02      	ldr	r3, [pc, #8]	; (bdf54 <hal_spi_is_enabled+0xc>)
   bdf4c:	681b      	ldr	r3, [r3, #0]
   bdf4e:	6a1b      	ldr	r3, [r3, #32]
   bdf50:	9301      	str	r3, [sp, #4]
   bdf52:	bd08      	pop	{r3, pc}
   bdf54:	00030230 	.word	0x00030230

000bdf58 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bdf58:	b508      	push	{r3, lr}
   bdf5a:	4b02      	ldr	r3, [pc, #8]	; (bdf64 <hal_spi_info+0xc>)
   bdf5c:	681b      	ldr	r3, [r3, #0]
   bdf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bdf60:	9301      	str	r3, [sp, #4]
   bdf62:	bd08      	pop	{r3, pc}
   bdf64:	00030230 	.word	0x00030230

000bdf68 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   bdf68:	b508      	push	{r3, lr}
   bdf6a:	4b02      	ldr	r3, [pc, #8]	; (bdf74 <hal_spi_transfer_dma+0xc>)
   bdf6c:	681b      	ldr	r3, [r3, #0]
   bdf6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bdf70:	9301      	str	r3, [sp, #4]
   bdf72:	bd08      	pop	{r3, pc}
   bdf74:	00030230 	.word	0x00030230

000bdf78 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   bdf78:	b508      	push	{r3, lr}
   bdf7a:	4b02      	ldr	r3, [pc, #8]	; (bdf84 <hal_spi_transfer_dma_status+0xc>)
   bdf7c:	681b      	ldr	r3, [r3, #0]
   bdf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bdf80:	9301      	str	r3, [sp, #4]
   bdf82:	bd08      	pop	{r3, pc}
   bdf84:	00030230 	.word	0x00030230

000bdf88 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bdf88:	b508      	push	{r3, lr}
   bdf8a:	4b02      	ldr	r3, [pc, #8]	; (bdf94 <hal_spi_set_settings+0xc>)
   bdf8c:	681b      	ldr	r3, [r3, #0]
   bdf8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bdf90:	9301      	str	r3, [sp, #4]
   bdf92:	bd08      	pop	{r3, pc}
   bdf94:	00030230 	.word	0x00030230

000bdf98 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bdf98:	b508      	push	{r3, lr}
   bdf9a:	4b02      	ldr	r3, [pc, #8]	; (bdfa4 <hal_spi_acquire+0xc>)
   bdf9c:	681b      	ldr	r3, [r3, #0]
   bdf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bdfa0:	9301      	str	r3, [sp, #4]
   bdfa2:	bd08      	pop	{r3, pc}
   bdfa4:	00030230 	.word	0x00030230

000bdfa8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bdfa8:	b508      	push	{r3, lr}
   bdfaa:	4b02      	ldr	r3, [pc, #8]	; (bdfb4 <hal_spi_release+0xc>)
   bdfac:	681b      	ldr	r3, [r3, #0]
   bdfae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bdfb0:	9301      	str	r3, [sp, #4]
   bdfb2:	bd08      	pop	{r3, pc}
   bdfb4:	00030230 	.word	0x00030230

000bdfb8 <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   bdfb8:	b508      	push	{r3, lr}
   bdfba:	4b02      	ldr	r3, [pc, #8]	; (bdfc4 <HAL_Servo_Attach+0xc>)
   bdfbc:	681b      	ldr	r3, [r3, #0]
   bdfbe:	691b      	ldr	r3, [r3, #16]
   bdfc0:	9301      	str	r3, [sp, #4]
   bdfc2:	bd08      	pop	{r3, pc}
   bdfc4:	00030224 	.word	0x00030224

000bdfc8 <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   bdfc8:	b508      	push	{r3, lr}
   bdfca:	4b02      	ldr	r3, [pc, #8]	; (bdfd4 <HAL_Servo_Detach+0xc>)
   bdfcc:	681b      	ldr	r3, [r3, #0]
   bdfce:	695b      	ldr	r3, [r3, #20]
   bdfd0:	9301      	str	r3, [sp, #4]
   bdfd2:	bd08      	pop	{r3, pc}
   bdfd4:	00030224 	.word	0x00030224

000bdfd8 <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   bdfd8:	b508      	push	{r3, lr}
   bdfda:	4b02      	ldr	r3, [pc, #8]	; (bdfe4 <HAL_Servo_Write_Pulse_Width+0xc>)
   bdfdc:	681b      	ldr	r3, [r3, #0]
   bdfde:	699b      	ldr	r3, [r3, #24]
   bdfe0:	9301      	str	r3, [sp, #4]
   bdfe2:	bd08      	pop	{r3, pc}
   bdfe4:	00030224 	.word	0x00030224

000bdfe8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bdfe8:	b508      	push	{r3, lr}
   bdfea:	4b02      	ldr	r3, [pc, #8]	; (bdff4 <HAL_USB_USART_Init+0xc>)
   bdfec:	681b      	ldr	r3, [r3, #0]
   bdfee:	681b      	ldr	r3, [r3, #0]
   bdff0:	9301      	str	r3, [sp, #4]
   bdff2:	bd08      	pop	{r3, pc}
   bdff4:	0003024c 	.word	0x0003024c

000bdff8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bdff8:	b508      	push	{r3, lr}
   bdffa:	4b02      	ldr	r3, [pc, #8]	; (be004 <HAL_USB_USART_Begin+0xc>)
   bdffc:	681b      	ldr	r3, [r3, #0]
   bdffe:	685b      	ldr	r3, [r3, #4]
   be000:	9301      	str	r3, [sp, #4]
   be002:	bd08      	pop	{r3, pc}
   be004:	0003024c 	.word	0x0003024c

000be008 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   be008:	b508      	push	{r3, lr}
   be00a:	4b02      	ldr	r3, [pc, #8]	; (be014 <HAL_USB_USART_End+0xc>)
   be00c:	681b      	ldr	r3, [r3, #0]
   be00e:	689b      	ldr	r3, [r3, #8]
   be010:	9301      	str	r3, [sp, #4]
   be012:	bd08      	pop	{r3, pc}
   be014:	0003024c 	.word	0x0003024c

000be018 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   be018:	b508      	push	{r3, lr}
   be01a:	4b02      	ldr	r3, [pc, #8]	; (be024 <HAL_USB_USART_Available_Data+0xc>)
   be01c:	681b      	ldr	r3, [r3, #0]
   be01e:	691b      	ldr	r3, [r3, #16]
   be020:	9301      	str	r3, [sp, #4]
   be022:	bd08      	pop	{r3, pc}
   be024:	0003024c 	.word	0x0003024c

000be028 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   be028:	b508      	push	{r3, lr}
   be02a:	4b02      	ldr	r3, [pc, #8]	; (be034 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   be02c:	681b      	ldr	r3, [r3, #0]
   be02e:	695b      	ldr	r3, [r3, #20]
   be030:	9301      	str	r3, [sp, #4]
   be032:	bd08      	pop	{r3, pc}
   be034:	0003024c 	.word	0x0003024c

000be038 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be038:	b508      	push	{r3, lr}
   be03a:	4b02      	ldr	r3, [pc, #8]	; (be044 <HAL_USB_USART_Receive_Data+0xc>)
   be03c:	681b      	ldr	r3, [r3, #0]
   be03e:	699b      	ldr	r3, [r3, #24]
   be040:	9301      	str	r3, [sp, #4]
   be042:	bd08      	pop	{r3, pc}
   be044:	0003024c 	.word	0x0003024c

000be048 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   be048:	b508      	push	{r3, lr}
   be04a:	4b02      	ldr	r3, [pc, #8]	; (be054 <HAL_USB_USART_Send_Data+0xc>)
   be04c:	681b      	ldr	r3, [r3, #0]
   be04e:	69db      	ldr	r3, [r3, #28]
   be050:	9301      	str	r3, [sp, #4]
   be052:	bd08      	pop	{r3, pc}
   be054:	0003024c 	.word	0x0003024c

000be058 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   be058:	b508      	push	{r3, lr}
   be05a:	4b02      	ldr	r3, [pc, #8]	; (be064 <HAL_USB_USART_Flush_Data+0xc>)
   be05c:	681b      	ldr	r3, [r3, #0]
   be05e:	6a1b      	ldr	r3, [r3, #32]
   be060:	9301      	str	r3, [sp, #4]
   be062:	bd08      	pop	{r3, pc}
   be064:	0003024c 	.word	0x0003024c

000be068 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   be068:	b508      	push	{r3, lr}
   be06a:	4b02      	ldr	r3, [pc, #8]	; (be074 <panic_+0xc>)
   be06c:	681b      	ldr	r3, [r3, #0]
   be06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be070:	9301      	str	r3, [sp, #4]
   be072:	bd08      	pop	{r3, pc}
   be074:	00030260 	.word	0x00030260

000be078 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   be078:	b508      	push	{r3, lr}
   be07a:	4b02      	ldr	r3, [pc, #8]	; (be084 <log_message+0xc>)
   be07c:	681b      	ldr	r3, [r3, #0]
   be07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   be080:	9301      	str	r3, [sp, #4]
   be082:	bd08      	pop	{r3, pc}
   be084:	00030260 	.word	0x00030260

000be088 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   be088:	b508      	push	{r3, lr}
   be08a:	4b02      	ldr	r3, [pc, #8]	; (be094 <log_level_name+0xc>)
   be08c:	681b      	ldr	r3, [r3, #0]
   be08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   be090:	9301      	str	r3, [sp, #4]
   be092:	bd08      	pop	{r3, pc}
   be094:	00030260 	.word	0x00030260

000be098 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   be098:	b508      	push	{r3, lr}
   be09a:	4b02      	ldr	r3, [pc, #8]	; (be0a4 <log_set_callbacks+0xc>)
   be09c:	681b      	ldr	r3, [r3, #0]
   be09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   be0a0:	9301      	str	r3, [sp, #4]
   be0a2:	bd08      	pop	{r3, pc}
   be0a4:	00030260 	.word	0x00030260

000be0a8 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   be0a8:	b508      	push	{r3, lr}
   be0aa:	4b03      	ldr	r3, [pc, #12]	; (be0b8 <led_set_status_active+0x10>)
   be0ac:	681b      	ldr	r3, [r3, #0]
   be0ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   be0b2:	9301      	str	r3, [sp, #4]
   be0b4:	bd08      	pop	{r3, pc}
   be0b6:	0000      	.short	0x0000
   be0b8:	00030260 	.word	0x00030260

000be0bc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   be0bc:	b508      	push	{r3, lr}
   be0be:	4b02      	ldr	r3, [pc, #8]	; (be0c8 <system_mode+0xc>)
   be0c0:	681b      	ldr	r3, [r3, #0]
   be0c2:	681b      	ldr	r3, [r3, #0]
   be0c4:	9301      	str	r3, [sp, #4]
   be0c6:	bd08      	pop	{r3, pc}
   be0c8:	00030220 	.word	0x00030220

000be0cc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   be0cc:	b508      	push	{r3, lr}
   be0ce:	4b02      	ldr	r3, [pc, #8]	; (be0d8 <set_system_mode+0xc>)
   be0d0:	681b      	ldr	r3, [r3, #0]
   be0d2:	685b      	ldr	r3, [r3, #4]
   be0d4:	9301      	str	r3, [sp, #4]
   be0d6:	bd08      	pop	{r3, pc}
   be0d8:	00030220 	.word	0x00030220

000be0dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   be0dc:	b508      	push	{r3, lr}
   be0de:	4b02      	ldr	r3, [pc, #8]	; (be0e8 <system_delay_ms+0xc>)
   be0e0:	681b      	ldr	r3, [r3, #0]
   be0e2:	695b      	ldr	r3, [r3, #20]
   be0e4:	9301      	str	r3, [sp, #4]
   be0e6:	bd08      	pop	{r3, pc}
   be0e8:	00030220 	.word	0x00030220

000be0ec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   be0ec:	b508      	push	{r3, lr}
   be0ee:	4b02      	ldr	r3, [pc, #8]	; (be0f8 <application_thread_current+0xc>)
   be0f0:	681b      	ldr	r3, [r3, #0]
   be0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be0f4:	9301      	str	r3, [sp, #4]
   be0f6:	bd08      	pop	{r3, pc}
   be0f8:	00030220 	.word	0x00030220

000be0fc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   be0fc:	b508      	push	{r3, lr}
   be0fe:	4b02      	ldr	r3, [pc, #8]	; (be108 <application_thread_invoke+0xc>)
   be100:	681b      	ldr	r3, [r3, #0]
   be102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   be104:	9301      	str	r3, [sp, #4]
   be106:	bd08      	pop	{r3, pc}
   be108:	00030220 	.word	0x00030220

000be10c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   be10c:	b508      	push	{r3, lr}
   be10e:	4b02      	ldr	r3, [pc, #8]	; (be118 <system_thread_get_state+0xc>)
   be110:	681b      	ldr	r3, [r3, #0]
   be112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   be114:	9301      	str	r3, [sp, #4]
   be116:	bd08      	pop	{r3, pc}
   be118:	00030220 	.word	0x00030220

000be11c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   be11c:	b508      	push	{r3, lr}
   be11e:	4b02      	ldr	r3, [pc, #8]	; (be128 <led_pattern_period+0xc>)
   be120:	681b      	ldr	r3, [r3, #0]
   be122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   be124:	9301      	str	r3, [sp, #4]
   be126:	bd08      	pop	{r3, pc}
   be128:	00030220 	.word	0x00030220

000be12c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   be12c:	b508      	push	{r3, lr}
   be12e:	4b03      	ldr	r3, [pc, #12]	; (be13c <system_ctrl_set_app_request_handler+0x10>)
   be130:	681b      	ldr	r3, [r3, #0]
   be132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   be136:	9301      	str	r3, [sp, #4]
   be138:	bd08      	pop	{r3, pc}
   be13a:	0000      	.short	0x0000
   be13c:	00030220 	.word	0x00030220

000be140 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   be140:	b508      	push	{r3, lr}
   be142:	4b03      	ldr	r3, [pc, #12]	; (be150 <system_ctrl_set_result+0x10>)
   be144:	681b      	ldr	r3, [r3, #0]
   be146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   be14a:	9301      	str	r3, [sp, #4]
   be14c:	bd08      	pop	{r3, pc}
   be14e:	0000      	.short	0x0000
   be150:	00030220 	.word	0x00030220

000be154 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   be154:	b508      	push	{r3, lr}
   be156:	4b02      	ldr	r3, [pc, #8]	; (be160 <network_connect+0xc>)
   be158:	681b      	ldr	r3, [r3, #0]
   be15a:	685b      	ldr	r3, [r3, #4]
   be15c:	9301      	str	r3, [sp, #4]
   be15e:	bd08      	pop	{r3, pc}
   be160:	00030240 	.word	0x00030240

000be164 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   be164:	b508      	push	{r3, lr}
   be166:	4b02      	ldr	r3, [pc, #8]	; (be170 <network_connecting+0xc>)
   be168:	681b      	ldr	r3, [r3, #0]
   be16a:	689b      	ldr	r3, [r3, #8]
   be16c:	9301      	str	r3, [sp, #4]
   be16e:	bd08      	pop	{r3, pc}
   be170:	00030240 	.word	0x00030240

000be174 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   be174:	b508      	push	{r3, lr}
   be176:	4b02      	ldr	r3, [pc, #8]	; (be180 <network_disconnect+0xc>)
   be178:	681b      	ldr	r3, [r3, #0]
   be17a:	68db      	ldr	r3, [r3, #12]
   be17c:	9301      	str	r3, [sp, #4]
   be17e:	bd08      	pop	{r3, pc}
   be180:	00030240 	.word	0x00030240

000be184 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   be184:	b508      	push	{r3, lr}
   be186:	4b02      	ldr	r3, [pc, #8]	; (be190 <network_ready+0xc>)
   be188:	681b      	ldr	r3, [r3, #0]
   be18a:	691b      	ldr	r3, [r3, #16]
   be18c:	9301      	str	r3, [sp, #4]
   be18e:	bd08      	pop	{r3, pc}
   be190:	00030240 	.word	0x00030240

000be194 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   be194:	b508      	push	{r3, lr}
   be196:	4b02      	ldr	r3, [pc, #8]	; (be1a0 <network_on+0xc>)
   be198:	681b      	ldr	r3, [r3, #0]
   be19a:	695b      	ldr	r3, [r3, #20]
   be19c:	9301      	str	r3, [sp, #4]
   be19e:	bd08      	pop	{r3, pc}
   be1a0:	00030240 	.word	0x00030240

000be1a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   be1a4:	b508      	push	{r3, lr}
   be1a6:	4b02      	ldr	r3, [pc, #8]	; (be1b0 <network_off+0xc>)
   be1a8:	681b      	ldr	r3, [r3, #0]
   be1aa:	699b      	ldr	r3, [r3, #24]
   be1ac:	9301      	str	r3, [sp, #4]
   be1ae:	bd08      	pop	{r3, pc}
   be1b0:	00030240 	.word	0x00030240

000be1b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   be1b4:	b508      	push	{r3, lr}
   be1b6:	4b02      	ldr	r3, [pc, #8]	; (be1c0 <network_listen+0xc>)
   be1b8:	681b      	ldr	r3, [r3, #0]
   be1ba:	69db      	ldr	r3, [r3, #28]
   be1bc:	9301      	str	r3, [sp, #4]
   be1be:	bd08      	pop	{r3, pc}
   be1c0:	00030240 	.word	0x00030240

000be1c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   be1c4:	b508      	push	{r3, lr}
   be1c6:	4b02      	ldr	r3, [pc, #8]	; (be1d0 <network_listening+0xc>)
   be1c8:	681b      	ldr	r3, [r3, #0]
   be1ca:	6a1b      	ldr	r3, [r3, #32]
   be1cc:	9301      	str	r3, [sp, #4]
   be1ce:	bd08      	pop	{r3, pc}
   be1d0:	00030240 	.word	0x00030240

000be1d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   be1d4:	b508      	push	{r3, lr}
   be1d6:	4b02      	ldr	r3, [pc, #8]	; (be1e0 <network_set_listen_timeout+0xc>)
   be1d8:	681b      	ldr	r3, [r3, #0]
   be1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be1dc:	9301      	str	r3, [sp, #4]
   be1de:	bd08      	pop	{r3, pc}
   be1e0:	00030240 	.word	0x00030240

000be1e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   be1e4:	b508      	push	{r3, lr}
   be1e6:	4b02      	ldr	r3, [pc, #8]	; (be1f0 <network_get_listen_timeout+0xc>)
   be1e8:	681b      	ldr	r3, [r3, #0]
   be1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   be1ec:	9301      	str	r3, [sp, #4]
   be1ee:	bd08      	pop	{r3, pc}
   be1f0:	00030240 	.word	0x00030240

000be1f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   be1f4:	b508      	push	{r3, lr}
   be1f6:	4b02      	ldr	r3, [pc, #8]	; (be200 <network_is_on+0xc>)
   be1f8:	681b      	ldr	r3, [r3, #0]
   be1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be1fc:	9301      	str	r3, [sp, #4]
   be1fe:	bd08      	pop	{r3, pc}
   be200:	00030240 	.word	0x00030240

000be204 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   be204:	b508      	push	{r3, lr}
   be206:	4b02      	ldr	r3, [pc, #8]	; (be210 <network_is_off+0xc>)
   be208:	681b      	ldr	r3, [r3, #0]
   be20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be20c:	9301      	str	r3, [sp, #4]
   be20e:	bd08      	pop	{r3, pc}
   be210:	00030240 	.word	0x00030240

000be214 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   be214:	b508      	push	{r3, lr}
   be216:	4b02      	ldr	r3, [pc, #8]	; (be220 <spark_function+0xc>)
   be218:	681b      	ldr	r3, [r3, #0]
   be21a:	685b      	ldr	r3, [r3, #4]
   be21c:	9301      	str	r3, [sp, #4]
   be21e:	bd08      	pop	{r3, pc}
   be220:	00030244 	.word	0x00030244

000be224 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   be224:	b508      	push	{r3, lr}
   be226:	4b02      	ldr	r3, [pc, #8]	; (be230 <spark_process+0xc>)
   be228:	681b      	ldr	r3, [r3, #0]
   be22a:	689b      	ldr	r3, [r3, #8]
   be22c:	9301      	str	r3, [sp, #4]
   be22e:	bd08      	pop	{r3, pc}
   be230:	00030244 	.word	0x00030244

000be234 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   be234:	b508      	push	{r3, lr}
   be236:	4b02      	ldr	r3, [pc, #8]	; (be240 <spark_cloud_flag_connected+0xc>)
   be238:	681b      	ldr	r3, [r3, #0]
   be23a:	695b      	ldr	r3, [r3, #20]
   be23c:	9301      	str	r3, [sp, #4]
   be23e:	bd08      	pop	{r3, pc}
   be240:	00030244 	.word	0x00030244

000be244 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   be244:	b508      	push	{r3, lr}
   be246:	4b02      	ldr	r3, [pc, #8]	; (be250 <spark_send_event+0xc>)
   be248:	681b      	ldr	r3, [r3, #0]
   be24a:	6a1b      	ldr	r3, [r3, #32]
   be24c:	9301      	str	r3, [sp, #4]
   be24e:	bd08      	pop	{r3, pc}
   be250:	00030244 	.word	0x00030244

000be254 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   be254:	b508      	push	{r3, lr}
   be256:	4b02      	ldr	r3, [pc, #8]	; (be260 <spark_subscribe+0xc>)
   be258:	681b      	ldr	r3, [r3, #0]
   be25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be25c:	9301      	str	r3, [sp, #4]
   be25e:	bd08      	pop	{r3, pc}
   be260:	00030244 	.word	0x00030244

000be264 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   be264:	b508      	push	{r3, lr}
   be266:	4b02      	ldr	r3, [pc, #8]	; (be270 <spark_sync_time_pending+0xc>)
   be268:	681b      	ldr	r3, [r3, #0]
   be26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be26c:	9301      	str	r3, [sp, #4]
   be26e:	bd08      	pop	{r3, pc}
   be270:	00030244 	.word	0x00030244

000be274 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   be274:	b508      	push	{r3, lr}
   be276:	4b02      	ldr	r3, [pc, #8]	; (be280 <spark_set_random_seed_from_cloud_handler+0xc>)
   be278:	681b      	ldr	r3, [r3, #0]
   be27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be27c:	9301      	str	r3, [sp, #4]
   be27e:	bd08      	pop	{r3, pc}
   be280:	00030244 	.word	0x00030244

000be284 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   be284:	b508      	push	{r3, lr}
   be286:	4b02      	ldr	r3, [pc, #8]	; (be290 <malloc+0xc>)
   be288:	681b      	ldr	r3, [r3, #0]
   be28a:	681b      	ldr	r3, [r3, #0]
   be28c:	9301      	str	r3, [sp, #4]
   be28e:	bd08      	pop	{r3, pc}
   be290:	0003021c 	.word	0x0003021c

000be294 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   be294:	b508      	push	{r3, lr}
   be296:	4b02      	ldr	r3, [pc, #8]	; (be2a0 <free+0xc>)
   be298:	681b      	ldr	r3, [r3, #0]
   be29a:	685b      	ldr	r3, [r3, #4]
   be29c:	9301      	str	r3, [sp, #4]
   be29e:	bd08      	pop	{r3, pc}
   be2a0:	0003021c 	.word	0x0003021c

000be2a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   be2a4:	b508      	push	{r3, lr}
   be2a6:	4b02      	ldr	r3, [pc, #8]	; (be2b0 <realloc+0xc>)
   be2a8:	681b      	ldr	r3, [r3, #0]
   be2aa:	689b      	ldr	r3, [r3, #8]
   be2ac:	9301      	str	r3, [sp, #4]
   be2ae:	bd08      	pop	{r3, pc}
   be2b0:	0003021c 	.word	0x0003021c

000be2b4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   be2b4:	b508      	push	{r3, lr}
   be2b6:	4b02      	ldr	r3, [pc, #8]	; (be2c0 <sprintf+0xc>)
   be2b8:	681b      	ldr	r3, [r3, #0]
   be2ba:	68db      	ldr	r3, [r3, #12]
   be2bc:	9301      	str	r3, [sp, #4]
   be2be:	bd08      	pop	{r3, pc}
   be2c0:	0003021c 	.word	0x0003021c

000be2c4 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   be2c4:	b508      	push	{r3, lr}
   be2c6:	4b02      	ldr	r3, [pc, #8]	; (be2d0 <sscanf+0xc>)
   be2c8:	681b      	ldr	r3, [r3, #0]
   be2ca:	695b      	ldr	r3, [r3, #20]
   be2cc:	9301      	str	r3, [sp, #4]
   be2ce:	bd08      	pop	{r3, pc}
   be2d0:	0003021c 	.word	0x0003021c

000be2d4 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   be2d4:	b508      	push	{r3, lr}
   be2d6:	4b02      	ldr	r3, [pc, #8]	; (be2e0 <snprintf+0xc>)
   be2d8:	681b      	ldr	r3, [r3, #0]
   be2da:	69db      	ldr	r3, [r3, #28]
   be2dc:	9301      	str	r3, [sp, #4]
   be2de:	bd08      	pop	{r3, pc}
   be2e0:	0003021c 	.word	0x0003021c

000be2e4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   be2e4:	b508      	push	{r3, lr}
   be2e6:	4b02      	ldr	r3, [pc, #8]	; (be2f0 <vsnprintf+0xc>)
   be2e8:	681b      	ldr	r3, [r3, #0]
   be2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   be2ec:	9301      	str	r3, [sp, #4]
   be2ee:	bd08      	pop	{r3, pc}
   be2f0:	0003021c 	.word	0x0003021c

000be2f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   be2f4:	b508      	push	{r3, lr}
   be2f6:	4b02      	ldr	r3, [pc, #8]	; (be300 <abort+0xc>)
   be2f8:	681b      	ldr	r3, [r3, #0]
   be2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   be2fc:	9301      	str	r3, [sp, #4]
   be2fe:	bd08      	pop	{r3, pc}
   be300:	0003021c 	.word	0x0003021c

000be304 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   be304:	b508      	push	{r3, lr}
   be306:	4b02      	ldr	r3, [pc, #8]	; (be310 <_malloc_r+0xc>)
   be308:	681b      	ldr	r3, [r3, #0]
   be30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   be30c:	9301      	str	r3, [sp, #4]
   be30e:	bd08      	pop	{r3, pc}
   be310:	0003021c 	.word	0x0003021c

000be314 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   be314:	b508      	push	{r3, lr}
   be316:	4b02      	ldr	r3, [pc, #8]	; (be320 <__errno+0xc>)
   be318:	681b      	ldr	r3, [r3, #0]
   be31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   be31c:	9301      	str	r3, [sp, #4]
   be31e:	bd08      	pop	{r3, pc}
   be320:	0003021c 	.word	0x0003021c

000be324 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   be324:	b508      	push	{r3, lr}
   be326:	4b02      	ldr	r3, [pc, #8]	; (be330 <__assert_func+0xc>)
   be328:	681b      	ldr	r3, [r3, #0]
   be32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   be32c:	9301      	str	r3, [sp, #4]
   be32e:	bd08      	pop	{r3, pc}
   be330:	0003021c 	.word	0x0003021c

000be334 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   be334:	b508      	push	{r3, lr}
   be336:	4b02      	ldr	r3, [pc, #8]	; (be340 <newlib_impure_ptr_callback+0xc>)
   be338:	681b      	ldr	r3, [r3, #0]
   be33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   be33c:	9301      	str	r3, [sp, #4]
   be33e:	bd08      	pop	{r3, pc}
   be340:	0003021c 	.word	0x0003021c

000be344 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   be344:	b508      	push	{r3, lr}
   be346:	4b02      	ldr	r3, [pc, #8]	; (be350 <localtime_r+0xc>)
   be348:	681b      	ldr	r3, [r3, #0]
   be34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   be34c:	9301      	str	r3, [sp, #4]
   be34e:	bd08      	pop	{r3, pc}
   be350:	0003021c 	.word	0x0003021c

000be354 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   be354:	2200      	movs	r2, #0
   be356:	6840      	ldr	r0, [r0, #4]
   be358:	4611      	mov	r1, r2
   be35a:	f7ff bf33 	b.w	be1c4 <network_listening>

000be35e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   be35e:	2200      	movs	r2, #0
   be360:	6840      	ldr	r0, [r0, #4]
   be362:	4611      	mov	r1, r2
   be364:	f7ff bf3e 	b.w	be1e4 <network_get_listen_timeout>

000be368 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   be368:	6840      	ldr	r0, [r0, #4]
   be36a:	2200      	movs	r2, #0
   be36c:	f7ff bf32 	b.w	be1d4 <network_set_listen_timeout>

000be370 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   be370:	6840      	ldr	r0, [r0, #4]
   be372:	2200      	movs	r2, #0
   be374:	f081 0101 	eor.w	r1, r1, #1
   be378:	f7ff bf1c 	b.w	be1b4 <network_listen>

000be37c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   be37c:	2300      	movs	r3, #0
   be37e:	6840      	ldr	r0, [r0, #4]
   be380:	461a      	mov	r2, r3
   be382:	4619      	mov	r1, r3
   be384:	f7ff bf0e 	b.w	be1a4 <network_off>

000be388 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   be388:	2300      	movs	r3, #0
   be38a:	6840      	ldr	r0, [r0, #4]
   be38c:	461a      	mov	r2, r3
   be38e:	4619      	mov	r1, r3
   be390:	f7ff bf00 	b.w	be194 <network_on>

000be394 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   be394:	2200      	movs	r2, #0
   be396:	6840      	ldr	r0, [r0, #4]
   be398:	4611      	mov	r1, r2
   be39a:	f7ff bef3 	b.w	be184 <network_ready>

000be39e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   be39e:	2200      	movs	r2, #0
   be3a0:	6840      	ldr	r0, [r0, #4]
   be3a2:	4611      	mov	r1, r2
   be3a4:	f7ff bede 	b.w	be164 <network_connecting>

000be3a8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   be3a8:	6840      	ldr	r0, [r0, #4]
   be3aa:	2200      	movs	r2, #0
   be3ac:	2102      	movs	r1, #2
   be3ae:	f7ff bee1 	b.w	be174 <network_disconnect>

000be3b2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   be3b2:	2300      	movs	r3, #0
   be3b4:	6840      	ldr	r0, [r0, #4]
   be3b6:	461a      	mov	r2, r3
   be3b8:	f7ff becc 	b.w	be154 <network_connect>

000be3bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   be3bc:	4b02      	ldr	r3, [pc, #8]	; (be3c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   be3be:	2203      	movs	r2, #3
   be3c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   be3c2:	4a02      	ldr	r2, [pc, #8]	; (be3cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   be3c4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   be3c6:	4770      	bx	lr
   be3c8:	2003e61c 	.word	0x2003e61c
   be3cc:	000c7c20 	.word	0x000c7c20

000be3d0 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   be3d0:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   be3d2:	460b      	mov	r3, r1
    s->update(ticks);
   be3d4:	6892      	ldr	r2, [r2, #8]
   be3d6:	4601      	mov	r1, r0
   be3d8:	4618      	mov	r0, r3
   be3da:	4710      	bx	r2

000be3dc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   be3dc:	b570      	push	{r4, r5, r6, lr}
   be3de:	4c0e      	ldr	r4, [pc, #56]	; (be418 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   be3e0:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   be3e2:	2500      	movs	r5, #0
   be3e4:	241c      	movs	r4, #28
   be3e6:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be3ea:	f89d 4014 	ldrb.w	r4, [sp, #20]
   be3ee:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   be3f2:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   be3f4:	f004 0403 	and.w	r4, r4, #3
   be3f8:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   be3fc:	b2e4      	uxtb	r4, r4
   be3fe:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   be400:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   be402:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   be404:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   be406:	7c42      	ldrb	r2, [r0, #17]
   be408:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   be40a:	bf0a      	itet	eq
   be40c:	4b03      	ldreq	r3, [pc, #12]	; (be41c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   be40e:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   be410:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   be414:	bd70      	pop	{r4, r5, r6, pc}
   be416:	bf00      	nop
   be418:	000c6d7c 	.word	0x000c6d7c
   be41c:	000be3d1 	.word	0x000be3d1

000be420 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   be420:	2100      	movs	r1, #0
   be422:	f7ff bdc1 	b.w	bdfa8 <hal_spi_release>

000be426 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   be426:	2100      	movs	r1, #0
   be428:	f7ff bdb6 	b.w	bdf98 <hal_spi_acquire>

000be42c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   be42c:	b510      	push	{r4, lr}
   be42e:	4604      	mov	r4, r0
   be430:	4608      	mov	r0, r1
{
    _spi = spi;
   be432:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   be434:	f7ff fd80 	bl	bdf38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   be438:	2300      	movs	r3, #0
   be43a:	6063      	str	r3, [r4, #4]
}
   be43c:	4620      	mov	r0, r4
   be43e:	bd10      	pop	{r4, pc}

000be440 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   be440:	b513      	push	{r0, r1, r4, lr}
   be442:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   be444:	7800      	ldrb	r0, [r0, #0]
   be446:	f7ff ffee 	bl	be426 <_ZN8SPIClass4lockEv.isra.0>
   be44a:	b958      	cbnz	r0, be464 <_ZN8SPIClass5beginEv+0x24>
   be44c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   be44e:	9001      	str	r0, [sp, #4]
   be450:	f64f 71ff 	movw	r1, #65535	; 0xffff
   be454:	f7ff fd60 	bl	bdf18 <hal_spi_begin>
        unlock();
   be458:	9801      	ldr	r0, [sp, #4]
    }
}
   be45a:	b002      	add	sp, #8
   be45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be460:	f7ff bfde 	b.w	be420 <_ZN8SPIClass6unlockEv.isra.0>
   be464:	b002      	add	sp, #8
   be466:	bd10      	pop	{r4, pc}

000be468 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   be468:	7800      	ldrb	r0, [r0, #0]
   be46a:	f7ff bfd9 	b.w	be420 <_ZN8SPIClass6unlockEv.isra.0>
	...

000be470 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   be470:	0840      	lsrs	r0, r0, #1
{
   be472:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   be474:	6018      	str	r0, [r3, #0]
   be476:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   be478:	6818      	ldr	r0, [r3, #0]
   be47a:	4288      	cmp	r0, r1
   be47c:	b2e5      	uxtb	r5, r4
   be47e:	d906      	bls.n	be48e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   be480:	3401      	adds	r4, #1
   be482:	2c08      	cmp	r4, #8
   be484:	d002      	beq.n	be48c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   be486:	0840      	lsrs	r0, r0, #1
   be488:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   be48a:	e7f5      	b.n	be478 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   be48c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   be48e:	4b02      	ldr	r3, [pc, #8]	; (be498 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   be490:	5d5b      	ldrb	r3, [r3, r5]
   be492:	7013      	strb	r3, [r2, #0]
}
   be494:	bd30      	pop	{r4, r5, pc}
   be496:	bf00      	nop
   be498:	000c7c54 	.word	0x000c7c54

000be49c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   be49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be4a0:	4606      	mov	r6, r0
   be4a2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   be4a4:	7800      	ldrb	r0, [r0, #0]
{
   be4a6:	460c      	mov	r4, r1
    CHECK(lock());
   be4a8:	f7ff ffbd 	bl	be426 <_ZN8SPIClass4lockEv.isra.0>
   be4ac:	2800      	cmp	r0, #0
   be4ae:	db1b      	blt.n	be4e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   be4b0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   be4b2:	2214      	movs	r2, #20
   be4b4:	2100      	movs	r1, #0
   be4b6:	a809      	add	r0, sp, #36	; 0x24
   be4b8:	f006 f85e 	bl	c4578 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   be4bc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   be4be:	2200      	movs	r2, #0
   be4c0:	a909      	add	r1, sp, #36	; 0x24
   be4c2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   be4c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   be4c8:	f7ff fd46 	bl	bdf58 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   be4cc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   be4d0:	b113      	cbz	r3, be4d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   be4d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   be4d6:	b155      	cbz	r5, be4ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   be4d8:	2700      	movs	r7, #0
   be4da:	46b9      	mov	r9, r7
   be4dc:	46b8      	mov	r8, r7
   be4de:	2501      	movs	r5, #1
    if (default_ && other.default_)
   be4e0:	7923      	ldrb	r3, [r4, #4]
   be4e2:	b15d      	cbz	r5, be4fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   be4e4:	b1c3      	cbz	r3, be518 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   be4e6:	2000      	movs	r0, #0
}
   be4e8:	b00f      	add	sp, #60	; 0x3c
   be4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   be4ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   be4f2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   be4f6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   be4fa:	e7f1      	b.n	be4e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   be4fc:	2b00      	cmp	r3, #0
   be4fe:	d135      	bne.n	be56c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   be500:	68a3      	ldr	r3, [r4, #8]
   be502:	4543      	cmp	r3, r8
   be504:	d108      	bne.n	be518 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   be506:	f88d 9020 	strb.w	r9, [sp, #32]
   be50a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be50e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be512:	89a3      	ldrh	r3, [r4, #12]
   be514:	429a      	cmp	r2, r3
   be516:	d0e6      	beq.n	be4e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   be518:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be51a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   be51c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   be520:	980a      	ldr	r0, [sp, #40]	; 0x28
   be522:	ab04      	add	r3, sp, #16
   be524:	f10d 020f 	add.w	r2, sp, #15
   be528:	f7ff ffa2 	bl	be470 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   be52c:	7921      	ldrb	r1, [r4, #4]
   be52e:	b985      	cbnz	r5, be552 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   be530:	b989      	cbnz	r1, be556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be532:	68a3      	ldr	r3, [r4, #8]
   be534:	4543      	cmp	r3, r8
   be536:	d30e      	bcc.n	be556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   be538:	f88d 9020 	strb.w	r9, [sp, #32]
   be53c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   be540:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   be544:	89a3      	ldrh	r3, [r4, #12]
   be546:	429a      	cmp	r2, r3
   be548:	d105      	bne.n	be556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   be54a:	9b04      	ldr	r3, [sp, #16]
   be54c:	4543      	cmp	r3, r8
   be54e:	d102      	bne.n	be556 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   be550:	e7c9      	b.n	be4e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   be552:	2900      	cmp	r1, #0
   be554:	d1f9      	bne.n	be54a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   be556:	2300      	movs	r3, #0
   be558:	9301      	str	r3, [sp, #4]
   be55a:	7b63      	ldrb	r3, [r4, #13]
   be55c:	9300      	str	r3, [sp, #0]
   be55e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   be562:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   be564:	7830      	ldrb	r0, [r6, #0]
   be566:	f7ff fd0f 	bl	bdf88 <hal_spi_set_settings>
   be56a:	e7bc      	b.n	be4e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   be56c:	e9cd 5500 	strd	r5, r5, [sp]
   be570:	462b      	mov	r3, r5
   be572:	462a      	mov	r2, r5
   be574:	2101      	movs	r1, #1
   be576:	e7f5      	b.n	be564 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000be578 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   be578:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   be57a:	7800      	ldrb	r0, [r0, #0]
   be57c:	f7ff fcd4 	bl	bdf28 <hal_spi_transfer>
}
   be580:	b2c0      	uxtb	r0, r0
   be582:	bd08      	pop	{r3, pc}

000be584 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   be584:	b530      	push	{r4, r5, lr}
   be586:	b087      	sub	sp, #28
   be588:	4604      	mov	r4, r0
   be58a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   be58c:	9500      	str	r5, [sp, #0]
   be58e:	7800      	ldrb	r0, [r0, #0]
   be590:	f7ff fcea 	bl	bdf68 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   be594:	b93d      	cbnz	r5, be5a6 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   be596:	7820      	ldrb	r0, [r4, #0]
   be598:	a902      	add	r1, sp, #8
   be59a:	f7ff fced 	bl	bdf78 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   be59e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   be5a2:	07db      	lsls	r3, r3, #31
   be5a4:	d4f7      	bmi.n	be596 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   be5a6:	b007      	add	sp, #28
   be5a8:	bd30      	pop	{r4, r5, pc}

000be5aa <_ZN5Servo17writeMicrosecondsEt>:
    /**
     * @brief Check if this instance is attached to a servo.
     * @return true if this instance is attached to a servo, false otherwise.
     * @see Servo::attachedPin()
     */
    bool attached() const { return this->pin != NOT_ATTACHED; }
   be5aa:	f9b0 2000 	ldrsh.w	r2, [r0]
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   be5ae:	1c53      	adds	r3, r2, #1
   be5b0:	d00b      	beq.n	be5ca <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   be5b2:	8843      	ldrh	r3, [r0, #2]
   be5b4:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   be5b6:	428b      	cmp	r3, r1
   be5b8:	d803      	bhi.n	be5c2 <_ZN5Servo17writeMicrosecondsEt+0x18>
   be5ba:	4288      	cmp	r0, r1
   be5bc:	4603      	mov	r3, r0
   be5be:	bf28      	it	cs
   be5c0:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   be5c2:	4619      	mov	r1, r3
   be5c4:	b290      	uxth	r0, r2
   be5c6:	f7ff bd07 	b.w	bdfd8 <HAL_Servo_Write_Pulse_Width>
}
   be5ca:	4770      	bx	lr

000be5cc <_ZN5Servo5writeEi>:
{
   be5cc:	b513      	push	{r0, r1, r4, lr}
   be5ce:	4604      	mov	r4, r0
   be5d0:	4608      	mov	r0, r1
   be5d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   be5d6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   be5da:	4288      	cmp	r0, r1
   be5dc:	db10      	blt.n	be600 <_ZN5Servo5writeEi+0x34>
   be5de:	4290      	cmp	r0, r2
   be5e0:	bfa8      	it	ge
   be5e2:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be5e4:	88a3      	ldrh	r3, [r4, #4]
   be5e6:	9300      	str	r3, [sp, #0]
   be5e8:	8863      	ldrh	r3, [r4, #2]
   be5ea:	f002 fc25 	bl	c0e38 <_Z3mapiiiii>
   be5ee:	68e1      	ldr	r1, [r4, #12]
   be5f0:	4401      	add	r1, r0
   be5f2:	b289      	uxth	r1, r1
   be5f4:	4620      	mov	r0, r4
}
   be5f6:	b002      	add	sp, #8
   be5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   be5fc:	f7ff bfd5 	b.w	be5aa <_ZN5Servo17writeMicrosecondsEt>
   be600:	4608      	mov	r0, r1
   be602:	e7ef      	b.n	be5e4 <_ZN5Servo5writeEi+0x18>

000be604 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   be604:	4a04      	ldr	r2, [pc, #16]	; (be618 <_ZN5Servo11resetFieldsEv+0x14>)
   be606:	f44f 6316 	mov.w	r3, #2400	; 0x960
   be60a:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   be60e:	23b4      	movs	r3, #180	; 0xb4
   be610:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   be612:	2300      	movs	r3, #0
   be614:	60c3      	str	r3, [r0, #12]
}
   be616:	4770      	bx	lr
   be618:	0220ffff 	.word	0x0220ffff

000be61c <_ZN5ServoC1Ev>:
Servo::Servo()
   be61c:	b508      	push	{r3, lr}
  this->resetFields();
   be61e:	f7ff fff1 	bl	be604 <_ZN5Servo11resetFieldsEv>
}
   be622:	bd08      	pop	{r3, pc}

000be624 <_ZN5Servo6detachEv>:
{
   be624:	b510      	push	{r4, lr}
   be626:	4604      	mov	r4, r0
   be628:	f9b0 0000 	ldrsh.w	r0, [r0]
  if (!this->attached())
   be62c:	1c43      	adds	r3, r0, #1
   be62e:	d007      	beq.n	be640 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   be630:	b280      	uxth	r0, r0
   be632:	f7ff fcc9 	bl	bdfc8 <HAL_Servo_Detach>
  this->resetFields();
   be636:	4620      	mov	r0, r4
   be638:	f7ff ffe4 	bl	be604 <_ZN5Servo11resetFieldsEv>
  return true;
   be63c:	2001      	movs	r0, #1
}
   be63e:	bd10      	pop	{r4, pc}
    return false;
   be640:	2000      	movs	r0, #0
   be642:	e7fc      	b.n	be63e <_ZN5Servo6detachEv+0x1a>

000be644 <_ZN5Servo6attachEtttss>:
{
   be644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be648:	460d      	mov	r5, r1
   be64a:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be64c:	2102      	movs	r1, #2
   be64e:	4628      	mov	r0, r5
{
   be650:	4690      	mov	r8, r2
   be652:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   be654:	f7ff fa4e 	bl	bdaf4 <HAL_Validate_Pin_Function>
   be658:	2802      	cmp	r0, #2
   be65a:	d003      	beq.n	be664 <_ZN5Servo6attachEtttss+0x20>
    return false;
   be65c:	2600      	movs	r6, #0
}
   be65e:	4630      	mov	r0, r6
   be660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   be664:	4628      	mov	r0, r5
   be666:	f003 fc4f 	bl	c1f08 <pinAvailable>
   be66a:	4606      	mov	r6, r0
   be66c:	2800      	cmp	r0, #0
   be66e:	d0f5      	beq.n	be65c <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   be670:	f9b4 3000 	ldrsh.w	r3, [r4]
   be674:	3301      	adds	r3, #1
   be676:	d002      	beq.n	be67e <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   be678:	4620      	mov	r0, r4
   be67a:	f7ff ffd3 	bl	be624 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   be67e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   be682:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   be684:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   be688:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   be68a:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   be68e:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   be690:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   be692:	4628      	mov	r0, r5
   be694:	f7ff fc90 	bl	bdfb8 <HAL_Servo_Attach>
  return true;
   be698:	e7e1      	b.n	be65e <_ZN5Servo6attachEtttss+0x1a>
	...

000be69c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   be69c:	4b05      	ldr	r3, [pc, #20]	; (be6b4 <_GLOBAL__sub_I_System+0x18>)
   be69e:	2202      	movs	r2, #2
   be6a0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   be6a2:	4b05      	ldr	r3, [pc, #20]	; (be6b8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   be6a4:	4a05      	ldr	r2, [pc, #20]	; (be6bc <_GLOBAL__sub_I_System+0x20>)
   be6a6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   be6a8:	2000      	movs	r0, #0
   be6aa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   be6ae:	f7ff bd0d 	b.w	be0cc <set_system_mode>
   be6b2:	bf00      	nop
   be6b4:	2003e630 	.word	0x2003e630
   be6b8:	2003e624 	.word	0x2003e624
   be6bc:	ffff0000 	.word	0xffff0000

000be6c0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   be6c0:	b510      	push	{r4, lr}
   be6c2:	4604      	mov	r4, r0
{
	free(buffer);
   be6c4:	6800      	ldr	r0, [r0, #0]
   be6c6:	f7ff fde5 	bl	be294 <free>
}
   be6ca:	4620      	mov	r0, r4
   be6cc:	bd10      	pop	{r4, pc}

000be6ce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   be6ce:	b510      	push	{r4, lr}
   be6d0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   be6d2:	6800      	ldr	r0, [r0, #0]
   be6d4:	b108      	cbz	r0, be6da <_ZN6String10invalidateEv+0xc>
   be6d6:	f7ff fddd 	bl	be294 <free>
	buffer = NULL;
   be6da:	2300      	movs	r3, #0
	capacity = len = 0;
   be6dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   be6e0:	6023      	str	r3, [r4, #0]
}
   be6e2:	bd10      	pop	{r4, pc}

000be6e4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   be6e4:	b538      	push	{r3, r4, r5, lr}
   be6e6:	4604      	mov	r4, r0
   be6e8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   be6ea:	6800      	ldr	r0, [r0, #0]
   be6ec:	3101      	adds	r1, #1
   be6ee:	f7ff fdd9 	bl	be2a4 <realloc>
	if (newbuffer) {
   be6f2:	b110      	cbz	r0, be6fa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   be6f4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   be6f8:	2001      	movs	r0, #1
	}
	return 0;
}
   be6fa:	bd38      	pop	{r3, r4, r5, pc}

000be6fc <_ZN6String7reserveEj>:
{
   be6fc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   be6fe:	6803      	ldr	r3, [r0, #0]
{
   be700:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   be702:	b123      	cbz	r3, be70e <_ZN6String7reserveEj+0x12>
   be704:	6843      	ldr	r3, [r0, #4]
   be706:	428b      	cmp	r3, r1
   be708:	d301      	bcc.n	be70e <_ZN6String7reserveEj+0x12>
   be70a:	2001      	movs	r0, #1
}
   be70c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   be70e:	4620      	mov	r0, r4
   be710:	f7ff ffe8 	bl	be6e4 <_ZN6String12changeBufferEj>
   be714:	2800      	cmp	r0, #0
   be716:	d0f9      	beq.n	be70c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   be718:	68a3      	ldr	r3, [r4, #8]
   be71a:	2b00      	cmp	r3, #0
   be71c:	d1f5      	bne.n	be70a <_ZN6String7reserveEj+0xe>
   be71e:	6822      	ldr	r2, [r4, #0]
   be720:	7013      	strb	r3, [r2, #0]
   be722:	e7f2      	b.n	be70a <_ZN6String7reserveEj+0xe>

000be724 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   be724:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be726:	460d      	mov	r5, r1
	if (!reserve(length)) {
   be728:	4611      	mov	r1, r2
   be72a:	9201      	str	r2, [sp, #4]
{
   be72c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   be72e:	f7ff ffe5 	bl	be6fc <_ZN6String7reserveEj>
   be732:	9a01      	ldr	r2, [sp, #4]
   be734:	b928      	cbnz	r0, be742 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   be736:	4620      	mov	r0, r4
   be738:	f7ff ffc9 	bl	be6ce <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   be73c:	4620      	mov	r0, r4
   be73e:	b003      	add	sp, #12
   be740:	bd30      	pop	{r4, r5, pc}
	len = length;
   be742:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   be744:	4629      	mov	r1, r5
   be746:	6820      	ldr	r0, [r4, #0]
   be748:	f005 feee 	bl	c4528 <memcpy>
	buffer[len] = 0;
   be74c:	6822      	ldr	r2, [r4, #0]
   be74e:	68a3      	ldr	r3, [r4, #8]
   be750:	2100      	movs	r1, #0
   be752:	54d1      	strb	r1, [r2, r3]
	return *this;
   be754:	e7f2      	b.n	be73c <_ZN6String4copyEPKcj+0x18>

000be756 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   be756:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   be758:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   be75a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   be75e:	4604      	mov	r4, r0
	len = 0;
   be760:	6083      	str	r3, [r0, #8]
	flags = 0;
   be762:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   be764:	b141      	cbz	r1, be778 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   be766:	4608      	mov	r0, r1
   be768:	9101      	str	r1, [sp, #4]
   be76a:	f005 ff90 	bl	c468e <strlen>
   be76e:	9901      	ldr	r1, [sp, #4]
   be770:	4602      	mov	r2, r0
   be772:	4620      	mov	r0, r4
   be774:	f7ff ffd6 	bl	be724 <_ZN6String4copyEPKcj>
}
   be778:	4620      	mov	r0, r4
   be77a:	b002      	add	sp, #8
   be77c:	bd10      	pop	{r4, pc}

000be77e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   be77e:	b538      	push	{r3, r4, r5, lr}
   be780:	4605      	mov	r5, r0
	if (buffer) {
   be782:	6800      	ldr	r0, [r0, #0]
{
   be784:	460c      	mov	r4, r1
	if (buffer) {
   be786:	b168      	cbz	r0, be7a4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   be788:	686a      	ldr	r2, [r5, #4]
   be78a:	688b      	ldr	r3, [r1, #8]
   be78c:	429a      	cmp	r2, r3
   be78e:	d307      	bcc.n	be7a0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   be790:	6809      	ldr	r1, [r1, #0]
   be792:	f005 ff57 	bl	c4644 <strcpy>
			len = rhs.len;
   be796:	68a3      	ldr	r3, [r4, #8]
   be798:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   be79a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   be79c:	60a3      	str	r3, [r4, #8]
}
   be79e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   be7a0:	f7ff fd78 	bl	be294 <free>
	buffer = rhs.buffer;
   be7a4:	6823      	ldr	r3, [r4, #0]
   be7a6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   be7a8:	6863      	ldr	r3, [r4, #4]
   be7aa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   be7ac:	68a3      	ldr	r3, [r4, #8]
   be7ae:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   be7b0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   be7b2:	e9c4 3300 	strd	r3, r3, [r4]
   be7b6:	e7f1      	b.n	be79c <_ZN6String4moveERS_+0x1e>

000be7b8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   be7b8:	b510      	push	{r4, lr}
	buffer = NULL;
   be7ba:	2300      	movs	r3, #0
	capacity = 0;
   be7bc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   be7c0:	4604      	mov	r4, r0
	len = 0;
   be7c2:	6083      	str	r3, [r0, #8]
	flags = 0;
   be7c4:	7303      	strb	r3, [r0, #12]
	move(rval);
   be7c6:	f7ff ffda 	bl	be77e <_ZN6String4moveERS_>
}
   be7ca:	4620      	mov	r0, r4
   be7cc:	bd10      	pop	{r4, pc}

000be7ce <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   be7ce:	4288      	cmp	r0, r1
{
   be7d0:	b510      	push	{r4, lr}
   be7d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   be7d4:	d005      	beq.n	be7e2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   be7d6:	680b      	ldr	r3, [r1, #0]
   be7d8:	b12b      	cbz	r3, be7e6 <_ZN6StringaSERKS_+0x18>
   be7da:	688a      	ldr	r2, [r1, #8]
   be7dc:	4619      	mov	r1, r3
   be7de:	f7ff ffa1 	bl	be724 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be7e2:	4620      	mov	r0, r4
   be7e4:	bd10      	pop	{r4, pc}
	else invalidate();
   be7e6:	f7ff ff72 	bl	be6ce <_ZN6String10invalidateEv>
   be7ea:	e7fa      	b.n	be7e2 <_ZN6StringaSERKS_+0x14>

000be7ec <_ZN6StringC1ERKS_>:
String::String(const String &value)
   be7ec:	b510      	push	{r4, lr}
	buffer = NULL;
   be7ee:	2300      	movs	r3, #0
String::String(const String &value)
   be7f0:	4604      	mov	r4, r0
	capacity = 0;
   be7f2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   be7f6:	6083      	str	r3, [r0, #8]
	flags = 0;
   be7f8:	7303      	strb	r3, [r0, #12]
	*this = value;
   be7fa:	f7ff ffe8 	bl	be7ce <_ZN6StringaSERKS_>
}
   be7fe:	4620      	mov	r0, r4
   be800:	bd10      	pop	{r4, pc}

000be802 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   be802:	b513      	push	{r0, r1, r4, lr}
   be804:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   be806:	b159      	cbz	r1, be820 <_ZN6StringaSEPKc+0x1e>
   be808:	4608      	mov	r0, r1
   be80a:	9101      	str	r1, [sp, #4]
   be80c:	f005 ff3f 	bl	c468e <strlen>
   be810:	9901      	ldr	r1, [sp, #4]
   be812:	4602      	mov	r2, r0
   be814:	4620      	mov	r0, r4
   be816:	f7ff ff85 	bl	be724 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   be81a:	4620      	mov	r0, r4
   be81c:	b002      	add	sp, #8
   be81e:	bd10      	pop	{r4, pc}
	else invalidate();
   be820:	f7ff ff55 	bl	be6ce <_ZN6String10invalidateEv>
   be824:	e7f9      	b.n	be81a <_ZN6StringaSEPKc+0x18>

000be826 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   be826:	b570      	push	{r4, r5, r6, lr}
   be828:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   be82a:	460e      	mov	r6, r1
   be82c:	b909      	cbnz	r1, be832 <_ZN6String6concatEPKcj+0xc>
   be82e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   be830:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   be832:	b16a      	cbz	r2, be850 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   be834:	6884      	ldr	r4, [r0, #8]
   be836:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   be838:	4621      	mov	r1, r4
   be83a:	f7ff ff5f 	bl	be6fc <_ZN6String7reserveEj>
   be83e:	2800      	cmp	r0, #0
   be840:	d0f5      	beq.n	be82e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   be842:	6828      	ldr	r0, [r5, #0]
   be844:	68ab      	ldr	r3, [r5, #8]
   be846:	4631      	mov	r1, r6
   be848:	4418      	add	r0, r3
   be84a:	f005 fefb 	bl	c4644 <strcpy>
	len = newlen;
   be84e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   be850:	2001      	movs	r0, #1
   be852:	e7ed      	b.n	be830 <_ZN6String6concatEPKcj+0xa>

000be854 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   be854:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   be856:	2300      	movs	r3, #0
	buf[0] = c;
   be858:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   be85c:	2201      	movs	r2, #1
   be85e:	a901      	add	r1, sp, #4
	buf[1] = 0;
   be860:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   be864:	f7ff ffdf 	bl	be826 <_ZN6String6concatEPKcj>
}
   be868:	b003      	add	sp, #12
   be86a:	f85d fb04 	ldr.w	pc, [sp], #4

000be86e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   be86e:	6883      	ldr	r3, [r0, #8]
   be870:	428b      	cmp	r3, r1
   be872:	d903      	bls.n	be87c <_ZNK6StringixEj+0xe>
   be874:	6800      	ldr	r0, [r0, #0]
   be876:	b110      	cbz	r0, be87e <_ZNK6StringixEj+0x10>
	return buffer[index];
   be878:	5c40      	ldrb	r0, [r0, r1]
   be87a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   be87c:	2000      	movs	r0, #0
}
   be87e:	4770      	bx	lr

000be880 <_ZNK6String6charAtEj>:
	return operator[](loc);
   be880:	f7ff bff5 	b.w	be86e <_ZNK6StringixEj>

000be884 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   be884:	b558      	push	{r3, r4, r6, lr}
   be886:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   be888:	b12a      	cbz	r2, be896 <_ZNK6String8getBytesEPhjj+0x12>
   be88a:	b121      	cbz	r1, be896 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   be88c:	6884      	ldr	r4, [r0, #8]
   be88e:	42a3      	cmp	r3, r4
   be890:	d302      	bcc.n	be898 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   be892:	2300      	movs	r3, #0
   be894:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   be896:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   be898:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   be89a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   be89c:	6801      	ldr	r1, [r0, #0]
   be89e:	4294      	cmp	r4, r2
   be8a0:	bf28      	it	cs
   be8a2:	4614      	movcs	r4, r2
   be8a4:	4419      	add	r1, r3
   be8a6:	4622      	mov	r2, r4
   be8a8:	4630      	mov	r0, r6
   be8aa:	f005 ff1f 	bl	c46ec <strncpy>
	buf[n] = 0;
   be8ae:	2300      	movs	r3, #0
   be8b0:	5533      	strb	r3, [r6, r4]
   be8b2:	e7f0      	b.n	be896 <_ZNK6String8getBytesEPhjj+0x12>

000be8b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be8b4:	4770      	bx	lr

000be8b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   be8b6:	4770      	bx	lr

000be8b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   be8b8:	4770      	bx	lr

000be8ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be8ba:	4770      	bx	lr

000be8bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be8bc:	4b06      	ldr	r3, [pc, #24]	; (be8d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be8be:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be8c0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   be8c2:	f100 040c 	add.w	r4, r0, #12
	    ||
   be8c6:	d005      	beq.n	be8d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be8c8:	4608      	mov	r0, r1
   be8ca:	f003 fc33 	bl	c2134 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be8ce:	2800      	cmp	r0, #0
   be8d0:	bf08      	it	eq
   be8d2:	2400      	moveq	r4, #0
      }
   be8d4:	4620      	mov	r0, r4
   be8d6:	bd10      	pop	{r4, pc}
   be8d8:	000c7dfc 	.word	0x000c7dfc

000be8dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be8dc:	4b06      	ldr	r3, [pc, #24]	; (be8f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be8de:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be8e0:	b510      	push	{r4, lr}
   be8e2:	f100 040c 	add.w	r4, r0, #12
	    ||
   be8e6:	d005      	beq.n	be8f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be8e8:	4608      	mov	r0, r1
   be8ea:	f003 fc23 	bl	c2134 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be8ee:	2800      	cmp	r0, #0
   be8f0:	bf08      	it	eq
   be8f2:	2400      	moveq	r4, #0
      }
   be8f4:	4620      	mov	r0, r4
   be8f6:	bd10      	pop	{r4, pc}
   be8f8:	000c7dfc 	.word	0x000c7dfc

000be8fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   be8fc:	4b06      	ldr	r3, [pc, #24]	; (be918 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   be8fe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   be900:	b510      	push	{r4, lr}
   be902:	f100 040c 	add.w	r4, r0, #12
	    ||
   be906:	d005      	beq.n	be914 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   be908:	4608      	mov	r0, r1
   be90a:	f003 fc13 	bl	c2134 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   be90e:	2800      	cmp	r0, #0
   be910:	bf08      	it	eq
   be912:	2400      	moveq	r4, #0
      }
   be914:	4620      	mov	r0, r4
   be916:	bd10      	pop	{r4, pc}
   be918:	000c7dfc 	.word	0x000c7dfc

000be91c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   be91c:	b510      	push	{r4, lr}
   be91e:	2168      	movs	r1, #104	; 0x68
   be920:	4604      	mov	r4, r0
   be922:	f7f5 fbbe 	bl	b40a2 <_ZdlPvj>
   be926:	4620      	mov	r0, r4
   be928:	bd10      	pop	{r4, pc}

000be92a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be92a:	b510      	push	{r4, lr}
   be92c:	2128      	movs	r1, #40	; 0x28
   be92e:	4604      	mov	r4, r0
   be930:	f7f5 fbb7 	bl	b40a2 <_ZdlPvj>
   be934:	4620      	mov	r0, r4
   be936:	bd10      	pop	{r4, pc}

000be938 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   be938:	b510      	push	{r4, lr}
   be93a:	2130      	movs	r1, #48	; 0x30
   be93c:	4604      	mov	r4, r0
   be93e:	f7f5 fbb0 	bl	b40a2 <_ZdlPvj>
   be942:	4620      	mov	r0, r4
   be944:	bd10      	pop	{r4, pc}

000be946 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   be946:	2168      	movs	r1, #104	; 0x68
   be948:	f7f5 bbab 	b.w	b40a2 <_ZdlPvj>

000be94c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be94c:	2128      	movs	r1, #40	; 0x28
   be94e:	f7f5 bba8 	b.w	b40a2 <_ZdlPvj>

000be952 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   be952:	2130      	movs	r1, #48	; 0x30
   be954:	f7f5 bba5 	b.w	b40a2 <_ZdlPvj>

000be958 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   be958:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be95a:	2500      	movs	r5, #0
   be95c:	1cec      	adds	r4, r5, #3
   be95e:	428c      	cmp	r4, r1
   be960:	d80d      	bhi.n	be97e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   be962:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   be964:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   be966:	5d87      	ldrb	r7, [r0, r6]
   be968:	4297      	cmp	r7, r2
   be96a:	d105      	bne.n	be978 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   be96c:	4426      	add	r6, r4
   be96e:	42b1      	cmp	r1, r6
   be970:	d305      	bcc.n	be97e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   be972:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   be974:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   be976:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   be978:	3401      	adds	r4, #1
   be97a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   be97c:	e7ee      	b.n	be95c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   be97e:	2000      	movs	r0, #0
   be980:	e7f9      	b.n	be976 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000be984 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   be984:	4a02      	ldr	r2, [pc, #8]	; (be990 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   be986:	4903      	ldr	r1, [pc, #12]	; (be994 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   be988:	200a      	movs	r0, #10
   be98a:	f7ff bb6d 	b.w	be068 <panic_>
   be98e:	bf00      	nop
   be990:	000bdba5 	.word	0x000bdba5
   be994:	000c7c5c 	.word	0x000c7c5c

000be998 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   be998:	b430      	push	{r4, r5}
   be99a:	460d      	mov	r5, r1
   be99c:	4611      	mov	r1, r2
   be99e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   be9a0:	6803      	ldr	r3, [r0, #0]
   be9a2:	6809      	ldr	r1, [r1, #0]
   be9a4:	6828      	ldr	r0, [r5, #0]
   be9a6:	e9d3 4300 	ldrd	r4, r3, [r3]
   be9aa:	46a4      	mov	ip, r4
      }
   be9ac:	bc30      	pop	{r4, r5}
   be9ae:	4760      	bx	ip

000be9b0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   be9b0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   be9b2:	b538      	push	{r3, r4, r5, lr}
   be9b4:	4604      	mov	r4, r0
	switch (__op)
   be9b6:	d102      	bne.n	be9be <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   be9b8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   be9ba:	6023      	str	r3, [r4, #0]
	}
   be9bc:	e003      	b.n	be9c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   be9be:	2a02      	cmp	r2, #2
   be9c0:	d003      	beq.n	be9ca <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   be9c2:	2a03      	cmp	r2, #3
   be9c4:	d00d      	beq.n	be9e2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   be9c6:	2000      	movs	r0, #0
   be9c8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   be9ca:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   be9cc:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   be9ce:	f7f5 fb62 	bl	b4096 <_Znwj>
   be9d2:	4603      	mov	r3, r0
   be9d4:	2800      	cmp	r0, #0
   be9d6:	d0f0      	beq.n	be9ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   be9d8:	e895 0003 	ldmia.w	r5, {r0, r1}
   be9dc:	e883 0003 	stmia.w	r3, {r0, r1}
   be9e0:	e7eb      	b.n	be9ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   be9e2:	6800      	ldr	r0, [r0, #0]
   be9e4:	2800      	cmp	r0, #0
   be9e6:	d0ee      	beq.n	be9c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   be9e8:	2108      	movs	r1, #8
   be9ea:	f7f5 fb5a 	bl	b40a2 <_ZdlPvj>
   be9ee:	e7ea      	b.n	be9c6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000be9f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   be9f0:	b510      	push	{r4, lr}
   be9f2:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   be9f4:	3058      	adds	r0, #88	; 0x58
   be9f6:	f7f5 fd63 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   be9fa:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   be9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bea02:	f7ff be5d 	b.w	be6c0 <_ZN6StringD1Ev>

000bea06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bea06:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bea08:	6843      	ldr	r3, [r0, #4]
   bea0a:	3b01      	subs	r3, #1
    {
   bea0c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bea0e:	6043      	str	r3, [r0, #4]
   bea10:	b963      	cbnz	r3, bea2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bea12:	6803      	ldr	r3, [r0, #0]
   bea14:	689b      	ldr	r3, [r3, #8]
   bea16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bea18:	68a3      	ldr	r3, [r4, #8]
   bea1a:	3b01      	subs	r3, #1
   bea1c:	60a3      	str	r3, [r4, #8]
   bea1e:	b92b      	cbnz	r3, bea2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bea20:	6823      	ldr	r3, [r4, #0]
   bea22:	4620      	mov	r0, r4
   bea24:	68db      	ldr	r3, [r3, #12]
    }
   bea26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bea2a:	4718      	bx	r3
    }
   bea2c:	bd10      	pop	{r4, pc}

000bea2e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   bea2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bea32:	b2da      	uxtb	r2, r3
   bea34:	2a09      	cmp	r2, #9
   bea36:	d801      	bhi.n	bea3c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   bea38:	4618      	mov	r0, r3
   bea3a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   bea3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bea40:	2b05      	cmp	r3, #5
   bea42:	d801      	bhi.n	bea48 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   bea44:	3857      	subs	r0, #87	; 0x57
   bea46:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   bea48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bea4c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   bea4e:	bf94      	ite	ls
   bea50:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   bea52:	f04f 30ff 	movhi.w	r0, #4294967295
}
   bea56:	4770      	bx	lr

000bea58 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   bea58:	b510      	push	{r4, lr}
            locked_(false) {
   bea5a:	2300      	movs	r3, #0
   bea5c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   bea5e:	4b04      	ldr	r3, [pc, #16]	; (bea70 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   bea60:	4604      	mov	r4, r0
   bea62:	6818      	ldr	r0, [r3, #0]
   bea64:	f7ff f988 	bl	bdd78 <os_mutex_recursive_lock>
        locked_ = true;
   bea68:	2301      	movs	r3, #1
   bea6a:	7023      	strb	r3, [r4, #0]
    }
   bea6c:	4620      	mov	r0, r4
   bea6e:	bd10      	pop	{r4, pc}
   bea70:	2003e63c 	.word	0x2003e63c

000bea74 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   bea74:	b510      	push	{r4, lr}
        if (locked_) {
   bea76:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   bea78:	4604      	mov	r4, r0
        if (locked_) {
   bea7a:	b11b      	cbz	r3, bea84 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bea7c:	4b02      	ldr	r3, [pc, #8]	; (bea88 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   bea7e:	6818      	ldr	r0, [r3, #0]
   bea80:	f7ff f982 	bl	bdd88 <os_mutex_recursive_unlock>
    }
   bea84:	4620      	mov	r0, r4
   bea86:	bd10      	pop	{r4, pc}
   bea88:	2003e63c 	.word	0x2003e63c

000bea8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   bea8c:	b082      	sub	sp, #8
   bea8e:	4603      	mov	r3, r0
    address_ = addr;
   bea90:	6808      	ldr	r0, [r1, #0]
   bea92:	6849      	ldr	r1, [r1, #4]
   bea94:	466a      	mov	r2, sp
   bea96:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   bea98:	466a      	mov	r2, sp
   bea9a:	ca03      	ldmia	r2!, {r0, r1}
   bea9c:	6018      	str	r0, [r3, #0]
}
   bea9e:	4618      	mov	r0, r3
    address_ = addr.address_;
   beaa0:	6059      	str	r1, [r3, #4]
}
   beaa2:	b002      	add	sp, #8
   beaa4:	4770      	bx	lr

000beaa6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   beaa6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   beaa8:	7982      	ldrb	r2, [r0, #6]
   beaaa:	798b      	ldrb	r3, [r1, #6]
   beaac:	429a      	cmp	r2, r3
   beaae:	d106      	bne.n	beabe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   beab0:	2206      	movs	r2, #6
   beab2:	f005 fd29 	bl	c4508 <memcmp>
   beab6:	fab0 f080 	clz	r0, r0
   beaba:	0940      	lsrs	r0, r0, #5
}
   beabc:	bd08      	pop	{r3, pc}
    return false;
   beabe:	2000      	movs	r0, #0
   beac0:	e7fc      	b.n	beabc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000beac2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   beac2:	f04f 33ff 	mov.w	r3, #4294967295
   beac6:	6003      	str	r3, [r0, #0]
   beac8:	8083      	strh	r3, [r0, #4]
}
   beaca:	2000      	movs	r0, #0
   beacc:	4770      	bx	lr

000beace <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   beace:	b508      	push	{r3, lr}
   bead0:	4602      	mov	r2, r0
        : address_{} {
   bead2:	2100      	movs	r1, #0
   bead4:	6001      	str	r1, [r0, #0]
   bead6:	6041      	str	r1, [r0, #4]
    clear();
   bead8:	f7ff fff3 	bl	beac2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   beadc:	7191      	strb	r1, [r2, #6]
}
   beade:	4610      	mov	r0, r2
   beae0:	bd08      	pop	{r3, pc}
	...

000beae4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   beae4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   beae6:	2301      	movs	r3, #1
   beae8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beaea:	4b05      	ldr	r3, [pc, #20]	; (beb00 <_ZN8particle7BleUuidC1Ev+0x1c>)
   beaec:	4602      	mov	r2, r0
   beaee:	f103 0110 	add.w	r1, r3, #16
   beaf2:	f853 4b04 	ldr.w	r4, [r3], #4
   beaf6:	f842 4b04 	str.w	r4, [r2], #4
   beafa:	428b      	cmp	r3, r1
   beafc:	d1f9      	bne.n	beaf2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   beafe:	bd10      	pop	{r4, pc}
   beb00:	000c7e0a 	.word	0x000c7e0a

000beb04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   beb04:	b510      	push	{r4, lr}
    if (uuid128) {
   beb06:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   beb08:	4604      	mov	r4, r0
    if (uuid128) {
   beb0a:	b1b1      	cbz	r1, beb3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   beb0c:	2a01      	cmp	r2, #1
   beb0e:	f101 0210 	add.w	r2, r1, #16
   beb12:	d10a      	bne.n	beb2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   beb14:	4601      	mov	r1, r0
   beb16:	f853 0b04 	ldr.w	r0, [r3], #4
   beb1a:	f841 0b04 	str.w	r0, [r1], #4
   beb1e:	4293      	cmp	r3, r2
   beb20:	d1f9      	bne.n	beb16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   beb22:	2301      	movs	r3, #1
   beb24:	6123      	str	r3, [r4, #16]
}
   beb26:	4620      	mov	r0, r4
   beb28:	bd10      	pop	{r4, pc}
   beb2a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   beb2c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   beb30:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   beb34:	429a      	cmp	r2, r3
   beb36:	d1f9      	bne.n	beb2c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   beb38:	e7f3      	b.n	beb22 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   beb3a:	2210      	movs	r2, #16
   beb3c:	f005 fd1c 	bl	c4578 <memset>
   beb40:	e7f1      	b.n	beb26 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000beb42 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   beb42:	b538      	push	{r3, r4, r5, lr}
   beb44:	4604      	mov	r4, r0
   beb46:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   beb48:	461a      	mov	r2, r3
   beb4a:	f7ff ffdb 	bl	beb04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   beb4e:	81a5      	strh	r5, [r4, #12]
}
   beb50:	4620      	mov	r0, r4
   beb52:	bd38      	pop	{r3, r4, r5, pc}

000beb54 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   beb54:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   beb56:	6902      	ldr	r2, [r0, #16]
   beb58:	b922      	cbnz	r2, beb64 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   beb5a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beb5c:	3800      	subs	r0, #0
   beb5e:	bf18      	it	ne
   beb60:	2001      	movne	r0, #1
}
   beb62:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   beb64:	4902      	ldr	r1, [pc, #8]	; (beb70 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   beb66:	2210      	movs	r2, #16
   beb68:	f005 fcce 	bl	c4508 <memcmp>
   beb6c:	e7f6      	b.n	beb5c <_ZNK8particle7BleUuid7isValidEv+0x8>
   beb6e:	bf00      	nop
   beb70:	000c7e2a 	.word	0x000c7e2a

000beb74 <_ZNK8particle7BleUuid4typeEv>:
}
   beb74:	6900      	ldr	r0, [r0, #16]
   beb76:	4770      	bx	lr

000beb78 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   beb78:	b538      	push	{r3, r4, r5, lr}
   beb7a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   beb7c:	2214      	movs	r2, #20
   beb7e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   beb80:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   beb82:	f005 fcf9 	bl	c4578 <memset>
    if (type_ == BleUuidType::SHORT) {
   beb86:	6923      	ldr	r3, [r4, #16]
   beb88:	b91b      	cbnz	r3, beb92 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   beb8a:	89a3      	ldrh	r3, [r4, #12]
   beb8c:	802b      	strh	r3, [r5, #0]
}
   beb8e:	4628      	mov	r0, r5
   beb90:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   beb92:	2301      	movs	r3, #1
   beb94:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   beb96:	4621      	mov	r1, r4
   beb98:	462b      	mov	r3, r5
   beb9a:	f104 0210 	add.w	r2, r4, #16
   beb9e:	f851 0b04 	ldr.w	r0, [r1], #4
   beba2:	f843 0b04 	str.w	r0, [r3], #4
   beba6:	4291      	cmp	r1, r2
   beba8:	d1f9      	bne.n	beb9e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   bebaa:	e7f0      	b.n	beb8e <_ZN8particle7BleUuid7halUUIDEv+0x16>

000bebac <_ZNK8particle7BleUuid7shortedEv>:
}
   bebac:	8980      	ldrh	r0, [r0, #12]
   bebae:	4770      	bx	lr

000bebb0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   bebb0:	4770      	bx	lr

000bebb2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   bebb2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bebb4:	6902      	ldr	r2, [r0, #16]
   bebb6:	690b      	ldr	r3, [r1, #16]
   bebb8:	429a      	cmp	r2, r3
   bebba:	d106      	bne.n	bebca <_ZNK8particle7BleUuideqERKS0_+0x18>
   bebbc:	2210      	movs	r2, #16
   bebbe:	f005 fca3 	bl	c4508 <memcmp>
   bebc2:	fab0 f080 	clz	r0, r0
   bebc6:	0940      	lsrs	r0, r0, #5
}
   bebc8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   bebca:	2000      	movs	r0, #0
   bebcc:	e7fc      	b.n	bebc8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000bebd0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   bebd0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   bebd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   bebd6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bebd8:	4b34      	ldr	r3, [pc, #208]	; (becac <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   bebda:	460c      	mov	r4, r1
   bebdc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   bebde:	4602      	mov	r2, r0
   bebe0:	f103 0110 	add.w	r1, r3, #16
   bebe4:	f853 0b04 	ldr.w	r0, [r3], #4
   bebe8:	f842 0b04 	str.w	r0, [r2], #4
   bebec:	428b      	cmp	r3, r1
   bebee:	d1f9      	bne.n	bebe4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   bebf0:	b344      	cbz	r4, bec44 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   bebf2:	2124      	movs	r1, #36	; 0x24
   bebf4:	4620      	mov	r0, r4
   bebf6:	f005 fd8c 	bl	c4712 <strnlen>
   bebfa:	2804      	cmp	r0, #4
   bebfc:	f04f 0500 	mov.w	r5, #0
   bec00:	d123      	bne.n	bec4a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   bec02:	f8ad 5004 	strh.w	r5, [sp, #4]
   bec06:	af01      	add	r7, sp, #4
   bec08:	1ca5      	adds	r5, r4, #2
   bec0a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   bec0c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   bec10:	f7ff ff0d 	bl	bea2e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   bec14:	f1b0 0800 	subs.w	r8, r0, #0
   bec18:	db12      	blt.n	bec40 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   bec1a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   bec1e:	f7ff ff06 	bl	bea2e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   bec22:	2800      	cmp	r0, #0
   bec24:	db0c      	blt.n	bec40 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   bec26:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bec28:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   bec2c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   bec2e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   bec32:	d1eb      	bne.n	bec0c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   bec34:	f89d 3005 	ldrb.w	r3, [sp, #5]
   bec38:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   bec3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bec3e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   bec40:	2300      	movs	r3, #0
   bec42:	6133      	str	r3, [r6, #16]
}
   bec44:	b002      	add	sp, #8
   bec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   bec4a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bec4e:	2124      	movs	r1, #36	; 0x24
   bec50:	4620      	mov	r0, r4
   bec52:	f005 fd5e 	bl	c4712 <strnlen>
   bec56:	42a8      	cmp	r0, r5
   bec58:	d807      	bhi.n	bec6a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   bec5a:	4642      	mov	r2, r8
   bec5c:	2100      	movs	r1, #0
   bec5e:	4630      	mov	r0, r6
}
   bec60:	b002      	add	sp, #8
   bec62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   bec66:	f005 bc87 	b.w	c4578 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   bec6a:	f1b8 0f00 	cmp.w	r8, #0
   bec6e:	d0e9      	beq.n	bec44 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   bec70:	5d60      	ldrb	r0, [r4, r5]
   bec72:	f7ff fedc 	bl	bea2e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   bec76:	0603      	lsls	r3, r0, #24
   bec78:	d415      	bmi.n	beca6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   bec7a:	0100      	lsls	r0, r0, #4
   bec7c:	f108 38ff 	add.w	r8, r8, #4294967295
   bec80:	b2c7      	uxtb	r7, r0
   bec82:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   bec86:	2124      	movs	r1, #36	; 0x24
   bec88:	4620      	mov	r0, r4
   bec8a:	f005 fd42 	bl	c4712 <strnlen>
   bec8e:	3501      	adds	r5, #1
   bec90:	42a8      	cmp	r0, r5
   bec92:	d908      	bls.n	beca6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   bec94:	5d60      	ldrb	r0, [r4, r5]
   bec96:	f7ff feca 	bl	bea2e <_ZN8particle11hexToNibbleEc>
   bec9a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   bec9c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   bec9e:	bfa4      	itt	ge
   beca0:	4338      	orrge	r0, r7
   beca2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   beca6:	3501      	adds	r5, #1
   beca8:	e7d1      	b.n	bec4e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   becaa:	bf00      	nop
   becac:	000c7e0a 	.word	0x000c7e0a

000becb0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   becb0:	b513      	push	{r0, r1, r4, lr}
   becb2:	4604      	mov	r4, r0
   becb4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   becb6:	f7ff ff15 	bl	beae4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   becba:	4620      	mov	r0, r4
   becbc:	9901      	ldr	r1, [sp, #4]
   becbe:	f7ff ff87 	bl	bebd0 <_ZN8particle7BleUuid9constructEPKc>
}
   becc2:	4620      	mov	r0, r4
   becc4:	b002      	add	sp, #8
   becc6:	bd10      	pop	{r4, pc}

000becc8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   becc8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   becca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   becce:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   becd0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   becd2:	8043      	strh	r3, [r0, #2]
   becd4:	220e      	movs	r2, #14
   becd6:	4629      	mov	r1, r5
   becd8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   becda:	7105      	strb	r5, [r0, #4]
   becdc:	3006      	adds	r0, #6
   becde:	f005 fc4b 	bl	c4578 <memset>
   bece2:	f104 0014 	add.w	r0, r4, #20
   bece6:	f7ff fefd 	bl	beae4 <_ZN8particle7BleUuidC1Ev>
   becea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   becee:	f7ff fef9 	bl	beae4 <_ZN8particle7BleUuidC1Ev>
   becf2:	4904      	ldr	r1, [pc, #16]	; (bed04 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   becf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   becf8:	f7ff fd2d 	bl	be756 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   becfc:	6565      	str	r5, [r4, #84]	; 0x54
    }
   becfe:	4620      	mov	r0, r4
   bed00:	bd38      	pop	{r3, r4, r5, pc}
   bed02:	bf00      	nop
   bed04:	000c7e94 	.word	0x000c7e94

000bed08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   bed08:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   bed0a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   bed0e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   bed12:	4293      	cmp	r3, r2
   bed14:	4618      	mov	r0, r3
   bed16:	d006      	beq.n	bed26 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   bed18:	6804      	ldr	r4, [r0, #0]
   bed1a:	8824      	ldrh	r4, [r4, #0]
   bed1c:	428c      	cmp	r4, r1
   bed1e:	f103 0308 	add.w	r3, r3, #8
   bed22:	d1f6      	bne.n	bed12 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   bed24:	bd10      	pop	{r4, pc}
        return nullptr;
   bed26:	2000      	movs	r0, #0
   bed28:	e7fc      	b.n	bed24 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000bed2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   bed2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bed2e:	4606      	mov	r6, r0
   bed30:	b085      	sub	sp, #20
   bed32:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   bed34:	460d      	mov	r5, r1
   bed36:	2900      	cmp	r1, #0
   bed38:	d050      	beq.n	beddc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   bed3a:	2a00      	cmp	r2, #0
   bed3c:	d04e      	beq.n	beddc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bed3e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   bed40:	7823      	ldrb	r3, [r4, #0]
   bed42:	2af4      	cmp	r2, #244	; 0xf4
   bed44:	bf28      	it	cs
   bed46:	22f4      	movcs	r2, #244	; 0xf4
   bed48:	b343      	cbz	r3, bed9c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   bed4a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   bed4c:	0798      	lsls	r0, r3, #30
   bed4e:	d509      	bpl.n	bed64 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   bed50:	89a0      	ldrh	r0, [r4, #12]
   bed52:	9203      	str	r2, [sp, #12]
   bed54:	2300      	movs	r3, #0
   bed56:	f7fe ff89 	bl	bdc6c <hal_ble_gatt_server_set_characteristic_value>
   bed5a:	2800      	cmp	r0, #0
   bed5c:	9a03      	ldr	r2, [sp, #12]
   bed5e:	da03      	bge.n	bed68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   bed60:	b005      	add	sp, #20
   bed62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   bed64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bed68:	6834      	ldr	r4, [r6, #0]
   bed6a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   bed6c:	06d9      	lsls	r1, r3, #27
   bed6e:	d509      	bpl.n	bed84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   bed70:	2f01      	cmp	r7, #1
   bed72:	d007      	beq.n	bed84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bed74:	89a0      	ldrh	r0, [r4, #12]
   bed76:	2300      	movs	r3, #0
   bed78:	4629      	mov	r1, r5
}
   bed7a:	b005      	add	sp, #20
   bed7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bed80:	f7fe bfa6 	b.w	bdcd0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   bed84:	069b      	lsls	r3, r3, #26
   bed86:	d5eb      	bpl.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bed88:	2f02      	cmp	r7, #2
   bed8a:	d0e9      	beq.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bed8c:	89a0      	ldrh	r0, [r4, #12]
   bed8e:	2300      	movs	r3, #0
   bed90:	4629      	mov	r1, r5
}
   bed92:	b005      	add	sp, #20
   bed94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   bed98:	f7fe bfa4 	b.w	bdce4 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   bed9c:	8860      	ldrh	r0, [r4, #2]
   bed9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   beda2:	4288      	cmp	r0, r1
   beda4:	d01c      	beq.n	bede0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   beda6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   beda8:	074e      	lsls	r6, r1, #29
   bedaa:	d501      	bpl.n	bedb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   bedac:	2f01      	cmp	r7, #1
   bedae:	d104      	bne.n	bedba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bedb0:	070b      	lsls	r3, r1, #28
   bedb2:	d409      	bmi.n	bedc8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   bedb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   bedb8:	e7d2      	b.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bedba:	89a1      	ldrh	r1, [r4, #12]
   bedbc:	9300      	str	r3, [sp, #0]
   bedbe:	4613      	mov	r3, r2
   bedc0:	462a      	mov	r2, r5
   bedc2:	f7fe ff67 	bl	bdc94 <hal_ble_gatt_client_write_without_response>
   bedc6:	e7cb      	b.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   bedc8:	2f02      	cmp	r7, #2
   bedca:	d0f3      	beq.n	bedb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   bedcc:	2300      	movs	r3, #0
   bedce:	89a1      	ldrh	r1, [r4, #12]
   bedd0:	9300      	str	r3, [sp, #0]
   bedd2:	4613      	mov	r3, r2
   bedd4:	462a      	mov	r2, r5
   bedd6:	f7fe ff53 	bl	bdc80 <hal_ble_gatt_client_write_with_response>
   bedda:	e7c1      	b.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   beddc:	4802      	ldr	r0, [pc, #8]	; (bede8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   bedde:	e7bf      	b.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   bede0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   bede4:	e7bc      	b.n	bed60 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   bede6:	bf00      	nop
   bede8:	fffffef2 	.word	0xfffffef2

000bedec <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   bedec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bedf0:	2600      	movs	r6, #0
   bedf2:	6006      	str	r6, [r0, #0]
   bedf4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bedf6:	2028      	movs	r0, #40	; 0x28
   bedf8:	460c      	mov	r4, r1
   bedfa:	f7f5 f94c 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bedfe:	1e05      	subs	r5, r0, #0
   bee00:	f105 080c 	add.w	r8, r5, #12
   bee04:	d00f      	beq.n	bee26 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   bee06:	2301      	movs	r3, #1
   bee08:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   bee0c:	4b08      	ldr	r3, [pc, #32]	; (bee30 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   bee0e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   bee10:	4640      	mov	r0, r8
   bee12:	f7ff fe67 	bl	beae4 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   bee16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   bee18:	622e      	str	r6, [r5, #32]
   bee1a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   bee1e:	4646      	mov	r6, r8
   bee20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   bee22:	6823      	ldr	r3, [r4, #0]
   bee24:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   bee26:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bee2a:	4638      	mov	r0, r7
   bee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bee30:	000c7dcc 	.word	0x000c7dcc

000bee34 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   bee34:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bee36:	2500      	movs	r5, #0
   bee38:	6005      	str	r5, [r0, #0]
   bee3a:	4606      	mov	r6, r0
   bee3c:	2030      	movs	r0, #48	; 0x30
   bee3e:	f7f5 f92a 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bee42:	4604      	mov	r4, r0
   bee44:	b188      	cbz	r0, bee6a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   bee46:	2301      	movs	r3, #1
   bee48:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   bee4c:	4b09      	ldr	r3, [pc, #36]	; (bee74 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   bee4e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   bee50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bee54:	8183      	strh	r3, [r0, #12]
   bee56:	300e      	adds	r0, #14
   bee58:	f7ff fe39 	bl	beace <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   bee5c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   bee60:	e9c4 5508 	strd	r5, r5, [r4, #32]
   bee64:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   bee68:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   bee6a:	6074      	str	r4, [r6, #4]
   bee6c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   bee6e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   bee70:	4630      	mov	r0, r6
   bee72:	bd70      	pop	{r4, r5, r6, pc}
   bee74:	000c7de8 	.word	0x000c7de8

000bee78 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   bee78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bee7a:	460d      	mov	r5, r1
   bee7c:	4604      	mov	r4, r0
    WiringBleLock lk;
   bee7e:	a801      	add	r0, sp, #4
   bee80:	f7ff fdea 	bl	bea58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bee84:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   bee86:	f8d2 3002 	ldr.w	r3, [r2, #2]
   bee8a:	6023      	str	r3, [r4, #0]
   bee8c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   bee90:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   bee92:	a801      	add	r0, sp, #4
   bee94:	f7ff fdee 	bl	bea74 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   bee98:	4620      	mov	r0, r4
   bee9a:	b003      	add	sp, #12
   bee9c:	bd30      	pop	{r4, r5, pc}

000bee9e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   bee9e:	b530      	push	{r4, r5, lr}
   beea0:	4605      	mov	r5, r0
   beea2:	b087      	sub	sp, #28
   beea4:	460c      	mov	r4, r1
    WiringBleLock lk;
   beea6:	a801      	add	r0, sp, #4
   beea8:	f7ff fdd6 	bl	bea58 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   beeac:	682a      	ldr	r2, [r5, #0]
   beeae:	6823      	ldr	r3, [r4, #0]
   beeb0:	8812      	ldrh	r2, [r2, #0]
   beeb2:	881b      	ldrh	r3, [r3, #0]
   beeb4:	429a      	cmp	r2, r3
   beeb6:	d10d      	bne.n	beed4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   beeb8:	4629      	mov	r1, r5
   beeba:	a802      	add	r0, sp, #8
   beebc:	f7ff ffdc 	bl	bee78 <_ZNK8particle13BlePeerDevice7addressEv>
   beec0:	4621      	mov	r1, r4
   beec2:	a804      	add	r0, sp, #16
   beec4:	f7ff ffd8 	bl	bee78 <_ZNK8particle13BlePeerDevice7addressEv>
   beec8:	a904      	add	r1, sp, #16
   beeca:	a802      	add	r0, sp, #8
   beecc:	f7ff fdeb 	bl	beaa6 <_ZNK8particle10BleAddresseqERKS0_>
   beed0:	4604      	mov	r4, r0
   beed2:	b900      	cbnz	r0, beed6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   beed4:	2400      	movs	r4, #0
    WiringBleLock lk;
   beed6:	a801      	add	r0, sp, #4
   beed8:	f7ff fdcc 	bl	bea74 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   beedc:	4620      	mov	r0, r4
   beede:	b007      	add	sp, #28
   beee0:	bd30      	pop	{r4, r5, pc}
	...

000beee4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   beee4:	b510      	push	{r4, lr}
   beee6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   beee8:	2064      	movs	r0, #100	; 0x64
   beeea:	f7f5 f8d4 	bl	b4096 <_Znwj>
   beeee:	b168      	cbz	r0, bef0c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   beef0:	2300      	movs	r3, #0
   beef2:	e9c0 3300 	strd	r3, r3, [r0]
   beef6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   beefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   beefe:	e9c0 3306 	strd	r3, r3, [r0, #24]
   bef02:	6203      	str	r3, [r0, #32]
   bef04:	62c3      	str	r3, [r0, #44]	; 0x2c
   bef06:	63c3      	str	r3, [r0, #60]	; 0x3c
   bef08:	64c3      	str	r3, [r0, #76]	; 0x4c
   bef0a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   bef0c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   bef0e:	b920      	cbnz	r0, bef1a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   bef10:	4a0a      	ldr	r2, [pc, #40]	; (bef3c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bef12:	490b      	ldr	r1, [pc, #44]	; (bef40 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   bef14:	200a      	movs	r0, #10
   bef16:	f7ff f8a7 	bl	be068 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   bef1a:	2000      	movs	r0, #0
   bef1c:	f7fe fe6a 	bl	bdbf4 <hal_ble_stack_init>
   bef20:	b120      	cbz	r0, bef2c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   bef22:	4a06      	ldr	r2, [pc, #24]	; (bef3c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   bef24:	4907      	ldr	r1, [pc, #28]	; (bef44 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   bef26:	200a      	movs	r0, #10
   bef28:	f7ff f89e 	bl	be068 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   bef2c:	6821      	ldr	r1, [r4, #0]
   bef2e:	4806      	ldr	r0, [pc, #24]	; (bef48 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   bef30:	2200      	movs	r2, #0
   bef32:	f7fe fec3 	bl	bdcbc <hal_ble_set_callback_on_periph_link_events>
}
   bef36:	4620      	mov	r0, r4
   bef38:	bd10      	pop	{r4, pc}
   bef3a:	bf00      	nop
   bef3c:	000bdba5 	.word	0x000bdba5
   bef40:	000c7c5c 	.word	0x000c7c5c
   bef44:	000c7c9a 	.word	0x000c7c9a
   bef48:	000bf519 	.word	0x000bf519

000bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   bef4c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   bef4e:	4c0a      	ldr	r4, [pc, #40]	; (bef78 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   bef50:	7823      	ldrb	r3, [r4, #0]
   bef52:	f3bf 8f5b 	dmb	ish
   bef56:	07db      	lsls	r3, r3, #31
   bef58:	d40c      	bmi.n	bef74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bef5a:	4620      	mov	r0, r4
   bef5c:	f7f5 f8b0 	bl	b40c0 <__cxa_guard_acquire>
   bef60:	b140      	cbz	r0, bef74 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   bef62:	4806      	ldr	r0, [pc, #24]	; (bef7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bef64:	f7ff ffbe 	bl	beee4 <_ZN8particle14BleLocalDeviceC1Ev>
   bef68:	4620      	mov	r0, r4
   bef6a:	f7f5 f8ae 	bl	b40ca <__cxa_guard_release>
   bef6e:	4804      	ldr	r0, [pc, #16]	; (bef80 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   bef70:	f005 fab4 	bl	c44dc <atexit>
    return instance;
}
   bef74:	4801      	ldr	r0, [pc, #4]	; (bef7c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   bef76:	bd10      	pop	{r4, pc}
   bef78:	2003e634 	.word	0x2003e634
   bef7c:	2003e640 	.word	0x2003e640
   bef80:	000bf1d1 	.word	0x000bf1d1

000bef84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bef84:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   bef86:	6803      	ldr	r3, [r0, #0]
   bef88:	3b09      	subs	r3, #9
   bef8a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   bef8c:	b08d      	sub	sp, #52	; 0x34
   bef8e:	4604      	mov	r4, r0
   bef90:	460d      	mov	r5, r1
    switch (event->type) {
   bef92:	d811      	bhi.n	befb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   bef94:	f7ff ffda 	bl	bef4c <_ZN8particle14BleLocalDevice11getInstanceEv>
   bef98:	88a1      	ldrh	r1, [r4, #4]
   bef9a:	6800      	ldr	r0, [r0, #0]
   bef9c:	f7ff feb4 	bl	bed08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   befa0:	4603      	mov	r3, r0
   befa2:	b958      	cbnz	r0, befbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   befa4:	2220      	movs	r2, #32
   befa6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   befaa:	4a0b      	ldr	r2, [pc, #44]	; (befd8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   befac:	9200      	str	r2, [sp, #0]
   befae:	490b      	ldr	r1, [pc, #44]	; (befdc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   befb0:	aa04      	add	r2, sp, #16
   befb2:	2032      	movs	r0, #50	; 0x32
   befb4:	f7ff f860 	bl	be078 <log_message>
}
   befb8:	b00d      	add	sp, #52	; 0x34
   befba:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   befbc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   befbe:	2a00      	cmp	r2, #0
   befc0:	d0fa      	beq.n	befb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   befc2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   befc6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   befca:	e9cd 1203 	strd	r1, r2, [sp, #12]
   befce:	6dac      	ldr	r4, [r5, #88]	; 0x58
   befd0:	aa04      	add	r2, sp, #16
   befd2:	a903      	add	r1, sp, #12
   befd4:	47a0      	blx	r4
}
   befd6:	e7ef      	b.n	befb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   befd8:	000c7cdc 	.word	0x000c7cdc
   befdc:	000c7c73 	.word	0x000c7c73

000befe0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   befe0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   befe2:	2000      	movs	r0, #0
   befe4:	f7fe fe06 	bl	bdbf4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   befe8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   befec:	bd08      	pop	{r3, pc}

000befee <_ZNK8particle14BleLocalDevice10setTxPowerEa>:
        name.concat(buf);
    }
    return name;
}

int BleLocalDevice::setTxPower(int8_t txPower) const {
   befee:	4608      	mov	r0, r1
    return hal_ble_gap_set_tx_power(txPower, nullptr);
   beff0:	2100      	movs	r1, #0
   beff2:	f7fe be07 	b.w	bdc04 <hal_ble_gap_set_tx_power>

000beff6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   beff6:	b919      	cbnz	r1, bf000 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   beff8:	460a      	mov	r2, r1
   beffa:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   beffc:	f7fe be0a 	b.w	bdc14 <hal_ble_gap_set_advertising_data>
   bf000:	e9d1 0100 	ldrd	r0, r1, [r1]
   bf004:	2200      	movs	r2, #0
   bf006:	e7f9      	b.n	beffc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000bf008 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   bf008:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   bf00a:	69d8      	ldr	r0, [r3, #28]
}
   bf00c:	2800      	cmp	r0, #0
   bf00e:	bfd4      	ite	le
   bf010:	2000      	movle	r0, #0
   bf012:	2001      	movgt	r0, #1
   bf014:	4770      	bx	lr

000bf016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf016:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf018:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf01c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf01e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bf022:	42ae      	cmp	r6, r5
   bf024:	d004      	beq.n	bf030 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bf026:	4628      	mov	r0, r5
   bf028:	f7ff fb4a 	bl	be6c0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bf02c:	3510      	adds	r5, #16
   bf02e:	e7f8      	b.n	bf022 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf030:	6820      	ldr	r0, [r4, #0]
   bf032:	f7ff f92f 	bl	be294 <free>
}
   bf036:	4620      	mov	r0, r4
   bf038:	bd70      	pop	{r4, r5, r6, pc}

000bf03a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bf03a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   bf03c:	1e14      	subs	r4, r2, #0
   bf03e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   bf040:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   bf042:	db02      	blt.n	bf04a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   bf044:	1862      	adds	r2, r4, r1
   bf046:	429a      	cmp	r2, r3
   bf048:	dd00      	ble.n	bf04c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   bf04a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   bf04c:	682a      	ldr	r2, [r5, #0]
   bf04e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   bf050:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   bf052:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf054:	1a52      	subs	r2, r2, r1
   bf056:	f005 fa75 	bl	c4544 <memmove>
    size_ -= n;
   bf05a:	686a      	ldr	r2, [r5, #4]
   bf05c:	1b12      	subs	r2, r2, r4
   bf05e:	606a      	str	r2, [r5, #4]
}
   bf060:	bd38      	pop	{r3, r4, r5, pc}

000bf062 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bf062:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   bf064:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   bf066:	4604      	mov	r4, r0
   bf068:	460d      	mov	r5, r1
   bf06a:	ab01      	add	r3, sp, #4
   bf06c:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf070:	f7ff fc72 	bl	be958 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   bf074:	4602      	mov	r2, r0
   bf076:	b138      	cbz	r0, bf088 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   bf078:	9901      	ldr	r1, [sp, #4]
   bf07a:	4620      	mov	r0, r4
   bf07c:	f7ff ffdd 	bl	bf03a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   bf080:	4629      	mov	r1, r5
   bf082:	4620      	mov	r0, r4
   bf084:	f7ff ffed 	bl	bf062 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   bf088:	b003      	add	sp, #12
   bf08a:	bd30      	pop	{r4, r5, pc}

000bf08c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   bf08c:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   bf08e:	460c      	mov	r4, r1
   bf090:	b929      	cbnz	r1, bf09e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   bf092:	460a      	mov	r2, r1
   bf094:	4608      	mov	r0, r1
}
   bf096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf09a:	f7fe bdc3 	b.w	bdc24 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   bf09e:	2101      	movs	r1, #1
   bf0a0:	4620      	mov	r0, r4
   bf0a2:	f7ff ffde 	bl	bf062 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   bf0a6:	e9d4 0100 	ldrd	r0, r1, [r4]
   bf0aa:	2200      	movs	r2, #0
   bf0ac:	e7f3      	b.n	bf096 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000bf0ae <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   bf0ae:	b538      	push	{r3, r4, r5, lr}
   bf0b0:	4604      	mov	r4, r0
   bf0b2:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   bf0b4:	f7ff ff9f 	bl	beff6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   bf0b8:	2800      	cmp	r0, #0
   bf0ba:	db0a      	blt.n	bf0d2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   bf0bc:	4629      	mov	r1, r5
   bf0be:	4620      	mov	r0, r4
   bf0c0:	f7ff ffe4 	bl	bf08c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   bf0c4:	2800      	cmp	r0, #0
   bf0c6:	db04      	blt.n	bf0d2 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   bf0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   bf0cc:	2000      	movs	r0, #0
   bf0ce:	f7fe bdb1 	b.w	bdc34 <hal_ble_gap_start_advertising>
}
   bf0d2:	bd38      	pop	{r3, r4, r5, pc}

000bf0d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   bf0d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bf0d6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   bf0d8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   bf0da:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf0dc:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   bf0de:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf0e0:	f7f4 ffd9 	bl	b4096 <_Znwj>
   bf0e4:	b118      	cbz	r0, bf0ee <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   bf0e6:	682b      	ldr	r3, [r5, #0]
   bf0e8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bf0ea:	686b      	ldr	r3, [r5, #4]
   bf0ec:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   bf0ee:	4b03      	ldr	r3, [pc, #12]	; (bf0fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   bf0f0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   bf0f2:	4b03      	ldr	r3, [pc, #12]	; (bf100 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bf0f4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   bf0f6:	60a3      	str	r3, [r4, #8]
      }
   bf0f8:	4620      	mov	r0, r4
   bf0fa:	bd38      	pop	{r3, r4, r5, pc}
   bf0fc:	000be999 	.word	0x000be999
   bf100:	000be9b1 	.word	0x000be9b1

000bf104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   bf104:	680b      	ldr	r3, [r1, #0]
   bf106:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   bf108:	b113      	cbz	r3, bf110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   bf10a:	685a      	ldr	r2, [r3, #4]
   bf10c:	3201      	adds	r2, #1
   bf10e:	605a      	str	r2, [r3, #4]
      }
   bf110:	4770      	bx	lr

000bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   bf112:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bf114:	f851 3b04 	ldr.w	r3, [r1], #4
   bf118:	4604      	mov	r4, r0
   bf11a:	f840 3b04 	str.w	r3, [r0], #4
   bf11e:	f7ff fff1 	bl	bf104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   bf122:	6823      	ldr	r3, [r4, #0]
   bf124:	b90b      	cbnz	r3, bf12a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   bf126:	f7ff fc2d 	bl	be984 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   bf12a:	4620      	mov	r0, r4
   bf12c:	bd10      	pop	{r4, pc}

000bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf12e:	b510      	push	{r4, lr}
   bf130:	f851 3b04 	ldr.w	r3, [r1], #4
   bf134:	4604      	mov	r4, r0
   bf136:	f840 3b04 	str.w	r3, [r0], #4
   bf13a:	f7ff ffe3 	bl	bf104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf13e:	4620      	mov	r0, r4
   bf140:	bd10      	pop	{r4, pc}

000bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   bf142:	b510      	push	{r4, lr}
   bf144:	f851 3b04 	ldr.w	r3, [r1], #4
   bf148:	4604      	mov	r4, r0
   bf14a:	f840 3b04 	str.w	r3, [r0], #4
   bf14e:	f7ff ffd9 	bl	bf104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   bf152:	4620      	mov	r0, r4
   bf154:	bd10      	pop	{r4, pc}

000bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   bf156:	b510      	push	{r4, lr}
   bf158:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   bf15a:	6800      	ldr	r0, [r0, #0]
   bf15c:	b108      	cbz	r0, bf162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   bf15e:	f7ff fc52 	bl	bea06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   bf162:	4620      	mov	r0, r4
   bf164:	bd10      	pop	{r4, pc}

000bf166 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   bf166:	b510      	push	{r4, lr}
   bf168:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bf16a:	3004      	adds	r0, #4
   bf16c:	f7ff fff3 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf170:	4620      	mov	r0, r4
   bf172:	bd10      	pop	{r4, pc}

000bf174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf174:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf176:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf17a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf17c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf180:	42ae      	cmp	r6, r5
   bf182:	d004      	beq.n	bf18e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   bf184:	1d28      	adds	r0, r5, #4
   bf186:	f7ff ffe6 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf18a:	3508      	adds	r5, #8
   bf18c:	e7f8      	b.n	bf180 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf18e:	6820      	ldr	r0, [r4, #0]
   bf190:	f7ff f880 	bl	be294 <free>
}
   bf194:	4620      	mov	r0, r4
   bf196:	bd70      	pop	{r4, r5, r6, pc}

000bf198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf198:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bf19a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bf19e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bf1a0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf1a4:	42ae      	cmp	r6, r5
   bf1a6:	d004      	beq.n	bf1b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   bf1a8:	1d28      	adds	r0, r5, #4
   bf1aa:	f7ff ffd4 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf1ae:	3508      	adds	r5, #8
   bf1b0:	e7f8      	b.n	bf1a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bf1b2:	6820      	ldr	r0, [r4, #0]
   bf1b4:	f7ff f86e 	bl	be294 <free>
}
   bf1b8:	4620      	mov	r0, r4
   bf1ba:	bd70      	pop	{r4, r5, r6, pc}

000bf1bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bf1bc:	b510      	push	{r4, lr}
   bf1be:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   bf1c0:	3024      	adds	r0, #36	; 0x24
   bf1c2:	f7ff ffe9 	bl	bf198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf1c6:	f104 0018 	add.w	r0, r4, #24
   bf1ca:	f7ff ffd3 	bl	bf174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   bf1ce:	bd10      	pop	{r4, pc}

000bf1d0 <__tcf_0>:
    static BleLocalDevice instance;
   bf1d0:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   bf1d2:	4b17      	ldr	r3, [pc, #92]	; (bf230 <__tcf_0+0x60>)
   bf1d4:	681c      	ldr	r4, [r3, #0]
   bf1d6:	b354      	cbz	r4, bf22e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   bf1d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf1dc:	f7f5 f970 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   bf1e0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf1e4:	f7f5 f96c 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   bf1e8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf1ec:	f7f5 f968 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   bf1f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf1f4:	f7f5 f964 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   bf1f8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   bf1fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   bf200:	42ae      	cmp	r6, r5
   bf202:	d004      	beq.n	bf20e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   bf204:	1d28      	adds	r0, r5, #4
   bf206:	f7ff ffa6 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf20a:	3508      	adds	r5, #8
   bf20c:	e7f8      	b.n	bf200 <__tcf_0+0x30>
    ::free(ptr);
   bf20e:	69a0      	ldr	r0, [r4, #24]
   bf210:	f7ff f840 	bl	be294 <free>
    ~BleLocalDeviceImpl() = default;
   bf214:	f104 000c 	add.w	r0, r4, #12
   bf218:	f7ff ffbe 	bl	bf198 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bf21c:	4620      	mov	r0, r4
   bf21e:	f7ff ffa9 	bl	bf174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   bf222:	4620      	mov	r0, r4
   bf224:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   bf226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bf22a:	f7f4 bf3a 	b.w	b40a2 <_ZdlPvj>
   bf22e:	bd70      	pop	{r4, r5, r6, pc}
   bf230:	2003e640 	.word	0x2003e640

000bf234 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   bf234:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   bf236:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf238:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   bf23c:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   bf240:	6803      	ldr	r3, [r0, #0]
   bf242:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bf244:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bf246:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   bf248:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   bf24a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   bf24c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   bf24e:	f7ff ff82 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   bf252:	b002      	add	sp, #8
   bf254:	bd10      	pop	{r4, pc}

000bf256 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   bf256:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bf258:	b510      	push	{r4, lr}
      if (_M_empty())
   bf25a:	b90a      	cbnz	r2, bf260 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   bf25c:	f002 ff66 	bl	c212c <_ZSt25__throw_bad_function_callv>
    }
   bf260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bf264:	68c3      	ldr	r3, [r0, #12]
   bf266:	4718      	bx	r3

000bf268 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   bf268:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   bf26a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   bf26c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   bf26e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   bf270:	dd03      	ble.n	bf27a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   bf272:	f7ff f817 	bl	be2a4 <realloc>
            if (!d) {
   bf276:	b918      	cbnz	r0, bf280 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   bf278:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   bf27a:	f7ff f80b 	bl	be294 <free>
        T* d = nullptr;
   bf27e:	2000      	movs	r0, #0
        data_ = d;
   bf280:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bf282:	60a5      	str	r5, [r4, #8]
        return true;
   bf284:	2001      	movs	r0, #1
   bf286:	e7f7      	b.n	bf278 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000bf288 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   bf288:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   bf28a:	6883      	ldr	r3, [r0, #8]
   bf28c:	428b      	cmp	r3, r1
   bf28e:	da02      	bge.n	bf296 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   bf290:	f7ff ffea 	bl	bf268 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   bf294:	bd08      	pop	{r3, pc}
    return true;
   bf296:	2001      	movs	r0, #1
   bf298:	e7fc      	b.n	bf294 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000bf29a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf29e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf2a0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf2a2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf2a4:	4419      	add	r1, r3
   bf2a6:	6883      	ldr	r3, [r0, #8]
   bf2a8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   bf2aa:	4604      	mov	r4, r0
   bf2ac:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf2ae:	dc12      	bgt.n	bf2d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   bf2b0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf2b2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf2b4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf2b6:	1bd2      	subs	r2, r2, r7
   bf2b8:	4631      	mov	r1, r6
   bf2ba:	1970      	adds	r0, r6, r5
   bf2bc:	f005 f942 	bl	c4544 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bf2c0:	462a      	mov	r2, r5
   bf2c2:	4641      	mov	r1, r8
   bf2c4:	4630      	mov	r0, r6
   bf2c6:	f005 f92f 	bl	c4528 <memcpy>
    size_ += n;
   bf2ca:	6863      	ldr	r3, [r4, #4]
   bf2cc:	442b      	add	r3, r5
   bf2ce:	6063      	str	r3, [r4, #4]
    return true;
   bf2d0:	2001      	movs	r0, #1
}
   bf2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bf2d6:	f7ff ffc7 	bl	bf268 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf2da:	2800      	cmp	r0, #0
   bf2dc:	d1e8      	bne.n	bf2b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   bf2de:	e7f8      	b.n	bf2d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000bf2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf2e2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf2e4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   bf2e8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   bf2ea:	4604      	mov	r4, r0
   bf2ec:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf2ee:	da0b      	bge.n	bf308 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   bf2f0:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf2f2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf2f4:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bf2f6:	1b52      	subs	r2, r2, r5
   bf2f8:	1c48      	adds	r0, r1, #1
   bf2fa:	f005 f923 	bl	c4544 <memmove>
    new(p) T(std::move(value));
   bf2fe:	557e      	strb	r6, [r7, r5]
    ++size_;
   bf300:	6863      	ldr	r3, [r4, #4]
   bf302:	3301      	adds	r3, #1
   bf304:	6063      	str	r3, [r4, #4]
}
   bf306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf308:	3101      	adds	r1, #1
   bf30a:	f7ff ffad 	bl	bf268 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   bf30e:	2800      	cmp	r0, #0
   bf310:	d1ee      	bne.n	bf2f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   bf312:	e7f8      	b.n	bf306 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000bf314 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf314:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   bf316:	6841      	ldr	r1, [r0, #4]
   bf318:	f7ff bfe2 	b.w	bf2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000bf31c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf320:	4604      	mov	r4, r0
   bf322:	461d      	mov	r5, r3
   bf324:	460f      	mov	r7, r1
   bf326:	ab01      	add	r3, sp, #4
   bf328:	4690      	mov	r8, r2
   bf32a:	460a      	mov	r2, r1
   bf32c:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf330:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   bf334:	f7ff fb10 	bl	be958 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   bf338:	1cae      	adds	r6, r5, #2
   bf33a:	6863      	ldr	r3, [r4, #4]
   bf33c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   bf33e:	f1b9 0f00 	cmp.w	r9, #0
   bf342:	d126      	bne.n	bf392 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   bf344:	b328      	cbz	r0, bf392 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf346:	4433      	add	r3, r6
   bf348:	1a1b      	subs	r3, r3, r0
   bf34a:	2bff      	cmp	r3, #255	; 0xff
   bf34c:	d809      	bhi.n	bf362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   bf34e:	9901      	ldr	r1, [sp, #4]
   bf350:	4620      	mov	r0, r4
   bf352:	f7ff fe72 	bl	bf03a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf356:	6861      	ldr	r1, [r4, #4]
   bf358:	4620      	mov	r0, r4
   bf35a:	4431      	add	r1, r6
   bf35c:	f7ff ff94 	bl	bf288 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf360:	b918      	cbnz	r0, bf36a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   bf362:	6860      	ldr	r0, [r4, #4]
}
   bf364:	b003      	add	sp, #12
   bf366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   bf36a:	1c6a      	adds	r2, r5, #1
   bf36c:	9901      	ldr	r1, [sp, #4]
   bf36e:	b2d2      	uxtb	r2, r2
   bf370:	4620      	mov	r0, r4
   bf372:	f7ff ffb5 	bl	bf2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   bf376:	9901      	ldr	r1, [sp, #4]
   bf378:	463a      	mov	r2, r7
   bf37a:	3101      	adds	r1, #1
   bf37c:	4620      	mov	r0, r4
   bf37e:	f7ff ffaf 	bl	bf2e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   bf382:	9901      	ldr	r1, [sp, #4]
   bf384:	462b      	mov	r3, r5
   bf386:	4642      	mov	r2, r8
   bf388:	3102      	adds	r1, #2
    return insert(size_, values, n);
   bf38a:	4620      	mov	r0, r4
   bf38c:	f7ff ff85 	bl	bf29a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   bf390:	e7e7      	b.n	bf362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   bf392:	18f1      	adds	r1, r6, r3
   bf394:	29ff      	cmp	r1, #255	; 0xff
   bf396:	d8e4      	bhi.n	bf362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   bf398:	4620      	mov	r0, r4
   bf39a:	f7ff ff75 	bl	bf288 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   bf39e:	2800      	cmp	r0, #0
   bf3a0:	d0df      	beq.n	bf362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   bf3a2:	1c69      	adds	r1, r5, #1
   bf3a4:	b2c9      	uxtb	r1, r1
   bf3a6:	4620      	mov	r0, r4
   bf3a8:	f7ff ffb4 	bl	bf314 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   bf3ac:	4639      	mov	r1, r7
   bf3ae:	4620      	mov	r0, r4
   bf3b0:	f7ff ffb0 	bl	bf314 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   bf3b4:	6861      	ldr	r1, [r4, #4]
   bf3b6:	462b      	mov	r3, r5
   bf3b8:	4642      	mov	r2, r8
   bf3ba:	e7e6      	b.n	bf38a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   bf3bc:	b430      	push	{r4, r5}
   bf3be:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   bf3c2:	b11a      	cbz	r2, bf3cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   bf3c4:	9502      	str	r5, [sp, #8]
}
   bf3c6:	bc30      	pop	{r4, r5}
   bf3c8:	f7ff bfa8 	b.w	bf31c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   bf3cc:	6840      	ldr	r0, [r0, #4]
}
   bf3ce:	bc30      	pop	{r4, r5}
   bf3d0:	4770      	bx	lr

000bf3d2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   bf3d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   bf3d4:	2300      	movs	r3, #0
   bf3d6:	e9c0 3300 	strd	r3, r3, [r0]
   bf3da:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf3dc:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf3de:	9300      	str	r3, [sp, #0]
   bf3e0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   bf3e2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf3e6:	4619      	mov	r1, r3
   bf3e8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   bf3ec:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   bf3ee:	f7ff ffe5 	bl	bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf3f2:	4620      	mov	r0, r4
   bf3f4:	b004      	add	sp, #16
   bf3f6:	bd10      	pop	{r4, pc}

000bf3f8 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   bf3f8:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   bf3fa:	9300      	str	r3, [sp, #0]
   bf3fc:	4613      	mov	r3, r2
   bf3fe:	460a      	mov	r2, r1
   bf400:	21ff      	movs	r1, #255	; 0xff
   bf402:	f7ff ffdb 	bl	bf3bc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   bf406:	b003      	add	sp, #12
   bf408:	f85d fb04 	ldr.w	pc, [sp], #4

000bf40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf40c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf410:	4604      	mov	r4, r0
   bf412:	460d      	mov	r5, r1
   bf414:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf416:	d914      	bls.n	bf442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf418:	4290      	cmp	r0, r2
   bf41a:	d213      	bcs.n	bf444 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf41c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf420:	1a75      	subs	r5, r6, r1
   bf422:	f1a1 0708 	sub.w	r7, r1, #8
   bf426:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf428:	42b7      	cmp	r7, r6
   bf42a:	d018      	beq.n	bf45e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf42c:	b11c      	cbz	r4, bf436 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf42e:	4631      	mov	r1, r6
   bf430:	4620      	mov	r0, r4
   bf432:	f7ff fe86 	bl	bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bf436:	1d30      	adds	r0, r6, #4
   bf438:	f7ff fe8d 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf43c:	3e08      	subs	r6, #8
   bf43e:	3c08      	subs	r4, #8
   bf440:	e7f2      	b.n	bf428 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf442:	d00c      	beq.n	bf45e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf444:	42b5      	cmp	r5, r6
   bf446:	d00a      	beq.n	bf45e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf448:	b11c      	cbz	r4, bf452 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf44a:	4629      	mov	r1, r5
   bf44c:	4620      	mov	r0, r4
   bf44e:	f7ff fe78 	bl	bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf452:	1d28      	adds	r0, r5, #4
   bf454:	f7ff fe7f 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf458:	3508      	adds	r5, #8
   bf45a:	3408      	adds	r4, #8
   bf45c:	e7f2      	b.n	bf444 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf460 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bf462:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf464:	6846      	ldr	r6, [r0, #4]
   bf466:	4668      	mov	r0, sp
   bf468:	f7ff fe6b 	bl	bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf46c:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   bf470:	429f      	cmp	r7, r3
   bf472:	db12      	blt.n	bf49a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   bf474:	3701      	adds	r7, #1
        if (n > 0) {
   bf476:	2f00      	cmp	r7, #0
   bf478:	dd29      	ble.n	bf4ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   bf47a:	00f8      	lsls	r0, r7, #3
   bf47c:	f7fe ff02 	bl	be284 <malloc>
            if (!d) {
   bf480:	4605      	mov	r5, r0
   bf482:	b1f0      	cbz	r0, bf4c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   bf484:	e9d4 1200 	ldrd	r1, r2, [r4]
   bf488:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf48c:	f7ff ffbe 	bl	bf40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf490:	6820      	ldr	r0, [r4, #0]
   bf492:	f7fe feff 	bl	be294 <free>
        data_ = d;
   bf496:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   bf498:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   bf49a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf49c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf49e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   bf4a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf4a6:	4631      	mov	r1, r6
   bf4a8:	f106 0008 	add.w	r0, r6, #8
   bf4ac:	f7ff ffae 	bl	bf40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf4b0:	b11e      	cbz	r6, bf4ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   bf4b2:	4669      	mov	r1, sp
   bf4b4:	4630      	mov	r0, r6
   bf4b6:	f7ff fe44 	bl	bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   bf4ba:	6863      	ldr	r3, [r4, #4]
   bf4bc:	3301      	adds	r3, #1
   bf4be:	6063      	str	r3, [r4, #4]
    return true;
   bf4c0:	2501      	movs	r5, #1
   bf4c2:	a801      	add	r0, sp, #4
   bf4c4:	f7ff fe47 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf4c8:	4628      	mov	r0, r5
   bf4ca:	b003      	add	sp, #12
   bf4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   bf4ce:	2500      	movs	r5, #0
   bf4d0:	e7de      	b.n	bf490 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000bf4d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   bf4d4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bf4d8:	4605      	mov	r5, r0
   bf4da:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   bf4dc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   bf4e0:	42a6      	cmp	r6, r4
   bf4e2:	d005      	beq.n	bf4f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   bf4e4:	4639      	mov	r1, r7
   bf4e6:	4620      	mov	r0, r4
   bf4e8:	f7ff fcd9 	bl	bee9e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   bf4ec:	b108      	cbz	r0, bf4f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   bf4ee:	b914      	cbnz	r4, bf4f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   bf4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   bf4f2:	3408      	adds	r4, #8
   bf4f4:	e7f4      	b.n	bf4e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   bf4f6:	1d20      	adds	r0, r4, #4
   bf4f8:	f7ff fe2d 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   bf4fc:	e9d5 3200 	ldrd	r3, r2, [r5]
   bf500:	f104 0108 	add.w	r1, r4, #8
   bf504:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf508:	4620      	mov	r0, r4
   bf50a:	f7ff ff7f 	bl	bf40c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   bf50e:	686b      	ldr	r3, [r5, #4]
   bf510:	3b01      	subs	r3, #1
   bf512:	606b      	str	r3, [r5, #4]
    return true;
   bf514:	e7ec      	b.n	bf4f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000bf518 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf51c:	4605      	mov	r5, r0
   bf51e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   bf520:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   bf522:	460c      	mov	r4, r1
        WiringBleLock lk;
   bf524:	f7ff fa98 	bl	bea58 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   bf528:	682e      	ldr	r6, [r5, #0]
   bf52a:	1ef3      	subs	r3, r6, #3
   bf52c:	2b0d      	cmp	r3, #13
   bf52e:	d83c      	bhi.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf530:	e8df f013 	tbh	[pc, r3, lsl #1]
   bf534:	0053000e 	.word	0x0053000e
   bf538:	00d1003b 	.word	0x00d1003b
   bf53c:	003b003b 	.word	0x003b003b
   bf540:	003b003b 	.word	0x003b003b
   bf544:	009b003b 	.word	0x009b003b
   bf548:	009b009b 	.word	0x009b009b
   bf54c:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   bf550:	a804      	add	r0, sp, #16
   bf552:	f7ff fc6f 	bl	bee34 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   bf556:	9b04      	ldr	r3, [sp, #16]
   bf558:	89aa      	ldrh	r2, [r5, #12]
   bf55a:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   bf55c:	6869      	ldr	r1, [r5, #4]
   bf55e:	9804      	ldr	r0, [sp, #16]
   bf560:	3108      	adds	r1, #8
   bf562:	3002      	adds	r0, #2
   bf564:	f7ff fa92 	bl	bea8c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   bf568:	a904      	add	r1, sp, #16
   bf56a:	a806      	add	r0, sp, #24
   bf56c:	f7ff fde9 	bl	bf142 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   bf570:	a906      	add	r1, sp, #24
   bf572:	f104 0018 	add.w	r0, r4, #24
   bf576:	f7ff ff73 	bl	bf460 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bf57a:	4605      	mov	r5, r0
   bf57c:	a807      	add	r0, sp, #28
   bf57e:	f7ff fdea 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf582:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   bf584:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   bf586:	b9b5      	cbnz	r5, bf5b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   bf588:	4b5d      	ldr	r3, [pc, #372]	; (bf700 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   bf58a:	495e      	ldr	r1, [pc, #376]	; (bf704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf58c:	9300      	str	r3, [sp, #0]
   bf58e:	2032      	movs	r0, #50	; 0x32
   bf590:	462b      	mov	r3, r5
   bf592:	aa06      	add	r2, sp, #24
   bf594:	9507      	str	r5, [sp, #28]
   bf596:	f7fe fd6f 	bl	be078 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   bf59a:	9b04      	ldr	r3, [sp, #16]
   bf59c:	4629      	mov	r1, r5
   bf59e:	8818      	ldrh	r0, [r3, #0]
   bf5a0:	f7fe fb50 	bl	bdc44 <hal_ble_gap_disconnect>
   bf5a4:	a805      	add	r0, sp, #20
   bf5a6:	f7ff fdd6 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   bf5aa:	a803      	add	r0, sp, #12
   bf5ac:	f7ff fa62 	bl	bea74 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   bf5b0:	b00e      	add	sp, #56	; 0x38
   bf5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   bf5b6:	4a54      	ldr	r2, [pc, #336]	; (bf708 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   bf5b8:	9200      	str	r2, [sp, #0]
   bf5ba:	2300      	movs	r3, #0
   bf5bc:	4951      	ldr	r1, [pc, #324]	; (bf704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf5be:	9307      	str	r3, [sp, #28]
   bf5c0:	aa06      	add	r2, sp, #24
   bf5c2:	2001      	movs	r0, #1
   bf5c4:	f7fe fd58 	bl	be078 <log_message>
                if (impl->connectedCallback_) {
   bf5c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bf5ca:	2b00      	cmp	r3, #0
   bf5cc:	d0ea      	beq.n	bf5a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   bf5ce:	a904      	add	r1, sp, #16
   bf5d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bf5d4:	f7ff fe3f 	bl	bf256 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   bf5d8:	e7e4      	b.n	bf5a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf5da:	89a9      	ldrh	r1, [r5, #12]
   bf5dc:	4620      	mov	r0, r4
   bf5de:	f7ff fb93 	bl	bed08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf5e2:	4606      	mov	r6, r0
   bf5e4:	2800      	cmp	r0, #0
   bf5e6:	d0e0      	beq.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   bf5e8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   bf5ea:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   bf5ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf5f2:	8029      	strh	r1, [r5, #0]
   bf5f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   bf5f8:	429a      	cmp	r2, r3
   bf5fa:	d003      	beq.n	bf604 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   bf5fc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bf600:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   bf602:	e7f9      	b.n	bf5f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   bf604:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   bf608:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf60c:	45b8      	cmp	r8, r7
   bf60e:	d004      	beq.n	bf61a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   bf610:	1d38      	adds	r0, r7, #4
   bf612:	f7ff fda0 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf616:	3708      	adds	r7, #8
   bf618:	e7f8      	b.n	bf60c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   bf61a:	2300      	movs	r3, #0
   bf61c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   bf61e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   bf622:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   bf626:	45b8      	cmp	r8, r7
   bf628:	d004      	beq.n	bf634 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   bf62a:	1d38      	adds	r0, r7, #4
   bf62c:	f7ff fd93 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bf630:	3708      	adds	r7, #8
   bf632:	e7f8      	b.n	bf626 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   bf634:	2300      	movs	r3, #0
   bf636:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   bf638:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   bf63a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bf63c:	b123      	cbz	r3, bf648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   bf63e:	4631      	mov	r1, r6
   bf640:	f104 0034 	add.w	r0, r4, #52	; 0x34
   bf644:	f7ff fe07 	bl	bf256 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   bf648:	2300      	movs	r3, #0
   bf64a:	2220      	movs	r2, #32
   bf64c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   bf650:	4a2e      	ldr	r2, [pc, #184]	; (bf70c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   bf652:	9200      	str	r2, [sp, #0]
   bf654:	492b      	ldr	r1, [pc, #172]	; (bf704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   bf656:	aa06      	add	r2, sp, #24
   bf658:	2001      	movs	r0, #1
   bf65a:	f7fe fd0d 	bl	be078 <log_message>
                    impl->peers_.removeOne(*peer);
   bf65e:	4631      	mov	r1, r6
   bf660:	f104 0018 	add.w	r0, r4, #24
   bf664:	f7ff ff35 	bl	bf4d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   bf668:	e79f      	b.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf66a:	89a9      	ldrh	r1, [r5, #12]
   bf66c:	4620      	mov	r0, r4
   bf66e:	f7ff fb4b 	bl	bed08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   bf672:	2800      	cmp	r0, #0
   bf674:	d099      	beq.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   bf676:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   bf678:	2b00      	cmp	r3, #0
   bf67a:	d096      	beq.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   bf67c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf67e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   bf680:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   bf684:	d001      	beq.n	bf68a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   bf686:	2e10      	cmp	r6, #16
   bf688:	d117      	bne.n	bf6ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   bf68a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   bf68c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   bf68e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   bf690:	2506      	movs	r5, #6
                        };
   bf692:	f88d 3015 	strb.w	r3, [sp, #21]
   bf696:	9104      	str	r1, [sp, #16]
   bf698:	f88d 2014 	strb.w	r2, [sp, #20]
   bf69c:	9006      	str	r0, [sp, #24]
   bf69e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   bf6a2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   bf6a4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   bf6a8:	9508      	str	r5, [sp, #32]
   bf6aa:	e883 0003 	stmia.w	r3, {r0, r1}
   bf6ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   bf6b0:	a906      	add	r1, sp, #24
   bf6b2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   bf6b6:	4798      	blx	r3
   bf6b8:	e777      	b.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   bf6ba:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf6bc:	bf01      	itttt	eq
   bf6be:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   bf6c0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   bf6c2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   bf6c6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   bf6c8:	bf0f      	iteee	eq
   bf6ca:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   bf6ce:	461a      	movne	r2, r3
   bf6d0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   bf6d2:	461d      	movne	r5, r3
   bf6d4:	e7dd      	b.n	bf692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   bf6d6:	89a9      	ldrh	r1, [r5, #12]
   bf6d8:	4620      	mov	r0, r4
   bf6da:	f7ff fb15 	bl	bed08 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   bf6de:	4601      	mov	r1, r0
   bf6e0:	2800      	cmp	r0, #0
   bf6e2:	f43f af62 	beq.w	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf6e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   bf6e8:	2b00      	cmp	r3, #0
   bf6ea:	f43f af5e 	beq.w	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   bf6ee:	686b      	ldr	r3, [r5, #4]
   bf6f0:	9306      	str	r3, [sp, #24]
   bf6f2:	aa06      	add	r2, sp, #24
   bf6f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   bf6f6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   bf6fa:	4798      	blx	r3
   bf6fc:	e755      	b.n	bf5aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   bf6fe:	bf00      	nop
   bf700:	000c7cf4 	.word	0x000c7cf4
   bf704:	000c7c73 	.word	0x000c7c73
   bf708:	000c7d1a 	.word	0x000c7d1a
   bf70c:	000c7d37 	.word	0x000c7d37

000bf710 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bf710:	b513      	push	{r0, r1, r4, lr}
   bf712:	460b      	mov	r3, r1
   bf714:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf716:	e9d0 0100 	ldrd	r0, r1, [r0]
   bf71a:	466c      	mov	r4, sp
   bf71c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   bf720:	e893 0003 	ldmia.w	r3, {r0, r1}
   bf724:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   bf728:	e894 0003 	ldmia.w	r4, {r0, r1}
   bf72c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   bf730:	b002      	add	sp, #8
   bf732:	bd10      	pop	{r4, pc}

000bf734 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   bf734:	b538      	push	{r3, r4, r5, lr}
   bf736:	4605      	mov	r5, r0
   bf738:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   bf73a:	f7ff ffe9 	bl	bf710 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf73e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   bf740:	68a2      	ldr	r2, [r4, #8]
   bf742:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bf744:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bf746:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   bf748:	68e2      	ldr	r2, [r4, #12]
   bf74a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bf74c:	60e3      	str	r3, [r4, #12]
      }
   bf74e:	bd38      	pop	{r3, r4, r5, pc}

000bf750 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   bf750:	b570      	push	{r4, r5, r6, lr}
   bf752:	4604      	mov	r4, r0
   bf754:	b08c      	sub	sp, #48	; 0x30
   bf756:	460e      	mov	r6, r1
   bf758:	9201      	str	r2, [sp, #4]
   bf75a:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   bf75c:	f7ff fab4 	bl	becc8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   bf760:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   bf762:	9901      	ldr	r1, [sp, #4]
   bf764:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   bf768:	f7ff f84b 	bl	be802 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   bf76c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   bf770:	b1cd      	cbz	r5, bf7a6 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   bf772:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bf774:	9502      	str	r5, [sp, #8]
   bf776:	a902      	add	r1, sp, #8
   bf778:	a804      	add	r0, sp, #16
   bf77a:	9303      	str	r3, [sp, #12]
   bf77c:	f7ff fcaa 	bl	bf0d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   bf780:	2300      	movs	r3, #0
	__x.swap(*this);
   bf782:	a908      	add	r1, sp, #32
   bf784:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   bf786:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   bf788:	f7ff ffd4 	bl	bf734 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bf78c:	4631      	mov	r1, r6
   bf78e:	a808      	add	r0, sp, #32
   bf790:	f7ff ffd0 	bl	bf734 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bf794:	a808      	add	r0, sp, #32
   bf796:	f7f4 fe93 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   bf79a:	a804      	add	r0, sp, #16
   bf79c:	f7f4 fe90 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
    }
   bf7a0:	4620      	mov	r0, r4
   bf7a2:	b00c      	add	sp, #48	; 0x30
   bf7a4:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   bf7a6:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   bf7a8:	e7ea      	b.n	bf780 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000bf7ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   bf7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf7b0:	b087      	sub	sp, #28
   bf7b2:	461d      	mov	r5, r3
   bf7b4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   bf7b8:	4680      	mov	r8, r0
   bf7ba:	468b      	mov	fp, r1
   bf7bc:	4692      	mov	sl, r2
   bf7be:	9912      	ldr	r1, [sp, #72]	; 0x48
   bf7c0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   bf7c2:	2200      	movs	r2, #0
   bf7c4:	2068      	movs	r0, #104	; 0x68
   bf7c6:	9102      	str	r1, [sp, #8]
   bf7c8:	9204      	str	r2, [sp, #16]
   bf7ca:	f7f4 fc64 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   bf7ce:	1e06      	subs	r6, r0, #0
   bf7d0:	f106 090c 	add.w	r9, r6, #12
   bf7d4:	d018      	beq.n	bf808 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   bf7d6:	2201      	movs	r2, #1
	: _M_impl(__a)
   bf7d8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   bf7da:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   bf7de:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   bf7e0:	4a15      	ldr	r2, [pc, #84]	; (bf838 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   bf7e2:	f847 2b20 	str.w	r2, [r7], #32
   bf7e6:	9b03      	ldr	r3, [sp, #12]
   bf7e8:	9100      	str	r1, [sp, #0]
   bf7ea:	465a      	mov	r2, fp
   bf7ec:	4651      	mov	r1, sl
   bf7ee:	4648      	mov	r0, r9
   bf7f0:	f7ff ffae 	bl	bf750 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   bf7f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf7f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   bf7f8:	682b      	ldr	r3, [r5, #0]
   bf7fa:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   bf7fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bf7fe:	f106 0534 	add.w	r5, r6, #52	; 0x34
   bf802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bf804:	6823      	ldr	r3, [r4, #0]
   bf806:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   bf808:	a904      	add	r1, sp, #16
   bf80a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   bf80c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   bf810:	f7ff fd10 	bl	bf234 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   bf814:	a805      	add	r0, sp, #20
   bf816:	f7ff fc9e 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   bf81a:	f8d8 3000 	ldr.w	r3, [r8]
   bf81e:	b93b      	cbnz	r3, bf830 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   bf820:	4a06      	ldr	r2, [pc, #24]	; (bf83c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   bf822:	4907      	ldr	r1, [pc, #28]	; (bf840 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   bf824:	200a      	movs	r0, #10
}
   bf826:	b007      	add	sp, #28
   bf828:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   bf82c:	f7fe bc1c 	b.w	be068 <panic_>
}
   bf830:	b007      	add	sp, #28
   bf832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf836:	bf00      	nop
   bf838:	000c7db0 	.word	0x000c7db0
   bf83c:	000bdba5 	.word	0x000bdba5
   bf840:	000c7c5c 	.word	0x000c7c5c

000bf844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf844:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf848:	4604      	mov	r4, r0
   bf84a:	460d      	mov	r5, r1
   bf84c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf84e:	d914      	bls.n	bf87a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf850:	4290      	cmp	r0, r2
   bf852:	d213      	bcs.n	bf87c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf854:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf858:	1a75      	subs	r5, r6, r1
   bf85a:	f1a1 0708 	sub.w	r7, r1, #8
   bf85e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf860:	42b7      	cmp	r7, r6
   bf862:	d018      	beq.n	bf896 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf864:	b11c      	cbz	r4, bf86e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   bf866:	4631      	mov	r1, r6
   bf868:	4620      	mov	r0, r4
   bf86a:	f7ff fc60 	bl	bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf86e:	1d30      	adds	r0, r6, #4
   bf870:	f7ff fc71 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf874:	3e08      	subs	r6, #8
   bf876:	3c08      	subs	r4, #8
   bf878:	e7f2      	b.n	bf860 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf87a:	d00c      	beq.n	bf896 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf87c:	42b5      	cmp	r5, r6
   bf87e:	d00a      	beq.n	bf896 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf880:	b11c      	cbz	r4, bf88a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf882:	4629      	mov	r1, r5
   bf884:	4620      	mov	r0, r4
   bf886:	f7ff fc52 	bl	bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf88a:	1d28      	adds	r0, r5, #4
   bf88c:	f7ff fc63 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf890:	3508      	adds	r5, #8
   bf892:	3408      	adds	r4, #8
   bf894:	e7f2      	b.n	bf87c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf898 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf898:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf89a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf89c:	4605      	mov	r5, r0
        if (n > 0) {
   bf89e:	dd11      	ble.n	bf8c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf8a0:	00f0      	lsls	r0, r6, #3
   bf8a2:	f7fe fcef 	bl	be284 <malloc>
            if (!d) {
   bf8a6:	4604      	mov	r4, r0
   bf8a8:	b158      	cbz	r0, bf8c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf8aa:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf8ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf8b2:	f7ff ffc7 	bl	bf844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf8b6:	6828      	ldr	r0, [r5, #0]
   bf8b8:	f7fe fcec 	bl	be294 <free>
        data_ = d;
   bf8bc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf8be:	60ae      	str	r6, [r5, #8]
        return true;
   bf8c0:	2001      	movs	r0, #1
    }
   bf8c2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf8c4:	2400      	movs	r4, #0
   bf8c6:	e7f6      	b.n	bf8b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf8c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf8c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf8ca:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf8cc:	6845      	ldr	r5, [r0, #4]
   bf8ce:	4668      	mov	r0, sp
   bf8d0:	f7ff fc2d 	bl	bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf8d4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf8d8:	4299      	cmp	r1, r3
   bf8da:	da10      	bge.n	bf8fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf8dc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf8de:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf8e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf8e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf8e8:	4629      	mov	r1, r5
   bf8ea:	f105 0008 	add.w	r0, r5, #8
   bf8ee:	f7ff ffa9 	bl	bf844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf8f2:	b98d      	cbnz	r5, bf918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf8f4:	6863      	ldr	r3, [r4, #4]
   bf8f6:	3301      	adds	r3, #1
   bf8f8:	6063      	str	r3, [r4, #4]
    return true;
   bf8fa:	2601      	movs	r6, #1
   bf8fc:	e006      	b.n	bf90c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf8fe:	3101      	adds	r1, #1
   bf900:	4620      	mov	r0, r4
   bf902:	f7ff ffc9 	bl	bf898 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf906:	4606      	mov	r6, r0
   bf908:	2800      	cmp	r0, #0
   bf90a:	d1e7      	bne.n	bf8dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf90c:	a801      	add	r0, sp, #4
   bf90e:	f7ff fc22 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf912:	4630      	mov	r0, r6
   bf914:	b002      	add	sp, #8
   bf916:	bd70      	pop	{r4, r5, r6, pc}
   bf918:	4669      	mov	r1, sp
   bf91a:	4628      	mov	r0, r5
   bf91c:	f7ff fc07 	bl	bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bf920:	e7e8      	b.n	bf8f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bf922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bf922:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bf924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf926:	4604      	mov	r4, r0
   bf928:	460d      	mov	r5, r1
   bf92a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bf92c:	d914      	bls.n	bf958 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bf92e:	4290      	cmp	r0, r2
   bf930:	d213      	bcs.n	bf95a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bf932:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bf936:	1a75      	subs	r5, r6, r1
   bf938:	f1a1 0708 	sub.w	r7, r1, #8
   bf93c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bf93e:	42b7      	cmp	r7, r6
   bf940:	d018      	beq.n	bf974 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bf942:	b11c      	cbz	r4, bf94c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bf944:	4631      	mov	r1, r6
   bf946:	4620      	mov	r0, r4
   bf948:	f7ff fbe3 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf94c:	1d30      	adds	r0, r6, #4
   bf94e:	f7ff fc02 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bf952:	3e08      	subs	r6, #8
   bf954:	3c08      	subs	r4, #8
   bf956:	e7f2      	b.n	bf93e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bf958:	d00c      	beq.n	bf974 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bf95a:	42b5      	cmp	r5, r6
   bf95c:	d00a      	beq.n	bf974 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bf95e:	b11c      	cbz	r4, bf968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bf960:	4629      	mov	r1, r5
   bf962:	4620      	mov	r0, r4
   bf964:	f7ff fbd5 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf968:	1d28      	adds	r0, r5, #4
   bf96a:	f7ff fbf4 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bf96e:	3508      	adds	r5, #8
   bf970:	3408      	adds	r4, #8
   bf972:	e7f2      	b.n	bf95a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bf974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf976 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bf976:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bf978:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bf97a:	4605      	mov	r5, r0
        if (n > 0) {
   bf97c:	dd11      	ble.n	bf9a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bf97e:	00f0      	lsls	r0, r6, #3
   bf980:	f7fe fc80 	bl	be284 <malloc>
            if (!d) {
   bf984:	4604      	mov	r4, r0
   bf986:	b158      	cbz	r0, bf9a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bf988:	e9d5 1200 	ldrd	r1, r2, [r5]
   bf98c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bf990:	f7ff ffc7 	bl	bf922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bf994:	6828      	ldr	r0, [r5, #0]
   bf996:	f7fe fc7d 	bl	be294 <free>
        data_ = d;
   bf99a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bf99c:	60ae      	str	r6, [r5, #8]
        return true;
   bf99e:	2001      	movs	r0, #1
    }
   bf9a0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bf9a2:	2400      	movs	r4, #0
   bf9a4:	e7f6      	b.n	bf994 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bf9a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bf9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bf9a8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bf9aa:	6845      	ldr	r5, [r0, #4]
   bf9ac:	4668      	mov	r0, sp
   bf9ae:	f7ff fbb0 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf9b2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bf9b6:	4299      	cmp	r1, r3
   bf9b8:	da10      	bge.n	bf9dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bf9ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bf9bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bf9be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bf9c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bf9c6:	4629      	mov	r1, r5
   bf9c8:	f105 0008 	add.w	r0, r5, #8
   bf9cc:	f7ff ffa9 	bl	bf922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bf9d0:	b98d      	cbnz	r5, bf9f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bf9d2:	6863      	ldr	r3, [r4, #4]
   bf9d4:	3301      	adds	r3, #1
   bf9d6:	6063      	str	r3, [r4, #4]
    return true;
   bf9d8:	2601      	movs	r6, #1
   bf9da:	e006      	b.n	bf9ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bf9dc:	3101      	adds	r1, #1
   bf9de:	4620      	mov	r0, r4
   bf9e0:	f7ff ffc9 	bl	bf976 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bf9e4:	4606      	mov	r6, r0
   bf9e6:	2800      	cmp	r0, #0
   bf9e8:	d1e7      	bne.n	bf9ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bf9ea:	a801      	add	r0, sp, #4
   bf9ec:	f7ff fbb3 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bf9f0:	4630      	mov	r0, r6
   bf9f2:	b002      	add	sp, #8
   bf9f4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bf9f6:	4669      	mov	r1, sp
   bf9f8:	4628      	mov	r0, r5
   bf9fa:	f7ff fb8a 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bf9fe:	e7e8      	b.n	bf9d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bfa00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bfa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfa04:	4617      	mov	r7, r2
   bfa06:	b0a1      	sub	sp, #132	; 0x84
   bfa08:	4680      	mov	r8, r0
    WiringBleLock lk;
   bfa0a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   bfa0c:	460e      	mov	r6, r1
    WiringBleLock lk;
   bfa0e:	f7ff f823 	bl	bea58 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   bfa12:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   bfa14:	7923      	ldrb	r3, [r4, #4]
   bfa16:	b953      	cbnz	r3, bfa2e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   bfa18:	4639      	mov	r1, r7
   bfa1a:	4640      	mov	r0, r8
   bfa1c:	f7ff fb79 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   bfa20:	a80a      	add	r0, sp, #40	; 0x28
   bfa22:	f7ff f827 	bl	bea74 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   bfa26:	4640      	mov	r0, r8
   bfa28:	b021      	add	sp, #132	; 0x84
   bfa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   bfa2e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   bfa30:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   bfa34:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   bfa38:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   bfa3a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   bfa3e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   bfa42:	9b03      	ldr	r3, [sp, #12]
   bfa44:	429d      	cmp	r5, r3
   bfa46:	d021      	beq.n	bfa8c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   bfa48:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   bfa4c:	4658      	mov	r0, fp
   bfa4e:	f109 0114 	add.w	r1, r9, #20
   bfa52:	f7ff f8ae 	bl	bebb2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   bfa56:	b1b8      	cbz	r0, bfa88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   bfa58:	f109 0128 	add.w	r1, r9, #40	; 0x28
   bfa5c:	4650      	mov	r0, sl
   bfa5e:	f7ff f8a8 	bl	bebb2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   bfa62:	b188      	cbz	r0, bfa88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   bfa64:	6823      	ldr	r3, [r4, #0]
   bfa66:	f8d9 2000 	ldr.w	r2, [r9]
   bfa6a:	4053      	eors	r3, r2
   bfa6c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   bfa70:	d10a      	bne.n	bfa88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   bfa72:	2220      	movs	r2, #32
   bfa74:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   bfa78:	4a5e      	ldr	r2, [pc, #376]	; (bfbf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   bfa7a:	9200      	str	r2, [sp, #0]
   bfa7c:	aa15      	add	r2, sp, #84	; 0x54
   bfa7e:	495e      	ldr	r1, [pc, #376]	; (bfbf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   bfa80:	2032      	movs	r0, #50	; 0x32
   bfa82:	f7fe faf9 	bl	be078 <log_message>
   bfa86:	e7c7      	b.n	bfa18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   bfa88:	3508      	adds	r5, #8
   bfa8a:	e7da      	b.n	bfa42 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   bfa8c:	4650      	mov	r0, sl
   bfa8e:	f7ff f861 	bl	beb54 <_ZNK8particle7BleUuid7isValidEv>
   bfa92:	b960      	cbnz	r0, bfaae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   bfa94:	4959      	ldr	r1, [pc, #356]	; (bfbfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   bfa96:	2201      	movs	r2, #1
   bfa98:	a815      	add	r0, sp, #84	; 0x54
   bfa9a:	ad15      	add	r5, sp, #84	; 0x54
   bfa9c:	f7ff f832 	bl	beb04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   bfaa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bfaa2:	46d4      	mov	ip, sl
   bfaa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfaa8:	682b      	ldr	r3, [r5, #0]
   bfaaa:	f8cc 3000 	str.w	r3, [ip]
   bfaae:	6833      	ldr	r3, [r6, #0]
   bfab0:	e9d3 5300 	ldrd	r5, r3, [r3]
   bfab4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   bfab8:	455d      	cmp	r5, fp
   bfaba:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   bfabc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   bfabe:	d06e      	beq.n	bfb9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   bfac0:	f855 0b08 	ldr.w	r0, [r5], #8
   bfac4:	f7ff f875 	bl	bebb2 <_ZNK8particle7BleUuideqERKS0_>
   bfac8:	2800      	cmp	r0, #0
   bfaca:	d0f5      	beq.n	bfab8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   bfacc:	f104 0a14 	add.w	sl, r4, #20
   bfad0:	4650      	mov	r0, sl
   bfad2:	f7ff f83f 	bl	beb54 <_ZNK8particle7BleUuid7isValidEv>
   bfad6:	b988      	cbnz	r0, bfafc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   bfad8:	4b49      	ldr	r3, [pc, #292]	; (bfc00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfada:	4948      	ldr	r1, [pc, #288]	; (bfbfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   bfadc:	881a      	ldrh	r2, [r3, #0]
   bfade:	3201      	adds	r2, #1
   bfae0:	b292      	uxth	r2, r2
   bfae2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfae4:	a815      	add	r0, sp, #84	; 0x54
   bfae6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   bfae8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   bfaea:	f7ff f82a 	bl	beb42 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   bfaee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bfaf0:	46d4      	mov	ip, sl
   bfaf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bfaf6:	682b      	ldr	r3, [r5, #0]
   bfaf8:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   bfafc:	4b41      	ldr	r3, [pc, #260]	; (bfc04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   bfafe:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   bfb00:	2228      	movs	r2, #40	; 0x28
   bfb02:	2100      	movs	r1, #0
   bfb04:	a816      	add	r0, sp, #88	; 0x58
   bfb06:	f004 fd37 	bl	c4578 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   bfb0a:	4651      	mov	r1, sl
   bfb0c:	a804      	add	r0, sp, #16
   bfb0e:	f7ff f833 	bl	beb78 <_ZN8particle7BleUuid7halUUIDEv>
   bfb12:	ab04      	add	r3, sp, #16
   bfb14:	aa18      	add	r2, sp, #96	; 0x60
   bfb16:	f10d 0c20 	add.w	ip, sp, #32
   bfb1a:	6818      	ldr	r0, [r3, #0]
   bfb1c:	6859      	ldr	r1, [r3, #4]
   bfb1e:	4615      	mov	r5, r2
   bfb20:	c503      	stmia	r5!, {r0, r1}
   bfb22:	3308      	adds	r3, #8
   bfb24:	4563      	cmp	r3, ip
   bfb26:	462a      	mov	r2, r5
   bfb28:	d1f7      	bne.n	bfb1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   bfb2a:	6818      	ldr	r0, [r3, #0]
   bfb2c:	6028      	str	r0, [r5, #0]
    return value_;
   bfb2e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   bfb30:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   bfb34:	f8d9 3000 	ldr.w	r3, [r9]
   bfb38:	8a9b      	ldrh	r3, [r3, #20]
   bfb3a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   bfb3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   bfb40:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   bfb42:	4b31      	ldr	r3, [pc, #196]	; (bfc08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfb44:	2200      	movs	r2, #0
   bfb46:	1da1      	adds	r1, r4, #6
   bfb48:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   bfb4a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   bfb4e:	f7fe f8ab 	bl	bdca8 <hal_ble_gatt_server_add_characteristic>
   bfb52:	2800      	cmp	r0, #0
   bfb54:	f47f af60 	bne.w	bfa18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   bfb58:	2301      	movs	r3, #1
   bfb5a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   bfb5c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   bfb5e:	4639      	mov	r1, r7
        return characteristics_;
   bfb60:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   bfb62:	a80d      	add	r0, sp, #52	; 0x34
   bfb64:	f7ff fad5 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfb68:	4620      	mov	r0, r4
   bfb6a:	a90d      	add	r1, sp, #52	; 0x34
   bfb6c:	f7ff ff1b 	bl	bf9a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bfb70:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bfb72:	a80e      	add	r0, sp, #56	; 0x38
   bfb74:	f7ff faef 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb78:	2c00      	cmp	r4, #0
   bfb7a:	f47f af4d 	bne.w	bfa18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   bfb7e:	2320      	movs	r3, #32
   bfb80:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   bfb84:	4b21      	ldr	r3, [pc, #132]	; (bfc0c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   bfb86:	9300      	str	r3, [sp, #0]
   bfb88:	aa0d      	add	r2, sp, #52	; 0x34
   bfb8a:	4623      	mov	r3, r4
   bfb8c:	e777      	b.n	bfa7e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   bfb8e:	4639      	mov	r1, r7
   bfb90:	4640      	mov	r0, r8
   bfb92:	f7ff fabe 	bl	bf112 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bfb96:	a80c      	add	r0, sp, #48	; 0x30
   bfb98:	f7ff fadd 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfb9c:	e740      	b.n	bfa20 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   bfb9e:	a80b      	add	r0, sp, #44	; 0x2c
   bfba0:	f7ff f924 	bl	bedec <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   bfba4:	4651      	mov	r1, sl
   bfba6:	a815      	add	r0, sp, #84	; 0x54
   bfba8:	f7fe ffe6 	bl	beb78 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   bfbac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bfbae:	2300      	movs	r3, #0
   bfbb0:	3214      	adds	r2, #20
   bfbb2:	a915      	add	r1, sp, #84	; 0x54
   bfbb4:	2001      	movs	r0, #1
   bfbb6:	f7fe f84f 	bl	bdc58 <hal_ble_gatt_server_add_service>
   bfbba:	2800      	cmp	r0, #0
   bfbbc:	d1e7      	bne.n	bfb8e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   bfbbe:	6835      	ldr	r5, [r6, #0]
   bfbc0:	a90b      	add	r1, sp, #44	; 0x2c
   bfbc2:	a80d      	add	r0, sp, #52	; 0x34
   bfbc4:	f7ff fab3 	bl	bf12e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   bfbc8:	4628      	mov	r0, r5
   bfbca:	a90d      	add	r1, sp, #52	; 0x34
   bfbcc:	f7ff fe7c 	bl	bf8c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bfbd0:	4605      	mov	r5, r0
   bfbd2:	a80e      	add	r0, sp, #56	; 0x38
   bfbd4:	f7ff fabf 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfbd8:	2d00      	cmp	r5, #0
   bfbda:	d0d8      	beq.n	bfb8e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   bfbdc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   bfbde:	6853      	ldr	r3, [r2, #4]
   bfbe0:	6812      	ldr	r2, [r2, #0]
   bfbe2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   bfbe6:	3b01      	subs	r3, #1
   bfbe8:	a80c      	add	r0, sp, #48	; 0x30
   bfbea:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   bfbee:	f7ff fab2 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bfbf2:	e76b      	b.n	bfacc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   bfbf4:	000c7d56 	.word	0x000c7d56
   bfbf8:	000c7c73 	.word	0x000c7c73
   bfbfc:	000c7e1a 	.word	0x000c7e1a
   bfc00:	2003e638 	.word	0x2003e638
   bfc04:	002c0003 	.word	0x002c0003
   bfc08:	000bef85 	.word	0x000bef85
   bfc0c:	000c7d81 	.word	0x000c7d81

000bfc10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bfc10:	4802      	ldr	r0, [pc, #8]	; (bfc1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bfc12:	2300      	movs	r3, #0
   bfc14:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bfc16:	f7fe b89f 	b.w	bdd58 <os_mutex_recursive_create>
   bfc1a:	bf00      	nop
   bfc1c:	2003e63c 	.word	0x2003e63c

000bfc20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bfc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bfc22:	4606      	mov	r6, r0
   bfc24:	460d      	mov	r5, r1
  size_t n = 0;
   bfc26:	188f      	adds	r7, r1, r2
   bfc28:	2400      	movs	r4, #0
  while (size--) {
   bfc2a:	42bd      	cmp	r5, r7
   bfc2c:	d00c      	beq.n	bfc48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bfc2e:	6833      	ldr	r3, [r6, #0]
   bfc30:	f815 1b01 	ldrb.w	r1, [r5], #1
   bfc34:	689b      	ldr	r3, [r3, #8]
   bfc36:	4630      	mov	r0, r6
   bfc38:	4798      	blx	r3
     if (chunk>=0)
   bfc3a:	1e03      	subs	r3, r0, #0
   bfc3c:	db01      	blt.n	bfc42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bfc3e:	441c      	add	r4, r3
  while (size--) {
   bfc40:	e7f3      	b.n	bfc2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bfc42:	2c00      	cmp	r4, #0
   bfc44:	bf08      	it	eq
   bfc46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bfc48:	4620      	mov	r0, r4
   bfc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bfc4c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bfc4c:	b508      	push	{r3, lr}
  return write(str);
   bfc4e:	f7f7 fe85 	bl	b795c <_ZN5Print5writeEPKc>
}
   bfc52:	bd08      	pop	{r3, pc}

000bfc54 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bfc54:	6803      	ldr	r3, [r0, #0]
   bfc56:	689b      	ldr	r3, [r3, #8]
   bfc58:	4718      	bx	r3

000bfc5a <_ZN5Print5printEPK19__FlashStringHelper>:
   bfc5a:	b508      	push	{r3, lr}
   bfc5c:	f7f7 fe7e 	bl	b795c <_ZN5Print5writeEPKc>
   bfc60:	bd08      	pop	{r3, pc}

000bfc62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bfc62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bfc64:	210d      	movs	r1, #13
{
   bfc66:	4605      	mov	r5, r0
  size_t n = print('\r');
   bfc68:	f7ff fff4 	bl	bfc54 <_ZN5Print5printEc>
  n += print('\n');
   bfc6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   bfc6e:	4604      	mov	r4, r0
  n += print('\n');
   bfc70:	4628      	mov	r0, r5
   bfc72:	f7ff ffef 	bl	bfc54 <_ZN5Print5printEc>
  return n;
}
   bfc76:	4420      	add	r0, r4
   bfc78:	bd38      	pop	{r3, r4, r5, pc}

000bfc7a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bfc7a:	b538      	push	{r3, r4, r5, lr}
   bfc7c:	4605      	mov	r5, r0
  return write(str);
   bfc7e:	f7f7 fe6d 	bl	b795c <_ZN5Print5writeEPKc>
   bfc82:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bfc84:	4628      	mov	r0, r5
   bfc86:	f7ff ffec 	bl	bfc62 <_ZN5Print7printlnEv>
  return n;
}
   bfc8a:	4420      	add	r0, r4
   bfc8c:	bd38      	pop	{r3, r4, r5, pc}

000bfc8e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   bfc8e:	f7ff bff4 	b.w	bfc7a <_ZN5Print7printlnEPKc>

000bfc92 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bfc92:	b530      	push	{r4, r5, lr}
   bfc94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bfc96:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bfc98:	2a01      	cmp	r2, #1
  *str = '\0';
   bfc9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bfc9e:	bf98      	it	ls
   bfca0:	220a      	movls	r2, #10
   bfca2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bfca4:	460d      	mov	r5, r1
   bfca6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bfcaa:	fb01 5312 	mls	r3, r1, r2, r5
   bfcae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfcb2:	2b09      	cmp	r3, #9
   bfcb4:	bf94      	ite	ls
   bfcb6:	3330      	addls	r3, #48	; 0x30
   bfcb8:	3337      	addhi	r3, #55	; 0x37
   bfcba:	b2db      	uxtb	r3, r3
  } while(n);
   bfcbc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bfcbe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bfcc2:	d9ef      	bls.n	bfca4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bfcc4:	4621      	mov	r1, r4
   bfcc6:	f7f7 fe49 	bl	b795c <_ZN5Print5writeEPKc>
}
   bfcca:	b00b      	add	sp, #44	; 0x2c
   bfccc:	bd30      	pop	{r4, r5, pc}

000bfcce <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bfcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfcd2:	b086      	sub	sp, #24
   bfcd4:	af00      	add	r7, sp, #0
   bfcd6:	4605      	mov	r5, r0
   bfcd8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bfcda:	1d38      	adds	r0, r7, #4
   bfcdc:	2114      	movs	r1, #20
{
   bfcde:	4614      	mov	r4, r2
    va_copy(args2, args);
   bfce0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bfce2:	f7fe faff 	bl	be2e4 <vsnprintf>

    if (n<bufsize)
   bfce6:	2813      	cmp	r0, #19
   bfce8:	d80e      	bhi.n	bfd08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bfcea:	1d39      	adds	r1, r7, #4
   bfcec:	4628      	mov	r0, r5
   bfcee:	f7f7 fe35 	bl	b795c <_ZN5Print5writeEPKc>
   bfcf2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bfcf4:	b11e      	cbz	r6, bfcfe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bfcf6:	4628      	mov	r0, r5
   bfcf8:	f7ff ffb3 	bl	bfc62 <_ZN5Print7printlnEv>
   bfcfc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bfcfe:	4620      	mov	r0, r4
   bfd00:	3718      	adds	r7, #24
   bfd02:	46bd      	mov	sp, r7
   bfd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bfd08:	f100 0308 	add.w	r3, r0, #8
   bfd0c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bfd10:	46e8      	mov	r8, sp
        char bigger[n+1];
   bfd12:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bfd16:	4622      	mov	r2, r4
   bfd18:	1c41      	adds	r1, r0, #1
   bfd1a:	683b      	ldr	r3, [r7, #0]
   bfd1c:	4668      	mov	r0, sp
   bfd1e:	f7fe fae1 	bl	be2e4 <vsnprintf>
  return write(str);
   bfd22:	4669      	mov	r1, sp
   bfd24:	4628      	mov	r0, r5
   bfd26:	f7f7 fe19 	bl	b795c <_ZN5Print5writeEPKc>
   bfd2a:	4604      	mov	r4, r0
   bfd2c:	46c5      	mov	sp, r8
   bfd2e:	e7e1      	b.n	bfcf4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bfd30 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bfd30:	b510      	push	{r4, lr}
   bfd32:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bfd34:	f7fd ff46 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bfd38:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bfd3a:	6823      	ldr	r3, [r4, #0]
   bfd3c:	4620      	mov	r0, r4
   bfd3e:	695b      	ldr	r3, [r3, #20]
   bfd40:	4798      	blx	r3
    if (c >= 0) return c;
   bfd42:	2800      	cmp	r0, #0
   bfd44:	da08      	bge.n	bfd58 <_ZN6Stream9timedReadEv+0x28>
   bfd46:	f7fd ff3d 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bfd4a:	68e3      	ldr	r3, [r4, #12]
   bfd4c:	1ac0      	subs	r0, r0, r3
   bfd4e:	68a3      	ldr	r3, [r4, #8]
   bfd50:	4298      	cmp	r0, r3
   bfd52:	d3f2      	bcc.n	bfd3a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bfd54:	f04f 30ff 	mov.w	r0, #4294967295
}
   bfd58:	bd10      	pop	{r4, pc}

000bfd5a <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   bfd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfd5e:	4607      	mov	r7, r0
   bfd60:	4688      	mov	r8, r1
   bfd62:	4616      	mov	r6, r2
  if (length < 1) return 0;
   bfd64:	461d      	mov	r5, r3
   bfd66:	b173      	cbz	r3, bfd86 <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   bfd68:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   bfd6a:	4638      	mov	r0, r7
   bfd6c:	f7ff ffe0 	bl	bfd30 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   bfd70:	1e03      	subs	r3, r0, #0
   bfd72:	db05      	blt.n	bfd80 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   bfd74:	4543      	cmp	r3, r8
   bfd76:	d003      	beq.n	bfd80 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   bfd78:	5533      	strb	r3, [r6, r4]
    index++;
   bfd7a:	3401      	adds	r4, #1
  while (index < length) {
   bfd7c:	42a5      	cmp	r5, r4
   bfd7e:	d1f4      	bne.n	bfd6a <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   bfd80:	4620      	mov	r0, r4
   bfd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   bfd86:	461c      	mov	r4, r3
   bfd88:	e7fa      	b.n	bfd80 <_ZN6Stream14readBytesUntilEcPcj+0x26>
	...

000bfd8c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bfd8c:	b570      	push	{r4, r5, r6, lr}
   bfd8e:	460d      	mov	r5, r1
  String ret;
   bfd90:	4909      	ldr	r1, [pc, #36]	; (bfdb8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bfd92:	4604      	mov	r4, r0
   bfd94:	4616      	mov	r6, r2
  String ret;
   bfd96:	f7fe fcde 	bl	be756 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bfd9a:	4628      	mov	r0, r5
   bfd9c:	f7ff ffc8 	bl	bfd30 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bfda0:	2800      	cmp	r0, #0
   bfda2:	db06      	blt.n	bfdb2 <_ZN6Stream15readStringUntilEc+0x26>
   bfda4:	4286      	cmp	r6, r0
   bfda6:	d004      	beq.n	bfdb2 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   bfda8:	b2c1      	uxtb	r1, r0
   bfdaa:	4620      	mov	r0, r4
   bfdac:	f7fe fd52 	bl	be854 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bfdb0:	e7f3      	b.n	bfd9a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bfdb2:	4620      	mov	r0, r4
   bfdb4:	bd70      	pop	{r4, r5, r6, pc}
   bfdb6:	bf00      	nop
   bfdb8:	000c7e94 	.word	0x000c7e94

000bfdbc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   bfdbc:	6880      	ldr	r0, [r0, #8]
   bfdbe:	6803      	ldr	r3, [r0, #0]
   bfdc0:	68db      	ldr	r3, [r3, #12]
   bfdc2:	4718      	bx	r3

000bfdc4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   bfdc4:	4770      	bx	lr

000bfdc6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   bfdc6:	4608      	mov	r0, r1
   bfdc8:	b111      	cbz	r1, bfdd0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   bfdca:	680b      	ldr	r3, [r1, #0]
   bfdcc:	685b      	ldr	r3, [r3, #4]
   bfdce:	4718      	bx	r3
}
   bfdd0:	4770      	bx	lr

000bfdd2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   bfdd2:	4770      	bx	lr

000bfdd4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfdd4:	4770      	bx	lr

000bfdd6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   bfdd6:	4770      	bx	lr

000bfdd8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   bfdd8:	4770      	bx	lr

000bfdda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   bfdda:	b538      	push	{r3, r4, r5, lr}
   bfddc:	4604      	mov	r4, r0
   bfdde:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   bfde0:	6800      	ldr	r0, [r0, #0]
   bfde2:	212e      	movs	r1, #46	; 0x2e
   bfde4:	f004 fc1a 	bl	c461c <strchrnul>
    size = s - category;
   bfde8:	6823      	ldr	r3, [r4, #0]
   bfdea:	1ac3      	subs	r3, r0, r3
   bfdec:	602b      	str	r3, [r5, #0]
    if (size) {
   bfdee:	b123      	cbz	r3, bfdfa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   bfdf0:	7803      	ldrb	r3, [r0, #0]
   bfdf2:	b103      	cbz	r3, bfdf6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   bfdf4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   bfdf6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bfdf8:	6020      	str	r0, [r4, #0]
}
   bfdfa:	4618      	mov	r0, r3
   bfdfc:	bd38      	pop	{r3, r4, r5, pc}

000bfdfe <_ZN5spark16JSONStreamWriterD0Ev>:
   bfdfe:	b510      	push	{r4, lr}
   bfe00:	210c      	movs	r1, #12
   bfe02:	4604      	mov	r4, r0
   bfe04:	f7f4 f94d 	bl	b40a2 <_ZdlPvj>
   bfe08:	4620      	mov	r0, r4
   bfe0a:	bd10      	pop	{r4, pc}

000bfe0c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   bfe0c:	b510      	push	{r4, lr}
   bfe0e:	2104      	movs	r1, #4
   bfe10:	4604      	mov	r4, r0
   bfe12:	f7f4 f946 	bl	b40a2 <_ZdlPvj>
   bfe16:	4620      	mov	r0, r4
   bfe18:	bd10      	pop	{r4, pc}

000bfe1a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   bfe1a:	b510      	push	{r4, lr}
   bfe1c:	2104      	movs	r1, #4
   bfe1e:	4604      	mov	r4, r0
   bfe20:	f7f4 f93f 	bl	b40a2 <_ZdlPvj>
   bfe24:	4620      	mov	r0, r4
   bfe26:	bd10      	pop	{r4, pc}

000bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   bfe28:	f7fd bfa6 	b.w	bdd78 <os_mutex_recursive_lock>

000bfe2c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   bfe2c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   bfe2e:	f004 fbff 	bl	c4630 <strcmp>
}
   bfe32:	fab0 f080 	clz	r0, r0
   bfe36:	0940      	lsrs	r0, r0, #5
   bfe38:	bd08      	pop	{r3, pc}

000bfe3a <__tcf_1>:
   bfe3a:	4770      	bx	lr

000bfe3c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   bfe3c:	b510      	push	{r4, lr}
   bfe3e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   bfe40:	f001 fc44 	bl	c16cc <_Z16_fetch_usbserialv>
   bfe44:	4284      	cmp	r4, r0
   bfe46:	d010      	beq.n	bfe6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   bfe48:	f002 f90c 	bl	c2064 <_Z22__fetch_global_Serial1v>
   bfe4c:	4284      	cmp	r4, r0
   bfe4e:	d105      	bne.n	bfe5c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   bfe50:	f002 f908 	bl	c2064 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   bfe54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   bfe58:	f001 bd33 	b.w	c18c2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   bfe5c:	b12c      	cbz	r4, bfe6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   bfe5e:	6823      	ldr	r3, [r4, #0]
   bfe60:	4620      	mov	r0, r4
   bfe62:	685b      	ldr	r3, [r3, #4]
}
   bfe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bfe68:	4718      	bx	r3
   bfe6a:	bd10      	pop	{r4, pc}

000bfe6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfe6c:	680b      	ldr	r3, [r1, #0]
   bfe6e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bfe70:	684b      	ldr	r3, [r1, #4]
   bfe72:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bfe74:	b113      	cbz	r3, bfe7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   bfe76:	685a      	ldr	r2, [r3, #4]
   bfe78:	3201      	adds	r2, #1
   bfe7a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bfe7c:	4770      	bx	lr

000bfe7e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   bfe7e:	b513      	push	{r0, r1, r4, lr}
   bfe80:	4604      	mov	r4, r0
    return value(val, strlen(val));
   bfe82:	4608      	mov	r0, r1
   bfe84:	9101      	str	r1, [sp, #4]
   bfe86:	f004 fc02 	bl	c468e <strlen>
   bfe8a:	9901      	ldr	r1, [sp, #4]
   bfe8c:	4602      	mov	r2, r0
   bfe8e:	4620      	mov	r0, r4
}
   bfe90:	b002      	add	sp, #8
   bfe92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   bfe96:	f002 b827 	b.w	c1ee8 <_ZN5spark10JSONWriter5valueEPKcj>

000bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   bfe9a:	b513      	push	{r0, r1, r4, lr}
   bfe9c:	4604      	mov	r4, r0
    write(str, strlen(str));
   bfe9e:	4608      	mov	r0, r1
   bfea0:	9101      	str	r1, [sp, #4]
   bfea2:	f004 fbf4 	bl	c468e <strlen>
   bfea6:	6823      	ldr	r3, [r4, #0]
   bfea8:	9901      	ldr	r1, [sp, #4]
   bfeaa:	68db      	ldr	r3, [r3, #12]
   bfeac:	4602      	mov	r2, r0
   bfeae:	4620      	mov	r0, r4
}
   bfeb0:	b002      	add	sp, #8
   bfeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   bfeb6:	4718      	bx	r3

000bfeb8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   bfeb8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   bfeba:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   bfebc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   bfec0:	68db      	ldr	r3, [r3, #12]
   bfec2:	2201      	movs	r2, #1
   bfec4:	f10d 0107 	add.w	r1, sp, #7
   bfec8:	4798      	blx	r3
}
   bfeca:	b003      	add	sp, #12
   bfecc:	f85d fb04 	ldr.w	pc, [sp], #4

000bfed0 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfed0:	b40e      	push	{r1, r2, r3}
   bfed2:	b503      	push	{r0, r1, lr}
   bfed4:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   bfed6:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   bfed8:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   bfedc:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   bfede:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   bfee0:	f7ff fef5 	bl	bfcce <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   bfee4:	b002      	add	sp, #8
   bfee6:	f85d eb04 	ldr.w	lr, [sp], #4
   bfeea:	b003      	add	sp, #12
   bfeec:	4770      	bx	lr

000bfeee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   bfeee:	680a      	ldr	r2, [r1, #0]
   bfef0:	6002      	str	r2, [r0, #0]
   bfef2:	684a      	ldr	r2, [r1, #4]
   bfef4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   bfef6:	2200      	movs	r2, #0
   bfef8:	e9c0 2202 	strd	r2, r2, [r0, #8]
   bfefc:	b510      	push	{r4, lr}
   bfefe:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   bff00:	688c      	ldr	r4, [r1, #8]
   bff02:	6084      	str	r4, [r0, #8]
   bff04:	68cc      	ldr	r4, [r1, #12]
   bff06:	60c4      	str	r4, [r0, #12]
   bff08:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bff0a:	608a      	str	r2, [r1, #8]
   bff0c:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   bff0e:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   bff10:	610a      	str	r2, [r1, #16]
   bff12:	bd10      	pop	{r4, pc}

000bff14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bff14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   bff18:	e9d0 8400 	ldrd	r8, r4, [r0]
   bff1c:	f04f 0a14 	mov.w	sl, #20
   bff20:	9300      	str	r3, [sp, #0]
   bff22:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   bff26:	4b18      	ldr	r3, [pc, #96]	; (bff88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bff28:	10a4      	asrs	r4, r4, #2
   bff2a:	4617      	mov	r7, r2
   bff2c:	435c      	muls	r4, r3
   bff2e:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   bff30:	2c00      	cmp	r4, #0
   bff32:	dd21      	ble.n	bff78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   bff34:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   bff36:	fb0a f006 	mul.w	r0, sl, r6
   bff3a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   bff3e:	463a      	mov	r2, r7
   bff40:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   bff44:	5828      	ldr	r0, [r5, r0]
   bff46:	9101      	str	r1, [sp, #4]
   bff48:	455f      	cmp	r7, fp
   bff4a:	bf28      	it	cs
   bff4c:	465a      	movcs	r2, fp
   bff4e:	f004 fbb9 	bl	c46c4 <strncmp>
                if (cmp == 0) {
   bff52:	2800      	cmp	r0, #0
   bff54:	9901      	ldr	r1, [sp, #4]
   bff56:	f04f 0301 	mov.w	r3, #1
   bff5a:	d10b      	bne.n	bff74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   bff5c:	455f      	cmp	r7, fp
   bff5e:	d103      	bne.n	bff68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   bff60:	9a00      	ldr	r2, [sp, #0]
   bff62:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   bff64:	4634      	mov	r4, r6
   bff66:	e7e3      	b.n	bff30 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   bff68:	d9fc      	bls.n	bff64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   bff6a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   bff6c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   bff70:	3e01      	subs	r6, #1
   bff72:	e7f7      	b.n	bff64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   bff74:	dbf9      	blt.n	bff6a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   bff76:	e7f5      	b.n	bff64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   bff78:	eba5 0508 	sub.w	r5, r5, r8
}
   bff7c:	4802      	ldr	r0, [pc, #8]	; (bff88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   bff7e:	10ad      	asrs	r5, r5, #2
   bff80:	4368      	muls	r0, r5
   bff82:	b003      	add	sp, #12
   bff84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bff88:	cccccccd 	.word	0xcccccccd

000bff8c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bff8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   bff8e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   bff90:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   bff92:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   bff94:	b303      	cbz	r3, bffd8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   bff96:	b1f9      	cbz	r1, bffd8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   bff98:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   bff9a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   bff9e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   bffa0:	a903      	add	r1, sp, #12
   bffa2:	a801      	add	r0, sp, #4
   bffa4:	f7ff ff19 	bl	bfdda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   bffa8:	4601      	mov	r1, r0
   bffaa:	b1a8      	cbz	r0, bffd8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   bffac:	f10d 030b 	add.w	r3, sp, #11
   bffb0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   bffb2:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   bffb6:	4620      	mov	r0, r4
   bffb8:	f7ff ffac 	bl	bff14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   bffbc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   bffc0:	b153      	cbz	r3, bffd8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   bffc2:	6823      	ldr	r3, [r4, #0]
   bffc4:	2414      	movs	r4, #20
   bffc6:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   bffca:	3408      	adds	r4, #8
            if (node.level >= 0) {
   bffcc:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   bffd0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   bffd2:	bfa8      	it	ge
   bffd4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   bffd6:	e7e3      	b.n	bffa0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   bffd8:	4628      	mov	r0, r5
   bffda:	b004      	add	sp, #16
   bffdc:	bd70      	pop	{r4, r5, r6, pc}
	...

000bffe0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   bffe0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   bffe2:	4c09      	ldr	r4, [pc, #36]	; (c0008 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   bffe4:	7823      	ldrb	r3, [r4, #0]
   bffe6:	f3bf 8f5b 	dmb	ish
   bffea:	07db      	lsls	r3, r3, #31
   bffec:	d409      	bmi.n	c0002 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bffee:	4620      	mov	r0, r4
   bfff0:	f7f4 f866 	bl	b40c0 <__cxa_guard_acquire>
   bfff4:	b128      	cbz	r0, c0002 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   bfff6:	4620      	mov	r0, r4
   bfff8:	f7f4 f867 	bl	b40ca <__cxa_guard_release>
   bfffc:	4803      	ldr	r0, [pc, #12]	; (c000c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   bfffe:	f004 fa6d 	bl	c44dc <atexit>
}
   c0002:	4803      	ldr	r0, [pc, #12]	; (c0010 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   c0004:	bd10      	pop	{r4, pc}
   c0006:	bf00      	nop
   c0008:	2003e648 	.word	0x2003e648
   c000c:	000bfdd3 	.word	0x000bfdd3
   c0010:	2003db40 	.word	0x2003db40

000c0014 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   c0014:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   c0016:	4c09      	ldr	r4, [pc, #36]	; (c003c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   c0018:	7823      	ldrb	r3, [r4, #0]
   c001a:	f3bf 8f5b 	dmb	ish
   c001e:	07db      	lsls	r3, r3, #31
   c0020:	d409      	bmi.n	c0036 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c0022:	4620      	mov	r0, r4
   c0024:	f7f4 f84c 	bl	b40c0 <__cxa_guard_acquire>
   c0028:	b128      	cbz	r0, c0036 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   c002a:	4620      	mov	r0, r4
   c002c:	f7f4 f84d 	bl	b40ca <__cxa_guard_release>
   c0030:	4803      	ldr	r0, [pc, #12]	; (c0040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   c0032:	f004 fa53 	bl	c44dc <atexit>
    return &factory;
}
   c0036:	4803      	ldr	r0, [pc, #12]	; (c0044 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   c0038:	bd10      	pop	{r4, pc}
   c003a:	bf00      	nop
   c003c:	2003e64c 	.word	0x2003e64c
   c0040:	000bfe3b 	.word	0x000bfe3b
   c0044:	2003db44 	.word	0x2003db44

000c0048 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   c0048:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   c004a:	2500      	movs	r5, #0
   c004c:	4604      	mov	r4, r0
   c004e:	e9c0 5500 	strd	r5, r5, [r0]
   c0052:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c0056:	6085      	str	r5, [r0, #8]
   c0058:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   c005a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   c005e:	f7fd fe7b 	bl	bdd58 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   c0062:	f7ff ffbd 	bl	bffe0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   c0066:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c0068:	f7ff ffd4 	bl	c0014 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   c006c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   c006e:	6220      	str	r0, [r4, #32]
}
   c0070:	4620      	mov	r0, r4
   c0072:	bd38      	pop	{r3, r4, r5, pc}

000c0074 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   c0074:	b510      	push	{r4, lr}
    static LogManager mgr;
   c0076:	4c0a      	ldr	r4, [pc, #40]	; (c00a0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   c0078:	7823      	ldrb	r3, [r4, #0]
   c007a:	f3bf 8f5b 	dmb	ish
   c007e:	07db      	lsls	r3, r3, #31
   c0080:	d40c      	bmi.n	c009c <_ZN5spark10LogManager8instanceEv+0x28>
   c0082:	4620      	mov	r0, r4
   c0084:	f7f4 f81c 	bl	b40c0 <__cxa_guard_acquire>
   c0088:	b140      	cbz	r0, c009c <_ZN5spark10LogManager8instanceEv+0x28>
   c008a:	4806      	ldr	r0, [pc, #24]	; (c00a4 <_ZN5spark10LogManager8instanceEv+0x30>)
   c008c:	f7ff ffdc 	bl	c0048 <_ZN5spark10LogManagerC1Ev>
   c0090:	4620      	mov	r0, r4
   c0092:	f7f4 f81a 	bl	b40ca <__cxa_guard_release>
   c0096:	4804      	ldr	r0, [pc, #16]	; (c00a8 <_ZN5spark10LogManager8instanceEv+0x34>)
   c0098:	f004 fa20 	bl	c44dc <atexit>
    return &mgr;
}
   c009c:	4801      	ldr	r0, [pc, #4]	; (c00a4 <_ZN5spark10LogManager8instanceEv+0x30>)
   c009e:	bd10      	pop	{r4, pc}
   c00a0:	2003e644 	.word	0x2003e644
   c00a4:	2003e654 	.word	0x2003e654
   c00a8:	000c05c9 	.word	0x000c05c9

000c00ac <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   c00ac:	4a02      	ldr	r2, [pc, #8]	; (c00b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   c00ae:	4903      	ldr	r1, [pc, #12]	; (c00bc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   c00b0:	4803      	ldr	r0, [pc, #12]	; (c00c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   c00b2:	2300      	movs	r3, #0
   c00b4:	f7fd bff0 	b.w	be098 <log_set_callbacks>
   c00b8:	000c03ad 	.word	0x000c03ad
   c00bc:	000c0339 	.word	0x000c0339
   c00c0:	000c02b9 	.word	0x000c02b9

000c00c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   c00c4:	2300      	movs	r3, #0
   c00c6:	461a      	mov	r2, r3
   c00c8:	4619      	mov	r1, r3
   c00ca:	4618      	mov	r0, r3
   c00cc:	f7fd bfe4 	b.w	be098 <log_set_callbacks>

000c00d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c00d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   c00d2:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   c00d4:	4604      	mov	r4, r0
   c00d6:	4668      	mov	r0, sp
   c00d8:	f7ff fec8 	bl	bfe6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   c00dc:	466a      	mov	r2, sp
   c00de:	4629      	mov	r1, r5
   c00e0:	4620      	mov	r0, r4
   c00e2:	f001 fe21 	bl	c1d28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   c00e6:	a801      	add	r0, sp, #4
   c00e8:	f7ff f835 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c00ec:	4620      	mov	r0, r4
   c00ee:	b003      	add	sp, #12
   c00f0:	bd30      	pop	{r4, r5, pc}

000c00f2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c00f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   c00f4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   c00f6:	4604      	mov	r4, r0
   c00f8:	4668      	mov	r0, sp
   c00fa:	f7ff feb7 	bl	bfe6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   c00fe:	466a      	mov	r2, sp
   c0100:	4629      	mov	r1, r5
   c0102:	4620      	mov	r0, r4
   c0104:	f001 fdec 	bl	c1ce0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c0108:	a801      	add	r0, sp, #4
   c010a:	f7ff f824 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c010e:	4620      	mov	r0, r4
   c0110:	b003      	add	sp, #12
   c0112:	bd30      	pop	{r4, r5, pc}

000c0114 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0114:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   c0116:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   c0118:	4604      	mov	r4, r0
   c011a:	4668      	mov	r0, sp
   c011c:	f7ff fea6 	bl	bfe6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   c0120:	466a      	mov	r2, sp
   c0122:	4629      	mov	r1, r5
   c0124:	4620      	mov	r0, r4
   c0126:	f001 fd84 	bl	c1c32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   c012a:	a801      	add	r0, sp, #4
   c012c:	f7ff f813 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0130:	4620      	mov	r0, r4
   c0132:	b003      	add	sp, #12
   c0134:	bd30      	pop	{r4, r5, pc}
	...

000c0138 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   c0138:	b570      	push	{r4, r5, r6, lr}
   c013a:	b08a      	sub	sp, #40	; 0x28
   c013c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   c013e:	4601      	mov	r1, r0
   c0140:	a804      	add	r0, sp, #16
   c0142:	f7ff ffc5 	bl	c00d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   c0146:	4e14      	ldr	r6, [pc, #80]	; (c0198 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   c0148:	a804      	add	r0, sp, #16
   c014a:	f001 fe05 	bl	c1d58 <_ZN5spark18JSONObjectIterator4nextEv>
   c014e:	b1e8      	cbz	r0, c018c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   c0150:	a904      	add	r1, sp, #16
   c0152:	4668      	mov	r0, sp
   c0154:	f7ff ffcd 	bl	c00f2 <_ZNK5spark18JSONObjectIterator4nameEv>
   c0158:	9802      	ldr	r0, [sp, #8]
   c015a:	4631      	mov	r1, r6
   c015c:	f7ff fe66 	bl	bfe2c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   c0160:	4604      	mov	r4, r0
   c0162:	b110      	cbz	r0, c016a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   c0164:	1e2c      	subs	r4, r5, #0
   c0166:	bf18      	it	ne
   c0168:	2401      	movne	r4, #1
   c016a:	a801      	add	r0, sp, #4
   c016c:	f7fe fff3 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c0170:	2c00      	cmp	r4, #0
   c0172:	d0e9      	beq.n	c0148 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   c0174:	a904      	add	r1, sp, #16
   c0176:	4668      	mov	r0, sp
   c0178:	f7ff ffcc 	bl	c0114 <_ZNK5spark18JSONObjectIterator5valueEv>
   c017c:	4668      	mov	r0, sp
   c017e:	f001 fd8e 	bl	c1c9e <_ZNK5spark9JSONValue5toIntEv>
   c0182:	6028      	str	r0, [r5, #0]
   c0184:	a801      	add	r0, sp, #4
   c0186:	f7fe ffe6 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c018a:	e7dd      	b.n	c0148 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   c018c:	a805      	add	r0, sp, #20
   c018e:	f7fe ffe2 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c0192:	b00a      	add	sp, #40	; 0x28
   c0194:	bd70      	pop	{r4, r5, r6, pc}
   c0196:	bf00      	nop
   c0198:	000c7e3a 	.word	0x000c7e3a

000c019c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c019c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c019e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   c01a0:	4620      	mov	r0, r4
   c01a2:	4913      	ldr	r1, [pc, #76]	; (c01f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   c01a4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   c01a6:	f004 fa43 	bl	c4630 <strcmp>
   c01aa:	b950      	cbnz	r0, c01c2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   c01ac:	f001 fa8e 	bl	c16cc <_Z16_fetch_usbserialv>
   c01b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   c01b4:	f001 fa7a 	bl	c16ac <_ZN9USBSerial5beginEl>
}
   c01b8:	b003      	add	sp, #12
   c01ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   c01be:	f001 ba85 	b.w	c16cc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   c01c2:	490c      	ldr	r1, [pc, #48]	; (c01f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   c01c4:	4620      	mov	r0, r4
   c01c6:	f004 fa33 	bl	c4630 <strcmp>
   c01ca:	b978      	cbnz	r0, c01ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   c01cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   c01d0:	a901      	add	r1, sp, #4
   c01d2:	4628      	mov	r0, r5
        int baud = 9600;
   c01d4:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   c01d6:	f7ff ffaf 	bl	c0138 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   c01da:	f001 ff43 	bl	c2064 <_Z22__fetch_global_Serial1v>
   c01de:	9901      	ldr	r1, [sp, #4]
   c01e0:	f001 fb6c 	bl	c18bc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   c01e4:	f001 ff3e 	bl	c2064 <_Z22__fetch_global_Serial1v>
}
   c01e8:	b003      	add	sp, #12
   c01ea:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   c01ec:	2000      	movs	r0, #0
   c01ee:	e7fb      	b.n	c01e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   c01f0:	000c7e3f 	.word	0x000c7e3f
   c01f4:	000c7e46 	.word	0x000c7e46

000c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   c01f8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   c01fa:	e9d0 5300 	ldrd	r5, r3, [r0]
   c01fe:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   c0200:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   c0202:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0206:	42ae      	cmp	r6, r5
   c0208:	d005      	beq.n	c0216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   c020a:	f105 0008 	add.w	r0, r5, #8
   c020e:	f7ff fff3 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0212:	3514      	adds	r5, #20
   c0214:	e7f7      	b.n	c0206 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   c0216:	6820      	ldr	r0, [r4, #0]
   c0218:	f7fe f83c 	bl	be294 <free>
}
   c021c:	4620      	mov	r0, r4
   c021e:	bd70      	pop	{r4, r5, r6, pc}

000c0220 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   c0220:	b510      	push	{r4, lr}
   c0222:	4604      	mov	r4, r0
   c0224:	300c      	adds	r0, #12
   c0226:	f7ff ffe7 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c022a:	4620      	mov	r0, r4
   c022c:	f7fe fef3 	bl	bf016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0230:	4620      	mov	r0, r4
   c0232:	bd10      	pop	{r4, pc}

000c0234 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   c0234:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   c0236:	4b04      	ldr	r3, [pc, #16]	; (c0248 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   c0238:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   c023a:	f840 3b04 	str.w	r3, [r0], #4
   c023e:	f7ff ffef 	bl	c0220 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   c0242:	4620      	mov	r0, r4
   c0244:	bd10      	pop	{r4, pc}
   c0246:	bf00      	nop
   c0248:	000c6d64 	.word	0x000c6d64

000c024c <_ZN5spark16StreamLogHandlerD0Ev>:
   c024c:	b510      	push	{r4, lr}
   c024e:	4604      	mov	r4, r0
   c0250:	f7ff fff0 	bl	c0234 <_ZN5spark16StreamLogHandlerD1Ev>
   c0254:	4620      	mov	r0, r4
   c0256:	2124      	movs	r1, #36	; 0x24
   c0258:	f7f3 ff23 	bl	b40a2 <_ZdlPvj>
   c025c:	4620      	mov	r0, r4
   c025e:	bd10      	pop	{r4, pc}

000c0260 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   c0260:	b510      	push	{r4, lr}
   c0262:	4b03      	ldr	r3, [pc, #12]	; (c0270 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   c0264:	6003      	str	r3, [r0, #0]
   c0266:	4604      	mov	r4, r0
   c0268:	f7ff ffe4 	bl	c0234 <_ZN5spark16StreamLogHandlerD1Ev>
   c026c:	4620      	mov	r0, r4
   c026e:	bd10      	pop	{r4, pc}
   c0270:	000c7ee4 	.word	0x000c7ee4

000c0274 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   c0274:	b510      	push	{r4, lr}
   c0276:	4604      	mov	r4, r0
   c0278:	f7ff fff2 	bl	c0260 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   c027c:	4620      	mov	r0, r4
   c027e:	2124      	movs	r1, #36	; 0x24
   c0280:	f7f3 ff0f 	bl	b40a2 <_ZdlPvj>
   c0284:	4620      	mov	r0, r4
   c0286:	bd10      	pop	{r4, pc}

000c0288 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   c0288:	2200      	movs	r2, #0
   c028a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   c028e:	b510      	push	{r4, lr}
        capacity_(0) {
   c0290:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   c0292:	680c      	ldr	r4, [r1, #0]
   c0294:	6004      	str	r4, [r0, #0]
   c0296:	684c      	ldr	r4, [r1, #4]
   c0298:	6044      	str	r4, [r0, #4]
   c029a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c029c:	600a      	str	r2, [r1, #0]
   c029e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c02a0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c02a2:	608a      	str	r2, [r1, #8]
}
   c02a4:	bd10      	pop	{r4, pc}

000c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c02a6:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   c02a8:	6803      	ldr	r3, [r0, #0]
   c02aa:	4604      	mov	r4, r0
   c02ac:	6818      	ldr	r0, [r3, #0]
   c02ae:	f7fd fd6b 	bl	bdd88 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   c02b2:	4620      	mov	r0, r4
   c02b4:	bd10      	pop	{r4, pc}
	...

000c02b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   c02b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c02bc:	b087      	sub	sp, #28
   c02be:	4680      	mov	r8, r0
   c02c0:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   c02c2:	4b1c      	ldr	r3, [pc, #112]	; (c0334 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   c02c4:	685b      	ldr	r3, [r3, #4]
   c02c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c02ca:	4689      	mov	r9, r1
   c02cc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   c02ce:	b96b      	cbnz	r3, c02ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   c02d0:	f7ff fed0 	bl	c0074 <_ZN5spark10LogManager8instanceEv>
   c02d4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c02d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   c02da:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c02dc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   c02de:	f7ff fda3 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   c02e2:	7b23      	ldrb	r3, [r4, #12]
   c02e4:	b12b      	cbz	r3, c02f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   c02e6:	a805      	add	r0, sp, #20
   c02e8:	f7ff ffdd 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   c02ec:	b007      	add	sp, #28
   c02ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   c02f2:	2301      	movs	r3, #1
   c02f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   c02f6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   c02fa:	fa5f f989 	uxtb.w	r9, r9
   c02fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c0302:	45aa      	cmp	sl, r5
   c0304:	d012      	beq.n	c032c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   c0306:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   c030a:	4631      	mov	r1, r6
   c030c:	1d38      	adds	r0, r7, #4
   c030e:	f7ff fe3d 	bl	bff8c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c0312:	4581      	cmp	r9, r0
   c0314:	d3f5      	bcc.n	c0302 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   c0316:	683b      	ldr	r3, [r7, #0]
   c0318:	9a03      	ldr	r2, [sp, #12]
   c031a:	9200      	str	r2, [sp, #0]
   c031c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   c0320:	464a      	mov	r2, r9
   c0322:	4633      	mov	r3, r6
   c0324:	4641      	mov	r1, r8
   c0326:	4638      	mov	r0, r7
   c0328:	47d8      	blx	fp
   c032a:	e7ea      	b.n	c0302 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   c032c:	2300      	movs	r3, #0
   c032e:	7323      	strb	r3, [r4, #12]
   c0330:	e7d9      	b.n	c02e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   c0332:	bf00      	nop
   c0334:	e000ed00 	.word	0xe000ed00

000c0338 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   c0338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c033c:	469b      	mov	fp, r3
   c033e:	4b1a      	ldr	r3, [pc, #104]	; (c03a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   c0340:	685b      	ldr	r3, [r3, #4]
   c0342:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c0346:	4680      	mov	r8, r0
   c0348:	4689      	mov	r9, r1
   c034a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   c034c:	b96b      	cbnz	r3, c036a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   c034e:	f7ff fe91 	bl	c0074 <_ZN5spark10LogManager8instanceEv>
   c0352:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   c0354:	f100 0324 	add.w	r3, r0, #36	; 0x24
   c0358:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c035a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c035c:	f7ff fd64 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   c0360:	7b23      	ldrb	r3, [r4, #12]
   c0362:	b12b      	cbz	r3, c0370 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   c0364:	a801      	add	r0, sp, #4
   c0366:	f7ff ff9e 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c036a:	b003      	add	sp, #12
   c036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   c0370:	2301      	movs	r3, #1
   c0372:	7323      	strb	r3, [r4, #12]
   c0374:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   c0378:	b2f6      	uxtb	r6, r6
   c037a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c037e:	4555      	cmp	r5, sl
   c0380:	d00e      	beq.n	c03a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   c0382:	f855 7b04 	ldr.w	r7, [r5], #4
   c0386:	4659      	mov	r1, fp
   c0388:	1d38      	adds	r0, r7, #4
   c038a:	f7ff fdff 	bl	bff8c <_ZNK5spark6detail9LogFilter5levelEPKc>
   c038e:	4286      	cmp	r6, r0
   c0390:	d3f5      	bcc.n	c037e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   c0392:	683b      	ldr	r3, [r7, #0]
   c0394:	464a      	mov	r2, r9
   c0396:	68db      	ldr	r3, [r3, #12]
   c0398:	4641      	mov	r1, r8
   c039a:	4638      	mov	r0, r7
   c039c:	4798      	blx	r3
   c039e:	e7ee      	b.n	c037e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   c03a0:	2300      	movs	r3, #0
   c03a2:	7323      	strb	r3, [r4, #12]
   c03a4:	e7de      	b.n	c0364 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   c03a6:	bf00      	nop
   c03a8:	e000ed00 	.word	0xe000ed00

000c03ac <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   c03ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c03b0:	4b16      	ldr	r3, [pc, #88]	; (c040c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   c03b2:	685b      	ldr	r3, [r3, #4]
   c03b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   c03b8:	4605      	mov	r5, r0
   c03ba:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   c03bc:	bb1b      	cbnz	r3, c0406 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   c03be:	f7ff fe59 	bl	c0074 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   c03c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   c03c6:	4604      	mov	r4, r0
   c03c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c03ca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c03cc:	f7ff fd2c 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
   c03d0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   c03d4:	2446      	movs	r4, #70	; 0x46
   c03d6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   c03da:	45b0      	cmp	r8, r6
   c03dc:	d109      	bne.n	c03f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   c03de:	a801      	add	r0, sp, #4
   c03e0:	f7ff ff61 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   c03e4:	42a5      	cmp	r5, r4
   c03e6:	bfb4      	ite	lt
   c03e8:	2000      	movlt	r0, #0
   c03ea:	2001      	movge	r0, #1
}
   c03ec:	b002      	add	sp, #8
   c03ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   c03f2:	f856 0b04 	ldr.w	r0, [r6], #4
   c03f6:	4639      	mov	r1, r7
   c03f8:	3004      	adds	r0, #4
   c03fa:	f7ff fdc7 	bl	bff8c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   c03fe:	4284      	cmp	r4, r0
   c0400:	bfa8      	it	ge
   c0402:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   c0404:	e7e9      	b.n	c03da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   c0406:	2000      	movs	r0, #0
   c0408:	e7f0      	b.n	c03ec <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   c040a:	bf00      	nop
   c040c:	e000ed00 	.word	0xe000ed00

000c0410 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c0412:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   c0416:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   c0418:	4604      	mov	r4, r0
   c041a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c041c:	db0d      	blt.n	c043a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   c041e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   c0420:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   c0422:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   c0424:	dd04      	ble.n	c0430 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   c0426:	00b9      	lsls	r1, r7, #2
   c0428:	f7fd ff3c 	bl	be2a4 <realloc>
            if (!d) {
   c042c:	b918      	cbnz	r0, c0436 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   c042e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   c0430:	f7fd ff30 	bl	be294 <free>
        T* d = nullptr;
   c0434:	2000      	movs	r0, #0
        data_ = d;
   c0436:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   c0438:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   c043a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   c043c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   c043e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   c0442:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   c0444:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   c0448:	1d08      	adds	r0, r1, #4
   c044a:	f004 f87b 	bl	c4544 <memmove>
    new(p) T(std::move(value));
   c044e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   c0452:	6863      	ldr	r3, [r4, #4]
   c0454:	3301      	adds	r3, #1
   c0456:	6063      	str	r3, [r4, #4]
    return true;
   c0458:	2001      	movs	r0, #1
   c045a:	e7e8      	b.n	c042e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000c045c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   c045c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   c045e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   c0462:	4604      	mov	r4, r0
   c0464:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0466:	9301      	str	r3, [sp, #4]
   c0468:	460d      	mov	r5, r1
      { _M_device.lock(); }
   c046a:	f7ff fcdd 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   c046e:	e9d4 3200 	ldrd	r3, r2, [r4]
   c0472:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   c0476:	4293      	cmp	r3, r2
   c0478:	4619      	mov	r1, r3
   c047a:	d00b      	beq.n	c0494 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   c047c:	6809      	ldr	r1, [r1, #0]
   c047e:	42a9      	cmp	r1, r5
   c0480:	f103 0304 	add.w	r3, r3, #4
   c0484:	d1f7      	bne.n	c0476 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   c0486:	a801      	add	r0, sp, #4
   c0488:	f7ff ff0d 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c048c:	2500      	movs	r5, #0
}
   c048e:	4628      	mov	r0, r5
   c0490:	b003      	add	sp, #12
   c0492:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   c0494:	4629      	mov	r1, r5
   c0496:	4620      	mov	r0, r4
   c0498:	f7ff ffba 	bl	c0410 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   c049c:	4605      	mov	r5, r0
   c049e:	2800      	cmp	r0, #0
   c04a0:	d0f1      	beq.n	c0486 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   c04a2:	6863      	ldr	r3, [r4, #4]
   c04a4:	2b01      	cmp	r3, #1
   c04a6:	d101      	bne.n	c04ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   c04a8:	f7ff fe00 	bl	c00ac <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c04ac:	a801      	add	r0, sp, #4
   c04ae:	f7ff fefa 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   c04b2:	e7ec      	b.n	c048e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000c04b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c04b4:	b570      	push	{r4, r5, r6, lr}
   c04b6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   c04b8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   c04bc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   c04be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   c04c2:	4282      	cmp	r2, r0
   c04c4:	d00f      	beq.n	c04e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   c04c6:	4601      	mov	r1, r0
            if (*p == value) {
   c04c8:	681d      	ldr	r5, [r3, #0]
   c04ca:	f851 6b04 	ldr.w	r6, [r1], #4
   c04ce:	42ae      	cmp	r6, r5
   c04d0:	d107      	bne.n	c04e2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   c04d2:	1a52      	subs	r2, r2, r1
   c04d4:	f004 f836 	bl	c4544 <memmove>
    --size_;
   c04d8:	6863      	ldr	r3, [r4, #4]
   c04da:	3b01      	subs	r3, #1
   c04dc:	6063      	str	r3, [r4, #4]
    return true;
   c04de:	2001      	movs	r0, #1
}
   c04e0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   c04e2:	4608      	mov	r0, r1
   c04e4:	e7ed      	b.n	c04c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   c04e6:	2000      	movs	r0, #0
   c04e8:	e7fa      	b.n	c04e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000c04ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   c04ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   c04ec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   c04f0:	4604      	mov	r4, r0
   c04f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   c04f4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c04f6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   c04f8:	f7ff fc96 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   c04fc:	a901      	add	r1, sp, #4
   c04fe:	4620      	mov	r0, r4
   c0500:	f7ff ffd8 	bl	c04b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   c0504:	b118      	cbz	r0, c050e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   c0506:	6863      	ldr	r3, [r4, #4]
   c0508:	b90b      	cbnz	r3, c050e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   c050a:	f7ff fddb 	bl	c00c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c050e:	a803      	add	r0, sp, #12
   c0510:	f7ff fec9 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   c0514:	b004      	add	sp, #16
   c0516:	bd10      	pop	{r4, pc}

000c0518 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   c0518:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   c051a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   c051e:	2318      	movs	r3, #24
   c0520:	4604      	mov	r4, r0
   c0522:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   c0526:	42ae      	cmp	r6, r5
   c0528:	d015      	beq.n	c0556 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   c052a:	f105 0110 	add.w	r1, r5, #16
   c052e:	4620      	mov	r0, r4
   c0530:	f7ff ffc0 	bl	c04b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   c0534:	6863      	ldr	r3, [r4, #4]
   c0536:	b90b      	cbnz	r3, c053c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   c0538:	f7ff fdc4 	bl	c00c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   c053c:	69e0      	ldr	r0, [r4, #28]
   c053e:	6929      	ldr	r1, [r5, #16]
   c0540:	6803      	ldr	r3, [r0, #0]
   c0542:	68db      	ldr	r3, [r3, #12]
   c0544:	4798      	blx	r3
        if (h.stream) {
   c0546:	6969      	ldr	r1, [r5, #20]
   c0548:	b119      	cbz	r1, c0552 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   c054a:	6a20      	ldr	r0, [r4, #32]
   c054c:	6803      	ldr	r3, [r0, #0]
   c054e:	68db      	ldr	r3, [r3, #12]
   c0550:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   c0552:	3518      	adds	r5, #24
   c0554:	e7e7      	b.n	c0526 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   c0556:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c055a:	2618      	movs	r6, #24
   c055c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c0560:	42ae      	cmp	r6, r5
   c0562:	d004      	beq.n	c056e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   c0564:	4628      	mov	r0, r5
   c0566:	f7fe f8ab 	bl	be6c0 <_ZN6StringD1Ev>
   c056a:	3518      	adds	r5, #24
   c056c:	e7f8      	b.n	c0560 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   c056e:	2300      	movs	r3, #0
   c0570:	6163      	str	r3, [r4, #20]
}
   c0572:	bd70      	pop	{r4, r5, r6, pc}

000c0574 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   c0574:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c0576:	4604      	mov	r4, r0
    resetSystemCallbacks();
   c0578:	f7ff fda4 	bl	c00c4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   c057c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   c0580:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c0582:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   c0584:	f7ff fc50 	bl	bfe28 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   c0588:	4620      	mov	r0, r4
   c058a:	f7ff ffc5 	bl	c0518 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   c058e:	a801      	add	r0, sp, #4
   c0590:	f7ff fe89 	bl	c02a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   c0594:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c0596:	b108      	cbz	r0, c059c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   c0598:	f7fd fbe6 	bl	bdd68 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   c059c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   c05a0:	2618      	movs	r6, #24
   c05a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   c05a6:	42ae      	cmp	r6, r5
   c05a8:	d004      	beq.n	c05b4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   c05aa:	4628      	mov	r0, r5
   c05ac:	f7fe f888 	bl	be6c0 <_ZN6StringD1Ev>
   c05b0:	3518      	adds	r5, #24
   c05b2:	e7f8      	b.n	c05a6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   c05b4:	6920      	ldr	r0, [r4, #16]
   c05b6:	f7fd fe6d 	bl	be294 <free>
   c05ba:	6820      	ldr	r0, [r4, #0]
   c05bc:	f7fd fe6a 	bl	be294 <free>
}
   c05c0:	4620      	mov	r0, r4
   c05c2:	b002      	add	sp, #8
   c05c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000c05c8 <__tcf_2>:
    static LogManager mgr;
   c05c8:	4801      	ldr	r0, [pc, #4]	; (c05d0 <__tcf_2+0x8>)
   c05ca:	f7ff bfd3 	b.w	c0574 <_ZN5spark10LogManagerD1Ev>
   c05ce:	bf00      	nop
   c05d0:	2003e654 	.word	0x2003e654

000c05d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   c05d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c05d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c05d8:	4604      	mov	r4, r0
   c05da:	460d      	mov	r5, r1
   c05dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c05de:	d915      	bls.n	c060c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   c05e0:	4290      	cmp	r0, r2
   c05e2:	d214      	bcs.n	c060e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   c05e4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   c05e8:	1a75      	subs	r5, r6, r1
   c05ea:	f1a1 0714 	sub.w	r7, r1, #20
   c05ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c05f0:	42b7      	cmp	r7, r6
   c05f2:	d01a      	beq.n	c062a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   c05f4:	b11c      	cbz	r4, c05fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   c05f6:	4631      	mov	r1, r6
   c05f8:	4620      	mov	r0, r4
   c05fa:	f7ff fc78 	bl	bfeee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   c05fe:	f106 0008 	add.w	r0, r6, #8
   c0602:	f7ff fdf9 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   c0606:	3e14      	subs	r6, #20
   c0608:	3c14      	subs	r4, #20
   c060a:	e7f1      	b.n	c05f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   c060c:	d00d      	beq.n	c062a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   c060e:	42b5      	cmp	r5, r6
   c0610:	d00b      	beq.n	c062a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   c0612:	b11c      	cbz	r4, c061c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   c0614:	4629      	mov	r1, r5
   c0616:	4620      	mov	r0, r4
   c0618:	f7ff fc69 	bl	bfeee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   c061c:	f105 0008 	add.w	r0, r5, #8
   c0620:	f7ff fdea 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   c0624:	3514      	adds	r5, #20
   c0626:	3414      	adds	r4, #20
   c0628:	e7f1      	b.n	c060e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   c062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c062c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   c062c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   c062e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0630:	4604      	mov	r4, r0
   c0632:	460d      	mov	r5, r1
   c0634:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   c0636:	d914      	bls.n	c0662 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   c0638:	4290      	cmp	r0, r2
   c063a:	d213      	bcs.n	c0664 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   c063c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   c0640:	1a75      	subs	r5, r6, r1
   c0642:	f1a1 0710 	sub.w	r7, r1, #16
   c0646:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   c0648:	42b7      	cmp	r7, r6
   c064a:	d018      	beq.n	c067e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   c064c:	b11c      	cbz	r4, c0656 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   c064e:	4631      	mov	r1, r6
   c0650:	4620      	mov	r0, r4
   c0652:	f7fe f8b1 	bl	be7b8 <_ZN6StringC1EOS_>
                end->~T();
   c0656:	4630      	mov	r0, r6
   c0658:	f7fe f832 	bl	be6c0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   c065c:	3e10      	subs	r6, #16
   c065e:	3c10      	subs	r4, #16
   c0660:	e7f2      	b.n	c0648 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   c0662:	d00c      	beq.n	c067e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   c0664:	42b5      	cmp	r5, r6
   c0666:	d00a      	beq.n	c067e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   c0668:	b11c      	cbz	r4, c0672 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   c066a:	4629      	mov	r1, r5
   c066c:	4620      	mov	r0, r4
   c066e:	f7fe f8a3 	bl	be7b8 <_ZN6StringC1EOS_>
                p->~T();
   c0672:	4628      	mov	r0, r5
   c0674:	f7fe f824 	bl	be6c0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   c0678:	3510      	adds	r5, #16
   c067a:	3410      	adds	r4, #16
   c067c:	e7f2      	b.n	c0664 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   c067e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c0680 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   c0680:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   c0682:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   c0684:	4605      	mov	r5, r0
        if (n > 0) {
   c0686:	dd11      	ble.n	c06ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   c0688:	0130      	lsls	r0, r6, #4
   c068a:	f7fd fdfb 	bl	be284 <malloc>
            if (!d) {
   c068e:	4604      	mov	r4, r0
   c0690:	b158      	cbz	r0, c06aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   c0692:	e9d5 1200 	ldrd	r1, r2, [r5]
   c0696:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   c069a:	f7ff ffc7 	bl	c062c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   c069e:	6828      	ldr	r0, [r5, #0]
   c06a0:	f7fd fdf8 	bl	be294 <free>
        data_ = d;
   c06a4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   c06a6:	60ae      	str	r6, [r5, #8]
        return true;
   c06a8:	2001      	movs	r0, #1
    }
   c06aa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   c06ac:	2400      	movs	r4, #0
   c06ae:	e7f6      	b.n	c069e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000c06b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c06b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c06b4:	4690      	mov	r8, r2
   c06b6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   c06b8:	2300      	movs	r3, #0
   c06ba:	9103      	str	r1, [sp, #12]
    return size_;
   c06bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   c06c0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c06c2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   c06c4:	4299      	cmp	r1, r3
        capacity_(0) {
   c06c6:	e9c0 3300 	strd	r3, r3, [r0]
   c06ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   c06ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   c06d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   c06d6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   c06d8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   c06da:	dc23      	bgt.n	c0724 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   c06dc:	e9d8 5700 	ldrd	r5, r7, [r8]
   c06e0:	2314      	movs	r3, #20
   c06e2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   c06e6:	42af      	cmp	r7, r5
   c06e8:	d03b      	beq.n	c0762 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   c06ea:	4629      	mov	r1, r5
   c06ec:	a80b      	add	r0, sp, #44	; 0x2c
   c06ee:	f7fe f863 	bl	be7b8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   c06f2:	a90b      	add	r1, sp, #44	; 0x2c
   c06f4:	a80f      	add	r0, sp, #60	; 0x3c
   c06f6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   c06f8:	f7fe f85e 	bl	be7b8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c06fc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   c0700:	4299      	cmp	r1, r3
   c0702:	da1b      	bge.n	c073c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   c0704:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   c0706:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   c0708:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   c070c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   c0710:	4631      	mov	r1, r6
   c0712:	f106 0010 	add.w	r0, r6, #16
   c0716:	f7ff ff89 	bl	c062c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   c071a:	b9ee      	cbnz	r6, c0758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   c071c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c071e:	3301      	adds	r3, #1
   c0720:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   c0722:	e011      	b.n	c0748 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   c0724:	a808      	add	r0, sp, #32
   c0726:	f7ff ffab 	bl	c0680 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c072a:	2800      	cmp	r0, #0
   c072c:	d1d6      	bne.n	c06dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   c072e:	a808      	add	r0, sp, #32
   c0730:	f7fe fc71 	bl	bf016 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   c0734:	4620      	mov	r0, r4
   c0736:	b015      	add	sp, #84	; 0x54
   c0738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c073c:	3101      	adds	r1, #1
   c073e:	a808      	add	r0, sp, #32
   c0740:	f7ff ff9e 	bl	c0680 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   c0744:	2800      	cmp	r0, #0
   c0746:	d1dd      	bne.n	c0704 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   c0748:	a80f      	add	r0, sp, #60	; 0x3c
   c074a:	f7fd ffb9 	bl	be6c0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   c074e:	a80b      	add	r0, sp, #44	; 0x2c
   c0750:	f7fd ffb6 	bl	be6c0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   c0754:	3514      	adds	r5, #20
   c0756:	e7c6      	b.n	c06e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   c0758:	a90f      	add	r1, sp, #60	; 0x3c
   c075a:	4630      	mov	r0, r6
   c075c:	f7fe f82c 	bl	be7b8 <_ZN6StringC1EOS_>
   c0760:	e7dc      	b.n	c071c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   c0762:	2600      	movs	r6, #0
   c0764:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   c0768:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   c076a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   c076e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   c0772:	429e      	cmp	r6, r3
   c0774:	da7c      	bge.n	c0870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   c0776:	0133      	lsls	r3, r6, #4
   c0778:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   c077a:	9306      	str	r3, [sp, #24]
        if (!category) {
   c077c:	b90b      	cbnz	r3, c0782 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   c077e:	3601      	adds	r6, #1
   c0780:	e7f5      	b.n	c076e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   c0782:	2300      	movs	r3, #0
   c0784:	9307      	str	r3, [sp, #28]
   c0786:	fb09 f306 	mul.w	r3, r9, r6
   c078a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   c078c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   c078e:	a907      	add	r1, sp, #28
   c0790:	a806      	add	r0, sp, #24
   c0792:	f7ff fb22 	bl	bfdda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   c0796:	4682      	mov	sl, r0
   c0798:	2800      	cmp	r0, #0
   c079a:	d0f0      	beq.n	c077e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   c079c:	f04f 0300 	mov.w	r3, #0
   c07a0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c07a4:	4601      	mov	r1, r0
   c07a6:	9a07      	ldr	r2, [sp, #28]
   c07a8:	f10d 0317 	add.w	r3, sp, #23
   c07ac:	4628      	mov	r0, r5
   c07ae:	f7ff fbb1 	bl	bff14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c07b2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   c07b6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c07b8:	2f00      	cmp	r7, #0
   c07ba:	d14a      	bne.n	c0852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   c07bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   c07c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   c07c4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   c07c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c07cc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   c07d0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   c07d4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   c07d6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   c07da:	4293      	cmp	r3, r2
   c07dc:	db17      	blt.n	c080e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   c07de:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   c07e2:	f1ba 0f00 	cmp.w	sl, #0
   c07e6:	dd30      	ble.n	c084a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   c07e8:	fb09 f00a 	mul.w	r0, r9, sl
   c07ec:	f7fd fd4a 	bl	be284 <malloc>
            if (!d) {
   c07f0:	4683      	mov	fp, r0
   c07f2:	b360      	cbz	r0, c084e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   c07f4:	e9d5 1200 	ldrd	r1, r2, [r5]
   c07f8:	fb09 1202 	mla	r2, r9, r2, r1
   c07fc:	f7ff feea 	bl	c05d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   c0800:	6828      	ldr	r0, [r5, #0]
   c0802:	f7fd fd47 	bl	be294 <free>
        data_ = d;
   c0806:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   c080a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   c080e:	682b      	ldr	r3, [r5, #0]
   c0810:	9a01      	ldr	r2, [sp, #4]
   c0812:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   c0816:	686a      	ldr	r2, [r5, #4]
   c0818:	4651      	mov	r1, sl
   c081a:	fb09 3202 	mla	r2, r9, r2, r3
   c081e:	f10a 0014 	add.w	r0, sl, #20
   c0822:	f7ff fed7 	bl	c05d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   c0826:	f1ba 0f00 	cmp.w	sl, #0
   c082a:	d003      	beq.n	c0834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   c082c:	a90f      	add	r1, sp, #60	; 0x3c
   c082e:	4650      	mov	r0, sl
   c0830:	f7ff fb5d 	bl	bfeee <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   c0834:	686b      	ldr	r3, [r5, #4]
   c0836:	3301      	adds	r3, #1
   c0838:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   c083a:	a811      	add	r0, sp, #68	; 0x44
   c083c:	f7ff fcdc 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c0840:	b13f      	cbz	r7, c0852 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   c0842:	a80b      	add	r0, sp, #44	; 0x2c
   c0844:	f7ff fcd8 	bl	c01f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   c0848:	e771      	b.n	c072e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   c084a:	46bb      	mov	fp, r7
   c084c:	e7d8      	b.n	c0800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   c084e:	2701      	movs	r7, #1
   c0850:	e7f3      	b.n	c083a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   c0852:	9b01      	ldr	r3, [sp, #4]
   c0854:	682d      	ldr	r5, [r5, #0]
   c0856:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   c085a:	9b06      	ldr	r3, [sp, #24]
   c085c:	781b      	ldrb	r3, [r3, #0]
   c085e:	b92b      	cbnz	r3, c086c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   c0860:	f8d8 3000 	ldr.w	r3, [r8]
   c0864:	9a02      	ldr	r2, [sp, #8]
   c0866:	4413      	add	r3, r2
   c0868:	7c1b      	ldrb	r3, [r3, #16]
   c086a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   c086c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   c086e:	e78e      	b.n	c078e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0870:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   c0872:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0874:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0876:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0878:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c087a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   c087c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   c087e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0880:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   c0882:	60a2      	str	r2, [r4, #8]
   c0884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   c0886:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0888:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   c088a:	60e2      	str	r2, [r4, #12]
   c088c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   c088e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c0890:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   c0892:	6122      	str	r2, [r4, #16]
   c0894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   c0896:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   c0898:	9b03      	ldr	r3, [sp, #12]
   c089a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   c089c:	6162      	str	r2, [r4, #20]
   c089e:	7623      	strb	r3, [r4, #24]
   c08a0:	e7cf      	b.n	c0842 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000c08a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c08a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   c08a6:	4604      	mov	r4, r0
   c08a8:	b087      	sub	sp, #28
   c08aa:	460d      	mov	r5, r1
        filter_(level, filters) {
   c08ac:	4626      	mov	r6, r4
        stream_(&stream) {
   c08ae:	4619      	mov	r1, r3
   c08b0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   c08b2:	4617      	mov	r7, r2
        stream_(&stream) {
   c08b4:	f7f5 ff4a 	bl	b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   c08b8:	4b0b      	ldr	r3, [pc, #44]	; (c08e8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   c08ba:	f846 3b04 	str.w	r3, [r6], #4
   c08be:	4669      	mov	r1, sp
   c08c0:	a803      	add	r0, sp, #12
   c08c2:	f7f5 ff43 	bl	b674c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   c08c6:	aa03      	add	r2, sp, #12
   c08c8:	4639      	mov	r1, r7
   c08ca:	4630      	mov	r0, r6
   c08cc:	f7ff fef0 	bl	c06b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c08d0:	a803      	add	r0, sp, #12
   c08d2:	f7f5 febf 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   c08d6:	4668      	mov	r0, sp
   c08d8:	f7f5 febc 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c08dc:	4b03      	ldr	r3, [pc, #12]	; (c08ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   c08de:	6023      	str	r3, [r4, #0]
}
   c08e0:	4620      	mov	r0, r4
        stream_(&stream) {
   c08e2:	6225      	str	r5, [r4, #32]
}
   c08e4:	b007      	add	sp, #28
   c08e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c08e8:	000c6d64 	.word	0x000c6d64
   c08ec:	000c7ecc 	.word	0x000c7ecc

000c08f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   c08f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   c08f2:	460f      	mov	r7, r1
   c08f4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c08f6:	491d      	ldr	r1, [pc, #116]	; (c096c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   c08f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c08fa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   c08fc:	4616      	mov	r6, r2
   c08fe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   c0900:	f003 fe96 	bl	c4630 <strcmp>
   c0904:	b9c0      	cbnz	r0, c0938 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   c0906:	b1a4      	cbz	r4, c0932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   c0908:	4629      	mov	r1, r5
   c090a:	a801      	add	r0, sp, #4
   c090c:	f7ff fcbc 	bl	c0288 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c0910:	4917      	ldr	r1, [pc, #92]	; (c0970 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0912:	2024      	movs	r0, #36	; 0x24
   c0914:	f001 fc06 	bl	c2124 <_ZnwjRKSt9nothrow_t>
   c0918:	4605      	mov	r5, r0
   c091a:	b130      	cbz	r0, c092a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   c091c:	ab01      	add	r3, sp, #4
   c091e:	4632      	mov	r2, r6
   c0920:	4621      	mov	r1, r4
   c0922:	f7ff ffbf 	bl	c08a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0926:	4b13      	ldr	r3, [pc, #76]	; (c0974 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   c0928:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c092a:	a801      	add	r0, sp, #4
   c092c:	f7f5 fe92 	bl	b6654 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   c0930:	462c      	mov	r4, r5
}
   c0932:	4620      	mov	r0, r4
   c0934:	b005      	add	sp, #20
   c0936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   c0938:	490f      	ldr	r1, [pc, #60]	; (c0978 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   c093a:	4638      	mov	r0, r7
   c093c:	f003 fe78 	bl	c4630 <strcmp>
   c0940:	b990      	cbnz	r0, c0968 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   c0942:	2c00      	cmp	r4, #0
   c0944:	d0f5      	beq.n	c0932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   c0946:	4629      	mov	r1, r5
   c0948:	a801      	add	r0, sp, #4
   c094a:	f7ff fc9d 	bl	c0288 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   c094e:	4908      	ldr	r1, [pc, #32]	; (c0970 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   c0950:	2024      	movs	r0, #36	; 0x24
   c0952:	f001 fbe7 	bl	c2124 <_ZnwjRKSt9nothrow_t>
   c0956:	4605      	mov	r5, r0
   c0958:	2800      	cmp	r0, #0
   c095a:	d0e6      	beq.n	c092a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   c095c:	ab01      	add	r3, sp, #4
   c095e:	4632      	mov	r2, r6
   c0960:	4621      	mov	r1, r4
   c0962:	f7ff ff9f 	bl	c08a4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   c0966:	e7e0      	b.n	c092a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   c0968:	2400      	movs	r4, #0
   c096a:	e7e2      	b.n	c0932 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   c096c:	000c7e4e 	.word	0x000c7e4e
   c0970:	000c8079 	.word	0x000c8079
   c0974:	000c7ee4 	.word	0x000c7ee4
   c0978:	000c7e52 	.word	0x000c7e52

000c097c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   c097c:	4b01      	ldr	r3, [pc, #4]	; (c0984 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c097e:	4a02      	ldr	r2, [pc, #8]	; (c0988 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c0980:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c0982:	4770      	bx	lr
   c0984:	2003e650 	.word	0x2003e650
   c0988:	000c7e63 	.word	0x000c7e63

000c098c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c0990:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   c0992:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0996:	4604      	mov	r4, r0
   c0998:	460e      	mov	r6, r1
   c099a:	4617      	mov	r7, r2
   c099c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   c099e:	f000 fe95 	bl	c16cc <_Z16_fetch_usbserialv>
   c09a2:	4581      	cmp	r9, r0
   c09a4:	d04c      	beq.n	c0a40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   c09a6:	792b      	ldrb	r3, [r5, #4]
   c09a8:	0719      	lsls	r1, r3, #28
   c09aa:	d504      	bpl.n	c09b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   c09ac:	696a      	ldr	r2, [r5, #20]
   c09ae:	4954      	ldr	r1, [pc, #336]	; (c0b00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   c09b0:	4620      	mov	r0, r4
   c09b2:	f7ff fa8d 	bl	bfed0 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   c09b6:	f1b8 0f00 	cmp.w	r8, #0
   c09ba:	d00d      	beq.n	c09d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   c09bc:	215b      	movs	r1, #91	; 0x5b
   c09be:	4620      	mov	r0, r4
   c09c0:	f7ff fa7a 	bl	bfeb8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   c09c4:	4641      	mov	r1, r8
   c09c6:	4620      	mov	r0, r4
   c09c8:	f7ff fa67 	bl	bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   c09cc:	6823      	ldr	r3, [r4, #0]
   c09ce:	494d      	ldr	r1, [pc, #308]	; (c0b04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   c09d0:	68db      	ldr	r3, [r3, #12]
   c09d2:	2202      	movs	r2, #2
   c09d4:	4620      	mov	r0, r4
   c09d6:	4798      	blx	r3
    if (attr.has_file) {
   c09d8:	792b      	ldrb	r3, [r5, #4]
   c09da:	07da      	lsls	r2, r3, #31
   c09dc:	d523      	bpl.n	c0a26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   c09de:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   c09e2:	212f      	movs	r1, #47	; 0x2f
   c09e4:	4640      	mov	r0, r8
   c09e6:	f003 fea0 	bl	c472a <strrchr>
    if (s1) {
   c09ea:	b108      	cbz	r0, c09f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   c09ec:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   c09f0:	4641      	mov	r1, r8
   c09f2:	4620      	mov	r0, r4
   c09f4:	f7ff fa51 	bl	bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   c09f8:	792b      	ldrb	r3, [r5, #4]
   c09fa:	079b      	lsls	r3, r3, #30
   c09fc:	d508      	bpl.n	c0a10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   c09fe:	213a      	movs	r1, #58	; 0x3a
   c0a00:	4620      	mov	r0, r4
   c0a02:	f7ff fa59 	bl	bfeb8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   c0a06:	68ea      	ldr	r2, [r5, #12]
   c0a08:	493f      	ldr	r1, [pc, #252]	; (c0b08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   c0a0a:	4620      	mov	r0, r4
   c0a0c:	f7ff fa60 	bl	bfed0 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   c0a10:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   c0a12:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   c0a14:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   c0a18:	68db      	ldr	r3, [r3, #12]
   c0a1a:	bf14      	ite	ne
   c0a1c:	493b      	ldrne	r1, [pc, #236]	; (c0b0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   c0a1e:	493c      	ldreq	r1, [pc, #240]	; (c0b10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   c0a20:	2202      	movs	r2, #2
            write(": ", 2);
   c0a22:	4620      	mov	r0, r4
   c0a24:	4798      	blx	r3
    if (attr.has_function) {
   c0a26:	792b      	ldrb	r3, [r5, #4]
   c0a28:	0758      	lsls	r0, r3, #29
   c0a2a:	d51d      	bpl.n	c0a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0a2c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0a2e:	460b      	mov	r3, r1
   c0a30:	461a      	mov	r2, r3
    for (; *s; ++s) {
   c0a32:	f813 0b01 	ldrb.w	r0, [r3], #1
   c0a36:	b160      	cbz	r0, c0a52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   c0a38:	2820      	cmp	r0, #32
   c0a3a:	d108      	bne.n	c0a4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   c0a3c:	4619      	mov	r1, r3
   c0a3e:	e7f7      	b.n	c0a30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   c0a40:	4834      	ldr	r0, [pc, #208]	; (c0b14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   c0a42:	f001 f80e 	bl	c1a62 <_ZN5spark12NetworkClass9listeningEv>
   c0a46:	2800      	cmp	r0, #0
   c0a48:	d0ad      	beq.n	c09a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   c0a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   c0a4e:	2828      	cmp	r0, #40	; 0x28
   c0a50:	d1ee      	bne.n	c0a30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   c0a52:	6823      	ldr	r3, [r4, #0]
   c0a54:	1a52      	subs	r2, r2, r1
   c0a56:	68db      	ldr	r3, [r3, #12]
   c0a58:	4620      	mov	r0, r4
   c0a5a:	4798      	blx	r3
        write("(): ", 4);
   c0a5c:	6823      	ldr	r3, [r4, #0]
   c0a5e:	492e      	ldr	r1, [pc, #184]	; (c0b18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   c0a60:	68db      	ldr	r3, [r3, #12]
   c0a62:	2204      	movs	r2, #4
   c0a64:	4620      	mov	r0, r4
   c0a66:	4798      	blx	r3
    return log_level_name(level, nullptr);
   c0a68:	2100      	movs	r1, #0
   c0a6a:	4638      	mov	r0, r7
   c0a6c:	f7fd fb0c 	bl	be088 <log_level_name>
   c0a70:	4601      	mov	r1, r0
    write(s);
   c0a72:	4620      	mov	r0, r4
   c0a74:	f7ff fa11 	bl	bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   c0a78:	6823      	ldr	r3, [r4, #0]
   c0a7a:	4925      	ldr	r1, [pc, #148]	; (c0b10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   c0a7c:	68db      	ldr	r3, [r3, #12]
   c0a7e:	2202      	movs	r2, #2
   c0a80:	4620      	mov	r0, r4
   c0a82:	4798      	blx	r3
    if (msg) {
   c0a84:	b11e      	cbz	r6, c0a8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   c0a86:	4631      	mov	r1, r6
   c0a88:	4620      	mov	r0, r4
   c0a8a:	f7ff fa06 	bl	bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   c0a8e:	792b      	ldrb	r3, [r5, #4]
   c0a90:	f013 0f30 	tst.w	r3, #48	; 0x30
   c0a94:	d02c      	beq.n	c0af0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   c0a96:	6823      	ldr	r3, [r4, #0]
   c0a98:	4920      	ldr	r1, [pc, #128]	; (c0b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   c0a9a:	68db      	ldr	r3, [r3, #12]
   c0a9c:	2202      	movs	r2, #2
   c0a9e:	4620      	mov	r0, r4
   c0aa0:	4798      	blx	r3
        if (attr.has_code) {
   c0aa2:	792b      	ldrb	r3, [r5, #4]
   c0aa4:	06d9      	lsls	r1, r3, #27
   c0aa6:	d50a      	bpl.n	c0abe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   c0aa8:	6823      	ldr	r3, [r4, #0]
   c0aaa:	491d      	ldr	r1, [pc, #116]	; (c0b20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   c0aac:	68db      	ldr	r3, [r3, #12]
   c0aae:	2207      	movs	r2, #7
   c0ab0:	4620      	mov	r0, r4
   c0ab2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   c0ab4:	69aa      	ldr	r2, [r5, #24]
   c0ab6:	491b      	ldr	r1, [pc, #108]	; (c0b24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   c0ab8:	4620      	mov	r0, r4
   c0aba:	f7ff fa09 	bl	bfed0 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   c0abe:	792b      	ldrb	r3, [r5, #4]
   c0ac0:	069a      	lsls	r2, r3, #26
   c0ac2:	d511      	bpl.n	c0ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   c0ac4:	06db      	lsls	r3, r3, #27
   c0ac6:	d505      	bpl.n	c0ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   c0ac8:	6823      	ldr	r3, [r4, #0]
   c0aca:	4910      	ldr	r1, [pc, #64]	; (c0b0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   c0acc:	68db      	ldr	r3, [r3, #12]
   c0ace:	2202      	movs	r2, #2
   c0ad0:	4620      	mov	r0, r4
   c0ad2:	4798      	blx	r3
            write("details = ", 10);
   c0ad4:	6823      	ldr	r3, [r4, #0]
   c0ad6:	4914      	ldr	r1, [pc, #80]	; (c0b28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   c0ad8:	68db      	ldr	r3, [r3, #12]
   c0ada:	4620      	mov	r0, r4
   c0adc:	220a      	movs	r2, #10
   c0ade:	4798      	blx	r3
            write(attr.details);
   c0ae0:	69e9      	ldr	r1, [r5, #28]
   c0ae2:	4620      	mov	r0, r4
   c0ae4:	f7ff f9d9 	bl	bfe9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   c0ae8:	215d      	movs	r1, #93	; 0x5d
   c0aea:	4620      	mov	r0, r4
   c0aec:	f7ff f9e4 	bl	bfeb8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   c0af0:	6823      	ldr	r3, [r4, #0]
   c0af2:	490e      	ldr	r1, [pc, #56]	; (c0b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   c0af4:	68db      	ldr	r3, [r3, #12]
   c0af6:	4620      	mov	r0, r4
   c0af8:	2202      	movs	r2, #2
}
   c0afa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   c0afe:	4718      	bx	r3
   c0b00:	000c7e67 	.word	0x000c7e67
   c0b04:	000c7e6e 	.word	0x000c7e6e
   c0b08:	000c68f4 	.word	0x000c68f4
   c0b0c:	000c7e71 	.word	0x000c7e71
   c0b10:	000c7e76 	.word	0x000c7e76
   c0b14:	2003e720 	.word	0x2003e720
   c0b18:	000c7e74 	.word	0x000c7e74
   c0b1c:	000c7e79 	.word	0x000c7e79
   c0b20:	000c7e7c 	.word	0x000c7e7c
   c0b24:	000c7e84 	.word	0x000c7e84
   c0b28:	000c7e87 	.word	0x000c7e87
   c0b2c:	000c7e92 	.word	0x000c7e92

000c0b30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   c0b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c0b34:	b085      	sub	sp, #20
    return stream_;
   c0b36:	f8d0 9020 	ldr.w	r9, [r0, #32]
   c0b3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c0b3c:	4605      	mov	r5, r0
   c0b3e:	460f      	mov	r7, r1
   c0b40:	4690      	mov	r8, r2
   c0b42:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   c0b44:	f000 fdc2 	bl	c16cc <_Z16_fetch_usbserialv>
   c0b48:	4581      	cmp	r9, r0
   c0b4a:	d105      	bne.n	c0b58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   c0b4c:	4849      	ldr	r0, [pc, #292]	; (c0c74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   c0b4e:	f000 ff88 	bl	c1a62 <_ZN5spark12NetworkClass9listeningEv>
   c0b52:	2800      	cmp	r0, #0
   c0b54:	f040 808a 	bne.w	c0c6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   c0b58:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   c0b5a:	4a47      	ldr	r2, [pc, #284]	; (c0c78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   c0b5c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   c0b5e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   c0b62:	a801      	add	r0, sp, #4
        strm_(stream) {
   c0b64:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   c0b66:	f88d 9008 	strb.w	r9, [sp, #8]
   c0b6a:	f001 f91e 	bl	c1daa <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   c0b6e:	4649      	mov	r1, r9
   c0b70:	4640      	mov	r0, r8
   c0b72:	f7fd fa89 	bl	be088 <log_level_name>
    json.name("l", 1).value(s);
   c0b76:	4941      	ldr	r1, [pc, #260]	; (c0c7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   c0b78:	4680      	mov	r8, r0
   c0b7a:	2201      	movs	r2, #1
   c0b7c:	a801      	add	r0, sp, #4
   c0b7e:	f001 f9a3 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b82:	4641      	mov	r1, r8
   c0b84:	f7ff f97b 	bl	bfe7e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   c0b88:	b13f      	cbz	r7, c0b9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   c0b8a:	493d      	ldr	r1, [pc, #244]	; (c0c80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   c0b8c:	2201      	movs	r2, #1
   c0b8e:	a801      	add	r0, sp, #4
   c0b90:	f001 f99a 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0b94:	4639      	mov	r1, r7
   c0b96:	f7ff f972 	bl	bfe7e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   c0b9a:	b13e      	cbz	r6, c0bac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   c0b9c:	4939      	ldr	r1, [pc, #228]	; (c0c84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   c0b9e:	2201      	movs	r2, #1
   c0ba0:	a801      	add	r0, sp, #4
   c0ba2:	f001 f991 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0ba6:	4631      	mov	r1, r6
   c0ba8:	f7ff f969 	bl	bfe7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   c0bac:	7923      	ldrb	r3, [r4, #4]
   c0bae:	07df      	lsls	r7, r3, #31
   c0bb0:	d50e      	bpl.n	c0bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   c0bb2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   c0bb4:	212f      	movs	r1, #47	; 0x2f
   c0bb6:	4630      	mov	r0, r6
   c0bb8:	f003 fdb7 	bl	c472a <strrchr>
    if (s1) {
   c0bbc:	b100      	cbz	r0, c0bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   c0bbe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   c0bc0:	4931      	ldr	r1, [pc, #196]	; (c0c88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   c0bc2:	2201      	movs	r2, #1
   c0bc4:	a801      	add	r0, sp, #4
   c0bc6:	f001 f97f 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0bca:	4631      	mov	r1, r6
   c0bcc:	f7ff f957 	bl	bfe7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   c0bd0:	7923      	ldrb	r3, [r4, #4]
   c0bd2:	079e      	lsls	r6, r3, #30
   c0bd4:	d507      	bpl.n	c0be6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   c0bd6:	492d      	ldr	r1, [pc, #180]	; (c0c8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   c0bd8:	2202      	movs	r2, #2
   c0bda:	a801      	add	r0, sp, #4
   c0bdc:	f001 f974 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0be0:	68e1      	ldr	r1, [r4, #12]
   c0be2:	f001 f8ef 	bl	c1dc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   c0be6:	7923      	ldrb	r3, [r4, #4]
   c0be8:	0758      	lsls	r0, r3, #29
   c0bea:	d514      	bpl.n	c0c16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   c0bec:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   c0bee:	4633      	mov	r3, r6
   c0bf0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   c0bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
   c0bf6:	b12a      	cbz	r2, c0c04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   c0bf8:	2a20      	cmp	r2, #32
   c0bfa:	d101      	bne.n	c0c00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   c0bfc:	461e      	mov	r6, r3
   c0bfe:	e7f7      	b.n	c0bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   c0c00:	2a28      	cmp	r2, #40	; 0x28
   c0c02:	d1f5      	bne.n	c0bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   c0c04:	4922      	ldr	r1, [pc, #136]	; (c0c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   c0c06:	2202      	movs	r2, #2
   c0c08:	a801      	add	r0, sp, #4
   c0c0a:	f001 f95d 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c0e:	1bba      	subs	r2, r7, r6
   c0c10:	4631      	mov	r1, r6
   c0c12:	f001 f969 	bl	c1ee8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   c0c16:	7923      	ldrb	r3, [r4, #4]
   c0c18:	0719      	lsls	r1, r3, #28
   c0c1a:	d507      	bpl.n	c0c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   c0c1c:	491d      	ldr	r1, [pc, #116]	; (c0c94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   c0c1e:	2201      	movs	r2, #1
   c0c20:	a801      	add	r0, sp, #4
   c0c22:	f001 f951 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c26:	6961      	ldr	r1, [r4, #20]
   c0c28:	f001 f8de 	bl	c1de8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   c0c2c:	7923      	ldrb	r3, [r4, #4]
   c0c2e:	06da      	lsls	r2, r3, #27
   c0c30:	d508      	bpl.n	c0c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   c0c32:	2204      	movs	r2, #4
   c0c34:	4918      	ldr	r1, [pc, #96]	; (c0c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   c0c36:	eb0d 0002 	add.w	r0, sp, r2
   c0c3a:	f001 f945 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c3e:	69a1      	ldr	r1, [r4, #24]
   c0c40:	f001 f8c0 	bl	c1dc4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   c0c44:	7923      	ldrb	r3, [r4, #4]
   c0c46:	069b      	lsls	r3, r3, #26
   c0c48:	d507      	bpl.n	c0c5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   c0c4a:	4914      	ldr	r1, [pc, #80]	; (c0c9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   c0c4c:	2206      	movs	r2, #6
   c0c4e:	a801      	add	r0, sp, #4
   c0c50:	f001 f93a 	bl	c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>
   c0c54:	69e1      	ldr	r1, [r4, #28]
   c0c56:	f7ff f912 	bl	bfe7e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   c0c5a:	a801      	add	r0, sp, #4
   c0c5c:	f001 f88f 	bl	c1d7e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   c0c60:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   c0c62:	490f      	ldr	r1, [pc, #60]	; (c0ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   c0c64:	6803      	ldr	r3, [r0, #0]
   c0c66:	2202      	movs	r2, #2
   c0c68:	68db      	ldr	r3, [r3, #12]
   c0c6a:	4798      	blx	r3
}
   c0c6c:	b005      	add	sp, #20
   c0c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c0c72:	bf00      	nop
   c0c74:	2003e720 	.word	0x2003e720
   c0c78:	000c7eb4 	.word	0x000c7eb4
   c0c7c:	000c7e44 	.word	0x000c7e44
   c0c80:	000c7e95 	.word	0x000c7e95
   c0c84:	000c88fe 	.word	0x000c88fe
   c0c88:	000c6975 	.word	0x000c6975
   c0c8c:	000c7e97 	.word	0x000c7e97
   c0c90:	000c7e9a 	.word	0x000c7e9a
   c0c94:	000c6b78 	.word	0x000c6b78
   c0c98:	000c7e9d 	.word	0x000c7e9d
   c0c9c:	000c7ea2 	.word	0x000c7ea2
   c0ca0:	000c7e92 	.word	0x000c7e92

000c0ca4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c0ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c0ca8:	4a15      	ldr	r2, [pc, #84]	; (c0d00 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c0caa:	f8df 8060 	ldr.w	r8, [pc, #96]	; c0d0c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c0cae:	e9d2 6300 	ldrd	r6, r3, [r2]
   c0cb2:	1980      	adds	r0, r0, r6
   c0cb4:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c0cb8:	4b12      	ldr	r3, [pc, #72]	; (c0d04 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c0cba:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c0cbe:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c0cc2:	1986      	adds	r6, r0, r6
   c0cc4:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c0cc8:	42bb      	cmp	r3, r7
   c0cca:	bf08      	it	eq
   c0ccc:	42b2      	cmpeq	r2, r6
{
   c0cce:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c0cd0:	d013      	beq.n	c0cfa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c0cd2:	a903      	add	r1, sp, #12
   c0cd4:	4668      	mov	r0, sp
   c0cd6:	e9cd 6700 	strd	r6, r7, [sp]
   c0cda:	f7fd fb33 	bl	be344 <localtime_r>
	calendar_time.tm_year += 1900;
   c0cde:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ce0:	4d09      	ldr	r5, [pc, #36]	; (c0d08 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c0ce2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0ce6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c0ce8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c0cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c0cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c0cf2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c0cf6:	6823      	ldr	r3, [r4, #0]
   c0cf8:	602b      	str	r3, [r5, #0]
    }
}
   c0cfa:	b00c      	add	sp, #48	; 0x30
   c0cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c0d00:	2003e6b0 	.word	0x2003e6b0
   c0d04:	2003e6a8 	.word	0x2003e6a8
   c0d08:	2003e680 	.word	0x2003e680
   c0d0c:	2003e6b8 	.word	0x2003e6b8

000c0d10 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   c0d10:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0d12:	2000      	movs	r0, #0
   c0d14:	f7fd faa6 	bl	be264 <spark_sync_time_pending>
   c0d18:	b128      	cbz	r0, c0d26 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c0d1a:	f7fd fa8b 	bl	be234 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0d1e:	f080 0001 	eor.w	r0, r0, #1
   c0d22:	b2c0      	uxtb	r0, r0
    }
   c0d24:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c0d26:	2001      	movs	r0, #1
   c0d28:	e7fc      	b.n	c0d24 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c0d2c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c0d2c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c0d2e:	f7ff ffb9 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c0d32:	4b02      	ldr	r3, [pc, #8]	; (c0d3c <_ZN9TimeClass5monthEx+0x10>)
   c0d34:	6918      	ldr	r0, [r3, #16]
}
   c0d36:	3001      	adds	r0, #1
   c0d38:	bd08      	pop	{r3, pc}
   c0d3a:	bf00      	nop
   c0d3c:	2003e680 	.word	0x2003e680

000c0d40 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c0d40:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c0d42:	2000      	movs	r0, #0
   c0d44:	f7fc ff46 	bl	bdbd4 <hal_rtc_time_is_valid>
    if (rtcstate)
   c0d48:	4604      	mov	r4, r0
   c0d4a:	b9a0      	cbnz	r0, c0d76 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c0d4c:	f7fd f9b6 	bl	be0bc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c0d50:	2801      	cmp	r0, #1
   c0d52:	d110      	bne.n	c0d76 <_ZN9TimeClass7isValidEv+0x36>
   c0d54:	4620      	mov	r0, r4
   c0d56:	f7fd f9d9 	bl	be10c <system_thread_get_state>
   c0d5a:	b960      	cbnz	r0, c0d76 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c0d5c:	f7ff ffd8 	bl	c0d10 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c0d60:	b910      	cbnz	r0, c0d68 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c0d62:	f7fd fa5f 	bl	be224 <spark_process>
        while (_while() && !_condition()) {
   c0d66:	e7f9      	b.n	c0d5c <_ZN9TimeClass7isValidEv+0x1c>
   c0d68:	f7ff ffd2 	bl	c0d10 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c0d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c0d70:	2000      	movs	r0, #0
   c0d72:	f7fc bf2f 	b.w	bdbd4 <hal_rtc_time_is_valid>
}
   c0d76:	4620      	mov	r0, r4
   c0d78:	bd10      	pop	{r4, pc}

000c0d7a <_ZN9TimeClass3nowEv>:
{
   c0d7a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c0d7c:	f7ff ffe0 	bl	c0d40 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c0d80:	2210      	movs	r2, #16
   c0d82:	2100      	movs	r1, #0
   c0d84:	4668      	mov	r0, sp
   c0d86:	f003 fbf7 	bl	c4578 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c0d8a:	2100      	movs	r1, #0
   c0d8c:	4668      	mov	r0, sp
   c0d8e:	f7fc ff29 	bl	bdbe4 <hal_rtc_get_time>
}
   c0d92:	9800      	ldr	r0, [sp, #0]
   c0d94:	b005      	add	sp, #20
   c0d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0d9c <_ZN9TimeClass4hourEv>:
{
   c0d9c:	b508      	push	{r3, lr}
	return hour(now());
   c0d9e:	f7ff ffec 	bl	c0d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0da2:	17c1      	asrs	r1, r0, #31
   c0da4:	f7ff ff7e 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
}
   c0da8:	4b01      	ldr	r3, [pc, #4]	; (c0db0 <_ZN9TimeClass4hourEv+0x14>)
   c0daa:	6898      	ldr	r0, [r3, #8]
   c0dac:	bd08      	pop	{r3, pc}
   c0dae:	bf00      	nop
   c0db0:	2003e680 	.word	0x2003e680

000c0db4 <_ZN9TimeClass6minuteEv>:
{
   c0db4:	b508      	push	{r3, lr}
	return minute(now());
   c0db6:	f7ff ffe0 	bl	c0d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0dba:	17c1      	asrs	r1, r0, #31
   c0dbc:	f7ff ff72 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
}
   c0dc0:	4b01      	ldr	r3, [pc, #4]	; (c0dc8 <_ZN9TimeClass6minuteEv+0x14>)
   c0dc2:	6858      	ldr	r0, [r3, #4]
   c0dc4:	bd08      	pop	{r3, pc}
   c0dc6:	bf00      	nop
   c0dc8:	2003e680 	.word	0x2003e680

000c0dcc <_ZN9TimeClass6secondEv>:
{
   c0dcc:	b508      	push	{r3, lr}
	return second(now());
   c0dce:	f7ff ffd4 	bl	c0d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0dd2:	17c1      	asrs	r1, r0, #31
   c0dd4:	f7ff ff66 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
}
   c0dd8:	4b01      	ldr	r3, [pc, #4]	; (c0de0 <_ZN9TimeClass6secondEv+0x14>)
   c0dda:	6818      	ldr	r0, [r3, #0]
   c0ddc:	bd08      	pop	{r3, pc}
   c0dde:	bf00      	nop
   c0de0:	2003e680 	.word	0x2003e680

000c0de4 <_ZN9TimeClass3dayEv>:
{
   c0de4:	b508      	push	{r3, lr}
	return day(now());
   c0de6:	f7ff ffc8 	bl	c0d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0dea:	17c1      	asrs	r1, r0, #31
   c0dec:	f7ff ff5a 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
}
   c0df0:	4b01      	ldr	r3, [pc, #4]	; (c0df8 <_ZN9TimeClass3dayEv+0x14>)
   c0df2:	68d8      	ldr	r0, [r3, #12]
   c0df4:	bd08      	pop	{r3, pc}
   c0df6:	bf00      	nop
   c0df8:	2003e680 	.word	0x2003e680

000c0dfc <_ZN9TimeClass5monthEv>:
{
   c0dfc:	b508      	push	{r3, lr}
	return month(now());
   c0dfe:	f7ff ffbc 	bl	c0d7a <_ZN9TimeClass3nowEv>
}
   c0e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c0e06:	17c1      	asrs	r1, r0, #31
   c0e08:	f7ff bf90 	b.w	c0d2c <_ZN9TimeClass5monthEx>

000c0e0c <_ZN9TimeClass4yearEv>:
{
   c0e0c:	b508      	push	{r3, lr}
	return year(now());
   c0e0e:	f7ff ffb4 	bl	c0d7a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c0e12:	17c1      	asrs	r1, r0, #31
   c0e14:	f7ff ff46 	bl	c0ca4 <_ZL22Refresh_UnixTime_Cachex>
}
   c0e18:	4b01      	ldr	r3, [pc, #4]	; (c0e20 <_ZN9TimeClass4yearEv+0x14>)
   c0e1a:	6958      	ldr	r0, [r3, #20]
   c0e1c:	bd08      	pop	{r3, pc}
   c0e1e:	bf00      	nop
   c0e20:	2003e680 	.word	0x2003e680

000c0e24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c0e24:	4b02      	ldr	r3, [pc, #8]	; (c0e30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c0e26:	681a      	ldr	r2, [r3, #0]
   c0e28:	4b02      	ldr	r3, [pc, #8]	; (c0e34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0e2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0e2c:	4770      	bx	lr
   c0e2e:	bf00      	nop
   c0e30:	2003db48 	.word	0x2003db48
   c0e34:	2003e67c 	.word	0x2003e67c

000c0e38 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   c0e38:	428a      	cmp	r2, r1
{
   c0e3a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   c0e3c:	d007      	beq.n	c0e4e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   c0e3e:	1a44      	subs	r4, r0, r1
   c0e40:	9802      	ldr	r0, [sp, #8]
   c0e42:	1ac0      	subs	r0, r0, r3
   c0e44:	4344      	muls	r4, r0
   c0e46:	1a50      	subs	r0, r2, r1
   c0e48:	fb94 f0f0 	sdiv	r0, r4, r0
   c0e4c:	4418      	add	r0, r3
}
   c0e4e:	bd10      	pop	{r4, pc}

000c0e50 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c0e50:	2100      	movs	r1, #0
   c0e52:	f7fd b943 	b.w	be0dc <system_delay_ms>
	...

000c0e58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c0e58:	4b01      	ldr	r3, [pc, #4]	; (c0e60 <_GLOBAL__sub_I_RGB+0x8>)
   c0e5a:	2200      	movs	r2, #0
   c0e5c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c0e5e:	4770      	bx	lr
   c0e60:	2003e6c0 	.word	0x2003e6c0

000c0e64 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c0e64:	4b01      	ldr	r3, [pc, #4]	; (c0e6c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c0e66:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c0e68:	4770      	bx	lr
   c0e6a:	bf00      	nop
   c0e6c:	2003db50 	.word	0x2003db50

000c0e70 <serialEventRun>:
{
   c0e70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c0e72:	4b0b      	ldr	r3, [pc, #44]	; (c0ea0 <serialEventRun+0x30>)
   c0e74:	b143      	cbz	r3, c0e88 <serialEventRun+0x18>
   c0e76:	f000 fc29 	bl	c16cc <_Z16_fetch_usbserialv>
   c0e7a:	6803      	ldr	r3, [r0, #0]
   c0e7c:	691b      	ldr	r3, [r3, #16]
   c0e7e:	4798      	blx	r3
   c0e80:	2800      	cmp	r0, #0
   c0e82:	dd01      	ble.n	c0e88 <serialEventRun+0x18>
        serialEvent();
   c0e84:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0e88:	4b06      	ldr	r3, [pc, #24]	; (c0ea4 <serialEventRun+0x34>)
   c0e8a:	b143      	cbz	r3, c0e9e <serialEventRun+0x2e>
   c0e8c:	f001 f8ea 	bl	c2064 <_Z22__fetch_global_Serial1v>
   c0e90:	6803      	ldr	r3, [r0, #0]
   c0e92:	691b      	ldr	r3, [r3, #16]
   c0e94:	4798      	blx	r3
   c0e96:	2800      	cmp	r0, #0
   c0e98:	dd01      	ble.n	c0e9e <serialEventRun+0x2e>
        serialEvent1();
   c0e9a:	f3af 8000 	nop.w
}
   c0e9e:	bd08      	pop	{r3, pc}
	...

000c0ea8 <_post_loop>:
{
   c0ea8:	b508      	push	{r3, lr}
	serialEventRun();
   c0eaa:	f7ff ffe1 	bl	c0e70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0eae:	f7fc fe89 	bl	bdbc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c0eb2:	4b01      	ldr	r3, [pc, #4]	; (c0eb8 <_post_loop+0x10>)
   c0eb4:	6018      	str	r0, [r3, #0]
}
   c0eb6:	bd08      	pop	{r3, pc}
   c0eb8:	2003e740 	.word	0x2003e740

000c0ebc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0ebc:	4805      	ldr	r0, [pc, #20]	; (c0ed4 <_Z33system_initialize_user_backup_ramv+0x18>)
   c0ebe:	4a06      	ldr	r2, [pc, #24]	; (c0ed8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0ec0:	4906      	ldr	r1, [pc, #24]	; (c0edc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c0ec2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0ec4:	1a12      	subs	r2, r2, r0
   c0ec6:	f003 fb2f 	bl	c4528 <memcpy>
    __backup_sram_signature = signature;
   c0eca:	4b05      	ldr	r3, [pc, #20]	; (c0ee0 <_Z33system_initialize_user_backup_ramv+0x24>)
   c0ecc:	4a05      	ldr	r2, [pc, #20]	; (c0ee4 <_Z33system_initialize_user_backup_ramv+0x28>)
   c0ece:	601a      	str	r2, [r3, #0]
}
   c0ed0:	bd08      	pop	{r3, pc}
   c0ed2:	bf00      	nop
   c0ed4:	2003f400 	.word	0x2003f400
   c0ed8:	2003f404 	.word	0x2003f404
   c0edc:	000c8a44 	.word	0x000c8a44
   c0ee0:	2003f400 	.word	0x2003f400
   c0ee4:	9a271c1e 	.word	0x9a271c1e

000c0ee8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0ee8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0eea:	2300      	movs	r3, #0
   c0eec:	9300      	str	r3, [sp, #0]
   c0eee:	461a      	mov	r2, r3
   c0ef0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0ef4:	f7fd f924 	bl	be140 <system_ctrl_set_result>
}
   c0ef8:	b003      	add	sp, #12
   c0efa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0f00 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0f00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c0f02:	8843      	ldrh	r3, [r0, #2]
   c0f04:	2b0a      	cmp	r3, #10
   c0f06:	d008      	beq.n	c0f1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0f08:	2b50      	cmp	r3, #80	; 0x50
   c0f0a:	d10b      	bne.n	c0f24 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0f0c:	4b09      	ldr	r3, [pc, #36]	; (c0f34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c0f0e:	681b      	ldr	r3, [r3, #0]
   c0f10:	b14b      	cbz	r3, c0f26 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c0f12:	b003      	add	sp, #12
   c0f14:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c0f18:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c0f1a:	f7ff ffe5 	bl	c0ee8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c0f1e:	b003      	add	sp, #12
   c0f20:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0f24:	2300      	movs	r3, #0
   c0f26:	9300      	str	r3, [sp, #0]
   c0f28:	461a      	mov	r2, r3
   c0f2a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c0f2e:	f7fd f907 	bl	be140 <system_ctrl_set_result>
}
   c0f32:	e7f4      	b.n	c0f1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c0f34:	2003e6d4 	.word	0x2003e6d4

000c0f38 <module_user_init_hook>:
{
   c0f38:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c0f3a:	4812      	ldr	r0, [pc, #72]	; (c0f84 <module_user_init_hook+0x4c>)
   c0f3c:	2100      	movs	r1, #0
   c0f3e:	f7fd f9f9 	bl	be334 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c0f42:	4b11      	ldr	r3, [pc, #68]	; (c0f88 <module_user_init_hook+0x50>)
   c0f44:	681a      	ldr	r2, [r3, #0]
   c0f46:	4b11      	ldr	r3, [pc, #68]	; (c0f8c <module_user_init_hook+0x54>)
   c0f48:	429a      	cmp	r2, r3
   c0f4a:	4b11      	ldr	r3, [pc, #68]	; (c0f90 <module_user_init_hook+0x58>)
   c0f4c:	bf0c      	ite	eq
   c0f4e:	2201      	moveq	r2, #1
   c0f50:	2200      	movne	r2, #0
   c0f52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c0f54:	d001      	beq.n	c0f5a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c0f56:	f7ff ffb1 	bl	c0ebc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c0f5a:	f7fc fe1b 	bl	bdb94 <HAL_RNG_GetRandomNumber>
   c0f5e:	4604      	mov	r4, r0
    srand(seed);
   c0f60:	f003 fb12 	bl	c4588 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c0f64:	4b0b      	ldr	r3, [pc, #44]	; (c0f94 <module_user_init_hook+0x5c>)
   c0f66:	b113      	cbz	r3, c0f6e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c0f68:	4620      	mov	r0, r4
   c0f6a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c0f6e:	2100      	movs	r1, #0
   c0f70:	4808      	ldr	r0, [pc, #32]	; (c0f94 <module_user_init_hook+0x5c>)
   c0f72:	f7fd f97f 	bl	be274 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c0f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c0f7a:	4807      	ldr	r0, [pc, #28]	; (c0f98 <module_user_init_hook+0x60>)
   c0f7c:	2100      	movs	r1, #0
   c0f7e:	f7fd b8d5 	b.w	be12c <system_ctrl_set_app_request_handler>
   c0f82:	bf00      	nop
   c0f84:	000c0e65 	.word	0x000c0e65
   c0f88:	2003f400 	.word	0x2003f400
   c0f8c:	9a271c1e 	.word	0x9a271c1e
   c0f90:	2003e6d0 	.word	0x2003e6d0
   c0f94:	00000000 	.word	0x00000000
   c0f98:	000c0f01 	.word	0x000c0f01

000c0f9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c0f9c:	4770      	bx	lr

000c0f9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c0f9e:	2000      	movs	r0, #0
   c0fa0:	4770      	bx	lr

000c0fa2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c0fa2:	b510      	push	{r4, lr}
   c0fa4:	2110      	movs	r1, #16
   c0fa6:	4604      	mov	r4, r0
   c0fa8:	f7f3 f87b 	bl	b40a2 <_ZdlPvj>
   c0fac:	4620      	mov	r0, r4
   c0fae:	bd10      	pop	{r4, pc}

000c0fb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c0fb0:	b508      	push	{r3, lr}
      { delete this; }
   c0fb2:	f7ff fff6 	bl	c0fa2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c0fb6:	bd08      	pop	{r3, pc}

000c0fb8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c0fb8:	b530      	push	{r4, r5, lr}
        type_(type) {
   c0fba:	2200      	movs	r2, #0
   c0fbc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c0fc0:	6002      	str	r2, [r0, #0]
   c0fc2:	8084      	strh	r4, [r0, #4]
   c0fc4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c0fc6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c0fc8:	680c      	ldr	r4, [r1, #0]
   c0fca:	8085      	strh	r5, [r0, #4]
   c0fcc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c0fce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c0fd0:	bd30      	pop	{r4, r5, pc}

000c0fd2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c0fd2:	b510      	push	{r4, lr}
   c0fd4:	4604      	mov	r4, r0
    free((void*)msg_);
   c0fd6:	6800      	ldr	r0, [r0, #0]
   c0fd8:	f7fd f95c 	bl	be294 <free>
}
   c0fdc:	4620      	mov	r0, r4
   c0fde:	bd10      	pop	{r4, pc}

000c0fe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c0fe0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c0fe2:	68c4      	ldr	r4, [r0, #12]
   c0fe4:	b1f4      	cbz	r4, c1024 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   c0fe6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c0fe8:	2b02      	cmp	r3, #2
   c0fea:	d103      	bne.n	c0ff4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c0fec:	f104 000c 	add.w	r0, r4, #12
   c0ff0:	f7ff ffef 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c0ff4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c0ff6:	b135      	cbz	r5, c1006 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c0ff8:	4628      	mov	r0, r5
   c0ffa:	f7f3 fa61 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   c0ffe:	2110      	movs	r1, #16
   c1000:	4628      	mov	r0, r5
   c1002:	f7f3 f84e 	bl	b40a2 <_ZdlPvj>
   c1006:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c1008:	b135      	cbz	r5, c1018 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c100a:	4628      	mov	r0, r5
   c100c:	f7f3 fa58 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
   c1010:	2110      	movs	r1, #16
   c1012:	4628      	mov	r0, r5
   c1014:	f7f3 f845 	bl	b40a2 <_ZdlPvj>
   c1018:	4620      	mov	r0, r4
   c101a:	2114      	movs	r1, #20
   c101c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c1020:	f7f3 b83f 	b.w	b40a2 <_ZdlPvj>
   c1024:	bd38      	pop	{r3, r4, r5, pc}

000c1026 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   c1026:	b510      	push	{r4, lr}
   c1028:	b088      	sub	sp, #32
   c102a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   c102c:	4668      	mov	r0, sp
   c102e:	f7fd fb92 	bl	be756 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   c1032:	4669      	mov	r1, sp
   c1034:	a804      	add	r0, sp, #16
   c1036:	f7fd fbd9 	bl	be7ec <_ZN6StringC1ERKS_>
   c103a:	a804      	add	r0, sp, #16
   c103c:	47a0      	blx	r4
   c103e:	4604      	mov	r4, r0
   c1040:	a804      	add	r0, sp, #16
   c1042:	f7fd fb3d 	bl	be6c0 <_ZN6StringD1Ev>
    String p(param);
   c1046:	4668      	mov	r0, sp
   c1048:	f7fd fb3a 	bl	be6c0 <_ZN6StringD1Ev>
}
   c104c:	4620      	mov	r0, r4
   c104e:	b008      	add	sp, #32
   c1050:	bd10      	pop	{r4, pc}

000c1052 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   c1052:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   c1054:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   c1056:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   c105a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   c105c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   c105e:	461a      	mov	r2, r3
   c1060:	4669      	mov	r1, sp
   c1062:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   c1064:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   c1068:	f8ad 4000 	strh.w	r4, [sp]
   c106c:	f7fd f8d2 	bl	be214 <spark_function>
}
   c1070:	b004      	add	sp, #16
   c1072:	bd10      	pop	{r4, pc}

000c1074 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c1074:	680b      	ldr	r3, [r1, #0]
   c1076:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c1078:	684b      	ldr	r3, [r1, #4]
   c107a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c107c:	b113      	cbz	r3, c1084 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c107e:	685a      	ldr	r2, [r3, #4]
   c1080:	3201      	adds	r2, #1
   c1082:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c1084:	4770      	bx	lr

000c1086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c1086:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c1088:	4604      	mov	r4, r0
   c108a:	4668      	mov	r0, sp
   c108c:	460d      	mov	r5, r1
   c108e:	f7ff fff1 	bl	c1074 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1092:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c1094:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1096:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c1098:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c109a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c109c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c109e:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   c10a0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c10a2:	f7fe f858 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c10a6:	b135      	cbz	r5, c10b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c10a8:	1d28      	adds	r0, r5, #4
   c10aa:	f7fe f854 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c10ae:	2108      	movs	r1, #8
   c10b0:	4628      	mov	r0, r5
   c10b2:	f7f2 fff6 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   c10b6:	4620      	mov	r0, r4
   c10b8:	b003      	add	sp, #12
   c10ba:	bd30      	pop	{r4, r5, pc}

000c10bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c10bc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c10be:	b510      	push	{r4, lr}
      if (_M_empty())
   c10c0:	b90a      	cbnz	r2, c10c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c10c2:	f001 f833 	bl	c212c <_ZSt25__throw_bad_function_callv>
    }
   c10c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c10ca:	68c3      	ldr	r3, [r0, #12]
   c10cc:	4718      	bx	r3

000c10ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c10ce:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c10d0:	6800      	ldr	r0, [r0, #0]
   c10d2:	f100 0110 	add.w	r1, r0, #16
   c10d6:	f7ff fff1 	bl	c10bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c10da:	bd08      	pop	{r3, pc}

000c10dc <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c10dc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c10de:	b510      	push	{r4, lr}
      if (_M_empty())
   c10e0:	b90a      	cbnz	r2, c10e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c10e2:	f001 f823 	bl	c212c <_ZSt25__throw_bad_function_callv>
    }
   c10e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c10ea:	68c3      	ldr	r3, [r0, #12]
   c10ec:	4718      	bx	r3

000c10ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c10ee:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c10f0:	6800      	ldr	r0, [r0, #0]
   c10f2:	f100 0110 	add.w	r1, r0, #16
   c10f6:	f7ff fff1 	bl	c10dc <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c10fa:	bd08      	pop	{r3, pc}

000c10fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c10fc:	b538      	push	{r3, r4, r5, lr}
   c10fe:	2300      	movs	r3, #0
   c1100:	4604      	mov	r4, r0
   c1102:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c1104:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c1106:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c1108:	f7f2 ffc5 	bl	b4096 <_Znwj>
   c110c:	b128      	cbz	r0, c111a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c110e:	2301      	movs	r3, #1
   c1110:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c1114:	4b02      	ldr	r3, [pc, #8]	; (c1120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c1116:	6003      	str	r3, [r0, #0]
   c1118:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c111a:	6020      	str	r0, [r4, #0]
	}
   c111c:	4620      	mov	r0, r4
   c111e:	bd38      	pop	{r3, r4, r5, pc}
   c1120:	000c7f48 	.word	0x000c7f48

000c1124 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c1124:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c1126:	2300      	movs	r3, #0
   c1128:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c112a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c112c:	4604      	mov	r4, r0
   c112e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c1130:	b12b      	cbz	r3, c113e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c1132:	2202      	movs	r2, #2
   c1134:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c1136:	68eb      	ldr	r3, [r5, #12]
   c1138:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c113a:	68ab      	ldr	r3, [r5, #8]
   c113c:	60a3      	str	r3, [r4, #8]
    }
   c113e:	4620      	mov	r0, r4
   c1140:	bd38      	pop	{r3, r4, r5, pc}
	...

000c1144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c1144:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1146:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   c1148:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c114a:	4668      	mov	r0, sp
   c114c:	f7ff ff34 	bl	c0fb8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c1150:	f04f 0302 	mov.w	r3, #2
   c1154:	e8d4 2f4f 	ldrexb	r2, [r4]
   c1158:	2a00      	cmp	r2, #0
   c115a:	d103      	bne.n	c1164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c115c:	e8c4 3f41 	strexb	r1, r3, [r4]
   c1160:	2900      	cmp	r1, #0
   c1162:	d1f7      	bne.n	c1154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c1164:	d125      	bne.n	c11b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c1166:	f104 050c 	add.w	r5, r4, #12
   c116a:	4669      	mov	r1, sp
   c116c:	4628      	mov	r0, r5
   c116e:	f7ff ff23 	bl	c0fb8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c1172:	f3bf 8f5b 	dmb	ish
   c1176:	2301      	movs	r3, #1
   c1178:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c117a:	2000      	movs	r0, #0
   c117c:	f104 0308 	add.w	r3, r4, #8
   c1180:	f3bf 8f5b 	dmb	ish
   c1184:	e853 6f00 	ldrex	r6, [r3]
   c1188:	e843 0200 	strex	r2, r0, [r3]
   c118c:	2a00      	cmp	r2, #0
   c118e:	d1f9      	bne.n	c1184 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c1190:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c1194:	b16e      	cbz	r6, c11b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c1196:	f7fc ffa9 	bl	be0ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c119a:	b178      	cbz	r0, c11bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c119c:	4629      	mov	r1, r5
   c119e:	4630      	mov	r0, r6
   c11a0:	f7ff ff8c 	bl	c10bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c11a4:	4630      	mov	r0, r6
   c11a6:	f7f3 f98b 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c11aa:	2110      	movs	r1, #16
   c11ac:	4630      	mov	r0, r6
   c11ae:	f7f2 ff78 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   c11b2:	4668      	mov	r0, sp
   c11b4:	f7ff ff0d 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
    }
   c11b8:	b009      	add	sp, #36	; 0x24
   c11ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c11bc:	4631      	mov	r1, r6
   c11be:	a802      	add	r0, sp, #8
   c11c0:	f7ff ffb0 	bl	c1124 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c11c4:	68e0      	ldr	r0, [r4, #12]
   c11c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c11ca:	b108      	cbz	r0, c11d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c11cc:	f003 fa42 	bl	c4654 <strdup>
        type_(type) {
   c11d0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c11d2:	2010      	movs	r0, #16
   c11d4:	f8ad 501c 	strh.w	r5, [sp, #28]
   c11d8:	f7f2 ff5d 	bl	b4096 <_Znwj>
   c11dc:	4605      	mov	r5, r0
   c11de:	b1e8      	cbz	r0, c121c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c11e0:	2700      	movs	r7, #0
   c11e2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c11e4:	2018      	movs	r0, #24
   c11e6:	f7f2 ff56 	bl	b4096 <_Znwj>
   c11ea:	4604      	mov	r4, r0
   c11ec:	b188      	cbz	r0, c1212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c11ee:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c11f0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c11f2:	a802      	add	r0, sp, #8
   c11f4:	f7fe fa8c 	bl	bf710 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c11f8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c11fa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c11fc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c11fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c1200:	9204      	str	r2, [sp, #16]
   c1202:	a906      	add	r1, sp, #24
   c1204:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c1206:	60e3      	str	r3, [r4, #12]
   c1208:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c120c:	9205      	str	r2, [sp, #20]
   c120e:	f7ff fed3 	bl	c0fb8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c1212:	4b08      	ldr	r3, [pc, #32]	; (c1234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c1214:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c1216:	4b08      	ldr	r3, [pc, #32]	; (c1238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c1218:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c121a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c121c:	a806      	add	r0, sp, #24
   c121e:	f7ff fed8 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c1222:	a802      	add	r0, sp, #8
   c1224:	f7f3 f94c 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c1228:	2200      	movs	r2, #0
   c122a:	4629      	mov	r1, r5
   c122c:	4803      	ldr	r0, [pc, #12]	; (c123c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c122e:	f7fc ff65 	bl	be0fc <application_thread_invoke>
   c1232:	e7b7      	b.n	c11a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c1234:	000c10cf 	.word	0x000c10cf
   c1238:	000c1351 	.word	0x000c1351
   c123c:	000c18c9 	.word	0x000c18c9

000c1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   c1240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c1244:	b08b      	sub	sp, #44	; 0x2c
   c1246:	4605      	mov	r5, r0
   c1248:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   c124c:	460f      	mov	r7, r1
   c124e:	4690      	mov	r8, r2
   c1250:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c1252:	f7fc ffef 	bl	be234 <spark_cloud_flag_connected>
   c1256:	ae07      	add	r6, sp, #28
    if (!connected()) {
   c1258:	4683      	mov	fp, r0
   c125a:	bb38      	cbnz	r0, c12ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   c125c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   c1260:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c1262:	a905      	add	r1, sp, #20
   c1264:	4630      	mov	r0, r6
   c1266:	f8ad 3018 	strh.w	r3, [sp, #24]
   c126a:	f7ff fea5 	bl	c0fb8 <_ZN8particle5ErrorC1EOS0_>
   c126e:	2014      	movs	r0, #20
   c1270:	f7f2 ff11 	bl	b4096 <_Znwj>
   c1274:	4604      	mov	r4, r0
   c1276:	b148      	cbz	r0, c128c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c1278:	2302      	movs	r3, #2
   c127a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c127c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c127e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c1282:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c1284:	4631      	mov	r1, r6
   c1286:	300c      	adds	r0, #12
   c1288:	f7ff fe96 	bl	c0fb8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c128c:	4628      	mov	r0, r5
	: __shared_count(__p)
   c128e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c1290:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c1294:	f7ff ff32 	bl	c10fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c1298:	4630      	mov	r0, r6
   c129a:	f7ff fe9a 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   c129e:	a805      	add	r0, sp, #20
   c12a0:	f7ff fe97 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   c12a4:	4628      	mov	r0, r5
   c12a6:	b00b      	add	sp, #44	; 0x2c
   c12a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   c12ac:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   c12ae:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c12b0:	2014      	movs	r0, #20
   c12b2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c12b6:	9307      	str	r3, [sp, #28]
   c12b8:	f7f2 feed 	bl	b4096 <_Znwj>
   c12bc:	4601      	mov	r1, r0
   c12be:	b118      	cbz	r0, c12c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c12c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c12c4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c12c6:	7044      	strb	r4, [r0, #1]
   c12c8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c12ca:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c12cc:	f7ff ff16 	bl	c10fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c12d0:	4b1e      	ldr	r3, [pc, #120]	; (c134c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   c12d2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c12d4:	2008      	movs	r0, #8
   c12d6:	f7f2 fede 	bl	b4096 <_Znwj>
   c12da:	4604      	mov	r4, r0
   c12dc:	b110      	cbz	r0, c12e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   c12de:	a903      	add	r1, sp, #12
   c12e0:	f7ff fec8 	bl	c1074 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c12e4:	9600      	str	r6, [sp, #0]
   c12e6:	fa5f f38a 	uxtb.w	r3, sl
   c12ea:	464a      	mov	r2, r9
   c12ec:	4641      	mov	r1, r8
   c12ee:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   c12f0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   c12f2:	f7fc ffa7 	bl	be244 <spark_send_event>
   c12f6:	b9b8      	cbnz	r0, c1328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   c12f8:	9b03      	ldr	r3, [sp, #12]
   c12fa:	785b      	ldrb	r3, [r3, #1]
   c12fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c1300:	b993      	cbnz	r3, c1328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   c1302:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c1306:	a905      	add	r1, sp, #20
   c1308:	a803      	add	r0, sp, #12
   c130a:	9205      	str	r2, [sp, #20]
   c130c:	f8ad 3018 	strh.w	r3, [sp, #24]
   c1310:	f7ff ff18 	bl	c1144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c1314:	a805      	add	r0, sp, #20
   c1316:	f7ff fe5c 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c131a:	a805      	add	r0, sp, #20
   c131c:	9909      	ldr	r1, [sp, #36]	; 0x24
   c131e:	f7ff feb2 	bl	c1086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c1322:	a806      	add	r0, sp, #24
   c1324:	f7fd ff17 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c1328:	a903      	add	r1, sp, #12
   c132a:	a805      	add	r0, sp, #20
   c132c:	f7ff fea2 	bl	c1074 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1330:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c1332:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c1334:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   c1336:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   c1338:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c133a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c133c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c133e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c1340:	f7fd ff09 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c1344:	a804      	add	r0, sp, #16
   c1346:	f7fd ff06 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c134a:	e7ab      	b.n	c12a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   c134c:	000c13cd 	.word	0x000c13cd

000c1350 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c1350:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c1352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1354:	4605      	mov	r5, r0
	switch (__op)
   c1356:	d103      	bne.n	c1360 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c1358:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c135a:	6003      	str	r3, [r0, #0]
      }
   c135c:	2000      	movs	r0, #0
   c135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c1360:	2a02      	cmp	r2, #2
   c1362:	d010      	beq.n	c1386 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c1364:	2a03      	cmp	r2, #3
   c1366:	d1f9      	bne.n	c135c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c1368:	6804      	ldr	r4, [r0, #0]
   c136a:	2c00      	cmp	r4, #0
   c136c:	d0f6      	beq.n	c135c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c136e:	f104 0010 	add.w	r0, r4, #16
   c1372:	f7ff fe2e 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c1376:	4620      	mov	r0, r4
   c1378:	f7f3 f8a2 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c137c:	2118      	movs	r1, #24
   c137e:	4620      	mov	r0, r4
   c1380:	f7f2 fe8f 	bl	b40a2 <_ZdlPvj>
   c1384:	e7ea      	b.n	c135c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c1386:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c1388:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c138a:	f7f2 fe84 	bl	b4096 <_Znwj>
   c138e:	4604      	mov	r4, r0
   c1390:	b150      	cbz	r0, c13a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   c1392:	4631      	mov	r1, r6
   c1394:	f7ff fec6 	bl	c1124 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c1398:	6930      	ldr	r0, [r6, #16]
   c139a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c139e:	b108      	cbz	r0, c13a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c13a0:	f003 f958 	bl	c4654 <strdup>
        type_(type) {
   c13a4:	6120      	str	r0, [r4, #16]
   c13a6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c13a8:	602c      	str	r4, [r5, #0]
	}
   c13aa:	e7d7      	b.n	c135c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c13ac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c13ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c13ae:	2300      	movs	r3, #0
   c13b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c13b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c13b4:	4604      	mov	r4, r0
   c13b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c13b8:	b12b      	cbz	r3, c13c6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c13ba:	2202      	movs	r2, #2
   c13bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c13be:	68eb      	ldr	r3, [r5, #12]
   c13c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c13c2:	68ab      	ldr	r3, [r5, #8]
   c13c4:	60a3      	str	r3, [r4, #8]
    }
   c13c6:	4620      	mov	r0, r4
   c13c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000c13cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c13cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   c13ce:	b089      	sub	sp, #36	; 0x24
   c13d0:	4604      	mov	r4, r0
   c13d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c13d4:	a801      	add	r0, sp, #4
   c13d6:	4611      	mov	r1, r2
   c13d8:	f7ff fe55 	bl	c1086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c13dc:	b1a4      	cbz	r4, c1408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c13de:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c13e0:	b11d      	cbz	r5, c13ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c13e2:	4628      	mov	r0, r5
   c13e4:	f003 f936 	bl	c4654 <strdup>
   c13e8:	4605      	mov	r5, r0
   c13ea:	a801      	add	r0, sp, #4
   c13ec:	a903      	add	r1, sp, #12
        type_(type) {
   c13ee:	9503      	str	r5, [sp, #12]
   c13f0:	f8ad 4010 	strh.w	r4, [sp, #16]
   c13f4:	f7ff fea6 	bl	c1144 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c13f8:	a803      	add	r0, sp, #12
   c13fa:	f7ff fdea 	bl	c0fd2 <_ZN8particle5ErrorD1Ev>
   c13fe:	a802      	add	r0, sp, #8
   c1400:	f7fd fea9 	bl	bf156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c1404:	b009      	add	sp, #36	; 0x24
   c1406:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c1408:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c140a:	2301      	movs	r3, #1
   c140c:	e8d5 2f4f 	ldrexb	r2, [r5]
   c1410:	2a00      	cmp	r2, #0
   c1412:	d103      	bne.n	c141c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c1414:	e8c5 3f41 	strexb	r1, r3, [r5]
   c1418:	2900      	cmp	r1, #0
   c141a:	d1f7      	bne.n	c140c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c141c:	d1ef      	bne.n	c13fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c141e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c1420:	f3bf 8f5b 	dmb	ish
   c1424:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c1426:	1d2b      	adds	r3, r5, #4
   c1428:	f3bf 8f5b 	dmb	ish
   c142c:	e853 6f00 	ldrex	r6, [r3]
   c1430:	e843 4200 	strex	r2, r4, [r3]
   c1434:	2a00      	cmp	r2, #0
   c1436:	d1f9      	bne.n	c142c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c1438:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c143c:	2e00      	cmp	r6, #0
   c143e:	d0de      	beq.n	c13fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c1440:	4620      	mov	r0, r4
   c1442:	f7fc fe53 	bl	be0ec <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c1446:	4607      	mov	r7, r0
   c1448:	b160      	cbz	r0, c1464 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c144a:	f105 010c 	add.w	r1, r5, #12
   c144e:	4630      	mov	r0, r6
   c1450:	f7ff fe44 	bl	c10dc <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c1454:	4630      	mov	r0, r6
   c1456:	f7f3 f833 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c145a:	2110      	movs	r1, #16
   c145c:	4630      	mov	r0, r6
   c145e:	f7f2 fe20 	bl	b40a2 <_ZdlPvj>
   c1462:	e7cc      	b.n	c13fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c1464:	4631      	mov	r1, r6
   c1466:	a803      	add	r0, sp, #12
   c1468:	f7ff ffa0 	bl	c13ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c146c:	7b2b      	ldrb	r3, [r5, #12]
   c146e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c1472:	2010      	movs	r0, #16
   c1474:	f7f2 fe0f 	bl	b4096 <_Znwj>
   c1478:	4605      	mov	r5, r0
   c147a:	b1d0      	cbz	r0, c14b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c147c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c147e:	2014      	movs	r0, #20
   c1480:	f7f2 fe09 	bl	b4096 <_Znwj>
   c1484:	4604      	mov	r4, r0
   c1486:	b178      	cbz	r0, c14a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c1488:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c148a:	4601      	mov	r1, r0
   c148c:	a803      	add	r0, sp, #12
   c148e:	f7fe f93f 	bl	bf710 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1492:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c1494:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c1496:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c1498:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c149a:	9205      	str	r2, [sp, #20]
   c149c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c149e:	60e3      	str	r3, [r4, #12]
   c14a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c14a4:	9206      	str	r2, [sp, #24]
   c14a6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c14a8:	4b06      	ldr	r3, [pc, #24]	; (c14c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c14aa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c14ac:	4b06      	ldr	r3, [pc, #24]	; (c14c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c14ae:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c14b0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c14b2:	a803      	add	r0, sp, #12
   c14b4:	f7f3 f804 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c14b8:	2200      	movs	r2, #0
   c14ba:	4629      	mov	r1, r5
   c14bc:	4803      	ldr	r0, [pc, #12]	; (c14cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c14be:	f7fc fe1d 	bl	be0fc <application_thread_invoke>
   c14c2:	e7c7      	b.n	c1454 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c14c4:	000c10ef 	.word	0x000c10ef
   c14c8:	000c14d1 	.word	0x000c14d1
   c14cc:	000c18c9 	.word	0x000c18c9

000c14d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c14d0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c14d2:	b570      	push	{r4, r5, r6, lr}
   c14d4:	4604      	mov	r4, r0
	switch (__op)
   c14d6:	d103      	bne.n	c14e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c14d8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c14da:	6003      	str	r3, [r0, #0]
      }
   c14dc:	2000      	movs	r0, #0
   c14de:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c14e0:	2a02      	cmp	r2, #2
   c14e2:	d00c      	beq.n	c14fe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c14e4:	2a03      	cmp	r2, #3
   c14e6:	d1f9      	bne.n	c14dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c14e8:	6804      	ldr	r4, [r0, #0]
   c14ea:	2c00      	cmp	r4, #0
   c14ec:	d0f6      	beq.n	c14dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c14ee:	4620      	mov	r0, r4
   c14f0:	f7f2 ffe6 	bl	b44c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c14f4:	2114      	movs	r1, #20
   c14f6:	4620      	mov	r0, r4
   c14f8:	f7f2 fdd3 	bl	b40a2 <_ZdlPvj>
   c14fc:	e7ee      	b.n	c14dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c14fe:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c1500:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c1502:	f7f2 fdc8 	bl	b4096 <_Znwj>
   c1506:	4605      	mov	r5, r0
   c1508:	b120      	cbz	r0, c1514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   c150a:	4631      	mov	r1, r6
   c150c:	f7ff ff4e 	bl	c13ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c1510:	7c33      	ldrb	r3, [r6, #16]
   c1512:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c1514:	6025      	str	r5, [r4, #0]
	}
   c1516:	e7e1      	b.n	c14dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000c1518 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c1518:	4770      	bx	lr

000c151a <_ZN9IPAddressD0Ev>:
   c151a:	b510      	push	{r4, lr}
   c151c:	2118      	movs	r1, #24
   c151e:	4604      	mov	r4, r0
   c1520:	f7f2 fdbf 	bl	b40a2 <_ZdlPvj>
   c1524:	4620      	mov	r0, r4
   c1526:	bd10      	pop	{r4, pc}

000c1528 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c1528:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c152a:	7d03      	ldrb	r3, [r0, #20]
   c152c:	2b06      	cmp	r3, #6
{
   c152e:	b08d      	sub	sp, #52	; 0x34
   c1530:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c1532:	f100 0704 	add.w	r7, r0, #4
   c1536:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c153a:	d012      	beq.n	c1562 <_ZNK9IPAddress7printToER5Print+0x3a>
   c153c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c1540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c1544:	220a      	movs	r2, #10
   c1546:	4630      	mov	r0, r6
   c1548:	f7fe fba3 	bl	bfc92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c154c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c154e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c1550:	d019      	beq.n	c1586 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c1552:	2c00      	cmp	r4, #0
   c1554:	d0f4      	beq.n	c1540 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c1556:	212e      	movs	r1, #46	; 0x2e
   c1558:	4630      	mov	r0, r6
   c155a:	f7fe fb7b 	bl	bfc54 <_ZN5Print5printEc>
   c155e:	4404      	add	r4, r0
   c1560:	e7ee      	b.n	c1540 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c1562:	232f      	movs	r3, #47	; 0x2f
   c1564:	466a      	mov	r2, sp
   c1566:	4639      	mov	r1, r7
   c1568:	200a      	movs	r0, #10
		buf[0] = 0;
   c156a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c156e:	f7fc fc1b 	bl	bdda8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c1572:	4668      	mov	r0, sp
   c1574:	f003 f88b 	bl	c468e <strlen>
   c1578:	6833      	ldr	r3, [r6, #0]
   c157a:	4602      	mov	r2, r0
   c157c:	68db      	ldr	r3, [r3, #12]
   c157e:	4669      	mov	r1, sp
   c1580:	4630      	mov	r0, r6
   c1582:	4798      	blx	r3
   c1584:	4604      	mov	r4, r0
    }
    return n;
}
   c1586:	4620      	mov	r0, r4
   c1588:	b00d      	add	sp, #52	; 0x34
   c158a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c158c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c158c:	b510      	push	{r4, lr}
   c158e:	4b05      	ldr	r3, [pc, #20]	; (c15a4 <_ZN9IPAddressC1Ev+0x18>)
   c1590:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c1592:	2211      	movs	r2, #17
   c1594:	f840 3b04 	str.w	r3, [r0], #4
   c1598:	2100      	movs	r1, #0
   c159a:	f002 ffed 	bl	c4578 <memset>
}
   c159e:	4620      	mov	r0, r4
   c15a0:	bd10      	pop	{r4, pc}
   c15a2:	bf00      	nop
   c15a4:	000c7f64 	.word	0x000c7f64

000c15a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c15a8:	4603      	mov	r3, r0
   c15aa:	4a07      	ldr	r2, [pc, #28]	; (c15c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c15ac:	b510      	push	{r4, lr}
   c15ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c15b2:	f101 0210 	add.w	r2, r1, #16
   c15b6:	f851 4b04 	ldr.w	r4, [r1], #4
   c15ba:	f843 4b04 	str.w	r4, [r3], #4
   c15be:	4291      	cmp	r1, r2
   c15c0:	d1f9      	bne.n	c15b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c15c2:	780a      	ldrb	r2, [r1, #0]
   c15c4:	701a      	strb	r2, [r3, #0]
}
   c15c6:	bd10      	pop	{r4, pc}
   c15c8:	000c7f64 	.word	0x000c7f64

000c15cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c15cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c15ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c15d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c15d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c15da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c15de:	2304      	movs	r3, #4
   c15e0:	6041      	str	r1, [r0, #4]
   c15e2:	7503      	strb	r3, [r0, #20]
}
   c15e4:	bd10      	pop	{r4, pc}
	...

000c15e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c15e8:	b507      	push	{r0, r1, r2, lr}
   c15ea:	4b06      	ldr	r3, [pc, #24]	; (c1604 <_ZN9IPAddressC1EPKh+0x1c>)
   c15ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c15ee:	78cb      	ldrb	r3, [r1, #3]
   c15f0:	9300      	str	r3, [sp, #0]
   c15f2:	788b      	ldrb	r3, [r1, #2]
   c15f4:	784a      	ldrb	r2, [r1, #1]
   c15f6:	7809      	ldrb	r1, [r1, #0]
   c15f8:	f7ff ffe8 	bl	c15cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c15fc:	b003      	add	sp, #12
   c15fe:	f85d fb04 	ldr.w	pc, [sp], #4
   c1602:	bf00      	nop
   c1604:	000c7f64 	.word	0x000c7f64

000c1608 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1608:	7441      	strb	r1, [r0, #17]
}
   c160a:	4770      	bx	lr

000c160c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c160c:	4770      	bx	lr

000c160e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c160e:	4770      	bx	lr

000c1610 <_ZN9USBSerial4readEv>:
{
   c1610:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c1612:	2100      	movs	r1, #0
   c1614:	7c00      	ldrb	r0, [r0, #16]
   c1616:	f7fc fd0f 	bl	be038 <HAL_USB_USART_Receive_Data>
}
   c161a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c161e:	bd08      	pop	{r3, pc}

000c1620 <_ZN9USBSerial4peekEv>:
{
   c1620:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c1622:	2101      	movs	r1, #1
   c1624:	7c00      	ldrb	r0, [r0, #16]
   c1626:	f7fc fd07 	bl	be038 <HAL_USB_USART_Receive_Data>
}
   c162a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c162e:	bd08      	pop	{r3, pc}

000c1630 <_ZN9USBSerial17availableForWriteEv>:
{
   c1630:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c1632:	7c00      	ldrb	r0, [r0, #16]
   c1634:	f7fc fcf8 	bl	be028 <HAL_USB_USART_Available_Data_For_Write>
}
   c1638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c163c:	bd08      	pop	{r3, pc}

000c163e <_ZN9USBSerial9availableEv>:
{
   c163e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c1640:	7c00      	ldrb	r0, [r0, #16]
   c1642:	f7fc fce9 	bl	be018 <HAL_USB_USART_Available_Data>
}
   c1646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c164a:	bd08      	pop	{r3, pc}

000c164c <_ZN9USBSerial5writeEh>:
{
   c164c:	b513      	push	{r0, r1, r4, lr}
   c164e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1650:	7c00      	ldrb	r0, [r0, #16]
{
   c1652:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c1654:	f7fc fce8 	bl	be028 <HAL_USB_USART_Available_Data_For_Write>
   c1658:	2800      	cmp	r0, #0
   c165a:	9901      	ldr	r1, [sp, #4]
   c165c:	dc01      	bgt.n	c1662 <_ZN9USBSerial5writeEh+0x16>
   c165e:	7c60      	ldrb	r0, [r4, #17]
   c1660:	b120      	cbz	r0, c166c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c1662:	7c20      	ldrb	r0, [r4, #16]
   c1664:	f7fc fcf0 	bl	be048 <HAL_USB_USART_Send_Data>
   c1668:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c166c:	b002      	add	sp, #8
   c166e:	bd10      	pop	{r4, pc}

000c1670 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c1670:	7c00      	ldrb	r0, [r0, #16]
   c1672:	f7fc bcf1 	b.w	be058 <HAL_USB_USART_Flush_Data>

000c1676 <_ZN9USBSerialD0Ev>:
   c1676:	b510      	push	{r4, lr}
   c1678:	2114      	movs	r1, #20
   c167a:	4604      	mov	r4, r0
   c167c:	f7f2 fd11 	bl	b40a2 <_ZdlPvj>
   c1680:	4620      	mov	r0, r4
   c1682:	bd10      	pop	{r4, pc}

000c1684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c1684:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c1686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c168a:	4604      	mov	r4, r0
   c168c:	4608      	mov	r0, r1
   c168e:	2100      	movs	r1, #0
   c1690:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1694:	4b04      	ldr	r3, [pc, #16]	; (c16a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c1696:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c1698:	2301      	movs	r3, #1
  _serial = serial;
   c169a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c169c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c169e:	4611      	mov	r1, r2
   c16a0:	f7fc fca2 	bl	bdfe8 <HAL_USB_USART_Init>
}
   c16a4:	4620      	mov	r0, r4
   c16a6:	bd10      	pop	{r4, pc}
   c16a8:	000c7f78 	.word	0x000c7f78

000c16ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c16ac:	7c00      	ldrb	r0, [r0, #16]
   c16ae:	2200      	movs	r2, #0
   c16b0:	f7fc bca2 	b.w	bdff8 <HAL_USB_USART_Begin>

000c16b4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c16b4:	7c00      	ldrb	r0, [r0, #16]
   c16b6:	f7fc bca7 	b.w	be008 <HAL_USB_USART_End>

000c16ba <_Z19acquireSerialBufferv>:
{
   c16ba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c16bc:	2214      	movs	r2, #20
{
   c16be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c16c0:	2100      	movs	r1, #0
   c16c2:	f002 ff59 	bl	c4578 <memset>
}
   c16c6:	4620      	mov	r0, r4
   c16c8:	bd10      	pop	{r4, pc}
	...

000c16cc <_Z16_fetch_usbserialv>:
{
   c16cc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c16ce:	4c0f      	ldr	r4, [pc, #60]	; (c170c <_Z16_fetch_usbserialv+0x40>)
{
   c16d0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c16d2:	a803      	add	r0, sp, #12
   c16d4:	f7ff fff1 	bl	c16ba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c16d8:	7821      	ldrb	r1, [r4, #0]
   c16da:	f3bf 8f5b 	dmb	ish
   c16de:	f011 0101 	ands.w	r1, r1, #1
   c16e2:	d10f      	bne.n	c1704 <_Z16_fetch_usbserialv+0x38>
   c16e4:	4620      	mov	r0, r4
   c16e6:	9101      	str	r1, [sp, #4]
   c16e8:	f7f2 fcea 	bl	b40c0 <__cxa_guard_acquire>
   c16ec:	9901      	ldr	r1, [sp, #4]
   c16ee:	b148      	cbz	r0, c1704 <_Z16_fetch_usbserialv+0x38>
   c16f0:	aa03      	add	r2, sp, #12
   c16f2:	4807      	ldr	r0, [pc, #28]	; (c1710 <_Z16_fetch_usbserialv+0x44>)
   c16f4:	f7ff ffc6 	bl	c1684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c16f8:	4620      	mov	r0, r4
   c16fa:	f7f2 fce6 	bl	b40ca <__cxa_guard_release>
   c16fe:	4805      	ldr	r0, [pc, #20]	; (c1714 <_Z16_fetch_usbserialv+0x48>)
   c1700:	f002 feec 	bl	c44dc <atexit>
	return _usbserial;
}
   c1704:	4802      	ldr	r0, [pc, #8]	; (c1710 <_Z16_fetch_usbserialv+0x44>)
   c1706:	b008      	add	sp, #32
   c1708:	bd10      	pop	{r4, pc}
   c170a:	bf00      	nop
   c170c:	2003e6d8 	.word	0x2003e6d8
   c1710:	2003e6dc 	.word	0x2003e6dc
   c1714:	000c160d 	.word	0x000c160d

000c1718 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   c1718:	4700      	bx	r0
	...

000c171c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   c171c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   c1720:	2400      	movs	r4, #0
{
   c1722:	461d      	mov	r5, r3
   c1724:	460f      	mov	r7, r1
   c1726:	4690      	mov	r8, r2
   c1728:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   c172a:	f7fc fa13 	bl	bdb54 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   c172e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c1730:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   c1734:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c1738:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   c173c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   c1740:	bfa2      	ittt	ge
   c1742:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   c1746:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   c174a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c174c:	4907      	ldr	r1, [pc, #28]	; (c176c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   c174e:	9400      	str	r4, [sp, #0]
   c1750:	4643      	mov	r3, r8
   c1752:	463a      	mov	r2, r7
   c1754:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   c1756:	bfa8      	it	ge
   c1758:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c175c:	f7fc f9f2 	bl	bdb44 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   c1760:	fab0 f080 	clz	r0, r0
   c1764:	0940      	lsrs	r0, r0, #5
   c1766:	b004      	add	sp, #16
   c1768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c176c:	000c1719 	.word	0x000c1719

000c1770 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   c1770:	f7fc ba00 	b.w	bdb74 <HAL_Interrupts_Disable_All>

000c1774 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   c1774:	f7fc b9f6 	b.w	bdb64 <HAL_Interrupts_Enable_All>

000c1778 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c1778:	2200      	movs	r2, #0
   c177a:	6840      	ldr	r0, [r0, #4]
   c177c:	4611      	mov	r1, r2
   c177e:	f7fc bd01 	b.w	be184 <network_ready>

000c1782 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c1782:	2200      	movs	r2, #0
   c1784:	6840      	ldr	r0, [r0, #4]
   c1786:	4611      	mov	r1, r2
   c1788:	f7fc bd1c 	b.w	be1c4 <network_listening>

000c178c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c178c:	2200      	movs	r2, #0
   c178e:	6840      	ldr	r0, [r0, #4]
   c1790:	4611      	mov	r1, r2
   c1792:	f7fc bd27 	b.w	be1e4 <network_get_listen_timeout>

000c1796 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c1796:	6840      	ldr	r0, [r0, #4]
   c1798:	2200      	movs	r2, #0
   c179a:	f7fc bd1b 	b.w	be1d4 <network_set_listen_timeout>

000c179e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c179e:	6840      	ldr	r0, [r0, #4]
   c17a0:	2200      	movs	r2, #0
   c17a2:	f081 0101 	eor.w	r1, r1, #1
   c17a6:	f7fc bd05 	b.w	be1b4 <network_listen>

000c17aa <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c17aa:	2300      	movs	r3, #0
   c17ac:	6840      	ldr	r0, [r0, #4]
   c17ae:	461a      	mov	r2, r3
   c17b0:	4619      	mov	r1, r3
   c17b2:	f7fc bcf7 	b.w	be1a4 <network_off>

000c17b6 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c17b6:	2300      	movs	r3, #0
   c17b8:	6840      	ldr	r0, [r0, #4]
   c17ba:	461a      	mov	r2, r3
   c17bc:	4619      	mov	r1, r3
   c17be:	f7fc bce9 	b.w	be194 <network_on>

000c17c2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c17c2:	2200      	movs	r2, #0
   c17c4:	6840      	ldr	r0, [r0, #4]
   c17c6:	4611      	mov	r1, r2
   c17c8:	f7fc bccc 	b.w	be164 <network_connecting>

000c17cc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c17cc:	6840      	ldr	r0, [r0, #4]
   c17ce:	2200      	movs	r2, #0
   c17d0:	2102      	movs	r1, #2
   c17d2:	f7fc bccf 	b.w	be174 <network_disconnect>

000c17d6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c17d6:	2300      	movs	r3, #0
   c17d8:	6840      	ldr	r0, [r0, #4]
   c17da:	461a      	mov	r2, r3
   c17dc:	f7fc bcba 	b.w	be154 <network_connect>

000c17e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c17e0:	4b08      	ldr	r3, [pc, #32]	; (c1804 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c17e2:	b510      	push	{r4, lr}
   c17e4:	2428      	movs	r4, #40	; 0x28
   c17e6:	4622      	mov	r2, r4
   c17e8:	4618      	mov	r0, r3
   c17ea:	2100      	movs	r1, #0
   c17ec:	f002 fec4 	bl	c4578 <memset>
   c17f0:	4b05      	ldr	r3, [pc, #20]	; (c1808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c17f2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c17f4:	f04f 32ff 	mov.w	r2, #4294967295
   c17f8:	6042      	str	r2, [r0, #4]
   c17fa:	2204      	movs	r2, #4
   c17fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c17fe:	4a03      	ldr	r2, [pc, #12]	; (c180c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c1800:	601a      	str	r2, [r3, #0]
   c1802:	bd10      	pop	{r4, pc}
   c1804:	2003e6f8 	.word	0x2003e6f8
   c1808:	2003e6f0 	.word	0x2003e6f0
   c180c:	000c7fa8 	.word	0x000c7fa8

000c1810 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c1810:	4770      	bx	lr

000c1812 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c1812:	7441      	strb	r1, [r0, #17]
}
   c1814:	4770      	bx	lr

000c1816 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c1816:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c1818:	7c00      	ldrb	r0, [r0, #16]
   c181a:	f7fc fb05 	bl	bde28 <hal_usart_available_data_for_write>
}
   c181e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1822:	bd08      	pop	{r3, pc}

000c1824 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c1824:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c1826:	7c00      	ldrb	r0, [r0, #16]
   c1828:	f7fc fad6 	bl	bddd8 <hal_usart_available>
}
   c182c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c1830:	bd08      	pop	{r3, pc}

000c1832 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c1832:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c1834:	7c00      	ldrb	r0, [r0, #16]
   c1836:	f7fc fadf 	bl	bddf8 <hal_usart_peek>
}
   c183a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c183e:	bd08      	pop	{r3, pc}

000c1840 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c1840:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c1842:	7c00      	ldrb	r0, [r0, #16]
   c1844:	f7fc fad0 	bl	bdde8 <hal_usart_read>
}
   c1848:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c184c:	bd08      	pop	{r3, pc}

000c184e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c184e:	7c00      	ldrb	r0, [r0, #16]
   c1850:	f7fc bada 	b.w	bde08 <hal_usart_flush>

000c1854 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c1854:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1856:	7c45      	ldrb	r5, [r0, #17]
{
   c1858:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c185a:	b12d      	cbz	r5, c1868 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c185c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c185e:	b003      	add	sp, #12
   c1860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c1864:	f7fc bab0 	b.w	bddc8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c1868:	7c00      	ldrb	r0, [r0, #16]
   c186a:	9101      	str	r1, [sp, #4]
   c186c:	f7fc fadc 	bl	bde28 <hal_usart_available_data_for_write>
   c1870:	2800      	cmp	r0, #0
   c1872:	9901      	ldr	r1, [sp, #4]
   c1874:	dcf2      	bgt.n	c185c <_ZN11USARTSerial5writeEh+0x8>
}
   c1876:	4628      	mov	r0, r5
   c1878:	b003      	add	sp, #12
   c187a:	bd30      	pop	{r4, r5, pc}

000c187c <_ZN11USARTSerialD0Ev>:
   c187c:	b510      	push	{r4, lr}
   c187e:	2114      	movs	r1, #20
   c1880:	4604      	mov	r4, r0
   c1882:	f7f2 fc0e 	bl	b40a2 <_ZdlPvj>
   c1886:	4620      	mov	r0, r4
   c1888:	bd10      	pop	{r4, pc}
	...

000c188c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c188c:	b510      	push	{r4, lr}
   c188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c1892:	4604      	mov	r4, r0
   c1894:	4608      	mov	r0, r1
   c1896:	4611      	mov	r1, r2
   c1898:	2200      	movs	r2, #0
   c189a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c189e:	4b04      	ldr	r3, [pc, #16]	; (c18b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c18a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c18a2:	2301      	movs	r3, #1
  _serial = serial;
   c18a4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c18a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c18a8:	f7fc face 	bl	bde48 <hal_usart_init_ex>
}
   c18ac:	4620      	mov	r0, r4
   c18ae:	bd10      	pop	{r4, pc}
   c18b0:	000c7fe4 	.word	0x000c7fe4

000c18b4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c18b4:	7c00      	ldrb	r0, [r0, #16]
   c18b6:	2300      	movs	r3, #0
   c18b8:	f7fc babe 	b.w	bde38 <hal_usart_begin_config>

000c18bc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c18bc:	2200      	movs	r2, #0
   c18be:	f7ff bff9 	b.w	c18b4 <_ZN11USARTSerial5beginEmm>

000c18c2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c18c2:	7c00      	ldrb	r0, [r0, #16]
   c18c4:	f7fc ba78 	b.w	bddb8 <hal_usart_end>

000c18c8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c18c8:	b510      	push	{r4, lr}
      if (_M_empty())
   c18ca:	6883      	ldr	r3, [r0, #8]
   c18cc:	4604      	mov	r4, r0
   c18ce:	b90b      	cbnz	r3, c18d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c18d0:	f000 fc2c 	bl	c212c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c18d4:	68c3      	ldr	r3, [r0, #12]
   c18d6:	4798      	blx	r3
      if (_M_manager)
   c18d8:	68a3      	ldr	r3, [r4, #8]
   c18da:	b11b      	cbz	r3, c18e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c18dc:	2203      	movs	r2, #3
   c18de:	4621      	mov	r1, r4
   c18e0:	4620      	mov	r0, r4
   c18e2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c18e4:	4620      	mov	r0, r4
   c18e6:	2110      	movs	r1, #16
}
   c18e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c18ec:	f7f2 bbd9 	b.w	b40a2 <_ZdlPvj>

000c18f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c18f0:	4770      	bx	lr

000c18f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c18f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c18f4:	4606      	mov	r6, r0
   c18f6:	4615      	mov	r5, r2
   c18f8:	460c      	mov	r4, r1
   c18fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c18fc:	42bc      	cmp	r4, r7
   c18fe:	d006      	beq.n	c190e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c1900:	6833      	ldr	r3, [r6, #0]
   c1902:	f814 1b01 	ldrb.w	r1, [r4], #1
   c1906:	689b      	ldr	r3, [r3, #8]
   c1908:	4630      	mov	r0, r6
   c190a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c190c:	e7f6      	b.n	c18fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c190e:	4628      	mov	r0, r5
   c1910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c1912 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c1912:	7c00      	ldrb	r0, [r0, #16]
   c1914:	2200      	movs	r2, #0
   c1916:	f7fc babf 	b.w	bde98 <hal_i2c_write>

000c191a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c191a:	7c00      	ldrb	r0, [r0, #16]
   c191c:	2100      	movs	r1, #0
   c191e:	f7fc bac3 	b.w	bdea8 <hal_i2c_available>

000c1922 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c1922:	7c00      	ldrb	r0, [r0, #16]
   c1924:	2100      	movs	r1, #0
   c1926:	f7fc bac7 	b.w	bdeb8 <hal_i2c_read>

000c192a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c192a:	7c00      	ldrb	r0, [r0, #16]
   c192c:	2100      	movs	r1, #0
   c192e:	f7fc bacb 	b.w	bdec8 <hal_i2c_peek>

000c1932 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c1932:	7c00      	ldrb	r0, [r0, #16]
   c1934:	2100      	movs	r1, #0
   c1936:	f7fc bacf 	b.w	bded8 <hal_i2c_flush>

000c193a <_ZN7TwoWireD0Ev>:
   c193a:	b510      	push	{r4, lr}
   c193c:	2114      	movs	r1, #20
   c193e:	4604      	mov	r4, r0
   c1940:	f7f2 fbaf 	bl	b40a2 <_ZdlPvj>
   c1944:	4620      	mov	r0, r4
   c1946:	bd10      	pop	{r4, pc}

000c1948 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c1948:	b510      	push	{r4, lr}
   c194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c194e:	4604      	mov	r4, r0
   c1950:	4608      	mov	r0, r1
   c1952:	2100      	movs	r1, #0
   c1954:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c1958:	4b03      	ldr	r3, [pc, #12]	; (c1968 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   c195a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   c195c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   c195e:	4611      	mov	r1, r2
   c1960:	f7fc faca 	bl	bdef8 <hal_i2c_init>
}
   c1964:	4620      	mov	r0, r4
   c1966:	bd10      	pop	{r4, pc}
   c1968:	000c8014 	.word	0x000c8014

000c196c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c196c:	7c00      	ldrb	r0, [r0, #16]
   c196e:	2200      	movs	r2, #0
   c1970:	f7fc ba72 	b.w	bde58 <hal_i2c_set_speed>

000c1974 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c1974:	2300      	movs	r3, #0
   c1976:	7c00      	ldrb	r0, [r0, #16]
   c1978:	461a      	mov	r2, r3
   c197a:	4619      	mov	r1, r3
   c197c:	f7fc ba74 	b.w	bde68 <hal_i2c_begin>

000c1980 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c1980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c1982:	2200      	movs	r2, #0
   c1984:	2314      	movs	r3, #20
   c1986:	e9cd 2201 	strd	r2, r2, [sp, #4]
   c198a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   c198e:	780b      	ldrb	r3, [r1, #0]
   c1990:	f88d 3008 	strb.w	r3, [sp, #8]
   c1994:	684b      	ldr	r3, [r1, #4]
   c1996:	9303      	str	r3, [sp, #12]
   c1998:	68cb      	ldr	r3, [r1, #12]
   c199a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c199c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   c199e:	7a0b      	ldrb	r3, [r1, #8]
   c19a0:	9305      	str	r3, [sp, #20]
   c19a2:	a901      	add	r1, sp, #4
   c19a4:	f7fc fab0 	bl	bdf08 <hal_i2c_request_ex>
}
   c19a8:	b007      	add	sp, #28
   c19aa:	f85d fb04 	ldr.w	pc, [sp], #4

000c19ae <_ZN7TwoWire11requestFromEhjh>:
{
   c19ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c19b0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   c19b2:	f88d 1000 	strb.w	r1, [sp]
   c19b6:	f04f 0164 	mov.w	r1, #100	; 0x64
   c19ba:	9103      	str	r1, [sp, #12]
   c19bc:	bf18      	it	ne
   c19be:	2301      	movne	r3, #1
   c19c0:	4669      	mov	r1, sp
    size_ = size;
   c19c2:	9201      	str	r2, [sp, #4]
   c19c4:	f88d 3008 	strb.w	r3, [sp, #8]
   c19c8:	f7ff ffda 	bl	c1980 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c19cc:	b005      	add	sp, #20
   c19ce:	f85d fb04 	ldr.w	pc, [sp], #4

000c19d2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c19d2:	2301      	movs	r3, #1
   c19d4:	f7ff bfeb 	b.w	c19ae <_ZN7TwoWire11requestFromEhjh>

000c19d8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c19d8:	7c00      	ldrb	r0, [r0, #16]
   c19da:	2200      	movs	r2, #0
   c19dc:	f7fc ba4c 	b.w	bde78 <hal_i2c_begin_transmission>

000c19e0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c19e0:	b2c9      	uxtb	r1, r1
   c19e2:	f7ff bff9 	b.w	c19d8 <_ZN7TwoWire17beginTransmissionEh>

000c19e6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c19e6:	7c00      	ldrb	r0, [r0, #16]
   c19e8:	2200      	movs	r2, #0
   c19ea:	f7fc ba4d 	b.w	bde88 <hal_i2c_end_transmission>

000c19ee <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c19ee:	2101      	movs	r1, #1
   c19f0:	f7ff bff9 	b.w	c19e6 <_ZN7TwoWire15endTransmissionEh>

000c19f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c19f4:	2300      	movs	r3, #0
   c19f6:	6840      	ldr	r0, [r0, #4]
   c19f8:	461a      	mov	r2, r3
   c19fa:	f7fc bbab 	b.w	be154 <network_connect>

000c19fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c19fe:	6840      	ldr	r0, [r0, #4]
   c1a00:	2200      	movs	r2, #0
   c1a02:	2102      	movs	r1, #2
   c1a04:	f7fc bbb6 	b.w	be174 <network_disconnect>

000c1a08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c1a08:	2200      	movs	r2, #0
   c1a0a:	6840      	ldr	r0, [r0, #4]
   c1a0c:	4611      	mov	r1, r2
   c1a0e:	f7fc bba9 	b.w	be164 <network_connecting>

000c1a12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c1a12:	2200      	movs	r2, #0
   c1a14:	6840      	ldr	r0, [r0, #4]
   c1a16:	4611      	mov	r1, r2
   c1a18:	f7fc bbb4 	b.w	be184 <network_ready>

000c1a1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c1a1c:	2300      	movs	r3, #0
   c1a1e:	6840      	ldr	r0, [r0, #4]
   c1a20:	461a      	mov	r2, r3
   c1a22:	4619      	mov	r1, r3
   c1a24:	f7fc bbb6 	b.w	be194 <network_on>

000c1a28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c1a28:	2300      	movs	r3, #0
   c1a2a:	6840      	ldr	r0, [r0, #4]
   c1a2c:	461a      	mov	r2, r3
   c1a2e:	4619      	mov	r1, r3
   c1a30:	f7fc bbb8 	b.w	be1a4 <network_off>

000c1a34 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c1a34:	6840      	ldr	r0, [r0, #4]
   c1a36:	2100      	movs	r1, #0
   c1a38:	f7fc bbdc 	b.w	be1f4 <network_is_on>

000c1a3c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c1a3c:	6840      	ldr	r0, [r0, #4]
   c1a3e:	2100      	movs	r1, #0
   c1a40:	f7fc bbe0 	b.w	be204 <network_is_off>

000c1a44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c1a44:	6840      	ldr	r0, [r0, #4]
   c1a46:	2200      	movs	r2, #0
   c1a48:	f081 0101 	eor.w	r1, r1, #1
   c1a4c:	f7fc bbb2 	b.w	be1b4 <network_listen>

000c1a50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c1a50:	6840      	ldr	r0, [r0, #4]
   c1a52:	2200      	movs	r2, #0
   c1a54:	f7fc bbbe 	b.w	be1d4 <network_set_listen_timeout>

000c1a58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c1a58:	2200      	movs	r2, #0
   c1a5a:	6840      	ldr	r0, [r0, #4]
   c1a5c:	4611      	mov	r1, r2
   c1a5e:	f7fc bbc1 	b.w	be1e4 <network_get_listen_timeout>

000c1a62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c1a62:	2200      	movs	r2, #0
   c1a64:	6840      	ldr	r0, [r0, #4]
   c1a66:	4611      	mov	r1, r2
   c1a68:	f7fc bbac 	b.w	be1c4 <network_listening>

000c1a6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c1a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c1a70:	b095      	sub	sp, #84	; 0x54
   c1a72:	4614      	mov	r4, r2
   c1a74:	460d      	mov	r5, r1
   c1a76:	4607      	mov	r7, r0
    IPAddress addr;
   c1a78:	f7ff fd88 	bl	c158c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c1a7c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c1a7e:	221c      	movs	r2, #28
   c1a80:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c1a82:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c1a84:	f002 fd78 	bl	c4578 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c1a88:	2340      	movs	r3, #64	; 0x40
   c1a8a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c1a8c:	4620      	mov	r0, r4
   c1a8e:	466b      	mov	r3, sp
   c1a90:	aa0c      	add	r2, sp, #48	; 0x30
   c1a92:	2100      	movs	r1, #0
   c1a94:	f7fc f826 	bl	bdae4 <netdb_getaddrinfo>
    if (!r) {
   c1a98:	4604      	mov	r4, r0
   c1a9a:	2800      	cmp	r0, #0
   c1a9c:	d14b      	bne.n	c1b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1a9e:	4602      	mov	r2, r0
   c1aa0:	2101      	movs	r1, #1
   c1aa2:	6868      	ldr	r0, [r5, #4]
   c1aa4:	f7fc fb6e 	bl	be184 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1aa8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c1aaa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1aac:	4622      	mov	r2, r4
   c1aae:	6868      	ldr	r0, [r5, #4]
   c1ab0:	f7fc fb68 	bl	be184 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1ab4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c1ab6:	4681      	mov	r9, r0
        bool ok = false;
   c1ab8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1aba:	2e00      	cmp	r6, #0
   c1abc:	d03b      	beq.n	c1b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c1abe:	2900      	cmp	r1, #0
   c1ac0:	d139      	bne.n	c1b36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c1ac2:	6873      	ldr	r3, [r6, #4]
   c1ac4:	2b02      	cmp	r3, #2
   c1ac6:	d003      	beq.n	c1ad0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c1ac8:	2b0a      	cmp	r3, #10
   c1aca:	d011      	beq.n	c1af0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c1acc:	69f6      	ldr	r6, [r6, #28]
   c1ace:	e7f4      	b.n	c1aba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c1ad0:	f1b8 0f00 	cmp.w	r8, #0
   c1ad4:	d0fa      	beq.n	c1acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c1ad6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c1ad8:	a806      	add	r0, sp, #24
   c1ada:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c1adc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c1ade:	f7ff fd83 	bl	c15e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c1ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1ae4:	1d3c      	adds	r4, r7, #4
   c1ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1ae8:	682b      	ldr	r3, [r5, #0]
   c1aea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1aec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c1aee:	e7ed      	b.n	c1acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c1af0:	f1b9 0f00 	cmp.w	r9, #0
   c1af4:	d0ea      	beq.n	c1acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c1af6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c1af8:	2210      	movs	r2, #16
   c1afa:	a801      	add	r0, sp, #4
   c1afc:	f002 fd3c 	bl	c4578 <memset>
                    a.v = 6;
   c1b00:	2306      	movs	r3, #6
   c1b02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c1b06:	ad01      	add	r5, sp, #4
   c1b08:	f104 0308 	add.w	r3, r4, #8
   c1b0c:	3418      	adds	r4, #24
   c1b0e:	6818      	ldr	r0, [r3, #0]
   c1b10:	6859      	ldr	r1, [r3, #4]
   c1b12:	462a      	mov	r2, r5
   c1b14:	c203      	stmia	r2!, {r0, r1}
   c1b16:	3308      	adds	r3, #8
   c1b18:	42a3      	cmp	r3, r4
   c1b1a:	4615      	mov	r5, r2
   c1b1c:	d1f7      	bne.n	c1b0e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c1b1e:	a901      	add	r1, sp, #4
   c1b20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c1b22:	ad07      	add	r5, sp, #28
   c1b24:	f7ff fd40 	bl	c15a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c1b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c1b2a:	1d3c      	adds	r4, r7, #4
   c1b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c1b2e:	682b      	ldr	r3, [r5, #0]
   c1b30:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c1b32:	4649      	mov	r1, r9
   c1b34:	e7ca      	b.n	c1acc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c1b36:	9800      	ldr	r0, [sp, #0]
   c1b38:	f7fb ffcc 	bl	bdad4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c1b3c:	4638      	mov	r0, r7
   c1b3e:	b015      	add	sp, #84	; 0x54
   c1b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c1b44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c1b44:	4b02      	ldr	r3, [pc, #8]	; (c1b50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c1b46:	4a03      	ldr	r2, [pc, #12]	; (c1b54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c1b48:	601a      	str	r2, [r3, #0]
   c1b4a:	2200      	movs	r2, #0
   c1b4c:	605a      	str	r2, [r3, #4]

} // spark
   c1b4e:	4770      	bx	lr
   c1b50:	2003e720 	.word	0x2003e720
   c1b54:	000c803c 	.word	0x000c803c

000c1b58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   c1b58:	f100 0310 	add.w	r3, r0, #16
   c1b5c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   c1b5e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   c1b62:	2901      	cmp	r1, #1
   c1b64:	4618      	mov	r0, r3
   c1b66:	d108      	bne.n	c1b7a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   c1b68:	f853 1c04 	ldr.w	r1, [r3, #-4]
   c1b6c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   c1b70:	3a01      	subs	r2, #1
   c1b72:	f103 0310 	add.w	r3, r3, #16
   c1b76:	d1f2      	bne.n	c1b5e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   c1b78:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   c1b7a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   c1b7c:	bf04      	itt	eq
   c1b7e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   c1b82:	1852      	addeq	r2, r2, r1
   c1b84:	e7f4      	b.n	c1b70 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000c1b86 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   c1b86:	b40e      	push	{r1, r2, r3}
   c1b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   c1b8a:	b088      	sub	sp, #32
   c1b8c:	af00      	add	r7, sp, #0
   c1b8e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1b92:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1b94:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1b98:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   c1b9a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1b9c:	462b      	mov	r3, r5
   c1b9e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   c1ba0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1ba2:	f7fc fb9f 	bl	be2e4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   c1ba6:	280f      	cmp	r0, #15
   c1ba8:	687a      	ldr	r2, [r7, #4]
   c1baa:	d91a      	bls.n	c1be2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   c1bac:	f100 0308 	add.w	r3, r0, #8
   c1bb0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   c1bb4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   c1bb6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1bba:	1c41      	adds	r1, r0, #1
   c1bbc:	462b      	mov	r3, r5
   c1bbe:	4668      	mov	r0, sp
        va_start(args, fmt);
   c1bc0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   c1bc2:	f7fc fb8f 	bl	be2e4 <vsnprintf>
        if (n > 0) {
   c1bc6:	1e02      	subs	r2, r0, #0
   c1bc8:	dd04      	ble.n	c1bd4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   c1bca:	6823      	ldr	r3, [r4, #0]
   c1bcc:	4669      	mov	r1, sp
   c1bce:	689b      	ldr	r3, [r3, #8]
   c1bd0:	4620      	mov	r0, r4
   c1bd2:	4798      	blx	r3
   c1bd4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   c1bd6:	3720      	adds	r7, #32
   c1bd8:	46bd      	mov	sp, r7
   c1bda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c1bde:	b003      	add	sp, #12
   c1be0:	4770      	bx	lr
    } else if (n > 0) {
   c1be2:	2800      	cmp	r0, #0
   c1be4:	d0f7      	beq.n	c1bd6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   c1be6:	6823      	ldr	r3, [r4, #0]
   c1be8:	4602      	mov	r2, r0
   c1bea:	689b      	ldr	r3, [r3, #8]
   c1bec:	f107 0110 	add.w	r1, r7, #16
   c1bf0:	4620      	mov	r0, r4
   c1bf2:	4798      	blx	r3
}
   c1bf4:	e7ef      	b.n	c1bd6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000c1bf6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1bf6:	b538      	push	{r3, r4, r5, lr}
   c1bf8:	680b      	ldr	r3, [r1, #0]
   c1bfa:	6003      	str	r3, [r0, #0]
   c1bfc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   c1bfe:	6843      	ldr	r3, [r0, #4]
   c1c00:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1c02:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   c1c04:	d008      	beq.n	c1c18 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   c1c06:	b115      	cbz	r5, c1c0e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   c1c08:	686b      	ldr	r3, [r5, #4]
   c1c0a:	3301      	adds	r3, #1
   c1c0c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   c1c0e:	6860      	ldr	r0, [r4, #4]
   c1c10:	b108      	cbz	r0, c1c16 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   c1c12:	f7fc fef8 	bl	bea06 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   c1c16:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   c1c18:	bd38      	pop	{r3, r4, r5, pc}

000c1c1a <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   c1c1a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c1c1c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c1c1e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c1c22:	689b      	ldr	r3, [r3, #8]
   c1c24:	2201      	movs	r2, #1
   c1c26:	f10d 0107 	add.w	r1, sp, #7
   c1c2a:	4798      	blx	r3
}
   c1c2c:	b003      	add	sp, #12
   c1c2e:	f85d fb04 	ldr.w	pc, [sp], #4

000c1c32 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1c32:	460b      	mov	r3, r1
   c1c34:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   c1c36:	2200      	movs	r2, #0
   c1c38:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   c1c3a:	e9c0 2200 	strd	r2, r2, [r0]
   c1c3e:	4604      	mov	r4, r0
        t_ = t;
   c1c40:	6083      	str	r3, [r0, #8]
    if (t) {
   c1c42:	b90b      	cbnz	r3, c1c48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   c1c44:	4620      	mov	r0, r4
   c1c46:	bd10      	pop	{r4, pc}
      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   c1c48:	f7ff ffd5 	bl	c1bf6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   c1c4c:	e7fa      	b.n	c1c44 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000c1c4e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   c1c4e:	6883      	ldr	r3, [r0, #8]
   c1c50:	b1eb      	cbz	r3, c1c8e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   c1c52:	781a      	ldrb	r2, [r3, #0]
   c1c54:	2a03      	cmp	r2, #3
   c1c56:	d81a      	bhi.n	c1c8e <_ZNK5spark9JSONValue4typeEv+0x40>
   c1c58:	e8df f002 	tbb	[pc, r2]
   c1c5c:	1b021704 	.word	0x1b021704
   c1c60:	2005      	movs	r0, #5
   c1c62:	4770      	bx	lr
        const char c = d_->json[t_->start];
   c1c64:	6802      	ldr	r2, [r0, #0]
   c1c66:	685b      	ldr	r3, [r3, #4]
   c1c68:	6852      	ldr	r2, [r2, #4]
   c1c6a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   c1c6c:	282d      	cmp	r0, #45	; 0x2d
   c1c6e:	d012      	beq.n	c1c96 <_ZNK5spark9JSONValue4typeEv+0x48>
   c1c70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c1c74:	2b09      	cmp	r3, #9
   c1c76:	d90e      	bls.n	c1c96 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   c1c78:	2874      	cmp	r0, #116	; 0x74
   c1c7a:	d00e      	beq.n	c1c9a <_ZNK5spark9JSONValue4typeEv+0x4c>
   c1c7c:	2866      	cmp	r0, #102	; 0x66
   c1c7e:	d00c      	beq.n	c1c9a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   c1c80:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   c1c84:	4258      	negs	r0, r3
   c1c86:	4158      	adcs	r0, r3
   c1c88:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   c1c8a:	2006      	movs	r0, #6
   c1c8c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   c1c8e:	2000      	movs	r0, #0
   c1c90:	4770      	bx	lr
        return JSON_TYPE_STRING;
   c1c92:	2004      	movs	r0, #4
   c1c94:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   c1c96:	2003      	movs	r0, #3
   c1c98:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   c1c9a:	2002      	movs	r0, #2
}
   c1c9c:	4770      	bx	lr

000c1c9e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   c1c9e:	b510      	push	{r4, lr}
   c1ca0:	4604      	mov	r4, r0
    switch (type()) {
   c1ca2:	f7ff ffd4 	bl	c1c4e <_ZNK5spark9JSONValue4typeEv>
   c1ca6:	2802      	cmp	r0, #2
   c1ca8:	d00e      	beq.n	c1cc8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   c1caa:	1ec3      	subs	r3, r0, #3
   c1cac:	b2db      	uxtb	r3, r3
   c1cae:	2b01      	cmp	r3, #1
   c1cb0:	d814      	bhi.n	c1cdc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   c1cb2:	6822      	ldr	r2, [r4, #0]
   c1cb4:	68a3      	ldr	r3, [r4, #8]
   c1cb6:	6850      	ldr	r0, [r2, #4]
   c1cb8:	685b      	ldr	r3, [r3, #4]
}
   c1cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   c1cbe:	220a      	movs	r2, #10
   c1cc0:	2100      	movs	r1, #0
   c1cc2:	4418      	add	r0, r3
   c1cc4:	f003 bc0c 	b.w	c54e0 <strtol>
        const char* const s = d_->json + t_->start;
   c1cc8:	6822      	ldr	r2, [r4, #0]
   c1cca:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   c1ccc:	6852      	ldr	r2, [r2, #4]
   c1cce:	685b      	ldr	r3, [r3, #4]
   c1cd0:	5cd0      	ldrb	r0, [r2, r3]
   c1cd2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   c1cd6:	4258      	negs	r0, r3
   c1cd8:	4158      	adcs	r0, r3
}
   c1cda:	bd10      	pop	{r4, pc}
    switch (type()) {
   c1cdc:	2000      	movs	r0, #0
   c1cde:	e7fc      	b.n	c1cda <_ZNK5spark9JSONValue5toIntEv+0x3c>

000c1ce0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1ce0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1ce2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   c1ce4:	e9c0 3300 	strd	r3, r3, [r0]
   c1ce8:	4604      	mov	r4, r0
        n_(0) {
   c1cea:	480e      	ldr	r0, [pc, #56]	; (c1d24 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   c1cec:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   c1cf0:	b1a9      	cbz	r1, c1d1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   c1cf2:	780b      	ldrb	r3, [r1, #0]
   c1cf4:	2b03      	cmp	r3, #3
   c1cf6:	d006      	beq.n	c1d06 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   c1cf8:	b98b      	cbnz	r3, c1d1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   c1cfa:	6813      	ldr	r3, [r2, #0]
   c1cfc:	6858      	ldr	r0, [r3, #4]
   c1cfe:	684b      	ldr	r3, [r1, #4]
   c1d00:	5cc3      	ldrb	r3, [r0, r3]
   c1d02:	2b6e      	cmp	r3, #110	; 0x6e
   c1d04:	d007      	beq.n	c1d16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   c1d06:	6813      	ldr	r3, [r2, #0]
   c1d08:	684d      	ldr	r5, [r1, #4]
   c1d0a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   c1d0c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   c1d0e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   c1d10:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   c1d12:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   c1d14:	60e3      	str	r3, [r4, #12]
   c1d16:	4611      	mov	r1, r2
   c1d18:	4620      	mov	r0, r4
   c1d1a:	f7ff ff6c 	bl	c1bf6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1d1e:	4620      	mov	r0, r4
   c1d20:	bd38      	pop	{r3, r4, r5, pc}
   c1d22:	bf00      	nop
   c1d24:	000c7e94 	.word	0x000c7e94

000c1d28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   c1d28:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   c1d2a:	2500      	movs	r5, #0
   c1d2c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   c1d2e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   c1d32:	e9c0 5502 	strd	r5, r5, [r0, #8]
   c1d36:	e9c0 5504 	strd	r5, r5, [r0, #16]
   c1d3a:	4604      	mov	r4, r0
   c1d3c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   c1d3e:	b14b      	cbz	r3, c1d54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   c1d40:	781a      	ldrb	r2, [r3, #0]
   c1d42:	2a01      	cmp	r2, #1
   c1d44:	d106      	bne.n	c1d54 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   c1d46:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   c1d4a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   c1d4c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   c1d4e:	6143      	str	r3, [r0, #20]
   c1d50:	f7ff ff51 	bl	c1bf6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   c1d54:	4620      	mov	r0, r4
   c1d56:	bd38      	pop	{r3, r4, r5, pc}

000c1d58 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   c1d58:	b510      	push	{r4, lr}
    if (!n_) {
   c1d5a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   c1d5c:	4604      	mov	r4, r0
    if (!n_) {
   c1d5e:	b163      	cbz	r3, c1d7a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   c1d60:	6880      	ldr	r0, [r0, #8]
   c1d62:	60e0      	str	r0, [r4, #12]
    --n_;
   c1d64:	3b01      	subs	r3, #1
    ++t_;
   c1d66:	3010      	adds	r0, #16
   c1d68:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   c1d6a:	6120      	str	r0, [r4, #16]
    --n_;
   c1d6c:	6163      	str	r3, [r4, #20]
    if (n_) {
   c1d6e:	b113      	cbz	r3, c1d76 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   c1d70:	f7ff fef2 	bl	c1b58 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   c1d74:	60a0      	str	r0, [r4, #8]
    return true;
   c1d76:	2001      	movs	r0, #1
   c1d78:	e000      	b.n	c1d7c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   c1d7a:	4618      	mov	r0, r3
}
   c1d7c:	bd10      	pop	{r4, pc}

000c1d7e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1d7e:	b510      	push	{r4, lr}
    write('}');
   c1d80:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c1d82:	4604      	mov	r4, r0
    write('}');
   c1d84:	f7ff ff49 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c1d88:	2301      	movs	r3, #1
   c1d8a:	7123      	strb	r3, [r4, #4]
}
   c1d8c:	4620      	mov	r0, r4
   c1d8e:	bd10      	pop	{r4, pc}

000c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   c1d90:	b508      	push	{r3, lr}
    switch (state_) {
   c1d92:	7903      	ldrb	r3, [r0, #4]
   c1d94:	2b01      	cmp	r3, #1
   c1d96:	d002      	beq.n	c1d9e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c1d98:	2b02      	cmp	r3, #2
   c1d9a:	d004      	beq.n	c1da6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   c1d9c:	bd08      	pop	{r3, pc}
        write(',');
   c1d9e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c1da0:	f7ff ff3b 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
}
   c1da4:	e7fa      	b.n	c1d9c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c1da6:	213a      	movs	r1, #58	; 0x3a
   c1da8:	e7fa      	b.n	c1da0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c1daa <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c1daa:	b510      	push	{r4, lr}
   c1dac:	4604      	mov	r4, r0
    writeSeparator();
   c1dae:	f7ff ffef 	bl	c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c1db2:	4620      	mov	r0, r4
   c1db4:	217b      	movs	r1, #123	; 0x7b
   c1db6:	f7ff ff30 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c1dba:	2300      	movs	r3, #0
   c1dbc:	7123      	strb	r3, [r4, #4]
}
   c1dbe:	4620      	mov	r0, r4
   c1dc0:	bd10      	pop	{r4, pc}
	...

000c1dc4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c1dc4:	b513      	push	{r0, r1, r4, lr}
   c1dc6:	4604      	mov	r4, r0
   c1dc8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1dca:	f7ff ffe1 	bl	c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c1dce:	6823      	ldr	r3, [r4, #0]
   c1dd0:	9a01      	ldr	r2, [sp, #4]
   c1dd2:	68db      	ldr	r3, [r3, #12]
   c1dd4:	4903      	ldr	r1, [pc, #12]	; (c1de4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c1dd6:	4620      	mov	r0, r4
   c1dd8:	4798      	blx	r3
    state_ = NEXT;
   c1dda:	2301      	movs	r3, #1
}
   c1ddc:	4620      	mov	r0, r4
    state_ = NEXT;
   c1dde:	7123      	strb	r3, [r4, #4]
}
   c1de0:	b002      	add	sp, #8
   c1de2:	bd10      	pop	{r4, pc}
   c1de4:	000c68f4 	.word	0x000c68f4

000c1de8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c1de8:	b513      	push	{r0, r1, r4, lr}
   c1dea:	4604      	mov	r4, r0
   c1dec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c1dee:	f7ff ffcf 	bl	c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c1df2:	6823      	ldr	r3, [r4, #0]
   c1df4:	9a01      	ldr	r2, [sp, #4]
   c1df6:	68db      	ldr	r3, [r3, #12]
   c1df8:	4903      	ldr	r1, [pc, #12]	; (c1e08 <_ZN5spark10JSONWriter5valueEj+0x20>)
   c1dfa:	4620      	mov	r0, r4
   c1dfc:	4798      	blx	r3
    state_ = NEXT;
   c1dfe:	2301      	movs	r3, #1
}
   c1e00:	4620      	mov	r0, r4
    state_ = NEXT;
   c1e02:	7123      	strb	r3, [r4, #4]
}
   c1e04:	b002      	add	sp, #8
   c1e06:	bd10      	pop	{r4, pc}
   c1e08:	000c8070 	.word	0x000c8070

000c1e0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c1e10:	460d      	mov	r5, r1
    write('"');
   c1e12:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c1e14:	4690      	mov	r8, r2
   c1e16:	4604      	mov	r4, r0
    write('"');
   c1e18:	f7ff feff 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   c1e1c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c1ec4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c1e20:	44a8      	add	r8, r5
    const char *s = str;
   c1e22:	462f      	mov	r7, r5
    while (s != end) {
   c1e24:	4547      	cmp	r7, r8
   c1e26:	46ba      	mov	sl, r7
   c1e28:	d03d      	beq.n	c1ea6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c1e2a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c1e2e:	2e22      	cmp	r6, #34	; 0x22
   c1e30:	d006      	beq.n	c1e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1e32:	2e5c      	cmp	r6, #92	; 0x5c
   c1e34:	d004      	beq.n	c1e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c1e36:	4630      	mov	r0, r6
   c1e38:	f002 fb5e 	bl	c44f8 <isprint>
   c1e3c:	2800      	cmp	r0, #0
   c1e3e:	d1f1      	bne.n	c1e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c1e40:	6823      	ldr	r3, [r4, #0]
   c1e42:	ebaa 0205 	sub.w	r2, sl, r5
   c1e46:	689b      	ldr	r3, [r3, #8]
   c1e48:	4629      	mov	r1, r5
   c1e4a:	4620      	mov	r0, r4
   c1e4c:	4798      	blx	r3
            write('\\');
   c1e4e:	215c      	movs	r1, #92	; 0x5c
   c1e50:	4620      	mov	r0, r4
   c1e52:	f7ff fee2 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c1e56:	2e0d      	cmp	r6, #13
   c1e58:	d80a      	bhi.n	c1e70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c1e5a:	2e07      	cmp	r6, #7
   c1e5c:	d91c      	bls.n	c1e98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1e5e:	f1a6 0308 	sub.w	r3, r6, #8
   c1e62:	2b05      	cmp	r3, #5
   c1e64:	d818      	bhi.n	c1e98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c1e66:	e8df f003 	tbb	[pc, r3]
   c1e6a:	0f0d      	.short	0x0f0d
   c1e6c:	15131711 	.word	0x15131711
   c1e70:	2e22      	cmp	r6, #34	; 0x22
   c1e72:	d001      	beq.n	c1e78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c1e74:	2e5c      	cmp	r6, #92	; 0x5c
   c1e76:	d10f      	bne.n	c1e98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c1e78:	4631      	mov	r1, r6
                write('b');
   c1e7a:	4620      	mov	r0, r4
   c1e7c:	f7ff fecd 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   c1e80:	463d      	mov	r5, r7
    while (s != end) {
   c1e82:	e7cf      	b.n	c1e24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c1e84:	2162      	movs	r1, #98	; 0x62
   c1e86:	e7f8      	b.n	c1e7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c1e88:	2174      	movs	r1, #116	; 0x74
   c1e8a:	e7f6      	b.n	c1e7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c1e8c:	216e      	movs	r1, #110	; 0x6e
   c1e8e:	e7f4      	b.n	c1e7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c1e90:	2166      	movs	r1, #102	; 0x66
   c1e92:	e7f2      	b.n	c1e7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c1e94:	2172      	movs	r1, #114	; 0x72
   c1e96:	e7f0      	b.n	c1e7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c1e98:	6823      	ldr	r3, [r4, #0]
   c1e9a:	4632      	mov	r2, r6
   c1e9c:	68db      	ldr	r3, [r3, #12]
   c1e9e:	4649      	mov	r1, r9
   c1ea0:	4620      	mov	r0, r4
   c1ea2:	4798      	blx	r3
                break;
   c1ea4:	e7ec      	b.n	c1e80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   c1ea6:	42bd      	cmp	r5, r7
   c1ea8:	d005      	beq.n	c1eb6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c1eaa:	6823      	ldr	r3, [r4, #0]
   c1eac:	1b7a      	subs	r2, r7, r5
   c1eae:	689b      	ldr	r3, [r3, #8]
   c1eb0:	4629      	mov	r1, r5
   c1eb2:	4620      	mov	r0, r4
   c1eb4:	4798      	blx	r3
    }
    write('"');
   c1eb6:	2122      	movs	r1, #34	; 0x22
   c1eb8:	4620      	mov	r0, r4
   c1eba:	f7ff feae 	bl	c1c1a <_ZN5spark10JSONWriter5writeEc>
}
   c1ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c1ec2:	bf00      	nop
   c1ec4:	000c8073 	.word	0x000c8073

000c1ec8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c1ec8:	b513      	push	{r0, r1, r4, lr}
   c1eca:	4604      	mov	r4, r0
   c1ecc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1ed0:	f7ff ff5e 	bl	c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c1ed4:	4620      	mov	r0, r4
   c1ed6:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1eda:	f7ff ff97 	bl	c1e0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c1ede:	2302      	movs	r3, #2
}
   c1ee0:	4620      	mov	r0, r4
    state_ = VALUE;
   c1ee2:	7123      	strb	r3, [r4, #4]
}
   c1ee4:	b002      	add	sp, #8
   c1ee6:	bd10      	pop	{r4, pc}

000c1ee8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c1ee8:	b513      	push	{r0, r1, r4, lr}
   c1eea:	4604      	mov	r4, r0
   c1eec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c1ef0:	f7ff ff4e 	bl	c1d90 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c1ef4:	4620      	mov	r0, r4
   c1ef6:	e9dd 2100 	ldrd	r2, r1, [sp]
   c1efa:	f7ff ff87 	bl	c1e0c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c1efe:	2301      	movs	r3, #1
}
   c1f00:	4620      	mov	r0, r4
    state_ = NEXT;
   c1f02:	7123      	strb	r3, [r4, #4]
}
   c1f04:	b002      	add	sp, #8
   c1f06:	bd10      	pop	{r4, pc}

000c1f08 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c1f08:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c1f0a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c1f0c:	d902      	bls.n	c1f14 <pinAvailable+0xc>
    return false;
   c1f0e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c1f10:	b002      	add	sp, #8
   c1f12:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c1f14:	f1a0 030b 	sub.w	r3, r0, #11
   c1f18:	2b02      	cmp	r3, #2
   c1f1a:	d81a      	bhi.n	c1f52 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c1f1c:	4c17      	ldr	r4, [pc, #92]	; (c1f7c <pinAvailable+0x74>)
   c1f1e:	7821      	ldrb	r1, [r4, #0]
   c1f20:	f3bf 8f5b 	dmb	ish
   c1f24:	f011 0101 	ands.w	r1, r1, #1
   c1f28:	d10b      	bne.n	c1f42 <pinAvailable+0x3a>
   c1f2a:	4620      	mov	r0, r4
   c1f2c:	9101      	str	r1, [sp, #4]
   c1f2e:	f7f2 f8c7 	bl	b40c0 <__cxa_guard_acquire>
   c1f32:	9901      	ldr	r1, [sp, #4]
   c1f34:	b128      	cbz	r0, c1f42 <pinAvailable+0x3a>
   c1f36:	4812      	ldr	r0, [pc, #72]	; (c1f80 <pinAvailable+0x78>)
   c1f38:	f7fc fa78 	bl	be42c <_ZN8SPIClassC1E19hal_spi_interface_t>
   c1f3c:	4620      	mov	r0, r4
   c1f3e:	f7f2 f8c4 	bl	b40ca <__cxa_guard_release>
   c1f42:	4b0f      	ldr	r3, [pc, #60]	; (c1f80 <pinAvailable+0x78>)
   c1f44:	7818      	ldrb	r0, [r3, #0]
   c1f46:	f7fb ffff 	bl	bdf48 <hal_spi_is_enabled>
   c1f4a:	2800      	cmp	r0, #0
   c1f4c:	d1df      	bne.n	c1f0e <pinAvailable+0x6>
  return true; // 'pin' is available
   c1f4e:	2001      	movs	r0, #1
   c1f50:	e7de      	b.n	c1f10 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c1f52:	2801      	cmp	r0, #1
   c1f54:	d809      	bhi.n	c1f6a <pinAvailable+0x62>
   c1f56:	f000 f8c1 	bl	c20dc <_Z19__fetch_global_Wirev>
   c1f5a:	2100      	movs	r1, #0
   c1f5c:	7c00      	ldrb	r0, [r0, #16]
   c1f5e:	f7fb ffc3 	bl	bdee8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c1f62:	f080 0001 	eor.w	r0, r0, #1
   c1f66:	b2c0      	uxtb	r0, r0
   c1f68:	e7d2      	b.n	c1f10 <pinAvailable+0x8>
   c1f6a:	3809      	subs	r0, #9
   c1f6c:	2801      	cmp	r0, #1
   c1f6e:	d8ee      	bhi.n	c1f4e <pinAvailable+0x46>
   c1f70:	f000 f878 	bl	c2064 <_Z22__fetch_global_Serial1v>
   c1f74:	7c00      	ldrb	r0, [r0, #16]
   c1f76:	f7fb ff4f 	bl	bde18 <hal_usart_is_enabled>
   c1f7a:	e7f2      	b.n	c1f62 <pinAvailable+0x5a>
   c1f7c:	2003dd28 	.word	0x2003dd28
   c1f80:	2003dd2c 	.word	0x2003dd2c

000c1f84 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1f84:	2823      	cmp	r0, #35	; 0x23
{
   c1f86:	b538      	push	{r3, r4, r5, lr}
   c1f88:	4604      	mov	r4, r0
   c1f8a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c1f8c:	d80a      	bhi.n	c1fa4 <pinMode+0x20>
   c1f8e:	29ff      	cmp	r1, #255	; 0xff
   c1f90:	d008      	beq.n	c1fa4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c1f92:	f7ff ffb9 	bl	c1f08 <pinAvailable>
   c1f96:	b128      	cbz	r0, c1fa4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c1f98:	4629      	mov	r1, r5
   c1f9a:	4620      	mov	r0, r4
}
   c1f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c1fa0:	f7fb bdb0 	b.w	bdb04 <HAL_Pin_Mode>
}
   c1fa4:	bd38      	pop	{r3, r4, r5, pc}

000c1fa6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c1fa6:	b538      	push	{r3, r4, r5, lr}
   c1fa8:	4604      	mov	r4, r0
   c1faa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1fac:	f7fb fdb2 	bl	bdb14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c1fb0:	28ff      	cmp	r0, #255	; 0xff
   c1fb2:	d010      	beq.n	c1fd6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c1fb4:	2806      	cmp	r0, #6
   c1fb6:	d804      	bhi.n	c1fc2 <digitalWrite+0x1c>
   c1fb8:	234d      	movs	r3, #77	; 0x4d
   c1fba:	fa23 f000 	lsr.w	r0, r3, r0
   c1fbe:	07c3      	lsls	r3, r0, #31
   c1fc0:	d409      	bmi.n	c1fd6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c1fc2:	4620      	mov	r0, r4
   c1fc4:	f7ff ffa0 	bl	c1f08 <pinAvailable>
   c1fc8:	b128      	cbz	r0, c1fd6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c1fca:	4629      	mov	r1, r5
   c1fcc:	4620      	mov	r0, r4
}
   c1fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c1fd2:	f7fb bda7 	b.w	bdb24 <HAL_GPIO_Write>
}
   c1fd6:	bd38      	pop	{r3, r4, r5, pc}

000c1fd8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c1fd8:	b510      	push	{r4, lr}
   c1fda:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c1fdc:	f7fb fd9a 	bl	bdb14 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c1fe0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c1fe2:	b2db      	uxtb	r3, r3
   c1fe4:	2b01      	cmp	r3, #1
   c1fe6:	d908      	bls.n	c1ffa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c1fe8:	4620      	mov	r0, r4
   c1fea:	f7ff ff8d 	bl	c1f08 <pinAvailable>
   c1fee:	b120      	cbz	r0, c1ffa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c1ff0:	4620      	mov	r0, r4
}
   c1ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c1ff6:	f7fb bd9d 	b.w	bdb34 <HAL_GPIO_Read>
}
   c1ffa:	2000      	movs	r0, #0
   c1ffc:	bd10      	pop	{r4, pc}

000c1ffe <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c1ffe:	280d      	cmp	r0, #13
{
   c2000:	b510      	push	{r4, lr}
   c2002:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c2004:	bf9c      	itt	ls
   c2006:	340e      	addls	r4, #14
   c2008:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c200a:	4620      	mov	r0, r4
   c200c:	f7ff ff7c 	bl	c1f08 <pinAvailable>
   c2010:	b150      	cbz	r0, c2028 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c2012:	2103      	movs	r1, #3
   c2014:	4620      	mov	r0, r4
   c2016:	f7fb fd6d 	bl	bdaf4 <HAL_Validate_Pin_Function>
   c201a:	2803      	cmp	r0, #3
   c201c:	d104      	bne.n	c2028 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c201e:	4620      	mov	r0, r4
}
   c2020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c2024:	f7fb bdae 	b.w	bdb84 <hal_adc_read>
}
   c2028:	2000      	movs	r0, #0
   c202a:	bd10      	pop	{r4, pc}

000c202c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c202c:	4770      	bx	lr
	...

000c2030 <_Z20acquireSerial1Bufferv>:
{
   c2030:	b538      	push	{r3, r4, r5, lr}
   c2032:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c2034:	2514      	movs	r5, #20
   c2036:	462a      	mov	r2, r5
   c2038:	2100      	movs	r1, #0
   c203a:	f002 fa9d 	bl	c4578 <memset>
   c203e:	8025      	strh	r5, [r4, #0]
   c2040:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c2042:	4907      	ldr	r1, [pc, #28]	; (c2060 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c2044:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c2046:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c2048:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c204a:	f000 f86d 	bl	c2128 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c204e:	4904      	ldr	r1, [pc, #16]	; (c2060 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c2050:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c2052:	4628      	mov	r0, r5
   c2054:	f000 f868 	bl	c2128 <_ZnajRKSt9nothrow_t>
    };
   c2058:	60e0      	str	r0, [r4, #12]
}
   c205a:	4620      	mov	r0, r4
   c205c:	bd38      	pop	{r3, r4, r5, pc}
   c205e:	bf00      	nop
   c2060:	000c8079 	.word	0x000c8079

000c2064 <_Z22__fetch_global_Serial1v>:
{
   c2064:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2066:	4d0e      	ldr	r5, [pc, #56]	; (c20a0 <_Z22__fetch_global_Serial1v+0x3c>)
   c2068:	7829      	ldrb	r1, [r5, #0]
   c206a:	f3bf 8f5b 	dmb	ish
   c206e:	f011 0401 	ands.w	r4, r1, #1
{
   c2072:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c2074:	d111      	bne.n	c209a <_Z22__fetch_global_Serial1v+0x36>
   c2076:	4628      	mov	r0, r5
   c2078:	f7f2 f822 	bl	b40c0 <__cxa_guard_acquire>
   c207c:	b168      	cbz	r0, c209a <_Z22__fetch_global_Serial1v+0x36>
   c207e:	a801      	add	r0, sp, #4
   c2080:	f7ff ffd6 	bl	c2030 <_Z20acquireSerial1Bufferv>
   c2084:	aa01      	add	r2, sp, #4
   c2086:	4621      	mov	r1, r4
   c2088:	4806      	ldr	r0, [pc, #24]	; (c20a4 <_Z22__fetch_global_Serial1v+0x40>)
   c208a:	f7ff fbff 	bl	c188c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c208e:	4628      	mov	r0, r5
   c2090:	f7f2 f81b 	bl	b40ca <__cxa_guard_release>
   c2094:	4804      	ldr	r0, [pc, #16]	; (c20a8 <_Z22__fetch_global_Serial1v+0x44>)
   c2096:	f002 fa21 	bl	c44dc <atexit>
    return serial1;
}
   c209a:	4802      	ldr	r0, [pc, #8]	; (c20a4 <_Z22__fetch_global_Serial1v+0x40>)
   c209c:	b007      	add	sp, #28
   c209e:	bd30      	pop	{r4, r5, pc}
   c20a0:	2003e728 	.word	0x2003e728
   c20a4:	2003e72c 	.word	0x2003e72c
   c20a8:	000c202d 	.word	0x000c202d

000c20ac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c20ac:	4770      	bx	lr
	...

000c20b0 <_Z17acquireWireBufferv>:
{
   c20b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c20b2:	2520      	movs	r5, #32
   c20b4:	2314      	movs	r3, #20
{
   c20b6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c20b8:	6003      	str	r3, [r0, #0]
   c20ba:	6085      	str	r5, [r0, #8]
   c20bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c20be:	4906      	ldr	r1, [pc, #24]	; (c20d8 <_Z17acquireWireBufferv+0x28>)
   c20c0:	4628      	mov	r0, r5
   c20c2:	f000 f831 	bl	c2128 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c20c6:	4904      	ldr	r1, [pc, #16]	; (c20d8 <_Z17acquireWireBufferv+0x28>)
	};
   c20c8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   c20ca:	4628      	mov	r0, r5
   c20cc:	f000 f82c 	bl	c2128 <_ZnajRKSt9nothrow_t>
	};
   c20d0:	60e0      	str	r0, [r4, #12]
}
   c20d2:	4620      	mov	r0, r4
   c20d4:	bd38      	pop	{r3, r4, r5, pc}
   c20d6:	bf00      	nop
   c20d8:	000c8079 	.word	0x000c8079

000c20dc <_Z19__fetch_global_Wirev>:
{
   c20dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c20de:	4d0e      	ldr	r5, [pc, #56]	; (c2118 <_Z19__fetch_global_Wirev+0x3c>)
   c20e0:	7829      	ldrb	r1, [r5, #0]
   c20e2:	f3bf 8f5b 	dmb	ish
   c20e6:	f011 0401 	ands.w	r4, r1, #1
{
   c20ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c20ec:	d111      	bne.n	c2112 <_Z19__fetch_global_Wirev+0x36>
   c20ee:	4628      	mov	r0, r5
   c20f0:	f7f1 ffe6 	bl	b40c0 <__cxa_guard_acquire>
   c20f4:	b168      	cbz	r0, c2112 <_Z19__fetch_global_Wirev+0x36>
   c20f6:	a801      	add	r0, sp, #4
   c20f8:	f7ff ffda 	bl	c20b0 <_Z17acquireWireBufferv>
   c20fc:	aa01      	add	r2, sp, #4
   c20fe:	4621      	mov	r1, r4
   c2100:	4806      	ldr	r0, [pc, #24]	; (c211c <_Z19__fetch_global_Wirev+0x40>)
   c2102:	f7ff fc21 	bl	c1948 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c2106:	4628      	mov	r0, r5
   c2108:	f7f1 ffdf 	bl	b40ca <__cxa_guard_release>
   c210c:	4804      	ldr	r0, [pc, #16]	; (c2120 <_Z19__fetch_global_Wirev+0x44>)
   c210e:	f002 f9e5 	bl	c44dc <atexit>
	return wire;
}
   c2112:	4802      	ldr	r0, [pc, #8]	; (c211c <_Z19__fetch_global_Wirev+0x40>)
   c2114:	b007      	add	sp, #28
   c2116:	bd30      	pop	{r4, r5, pc}
   c2118:	2003e744 	.word	0x2003e744
   c211c:	2003e748 	.word	0x2003e748
   c2120:	000c20ad 	.word	0x000c20ad

000c2124 <_ZnwjRKSt9nothrow_t>:
   c2124:	f7f1 bfb7 	b.w	b4096 <_Znwj>

000c2128 <_ZnajRKSt9nothrow_t>:
   c2128:	f7f1 bfb7 	b.w	b409a <_Znaj>

000c212c <_ZSt25__throw_bad_function_callv>:
   c212c:	b508      	push	{r3, lr}
   c212e:	f7fc f8e1 	bl	be2f4 <abort>
	...

000c2134 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   c2134:	4901      	ldr	r1, [pc, #4]	; (c213c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   c2136:	f000 b8f9 	b.w	c232c <_ZNKSt9type_infoeqERKS_>
   c213a:	bf00      	nop
   c213c:	000c8094 	.word	0x000c8094

000c2140 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   c2140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c2142:	2400      	movs	r4, #0
   c2144:	2310      	movs	r3, #16
   c2146:	e9cd 3402 	strd	r3, r4, [sp, #8]
   c214a:	6803      	ldr	r3, [r0, #0]
   c214c:	4615      	mov	r5, r2
   c214e:	699e      	ldr	r6, [r3, #24]
   c2150:	6812      	ldr	r2, [r2, #0]
   c2152:	466b      	mov	r3, sp
   c2154:	e9cd 4400 	strd	r4, r4, [sp]
   c2158:	47b0      	blx	r6
   c215a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c215e:	f003 0306 	and.w	r3, r3, #6
   c2162:	2b06      	cmp	r3, #6
   c2164:	bf03      	ittte	eq
   c2166:	9b00      	ldreq	r3, [sp, #0]
   c2168:	602b      	streq	r3, [r5, #0]
   c216a:	2001      	moveq	r0, #1
   c216c:	4620      	movne	r0, r4
   c216e:	b004      	add	sp, #16
   c2170:	bd70      	pop	{r4, r5, r6, pc}

000c2172 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   c2172:	9800      	ldr	r0, [sp, #0]
   c2174:	4290      	cmp	r0, r2
   c2176:	bf14      	ite	ne
   c2178:	2001      	movne	r0, #1
   c217a:	2006      	moveq	r0, #6
   c217c:	4770      	bx	lr
	...

000c2180 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   c2180:	b510      	push	{r4, lr}
   c2182:	4b03      	ldr	r3, [pc, #12]	; (c2190 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   c2184:	6003      	str	r3, [r0, #0]
   c2186:	4604      	mov	r4, r0
   c2188:	f000 f8cd 	bl	c2326 <_ZNSt9type_infoD1Ev>
   c218c:	4620      	mov	r0, r4
   c218e:	bd10      	pop	{r4, pc}
   c2190:	000c80d4 	.word	0x000c80d4

000c2194 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   c2194:	b510      	push	{r4, lr}
   c2196:	4604      	mov	r4, r0
   c2198:	f7ff fff2 	bl	c2180 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c219c:	4620      	mov	r0, r4
   c219e:	2108      	movs	r1, #8
   c21a0:	f7f1 ff7f 	bl	b40a2 <_ZdlPvj>
   c21a4:	4620      	mov	r0, r4
   c21a6:	bd10      	pop	{r4, pc}

000c21a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   c21a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c21ac:	461f      	mov	r7, r3
   c21ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   c21b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   c21b6:	4598      	cmp	r8, r3
   c21b8:	4606      	mov	r6, r0
   c21ba:	4615      	mov	r5, r2
   c21bc:	d107      	bne.n	c21ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c21be:	9907      	ldr	r1, [sp, #28]
   c21c0:	f000 f8b4 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c21c4:	b118      	cbz	r0, c21ce <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   c21c6:	7165      	strb	r5, [r4, #5]
   c21c8:	2000      	movs	r0, #0
   c21ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c21ce:	4639      	mov	r1, r7
   c21d0:	4630      	mov	r0, r6
   c21d2:	f000 f8ab 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c21d6:	2800      	cmp	r0, #0
   c21d8:	d0f6      	beq.n	c21c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   c21da:	2301      	movs	r3, #1
   c21dc:	f8c4 8000 	str.w	r8, [r4]
   c21e0:	7125      	strb	r5, [r4, #4]
   c21e2:	71a3      	strb	r3, [r4, #6]
   c21e4:	e7f0      	b.n	c21c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000c21e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   c21e6:	b538      	push	{r3, r4, r5, lr}
   c21e8:	4615      	mov	r5, r2
   c21ea:	461c      	mov	r4, r3
   c21ec:	f000 f89e 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c21f0:	b120      	cbz	r0, c21fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   c21f2:	2308      	movs	r3, #8
   c21f4:	60e3      	str	r3, [r4, #12]
   c21f6:	2306      	movs	r3, #6
   c21f8:	6025      	str	r5, [r4, #0]
   c21fa:	7123      	strb	r3, [r4, #4]
   c21fc:	bd38      	pop	{r3, r4, r5, pc}

000c21fe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   c21fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c2200:	4605      	mov	r5, r0
   c2202:	460c      	mov	r4, r1
   c2204:	9201      	str	r2, [sp, #4]
   c2206:	461e      	mov	r6, r3
   c2208:	f000 f890 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c220c:	b950      	cbnz	r0, c2224 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c220e:	2e03      	cmp	r6, #3
   c2210:	d808      	bhi.n	c2224 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   c2212:	6823      	ldr	r3, [r4, #0]
   c2214:	9a01      	ldr	r2, [sp, #4]
   c2216:	695b      	ldr	r3, [r3, #20]
   c2218:	4629      	mov	r1, r5
   c221a:	4620      	mov	r0, r4
   c221c:	b002      	add	sp, #8
   c221e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   c2222:	4718      	bx	r3
   c2224:	b002      	add	sp, #8
   c2226:	bd70      	pop	{r4, r5, r6, pc}

000c2228 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   c2228:	b510      	push	{r4, lr}
   c222a:	4b03      	ldr	r3, [pc, #12]	; (c2238 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   c222c:	6003      	str	r3, [r0, #0]
   c222e:	4604      	mov	r4, r0
   c2230:	f7ff ffa6 	bl	c2180 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   c2234:	4620      	mov	r0, r4
   c2236:	bd10      	pop	{r4, pc}
   c2238:	000c8134 	.word	0x000c8134

000c223c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   c223c:	b510      	push	{r4, lr}
   c223e:	4604      	mov	r4, r0
   c2240:	f7ff fff2 	bl	c2228 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   c2244:	4620      	mov	r0, r4
   c2246:	210c      	movs	r1, #12
   c2248:	f7f1 ff2b 	bl	b40a2 <_ZdlPvj>
   c224c:	4620      	mov	r0, r4
   c224e:	bd10      	pop	{r4, pc}

000c2250 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   c2250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c2252:	9f08      	ldr	r7, [sp, #32]
   c2254:	4297      	cmp	r7, r2
   c2256:	4605      	mov	r5, r0
   c2258:	460e      	mov	r6, r1
   c225a:	4614      	mov	r4, r2
   c225c:	d00a      	beq.n	c2274 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   c225e:	68a8      	ldr	r0, [r5, #8]
   c2260:	6802      	ldr	r2, [r0, #0]
   c2262:	9708      	str	r7, [sp, #32]
   c2264:	6a15      	ldr	r5, [r2, #32]
   c2266:	4631      	mov	r1, r6
   c2268:	4622      	mov	r2, r4
   c226a:	46ac      	mov	ip, r5
   c226c:	b003      	add	sp, #12
   c226e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   c2272:	4760      	bx	ip
   c2274:	4619      	mov	r1, r3
   c2276:	9301      	str	r3, [sp, #4]
   c2278:	f000 f858 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c227c:	9b01      	ldr	r3, [sp, #4]
   c227e:	2800      	cmp	r0, #0
   c2280:	d0ed      	beq.n	c225e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   c2282:	2006      	movs	r0, #6
   c2284:	b003      	add	sp, #12
   c2286:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c2288 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   c2288:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c228c:	460d      	mov	r5, r1
   c228e:	4619      	mov	r1, r3
   c2290:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   c2294:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   c2298:	4681      	mov	r9, r0
   c229a:	4617      	mov	r7, r2
   c229c:	4698      	mov	r8, r3
   c229e:	f000 f845 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c22a2:	b190      	cbz	r0, c22ca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   c22a4:	2d00      	cmp	r5, #0
   c22a6:	6034      	str	r4, [r6, #0]
   c22a8:	7137      	strb	r7, [r6, #4]
   c22aa:	db09      	blt.n	c22c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   c22ac:	1961      	adds	r1, r4, r5
   c22ae:	458a      	cmp	sl, r1
   c22b0:	bf0c      	ite	eq
   c22b2:	2106      	moveq	r1, #6
   c22b4:	2101      	movne	r1, #1
   c22b6:	71b1      	strb	r1, [r6, #6]
   c22b8:	2000      	movs	r0, #0
   c22ba:	b001      	add	sp, #4
   c22bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c22c0:	3502      	adds	r5, #2
   c22c2:	d1f9      	bne.n	c22b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22c4:	2301      	movs	r3, #1
   c22c6:	71b3      	strb	r3, [r6, #6]
   c22c8:	e7f6      	b.n	c22b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22ca:	4554      	cmp	r4, sl
   c22cc:	d106      	bne.n	c22dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c22ce:	4659      	mov	r1, fp
   c22d0:	4648      	mov	r0, r9
   c22d2:	f000 f82b 	bl	c232c <_ZNKSt9type_infoeqERKS_>
   c22d6:	b108      	cbz	r0, c22dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   c22d8:	7177      	strb	r7, [r6, #5]
   c22da:	e7ed      	b.n	c22b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   c22dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   c22e0:	6803      	ldr	r3, [r0, #0]
   c22e2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   c22e6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   c22ea:	69dc      	ldr	r4, [r3, #28]
   c22ec:	463a      	mov	r2, r7
   c22ee:	4643      	mov	r3, r8
   c22f0:	4629      	mov	r1, r5
   c22f2:	46a4      	mov	ip, r4
   c22f4:	b001      	add	sp, #4
   c22f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c22fa:	4760      	bx	ip

000c22fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   c22fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2300:	4607      	mov	r7, r0
   c2302:	460c      	mov	r4, r1
   c2304:	4615      	mov	r5, r2
   c2306:	461e      	mov	r6, r3
   c2308:	f7ff ff6d 	bl	c21e6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   c230c:	b948      	cbnz	r0, c2322 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   c230e:	68b8      	ldr	r0, [r7, #8]
   c2310:	6803      	ldr	r3, [r0, #0]
   c2312:	699f      	ldr	r7, [r3, #24]
   c2314:	462a      	mov	r2, r5
   c2316:	4633      	mov	r3, r6
   c2318:	4621      	mov	r1, r4
   c231a:	46bc      	mov	ip, r7
   c231c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c2320:	4760      	bx	ip
   c2322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c2326 <_ZNSt9type_infoD1Ev>:
   c2326:	4770      	bx	lr

000c2328 <_ZNKSt9type_info14__is_pointer_pEv>:
   c2328:	2000      	movs	r0, #0
   c232a:	4770      	bx	lr

000c232c <_ZNKSt9type_infoeqERKS_>:
   c232c:	4281      	cmp	r1, r0
   c232e:	b508      	push	{r3, lr}
   c2330:	d00e      	beq.n	c2350 <_ZNKSt9type_infoeqERKS_+0x24>
   c2332:	6840      	ldr	r0, [r0, #4]
   c2334:	7803      	ldrb	r3, [r0, #0]
   c2336:	2b2a      	cmp	r3, #42	; 0x2a
   c2338:	d00c      	beq.n	c2354 <_ZNKSt9type_infoeqERKS_+0x28>
   c233a:	6849      	ldr	r1, [r1, #4]
   c233c:	780b      	ldrb	r3, [r1, #0]
   c233e:	2b2a      	cmp	r3, #42	; 0x2a
   c2340:	bf08      	it	eq
   c2342:	3101      	addeq	r1, #1
   c2344:	f002 f974 	bl	c4630 <strcmp>
   c2348:	fab0 f080 	clz	r0, r0
   c234c:	0940      	lsrs	r0, r0, #5
   c234e:	bd08      	pop	{r3, pc}
   c2350:	2001      	movs	r0, #1
   c2352:	e7fc      	b.n	c234e <_ZNKSt9type_infoeqERKS_+0x22>
   c2354:	2000      	movs	r0, #0
   c2356:	e7fa      	b.n	c234e <_ZNKSt9type_infoeqERKS_+0x22>

000c2358 <cosf>:
   c2358:	ee10 3a10 	vmov	r3, s0
   c235c:	4a18      	ldr	r2, [pc, #96]	; (c23c0 <cosf+0x68>)
   c235e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2362:	4293      	cmp	r3, r2
   c2364:	dd1b      	ble.n	c239e <cosf+0x46>
   c2366:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c236a:	db02      	blt.n	c2372 <cosf+0x1a>
   c236c:	ee30 0a40 	vsub.f32	s0, s0, s0
   c2370:	4770      	bx	lr
   c2372:	b500      	push	{lr}
   c2374:	b083      	sub	sp, #12
   c2376:	4668      	mov	r0, sp
   c2378:	f000 fb10 	bl	c299c <__ieee754_rem_pio2f>
   c237c:	f000 0003 	and.w	r0, r0, #3
   c2380:	2801      	cmp	r0, #1
   c2382:	eddd 0a01 	vldr	s1, [sp, #4]
   c2386:	ed9d 0a00 	vldr	s0, [sp]
   c238a:	d00c      	beq.n	c23a6 <cosf+0x4e>
   c238c:	2802      	cmp	r0, #2
   c238e:	d012      	beq.n	c23b6 <cosf+0x5e>
   c2390:	b170      	cbz	r0, c23b0 <cosf+0x58>
   c2392:	2001      	movs	r0, #1
   c2394:	f000 fff4 	bl	c3380 <__kernel_sinf>
   c2398:	b003      	add	sp, #12
   c239a:	f85d fb04 	ldr.w	pc, [sp], #4
   c239e:	eddf 0a09 	vldr	s1, [pc, #36]	; c23c4 <cosf+0x6c>
   c23a2:	f000 bc31 	b.w	c2c08 <__kernel_cosf>
   c23a6:	f000 ffeb 	bl	c3380 <__kernel_sinf>
   c23aa:	eeb1 0a40 	vneg.f32	s0, s0
   c23ae:	e7f3      	b.n	c2398 <cosf+0x40>
   c23b0:	f000 fc2a 	bl	c2c08 <__kernel_cosf>
   c23b4:	e7f0      	b.n	c2398 <cosf+0x40>
   c23b6:	f000 fc27 	bl	c2c08 <__kernel_cosf>
   c23ba:	eeb1 0a40 	vneg.f32	s0, s0
   c23be:	e7eb      	b.n	c2398 <cosf+0x40>
   c23c0:	3f490fd8 	.word	0x3f490fd8
   c23c4:	00000000 	.word	0x00000000

000c23c8 <sinf>:
   c23c8:	ee10 3a10 	vmov	r3, s0
   c23cc:	4a19      	ldr	r2, [pc, #100]	; (c2434 <sinf+0x6c>)
   c23ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c23d2:	4293      	cmp	r3, r2
   c23d4:	dd1c      	ble.n	c2410 <sinf+0x48>
   c23d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   c23da:	db02      	blt.n	c23e2 <sinf+0x1a>
   c23dc:	ee30 0a40 	vsub.f32	s0, s0, s0
   c23e0:	4770      	bx	lr
   c23e2:	b500      	push	{lr}
   c23e4:	b083      	sub	sp, #12
   c23e6:	4668      	mov	r0, sp
   c23e8:	f000 fad8 	bl	c299c <__ieee754_rem_pio2f>
   c23ec:	f000 0003 	and.w	r0, r0, #3
   c23f0:	2801      	cmp	r0, #1
   c23f2:	eddd 0a01 	vldr	s1, [sp, #4]
   c23f6:	ed9d 0a00 	vldr	s0, [sp]
   c23fa:	d00e      	beq.n	c241a <sinf+0x52>
   c23fc:	2802      	cmp	r0, #2
   c23fe:	d013      	beq.n	c2428 <sinf+0x60>
   c2400:	b170      	cbz	r0, c2420 <sinf+0x58>
   c2402:	f000 fc01 	bl	c2c08 <__kernel_cosf>
   c2406:	eeb1 0a40 	vneg.f32	s0, s0
   c240a:	b003      	add	sp, #12
   c240c:	f85d fb04 	ldr.w	pc, [sp], #4
   c2410:	eddf 0a09 	vldr	s1, [pc, #36]	; c2438 <sinf+0x70>
   c2414:	2000      	movs	r0, #0
   c2416:	f000 bfb3 	b.w	c3380 <__kernel_sinf>
   c241a:	f000 fbf5 	bl	c2c08 <__kernel_cosf>
   c241e:	e7f4      	b.n	c240a <sinf+0x42>
   c2420:	2001      	movs	r0, #1
   c2422:	f000 ffad 	bl	c3380 <__kernel_sinf>
   c2426:	e7f0      	b.n	c240a <sinf+0x42>
   c2428:	2001      	movs	r0, #1
   c242a:	f000 ffa9 	bl	c3380 <__kernel_sinf>
   c242e:	eeb1 0a40 	vneg.f32	s0, s0
   c2432:	e7ea      	b.n	c240a <sinf+0x42>
   c2434:	3f490fd8 	.word	0x3f490fd8
   c2438:	00000000 	.word	0x00000000

000c243c <atan2>:
   c243c:	f000 b864 	b.w	c2508 <__ieee754_atan2>

000c2440 <sqrt>:
   c2440:	b538      	push	{r3, r4, r5, lr}
   c2442:	ed2d 8b02 	vpush	{d8}
   c2446:	ec55 4b10 	vmov	r4, r5, d0
   c244a:	f000 f933 	bl	c26b4 <__ieee754_sqrt>
   c244e:	4b18      	ldr	r3, [pc, #96]	; (c24b0 <sqrt+0x70>)
   c2450:	eeb0 8a40 	vmov.f32	s16, s0
   c2454:	eef0 8a60 	vmov.f32	s17, s1
   c2458:	f993 3000 	ldrsb.w	r3, [r3]
   c245c:	3301      	adds	r3, #1
   c245e:	d00d      	beq.n	c247c <sqrt+0x3c>
   c2460:	4622      	mov	r2, r4
   c2462:	462b      	mov	r3, r5
   c2464:	4620      	mov	r0, r4
   c2466:	4629      	mov	r1, r5
   c2468:	f001 ff6c 	bl	c4344 <__aeabi_dcmpun>
   c246c:	b930      	cbnz	r0, c247c <sqrt+0x3c>
   c246e:	2200      	movs	r2, #0
   c2470:	2300      	movs	r3, #0
   c2472:	4620      	mov	r0, r4
   c2474:	4629      	mov	r1, r5
   c2476:	f001 ff3d 	bl	c42f4 <__aeabi_dcmplt>
   c247a:	b930      	cbnz	r0, c248a <sqrt+0x4a>
   c247c:	eeb0 0a48 	vmov.f32	s0, s16
   c2480:	eef0 0a68 	vmov.f32	s1, s17
   c2484:	ecbd 8b02 	vpop	{d8}
   c2488:	bd38      	pop	{r3, r4, r5, pc}
   c248a:	f7fb ff43 	bl	be314 <__errno>
   c248e:	2200      	movs	r2, #0
   c2490:	2300      	movs	r3, #0
   c2492:	2121      	movs	r1, #33	; 0x21
   c2494:	6001      	str	r1, [r0, #0]
   c2496:	4610      	mov	r0, r2
   c2498:	4619      	mov	r1, r3
   c249a:	f001 fde3 	bl	c4064 <__aeabi_ddiv>
   c249e:	ec41 0b18 	vmov	d8, r0, r1
   c24a2:	eeb0 0a48 	vmov.f32	s0, s16
   c24a6:	eef0 0a68 	vmov.f32	s1, s17
   c24aa:	ecbd 8b02 	vpop	{d8}
   c24ae:	bd38      	pop	{r3, r4, r5, pc}
   c24b0:	2003db4c 	.word	0x2003db4c

000c24b4 <atan2f>:
   c24b4:	f000 b9ca 	b.w	c284c <__ieee754_atan2f>

000c24b8 <sqrtf>:
   c24b8:	b508      	push	{r3, lr}
   c24ba:	ed2d 8b02 	vpush	{d8}
   c24be:	eeb0 8a40 	vmov.f32	s16, s0
   c24c2:	f000 fb9d 	bl	c2c00 <__ieee754_sqrtf>
   c24c6:	4b0e      	ldr	r3, [pc, #56]	; (c2500 <sqrtf+0x48>)
   c24c8:	f993 3000 	ldrsb.w	r3, [r3]
   c24cc:	3301      	adds	r3, #1
   c24ce:	d00b      	beq.n	c24e8 <sqrtf+0x30>
   c24d0:	eeb4 8a48 	vcmp.f32	s16, s16
   c24d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24d8:	d606      	bvs.n	c24e8 <sqrtf+0x30>
   c24da:	eddf 8a0a 	vldr	s17, [pc, #40]	; c2504 <sqrtf+0x4c>
   c24de:	eeb4 8ae8 	vcmpe.f32	s16, s17
   c24e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c24e6:	d402      	bmi.n	c24ee <sqrtf+0x36>
   c24e8:	ecbd 8b02 	vpop	{d8}
   c24ec:	bd08      	pop	{r3, pc}
   c24ee:	f7fb ff11 	bl	be314 <__errno>
   c24f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   c24f6:	ecbd 8b02 	vpop	{d8}
   c24fa:	2321      	movs	r3, #33	; 0x21
   c24fc:	6003      	str	r3, [r0, #0]
   c24fe:	bd08      	pop	{r3, pc}
   c2500:	2003db4c 	.word	0x2003db4c
   c2504:	00000000 	.word	0x00000000

000c2508 <__ieee754_atan2>:
   c2508:	ec51 0b11 	vmov	r0, r1, d1
   c250c:	4243      	negs	r3, r0
   c250e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c2512:	4303      	orrs	r3, r0
   c2514:	4e64      	ldr	r6, [pc, #400]	; (c26a8 <__ieee754_atan2+0x1a0>)
   c2516:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c251a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c251e:	42b3      	cmp	r3, r6
   c2520:	ec55 4b10 	vmov	r4, r5, d0
   c2524:	d83e      	bhi.n	c25a4 <__ieee754_atan2+0x9c>
   c2526:	4263      	negs	r3, r4
   c2528:	4323      	orrs	r3, r4
   c252a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c252e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c2532:	42b3      	cmp	r3, r6
   c2534:	46a9      	mov	r9, r5
   c2536:	d835      	bhi.n	c25a4 <__ieee754_atan2+0x9c>
   c2538:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c253c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c2540:	4303      	orrs	r3, r0
   c2542:	d03e      	beq.n	c25c2 <__ieee754_atan2+0xba>
   c2544:	178f      	asrs	r7, r1, #30
   c2546:	f007 0702 	and.w	r7, r7, #2
   c254a:	ea5a 0304 	orrs.w	r3, sl, r4
   c254e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c2552:	d02f      	beq.n	c25b4 <__ieee754_atan2+0xac>
   c2554:	ea5e 0300 	orrs.w	r3, lr, r0
   c2558:	d037      	beq.n	c25ca <__ieee754_atan2+0xc2>
   c255a:	45b6      	cmp	lr, r6
   c255c:	d044      	beq.n	c25e8 <__ieee754_atan2+0xe0>
   c255e:	45b2      	cmp	sl, r6
   c2560:	d033      	beq.n	c25ca <__ieee754_atan2+0xc2>
   c2562:	ebaa 0e0e 	sub.w	lr, sl, lr
   c2566:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c256a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c256e:	da38      	bge.n	c25e2 <__ieee754_atan2+0xda>
   c2570:	2900      	cmp	r1, #0
   c2572:	da45      	bge.n	c2600 <__ieee754_atan2+0xf8>
   c2574:	333c      	adds	r3, #60	; 0x3c
   c2576:	da43      	bge.n	c2600 <__ieee754_atan2+0xf8>
   c2578:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c2670 <__ieee754_atan2+0x168>
   c257c:	2f01      	cmp	r7, #1
   c257e:	d05d      	beq.n	c263c <__ieee754_atan2+0x134>
   c2580:	2f02      	cmp	r7, #2
   c2582:	d04a      	beq.n	c261a <__ieee754_atan2+0x112>
   c2584:	b1a7      	cbz	r7, c25b0 <__ieee754_atan2+0xa8>
   c2586:	ec51 0b10 	vmov	r0, r1, d0
   c258a:	a33b      	add	r3, pc, #236	; (adr r3, c2678 <__ieee754_atan2+0x170>)
   c258c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2590:	f001 fa86 	bl	c3aa0 <__aeabi_dsub>
   c2594:	a33a      	add	r3, pc, #232	; (adr r3, c2680 <__ieee754_atan2+0x178>)
   c2596:	e9d3 2300 	ldrd	r2, r3, [r3]
   c259a:	f001 fa81 	bl	c3aa0 <__aeabi_dsub>
   c259e:	ec41 0b10 	vmov	d0, r0, r1
   c25a2:	e005      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c25a4:	4622      	mov	r2, r4
   c25a6:	462b      	mov	r3, r5
   c25a8:	f001 fa7c 	bl	c3aa4 <__adddf3>
   c25ac:	ec41 0b10 	vmov	d0, r0, r1
   c25b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c25b4:	2f02      	cmp	r7, #2
   c25b6:	d00e      	beq.n	c25d6 <__ieee754_atan2+0xce>
   c25b8:	2f03      	cmp	r7, #3
   c25ba:	d1f9      	bne.n	c25b0 <__ieee754_atan2+0xa8>
   c25bc:	ed9f 0b32 	vldr	d0, [pc, #200]	; c2688 <__ieee754_atan2+0x180>
   c25c0:	e7f6      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c25c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c25c6:	f000 bf23 	b.w	c3410 <atan>
   c25ca:	f1b9 0f00 	cmp.w	r9, #0
   c25ce:	db05      	blt.n	c25dc <__ieee754_atan2+0xd4>
   c25d0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c2690 <__ieee754_atan2+0x188>
   c25d4:	e7ec      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c25d6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c2680 <__ieee754_atan2+0x178>
   c25da:	e7e9      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c25dc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c2698 <__ieee754_atan2+0x190>
   c25e0:	e7e6      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c25e2:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c2690 <__ieee754_atan2+0x188>
   c25e6:	e7c9      	b.n	c257c <__ieee754_atan2+0x74>
   c25e8:	45f2      	cmp	sl, lr
   c25ea:	f107 37ff 	add.w	r7, r7, #4294967295
   c25ee:	d02e      	beq.n	c264e <__ieee754_atan2+0x146>
   c25f0:	2f02      	cmp	r7, #2
   c25f2:	d834      	bhi.n	c265e <__ieee754_atan2+0x156>
   c25f4:	4b2d      	ldr	r3, [pc, #180]	; (c26ac <__ieee754_atan2+0x1a4>)
   c25f6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c25fa:	ed97 0b00 	vldr	d0, [r7]
   c25fe:	e7d7      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c2600:	4602      	mov	r2, r0
   c2602:	460b      	mov	r3, r1
   c2604:	4620      	mov	r0, r4
   c2606:	4629      	mov	r1, r5
   c2608:	f001 fd2c 	bl	c4064 <__aeabi_ddiv>
   c260c:	ec41 0b10 	vmov	d0, r0, r1
   c2610:	f001 f89e 	bl	c3750 <fabs>
   c2614:	f000 fefc 	bl	c3410 <atan>
   c2618:	e7b0      	b.n	c257c <__ieee754_atan2+0x74>
   c261a:	a317      	add	r3, pc, #92	; (adr r3, c2678 <__ieee754_atan2+0x170>)
   c261c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2620:	ec51 0b10 	vmov	r0, r1, d0
   c2624:	f001 fa3c 	bl	c3aa0 <__aeabi_dsub>
   c2628:	4602      	mov	r2, r0
   c262a:	460b      	mov	r3, r1
   c262c:	a114      	add	r1, pc, #80	; (adr r1, c2680 <__ieee754_atan2+0x178>)
   c262e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c2632:	f001 fa35 	bl	c3aa0 <__aeabi_dsub>
   c2636:	ec41 0b10 	vmov	d0, r0, r1
   c263a:	e7b9      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c263c:	ee10 1a90 	vmov	r1, s1
   c2640:	ec53 2b10 	vmov	r2, r3, d0
   c2644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2648:	ec43 2b10 	vmov	d0, r2, r3
   c264c:	e7b0      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c264e:	2f02      	cmp	r7, #2
   c2650:	d808      	bhi.n	c2664 <__ieee754_atan2+0x15c>
   c2652:	4b17      	ldr	r3, [pc, #92]	; (c26b0 <__ieee754_atan2+0x1a8>)
   c2654:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c2658:	ed97 0b00 	vldr	d0, [r7]
   c265c:	e7a8      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c265e:	ed9f 0b04 	vldr	d0, [pc, #16]	; c2670 <__ieee754_atan2+0x168>
   c2662:	e7a5      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c2664:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c26a0 <__ieee754_atan2+0x198>
   c2668:	e7a2      	b.n	c25b0 <__ieee754_atan2+0xa8>
   c266a:	bf00      	nop
   c266c:	f3af 8000 	nop.w
	...
   c2678:	33145c07 	.word	0x33145c07
   c267c:	3ca1a626 	.word	0x3ca1a626
   c2680:	54442d18 	.word	0x54442d18
   c2684:	400921fb 	.word	0x400921fb
   c2688:	54442d18 	.word	0x54442d18
   c268c:	c00921fb 	.word	0xc00921fb
   c2690:	54442d18 	.word	0x54442d18
   c2694:	3ff921fb 	.word	0x3ff921fb
   c2698:	54442d18 	.word	0x54442d18
   c269c:	bff921fb 	.word	0xbff921fb
   c26a0:	54442d18 	.word	0x54442d18
   c26a4:	3fe921fb 	.word	0x3fe921fb
   c26a8:	7ff00000 	.word	0x7ff00000
   c26ac:	000c8188 	.word	0x000c8188
   c26b0:	000c8170 	.word	0x000c8170

000c26b4 <__ieee754_sqrt>:
   c26b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c26b8:	4a63      	ldr	r2, [pc, #396]	; (c2848 <__ieee754_sqrt+0x194>)
   c26ba:	ec55 4b10 	vmov	r4, r5, d0
   c26be:	43aa      	bics	r2, r5
   c26c0:	f000 809f 	beq.w	c2802 <__ieee754_sqrt+0x14e>
   c26c4:	2d00      	cmp	r5, #0
   c26c6:	ee10 ca10 	vmov	ip, s0
   c26ca:	462b      	mov	r3, r5
   c26cc:	dd54      	ble.n	c2778 <__ieee754_sqrt+0xc4>
   c26ce:	1529      	asrs	r1, r5, #20
   c26d0:	d063      	beq.n	c279a <__ieee754_sqrt+0xe6>
   c26d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c26d6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c26da:	07c9      	lsls	r1, r1, #31
   c26dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c26e0:	d404      	bmi.n	c26ec <__ieee754_sqrt+0x38>
   c26e2:	005b      	lsls	r3, r3, #1
   c26e4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c26e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c26ec:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c26f0:	2600      	movs	r6, #0
   c26f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c26f6:	107f      	asrs	r7, r7, #1
   c26f8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c26fc:	f04f 0e16 	mov.w	lr, #22
   c2700:	4634      	mov	r4, r6
   c2702:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c2706:	18a1      	adds	r1, r4, r2
   c2708:	4299      	cmp	r1, r3
   c270a:	dc02      	bgt.n	c2712 <__ieee754_sqrt+0x5e>
   c270c:	1a5b      	subs	r3, r3, r1
   c270e:	188c      	adds	r4, r1, r2
   c2710:	4416      	add	r6, r2
   c2712:	005b      	lsls	r3, r3, #1
   c2714:	f1be 0e01 	subs.w	lr, lr, #1
   c2718:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c271c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2720:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2724:	d1ef      	bne.n	c2706 <__ieee754_sqrt+0x52>
   c2726:	4675      	mov	r5, lr
   c2728:	2020      	movs	r0, #32
   c272a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c272e:	e00a      	b.n	c2746 <__ieee754_sqrt+0x92>
   c2730:	d044      	beq.n	c27bc <__ieee754_sqrt+0x108>
   c2732:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c2736:	3801      	subs	r0, #1
   c2738:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c273c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c2740:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c2744:	d043      	beq.n	c27ce <__ieee754_sqrt+0x11a>
   c2746:	42a3      	cmp	r3, r4
   c2748:	eb02 010e 	add.w	r1, r2, lr
   c274c:	ddf0      	ble.n	c2730 <__ieee754_sqrt+0x7c>
   c274e:	2900      	cmp	r1, #0
   c2750:	eb01 0e02 	add.w	lr, r1, r2
   c2754:	db0a      	blt.n	c276c <__ieee754_sqrt+0xb8>
   c2756:	46a0      	mov	r8, r4
   c2758:	1b1b      	subs	r3, r3, r4
   c275a:	4561      	cmp	r1, ip
   c275c:	bf88      	it	hi
   c275e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   c2762:	ebac 0c01 	sub.w	ip, ip, r1
   c2766:	4415      	add	r5, r2
   c2768:	4644      	mov	r4, r8
   c276a:	e7e2      	b.n	c2732 <__ieee754_sqrt+0x7e>
   c276c:	f1be 0f00 	cmp.w	lr, #0
   c2770:	dbf1      	blt.n	c2756 <__ieee754_sqrt+0xa2>
   c2772:	f104 0801 	add.w	r8, r4, #1
   c2776:	e7ef      	b.n	c2758 <__ieee754_sqrt+0xa4>
   c2778:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c277c:	4322      	orrs	r2, r4
   c277e:	d038      	beq.n	c27f2 <__ieee754_sqrt+0x13e>
   c2780:	2d00      	cmp	r5, #0
   c2782:	d14e      	bne.n	c2822 <__ieee754_sqrt+0x16e>
   c2784:	4629      	mov	r1, r5
   c2786:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c278a:	3915      	subs	r1, #21
   c278c:	4613      	mov	r3, r2
   c278e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c2792:	2a00      	cmp	r2, #0
   c2794:	d0f7      	beq.n	c2786 <__ieee754_sqrt+0xd2>
   c2796:	02d6      	lsls	r6, r2, #11
   c2798:	d450      	bmi.n	c283c <__ieee754_sqrt+0x188>
   c279a:	2000      	movs	r0, #0
   c279c:	005b      	lsls	r3, r3, #1
   c279e:	02dd      	lsls	r5, r3, #11
   c27a0:	4604      	mov	r4, r0
   c27a2:	f100 0001 	add.w	r0, r0, #1
   c27a6:	d5f9      	bpl.n	c279c <__ieee754_sqrt+0xe8>
   c27a8:	461a      	mov	r2, r3
   c27aa:	4663      	mov	r3, ip
   c27ac:	fa0c fc00 	lsl.w	ip, ip, r0
   c27b0:	f1c0 0020 	rsb	r0, r0, #32
   c27b4:	40c3      	lsrs	r3, r0
   c27b6:	1b09      	subs	r1, r1, r4
   c27b8:	4313      	orrs	r3, r2
   c27ba:	e78a      	b.n	c26d2 <__ieee754_sqrt+0x1e>
   c27bc:	4561      	cmp	r1, ip
   c27be:	d8b8      	bhi.n	c2732 <__ieee754_sqrt+0x7e>
   c27c0:	2900      	cmp	r1, #0
   c27c2:	eb01 0e02 	add.w	lr, r1, r2
   c27c6:	dbd1      	blt.n	c276c <__ieee754_sqrt+0xb8>
   c27c8:	4698      	mov	r8, r3
   c27ca:	2300      	movs	r3, #0
   c27cc:	e7c9      	b.n	c2762 <__ieee754_sqrt+0xae>
   c27ce:	ea53 030c 	orrs.w	r3, r3, ip
   c27d2:	d110      	bne.n	c27f6 <__ieee754_sqrt+0x142>
   c27d4:	0868      	lsrs	r0, r5, #1
   c27d6:	1071      	asrs	r1, r6, #1
   c27d8:	07f3      	lsls	r3, r6, #31
   c27da:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c27de:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c27e2:	bf48      	it	mi
   c27e4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c27e8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c27ec:	4602      	mov	r2, r0
   c27ee:	ec43 2b10 	vmov	d0, r2, r3
   c27f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c27f6:	1c6a      	adds	r2, r5, #1
   c27f8:	bf16      	itet	ne
   c27fa:	1c68      	addne	r0, r5, #1
   c27fc:	3601      	addeq	r6, #1
   c27fe:	0840      	lsrne	r0, r0, #1
   c2800:	e7e9      	b.n	c27d6 <__ieee754_sqrt+0x122>
   c2802:	ee10 2a10 	vmov	r2, s0
   c2806:	ee10 0a10 	vmov	r0, s0
   c280a:	462b      	mov	r3, r5
   c280c:	4629      	mov	r1, r5
   c280e:	f001 faff 	bl	c3e10 <__aeabi_dmul>
   c2812:	4622      	mov	r2, r4
   c2814:	462b      	mov	r3, r5
   c2816:	f001 f945 	bl	c3aa4 <__adddf3>
   c281a:	ec41 0b10 	vmov	d0, r0, r1
   c281e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2822:	ee10 2a10 	vmov	r2, s0
   c2826:	4620      	mov	r0, r4
   c2828:	4629      	mov	r1, r5
   c282a:	f001 f939 	bl	c3aa0 <__aeabi_dsub>
   c282e:	4602      	mov	r2, r0
   c2830:	460b      	mov	r3, r1
   c2832:	f001 fc17 	bl	c4064 <__aeabi_ddiv>
   c2836:	ec41 0b10 	vmov	d0, r0, r1
   c283a:	e7da      	b.n	c27f2 <__ieee754_sqrt+0x13e>
   c283c:	4663      	mov	r3, ip
   c283e:	2020      	movs	r0, #32
   c2840:	f04f 34ff 	mov.w	r4, #4294967295
   c2844:	e7b6      	b.n	c27b4 <__ieee754_sqrt+0x100>
   c2846:	bf00      	nop
   c2848:	7ff00000 	.word	0x7ff00000

000c284c <__ieee754_atan2f>:
   c284c:	b510      	push	{r4, lr}
   c284e:	b082      	sub	sp, #8
   c2850:	edcd 0a01 	vstr	s1, [sp, #4]
   c2854:	9b01      	ldr	r3, [sp, #4]
   c2856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   c285a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c285e:	eef0 7a40 	vmov.f32	s15, s0
   c2862:	dc30      	bgt.n	c28c6 <__ieee754_atan2f+0x7a>
   c2864:	ee10 0a10 	vmov	r0, s0
   c2868:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   c286c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2870:	dc29      	bgt.n	c28c6 <__ieee754_atan2f+0x7a>
   c2872:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   c2876:	d042      	beq.n	c28fe <__ieee754_atan2f+0xb2>
   c2878:	179c      	asrs	r4, r3, #30
   c287a:	f004 0402 	and.w	r4, r4, #2
   c287e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   c2882:	b331      	cbz	r1, c28d2 <__ieee754_atan2f+0x86>
   c2884:	b37a      	cbz	r2, c28e6 <__ieee754_atan2f+0x9a>
   c2886:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c288a:	d040      	beq.n	c290e <__ieee754_atan2f+0xc2>
   c288c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2890:	d029      	beq.n	c28e6 <__ieee754_atan2f+0x9a>
   c2892:	1a8a      	subs	r2, r1, r2
   c2894:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   c2898:	ea4f 51e2 	mov.w	r1, r2, asr #23
   c289c:	da34      	bge.n	c2908 <__ieee754_atan2f+0xbc>
   c289e:	2b00      	cmp	r3, #0
   c28a0:	da42      	bge.n	c2928 <__ieee754_atan2f+0xdc>
   c28a2:	313c      	adds	r1, #60	; 0x3c
   c28a4:	da40      	bge.n	c2928 <__ieee754_atan2f+0xdc>
   c28a6:	ed9f 0a34 	vldr	s0, [pc, #208]	; c2978 <__ieee754_atan2f+0x12c>
   c28aa:	2c01      	cmp	r4, #1
   c28ac:	d04e      	beq.n	c294c <__ieee754_atan2f+0x100>
   c28ae:	2c02      	cmp	r4, #2
   c28b0:	d043      	beq.n	c293a <__ieee754_atan2f+0xee>
   c28b2:	b164      	cbz	r4, c28ce <__ieee754_atan2f+0x82>
   c28b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; c297c <__ieee754_atan2f+0x130>
   c28b8:	eddf 7a31 	vldr	s15, [pc, #196]	; c2980 <__ieee754_atan2f+0x134>
   c28bc:	ee30 0a07 	vadd.f32	s0, s0, s14
   c28c0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c28c4:	e003      	b.n	c28ce <__ieee754_atan2f+0x82>
   c28c6:	ed9d 7a01 	vldr	s14, [sp, #4]
   c28ca:	ee37 0a27 	vadd.f32	s0, s14, s15
   c28ce:	b002      	add	sp, #8
   c28d0:	bd10      	pop	{r4, pc}
   c28d2:	2c02      	cmp	r4, #2
   c28d4:	d010      	beq.n	c28f8 <__ieee754_atan2f+0xac>
   c28d6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; c2984 <__ieee754_atan2f+0x138>
   c28da:	2c03      	cmp	r4, #3
   c28dc:	bf18      	it	ne
   c28de:	eeb0 0a67 	vmovne.f32	s0, s15
   c28e2:	b002      	add	sp, #8
   c28e4:	bd10      	pop	{r4, pc}
   c28e6:	ed9f 0a28 	vldr	s0, [pc, #160]	; c2988 <__ieee754_atan2f+0x13c>
   c28ea:	eddf 7a28 	vldr	s15, [pc, #160]	; c298c <__ieee754_atan2f+0x140>
   c28ee:	2800      	cmp	r0, #0
   c28f0:	bfb8      	it	lt
   c28f2:	eeb0 0a67 	vmovlt.f32	s0, s15
   c28f6:	e7ea      	b.n	c28ce <__ieee754_atan2f+0x82>
   c28f8:	ed9f 0a21 	vldr	s0, [pc, #132]	; c2980 <__ieee754_atan2f+0x134>
   c28fc:	e7e7      	b.n	c28ce <__ieee754_atan2f+0x82>
   c28fe:	b002      	add	sp, #8
   c2900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2904:	f000 bf2e 	b.w	c3764 <atanf>
   c2908:	ed9f 0a1f 	vldr	s0, [pc, #124]	; c2988 <__ieee754_atan2f+0x13c>
   c290c:	e7cd      	b.n	c28aa <__ieee754_atan2f+0x5e>
   c290e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c2912:	f104 34ff 	add.w	r4, r4, #4294967295
   c2916:	d020      	beq.n	c295a <__ieee754_atan2f+0x10e>
   c2918:	2c02      	cmp	r4, #2
   c291a:	d826      	bhi.n	c296a <__ieee754_atan2f+0x11e>
   c291c:	4b1c      	ldr	r3, [pc, #112]	; (c2990 <__ieee754_atan2f+0x144>)
   c291e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2922:	ed94 0a00 	vldr	s0, [r4]
   c2926:	e7d2      	b.n	c28ce <__ieee754_atan2f+0x82>
   c2928:	ed9d 7a01 	vldr	s14, [sp, #4]
   c292c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c2930:	f000 fff2 	bl	c3918 <fabsf>
   c2934:	f000 ff16 	bl	c3764 <atanf>
   c2938:	e7b7      	b.n	c28aa <__ieee754_atan2f+0x5e>
   c293a:	ed9f 7a10 	vldr	s14, [pc, #64]	; c297c <__ieee754_atan2f+0x130>
   c293e:	eddf 7a10 	vldr	s15, [pc, #64]	; c2980 <__ieee754_atan2f+0x134>
   c2942:	ee30 0a07 	vadd.f32	s0, s0, s14
   c2946:	ee37 0ac0 	vsub.f32	s0, s15, s0
   c294a:	e7c0      	b.n	c28ce <__ieee754_atan2f+0x82>
   c294c:	ee10 3a10 	vmov	r3, s0
   c2950:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c2954:	ee00 3a10 	vmov	s0, r3
   c2958:	e7b9      	b.n	c28ce <__ieee754_atan2f+0x82>
   c295a:	2c02      	cmp	r4, #2
   c295c:	d808      	bhi.n	c2970 <__ieee754_atan2f+0x124>
   c295e:	4b0d      	ldr	r3, [pc, #52]	; (c2994 <__ieee754_atan2f+0x148>)
   c2960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c2964:	ed94 0a00 	vldr	s0, [r4]
   c2968:	e7b1      	b.n	c28ce <__ieee754_atan2f+0x82>
   c296a:	ed9f 0a03 	vldr	s0, [pc, #12]	; c2978 <__ieee754_atan2f+0x12c>
   c296e:	e7ae      	b.n	c28ce <__ieee754_atan2f+0x82>
   c2970:	ed9f 0a09 	vldr	s0, [pc, #36]	; c2998 <__ieee754_atan2f+0x14c>
   c2974:	e7ab      	b.n	c28ce <__ieee754_atan2f+0x82>
   c2976:	bf00      	nop
   c2978:	00000000 	.word	0x00000000
   c297c:	33bbbd2e 	.word	0x33bbbd2e
   c2980:	40490fdb 	.word	0x40490fdb
   c2984:	c0490fdb 	.word	0xc0490fdb
   c2988:	3fc90fdb 	.word	0x3fc90fdb
   c298c:	bfc90fdb 	.word	0xbfc90fdb
   c2990:	000c81ac 	.word	0x000c81ac
   c2994:	000c81a0 	.word	0x000c81a0
   c2998:	3f490fdb 	.word	0x3f490fdb

000c299c <__ieee754_rem_pio2f>:
   c299c:	b570      	push	{r4, r5, r6, lr}
   c299e:	ee10 3a10 	vmov	r3, s0
   c29a2:	4a89      	ldr	r2, [pc, #548]	; (c2bc8 <__ieee754_rem_pio2f+0x22c>)
   c29a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   c29a8:	4294      	cmp	r4, r2
   c29aa:	b086      	sub	sp, #24
   c29ac:	4605      	mov	r5, r0
   c29ae:	dd70      	ble.n	c2a92 <__ieee754_rem_pio2f+0xf6>
   c29b0:	4a86      	ldr	r2, [pc, #536]	; (c2bcc <__ieee754_rem_pio2f+0x230>)
   c29b2:	4294      	cmp	r4, r2
   c29b4:	ee10 6a10 	vmov	r6, s0
   c29b8:	dc22      	bgt.n	c2a00 <__ieee754_rem_pio2f+0x64>
   c29ba:	2b00      	cmp	r3, #0
   c29bc:	eddf 7a84 	vldr	s15, [pc, #528]	; c2bd0 <__ieee754_rem_pio2f+0x234>
   c29c0:	4a84      	ldr	r2, [pc, #528]	; (c2bd4 <__ieee754_rem_pio2f+0x238>)
   c29c2:	f024 040f 	bic.w	r4, r4, #15
   c29c6:	eeb0 7a40 	vmov.f32	s14, s0
   c29ca:	f340 80e4 	ble.w	c2b96 <__ieee754_rem_pio2f+0x1fa>
   c29ce:	4294      	cmp	r4, r2
   c29d0:	ee70 7a67 	vsub.f32	s15, s0, s15
   c29d4:	bf09      	itett	eq
   c29d6:	eddf 6a80 	vldreq	s13, [pc, #512]	; c2bd8 <__ieee754_rem_pio2f+0x23c>
   c29da:	ed9f 7a80 	vldrne	s14, [pc, #512]	; c2bdc <__ieee754_rem_pio2f+0x240>
   c29de:	ed9f 7a80 	vldreq	s14, [pc, #512]	; c2be0 <__ieee754_rem_pio2f+0x244>
   c29e2:	ee77 7ae6 	vsubeq.f32	s15, s15, s13
   c29e6:	2001      	movs	r0, #1
   c29e8:	ee77 6ac7 	vsub.f32	s13, s15, s14
   c29ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c29f0:	edc5 6a00 	vstr	s13, [r5]
   c29f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c29f8:	edc5 7a01 	vstr	s15, [r5, #4]
   c29fc:	b006      	add	sp, #24
   c29fe:	bd70      	pop	{r4, r5, r6, pc}
   c2a00:	4a78      	ldr	r2, [pc, #480]	; (c2be4 <__ieee754_rem_pio2f+0x248>)
   c2a02:	4294      	cmp	r4, r2
   c2a04:	dd54      	ble.n	c2ab0 <__ieee754_rem_pio2f+0x114>
   c2a06:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c2a0a:	da49      	bge.n	c2aa0 <__ieee754_rem_pio2f+0x104>
   c2a0c:	15e2      	asrs	r2, r4, #23
   c2a0e:	3a86      	subs	r2, #134	; 0x86
   c2a10:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
   c2a14:	ee07 3a90 	vmov	s15, r3
   c2a18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2a1c:	eddf 6a72 	vldr	s13, [pc, #456]	; c2be8 <__ieee754_rem_pio2f+0x24c>
   c2a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a28:	ed8d 7a03 	vstr	s14, [sp, #12]
   c2a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2a30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   c2a34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   c2a38:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c2a3c:	ed8d 7a04 	vstr	s14, [sp, #16]
   c2a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
   c2a44:	eef5 7a40 	vcmp.f32	s15, #0.0
   c2a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2a4c:	edcd 7a05 	vstr	s15, [sp, #20]
   c2a50:	f040 8090 	bne.w	c2b74 <__ieee754_rem_pio2f+0x1d8>
   c2a54:	eeb5 7a40 	vcmp.f32	s14, #0.0
   c2a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2a5c:	bf14      	ite	ne
   c2a5e:	2302      	movne	r3, #2
   c2a60:	2301      	moveq	r3, #1
   c2a62:	4962      	ldr	r1, [pc, #392]	; (c2bec <__ieee754_rem_pio2f+0x250>)
   c2a64:	9101      	str	r1, [sp, #4]
   c2a66:	2102      	movs	r1, #2
   c2a68:	9100      	str	r1, [sp, #0]
   c2a6a:	a803      	add	r0, sp, #12
   c2a6c:	4629      	mov	r1, r5
   c2a6e:	f000 f94d 	bl	c2d0c <__kernel_rem_pio2f>
   c2a72:	2e00      	cmp	r6, #0
   c2a74:	dac2      	bge.n	c29fc <__ieee754_rem_pio2f+0x60>
   c2a76:	ed95 7a00 	vldr	s14, [r5]
   c2a7a:	edd5 7a01 	vldr	s15, [r5, #4]
   c2a7e:	eeb1 7a47 	vneg.f32	s14, s14
   c2a82:	eef1 7a67 	vneg.f32	s15, s15
   c2a86:	ed85 7a00 	vstr	s14, [r5]
   c2a8a:	edc5 7a01 	vstr	s15, [r5, #4]
   c2a8e:	4240      	negs	r0, r0
   c2a90:	e7b4      	b.n	c29fc <__ieee754_rem_pio2f+0x60>
   c2a92:	2200      	movs	r2, #0
   c2a94:	ed85 0a00 	vstr	s0, [r5]
   c2a98:	6042      	str	r2, [r0, #4]
   c2a9a:	2000      	movs	r0, #0
   c2a9c:	b006      	add	sp, #24
   c2a9e:	bd70      	pop	{r4, r5, r6, pc}
   c2aa0:	ee70 7a40 	vsub.f32	s15, s0, s0
   c2aa4:	2000      	movs	r0, #0
   c2aa6:	edc5 7a01 	vstr	s15, [r5, #4]
   c2aaa:	edc5 7a00 	vstr	s15, [r5]
   c2aae:	e7a5      	b.n	c29fc <__ieee754_rem_pio2f+0x60>
   c2ab0:	f000 ff32 	bl	c3918 <fabsf>
   c2ab4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; c2bf0 <__ieee754_rem_pio2f+0x254>
   c2ab8:	ed9f 6a45 	vldr	s12, [pc, #276]	; c2bd0 <__ieee754_rem_pio2f+0x234>
   c2abc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2ac0:	eee0 7a07 	vfma.f32	s15, s0, s14
   c2ac4:	ed9f 7a45 	vldr	s14, [pc, #276]	; c2bdc <__ieee754_rem_pio2f+0x240>
   c2ac8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2acc:	ee17 0a90 	vmov	r0, s15
   c2ad0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   c2ad4:	281f      	cmp	r0, #31
   c2ad6:	eea6 0ac6 	vfms.f32	s0, s13, s12
   c2ada:	ee66 7a87 	vmul.f32	s15, s13, s14
   c2ade:	eeb1 6a66 	vneg.f32	s12, s13
   c2ae2:	dc1e      	bgt.n	c2b22 <__ieee754_rem_pio2f+0x186>
   c2ae4:	4a43      	ldr	r2, [pc, #268]	; (c2bf4 <__ieee754_rem_pio2f+0x258>)
   c2ae6:	1e41      	subs	r1, r0, #1
   c2ae8:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
   c2aec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c2af0:	4293      	cmp	r3, r2
   c2af2:	d016      	beq.n	c2b22 <__ieee754_rem_pio2f+0x186>
   c2af4:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2af8:	ed85 7a00 	vstr	s14, [r5]
   c2afc:	ee30 0a47 	vsub.f32	s0, s0, s14
   c2b00:	2e00      	cmp	r6, #0
   c2b02:	ee30 0a67 	vsub.f32	s0, s0, s15
   c2b06:	ed85 0a01 	vstr	s0, [r5, #4]
   c2b0a:	f6bf af77 	bge.w	c29fc <__ieee754_rem_pio2f+0x60>
   c2b0e:	eeb1 7a47 	vneg.f32	s14, s14
   c2b12:	eeb1 0a40 	vneg.f32	s0, s0
   c2b16:	ed85 7a00 	vstr	s14, [r5]
   c2b1a:	ed85 0a01 	vstr	s0, [r5, #4]
   c2b1e:	4240      	negs	r0, r0
   c2b20:	e76c      	b.n	c29fc <__ieee754_rem_pio2f+0x60>
   c2b22:	ee30 7a67 	vsub.f32	s14, s0, s15
   c2b26:	15e2      	asrs	r2, r4, #23
   c2b28:	ee17 3a10 	vmov	r3, s14
   c2b2c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2b30:	ebc3 54d4 	rsb	r4, r3, r4, lsr #23
   c2b34:	2c08      	cmp	r4, #8
   c2b36:	dddf      	ble.n	c2af8 <__ieee754_rem_pio2f+0x15c>
   c2b38:	eddf 7a27 	vldr	s15, [pc, #156]	; c2bd8 <__ieee754_rem_pio2f+0x23c>
   c2b3c:	ed9f 7a28 	vldr	s14, [pc, #160]	; c2be0 <__ieee754_rem_pio2f+0x244>
   c2b40:	eef0 5a40 	vmov.f32	s11, s0
   c2b44:	eee6 5a27 	vfma.f32	s11, s12, s15
   c2b48:	ee30 0a65 	vsub.f32	s0, s0, s11
   c2b4c:	eea6 0a27 	vfma.f32	s0, s12, s15
   c2b50:	eef0 7a40 	vmov.f32	s15, s0
   c2b54:	eed6 7a87 	vfnms.f32	s15, s13, s14
   c2b58:	ee35 7ae7 	vsub.f32	s14, s11, s15
   c2b5c:	ee17 3a10 	vmov	r3, s14
   c2b60:	f3c3 53c7 	ubfx	r3, r3, #23, #8
   c2b64:	1ad2      	subs	r2, r2, r3
   c2b66:	2a19      	cmp	r2, #25
   c2b68:	dc06      	bgt.n	c2b78 <__ieee754_rem_pio2f+0x1dc>
   c2b6a:	eeb0 0a65 	vmov.f32	s0, s11
   c2b6e:	ed85 7a00 	vstr	s14, [r5]
   c2b72:	e7c3      	b.n	c2afc <__ieee754_rem_pio2f+0x160>
   c2b74:	2303      	movs	r3, #3
   c2b76:	e774      	b.n	c2a62 <__ieee754_rem_pio2f+0xc6>
   c2b78:	ed9f 7a1f 	vldr	s14, [pc, #124]	; c2bf8 <__ieee754_rem_pio2f+0x25c>
   c2b7c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; c2bfc <__ieee754_rem_pio2f+0x260>
   c2b80:	eeb0 0a65 	vmov.f32	s0, s11
   c2b84:	eea6 0a07 	vfma.f32	s0, s12, s14
   c2b88:	ee75 7ac0 	vsub.f32	s15, s11, s0
   c2b8c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2b90:	eed6 7a85 	vfnms.f32	s15, s13, s10
   c2b94:	e7ae      	b.n	c2af4 <__ieee754_rem_pio2f+0x158>
   c2b96:	4294      	cmp	r4, r2
   c2b98:	ee70 7a27 	vadd.f32	s15, s0, s15
   c2b9c:	bf09      	itett	eq
   c2b9e:	eddf 6a0e 	vldreq	s13, [pc, #56]	; c2bd8 <__ieee754_rem_pio2f+0x23c>
   c2ba2:	ed9f 7a0e 	vldrne	s14, [pc, #56]	; c2bdc <__ieee754_rem_pio2f+0x240>
   c2ba6:	ed9f 7a0e 	vldreq	s14, [pc, #56]	; c2be0 <__ieee754_rem_pio2f+0x244>
   c2baa:	ee77 7aa6 	vaddeq.f32	s15, s15, s13
   c2bae:	f04f 30ff 	mov.w	r0, #4294967295
   c2bb2:	ee77 6a87 	vadd.f32	s13, s15, s14
   c2bb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
   c2bba:	edc5 6a00 	vstr	s13, [r5]
   c2bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
   c2bc2:	edc5 7a01 	vstr	s15, [r5, #4]
   c2bc6:	e719      	b.n	c29fc <__ieee754_rem_pio2f+0x60>
   c2bc8:	3f490fd8 	.word	0x3f490fd8
   c2bcc:	4016cbe3 	.word	0x4016cbe3
   c2bd0:	3fc90f80 	.word	0x3fc90f80
   c2bd4:	3fc90fd0 	.word	0x3fc90fd0
   c2bd8:	37354400 	.word	0x37354400
   c2bdc:	37354443 	.word	0x37354443
   c2be0:	2e85a308 	.word	0x2e85a308
   c2be4:	43490f80 	.word	0x43490f80
   c2be8:	43800000 	.word	0x43800000
   c2bec:	000c8238 	.word	0x000c8238
   c2bf0:	3f22f984 	.word	0x3f22f984
   c2bf4:	000c81b8 	.word	0x000c81b8
   c2bf8:	2e85a300 	.word	0x2e85a300
   c2bfc:	248d3132 	.word	0x248d3132

000c2c00 <__ieee754_sqrtf>:
   c2c00:	eeb1 0ac0 	vsqrt.f32	s0, s0
   c2c04:	4770      	bx	lr
   c2c06:	bf00      	nop

000c2c08 <__kernel_cosf>:
   c2c08:	ee10 3a10 	vmov	r3, s0
   c2c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c2c10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c2c14:	da2c      	bge.n	c2c70 <__kernel_cosf+0x68>
   c2c16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c2c1a:	ee17 3a90 	vmov	r3, s15
   c2c1e:	2b00      	cmp	r3, #0
   c2c20:	d060      	beq.n	c2ce4 <__kernel_cosf+0xdc>
   c2c22:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2c26:	eddf 7a31 	vldr	s15, [pc, #196]	; c2cec <__kernel_cosf+0xe4>
   c2c2a:	ed9f 5a31 	vldr	s10, [pc, #196]	; c2cf0 <__kernel_cosf+0xe8>
   c2c2e:	eddf 5a31 	vldr	s11, [pc, #196]	; c2cf4 <__kernel_cosf+0xec>
   c2c32:	ed9f 6a31 	vldr	s12, [pc, #196]	; c2cf8 <__kernel_cosf+0xf0>
   c2c36:	eddf 6a31 	vldr	s13, [pc, #196]	; c2cfc <__kernel_cosf+0xf4>
   c2c3a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2c3e:	eddf 7a30 	vldr	s15, [pc, #192]	; c2d00 <__kernel_cosf+0xf8>
   c2c42:	eee7 5a05 	vfma.f32	s11, s14, s10
   c2c46:	eea7 6a25 	vfma.f32	s12, s14, s11
   c2c4a:	eee7 7a06 	vfma.f32	s15, s14, s12
   c2c4e:	eee7 6a27 	vfma.f32	s13, s14, s15
   c2c52:	ee67 6a26 	vmul.f32	s13, s14, s13
   c2c56:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2c5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c2c5e:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2c62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2c66:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c2c6a:	ee30 0a60 	vsub.f32	s0, s0, s1
   c2c6e:	4770      	bx	lr
   c2c70:	ee20 7a00 	vmul.f32	s14, s0, s0
   c2c74:	eddf 7a1d 	vldr	s15, [pc, #116]	; c2cec <__kernel_cosf+0xe4>
   c2c78:	ed9f 5a1d 	vldr	s10, [pc, #116]	; c2cf0 <__kernel_cosf+0xe8>
   c2c7c:	eddf 5a1d 	vldr	s11, [pc, #116]	; c2cf4 <__kernel_cosf+0xec>
   c2c80:	ed9f 6a1d 	vldr	s12, [pc, #116]	; c2cf8 <__kernel_cosf+0xf0>
   c2c84:	eddf 6a1d 	vldr	s13, [pc, #116]	; c2cfc <__kernel_cosf+0xf4>
   c2c88:	4a1e      	ldr	r2, [pc, #120]	; (c2d04 <__kernel_cosf+0xfc>)
   c2c8a:	eea7 5a27 	vfma.f32	s10, s14, s15
   c2c8e:	4293      	cmp	r3, r2
   c2c90:	eddf 7a1b 	vldr	s15, [pc, #108]	; c2d00 <__kernel_cosf+0xf8>
   c2c94:	eee5 5a07 	vfma.f32	s11, s10, s14
   c2c98:	eea5 6a87 	vfma.f32	s12, s11, s14
   c2c9c:	eee6 7a07 	vfma.f32	s15, s12, s14
   c2ca0:	eee7 6a87 	vfma.f32	s13, s15, s14
   c2ca4:	ee66 6a87 	vmul.f32	s13, s13, s14
   c2ca8:	ddd5      	ble.n	c2c56 <__kernel_cosf+0x4e>
   c2caa:	4a17      	ldr	r2, [pc, #92]	; (c2d08 <__kernel_cosf+0x100>)
   c2cac:	4293      	cmp	r3, r2
   c2cae:	dc14      	bgt.n	c2cda <__kernel_cosf+0xd2>
   c2cb0:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   c2cb4:	ee07 3a90 	vmov	s15, r3
   c2cb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   c2cbc:	ee36 6a67 	vsub.f32	s12, s12, s15
   c2cc0:	ee60 0ac0 	vnmul.f32	s1, s1, s0
   c2cc4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   c2cc8:	eed7 7a25 	vfnms.f32	s15, s14, s11
   c2ccc:	eee7 0a26 	vfma.f32	s1, s14, s13
   c2cd0:	ee77 0ae0 	vsub.f32	s1, s15, s1
   c2cd4:	ee36 0a60 	vsub.f32	s0, s12, s1
   c2cd8:	4770      	bx	lr
   c2cda:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
   c2cde:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
   c2ce2:	e7ed      	b.n	c2cc0 <__kernel_cosf+0xb8>
   c2ce4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2ce8:	4770      	bx	lr
   c2cea:	bf00      	nop
   c2cec:	ad47d74e 	.word	0xad47d74e
   c2cf0:	310f74f6 	.word	0x310f74f6
   c2cf4:	b493f27c 	.word	0xb493f27c
   c2cf8:	37d00d01 	.word	0x37d00d01
   c2cfc:	3d2aaaab 	.word	0x3d2aaaab
   c2d00:	bab60b61 	.word	0xbab60b61
   c2d04:	3e999999 	.word	0x3e999999
   c2d08:	3f480000 	.word	0x3f480000

000c2d0c <__kernel_rem_pio2f>:
   c2d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2d10:	ed2d 8b04 	vpush	{d8-d9}
   c2d14:	b0db      	sub	sp, #364	; 0x16c
   c2d16:	461c      	mov	r4, r3
   c2d18:	9303      	str	r3, [sp, #12]
   c2d1a:	9106      	str	r1, [sp, #24]
   c2d1c:	4ba3      	ldr	r3, [pc, #652]	; (c2fac <__kernel_rem_pio2f+0x2a0>)
   c2d1e:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c2d20:	9208      	str	r2, [sp, #32]
   c2d22:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   c2d26:	1d11      	adds	r1, r2, #4
   c2d28:	4682      	mov	sl, r0
   c2d2a:	f104 38ff 	add.w	r8, r4, #4294967295
   c2d2e:	f2c0 82a2 	blt.w	c3276 <__kernel_rem_pio2f+0x56a>
   c2d32:	1ed3      	subs	r3, r2, #3
   c2d34:	bf44      	itt	mi
   c2d36:	4613      	movmi	r3, r2
   c2d38:	3304      	addmi	r3, #4
   c2d3a:	10db      	asrs	r3, r3, #3
   c2d3c:	9302      	str	r3, [sp, #8]
   c2d3e:	3301      	adds	r3, #1
   c2d40:	00db      	lsls	r3, r3, #3
   c2d42:	9307      	str	r3, [sp, #28]
   c2d44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   c2d48:	1a9b      	subs	r3, r3, r2
   c2d4a:	9305      	str	r3, [sp, #20]
   c2d4c:	9b02      	ldr	r3, [sp, #8]
   c2d4e:	eb15 0108 	adds.w	r1, r5, r8
   c2d52:	eba3 0308 	sub.w	r3, r3, r8
   c2d56:	d416      	bmi.n	c2d86 <__kernel_rem_pio2f+0x7a>
   c2d58:	3101      	adds	r1, #1
   c2d5a:	ed9f 7a95 	vldr	s14, [pc, #596]	; c2fb0 <__kernel_rem_pio2f+0x2a4>
   c2d5e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   c2d60:	4419      	add	r1, r3
   c2d62:	aa1e      	add	r2, sp, #120	; 0x78
   c2d64:	2b00      	cmp	r3, #0
   c2d66:	bfa4      	itt	ge
   c2d68:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
   c2d6c:	ee07 4a90 	vmovge	s15, r4
   c2d70:	f103 0301 	add.w	r3, r3, #1
   c2d74:	bfac      	ite	ge
   c2d76:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
   c2d7a:	eef0 7a47 	vmovlt.f32	s15, s14
   c2d7e:	428b      	cmp	r3, r1
   c2d80:	ece2 7a01 	vstmia	r2!, {s15}
   c2d84:	d1ee      	bne.n	c2d64 <__kernel_rem_pio2f+0x58>
   c2d86:	2d00      	cmp	r5, #0
   c2d88:	f2c0 82e5 	blt.w	c3356 <__kernel_rem_pio2f+0x64a>
   c2d8c:	9b03      	ldr	r3, [sp, #12]
   c2d8e:	a91e      	add	r1, sp, #120	; 0x78
   c2d90:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   c2d94:	ae46      	add	r6, sp, #280	; 0x118
   c2d96:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c2d9a:	4640      	mov	r0, r8
   c2d9c:	18ef      	adds	r7, r5, r3
   c2d9e:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
   c2da2:	f1b8 0f00 	cmp.w	r8, #0
   c2da6:	eddf 7a82 	vldr	s15, [pc, #520]	; c2fb0 <__kernel_rem_pio2f+0x2a4>
   c2daa:	db09      	blt.n	c2dc0 <__kernel_rem_pio2f+0xb4>
   c2dac:	4622      	mov	r2, r4
   c2dae:	4653      	mov	r3, sl
   c2db0:	ecf3 6a01 	vldmia	r3!, {s13}
   c2db4:	ed32 7a01 	vldmdb	r2!, {s14}
   c2db8:	428b      	cmp	r3, r1
   c2dba:	eee6 7a87 	vfma.f32	s15, s13, s14
   c2dbe:	d1f7      	bne.n	c2db0 <__kernel_rem_pio2f+0xa4>
   c2dc0:	3001      	adds	r0, #1
   c2dc2:	42b8      	cmp	r0, r7
   c2dc4:	ece6 7a01 	vstmia	r6!, {s15}
   c2dc8:	f104 0404 	add.w	r4, r4, #4
   c2dcc:	d1e9      	bne.n	c2da2 <__kernel_rem_pio2f+0x96>
   c2dce:	ab09      	add	r3, sp, #36	; 0x24
   c2dd0:	af0a      	add	r7, sp, #40	; 0x28
   c2dd2:	eb03 0985 	add.w	r9, r3, r5, lsl #2
   c2dd6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   c2dda:	3b08      	subs	r3, #8
   c2ddc:	ed9f 9a76 	vldr	s18, [pc, #472]	; c2fb8 <__kernel_rem_pio2f+0x2ac>
   c2de0:	eddf 8a74 	vldr	s17, [pc, #464]	; c2fb4 <__kernel_rem_pio2f+0x2a8>
   c2de4:	9805      	ldr	r0, [sp, #20]
   c2de6:	9304      	str	r3, [sp, #16]
   c2de8:	eb0a 040c 	add.w	r4, sl, ip
   c2dec:	ae46      	add	r6, sp, #280	; 0x118
   c2dee:	9500      	str	r5, [sp, #0]
   c2df0:	ab5a      	add	r3, sp, #360	; 0x168
   c2df2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   c2df6:	2d00      	cmp	r5, #0
   c2df8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
   c2dfc:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   c2e00:	dd16      	ble.n	c2e30 <__kernel_rem_pio2f+0x124>
   c2e02:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   c2e06:	463a      	mov	r2, r7
   c2e08:	ee60 7a09 	vmul.f32	s15, s0, s18
   c2e0c:	eeb0 7a40 	vmov.f32	s14, s0
   c2e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c2e14:	ed73 6a01 	vldmdb	r3!, {s13}
   c2e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2e1c:	42b3      	cmp	r3, r6
   c2e1e:	eea7 7ae8 	vfms.f32	s14, s15, s17
   c2e22:	ee37 0aa6 	vadd.f32	s0, s15, s13
   c2e26:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   c2e2a:	eca2 7a01 	vstmia	r2!, {s14}
   c2e2e:	d1eb      	bne.n	c2e08 <__kernel_rem_pio2f+0xfc>
   c2e30:	9001      	str	r0, [sp, #4]
   c2e32:	f000 fdbf 	bl	c39b4 <scalbnf>
   c2e36:	eeb0 8a40 	vmov.f32	s16, s0
   c2e3a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
   c2e3e:	ee28 0a00 	vmul.f32	s0, s16, s0
   c2e42:	f000 fd71 	bl	c3928 <floorf>
   c2e46:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   c2e4a:	eea0 8a67 	vfms.f32	s16, s0, s15
   c2e4e:	9801      	ldr	r0, [sp, #4]
   c2e50:	2800      	cmp	r0, #0
   c2e52:	eefd 9ac8 	vcvt.s32.f32	s19, s16
   c2e56:	eef8 7ae9 	vcvt.f32.s32	s15, s19
   c2e5a:	ee38 8a67 	vsub.f32	s16, s16, s15
   c2e5e:	dd79      	ble.n	c2f54 <__kernel_rem_pio2f+0x248>
   c2e60:	f105 3eff 	add.w	lr, r5, #4294967295
   c2e64:	f1c0 0308 	rsb	r3, r0, #8
   c2e68:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   c2e6c:	fa41 fc03 	asr.w	ip, r1, r3
   c2e70:	fa0c f303 	lsl.w	r3, ip, r3
   c2e74:	1acb      	subs	r3, r1, r3
   c2e76:	f1c0 0207 	rsb	r2, r0, #7
   c2e7a:	ee19 1a90 	vmov	r1, s19
   c2e7e:	fa43 f202 	asr.w	r2, r3, r2
   c2e82:	4461      	add	r1, ip
   c2e84:	2a00      	cmp	r2, #0
   c2e86:	f847 302e 	str.w	r3, [r7, lr, lsl #2]
   c2e8a:	ee09 1a90 	vmov	s19, r1
   c2e8e:	dc69      	bgt.n	c2f64 <__kernel_rem_pio2f+0x258>
   c2e90:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c2e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2e98:	f040 80c1 	bne.w	c301e <__kernel_rem_pio2f+0x312>
   c2e9c:	9b00      	ldr	r3, [sp, #0]
   c2e9e:	f105 3bff 	add.w	fp, r5, #4294967295
   c2ea2:	455b      	cmp	r3, fp
   c2ea4:	dc10      	bgt.n	c2ec8 <__kernel_rem_pio2f+0x1bc>
   c2ea6:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   c2eaa:	3b01      	subs	r3, #1
   c2eac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2eb0:	2100      	movs	r1, #0
   c2eb2:	4694      	mov	ip, r2
   c2eb4:	f853 2904 	ldr.w	r2, [r3], #-4
   c2eb8:	454b      	cmp	r3, r9
   c2eba:	ea41 0102 	orr.w	r1, r1, r2
   c2ebe:	d1f9      	bne.n	c2eb4 <__kernel_rem_pio2f+0x1a8>
   c2ec0:	4662      	mov	r2, ip
   c2ec2:	2900      	cmp	r1, #0
   c2ec4:	f040 80f3 	bne.w	c30ae <__kernel_rem_pio2f+0x3a2>
   c2ec8:	9b00      	ldr	r3, [sp, #0]
   c2eca:	3b01      	subs	r3, #1
   c2ecc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   c2ed0:	2b00      	cmp	r3, #0
   c2ed2:	f040 80e8 	bne.w	c30a6 <__kernel_rem_pio2f+0x39a>
   c2ed6:	9b04      	ldr	r3, [sp, #16]
   c2ed8:	f04f 0c01 	mov.w	ip, #1
   c2edc:	f853 2904 	ldr.w	r2, [r3], #-4
   c2ee0:	f10c 0c01 	add.w	ip, ip, #1
   c2ee4:	2a00      	cmp	r2, #0
   c2ee6:	d0f9      	beq.n	c2edc <__kernel_rem_pio2f+0x1d0>
   c2ee8:	1c6b      	adds	r3, r5, #1
   c2eea:	44ac      	add	ip, r5
   c2eec:	469e      	mov	lr, r3
   c2eee:	9a03      	ldr	r2, [sp, #12]
   c2ef0:	1951      	adds	r1, r2, r5
   c2ef2:	9a02      	ldr	r2, [sp, #8]
   c2ef4:	eb02 0b03 	add.w	fp, r2, r3
   c2ef8:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c2efc:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
   c2efe:	f10b 3bff 	add.w	fp, fp, #4294967295
   c2f02:	eb06 0583 	add.w	r5, r6, r3, lsl #2
   c2f06:	ab1e      	add	r3, sp, #120	; 0x78
   c2f08:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
   c2f0c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   c2f10:	eddb 7a01 	vldr	s15, [fp, #4]
   c2f14:	ed9f 7a26 	vldr	s14, [pc, #152]	; c2fb0 <__kernel_rem_pio2f+0x2a4>
   c2f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c2f1c:	f1b8 0f00 	cmp.w	r8, #0
   c2f20:	f10b 0b04 	add.w	fp, fp, #4
   c2f24:	edc1 7a00 	vstr	s15, [r1]
   c2f28:	460a      	mov	r2, r1
   c2f2a:	f101 0104 	add.w	r1, r1, #4
   c2f2e:	db09      	blt.n	c2f44 <__kernel_rem_pio2f+0x238>
   c2f30:	4653      	mov	r3, sl
   c2f32:	e001      	b.n	c2f38 <__kernel_rem_pio2f+0x22c>
   c2f34:	ed72 7a01 	vldmdb	r2!, {s15}
   c2f38:	ecf3 6a01 	vldmia	r3!, {s13}
   c2f3c:	42a3      	cmp	r3, r4
   c2f3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c2f42:	d1f7      	bne.n	c2f34 <__kernel_rem_pio2f+0x228>
   c2f44:	f10e 0e01 	add.w	lr, lr, #1
   c2f48:	45e6      	cmp	lr, ip
   c2f4a:	eca5 7a01 	vstmia	r5!, {s14}
   c2f4e:	dddf      	ble.n	c2f10 <__kernel_rem_pio2f+0x204>
   c2f50:	4665      	mov	r5, ip
   c2f52:	e74d      	b.n	c2df0 <__kernel_rem_pio2f+0xe4>
   c2f54:	f040 809d 	bne.w	c3092 <__kernel_rem_pio2f+0x386>
   c2f58:	1e6b      	subs	r3, r5, #1
   c2f5a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   c2f5e:	1212      	asrs	r2, r2, #8
   c2f60:	2a00      	cmp	r2, #0
   c2f62:	dd95      	ble.n	c2e90 <__kernel_rem_pio2f+0x184>
   c2f64:	ee19 3a90 	vmov	r3, s19
   c2f68:	2d00      	cmp	r5, #0
   c2f6a:	f103 0301 	add.w	r3, r3, #1
   c2f6e:	ee09 3a90 	vmov	s19, r3
   c2f72:	f340 8196 	ble.w	c32a2 <__kernel_rem_pio2f+0x596>
   c2f76:	6839      	ldr	r1, [r7, #0]
   c2f78:	2900      	cmp	r1, #0
   c2f7a:	f040 8080 	bne.w	c307e <__kernel_rem_pio2f+0x372>
   c2f7e:	2d01      	cmp	r5, #1
   c2f80:	d026      	beq.n	c2fd0 <__kernel_rem_pio2f+0x2c4>
   c2f82:	463b      	mov	r3, r7
   c2f84:	f04f 0c01 	mov.w	ip, #1
   c2f88:	f853 1f04 	ldr.w	r1, [r3, #4]!
   c2f8c:	2900      	cmp	r1, #0
   c2f8e:	d07a      	beq.n	c3086 <__kernel_rem_pio2f+0x37a>
   c2f90:	f10c 0301 	add.w	r3, ip, #1
   c2f94:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   c2f98:	429d      	cmp	r5, r3
   c2f9a:	f847 102c 	str.w	r1, [r7, ip, lsl #2]
   c2f9e:	dd16      	ble.n	c2fce <__kernel_rem_pio2f+0x2c2>
   c2fa0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   c2fa4:	44bb      	add	fp, r7
   c2fa6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c2faa:	e00a      	b.n	c2fc2 <__kernel_rem_pio2f+0x2b6>
   c2fac:	000c857c 	.word	0x000c857c
   c2fb0:	00000000 	.word	0x00000000
   c2fb4:	43800000 	.word	0x43800000
   c2fb8:	3b800000 	.word	0x3b800000
   c2fbc:	3fc90000 	.word	0x3fc90000
   c2fc0:	6819      	ldr	r1, [r3, #0]
   c2fc2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   c2fc6:	f843 1b04 	str.w	r1, [r3], #4
   c2fca:	455b      	cmp	r3, fp
   c2fcc:	d1f8      	bne.n	c2fc0 <__kernel_rem_pio2f+0x2b4>
   c2fce:	2101      	movs	r1, #1
   c2fd0:	2800      	cmp	r0, #0
   c2fd2:	dd0c      	ble.n	c2fee <__kernel_rem_pio2f+0x2e2>
   c2fd4:	2801      	cmp	r0, #1
   c2fd6:	f000 8145 	beq.w	c3264 <__kernel_rem_pio2f+0x558>
   c2fda:	2802      	cmp	r0, #2
   c2fdc:	d107      	bne.n	c2fee <__kernel_rem_pio2f+0x2e2>
   c2fde:	f105 3cff 	add.w	ip, r5, #4294967295
   c2fe2:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c2fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   c2fea:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c2fee:	2a02      	cmp	r2, #2
   c2ff0:	f47f af4e 	bne.w	c2e90 <__kernel_rem_pio2f+0x184>
   c2ff4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c2ff8:	ee30 8a48 	vsub.f32	s16, s0, s16
   c2ffc:	2900      	cmp	r1, #0
   c2ffe:	f43f af47 	beq.w	c2e90 <__kernel_rem_pio2f+0x184>
   c3002:	9209      	str	r2, [sp, #36]	; 0x24
   c3004:	9001      	str	r0, [sp, #4]
   c3006:	f000 fcd5 	bl	c39b4 <scalbnf>
   c300a:	ee38 8a40 	vsub.f32	s16, s16, s0
   c300e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c3010:	9801      	ldr	r0, [sp, #4]
   c3012:	eeb5 8a40 	vcmp.f32	s16, #0.0
   c3016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c301a:	f43f af3f 	beq.w	c2e9c <__kernel_rem_pio2f+0x190>
   c301e:	9202      	str	r2, [sp, #8]
   c3020:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   c3024:	eeb0 0a48 	vmov.f32	s0, s16
   c3028:	1a98      	subs	r0, r3, r2
   c302a:	9501      	str	r5, [sp, #4]
   c302c:	9d00      	ldr	r5, [sp, #0]
   c302e:	f000 fcc1 	bl	c39b4 <scalbnf>
   c3032:	ed1f 7a20 	vldr	s14, [pc, #-128]	; c2fb4 <__kernel_rem_pio2f+0x2a8>
   c3036:	eeb4 0ac7 	vcmpe.f32	s0, s14
   c303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c303e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   c3042:	f2c0 8156 	blt.w	c32f2 <__kernel_rem_pio2f+0x5e6>
   c3046:	ed5f 7a24 	vldr	s15, [pc, #-144]	; c2fb8 <__kernel_rem_pio2f+0x2ac>
   c304a:	9905      	ldr	r1, [sp, #20]
   c304c:	ee60 7a27 	vmul.f32	s15, s0, s15
   c3050:	3108      	adds	r1, #8
   c3052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3056:	9105      	str	r1, [sp, #20]
   c3058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c305c:	f103 0b01 	add.w	fp, r3, #1
   c3060:	eea7 0ac7 	vfms.f32	s0, s15, s14
   c3064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   c3068:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c306c:	ee10 1a10 	vmov	r1, s0
   c3070:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3074:	ee17 3a90 	vmov	r3, s15
   c3078:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   c307c:	e02e      	b.n	c30dc <__kernel_rem_pio2f+0x3d0>
   c307e:	2301      	movs	r3, #1
   c3080:	f04f 0c00 	mov.w	ip, #0
   c3084:	e786      	b.n	c2f94 <__kernel_rem_pio2f+0x288>
   c3086:	f10c 0c01 	add.w	ip, ip, #1
   c308a:	45ac      	cmp	ip, r5
   c308c:	f47f af7c 	bne.w	c2f88 <__kernel_rem_pio2f+0x27c>
   c3090:	e79e      	b.n	c2fd0 <__kernel_rem_pio2f+0x2c4>
   c3092:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   c3096:	eeb4 8ae7 	vcmpe.f32	s16, s15
   c309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c309e:	f280 80ef 	bge.w	c3280 <__kernel_rem_pio2f+0x574>
   c30a2:	2200      	movs	r2, #0
   c30a4:	e6f4      	b.n	c2e90 <__kernel_rem_pio2f+0x184>
   c30a6:	1c6b      	adds	r3, r5, #1
   c30a8:	469e      	mov	lr, r3
   c30aa:	469c      	mov	ip, r3
   c30ac:	e71f      	b.n	c2eee <__kernel_rem_pio2f+0x1e2>
   c30ae:	9905      	ldr	r1, [sp, #20]
   c30b0:	f1a1 0008 	sub.w	r0, r1, #8
   c30b4:	f857 102b 	ldr.w	r1, [r7, fp, lsl #2]
   c30b8:	9005      	str	r0, [sp, #20]
   c30ba:	462b      	mov	r3, r5
   c30bc:	9d00      	ldr	r5, [sp, #0]
   c30be:	b969      	cbnz	r1, c30dc <__kernel_rem_pio2f+0x3d0>
   c30c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c30c4:	3b02      	subs	r3, #2
   c30c6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   c30ca:	4601      	mov	r1, r0
   c30cc:	f853 0904 	ldr.w	r0, [r3], #-4
   c30d0:	f10b 3bff 	add.w	fp, fp, #4294967295
   c30d4:	3908      	subs	r1, #8
   c30d6:	2800      	cmp	r0, #0
   c30d8:	d0f8      	beq.n	c30cc <__kernel_rem_pio2f+0x3c0>
   c30da:	9105      	str	r1, [sp, #20]
   c30dc:	9805      	ldr	r0, [sp, #20]
   c30de:	9200      	str	r2, [sp, #0]
   c30e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   c30e4:	f000 fc66 	bl	c39b4 <scalbnf>
   c30e8:	f1bb 0f00 	cmp.w	fp, #0
   c30ec:	9a00      	ldr	r2, [sp, #0]
   c30ee:	f2c0 8125 	blt.w	c333c <__kernel_rem_pio2f+0x630>
   c30f2:	ea4f 0e8b 	mov.w	lr, fp, lsl #2
   c30f6:	ab46      	add	r3, sp, #280	; 0x118
   c30f8:	eb03 060e 	add.w	r6, r3, lr
   c30fc:	f10e 0c04 	add.w	ip, lr, #4
   c3100:	ed1f 7a53 	vldr	s14, [pc, #-332]	; c2fb8 <__kernel_rem_pio2f+0x2ac>
   c3104:	eb07 030c 	add.w	r3, r7, ip
   c3108:	1d31      	adds	r1, r6, #4
   c310a:	ed73 7a01 	vldmdb	r3!, {s15}
   c310e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c3112:	42bb      	cmp	r3, r7
   c3114:	ee67 7a80 	vmul.f32	s15, s15, s0
   c3118:	ee20 0a07 	vmul.f32	s0, s0, s14
   c311c:	ed61 7a01 	vstmdb	r1!, {s15}
   c3120:	d1f3      	bne.n	c310a <__kernel_rem_pio2f+0x3fe>
   c3122:	2d00      	cmp	r5, #0
   c3124:	ed1f 6a5b 	vldr	s12, [pc, #-364]	; c2fbc <__kernel_rem_pio2f+0x2b0>
   c3128:	f04f 0400 	mov.w	r4, #0
   c312c:	db20      	blt.n	c3170 <__kernel_rem_pio2f+0x464>
   c312e:	4892      	ldr	r0, [pc, #584]	; (c3378 <__kernel_rem_pio2f+0x66c>)
   c3130:	eddf 7a92 	vldr	s15, [pc, #584]	; c337c <__kernel_rem_pio2f+0x670>
   c3134:	eeb0 7a46 	vmov.f32	s14, s12
   c3138:	4631      	mov	r1, r6
   c313a:	2300      	movs	r3, #0
   c313c:	e003      	b.n	c3146 <__kernel_rem_pio2f+0x43a>
   c313e:	429c      	cmp	r4, r3
   c3140:	db08      	blt.n	c3154 <__kernel_rem_pio2f+0x448>
   c3142:	ecb0 7a01 	vldmia	r0!, {s14}
   c3146:	ecf1 6a01 	vldmia	r1!, {s13}
   c314a:	3301      	adds	r3, #1
   c314c:	429d      	cmp	r5, r3
   c314e:	eee6 7a87 	vfma.f32	s15, s13, s14
   c3152:	daf4      	bge.n	c313e <__kernel_rem_pio2f+0x432>
   c3154:	ab5a      	add	r3, sp, #360	; 0x168
   c3156:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   c315a:	45a3      	cmp	fp, r4
   c315c:	ed43 7a28 	vstr	s15, [r3, #-160]	; 0xffffff60
   c3160:	f1a6 0604 	sub.w	r6, r6, #4
   c3164:	f104 0301 	add.w	r3, r4, #1
   c3168:	d005      	beq.n	c3176 <__kernel_rem_pio2f+0x46a>
   c316a:	2d00      	cmp	r5, #0
   c316c:	461c      	mov	r4, r3
   c316e:	dade      	bge.n	c312e <__kernel_rem_pio2f+0x422>
   c3170:	eddf 7a82 	vldr	s15, [pc, #520]	; c337c <__kernel_rem_pio2f+0x670>
   c3174:	e7ee      	b.n	c3154 <__kernel_rem_pio2f+0x448>
   c3176:	9968      	ldr	r1, [sp, #416]	; 0x1a0
   c3178:	2902      	cmp	r1, #2
   c317a:	dc1c      	bgt.n	c31b6 <__kernel_rem_pio2f+0x4aa>
   c317c:	2900      	cmp	r1, #0
   c317e:	f300 8092 	bgt.w	c32a6 <__kernel_rem_pio2f+0x59a>
   c3182:	d10f      	bne.n	c31a4 <__kernel_rem_pio2f+0x498>
   c3184:	ab32      	add	r3, sp, #200	; 0xc8
   c3186:	eddf 7a7d 	vldr	s15, [pc, #500]	; c337c <__kernel_rem_pio2f+0x670>
   c318a:	449c      	add	ip, r3
   c318c:	ed3c 7a01 	vldmdb	ip!, {s14}
   c3190:	4563      	cmp	r3, ip
   c3192:	ee77 7a87 	vadd.f32	s15, s15, s14
   c3196:	d1f9      	bne.n	c318c <__kernel_rem_pio2f+0x480>
   c3198:	b10a      	cbz	r2, c319e <__kernel_rem_pio2f+0x492>
   c319a:	eef1 7a67 	vneg.f32	s15, s15
   c319e:	9b06      	ldr	r3, [sp, #24]
   c31a0:	edc3 7a00 	vstr	s15, [r3]
   c31a4:	ee19 3a90 	vmov	r3, s19
   c31a8:	f003 0007 	and.w	r0, r3, #7
   c31ac:	b05b      	add	sp, #364	; 0x16c
   c31ae:	ecbd 8b04 	vpop	{d8-d9}
   c31b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c31b6:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c31b8:	2b03      	cmp	r3, #3
   c31ba:	d1f3      	bne.n	c31a4 <__kernel_rem_pio2f+0x498>
   c31bc:	f1bb 0f00 	cmp.w	fp, #0
   c31c0:	f000 80d1 	beq.w	c3366 <__kernel_rem_pio2f+0x65a>
   c31c4:	ab5a      	add	r3, sp, #360	; 0x168
   c31c6:	4473      	add	r3, lr
   c31c8:	a932      	add	r1, sp, #200	; 0xc8
   c31ca:	ed13 7a28 	vldr	s14, [r3, #-160]	; 0xffffff60
   c31ce:	eb01 038b 	add.w	r3, r1, fp, lsl #2
   c31d2:	ed73 7a01 	vldmdb	r3!, {s15}
   c31d6:	eef0 6a47 	vmov.f32	s13, s14
   c31da:	ee37 7a27 	vadd.f32	s14, s14, s15
   c31de:	4299      	cmp	r1, r3
   c31e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c31e4:	ed83 7a00 	vstr	s14, [r3]
   c31e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c31ec:	edc3 7a01 	vstr	s15, [r3, #4]
   c31f0:	d1ef      	bne.n	c31d2 <__kernel_rem_pio2f+0x4c6>
   c31f2:	f1bb 0f01 	cmp.w	fp, #1
   c31f6:	f340 80b6 	ble.w	c3366 <__kernel_rem_pio2f+0x65a>
   c31fa:	f10b 4b80 	add.w	fp, fp, #1073741824	; 0x40000000
   c31fe:	ab5a      	add	r3, sp, #360	; 0x168
   c3200:	f10b 3bff 	add.w	fp, fp, #4294967295
   c3204:	449e      	add	lr, r3
   c3206:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   c320a:	f10b 0304 	add.w	r3, fp, #4
   c320e:	ed1e 7a28 	vldr	s14, [lr, #-160]	; 0xffffff60
   c3212:	440b      	add	r3, r1
   c3214:	a833      	add	r0, sp, #204	; 0xcc
   c3216:	ed73 7a01 	vldmdb	r3!, {s15}
   c321a:	eef0 6a47 	vmov.f32	s13, s14
   c321e:	ee37 7a27 	vadd.f32	s14, s14, s15
   c3222:	4298      	cmp	r0, r3
   c3224:	ee77 7ac7 	vsub.f32	s15, s15, s14
   c3228:	ed83 7a00 	vstr	s14, [r3]
   c322c:	ee77 7aa6 	vadd.f32	s15, s15, s13
   c3230:	edc3 7a01 	vstr	s15, [r3, #4]
   c3234:	d1ef      	bne.n	c3216 <__kernel_rem_pio2f+0x50a>
   c3236:	f10b 0b08 	add.w	fp, fp, #8
   c323a:	eddf 7a50 	vldr	s15, [pc, #320]	; c337c <__kernel_rem_pio2f+0x670>
   c323e:	eb01 030b 	add.w	r3, r1, fp
   c3242:	3108      	adds	r1, #8
   c3244:	ed33 7a01 	vldmdb	r3!, {s14}
   c3248:	4299      	cmp	r1, r3
   c324a:	ee77 7a87 	vadd.f32	s15, s15, s14
   c324e:	d1f9      	bne.n	c3244 <__kernel_rem_pio2f+0x538>
   c3250:	2a00      	cmp	r2, #0
   c3252:	d156      	bne.n	c3302 <__kernel_rem_pio2f+0x5f6>
   c3254:	9906      	ldr	r1, [sp, #24]
   c3256:	9a32      	ldr	r2, [sp, #200]	; 0xc8
   c3258:	9b33      	ldr	r3, [sp, #204]	; 0xcc
   c325a:	600a      	str	r2, [r1, #0]
   c325c:	604b      	str	r3, [r1, #4]
   c325e:	edc1 7a02 	vstr	s15, [r1, #8]
   c3262:	e79f      	b.n	c31a4 <__kernel_rem_pio2f+0x498>
   c3264:	f105 3cff 	add.w	ip, r5, #4294967295
   c3268:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
   c326c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   c3270:	f847 302c 	str.w	r3, [r7, ip, lsl #2]
   c3274:	e6bb      	b.n	c2fee <__kernel_rem_pio2f+0x2e2>
   c3276:	2308      	movs	r3, #8
   c3278:	9307      	str	r3, [sp, #28]
   c327a:	2300      	movs	r3, #0
   c327c:	9302      	str	r3, [sp, #8]
   c327e:	e561      	b.n	c2d44 <__kernel_rem_pio2f+0x38>
   c3280:	ee19 3a90 	vmov	r3, s19
   c3284:	2d00      	cmp	r5, #0
   c3286:	f103 0301 	add.w	r3, r3, #1
   c328a:	ee09 3a90 	vmov	s19, r3
   c328e:	bfc8      	it	gt
   c3290:	2202      	movgt	r2, #2
   c3292:	f73f ae70 	bgt.w	c2f76 <__kernel_rem_pio2f+0x26a>
   c3296:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c329a:	ee37 8ac8 	vsub.f32	s16, s15, s16
   c329e:	2202      	movs	r2, #2
   c32a0:	e5f6      	b.n	c2e90 <__kernel_rem_pio2f+0x184>
   c32a2:	2100      	movs	r1, #0
   c32a4:	e694      	b.n	c2fd0 <__kernel_rem_pio2f+0x2c4>
   c32a6:	a932      	add	r1, sp, #200	; 0xc8
   c32a8:	eddf 7a34 	vldr	s15, [pc, #208]	; c337c <__kernel_rem_pio2f+0x670>
   c32ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c32b0:	ed33 7a01 	vldmdb	r3!, {s14}
   c32b4:	4299      	cmp	r1, r3
   c32b6:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32ba:	d1f9      	bne.n	c32b0 <__kernel_rem_pio2f+0x5a4>
   c32bc:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
   c32c0:	bb8a      	cbnz	r2, c3326 <__kernel_rem_pio2f+0x61a>
   c32c2:	9b06      	ldr	r3, [sp, #24]
   c32c4:	f1bb 0f00 	cmp.w	fp, #0
   c32c8:	edc3 7a00 	vstr	s15, [r3]
   c32cc:	ee77 7a67 	vsub.f32	s15, s14, s15
   c32d0:	dd0b      	ble.n	c32ea <__kernel_rem_pio2f+0x5de>
   c32d2:	a933      	add	r1, sp, #204	; 0xcc
   c32d4:	2301      	movs	r3, #1
   c32d6:	ecb1 7a01 	vldmia	r1!, {s14}
   c32da:	3301      	adds	r3, #1
   c32dc:	459b      	cmp	fp, r3
   c32de:	ee77 7a87 	vadd.f32	s15, s15, s14
   c32e2:	daf8      	bge.n	c32d6 <__kernel_rem_pio2f+0x5ca>
   c32e4:	b10a      	cbz	r2, c32ea <__kernel_rem_pio2f+0x5de>
   c32e6:	eef1 7a67 	vneg.f32	s15, s15
   c32ea:	9b06      	ldr	r3, [sp, #24]
   c32ec:	edc3 7a01 	vstr	s15, [r3, #4]
   c32f0:	e758      	b.n	c31a4 <__kernel_rem_pio2f+0x498>
   c32f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   c32f6:	469b      	mov	fp, r3
   c32f8:	ee10 1a10 	vmov	r1, s0
   c32fc:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   c3300:	e6ec      	b.n	c30dc <__kernel_rem_pio2f+0x3d0>
   c3302:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
   c3306:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
   c330a:	9b06      	ldr	r3, [sp, #24]
   c330c:	eef1 6a66 	vneg.f32	s13, s13
   c3310:	eeb1 7a47 	vneg.f32	s14, s14
   c3314:	eef1 7a67 	vneg.f32	s15, s15
   c3318:	edc3 6a00 	vstr	s13, [r3]
   c331c:	ed83 7a01 	vstr	s14, [r3, #4]
   c3320:	edc3 7a02 	vstr	s15, [r3, #8]
   c3324:	e73e      	b.n	c31a4 <__kernel_rem_pio2f+0x498>
   c3326:	9b06      	ldr	r3, [sp, #24]
   c3328:	eef1 6a67 	vneg.f32	s13, s15
   c332c:	f1bb 0f00 	cmp.w	fp, #0
   c3330:	ee77 7a67 	vsub.f32	s15, s14, s15
   c3334:	edc3 6a00 	vstr	s13, [r3]
   c3338:	dccb      	bgt.n	c32d2 <__kernel_rem_pio2f+0x5c6>
   c333a:	e7d4      	b.n	c32e6 <__kernel_rem_pio2f+0x5da>
   c333c:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c333e:	2b02      	cmp	r3, #2
   c3340:	dc0d      	bgt.n	c335e <__kernel_rem_pio2f+0x652>
   c3342:	2b00      	cmp	r3, #0
   c3344:	dc14      	bgt.n	c3370 <__kernel_rem_pio2f+0x664>
   c3346:	f47f af2d 	bne.w	c31a4 <__kernel_rem_pio2f+0x498>
   c334a:	eddf 7a0c 	vldr	s15, [pc, #48]	; c337c <__kernel_rem_pio2f+0x670>
   c334e:	2a00      	cmp	r2, #0
   c3350:	f43f af25 	beq.w	c319e <__kernel_rem_pio2f+0x492>
   c3354:	e721      	b.n	c319a <__kernel_rem_pio2f+0x48e>
   c3356:	9b03      	ldr	r3, [sp, #12]
   c3358:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   c335c:	e537      	b.n	c2dce <__kernel_rem_pio2f+0xc2>
   c335e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   c3360:	2b03      	cmp	r3, #3
   c3362:	f47f af1f 	bne.w	c31a4 <__kernel_rem_pio2f+0x498>
   c3366:	eddf 7a05 	vldr	s15, [pc, #20]	; c337c <__kernel_rem_pio2f+0x670>
   c336a:	2a00      	cmp	r2, #0
   c336c:	d1c9      	bne.n	c3302 <__kernel_rem_pio2f+0x5f6>
   c336e:	e771      	b.n	c3254 <__kernel_rem_pio2f+0x548>
   c3370:	eddf 7a02 	vldr	s15, [pc, #8]	; c337c <__kernel_rem_pio2f+0x670>
   c3374:	e7a2      	b.n	c32bc <__kernel_rem_pio2f+0x5b0>
   c3376:	bf00      	nop
   c3378:	000c8554 	.word	0x000c8554
   c337c:	00000000 	.word	0x00000000

000c3380 <__kernel_sinf>:
   c3380:	ee10 3a10 	vmov	r3, s0
   c3384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3388:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   c338c:	da04      	bge.n	c3398 <__kernel_sinf+0x18>
   c338e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   c3392:	ee17 3a90 	vmov	r3, s15
   c3396:	b35b      	cbz	r3, c33f0 <__kernel_sinf+0x70>
   c3398:	ee60 7a00 	vmul.f32	s15, s0, s0
   c339c:	ed9f 7a15 	vldr	s14, [pc, #84]	; c33f4 <__kernel_sinf+0x74>
   c33a0:	eddf 5a15 	vldr	s11, [pc, #84]	; c33f8 <__kernel_sinf+0x78>
   c33a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; c33fc <__kernel_sinf+0x7c>
   c33a8:	eddf 6a15 	vldr	s13, [pc, #84]	; c3400 <__kernel_sinf+0x80>
   c33ac:	eee7 5a87 	vfma.f32	s11, s15, s14
   c33b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3404 <__kernel_sinf+0x84>
   c33b4:	eea5 6aa7 	vfma.f32	s12, s11, s15
   c33b8:	ee20 5a27 	vmul.f32	s10, s0, s15
   c33bc:	eee6 6a27 	vfma.f32	s13, s12, s15
   c33c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
   c33c4:	b930      	cbnz	r0, c33d4 <__kernel_sinf+0x54>
   c33c6:	eddf 6a10 	vldr	s13, [pc, #64]	; c3408 <__kernel_sinf+0x88>
   c33ca:	eee7 6a87 	vfma.f32	s13, s15, s14
   c33ce:	eea6 0a85 	vfma.f32	s0, s13, s10
   c33d2:	4770      	bx	lr
   c33d4:	ee27 7a45 	vnmul.f32	s14, s14, s10
   c33d8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   c33dc:	eea0 7aa6 	vfma.f32	s14, s1, s13
   c33e0:	eddf 6a0a 	vldr	s13, [pc, #40]	; c340c <__kernel_sinf+0x8c>
   c33e4:	eed7 0a27 	vfnms.f32	s1, s14, s15
   c33e8:	eee5 0a26 	vfma.f32	s1, s10, s13
   c33ec:	ee30 0a60 	vsub.f32	s0, s0, s1
   c33f0:	4770      	bx	lr
   c33f2:	bf00      	nop
   c33f4:	2f2ec9d3 	.word	0x2f2ec9d3
   c33f8:	b2d72f34 	.word	0xb2d72f34
   c33fc:	3638ef1b 	.word	0x3638ef1b
   c3400:	b9500d01 	.word	0xb9500d01
   c3404:	3c088889 	.word	0x3c088889
   c3408:	be2aaaab 	.word	0xbe2aaaab
   c340c:	3e2aaaab 	.word	0x3e2aaaab

000c3410 <atan>:
   c3410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3414:	ec55 4b10 	vmov	r4, r5, d0
   c3418:	4bc3      	ldr	r3, [pc, #780]	; (c3728 <atan+0x318>)
   c341a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c341e:	429e      	cmp	r6, r3
   c3420:	46aa      	mov	sl, r5
   c3422:	dd17      	ble.n	c3454 <atan+0x44>
   c3424:	4bc1      	ldr	r3, [pc, #772]	; (c372c <atan+0x31c>)
   c3426:	429e      	cmp	r6, r3
   c3428:	dc0a      	bgt.n	c3440 <atan+0x30>
   c342a:	d007      	beq.n	c343c <atan+0x2c>
   c342c:	f1ba 0f00 	cmp.w	sl, #0
   c3430:	f340 80cb 	ble.w	c35ca <atan+0x1ba>
   c3434:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c36b8 <atan+0x2a8>
   c3438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c343c:	2c00      	cmp	r4, #0
   c343e:	d0f5      	beq.n	c342c <atan+0x1c>
   c3440:	4622      	mov	r2, r4
   c3442:	462b      	mov	r3, r5
   c3444:	4620      	mov	r0, r4
   c3446:	4629      	mov	r1, r5
   c3448:	f000 fb2c 	bl	c3aa4 <__adddf3>
   c344c:	ec41 0b10 	vmov	d0, r0, r1
   c3450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3454:	4bb6      	ldr	r3, [pc, #728]	; (c3730 <atan+0x320>)
   c3456:	429e      	cmp	r6, r3
   c3458:	f300 80bb 	bgt.w	c35d2 <atan+0x1c2>
   c345c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c3460:	429e      	cmp	r6, r3
   c3462:	f340 80a0 	ble.w	c35a6 <atan+0x196>
   c3466:	f04f 3bff 	mov.w	fp, #4294967295
   c346a:	4622      	mov	r2, r4
   c346c:	462b      	mov	r3, r5
   c346e:	4620      	mov	r0, r4
   c3470:	4629      	mov	r1, r5
   c3472:	f000 fccd 	bl	c3e10 <__aeabi_dmul>
   c3476:	4602      	mov	r2, r0
   c3478:	460b      	mov	r3, r1
   c347a:	4680      	mov	r8, r0
   c347c:	4689      	mov	r9, r1
   c347e:	f000 fcc7 	bl	c3e10 <__aeabi_dmul>
   c3482:	a38f      	add	r3, pc, #572	; (adr r3, c36c0 <atan+0x2b0>)
   c3484:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3488:	4606      	mov	r6, r0
   c348a:	460f      	mov	r7, r1
   c348c:	f000 fcc0 	bl	c3e10 <__aeabi_dmul>
   c3490:	a38d      	add	r3, pc, #564	; (adr r3, c36c8 <atan+0x2b8>)
   c3492:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3496:	f000 fb05 	bl	c3aa4 <__adddf3>
   c349a:	4632      	mov	r2, r6
   c349c:	463b      	mov	r3, r7
   c349e:	f000 fcb7 	bl	c3e10 <__aeabi_dmul>
   c34a2:	a38b      	add	r3, pc, #556	; (adr r3, c36d0 <atan+0x2c0>)
   c34a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34a8:	f000 fafc 	bl	c3aa4 <__adddf3>
   c34ac:	4632      	mov	r2, r6
   c34ae:	463b      	mov	r3, r7
   c34b0:	f000 fcae 	bl	c3e10 <__aeabi_dmul>
   c34b4:	a388      	add	r3, pc, #544	; (adr r3, c36d8 <atan+0x2c8>)
   c34b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34ba:	f000 faf3 	bl	c3aa4 <__adddf3>
   c34be:	4632      	mov	r2, r6
   c34c0:	463b      	mov	r3, r7
   c34c2:	f000 fca5 	bl	c3e10 <__aeabi_dmul>
   c34c6:	a386      	add	r3, pc, #536	; (adr r3, c36e0 <atan+0x2d0>)
   c34c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34cc:	f000 faea 	bl	c3aa4 <__adddf3>
   c34d0:	4632      	mov	r2, r6
   c34d2:	463b      	mov	r3, r7
   c34d4:	f000 fc9c 	bl	c3e10 <__aeabi_dmul>
   c34d8:	a383      	add	r3, pc, #524	; (adr r3, c36e8 <atan+0x2d8>)
   c34da:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34de:	f000 fae1 	bl	c3aa4 <__adddf3>
   c34e2:	4642      	mov	r2, r8
   c34e4:	464b      	mov	r3, r9
   c34e6:	f000 fc93 	bl	c3e10 <__aeabi_dmul>
   c34ea:	a381      	add	r3, pc, #516	; (adr r3, c36f0 <atan+0x2e0>)
   c34ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   c34f0:	4680      	mov	r8, r0
   c34f2:	4689      	mov	r9, r1
   c34f4:	4630      	mov	r0, r6
   c34f6:	4639      	mov	r1, r7
   c34f8:	f000 fc8a 	bl	c3e10 <__aeabi_dmul>
   c34fc:	a37e      	add	r3, pc, #504	; (adr r3, c36f8 <atan+0x2e8>)
   c34fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3502:	f000 facd 	bl	c3aa0 <__aeabi_dsub>
   c3506:	4632      	mov	r2, r6
   c3508:	463b      	mov	r3, r7
   c350a:	f000 fc81 	bl	c3e10 <__aeabi_dmul>
   c350e:	a37c      	add	r3, pc, #496	; (adr r3, c3700 <atan+0x2f0>)
   c3510:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3514:	f000 fac4 	bl	c3aa0 <__aeabi_dsub>
   c3518:	4632      	mov	r2, r6
   c351a:	463b      	mov	r3, r7
   c351c:	f000 fc78 	bl	c3e10 <__aeabi_dmul>
   c3520:	a379      	add	r3, pc, #484	; (adr r3, c3708 <atan+0x2f8>)
   c3522:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3526:	f000 fabb 	bl	c3aa0 <__aeabi_dsub>
   c352a:	4632      	mov	r2, r6
   c352c:	463b      	mov	r3, r7
   c352e:	f000 fc6f 	bl	c3e10 <__aeabi_dmul>
   c3532:	a377      	add	r3, pc, #476	; (adr r3, c3710 <atan+0x300>)
   c3534:	e9d3 2300 	ldrd	r2, r3, [r3]
   c3538:	f000 fab2 	bl	c3aa0 <__aeabi_dsub>
   c353c:	4632      	mov	r2, r6
   c353e:	463b      	mov	r3, r7
   c3540:	f000 fc66 	bl	c3e10 <__aeabi_dmul>
   c3544:	f1bb 3fff 	cmp.w	fp, #4294967295
   c3548:	4602      	mov	r2, r0
   c354a:	460b      	mov	r3, r1
   c354c:	4640      	mov	r0, r8
   c354e:	4649      	mov	r1, r9
   c3550:	d062      	beq.n	c3618 <atan+0x208>
   c3552:	f000 faa7 	bl	c3aa4 <__adddf3>
   c3556:	4e77      	ldr	r6, [pc, #476]	; (c3734 <atan+0x324>)
   c3558:	4622      	mov	r2, r4
   c355a:	462b      	mov	r3, r5
   c355c:	f000 fc58 	bl	c3e10 <__aeabi_dmul>
   c3560:	4b75      	ldr	r3, [pc, #468]	; (c3738 <atan+0x328>)
   c3562:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c3566:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c356a:	449b      	add	fp, r3
   c356c:	e9db 2300 	ldrd	r2, r3, [fp]
   c3570:	f000 fa96 	bl	c3aa0 <__aeabi_dsub>
   c3574:	4622      	mov	r2, r4
   c3576:	462b      	mov	r3, r5
   c3578:	f000 fa92 	bl	c3aa0 <__aeabi_dsub>
   c357c:	4602      	mov	r2, r0
   c357e:	460b      	mov	r3, r1
   c3580:	e9d6 0100 	ldrd	r0, r1, [r6]
   c3584:	f000 fa8c 	bl	c3aa0 <__aeabi_dsub>
   c3588:	f1ba 0f00 	cmp.w	sl, #0
   c358c:	ec41 0b10 	vmov	d0, r0, r1
   c3590:	f6bf af5e 	bge.w	c3450 <atan+0x40>
   c3594:	ee10 1a90 	vmov	r1, s1
   c3598:	4602      	mov	r2, r0
   c359a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c359e:	ec43 2b10 	vmov	d0, r2, r3
   c35a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c35a6:	a35c      	add	r3, pc, #368	; (adr r3, c3718 <atan+0x308>)
   c35a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c35ac:	ee10 0a10 	vmov	r0, s0
   c35b0:	4629      	mov	r1, r5
   c35b2:	f000 fa77 	bl	c3aa4 <__adddf3>
   c35b6:	4b61      	ldr	r3, [pc, #388]	; (c373c <atan+0x32c>)
   c35b8:	2200      	movs	r2, #0
   c35ba:	f000 feb9 	bl	c4330 <__aeabi_dcmpgt>
   c35be:	2800      	cmp	r0, #0
   c35c0:	f43f af51 	beq.w	c3466 <atan+0x56>
   c35c4:	ec45 4b10 	vmov	d0, r4, r5
   c35c8:	e742      	b.n	c3450 <atan+0x40>
   c35ca:	ed9f 0b55 	vldr	d0, [pc, #340]	; c3720 <atan+0x310>
   c35ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c35d2:	f000 f8bd 	bl	c3750 <fabs>
   c35d6:	4b5a      	ldr	r3, [pc, #360]	; (c3740 <atan+0x330>)
   c35d8:	429e      	cmp	r6, r3
   c35da:	ec55 4b10 	vmov	r4, r5, d0
   c35de:	dc2b      	bgt.n	c3638 <atan+0x228>
   c35e0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c35e4:	429e      	cmp	r6, r3
   c35e6:	dc56      	bgt.n	c3696 <atan+0x286>
   c35e8:	ee10 2a10 	vmov	r2, s0
   c35ec:	462b      	mov	r3, r5
   c35ee:	ee10 0a10 	vmov	r0, s0
   c35f2:	4629      	mov	r1, r5
   c35f4:	f000 fa56 	bl	c3aa4 <__adddf3>
   c35f8:	4b50      	ldr	r3, [pc, #320]	; (c373c <atan+0x32c>)
   c35fa:	2200      	movs	r2, #0
   c35fc:	f000 fa50 	bl	c3aa0 <__aeabi_dsub>
   c3600:	4602      	mov	r2, r0
   c3602:	460b      	mov	r3, r1
   c3604:	4620      	mov	r0, r4
   c3606:	4629      	mov	r1, r5
   c3608:	4614      	mov	r4, r2
   c360a:	461d      	mov	r5, r3
   c360c:	f04f 0b00 	mov.w	fp, #0
   c3610:	2200      	movs	r2, #0
   c3612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c3616:	e027      	b.n	c3668 <atan+0x258>
   c3618:	f000 fa44 	bl	c3aa4 <__adddf3>
   c361c:	4622      	mov	r2, r4
   c361e:	462b      	mov	r3, r5
   c3620:	f000 fbf6 	bl	c3e10 <__aeabi_dmul>
   c3624:	4602      	mov	r2, r0
   c3626:	460b      	mov	r3, r1
   c3628:	4620      	mov	r0, r4
   c362a:	4629      	mov	r1, r5
   c362c:	f000 fa38 	bl	c3aa0 <__aeabi_dsub>
   c3630:	ec41 0b10 	vmov	d0, r0, r1
   c3634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c3638:	4b42      	ldr	r3, [pc, #264]	; (c3744 <atan+0x334>)
   c363a:	429e      	cmp	r6, r3
   c363c:	da1f      	bge.n	c367e <atan+0x26e>
   c363e:	4b42      	ldr	r3, [pc, #264]	; (c3748 <atan+0x338>)
   c3640:	2200      	movs	r2, #0
   c3642:	4629      	mov	r1, r5
   c3644:	ee10 0a10 	vmov	r0, s0
   c3648:	f000 fa2a 	bl	c3aa0 <__aeabi_dsub>
   c364c:	4602      	mov	r2, r0
   c364e:	460b      	mov	r3, r1
   c3650:	4620      	mov	r0, r4
   c3652:	4629      	mov	r1, r5
   c3654:	4614      	mov	r4, r2
   c3656:	461d      	mov	r5, r3
   c3658:	2200      	movs	r2, #0
   c365a:	4b3b      	ldr	r3, [pc, #236]	; (c3748 <atan+0x338>)
   c365c:	f04f 0b02 	mov.w	fp, #2
   c3660:	f000 fbd6 	bl	c3e10 <__aeabi_dmul>
   c3664:	4b35      	ldr	r3, [pc, #212]	; (c373c <atan+0x32c>)
   c3666:	2200      	movs	r2, #0
   c3668:	f000 fa1c 	bl	c3aa4 <__adddf3>
   c366c:	4602      	mov	r2, r0
   c366e:	460b      	mov	r3, r1
   c3670:	4620      	mov	r0, r4
   c3672:	4629      	mov	r1, r5
   c3674:	f000 fcf6 	bl	c4064 <__aeabi_ddiv>
   c3678:	4604      	mov	r4, r0
   c367a:	460d      	mov	r5, r1
   c367c:	e6f5      	b.n	c346a <atan+0x5a>
   c367e:	462b      	mov	r3, r5
   c3680:	4932      	ldr	r1, [pc, #200]	; (c374c <atan+0x33c>)
   c3682:	ee10 2a10 	vmov	r2, s0
   c3686:	2000      	movs	r0, #0
   c3688:	f000 fcec 	bl	c4064 <__aeabi_ddiv>
   c368c:	f04f 0b03 	mov.w	fp, #3
   c3690:	4604      	mov	r4, r0
   c3692:	460d      	mov	r5, r1
   c3694:	e6e9      	b.n	c346a <atan+0x5a>
   c3696:	4b29      	ldr	r3, [pc, #164]	; (c373c <atan+0x32c>)
   c3698:	2200      	movs	r2, #0
   c369a:	4629      	mov	r1, r5
   c369c:	ee10 0a10 	vmov	r0, s0
   c36a0:	f000 f9fe 	bl	c3aa0 <__aeabi_dsub>
   c36a4:	4602      	mov	r2, r0
   c36a6:	460b      	mov	r3, r1
   c36a8:	4620      	mov	r0, r4
   c36aa:	4629      	mov	r1, r5
   c36ac:	f04f 0b01 	mov.w	fp, #1
   c36b0:	4614      	mov	r4, r2
   c36b2:	461d      	mov	r5, r3
   c36b4:	e7d6      	b.n	c3664 <atan+0x254>
   c36b6:	bf00      	nop
   c36b8:	54442d18 	.word	0x54442d18
   c36bc:	3ff921fb 	.word	0x3ff921fb
   c36c0:	e322da11 	.word	0xe322da11
   c36c4:	3f90ad3a 	.word	0x3f90ad3a
   c36c8:	24760deb 	.word	0x24760deb
   c36cc:	3fa97b4b 	.word	0x3fa97b4b
   c36d0:	a0d03d51 	.word	0xa0d03d51
   c36d4:	3fb10d66 	.word	0x3fb10d66
   c36d8:	c54c206e 	.word	0xc54c206e
   c36dc:	3fb745cd 	.word	0x3fb745cd
   c36e0:	920083ff 	.word	0x920083ff
   c36e4:	3fc24924 	.word	0x3fc24924
   c36e8:	5555550d 	.word	0x5555550d
   c36ec:	3fd55555 	.word	0x3fd55555
   c36f0:	2c6a6c2f 	.word	0x2c6a6c2f
   c36f4:	bfa2b444 	.word	0xbfa2b444
   c36f8:	52defd9a 	.word	0x52defd9a
   c36fc:	3fadde2d 	.word	0x3fadde2d
   c3700:	af749a6d 	.word	0xaf749a6d
   c3704:	3fb3b0f2 	.word	0x3fb3b0f2
   c3708:	fe231671 	.word	0xfe231671
   c370c:	3fbc71c6 	.word	0x3fbc71c6
   c3710:	9998ebc4 	.word	0x9998ebc4
   c3714:	3fc99999 	.word	0x3fc99999
   c3718:	8800759c 	.word	0x8800759c
   c371c:	7e37e43c 	.word	0x7e37e43c
   c3720:	54442d18 	.word	0x54442d18
   c3724:	bff921fb 	.word	0xbff921fb
   c3728:	440fffff 	.word	0x440fffff
   c372c:	7ff00000 	.word	0x7ff00000
   c3730:	3fdbffff 	.word	0x3fdbffff
   c3734:	000c8588 	.word	0x000c8588
   c3738:	000c85a8 	.word	0x000c85a8
   c373c:	3ff00000 	.word	0x3ff00000
   c3740:	3ff2ffff 	.word	0x3ff2ffff
   c3744:	40038000 	.word	0x40038000
   c3748:	3ff80000 	.word	0x3ff80000
   c374c:	bff00000 	.word	0xbff00000

000c3750 <fabs>:
   c3750:	ec51 0b10 	vmov	r0, r1, d0
   c3754:	ee10 2a10 	vmov	r2, s0
   c3758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c375c:	ec43 2b10 	vmov	d0, r2, r3
   c3760:	4770      	bx	lr
   c3762:	bf00      	nop

000c3764 <atanf>:
   c3764:	b538      	push	{r3, r4, r5, lr}
   c3766:	ee10 5a10 	vmov	r5, s0
   c376a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   c376e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   c3772:	eef0 7a40 	vmov.f32	s15, s0
   c3776:	db0b      	blt.n	c3790 <atanf+0x2c>
   c3778:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   c377c:	dc5b      	bgt.n	c3836 <atanf+0xd2>
   c377e:	eddf 7a53 	vldr	s15, [pc, #332]	; c38cc <atanf+0x168>
   c3782:	ed9f 0a53 	vldr	s0, [pc, #332]	; c38d0 <atanf+0x16c>
   c3786:	2d00      	cmp	r5, #0
   c3788:	bfc8      	it	gt
   c378a:	eeb0 0a67 	vmovgt.f32	s0, s15
   c378e:	bd38      	pop	{r3, r4, r5, pc}
   c3790:	4b50      	ldr	r3, [pc, #320]	; (c38d4 <atanf+0x170>)
   c3792:	429c      	cmp	r4, r3
   c3794:	dc5e      	bgt.n	c3854 <atanf+0xf0>
   c3796:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   c379a:	db4f      	blt.n	c383c <atanf+0xd8>
   c379c:	f04f 33ff 	mov.w	r3, #4294967295
   c37a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
   c37a4:	eddf 4a4c 	vldr	s9, [pc, #304]	; c38d8 <atanf+0x174>
   c37a8:	eddf 5a4c 	vldr	s11, [pc, #304]	; c38dc <atanf+0x178>
   c37ac:	ed9f 5a4c 	vldr	s10, [pc, #304]	; c38e0 <atanf+0x17c>
   c37b0:	ed9f 4a4c 	vldr	s8, [pc, #304]	; c38e4 <atanf+0x180>
   c37b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
   c37b8:	eeb0 6a66 	vmov.f32	s12, s13
   c37bc:	eee7 5a24 	vfma.f32	s11, s14, s9
   c37c0:	1c5a      	adds	r2, r3, #1
   c37c2:	eddf 4a49 	vldr	s9, [pc, #292]	; c38e8 <atanf+0x184>
   c37c6:	eddf 6a49 	vldr	s13, [pc, #292]	; c38ec <atanf+0x188>
   c37ca:	eea5 5a87 	vfma.f32	s10, s11, s14
   c37ce:	eee7 6a24 	vfma.f32	s13, s14, s9
   c37d2:	eddf 5a47 	vldr	s11, [pc, #284]	; c38f0 <atanf+0x18c>
   c37d6:	eddf 4a47 	vldr	s9, [pc, #284]	; c38f4 <atanf+0x190>
   c37da:	eee6 5a87 	vfma.f32	s11, s13, s14
   c37de:	eea5 4a07 	vfma.f32	s8, s10, s14
   c37e2:	ed9f 5a45 	vldr	s10, [pc, #276]	; c38f8 <atanf+0x194>
   c37e6:	eddf 6a45 	vldr	s13, [pc, #276]	; c38fc <atanf+0x198>
   c37ea:	eea5 5a87 	vfma.f32	s10, s11, s14
   c37ee:	eee4 4a07 	vfma.f32	s9, s8, s14
   c37f2:	eddf 5a43 	vldr	s11, [pc, #268]	; c3900 <atanf+0x19c>
   c37f6:	eee4 6a87 	vfma.f32	s13, s9, s14
   c37fa:	eee5 5a07 	vfma.f32	s11, s10, s14
   c37fe:	ee66 6a86 	vmul.f32	s13, s13, s12
   c3802:	ee25 7a87 	vmul.f32	s14, s11, s14
   c3806:	d03a      	beq.n	c387e <atanf+0x11a>
   c3808:	4a3e      	ldr	r2, [pc, #248]	; (c3904 <atanf+0x1a0>)
   c380a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   c380e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3812:	ed92 0a00 	vldr	s0, [r2]
   c3816:	4a3c      	ldr	r2, [pc, #240]	; (c3908 <atanf+0x1a4>)
   c3818:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   c381c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c3820:	2d00      	cmp	r5, #0
   c3822:	ed93 7a00 	vldr	s14, [r3]
   c3826:	ee70 7a67 	vsub.f32	s15, s0, s15
   c382a:	ee37 0a67 	vsub.f32	s0, s14, s15
   c382e:	daae      	bge.n	c378e <atanf+0x2a>
   c3830:	eeb1 0a40 	vneg.f32	s0, s0
   c3834:	bd38      	pop	{r3, r4, r5, pc}
   c3836:	ee30 0a00 	vadd.f32	s0, s0, s0
   c383a:	bd38      	pop	{r3, r4, r5, pc}
   c383c:	ed9f 7a33 	vldr	s14, [pc, #204]	; c390c <atanf+0x1a8>
   c3840:	ee30 7a07 	vadd.f32	s14, s0, s14
   c3844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   c3848:	eeb4 7ae6 	vcmpe.f32	s14, s13
   c384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3850:	dda4      	ble.n	c379c <atanf+0x38>
   c3852:	bd38      	pop	{r3, r4, r5, pc}
   c3854:	f000 f860 	bl	c3918 <fabsf>
   c3858:	4b2d      	ldr	r3, [pc, #180]	; (c3910 <atanf+0x1ac>)
   c385a:	429c      	cmp	r4, r3
   c385c:	dc16      	bgt.n	c388c <atanf+0x128>
   c385e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   c3862:	429c      	cmp	r4, r3
   c3864:	dc27      	bgt.n	c38b6 <atanf+0x152>
   c3866:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   c386a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c386e:	eea0 7a27 	vfma.f32	s14, s0, s15
   c3872:	2300      	movs	r3, #0
   c3874:	ee30 0a27 	vadd.f32	s0, s0, s15
   c3878:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c387c:	e790      	b.n	c37a0 <atanf+0x3c>
   c387e:	ee76 6a87 	vadd.f32	s13, s13, s14
   c3882:	eee6 7ae7 	vfms.f32	s15, s13, s15
   c3886:	eeb0 0a67 	vmov.f32	s0, s15
   c388a:	bd38      	pop	{r3, r4, r5, pc}
   c388c:	4b21      	ldr	r3, [pc, #132]	; (c3914 <atanf+0x1b0>)
   c388e:	429c      	cmp	r4, r3
   c3890:	dc0b      	bgt.n	c38aa <atanf+0x146>
   c3892:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   c3896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   c389a:	eea0 7a27 	vfma.f32	s14, s0, s15
   c389e:	2302      	movs	r3, #2
   c38a0:	ee30 0a67 	vsub.f32	s0, s0, s15
   c38a4:	eec0 7a07 	vdiv.f32	s15, s0, s14
   c38a8:	e77a      	b.n	c37a0 <atanf+0x3c>
   c38aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   c38ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c38b2:	2303      	movs	r3, #3
   c38b4:	e774      	b.n	c37a0 <atanf+0x3c>
   c38b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   c38ba:	ee30 7a67 	vsub.f32	s14, s0, s15
   c38be:	ee30 0a27 	vadd.f32	s0, s0, s15
   c38c2:	2301      	movs	r3, #1
   c38c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
   c38c8:	e76a      	b.n	c37a0 <atanf+0x3c>
   c38ca:	bf00      	nop
   c38cc:	3fc90fdb 	.word	0x3fc90fdb
   c38d0:	bfc90fdb 	.word	0xbfc90fdb
   c38d4:	3edfffff 	.word	0x3edfffff
   c38d8:	3c8569d7 	.word	0x3c8569d7
   c38dc:	3d4bda59 	.word	0x3d4bda59
   c38e0:	3d886b35 	.word	0x3d886b35
   c38e4:	3dba2e6e 	.word	0x3dba2e6e
   c38e8:	bd15a221 	.word	0xbd15a221
   c38ec:	bd6ef16b 	.word	0xbd6ef16b
   c38f0:	bd9d8795 	.word	0xbd9d8795
   c38f4:	3e124925 	.word	0x3e124925
   c38f8:	bde38e38 	.word	0xbde38e38
   c38fc:	3eaaaaab 	.word	0x3eaaaaab
   c3900:	be4ccccd 	.word	0xbe4ccccd
   c3904:	000c85d8 	.word	0x000c85d8
   c3908:	000c85c8 	.word	0x000c85c8
   c390c:	7149f2ca 	.word	0x7149f2ca
   c3910:	3f97ffff 	.word	0x3f97ffff
   c3914:	401bffff 	.word	0x401bffff

000c3918 <fabsf>:
   c3918:	ee10 3a10 	vmov	r3, s0
   c391c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   c3920:	ee00 3a10 	vmov	s0, r3
   c3924:	4770      	bx	lr
   c3926:	bf00      	nop

000c3928 <floorf>:
   c3928:	ee10 2a10 	vmov	r2, s0
   c392c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   c3930:	3b7f      	subs	r3, #127	; 0x7f
   c3932:	2b16      	cmp	r3, #22
   c3934:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   c3938:	dc28      	bgt.n	c398c <floorf+0x64>
   c393a:	2b00      	cmp	r3, #0
   c393c:	db18      	blt.n	c3970 <floorf+0x48>
   c393e:	491a      	ldr	r1, [pc, #104]	; (c39a8 <floorf+0x80>)
   c3940:	4119      	asrs	r1, r3
   c3942:	420a      	tst	r2, r1
   c3944:	d021      	beq.n	c398a <floorf+0x62>
   c3946:	eddf 7a19 	vldr	s15, [pc, #100]	; c39ac <floorf+0x84>
   c394a:	ee70 7a27 	vadd.f32	s15, s0, s15
   c394e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c3952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3956:	dd18      	ble.n	c398a <floorf+0x62>
   c3958:	2a00      	cmp	r2, #0
   c395a:	da04      	bge.n	c3966 <floorf+0x3e>
   c395c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   c3960:	fa40 f303 	asr.w	r3, r0, r3
   c3964:	441a      	add	r2, r3
   c3966:	ea22 0301 	bic.w	r3, r2, r1
   c396a:	ee00 3a10 	vmov	s0, r3
   c396e:	4770      	bx	lr
   c3970:	eddf 7a0e 	vldr	s15, [pc, #56]	; c39ac <floorf+0x84>
   c3974:	ee70 7a27 	vadd.f32	s15, s0, s15
   c3978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   c397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c3980:	dd03      	ble.n	c398a <floorf+0x62>
   c3982:	2a00      	cmp	r2, #0
   c3984:	db08      	blt.n	c3998 <floorf+0x70>
   c3986:	ed9f 0a0a 	vldr	s0, [pc, #40]	; c39b0 <floorf+0x88>
   c398a:	4770      	bx	lr
   c398c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   c3990:	d3fb      	bcc.n	c398a <floorf+0x62>
   c3992:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3996:	4770      	bx	lr
   c3998:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   c399c:	2900      	cmp	r1, #0
   c399e:	bf18      	it	ne
   c39a0:	eeb0 0a67 	vmovne.f32	s0, s15
   c39a4:	4770      	bx	lr
   c39a6:	bf00      	nop
   c39a8:	007fffff 	.word	0x007fffff
   c39ac:	7149f2ca 	.word	0x7149f2ca
   c39b0:	00000000 	.word	0x00000000

000c39b4 <scalbnf>:
   c39b4:	b082      	sub	sp, #8
   c39b6:	ed8d 0a01 	vstr	s0, [sp, #4]
   c39ba:	9b01      	ldr	r3, [sp, #4]
   c39bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   c39c0:	d02a      	beq.n	c3a18 <scalbnf+0x64>
   c39c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   c39c6:	d223      	bcs.n	c3a10 <scalbnf+0x5c>
   c39c8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   c39cc:	d128      	bne.n	c3a20 <scalbnf+0x6c>
   c39ce:	ed9d 7a01 	vldr	s14, [sp, #4]
   c39d2:	eddf 7a2a 	vldr	s15, [pc, #168]	; c3a7c <scalbnf+0xc8>
   c39d6:	4b2a      	ldr	r3, [pc, #168]	; (c3a80 <scalbnf+0xcc>)
   c39d8:	ee67 7a27 	vmul.f32	s15, s14, s15
   c39dc:	4298      	cmp	r0, r3
   c39de:	edcd 7a01 	vstr	s15, [sp, #4]
   c39e2:	db37      	blt.n	c3a54 <scalbnf+0xa0>
   c39e4:	9b01      	ldr	r3, [sp, #4]
   c39e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   c39ea:	3a19      	subs	r2, #25
   c39ec:	4402      	add	r2, r0
   c39ee:	2afe      	cmp	r2, #254	; 0xfe
   c39f0:	dd1a      	ble.n	c3a28 <scalbnf+0x74>
   c39f2:	ed9f 0a24 	vldr	s0, [pc, #144]	; c3a84 <scalbnf+0xd0>
   c39f6:	ed9f 7a24 	vldr	s14, [pc, #144]	; c3a88 <scalbnf+0xd4>
   c39fa:	9b01      	ldr	r3, [sp, #4]
   c39fc:	2b00      	cmp	r3, #0
   c39fe:	eef0 7a40 	vmov.f32	s15, s0
   c3a02:	bfb8      	it	lt
   c3a04:	eeb0 0a47 	vmovlt.f32	s0, s14
   c3a08:	ee20 0a27 	vmul.f32	s0, s0, s15
   c3a0c:	b002      	add	sp, #8
   c3a0e:	4770      	bx	lr
   c3a10:	ee30 0a00 	vadd.f32	s0, s0, s0
   c3a14:	b002      	add	sp, #8
   c3a16:	4770      	bx	lr
   c3a18:	ed9d 0a01 	vldr	s0, [sp, #4]
   c3a1c:	b002      	add	sp, #8
   c3a1e:	4770      	bx	lr
   c3a20:	0dd2      	lsrs	r2, r2, #23
   c3a22:	4402      	add	r2, r0
   c3a24:	2afe      	cmp	r2, #254	; 0xfe
   c3a26:	dce4      	bgt.n	c39f2 <scalbnf+0x3e>
   c3a28:	2a00      	cmp	r2, #0
   c3a2a:	dc0b      	bgt.n	c3a44 <scalbnf+0x90>
   c3a2c:	f112 0f16 	cmn.w	r2, #22
   c3a30:	da17      	bge.n	c3a62 <scalbnf+0xae>
   c3a32:	f24c 3350 	movw	r3, #50000	; 0xc350
   c3a36:	4298      	cmp	r0, r3
   c3a38:	dcdb      	bgt.n	c39f2 <scalbnf+0x3e>
   c3a3a:	ed9f 0a14 	vldr	s0, [pc, #80]	; c3a8c <scalbnf+0xd8>
   c3a3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; c3a90 <scalbnf+0xdc>
   c3a42:	e7da      	b.n	c39fa <scalbnf+0x46>
   c3a44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3a48:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3a4c:	ee00 3a10 	vmov	s0, r3
   c3a50:	b002      	add	sp, #8
   c3a52:	4770      	bx	lr
   c3a54:	ed9f 0a0d 	vldr	s0, [pc, #52]	; c3a8c <scalbnf+0xd8>
   c3a58:	eddd 7a01 	vldr	s15, [sp, #4]
   c3a5c:	ee27 0a80 	vmul.f32	s0, s15, s0
   c3a60:	e7d8      	b.n	c3a14 <scalbnf+0x60>
   c3a62:	3219      	adds	r2, #25
   c3a64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   c3a68:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   c3a6c:	eddf 7a09 	vldr	s15, [pc, #36]	; c3a94 <scalbnf+0xe0>
   c3a70:	ee07 3a10 	vmov	s14, r3
   c3a74:	ee27 0a27 	vmul.f32	s0, s14, s15
   c3a78:	e7cc      	b.n	c3a14 <scalbnf+0x60>
   c3a7a:	bf00      	nop
   c3a7c:	4c000000 	.word	0x4c000000
   c3a80:	ffff3cb0 	.word	0xffff3cb0
   c3a84:	7149f2ca 	.word	0x7149f2ca
   c3a88:	f149f2ca 	.word	0xf149f2ca
   c3a8c:	0da24260 	.word	0x0da24260
   c3a90:	8da24260 	.word	0x8da24260
   c3a94:	33000000 	.word	0x33000000

000c3a98 <__aeabi_drsub>:
   c3a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c3a9c:	e002      	b.n	c3aa4 <__adddf3>
   c3a9e:	bf00      	nop

000c3aa0 <__aeabi_dsub>:
   c3aa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c3aa4 <__adddf3>:
   c3aa4:	b530      	push	{r4, r5, lr}
   c3aa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c3aaa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c3aae:	ea94 0f05 	teq	r4, r5
   c3ab2:	bf08      	it	eq
   c3ab4:	ea90 0f02 	teqeq	r0, r2
   c3ab8:	bf1f      	itttt	ne
   c3aba:	ea54 0c00 	orrsne.w	ip, r4, r0
   c3abe:	ea55 0c02 	orrsne.w	ip, r5, r2
   c3ac2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c3ac6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3aca:	f000 80e2 	beq.w	c3c92 <__adddf3+0x1ee>
   c3ace:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c3ad2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c3ad6:	bfb8      	it	lt
   c3ad8:	426d      	neglt	r5, r5
   c3ada:	dd0c      	ble.n	c3af6 <__adddf3+0x52>
   c3adc:	442c      	add	r4, r5
   c3ade:	ea80 0202 	eor.w	r2, r0, r2
   c3ae2:	ea81 0303 	eor.w	r3, r1, r3
   c3ae6:	ea82 0000 	eor.w	r0, r2, r0
   c3aea:	ea83 0101 	eor.w	r1, r3, r1
   c3aee:	ea80 0202 	eor.w	r2, r0, r2
   c3af2:	ea81 0303 	eor.w	r3, r1, r3
   c3af6:	2d36      	cmp	r5, #54	; 0x36
   c3af8:	bf88      	it	hi
   c3afa:	bd30      	pophi	{r4, r5, pc}
   c3afc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c3b00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c3b04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c3b08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c3b0c:	d002      	beq.n	c3b14 <__adddf3+0x70>
   c3b0e:	4240      	negs	r0, r0
   c3b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3b14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c3b18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c3b1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c3b20:	d002      	beq.n	c3b28 <__adddf3+0x84>
   c3b22:	4252      	negs	r2, r2
   c3b24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c3b28:	ea94 0f05 	teq	r4, r5
   c3b2c:	f000 80a7 	beq.w	c3c7e <__adddf3+0x1da>
   c3b30:	f1a4 0401 	sub.w	r4, r4, #1
   c3b34:	f1d5 0e20 	rsbs	lr, r5, #32
   c3b38:	db0d      	blt.n	c3b56 <__adddf3+0xb2>
   c3b3a:	fa02 fc0e 	lsl.w	ip, r2, lr
   c3b3e:	fa22 f205 	lsr.w	r2, r2, r5
   c3b42:	1880      	adds	r0, r0, r2
   c3b44:	f141 0100 	adc.w	r1, r1, #0
   c3b48:	fa03 f20e 	lsl.w	r2, r3, lr
   c3b4c:	1880      	adds	r0, r0, r2
   c3b4e:	fa43 f305 	asr.w	r3, r3, r5
   c3b52:	4159      	adcs	r1, r3
   c3b54:	e00e      	b.n	c3b74 <__adddf3+0xd0>
   c3b56:	f1a5 0520 	sub.w	r5, r5, #32
   c3b5a:	f10e 0e20 	add.w	lr, lr, #32
   c3b5e:	2a01      	cmp	r2, #1
   c3b60:	fa03 fc0e 	lsl.w	ip, r3, lr
   c3b64:	bf28      	it	cs
   c3b66:	f04c 0c02 	orrcs.w	ip, ip, #2
   c3b6a:	fa43 f305 	asr.w	r3, r3, r5
   c3b6e:	18c0      	adds	r0, r0, r3
   c3b70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c3b74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3b78:	d507      	bpl.n	c3b8a <__adddf3+0xe6>
   c3b7a:	f04f 0e00 	mov.w	lr, #0
   c3b7e:	f1dc 0c00 	rsbs	ip, ip, #0
   c3b82:	eb7e 0000 	sbcs.w	r0, lr, r0
   c3b86:	eb6e 0101 	sbc.w	r1, lr, r1
   c3b8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c3b8e:	d31b      	bcc.n	c3bc8 <__adddf3+0x124>
   c3b90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c3b94:	d30c      	bcc.n	c3bb0 <__adddf3+0x10c>
   c3b96:	0849      	lsrs	r1, r1, #1
   c3b98:	ea5f 0030 	movs.w	r0, r0, rrx
   c3b9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c3ba0:	f104 0401 	add.w	r4, r4, #1
   c3ba4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c3ba8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c3bac:	f080 809a 	bcs.w	c3ce4 <__adddf3+0x240>
   c3bb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c3bb4:	bf08      	it	eq
   c3bb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c3bba:	f150 0000 	adcs.w	r0, r0, #0
   c3bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3bc2:	ea41 0105 	orr.w	r1, r1, r5
   c3bc6:	bd30      	pop	{r4, r5, pc}
   c3bc8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c3bcc:	4140      	adcs	r0, r0
   c3bce:	eb41 0101 	adc.w	r1, r1, r1
   c3bd2:	3c01      	subs	r4, #1
   c3bd4:	bf28      	it	cs
   c3bd6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c3bda:	d2e9      	bcs.n	c3bb0 <__adddf3+0x10c>
   c3bdc:	f091 0f00 	teq	r1, #0
   c3be0:	bf04      	itt	eq
   c3be2:	4601      	moveq	r1, r0
   c3be4:	2000      	moveq	r0, #0
   c3be6:	fab1 f381 	clz	r3, r1
   c3bea:	bf08      	it	eq
   c3bec:	3320      	addeq	r3, #32
   c3bee:	f1a3 030b 	sub.w	r3, r3, #11
   c3bf2:	f1b3 0220 	subs.w	r2, r3, #32
   c3bf6:	da0c      	bge.n	c3c12 <__adddf3+0x16e>
   c3bf8:	320c      	adds	r2, #12
   c3bfa:	dd08      	ble.n	c3c0e <__adddf3+0x16a>
   c3bfc:	f102 0c14 	add.w	ip, r2, #20
   c3c00:	f1c2 020c 	rsb	r2, r2, #12
   c3c04:	fa01 f00c 	lsl.w	r0, r1, ip
   c3c08:	fa21 f102 	lsr.w	r1, r1, r2
   c3c0c:	e00c      	b.n	c3c28 <__adddf3+0x184>
   c3c0e:	f102 0214 	add.w	r2, r2, #20
   c3c12:	bfd8      	it	le
   c3c14:	f1c2 0c20 	rsble	ip, r2, #32
   c3c18:	fa01 f102 	lsl.w	r1, r1, r2
   c3c1c:	fa20 fc0c 	lsr.w	ip, r0, ip
   c3c20:	bfdc      	itt	le
   c3c22:	ea41 010c 	orrle.w	r1, r1, ip
   c3c26:	4090      	lslle	r0, r2
   c3c28:	1ae4      	subs	r4, r4, r3
   c3c2a:	bfa2      	ittt	ge
   c3c2c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c3c30:	4329      	orrge	r1, r5
   c3c32:	bd30      	popge	{r4, r5, pc}
   c3c34:	ea6f 0404 	mvn.w	r4, r4
   c3c38:	3c1f      	subs	r4, #31
   c3c3a:	da1c      	bge.n	c3c76 <__adddf3+0x1d2>
   c3c3c:	340c      	adds	r4, #12
   c3c3e:	dc0e      	bgt.n	c3c5e <__adddf3+0x1ba>
   c3c40:	f104 0414 	add.w	r4, r4, #20
   c3c44:	f1c4 0220 	rsb	r2, r4, #32
   c3c48:	fa20 f004 	lsr.w	r0, r0, r4
   c3c4c:	fa01 f302 	lsl.w	r3, r1, r2
   c3c50:	ea40 0003 	orr.w	r0, r0, r3
   c3c54:	fa21 f304 	lsr.w	r3, r1, r4
   c3c58:	ea45 0103 	orr.w	r1, r5, r3
   c3c5c:	bd30      	pop	{r4, r5, pc}
   c3c5e:	f1c4 040c 	rsb	r4, r4, #12
   c3c62:	f1c4 0220 	rsb	r2, r4, #32
   c3c66:	fa20 f002 	lsr.w	r0, r0, r2
   c3c6a:	fa01 f304 	lsl.w	r3, r1, r4
   c3c6e:	ea40 0003 	orr.w	r0, r0, r3
   c3c72:	4629      	mov	r1, r5
   c3c74:	bd30      	pop	{r4, r5, pc}
   c3c76:	fa21 f004 	lsr.w	r0, r1, r4
   c3c7a:	4629      	mov	r1, r5
   c3c7c:	bd30      	pop	{r4, r5, pc}
   c3c7e:	f094 0f00 	teq	r4, #0
   c3c82:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c3c86:	bf06      	itte	eq
   c3c88:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c3c8c:	3401      	addeq	r4, #1
   c3c8e:	3d01      	subne	r5, #1
   c3c90:	e74e      	b.n	c3b30 <__adddf3+0x8c>
   c3c92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3c96:	bf18      	it	ne
   c3c98:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c3c9c:	d029      	beq.n	c3cf2 <__adddf3+0x24e>
   c3c9e:	ea94 0f05 	teq	r4, r5
   c3ca2:	bf08      	it	eq
   c3ca4:	ea90 0f02 	teqeq	r0, r2
   c3ca8:	d005      	beq.n	c3cb6 <__adddf3+0x212>
   c3caa:	ea54 0c00 	orrs.w	ip, r4, r0
   c3cae:	bf04      	itt	eq
   c3cb0:	4619      	moveq	r1, r3
   c3cb2:	4610      	moveq	r0, r2
   c3cb4:	bd30      	pop	{r4, r5, pc}
   c3cb6:	ea91 0f03 	teq	r1, r3
   c3cba:	bf1e      	ittt	ne
   c3cbc:	2100      	movne	r1, #0
   c3cbe:	2000      	movne	r0, #0
   c3cc0:	bd30      	popne	{r4, r5, pc}
   c3cc2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c3cc6:	d105      	bne.n	c3cd4 <__adddf3+0x230>
   c3cc8:	0040      	lsls	r0, r0, #1
   c3cca:	4149      	adcs	r1, r1
   c3ccc:	bf28      	it	cs
   c3cce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c3cd2:	bd30      	pop	{r4, r5, pc}
   c3cd4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c3cd8:	bf3c      	itt	cc
   c3cda:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c3cde:	bd30      	popcc	{r4, r5, pc}
   c3ce0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3ce4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c3ce8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c3cec:	f04f 0000 	mov.w	r0, #0
   c3cf0:	bd30      	pop	{r4, r5, pc}
   c3cf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c3cf6:	bf1a      	itte	ne
   c3cf8:	4619      	movne	r1, r3
   c3cfa:	4610      	movne	r0, r2
   c3cfc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c3d00:	bf1c      	itt	ne
   c3d02:	460b      	movne	r3, r1
   c3d04:	4602      	movne	r2, r0
   c3d06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c3d0a:	bf06      	itte	eq
   c3d0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c3d10:	ea91 0f03 	teqeq	r1, r3
   c3d14:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c3d18:	bd30      	pop	{r4, r5, pc}
   c3d1a:	bf00      	nop

000c3d1c <__aeabi_ui2d>:
   c3d1c:	f090 0f00 	teq	r0, #0
   c3d20:	bf04      	itt	eq
   c3d22:	2100      	moveq	r1, #0
   c3d24:	4770      	bxeq	lr
   c3d26:	b530      	push	{r4, r5, lr}
   c3d28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3d2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3d30:	f04f 0500 	mov.w	r5, #0
   c3d34:	f04f 0100 	mov.w	r1, #0
   c3d38:	e750      	b.n	c3bdc <__adddf3+0x138>
   c3d3a:	bf00      	nop

000c3d3c <__aeabi_i2d>:
   c3d3c:	f090 0f00 	teq	r0, #0
   c3d40:	bf04      	itt	eq
   c3d42:	2100      	moveq	r1, #0
   c3d44:	4770      	bxeq	lr
   c3d46:	b530      	push	{r4, r5, lr}
   c3d48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3d4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3d50:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c3d54:	bf48      	it	mi
   c3d56:	4240      	negmi	r0, r0
   c3d58:	f04f 0100 	mov.w	r1, #0
   c3d5c:	e73e      	b.n	c3bdc <__adddf3+0x138>
   c3d5e:	bf00      	nop

000c3d60 <__aeabi_f2d>:
   c3d60:	0042      	lsls	r2, r0, #1
   c3d62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c3d66:	ea4f 0131 	mov.w	r1, r1, rrx
   c3d6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c3d6e:	bf1f      	itttt	ne
   c3d70:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c3d74:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c3d78:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c3d7c:	4770      	bxne	lr
   c3d7e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c3d82:	bf08      	it	eq
   c3d84:	4770      	bxeq	lr
   c3d86:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c3d8a:	bf04      	itt	eq
   c3d8c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c3d90:	4770      	bxeq	lr
   c3d92:	b530      	push	{r4, r5, lr}
   c3d94:	f44f 7460 	mov.w	r4, #896	; 0x380
   c3d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c3d9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3da0:	e71c      	b.n	c3bdc <__adddf3+0x138>
   c3da2:	bf00      	nop

000c3da4 <__aeabi_ul2d>:
   c3da4:	ea50 0201 	orrs.w	r2, r0, r1
   c3da8:	bf08      	it	eq
   c3daa:	4770      	bxeq	lr
   c3dac:	b530      	push	{r4, r5, lr}
   c3dae:	f04f 0500 	mov.w	r5, #0
   c3db2:	e00a      	b.n	c3dca <__aeabi_l2d+0x16>

000c3db4 <__aeabi_l2d>:
   c3db4:	ea50 0201 	orrs.w	r2, r0, r1
   c3db8:	bf08      	it	eq
   c3dba:	4770      	bxeq	lr
   c3dbc:	b530      	push	{r4, r5, lr}
   c3dbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c3dc2:	d502      	bpl.n	c3dca <__aeabi_l2d+0x16>
   c3dc4:	4240      	negs	r0, r0
   c3dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3dca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c3dce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c3dd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c3dd6:	f43f aed8 	beq.w	c3b8a <__adddf3+0xe6>
   c3dda:	f04f 0203 	mov.w	r2, #3
   c3dde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3de2:	bf18      	it	ne
   c3de4:	3203      	addne	r2, #3
   c3de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c3dea:	bf18      	it	ne
   c3dec:	3203      	addne	r2, #3
   c3dee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c3df2:	f1c2 0320 	rsb	r3, r2, #32
   c3df6:	fa00 fc03 	lsl.w	ip, r0, r3
   c3dfa:	fa20 f002 	lsr.w	r0, r0, r2
   c3dfe:	fa01 fe03 	lsl.w	lr, r1, r3
   c3e02:	ea40 000e 	orr.w	r0, r0, lr
   c3e06:	fa21 f102 	lsr.w	r1, r1, r2
   c3e0a:	4414      	add	r4, r2
   c3e0c:	e6bd      	b.n	c3b8a <__adddf3+0xe6>
   c3e0e:	bf00      	nop

000c3e10 <__aeabi_dmul>:
   c3e10:	b570      	push	{r4, r5, r6, lr}
   c3e12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c3e16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c3e1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c3e1e:	bf1d      	ittte	ne
   c3e20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c3e24:	ea94 0f0c 	teqne	r4, ip
   c3e28:	ea95 0f0c 	teqne	r5, ip
   c3e2c:	f000 f8de 	bleq	c3fec <__aeabi_dmul+0x1dc>
   c3e30:	442c      	add	r4, r5
   c3e32:	ea81 0603 	eor.w	r6, r1, r3
   c3e36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c3e3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c3e3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c3e42:	bf18      	it	ne
   c3e44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c3e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3e50:	d038      	beq.n	c3ec4 <__aeabi_dmul+0xb4>
   c3e52:	fba0 ce02 	umull	ip, lr, r0, r2
   c3e56:	f04f 0500 	mov.w	r5, #0
   c3e5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   c3e5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c3e62:	fbe0 e503 	umlal	lr, r5, r0, r3
   c3e66:	f04f 0600 	mov.w	r6, #0
   c3e6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   c3e6e:	f09c 0f00 	teq	ip, #0
   c3e72:	bf18      	it	ne
   c3e74:	f04e 0e01 	orrne.w	lr, lr, #1
   c3e78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c3e7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c3e80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c3e84:	d204      	bcs.n	c3e90 <__aeabi_dmul+0x80>
   c3e86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c3e8a:	416d      	adcs	r5, r5
   c3e8c:	eb46 0606 	adc.w	r6, r6, r6
   c3e90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c3e94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c3e98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c3e9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c3ea0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c3ea4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c3ea8:	bf88      	it	hi
   c3eaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c3eae:	d81e      	bhi.n	c3eee <__aeabi_dmul+0xde>
   c3eb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c3eb4:	bf08      	it	eq
   c3eb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c3eba:	f150 0000 	adcs.w	r0, r0, #0
   c3ebe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c3ec2:	bd70      	pop	{r4, r5, r6, pc}
   c3ec4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c3ec8:	ea46 0101 	orr.w	r1, r6, r1
   c3ecc:	ea40 0002 	orr.w	r0, r0, r2
   c3ed0:	ea81 0103 	eor.w	r1, r1, r3
   c3ed4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c3ed8:	bfc2      	ittt	gt
   c3eda:	ebd4 050c 	rsbsgt	r5, r4, ip
   c3ede:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c3ee2:	bd70      	popgt	{r4, r5, r6, pc}
   c3ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c3ee8:	f04f 0e00 	mov.w	lr, #0
   c3eec:	3c01      	subs	r4, #1
   c3eee:	f300 80ab 	bgt.w	c4048 <__aeabi_dmul+0x238>
   c3ef2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c3ef6:	bfde      	ittt	le
   c3ef8:	2000      	movle	r0, #0
   c3efa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c3efe:	bd70      	pople	{r4, r5, r6, pc}
   c3f00:	f1c4 0400 	rsb	r4, r4, #0
   c3f04:	3c20      	subs	r4, #32
   c3f06:	da35      	bge.n	c3f74 <__aeabi_dmul+0x164>
   c3f08:	340c      	adds	r4, #12
   c3f0a:	dc1b      	bgt.n	c3f44 <__aeabi_dmul+0x134>
   c3f0c:	f104 0414 	add.w	r4, r4, #20
   c3f10:	f1c4 0520 	rsb	r5, r4, #32
   c3f14:	fa00 f305 	lsl.w	r3, r0, r5
   c3f18:	fa20 f004 	lsr.w	r0, r0, r4
   c3f1c:	fa01 f205 	lsl.w	r2, r1, r5
   c3f20:	ea40 0002 	orr.w	r0, r0, r2
   c3f24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c3f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c3f2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3f30:	fa21 f604 	lsr.w	r6, r1, r4
   c3f34:	eb42 0106 	adc.w	r1, r2, r6
   c3f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3f3c:	bf08      	it	eq
   c3f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3f42:	bd70      	pop	{r4, r5, r6, pc}
   c3f44:	f1c4 040c 	rsb	r4, r4, #12
   c3f48:	f1c4 0520 	rsb	r5, r4, #32
   c3f4c:	fa00 f304 	lsl.w	r3, r0, r4
   c3f50:	fa20 f005 	lsr.w	r0, r0, r5
   c3f54:	fa01 f204 	lsl.w	r2, r1, r4
   c3f58:	ea40 0002 	orr.w	r0, r0, r2
   c3f5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3f60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c3f64:	f141 0100 	adc.w	r1, r1, #0
   c3f68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3f6c:	bf08      	it	eq
   c3f6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3f72:	bd70      	pop	{r4, r5, r6, pc}
   c3f74:	f1c4 0520 	rsb	r5, r4, #32
   c3f78:	fa00 f205 	lsl.w	r2, r0, r5
   c3f7c:	ea4e 0e02 	orr.w	lr, lr, r2
   c3f80:	fa20 f304 	lsr.w	r3, r0, r4
   c3f84:	fa01 f205 	lsl.w	r2, r1, r5
   c3f88:	ea43 0302 	orr.w	r3, r3, r2
   c3f8c:	fa21 f004 	lsr.w	r0, r1, r4
   c3f90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c3f94:	fa21 f204 	lsr.w	r2, r1, r4
   c3f98:	ea20 0002 	bic.w	r0, r0, r2
   c3f9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c3fa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c3fa4:	bf08      	it	eq
   c3fa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c3faa:	bd70      	pop	{r4, r5, r6, pc}
   c3fac:	f094 0f00 	teq	r4, #0
   c3fb0:	d10f      	bne.n	c3fd2 <__aeabi_dmul+0x1c2>
   c3fb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c3fb6:	0040      	lsls	r0, r0, #1
   c3fb8:	eb41 0101 	adc.w	r1, r1, r1
   c3fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c3fc0:	bf08      	it	eq
   c3fc2:	3c01      	subeq	r4, #1
   c3fc4:	d0f7      	beq.n	c3fb6 <__aeabi_dmul+0x1a6>
   c3fc6:	ea41 0106 	orr.w	r1, r1, r6
   c3fca:	f095 0f00 	teq	r5, #0
   c3fce:	bf18      	it	ne
   c3fd0:	4770      	bxne	lr
   c3fd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c3fd6:	0052      	lsls	r2, r2, #1
   c3fd8:	eb43 0303 	adc.w	r3, r3, r3
   c3fdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c3fe0:	bf08      	it	eq
   c3fe2:	3d01      	subeq	r5, #1
   c3fe4:	d0f7      	beq.n	c3fd6 <__aeabi_dmul+0x1c6>
   c3fe6:	ea43 0306 	orr.w	r3, r3, r6
   c3fea:	4770      	bx	lr
   c3fec:	ea94 0f0c 	teq	r4, ip
   c3ff0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c3ff4:	bf18      	it	ne
   c3ff6:	ea95 0f0c 	teqne	r5, ip
   c3ffa:	d00c      	beq.n	c4016 <__aeabi_dmul+0x206>
   c3ffc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4000:	bf18      	it	ne
   c4002:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4006:	d1d1      	bne.n	c3fac <__aeabi_dmul+0x19c>
   c4008:	ea81 0103 	eor.w	r1, r1, r3
   c400c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c4010:	f04f 0000 	mov.w	r0, #0
   c4014:	bd70      	pop	{r4, r5, r6, pc}
   c4016:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c401a:	bf06      	itte	eq
   c401c:	4610      	moveq	r0, r2
   c401e:	4619      	moveq	r1, r3
   c4020:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c4024:	d019      	beq.n	c405a <__aeabi_dmul+0x24a>
   c4026:	ea94 0f0c 	teq	r4, ip
   c402a:	d102      	bne.n	c4032 <__aeabi_dmul+0x222>
   c402c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c4030:	d113      	bne.n	c405a <__aeabi_dmul+0x24a>
   c4032:	ea95 0f0c 	teq	r5, ip
   c4036:	d105      	bne.n	c4044 <__aeabi_dmul+0x234>
   c4038:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c403c:	bf1c      	itt	ne
   c403e:	4610      	movne	r0, r2
   c4040:	4619      	movne	r1, r3
   c4042:	d10a      	bne.n	c405a <__aeabi_dmul+0x24a>
   c4044:	ea81 0103 	eor.w	r1, r1, r3
   c4048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c404c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c4050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c4054:	f04f 0000 	mov.w	r0, #0
   c4058:	bd70      	pop	{r4, r5, r6, pc}
   c405a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c405e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c4062:	bd70      	pop	{r4, r5, r6, pc}

000c4064 <__aeabi_ddiv>:
   c4064:	b570      	push	{r4, r5, r6, lr}
   c4066:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c406a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c406e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c4072:	bf1d      	ittte	ne
   c4074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c4078:	ea94 0f0c 	teqne	r4, ip
   c407c:	ea95 0f0c 	teqne	r5, ip
   c4080:	f000 f8a7 	bleq	c41d2 <__aeabi_ddiv+0x16e>
   c4084:	eba4 0405 	sub.w	r4, r4, r5
   c4088:	ea81 0e03 	eor.w	lr, r1, r3
   c408c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c4090:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c4094:	f000 8088 	beq.w	c41a8 <__aeabi_ddiv+0x144>
   c4098:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c409c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c40a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c40a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c40a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c40ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c40b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c40b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c40b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c40bc:	429d      	cmp	r5, r3
   c40be:	bf08      	it	eq
   c40c0:	4296      	cmpeq	r6, r2
   c40c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c40c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c40ca:	d202      	bcs.n	c40d2 <__aeabi_ddiv+0x6e>
   c40cc:	085b      	lsrs	r3, r3, #1
   c40ce:	ea4f 0232 	mov.w	r2, r2, rrx
   c40d2:	1ab6      	subs	r6, r6, r2
   c40d4:	eb65 0503 	sbc.w	r5, r5, r3
   c40d8:	085b      	lsrs	r3, r3, #1
   c40da:	ea4f 0232 	mov.w	r2, r2, rrx
   c40de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c40e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c40e6:	ebb6 0e02 	subs.w	lr, r6, r2
   c40ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   c40ee:	bf22      	ittt	cs
   c40f0:	1ab6      	subcs	r6, r6, r2
   c40f2:	4675      	movcs	r5, lr
   c40f4:	ea40 000c 	orrcs.w	r0, r0, ip
   c40f8:	085b      	lsrs	r3, r3, #1
   c40fa:	ea4f 0232 	mov.w	r2, r2, rrx
   c40fe:	ebb6 0e02 	subs.w	lr, r6, r2
   c4102:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4106:	bf22      	ittt	cs
   c4108:	1ab6      	subcs	r6, r6, r2
   c410a:	4675      	movcs	r5, lr
   c410c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c4110:	085b      	lsrs	r3, r3, #1
   c4112:	ea4f 0232 	mov.w	r2, r2, rrx
   c4116:	ebb6 0e02 	subs.w	lr, r6, r2
   c411a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c411e:	bf22      	ittt	cs
   c4120:	1ab6      	subcs	r6, r6, r2
   c4122:	4675      	movcs	r5, lr
   c4124:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c4128:	085b      	lsrs	r3, r3, #1
   c412a:	ea4f 0232 	mov.w	r2, r2, rrx
   c412e:	ebb6 0e02 	subs.w	lr, r6, r2
   c4132:	eb75 0e03 	sbcs.w	lr, r5, r3
   c4136:	bf22      	ittt	cs
   c4138:	1ab6      	subcs	r6, r6, r2
   c413a:	4675      	movcs	r5, lr
   c413c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c4140:	ea55 0e06 	orrs.w	lr, r5, r6
   c4144:	d018      	beq.n	c4178 <__aeabi_ddiv+0x114>
   c4146:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c414a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c414e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c4152:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c4156:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c415a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c415e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c4162:	d1c0      	bne.n	c40e6 <__aeabi_ddiv+0x82>
   c4164:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c4168:	d10b      	bne.n	c4182 <__aeabi_ddiv+0x11e>
   c416a:	ea41 0100 	orr.w	r1, r1, r0
   c416e:	f04f 0000 	mov.w	r0, #0
   c4172:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c4176:	e7b6      	b.n	c40e6 <__aeabi_ddiv+0x82>
   c4178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c417c:	bf04      	itt	eq
   c417e:	4301      	orreq	r1, r0
   c4180:	2000      	moveq	r0, #0
   c4182:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c4186:	bf88      	it	hi
   c4188:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c418c:	f63f aeaf 	bhi.w	c3eee <__aeabi_dmul+0xde>
   c4190:	ebb5 0c03 	subs.w	ip, r5, r3
   c4194:	bf04      	itt	eq
   c4196:	ebb6 0c02 	subseq.w	ip, r6, r2
   c419a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c419e:	f150 0000 	adcs.w	r0, r0, #0
   c41a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c41a6:	bd70      	pop	{r4, r5, r6, pc}
   c41a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c41ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c41b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c41b4:	bfc2      	ittt	gt
   c41b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   c41ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c41be:	bd70      	popgt	{r4, r5, r6, pc}
   c41c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c41c4:	f04f 0e00 	mov.w	lr, #0
   c41c8:	3c01      	subs	r4, #1
   c41ca:	e690      	b.n	c3eee <__aeabi_dmul+0xde>
   c41cc:	ea45 0e06 	orr.w	lr, r5, r6
   c41d0:	e68d      	b.n	c3eee <__aeabi_dmul+0xde>
   c41d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c41d6:	ea94 0f0c 	teq	r4, ip
   c41da:	bf08      	it	eq
   c41dc:	ea95 0f0c 	teqeq	r5, ip
   c41e0:	f43f af3b 	beq.w	c405a <__aeabi_dmul+0x24a>
   c41e4:	ea94 0f0c 	teq	r4, ip
   c41e8:	d10a      	bne.n	c4200 <__aeabi_ddiv+0x19c>
   c41ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c41ee:	f47f af34 	bne.w	c405a <__aeabi_dmul+0x24a>
   c41f2:	ea95 0f0c 	teq	r5, ip
   c41f6:	f47f af25 	bne.w	c4044 <__aeabi_dmul+0x234>
   c41fa:	4610      	mov	r0, r2
   c41fc:	4619      	mov	r1, r3
   c41fe:	e72c      	b.n	c405a <__aeabi_dmul+0x24a>
   c4200:	ea95 0f0c 	teq	r5, ip
   c4204:	d106      	bne.n	c4214 <__aeabi_ddiv+0x1b0>
   c4206:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c420a:	f43f aefd 	beq.w	c4008 <__aeabi_dmul+0x1f8>
   c420e:	4610      	mov	r0, r2
   c4210:	4619      	mov	r1, r3
   c4212:	e722      	b.n	c405a <__aeabi_dmul+0x24a>
   c4214:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c4218:	bf18      	it	ne
   c421a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c421e:	f47f aec5 	bne.w	c3fac <__aeabi_dmul+0x19c>
   c4222:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c4226:	f47f af0d 	bne.w	c4044 <__aeabi_dmul+0x234>
   c422a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c422e:	f47f aeeb 	bne.w	c4008 <__aeabi_dmul+0x1f8>
   c4232:	e712      	b.n	c405a <__aeabi_dmul+0x24a>

000c4234 <__gedf2>:
   c4234:	f04f 3cff 	mov.w	ip, #4294967295
   c4238:	e006      	b.n	c4248 <__cmpdf2+0x4>
   c423a:	bf00      	nop

000c423c <__ledf2>:
   c423c:	f04f 0c01 	mov.w	ip, #1
   c4240:	e002      	b.n	c4248 <__cmpdf2+0x4>
   c4242:	bf00      	nop

000c4244 <__cmpdf2>:
   c4244:	f04f 0c01 	mov.w	ip, #1
   c4248:	f84d cd04 	str.w	ip, [sp, #-4]!
   c424c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c4254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4258:	bf18      	it	ne
   c425a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c425e:	d01b      	beq.n	c4298 <__cmpdf2+0x54>
   c4260:	b001      	add	sp, #4
   c4262:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c4266:	bf0c      	ite	eq
   c4268:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c426c:	ea91 0f03 	teqne	r1, r3
   c4270:	bf02      	ittt	eq
   c4272:	ea90 0f02 	teqeq	r0, r2
   c4276:	2000      	moveq	r0, #0
   c4278:	4770      	bxeq	lr
   c427a:	f110 0f00 	cmn.w	r0, #0
   c427e:	ea91 0f03 	teq	r1, r3
   c4282:	bf58      	it	pl
   c4284:	4299      	cmppl	r1, r3
   c4286:	bf08      	it	eq
   c4288:	4290      	cmpeq	r0, r2
   c428a:	bf2c      	ite	cs
   c428c:	17d8      	asrcs	r0, r3, #31
   c428e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c4292:	f040 0001 	orr.w	r0, r0, #1
   c4296:	4770      	bx	lr
   c4298:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c429c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c42a0:	d102      	bne.n	c42a8 <__cmpdf2+0x64>
   c42a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c42a6:	d107      	bne.n	c42b8 <__cmpdf2+0x74>
   c42a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c42ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c42b0:	d1d6      	bne.n	c4260 <__cmpdf2+0x1c>
   c42b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c42b6:	d0d3      	beq.n	c4260 <__cmpdf2+0x1c>
   c42b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   c42bc:	4770      	bx	lr
   c42be:	bf00      	nop

000c42c0 <__aeabi_cdrcmple>:
   c42c0:	4684      	mov	ip, r0
   c42c2:	4610      	mov	r0, r2
   c42c4:	4662      	mov	r2, ip
   c42c6:	468c      	mov	ip, r1
   c42c8:	4619      	mov	r1, r3
   c42ca:	4663      	mov	r3, ip
   c42cc:	e000      	b.n	c42d0 <__aeabi_cdcmpeq>
   c42ce:	bf00      	nop

000c42d0 <__aeabi_cdcmpeq>:
   c42d0:	b501      	push	{r0, lr}
   c42d2:	f7ff ffb7 	bl	c4244 <__cmpdf2>
   c42d6:	2800      	cmp	r0, #0
   c42d8:	bf48      	it	mi
   c42da:	f110 0f00 	cmnmi.w	r0, #0
   c42de:	bd01      	pop	{r0, pc}

000c42e0 <__aeabi_dcmpeq>:
   c42e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   c42e4:	f7ff fff4 	bl	c42d0 <__aeabi_cdcmpeq>
   c42e8:	bf0c      	ite	eq
   c42ea:	2001      	moveq	r0, #1
   c42ec:	2000      	movne	r0, #0
   c42ee:	f85d fb08 	ldr.w	pc, [sp], #8
   c42f2:	bf00      	nop

000c42f4 <__aeabi_dcmplt>:
   c42f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c42f8:	f7ff ffea 	bl	c42d0 <__aeabi_cdcmpeq>
   c42fc:	bf34      	ite	cc
   c42fe:	2001      	movcc	r0, #1
   c4300:	2000      	movcs	r0, #0
   c4302:	f85d fb08 	ldr.w	pc, [sp], #8
   c4306:	bf00      	nop

000c4308 <__aeabi_dcmple>:
   c4308:	f84d ed08 	str.w	lr, [sp, #-8]!
   c430c:	f7ff ffe0 	bl	c42d0 <__aeabi_cdcmpeq>
   c4310:	bf94      	ite	ls
   c4312:	2001      	movls	r0, #1
   c4314:	2000      	movhi	r0, #0
   c4316:	f85d fb08 	ldr.w	pc, [sp], #8
   c431a:	bf00      	nop

000c431c <__aeabi_dcmpge>:
   c431c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4320:	f7ff ffce 	bl	c42c0 <__aeabi_cdrcmple>
   c4324:	bf94      	ite	ls
   c4326:	2001      	movls	r0, #1
   c4328:	2000      	movhi	r0, #0
   c432a:	f85d fb08 	ldr.w	pc, [sp], #8
   c432e:	bf00      	nop

000c4330 <__aeabi_dcmpgt>:
   c4330:	f84d ed08 	str.w	lr, [sp, #-8]!
   c4334:	f7ff ffc4 	bl	c42c0 <__aeabi_cdrcmple>
   c4338:	bf34      	ite	cc
   c433a:	2001      	movcc	r0, #1
   c433c:	2000      	movcs	r0, #0
   c433e:	f85d fb08 	ldr.w	pc, [sp], #8
   c4342:	bf00      	nop

000c4344 <__aeabi_dcmpun>:
   c4344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c4348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c434c:	d102      	bne.n	c4354 <__aeabi_dcmpun+0x10>
   c434e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c4352:	d10a      	bne.n	c436a <__aeabi_dcmpun+0x26>
   c4354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c4358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c435c:	d102      	bne.n	c4364 <__aeabi_dcmpun+0x20>
   c435e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c4362:	d102      	bne.n	c436a <__aeabi_dcmpun+0x26>
   c4364:	f04f 0000 	mov.w	r0, #0
   c4368:	4770      	bx	lr
   c436a:	f04f 0001 	mov.w	r0, #1
   c436e:	4770      	bx	lr

000c4370 <__aeabi_d2iz>:
   c4370:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4374:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c4378:	d215      	bcs.n	c43a6 <__aeabi_d2iz+0x36>
   c437a:	d511      	bpl.n	c43a0 <__aeabi_d2iz+0x30>
   c437c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c4380:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c4384:	d912      	bls.n	c43ac <__aeabi_d2iz+0x3c>
   c4386:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c438a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c438e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c4392:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c4396:	fa23 f002 	lsr.w	r0, r3, r2
   c439a:	bf18      	it	ne
   c439c:	4240      	negne	r0, r0
   c439e:	4770      	bx	lr
   c43a0:	f04f 0000 	mov.w	r0, #0
   c43a4:	4770      	bx	lr
   c43a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c43aa:	d105      	bne.n	c43b8 <__aeabi_d2iz+0x48>
   c43ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c43b0:	bf08      	it	eq
   c43b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c43b6:	4770      	bx	lr
   c43b8:	f04f 0000 	mov.w	r0, #0
   c43bc:	4770      	bx	lr
   c43be:	bf00      	nop

000c43c0 <__aeabi_d2uiz>:
   c43c0:	004a      	lsls	r2, r1, #1
   c43c2:	d211      	bcs.n	c43e8 <__aeabi_d2uiz+0x28>
   c43c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c43c8:	d211      	bcs.n	c43ee <__aeabi_d2uiz+0x2e>
   c43ca:	d50d      	bpl.n	c43e8 <__aeabi_d2uiz+0x28>
   c43cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c43d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c43d4:	d40e      	bmi.n	c43f4 <__aeabi_d2uiz+0x34>
   c43d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c43da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c43de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c43e2:	fa23 f002 	lsr.w	r0, r3, r2
   c43e6:	4770      	bx	lr
   c43e8:	f04f 0000 	mov.w	r0, #0
   c43ec:	4770      	bx	lr
   c43ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c43f2:	d102      	bne.n	c43fa <__aeabi_d2uiz+0x3a>
   c43f4:	f04f 30ff 	mov.w	r0, #4294967295
   c43f8:	4770      	bx	lr
   c43fa:	f04f 0000 	mov.w	r0, #0
   c43fe:	4770      	bx	lr

000c4400 <__aeabi_d2f>:
   c4400:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c4404:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c4408:	bf24      	itt	cs
   c440a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c440e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c4412:	d90d      	bls.n	c4430 <__aeabi_d2f+0x30>
   c4414:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c4418:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c441c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c4420:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c4424:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c4428:	bf08      	it	eq
   c442a:	f020 0001 	biceq.w	r0, r0, #1
   c442e:	4770      	bx	lr
   c4430:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c4434:	d121      	bne.n	c447a <__aeabi_d2f+0x7a>
   c4436:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c443a:	bfbc      	itt	lt
   c443c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c4440:	4770      	bxlt	lr
   c4442:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c4446:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c444a:	f1c2 0218 	rsb	r2, r2, #24
   c444e:	f1c2 0c20 	rsb	ip, r2, #32
   c4452:	fa10 f30c 	lsls.w	r3, r0, ip
   c4456:	fa20 f002 	lsr.w	r0, r0, r2
   c445a:	bf18      	it	ne
   c445c:	f040 0001 	orrne.w	r0, r0, #1
   c4460:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c4464:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c4468:	fa03 fc0c 	lsl.w	ip, r3, ip
   c446c:	ea40 000c 	orr.w	r0, r0, ip
   c4470:	fa23 f302 	lsr.w	r3, r3, r2
   c4474:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c4478:	e7cc      	b.n	c4414 <__aeabi_d2f+0x14>
   c447a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c447e:	d107      	bne.n	c4490 <__aeabi_d2f+0x90>
   c4480:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c4484:	bf1e      	ittt	ne
   c4486:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c448a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c448e:	4770      	bxne	lr
   c4490:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c4494:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c4498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c449c:	4770      	bx	lr
   c449e:	bf00      	nop

000c44a0 <__aeabi_d2ulz>:
   c44a0:	b5d0      	push	{r4, r6, r7, lr}
   c44a2:	4b0c      	ldr	r3, [pc, #48]	; (c44d4 <__aeabi_d2ulz+0x34>)
   c44a4:	2200      	movs	r2, #0
   c44a6:	4606      	mov	r6, r0
   c44a8:	460f      	mov	r7, r1
   c44aa:	f7ff fcb1 	bl	c3e10 <__aeabi_dmul>
   c44ae:	f7ff ff87 	bl	c43c0 <__aeabi_d2uiz>
   c44b2:	4604      	mov	r4, r0
   c44b4:	f7ff fc32 	bl	c3d1c <__aeabi_ui2d>
   c44b8:	4b07      	ldr	r3, [pc, #28]	; (c44d8 <__aeabi_d2ulz+0x38>)
   c44ba:	2200      	movs	r2, #0
   c44bc:	f7ff fca8 	bl	c3e10 <__aeabi_dmul>
   c44c0:	4602      	mov	r2, r0
   c44c2:	460b      	mov	r3, r1
   c44c4:	4630      	mov	r0, r6
   c44c6:	4639      	mov	r1, r7
   c44c8:	f7ff faea 	bl	c3aa0 <__aeabi_dsub>
   c44cc:	f7ff ff78 	bl	c43c0 <__aeabi_d2uiz>
   c44d0:	4621      	mov	r1, r4
   c44d2:	bdd0      	pop	{r4, r6, r7, pc}
   c44d4:	3df00000 	.word	0x3df00000
   c44d8:	41f00000 	.word	0x41f00000

000c44dc <atexit>:
   c44dc:	2300      	movs	r3, #0
   c44de:	4601      	mov	r1, r0
   c44e0:	461a      	mov	r2, r3
   c44e2:	4618      	mov	r0, r3
   c44e4:	f001 b806 	b.w	c54f4 <__register_exitproc>

000c44e8 <atof>:
   c44e8:	2100      	movs	r1, #0
   c44ea:	f000 bf6b 	b.w	c53c4 <strtod>

000c44ee <atoi>:
   c44ee:	220a      	movs	r2, #10
   c44f0:	2100      	movs	r1, #0
   c44f2:	f000 bff5 	b.w	c54e0 <strtol>
	...

000c44f8 <isprint>:
   c44f8:	4b02      	ldr	r3, [pc, #8]	; (c4504 <isprint+0xc>)
   c44fa:	4418      	add	r0, r3
   c44fc:	7840      	ldrb	r0, [r0, #1]
   c44fe:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c4502:	4770      	bx	lr
   c4504:	000c86d8 	.word	0x000c86d8

000c4508 <memcmp>:
   c4508:	b510      	push	{r4, lr}
   c450a:	3901      	subs	r1, #1
   c450c:	4402      	add	r2, r0
   c450e:	4290      	cmp	r0, r2
   c4510:	d101      	bne.n	c4516 <memcmp+0xe>
   c4512:	2000      	movs	r0, #0
   c4514:	e005      	b.n	c4522 <memcmp+0x1a>
   c4516:	7803      	ldrb	r3, [r0, #0]
   c4518:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c451c:	42a3      	cmp	r3, r4
   c451e:	d001      	beq.n	c4524 <memcmp+0x1c>
   c4520:	1b18      	subs	r0, r3, r4
   c4522:	bd10      	pop	{r4, pc}
   c4524:	3001      	adds	r0, #1
   c4526:	e7f2      	b.n	c450e <memcmp+0x6>

000c4528 <memcpy>:
   c4528:	440a      	add	r2, r1
   c452a:	4291      	cmp	r1, r2
   c452c:	f100 33ff 	add.w	r3, r0, #4294967295
   c4530:	d100      	bne.n	c4534 <memcpy+0xc>
   c4532:	4770      	bx	lr
   c4534:	b510      	push	{r4, lr}
   c4536:	f811 4b01 	ldrb.w	r4, [r1], #1
   c453a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c453e:	4291      	cmp	r1, r2
   c4540:	d1f9      	bne.n	c4536 <memcpy+0xe>
   c4542:	bd10      	pop	{r4, pc}

000c4544 <memmove>:
   c4544:	4288      	cmp	r0, r1
   c4546:	b510      	push	{r4, lr}
   c4548:	eb01 0402 	add.w	r4, r1, r2
   c454c:	d902      	bls.n	c4554 <memmove+0x10>
   c454e:	4284      	cmp	r4, r0
   c4550:	4623      	mov	r3, r4
   c4552:	d807      	bhi.n	c4564 <memmove+0x20>
   c4554:	1e43      	subs	r3, r0, #1
   c4556:	42a1      	cmp	r1, r4
   c4558:	d008      	beq.n	c456c <memmove+0x28>
   c455a:	f811 2b01 	ldrb.w	r2, [r1], #1
   c455e:	f803 2f01 	strb.w	r2, [r3, #1]!
   c4562:	e7f8      	b.n	c4556 <memmove+0x12>
   c4564:	4402      	add	r2, r0
   c4566:	4601      	mov	r1, r0
   c4568:	428a      	cmp	r2, r1
   c456a:	d100      	bne.n	c456e <memmove+0x2a>
   c456c:	bd10      	pop	{r4, pc}
   c456e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c4572:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c4576:	e7f7      	b.n	c4568 <memmove+0x24>

000c4578 <memset>:
   c4578:	4402      	add	r2, r0
   c457a:	4603      	mov	r3, r0
   c457c:	4293      	cmp	r3, r2
   c457e:	d100      	bne.n	c4582 <memset+0xa>
   c4580:	4770      	bx	lr
   c4582:	f803 1b01 	strb.w	r1, [r3], #1
   c4586:	e7f9      	b.n	c457c <memset+0x4>

000c4588 <srand>:
   c4588:	b538      	push	{r3, r4, r5, lr}
   c458a:	4b10      	ldr	r3, [pc, #64]	; (c45cc <srand+0x44>)
   c458c:	681d      	ldr	r5, [r3, #0]
   c458e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c4590:	4604      	mov	r4, r0
   c4592:	b9b3      	cbnz	r3, c45c2 <srand+0x3a>
   c4594:	2018      	movs	r0, #24
   c4596:	f7f9 fe75 	bl	be284 <malloc>
   c459a:	4602      	mov	r2, r0
   c459c:	63a8      	str	r0, [r5, #56]	; 0x38
   c459e:	b920      	cbnz	r0, c45aa <srand+0x22>
   c45a0:	4b0b      	ldr	r3, [pc, #44]	; (c45d0 <srand+0x48>)
   c45a2:	480c      	ldr	r0, [pc, #48]	; (c45d4 <srand+0x4c>)
   c45a4:	2142      	movs	r1, #66	; 0x42
   c45a6:	f7f9 febd 	bl	be324 <__assert_func>
   c45aa:	490b      	ldr	r1, [pc, #44]	; (c45d8 <srand+0x50>)
   c45ac:	4b0b      	ldr	r3, [pc, #44]	; (c45dc <srand+0x54>)
   c45ae:	e9c0 1300 	strd	r1, r3, [r0]
   c45b2:	4b0b      	ldr	r3, [pc, #44]	; (c45e0 <srand+0x58>)
   c45b4:	6083      	str	r3, [r0, #8]
   c45b6:	230b      	movs	r3, #11
   c45b8:	8183      	strh	r3, [r0, #12]
   c45ba:	2100      	movs	r1, #0
   c45bc:	2001      	movs	r0, #1
   c45be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c45c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c45c4:	2200      	movs	r2, #0
   c45c6:	611c      	str	r4, [r3, #16]
   c45c8:	615a      	str	r2, [r3, #20]
   c45ca:	bd38      	pop	{r3, r4, r5, pc}
   c45cc:	2003db50 	.word	0x2003db50
   c45d0:	000c85e8 	.word	0x000c85e8
   c45d4:	000c85ff 	.word	0x000c85ff
   c45d8:	abcd330e 	.word	0xabcd330e
   c45dc:	e66d1234 	.word	0xe66d1234
   c45e0:	0005deec 	.word	0x0005deec

000c45e4 <strcat>:
   c45e4:	b510      	push	{r4, lr}
   c45e6:	4602      	mov	r2, r0
   c45e8:	7814      	ldrb	r4, [r2, #0]
   c45ea:	4613      	mov	r3, r2
   c45ec:	3201      	adds	r2, #1
   c45ee:	2c00      	cmp	r4, #0
   c45f0:	d1fa      	bne.n	c45e8 <strcat+0x4>
   c45f2:	3b01      	subs	r3, #1
   c45f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   c45f8:	f803 2f01 	strb.w	r2, [r3, #1]!
   c45fc:	2a00      	cmp	r2, #0
   c45fe:	d1f9      	bne.n	c45f4 <strcat+0x10>
   c4600:	bd10      	pop	{r4, pc}

000c4602 <strchr>:
   c4602:	b2c9      	uxtb	r1, r1
   c4604:	4603      	mov	r3, r0
   c4606:	f810 2b01 	ldrb.w	r2, [r0], #1
   c460a:	b11a      	cbz	r2, c4614 <strchr+0x12>
   c460c:	428a      	cmp	r2, r1
   c460e:	d1f9      	bne.n	c4604 <strchr+0x2>
   c4610:	4618      	mov	r0, r3
   c4612:	4770      	bx	lr
   c4614:	2900      	cmp	r1, #0
   c4616:	bf18      	it	ne
   c4618:	2300      	movne	r3, #0
   c461a:	e7f9      	b.n	c4610 <strchr+0xe>

000c461c <strchrnul>:
   c461c:	b510      	push	{r4, lr}
   c461e:	4604      	mov	r4, r0
   c4620:	f7ff ffef 	bl	c4602 <strchr>
   c4624:	b918      	cbnz	r0, c462e <strchrnul+0x12>
   c4626:	4620      	mov	r0, r4
   c4628:	f000 f831 	bl	c468e <strlen>
   c462c:	4420      	add	r0, r4
   c462e:	bd10      	pop	{r4, pc}

000c4630 <strcmp>:
   c4630:	f810 2b01 	ldrb.w	r2, [r0], #1
   c4634:	f811 3b01 	ldrb.w	r3, [r1], #1
   c4638:	2a01      	cmp	r2, #1
   c463a:	bf28      	it	cs
   c463c:	429a      	cmpcs	r2, r3
   c463e:	d0f7      	beq.n	c4630 <strcmp>
   c4640:	1ad0      	subs	r0, r2, r3
   c4642:	4770      	bx	lr

000c4644 <strcpy>:
   c4644:	4603      	mov	r3, r0
   c4646:	f811 2b01 	ldrb.w	r2, [r1], #1
   c464a:	f803 2b01 	strb.w	r2, [r3], #1
   c464e:	2a00      	cmp	r2, #0
   c4650:	d1f9      	bne.n	c4646 <strcpy+0x2>
   c4652:	4770      	bx	lr

000c4654 <strdup>:
   c4654:	4b02      	ldr	r3, [pc, #8]	; (c4660 <strdup+0xc>)
   c4656:	4601      	mov	r1, r0
   c4658:	6818      	ldr	r0, [r3, #0]
   c465a:	f000 b803 	b.w	c4664 <_strdup_r>
   c465e:	bf00      	nop
   c4660:	2003db50 	.word	0x2003db50

000c4664 <_strdup_r>:
   c4664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4666:	4604      	mov	r4, r0
   c4668:	4608      	mov	r0, r1
   c466a:	460d      	mov	r5, r1
   c466c:	f000 f80f 	bl	c468e <strlen>
   c4670:	1c42      	adds	r2, r0, #1
   c4672:	4611      	mov	r1, r2
   c4674:	4620      	mov	r0, r4
   c4676:	9201      	str	r2, [sp, #4]
   c4678:	f7f9 fe44 	bl	be304 <_malloc_r>
   c467c:	4604      	mov	r4, r0
   c467e:	b118      	cbz	r0, c4688 <_strdup_r+0x24>
   c4680:	9a01      	ldr	r2, [sp, #4]
   c4682:	4629      	mov	r1, r5
   c4684:	f7ff ff50 	bl	c4528 <memcpy>
   c4688:	4620      	mov	r0, r4
   c468a:	b003      	add	sp, #12
   c468c:	bd30      	pop	{r4, r5, pc}

000c468e <strlen>:
   c468e:	4603      	mov	r3, r0
   c4690:	f813 2b01 	ldrb.w	r2, [r3], #1
   c4694:	2a00      	cmp	r2, #0
   c4696:	d1fb      	bne.n	c4690 <strlen+0x2>
   c4698:	1a18      	subs	r0, r3, r0
   c469a:	3801      	subs	r0, #1
   c469c:	4770      	bx	lr
	...

000c46a0 <strlwr>:
   c46a0:	b510      	push	{r4, lr}
   c46a2:	4c07      	ldr	r4, [pc, #28]	; (c46c0 <strlwr+0x20>)
   c46a4:	1e42      	subs	r2, r0, #1
   c46a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   c46aa:	b903      	cbnz	r3, c46ae <strlwr+0xe>
   c46ac:	bd10      	pop	{r4, pc}
   c46ae:	5ce1      	ldrb	r1, [r4, r3]
   c46b0:	f001 0103 	and.w	r1, r1, #3
   c46b4:	2901      	cmp	r1, #1
   c46b6:	bf08      	it	eq
   c46b8:	3320      	addeq	r3, #32
   c46ba:	7013      	strb	r3, [r2, #0]
   c46bc:	e7f3      	b.n	c46a6 <strlwr+0x6>
   c46be:	bf00      	nop
   c46c0:	000c86d9 	.word	0x000c86d9

000c46c4 <strncmp>:
   c46c4:	b510      	push	{r4, lr}
   c46c6:	b17a      	cbz	r2, c46e8 <strncmp+0x24>
   c46c8:	4603      	mov	r3, r0
   c46ca:	3901      	subs	r1, #1
   c46cc:	1884      	adds	r4, r0, r2
   c46ce:	f813 0b01 	ldrb.w	r0, [r3], #1
   c46d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c46d6:	4290      	cmp	r0, r2
   c46d8:	d101      	bne.n	c46de <strncmp+0x1a>
   c46da:	42a3      	cmp	r3, r4
   c46dc:	d101      	bne.n	c46e2 <strncmp+0x1e>
   c46de:	1a80      	subs	r0, r0, r2
   c46e0:	bd10      	pop	{r4, pc}
   c46e2:	2800      	cmp	r0, #0
   c46e4:	d1f3      	bne.n	c46ce <strncmp+0xa>
   c46e6:	e7fa      	b.n	c46de <strncmp+0x1a>
   c46e8:	4610      	mov	r0, r2
   c46ea:	e7f9      	b.n	c46e0 <strncmp+0x1c>

000c46ec <strncpy>:
   c46ec:	b510      	push	{r4, lr}
   c46ee:	3901      	subs	r1, #1
   c46f0:	4603      	mov	r3, r0
   c46f2:	b132      	cbz	r2, c4702 <strncpy+0x16>
   c46f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c46f8:	f803 4b01 	strb.w	r4, [r3], #1
   c46fc:	3a01      	subs	r2, #1
   c46fe:	2c00      	cmp	r4, #0
   c4700:	d1f7      	bne.n	c46f2 <strncpy+0x6>
   c4702:	441a      	add	r2, r3
   c4704:	2100      	movs	r1, #0
   c4706:	4293      	cmp	r3, r2
   c4708:	d100      	bne.n	c470c <strncpy+0x20>
   c470a:	bd10      	pop	{r4, pc}
   c470c:	f803 1b01 	strb.w	r1, [r3], #1
   c4710:	e7f9      	b.n	c4706 <strncpy+0x1a>

000c4712 <strnlen>:
   c4712:	b510      	push	{r4, lr}
   c4714:	4602      	mov	r2, r0
   c4716:	4401      	add	r1, r0
   c4718:	428a      	cmp	r2, r1
   c471a:	4613      	mov	r3, r2
   c471c:	d003      	beq.n	c4726 <strnlen+0x14>
   c471e:	781c      	ldrb	r4, [r3, #0]
   c4720:	3201      	adds	r2, #1
   c4722:	2c00      	cmp	r4, #0
   c4724:	d1f8      	bne.n	c4718 <strnlen+0x6>
   c4726:	1a18      	subs	r0, r3, r0
   c4728:	bd10      	pop	{r4, pc}

000c472a <strrchr>:
   c472a:	b538      	push	{r3, r4, r5, lr}
   c472c:	4603      	mov	r3, r0
   c472e:	460c      	mov	r4, r1
   c4730:	b969      	cbnz	r1, c474e <strrchr+0x24>
   c4732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c4736:	f7ff bf64 	b.w	c4602 <strchr>
   c473a:	1c43      	adds	r3, r0, #1
   c473c:	4605      	mov	r5, r0
   c473e:	4621      	mov	r1, r4
   c4740:	4618      	mov	r0, r3
   c4742:	f7ff ff5e 	bl	c4602 <strchr>
   c4746:	2800      	cmp	r0, #0
   c4748:	d1f7      	bne.n	c473a <strrchr+0x10>
   c474a:	4628      	mov	r0, r5
   c474c:	bd38      	pop	{r3, r4, r5, pc}
   c474e:	2500      	movs	r5, #0
   c4750:	e7f5      	b.n	c473e <strrchr+0x14>

000c4752 <strstr>:
   c4752:	780a      	ldrb	r2, [r1, #0]
   c4754:	b570      	push	{r4, r5, r6, lr}
   c4756:	b96a      	cbnz	r2, c4774 <strstr+0x22>
   c4758:	bd70      	pop	{r4, r5, r6, pc}
   c475a:	429a      	cmp	r2, r3
   c475c:	d109      	bne.n	c4772 <strstr+0x20>
   c475e:	460c      	mov	r4, r1
   c4760:	4605      	mov	r5, r0
   c4762:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   c4766:	2b00      	cmp	r3, #0
   c4768:	d0f6      	beq.n	c4758 <strstr+0x6>
   c476a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   c476e:	429e      	cmp	r6, r3
   c4770:	d0f7      	beq.n	c4762 <strstr+0x10>
   c4772:	3001      	adds	r0, #1
   c4774:	7803      	ldrb	r3, [r0, #0]
   c4776:	2b00      	cmp	r3, #0
   c4778:	d1ef      	bne.n	c475a <strstr+0x8>
   c477a:	4618      	mov	r0, r3
   c477c:	e7ec      	b.n	c4758 <strstr+0x6>

000c477e <sulp>:
   c477e:	b570      	push	{r4, r5, r6, lr}
   c4780:	4604      	mov	r4, r0
   c4782:	460d      	mov	r5, r1
   c4784:	ec45 4b10 	vmov	d0, r4, r5
   c4788:	4616      	mov	r6, r2
   c478a:	f001 fe0d 	bl	c63a8 <__ulp>
   c478e:	ec51 0b10 	vmov	r0, r1, d0
   c4792:	b17e      	cbz	r6, c47b4 <sulp+0x36>
   c4794:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c4798:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c479c:	2b00      	cmp	r3, #0
   c479e:	dd09      	ble.n	c47b4 <sulp+0x36>
   c47a0:	051b      	lsls	r3, r3, #20
   c47a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c47a6:	2400      	movs	r4, #0
   c47a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c47ac:	4622      	mov	r2, r4
   c47ae:	462b      	mov	r3, r5
   c47b0:	f7ff fb2e 	bl	c3e10 <__aeabi_dmul>
   c47b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000c47b8 <_strtod_l>:
   c47b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c47bc:	ed2d 8b02 	vpush	{d8}
   c47c0:	b09d      	sub	sp, #116	; 0x74
   c47c2:	461f      	mov	r7, r3
   c47c4:	2300      	movs	r3, #0
   c47c6:	9318      	str	r3, [sp, #96]	; 0x60
   c47c8:	4ba2      	ldr	r3, [pc, #648]	; (c4a54 <_strtod_l+0x29c>)
   c47ca:	9213      	str	r2, [sp, #76]	; 0x4c
   c47cc:	681b      	ldr	r3, [r3, #0]
   c47ce:	9305      	str	r3, [sp, #20]
   c47d0:	4604      	mov	r4, r0
   c47d2:	4618      	mov	r0, r3
   c47d4:	4688      	mov	r8, r1
   c47d6:	f7ff ff5a 	bl	c468e <strlen>
   c47da:	f04f 0a00 	mov.w	sl, #0
   c47de:	4605      	mov	r5, r0
   c47e0:	f04f 0b00 	mov.w	fp, #0
   c47e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c47e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c47ea:	781a      	ldrb	r2, [r3, #0]
   c47ec:	2a2b      	cmp	r2, #43	; 0x2b
   c47ee:	d04e      	beq.n	c488e <_strtod_l+0xd6>
   c47f0:	d83b      	bhi.n	c486a <_strtod_l+0xb2>
   c47f2:	2a0d      	cmp	r2, #13
   c47f4:	d834      	bhi.n	c4860 <_strtod_l+0xa8>
   c47f6:	2a08      	cmp	r2, #8
   c47f8:	d834      	bhi.n	c4864 <_strtod_l+0xac>
   c47fa:	2a00      	cmp	r2, #0
   c47fc:	d03e      	beq.n	c487c <_strtod_l+0xc4>
   c47fe:	2300      	movs	r3, #0
   c4800:	930a      	str	r3, [sp, #40]	; 0x28
   c4802:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c4804:	7833      	ldrb	r3, [r6, #0]
   c4806:	2b30      	cmp	r3, #48	; 0x30
   c4808:	f040 80b0 	bne.w	c496c <_strtod_l+0x1b4>
   c480c:	7873      	ldrb	r3, [r6, #1]
   c480e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c4812:	2b58      	cmp	r3, #88	; 0x58
   c4814:	d168      	bne.n	c48e8 <_strtod_l+0x130>
   c4816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c4818:	9301      	str	r3, [sp, #4]
   c481a:	ab18      	add	r3, sp, #96	; 0x60
   c481c:	9702      	str	r7, [sp, #8]
   c481e:	9300      	str	r3, [sp, #0]
   c4820:	4a8d      	ldr	r2, [pc, #564]	; (c4a58 <_strtod_l+0x2a0>)
   c4822:	ab19      	add	r3, sp, #100	; 0x64
   c4824:	a917      	add	r1, sp, #92	; 0x5c
   c4826:	4620      	mov	r0, r4
   c4828:	f000 ff2e 	bl	c5688 <__gethex>
   c482c:	f010 0707 	ands.w	r7, r0, #7
   c4830:	4605      	mov	r5, r0
   c4832:	d005      	beq.n	c4840 <_strtod_l+0x88>
   c4834:	2f06      	cmp	r7, #6
   c4836:	d12c      	bne.n	c4892 <_strtod_l+0xda>
   c4838:	3601      	adds	r6, #1
   c483a:	2300      	movs	r3, #0
   c483c:	9617      	str	r6, [sp, #92]	; 0x5c
   c483e:	930a      	str	r3, [sp, #40]	; 0x28
   c4840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c4842:	2b00      	cmp	r3, #0
   c4844:	f040 8590 	bne.w	c5368 <_strtod_l+0xbb0>
   c4848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c484a:	b1eb      	cbz	r3, c4888 <_strtod_l+0xd0>
   c484c:	4652      	mov	r2, sl
   c484e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c4852:	ec43 2b10 	vmov	d0, r2, r3
   c4856:	b01d      	add	sp, #116	; 0x74
   c4858:	ecbd 8b02 	vpop	{d8}
   c485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4860:	2a20      	cmp	r2, #32
   c4862:	d1cc      	bne.n	c47fe <_strtod_l+0x46>
   c4864:	3301      	adds	r3, #1
   c4866:	9317      	str	r3, [sp, #92]	; 0x5c
   c4868:	e7be      	b.n	c47e8 <_strtod_l+0x30>
   c486a:	2a2d      	cmp	r2, #45	; 0x2d
   c486c:	d1c7      	bne.n	c47fe <_strtod_l+0x46>
   c486e:	2201      	movs	r2, #1
   c4870:	920a      	str	r2, [sp, #40]	; 0x28
   c4872:	1c5a      	adds	r2, r3, #1
   c4874:	9217      	str	r2, [sp, #92]	; 0x5c
   c4876:	785b      	ldrb	r3, [r3, #1]
   c4878:	2b00      	cmp	r3, #0
   c487a:	d1c2      	bne.n	c4802 <_strtod_l+0x4a>
   c487c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c487e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4882:	2b00      	cmp	r3, #0
   c4884:	f040 856e 	bne.w	c5364 <_strtod_l+0xbac>
   c4888:	4652      	mov	r2, sl
   c488a:	465b      	mov	r3, fp
   c488c:	e7e1      	b.n	c4852 <_strtod_l+0x9a>
   c488e:	2200      	movs	r2, #0
   c4890:	e7ee      	b.n	c4870 <_strtod_l+0xb8>
   c4892:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4894:	b13a      	cbz	r2, c48a6 <_strtod_l+0xee>
   c4896:	2135      	movs	r1, #53	; 0x35
   c4898:	a81a      	add	r0, sp, #104	; 0x68
   c489a:	f001 fe90 	bl	c65be <__copybits>
   c489e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c48a0:	4620      	mov	r0, r4
   c48a2:	f001 fa4f 	bl	c5d44 <_Bfree>
   c48a6:	3f01      	subs	r7, #1
   c48a8:	2f04      	cmp	r7, #4
   c48aa:	d806      	bhi.n	c48ba <_strtod_l+0x102>
   c48ac:	e8df f007 	tbb	[pc, r7]
   c48b0:	1714030a 	.word	0x1714030a
   c48b4:	0a          	.byte	0x0a
   c48b5:	00          	.byte	0x00
   c48b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c48ba:	0728      	lsls	r0, r5, #28
   c48bc:	d5c0      	bpl.n	c4840 <_strtod_l+0x88>
   c48be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c48c2:	e7bd      	b.n	c4840 <_strtod_l+0x88>
   c48c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c48c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c48ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c48ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c48d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c48d6:	e7f0      	b.n	c48ba <_strtod_l+0x102>
   c48d8:	f8df b180 	ldr.w	fp, [pc, #384]	; c4a5c <_strtod_l+0x2a4>
   c48dc:	e7ed      	b.n	c48ba <_strtod_l+0x102>
   c48de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c48e2:	f04f 3aff 	mov.w	sl, #4294967295
   c48e6:	e7e8      	b.n	c48ba <_strtod_l+0x102>
   c48e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c48ea:	1c5a      	adds	r2, r3, #1
   c48ec:	9217      	str	r2, [sp, #92]	; 0x5c
   c48ee:	785b      	ldrb	r3, [r3, #1]
   c48f0:	2b30      	cmp	r3, #48	; 0x30
   c48f2:	d0f9      	beq.n	c48e8 <_strtod_l+0x130>
   c48f4:	2b00      	cmp	r3, #0
   c48f6:	d0a3      	beq.n	c4840 <_strtod_l+0x88>
   c48f8:	2301      	movs	r3, #1
   c48fa:	f04f 0900 	mov.w	r9, #0
   c48fe:	9304      	str	r3, [sp, #16]
   c4900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4902:	9308      	str	r3, [sp, #32]
   c4904:	f8cd 901c 	str.w	r9, [sp, #28]
   c4908:	464f      	mov	r7, r9
   c490a:	220a      	movs	r2, #10
   c490c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c490e:	7806      	ldrb	r6, [r0, #0]
   c4910:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c4914:	b2d9      	uxtb	r1, r3
   c4916:	2909      	cmp	r1, #9
   c4918:	d92a      	bls.n	c4970 <_strtod_l+0x1b8>
   c491a:	9905      	ldr	r1, [sp, #20]
   c491c:	462a      	mov	r2, r5
   c491e:	f7ff fed1 	bl	c46c4 <strncmp>
   c4922:	b398      	cbz	r0, c498c <_strtod_l+0x1d4>
   c4924:	2000      	movs	r0, #0
   c4926:	4632      	mov	r2, r6
   c4928:	463d      	mov	r5, r7
   c492a:	9005      	str	r0, [sp, #20]
   c492c:	4603      	mov	r3, r0
   c492e:	2a65      	cmp	r2, #101	; 0x65
   c4930:	d001      	beq.n	c4936 <_strtod_l+0x17e>
   c4932:	2a45      	cmp	r2, #69	; 0x45
   c4934:	d118      	bne.n	c4968 <_strtod_l+0x1b0>
   c4936:	b91d      	cbnz	r5, c4940 <_strtod_l+0x188>
   c4938:	9a04      	ldr	r2, [sp, #16]
   c493a:	4302      	orrs	r2, r0
   c493c:	d09e      	beq.n	c487c <_strtod_l+0xc4>
   c493e:	2500      	movs	r5, #0
   c4940:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c4944:	f108 0201 	add.w	r2, r8, #1
   c4948:	9217      	str	r2, [sp, #92]	; 0x5c
   c494a:	f898 2001 	ldrb.w	r2, [r8, #1]
   c494e:	2a2b      	cmp	r2, #43	; 0x2b
   c4950:	d075      	beq.n	c4a3e <_strtod_l+0x286>
   c4952:	2a2d      	cmp	r2, #45	; 0x2d
   c4954:	d07b      	beq.n	c4a4e <_strtod_l+0x296>
   c4956:	f04f 0c00 	mov.w	ip, #0
   c495a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c495e:	2909      	cmp	r1, #9
   c4960:	f240 8082 	bls.w	c4a68 <_strtod_l+0x2b0>
   c4964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c4968:	2600      	movs	r6, #0
   c496a:	e09d      	b.n	c4aa8 <_strtod_l+0x2f0>
   c496c:	2300      	movs	r3, #0
   c496e:	e7c4      	b.n	c48fa <_strtod_l+0x142>
   c4970:	2f08      	cmp	r7, #8
   c4972:	bfd8      	it	le
   c4974:	9907      	ldrle	r1, [sp, #28]
   c4976:	f100 0001 	add.w	r0, r0, #1
   c497a:	bfda      	itte	le
   c497c:	fb02 3301 	mlale	r3, r2, r1, r3
   c4980:	9307      	strle	r3, [sp, #28]
   c4982:	fb02 3909 	mlagt	r9, r2, r9, r3
   c4986:	3701      	adds	r7, #1
   c4988:	9017      	str	r0, [sp, #92]	; 0x5c
   c498a:	e7bf      	b.n	c490c <_strtod_l+0x154>
   c498c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c498e:	195a      	adds	r2, r3, r5
   c4990:	9217      	str	r2, [sp, #92]	; 0x5c
   c4992:	5d5a      	ldrb	r2, [r3, r5]
   c4994:	2f00      	cmp	r7, #0
   c4996:	d037      	beq.n	c4a08 <_strtod_l+0x250>
   c4998:	9005      	str	r0, [sp, #20]
   c499a:	463d      	mov	r5, r7
   c499c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c49a0:	2b09      	cmp	r3, #9
   c49a2:	d912      	bls.n	c49ca <_strtod_l+0x212>
   c49a4:	2301      	movs	r3, #1
   c49a6:	e7c2      	b.n	c492e <_strtod_l+0x176>
   c49a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49aa:	1c5a      	adds	r2, r3, #1
   c49ac:	9217      	str	r2, [sp, #92]	; 0x5c
   c49ae:	785a      	ldrb	r2, [r3, #1]
   c49b0:	3001      	adds	r0, #1
   c49b2:	2a30      	cmp	r2, #48	; 0x30
   c49b4:	d0f8      	beq.n	c49a8 <_strtod_l+0x1f0>
   c49b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c49ba:	2b08      	cmp	r3, #8
   c49bc:	f200 84d9 	bhi.w	c5372 <_strtod_l+0xbba>
   c49c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c49c2:	9005      	str	r0, [sp, #20]
   c49c4:	2000      	movs	r0, #0
   c49c6:	9308      	str	r3, [sp, #32]
   c49c8:	4605      	mov	r5, r0
   c49ca:	3a30      	subs	r2, #48	; 0x30
   c49cc:	f100 0301 	add.w	r3, r0, #1
   c49d0:	d014      	beq.n	c49fc <_strtod_l+0x244>
   c49d2:	9905      	ldr	r1, [sp, #20]
   c49d4:	4419      	add	r1, r3
   c49d6:	9105      	str	r1, [sp, #20]
   c49d8:	462b      	mov	r3, r5
   c49da:	eb00 0e05 	add.w	lr, r0, r5
   c49de:	210a      	movs	r1, #10
   c49e0:	4573      	cmp	r3, lr
   c49e2:	d113      	bne.n	c4a0c <_strtod_l+0x254>
   c49e4:	182b      	adds	r3, r5, r0
   c49e6:	2b08      	cmp	r3, #8
   c49e8:	f105 0501 	add.w	r5, r5, #1
   c49ec:	4405      	add	r5, r0
   c49ee:	dc1c      	bgt.n	c4a2a <_strtod_l+0x272>
   c49f0:	9907      	ldr	r1, [sp, #28]
   c49f2:	230a      	movs	r3, #10
   c49f4:	fb03 2301 	mla	r3, r3, r1, r2
   c49f8:	9307      	str	r3, [sp, #28]
   c49fa:	2300      	movs	r3, #0
   c49fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c49fe:	1c51      	adds	r1, r2, #1
   c4a00:	9117      	str	r1, [sp, #92]	; 0x5c
   c4a02:	7852      	ldrb	r2, [r2, #1]
   c4a04:	4618      	mov	r0, r3
   c4a06:	e7c9      	b.n	c499c <_strtod_l+0x1e4>
   c4a08:	4638      	mov	r0, r7
   c4a0a:	e7d2      	b.n	c49b2 <_strtod_l+0x1fa>
   c4a0c:	2b08      	cmp	r3, #8
   c4a0e:	dc04      	bgt.n	c4a1a <_strtod_l+0x262>
   c4a10:	9e07      	ldr	r6, [sp, #28]
   c4a12:	434e      	muls	r6, r1
   c4a14:	9607      	str	r6, [sp, #28]
   c4a16:	3301      	adds	r3, #1
   c4a18:	e7e2      	b.n	c49e0 <_strtod_l+0x228>
   c4a1a:	f103 0c01 	add.w	ip, r3, #1
   c4a1e:	f1bc 0f10 	cmp.w	ip, #16
   c4a22:	bfd8      	it	le
   c4a24:	fb01 f909 	mulle.w	r9, r1, r9
   c4a28:	e7f5      	b.n	c4a16 <_strtod_l+0x25e>
   c4a2a:	2d10      	cmp	r5, #16
   c4a2c:	bfdc      	itt	le
   c4a2e:	230a      	movle	r3, #10
   c4a30:	fb03 2909 	mlale	r9, r3, r9, r2
   c4a34:	e7e1      	b.n	c49fa <_strtod_l+0x242>
   c4a36:	2300      	movs	r3, #0
   c4a38:	9305      	str	r3, [sp, #20]
   c4a3a:	2301      	movs	r3, #1
   c4a3c:	e77c      	b.n	c4938 <_strtod_l+0x180>
   c4a3e:	f04f 0c00 	mov.w	ip, #0
   c4a42:	f108 0202 	add.w	r2, r8, #2
   c4a46:	9217      	str	r2, [sp, #92]	; 0x5c
   c4a48:	f898 2002 	ldrb.w	r2, [r8, #2]
   c4a4c:	e785      	b.n	c495a <_strtod_l+0x1a2>
   c4a4e:	f04f 0c01 	mov.w	ip, #1
   c4a52:	e7f6      	b.n	c4a42 <_strtod_l+0x28a>
   c4a54:	000c8870 	.word	0x000c8870
   c4a58:	000c8688 	.word	0x000c8688
   c4a5c:	7ff00000 	.word	0x7ff00000
   c4a60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a62:	1c51      	adds	r1, r2, #1
   c4a64:	9117      	str	r1, [sp, #92]	; 0x5c
   c4a66:	7852      	ldrb	r2, [r2, #1]
   c4a68:	2a30      	cmp	r2, #48	; 0x30
   c4a6a:	d0f9      	beq.n	c4a60 <_strtod_l+0x2a8>
   c4a6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c4a70:	2908      	cmp	r1, #8
   c4a72:	f63f af79 	bhi.w	c4968 <_strtod_l+0x1b0>
   c4a76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c4a7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a7c:	9206      	str	r2, [sp, #24]
   c4a7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c4a80:	1c51      	adds	r1, r2, #1
   c4a82:	9117      	str	r1, [sp, #92]	; 0x5c
   c4a84:	7852      	ldrb	r2, [r2, #1]
   c4a86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c4a8a:	2e09      	cmp	r6, #9
   c4a8c:	d937      	bls.n	c4afe <_strtod_l+0x346>
   c4a8e:	9e06      	ldr	r6, [sp, #24]
   c4a90:	1b89      	subs	r1, r1, r6
   c4a92:	2908      	cmp	r1, #8
   c4a94:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c4a98:	dc02      	bgt.n	c4aa0 <_strtod_l+0x2e8>
   c4a9a:	4576      	cmp	r6, lr
   c4a9c:	bfa8      	it	ge
   c4a9e:	4676      	movge	r6, lr
   c4aa0:	f1bc 0f00 	cmp.w	ip, #0
   c4aa4:	d000      	beq.n	c4aa8 <_strtod_l+0x2f0>
   c4aa6:	4276      	negs	r6, r6
   c4aa8:	2d00      	cmp	r5, #0
   c4aaa:	d14d      	bne.n	c4b48 <_strtod_l+0x390>
   c4aac:	9904      	ldr	r1, [sp, #16]
   c4aae:	4301      	orrs	r1, r0
   c4ab0:	f47f aec6 	bne.w	c4840 <_strtod_l+0x88>
   c4ab4:	2b00      	cmp	r3, #0
   c4ab6:	f47f aee1 	bne.w	c487c <_strtod_l+0xc4>
   c4aba:	2a69      	cmp	r2, #105	; 0x69
   c4abc:	d027      	beq.n	c4b0e <_strtod_l+0x356>
   c4abe:	dc24      	bgt.n	c4b0a <_strtod_l+0x352>
   c4ac0:	2a49      	cmp	r2, #73	; 0x49
   c4ac2:	d024      	beq.n	c4b0e <_strtod_l+0x356>
   c4ac4:	2a4e      	cmp	r2, #78	; 0x4e
   c4ac6:	f47f aed9 	bne.w	c487c <_strtod_l+0xc4>
   c4aca:	499f      	ldr	r1, [pc, #636]	; (c4d48 <_strtod_l+0x590>)
   c4acc:	a817      	add	r0, sp, #92	; 0x5c
   c4ace:	f001 f833 	bl	c5b38 <__match>
   c4ad2:	2800      	cmp	r0, #0
   c4ad4:	f43f aed2 	beq.w	c487c <_strtod_l+0xc4>
   c4ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4ada:	781b      	ldrb	r3, [r3, #0]
   c4adc:	2b28      	cmp	r3, #40	; 0x28
   c4ade:	d12d      	bne.n	c4b3c <_strtod_l+0x384>
   c4ae0:	499a      	ldr	r1, [pc, #616]	; (c4d4c <_strtod_l+0x594>)
   c4ae2:	aa1a      	add	r2, sp, #104	; 0x68
   c4ae4:	a817      	add	r0, sp, #92	; 0x5c
   c4ae6:	f001 f83b 	bl	c5b60 <__hexnan>
   c4aea:	2805      	cmp	r0, #5
   c4aec:	d126      	bne.n	c4b3c <_strtod_l+0x384>
   c4aee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c4af0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c4af4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c4af8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c4afc:	e6a0      	b.n	c4840 <_strtod_l+0x88>
   c4afe:	210a      	movs	r1, #10
   c4b00:	fb01 2e0e 	mla	lr, r1, lr, r2
   c4b04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c4b08:	e7b9      	b.n	c4a7e <_strtod_l+0x2c6>
   c4b0a:	2a6e      	cmp	r2, #110	; 0x6e
   c4b0c:	e7db      	b.n	c4ac6 <_strtod_l+0x30e>
   c4b0e:	4990      	ldr	r1, [pc, #576]	; (c4d50 <_strtod_l+0x598>)
   c4b10:	a817      	add	r0, sp, #92	; 0x5c
   c4b12:	f001 f811 	bl	c5b38 <__match>
   c4b16:	2800      	cmp	r0, #0
   c4b18:	f43f aeb0 	beq.w	c487c <_strtod_l+0xc4>
   c4b1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4b1e:	498d      	ldr	r1, [pc, #564]	; (c4d54 <_strtod_l+0x59c>)
   c4b20:	3b01      	subs	r3, #1
   c4b22:	a817      	add	r0, sp, #92	; 0x5c
   c4b24:	9317      	str	r3, [sp, #92]	; 0x5c
   c4b26:	f001 f807 	bl	c5b38 <__match>
   c4b2a:	b910      	cbnz	r0, c4b32 <_strtod_l+0x37a>
   c4b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c4b2e:	3301      	adds	r3, #1
   c4b30:	9317      	str	r3, [sp, #92]	; 0x5c
   c4b32:	f8df b230 	ldr.w	fp, [pc, #560]	; c4d64 <_strtod_l+0x5ac>
   c4b36:	f04f 0a00 	mov.w	sl, #0
   c4b3a:	e681      	b.n	c4840 <_strtod_l+0x88>
   c4b3c:	4886      	ldr	r0, [pc, #536]	; (c4d58 <_strtod_l+0x5a0>)
   c4b3e:	f001 fd93 	bl	c6668 <nan>
   c4b42:	ec5b ab10 	vmov	sl, fp, d0
   c4b46:	e67b      	b.n	c4840 <_strtod_l+0x88>
   c4b48:	9b05      	ldr	r3, [sp, #20]
   c4b4a:	9807      	ldr	r0, [sp, #28]
   c4b4c:	1af3      	subs	r3, r6, r3
   c4b4e:	2f00      	cmp	r7, #0
   c4b50:	bf08      	it	eq
   c4b52:	462f      	moveq	r7, r5
   c4b54:	2d10      	cmp	r5, #16
   c4b56:	9306      	str	r3, [sp, #24]
   c4b58:	46a8      	mov	r8, r5
   c4b5a:	bfa8      	it	ge
   c4b5c:	f04f 0810 	movge.w	r8, #16
   c4b60:	f7ff f8dc 	bl	c3d1c <__aeabi_ui2d>
   c4b64:	2d09      	cmp	r5, #9
   c4b66:	4682      	mov	sl, r0
   c4b68:	468b      	mov	fp, r1
   c4b6a:	dd13      	ble.n	c4b94 <_strtod_l+0x3dc>
   c4b6c:	4b7b      	ldr	r3, [pc, #492]	; (c4d5c <_strtod_l+0x5a4>)
   c4b6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c4b72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c4b76:	f7ff f94b 	bl	c3e10 <__aeabi_dmul>
   c4b7a:	4682      	mov	sl, r0
   c4b7c:	4648      	mov	r0, r9
   c4b7e:	468b      	mov	fp, r1
   c4b80:	f7ff f8cc 	bl	c3d1c <__aeabi_ui2d>
   c4b84:	4602      	mov	r2, r0
   c4b86:	460b      	mov	r3, r1
   c4b88:	4650      	mov	r0, sl
   c4b8a:	4659      	mov	r1, fp
   c4b8c:	f7fe ff8a 	bl	c3aa4 <__adddf3>
   c4b90:	4682      	mov	sl, r0
   c4b92:	468b      	mov	fp, r1
   c4b94:	2d0f      	cmp	r5, #15
   c4b96:	dc38      	bgt.n	c4c0a <_strtod_l+0x452>
   c4b98:	9b06      	ldr	r3, [sp, #24]
   c4b9a:	2b00      	cmp	r3, #0
   c4b9c:	f43f ae50 	beq.w	c4840 <_strtod_l+0x88>
   c4ba0:	dd24      	ble.n	c4bec <_strtod_l+0x434>
   c4ba2:	2b16      	cmp	r3, #22
   c4ba4:	dc0b      	bgt.n	c4bbe <_strtod_l+0x406>
   c4ba6:	496d      	ldr	r1, [pc, #436]	; (c4d5c <_strtod_l+0x5a4>)
   c4ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4bac:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4bb0:	4652      	mov	r2, sl
   c4bb2:	465b      	mov	r3, fp
   c4bb4:	f7ff f92c 	bl	c3e10 <__aeabi_dmul>
   c4bb8:	4682      	mov	sl, r0
   c4bba:	468b      	mov	fp, r1
   c4bbc:	e640      	b.n	c4840 <_strtod_l+0x88>
   c4bbe:	9a06      	ldr	r2, [sp, #24]
   c4bc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c4bc4:	4293      	cmp	r3, r2
   c4bc6:	db20      	blt.n	c4c0a <_strtod_l+0x452>
   c4bc8:	4c64      	ldr	r4, [pc, #400]	; (c4d5c <_strtod_l+0x5a4>)
   c4bca:	f1c5 050f 	rsb	r5, r5, #15
   c4bce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c4bd2:	4652      	mov	r2, sl
   c4bd4:	465b      	mov	r3, fp
   c4bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4bda:	f7ff f919 	bl	c3e10 <__aeabi_dmul>
   c4bde:	9b06      	ldr	r3, [sp, #24]
   c4be0:	1b5d      	subs	r5, r3, r5
   c4be2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c4be6:	e9d4 2300 	ldrd	r2, r3, [r4]
   c4bea:	e7e3      	b.n	c4bb4 <_strtod_l+0x3fc>
   c4bec:	9b06      	ldr	r3, [sp, #24]
   c4bee:	3316      	adds	r3, #22
   c4bf0:	db0b      	blt.n	c4c0a <_strtod_l+0x452>
   c4bf2:	9b05      	ldr	r3, [sp, #20]
   c4bf4:	1b9e      	subs	r6, r3, r6
   c4bf6:	4b59      	ldr	r3, [pc, #356]	; (c4d5c <_strtod_l+0x5a4>)
   c4bf8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c4bfc:	e9d6 2300 	ldrd	r2, r3, [r6]
   c4c00:	4650      	mov	r0, sl
   c4c02:	4659      	mov	r1, fp
   c4c04:	f7ff fa2e 	bl	c4064 <__aeabi_ddiv>
   c4c08:	e7d6      	b.n	c4bb8 <_strtod_l+0x400>
   c4c0a:	9b06      	ldr	r3, [sp, #24]
   c4c0c:	eba5 0808 	sub.w	r8, r5, r8
   c4c10:	4498      	add	r8, r3
   c4c12:	f1b8 0f00 	cmp.w	r8, #0
   c4c16:	dd74      	ble.n	c4d02 <_strtod_l+0x54a>
   c4c18:	f018 030f 	ands.w	r3, r8, #15
   c4c1c:	d00a      	beq.n	c4c34 <_strtod_l+0x47c>
   c4c1e:	494f      	ldr	r1, [pc, #316]	; (c4d5c <_strtod_l+0x5a4>)
   c4c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c4c24:	4652      	mov	r2, sl
   c4c26:	465b      	mov	r3, fp
   c4c28:	e9d1 0100 	ldrd	r0, r1, [r1]
   c4c2c:	f7ff f8f0 	bl	c3e10 <__aeabi_dmul>
   c4c30:	4682      	mov	sl, r0
   c4c32:	468b      	mov	fp, r1
   c4c34:	f038 080f 	bics.w	r8, r8, #15
   c4c38:	d04f      	beq.n	c4cda <_strtod_l+0x522>
   c4c3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c4c3e:	dd22      	ble.n	c4c86 <_strtod_l+0x4ce>
   c4c40:	2500      	movs	r5, #0
   c4c42:	462e      	mov	r6, r5
   c4c44:	9507      	str	r5, [sp, #28]
   c4c46:	9505      	str	r5, [sp, #20]
   c4c48:	2322      	movs	r3, #34	; 0x22
   c4c4a:	f8df b118 	ldr.w	fp, [pc, #280]	; c4d64 <_strtod_l+0x5ac>
   c4c4e:	6023      	str	r3, [r4, #0]
   c4c50:	f04f 0a00 	mov.w	sl, #0
   c4c54:	9b07      	ldr	r3, [sp, #28]
   c4c56:	2b00      	cmp	r3, #0
   c4c58:	f43f adf2 	beq.w	c4840 <_strtod_l+0x88>
   c4c5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4c5e:	4620      	mov	r0, r4
   c4c60:	f001 f870 	bl	c5d44 <_Bfree>
   c4c64:	9905      	ldr	r1, [sp, #20]
   c4c66:	4620      	mov	r0, r4
   c4c68:	f001 f86c 	bl	c5d44 <_Bfree>
   c4c6c:	4631      	mov	r1, r6
   c4c6e:	4620      	mov	r0, r4
   c4c70:	f001 f868 	bl	c5d44 <_Bfree>
   c4c74:	9907      	ldr	r1, [sp, #28]
   c4c76:	4620      	mov	r0, r4
   c4c78:	f001 f864 	bl	c5d44 <_Bfree>
   c4c7c:	4629      	mov	r1, r5
   c4c7e:	4620      	mov	r0, r4
   c4c80:	f001 f860 	bl	c5d44 <_Bfree>
   c4c84:	e5dc      	b.n	c4840 <_strtod_l+0x88>
   c4c86:	4b36      	ldr	r3, [pc, #216]	; (c4d60 <_strtod_l+0x5a8>)
   c4c88:	9304      	str	r3, [sp, #16]
   c4c8a:	2300      	movs	r3, #0
   c4c8c:	ea4f 1828 	mov.w	r8, r8, asr #4
   c4c90:	4650      	mov	r0, sl
   c4c92:	4659      	mov	r1, fp
   c4c94:	4699      	mov	r9, r3
   c4c96:	f1b8 0f01 	cmp.w	r8, #1
   c4c9a:	dc21      	bgt.n	c4ce0 <_strtod_l+0x528>
   c4c9c:	b10b      	cbz	r3, c4ca2 <_strtod_l+0x4ea>
   c4c9e:	4682      	mov	sl, r0
   c4ca0:	468b      	mov	fp, r1
   c4ca2:	4b2f      	ldr	r3, [pc, #188]	; (c4d60 <_strtod_l+0x5a8>)
   c4ca4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c4ca8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c4cac:	4652      	mov	r2, sl
   c4cae:	465b      	mov	r3, fp
   c4cb0:	e9d9 0100 	ldrd	r0, r1, [r9]
   c4cb4:	f7ff f8ac 	bl	c3e10 <__aeabi_dmul>
   c4cb8:	4b2a      	ldr	r3, [pc, #168]	; (c4d64 <_strtod_l+0x5ac>)
   c4cba:	460a      	mov	r2, r1
   c4cbc:	400b      	ands	r3, r1
   c4cbe:	492a      	ldr	r1, [pc, #168]	; (c4d68 <_strtod_l+0x5b0>)
   c4cc0:	428b      	cmp	r3, r1
   c4cc2:	4682      	mov	sl, r0
   c4cc4:	d8bc      	bhi.n	c4c40 <_strtod_l+0x488>
   c4cc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c4cca:	428b      	cmp	r3, r1
   c4ccc:	bf86      	itte	hi
   c4cce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c4d6c <_strtod_l+0x5b4>
   c4cd2:	f04f 3aff 	movhi.w	sl, #4294967295
   c4cd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c4cda:	2300      	movs	r3, #0
   c4cdc:	9304      	str	r3, [sp, #16]
   c4cde:	e084      	b.n	c4dea <_strtod_l+0x632>
   c4ce0:	f018 0f01 	tst.w	r8, #1
   c4ce4:	d005      	beq.n	c4cf2 <_strtod_l+0x53a>
   c4ce6:	9b04      	ldr	r3, [sp, #16]
   c4ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4cec:	f7ff f890 	bl	c3e10 <__aeabi_dmul>
   c4cf0:	2301      	movs	r3, #1
   c4cf2:	9a04      	ldr	r2, [sp, #16]
   c4cf4:	3208      	adds	r2, #8
   c4cf6:	f109 0901 	add.w	r9, r9, #1
   c4cfa:	ea4f 0868 	mov.w	r8, r8, asr #1
   c4cfe:	9204      	str	r2, [sp, #16]
   c4d00:	e7c9      	b.n	c4c96 <_strtod_l+0x4de>
   c4d02:	d0ea      	beq.n	c4cda <_strtod_l+0x522>
   c4d04:	f1c8 0800 	rsb	r8, r8, #0
   c4d08:	f018 020f 	ands.w	r2, r8, #15
   c4d0c:	d00a      	beq.n	c4d24 <_strtod_l+0x56c>
   c4d0e:	4b13      	ldr	r3, [pc, #76]	; (c4d5c <_strtod_l+0x5a4>)
   c4d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c4d14:	4650      	mov	r0, sl
   c4d16:	4659      	mov	r1, fp
   c4d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4d1c:	f7ff f9a2 	bl	c4064 <__aeabi_ddiv>
   c4d20:	4682      	mov	sl, r0
   c4d22:	468b      	mov	fp, r1
   c4d24:	ea5f 1828 	movs.w	r8, r8, asr #4
   c4d28:	d0d7      	beq.n	c4cda <_strtod_l+0x522>
   c4d2a:	f1b8 0f1f 	cmp.w	r8, #31
   c4d2e:	dd1f      	ble.n	c4d70 <_strtod_l+0x5b8>
   c4d30:	2500      	movs	r5, #0
   c4d32:	462e      	mov	r6, r5
   c4d34:	9507      	str	r5, [sp, #28]
   c4d36:	9505      	str	r5, [sp, #20]
   c4d38:	2322      	movs	r3, #34	; 0x22
   c4d3a:	f04f 0a00 	mov.w	sl, #0
   c4d3e:	f04f 0b00 	mov.w	fp, #0
   c4d42:	6023      	str	r3, [r4, #0]
   c4d44:	e786      	b.n	c4c54 <_strtod_l+0x49c>
   c4d46:	bf00      	nop
   c4d48:	000c8685 	.word	0x000c8685
   c4d4c:	000c869c 	.word	0x000c869c
   c4d50:	000c867c 	.word	0x000c867c
   c4d54:	000c867f 	.word	0x000c867f
   c4d58:	000c7e94 	.word	0x000c7e94
   c4d5c:	000c8928 	.word	0x000c8928
   c4d60:	000c8900 	.word	0x000c8900
   c4d64:	7ff00000 	.word	0x7ff00000
   c4d68:	7ca00000 	.word	0x7ca00000
   c4d6c:	7fefffff 	.word	0x7fefffff
   c4d70:	f018 0310 	ands.w	r3, r8, #16
   c4d74:	bf18      	it	ne
   c4d76:	236a      	movne	r3, #106	; 0x6a
   c4d78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c5128 <_strtod_l+0x970>
   c4d7c:	9304      	str	r3, [sp, #16]
   c4d7e:	4650      	mov	r0, sl
   c4d80:	4659      	mov	r1, fp
   c4d82:	2300      	movs	r3, #0
   c4d84:	f018 0f01 	tst.w	r8, #1
   c4d88:	d004      	beq.n	c4d94 <_strtod_l+0x5dc>
   c4d8a:	e9d9 2300 	ldrd	r2, r3, [r9]
   c4d8e:	f7ff f83f 	bl	c3e10 <__aeabi_dmul>
   c4d92:	2301      	movs	r3, #1
   c4d94:	ea5f 0868 	movs.w	r8, r8, asr #1
   c4d98:	f109 0908 	add.w	r9, r9, #8
   c4d9c:	d1f2      	bne.n	c4d84 <_strtod_l+0x5cc>
   c4d9e:	b10b      	cbz	r3, c4da4 <_strtod_l+0x5ec>
   c4da0:	4682      	mov	sl, r0
   c4da2:	468b      	mov	fp, r1
   c4da4:	9b04      	ldr	r3, [sp, #16]
   c4da6:	b1c3      	cbz	r3, c4dda <_strtod_l+0x622>
   c4da8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c4dac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c4db0:	2b00      	cmp	r3, #0
   c4db2:	4659      	mov	r1, fp
   c4db4:	dd11      	ble.n	c4dda <_strtod_l+0x622>
   c4db6:	2b1f      	cmp	r3, #31
   c4db8:	f340 8124 	ble.w	c5004 <_strtod_l+0x84c>
   c4dbc:	2b34      	cmp	r3, #52	; 0x34
   c4dbe:	bfde      	ittt	le
   c4dc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c4dc4:	f04f 33ff 	movle.w	r3, #4294967295
   c4dc8:	fa03 f202 	lslle.w	r2, r3, r2
   c4dcc:	f04f 0a00 	mov.w	sl, #0
   c4dd0:	bfcc      	ite	gt
   c4dd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c4dd6:	ea02 0b01 	andle.w	fp, r2, r1
   c4dda:	2200      	movs	r2, #0
   c4ddc:	2300      	movs	r3, #0
   c4dde:	4650      	mov	r0, sl
   c4de0:	4659      	mov	r1, fp
   c4de2:	f7ff fa7d 	bl	c42e0 <__aeabi_dcmpeq>
   c4de6:	2800      	cmp	r0, #0
   c4de8:	d1a2      	bne.n	c4d30 <_strtod_l+0x578>
   c4dea:	9b07      	ldr	r3, [sp, #28]
   c4dec:	9300      	str	r3, [sp, #0]
   c4dee:	9908      	ldr	r1, [sp, #32]
   c4df0:	462b      	mov	r3, r5
   c4df2:	463a      	mov	r2, r7
   c4df4:	4620      	mov	r0, r4
   c4df6:	f001 f80d 	bl	c5e14 <__s2b>
   c4dfa:	9007      	str	r0, [sp, #28]
   c4dfc:	2800      	cmp	r0, #0
   c4dfe:	f43f af1f 	beq.w	c4c40 <_strtod_l+0x488>
   c4e02:	9b05      	ldr	r3, [sp, #20]
   c4e04:	1b9e      	subs	r6, r3, r6
   c4e06:	9b06      	ldr	r3, [sp, #24]
   c4e08:	2b00      	cmp	r3, #0
   c4e0a:	bfb4      	ite	lt
   c4e0c:	4633      	movlt	r3, r6
   c4e0e:	2300      	movge	r3, #0
   c4e10:	930c      	str	r3, [sp, #48]	; 0x30
   c4e12:	9b06      	ldr	r3, [sp, #24]
   c4e14:	2500      	movs	r5, #0
   c4e16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c4e1a:	9312      	str	r3, [sp, #72]	; 0x48
   c4e1c:	462e      	mov	r6, r5
   c4e1e:	9b07      	ldr	r3, [sp, #28]
   c4e20:	4620      	mov	r0, r4
   c4e22:	6859      	ldr	r1, [r3, #4]
   c4e24:	f000 ff4e 	bl	c5cc4 <_Balloc>
   c4e28:	9005      	str	r0, [sp, #20]
   c4e2a:	2800      	cmp	r0, #0
   c4e2c:	f43f af0c 	beq.w	c4c48 <_strtod_l+0x490>
   c4e30:	9b07      	ldr	r3, [sp, #28]
   c4e32:	691a      	ldr	r2, [r3, #16]
   c4e34:	3202      	adds	r2, #2
   c4e36:	f103 010c 	add.w	r1, r3, #12
   c4e3a:	0092      	lsls	r2, r2, #2
   c4e3c:	300c      	adds	r0, #12
   c4e3e:	f7ff fb73 	bl	c4528 <memcpy>
   c4e42:	ec4b ab10 	vmov	d0, sl, fp
   c4e46:	aa1a      	add	r2, sp, #104	; 0x68
   c4e48:	a919      	add	r1, sp, #100	; 0x64
   c4e4a:	4620      	mov	r0, r4
   c4e4c:	f001 fb28 	bl	c64a0 <__d2b>
   c4e50:	ec4b ab18 	vmov	d8, sl, fp
   c4e54:	9018      	str	r0, [sp, #96]	; 0x60
   c4e56:	2800      	cmp	r0, #0
   c4e58:	f43f aef6 	beq.w	c4c48 <_strtod_l+0x490>
   c4e5c:	2101      	movs	r1, #1
   c4e5e:	4620      	mov	r0, r4
   c4e60:	f001 f872 	bl	c5f48 <__i2b>
   c4e64:	4606      	mov	r6, r0
   c4e66:	2800      	cmp	r0, #0
   c4e68:	f43f aeee 	beq.w	c4c48 <_strtod_l+0x490>
   c4e6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c4e6e:	9904      	ldr	r1, [sp, #16]
   c4e70:	2b00      	cmp	r3, #0
   c4e72:	bfab      	itete	ge
   c4e74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c4e76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c4e78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c4e7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c4e7e:	bfac      	ite	ge
   c4e80:	eb03 0902 	addge.w	r9, r3, r2
   c4e84:	1ad7      	sublt	r7, r2, r3
   c4e86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c4e88:	eba3 0801 	sub.w	r8, r3, r1
   c4e8c:	4490      	add	r8, r2
   c4e8e:	4ba1      	ldr	r3, [pc, #644]	; (c5114 <_strtod_l+0x95c>)
   c4e90:	f108 38ff 	add.w	r8, r8, #4294967295
   c4e94:	4598      	cmp	r8, r3
   c4e96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c4e9a:	f280 80c7 	bge.w	c502c <_strtod_l+0x874>
   c4e9e:	eba3 0308 	sub.w	r3, r3, r8
   c4ea2:	2b1f      	cmp	r3, #31
   c4ea4:	eba2 0203 	sub.w	r2, r2, r3
   c4ea8:	f04f 0101 	mov.w	r1, #1
   c4eac:	f300 80b1 	bgt.w	c5012 <_strtod_l+0x85a>
   c4eb0:	fa01 f303 	lsl.w	r3, r1, r3
   c4eb4:	930d      	str	r3, [sp, #52]	; 0x34
   c4eb6:	2300      	movs	r3, #0
   c4eb8:	9308      	str	r3, [sp, #32]
   c4eba:	eb09 0802 	add.w	r8, r9, r2
   c4ebe:	9b04      	ldr	r3, [sp, #16]
   c4ec0:	45c1      	cmp	r9, r8
   c4ec2:	4417      	add	r7, r2
   c4ec4:	441f      	add	r7, r3
   c4ec6:	464b      	mov	r3, r9
   c4ec8:	bfa8      	it	ge
   c4eca:	4643      	movge	r3, r8
   c4ecc:	42bb      	cmp	r3, r7
   c4ece:	bfa8      	it	ge
   c4ed0:	463b      	movge	r3, r7
   c4ed2:	2b00      	cmp	r3, #0
   c4ed4:	bfc2      	ittt	gt
   c4ed6:	eba8 0803 	subgt.w	r8, r8, r3
   c4eda:	1aff      	subgt	r7, r7, r3
   c4edc:	eba9 0903 	subgt.w	r9, r9, r3
   c4ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c4ee2:	2b00      	cmp	r3, #0
   c4ee4:	dd17      	ble.n	c4f16 <_strtod_l+0x75e>
   c4ee6:	4631      	mov	r1, r6
   c4ee8:	461a      	mov	r2, r3
   c4eea:	4620      	mov	r0, r4
   c4eec:	f001 f8ec 	bl	c60c8 <__pow5mult>
   c4ef0:	4606      	mov	r6, r0
   c4ef2:	2800      	cmp	r0, #0
   c4ef4:	f43f aea8 	beq.w	c4c48 <_strtod_l+0x490>
   c4ef8:	4601      	mov	r1, r0
   c4efa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c4efc:	4620      	mov	r0, r4
   c4efe:	f001 f839 	bl	c5f74 <__multiply>
   c4f02:	900b      	str	r0, [sp, #44]	; 0x2c
   c4f04:	2800      	cmp	r0, #0
   c4f06:	f43f ae9f 	beq.w	c4c48 <_strtod_l+0x490>
   c4f0a:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4f0c:	4620      	mov	r0, r4
   c4f0e:	f000 ff19 	bl	c5d44 <_Bfree>
   c4f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f14:	9318      	str	r3, [sp, #96]	; 0x60
   c4f16:	f1b8 0f00 	cmp.w	r8, #0
   c4f1a:	f300 808c 	bgt.w	c5036 <_strtod_l+0x87e>
   c4f1e:	9b06      	ldr	r3, [sp, #24]
   c4f20:	2b00      	cmp	r3, #0
   c4f22:	dd08      	ble.n	c4f36 <_strtod_l+0x77e>
   c4f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c4f26:	9905      	ldr	r1, [sp, #20]
   c4f28:	4620      	mov	r0, r4
   c4f2a:	f001 f8cd 	bl	c60c8 <__pow5mult>
   c4f2e:	9005      	str	r0, [sp, #20]
   c4f30:	2800      	cmp	r0, #0
   c4f32:	f43f ae89 	beq.w	c4c48 <_strtod_l+0x490>
   c4f36:	2f00      	cmp	r7, #0
   c4f38:	dd08      	ble.n	c4f4c <_strtod_l+0x794>
   c4f3a:	9905      	ldr	r1, [sp, #20]
   c4f3c:	463a      	mov	r2, r7
   c4f3e:	4620      	mov	r0, r4
   c4f40:	f001 f91c 	bl	c617c <__lshift>
   c4f44:	9005      	str	r0, [sp, #20]
   c4f46:	2800      	cmp	r0, #0
   c4f48:	f43f ae7e 	beq.w	c4c48 <_strtod_l+0x490>
   c4f4c:	f1b9 0f00 	cmp.w	r9, #0
   c4f50:	dd08      	ble.n	c4f64 <_strtod_l+0x7ac>
   c4f52:	4631      	mov	r1, r6
   c4f54:	464a      	mov	r2, r9
   c4f56:	4620      	mov	r0, r4
   c4f58:	f001 f910 	bl	c617c <__lshift>
   c4f5c:	4606      	mov	r6, r0
   c4f5e:	2800      	cmp	r0, #0
   c4f60:	f43f ae72 	beq.w	c4c48 <_strtod_l+0x490>
   c4f64:	9a05      	ldr	r2, [sp, #20]
   c4f66:	9918      	ldr	r1, [sp, #96]	; 0x60
   c4f68:	4620      	mov	r0, r4
   c4f6a:	f001 f993 	bl	c6294 <__mdiff>
   c4f6e:	4605      	mov	r5, r0
   c4f70:	2800      	cmp	r0, #0
   c4f72:	f43f ae69 	beq.w	c4c48 <_strtod_l+0x490>
   c4f76:	68c3      	ldr	r3, [r0, #12]
   c4f78:	930b      	str	r3, [sp, #44]	; 0x2c
   c4f7a:	2300      	movs	r3, #0
   c4f7c:	60c3      	str	r3, [r0, #12]
   c4f7e:	4631      	mov	r1, r6
   c4f80:	f001 f96c 	bl	c625c <__mcmp>
   c4f84:	2800      	cmp	r0, #0
   c4f86:	da60      	bge.n	c504a <_strtod_l+0x892>
   c4f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c4f8a:	ea53 030a 	orrs.w	r3, r3, sl
   c4f8e:	f040 8082 	bne.w	c5096 <_strtod_l+0x8de>
   c4f92:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c4f96:	2b00      	cmp	r3, #0
   c4f98:	d17d      	bne.n	c5096 <_strtod_l+0x8de>
   c4f9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c4f9e:	0d1b      	lsrs	r3, r3, #20
   c4fa0:	051b      	lsls	r3, r3, #20
   c4fa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c4fa6:	d976      	bls.n	c5096 <_strtod_l+0x8de>
   c4fa8:	696b      	ldr	r3, [r5, #20]
   c4faa:	b913      	cbnz	r3, c4fb2 <_strtod_l+0x7fa>
   c4fac:	692b      	ldr	r3, [r5, #16]
   c4fae:	2b01      	cmp	r3, #1
   c4fb0:	dd71      	ble.n	c5096 <_strtod_l+0x8de>
   c4fb2:	4629      	mov	r1, r5
   c4fb4:	2201      	movs	r2, #1
   c4fb6:	4620      	mov	r0, r4
   c4fb8:	f001 f8e0 	bl	c617c <__lshift>
   c4fbc:	4631      	mov	r1, r6
   c4fbe:	4605      	mov	r5, r0
   c4fc0:	f001 f94c 	bl	c625c <__mcmp>
   c4fc4:	2800      	cmp	r0, #0
   c4fc6:	dd66      	ble.n	c5096 <_strtod_l+0x8de>
   c4fc8:	9904      	ldr	r1, [sp, #16]
   c4fca:	4a53      	ldr	r2, [pc, #332]	; (c5118 <_strtod_l+0x960>)
   c4fcc:	465b      	mov	r3, fp
   c4fce:	2900      	cmp	r1, #0
   c4fd0:	f000 8081 	beq.w	c50d6 <_strtod_l+0x91e>
   c4fd4:	ea02 010b 	and.w	r1, r2, fp
   c4fd8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c4fdc:	dc7b      	bgt.n	c50d6 <_strtod_l+0x91e>
   c4fde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c4fe2:	f77f aea9 	ble.w	c4d38 <_strtod_l+0x580>
   c4fe6:	4b4d      	ldr	r3, [pc, #308]	; (c511c <_strtod_l+0x964>)
   c4fe8:	4650      	mov	r0, sl
   c4fea:	4659      	mov	r1, fp
   c4fec:	2200      	movs	r2, #0
   c4fee:	f7fe ff0f 	bl	c3e10 <__aeabi_dmul>
   c4ff2:	460b      	mov	r3, r1
   c4ff4:	4303      	orrs	r3, r0
   c4ff6:	bf08      	it	eq
   c4ff8:	2322      	moveq	r3, #34	; 0x22
   c4ffa:	4682      	mov	sl, r0
   c4ffc:	468b      	mov	fp, r1
   c4ffe:	bf08      	it	eq
   c5000:	6023      	streq	r3, [r4, #0]
   c5002:	e62b      	b.n	c4c5c <_strtod_l+0x4a4>
   c5004:	f04f 32ff 	mov.w	r2, #4294967295
   c5008:	fa02 f303 	lsl.w	r3, r2, r3
   c500c:	ea03 0a0a 	and.w	sl, r3, sl
   c5010:	e6e3      	b.n	c4dda <_strtod_l+0x622>
   c5012:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c5016:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c501a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c501e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c5022:	fa01 f308 	lsl.w	r3, r1, r8
   c5026:	9308      	str	r3, [sp, #32]
   c5028:	910d      	str	r1, [sp, #52]	; 0x34
   c502a:	e746      	b.n	c4eba <_strtod_l+0x702>
   c502c:	2300      	movs	r3, #0
   c502e:	9308      	str	r3, [sp, #32]
   c5030:	2301      	movs	r3, #1
   c5032:	930d      	str	r3, [sp, #52]	; 0x34
   c5034:	e741      	b.n	c4eba <_strtod_l+0x702>
   c5036:	9918      	ldr	r1, [sp, #96]	; 0x60
   c5038:	4642      	mov	r2, r8
   c503a:	4620      	mov	r0, r4
   c503c:	f001 f89e 	bl	c617c <__lshift>
   c5040:	9018      	str	r0, [sp, #96]	; 0x60
   c5042:	2800      	cmp	r0, #0
   c5044:	f47f af6b 	bne.w	c4f1e <_strtod_l+0x766>
   c5048:	e5fe      	b.n	c4c48 <_strtod_l+0x490>
   c504a:	465f      	mov	r7, fp
   c504c:	d16e      	bne.n	c512c <_strtod_l+0x974>
   c504e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c5050:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c5054:	b342      	cbz	r2, c50a8 <_strtod_l+0x8f0>
   c5056:	4a32      	ldr	r2, [pc, #200]	; (c5120 <_strtod_l+0x968>)
   c5058:	4293      	cmp	r3, r2
   c505a:	d128      	bne.n	c50ae <_strtod_l+0x8f6>
   c505c:	9b04      	ldr	r3, [sp, #16]
   c505e:	4651      	mov	r1, sl
   c5060:	b1eb      	cbz	r3, c509e <_strtod_l+0x8e6>
   c5062:	4b2d      	ldr	r3, [pc, #180]	; (c5118 <_strtod_l+0x960>)
   c5064:	403b      	ands	r3, r7
   c5066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c506a:	f04f 32ff 	mov.w	r2, #4294967295
   c506e:	d819      	bhi.n	c50a4 <_strtod_l+0x8ec>
   c5070:	0d1b      	lsrs	r3, r3, #20
   c5072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c5076:	fa02 f303 	lsl.w	r3, r2, r3
   c507a:	4299      	cmp	r1, r3
   c507c:	d117      	bne.n	c50ae <_strtod_l+0x8f6>
   c507e:	4b29      	ldr	r3, [pc, #164]	; (c5124 <_strtod_l+0x96c>)
   c5080:	429f      	cmp	r7, r3
   c5082:	d102      	bne.n	c508a <_strtod_l+0x8d2>
   c5084:	3101      	adds	r1, #1
   c5086:	f43f addf 	beq.w	c4c48 <_strtod_l+0x490>
   c508a:	4b23      	ldr	r3, [pc, #140]	; (c5118 <_strtod_l+0x960>)
   c508c:	403b      	ands	r3, r7
   c508e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c5092:	f04f 0a00 	mov.w	sl, #0
   c5096:	9b04      	ldr	r3, [sp, #16]
   c5098:	2b00      	cmp	r3, #0
   c509a:	d1a4      	bne.n	c4fe6 <_strtod_l+0x82e>
   c509c:	e5de      	b.n	c4c5c <_strtod_l+0x4a4>
   c509e:	f04f 33ff 	mov.w	r3, #4294967295
   c50a2:	e7ea      	b.n	c507a <_strtod_l+0x8c2>
   c50a4:	4613      	mov	r3, r2
   c50a6:	e7e8      	b.n	c507a <_strtod_l+0x8c2>
   c50a8:	ea53 030a 	orrs.w	r3, r3, sl
   c50ac:	d08c      	beq.n	c4fc8 <_strtod_l+0x810>
   c50ae:	9b08      	ldr	r3, [sp, #32]
   c50b0:	b1db      	cbz	r3, c50ea <_strtod_l+0x932>
   c50b2:	423b      	tst	r3, r7
   c50b4:	d0ef      	beq.n	c5096 <_strtod_l+0x8de>
   c50b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c50b8:	9a04      	ldr	r2, [sp, #16]
   c50ba:	4650      	mov	r0, sl
   c50bc:	4659      	mov	r1, fp
   c50be:	b1c3      	cbz	r3, c50f2 <_strtod_l+0x93a>
   c50c0:	f7ff fb5d 	bl	c477e <sulp>
   c50c4:	4602      	mov	r2, r0
   c50c6:	460b      	mov	r3, r1
   c50c8:	ec51 0b18 	vmov	r0, r1, d8
   c50cc:	f7fe fcea 	bl	c3aa4 <__adddf3>
   c50d0:	4682      	mov	sl, r0
   c50d2:	468b      	mov	fp, r1
   c50d4:	e7df      	b.n	c5096 <_strtod_l+0x8de>
   c50d6:	4013      	ands	r3, r2
   c50d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c50dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c50e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c50e4:	f04f 3aff 	mov.w	sl, #4294967295
   c50e8:	e7d5      	b.n	c5096 <_strtod_l+0x8de>
   c50ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c50ec:	ea13 0f0a 	tst.w	r3, sl
   c50f0:	e7e0      	b.n	c50b4 <_strtod_l+0x8fc>
   c50f2:	f7ff fb44 	bl	c477e <sulp>
   c50f6:	4602      	mov	r2, r0
   c50f8:	460b      	mov	r3, r1
   c50fa:	ec51 0b18 	vmov	r0, r1, d8
   c50fe:	f7fe fccf 	bl	c3aa0 <__aeabi_dsub>
   c5102:	2200      	movs	r2, #0
   c5104:	2300      	movs	r3, #0
   c5106:	4682      	mov	sl, r0
   c5108:	468b      	mov	fp, r1
   c510a:	f7ff f8e9 	bl	c42e0 <__aeabi_dcmpeq>
   c510e:	2800      	cmp	r0, #0
   c5110:	d0c1      	beq.n	c5096 <_strtod_l+0x8de>
   c5112:	e611      	b.n	c4d38 <_strtod_l+0x580>
   c5114:	fffffc02 	.word	0xfffffc02
   c5118:	7ff00000 	.word	0x7ff00000
   c511c:	39500000 	.word	0x39500000
   c5120:	000fffff 	.word	0x000fffff
   c5124:	7fefffff 	.word	0x7fefffff
   c5128:	000c86b0 	.word	0x000c86b0
   c512c:	4631      	mov	r1, r6
   c512e:	4628      	mov	r0, r5
   c5130:	f001 fa12 	bl	c6558 <__ratio>
   c5134:	ec59 8b10 	vmov	r8, r9, d0
   c5138:	ee10 0a10 	vmov	r0, s0
   c513c:	2200      	movs	r2, #0
   c513e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c5142:	4649      	mov	r1, r9
   c5144:	f7ff f8e0 	bl	c4308 <__aeabi_dcmple>
   c5148:	2800      	cmp	r0, #0
   c514a:	d07a      	beq.n	c5242 <_strtod_l+0xa8a>
   c514c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c514e:	2b00      	cmp	r3, #0
   c5150:	d04a      	beq.n	c51e8 <_strtod_l+0xa30>
   c5152:	4b95      	ldr	r3, [pc, #596]	; (c53a8 <_strtod_l+0xbf0>)
   c5154:	2200      	movs	r2, #0
   c5156:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c515a:	f8df 924c 	ldr.w	r9, [pc, #588]	; c53a8 <_strtod_l+0xbf0>
   c515e:	f04f 0800 	mov.w	r8, #0
   c5162:	4b92      	ldr	r3, [pc, #584]	; (c53ac <_strtod_l+0xbf4>)
   c5164:	403b      	ands	r3, r7
   c5166:	930d      	str	r3, [sp, #52]	; 0x34
   c5168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c516a:	4b91      	ldr	r3, [pc, #580]	; (c53b0 <_strtod_l+0xbf8>)
   c516c:	429a      	cmp	r2, r3
   c516e:	f040 80b0 	bne.w	c52d2 <_strtod_l+0xb1a>
   c5172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5176:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c517a:	ec4b ab10 	vmov	d0, sl, fp
   c517e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5182:	f001 f911 	bl	c63a8 <__ulp>
   c5186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c518a:	ec53 2b10 	vmov	r2, r3, d0
   c518e:	f7fe fe3f 	bl	c3e10 <__aeabi_dmul>
   c5192:	4652      	mov	r2, sl
   c5194:	465b      	mov	r3, fp
   c5196:	f7fe fc85 	bl	c3aa4 <__adddf3>
   c519a:	460b      	mov	r3, r1
   c519c:	4983      	ldr	r1, [pc, #524]	; (c53ac <_strtod_l+0xbf4>)
   c519e:	4a85      	ldr	r2, [pc, #532]	; (c53b4 <_strtod_l+0xbfc>)
   c51a0:	4019      	ands	r1, r3
   c51a2:	4291      	cmp	r1, r2
   c51a4:	4682      	mov	sl, r0
   c51a6:	d960      	bls.n	c526a <_strtod_l+0xab2>
   c51a8:	ee18 3a90 	vmov	r3, s17
   c51ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c51b0:	4293      	cmp	r3, r2
   c51b2:	d104      	bne.n	c51be <_strtod_l+0xa06>
   c51b4:	ee18 3a10 	vmov	r3, s16
   c51b8:	3301      	adds	r3, #1
   c51ba:	f43f ad45 	beq.w	c4c48 <_strtod_l+0x490>
   c51be:	f8df b200 	ldr.w	fp, [pc, #512]	; c53c0 <_strtod_l+0xc08>
   c51c2:	f04f 3aff 	mov.w	sl, #4294967295
   c51c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   c51c8:	4620      	mov	r0, r4
   c51ca:	f000 fdbb 	bl	c5d44 <_Bfree>
   c51ce:	9905      	ldr	r1, [sp, #20]
   c51d0:	4620      	mov	r0, r4
   c51d2:	f000 fdb7 	bl	c5d44 <_Bfree>
   c51d6:	4631      	mov	r1, r6
   c51d8:	4620      	mov	r0, r4
   c51da:	f000 fdb3 	bl	c5d44 <_Bfree>
   c51de:	4629      	mov	r1, r5
   c51e0:	4620      	mov	r0, r4
   c51e2:	f000 fdaf 	bl	c5d44 <_Bfree>
   c51e6:	e61a      	b.n	c4e1e <_strtod_l+0x666>
   c51e8:	f1ba 0f00 	cmp.w	sl, #0
   c51ec:	d11b      	bne.n	c5226 <_strtod_l+0xa6e>
   c51ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c51f2:	b9f3      	cbnz	r3, c5232 <_strtod_l+0xa7a>
   c51f4:	4b6c      	ldr	r3, [pc, #432]	; (c53a8 <_strtod_l+0xbf0>)
   c51f6:	2200      	movs	r2, #0
   c51f8:	4640      	mov	r0, r8
   c51fa:	4649      	mov	r1, r9
   c51fc:	f7ff f87a 	bl	c42f4 <__aeabi_dcmplt>
   c5200:	b9d0      	cbnz	r0, c5238 <_strtod_l+0xa80>
   c5202:	4640      	mov	r0, r8
   c5204:	4649      	mov	r1, r9
   c5206:	4b6c      	ldr	r3, [pc, #432]	; (c53b8 <_strtod_l+0xc00>)
   c5208:	2200      	movs	r2, #0
   c520a:	f7fe fe01 	bl	c3e10 <__aeabi_dmul>
   c520e:	4680      	mov	r8, r0
   c5210:	4689      	mov	r9, r1
   c5212:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c5216:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c521a:	9315      	str	r3, [sp, #84]	; 0x54
   c521c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c5220:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5224:	e79d      	b.n	c5162 <_strtod_l+0x9aa>
   c5226:	f1ba 0f01 	cmp.w	sl, #1
   c522a:	d102      	bne.n	c5232 <_strtod_l+0xa7a>
   c522c:	2f00      	cmp	r7, #0
   c522e:	f43f ad83 	beq.w	c4d38 <_strtod_l+0x580>
   c5232:	4b62      	ldr	r3, [pc, #392]	; (c53bc <_strtod_l+0xc04>)
   c5234:	2200      	movs	r2, #0
   c5236:	e78e      	b.n	c5156 <_strtod_l+0x99e>
   c5238:	f8df 917c 	ldr.w	r9, [pc, #380]	; c53b8 <_strtod_l+0xc00>
   c523c:	f04f 0800 	mov.w	r8, #0
   c5240:	e7e7      	b.n	c5212 <_strtod_l+0xa5a>
   c5242:	4b5d      	ldr	r3, [pc, #372]	; (c53b8 <_strtod_l+0xc00>)
   c5244:	4640      	mov	r0, r8
   c5246:	4649      	mov	r1, r9
   c5248:	2200      	movs	r2, #0
   c524a:	f7fe fde1 	bl	c3e10 <__aeabi_dmul>
   c524e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5250:	4680      	mov	r8, r0
   c5252:	4689      	mov	r9, r1
   c5254:	b933      	cbnz	r3, c5264 <_strtod_l+0xaac>
   c5256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c525a:	900e      	str	r0, [sp, #56]	; 0x38
   c525c:	930f      	str	r3, [sp, #60]	; 0x3c
   c525e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c5262:	e7dd      	b.n	c5220 <_strtod_l+0xa68>
   c5264:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c5268:	e7f9      	b.n	c525e <_strtod_l+0xaa6>
   c526a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c526e:	9b04      	ldr	r3, [sp, #16]
   c5270:	2b00      	cmp	r3, #0
   c5272:	d1a8      	bne.n	c51c6 <_strtod_l+0xa0e>
   c5274:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c5278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c527a:	0d1b      	lsrs	r3, r3, #20
   c527c:	051b      	lsls	r3, r3, #20
   c527e:	429a      	cmp	r2, r3
   c5280:	d1a1      	bne.n	c51c6 <_strtod_l+0xa0e>
   c5282:	4640      	mov	r0, r8
   c5284:	4649      	mov	r1, r9
   c5286:	f001 fa05 	bl	c6694 <__aeabi_d2lz>
   c528a:	f7fe fd93 	bl	c3db4 <__aeabi_l2d>
   c528e:	4602      	mov	r2, r0
   c5290:	460b      	mov	r3, r1
   c5292:	4640      	mov	r0, r8
   c5294:	4649      	mov	r1, r9
   c5296:	f7fe fc03 	bl	c3aa0 <__aeabi_dsub>
   c529a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c529c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c52a0:	ea43 030a 	orr.w	r3, r3, sl
   c52a4:	4313      	orrs	r3, r2
   c52a6:	4680      	mov	r8, r0
   c52a8:	4689      	mov	r9, r1
   c52aa:	d055      	beq.n	c5358 <_strtod_l+0xba0>
   c52ac:	a336      	add	r3, pc, #216	; (adr r3, c5388 <_strtod_l+0xbd0>)
   c52ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52b2:	f7ff f81f 	bl	c42f4 <__aeabi_dcmplt>
   c52b6:	2800      	cmp	r0, #0
   c52b8:	f47f acd0 	bne.w	c4c5c <_strtod_l+0x4a4>
   c52bc:	a334      	add	r3, pc, #208	; (adr r3, c5390 <_strtod_l+0xbd8>)
   c52be:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52c2:	4640      	mov	r0, r8
   c52c4:	4649      	mov	r1, r9
   c52c6:	f7ff f833 	bl	c4330 <__aeabi_dcmpgt>
   c52ca:	2800      	cmp	r0, #0
   c52cc:	f43f af7b 	beq.w	c51c6 <_strtod_l+0xa0e>
   c52d0:	e4c4      	b.n	c4c5c <_strtod_l+0x4a4>
   c52d2:	9b04      	ldr	r3, [sp, #16]
   c52d4:	b333      	cbz	r3, c5324 <_strtod_l+0xb6c>
   c52d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c52d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c52dc:	d822      	bhi.n	c5324 <_strtod_l+0xb6c>
   c52de:	a32e      	add	r3, pc, #184	; (adr r3, c5398 <_strtod_l+0xbe0>)
   c52e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c52e4:	4640      	mov	r0, r8
   c52e6:	4649      	mov	r1, r9
   c52e8:	f7ff f80e 	bl	c4308 <__aeabi_dcmple>
   c52ec:	b1a0      	cbz	r0, c5318 <_strtod_l+0xb60>
   c52ee:	4649      	mov	r1, r9
   c52f0:	4640      	mov	r0, r8
   c52f2:	f7ff f865 	bl	c43c0 <__aeabi_d2uiz>
   c52f6:	2801      	cmp	r0, #1
   c52f8:	bf38      	it	cc
   c52fa:	2001      	movcc	r0, #1
   c52fc:	f7fe fd0e 	bl	c3d1c <__aeabi_ui2d>
   c5300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c5302:	4680      	mov	r8, r0
   c5304:	4689      	mov	r9, r1
   c5306:	bb23      	cbnz	r3, c5352 <_strtod_l+0xb9a>
   c5308:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c530c:	9010      	str	r0, [sp, #64]	; 0x40
   c530e:	9311      	str	r3, [sp, #68]	; 0x44
   c5310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c5314:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c5318:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c531a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c531c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c5320:	1a9b      	subs	r3, r3, r2
   c5322:	9309      	str	r3, [sp, #36]	; 0x24
   c5324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c5328:	eeb0 0a48 	vmov.f32	s0, s16
   c532c:	eef0 0a68 	vmov.f32	s1, s17
   c5330:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c5334:	f001 f838 	bl	c63a8 <__ulp>
   c5338:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c533c:	ec53 2b10 	vmov	r2, r3, d0
   c5340:	f7fe fd66 	bl	c3e10 <__aeabi_dmul>
   c5344:	ec53 2b18 	vmov	r2, r3, d8
   c5348:	f7fe fbac 	bl	c3aa4 <__adddf3>
   c534c:	4682      	mov	sl, r0
   c534e:	468b      	mov	fp, r1
   c5350:	e78d      	b.n	c526e <_strtod_l+0xab6>
   c5352:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c5356:	e7db      	b.n	c5310 <_strtod_l+0xb58>
   c5358:	a311      	add	r3, pc, #68	; (adr r3, c53a0 <_strtod_l+0xbe8>)
   c535a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c535e:	f7fe ffc9 	bl	c42f4 <__aeabi_dcmplt>
   c5362:	e7b2      	b.n	c52ca <_strtod_l+0xb12>
   c5364:	2300      	movs	r3, #0
   c5366:	930a      	str	r3, [sp, #40]	; 0x28
   c5368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c536a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c536c:	6013      	str	r3, [r2, #0]
   c536e:	f7ff ba6b 	b.w	c4848 <_strtod_l+0x90>
   c5372:	2a65      	cmp	r2, #101	; 0x65
   c5374:	f43f ab5f 	beq.w	c4a36 <_strtod_l+0x27e>
   c5378:	2a45      	cmp	r2, #69	; 0x45
   c537a:	f43f ab5c 	beq.w	c4a36 <_strtod_l+0x27e>
   c537e:	2301      	movs	r3, #1
   c5380:	f7ff bb94 	b.w	c4aac <_strtod_l+0x2f4>
   c5384:	f3af 8000 	nop.w
   c5388:	94a03595 	.word	0x94a03595
   c538c:	3fdfffff 	.word	0x3fdfffff
   c5390:	35afe535 	.word	0x35afe535
   c5394:	3fe00000 	.word	0x3fe00000
   c5398:	ffc00000 	.word	0xffc00000
   c539c:	41dfffff 	.word	0x41dfffff
   c53a0:	94a03595 	.word	0x94a03595
   c53a4:	3fcfffff 	.word	0x3fcfffff
   c53a8:	3ff00000 	.word	0x3ff00000
   c53ac:	7ff00000 	.word	0x7ff00000
   c53b0:	7fe00000 	.word	0x7fe00000
   c53b4:	7c9fffff 	.word	0x7c9fffff
   c53b8:	3fe00000 	.word	0x3fe00000
   c53bc:	bff00000 	.word	0xbff00000
   c53c0:	7fefffff 	.word	0x7fefffff

000c53c4 <strtod>:
   c53c4:	460a      	mov	r2, r1
   c53c6:	4601      	mov	r1, r0
   c53c8:	4802      	ldr	r0, [pc, #8]	; (c53d4 <strtod+0x10>)
   c53ca:	4b03      	ldr	r3, [pc, #12]	; (c53d8 <strtod+0x14>)
   c53cc:	6800      	ldr	r0, [r0, #0]
   c53ce:	f7ff b9f3 	b.w	c47b8 <_strtod_l>
   c53d2:	bf00      	nop
   c53d4:	2003db50 	.word	0x2003db50
   c53d8:	2003dbbc 	.word	0x2003dbbc

000c53dc <_strtol_l.constprop.0>:
   c53dc:	2b01      	cmp	r3, #1
   c53de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c53e2:	d001      	beq.n	c53e8 <_strtol_l.constprop.0+0xc>
   c53e4:	2b24      	cmp	r3, #36	; 0x24
   c53e6:	d906      	bls.n	c53f6 <_strtol_l.constprop.0+0x1a>
   c53e8:	f7f8 ff94 	bl	be314 <__errno>
   c53ec:	2316      	movs	r3, #22
   c53ee:	6003      	str	r3, [r0, #0]
   c53f0:	2000      	movs	r0, #0
   c53f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c53f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c54dc <_strtol_l.constprop.0+0x100>
   c53fa:	460d      	mov	r5, r1
   c53fc:	462e      	mov	r6, r5
   c53fe:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5402:	f814 700c 	ldrb.w	r7, [r4, ip]
   c5406:	f017 0708 	ands.w	r7, r7, #8
   c540a:	d1f7      	bne.n	c53fc <_strtol_l.constprop.0+0x20>
   c540c:	2c2d      	cmp	r4, #45	; 0x2d
   c540e:	d132      	bne.n	c5476 <_strtol_l.constprop.0+0x9a>
   c5410:	782c      	ldrb	r4, [r5, #0]
   c5412:	2701      	movs	r7, #1
   c5414:	1cb5      	adds	r5, r6, #2
   c5416:	2b00      	cmp	r3, #0
   c5418:	d05b      	beq.n	c54d2 <_strtol_l.constprop.0+0xf6>
   c541a:	2b10      	cmp	r3, #16
   c541c:	d109      	bne.n	c5432 <_strtol_l.constprop.0+0x56>
   c541e:	2c30      	cmp	r4, #48	; 0x30
   c5420:	d107      	bne.n	c5432 <_strtol_l.constprop.0+0x56>
   c5422:	782c      	ldrb	r4, [r5, #0]
   c5424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c5428:	2c58      	cmp	r4, #88	; 0x58
   c542a:	d14d      	bne.n	c54c8 <_strtol_l.constprop.0+0xec>
   c542c:	786c      	ldrb	r4, [r5, #1]
   c542e:	2310      	movs	r3, #16
   c5430:	3502      	adds	r5, #2
   c5432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c5436:	f108 38ff 	add.w	r8, r8, #4294967295
   c543a:	f04f 0c00 	mov.w	ip, #0
   c543e:	fbb8 f9f3 	udiv	r9, r8, r3
   c5442:	4666      	mov	r6, ip
   c5444:	fb03 8a19 	mls	sl, r3, r9, r8
   c5448:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c544c:	f1be 0f09 	cmp.w	lr, #9
   c5450:	d816      	bhi.n	c5480 <_strtol_l.constprop.0+0xa4>
   c5452:	4674      	mov	r4, lr
   c5454:	42a3      	cmp	r3, r4
   c5456:	dd24      	ble.n	c54a2 <_strtol_l.constprop.0+0xc6>
   c5458:	f1bc 0f00 	cmp.w	ip, #0
   c545c:	db1e      	blt.n	c549c <_strtol_l.constprop.0+0xc0>
   c545e:	45b1      	cmp	r9, r6
   c5460:	d31c      	bcc.n	c549c <_strtol_l.constprop.0+0xc0>
   c5462:	d101      	bne.n	c5468 <_strtol_l.constprop.0+0x8c>
   c5464:	45a2      	cmp	sl, r4
   c5466:	db19      	blt.n	c549c <_strtol_l.constprop.0+0xc0>
   c5468:	fb06 4603 	mla	r6, r6, r3, r4
   c546c:	f04f 0c01 	mov.w	ip, #1
   c5470:	f815 4b01 	ldrb.w	r4, [r5], #1
   c5474:	e7e8      	b.n	c5448 <_strtol_l.constprop.0+0x6c>
   c5476:	2c2b      	cmp	r4, #43	; 0x2b
   c5478:	bf04      	itt	eq
   c547a:	782c      	ldrbeq	r4, [r5, #0]
   c547c:	1cb5      	addeq	r5, r6, #2
   c547e:	e7ca      	b.n	c5416 <_strtol_l.constprop.0+0x3a>
   c5480:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c5484:	f1be 0f19 	cmp.w	lr, #25
   c5488:	d801      	bhi.n	c548e <_strtol_l.constprop.0+0xb2>
   c548a:	3c37      	subs	r4, #55	; 0x37
   c548c:	e7e2      	b.n	c5454 <_strtol_l.constprop.0+0x78>
   c548e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c5492:	f1be 0f19 	cmp.w	lr, #25
   c5496:	d804      	bhi.n	c54a2 <_strtol_l.constprop.0+0xc6>
   c5498:	3c57      	subs	r4, #87	; 0x57
   c549a:	e7db      	b.n	c5454 <_strtol_l.constprop.0+0x78>
   c549c:	f04f 3cff 	mov.w	ip, #4294967295
   c54a0:	e7e6      	b.n	c5470 <_strtol_l.constprop.0+0x94>
   c54a2:	f1bc 0f00 	cmp.w	ip, #0
   c54a6:	da05      	bge.n	c54b4 <_strtol_l.constprop.0+0xd8>
   c54a8:	2322      	movs	r3, #34	; 0x22
   c54aa:	6003      	str	r3, [r0, #0]
   c54ac:	4646      	mov	r6, r8
   c54ae:	b942      	cbnz	r2, c54c2 <_strtol_l.constprop.0+0xe6>
   c54b0:	4630      	mov	r0, r6
   c54b2:	e79e      	b.n	c53f2 <_strtol_l.constprop.0+0x16>
   c54b4:	b107      	cbz	r7, c54b8 <_strtol_l.constprop.0+0xdc>
   c54b6:	4276      	negs	r6, r6
   c54b8:	2a00      	cmp	r2, #0
   c54ba:	d0f9      	beq.n	c54b0 <_strtol_l.constprop.0+0xd4>
   c54bc:	f1bc 0f00 	cmp.w	ip, #0
   c54c0:	d000      	beq.n	c54c4 <_strtol_l.constprop.0+0xe8>
   c54c2:	1e69      	subs	r1, r5, #1
   c54c4:	6011      	str	r1, [r2, #0]
   c54c6:	e7f3      	b.n	c54b0 <_strtol_l.constprop.0+0xd4>
   c54c8:	2430      	movs	r4, #48	; 0x30
   c54ca:	2b00      	cmp	r3, #0
   c54cc:	d1b1      	bne.n	c5432 <_strtol_l.constprop.0+0x56>
   c54ce:	2308      	movs	r3, #8
   c54d0:	e7af      	b.n	c5432 <_strtol_l.constprop.0+0x56>
   c54d2:	2c30      	cmp	r4, #48	; 0x30
   c54d4:	d0a5      	beq.n	c5422 <_strtol_l.constprop.0+0x46>
   c54d6:	230a      	movs	r3, #10
   c54d8:	e7ab      	b.n	c5432 <_strtol_l.constprop.0+0x56>
   c54da:	bf00      	nop
   c54dc:	000c86d9 	.word	0x000c86d9

000c54e0 <strtol>:
   c54e0:	4613      	mov	r3, r2
   c54e2:	460a      	mov	r2, r1
   c54e4:	4601      	mov	r1, r0
   c54e6:	4802      	ldr	r0, [pc, #8]	; (c54f0 <strtol+0x10>)
   c54e8:	6800      	ldr	r0, [r0, #0]
   c54ea:	f7ff bf77 	b.w	c53dc <_strtol_l.constprop.0>
   c54ee:	bf00      	nop
   c54f0:	2003db50 	.word	0x2003db50

000c54f4 <__register_exitproc>:
   c54f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c54f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c55b4 <__register_exitproc+0xc0>
   c54fc:	4606      	mov	r6, r0
   c54fe:	f8d8 0000 	ldr.w	r0, [r8]
   c5502:	461f      	mov	r7, r3
   c5504:	460d      	mov	r5, r1
   c5506:	4691      	mov	r9, r2
   c5508:	f000 fbc6 	bl	c5c98 <__retarget_lock_acquire_recursive>
   c550c:	4b25      	ldr	r3, [pc, #148]	; (c55a4 <__register_exitproc+0xb0>)
   c550e:	681c      	ldr	r4, [r3, #0]
   c5510:	b934      	cbnz	r4, c5520 <__register_exitproc+0x2c>
   c5512:	4c25      	ldr	r4, [pc, #148]	; (c55a8 <__register_exitproc+0xb4>)
   c5514:	601c      	str	r4, [r3, #0]
   c5516:	4b25      	ldr	r3, [pc, #148]	; (c55ac <__register_exitproc+0xb8>)
   c5518:	b113      	cbz	r3, c5520 <__register_exitproc+0x2c>
   c551a:	681b      	ldr	r3, [r3, #0]
   c551c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c5520:	6863      	ldr	r3, [r4, #4]
   c5522:	2b1f      	cmp	r3, #31
   c5524:	dd07      	ble.n	c5536 <__register_exitproc+0x42>
   c5526:	f8d8 0000 	ldr.w	r0, [r8]
   c552a:	f000 fbb7 	bl	c5c9c <__retarget_lock_release_recursive>
   c552e:	f04f 30ff 	mov.w	r0, #4294967295
   c5532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5536:	b34e      	cbz	r6, c558c <__register_exitproc+0x98>
   c5538:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c553c:	b988      	cbnz	r0, c5562 <__register_exitproc+0x6e>
   c553e:	4b1c      	ldr	r3, [pc, #112]	; (c55b0 <__register_exitproc+0xbc>)
   c5540:	b923      	cbnz	r3, c554c <__register_exitproc+0x58>
   c5542:	f8d8 0000 	ldr.w	r0, [r8]
   c5546:	f000 fba8 	bl	c5c9a <__retarget_lock_release>
   c554a:	e7f0      	b.n	c552e <__register_exitproc+0x3a>
   c554c:	f44f 7084 	mov.w	r0, #264	; 0x108
   c5550:	f7f8 fe98 	bl	be284 <malloc>
   c5554:	2800      	cmp	r0, #0
   c5556:	d0f4      	beq.n	c5542 <__register_exitproc+0x4e>
   c5558:	2300      	movs	r3, #0
   c555a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c555e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c5562:	6863      	ldr	r3, [r4, #4]
   c5564:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c5568:	2201      	movs	r2, #1
   c556a:	409a      	lsls	r2, r3
   c556c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c5570:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c5574:	4313      	orrs	r3, r2
   c5576:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c557a:	2e02      	cmp	r6, #2
   c557c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c5580:	bf02      	ittt	eq
   c5582:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c5586:	4313      	orreq	r3, r2
   c5588:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c558c:	6863      	ldr	r3, [r4, #4]
   c558e:	f8d8 0000 	ldr.w	r0, [r8]
   c5592:	1c5a      	adds	r2, r3, #1
   c5594:	3302      	adds	r3, #2
   c5596:	6062      	str	r2, [r4, #4]
   c5598:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c559c:	f000 fb7e 	bl	c5c9c <__retarget_lock_release_recursive>
   c55a0:	2000      	movs	r0, #0
   c55a2:	e7c6      	b.n	c5532 <__register_exitproc+0x3e>
   c55a4:	2003e7e8 	.word	0x2003e7e8
   c55a8:	2003e75c 	.word	0x2003e75c
   c55ac:	00000000 	.word	0x00000000
   c55b0:	000be285 	.word	0x000be285
   c55b4:	2003dbb4 	.word	0x2003dbb4

000c55b8 <rshift>:
   c55b8:	6903      	ldr	r3, [r0, #16]
   c55ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c55be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c55c2:	ea4f 1261 	mov.w	r2, r1, asr #5
   c55c6:	f100 0414 	add.w	r4, r0, #20
   c55ca:	dd45      	ble.n	c5658 <rshift+0xa0>
   c55cc:	f011 011f 	ands.w	r1, r1, #31
   c55d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c55d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c55d8:	d10c      	bne.n	c55f4 <rshift+0x3c>
   c55da:	f100 0710 	add.w	r7, r0, #16
   c55de:	4629      	mov	r1, r5
   c55e0:	42b1      	cmp	r1, r6
   c55e2:	d334      	bcc.n	c564e <rshift+0x96>
   c55e4:	1a9b      	subs	r3, r3, r2
   c55e6:	009b      	lsls	r3, r3, #2
   c55e8:	1eea      	subs	r2, r5, #3
   c55ea:	4296      	cmp	r6, r2
   c55ec:	bf38      	it	cc
   c55ee:	2300      	movcc	r3, #0
   c55f0:	4423      	add	r3, r4
   c55f2:	e015      	b.n	c5620 <rshift+0x68>
   c55f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c55f8:	f1c1 0820 	rsb	r8, r1, #32
   c55fc:	40cf      	lsrs	r7, r1
   c55fe:	f105 0e04 	add.w	lr, r5, #4
   c5602:	46a1      	mov	r9, r4
   c5604:	4576      	cmp	r6, lr
   c5606:	46f4      	mov	ip, lr
   c5608:	d815      	bhi.n	c5636 <rshift+0x7e>
   c560a:	1a9a      	subs	r2, r3, r2
   c560c:	0092      	lsls	r2, r2, #2
   c560e:	3a04      	subs	r2, #4
   c5610:	3501      	adds	r5, #1
   c5612:	42ae      	cmp	r6, r5
   c5614:	bf38      	it	cc
   c5616:	2200      	movcc	r2, #0
   c5618:	18a3      	adds	r3, r4, r2
   c561a:	50a7      	str	r7, [r4, r2]
   c561c:	b107      	cbz	r7, c5620 <rshift+0x68>
   c561e:	3304      	adds	r3, #4
   c5620:	1b1a      	subs	r2, r3, r4
   c5622:	42a3      	cmp	r3, r4
   c5624:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c5628:	bf08      	it	eq
   c562a:	2300      	moveq	r3, #0
   c562c:	6102      	str	r2, [r0, #16]
   c562e:	bf08      	it	eq
   c5630:	6143      	streq	r3, [r0, #20]
   c5632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c5636:	f8dc c000 	ldr.w	ip, [ip]
   c563a:	fa0c fc08 	lsl.w	ip, ip, r8
   c563e:	ea4c 0707 	orr.w	r7, ip, r7
   c5642:	f849 7b04 	str.w	r7, [r9], #4
   c5646:	f85e 7b04 	ldr.w	r7, [lr], #4
   c564a:	40cf      	lsrs	r7, r1
   c564c:	e7da      	b.n	c5604 <rshift+0x4c>
   c564e:	f851 cb04 	ldr.w	ip, [r1], #4
   c5652:	f847 cf04 	str.w	ip, [r7, #4]!
   c5656:	e7c3      	b.n	c55e0 <rshift+0x28>
   c5658:	4623      	mov	r3, r4
   c565a:	e7e1      	b.n	c5620 <rshift+0x68>

000c565c <__hexdig_fun>:
   c565c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c5660:	2b09      	cmp	r3, #9
   c5662:	d802      	bhi.n	c566a <__hexdig_fun+0xe>
   c5664:	3820      	subs	r0, #32
   c5666:	b2c0      	uxtb	r0, r0
   c5668:	4770      	bx	lr
   c566a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c566e:	2b05      	cmp	r3, #5
   c5670:	d801      	bhi.n	c5676 <__hexdig_fun+0x1a>
   c5672:	3847      	subs	r0, #71	; 0x47
   c5674:	e7f7      	b.n	c5666 <__hexdig_fun+0xa>
   c5676:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c567a:	2b05      	cmp	r3, #5
   c567c:	d801      	bhi.n	c5682 <__hexdig_fun+0x26>
   c567e:	3827      	subs	r0, #39	; 0x27
   c5680:	e7f1      	b.n	c5666 <__hexdig_fun+0xa>
   c5682:	2000      	movs	r0, #0
   c5684:	4770      	bx	lr
	...

000c5688 <__gethex>:
   c5688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c568c:	ed2d 8b02 	vpush	{d8}
   c5690:	b089      	sub	sp, #36	; 0x24
   c5692:	ee08 0a10 	vmov	s16, r0
   c5696:	9304      	str	r3, [sp, #16]
   c5698:	4bb4      	ldr	r3, [pc, #720]	; (c596c <__gethex+0x2e4>)
   c569a:	681b      	ldr	r3, [r3, #0]
   c569c:	9301      	str	r3, [sp, #4]
   c569e:	4618      	mov	r0, r3
   c56a0:	468b      	mov	fp, r1
   c56a2:	4690      	mov	r8, r2
   c56a4:	f7fe fff3 	bl	c468e <strlen>
   c56a8:	9b01      	ldr	r3, [sp, #4]
   c56aa:	f8db 2000 	ldr.w	r2, [fp]
   c56ae:	4403      	add	r3, r0
   c56b0:	4682      	mov	sl, r0
   c56b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c56b6:	9305      	str	r3, [sp, #20]
   c56b8:	1c93      	adds	r3, r2, #2
   c56ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c56be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c56c2:	32fe      	adds	r2, #254	; 0xfe
   c56c4:	18d1      	adds	r1, r2, r3
   c56c6:	461f      	mov	r7, r3
   c56c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   c56cc:	9100      	str	r1, [sp, #0]
   c56ce:	2830      	cmp	r0, #48	; 0x30
   c56d0:	d0f8      	beq.n	c56c4 <__gethex+0x3c>
   c56d2:	f7ff ffc3 	bl	c565c <__hexdig_fun>
   c56d6:	4604      	mov	r4, r0
   c56d8:	2800      	cmp	r0, #0
   c56da:	d13a      	bne.n	c5752 <__gethex+0xca>
   c56dc:	9901      	ldr	r1, [sp, #4]
   c56de:	4652      	mov	r2, sl
   c56e0:	4638      	mov	r0, r7
   c56e2:	f7fe ffef 	bl	c46c4 <strncmp>
   c56e6:	4605      	mov	r5, r0
   c56e8:	2800      	cmp	r0, #0
   c56ea:	d168      	bne.n	c57be <__gethex+0x136>
   c56ec:	f817 000a 	ldrb.w	r0, [r7, sl]
   c56f0:	eb07 060a 	add.w	r6, r7, sl
   c56f4:	f7ff ffb2 	bl	c565c <__hexdig_fun>
   c56f8:	2800      	cmp	r0, #0
   c56fa:	d062      	beq.n	c57c2 <__gethex+0x13a>
   c56fc:	4633      	mov	r3, r6
   c56fe:	7818      	ldrb	r0, [r3, #0]
   c5700:	2830      	cmp	r0, #48	; 0x30
   c5702:	461f      	mov	r7, r3
   c5704:	f103 0301 	add.w	r3, r3, #1
   c5708:	d0f9      	beq.n	c56fe <__gethex+0x76>
   c570a:	f7ff ffa7 	bl	c565c <__hexdig_fun>
   c570e:	2301      	movs	r3, #1
   c5710:	fab0 f480 	clz	r4, r0
   c5714:	0964      	lsrs	r4, r4, #5
   c5716:	4635      	mov	r5, r6
   c5718:	9300      	str	r3, [sp, #0]
   c571a:	463a      	mov	r2, r7
   c571c:	4616      	mov	r6, r2
   c571e:	3201      	adds	r2, #1
   c5720:	7830      	ldrb	r0, [r6, #0]
   c5722:	f7ff ff9b 	bl	c565c <__hexdig_fun>
   c5726:	2800      	cmp	r0, #0
   c5728:	d1f8      	bne.n	c571c <__gethex+0x94>
   c572a:	9901      	ldr	r1, [sp, #4]
   c572c:	4652      	mov	r2, sl
   c572e:	4630      	mov	r0, r6
   c5730:	f7fe ffc8 	bl	c46c4 <strncmp>
   c5734:	b980      	cbnz	r0, c5758 <__gethex+0xd0>
   c5736:	b94d      	cbnz	r5, c574c <__gethex+0xc4>
   c5738:	eb06 050a 	add.w	r5, r6, sl
   c573c:	462a      	mov	r2, r5
   c573e:	4616      	mov	r6, r2
   c5740:	3201      	adds	r2, #1
   c5742:	7830      	ldrb	r0, [r6, #0]
   c5744:	f7ff ff8a 	bl	c565c <__hexdig_fun>
   c5748:	2800      	cmp	r0, #0
   c574a:	d1f8      	bne.n	c573e <__gethex+0xb6>
   c574c:	1bad      	subs	r5, r5, r6
   c574e:	00ad      	lsls	r5, r5, #2
   c5750:	e004      	b.n	c575c <__gethex+0xd4>
   c5752:	2400      	movs	r4, #0
   c5754:	4625      	mov	r5, r4
   c5756:	e7e0      	b.n	c571a <__gethex+0x92>
   c5758:	2d00      	cmp	r5, #0
   c575a:	d1f7      	bne.n	c574c <__gethex+0xc4>
   c575c:	7833      	ldrb	r3, [r6, #0]
   c575e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c5762:	2b50      	cmp	r3, #80	; 0x50
   c5764:	d13b      	bne.n	c57de <__gethex+0x156>
   c5766:	7873      	ldrb	r3, [r6, #1]
   c5768:	2b2b      	cmp	r3, #43	; 0x2b
   c576a:	d02c      	beq.n	c57c6 <__gethex+0x13e>
   c576c:	2b2d      	cmp	r3, #45	; 0x2d
   c576e:	d02e      	beq.n	c57ce <__gethex+0x146>
   c5770:	1c71      	adds	r1, r6, #1
   c5772:	f04f 0900 	mov.w	r9, #0
   c5776:	7808      	ldrb	r0, [r1, #0]
   c5778:	f7ff ff70 	bl	c565c <__hexdig_fun>
   c577c:	1e43      	subs	r3, r0, #1
   c577e:	b2db      	uxtb	r3, r3
   c5780:	2b18      	cmp	r3, #24
   c5782:	d82c      	bhi.n	c57de <__gethex+0x156>
   c5784:	f1a0 0210 	sub.w	r2, r0, #16
   c5788:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c578c:	f7ff ff66 	bl	c565c <__hexdig_fun>
   c5790:	1e43      	subs	r3, r0, #1
   c5792:	b2db      	uxtb	r3, r3
   c5794:	2b18      	cmp	r3, #24
   c5796:	d91d      	bls.n	c57d4 <__gethex+0x14c>
   c5798:	f1b9 0f00 	cmp.w	r9, #0
   c579c:	d000      	beq.n	c57a0 <__gethex+0x118>
   c579e:	4252      	negs	r2, r2
   c57a0:	4415      	add	r5, r2
   c57a2:	f8cb 1000 	str.w	r1, [fp]
   c57a6:	b1e4      	cbz	r4, c57e2 <__gethex+0x15a>
   c57a8:	9b00      	ldr	r3, [sp, #0]
   c57aa:	2b00      	cmp	r3, #0
   c57ac:	bf14      	ite	ne
   c57ae:	2700      	movne	r7, #0
   c57b0:	2706      	moveq	r7, #6
   c57b2:	4638      	mov	r0, r7
   c57b4:	b009      	add	sp, #36	; 0x24
   c57b6:	ecbd 8b02 	vpop	{d8}
   c57ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c57be:	463e      	mov	r6, r7
   c57c0:	4625      	mov	r5, r4
   c57c2:	2401      	movs	r4, #1
   c57c4:	e7ca      	b.n	c575c <__gethex+0xd4>
   c57c6:	f04f 0900 	mov.w	r9, #0
   c57ca:	1cb1      	adds	r1, r6, #2
   c57cc:	e7d3      	b.n	c5776 <__gethex+0xee>
   c57ce:	f04f 0901 	mov.w	r9, #1
   c57d2:	e7fa      	b.n	c57ca <__gethex+0x142>
   c57d4:	230a      	movs	r3, #10
   c57d6:	fb03 0202 	mla	r2, r3, r2, r0
   c57da:	3a10      	subs	r2, #16
   c57dc:	e7d4      	b.n	c5788 <__gethex+0x100>
   c57de:	4631      	mov	r1, r6
   c57e0:	e7df      	b.n	c57a2 <__gethex+0x11a>
   c57e2:	1bf3      	subs	r3, r6, r7
   c57e4:	3b01      	subs	r3, #1
   c57e6:	4621      	mov	r1, r4
   c57e8:	2b07      	cmp	r3, #7
   c57ea:	dc0b      	bgt.n	c5804 <__gethex+0x17c>
   c57ec:	ee18 0a10 	vmov	r0, s16
   c57f0:	f000 fa68 	bl	c5cc4 <_Balloc>
   c57f4:	4604      	mov	r4, r0
   c57f6:	b940      	cbnz	r0, c580a <__gethex+0x182>
   c57f8:	4b5d      	ldr	r3, [pc, #372]	; (c5970 <__gethex+0x2e8>)
   c57fa:	4602      	mov	r2, r0
   c57fc:	21de      	movs	r1, #222	; 0xde
   c57fe:	485d      	ldr	r0, [pc, #372]	; (c5974 <__gethex+0x2ec>)
   c5800:	f7f8 fd90 	bl	be324 <__assert_func>
   c5804:	3101      	adds	r1, #1
   c5806:	105b      	asrs	r3, r3, #1
   c5808:	e7ee      	b.n	c57e8 <__gethex+0x160>
   c580a:	f100 0914 	add.w	r9, r0, #20
   c580e:	f04f 0b00 	mov.w	fp, #0
   c5812:	f1ca 0301 	rsb	r3, sl, #1
   c5816:	f8cd 9008 	str.w	r9, [sp, #8]
   c581a:	f8cd b000 	str.w	fp, [sp]
   c581e:	9306      	str	r3, [sp, #24]
   c5820:	42b7      	cmp	r7, r6
   c5822:	d340      	bcc.n	c58a6 <__gethex+0x21e>
   c5824:	9802      	ldr	r0, [sp, #8]
   c5826:	9b00      	ldr	r3, [sp, #0]
   c5828:	f840 3b04 	str.w	r3, [r0], #4
   c582c:	eba0 0009 	sub.w	r0, r0, r9
   c5830:	1080      	asrs	r0, r0, #2
   c5832:	0146      	lsls	r6, r0, #5
   c5834:	6120      	str	r0, [r4, #16]
   c5836:	4618      	mov	r0, r3
   c5838:	f000 fb36 	bl	c5ea8 <__hi0bits>
   c583c:	1a30      	subs	r0, r6, r0
   c583e:	f8d8 6000 	ldr.w	r6, [r8]
   c5842:	42b0      	cmp	r0, r6
   c5844:	dd63      	ble.n	c590e <__gethex+0x286>
   c5846:	1b87      	subs	r7, r0, r6
   c5848:	4639      	mov	r1, r7
   c584a:	4620      	mov	r0, r4
   c584c:	f000 feda 	bl	c6604 <__any_on>
   c5850:	4682      	mov	sl, r0
   c5852:	b1a8      	cbz	r0, c5880 <__gethex+0x1f8>
   c5854:	1e7b      	subs	r3, r7, #1
   c5856:	1159      	asrs	r1, r3, #5
   c5858:	f003 021f 	and.w	r2, r3, #31
   c585c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c5860:	f04f 0a01 	mov.w	sl, #1
   c5864:	fa0a f202 	lsl.w	r2, sl, r2
   c5868:	420a      	tst	r2, r1
   c586a:	d009      	beq.n	c5880 <__gethex+0x1f8>
   c586c:	4553      	cmp	r3, sl
   c586e:	dd05      	ble.n	c587c <__gethex+0x1f4>
   c5870:	1eb9      	subs	r1, r7, #2
   c5872:	4620      	mov	r0, r4
   c5874:	f000 fec6 	bl	c6604 <__any_on>
   c5878:	2800      	cmp	r0, #0
   c587a:	d145      	bne.n	c5908 <__gethex+0x280>
   c587c:	f04f 0a02 	mov.w	sl, #2
   c5880:	4639      	mov	r1, r7
   c5882:	4620      	mov	r0, r4
   c5884:	f7ff fe98 	bl	c55b8 <rshift>
   c5888:	443d      	add	r5, r7
   c588a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c588e:	42ab      	cmp	r3, r5
   c5890:	da4c      	bge.n	c592c <__gethex+0x2a4>
   c5892:	ee18 0a10 	vmov	r0, s16
   c5896:	4621      	mov	r1, r4
   c5898:	f000 fa54 	bl	c5d44 <_Bfree>
   c589c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c589e:	2300      	movs	r3, #0
   c58a0:	6013      	str	r3, [r2, #0]
   c58a2:	27a3      	movs	r7, #163	; 0xa3
   c58a4:	e785      	b.n	c57b2 <__gethex+0x12a>
   c58a6:	1e73      	subs	r3, r6, #1
   c58a8:	9a05      	ldr	r2, [sp, #20]
   c58aa:	9303      	str	r3, [sp, #12]
   c58ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c58b0:	4293      	cmp	r3, r2
   c58b2:	d019      	beq.n	c58e8 <__gethex+0x260>
   c58b4:	f1bb 0f20 	cmp.w	fp, #32
   c58b8:	d107      	bne.n	c58ca <__gethex+0x242>
   c58ba:	9b02      	ldr	r3, [sp, #8]
   c58bc:	9a00      	ldr	r2, [sp, #0]
   c58be:	f843 2b04 	str.w	r2, [r3], #4
   c58c2:	9302      	str	r3, [sp, #8]
   c58c4:	2300      	movs	r3, #0
   c58c6:	9300      	str	r3, [sp, #0]
   c58c8:	469b      	mov	fp, r3
   c58ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c58ce:	f7ff fec5 	bl	c565c <__hexdig_fun>
   c58d2:	9b00      	ldr	r3, [sp, #0]
   c58d4:	f000 000f 	and.w	r0, r0, #15
   c58d8:	fa00 f00b 	lsl.w	r0, r0, fp
   c58dc:	4303      	orrs	r3, r0
   c58de:	9300      	str	r3, [sp, #0]
   c58e0:	f10b 0b04 	add.w	fp, fp, #4
   c58e4:	9b03      	ldr	r3, [sp, #12]
   c58e6:	e00d      	b.n	c5904 <__gethex+0x27c>
   c58e8:	9b03      	ldr	r3, [sp, #12]
   c58ea:	9a06      	ldr	r2, [sp, #24]
   c58ec:	4413      	add	r3, r2
   c58ee:	42bb      	cmp	r3, r7
   c58f0:	d3e0      	bcc.n	c58b4 <__gethex+0x22c>
   c58f2:	4618      	mov	r0, r3
   c58f4:	9901      	ldr	r1, [sp, #4]
   c58f6:	9307      	str	r3, [sp, #28]
   c58f8:	4652      	mov	r2, sl
   c58fa:	f7fe fee3 	bl	c46c4 <strncmp>
   c58fe:	9b07      	ldr	r3, [sp, #28]
   c5900:	2800      	cmp	r0, #0
   c5902:	d1d7      	bne.n	c58b4 <__gethex+0x22c>
   c5904:	461e      	mov	r6, r3
   c5906:	e78b      	b.n	c5820 <__gethex+0x198>
   c5908:	f04f 0a03 	mov.w	sl, #3
   c590c:	e7b8      	b.n	c5880 <__gethex+0x1f8>
   c590e:	da0a      	bge.n	c5926 <__gethex+0x29e>
   c5910:	1a37      	subs	r7, r6, r0
   c5912:	4621      	mov	r1, r4
   c5914:	ee18 0a10 	vmov	r0, s16
   c5918:	463a      	mov	r2, r7
   c591a:	f000 fc2f 	bl	c617c <__lshift>
   c591e:	1bed      	subs	r5, r5, r7
   c5920:	4604      	mov	r4, r0
   c5922:	f100 0914 	add.w	r9, r0, #20
   c5926:	f04f 0a00 	mov.w	sl, #0
   c592a:	e7ae      	b.n	c588a <__gethex+0x202>
   c592c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c5930:	42a8      	cmp	r0, r5
   c5932:	dd72      	ble.n	c5a1a <__gethex+0x392>
   c5934:	1b45      	subs	r5, r0, r5
   c5936:	42ae      	cmp	r6, r5
   c5938:	dc36      	bgt.n	c59a8 <__gethex+0x320>
   c593a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c593e:	2b02      	cmp	r3, #2
   c5940:	d02a      	beq.n	c5998 <__gethex+0x310>
   c5942:	2b03      	cmp	r3, #3
   c5944:	d02c      	beq.n	c59a0 <__gethex+0x318>
   c5946:	2b01      	cmp	r3, #1
   c5948:	d11c      	bne.n	c5984 <__gethex+0x2fc>
   c594a:	42ae      	cmp	r6, r5
   c594c:	d11a      	bne.n	c5984 <__gethex+0x2fc>
   c594e:	2e01      	cmp	r6, #1
   c5950:	d112      	bne.n	c5978 <__gethex+0x2f0>
   c5952:	9a04      	ldr	r2, [sp, #16]
   c5954:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c5958:	6013      	str	r3, [r2, #0]
   c595a:	2301      	movs	r3, #1
   c595c:	6123      	str	r3, [r4, #16]
   c595e:	f8c9 3000 	str.w	r3, [r9]
   c5962:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5964:	2762      	movs	r7, #98	; 0x62
   c5966:	601c      	str	r4, [r3, #0]
   c5968:	e723      	b.n	c57b2 <__gethex+0x12a>
   c596a:	bf00      	nop
   c596c:	000c8870 	.word	0x000c8870
   c5970:	000c87d9 	.word	0x000c87d9
   c5974:	000c87ea 	.word	0x000c87ea
   c5978:	1e71      	subs	r1, r6, #1
   c597a:	4620      	mov	r0, r4
   c597c:	f000 fe42 	bl	c6604 <__any_on>
   c5980:	2800      	cmp	r0, #0
   c5982:	d1e6      	bne.n	c5952 <__gethex+0x2ca>
   c5984:	ee18 0a10 	vmov	r0, s16
   c5988:	4621      	mov	r1, r4
   c598a:	f000 f9db 	bl	c5d44 <_Bfree>
   c598e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c5990:	2300      	movs	r3, #0
   c5992:	6013      	str	r3, [r2, #0]
   c5994:	2750      	movs	r7, #80	; 0x50
   c5996:	e70c      	b.n	c57b2 <__gethex+0x12a>
   c5998:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c599a:	2b00      	cmp	r3, #0
   c599c:	d1f2      	bne.n	c5984 <__gethex+0x2fc>
   c599e:	e7d8      	b.n	c5952 <__gethex+0x2ca>
   c59a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c59a2:	2b00      	cmp	r3, #0
   c59a4:	d1d5      	bne.n	c5952 <__gethex+0x2ca>
   c59a6:	e7ed      	b.n	c5984 <__gethex+0x2fc>
   c59a8:	1e6f      	subs	r7, r5, #1
   c59aa:	f1ba 0f00 	cmp.w	sl, #0
   c59ae:	d131      	bne.n	c5a14 <__gethex+0x38c>
   c59b0:	b127      	cbz	r7, c59bc <__gethex+0x334>
   c59b2:	4639      	mov	r1, r7
   c59b4:	4620      	mov	r0, r4
   c59b6:	f000 fe25 	bl	c6604 <__any_on>
   c59ba:	4682      	mov	sl, r0
   c59bc:	117b      	asrs	r3, r7, #5
   c59be:	2101      	movs	r1, #1
   c59c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c59c4:	f007 071f 	and.w	r7, r7, #31
   c59c8:	fa01 f707 	lsl.w	r7, r1, r7
   c59cc:	421f      	tst	r7, r3
   c59ce:	4629      	mov	r1, r5
   c59d0:	4620      	mov	r0, r4
   c59d2:	bf18      	it	ne
   c59d4:	f04a 0a02 	orrne.w	sl, sl, #2
   c59d8:	1b76      	subs	r6, r6, r5
   c59da:	f7ff fded 	bl	c55b8 <rshift>
   c59de:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c59e2:	2702      	movs	r7, #2
   c59e4:	f1ba 0f00 	cmp.w	sl, #0
   c59e8:	d048      	beq.n	c5a7c <__gethex+0x3f4>
   c59ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c59ee:	2b02      	cmp	r3, #2
   c59f0:	d015      	beq.n	c5a1e <__gethex+0x396>
   c59f2:	2b03      	cmp	r3, #3
   c59f4:	d017      	beq.n	c5a26 <__gethex+0x39e>
   c59f6:	2b01      	cmp	r3, #1
   c59f8:	d109      	bne.n	c5a0e <__gethex+0x386>
   c59fa:	f01a 0f02 	tst.w	sl, #2
   c59fe:	d006      	beq.n	c5a0e <__gethex+0x386>
   c5a00:	f8d9 0000 	ldr.w	r0, [r9]
   c5a04:	ea4a 0a00 	orr.w	sl, sl, r0
   c5a08:	f01a 0f01 	tst.w	sl, #1
   c5a0c:	d10e      	bne.n	c5a2c <__gethex+0x3a4>
   c5a0e:	f047 0710 	orr.w	r7, r7, #16
   c5a12:	e033      	b.n	c5a7c <__gethex+0x3f4>
   c5a14:	f04f 0a01 	mov.w	sl, #1
   c5a18:	e7d0      	b.n	c59bc <__gethex+0x334>
   c5a1a:	2701      	movs	r7, #1
   c5a1c:	e7e2      	b.n	c59e4 <__gethex+0x35c>
   c5a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a20:	f1c3 0301 	rsb	r3, r3, #1
   c5a24:	9315      	str	r3, [sp, #84]	; 0x54
   c5a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c5a28:	2b00      	cmp	r3, #0
   c5a2a:	d0f0      	beq.n	c5a0e <__gethex+0x386>
   c5a2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c5a30:	f104 0314 	add.w	r3, r4, #20
   c5a34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c5a38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c5a3c:	f04f 0c00 	mov.w	ip, #0
   c5a40:	4618      	mov	r0, r3
   c5a42:	f853 2b04 	ldr.w	r2, [r3], #4
   c5a46:	f1b2 3fff 	cmp.w	r2, #4294967295
   c5a4a:	d01c      	beq.n	c5a86 <__gethex+0x3fe>
   c5a4c:	3201      	adds	r2, #1
   c5a4e:	6002      	str	r2, [r0, #0]
   c5a50:	2f02      	cmp	r7, #2
   c5a52:	f104 0314 	add.w	r3, r4, #20
   c5a56:	d13f      	bne.n	c5ad8 <__gethex+0x450>
   c5a58:	f8d8 2000 	ldr.w	r2, [r8]
   c5a5c:	3a01      	subs	r2, #1
   c5a5e:	42b2      	cmp	r2, r6
   c5a60:	d10a      	bne.n	c5a78 <__gethex+0x3f0>
   c5a62:	1171      	asrs	r1, r6, #5
   c5a64:	2201      	movs	r2, #1
   c5a66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c5a6a:	f006 061f 	and.w	r6, r6, #31
   c5a6e:	fa02 f606 	lsl.w	r6, r2, r6
   c5a72:	421e      	tst	r6, r3
   c5a74:	bf18      	it	ne
   c5a76:	4617      	movne	r7, r2
   c5a78:	f047 0720 	orr.w	r7, r7, #32
   c5a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c5a7e:	601c      	str	r4, [r3, #0]
   c5a80:	9b04      	ldr	r3, [sp, #16]
   c5a82:	601d      	str	r5, [r3, #0]
   c5a84:	e695      	b.n	c57b2 <__gethex+0x12a>
   c5a86:	4299      	cmp	r1, r3
   c5a88:	f843 cc04 	str.w	ip, [r3, #-4]
   c5a8c:	d8d8      	bhi.n	c5a40 <__gethex+0x3b8>
   c5a8e:	68a3      	ldr	r3, [r4, #8]
   c5a90:	459b      	cmp	fp, r3
   c5a92:	db19      	blt.n	c5ac8 <__gethex+0x440>
   c5a94:	6861      	ldr	r1, [r4, #4]
   c5a96:	ee18 0a10 	vmov	r0, s16
   c5a9a:	3101      	adds	r1, #1
   c5a9c:	f000 f912 	bl	c5cc4 <_Balloc>
   c5aa0:	4681      	mov	r9, r0
   c5aa2:	b918      	cbnz	r0, c5aac <__gethex+0x424>
   c5aa4:	4b1a      	ldr	r3, [pc, #104]	; (c5b10 <__gethex+0x488>)
   c5aa6:	4602      	mov	r2, r0
   c5aa8:	2184      	movs	r1, #132	; 0x84
   c5aaa:	e6a8      	b.n	c57fe <__gethex+0x176>
   c5aac:	6922      	ldr	r2, [r4, #16]
   c5aae:	3202      	adds	r2, #2
   c5ab0:	f104 010c 	add.w	r1, r4, #12
   c5ab4:	0092      	lsls	r2, r2, #2
   c5ab6:	300c      	adds	r0, #12
   c5ab8:	f7fe fd36 	bl	c4528 <memcpy>
   c5abc:	4621      	mov	r1, r4
   c5abe:	ee18 0a10 	vmov	r0, s16
   c5ac2:	f000 f93f 	bl	c5d44 <_Bfree>
   c5ac6:	464c      	mov	r4, r9
   c5ac8:	6923      	ldr	r3, [r4, #16]
   c5aca:	1c5a      	adds	r2, r3, #1
   c5acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c5ad0:	6122      	str	r2, [r4, #16]
   c5ad2:	2201      	movs	r2, #1
   c5ad4:	615a      	str	r2, [r3, #20]
   c5ad6:	e7bb      	b.n	c5a50 <__gethex+0x3c8>
   c5ad8:	6922      	ldr	r2, [r4, #16]
   c5ada:	455a      	cmp	r2, fp
   c5adc:	dd0b      	ble.n	c5af6 <__gethex+0x46e>
   c5ade:	2101      	movs	r1, #1
   c5ae0:	4620      	mov	r0, r4
   c5ae2:	f7ff fd69 	bl	c55b8 <rshift>
   c5ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c5aea:	3501      	adds	r5, #1
   c5aec:	42ab      	cmp	r3, r5
   c5aee:	f6ff aed0 	blt.w	c5892 <__gethex+0x20a>
   c5af2:	2701      	movs	r7, #1
   c5af4:	e7c0      	b.n	c5a78 <__gethex+0x3f0>
   c5af6:	f016 061f 	ands.w	r6, r6, #31
   c5afa:	d0fa      	beq.n	c5af2 <__gethex+0x46a>
   c5afc:	4453      	add	r3, sl
   c5afe:	f1c6 0620 	rsb	r6, r6, #32
   c5b02:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c5b06:	f000 f9cf 	bl	c5ea8 <__hi0bits>
   c5b0a:	42b0      	cmp	r0, r6
   c5b0c:	dbe7      	blt.n	c5ade <__gethex+0x456>
   c5b0e:	e7f0      	b.n	c5af2 <__gethex+0x46a>
   c5b10:	000c87d9 	.word	0x000c87d9

000c5b14 <L_shift>:
   c5b14:	f1c2 0208 	rsb	r2, r2, #8
   c5b18:	0092      	lsls	r2, r2, #2
   c5b1a:	b570      	push	{r4, r5, r6, lr}
   c5b1c:	f1c2 0620 	rsb	r6, r2, #32
   c5b20:	6843      	ldr	r3, [r0, #4]
   c5b22:	6804      	ldr	r4, [r0, #0]
   c5b24:	fa03 f506 	lsl.w	r5, r3, r6
   c5b28:	432c      	orrs	r4, r5
   c5b2a:	40d3      	lsrs	r3, r2
   c5b2c:	6004      	str	r4, [r0, #0]
   c5b2e:	f840 3f04 	str.w	r3, [r0, #4]!
   c5b32:	4288      	cmp	r0, r1
   c5b34:	d3f4      	bcc.n	c5b20 <L_shift+0xc>
   c5b36:	bd70      	pop	{r4, r5, r6, pc}

000c5b38 <__match>:
   c5b38:	b530      	push	{r4, r5, lr}
   c5b3a:	6803      	ldr	r3, [r0, #0]
   c5b3c:	3301      	adds	r3, #1
   c5b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   c5b42:	b914      	cbnz	r4, c5b4a <__match+0x12>
   c5b44:	6003      	str	r3, [r0, #0]
   c5b46:	2001      	movs	r0, #1
   c5b48:	bd30      	pop	{r4, r5, pc}
   c5b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
   c5b4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c5b52:	2d19      	cmp	r5, #25
   c5b54:	bf98      	it	ls
   c5b56:	3220      	addls	r2, #32
   c5b58:	42a2      	cmp	r2, r4
   c5b5a:	d0f0      	beq.n	c5b3e <__match+0x6>
   c5b5c:	2000      	movs	r0, #0
   c5b5e:	e7f3      	b.n	c5b48 <__match+0x10>

000c5b60 <__hexnan>:
   c5b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5b64:	680b      	ldr	r3, [r1, #0]
   c5b66:	115e      	asrs	r6, r3, #5
   c5b68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c5b6c:	f013 031f 	ands.w	r3, r3, #31
   c5b70:	b087      	sub	sp, #28
   c5b72:	bf18      	it	ne
   c5b74:	3604      	addne	r6, #4
   c5b76:	2500      	movs	r5, #0
   c5b78:	1f37      	subs	r7, r6, #4
   c5b7a:	4690      	mov	r8, r2
   c5b7c:	6802      	ldr	r2, [r0, #0]
   c5b7e:	9301      	str	r3, [sp, #4]
   c5b80:	4682      	mov	sl, r0
   c5b82:	f846 5c04 	str.w	r5, [r6, #-4]
   c5b86:	46b9      	mov	r9, r7
   c5b88:	463c      	mov	r4, r7
   c5b8a:	9502      	str	r5, [sp, #8]
   c5b8c:	46ab      	mov	fp, r5
   c5b8e:	7851      	ldrb	r1, [r2, #1]
   c5b90:	1c53      	adds	r3, r2, #1
   c5b92:	9303      	str	r3, [sp, #12]
   c5b94:	b341      	cbz	r1, c5be8 <__hexnan+0x88>
   c5b96:	4608      	mov	r0, r1
   c5b98:	9205      	str	r2, [sp, #20]
   c5b9a:	9104      	str	r1, [sp, #16]
   c5b9c:	f7ff fd5e 	bl	c565c <__hexdig_fun>
   c5ba0:	2800      	cmp	r0, #0
   c5ba2:	d14f      	bne.n	c5c44 <__hexnan+0xe4>
   c5ba4:	9904      	ldr	r1, [sp, #16]
   c5ba6:	9a05      	ldr	r2, [sp, #20]
   c5ba8:	2920      	cmp	r1, #32
   c5baa:	d818      	bhi.n	c5bde <__hexnan+0x7e>
   c5bac:	9b02      	ldr	r3, [sp, #8]
   c5bae:	459b      	cmp	fp, r3
   c5bb0:	dd13      	ble.n	c5bda <__hexnan+0x7a>
   c5bb2:	454c      	cmp	r4, r9
   c5bb4:	d206      	bcs.n	c5bc4 <__hexnan+0x64>
   c5bb6:	2d07      	cmp	r5, #7
   c5bb8:	dc04      	bgt.n	c5bc4 <__hexnan+0x64>
   c5bba:	462a      	mov	r2, r5
   c5bbc:	4649      	mov	r1, r9
   c5bbe:	4620      	mov	r0, r4
   c5bc0:	f7ff ffa8 	bl	c5b14 <L_shift>
   c5bc4:	4544      	cmp	r4, r8
   c5bc6:	d950      	bls.n	c5c6a <__hexnan+0x10a>
   c5bc8:	2300      	movs	r3, #0
   c5bca:	f1a4 0904 	sub.w	r9, r4, #4
   c5bce:	f844 3c04 	str.w	r3, [r4, #-4]
   c5bd2:	f8cd b008 	str.w	fp, [sp, #8]
   c5bd6:	464c      	mov	r4, r9
   c5bd8:	461d      	mov	r5, r3
   c5bda:	9a03      	ldr	r2, [sp, #12]
   c5bdc:	e7d7      	b.n	c5b8e <__hexnan+0x2e>
   c5bde:	2929      	cmp	r1, #41	; 0x29
   c5be0:	d156      	bne.n	c5c90 <__hexnan+0x130>
   c5be2:	3202      	adds	r2, #2
   c5be4:	f8ca 2000 	str.w	r2, [sl]
   c5be8:	f1bb 0f00 	cmp.w	fp, #0
   c5bec:	d050      	beq.n	c5c90 <__hexnan+0x130>
   c5bee:	454c      	cmp	r4, r9
   c5bf0:	d206      	bcs.n	c5c00 <__hexnan+0xa0>
   c5bf2:	2d07      	cmp	r5, #7
   c5bf4:	dc04      	bgt.n	c5c00 <__hexnan+0xa0>
   c5bf6:	462a      	mov	r2, r5
   c5bf8:	4649      	mov	r1, r9
   c5bfa:	4620      	mov	r0, r4
   c5bfc:	f7ff ff8a 	bl	c5b14 <L_shift>
   c5c00:	4544      	cmp	r4, r8
   c5c02:	d934      	bls.n	c5c6e <__hexnan+0x10e>
   c5c04:	f1a8 0204 	sub.w	r2, r8, #4
   c5c08:	4623      	mov	r3, r4
   c5c0a:	f853 1b04 	ldr.w	r1, [r3], #4
   c5c0e:	f842 1f04 	str.w	r1, [r2, #4]!
   c5c12:	429f      	cmp	r7, r3
   c5c14:	d2f9      	bcs.n	c5c0a <__hexnan+0xaa>
   c5c16:	1b3b      	subs	r3, r7, r4
   c5c18:	f023 0303 	bic.w	r3, r3, #3
   c5c1c:	3304      	adds	r3, #4
   c5c1e:	3401      	adds	r4, #1
   c5c20:	3e03      	subs	r6, #3
   c5c22:	42b4      	cmp	r4, r6
   c5c24:	bf88      	it	hi
   c5c26:	2304      	movhi	r3, #4
   c5c28:	4443      	add	r3, r8
   c5c2a:	2200      	movs	r2, #0
   c5c2c:	f843 2b04 	str.w	r2, [r3], #4
   c5c30:	429f      	cmp	r7, r3
   c5c32:	d2fb      	bcs.n	c5c2c <__hexnan+0xcc>
   c5c34:	683b      	ldr	r3, [r7, #0]
   c5c36:	b91b      	cbnz	r3, c5c40 <__hexnan+0xe0>
   c5c38:	4547      	cmp	r7, r8
   c5c3a:	d127      	bne.n	c5c8c <__hexnan+0x12c>
   c5c3c:	2301      	movs	r3, #1
   c5c3e:	603b      	str	r3, [r7, #0]
   c5c40:	2005      	movs	r0, #5
   c5c42:	e026      	b.n	c5c92 <__hexnan+0x132>
   c5c44:	3501      	adds	r5, #1
   c5c46:	2d08      	cmp	r5, #8
   c5c48:	f10b 0b01 	add.w	fp, fp, #1
   c5c4c:	dd06      	ble.n	c5c5c <__hexnan+0xfc>
   c5c4e:	4544      	cmp	r4, r8
   c5c50:	d9c3      	bls.n	c5bda <__hexnan+0x7a>
   c5c52:	2300      	movs	r3, #0
   c5c54:	f844 3c04 	str.w	r3, [r4, #-4]
   c5c58:	2501      	movs	r5, #1
   c5c5a:	3c04      	subs	r4, #4
   c5c5c:	6822      	ldr	r2, [r4, #0]
   c5c5e:	f000 000f 	and.w	r0, r0, #15
   c5c62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c5c66:	6022      	str	r2, [r4, #0]
   c5c68:	e7b7      	b.n	c5bda <__hexnan+0x7a>
   c5c6a:	2508      	movs	r5, #8
   c5c6c:	e7b5      	b.n	c5bda <__hexnan+0x7a>
   c5c6e:	9b01      	ldr	r3, [sp, #4]
   c5c70:	2b00      	cmp	r3, #0
   c5c72:	d0df      	beq.n	c5c34 <__hexnan+0xd4>
   c5c74:	f04f 32ff 	mov.w	r2, #4294967295
   c5c78:	f1c3 0320 	rsb	r3, r3, #32
   c5c7c:	fa22 f303 	lsr.w	r3, r2, r3
   c5c80:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c5c84:	401a      	ands	r2, r3
   c5c86:	f846 2c04 	str.w	r2, [r6, #-4]
   c5c8a:	e7d3      	b.n	c5c34 <__hexnan+0xd4>
   c5c8c:	3f04      	subs	r7, #4
   c5c8e:	e7d1      	b.n	c5c34 <__hexnan+0xd4>
   c5c90:	2004      	movs	r0, #4
   c5c92:	b007      	add	sp, #28
   c5c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c5c98 <__retarget_lock_acquire_recursive>:
   c5c98:	4770      	bx	lr

000c5c9a <__retarget_lock_release>:
   c5c9a:	4770      	bx	lr

000c5c9c <__retarget_lock_release_recursive>:
   c5c9c:	4770      	bx	lr

000c5c9e <__ascii_mbtowc>:
   c5c9e:	b082      	sub	sp, #8
   c5ca0:	b901      	cbnz	r1, c5ca4 <__ascii_mbtowc+0x6>
   c5ca2:	a901      	add	r1, sp, #4
   c5ca4:	b142      	cbz	r2, c5cb8 <__ascii_mbtowc+0x1a>
   c5ca6:	b14b      	cbz	r3, c5cbc <__ascii_mbtowc+0x1e>
   c5ca8:	7813      	ldrb	r3, [r2, #0]
   c5caa:	600b      	str	r3, [r1, #0]
   c5cac:	7812      	ldrb	r2, [r2, #0]
   c5cae:	1e10      	subs	r0, r2, #0
   c5cb0:	bf18      	it	ne
   c5cb2:	2001      	movne	r0, #1
   c5cb4:	b002      	add	sp, #8
   c5cb6:	4770      	bx	lr
   c5cb8:	4610      	mov	r0, r2
   c5cba:	e7fb      	b.n	c5cb4 <__ascii_mbtowc+0x16>
   c5cbc:	f06f 0001 	mvn.w	r0, #1
   c5cc0:	e7f8      	b.n	c5cb4 <__ascii_mbtowc+0x16>
	...

000c5cc4 <_Balloc>:
   c5cc4:	b570      	push	{r4, r5, r6, lr}
   c5cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5cc8:	4604      	mov	r4, r0
   c5cca:	460d      	mov	r5, r1
   c5ccc:	b976      	cbnz	r6, c5cec <_Balloc+0x28>
   c5cce:	2010      	movs	r0, #16
   c5cd0:	f7f8 fad8 	bl	be284 <malloc>
   c5cd4:	4602      	mov	r2, r0
   c5cd6:	6260      	str	r0, [r4, #36]	; 0x24
   c5cd8:	b920      	cbnz	r0, c5ce4 <_Balloc+0x20>
   c5cda:	4b18      	ldr	r3, [pc, #96]	; (c5d3c <_Balloc+0x78>)
   c5cdc:	4818      	ldr	r0, [pc, #96]	; (c5d40 <_Balloc+0x7c>)
   c5cde:	2166      	movs	r1, #102	; 0x66
   c5ce0:	f7f8 fb20 	bl	be324 <__assert_func>
   c5ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5ce8:	6006      	str	r6, [r0, #0]
   c5cea:	60c6      	str	r6, [r0, #12]
   c5cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c5cee:	68f3      	ldr	r3, [r6, #12]
   c5cf0:	b183      	cbz	r3, c5d14 <_Balloc+0x50>
   c5cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5cf4:	68db      	ldr	r3, [r3, #12]
   c5cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c5cfa:	b9b8      	cbnz	r0, c5d2c <_Balloc+0x68>
   c5cfc:	2101      	movs	r1, #1
   c5cfe:	fa01 f605 	lsl.w	r6, r1, r5
   c5d02:	1d72      	adds	r2, r6, #5
   c5d04:	0092      	lsls	r2, r2, #2
   c5d06:	4620      	mov	r0, r4
   c5d08:	f000 fc9d 	bl	c6646 <_calloc_r>
   c5d0c:	b160      	cbz	r0, c5d28 <_Balloc+0x64>
   c5d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c5d12:	e00e      	b.n	c5d32 <_Balloc+0x6e>
   c5d14:	2221      	movs	r2, #33	; 0x21
   c5d16:	2104      	movs	r1, #4
   c5d18:	4620      	mov	r0, r4
   c5d1a:	f000 fc94 	bl	c6646 <_calloc_r>
   c5d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c5d20:	60f0      	str	r0, [r6, #12]
   c5d22:	68db      	ldr	r3, [r3, #12]
   c5d24:	2b00      	cmp	r3, #0
   c5d26:	d1e4      	bne.n	c5cf2 <_Balloc+0x2e>
   c5d28:	2000      	movs	r0, #0
   c5d2a:	bd70      	pop	{r4, r5, r6, pc}
   c5d2c:	6802      	ldr	r2, [r0, #0]
   c5d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c5d32:	2300      	movs	r3, #0
   c5d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c5d38:	e7f7      	b.n	c5d2a <_Balloc+0x66>
   c5d3a:	bf00      	nop
   c5d3c:	000c85e8 	.word	0x000c85e8
   c5d40:	000c8882 	.word	0x000c8882

000c5d44 <_Bfree>:
   c5d44:	b570      	push	{r4, r5, r6, lr}
   c5d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c5d48:	4605      	mov	r5, r0
   c5d4a:	460c      	mov	r4, r1
   c5d4c:	b976      	cbnz	r6, c5d6c <_Bfree+0x28>
   c5d4e:	2010      	movs	r0, #16
   c5d50:	f7f8 fa98 	bl	be284 <malloc>
   c5d54:	4602      	mov	r2, r0
   c5d56:	6268      	str	r0, [r5, #36]	; 0x24
   c5d58:	b920      	cbnz	r0, c5d64 <_Bfree+0x20>
   c5d5a:	4b09      	ldr	r3, [pc, #36]	; (c5d80 <_Bfree+0x3c>)
   c5d5c:	4809      	ldr	r0, [pc, #36]	; (c5d84 <_Bfree+0x40>)
   c5d5e:	218a      	movs	r1, #138	; 0x8a
   c5d60:	f7f8 fae0 	bl	be324 <__assert_func>
   c5d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c5d68:	6006      	str	r6, [r0, #0]
   c5d6a:	60c6      	str	r6, [r0, #12]
   c5d6c:	b13c      	cbz	r4, c5d7e <_Bfree+0x3a>
   c5d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c5d70:	6862      	ldr	r2, [r4, #4]
   c5d72:	68db      	ldr	r3, [r3, #12]
   c5d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c5d78:	6021      	str	r1, [r4, #0]
   c5d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c5d7e:	bd70      	pop	{r4, r5, r6, pc}
   c5d80:	000c85e8 	.word	0x000c85e8
   c5d84:	000c8882 	.word	0x000c8882

000c5d88 <__multadd>:
   c5d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c5d8c:	690d      	ldr	r5, [r1, #16]
   c5d8e:	4607      	mov	r7, r0
   c5d90:	460c      	mov	r4, r1
   c5d92:	461e      	mov	r6, r3
   c5d94:	f101 0c14 	add.w	ip, r1, #20
   c5d98:	2000      	movs	r0, #0
   c5d9a:	f8dc 3000 	ldr.w	r3, [ip]
   c5d9e:	b299      	uxth	r1, r3
   c5da0:	fb02 6101 	mla	r1, r2, r1, r6
   c5da4:	0c1e      	lsrs	r6, r3, #16
   c5da6:	0c0b      	lsrs	r3, r1, #16
   c5da8:	fb02 3306 	mla	r3, r2, r6, r3
   c5dac:	b289      	uxth	r1, r1
   c5dae:	3001      	adds	r0, #1
   c5db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c5db4:	4285      	cmp	r5, r0
   c5db6:	f84c 1b04 	str.w	r1, [ip], #4
   c5dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c5dbe:	dcec      	bgt.n	c5d9a <__multadd+0x12>
   c5dc0:	b30e      	cbz	r6, c5e06 <__multadd+0x7e>
   c5dc2:	68a3      	ldr	r3, [r4, #8]
   c5dc4:	42ab      	cmp	r3, r5
   c5dc6:	dc19      	bgt.n	c5dfc <__multadd+0x74>
   c5dc8:	6861      	ldr	r1, [r4, #4]
   c5dca:	4638      	mov	r0, r7
   c5dcc:	3101      	adds	r1, #1
   c5dce:	f7ff ff79 	bl	c5cc4 <_Balloc>
   c5dd2:	4680      	mov	r8, r0
   c5dd4:	b928      	cbnz	r0, c5de2 <__multadd+0x5a>
   c5dd6:	4602      	mov	r2, r0
   c5dd8:	4b0c      	ldr	r3, [pc, #48]	; (c5e0c <__multadd+0x84>)
   c5dda:	480d      	ldr	r0, [pc, #52]	; (c5e10 <__multadd+0x88>)
   c5ddc:	21b5      	movs	r1, #181	; 0xb5
   c5dde:	f7f8 faa1 	bl	be324 <__assert_func>
   c5de2:	6922      	ldr	r2, [r4, #16]
   c5de4:	3202      	adds	r2, #2
   c5de6:	f104 010c 	add.w	r1, r4, #12
   c5dea:	0092      	lsls	r2, r2, #2
   c5dec:	300c      	adds	r0, #12
   c5dee:	f7fe fb9b 	bl	c4528 <memcpy>
   c5df2:	4621      	mov	r1, r4
   c5df4:	4638      	mov	r0, r7
   c5df6:	f7ff ffa5 	bl	c5d44 <_Bfree>
   c5dfa:	4644      	mov	r4, r8
   c5dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c5e00:	3501      	adds	r5, #1
   c5e02:	615e      	str	r6, [r3, #20]
   c5e04:	6125      	str	r5, [r4, #16]
   c5e06:	4620      	mov	r0, r4
   c5e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c5e0c:	000c87d9 	.word	0x000c87d9
   c5e10:	000c8882 	.word	0x000c8882

000c5e14 <__s2b>:
   c5e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c5e18:	460c      	mov	r4, r1
   c5e1a:	4615      	mov	r5, r2
   c5e1c:	461f      	mov	r7, r3
   c5e1e:	2209      	movs	r2, #9
   c5e20:	3308      	adds	r3, #8
   c5e22:	4606      	mov	r6, r0
   c5e24:	fb93 f3f2 	sdiv	r3, r3, r2
   c5e28:	2100      	movs	r1, #0
   c5e2a:	2201      	movs	r2, #1
   c5e2c:	429a      	cmp	r2, r3
   c5e2e:	db09      	blt.n	c5e44 <__s2b+0x30>
   c5e30:	4630      	mov	r0, r6
   c5e32:	f7ff ff47 	bl	c5cc4 <_Balloc>
   c5e36:	b940      	cbnz	r0, c5e4a <__s2b+0x36>
   c5e38:	4602      	mov	r2, r0
   c5e3a:	4b19      	ldr	r3, [pc, #100]	; (c5ea0 <__s2b+0x8c>)
   c5e3c:	4819      	ldr	r0, [pc, #100]	; (c5ea4 <__s2b+0x90>)
   c5e3e:	21ce      	movs	r1, #206	; 0xce
   c5e40:	f7f8 fa70 	bl	be324 <__assert_func>
   c5e44:	0052      	lsls	r2, r2, #1
   c5e46:	3101      	adds	r1, #1
   c5e48:	e7f0      	b.n	c5e2c <__s2b+0x18>
   c5e4a:	9b08      	ldr	r3, [sp, #32]
   c5e4c:	6143      	str	r3, [r0, #20]
   c5e4e:	2d09      	cmp	r5, #9
   c5e50:	f04f 0301 	mov.w	r3, #1
   c5e54:	6103      	str	r3, [r0, #16]
   c5e56:	dd16      	ble.n	c5e86 <__s2b+0x72>
   c5e58:	f104 0909 	add.w	r9, r4, #9
   c5e5c:	46c8      	mov	r8, r9
   c5e5e:	442c      	add	r4, r5
   c5e60:	f818 3b01 	ldrb.w	r3, [r8], #1
   c5e64:	4601      	mov	r1, r0
   c5e66:	3b30      	subs	r3, #48	; 0x30
   c5e68:	220a      	movs	r2, #10
   c5e6a:	4630      	mov	r0, r6
   c5e6c:	f7ff ff8c 	bl	c5d88 <__multadd>
   c5e70:	45a0      	cmp	r8, r4
   c5e72:	d1f5      	bne.n	c5e60 <__s2b+0x4c>
   c5e74:	f1a5 0408 	sub.w	r4, r5, #8
   c5e78:	444c      	add	r4, r9
   c5e7a:	1b2d      	subs	r5, r5, r4
   c5e7c:	1963      	adds	r3, r4, r5
   c5e7e:	42bb      	cmp	r3, r7
   c5e80:	db04      	blt.n	c5e8c <__s2b+0x78>
   c5e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c5e86:	340a      	adds	r4, #10
   c5e88:	2509      	movs	r5, #9
   c5e8a:	e7f6      	b.n	c5e7a <__s2b+0x66>
   c5e8c:	f814 3b01 	ldrb.w	r3, [r4], #1
   c5e90:	4601      	mov	r1, r0
   c5e92:	3b30      	subs	r3, #48	; 0x30
   c5e94:	220a      	movs	r2, #10
   c5e96:	4630      	mov	r0, r6
   c5e98:	f7ff ff76 	bl	c5d88 <__multadd>
   c5e9c:	e7ee      	b.n	c5e7c <__s2b+0x68>
   c5e9e:	bf00      	nop
   c5ea0:	000c87d9 	.word	0x000c87d9
   c5ea4:	000c8882 	.word	0x000c8882

000c5ea8 <__hi0bits>:
   c5ea8:	0c03      	lsrs	r3, r0, #16
   c5eaa:	041b      	lsls	r3, r3, #16
   c5eac:	b9d3      	cbnz	r3, c5ee4 <__hi0bits+0x3c>
   c5eae:	0400      	lsls	r0, r0, #16
   c5eb0:	2310      	movs	r3, #16
   c5eb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c5eb6:	bf04      	itt	eq
   c5eb8:	0200      	lsleq	r0, r0, #8
   c5eba:	3308      	addeq	r3, #8
   c5ebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c5ec0:	bf04      	itt	eq
   c5ec2:	0100      	lsleq	r0, r0, #4
   c5ec4:	3304      	addeq	r3, #4
   c5ec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c5eca:	bf04      	itt	eq
   c5ecc:	0080      	lsleq	r0, r0, #2
   c5ece:	3302      	addeq	r3, #2
   c5ed0:	2800      	cmp	r0, #0
   c5ed2:	db05      	blt.n	c5ee0 <__hi0bits+0x38>
   c5ed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c5ed8:	f103 0301 	add.w	r3, r3, #1
   c5edc:	bf08      	it	eq
   c5ede:	2320      	moveq	r3, #32
   c5ee0:	4618      	mov	r0, r3
   c5ee2:	4770      	bx	lr
   c5ee4:	2300      	movs	r3, #0
   c5ee6:	e7e4      	b.n	c5eb2 <__hi0bits+0xa>

000c5ee8 <__lo0bits>:
   c5ee8:	6803      	ldr	r3, [r0, #0]
   c5eea:	f013 0207 	ands.w	r2, r3, #7
   c5eee:	4601      	mov	r1, r0
   c5ef0:	d00b      	beq.n	c5f0a <__lo0bits+0x22>
   c5ef2:	07da      	lsls	r2, r3, #31
   c5ef4:	d423      	bmi.n	c5f3e <__lo0bits+0x56>
   c5ef6:	0798      	lsls	r0, r3, #30
   c5ef8:	bf49      	itett	mi
   c5efa:	085b      	lsrmi	r3, r3, #1
   c5efc:	089b      	lsrpl	r3, r3, #2
   c5efe:	2001      	movmi	r0, #1
   c5f00:	600b      	strmi	r3, [r1, #0]
   c5f02:	bf5c      	itt	pl
   c5f04:	600b      	strpl	r3, [r1, #0]
   c5f06:	2002      	movpl	r0, #2
   c5f08:	4770      	bx	lr
   c5f0a:	b298      	uxth	r0, r3
   c5f0c:	b9a8      	cbnz	r0, c5f3a <__lo0bits+0x52>
   c5f0e:	0c1b      	lsrs	r3, r3, #16
   c5f10:	2010      	movs	r0, #16
   c5f12:	b2da      	uxtb	r2, r3
   c5f14:	b90a      	cbnz	r2, c5f1a <__lo0bits+0x32>
   c5f16:	3008      	adds	r0, #8
   c5f18:	0a1b      	lsrs	r3, r3, #8
   c5f1a:	071a      	lsls	r2, r3, #28
   c5f1c:	bf04      	itt	eq
   c5f1e:	091b      	lsreq	r3, r3, #4
   c5f20:	3004      	addeq	r0, #4
   c5f22:	079a      	lsls	r2, r3, #30
   c5f24:	bf04      	itt	eq
   c5f26:	089b      	lsreq	r3, r3, #2
   c5f28:	3002      	addeq	r0, #2
   c5f2a:	07da      	lsls	r2, r3, #31
   c5f2c:	d403      	bmi.n	c5f36 <__lo0bits+0x4e>
   c5f2e:	085b      	lsrs	r3, r3, #1
   c5f30:	f100 0001 	add.w	r0, r0, #1
   c5f34:	d005      	beq.n	c5f42 <__lo0bits+0x5a>
   c5f36:	600b      	str	r3, [r1, #0]
   c5f38:	4770      	bx	lr
   c5f3a:	4610      	mov	r0, r2
   c5f3c:	e7e9      	b.n	c5f12 <__lo0bits+0x2a>
   c5f3e:	2000      	movs	r0, #0
   c5f40:	4770      	bx	lr
   c5f42:	2020      	movs	r0, #32
   c5f44:	4770      	bx	lr
	...

000c5f48 <__i2b>:
   c5f48:	b510      	push	{r4, lr}
   c5f4a:	460c      	mov	r4, r1
   c5f4c:	2101      	movs	r1, #1
   c5f4e:	f7ff feb9 	bl	c5cc4 <_Balloc>
   c5f52:	4602      	mov	r2, r0
   c5f54:	b928      	cbnz	r0, c5f62 <__i2b+0x1a>
   c5f56:	4b05      	ldr	r3, [pc, #20]	; (c5f6c <__i2b+0x24>)
   c5f58:	4805      	ldr	r0, [pc, #20]	; (c5f70 <__i2b+0x28>)
   c5f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c5f5e:	f7f8 f9e1 	bl	be324 <__assert_func>
   c5f62:	2301      	movs	r3, #1
   c5f64:	6144      	str	r4, [r0, #20]
   c5f66:	6103      	str	r3, [r0, #16]
   c5f68:	bd10      	pop	{r4, pc}
   c5f6a:	bf00      	nop
   c5f6c:	000c87d9 	.word	0x000c87d9
   c5f70:	000c8882 	.word	0x000c8882

000c5f74 <__multiply>:
   c5f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c5f78:	4691      	mov	r9, r2
   c5f7a:	690a      	ldr	r2, [r1, #16]
   c5f7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c5f80:	429a      	cmp	r2, r3
   c5f82:	bfb8      	it	lt
   c5f84:	460b      	movlt	r3, r1
   c5f86:	460c      	mov	r4, r1
   c5f88:	bfbc      	itt	lt
   c5f8a:	464c      	movlt	r4, r9
   c5f8c:	4699      	movlt	r9, r3
   c5f8e:	6927      	ldr	r7, [r4, #16]
   c5f90:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c5f94:	68a3      	ldr	r3, [r4, #8]
   c5f96:	6861      	ldr	r1, [r4, #4]
   c5f98:	eb07 060a 	add.w	r6, r7, sl
   c5f9c:	42b3      	cmp	r3, r6
   c5f9e:	b085      	sub	sp, #20
   c5fa0:	bfb8      	it	lt
   c5fa2:	3101      	addlt	r1, #1
   c5fa4:	f7ff fe8e 	bl	c5cc4 <_Balloc>
   c5fa8:	b930      	cbnz	r0, c5fb8 <__multiply+0x44>
   c5faa:	4602      	mov	r2, r0
   c5fac:	4b44      	ldr	r3, [pc, #272]	; (c60c0 <__multiply+0x14c>)
   c5fae:	4845      	ldr	r0, [pc, #276]	; (c60c4 <__multiply+0x150>)
   c5fb0:	f240 115d 	movw	r1, #349	; 0x15d
   c5fb4:	f7f8 f9b6 	bl	be324 <__assert_func>
   c5fb8:	f100 0514 	add.w	r5, r0, #20
   c5fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c5fc0:	462b      	mov	r3, r5
   c5fc2:	2200      	movs	r2, #0
   c5fc4:	4543      	cmp	r3, r8
   c5fc6:	d321      	bcc.n	c600c <__multiply+0x98>
   c5fc8:	f104 0314 	add.w	r3, r4, #20
   c5fcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c5fd0:	f109 0314 	add.w	r3, r9, #20
   c5fd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c5fd8:	9202      	str	r2, [sp, #8]
   c5fda:	1b3a      	subs	r2, r7, r4
   c5fdc:	3a15      	subs	r2, #21
   c5fde:	f022 0203 	bic.w	r2, r2, #3
   c5fe2:	3204      	adds	r2, #4
   c5fe4:	f104 0115 	add.w	r1, r4, #21
   c5fe8:	428f      	cmp	r7, r1
   c5fea:	bf38      	it	cc
   c5fec:	2204      	movcc	r2, #4
   c5fee:	9201      	str	r2, [sp, #4]
   c5ff0:	9a02      	ldr	r2, [sp, #8]
   c5ff2:	9303      	str	r3, [sp, #12]
   c5ff4:	429a      	cmp	r2, r3
   c5ff6:	d80c      	bhi.n	c6012 <__multiply+0x9e>
   c5ff8:	2e00      	cmp	r6, #0
   c5ffa:	dd03      	ble.n	c6004 <__multiply+0x90>
   c5ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c6000:	2b00      	cmp	r3, #0
   c6002:	d05a      	beq.n	c60ba <__multiply+0x146>
   c6004:	6106      	str	r6, [r0, #16]
   c6006:	b005      	add	sp, #20
   c6008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c600c:	f843 2b04 	str.w	r2, [r3], #4
   c6010:	e7d8      	b.n	c5fc4 <__multiply+0x50>
   c6012:	f8b3 a000 	ldrh.w	sl, [r3]
   c6016:	f1ba 0f00 	cmp.w	sl, #0
   c601a:	d024      	beq.n	c6066 <__multiply+0xf2>
   c601c:	f104 0e14 	add.w	lr, r4, #20
   c6020:	46a9      	mov	r9, r5
   c6022:	f04f 0c00 	mov.w	ip, #0
   c6026:	f85e 2b04 	ldr.w	r2, [lr], #4
   c602a:	f8d9 1000 	ldr.w	r1, [r9]
   c602e:	fa1f fb82 	uxth.w	fp, r2
   c6032:	b289      	uxth	r1, r1
   c6034:	fb0a 110b 	mla	r1, sl, fp, r1
   c6038:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c603c:	f8d9 2000 	ldr.w	r2, [r9]
   c6040:	4461      	add	r1, ip
   c6042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c6046:	fb0a c20b 	mla	r2, sl, fp, ip
   c604a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c604e:	b289      	uxth	r1, r1
   c6050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c6054:	4577      	cmp	r7, lr
   c6056:	f849 1b04 	str.w	r1, [r9], #4
   c605a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c605e:	d8e2      	bhi.n	c6026 <__multiply+0xb2>
   c6060:	9a01      	ldr	r2, [sp, #4]
   c6062:	f845 c002 	str.w	ip, [r5, r2]
   c6066:	9a03      	ldr	r2, [sp, #12]
   c6068:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c606c:	3304      	adds	r3, #4
   c606e:	f1b9 0f00 	cmp.w	r9, #0
   c6072:	d020      	beq.n	c60b6 <__multiply+0x142>
   c6074:	6829      	ldr	r1, [r5, #0]
   c6076:	f104 0c14 	add.w	ip, r4, #20
   c607a:	46ae      	mov	lr, r5
   c607c:	f04f 0a00 	mov.w	sl, #0
   c6080:	f8bc b000 	ldrh.w	fp, [ip]
   c6084:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c6088:	fb09 220b 	mla	r2, r9, fp, r2
   c608c:	4492      	add	sl, r2
   c608e:	b289      	uxth	r1, r1
   c6090:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c6094:	f84e 1b04 	str.w	r1, [lr], #4
   c6098:	f85c 2b04 	ldr.w	r2, [ip], #4
   c609c:	f8be 1000 	ldrh.w	r1, [lr]
   c60a0:	0c12      	lsrs	r2, r2, #16
   c60a2:	fb09 1102 	mla	r1, r9, r2, r1
   c60a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c60aa:	4567      	cmp	r7, ip
   c60ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c60b0:	d8e6      	bhi.n	c6080 <__multiply+0x10c>
   c60b2:	9a01      	ldr	r2, [sp, #4]
   c60b4:	50a9      	str	r1, [r5, r2]
   c60b6:	3504      	adds	r5, #4
   c60b8:	e79a      	b.n	c5ff0 <__multiply+0x7c>
   c60ba:	3e01      	subs	r6, #1
   c60bc:	e79c      	b.n	c5ff8 <__multiply+0x84>
   c60be:	bf00      	nop
   c60c0:	000c87d9 	.word	0x000c87d9
   c60c4:	000c8882 	.word	0x000c8882

000c60c8 <__pow5mult>:
   c60c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c60cc:	4615      	mov	r5, r2
   c60ce:	f012 0203 	ands.w	r2, r2, #3
   c60d2:	4606      	mov	r6, r0
   c60d4:	460f      	mov	r7, r1
   c60d6:	d007      	beq.n	c60e8 <__pow5mult+0x20>
   c60d8:	4c25      	ldr	r4, [pc, #148]	; (c6170 <__pow5mult+0xa8>)
   c60da:	3a01      	subs	r2, #1
   c60dc:	2300      	movs	r3, #0
   c60de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c60e2:	f7ff fe51 	bl	c5d88 <__multadd>
   c60e6:	4607      	mov	r7, r0
   c60e8:	10ad      	asrs	r5, r5, #2
   c60ea:	d03d      	beq.n	c6168 <__pow5mult+0xa0>
   c60ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c60ee:	b97c      	cbnz	r4, c6110 <__pow5mult+0x48>
   c60f0:	2010      	movs	r0, #16
   c60f2:	f7f8 f8c7 	bl	be284 <malloc>
   c60f6:	4602      	mov	r2, r0
   c60f8:	6270      	str	r0, [r6, #36]	; 0x24
   c60fa:	b928      	cbnz	r0, c6108 <__pow5mult+0x40>
   c60fc:	4b1d      	ldr	r3, [pc, #116]	; (c6174 <__pow5mult+0xac>)
   c60fe:	481e      	ldr	r0, [pc, #120]	; (c6178 <__pow5mult+0xb0>)
   c6100:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c6104:	f7f8 f90e 	bl	be324 <__assert_func>
   c6108:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c610c:	6004      	str	r4, [r0, #0]
   c610e:	60c4      	str	r4, [r0, #12]
   c6110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c6114:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c6118:	b94c      	cbnz	r4, c612e <__pow5mult+0x66>
   c611a:	f240 2171 	movw	r1, #625	; 0x271
   c611e:	4630      	mov	r0, r6
   c6120:	f7ff ff12 	bl	c5f48 <__i2b>
   c6124:	2300      	movs	r3, #0
   c6126:	f8c8 0008 	str.w	r0, [r8, #8]
   c612a:	4604      	mov	r4, r0
   c612c:	6003      	str	r3, [r0, #0]
   c612e:	f04f 0900 	mov.w	r9, #0
   c6132:	07eb      	lsls	r3, r5, #31
   c6134:	d50a      	bpl.n	c614c <__pow5mult+0x84>
   c6136:	4639      	mov	r1, r7
   c6138:	4622      	mov	r2, r4
   c613a:	4630      	mov	r0, r6
   c613c:	f7ff ff1a 	bl	c5f74 <__multiply>
   c6140:	4639      	mov	r1, r7
   c6142:	4680      	mov	r8, r0
   c6144:	4630      	mov	r0, r6
   c6146:	f7ff fdfd 	bl	c5d44 <_Bfree>
   c614a:	4647      	mov	r7, r8
   c614c:	106d      	asrs	r5, r5, #1
   c614e:	d00b      	beq.n	c6168 <__pow5mult+0xa0>
   c6150:	6820      	ldr	r0, [r4, #0]
   c6152:	b938      	cbnz	r0, c6164 <__pow5mult+0x9c>
   c6154:	4622      	mov	r2, r4
   c6156:	4621      	mov	r1, r4
   c6158:	4630      	mov	r0, r6
   c615a:	f7ff ff0b 	bl	c5f74 <__multiply>
   c615e:	6020      	str	r0, [r4, #0]
   c6160:	f8c0 9000 	str.w	r9, [r0]
   c6164:	4604      	mov	r4, r0
   c6166:	e7e4      	b.n	c6132 <__pow5mult+0x6a>
   c6168:	4638      	mov	r0, r7
   c616a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c616e:	bf00      	nop
   c6170:	000c89f0 	.word	0x000c89f0
   c6174:	000c85e8 	.word	0x000c85e8
   c6178:	000c8882 	.word	0x000c8882

000c617c <__lshift>:
   c617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c6180:	460c      	mov	r4, r1
   c6182:	6849      	ldr	r1, [r1, #4]
   c6184:	6923      	ldr	r3, [r4, #16]
   c6186:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c618a:	68a3      	ldr	r3, [r4, #8]
   c618c:	4607      	mov	r7, r0
   c618e:	4691      	mov	r9, r2
   c6190:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c6194:	f108 0601 	add.w	r6, r8, #1
   c6198:	42b3      	cmp	r3, r6
   c619a:	db0b      	blt.n	c61b4 <__lshift+0x38>
   c619c:	4638      	mov	r0, r7
   c619e:	f7ff fd91 	bl	c5cc4 <_Balloc>
   c61a2:	4605      	mov	r5, r0
   c61a4:	b948      	cbnz	r0, c61ba <__lshift+0x3e>
   c61a6:	4602      	mov	r2, r0
   c61a8:	4b2a      	ldr	r3, [pc, #168]	; (c6254 <__lshift+0xd8>)
   c61aa:	482b      	ldr	r0, [pc, #172]	; (c6258 <__lshift+0xdc>)
   c61ac:	f240 11d9 	movw	r1, #473	; 0x1d9
   c61b0:	f7f8 f8b8 	bl	be324 <__assert_func>
   c61b4:	3101      	adds	r1, #1
   c61b6:	005b      	lsls	r3, r3, #1
   c61b8:	e7ee      	b.n	c6198 <__lshift+0x1c>
   c61ba:	2300      	movs	r3, #0
   c61bc:	f100 0114 	add.w	r1, r0, #20
   c61c0:	f100 0210 	add.w	r2, r0, #16
   c61c4:	4618      	mov	r0, r3
   c61c6:	4553      	cmp	r3, sl
   c61c8:	db37      	blt.n	c623a <__lshift+0xbe>
   c61ca:	6920      	ldr	r0, [r4, #16]
   c61cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c61d0:	f104 0314 	add.w	r3, r4, #20
   c61d4:	f019 091f 	ands.w	r9, r9, #31
   c61d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c61dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c61e0:	d02f      	beq.n	c6242 <__lshift+0xc6>
   c61e2:	f1c9 0e20 	rsb	lr, r9, #32
   c61e6:	468a      	mov	sl, r1
   c61e8:	f04f 0c00 	mov.w	ip, #0
   c61ec:	681a      	ldr	r2, [r3, #0]
   c61ee:	fa02 f209 	lsl.w	r2, r2, r9
   c61f2:	ea42 020c 	orr.w	r2, r2, ip
   c61f6:	f84a 2b04 	str.w	r2, [sl], #4
   c61fa:	f853 2b04 	ldr.w	r2, [r3], #4
   c61fe:	4298      	cmp	r0, r3
   c6200:	fa22 fc0e 	lsr.w	ip, r2, lr
   c6204:	d8f2      	bhi.n	c61ec <__lshift+0x70>
   c6206:	1b03      	subs	r3, r0, r4
   c6208:	3b15      	subs	r3, #21
   c620a:	f023 0303 	bic.w	r3, r3, #3
   c620e:	3304      	adds	r3, #4
   c6210:	f104 0215 	add.w	r2, r4, #21
   c6214:	4290      	cmp	r0, r2
   c6216:	bf38      	it	cc
   c6218:	2304      	movcc	r3, #4
   c621a:	f841 c003 	str.w	ip, [r1, r3]
   c621e:	f1bc 0f00 	cmp.w	ip, #0
   c6222:	d001      	beq.n	c6228 <__lshift+0xac>
   c6224:	f108 0602 	add.w	r6, r8, #2
   c6228:	3e01      	subs	r6, #1
   c622a:	4638      	mov	r0, r7
   c622c:	612e      	str	r6, [r5, #16]
   c622e:	4621      	mov	r1, r4
   c6230:	f7ff fd88 	bl	c5d44 <_Bfree>
   c6234:	4628      	mov	r0, r5
   c6236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c623a:	f842 0f04 	str.w	r0, [r2, #4]!
   c623e:	3301      	adds	r3, #1
   c6240:	e7c1      	b.n	c61c6 <__lshift+0x4a>
   c6242:	3904      	subs	r1, #4
   c6244:	f853 2b04 	ldr.w	r2, [r3], #4
   c6248:	f841 2f04 	str.w	r2, [r1, #4]!
   c624c:	4298      	cmp	r0, r3
   c624e:	d8f9      	bhi.n	c6244 <__lshift+0xc8>
   c6250:	e7ea      	b.n	c6228 <__lshift+0xac>
   c6252:	bf00      	nop
   c6254:	000c87d9 	.word	0x000c87d9
   c6258:	000c8882 	.word	0x000c8882

000c625c <__mcmp>:
   c625c:	b530      	push	{r4, r5, lr}
   c625e:	6902      	ldr	r2, [r0, #16]
   c6260:	690c      	ldr	r4, [r1, #16]
   c6262:	1b12      	subs	r2, r2, r4
   c6264:	d10e      	bne.n	c6284 <__mcmp+0x28>
   c6266:	f100 0314 	add.w	r3, r0, #20
   c626a:	3114      	adds	r1, #20
   c626c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c6270:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c6274:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c6278:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c627c:	42a5      	cmp	r5, r4
   c627e:	d003      	beq.n	c6288 <__mcmp+0x2c>
   c6280:	d305      	bcc.n	c628e <__mcmp+0x32>
   c6282:	2201      	movs	r2, #1
   c6284:	4610      	mov	r0, r2
   c6286:	bd30      	pop	{r4, r5, pc}
   c6288:	4283      	cmp	r3, r0
   c628a:	d3f3      	bcc.n	c6274 <__mcmp+0x18>
   c628c:	e7fa      	b.n	c6284 <__mcmp+0x28>
   c628e:	f04f 32ff 	mov.w	r2, #4294967295
   c6292:	e7f7      	b.n	c6284 <__mcmp+0x28>

000c6294 <__mdiff>:
   c6294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c6298:	460c      	mov	r4, r1
   c629a:	4606      	mov	r6, r0
   c629c:	4611      	mov	r1, r2
   c629e:	4620      	mov	r0, r4
   c62a0:	4690      	mov	r8, r2
   c62a2:	f7ff ffdb 	bl	c625c <__mcmp>
   c62a6:	1e05      	subs	r5, r0, #0
   c62a8:	d110      	bne.n	c62cc <__mdiff+0x38>
   c62aa:	4629      	mov	r1, r5
   c62ac:	4630      	mov	r0, r6
   c62ae:	f7ff fd09 	bl	c5cc4 <_Balloc>
   c62b2:	b930      	cbnz	r0, c62c2 <__mdiff+0x2e>
   c62b4:	4b3a      	ldr	r3, [pc, #232]	; (c63a0 <__mdiff+0x10c>)
   c62b6:	4602      	mov	r2, r0
   c62b8:	f240 2132 	movw	r1, #562	; 0x232
   c62bc:	4839      	ldr	r0, [pc, #228]	; (c63a4 <__mdiff+0x110>)
   c62be:	f7f8 f831 	bl	be324 <__assert_func>
   c62c2:	2301      	movs	r3, #1
   c62c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c62c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c62cc:	bfa4      	itt	ge
   c62ce:	4643      	movge	r3, r8
   c62d0:	46a0      	movge	r8, r4
   c62d2:	4630      	mov	r0, r6
   c62d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c62d8:	bfa6      	itte	ge
   c62da:	461c      	movge	r4, r3
   c62dc:	2500      	movge	r5, #0
   c62de:	2501      	movlt	r5, #1
   c62e0:	f7ff fcf0 	bl	c5cc4 <_Balloc>
   c62e4:	b920      	cbnz	r0, c62f0 <__mdiff+0x5c>
   c62e6:	4b2e      	ldr	r3, [pc, #184]	; (c63a0 <__mdiff+0x10c>)
   c62e8:	4602      	mov	r2, r0
   c62ea:	f44f 7110 	mov.w	r1, #576	; 0x240
   c62ee:	e7e5      	b.n	c62bc <__mdiff+0x28>
   c62f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c62f4:	6926      	ldr	r6, [r4, #16]
   c62f6:	60c5      	str	r5, [r0, #12]
   c62f8:	f104 0914 	add.w	r9, r4, #20
   c62fc:	f108 0514 	add.w	r5, r8, #20
   c6300:	f100 0e14 	add.w	lr, r0, #20
   c6304:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c6308:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c630c:	f108 0210 	add.w	r2, r8, #16
   c6310:	46f2      	mov	sl, lr
   c6312:	2100      	movs	r1, #0
   c6314:	f859 3b04 	ldr.w	r3, [r9], #4
   c6318:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c631c:	fa1f f883 	uxth.w	r8, r3
   c6320:	fa11 f18b 	uxtah	r1, r1, fp
   c6324:	0c1b      	lsrs	r3, r3, #16
   c6326:	eba1 0808 	sub.w	r8, r1, r8
   c632a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c632e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c6332:	fa1f f888 	uxth.w	r8, r8
   c6336:	1419      	asrs	r1, r3, #16
   c6338:	454e      	cmp	r6, r9
   c633a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c633e:	f84a 3b04 	str.w	r3, [sl], #4
   c6342:	d8e7      	bhi.n	c6314 <__mdiff+0x80>
   c6344:	1b33      	subs	r3, r6, r4
   c6346:	3b15      	subs	r3, #21
   c6348:	f023 0303 	bic.w	r3, r3, #3
   c634c:	3304      	adds	r3, #4
   c634e:	3415      	adds	r4, #21
   c6350:	42a6      	cmp	r6, r4
   c6352:	bf38      	it	cc
   c6354:	2304      	movcc	r3, #4
   c6356:	441d      	add	r5, r3
   c6358:	4473      	add	r3, lr
   c635a:	469e      	mov	lr, r3
   c635c:	462e      	mov	r6, r5
   c635e:	4566      	cmp	r6, ip
   c6360:	d30e      	bcc.n	c6380 <__mdiff+0xec>
   c6362:	f10c 0203 	add.w	r2, ip, #3
   c6366:	1b52      	subs	r2, r2, r5
   c6368:	f022 0203 	bic.w	r2, r2, #3
   c636c:	3d03      	subs	r5, #3
   c636e:	45ac      	cmp	ip, r5
   c6370:	bf38      	it	cc
   c6372:	2200      	movcc	r2, #0
   c6374:	441a      	add	r2, r3
   c6376:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c637a:	b17b      	cbz	r3, c639c <__mdiff+0x108>
   c637c:	6107      	str	r7, [r0, #16]
   c637e:	e7a3      	b.n	c62c8 <__mdiff+0x34>
   c6380:	f856 8b04 	ldr.w	r8, [r6], #4
   c6384:	fa11 f288 	uxtah	r2, r1, r8
   c6388:	1414      	asrs	r4, r2, #16
   c638a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c638e:	b292      	uxth	r2, r2
   c6390:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c6394:	f84e 2b04 	str.w	r2, [lr], #4
   c6398:	1421      	asrs	r1, r4, #16
   c639a:	e7e0      	b.n	c635e <__mdiff+0xca>
   c639c:	3f01      	subs	r7, #1
   c639e:	e7ea      	b.n	c6376 <__mdiff+0xe2>
   c63a0:	000c87d9 	.word	0x000c87d9
   c63a4:	000c8882 	.word	0x000c8882

000c63a8 <__ulp>:
   c63a8:	b082      	sub	sp, #8
   c63aa:	ed8d 0b00 	vstr	d0, [sp]
   c63ae:	9b01      	ldr	r3, [sp, #4]
   c63b0:	4912      	ldr	r1, [pc, #72]	; (c63fc <__ulp+0x54>)
   c63b2:	4019      	ands	r1, r3
   c63b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c63b8:	2900      	cmp	r1, #0
   c63ba:	dd05      	ble.n	c63c8 <__ulp+0x20>
   c63bc:	2200      	movs	r2, #0
   c63be:	460b      	mov	r3, r1
   c63c0:	ec43 2b10 	vmov	d0, r2, r3
   c63c4:	b002      	add	sp, #8
   c63c6:	4770      	bx	lr
   c63c8:	4249      	negs	r1, r1
   c63ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c63ce:	ea4f 5021 	mov.w	r0, r1, asr #20
   c63d2:	f04f 0200 	mov.w	r2, #0
   c63d6:	f04f 0300 	mov.w	r3, #0
   c63da:	da04      	bge.n	c63e6 <__ulp+0x3e>
   c63dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c63e0:	fa41 f300 	asr.w	r3, r1, r0
   c63e4:	e7ec      	b.n	c63c0 <__ulp+0x18>
   c63e6:	f1a0 0114 	sub.w	r1, r0, #20
   c63ea:	291e      	cmp	r1, #30
   c63ec:	bfda      	itte	le
   c63ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c63f2:	fa20 f101 	lsrle.w	r1, r0, r1
   c63f6:	2101      	movgt	r1, #1
   c63f8:	460a      	mov	r2, r1
   c63fa:	e7e1      	b.n	c63c0 <__ulp+0x18>
   c63fc:	7ff00000 	.word	0x7ff00000

000c6400 <__b2d>:
   c6400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c6402:	6905      	ldr	r5, [r0, #16]
   c6404:	f100 0714 	add.w	r7, r0, #20
   c6408:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c640c:	1f2e      	subs	r6, r5, #4
   c640e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c6412:	4620      	mov	r0, r4
   c6414:	f7ff fd48 	bl	c5ea8 <__hi0bits>
   c6418:	f1c0 0320 	rsb	r3, r0, #32
   c641c:	280a      	cmp	r0, #10
   c641e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c649c <__b2d+0x9c>
   c6422:	600b      	str	r3, [r1, #0]
   c6424:	dc14      	bgt.n	c6450 <__b2d+0x50>
   c6426:	f1c0 0e0b 	rsb	lr, r0, #11
   c642a:	fa24 f10e 	lsr.w	r1, r4, lr
   c642e:	42b7      	cmp	r7, r6
   c6430:	ea41 030c 	orr.w	r3, r1, ip
   c6434:	bf34      	ite	cc
   c6436:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c643a:	2100      	movcs	r1, #0
   c643c:	3015      	adds	r0, #21
   c643e:	fa04 f000 	lsl.w	r0, r4, r0
   c6442:	fa21 f10e 	lsr.w	r1, r1, lr
   c6446:	ea40 0201 	orr.w	r2, r0, r1
   c644a:	ec43 2b10 	vmov	d0, r2, r3
   c644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c6450:	42b7      	cmp	r7, r6
   c6452:	bf3a      	itte	cc
   c6454:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c6458:	f1a5 0608 	subcc.w	r6, r5, #8
   c645c:	2100      	movcs	r1, #0
   c645e:	380b      	subs	r0, #11
   c6460:	d017      	beq.n	c6492 <__b2d+0x92>
   c6462:	f1c0 0c20 	rsb	ip, r0, #32
   c6466:	fa04 f500 	lsl.w	r5, r4, r0
   c646a:	42be      	cmp	r6, r7
   c646c:	fa21 f40c 	lsr.w	r4, r1, ip
   c6470:	ea45 0504 	orr.w	r5, r5, r4
   c6474:	bf8c      	ite	hi
   c6476:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c647a:	2400      	movls	r4, #0
   c647c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c6480:	fa01 f000 	lsl.w	r0, r1, r0
   c6484:	fa24 f40c 	lsr.w	r4, r4, ip
   c6488:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c648c:	ea40 0204 	orr.w	r2, r0, r4
   c6490:	e7db      	b.n	c644a <__b2d+0x4a>
   c6492:	ea44 030c 	orr.w	r3, r4, ip
   c6496:	460a      	mov	r2, r1
   c6498:	e7d7      	b.n	c644a <__b2d+0x4a>
   c649a:	bf00      	nop
   c649c:	3ff00000 	.word	0x3ff00000

000c64a0 <__d2b>:
   c64a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c64a4:	4689      	mov	r9, r1
   c64a6:	2101      	movs	r1, #1
   c64a8:	ec57 6b10 	vmov	r6, r7, d0
   c64ac:	4690      	mov	r8, r2
   c64ae:	f7ff fc09 	bl	c5cc4 <_Balloc>
   c64b2:	4604      	mov	r4, r0
   c64b4:	b930      	cbnz	r0, c64c4 <__d2b+0x24>
   c64b6:	4602      	mov	r2, r0
   c64b8:	4b25      	ldr	r3, [pc, #148]	; (c6550 <__d2b+0xb0>)
   c64ba:	4826      	ldr	r0, [pc, #152]	; (c6554 <__d2b+0xb4>)
   c64bc:	f240 310a 	movw	r1, #778	; 0x30a
   c64c0:	f7f7 ff30 	bl	be324 <__assert_func>
   c64c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c64c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c64cc:	bb35      	cbnz	r5, c651c <__d2b+0x7c>
   c64ce:	2e00      	cmp	r6, #0
   c64d0:	9301      	str	r3, [sp, #4]
   c64d2:	d028      	beq.n	c6526 <__d2b+0x86>
   c64d4:	4668      	mov	r0, sp
   c64d6:	9600      	str	r6, [sp, #0]
   c64d8:	f7ff fd06 	bl	c5ee8 <__lo0bits>
   c64dc:	9900      	ldr	r1, [sp, #0]
   c64de:	b300      	cbz	r0, c6522 <__d2b+0x82>
   c64e0:	9a01      	ldr	r2, [sp, #4]
   c64e2:	f1c0 0320 	rsb	r3, r0, #32
   c64e6:	fa02 f303 	lsl.w	r3, r2, r3
   c64ea:	430b      	orrs	r3, r1
   c64ec:	40c2      	lsrs	r2, r0
   c64ee:	6163      	str	r3, [r4, #20]
   c64f0:	9201      	str	r2, [sp, #4]
   c64f2:	9b01      	ldr	r3, [sp, #4]
   c64f4:	61a3      	str	r3, [r4, #24]
   c64f6:	2b00      	cmp	r3, #0
   c64f8:	bf14      	ite	ne
   c64fa:	2202      	movne	r2, #2
   c64fc:	2201      	moveq	r2, #1
   c64fe:	6122      	str	r2, [r4, #16]
   c6500:	b1d5      	cbz	r5, c6538 <__d2b+0x98>
   c6502:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c6506:	4405      	add	r5, r0
   c6508:	f8c9 5000 	str.w	r5, [r9]
   c650c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c6510:	f8c8 0000 	str.w	r0, [r8]
   c6514:	4620      	mov	r0, r4
   c6516:	b003      	add	sp, #12
   c6518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c651c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c6520:	e7d5      	b.n	c64ce <__d2b+0x2e>
   c6522:	6161      	str	r1, [r4, #20]
   c6524:	e7e5      	b.n	c64f2 <__d2b+0x52>
   c6526:	a801      	add	r0, sp, #4
   c6528:	f7ff fcde 	bl	c5ee8 <__lo0bits>
   c652c:	9b01      	ldr	r3, [sp, #4]
   c652e:	6163      	str	r3, [r4, #20]
   c6530:	2201      	movs	r2, #1
   c6532:	6122      	str	r2, [r4, #16]
   c6534:	3020      	adds	r0, #32
   c6536:	e7e3      	b.n	c6500 <__d2b+0x60>
   c6538:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c653c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c6540:	f8c9 0000 	str.w	r0, [r9]
   c6544:	6918      	ldr	r0, [r3, #16]
   c6546:	f7ff fcaf 	bl	c5ea8 <__hi0bits>
   c654a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c654e:	e7df      	b.n	c6510 <__d2b+0x70>
   c6550:	000c87d9 	.word	0x000c87d9
   c6554:	000c8882 	.word	0x000c8882

000c6558 <__ratio>:
   c6558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c655c:	4688      	mov	r8, r1
   c655e:	4669      	mov	r1, sp
   c6560:	4681      	mov	r9, r0
   c6562:	f7ff ff4d 	bl	c6400 <__b2d>
   c6566:	a901      	add	r1, sp, #4
   c6568:	4640      	mov	r0, r8
   c656a:	ec55 4b10 	vmov	r4, r5, d0
   c656e:	f7ff ff47 	bl	c6400 <__b2d>
   c6572:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c6576:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c657a:	eba3 0c02 	sub.w	ip, r3, r2
   c657e:	e9dd 3200 	ldrd	r3, r2, [sp]
   c6582:	1a9b      	subs	r3, r3, r2
   c6584:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c6588:	ec51 0b10 	vmov	r0, r1, d0
   c658c:	2b00      	cmp	r3, #0
   c658e:	bfd6      	itet	le
   c6590:	460a      	movle	r2, r1
   c6592:	462a      	movgt	r2, r5
   c6594:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c6598:	468b      	mov	fp, r1
   c659a:	462f      	mov	r7, r5
   c659c:	bfd4      	ite	le
   c659e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c65a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c65a6:	4620      	mov	r0, r4
   c65a8:	ee10 2a10 	vmov	r2, s0
   c65ac:	465b      	mov	r3, fp
   c65ae:	4639      	mov	r1, r7
   c65b0:	f7fd fd58 	bl	c4064 <__aeabi_ddiv>
   c65b4:	ec41 0b10 	vmov	d0, r0, r1
   c65b8:	b003      	add	sp, #12
   c65ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c65be <__copybits>:
   c65be:	3901      	subs	r1, #1
   c65c0:	b570      	push	{r4, r5, r6, lr}
   c65c2:	1149      	asrs	r1, r1, #5
   c65c4:	6914      	ldr	r4, [r2, #16]
   c65c6:	3101      	adds	r1, #1
   c65c8:	f102 0314 	add.w	r3, r2, #20
   c65cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c65d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c65d4:	1f05      	subs	r5, r0, #4
   c65d6:	42a3      	cmp	r3, r4
   c65d8:	d30c      	bcc.n	c65f4 <__copybits+0x36>
   c65da:	1aa3      	subs	r3, r4, r2
   c65dc:	3b11      	subs	r3, #17
   c65de:	f023 0303 	bic.w	r3, r3, #3
   c65e2:	3211      	adds	r2, #17
   c65e4:	42a2      	cmp	r2, r4
   c65e6:	bf88      	it	hi
   c65e8:	2300      	movhi	r3, #0
   c65ea:	4418      	add	r0, r3
   c65ec:	2300      	movs	r3, #0
   c65ee:	4288      	cmp	r0, r1
   c65f0:	d305      	bcc.n	c65fe <__copybits+0x40>
   c65f2:	bd70      	pop	{r4, r5, r6, pc}
   c65f4:	f853 6b04 	ldr.w	r6, [r3], #4
   c65f8:	f845 6f04 	str.w	r6, [r5, #4]!
   c65fc:	e7eb      	b.n	c65d6 <__copybits+0x18>
   c65fe:	f840 3b04 	str.w	r3, [r0], #4
   c6602:	e7f4      	b.n	c65ee <__copybits+0x30>

000c6604 <__any_on>:
   c6604:	f100 0214 	add.w	r2, r0, #20
   c6608:	6900      	ldr	r0, [r0, #16]
   c660a:	114b      	asrs	r3, r1, #5
   c660c:	4298      	cmp	r0, r3
   c660e:	b510      	push	{r4, lr}
   c6610:	db11      	blt.n	c6636 <__any_on+0x32>
   c6612:	dd0a      	ble.n	c662a <__any_on+0x26>
   c6614:	f011 011f 	ands.w	r1, r1, #31
   c6618:	d007      	beq.n	c662a <__any_on+0x26>
   c661a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c661e:	fa24 f001 	lsr.w	r0, r4, r1
   c6622:	fa00 f101 	lsl.w	r1, r0, r1
   c6626:	428c      	cmp	r4, r1
   c6628:	d10b      	bne.n	c6642 <__any_on+0x3e>
   c662a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c662e:	4293      	cmp	r3, r2
   c6630:	d803      	bhi.n	c663a <__any_on+0x36>
   c6632:	2000      	movs	r0, #0
   c6634:	bd10      	pop	{r4, pc}
   c6636:	4603      	mov	r3, r0
   c6638:	e7f7      	b.n	c662a <__any_on+0x26>
   c663a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c663e:	2900      	cmp	r1, #0
   c6640:	d0f5      	beq.n	c662e <__any_on+0x2a>
   c6642:	2001      	movs	r0, #1
   c6644:	e7f6      	b.n	c6634 <__any_on+0x30>

000c6646 <_calloc_r>:
   c6646:	b513      	push	{r0, r1, r4, lr}
   c6648:	434a      	muls	r2, r1
   c664a:	4611      	mov	r1, r2
   c664c:	9201      	str	r2, [sp, #4]
   c664e:	f7f7 fe59 	bl	be304 <_malloc_r>
   c6652:	4604      	mov	r4, r0
   c6654:	b118      	cbz	r0, c665e <_calloc_r+0x18>
   c6656:	9a01      	ldr	r2, [sp, #4]
   c6658:	2100      	movs	r1, #0
   c665a:	f7fd ff8d 	bl	c4578 <memset>
   c665e:	4620      	mov	r0, r4
   c6660:	b002      	add	sp, #8
   c6662:	bd10      	pop	{r4, pc}
   c6664:	0000      	movs	r0, r0
	...

000c6668 <nan>:
   c6668:	ed9f 0b01 	vldr	d0, [pc, #4]	; c6670 <nan+0x8>
   c666c:	4770      	bx	lr
   c666e:	bf00      	nop
   c6670:	00000000 	.word	0x00000000
   c6674:	7ff80000 	.word	0x7ff80000

000c6678 <__ascii_wctomb>:
   c6678:	b149      	cbz	r1, c668e <__ascii_wctomb+0x16>
   c667a:	2aff      	cmp	r2, #255	; 0xff
   c667c:	bf85      	ittet	hi
   c667e:	238a      	movhi	r3, #138	; 0x8a
   c6680:	6003      	strhi	r3, [r0, #0]
   c6682:	700a      	strbls	r2, [r1, #0]
   c6684:	f04f 30ff 	movhi.w	r0, #4294967295
   c6688:	bf98      	it	ls
   c668a:	2001      	movls	r0, #1
   c668c:	4770      	bx	lr
   c668e:	4608      	mov	r0, r1
   c6690:	4770      	bx	lr
	...

000c6694 <__aeabi_d2lz>:
   c6694:	b538      	push	{r3, r4, r5, lr}
   c6696:	2200      	movs	r2, #0
   c6698:	2300      	movs	r3, #0
   c669a:	4604      	mov	r4, r0
   c669c:	460d      	mov	r5, r1
   c669e:	f7fd fe29 	bl	c42f4 <__aeabi_dcmplt>
   c66a2:	b928      	cbnz	r0, c66b0 <__aeabi_d2lz+0x1c>
   c66a4:	4620      	mov	r0, r4
   c66a6:	4629      	mov	r1, r5
   c66a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c66ac:	f7fd bef8 	b.w	c44a0 <__aeabi_d2ulz>
   c66b0:	4620      	mov	r0, r4
   c66b2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c66b6:	f7fd fef3 	bl	c44a0 <__aeabi_d2ulz>
   c66ba:	4240      	negs	r0, r0
   c66bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c66c0:	bd38      	pop	{r3, r4, r5, pc}
   c66c2:	bf00      	nop

000c66c4 <dynalib_user>:
   c66c4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c66d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c66e4:	7620 7269 7574 6c61 6400 6665 7561 746c      virtual.default
   c66f4:	0020 534d 0042 534c 0042 533c 4950 6553      .MSB.LSB.<SPISe
   c6704:	7474 6e69 7367 6420 6665 7561 746c 003e     ttings default>.
   c6714:	533c 4950 6553 7474 6e69 7367 2520 2573     <SPISettings %s%
   c6724:	2075 7325 4d20 444f 2545 3e75 5700 7261     u %s MODE%u>.War
   c6734:	696e 676e 202c 6f6d 6f74 2072 6f63 6d6d     ning, motor comm
   c6744:	6e61 2064 6168 2073 6f6e 2074 6562 6e65     and has not been
   c6754:	7220 6365 6965 6576 2064 6e69 6f20 6576      received in ove
   c6764:	2072 6425 736d 202c 7563 7474 6e69 2067     r %dms, cutting 
   c6774:	6f6d 6f74 7372 5700 7261 696e 676e 202c     motors.Warning, 
   c6784:	5047 2053 726f 4320 6d6f 6170 7373 6420     GPS or Compass d
   c6794:	7461 2061 6f6e 2074 7661 6961 616c 6c62     ata not availabl
   c67a4:	2065 6f66 2072 7267 6165 6574 2072 6874     e for greater th
   c67b4:	6e61 2520 6d64 2c73 6520 6978 6974 676e     an %dms, exiting
   c67c4:	6120 7475 6e6f 6d6f 756f 2073 6f6d 6564      autonomous mode
   c67d4:	5b00 4157 4e52 205d 544c 2045 654d 7373     .[WARN] LTE Mess
   c67e4:	6761 7365 6820 7661 2065 6f6e 2074 6562     ages have not be
   c67f4:	6e65 7220 6365 6965 6576 2064 6e69 2520     en received in %
   c6804:	7364 202c 7361 7573 696d 676e 5820 6542     ds, assuming XBe
   c6814:	2065 7369 7520 616e 6176 6c69 6261 656c     e is unavailable
   c6824:	5b00 4157 4e52 205d 4258 6565 4d20 7365     .[WARN] XBee Mes
   c6834:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6844:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c6854:	6425 2c73 6120 7373 6d75 6e69 2067 4258     %ds, assuming XB
   c6864:	6565 6920 2073 6e75 7661 6961 616c 6c62     ee is unavailabl
   c6874:	0065 575b 5241 5d4e 4220 454c 4d20 7365     e.[WARN] BLE Mes
   c6884:	6173 6567 2073 6168 6576 6e20 746f 6220     sages have not b
   c6894:	6565 206e 6572 6563 7669 6465 6920 206e     een received in 
   c68a4:	6425 2c73 6120 7373 6d75 6e69 2067 4c42     %ds, assuming BL
   c68b4:	2045 7369 7520 616e 6176 6c69 6261 656c     E is unavailable
   c68c4:	4300 6568 6b63 7573 3a6d 2520 3230 2c78     .Checksum: %02x,
   c68d4:	2520 3330 0064 7453 6972 676e 4c20 6e65      %03d.String Len
   c68e4:	203a 6425 202c 6843 6365 736b 6d75 203a     : %d, Checksum: 
   c68f4:	6425 5700 7261 696e 676e 202c 6863 6365     %d.Warning, chec
   c6904:	736b 6d75 6420 656f 2073 6f6e 2074 616d     ksum does not ma
   c6914:	6374 0068 575b 5241 5d4e 4d20 7365 6173     tch.[WARN] Messa
   c6924:	6567 4320 6568 6b63 7573 206d 6f44 7365     ge Checksum Does
   c6934:	4e20 746f 4d20 7461 6863 3a21 2520 0073      Not Match!: %s.
   c6944:	7463 006c 7325 2520 2073 6425 2520 2064     ctl.%s %s %d %d 
   c6954:	6425 4e00 7765 7420 7261 6567 2074 5047     %d.New target GP
   c6964:	2c53 4c20 7461 203a 6625 4c20 6e6f 203a     S, Lat: %f Lon: 
   c6974:	6625 6d00 7274 5200 6365 6965 6576 2064     %f.mtr.Received 
   c6984:	6f4d 6f74 2072 6f43 6d6d 6e61 3a64 4c20     Motor Command: L
   c6994:	7053 6565 3d64 6425 522c 7053 6565 3d64     Speed=%d,RSpeed=
   c69a4:	6425 7200 7165 7000 7374 5b00 5550 5354     %d.req.pts.[PUTS
   c69b4:	205d 6552 6563 7669 6465 5320 7274 6e69     ] Received Strin
   c69c4:	2067 6f43 6d6d 6e61 3a64 2520 0073 7073     g Command: %s.sp
   c69d4:	0063 7768 0061 6d64 0070 6765 0070 7325     c.hwa.dmp.egp.%s
   c69e4:	2520 0073 7473 0070 495b 464e 5d4f 5220      %s.stp.[INFO] R
   c69f4:	6365 6965 6576 2064 544c 2045 654d 7373     eceived LTE Mess
   c6a04:	6761 3a65 2520 0073 654e 2077 5442 4320     age: %s.New BT C
   c6a14:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   c6a24:	6365 6965 6576 2064 4c42 2045 654d 7373     eceived BLE Mess
   c6a34:	6761 3a65 2520 0073 7245 6f72 2c72 4320     age: %s.Error, C
   c6a44:	756f 646c 6e20 746f 6920 696e 6974 6c61     ould not initial
   c6a54:	7a69 2065 5047 0053 4343 7548 0062 6e49     ize GPS.CCHub.In
   c6a64:	7570 2074 6f43 6d6d 6e61 0064 6146 6c69     put Command.Fail
   c6a74:	6465 7420 206f 6966 646e 4c20 5349 4d33     ed to find LIS3M
   c6a84:	4c44 6320 6968 0070 494c 3353 444d 204c     DL chip.LIS3MDL 
   c6a94:	6f46 6e75 2164 2500 3230 2564 3230 2564     Found!.%02d%02d%
   c6aa4:	3430 2564 3230 2564 3230 2564 3230 0064     04d%02d%02d%02d.
   c6ab4:	6157 6574 4272 746f 2e00 7363 0076 4c5f     WaterBot..csv._L
   c6ac4:	474f 742e 7478 4500 7272 726f 203a 6f63     OG.txt.Error: co
   c6ad4:	6c75 2064 6f6e 2074 6f63 6e6e 6365 2074     uld not connect 
   c6ae4:	6f74 5320 2044 6163 6472 0021 6954 656d     to SD card!.Time
   c6af4:	4c2c 7461 7469 6475 2c65 6f4c 676e 7469     ,Latitude,Longit
   c6b04:	6475 2c65 6554 706d 7265 7461 7275 2c65     ude,Temperature,
   c6b14:	4870 442c 7369 6f73 766c 6465 4f20 2c32     pH,Dissolved O2,
   c6b24:	6f43 646e 6375 6974 6976 7974 3020 312e     Conductivity 0.1
   c6b34:	2c4b 6f43 646e 6375 6974 6976 7974 3120     K,Conductivity 1
   c6b44:	004b 495b 464e 5d4f 5720 7461 7265 6f42     K.[INFO] WaterBo
   c6b54:	2074 6425 203a 7453 7261 6574 2064 6f4c     t %d: Started Lo
   c6b64:	6767 6e69 2167 2500 2573 3230 0078 6f42     gging!.%s%02x.Bo
   c6b74:	3174 6164 0074 2542 4364 7343 736e 3025     t1dat.B%dCCsns%0
   c6b84:	362e 2066 3025 362e 2066 6425 2520 2064     .6f %0.6f %d %d 
   c6b94:	6425 2520 2064 6425 0020 6553 646e 6e69     %d %d %d .Sendin
   c6ba4:	2067 2061 7473 7461 7375 7520 6470 7461     g a status updat
   c6bb4:	2165 4200 6425 4241 7573 2570 2064 6425     e!.B%dABsup%d %d
   c6bc4:	2520 2e30 6636 2520 2e30 6636 2520 2064      %0.6f %0.6f %d 
   c6bd4:	6425 0020 7325 252c 2c66 6625 252c 2c66     %d .%s,%f,%f,%f,
   c6be4:	6625 252c 2c66 6625 252c 0066 654e 2077     %f,%f,%f,%f.New 
   c6bf4:	4258 6565 4320 6d6f 616d 646e 003a 495b     XBee Command:.[I
   c6c04:	464e 5d4f 5220 6365 6965 6576 2064 4258     NFO] Received XB
   c6c14:	6565 4d20 7365 6173 6567 203a 7325 4500     ee Message: %s.E
   c6c24:	746e 7265 6e69 2067 6144 6174 4f20 6666     ntering Data Off
   c6c34:	6f6c 6461 7265 4d20 646f 0065 002f 7245     loader Mode./.Er
   c6c44:	6f72 2c72 6320 756f 646c 6e20 746f 6f20     ror, could not o
   c6c54:	6570 206e 6f72 746f 5320 2044 6163 6472     pen root SD card
   c6c64:	6420 7269 6365 6f74 7972 5700 6961 6974      directory.Waiti
   c6c74:	676e 6620 726f 4320 4843 6275 6320 6e6f     ng for CCHub con
   c6c84:	656e 7463 6f69 2e6e 2e2e 5300 6174 7472     nection....Start
   c6c94:	6e69 2067 7274 6e61 6673 7265 2e2e 002e     ing transfer....
   c6ca4:	6843 6365 696b 676e 6920 2066 6966 656c     Checking if file
   c6cb4:	2520 2073 7369 6120 2e20 7363 2076 726f      %s is a .csv or
   c6cc4:	2e20 7874 2e74 2e2e 6600 6c69 6465 6e6f      .txt....filedon
   c6cd4:	0065 6966 656c 616e 656d 5300 6e65 6964     e.filename.Sendi
   c6ce4:	676e 6320 6d6f 616d 646e 2520 0073 6946     ng command %s.Fi
   c6cf4:	656c 2520 2073 7369 6120 2e20 7363 2076     le %s is a .csv 
   c6d04:	726f 2e20 7874 2074 7270 6e69 6974 676e     or .txt printing
   c6d14:	6420 7461 0061 6966 656c 6f63 706d 7400      data.filecomp.t
   c6d24:	0078 7872 6f00 6666 6400 6762 0000 0000     x.rx.off.dbg....

000c6d34 <_ZTVN8particle11SPISettingsE>:
	...
   c6d3c:	4369 000b 40d1 000b 4183 000b               iC...@...A..

000c6d48 <_ZTV5Timer>:
	...
   c6d50:	44d5 000b 451d 000b 419f 000b               .D...E...A..

000c6d5c <_ZTVN5spark10LogHandlerE>:
	...
   c6d6c:	40a9 000b 40d3 000b                         .@...@..

000c6d74 <_ZTVN8particle9LEDStatusE>:
	...
   c6d7c:	4269 000b 4285 000b 40dd 000b               iB...B...@..

000c6d88 <_ZTVN5spark16SerialLogHandlerE>:
	...
   c6d90:	4299 000b 42cd 000b 098d 000c 40d5 000b     .B...B.......@..

000c6da0 <_ZTV4File>:
	...
   c6da8:	4181 000b 4191 000b 4217 000b 4211 000b     .A...A...B...B..
   c6db8:	40df 000b 41f1 000b 41eb 000b 41e5 000b     .@...A...A...A..
   c6dc8:	3462 3032 3936 3531 642d 3463 2d62 3735     b4206915-dc4b-57
   c6dd8:	3334 632d 6238 2d31 3239 3064 3765 3135     43-c8b1-92d0e751
   c6de8:	3238 3062 6200 3234 3630 3139 2d34 6364     82b0.b4206914-dc
   c6df8:	6234 352d 3437 2d33 3863 3162 392d 6432     4b-5743-c8b1-92d
   c6e08:	6530 3537 3831 6232 0030 3462 3032 3936     0e75182b0.b42069
   c6e18:	3331 642d 3463 2d62 3735 3334 632d 6238     13-dc4b-5743-c8b
   c6e28:	2d31 3239 3064 3765 3135 3238 3062 6200     1-92d0e75182b0.b
   c6e38:	3234 3630 3139 2d32 6364 6234 352d 3437     4206912-dc4b-574
   c6e48:	2d33 3863 3162 392d 6432 6530 3537 3831     3-c8b1-92d0e7518
   c6e58:	6232 0030 3462 3032 3936 3031 642d 3463     2b0.b4206910-dc4
   c6e68:	2d62 3735 3334 632d 6238 2d31 3239 3064     b-5743-c8b1-92d0
   c6e78:	3765 3135 3238 3062 0000 0000               e75182b0....

000c6e84 <CSWTCH.403>:
   c6e84:	00ff 00ff 6000 00ff ff00 0000 00ff 0000     .....`..........
   c6e94:	ffff 00ff ff00 00ff ffff 0000 494c 3353     ............LIS3
   c6ea4:	444d 004c                                   MDL.

000c6ea8 <CSWTCH.26>:
   c6ea8:	d000 45d5 d000 4555 9000 450e e000 44d5     ...E..UE...E...D

000c6eb8 <_ZTV16Adafruit_LIS3MDL>:
	...
   c6ec0:	826f 000b 82b9 000b 826d 000b 8369 000b     o.......m...i...
   c6ed0:	8271 000b 6573 5074 6361 656b 4374 6766     q...setPacketCfg
   c6ee0:	6150 6c79 616f 5364 7a69 3a65 5a20 7265     PayloadSize: Zer
   c6ef0:	206f 6170 6c79 616f 5364 7a69 2165 7300     o payloadSize!.s
   c6f00:	7465 6150 6b63 7465 6643 5067 7961 6f6c     etPacketCfgPaylo
   c6f10:	6461 6953 657a 203a 4152 204d 6c61 6f6c     adSize: RAM allo
   c6f20:	2063 6166 6c69 6465 0021 6573 5074 6361     c failed!.setPac
   c6f30:	656b 4374 6766 6150 6c79 616f 5364 7a69     ketCfgPayloadSiz
   c6f40:	3a65 5220 4d41 7220 7365 7a69 2065 6166     e: RAM resize fa
   c6f50:	6c69 6465 0021 4e47 4747 0041 5047 5456     iled!.GNGGA.GPVT
   c6f60:	0047 4e47 5456 0047 5047 4d52 0043 4e47     G.GNVTG.GPRMC.GN
   c6f70:	4d52 0043 5047 445a 0041 4e47 445a 0041     RMC.GPZDA.GNZDA.
   c6f80:	5047 4747 0041 6573 646e 7053 4369 6d6f     GPGGA.sendSpiCom
   c6f90:	616d 646e 203a 6f6e 6d20 6d65 726f 2079     mand: no memory 
   c6fa0:	6c61 6f6c 6163 6974 6e6f 6620 726f 5320     allocation for S
   c6fb0:	4950 4220 6675 6566 2172 7300 6e65 5364     PI Buffer!.sendS
   c6fc0:	6970 6f43 6d6d 6e61 3a64 0020 4c43 3a53     piCommand: .CLS:
   c6fd0:	4e00 5641 4100 4b43 4300 4746 4d00 4e4f     .NAV.ACK.CFG.MON
   c6fe0:	2000 4449 003a 5650 0054 4152 4554 5300     . ID:.PVT.RATE.S
   c6ff0:	5641 0045 4c20 6e65 203a 7830 2000 6150     AVE. Len: 0x. Pa
   c7000:	6c79 616f 3a64 2000 6150 6c79 616f 3a64     yload:. Payload:
   c7010:	4920 4e47 524f 4445 6300 6572 7461 4665      IGNORED.createF
   c7020:	6c69 4265 6675 6566 3a72 5720 7261 696e     ileBuffer: Warni
   c7030:	676e 202e 6966 656c 7542 6666 7265 6953     ng. fileBufferSi
   c7040:	657a 6920 2073 657a 6f72 202e 6144 6174     ze is zero. Data
   c7050:	6c20 676f 6967 676e 6920 2073 6f6e 2074      logging is not 
   c7060:	6f70 7373 6269 656c 002e 7263 6165 6574     possible..create
   c7070:	6946 656c 7542 6666 7265 203a 6157 6e72     FileBuffer: Warn
   c7080:	6e69 2e67 4620 6c69 2065 7562 6666 7265     ing. File buffer
   c7090:	6120 726c 6165 7964 6520 6978 7473 2e73      already exists.
   c70a0:	5320 696b 7070 6e69 2e67 2e2e 6300 6572      Skipping....cre
   c70b0:	7461 4665 6c69 4265 6675 6566 3a72 5220     ateFileBuffer: R
   c70c0:	4d41 6120 6c6c 636f 6620 6961 656c 2164     AM alloc failed!
   c70d0:	6300 6572 7461 4665 6c69 4265 6675 6566     .createFileBuffe
   c70e0:	3a72 6620 6c69 4265 6675 6566 5372 7a69     r: fileBufferSiz
   c70f0:	2065 7369 203a 7300 6f74 6572 6150 6b63     e is: .storePack
   c7100:	7465 203a 6966 656c 6220 6675 6566 2072     et: file buffer 
   c7110:	6f6e 2074 7661 6961 616c 6c62 2165 7300     not available!.s
   c7120:	6f74 6572 6150 6b63 7465 203a 6e69 7573     torePacket: insu
   c7130:	6666 6369 6569 746e 7320 6170 6563 6120     fficient space a
   c7140:	6176 6c69 6261 656c 2021 6144 6174 7720     vailable! Data w
   c7150:	6c69 206c 6562 6c20 736f 2174 7000 6f72     ill be lost!.pro
   c7160:	6563 7373 4255 7058 6361 656b 3a74 7020     cessUBXpacket: p
   c7170:	6361 656b 5574 5842 474d 4141 4b43 6920     acketUBXMGAACK i
   c7180:	2073 7566 6c6c 202e 4341 204b 6977 6c6c     s full. ACK will
   c7190:	6220 2065 6f6c 7473 0021 7270 636f 7365      be lost!.proces
   c71a0:	5573 5842 6170 6b63 7465 203a 6170 6b63     sUBXpacket: pack
   c71b0:	7465 4255 4d58 4147 4244 2044 7369 6620     etUBXMGADBD is f
   c71c0:	6c75 2e6c 4420 4442 6420 7461 2061 6977     ull. DBD data wi
   c71d0:	6c6c 6220 2065 6f6c 7473 0021 7270 636f     ll be lost!.proc
   c71e0:	7365 5573 5842 203a 6567 4d74 7861 6150     essUBX: getMaxPa
   c71f0:	6c79 616f 5364 7a69 2065 6572 7574 6e72     yloadSize return
   c7200:	6465 5a20 5245 214f 2021 6c43 7361 3a73     ed ZERO!! Class:
   c7210:	3020 0078 7270 636f 7365 5573 5842 203a      0x.processUBX: 
   c7220:	414e 4b43 7220 6365 6965 6576 3a64 5220     NACK received: R
   c7230:	7165 6575 7473 6465 4320 616c 7373 203a     equested Class: 
   c7240:	7830 2000 6552 7571 7365 6574 2064 4449     0x. Requested ID
   c7250:	203a 7830 7000 6f72 6563 7373 4255 3a58     : 0x.processUBX:
   c7260:	6920 636e 6d6f 6e69 2067 6122 7475 6d6f      incoming "autom
   c7270:	7461 6369 2022 656d 7373 6761 3a65 4320     atic" message: C
   c7280:	616c 7373 203a 7830 4900 636e 6d6f 6e69     lass: 0x.Incomin
   c7290:	3a67 5320 7a69 3a65 0020 5220 6365 6965     g: Size: . Recei
   c72a0:	6576 3a64 0020 6170 6b63 7465 6643 2067     ved: .packetCfg 
   c72b0:	6f6e 2077 6176 696c 0064 6170 6b63 7465     now valid.packet
   c72c0:	6341 206b 6f6e 2077 6176 696c 0064 6170     Ack now valid.pa
   c72d0:	6b63 7465 6643 2067 6c63 7361 4173 646e     cketCfg classAnd
   c72e0:	4449 616d 6374 0068 6170 6b63 7465 6341     IDmatch.packetAc
   c72f0:	206b 6c63 7361 4173 646e 4449 616d 6374     k classAndIDmatc
   c7300:	0068 6843 6365 736b 6d75 6620 6961 656c     h.Checksum faile
   c7310:	3a64 2000 6863 6365 736b 6d75 3a41 0020     d:. checksumA: .
   c7320:	6320 6568 6b63 7573 426d 203a 2000 6f72      checksumB: . ro
   c7330:	6c6c 6e69 4367 6568 6b63 7573 416d 203a     llingChecksumA: 
   c7340:	2000 6f72 6c6c 6e69 4367 6568 6b63 7573     . rollingChecksu
   c7350:	426d 203a 7000 6f72 6563 7373 4255 3a58     mB: .processUBX:
   c7360:	6220 6675 6566 2072 766f 7265 7572 206e      buffer overrun 
   c7370:	6564 6574 7463 6465 0021 7270 636f 7365     detected!.proces
   c7380:	5573 5842 203a 6f63 6e75 6574 2072 6968     sUBX: counter hi
   c7390:	2074 616d 6978 756d 5f6d 6170 6c79 616f     t maximum_payloa
   c73a0:	5f64 6973 657a 2b20 3620 0021 6120 7463     d_size + 6!. act
   c73b0:	7669 5065 6361 656b 4274 6675 6566 3a72     ivePacketBuffer:
   c73c0:	0020 6d20 7861 6d69 6d75 705f 7961 6f6c      . maximum_paylo
   c73d0:	6461 735f 7a69 3a65 0020 7473 726f 4665     ad_size: .storeF
   c73e0:	6c69 4265 7479 7365 203a 6966 656c 6220     ileBytes: file b
   c73f0:	6675 6566 2072 6f6e 2074 7661 6961 616c     uffer not availa
   c7400:	6c62 2165 7300 6f74 6572 6946 656c 7942     ble!.storeFileBy
   c7410:	6574 3a73 6920 736e 6675 6966 6963 6e65     tes: insufficien
   c7420:	2074 7073 6361 2065 7661 6961 616c 6c62     t space availabl
   c7430:	2165 4420 7461 2061 6977 6c6c 6220 2065     e! Data will be 
   c7440:	6f6c 7473 0021 7270 636f 7365 3a73 6720     lost!.process: g
   c7450:	7465 614d 5078 7961 6f6c 6461 6953 657a     etMaxPayloadSize
   c7460:	7220 7465 7275 656e 2064 455a 4f52 2121      returned ZERO!!
   c7470:	4320 616c 7373 203a 7830 7000 6f72 6563      Class: 0x.proce
   c7480:	7373 203a 656d 6f6d 7972 6920 2073 6c61     ss: memory is al
   c7490:	6572 6461 2079 6c61 6f6c 6163 6574 2064     ready allocated 
   c74a0:	6f66 2072 6170 6c79 616f 4164 7475 216f     for payloadAuto!
   c74b0:	4420 6c65 7465 6e69 2e67 2e2e 7000 6f72      Deleting....pro
   c74c0:	6563 7373 203a 656d 6f6d 7972 6120 6c6c     cess: memory all
   c74d0:	636f 7461 6f69 206e 6166 6c69 6465 6620     ocation failed f
   c74e0:	726f 2220 7561 6f74 616d 6974 2263 6d20     or "automatic" m
   c74f0:	7365 6173 6567 203a 6c43 7361 3a73 3020     essage: Class: 0
   c7500:	0078 7270 636f 7365 3a73 2220 7561 6f74     x.process: "auto
   c7510:	616d 6974 2263 6d20 7365 6173 6567 6320     matic" message c
   c7520:	756f 646c 6f20 6576 7772 6972 6574 6420     ould overwrite d
   c7530:	7461 0061 7270 636f 7365 3a73 6920 636e     ata.process: inc
   c7540:	6d6f 6e69 2067 6122 7475 6d6f 7461 6369     oming "automatic
   c7550:	2022 656d 7373 6761 3a65 4320 616c 7373     " message: Class
   c7560:	203a 7830 7000 6f72 6563 7373 203a 455a     : 0x.process: ZE
   c7570:	4f52 4c20 4e45 5447 2048 6170 6b63 7465     RO LENGTH packet
   c7580:	7220 6365 6965 6576 3a64 4320 616c 7373      received: Class
   c7590:	203a 7830 7000 6f72 6563 7373 203a 4341     : 0x.process: AC
   c75a0:	204b 6572 6563 7669 6465 7720 7469 2068     K received with 
   c75b0:	6c2e 6e65 2120 203d 3a32 4320 616c 7373     .len != 2: Class
   c75c0:	203a 7830 2000 656c 3a6e 0020 7270 636f     : 0x. len: .proc
   c75d0:	7365 3a73 4e20 454d 2041 7562 6666 7265     ess: NMEA buffer
   c75e0:	6920 2073 7566 6c6c 0021 7270 636f 7365      is full!.proces
   c75f0:	3a73 4e20 454d 2041 6863 6365 736b 6d75     s: NMEA checksum
   c7600:	6620 6961 206c 3228 2129 4520 7078 6365      fail (2)! Expec
   c7610:	6574 2064 2000 6f47 2074 7000 6f72 6563     ted . Got .proce
   c7620:	7373 203a 4d4e 4145 6320 6568 6b63 7573     ss: NMEA checksu
   c7630:	206d 6166 6c69 2820 2931 0021 6863 6365     m fail (1)!.chec
   c7640:	556b 6c62 786f 3249 3a43 4920 4332 6520     kUbloxI2C: I2C e
   c7650:	7272 726f 203a 6e65 5464 6172 736e 696d     rror: endTransmi
   c7660:	7373 6f69 206e 6572 7574 6e72 6465 0020     ssion returned .
   c7670:	6863 6365 556b 6c62 786f 3249 3a43 4920     checkUbloxI2C: I
   c7680:	4332 6520 7272 726f 203a 6572 7571 7365     2C error: reques
   c7690:	4674 6f72 206d 7830 4446 7220 7465 7275     tFrom 0xFD retur
   c76a0:	656e 2064 6300 6568 6b63 6255 6f6c 4978     ned .checkUbloxI
   c76b0:	4332 203a 4b4f 202c 657a 6f72 6220 7479     2C: OK, zero byt
   c76c0:	7365 6120 6176 6c69 6261 656c 6300 6568     es available.che
   c76d0:	6b63 6255 6f6c 4978 4332 203a 614c 6772     ckUbloxI2C: Larg
   c76e0:	2065 6170 6b63 7465 6f20 2066 2000 7962     e packet of . by
   c76f0:	6574 2073 6572 6563 7669 6465 6300 6568     tes received.che
   c7700:	6b63 6255 6f6c 4978 4332 203a 6552 6461     ckUbloxI2C: Read
   c7710:	6e69 2067 2000 7962 6574 0073 6177 7469     ing . bytes.wait
   c7720:	6f46 4172 4b43 6552 7073 6e6f 6573 203a     ForACKResponse: 
   c7730:	6176 696c 2064 6164 6174 6120 646e 7620     valid data and v
   c7740:	6c61 6469 4120 4b43 7220 6365 6965 6576     alid ACK receive
   c7750:	2064 6661 6574 2072 2000 736d 6365 7700     d after . msec.w
   c7760:	6961 4674 726f 4341 524b 7365 6f70 736e     aitForACKRespons
   c7770:	3a65 6e20 206f 6164 6174 6120 646e 7620     e: no data and v
   c7780:	6c61 6469 4120 4b43 6120 7466 7265 0020     alid ACK after .
   c7790:	6177 7469 6f46 4172 4b43 6552 7073 6e6f     waitForACKRespon
   c77a0:	6573 203a 6164 6174 6220 6965 676e 4f20     se: data being O
   c77b0:	4556 5752 4952 5454 4e45 6120 7466 7265     VERWRITTEN after
   c77c0:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c77d0:	6e6f 6573 203a 5243 2043 6166 6c69 6465     onse: CRC failed
   c77e0:	6120 7466 7265 0020 6177 7469 6f46 4172      after .waitForA
   c77f0:	4b43 6552 7073 6e6f 6573 203a 6164 6174     CKResponse: data
   c7800:	7720 7361 4e20 544f 4341 4e4b 574f 454c      was NOTACKNOWLE
   c7810:	4744 4445 2820 414e 4b43 2029 6661 6574     DGED (NACK) afte
   c7820:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c7830:	6f70 736e 3a65 5620 4c41 4449 6420 7461     ponse: VALID dat
   c7840:	2061 6e61 2064 4e49 4156 494c 2044 4341     a and INVALID AC
   c7850:	204b 6572 6563 7669 6465 6120 7466 7265     K received after
   c7860:	0020 6177 7469 6f46 4172 4b43 6552 7073      .waitForACKResp
   c7870:	6e6f 6573 203a 4e49 4156 494c 2044 6164     onse: INVALID da
   c7880:	6174 6120 646e 4920 564e 4c41 4449 4120     ta and INVALID A
   c7890:	4b43 7220 6365 6965 6576 2064 6661 6574     CK received afte
   c78a0:	2072 7700 6961 4674 726f 4341 524b 7365     r .waitForACKRes
   c78b0:	6f70 736e 3a65 5420 4d49 4f45 5455 7720     ponse: TIMEOUT w
   c78c0:	7469 2068 6176 696c 2064 6164 6174 6120     ith valid data a
   c78d0:	7466 7265 0020 6d20 6573 2e63 0020 6177     fter . msec. .wa
   c78e0:	7469 6f46 4172 4b43 6552 7073 6e6f 6573     itForACKResponse
   c78f0:	203a 4954 454d 554f 2054 6661 6574 2072     : TIMEOUT after 
   c7900:	2000 736d 6365 002e 6177 7469 6f46 4e72     . msec..waitForN
   c7910:	416f 4b43 6552 7073 6e6f 6573 203a 6176     oACKResponse: va
   c7920:	696c 2064 6164 6174 7720 7469 2068 4c43     lid data with CL
   c7930:	2f53 4449 6d20 7461 6863 6120 7466 7265     S/ID match after
   c7940:	0020 6177 7469 6f46 4e72 416f 4b43 6552      .waitForNoACKRe
   c7950:	7073 6e6f 6573 203a 6164 6174 6220 6965     sponse: data bei
   c7960:	676e 4f20 4556 5752 4952 5454 4e45 6120     ng OVERWRITTEN a
   c7970:	7466 7265 0020 6177 7469 6f46 4e72 416f     fter .waitForNoA
   c7980:	4b43 6552 7073 6e6f 6573 203a 4c43 2f53     CKResponse: CLS/
   c7990:	4449 6d20 7461 6863 6220 7475 6620 6961     ID match but fai
   c79a0:	656c 2064 5243 2043 6661 6574 2072 7700     led CRC after .w
   c79b0:	6961 4674 726f 6f4e 4341 524b 7365 6f70     aitForNoACKRespo
   c79c0:	736e 3a65 5420 4d49 4f45 5455 6120 7466     nse: TIMEOUT aft
   c79d0:	7265 0020 6d20 6573 2e63 4e20 206f 6170     er . msec. No pa
   c79e0:	6b63 7465 7220 6365 6965 6576 2e64 0a00     cket received...
   c79f0:	6553 646e 6e69 3a67 0020 6553 646e 4920     Sending: .Send I
   c7a00:	4332 4320 6d6f 616d 646e 6620 6961 656c     2C Command faile
   c7a10:	0064 6573 646e 6f43 6d6d 6e61 3a64 5720     d.sendCommand: W
   c7a20:	6961 6974 676e 6620 726f 4120 4b43 7220     aiting for ACK r
   c7a30:	7365 6f70 736e 0065 6573 646e 6f43 6d6d     esponse.sendComm
   c7a40:	6e61 3a64 5720 6961 6974 676e 6620 726f     and: Waiting for
   c7a50:	4e20 206f 4341 204b 6572 7073 6e6f 6573      No ACK response
   c7a60:	6900 696e 5074 6361 656b 5574 5842 414e     .initPacketUBXNA
   c7a70:	5056 5456 203a 4152 204d 6c61 6f6c 2063     VPVT: RAM alloc 
   c7a80:	6166 6c69 6465 0021 6e69 7469 6150 6b63     failed!.initPack
   c7a90:	7465 4255 4358 4746 5250 3a54 5220 4d41     etUBXCFGPRT: RAM
   c7aa0:	6120 6c6c 636f 6620 6961 656c 2164 6200      alloc failed!.b
   c7ab0:	6765 6e69 203a 7369 6f43 6e6e 6365 6574     egin: isConnecte
   c7ac0:	2064 202d 6573 6f63 646e 6120 7474 6d65     d - second attem
   c7ad0:	7470 6200 6765 6e69 203a 7369 6f43 6e6e     pt.begin: isConn
   c7ae0:	6365 6574 2064 202d 6874 7269 2064 7461     ected - third at
   c7af0:	6574 706d 0074 6562 6967 3a6e 7420 6968     tempt.begin: thi
   c7b00:	6472 6120 7474 6d65 7470 6620 6961 656c     rd attempt faile
   c7b10:	2e64 4120 7373 6d75 6e69 2067 7573 6363     d. Assuming succ
   c7b20:	7365 2e73 2e2e 0000                         ess.....

000c7b28 <CSWTCH.334>:
   c7b28:	0014 0000 0010 0012 0020 0000 005c 0000     ........ ...\...
   c7b38:	0014 0000 0000 0000 0000 0000 0000 0000     ................
   c7b48:	0014 0024 001c 0024 0000 0000 0074 0000     ..$...$.....t...
	...
   c7b68:	0021 0014 0000 0000 0000 0018 0000 0000     !...............
	...
   c7b90:	0bfc 0000 0000 0000 0000 0000 0028 0040     ............(.@.
	...
   c7be4:	0000 0010 0004                              ......

000c7bea <CSWTCH.335>:
   c7bea:	0088 0234 0000 0000 0000 0000 0000 0000     ..4.............
	...
   c7c06:	002c 0000 0000 0000 0010 0024               ,.........$.

000c7c12 <CSWTCH.336>:
   c7c12:	2048 0024 0000                              H $...

000c7c18 <_ZTVN5spark13EthernetClassE>:
	...
   c7c20:	e3b3 000b e3a9 000b e39f 000b e395 000b     ................
   c7c30:	e389 000b e37d 000b 1a35 000c 1a3d 000c     ....}...5...=...
   c7c40:	e371 000b e369 000b e35f 000b e355 000b     q...i..._...U...
   c7c50:	1a6d 000c                                   m...

000c7c54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c7c54:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c7c64:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c7c74:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c7c84:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c7c94:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c7ca4:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c7cb4:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c7cc4:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c7cd4:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c7ce4:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c7cf4:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   c7d04:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   c7d14:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   c7d24:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   c7d34:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   c7d44:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   c7d54:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   c7d64:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   c7d74:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   c7d84:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   c7d94:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   c7da4:	6369 002e                                   ic..

000c7da8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7db0:	e8bb 000b e91d 000b e9f1 000b e947 000b     ............G...
   c7dc0:	e8bd 000b                                   ....

000c7dc4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7dcc:	e8b7 000b e92b 000b e8b9 000b e94d 000b     ....+.......M...
   c7ddc:	e8dd 000b                                   ....

000c7de0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7de8:	e8b5 000b e939 000b f1bd 000b e953 000b     ....9.......S...
   c7df8:	e8fd 000b                                   ....

000c7dfc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c7e08:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000c7e1a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   c7e1a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000c7e2a <_ZN8particle7BleUuid9BASE_UUIDE>:
   c7e2a:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   c7e3a:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   c7e4a:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   c7e5a:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   c7e6a:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   c7e7a:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   c7e8a:	6961 736c 3d20 0020 0a0d 6d00 6c00 006e     ails = ....m.ln.
   c7e9a:	6e66 6300 646f 0065 6564 6174 6c69 0000     fn.code.detail..
	...

000c7eac <_ZTVN5spark16JSONStreamWriterE>:
	...
   c7eb4:	fdd9 000b fdff 000b fdbd 000b 1b87 000c     ................

000c7ec4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   c7ecc:	0235 000c 024d 000c 098d 000c 40d5 000b     5...M........@..

000c7edc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c7ee4:	0261 000c 0275 000c 0b31 000c fdc5 000b     a...u...1.......

000c7ef4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c7efc:	fdd7 000b fe0d 000b 08f1 000c fdc7 000b     ................

000c7f0c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c7f14:	fdd5 000b fe1b 000b 019d 000c fe3d 000b     ............=...
   c7f24:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   c7f34:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000c7f40 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c7f48:	0f9d 000c 0fa3 000c 0fe1 000c 0fb1 000c     ................
   c7f58:	0f9f 000c                                   ....

000c7f5c <_ZTV9IPAddress>:
	...
   c7f64:	1529 000c 1519 000c 151b 000c               )...........

000c7f70 <_ZTV9USBSerial>:
	...
   c7f78:	160f 000c 1677 000c 164d 000c fc21 000b     ....w...M...!...
   c7f88:	163f 000c 1611 000c 1621 000c 1671 000c     ?.......!...q...
   c7f98:	1631 000c 1609 000c                         1.......

000c7fa0 <_ZTVN5spark13CellularClassE>:
	...
   c7fa8:	17d7 000c 17cd 000c 17c3 000c 1779 000c     ............y...
   c7fb8:	17b7 000c 17ab 000c 1a35 000c 1a3d 000c     ........5...=...
   c7fc8:	179f 000c 1797 000c 178d 000c 1783 000c     ................
   c7fd8:	1a6d 000c                                   m...

000c7fdc <_ZTV11USARTSerial>:
	...
   c7fe4:	1811 000c 187d 000c 1855 000c fc21 000b     ....}...U...!...
   c7ff4:	1825 000c 1841 000c 1833 000c 184f 000c     %...A...3...O...
   c8004:	1813 000c 1817 000c                         ........

000c800c <_ZTV7TwoWire>:
	...
   c8014:	18f1 000c 193b 000c 1913 000c 18f3 000c     ....;...........
   c8024:	191b 000c 1923 000c 192b 000c 1933 000c     ....#...+...3...

000c8034 <_ZTVN5spark12NetworkClassE>:
	...
   c803c:	19f5 000c 19ff 000c 1a09 000c 1a13 000c     ................
   c804c:	1a1d 000c 1a29 000c 1a35 000c 1a3d 000c     ....)...5...=...
   c805c:	1a45 000c 1a51 000c 1a59 000c 1a63 000c     E...Q...Y...c...
   c806c:	1a6d 000c 7525 7500 3025 7834                m...%u.u%04x.

000c8079 <_ZSt7nothrow>:
	...

000c807a <_ZTSSt19_Sp_make_shared_tag>:
   c807a:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c808a:	6572 5f64 6174 0067 0000                    red_tag...

000c8094 <_ZTISt19_Sp_make_shared_tag>:
   c8094:	80d4 000c 807a 000c                         ....z...

000c809c <_ZTIN10__cxxabiv117__class_type_infoE>:
   c809c:	8134 000c 80a8 000c 8158 000c               4.......X...

000c80a8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c80a8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c80b8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c80c8:	0045 0000                                   E...

000c80cc <_ZTVN10__cxxabiv117__class_type_infoE>:
   c80cc:	0000 0000 809c 000c 2181 000c 2195 000c     .........!...!..
   c80dc:	2329 000c 2329 000c 21ff 000c 2141 000c     )#..)#...!..A!..
   c80ec:	21e7 000c 21a9 000c 2173 000c               .!...!..s!..

000c80f8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c80f8:	8134 000c 8104 000c 809c 000c               4...........

000c8104 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c8104:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c8114:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c8124:	666e 456f 0000 0000                         nfoE....

000c812c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c812c:	0000 0000 80f8 000c 2229 000c 223d 000c     ........)"..="..
   c813c:	2329 000c 2329 000c 21ff 000c 2141 000c     )#..)#...!..A!..
   c814c:	22fd 000c 2289 000c 2251 000c               ."..."..Q"..

000c8158 <_ZTISt9type_info>:
   c8158:	80d4 000c 8160 000c                         ....`...

000c8160 <_ZTSSt9type_info>:
   c8160:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000c8170 <CSWTCH.8>:
   c8170:	2d18 5444 21fb bfe9 21d2 7f33 d97c 4002     .-DT.!...!3.|..@
   c8180:	21d2 7f33 d97c c002                         .!3.|...

000c8188 <CSWTCH.9>:
   c8188:	0000 0000 0000 8000 2d18 5444 21fb 4009     .........-DT.!.@
   c8198:	2d18 5444 21fb c009                         .-DT.!..

000c81a0 <CSWTCH.8>:
   c81a0:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000c81ac <CSWTCH.9>:
   c81ac:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000c81b8 <npio2_hw>:
   c81b8:	0f00 3fc9 0f00 4049 cb00 4096 0f00 40c9     ...?..I@...@...@
   c81c8:	5300 40fb cb00 4116 ed00 412f 0f00 4149     .S.@...A../A..IA
   c81d8:	3100 4162 5300 417b 3a00 418a cb00 4196     .1bA.S{A.:.A...A
   c81e8:	5c00 41a3 ed00 41af 7e00 41bc 0f00 41c9     .\.A...A.~.A...A
   c81f8:	a000 41d5 3100 41e2 c200 41ee 5300 41fb     ...A.1.A...A.S.A
   c8208:	f200 4203 3a00 420a 8300 4210 cb00 4216     ...B.:.B...B...B
   c8218:	1400 421d 5c00 4223 a500 4229 ed00 422f     ...B.\#B..)B../B
   c8228:	3600 4236 7e00 423c c700 4242 0f00 4249     .66B.~<B..BB..IB

000c8238 <two_over_pi>:
   c8238:	00a2 0000 00f9 0000 0083 0000 006e 0000     ............n...
   c8248:	004e 0000 0044 0000 0015 0000 0029 0000     N...D.......)...
   c8258:	00fc 0000 0027 0000 0057 0000 00d1 0000     ....'...W.......
   c8268:	00f5 0000 0034 0000 00dd 0000 00c0 0000     ....4...........
   c8278:	00db 0000 0062 0000 0095 0000 0099 0000     ....b...........
   c8288:	003c 0000 0043 0000 0090 0000 0041 0000     <...C.......A...
   c8298:	00fe 0000 0051 0000 0063 0000 00ab 0000     ....Q...c.......
   c82a8:	00de 0000 00bb 0000 00c5 0000 0061 0000     ............a...
   c82b8:	00b7 0000 0024 0000 006e 0000 003a 0000     ....$...n...:...
   c82c8:	0042 0000 004d 0000 00d2 0000 00e0 0000     B...M...........
   c82d8:	0006 0000 0049 0000 002e 0000 00ea 0000     ....I...........
   c82e8:	0009 0000 00d1 0000 0092 0000 001c 0000     ................
   c82f8:	00fe 0000 001d 0000 00eb 0000 001c 0000     ................
   c8308:	00b1 0000 0029 0000 00a7 0000 003e 0000     ....).......>...
   c8318:	00e8 0000 0082 0000 0035 0000 00f5 0000     ........5.......
   c8328:	002e 0000 00bb 0000 0044 0000 0084 0000     ........D.......
   c8338:	00e9 0000 009c 0000 0070 0000 0026 0000     ........p...&...
   c8348:	00b4 0000 005f 0000 007e 0000 0041 0000     ...._...~...A...
   c8358:	0039 0000 0091 0000 00d6 0000 0039 0000     9...........9...
   c8368:	0083 0000 0053 0000 0039 0000 00f4 0000     ....S...9.......
   c8378:	009c 0000 0084 0000 005f 0000 008b 0000     ........_.......
   c8388:	00bd 0000 00f9 0000 0028 0000 003b 0000     ........(...;...
   c8398:	001f 0000 00f8 0000 0097 0000 00ff 0000     ................
   c83a8:	00de 0000 0005 0000 0098 0000 000f 0000     ................
   c83b8:	00ef 0000 002f 0000 0011 0000 008b 0000     ..../...........
   c83c8:	005a 0000 000a 0000 006d 0000 001f 0000     Z.......m.......
   c83d8:	006d 0000 0036 0000 007e 0000 00cf 0000     m...6...~.......
   c83e8:	0027 0000 00cb 0000 0009 0000 00b7 0000     '...............
   c83f8:	004f 0000 0046 0000 003f 0000 0066 0000     O...F...?...f...
   c8408:	009e 0000 005f 0000 00ea 0000 002d 0000     ...._.......-...
   c8418:	0075 0000 0027 0000 00ba 0000 00c7 0000     u...'...........
   c8428:	00eb 0000 00e5 0000 00f1 0000 007b 0000     ............{...
   c8438:	003d 0000 0007 0000 0039 0000 00f7 0000     =.......9.......
   c8448:	008a 0000 0052 0000 0092 0000 00ea 0000     ....R...........
   c8458:	006b 0000 00fb 0000 005f 0000 00b1 0000     k......._.......
   c8468:	001f 0000 008d 0000 005d 0000 0008 0000     ........].......
   c8478:	0056 0000 0003 0000 0030 0000 0046 0000     V.......0...F...
   c8488:	00fc 0000 007b 0000 006b 0000 00ab 0000     ....{...k.......
   c8498:	00f0 0000 00cf 0000 00bc 0000 0020 0000     ............ ...
   c84a8:	009a 0000 00f4 0000 0036 0000 001d 0000     ........6.......
   c84b8:	00a9 0000 00e3 0000 0091 0000 0061 0000     ............a...
   c84c8:	005e 0000 00e6 0000 001b 0000 0008 0000     ^...............
   c84d8:	0065 0000 0099 0000 0085 0000 005f 0000     e..........._...
   c84e8:	0014 0000 00a0 0000 0068 0000 0040 0000     ........h...@...
   c84f8:	008d 0000 00ff 0000 00d8 0000 0080 0000     ................
   c8508:	004d 0000 0073 0000 0027 0000 0031 0000     M...s...'...1...
   c8518:	0006 0000 0006 0000 0015 0000 0056 0000     ............V...
   c8528:	00ca 0000 0073 0000 00a8 0000 00c9 0000     ....s...........
   c8538:	0060 0000 00e2 0000 007b 0000 00c0 0000     `.......{.......
   c8548:	008c 0000 006b 0000                         ....k...

000c8550 <PIo2>:
   c8550:	0000 3fc9 0000 39f0 0000 37da 0000 33a2     ...?...9...7...3
   c8560:	0000 2e84 0000 2b50 0000 27c2 0000 22d0     ......P+...'..."
   c8570:	0000 1fc4 0000 1bc6 0000 1744               ..........D.

000c857c <init_jk>:
   c857c:	0004 0000 0007 0000 0009 0000               ............

000c8588 <atanhi>:
   c8588:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
   c8598:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

000c85a8 <atanlo>:
   c85a8:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
   c85b8:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<

000c85c8 <atanhi>:
   c85c8:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000c85d8 <atanlo>:
   c85d8:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3
   c85e8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   c85f8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   c8608:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   c8618:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   c8628:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c8638:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c8648:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   c8658:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c8668:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   c8678:	2e64 0063 666e 6900 696e 7974 6100 006e     d.c.nf.inity.an.

000c8688 <fpi.1>:
   c8688:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c8698:	0000 0000                                   ....

000c869c <fpinan.0>:
   c869c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c86ac:	0000 0000                                   ....

000c86b0 <tinytens>:
   c86b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c86c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c86d0:	6f43 64ac 0628 1168                         Co.d(.h.

000c86d8 <_ctype_>:
   c86d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c86e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c86f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c8708:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c8718:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c8728:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c8738:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c8748:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c8758:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c87d8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c87e8:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c87f8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c8808:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c8818:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c8828:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c8838:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c8848:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c8858:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c8868:	6874 7865 632e 0000                         thex.c..

000c8870 <_C_numeric_locale>:
   c8870:	70ab 000c 7e94 000c dbb8 2003 4f50 4953     .p...~..... POSI
   c8880:	0058 6d2f 746e 772f 726f 736b 6170 6563     X./mnt/workspace
   c8890:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c88a0:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c88b0:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c88c0:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c88d0:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c88e0:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c88f0:	732f 6474 696c 2f62 706d 6572 2e63 0063     /stdlib/mprec.c.

000c8900 <__mprec_bigtens>:
   c8900:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c8910:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c8920:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c8928 <__mprec_tens>:
   c8928:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c8938:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c8948:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c8958:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c8968:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c8978:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c8988:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c8998:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c89a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c89b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c89c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c89d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c89e8:	9db4 79d9 7843 44ea                         ...yCx.D

000c89f0 <p05.0>:
   c89f0:	0005 0000 0019 0000 007d 0000               ........}...

000c89fc <link_const_variable_data_end>:
   c89fc:	000b67b1 	.word	0x000b67b1
   c8a00:	000be3bd 	.word	0x000be3bd
   c8a04:	000be69d 	.word	0x000be69d
   c8a08:	000bfc11 	.word	0x000bfc11
   c8a0c:	000c097d 	.word	0x000c097d
   c8a10:	000c0e25 	.word	0x000c0e25
   c8a14:	000c0e59 	.word	0x000c0e59
   c8a18:	000c17e1 	.word	0x000c17e1
   c8a1c:	000c1b45 	.word	0x000c1b45
